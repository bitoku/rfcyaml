- contents:
  - ' Session Traversal Utilities for NAT (STUN) Usage for Consent Freshness

    '
  title: __initial_text__
- contents:
  - "Abstract\n   To prevent WebRTC applications, such as browsers, from launching\n
    \  attacks by sending traffic to unwilling victims, periodic consent to\n   send
    needs to be obtained from remote endpoints.\n   This document describes a consent
    mechanism using a new Session\n   Traversal Utilities for NAT (STUN) usage.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7675.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n   2.  Applicability . . . . . . . . . . . . . . . . . . . . .
    . . .   3\n   3.  Terminology . . . . . . . . . . . . . . . . . . . . . . . .
    .   3\n   4.  Design Considerations . . . . . . . . . . . . . . . . . . . .   4\n
    \  5.  Solution  . . . . . . . . . . . . . . . . . . . . . . . . . .   4\n     5.1.
    \ Expiration of Consent . . . . . . . . . . . . . . . . . .   5\n     5.2.  Immediate
    Revocation of Consent . . . . . . . . . . . . .   6\n   6.  DiffServ Treatment
    for Consent  . . . . . . . . . . . . . . .   7\n   7.  DTLS Applicability  . .
    . . . . . . . . . . . . . . . . . . .   7\n   8.  Security Considerations . .
    . . . . . . . . . . . . . . . . .   7\n   9.  References  . . . . . . . . . .
    . . . . . . . . . . . . . . .   8\n     9.1.  Normative References  . . . . .
    . . . . . . . . . . . . .   8\n     9.2.  Informative References  . . . . . .
    . . . . . . . . . . .   8\n   Acknowledgements  . . . . . . . . . . . . . . .
    . . . . . . . . .   9\n   Authors' Addresses  . . . . . . . . . . . . . . . .
    . . . . . . .  10\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   To prevent attacks on peers, endpoints have to ensure the
    remote peer\n   is willing to receive traffic.  Verification of peer consent before\n
    \  sending traffic is necessary in deployments like WebRTC to ensure\n   that
    a malicious JavaScript cannot use the browser as a platform for\n   launching
    attacks.  This is performed both when the session is first\n   established to
    the remote peer using Interactive Connectivity\n   Establishment (ICE) [RFC5245]
    connectivity checks, and periodically\n   for the duration of the session using
    the procedures defined in this\n   document.\n   When a session is first established,
    ICE implementations obtain an\n   initial consent to send by performing STUN connectivity
    checks.  This\n   document describes a new STUN usage with exchange of request
    and\n   response messages that verifies the remote peer's ongoing consent to\n
    \  receive traffic.  This consent expires after a period of time and\n   needs
    to be continually renewed, which ensures that consent can be\n   terminated.\n
    \  This document defines what it takes to obtain, maintain, and lose\n   consent
    to send.  Consent to send applies to a single 5-tuple.  How\n   applications react
    to changes in consent is not described in this\n   document.  The consent mechanism
    does not update the ICE procedures\n   defined in [RFC5245].\n   Consent is obtained
    only by full ICE implementations.  An ICE-lite\n   agent (as defined in Section
    2.7 of [RFC5245]) does not generate\n   connectivity checks or run the ICE state
    machine.  Hence, an ICE-lite\n   agent does not generate consent checks and will
    only respond to any\n   checks that it receives.  No changes are required to ICE-lite\n
    \  implementations in order to respond to consent checks, as they are\n   processed
    as normal ICE connectivity checks.\n"
  title: 1.  Introduction
- contents:
  - "2.  Applicability\n   This document defines what it takes to obtain, maintain,
    and lose\n   consent to send using ICE.  Sections 4.4 and 5.3 of [WebRTC-SA]\n
    \  further explain the value of obtaining and maintaining consent.\n   Other applications
    that have similar security requirements to verify\n   peer consent before sending
    non-ICE packets can use the consent\n   mechanism described in this document.
    \ The mechanism of how\n   applications are made aware of consent expiration is
    outside the\n   scope of the document.\n"
  title: 2.  Applicability
- contents:
  - "3.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in [RFC2119].\n   Consent:
    \ The mechanism of obtaining permission from the remote\n      endpoint to send
    non-ICE traffic to a remote transport address.\n      Consent is obtained using
    ICE.  Note that this is an application-\n      level consent; no human intervention
    is involved.\n   Consent Freshness:  Maintaining and renewing consent over time.\n
    \  Transport Address:  The remote peer's IP address and UDP or TCP port\n      number.\n"
  title: 3.  Terminology
- contents:
  - "4.  Design Considerations\n   Although ICE requires periodic keepalive traffic
    to keep NAT bindings\n   alive (see Section 10 of [RFC5245] and also [RFC6263]),
    those\n   keepalives are sent as STUN Indications that are send-and-forget, and\n
    \  do not evoke a response.  A response is necessary for consent to\n   continue
    sending traffic.  Thus, we need a request/response mechanism\n   for consent freshness.
    \ ICE can be used for that mechanism because\n   ICE implementations are already
    required to continue listening for\n   ICE messages, as described in Section 10
    of [RFC5245].  STUN binding\n   requests sent for consent freshness also serve
    the keepalive purpose\n   (i.e., to keep NAT bindings alive).  Because of that,
    dedicated\n   keepalives (e.g., STUN Binding Indications) are not sent on candidate\n
    \  pairs where consent requests are sent, in accordance with\n   Section 20.2.3
    of [RFC5245].\n   When Secure Real-time Transport Protocol (SRTP) is used, the\n
    \  following considerations are applicable.  SRTP is encrypted and\n   authenticated
    with symmetric keys; that is, both sender and receiver\n   know the keys.  With
    two party sessions, receipt of an authenticated\n   packet from the single remote
    party is a strong assurance the packet\n   came from that party.  However, when
    a session involves more than two\n   parties, all of whom know each other's keys,
    any of those parties\n   could have sent (or spoofed) the packet.  Such shared
    key\n   distributions are possible with some Multimedia Internet KEYing\n   (MIKEY)
    [RFC3830] modes, Security Descriptions [RFC4568], and\n   Encrypted Key Transport
    (EKT) [EKT].  Thus, in such shared keying\n   distributions, receipt of an authenticated
    SRTP packet is not\n   sufficient to verify consent.\n   The mechanism proposed
    in the document is an optional extension to\n   the ICE protocol; it can be deployed
    at one end of the two-party\n   communication session without impact on the other
    party.\n"
  title: 4.  Design Considerations
- contents:
  - "5.  Solution\n   Initial consent to send traffic is obtained using ICE [RFC5245].
    \ An\n   endpoint gains consent to send on a candidate pair when the pair\n   enters
    the Succeeded ICE state.  This document establishes a\n   30-second expiry time
    on consent. 30 seconds was chosen to balance\n   the need to minimize the time
    taken to respond to a loss of consent\n   with the desire to reduce the occurrence
    of spurious failures.\n   ICE does not identify when consent to send traffic ends.
    \ This\n   document describes two ways in which consent to send ends: expiration\n
    \  of consent and immediate revocation of consent, which are discussed\n   in
    the following sections.\n"
  - contents:
    - "5.1.  Expiration of Consent\n   A full ICE implementation obtains consent to
      send using ICE.  After\n   ICE concludes on a particular candidate pair and
      whenever the\n   endpoint sends application data on that pair consent is maintained\n
      \  following the procedure described in this document.\n   An endpoint MUST
      NOT send data other than the messages used to\n   establish consent unless the
      receiving endpoint has consented to\n   receive data.  Connectivity checks that
      are paced as described in\n   Section 16 of [RFC5245], and responses to connectivity
      checks are\n   permitted.  That is, no application data (e.g., RTP or Datagram\n
      \  Transport Layer Security (DTLS)), can be sent until consent is\n   obtained.\n
      \  Explicit consent to send is obtained and maintained by sending a STUN\n   binding
      request to the remote peer's transport address and receiving\n   a matching,
      authenticated, non-error STUN binding response from the\n   remote peer's transport
      address.  These STUN binding requests and\n   responses are authenticated using
      the same short-term credentials as\n   the initial ICE exchange.\n   Note:  Although
      TCP has its own consent mechanism (TCP\n      acknowledgements), consent is
      necessary over a TCP connection\n      because it could be translated to a UDP
      connection (e.g.,\n      [RFC6062]).\n   Consent expires after 30 seconds.  That
      is, if a valid STUN binding\n   response has not been received from the remote
      peer's transport\n   address in 30 seconds, the endpoint MUST cease transmission
      on that\n   5-tuple.  STUN consent responses received after consent expiry do
      not\n   re-establish consent and may be discarded or cause an ICMP error.\n
      \  To prevent expiry of consent, a STUN binding request can be sent\n   periodically.
      \ To prevent synchronization of consent checks, each\n   interval MUST be randomized
      from between 0.8 and 1.2 times the basic\n   period.  Implementations SHOULD
      set a default interval of 5 seconds,\n   resulting in a period between checks
      of 4 to 6 seconds.\n   Implementations MUST NOT set the period between checks
      to less than 4\n   seconds.  This timer is independent of the consent expiry
      timeout.\n   Each STUN binding request for consent MUST use a new STUN transaction\n
      \  identifier, as described in Section 6 of [RFC5389].  Each STUN\n   binding
      request for consent is transmitted once only.  A sender\n   therefore cannot
      assume that it will receive a response for every\n   consent request, and a
      response might be for a previous request\n   (rather than for the most recently
      sent request).\n   An endpoint SHOULD await a binding response for each request
      it sends\n   for a time based on the estimated round-trip time (RTT) (see\n
      \  Section 7.2.1 of [RFC5389]) with an allowance for variation in\n   network
      delay.  The RTT value can be updated as described in\n   [RFC5389].  All outstanding
      STUN consent transactions for a candidate\n   pair MUST be discarded when consent
      expires.\n   To meet the security needs of consent, an untrusted application\n
      \  (e.g., JavaScript or signaling servers) MUST NOT be able to obtain or\n   control
      the STUN transaction identifier, because that enables\n   spoofing of STUN responses,
      falsifying consent.\n   To prevent attacks on the peer during ICE restart, an
      endpoint that\n   continues to send traffic on the previously validated candidate
      pair\n   during ICE restart MUST continue to perform consent freshness on that\n
      \  candidate pair as described earlier.\n   While TCP affords some protection
      from off-path attackers ([RFC5961],\n   [RFC4953]), there is still a risk an
      attacker could cause a TCP\n   sender to send forever by spoofing ACKs.  To
      prevent such an attack,\n   consent checks MUST be performed over all transport
      connections,\n   including TCP.  In this way, an off-path attacker spoofing
      TCP\n   segments cannot cause a TCP sender to send once the consent timer\n
      \  expires (30 seconds).\n   An endpoint does not need to maintain consent if
      it does not send\n   application data.  However, an endpoint MUST regain consent
      before it\n   resumes sending application data.  In the absence of any packets,
      any\n   bindings in middleboxes for the flow might expire.  Furthermore,\n   having
      one peer unable to send is detrimental to many protocols.\n   Absent better
      information about the network, if an endpoint needs to\n   ensure its NAT or
      firewall mappings do not expire, this can be done\n   using keepalive or other
      techniques (see Section 10 of [RFC5245] and\n   see [RFC6263]).\n   After consent
      is lost, the same ICE credentials MUST NOT be used on\n   the affected 5-tuple
      again.  That means that a new session, or an ICE\n   restart, is needed to obtain
      consent to send on the affected\n   candidate pair.\n"
    title: 5.1.  Expiration of Consent
  - contents:
    - "5.2.  Immediate Revocation of Consent\n   In some cases, it is useful to signal
      that consent is terminated\n   rather than relying on a timeout.\n   Consent
      for sending application data is immediately revoked by\n   receipt of an authenticated
      message that closes the connection (e.g.,\n   a Transport Layer Security (TLS)
      fatal alert) or receipt of a valid\n   and authenticated STUN response with
      error code Forbidden (403).\n   Note however that consent revocation messages
      can be lost on the\n   network, so an endpoint could resend these messages,
      or wait for\n   consent to expire.\n   Receipt of an unauthenticated message
      that closes a connection (e.g.,\n   TCP FIN) does not indicate revocation of
      consent.  Thus, an endpoint\n   receiving an unauthenticated end-of-session
      message SHOULD continue\n   sending media (over connectionless transport) or
      attempt to\n   re-establish the connection (over connection-oriented transport)\n
      \  until consent expires or it receives an authenticated message\n   revoking
      consent.\n   Note that an authenticated Secure Real-time Transport Control\n
      \  Protocol (SRTCP) BYE does not terminate consent; it only indicates\n   the
      associated SRTP source has quit.\n"
    title: 5.2.  Immediate Revocation of Consent
  title: 5.  Solution
- contents:
  - "6.  DiffServ Treatment for Consent\n   It is RECOMMENDED that STUN consent checks
    use the same Diffserv\n   Codepoint markings as the ICE connectivity checks described
    in\n   Section 7.1.2.4 of [RFC5245] for a given 5-tuple.\n   Note:  It is possible
    that different Diffserv Codepoints are used by\n      different media over the
    same transport address [WebRTC-QoS].\n      Such a case is outside the scope of
    this document.\n"
  title: 6.  DiffServ Treatment for Consent
- contents:
  - "7.  DTLS Applicability\n   The DTLS applicability is identical to what is described
    in\n   Section 4.2 of [RFC7350].\n"
  title: 7.  DTLS Applicability
- contents:
  - "8.  Security Considerations\n   This document describes a security mechanism,
    details of which are\n   mentioned in Sections 4.1 and 4.2 of [RFC7350].  Consent
    requires 96\n   bits transaction ID defined in Section 6 of [RFC5389] to be uniformly\n
    \  and randomly chosen from the interval 0 .. 2**96-1, and be\n   cryptographically
    strong.  This is good enough security against an\n   off-path attacker replaying
    old STUN consent responses.  Consent\n   Verification to avoid attacks using a
    browser as an attack platform\n   against machines is discussed in Sections 3.3
    and 4.2 of\n   [WebRTC-SEC].\n   The security considerations discussed in [RFC5245]
    should also be\n   taken into account.\n"
  title: 8.  Security Considerations
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n
      \             DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC5245]  Rosenberg, J., \"Interactive Connectivity Establishment\n              (ICE):
      A Protocol for Network Address Translator (NAT)\n              Traversal for
      Offer/Answer Protocols\", RFC 5245,\n              DOI 10.17487/RFC5245, April
      2010,\n              <http://www.rfc-editor.org/info/rfc5245>.\n   [RFC5389]
      \ Rosenberg, J., Mahy, R., Matthews, P., and D. Wing,\n              \"Session
      Traversal Utilities for NAT (STUN)\", RFC 5389,\n              DOI 10.17487/RFC5389,
      October 2008,\n              <http://www.rfc-editor.org/info/rfc5389>.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [EKT]      Mattsson, J., McGrew, D., and D.
      Wing, \"Encrypted Key\n              Transport for Secure RTP\", Work in Progress,\n
      \             draft-ietf-avtcore-srtp-ekt-03, October 2014.\n   [RFC3830]  Arkko,
      J., Carrara, E., Lindholm, F., Naslund, M., and K.\n              Norrman, \"MIKEY:
      Multimedia Internet KEYing\", RFC 3830,\n              DOI 10.17487/RFC3830,
      August 2004,\n              <http://www.rfc-editor.org/info/rfc3830>.\n   [RFC4568]
      \ Andreasen, F., Baugher, M., and D. Wing, \"Session\n              Description
      Protocol (SDP) Security Descriptions for Media\n              Streams\", RFC
      4568, DOI 10.17487/RFC4568, July 2006,\n              <http://www.rfc-editor.org/info/rfc4568>.\n
      \  [RFC4953]  Touch, J., \"Defending TCP Against Spoofing Attacks\", RFC\n              4953,
      DOI 10.17487/RFC4953, July 2007,\n              <http://www.rfc-editor.org/info/rfc4953>.\n
      \  [RFC5961]  Ramaiah, A., Stewart, R., and M. Dalal, \"Improving TCP's\n              Robustness
      to Blind In-Window Attacks\", RFC 5961,\n              DOI 10.17487/RFC5961,
      August 2010,\n              <http://www.rfc-editor.org/info/rfc5961>.\n   [RFC6062]
      \ Perreault, S., Ed. and J. Rosenberg, \"Traversal Using\n              Relays
      around NAT (TURN) Extensions for TCP Allocations\",\n              RFC 6062,
      DOI 10.17487/RFC6062, November 2010,\n              <http://www.rfc-editor.org/info/rfc6062>.\n
      \  [RFC6263]  Marjou, X. and A. Sollaud, \"Application Mechanism for\n              Keeping
      Alive the NAT Mappings Associated with RTP / RTP\n              Control Protocol
      (RTCP) Flows\", RFC 6263,\n              DOI 10.17487/RFC6263, June 2011,\n
      \             <http://www.rfc-editor.org/info/rfc6263>.\n   [RFC7350]  Petit-Huguenin,
      M. and G. Salgueiro, \"Datagram Transport\n              Layer Security (DTLS)
      as Transport for Session Traversal\n              Utilities for NAT (STUN)\",
      RFC 7350, DOI 10.17487/RFC7350,\n              August 2014, <http://www.rfc-editor.org/info/rfc7350>.\n
      \  [WebRTC-QoS]\n              Dhesikan, S., Jennings, C., Druta, D., Jones,
      P., and J.\n              Polk, \"DSCP and other packet markings for RTCWeb
      QoS\",\n              Work in Progress, draft-ietf-tsvwg-rtcweb-qos-04, July\n
      \             2015.\n   [WebRTC-SA]\n              Rescorla, E., \"WebRTC Security
      Architecture\", Work in\n              Progress, draft-ietf-rtcweb-security-arch-11,
      March 2015.\n   [WebRTC-SEC]\n              Rescorla, E., \"Security Considerations
      for WebRTC\", Work\n              in Progress, draft-ietf-rtcweb-security-08,
      February 2015.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Acknowledgements\n   Thanks to Eric Rescorla, Harald Alvestrand, Bernard Aboba,
    Magnus\n   Westerlund, Cullen Jennings, Christer Holmberg, Simon Perreault, Paul\n
    \  Kyzivat, Emil Ivov, Jonathan Lennox, Inaki Baz Castillo, Rajmohan\n   Banavi,
    Christian Groves, Meral Shirazipour, David Black, Barry\n   Leiba, Ben Campbell,
    and Stephen Farrell for their valuable inputs\n   and comments.  Thanks to Christer
    Holmberg for doing a thorough\n   review.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Muthu Arul Mozhi Perumal\n   Ericsson\n   Ferns Icon\n
    \  Doddanekundi, Mahadevapura\n   Bangalore, Karnataka  560037\n   India\n   Email:
    muthu.arul@gmail.com\n   Dan Wing\n   Cisco Systems, Inc.\n   170 West Tasman
    Drive\n   San Jose, California  95134\n   United States\n   Email: dwing@cisco.com\n
    \  Ram Mohan Ravindranath\n   Cisco Systems\n   Cessna Business Park\n   Sarjapur-Marathahalli
    Outer Ring Road\n   Bangalore, Karnataka  560103\n   India\n   Email: rmohanr@cisco.com\n
    \  Tirumaleswar Reddy\n   Cisco Systems\n   Cessna Business Park, Varthur Hobli\n
    \  Sarjapur Marathalli Outer Ring Road\n   Bangalore, Karnataka  560103\n   India\n
    \  Email: tireddy@cisco.com\n   Martin Thomson\n   Mozilla\n   650 Castro Street,
    Suite 300\n   Mountain View, California  94041\n   United States\n   Email: martin.thomson@gmail.com\n"
  title: Authors' Addresses
