- title: __initial_text__
  contents:
  - ''
- title: Asynchronous Channels for the Blocks Extensible Exchange Protocol (BEEP)
  contents:
  - 'Asynchronous Channels for the Blocks Extensible Exchange Protocol (BEEP)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Blocks Extensible Exchange Protocol (BEEP) provides a protocol\n\
    \   framework for the development of application protocols.  This\n   document\
    \ describes a BEEP feature that enables asynchrony for\n   individual channels.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Asynchronous BEEP Channels ......................................3\n  \
    \    2.1. Asynchronous Feature .......................................3\n    \
    \  2.2. Starting an Asynchronous Channel ...........................4\n      2.3.\
    \ Asynchronous Channel Behavior ..............................5\n      2.4. Error\
    \ Handling .............................................6\n   3. Alternatives\
    \ ....................................................6\n      3.1. Increasing\
    \ Throughput ......................................6\n      3.2. Asynchrony in\
    \ the Application Protocol .....................7\n   4. Security Considerations\
    \ .........................................7\n   5. IANA Considerations .............................................8\n\
    \   6. References ......................................................8\n  \
    \    6.1. Normative References .......................................8\n    \
    \  6.2. Informative References .....................................8\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Blocks Extensible Exchange Protocol (BEEP) provides\
    \ a protocol\n   framework that manages many of the aspects necessary in developing\
    \ an\n   application protocol: framing, encoding, privacy, authentication, and\n\
    \   asynchrony.  However, the asynchrony provided by BEEP is limited to\n   asynchrony\
    \ between channels; replies to messages sent on any channel\n   are strictly ordered.\n\
    \   Serial processing behavior is desirable for a range of applications.\n   However,\
    \ serial processing is less suitable for applications that\n   rely more heavily\
    \ on asynchrony.  In particular, if a response takes\n   a significant amount\
    \ of time to create, the channel is effectively\n   blocked until the request\
    \ has been processed and the response sent.\n   Pipelining only ensures that network\
    \ latency does not add to this\n   time; subsequent requests cannot be processed\
    \ until a response is\n   made to the first request.\n   Asynchronous applications\
    \ require a protocol that is able to support\n   a large number of concurrent\
    \ outstanding requests.  The analogy of a\n   channel as a thread does not scale\
    \ to the large number of threads\n   used in modern systems.  Modern applications\
    \ regularly have large\n   numbers of concurrent processing threads.  Thus, a\
    \ better way of\n   multiplexing large numbers of concurrent requests is required.\n\
    \   This document describes a BEEP feature, an extension to BEEP, that\n   enables\
    \ the creation of an asynchronous channel.  An asynchronous\n   channel is a channel\
    \ where response ordering is not fixed to the\n   order of the requests sent by\
    \ the client peer.  An asynchronous\n   channel is identical to other channels,\
    \ using unmodified framing;\n   except that requests may be processed in parallel\
    \ and responses may\n   be sent in any order.\n   An asynchronous channel enables\
    \ the efficient use of a single channel\n   for multiple concurrent requests.\
    \  There is no impact on requests\n   arising from the timing of responses to\
    \ other requests.  The\n   requesting peer can process responses to the requests\
    \ it sends as\n   they come available; similarly, the serving peer can take advantage\n\
    \   of parallel processing without artificial constraints on the order of\n  \
    \ responses.\n   Asynchronous channels allow for greater throughput where the\
    \ serving\n   peer requires any time to process requests.  This is particularly\n\
    \   relevant where the serving peer needs to perform lengthy computations\n  \
    \ or make network-based requests as a part of servicing the request.\n   BEEP\
    \ feature negotiation is used to ensure that both peers are\n   mutually willing\
    \ to create asynchronous channels.  A means for\n   establishing an asynchronous\
    \ channel is described.\n   This document is published as an Experimental RFC\
    \ in order to find\n   out whether the extension is going to be deployed for use\
    \ in a\n   variety of use cases and applications.\n"
- title: 2.  Asynchronous BEEP Channels
  contents:
  - "2.  Asynchronous BEEP Channels\n   This document defines a BEEP feature that\
    \ enables the use of\n   asynchronous channels.  An asynchronous channel is a\
    \ BEEP channel\n   that is not subject to the restrictions of Section 2.6.1 of\
    \ [RFC3080]\n   regarding ordering of responses; requests can be processed and\n\
    \   responded to in any order by the serving peer.\n   Asynchronous channels use\
    \ the \"msgno\" element of the BEEP frame\n   header to correlate request and\
    \ response.  Regular BEEP channels do\n   not use \"msgno\" for request/response\
    \ correlation, contrary to what\n   might be inferred by the presence of the parameter.\
    \  In a regular\n   BEEP channel, the \"msgno\" only serves as a means of checking\
    \ for\n   protocol errors.\n   Asynchronous channels are not suitable for applications\
    \ where state\n   established by requests is relied upon in subsequent requests\
    \ or the\n   ordering of messages is significant.\n"
- title: 2.1.  Asynchronous Feature
  contents:
  - "2.1.  Asynchronous Feature\n   The \"feature\" attribute in the BEEP greeting\
    \ contains a whitespace-\n   separated list of features supported by each peer.\
    \  If both lists\n   contain the same feature, that feature may be used by either\
    \ peer.\n   This document registers the feature \"async\".  If either peer does\
    \ not\n   include this feature in the greeting message, neither peer is able to\n\
    \   create an asynchronous channel.\n   Figure 1 shows an example exchange where\
    \ both peers declare\n   willingness to use this feature.\n      L: <wait for\
    \ incoming connection>\n      I: <open connection>\n      L: RPY 0 0 . 0 133\n\
    \      L: Content-Type: application/beep+xml\n      L:\n      L: <greeting features=\"\
    async x-foo\">\n      L:    <profile uri=\"http://example.com/beep/APP\" />\n\
    \      L: </greeting>\n      L: END\n      I: RPY 0 0 . 0 69\n      I: Content-Type:\
    \ application/beep+xml\n      I:\n      I: <greeting features=\"async\" />\n \
    \     I: END\n            Figure 1: BEEP Greetings with Asynchronous Feature\n\
    \   The registration template for BEEP features is included in Section 5.\n"
- title: 2.2.  Starting an Asynchronous Channel
  contents:
  - "2.2.  Starting an Asynchronous Channel\n   To create an asynchronous channel,\
    \ an \"async\" parameter set to \"true\"\n   is included in the \"start\" request.\
    \  If omitted, or set to \"false\",\n   the channel is not asynchronous.\n   Figure\
    \ 2 shows how the \"async\" attribute can be used to start an\n   asynchronous\
    \ channel.\n      C: MSG 0 1 . 52 130\n      C: Content-Type: application/beep+xml\n\
    \      C:\n      C: <start number=\"1\" async=\"true\">\n      C:    <profile\
    \ uri=\"http://example.org/protocol\"/>\n      C: </start>\n      C: END\n   \
    \   S: RPY 0 1 . 221 102\n      S: Content-Type: application/beep+xml\n      S:\n\
    \      S: <profile uri=\"http://example.org/protocol\"/>\n      S: END\n     \
    \              Figure 2: Asynchronous Channel Start\n   If the serving peer is\
    \ unable to create an asynchronous channel for\n   any reason, the channel start\
    \ is rejected.  This could occur if the\n   selected profile is not suitable for\
    \ an asynchronous channel.  The\n   response can include the \"553\" response\
    \ code (parameter invalid) and\n   an appropriate message, as shown in Figure\
    \ 3.\n      C: MSG 0 1 . 52 128\n      C: Content-Type: application/beep+xml\n\
    \      C:\n      C: <start number=\"1\" async=\"true\">\n      C:    <profile\
    \ uri=\"http://example.org/serial\"/>\n      C: </start>\n      C: END\n     \
    \ S: ERR 0 1 . 221 152\n      S: Content-Type: application/beep+xml\n      S:\n\
    \      S: <error code=\"553\">Profile &lt;http://example.org/serial&gt;\n    \
    \  S: cannot be used for asynchronous channels.</error>\n      S: END\n      \
    \          Figure 3: Asynchronous Channel Start Error\n"
- title: 2.3.  Asynchronous Channel Behavior
  contents:
  - "2.3.  Asynchronous Channel Behavior\n   Asynchronous channels differ from normal\
    \ BEEP channels in one way\n   only: an asynchronous channel is not subject to\
    \ the restrictions in\n   Section 2.6.1 of [RFC3080] regarding the processing\
    \ and response\n   ordering.  A peer in the serving role may process and respond\
    \ to\n   requests in any order it chooses.\n   In an asynchronous channel, the\
    \ \"msgno\" element of the frame header\n   is used to correlate request and response.\
    \  A BEEP peer receiving\n   responses in a different order than the requests\
    \ that triggered them\n   must not regard this as a protocol error.\n   \"MSG\"\
    \ messages sent on an asynchronous channel may be processed in\n   parallel by\
    \ the serving peer.  Responses (\"RPY\", \"ANS\", \"NUL\", or\n   \"ERR\" messages)\
    \ can be sent in any order.  Different \"ANS\" messages\n   that are sent in a\
    \ one-to-many exchange may be interleaved with\n   responses to other \"MSG\"\
    \ messages.\n   An asynchronous channel must still observe the rules in [RFC3080]\n\
    \   regarding segmented messages.  Each message must be completed before\n   any\
    \ other message can be sent on that same channel.\n   Note:  An exception to this\
    \ rule is made in [RFC3080] for interleaved\n      \"ANS\" segments sent in response\
    \ to the same \"MSG\".  It is\n      recommended that BEEP peers do not generate\
    \ interleaved ANS\n      segments.\n   The BEEP management channel (channel 0)\
    \ is never asynchronous.\n"
- title: 2.4.  Error Handling
  contents:
  - "2.4.  Error Handling\n   BEEP does not provide any mechanism for managing a peer\
    \ that does not\n   respond to a request.  Synchronous channels cannot be used\
    \ or even\n   closed if a peer does not provide a response to a request.  The\
    \ only\n   remedy available is closing the underlying transport.  While an\n \
    \  asynchronous channel cannot be closed, it can still be used for\n   further\
    \ requests.  However, any outstanding request still consumes\n   state resources.\
    \  Client peers may dispose of such state after a\n   configured interval, but\
    \ must be prepared to discard unrecognized\n   responses if they do so.\n"
- title: 3.  Alternatives
  contents:
  - "3.  Alternatives\n   The option presented in this document provides for asynchronous\n\
    \   communication.  Asynchronous channels might not be applicable in\n   every\
    \ circumstance, particularly where ordering of requests is\n   significant.  Depending\
    \ on application protocol requirements, the\n   alternatives discussed in this\
    \ section could be more applicable.\n"
- title: 3.1.  Increasing Throughput
  contents:
  - "3.1.  Increasing Throughput\n   In some cases, asynchronous channels can be used\
    \ to remove\n   limitations on message processing throughput.  Alternatively,\n\
    \   pipelining of requests can increase throughput significantly where\n   network\
    \ latency is the limiting factor.  Spreading requests over\n   several channels\
    \ increases overall throughput, if throughput is the\n   only consideration.\n\
    \   Note:  Be wary of false optimizations that rely on the pipelining of\n   \
    \   requests.  If later requests in a series of pipelined requests\n      rely\
    \ on state established by earlier requests, errors in earlier\n      requests\
    \ could invalidate later requests.\n   The flow control window used in the TCP\
    \ mapping [RFC3081] can\n   introduce a limiting factor in throughput for individual\
    \ channels.\n   Choice of TCP window size similarly limits throughput, see [RFC1323].\n\
    \   To avoid limitations introduced by flow control, receiving peers can\n   increase\
    \ the window size used; sending peers can open additional\n   channels with the\
    \ same profile.  Correctly managing flow control also\n   applies to asynchronous\
    \ channels.\n"
- title: 3.2.  Asynchrony in the Application Protocol
  contents:
  - "3.2.  Asynchrony in the Application Protocol\n   With changes to the application\
    \ protocol, serial channels can be used\n   for asynchronous exchanges.  Asynchrony\
    \ can be provided at a protocol\n   layer above BEEP by separating request and\
    \ response.  This requires\n   the addition of proprietary MIME headers or modifications\
    \ to the\n   application protocol.\n   The serving peer provides an immediate\
    \ \"RPY\" (or \"NUL\") response to\n   requests.  This frees the channel for further\
    \ requests.  The actual\n   response is sent as a separate \"MSG\" using a special\
    \ identifier\n   included in the original request to correlate the response with\
    \ the\n   request.  This second \"MSG\" can be sent on the same channel (since\n\
    \   these are full duplex) or on a channel specifically created for this\n   purpose.\n\
    \   This method is not favored since it requires that the application\n   protocol\
    \ solve the problem of correlating request with response.\n   BEEP aims to provide\
    \ a general framework for the creation of an\n   application protocol, and for\
    \ it to not provide request/response\n   correlation would limit its usefulness.\
    \  Using a MIME header is also\n   possible, but using \"msgno\" is the most elegant\
    \ solution.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   Enabling asynchronous messaging for a channel\
    \ potentially requires\n   the maintenance of additional state information.  A\
    \ peer in the\n   server role that does not reply to messages can cause the\n\
    \   accumulation of state at the client peer.  If this state information\n   were\
    \ not limited, this mode could be used to perform denial of\n   service.  This\
    \ problem, while already present in BEEP, is potentially\n   more significant\
    \ due to the nature of the processing on the serving\n   peer that might occur\
    \ for requests received on an asynchronous\n   channel.  The extent to which denial\
    \ is possible is limited by what a\n   serving peer accepts; the number of outstanding\
    \ requests can be\n   restricted to protect against excessive accumulation of\
    \ state.\n   A client peer maintains state for each request that it sends.  A\n\
    \   client peer should enforce a configurable limit on the number of\n   requests\
    \ that it will allow to be outstanding at any time.  This\n   limit could be enforced\
    \ at channel, connection, or application scope.\n   Once this limit is reached,\
    \ the client peer might prevent or block\n   further requests from been generated.\n\
    \   Peers that serve requests on asynchronous channels also accumulate\n   state\
    \ when a request is accepted for processing.  Peers in the\n   serving role may\
    \ similarly limit to the number of requests that are\n   processed concurrently.\
    \  Once this limit is reached the receiving\n   peer can either stop reading new\
    \ requests, or might start rejecting\n   such requests by generating error responses.\
    \  Alternatively, the flow\n   control [RFC3081] can be used; \"SEQ\" frames can\
    \ be suppressed,\n   allowing the flow control window to close and preventing\
    \ the receipt\n   of further requests.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   This section registers the BEEP \"async\" feature\
    \ in the BEEP\n   parameters registry, following the template from Section 5.2\
    \ of\n   [RFC3080].\n   Feature Identification:  async\n   Feature Semantics:\
    \  This feature enables the creation of asynchronous\n      channels, see Section\
    \ 2 of RFC 5573.\n   Contact Information:  Martin Thomson <martin.thomson@andrew.com>\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC3080]  Rose, M., \"The Blocks Extensible Exchange\
    \ Protocol Core\",\n              RFC 3080, March 2001.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [RFC3081]  Rose, M., \"Mapping the BEEP Core\
    \ onto TCP\", RFC 3081,\n              March 2001.\n   [RFC1323]  Jacobson, V.,\
    \ Braden, B., and D. Borman, \"TCP Extensions\n              for High Performance\"\
    , RFC 1323, May 1992.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Martin Thomson\n   Andrew\n   PO Box U40\n   Wollongong\
    \ University Campus, NSW  2500\n   AU\n   Phone: +61 2 4221 2915\n   EMail: martin.thomson@andrew.com\n\
    \   URI:   http://www.andrew.com/\n"
