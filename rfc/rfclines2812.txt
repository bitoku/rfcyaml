The IRC protocol itself enables several possibilities of transferring data between clients, and just like with other transfer mechanisms like email, the receiver of the data has to be careful about how the data is handled.
For more information on security issues with the IRC protocol, see for example http://www.irchelp.org/irchelp/security/. Abstract
The IRC (Internet Relay Chat) protocol is for use with text based conferencing; the simplest client being any socket program capable of connecting to the server.
This document defines the Client Protocol, and assumes that the reader is familiar with the IRC Architecture [IRC ARCH].
This section defines the identifiers used for the various components of the IRC protocol.
1.1 Servers Servers are uniquely identified by their name, which has a maximum length of sixty three (63) characters.
See the protocol grammar rules (section 2.3.1) for what may and may not be used in a server name.
1.2 Clients For each client all servers MUST have the following information: a netwide unique identifier (whose format depends on the type of client) and the server which introduced the client.
1.2.1 Users Each user is distinguished from other users by a unique nickname having a maximum length of nine (9) characters.
See the protocol grammar rules (section 2.3.1) for what may and may not be used in a nickname.
While the maximum length is limited to nine characters, clients SHOULD accept longer strings as they may become used in future evolutions of the protocol.
Operators To allow a reasonable amount of order to be kept within the IRC network, a special class of users (operators) is allowed to perform general maintenance functions on the network.
Although the powers granted to an operator can be considered as 'dangerous', they are nonetheless often necessary.
Operators SHOULD be able to perform basic network tasks such as disconnecting and reconnecting servers as needed.
In recognition of this need, the protocol discussed herein provides for operators only to be able to perform such functions.
See sections 3.1.8 (SQUIT) and 3.4.7 (CONNECT).
A more controversial power of operators is the ability to remove a user from the connected network by 'force', i.e., operators are able to close the connection between any client and server.
The justification for this is very delicate since its abuse is both destructive and annoying, and its benefits close to inexistent.
For further details on this type of action, see section 3.7.1 (KILL).
1.2.2 Services Each service is distinguished from other services by a service name composed of a nickname and a server name.
As for users, the nickname has a maximum length of nine (9) characters.
See the protocol grammar rules (section 2.3.1) for what may and may not be used in a nickname.
Space is used as parameter separator and command is used as a list item separator by the protocol).
Channel names are case insensitive.
See the protocol grammar rules (section 2.3.1) for the exact syntax of a channel name.
Each prefix characterizes a different channel type.
The definition of the channel types is not relevant to the client server protocol and thus it is beyond the scope of this document.
More details can be found in "Internet Relay Chat: Channel Management" [IRC CHAN].
The IRC Client Specification 2.1 Overview
The protocol as described herein is for use only with client to server connections when the client registers as a user.
No specific character set is specified.
The protocol is based on a set of codes which are composed of eight (8) bits, making up an octet.
Each message may be composed of any number of these octets; however, some octet values are used for control codes, which act as message delimiters.
Regardless of being an 8 bit protocol, the delimiters and keywords are such that protocol is mostly usable from US ASCII terminal and a telnet connection.
This is a critical issue when determining the equivalence of two nicknames or channel names.
2.3 Messages Servers and clients send each other messages, which may or may not generate a reply.
If the message contains a valid command, as described in later sections, the client should expect a reply as specified but it is not advised to wait forever for the reply; client to server and server to server communication is essentially asynchronous by nature.
Each IRC message may consist of up to three main parts: the prefix (OPTIONAL), the command, and the command parameters (maximum of fifteen (15)).
The prefix, command, and all parameters are separated by one ASCII space character (0x20) each.
There MUST be NO gap (whitespace) between the colon and the prefix.
The prefix is used by servers to indicate the true origin of the message.
If the prefix is missing from the message, it is assumed to have originated from the connection from which it was received from.
Clients SHOULD NOT use a prefix when sending a message; if they use one, the only valid prefix is the registered nickname associated with the client.
The command MUST either be a valid IRC command or a three (3) digit number represented in ASCII text.
IRC messages are always lines of characters terminated with a CR LF (Carriage Return Line Feed) pair, and these messages SHALL NOT exceed 512 characters in length, counting all characters including the trailing CR LF.
Thus, there are 510 characters maximum allowed for the command and its parameters.
There is no provision for continuation of message lines.
See section 6 for more details about current implementations.
2.3.1 Message format in Augmented BNF
The protocol messages must be extracted from the contiguous stream of octets.
The current solution is to designate two characters, CR and LF, as message separators.
Empty messages are silently ignored, which permits use of the sequence CR LF between messages without extra problems.
The extracted message is parsed into the components <prefix>, <command> and list of parameters (<params>).
; "carriage return" "linefeed" NOTES: 1)
After extracting the parameter list, all parameters are equal whether matched by <middle> or <trailing>.
<trailing> is just a syntactic trick to allow SPACE within the parameter.
The NUL (%x00) character is not special in message framing, and basically could end up inside a parameter, but it would cause extra complexities in normal C string handling.
Therefore, NUL is not allowed within messages.
Most protocol messages specify additional semantics and syntax for the extracted parameter strings dictated by their position in the list.
The <hostaddr> syntax is given here for the sole purpose of indicating the format to follow for IP addresses.
This reflects the fact that the only available implementations of this protocol uses TCP/IP as underlying network protocol but is not meant to prevent other protocols to be used.
2) <hostname> has a maximum length of 63 characters.
This is a limitation of the protocol as internet hostnames (in particular) can be longer.
Such restriction is necessary because IRC messages are limited to 512 characters in length.
Clients connecting from a host which name is
longer than 63 characters are registered using the host (numeric) address instead of the host name.
Some parameters used in the following sections of this documents are not defined here as there is nothing specific about them besides the name that is used for convenience.
These parameters follow the general syntax defined for <params>.
2.4 Numeric replies Most of the messages sent to the server generate a reply of some sort.
The most common reply is the numeric reply, used for both errors and normal replies.
The numeric reply MUST be sent as one message consisting of the sender prefix, the three digit numeric, and the target of the reply.
A numeric reply is not allowed to originate from a client.
In all other respects, a numeric reply is just like a normal message, except that the keyword is made up of 3 numeric digits rather than a string of letters.
A list of different replies is supplied in section 5 (Replies).
2.5 Wildcard expressions When wildcards are allowed in a string, it is referred as a "mask".
These two characters can be escaped using the character '
On the following pages there are descriptions of each message recognized by the IRC server and client.
All commands described in this section MUST be implemented by any server for this protocol.
Where the reply ERR NOSUCHSERVER is returned, it means that the target of the message could not be found.
The server MUST NOT send any other replies after this error for that command.
The server to which a client is connected is required to parse the complete message, and return any appropriate errors.
If multiple parameters is presented, then each MUST be checked for validity and appropriate responses MUST be sent back to the client.
In the case of incorrect messages which use parameter lists with comma as an item separator, a reply MUST be sent for each item.
The commands described here are used to register a connection with an IRC server as a user as well as to correctly disconnect.
A "PASS" command is not required for a client connection to be registered, but it MUST precede the latter of the NICK/USER combination (for a user connection) or the SERVICE command (for a service connection).
The RECOMMENDED order for a client to register is as follows:
, the client will receive an RPL WELCOME (for users) or RPL YOURESERVICE (for services) message indicating that the connection is now registered and known the to the entire IRC network.
The reply message MUST contain the full client identifier upon which it was registered.
The PASS command is used to set a 'connection password'.
The optional password can and MUST be set before any attempt to register the connection is made.
Currently this requires that user send a PASS command before sending the NICK/USER combination.
ERR ALREADYREGISTRED Example: PASS secretpasswordhere
3.1.2 Nick message Command: NICK Parameters: <nickname> NICK command is used to give user a nickname or change the existing one.
; Server telling that WiZ changed his nickname to Kilroy.
3.1.3 User message Command: USER Parameters: <user>
The USER command is used at the beginning of connection to specify the username, hostname and realname of a new user.
The <mode> parameter should be a numeric, and can be used to automatically set user modes when registering with the server.
This parameter is a bitmask, with only 2 bits having any signification: if the bit 2 is set, the user mode 'w' will be set and if the bit 3 is set,
the user mode 'i' will be set.
(See Section 3.1.5 "User Modes").
The <realname> may contain space characters.
ERR ALREADYREGISTRED Example: USER guest 0   :
; User registering themselves with a username of "guest" and real name "Ronnie Reagan".
; User registering themselves with a username of "guest" and real name "Ronnie Reagan", and asking to be set invisible.
3.1.4 Oper message Command: OPER Parameters: <name> <password
A normal user uses the OPER command to obtain operator privileges.
The combination of <name> and <password> are REQUIRED to gain Operator privileges.
Upon success, the user will receive a MODE message (see section 3.1.5) indicating the new user modes.
The user MODE's are typically changes which affect either how the client is seen by others or what 'extra' messages the client is sent.
A user MODE command MUST only be accepted if both the sender of the message and the nickname given as a parameter are both the same.
If no other parameter is given, then the server will return the current settings for the nick.
The available modes are as follows: a user is flagged as away; i marks a users as invisible; w user receives wallops; r restricted user connection;
operator flag; O local operator flag
; s marks a user for receipt of server notices.
Additional modes may be available later on.
The flag 'a' SHALL NOT be toggled by the user using the MODE command, instead use of the AWAY command is REQUIRED.
If a user attempts to make themselves an operator using the " o" or " O" flag, the attempt SHOULD be ignored as users could bypass the authentication mechanisms of the OPER command.
There is no restriction, however, on anyone `deopping' themselves (using " o" or " O").
On the other hand, if a user attempts to make themselves unrestricted using the " r" flag, the attempt SHOULD be ignored.
There is no restriction, however, on anyone `deopping' themselves (using " r").
This flag is typically set by the server upon connection for administrative reasons.
While the restrictions imposed are left up to the implementation, it is typical that a restricted user not be allowed to change nicknames, nor make use of the channel operator status on channels.
The flag 's' is obsolete but MAY still be used.
; WiZ 'deopping' (removing operator status).
3.1.6 Service message Command: SERVICE Parameters: <nickname> <reserved> <distribution
The SERVICE command to register a new service.
Command parameters specify the service nickname, distribution, type and info of a new service.
The <distribution> parameter is used to specify the visibility of a service.
The service may only be known to servers which have a name matching the distribution.
For a matching server to have knowledge of the service, the network path between that server and the server on which the service is connected MUST be composed of servers which names all match the mask.
The <type> parameter is currently reserved for future usage.
French Dictionary ; Service registering itself with a name of "dict".
This service will only be available on servers which name matches " .fr".
A client session is terminated with a quit message.
The server acknowledges this by sending an ERROR message to the client.
syrk!kalt@millennium.stealth.net QUIT :Gone to have lunch ; User syrk has quit IRC to have lunch.
3.1.8 Squit Command: SQUIT Parameters: <server> <comment
> The SQUIT command is available only to operators.
It is used to disconnect server links.
Also servers can generate SQUIT messages on error conditions.
A SQUIT message may also target a remote server connection.
In this case, the SQUIT message will simply be sent to the remote server without affecting the servers in between the operator and the remote server.
The <comment> SHOULD be supplied by all operators who execute a SQUIT for a remote server.
The server ordered to disconnect its peer generates a WALLOPS message with <comment> included, so that other users may be aware of the reason of this action.
; Command to uplink of the server tolson.oulu.fi to terminate its connection with comment "Bad Link".
Server out of control ; Command from Trillian from to disconnect "cm22.eng.umd.edu" from the net with comment "Server out of control".
This group of messages is concerned with manipulating channels, their properties (channel modes), and their contents (typically users).
For this reason, these messages SHALL NOT be made available to services.
All of these messages are requests which will or will not be granted by the server.
The server MUST send a reply informing the user whether the request was granted, denied or generated an error.
When the server grants the request, the message is typically sent back (eventually reformatted) to the user with the prefix set to the user itself.
The rules governing how channels are managed are enforced by the servers.
These rules are beyond the scope of this document.
More details are found in "Internet Relay Chat: Channel Management" [IRC  CHAN].
" The JOIN command is used by a user to request to start listening to the specific channel.
Servers MUST be able to parse arguments in the form of a list of target, but SHOULD NOT use lists when sending JOIN messages to clients.
Once a user has joined a channel, he receives information about all commands his server receives affecting the channel.
This includes JOIN, MODE, KICK, PART, QUIT
This allows channel members to keep track of the other channel members, as well as channel modes.
If a JOIN is successful, the user receives a JOIN message as confirmation and is then sent the channel's topic (using RPL TOPIC) and the list of users who are on the channel (using RPL NAMREPLY), which MUST include the user joining.
Note that this message accepts a special argument ("0"), which is a special request to leave all channels the user is currently a member of.
The server will process this message as if the user had sent a PART command (See Section 3.2.2) for each channel
he is a member of.
ERR UNAVAILRESOURCE RPL TOPIC Examples:
JOIN #Twilight zone ; JOIN message from WiZ on channel #Twilight zone
The PART command causes the user sending the message to be removed from the list of active members for all given channels listed in the parameter string.
If a "Part Message" is given, this will be sent instead of the default message, the nickname.
This request is always granted by the server.
Servers MUST be able to parse arguments in the form of a list of target, but SHOULD NOT use lists when sending PART messages to clients.
ERR NOSUCHCHANNEL ERR NOTONCHANNEL Examples: PART
User WiZ leaving channel "#playzone" with the message "I lost".
3.2.3 Channel mode message Command: MODE Parameters: <
The MODE command is provided so that users may query and change the characteristics of a channel.
For more details on available modes and their uses, see "Internet Relay Chat:
Note that there is a maximum limit of three (3) changes per command for modes that take a parameter.
The following examples are given to help understanding the syntax of the MODE command, but refer to modes defined in "Internet Relay Chat: Channel Management" [IRC CHAN].
; Command to make #Finnish channel moderated and 'invite only' with user with a hostname matching  .fi automatically invited.
; User "WiZ" removing the limit for the number of users on channel "#eu  opers".
; Command to prevent all users from joining.
.bu.edu ; Command to prevent any user from a hostname matching  .edu
from joining, except if matching  .bu.edu
12345ircd" is 3.2.4 Topic message Command:
The TOPIC command is used to change or view the topic of a channel.
The topic for channel <channel> is returned if there is no <topic> given.
If the <topic> parameter is present, the topic for that channel will be changed, if this action is allowed for the user requesting it.
If the <topic> parameter is an empty string, the topic for that channel will be removed.
#test :New topic ; User Wiz setting the topic.
Command to clear the topic on #test.
By using the NAMES command, a user can list all nicknames that are visible to him.
For more details on what is visible and what is not, see "Internet Relay Chat:
The <channel> parameter specifies which channel(s) to return information about.
There is no error reply for bad channel names.
If no <channel> parameter is given, a list of all channels and their occupants is returned.
If the <target> parameter is specified, the request is forwarded to that server which will generate the reply.
Wildcards are allowed in the <target> parameter.
The list command is used to list channels and their topics.
If the <channel> parameter is used, only the status of that channel is displayed.
If the <target> parameter is specified, the request is forwarded to that server which will generate the reply.
Wildcards are allowed in the <target> parameter.
The INVITE command is used to invite a user to a channel.
The parameter <nickname> is the nickname of the person to be invited to the target channel <channel
There is no requirement that the channel the target user is being invited to must exist or be a valid channel.
However, if the channel exists, only members of the channel are allowed to invite other users.
When the channel has invite only flag set, only channel operators may issue INVITE command.
Only the user inviting and the user being invited will receive notification of the invitation.
Other channel members are not notified.
(This is unlike the MODE changes, and is occasionally the source of trouble for users.)
ERR USERONCHANNEL ERR CHANOPRIVSNEEDED RPL INVITING
3.2.8 Kick command Command: KICK Parameters: <
The KICK command can be used to request the forced removal of a user from a channel.
It causes the <user> to PART from the <channel> by force.
For the message to be syntactically correct, there MUST be either one channel parameter and multiple user parameter, or as many channel parameters as there are user parameters.
If a "comment" is given, this will be sent instead of the default message, the nickname of the user issuing the KICK.
The server MUST NOT send KICK messages with multiple channels or users to clients.
This is necessarily to maintain backward compatibility with old client software.
KICK #Finnish John ; KICK message on channel #Finnish from WiZ to remove John from channel 3.3 Sending messages
The main purpose of the IRC protocol is to provide a base for clients to communicate with each other.
PRIVMSG, NOTICE and SQUERY (described in Section 3.5 on Service Query and Commands) are the only messages available which actually perform delivery of a text message from one client to another the rest just make it possible and try to ensure it happens in a reliable and structured manner.
PRIVMSG Parameters: <msgtarget> <text to be sent
PRIVMSG is used to send private messages between users, as well as to send messages to channels.
<msgtarget> is usually the nickname of the recipient of the message, or a channel name.
The <msgtarget> parameter may also be a host mask (#<mask>) or server mask ($<mask>).
In both cases the server will only send the PRIVMSG to those who have a server or host matching the mask.
The mask MUST have at least 1 (one) ".
Wildcards are the ' '
This extension to the PRIVMSG command is only available to operators.
NOSUCHNICK RPL AWAY Examples: :
Angel!wings@irc.org PRIVMSG Wiz :Are you receiving this message ?
; Message from Angel to Wiz.
:Are you a frog? ; Message to a user on server irc.stealth.net with username of "kalt", and connected from the host millennium.stealth.net.
PRIVMSG kalt%millennium.stealth.net :Do you like cheese?
; Message to a user on the local server with username of "kalt", and connected from the host millennium.stealth.net.
; Message to everyone on a server which has a name matching  .fi.
:NSFNet is undergoing work, expect interruptions ;
Message to all users who come from a host which has a name matching  .edu.
The NOTICE command is used similarly to PRIVMSG.
The difference between NOTICE and PRIVMSG is that automatic replies MUST NEVER be sent in response to a NOTICE message.
This rule applies to servers too they MUST NOT send any error reply back to the client on receipt of a notice.
The object of this rule is to avoid loops between clients automatically sending something in response to something it received.
This command is available to services as well as users.
This is typically used by services, and automatons (clients with either an AI or other interactive program controlling their actions).
See PRIVMSG for more details on replies and examples.
3.4 Server queries and commands
The server query group of commands has been designed to return information about any server which is connected to the network.
In these queries, where a parameter appears as <target>, wildcard masks are usually valid.
For each parameter, however, only one query and set of replies is to be generated.
In most cases, if a nickname is given, it will mean the server to which the user is connected.
These messages typically have little value for services, it is therefore RECOMMENDED to forbid services from using them.
The MOTD command is used to get the "Message Of The Day" of the given server, or current server if <target> is omitted.
Wildcards are allowed in the <target> parameter.
The LUSERS command is used to get statistics about the size of the IRC network.
If no parameter is given, the reply will be about the whole net.
If a <mask> is specified, then the reply will only concern the part of the network formed by the servers matching the mask.
Finally, if the <target> parameter is specified, the request is forwarded to that server which will generate the reply.
Wildcards are allowed in the <target> parameter.
The VERSION command is used to query the version of the server program.
An optional parameter <target> is used to query the version of the server program which a client is not directly connected to.
Wildcards are allowed in the <target> parameter.
; Command to check the version of server "tolsun.oulu.fi".
The stats command is used to query statistics of certain server.
If <query> parameter is omitted, only the end of stats reply is sent back.
A query may be given for any single letter which is only checked by the destination server and is otherwise passed on by intermediate servers, ignored and unaltered.
Wildcards are allowed in the <target> parameter.
Except for the ones below, the list of valid queries is implementation dependent.
The standard queries below SHOULD be supported by the server: l returns a list of the server's connections, showing how long each connection has been established and the traffic over that connection in Kbytes and messages for each direction; m returns the usage count for each of commands supported by the server; commands for which the usage count is zero MAY be omitted;   returns a list of configured privileged users, operators; u returns a string showing how long the server has been up.
It is also RECOMMENDED that client and server access configuration be published this way.
RPL STATSOLINE RPL ENDOFSTATS Examples:
you are connected to 3.4.5 Links message Command:
With LINKS, a user can list all servernames, which are known by the server answering the query.
The returned list of servers MUST match the mask, or if no mask is given, the full list is returned.
If <remote server> is given in addition to <server mask>, the LINKS command is forwarded to the first server found that matches that name (if any), and that server is then required to answer the query.
as seen by the first server matching  .edu.
The time command is used to query local time from the specified server.
If the <target> parameter is not given, the server receiving the command must reply to the query.
Wildcards are allowed in the <target> parameter.
RPL TIME Examples: TIME tolsun.oulu.fi
; check the time on the server "tolson.oulu.fi" 3.4.7 Connect message Command:
The CONNECT command can be used to request a server to try to establish a new connection to another server immediately.
CONNECT is a privileged command and SHOULD be available only to IRC Operators.
If a <remote server> is given and its mask doesn't match name of the parsing server, the CONNECT attempt is sent to the first match of remote server.
Otherwise the CONNECT attempt is made by the server processing the request.
The server receiving a remote CONNECT command SHOULD generate a WALLOPS message describing the source and target of the request.
ERR NOPRIVILEGES ERR NEEDMOREPARAMS Examples:
Command to attempt to connect local server to tolsun.oulu.fi on port 6667
TRACE command is used to find the route to specific server and information about its peers.
Each server that processes this command MUST report to the sender about it.
The replies from pass through links form a chain, which shows route to destination.
After sending this reply back, the query MUST be sent to the next server until given <target> server is reached.
TRACE command is used to find the route to specific server.
Each server that processes this message MUST tell the sender about it by sending a reply indicating it is a pass through link, forming a chain of replies.
After sending this reply back, it MUST then send the TRACE message to the next server until given server is reached.
If the <target> parameter is omitted, it is RECOMMENDED that TRACE command sends a message to the sender telling which servers the local server has direct connection to.
If the destination given by <target> is an actual server, the destination server is REQUIRED to report all servers, services and operators which are connected to it; if the command was issued by an operator, the server MAY also report all users which are connected to it.
If the destination given by <target> is a nickname, then only a reply for that nickname is given.
If the <target> parameter is omitted, it is RECOMMENDED that the TRACE command is parsed as targeted to the processing server.
Wildcards are allowed in the <target> parameter.
If the TRACE message is destined for another server, all intermediate servers must return a RPL TRACELINK reply to indicate that the TRACE passed through it and where it is going next.
RPL TRACELINK A TRACE reply may be composed of any number of the following numeric replies.
The admin command is used to find information about the administrator of the given server, or current server if <target> parameter is omitted.
Each server MUST have the ability to forward ADMIN messages to other servers.
Wildcards are allowed in the <target> parameter.
The INFO command is REQUIRED to return information describing the server: its version, when it was compiled, the patchlevel, when it was started, and any other miscellaneous information which may be considered to be relevant.
Wildcards are allowed in the <target> parameter.
3.5 Service Query and Commands
The service query group of commands has been designed to return information about any service which is connected to the network.
The SERVLIST command is used to list services currently connected to the network and visible to the user issuing the command.
The optional parameters may be used to restrict the result of the query (to matching services names, and services type).
RPL SERVLISTEND 3.5.2 Squery Command
: SQUERY Parameters: <servicename> <text
The SQUERY command is used similarly to PRIVMSG.
The only difference is that the recipient MUST be a service.
This is the only way for a text message to be delivered to a service.
See PRIVMSG for more details on replies and example.
HELP privmsg ; Message to the service with nickname irchelp.
SQUERY dict@irc.fr :fr2en blaireau ; Message to the service with name dict@irc.fr.
User queries are a group of commands which are primarily concerned with finding details on a particular user or group users.
When using wildcards with any of these commands, if they match, they will only return information on users who are 'visible' to you.
The visibility of a user is determined as a combination of the user's mode and the common set of channels you are both on.
Although services SHOULD NOT be using this class of message, they are allowed to.
The WHO command is used by a client to generate a query which returns a list of information which 'matches' the <mask> parameter given by the client.
In the absence of the <mask> parameter, all visible (users who aren't invisible (user mode  i) and who don't have a common channel with the requesting client) are listed.
The same result can be achieved by using a <mask> of "0" or any wildcard which will end up matching every visible user.
The <mask> passed to WHO is matched against users' host, server, real name and nickname if the channel <mask> cannot be found.
If the "o" parameter is passed only operators are returned according to the <mask> supplied.
Command to list all users with a match against "jto " if they are an operator.
This command is used to query information about particular user.
The server will answer this command with several numeric messages indicating different statuses of each user which matches the mask (if you are entitled to see them).
If no wildcard is present in the <mask>, any information about that nick which you are allowed to see is presented.
If the <target> parameter is specified, it sends the query to a specific server.
It is useful if you want to know how long the user in question has been idle as only local server
(i.e., the server the user is directly connected to) knows that information, while everything else is globally known.
Wildcards are allowed in the <target> parameter.
ERR NOSUCHNICK RPL ENDOFWHOIS Examples:
; return available user information about nick WiZ
; ask server eff.org for user information  about trillian
Whowas asks for information about a nickname which no longer exists.
This may either be due to a nickname change or the user leaving IRC.
In response to this query, the server searches through its nickname history, looking for any nicks which are lexically the same (no wild card matching here).
The history is searched backward, returning the most recent entry first.
If there are multiple entries, up to <count> replies will be returned (or all of them if no <count
If a non positive number is passed as being <count>, then a full search is done.
Wildcards are allowed in the <target> parameter.
3.7 Miscellaneous messages Messages in this category do not fit into any of the above categories but are nonetheless still a part of and REQUIRED by the protocol.
3.7.1 Kill message Command: KILL Parameters: <nickname> <
The KILL command is used to cause a client server connection to be closed by the server which has the actual connection.
Servers generate KILL messages on nickname collisions.
It MAY also be available available to users who have the operator status.
Clients which have automatic reconnect algorithms effectively make this command useless since the disconnection is only brief.
It does however break the flow of data and can be used to stop large amounts of 'flooding' from abusive users or accidents.
Abusive users usually don't care as they will reconnect promptly and resume their abusive behaviour.
To prevent this command from being abused, any user may elect to receive KILL messages generated for others to keep an 'eye' on would be trouble spots.
In an arena where nicknames are REQUIRED to be globally unique at all times, KILL messages are sent whenever 'duplicates' are detected (that is an attempt to register two users with the same nickname) in the hope that both of them will disappear and only 1 reappear.
When a client is removed as the result of a KILL message, the server SHOULD add the nickname to the list of unavailable nicknames in an attempt to avoid clients to reuse this name immediately which is usually the pattern of abusive behaviour often leading to useless "KILL loops".
See the "IRC Server Protocol" document [IRC SERVER] for more information on this procedure.
The comment given MUST reflect the actual reason for the KILL.
For server generated KILLs it usually is made up of details concerning the origins of the two conflicting nicknames.
For users it is left up to them to provide an adequate reason to satisfy others who see it.
To prevent/discourage fake KILLs from being generated to hide the identify of the KILLer, the comment also shows a 'kill path' which is updated by each server it passes through, each prepending its name to the path.
It is RECOMMENDED that only Operators be allowed to kill other users with KILL command.
This command has been the subject of many controversies over the years, and along with the above recommendation, it is also widely recognized that not even operators should be allowed to kill users on remote servers.
The PING command is used to test the presence of an active client or server at the other end of the connection.
Servers send a PING message at regular intervals if no other activity detected coming from a connection.
If a connection fails to respond to a PING message within a set amount of time, that connection is closed.
A PING message MAY be sent even if the connection is active.
When a PING message is received, the appropriate PONG message MUST be sent as reply to <server1
> (server which sent the PING message out) as soon as possible.
If the <server2> parameter is specified, it represents the target of the ping, and the message gets forwarded there.
; Command to send a PING message to server PING WiZ
> ] PONG message is a reply to ping message.
If parameter <server2> is given, this message MUST be forwarded to given target.
> parameter is the name of the entity who has responded to PING message and generated this message.
; PONG message from csd.bu.edu to tolsun.oulu.fi
3.7.4 Error Command: ERROR Parameters: <error message
The ERROR command is for use by servers when reporting a serious or fatal error to its peers.
It may also be sent from one server to another but MUST NOT be accepted from any normal unknown clients.
Only an ERROR message SHOULD be used for reporting errors which occur with a server to server link.
An ERROR message is sent to the server at the other end (which reports it to appropriate local users and logs) and to appropriate local users and logs.
It is not to be passed onto any other servers by a server if it is received from a server.
The ERROR message is also used before terminating a client connection.
When a server sends a received ERROR message to its operators, the message SHOULD be encapsulated inside a NOTICE message, indicating that the client was not responsible for the error.
Server  .fi already exists ; ERROR message to the other server which caused this error.
already exists ; Same ERROR message as above but sent to user WiZ on the other server.
Optional features This section describes OPTIONAL messages.
They are not required in a working server implementation of the protocol described herein.
In the absence of the feature, an error reply message MUST be generated or an unknown command error.
If the message is destined for another server to answer then it MUST be passed on (elementary parsing REQUIRED)
The allocated numerics for this are listed with the messages below.
From this section, only the USERHOST and ISON messages are available to services.
[ <text> ] With the AWAY command, clients can set an automatic reply string for any PRIVMSG commands directed at them (not to a channel they are on).
The server sends an automatic reply to the client sending the PRIVMSG command.
The only replying server is the one to which the sending client is connected to.
The AWAY command is used either with one parameter, to set an AWAY message, or with no parameters, to remove the AWAY message.
Because of its high cost (memory and bandwidth wise), the AWAY message SHOULD only be used for client server communication.
A server MAY choose to silently ignore AWAY messages received from other servers.
To update the away status of a client across servers, the user mode 'a' SHOULD be used instead.
Back in 5 ; Command to set away message to "Gone to lunch.
None The rehash command is an administrative command which can be used by an operator to force the server to re read and process its configuration file.
None An operator can use the DIE command to shutdown the server.
This message is optional since it may be viewed as a risk to allow arbitrary people to connect to a server as an operator and execute this command.
The DIE command MUST always be fully processed by the server to which the sending client is connected and MUST NOT be passed onto other connected servers.
None An operator can use the restart command to force the server to restart itself.
This message is optional since it may be viewed as a risk to allow arbitrary people to connect to a server as an operator and execute this command, causing (at least) a disruption to service.
The RESTART command MUST always be fully processed by the server to which the sending client is connected and MUST NOT be passed onto other connected servers.
The SUMMON command can be used to give users who are on a host running an IRC server a message asking them to please join IRC.
This message is only sent if the target server (a) has SUMMON enabled, (b) the user is logged in and (c) the server process can write to the user's tty (or similar).
If no <server> parameter is given it tries to summon <user> from the server the client is connected to is assumed as the target.
If summon is not enabled in a server, it MUST return the ERR SUMMONDISABLED numeric.
; summon user jto on the host which a server named "tolsun.oulu.fi" is running.
The USERS command returns a list of users logged into the server in a format similar to the UNIX commands who(1), rusers(1) and finger(1).
If disabled, the correct numeric MUST be returned to indicate this.
Because of the security implications of such a command, it SHOULD be disabled by default in server implementations.
Enabling it SHOULD require recompiling the server or some equivalent change rather than simply toggling an option and restarting the server.
The procedure to enable this command SHOULD also include suitable large comments.
request a list of users logged in on server eff.org 4.7 Operwall message Command:
The WALLOPS command is used to send a message to all currently connected users who have set the 'w' user mode for themselves.
(See Section 3.1.5 "User modes").
After implementing WALLOPS as a user command it was found that it was often and commonly abused as a means of sending a message to a lot of people.
Due to this, it is RECOMMENDED that the implementation of WALLOPS allows and recognizes only servers as the originators of WALLOPS.
6667' from Joshua ; WALLOPS message from csd.bu.edu announcing a CONNECT message it received from Joshua and acted upon.
The USERHOST command takes a list of up to 5 nicknames, each separated by a space character and returns a list of information about each nickname that it found.
The returned list has each reply separated by a space.
; USERHOST request for information on nicks "Wiz", "Michael", and "syrk" :ircd.stealth.net 302 yournick :syrk  syrk@millennium.stealth.net ; Reply for user syrk
The ISON command was implemented to provide a quick and efficient means to get a response about whether a given nickname was currently on IRC.
ISON only takes one (1) type of parameter: a space separated list of nicks.
For each nickname in the list that is present, the server adds that to its reply string.
Thus the reply string may return empty (none of the given nicks are present), an exact copy of the parameter string (all of them present) or any other subset of the set of nicks given in the parameter.
The only limit on the number of nicks that may be checked is that the combined length MUST NOT be too large as to cause the server to chop it off
so it fits in 512 characters.
ISON is only processed by the server local to the client sending the command and thus not passed onto other servers for further processing.
ISON phone trillian WiZ jarlek Avalon Angel Monstah syrk ; Sample ISON request for 7 nicks.
The following is a list of numeric replies which are generated in response to the commands given above.
Each numeric is given with its number, name and reply string.
5.1 Command responses Numerics in the range from 001 to 099 are used for client server connections only and should never travel between servers.
Replies generated in the response to commands are found in the range from 200 to 399.
Welcome to the Internet Relay Network <nick>!<user>@<host
>" 002    RPL YOURHOST "
Your host is <servername>, running version <ver>" 003
This server was created <date>" 004    RPL MYINFO "<servername> <version> <available user modes> <available channel modes
" The server sends Replies 001 to 004 to a user upon successful registration.
Try server <server name>, port <port number>
" Sent by the server to a user to suggest an alternative server.
This is often used when the connection is refused because the server is already full.
" Reply format used by USERHOST to list replies to the query list.
303    RPL ISON ": 1<nick
" Reply format used by ISON to list replies to the query list.
message>" 305    RPL UNAWAY ":You are no longer marked as being away" 306    RPL NOWAWAY ":
You have been marked as being away" These replies are used with the AWAY command (if allowed).
RPL AWAY is sent to any client sending a PRIVMSG to a client which is away.
RPL AWAY is only sent by the server to which the client is connected.
Replies RPL UNAWAY and RPL NOWAWAY are sent when the client removes and sets an AWAY message.
> :<server info>" 313    RPL WHOISOPERATOR "
> :is an IRC operator" 317    RPL WHOISIDLE "
> <integer> :seconds idle" 318    RPL ENDOFWHOIS "
End of WHOIS list" 319    RPL WHOISCHANNELS "
Given that there are enough parameters present, the answering server MUST either formulate a reply out of the above numerics (if the query nick is found) or return an error reply.
For each reply set, only RPL WHOISCHANNELS may appear more than once (for long lists of channel names).
The RPL ENDOFWHOIS reply is used to mark the end of processing a WHOIS message.
When replying to a WHOWAS message, a server MUST use the replies RPL WHOWASUSER, RPL WHOISSERVER or ERR WASNOSUCHNICK for each nickname in the presented list.
At the end of all reply batches, there MUST be RPL ENDOFWHOWAS (even if there was only one reply
and it was an error).
" Replies RPL LIST, RPL LISTEND mark the actual replies with data and end of the server's response to a LIST command.
If there are no channels available to return, only the end reply MUST be sent.
<nickname>" 324    RPL CHANNELMODEIS "
" 331    RPL NOTOPIC "<channel
> :No topic is set" 332    RPL TOPIC "<channel> :
<topic>" When sending a TOPIC message to determine the channel topic, one of two replies is sent.
If the topic is set, RPL TOPIC is sent back else RPL NOTOPIC.
341    RPL INVITING "<channel> <nick
>" Returned by the server to indicate that the attempted INVITE message was successful and is being passed onto the end client.
342    RPL SUMMONING "<user> :
Summoning user to IRC" Returned by a server answering a SUMMON message to indicate that it is summoning that user.
<invitemask>" 347    RPL ENDOFINVITELIST "<channel> :End of channel invite list"
When listing the 'invitations masks' for a given channel, a server is required to send the list back using the RPL INVITELIST and RPL ENDOFINVITELIST messages.
A separate RPL INVITELIST is sent for each active mask.
After the masks have been listed (or if none present)
a RPL ENDOFINVITELIST MUST be sent.
<exceptionmask>" 349    RPL ENDOFEXCEPTLIST "
End of channel exception list"
When listing the 'exception masks' for a given channel, a server is required to send the list back using the RPL EXCEPTLIST and RPL ENDOFEXCEPTLIST messages.
A separate RPL EXCEPTLIST is sent for each active mask.
After the masks have been listed (or if none present)
a RPL ENDOFEXCEPTLIST MUST be sent.
" Reply by the server showing its version details.
The <version> is the version of the software being used (including any patchlevel revisions) and the <debuglevel> is used to indicate if the server is running in "debug mode".
The "comments" field may contain any comments about the version or further version details.
352    RPL WHOREPLY "<channel> <user> <host> <server> <nick>
:<hopcount> <real name>" 315    RPL ENDOFWHO "<name
End of WHO list" The RPL WHOREPLY and RPL ENDOFWHO pair are used to answer a WHO message.
The RPL WHOREPLY is only sent if there is an appropriate match to the WHO query.
If there is a list of parameters supplied with a WHO message, a RPL ENDOFWHO MUST be sent after processing each list item with <name> being the item.
End of NAMES list" To reply to a NAMES message, a reply pair consisting of RPL NAMREPLY and
RPL ENDOFNAMES is sent by the server back to the client.
If there is no channel found as in the query, then only RPL ENDOFNAMES is returned.
The exception to this is when a NAMES message is sent with no parameters and all visible channels and contents are sent back in a series of RPL NAMEREPLY messages with a RPL ENDOFNAMES to mark the end.
> <server> :<hopcount> <server info>" 365    RPL ENDOFLINKS "<mask
In replying to the LINKS message, a server MUST send replies back using the RPL LINKS numeric and mark the end of the list using an RPL ENDOFLINKS reply.
<banmask>" 368    RPL ENDOFBANLIST "<channel
:End of channel ban list"
When listing the active 'bans' for a given channel, a server is required to send the list back using the RPL BANLIST and RPL ENDOFBANLIST messages.
A separate RPL BANLIST is sent for each active banmask.
After the banmasks have been listed (or if none present)
a RPL ENDOFBANLIST MUST be sent.
<string>" 374    RPL ENDOFINFO ":
A server responding to an INFO message is required to send all its 'info' in a series of RPL INFO messages with a RPL ENDOFINFO reply to indicate the end of the replies.
End of MOTD command" When responding to the MOTD message and the MOTD file is found, the file is displayed line by line, with each line no longer than 80 characters, using RPL MOTD format replies.
These MUST be surrounded by a RPL MOTDSTART (before the RPL MOTDs) and an RPL ENDOFMOTD (after).
:You are now an IRC operator" RPL YOUREOPER is sent back to a client which has just successfully issued an OPER message and gained operator status.
:Rehashing" If the REHASH option is used and an operator sends a REHASH message, an RPL REHASHING is sent back to the operator.
" Sent by the server to a service upon successful registration.
391    RPL TIME "<server> :<string showing server's local time>" When replying to the TIME message, a server MUST send the reply using the RPL TIME format above.
The string showing the time need only contain the correct day and time there.
There is no further requirement for the time string.
UserID   Terminal  Host" 393    RPL USERS ":<username> <ttyline> <hostname>" 394    RPL ENDOFUSERS ":
End of users" 395    RPL NOUSERS ":Nobody logged in" If the USERS message is handled by a server, the replies
RPL USERSTART, RPL USERS, RPL ENDOFUSERS and RPL NOUSERS are used.
RPL USERSSTART MUST be sent first, following by either a sequence of RPL USERS or a single RPL NOUSER.
Following this is RPL ENDOFUSERS.
200    RPL TRACELINK "Link <version & debug level> <destination> <
> V<protocol version> <link uptime in seconds> <backstream sendq> <upstream sendq>"
>" 202    RPL TRACEHANDSHAKE "H.S. <class> <server>" 203    RPL TRACEUNKNOWN "
" 205    RPL TRACEUSER "User <class> <
" 206    RPL TRACESERVER "Serv <class
> V<protocol version>" 207    RPL TRACESERVICE "Service <class> <name> <type>
<active type>" 208    RPL TRACENEWTYPE "<newtype
<client name>" 209    RPL TRACECLASS "Class <class
" 210    RPL TRACERECONNECT Unused.
261    RPL TRACELOG "File <logfile>
<debug level>" 262    RPL TRACEEND "
> <version & debug level> :
The RPL TRACE  are all returned by the server in response to the TRACE message.
How many are returned is dependent on the TRACE message and whether it was sent by an operator or not.
There is no predefined order for which occurs first.
RPL TRACECONNECTING and RPL TRACEHANDSHAKE are all used for connections which have not been fully established and are either unknown, still attempting to connect or in the process of completing the 'server handshake'.
RPL TRACELINK is sent by any server which handles a TRACE message and has to pass it on to another server.
The list of RPL TRACELINKs sent in response to a TRACE command traversing the IRC network should reflect the actual connectivity of the servers themselves along that path.
RPL TRACENEWTYPE is to be used for any connection which does not fit in the other categories but is being displayed anyway.
RPL TRACEEND is sent to indicate the end of the list.
211    RPL STATSLINKINFO "<linkname> <sendq> <sent messages> <sent Kbytes> <received messages> <received Kbytes> <time open>
" reports statistics on a connection.
identifies the particular connection, <sendq
> is the amount of data that is queued and waiting to be sent <sent messages>
the number of messages sent, and <sent Kbytes> the amount of data sent, in Kbytes.
<received messages> and <received Kbytes
> are the equivalent of <sent messages> and <sent Kbytes> for received data, respectively.
> indicates how long ago the connection was opened, in seconds.
<count> <byte count> <remote count
>" reports statistics on commands usage.
219    RPL ENDOFSTATS "<stats letter
:End of STATS report" 242    RPL STATSUPTIME ":
Server Up %d days %d:%02d:%02d" reports the server uptime.
221    RPL UMODEIS "<user mode string
>" To answer a query about a client's own mode, RPL UMODEIS is sent back.
234    RPL SERVLIST "<name> <server>
<hopcount> <info>" 235    RPL SERVLISTEND "<mask> <type
:End of service listing" When listing services in reply to a SERVLIST message, a server is required to send the list back using the RPL SERVLIST and RPL SERVLISTEND messages.
A separate RPL SERVLIST is sent for each service.
After the services have been listed (or if none present)
a RPL SERVLISTEND MUST be sent.
:There are <integer> users and <integer> services on <integer> servers" 252    RPL LUSEROP "
online" 253    RPL LUSERUNKNOWN "
<integer> :unknown connection(s)" 254    RPL LUSERCHANNELS "<integer> :
channels formed" 255    RPL LUSERME ":
I have <integer> clients and <integer> servers"
In processing an LUSERS message, the server sends a set of replies from RPL LUSERCLIENT, RPL LUSEROP, RPL USERUNKNOWN, RPL LUSERCHANNELS and RPL
When replying, a server MUST send back RPL LUSERCLIENT and RPL LUSERME.
The other replies are only sent back if a non zero count is found for them.
> :Administrative info" 257    RPL ADMINLOC1 ":
<admin info>" 258    RPL ADMINLOC2 ":<admin info>" 259    RPL ADMINEMAIL ":<admin info>"
When replying to an ADMIN message, a server is expected to use replies RPL ADMINME through to RPL ADMINEMAIL and provide a text message with each.
a description of what city, state and country the server is in is expected, followed by details of the institution (RPL ADMINLOC2) and finally the administrative contact for the server (an email address here is REQUIRED) in RPL ADMINEMAIL.
> :Please wait a while and try again.
" When a server drops a command without processing it, it MUST use the reply RPL TRYAGAIN to inform the originating client.
5.2 Error Replies Error replies are found in the range from 400 to 599.
401    ERR NOSUCHNICK "<nickname> :
No such nick/channel" Used to indicate the nickname parameter supplied to a command is currently unused.
402    ERR NOSUCHSERVER "<server name
No such server" Used to indicate the server name given currently does not exist.
403    ERR NOSUCHCHANNEL "<channel name
No such channel" Used to indicate the given channel name is invalid.
404    ERR CANNOTSENDTOCHAN "<channel name
> :Cannot send to channel" Sent to a user who is either (a) not on a channel which is mode  n or (b) not a chanop (or mode  v) on a channel which has mode  m set or where the user is banned and is trying to send a PRIVMSG message to that channel.
405    ERR TOOMANYCHANNELS "<channel name
:You have joined too many channels" Sent to a user when they have joined the maximum number of allowed channels and they try to join another channel.
:There was no such nickname" Returned by WHOWAS to indicate there is no history information for that nickname.
<abort message>" Returned to a client which is attempting to send a PRIVMSG/NOTICE using the user@host destination format and for a user@host which has several occurrences.
Returned to a client which trying to send a PRIVMSG/NOTICE to too many recipients.
Returned to a client which is attempting to JOIN a safe channel using the shortname when there are more than one such channel.
408    ERR NOSUCHSERVICE "<service name
No such service" Returned to a client which is attempting to send a SQUERY to a service which does not exist.
409    ERR NOORIGIN ":No origin specified" PING or PONG message missing the originator parameter.
411    ERR NORECIPIENT ":No recipient given (<command>)" 412    ERR NOTEXTTOSEND ":No text to send" 413    ERR NOTOPLEVEL "<mask
:No toplevel domain specified" 414    ERR WILDTOPLEVEL "<mask> :
Wildcard in toplevel domain" 415    ERR BADMASK "
> :Bad Server/host mask" 412 415 are returned by PRIVMSG to indicate that the message wasn't delivered for some reason.
ERR NOTOPLEVEL and ERR WILDTOPLEVEL are errors that are returned when an invalid use of "PRIVMSG $<server>" or "PRIVMSG #<host>" is attempted.
421    ERR UNKNOWNCOMMAND "<command> :
Unknown command" Returned to a registered client to indicate that the command sent is unknown by the server.
MOTD File is missing" Server's MOTD file could not be opened by the server.
No administrative info available" Returned by a server in response to an ADMIN message when there is an error in finding the appropriate information.
File error doing <file op> on <file>" Generic error message used to report a failed file operation during the processing of a message.
No nickname given" Returned when a nickname parameter expected for a command and isn't found.
> :Erroneous nickname" Returned after receiving a NICK message which contains characters which do not fall in the defined set.
See section 2.3.1 for details on valid nicknames.
> :Nickname is already in use" Returned when a NICK message is processed that results in an attempt to change to a currently existing nickname.
Nickname collision KILL from <user>@<host>
" Returned by a server to a client when it detects a nickname collision (registered of a NICK that already exists by another server).
Nick/channel is temporarily unavailable" Returned by a server to a user trying to join a channel currently blocked by the channel delay mechanism.
Returned by a server to a user trying to change nickname when the desired nickname is blocked by the nick delay mechanism.
> :They aren't on that channel"
Returned by the server to indicate that the target user of the command is not on the given channel.
> :You're not on that channel"
Returned by the server whenever a client tries to perform a channel affecting command for which the client isn't a member.
443    ERR USERONCHANNEL "<user> <channel
> :is already on channel" Returned when a client tries to invite a user to a channel they are already on.
444    ERR NOLOGIN "<user> :
User not logged in" Returned by the summon after a SUMMON command for a user was unable to be performed since they were not logged in.
445    ERR SUMMONDISABLED ":SUMMON has been disabled" Returned as a response to the SUMMON command.
MUST be returned by any server which doesn't implement it.
446    ERR USERSDISABLED ":USERS has been disabled" Returned as a response to the USERS command.
MUST be returned by any server which does not implement it.
451    ERR NOTREGISTERED ":You have not registered" Returned by the server to indicate that the client MUST be registered before the server will allow it to be parsed in detail.
461    ERR NEEDMOREPARAMS "<command> :Not enough parameters" Returned by the server by numerous commands to indicate to the client that it didn't supply enough parameters.
462    ERR ALREADYREGISTRED ":Unauthorized command (already registered)"
Returned by the server to any link which tries to change part of the registered details (such as password or user details from second USER message).
Your host isn't among the privileged
" Returned to a client which attempts to register with a server which does not been setup to allow connections from the host the attempted connection is tried.
Password incorrect" Returned to indicate a failed attempt at registering a connection for which a password was required and was either not given or incorrect.
465    ERR YOUREBANNEDCREEP ":You are banned from this server" Returned after an attempt to connect and register yourself with a server which has been setup to explicitly deny connections to you.
466    ERR YOUWILLBEBANNED Sent by a server to a user to inform that access to the server will soon be denied.
467    ERR KEYSET "<channel> :
Channel key already set" 471    ERR CHANNELISFULL "
Cannot join channel ( l)" 472    ERR UNKNOWNMODE "
> :is unknown mode char to me for <channel>
" 473    ERR INVITEONLYCHAN "<channel
:Cannot join channel ( i)
" 474    ERR BANNEDFROMCHAN "<channel> :Cannot join channel ( b)" 475    ERR BADCHANNELKEY "
:Cannot join channel ( k)" 476    ERR BADCHANMASK "<channel> :
Bad Channel Mask" 477    ERR NOCHANMODES "
Channel doesn't support modes" 478    ERR BANLISTFULL "
> :Channel list is full" 481    ERR NOPRIVILEGES ":Permission Denied
You're not an IRC operator"
Any command requiring operator privileges to operate MUST return this error to indicate the attempt was unsuccessful.
> :You're not channel operator"
Any command requiring 'chanop' privileges (such as MODE messages) MUST return this error if the client making the attempt is not a chanop on the specified channel.
:You can't kill a server!"
Any attempts to use the KILL command on a server are to be refused and this error returned directly to the client.
484    ERR RESTRICTED ":Your connection is restricted!"
Sent by the server to a user upon connection to indicate the restricted nature of the connection (user mode " r").
:You're not the original channel operator"
Any MODE requiring "channel creator" privileges MUST return this error if the client making the attempt is not a chanop on the specified channel.
491    ERR NOOPERHOST ":No O lines for your host" If a client sends an OPER message and the server has not been configured to allow connections from the client's host as an operator, this error MUST be returned.
Unknown MODE flag" Returned by the server to indicate that a MODE message was sent with a nickname parameter and that the a mode flag sent was not recognized.
502    ERR USERSDONTMATCH ":Cannot change mode for other users
" Error sent to any user trying to view or change the user mode for a user other than themselves.
5.3 Reserved numerics These numerics are not described above since they fall into one of the following categories:
no longer in use; 2. reserved for future planned use;
in current use but are part of a non generic 'feature' of the current IRC server.
ENDOFSERVICES 233    RPL SERVICE 300
The IRC software, version 2.10 is the only complete implementation of the IRC protocol (client and server).
Because of the small amount of changes in the client protocol since the publication of RFC 1459 [IRC], implementations that follow it are likely to be compliant with this protocol or to require a small amount of changes to reach compliance.
There are a number of recognized problems with the IRC Client Protocol, and more generally with the IRC Server Protocol.
In order to preserve backward compatibility with old clients, this protocol has almost not evolved since the publication of RFC 1459 [IRC].
The idea of the nickname on IRC is very convenient for users to use when talking to each other outside of a channel, but there is only a finite nickname space and being what they are, it's not uncommon for several people to want to use the same nick.
If a nickname is chosen by two people using this protocol, either one will not succeed or both will removed by use of a server KILL
7.3 Security considerations Security issues related to this protocol are discussed in the "IRC Server Protocol" [IRC SERVER] as they are mostly an issue for the server side of the connection.
Current support and availability Mailing lists for IRC related discussion: General discussion: ircd users@irc.org Protocol development: ircd
