- title: __initial_text__
  contents:
  - '               RTP Payload Format for IP-MR Speech Codec

    '
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the payload format for packetization of\n\
    \   SPIRIT IP-MR encoded speech signals into the Real-time Transport\n   Protocol\
    \ (RTP).  The payload format supports transmission of multiple\n   frames per\
    \ packet and introduces redundancy for robustness against\n   packet loss and\
    \ bit errors.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6262.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. IP-MR Codec Description .........................................3\n  \
    \ 3. Payload Format ..................................................4\n    \
    \  3.1. RTP Header Usage ...........................................4\n      3.2.\
    \ RTP Payload Structure ......................................4\n      3.3. Speech\
    \ Payload Header ......................................5\n      3.4. Speech Payload\
    \ Table of Contents ...........................6\n      3.5. Speech Payload Data\
    \ ........................................6\n      3.6. Redundancy Payload Header\
    \ ..................................7\n      3.7. Redundancy Payload Table of\
    \ Contents .......................8\n      3.8. Redundancy Payload Data ....................................8\n\
    \   4. Payload Examples ................................................9\n  \
    \    4.1. Payload Carrying a Single Frame ............................9\n    \
    \  4.2. Payload Carrying Multiple Frames with Redundancy ..........10\n   5. Congestion\
    \ Control .............................................11\n   6. Security Considerations\
    \ ........................................12\n   7. Payload Format Parameters\
    \ ......................................13\n      7.1. Media Type Registration\
    \ ...................................13\n      7.2. Mapping Media Type Parameters\
    \ into SDP ....................14\n   8. IANA Considerations ............................................14\n\
    \   9. Normative References ...........................................15\n  \
    \ Appendix A. Retrieving Frame Information ..........................16\n    \
    \  A.1. get_frame_info.c ..........................................16\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies the payload format for packetization\
    \ of\n   SPIRIT IP-MR encoded speech signals into the Real-time Transport\n  \
    \ Protocol (RTP).  The payload format supports transmission of multiple\n   frames\
    \ per packet and introduces redundancy for robustness against\n   packet loss\
    \ and bit errors.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n"
- title: 2.  IP-MR Codec Description
  contents:
  - "2.  IP-MR Codec Description\n   IP-MR is a wideband speech codec designed by\
    \ SPIRIT for conferencing\n   services over packet-switched networks such as the\
    \ Internet.\n   IP-MR is a scalable codec.  This means that the source not only\
    \ has\n   the ability to change transmission rate on the fly, but the gateway\n\
    \   is also able to decrease bandwidth at any time without performance\n   overhead.\
    \  There are 6 coding rates from 7.7 to 34.2 kbps available.\n   The codec operates\
    \ on a frame-by-frame basis with a frame size of 20\n   ms at a 16 kHz sampling\
    \ rate with a total end-to-end delay of 25 ms.\n   Each compressed frame is represented\
    \ as a sequence of layers.  The\n   first (base) layer is mandatory while the\
    \ other (enhancement) layers\n   can be safely discarded.  Information about the\
    \ particular frame\n   structure is available from the payload header.  In order\
    \ to adjust\n   outgoing bandwidth, the gateway MUST read the frame(s) structure\
    \ from\n   the payload header, define which enhancement layers to discard, and\n\
    \   compose a new RTP packet according to this specification.\n   In fact, not\
    \ all bits within a frame are equally tolerant to\n   distortion.  IP-MR defines\
    \ 6 classes ('A'-'F') of sensitivity to bit\n   errors.  Any damage of class 'A'\
    \ bits causes significant\n   reconstruction artifacts while the loss in class\
    \ 'F' may not even be\n   perceived by the listener.  Note that only the base\
    \ layer in a\n   bitstream is represented as a set of classes.\n   The IP-MR payload\
    \ format allows frame duplication through the packets\n   to improve robustness\
    \ against packet loss (Section 3.6).  The base\n   layer can be retransmitted\
    \ completely or in several sensitive\n   classes.  Enchantment layers are not\
    \ retransmittable.\n   The fine-grained redundancy in conjunction with bitrate\
    \ scalability\n   allows applications to adjust the trade-off between overhead\
    \ and\n   robustness against packet loss.  Note that this approach is supported\n\
    \   natively within a packet and requires no out-of-band signals or\n   session-initialization\
    \ procedures.\n   The main IP-MR features are as follows:\n   o  High-quality\
    \ wideband speech codec.\n   o  Bitrate scalable with 6 average rates from 7.7\
    \ to 34.2 kbps.\n   o  Built-in discontinuous transmission (DTX) and comfort noise\n\
    \      generation (CNG) support.\n   o  Flexible in-band redundancy control scheme\
    \ for packet-loss\n      protection.\n"
- title: 3.  Payload Format
  contents:
  - "3.  Payload Format\n   The payload format consists of the RTP header and the\
    \ IP-MR payload.\n"
- title: 3.1.  RTP Header Usage
  contents:
  - "3.1.  RTP Header Usage\n   The format of the RTP header is specified in [RFC3550].\
    \  This payload\n   format uses the fields of the header in a manner consistent\
    \ with that\n   specification.\n   The RTP timestamp corresponds to the sampling\
    \ instant of the first\n   sample encoded for the first frame-block in the packet.\
    \  The\n   timestamp clock frequency SHALL be 16 kHz.  The duration of one frame\n\
    \   is 20 ms, which corresponds to 320 samples per frame.  Thus, the\n   timestamp\
    \ is increased by 320 for each consecutive frame.  The\n   timestamp is also used\
    \ to recover the correct decoding order of the\n   frame-blocks.\n   The RTP header\
    \ marker bit (M) SHALL be set to 1 whenever the first\n   frame-block carried\
    \ in the packet is the first frame-block in a\n   talkspurt (see definition of\
    \ talkspurt in Section 4.1 of [RFC3551]).\n   For all other packets, the marker\
    \ bit SHALL be set to zero (M=0).\n   The assignment of an RTP payload type for\
    \ the format defined in this\n   memo is outside the scope of this document. \
    \ The RTP profiles in use\n   currently mandate binding the payload type dynamically\
    \ for this\n   payload format.  This is basically necessary because the payload\
    \ type\n   expresses the configuration of the payload itself, i.e., basic or\n\
    \   interleaved mode, and the number of channels carried.\n   The remaining RTP\
    \ header fields are used as specified in [RFC3550].\n"
- title: 3.2.  RTP Payload Structure
  contents:
  - "3.2.  RTP Payload Structure\n   The IP-MR payload is composed of two payloads,\
    \ one for current speech\n   and one for redundancy.  Both payloads are represented\
    \ in this form:\n   Header, Table of Contents (TOC), and Data.  Redundancy payload\n\
    \   carries data for preceding and pre-preceding packets.\n     +--------+-----+----------------------+-\
    \ - - - +- -  +- - - - - +\n     | Header | TOC | Data                 | Header\
    \ | TOC | Data     |\n     +--------+-----+----------------------+- - - - +- -\
    \  +- - - - - +\n     |<- Speech -------------------------->|<- Redundancy (opt)\
    \ ---->|\n"
- title: 3.3.  Speech Payload Header
  contents:
  - "3.3.  Speech Payload Header\n   This header carries parameters that are common\
    \ for all frames in the\n   packet:\n                        0               \
    \    1\n                        0 1 2 3 4 5 6 7 8 9 0 1\n                    \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+\n                       |T| CR  | BR  |D|A|GR |R|\n\
    \                       +-+-+-+-+-+-+-+-+-+-+-+-+\n   o  T (1 bit): Reserved.\
    \  MUST always be set to 0.  Receiver MAY\n      discard packet if the 'T' bit\
    \ is not equal to 0.\n   o  CR (3 bits): Coding rate index - top enchantment layer\
    \ available.\n      The CR value 7 (NO_DATA) indicates that there is no speech\
    \ data\n      (and thus no speech TOC) in the payload.  This MAY be used to\n\
    \      transmit redundancy data only.\n   o  BR (3 bits): Base rate index - base\
    \ layer bitrate.  Speech payload\n      can be scaled to any rate index between\
    \ BR and CR.  Packets with\n      BR = 6 or BR > CR MUST be discarded.  Redundancy\
    \ data is also\n      considered to have a base rate of BR.\n   o  D (1 bit):\
    \ Reserved.  MUST always be set to 1.  Receiver MAY\n      discard packet if the\
    \ 'D' bit is zero.\n   o  A (1 bit): Byte alignment.  The value of 1 specifies\
    \ that padding\n      bits were added to enable each compressed frame (3.5) to\
    \ start\n      with the byte (8-bit) boundary.  The value of 0 specifies\n   \
    \   unaligned frames.  Note that the speech payload is always padded\n      to\
    \ the byte boundary independently on an 'A' bit value.\n   o  GR (2 bits): Number\
    \ of frames in packet (grouping size).  Actual\n      grouping size is GR + 1;\
    \ thus, the maximum grouping supported is\n      4.\n   o  R (1 bit): Redundancy\
    \ presence.  Value of 1 indicates redundancy\n      payload presence.\n   Note\
    \ that the values of 'T' and 'D' bits are fixed; any other values\n   are not\
    \ allowed by specification.  Padding bits ('P' bits) MUST\n   always be set to\
    \ zero.\n   The following table defines the mapping between rate index and rate\n\
    \   value:\n                    +------------+--------------+\n              \
    \      | rate index | avg. bitrate |\n                    +------------+--------------+\n\
    \                    |      0     |   7.7 kbps   |\n                    |    \
    \  1     |   9.8 kbps   |\n                    |      2     |  14.3 kbps   |\n\
    \                    |      3     |  20.8 kbps   |\n                    |    \
    \  4     |  27.9 kbps   |\n                    |      5     |  34.2 kbps   |\n\
    \                    |      6     |  (reserved)  |\n                    |    \
    \  7     |   NO_DATA    |\n                    +------------+--------------+\n\
    \   The value of 6 is reserved.  If receiving this value, the packet MUST\n  \
    \ be discarded.\n"
- title: 3.4.  Speech Payload Table of Contents
  contents:
  - "3.4.  Speech Payload Table of Contents\n   The speech TOC is a bitmask indicating\
    \ the presence of each frame in\n   the packet.  TOC is only available if the\
    \ 'CR' value is not equal to\n   7 (NO_DATA).\n                              \
    \ 0 1 2 3\n                              +-+-+-+-+\n                         \
    \     |E|E|E|E|\n                              +-+-+-+-+\n                   \
    \           |<----->| <-- #(GR+1)\n   o  E (1 bit): Frame existence indicator.\
    \  The value of 0 indicates\n      speech data is not present for the corresponding\
    \ frame.  The IP-MR\n      encoder sets the 'E' flag to 0 for the periods of silence\
    \ in DTX\n      mode.  Applications MUST set this bit to 0 if the frame is known\n\
    \      to be damaged.\n"
- title: 3.5.  Speech Payload Data
  contents:
  - "3.5.  Speech Payload Data\n   Speech data contains (GR+1) compressed IP-MR frames\
    \ (20 ms of data).\n   A compressed frame has a length of zero if the corresponding\
    \ TOC flag\n   is zero.\n   The beginning of each compressed frame is aligned\
    \ if the 'A' bit is\n   nonzero, while the end of the speech payload is always\
    \ aligned to a\n   byte (8-bit) boundary:\n   +- - -+------------+------------+------------+------------+\n\
    \   | TOC | Frame1     | Frame2     | Frame3     | Frame4     |\n   +- - -+------------+------------+------------+------------+\
    \   ALWAYS\n         |<- aligned  |<- aligned  |<- aligned  |<- aligned  |<- ALIGNED\n\
    \   Marked regions MUST be padded only if the 'A' bit is set to '1'.\n   The compressed\
    \ frame structure is as follows:\n   |<---- sensitive classes ------>|<----- enchantment\
    \ layers -------->|\n   +-------------------------------+----+-----+------+- -\
    \ - - - +------+\n   | L1 (Base Layer)               | L2 | L3  | L4   |     \
    \     | LN   |\n   +-------------------------------+----+-----+------+- - - -\
    \ - +------+\n   |<- A --->|<- B ->| ... |<- F ->|                           \
    \        |\n   |<- BR rate ------------------->|                             \
    \      |\n   |<- CR rate ------------------------------------------------------->|\n\
    \   Appendix A of this document provides a helper routine written in \"C\"\n \
    \  that MUST be used to extract sensitivity classes and bounds for the\n   enchantment\
    \ layers from the compressed frame data.\n"
- title: 3.6.  Redundancy Payload Header
  contents:
  - "3.6.  Redundancy Payload Header\n   The redundancy payload presence is signaled\
    \ by the 'R' bit of the\n   speech payload header.  The redundancy header is composed\
    \ of two\n   fields of 3 bits each:\n                               0 1 2 3 4\
    \ 5\n                              +-+-+-+-+-+-+\n                           \
    \   | CL1 | CL2 |\n                              +-+-+-+-+-+-+\n   The 'CL1' and\
    \ 'CL2' fields both specify the sensitivity classes\n   available for preceding\
    \ and pre-preceding packets respectively.\n                    +-------+--------------------+\n\
    \                    |  CL   | Redundancy classes |\n                    |   \
    \    |      available     |\n                    +-------+--------------------+\n\
    \                    |   0   |       NONE         |\n                    |   1\
    \   |        A           |\n                    |   2   |        A-B         |\n\
    \                    |   3   |        A-C         |\n                    |   4\
    \   |        A-D         |\n                    |   5   |        A-E         |\n\
    \                    |   6   |        A-F         |\n                    |   7\
    \   |    (reserved)      |\n                    +-------+--------------------+\n\
    \   A receiver can reconstruct the base layer of preceding packets\n   completely\
    \ (CL=6) or partially (0<CL< 6) based on the sensitivity\n   classes delivered.\
    \  A decoder MUST discard the redundancy payload if\n   'CL' is equal to 0 or\
    \ 7.\n   Note that the index of the base rate and grouping parameter is not\n\
    \   transmitted for the redundancy payload.  Applications MUST assume\n   that\
    \ 'BR' and 'GR' are the same as for the current packet.\n"
- title: 3.7.  Redundancy Payload Table of Contents
  contents:
  - "3.7.  Redundancy Payload Table of Contents\n   The redundancy TOC is a bitmask\
    \ indicating the presence of each frame\n   in the redundancy payload.  The redundancy\
    \ TOC is only available if\n   the 'CL' value is not equal to 0 or 7.\n      \
    \           0 1 ...\n                +-+-+-+-+-+-+-+-+\n                |E|E|E|E|E|E|E|E|\n\
    \                +-+-+-+-+-+-+-+-+\n                |       |<----->| pre-preceding\
    \ payload #(GR+1)\n                |<----->| preceding payload #(GR+1)\n   o \
    \ E (1 bit): Redundancy frame existence indicator.  The value of 0\n      indicates\
    \ redundancy data is not present for corresponding frame.\n"
- title: 3.8.  Redundancy Payload Data
  contents:
  - "3.8.  Redundancy Payload Data\n   IP-MR defines 6 classes ('A'-'F') of sensitivity\
    \ to bit errors.  Any\n   damage of class 'A' bits causes significant reconstruction\
    \ artifacts\n   while the loss in class 'F' may not even be perceived by the\n\
    \   listener.  Note that only the base layer in a bitstream is\n   represented\
    \ as a set of classes.  Together, the sensitivity classes'\n   approach and redundancy\
    \ allow IP-MR duplicate frames through the\n   packets to improve robustness against\
    \ packet loss.\n   Redundancy data carries a number of sensitivity classes for\
    \ preceding\n   and pre-preceding packets as indicated by the 'CL1' and 'CL2'\
    \ fields\n   of the redundancy header.  The sensitivity classes' data is available\n\
    \   individually for each frame only if the corresponding 'E' bit of the\n   redundancy\
    \ TOC is nonzero:\n   +---+---+----+----|-----+-----+-----+-----+-----+-----+-----+\n\
    \   |A-C|A-B|1000|1001|cl_A1|cl_B1|cl_C1|cl_A1|cl_B1|cl_A4|cl_B4|\n   +---+---+----+----|-----+-----+-----+-----+-----+-----+-----+\n\
    \   |<- CL >|<- TOC ->|<- preceding --->|<- pre-preceding ----->|\n   Redundancy\
    \ data is only available if the base rates (BRs) and coding\n   rates (CRs) of\
    \ preceding and pre-preceding packets are the same as\n   for the current packet.\n\
    \   A receiver MAY use redundancy data to compensate for packet loss\n   (note\
    \ that in this case, the 'CL' field MUST also be passed to the\n   decoder). \
    \ The helper routine provided in Appendix A MUST be used to\n   extract sensitivity\
    \ classes' length for each frame.  The following\n   pseudocode describes the\
    \ sequence of operations:\n      int sensitivityBits[numOfRedundancyFrames][6];\n\
    \      int redundancyBits [numOfRedundancyFrames];\n      for(i = 0 ; i < numOfRedundancyFrames;\
    \ i++) {\n          GetFrameInfo(CR, BR, pRedundancyPayloadData, dummy,\n    \
    \                   sensitivityBits[i], dummy);\n          redundancyBits[i] =\
    \ 0;\n          for(j = 0; j < CL[i]; j++ ) {\n               redundancyBits[i]\
    \ += sensitivityBits[i][j];\n          }\n          flushBits(pRedundancyPayloadData,\
    \ redundancyBits[i]);\n      }\n"
- title: 4.  Payload Examples
  contents:
  - "4.  Payload Examples\n   This section provides detailed examples of the IP-MR\
    \ payload format.\n"
- title: 4.1.  Payload Carrying a Single Frame
  contents:
  - "4.1.  Payload Carrying a Single Frame\n   The following diagram shows a typical\
    \ IP-MR payload carrying one\n   (GR=0) non-aligned (A=0) speech frame without\
    \ redundancy (R=0).  The\n   base layer is coded at 7.8 kbps (BR=0) while the\
    \ coding rate is 9.7\n   kbps (CR=1).  The 'E' bit value of 1 signals that compressed\
    \ frame\n   bits s(0) - s(193) are present.  There is a padding bit 'P' to\n \
    \  maintain speech payload size alignment.\n       0                   1     \
    \              2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |0|CR=1 |BR=0 |1|0|0 0|0|1|s(0)                                 |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                       s(193)|P|\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 4.2.  Payload Carrying Multiple Frames with Redundancy
  contents:
  - "4.2.  Payload Carrying Multiple Frames with Redundancy\n   The following diagram\
    \ shows a payload carrying 3 (GR=2) aligned (A=1)\n   speech frames with redundancy\
    \ (R=1).  The TOC value of '101'\n   indicates speech data present for the first\
    \ (bits sp1(0)-sp1(92)) and\n   third frames (bits sp3(0)-sp3(171)).  There are\
    \ no enchantment layers\n   because the base and coding rates are equal (BR=CR=0).\
    \  The padding\n   bit 'P' is inserted to maintain necessary alignment.\n   The\
    \ redundancy payload present for both preceding and pre-preceding\n   payloads\
    \ (CL1 = A-B, CL2=A), but redundancy data is only available\n   for 5 (TOC='111011')\
    \ of 6 (2*(GR+1)) frames.  There is redundancy\n   data of 20, 39, and 35 bits\
    \ for each of the three frames of the\n   preceding packet and 15 and 19 bits\
    \ for the two frames of the pre-\n   preceding packet.\n       0             \
    \      1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |0|CR=0 |BR=0 |1|1|1 0|1|1 0 1|P|sp1(0)                         |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                  sp1(92)|P|P|P|sp3(0)                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                                               |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                                               sp3(171)|P|P|P|P|\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |CL1=2|CL2=1|1\
    \ 1 1|0 1 1|red1_1_AB(0)              red1_1_AB(19)|\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |red1_2_AB(0)                                                   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |red1_2_AB(38)|red1_3_AB(0)\
    \                                     |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |      red1_3_AB(34)|red2_2_A(0)      red2_2_A(14)|red2_3_A(0)  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \           red2_3_A(18)|P|P|P|P|\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 5.  Congestion Control
  contents:
  - "5.  Congestion Control\n   The general congestion control considerations for\
    \ transporting RTP\n   data applicable to IP-MR speech over RTP (see RTP [RFC3550]\
    \ and any\n   applicable RTP profile like the Audio-Visual Profile (AVP)\n   [RFC3551]).\
    \  However, the multi-rate capability of IP-MR speech\n   coding provides a mechanism\
    \ that may help to control congestion,\n   since the bandwidth demand can be adjusted\
    \ by selecting a different\n   encoding mode.\n   The number of frames encapsulated\
    \ in each RTP payload highly\n   influences the overall bandwidth of the RTP stream\
    \ due to header\n   overhead constraints.  Packetizing more frames in each RTP\
    \ payload\n   can reduce the number of packets sent and thus reduce the overhead\n\
    \   from IP/UDP/RTP headers, at the expense of increased delay.\n   Due to the\
    \ scalability nature of the IP_MR codec, the transmission\n   rate can be reduced\
    \ at any transport stage to fit channel bandwidth.\n   The minimal rate is specified\
    \ by the BR field of the payload header\n   and can be as low as 7.7 kbps.  It\
    \ is up to the application to keep\n   the balance between coding quality (high\
    \ BR) and bitstream\n   scalability (low BR).  Because coding quality depends\
    \ on coding rate\n   (CR) rather than base rate (BR), it is NOT RECOMMENDED to\
    \ use high BR\n   values for real-time communications.\n   Applications MAY utilize\
    \ bitstream redundancy to combat packet loss.\n   However, the gateway is free\
    \ to chose any option to reduce the\n   transmission rate; the coding layer or\
    \ redundancy bits can be\n   dropped.  Due to this fact, it is NOT RECOMMENDED\
    \ for applications to\n   increase the total bitrate when adding redundancy in\
    \ response to\n   packet loss.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   RTP packets using the payload format defined\
    \ in this specification\n   are subject to the security considerations discussed\
    \ in the RTP\n   specification [RFC3550] and in any applicable RTP profile.  The\
    \ main\n   security considerations for the RTP packet carrying the RTP payload\n\
    \   format defined within this memo are confidentiality, integrity, and\n   source\
    \ authenticity.  Confidentiality is achieved by encryption of\n   the RTP payload.\
    \  Integrity of the RTP packets is achieved through a\n   suitable cryptographic\
    \ integrity-protection mechanism.  Such a\n   cryptographic system may also allow\
    \ the authentication of the source\n   of the payload.  A suitable security mechanism\
    \ for this RTP payload\n   format should provide confidentiality, integrity protection,\
    \ and\n   source authentication at least capable of determining if an RTP\n  \
    \ packet is from a member of the RTP session.\n   Note that the appropriate mechanisms\
    \ to provide security to RTP and\n   payloads following this memo may vary.  The\
    \ security mechanisms are\n   dependent on the application, the transport, and\
    \ the signaling\n   protocol employed.  Therefore, a single mechanism is not sufficient;\n\
    \   although if suitable, usage of the Secure Real-time Transport\n   Protocol\
    \ (SRTP) [RFC3711] is recommended.  Other mechanisms that may\n   be used are\
    \ IPsec [RFC4301] and Transport Layer Security (TLS)\n   [RFC5246] (RTP over TCP);\
    \ other alternatives may exist.\n   This payload format does not exhibit any significant\
    \ non-uniformity\n   in the receiver-side computational complexity for packet\
    \ processing\n   and thus is unlikely to pose a denial-of-service threat due to\
    \ the\n   receipt of pathological data.\n"
- title: 7.  Payload Format Parameters
  contents:
  - "7.  Payload Format Parameters\n   This section describes the media types and\
    \ names associated with this\n   payload format.\n   The IP-MR media subtype is\
    \ defined as 'ip-mr_v2.5'.  This subtype was\n   registered to specify an internal\
    \ codec version.  Later, this version\n   was accepted as final, the bitstream\
    \ was frozen, and IP-MR v2.5 was\n   published under the name of IP-MR.  Currently,\
    \ the terms 'IP-MR' and\n   'IP-MR v2.5' are synonyms.  The subtype name 'ip-mr_v2.5'\
    \ is being\n   used in implementations.\n"
- title: 7.1.  Media Type Registration
  contents:
  - "7.1.  Media Type Registration\n   Media Type name:     audio\n   Media Subtype\
    \ name:  ip-mr_v2.5\n   Required parameters: none\n   Optional parameters:\n \
    \     These parameters apply to RTP transfer only.\n      ptime: The media packet\
    \ length in milliseconds.  Allowed values\n      are: 20, 40, 60, and 80.\n  \
    \ Encoding considerations:\n      This media type is framed and binary (see RFC\
    \ 4288, Section 4.8).\n   Security considerations:\n      See Section 6 of RFC\
    \ 6262.\n   Interoperability considerations:\n      none\n   Published specification:\n\
    \      RFC 6262\n   Applications that use this media type:\n      Real-time audio\
    \ applications like voice over IP,\n      teleconference, and multimedia streaming.\n\
    \   Additional information:\n      none\n   Person & email address to contact\
    \ for further information:\n      V. Sviridenko <vladimirs@spiritdsp.com>\n  \
    \ Intended usage:\n      COMMON\n   Restrictions on usage:\n      This media type\
    \ depends on RTP framing and thus is only defined\n      for transfer via RTP\
    \ [RFC3550].\n   Authors:\n      Sergey Ikonin <info@spiritdsp.com>\n      Dmitry\
    \ Yudin <info@spiritdsp.com>\n   Change controller:\n      IETF Audio/Video Transport\
    \ working group delegated from the IESG.\n"
- title: 7.2.  Mapping Media Type Parameters into SDP
  contents:
  - "7.2.  Mapping Media Type Parameters into SDP\n   The information carried in the\
    \ media type specification has a\n   specific mapping to fields in the Session\
    \ Description Protocol (SDP)\n   [RFC4566], which is commonly used to describe\
    \ RTP sessions.  When SDP\n   is used to specify sessions employing the IP-MR\
    \ codec, the mapping is\n   as follows:\n   o  The media type (\"audio\") goes\
    \ in SDP \"m=\" as the media name.\n   o  The media subtype (payload format name)\
    \ goes in SDP \"a=rtpmap\" as\n      the encoding name.  The RTP clock rate in\
    \ \"a=rtpmap\" MUST be\n      16000.\n   o  The parameter \"ptime\" goes in the\
    \ SDP \"a=ptime\" attribute.\n   Any remaining parameters go in the SDP \"a=fmtp\"\
    \ attribute by copying\n   them directly from the media type parameter string\
    \ as a semicolon-\n   separated list of parameter=value pairs.\n   Note that the\
    \ payload format (encoding) names are commonly shown in\n   uppercase.  Media\
    \ subtypes are commonly shown in lowercase.  These\n   names are case-insensitive\
    \ in both places.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   One media type (ip-mr_v2.5) has been defined and\
    \ registered in the\n   media types registry.\n"
- title: 9.  Normative References
  contents:
  - "9.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.\n          \
    \    Jacobson, \"RTP: A Transport Protocol for Real-Time\n              Applications\"\
    , STD 64, RFC 3550, July 2003.\n   [RFC3551]  Schulzrinne, H. and S. Casner, \"\
    RTP Profile for Audio and\n              Video Conferences with Minimal Control\"\
    , STD 65, RFC 3551,\n              July 2003.\n   [RFC3711]  Baugher, M., McGrew,\
    \ D., Naslund, M., Carrara, E., and K.\n              Norrman, \"The Secure Real-time\
    \ Transport Protocol (SRTP)\",\n              RFC 3711, March 2004.\n   [RFC4301]\
    \  Kent, S. and K. Seo, \"Security Architecture for the\n              Internet\
    \ Protocol\", RFC 4301, December 2005.\n   [RFC4566]  Handley, M., Jacobson, V.,\
    \ and C. Perkins, \"SDP: Session\n              Description Protocol\", RFC 4566,\
    \ July 2006.\n   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer\
    \ Security\n              (TLS) Protocol Version 1.2\", RFC 5246, August 2008.\n"
- title: Appendix A.  Retrieving Frame Information
  contents:
  - "Appendix A.  Retrieving Frame Information\n   This appendix contains the C code\
    \ for implementation of the frame-\n   parsing function.  This function extracts\
    \ information about a coded\n   frame, including frame size, number of layers,\
    \ size of each layer,\n   and size of perceptual sensitive classes.\n"
- title: A.1.  get_frame_info.c
  contents:
  - "A.1.  get_frame_info.c\n   /*\n   Copyright (c) 2011 IETF Trust and the persons\
    \ identified as\n   authors of the code.  All rights reserved.\n   Redistribution\
    \ and use in source and binary forms, with or without\n   modification, are permitted\
    \ provided that the following conditions\n   are met:\n   - Redistributions of\
    \ source code must retain the above copyright\n     notice, this list of conditions\
    \ and\n     the following disclaimer.\n   - Redistributions in binary form must\
    \ reproduce the above copyright\n     notice, this list of conditions and the\
    \ following disclaimer in the\n     documentation and/or other materials provided\
    \ with the\n     distribution.\n   - Neither the name of Internet Society, IETF\
    \ or IETF Trust, nor the\n     names of specific contributors, may be used to\
    \ endorse or promote\n     products derived from this software without specific\
    \ prior written\n     permission.\n   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT\
    \ HOLDERS AND CONTRIBUTORS\n   \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,\
    \ INCLUDING, BUT NOT\n   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\
    \ AND FITNESS FOR\n   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL\
    \ THE COPYRIGHT\n   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\
    \ INCIDENTAL,\n   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT\
    \ NOT\n   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n\
    \   DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n  \
    \ THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n   (INCLUDING\
    \ NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n   OF THIS SOFTWARE,\
    \ EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   */\n   /******************************************************************\n\
    \     get_frame_info.c\n     Retrieving frame information for IP-MR Speech Codec\n\
    \   ******************************************************************/\n   #define\
    \ RATES_NUM       6   // number of codec rates\n   #define SENSE_CLASSES   6 \
    \  // number of sensitivity classes (A..F)\n   // frame types\n   #define FT_SPEECH\
    \       0   // active speech\n   #define FT_DTX_SID      1   // silence insertion\
    \ descriptor\n   // get specified bit from coded data\n   int GetBit(const unsigned\
    \ char *buf, int curBit)\n   {\n       return (buf[curBit>>3]>>(curBit%8))&1;\n\
    \   }\n   // retrieve frame information\n   int GetFrameInfo(               //\
    \ o: frame size in bits\n       short rate,                 // i: encoding rate\
    \ (0..5)\n       short base_rate,            // i: base (core) layer rate,\n \
    \      const unsigned char buf[2], // i: coded bit frame\n       int size,   \
    \                // i: coded bit frame size in bytes\n       short pLayerBits[RATES_NUM],\
    \     // o: number of bits in layers\n       short pSenseBits[SENSE_CLASSES],\
    \ // o: number of bits in\n                                        //    sensitivity\
    \ classes\n       short *nLayers                   // o: number of layers\n  \
    \ )\n   {\n       static const short Bits_1[4]    = {  0, 9, 9,15};\n       static\
    \ const short Bits_2[16]   = { 43,50,36,31,46,48,40,44,\n                    \
    \                       47,43,44,45,43,44,47,36};\n       static const short Bits_3[2][6]\
    \ = {{13,11,23,33,36,31},\n                                          {25, 0,23,32,36,31},};\n\
    \       int FrType;\n       int i, nBits = 0;\n       if (rate < 0 || rate > 5)\
    \ {\n           return 0; // incorrect stream\n       }\n       // extract frame\
    \ type bit if required\n       FrType = GetBit(buf, nBits++) ? FT_SPEECH : FT_DTX_SID;\n\
    \       if((FrType != FT_DTX_SID && size < 2) || size < 1) {\n           return\
    \ 0; // not enough input data\n       }\n       for(i = 0; i < SENSE_CLASSES;\
    \ i++) {\n           pSenseBits[i] = 0;\n       }\n       {\n           int cw_0;\n\
    \           int b[14];\n           // extract meaning bits\n           for(i =\
    \ 0 ; i < 14; i++) {\n               b[i] = GetBit(buf, nBits++);\n          \
    \ }\n           // parse\n           if(FrType == FT_DTX_SID) {\n            \
    \   cw_0 = (b[0]<<0)|(b[1]<<1)|(b[2]<<2)|(b[3]<<3);\n               rate = 0;\n\
    \               pSenseBits[0] = 10 + Bits_2[cw_0];\n           } else {\n    \
    \           int i, idx;\n               int nFlag_1, nFlag_2, cw_1, cw_2;\n  \
    \             nFlag_1 = b[0] + b[2] + b[4] + b[6];\n               cw_1 = (cw_1\
    \ << 1) | b[0];\n               cw_1 = (cw_1 << 1) | b[2];\n               cw_1\
    \ = (cw_1 << 1) | b[4];\n               cw_1 = (cw_1 << 1) | b[6];\n         \
    \      nFlag_2 = b[1] + b[3] + b[5] + b[7];\n               cw_2 = (cw_2 << 1)\
    \ | b[1];\n               cw_2 = (cw_2 << 1) | b[3];\n               cw_2 = (cw_2\
    \ << 1) | b[5];\n               cw_2 = (cw_2 << 1) | b[7];\n               cw_0\
    \ = (b[10]<<0)|(b[11]<<1)|(b[12]<<2)|(b[13]<<3);\n               if (base_rate\
    \ < 0)    base_rate = 0;\n               if (base_rate > rate) base_rate = rate;\n\
    \               idx = base_rate == 0 ? 0 : 1;\n               pSenseBits[0] =\
    \ 15+Bits_2[cw_0];\n               pSenseBits[1] = Bits_1[(cw_1>>0)&0x3] +\n \
    \                              Bits_1[(cw_1>>2)&0x3];\n               pSenseBits[2]\
    \ = nFlag_1*5;\n               pSenseBits[3] = nFlag_2*30;\n               pSenseBits[5]\
    \ = (4 - nFlag_2)*(Bits_3[idx][0]);\n               for (i = 1; i < rate+1; i++)\
    \ {\n                   pLayerBits[i] = 4*Bits_3[idx][i];\n               }\n\
    \           }\n           pLayerBits[0] = 0;\n           for (i = 0; i < SENSE_CLASSES;\
    \ i++) {\n               pLayerBits[0] += pSenseBits[i];\n           }\n     \
    \      *nLayers = rate+1;\n       }\n       {\n           // count total frame\
    \ size\n           int payloadBitCount = 0;\n           for (i = 0; i < *nLayers;\
    \ i++) {\n               payloadBitCount += pLayerBits[i];\n           }\n   \
    \        return payloadBitCount;\n       }\n   }\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Sergey Ikonin\n   SPIRIT DSP\n   Building 27, A. Solzhenitsyna\
    \ Street\n   109004, Moscow\n   Russia\n   Tel: +7 495 661-2178\n   Fax: +7 495\
    \ 912-6786\n   EMail: s.ikonin@gmail.com\n"
