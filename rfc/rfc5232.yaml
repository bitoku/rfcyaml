- contents:
  - '              Sieve Email Filtering: Imap4flags Extension

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   Recent discussions have shown that it is desirable to set different\n
    \  IMAP (RFC 3501) flags on message delivery.  This can be done, for\n   example,
    by a Sieve interpreter that works as a part of a Mail\n   Delivery Agent.\n   This
    document describes an extension to the Sieve mail filtering\n   language for setting
    IMAP flags.  The extension allows setting of\n   both IMAP system flags and IMAP
    keywords.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \     1.1. Conventions Used ...........................................2\n   2.
    General Requirements for Flag Handling ..........................3\n   3. Actions
    .........................................................3\n      3.1. Action
    setflag .............................................4\n      3.2. Action addflag
    .............................................4\n      3.3. Action removeflag ..........................................5\n
    \  4. Test hasflag ....................................................6\n   5.
    Tagged Argument :flags ..........................................7\n   6. Interaction
    with Other Sieve Actions ............................8\n   7. Security Considerations
    .........................................8\n   8. IANA Considerations .............................................8\n
    \  9. Extended Example ................................................8\n   10.
    Acknowledgments ...............................................10\n   11. Normative
    References ..........................................10\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This is an extension to the Sieve language defined by [SIEVE]
    for\n   setting [IMAP] flags.  It adds a new tagged argument to \"keep\" and\n
    \  \"fileinto\" that describes the list of flags that have to be set when\n   the
    message is delivered to the specified mailbox.  It also adds\n   several actions
    to help manipulate list of flags and a test to check\n   whether a flag belongs
    to a list.\n   From the user's perspective, this extension provides several\n
    \  capabilities.  First, it allows manipulation of sets of IMAP flags.\n   Second,
    it gives the ability to associate a set of IMAP flags with a\n   message that
    is delivered to a mailstore using the keep/fileinto\n   actions.  Third, it maintains
    an internal variable.  The internal\n   variable contains the default flags that
    will be associated with a\n   message that is delivered using the keep, implicit
    keep, or fileinto\n   actions, when the :flags tagged argument is not specified.
    \ When the\n   Sieve [VARIABLES] extension is also supported by the Sieve engine,
    it\n   enables support for multiple variables containing sets of IMAP flags.\n
    \  The capability string associated with the extension defined in this\n   document
    is \"imap4flags\".  All conformant implementations MUST\n   implement all Sieve
    actions (setflag, addflag, removeflag), the\n   \"hasflag\" test, and the \":flags\"
    tagged argument described in this\n   document.\n   The \"imap4flags\" extension
    can be used with or without the\n   \"variables\" extension [VARIABLES].  When
    the \"variables\" extension is\n   enabled in a script using <require \"variables\">,
    the script can use\n   explicit variable names in setflag/addflag/removeflag actions
    and the\n   hasflag test.  See also Section 3 for more details.  When the\n   \"variables\"
    extension is not enabled, the explicit variable name\n   parameter to setflag/addflag/removeflag/hasflag
    MUST NOT be used and\n   MUST cause an error according to [SIEVE].\n"
  - contents:
    - "1.1.  Conventions Used\n   Conventions for notations are as in [SIEVE], Section
      1.1, including\n   use of \"Usage:\" label for the definition of action and
      tagged\n   arguments syntax.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      RFC 2119.\n"
    title: 1.1.  Conventions Used
  title: 1.  Introduction
- contents:
  - "2.  General Requirements for Flag Handling\n   The following notes apply to processing
    of addflag/removeflag/setflag\n   actions, the \"hasflag\" test and the \":flags\"
    tagged argument.\n   A Sieve interpreter MUST ignore empty strings (i.e., \"\")
    in a list-\n   of-flags parameter.\n   A string containing a space-separated list
    of flag names is\n   equivalent to a string list consisting of the flags.  This\n
    \  requirement is to simplify amalgamation of multiple flag lists.\n   The Sieve
    interpreter SHOULD check the list of flags for validity as\n   described by [IMAP]
    ABNF.  In particular, according to [IMAP], non-\n   ASCII characters are not allowed
    in flag names.  However, spaces MUST\n   always be allowed as delimiters in strings
    representing a list of\n   flags.  In such strings, multiple spaces between flag
    names MUST be\n   treated as a single space character, and leading and trailing
    spaces\n   MUST be ignored.\n   If a flag validity check fails, the flag MUST
    be ignored.\n   Note that it is not possible to use this extension to set or clear\n
    \  the \\Recent flag or any other special system flag that is not\n   settable
    in [IMAP].  Any such flags MUST be ignored if included in a\n   flag list.\n"
  title: 2.  General Requirements for Flag Handling
- contents:
  - "3.  Actions\n   All actions described in this specification (setflag, addflag,\n
    \  removeflag) operate on string variables that contain a set of [IMAP]\n   flags.
    \ On variable substitution, a set of flags is represented as a\n   string containing
    a space-separated list of flag names.\n   Any setflag/addflag/removeflag action
    MAY alter the flag list in any\n   way that leaves its semantics as a set of case-insensitive
    words\n   unaltered.  For example, it may reorder the flags, alter the case of\n
    \  the letters in them, or add or remove duplicates or extraneous\n   spaces.
    \ Scripts MUST NOT make assumptions about the ordering of\n   flags in lists or
    the preservation of their case.\n   Note that the parameter specifying a variable
    name to\n   setflag/addflag/removeflag actions and the hasflag test is optional.\n
    \  If the parameter is not specified, the actions operate on the\n   internal
    variable, which has the empty value when the script starts\n   execution.  If
    the SIEVE interpreter doesn't support the \"variables\"\n   extension [VARIABLES],
    the presence of the variable name parameter\n   will cause a runtime error [SIEVE].\n
    \  The \"addflag\" action adds flags to an existing set.  The \"removeflag\"\n
    \  action removes flags from an existing set.  The \"setflag\" action\n   replaces
    an existing set of flags with a new set.  The \"set\" action\n   defined in [VARIABLES]
    can be used to replace an existing set of\n   flags with a new set as well.  However,
    it should be noted that the\n   \"set\" action can't perform any flag reordering,
    duplicate\n   elimination, etc.\n   The :flags tagged argument to \"keep\" and
    \"fileinto\" actions is used\n   to associate a set of flags with the current
    message.  If the :flags\n   tagged argument is not specified with those two actions,
    the current\n   value of the internal variable is used instead.  The value of
    the\n   internal variable also applies to the implicit keep.\n   Note that when
    keep/fileinto is used multiple times in a script and\n   duplicate message elimination
    is performed (as described in Section\n   2.10.3 of [SIEVE]), the last flag list
    value MUST win.\n"
  - contents:
    - "3.1.  Action setflag\n   Usage:   setflag [<variablename: string>]\n            <list-of-flags:
      string-list>\n   Setflag is used for setting [IMAP] system flags or keywords.\n
      \  Setflag replaces any previously set flags.\n   Example:  if size :over 500K
      {\n                 setflag \"\\\\Deleted\";\n             }\n   A more substantial
      example is the following:\n   Example:\n        if header :contains \"from\"
      \"boss@frobnitzm.example.edu\" {\n            setflag \"flagvar\" \"\\\\Flagged\";\n
      \           fileinto :flags \"${flagvar}\" \"INBOX.From Boss\";\n        }\n"
    title: 3.1.  Action setflag
  - contents:
    - "3.2.  Action addflag\n   Usage:   addflag [<variablename: string>]\n            <list-of-flags:
      string-list>\n   Addflag is used to add flags to a list of [IMAP] flags.  It
      doesn't\n   replace any previously set flags.  This means that multiple\n   occurrences
      of addflag are treated additively.\n   The following examples demonstrate requirements
      described in Section\n   2.1.  The following two actions\n      addflag \"flagvar\"
      \"\\\\Deleted\";\n      addflag \"flagvar\" \"\\\\Answered\";\n   produce the
      same result as the single action\n      addflag \"flagvar\" [\"\\\\Deleted\",
      \"\\\\Answered\"];\n   or\n      addflag \"flagvar\" \"\\\\Deleted \\\\Answered\";\n
      \  or\n      addflag \"flagvar\" \"\\\\Answered \\\\Deleted\";\n"
    title: 3.2.  Action addflag
  - contents:
    - "3.3.  Action removeflag\n   Usage:   removeflag [<variablename: string>]\n
      \           <list-of-flags: string-list>\n   Removeflag is used to remove flags
      from a list of [IMAP] flags.\n   Removeflag clears flags previously set by \"set\"/\"addflag\".
      \ Calling\n   removeflag with a flag that wasn't set before is not an error
      and is\n   ignored.  Note that if an implementation doesn't perform automatic\n
      \  duplicate elimination, it MUST remove all occurrences of the flags\n   specified
      in the second parameter to removeflag.  Empty strings in\n   the list-of-flags
      MUST be ignored.  Also note that flag names are\n   case-insensitive, as described
      in [IMAP].  Multiple removeflag\n   actions are treated additively.\n      Example:\n
      \       if header :contains \"Disposition-Notification-To\"\n           \"mel@example.com\"
      {\n            addflag \"flagvar\" \"$MDNRequired\";\n        }\n        if
      header :contains \"from\" \"imap@cac.washington.example.edu\" {\n            removeflag
      \"flagvar\" \"$MDNRequired\";\n            fileinto :flags \"${flagvar}\" \"INBOX.imap-list\";\n
      \       }\n"
    title: 3.3.  Action removeflag
  title: 3.  Actions
- contents:
  - "4.  Test hasflag\n   Usage: hasflag [MATCH-TYPE] [COMPARATOR]\n          [<variable-list:
    string-list>]\n          <list-of-flags: string-list>\n   The hasflag test evaluates
    to true if any of the variables matches\n   any flag name.  The type of match
    defaults to \":is\".  If the list of\n   variables is omitted, value of the internal
    variable is used instead.\n   The default comparator is \"i;ascii-casemap\", which
    is the same case-\n   insensitive comparison as defined for IMAP flags by [IMAP].\n
    \  The \"relational\" extension [RELATIONAL] adds a match type called\n   \":count\".
    \ The :count of a variable returns the number of distinct\n   flags in it.  The
    count of a list of variables is the sum of the\n   counts of the member variables.\n
    \  Example:\n     If the internal variable has the value \"A B\", the following
    test\n      hasflag :is \"b A\"\n     evaluates to true.  The above test can also
    be written as\n      hasflag [\"b\",\"A\"]\n   Example:\n     If the variable
    \"MyVar\" has value \"NonJunk Junk gnus-forward\n     $Forwarded NotJunk JunkRecorded
    $Junk $NotJunk\", the following\n     tests evaluate to true:\n      hasflag :contains
    \"MyVar\" \"Junk\"\n      hasflag :contains \"MyVar\" \"forward\"\n      hasflag
    :contains \"MyVar\" [\"label\", \"forward\"]\n      hasflag :contains \"MyVar\"
    [\"junk\", \"forward\"]\n     Note that the last of these tests can be rewritten\n
    \    as\n      hasflag :contains \"MyVar\" \"junk forward\"\n     or\n      hasflag
    :contains \"MyVar\" \"forward junk\"\n     However, the last two forms are not
    recommended.\n     And the following tests will evaluate to false:\n      hasflag
    :contains \"MyVar\" \"label\"\n      hasflag :contains \"MyVar\" [\"label1\",
    \"label2\"]\n   Example:\n     If the variable \"MyFlags\" has the value \"A B\",
    the following test\n       hasflag :count \"ge\" :comparator \"i;ascii-numeric\"\n
    \              \"MyFlags\" \"2\"\n     evaluates to true, as the variable contains
    2 distinct flags.\n"
  title: 4.  Test hasflag
- contents:
  - "5.  Tagged Argument :flags\n   This specification adds a new optional tagged
    argument \":flags\" that\n   alters the behavior of actions \"keep\" and \"fileinto\".\n
    \  The :flags tagged argument specifies that the flags provided in the\n   subsequent
    argument should be set when fileinto/keep delivers the\n   message to the target
    mailbox/user's main mailbox.  If the :flags\n   tagged argument is not specified,
    \"keep\" or \"fileinto\" will use the\n   current value of the internal variable
    when delivering the message to\n   the target mailbox.\n   Usage:   \":flags\"
    <list-of-flags: string-list>\n   The copy of the message filed into the mailbox
    will have only flags\n   listed after the :flags tagged argument.\n   The Sieve
    interpreter MUST ignore all flags that it can't store\n   permanently.  This means
    that the interpreter MUST NOT treat failure\n   to store any flag as a runtime
    failure to execute the Sieve script.\n   For example, if the mailbox \"INBOX.From
    Boss\" can't store any flags,\n   then\n     fileinto :flags \"\\\\Deleted\" \"INBOX.From
    Boss\";\n   and\n     fileinto \"INBOX.From Boss\";\n   are equivalent.\n   This
    document doesn't dictate how the Sieve interpreter will set the\n   [IMAP] flags.
    \ In particular, the Sieve interpreter may work as an\n   IMAP client or may have
    direct access to the mailstore.\n"
  title: 5.  Tagged Argument :flags
- contents:
  - "6.  Interaction with Other Sieve Actions\n   This extension works only on the
    message that is currently being\n   processed by Sieve; it doesn't affect another
    message generated as a\n   side effect of any action or any other message already
    in the\n   mailstore.\n   The extension described in this document doesn't change
    the implicit\n   keep (see Section 2.10.2 of [SIEVE]).\n"
  title: 6.  Interaction with Other Sieve Actions
- contents:
  - "7.  Security Considerations\n   Security considerations are discussed in [IMAP],
    [SIEVE], and\n   [VARIABLES].\n   This extension intentionally doesn't allow setting
    [IMAP] flags on an\n   arbitrary message in the [IMAP] message store.\n   It is
    believed that this extension doesn't introduce any additional\n   security concerns.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  IANA Considerations\n   The following template specifies the IANA registration
    of the\n   variables Sieve extension specified in this document:\n   To: iana@iana.org\n
    \  Subject: Registration of new Sieve extension\n   Capability name: imap4flags\n
    \  Description:     Adds actions and tests for manipulating IMAP flags\n   RFC
    number:      RFC 5232\n   Contact address: The Sieve discussion list <ietf-mta-filters@imc.org>\n
    \  This information has been added to the list of Sieve extensions given\n   on
    http://www.iana.org/assignments/sieve-extensions.\n"
  title: 8.  IANA Considerations
- contents:
  - "9.  Extended Example\n   #\n   # Example Sieve Filter\n   # Declare any optional
    features or extension used by the script\n   #\n   require [\"fileinto\", \"imap4flags\",
    \"variables\"];\n   #\n   # Move large messages to a special mailbox\n   #\n   if
    size :over 1M\n           {\n           addflag \"MyFlags\" \"Big\";\n           if
    header :is \"From\" \"boss@company.example.com\"\n                      {\n   #
    The message will be marked as \"\\Flagged Big\" when filed into\n   # mailbox
    \"Big messages\"\n                      addflag \"MyFlags\" \"\\\\Flagged\";\n
    \                     }\n           fileinto :flags \"${MyFlags}\" \"Big messages\";\n
    \          }\n   if header :is \"From\" \"grandma@example.net\"\n           {\n
    \          addflag \"MyFlags\" [\"\\\\Answered\", \"$MDNSent\"];\n   # If the
    message is bigger than 1Mb it will be marked as\n   # \"Big \\Answered $MDNSent\"
    when filed into mailbox \"grandma\".\n   # If the message is shorter than 1Mb
    it will be marked as\n   # \"\\Answered $MDNSent\"\n           fileinto :flags
    \"${MyFlags}\" \"GrandMa\";\n           }\n   #\n   # Handle messages from known
    mailing lists\n   # Move messages from IETF filter discussion list to filter folder\n
    \  #\n   if header :is \"Sender\" \"owner-ietf-mta-filters@example.org\"\n           {\n
    \          set \"MyFlags\" \"\\\\Flagged $Work\";\n   # Message will have both
    \"\\Flagged\" and $Work flags\n           keep :flags \"${MyFlags}\";\n           }\n
    \  #\n   # Keep all messages to or from people in my company\n   #\n   elsif anyof
    address :domain :is [\"From\", \"To\"] \"company.example.com\"\n           {\n
    \          keep :flags \"${MyFlags}\"; # keep in \"Inbox\" folder\n           }\n
    \  # Try to catch unsolicited email.  If a message is not to me,\n   # or it contains
    a subject known to be spam, file it away.\n   #\n   elsif anyof (not address :all
    :contains\n                  [\"To\", \"Cc\"] \"me@company.example.com\",\n                header
    :matches \"subject\"\n                  [\"*make*money*fast*\", \"*university*dipl*mas*\"])\n
    \          {\n           remove \"MyFlags\" \"\\\\Flagged\";\n           fileinto
    :flags \"${MyFlags}\" \"spam\";\n           }\n   else\n           {\n           #
    Move all other external mail to \"personal\"\n           # folder.\n           fileinto
    :flags \"${MyFlags}\" \"personal\";\n           }\n"
  title: 9.  Extended Example
- contents:
  - "10.  Acknowledgments\n   This document has been revised in part based on comments
    and\n   discussions that took place on and off the Sieve mailing list.\n   The
    help of those who took the time to review the document and make\n   suggestions
    is appreciated, especially that of Tim Showalter, Barry\n   Leiba, Randall Gellens,
    Ken Murchison, Cyrus Daboo, Matthew Elvey,\n   Jutta Degener, Ned Freed, Marc
    Mutz, Nigel Swinson, Kjetil Torgrim\n   Homme, Mark E.  Mallett, Dave Cridland,
    Arnt Gulbrandsen, Philip\n   Guenther, Rob Austein, Sam Hartman, Eric Gray, and
    Cullen Jennings.\n   Special thanks to Tony Hansen and David Lamb for helping
    me better\n   explain the concept.\n"
  title: 10.  Acknowledgments
- contents:
  - "11.  Normative References\n   [SIEVE]      Guenther, P., Ed., and T. Showalter,
    Ed., \"Sieve: An\n                Email Filtering Language\", RFC 5228, January
    2008.\n   [IMAP]       Crispin, M., \"INTERNET MESSAGE ACCESS PROTOCOL - VERSION\n
    \               4rev1\", RFC 3501, March 2003.\n   [VARIABLES]  Homme, K., \"Sieve
    Email Filtering: Variables Extension\",\n                RFC 5229, January 2008.\n
    \  [RELATIONAL] Segmuller, W. and B. Leiba \"Sieve Email Filtering:\n                Relational
    Extension\", RFC 5231, January 2008.\n"
  title: 11.  Normative References
- contents:
  - "Author's Address\n   Alexey Melnikov\n   Isode Limited\n   5 Castle Business
    Village\n   Hampton, Middlesex\n   United Kingdom, TW12 2BX\n   EMail: alexey.melnikov@isode.com\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
