- title: __initial_text__
  contents:
  - '                              Web Linking

    '
- title: Abstract
  contents:
  - "Abstract\n   This specification defines a model for the relationships between\n\
    \   resources on the Web (\"links\") and the type of those relationships\n   (\"\
    link relation types\").\n   It also defines the serialisation of such links in\
    \ HTTP headers with\n   the Link header field.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8288.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n     1.1.  Notational Conventions  . . . . . . . . . . . . .\
    \ . . . .   4\n     1.2.  Conformance and Error Handling  . . . . . . . . . .\
    \ . . .   4\n   2.  Links . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .   6\n     2.1.  Link Relation Types . . . . . . . . . . . . . . . . . .\
    \ .   6\n       2.1.1.  Registered Relation Types . . . . . . . . . . . . . .\
    \   6\n       2.1.2.  Extension Relation Types  . . . . . . . . . . . . . .  \
    \ 8\n     2.2.  Target Attributes . . . . . . . . . . . . . . . . . . . .   9\n\
    \   3.  Link Serialisation in HTTP Headers  . . . . . . . . . . . . .   9\n  \
    \   3.1.  Link Target . . . . . . . . . . . . . . . . . . . . . . .  10\n    \
    \ 3.2.  Link Context  . . . . . . . . . . . . . . . . . . . . . .  10\n     3.3.\
    \  Relation Type . . . . . . . . . . . . . . . . . . . . . .  11\n     3.4.  Target\
    \ Attributes . . . . . . . . . . . . . . . . . . . .  11\n       3.4.1.  Serialisation-Defined\
    \ Attributes  . . . . . . . . . .  11\n       3.4.2.  Extension Attributes  .\
    \ . . . . . . . . . . . . . . .  13\n     3.5.  Link Header Field Examples  .\
    \ . . . . . . . . . . . . . .  13\n   4.  IANA Considerations . . . . . . . .\
    \ . . . . . . . . . . . . .  14\n     4.1.  Link HTTP Header Field Registration\
    \ . . . . . . . . . . .  14\n     4.2.  Link Relation Type Registry . . . . .\
    \ . . . . . . . . . .  14\n     4.3.  Link Relation Application Data Registry\
    \ . . . . . . . . .  15\n   5.  Security Considerations . . . . . . . . . . .\
    \ . . . . . . . .  15\n   6.  Internationalisation Considerations . . . . . .\
    \ . . . . . . .  16\n   7.  References  . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  16\n     7.1.  Normative References  . . . . . . . . . . . . .\
    \ . . . . .  16\n     7.2.  Informative References  . . . . . . . . . . . . .\
    \ . . . .  17\n   Appendix A.  Notes on Other Link Serialisations . . . . . .\
    \ . . .  19\n     A.1.  Link Serialisation in HTML  . . . . . . . . . . . . .\
    \ . .  19\n     A.2.  Link Serialisation in Atom  . . . . . . . . . . . . . .\
    \ .  19\n   Appendix B.  Algorithms for Parsing Link Header Fields  . . . . .\
    \  20\n     B.1.  Parsing a Header Set for Links  . . . . . . . . . . . . .  20\n\
    \     B.2.  Parsing a Link Field Value  . . . . . . . . . . . . . . .  21\n  \
    \   B.3.  Parsing Parameters  . . . . . . . . . . . . . . . . . . .  22\n    \
    \ B.4.  Parsing a Quoted String . . . . . . . . . . . . . . . . .  23\n   Appendix\
    \ C.  Changes from RFC 5988  . . . . . . . . . . . . . . .  24\n   Author's Address\
    \  . . . . . . . . . . . . . . . . . . . . . . . .  24\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This specification defines a model for the relationships\
    \ between\n   resources on the Web (\"links\") and the type of those relationships\n\
    \   (\"link relation types\").\n   HTML [W3C.REC-html5-20141028] and Atom [RFC4287]\
    \ both have well-\n   defined concepts of linking; Section 2 generalises this\
    \ into a\n   framework that encompasses linking in these formats and (potentially)\n\
    \   elsewhere.\n   Furthermore, Section 3 defines an HTTP header field for conveying\n\
    \   such links.\n"
- title: 1.1.  Notational Conventions
  contents:
  - "1.1.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in BCP\n   14 [RFC2119] [RFC8174] when, and only when, they appear\
    \ in all\n   capitals, as shown here.\n   This document uses the Augmented Backus-Naur\
    \ Form (ABNF) [RFC5234]\n   notation of [RFC7230], including the #rule, and explicitly\
    \ includes\n   the following rules from it: quoted-string, token, SP (space),\
    \ BWS\n   (bad whitespace), OWS (optional whitespace), RWS (required\n   whitespace),\
    \ LOALPHA, DIGIT.\n   Additionally, the following rules are included:\n   o  URI\
    \ and URI-Reference from [RFC3986],\n   o  type-name and subtype-name from [RFC6838],\n\
    \   o  media-query-list from [W3C.REC-css3-mediaqueries-20120619], and\n   o \
    \ Language-Tag from [RFC5646].\n"
- title: 1.2.  Conformance and Error Handling
  contents:
  - "1.2.  Conformance and Error Handling\n   The requirements regarding conformance\
    \ and error handling highlighted\n   in [RFC7230], Section 2.5 apply to this document.\n"
- title: 2.  Links
  contents:
  - "2.  Links\n   In this specification, a link is a typed connection between two\n\
    \   resources and is comprised of:\n   o  a link context,\n   o  a link relation\
    \ type (Section 2.1),\n   o  a link target, and\n   o  optionally, target attributes\
    \ (Section 2.2).\n   A link can be viewed as a statement of the form \"link context\
    \ has a\n   link relation type resource at link target, which has target\n   attributes\"\
    .\n   For example, \"https://www.example.com/\" has a \"canonical\" resource at\n\
    \   \"https://example.com\", which has a \"type\" of \"text/html\".\n   Link contexts\
    \ and link targets are both Internationalized Resource\n   Identifiers (IRIs)\
    \ [RFC3987].  However, in the common case, the link\n   context will also be a\
    \ URI [RFC3986], because many protocols (such as\n   HTTP) do not support dereferencing\
    \ IRIs.  Likewise, the link target\n   will sometimes be converted to a URI (see\
    \ [RFC3987], Section 3.1) in\n   serialisations that do not support IRIs (such\
    \ as the Link header\n   field defined in Section 3).\n   This specification does\
    \ not place restrictions on the cardinality of\n   links; there can be multiple\
    \ links to and from a particular target\n   and multiple links of the same or\
    \ different types between a given\n   context and target.  Likewise, the relative\
    \ ordering of links in any\n   particular serialisation, or between serialisations\
    \ (e.g., the Link\n   header field and in-content links), is not specified or\
    \ significant\n   in this specification; applications that wish to consider ordering\n\
    \   significant can do so.\n   Links are conveyed in link serialisations; they\
    \ are the \"bytes on the\n   wire\", and can occur in various forms.  For example,\
    \ Atom [RFC4287]\n   and HTML [W3C.REC-html5-20141028] both defined serialisations\
    \ of\n   links into their respective formats, and Section 3 defines how to\n \
    \  serialise links in HTTP header fields.\n   This specification does not define\
    \ a general syntax for links across\n   different serialisations, nor does it\
    \ mandate a specific context for\n   any given link; it is expected that serialisations\
    \ of links will\n   specify both aspects.\n   Finally, links are used by link\
    \ applications.  Generally, an\n   application will define the link relation type(s)\
    \ it uses, along with\n   the serialisation(s) that they might occur within. \
    \ For example, the\n   application \"Web browsing\" looks for the \"stylesheet\"\
    \ link relation\n   type in the HTML link serialisation (and optionally in the\
    \ Link\n   header field), whereas the application \"AtomPub\" uses the \"edit\"\
    \ and\n   \"edit-media\" link relations in the Atom serialisation.\n"
- title: 2.1.  Link Relation Types
  contents:
  - "2.1.  Link Relation Types\n   In the simplest case, a link relation type identifies\
    \ the semantics\n   of a link.  For example, a link with the relation type \"\
    copyright\"\n   indicates that the current link context has a copyright resource\
    \ at\n   the link target.\n   Link relation types can also be used to indicate\
    \ that the target\n   resource has particular attributes, or exhibits particular\n\
    \   behaviours; for example, a \"service\" link implies that the link\n   target\
    \ can be used as part of a defined protocol (in this case, a\n   service description).\n\
    \   Relation types are not to be confused with media types [RFC2046];\n   they\
    \ do not identify the format of the representation that results\n   when the link\
    \ is dereferenced.  Rather, they only describe how the\n   current context is\
    \ related to another resource.\n   Relation types SHOULD NOT infer any additional\
    \ semantics based upon\n   the presence or absence of another link relation type,\
    \ or its own\n   cardinality of occurrence.  An exception to this is the combination\n\
    \   of the \"alternate\" and \"stylesheet\" registered relation types, which\n\
    \   has special meaning in HTML for historical reasons.\n   There are two kinds\
    \ of relation types: registered and extension.\n"
- title: 2.1.1.  Registered Relation Types
  contents:
  - "2.1.1.  Registered Relation Types\n   Well-defined relation types can be registered\
    \ as tokens for\n   convenience and/or to promote reuse by other applications,\
    \ using the\n   procedure in Section 2.1.1.1.\n   Registered relation type names\
    \ MUST conform to the reg-rel-type rule\n   (see Section 3.3) and MUST be compared\
    \ character by character in a\n   case-insensitive fashion.  They SHOULD be appropriate\
    \ to the\n   specificity of the relation type; that is, if the semantics are\n\
    \   highly specific to a particular application, the name should reflect\n   that,\
    \ so that more general names are available for less-specific use.\n   Registered\
    \ relation types MUST NOT constrain the media type of the\n   link context and\
    \ MUST NOT constrain the available representation\n   media types of the link\
    \ target.  However, they can specify the\n   behaviours and properties of the\
    \ target resource (e.g., allowable\n   HTTP methods, and request and response\
    \ media types that are required\n   be supported).\n   Historically, registered\
    \ relation types have been identified with a\n   URI [RFC3986] by prefixing their\
    \ names with an application-defined\n   base URI (e.g., see Appendix A.2).  This\
    \ practice is NOT RECOMMENDED,\n   because the resulting strings will not be considered\
    \ equivalent to\n   the registered relation types by other applications.  Applications\n\
    \   that do use such URIs internally MUST NOT use them in link\n   serialisations\
    \ that do not explicitly accommodate them.\n"
- title: 2.1.1.1.  Registering Link Relation Types
  contents:
  - "2.1.1.1.  Registering Link Relation Types\n   The \"Link Relations\" registry\
    \ is located at\n   <https://www.iana.org/assignments/link-relations/>.  Registration\n\
    \   requests can be made by following the instructions located there or\n   by\
    \ sending an email to the <link-relations@ietf.org> mailing list.\n   Registration\
    \ requests consist of at least the following information:\n   o  *Relation Name*:\
    \ The name of the relation type\n   o  *Description*: A short English description\
    \ of the type's\n      semantics.  It SHOULD be stated in terms of the relationship\n\
    \      between the link context and link target.\n   o  *Reference*: Reference\
    \ to the document that specifies the link\n      relation type, preferably including\
    \ a URI that can be used to\n      retrieve a copy of the document.  An indication\
    \ of the relevant\n      section(s) can also be included but is not required.\n\
    \   The expert(s) can define additional fields to be collected in the\n   registry.\n\
    \   General requirements for registered relation types are described in\n   Section\
    \ 2.1.1.\n   Registrations MUST reference a freely available, stable\n   specification.\n\
    \   Note that relation types can be registered by third parties\n   (including\
    \ the expert(s)), if the expert(s) determines that an\n   unregistered relation\
    \ type is widely deployed and not likely to be\n   registered in a timely manner\
    \ otherwise.  Such registrations still\n   are subject to the requirements defined,\
    \ including the need to\n   reference a specification.\n"
- title: 2.1.1.2.  Registration Request Processing
  contents:
  - "2.1.1.2.  Registration Request Processing\n   Relation types are registered using\
    \ the Specification Required policy\n   (see Section 4.6 of [RFC8126]), which\
    \ implies review and approval by\n   a designated expert.\n   The goal of the\
    \ registry is to reflect common use of links on the\n   Internet.  Therefore,\
    \ the expert(s) should be strongly biased towards\n   approving registrations,\
    \ unless they are abusive, frivolous, not\n   likely to be used on the Internet,\
    \ or actively harmful to the\n   Internet and/or the Web (not merely aesthetically\
    \ displeasing or\n   architecturally dubious).  As stated in Section 2.1.1, the\
    \ expert(s)\n   can withhold registration of names that are too general for the\n\
    \   proposed application.\n   The expert(s) will clearly identify any issues that\
    \ cause a\n   registration to be refused.  Advice about the semantics of a proposed\n\
    \   link relation type can be given, but if it does not block\n   registration,\
    \ this should be explicitly stated.\n   When a request is approved, the expert(s)\
    \ will inform IANA, and the\n   registration will be processed.  The IESG is the\
    \ final arbiter of any\n   objection.\n"
- title: 2.1.2.  Extension Relation Types
  contents:
  - "2.1.2.  Extension Relation Types\n   Applications that don't wish to register\
    \ a relation type can use an\n   extension relation type, which is a URI [RFC3986]\
    \ that uniquely\n   identifies the relation type.  Although the URI can point\
    \ to a\n   resource that contains a definition of the semantics of the relation\n\
    \   type, clients SHOULD NOT automatically access that resource to avoid\n   overburdening\
    \ its server.\n   The URI used for an extension relation type SHOULD be under\
    \ the\n   control of the person or party defining it or be delegated to them.\n\
    \   When extension relation types are compared, they MUST be compared as\n   strings\
    \ (after converting to URIs if serialised in a different\n   format) in a case-insensitive\
    \ fashion, character by character.\n   Because of this, all-lowercase URIs SHOULD\
    \ be used for extension\n   relations.\n   Note that while extension relation\
    \ types are required to be URIs, a\n   serialisation of links can specify that\
    \ they are expressed in another\n   form, as long as they can be converted to\
    \ URIs.\n"
- title: 2.2.  Target Attributes
  contents:
  - "2.2.  Target Attributes\n   Target attributes are a list of key/value pairs that\
    \ describe the\n   link or its target; for example, a media type hint.\n   They\
    \ can be defined both by individual link relation types and by\n   link serialisations.\n\
    \   This specification does not attempt to coordinate the name of target\n   attributes,\
    \ their cardinality, or use.  Those creating and\n   maintaining serialisations\
    \ SHOULD coordinate their target attributes\n   to avoid conflicts in semantics\
    \ or syntax and MAY define their own\n   registries of target attributes.\n  \
    \ The names of target attributes SHOULD conform to the token rule, but\n   SHOULD\
    \ NOT include any of the characters \"%\", \"'\", or \"*\", for\n   portability\
    \ across serialisations and MUST be compared in a case-\n   insensitive fashion.\n\
    \   Target attribute definitions SHOULD specify:\n   o  The serialisation of their\
    \ values into Unicode or a subset\n      thereof, to maximise their chances of\
    \ portability across link\n      serialisations.\n   o  The semantics and error\
    \ handling of multiple occurrences of the\n      target attribute on a given link.\n\
    \   This specification does define target attributes for use in the Link\n   HTTP\
    \ header field in Section 3.4.\n"
- title: 3.  Link Serialisation in HTTP Headers
  contents:
  - "3.  Link Serialisation in HTTP Headers\n   The Link header field provides a means\
    \ for serialising one or more\n   links into HTTP headers.\n   The ABNF for the\
    \ field value is:\n     Link       = #link-value\n     link-value = \"<\" URI-Reference\
    \ \">\" *( OWS \";\" OWS link-param )\n     link-param = token BWS [ \"=\" BWS\
    \ ( token / quoted-string ) ]\n   Note that any link-param can be generated with\
    \ values using either\n   the token or the quoted-string syntax; therefore, recipients\
    \ MUST be\n   able to parse both forms.  In other words, the following parameters\n\
    \   are equivalent:\n     x=y\n     x=\"y\"\n   Previous definitions of the Link\
    \ header did not equate the token and\n   quoted-string forms explicitly; the\
    \ title parameter was always\n   quoted, and the hreflang parameter was always\
    \ a token.  Senders\n   wishing to maximize interoperability will send them in\
    \ those forms.\n   Individual link-params specify their syntax in terms of the\
    \ value\n   after any necessary unquoting (as per [RFC7230], Section 3.2.6).\n\
    \   This specification establishes the link-params \"rel\", \"anchor\", and\n\
    \   \"rev\" (which are part of the general link model), as well as\n   \"hreflang\"\
    , \"media\", \"title\", \"title*\", and \"type\" (which are target\n   attributes\
    \ defined by the serialisation).\n"
- title: 3.1.  Link Target
  contents:
  - "3.1.  Link Target\n   Each link-value conveys one target IRI as a URI-Reference\
    \ (after\n   conversion to one, if necessary; see [RFC3987], Section 3.1) inside\n\
    \   angle brackets (\"<>\").  If the URI-Reference is relative, parsers\n   MUST\
    \ resolve it as per [RFC3986], Section 5.  Note that any base IRI\n   appearing\
    \ in the message's content is not applied.\n"
- title: 3.2.  Link Context
  contents:
  - "3.2.  Link Context\n   By default, the context of a link conveyed in the Link\
    \ header field\n   is the URL of the representation it is associated with, as\
    \ defined in\n   [RFC7231], Section 3.1.4.1, and is serialised as a URI.\n   When\
    \ present, the anchor parameter overrides this with another URI,\n   such as a\
    \ fragment of this resource, or a third resource (i.e., when\n   the anchor value\
    \ is an absolute URI).  If the anchor parameter's\n   value is a relative URI,\
    \ parsers MUST resolve it as per [RFC3986],\n   Section 5.  Note that any base\
    \ URI from the body's content is not\n   applied.\n   The ABNF for the \"anchor\"\
    \ parameter's value is:\n     URI-Reference ; Section 4.1 of [RFC3986]\n   Link\
    \ application can choose to ignore links with an anchor parameter.\n   For example,\
    \ the application in use might not allow the link context\n   to be assigned to\
    \ a different resource.  In such cases, the entire\n   link is to be ignored;\
    \ link applications MUST NOT process the link\n   without applying the anchor.\n\
    \   Note that depending on HTTP status code and response headers, the\n   link\
    \ context might be \"anonymous\" (i.e., no link context is\n   available).  For\
    \ example, this is the case on a 404 response to a GET\n   request.\n"
- title: 3.3.  Relation Type
  contents:
  - "3.3.  Relation Type\n   The relation type of a link conveyed in the Link header\
    \ field is\n   conveyed in the \"rel\" parameter's value.  The rel parameter MUST\
    \ be\n   present but MUST NOT appear more than once in a given link-value;\n \
    \  occurrences after the first MUST be ignored by parsers.\n   The rel parameter\
    \ can, however, contain multiple link relation types.\n   When this occurs, it\
    \ establishes multiple links that share the same\n   context, target, and target\
    \ attributes.\n   The \"rev\" parameter has been used in the past to indicate\
    \ that the\n   semantics of the relationship are in the reverse direction.  That\
    \ is,\n   a link from A to B with REL=\"X\" expresses the same relationship as\
    \ a\n   link from B to A with REV=\"X\". rev is deprecated by this\n   specification\
    \ because it often confuses authors and readers; in most\n   cases, using a separate\
    \ relation type is preferable.\n   The ABNF for the rel and rev parameters' values\
    \ is:\n     relation-type *( 1*SP relation-type )\n   where:\n     relation-type\
    \  = reg-rel-type / ext-rel-type\n     reg-rel-type   = LOALPHA *( LOALPHA / DIGIT\
    \ / \".\" / \"-\" )\n     ext-rel-type   = URI ; Section 3 of [RFC3986]\n   Note\
    \ that extension relation types are REQUIRED to be absolute URIs\n   in Link header\
    \ fields and MUST be quoted when they contain characters\n   not allowed in tokens,\
    \ such as a semicolon (\";\") or comma (\",\") (as\n   these characters are used\
    \ as delimiters in the header field itself).\n"
- title: 3.4.  Target Attributes
  contents:
  - "3.4.  Target Attributes\n   The Link header field defines several target attributes\
    \ specific to\n   this serialisation and also allows extension target attributes.\n\
    \   Target attributes are serialised in the Link header field as\n   parameters\
    \ (see [RFC7231], Section 3.1.1.1 for the definition of\n   their syntax).\n"
- title: 3.4.1.  Serialisation-Defined Attributes
  contents:
  - "3.4.1.  Serialisation-Defined Attributes\n   The \"hreflang\", \"media\", \"\
    title\", \"title*\", and \"type\" link-params\n   can be translated to serialisation-defined\
    \ target attributes for the\n   link.\n   The \"hreflang\" attribute, when present,\
    \ is a hint indicating what the\n   language of the result of dereferencing the\
    \ link should be.  Note\n   that this is only a hint; for example, it does not\
    \ override the\n   Content-Language header field of a HTTP response obtained by\
    \ actually\n   following the link.  Multiple hreflang attributes on a single link-\n\
    \   value indicate that multiple languages are available from the\n   indicated\
    \ resource.\n   The ABNF for the hreflang parameter's value is:\n     Language-Tag\n\
    \   The \"media\" attribute, when present, is used to indicate intended\n   destination\
    \ medium or media for style information (see\n   [W3C.REC-html5-20141028], Section\
    \ 4.2.4).  Its value MUST be quoted\n   if it contains a semicolon (\";\") or\
    \ comma (\",\").  There MUST NOT be\n   more than one media attribute in a link-value;\
    \ occurrences after the\n   first MUST be ignored by parsers.\n   The ABNF for\
    \ the media parameter's value is:\n     media-query-list\n   The \"title\" attribute,\
    \ when present, is used to label the destination\n   of a link such that it can\
    \ be used as a human-readable identifier\n   (e.g., a menu entry) in the language\
    \ indicated by the Content-\n   Language header field (if present).  The title\
    \ attribute MUST NOT\n   appear more than once in a given link; occurrences after\
    \ the first\n   MUST be ignored by parsers.\n   The \"title*\" link-param can\
    \ be used to encode this attribute in a\n   different character set and/or contain\
    \ language information as per\n   [RFC8187].  The title* link-param MUST NOT appear\
    \ more than once in a\n   given link-value; occurrences after the first MUST be\
    \ ignored by\n   parsers.  If the attribute does not contain language information,\
    \ its\n   language is indicated by the Content-Language header field (when\n \
    \  present).\n   If both the title and title* link-params appear in a link,\n\
    \   applications SHOULD use the title* link-param's value for the title\n   attribute.\n\
    \   The \"type\" attribute, when present, is a hint indicating what the\n   media\
    \ type of the result of dereferencing the link should be.  Note\n   that this\
    \ is only a hint; for example, it does not override the\n   Content-Type header\
    \ field of a HTTP response obtained by actually\n   following the link.  The type\
    \ attribute MUST NOT appear more than\n   once in a given link-value; occurrences\
    \ after the first MUST be\n   ignored by parsers.\n   The ABNF for the type parameter's\
    \ value is:\n     type-name \"/\" subtype-name ; see Section 4.2 of [RFC6838]\n"
- title: 3.4.2.  Extension Attributes
  contents:
  - "3.4.2.  Extension Attributes\n   Other link-params are link-extensions and are\
    \ to be considered as\n   target attributes.\n   Such target attributes MAY be\
    \ defined to use the encoding in\n   [RFC8187] (e.g., \"example\" and \"example*\"\
    ).  When both forms are\n   present, they SHOULD be considered to be the same\
    \ target attribute;\n   applications SHOULD use the value of the name ending in\
    \ \"*\" (after\n   [RFC8187] decoding) but MAY fall back to the other value if\
    \ there is\n   an error in decoding it, or if they do not support decoding.\n"
- title: 3.5.  Link Header Field Examples
  contents:
  - "3.5.  Link Header Field Examples\n   For example:\n   Link: <http://example.com/TheBook/chapter2>;\
    \ rel=\"previous\";\n         title=\"previous chapter\"\n   indicates that \"\
    chapter2\" is previous to this resource in a logical\n   navigation path.\n  \
    \ Similarly,\n   Link: </>; rel=\"http://example.net/foo\"\n   indicates that\
    \ the root resource (\"/\") is related to this resource\n   with the extension\
    \ relation type \"http://example.net/foo\".\n   This link:\n   Link: </terms>;\
    \ rel=\"copyright\"; anchor=\"#foo\"\n   indicates that the linked copyright terms\
    \ only apply to the portion\n   of the document indicated by the (media type-specific)\
    \ fragment\n   identifier \"foo\".\n   The example below shows an instance of\
    \ the Link header field encoding\n   multiple links and also the use of the encoding\
    \ from RFC 8187 to\n   encode both non-ASCII characters and language information.\n\
    \   Link: </TheBook/chapter2>;\n         rel=\"previous\"; title*=UTF-8'de'letztes%20Kapitel,\n\
    \         </TheBook/chapter4>;\n         rel=\"next\"; title*=UTF-8'de'n%c3%a4chstes%20Kapitel\n\
    \   Here, both links have titles encoded in UTF-8, both use the German\n   language\
    \ (\"de\"), and the second link contains the Unicode code point\n   U+00E4 (\"\
    LATIN SMALL LETTER A WITH DIAERESIS\").\n   Note that link-values can convey multiple\
    \ links between the same link\n   target and link context; for example:\n   Link:\
    \ <http://example.org/>;\n         rel=\"start http://example.net/relation/other\"\
    \n   Here, the link to \"http://example.org/\" has the registered relation\n \
    \  type \"start\" and the extension relation type\n   \"http://example.net/relation/other\"\
    .\n   Finally, this header field:\n   Link: <https://example.org/>; rel=\"start\"\
    ,\n         <https://example.org/index>; rel=\"index\"\n   is equivalent to these:\n\
    \   Link: <https://example.org/>; rel=\"start\"\n   Link: <https://example.org/index>;\
    \ rel=\"index\"\n"
- title: 4.  IANA Considerations
  contents:
  - '4.  IANA Considerations

    '
- title: 4.1.  Link HTTP Header Field Registration
  contents:
  - "4.1.  Link HTTP Header Field Registration\n   This specification updates the\
    \ \"Message Headers\" registry entry for\n   \"Link\" in HTTP [RFC3864] to refer\
    \ to this document.\n   Header Field Name: Link\n   Protocol: http\n   Status:\
    \ standard\n   Reference: RFC 8288\n"
- title: 4.2.  Link Relation Type Registry
  contents:
  - "4.2.  Link Relation Type Registry\n   This specification updates the registration\
    \ procedures for the \"Link\n   Relation Types\" registry; see Section 2.1.1.1.\
    \  Also, all references\n   to RFC 5988 in that registry have been replaced with\
    \ references to\n   this document.\n   IANA will direct any incoming requests\
    \ regarding the registry to this\n   document and, if defined, the processes established\
    \ by the expert(s);\n   typically, this will mean referring them to the registry\
    \ Web page.\n   Note that the expert(s) is allowed (as per Section 2.1.1.1) to\
    \ define\n   additional fields to be collected in the registry.\n"
- title: 4.3.  Link Relation Application Data Registry
  contents:
  - "4.3.  Link Relation Application Data Registry\n   Per this specification, IANA\
    \ has removed the \"Link Relation\n   Application Data\" registry, as it has not\
    \ been used, and future use\n   is not anticipated.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The content of the Link header field is not secure,\
    \ private, or\n   integrity-guaranteed.  Use of Transport Layer Security (TLS)\
    \ with\n   HTTP [RFC2818] is currently the only end-to-end way to provide these\n\
    \   properties.\n   Link applications ought to consider the attack vectors opened\
    \ by\n   automatically following, trusting, or otherwise using links gathered\n\
    \   from HTTP header fields.\n   For example, Link header fields that use the\
    \ \"anchor\" parameter to\n   associate a link's context with another resource\
    \ cannot be trusted\n   since they are effectively assertions by a third party\
    \ that could be\n   incorrect or malicious.  Applications can mitigate this risk\
    \ by\n   specifying that such links should be discarded unless some\n   relationship\
    \ between the resources is established (e.g., they share\n   the same authority).\n\
    \   Dereferencing links has a number of risks, depending on the\n   application\
    \ in use.  For example, the Referer header [RFC7231] can\n   expose information\
    \ about the application's state (including private\n   information) in its value.\
    \  Likewise, cookies [RFC6265] are another\n   mechanism that, if used, can become\
    \ an attack vector.  Applications\n   can mitigate these risks by carefully specifying\
    \ how such mechanisms\n   should operate.\n   The Link header field makes extensive\
    \ use of IRIs and URIs.  See\n   [RFC3987], Section 8 for security considerations\
    \ relating to IRIs.\n   See [RFC3986], Section 7 for security considerations relating\
    \ to\n   URIs.  See [RFC7230], Section 9 for security considerations relating\n\
    \   to HTTP header fields.\n"
- title: 6.  Internationalisation Considerations
  contents:
  - "6.  Internationalisation Considerations\n   Link targets may need to be converted\
    \ to URIs in order to express\n   them in serialisations that do not support IRIs.\
    \  This includes the\n   Link HTTP header field.\n   Similarly, the anchor parameter\
    \ of the Link header field does not\n   support IRIs; therefore, IRIs must be\
    \ converted to URIs before\n   inclusion there.\n   Relation types are defined\
    \ as URIs, not IRIs, to aid in their\n   comparison.  It is not expected that\
    \ they will be displayed to end\n   users.\n   Note that registered Relation Names\
    \ are required to be lowercase\n   ASCII letters.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3864]  Klyne, G., Nottingham, M., and J. Mogul, \"Registration\n     \
    \         Procedures for Message Header Fields\", BCP 90, RFC 3864,\n        \
    \      DOI 10.17487/RFC3864, September 2004,\n              <https://www.rfc-editor.org/info/rfc3864>.\n\
    \   [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n   \
    \           Resource Identifier (URI): Generic Syntax\", STD 66,\n           \
    \   RFC 3986, DOI 10.17487/RFC3986, January 2005,\n              <https://www.rfc-editor.org/info/rfc3986>.\n\
    \   [RFC3987]  Duerst, M. and M. Suignard, \"Internationalized Resource\n    \
    \          Identifiers (IRIs)\", RFC 3987, DOI 10.17487/RFC3987,\n           \
    \   January 2005, <https://www.rfc-editor.org/info/rfc3987>.\n   [RFC5234]  Crocker,\
    \ D., Ed. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:\
    \ ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234, January 2008,\n\
    \              <https://www.rfc-editor.org/info/rfc5234>.\n   [RFC5646]  Phillips,\
    \ A., Ed. and M. Davis, Ed., \"Tags for Identifying\n              Languages\"\
    , BCP 47, RFC 5646, DOI 10.17487/RFC5646,\n              September 2009, <https://www.rfc-editor.org/info/rfc5646>.\n\
    \   [RFC6838]  Freed, N., Klensin, J., and T. Hansen, \"Media Type\n         \
    \     Specifications and Registration Procedures\", BCP 13,\n              RFC\
    \ 6838, DOI 10.17487/RFC6838, January 2013,\n              <https://www.rfc-editor.org/info/rfc6838>.\n\
    \   [RFC7230]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Message Syntax and Routing\",\n           \
    \   RFC 7230, DOI 10.17487/RFC7230, June 2014,\n              <https://www.rfc-editor.org/info/rfc7230>.\n\
    \   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Semantics and Content\", RFC 7231,\n      \
    \        DOI 10.17487/RFC7231, June 2014,\n              <https://www.rfc-editor.org/info/rfc7231>.\n\
    \   [RFC8126]  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n      \
    \        Writing an IANA Considerations Section in RFCs\", BCP 26,\n         \
    \     RFC 8126, DOI 10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8187]  Reschke,\
    \ J., \"Indicating Character Encoding and Language\n              for HTTP Header\
    \ Field Parameters\", RFC 8187,\n              DOI 10.17487/RFC8187, September\
    \ 2017,\n              <https://www.rfc-editor.org/info/rfc8187>.\n   [W3C.REC-css3-mediaqueries-20120619]\n\
    \              Rivoal, F., \"Media Queries\", W3C Recommendation\n           \
    \   REC-css3-mediaqueries-20120619, June 2012,\n              <http://www.w3.org/TR/2012/\n\
    \              REC-css3-mediaqueries-20120619>.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [RFC2046]  Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n              Extensions (MIME) Part Two: Media Types\", RFC\
    \ 2046,\n              DOI 10.17487/RFC2046, November 1996,\n              <https://www.rfc-editor.org/info/rfc2046>.\n\
    \   [RFC2818]  Rescorla, E., \"HTTP Over TLS\", RFC 2818,\n              DOI 10.17487/RFC2818,\
    \ May 2000,\n              <https://www.rfc-editor.org/info/rfc2818>.\n   [RFC4287]\
    \  Nottingham, M., Ed. and R. Sayre, Ed., \"The Atom\n              Syndication\
    \ Format\", RFC 4287, DOI 10.17487/RFC4287,\n              December 2005, <https://www.rfc-editor.org/info/rfc4287>.\n\
    \   [RFC6265]  Barth, A., \"HTTP State Management Mechanism\", RFC 6265,\n   \
    \           DOI 10.17487/RFC6265, April 2011,\n              <https://www.rfc-editor.org/info/rfc6265>.\n\
    \   [W3C.REC-html5-20141028]\n              Hickson, I., Berjon, R., Faulkner,\
    \ S., Leithead, T.,\n              Navara, E., O'Connor, T., and S. Pfeiffer,\
    \ \"HTML5\", W3C\n              Recommendation REC-html5-20141028, October 2014,\n\
    \              <http://www.w3.org/TR/2014/REC-html5-20141028>.\n"
- title: Appendix A.  Notes on Other Link Serialisations
  contents:
  - "Appendix A.  Notes on Other Link Serialisations\n   Header fields (Section 3)\
    \ are only one serialisation of links; other\n   specifications have defined alternative\
    \ serialisations.\n"
- title: A.1.  Link Serialisation in HTML
  contents:
  - "A.1.  Link Serialisation in HTML\n   HTML motivated the original syntax of the\
    \ Link header field, and many\n   of the design decisions in this document are\
    \ driven by a desire to\n   stay compatible with it.\n   In HTML, the link element\
    \ can be mapped to links as specified here by\n   using the \"href\" attribute\
    \ for the target URI, and \"rel\" to convey\n   the relation type, as in the Link\
    \ header field.  The context of the\n   link is the URI associated with the entire\
    \ HTML document.  HTML also\n   defines several attributes on links that can be\
    \ seen as target\n   attributes, including \"media\", \"hreflang\", \"type\",\
    \ and \"sizes\".\n   Section 4.8 of HTML5 [W3C.REC-html5-20141028] defines modern\
    \ HTML\n   links.  That document links to the Microformats Wiki as a registry;\n\
    \   over time, the IANA registry ought to mirror its contents and,\n   ideally,\
    \ eventually replace it (although that depends on the HTML\n   community).\n \
    \  Surveys of existing HTML content have shown that unregistered link\n   relation\
    \ types that are not URIs are (perhaps inevitably) common.\n   Consuming HTML\
    \ implementations ought not consider such unregistered\n   short links to be errors,\
    \ but rather relation types with a local\n   scope (i.e., their meaning is specific\
    \ and perhaps private to that\n   document).\n   Finally, the HTML specification\
    \ gives a special meaning when the\n   \"alternate\" relation types coincide with\
    \ other relation types in the\n   same link.  Such links ought to be serialised\
    \ in the Link header\n   field using a single list of relation-types (e.g., rel=\"\
    alternate\n   stylesheet\") to preserve this relationship.\n"
- title: A.2.  Link Serialisation in Atom
  contents:
  - "A.2.  Link Serialisation in Atom\n   Atom [RFC4287] is a link serialisation that\
    \ conveys links in the\n   atom:link element, with the \"href\" attribute indicating\
    \ the link\n   target and the \"rel\" attribute containing the relation type.\
    \  The\n   context of the link is either a feed locator or an entry ID,\n   depending\
    \ on where it appears; generally, feed-level links are\n   obvious candidates\
    \ for transmission as a Link header field.\n   When serialising an atom:link into\
    \ a Link header field, it is\n   necessary to convert link targets (if used) to\
    \ URIs.\n   Atom defines extension relation types in terms of IRIs.  This\n  \
    \ specification redefines them as URIs, to simplify and reduce errors\n   in their\
    \ comparison.\n   Atom allows registered link relation types to be serialised\
    \ as\n   absolute URIs using a prefix, \"http://www.iana.org/assignments/\n  \
    \ relation/\".  This prefix is specific to the Atom serialisation.\n   Furthermore,\
    \ link relation types are always compared in a case-\n   sensitive fashion; therefore,\
    \ registered link relation types SHOULD\n   be converted to their registered form\
    \ (usually, lowercase) when\n   serialised in an Atom document.\n   Note also\
    \ that while the Link header field allows multiple relations\n   to be serialised\
    \ in a single link, atom:link does not.  In this case,\n   a single link-value\
    \ may map to several atom:link elements.\n   As with HTML, atom:link defines some\
    \ attributes that are not\n   explicitly mirrored in the Link header field syntax,\
    \ but they can\n   also be used as link-extensions to maintain fidelity.\n"
- title: Appendix B.  Algorithms for Parsing Link Header Fields
  contents:
  - "Appendix B.  Algorithms for Parsing Link Header Fields\n   This appendix outlines\
    \ a set of non-normative algorithms: for parsing\n   the Link header(s) out of\
    \ a header set, for parsing a Link header\n   field value, and algorithms for\
    \ parsing generic parts of the field\n   value.\n   These algorithms are more\
    \ permissive than the ABNF defining the\n   syntax might suggest; the error handling\
    \ embodied in them is a\n   reasonable approach, but not one that is required.\
    \  As such they are\n   advisory only, and in cases where there is disagreement,\
    \ the correct\n   behaviour is defined by the body of this specification.\n"
- title: B.1.  Parsing a Header Set for Links
  contents:
  - "B.1.  Parsing a Header Set for Links\n   This algorithm can be used to parse\
    \ the Link header fields that a\n   HTTP header set contains.  Given a header_set\
    \ of (string field_name,\n   string field_value) pairs, assuming ASCII encoding,\
    \ it returns a list\n   of link objects.\n   1.  Let field_values be a list containing\
    \ the members of header_set\n       whose field_name is a case-insensitive match\
    \ for \"link\".\n   2.  Let links be an empty list.\n   3.  For each field_value\
    \ in field_values:\n       1.  Let value_links be the result of Parsing a Link\
    \ Field Value\n           (Appendix B.2) from field_value.\n       2.  Append\
    \ each member of value_links to links.\n   4.  Return links.\n"
- title: B.2.  Parsing a Link Field Value
  contents:
  - "B.2.  Parsing a Link Field Value\n   This algorithm parses zero or more comma-separated\
    \ link-values from a\n   Link header field.  Given a string field_value, assuming\
    \ ASCII\n   encoding, it returns a list of link objects.\n   1.  Let links be\
    \ an empty list.\n   2.  While field_value has content:\n       1.   Consume any\
    \ leading OWS.\n       2.   If the first character is not \"<\", return links.\n\
    \       3.   Discard the first character (\"<\").\n       4.   Consume up to but\
    \ not including the first \">\" character or\n            end of field_value and\
    \ let the result be target_string.\n       5.   If the next character is not \"\
    >\", return links.\n       6.   Discard the leading \">\" character.\n       7.\
    \   Let link_parameters be the result of Parsing Parameters\n            (Appendix\
    \ B.3) from field_value (consuming zero or more\n            characters of it).\n\
    \       8.   Let target_uri be the result of relatively resolving (as per\n  \
    \          [RFC3986], Section 5.2) target_string.  Note that any base\n      \
    \      URI carried in the payload body is NOT used.\n       9.   Let relations_string\
    \ be the second item of the first tuple\n            of link_parameters whose\
    \ first item matches the string \"rel\"\n            or the empty string (\"\"\
    ) if it is not present.\n       10.  Split relations_string on RWS (removing it\
    \ in the process)\n            into a list of string relation_types.\n       11.\
    \  Let context_string be the second item of the first tuple of\n            link_parameters\
    \ whose first item matches the string\n            \"anchor\".  If it is not present,\
    \ context_string is the URL\n            of the representation carrying the Link\
    \ header [RFC7231],\n            Section 3.1.4.1, serialised as a URI.  Where\
    \ the URL is\n            anonymous, context_string is null.\n       12.  Let\
    \ context_uri be the result of relatively resolving (as\n            per [RFC3986],\
    \ Section 5.2) context_string, unless\n            context_string is null, in\
    \ which case context is null.  Note\n            that any base URI carried in\
    \ the payload body is NOT used.\n       13.  Let target_attributes be an empty\
    \ list.\n       14.  For each tuple (param_name, param_value) of link_parameters:\n\
    \            1.  If param_name matches \"rel\" or \"anchor\", skip this\n    \
    \            tuple.\n            2.  If param_name matches \"media\", \"title\"\
    , \"title*\", or\n                \"type\" and target_attributes already contains\
    \ a tuple\n                whose first element matches the value of param_name,\n\
    \                skip this tuple.\n            3.  Append (param_name, param_value)\
    \ to target_attributes.\n       15.  Let star_param_names be the set of param_names\
    \ in the\n            (param_name, param_value) tuples of link_parameters where\n\
    \            the last character of param_name is an asterisk (\"*\").\n      \
    \ 16.  For each star_param_name in star_param_names:\n            1.  Let base_param_name\
    \ be star_param_name with the last\n                character removed.\n     \
    \       2.  If the implementation does not choose to support an\n            \
    \    internationalised form of a parameter named\n                base_param_name\
    \ for any reason (including, but not\n                limited to, it being prohibited\
    \ by the parameter's\n                specification), remove all tuples from link_parameters\n\
    \                whose first member is star_param_name, and skip to the\n    \
    \            next star_param_name.\n            3.  Remove all tuples from link_parameters\
    \ whose first\n                member is base_param_name.\n            4.  Change\
    \ the first member of all tuples in link_parameters\n                whose first\
    \ member is star_param_name to\n                base_param_name.\n       17. \
    \ For each relation_type in relation_types:\n            1.  Case-normalise relation_type\
    \ to lowercase.\n            2.  Append a link object to links with the target\n\
    \                target_uri, relation type of relation_type, context of\n    \
    \            context_uri, and target attributes target_attributes.\n   3.  Return\
    \ links.\n"
- title: B.3.  Parsing Parameters
  contents:
  - "B.3.  Parsing Parameters\n   This algorithm parses the parameters from a header\
    \ field value.\n   Given input, an ASCII string, it returns a list of (string\n\
    \   parameter_name, string parameter_value) tuples that it contains.\n   input\
    \ is modified to remove the parsed parameters.\n   1.  Let parameters be an empty\
    \ list.\n   2.  While input has content:\n       1.   Consume any leading OWS.\n\
    \       2.   If the first character is not \";\", return parameters.\n       3.\
    \   Discard the leading \";\" character.\n       4.   Consume any leading OWS.\n\
    \       5.   Consume up to but not including the first BWS, \"=\", \";\", or\n\
    \            \",\" character, or up to the end of input, and let the result\n\
    \            be parameter_name.\n       6.   Consume any leading BWS.\n      \
    \ 7.   If the next character is \"=\":\n            1.  Discard the leading \"\
    =\" character.\n            2.  Consume any leading BWS.\n            3.  If the\
    \ next character is DQUOTE, let parameter_value be\n                the result\
    \ of Parsing a Quoted String (Appendix B.4)\n                from input (consuming\
    \ zero or more characters of it).\n            4.  Else, consume the contents\
    \ up to but not including the\n                first \";\" or \",\" character,\
    \ or up to the end of input,\n                and let the results be parameter_value.\n\
    \            5.  If the last character of parameter_name is an asterisk\n    \
    \            (\"*\"), decode parameter_value according to [RFC8187].\n       \
    \         Continue processing input if an unrecoverable error is\n           \
    \     encountered.\n       8.   Else:\n            1.  Let parameter_value be\
    \ an empty string.\n       9.   Case-normalise parameter_name to lowercase.\n\
    \       10.  Append (parameter_name, parameter_value) to parameters.\n       11.\
    \  Consume any leading OWS.\n       12.  If the next character is \",\" or the\
    \ end of input, stop\n            processing input and return parameters.\n"
- title: B.4.  Parsing a Quoted String
  contents:
  - "B.4.  Parsing a Quoted String\n   This algorithm parses a quoted string, as per\
    \ [RFC7230],\n   Section 3.2.6.  Given input, an ASCII string, it returns an unquoted\n\
    \   string. input is modified to remove the parsed string.\n   1.  Let output\
    \ be an empty string.\n   2.  If the first character of input is not DQUOTE, return\
    \ output.\n   3.  Discard the first character.\n   4.  While input has content:\n\
    \       1.  If the first character is a backslash (\"\\\"):\n           1.  Discard\
    \ the first character.\n           2.  If there is no more input, return output.\n\
    \           3.  Else, consume the first character and append it to\n         \
    \      output.\n       2.  Else, if the first character is DQUOTE, discard it\
    \ and return\n           output.\n       3.  Else, consume the first character\
    \ and append it to output.\n   5.  Return output.\n"
- title: Appendix C.  Changes from RFC 5988
  contents:
  - "Appendix C.  Changes from RFC 5988\n   This specification has the following differences\
    \ from its\n   predecessor, RFC 5988:\n   o  The initial relation type registrations\
    \ were removed, since\n      they've already been registered by RFC 5988.\n  \
    \ o  The introduction has been shortened.\n   o  The \"Link Relation Application\
    \ Data\" registry has been removed.\n   o  Incorporated errata.\n   o  Updated\
    \ references.\n   o  Link cardinality was clarified.\n   o  Terminology was changed\
    \ from \"target IRI\" and \"context IRI\" to\n      \"link target\" and \"link\
    \ context\", respectively.\n   o  Made assigning a URI to registered relation\
    \ types serialisation\n      specific.\n   o  Removed misleading statement that\
    \ the Link header field is\n      semantically equivalent to HTML and Atom links.\n\
    \   o  More carefully defined and used \"link serialisations\" and \"link\n  \
    \    applications.\"\n   o  Clarified the cardinality of target attributes (generically\
    \ and\n      for \"type\").\n   o  Corrected the default link context for the\
    \ Link header field, to\n      be dependent upon the identity of the representation\
    \ (as per\n      RFC 7231).\n   o  Defined a suggested parsing algorithm for the\
    \ Link header.\n   o  The value space of target attributes and their definition\
    \ has been\n      specified.\n   o  The ABNF has been updated to be compatible\
    \ with [RFC7230].  In\n      particular, whitespace is now explicit.\n   o  Some\
    \ parameters on the HTTP header field can now appear as a\n      token.\n   o\
    \  Parameters on the HTTP header can now be valueless.\n   o  Handling of quoted\
    \ strings is now defined by [RFC7230].\n   o  The \"type\" header field parameter\
    \ now needs to be quoted (as\n      \"token\" does not allow \"/\").\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Mark Nottingham\n   Email: mnot@mnot.net\n   URI:   https://www.mnot.net/\n"
