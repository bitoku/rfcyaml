- title: __initial_text__
  contents:
  - '                       HTTP Alternative Services

    '
- title: Abstract
  contents:
  - "Abstract\n   This document specifies \"Alternative Services\" for HTTP, which\
    \ allow\n   an origin's resources to be authoritatively available at a separate\n\
    \   network location, possibly accessed with a different protocol\n   configuration.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7838.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Notational Conventions .....................................3\n  \
    \ 2. Alternative Services Concepts ...................................3\n    \
    \  2.1. Host Authentication ........................................5\n      2.2.\
    \ Alternative Service Caching ................................6\n      2.3. Requiring\
    \ Server Name Indication ...........................6\n      2.4. Using Alternative\
    \ Services .................................6\n   3. The Alt-Svc HTTP Header Field\
    \ ...................................8\n      3.1. Caching Alt-Svc Header Field\
    \ Values .......................10\n   4. The ALTSVC HTTP/2 Frame ........................................11\n\
    \   5. The Alt-Used HTTP Header Field .................................13\n  \
    \ 6. The 421 (Misdirected Request) HTTP Status Code .................13\n   7.\
    \ IANA Considerations ............................................13\n      7.1.\
    \ Header Field Registrations ................................13\n      7.2. The\
    \ ALTSVC HTTP/2 Frame Type ..............................14\n      7.3. Alt-Svc\
    \ Parameter Registry ................................14\n           7.3.1. Procedure\
    \ ..........................................14\n           7.3.2. Registrations\
    \ ......................................15\n   8. Internationalization Considerations\
    \ ............................15\n   9. Security Considerations ........................................15\n\
    \      9.1. Changing Ports ............................................15\n  \
    \    9.2. Changing Hosts ............................................15\n    \
    \  9.3. Changing Protocols ........................................16\n      9.4.\
    \ Tracking Clients Using Alternative Services ...............17\n      9.5. Confusion\
    \ regarding Request Scheme ........................17\n   10. References ....................................................18\n\
    \      10.1. Normative References .....................................18\n  \
    \    10.2. Informative References ...................................19\n   Acknowledgements\
    \ ..................................................19\n   Authors' Addresses\
    \ ................................................20\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   HTTP [RFC7230] conflates the identification of resources\
    \ with their\n   location.  In other words, \"http://\" and \"https://\" URIs\
    \ are used to\n   both name and find things to interact with.\n   In some cases,\
    \ it is desirable to separate identification and\n   location in HTTP; keeping\
    \ the same identifier for a resource, but\n   interacting with it at a different\
    \ location on the network.\n   For example:\n   o  An origin server might wish\
    \ to redirect a client to a different\n      server when it is under load, or\
    \ it has found a server in a\n      location that is more local to the client.\n\
    \   o  An origin server might wish to offer access to its resources using\n  \
    \    a new protocol, such as HTTP/2 [RFC7540], or one using improved\n      security,\
    \ such as Transport Layer Security (TLS) [RFC5246].\n   o  An origin server might\
    \ wish to segment its clients into groups of\n      capabilities, such as those\
    \ supporting Server Name Indication\n      (SNI) (Section 3 of [RFC6066]), for\
    \ operational purposes.\n   This specification defines a new concept in HTTP,\
    \ \"Alternative\n   Services\", that allows an origin server to nominate additional\
    \ means\n   of interacting with it on the network.  It defines a general\n   framework\
    \ for this in Section 2, along with specific mechanisms for\n   advertising their\
    \ existence using HTTP header fields (Section 3) or\n   HTTP/2 frames (Section\
    \ 4), plus a way to indicate that an alternative\n   service was used (Section\
    \ 5).\n   It also endorses the status code 421 (Misdirected Request)\n   (Section\
    \ 6) that origin servers or their nominated alternatives can\n   use to indicate\
    \ that they are not authoritative for a given origin,\n   in cases where the wrong\
    \ location is used.\n"
- title: 1.1.  Notational Conventions
  contents:
  - "1.1.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   This document uses the Augmented BNF defined in [RFC5234]\
    \ and updated\n   by [RFC7405] along with the \"#rule\" extension defined in Section\
    \ 7 of\n   [RFC7230].  The rules below are defined in [RFC5234], [RFC7230], and\n\
    \   [RFC7234]:\n   OWS           = <OWS, see [RFC7230], Section 3.2.3>\n   delta-seconds\
    \ = <delta-seconds; see [RFC7234], Section 1.2.1>\n   port          = <port, see\
    \ [RFC7230], Section 2.7>\n   quoted-string = <quoted-string, see [RFC7230], Section\
    \ 3.2.6>\n   token         = <token, see [RFC7230], Section 3.2.6>\n   uri-host\
    \      = <uri-host, see [RFC7230], Section 2.7>\n"
- title: 2.  Alternative Services Concepts
  contents:
  - "2.  Alternative Services Concepts\n   This specification defines a new concept\
    \ in HTTP, the \"Alternative\n   Service\".  When an origin [RFC6454] has resources\
    \ that are accessible\n   through a different protocol/host/port combination,\
    \ it is said to\n   have an alternative service available.\n   An alternative\
    \ service can be used to interact with the resources on\n   an origin server at\
    \ a separate location on the network, possibly\n   using a different protocol\
    \ configuration.  Alternative services are\n   considered authoritative for an\
    \ origin's resources, in the sense of\n   [RFC7230], Section 9.1.\n   For example,\
    \ an origin:\n   (\"http\", \"www.example.com\", \"80\")\n   might declare that\
    \ its resources are also accessible at the\n   alternative service:\n   (\"h2\"\
    , \"new.example.com\", \"81\")\n   By their nature, alternative services are explicitly\
    \ at the\n   granularity of an origin; they cannot be selectively applied to\n\
    \   resources within an origin.\n   Alternative services do not replace or change\
    \ the origin for any\n   given resource; in general, they are not visible to the\
    \ software\n   \"above\" the access mechanism.  The alternative service is essentially\n\
    \   alternative routing information that can also be used to reach the\n   origin\
    \ in the same way that DNS CNAME or SRV records define routing\n   information\
    \ at the name resolution level.  Each origin maps to a set\n   of these routes\
    \ -- the default route is derived from the origin\n   itself and the other routes\
    \ are introduced based on alternative-\n   service information.\n   Furthermore,\
    \ it is important to note that the first member of an\n   alternative service\
    \ tuple is different from the \"scheme\" component of\n   an origin; it is more\
    \ specific, identifying not only the major\n   version of the protocol being used,\
    \ but potentially the communication\n   options for that protocol as well.\n \
    \  This means that clients using an alternative service can change the\n   host,\
    \ port, and protocol that they are using to fetch resources, but\n   these changes\
    \ MUST NOT be propagated to the application that is using\n   HTTP; from that\
    \ standpoint, the URI being accessed and all\n   information derived from it (scheme,\
    \ host, and port) are the same as\n   before.\n   Importantly, this includes its\
    \ security context; in particular, when\n   TLS [RFC5246] is used to authenticate,\
    \ the alternative service will\n   need to present a certificate for the origin's\
    \ host name, not that of\n   the alternative.  Likewise, the Host header field\
    \ ([RFC7230],\n   Section 5.4) is still derived from the origin, not the alternative\n\
    \   service (just as it would if a CNAME were being used).\n   The changes MAY,\
    \ however, be made visible in debugging tools,\n   consoles, etc.\n   Formally,\
    \ an alternative service is identified by the combination of:\n   o  An Application\
    \ Layer Protocol Negotiation (ALPN) protocol name, as\n      per [RFC7301]\n \
    \  o  A host, as per [RFC3986], Section 3.2.2\n   o  A port, as per [RFC3986],\
    \ Section 3.2.3\n   The ALPN protocol name is used to identify the application\
    \ protocol\n   or suite of protocols used by the alternative service.  Note that\
    \ for\n   the purpose of this specification, an ALPN protocol name implicitly\n\
    \   includes TLS in the suite of protocols it identifies, unless\n   specified\
    \ otherwise in its definition.  In particular, the ALPN name\n   \"http/1.1\"\
    , registered by Section 6 of [RFC7301], identifies HTTP/1.1\n   over TLS.\n  \
    \ Additionally, each alternative service MUST have a freshness\n   lifetime, expressed\
    \ in seconds (see Section 2.2).\n   There are many ways that a client could discover\
    \ the alternative\n   service(s) associated with an origin.  This document describes\
    \ two\n   such mechanisms: the \"Alt-Svc\" HTTP header field (Section 3) and the\n\
    \   \"ALTSVC\" HTTP/2 frame type (Section 4).\n   The remainder of this section\
    \ describes requirements that are common\n   to alternative services, regardless\
    \ of how they are discovered.\n"
- title: 2.1.  Host Authentication
  contents:
  - "2.1.  Host Authentication\n   Clients MUST have reasonable assurances that the\
    \ alternative service\n   is under control of and valid for the whole origin.\
    \  This mitigates\n   the attack described in Section 9.2.\n   For the purposes\
    \ of this document, \"reasonable assurances\" can be\n   established through use\
    \ of a TLS-based protocol with the certificate\n   checks defined in [RFC2818].\
    \  Clients MAY impose additional criteria\n   for establishing reasonable assurances.\n\
    \   For example, if the origin's host is \"www.example.com\" and an\n   alternative\
    \ is offered on \"other.example.com\" with the \"h2\" protocol,\n   and the certificate\
    \ offered is valid for \"www.example.com\", the\n   client can use the alternative.\
    \  However, if either is offered with\n   the \"h2c\" protocol, the client cannot\
    \ use it, because there is no\n   mechanism (at the time of the publication of\
    \ this specification) in\n   that protocol to establish the relationship between\
    \ the origin and\n   the alternative.\n"
- title: 2.2.  Alternative Service Caching
  contents:
  - "2.2.  Alternative Service Caching\n   Mechanisms for discovering alternative\
    \ services also associate a\n   freshness lifetime with them; for example, the\
    \ Alt-Svc header field\n   uses the \"ma\" parameter.\n   Clients can choose to\
    \ use an alternative service instead of the\n   origin at any time when it is\
    \ considered fresh; see Section 2.4 for\n   specific recommendations.\n   Clients\
    \ with existing connections to an alternative service do not\n   need to stop\
    \ using it when its freshness lifetime ends; the caching\n   mechanism is intended\
    \ for limiting how long an alternative service\n   can be used for establishing\
    \ new connections, not limiting the use of\n   existing ones.\n   Alternative\
    \ services are fully authoritative for the origin in\n   question, including the\
    \ ability to clear or update cached alternative\n   service entries, extend freshness\
    \ lifetimes, and any other authority\n   the origin server would have.\n   When\
    \ alternative services are used to send a client to the most\n   optimal server,\
    \ a change in network configuration can result in\n   cached values becoming suboptimal.\
    \  Therefore, clients SHOULD remove\n   from cache all alternative services that\
    \ lack the \"persist\" flag with\n   the value \"1\" when they detect such a change,\
    \ when information about\n   network state is available.\n"
- title: 2.3.  Requiring Server Name Indication
  contents:
  - "2.3.  Requiring Server Name Indication\n   A client MUST NOT use a TLS-based\
    \ alternative service unless the\n   client supports TLS Server Name Indication\
    \ (SNI).  This supports the\n   conservation of IP addresses on the alternative\
    \ service host.\n   Note that the SNI information provided in TLS by the client\
    \ will be\n   that of the origin, not the alternative (as will the Host HTTP header\n\
    \   field value).\n"
- title: 2.4.  Using Alternative Services
  contents:
  - "2.4.  Using Alternative Services\n   By their nature, alternative services are\
    \ OPTIONAL: clients do not\n   need to use them.  However, it is advantageous\
    \ for clients to behave\n   in a predictable way when alternative services are\
    \ used by servers,\n   to aid in purposes like load balancing.\n   Therefore,\
    \ if a client supporting this specification becomes aware of\n   an alternative\
    \ service, the client SHOULD use that alternative\n   service for all requests\
    \ to the associated origin as soon as it is\n   available, provided the alternative\
    \ service information is fresh\n   (Section 2.2) and the security properties of\
    \ the alternative service\n   protocol are desirable, as compared to the existing\
    \ connection.  A\n   viable alternative service is then treated in every way as\
    \ the\n   origin; this includes the ability to advertise alternative services.\n\
    \   If a client becomes aware of multiple alternative services, it\n   chooses\
    \ the most suitable according to its own criteria, keeping\n   security properties\
    \ in mind.  For example, an origin might advertise\n   multiple alternative services\
    \ to notify clients of support for\n   multiple versions of HTTP.\n   A client\
    \ configured to use a proxy for a given request SHOULD NOT\n   directly connect\
    \ to an alternative service for this request, but\n   instead route it through\
    \ that proxy.\n   When a client uses an alternative service for a request, it\
    \ can\n   indicate this to the server using the Alt-Used header field\n   (Section\
    \ 5).\n   The client does not need to block requests on any existing\n   connection;\
    \ it can be used until the alternative connection is\n   established.  However,\
    \ if the security properties of the existing\n   connection are weak (for example,\
    \ cleartext HTTP/1.1), then it might\n   make sense to block until the new connection\
    \ is fully available in\n   order to avoid information leakage.\n   Furthermore,\
    \ if the connection to the alternative service fails or is\n   unresponsive, the\
    \ client MAY fall back to using the origin or another\n   alternative service.\
    \  Note, however, that this could be the basis of\n   a downgrade attack, thus\
    \ losing any enhanced security properties of\n   the alternative service.  If\
    \ the connection to the alternative\n   service does not negotiate the expected\
    \ protocol (for example, ALPN\n   fails to negotiate h2, or an Upgrade request\
    \ to h2c is not accepted),\n   the connection to the alternative service MUST\
    \ be considered to have\n   failed.\n"
- title: 3.  The Alt-Svc HTTP Header Field
  contents:
  - "3.  The Alt-Svc HTTP Header Field\n   An HTTP(S) origin server can advertise\
    \ the availability of\n   alternative services to clients by adding an Alt-Svc\
    \ header field to\n   responses.\n   Alt-Svc       = clear / 1#alt-value\n   clear\
    \         = %s\"clear\"; \"clear\", case-sensitive\n   alt-value     = alternative\
    \ *( OWS \";\" OWS parameter )\n   alternative   = protocol-id \"=\" alt-authority\n\
    \   protocol-id   = token ; percent-encoded ALPN protocol name\n   alt-authority\
    \ = quoted-string ; containing [ uri-host ] \":\" port\n   parameter     = token\
    \ \"=\" ( token / quoted-string )\n   The field value consists either of a list\
    \ of values, each of which\n   indicates one alternative service, or the keyword\
    \ \"clear\".\n   A field value containing the special value \"clear\" indicates\
    \ that the\n   origin requests all alternatives for that origin to be invalidated\n\
    \   (including those specified in the same response, in case of an\n   invalid\
    \ reply containing both \"clear\" and alternative services).\n   ALPN protocol\
    \ names are octet sequences with no additional\n   constraints on format.  Octets\
    \ not allowed in tokens ([RFC7230],\n   Section 3.2.6) MUST be percent-encoded\
    \ as per Section 2.1 of\n   [RFC3986].  Consequently, the octet representing the\
    \ percent\n   character \"%\" (hex 25) MUST be percent-encoded as well.\n   In\
    \ order to have precisely one way to represent any ALPN protocol\n   name, the\
    \ following additional constraints apply:\n   1.  Octets in the ALPN protocol\
    \ name MUST NOT be percent-encoded if\n       they are valid token characters\
    \ except \"%\", and\n   2.  When using percent-encoding, uppercase hex digits\
    \ MUST be used.\n   With these constraints, recipients can apply simple string\
    \ comparison\n   to match protocol identifiers.\n   The \"alt-authority\" component\
    \ consists of an OPTIONAL uri-host\n   (\"host\" in Section 3.2.2 of [RFC3986]),\
    \ a colon (\":\"), and a port\n   number.\n   For example:\n   Alt-Svc: h2=\"\
    :8000\"\n   This indicates the \"h2\" protocol ([RFC7540]) on the same host using\n\
    \   the indicated port 8000.\n   An example involving a change of host:\n   Alt-Svc:\
    \ h2=\"new.example.org:80\"\n   This indicates the \"h2\" protocol on the host\
    \ \"new.example.org\",\n   running on port 80.  Note that the \"quoted-string\"\
    \ syntax needs to be\n   used because \":\" is not an allowed character in \"\
    token\".\n   Examples for protocol name escaping:\n   +--------------------+-------------+---------------------+\n\
    \   | ALPN protocol name | protocol-id | Note                |\n   +--------------------+-------------+---------------------+\n\
    \   | h2                 | h2          | No escaping needed  |\n   +--------------------+-------------+---------------------+\n\
    \   | w=x:y#z            | w%3Dx%3Ay#z | \"=\" and \":\" escaped |\n   +--------------------+-------------+---------------------+\n\
    \   | x%y                | x%25y       | \"%\" needs escaping  |\n   +--------------------+-------------+---------------------+\n\
    \   Alt-Svc MAY occur in any HTTP response message, regardless of the\n   status\
    \ code.  Note that recipients of Alt-Svc can ignore the header\n   field (and\
    \ are required to in some situations; see Sections 2.1 and\n   6).\n   The Alt-Svc\
    \ field value can have multiple values:\n   Alt-Svc: h2=\"alt.example.com:8000\"\
    , h2=\":443\"\n   When multiple values are present, the order of the values reflects\n\
    \   the server's preference (with the first value being the most\n   preferred\
    \ alternative).\n   The value(s) advertised by Alt-Svc can be used by clients\
    \ to open a\n   new connection to an alternative service.  Subsequent requests\
    \ can\n   start using this new connection immediately or can continue using the\n\
    \   existing connection while the new connection is created.\n   When using HTTP/2\
    \ ([RFC7540]), servers SHOULD instead send an ALTSVC\n   frame (Section 4).  A\
    \ single ALTSVC frame can be sent for a\n   connection; a new frame is not needed\
    \ for every request.  Note that,\n   despite this recommendation, Alt-Svc header\
    \ fields remain valid in\n   responses delivered over HTTP/2.\n   Each \"alt-value\"\
    \ is followed by an OPTIONAL semicolon-separated list\n   of additional parameters,\
    \ each such \"parameter\" comprising a name and\n   a value.\n   This specification\
    \ defines two parameters: \"ma\" and \"persist\",\n   defined in Section 3.1.\
    \  Unknown parameters MUST be ignored.  That\n   is, the values (alt-value) they\
    \ appear in MUST be processed as if the\n   unknown parameter was not present.\n\
    \   New parameters can be defined in extension specifications (see\n   Section\
    \ 7.3 for registration details).\n   Note that all field elements that allow \"\
    quoted-string\" syntax MUST\n   be processed as per Section 3.2.6 of [RFC7230].\n"
- title: 3.1.  Caching Alt-Svc Header Field Values
  contents:
  - "3.1.  Caching Alt-Svc Header Field Values\n   When an alternative service is\
    \ advertised using Alt-Svc, it is\n   considered fresh for 24 hours from generation\
    \ of the message.  This\n   can be modified with the \"ma\" (max-age) parameter.\n\
    \   Syntax:\n   ma = delta-seconds; see [RFC7234], Section 1.2.1\n   The delta-seconds\
    \ value indicates the number of seconds since the\n   response was generated for\
    \ which the alternative service is\n   considered fresh.\n   Alt-Svc: h2=\":443\"\
    ; ma=3600\n   See Section 4.2.3 of [RFC7234] for details on determining the\n\
    \   response age.\n   For example, a response:\n     HTTP/1.1 200 OK\n     Content-Type:\
    \ text/html\n     Cache-Control: max-age=600\n     Age: 30\n     Alt-Svc: h2=\"\
    :8000\"; ma=60\n   indicates that an alternative service is available and usable\
    \ for the\n   next 60 seconds.  However, the response has already been cached\
    \ for\n   30 seconds (as per the Age header field value); therefore, the\n   alternative\
    \ service is only fresh for the 30 seconds from when this\n   response was received,\
    \ minus estimated transit time.\n   Note that the freshness lifetime for HTTP\
    \ caching (here, 600 seconds)\n   does not affect caching of Alt-Svc values.\n\
    \   When an Alt-Svc response header field is received from an origin, its\n  \
    \ value invalidates and replaces all cached alternative services for\n   that\
    \ origin.\n   By default, cached alternative services will be cleared when the\n\
    \   client detects a network change.  Alternative services that are\n   intended\
    \ to be longer lived (such as those that are not specific to\n   the client access\
    \ network) can carry the \"persist\" parameter with a\n   value \"1\" as a hint\
    \ that the service is potentially useful beyond a\n   network configuration change.\n\
    \   Syntax:\n   persist = \"1\"\n   For example:\n   Alt-Svc: h2=\":443\"; ma=2592000;\
    \ persist=1\n   This specification only defines a single value for \"persist\"\
    .\n   Clients MUST ignore \"persist\" parameters with values other than \"1\"\
    .\n   See Section 2.2 for general requirements on caching alternative\n   services.\n"
- title: 4.  The ALTSVC HTTP/2 Frame
  contents:
  - "4.  The ALTSVC HTTP/2 Frame\n   The ALTSVC HTTP/2 frame ([RFC7540], Section 4)\
    \ advertises the\n   availability of an alternative service to an HTTP/2 client.\n\
    \   The ALTSVC frame is a non-critical extension to HTTP/2.  Endpoints\n   that\
    \ do not support this frame will ignore it (as per the\n   extensibility rules\
    \ defined in Section 4.1 of [RFC7540]).\n   An ALTSVC frame from a server to a\
    \ client on a stream other than\n   stream 0 indicates that the conveyed alternative\
    \ service is\n   associated with the origin of that stream.\n   An ALTSVC frame\
    \ from a server to a client on stream 0 indicates that\n   the conveyed alternative\
    \ service is associated with the origin\n   contained in the Origin field of the\
    \ frame.  An association with an\n   origin that the client does not consider\
    \ authoritative for the\n   current connection MUST be ignored.\n   The ALTSVC\
    \ frame type is 0xa (decimal 10).\n    +-------------------------------+-------------------------------+\n\
    \    |         Origin-Len (16)       | Origin? (*)                 ...\n    +-------------------------------+-------------------------------+\n\
    \    |                   Alt-Svc-Field-Value (*)                   ...\n    +---------------------------------------------------------------+\n\
    \                           ALTSVC Frame Payload\n   The ALTSVC frame contains\
    \ the following fields:\n   Origin-Len:  An unsigned, 16-bit integer indicating\
    \ the length, in\n      octets, of the Origin field.\n   Origin:  An OPTIONAL\
    \ sequence of characters containing the ASCII\n      serialization of an origin\
    \ ([RFC6454], Section 6.2) to which the\n      alternative service is applicable.\n\
    \   Alt-Svc-Field-Value:  A sequence of octets (length determined by\n      subtracting\
    \ the length of all preceding fields from the frame\n      length) containing\
    \ a value identical to the Alt-Svc field value\n      defined in Section 3 (ABNF\
    \ production \"Alt-Svc\").\n   The ALTSVC frame does not define any flags.\n \
    \  The ALTSVC frame is intended for receipt by clients.  A device acting\n   as\
    \ a server MUST ignore it.\n   An ALTSVC frame on stream 0 with empty (length\
    \ 0) \"Origin\"\n   information is invalid and MUST be ignored.  An ALTSVC frame\
    \ on a\n   stream other than stream 0 containing non-empty \"Origin\" information\n\
    \   is invalid and MUST be ignored.\n   The ALTSVC frame is processed hop-by-hop.\
    \  An intermediary MUST NOT\n   forward ALTSVC frames, though it can use the information\
    \ contained in\n   ALTSVC frames in forming new ALTSVC frames to send to its own\n\
    \   clients.\n   Receiving an ALTSVC frame is semantically equivalent to receiving\
    \ an\n   Alt-Svc header field.  As a result, the ALTSVC frame causes\n   alternative\
    \ services for the corresponding origin to be replaced.\n   Note that it would\
    \ be unwise to mix the use of Alt-Svc header fields\n   with the use of ALTSVC\
    \ frames, as the sequence of receipt might be\n   hard to predict.\n"
- title: 5.  The Alt-Used HTTP Header Field
  contents:
  - "5.  The Alt-Used HTTP Header Field\n   The Alt-Used header field is used in requests\
    \ to identify the\n   alternative service in use, just as the Host header field\n\
    \   (Section 5.4 of [RFC7230]) identifies the host and port of the\n   origin.\n\
    \   Alt-Used     = uri-host [ \":\" port ]\n   Alt-Used is intended to allow alternative\
    \ services to detect loops,\n   differentiate traffic for purposes of load balancing,\
    \ and generally\n   to ensure that it is possible to identify the intended destination\
    \ of\n   traffic, since introducing this information after a protocol is in\n\
    \   use has proven to be problematic.\n   When using an alternative service, clients\
    \ SHOULD include an Alt-Used\n   header field in all requests.\n   For example:\n\
    \     GET /thing HTTP/1.1\n     Host: origin.example.com\n     Alt-Used: alternate.example.net\n"
- title: 6.  The 421 (Misdirected Request) HTTP Status Code
  contents:
  - "6.  The 421 (Misdirected Request) HTTP Status Code\n   The 421 (Misdirected Request)\
    \ status code is defined in Section 9.1.2\n   of [RFC7540] to indicate that the\
    \ current server instance is not\n   authoritative for the requested resource.\
    \  This can be used to\n   indicate that an alternative service is not authoritative;\
    \ see\n   Section 2).\n   Clients receiving 421 (Misdirected Request) from an\
    \ alternative\n   service MUST remove the corresponding entry from its alternative\n\
    \   service cache (see Section 2.2) for that origin.  Regardless of the\n   idempotency\
    \ of the request method, they MAY retry the request, either\n   at another alternative\
    \ server, or at the origin.\n   An Alt-Svc header field in a 421 (Misdirected\
    \ Request) response MUST\n   be ignored.\n"
- title: 7.  IANA Considerations
  contents:
  - '7.  IANA Considerations

    '
- title: 7.1.  Header Field Registrations
  contents:
  - "7.1.  Header Field Registrations\n   HTTP header fields are registered within\
    \ the \"Message Headers\"\n   registry maintained at <https://www.iana.org/assignments/message-\n\
    \   headers/>.\n   This document defines the following HTTP header fields, so\
    \ their\n   associated registry entries have been added according to the\n   permanent\
    \ registrations below (see [BCP90]):\n   +-------------------+----------+----------+------------+\n\
    \   | Header Field Name | Protocol | Status   | Reference  |\n   +-------------------+----------+----------+------------+\n\
    \   | Alt-Svc           | http     | standard | Section 3  |\n   | Alt-Used  \
    \        | http     | standard | Section 5  |\n   +-------------------+----------+----------+------------+\n\
    \   The change controller is: \"IETF (iesg@ietf.org) -- Internet\n   Engineering\
    \ Task Force\".\n"
- title: 7.2.  The ALTSVC HTTP/2 Frame Type
  contents:
  - "7.2.  The ALTSVC HTTP/2 Frame Type\n   This document registers the ALTSVC frame\
    \ type in the \"HTTP/2 Frame\n   Type\" registry ([RFC7540], Section 11.2).\n\
    \      Frame Type: ALTSVC\n      Code: 0xa\n      Specification: Section 4 of\
    \ this document\n"
- title: 7.3.  Alt-Svc Parameter Registry
  contents:
  - "7.3.  Alt-Svc Parameter Registry\n   The \"Hypertext Transfer Protocol (HTTP)\
    \ Alt-Svc Parameter Registry\"\n   defines the name space for parameters.  It\
    \ has been created and will\n   be maintained at <http://www.iana.org/assignments/http-alt-svc-\n\
    \   parameters>.\n"
- title: 7.3.1.  Procedure
  contents:
  - "7.3.1.  Procedure\n   A registration MUST include the following fields:\n   o\
    \  Parameter Name\n   o  Pointer to specification text\n   Values to be added\
    \ to this name space require Expert Review (see\n   [RFC5226], Section 4.1).\n"
- title: 7.3.2.  Registrations
  contents:
  - "7.3.2.  Registrations\n   The \"Hypertext Transfer Protocol (HTTP) Alt-Svc Parameter\
    \ Registry\"\n   has been populated with the registrations below:\n   +-------------------+--------------+\n\
    \   | Alt-Svc Parameter | Reference    |\n   +-------------------+--------------+\n\
    \   | ma                | Section 3.1  |\n   | persist           | Section 3.1\
    \  |\n   +-------------------+--------------+\n"
- title: 8.  Internationalization Considerations
  contents:
  - "8.  Internationalization Considerations\n   An internationalized domain name\
    \ that appears in either the header\n   field (Section 3) or the HTTP/2 frame\
    \ (Section 4) MUST be expressed\n   using A-labels ([RFC5890], Section 2.3.2.1).\n"
- title: 9.  Security Considerations
  contents:
  - '9.  Security Considerations

    '
- title: 9.1.  Changing Ports
  contents:
  - "9.1.  Changing Ports\n   Using an alternative service implies accessing an origin's\
    \ resources\n   on an alternative port, at a minimum.  Therefore, an attacker\
    \ that\n   can inject alternative services and listen at the advertised port is\n\
    \   able to hijack an origin.  On certain servers, it is normal for users\n  \
    \ to be able to control some personal pages available on a shared port\n   and\
    \ also to accept requests on less-privileged ports.\n   For example, an attacker\
    \ that can add HTTP response header fields to\n   some pages can redirect traffic\
    \ for an entire origin to a different\n   port on the same host using the Alt-Svc\
    \ header field; if that port is\n   under the attacker's control, they can thus\
    \ masquerade as the HTTP\n   server.\n   This risk is mitigated by the requirements\
    \ in Section 2.1.\n   On servers, this risk can also be reduced by restricting\
    \ the ability\n   to advertise alternative services, and restricting who can open\
    \ a\n   port for listening on that host.\n"
- title: 9.2.  Changing Hosts
  contents:
  - "9.2.  Changing Hosts\n   When the host is changed due to the use of an alternative\
    \ service,\n   this presents an opportunity for attackers to hijack communication\
    \ to\n   an origin.\n   For example, if an attacker can convince a user agent\
    \ to send all\n   traffic for \"innocent.example.org\" to \"evil.example.com\"\
    \ by\n   successfully associating it as an alternative service, they can\n   masquerade\
    \ as that origin.  This can be done locally (see mitigations\n   in Section 9.1)\
    \ or remotely (e.g., by an intermediary as a man-in-\n   the-middle attack).\n\
    \   This is the reason for the requirement in Section 2.1 that clients\n   have\
    \ reasonable assurances that the alternative service is under\n   control of and\
    \ valid for the whole origin; for example, presenting a\n   certificate for the\
    \ origin proves that the alternative service is\n   authorized to serve traffic\
    \ for the origin.\n   Note that this assurance is only as strong as the method\
    \ used to\n   authenticate the alternative service.  In particular, when TLS\n\
    \   authentication is used to do so, there are well-known exploits to\n   make\
    \ an attacker's certificate appear as legitimate.\n   Alternative services could\
    \ be used to persist such an attack.  For\n   example, an intermediary could man-in-the-middle\
    \ TLS-protected\n   communication to a target and then direct all traffic to an\n\
    \   alternative service with a large freshness lifetime so that the user\n   agent\
    \ still directs traffic to the attacker even when not using the\n   intermediary.\n\
    \   Implementations MUST perform any certificate-pinning validation (such\n  \
    \ as [RFC7469]) on alternative services just as they would on direct\n   connections\
    \ to the origin.  Implementations might also choose to add\n   other requirements\
    \ around which certificates are acceptable for\n   alternative services.\n"
- title: 9.3.  Changing Protocols
  contents:
  - "9.3.  Changing Protocols\n   When the ALPN protocol is changed due to the use\
    \ of an alternative\n   service, the security properties of the new connection\
    \ to the origin\n   can be different from that of the \"normal\" connection to\
    \ the origin,\n   because the protocol identifier itself implies this.\n   For\
    \ example, if an \"https://\" URI has a protocol advertised that does\n   not\
    \ use some form of end-to-end encryption (most likely, TLS), this\n   violates\
    \ the expectations for security that the URI scheme implies.\n   Therefore, clients\
    \ cannot use alternative services blindly, but\n   instead evaluate the option(s)\
    \ presented to ensure that security\n   requirements and expectations of specifications,\
    \ implementations, and\n   end users are met.\n"
- title: 9.4.  Tracking Clients Using Alternative Services
  contents:
  - "9.4.  Tracking Clients Using Alternative Services\n   Choosing an alternative\
    \ service implies connecting to a new, server-\n   supplied host name.  By using\
    \ unique names, servers could conceivably\n   track client requests.  Such tracking\
    \ could follow users across\n   multiple networks, when the \"persist\" flag is\
    \ used.\n   Clients that wish to prevent requests from being correlated can\n\
    \   decide not to use alternative services for multiple requests that\n   would\
    \ not otherwise be allowed to be correlated.\n   In a user agent, any alternative\
    \ service information MUST be removed\n   when origin-specific data is cleared\
    \ (typically, when cookies\n   [RFC6265] are cleared).\n"
- title: 9.5.  Confusion regarding Request Scheme
  contents:
  - "9.5.  Confusion regarding Request Scheme\n   Some server-side HTTP applications\
    \ make assumptions about security\n   based upon connection context; for example,\
    \ equating being served\n   upon port 443 with the use of an \"https://\" URI\
    \ and the various\n   security properties that implies.\n   This affects not only\
    \ the security properties of the connection\n   itself, but also the state of\
    \ the client at the other end of it; for\n   example, a Web browser treats \"\
    https://\" URIs differently than\n   \"http://\" URIs in many ways, not just for\
    \ purposes of protocol\n   handling.\n   Since one of the uses of Alternative\
    \ Services is to allow a\n   connection to be migrated to a different protocol\
    \ and port, these\n   applications can become confused about the security properties\
    \ of a\n   given connection, sending information (for example, cookies and\n \
    \  content) that is intended for a secure context (such as an \"https://\"\n \
    \  URI) to a client that is not treating it as one.\n   This risk can be mitigated\
    \ in servers by using the URI scheme\n   explicitly carried by the protocol (such\
    \ as \":scheme\" in HTTP/2 or\n   the \"absolute form\" of the request target\
    \ in HTTP/1.1) as an\n   indication of security context, instead of other connection\n\
    \   properties ([RFC7540], Section 8.1.2.3 and [RFC7230], Section 5.3.2).\n  \
    \ When the protocol does not explicitly carry the scheme (as is usually\n   the\
    \ case for HTTP/1.1 over TLS), servers can mitigate this risk by\n   either assuming\
    \ that all requests have an insecure context, or by\n   refraining from advertising\
    \ alternative services for insecure schemes\n   (for example, HTTP).\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC2818]  Rescorla, E., \"HTTP Over TLS\", RFC 2818,\n              DOI 10.17487/RFC2818,\
    \ May 2000,\n              <http://www.rfc-editor.org/info/rfc2818>.\n   [RFC3986]\
    \  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n              Resource\
    \ Identifier (URI): Generic Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986,\
    \ January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n   [RFC5226]\
    \  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA\
    \ Considerations Section in RFCs\", BCP 26, RFC 5226,\n              DOI 10.17487/RFC5226,\
    \ May 2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n   [RFC5234]\
    \  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n             \
    \ Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,\
    \ January 2008,\n              <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC5890]\
    \  Klensin, J., \"Internationalized Domain Names for\n              Applications\
    \ (IDNA): Definitions and Document Framework\",\n              RFC 5890, DOI 10.17487/RFC5890,\
    \ August 2010,\n              <http://www.rfc-editor.org/info/rfc5890>.\n   [RFC6066]\
    \  Eastlake, D., \"Transport Layer Security (TLS) Extensions:\n              Extension\
    \ Definitions\", RFC 6066, DOI 10.17487/RFC6066,\n              January 2011,\
    \ <http://www.rfc-editor.org/info/rfc6066>.\n   [RFC6454]  Barth, A., \"The Web\
    \ Origin Concept\", RFC 6454,\n              DOI 10.17487/RFC6454, December 2011,\n\
    \              <http://www.rfc-editor.org/info/rfc6454>.\n   [RFC7230]  Fielding,\
    \ R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1):\
    \ Message Syntax and Routing\",\n              RFC 7230, DOI 10.17487/RFC7230,\
    \ June 2014,\n              <http://www.rfc-editor.org/info/rfc7230>.\n   [RFC7234]\
    \  Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,\n              Ed.,\
    \ \"Hypertext Transfer Protocol (HTTP/1.1): Caching\",\n              RFC 7234,\
    \ DOI 10.17487/RFC7234, June 2014,\n              <http://www.rfc-editor.org/info/rfc7234>.\n\
    \   [RFC7301]  Friedl, S., Popov, A., Langley, A., and S. Emile,\n           \
    \   \"Transport Layer Security (TLS) Application-Layer Protocol\n            \
    \  Negotiation Extension\", RFC 7301, DOI 10.17487/RFC7301,\n              July\
    \ 2014, <http://www.rfc-editor.org/info/rfc7301>.\n   [RFC7405]  Kyzivat, P.,\
    \ \"Case-Sensitive String Support in ABNF\",\n              RFC 7405, DOI 10.17487/RFC7405,\
    \ December 2014,\n              <http://www.rfc-editor.org/info/rfc7405>.\n  \
    \ [RFC7540]  Belshe, M., Peon, R., and M. Thomson, Ed., \"Hypertext\n        \
    \      Transfer Protocol version 2\", RFC 7540,\n              DOI 10.17487/RFC7540,\
    \ May 2015,\n              <http://www.rfc-editor.org/info/rfc7540>.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [BCP90]    Klyne, G., Nottingham, M., and J.\
    \ Mogul, \"Registration\n              Procedures for Message Header Fields\"\
    , BCP 90, RFC 3864,\n              September 2004, <http://www.rfc-editor.org/info/bcp90>.\n\
    \   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n  \
    \            (TLS) Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246,\
    \ August 2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC6265]\
    \  Barth, A., \"HTTP State Management Mechanism\", RFC 6265,\n              DOI\
    \ 10.17487/RFC6265, April 2011,\n              <http://www.rfc-editor.org/info/rfc6265>.\n\
    \   [RFC7469]  Evans, C., Palmer, C., and R. Sleevi, \"Public Key Pinning\n  \
    \            Extension for HTTP\", RFC 7469, DOI 10.17487/RFC7469, April\n   \
    \           2015, <http://www.rfc-editor.org/info/rfc7469>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks to Adam Langley, Bence Beky, Chris Lonvick, Eliot\
    \ Lear, Erik\n   Nygren, Guy Podjarny, Herve Ruellan, Lucas Pardue, Martin Thomson,\n\
    \   Matthew Kerwin, Mike Bishop, Paul Hoffman, Richard Barnes, Richard\n   Bradbury,\
    \ Stephen Farrell, Stephen Ludin, and Will Chan for their\n   feedback and suggestions.\n\
    \   The Alt-Svc header field was influenced by the design of the\n   Alternate-Protocol\
    \ header field in SPDY.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mark Nottingham\n   Akamai\n   Email: mnot@mnot.net\n\
    \   URI:   https://www.mnot.net/\n   Patrick McManus\n   Mozilla\n   Email: mcmanus@ducksong.com\n\
    \   URI:   https://mozillians.org/u/pmcmanus/\n   Julian F. Reschke\n   greenbytes\
    \ GmbH\n   Email: julian.reschke@greenbytes.de\n   URI:   https://greenbytes.de/tech/webdav/\n"
