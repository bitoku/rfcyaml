This document provides information about the Russian Federal standard for digital signatures (GOST R 34.10 2012), which is one of the Russian cryptographic standard algorithms (called GOST algorithms).
Recently, Russian cryptography is being used in Internet applications, and this document provides information for developers and users of GOST R 34.10 2012 regarding digital signature generation and verification.
This document updates RFC 5832.
[GOST3410 2012] was developed by the Center for Information Protection and Special Communications of the Federal Security Service of the Russian Federation with participation of the open joint stock company "Information Technologies and Communication Systems" (InfoTeCS JSC).
GOST R 34.10 2012 was approved and introduced by Decree #215 of the Federal Agency on Technical Regulating and Metrology on 07.08.2012.
GOST R 34.10 2012 replaces GOST R 34.10 2001
[GOST3410 2001], a national standard of the Russian Federation.
GOST R 34.10 2001 is superseded by GOST R 34.10 2012 from 1 January 2013.
That means that all new systems that are presented for certification MUST use GOST R 34.10 2012 and MAY use GOST R 34.10 2001 also for maintaining compatibility with existing systems.
Usage of GOST R 34.10 2001 in current systems is allowed at least for a 5 year period.
This document updates RFC 5832
This document is an English translation of GOST R 34.10 2012; [RFC6986] is an English translation of GOST R 34.11 2012; and [RFC5832] is an English translation of GOST R 34.10 2001.
Terms and conceptions of this standard comply with the following international standards:  ISO 2382 2
[ISO9796 2][ISO9796 3],  series of standards ISO/IEC 14888
[ISO14888 4], and  series of standards ISO/IEC 10118
The Purpose of GOST R 34.10 2012 GOST R 34.10 2012 describes the generation and verification processes for digital signatures, based on operations with an elliptic curve points group, defined over a prime finite field.
The necessity for developing this standard is caused by the need to implement digital signatures of varying resistance due to growth of computer technology.
Digital signature security is based on the complexity of discrete logarithm calculation in an elliptic curve points group and also on the security of the hash function used (according to GOST R 34.11 2012
Scope GOST R 34.10 2012 defines an electronic digital signature (or simply digital signature) scheme, digital signature generation and verification processes for a given message (document), meant for transmission via insecure public telecommunication channels in data processing systems of different purposes.
Use of a digital signature based on GOST R 34.10 2012 makes transmitted messages more resistant to forgery and loss of integrity, in comparison with the digital signature scheme prescribed by the previous standard.
GOST R 34.10 2012 is recommended for the creation, operation, and modernization of data processing systems of various purposes.
The following terms are used in the standard:
appendix: bit string that is formed by a digital signature and by the arbitrary text field [ISO14888 1].
signature key: element of secret data that is specific to the subject and used only by this subject during the signature generation process [ISO14888 1].
verification key: element of data mathematically linked to the signature key data element that is used by the verifier during the digital signature verification process [ISO14888 1].
domain parameter: element of data that is common for all the subjects of the digital signature scheme, known or accessible to all the subjects [ISO14888 1].
signed message: a set of data elements that consists of the message and the appendix, which is a part of the message [ISO14888 1].
pseudorandom number sequence: a sequence of numbers that is obtained during some arithmetic (calculation) process, used in a specific case instead of a true random number sequence.
random number sequence: a sequence of numbers of which none can be predicted (calculated) using only the preceding numbers of the same sequence.
verification process: a process that uses the signed message, the verification key, and the digital signature scheme parameters as initial data and that gives the conclusion about digital signature validity or invalidity as a result [ISO14888 1].
signature generation process: a process that uses the message, the signature key, and the digital signature scheme parameters as initial data and that generates the digital signature as the result [ISO14888 1].
witness: element of data that states to the verifier whether the digital signature is valid or invalid.
random number: a number chosen from the definite number set in such a way that every number from the set can be chosen with equal probability.
message: string of bits of a limited length [ISO14888 1].
string of bits that is a result of the hash function [ISO14888 1].
the function that maps bit strings onto bit strings of fixed length observing the following properties: 1.
it is difficult to calculate the input data that is the pre  image of the given function value;
it is difficult to find another input data that is the pre  image of the same function value as is the given input data; and
it is difficult to find a pair of different input data that produces the same hash function value.
Property 1 in the context of the digital signature area means that it is impossible to recover the initial message using the digital signature; property 2 means that it is difficult to find another (falsified) message that produces the same digital signature as a given message; property 3 means that it is difficult to find a pair of different messages that both produce the same signature.
In this standard, the terms "hash function", "cryptographic hash function", "hashing function", and "cryptographic hashing function" are synonymous to provide terminological succession to native legal documents currently in force and scientific publications.
(electronic) digital signature: string of bits that are obtained as a result of the signature generation process [ISO14888 1].
A string of bits that is a signature may have an internal structure depending on the specific signature generation mechanism.
In this standard, the terms "electronic signature", "digital signature", and "electronic digital signature" are synonymous to provide terminological succession to native legal documents currently in force and scientific publications.
The following notations are used in this standard:
General Statements A commonly accepted digital signature scheme (model) consists of three processes:  generation of a pair of keys (for signature generation and for signature verification),  signature generation, and  signature verification.
In GOST R 34.10 2012, a process for generating a pair of keys (for signature and verification) is not defined.
Characteristics and ways to realize the process are defined by involved subjects, who determine corresponding parameters by their agreement.
The digital signature mechanism is defined by the realization of two main processes (Section 6):  signature generation (Section 6.1), and  signature verification (Section 6.2).
The digital signature is meant for the authentication of the signatory of the electronic message.
Besides, digital signature usage gives an opportunity to provide the following properties during signed message transmission:  realization of control of the transmitted signed message integrity,  proof of the authorship of the signatory of the message, and  protection of the message against possible forgery.
A schematic representation of the signed message is shown in Figure 1.
The field "digital signature" is supplemented by the field "text" that can contain, for example, identifiers of the signatory of the message and/or time label.
The digital signature scheme defined in GOST R 34.10 2012 must be implemented using operations of the elliptic curve points group, defined over a finite prime field, and also with the use of the hash function.
The cryptographic security of the digital signature scheme is based on the complexity of solving the problem of the calculation of the discrete logarithm in the elliptic curve points group and also on the security of the hash function used.
The hash function calculation algorithm is defined in GOST R 34.11 2012
The digital signature scheme parameters needed for signature generation and verification are defined in Section 5.2.
This standard provides the opportunity to select one of two options for parameter requirements.
GOST R 34.10 2012 does not determine the process for generating the parameters needed for the digital signature scheme.
Possible sets of these parameters are defined, for example, in [RFC4357].
The digital signature represented as a binary vector of a 512  or 1024 bit length must be calculated using a definite set of rules, as stated in Section 6.1.
The digital signature of the received message is accepted or denied in accordance with the set of rules, as stated in Section 6.2.
To define a digital signature scheme, it is necessary to describe basic mathematical objects used in the signature generation and verification processes.
This section lays out basic mathematical definitions and requirements for the parameters of the digital signature scheme.
Mathematical Definitions Suppose a prime number p > 3 is given.
Then, an elliptic curve E, defined over a finite prime field GF(p), is the set of number pairs (x,y),
where x and y belong to Fp, satisfying the identity:
b^2 is not congruent to zero modulo p.
An invariant of the elliptic curve is the value J(E), satisfying the equality: 4   a^3 J(E)   1728
a, b are defined in the following way using the invariant J(E):
The pairs (x, y) satisfying the identity (1) are called "the elliptic curve E points";
x and y are called x  and y coordinates of the point, correspondingly.
We will denote elliptic curve points as Q(x, y) or just Q.  Two elliptic curve points are equal if their x  and y coordinates are equal.
For two arbitrary elliptic curve E points Q1 (x1, y1) and Q2 (x2, y2), we will consider several variants.
Suppose coordinates of points Q1 and Q2 satisfy the condition x1 /  x2.
In this case, their sum is defined as a point Q3 (x3, y3), with coordinates defined by congruencies:   x3
If x1   x2 and y1   y2 /  0, then we will define point Q3 coordinates in the following way:   x3
y1 (mod p), 3   x1^
If x1   x2 and y1    y2 (mod p), then the sum of points Q1 and Q2 is called a zero point O, without determination of its x  and y  coordinates.
In this case, point Q2 is called a negative of point Q1.
For the zero point, the equalities hold: O   Q   Q
For m, the following inequalities hold: p
< m  < p   1   2
The point Q is called "a point of multiplicity k", or just "a multiple point of the elliptic curve E", if for some point P, the following equality holds:
The digital signature parameters are:  prime number p is an elliptic curve modulus.
elliptic curve E, defined by its invariant J(E) or by coefficients a, b belonging to GF(p).
integer m is an elliptic curve E points group order.
254 < q < 2^256 or 2^
508 < q < 2
point P /  O of an elliptic curve E, with coordinates (
x p, y p), satisfying the equality q
P   O.  hash function h(.):V all   V l, which maps the messages represented as binary vectors of arbitrary finite length onto binary vectors of an l bit length.
The hash function is defined in GOST R 34.11 2012
If 2^254 < q < 2^256, then l   256.
If 2^508 < q < 2^512, then l   512.
Every user of the digital signature scheme must have its personal keys:  signature key, which is an integer d, satisfying the inequality 0 < d < q;  verification key, which is an elliptic curve point Q with coordinates (x q, y q), satisfying the equality d
The previously introduced digital signature parameters must satisfy the following requirements:  it is necessary that the condition p^t /  1 (mod q) holds for all integers
254 < q < 2^256, or B
To determine the digital signature generation and verification processes, it is necessary to map the set of integers onto the set of binary vectors of an l bit length.
Consider the following binary vector of an l bit length where low  order bits are placed on the right, and high order ones are placed on the left:
The number alpha belonging to Z is mapped onto the binary vector h, if the equality holds: alpha   alpha[0] 2^0
For two binary vectors H1 and H2:
(13) that is a binary vector of 2 l bit length, consisting of coefficients of the vectors H1 and H2.
On the other hand, the introduced formulae define a way to divide a binary vector H of 2 l bit length into two binary vectors of l bit length, where H is the concatenation of the two.
In this section, the digital signature generation and verification processes of a user's message are defined.
To realize the processes, it is necessary that all users know the digital signature scheme parameters, which satisfy the requirements of Section 5.2.
Besides, every user must have the signature key d and the verification key Q(x q, y q), which also must satisfy the requirements of Section 5.2. 6.1.
It is necessary to perform the following actions (steps) to obtain the digital signature for the message M belonging to V all.
This is Algorithm I. Step 1.
If e   0, then assign e   1.
Calculate the elliptic curve point
If r   0, return to step 3.
If s   0, return to Step 3.
Calculate the binary vectors R and S, corresponding to r and s, and determine the digital signature zeta
(R    S) as a concatenation of these two binary vectors.
The initial data of this process are the signature key d and the message M to be signed.
The output result is the digital signature zeta.
To verify the digital signature for the received message M, it is necessary to perform the following actions (steps).
Calculate the integers r and s using the received signature zeta.
If the inequalities 0 < r < q, 0 < s < q hold, go to the next step.
Otherwise, the signature is invalid.
Calculate the hash code of the received message M: H   h(M)
If e   0, then assign e   1.
Calculate the value: v   e^( 1) (mod q)
z1   s   v (mod q), z2    r   v (mod q)
Calculate the elliptic curve point
If the equality R   r holds, then the signature is accepted.
Otherwise, the signature is invalid.
The input data of the process are the signed message M, the digital signature zeta, and the verification key Q.
The output result is the witness of the signature validity or invalidity.
Test Examples (Appendix to GOST R 34.10 2012)
This section is included in GOST R 34.10 2012 as a reference appendix but is not officially mentioned as a part of the standard.
The values given here for the parameters p, a, b, m, q, P, the signature key d, and the verification key Q are recommended only for testing the correctness of actual realizations of the algorithms described in GOST R 34.10 2012.
All numerical values are introduced in decimal and hexadecimal notations.
The numbers beginning with 0x are in hexadecimal notation.
For example, the notation: 12345\\ 67890 0x499602D2 represents 1234567890 in decimal and hexadecimal number systems, respectively.
The Digital Signature Scheme Parameters
The following parameters must be used for digital signature generation and verification (see Section 5.2).
The following value is assigned to parameter p in this example: p
57896044618658097711785492504343953926\\ 634992332820282019728792003956564821041 p   0x8000000000000000000000000000\\ 000000000000000000000000000000000431
Elliptic Curve Coefficients Parameters a and b
take the following values in this example: a   7
942111794451039583252968842033849580414 b   0x5FBFF498AA938CE739B8E022FBAFEF40563\\ F6E6A3472FC2A514C0CE9DAE23B7E 7.1.3.
Elliptic Curve Points Group Order Parameter m takes the following value in this example: m   5789604461865809771178549250434395392\\ 7082934583725450622380973592137631069619
Order of Cyclic Subgroup of Elliptic Curve Points Group Parameter q takes the following value in this example:
q   5789604461865809771178549250434395392\\ 7082934583725450622380973592137631069619 q   0x80000000000000000000000000000001\\ 50FE8A1892976154C59CFC193ACCF5B3
Elliptic Curve Point Coordinates Point P coordinates take the following values in this example:
It is supposed, in this example, that the user has the following signature key d:
It is supposed, in this example, that the user has the verification key Q with the following coordinate values:
Digital Signature Process (Algorithm I) Suppose that after Steps 1 3 in Algorithm I (Section 6.1) are performed, the following numerical values are obtained: e
And the multiple point C
0x489C375A9941A3049E33B34361DD\\ 204172AD98C3E5916DE27695D22A61FAE46E Parameter r   x C (mod q) takes the value: r
A41974053554A42767B83AD043FD39DC0493 Parameter s   (r   d
k   e)(mod q) takes the value:
Verification Process of Digital Signature (Algorithm II) Suppose that after Steps 1 3 in Algorithm II (Section 6.2) are performed, the following numerical value is obtained: e
And the parameter v   e^( 1) (mod q) takes the value:
v (mod q) and z2    r   v (mod q) take the values: z1
3284253527868466347709466532251708450\\ 6804721032454543268132854556539274060910 y[C]   0x489C375A9941A3049E33B34361DD\\ 204172AD98C3E5916DE27695D22A61FAE46E
Then the parameter R   x C (mod q) takes the value:
R   2970098091581795287437120498393825699\\ 0422752107994319651632687982059210933395 R   0x41AA28D2F1AB148280CD9ED56FED\\
A41974053554A42767B83AD043FD39DC0493 Since the equality R   r holds, the digital signature is accepted.
This entire document is about security considerations.
