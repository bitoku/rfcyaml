- title: __initial_text__
  contents:
  - '    Definitions of Managed Objects for IEEE 802.12 Repeater Devices

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo defines a portion of the Management Information Base (MIB)\n\
    \   for use with network management protocols in TCP/IP-based internets.\n   In\
    \ particular, it defines objects for managing network repeaters\n   based on IEEE\
    \ 802.12.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  The SNMP Network Management Framework ......................\
    \    2\n   1.1.  Object Definitions .......................................  \
    \  2\n   2.  Overview ...................................................    2\n\
    \   2.1.  Repeater Management Model ................................    3\n  \
    \ 2.2.  MAC Addresses ............................................    4\n   2.3.\
    \  Master Mode and Slave Mode ...............................    4\n   2.4.  IEEE\
    \ 802.12 Training Frames ..............................    4\n   2.5.  Structure\
    \ of the MIB .....................................    6\n   2.5.1.  Basic Definitions\
    \ ......................................    7\n   2.5.2.  Monitor Definitions\
    \ ....................................    7\n   2.5.3.  Address Tracking Definitions\
    \ ...........................    7\n   2.6.  Relationship to other MIBs ...............................\
    \    7\n   2.6.1.  Relationship to MIB-II .................................  \
    \  7\n   2.6.1.1.  Relationship to the 'system' group ...................    7\n\
    \   2.6.1.2.  Relationship to the 'interfaces' group ...............    8\n  \
    \ 2.6.2.  Relationship to the 802.3 Repeater MIB .................    8\n   2.7.\
    \  Mapping of IEEE 802.12 Managed Objects ...................    9\n   3.  Definitions\
    \ ................................................   12\n   4.  Acknowledgements\
    \ ...........................................   53\n   5.  References .................................................\
    \   53\n   6.  Security Considerations ....................................  \
    \ 54\n   7.  Author's Address ...........................................   55\n\
    \   8.  Full Copyright Statement ...................................   56\n"
- title: 1.  The SNMP Network Management Framework
  contents:
  - "1.  The SNMP Network Management Framework\n   The SNMP Network Management Framework\
    \ consists of several components.\n   For the purpose of this specification, the\
    \ applicable components of\n   the Framework are the SMI and related documents\
    \ [2, 3, 4], which\n   define the mechanisms used for describing and naming objects\
    \ for the\n   purpose of management.\n   The Framework permits new objects to\
    \ be defined for the purpose of\n   experimentation and evaluation.\n"
- title: 1.1.  Object Definitions
  contents:
  - "1.1.  Object Definitions\n   Managed objects are accessed via a virtual information\
    \ store, termed\n   the Management Information Base (MIB).  Objects in the MIB\
    \ are\n   defined using the subset of Abstract Syntax Notation One (ASN.1) [1]\n\
    \   defined in the SMI [2].  In particular, each object type is named by\n   an\
    \ OBJECT IDENTIFIER, an administratively assigned name.  The object\n   type together\
    \ with an object instance serves to uniquely identify a\n   specific instantiation\
    \ of the object.  For human convenience, we\n   often use a textual string, termed\
    \ the descriptor, to refer to the\n   object type.\n"
- title: 2.  Overview
  contents:
  - "2.  Overview\n   Instances of these object types represent attributes of an IEEE\n\
    \   802.12 repeater, as defined by Section 12, \"RMAC Protocol\" in IEEE\n   Standard\
    \ 802.12-1995 [6].\n   The definitions presented here are based on Section 13,\
    \ \"Layer\n   management functions and services\", and Annex C, \"GDMO Specifications\n\
    \   for Demand Priority Managed Objects\" of IEEE Standard 802.12-1995\n   [6].\n\
    \   Implementors of these MIB objects should note that the IEEE document\n   explicitly\
    \ describes (in the form of Pascal pseudocode) when, where,\n   and how various\
    \ repeater attributes are measured.  The IEEE document\n   also describes the\
    \ effects of repeater actions that may be invoked by\n   manipulating instances\
    \ of the MIB objects defined here.\n   The counters in this document are defined\
    \ to be the same as those\n   counters in IEEE Standard 802.12-1995, with the\
    \ intention that the\n   same instrumentation can be used to implement both the\
    \ IEEE and IETF\n   management standards.\n"
- title: 2.1.  Repeater Management Model
  contents:
  - "2.1.  Repeater Management Model\n   The model used in the design of this MIB\
    \ allows for a managed system\n   to contain one or more managed 802.12 repeaters,\
    \ and one or more\n   managed 802.12 repeater ports.\n   A repeater port may be\
    \ thought of as a source of traffic into a\n   repeater in the system.  The vgRptrBasicPortTable\
    \ contains entries\n   for each physical repeater port in the managed system.\
    \  An\n   implementor may choose to separate these ports into \"groups\".  For\n\
    \   example, a group may be used to represent a field-replaceable unit,\n   so\
    \ that the port numbering may match the numbering in the hardware\n   implementation.\
    \  Note that this group mapping is recommended but\n   optional.  An implementor\
    \ may choose to put all of the system's ports\n   into a single group, or to divide\
    \ the ports into groups that do not\n   match physical divisions.  Each group\
    \ within the system is uniquely\n   identified by a group number.  Each port within\
    \ a system is uniquely\n   identified by a combination of group number and port\
    \ number.  The\n   method of numbering groups and ports is implementation-specific.\n\
    \   Both groups and ports may be sparsely numbered.\n   In addition to the externally\
    \ visible ports, some implementations may\n   have internal ports that are not\
    \ obvious to the end-user but are\n   nevertheless sources of traffic into the\
    \ repeater system.  Examples\n   include internal management ports, through which\
    \ an agent\n   communicates, and ports connecting to a backplane internal to the\n\
    \   implementation.  It is the decision of the implementor to select the\n   appropriate\
    \ group(s) in which to place internal ports.\n   Managed repeaters in the system\
    \ are represented by entries in the\n   vgRptrInfoTable.  There may be multiple\
    \ repeaters in the managed\n   system.  They are uniquely identified by a repeater\
    \ number.  The\n   method of numbering repeaters is implementation-specific. \
    \ Each port\n   will either be associated with one of the repeaters, or isolated\
    \ (a\n   so-called \"trivial\" repeater).  The set of ports associated with a\n\
    \   single repeater will be in the same contention domain, and will be\n   participating\
    \ in the same instance of the Demand Priority Access\n   Method protocol.  The\
    \ mapping of ports to repeaters may be static or\n   dynamic.  A column in the\
    \ vgRptrBasicPortTable,\n   vgRptrPortRptrInfoIndex, indicates the repeater that\
    \ the port is\n   currently associated with.  The method for assigning a port\
    \ to a\n   repeater is implementation-specific.\n"
- title: 2.2.  MAC Addresses
  contents:
  - "2.2.  MAC Addresses\n   All representations of MAC addresses in this MIB module\
    \ are in\n   \"canonical\" order defined by 802.1a, i.e., as if it were transmitted\n\
    \   least significant bit first.  This is true even if the repeater is\n   operating\
    \ in token ring framing mode, which requires MAC addresses to\n   be transmitted\
    \ most significant bit first.\n"
- title: 2.3.  Master Mode and Slave Mode
  contents:
  - "2.3.  Master Mode and Slave Mode\n   In an IEEE 802.12 network, \"master\" devices\
    \ act as network\n   controllers to decide when to grant requesting end-nodes\
    \ permission\n   to transmit.  These master devices may be repeaters, or other\
    \ active\n   controller devices such as switches.\n   Devices which do not act\
    \ as network controllers, such as end-nodes or\n   passive switches, are considered\
    \ to be operating in \"slave\" mode.\n   An 802.12 repeater always acts in \"\
    master\" mode on its local ports,\n   which may connect to end nodes, switch or\
    \ other device ports acting\n   in \"slave\" mode, or lower-level repeaters in\
    \ a cascade.  It acts in\n   \"slave\" mode on cascade ports, which may connect\
    \ to an upper-level\n   repeater in a cascade, or to switch or other device ports\
    \ operating\n   in \"master\" mode.\n"
- title: 2.4.  IEEE 802.12 Training Frames
  contents:
  - "2.4.  IEEE 802.12 Training Frames\n   Training frames are special MAC frames\
    \ that are used only during link\n   initialization.  Training frames are initially\
    \ constructed by the\n   device at the \"lower\" end of a link, which is the slave\
    \ mode device\n   for the link.  The training frame format is as follows:\n  \
    \     +----+----+------------+--------------+----------+-----+\n       | DA |\
    \ SA | Req Config | Allow Config |   Data   | FCS |\n       +----+----+------------+--------------+----------+-----+\n\
    \               DA = destination address (six octets)\n               SA = source\
    \ address (six octets)\n               Req Config = requested configuration (2\
    \ octets)\n               Allow Config = allowed configuration (2 octets)\n  \
    \             Data = data (594 to 675 octets)\n               FCS = frame check\
    \ sequence (4 octets)\n   Training frames are always sent with a null destination\
    \ address.  To\n   pass training, an end node must use its source address in the\
    \ source\n   address field of the training frame.  A repeater may use a non-null\n\
    \   source address if it has one, or it may use a null source address.\n   The\
    \ requested configuration field allows the slave mode device to\n   inform the\
    \ master mode device about itself and to request\n   configuration options.  The\
    \ training response frame from the master\n   mode device contains the slave mode\
    \ device's requested configuration\n   from the training request frame.  The currently\
    \ defined format of the\n   requested configuration field as defined in the IEEE\
    \ Standard\n   802.12-1995 standard is shown below.  Please refer to the most\n\
    \   current version of the IEEE document for a more up to date\n   description\
    \ of this field.  In particular, the reserved bits may be\n   used in later versions\
    \ of the standard.\n       First Octet:       Second Octet:\n        7 6 5 4 3\
    \ 2 1 0    7 6 5 4 3 2 1 0\n       +-+-+-+-+-+-+-+-+  +-+-+-+-+-+-+-+-+\n    \
    \   |v|v|v|r|r|r|r|r|  |r|r|r|F|F|P|P|R|\n       +-+-+-+-+-+-+-+-+  +-+-+-+-+-+-+-+-+\n\
    \       vvv: The version of the 802.12 training protocol with which\n        \
    \    the training initiator is compliant.  The current version\n            is\
    \ 100.  Note that because of the different bit ordering\n            used in IEEE\
    \ and IETF documents, this value corresponds\n            to version 1.\n    \
    \   r:   Reserved bits (set to zero)\n       FF:  00 = frameType88023\n      \
    \      01 = frameType88025\n            10 = reserved\n            11 = frameTypeEither\n\
    \       PP:  00 = singleAddressMode\n            01 = promiscuousMode\n      \
    \      10 = reserved\n            11 = reserved\n       R:   0  = the training\
    \ initiator is an end node\n            1  = the training initiator is a repeater\n\
    \   The allowed configuration field allows the master mode device to\n   respond\
    \ with the allowed configuration.  The slave mode device sets\n   the contents\
    \ of this field to all zero bits.  The master mode device\n   sets the allowed\
    \ configuration field as follows:\n       First Octet:       Second Octet:\n \
    \       7 6 5 4 3 2 1 0    7 6 5 4 3 2 1 0\n       +-+-+-+-+-+-+-+-+  +-+-+-+-+-+-+-+-+\n\
    \       |v|v|v|D|C|N|r|r|  |r|r|r|F|F|P|P|R|\n       +-+-+-+-+-+-+-+-+  +-+-+-+-+-+-+-+-+\n\
    \       vvv: The version of the 802.12 training protocol with which\n        \
    \    the training responder is compliant.  The current version\n            is\
    \ 100.  Note that because of the different bit ordering\n            used in IEEE\
    \ and IETF documents, this value corresponds\n            to version 1.\n    \
    \   D:   0  = No duplicate address has been detected.\n            1  = Duplicate\
    \ address has been detected.\n       C:   0  = The requested configuration is\
    \ compatible with the\n                 network and the attached port.\n     \
    \       1  = The requested configuration is not compatible with\n            \
    \     the network and/or the attached port.  In this case,\n                 the\
    \ FF, PP, and R bits indicate a configuration that\n                 would be\
    \ allowed.\n       N:   0  = Access will be allowed, providing the configuration\n\
    \                 is compatible (C = 0).\n            1  = Access is not granted\
    \ because of security\n                 restrictions.\n       r:   Reserved bits\
    \ (set to zero).\n       FF:  00 = frameType88023 will be used.\n            01\
    \ = frameType88025 will be used.\n            10 = reserved\n            11 =\
    \ reserved\n       PP:  00 = singleAddressMode\n            01 = promiscuousMode\n\
    \            10 = reserved\n            11 = reserved\n       R:   0  = Requested\
    \ access as an end node is allowed.\n            1  = Requested access as a repeater\
    \ is allowed.\n   Again, note that the most recent version of the IEEE 802.12\
    \ standard\n   should be consulted for the most up to date definition of the\n\
    \   requested configuration and allowed configuration fields.\n   The data field\
    \ contains between 594 and 675 octets and is filled in\n   by the training initiator.\
    \  The first 55 octets may be used for\n   vendor specific protocol information.\
    \  The remaining octets are all\n   zeros.  The length of the training frame combined\
    \ with the\n   requirement that 24 consecutive training frames be exchanged without\n\
    \   error to complete training ensures that marginal links will not\n   complete\
    \ training.\n"
- title: 2.5.  Structure of the MIB
  contents:
  - "2.5.  Structure of the MIB\n   Objects in this MIB are arranged into OID subtrees,\
    \ each of which\n   contains a set of related objects within a broad functional\
    \ category.\n   These subtrees are intended for organizational convenience ONLY,\
    \ and\n   have no relation to the conformance groups defined later in the\n  \
    \ document.\n"
- title: 2.5.1.  Basic Definitions
  contents:
  - "2.5.1.  Basic Definitions\n   The basic definitions include objects for managing\
    \ the basic status\n   and control parameters for each repeater within the managed\
    \ system,\n   for the port groups within the managed system, and for the individual\n\
    \   ports themselves.\n"
- title: 2.5.2.  Monitor Definitions
  contents:
  - "2.5.2.  Monitor Definitions\n   The monitor definitions include monitoring statistics\
    \ for each\n   repeater within the system and for individual ports.\n"
- title: 2.5.3.  Address Tracking Definitions
  contents:
  - "2.5.3.  Address Tracking Definitions\n   This collection includes objects for\
    \ tracking the MAC addresses of\n   the DTEs attached to the ports within the\
    \ system.\n   Note that this MIB also includes by reference a collection of objects\n\
    \   from the 802.3 Repeater MIB which may be used for mapping the\n   topology\
    \ of a network.  These definitions are based on a technology\n   which has been\
    \ patented by Hewlett-Packard Company (HP).  HP has\n   granted rights to this\
    \ technology to implementors of this MIB.  See\n   [8] and [9] for details.\n"
- title: 2.6.  Relationship to other MIBs
  contents:
  - '2.6.  Relationship to other MIBs

    '
- title: 2.6.1.  Relationship to MIB-II
  contents:
  - "2.6.1.  Relationship to MIB-II\n   It is assumed that a repeater implementing\
    \ this MIB will also\n   implement (at least) the 'system' group defined in MIB-II\
    \ [5].\n"
- title: 2.6.1.1.  Relationship to the 'system' group
  contents:
  - "2.6.1.1.  Relationship to the 'system' group\n   In MIB-II, the 'system' group\
    \ is defined as being mandatory for all\n   systems such that each managed entity\
    \ contains one instance of each\n   object in the 'system' group.  Thus, those\
    \ objects apply to the\n   entity even if the entity's sole functionality is management\
    \ of\n   repeaters.\n   Note that all of the managed repeaters (i.e. entries in\
    \ the\n   vgRptrInfoTable) will normally exist within a single naming scope.\n\
    \   Therefore, there will normally only be a single instance of each of\n   the\
    \ objects in the system group for the entire managed repeater\n   system regardless\
    \ of how many managed repeaters there are in the\n   system.\n"
- title: 2.6.1.2.  Relationship to the 'interfaces' group
  contents:
  - "2.6.1.2.  Relationship to the 'interfaces' group\n   In MIB-II, the 'interfaces'\
    \ group is defined as being mandatory for\n   all systems and contains information\
    \ on an entity's interfaces, where\n   each interface is thought of as being attached\
    \ to a 'subnetwork'.\n   (Note that this term is not to be confused with 'subnet'\
    \ which refers\n   to an addressing partitioning scheme used in the Internet suite\
    \ of\n   protocols.)\n   This Repeater MIB uses the notion of ports on a repeater.\
    \  The\n   concept of a MIB-II interface has NO specific relationship to a\n \
    \  repeater's port.  Therefore, the 'interfaces' group applies only to\n   the\
    \ one (or more) network interfaces on which the entity managing the\n   repeater\
    \ sends and receives management protocol operations, and does\n   not apply to\
    \ the repeater's ports.\n   This is consistent with the physical-layer nature\
    \ of a repeater.  An\n   802.12 repeater has an RMAC implementation, which acts\
    \ as the\n   repeater end of the Demand Priority Access Method, but does not\n\
    \   contain a DTE MAC implementation, and does not pass packets up to\n   higher-level\
    \ protocol entities for processing.\n   (When a network management entity is observing\
    \ a repeater, it may\n   appear as though the repeater is passing packets to a\
    \ higher-level\n   protocol entity.  However, this is only a means of implementing\n\
    \   management, and this passing of management information is not part of\n  \
    \ the repeater functionality.)\n"
- title: 2.6.2.  Relationship to the 802.3 Repeater MIB
  contents:
  - "2.6.2.  Relationship to the 802.3 Repeater MIB\n   An IEEE 802.12 repeater can\
    \ be configured to operate in either\n   ethernet or token ring framing mode.\
    \  This only affects the frame\n   format and address bit order of the frames\
    \ on the wire.  An 802.12\n   network does not use the media access protocol for\
    \ either ethernet or\n   token ring.  Instead, IEEE 802.12 defines its own media\
    \ access\n   protocol, the Demand Priority Access Method (DPAM).\n   There is\
    \ an existing standards-track MIB module for instrumenting\n   IEEE 802.3 repeaters\
    \ [7].  That MIB module is designed to instrument\n   the operation of the repeater\
    \ in a network implementing the 802.3\n   media access protocol.  Therefore, much\
    \ of that MIB does not apply to\n   802.12 repeaters.\n   However, the 802.3 Repeater\
    \ MIB also contains a collection of objects\n   that may be used to map the topology\
    \ of a network.  These objects are\n   contained in a separable OBJECT-GROUP,\
    \ are not 802.3-specific, and\n   are considered useful for 802.12 repeaters.\
    \  In addition, the layer\n   management clause of the IEEE 802.12 specification\
    \ includes similar\n   functionality.  Therefore, vendors of agents for 802.12\
    \ repeaters are\n   encouraged to implement the snmpRptrGrpRptrAddrSearch OBJECT-GROUP\n\
    \   defined in the 802.3 Repeater MIB.\n"
- title: 2.7.  Mapping of IEEE 802.12 Managed Objects
  contents:
  - "2.7.  Mapping of IEEE 802.12 Managed Objects\n   IEEE 802.12 Managed Object \
    \       Corresponding SNMP Object\n   oRepeater\n     .aCurrentFramingType   \
    \         vgRptrInfoCurrentFramingType\n     .aDesiredFramingType            vgRptrInfoDesiredFramingType\n\
    \     .aFramingCapability             vgRptrInfoFramingCapability\n     .aMACAddress\
    \                    vgRptrInfoMACAddress\n     .aRepeaterHealthState        \
    \   vgRptrInfoOperStatus\n     .aRepeaterID                    vgRptrInfoIndex\n\
    \     .aRepeaterSearchAddress         SNMP-REPEATER-MIB -\n                  \
    \                       rptrAddrSearchAddress\n     .aRepeaterSearchGroup    \
    \       SNMP-REPEATER-MIB -\n                                         rptrAddrSearchGroup\n\
    \     .aRepeaterSearchPort            SNMP-REPEATER-MIB -\n                  \
    \                       rptrAddrSearchPort\n     .aRepeaterSearchState       \
    \    SNMP-REPEATER-MIB -\n                                         rptrAddrSearchState\n\
    \     .aRMACVersion                   vgRptrInfoTrainingVersion\n     .acRepeaterSearchAddress\
    \        SNMP-REPEATER-MIB -\n                                         rptrAddrSearchAddress\n\
    \     .acResetRepeater                vgRptrInfoReset\n     .nRepeaterHealth \
    \               vgRptrHealth\n     .nRepeaterReset                 vgRptrResetEvent\n\
    \   oGroup\n     .aGroupCablesBundled            vgRptrGroupCablesBundled\n  \
    \   .aGroupID                       vgRptrGroupIndex\n     .aGroupPortCapacity\
    \             vgRptrGroupPortCapacity\n   oPort\n     .aAllowableTrainingType\
    \         vgRptrPortAllowedTrainType\n     .aBroadcastFramesReceived       vgRptrPortBroadcastFrames\n\
    \     .aCentralMgmtDetectedDupAddr    vgRptrMgrDetectedDupAddress\n     .aDataErrorFramesReceived\
    \       vgRptrPortDataErrorFrames\n     .aHighPriorityFramesReceived    vgRptrPortHighPriorityFrames\n\
    \     .aHighPriorityOctetsReceived    vgRptrPortHCHighPriorityOctets, or\n   \
    \                                  vgRptrPortHighPriorityOctets and\n        \
    \                             vgRptrPortHighPriOctetRollovers\n     .aIPMFramesReceived\
    \             vgRptrPortIPMFrames\n     .aLastTrainedAddress            vgRptrAddrLastTrainedAddress\n\
    \     .aLastTrainingConfig            vgRptrPortLastTrainConfig\n     .aLocalRptrDetectedDupAddr\
    \      vgRptrRptrDetectedDupAddress\n     .aMulticastFramesReceived       vgRptrPortMulticastFrames\n\
    \     .aNormalPriorityFramesReceived  vgRptrPortNormPriorityFrames\n     .aNormalPriorityOctetsReceived\
    \  vgRptrPortHCNormPriorityOctets, or\n                                     vgRptrPortNormPriorityOctets\
    \ and\n                                     vgRptrPortNormPriOctetRollovers\n\
    \     .aNullAddressedFramesReceived   vgRptrPortNullAddressedFrames\n     .aOctetsInUnreadableFramesRcvd\
    \  vgRptrPortHCUnreadableOctets, or\n                                     vgRptrPortUnreadableOctets\
    \ and\n                                     vgRptrPortUnreadOctetRollovers\n \
    \    .aOversizeFramesReceived        vgRptrPortOversizeFrames\n     .aPortAdministrativeState\
    \       vgRptrPortAdminStatus\n     .aPortID                        vgRptrPortIndex\n\
    \     .aPortStatus                    vgRptrPortOperStatus\n     .aPortType  \
    \                    vgRptrPortType\n     .aPriorityEnable                vgRptrPortPriorityEnable\n\
    \     .aPriorityPromotions            vgRptrPortPriorityPromotions\n     .aReadableFramesReceived\
    \        vgRptrPortReadableFrames\n     .aReadableOctetsReceived        vgRptrPortHCReadableOctets,\
    \ or\n                                     vgRptrPortReadableOctets and\n    \
    \                                 vgRptrPortReadOctetRollovers\n     .aSupportedCascadeMode\
    \          vgRptrPortSupportedCascadeMode\n     .aSupportedPromiscMode       \
    \   vgRptrPortSupportedPromiscMode\n     .aTrainedAddressChanges         vgRptrAddrTrainedAddressChanges\n\
    \     .aTrainingResult                vgRptrPortTrainingResult\n     .aTransitionsIntoTraining\
    \       vgRptrPortTransitionToTrainings\n     .acPortAdministrativeControl   \
    \ vgRptrPortAdminStatus\n   The following IEEE 802.12 managed objects have not\
    \ been included in\n   the 802.12 Repeater MIB for the indicated reasons.\n  \
    \ IEEE 802.12 Managed Object        Disposition\n   oRepeater\n     .aGroupMap\
    \                      Can be determined by GetNext sweep\n                  \
    \                   of vgRptrBasicGroupTable\n     .aRepeaterGroupCapacity   \
    \      Meaning is unclear in many\n                                     repeater\
    \ implementations.  For\n                                     example, some cards\
    \ may have\n                                     daughter cards which make group\n\
    \                                     capacity change depending on the\n     \
    \                                cards installed.  Meaning is also\n         \
    \                            unclear in a stackable\n                        \
    \             implementation.  Also, since\n                                 \
    \    groups are not required to be\n                                     numbered\
    \ from 1..capacity, but may\n                                     be computed\
    \ algorithmically or\n                                     related to Entity MIB\
    \ indices,\n                                     this object was not considered\n\
    \                                     useful.\n     .aRepeaterHealthData     \
    \       Since the data is implementation\n                                   \
    \  specific and non-interoperable,\n                                     it was\
    \ not considered useful.\n     .aRepeaterHealthText            Implementation\
    \ experience with\n                                     similar object in 802.3\
    \ Rptr MIB\n                                     indicated it was not useful.\n\
    \     .acExecuteNonDisruptiveSelfTest Implementation experience with\n       \
    \                              similar object in 802.3 Rptr MIB\n            \
    \                         indicated it was not useful.\n     .nGroupMapChange\
    \                Since aGroupMap was not included,\n                         \
    \            a notification of a change in that\n                            \
    \         object was not needed.\n   oGroup\n     .aPortMap                  \
    \     Can be determined by GetNext sweep\n                                   \
    \  of vgRptrBasicPortTable\n     .nPortMapChange                 Since aPortMap\
    \ was not included,\n                                     a notification of a\
    \ change in that\n                                     object was not needed.\n\
    \   oPort\n     .aMediaType                     This object is a function of the\n\
    \                                     Physical Media Dependent (PMD)\n       \
    \                              layer, which is defined\n                     \
    \                differently for each type of\n                              \
    \       network. For an 802.3 network,\n                                     .aMediaType\
    \ corresponds to the PMD\n                                     definitions in\
    \ the 802.3 MAU MIB.\n                                     For management of an\
    \ 802.12\n                                     network, mapping of this object\
    \ is\n                                     deferred to future work on an\n   \
    \                                  802.12 PMD MIB which will include\n       \
    \                              both repeater and interface PMD\n             \
    \                        information and redundant link\n                    \
    \                 support.\n"
- title: 3.  Definitions
  contents:
  - "3.  Definitions\n      DOT12-RPTR-MIB DEFINITIONS ::= BEGIN\n          IMPORTS\n\
    \              mib-2, Integer32, Counter32, Counter64,\n              OBJECT-TYPE,\
    \ MODULE-IDENTITY, NOTIFICATION-TYPE\n                  FROM SNMPv2-SMI\n    \
    \          MacAddress, TruthValue, TimeStamp\n                  FROM SNMPv2-TC\n\
    \              MODULE-COMPLIANCE, OBJECT-GROUP, NOTIFICATION-GROUP\n         \
    \         FROM SNMPv2-CONF;\n          vgRptrMIB MODULE-IDENTITY\n           \
    \    LAST-UPDATED \"9705192256Z\"  -- May 19, 1997\n               ORGANIZATION\
    \ \"IETF 100VG-AnyLAN Working Group\"\n               CONTACT-INFO\n         \
    \              \"WG E-mail: vgmib@hprnd.rose.hp.com\n                        \
    \    Chair: Jeff Johnson\n                           Postal: RedBack Networks\n\
    \                                   2570 North First Street, Suite 410\n     \
    \                              San Jose, CA  95131\n                         \
    \     Tel: +1 408 571 2699\n                              Fax: +1 408 571 2698\n\
    \                           E-mail: jeff@redbacknetworks.com\n               \
    \            Editor: John Flick\n                           Postal: Hewlett Packard\
    \ Company\n                                   8000 Foothills Blvd. M/S 5556\n\
    \                                   Roseville, CA 95747-5556\n               \
    \               Tel: +1 916 785 4018\n                              Fax: +1 916\
    \ 785 3583\n                           E-mail: johnf@hprnd.rose.hp.com\"\n   \
    \            DESCRIPTION\n                       \"This MIB module describes objects\
    \ for managing\n                       IEEE 802.12 repeaters.\"\n            \
    \   ::= { mib-2 53 }\n          vgRptrObjects      OBJECT IDENTIFIER ::= { vgRptrMIB\
    \ 1 }\n          vgRptrBasic        OBJECT IDENTIFIER ::= { vgRptrObjects 1 }\n\
    \          vgRptrBasicRptr    OBJECT IDENTIFIER ::= { vgRptrBasic 1 }\n      \
    \    vgRptrInfoTable OBJECT-TYPE\n              SYNTAX     SEQUENCE OF VgRptrInfoEntry\n\
    \              MAX-ACCESS not-accessible\n              STATUS     current\n \
    \             DESCRIPTION\n                      \"A table of information about\
    \ each 802.12 repeater\n                      in the managed system.\"\n     \
    \         ::= { vgRptrBasicRptr 1 }\n          vgRptrInfoEntry OBJECT-TYPE\n \
    \             SYNTAX     VgRptrInfoEntry\n              MAX-ACCESS not-accessible\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"An entry in the table, containing information\n                    \
    \  about a single repeater.\"\n              INDEX      { vgRptrInfoIndex }\n\
    \              ::= { vgRptrInfoTable 1 }\n          VgRptrInfoEntry ::=\n    \
    \          SEQUENCE {\n                  vgRptrInfoIndex                 Integer32,\n\
    \                  vgRptrInfoMACAddress            MacAddress,\n             \
    \     vgRptrInfoCurrentFramingType    INTEGER,\n                  vgRptrInfoDesiredFramingType\
    \    INTEGER,\n                  vgRptrInfoFramingCapability     INTEGER,\n  \
    \                vgRptrInfoTrainingVersion       INTEGER,\n                  vgRptrInfoOperStatus\
    \            INTEGER,\n                  vgRptrInfoReset                 INTEGER,\n\
    \                  vgRptrInfoLastChange            TimeStamp\n              }\n\
    \          vgRptrInfoIndex OBJECT-TYPE\n              SYNTAX     Integer32 (1..2147483647)\n\
    \              MAX-ACCESS not-accessible\n              STATUS     current\n \
    \             DESCRIPTION\n                      \"A unique identifier for the\
    \ repeater for which\n                      this entry contains information. \
    \ The numbering\n                      scheme for repeaters is implementation\
    \ specific.\"\n              REFERENCE\n                      \"IEEE Standard\
    \ 802.12-1995, 13.2.4.2.1,\n                      aRepeaterID.\"\n           \
    \   ::= { vgRptrInfoEntry 1 }\n          vgRptrInfoMACAddress OBJECT-TYPE\n  \
    \            SYNTAX     MacAddress\n              MAX-ACCESS read-only\n     \
    \         STATUS     current\n              DESCRIPTION\n                    \
    \  \"The MAC address used by the repeater when it\n                      initiates\
    \ training on the uplink port.  Repeaters\n                      are allowed to\
    \ train with an assigned MAC address\n                      or a null (all zeroes)\
    \ MAC address.\"\n              REFERENCE\n                      \"IEEE Standard\
    \ 802.12-1995, 13.2.4.2.1,\n                      aMACAddress.\"\n           \
    \   ::= { vgRptrInfoEntry 2 }\n          vgRptrInfoCurrentFramingType OBJECT-TYPE\n\
    \              SYNTAX     INTEGER {\n                             frameType88023(1),\n\
    \                             frameType88025(2)\n                         }\n\
    \              MAX-ACCESS read-only\n              STATUS     current\n      \
    \        DESCRIPTION\n                      \"The type of framing (802.3 or 802.5)\
    \ currently\n                      in use by the repeater.\"\n              REFERENCE\n\
    \                      \"IEEE Standard 802.12-1995, 13.2.4.2.1,\n            \
    \          aCurrentFramingType.\"\n              ::= { vgRptrInfoEntry 3 }\n \
    \         vgRptrInfoDesiredFramingType OBJECT-TYPE\n              SYNTAX     INTEGER\
    \ {\n                             frameType88023(1),\n                       \
    \      frameType88025(2)\n                         }\n              MAX-ACCESS\
    \ read-write\n              STATUS     current\n              DESCRIPTION\n  \
    \                    \"The type of framing which will be used by the\n       \
    \               repeater after the next time it is reset.\n                  \
    \    The value of this object should be preserved\n                      across\
    \ repeater resets and power failures.\"\n              REFERENCE\n           \
    \           \"IEEE Standard 802.12-1995, 13.2.4.2.1,\n                      aDesiredFramingType.\"\
    \n              ::= { vgRptrInfoEntry 4 }\n          vgRptrInfoFramingCapability\
    \ OBJECT-TYPE\n              SYNTAX     INTEGER {\n                          \
    \   frameType88023(1),\n                             frameType88025(2),\n    \
    \                         frameTypeEither(3)\n                         }\n   \
    \           MAX-ACCESS read-only\n              STATUS     current\n         \
    \     DESCRIPTION\n                      \"The type of framing this repeater is\
    \ capable of\n                      supporting.\"\n              REFERENCE\n \
    \                     \"IEEE Standard 802.12-1995, 13.2.4.2.1,\n             \
    \         aFramingCapability.\"\n              ::= { vgRptrInfoEntry 5 }\n   \
    \       vgRptrInfoTrainingVersion OBJECT-TYPE\n              SYNTAX     INTEGER\
    \ (0..7)\n              MAX-ACCESS read-only\n              STATUS     current\n\
    \              DESCRIPTION\n                      \"The highest version bits (vvv\
    \ bits) supported by\n                      the repeater during training.\"\n\
    \              REFERENCE\n                      \"IEEE Standard 802.12-1995, 13.2.4.2.1,\n\
    \                      aRMACVersion.\"\n              ::= { vgRptrInfoEntry 6\
    \ }\n          vgRptrInfoOperStatus OBJECT-TYPE\n              SYNTAX     INTEGER\
    \ {\n                             other(1),\n                             ok(2),\n\
    \                             generalFailure(3)\n                         }\n\
    \              MAX-ACCESS read-only\n              STATUS     current\n      \
    \        DESCRIPTION\n                      \"The vgRptrInfoOperStatus object\
    \ indicates the\n                      operational state of the repeater.\"\n\
    \              REFERENCE\n                      \"IEEE Standard 802.12-1995, 13.2.4.2.1,\n\
    \                      aRepeaterHealthState.\"\n              ::= { vgRptrInfoEntry\
    \ 7 }\n          vgRptrInfoReset OBJECT-TYPE\n              SYNTAX     INTEGER\
    \ {\n                             noReset(1),\n                             reset(2)\n\
    \                         }\n              MAX-ACCESS read-write\n           \
    \   STATUS     current\n              DESCRIPTION\n                      \"Setting\
    \ this object to reset(2) causes the\n                      repeater to transition\
    \ to its initial state as\n                      specified in clause 12 [IEEE\
    \ Std 802.12].\n                      Setting this object to noReset(1) has no\
    \ effect.\n                      The agent will always return the value noReset(1)\n\
    \                      when this object is read.\n                      After\
    \ receiving a request to set this variable to\n                      reset(2),\
    \ the agent is allowed to delay the reset\n                      for a short period.\
    \  For example, the implementor\n                      may choose to delay the\
    \ reset long enough to\n                      allow the SNMP response to be transmitted.\
    \  In\n                      any event, the SNMP response must be transmitted.\n\
    \                      This action does not reset the management\n           \
    \           counters defined in this document nor does it\n                  \
    \    affect the vgRptrPortAdminStatus parameters.\n                      Included\
    \ in this action is the execution of a\n                      disruptive Self-Test\
    \ with the following\n                      characteristics:\n               \
    \           1) The nature of the tests is not specified.\n                   \
    \       2) The test resets the repeater but without\n                        \
    \     affecting configurable management\n                             information\
    \ about the repeater.\n                          3) Packets received during the\
    \ test may or\n                             may not be transferred.\n        \
    \                  4) The test does not interfere with\n                     \
    \        management functions.\n                      After performing this self-test,\
    \ the agent will\n                      update the repeater health information\
    \ (including\n                      vgRptrInfoOperStatus), and send a\n      \
    \                vgRptrResetEvent.\"\n              REFERENCE\n              \
    \        \"IEEE Standard 802.12-1995, 13.2.4.2.2,\n                      acResetRepeater.\"\
    \n              ::= { vgRptrInfoEntry 8 }\n          vgRptrInfoLastChange OBJECT-TYPE\n\
    \              SYNTAX     TimeStamp\n              MAX-ACCESS read-only\n    \
    \          STATUS     current\n              DESCRIPTION\n                   \
    \   \"The value of sysUpTime when any of the following\n                     \
    \ conditions occurred:\n                          1) agent cold- or warm-started;\n\
    \                          2) this instance of repeater was created\n        \
    \                     (such as when a device or module was\n                 \
    \            added to the system);\n                          3) a change in the\
    \ value of\n                             vgRptrInfoOperStatus;\n             \
    \             4) ports were added or removed as members of\n                 \
    \            the repeater; or\n                          5) any of the counters\
    \ associated with this\n                             repeater had a discontinuity.\"\
    \n              ::= { vgRptrInfoEntry 9 }\n          vgRptrBasicGroup  OBJECT\
    \ IDENTIFIER ::= { vgRptrBasic 2 }\n          vgRptrBasicGroupTable OBJECT-TYPE\n\
    \              SYNTAX     SEQUENCE OF VgRptrBasicGroupEntry\n              MAX-ACCESS\
    \ not-accessible\n              STATUS     current\n              DESCRIPTION\n\
    \                      \"A table containing information about groups of\n    \
    \                  ports.\"\n              ::= { vgRptrBasicGroup 1 }\n      \
    \    vgRptrBasicGroupEntry OBJECT-TYPE\n              SYNTAX     VgRptrBasicGroupEntry\n\
    \              MAX-ACCESS not-accessible\n              STATUS     current\n \
    \             DESCRIPTION\n                      \"An entry in the vgRptrBasicGroupTable,\
    \ containing\n                      information about a single group of ports.\"\
    \n              INDEX      { vgRptrGroupIndex }\n              ::= { vgRptrBasicGroupTable\
    \ 1 }\n          VgRptrBasicGroupEntry ::=\n              SEQUENCE {\n       \
    \           vgRptrGroupIndex                Integer32,\n                  vgRptrGroupObjectID\
    \             OBJECT IDENTIFIER,\n                  vgRptrGroupOperStatus    \
    \       INTEGER,\n                  vgRptrGroupPortCapacity         Integer32,\n\
    \                  vgRptrGroupCablesBundled        INTEGER\n              }\n\
    \          vgRptrGroupIndex OBJECT-TYPE\n              SYNTAX     Integer32 (1..2146483647)\n\
    \              MAX-ACCESS not-accessible\n              STATUS     current\n \
    \             DESCRIPTION\n                      \"This object identifies the\
    \ group within the\n                      system for which this entry contains\
    \ information.\n                      The numbering scheme for groups is implementation\n\
    \                      specific.\"\n              REFERENCE\n                \
    \      \"IEEE Standard 802.12-1995, 13.2.4.4.1,\n                      aGroupID.\"\
    \n              ::= { vgRptrBasicGroupEntry 1 }\n          vgRptrGroupObjectID\
    \ OBJECT-TYPE\n              SYNTAX     OBJECT IDENTIFIER\n              MAX-ACCESS\
    \ read-only\n              STATUS     current\n              DESCRIPTION\n   \
    \                   \"The vendor's authoritative identification of the\n     \
    \                 group.  This value may be allocated within the\n           \
    \           SMI enterprises subtree (1.3.6.1.4.1) and\n                      provides\
    \ a straight-forward and unambiguous means\n                      for determining\
    \ what kind of group is being\n                      managed.\n              \
    \        For example, this object could take the value\n                     \
    \ 1.3.6.1.4.1.4242.1.2.14 if vendor 'Flintstones,\n                      Inc.'\
    \ was assigned the subtree 1.3.6.1.4.1.4242,\n                      and had assigned\
    \ the identifier\n                      1.3.6.1.4.1.4242.1.2.14 to its 'Wilma\
    \ Flintstone\n                      6-Port Plug-in Module.'\"\n              ::=\
    \ { vgRptrBasicGroupEntry 2 }\n          vgRptrGroupOperStatus OBJECT-TYPE\n \
    \             SYNTAX     INTEGER {\n                             other(1),\n \
    \                            operational(2),\n                             malfunctioning(3),\n\
    \                             notPresent(4),\n                             underTest(5),\n\
    \                             resetInProgress(6)\n                         }\n\
    \              MAX-ACCESS read-only\n              STATUS     current\n      \
    \        DESCRIPTION\n                      \"An object that indicates the operational\
    \ status\n                      of the group.\n                      A status\
    \ of notPresent(4) indicates that the\n                      group is temporarily\
    \ or permanently physically\n                      and/or logically not a part\
    \ of the system.  It\n                      is an implementation-specific matter\
    \ as to\n                      whether the agent effectively removes notPresent\n\
    \                      entries from the table.\n                      A status\
    \ of operational(2) indicates that the\n                      group is functioning,\
    \ and a status of\n                      malfunctioning(3) indicates that the\
    \ group is\n                      malfunctioning in some way.\"\n            \
    \  ::= { vgRptrBasicGroupEntry 3 }\n          vgRptrGroupPortCapacity OBJECT-TYPE\n\
    \              SYNTAX     Integer32 (1..2146483647)\n              MAX-ACCESS\
    \ read-only\n              STATUS     current\n              DESCRIPTION\n   \
    \                   \"The vgRptrGroupPortCapacity is the number of\n         \
    \             ports that can be contained within the group.\n                \
    \      Valid range is 1-2147483647.  Within each group,\n                    \
    \  the ports are uniquely numbered in the range from\n                      1\
    \ to vgRptrGroupPortCapacity.\n                      Some ports may not be present\
    \ in the system, in\n                      which case the actual number of ports\
    \ present will\n                      be less than the value of vgRptrGroupPortCapacity.\n\
    \                      The number of ports present is never greater than\n   \
    \                   the value of vgRptrGroupPortCapacity.\n                  \
    \    Note:  In practice, this will generally be the\n                      number\
    \ of ports on a module, card, or board, and\n                      the port numbers\
    \ will correspond to numbers marked\n                      on the physical embodiment.\"\
    \n              REFERENCE\n                      \"IEEE Standard 802.12-1995,\
    \ 13.2.4.4.1,\n                      aGroupPortCapacity.\"\n              ::=\
    \ { vgRptrBasicGroupEntry 4 }\n          vgRptrGroupCablesBundled OBJECT-TYPE\n\
    \              SYNTAX     INTEGER {\n                             someCablesBundled(1),\n\
    \                             noCablesBundled(2)\n                         }\n\
    \              MAX-ACCESS read-write\n              STATUS     current\n     \
    \         DESCRIPTION\n                      \"This object is used to indicate\
    \ whether there are\n                      any four-pair UTP links connected to\
    \ this group\n                      that are contained in a cable bundle with\
    \ multiple\n                      four-pair groups (e.g. a 25-pair bundle).  Bundled\n\
    \                      cable may only be used for repeater-to-end node\n     \
    \                 links where the end node is not in promiscuous\n           \
    \           mode.\n                      When a broadcast or multicast packet\
    \ is received\n                      from a port on this group that is not a\n\
    \                      promiscuous or cascaded port, the packet will be\n    \
    \                  buffered completely before being repeated if\n            \
    \          this object is set to 'someCablesBundled(1)'.\n                   \
    \   When this object is equal to 'noCablesBundled(2)',\n                     \
    \ all packets received from ports on this group will\n                      be\
    \ repeated as the frame is being received.\n                      Note that the\
    \ value 'someCablesBundled(1)' will\n                      work in the vast majority\
    \ of all installations,\n                      regardless of whether or not any\
    \ cables are\n                      physically in a bundle, since packets received\n\
    \                      from promiscuous and cascaded ports automatically\n   \
    \                   avoid the store and forward.  The main situation\n       \
    \               in which 'noCablesBundled(2)' is beneficial is\n             \
    \         when there is a large amount of multicast traffic\n                \
    \      and the cables are not in a bundle.\n                      The value of\
    \ this object should be preserved\n                      across repeater resets\
    \ and power failures.\"\n              REFERENCE\n                      \"IEEE\
    \ Standard 802.12-1995, 13.2.4.4.1,\n                      aGroupCablesBundled.\"\
    \n              ::= { vgRptrBasicGroupEntry 5 }\n          vgRptrBasicPort   OBJECT\
    \ IDENTIFIER ::= { vgRptrBasic 3 }\n          vgRptrBasicPortTable OBJECT-TYPE\n\
    \              SYNTAX     SEQUENCE OF VgRptrBasicPortEntry\n              MAX-ACCESS\
    \ not-accessible\n              STATUS     current\n              DESCRIPTION\n\
    \                      \"A table containing configuration and status\n       \
    \               information about 802.12 repeater ports in the\n             \
    \         system.  The number of entries is independent of\n                 \
    \     the number of repeaters in the managed system.\"\n              ::= { vgRptrBasicPort\
    \ 1 }\n          vgRptrBasicPortEntry OBJECT-TYPE\n              SYNTAX     VgRptrBasicPortEntry\n\
    \              MAX-ACCESS not-accessible\n              STATUS     current\n \
    \             DESCRIPTION\n                      \"An entry in the vgRptrBasicPortTable,\
    \ containing\n                      information about a single port.\"\n     \
    \         INDEX      { vgRptrGroupIndex, vgRptrPortIndex }\n              ::=\
    \ { vgRptrBasicPortTable 1 }\n          VgRptrBasicPortEntry ::=\n           \
    \   SEQUENCE {\n                  vgRptrPortIndex                 Integer32,\n\
    \                  vgRptrPortType                  INTEGER,\n                \
    \  vgRptrPortAdminStatus           INTEGER,\n                  vgRptrPortOperStatus\
    \            INTEGER,\n                  vgRptrPortSupportedPromiscMode  INTEGER,\n\
    \                  vgRptrPortSupportedCascadeMode  INTEGER,\n                \
    \  vgRptrPortAllowedTrainType      INTEGER,\n                  vgRptrPortLastTrainConfig\
    \       OCTET STRING,\n                  vgRptrPortTrainingResult        OCTET\
    \ STRING,\n                  vgRptrPortPriorityEnable        TruthValue,\n   \
    \               vgRptrPortRptrInfoIndex         Integer32\n              }\n \
    \         vgRptrPortIndex OBJECT-TYPE\n              SYNTAX     Integer32 (1..2147483647)\n\
    \              MAX-ACCESS not-accessible\n              STATUS     current\n \
    \             DESCRIPTION\n                      \"This object identifies the\
    \ port within the group\n                      for which this entry contains information.\
    \  This\n                      identifies the port independently from the\n  \
    \                    repeater it may be attached to.  The numbering\n        \
    \              scheme for ports is implementation specific;\n                \
    \      however, this value can never be greater than\n                      vgRptrGroupPortCapacity\
    \ for the associated group.\"\n              REFERENCE\n                     \
    \ \"IEEE Standard 802.12-1995, 13.2.4.5.1,\n                      aPortID.\"\n\
    \              ::= { vgRptrBasicPortEntry 1 }\n          vgRptrPortType OBJECT-TYPE\n\
    \              SYNTAX     INTEGER {\n                             cascadeExternal(1),\n\
    \                             cascadeInternal(2),\n                          \
    \   localExternal(3),\n                             localInternal(4)\n       \
    \                  }\n              MAX-ACCESS read-only\n              STATUS\
    \     current\n              DESCRIPTION\n                      \"Describes the\
    \ type of port.  One of the\n                      following:\n              \
    \            cascadeExternal - Port is an uplink with\n                      \
    \                      physical connections which\n                          \
    \                  are externally visible\n                          cascadeInternal\
    \ - Port is an uplink with\n                                            physical\
    \ connections which\n                                            are not externally\
    \ visible,\n                                            such as a connection to\
    \ an\n                                            internal backplane in a\n  \
    \                                          chassis\n                         \
    \ localExternal   - Port is a downlink or local\n                            \
    \                port with externally\n                                      \
    \      visible connections\n                          localInternal   - Port is\
    \ a downlink or local\n                                            port with connections\
    \ which\n                                            are not externally visible,\n\
    \                                            such as a connection to an\n    \
    \                                        internal agent\n                    \
    \  'internal' is used to identify ports which place\n                      traffic\
    \ into the repeater, but do not have any\n                      external connections.\
    \  Note that both DTE and\n                      cascaded repeater downlinks are\
    \ considered\n                      'local' ports.\"\n              REFERENCE\n\
    \                      \"IEEE Standard 802.12-1995, 13.2.4.5.1,\n            \
    \          aPortType.\"\n              ::= { vgRptrBasicPortEntry 2 }\n      \
    \    vgRptrPortAdminStatus OBJECT-TYPE\n              SYNTAX     INTEGER {\n \
    \                            enabled(1),\n                             disabled(2)\n\
    \                         }\n              MAX-ACCESS read-write\n           \
    \   STATUS     current\n              DESCRIPTION\n                      \"Port\
    \ enable/disable function.  Enabling a\n                      disabled port will\
    \ cause training to be\n                      initiated by the training initiator\
    \ (the slave\n                      mode device) on the link.  Setting this object\
    \ to\n                      disabled(2) disables the port.\n                 \
    \     A disabled port neither transmits nor receives.\n                      Once\
    \ disabled, a port must be explicitly enabled\n                      to restore\
    \ operation.  A port which is disabled\n                      when power is lost\
    \ or when a reset is exerted\n                      shall remain disabled when\
    \ normal operation\n                      resumes.\n                      The\
    \ value of this object should be preserved\n                      across repeater\
    \ resets and power failures.\"\n              REFERENCE\n                    \
    \  \"IEEE Standard 802.12-1995, 13.2.4.5.1,\n                      aPortAdministrativeState.\"\
    \n              ::= { vgRptrBasicPortEntry 3 }\n          vgRptrPortOperStatus\
    \ OBJECT-TYPE\n              SYNTAX     INTEGER {\n                          \
    \   active(1),\n                             inactive(2),\n                  \
    \           training(3)\n                         }\n              MAX-ACCESS\
    \ read-only\n              STATUS     current\n              DESCRIPTION\n   \
    \                   \"Current status for the port as specified by the\n      \
    \                PORT_META_STATE in the port process module of\n             \
    \         clause 12 [IEEE Std 802.12].\n                      During initialization\
    \ or any link warning\n                      conditions, vgRptrPortStatus will\
    \ be\n                      'inactive(2)'.\n                      When Training_Up\
    \ is received by the repeater on a\n                      local port (or when\
    \ Training_Down is received on\n                      a cascade port), vgRptrPortStatus\
    \ will change to\n                      'training(3)' and vgRptrTrainingResult\
    \ can be\n                      monitored to see the detailed status regarding\n\
    \                      training.\n                      When 24 consecutive good\
    \ FCS packets are exchanged\n                      and the configuration bits\
    \ are OK,\n                      vgRptrPortStatus will change to 'active(1)'.\n\
    \                      A disabled port shall have a port status of\n         \
    \             'inactive(2)'.\"\n              REFERENCE\n                    \
    \  \"IEEE Standard 802.12, 13.2.4.5.1,\n                      aPortStatus.\"\n\
    \              ::= { vgRptrBasicPortEntry 4 }\n          vgRptrPortSupportedPromiscMode\
    \ OBJECT-TYPE\n              SYNTAX     INTEGER {\n                          \
    \   singleModeOnly(1),\n                             singleOrPromiscMode(2),\n\
    \                             promiscModeOnly(3)\n                         }\n\
    \              MAX-ACCESS read-only\n              STATUS     current\n      \
    \        DESCRIPTION\n                      \"This object describes whether the\
    \ port hardware\n                      is capable of supporting promiscuous mode,\
    \ single\n                      address mode (i.e., repeater filters unicasts\
    \ not\n                      addressed to the end station attached to this\n \
    \                     port), or both.  A port for which vgRptrPortType\n     \
    \                 is equal to 'cascadeInternal' or 'cascadeExternal'\n       \
    \               will always have a value of 'promiscModeOnly' for\n          \
    \            this object.\"\n              REFERENCE\n                      \"\
    IEEE Standard 802.12-1995, 13.2.4.5.1,\n                      aSupportedPromiscMode.\"\
    \n              ::= { vgRptrBasicPortEntry 5 }\n          vgRptrPortSupportedCascadeMode\
    \ OBJECT-TYPE\n              SYNTAX     INTEGER {\n                          \
    \   endNodesOnly(1),\n                             endNodesOrRepeaters(2),\n \
    \                            cascadePort(3)\n                         }\n    \
    \          MAX-ACCESS read-only\n              STATUS     current\n          \
    \    DESCRIPTION\n                      \"This object describes whether the port\
    \ hardware\n                      is capable of supporting cascaded repeaters,\
    \ end\n                      nodes, or both.  A port for which vgRptrPortType\n\
    \                      is equal to 'cascadeInternal' or\n                    \
    \  'cascadeExternal' will always have a value of\n                      'cascadePort'\
    \ for this object.\"\n              REFERENCE\n                      \"IEEE Standard\
    \ 802.12-1995, 13.2.4.5.1,\n                      aSupportedCascadeMode.\"\n \
    \             ::= { vgRptrBasicPortEntry 6 }\n          vgRptrPortAllowedTrainType\
    \ OBJECT-TYPE\n              SYNTAX     INTEGER {\n                          \
    \   allowEndNodesOnly(1),\n                             allowPromiscuousEndNodes(2),\n\
    \                             allowEndNodesOrRepeaters(3),\n                 \
    \            allowAnything(4)\n                         }\n              MAX-ACCESS\
    \ read-write\n              STATUS     current\n              DESCRIPTION\n  \
    \                    \"This security object is set by the network\n          \
    \            manager to configure what type of device is\n                   \
    \   permitted to connect to the port.  One of the\n                      following\
    \ values:\n                          allowEndNodesOnly        - only non-\n  \
    \                                                   promiscuous end\n        \
    \                                             nodes permitted.\n             \
    \             allowPromiscuousEndNodes - promiscuous or\n                    \
    \                                 non-promiscuous\n                          \
    \                           end nodes\n                                      \
    \               permitted\n                          allowEndNodesOrRepeaters\
    \ - repeaters or non-\n                                                     promiscuous\
    \ end\n                                                     nodes permitted\n\
    \                          allowAnything            - repeaters,\n           \
    \                                          promiscuous or\n                  \
    \                                   non-promiscuous\n                        \
    \                             end nodes\n                                    \
    \                 permitted\n                      For a port for which vgRptrPortType\
    \ is equal to\n                      'cascadeInternal' or 'cascadeExternal', the\n\
    \                      corresponding instance of this object may not be\n    \
    \                  set to 'allowEndNodesOnly' or\n                      'allowPromiscuousEndNodes'.\n\
    \                      The agent must reject a SET of this object if the\n   \
    \                   value includes no capabilities that are\n                \
    \      supported by this port's hardware, as defined by\n                    \
    \  the values of the corresponding instances of\n                      vgRptrPortSupportedPromiscMode\
    \ and\n                      vgRptrPortSupportedCascadeMode.\n               \
    \       Note that vgRptrPortSupportPromiscMode and\n                      vgRptrPortSupportedCascadeMode\
    \ represent what the\n                      port hardware is capable of supporting.\n\
    \                      vgRptrPortAllowedTrainType is used for setting an\n   \
    \                   administrative policy for a port.  The actual set\n      \
    \                of training configurations that will be allowed\n           \
    \           to succeed on a port is the intersection of what\n               \
    \       the hardware will support and what is\n                      administratively\
    \ allowed.  The above requirement\n                      on what values may be\
    \ set to this object says that\n                      the intersection of what\
    \ is supported and what is\n                      allowed must be non-empty. \
    \ In other words, it\n                      must not result in a situation in\
    \ which nothing\n                      would be allowed to train on that port.\
    \  However,\n                      a value can be set to this object as long as\
    \ the\n                      combination of this object and what is supported\n\
    \                      by the hardware would still leave at least one\n      \
    \                configuration that could successfully train on the\n        \
    \              port.\n                      The value of this object should be\
    \ preserved\n                      across repeater resets and power failures.\"\
    \n              REFERENCE\n                      \"IEEE Standard 802.12-1995,\
    \ 13.2.4.5.1,\n                      aAllowableTrainingType.\"\n             \
    \ ::= { vgRptrBasicPortEntry 7 }\n          vgRptrPortLastTrainConfig OBJECT-TYPE\n\
    \              SYNTAX     OCTET STRING (SIZE(2))\n              MAX-ACCESS read-only\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"This object is a 16 bit field.  For local ports,\n                 \
    \     this object contains the requested configuration\n                     \
    \ field from the most recent error-free training\n                      request\
    \ frame sent by the device connected to\n                      the port.  For\
    \ cascade ports, this object contains\n                      the responder's allowed\
    \ configuration field from\n                      the most recent error-free training\
    \ response frame\n                      received in response to training initiated\
    \ by this\n                      repeater.  The format of the current version\
    \ of\n                      this field is described in section 3.2.  Please\n\
    \                      refer to the most recent version of the IEEE\n        \
    \              802.12 standard for the most up-to-date definition\n          \
    \            of the format of this object.\"\n              REFERENCE\n      \
    \                \"IEEE Standard 802.12-1995, 13.2.4.5.1,\n                  \
    \    aLastTrainingConfig.\"\n              ::= { vgRptrBasicPortEntry 8 }\n  \
    \        vgRptrPortTrainingResult OBJECT-TYPE\n              SYNTAX     OCTET\
    \ STRING (SIZE(3))\n              MAX-ACCESS read-only\n              STATUS \
    \    current\n              DESCRIPTION\n                      \"This 18 bit field\
    \ is used to indicate the result\n                      of training.  It contains\
    \ two bits which indicate\n                      if error-free training frames\
    \ have been received,\n                      and it also contains the 16 bits\
    \ of the allowed\n                      configuration field from the most recent\n\
    \                      error-free training response frame on the port.\n     \
    \                   First Octet:    Second and Third Octets:\n               \
    \         7 6 5 4 3 2 1 0\n                       +-+-+-+-+-+-+-+-+-----------------------------+\n\
    \                       |0|0|0|0|0|0|V|G| allowed configuration field |\n    \
    \                   +-+-+-+-+-+-+-+-+-----------------------------+\n        \
    \                  V:   Valid: set when at least one error-free\n            \
    \                   training frame has been received.\n                      \
    \         Indicates the 16 training configuration\n                          \
    \     bits in vgRptrPortLastTrainConfig and\n                               vgRptrPortTrainingResult\
    \ contain valid\n                               information.  This bit is cleared\
    \ when\n                               vgRptrPortStatus transitions to the\n \
    \                              'inactive' or 'training' state.\n             \
    \             G:   LinkGood: indicates the link hardware is\n                \
    \               OK.  Set if 24 consecutive error-free\n                      \
    \         training packets have been exchanged.\n                            \
    \   Cleared when a training packet with\n                               errors\
    \ is received, or when\n                               vgRptrPortStatus transitions\
    \ to the\n                               'inactive' or 'training' state.\n   \
    \                   The format of the current version of the allowed\n       \
    \               configuration field is described in section 3.2.\n           \
    \           Please refer to the most recent version of the\n                 \
    \     IEEE 802.12 standard for the most up-to-date\n                      definition\
    \ of the format of this field.\n                      If the port is in training,\
    \ a management station\n                      can examine this object to see if\
    \ any training\n                      packets have been passed successfully. \
    \ If there\n                      have been any good training packets, the Valid\n\
    \                      bit will be set and the management station can\n      \
    \                examine the allowed configuration field to see if\n         \
    \             there is a duplicate address, configuration, or\n              \
    \        security problem.\n                      Note that on a repeater local\
    \ port, this repeater\n                      generates the training response bits,\
    \ while on\n                      a cascade port, the device at the upper end\
    \ of\n                      the link originated the training response bits.\"\n\
    \              REFERENCE\n                      \"IEEE Standard 802.12-1995, 13.2.4.5.1,\n\
    \                      aTrainingResult.\"\n              ::= { vgRptrBasicPortEntry\
    \ 9 }\n          vgRptrPortPriorityEnable OBJECT-TYPE\n              SYNTAX  \
    \   TruthValue\n              MAX-ACCESS read-write\n              STATUS    \
    \ current\n              DESCRIPTION\n                      \"A configuration\
    \ flag used to determine whether\n                      the repeater will service\
    \ high priority requests\n                      received on the port as high priority\
    \ or normal\n                      priority.  When 'false', high priority requests\n\
    \                      on this port will be serviced as normal priority.\n   \
    \                   The setting of this object has no effect on a\n          \
    \            cascade port.  Also note that the setting of this\n             \
    \         object has no effect on a port connected to a\n                    \
    \  cascaded repeater.  In both of these cases, this\n                      setting\
    \ is treated as always 'true'.  The value\n                      'false' only\
    \ has an effect when the port is a\n                      localInternal or localExternal\
    \ port connected to\n                      an end node.\n                    \
    \  The value of this object should be preserved\n                      across\
    \ repeater resets and power failures.\"\n              REFERENCE\n           \
    \           \"IEEE Standard 802.12-1995, 13.2.4.5.1,\n                      aPriorityEnable.\"\
    \n              ::= { vgRptrBasicPortEntry 10 }\n          vgRptrPortRptrInfoIndex\
    \ OBJECT-TYPE\n              SYNTAX     Integer32 (0..2147483647)\n          \
    \    MAX-ACCESS read-only\n              STATUS     current\n              DESCRIPTION\n\
    \                      \"This object identifies the repeater that this\n     \
    \                 port is currently mapped to.  The repeater\n               \
    \       identified by a particular value of this object\n                    \
    \  is the same as that identified by the same value\n                      of\
    \ vgRptrInfoIndex.  A value of zero indicates\n                      that this\
    \ port is not currently mapped to any\n                      repeater.\"\n   \
    \           ::= { vgRptrBasicPortEntry 11 }\n          vgRptrMonitor      OBJECT\
    \ IDENTIFIER ::= { vgRptrObjects 2 }\n          vgRptrMonRepeater  OBJECT IDENTIFIER\
    \ ::= { vgRptrMonitor 1 }\n          vgRptrMonitorTable OBJECT-TYPE\n        \
    \      SYNTAX     SEQUENCE OF VgRptrMonitorEntry\n              MAX-ACCESS not-accessible\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"A table of performance and error statistics for\n                  \
    \    each repeater in the system.  The instance of the\n                     \
    \ vgRptrInfoLastChange associated with a repeater\n                      is used\
    \ to indicate possible discontinuities of\n                      the counters\
    \ in this table that are associated\n                      with the same repeater.\"\
    \n              ::= { vgRptrMonRepeater 1 }\n          vgRptrMonitorEntry OBJECT-TYPE\n\
    \              SYNTAX     VgRptrMonitorEntry\n              MAX-ACCESS not-accessible\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"An entry in the table, containing statistics\n                     \
    \ for a single repeater.\"\n              INDEX      { vgRptrInfoIndex }\n   \
    \           ::= { vgRptrMonitorTable 1 }\n          VgRptrMonitorEntry ::=\n \
    \             SEQUENCE {\n                  vgRptrMonTotalReadableFrames    Counter32,\n\
    \                  vgRptrMonTotalReadableOctets    Counter32,\n              \
    \    vgRptrMonReadableOctetRollovers Counter32,\n                  vgRptrMonHCTotalReadableOctets\
    \  Counter64,\n                  vgRptrMonTotalErrors            Counter32\n \
    \             }\n          vgRptrMonTotalReadableFrames OBJECT-TYPE\n        \
    \      SYNTAX     Counter32\n              MAX-ACCESS read-only\n            \
    \  STATUS     current\n              DESCRIPTION\n                      \"The\
    \ total number of good frames of valid frame\n                      length that\
    \ have been received on all ports in\n                      this repeater.  If\
    \ an implementation cannot\n                      obtain a count of frames as\
    \ seen by the repeater\n                      itself, this counter may be implemented\
    \ as the\n                      summation of the values of the\n             \
    \         vgRptrPortReadableFrames counters for all of the\n                 \
    \     ports in this repeater.\n                      This counter may experience\
    \ a discontinuity when\n                      the value of the corresponding instance\
    \ of\n                      vgRptrInfoLastChange changes.\"\n              ::=\
    \ { vgRptrMonitorEntry 1 }\n          vgRptrMonTotalReadableOctets OBJECT-TYPE\n\
    \              SYNTAX     Counter32\n              MAX-ACCESS read-only\n    \
    \          STATUS     current\n              DESCRIPTION\n                   \
    \   \"The total number of octets contained in good\n                      frames\
    \ that have been received on all ports in\n                      this repeater.\
    \  If an implementation cannot\n                      obtain a count of octets\
    \ as seen by the repeater\n                      itself, this counter may be implemented\
    \ as the\n                      summation of the values of the\n             \
    \         vgRptrPortReadableOctets counters for all of the\n                 \
    \     ports in this repeater.\n                      Note that this counter can\
    \ roll over very\n                      quickly.  A management station is advised\
    \ to\n                      also poll the vgRptrReadableOctetRollovers\n     \
    \                 object, or to use the 64-bit counter defined by\n          \
    \            vgRptrMonHCTotalReadableOctets instead of the\n                 \
    \     two 32-bit counters.\n                      This two-counter mechanism is\
    \ provided for those\n                      network management protocols that\
    \ do not support\n                      64-bit counters (e.g. SNMPv1).  Note that\n\
    \                      retrieval of these two counters in the same PDU\n     \
    \                 is NOT guaranteed to be atomic.\n                      This\
    \ counter may experience a discontinuity when\n                      the value\
    \ of the corresponding instance of\n                      vgRptrInfoLastChange\
    \ changes.\"\n              ::= { vgRptrMonitorEntry 2 }\n          vgRptrMonReadableOctetRollovers\
    \ OBJECT-TYPE\n              SYNTAX     Counter32\n              MAX-ACCESS read-only\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"The total number of times that the associated\n                    \
    \  instance of the vgRptrMonTotalReadableOctets\n                      counter\
    \ has rolled over.\n                      This two-counter mechanism is provided\
    \ for those\n                      network management protocols that do not support\n\
    \                      64-bit counters (e.g. SNMPv1).  Note that\n           \
    \           retrieval of these two counters in the same PDU\n                \
    \      is NOT guaranteed to be atomic.\n                      This counter may\
    \ experience a discontinuity when\n                      the value of the corresponding\
    \ instance of\n                      vgRptrInfoLastChange changes.\"\n       \
    \       ::= { vgRptrMonitorEntry 3 }\n          vgRptrMonHCTotalReadableOctets\
    \ OBJECT-TYPE\n              SYNTAX     Counter64\n              MAX-ACCESS read-only\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"The total number of octets contained in good\n                     \
    \ frames that have been received on all ports in\n                      this repeater.\
    \  If an implementation cannot\n                      obtain a count of octets\
    \ as seen by the repeater\n                      itself, this counter may be implemented\
    \ as the\n                      summation of the values of the\n             \
    \         vgRptrPortHCReadableOctets counters for all of the\n               \
    \       ports in this repeater.\n                      This counter is a 64 bit\
    \ version of\n                      vgRptrMonTotalReadableOctets.  It should be\
    \ used\n                      by Network Management protocols which support 64\n\
    \                      bit counters (e.g. SNMPv2).\n                      This\
    \ counter may experience a discontinuity when\n                      the value\
    \ of the corresponding instance of\n                      vgRptrInfoLastChange\
    \ changes.\"\n              ::= { vgRptrMonitorEntry 4 }\n          vgRptrMonTotalErrors\
    \ OBJECT-TYPE\n              SYNTAX     Counter32\n              MAX-ACCESS read-only\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"The total number of errors which have occurred on\n                \
    \      all of the ports in this repeater.  If an\n                      implementation\
    \ cannot obtain a count of these\n                      errors as seen by the\
    \ repeater itself, this\n                      counter may be implemented as the\
    \ summation of the\n                      values of the vgRptrPortIPMFrames,\n\
    \                      vgRptrPortOversizeFrames, and\n                      vgRptrPortDataErrorFrames\
    \ counters for all of the\n                      ports in this repeater.\n   \
    \                   This counter may experience a discontinuity when\n       \
    \               the value of the corresponding instance of\n                 \
    \     vgRptrInfoLastChange changes.\"\n              ::= { vgRptrMonitorEntry\
    \ 5 }\n          vgRptrMonGroup     OBJECT IDENTIFIER ::= { vgRptrMonitor 2 }\n\
    \          -- Currently unused\n          vgRptrMonPort      OBJECT IDENTIFIER\
    \ ::= { vgRptrMonitor 3 }\n          vgRptrMonPortTable OBJECT-TYPE\n        \
    \      SYNTAX     SEQUENCE OF VgRptrMonPortEntry\n              MAX-ACCESS not-accessible\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"A table of performance and error statistics for\n                  \
    \    the ports.  The columnar object\n                      vgRptrPortLastChange\
    \ is used to indicate possible\n                      discontinuities of counter\
    \ type columnar objects\n                      in this table.\"\n            \
    \  ::= { vgRptrMonPort 1 }\n          vgRptrMonPortEntry OBJECT-TYPE\n       \
    \       SYNTAX     VgRptrMonPortEntry\n              MAX-ACCESS not-accessible\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"An entry in the vgRptrMonPortTable, containing\n                   \
    \   performance and error statistics for a single\n                      port.\"\
    \n              INDEX      { vgRptrGroupIndex, vgRptrPortIndex }\n           \
    \   ::= { vgRptrMonPortTable 1 }\n          VgRptrMonPortEntry ::=\n         \
    \     SEQUENCE {\n                  vgRptrPortReadableFrames        Counter32,\n\
    \                  vgRptrPortReadableOctets        Counter32,\n              \
    \    vgRptrPortReadOctetRollovers    Counter32,\n                  vgRptrPortHCReadableOctets\
    \      Counter64,\n                  vgRptrPortUnreadableOctets      Counter32,\n\
    \                  vgRptrPortUnreadOctetRollovers  Counter32,\n              \
    \    vgRptrPortHCUnreadableOctets    Counter64,\n                  vgRptrPortHighPriorityFrames\
    \    Counter32,\n                  vgRptrPortHighPriorityOctets    Counter32,\n\
    \                  vgRptrPortHighPriOctetRollovers Counter32,\n              \
    \    vgRptrPortHCHighPriorityOctets  Counter64,\n                  vgRptrPortNormPriorityFrames\
    \    Counter32,\n                  vgRptrPortNormPriorityOctets    Counter32,\n\
    \                  vgRptrPortNormPriOctetRollovers Counter32,\n              \
    \    vgRptrPortHCNormPriorityOctets  Counter64,\n                  vgRptrPortBroadcastFrames\
    \       Counter32,\n                  vgRptrPortMulticastFrames       Counter32,\n\
    \                  vgRptrPortNullAddressedFrames   Counter32,\n              \
    \    vgRptrPortIPMFrames             Counter32,\n                  vgRptrPortOversizeFrames\
    \        Counter32,\n                  vgRptrPortDataErrorFrames       Counter32,\n\
    \                  vgRptrPortPriorityPromotions    Counter32,\n              \
    \    vgRptrPortTransitionToTrainings Counter32,\n                  vgRptrPortLastChange\
    \            TimeStamp\n              }\n          vgRptrPortReadableFrames OBJECT-TYPE\n\
    \              SYNTAX     Counter32\n              MAX-ACCESS read-only\n    \
    \          STATUS     current\n              DESCRIPTION\n                   \
    \   \"This object is the number of good frames of\n                      valid\
    \ frame length that have been received on\n                      this port.  This\
    \ counter is incremented by one\n                      for each frame received\
    \ on the port which is not\n                      counted by any of the following\
    \ error counters:\n                      vgRptrPortIPMFrames, vgRptrPortOversizeFrames,\n\
    \                      vgRptrPortNullAddressedFrames, or\n                   \
    \   vgRptrPortDataErrorFrames.\n                      This counter may experience\
    \ a discontinuity when\n                      the value of the corresponding instance\
    \ of\n                      vgRptrPortLastChange changes.\"\n              REFERENCE\n\
    \                      \"IEEE Standard 802.12-1995, 13.2.4.5.1,\n            \
    \          aReadableFramesReceived.\"\n              ::= { vgRptrMonPortEntry\
    \ 1 }\n          vgRptrPortReadableOctets OBJECT-TYPE\n              SYNTAX  \
    \   Counter32\n              MAX-ACCESS read-only\n              STATUS     current\n\
    \              DESCRIPTION\n                      \"This object is a count of\
    \ the number of octets\n                      contained in good frames that have\
    \ been received\n                      on this port.  This counter is incremented\
    \ by\n                      OctetCount for each frame received on this port\n\
    \                      which has been determined to be a readable frame\n    \
    \                  (i.e. each frame counted by\n                      vgRptrPortReadableFrames).\n\
    \                      Note that this counter can roll over very\n           \
    \           quickly.  A management station is advised to\n                   \
    \   also poll the vgRptrPortReadOctetRollovers\n                      object,\
    \ or to use the 64-bit counter defined by\n                      vgRptrPortHCReadableOctets\
    \ instead of the two\n                      32-bit counters.\n               \
    \       This two-counter mechanism is provided for those\n                   \
    \   network management protocols that do not support\n                      64-bit\
    \ counters (e.g. SNMPv1).  Note that\n                      retrieval of these\
    \ two counters in the same PDU\n                      is NOT guaranteed to be\
    \ atomic.\n                      This counter may experience a discontinuity when\n\
    \                      the value of the corresponding instance of\n          \
    \            vgRptrPortLastChange changes.\"\n              REFERENCE\n      \
    \                \"IEEE Standard 802.12-1995, 13.2.4.5.1,\n                  \
    \    aReadableOctetsReceived.\"\n              ::= { vgRptrMonPortEntry 2 }\n\
    \          vgRptrPortReadOctetRollovers OBJECT-TYPE\n              SYNTAX    \
    \ Counter32\n              MAX-ACCESS read-only\n              STATUS     current\n\
    \              DESCRIPTION\n                      \"This object is a count of\
    \ the number of times\n                      that the associated instance of the\n\
    \                      vgRptrPortReadableOctets counter has rolled over.\n   \
    \                   This two-counter mechanism is provided for those\n       \
    \               network management protocols that do not support\n           \
    \           64-bit counters (e.g. SNMPv1).  Note that\n                      retrieval\
    \ of these two counters in the same PDU\n                      is NOT guaranteed\
    \ to be atomic.\n                      This counter may experience a discontinuity\
    \ when\n                      the value of the corresponding instance of\n   \
    \                   vgRptrPortLastChange changes.\"\n              REFERENCE\n\
    \                      \"IEEE Standard 802.12-1995, 13.2.4.5.1,\n            \
    \          aReadableOctetsReceived.\"\n              ::= { vgRptrMonPortEntry\
    \ 3 }\n          vgRptrPortHCReadableOctets OBJECT-TYPE\n              SYNTAX\
    \     Counter64\n              MAX-ACCESS read-only\n              STATUS    \
    \ current\n              DESCRIPTION\n                      \"This object is a\
    \ count of the number of octets\n                      contained in good frames\
    \ that have been received\n                      on this port.  This counter is\
    \ incremented by\n                      OctetCount for each frame received on\
    \ this port\n                      which has been determined to be a readable\
    \ frame\n                      (i.e. each frame counted by\n                 \
    \     vgRptrPortReadableFrames).\n                      This counter is a 64 bit\
    \ version of\n                      vgRptrPortReadableOctets.  It should be used\
    \ by\n                      Network Management protocols which support 64 bit\n\
    \                      counters (e.g. SNMPv2).\n                      This counter\
    \ may experience a discontinuity when\n                      the value of the\
    \ corresponding instance of\n                      vgRptrPortLastChange changes.\"\
    \n              REFERENCE\n                      \"IEEE Standard 802.12-1995,\
    \ 13.2.4.5.1,\n                      aReadableOctetsReceived.\"\n            \
    \  ::= { vgRptrMonPortEntry 4 }\n          vgRptrPortUnreadableOctets OBJECT-TYPE\n\
    \              SYNTAX     Counter32\n              MAX-ACCESS read-only\n    \
    \          STATUS     current\n              DESCRIPTION\n                   \
    \   \"This object is a count of the number of octets\n                      contained\
    \ in invalid frames that have been\n                      received on this port.\
    \  This counter is\n                      incremented by OctetCount for each frame\
    \ received\n                      on this port which is counted by\n         \
    \             vgRptrPortIPMFrames, vgRptrPortOversizeFrames,\n               \
    \       vgRptrPortNullAddressedFrames, or\n                      vgRptrPortDataErrorFrames.\
    \  This counter can be\n                      combined with vgRptrPortReadableOctets\
    \ to\n                      calculate network utilization.\n                 \
    \     Note that this counter can roll over very\n                      quickly.\
    \  A management station is advised to\n                      also poll the vgRptrPortUnreadOctetRollovers\n\
    \                      object, or to use the 64-bit counter defined by\n     \
    \                 vgRptrPortHCUnreadableOctets instead of the two\n          \
    \            32-bit counters.\n                      This two-counter mechanism\
    \ is provided for those\n                      network management protocols that\
    \ do not support\n                      64-bit counters (e.g. SNMPv1).  Note that\n\
    \                      retrieval of these two counters in the same PDU\n     \
    \                 is NOT guaranteed to be atomic.\n                      This\
    \ counter may experience a discontinuity when\n                      the value\
    \ of the corresponding instance of\n                      vgRptrPortLastChange\
    \ changes.\"\n              REFERENCE\n                      \"IEEE Standard 802.12-1995,\
    \ 13.2.4.5.1,\n                      aOctetsInUnreadableFramesRcvd.\"\n      \
    \        ::= { vgRptrMonPortEntry 5 }\n          vgRptrPortUnreadOctetRollovers\
    \ OBJECT-TYPE\n              SYNTAX     Counter32\n              MAX-ACCESS read-only\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"This object is a count of the number of times\n                    \
    \  that the associated instance of the\n                      vgRptrPortUnreadableOctets\
    \ counter has rolled\n                      over.\n                      This\
    \ two-counter mechanism is provided for those\n                      network management\
    \ protocols that do not support\n                      64-bit counters (e.g. SNMPv1).\
    \  Note that\n                      retrieval of these two counters in the same\
    \ PDU\n                      is NOT guaranteed to be atomic.\n               \
    \       This counter may experience a discontinuity when\n                   \
    \   the value of the corresponding instance of\n                      vgRptrPortLastChange\
    \ changes.\"\n              REFERENCE\n                      \"IEEE Standard 802.12-1995,\
    \ 13.2.4.5.1,\n                      aOctetsInUnreadableFramesRcvd.\"\n      \
    \        ::= { vgRptrMonPortEntry 6 }\n          vgRptrPortHCUnreadableOctets\
    \ OBJECT-TYPE\n              SYNTAX     Counter64\n              MAX-ACCESS read-only\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"This object is a count of the number of octets\n                   \
    \   contained in invalid frames that have been\n                      received\
    \ on this port.  This counter is\n                      incremented by OctetCount\
    \ for each frame received\n                      on this port which is counted\
    \ by\n                      vgRptrPortIPMFrames, vgRptrPortOversizeFrames,\n \
    \                     vgRptrPortNullAddressedFrames, or\n                    \
    \  vgRptrPortDataErrorFrames.  This counter can be\n                      combined\
    \ with vgRptrPortHCReadableOctets to\n                      calculate network\
    \ utilization.\n                      This counter is a 64 bit version of\n  \
    \                    vgRptrPortUnreadableOctets.  It should be used\n        \
    \              by Network Management protocols which support 64\n            \
    \          bit counters (e.g. SNMPv2).\n                      This counter may\
    \ experience a discontinuity when\n                      the value of the corresponding\
    \ instance of\n                      vgRptrPortLastChange changes.\"\n       \
    \       REFERENCE\n                      \"IEEE Standard 802.12-1995, 13.2.4.5.1,\n\
    \                      aOctetsInUnreadableFramesRcvd.\"\n              ::= { vgRptrMonPortEntry\
    \ 7 }\n          vgRptrPortHighPriorityFrames OBJECT-TYPE\n              SYNTAX\
    \     Counter32\n              MAX-ACCESS read-only\n              STATUS    \
    \ current\n              DESCRIPTION\n                      \"This object is a\
    \ count of high priority frames\n                      that have been received\
    \ on this port.  This\n                      counter is incremented by one for\
    \ each high\n                      priority frame received on this port.  This\n\
    \                      counter includes both good and bad high priority\n    \
    \                  frames, as well as high priority training frames.\n       \
    \               This counter does not include normal priority\n              \
    \        frames which were priority promoted.\n                      This counter\
    \ may experience a discontinuity when\n                      the value of the\
    \ corresponding instance of\n                      vgRptrPortLastChange changes.\"\
    \n              REFERENCE\n                      \"IEEE Standard 802.12-1995,\
    \ 13.2.4.5.1,\n                      aHighPriorityFramesReceived.\"\n        \
    \      ::= { vgRptrMonPortEntry 8 }\n          vgRptrPortHighPriorityOctets OBJECT-TYPE\n\
    \              SYNTAX     Counter32\n              MAX-ACCESS read-only\n    \
    \          STATUS     current\n              DESCRIPTION\n                   \
    \   \"This object is a count of the number of octets\n                      contained\
    \ in high priority frames that have been\n                      received on this\
    \ port.  This counter is\n                      incremented by OctetCount for\
    \ each frame received\n                      on this port which is counted by\n\
    \                      vgRptrPortHighPriorityFrames.\n                      Note\
    \ that this counter can roll over very\n                      quickly.  A management\
    \ station is advised to\n                      also poll the vgRptrPortHighPriOctetRollovers\n\
    \                      object, or to use the 64-bit counter defined by\n     \
    \                 vgRptrPortHCHighPriorityOctets instead of the two\n        \
    \              32-bit counters.\n                      This two-counter mechanism\
    \ is provided for those\n                      network management protocols that\
    \ do not support\n                      64-bit counters (e.g. SNMPv1).  Note that\n\
    \                      retrieval of these two counters in the same PDU\n     \
    \                 is NOT guaranteed to be atomic.\n                      This\
    \ counter may experience a discontinuity when\n                      the value\
    \ of the corresponding instance of\n                      vgRptrPortLastChange\
    \ changes.\"\n              REFERENCE\n                      \"IEEE Standard 802.12-1995,\
    \ 13.2.4.5.1,\n                      aHighPriorityOctetsReceived.\"\n        \
    \      ::= { vgRptrMonPortEntry 9 }\n          vgRptrPortHighPriOctetRollovers\
    \ OBJECT-TYPE\n              SYNTAX     Counter32\n              MAX-ACCESS read-only\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"This object is a count of the number of times\n                    \
    \  that the associated instance of the\n                      vgRptrPortHighPriorityOctets\
    \ counter has rolled\n                      over.\n                      This\
    \ two-counter mechanism is provided for those\n                      network management\
    \ protocols that do not support\n                      64-bit counters (e.g. SNMPv1).\
    \  Note that\n                      retrieval of these two counters in the same\
    \ PDU\n                      is NOT guaranteed to be atomic.\n               \
    \       This counter may experience a discontinuity when\n                   \
    \   the value of the corresponding instance of\n                      vgRptrPortLastChange\
    \ changes.\"\n              REFERENCE\n                      \"IEEE Standard 802.12-1995,\
    \ 13.2.4.5.1,\n                      aHighPriorityOctetsReceived.\"\n        \
    \      ::= { vgRptrMonPortEntry 10 }\n          vgRptrPortHCHighPriorityOctets\
    \ OBJECT-TYPE\n              SYNTAX     Counter64\n              MAX-ACCESS read-only\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"This object is a count of the number of octets\n                   \
    \   contained in high priority frames that have been\n                      received\
    \ on this port.  This counter is\n                      incremented by OctetCount\
    \ for each frame received\n                      on this port which is counted\
    \ by\n                      vgRptrPortHighPriorityFrames.\n                  \
    \    This counter is a 64 bit version of\n                      vgRptrPortHighPriorityOctets.\
    \  It should be used\n                      by Network Management protocols which\
    \ support\n                      64 bit counters (e.g. SNMPv2).\n            \
    \          This counter may experience a discontinuity when\n                \
    \      the value of the corresponding instance of\n                      vgRptrPortLastChange\
    \ changes.\"\n              REFERENCE\n                      \"IEEE Standard 802.12-1995,\
    \ 13.2.4.5.1,\n                      aHighPriorityOctetsReceived.\"\n        \
    \      ::= { vgRptrMonPortEntry 11 }\n          vgRptrPortNormPriorityFrames OBJECT-TYPE\n\
    \              SYNTAX     Counter32\n              MAX-ACCESS read-only\n    \
    \          STATUS     current\n              DESCRIPTION\n                   \
    \   \"This object is a count of normal priority frames\n                     \
    \ that have been received on this port.  This\n                      counter is\
    \ incremented by one for each normal\n                      priority frame received\
    \ on this port. This\n                      counter includes both good and bad\
    \ normal\n                      priority frames, as well as normal priority\n\
    \                      training frames and normal priority frames which\n    \
    \                  were priority promoted.\n                      This counter\
    \ may experience a discontinuity when\n                      the value of the\
    \ corresponding instance of\n                      vgRptrPortLastChange changes.\"\
    \n              REFERENCE\n                      \"IEEE Standard 802.12-1995,\
    \ 13.2.4.5.1,\n                      aNormalPriorityFramesReceived.\"\n      \
    \        ::= { vgRptrMonPortEntry 12 }\n          vgRptrPortNormPriorityOctets\
    \ OBJECT-TYPE\n              SYNTAX     Counter32\n              MAX-ACCESS read-only\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"This object is a count of the number of octets\n                   \
    \   contained in normal priority frames that have\n                      been\
    \ received on this port.  This counter is\n                      incremented by\
    \ OctetCount for each frame received\n                      on this port which\
    \ is counted by\n                      vgRptrPortNormPriorityFrames.\n       \
    \               Note that this counter can roll over very\n                  \
    \    quickly.  A management station is advised to\n                      also\
    \ poll the vgRptrPortNormPriOctetRollovers\n                      object, or to\
    \ use the 64-bit counter defined by\n                      vgRptrPortHCNormPriorityOctets\
    \ instead of the two\n                      32-bit counters.\n               \
    \       This two-counter mechanism is provided for those\n                   \
    \   network management protocols that do not support\n                      64-bit\
    \ counters (e.g. SNMPv1).  Note that\n                      retrieval of these\
    \ two counters in the same PDU\n                      is NOT guaranteed to be\
    \ atomic.\n                      This counter may experience a discontinuity when\n\
    \                      the value of the corresponding instance of\n          \
    \            vgRptrPortLastChange changes.\"\n              REFERENCE\n      \
    \                \"IEEE Standard 802.12-1995, 13.2.4.5.1,\n                  \
    \    aNormalPriorityOctetsReceived.\"\n              ::= { vgRptrMonPortEntry\
    \ 13 }\n          vgRptrPortNormPriOctetRollovers OBJECT-TYPE\n              SYNTAX\
    \     Counter32\n              MAX-ACCESS read-only\n              STATUS    \
    \ current\n              DESCRIPTION\n                      \"This object is a\
    \ count of the number of times\n                      that the associated instance\
    \ of the\n                      vgRptrPortNormPriorityOctets counter has rolled\n\
    \                      over.\n                      This two-counter mechanism\
    \ is provided for those\n                      network management protocols that\
    \ do not support\n                      64-bit counters (e.g. SNMPv1).  Note that\n\
    \                      retrieval of these two counters in the same PDU\n     \
    \                 is NOT guaranteed to be atomic.\n                      This\
    \ counter may experience a discontinuity when\n                      the value\
    \ of the corresponding instance of\n                      vgRptrPortLastChange\
    \ changes.\"\n              REFERENCE\n                      \"IEEE Standard 802.12-1995,\
    \ 13.2.4.5.1,\n                      aNormalPriorityOctetsReceived.\"\n      \
    \        ::= { vgRptrMonPortEntry 14 }\n          vgRptrPortHCNormPriorityOctets\
    \ OBJECT-TYPE\n              SYNTAX     Counter64\n              MAX-ACCESS read-only\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"This object is a count of the number of octets\n                   \
    \   contained in normal priority frames that have\n                      been\
    \ received on this port.  This counter is\n                      incremented by\
    \ OctetCount for each frame received\n                      on this port which\
    \ is counted by\n                      vgRptrPortNormPriorityFrames.\n       \
    \               This counter is a 64 bit version of\n                      vgRptrPortNormPriorityOctets.\
    \  It should be used\n                      by Network Management protocols which\
    \ support\n                      64 bit counters (e.g. SNMPv2).\n            \
    \          This counter may experience a discontinuity when\n                \
    \      the value of the corresponding instance of\n                      vgRptrPortLastChange\
    \ changes.\"\n              REFERENCE\n                      \"IEEE Standard 802.12-1995,\
    \ 13.2.4.5.1,\n                      aNormalPriorityOctetsReceived.\"\n      \
    \        ::= { vgRptrMonPortEntry 15 }\n          vgRptrPortBroadcastFrames OBJECT-TYPE\n\
    \              SYNTAX     Counter32\n              MAX-ACCESS read-only\n    \
    \          STATUS     current\n              DESCRIPTION\n                   \
    \   \"This object is a count of broadcast packets that\n                     \
    \ have been received on this port.  This counter is\n                      incremented\
    \ by one for each readable frame\n                      received on this port\
    \ whose destination MAC\n                      address is the broadcast address.\
    \  Frames\n                      counted by this counter are also counted by\n\
    \                      vgRptrPortReadableFrames.\n                      This counter\
    \ may experience a discontinuity when\n                      the value of the\
    \ corresponding instance of\n                      vgRptrPortLastChange changes.\"\
    \n              REFERENCE\n                      \"IEEE Standard 802.12-1995,\
    \ 13.2.4.5.1,\n                      aBroadcastFramesReceived.\"\n           \
    \   ::= { vgRptrMonPortEntry 16 }\n          vgRptrPortMulticastFrames OBJECT-TYPE\n\
    \              SYNTAX     Counter32\n              MAX-ACCESS read-only\n    \
    \          STATUS     current\n              DESCRIPTION\n                   \
    \   \"This object is a count of multicast packets that\n                     \
    \ have been received on this port.  This counter is\n                      incremented\
    \ by one for each readable frame\n                      received on this port\
    \ whose destination MAC\n                      address has the group address bit\
    \ set, but is not\n                      the broadcast address.  Frames counted\
    \ by this\n                      counter are also counted by\n               \
    \       vgRptrPortReadableFrames, but not by\n                      vgRptrPortBroadcastFrames.\
    \  Note that when the\n                      value of the instance vgRptrInfoCurrentFramingType\n\
    \                      for the repeater that this port is associated\n       \
    \               with is equal to 'frameType88025', this count\n              \
    \        includes packets addressed to functional\n                      addresses.\n\
    \                      This counter may experience a discontinuity when\n    \
    \                  the value of the corresponding instance of\n              \
    \        vgRptrPortLastChange changes.\"\n              REFERENCE\n          \
    \            \"IEEE Standard 802.12-1995, 13.2.4.5.1,\n                      aMulticastFramesReceived.\"\
    \n              ::= { vgRptrMonPortEntry 17 }\n          vgRptrPortNullAddressedFrames\
    \ OBJECT-TYPE\n              SYNTAX     Counter32\n              MAX-ACCESS read-only\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"This object is a count of null addressed packets\n                 \
    \     that have been received on this port.  This\n                      counter\
    \ is incremented by one for each frame\n                      received on this\
    \ port with a destination MAC\n                      address consisting of all\
    \ zero bits.  Both void\n                      and training frames are included\
    \ in this\n                      counter.\n                      This counter\
    \ may experience a discontinuity when\n                      the value of the\
    \ corresponding instance of\n                      vgRptrPortLastChange changes.\"\
    \n              REFERENCE\n                      \"IEEE Standard 802.12-1995,\
    \ 13.2.4.5.1,\n                      aNullAddressedFramesReceived.\"\n       \
    \       ::= { vgRptrMonPortEntry 18 }\n          vgRptrPortIPMFrames OBJECT-TYPE\n\
    \              SYNTAX     Counter32\n              MAX-ACCESS read-only\n    \
    \          STATUS     current\n              DESCRIPTION\n                   \
    \   \"This object is a count of the number of frames\n                      that\
    \ have been received on this port with an\n                      invalid packet\
    \ marker and no PMI errors.  A\n                      repeater will write an invalid\
    \ packet marker to\n                      the end of a frame containing errors\
    \ as it is\n                      forwarded through the repeater to the other\n\
    \                      ports.  This counter is incremented by one for\n      \
    \                each frame received on this port which has had an\n         \
    \             invalid packet marker added to the end of the\n                \
    \      frame.\n                      This counter indicates problems occurring\
    \ in the\n                      domain of other repeaters, as opposed to problems\n\
    \                      with cables or devices directly attached to this\n    \
    \                  repeater.\n                      This counter may experience\
    \ a discontinuity when\n                      the value of the corresponding instance\
    \ of\n                      vgRptrPortLastChange changes.\"\n              REFERENCE\n\
    \                      \"IEEE Standard 802.12-1995, 13.2.4.5.1,\n            \
    \          aIPMFramesReceived.\"\n              ::= { vgRptrMonPortEntry 19 }\n\
    \          vgRptrPortOversizeFrames OBJECT-TYPE\n              SYNTAX     Counter32\n\
    \              MAX-ACCESS read-only\n              STATUS     current\n      \
    \        DESCRIPTION\n                      \"This object is a count of oversize\
    \ frames\n                      received on this port.  This counter is\n    \
    \                  incremented by one for each frame received on\n           \
    \           this port whose OctetCount is larger than the\n                  \
    \    maximum legal frame size.\n                      The frame size which causes\
    \ this counter to\n                      increment is dependent on the current\
    \ value of\n                      vgRptrInfoCurrentFramingType for the repeater\
    \ that\n                      the port is associated with.  When\n           \
    \           vgRptrInfoCurrentFramingType is equal to\n                      frameType88023\
    \ this counter will increment for\n                      frames that are 1519\
    \ octets or larger.  When\n                      vgRptrInfoCurrentFramingType\
    \ is equal to\n                      frameType88025 this counter will increment\
    \ for\n                      frames that are 4521 octets or larger.\n        \
    \              This counter may experience a discontinuity when\n            \
    \          the value of the corresponding instance of\n                      vgRptrPortLastChange\
    \ changes.\"\n              REFERENCE\n                      \"IEEE Standard 802.12-1995,\
    \ 13.2.4.5.1,\n                      aOversizeFramesReceived.\"\n            \
    \  ::= { vgRptrMonPortEntry 20 }\n          vgRptrPortDataErrorFrames OBJECT-TYPE\n\
    \              SYNTAX     Counter32\n              MAX-ACCESS read-only\n    \
    \          STATUS     current\n              DESCRIPTION\n                   \
    \   \"This object is a count of errored frames\n                      received\
    \ on this port.  This counter is\n                      incremented by one for\
    \ each frame received on\n                      this port with any of the following\
    \ errors: bad\n                      FCS (with no IPM), PMI errors (excluding\
    \ frames\n                      with an IPM error as the only PMI error), or\n\
    \                      undersize (with no IPM).  Does not include\n          \
    \            packets counted by vgRptrPortIPMFrames,\n                      vgRptrPortOversizeFrames,\
    \ or\n                      vgRptrPortNullAddressedFrames.\n                 \
    \     This counter indicates problems with cables or\n                      devices\
    \ directly connected to this repeater, while\n                      vgRptrPortIPMFrames\
    \ indicates problems occurring\n                      in the domain of other repeaters.\n\
    \                      This counter may experience a discontinuity when\n    \
    \                  the value of the corresponding instance of\n              \
    \        vgRptrPortLastChange changes.\"\n              REFERENCE\n          \
    \            \"IEEE Standard 802.12-1995, 13.2.4.5.1,\n                      aDataErrorFramesReceived.\"\
    \n              ::= { vgRptrMonPortEntry 21 }\n          vgRptrPortPriorityPromotions\
    \ OBJECT-TYPE\n              SYNTAX     Counter32\n              MAX-ACCESS read-only\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"This counter is incremented by one each time the\n                 \
    \     priority promotion timer has expired on this port\n                    \
    \  and a normal priority frame is priority\n                      promoted.\n\
    \                      This counter may experience a discontinuity when\n    \
    \                  the value of the corresponding instance of\n              \
    \        vgRptrPortLastChange changes.\"\n              REFERENCE\n          \
    \            \"IEEE Standard 802.12-1995, 13.2.4.5.1,\n                      aPriorityPromotions.\"\
    \n              ::= { vgRptrMonPortEntry 22 }\n          vgRptrPortTransitionToTrainings\
    \ OBJECT-TYPE\n              SYNTAX     Counter32\n              MAX-ACCESS read-only\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"This counter is incremented by one each time the\n                 \
    \     vgRptrPortStatus object for this port transitions\n                    \
    \  into the 'training' state.\n                      This counter may experience\
    \ a discontinuity when\n                      the value of the corresponding instance\
    \ of\n                      vgRptrPortLastChange changes.\"\n              REFERENCE\n\
    \                      \"IEEE Standard 802.12-1995, 13.2.4.5.1,\n            \
    \          aTransitionsIntoTraining.\"\n              ::= { vgRptrMonPortEntry\
    \ 23 }\n          vgRptrPortLastChange OBJECT-TYPE\n              SYNTAX     TimeStamp\n\
    \              MAX-ACCESS read-only\n              STATUS     current\n      \
    \        DESCRIPTION\n                      \"The value of sysUpTime when the\
    \ last of the\n                      following occurred:\n                   \
    \     1) the agent cold- or warm-started;\n                        2) the row\
    \ for the port was created\n                           (such as when a device\
    \ or module was\n                           added to the system); or\n       \
    \                 3) any condition that would cause one of\n                 \
    \          the counters for the row to experience\n                          \
    \ a discontinuity.\"\n              ::= { vgRptrMonPortEntry 24 }\n          vgRptrAddrTrack\
    \   OBJECT IDENTIFIER ::= { vgRptrObjects 3 }\n          vgRptrAddrTrackRptr\n\
    \              OBJECT IDENTIFIER ::= { vgRptrAddrTrack 1 }\n          -- Currently\
    \ unused\n          vgRptrAddrTrackGroup\n              OBJECT IDENTIFIER ::=\
    \ { vgRptrAddrTrack 2 }\n          -- Currently unused\n          vgRptrAddrTrackPort\n\
    \              OBJECT IDENTIFIER ::= { vgRptrAddrTrack 3 }\n          vgRptrAddrTrackTable\
    \ OBJECT-TYPE\n              SYNTAX     SEQUENCE OF VgRptrAddrTrackEntry\n   \
    \           MAX-ACCESS not-accessible\n              STATUS     current\n    \
    \          DESCRIPTION\n                  \"Table of address mapping information\
    \ about the\n                  ports.\"\n              ::= { vgRptrAddrTrackPort\
    \ 1 }\n          vgRptrAddrTrackEntry OBJECT-TYPE\n              SYNTAX     VgRptrAddrTrackEntry\n\
    \              MAX-ACCESS not-accessible\n              STATUS     current\n \
    \             DESCRIPTION\n                  \"An entry in the table, containing\
    \ address mapping\n                  information about a single port.\"\n    \
    \          INDEX      { vgRptrGroupIndex, vgRptrPortIndex }\n              ::=\
    \ { vgRptrAddrTrackTable 1 }\n          VgRptrAddrTrackEntry ::=\n           \
    \   SEQUENCE {\n                  vgRptrAddrLastTrainedAddress   OCTET STRING,\n\
    \                  vgRptrAddrTrainedAddrChanges   Counter32,\n               \
    \   vgRptrRptrDetectedDupAddress   TruthValue,\n                  vgRptrMgrDetectedDupAddress\
    \    TruthValue\n              }\n          vgRptrAddrLastTrainedAddress OBJECT-TYPE\n\
    \              SYNTAX     OCTET STRING (SIZE(0 | 6))\n              MAX-ACCESS\
    \ read-only\n              STATUS     current\n              DESCRIPTION\n   \
    \                   \"This object is the MAC address of the last\n           \
    \           station which succeeded in training on this port.\n              \
    \        A cascaded repeater may train using the null\n                      address.\
    \  If no stations have succeeded in\n                      training on this port\
    \ since the agent began\n                      monitoring the port activity, the\
    \ agent shall\n                      return a string of length zero.\"\n     \
    \         REFERENCE\n                      \"IEEE Standard 802.12-1995, 13.2.4.5.1,\n\
    \                      aLastTrainedAddress.\"\n              ::= { vgRptrAddrTrackEntry\
    \ 1 }\n          vgRptrAddrTrainedAddrChanges OBJECT-TYPE\n              SYNTAX\
    \     Counter32\n              MAX-ACCESS read-only\n              STATUS    \
    \ current\n              DESCRIPTION\n                      \"This counter is\
    \ incremented by one for each time\n                      that the vgRptrAddrLastTrainedAddress\
    \ object for\n                      this port changes.\"\n              REFERENCE\n\
    \                      \"IEEE Standard 802.12-1995, 13.2.4.5.1,\n            \
    \          aTrainedAddressChanges.\"\n              ::= { vgRptrAddrTrackEntry\
    \ 2 }\n          vgRptrRptrDetectedDupAddress OBJECT-TYPE\n              SYNTAX\
    \     TruthValue\n              MAX-ACCESS read-only\n              STATUS   \
    \  current\n              DESCRIPTION\n                      \"This object is\
    \ used to indicate that the\n                      repeater detected an error-free\
    \ training frame on\n                      this port with a non-null source MAC\
    \ address which\n                      matches the value of vgRptrAddrLastTrainedAddress\n\
    \                      of another active port in the same repeater.  This\n  \
    \                    is reset to 'false' when an error-free training\n       \
    \               frame is received with a non-null source MAC\n               \
    \       address which does not match\n                      vgRptrAddrLastTrainedAddress\
    \ of another port which\n                      is active in the same repeater.\n\
    \                      For the cascade port, this object will be 'true'\n    \
    \                  if the 'D' bit in the most recently received\n            \
    \          error-free training response frame was set,\n                     \
    \ indicating the device at the other end of the link\n                      believes\
    \ that this repeater's cascade port is\n                      using a duplicate\
    \ address.  This may be because\n                      the device at the other\
    \ end of the link detected a\n                      duplicate address itself,\
    \ or, if the other device\n                      is also a repeater, it could\
    \ be because\n                      vgRptrMgrDetectedDupAddress was set to 'true'\
    \ on\n                      the port that this repeater's cascade port is\n  \
    \                    connected to.\"\n              REFERENCE\n              \
    \        \"IEEE Standard 802.12-1995, 13.2.4.5.1,\n                      aLocalRptrDetectedDupAddr.\"\
    \n              ::= { vgRptrAddrTrackEntry 3 }\n          vgRptrMgrDetectedDupAddress\
    \ OBJECT-TYPE\n              SYNTAX     TruthValue\n              MAX-ACCESS read-write\n\
    \              STATUS     current\n              DESCRIPTION\n               \
    \       \"This object can be set by a management station\n                   \
    \   when it detects that there is a duplicate MAC\n                      address.\
    \  This object is OR'd with\n                      vgRptrRptrDetectedDupAddress\
    \ to form the value of\n                      the 'D' bit in training response\
    \ frames on this\n                      port.\n                      The purpose\
    \ of this object is to provide a means\n                      for network management\
    \ software to inform an end\n                      station that it is using a\
    \ duplicate station\n                      address.  Setting this object does\
    \ not affect the\n                      current state of the link; the end station\
    \ will\n                      not be informed of the duplicate address until it\n\
    \                      retrains for some reason.  Note that regardless\n     \
    \                 of its station address, the end station will not\n         \
    \             be able to train successfully until the network\n              \
    \        management software has set this object back to\n                   \
    \   'false'.  Although this object exists on\n                      cascade ports,\
    \ it does not perform any function\n                      since this repeater\
    \ is the initiator of training\n                      on a cascade port.\"\n \
    \             REFERENCE\n                      \"IEEE Standard 802.12-1995, 13.2.4.5.1,\n\
    \                      aCentralMgmtDetectedDupAddr.\"\n              ::= { vgRptrAddrTrackEntry\
    \ 4 }\n          vgRptrTraps         OBJECT IDENTIFIER ::= { vgRptrMIB 2 }\n \
    \         vgRptrTrapPrefix    OBJECT IDENTIFIER ::= { vgRptrTraps 0 }\n      \
    \    vgRptrHealth NOTIFICATION-TYPE\n              OBJECTS    { vgRptrInfoOperStatus\
    \ }\n              STATUS     current\n              DESCRIPTION\n           \
    \           \"A vgRptrHealth trap conveys information related\n              \
    \        to the operational state of a repeater.  This trap\n                \
    \      is sent when the value of an instance of\n                      vgRptrInfoOperStatus\
    \ changes.  The vgRptrHealth\n                      trap is not sent as a result\
    \ of powering up a\n                      repeater.\n                      The\
    \ vgRptrHealth trap must contain the instance of\n                      the vgRptrInfoOperStatus\
    \ object associated with\n                      the affected repeater.\n     \
    \                 The agent must throttle the generation of\n                \
    \      consecutive vgRptrHealth traps so that there is at\n                  \
    \    least a five-second gap between traps of this\n                      type.\
    \  When traps are throttled, they are dropped,\n                      not queued\
    \ for sending at a future time.  (Note\n                      that 'generating'\
    \ a trap means sending to all\n                      configured recipients.)\"\
    \n              REFERENCE\n                      \"IEEE 802.12, Layer Management,\
    \ 13.2.4.2.3,\n                      nRepeaterHealth.\"\n              ::= { vgRptrTrapPrefix\
    \ 1 }\n          vgRptrResetEvent NOTIFICATION-TYPE\n              OBJECTS   \
    \ { vgRptrInfoOperStatus }\n              STATUS     current\n              DESCRIPTION\n\
    \                      \"A vgRptrResetEvent trap conveys information\n       \
    \               related to the operational state of a repeater.\n            \
    \          This trap is sent on completion of a repeater\n                   \
    \   reset action.  A repeater reset action is defined\n                      as\
    \ a transition to its initial state as specified\n                      in clause\
    \ 12 [IEEE Std 802.12] when triggered by\n                      a management command.\n\
    \                      The vgRptrResetEvent trap is not sent when the\n      \
    \                agent restarts and sends an SNMP coldStart or\n             \
    \         warmStart trap.\n                      The vgRptrResetEvent trap must\
    \ contain the\n                      instance of the vgRptrInfoOperStatus object\n\
    \                      associated with the affected repeater.\n              \
    \        The agent must throttle the generation of\n                      consecutive\
    \ vgRptrResetEvent traps so that there\n                      is at least a five-second\
    \ gap between traps of\n                      this type.  When traps are throttled,\
    \ they are\n                      dropped, not queued for sending at a future\
    \ time.\n                      (Note that 'generating' a trap means sending to\n\
    \                      all configured recipients.)\"\n              REFERENCE\n\
    \                      \"IEEE 802.12, Layer Management, 13.2.4.2.3,\n        \
    \              nRepeaterReset.\"\n              ::= { vgRptrTrapPrefix 2 }\n \
    \         -- conformance information\n          vgRptrConformance OBJECT IDENTIFIER\
    \ ::= { vgRptrMIB 3 }\n          vgRptrCompliances\n                       OBJECT\
    \ IDENTIFIER ::= { vgRptrConformance 1 }\n          vgRptrGroups OBJECT IDENTIFIER\
    \ ::= { vgRptrConformance 2 }\n          -- compliance statements\n          vgRptrCompliance\
    \ MODULE-COMPLIANCE\n              STATUS     current\n              DESCRIPTION\n\
    \                      \"The compliance statement for managed 802.12\n       \
    \               repeaters.\"\n              MODULE  -- this module\n         \
    \         MANDATORY-GROUPS { vgRptrConfigGroup,\n                            \
    \         vgRptrStatsGroup,\n                                     vgRptrAddrGroup,\n\
    \                                     vgRptrNotificationsGroup }\n           \
    \       GROUP        vgRptrStats64Group\n                  DESCRIPTION\n     \
    \                    \"Implementation of this group is recommended\n         \
    \                for systems which can support Counter64.\"\n                \
    \  OBJECT       vgRptrInfoDesiredFramingType\n                  MIN-ACCESS   read-only\n\
    \                  DESCRIPTION\n                          \"Write access to this\
    \ object is not required\n                          in a repeater system that\
    \ does not support\n                          configuration of framing types.\"\
    \n              MODULE     SNMP-REPEATER-MIB\n                  GROUP        snmpRptrGrpRptrAddrSearch\n\
    \                  DESCRIPTION\n                          \"Implementation of\
    \ this group is recommended\n                          for systems which have\
    \ the necessary\n                          instrumentation to search all incoming\
    \ data\n                          streams for a particular source MAC address.\"\
    \n              ::= { vgRptrCompliances 1 }\n          -- units of conformance\n\
    \          vgRptrConfigGroup OBJECT-GROUP\n              OBJECTS    {\n      \
    \                     vgRptrInfoMACAddress,\n                           vgRptrInfoCurrentFramingType,\n\
    \                           vgRptrInfoDesiredFramingType,\n                  \
    \         vgRptrInfoFramingCapability,\n                           vgRptrInfoTrainingVersion,\n\
    \                           vgRptrInfoOperStatus,\n                          \
    \ vgRptrInfoReset,\n                           vgRptrInfoLastChange,\n       \
    \                    vgRptrGroupObjectID,\n                           vgRptrGroupOperStatus,\n\
    \                           vgRptrGroupPortCapacity,\n                       \
    \    vgRptrGroupCablesBundled,\n                           vgRptrPortType,\n \
    \                          vgRptrPortAdminStatus,\n                          \
    \ vgRptrPortOperStatus,\n                           vgRptrPortSupportedPromiscMode,\n\
    \                           vgRptrPortSupportedCascadeMode,\n                \
    \           vgRptrPortAllowedTrainType,\n                           vgRptrPortLastTrainConfig,\n\
    \                           vgRptrPortTrainingResult,\n                      \
    \     vgRptrPortPriorityEnable,\n                           vgRptrPortRptrInfoIndex\n\
    \                         }\n              STATUS     current\n              DESCRIPTION\n\
    \                      \"A collection of objects for managing the status\n   \
    \                   and configuration of IEEE 802.12 repeaters.\"\n          \
    \    ::= { vgRptrGroups 1 }\n          vgRptrStatsGroup OBJECT-GROUP\n       \
    \       OBJECTS    {\n                           vgRptrMonTotalReadableFrames,\n\
    \                           vgRptrMonTotalReadableOctets,\n                  \
    \         vgRptrMonReadableOctetRollovers,\n                           vgRptrMonTotalErrors,\n\
    \                           vgRptrPortReadableFrames,\n                      \
    \     vgRptrPortReadableOctets,\n                           vgRptrPortReadOctetRollovers,\n\
    \                           vgRptrPortUnreadableOctets,\n                    \
    \       vgRptrPortUnreadOctetRollovers,\n                           vgRptrPortHighPriorityFrames,\n\
    \                           vgRptrPortHighPriorityOctets,\n                  \
    \         vgRptrPortHighPriOctetRollovers,\n                           vgRptrPortNormPriorityFrames,\n\
    \                           vgRptrPortNormPriorityOctets,\n                  \
    \         vgRptrPortNormPriOctetRollovers,\n                           vgRptrPortBroadcastFrames,\n\
    \                           vgRptrPortMulticastFrames,\n                     \
    \      vgRptrPortNullAddressedFrames,\n                           vgRptrPortIPMFrames,\n\
    \                           vgRptrPortOversizeFrames,\n                      \
    \     vgRptrPortDataErrorFrames,\n                           vgRptrPortPriorityPromotions,\n\
    \                           vgRptrPortTransitionToTrainings,\n               \
    \            vgRptrPortLastChange\n                         }\n              STATUS\
    \     current\n              DESCRIPTION\n                      \"A collection\
    \ of objects for providing statistics\n                      for IEEE 802.12 repeaters.\
    \  Systems which support\n                      Counter64 should also implement\n\
    \                      vgRptrStats64Group.\"\n              ::= { vgRptrGroups\
    \ 2 }\n          vgRptrStats64Group OBJECT-GROUP\n              OBJECTS    {\n\
    \                           vgRptrMonHCTotalReadableOctets,\n                \
    \           vgRptrPortHCReadableOctets,\n                           vgRptrPortHCUnreadableOctets,\n\
    \                           vgRptrPortHCHighPriorityOctets,\n                \
    \           vgRptrPortHCNormPriorityOctets\n                         }\n     \
    \         STATUS     current\n              DESCRIPTION\n                    \
    \  \"A collection of objects for providing statistics\n                      for\
    \ IEEE 802.12 repeaters in a system that\n                      supports Counter64.\"\
    \n              ::= { vgRptrGroups 3 }\n          vgRptrAddrGroup OBJECT-GROUP\n\
    \              OBJECTS    {\n                           vgRptrAddrLastTrainedAddress,\n\
    \                           vgRptrAddrTrainedAddrChanges,\n                  \
    \         vgRptrRptrDetectedDupAddress,\n                           vgRptrMgrDetectedDupAddress\n\
    \                         }\n              STATUS     current\n              DESCRIPTION\n\
    \                      \"A collection of objects for tracking addresses\n    \
    \                  on IEEE 802.12 repeaters.\"\n              ::= { vgRptrGroups\
    \ 4 }\n          vgRptrNotificationsGroup NOTIFICATION-GROUP\n              NOTIFICATIONS\
    \ {\n                              vgRptrHealth,\n                           \
    \   vgRptrResetEvent\n                            }\n              STATUS    \
    \    current\n              DESCRIPTION\n                      \"A collection\
    \ of notifications used to indicate\n                      802.12 repeater general\
    \ status changes.\"\n              ::= { vgRptrGroups 5 }\n          END\n"
- title: 4.  Acknowledgements
  contents:
  - "4.  Acknowledgements\n   This document was produced by the IETF 100VG-AnyLAN\
    \ Working Group,\n   whose efforts were greatly advanced by the contributions\
    \ of the\n   following people:\n       Paul Chefurka\n       Bob Faulk\n     \
    \  Jeff Johnson\n       Karen Kimball\n       David Lapp\n       Jason Spofford\n\
    \       Kaj Tesink\n   This document is based on the work of IEEE 802.12.\n"
- title: 5.  References
  contents:
  - "5.  References\n   [1] Information processing systems - Open Systems Interconnection\
    \ -\n       Specification of Abstract Syntax Notation One (ASN.1),\n       International\
    \ Organization for Standardization.  International\n       Standard 8824 (December,\
    \ 1987).\n   [2] SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M. and\n\
    \       S. Waldbusser, \"Structure of Management Information for Version 2\n \
    \      of the Simple Network Management Protocol (SNMPv2)\", RFC 1902,\n     \
    \  January 1996.\n   [3] SNMPv2 Working Group, Case, J., McCloghrie, K., Rose,\
    \ M. and\n       S. Waldbusser, \"Textual Conventions for Version 2 of the Simple\n\
    \       Network Management Protocol (SNMPv2)\", RFC 1903, January 1996.\n   [4]\
    \ SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M. and\n       S. Waldbusser,\
    \ \"Conformance Statements for Version 2 of the\n       Simple Network Management\
    \ Protocol (SNMPv2)\", RFC 1904, January\n       1996.\n   [5] McCloghrie, K.\
    \ and M. Rose, \"Management Information Base for\n       Network Management of\
    \ TCP/IP-based internets - MIB-II\", STD 17,\n       RFC 1213, March 1991.\n \
    \  [6] IEEE, \"Demand Priority Access Method, Physical Layer and\n       Repeater\
    \ Specifications for 100 Mb/s Operation\", IEEE Standard\n       802.12-1995\"\
    \n   [7] de Graaf, K., D. Romascanu, D. McMaster, and K. McCloghrie,\n       \"\
    Definitions of Managed Objects for IEEE 802.3 Repeater Devices\",\n       RFC\
    \ 2108, 3Com Corporation, Madge Networks (Israel) Ltd., Cisco\n       Systems,\
    \ Inc., February, 1997.\n   [8] McAnally, G., Gilbert, D. and J. Flick, \"Conditional\
    \ Grant of\n       Rights to Specific Hewlett-Packard Patents In Conjunction With\n\
    \       the Internet Engineering Task Force's Internet-Standard Network\n    \
    \   Management Framework\", RFC 1988, August 1996.\n   [9] Hewlett-Packard Company,\
    \ US Patents 5,293,635 and 5,421,024.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Certain management information defined in this\
    \ MIB may be considered\n   sensitive in some network environments.  Therefore,\
    \ authentication of\n   received SNMP requests and controlled access to management\n\
    \   information should be employed in such environments.  The method for\n   this\
    \ authentication is a function of the SNMP Administrative\n   Framework, and has\
    \ not been expanded by this MIB.\n   Several objects in the vgRptrConfigGroup\
    \ allow write access.  Setting\n   these objects can have a serious effect on\
    \ the operation of the\n   network, including modifying the framing type of the\
    \ network,\n   resetting the repeater, enabling and disabling individual ports,\
    \ and\n   modifying the allowed capabilities of end stations attached to each\n\
    \   port.  It is recommended that implementers seriously consider whether\n  \
    \ set operations should be allowed without providing, at a minimum,\n   authentication\
    \ of request origin.\n   One particular object in this MIB, vgRptrPortAllowedTrainType,\
    \ is\n   considered significant for providing operational security in an\n   802.12\
    \ network.  It is recommended that network administrators\n   configure this object\
    \ to the 'allowEndNodesOnly' value on all ports\n   except ports which the administrator\
    \ knows are attached to cascaded\n   repeaters or devices which require promiscuous\
    \ receive capability\n   (bridges, switches, RMON probes, etc.).  This will prevent\n\
    \   unauthorized users from extending the network (by attaching cascaded\n   repeaters\
    \ or bridges) without the administrator's knowledge, and will\n   prevent unauthorized\
    \ end nodes from listening promiscuously to\n   network traffic.\n"
- title: 7.  Author's Address
  contents:
  - "7.  Author's Address\n   John Flick\n   Hewlett Packard Company\n   8000 Foothills\
    \ Blvd. M/S 5556\n   Roseville, CA 95747-5556\n   Phone: +1 916 785 4018\n   Email:\
    \ johnf@hprnd.rose.hp.com\n"
- title: 8.  Full Copyright Statement
  contents:
  - "8.  Full Copyright Statement\n   Copyright (C) The Internet Society (1998). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
