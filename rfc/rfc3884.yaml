- title: __initial_text__
  contents:
  - '            Use of IPsec Transport Mode for Dynamic Routing

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This document is not a candidate for any level of Internet Standard.\n\
    \   The IETF disclaims any knowledge of the fitness of this document for\n   any\
    \ purpose, and in particular notes that it has not had IETF review\n   for such\
    \ things as security, congestion control or inappropriate\n   interaction with\
    \ deployed protocols.  The RFC Editor has chosen to\n   publish this document\
    \ at its discretion.  Readers of this document\n   should exercise caution in\
    \ evaluating its value for implementation\n   and deployment.\n"
- title: Abstract
  contents:
  - "Abstract\n   IPsec can secure the links of a multihop network to protect\n  \
    \ communication between trusted components, e.g., for a secure virtual\n   network\
    \ (VN), overlay, or virtual private network (VPN). Virtual\n   links established\
    \ by IPsec tunnel mode can conflict with routing and\n   forwarding inside VNs\
    \ because IP routing depends on references to\n   interfaces and next-hop IP addresses.\
    \ The IPsec tunnel mode\n   specification is ambiguous on this issue, so even\
    \ compliant\n   implementations cannot be trusted to avoid conflicts.  An alternative\n\
    \   to tunnel mode uses non-IPsec IPIP encapsulation together with IPsec\n   transport\
    \ mode, which we call IIPtran.  IPIP encapsulation occurs as\n   a separate initial\
    \ step, as the result of a forwarding lookup of the\n   VN packet. IPsec transport\
    \ mode processes the resulting (tunneled) IP\n   packet with an SA determined\
    \ through a security association database\n   (SAD) match on the tunnel header.\
    \  IIPtran supports dynamic routing\n   inside the VN without changes to the current\
    \ IPsec architecture.\n   IIPtran demonstrates how to configure any compliant\
    \ IPsec\n   implementation to avoid the aforementioned conflicts.  IIPtran is\n\
    \   also compared to several alternative mechanisms for VN routing and\n   their\
    \ respective impact on IPsec, routing, policy enforcement, and\n   interactions\
    \ with the Internet Key Exchange (IKE).\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n       1.2.  Document History . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   2.  Problem Description. . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n       2.1.  IPsec Overview . . . . . . . . . . . . . . . . . .\
    \ . . .  5\n       2.2.  Forwarding Example . . . . . . . . . . . . . . . . .\
    \ . .  6\n       2.3.  Problem 1: Forwarding Issues . . . . . . . . . . . . .\
    \ .  7\n       2.4.  Problem 2: Source Address Selection  . . . . . . . . . .\
    \  8\n   3.  IIPtran: IPIP Tunnel Devices + IPsec Transport Mode  . . . . .  9\n\
    \       3.1.  IIPtran Details  . . . . . . . . . . . . . . . . . . . . 10\n  \
    \     3.2.  Solving Problem 1: Forwarding Issues . . . . . . . . . . 11\n    \
    \   3.3.  Solving Problem 2: Source Address Selection  . . . . . . 12\n   4. \
    \ Comparison . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n       4.1.\
    \  Other Proposed Solutions . . . . . . . . . . . . . . . . 12\n             4.1.1.\
    \  Alternative 1: IPsec with Interface SAs. . . . . 13\n             4.1.2.  Alternative\
    \ 2: IPsec with Initial\n                     Forwarding Lookup. . . . . . . .\
    \ . . . . . . . . 13\n             4.1.3.  Alternative 3: IPsec with Integrated\n\
    \                     Forwarding . . . . . . . . . . . . . . . . . . . 14\n  \
    \     4.2.  Discussion . . . . . . . . . . . . . . . . . . . . . . . 14\n    \
    \         4.2.1.  VN Routing Support and Complexity  . . . . . . . 14\n      \
    \       4.2.2.  Impact on the IPsec Architecture . . . . . . . . 15\n        \
    \     4.2.3.  Policy Enforcement and Selectors . . . . . . . . 16\n          \
    \   4.2.4.  IKE Impact . . . . . . . . . . . . . . . . . . . 19\n   5.  Security\
    \ Considerations  . . . . . . . . . . . . . . . . . . . 19\n   6.  Summary and\
    \ Recommendations  . . . . . . . . . . . . . . . . . 20\n   7.  Acknowledgments\
    \  . . . . . . . . . . . . . . . . . . . . . . . 20\n   8.  References . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . 20\n       8.1.  Normative References\
    \ . . . . . . . . . . . . . . . . . . 20\n       8.2.  Informative References\
    \ . . . . . . . . . . . . . . . . . 21\n   A.  Encapsulation/Decapsulation Issues\
    \ . . . . . . . . . . . . . . 22\n       A.1.  Encapsulation Issues . . . . .\
    \ . . . . . . . . . . . . . 22\n       A.2.  Decapsulation Issues . . . . . .\
    \ . . . . . . . . . . . . 23\n       A.3.  Appendix Summary . . . . . . . . .\
    \ . . . . . . . . . . . 23\n       Authors' Addresses . . . . . . . . . . . .\
    \ . . . . . . . . . . 24\n       Full Copyright Statement . . . . . . . . . .\
    \ . . . . . . . . . 25\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The IP security architecture (IPsec) consists of two modes,\
    \ transport\n   mode and tunnel mode [1].  Transport mode is allowed between two\
    \ end\n   hosts only; tunnel mode is required when at least one of the\n   endpoints\
    \ is a \"security gateway\" (intermediate system that\n   implements IPsec functionality,\
    \ e.g., a router.)\n   IPsec can be used to secure the links of a virtual network\
    \ (VN),\n   creating a secure VN.  In a secure VN, trusted routers inside the\n\
    \   network dynamically forward packets in the clear (internally), and\n   exchange\
    \ the packets on secure tunnels, where paths may traverse\n   multiple tunnels.\
    \  Contrast this to the conventional 'virtual private\n   network' (VPN), which\
    \ often assumes that paths tend to traverse one\n   secure tunnel to resources\
    \ in a secure core.  A general secure VN\n   allows this secure core to be distributed,\
    \ composed of trusted or\n   privately-managed resources anywhere in the network.\n\
    \   This document addresses the use of IPsec to secure the links of a\n   multihop,\
    \ distributed VN.  It describes how virtual links established\n   by IPsec tunnel\
    \ mode can conflict with routing and forwarding inside\n   the VN, due to the\
    \ IP routing dependence on references to interfaces\n   and next-hop IP addresses.\n\
    \   This document proposes a solution called IIPtran that separates the\n   step\
    \ of IP tunnel encapsulation from IPsec processing.  The solution\n   combines\
    \ a subset of the current IPsec architecture with other\n   Internet standards\
    \ to arrive at an interoperable equivalent that is\n   both simpler and has a\
    \ modular specification.\n   Later sections of this document compare IIPtran to\
    \ other proposals\n   for dynamic routing inside VPNs, focusing on the impact\
    \ the different\n   proposals have on the overall IPsec architecture, routing\
    \ protocols,\n   security policy enforcement, and the Internet Key Exchange (IKE)\n\
    \   [9][10].  An appendix addresses IP tunnel processing issues in IPsec\n   related\
    \ to IPIP encapsulation and decapsulation.\n   This document assumes familiarity\
    \ with other Internet standards\n   [1][2], notably with terminology and numerous\
    \ acronyms therein.\n"
- title: 1.2.  Document History
  contents:
  - "1.2.  Document History\n   This document was first issued as an Internet Draft\
    \ on March 10,\n   2000, entitled \"Use of IPSEC Transport Mode for Virtual Networks,\"\
    \n   and was first presented in the IPsec WG at the 47th IETF in Adelaide\n  \
    \ in March 2000.  It was subsequently revised and presented to the\n   PPVPN WG\
    \ at the 51st IETF in London in August 2001, to the IPsec WG\n   at the 52nd IETF\
    \ in Salt Lake City in December 2001, and to both the\n   IPsec and PPVPN WGs\
    \ at the 53rd IETF in Minneapolis in March 2002.\n   Version 04 of this draft\
    \ was submitted for publication as an\n   Informational RFC based on suggestions\
    \ by the IPsec WG in June 2002,\n   and was under IESG review from then until\
    \ version 07 was approved for\n   publication in June 2004.  During that time,\
    \ it was substantively\n   revised according to feedback from the IESG regarding\
    \ interactions\n   with the IPsec specification (RFC 2401 [1]) and other protocols,\
    \ with\n   regard to security and compatibility issues.\n"
- title: 2.  Problem Description
  contents:
  - "2.  Problem Description\n   Virtual networks connect subsets of resources of\
    \ an underlying base\n   network, and present the result as a virtual network\
    \ layer to upper-\n   layer protocols.  Similar to a real network, virtual networks\
    \ consist\n   of virtual hosts (packet sources and sinks) and virtual routers\n\
    \   (packet transits), both of which can have a number of network\n   interfaces,\
    \ and links, which connect multiple network interfaces\n   together.  Virtual\
    \ links (also called tunnels, especially when\n   point-to-point) are one-hop\
    \ links in the VN topology, but are either\n   direct links or paths (sequences\
    \ of connected links) in the\n   underlying base network.\n   Base network hosts\
    \ and routers can be part of multiple virtual\n   networks at the same time, and\
    \ their role in the base network does\n   not need to coincide with their role\
    \ in a virtual network (i.e., base\n   network hosts may act as VN routers or\
    \ hosts, as may base network\n   routers).\n   It is important to note that this\
    \ definition of a VN is more general\n   than some other definitions, where the\
    \ VN participation of end\n   systems is limited.  Some proposals only allow end\
    \ systems to be part\n   of a single VN, or even only allow them to be part of\
    \ the VN and not\n   the base network, substituting the VN for the Internet. \
    \ The\n   definition above explicitly allows hosts and routers to participate\n\
    \   in multiple, parallel VNs, and allows layered VNs (VN inside VN).\n   It can\
    \ be useful for a VN to secure its virtual links [3][4],\n   resulting in a VPN.\
    \  This is not equivalent to end-to-end security,\n   but can be useful when end\
    \ hosts do not support secure communication\n   themselves.  It can provide an\
    \ additional level of hop-by-hop network\n   security to secure routing in the\
    \ VPN and isolate the traffic of\n   different VPNs.\n   The topology of an IPsec\
    \ VPN commonly consists of IPsec tunnel mode\n   virtual links, as required by\
    \ the IPsec architecture when the\n   communicating peers are gateway pairs, or\
    \ a host and a gateway [1].\n   However, this current required use of IPsec tunnel\
    \ mode can be\n   incompatible with dynamic routing [3].\n   The next section\
    \ provides a short overview on IPsec transport and\n   tunnel mode processing,\
    \ as far as it is relevant for the\n   understanding of the problem scenarios\
    \ that follow.  The following\n   sections discuss routing problems in detail,\
    \ based on a common\n   example.\n"
- title: 2.1.  IPsec Overview
  contents:
  - "2.1.  IPsec Overview\n   There are two modes of IPsec, transport mode and tunnel\
    \ mode [1].\n   Transport mode secures portions of the existing IP header and\
    \ the\n   payload data of the packet, and inserts an IPsec header between the\n\
    \   IP header and the payload; tunnel mode adds an additional IP header\n   before\
    \ performing similar operations.  This section gives a short\n   overview of the\
    \ relevant processing steps for both modes.\n   In transport mode, IPsec inserts\
    \ a security protocol header into\n   outgoing IP packets between the original\
    \ IP header and the packet\n   payload (Figure 1) [5][6][11][12].  The contents\
    \ of the IPsec header\n   are based on the result of a \"security association\"\
    \ (SA) lookup that\n   uses the contents of the original packet header (Figure\
    \ 1, arrow) as\n   well as its payload (especially transport layer headers) to\
    \ locate an\n   SA in the security association database (SAD).\n   Original Outbound\
    \ Packet       Outbound Packet (IPsec Transport Mode)\n   +-----------+---------+\
    \        +-----------+==============+---------+\n   | IP Header | Payload |  \
    \      | IP Header | IPsec Header | Payload |\n   +-----------+---------+    \
    \    +-----------+==============+---------+\n                                \
    \        |             ^\n                                        |          \
    \   |\n                                        +-------------+\n             \
    \                              SA Lookup\n   Figure 1: Outbound Packet Construction\
    \ under IPsec Transport Mode\n   When receiving packets secured with IPsec transport\
    \ mode, a similar\n   SA lookup occurs based on the IP and IPsec headers, followed\
    \ by a\n   verification step after IPsec processing that checks the contents of\n\
    \   the packet and its payload against the respective SA.  The\n   verification\
    \ step is similar to firewall processing.\n   When using tunnel mode, IPsec prepends\
    \ an IPsec header and an\n   additional IP header to the outgoing IP packet (Figure\
    \ 2).  In\n   essence, the original packet becomes the payload of another IP\n\
    \   packet, which IPsec then secures.  This has been described [1] as \"a\n  \
    \ tunnel mode SA is essentially a [transport mode] SA applied to an IP\n   tunnel.\"\
    \ However, there are significant differences between the two,\n   as described\
    \ in the remainder of this section.\n   In IPsec tunnel mode, the IP header of\
    \ the original outbound packet\n   together with its payload (especially transport\
    \ headers) determines\n   the IPsec SA, as for transport mode.  However, a tunnel\
    \ mode SA also\n   contains encapsulation information, including the source and\n\
    \   destination IP addresses for the outer tunnel IP header, which is\n   also\
    \ based on the original outbound packet header and its payload\n   (Figure 2,\
    \ arrows).\n                    Outbound Packet (IPsec Tunnel Mode)\n      +==================+==============+-----------------+---------+\n\
    \      | Tunnel IP Header | IPsec Header | Orig. IP Header | Payload |\n     \
    \ +==================+==============+-----------------+---------+\n          \
    \     ^                ^              | |\n               |                | \
    \             | |\n               |                +--------------+ |\n      \
    \         |                    SA Lookup    |\n               |              \
    \                   |\n               +---------------------------------+\n  \
    \                      IP Encapsulation\n     Figure 2: Outbound Packet Construction\
    \ under IPsec Tunnel Mode\n   When receiving packets secured with tunnel mode\
    \ IPsec, an SA lookup\n   occurs based on the contents of the IPsec header and\
    \ the outer IP\n   header.  Next, the packet is decrypted or authenticated based\
    \ on its\n   IPsec header and the SA, followed by a verification step that checks\n\
    \   the contents of the original packet and its payload (especially the\n   inner\
    \ IP header and transport headers) against the respective SA.\n"
- title: 2.2.  Forwarding Example
  contents:
  - "2.2.  Forwarding Example\n   Consider a VPN topology with virtual links established\
    \ by IPsec\n   tunnel mode SAs, as would be required for compliance with [1].\
    \  Such\n   hop-by-hop security can be useful, for example, to secure VN routing,\n\
    \   and when legacy end systems do not support end-to-end IPsec\n   themselves.\n\
    \   Virtual routers in a VN need to forward packets the same way regular\n   Internet\
    \ routers do: based on the destination IP address and the\n   forwarding table.\
    \  These two determine the next hop IP address the\n   packet should be forwarded\
    \ to (additional header fields and inner\n   headers can be used, e.g., in policy\
    \ routing.)\n   In Figure 3, traffic arrives at gateway A on virtual link 1, having\n\
    \   come from any of the virtual hosts upstream of that virtual link.\n   There\
    \ are two outgoing virtual links for this incoming traffic: out\n   link 3 going\
    \ to the VPN next-hop gateway B, and out link 4 going to\n   the VPN next-hop\
    \ gateway C.\n   For this example, assume the incoming traffic is from a single\
    \ VPN\n   source X, going to a single VPN destination Y. Ellipses (...)\n   represent\
    \ multiple virtual links in Figure 3.\n                                B ---...---\n\
    \                               /           \\\n                             \
    \ / 3           \\\n                             /               \\\n        \
    \        X ---...--- A                 D ---...--- Y\n                   1   \
    \  2   \\                /\n                              \\ 4            /\n\
    \                               \\            /\n                            \
    \    C ---...---\n                Figure 3: Topology of a Virtual Network\n  \
    \ Two problems arise; one is forwarding of VN traffic over IPsec tunnel\n   mode\
    \ links, the other is source address selection on VN end systems.\n"
- title: '2.3.  Problem 1: Forwarding Issues'
  contents:
  - "2.3.  Problem 1: Forwarding Issues\n   Assume a packet from source X to destination\
    \ Y arrives on link 2 at\n   gateway A. Gateway A now needs to both forward and\
    \ encrypt the packet\n   to make progress to the next hop gateway inside the VPN.\n\
    \   Dynamically routed gateways forward packets based on a forwarding\n   table\
    \ managed by a routing daemon that exchanges connectivity\n   information with\
    \ directly connected peers by communicating on its\n   local interfaces.  Entries\
    \ in the forwarding table map destination IP\n   addresses to the IP address of\
    \ a next-hop gateway and an associated\n   outbound interface.\n   The problem\
    \ is that an intermediate router needs to pick a next hop\n   gateway for a transit\
    \ packet based on its destination IP address and\n   the contents of the forwarding\
    \ table.  However, the IPsec\n   architecture does not define if and how tunnel\
    \ mode SAs are\n   represented in the forwarding table.\n   The problem occurs\
    \ when A tries to decide how to forward the packet\n   X->Y.  In a regular IP\
    \ network, this decision depends on a forwarding\n   lookup on destination address\
    \ Y, which indicates the IP address of\n   the next-hop gateway and an associated\
    \ outbound interface.  In the\n   case of a VN, forwarding lookups occur on virtual\
    \ destination\n   addresses.  For the forwarding lookup on such a virtual destination\n\
    \   address to succeed, routes through virtual interfaces (tunnels) must\n   exist\
    \ in the forwarding table.\n   There are two common implementation scenarios for\
    \ tunnel mode SAs:\n   One is based on firewall-like packet matching operations\
    \ where tunnel\n   mode SAs are not virtual interfaces, another is tunnel-based,\
    \ and\n   treats a tunnel mode SA as a virtual interface.  The current IPsec\n\
    \   architecture does not mandate one or the other.\n   Under the first approach,\
    \ the presence of IPsec tunnel mode SAs is\n   invisible to the IP forwarding\
    \ mechanism.  The lookup uses matching\n   rules in the SA lookup process, closer\
    \ to firewall matching than\n   traditional IP forwarding lookups, and independent\
    \ from existing IP\n   forwarding tables.  The SA lookup determines which virtual\
    \ link the\n   packet will be forwarded over, because the tunnel mode SA includes\n\
    \   encapsulation information.  This lookup and the subsequent tunnel\n   mode\
    \ processing both ignore the contents of the existing IP\n   forwarding table,\
    \ whether static or dynamic routing are used.  This\n   type of tunnel mode processing\
    \ is thus incompatible with dynamically\n   routed VPNs.\n   The second approach\
    \ - requiring tunnel mode SAs to be interfaces -\n   can be compatible with dynamically\
    \ routed VPNs (see Section 4)\n   depending on how it is implemented; however,\
    \ IIPtran (see Section 3)\n   has the additional benefit of greatly simplifying\
    \ the IPsec\n   architecture and related specifications, and of being compatible\
    \ with\n   all IPsec specification compliant implementations.\n"
- title: '2.4.  Problem 2: Source Address Selection'
  contents:
  - "2.4.  Problem 2: Source Address Selection\n   A second issue is source address\
    \ selection at the source host.  When\n   an application sends traffic to another\
    \ host, the host must choose an\n   IP source address for the IP packets before\
    \ transmission.\n   When an end system is connected to multiple networks, it must\
    \ set the\n   source address properly to receive return traffic over the correct\n\
    \   network.  When a node participates in a virtual network, it is always\n  \
    \ connected to two networks, the base network and the VN (more if it\n   connects\
    \ to at least two VNs.) The IPsec specification currently does\n   not define\
    \ how tunnel mode SAs integrate with source address\n   selection.\n   For example,\
    \ when communication occurs over a virtual network, the\n   source address must\
    \ lie inside the VN.  When X sends to Y (Figure 3),\n   the source address must\
    \ be the IP address of X's local end of tunnel\n   1. If host A, which has multiple\
    \ interfaces inside the VN, sends to\n   Y, the source address must be the IP\
    \ address of the local end of\n   either tunnel 3 or 4.\n   Most applications\
    \ do not bind to a specific source IP address, and\n   instead let the host pick\
    \ one for their traffic [7].  Rules for\n   source address selection that depend\
    \ heavily on the notions of\n   interfaces and routes.\n   According to [7], the\
    \ IP source address of an outbound packet should:\n   (1) for directly connected\
    \ networks derive from the corresponding\n   interface, or (2) derive from existing\
    \ dynamic or static route\n   entries to the destination, or finally (3) derive\
    \ from the interface\n   attached to a default gateway.\n   Because IPsec tunnel\
    \ mode SAs are not required to be interfaces,\n   rules (1) and (2) may not return\
    \ a usable source address for a given\n   packet.  Consequently, VN packets will\
    \ use the IP address of the\n   local interface connecting to a default gateway\
    \ as their source\n   address.  Often, a default gateway for a host provides connectivity\n\
    \   in the base network underlying the VN.  The outgoing packet will thus\n  \
    \ have a source address in the base network, and a destination address\n   in\
    \ the VN.\n   This can result in numerous problems, including applications that\n\
    \   fail to operate at all, firewalls and admission control failures, and\n  \
    \ may even lead to compromised security.  Consider two cases, one with\n   IPsec\
    \ tunnels configured with no wildcard tunnel addresses, the other\n   using certain\
    \ wildcards.  In both cases, an application whose source\n   address is set by\
    \ RFC 1122 [7] rules may send packets (e.g.) with the\n   source address of that\
    \ host's base network (via the default route)\n   and a destination address of\
    \ the remote tunnel endpoint.\n"
- title: '3.  IIPtran: IPIP Tunnel Devices + IPsec Transport Mode'
  contents:
  - "3.  IIPtran: IPIP Tunnel Devices + IPsec Transport Mode\n   This section introduces\
    \ a solution - called IIPtran - for the two\n   issues identified above.  IIPtran\
    \ replaces IPsec tunnel mode with a\n   combination of IPIP tunnel interfaces\
    \ that support forwarding and\n   source address selection (as per RFC 2003 [2]),\
    \ followed by IPsec\n   transport mode on the encapsulated packet.\n   The IPsec\
    \ architecture [1] defines the appropriate use of IPsec\n   transport mode and\
    \ IPsec tunnel mode (host-to-host communication for\n   the former, and all transit\
    \ communication for the latter).  IIPtran\n   appears to violate this requirement,\
    \ because it uses IPsec transport\n   mode for transit communication.\n   However,\
    \ for an IPIP tunnel between security gateways, the gateways\n   themselves source\
    \ or sink base network traffic when tunneling - they\n   act as hosts in the base\
    \ network.  Thus, IPsec transport mode is also\n   appropriate, if not required,\
    \ for encapsulated traffic, according to\n   [1].\n   As a result, replacing IPsec\
    \ tunnel mode with IPIP tunnel devices and\n   IPsec transport mode is consistent\
    \ with the existing architecture.\n   Furthermore, this does not compromise the\
    \ end-to-end use of IPsec,\n   either inside a VPN or in the base network; it\
    \ only adds IPsec\n   protection to secure virtual links.\n   The next sections\
    \ will give a short overview of IPIP encapsulation,\n   and show it combines with\
    \ IPsec transport mode processing.  This\n   section will then discuss how IIPtran\
    \ addresses each of the problems\n   identified above.\n"
- title: 3.1.  IIPtran Details
  contents:
  - "3.1.  IIPtran Details\n   IIPtran uses IPIP tunnels (as defined in RFC 2003 [2]),\
    \ followed by\n   IPsec transport mode on the encapsulated packet.\n   RFC 2003\
    \ [2] uniquely specifies IPIP encapsulation (placing an IP\n   packet as payload\
    \ inside another IP packet.) Originally developed for\n   MobileIP, it has often\
    \ been adopted when virtual topologies were\n   required.  Examples include virtual\
    \ (overlay) networks to support\n   emerging protocols such as IP Multicast, IPv6,\
    \ and Mobile IP itself,\n   as well as systems that provide private networks over\
    \ the Internet\n   (X-Bone [3] and PPVPN).\n   IPIP outbound packet processing,\
    \ as specified by RFC 2003 [2],\n   tunnels an existing IP packet by prepending\
    \ it with another IP header\n   (Figure 4.)\n                       Outbound Packet\
    \ (IPIP Tunnel)\n              +==================+-----------------+---------+\n\
    \              | Tunnel IP Header | Orig. IP Header | Payload |\n            \
    \  +==================+-----------------+---------+\n                       ^\
    \                  |\n                       |                  |\n          \
    \             +------------------+\n                        IPIP Encapsulation\n\
    \         Figure 4: Outbound Packet Construction for IPIP Tunnel\n   IIPtran performs\
    \ this IPIP processing as a first step, followed by\n   IPsec transport mode processing\
    \ on the resulting IPIP packet (Figure\n   5.)\n            Outbound Packet (IPIP\
    \ Tunnel + IPsec Transport Mode)\n      +==================+==============+-----------------+---------+\n\
    \      | Tunnel IP Header | IPsec Header | Orig. IP Header | Payload |\n     \
    \ +==================+==============+-----------------+---------+\n          \
    \    ^  |               ^               |\n              |  |               |\
    \               |\n              |  +---------------+               |\n      \
    \        |      SA Lookup                   |\n              |               \
    \                   |\n              +----------------------------------+\n  \
    \                     IPIP Encapsulation\n   Figure 5: Outbound Packet Construction\
    \ for IPIP Tunnel with IPsec\n                             Transport Mode\n  \
    \ A key difference between Figure 2 and Figure 5 is that in the\n   proposed solution,\
    \ the IPsec header is based on the outer IP header,\n   whereas under IPsec tunnel\
    \ mode processing, the IPsec header depends\n   on the contents of the inner IP\
    \ header and payload (see Section 2.1).\n   However, the resulting VPN packet\
    \ (Figure 5) on the wire cannot be\n   distinguished from a VPN packet generated\
    \ by IPsec tunnel mode\n   processing (Figure 2); and the two methods inter-operate,\
    \ given\n   appropriate configurations on both ends [3].\n   A detailed discussion\
    \ of the differences between IIPtran, IPsec\n   tunnel mode, and other proposed\
    \ mechanisms follows in Section 4.  The\n   remainder of this section will describe\
    \ how IIPtran combines IPIP\n   tunnel devices with IPsec transport mode to solve\
    \ the problems\n   identified in Section 2.\n"
- title: '3.2.  Solving Problem 1: Forwarding Issues'
  contents:
  - "3.2.  Solving Problem 1: Forwarding Issues\n   Section 2.3 described how IP forwarding\
    \ over IPsec tunnel mode SAs\n   breaks, because tunnel mode SAs are not required\
    \ to be network\n   interfaces.  IIPtran uses RFC 2003 IPIP tunnels [2] to establish\
    \ the\n   topology of the virtual network.  RFC 2003 [2] requires that IPIP\n\
    \   tunnels can be routed to, and have configurable addresses.  Thus,\n   they\
    \ can be references in node's routing table (supporting static\n   routing), as\
    \ well as used by dynamic routing daemons for local\n   communication of reachability\
    \ information.\n   RFC 2003 [2] addressed the issue of inserting an IPsec header\
    \ between\n   the two IP headers that are a result of IPIP encapsulation.  IIPtran\n\
    \   provides further details on this configuration, and demonstrates how\n   it\
    \ enables dynamic routing in a virtual network.\n   It is important to note that\
    \ the RFC 2003 IPIP tunnels [2] already\n   provide a complete virtual network\
    \ that can support static or dynamic\n   routing.  The proposed solution of using\
    \ IPIP tunnel with IPsec\n   transport mode decouples IPsec processing from routing\
    \ and\n   forwarding.  IIPtran's use of IPsec is limited to securing the links\n\
    \   of the VN (creating a VPN), because IPsec (rightly) lacks internal\n   support\
    \ for routing and forwarding.\n"
- title: '3.3.  Solving Problem 2: Source Address Selection'
  contents:
  - "3.3.  Solving Problem 2: Source Address Selection\n   Section 2.4 gave an overview\
    \ of IP source address selection and its\n   dependence on interfaces and routes.\n\
    \   Using RFC 2003 IPIP tunnel devices [2] for VN links, instead of IPsec\n  \
    \ tunnel mode SAs, allows existing multihoming solutions for source\n   address\
    \ selection [1] to solve source address selection in this\n   context as well.\
    \  As indicated in Section 2.4, according to [1], the\n   IP source address of\
    \ an outbound packet is determined by the outbound\n   interface, which is in\
    \ turn determined by existing forwarding\n   mechanism.  Because IPIP tunnels\
    \ are full-fledged interfaces with\n   associated routes (as in Section 3.2 of\
    \ [2]), the routes and address\n   selection as specified in [1] can also operate\
    \ as desired in the\n   context of VN links.\n"
- title: 4.  Comparison
  contents:
  - "4.  Comparison\n   The previous sections described problems when IPsec tunnel\
    \ mode\n   provides VPN links, and proposed a solution.  This section introduces\n\
    \   a number of proposed alternatives, and compares their effect on the\n   IPsec\
    \ architecture, routing, and policy enforcement, among others, to\n   IIPtran.\n"
- title: 4.1.  Other Proposed Solutions
  contents:
  - "4.1.  Other Proposed Solutions\n   This section gives a brief overview of a number\
    \ of alternative\n   proposals that aim at establishing support for dynamic routing\
    \ for\n   IPsec-secured VNs.  The following section then compares these\n   proposals\
    \ in detail.\n   Although some of the alternatives also address the issues identified\n\
    \   above, IIPtran alone also significantly simplifies and modularizes\n   the\
    \ IPsec architecture.\n"
- title: '4.1.1.  Alternative 1: IPsec with Interface SAs'
  contents:
  - "4.1.1.  Alternative 1: IPsec with Interface SAs\n   In the first alternative,\
    \ each IPsec tunnel mode SA is required to\n   act as a full-fledged network interface.\
    \  This SA interface acts as\n   the outbound interface of the virtual destination's\
    \ forwarding table\n   entry.  IPsec dynamically updates the SA interface configuration\
    \ in\n   response to SAD changes, e.g., caused by IKE negotiation.\n   This approach\
    \ supports dynamic routing and existing source address\n   selection rules, but\
    \ requires extensions to the IPsec architecture\n   that define tunnel mode SA\
    \ interfaces and their associated management\n   procedures.\n   It would necessitate\
    \ recapitulating the definition of the entirety of\n   RFC 2003 IPIP encapsulation\
    \ [2], including the association of tunnels\n   with interfaces, inside IPsec.\
    \  This defeats the modular architecture\n   of the Internet, and violates the\
    \ specification of type 4 IP in IP\n   packets as being uniquely defined by a\
    \ single Internet standard (it\n   is already standardized by [2]).\n   This solution\
    \ also requires augmenting the IPsec specification to\n   mandate an implementation\
    \ detail, one that may be difficult to\n   resolve with other IPsec designs, notably\
    \ the BITS (bump-in-the-\n   stack) alternative.  Although the current IPsec specification\
    \ is\n   ambiguous and allows this implementation, an implementation-\n   independent\
    \ design is preferable.\n"
- title: '4.1.2.  Alternative 2: IPsec with Initial Forwarding Lookup'
  contents:
  - "4.1.2.  Alternative 2: IPsec with Initial Forwarding Lookup\n   A second alternative\
    \ is the addition of an extra forwarding lookup\n   before IPsec tunnel mode processing.\
    \  This forwarding lookup will\n   return a \"virtual interface\" identifier,\
    \ which indicates how to route\n   the packet [13].  Due to a lack of concrete\
    \ documentation of this\n   alternative at this time, proposed for an update pending\
    \ to RFC 2401\n   [1], two variants are presumed possible:\n   In the first scenario,\
    \ the extra forwarding lookup indicates the\n   outbound interface of the final\
    \ encapsulated tunnel mode packet,\n   i.e., usually a physical interface in the\
    \ base network.  The tunnel\n   mode SA lookup following the forwarding lookup\
    \ will occur in the\n   per-interface SAD associated with the respective virtual\
    \ interface.\n   In the second scenario, the extra forwarding lookup returns an\n\
    \   outbound tunnel SA interface.  This solution seems to be equivalent\n   to\
    \ the one described above (Section 4.1.1), i.e., all tunnel mode SAs\n   must\
    \ be interfaces, and is not discussed separately below.\n"
- title: '4.1.3.  Alternative 3: IPsec with Integrated Forwarding'
  contents:
  - "4.1.3.  Alternative 3: IPsec with Integrated Forwarding\n   In the third alternative,\
    \ the routing protocols and forwarding\n   mechanisms are modified to consult\
    \ both the routing tables and SADs\n   to make forwarding decision.  To prevent\
    \ IPsec processing from\n   interfering with routing, forwarding table lookup\
    \ must precede SAD\n   lookup.\n   This approach supports dynamic routing, but\
    \ requires changes to\n   routing mechanisms such that SAD contents are included\
    \ in the route\n   exchanges.  It is unclear how transport-layer selectors would\
    \ affect\n   this approach.\n"
- title: 4.2.  Discussion
  contents:
  - "4.2.  Discussion\n   This section compares the three different alternatives and\
    \ IIPtran\n   according to a number of evaluation criteria, such as support for\
    \ VN\n   forwarding, or impact on the IPsec architecture.\n"
- title: 4.2.1.  VN Routing Support and Complexity
  contents:
  - "4.2.1.  VN Routing Support and Complexity\n   This section investigates whether\
    \ the three alternatives and IIPtran\n   support VN routing, especially dynamic\
    \ routing based on existing IP\n   routing protocols.\n   Both IIPtran (IPIP tunnels\
    \ + transport mode) and alternative 1 (per-\n   SA interfaces) establish VN links\
    \ as full-fledged devices that can be\n   referred to in the routing table, as\
    \ well as used for local\n   communication by dynamic routing protocols.  They\
    \ both support static\n   and dynamic VN routing.\n   However, because the current\
    \ IPsec architecture does not require\n   tunnel mode SAs to behave similarly\
    \ to interfaces (some implementers\n   chose alternative 1, but it is not mandated\
    \ by the specification),\n   alternative 1 requires extensions to the current\
    \ IPsec architecture\n   that define the exact behavior of tunnel mode SAs.  The\
    \ proposed\n   solution does not require any such changes to IPsec, and for tunnels\n\
    \   RFC 2003 already specifies those requirements [2].  Furthermore,\n   addition\
    \ of those requirements would be redundant and potentially\n   conflict with RFC\
    \ 2003 [2].\n   Alternative 3 supports dynamic VN routing, but requires modifying\n\
    \   routing protocols and forwarding lookup mechanisms to act or\n   synchronize\
    \ based on SAD entries.  This requires substantial changes\n   to routing software\
    \ and forwarding mechanisms in all participating\n   nodes to interface to the\
    \ internals of IPsec; this would require\n   revising a large number of current\
    \ Internet standards.  It is also\n   not clear how tunnel mode SAs that specify\
    \ port selectors would\n   operate under this scheme, since IP routing has no\
    \ dependence on\n   transport-layer fields.\n   Alternative 2 does not support\
    \ dynamic VN routing.  The additional\n   forwarding lookup before IPsec processing\
    \ is irrelevant, because\n   IPsec tunnel mode SAs are not represented as interfaces,\
    \ and thus\n   invisible to IP routing protocols.\n   Additionally, the forwarding\
    \ lookup suggested for alternative 2 is\n   not compatible with a weak ES model\
    \ described in [1], which requires\n   both an outbound interface indicator as\
    \ well as the IP address of the\n   next-hop gateway.  For example, multiple tunnels\
    \ can use the same\n   outgoing interface and thus same SAD.  The forwarding lookup\
    \ would\n   return only the interface; lacking the next-hop gateway, the correct\n\
    \   SAD entry cannot be determined.  Given the next-hop gateway would not\n  \
    \ help, because the SAD is not indexed by tunnel mode SA encapsulation\n   destination\
    \ IP address.\n   Because alternative 2 fails to support VN routing, it will not\
    \ be\n   discussed in the remainder of this section.\n"
- title: 4.2.2.  Impact on the IPsec Architecture
  contents:
  - "4.2.2.  Impact on the IPsec Architecture\n   IIPtran recognizes that encapsulation\
    \ is already a property of\n   interface processing, and thus relies on IPIP tunnel\
    \ devices to\n   handle the IPIP encapsulation for VN links.  Tunnel mode IPsec\
    \ thus\n   becomes unnecessary and can potentially be removed from the IPsec\n\
    \   architecture, greatly simplifying the specification.\n   Alternative 1 requires\
    \ SAs to be represented as full-fledged\n   interfaces, for the purpose of routing.\
    \  SAD changes must furthermore\n   dynamically update the configuration of these\
    \ SA interfaces.  The\n   IPsec architecture thus needs extensions that define\
    \ the operation of\n   interfaces and their interactions with the forwarding table\
    \ and\n   routes.\n   Additionally, RFC 2401 [1] describes per-interface SADs\
    \ as a\n   component of IPsec.  When tunnel mode SAs themselves act as\n   interfaces,\
    \ the function of per-interface SADs needs clarification as\n   follows:\n   First,\
    \ each tunnel interface SAD must contain exactly one IPsec\n   tunnel mode SA.\
    \  Transport mode SAs are prohibited, because they\n   would not result in IP\
    \ encapsulation (the encapsulation header is\n   part of the tunnel mode SA, a\
    \ transport mode SA would not cause\n   encapsulation), and thus lead to processing\
    \ loops.  Multiple tunnel\n   mode SAs are prohibited, because dynamic routing\
    \ algorithms construct\n   topology information based on per-interface communication.\
    \  Merging\n   different virtual links (tunnels) into a single SA interface can\n\
    \   cause routing events on one virtual link to apply incorrectly to\n   other\
    \ links sharing an SA interface.\n   Second, only the SAD of physical interfaces\
    \ may contain IPsec\n   transport mode SAs; otherwise, the current issues with\
    \ VN routing\n   remain unsolved.\n   In summary, these restrictions cause the\
    \ SADs of SA interfaces to\n   contain only tunnel mode SAs, and the SADs of regular\
    \ interfaces to\n   contain only transport mode SAs.  Thus, tunnel encapsulation\n\
    \   essentially becomes a unique property of the interface, and not\n   IPsec.\n\
    \   IIPtran already recognizes this property.  Consequently, it uses IPIP\n  \
    \ tunnels directly, and combines them with transport mode processing.\n   By eliminating\
    \ the use of tunnel mode, it removes the need for\n   additional constraints on\
    \ the contents of per-interface SAs.\n"
- title: 4.2.3.  Policy Enforcement and Selectors
  contents:
  - "4.2.3.  Policy Enforcement and Selectors\n   On receiving a packet, both IPsec\
    \ tunnel mode and IIPtran decrypt\n   and/or authenticate the packet with the\
    \ same techniques.  IPsec\n   tunnel mode decapsulates and decrypts the packet\
    \ in a single step,\n   followed by a policy check of the inner packet and its\
    \ payload\n   against the respective IPsec tunnel mode SA.  IIPtran uses IPsec\n\
    \   transport mode to decrypt and verify the incoming packet, then passes\n  \
    \ the decrypted IPIP packet on to RFC 2003 IPIP processing [2].  At\n   that point,\
    \ IIPtran can support selector checks on both the header\n   and its payload using\
    \ firewall mechanisms, similar to IPsec tunnel\n   mode processing.\n   The primary\
    \ difference between the two is that IPsec tunnel mode does\n   not require a\
    \ separate processing step for validating packets; once\n   IPsec accepts them\
    \ during the policy check during decapsulation, they\n   are accepted.  IIPtran\
    \ requires additional processing on the\n   decapsulated packets, to validate\
    \ whether they conform to their\n   respective IPsec policy.\n   As noted in Section\
    \ 5.2 of the IPsec architecture document [1], IPsec\n   processing should retain\
    \ information about what SAs matched a given\n   packet, for subsequent IPsec\
    \ or firewall processing.  To allow for\n   complex accept policies, it should\
    \ be possible to reconstruct the\n   format of the original packet at the time\
    \ it first entered a machine\n   based on saved processing context at any time\
    \ during inbound\n   processing.  IIPtran accepts incoming VN packets only if\
    \ they have\n   arrived over a specific IPIP tunnel that was secured with IPsec\n\
    \   transport mode, but as a separate step following IPIP decapsulation.\n   Note\
    \ that IPsec tunnel mode and IIPtran are interoperable [3].\n   Experiments have\
    \ verified this interoperability, notably because\n   there are no differences\
    \ in the resulting packets on the wire, given\n   appropriate keys.\n"
- title: 4.2.3.1.  Selector Expressiveness
  contents:
  - "4.2.3.1.  Selector Expressiveness\n   When looking up an SA for a given packet,\
    \ IPsec allows selectors to\n   match on the contents of the IP header and transport\
    \ headers.\n   IIPtran using existing IPsec cannot support transport header matches,\n\
    \   because SA lookup occurs before decapsulation.  A small extension to\n   IPsec\
    \ can address this issue in a modular way.\n   RFC 2401 [1] explicitly recognizes\
    \ that the transport layer header\n   may be nested several headers deep inside\
    \ the packet, and allows a\n   system to (quote) \"chain through the packet headers\
    \ checking the\n   'Protocol' or 'Next Header' field until it encounters either\
    \ one it\n   recognizes as a transport protocol, or until it reaches one that\n\
    \   isn't on its list of extension headers, or until it encounters an ESP\n  \
    \ header that renders the transport protocol opaque.\"\n   With IIPtran, the SA\
    \ lookup starts on the outer (tunnel) header, and\n   selectors including port\
    \ number information must thus traverse the\n   inner IP header (and possibly\
    \ other headers) before they can match on\n   the transport headers.  IIPtran\
    \ thus requires that IP be a known\n   IPsec \"extension header.\" This recognizes\
    \ that with IPIP\n   encapsulation, IP VNs use the base IP network as a link layer.\n\
    \   Although this small extension to IPsec is not explicitly required, it\n  \
    \ is already implied.\n   Recognizing IP as a valid transport layer over IP also\
    \ allows\n   selectors to match on the contents of the inner (\"transport\") IP\n\
    \   header.  Thus, IPsec selectors under IIPtran can express the same set\n  \
    \ of policies as conventional IPsec tunnel mode.\n   Note that in both cases,\
    \ these policy enforcement rules violate\n   layering by looking at information\
    \ other than the outermost header.\n   This is consistent with IPsec's current\
    \ use of port-based selectors.\n   The next section discusses that selectors may\
    \ not be useful for\n   virtual networks.\n"
- title: 4.2.3.2.  Role of Selectors for VPNs
  contents:
  - "4.2.3.2.  Role of Selectors for VPNs\n   For secure VN links established via\
    \ IPsec tunnel mode SAs, the\n   selectors for the inner (VN) source and destination\
    \ IP addresses\n   often need to be wildcarded to support dynamic routing in a\
    \ VN.\n   Thus, the limitation described in 4.2.3.1 (without the proposed\n  \
    \ extension) may not be important in a VN scenario.\n   Consider a four-node VN\
    \ with nodes A, B, C, and N (Figure 6).\n   Consider the case where N is either\
    \ a new node joining an existing\n   VPN, or an existing node that had been disconnected\
    \ and was just\n   rediscovered via dynamic routing.\n   In this example, A has\
    \ IPsec tunnel mode SAs to B and C. If the\n   selectors for the virtual source\
    \ and destination IP addresses for\n   those SAs are not wildcards, the SA needs\
    \ to be dynamically modified\n   to permit packets from N to pass over the tunnels\
    \ to B and C. This\n   becomes quickly impractical as VPN sizes grow.\n      \
    \                                  B\n                                       /\n\
    \                                      /\n                                   \
    \  /\n                           N ------ A\n                                \
    \     \\\n                                      \\\n                         \
    \              \\\n                                        C\n               \
    \ Figure 6: Topology of a Virtual Network\n   Thus, IPsec selectors appear much\
    \ less useful in a VPN scenario than\n   expected.  A consequence might be that\
    \ IIPtran - even without\n   extensions to support the full expressiveness of\
    \ tunnel mode SA\n   selectors as described above - can still support the majority\
    \ of VPN\n   scenarios.\n   One purpose of selectors matching on transport header\
    \ content is\n   policy routing.  Different SAs can apply to different applications,\n\
    \   resulting in different apparent virtual topologies.  IIPtran supports\n  \
    \ policy routing in a more modular way, by having existing policy\n   routing\
    \ implementations forward traffic over multiple, parallel VNs.\n   IIPtran supports\
    \ arbitrary IP-based policy routing schemes, while\n   policies are limited by\
    \ the expressiveness of IPsec's selectors in\n   the former case.\n"
- title: 4.2.4.  IKE Impact
  contents:
  - "4.2.4.  IKE Impact\n   The Internet Key Exchange (IKE) [9][10] is a protocol\
    \ to negotiate\n   IPsec keys between end systems dynamically and securely.  It\
    \ is not a\n   strictly required component of IPsec in the sense that two hosts\
    \ can\n   communicate using IPsec without having used IKE to negotiate keys\n\
    \   (through manually keyed SAs, for example).  Despite its name, IKE\n   also\
    \ acts as a tunnel management protocol (when IPsec tunnel mode SAs\n   are configured),\
    \ and negotiates security policies between the peers.\n   Alternatives 1 and 3\
    \ use existing IKE without changes.\n   One possible approach to use IKE with\
    \ IIPtran is to negotiate a\n   tunnel mode SA, and then treat it as a transport\
    \ mode SA against an\n   IPIP tunnel when communicating with conventional peers.\
    \  For policies\n   that do not specify selectors based on transport-layer information,\n\
    \   this establishes interoperability.\n   However, since IIPtran eliminates IPsec\
    \ tunnel mode, it could also\n   simplify IKE, by limiting it to its original\
    \ purpose of key exchange.\n   A new tunnel management protocol (e.g., ATMP [8])\
    \ would set up IPIP\n   tunnels, use an as of yet unspecified second protocol\
    \ to negotiate\n   security policy, and then use IKE to exchange keys for use\
    \ with the\n   policy.\n   Current IKE operation would become a modular composition\
    \ of separate\n   protocols, similar to how IIPtran modularizes IPsec by combining\n\
    \   existing Internet standards.  For example, a VPN link creation could\n   follow\
    \ these steps: (1) IKE negotiation in the base network to secure\n   (2) a subsequent\
    \ tunnel management exchange [8] in the base network,\n   followed by (3) IKE\
    \ exchanges over the established tunnel to create a\n   secure VPN link.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This document addresses security considerations\
    \ throughout, as they\n   are a primary concern of proposed uses of IPsec.\n \
    \  The primary purpose of this document is to extend the use of IPsec to\n   dynamically\
    \ routed VPNs, which will extend the use of IPsec and, it\n   is hoped, increase\
    \ the security of VPN infrastructures using existing\n   protocols.\n"
- title: 6.  Summary and Recommendations
  contents:
  - "6.  Summary and Recommendations\n   This document presents a mechanism consistent\
    \ with the current use of\n   IPsec which supports dynamic routing inside a virtual\
    \ network that\n   uses IPsec to secure its links.  It illustrates how current\
    \ use of\n   IPsec tunnel mode can fail to support dynamic VN routing (depending\n\
    \   on the implementation), and compares IIPtran with several different\n   alternatives.\
    \  It finds that IIPtran, a composite of a subset of\n   IPsec (i.e., transport\
    \ mode) together with existing standard IPIP\n   encapsulation, results in an\
    \ interoperable, standards-conforming\n   equivalent that is both simpler and\
    \ modular.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   The authors would like to thank the members of the X-Bone\
    \ and\n   DynaBone projects at USC/ISI for their contributions to the ideas\n\
    \   behind this document, notably (current) Greg Finn and (past) Amy\n   Hughes,\
    \ Steve Hotz and Anindo Banerjea.\n   The authors would also like to thank Jun-ichiro\
    \ (itojun) Hagino and\n   the KAME project for bringing IKE implications of this\
    \ proposal to\n   our attention, as well as implementing the mechanisms in this\n\
    \   document in the KAME IPv6/IPsec network stack.  Members of several\n   IETF\
    \ WGs (especially IPsec: Stephen Kent, PPVPN: Eric Vyncke, Paul\n   Knight, various\
    \ members of MobileIP) provided valuable input on the\n   details of IPsec processing\
    \ in earlier revisions of this document.\n   Effort sponsored by the Defense Advanced\
    \ Research Projects Agency\n   (DARPA) and Air Force Research Laboratory, Air\
    \ Force Materiel\n   Command, USAF, under agreements number F30602-98-1-0200 entitled\
    \ \"X-\n   Bone\" and number F30602-01-2-0529 entitled \"DynaBone\".\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [1]   Kent, S. and R. Atkinson, \"Security Architecture\
    \ for the\n         Internet Protocol\", RFC 2401, November 1998.\n   [2]   Perkins,\
    \ C., \"IP Encapsulation within IP\", RFC 2003, October\n         1996.\n   [3]\
    \   Touch, J., \"Dynamic Internet overlay deployment and management\n        \
    \ using the X-Bone\", Computer Networks Vol. 36, No. 2-3, July\n         2001.\n\
    \   [4]   Touch, J., Wang, Y., Eggert, L. and G. Finn, \"A Virtual\n         Internet\
    \ Architecture\", ISI Technical Report ISI-TR-570,\n         Workshop on Future\
    \ Directions in Network Architecture (FDNA)\n         2003, March 2003.\n   [5]\
    \   Kent, S. and R. Atkinson, \"IP Authentication Header\", RFC 2402,\n      \
    \   November 1998.\n   [6]   Kent, S. and R. Atkinson, \"IP Encapsulating Security\
    \ Payload\n         (ESP)\", RFC 2406, November 1998.\n   [7]   Braden, R., \"\
    Requirements for Internet Hosts - Communication\n         Layers\", STD 3, RFC\
    \ 1122, October 1989.\n   [8]   Hamzeh, K., \"Ascend Tunnel Management Protocol\
    \ - ATMP\", RFC\n         2107, February 1997.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [9]   Harkins, D. and D. Carrel, \"The Internet\
    \ Key Exchange (IKE)\",\n         RFC 2409, November 1998.\n   [10]  Kaufman,\
    \ C., \"Internet Key Exchange (IKEv2) Protocol\", Work in\n         Progress,\
    \ January 2004.\n   [11]  Kent, S., \"IP Authentication Header\", Work in Progress,\n\
    \         February 2004.\n   [12]  Kent, S., \"IP Encapsulating Security Payload\
    \ (ESP)\", Work in\n         progress, February 2004.\n   [13]  Kent, S., \"Personal\
    \ Communication\", November 2002.\n   [14]  Mogul, J. and S. Deering, \"Path MTU\
    \ discovery\", RFC 1191,\n         November 1990.\n   [15]  Lahey, K., \"TCP Problems\
    \ with Path MTU Discovery\", RFC 2923,\n         September 2000.\n"
- title: Appendix A.  Encapsulation/Decapsulation Issues
  contents:
  - "Appendix A.  Encapsulation/Decapsulation Issues\n   There are inconsistencies\
    \ between the IPIP encapsulation rules\n   specified by IPsec [1] and those specified\
    \ by MobileIP [2].  The\n   latter specification is standards track, and the IP\
    \ protocol number\n   of 4 (payload of an IP packet of type 4) is uniquely specified\
    \ by RFC\n   2003 according to IANA [2].  The use of IPIP inside an IPsec\n  \
    \ transport packet can be confused with IPsec tunnel mode, because\n   IPsec does\
    \ not specify any limits on the types of IP packets that\n   transport mode can\
    \ secure.\n"
- title: A.1.  Encapsulation Issues
  contents:
  - "A.1.  Encapsulation Issues\n   When an IP packet is encapsulated as payload inside\
    \ another IP\n   packet, some of the outer header fields can be newly written\
    \ (and the\n   inner header determines some others [2].) Among these fields is\
    \ the\n   IP DF (do not fragment) flag.  When the inner packet DF flag is\n  \
    \ clear, the outer packet may copy it or set it; however, when the\n   inner DF\
    \ flag is set, the outer header must copy it [2].  IPsec\n   defines conflicting\
    \ rules, where that flag and other similar fields\n   (TOS, etc.) may be copied,\
    \ cleared, or set as specified by an SA.\n   The IPsec specification indicates\
    \ that such fields must be\n   controlled, to achieve security.  Otherwise, such\
    \ fields could\n   provide a covert channel between the inner packet header and\
    \ outer\n   packet header.  However, RFC 2003 [2] requires that the outer fields\n\
    \   not be cleared when the inner ones are set, to prevent MTU discovery\n   \"\
    black holes\" [14][15].\n   To avoid a conflict between these rules, and to avoid\
    \ security\n   weaknesses associated with solely copying the fields, it is\n \
    \  recommended that IPsec IPIP encapsulation not permit the clearing of\n   the\
    \ outer DF flag.  When the SA requires clearing the DF flag, and\n   the inner\
    \ packet DF is set, it is proposed that IPsec drop that\n   packet, rather than\
    \ violate RFC 2003 processing rules [2].  Similar\n   rules are being developed\
    \ for TOS and other similar IP header fields,\n   to be included in an update\
    \ of RFC 2003 [2].\n   Another approach to closing the covert channel is always\
    \ to set the\n   DF flag in the outer header (whether or not it is set in the\
    \ inner\n   header).  Setting the DF flag allows PMTU discovery to operate\n \
    \  normally.  The details of this approach are discussed in [2].\n"
- title: A.2.  Decapsulation Issues
  contents:
  - "A.2.  Decapsulation Issues\n   Given identical keys, a packet created by IPIP\
    \ tunnel encapsulation\n   combined with IPsec transport mode and an IPsec tunnel\
    \ mode packet\n   look identical on the wire.  Thus, when an IPsec'ed packet arrives\n\
    \   that contains an IPIP inner packet, it is not possible to distinguish\n  \
    \ whether the packet was created using IPsec tunnel mode or IPsec\n   transport\
    \ mode of an IPIP encapsulated packet.  In both cases, the\n   protocol field\
    \ of the outer header is IPsec (AH or ESP), and the\n   \"next header\" field\
    \ for the inner data is 4 (IP).  IPsec requires the\n   SA matching a received\
    \ packet to indicate whether to apply tunnel\n   mode or transport mode.\n   Incoming\
    \ packet processing must check the SAD before determining\n   whether to decapsulate\
    \ IPsec packets with inner payload of protocol\n   type 4.  If the SAD indicates\
    \ that a tunnel mode association applies,\n   IPsec must decapsulate the packet.\
    \  If the SAD indicates that a\n   transport mode association applies, IPsec must\
    \ not decapsulate the\n   packet.  This requires that the SAD indicate one of\
    \ these two\n   options; wildcard SAD entries (\"ANY\", or \"TUNNEL or TRANSPORT\"\
    )\n   cannot be supported.\n"
- title: A.3.  Appendix Summary
  contents:
  - "A.3.  Appendix Summary\n   IPsec's use of IPIP encapsulation conflicts with the\
    \ IPIP standard\n   [2].  This issue is already being resolved in an update to\
    \ RFC 2003,\n   instead of specifying a non-standard conforming variant of IPIP\n\
    \   encapsulation inside IPsec.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Joe Touch\n   USC Information Sciences Institute\n   4676\
    \ Admiralty Way\n   Marina del Rey, CA  90292\n   US\n   Phone: +1 310 822 1511\n\
    \   Fax:   +1 310 823 6714\n   EMail: touch@isi.edu\n   URI:   http://www.isi.edu/touch\n\
    \   Lars Eggert\n   NEC Network Laboratories\n   Kurfuersten-Anlage 36\n   Heidelberg\
    \  69115\n   DE\n   Phone: +49 6221 90511 43\n   Fax:   +49 6221 90511 55\n  \
    \ EMail: lars.eggert@netlab.nec.de\n   URI:   http://www.netlab.nec.de/\n   Yu-Shun\
    \ Wang\n   USC Information Sciences Institute\n   4676 Admiralty Way\n   Marina\
    \ del Rey, CA  90292\n   US\n   Phone: +1 310 822 1511\n   Fax:   +1 310 823 6714\n\
    \   EMail: yushunwa@isi.edu\n   URI:   http://www.isi.edu/yushunwa\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).  This\
    \ document is subject\n   to the rights, licenses and restrictions contained in\
    \ BCP 78, and\n   except as set forth therein, the authors retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
