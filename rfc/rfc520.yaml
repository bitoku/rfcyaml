- title: __initial_text__
  contents:
  - "             A Proposed File Access Protocol Specification\n   Attached is a\
    \ proposal for the File Access Protocol.  FAP is an\n   extension to FTP.  I believe\
    \ the specification is fairly general and\n   should provide a good jumping-off\
    \ place.  I hope the protocol is\n   specified in such a way as to fit with idiosyncrasies\
    \ of most\n   systems.  If the protocol would cause an inordinate amount of burden\n\
    \   on your system for one reason or another I would like to hear about\n   it.\n\
    \   At some later date when the difficulties of implementation are better\n  \
    \ known, I would like to see several levels of implementation specified\n   and\
    \ implementation be done in terms of those levels.\n   From rumors I have heard\
    \ I believe this will also allow creation and\n   transfer of what TENEX calls\
    \ \"holey\" files.  But, I am not sure of\n   all of the implications of that,\
    \ or what would happen (or should\n   happen) when a \"holey\" file is moved to\
    \ a site that doesn't really\n   have such a thing, per se.  Comments from the\
    \ TENEX crowd would be\n   appreciated.\n   I think some further work could be\
    \ done to make FAP easier for record\n   oriented systems.  This would probably\
    \ require an extra command or\n   parameter to specify all operations are in terms\
    \ of records.\n   Comments are invited.\n   In the long run though, I would like\
    \ to see FAP thrown away.  The\n   commands as they are described merely add a\
    \ finer structure to the\n   present RETR, STOR, and APPE without much additional\
    \ overhead.  The\n   sequence:\n      OPEN R FOO.BAR CRLF\n            READ ALL\
    \ CRLF\n            CLOS CRLF\n   is equivalent to RETR FOO.BAR CRLF.  FAP could\
    \ be merged with FTP to\n   give a much richer, coherent whole.\n   In writing\
    \ this document, I ran into the deficiency of reply codes\n   for protocols. \
    \ Three digits is no where near enough.  I would like\n   to suggest that as another\
    \ interim solution we go to a five digit\n   reply with two for specific categories\
    \ (such as Primary access, FTP\n   results, etc.) and two for specific results.\
    \  In the meantime, the\n   NWG should begin considering a general scheme for\
    \ reply codes -- one\n   that doesn't need revising every two years.\n   Comments,\
    \ complaints, etc. are welcomed.  I may be reached through\n   network mail at\
    \ ISI (DAY) or Multics (DAY Cnet) or by phone at the\n   University of Illinois\
    \ (217) 333-6544.\n                                    A\n                   \
    \              Proposed\n                           File Access Protocol\n   \
    \                            Specification\n                                 John\
    \ Day\n                                  6/7/73\n"
- title: I. INTRODUCTION
  contents:
  - "I. INTRODUCTION\n   The purpose of the File Access Protocol is to provide a method\
    \ for\n   processes to access non-local files in either a sequential or non-\n\
    \   sequential manner.  Unlike the proposed Mail Protocol, FAP is an\n   extension\
    \ of FTP and not a subsystem.  In general FAP is compatible\n   with the rest\
    \ of FTP.  Those modifications which are necessary are\n   specified below.\n\
    \   The intent of this protocol is to allow processes to specify to the\n   remote\
    \ file system where in the file they wish the next operation to\n   start and\
    \ how much data to move.  Thus only the part of a file\n   necessary for a process'\
    \ computation need be transferred, rather than\n   the entire file.  Thus transmission\
    \ times and storage requirements\n   may be held down.  In short, the rationale\
    \ for a File Access Protocol\n   on the network is the same as the rationale for\
    \ \"random-accessed\"\n   files in a standard operating system.\n   The file Access\
    \ Protocol uses the connection model, data\n   representations, and transmission\
    \ methods of the File transfer\n   Protocol.  All data transmissions in FAP are\
    \ handled according to the\n   description in FTP Section III.C with the following\
    \ modifications.\n   In Stream mode, the minimum byte size is increased to 4 bits.\n\
    \   Another control code (value 4) is used to indicate \"end of\n   transmission\"\
    .  An combination of EOT, EOR, or EOF may be indicated\n   by the proper control\
    \ code.  With this method it is not necessary to\n   close the connection after\
    \ each access; a practice not highly\n   recommended.  In Block mode, bit 5 of\
    \ the descriptor field of the\n   header is set noting that this block is the\
    \ end of transmission.  In\n   addition to this, FAP uses a File Pointer (FP).\
    \  The file pointer\n   points into the file and is the point at which the next\
    \ FAP read or\n   write will commence.  The file pointer is a general mechanism\
    \ for\n   addressing a file and should be flexible enough to handle both stream\n\
    \   and record oriented systems.\n"
- title: II.  PROBLEMS OF IMPLEMENTATION
  contents:
  - "II.  PROBLEMS OF IMPLEMENTATION\n   As usual, not all systems will be able to\
    \ implement this protocol in\n   its full generality.  The approach that should\
    \ be taken is that no\n   host should be required to provide for network users\
    \ (in the name of\n   complete protocol implementation) service it does not provide\
    \ its\n   local users.\n   Some systems allow \"random\" access to some kinds\
    \ of files on its\n   system and not to others.  In this case, this should be\
    \ their\n   implementation, i.e., not all operations are valid for all kinds of\n\
    \   files.\n   Some systems cannot move the byte pointer backwards without opening\n\
    \   and closing the file.  They should not be required to do this\n   (although\
    \ they may if they wish), but they should allow \"spacing\"\n   down a file some\
    \ distance before starting a transfer.\n   Some systems may not allow read and\
    \ write access to be available\n   without closing and reopening the file.  Systems\
    \ should not be\n   required to do both.\n      In general, the rules of implementation\
    \ are:\n      1) If a system normally allows that particular kind of access to\n\
    \      that particular file then it should be allowed; if not, the system\n  \
    \    should not be forced to implement it. (In many cases, the legality\n    \
    \  cannot be known until the operation is attempted; i.e., it cannot\n      be\
    \ told of the first two cases above if they are legal when the\n      file is\
    \ opened but only on the read or write which violates the\n      implementation\
    \ restrictions).\n      2) A system should not try to simulate a facility if the\n\
    \      simulation has side effects.  For example, if simulating the\n      capability\
    \ of moving the byte pointer to the desired position has\n      some side effects,\
    \ then the simulation should be left to the\n      process accessing the file.\n\
    \      3) All implementors should make known the capabilities of their\n     \
    \ implementations via NIC documents.\n"
- title: III.  FILE ACCESS PROTOCOL
  contents:
  - "III.  FILE ACCESS PROTOCOL\n   The FAP extension to FTP includes 6 new commands\
    \ and the file\n   pointer.  Any implementation requires the file pointer and\
    \ all six\n   commands.  But, as described above, it is not necessary to implement\n\
    \   the commands in their full generality.\n"
- title: III.1 THE FILE POINTER
  contents:
  - "III.1 THE FILE POINTER\n   The file pointer represents an index or address within\
    \ the file.  The\n   units by which the index is measured, is \"logical byte size\"\
    \ and does\n   not include any bytes related to transmission or structure.  In\n\
    \   particular, for transmission mode Stream and structure Record, the\n   EOR\
    \ and EOF markers are not counted.  Local transformations on data\n   must be\
    \ taken into account.  For example, Multics stores CRLF as NL.\n   In this case,\
    \ NL counts as two ASCII bytes since it was transmitted\n   to or will be sent\
    \ from Multics as CRLF.  If transmission Mode is\n   Image then the logical byte\
    \ size is taken as the transmission byte\n   size.  There are two commands which\
    \ operate on the file pointer: 1)\n   SETP to move the pointer and 2) GETP to\
    \ find out where it is at.\n   These are described below in more detail.\n   The\
    \ file pointer may take on three classes of values.  All may be\n   mapped to\
    \ some decimal number.  The value B represents the beginning\n   of the file (Byte\
    \ 0).  The value E represents the end of the file (or\n   Byte n for a file n\
    \ bytes long).  The byte pointer may also take on\n   any value between 0 and\
    \ n.\n                       A file of n bytes\n                          ..........\n\
    \     |----|----|----|----|-----------|----|----|----|----|\n     ^    1    2\
    \    3    4          n-4  n-3  n-2  n-1   ^\n     |                          \
    \                         |\n     0                                          \
    \         n\n     B                                                   E\n   If\
    \ a file is stored under set of parameters (TYPE, etc.) and\n   operations are\
    \ attempted on it under different parameters, the server\n   does not guarantee\
    \ that the information will be valid.\n"
- title: III.2 COMMANDS
  contents:
  - 'III.2 COMMANDS

    '
- title: III.2.1 OPEN <direction> <pathname>
  contents:
  - "III.2.1 OPEN <direction> <pathname>\n   This command instructs the server to\
    \ \"open\" the file <pathname> for\n   access in the direction specified.  The\
    \ directions are read, R write,\n   W; or both, B. A read direction implies that\
    \ the data connection is\n   from server to user; write, from user to server;\
    \ and both implies\n   connections each ways.  Functionally, this command corresponds\
    \ to\n   RETR or STOR.  Therefore, all the FTP parameter commands (TYPE, MODE,\n\
    \   etc.)  must be sent before the file is opened.  If the direction is\n   write\
    \ (W) and the file specified by the pathname does not exist,\n   there is an implied\
    \ create with the open.  The success of this\n   create, is, of course, dependent\
    \ on local access privileges and\n   possibly whether or not an ALL command was\
    \ sent.  If applicable, the\n   file created should be of the most general kind\
    \ of file on which\n   \"random\" access is allowed. (This is to allow the largest\
    \ degree of\n   compatibility with operations that may follow).  This should be\n\
    \   ignored if some site specific command has already specified the kind\n   of\
    \ file.  This command identifies the file on which subsequent\n   operations are\
    \ to be performed.  After the file is opened, the file\n   pointer is at B and\
    \ any of the other five FAP commands may be sent.\n   It is acknowledged that\
    \ some systems cannot open a file for access in\n   both directions; an error\
    \ reply 402 should be sent for this response.\n   Replies\n   -------\n   258\
    \      451       500       504       550\n   402      454       501       505\n\
    \   434      455       502       506\n   4550     457       503       507\n"
- title: III.2.2 SETP <argument>
  contents:
  - "III.2.2 SETP <argument>\n   This command causes the file pointer to be set to\
    \ the number\n   specified in the argument.  This value will be the ordinal number\
    \ of\n   the starting position of the next operation. (Byte 0 is the first\n \
    \  byte in the file).  The argument may take on two other values besides\n   <decimal\
    \ number> : B, for BEGIN, which sets the file pointer at the\n   beginning of\
    \ a file (i.e. 0) and E, for END, which sets the file\n   pointer to the last\
    \ byte in the file.  Two error conditions are\n   possible.  If the argument specifies\
    \ an illegal change of file\n   pointer (such as moving it backwards on some systems),\
    \ then the error\n   reply 402 should be sent.  If the argument attempts to move\
    \ the file\n   pointer off the end of the file, then the EOF: <byte number> reply\n\
    \   should be sent with the address of the end of the file (E), and the\n   file\
    \ pointer left at E.\n   Replies\n   -------\n   258\n   402\n   480\n"
- title: III.2.3 GETP
  contents:
  - "III.2.3 GETP\n   This command requests the server to return the value of the\
    \ file\n   pointer as a decimal number.\n   Reply\n   -----\n   483\n   504\n"
- title: III.2.4 READ <arg>
  contents:
  - "III.2.4 READ <arg>\n   This command instructs the server to move as many bytes\
    \ as specified\n   (of size logical byte size) from the server to the user.  The\
    \ values\n   the argument may take on are <decimal number> and ALL.  ALL is\n\
    \   interpreted as all data from the present position of the file pointer\n  \
    \ to the end-of-file.  If a read requests more bytes than in the file,\n   the\
    \ number of bytes from the present position to the end of file\n   should be transferred\
    \ and an EOF: <byte number> response returned\n   noting the position of the end\
    \ of file.  If the file is Record\n   structured and a READ requests more bytes\
    \ than in the record, then\n   the number of bytes in the record from the file\
    \ pointer are moved and\n   the EOR: <byte number> reply is sent noting the end\
    \ of record.  The\n   action of a READ leaves the file pointer at the position\
    \ before the\n   read plus the number of bytes moved, (i.e., updated).  The EOF\n\
    \   condition leaves it at E.\n   Replies\n   -------\n   258      480\n   402\
    \      481\n   450      482\n   452      500-507\n   455\n"
- title: III.2.5 WRITe <arg>
  contents:
  - "III.2.5 WRITe <arg>\n   This command instructs the server to accept as many bytes\
    \ as\n   specified from the user.  The result updates the value of the file\n\
    \   pointer.  The values the argument may take on are <decimal number> or\n  \
    \ ALL.  ALL is interpreted as all data from the present position of the\n   byte\
    \ pointer to the end-of-file (or beyond).  Associated with the\n   write is an\
    \ implied \"append\", if necessary previous information has\n   been sent (such\
    \ as allocation) and if the file's access privilege\n   allow the append.  If\
    \ a write specifies more bytes than there are\n   between the file pointer and\
    \ the end-of-file, and expansion is not\n   allowed, no data is sent and the file\
    \ pointer is not moved.  An error\n   is returned specifying the byte position\
    \ of the EOF.  If the file is\n   Record structured and a WRIT attempts to move\
    \ more bytes than there\n   are in the record, the file pointer is not moved and\
    \ the EOR: <byte\n   number> reply is sent noting the end of record.\n   Replies\n\
    \   -------\n   258      480\n   402      481\n   450      482\n   452      500-507\n\
    \   453\n"
- title: III.2.6 CLOS
  contents:
  - "III.2.6 CLOS\n   This command instructs the server to \"close\" the presently\
    \ open file,\n   if any.  The receipt of a CLOS without an open file is not an\
    \ error.\n   The effect is to notify the server that further operations are not\n\
    \   directed at the file which is presently open.  If an open is received\n  \
    \ by the server and it has a file open, it should close the open file\n   and\
    \ open the new one.\n   Reply\n   -----\n   258\n"
- title: IV.  SUMMARY
  contents:
  - 'IV.  SUMMARY

    '
- title: IV.1 SYNTAX
  contents:
  - "IV.1 SYNTAX\n   OPEN <direction> <pathname> CRLF\n   CLOS CRLF\n   SETP <byte\
    \ pointer arg> CRLF\n   GETP CRLF\n   READ <transfer argument> CRLF\n   WRIT <transfer\
    \ argument> CRLF\n   <direction>::= R|W|B\n   <byte pointer argument>::= B|E|<decimal\
    \ number>\n   <transfer argument>::=ALL|<decimal number>\n   <byte number>::=\
    \ <decimal number>\n"
- title: IV.2 REPLIES USED BY FAP
  contents:
  - "IV.2 REPLIES USED BY FAP\n   258    Operation successful\n   402    Command not\
    \ implemented for requested value or action\n   433    Cannot transfer files w/o\
    \ valid account. Enter account &\n          resend command.\n   450    FTP: file\
    \ not found\n   451    FTP: file access denied\n   452    FTP: file transfer incomplete,\
    \ data connection closed.\n   453    FTP: file transfer incomplete, insufficient\
    \ storage space.\n   454    FTP: cannot connect to your data socket\n   455  \
    \  FTP: file system error not covered by other reply codes.\n   457    FTP: transfer\
    \ parameters in error.\n   480    EOR: <byte number>\n   481    EOF: <byte number>\n\
    \   482    File not open for operation\n   483    FP: <byte pointer>\n   500 \
    \   Last command line completely unrecognized.\n   501    Syntax of last command\
    \ is incorrect.\n   502    Last command invalid (ignored), illegal parameter combination.\n\
    \   504    Last command invalid, action not possible at this time.\n   505   \
    \ Last command conflicts illegally with previous command(s).\n   506    Last command\
    \ not implemented by the server.\n   507    Catchall error reply.\n   550    Bad\
    \ pathname specification (e.g., syntax error).\n         [ This RFC was put into\
    \ machine readable form for entry ]\n               [ into the online RFC archives\
    \ by Via Genie ]\n"
