- title: __initial_text__
  contents:
  - '       Connection-less Lightweight X.500 Directory Access Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: X.500
  contents:
  - "X.500\n   The protocol described in this document is designed to provide access\n\
    \   to the Directory while not incurring the resource requirements of the\n  \
    \ Directory Access Protocol (DAP) [3].  In particular, it is aimed at\n   avoiding\
    \ the elapsed time that is associated with connection-oriented\n   communication\
    \ and it facilitates use of the Directory in a manner\n   analagous to the DNS\
    \ [5,6].  It is specifically targeted at simple\n   lookup applications that require\
    \ to read a small number of attribute\n   values from a single entry.  It is intended\
    \ to be a complement to DAP\n   and LDAP [4].  The protocol specification draws\
    \ heavily on that of\n   LDAP.\n"
- title: 1.  Background
  contents:
  - "1.  Background\n   The Directory can be used as a repository for many kinds of\n\
    \   information.  The full power of DAP is unnecessary for applications\n   that\
    \ require simple read access to a few attribute values.\n   Applications addressing\
    \ is a good example of this type of use where\n   an application entity needs\
    \ to determine the Presentation Address\n   (PA) of a peer entity given that peer's\
    \ Application Entity Title\n   (AET). If the AET is a Directory Name (DN) then\
    \ the required result\n   can be obtained from the PA attribute of the Directory\
    \ entry\n   identified by the AET.  This is very similar to DNS.\n   Use of DAP\
    \ to achieve this functionality involves a significant\n   number of network exchanges:\n\
    \      ___________________________________________________________\n     |_#_|______Client_(DUA)________DAP________Server_(DSA)_____|\n\
    \     |  1|  N-Connect.request       ->                          |\n     |  2|\
    \                          <-    N-Connect.response    |\n     |  3|  T-Connect.request\
    \       ->                          |\n     |  4|                          <-\
    \    T-Connect.response    |\n     |   |  S-Connect.request,                 \
    \                 |\n     |   |  P-Connect.request,                          \
    \        |\n     |   |  A-Associate.request,                                |\n\
    \     |  5|  DAP-Bind.request        ->                          |\n     |   |\
    \                                S-Connect.response,   |\n     |   |         \
    \                       P-Connect.response,   |\n     |   |                  \
    \              A-Associate.response, |\n     |  6|                          <-\
    \    DAP-Bind.response     |\n     |  7|  DAP-Read.request        ->         \
    \                 |\n     |  8|                          <-    DAP-Read.response\
    \     |\n     |   |  S-Release.request,                                  |\n \
    \    |   |  P-Release.request,                                  |\n     |   |\
    \  A-Release.request,                                  |\n     |  9|  DAP-Unbind.request\
    \      ->                          |\n     |   |                             \
    \   S-Release.response,   |\n     |   |                                P-Release.response,\
    \   |\n     |   |                                A-Release.response,   |\n   \
    \  | 10|                          <-    DAP-Unbind.response   |\n     |   |  T-Disconnect.request,\
    \                               |\n     | 11|  N-Disconnect.request    ->    \
    \                      |\n     |   |                                T-Disconnect.response,|\n\
    \     | 12|                          <-    N-Disconnect.response |\n     |___|______________________________________________________|\n\
    \   This is 10 packets before the application can continue, given that it\n  \
    \ can probably do so after issuing the T-Disconnect.request.  (Some\n   minor\
    \ variations arise depending upon the class of Network and\n   Transport service\
    \ that is being used; for example use of TP4 over\n   CLNS reduces the packet\
    \ count by two.) LDAP is no better in the case\n   where the LDAP server uses\
    \ full DAP to communicate with the\n   Directory:\n  ____________________________________________________________________\n\
    \ |__#_|___Client_____LDAP_____LDAP_server______DAP_________DSA_______|\n |  1\
    \ |  TCP SYN      ->                                             |\n |  2 |  \
    \             <-    TCP SYN ACK                              |\n |  3 |  BindReq\
    \      ->                                             |\n |  4 |             \
    \        N-Connect.req      ->                    |\n |  5 |                 \
    \                       <-    N-Connect.res   |\n |  6 |                     T-Connect.req\
    \      ->                    |\n |  7 |                                      \
    \  <-    T-Connect.res   |\n |  8 |                     DAP-Bind.req       ->\
    \                    |\n |  9 |                                        <-    DAP-Bind.res\
    \    |\n | 10 |               <-    BindRes                                  |\n\
    \ | 11 |  SearchReq    ->                                             |\n | 12\
    \ |                     DAP-Search.req     ->                    |\n | 13 |  \
    \                                      <-    DAP-Search.res  |\n | 14 |      \
    \         <-    SearchRes                                |\n | 15 |  TCP FIN \
    \     ->                                             |\n | 16 |              \
    \       DAP-Unbind.req     ->                    |\n | 17 |                  \
    \                      <-    DAP-Unbind.res  |\n | 18 |                     N-Disconnect.req\
    \   ->                    |\n | 19 |                                        <-\
    \    N-Disconnect.res|\n |____|______________________________________________________________|\n\
    \   Here there are 14 packets before the application can continue.  Even\n   if\
    \ the LDAP server is on the same host as the DSA (so packet delay is\n   negligible),\
    \ or if the DSA supports LDAP directly, then there are\n   still 6 packets.\n\
    \                  ____________________________________\n                 | #|\
    \   Client     LDAP   LDAP server|\n                 |__|________________________________|\n\
    \                 | 1|  TCP SYN      ->               |\n                 | 2|\
    \               <-    TCP SYN ACK|\n                 | 3|  BindReq      ->   \
    \            |\n                 | 4|               <-    BindRes    |\n     \
    \            | 5|  SearchReq    ->               |\n                 |_6|_______________<-____SearchRes__|\n\
    \   This protocol provides for simple access to the Directory where the\n   delays\
    \ inherent in the above exchanges are unacceptable and where the\n   additional\
    \ functionality provided by connection-mode operation is not\n   required.\n"
- title: 2.  Protocol Model
  contents:
  - "2.  Protocol Model\n   CLDAP is based directly on LDAP [4] and inherits many\
    \ of the key\n   aspects of the LDAP protocol:\n   - -  Many protocol data elements\
    \ are encoding as ordinary strings\n        (e.g., Distinguished Names).\n   -\
    \ -  A lightweight BER encoding is used to encode all protocol\n        elements.\n\
    \   It is different to LDAP in that:\n   - -  Protocol elements are carried directly\
    \ over UDP or other\n        connection-less transport, bypassing much of the\n\
    \        session/presentation overhead and that of connections (LDAP uses\n  \
    \      a connection-mode transport service).\n   - -  A restricted set of operations\
    \ is available.\n   The definitions of most protocol elements are inherited from\
    \ LDAP.\n   The general model adopted by this protocol is one of clients\n   performing\
    \ protocol operations against servers. In this model, this\n   is accomplished\
    \ by a client transmitting a protocol request\n   describing the operation to\
    \ be performed to a server, which is then\n   responsible for performing the necessary\
    \ operations on the Directory.\n   Upon completion of the necessary operations,\
    \ the server returns a\n   response containing any results or errors to the requesting\
    \ client.\n   Note that, although servers are required to return responses whenever\n\
    \   such responses are defined in the protocol, there is no requirement\n   for\
    \ synchronous behaviour on the part of either client or server\n   implementations:\
    \ requests and responses for multiple operations may\n   be exchanged by client\
    \ and servers in any order, as long as servers\n   eventually send a response\
    \ for every request that requires one.\n   Also, because the protocol is implemented\
    \ over a connection-less\n   transport service clients must be prepared for either\
    \ requests or\n   responses to be lost.  Clients should use a retry mechanism\
    \ with\n   timeouts in order to achieve the desired level of reliability.  For\n\
    \   example, a client might send off a request and wait for two seconds.\n   If\
    \ no reply is forthcoming, the request is sent again and the client\n   waits\
    \ four seconds.  If there is still no reply, the client sends it\n   again and\
    \ waits eight seconds, and so on, until some maximun time.\n   Such algorithms\
    \ are widely used in other datagram-based protocol\n   implementations, such as\
    \ the DNS.  It is not appropriate to mandate a\n   specific algorithm as this\
    \ will depend upon the requirments and\n   operational environment of individual\
    \ CLDAP client implementations.\n   It is not required that a client abandon any\
    \ requests to which no\n   response has been received and for which a reply is\
    \ no longer\n   required (because the request has been timed out), but they may\
    \ do\n   so.\n   Consistent with the model of servers performing protocol operations\n\
    \   on behalf of clients, it is also to be noted that protocol servers\n   are\
    \ expected to handle referrals without resorting to the return of\n   such referrals\
    \ to the client. This protocol makes no provisions for\n   the return of referrals\
    \ to clients, as the model is one of servers\n   ensuring the performance of all\
    \ necessary operations in the\n   Directory, with only final results or errors\
    \ being returned by\n   servers to clients.\n   Note that this protocol can be\
    \ mapped to a strict subset of the\n   Directory abstract service, so it can be\
    \ cleanly provided by the DAP.\n"
- title: 3.  Mapping Onto Transport Services
  contents:
  - "3.  Mapping Onto Transport Services\n   This protocol is designed to run over\
    \ connection-less transports,\n   with all 8 bits in an octet being significant\
    \ in the data stream.\n   Specifications for two underlying services are defined\
    \ here, though\n   others are also possible.\n"
- title: 3.1.  User Datagram Protocol (UDP)
  contents:
  - "3.1.  User Datagram Protocol (UDP)\n   The CLDAPMessage PDUs are mapped directly\
    \ onto UDP datagrams.  Only\n   one request may be sent in a single datagram.\
    \ Only one response may\n   be sent in a single datagram.  Server implementations\
    \ running over\n   the UDP should provide a protocol listener on port 389.\n"
- title: 3.2.  Connection-less Transport Service (CLTS)
  contents:
  - "3.2.  Connection-less Transport Service (CLTS)\n   Each LDAPMessage PDU is mapped\
    \ directly onto T-Unit-Data.\n"
- title: 4.  Elements of Protocol
  contents:
  - "4.  Elements of Protocol\n   CLDAP messages are defined by the following ASN.1:\n\
    \    CLDAPMessage ::= SEQUENCE {\n        messageID       MessageID,\n       \
    \ user            LDAPDN,         -- on request only --\n        protocolOp  \
    \    CHOICE {\n                        searchRequest   SearchRequest,\n      \
    \                  searchResponse  SEQUENCE OF\n                             \
    \               SearchResponse,\n                        abandonRequest  AbandonRequest\n\
    \        }\n    }\n   where MessageID, LDAPDN, SearchRequest, SearchResponse and\n\
    \   AbandonRequest are defined in the LDAP protocol.\n   The 'user' element is\
    \ supplied only on requests (it should be zero\n   length and is ignored in responses).\
    \ It may be used for logging\n   purposes but it is not required that a CLDAP\
    \ server implementation\n   apply any particular semantics to this field.\n  \
    \ Editorial note:\n       There has been some discussion about the desirability\
    \ of\n       authentication with CLDAP requests and the addition of the fields\n\
    \       necessary to support this. This might take the form of a clear\n     \
    \  text password (which would go against the current IAB drive to\n       remove\
    \ such things from protocols) or some arbitrary credentials.\n       Such a field\
    \ is not included.  It is felt that, in general,\n       authentication would\
    \ incur sufficient overhead to negate the\n       advantages of the connectionless\
    \ basis of CLDAP. If an\n       application requires authenticated access to the\
    \ Directory then\n       CLDAP is not an appropriate protocol.\n   Within a searchResponse\
    \ all but the last SearchResponse has choice\n   'entry' and the last SearchResponse\
    \ has choice 'resultCode'.  Within\n   a searchResponse, as an encoding optimisation,\
    \ the value of the\n   objectName LDAP DN may use a trailing '*' character to\
    \ refer to the\n   baseObject of the corresponding searchRequest.  For example,\
    \ if the\n   baseObject is specified as \"o=UofM, c=US\", then the following\n\
    \   objectName LDAPDNs in a response would have the indicated meanings\n     \
    \     objectName returned   actual LDAPDN denoted\n          ____________________________________________________\n\
    \          \"*\"                   \"o=UofM, c=US\"\n          \"cn=Babs Jensen,\
    \ *\"   \"cn=Babs Jensen, o=UofM, c=US\"\n"
- title: 4.1.  Errors
  contents:
  - '4.1.  Errors

    '
- title: The following error code is added to the LDAPResult.resultCode
  contents:
  - 'The following error code is added to the LDAPResult.resultCode

    '
- title: 'enumeration of [4]:'
  contents:
  - "enumeration of [4]:\n                             resultsTooLarge           \
    \   (70),\n   This error is returned when the LDAPMessage PDU containing the\n\
    \   results of an operation are too large to be sent in a single\n   datagram.\n"
- title: 4.2.  Example
  contents:
  - "4.2.  Example\n   A simple lookup can be performed in 4 packets. This is reduced\
    \ to 2\n   if either the DSA implements the CLDAP protocol, the CLDAP server has\n\
    \   a cache of the desired results, or the CLDAP server and DSA are co-\n   located\
    \ such that there is insignificant delay between them.\n    _______________________________________________________________\n\
    \   |_#|___Client_____CLDAP____CLDAP_server____DAP________DSA______|\n   | 1|\
    \  SearchReq    ->                                          |\n   | 2|       \
    \               DAP-Search.req   ->                  |\n   | 3|              \
    \                         <-    DAP-Search.res|\n   | 4|               <-    \
    \ SearchRes                            |\n   |__|___________________________________________________________|\n"
- title: 5.  Implementation Considerations
  contents:
  - "5.  Implementation Considerations\n   The following subsections provide guidance\
    \ on the implementation of\n   clients and servers using the CLDAP protocol.\n"
- title: 5.1.  Server Implementations
  contents:
  - "5.1.  Server Implementations\n   Given that the goal of this protocol is to minimise\
    \ the elapsed time\n   between making a Directory request and receiving the response,\
    \ a\n   server which uses DAP to access the directory should use techniques\n\
    \   that assist in this.\n   - -  A server should remain bound to the Directory\
    \ during reasonably\n        long idle periods or should remain bound permanently.\n\
    \   - -  Cacheing of results is highly desirable but this must be\n        tempered\
    \ by the need to provide up-to-date results given the\n        lack of a cache\
    \ invalidation protocol in DAP (either implicit\n        via timers or explicit)\
    \ and the lack of a dontUseCopy service\n        control in the protocol.\n  \
    \ Of course these issues are irrelevant if the CLDAP protocol is\n   directly\
    \ supported by a DSA.\n"
- title: 5.2.  Client Implementations
  contents:
  - "5.2.  Client Implementations\n   For simple lookup applications, use of a retry\
    \ algorithm with\n   multiple servers similar to that commonly used in DNS stub\
    \ resolver\n   implementations is recommended.  The location of a CLDAP server\
    \ or\n   servers may be better specified using IP addresses (simple or\n   broadcast)\
    \ rather than names that must first be looked up in another\n   directory such\
    \ as DNS.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This protocol provides no facilities for authentication.\
    \ It is\n   expected that servers will bind to the Directory either anonymously\n\
    \   or using simple authentication without a password.\n"
- title: 7.  Bibliography
  contents:
  - "7.  Bibliography\n   [1] The Directory: Overview of Concepts, Models and Service.\
    \  CCITT\n       Recommendation X.500, 1988.\n   [2] The Directory: Models.  CCITT\
    \ Recommendation X.501 ISO/IEC JTC\n       1/SC21; International Standard 9594-2,\
    \ 1988.\n   [3] The Directory: Abstract Service Definition.  CCITT Recommendation\n\
    \       X.511, ISO/IEC JTC 1/SC21; International Standard 9594-3, 1988.\n   [4]\
    \ Yeong, W., Howes, T., and S. Kille, \"X.500 Lightweight Directory\n       Access\
    \ Protocol\", RFC 1487, Performance Systems International,\n       University\
    \ of Michigan, ISODE Consortium, July 1993.\n   [5] Mockapetris, P., \"Domain\
    \ Names - Implementation and\n       Specification\", STD 13, RFC 1035, USC/Information\
    \ Sciences\n       Institute, November 1987.\n   [6] Mockapetris, P., \"Domain\
    \ Names - Concepts and Facilities\", STD\n       13, RFC 1034, USC/Information\
    \ Sciences Institute, November 1987.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   Many thanks to Tim Howes and Steve Kille for their detailed\
    \ comments\n   and to other members of the working group.\n   This work was initiated\
    \ by the Union Bank of Switzerland.\n"
- title: 9.  Author's Address
  contents:
  - "9.  Author's Address\n   Alan Young\n   ISODE Consortium\n   The Dome, The Square\n\
    \   RICHMOND\n   GB - TW9 1DT\n   Phone: +44 81 332 9091\n   EMail: A.Young@isode.com\n\
    \   X.400:    i=A; s=Young; o=ISODE Consortium; p=ISODE; a=MAILNET; c=FI\n"
