- contents:
  - '                        Media Resource Brokering

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The MediaCtrl working group in the IETF has proposed an architecture\n
    \  for controlling media services.  The Session Initiation Protocol\n   (SIP)
    is used as the signaling protocol that provides many inherent\n   capabilities
    for message routing.  In addition to such signaling\n   properties, a need exists
    for intelligent, application-level media\n   service selection based on non-static
    signaling properties.  This is\n   especially true when considered in conjunction
    with deployment\n   architectures that include 1:M and M:N combinations of Application\n
    \  Servers and Media Servers.  This document introduces a Media Resource\n   Broker
    (MRB) entity, which manages the availability of Media Servers\n   and the media
    resource demands of Application Servers.  The document\n   includes potential
    deployment options for an MRB and appropriate\n   interfaces to Application Servers
    and Media Servers.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6917.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Conventions and Terminology .....................................6\n   3.
    Problem Discussion ..............................................6\n   4. Deployment
    Scenario Options .....................................7\n      4.1. Query MRB
    ..................................................8\n           4.1.1. Hybrid
    Query MRB ....................................9\n      4.2. In-Line MRB ...............................................11\n
    \  5. MRB Interface Definitions ......................................12\n      5.1.
    Media Server Resource Publish Interface ...................12\n           5.1.1.
    Control Package Definition .........................13\n           5.1.2. Element
    Definitions ................................15\n           5.1.3. <mrbrequest>
    .......................................15\n           5.1.4. <mrbresponse> ......................................17\n
    \          5.1.5. <mrbnotification> ..................................19\n      5.2.
    Media Service Resource Consumer Interface .................30\n           5.2.1.
    Query Mode/HTTP Consumer Interface Usage ...........31\n           5.2.2. In-Line
    Aware Mode/SIP Consumer Interface Usage ....32\n           5.2.3. Consumer Interface
    Lease Mechanism .................35\n           5.2.4. <mrbconsumer> ......................................38\n
    \          5.2.5. Media Service Resource Request .....................39\n           5.2.6.
    Media Service Resource Response ....................51\n      5.3. In-Line Unaware
    MRB Interface .............................54\n   6. MRB Acting as a B2BUA ..........................................54\n
    \  7. Multimodal MRB Implementations .................................55\n   8.
    Relative Merits of Query Mode, IAMM, and IUMM ..................56\n   9. Examples
    .......................................................58\n      9.1. Publish
    Example ...........................................58\n      9.2. Consumer Examples
    .........................................64\n           9.2.1. Query Example ......................................64\n
    \          9.2.2. IAMM Examples ......................................68\n   10.
    Media Service Resource Publisher Interface XML Schema .........83\n   11. Media
    Service Resource Consumer Interface XML Schema .........106\n   12. Security Considerations
    ......................................127\n   13. IANA Considerations ..........................................130\n
    \     13.1. Media Control Channel Framework Package Registration ....130\n      13.2.
    application/mrb-publish+xml Media Type ..................130\n      13.3. application/mrb-consumer+xml
    Media Type .................131\n      13.4. URN Sub-Namespace Registration for
    mrb-publish ..........132\n      13.5. URN Sub-Namespace Registration for mrb-consumer
    .........132\n      13.6. XML Schema Registration for mrb-publish .................132\n
    \     13.7. XML Schema Registration for mrb-consumer ................133\n   14.
    Acknowledgements .............................................133\n   15. References
    ...................................................133\n      15.1. Normative
    References ....................................133\n      15.2. Informative References
    ..................................135\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   As IP-based multimedia infrastructures mature, the complexity
    and\n   demands from deployments increase.  Such complexity will result in a\n
    \  wide variety of capabilities from a range of vendors that should all\n   be
    interoperable using the architecture and protocols produced by the\n   MediaCtrl
    working group.  It should be possible for a controlling\n   entity to be assisted
    in Media Server selection so that the most\n   appropriate resource is selected
    for a particular operation.  The\n   importance increases when one introduces
    a flexible level of\n   deployment scenarios, as specified in RFC 5167 [RFC5167]
    and RFC 5567\n   [RFC5567].  These documents make statements like \"it should
    be\n   possible to have a many-to-many relationship between Application\n   Servers
    and Media Servers that use this protocol\".  This leads to the\n   following deployment
    architectures being possible when considering\n   media resources, to provide
    what can be effectively described as\n   media resource brokering.\n   The simplest
    deployment view is illustrated in Figure 1.\n   +---+-----+---+                         +---+-----+---+\n
    \  | Application |                         |    Media    |\n   |   Server    |<-------MS
    Control------>|    Server   |\n   +-------------+                         +-------------+\n
    \                      Figure 1: Basic Architecture\n   This simply involves a
    single Application Server and Media Server.\n   Expanding on this view, it is
    also possible for an Application Server\n   to control multiple (greater than
    1) Media Server instances at any\n   one time.  This deployment view is illustrated
    in Figure 2.\n   Typically, such architectures are associated with application
    logic\n   that requires high-demand media services.  It is more than possible\n
    \  that each Media Server possesses a different media capability set.\n   Media
    Servers may offer different media services as specified in the\n   MediaCtrl architecture
    document [RFC5567].  A Media Server may have\n   similar media functionality but
    may have different capacity or media\n   codec support.\n                                           +---+-----+---+\n
    \                                          |    Media    |\n                                    +----->|
    \   Server   |\n                                    |      +-------------+\n                                    |\n
    \  +---+-----+---+                  |      +---+-----+---+\n   | Application |
    \                 |      |    Media    |\n   |   Server    |<--MS Control-----+----->|
    \   Server   |\n   +-------------+                  |      +-------------+\n                                    |\n
    \                                   |      +---+-----+---+\n                                    +----->|
    \   Media    |\n                                           |    Server   |\n                                           +-------------+\n
    \                    Figure 2: Multiple Media Servers\n   Figure 3 conveys the
    opposite view to that in Figure 2.  In this\n   model, there are a number of (greater
    than 1) Application Servers,\n   possibly supporting dissimilar applications,
    controlling a single\n   Media Server.  Typically, such architectures are associated
    with\n   application logic that requires low-demand media services.\n   +---+-----+---+\n
    \  | Application |\n   |   Server    |<-----+\n   +-------------+      |\n                        |\n
    \  +---+-----+---+      |                  +---+-----+---+\n   | Application |
    \     |                  |    Media    |\n   |   Server    |<-----+-----MS Control-->|
    \   Server   |\n   +-------------+      |                  +-------------+\n                        |\n
    \  +---+-----+---+      |\n   | Application |      |\n   |   Server    |<-----+\n
    \  +-------------+\n                  Figure 3: Multiple Application Servers\n
    \  The final deployment view is the most complex (Figure 4).  In this\n   model
    (M:N), there exist any number of Application Servers and any\n   number of Media
    Servers.  It is again possible in this model that\n   Media Servers might not
    be homogeneous, and they might have different\n   capability sets and capacities.\n
    \  +---+-----+---+                         +---+-----+---+\n   | Application |
    \                        |    Media    |\n   |   Server    |<-----+            +---->|
    \   Server   |\n   +-------------+      |            |     +-------------+\n                        |
    \           |\n   +---+-----+---+      |            |     +---+-----+---+\n   |
    Application |      |            |     |    Media    |\n   |   Server    |<-----+-MS
    Control-+---->|    Server   |\n   +-------------+      |            |     +-------------+\n
    \                       |            |\n   +---+-----+---+      |            |
    \    +---+-----+---+\n   | Application |      |            +---->|    Media    |\n
    \  |   Server    |<-----+                  |    Server   |\n   +-------------+
    \                        +---+-----+---+\n                    Figure 4: Many-to-Many
    Architecture\n   The remaining sections in this specification will focus on a
    new\n   entity called a Media Resource Broker (MRB), which can be utilized in\n
    \  the deployment architectures described previously in this section.\n   The
    MRB entity provides the ability to obtain media resource\n   information and appropriately
    allocate (broker) on behalf of client\n   applications.\n   The high-level deployment
    options discussed in this section rely on\n   network architecture and policy
    to prohibit inappropriate use.  Such\n   policies are out of scope for this document.\n
    \  This document will take a look at the specific problem areas related\n   to
    such deployment architectures.  It is recognized that the\n   solutions proposed
    in this document should be equally adaptable to\n   all of the previously described
    deployment models.  It is also\n   recognized that the solution is far more relevant
    to some of the\n   previously discussed deployment models and can almost be viewed
    as\n   redundant on others.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions and Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC
    2119 [RFC2119].\n   This document inherits terminology proposed in RFC 5567 [RFC5567]
    and\n   in \"Media Control Channel Framework\" [RFC6230].  In addition, the\n
    \  following terms are defined for use in this document and for use in\n   the
    context of the MediaCtrl working group in the IETF:\n   Media Resource Broker
    (MRB):  A logical entity that is responsible\n      for both collection of appropriate
    published Media Server (MS)\n      information and selecting appropriate Media
    Server resources on\n      behalf of consuming entities.\n   Query MRB:  An instantiation
    of an MRB (see previous definition) that\n      provides an interface for an Application
    Server to retrieve the\n      address of an appropriate Media Server.  The result
    returned to\n      the Application Server can be influenced by information contained\n
    \     in the query request.\n   In-line MRB:  An instantiation of an MRB (see
    previous definition)\n      that directly receives requests on the signaling path.
    \ There is\n      no separate query.\n   CFW:  Media Control Channel Framework,
    as specified in [RFC6230].\n   Within the context of In-line MRBs, additional
    terms are defined:\n   In-line Aware MRB Mode (IAMM):  Defined in Section 5.2.2.1.\n
    \  In-line Unaware MRB Mode (IUMM):  Defined in Section 5.3.\n   The document
    will often specify when a specific identifier in a\n   protocol message needs
    to be unique.  Unless stated otherwise, such\n   uniqueness will always be within
    the scope of the Media Servers\n   controlled by the same MRB.  The interaction
    between different MRB\n   instances, e.g., the partitioning of a logical MRB,
    is out of scope\n   for this document.\n"
  title: 2.  Conventions and Terminology
- contents:
  - "3.  Problem Discussion\n   As discussed in Section 1, a goal of the MediaCtrl
    working group is\n   to produce a solution that will service a wide variety of
    deployment\n   architectures.  Such architectures range from the simplest 1:1\n
    \  relationship between Media Servers and Application Servers to\n   potentially
    linearly scaling 1:M, M:1, and M:N deployments.\n   Managing such deployments
    is itself non-trivial for the proposed\n   solution until an additional number
    of factors that increase\n   complexity are included in the equation.  As Media
    Servers evolve, it\n   must be taken into consideration that, where many can exist
    in a\n   deployment, they may not have been produced by the same vendor and\n
    \  may not have the same capability set.  It should be possible for an\n   Application
    Server that exists in a deployment to select a media\n   service based on a common,
    appropriate capability set.  In\n   conjunction with capabilities, it is also
    important to take available\n   resources into consideration.  The ability to
    select an appropriate\n   media service function is an extremely useful feature
    but becomes\n   even more powerful when considered with available resources for\n
    \  servicing a request.\n   In conclusion, the intention is to create a toolkit
    that allows\n   MediaCtrl deployments to effectively utilize the available media\n
    \  resources.  It should be noted that in the simplest deployments where\n   only
    a single Media Server exists, an MRB function is probably not\n   required.  Only
    a single capability set exists, and resource\n   availability can be handled using
    the appropriate underlying\n   signaling, e.g., SIP response.  This document does
    not prohibit such\n   uses of an MRB; it simply provides the tools for various
    entities to\n   interact where appropriate.  It is also worth noting that the\n
    \  functions specified in this document aim to provide a 'best effort'\n   view
    of media resources at the time of request for initial Media\n   Server routing
    decisions.  Any dramatic change in media capabilities\n   or capacity after a
    request has taken place should be handled by the\n   underlying protocol.\n   It
    should be noted that there may be additional information that is\n   desirable
    for the MRB to have for purposes of selecting a Media\n   Server resource, such
    as resource allocation rules across different\n   applications, planned or unplanned
    downtime of Media Server\n   resources, the planned addition of future Media Server
    resources, or\n   Media Server resource capacity models.  How the MRB acquires
    such\n   information is outside the scope of this document.  The specific\n   techniques
    used for selecting an appropriate media resource by an MRB\n   is also outside
    the scope of this document.\n"
  title: 3.  Problem Discussion
- contents:
  - "4.  Deployment Scenario Options\n   Research into media resource brokering concluded
    that a couple of\n   high-level models provided an appropriate level of flexibility.
    \ The\n   general principles of \"in-line\" and \"query\" MRB concepts are\n   discussed
    in the rest of this section.  It should be noted that while\n   the interfaces
    are different, they both use common underlying\n   mechanisms defined in this
    specification.\n"
  title: 4.  Deployment Scenario Options
- contents:
  - "4.1.  Query MRB\n   The \"Query\" model for MRB interactions provides the ability
    for a\n   client of media services (for example, an Application Server) to\n   \"ask\"
    an MRB for an appropriate Media Server, as illustrated in\n   Figure 5.\n                        +---+-----+---+\n
    \         +------------>|     MRB     |<----------+----<-----+---+\n          |
    \            +-------------+        (1)|          |   |\n          |                                       |
    \         |   |\n          |(2)                             +---+--+--+---+   |
    \  |\n          |                                |    Media    |   |   |\n          |
    \                         +---->|    Server   |   |   |\n          |                          |
    \    +-------------+   |   |\n          |                          |                    (1)|
    \  |\n   +---+--+--+---+                   |     +---+-----+---+   |   |\n   |
    Application |                   |     |    Media    |   |   |\n   |   Server    |<-----+-MS
    Control-+---->|    Server   |->-+   |\n   +-------------+          (3)      |
    \    +-------------+       |\n                                     |                           |\n
    \                                    |     +---+-----+---+    (1)|\n                                     +---->|
    \   Media    |       |\n                                           |    Server
    \  |--->---+\n                                           +---+-----+---+\n                            Figure
    5: Query MRB\n   In this deployment, the Media Servers use the Media Server Resource\n
    \  Publish interface, as discussed in Section 5.1, to convey capability\n   sets
    as well as resource information.  This is depicted by (1) in\n   Figure 5.  It
    is then the MRB's responsibility to accumulate all\n   appropriate information
    relating to media services in the logical\n   deployment cluster.  The Application
    Server (or other media services\n   client) is then able to query the MRB for
    an appropriate resource (as\n   identified by (2) in Figure 5).  Such a query
    would carry specific\n   information related to the media service required and
    enable the MRB\n   to provide increased accuracy in its response.  This particular\n
    \  interface is discussed in \"Media Service Resource Consumer Interface\"\n   (Section
    5.2).  The Application Server is then able to direct control\n   commands (for
    example, create a conference) and media dialogs to the\n   appropriate Media Server,
    as shown by (3) in Figure 5.  Additionally,\n   with Query mode, the MRB is not
    directly in the signaling path\n   between the Application Server and the selected
    Media Server\n   resource.\n"
  title: 4.1.  Query MRB
- contents:
  - "4.1.1.  Hybrid Query MRB\n   As mentioned previously, it is the intention that
    a toolkit is\n   provided for MRB functionality within a MediaCtrl architecture.
    \ It\n   is expected that in specific deployment scenarios the role of the MRB\n
    \  might be co-hosted as a hybrid logical entity with an Application\n   Server,
    as shown in Figure 6.\n          +------------<----------------<---------+----<-----+---+\n
    \         |                     (1)               |          |   |\n          |
    \                                      |          |   |\n          |                                +---+--+--+---+
    \  |   |\n          |                                |    Media    |   |   |\n
    \         V                          +---->|    Server   |   |   |\n   +------+------+
    \                  |     +-------------+   |   |\n   |     MRB     |                   |
    \                      |   |\n   +---+--+--+---+                   |     +---+-----+---+
    \  |   |\n   | Application |                   |     |    Media    |   |   |\n
    \  |   Server    |<-----+-MS Control-+---->|    Server   |->-+   |\n   +-------------+
    \                  |     +-------------+       |\n                                     |
    \                          |\n                                     |     +---+-----+---+
    \      |\n                                     +---->|    Media    |       |\n
    \                                          |    Server   |--->---+\n                                           +---+-----+---+\n
    \         Figure 6: Hybrid Query MRB - Application Server Hosted\n   This diagram
    is identical to that in Figure 5 with the exception that\n   the MRB is now hosted
    on the Application Server.  The Media Server\n   Publish interface is still being
    used to accumulate resource\n   information at the MRB, but as it is co-hosted
    on the Application\n   Server, the Media Server Consumer interface has collapsed.
    \ It might\n   still exist within the Application Server/MRB interaction, but
    this\n   is an implementation issue.  This type of deployment suits a single\n
    \  Application Server environment, but it should be noted that a Media\n   Server
    Consumer interface could then be offered from the hybrid if\n   required.\n   In
    a similar manner, the Media Server could also act as a hybrid for\n   the deployment
    cluster, as illustrated in Figure 7.\n                                   (1)                 +---+-----+---+\n
    \  +---+---+------------->---------------->----------->|     MRB     |\n   |   |
    \  |   +---+--+--+---+                         +---+-----+---+\n   |   |   +-<-|
    Application |                         |    Media    |\n   |   |       |   Server
    \   |<--+-MS Control-+------->|    Server   |\n   |   |       +-------------+
    \                  |     +-------------+\n   |   |                                         |\n
    \  |   |       +---+--+--+---+                   |\n   |   +---<---| Application
    |                   |\n   |           |   Server    |<--+-MS Control-+--+\n   |
    \          +-------------+                   |\n   |                                             |\n
    \  |           +---+--+--+---+                   |\n   +---<-------| Application
    |                   |\n               |   Server    |<--+-MS Control-+--+\n               +-------------+\n
    \                 Figure 7: Hybrid Query MRB - MS Hosted\n   In this example,
    the MRB has collapsed and is co-hosted by the Media\n   Server.  The Media Server
    Consumer interface is still available to\n   the Application Servers (1) to query
    Media Server resources.  The\n   Media Server Publish interface has collapsed
    onto the Media Server.\n   It might still exist within the Media Server/MRB interaction,
    but\n   this is an implementation issue.  This type of deployment suits a\n   single
    Media Server environment, but it should be noted that a Media\n   Server Publish
    interface could then be offered from the hybrid if\n   required.  A typical use
    case scenario for such a topology would be a\n   single Media Server representing
    a pool of MSs in a cluster.  In this\n   case, the MRB would actually be handling
    a cluster of Media Servers,\n   rather than one.\n"
  title: 4.1.1.  Hybrid Query MRB
- contents:
  - "4.2.  In-Line MRB\n   The \"In-line\" MRB is architecturally different from the
    \"Query\" model\n   discussed in the previous section.  The concept of a separate
    query\n   disappears.  The client of the MRB simply uses the media resource\n
    \  control and media dialog signaling to involve the MRB.  This type of\n   deployment
    is illustrated in Figure 8.\n                               +-------<----------+----<-------+---+\n
    \                              |                  | (1)        |   |\n                               |
    \                 |            |   |\n                               |             +---+--+--+---+
    \  |   |\n                               |             |    Media    |   |   |\n
    \                              |     +------>|    Server   |   |   |\n                               |
    \    |(3)    +-------------+   |   |\n                               |     |                      (1)|
    \  |\n   +---+--+--+---+             |     |       +---+-----+---+   |   |\n   |
    Application |  (2) +---+--V--+---+  (3) |    Media    |   |   |\n   |   Server
    \   |----->|     MRB     |----->|    Server   |->-+   |\n   +-------------+      +---+-----+---+
    \     +-------------+       |\n                                     |                             |\n
    \                                    |   (3) +---+-----+---+    (1)|\n                                     +------>|
    \   Media    |       |\n                                             |    Server
    \  |--->---+\n                                             +---+-----+---+\n                           Figure
    8: In-Line MRB\n   The Media Servers still use the Media Server Publish interface
    to\n   convey capabilities and resources to the MRB, as illustrated by (1).\n
    \  The Media Server Control Channels (and media dialogs as well, if\n   required)
    are sent to the MRB (2), which then selects an appropriate\n   Media Server (3)
    and remains in the signaling path between the\n   Application Server and the Media
    Server resources.\n   The In-line MRB can be split into two distinct logical roles
    that can\n   be applied on a per-request basis.  They are:\n   In-line Unaware
    MRB Mode (IUMM):  Allows an MRB to act on behalf of\n      clients requiring media
    services who are not aware of an MRB or\n      its operation.  In this case, the
    Application Server does not\n      provide explicit information on the kind of
    Media Server resource\n      it needs (as in Section 5.2), and the MRB is left
    to deduce it by\n      potentially inspecting other information in the request
    from the\n      Application Server (for example, Session Description Protocol\n
    \     (SDP) content, or address of the requesting Application Server, or\n      additional
    Request-URI parameters as per RFC 4240 [RFC4240]).\n   In-line Aware MRB Mode
    (IAMM):  Allows an MRB to act on behalf of\n      clients requiring media services
    who are aware of an MRB and its\n      operation.  In particular, it allows the
    Application Server to\n      explicitly convey matching characteristics to those
    provided by\n      Media Servers, as does the Query MRB mode (as in Section 5.2).\n
    \  In either of the previously described roles, signaling as specified\n   by
    the Media Control Channel Framework ([RFC6230]) would be involved,\n   and the
    MRB would deduce that the selected Media Server resources are\n   no longer needed
    when the Application Server or Media Server\n   terminates the corresponding SIP
    dialog.  The two modes are discussed\n   in more detail in Section 5.3.\n"
  title: 4.2.  In-Line MRB
- contents:
  - "5.  MRB Interface Definitions\n   The intention of this specification is to provide
    a toolkit for a\n   variety of deployment architectures where media resource brokering\n
    \  can take place.  Two main interfaces are required to support the\n   differing
    requirements.  The two interfaces are described in the\n   remainder of this section
    and have been named the Media Server\n   Resource Publish and Media Server Resource
    Consumer interfaces.\n   It is beyond the scope of this document to define exactly
    how to\n   construct an MRB using the interfaces described.  It is, however,\n
    \  important that the two interfaces are complimentary so that\n   development
    of appropriate MRB functionality is supported.\n"
  title: 5.  MRB Interface Definitions
- contents:
  - "5.1.  Media Server Resource Publish Interface\n   The Media Server Resource Publish
    interface is responsible for\n   providing an MRB with appropriate Media Server
    resource information.\n   As such, this interface is assumed to provide both general
    and\n   specific details related to Media Server resources.  This information\n
    \  needs to be conveyed using an industry standard mechanism to provide\n   increased
    levels of adoption and interoperability.  A Control Package\n   for the Media
    Control Channel Framework will be specified to fulfill\n   this interface requirement.
    \ It provides an establishment and\n   monitoring mechanism to enable a Media
    Server to report appropriate\n   statistics to an MRB.  The Publish interface
    is used with both the\n   Query mode and In-line mode of MRB operation.\n   As
    already discussed in Section 1, the MRB view of Media Server\n   resource availability
    will in reality be approximate -- i.e., partial\n   and imperfect.  The MRB Publish
    interface does not provide an\n   exhaustive view of current Media Server resource
    consumption; the\n   Media Server may in some cases provide a best-effort computed
    view of\n   resource consumption parameters conveyed in the Publish interface\n
    \  (e.g., Digital Signal Processors (DSPs) with a fixed number of\n   streams
    versus Graphics Processing Units (GPUs) with CPU\n   availability).  Media resource
    information may only be reported\n   periodically over the Publish interface to
    an MRB.\n   It is also worth noting that while the scope of the MRB is in\n   providing
    interested Application Servers with the available\n   resources, the MRB also
    allows for the retrieval of information about\n   consumed resources.  While this
    is of course a relevant piece of\n   information (e.g., for monitoring purposes),
    such functionality\n   inevitably raises security considerations, and implementations
    should\n   take this into account.  See Section 12 for more details.\n   The MRB
    Publish interface uses the Media Control Channel Framework\n   ([RFC6230]) as
    the basis for interaction between a Media Server and\n   an MRB.  The Media Control
    Channel Framework uses an extension\n   mechanism to allow specific usages that
    are known as Control\n   Packages.  Section 5.1.1 defines the Control Package
    that MUST be\n   implemented by any Media Server wanting to interact with an MRB\n
    \  entity.\n"
  title: 5.1.  Media Server Resource Publish Interface
- contents:
  - "5.1.1.  Control Package Definition\n   This section fulfills the requirement
    for information that must be\n   specified during the definition of a Control
    Framework package, as\n   detailed in Section 8 of [RFC6230].\n"
  title: 5.1.1.  Control Package Definition
- contents:
  - "5.1.1.1.  Control Package Name\n   The Media Channel Control Framework requires
    a Control Package\n   definition to specify and register a unique name and version.\n
    \  The name and version of this Control Package is \"mrb-publish/1.0\".\n"
  title: 5.1.1.1.  Control Package Name
- contents:
  - "5.1.1.2.  Framework Message Usage\n   The MRB Publish interface allows a Media
    Server to convey available\n   capabilities and resources to an MRB entity.\n
    \  This package defines XML elements in Section 5.1.2 and provides an\n   XML
    schema in Section 10.\n   The XML elements in this package are split into requests,
    responses,\n   and event notifications.  Requests are carried in CONTROL message\n
    \  bodies; the <mrbrequest> element is defined as a package request.\n   This
    request can be used for creating new subscriptions and updating/\n   removing
    existing subscriptions.  Event notifications are also\n   carried in CONTROL message
    bodies; the <mrbnotification> element is\n   defined for package event notifications.
    \ Responses are carried\n   either in REPORT message or Control Framework 200
    response bodies;\n   the <mrbresponse> element is defined as a package-level response.\n
    \  Note that package responses are different from framework response\n   codes.
    \ Framework error response codes (see Section 7 of [RFC6230])\n   are used when
    the request or event notification is invalid; for\n   example, a request has invalid
    XML (400) or is not understood (500).\n   Package-level responses are carried
    in framework 200 response or\n   REPORT message bodies.  This package's response
    codes are defined in\n   Section 5.1.4.\n"
  title: 5.1.1.2.  Framework Message Usage
- contents:
  - "5.1.1.3.  Common XML Support\n   The Media Control Channel Framework [RFC6230]
    requires a Control\n   Package definition to specify if the attributes for media
    dialog or\n   conference references are required.\n   The Publish interface defined
    in Section 10 does import and make use\n   of the common XML schema defined in
    the Media Control Channel\n   Framework.\n   The Consumer interface defined in
    Section 11 does import and make use\n   of the common XML schema defined in the
    Media Control Channel\n   Framework.\n"
  title: 5.1.1.3.  Common XML Support
- contents:
  - "5.1.1.4.  CONTROL Message Body\n   A valid CONTROL message body MUST conform
    to the schema defined in\n   Section 10 and described in Section 5.1.2.  XML messages
    appearing in\n   CONTROL messages MUST contain either an <mrbrequest> or\n   <mrbnotification>
    element.\n"
  title: 5.1.1.4.  CONTROL Message Body
- contents:
  - "5.1.1.5.  REPORT Message Body\n   A valid REPORT message body MUST conform to
    the schema defined in\n   Section 10 and described in Section 5.1.2.  XML messages
    appearing in\n   REPORT messages MUST contain an <mrbresponse> element.\n"
  title: 5.1.1.5.  REPORT Message Body
- contents:
  - "5.1.1.6.  Audit\n   The 'mrb-publish/1.0' Media Control Channel Framework package
    does\n   not require any additional auditing capability.\n"
  title: 5.1.1.6.  Audit
- contents:
  - "5.1.2.  Element Definitions\n   This section defines the XML elements for the
    Publish interface Media\n   Control Channel package defined in Section 5.1.  The
    formal XML\n   schema definition for the Publish interface can be found in\n   Section
    10.\n   The root element is <mrbpublish>.  All other XML elements (requests,\n
    \  responses, notifications) are contained within it.  The MRB Publish\n   interface
    request element is detailed in Section 5.1.3.  The MRB\n   Publish interface notification
    element is detailed in Section 5.1.5.\n   The MRB Publish interface response element
    is detailed in\n   Section 5.1.4.\n   The <mrbpublish> element has the following
    attributes:\n   version:  a token specifying the mrb-publish package version.
    \ The\n      value is fixed as '1.0' for this version of the package.  The\n      attribute
    MUST be present.\n   The <mrbpublish> element has the following child elements,
    and there\n   MUST NOT be more than one such child element in any <mrbpublish>\n
    \  message:\n      <mrbrequest> for sending an MRB request.  See Section 5.1.3.\n
    \     <mrbresponse> for sending an MRB response.  See Section 5.1.4.\n      <mrbnotification>
    for sending an MRB notification.  See\n      Section 5.1.5.\n"
  title: 5.1.2.  Element Definitions
- contents:
  - "5.1.3.  <mrbrequest>\n   This section defines the <mrbrequest> element used to
    initiate\n   requests from an MRB to a Media Server.  The element describes\n
    \  information relevant for the interrogation of a Media Server.\n   The <mrbrequest>
    element has no defined attributes.\n   The <mrbrequest> element has the following
    child element:\n      <subscription> for initiating a subscription to a Media
    Server\n      from an MRB.  See Section 5.1.3.1.\n"
  title: 5.1.3.  <mrbrequest>
- contents:
  - "5.1.3.1.  <subscription>\n   The <subscription> element is included in a request
    from an MRB to a\n   Media Server to provide the details relating to the configuration
    of\n   updates (known as a subscription session).  This element can be used\n
    \  either to request a new subscription or to update an existing one\n   (e.g.,
    to change the frequency of the updates), and to remove ongoing\n   subscriptions
    as well (e.g., to stop an indefinite update).  The MRB\n   will inform the Media
    Server regarding how long it wishes to receive\n   updates and the frequency that
    updates should be sent.  Updates\n   related to the subscription are sent using
    the <mrbnotification>\n   element.\n   The <subscription> element has the following
    attributes:\n   id:  Indicates a unique token representing the subscription session\n
    \     between the MRB and the Media Server.  The attribute MUST be\n      present.\n
    \  seqnumber:  Indicates a sequence number to be used in conjunction\n      with
    the subscription session ID to identify a specific\n      subscription command.
    \ The first subscription MUST contain a\n      non-zero number 'seqnumber', and
    subsequent subscriptions MUST\n      contain a higher number than the previous
    'seqnumber' value.  If a\n      subsequent 'seqnumber' is not higher, a 405 response
    code is\n      generated as per Section 5.1.4.  The attribute MUST be present.\n
    \  action:  Provides the operation that should be carried out on the\n      subscription:\n
    \     *  The value of 'create' instructs the Media Server to attempt to\n         set
    up a new subscription.\n      *  The value of 'update' instructs the Media Server
    to attempt to\n         update an existing subscription.\n      *  The value of
    'remove' instructs the Media Server to attempt to\n         remove an existing
    subscription and consequently stop any\n         ongoing related notification.\n
    \     The attribute MUST be present.\n   The <subscription> element has zero or
    more of the following child\n   elements:\n   <expires>:  Provides the amount
    of time in seconds that a\n      subscription should be installed for notifications
    at the Media\n      Server.  Once the amount of time has passed, the subscription\n
    \     expires, and the MRB has to subscribe again if it is still\n      interested
    in receiving notifications from the Media Server.  The\n      element MAY be present.\n
    \  <minfrequency>:  Provides the minimum frequency in seconds that the\n      MRB
    wishes to receive notifications from the Media Server.  The\n      element MAY
    be present.\n   <maxfrequency>:  Provides the maximum frequency in seconds that
    the\n      MRB wishes to receive notifications from the Media Server.  The\n      element
    MAY be present.\n   Please note that these three optional pieces of information
    provided\n   by the MRB only act as a suggestion: the Media Server MAY change
    the\n   proposed values if it considers the suggestions unacceptable (e.g.,\n
    \  if the MRB has requested a notification frequency that is too high).\n   In
    such a case, the request would not fail, but the updated,\n   acceptable values
    would be reported in the <mrbresponse> accordingly.\n"
  title: 5.1.3.1.  <subscription>
- contents:
  - "5.1.4.  <mrbresponse>\n   Responses to requests are indicated by an <mrbresponse>
    element.\n   The <mrbresponse> element has the following attributes:\n   status:
    \ numeric code indicating the response status.  The attribute\n      MUST be present.\n
    \  reason:  string specifying a reason for the response status.  The\n      attribute
    MAY be present.\n   The <mrbresponse> element has a single child element:\n      <subscription>
    for providing details related to a subscription\n      requested by a Media Server
    (see below in this section).\n   The following status codes are defined for 'status':\n
    \  +-----------+-------------------------------------------------------+\n   |
    code      | description                                           |\n   +-----------+-------------------------------------------------------+\n
    \  | 200       | OK                                                    |\n   |
    \          |                                                       |\n   | 400
    \      | Syntax error                                          |\n   |           |
    \                                                      |\n   | 401       | Unable
    to create Subscription                         |\n   |           |                                                       |\n
    \  | 402       | Unable to update Subscription                         |\n   |
    \          |                                                       |\n   | 403
    \      | Unable to remove Subscription                         |\n   |           |
    \                                                      |\n   | 404       | Subscription
    does not exist                           |\n   |           |                                                       |\n
    \  | 405       | Wrong sequence number                                 |\n   |
    \          |                                                       |\n   | 406
    \      | Subscription already exists                           |\n   |           |
    \                                                      |\n   | 420       | Unsupported
    attribute or element                      |\n   +-----------+-------------------------------------------------------+\n
    \                   Table 1: <mrbresponse> Status Codes\n   If a new subscription
    request made by an MRB (action='create') has\n   been accepted, the Media Server
    MUST reply with an <mrbresponse> with\n   status code 200.  The same rule applies
    whenever a request to update\n   (action='update') or remove (action='remove')
    an existing transaction\n   can be fulfilled by the Media Server.\n   A subscription
    request, nevertheless, may fail for several reasons.\n   In such a case, the status
    codes defined in Table 1 must be used\n   instead.  Specifically, if the Media
    Server fails to handle a request\n   due to a syntax error in the request itself
    (e.g., incorrect XML,\n   violation of the schema constraints, or invalid values
    in any of the\n   attributes/elements), the Media Server MUST reply with an\n
    \  <mrbresponse> with status code 400.  If a syntactically correct\n   request
    fails because the request also includes any attribute/element\n   the Media Server
    doesn't understand, the Media Server MUST reply with\n   an <mrbresponse> with
    status code 420.  If a syntactically correct\n   request fails because the MRB
    wants to create a new subscription, but\n   the provided unique 'id' for the subscription
    already exists, the\n   Media Server MUST reply with an <mrbresponse> with status
    code 406.\n   If a syntactically correct request fails because the MRB wants to\n
    \  update/remove a subscription that doesn't exist, the Media Server\n   MUST
    reply with an <mrbresponse> with status code 404.  If the Media\n   Server is
    unable to accept a request for any other reason (e.g., the\n   MRB has no more
    resources to fulfill the request), the Media Server\n   MUST reply with an <mrbresponse>
    with status code 401/402/403,\n   depending on the action the MRB provided in
    its request:\n   o  action='create' --> 401;\n   o  action='update' --> 402;\n
    \  o  action='remove' --> 403;\n   A response to a subscription request that has
    a status code of 200\n   indicates that the request is successful.  The response
    MAY also\n   contain a <subscription> child that describes the subscription.  The\n
    \  <subscription> child MAY contain 'expires', 'minfrequency', and\n   'maxfrequency'
    values even if they were not contained in the request.\n   The Media Server can
    choose to change the suggested 'expires',\n   'minfrequency', and 'maxfrequency'
    values provided by the MRB in its\n   <mrbrequest> if it considers them unacceptable
    (e.g., the requested\n   frequency range is too high).  In such a case, the response
    MUST\n   contain a <subscription> element describing the subscription as the\n
    \  Media Server accepted it, and the Media Server MUST include in the\n   <subscription>
    element all of those values that it modified relative\n   to the request, to inform
    the MRB about the change.\n"
  title: 5.1.4.  <mrbresponse>
- contents:
  - "5.1.5.  <mrbnotification>\n   The <mrbnotification> element is included in a
    request from a Media\n   Server to an MRB to provide the details relating to current
    status.\n   The Media Server will inform the MRB of its current status as defined\n
    \  by the information in the <subscription> element.  Updates are sent\n   using
    the <mrbnotification> element.\n   The <mrbnotification> element has the following
    attributes:\n   id:  indicates a unique token representing the session between
    the\n      MRB and the Media Server and is the same as the one appearing in\n
    \     the <subscription> element.  The attribute MUST be present.\n   seqnumber:
    \ indicates a sequence number to be used in conjunction\n      with the subscription
    session ID to identify a specific\n      notification update.  The first notification
    update MUST contain a\n      non-zero number 'seqnumber', and subsequent notification
    updates\n      MUST contain a higher number than the previous 'seqnumber' value.\n
    \     If a subsequent 'seqnumber' is not higher, the situation should be\n      considered
    an error by the entity receiving the notification\n      update.  How the receiving
    entity deals with this situation is\n      implementation specific.  The attribute
    MUST be present.\n   It's important to point out that the 'seqnumber' that appears
    in an\n   <mrbnotification> is not related to the 'seqnumber' appearing in a\n
    \  <subscription>.  In fact, the latter is associated with subscriptions\n   and
    would increase at every command issued by the MRB, while the\n   former is associated
    with the asynchronous notifications the Media\n   Server would trigger according
    to the subscription and as such would\n   increase at every notification message
    to enable the MRB to keep\n   track of them.\n   The following sub-sections provide
    details of the child elements that\n   make up the contents of the <mrbnotification>
    element.\n"
  title: 5.1.5.  <mrbnotification>
- contents:
  - "5.1.5.1.  <media-server-id>\n   The <media-server-id> element provides a unique
    system-wide\n   identifier for a Media Server instance.  The element MUST be present\n
    \  and MUST be chosen such that it is extremely unlikely that two\n   different
    Media Servers would present the same id to a given MRB.\n"
  title: 5.1.5.1.  <media-server-id>
- contents:
  - "5.1.5.2.  <supported-packages>\n   The <supported-packages> element provides
    the list of Media Control\n   Channel packages supported by the Media Server.
    \ The element MAY be\n   present.\n   The <supported-packages> element has no
    attributes.\n   The <supported-packages> element has a single child element:\n
    \  <package>:  Gives the name of a package supported by the Media\n      Server.
    \ The <package> element has a single attribute, 'name',\n      which provides
    the name of the supported Media Control Channel\n      Framework package, compliant
    with Section 13.1.1 of [RFC6230].\n"
  title: 5.1.5.2.  <supported-packages>
- contents:
  - "5.1.5.3.  <active-rtp-sessions>\n   The <active-rtp-sessions> element provides
    information detailing the\n   current active Real-time Transport Protocol (RTP)
    sessions.  The\n   element MAY be present.\n   The <active-rtp-sessions> element
    has no attributes.\n   The <active-rtp-sessions> element has a single child element:\n
    \  <rtp-codec>:  Describes a supported codec and the number of active\n      sessions
    using that codec.  The <rtp-codec> element has one\n      attribute.  The value
    of the attribute, 'name', is a media type\n      (which can include parameters
    per [RFC6381]).  The <rtp-codec>\n      element has two child elements.  The child
    element <decoding> has\n      as content the decimal number of RTP sessions being
    decoded using\n      the specified codec, and the child element <encoding> has
    as\n      content the decimal number of RTP sessions being encoded using the\n
    \     specified codec.\n"
  title: 5.1.5.3.  <active-rtp-sessions>
- contents:
  - "5.1.5.4.  <active-mixer-sessions>\n   The <active-mixer-sessions> element provides
    information detailing\n   the current active mixed RTP sessions.  The element
    MAY be present.\n   The <active-mixer-sessions> element has no attributes.\n   The
    <active-mixer-sessions> element has a single child element:\n   <active-mix>:
    \ Describes a mixed active RTP session.  The\n      <active-mix> element has one
    attribute.  The value of the\n      attribute, 'conferenceid', is the name of
    the mix.  The\n      <active-mix> element has one child element.  The child element,\n
    \     <rtp-codec>, contains the same information relating to RTP\n      sessions
    as that defined in Section 5.1.5.3.  The element MAY be\n      present.\n"
  title: 5.1.5.4.  <active-mixer-sessions>
- contents:
  - "5.1.5.5.  <non-active-rtp-sessions>\n   The <non-active-rtp-sessions> element
    provides information detailing\n   the currently available inactive RTP sessions,
    that is, how many more\n   RTP streams this Media Server can support.  The element
    MAY be\n   present.\n   The <non-active-rtp-sessions> element has no attributes.\n
    \  The <non-active-rtp-sessions> element has a single child element:\n   <rtp-codec>:
    \ Describes a supported codec and the number of\n      non-active sessions for
    that codec.  The <rtp-codec> element has\n      one attribute.  The value of the
    attribute, 'name', is a media\n      type (which can include parameters per [RFC6381]).
    \ The\n      <rtp-codec> element has two child elements.  The child element\n
    \     <decoding> has as content the decimal number of RTP sessions\n      available
    for decoding using the specified codec, and the child\n      element <encoding>
    has as content the decimal number of RTP\n      sessions available for encoding
    using the specified codec.\n"
  title: 5.1.5.5.  <non-active-rtp-sessions>
- contents:
  - "5.1.5.6.  <non-active-mixer-sessions>\n   The <non-active-mixer-sessions> element
    provides information\n   detailing the current inactive mixed RTP sessions, that
    is, how many\n   more mixing sessions this Media Server can support.  The element
    MAY\n   be present.\n   The <non-active-mixer-sessions> element has no attributes.\n
    \  The <non-active-mixer-sessions> element has a single child element:\n   <non-active-mix>:
    \ Describes available mixed RTP sessions.  The\n      <non-active-mix> element
    has one attribute.  The value of the\n      attribute, 'available', is the number
    of mixes that could be used\n      using that profile.  The <non-active-mix> element
    has one child\n      element.  The child element, <rtp-codec>, contains the same\n
    \     information relating to RTP sessions as that defined in\n      Section 5.1.5.5.
    \ The element MAY be present.\n"
  title: 5.1.5.6.  <non-active-mixer-sessions>
- contents:
  - "5.1.5.7.  <media-server-status>\n   The <media-server-status> element provides
    information detailing the\n   current status of the Media Server.  The element
    MUST be present.  It\n   can return one of the following values:\n   active:  Indicates
    that the Media Server is available for service.\n   deactivated:  Indicates that
    the Media Server has been withdrawn from\n      service, and as such requests
    should not be sent to it before it\n      becomes 'active' again.\n   unavailable:
    \ Indicates that the Media Server continues to process\n      past requests but
    cannot accept new requests, and as such should\n      not be contacted before
    it becomes 'active' again.\n   The <media-server-status> element has no attributes.\n
    \  The <media-server-status> element has no child elements.\n"
  title: 5.1.5.7.  <media-server-status>
- contents:
  - "5.1.5.8.  <supported-codecs>\n   The <supported-codecs> element provides information
    detailing the\n   current codecs supported by a Media Server and associated actions.\n
    \  The element MAY be present.\n   The <supported-codecs> element has no attributes.\n
    \  The <supported-codecs> element has a single child element:\n   <supported-codec>:
    \ Has a single attribute, 'name', which provides\n      the name of the codec
    about which this element provides\n      information.  A valid value is a media
    type that, depending on its\n      definition, can include additional parameters
    (e.g., [RFC6381]).\n      The <supported-codec> element then has a further child
    element,\n      <supported-codec-package>.  The <supported-codec-package> element\n
    \     has a single attribute, 'name', which provides the name of the\n      Media
    Control Channel Framework package, compliant with\n      Section 13.1.1 of [RFC6230],
    for which the codec support applies.\n      The <supported-codec-package> element
    has zero or more\n      <supported-action> children, each one of which describes
    an action\n      that a Media Server can apply to this codec:\n      *  'decoding',
    meaning a decoder for this codec is available;\n      *  'encoding', meaning an
    encoder for this codec is available;\n      *  'passthrough', meaning the Media
    Server is able to pass a\n         stream encoded using that codec through, without
    re-encoding.\n"
  title: 5.1.5.8.  <supported-codecs>
- contents:
  - "5.1.5.9.  <application-data>\n   The <application-data> element provides an arbitrary
    string of\n   characters as application-level data.  This data is meant to only\n
    \  have meaning at the application-level logic and as such is not\n   otherwise
    restricted by this specification.  The set of allowed\n   characters is the same
    as those in XML (viz., tab, carriage return,\n   line feed, and the legal characters
    of Unicode and ISO/IEC 10646\n   [ISO.10646.2012] (see also Section 2.2 of\n   <http://www.w3.org/TR/xml/>)).
    \ The element MAY be present.\n   The <application-data> element has no attributes.\n
    \  The <application-data> element has no child elements.\n"
  title: 5.1.5.9.  <application-data>
- contents:
  - "5.1.5.10.  <file-formats>\n   The <file-formats> element provides a list of file
    formats supported\n   for the purpose of playing media.  The element MAY be present.\n
    \  The <file-formats> element has no attributes.\n   The <file-formats> element
    has zero of more the following child\n   elements:\n   <supported-format>:  Has
    a single attribute, 'name', which provides\n      the type of file format that
    is supported.  A valid value is a\n      media type that, depending on its definition,
    can include\n      additional parameters (e.g., [RFC6381]).  The <supported-format>\n
    \     element then has a further child element,\n      <supported-file-package>.
    \ The <supported-file-package> element\n      provides the name of the Media Control
    Channel Framework package,\n      compliant with Section 13.1.1 of [RFC6230],
    for which the file\n      format support applies.\n"
  title: 5.1.5.10.  <file-formats>
- contents:
  - "5.1.5.11.  <max-prepared-duration>\n   The <max-prepared-duration> element provides
    the maximum amount of\n   time a media dialog will be kept in the prepared state
    before timing\n   out (see Section 4.4.2.2.6 of RFC 6231 [RFC6231].  The element
    MAY be\n   present.\n   The <max-prepared-duration> element has no attributes.\n
    \  The <max-prepared-duration> element has a single child element:\n   <max-time>:
    \ Has a single attribute, 'max-time-seconds', which\n      provides the amount
    of time in seconds that a media dialog can be\n      in the prepared state.  The
    <max-time> element then has a further\n      child element, <max-time-package>.
    \ The <max-time-package> element\n      provides the name of the Media Control
    Channel Framework package,\n      compliant with Section 13.1.1 of [RFC6230],
    for which the time\n      period applies.\n"
  title: 5.1.5.11.  <max-prepared-duration>
- contents:
  - "5.1.5.12.  <dtmf-support>\n   The <dtmf-support> element specifies the supported
    methods to detect\n   Dual-Tone Multi-Frequency (DTMF) tones and to generate them.
    \ The\n   element MAY be present.\n   The <dtmf-support> element has no attributes.\n
    \  The <dtmf-support> element has zero of more of the following child\n   elements:\n
    \  <detect>:  Indicates the support for DTMF detection.  The <detect>\n      element
    has no attributes.  The <detect> element then has a\n      further child element,
    <dtmf-type>.  The <dtmf-type> element has\n      two attributes: 'name' and 'package'.
    \ The 'name' attribute\n      provides the type of DTMF being used, and it can
    only be a case-\n      insensitive string containing either 'RFC4733' [RFC4733]
    or\n      'Media' (detecting tones as signals from the audio stream).  The\n      'package'
    attribute provides the name of the Media Control Channel\n      Framework package,
    compliant with Section 13.1.1 of [RFC6230], for\n      which the DTMF type applies.\n
    \  <generate>:  Indicates the support for DTMF generation.  The\n      <generate>
    element has no attributes.  The <generate> element then\n      has a further child
    element, <dtmf-type>.  The <dtmf-type> element\n      has two attributes: 'name'
    and 'package'.  The 'name' attribute\n      provides the type of DTMF being used,
    and it can only be a case-\n      insensitive string containing either 'RFC4733'
    [RFC4733] or\n      'Media' (generating tones as signals in the audio stream).
    \ The\n      'package' attribute provides the name of the Media Control Channel\n
    \     Framework package, compliant with Section 13.1.1 of [RFC6230], for\n      which
    the DTMF type applies.\n   <passthrough>:  Indicates the support for passing DTMF
    through\n      without re-encoding.  The <passthrough> element has no attributes.\n
    \     The <passthrough> element then has a further child element,\n      <dtmf-type>.
    \ The <dtmf-type> element has two attributes: 'name'\n      and 'package'.  The
    'name' attribute provides the type of DTMF\n      being used, and it can only
    be a case-insensitive string\n      containing either 'RFC4733' [RFC4733] or 'Media'
    (passing tones as\n      signals through the audio stream).  The 'package' attribute\n
    \     provides the name of the Media Control Channel Framework package,\n      compliant
    with Section 13.1.1 of [RFC6230], for which the DTMF\n      type applies.\n"
  title: 5.1.5.12.  <dtmf-support>
- contents:
  - "5.1.5.13.  <mixing-modes>\n   The <mixing-modes> element provides information
    about the support for\n   audio and video mixing of a Media Server, specifically
    a list of\n   supported algorithms to mix audio and a list of supported video\n
    \  presentation layouts.  The element MAY be present.\n   The <mixing-modes> element
    has no attributes.\n   The <mixing-modes> element has zero or more of the following
    child\n   elements:\n   <audio-mixing-modes>:  Describes the available algorithms
    for audio\n      mixing.  The <audio-mixing-modes> element has no attributes.
    \ The\n      <audio-mixing-modes> element has one child element.  The child\n
    \     element, <audio-mixing-mode>, contains a specific available\n      algorithm.
    \ Valid values for the <audio-mixing-mode> element are\n      algorithm names,
    e.g., 'nbest' and 'controller' as defined in\n      [RFC6505].  The element has
    a single attribute, 'package'.  The\n      attribute 'package' provides the name
    of the Media Control Channel\n      Framework package, compliant with Section
    13.1.1 of [RFC6230], for\n      which the algorithm support applies.\n   <video-mixing-modes>:
    \ Describes the available video presentation\n      layouts and the supported
    functionality related to video mixing.\n      The <video-mixing-modes> element
    has two attributes: 'vas' and\n      'activespeakermix'.  The 'vas' attribute
    is of type boolean with a\n      value of 'true' indicating that the Media Server
    supports\n      automatic Voice Activated Switching.  The 'activespeakermix' is
    of\n      type boolean with a value of 'true' indicating that the Media\n      Server
    is able to prepare an additional video stream for the\n      loudest speaker participant
    without its contribution.  The\n      <video-mixing-modes> element has one child
    element.  The child\n      element, <video-mixing-mode>, contains the name of
    a specific\n      video presentation layout.  The name may refer to one of the\n
    \     predefined video layouts defined in the XCON conference\n      information
    data model [RFC6501], or to non-XCON layouts as well,\n      as long as they are
    properly prefixed according to the schema they\n      belong to.  The <video-mixing-mode>
    element has a single\n      attribute, 'package'.  The attribute 'package' provides
    the name\n      of the Media Control Channel Framework package, compliant with\n
    \     Section 13.1.1 of [RFC6230], for which the algorithm support\n      applies.\n"
  title: 5.1.5.13.  <mixing-modes>
- contents:
  - "5.1.5.14.  <supported-tones>\n   The <supported-tones> element provides information
    about which tones\n   a Media Server is able to play and recognize.  In particular,
    the\n   support is reported by referring to both support for country codes\n   (ISO
    3166-1 [ISO.3166-1]) and supported functionality (ITU-T\n   Recommendation Q.1950
    [ITU-T.Q.1950]).  The element MAY be present.\n   The <supported-tones> element
    has no attributes.\n   The <supported-tones> element has zero or more of the following
    child\n   elements:\n   <supported-country-codes>:  Describes the supported country
    codes\n      with respect to tones.  The <supported-country-codes> element has\n
    \     no attributes.  The <supported-country-codes> element has one\n      child
    element.  The child element, <country-code>, reports support\n      for a specific
    country code, compliant with the ISO 3166-1\n      [ISO.3166-1] specification.
    \ The <country-code> element has a\n      single attribute, 'package'.  The attribute
    'package' provides the\n      name of the Media Control Channel Framework package,
    compliant\n      with Section 13.1.1 of [RFC6230], in which the tones from the\n
    \     specified country code are supported.\n   <supported-h248-codes>:  Describes
    the supported H.248 codes with\n      respect to tones.  The <supported-h248-codes>
    element has no\n      attributes.  The <supported-h248-codes> element has one
    child\n      element.  The child element, <h248-code>, reports support for a\n
    \     specific H.248 code, compliant with the ITU-T Recommendation\n      Q.1950
    [ITU-T.Q.1950] specification.  The codes can be either\n      specific (e.g.,
    cg/dt to only report the Dial Tone from the Call\n      Progress Tones package)
    or generic (e.g., cg/* to report all the\n      tones from the Call Progress Tones
    package), using wildcards.  The\n      <h248-code> element has a single attribute,
    'package'.  The\n      attribute 'package' provides the name of the Media Control
    Channel\n      Framework package, compliant with Section 13.1.1 of [RFC6230],
    in\n      which the specified codes are supported.\n"
  title: 5.1.5.14.  <supported-tones>
- contents:
  - "5.1.5.15.  <file-transfer-modes>\n   The <file-transfer-modes> element allows
    the Media Server to specify\n   which scheme names are supported for transferring
    files to a Media\n   Server for each Media Control Channel Framework package type,
    for\n   example, whether the Media Server supports fetching resources via\n   HTTP,
    HTTPS, NFS, etc.  The element MAY be present.\n   The <file-transfer-modes> element
    has no attributes.\n   The <file-transfer-modes> element has a single child element:\n
    \  <file-transfer-mode>:  Has two attributes: 'name' and 'package'.  The\n      'name'
    attribute provides the scheme name of the protocol that can\n      be used for
    file transfer (e.g., HTTP, HTTPS, NFS, etc.); the\n      value of the attribute
    is case insensitive.  The 'package'\n      attribute provides the name of the
    Media Control Channel Framework\n      package, compliant with the specification
    in the related IANA\n      registry (e.g., \"msc-ivr/1.0\"), for which the scheme
    name applies.\n   It is important to point out that this element provides no\n
    \  information about whether or not the Media Server supports any flavor\n   of
    live streaming: for instance, a value of \"HTTP\" for the IVR\n   (Interactive
    Voice Response) Package would only mean the 'http'\n   scheme makes sense to the
    Media Server within the context of that\n   package.  Whether or not the Media
    Server can make use of HTTP to\n   only fetch resources, or also to attach an
    HTTP live stream to a\n   call, is to be considered implementation specific to
    the Media Server\n   and irrelevant to the Application Server and/or MRB.  Besides,
    the\n   Media Server supporting a scheme does not imply that it also supports\n
    \  the related secure versions: for instance, if the Media Server\n   supports
    both HTTP and HTTPS, both the schemes will appear in the\n   element.  A lack
    of the \"HTTPS\" value would need to be interpreted as\n   a lack of support for
    the 'https' scheme.\n"
  title: 5.1.5.15.  <file-transfer-modes>
- contents:
  - "5.1.5.16.  <asr-tts-support>\n   The <asr-tts-support> element provides information
    about the support\n   for Automatic Speech Recognition (ASR) and Text-to-Speech
    (TTS)\n   functionality in a Media Server.  The functionality is reported by\n
    \  referring to the supported languages (using ISO 639-1 [ISO.639.2002]\n   codes)
    regarding both ASR and TTS.  The element MAY be present.\n   The <asr-tts-support>
    element has no attributes.\n   The <asr-tts-support> element has zero or more
    of the following child\n   elements:\n   <asr-support>:  Describes the available
    languages for ASR.  The\n      <asr-support> element has no attributes.  The <asr-support>\n
    \     element has one child element.  The child element, <language>,\n      reports
    that the Media Server supports ASR for a specific\n      language.  The <language>
    element has a single attribute,\n      'xml:lang'.  The attribute 'xml:lang' contains
    the ISO 639-1\n      [ISO.639.2002] code of the supported language.\n   <tts-support>:
    \ Describes the available languages for TTS.  The\n      <tts-support> element
    has no attributes.  The <tts-support>\n      element has one child element.  The
    child element, <language>,\n      reports that the Media Server supports TTS for
    a specific\n      language.  The <language> element has a single attribute,\n
    \     'xml:lang'.  The attribute 'xml:lang' contains the ISO 639-1\n      [ISO.639.2002]
    code of the supported language.\n"
  title: 5.1.5.16.  <asr-tts-support>
- contents:
  - "5.1.5.17.  <vxml-support>\n   The <vxml-support> element specifies if the Media
    Server supports\n   VoiceXML (VXML) and, if it does, through which protocols the
    support\n   is exposed (e.g., via the control framework, RFC 4240 [RFC4240], or\n
    \  RFC 5552 [RFC5552]).  The element MAY be present.\n   The <vxml-support> element
    has no attributes.\n   The <vxml-support> element has a single child element:\n
    \  <vxml-mode>:  Has two attributes: 'package' and 'support'.  The\n      'package'
    attribute provides the name of the Media Control Channel\n      Framework package,
    compliant with Section 13.1.1 of [RFC6230], for\n      which the VXML support
    applies.  The 'support' attribute provides\n      the type of VXML support provided
    by the Media Server (e.g.,\n      RFC 5552 [RFC5552], RFC 4240 [RFC4240], or the
    IVR Package\n      [RFC6231]), and valid values are case-insensitive RFC references\n
    \     (e.g., \"rfc6231\" to specify that the Media Server supports\n      VoiceXML
    as provided by the IVR Package [RFC6231]).\n   The presence of at least one <vxml-mode>
    child element would indicate\n   that the Media Server does support VXML as specified
    by the child\n   element itself.  An empty <vxml> element would otherwise indicate\n
    \  that the Media Server does not support VXML at all.\n"
  title: 5.1.5.17.  <vxml-support>
- contents:
  - "5.1.5.18.  <media-server-location>\n   The <media-server-location> element provides
    information about the\n   civic location of a Media Server.  Its description makes
    use of the\n   Civic Address Schema standardized in RFC 5139 [RFC5139].  The element\n
    \  MAY be present.  More precisely, this section is entirely optional,\n   and
    it's implementation specific to fill it with just the details\n   each implementer
    deems necessary for any optimization that may be\n   needed.\n   The <media-server-location>
    element has no attributes.\n   The <media-server-location> element has a single
    child element:\n   <civicAddress>:  Describes the civic address location of the
    Media\n      Server, whose representation refers to Section 4 of RFC 5139\n      [RFC5139].\n"
  title: 5.1.5.18.  <media-server-location>
- contents:
  - "5.1.5.19.  <label>\n   The <label> element allows a Media Server to declare a
    piece of\n   information that will be understood by the MRB.  For example, the\n
    \  Media Server can declare if it's a blue or green one.  It's a string\n   to
    allow arbitrary values to be returned to allow arbitrary\n   classification.  The
    element MAY be present.\n   The <label> element has no attributes.\n   The <label>
    element has no child elements.\n"
  title: 5.1.5.19.  <label>
- contents:
  - "5.1.5.20.  <media-server-address>\n   The <media-server-address> element allows
    a Media Server to provide a\n   direct SIP URI where it can be reached (e.g.,
    the URI that the\n   Application Server would call in order to set up a Control
    Channel\n   and relay SIP media dialogs).  The element MAY be present.\n   The
    <media-server-address> element has no attributes.\n   The <media-server-address>
    element has no child elements.\n"
  title: 5.1.5.20.  <media-server-address>
- contents:
  - "5.1.5.21.  <encryption>\n   The <encryption> element allows a Media Server to
    declare support for\n   encrypting RTP media streams using RFC 3711 [RFC3711].
    \ The element\n   MAY be present.  If the element is present, then the Media Server\n
    \  supports DTLS-SRTP (a Secure Real-time Transport Protocol (SRTP)\n   extension
    for Datagram Transport Layer Security (DTLS)) [RFC5763].\n   The <encryption>
    element has no attributes.\n   The <encryption> element has no child elements.\n"
  title: 5.1.5.21.  <encryption>
- contents:
  - "5.2.  Media Service Resource Consumer Interface\n   The Media Server Consumer
    interface provides the ability for clients\n   of an MRB, such as Application
    Servers, to request an appropriate\n   Media Server to satisfy specific criteria.
    \ This interface allows a\n   client to pass detailed meta-information to the
    MRB to help select an\n   appropriate Media Server.  The MRB is then able to make
    an informed\n   decision and provide the client with an appropriate Media Server\n
    \  resource.  The MRB Consumer interface includes both 1) the In-line\n   Aware
    MRB Mode (IAMM), which uses the Session Initiation Protocol\n   (SIP) and 2) the
    Query mode, which uses the Hypertext Transfer\n   Protocol (HTTP) [RFC2616].  The
    MRB Consumer interface does not\n   include the In-line Unaware Mode (IUMM), which
    is further explained\n   in Section 5.3.  The following sub-sections provide guidance
    on\n   using the Consumer interface, which is represented by the\n   'application/mrb-consumer+xml'
    media type in Section 11, with HTTP\n   and SIP.\n"
  title: 5.2.  Media Service Resource Consumer Interface
- contents:
  - "5.2.1.  Query Mode/HTTP Consumer Interface Usage\n   An appropriate interface
    for such a 'query' style interface is in\n   fact an HTTP usage.  Using HTTP and
    XML combined reduces complexity\n   and encourages the use of common tools that
    are widely available in\n   the industry today.  The following information explains
    the primary\n   operations required to request and then receive information from
    an\n   MRB, by making use of HTTP [RFC2616] and HTTPS [RFC2818] as transport\n
    \  for a query for a media resource, and the appropriate response.\n   The media
    resource query, as defined by the <mediaResourceRequest>\n   element from Section
    11, MUST be carried in the body of an HTTP/HTTPS\n   POST request.  The media
    type contained in the HTTP/HTTPS request/\n   response MUST be 'application/mrb-consumer+xml'.
    \ This value MUST be\n   reflected in the appropriate HTTP headers, such as 'Content-Type'
    and\n   'Accept'.  The body of the HTTP/HTTPS POST request MUST only contain\n
    \  an <mrbconsumer> root element with only one child\n   <mediaResourceRequest>
    element as defined in Section 11.\n   The media resource response to a query,
    as defined by the\n   <mediaResourceResponse> element from Section 11, MUST be
    carried in\n   the body of an HTTP/HTTPS 200 response to the original HTTP/HTTPS\n
    \  POST request.  The media type contained in the HTTP/HTTPS request/\n   response
    MUST be 'application/mrb-consumer+xml'.  This value MUST be\n   reflected in the
    appropriate HTTP headers, such as 'Content-Type' and\n   'Accept'.  The body of
    the HTTP/HTTPS 200 response MUST only contain\n   an <mrbconsumer> root element
    with only one child\n   <mediaResourceResponse> element as defined in Section
    11.\n   When an Application Server wants to release previously awarded media\n
    \  resources granted through a prior request/response exchange with an\n   MRB,
    it will send a new request with an <action> element with value\n   'remove', as
    described in Section 5.2.3 (\"Consumer Interface Lease\n   Mechanism\").\n"
  title: 5.2.1.  Query Mode/HTTP Consumer Interface Usage
- contents:
  - "5.2.2.  In-Line Aware Mode/SIP Consumer Interface Usage\n   This document provides
    a complete toolkit for MRB deployment that\n   includes the ability to interact
    with an MRB using SIP for the\n   Consumer interface.  The following information
    explains the primary\n   operations required to request and then receive information
    from an\n   MRB, by making use of SIP [RFC3261] as transport for a request for\n
    \  media resources, and the appropriate response when using IAMM as the\n   mode
    of operation (as discussed in Section 5.2.2.1).\n   The use of IAMM, besides having
    the MRB select appropriate media\n   resources on behalf of a client application,
    includes setting up\n   either a Control Framework Control Channel between an
    Application\n   Server and one of the Media Servers (Section 5.2.2.1) or a media\n
    \  dialog session between an Application Server and one of the Media\n   Servers
    (Section 5.2.2.2).  Note that in either case the SIP URIs of\n   the selected
    Media Servers are made known to the requesting\n   Application Server in the SIP
    200 OK response by means of one or more\n   <media-server-address> child elements
    in the <response-session-info>\n   element (Section 5.2.6).\n"
  title: 5.2.2.  In-Line Aware Mode/SIP Consumer Interface Usage
- contents:
  - "5.2.2.1.  IAMM and Setting Up a Control Framework Control Channel\n   The media
    resource request information, as defined by the\n   <mediaResourceRequest> element
    from Section 11, is carried in a SIP\n   INVITE request.  The INVITE request will
    be constructed as it would\n   have been to connect to a Media Server, as defined
    by the Media\n   Control Channel Framework [RFC6230].  It should be noted that
    this\n   specification does not exclude the use of an offerless INVITE as\n   defined
    in RFC 3261 [RFC3261].  Using offerless INVITE messages to an\n   MRB can potentially
    cause confusion when applying resource selection\n   algorithms, and an MRB, like
    any other SIP device, can choose to\n   reject with a 4xx response.  For an offerless
    INVITE to be treated\n   appropriately, additional contextual information would
    need to be\n   provided with the request; this is out of scope for this document.\n
    \  The following additional steps MUST be followed when using the\n   Consumer
    interface:\n   o  The Consumer client will include a payload in the SIP INVITE\n
    \     request of type 'multipart/mixed' [RFC2046].  One of the parts to\n      be
    included in the 'multipart/mixed' payload MUST be the\n      'application/sdp'
    format, which is constructed as specified in the\n      Media Control Channel
    Framework [RFC6230].\n   o  Another part of the 'multipart/mixed' payload MUST
    be of type\n      'application/mrb-consumer+xml', as specified in this document
    and\n      defined in Section 11.  The body part MUST be an XML document\n      without
    prolog and whose root element is <mediaResourceRequest>.\n   o  The INVITE request
    will then be dispatched to the MRB, as defined\n      by [RFC6230].\n   On receiving
    a SIP INVITE request containing the multipart/mixed\n   payload as specified previously,
    the MRB will complete a number of\n   steps to fulfill the request.  It will:\n
    \  o  Extract the multipart MIME payload from the SIP INVITE request.\n      It
    will then use the contextual information provided by the client\n      in the
    'application/mrb-consumer+xml' part to determine which\n      Media Server (or
    Media Servers, if more than one is deemed to be\n      needed) should be selected
    to service the request.\n   o  Extract the 'application/sdp' part from the payload
    and use it as\n      the body of a new SIP INVITE request for connecting the client
    to\n      one of the selected Media Servers, as defined in the Media Channel\n
    \     Control Framework [RFC6230].  The policy the MRB follows to pick a\n      specific
    Media Server out of the Media Servers it selects is\n      implementation specific
    and out of scope for this document.  It is\n      important to configure the SIP
    elements between the MRB and the\n      Media Server in such a way that the INVITE
    will not fork.  In the\n      case of a failure in reaching the chosen Media Server,
    the MRB\n      SHOULD proceed to the next one, if available.\n   If none of the
    available Media Servers can be reached, the MRB MUST\n   reply with a SIP 503
    error message that includes a Retry-After header\n   with a non-zero value.  The
    Application Server MUST NOT attempt to\n   set up a new session before the time
    that the MRB asked it to wait\n   has passed.\n   If at least one Media Server
    is reachable, the MRB acts as a Back-to-\n   Back User Agent (B2BUA) that extracts
    the 'application/\n   mrb-consumer+xml' information from the SIP INVITE request
    and then\n   sends a corresponding SIP INVITE request to the Media Server it has\n
    \  selected, to negotiate a Control Channel as defined in the Media\n   Channel
    Control Framework [RFC6230].\n   In the case of a failure in negotiating the Control
    Channel with the\n   Media Server, the MRB SHOULD proceed to the next one, if
    available,\n   as explained above.  If none of the available Media Servers can
    be\n   reached, or the negotiations of the Control Channel with all of them\n
    \  fail, the MRB MUST reply with a SIP 503 error message that includes a\n   Retry-After
    header with a non-zero value.  The Application Server\n   MUST NOT attempt to
    set up a new session before the time that the MRB\n   asked it to wait has expired.\n
    \  Once the MRB receives the SIP response from the selected media\n   resource
    (i.e., Media Server), it will in turn respond to the\n   requesting client (i.e.,
    Application Server).\n   The media resource response generated by an MRB to a
    request, as\n   defined by the <mediaResourceResponse> element from Section 11,
    MUST\n   be carried in the payload of a SIP 200 OK response to the original\n
    \  SIP INVITE request.  The SIP 200 OK response will be constructed as\n   it
    would have been to connect from a Media Server, as defined by the\n   Media Control
    Channel Framework [RFC6230].  The following additional\n   steps MUST be followed
    when using the Consumer interface:\n   o  Include a payload in the SIP 200 response
    of type 'multipart/\n      mixed' as per RFC 2046 [RFC2046].  One of the parts
    to be included\n      in the 'multipart/mixed' payload MUST be the 'application/sdp'\n
    \     format, which is constructed as specified in the Media Control\n      Channel
    Framework [RFC6230] and based on the incoming response\n      from the selected
    media resource.\n   o  Another part of the 'multipart/mixed' payload MUST be of
    type\n      'application/mrb-consumer+xml', as specified in this document and\n
    \     defined in Section 11.  Only the <mediaResourceResponse> and its\n      child
    elements can be included in the payload.\n   o  The SIP 200 response will then
    be dispatched from the MRB.\n   o  A SIP ACK to the 200 response will then be
    sent back to the MRB.\n   Considering that the use of SIP as a transport for Consumer\n
    \  transactions may result in failure, the IAMM relies on a successful\n   INVITE
    transaction to address the previously discussed sequence\n   (using the 'seq'
    XML element) increment mechanism.  This means that\n   if the INVITE is unsuccessful
    for any reason, the Application Server\n   MUST use the same 'seq' value as previously
    used for the next\n   Consumer request that it may want to send to the MRB for
    the same\n   session.\n   An MRB implementation may be programmed to conclude
    that the\n   requested resources are no longer needed when it receives a SIP BYE\n
    \  from the Application Server or Media Server that concludes the SIP\n   dialog
    that initiated the request, or when the lease (Section 5.2.3)\n   interval expires.\n"
  title: 5.2.2.1.  IAMM and Setting Up a Control Framework Control Channel
- contents:
  - "5.2.2.2.  IAMM and Setting Up a Media Dialog\n   This scenario is identical to
    the description in the previous section\n   for setting up a Control Framework
    Control Channel, with the\n   exception that the application/sdp payload conveys
    content\n   appropriate for setting up the media dialog to the media resource,
    as\n   per RFC 3261 [RFC3261], instead of setting up a Control Channel.\n"
  title: 5.2.2.2.  IAMM and Setting Up a Media Dialog
- contents:
  - "5.2.3.  Consumer Interface Lease Mechanism\n   The Consumer interface defined
    in Sections 5.2 and 11 allows a client\n   to request an appropriate media resource
    based on information\n   included in the request (either an HTTP POST or SIP INVITE
    message).\n   In the case of success, the response that is returned to the client\n
    \  MUST contain a <response-session-info> element in either the SIP 200\n   or
    HTTP 200 response.  The success response contains the description\n   of certain
    resources that have been reserved to a specific Consumer\n   client in a (new
    or revised) \"resource session\", which is identified\n   in the <response-session-info>.
    \ The resource session is a \"lease\",\n   in that the reservation is scheduled
    to expire at a particular time\n   in the future, releasing the resources to be
    assigned for other uses.\n   The lease may be extended or terminated earlier by
    future Consumer\n   client requests that identify and reference a specific resource\n
    \  session.\n   Before delving into the details of such a lease mechanism, it
    is\n   worth clarifying its role within the context of the Consumer\n   interface.
    \ As explained in Section 5.1, the knowledge the MRB has of\n   the resources
    of all the Media Servers it is provisioned to manage is\n   not real-time.  How
    an MRB actually manages such resources is\n   implementation specific -- for example,
    an implementation may choose\n   to have the MRB keeping track and state of the
    allocated resources,\n   or simply rely on the Media Servers themselves to provide
    the\n   information using the Publish interface.  Further information may\n   also
    be inferred by the signaling, in the case where an MRB is in the\n   path of media
    dialogs.\n   The <mediaResourceResponse> element returned from the MRB contains
    a\n   <response-session-info> element if the request is successful.  The\n   <response-session-info>
    element has zero or more of the following\n   child elements, which provide the
    appropriate resource session\n   information:\n   o  <session-id> is a unique
    identifier that enables a Consumer client\n      and MRB to correlate future media
    resource requests related to an\n      initial media resource request.  The <session-id>
    MUST be included\n      in all future related requests (see the <session-id> paragraph\n
    \     later in this section, where constructing a subsequent request is\n      discussed).\n
    \  o  <seq> is a numeric value returned to the Consumer client.  On\n      issuing
    any future requests related to the media resource session\n      (as determined
    by the <session-id> element), the Consumer client\n      MUST increment the value
    returned in the <seq> element and include\n      it in the request (see the <seq>
    paragraph later in this section,\n      where constructing a subsequent request
    is discussed).  Its value\n      is a non-negative integer that MUST be limited
    within the\n      0..2^31-1 range.\n   o  <expires> provides a value indicating
    the number of seconds that\n      the request for media resources is deemed alive.
    \ The Consumer\n      client should issue a refresh of the request, as discussed
    later\n      in this section, if the expiry is due to fire and the media\n      resources
    are still required.\n   o  <media-server-address> provides information representing
    an\n      assigned Media Server.  More instances of this element may appear\n
    \     should the MRB assign more Media Servers to a Consumer request.\n   The
    <mediaResourceRequest> element is used in subsequent Consumer\n   interface requests
    if the client wishes to manipulate the session.\n   The Consumer client MUST include
    the <session-info> element, which\n   enables the receiving MRB to determine an
    existing media resource\n   allocation session.  The <session-info> element has
    the following\n   child elements, which provide the appropriate resource session\n
    \  information to the MRB:\n   o  <session-id> is a unique identifier that allows
    a Consumer client\n      to indicate the appropriate existing media resource session
    to be\n      manipulated by the MRB for this request.  The value was provided\n
    \     by the MRB in the initial request for media resources, as\n      discussed
    earlier in this section (<session-id> element included\n      as part of the <session-info>
    element in the initial\n      <mediaResourceResponse>).\n   o  <seq> is a numeric
    value returned to the Consumer client in the\n      initial request for media
    resources, as discussed earlier in this\n      section (<seq> element included
    as part of the <session-info>\n      element in the initial <mediaResourceResponse>).
    \ On issuing any\n      future requests related to the specific media resource
    session (as\n      determined by the <session-id> element), the Consumer client
    MUST\n      increment the value returned in the <seq> element from the initial\n
    \     response (contained in the <mediaResourceResponse>) for every new\n      request.
    \ The value of the <seq> element in requests acts as a\n      counter and when
    used in conjunction with the unique <session-id>\n      allows for unique identification
    of a request.  As anticipated\n      before, the <seq> value is limited to the
    0..2^31-1 range: in the\n      unlikely case that the counter increases to reach
    the highest\n      allowed value, the <seq> value MUST be set to 0.  The first\n
    \     numeric value for the <seq> element is not meant to be '1' but\n      SHOULD
    be generated randomly by the MRB: this is to reduce the\n      chances of a malicious
    MRB disrupting the session created by this\n      MRB, as explained in Section
    12.\n   o  <action> provides the operation to be carried out by the MRB on\n      receiving
    the request:\n      *  The value of 'update' is a request by the Consumer client
    to\n         update the existing session on the MRB with alternate media\n         resource
    requirements.  If the requested resource information\n         is identical to
    the existing MRB session, the MRB will attempt\n         a session refresh.  If
    the information has changed, the MRB\n         will attempt to update the existing
    session with the new\n         information.  If the operation is successful, the
    200 status\n         code in the response is returned in the status attribute
    of the\n         <mediaResourceResponseType> element.  If the operation is not\n
    \        successful, a 409 status code in the response is returned in\n         the
    status attribute of the <mediaResourceResponseType>\n         element.\n      *
    \ The value of 'remove' is a request by the Consumer client to\n         remove
    the session on the MRB.  This provides a mechanism for\n         Consumer clients
    to release unwanted resources before they\n         expire.  If the operation
    is successful, a 200 status code in\n         the response is returned in the
    status attribute of the\n         <mediaResourceResponseType> element.  If the
    operation is not\n         successful, a 410 status code in the response is returned
    in\n         the status attribute of the <mediaResourceResponseType>\n         element.\n
    \  Omitting the 'action' attribute means requesting a new set of\n   resources.\n
    \  When used with HTTP, the <session-info> element MUST be included in\n   an
    HTTP POST message (as defined in [RFC2616]).  When used with SIP,\n   the <session-info>
    element MUST instead be included in either a SIP\n   INVITE or a SIP re-INVITE
    (as defined in [RFC3261]), or in a SIP\n   UPDATE (as defined in [RFC3311]) request:
    in fact, any SIP dialog, be\n   it a new or an existing one, can be exploited
    to carry leasing\n   information, and as such new SIP INVITE messages can update
    other\n   leases as well as request a new one.\n   With IAMM, the Application
    Server or Media Server will eventually\n   send a SIP BYE to end the SIP session,
    whether it was for a Control\n   Channel or a media dialog.  That BYE contains
    no Consumer interface\n   lease information.\n"
  title: 5.2.3.  Consumer Interface Lease Mechanism
- contents:
  - "5.2.4.  <mrbconsumer>\n   This section defines the XML elements for the Consumer
    interface.\n   The formal XML schema definition for the Consumer interface can
    be\n   found in Section 11.\n   The root element is <mrbconsumer>.  All other
    XML elements (requests,\n   responses) are contained within it.  The MRB Consumer
    interface\n   request element is detailed in Section 5.2.5.1.  The MRB Consumer\n
    \  interface response element is detailed in Section 5.2.6.1.\n   The <mrbconsumer>
    element has the following attributes:\n   version:  a token specifying the mrb-consumer
    package version.  The\n      value is fixed as '1.0' for this version of the package.
    \ The\n      attribute MUST be present.\n   The <mrbconsumer> element may have
    zero or more children of one of\n   the following child element types:\n      <mediaResourceRequest>
    for sending a Consumer request.  See\n      Section 5.2.5.1.\n      <mediaResourceResponse>
    for sending a Consumer response.  See\n      Section 5.2.6.1.\n"
  title: 5.2.4.  <mrbconsumer>
- contents:
  - "5.2.5.  Media Service Resource Request\n   This section provides the element
    definitions for use in Consumer\n   interface requests.  The requests are carried
    in the\n   <mediaResourceRequest> element.\n"
  title: 5.2.5.  Media Service Resource Request
- contents:
  - "5.2.5.1.  <mediaResourceRequest>\n   The <mediaResourceRequest> element provides
    information for clients\n   wishing to query an external MRB entity.  The <mediaResourceRequest>\n
    \  element has a single mandatory attribute, 'id': this attribute\n   contains
    a random identifier, generated by the client, that will be\n   included in the
    response in order to map it to a specific request.\n   The <mediaResourceRequest>
    element has <generalInfo>, <ivrInfo>, and\n   <mixerInfo> as child elements.  These
    three elements are used to\n   describe the requirements of a client requesting
    a Media Server and\n   are covered in Sections 5.2.5.1.1, 5.2.5.1.2, and 5.2.5.1.3,\n
    \  respectively.\n"
  title: 5.2.5.1.  <mediaResourceRequest>
- contents:
  - "5.2.5.1.1.  <generalInfo>\n   The <generalInfo> element provides general Consumer
    request\n   information that is neither IVR specific nor mixer specific.  This\n
    \  includes session information that can be used for subsequent requests\n   as
    part of the leasing mechanism described in Section 5.2.3.  The\n   following sub-sections
    describe the <session-info> and <packages>\n   elements, as used by the <generalInfo>
    element.\n"
  title: 5.2.5.1.1.  <generalInfo>
- contents:
  - "5.2.5.1.1.1.  <session-info>\n   The <session-info> element is included in Consumer
    requests when an\n   update is being made to an existing media resource session.
    \ The\n   ability to change and remove an existing media resource session is\n
    \  described in more detail in Section 5.2.3.  The element MAY be\n   present.\n
    \  The <session-info> element has no attributes.\n   The <session-info> element
    has zero or more of the following child\n   elements:\n   <session-id>:  A unique
    identifier that explicitly references an\n      existing media resource session
    on the MRB.  The identifier is\n      included to update the existing session
    and is described in more\n      detail in Section 5.2.3.\n   <seq>:  Used in association
    with the <session-id> element in a\n      subsequent request to update an existing
    media resource session on\n      an MRB.  The <seq> number is incremented from
    its original value\n      returned in response to the initial request for media
    resources.\n      Its value is a non-negative integer that MUST be limited within\n
    \     the 0..2^31-1 range.  In the unlikely case that the counter\n      increases
    to reach the highest allowed value, the <seq> value MUST\n      be set to 0.  More
    information about its use is provided in\n      Section 5.2.3.\n   <action>:  Provides
    the operation that should be carried out on an\n      existing media resource
    session on an MRB:\n      *  The value of 'update' instructs the MRB to attempt
    to update\n         the existing media resource session with the information\n
    \        contained in the <ivrInfo> and <mixerInfo> elements.\n      *  The value
    of 'remove' instructs the MRB to attempt to remove\n         the existing media
    resource session.  More information on its\n         use is provided in Section
    5.2.3.\n"
  title: 5.2.5.1.1.1.  <session-info>
- contents:
  - "5.2.5.1.1.2.  <packages>\n   The <packages> element provides a list of Media
    Control Channel\n   Framework compliant packages that are required by the Consumer\n
    \  client.  The element MAY be present.\n   The <packages> element has no attributes.\n
    \  The <packages> element has a single child element:\n   <package>:  Contains
    a string representing the Media Control Channel\n      Framework package required
    by the Consumer client.  The <package>\n      element can appear multiple times.
    \ A valid value is a Control\n      Package name compliant with Section 13.1.1
    of [RFC6230].\n"
  title: 5.2.5.1.1.2.  <packages>
- contents:
  - "5.2.5.1.2.  <ivrInfo>\n   The <ivrInfo> element provides information for general
    Consumer\n   request information that is IVR specific.  The following sub-sections\n
    \  describe the elements of the <ivrInfo> element: <ivr-sessions>,\n   <file-formats>,
    <dtmf>, <tones>, <asr-tts>, <vxml>, <location>,\n   <encryption>, <application-data>,
    <max-prepared-duration>, and\n   <file-transfer-modes>.\n"
  title: 5.2.5.1.2.  <ivrInfo>
- contents:
  - "5.2.5.1.2.1.  <ivr-sessions>\n   The <ivr-sessions> element indicates the number
    of IVR sessions that\n   a Consumer client requires from a media resource.  The
    element MAY be\n   present.\n   The <ivr-sessions> element has no attributes.\n
    \  The <ivr-sessions> element has a single child element:\n   <rtp-codec>:  Describes
    a required codec and the number of sessions\n      using that codec.  The <rtp-codec>
    element has one attribute.  The\n      value of the attribute, 'name', is a media
    type (which can include\n      parameters per [RFC6381]).  The <rtp-codec> element
    has two child\n      elements.  The child element <decoding> contains the number
    of RTP\n      sessions required for decoding using the specified codec, and the\n
    \     child element <encoding> contains the number of RTP sessions\n      required
    for encoding using the specified codec.\n"
  title: 5.2.5.1.2.1.  <ivr-sessions>
- contents:
  - "5.2.5.1.2.2.  <file-formats>\n   The <file-formats> element provides a list of
    file formats required\n   for the purpose of playing media.  It should be noted
    that this\n   element describes media types and might better have been named\n
    \  \"media-formats\", but due to existing implementations the name\n   \"file-formats\"
    is being used.  The element MAY be present.\n   The <file-formats> element has
    no attributes.\n   The <file-formats> element has a single child element:\n   <required-format>:
    \ Has a single attribute, 'name', which provides\n      the type of file format
    that is required.  A valid value is a\n      media type that, depending on its
    definition, can include\n      additional parameters (e.g., [RFC6381]).  The <required-format>\n
    \     element then has a further child element, <required-file-package>.\n      The
    <required-file-package> element has a single attribute,\n      'required-file-package-name',
    which contains the name of the Media\n      Control Channel Framework package,
    compliant with Section 13.1.1\n      of [RFC6230], for which the file format support
    applies.\n"
  title: 5.2.5.1.2.2.  <file-formats>
- contents:
  - "5.2.5.1.2.3.  <dtmf>\n   The <dtmf> element specifies the required methods to
    detect DTMF\n   tones and to generate them.  The element MAY be present.\n   The
    <dtmf> element has no attributes.\n   The <dtmf> element has zero or more of the
    following child elements:\n   <detect>:  Indicates the required support for DTMF
    detection.  The\n      <detect> element has no attributes.  The <detect> element
    has a\n      further child element, <dtmf-type>.  The <dtmf-type> element has\n
    \     two attributes: 'name' and 'package'.  The 'name' attribute\n      provides
    the type of DTMF required and is a case-insensitive\n      string containing either
    'RFC4733' [RFC4733] or 'Media' (detecting\n      tones as signals from the audio
    stream).  The 'package' attribute\n      provides the name of the Media Control
    Channel Framework package,\n      compliant with Section 13.1.1 of [RFC6230],
    for which the DTMF\n      type applies.\n   <generate>:  Indicates the required
    support for DTMF generation.  The\n      <generate> element has no attributes.
    \ The <generate> element has\n      a single child element, <dtmf-type>.  The
    <dtmf-type> element has\n      two attributes: 'name' and 'package'.  The 'name'
    attribute\n      provides the type of DTMF required and is a case-insensitive\n
    \     string containing either 'RFC4733' [RFC4733] or 'Media'\n      (generating
    tones as signals in the audio stream).  The 'package'\n      attribute provides
    the name of the Media Control Channel Framework\n      package, compliant with
    Section 13.1.1 of [RFC6230], for which the\n      DTMF type applies.\n   <passthrough>:
    \ Indicates the required support for passing DTMF\n      through without re-encoding.
    \ The <passthrough> element has no\n      attributes.  The <passthrough> element
    then has a further child\n      element, <dtmf-type>.  The <dtmf-type> element
    has two attributes:\n      'name' and 'package'.  The 'name' attribute provides
    the type of\n      DTMF required and is a case-insensitive string containing either\n
    \     'RFC4733' [RFC4733] or 'Media' (passing tones as signals through\n      the
    audio stream).  The 'package' attribute provides the name of\n      the Media
    Control Channel Framework package, compliant with\n      Section 13.1.1 of [RFC6230],
    for which the DTMF type applies.\n"
  title: 5.2.5.1.2.3.  <dtmf>
- contents:
  - "5.2.5.1.2.4.  <tones>\n   The <tones> element provides requested tones that a
    Media Server must\n   support for IVR.  In particular, the request refers to both
    support\n   for country codes (ISO 3166-1 [ISO.3166-1]) and requested\n   functionality
    (ITU-T Recommendation Q.1950 [ITU-T.Q.1950]).  The\n   element MAY be present.\n
    \  The <tones> element has no attributes.\n   The <tones> element has zero or
    more of the following child elements:\n   <country-codes>:  Describes the requested
    country codes in relation\n      to tones.  The <country-codes> element has no
    attributes.  The\n      <country-codes> element has one child element.  The child
    element,\n      <country-code>, requests a specific country code, compliant with\n
    \     the ISO 3166-1 [ISO.3166-1] specification.  The <country-code>\n      element
    has a single attribute, 'package'.  The attribute\n      'package' provides the
    name of the Media Control Channel Framework\n      package, compliant with Section
    13.1.1 of [RFC6230], in which the\n      tones from the specified country code
    are requested.\n   <h248-codes>:  Describes the requested H.248 codes in relation
    to\n      tones.  The <h248-codes> element has no attributes.  The\n      <h248-codes>
    element has one child element.  The child element,\n      <h248-code>, requests
    a specific H.248 code, compliant with the\n      ITU-T Recommendation Q.1950 [ITU-T.Q.1950]
    specification.  The\n      codes can be either specific (e.g., cg/dt to only report
    the Dial\n      Tone from the Call Progress Tones package) or generic (e.g., cg/*\n
    \     to report all the tones from the Call Progress Tones package),\n      using
    wildcards.  The <h248-code> element has a single attribute,\n      'package'.
    \ The attribute 'package' provides the name of the Media\n      Control Channel
    Framework package, compliant with Section 13.1.1\n      of [RFC6230], in which
    the specified codes are requested.\n"
  title: 5.2.5.1.2.4.  <tones>
- contents:
  - "5.2.5.1.2.5.  <asr-tts>\n   The <asr-tts> element requests information about
    the support for\n   Automatic Speech Recognition (ASR) and Text-to-Speech (TTS)\n
    \  functionality in a Media Server.  The functionality is requested by\n   referring
    to the supported languages (using ISO 639-1 [ISO.639.2002]\n   codes) in relation
    to both ASR and TTS.  The <asr-tts> element has no\n   attributes.  The <asr-tts>
    element has zero or more of the following\n   child elements:\n   <asr-support>:
    \ Describes the available languages for ASR.  The\n      <asr-support> element
    has no attributes.  The <asr-support>\n      element has one child element.  The
    child element, <language>,\n      requests that the Media Server supports ASR
    for a specific\n      language.  The <language> element has a single attribute,\n
    \     'xml:lang'.  The attribute 'xml:lang' contains the ISO 639-1\n      [ISO.639.2002]
    code of the supported language.\n   <tts-support>:  Describes the available languages
    for TTS.  The\n      <tts-support> element has no attributes.  The <tts-support>\n
    \     element has one child element.  The child element, <language>,\n      requests
    that the Media Server supports TTS for a specific\n      language.  The <language>
    element has a single attribute,\n      'xml:lang'.  The attribute 'xml:lang' contains
    the ISO 639-1\n      [ISO.639.2002] code of the supported language.\n"
  title: 5.2.5.1.2.5.  <asr-tts>
- contents:
  - "5.2.5.1.2.6.  <vxml>\n   The <vxml> element specifies if the Consumer client
    requires VoiceXML\n   and, if so, which protocols are supported (e.g., via the
    control\n   framework, RFC 4240 [RFC4240], or RFC 5552 [RFC5552]).  The element\n
    \  MAY be present.\n   The <vxml> element has a single child element:\n   <vxml-mode>:
    \ Has two attributes: 'package' and 'require'.  The\n      'package' attribute
    provides the name of the Media Control Channel\n      Framework package, compliant
    with Section 13.1.1 of [RFC6230], for\n      which the VXML support applies.  The
    'require' attribute specifies\n      the type of VXML support required by the
    Consumer client (e.g.,\n      RFC 5552 [RFC5552], RFC 4240 [RFC4240], or IVR Package
    [RFC6231]),\n      and valid values are case-insensitive RFC references (e.g.,\n
    \     \"rfc6231\" to specify that the client requests support for VoiceXML\n      as
    provided by the IVR Package [RFC6231]).\n   The presence of at least one <vxml>
    child element would indicate that\n   the Consumer client requires VXML support
    as specified by the child\n   element itself.  An empty <vxml> element would otherwise
    indicate\n   that the Consumer client does not require VXML support.\n"
  title: 5.2.5.1.2.6.  <vxml>
- contents:
  - "5.2.5.1.2.7.  <location>\n   The <location> element requests a civic location
    for an IVR Media\n   Server.  The request makes use of the Civic Address Schema\n
    \  standardized in RFC 5139 [RFC5139].  The element MAY be present.\n   More precisely,
    this section is entirely optional and is\n   implementation specific in its level
    of population.\n   The <location> element has no attributes.\n   The <location>
    element has a single child element:\n   <civicAddress>:  Describes the civic address
    location of the\n      requested Media Server, whose representation refers to
    Section 4\n      of RFC 5139 [RFC5139].\n"
  title: 5.2.5.1.2.7.  <location>
- contents:
  - "5.2.5.1.2.8.  <encryption>\n   The <encryption> element allows a Consumer client
    to request support\n   for encrypting RTP media streams using RFC 3711 [RFC3711].
    \ The\n   element MAY be present.  If the element is present, then the Media\n
    \  Server supports DTLS-SRTP [RFC5763].\n   The <encryption> element has no attributes.\n
    \  The <encryption> element has no child elements.\n"
  title: 5.2.5.1.2.8.  <encryption>
- contents:
  - "5.2.5.1.2.9.  <application-data>\n   The <application-data> element provides
    an arbitrary string of\n   characters as IVR application-level data.  This data
    is meant to only\n   have meaning at the application-level logic and as such is
    not\n   otherwise restricted by this specification.  The set of allowed\n   characters
    is the same as those in XML (viz., tab, carriage return,\n   line feed, and the
    legal characters of Unicode and ISO/IEC 10646\n   [ISO.10646.2012] (see also Section
    2.2 of\n   <http://www.w3.org/TR/xml/>)).  The element MAY be present.\n   The
    <application-data> element has no attributes.\n   The <application-data> element
    has no child elements.\n"
  title: 5.2.5.1.2.9.  <application-data>
- contents:
  - "5.2.5.1.2.10.  <max-prepared-duration>\n   The <max-prepared-duration> element
    indicates the amount of time\n   required by the Consumer client representing
    media dialog preparation\n   in the system before it is executed.  The element
    MAY be present.\n   The <max-prepared-duration> element has no attributes.\n   The
    <max-prepared-duration> element has a single child element:\n   <max-time>:  Has
    a single attribute, 'max-time-seconds', which\n      provides the amount of time
    in seconds that a media dialog can be\n      in the prepared state.  The <max-time>
    element then has a further\n      child element, <max-time-package>.  The <max-time-package>
    element\n      provides the name of the Media Control Channel Framework package,\n
    \     compliant with Section 13.1.1 of [RFC6230], for which the time\n      period
    applies.\n"
  title: 5.2.5.1.2.10.  <max-prepared-duration>
- contents:
  - "5.2.5.1.2.11.  <file-transfer-modes>\n   The <file-transfer-modes> element allows
    the Consumer client to\n   specify which scheme names are required for file transfer
    to a Media\n   Server for each Media Control Channel Framework package type.  For\n
    \  example, does the Media Server support fetching media resources via\n   HTTP,
    HTTPS, NFS, etc.?  The element MAY be present.\n   The <file-transfer-modes> element
    has no attributes.\n   The <file-transfer-modes> element has a single child element:\n
    \  <file-transfer-mode>:  Has two attributes: 'name' and 'package'.  The\n      'name'
    attribute provides the scheme name of the protocol required\n      for fetching
    resources: valid values are case-insensitive scheme\n      names (e.g., HTTP,
    HTTPS, NFS, etc.).  The 'package' attribute\n      provides the name of the Media
    Control Channel Framework package,\n      compliant with Section 13.1.1 of [RFC6230],
    for which the scheme\n      name applies.\n   The same considerations relating
    to file transfer and live streaming\n   are explained further in Section 5.1.5.15
    and apply here as well.\n"
  title: 5.2.5.1.2.11.  <file-transfer-modes>
- contents:
  - "5.2.5.1.3.  <mixerInfo>\n   The <mixerInfo> element provides information for
    general Consumer\n   request information that is mixer specific.  The following\n
    \  sub-sections describe the elements of the <mixerInfo> element:\n   <mixers>,
    <file-formats>, <dtmf>, <tones>, <mixing-modes>,\n   <application-data>, <location>,
    and <encryption>.\n"
  title: 5.2.5.1.3.  <mixerInfo>
- contents:
  - "5.2.5.1.3.1.  <mixers>\n   The <mixers> element provides information detailing
    the required\n   mixed RTP sessions.  The element MAY be present.\n   The <mixers>
    element has no attributes.\n   The <mixers> element has a single child element:\n
    \  <mix>:  Describes the required mixed RTP sessions.  The <mix> element\n      has
    one attribute.  The value of the attribute, 'users', is the\n      number of participants
    required in the mix.  The <mix> element has\n      one child element.  The child
    element, <rtp-codec>, contains the\n      same information relating to RTP sessions
    as that defined in\n      Section 5.1.5.3.  The element MAY be present.\n"
  title: 5.2.5.1.3.1.  <mixers>
- contents:
  - "5.2.5.1.3.2.  <file-formats>\n   The <file-formats> element provides a list of
    file formats required\n   by the Consumer client for the purpose of playing media
    to a mix.\n   The element MAY be present.\n   The <file-formats> element has no
    attributes.\n   The <file-formats> element has a single child element:\n   <required-format>:
    \ Has a single attribute, 'name', which provides\n      the type of file format
    supported.  A valid value is a media type\n      that, depending on its definition,
    can include additional\n      parameters (e.g., [RFC6381]).  The <required-format>
    element has a\n      child element, <required-file-package>.  The\n      <required-file-package>
    element contains a single attribute,\n      'required-file-package-name', which
    contains the name of the Media\n      Control Channel Framework package, compliant
    with Section 13.1.1\n      of [RFC6230], for which the file format support applies.\n"
  title: 5.2.5.1.3.2.  <file-formats>
- contents:
  - "5.2.5.1.3.3.  <dtmf>\n   The <dtmf> element specifies the required methods to
    detect DTMF\n   tones and to generate them in a mix.  The element MAY be present.\n
    \  The <dtmf> element has no attributes.\n   The <dtmf> element has zero or more
    of the following child elements:\n   <detect>:  Indicates the required support
    for DTMF detection.  The\n      <detect> element has no attributes.  The <detect>
    element then has\n      a further child element, <dtmf-type>.  The <dtmf-type>
    element has\n      two attributes: 'name' and 'package'.  The 'name' attribute\n
    \     provides the type of DTMF being used and is a case-insensitive\n      string
    containing either 'RFC4733' [RFC4733] or 'Media' (detecting\n      tones as signals
    from the audio stream).  The 'package' attribute\n      provides the name of the
    Media Control Channel Framework package,\n      compliant with Section 13.1.1
    of [RFC6230], for which the DTMF\n      type applies.\n   <generate>:  Indicates
    the required support for DTMF generation.  The\n      <generate> element has no
    attributes.  The <generate> element has\n      a single child element, <dtmf-type>.
    \ The <dtmf-type> element has\n      two attributes: 'name' and 'package'.  The
    'name' attribute\n      provides the type of DTMF being used and is a case-insensitive\n
    \     string containing either 'RFC4733' [RFC4733] or 'Media'\n      (generating
    tones as signals in the audio stream).  The 'package'\n      attribute provides
    the name of the Media Control Channel Framework\n      package, compliant with
    Section 13.1.1 of [RFC6230], for which the\n      DTMF type applies.\n   <passthrough>:
    \ Indicates the required support for passing DTMF\n      through without re-encoding.
    \ The <passthrough> element has no\n      attributes.  The <passthrough> element
    has a single child element,\n      <dtmf-type>.  The <dtmf-type> element has two
    attributes: 'name'\n      and 'package'.  The 'name' attribute provides the type
    of DTMF\n      being used and is a case-insensitive string containing either\n
    \     'RFC4733' [RFC4733] or 'Media' (passing tones as signals through\n      the
    audio stream).  The 'package' attribute provides the name of\n      the Media
    Control Channel Framework package, compliant with\n      Section 13.1.1 of [RFC6230],
    for which the DTMF type applies.\n"
  title: 5.2.5.1.3.3.  <dtmf>
- contents:
  - "5.2.5.1.3.4.  <tones>\n   The <tones> element provides requested tones that a
    Media Server must\n   support for a mix.  In particular, the request refers to
    both support\n   for country codes (ISO 3166-1 [ISO.3166-1]) and requested\n   functionality
    (ITU-T Recommendation Q.1950 [ITU-T.Q.1950]).  The\n   element MAY be present.\n
    \  The <tones> element has no attributes.\n   The <tones> element has zero or
    more of the following child elements:\n   <country-codes>:  Describes the requested
    country codes in relation\n      to tones.  The <country-codes> element has no
    attributes.  The\n      <country-codes> element has a single child element.  The
    child\n      element, <country-code>, requests a specific country code,\n      compliant
    with the ISO 3166-1 [ISO.3166-1] specification.  The\n      <country-code> element
    has a single attribute, 'package'.  The\n      attribute 'package' provides the
    name of the Media Control Channel\n      Framework package, compliant with the
    specification in the related\n      IANA registry (e.g., \"msc-ivr/1.0\"), in
    which the tones from the\n      specified country code are requested.\n   <h248-codes>:
    \ Describes the requested H.248 codes with respect to\n      tones.  The <h248-codes>
    element has no attributes.  The\n      <h248-codes> element has a single child
    element.  The child\n      element, <h248-code>, requests a specific H.248 code,
    compliant\n      with the ITU-T Recommendation Q.1950 [ITU-T.Q.1950] specification.\n
    \     The codes can be either specific (e.g., cg/dt to only report the\n      Dial
    Tone from the Call Progress Tones package) or generic (e.g.,\n      cg/* to report
    all the tones from the Call Progress Tones\n      package), using wildcards.  The
    <h248-code> element has a single\n      attribute, 'package'.  The attribute 'package'
    provides the name\n      of the Media Control Channel Framework package, compliant
    with\n      Section 13.1.1 of [RFC6230], in which the specified codes are\n      requested.\n"
  title: 5.2.5.1.3.4.  <tones>
- contents:
  - "5.2.5.1.3.5.  <mixing-modes>\n   The <mixing-modes> element requests information
    relating to support\n   for audio and video mixing, more specifically a list of
    supported\n   algorithms to mix audio and a list of supported video presentation\n
    \  layouts.  The element MAY be present.\n   The <mixing-modes> element has no
    attributes.\n   The <mixing-modes> element has zero or more of the following child\n
    \  elements:\n   <audio-mixing-modes>:  Describes the requested algorithms for
    audio\n      mixing.  The <audio-mixing-modes> element has no attributes.  The\n
    \     <audio-mixing-modes> element has one child element.  The child\n      element,
    <audio-mixing-mode>, contains a requested mixing\n      algorithm.  Valid values
    for the <audio-mixing-mode> element are\n      algorithm names, e.g., 'nbest'
    and 'controller' as defined in\n      [RFC6505].  The element has a single attribute,
    'package'.  The\n      attribute 'package' provides the name of the Media Control
    Channel\n      Framework package, compliant with Section 13.1.1 of [RFC6230],
    for\n      which the algorithm support is requested.\n   <video-mixing-modes>:
    \ Describes the requested video presentation\n      layouts for video mixing.
    \ The <video-mixing-modes> element has\n      two attributes: 'vas' and 'activespeakermix'.
    \ The 'vas' attribute\n      is of type boolean with a value of 'true' indicating
    that the\n      Consumer client requires automatic Voice Activated Switching.
    \ The\n      'activespeakermix' attribute is of type boolean with a value of\n
    \     'true' indicating that the Consumer client requires an additional\n      video
    stream for the loudest speaker participant without its\n      contribution.  The
    <video-mixing-modes> element has one child\n      element.  The child element,
    <video-mixing-mode>, contains the\n      name of a specific video presentation
    layout.  The name may refer\n      to one of the predefined video layouts defined
    in the XCON\n      conference information data model, or to non-XCON layouts as
    well,\n      as long as they are appropriately prefixed.  The\n      <video-mixing-mode>
    element has a single attribute, 'package'.\n      The attribute 'package' provides
    the name of the Media Control\n      Channel Framework package, compliant with
    Section 13.1.1 of\n      [RFC6230], for which the algorithm support is requested.\n"
  title: 5.2.5.1.3.5.  <mixing-modes>
- contents:
  - "5.2.5.1.3.6.  <application-data>\n   The <application-data> element provides
    an arbitrary string of\n   characters as mixer application-level data.  This data
    is meant to\n   only have meaning at the application-level logic and as such is
    not\n   otherwise restricted by this specification.  The set of allowed\n   characters
    is the same as those in XML (viz., tab, carriage return,\n   line feed, and the
    legal characters of Unicode and ISO/IEC 10646\n   [ISO.10646.2012] (see also Section
    2.2 of\n   <http://www.w3.org/TR/xml/>)).  The element MAY be present.\n   The
    <application-data> element has no attributes.\n   The <application-data> element
    has no child elements.\n"
  title: 5.2.5.1.3.6.  <application-data>
- contents:
  - "5.2.5.1.3.7.  <location>\n   The <location> element requests a civic location
    for a mixer Media\n   Server.  The request makes use of the Civic Address Schema\n
    \  standardized in RFC 5139 [RFC5139].  The element MAY be present.\n   More precisely,
    this section is entirely optional, and it's\n   implementation specific to fill
    it with just the details each\n   implementer deems necessary for any optimization
    that may be needed.\n   The <location> element has no attributes.\n   The <location>
    element has a single child element:\n   <civicAddress>:  Describes the civic address
    location of the\n      requested Media Server, whose representation refers to
    Section 4\n      of RFC 5139 [RFC5139].\n"
  title: 5.2.5.1.3.7.  <location>
- contents:
  - "5.2.5.1.3.8.  <encryption>\n   The <encryption> element allows a Consumer client
    to request support\n   for encrypting mixed RTP media streams using RFC 3711 [RFC3711].
    \ The\n   element MAY be present.  If the element is present, then the Media\n
    \  Server supports DTLS-SRTP [RFC5763].\n   The <encryption> element has no attributes.\n
    \  The <encryption> element has no child elements.\n"
  title: 5.2.5.1.3.8.  <encryption>
- contents:
  - "5.2.6.  Media Service Resource Response\n   This section provides the element
    definitions for use in Consumer\n   interface responses.  The responses are carried
    in the\n   <mediaResourceResponse> element.\n"
  title: 5.2.6.  Media Service Resource Response
- contents:
  - "5.2.6.1.  <mediaResourceResponse>\n   The <mediaResourceResponse> element provides
    information for clients\n   receiving response information from an external MRB
    entity.\n   The <mediaResourceResponse> element has two mandatory attributes:\n
    \  'id' and 'status'.  The 'id' attribute must contain the same value\n   that
    the client provided in the 'id' attribute in the\n   <mediaResourceRequest> to
    which the response is mapped.  The 'status'\n   attribute indicates the status
    code of the operation.  The following\n   status codes are defined for 'status':\n
    \  +-----------+-------------------------------------------------------+\n   |
    code      | description                                           |\n   +-----------+-------------------------------------------------------+\n
    \  | 200       | OK                                                    |\n   |
    \          |                                                       |\n   | 400
    \      | Syntax error                                          |\n   |           |
    \                                                      |\n   | 405       | Wrong
    sequence number                                 |\n   |           |                                                       |\n
    \  | 408       | Unable to find Resource                               |\n   |
    \          |                                                       |\n   | 409
    \      | Unable to update Resource                             |\n   |           |
    \                                                      |\n   | 410       | Unable
    to remove Resource                             |\n   |           |                                                       |\n
    \  | 420       | Unsupported attribute or element                      |\n   +-----------+-------------------------------------------------------+\n
    \              Table 2: <mediaResourceResponse> Status Codes\n   If a new media
    resource request made by a client application has been\n   accepted, the MRB MUST
    reply with a <mediaResourceResponse> with\n   status code 200.  The same rule
    applies whenever a request to update\n   (action='update') or remove (action='remove')
    an existing transaction\n   can be fulfilled by the MRB.\n   A media resource
    request, nevertheless, may fail for several reasons.\n   In such a case, the status
    codes defined in Table 2 must be used\n   instead.  Specifically, if the MRB fails
    to handle a request due to a\n   syntax error in the request itself (e.g., incorrect
    XML, violation of\n   the schema constraints, or invalid values in any of the
    attributes/\n   elements), the MRB MUST reply with a <mediaResourceResponse> with\n
    \  status code 400.  If a syntactically correct request fails because\n   the
    request also includes any attribute/element the MRB doesn't\n   understand, the
    MRB MUST reply with a <mediaResourceResponse> with\n   status code 420.  If a
    syntactically correct request fails because it\n   contains a wrong sequence number,
    that is, a 'seq' value not\n   consistent with the increment the MRB expects according
    to\n   Section 5.2.3, the MRB MUST reply with a <mediaResourceResponse> with\n
    \  status code 405.  If a syntactically correct request fails because\n   the
    MRB couldn't find any Media Server able to fulfill the\n   requirements presented
    by the Application Server in its request, the\n   MRB MUST reply with a <mediaResourceResponse>
    with status code 408.\n   If a syntactically correct request fails because the
    MRB couldn't\n   update an existing request according to the new requirements\n
    \  presented by the Application Server in its request, the MRB MUST\n   reply
    with a <mediaResourceResponse> with status code 409.  If a\n   syntactically correct
    request fails because the MRB couldn't remove\n   an existing request and release
    the related resources as requested by\n   the Application Server, the MRB MUST
    reply with a\n   <mediaResourceResponse> with status code 410.\n   Further details
    on status codes 409 and 410 are included in\n   Section 5.2.3, where the leasing
    mechanism, along with its related\n   scenarios, is described in more detail.\n
    \  The <mediaResourceResponse> element has <response-session-info> as a\n   child
    element.  This element is used to describe the response of a\n   Consumer interface
    query and is covered in the following sub-section.\n"
  title: 5.2.6.1.  <mediaResourceResponse>
- contents:
  - "5.2.6.1.1.  <response-session-info>\n   The <response-session-info> element is
    included in Consumer\n   responses.  This applies to responses to both requests
    for new\n   resources and requests to update an existing media resource session.\n
    \  The ability to change and remove an existing media resource session\n   is
    described in more detail in Section 5.2.3.  If the request was\n   successful,
    the <mediaResourceResponse> MUST have one\n   <response-session-info> child, which
    describes the media resource\n   session addressed by the request.  If the request
    was not successful,\n   the <mediaResourceResponse> MUST NOT have a <response-session-info>\n
    \  child.\n   The <response-session-info> element has no attributes.\n   The <response-session-info>
    element has zero or more of the following\n   child elements:\n   <session-id>:
    \ A unique identifier that explicitly references an\n      existing media resource
    session on the MRB.  The identifier is\n      included to update the existing
    session and is described in more\n      detail in Section 5.2.3.\n   <seq>:  Used
    in association with the <session-id> element in a\n      subsequent request to
    update an existing media resource session on\n      an MRB.  The <seq> number
    is incremented from its original value\n      returned in response to the initial
    request for media resources.\n      More information on its use is provided in
    Section 5.2.3.\n   <expires>:  Includes the number of seconds that the media resources\n
    \     are reserved as part of this interaction.  If the lease is not\n      refreshed
    before expiry, the MRB will reclaim the resources and\n      they will no longer
    be guaranteed.  It is RECOMMENDED that a\n      minimum value of 300 seconds be
    used for the value of the\n      'expires' attribute.  It is also RECOMMENDED
    that a Consumer\n      client refresh the lease at an interval that is not too
    close to\n      the expiry time.  A value of 80% of the timeout period could be\n
    \     used.  For example, if the timeout period is 300 seconds, the\n      Consumer
    client would refresh the transaction at 240 seconds.\n      More information on
    its use is provided in Section 5.2.3.\n   <media-server-address>:  Provides information
    to reach the Media\n      Server handling the requested media resource.  One or
    more\n      instances of these elements may appear.  The\n      <media-server-address>
    element has a single attribute named 'uri',\n      which supplies a SIP URI that
    reaches the specified Media Server.\n      It also has three optional elements:
    <connection-id>,\n      <ivr-sessions>, and <mixers>.  The <ivr-sessions> and
    <mixers>\n      elements are defined in Sections 5.2.5.1.2.1 and 5.2.5.1.3.1,\n
    \     respectively, and have the same meaning but are applied to\n      individual
    Media Server instances as a subset of the overall\n      resources reported in
    the <connection-id> element.  If multiple\n      Media Servers are assigned in
    an IAMM operation, exactly one\n      <media-server-address> element, more specifically
    the Media Server\n      that provided the media dialog or CFW response, will have
    a\n      <connection-id> element.  Additional information relating to the\n      use
    of the <connection-id> element for media dialogs is included\n      in Section
    6.\n"
  title: 5.2.6.1.1.  <response-session-info>
- contents:
  - "5.3.  In-Line Unaware MRB Interface\n   An entity acting as an In-line MRB can
    act in one of two roles for a\n   request, as introduced in Section 4.2: the In-line
    Unaware MRB Mode\n   (IUMM) of operation and the In-line Aware MRB Mode (IAMM)
    of\n   operation.  This section further describes IUMM.\n   It should be noted
    that the introduction of an MRB entity into the\n   network, as specified in this
    document, requires interfaces to be\n   implemented by those requesting Media
    Server resources (for example,\n   an Application Server).  This applies when
    using the Consumer\n   interface as discussed in Sections 5.2.1 (Query mode) and
    5.2.2\n   (IAMM).  An MRB entity can also act in a client-unaware mode when\n
    \  deployed into the network.  This allows any SIP-compliant client\n   entity,
    as defined by RFC 3261 [RFC3261] and its extensions, to send\n   requests to an
    MRB that in turn will select an appropriate Media\n   Server based on knowledge
    of Media Server resources it currently has\n   available transparently to the
    client entity.  Using an MRB in this\n   mode allows for easy migration of current
    applications and services\n   that are unaware of the MRB concept and would simply
    require a\n   configuration change resulting in the MRB being set as a SIP outbound\n
    \  proxy for clients requiring media services.\n   With IUMM, the MRB may conclude
    that an assigned media resource is no\n   longer needed when it receives a SIP
    BYE from the Application Server\n   or Media Server that ends the SIP dialog that
    initiated the request.\n   As with IAMM, in IUMM the SIP INVITE from the Application
    Server\n   could convey the application/sdp payload to either set up a media\n
    \  dialog or a Control Framework Control Channel.  In either case, in\n   order
    to permit the Application Server to associate a media dialog\n   with a Control
    Channel to the same Media Server, using the procedures\n   of [RFC6230] Section
    6, the MRB should be acting as a SIP proxy (and\n   not a B2BUA).  This allows
    the SIP URI of the targeted Media Server\n   to be transparently passed back to
    the Application Server in the SIP\n   response, resulting in a direct SIP dialog
    between the Application\n   Server and the Media Server.\n   While IUMM has the
    least impact on legacy Application Servers, it\n   also provides the least versatility.
    \ See Section 8.\n"
  title: 5.3.  In-Line Unaware MRB Interface
- contents:
  - "6.  MRB Acting as a B2BUA\n   An MRB entity can act as a SIP Back-to-Back User
    Agent (B2BUA) or a\n   SIP Proxy Server as defined in RFC 3261 [RFC3261].  When
    an MRB acts\n   as a B2BUA, issues can arise when using Media Control Channel\n
    \  packages such as the IVR [RFC6231] and mixer [RFC6505] packages.\n   Specifically,
    the framework attribute 'connectionid' as provided in\n   Appendix A (\"Common
    Package Components\") of [RFC6230] uses a\n   concatenation of the SIP dialog
    identifiers to be used for\n   referencing SIP dialogs within the Media Control
    Channel.  When a\n   request traverses an MRB acting as a B2BUA, the SIP dialog\n
    \  identifiers change, and so the 'connectionid' cannot be used as\n   intended
    due to this change.  For this reason, when an MRB wishes to\n   act as a SIP B2BUA
    when handling a request from an Application Server\n   to set up a media dialog
    to a Media Server, it MUST include the\n   optional <connection-id> element in
    a Consumer interface response\n   with a value that provides the equivalent for
    the 'connectionid'\n   ('Local Dialog Tag' + 'Remote Dialog Tag') for the far
    side of the\n   B2BUA.  If present, this value MUST be used as the value for the\n
    \  'connectionid' in packages where the Common Package Components are\n   used.
    \ The <connection-id> element MUST NOT be included in an HTTP\n   Consumer interface
    response.\n   It is important to point out that although more Media Server\n   instances
    may be returned in a Consumer response (i.e., the MRB has\n   assigned more than
    one Media Server to a Consumer request to fulfill\n   the Application Server requirements),
    in IAMM the MRB will only act\n   as a B2BUA with a single Media Server.  In this
    case, exactly one\n   <media-server-address> element, describing the media dialog
    or CFW\n   response, will have a <connection-id> element that will not be\n   included
    in any additional <media-server-address> elements.\n"
  title: 6.  MRB Acting as a B2BUA
- contents:
  - "7.  Multimodal MRB Implementations\n   An MRB implementation may operate multimodally
    with a collection of\n   Application Server clients all sharing the same pool
    of media\n   resources.  That is, an MRB may be simultaneously operating in Query\n
    \  mode, IAMM, and IUMM.  It knows in which mode to act on any\n   particular
    request from a client, depending on the context of the\n   request:\n   o  If
    the received request is an HTTP POST message with application/\n      mrb-consumer+xml
    content, then the MRB processes it in Query mode.\n   o  If the received request
    is a SIP INVITE with application/\n      mrb-consumer+xml content and application/sdp
    content, then the MRB\n      processes it in IAMM.\n   o  If the received request
    is a SIP INVITE without application/\n      mrb-consumer+xml content but with
    application/sdp content, then\n      the MRB processes it in IUMM.\n"
  title: 7.  Multimodal MRB Implementations
- contents:
  - "8.  Relative Merits of Query Mode, IAMM, and IUMM\n   At a high level, the possible
    Application Server MRB interactions can\n   be distinguished by the following
    basic types:\n   a.  Query mode - the client is requesting the assignment by the
    MRB\n       of suitable Media Server resources;\n   b.  IAMM/media dialog - the
    client is requesting the assignment by\n       the MRB of suitable Media Server
    resources and the establishment\n       of a media dialog to one of the Media
    Servers;\n   c.  IAMM/Control Channel - the client is requesting the assignment
    by\n       the MRB of suitable Media Server resources and the establishment\n
    \      of a CFW Control Channel to one of the Media Servers;\n   d.  IUMM/media
    dialog - the client is requesting the establishment of\n       a media dialog
    to a Media Server resource;\n   e.  IUMM/Control Channel - the client is requesting
    the establishment\n       of a CFW Control Channel to a Media Server resource.\n
    \  Each type of interaction has advantages and disadvantages, where such\n   considerations
    relate to the versatility of what the MRB can provide,\n   technical aspects such
    as efficiency in different application\n   scenarios, complexity, delay, use with
    legacy Application Servers, or\n   use with the Media Control Channel Framework.
    \ Depending on the\n   characteristics of a particular setting that an MRB is
    intended to\n   support, some of the above interaction types may be more appropriate\n
    \  than others.  This section provides a few observations on relative\n   merits
    but is not intended to be exhaustive.  Some constraints of a\n   given interaction
    type may be subtle.\n   o  Operation with other types of media control: Any of
    the types of\n      interactions work with the mechanisms described in RFC 4240\n
    \     [RFC4240] and RFC 5552 [RFC5552] where initial control\n      instructions
    are conveyed in the SIP INVITE from the Application\n      Server for the media
    dialog to the Media Server and subsequent\n      instructions may be fetched using
    HTTP.  Query mode (a), IAMM/\n      media dialog (b), and IUMM/media dialog (d)
    work with the Media\n      Server Markup Language (MSML) as per RFC 5707 [RFC5707]
    or the\n      Media Server Control Markup Language (MSCML) as per RFC 5022\n      [RFC5022].\n
    \  o  As stated previously, IUMM has no interface impacts on an\n      Application
    Server.  When using IUMM, the Application Server does\n      not specify the characteristics
    of the type of media resource it\n      requires, as the <mediaResourceRequest>
    element is not passed to\n      the MRB.  For IUMM/media dialog (d), the MRB can
    deduce an\n      appropriate media resource on a best-effort basis using\n      information
    gleaned from examining information in the SIP INVITE.\n      This includes the
    SDP information for the media dialog, or initial\n      control information in
    the SIP Request-URI as per RFC 4240\n      [RFC4240].  With IUMM/Control Channel
    (e), there is even less\n      information for the MRB to use.\n   o  If using
    IUMM/Control Channel (e), the subsequent sending of the\n      media dialog to
    the Media Server should not be done using IUMM/\n      media dialog.  That is,
    the SIP signaling to send the media dialog\n      to the selected Media Server
    must be directly between the\n      Application Server and that Media Server,
    and not through the MRB.\n      Unless resources can be confidentially identified,
    the MRB could\n      send the media dialog to a different Media Server.  Likewise,
    if\n      using IUMM/media dialog (d), the subsequent establishment of a\n      Control
    Channel should not be done with IUMM/Control Channel (e)\n      unless definitive
    information is available.\n   o  Query mode (a) and IAMM/Control Channel (c) lend
    themselves to\n      requesting a pool of media resources (e.g., a number of IVR
    or\n      conferencing ports) in advance of use and retaining use over a\n      period
    of time, independent of whether there are media dialogs to\n      those resources
    at any given moment, whereas the other types of\n      interactions do not.  This
    also applies to making a subsequent\n      request to increase or decrease the
    amount of resources previously\n      awarded.\n   o  While Query mode (a) and
    IAMM/Control Channel (c) are the most\n      versatile interaction types, the
    former is completely decoupled\n      from the use or non-use of a Control Channel,
    whereas the latter\n      requires the use of a Control Channel.\n   o  When Media
    Control Channel Framework Control Channels are to be\n      used in conjunction
    with the use of an MRB, Query mode (a) would\n      typically result in fewer
    such channels being established over\n      time, as compared to IAMM/Control
    Channel (c).  That is because\n      the latter would involve setting up an additional
    Control Channel\n      every time an Application Server has a new request for
    an MRB for\n      media resources.\n"
  title: 8.  Relative Merits of Query Mode, IAMM, and IUMM
- contents:
  - "9.  Examples\n   This section provides examples of both the Publish and Consumer\n
    \  interfaces.  Both the Query mode and In-line mode are addressed.\n   Note that
    due to RFC formatting conventions, this section often\n   splits HTTP, SIP/SDP,
    and CFW across lines whose content would exceed\n   72 characters.  A backslash
    character marks where this line folding\n   has taken place.  This backslash,
    and its trailing CRLF and\n   whitespace, would not appear in the actual protocol
    contents.  Also\n   note that the indentation of the XML content is only provided
    for\n   readability: actual messages will follow strict XML syntax, which\n   allows
    for but does not require indentation.\n"
  title: 9.  Examples
- contents:
  - "9.1.  Publish Example\n   The following example assumes that a Control Channel
    has been\n   established and synced as described in the Media Control Channel\n
    \  Framework ([RFC6230]).\n   Figure 9 shows the subscription/notification mechanism
    the Publish\n   interface is based on, as defined in Section 5.1.  The MRB subscribes\n
    \  for information at the Media Server (message A1.), and the Media\n   Server
    accepts the subscription (A2.).  Notifications are triggered\n   by the Media
    Server (B1.) and acknowledged by the MRB (B2.).\n         MRB                                            MS\n
    \         |                                              |\n          | A1. CONTROL
    (MRB subscription)               |\n          |--------------------------------------------->|\n
    \         |                                   A2. 200 OK |\n          |<---------------------------------------------|\n
    \         |                                              |\n          .                                              .\n
    \         .                                              .\n          |                                              |\n
    \         |                                              |--+ collect\n          |
    \                                             |  | up-to-date\n          |                                              |<-+
    info\n          |               B1. CONTROL (MRB notification) |\n          |<---------------------------------------------|\n
    \         | B2. 200 OK                                   |\n          |--------------------------------------------->|\n
    \         |                                              |\n          .                                              .\n
    \         .                                              .\n                Figure
    9: Publish Example: Sequence Diagram\n   The rest of this section includes a full
    dump of the messages\n   associated with the previous sequence diagram, specifically:\n
    \  1.  the subscription (A1.), in an <mrbrequest> (CFW CONTROL);\n   2.  the Media
    Server accepting the subscription (A2.), in an\n       <mrbresponse> (CFW 200);\n
    \  3.  a notification (B1.), in an <mrbnotification> (CFW CONTROL);\n   4.  the
    ack to the notification (B2.), in a framework-level 200\n       message (CFW 200).\n"
  - 'A1. MRB -> MS (CONTROL, publish request)

    '
  - '----------------------------------------

    '
  - 'CFW lidc30BZObiC CONTROL

    '
  - 'Control-Package: mrb-publish/1.0

    '
  - 'Content-Type: application/mrb-publish+xml

    '
  - 'Content-Length: 337

    '
  - '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

    '
  - "<mrbpublish version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:mrb-publish\">\n    <mrbrequest>\n
    \       <subscription action=\"create\" seqnumber=\"1\" id=\"p0T65U\">\n            <expires>600</expires>\n
    \           <minfrequency>20</minfrequency>\n            <maxfrequency>20</maxfrequency>\n
    \       </subscription>\n    </mrbrequest>\n"
  - '</mrbpublish>

    '
  - 'A2. MRB <- MS (200 to CONTROL, request accepted)

    '
  - '------------------------------------------------

    '
  - 'CFW lidc30BZObiC 200

    '
  - 'Timeout: 10

    '
  - 'Content-Type: application/mrb-publish+xml

    '
  - 'Content-Length: 139

    '
  - "<mrbpublish version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:mrb-publish\">\n        <mrbresponse
    status=\"200\" reason=\"OK: Request accepted\"/>\n"
  - '</mrbpublish>

    '
  - 'B1. MRB <- MS (CONTROL, event notification from MS)

    '
  - '---------------------------------------------------

    '
  - 'CFW 03fff52e7b7a CONTROL

    '
  - 'Control-Package: mrb-publish/1.0

    '
  - 'Content-Type: application/mrb-publish+xml

    '
  - 'Content-Length: 4226

    '
  - "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n   <mrbpublish
    version=\"1.0\"\n             xmlns=\"urn:ietf:params:xml:ns:mrb-publish\">\n
    \   <mrbnotification seqnumber=\"1\" id=\"QQ6J3c\">\n        <media-server-id>a1b2c3d4</media-server-id>\n
    \       <supported-packages>\n            <package name=\"msc-ivr/1.0\"/>\n            <package
    name=\"msc-mixer/1.0\"/>\n            <package name=\"mrb-publish/1.0\"/>\n            <package
    name=\"msc-example-pkg/1.0\"/>\n        </supported-packages>\n        <active-rtp-sessions>\n
    \           <rtp-codec name=\"audio/basic\">\n                <decoding>10</decoding>\n
    \               <encoding>20</encoding>\n            </rtp-codec>\n        </active-rtp-sessions>\n
    \       <active-mixer-sessions>\n            <active-mix conferenceid=\"7cfgs43\">\n
    \               <rtp-codec name=\"audio/basic\">\n                    <decoding>3</decoding>\n
    \                   <encoding>3</encoding>\n                </rtp-codec>\n            </active-mix>\n
    \       </active-mixer-sessions>\n        <non-active-rtp-sessions>\n            <rtp-codec
    name=\"audio/basic\">\n                <decoding>50</decoding>\n                <encoding>40</encoding>\n
    \           </rtp-codec>\n        </non-active-rtp-sessions>\n        <non-active-mixer-sessions>\n
    \           <non-active-mix available=\"15\">\n                <rtp-codec name=\"audio/basic\">\n
    \                   <decoding>15</decoding>\n                    <encoding>15</encoding>\n
    \               </rtp-codec>\n            </non-active-mix>\n        </non-active-mixer-sessions>\n
    \       <media-server-status>active</media-server-status>\n        <supported-codecs>\n
    \           <supported-codec name=\"audio/basic\">\n                <supported-codec-package
    name=\"msc-ivr/1.0\">\n                    <supported-action>encoding</supported-action>\n
    \                   <supported-action>decoding</supported-action>\n                </supported-codec-package>\n
    \               <supported-codec-package name=\"msc-mixer/1.0\">\n                    <supported-action>encoding</supported-action>\n
    \                   <supported-action>decoding</supported-action>\n                </supported-codec-package>\n
    \           </supported-codec>\n        </supported-codecs>\n        <application-data>TestbedPrototype</application-data>\n
    \       <file-formats>\n            <supported-format name=\"audio/x-wav\">\n
    \               <supported-file-package>\n                    msc-ivr/1.0\n                </supported-file-package>\n
    \           </supported-format>\n        </file-formats>\n        <max-prepared-duration>\n
    \           <max-time max-time-seconds=\"3600\">\n                <max-time-package>msc-ivr/1.0</max-time-package>\n
    \           </max-time>\n        </max-prepared-duration>\n        <dtmf-support>\n
    \           <detect>\n                <dtmf-type package=\"msc-ivr/1.0\" name=\"RFC4733\"/>\n
    \               <dtmf-type package=\"msc-mixer/1.0\" name=\"RFC4733\"/>\n            </detect>\n
    \           <generate>\n                <dtmf-type package=\"msc-ivr/1.0\" name=\"RFC4733\"/>\n
    \               <dtmf-type package=\"msc-mixer/1.0\" name=\"RFC4733\"/>\n            </generate>\n
    \           <passthrough>\n                <dtmf-type package=\"msc-ivr/1.0\"
    name=\"RFC4733\"/>\n                <dtmf-type package=\"msc-mixer/1.0\" name=\"RFC4733\"/>\n
    \           </passthrough>\n        </dtmf-support>\n        <mixing-modes>\n
    \           <audio-mixing-modes>\n                <audio-mixing-mode package=\"msc-ivr/1.0\">\n
    \                    nbest\n                </audio-mixing-mode>\n            </audio-mixing-modes>\n
    \           <video-mixing-modes activespeakermix=\"true\" vas=\"true\">\n                <video-mixing-mode
    package=\"msc-mixer/1.0\">\n                     single-view\n                </video-mixing-mode>\n
    \               <video-mixing-mode package=\"msc-mixer/1.0\">\n                     dual-view\n
    \               </video-mixing-mode>\n                <video-mixing-mode package=\"msc-mixer/1.0\">\n
    \                    dual-view-crop\n                </video-mixing-mode>\n                <video-mixing-mode
    package=\"msc-mixer/1.0\">\n                     dual-view-2x1\n                </video-mixing-mode>\n
    \               <video-mixing-mode package=\"msc-mixer/1.0\">\n                     dual-view-2x1-crop\n
    \               </video-mixing-mode>\n                <video-mixing-mode package=\"msc-mixer/1.0\">\n
    \                    quad-view\n                </video-mixing-mode>\n                <video-mixing-mode
    package=\"msc-mixer/1.0\">\n                     multiple-5x1\n                </video-mixing-mode>\n
    \               <video-mixing-mode package=\"msc-mixer/1.0\">\n                     multiple-3x3\n
    \               </video-mixing-mode>\n                <video-mixing-mode package=\"msc-mixer/1.0\">\n
    \                    multiple-4x4\n                </video-mixing-mode>\n            </video-mixing-modes>\n
    \       </mixing-modes>\n        <supported-tones>\n            <supported-country-codes>\n
    \               <country-code package=\"msc-ivr/1.0\">GB</country-code>\n                <country-code
    package=\"msc-ivr/1.0\">IT</country-code>\n                <country-code package=\"msc-ivr/1.0\">US</country-code>\n
    \           </supported-country-codes>\n            <supported-h248-codes>\n                <h248-code
    package=\"msc-ivr/1.0\">cg/*</h248-code>\n                <h248-code package=\"msc-ivr/1.0\">biztn/ofque</h248-code>\n
    \               <h248-code package=\"msc-ivr/1.0\">biztn/erwt</h248-code>\n                <h248-code
    package=\"msc-mixer/1.0\">conftn/*</h248-code>\n            </supported-h248-codes>\n
    \       </supported-tones>\n        <file-transfer-modes>\n            <file-transfer-mode
    package=\"msc-ivr/1.0\" name=\"HTTP\"/>\n        </file-transfer-modes>\n        <asr-tts-support>\n
    \           <asr-support>\n                <language xml:lang=\"en\"/>\n            </asr-support>\n
    \           <tts-support>\n                <language xml:lang=\"en\"/>\n            </tts-support>\n
    \       </asr-tts-support>\n        <vxml-support>\n            <vxml-mode package=\"msc-ivr/1.0\"
    support=\"RFC6231\"/>\n        </vxml-support>\n        <media-server-location>\n
    \           <civicAddress xml:lang=\"it\">\n                <country>IT</country>\n
    \               <A1>Campania</A1>\n                <A3>Napoli</A3>\n                <A6>Via
    Claudio</A6>\n                <HNO>21</HNO>\n                <LMK>University of
    Napoli Federico II</LMK>\n                <NAM>Dipartimento di Informatica e Sistemistica</NAM>\n
    \               <PC>80210</PC>\n            </civicAddress>\n        </media-server-location>\n
    \       <label>TestbedPrototype-01</label>\n     <media-server-address>sip:MS1@ms.example.net</media-server-address>\n
    \    <encryption/>\n    </mrbnotification>\n   </mrbpublish>\n"
  - 'B2. MRB -> MS (200 to CONTROL)

    '
  - '------------------------------

    '
  - 'CFW 03fff52e7b7a 200

    '
  title: 9.1.  Publish Example
- contents:
  - "9.2.  Consumer Examples\n   As specified in Section 5.2, the Consumer interface
    can be involved\n   in two different modes: Query and In-line aware.  When in
    Query mode,\n   Consumer messages are transported in HTTP messages: an example
    of\n   such an approach is presented in Section 9.2.1.  When in In-line\n   aware
    mode, messages are instead transported as part of SIP\n   negotiations: considering
    that SIP negotiations may be related to\n   either the creation of a Control Channel
    or to a User Agent Client\n   (UAC) media dialog, two separate examples of such
    an approach are\n   presented in Section 9.2.2.\n"
  title: 9.2.  Consumer Examples
- contents:
  - "9.2.1.  Query Example\n   The following example assumes that the interested Application
    Server\n   already knows the HTTP URL where an MRB is listening for Consumer\n
    \  messages.\n   Figure 10 shows the HTTP-based transaction between the Application\n
    \  Server (AS, as shown in the figure) and the MRB.  The Application\n   Server
    sends a Consumer request as payload of an HTTP POST message\n   (1.), and the
    MRB provides an answer in an HTTP 200 OK message (2.).\n   Specifically, as will
    be shown in the examples, the Application\n   Server is interested in 100 IVR
    ports: the MRB finds two Media\n   Servers that can satisfy the request (one providing
    60 ports and the\n   other providing 40 ports) and reports them to the Application
    Server.\n     AS                                             MRB\n      |                                              |\n
    \     | 1. HTTP POST (Consumer request)              |\n      |--------------------------------------------->|\n
    \     |                                              |\n      |                                              |\n
    \     |                                              |--+ Parse request\n      |
    \                                             |  | and see if any\n      |                                              |<-+
    MS applies\n      |                                              |\n      |                2.
    200 OK (Consumer response) |\n      |<---------------------------------------------|\n
    \     |                                              |\n      |--+ Parse response
    and                        |\n      |  | start session (SIP/COMEDIA/CFW)           |\n
    \     |<-+ with first MS reported by MRB             |\n      |                                              |\n
    \     .                                              .\n      .                                              .\n
    \          Figure 10: Consumer Example (Query): Sequence Diagram\n   The rest
    of this section includes a full dump of the messages\n   associated with the previous
    sequence diagram, specifically:\n   1.  the Consumer request (1.), in a <mediaResourceRequest>
    (HTTP\n       POST, Content-Type 'application/mrb-consumer+xml');\n   2.  the
    Consumer response (2.), in a <mediaResourceResponse> (HTTP\n       200 OK, Content-Type
    'application/mrb-consumer+xml').\n"
  - '1. AS -> MRB (HTTP POST, Consumer request)

    '
  - '------------------------------------------

    '
  - 'POST /Mrb/Consumer HTTP/1.1

    '
  - 'Content-Length: 893

    '
  - 'Content-Type: application/mrb-consumer+xml

    '
  - 'Host: mrb.example.net:8080

    '
  - 'Connection: Keep-Alive

    '
  - 'User-Agent: Apache-HttpClient/4.0.1 (java 1.5)

    '
  - '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

    '
  - "<mrbconsumer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:mrb-consumer\">\n
    \   <mediaResourceRequest id=\"gh11x23v\">\n        <generalInfo>\n            <packages>\n
    \               <package>msc-ivr/1.0</package>\n                <package>msc-mixer/1.0</package>\n
    \           </packages>\n        </generalInfo>\n        <ivrInfo>\n            <ivr-sessions>\n
    \               <rtp-codec name=\"audio/basic\">\n                    <decoding>100</decoding>\n
    \                   <encoding>100</encoding>\n                </rtp-codec>\n            </ivr-sessions>\n
    \           <file-formats>\n                <required-format name=\"audio/x-wav\"/>\n
    \           </file-formats>\n            <file-transfer-modes>\n                <file-transfer-mode
    package=\"msc-ivr/1.0\" name=\"HTTP\"/>\n            </file-transfer-modes>\n
    \       </ivrInfo>\n    </mediaResourceRequest>\n"
  - '</mrbconsumer>

    '
  - '2. AS <- MRB (200 to POST, Consumer response)

    '
  - '---------------------------------------------

    '
  - 'HTTP/1.1 200 OK

    '
  - 'X-Powered-By: Servlet/2.5

    '
  - 'Server: Sun GlassFish Communications Server 1.5

    '
  - 'Content-Type: application/mrb-consumer+xml;charset=ISO-8859-1

    '
  - 'Content-Length: 1133

    '
  - 'Date: Mon, 12 Apr 2011 14:59:26 GMT

    '
  - '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>

    '
  - "<mrbconsumer version=\"1.0\" xmlns=\"urn:ietf:params:xml:ns:mrb-consumer\" >\n
    \   <mediaResourceResponse reason=\"Resource found\" status=\"200\"\n                           id=\"gh11x23v\">\n
    \       <response-session-info>\n            <session-id>5t3Y4IQ84gY1</session-id>\n
    \           <seq>9</seq>\n            <expires>3600</expires>\n            <media-server-address\n
    \                             uri=\"sip:MediaServer@ms.example.com:5080\">\n                <ivr-sessions>\n
    \                   <rtp-codec name=\"audio/basic\">\n                        <decoding>60</decoding>\n
    \                       <encoding>60</encoding>\n                    </rtp-codec>\n
    \               </ivr-sessions>\n            </media-server-address>\n            <media-server-address\n
    \                      uri=\"sip:OtherMediaServer@pool.example.net:5080\">\n                <ivr-sessions>\n
    \                   <rtp-codec name=\"audio/basic\">\n                        <decoding>40</decoding>\n
    \                       <encoding>40</encoding>\n                    </rtp-codec>\n
    \               </ivr-sessions>\n            </media-server-address>\n        </response-session-info>\n
    \   </mediaResourceResponse>\n"
  - "</mrbconsumer>\n   As the example shows, the request and response are associated
    by\n   means of the 'id' attribute (id=\"gh11x23v\").  The MRB has picked '9'\n
    \  as the random sequence number that needs to be incremented by the\n   Application
    Server for the subsequent request associated with the\n   same session.\n   The
    rest of the scenario is omitted for brevity.  After having\n   received the 'mediaResourceResponse',
    the Application Server has the\n   URIs of two Media Servers able to fulfill its
    media requirements and\n   can start a control dialog with one or both of them.\n"
  title: 9.2.1.  Query Example
- contents:
  - "9.2.2.  IAMM Examples\n   Two separate examples are presented for the IAMM case:
    in fact, IAMM\n   can take advantage of two different approaches with respect
    to the\n   SIP dialogs to be exploited to carry Consumer messages, i.e., i) a\n
    \  SIP control dialog to create a Control Channel, and ii) a UAC media\n   dialog
    to attach to a Media Server.  To make things clearer for the\n   reader, the same
    Consumer request as the one presented in the Query\n   mode will be sent, in order
    to clarify how the behavior of the\n   involved parties may differ.\n"
  title: 9.2.2.  IAMM Examples
- contents:
  - "9.2.2.1.  IAMM Example: CFW-Based Approach\n   The following example assumes
    that the interested Application Server\n   already knows the SIP URI of an MRB.\n
    \  Figure 11 shows the first approach, i.e., SIP-based transactions\n   between
    the Application Server, the MRB, and one Media Server that\n   the MRB chooses
    from the two that are allocated to fulfill the\n   request.  The diagram is more
    complex than before.  This is basically\n   a scenario envisaging the MRB as a
    B2BUA.  The Application Server\n   sends a SIP INVITE (1.) containing both a CFW-related
    SDP and a\n   Consumer request (multipart body).  The MRB sends a provisional\n
    \  response to the Application Server (2.) and starts working on the\n   request.
    \ First of all, it makes use of the Consumer request from the\n   Application
    Server to determine which Media Servers should be\n   exploited.  Once the right
    Media Servers have been chosen (MS1 and\n   MS2 in the example), the MRB sends
    a new SIP INVITE (3.) to one of\n   the Media Servers (MS1 in the example) by
    just including the SDP part\n   of the original request.  That Media Server negotiates
    this INVITE as\n   specified in [RFC6230] (4., 5., 6.), providing the MRB with
    its own\n   CFW-related SDP.  The MRB replies to the original Application Server\n
    \  INVITE preparing a SIP 200 OK with another multipart body (7.): this\n   multipart
    body includes the Consumer response used by the MRB to\n   determine the right
    Media Servers and the SDP returned by the Media\n   Server (MS1) in (5.).  The
    Application Server finally acknowledges\n   the 200 OK (8.), and can start a CFW
    connection towards that Media\n   Server (MS1).  Since the MRB provided the Application
    Server with two\n   Media Server instances to fulfill its requirements, the Application\n
    \  Server can use the URI in the <media-server-address> element in the\n   <mediaResourceResponse>
    that describes the other Media Server to\n   establish a CFW channel with that
    Media Server (MS2) as well.\n   Please note that to ease the reading of the protocol
    contents a\n   simple '=_Part' is used whenever a boundary for a 'multipart/mixed'\n
    \  payload is provided, instead of the actual boundary that would be\n   inserted
    in the SIP messages.\n  AS                     MRB                        MS1
    \             MS2\n  |                       |                           |                |\n
    \ | 1. INVITE             |                           |                |\n  |
    (multipart/mixed)     |                           |                |\n  |---------------------->|
    \                          |                |\n  |       2. 100 (Trying) |                           |
    \               |\n  |<----------------------|                           |                |\n
    \ |                       |--+ Extract SDP and        |                |\n  |
    \                      |  | MRB payloads; handle   |                |\n  |                       |<-+
    Consumer request to    |                |\n  |                       |    pick
    MSs (MS1 and MS2) |                |\n  |                       |                           |
    \               |\n  |                       | 3. INVITE                 |                |\n
    \ |                       | (only copy SDP from 1.)   |                |\n  |
    \                      |-------------------------->|                |\n  |                       |
    \          4. 100 (Trying) |                |\n  |                       |<--------------------------|
    \               |\n  |                       |                           |--+
    Negotiate   |\n  |                       |                           |  | CFW
    Control |\n  |                       |                           |<-+ Channel
    \    |\n  |                       |                 5. 200 OK |                |\n
    \ |                       |<--------------------------|                |\n  |
    \                      | 6. ACK                    |                |\n  |                       |-------------------------->|
    \               |\n  |        Prepare new +--|                           |                |\n
    \ |       payload with |  |                           |                |\n  |
    \   SDP from MS and +->|                           |                |\n  |     Consumer
    reply    |                           |                |\n  |                       |
    \                          |                |\n  |             7. 200 OK |                           |
    \               |\n  |     (multipart/mixed) |                           |                |\n
    \ |<----------------------|                           |                |\n  |
    8. ACK                |                           |                |\n  |---------------------->|
    \                          |                |\n  |                       |                           |
    \               |\n  |--+ Read Cons. reply   |                           |                |\n
    \ |  | and use SDP to     |                           |                |\n  |<-+
    create CFW Chn.    |                           |                |\n  |                       |
    \                          |                |\n  |                                                   |
    \               |\n  |   Create TCP CFW channel towards MS1 (if needed)  |                |\n
    \ |-------------------------------------------------->|                |\n  |
    \                                                  |                |\n  |<<##############
    TCP CONNECTION #################>>|                |\n  |                                                   |
    \               |\n  | CFW SYNC                                          |                |\n
    \ |++++++++++++++++++++++++++++++++++++++++++++++++++>|                |\n  |
    \                                                  |                |\n  .                       .
    \                          .                .\n  .                       .                           .
    \               .\n  |                                                   |                |\n
    \ |   Negotiate SIP control dialog with MS2                            |\n  |<------------------------------------------------------------------>|\n
    \ |   Create TCP CFW channel towards MS2 as well (if needed)           |\n  |------------------------------------------------------------------->|\n
    \ |                                                                    |\n  |<<########################
    TCP CONNECTION ########################>>|\n  |                                                                    |\n
    \ | CFW SYNC                                                           |\n  |+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++>|\n
    \ |                                                                    |\n  |
    \                      |                           |                |\n  .                       .
    \                          .                .\n  .                       .                           .
    \               .\n   Figure 11: Consumer Example (IAMM/Control Channel): Sequence
    Diagram\n   The rest of this section includes an almost full trace of the\n   messages
    associated with the previous sequence diagram.  Only the\n   relevant SIP messages
    are shown (both the INVITEs and the 200 OKs),\n   and only the relevant headers
    are preserved for brevity (Content-Type\n   and multipart-related information).
    \ Specifically:\n   1.  the original INVITE (1.) containing both a CFW-related
    SDP\n       (Connection-Oriented Media (COMEDIA) information to negotiate a\n
    \      new Control Channel) and a Consumer <mediaResourceRequest>;\n   2.  the
    INVITE sent by the MRB (acting as a B2BUA) to the Media\n       Server (3.), containing
    only the CFW-related SDP from the\n       original INVITE;\n   3.  the 200 OK
    sent by the Media Server back to the MRB (5.) to\n       complete the CFW-related
    negotiation (SDP only);\n   4.  the 200 OK sent by the MRB back to the Application
    Server in\n       response to the original INVITE (7.), containing both the\n
    \      CFW-related information sent by the Media Server and a Consumer\n       <mediaResourceRequest>
    documenting the MRB's decision to use that\n       Media Server.\n"
  - '1. AS -> MRB (INVITE multipart/mixed)

    '
  - "-------------------------------------\n   [..]\n   Content-Type: multipart/mixed;boundary=\"=_Part\"\n
    \  =_Part\n   Content-Type: application/sdp\n   v=0\n   o=- 2890844526 2890842807
    IN IP4 as.example.com\n   s=MediaCtrl\n   c=IN IP4 as.example.com\n   t=0 0\n
    \  m=application 48035 TCP cfw\n   a=connection:new\n   a=setup:active\n   a=cfw-id:vF0zD4xzUAW9\n
    \  a=ctrl-package:msc-mixer/1.0\n   a=ctrl-package:msc-ivr/1.0\n   =_Part\n   Content-Type:
    application/mrb-consumer+xml\n   <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n
    \  <mrbconsumer version=\"1.0\"\n                xmlns=\"urn:ietf:params:xml:ns:mrb-consumer\">\n
    \   <mediaResourceRequest id=\"pz78hnq1\">\n        <generalInfo>\n            <packages>\n
    \               <package>msc-ivr/1.0</package>\n                <package>msc-mixer/1.0</package>\n
    \           </packages>\n        </generalInfo>\n        <ivrInfo>\n            <ivr-sessions>\n
    \               <rtp-codec name=\"audio/basic\">\n                    <decoding>100</decoding>\n
    \                   <encoding>100</encoding>\n                </rtp-codec>\n            </ivr-sessions>\n
    \           <file-formats>\n                <required-format name=\"audio/x-wav\"/>\n
    \           </file-formats>\n            <file-transfer-modes>\n                <file-transfer-mode
    package=\"msc-ivr/1.0\" name=\"HTTP\"/>\n            </file-transfer-modes>\n
    \       </ivrInfo>\n    </mediaResourceRequest>\n   </mrbconsumer>\n   =_Part\n"
  - '3. MRB -> MS (INVITE sdp only)

    '
  - "------------------------------\n   [..]\n   Content-Type: application/sdp\n   v=0\n
    \  o=- 2890844526 2890842807 IN IP4 as.example.com\n   s=MediaCtrl\n   c=IN IP4
    as.example.com\n   t=0 0\n   m=application 48035 TCP cfw\n   a=connection:new\n
    \  a=setup:active\n   a=cfw-id:vF0zD4xzUAW9\n   a=ctrl-package:msc-mixer/1.0\n
    \  a=ctrl-package:msc-ivr/1.0\n"
  - '5. MRB <- MS (200 OK sdp)

    '
  - "-------------------------\n   [..]\n   Content-Type: application/sdp\n   v=0\n
    \  o=lminiero 2890844526 2890842808 IN IP4 ms.example.net\n   s=MediaCtrl\n   c=IN
    IP4 ms.example.net\n   t=0 0\n   m=application 7575 TCP cfw\n   a=connection:new\n
    \  a=setup:passive\n   a=cfw-id:vF0zD4xzUAW9\n   a=ctrl-package:msc-mixer/1.0\n
    \  a=ctrl-package:msc-ivr/1.0\n   a=ctrl-package:mrb-publish/1.0\n   a=ctrl-package:msc-example-pkg/1.0\n"
  - '7. AS <- MRB (200 OK multipart/mixed)

    '
  - "-------------------------------------\n   [..]\n   Content-Type: multipart/mixed;boundary=\"=_Part\"\n
    \  =_Part\n   Content-Type: application/sdp\n   v=0\n   o=lminiero 2890844526
    2890842808 IN IP4 ms.example.net\n   s=MediaCtrl\n   c=IN IP4 ms.example.net\n
    \  t=0 0\n   m=application 7575 TCP cfw\n   a=connection:new\n   a=setup:passive\n
    \  a=cfw-id:vF0zD4xzUAW9\n   a=ctrl-package:msc-mixer/1.0\n   a=ctrl-package:msc-ivr/1.0\n
    \  a=ctrl-package:mrb-publish/1.0\n   a=ctrl-package:msc-example-pkg/1.0\n   =_Part\n
    \  Content-Type: application/mrb-consumer+xml\n   <?xml version=\"1.0\" encoding=\"UTF-8\"
    standalone=\"yes\"?>\n   <mrbconsumer version=\"1.0\"\n                xmlns=\"urn:ietf:params:xml:ns:mrb-consumer\"
    >\n    <mediaResourceResponse reason=\"Resource found\" status=\"200\"\n                           id=\"pz78hnq1\">\n
    \       <response-session-info>\n            <session-id>z1skKYZQ3eFu</session-id>\n
    \           <seq>9</seq>\n            <expires>3600</expires>\n            <media-server-address\n
    \                             uri=\"sip:MediaServer@ms.example.com:5080\">\n                <connection-id>32pbdxZ8:KQw677BF</connection-id>\n
    \               <ivr-sessions>\n                    <rtp-codec name=\"audio/basic\">\n
    \                       <decoding>60</decoding>\n                        <encoding>60</encoding>\n
    \                   </rtp-codec>\n                </ivr-sessions>\n            </media-server-address>\n
    \           <media-server-address\n                       uri=\"sip:OtherMediaServer@pool.example.net:5080\">\n
    \               <ivr-sessions>\n                    <rtp-codec name=\"audio/basic\">\n
    \                       <decoding>40</decoding>\n                        <encoding>40</encoding>\n
    \                   </rtp-codec>\n                </ivr-sessions>\n            </media-server-address>\n
    \       </response-session-info>\n    </mediaResourceResponse>\n   </mrbconsumer>\n
    \  =_Part\n   As the previous example illustrates, the only difference in the\n
    \  response that the MRB provides to the Application Server is in the\n   'connection-id'
    attribute that is added to the first allocated Media\n   Server instance: this
    allows the Application Server to understand\n   that the MRB has sent the CFW
    channel negotiation to that specific\n   Media Server and that the connection-id
    to be used is the one\n   provided.  This will be described in more detail in
    the following\n   section for the media dialog-based approach.\n   The continuation
    of the scenario (the Application Server connecting\n   to MS1 to start the Control
    Channel and the related SYNC message, the\n   Application Server connecting to
    MS2 as well later on, all the media\n   dialogs being attached to either Media
    Server) is omitted for\n   brevity.\n"
  title: '9.2.2.1.  IAMM Example: CFW-Based Approach'
- contents:
  - "9.2.2.2.  IAMM Example: Media Dialog-Based Approach\n   The following example
    assumes that the interested Application Server\n   already knows the SIP URI of
    an MRB.\n   Figure 12 shows the second approach, i.e., SIP-based transactions\n
    \  between a SIP client, the Application Server, the MRB, and the Media\n   Server
    that the MRB chooses.  The interaction is basically the same\n   as previous examples
    (e.g., contents of the multipart body), but\n   considering that a new party is
    involved in the communication, the\n   diagram is slightly more complex than before.
    \ As before, the MRB\n   acts as a B2BUA.  A UAC sends a SIP INVITE to a SIP URI
    handled by\n   the Application Server, since it is interested to its services
    (1.).\n   The Application Server sends a provisional response (2.) and, since\n
    \  it doesn't have the resources yet, sends to the MRB a new SIP INVITE\n   (3.)
    containing both the UAC media-related SDP and a Consumer request\n   (multipart
    body).  The MRB sends a provisional response to the\n   Application Server (4.)
    and starts working on the request.  First of\n   all, it makes use of the Consumer
    request from the Application Server\n   to determine which Media Servers should
    be chosen.  Once the Media\n   Server has been chosen, the MRB sends a new SIP
    INVITE to one of the\n   Media Servers by including the SDP part of the original
    request (5.).\n   The Media Server negotiates this INVITE as specified in [RFC6230]\n
    \  (6., 7., 8.) to allocate the needed media resources to handle the new\n   media
    dialog, eventually providing the MRB with its own media-related\n   SDP.  The
    MRB replies to the original Application Server INVITE\n   preparing a SIP 200
    OK with a multipart body (9.): this multipart\n   body includes the Consumer response
    from the MRB indicating the\n   chosen Media Servers and the SDP returned by the
    Media Server in\n   (7.).  The Application Server finally acknowledges the 200
    OK (10.)\n   and ends the scenario by eventually providing the UAC with the SDP
    it\n   needs to set up the RTP channels with the chosen Media Server: a\n   separate
    direct SIP control dialog may be initiated by the\n   Application Server to the
    same Media Server in order to set up a\n   Control Channel to manipulate the media
    dialog.\n   As with the IAMM/Control Channel example in the prior section, this\n
    \  example has the MRB selecting Media Server resources across two Media\n   Server
    instances.  The convention could be that the MRB sent the SIP\n   INVITE to the
    first Media Server in the list provided to the\n   Application Server in the Consumer
    response information.  For the\n   sake of brevity, considerations related to
    connecting to the other\n   Media Servers as well are omitted, since they have
    already been\n   addressed in the previous section.\n   Please note that to ease
    the reading of the protocol contents, a\n   simple '=_Part' is used whenever a
    boundary for a 'multipart/mixed'\n   payload is provided, instead of the actual
    boundary that would be\n   inserted in the SIP messages.\n UAC              AS
    \                    MRB                          MS\n  |               |                       |
    \                          |\n  | 1. INVITE     |                       |                           |\n
    \ | (media SDP)   |                       |                           |\n  |-------------->|
    \                      |                           |\n  | 2. 100 Trying |                       |
    \                          |\n  |<--------------|                       |                           |\n
    \ |               | 3. INVITE             |                           |\n  |               |
    (multipart/mixed)     |                           |\n  |               |---------------------->|
    \                          |\n  |               |       4. 100 (Trying) |                           |\n
    \ |               |<----------------------|                           |\n  |               |
    \                      |--+ Extract SDP and        |\n  |               |                       |
    \ | MRB payloads; handle   |\n  |               |                       |<-+ Consumer
    request to    |\n  |               |                       |    pick Media Servers
    \    |\n  |               |                       |                           |\n
    \ |               |                       | 5. INVITE                 |\n  |               |
    \                      | (only copy SDP from 3.)   |\n  |               |                       |-------------------------->|\n
    \ |               |                       |           6. 100 (Trying) |\n  |               |
    \                      |<--------------------------|\n  |               |                       |
    \                       +--|\n  |               |                       |    Handle
    media dialog |  |\n  |               |                       |        (connection-id)
    +->|\n  |               |                       |                           |\n
    \ |               |                       |                 7. 200 OK |\n  |               |
    \                      |<--------------------------|\n  |               |                       |
    8. ACK                    |\n  |               |                       |-------------------------->|\n
    \ |               |        Prepare new +--|                           |\n  |               |
    \      payload with |  |                           |\n  |               |    SDP
    from MS and +->|                           |\n  |               |     Consumer
    reply    |                           |\n  |               |                       |
    \                          |\n  |               |             9. 200 OK |                           |\n
    \ |               |     (multipart/mixed) |                           |\n  |               |<----------------------|
    \                          |\n  |               | 10. ACK               |                           |\n
    \ |               |---------------------->|                           |\n  |               |
    \                      |                           |\n  |               |--+ Read
    Cons. reply   |                           |\n  |               |  | and send SDP
    \      |                           |\n  |               |<-+ back to UAC        |
    \                          |\n  |    11. 200 OK |                       |                           |\n
    \ |<--------------|                       |                           |\n  | 12.
    ACK       |                       |                           |\n  |-------------->|
    \                      |                           |\n  |               |                       |
    \                          |\n  |<<*************************** RTP *******************************>>|\n
    \ |               |                       |                           |\n  |               |--+
    Negotiate          |                           |\n  |               |  | CFW channel
    \       |                           |\n  |               |<-+ towards MS         |
    \                          |\n  |               |    (if needed)        |                           |\n
    \ .               .                       .                           .\n  .               .
    \                      .                           .\n  |               |                       |
    \                          |\n  |               |                                                   |\n
    \ |               |    Create TCP CFW channel towards MS (if needed)  |\n  |               |-------------------------------------------------->|\n
    \ |               |                                                   |\n  |               |<<##############
    TCP CONNECTION #################>>|\n  |               |                                                   |\n
    \ |               | CFW SYNC                                          |\n  |               |++++++++++++++++++++++++++++++++++++++++++++++++++>|\n
    \ |               |                                                   |\n  .               .
    \                      .                           .\n  .               .                       .
    \                          .\n     Figure 12: Consumer Example (IAMM/Media Dialog):
    Sequence Diagram\n   The rest of this section includes a trace of the messages
    associated\n   with the previous sequence diagram.  Only the relevant SIP messages\n
    \  are shown (both the INVITEs and the 200 OKs), and only the relevant\n   headers
    are preserved for brevity (Content-Type, From/To, and\n   multipart-related information).
    \ Specifically:\n   1.  the original INVITE (1.) containing the media-related
    SDP sent by\n       a UAC;\n   2.  the INVITE sent by the AS to the MRB (3.),
    containing both the\n       media-related SDP and a Consumer <mediaResourceRequest>;\n
    \  3.  the INVITE sent by the MRB (acting as a B2BUA) to the Media\n       Server
    (5.), containing only the media-related SDP from the\n       original INVITE;\n
    \  4.  the 200 OK sent by the Media Server back to the MRB (7.) to\n       complete
    the media-related negotiation (SDP only);\n   5.  the 200 OK sent by the MRB back
    to the Application Server in\n       response to the original INVITE (9.), containing
    both the\n       media-related information sent by the Media Server and a Consumer\n
    \      <mediaResourceRequest> documenting the MRB's decision to use that\n       Media
    Server;\n   6.  the 200 OK sent by the Application Server back to the UAC to have\n
    \      it set up the RTP channel(s) with the Media Server (11.).\n"
  - '1. UAC -> AS (INVITE with media SDP)

    '
  - "------------------------------------\n   [..]\n   From: <sip:lminiero@users.example.com>;tag=1153573888\n
    \  To: <sip:mediactrlDemo@as.example.com>\n   [..]\n   Content-Type: application/sdp\n
    \  v=0\n   o=lminiero 123456 654321 IN IP4 203.0.113.2\n   s=A conversation\n
    \  c=IN IP4 203.0.113.2\n   t=0 0\n   m=audio 7078 RTP/AVP 0 3 8 101\n   a=rtpmap:0
    PCMU/8000/1\n   a=rtpmap:3 GSM/8000/1\n   a=rtpmap:8 PCMA/8000/1\n   a=rtpmap:101
    telephone-event/8000\n   a=fmtp:101 0-11\n   m=video 9078 RTP/AVP 98\n"
  - '3. AS -> MRB (INVITE multipart/mixed)

    '
  - "-------------------------------------\n   [..]\n   From: <sip:ApplicationServer@as.example.com>;tag=fd4fush5\n
    \  To: <sip:Mrb@mrb.example.org>\n   [..]\n   Content-Type: multipart/mixed;boundary=\"=_Part\"\n
    \  =_Part\n   Content-Type: application/sdp\n   v=0\n   o=lminiero 123456 654321
    IN IP4 203.0.113.2\n   s=A conversation\n   c=IN IP4 203.0.113.2\n   t=0 0\n   m=audio
    7078 RTP/AVP 0 3 8 101\n   a=rtpmap:0 PCMU/8000/1\n   a=rtpmap:3 GSM/8000/1\n
    \  a=rtpmap:8 PCMA/8000/1\n   a=rtpmap:101 telephone-event/8000\n   a=fmtp:101
    0-11\n   m=video 9078 RTP/AVP 98\n   =_Part\n   Content-Type: application/mrb-consumer+xml\n
    \  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n   <mrbconsumer
    version=\"1.0\"\n                xmlns=\"urn:ietf:params:xml:ns:mrb-consumer\">\n
    \   <mediaResourceRequest id=\"ns56g1x0\">\n        <generalInfo>\n            <packages>\n
    \               <package>msc-ivr/1.0</package>\n                <package>msc-mixer/1.0</package>\n
    \           </packages>\n        </generalInfo>\n        <ivrInfo>\n            <ivr-sessions>\n
    \               <rtp-codec name=\"audio/basic\">\n                    <decoding>100</decoding>\n
    \                   <encoding>100</encoding>\n                </rtp-codec>\n            </ivr-sessions>\n
    \           <file-formats>\n                <required-format name=\"audio/x-wav\"/>\n
    \           </file-formats>\n            <file-transfer-modes>\n                <file-transfer-mode
    package=\"msc-ivr/1.0\" name=\"HTTP\"/>\n            </file-transfer-modes>\n
    \       </ivrInfo>\n    </mediaResourceRequest>\n   </mrbconsumer>\n   =_Part\n"
  - '5. MRB -> MS (INVITE sdp only)

    '
  - "------------------------------\n   [..]\n   From: <sip:Mrb@mrb.example.org:5060>;tag=32pbdxZ8\n
    \  To: <sip:MediaServer@ms.example.com:5080>\n   [..]\n   Content-Type: application/sdp\n
    \  v=0\n   o=lminiero 123456 654321 IN IP4 203.0.113.2\n   s=A conversation\n
    \  c=IN IP4 203.0.113.2\n   t=0 0\n   m=audio 7078 RTP/AVP 0 3 8 101\n   a=rtpmap:0
    PCMU/8000/1\n   a=rtpmap:3 GSM/8000/1\n   a=rtpmap:8 PCMA/8000/1\n   a=rtpmap:101
    telephone-event/8000\n   a=fmtp:101 0-11\n   m=video 9078 RTP/AVP 98\n"
  - '7. MRB <- MS (200 OK sdp)

    '
  - "-------------------------\n   [..]\n   From: <sip:Mrb@mrb.example.org:5060>;tag=32pbdxZ8\n
    \  To: <sip:MediaServer@ms.example.com:5080>;tag=KQw677BF\n   [..]\n   Content-Type:
    application/sdp\n   v=0\n   o=lminiero 123456 654322 IN IP4 203.0.113.1\n   s=MediaCtrl\n
    \  c=IN IP4 203.0.113.1\n   t=0 0\n   m=audio 63442 RTP/AVP 0 3 8 101\n   a=rtpmap:0
    PCMU/8000\n   a=rtpmap:3 GSM/8000\n   a=rtpmap:8 PCMA/8000\n   a=rtpmap:101 telephone-event/8000\n
    \  a=fmtp:101 0-15\n   a=ptime:20\n   a=label:7eda834\n   m=video 33468 RTP/AVP
    98\n   a=rtpmap:98 H263-1998/90000\n   a=fmtp:98 CIF=2\n   a=label:0132ca2\n"
  - '9. AS <- MRB (200 OK multipart/mixed)

    '
  - "-------------------------------------\n   [..]\n   From: <sip:ApplicationServer@as.example.com>;tag=fd4fush5\n
    \  To: <sip:Mrb@mrb.example.org>;tag=117652221\n   [..]\n   Content-Type: multipart/mixed;boundary=\"=_Part\"\n
    \  =_Part\n   Content-Type: application/sdp\n   v=0\n   o=lminiero 123456 654322
    IN IP4 203.0.113.1\n   s=MediaCtrl\n   c=IN IP4 203.0.113.1\n   t=0 0\n   m=audio
    63442 RTP/AVP 0 3 8 101\n   a=rtpmap:0 PCMU/8000\n   a=rtpmap:3 GSM/8000\n   a=rtpmap:8
    PCMA/8000\n   a=rtpmap:101 telephone-event/8000\n   a=fmtp:101 0-15\n   a=ptime:20\n
    \  a=label:7eda834\n   m=video 33468 RTP/AVP 98\n   a=rtpmap:98 H263-1998/90000\n
    \  a=fmtp:98 CIF=2\n   a=label:0132ca2\n   =_Part\n   Content-Type: application/mrb-consumer+xml\n
    \  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n   <mrbconsumer
    version=\"1.0\"\n                xmlns=\"urn:ietf:params:xml:ns:mrb-consumer\"
    >\n    <mediaResourceResponse reason=\"Resource found\" status=\"200\"\n                           id=\"ns56g1x0\">\n
    \       <response-session-info>\n            <session-id>z1skKYZQ3eFu</session-id>\n
    \           <seq>9</seq>\n            <expires>3600</expires>\n            <media-server-address\n
    \                             uri=\"sip:MediaServer@ms.example.com:5080\">\n                <connection-id>32pbdxZ8:KQw677BF</connection-id>\n
    \               <ivr-sessions>\n                    <rtp-codec name=\"audio/basic\">\n
    \                       <decoding>60</decoding>\n                        <encoding>60</encoding>\n
    \                   </rtp-codec>\n                </ivr-sessions>\n            </media-server-address>\n
    \           <media-server-address\n                       uri=\"sip:OtherMediaServer@pool.example.net:5080\">\n
    \               <ivr-sessions>\n                    <rtp-codec name=\"audio/basic\">\n
    \                       <decoding>40</decoding>\n                        <encoding>40</encoding>\n
    \                   </rtp-codec>\n                </ivr-sessions>\n            </media-server-address>\n
    \       </response-session-info>\n    </mediaResourceResponse>\n   </mrbconsumer>\n
    \  =_Part\n"
  - '11. UAC <- AS (200 OK sdp)

    '
  - "--------------------------\n   [..]\n   From: <sip:lminiero@users.example.com>;tag=1153573888\n
    \  To: <sip:mediactrlDemo@as.example.com>;tag=bcd47c32\n   [..]\n   Content-Type:
    application/sdp\n   v=0\n   o=lminiero 123456 654322 IN IP4 203.0.113.1\n   s=MediaCtrl\n
    \  c=IN IP4 203.0.113.1\n   t=0 0\n   m=audio 63442 RTP/AVP 0 3 8 101\n   a=rtpmap:0
    PCMU/8000\n   a=rtpmap:3 GSM/8000\n   a=rtpmap:8 PCMA/8000\n   a=rtpmap:101 telephone-event/8000\n
    \  a=fmtp:101 0-15\n   a=ptime:20\n   a=label:7eda834\n   m=video 33468 RTP/AVP
    98\n   a=rtpmap:98 H263-1998/90000\n   a=fmtp:98 CIF=2\n   a=label:0132ca2\n   As
    the examples illustrate, as in the IAMM/Control Channel example,\n   the MRB provides
    the Application Server with a <media-server-address>\n   element in the Consumer
    response: the 'uri' attribute identifies the\n   specific Media Server to which
    the MRB has sent the SDP media\n   negotiation, and the 'connection-id' enables
    the Application Server\n   to identify to the Media Server the dialog between
    the MRB and Media\n   Server.  This attribute is needed, since according to the
    framework\n   specification [RFC6230] the connection-id is built out of the From/To\n
    \  tags of the dialog between the MRB and Media Server; since the MRB\n   acts
    as a B2BUA in this scenario, without that attribute the\n   Application Server
    does not know the relevant tags, thus preventing\n   the CFW protocol from working
    as expected.\n   The continuation of the scenario (the Application Server connecting\n
    \  to the Media Server to start the Control Channel, the SYNC message,\n   etc.)
    is omitted for brevity.\n"
  title: '9.2.2.2.  IAMM Example: Media Dialog-Based Approach'
- contents:
  - "10.  Media Service Resource Publisher Interface XML Schema\n   This section gives
    the XML Schema Definition\n   [W3C.REC-xmlschema-1-20041028] [W3C.REC-xmlschema-2-20041028]
    of the\n   \"application/mrb-publish+xml\" format.\n"
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
  - "<xsd:schema targetNamespace=\"urn:ietf:params:xml:ns:mrb-publish\"\n elementFormDefault=\"qualified\"
    blockDefault=\"#all\"\n xmlns=\"urn:ietf:params:xml:ns:mrb-publish\"\n xmlns:fw=\"urn:ietf:params:xml:ns:control:framework-attributes\"\n
    xmlns:ca=\"urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr\"\n xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n
    <xsd:annotation>\n  <xsd:documentation>\n   IETF MediaCtrl MRB 1.0\n   This is
    the schema of the IETF MediaCtrl MRB package.\n   The schema namespace is urn:ietf:params:xml:ns:mrb-publish\n
    \ </xsd:documentation>\n </xsd:annotation>\n <!--\n  #############################################################\n
    \ SCHEMA IMPORTS\n  #############################################################\n
    -->\n <xsd:import namespace=\"http://www.w3.org/XML/1998/namespace\"\n  schemaLocation=\"http://www.w3.org/2001/xml.xsd\">\n
    \ <xsd:annotation>\n   <xsd:documentation>\n    This import brings in the XML
    attributes for\n    xml:base, xml:lang, etc.\n   </xsd:documentation>\n  </xsd:annotation>\n
    </xsd:import>\n <xsd:import\n  namespace=\"urn:ietf:params:xml:ns:control:framework-attributes\"\n
    \ schemaLocation=\"framework.xsd\">\n  <xsd:annotation>\n   <xsd:documentation>\n
    \   This import brings in the framework attributes for\n    conferenceid and connectionid.\n
    \  </xsd:documentation>\n  </xsd:annotation>\n </xsd:import>\n <xsd:import\n  namespace=\"urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr\"\n
    \ schemaLocation=\"civicAddress.xsd\">\n  <xsd:annotation>\n   <xsd:documentation>\n
    \   This import brings in the civicAddress specification\n    from RFC 5139.\n
    \  </xsd:documentation>\n  </xsd:annotation>\n </xsd:import>\n"
  - "<!--\n  #####################################################\n  Extensible core
    type\n  #####################################################\n -->\n <xsd:complexType
    name=\"Tcore\">\n  <xsd:annotation>\n   <xsd:documentation>\n    This type is
    extended by other (non-mixed) component types to\n    allow attributes from other
    namespaces.\n   </xsd:documentation>\n  </xsd:annotation>\n  <xsd:sequence/>\n
    \ <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n </xsd:complexType>\n"
  - "<!--\n  #####################################################\n  TOP-LEVEL ELEMENT:
    mrbpublish\n  #####################################################\n -->\n"
  - "<xsd:complexType name=\"mrbpublishType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n     <xsd:choice>\n      <xsd:element ref=\"mrbrequest\"
    />\n      <xsd:element ref=\"mrbresponse\" />\n      <xsd:element ref=\"mrbnotification\"
    />\n      <xsd:any namespace=\"##other\" minOccurs=\"0\"\n       maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n     </xsd:choice>\n    </xsd:sequence>\n    <xsd:attribute
    name=\"version\" type=\"version.datatype\"\n      use=\"required\" />\n    <xsd:anyAttribute
    namespace=\"##other\" processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n
    </xsd:complexType>\n <xsd:element name=\"mrbpublish\" type=\"mrbpublishType\"
    />\n"
  - "<!--\n  #####################################################\n  mrbrequest TYPE\n
    \ #####################################################\n -->\n"
  - "<!--  mrbrequest -->\n <xsd:complexType name=\"mrbrequestType\">\n  <xsd:complexContent>\n
    \  <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n     <xsd:element ref=\"subscription\"
    />\n     <xsd:any namespace=\"##other\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n
    <xsd:element name=\"mrbrequest\" type=\"mrbrequestType\" />\n"
  - '<!--  subscription -->

    '
  - "<xsd:complexType name=\"subscriptionType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n     <xsd:element name=\"expires\" type=\"xsd:nonNegativeInteger\"\n
    \     minOccurs=\"0\" maxOccurs=\"1\" />\n     <xsd:element name=\"minfrequency\"
    type=\"xsd:nonNegativeInteger\"\n      minOccurs=\"0\" maxOccurs=\"1\" />\n     <xsd:element
    name=\"maxfrequency\" type=\"xsd:nonNegativeInteger\"\n      minOccurs=\"0\" maxOccurs=\"1\"
    />\n     <xsd:any namespace=\"##other\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:attribute name=\"id\"
    type=\"id.datatype\" use=\"required\" />\n    <xsd:attribute name=\"seqnumber\"
    type=\"xsd:nonNegativeInteger\"\n      use=\"required\" />\n    <xsd:attribute
    name=\"action\" type=\"action.datatype\"\n      use=\"required\" />\n    <xsd:anyAttribute
    namespace=\"##other\" processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n
    </xsd:complexType>\n <xsd:element name=\"subscription\" type=\"subscriptionType\"
    />\n"
  - "<!--\n  #####################################################\n  mrbresponse
    TYPE\n  #####################################################\n -->\n"
  - "<!--  mrbresponse -->\n <xsd:complexType name=\"mrbresponseType\">\n  <xsd:complexContent>\n
    \  <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n     <xsd:element ref=\"subscription\"
    minOccurs=\"0\" maxOccurs=\"1\" />\n     <xsd:any namespace=\"##other\" minOccurs=\"0\"\n
    \      maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n
    \   <xsd:attribute name=\"status\" type=\"status.datatype\"\n     use=\"required\"
    />\n    <xsd:attribute name=\"reason\" type=\"xsd:string\" />\n    <xsd:anyAttribute
    namespace=\"##other\" processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n
    </xsd:complexType>\n <xsd:element name=\"mrbresponse\" type=\"mrbresponseType\"
    />\n"
  - "<!--\n  #####################################################\n  mrbnotification
    TYPE\n  #####################################################\n -->\n"
  - '<!--  mrbnotification -->

    '
  - "<xsd:complexType name=\"mrbnotificationType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n     <xsd:element name=\"media-server-id\"\n
    \       type=\"subscriptionid.datatype\"/>\n     <xsd:element ref=\"supported-packages\"
    minOccurs=\"0\" />\n     <xsd:element ref=\"active-rtp-sessions\" minOccurs=\"0\"
    />\n     <xsd:element ref=\"active-mixer-sessions\" minOccurs=\"0\" />\n     <xsd:element
    ref=\"non-active-rtp-sessions\" minOccurs=\"0\" />\n     <xsd:element ref=\"non-active-mixer-sessions\"
    minOccurs=\"0\" />\n     <xsd:element ref=\"media-server-status\" minOccurs=\"0\"
    />\n     <xsd:element ref=\"supported-codecs\" minOccurs=\"0\" />\n     <xsd:element
    ref=\"application-data\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\" />\n     <xsd:element
    ref=\"file-formats\" minOccurs=\"0\" />\n     <xsd:element ref=\"max-prepared-duration\"
    minOccurs=\"0\" />\n     <xsd:element ref=\"dtmf-support\" minOccurs=\"0\" />\n
    \    <xsd:element ref=\"mixing-modes\" minOccurs=\"0\" />\n     <xsd:element ref=\"supported-tones\"
    minOccurs=\"0\" />\n     <xsd:element ref=\"file-transfer-modes\" minOccurs=\"0\"
    />\n     <xsd:element ref=\"asr-tts-support\" minOccurs=\"0\" />\n     <xsd:element
    ref=\"vxml-support\" minOccurs=\"0\" />\n     <xsd:element ref=\"media-server-location\"
    minOccurs=\"0\" />\n     <xsd:element ref=\"label\" minOccurs=\"0\" />\n     <xsd:element
    ref=\"media-server-address\" minOccurs=\"0\" />\n     <xsd:element ref=\"encryption\"
    minOccurs=\"0\" />\n     <xsd:any namespace=\"##other\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n    </xsd:sequence>\n     <xsd:attribute name=\"id\"
    type=\"subscriptionid.datatype\"\n      use=\"required\" />\n     <xsd:attribute
    name=\"seqnumber\" type=\"xsd:nonNegativeInteger\"\n      use=\"required\" />\n
    \    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n   </xsd:extension>\n
    \ </xsd:complexContent>\n </xsd:complexType>\n <xsd:element name=\"mrbnotification\"
    type=\"mrbnotificationType\" />\n"
  - "<!--  supported-packages -->\n <xsd:complexType name=\"supported-packagesType\">\n
    \ <xsd:complexContent>\n   <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n
    \     <xsd:element ref=\"package\" minOccurs=\"0\"\n        maxOccurs=\"unbounded\"
    />\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n        maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n"
  - "<xsd:element name=\"supported-packages\" type=\"supported-packagesType\"/>\n
    <xsd:complexType name=\"packageType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n
    \       maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n
    \   <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\" />\n    <xsd:anyAttribute
    namespace=\"##other\" processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n
    </xsd:complexType>\n <xsd:element name=\"package\" type=\"packageType\" />\n"
  - "<!--  active-rtp-sessions -->\n <xsd:complexType name=\"active-rtp-sessionsType\">\n
    \ <xsd:complexContent>\n   <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n
    \     <xsd:element ref=\"rtp-codec\" minOccurs=\"0\"\n        maxOccurs=\"unbounded\"
    />\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n        maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n"
  - "<xsd:element name=\"active-rtp-sessions\" type=\"active-rtp-sessionsType\"/>\n
    <xsd:complexType name=\"rtp-codecType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n      <xsd:element name=\"decoding\" type=\"xsd:nonNegativeInteger\"
    />\n      <xsd:element name=\"encoding\" type=\"xsd:nonNegativeInteger\" />\n
    \      <xsd:any namespace=\"##other\" minOccurs=\"0\"\n        maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:attribute name=\"name\"
    type=\"xsd:string\" use=\"required\" />\n    <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n
    <xsd:element name=\"rtp-codec\" type=\"rtp-codecType\" />\n"
  - '<!--  active-mixer-sessions -->

    '
  - "<xsd:complexType name=\"active-mixer-sessionsType\">\n  <xsd:complexContent>\n
    \  <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n      <xsd:element ref=\"active-mix\"
    minOccurs=\"0\"\n        maxOccurs=\"unbounded\" />\n       <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n        maxOccurs=\"unbounded\" processContents=\"lax\" />\n
    \   </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element
    name=\"active-mixer-sessions\"\n  type=\"active-mixer-sessionsType\" />\n"
  - "<xsd:complexType name=\"active-mixType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n      <xsd:element ref=\"rtp-codec\" minOccurs=\"0\"\n
    \       maxOccurs=\"unbounded\" />\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n
    \       maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n
    \   <xsd:attributeGroup ref=\"fw:framework-attributes\" />\n    <xsd:anyAttribute
    namespace=\"##other\" processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n
    </xsd:complexType>\n <xsd:element name=\"active-mix\" type=\"active-mixType\"
    />\n"
  - '<!--  non-active-rtp-sessions -->

    '
  - "<xsd:complexType name=\"non-active-rtp-sessionsType\">\n  <xsd:complexContent>\n
    \  <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n      <xsd:element ref=\"rtp-codec\"
    minOccurs=\"0\"\n        maxOccurs=\"unbounded\" />\n       <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n        maxOccurs=\"unbounded\" processContents=\"lax\" />\n
    \   </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element
    name=\"non-active-rtp-sessions\"\n  type=\"non-active-rtp-sessionsType\" />\n"
  - '<!--  non-active-mixer-sessions -->

    '
  - "<xsd:complexType name=\"non-active-mixer-sessionsType\">\n  <xsd:complexContent>\n
    \  <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n      <xsd:element ref=\"non-active-mix\"
    minOccurs=\"0\"\n        maxOccurs=\"unbounded\" />\n       <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n        maxOccurs=\"unbounded\" processContents=\"lax\" />\n
    \   </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element
    name=\"non-active-mixer-sessions\"\n  type=\"non-active-mixer-sessionsType\" />\n
    <xsd:complexType name=\"non-active-mixType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n      <xsd:element ref=\"rtp-codec\" />\n
    \      <xsd:any namespace=\"##other\" minOccurs=\"0\"\n        maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:attribute name=\"available\"
    type=\"xsd:nonNegativeInteger\"\n      use=\"required\" />\n    <xsd:anyAttribute
    namespace=\"##other\" processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n
    </xsd:complexType>\n <xsd:element name=\"non-active-mix\" type=\"non-active-mixType\"
    />\n"
  - "<!--  media-server-status -->\n <xsd:element name=\"media-server-status\" type=\"msstatus.datatype\"
    />\n"
  - '<!--  supported-codecs -->

    '
  - "<xsd:complexType name=\"supported-codecsType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n       <xsd:element ref=\"supported-codec\"\n
    \        minOccurs=\"0\" maxOccurs=\"unbounded\" />\n       <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n         maxOccurs=\"unbounded\" processContents=\"lax\" />\n
    \   </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element
    name=\"supported-codecs\" type=\"supported-codecsType\" />\n <xsd:complexType
    name=\"supported-codecType\">\n  <xsd:complexContent>\n   <xsd:extension base=\"Tcore\">\n
    \   <xsd:sequence>\n      <xsd:element ref=\"supported-codec-package\"\n         minOccurs=\"0\"
    maxOccurs=\"unbounded\" />\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n
    \       maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n
    \   <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\" />\n    <xsd:anyAttribute
    namespace=\"##other\" processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n
    </xsd:complexType>\n <xsd:element name=\"supported-codec\" type=\"supported-codecType\"
    />\n <xsd:complexType name=\"supported-codec-packageType\">\n  <xsd:complexContent>\n
    \  <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n       <xsd:element name=\"supported-action\"
    type=\"actions.datatype\"\n        minOccurs=\"0\" maxOccurs=\"unbounded\" />\n
    \      <xsd:any namespace=\"##other\" minOccurs=\"0\"\n        maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:attribute name=\"name\"
    type=\"xsd:string\" use=\"required\" />\n    <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n
    <xsd:element name=\"supported-codec-package\"\n  type=\"supported-codec-packageType\"
    />\n"
  - '<!--  application-data -->

    '
  - '<xsd:element name="application-data" type="appdata.datatype" />

    '
  - '<!--  file-formats -->

    '
  - "<xsd:complexType name=\"file-formatsType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n       <xsd:element ref=\"supported-format\"\n
    \        minOccurs=\"0\" maxOccurs=\"unbounded\" />\n       <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n         maxOccurs=\"unbounded\" processContents=\"lax\" />\n
    \   </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element
    name=\"file-formats\" type=\"file-formatsType\" />\n <xsd:complexType name=\"supported-formatType\">\n
    \ <xsd:complexContent>\n   <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n
    \     <xsd:element ref=\"supported-file-package\"\n         minOccurs=\"0\" maxOccurs=\"unbounded\"
    />\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n        maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:attribute name=\"name\"
    type=\"xsd:string\" use=\"required\" />\n    <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n
    <xsd:element name=\"supported-format\" type=\"supported-formatType\" />\n <xsd:element
    name=\"supported-file-package\"\n  type=\"xsd:string\" />\n"
  - '<!--  max-prepared-duration -->

    '
  - "<xsd:complexType name=\"max-prepared-durationType\">\n  <xsd:complexContent>\n
    \  <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n      <xsd:element ref=\"max-time\"
    />\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n        maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n
    <xsd:element name=\"max-prepared-duration\"\n  type=\"max-prepared-durationType\"
    />\n <xsd:complexType name=\"max-timeType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n      <xsd:element name=\"max-time-package\"
    type=\"xsd:string\" />\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n
    \       maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n
    \   <xsd:attribute name=\"max-time-seconds\" type=\"xsd:nonNegativeInteger\"\n
    \    use=\"required\" />\n    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element
    name=\"max-time\" type=\"max-timeType\" />\n"
  - '<!--  dtmf-support -->

    '
  - "<xsd:complexType name=\"dtmf-supportType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n       <xsd:element ref=\"detect\" />\n       <xsd:element
    ref=\"generate\" />\n       <xsd:element ref=\"passthrough\" />\n       <xsd:any
    namespace=\"##other\" minOccurs=\"0\"\n        maxOccurs=\"unbounded\" processContents=\"lax\"
    />\n    </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element
    name=\"dtmf-support\" type=\"dtmf-supportType\" />\n <xsd:complexType name=\"detectType\">\n
    \ <xsd:complexContent>\n   <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n
    \      <xsd:element ref=\"dtmf-type\"\n        minOccurs=\"0\" maxOccurs=\"unbounded\"
    />\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n        maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n
    <xsd:element name=\"detect\" type=\"detectType\" />\n <xsd:complexType name=\"generateType\">\n
    \ <xsd:complexContent>\n   <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n
    \      <xsd:element ref=\"dtmf-type\"\n        minOccurs=\"0\" maxOccurs=\"unbounded\"
    />\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n        maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n
    <xsd:element name=\"generate\" type=\"generateType\" />\n <xsd:complexType name=\"passthroughType\">\n
    \ <xsd:complexContent>\n   <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n
    \      <xsd:element ref=\"dtmf-type\"\n        minOccurs=\"0\" maxOccurs=\"unbounded\"
    />\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n        maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n
    <xsd:element name=\"passthrough\" type=\"passthroughType\" />\n <xsd:complexType
    name=\"dtmf-typeType\">\n  <xsd:complexContent>\n   <xsd:extension base=\"Tcore\">\n
    \   <xsd:sequence>\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n        maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:attribute name=\"name\"
    type=\"dtmf.datatype\" use=\"required\" />\n    <xsd:attribute name=\"package\"
    type=\"xsd:string\" use=\"required\" />\n    <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n
    <xsd:element name=\"dtmf-type\" type=\"dtmf-typeType\" />\n"
  - '<!--  mixing-modes -->

    '
  - "<xsd:complexType name=\"mixing-modesType\">\n <xsd:complexContent>\n  <xsd:extension
    base=\"Tcore\">\n   <xsd:sequence>\n      <xsd:element ref=\"audio-mixing-modes\"\n
    \       minOccurs=\"0\" maxOccurs=\"1\" />\n      <xsd:element ref=\"video-mixing-modes\"\n
    \       minOccurs=\"0\" maxOccurs=\"1\" />\n      <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n        maxOccurs=\"unbounded\" processContents=\"lax\" />\n
    \  </xsd:sequence>\n   <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n  </xsd:extension>\n </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="mixing-modes" type="mixing-modesType" />

    '
  - "<xsd:complexType name=\"audio-mixing-modesType\">\n <xsd:complexContent>\n  <xsd:extension
    base=\"Tcore\">\n   <xsd:sequence>\n     <xsd:element ref=\"audio-mixing-mode\"\n
    \       minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n       maxOccurs=\"unbounded\" processContents=\"lax\" />\n   </xsd:sequence>\n
    \  <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n  </xsd:extension>\n
    </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="audio-mixing-modes" type="audio-mixing-modesType" />

    '
  - "<xsd:complexType name=\"audio-mixing-modeType\" mixed=\"true\">\n <xsd:sequence>\n
    \   <xsd:any namespace=\"##other\" minOccurs=\"0\"\n     maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n </xsd:sequence>\n <xsd:attribute name=\"package\"
    type=\"xsd:string\" use=\"required\" />\n <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="audio-mixing-mode" type="audio-mixing-modeType" />

    '
  - "<xsd:complexType name=\"video-mixing-modesType\">\n <xsd:complexContent>\n  <xsd:extension
    base=\"Tcore\">\n   <xsd:sequence>\n     <xsd:element ref=\"video-mixing-mode\"\n
    \       minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n       maxOccurs=\"unbounded\" processContents=\"lax\" />\n   </xsd:sequence>\n
    \  <xsd:attribute name=\"vas\" type=\"boolean.datatype\"\n     default=\"false\"
    />\n   <xsd:attribute name=\"activespeakermix\" type=\"boolean.datatype\"\n     default=\"false\"
    />\n   <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n  </xsd:extension>\n
    </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="video-mixing-modes" type="video-mixing-modesType" />

    '
  - "<xsd:complexType name=\"video-mixing-modeType\" mixed=\"true\">\n <xsd:sequence>\n
    \   <xsd:any namespace=\"##other\" minOccurs=\"0\"\n     maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n </xsd:sequence>\n <xsd:attribute name=\"package\"
    type=\"xsd:string\" use=\"required\" />\n <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="video-mixing-mode" type="video-mixing-modeType" />

    '
  - '<!--  supported-tones -->

    '
  - "<xsd:complexType name=\"supported-tonesType\">\n <xsd:complexContent>\n  <xsd:extension
    base=\"Tcore\">\n   <xsd:sequence>\n      <xsd:element ref=\"supported-country-codes\"\n
    \       minOccurs=\"0\" maxOccurs=\"1\" />\n      <xsd:element ref=\"supported-h248-codes\"\n
    \       minOccurs=\"0\" maxOccurs=\"1\" />\n      <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n        maxOccurs=\"unbounded\" processContents=\"lax\" />\n
    \  </xsd:sequence>\n   <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n  </xsd:extension>\n </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="supported-tones" type="supported-tonesType" />

    '
  - "<xsd:complexType name=\"supported-country-codesType\">\n <xsd:complexContent>\n
    \ <xsd:extension base=\"Tcore\">\n   <xsd:sequence>\n     <xsd:element ref=\"country-code\"\n
    \       minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n       maxOccurs=\"unbounded\" processContents=\"lax\" />\n   </xsd:sequence>\n
    \  <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n  </xsd:extension>\n
    </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - "<xsd:element name=\"supported-country-codes\"\n  type=\"supported-country-codesType\"
    />\n"
  - "<xsd:complexType name=\"country-codeType\" mixed=\"true\">\n <xsd:sequence>\n
    \   <xsd:any namespace=\"##other\" minOccurs=\"0\"\n     maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n </xsd:sequence>\n <xsd:attribute name=\"package\"
    type=\"xsd:string\" use=\"required\" />\n <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="country-code" type="country-codeType" />

    '
  - "<xsd:complexType name=\"supported-h248-codesType\">\n <xsd:complexContent>\n
    \ <xsd:extension base=\"Tcore\">\n   <xsd:sequence>\n     <xsd:element ref=\"h248-code\"\n
    \       minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n       maxOccurs=\"unbounded\" processContents=\"lax\" />\n   </xsd:sequence>\n
    \  <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n  </xsd:extension>\n
    </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - "<xsd:element name=\"supported-h248-codes\"\n  type=\"supported-h248-codesType\"
    />\n"
  - "<xsd:complexType name=\"h248-codeType\" mixed=\"true\">\n <xsd:sequence>\n    <xsd:any
    namespace=\"##other\" minOccurs=\"0\"\n     maxOccurs=\"unbounded\" processContents=\"lax\"
    />\n </xsd:sequence>\n <xsd:attribute name=\"package\" type=\"xsd:string\" use=\"required\"
    />\n <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="h248-code" type="h248-codeType" />

    '
  - "<!--  file-transfer-modes -->\n <xsd:complexType name=\"file-transfer-modesType\">\n
    \ <xsd:complexContent>\n   <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n
    \     <xsd:element ref=\"file-transfer-mode\"\n        minOccurs=\"0\" maxOccurs=\"unbounded\"
    />\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n        maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n
    <xsd:element name=\"file-transfer-modes\"\n              type=\"file-transfer-modesType\"
    />\n <xsd:complexType name=\"file-transfer-modeType\">\n  <xsd:complexContent>\n
    \  <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n       <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n        maxOccurs=\"unbounded\" processContents=\"lax\" />\n
    \   </xsd:sequence>\n    <xsd:attribute name=\"name\" type=\"transfermode.datatype\"\n
    \    use=\"required\" />\n    <xsd:attribute name=\"package\" type=\"xsd:string\"
    use=\"required\" />\n    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element
    name=\"file-transfer-mode\" type=\"file-transfer-modeType\" />\n"
  - '<!--  asr-tts-support -->

    '
  - "<xsd:complexType name=\"asr-tts-supportType\">\n <xsd:complexContent>\n  <xsd:extension
    base=\"Tcore\">\n   <xsd:sequence>\n      <xsd:element ref=\"asr-support\"\n        minOccurs=\"0\"
    maxOccurs=\"1\" />\n      <xsd:element ref=\"tts-support\"\n        minOccurs=\"0\"
    maxOccurs=\"1\" />\n      <xsd:any namespace=\"##other\" minOccurs=\"0\"\n        maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n   </xsd:sequence>\n   <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n  </xsd:extension>\n </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="asr-tts-support" type="asr-tts-supportType" />

    '
  - "<xsd:complexType name=\"asr-supportType\">\n <xsd:complexContent>\n  <xsd:extension
    base=\"Tcore\">\n   <xsd:sequence>\n     <xsd:element ref=\"language\"\n        minOccurs=\"0\"
    maxOccurs=\"unbounded\" />\n      <xsd:any namespace=\"##other\" minOccurs=\"0\"\n
    \      maxOccurs=\"unbounded\" processContents=\"lax\" />\n   </xsd:sequence>\n
    \  <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n  </xsd:extension>\n
    </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="asr-support" type="asr-supportType" />

    '
  - "<xsd:complexType name=\"tts-supportType\">\n <xsd:complexContent>\n  <xsd:extension
    base=\"Tcore\">\n   <xsd:sequence>\n     <xsd:element ref=\"language\"\n        minOccurs=\"0\"
    maxOccurs=\"unbounded\" />\n      <xsd:any namespace=\"##other\" minOccurs=\"0\"\n
    \      maxOccurs=\"unbounded\" processContents=\"lax\" />\n   </xsd:sequence>\n
    \  <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n  </xsd:extension>\n
    </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="tts-support" type="tts-supportType" />

    '
  - "<xsd:complexType name=\"languageType\">\n <xsd:complexContent>\n  <xsd:extension
    base=\"Tcore\">\n   <xsd:sequence>\n      <xsd:any namespace=\"##other\" minOccurs=\"0\"\n
    \      maxOccurs=\"unbounded\" processContents=\"lax\" />\n   </xsd:sequence>\n
    \  <xsd:attribute ref=\"xml:lang\" />\n   <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n  </xsd:extension>\n </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="language" type="languageType" />

    '
  - '<!--  media-server-location -->

    '
  - "<xsd:complexType name=\"media-server-locationType\">\n  <xsd:complexContent>\n
    \  <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n       <xsd:element name=\"civicAddress\"
    type=\"ca:civicAddress\"\n                        minOccurs=\"1\" maxOccurs=\"1\"
    />\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n        maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n"
  - "<xsd:element name=\"media-server-location\"\n  type=\"media-server-locationType\"
    />\n"
  - "<!--  vxml-support -->\n <xsd:complexType name=\"vxml-supportType\">\n  <xsd:complexContent>\n
    \  <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n      <xsd:element ref=\"vxml-mode\"\n
    \       minOccurs=\"0\" maxOccurs=\"unbounded\" />\n       <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n        maxOccurs=\"unbounded\" processContents=\"lax\" />\n
    \   </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element
    name=\"vxml-support\" type=\"vxml-supportType\" />\n <xsd:complexType name=\"vxml-modeType\">\n
    \ <xsd:complexContent>\n   <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n
    \      <xsd:any namespace=\"##other\" minOccurs=\"0\"\n        maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:attribute name=\"package\"
    type=\"xsd:string\" use=\"required\" />\n    <xsd:attribute name=\"support\" type=\"vxml.datatype\"
    use=\"required\" />\n    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element
    name=\"vxml-mode\" type=\"vxml-modeType\" />\n"
  - "<!--  label -->\n <xsd:element name=\"label\" type=\"label.datatype\" />\n"
  - "<!-- media-server-address -->\n <xsd:element name=\"media-server-address\" type=\"xsd:anyURI\"
    />\n"
  - "<!--  encryption -->\n <xsd:complexType name=\"encryptionType\">\n  <xsd:complexContent>\n
    \  <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n       <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n        maxOccurs=\"unbounded\" processContents=\"lax\" />\n
    \   </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element
    name=\"encryption\" type=\"encryptionType\" />\n"
  - "<!--\n  ####################################################\n  DATATYPES\n  ####################################################\n
    -->\n <xsd:simpleType name=\"version.datatype\">\n  <xsd:restriction base=\"xsd:NMTOKEN\">\n
    \  <xsd:enumeration value=\"1.0\" />\n  </xsd:restriction>\n </xsd:simpleType>\n"
  - "<xsd:simpleType name=\"id.datatype\">\n  <xsd:restriction base=\"xsd:NMTOKEN\"
    />\n </xsd:simpleType>\n <xsd:simpleType name=\"status.datatype\">\n  <xsd:restriction
    base=\"xsd:positiveInteger\">\n   <xsd:pattern value=\"[0-9][0-9][0-9]\" />\n
    \ </xsd:restriction>\n </xsd:simpleType>\n <xsd:simpleType name=\"msstatus.datatype\">\n
    \ <xsd:restriction base=\"xsd:NMTOKEN\">\n   <xsd:enumeration value=\"active\"
    />\n   <xsd:enumeration value=\"deactivated\" />\n   <xsd:enumeration value=\"unavailable\"
    />\n  </xsd:restriction>\n </xsd:simpleType>\n <xsd:simpleType name=\"action.datatype\">\n
    \ <xsd:restriction base=\"xsd:NMTOKEN\">\n   <xsd:enumeration value=\"create\"
    />\n   <xsd:enumeration value=\"update\" />\n   <xsd:enumeration value=\"remove\"
    />\n  </xsd:restriction>\n </xsd:simpleType>\n <xsd:simpleType name=\"actions.datatype\">\n
    \ <xsd:restriction base=\"xsd:NMTOKEN\">\n   <xsd:enumeration value=\"encoding\"
    />\n   <xsd:enumeration value=\"decoding\" />\n   <xsd:enumeration value=\"passthrough\"
    />\n  </xsd:restriction>\n </xsd:simpleType>\n <xsd:simpleType name=\"appdata.datatype\">\n
    \ <xsd:restriction base=\"xsd:string\" />\n </xsd:simpleType>\n <xsd:simpleType
    name=\"dtmf.datatype\">\n  <xsd:restriction base=\"xsd:NMTOKEN\"/>\n </xsd:simpleType>\n
    <xsd:simpleType name=\"transfermode.datatype\">\n  <xsd:restriction base=\"xsd:NMTOKEN\"
    />\n </xsd:simpleType>\n <xsd:simpleType name=\"boolean.datatype\">\n  <xsd:restriction
    base=\"xsd:NMTOKEN\">\n   <xsd:enumeration value=\"true\" />\n   <xsd:enumeration
    value=\"false\" />\n  </xsd:restriction>\n </xsd:simpleType>\n <xsd:simpleType
    name=\"vxml.datatype\">\n  <xsd:restriction base=\"xsd:NMTOKEN\"/>\n </xsd:simpleType>\n
    <xsd:simpleType name=\"label.datatype\">\n  <xsd:restriction base=\"xsd:NMTOKEN\"
    />\n </xsd:simpleType>\n <xsd:simpleType name=\"subscriptionid.datatype\">\n  <xsd:restriction
    base=\"xsd:NMTOKEN\" />\n </xsd:simpleType>\n"
  - '</xsd:schema>

    '
  title: 10.  Media Service Resource Publisher Interface XML Schema
- contents:
  - "11.  Media Service Resource Consumer Interface XML Schema\n   This section gives
    the XML Schema Definition\n   [W3C.REC-xmlschema-1-20041028] [W3C.REC-xmlschema-2-20041028]
    of the\n   \"application/mrb-consumer+xml\" format.\n"
  - '<?xml version="1.0" encoding="UTF-8"?>

    '
  - "<xsd:schema targetNamespace=\"urn:ietf:params:xml:ns:mrb-consumer\"\n elementFormDefault=\"qualified\"
    blockDefault=\"#all\"\n xmlns=\"urn:ietf:params:xml:ns:mrb-consumer\"\n xmlns:ca=\"urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr\"\n
    xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\">\n <xsd:annotation>\n  <xsd:documentation>\n
    \  IETF MediaCtrl MRB 1.0\n   This is the schema of the IETF MediaCtrl MRB Consumer
    interface.\n   The schema namespace is urn:ietf:params:xml:ns:mrb-consumer\n  </xsd:documentation>\n
    </xsd:annotation>\n <!--\n  #############################################################\n
    \ SCHEMA IMPORTS\n  #############################################################\n
    -->\n <xsd:import namespace=\"http://www.w3.org/XML/1998/namespace\"\n  schemaLocation=\"http://www.w3.org/2001/xml.xsd\">\n
    \ <xsd:annotation>\n   <xsd:documentation>\n    This import brings in the XML
    attributes for\n    xml:base, xml:lang, etc.\n   </xsd:documentation>\n  </xsd:annotation>\n
    </xsd:import>\n <xsd:import\n  namespace=\"urn:ietf:params:xml:ns:pidf:geopriv10:civicAddr\"\n
    \ schemaLocation=\"civicAddress.xsd\">\n  <xsd:annotation>\n   <xsd:documentation>\n
    \   This import brings in the civicAddress specification\n    from RFC 5139.\n
    \  </xsd:documentation>\n  </xsd:annotation>\n </xsd:import>\n"
  - "<!--\n  #####################################################\n  Extensible core
    type\n  #####################################################\n -->\n <xsd:complexType
    name=\"Tcore\">\n  <xsd:annotation>\n   <xsd:documentation>\n    This type is
    extended by other (non-mixed) component types to\n    allow attributes from other
    namespaces.\n   </xsd:documentation>\n  </xsd:annotation>\n  <xsd:sequence/>\n
    \ <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n </xsd:complexType>\n"
  - "<!--\n  #####################################################\n  TOP-LEVEL ELEMENT:
    mrbconsumer\n  #####################################################\n -->\n"
  - "<xsd:complexType name=\"mrbconsumerType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n     <xsd:choice>\n      <xsd:element ref=\"mediaResourceRequest\"
    />\n      <xsd:element ref=\"mediaResourceResponse\" />\n      <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n       maxOccurs=\"unbounded\" processContents=\"lax\" />\n     </xsd:choice>\n
    \   </xsd:sequence>\n    <xsd:attribute name=\"version\" type=\"version.datatype\"\n
    \     use=\"required\" />\n    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n   </xsd:extension>\n  </xsd:complexContent>\n"
  - "</xsd:complexType>\n <xsd:element name=\"mrbconsumer\" type=\"mrbconsumerType\"
    />\n"
  - "<!--\n  #####################################################\n  mediaResourceRequest
    TYPE\n  #####################################################\n -->\n"
  - "<!--  mediaResourceRequest -->\n <xsd:complexType name=\"mediaResourceRequestType\">\n
    \ <xsd:complexContent>\n   <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n
    \     <xsd:element ref=\"generalInfo\" minOccurs=\"0\" />\n      <xsd:element
    ref=\"ivrInfo\" minOccurs=\"0\" />\n      <xsd:element ref=\"mixerInfo\" minOccurs=\"0\"
    />\n     <xsd:any namespace=\"##other\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:attribute name=\"id\"
    type=\"xsd:string\"\n      use=\"required\" />\n    <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n
    <xsd:element name=\"mediaResourceRequest\"\n         type=\"mediaResourceRequestType\"
    />\n"
  - "<!--\n  #####################################################\n  generalInfo
    TYPE\n  #####################################################\n"
  - '-->

    '
  - '<!--  generalInfo -->

    '
  - "<xsd:complexType name=\"generalInfoType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n      <xsd:element ref=\"session-info\" minOccurs=\"0\"
    />\n      <xsd:element ref=\"packages\" minOccurs=\"0\" />\n      <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n       maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n
    \   <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n   </xsd:extension>\n
    \ </xsd:complexContent>\n </xsd:complexType>\n"
  - '<xsd:element name="generalInfo" type="generalInfoType" />

    '
  - '<!--  session-info -->

    '
  - "<xsd:complexType name=\"session-infoType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n       <xsd:element name=\"session-id\" type=\"id.datatype\"/>\n
    \      <xsd:element name=\"seq\" type=\"xsd:nonNegativeInteger\"/>\n       <xsd:element
    name=\"action\" type=\"action.datatype\"/>\n       <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n        maxOccurs=\"unbounded\" processContents=\"lax\" />\n
    \   </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n"
  - '<xsd:element name="session-info" type="session-infoType" />

    '
  - '<!--  packages -->

    '
  - "<xsd:complexType name=\"packagesType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n      <xsd:element name=\"package\" type=\"xsd:string\"
    minOccurs=\"0\"\n        maxOccurs=\"unbounded\" />\n      <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n        maxOccurs=\"unbounded\" processContents=\"lax\" />\n
    \   </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n   </xsd:extension>\n  </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="packages" type="packagesType"/>

    '
  - "<!--\n  #####################################################\n  ivrInfo TYPE\n
    \ #####################################################\n"
  - '-->

    '
  - '<!--  ivrInfo -->

    '
  - "<xsd:complexType name=\"ivrInfoType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n      <xsd:element ref=\"ivr-sessions\" minOccurs=\"0\"
    />\n      <xsd:element ref=\"file-formats\" minOccurs=\"0\" />\n      <xsd:element
    ref=\"dtmf-type\" minOccurs=\"0\" />\n      <xsd:element ref=\"tones\" minOccurs=\"0\"
    />\n      <xsd:element ref=\"asr-tts\" minOccurs=\"0\" />\n      <xsd:element
    ref=\"vxml\" minOccurs=\"0\" />\n      <xsd:element ref=\"location\" minOccurs=\"0\"
    />\n      <xsd:element ref=\"encryption\" minOccurs=\"0\" />\n      <xsd:element
    ref=\"application-data\" minOccurs=\"0\" />\n      <xsd:element ref=\"max-prepared-duration\"
    minOccurs=\"0\" />\n      <xsd:element ref=\"file-transfer-modes\" minOccurs=\"0\"
    />\n      <xsd:any namespace=\"##other\" minOccurs=\"0\"\n      maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n"
  - '<xsd:element name="ivrInfo" type="ivrInfoType" />

    '
  - "<!--\n  #####################################################\n  mixerInfo TYPE\n
    \ #####################################################\n"
  - '-->

    '
  - '<!--  mixerInfo -->

    '
  - "<xsd:complexType name=\"mixerInfoType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n      <xsd:element ref=\"mixers\" minOccurs=\"0\"/>\n
    \     <xsd:element ref=\"file-formats\" minOccurs=\"0\"/>\n      <xsd:element
    ref=\"dtmf-type\" minOccurs=\"0\"/>\n      <xsd:element ref=\"tones\" minOccurs=\"0\"/>\n
    \     <xsd:element ref=\"mixing-modes\" minOccurs=\"0\"/>\n      <xsd:element
    ref=\"application-data\" minOccurs=\"0\"/>\n      <xsd:element ref=\"location\"
    minOccurs=\"0\"/>\n      <xsd:element ref=\"encryption\" minOccurs=\"0\"/>\n      <xsd:any
    namespace=\"##other\" minOccurs=\"0\"\n       maxOccurs=\"unbounded\" processContents=\"lax\"
    />\n    </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n"
  - '<xsd:element name="mixerInfo" type="mixerInfoType" />

    '
  - "<!--\n  #####################################################\n  mediaResourceResponse
    TYPE\n  #####################################################\n -->\n"
  - "<!--  mediaResourceResponse -->\n <xsd:complexType name=\"mediaResourceResponseType\">\n
    \ <xsd:complexContent>\n   <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n
    \      <xsd:element ref=\"response-session-info\" minOccurs=\"0\" />\n       <xsd:any
    namespace=\"##other\" minOccurs=\"0\"\n          maxOccurs=\"unbounded\" processContents=\"lax\"
    />\n    </xsd:sequence>\n    <xsd:attribute name=\"id\" type=\"xsd:string\"\n
    \    use=\"required\" />\n    <xsd:attribute name=\"status\" type=\"status.datatype\"\n
    \    use=\"required\" />\n    <xsd:attribute name=\"reason\" type=\"xsd:string\"
    />\n    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n   </xsd:extension>\n
    \ </xsd:complexContent>\n </xsd:complexType>\n <xsd:element name=\"mediaResourceResponse\"\n
    \        type=\"mediaResourceResponseType\" />\n"
  - "<!--\n  ####################################################\n  ELEMENTS\n  ####################################################\n
    -->\n"
  - '<!--  response-session-info -->

    '
  - "<xsd:complexType name=\"response-session-infoType\">\n  <xsd:complexContent>\n
    \  <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n       <xsd:element name=\"session-id\"
    type=\"id.datatype\"/>\n       <xsd:element name=\"seq\" type=\"xsd:nonNegativeInteger\"/>\n
    \      <xsd:element name=\"expires\" type=\"xsd:nonNegativeInteger\"/>\n       <xsd:element
    ref=\"media-server-address\"\n          minOccurs=\"0\" maxOccurs=\"unbounded\"
    />\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n         maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n"
  - "<xsd:element name=\"response-session-info\"\n   type=\"response-session-infoType\"
    />\n"
  - '<!-- media-server-address -->

    '
  - "<xsd:complexType name=\"media-server-addressTYPE\">\n  <xsd:complexContent>\n
    \  <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n     <xsd:element name=\"connection-id\"
    type=\"xsd:string\"\n         minOccurs=\"0\" maxOccurs=\"unbounded\" />\n     <xsd:element
    ref=\"ivr-sessions\" minOccurs=\"0\"/>\n     <xsd:element ref=\"mixers\" minOccurs=\"0\"/>\n
    \    <xsd:any namespace=\"##other\" minOccurs=\"0\"\n         maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:attribute name=\"uri\"
    type=\"xsd:anyURI\" use=\"required\" />\n    <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - "<xsd:element name=\"media-server-address\"\n    type=\"media-server-addressTYPE\"
    />\n"
  - '<!--  ivr-sessions -->

    '
  - "<xsd:complexType name=\"ivr-sessionsType\">\n <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n      <xsd:element ref=\"rtp-codec\" minOccurs=\"0\"\n
    \       maxOccurs=\"unbounded\" />\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n
    \       maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n
    \   <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n   </xsd:extension>\n
    \ </xsd:complexContent>\n </xsd:complexType>\n"
  - '<xsd:element name="ivr-sessions" type="ivr-sessionsType" />

    '
  - "<xsd:complexType name=\"rtp-codecType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n      <xsd:element name=\"decoding\" type=\"xsd:nonNegativeInteger\"
    />\n      <xsd:element name=\"encoding\" type=\"xsd:nonNegativeInteger\" />\n
    \      <xsd:any namespace=\"##other\" minOccurs=\"0\"\n        maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:attribute name=\"name\"
    type=\"xsd:string\" use=\"required\" />\n    <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n"
  - '<xsd:element name="rtp-codec" type="rtp-codecType" />

    '
  - '<!-- file-formats -->

    '
  - "<xsd:complexType name=\"file-formatsType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n       <xsd:element ref=\"required-format\"\n
    \        minOccurs=\"0\" maxOccurs=\"unbounded\" />\n       <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n         maxOccurs=\"unbounded\" processContents=\"lax\" />\n
    \   </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n   </xsd:extension>\n  </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="file-formats" type="file-formatsType" />

    '
  - "<xsd:complexType name=\"required-formatType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n      <xsd:element ref=\"required-file-package\"\n
    \        minOccurs=\"0\" maxOccurs=\"unbounded\" />\n       <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n        maxOccurs=\"unbounded\" processContents=\"lax\" />\n
    \   </xsd:sequence>\n    <xsd:attribute name=\"name\" type=\"xsd:string\" use=\"required\"
    />\n    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n   </xsd:extension>\n
    \ </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="required-format" type="required-formatType" />

    '
  - "<xsd:complexType name=\"required-file-packageType\">\n  <xsd:complexContent>\n
    \  <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n       <xsd:element name=\"required-file-package-name\"
    type=\"xsd:string\"\n        minOccurs=\"0\" maxOccurs=\"unbounded\" />\n       <xsd:any
    namespace=\"##other\" minOccurs=\"0\"\n        maxOccurs=\"unbounded\" processContents=\"lax\"
    />\n    </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n   </xsd:extension>\n  </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - "<xsd:element name=\"required-file-package\"\n  type=\"required-file-packageType\"
    />\n"
  - '<!--  dtmf-type -->

    '
  - "<xsd:complexType name=\"dtmfType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n       <xsd:element ref=\"detect\" />\n       <xsd:element
    ref=\"generate\" />\n       <xsd:element ref=\"passthrough\" />\n       <xsd:any
    namespace=\"##other\" minOccurs=\"0\"\n        maxOccurs=\"unbounded\" processContents=\"lax\"
    />\n    </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n   </xsd:extension>\n  </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="dtmf" type="dtmfType" />

    '
  - "<xsd:complexType name=\"detectType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n       <xsd:element ref=\"dtmf-type\"\n        minOccurs=\"0\"
    maxOccurs=\"unbounded\" />\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n
    \       maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n
    \   <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n   </xsd:extension>\n
    \ </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="detect" type="detectType" />

    '
  - "<xsd:complexType name=\"generateType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n       <xsd:element ref=\"dtmf-type\"\n        minOccurs=\"0\"
    maxOccurs=\"unbounded\" />\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n
    \       maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n
    \   <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n   </xsd:extension>\n
    \ </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="generate" type="generateType" />

    '
  - "<xsd:complexType name=\"passthroughType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n       <xsd:element ref=\"dtmf-type\"\n        minOccurs=\"0\"
    maxOccurs=\"unbounded\" />\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n
    \       maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n
    \   <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n   </xsd:extension>\n
    \ </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="passthrough" type="passthroughType" />

    '
  - "<xsd:complexType name=\"dtmf-typeType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n
    \       maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n
    \   <xsd:attribute name=\"name\" type=\"dtmf.datatype\" use=\"required\" />\n
    \   <xsd:attribute name=\"package\" type=\"xsd:string\" use=\"required\" />\n
    \   <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n   </xsd:extension>\n
    \ </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="dtmf-type" type="dtmf-typeType" />

    '
  - '<!--  tones -->

    '
  - "<xsd:complexType name=\"required-tonesType\">\n <xsd:complexContent>\n  <xsd:extension
    base=\"Tcore\">\n   <xsd:sequence>\n      <xsd:element ref=\"country-codes\"\n
    \       minOccurs=\"0\" maxOccurs=\"1\" />\n      <xsd:element ref=\"h248-codes\"\n
    \       minOccurs=\"0\" maxOccurs=\"1\" />\n      <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n        maxOccurs=\"unbounded\" processContents=\"lax\" />\n
    \  </xsd:sequence>\n   <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n  </xsd:extension>\n </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="tones" type="required-tonesType" />

    '
  - "<xsd:complexType name=\"required-country-codesType\">\n <xsd:complexContent>\n
    \ <xsd:extension base=\"Tcore\">\n   <xsd:sequence>\n     <xsd:element ref=\"country-code\"\n
    \       minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n       maxOccurs=\"unbounded\" processContents=\"lax\" />\n   </xsd:sequence>\n
    \  <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n  </xsd:extension>\n
    </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - "<xsd:element name=\"country-codes\"\n   type=\"required-country-codesType\" />\n"
  - "<xsd:complexType name=\"country-codeType\" mixed=\"true\">\n <xsd:sequence>\n
    \   <xsd:any namespace=\"##other\" minOccurs=\"0\"\n     maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n </xsd:sequence>\n <xsd:attribute name=\"package\"
    type=\"xsd:string\" use=\"required\" />\n <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="country-code" type="country-codeType" />

    '
  - "<xsd:complexType name=\"required-h248-codesType\">\n <xsd:complexContent>\n  <xsd:extension
    base=\"Tcore\">\n   <xsd:sequence>\n     <xsd:element ref=\"h248-code\"\n        minOccurs=\"0\"
    maxOccurs=\"unbounded\" />\n      <xsd:any namespace=\"##other\" minOccurs=\"0\"\n
    \      maxOccurs=\"unbounded\" processContents=\"lax\" />\n   </xsd:sequence>\n
    \  <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n  </xsd:extension>\n
    </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - "<xsd:element name=\"h248-codes\"\n   type=\"required-h248-codesType\" />\n"
  - "<xsd:complexType name=\"h248-codeType\" mixed=\"true\">\n <xsd:sequence>\n    <xsd:any
    namespace=\"##other\" minOccurs=\"0\"\n     maxOccurs=\"unbounded\" processContents=\"lax\"
    />\n </xsd:sequence>\n <xsd:attribute name=\"package\" type=\"xsd:string\" use=\"required\"
    />\n <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="h248-code" type="h248-codeType" />

    '
  - '<!--  asr-tts -->

    '
  - "<xsd:complexType name=\"asr-ttsType\">\n <xsd:complexContent>\n  <xsd:extension
    base=\"Tcore\">\n   <xsd:sequence>\n      <xsd:element ref=\"asr-support\"\n        minOccurs=\"0\"
    maxOccurs=\"1\" />\n      <xsd:element ref=\"tts-support\"\n        minOccurs=\"0\"
    maxOccurs=\"1\" />\n      <xsd:any namespace=\"##other\" minOccurs=\"0\"\n        maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n   </xsd:sequence>\n   <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n  </xsd:extension>\n </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="asr-tts" type="asr-ttsType" />

    '
  - "<xsd:complexType name=\"asr-supportType\">\n <xsd:complexContent>\n  <xsd:extension
    base=\"Tcore\">\n   <xsd:sequence>\n     <xsd:element ref=\"language\"\n        minOccurs=\"0\"
    maxOccurs=\"unbounded\" />\n      <xsd:any namespace=\"##other\" minOccurs=\"0\"\n
    \      maxOccurs=\"unbounded\" processContents=\"lax\" />\n   </xsd:sequence>\n
    \  <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n  </xsd:extension>\n
    </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="asr-support" type="asr-supportType" />

    '
  - "<xsd:complexType name=\"tts-supportType\">\n <xsd:complexContent>\n  <xsd:extension
    base=\"Tcore\">\n   <xsd:sequence>\n     <xsd:element ref=\"language\"\n        minOccurs=\"0\"
    maxOccurs=\"unbounded\" />\n      <xsd:any namespace=\"##other\" minOccurs=\"0\"\n
    \      maxOccurs=\"unbounded\" processContents=\"lax\" />\n   </xsd:sequence>\n
    \  <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n  </xsd:extension>\n
    </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="tts-support" type="tts-supportType" />

    '
  - "<xsd:complexType name=\"languageType\">\n <xsd:complexContent>\n  <xsd:extension
    base=\"Tcore\">\n   <xsd:sequence>\n      <xsd:any namespace=\"##other\" minOccurs=\"0\"\n
    \      maxOccurs=\"unbounded\" processContents=\"lax\" />\n   </xsd:sequence>\n
    \  <xsd:attribute ref=\"xml:lang\" />\n   <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n  </xsd:extension>\n </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="language" type="languageType" />

    '
  - '<!--  vxml -->

    '
  - "<xsd:complexType name=\"vxmlType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n      <xsd:element ref=\"vxml-mode\"\n        minOccurs=\"0\"
    maxOccurs=\"unbounded\" />\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n
    \       maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n
    \   <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n   </xsd:extension>\n
    \ </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="vxml" type="vxmlType" />

    '
  - "<xsd:complexType name=\"vxml-modeType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n
    \       maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n
    \   <xsd:attribute name=\"package\" type=\"xsd:string\" use=\"required\" />\n
    \   <xsd:attribute name=\"require\" type=\"vxml.datatype\" use=\"required\" />\n
    \   <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n   </xsd:extension>\n
    \ </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="vxml-mode" type="vxml-modeType" />

    '
  - '<!--  location -->

    '
  - "<xsd:complexType name=\"locationType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n       <xsd:element ref=\"ca:civicAddress\"\n
    \                       minOccurs=\"1\" maxOccurs=\"1\" />\n       <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n        maxOccurs=\"unbounded\" processContents=\"lax\" />\n
    \   </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n"
  - '<xsd:element name="location" type="locationType" />

    '
  - "<!--  encryption -->\n <xsd:complexType name=\"encryptionType\">\n  <xsd:complexContent>\n
    \  <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n       <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n        maxOccurs=\"unbounded\" processContents=\"lax\" />\n
    \   </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n   </xsd:extension>\n  </xsd:complexContent>\n </xsd:complexType>\n <xsd:element
    name=\"encryption\" type=\"encryptionType\" />\n"
  - '<!--  application-data -->

    '
  - '<xsd:element name="application-data" type="appdata.datatype" />

    '
  - '<!--  max-prepared-duration -->

    '
  - "<xsd:complexType name=\"max-prepared-durationType\">\n  <xsd:complexContent>\n
    \  <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n      <xsd:element ref=\"max-time\"
    />\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n        maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n    </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n   </xsd:extension>\n  </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - "<xsd:element name=\"max-prepared-duration\"\n  type=\"max-prepared-durationType\"
    />\n"
  - "<xsd:complexType name=\"max-timeType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n      <xsd:element name=\"max-time-package\"
    type=\"xsd:string\" />\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n
    \       maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n
    \   <xsd:attribute name=\"max-time-seconds\" type=\"xsd:nonNegativeInteger\"\n
    \    use=\"required\" />\n    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n   </xsd:extension>\n  </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="max-time" type="max-timeType" />

    '
  - '<!--  file-transfer-modes -->

    '
  - "<xsd:complexType name=\"file-transfer-modesType\">\n  <xsd:complexContent>\n
    \  <xsd:extension base=\"Tcore\">\n    <xsd:sequence>\n      <xsd:element ref=\"file-transfer-mode\"\n
    \       minOccurs=\"0\" maxOccurs=\"unbounded\" />\n       <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n        maxOccurs=\"unbounded\" processContents=\"lax\" />\n
    \   </xsd:sequence>\n    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n   </xsd:extension>\n  </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - "<xsd:element name=\"file-transfer-modes\"\n             type=\"file-transfer-modesType\"
    />\n"
  - "<xsd:complexType name=\"file-transfer-modeType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n
    \       maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n
    \   <xsd:attribute name=\"name\" type=\"transfermode.datatype\"\n     use=\"required\"
    />\n    <xsd:attribute name=\"package\" type=\"xsd:string\" use=\"required\" />\n
    \   <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n   </xsd:extension>\n
    \ </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="file-transfer-mode" type="file-transfer-modeType" />

    '
  - '<!--  mixers -->

    '
  - "<xsd:complexType name=\"mixerssessionsType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n      <xsd:element ref=\"mix\" minOccurs=\"0\"\n
    \       maxOccurs=\"unbounded\" />\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n
    \       maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n
    \   <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n   </xsd:extension>\n
    \ </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="mixers" type="mixerssessionsType" />

    '
  - "<xsd:complexType name=\"mixType\">\n  <xsd:complexContent>\n   <xsd:extension
    base=\"Tcore\">\n    <xsd:sequence>\n      <xsd:element ref=\"rtp-codec\" minOccurs=\"0\"\n
    \       maxOccurs=\"unbounded\" />\n       <xsd:any namespace=\"##other\" minOccurs=\"0\"\n
    \       maxOccurs=\"unbounded\" processContents=\"lax\" />\n    </xsd:sequence>\n
    \   <xsd:attribute name=\"users\" type=\"xsd:nonNegativeInteger\"\n     use=\"required\"
    />\n    <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n   </xsd:extension>\n
    \ </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="mix" type="mixType" />

    '
  - '<!--  mixing-modes -->

    '
  - "<xsd:complexType name=\"mixing-modesType\">\n <xsd:complexContent>\n  <xsd:extension
    base=\"Tcore\">\n   <xsd:sequence>\n      <xsd:element ref=\"audio-mixing-modes\"\n
    \       minOccurs=\"0\" maxOccurs=\"1\" />\n      <xsd:element ref=\"video-mixing-modes\"\n
    \       minOccurs=\"0\" maxOccurs=\"1\" />\n      <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n        maxOccurs=\"unbounded\" processContents=\"lax\" />\n
    \  </xsd:sequence>\n   <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\"
    />\n  </xsd:extension>\n </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="mixing-modes" type="mixing-modesType" />

    '
  - "<xsd:complexType name=\"audio-mixing-modesType\">\n <xsd:complexContent>\n  <xsd:extension
    base=\"Tcore\">\n   <xsd:sequence>\n     <xsd:element ref=\"audio-mixing-mode\"\n
    \       minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n       maxOccurs=\"unbounded\" processContents=\"lax\" />\n   </xsd:sequence>\n
    \  <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n  </xsd:extension>\n
    </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="audio-mixing-modes" type="audio-mixing-modesType" />

    '
  - "<xsd:complexType name=\"audio-mixing-modeType\" mixed=\"true\">\n <xsd:sequence>\n
    \   <xsd:any namespace=\"##other\" minOccurs=\"0\"\n     maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n </xsd:sequence>\n <xsd:attribute name=\"package\"
    type=\"xsd:string\" use=\"required\" />\n <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="audio-mixing-mode" type="audio-mixing-modeType" />

    '
  - "<xsd:complexType name=\"video-mixing-modesType\">\n <xsd:complexContent>\n  <xsd:extension
    base=\"Tcore\">\n   <xsd:sequence>\n     <xsd:element ref=\"video-mixing-mode\"\n
    \       minOccurs=\"0\" maxOccurs=\"unbounded\" />\n      <xsd:any namespace=\"##other\"
    minOccurs=\"0\"\n       maxOccurs=\"unbounded\" processContents=\"lax\" />\n   </xsd:sequence>\n
    \  <xsd:attribute name=\"vas\" type=\"boolean.datatype\"\n     default=\"false\"
    />\n   <xsd:attribute name=\"activespeakermix\" type=\"boolean.datatype\"\n     default=\"false\"
    />\n   <xsd:anyAttribute namespace=\"##other\" processContents=\"lax\" />\n  </xsd:extension>\n
    </xsd:complexContent>\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="video-mixing-modes" type="video-mixing-modesType" />

    '
  - "<xsd:complexType name=\"video-mixing-modeType\" mixed=\"true\">\n <xsd:sequence>\n
    \   <xsd:any namespace=\"##other\" minOccurs=\"0\"\n     maxOccurs=\"unbounded\"
    processContents=\"lax\" />\n </xsd:sequence>\n <xsd:attribute name=\"package\"
    type=\"xsd:string\" use=\"required\" />\n <xsd:anyAttribute namespace=\"##other\"
    processContents=\"lax\" />\n"
  - '</xsd:complexType>

    '
  - '<xsd:element name="video-mixing-mode" type="video-mixing-modeType" />

    '
  - "<!--\n  ####################################################\n  DATATYPES\n  ####################################################\n
    -->\n"
  - "<xsd:simpleType name=\"version.datatype\">\n  <xsd:restriction base=\"xsd:NMTOKEN\">\n
    \  <xsd:enumeration value=\"1.0\" />\n  </xsd:restriction>\n"
  - '</xsd:simpleType>

    '
  - "<xsd:simpleType name=\"id.datatype\">\n  <xsd:restriction base=\"xsd:NMTOKEN\"
    />\n"
  - '</xsd:simpleType>

    '
  - "<xsd:simpleType name=\"status.datatype\">\n  <xsd:restriction base=\"xsd:positiveInteger\">\n
    \  <xsd:pattern value=\"[0-9][0-9][0-9]\" />\n  </xsd:restriction>\n"
  - '</xsd:simpleType>

    '
  - "<xsd:simpleType name=\"transfermode.datatype\">\n  <xsd:restriction base=\"xsd:NMTOKEN\"/>\n"
  - '</xsd:simpleType>

    '
  - "<xsd:simpleType name=\"action.datatype\">\n  <xsd:restriction base=\"xsd:NMTOKEN\">\n
    \  <xsd:enumeration value=\"remove\" />\n   <xsd:enumeration value=\"update\"
    />\n  </xsd:restriction>\n"
  - '</xsd:simpleType>

    '
  - "<xsd:simpleType name=\"dtmf.datatype\">\n  <xsd:restriction base=\"xsd:NMTOKEN\"/>\n"
  - '</xsd:simpleType>

    '
  - "<xsd:simpleType name=\"boolean.datatype\">\n  <xsd:restriction base=\"xsd:NMTOKEN\">\n
    \  <xsd:enumeration value=\"true\" />\n   <xsd:enumeration value=\"false\" />\n
    \ </xsd:restriction>\n"
  - '</xsd:simpleType>

    '
  - "<xsd:simpleType name=\"vxml.datatype\">\n  <xsd:restriction base=\"xsd:NMTOKEN\"/>\n"
  - '</xsd:simpleType>

    '
  - "<xsd:simpleType name=\"appdata.datatype\">\n  <xsd:restriction base=\"xsd:string\"
    />\n </xsd:simpleType>\n"
  - '</xsd:schema>

    '
  title: 11.  Media Service Resource Consumer Interface XML Schema
- contents:
  - "12.  Security Considerations\n   The MRB network entity has two primary interfaces
    -- Publish and\n   Consumer -- that carry sensitive information and must therefore
    be\n   appropriately protected and secured.\n   The Publish interface, as defined
    in and described in Section 5.1,\n   uses the Media Control Channel Framework
    [RFC6230] as a mechanism to\n   connect an MRB to a Media Server.  It is very
    important that the\n   communication between the MRB and the Media Server is secured:
    a\n   malicious entity may change or even delete subscriptions to a Media\n   Server,
    thus affecting the view the MRB has of the resources actually\n   available on
    a Media Server, leading it to incorrect selection when\n   media resources are
    being requested by an Application Server.  A\n   malicious entity may even manipulate
    available resources on a Media\n   Server, for example, to make the MRB think
    no resources are available\n   at all.  Considering that the Publish interface
    is a CFW Control\n   Package, the same security considerations included in the
    Media\n   Control Channel Framework specification apply here to protect\n   interactions
    between an MRB and a Media Server.\n   The Publish interface also allows a Media
    Server, as explained in\n   Section 5.1.5.18, to provide more or less accurate
    information about\n   its geographic location, should Application Servers be interested
    in\n   such details when looking for services at an MRB.  While the usage of\n
    \  this information is entirely optional and the level of detail to be\n   provided
    is implementation specific, it is important to draw\n   attention to the potential
    security issues that the disclosure of\n   such addresses may introduce.  As such,
    it is important to make sure\n   MRB implementations don't disclose this information
    as is to\n   interested Application Servers but only exploit those addresses as\n
    \  part of computation algorithms to pick the most adequate resources\n   Application
    Servers may be looking for.\n   The Consumer interface, as defined in and described
    in Section 5.2,\n   conceives transactions based on a session ID.  These transactions
    may\n   be transported either by means of HTTP messages or SIP dialogs.  This\n
    \  means that malicious users could be able to disrupt or manipulate an\n   MRB
    session should they have access to the above-mentioned session ID\n   or replicate
    it somehow: for instance, a malicious entity could\n   modify an existing session
    between an Application Server and the MRB,\n   e.g., requesting less resources
    than originally requested to cause\n   media dialogs to be rejected by the Application
    Server, or requesting\n   many more resources instead to try and lock as many
    of (if not all)\n   the resources an MRB can provide, thus making them unavailable
    to\n   other legitimate Application Servers in subsequent requests.  In\n   order
    to prevent this, it is strongly advised that MRB\n   implementations generate
    session identifiers that are very hard to\n   replicate, in order to minimize
    the chances that malicious users\n   could gain access to valid identifiers by
    just guessing or by means\n   of brute-force attacks.  It is very important, of
    course, to also\n   secure the way that these identifiers are transported by the
    involved\n   parties, in both requests and responses, in order to prevent network\n
    \  attackers from intercepting Consumer messages and having access to\n   session
    IDs.  The Consumer interface uses either the Hypertext\n   Transfer Protocol (HTTP)
    or the Session Initiation Protocol (SIP) as\n   the mechanism for clients to connect
    to an MRB to request media\n   resources.  In the case where HTTP is used, any
    binding using the\n   Consumer interface MUST be capable of being transacted over
    Transport\n   Layer Security (TLS), as described in RFC 2818 [RFC2818].  In the\n
    \  case where SIP is used, the same security considerations included in\n   the
    Media Control Channel Framework specification apply here to\n   protect interactions
    between a client requesting media resources and\n   an MRB.\n   Should a valid
    session ID be compromised somehow (that is,\n   intercepted or just guessed by
    a malicious user), as a further means\n   to prevent disruption the Consumer interface
    also prescribes the use\n   of a sequence number in its transactions.  This sequence
    number is to\n   be increased after each successful transaction, starting from
    a first\n   value randomly generated by the MRB when the session is first\n   created,
    and it must match in every request/response.  While this\n   adds complexity to
    the protocol (implementations must pay attention\n   to those sequence numbers,
    since wrong values will cause \"Wrong\n   sequence number\" errors and the failure
    of the related requests), it\n   is an important added value for security.  In
    fact, considering that\n   different transactions related to the same session
    could be\n   transported in different, unrelated HTTP messages (or SIP INVITEs
    in\n   cases where the In-line mode is being used), this sequence number\n   protection
    prevents the chances of session replication or disruption,\n   especially in cases
    where the session ID has been compromised: that\n   is, it should make it harder
    for malicious users to manipulate or\n   remove a session for which they have
    obtained the session ID.  It is\n   strongly advised that the MRB doesn't choose
    1 as the first sequence\n   number for a new session but rather picks a random
    value to start\n   from.  The reaction to transactions that are out of sequence
    is left\n   to MRB implementations: a related error code is available, but\n   implementations
    may decide to enforce further limitations or actions\n   upon the receipt of too
    many failed attempts in a row or of what\n   looks like blatant attempts to guess
    what the current, valid sequence\n   number is.\n   It is also worth noting that
    in In-line mode (both IAMM and IUMM) the\n   MRB may act as a Back-to-Back User
    Agent (B2BUA).  This means that\n   when acting as a B2BUA the MRB may modify
    SIP bodies: it is the case,\n   for instance, for the IAMM handling multipart/mixed
    payloads.  This\n   impacts the ability to use any SIP security feature that protects
    the\n   body (e.g., RFC 4474 [RFC4474], S/MIME, etc.), unless the MRB acts as\n
    \  a mediator for the security association.  This should be taken into\n   account
    when implementing an MRB compliant with this specification.\n   Both the Publishing
    interface and Consumer interface may address the\n   location of a Media Server:
    the Publishing interface may be used to\n   inform the MRB where a Media Server
    is located (approximately or\n   precisely), and the Consumer interface may be
    used to ask for a Media\n   Server located somewhere in a particular region (e.g.,
    a conference\n   bridge close to San Francisco).  Both Media Server and MRB\n
    \  implementers need to take this into account when deciding whether or\n   not
    to make this location information available, and if so how many\n   bits of information
    really need to be made available for brokering\n   purposes.\n   It is worthwhile
    to cover authorization issues related to this\n   specification.  Neither the
    Publishing interface nor the Consumer\n   interface provides an explicit means
    for implementing authentication,\n   i.e., they do not contain specific protocol
    interactions to ensure\n   that authorized Application Servers can make use of
    the services\n   provided by an MRB instance.  Considering that both interfaces
    are\n   transported using well-established protocols (HTTP, SIP, CFW),\n   support
    for such functionality can be expressed by means of the\n   authentication mechanisms
    provided by the protocols themselves.\n   Therefore, any MRB-aware entity (Application
    Servers, Media Servers,\n   MRBs themselves) MUST support HTTP and SIP Digest
    access\n   authentication.  The usage of such Digest access authentications is\n
    \  recommended and not mandatory, which means MRB-aware entities MAY\n   exploit
    it in deployment.\n   An MRB may want to enforce further constraints on the interactions\n
    \  between an Application Server/Media Server and an MRB.  For example,\n   it
    may choose to only accept requests associated with a specific\n   session ID from
    the IP address that originated the first request or\n   may just make use of pre-shared
    certificates to assess the identity\n   of legitimate Application Servers and/or
    Media Servers.\n"
  title: 12.  Security Considerations
- contents:
  - "13.  IANA Considerations\n   There are several IANA considerations associated
    with this\n   specification.\n"
  title: 13.  IANA Considerations
- contents:
  - "13.1.  Media Control Channel Framework Package Registration\n   This section
    registers a new Media Control Channel Framework package,\n   per the instructions
    in Section 13.1 of [RFC6230].\n   Package Name:  mrb-publish/1.0\n   Published
    Specification(s):  RFC 6917\n   Person and email address to contact for further
    information:  IETF\n      MediaCtrl working group (mediactrl@ietf.org), Chris
    Boulton\n      (chris@ns-technologies.com).\n"
  title: 13.1.  Media Control Channel Framework Package Registration
- contents:
  - "13.2.  application/mrb-publish+xml Media Type\n   To:  application\n   Subject:
    \ Registration of media type application/mrb-publish+xml\n   Type name:  application\n
    \  Subtype name:  mrb-publish+xml\n   Required parameters:  none\n   Optional
    parameters:  Same as charset parameter of application/xml as\n      specified
    in RFC 3023 [RFC3023].\n   Encoding considerations:  Same as encoding considerations
    of\n      application/xml as specified in RFC 3023 [RFC3023].\n   Security considerations:
    \ See Section 10 of RFC 3023 [RFC3023] and\n      Section 12 of RFC 6917.\n   Interoperability
    considerations:  none.\n   Published specification:  Section 10 of RFC 6917.\n
    \  Applications that use this media type:  This media type is used to\n      support
    a Media Resource Broker (MRB) entity.\n   Additional Information:\n      Magic
    Number:  None\n      File Extension:  .xdf\n      Macintosh file type code:  \"TEXT\"\n
    \  Person and email address to contact for further information:  Chris\n      Boulton
    (chris@ns-technologies.com).\n   Intended usage: COMMON\n   Author/Change controller:
    \ The IETF.\n"
  title: 13.2.  application/mrb-publish+xml Media Type
- contents:
  - "13.3.  application/mrb-consumer+xml Media Type\n   To:  application\n   Subject:
    \ Registration of media type application/mrb-consumer+xml\n   Type name:  application\n
    \  Subtype name:  mrb-consumer+xml\n   Mandatory parameters:  none\n   Optional
    parameters:  Same as charset parameter of application/xml as\n      specified
    in RFC 3023 [RFC3023].\n   Encoding considerations:  Same as encoding considerations
    of\n      application/xml as specified in RFC 3023 [RFC3023].\n   Security considerations:
    \ See Section 10 of RFC 3023 [RFC3023] and\n      Section 12 of RFC 6917.\n   Interoperability
    considerations:  none.\n   Published specification:  Section 11 of RFC 6917.\n
    \  Applications that use this media type:  This media type is used to\n      support
    a Media Resource Broker (MRB) entity.\n   Additional Information:\n      Magic
    Number:  None\n      File Extension:  .xdf\n      Macintosh file type code:  \"TEXT\"\n
    \  Person and email address to contact for further information:  Chris\n      Boulton
    (chris@ns-technologies.com).\n   Intended usage: COMMON\n   Author/Change controller:
    \ The IETF.\n"
  title: 13.3.  application/mrb-consumer+xml Media Type
- contents:
  - "13.4.  URN Sub-Namespace Registration for mrb-publish\n   IANA has registered
    the URN \"urn:ietf:params:xml:ns:mrb-publish\",\n   with the ID of \"mrb-publish\".
    \ The schema of the XML namespace named\n   urn:ietf:params:xml:ns:mrb-publish
    is in Section 10.\n"
  title: 13.4.  URN Sub-Namespace Registration for mrb-publish
- contents:
  - "13.5.  URN Sub-Namespace Registration for mrb-consumer\n   IANA has registered
    the URN \"urn:ietf:params:xml:ns:mrb-consumer\",\n   with the ID of \"mrb-consumer\".
    \ The schema of the XML namespace named\n   urn:ietf:params:xml:ns:mrb-consumer
    is in Section 11.\n"
  title: 13.5.  URN Sub-Namespace Registration for mrb-consumer
- contents:
  - "13.6.  XML Schema Registration for mrb-publish\n   IANA has registered the schema
    for mrb-publish:\n   URI:  urn:ietf:params:xml:schema:mrb-publish\n   ID:  mrb-publish\n
    \  Filename:  mrb-publish\n   Registrant Contact:  IETF MediaCtrl working group\n
    \     (mediactrl@ietf.org)\n   Schema:  The XML for the schema is in Section 10
    of this document.\n"
  title: 13.6.  XML Schema Registration for mrb-publish
- contents:
  - "13.7.  XML Schema Registration for mrb-consumer\n   Please register the schema
    for mrb-consumer:\n   URI:  urn:ietf:params:xml:schema:mrb-consumer\n   ID:  mrb-consumer\n
    \  Filename:  mrb-consumer\n   Registrant Contact:  IETF MediaCtrl working group\n
    \     (mediactrl@ietf.org)\n   Schema:  The XML for the schema is in Section 11
    of this document.\n"
  title: 13.7.  XML Schema Registration for mrb-consumer
- contents:
  - "14.  Acknowledgements\n   The authors would like to thank the members of the
    Publish Interface\n   design team, who provided valuable input into this document.
    \ The\n   design team consisted of Adnan Saleem, Michael Trank, Victor\n   Paulsamy,
    Martin Dolly, and Scott McGlashan.  The authors would also\n   like to thank John
    Dally, Bob Epley, Simon Romano, Henry Lum,\n   Christian Groves, and Jonathan
    Lennox for input into this\n   specification.\n   Ben Campbell carried out the
    RAI expert review on an early version of\n   this specification and provided a
    great deal of invaluable input.\n"
  title: 14.  Acknowledgements
- contents:
  - '15.  References

    '
  title: 15.  References
- contents:
  - "15.1.  Normative References\n   [ISO.10646.2012]\n              International
    Organization for Standardization,\n              \"Information technology -- Universal
    Coded Character Set\n              (UCS)\", ISO Standard 10646, 2012.\n   [ISO.3166-1]\n
    \             International Organization for Standardization, \"Codes for\n              the
    representation of names of countries and their\n              subdivisions - Part
    1: Country codes\", ISO Standard\n              3166-1:2006, 2006.\n   [ISO.639.2002]\n
    \             International Organization for Standardization, \"Codes for\n              the
    representation of names of languages -- Part 1:\n              Alpha-2 code\",
    ISO Standard 639, 2002.\n   [ITU-T.Q.1950]\n              International Telecommunication
    Union, \"Bearer independent\n              call bearer control protocol\", ITU-T
    Recommendation\n              Q.1950, December 2002.\n   [RFC2046]  Freed, N.
    and N. Borenstein, \"Multipurpose Internet Mail\n              Extensions (MIME)
    Part Two: Media Types\", RFC 2046,\n              November 1996.\n   [RFC2119]
    \ Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
    Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2616]  Fielding, R., Gettys, J.,
    Mogul, J., Frystyk, H.,\n              Masinter, L., Leach, P., and T. Berners-Lee,
    \"Hypertext\n              Transfer Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n
    \  [RFC3023]  Murata, M., St. Laurent, S., and D. Kohn, \"XML Media\n              Types\",
    RFC 3023, January 2001.\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo,
    G., Johnston,\n              A., Peterson, J., Sparks, R., Handley, M., and E.\n
    \             Schooler, \"SIP: Session Initiation Protocol\", RFC 3261,\n              June
    2002.\n   [RFC3311]  Rosenberg, J., \"The Session Initiation Protocol (SIP)\n
    \             UPDATE Method\", RFC 3311, October 2002.\n   [RFC3711]  Baugher,
    M., McGrew, D., Naslund, M., Carrara, E., and K.\n              Norrman, \"The
    Secure Real-time Transport Protocol (SRTP)\",\n              RFC 3711, March 2004.\n
    \  [RFC5139]  Thomson, M. and J. Winterbottom, \"Revised Civic Location\n              Format
    for Presence Information Data Format Location\n              Object (PIDF-LO)\",
    RFC 5139, February 2008.\n   [RFC5763]  Fischl, J., Tschofenig, H., and E. Rescorla,
    \"Framework\n              for Establishing a Secure Real-time Transport Protocol\n
    \             (SRTP) Security Context Using Datagram Transport Layer\n              Security
    (DTLS)\", RFC 5763, May 2010.\n   [W3C.REC-xmlschema-1-20041028]\n              Thompson,
    H., Beech, D., Maloney, M., and N. Mendelsohn,\n              \"XML Schema Part
    1: Structures Second Edition\", World Wide\n              Web Consortium Recommendation
    REC-xmlschema-1-20041028,\n              October 2004,\n              <http://www.w3.org/TR/2004/REC-xmlschema-1-20041028>.\n
    \  [W3C.REC-xmlschema-2-20041028]\n              Biron, P. and A. Malhotra, \"XML
    Schema Part 2: Datatypes\n              Second Edition\", World Wide Web Consortium\n
    \             Recommendation REC-xmlschema-2-20041028, October 2004,\n              <http://www.w3.org/TR/2004/REC-xmlschema-2-20041028>.\n"
  title: 15.1.  Normative References
- contents:
  - "15.2.  Informative References\n   [RFC2818]  Rescorla, E., \"HTTP Over TLS\",
    RFC 2818, May 2000.\n   [RFC4240]  Burger, E., Van Dyke, J., and A. Spitzer, \"Basic
    Network\n              Media Services with SIP\", RFC 4240, December 2005.\n   [RFC4474]
    \ Peterson, J. and C. Jennings, \"Enhancements for\n              Authenticated
    Identity Management in the Session\n              Initiation Protocol (SIP)\",
    RFC 4474, August 2006.\n   [RFC4733]  Schulzrinne, H. and T. Taylor, \"RTP Payload
    for DTMF\n              Digits, Telephony Tones, and Telephony Signals\", RFC
    4733,\n              December 2006.\n   [RFC5022]  Van Dyke, J., Burger, E., and
    A. Spitzer, \"Media Server\n              Control Markup Language (MSCML) and
    Protocol\", RFC 5022,\n              September 2007.\n   [RFC5167]  Dolly, M.
    and R. Even, \"Media Server Control Protocol\n              Requirements\", RFC
    5167, March 2008.\n   [RFC5552]  Burke, D. and M. Scott, \"SIP Interface to VoiceXML
    Media\n              Services\", RFC 5552, May 2009.\n   [RFC5567]  Melanchuk,
    T., \"An Architectural Framework for Media\n              Server Control\", RFC
    5567, June 2009.\n   [RFC5707]  Saleem, A., Xin, Y., and G. Sharratt, \"Media
    Server Markup\n              Language (MSML)\", RFC 5707, February 2010.\n   [RFC6230]
    \ Boulton, C., Melanchuk, T., and S. McGlashan, \"Media\n              Control
    Channel Framework\", RFC 6230, May 2011.\n   [RFC6231]  McGlashan, S., Melanchuk,
    T., and C. Boulton, \"An\n              Interactive Voice Response (IVR) Control
    Package for the\n              Media Control Channel Framework\", RFC 6231, May
    2011.\n   [RFC6381]  Gellens, R., Singer, D., and P. Frojdh, \"The 'Codecs' and\n
    \             'Profiles' Parameters for \"Bucket\" Media Types\", RFC 6381,\n
    \             August 2011.\n   [RFC6501]  Novo, O., Camarillo, G., Morgan, D.,
    and J. Urpalainen,\n              \"Conference Information Data Model for Centralized\n
    \             Conferencing (XCON)\", RFC 6501, March 2012.\n   [RFC6505]  McGlashan,
    S., Melanchuk, T., and C. Boulton, \"A Mixer\n              Control Package for
    the Media Control Channel Framework\",\n              RFC 6505, March 2012.\n"
  title: 15.2.  Informative References
- contents:
  - "Authors' Addresses\n   Chris Boulton\n   NS-Technologies\n   EMail: chris@ns-technologies.com\n
    \  Lorenzo Miniero\n   Meetecho\n   Via Carlo Poerio 89\n   Napoli  80100\n   Italy\n
    \  EMail: lorenzo@meetecho.com\n   Gary Munson\n   AT&T\n   200 Laurel Avenue
    South\n   Middletown, New Jersey  07748\n   USA\n   EMail: gamunson@gmail.com\n"
  title: Authors' Addresses
