- title: __initial_text__
  contents:
  - '                       Internet Mail Architecture

    '
- title: Abstract
  contents:
  - "Abstract\n   Over its thirty-five-year history, Internet Mail has changed\n \
    \  significantly in scale and complexity, as it has become a global\n   infrastructure\
    \ service.  These changes have been evolutionary, rather\n   than revolutionary,\
    \ reflecting a strong desire to preserve both its\n   installed base and its usefulness.\
    \  To collaborate productively on\n   this large and complex system, all participants\
    \ need to work from a\n   common view of it and use a common language to describe\
    \ its\n   components and the interactions among them.  But the many differences\n\
    \   in perspective currently make it difficult to know exactly what\n   another\
    \ participant means.  To serve as the necessary common frame of\n   reference,\
    \ this document describes the enhanced Internet Mail\n   architecture, reflecting\
    \ the current service.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n   This document may contain\
    \ material from IETF Documents or IETF\n   Contributions published or made publicly\
    \ available before November\n   10, 2008.  The person(s) controlling the copyright\
    \ in some of this\n   material may not have granted the IETF Trust the right to\
    \ allow\n   modifications of such material outside the IETF Standards Process.\n\
    \   Without obtaining an adequate license from the person(s) controlling\n   the\
    \ copyright in such materials, this document may not be modified\n   outside the\
    \ IETF Standards Process, and derivative works of it may\n   not be created outside\
    \ the IETF Standards Process, except to format\n   it for publication as an RFC\
    \ or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  History  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  4\n     1.2.  The Role of This Architecture  . . . . . . . . . .\
    \ . . . .  6\n     1.3.  Document Conventions . . . . . . . . . . . . . . . .\
    \ . . .  7\n   2.  Responsible Actor Roles  . . . . . . . . . . . . . . . . .\
    \ . .  7\n     2.1.  User Actors  . . . . . . . . . . . . . . . . . . . . . .\
    \ .  8\n     2.2.  Message Handling Service (MHS) Actors  . . . . . . . . . .\
    \ 11\n     2.3.  Administrative Actors  . . . . . . . . . . . . . . . . . . 14\n\
    \   3.  Identities . . . . . . . . . . . . . . . . . . . . . . . . . . 17\n  \
    \   3.1.  Mailbox  . . . . . . . . . . . . . . . . . . . . . . . . . 17\n    \
    \ 3.2.  Scope of Email Address Use . . . . . . . . . . . . . . . . 18\n     3.3.\
    \  Domain Names . . . . . . . . . . . . . . . . . . . . . . . 19\n     3.4.  Message\
    \ Identifier . . . . . . . . . . . . . . . . . . . . 19\n   4.  Services and Standards\
    \ . . . . . . . . . . . . . . . . . . . . 21\n     4.1.  Message Data . . . .\
    \ . . . . . . . . . . . . . . . . . . . 24\n       4.1.4.  Identity References\
    \ in a Message . . . . . . . . . . . 25\n     4.2.  User-Level Services  . . .\
    \ . . . . . . . . . . . . . . . . 29\n     4.3.  MHS-Level Services . . . . .\
    \ . . . . . . . . . . . . . . . 31\n     4.4.  Transition Modes . . . . . . .\
    \ . . . . . . . . . . . . . . 34\n     4.5.  Implementation and Operation . .\
    \ . . . . . . . . . . . . . 35\n   5.  Mediators  . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . 35\n     5.1.  Alias  . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . 37\n     5.2.  ReSender . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . 38\n     5.3.  Mailing Lists  . . . . . . . . . . . . .\
    \ . . . . . . . . . 39\n     5.4.  Gateways . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . 41\n     5.5.  Boundary Filter  . . . . . . . . . . . . . .\
    \ . . . . . . . 42\n   6.  Considerations . . . . . . . . . . . . . . . . . .\
    \ . . . . . . 42\n     6.1.  Security Considerations  . . . . . . . . . . . .\
    \ . . . . . 42\n     6.2.  Internationalization . . . . . . . . . . . . . . .\
    \ . . . . 43\n   7.  References . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . 45\n     7.1.  Normative References . . . . . . . . . . . . . . . . .\
    \ . . 45\n     7.2.  Informative References . . . . . . . . . . . . . . . . .\
    \ . 47\n   Appendix A.  Acknowledgments . . . . . . . . . . . . . . . . . . .\
    \ 50\n   Index  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 51\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Over its thirty-five-year history, Internet Mail has changed\n\
    \   significantly in scale and complexity, as it has become a global\n   infrastructure\
    \ service.  These changes have been evolutionary, rather\n   than revolutionary,\
    \ reflecting a strong desire to preserve both its\n   installed base and its usefulness.\
    \  Today, Internet Mail is\n   distinguished by many independent operators, many\
    \ different\n   components for providing service to Users, as well as many different\n\
    \   components that transfer messages.\n   The underlying technical standards\
    \ for Internet Mail comprise a rich\n   array of functional capabilities.  These\
    \ specifications form the\n   core:\n      *  Simple Mail Transfer Protocol (SMTP)\
    \ ([RFC0821], [RFC2821],\n         [RFC5321]) moves a message through the Internet.\n\
    \      *  Internet Mail Format (IMF) ([RFC0733], [RFC0822], [RFC2822],\n     \
    \    [RFC5322]) defines a message object.\n      *  Multipurpose Internet Mail\
    \ Extensions (MIME) [RFC2045] defines\n         an enhancement to the message\
    \ object that permits using\n         multimedia attachments.\n   Public collaboration\
    \ on technical, operations, and policy activities\n   of email, including those\
    \ that respond to the challenges of email\n   abuse, has brought a much wider\
    \ range of participants into the\n   technical community.  To collaborate productively\
    \ on this large and\n   complex system, all participants need to work from a common\
    \ view of\n   it and use a common language to describe its components and the\n\
    \   interactions among them.  But the many differences in perspective\n   currently\
    \ make it difficult to know exactly what another participant\n   means.\n   It\
    \ is the need to resolve these differences that motivates this\n   document, which\
    \ describes the realities of the current system.\n   Internet Mail is the subject\
    \ of ongoing technical, operations, and\n   policy work, and the discussions often\
    \ are hindered by different\n   models of email-service design and different meanings\
    \ for the same\n   terms.\n   To serve as the necessary common frame of reference,\
    \ this document\n   describes the enhanced Internet Mail architecture, reflecting\
    \ the\n   current service.  The document focuses on:\n      *  Capturing refinements\
    \ to the email model\n      *  Clarifying functional roles for the architectural\
    \ components\n      *  Clarifying identity-related issues, across the email service\n\
    \      *  Defining terminology for architectural components and their\n      \
    \   interactions\n"
- title: 1.1.  History
  contents:
  - "1.1.  History\n   The first standardized architecture for networked email specified\
    \ a\n   simple split between the user world, in the form of Message User\n   Agents\
    \ (MUAs), and the transfer world, in the form of the Message\n   Handling Service\
    \ (MHS), which is composed of Message Transfer Agents\n   (MTAs) [RFC1506].  The\
    \ MHS accepts a message from one User and\n   delivers it to one or more other\
    \ Users, creating a virtual MUA-to-MUA\n   exchange environment.\n   As shown\
    \ in Figure 1, this architecture defines two logical layers of\n   interoperability.\
    \  One is directly between Users.  The other is among\n   the components along\
    \ the transfer path.  In addition, there is\n   interoperability between the layers,\
    \ first when a message is posted\n   from the User to the MHS and later when it\
    \ is delivered from the MHS\n   to the User.\n   The operational service has evolved,\
    \ although core aspects of the\n   service, such as mailbox addressing and message\
    \ format style, remain\n   remarkably constant.  The original distinction between\
    \ the user level\n   and transfer level remains, but with elaborations in each.\
    \  The term\n   \"Internet Mail\" is used to refer to the entire collection of\
    \ user and\n   transfer components and services.\n   For Internet Mail, the term\
    \ \"end-to-end\" usually refers to a single\n   posting and the set of deliveries\
    \ that result from a single transit\n   of the MHS.  A common exception is group\
    \ dialogue that is mediated\n   through a Mailing List; in this case, two postings\
    \ occur before\n   intended Recipients receive an Author's message, as discussed\
    \ in\n   Section 2.1.4.  In fact, some uses of email consider the entire email\n\
    \   service, including Author and Recipient, as a subordinate component.\n   For\
    \ these services, \"end-to-end\" refers to points outside the email\n   service.\
    \  Examples are voicemail over email [RFC3801], EDI\n   (Electronic Data Interchange)\
    \ over email [RFC1767], and facsimile\n   over email [RFC4142].\n            \
    \                             +--------+\n                      ++================>|\
    \  User  |\n                      ||                 +--------+\n            \
    \          ||                      ^\n          +--------+  ||          +--------+\
    \  .\n          |  User  +==++=========>|  User  |  .\n          +---+----+  ||\
    \          +--------+  .\n              .       ||               ^      .\n  \
    \            .       ||   +--------+  .      .\n              .       ++==>| \
    \ User  |  .      .\n              .            +--------+  .      .\n       \
    \       .                 ^      .      .\n              .                 . \
    \     .      .\n              V                 .      .      .\n          +---+-----------------+------+------+---+\n\
    \          |   .                 .      .      .   |\n          |   .................>.\
    \      .      .   |\n          |   .                        .      .   |\n   \
    \       |   ........................>.      .   |\n          |   .           \
    \                    .   |\n          |   ...............................>.  \
    \ |\n          |                                       |\n          |     Message\
    \ Handling Service (MHS)    |\n          +---------------------------------------+\n\
    \          Legend: === lines indicate primary (possibly indirect)\n          \
    \            transfers or roles\n                  ... lines indicate supporting\
    \ transfers or roles\n                Figure 1: Basic Internet Mail Service Model\n\
    \   End-to-end Internet Mail exchange is accomplished by using a\n   standardized\
    \ infrastructure with these components and\n   characteristics:\n      *  An email\
    \ object\n      *  Global addressing\n      *  An asynchronous sequence of point-to-point\
    \ transfer mechanisms\n      *  No requirement for prior arrangement between MTAs\
    \ or between\n         Authors and Recipients\n      *  No requirement for prior\
    \ arrangement between point-to-point\n         transfer services over the open\
    \ Internet\n      *  No requirement for Author, Originator, or Recipients to be\n\
    \         online at the same time\n   The end-to-end portion of the service is\
    \ the email object, called a\n   \"message\".  Broadly, the message itself distinguishes\
    \ control\n   information, for handling, from the Author's content.\n   A precept\
    \ to the design of mail over the open Internet is permitting\n   User-to-User\
    \ and MTA-to-MTA interoperability without prior, direct\n   arrangement between\
    \ the independent administrative authorities\n   responsible for handling a message.\
    \  All participants rely on having\n   the core services universally supported\
    \ and accessible, either\n   directly or through Gateways that act as translators\
    \ between Internet\n   Mail and email environments conforming to other standards.\
    \  Given the\n   importance of spontaneity and serendipity in interpersonal\n\
    \   communications, not requiring such prearrangement between\n   participants\
    \ is a core benefit of Internet Mail and remains a core\n   requirement for it.\n\
    \   Within localized networks at the edge of the public Internet, prior\n   administrative\
    \ arrangement often is required and can include access\n   control, routing constraints,\
    \ and configuration of the information\n   query service.  Although Recipient\
    \ authentication has usually been\n   required for message access since the beginning\
    \ of Internet Mail, in\n   recent years it also has been required for message\
    \ submission.  In\n   these cases, a server validates the client's identity, whether\
    \ by\n   explicit security protocols or by implicit infrastructure queries to\n\
    \   identify \"local\" participants.\n"
- title: 1.2.  The Role of This Architecture
  contents:
  - "1.2.  The Role of This Architecture\n   An Internet service is an integration\
    \ of related capabilities among\n   two or more participating nodes.  The capabilities\
    \ are accomplished\n   across the Internet by one or more protocols.  What connects\
    \ a\n   protocol to a service is an architecture.  An architecture specifies\n\
    \   how the protocols implement the service by defining the logical\n   components\
    \ of a service and the relationships among them.  From that\n   logical view,\
    \ a service defines what is being done, an architecture\n   defines where the\
    \ pieces are (in relation to each other), and a\n   protocol defines how particular\
    \ capabilities are performed.\n   As such, an architecture will more formally\
    \ describe a service at a\n   relatively high level.  A protocol that implements\
    \ some portion of a\n   service will conform to the architecture to a greater\
    \ or lesser\n   extent, depending on the pragmatic tradeoffs they make when trying\
    \ to\n   implement the architecture in the context of real-world constraints.\n\
    \   Failure to precisely follow an architecture is not a failure of the\n   protocol,\
    \ nor is failure to precisely cast a protocol a failure of\n   the architecture.\
    \  Where a protocol varies from the architecture, it\n   will of course be appropriate\
    \ for it to explain the reason for the\n   variance.  However, such variance is\
    \ not a mark against a protocol:\n   Happily, the IETF prefers running code to\
    \ architectural purity.\n   In this particular case, this architecture attempts\
    \ to define the\n   logical components of Internet email and does so post hoc,\
    \ trying to\n   capture the architectural principles that the current email protocols\n\
    \   embody.  To different extents, email protocols will conform to this\n   architecture\
    \ more or less well.  Insofar as this architecture differs\n   from those protocols,\
    \ the reasons are generally well understood and\n   are required for interoperation.\
    \  The differences are not a sign that\n   protocols need to be fixed.  However,\
    \ this architecture is a best\n   attempt at a logical model of Internet email,\
    \ and insofar as new\n   protocol development varies from this architecture, it\
    \ is necessary\n   for designers to understand those differences and explain them\n\
    \   carefully.\n"
- title: 1.3.  Document Conventions
  contents:
  - "1.3.  Document Conventions\n   References to structured fields of a message use\
    \ a two-part dotted\n   notation.  The first part cites the document that contains\
    \ the\n   specification for the field, and the second part is the name of the\n\
    \   field.  Hence <RFC5322.From> is the IMF From: header field in an\n   email\
    \ content header, and <RFC5321.MailFrom> is the address in the\n   SMTP \"Mail\
    \ From\" command.\n   When occurring without the IMF (RFC 5322) qualifier, header\
    \ field\n   names are shown with a colon suffix.  For example, From:.\n   References\
    \ to labels for actors, functions or components have the\n   first letter capitalized.\n"
- title: 2.  Responsible Actor Roles
  contents:
  - "2.  Responsible Actor Roles\n   Internet Mail is a highly distributed service,\
    \ with a variety of\n   Actors playing different roles.  These Actors fall into\
    \ three basic\n   types:\n      *  User\n      *  Message Handling Service (MHS)\n\
    \      *  ADministrative Management Domain (ADMD)\n   Although related to a technical\
    \ architecture, the focus on Actors\n   concerns participant responsibilities,\
    \ rather than functionality of\n   modules.  For that reason, the labels used\
    \ are different from those\n   used in classic diagrams of email architecture.\n"
- title: 2.1.  User Actors
  contents:
  - "2.1.  User Actors\n   Users are the sources and sinks of messages.  Users can\
    \ be people,\n   organizations, or processes.  They can have an exchange that\n\
    \   iterates, and they can expand or contract the set of Users that\n   participate\
    \ in a set of exchanges.  In Internet Mail, there are four\n   types of Users:\n\
    \      *  Authors\n      *  Recipients\n      *  Return Handlers\n      *  Mediators\n\
    \   Figure 2 shows the primary and secondary flows of messages among\n   them.\
    \  As a pragmatic heuristic: User Actors can generate, modify, or\n   look at\
    \ the whole message.\n           ++==========++\n           ||  Author  ||<..................................<..\n\
    \           ++=++=++=++=++                                     .\n           \
    \   || || ||     ++===========++                    .\n              || || ++====>||\
    \ Recipient ||                    .\n              || ||        ++=====+=====++\
    \                    .\n              || ||               .                  \
    \         .\n              || ||               ..........................>.+\n\
    \              || ||                                           .\n           \
    \   || ||               ...................         .\n              || ||   \
    \            .                 .         .\n              || ||              \
    \ V                 .         .\n              || ||         +-----------+   \
    \ ++=====+=====++  .\n              || ++========>| Mediator  +===>|| Recipient\
    \ ||  .\n              ||            +-----+-----+    ++=====+=====++  .\n   \
    \           ||                  .                 .         .\n              ||\
    \                  ..................+.......>.+\n              ||           \
    \                                   .\n              ||    ..............+..................\
    \         .\n              ||    .             .                 .         .\n\
    \              \\/    V             V                 '         .\n          \
    \ +-----------+    +-----------+    ++=====+=====++  .\n           | Mediator\
    \  +===>| Mediator  +===>|| Recipient ||  .\n           +-----+-----+    +-----+-----+\
    \    ++=====+=====++  .\n                 .                .                 .\
    \         .\n                 .................+.................+.......>..\n\
    \          Legend: === lines indicate primary (possibly indirect)\n          \
    \            transfers or roles\n                  ... lines indicate supporting\
    \ transfers or roles\n                 Figure 2: Relationships among User Actors\n\
    \   From a User's perspective, all message-transfer activities are\n   performed\
    \ by a monolithic Message Handling Service (MHS), even though\n   the actual service\
    \ can be provided by many independent organizations.\n   Users are customers of\
    \ this unified service.\n   Whenever any MHS Actor sends information back to an\
    \ Author or\n   Originator in the sequence of handling a message, that Actor is\
    \ a\n   User.\n"
- title: 2.1.1.  Author
  contents:
  - "2.1.1.  Author\n   The Author is responsible for creating the message, its contents,\
    \ and\n   its list of Recipient addresses.  The MHS transfers the message from\n\
    \   the Author and delivers it to the Recipients.  The MHS has an\n   Originator\
    \ role (Section 2.2.1) that correlates with the Author role.\n"
- title: 2.1.2.  Recipient
  contents:
  - "2.1.2.  Recipient\n   The Recipient is a consumer of the delivered message. \
    \ The MHS has a\n   Receiver role (Section 2.2.4) that correlates with the Recipient\n\
    \   role.  This is labeled Recv in Figure 3.\n   Any Recipient can close the user-communication\
    \ loop by creating and\n   submitting a new message that replies to the Author.\
    \  An example of\n   an automated form of reply is the Message Disposition Notification\n\
    \   (MDN), which informs the Author about the Recipient's handling of the\n  \
    \ message.  (See Section 4.1.)\n"
- title: 2.1.3.  Return Handler
  contents:
  - "2.1.3.  Return Handler\n   Also called \"Bounce Handler\", the Return Handler\
    \ is a special form of\n   Recipient tasked with servicing notifications generated\
    \ by the MHS as\n   it transfers or delivers the message.  (See Figure 3.)  These\
    \ notices\n   can be about failures or completions and are sent to an address\
    \ that\n   is specified by the Originator.  This Return Handling address (also\n\
    \   known as a Return Address) might have no visible characteristics in\n   common\
    \ with the address of the Author or Originator.\n"
- title: 2.1.4.  Mediator
  contents:
  - "2.1.4.  Mediator\n   A Mediator receives, aggregates, reformulates, and redistributes\n\
    \   messages among Authors and Recipients who are the principals in\n   (potentially)\
    \ protracted exchanges.  This activity is easily confused\n   with the underlying\
    \ MHS transfer exchanges.  However, each serves\n   very different purposes and\
    \ operates in very different ways.\n   When mail is delivered to the Mediator\
    \ specified in the\n   RFC5321.RcptTo command for the original message, the MHS\
    \ handles it\n   the same way as for any other Recipient.  In particular, the\
    \ MHS sees\n   each posting and delivery activity between sources and sinks as\n\
    \   independent; it does not see subsequent re-posting as a continuation\n   of\
    \ a process.  Because the Mediator originates messages, it can\n   receive replies.\
    \  Hence, when submitting a reformulated message, the\n   Mediator is an Author,\
    \ albeit an Author actually serving as an agent\n   of one or more other Authors.\
    \  So a Mediator really is a full-fledged\n   User.  Mediators are considered\
    \ extensively in Section 5.\n   A Mediator attempts to preserve the original Author's\
    \ information in\n   the message it reformulates but is permitted to make meaningful\n\
    \   changes to the message content or envelope.  The MHS sees a new\n   message,\
    \ but Users receive a message that they interpret as being\n   from, or at least\
    \ initiated by, the Author of the original message.\n   The role of a Mediator\
    \ is not limited to merely connecting other\n   participants; the Mediator is\
    \ responsible for the new message.\n   A Mediator's role is complex and contingent,\
    \ for example, modifying\n   and adding content or regulating which Users are\
    \ allowed to\n   participate and when.  The common example of this role is a group\n\
    \   Mailing List.  In a more complex use, a sequence of Mediators could\n   perform\
    \ a sequence of formal steps, such as reviewing, modifying, and\n   approving\
    \ a purchase request.\n   A Gateway is a particularly interesting form of Mediator.\
    \  It is a\n   hybrid of User and Relay that connects heterogeneous mail services.\n\
    \   Its purpose is to emulate a Relay.  For a detailed discussion, see\n   Section\
    \ 2.2.3.\n"
- title: 2.2.  Message Handling Service (MHS) Actors
  contents:
  - "2.2.  Message Handling Service (MHS) Actors\n   The Message Handling Service\
    \ (MHS) performs a single end-to-end\n   transfer on behalf of the Author to reach\
    \ the Recipient addresses\n   specified in the original RFC5321.RcptTo commands.\
    \  Exchanges that\n   are either mediated or iterative and protracted, such as\
    \ those used\n   for collaboration over time, are handled by the User Actors,\
    \ not by\n   the MHS Actors.  As a pragmatic heuristic MHS Actors generate,\n\
    \   modify, or look at only transfer data, rather than the entire\n   message.\n\
    \   Figure 3 shows the relationships among transfer participants in\n   Internet\
    \ Mail.  Although it shows the Originator (labeled Origin) as\n   distinct from\
    \ the Author, and Receiver (labeled Recv) as distinct\n   from Recipient, each\
    \ pair of roles usually has the same Actor.\n   Transfers typically entail one\
    \ or more Relays.  However, direct\n   delivery from the Originator to Receiver\
    \ is possible.  Intra-\n   organization mail services usually have only one Relay.\n\
    \           ++==========++                        ++===========++\n          \
    \ ||  Author  ||                        || Recipient ||\n           ++====++====++\
    \   +--------+           ++===========++\n                 ||         | Return\
    \ |                  /\\\n                 ||         +-+------+             \
    \     ||\n                 \\/           .    ^                    ||\n      \
    \       +---------+      .    .                +---++---+\n             |    \
    \     |      .    .                |        |\n          /--+---------+----------------------------+--------+----\\\
    \n          |  |         |      .    .      MHS       |        |    |\n      \
    \    |  | Origin  +<......    .................+  Recv  |    |\n          |  |\
    \         |           ^                |        |    |\n          |  +---++----+\
    \           .                +--------+    |\n          |      ||            \
    \    .                    /\\        |\n          |      ||  ..............+..................\
    \  ||        |\n          |      \\/  .             .                 .  ||  \
    \      |\n          |  +-------+-+        +--+------+        +-+--++---+    |\n\
    \          |  |  Relay  +=======>|  Relay  +=======>|  Relay  |    |\n       \
    \   |  +---------+        +----++---+        +---------+    |\n          |   \
    \                       ||                           |\n          |          \
    \                ||                           |\n          |                 \
    \         \\/                           |\n          |                     +---------+\
    \                       |\n          |                    | Gateway +-->...  \
    \                |\n          |                     +---------+              \
    \         |\n          \\-------------------------------------------------------/\n\
    \         Legend: === and || lines indicate primary (possibly\n              \
    \       indirect) transfers or roles\n                 ... lines indicate supporting\
    \ transfers or roles\n                 Figure 3: Relationships among MHS Actors\n"
- title: 2.2.1.  Originator
  contents:
  - "2.2.1.  Originator\n   The Originator ensures that a message is valid for posting\
    \ and then\n   submits it to a Relay.  A message is valid if it conforms to both\n\
    \   Internet Mail standards and local operational policies.  The\n   Originator\
    \ can simply review the message for conformance and reject\n   it if it finds\
    \ errors, or it can create some or all of the necessary\n   information.  In effect,\
    \ the Originator is responsible for the\n   functions of the Mail Submission Agent.\n\
    \   The Originator operates with dual allegiance.  It serves the Author\n   and\
    \ can be the same entity.  But its role in assuring validity means\n   that it\
    \ also represents the local operator of the MHS, that is, the\n   local ADministrative\
    \ Management Domain (ADMD).\n   The Originator also performs any post-submission,\
    \ Author-related\n   administrative tasks associated with message transfer and\
    \ delivery.\n   Notably, these tasks pertain to sending error and delivery notices,\n\
    \   enforcing local policies, and dealing with messages from the Author\n   that\
    \ prove to be problematic for the Internet.  The Originator is\n   accountable\
    \ for the message content, even when it is not responsible\n   for it.  The Author\
    \ creates the message, but the Originator handles\n   any transmission issues\
    \ with it.\n"
- title: 2.2.2.  Relay
  contents:
  - "2.2.2.  Relay\n   The Relay performs MHS-level transfer-service routing and store-and-\n\
    \   forward by transmitting or retransmitting the message to its\n   Recipients.\
    \  The Relay adds trace information [RFC2505] but does not\n   modify the envelope\
    \ information or the message content semantics.  It\n   can modify message content\
    \ representation, such as changing the form\n   of transfer encoding from binary\
    \ to text, but only as required to\n   meet the capabilities of the next hop in\
    \ the MHS.\n   A Message Handling System (MHS) network consists of a set of Relays.\n\
    \   This network is above any underlying packet-switching network that\n   might\
    \ be used and below any Gateways or other Mediators.\n   In other words, email\
    \ scenarios can involve three distinct\n   architectural layers, each providing\
    \ its own type of data of store-\n   and-forward service:\n      *  User Mediators\n\
    \      *  MHS Relays\n      *  Packet Switches\n   The bottom layer is the Internet's\
    \ IP service.  The most basic email\n   scenarios involve Relays and Switches.\n\
    \   When a Relay stops attempting to transfer a message, it becomes an\n   Author\
    \ because it sends an error message to the Return Address.  The\n   potential\
    \ for looping is avoided by omitting a Return Address from\n   this message.\n"
- title: 2.2.3.  Gateway
  contents:
  - "2.2.3.  Gateway\n   A Gateway is a hybrid of User and Relay that connects heterogeneous\n\
    \   mail services.  Its purpose is to emulate a Relay and the closer it\n   comes\
    \ to this, the better.  A Gateway operates as a User when it\n   needs the ability\
    \ to modify message content.\n   Differences between mail services can be as small\
    \ as minor syntax\n   variations, but they usually encompass significant, semantic\n\
    \   distinctions.  One difference could be email addresses that are\n   hierarchical\
    \ and machine-specific rather than a flat, global\n   namespace.  Another difference\
    \ could be support for text-only content\n   or multimedia.  Hence the Relay function\
    \ in a Gateway presents a\n   significant design challenge if the resulting performance\
    \ is to be\n   seen as nearly seamless.  The challenge is to ensure User-to-User\n\
    \   functionality between the services, despite differences in their\n   syntax\
    \ and semantics.\n   The basic test of Gateway design is whether an Author on\
    \ one side of\n   a Gateway can send a useful message to a Recipient on the other\
    \ side,\n   without requiring changes to any components in the Author's or\n \
    \  Recipient's mail services other than adding the Gateway.  To each of\n   these\
    \ otherwise independent services, the Gateway appears to be a\n   native participant.\
    \  But the ultimate test of Gateway design is\n   whether the Author and Recipient\
    \ can sustain a dialogue.  In\n   particular, can a Recipient's MUA automatically\
    \ formulate a valid\n   Reply that will reach the Author?\n"
- title: 2.2.4.  Receiver
  contents:
  - "2.2.4.  Receiver\n   The Receiver performs final delivery or sends the message\
    \ to an\n   alternate address.  It can also perform filtering and other policy\n\
    \   enforcement immediately before or after delivery.\n"
- title: 2.3.  Administrative Actors
  contents:
  - "2.3.  Administrative Actors\n   Administrative Actors can be associated with\
    \ different organizations,\n   each with its own administrative authority.  This\
    \ operational\n   independence, coupled with the need for interaction between\
    \ groups,\n   provides the motivation to distinguish among ADministrative\n  \
    \ Management Domains (ADMDs).  Each ADMD can have vastly different\n   operating\
    \ policies and trust-based decision-making.  One obvious\n   example is the distinction\
    \ between mail that is exchanged within an\n   organization and mail that is exchanged\
    \ between independent\n   organizations.  The rules for handling both types of\
    \ traffic tend to\n   be quite different.  That difference requires defining the\
    \ boundaries\n   of each, and this requires the ADMD construct.\n   Operation\
    \ of Internet Mail services is carried out by different\n   providers (or operators).\
    \  Each can be an independent ADMD.  This\n   independence of administrative decision-making\
    \ defines boundaries\n   that distinguish different portions of the Internet Mail\
    \ service.  A\n   department that operates a local Relay, an IT department that\n\
    \   operates an enterprise Relay, and an ISP that operates a public\n   shared\
    \ email service can be configured into many combinations of\n   administrative\
    \ and operational relationships.  Each is a distinct\n   ADMD, potentially having\
    \ a complex arrangement of functional\n   components.  Figure 4 depicts relationships\
    \ among ADMDs.  The benefit\n   of the ADMD construct is that it facilitates discussion\
    \ about\n   designs, policies, and operations that need to distinguish between\n\
    \   internal issues and external ones.\n   The architectural impact of the need\
    \ for boundaries between ADMDs is\n   discussed in [Tussle].  Most significant\
    \ is that the entities\n   communicating across ADMD boundaries typically have\
    \ the added burden\n   of enforcing organizational policies concerning external\n\
    \   communications.  At a more mundane level, routing mail between ADMDs\n   can\
    \ be an issue, such as needing to route mail between organizational\n   partners\
    \ over specially trusted paths.\n   These are three basic types of ADMDs:\n  \
    \ Edge:       Independent transfer services in networks at the edge of\n     \
    \          the open Internet Mail service.\n   Consumer:   Might be a type of\
    \ Edge service, as is common for web-\n               based email access.\n  \
    \ Transit:    Mail Service Providers (MSPs) that offer value-added\n         \
    \      capabilities for Edge ADMDs, such as aggregation and\n               filtering.\n\
    \   The mail-level transit service is different from packet-level\n   switching.\
    \  End-to-end packet transfers usually go through\n   intermediate routers; email\
    \ exchange across the open Internet can be\n   directly between the Boundary MTAs\
    \ of Edge ADMDs.  This distinction\n   between direct and indirect interaction\
    \ highlights the differences\n   discussed in Section 2.2.2.\n         +--------+\
    \     +---------+     +-------+     +-----------+\n         |  ADMD1 |<===>| \
    \ ADMD2  |<===>| ADMD3 |<===>|   ADMD4   |\n         |  ----- |     |  ----- \
    \ |     | ----- |     |   -----   |\n         |        |     |         |     |\
    \       |     |           |\n         | Author |     |         |     |       |\
    \     | Recipient |\n         |   .    |     |         |     |       |     | \
    \    ^     |\n         |   V    |     |         |     |       |     |     .  \
    \   |\n         |  Edge..+....>|.Transit.+....>|-Edge..+....>|..Consumer |\n \
    \        |        |     |         |     |       |     |           |\n        \
    \ +--------+     +---------+     +-------+     +-----------+\n         Legend:\
    \ === lines indicate primary (possibly indirect)\n                     transfers\
    \ or roles\n                 ... lines indicate supporting transfers or roles\n\
    \              Figure 4: Administrative Domain (ADMD) Example\n   Edge networks\
    \ can use proprietary email standards internally.\n   However, the distinction\
    \ between Transit network and Edge network\n   transfer services is significant\
    \ because it highlights the need for\n   concern over interaction and protection\
    \ between independent\n   administrations.  In particular, this distinction calls\
    \ for\n   additional care in assessing the transitions of responsibility and\n\
    \   the accountability and authorization relationships among participants\n  \
    \ in message transfer.\n   The interactions of ADMD components are subject to\
    \ the policies of\n   that domain, which cover concerns such as these:\n     \
    \ *  Reliability\n      *  Access control\n      *  Accountability\n      *  Content\
    \ evaluation and modification\n   These policies can be implemented in different\
    \ functional components,\n   according to the needs of the ADMD.  For example,\
    \ see [RFC5068].\n   Consumer, Edge, and Transit services can be offered by providers\
    \ that\n   operate component services or sets of services.  Further, it is\n \
    \  possible for one ADMD to host services for other ADMDs.\n   These are common\
    \ examples of ADMDs:\n   Enterprise Service Providers:\n      These ADMDs operate\
    \ the internal data and/or the mail services\n      within an organization.\n\
    \   Internet Service Providers (ISP):\n      These ADMDs operate the underlying\
    \ data communication services,\n      which are used by one or more Relay and\
    \ User.  ISPs are not\n      responsible for performing email functions, but they\
    \ can provide\n      an environment in which those functions can be performed.\n\
    \   Mail Service Providers:\n      These ADMDs operate email services, such as\
    \ for consumers or\n      client companies.\n   Practical operational concerns\
    \ demand that providers be involved in\n   administration and enforcement issues.\
    \  This involvement can extend\n   to operators of lower-level packet services.\n"
- title: 3.  Identities
  contents:
  - "3.  Identities\n   The forms of identity used by Internet Mail are: mailbox,\
    \ domain\n   name, message-ID, and ENVID (envelope identifier).  Each is globally\n\
    \   unique.\n"
- title: 3.1.  Mailbox
  contents:
  - "3.1.  Mailbox\n      \"A mailbox receives mail.  It is a conceptual entity that\
    \ does not\n      necessarily pertain to file storage.\"  [RFC5322]\n   A mailbox\
    \ is specified as an Internet Mail address <addr-spec>.  It\n   has two distinct\
    \ parts, separated by an at-sign (@).  The right side\n   is a globally interpreted\
    \ domain name associated with an ADMD.\n   Domain names are discussed in Section\
    \ 3.3.  Formal Internet Mail\n   addressing syntax can support source routes to\
    \ indicate the path\n   through which a message ought to be sent.  The use of\
    \ source routes\n   is not common and has been deprecated in [RFC5321].\n   The\
    \ portion to the left of the at-sign contains a string that is\n   globally opaque\
    \ and is called the <local-part>.  It is interpreted\n   only by the entity specified\
    \ by the address's domain name.  Except as\n   noted later in this section, all\
    \ other entities treat the\n   <local-part> as an uninterpreted literal string\
    \ and preserve all\n   of its original details.  As such, its public distribution\
    \ is\n   equivalent to sending a Web browser \"cookie\" that is only interpreted\n\
    \   upon being returned to its creator.\n   Some local-part values have been standardized\
    \ for contacting\n   personnel at an organization.  These names cover common operations\n\
    \   and business functions [RFC2142].\n   It is common for sites to have local\
    \ structuring conventions for the\n   left-hand side, <local-part>, of an <addr-spec>.\
    \  This permits sub-\n   addressing, such as for distinguishing different discussion\
    \ groups\n   used by the same participant.  However, it is worth stressing that\n\
    \   these conventions are strictly private to the User's organization and\n  \
    \ are not interpreted by any domain except the one listed in the right\n   side\
    \ of the <addr-spec>.  The exceptions are those specialized\n   services that\
    \ conform to public, standardized conventions, as noted\n   below.\n   Basic email\
    \ addressing defines the <local-part> as being globally\n   opaque.  However,\
    \ there are some uses of email that add a\n   standardized, global schema to the\
    \ value, such as between an Author\n   and a Gateway.  The <local-part> details\
    \ remain invisible to the\n   public email transfer infrastructure, but provide\
    \ addressing and\n   handling instructions for further processing by the Gateway.\n\
    \   Standardized examples of these conventions are the telephone\n   numbering\
    \ formats for the Voice Profile for Internet Mail (VPIM)\n   [RFC3801], such as:\n\
    \                       +16137637582@vpim.example.com,\n   and iFax ([RFC3192],\
    \ [RFC4143] such as:\n                FAX=+12027653000/T33S=1387@ifax.example.com.\n"
- title: 3.2.  Scope of Email Address Use
  contents:
  - "3.2.  Scope of Email Address Use\n   Email addresses are being used far beyond\
    \ their original role in\n   email transfer and delivery.  In practical terms,\
    \ an email address\n   string has become the common identifier for representing\
    \ online\n   identity.  Hence, it is essential to be clear about both the nature\n\
    \   and role of an identity string in a particular context and the entity\n  \
    \ responsible for setting that string.  For example, see Sections\n   4.1.4, 4.3.3,\
    \ and 5.\n"
- title: 3.3.  Domain Names
  contents:
  - "3.3.  Domain Names\n   A domain name is a global reference to an Internet resource,\
    \ such as\n   a host, a service, or a network.  A domain name usually maps to\
    \ one\n   or more IP Addresses.  Conceptually, the name can encompass an\n   organization,\
    \ a collection of machines integrated into a homogeneous\n   service, or a single\
    \ machine.  A domain name can be administered to\n   refer to an individual User,\
    \ but this is not common practice.  The\n   name is structured as a hierarchical\
    \ sequence of labels, separated by\n   dots (.), with the top of the hierarchy\
    \ being on the right end of the\n   sequence.  There can be many names in the\
    \ sequence -- that is, the\n   depth of the hierarchy can be substantial.  Domain\
    \ names are defined\n   and operated through the Domain Name System (DNS) ([RFC1034],\n\
    \   [RFC1035], [RFC2181]).\n   When not part of a mailbox address, a domain name\
    \ is used in Internet\n   Mail to refer to the ADMD or to the host that took action\
    \ upon the\n   message, such as providing the administrative scope for a message\n\
    \   identifier or performing transfer processing.\n"
- title: 3.4.  Message Identifier
  contents:
  - "3.4.  Message Identifier\n   There are two standardized tags for identifying\
    \ messages: Message-ID:\n   and ENVID.  A Message-ID: pertains to content, and\
    \ an ENVID pertains\n   to transfer.\n"
- title: 3.4.1.  Message-ID
  contents:
  - "3.4.1.  Message-ID\n   IMF provides for, at most, a single Message-ID:.  The\
    \ Message-ID: for\n   a single message, which is a user-level IMF tag, has a variety\
    \ of\n   uses including threading, aiding identification of duplicates, and\n\
    \   DSN (Delivery Status Notification) tracking.  The Originator assigns\n   the\
    \ Message-ID:.  The Recipient's ADMD is the intended consumer of\n   the Message-ID:,\
    \ although any Actor along the transfer path can use\n   it.\n   Message-ID: is\
    \ globally unique.  Its format is similar to that of a\n   mailbox, with two distinct\
    \ parts separated by an at-sign (@).\n   Typically, the right side specifies the\
    \ ADMD or host that assigns the\n   identifier, and the left side contains a string\
    \ that is globally\n   opaque and serves to uniquely identify the message within\
    \ the domain\n   referenced on the right side.  The duration of uniqueness for\
    \ the\n   message identifier is undefined.\n   When a message is revised in any\
    \ way, the decision whether to assign\n   a new Message-ID: requires a subjective\
    \ assessment to determine\n   whether the editorial content has been changed enough\
    \ to constitute a\n   new message.  [RFC5322] states that \"a message identifier\
    \ pertains to\n   exactly one version of a particular message; subsequent revisions\
    \ to\n   the message each receive new message identifiers.\"  Yet experience\n\
    \   suggests that some flexibility is needed.  An impossible test is\n   whether\
    \ the Recipient will consider the new message to be equivalent\n   to the old\
    \ one.  For most components of Internet Mail, there is no\n   way to predict a\
    \ specific Recipient's preferences on this matter.\n   Both creating and failing\
    \ to create a new Message-ID: have their\n   downsides.\n   Here are some guidelines\
    \ and examples:\n   o  If a message is changed only in form, such as character\
    \ encoding,\n      it is still the same message.\n   o  If a message has minor\
    \ additions to the content, such as a Mailing\n      List tag at the beginning\
    \ of the RFC5322.Subject header field, or\n      some Mailing List administrative\
    \ information added to the end of\n      the primary body part text, it is probably\
    \ the same message.\n   o  If a message has viruses deleted from it, it is probably\
    \ the same\n      message.\n   o  If a message has offensive words deleted from\
    \ it, some Recipients\n      will consider it the same message, but some will\
    \ not.\n   o  If a message is translated into a different language, some\n   \
    \   Recipients will consider it the same message, but some will not.\n   o  If\
    \ a message is included in a digest of messages, the digest\n      constitutes\
    \ a new message.\n   o  If a message is forwarded by a Recipient, what is forwarded\
    \ is a\n      new message.\n   o  If a message is \"redirected\", such as using\
    \ IMF \"Resent-*\" header\n      fields, some Recipients will consider it the\
    \ same message, but\n      some will not.\n   The absence of both objective, precise\
    \ criteria for regenerating a\n   Message-ID: and strong protection associated\
    \ with the string means\n   that the presence of an ID can permit an assessment\
    \ that is\n   marginally better than a heuristic, but the ID certainly has no\
    \ value\n   on its own for strict formal reference or comparison.  For that\n\
    \   reason, the Message-ID: is not intended to be used for any function\n   that\
    \ has security implications.\n"
- title: 3.4.2.  ENVID
  contents:
  - "3.4.2.  ENVID\n   The ENVID (envelope identifier) can be used for message-tracking\n\
    \   purposes ([RFC3885], [RFC3464]) concerning a single posting/delivery\n   transfer.\
    \  The ENVID labels a single transit of the MHS by a specific\n   message.  So,\
    \ the ENVID is used for one message posting until that\n   message is delivered.\
    \  A re-posting of the message, such as by a\n   Mediator, does not reuse that\
    \ ENVID, but can use a new one, even\n   though the message might legitimately\
    \ retain its original\n   Message-ID:.\n   The format of an ENVID is free form.\
    \  Although its creator might\n   choose to impose structure on the string, none\
    \ is imposed by Internet\n   standards.  By implication, the scope of the string\
    \ is defined by the\n   domain name of the Return Address.\n"
- title: 4.  Services and Standards
  contents:
  - "4.  Services and Standards\n   The Internet Mail architecture comprises six basic\
    \ types of\n   functionality, which are arranged to support a store-and-forward\n\
    \   service.  As shown in Figure 5, each type can have multiple\n   instances,\
    \ some of which represent specialized roles.  This section\n   considers the activities\
    \ and relationships among these components,\n   and the Internet Mail standards\
    \ that apply to them.\n      Message\n      Message User Agent (MUA)\n       \
    \  Author MUA (aMUA)\n         Recipient MUA (rMUA)\n      Message Submission\
    \ Agent (MSA)\n         Author-focused MSA functions (aMSA)\n         MHS-focused\
    \ MSA functions (hMSA)\n      Message Transfer Agent (MTA)\n      Message Delivery\
    \ Agent (MDA)\n         Recipient-focused MDA functions (rMDA)\n         MHS-focused\
    \ MDA functions (hMDA)\n      Message Store (MS)\n         Author MS (aMS)\n \
    \        Recipient MS (rMS)\n   This figure shows function modules and the standardized\
    \ protocols\n   used between them.\n                     ++========++\n      \
    \               ||        ||                             +-------+\n         \
    \ ...........++  aMUA  ||<............................+ Disp  |\n          . \
    \         ||        ||                             +-------+\n          .    \
    \      ++=+==+===++                                 ^\n          .  local,imap}|\
    \  |{smtp,submission                      .\n          .  +-----+    |  |    \
    \                      +--------+  .\n          .  | aMS |<---+  | ........................>|\
    \ Return |  .\n          .  +-----+       | .                        +--------+\
    \  .\n          .                | .    *****************       ^       .\n  \
    \        .          +-----V-.----*------------+  *       .       .\n         \
    \ .      MSA | +-------+  *   +------+ |  *       .       .\n          .     \
    \     | | aMSA  +-(S)->| hMSA | |  *       .       .\n          .          | +-------+\
    \  *   +--+---+ |  *       .       .\n          V          +------------*------+-----+\
    \  *       .       .\n    //==========\\\\                *      V {smtp  *  \
    \     .       .\n    || MESSAGE  ||                *   +------+    *  //===+===\\\
    \\  .\n    ||----------||            MHS *   | MTA  |    *  ||  dsn  ||  .\n \
    \   || ENVELOPE ||                *   +--+---+    *  \\\\=======//  .\n    ||\
    \  smtp    ||                *      V {smtp  *     ^   ^     .\n    || CONTENT\
    \  ||                *   +------+    *     .   . //==+==\\\\\n    ||  imf    \
    \ ||                *   | MTA  +....*......   . || mdn ||\n    ||  mime    ||\
    \                *   +--+---+    *         . \\\\=====//\n    \\\\==========//\
    \                * smtp}| {local *         .     ^\n          .           MDA\
    \         *      | {lmtp  *         .     .\n          .      +----------------+------V-----+\
    \  *         .     .\n          .      | +----------+   *   +------+ |  *    \
    \     .     .\n          .      | |          |   *   |      | +..*.......... \
    \    .\n          .      | |   rMDA   |<-(D)--+ hMDA | |  *               .\n\
    \          .      | |          |   *   |      | |<.*........       .\n       \
    \   .      | +-+------+-+   *   +------+ |  *       .       .\n          .   \
    \   +------+---------*------------+  *       .       .\n          .  smtp,local}|\
    \         *****************       .       .\n          .             V       \
    \                          .       .\n          .          +-----+           \
    \              //===+===\\\\  .\n          .          | rMS |                \
    \         || sieve ||  .\n          .          +--+--+                       \
    \  \\\\=======//  .\n          .             |{imap,pop,local                \
    \  ^       .\n          .             V                                 .    \
    \   .\n          .       ++==========++                          .       .\n \
    \         .       ||          ||                          .       .\n        \
    \  .......>||   rMUA   ++...........................       .\n               \
    \   ||          ++...................................\n                  ++==========++\n\
    \    Legend: --- lines indicate primary (possibly indirect)\n                transfers\
    \ or roles\n            === boxes indicate data objects\n            ... lines\
    \ indicate supporting transfers or roles\n            *** lines indicate aggregated\
    \ service\n                     Figure 5: Protocols and Services\n"
- title: 4.1.  Message Data
  contents:
  - "4.1.  Message Data\n   The purpose of the Message Handling System (MHS) is to\
    \ exchange an\n   IMF message object among participants [RFC5322].  All of its\n\
    \   underlying mechanisms serve to deliver that message from its Author\n   to\
    \ its Recipients.  A message can be explicitly labeled as to its\n   nature [RFC3458].\n\
    \   A message comprises a transit-handling envelope and the message\n   content.\
    \  The envelope contains information used by the MHS.  The\n   content is divided\
    \ into a structured header and the body.  The header\n   comprises transit-handling\
    \ trace information and structured fields\n   that are part of the Author's message\
    \ content.  The body can be\n   unstructured lines of text or a tree of multimedia\
    \ subordinate\n   objects, called \"body-parts\" or, popularly, \"attachments\"\
    .\n   [RFC2045], [RFC2046], [RFC2047], [RFC4288], [RFC4289], [RFC2049].\n   In\
    \ addition, Internet Mail has a few conventions for special control\n   data,\
    \ notably:\n   Delivery Status Notification (DSN):\n      A Delivery Status Notification\
    \ (DSN) is a message that can be\n      generated by the MHS (MSA, MTA, or MDA)\
    \ and sent to the\n      RFC5321.MailFrom address.  MDA and MTA are shown as sources\
    \ of\n      DSNs in Figure 5, and the destination is shown as Returns.  DSNs\n\
    \      provide information about message transit, such as transfer errors\n  \
    \    or successful delivery [RFC3461].\n   Message Disposition Notification (MDN):\n\
    \      A Message Disposition Notification (MDN) is a message that\n      provides\
    \ information about post-delivery processing, such as\n      indicating that the\
    \ message has been displayed [RFC3798] or the\n      form of content that can\
    \ be supported [RFC3297].  It can be\n      generated by an rMUA and is sent to\
    \ the\n      Disposition-Notification-To addresses.  The mailbox for this is\n\
    \      shown as Disp in Figure 5.\n   Message Filtering (SIEVE):\n      Sieve\
    \ is a scripting language used to specify conditions for\n      differential handling\
    \ of mail, typically at the time of delivery\n      [RFC5228].  Scripts can be\
    \ conveyed in a variety of ways, such as\n      a MIME part in a message.  Figure\
    \ 5 shows a Sieve script going\n      from the rMUA to the MDA.  However, filtering\
    \ can be done at many\n      different points along the transit path, and any\
    \ one or more of\n      them might be subject to Sieve directives, especially\
    \ within a\n      single ADMD.  Figure 5 shows only one relationship, for (relative)\n\
    \      simplicity.\n"
- title: 4.1.1.  Envelope
  contents:
  - "4.1.1.  Envelope\n   Internet Mail has a fragmented framework for transit-related\
    \ handling\n   information.  Information that is used directly by the MHS is called\n\
    \   the \"envelope\".  It directs handling activities by the transfer\n   service\
    \ and is carried in transfer-service commands.  That is, the\n   envelope exists\
    \ in the transfer protocol SMTP [RFC5321].\n   Trace information, such as RFC5322.Received,\
    \ is recorded in the\n   message header and is not subsequently altered [RFC5322].\n"
- title: 4.1.2.  Header Fields
  contents:
  - "4.1.2.  Header Fields\n   Header fields are attribute name/value pairs that cover\
    \ an extensible\n   range of email-service parameters, structured user content,\
    \ and user\n   transaction meta-information.  The core set of header fields is\n\
    \   defined in [RFC5322].  It is common practice to extend this set for\n   different\
    \ applications.  Procedures for registering header fields are\n   defined in [RFC3864].\
    \  An extensive set of existing header field\n   registrations is provided in\
    \ [RFC4021].\n   One danger of placing additional information in header fields\
    \ is that\n   Gateways often alter or delete them.\n"
- title: 4.1.3.  Body
  contents:
  - "4.1.3.  Body\n   The body of a message might be lines of ASCII text or a\n  \
    \ hierarchically structured composition of multimedia body part\n   attachments\
    \ using MIME ([RFC2045], [RFC2046], [RFC2047], [RFC4288],\n   and [RFC2049]).\n"
- title: 4.1.4.  Identity References in a Message
  contents:
  - "4.1.4.  Identity References in a Message\n   Table 1 lists the core identifiers\
    \ present in a message during\n   transit.\n   +----------------------+----------------+---------------------------+\n\
    \   | Layer                | Field          | Set By                    |\n  \
    \ +----------------------+----------------+---------------------------+\n   |\
    \ Message Body         | MIME Header    | Author                    |\n   | Message\
    \ header       | From:          | Author                    |\n   | fields   \
    \            |                |                           |\n   |            \
    \          | Sender:        | Originator                |\n   |              \
    \        | Reply-To:      | Author                    |\n   |                \
    \      | To:, CC:, BCC: | Author                    |\n   |                  \
    \    | Message-ID:    | Originator                |\n   |                    \
    \  | Received:      | Originator, Relay,        |\n   |                      |\
    \                | Receiver                  |\n   |                      | Return-Path:\
    \   | MDA, from MailFrom        |\n   |                      | Resent-*:     \
    \ | Mediator                  |\n   |                      | List-Id:       |\
    \ Mediator                  |\n   |                      | List-*:        | Mediator\
    \                  |\n   | SMTP                 | HELO/EHLO      | Latest Relay\
    \ Client       |\n   |                      | ENVID          | Originator    \
    \            |\n   |                      | MailFrom       | Originator      \
    \          |\n   |                      | RcptTo         | Author            \
    \        |\n   |                      | ORCPT          | Originator          \
    \      |\n   | IP                   | Source Address | Latest Relay Client   \
    \    |\n   +----------------------+----------------+---------------------------+\n\
    \   Legend:\n      Layer - The part of the email architecture that uses the\n\
    \      identifier.\n      Field - The protocol construct that contains the identifier.\n\
    \      Set By - The Actor role responsible for specifying the identifier\n   \
    \   value (and this can be different from the Actor that performs the\n      fill-in\
    \ function for the protocol construct).\n                        Table 1: Layered\
    \ Identities\n   These are the most common address-related fields:\n   RFC5322.From:\
    \  Set by - Author\n      Names and addresses for Authors of the message content\
    \ are listed\n      in the From: field.\n   RFC5322.Reply-To:  Set by - Author\n\
    \      If a Recipient sends a reply message that would otherwise use the\n   \
    \   RFC5322.From field addresses in the original message, the\n      addresses\
    \ in the RFC5322.Reply-To field are used instead.  In\n      other words, this\
    \ field overrides the From: field for responses\n      from Recipients.\n   RFC5322.Sender:\
    \  Set by - Originator\n      This field specifies the address responsible for\
    \ submitting the\n      message to the transfer service.  This field can be omitted\
    \ if it\n      contains the same address as RFC5322.From.  However, omitting this\n\
    \      field does not mean that no Sender is specified; it means that\n      that\
    \ header field is virtual and that the address in the From:\n      field is to\
    \ be used.\n      Specification of the notifications Return Addresses, which are\n\
    \      contained in RFC5321.MailFrom, is made by the RFC5322.Sender.\n      Typically,\
    \ the Return address is the same as the Sender address.\n      However, some usage\
    \ scenarios require it to be different.\n   RFC5322.To/.CC:  Set by - Author\n\
    \      These fields specify MUA Recipient addresses.  However, some or\n     \
    \ all of the addresses in these fields might not be present in the\n      RFC5321.RcptTo\
    \ commands.\n      The distinction between To and CC is subjective.  Generally,\
    \ a To\n      addressee is considered primary and is expected to take action on\n\
    \      the message.  A CC addressee typically receives a copy as a\n      courtesy.\n\
    \   RFC5322.BCC:  Set by - Author\n      A copy of the message might be sent to\
    \ an addressee whose\n      participation is not to be disclosed to the RFC5322.To\
    \ or\n      RFC5322.CC Recipients and, usually, not to the other BCC\n      Recipients.\
    \  The BCC: header field indicates a message copy to\n      such a Recipient.\
    \  Use of this field is discussed in [RFC5322].\n   RFC5321.HELO/.EHLO:  Set by\
    \ - Originator, MSA, MTA\n      Any SMTP client -- including Originator, MSA,\
    \ or MTA -- can\n      specify its hosting domain identity for the SMTP HELO or\
    \ EHLO\n      command operation.\n   RFC3461.ENVID:  Set by - Originator\n   \
    \   The MSA can specify an opaque string, to be included in a DSN, as\n      a\
    \ means of assisting the Return Address Recipient in identifying\n      the message\
    \ that produced a DSN or message tracking.\n   RFC5321.MailFrom:  Set by - Originator\n\
    \      This field is an end-to-end string that specifies an email address\n  \
    \    for receiving return control information, such as returned\n      messages.\
    \  The name of this field is misleading, because it is not\n      required to\
    \ specify either the Author or the Actor responsible for\n      submitting the\
    \ message.  Rather, the Actor responsible for\n      submission specifies the\
    \ RFC5321.MailFrom address.  Ultimately,\n      the simple basis for deciding\
    \ which address needs to be in the\n      RFC5321.MailFrom field is to determine\
    \ which address is to be\n      informed about transfer-level problems (and possibly\
    \ successes).\n   RFC5321.RcptTo:  Set by - Author, Final MTA, MDA\n      This\
    \ field specifies the MUA mailbox address of a Recipient.  The\n      string might\
    \ not be visible in the message content header.  For\n      example, the IMF destination\
    \ address header fields, such as\n      RFC5322.To, might specify a Mailing List\
    \ mailbox, while the\n      RFC5321.RcptTo address specifies a member of that\
    \ list.\n   RFC5321.ORCPT:   Set by - Originator.\n      This is an optional parameter\
    \ to the RCPT command, indicating the\n      original address to which the current\
    \ RCPT TO address corresponds,\n      after a mapping was performed during transit.\
    \  An ORCPT is the\n      only reliable way to correlate a DSN from a multi-Recipient\n\
    \      message transfer with the intended Recipient.\n   RFC5321.Received:  Set\
    \ by - Originator, Relay, Mediator, Dest\n      This field contains trace information,\
    \ including originating host,\n      Relays, Mediators, and MSA host domain names\
    \ and/or IP Addresses.\n   RFC5321.Return-Path:  Set by - Originator\n      The\
    \ MDA records the RFC5321.MailFrom address into the\n      RFC5321.Return-Path\
    \ field.\n   RFC2919.List-Id:  Set by - Mediator, Author\n      This field provides\
    \ a globally unique Mailing List naming\n      framework that is independent of\
    \ particular hosts [RFC2919].\n      The identifier is in the form of a domain\
    \ name; however, the\n      string usually is constructed by combining the two\
    \ parts of an\n      email address.  The result is rarely a true domain name,\
    \ listed in\n      the domain name service, although it can be.\n   RFC2369.List-*:\
    \  Set by - Mediator, Author\n      [RFC2369] defines a collection of message\
    \ header fields for use by\n      Mailing Lists.  In effect, they supply list-specific\
    \ parameters\n      for common Mailing-List user operations.  The identifiers\
    \ for\n      these operations are for the list itself and the user-as-\n     \
    \ subscriber [RFC2369].\n   RFC0791.SourceAddr:  Set by - The Client SMTP sending\
    \ host\n      immediately preceding the current receiving SMTP server\n      [RFC0791]\
    \ defines the basic unit of data transfer for the\n      Internet: the IP datagram.\
    \  It contains a Source Address field\n      that specifies the IP Address for\
    \ the host (interface) from which\n      the datagram was sent.  This information\
    \ is set and provided by\n      the IP layer, which makes it independent of mail-level\
    \ mechanisms.\n      As such, it is often taken to be authoritative, although\
    \ it is\n      possible to provide false addresses.\n"
- title: 4.2.  User-Level Services
  contents:
  - "4.2.  User-Level Services\n   Interactions at the user level entail protocol\
    \ exchanges, distinct\n   from those that occur at lower layers of the Internet\
    \ Mail MHS\n   architecture that is, in turn, above the Internet Transport layer.\n\
    \   Because the motivation for email, and much of its use, is for\n   interaction\
    \ among people, the nature and details of these protocol\n   exchanges often are\
    \ determined by the needs of interpersonal and\n   group communication.  To accommodate\
    \ the idiosyncratic behavior\n   inherent in such communication, only subjective\
    \ guidelines, rather\n   than strict rules, can be offered for some aspects of\
    \ system\n   behavior.  Mailing Lists provide particularly salient examples.\n"
- title: 4.2.1.  Message User Agent (MUA)
  contents:
  - "4.2.1.  Message User Agent (MUA)\n   A Message User Agent (MUA) works on behalf\
    \ of User Actors and User\n   applications.  It is their representative within\
    \ the email service.\n   The Author MUA (aMUA) creates a message and performs\
    \ initial\n   submission into the transfer infrastructure via a Mail Submission\n\
    \   Agent (MSA).  It can also perform any creation- and posting-time\n   archiving\
    \ in its Message Store (aMS).  An MUA aMS can organize\n   messages in many different\
    \ ways.  A common model uses aggregations,\n   called \"folders\"; in IMAP they\
    \ are called \"mailboxes\".  This model\n   allows a folder for messages under\
    \ development (Drafts), a folder for\n   messages waiting to be sent (Queued or\
    \ Unsent), and a folder for\n   messages that have been successfully posted for\
    \ transfer (Sent).  But\n   none of these folders is required.  For example, IMAP\
    \ allows drafts\n   to be stored in any folder, so no Drafts folder needs to be\
    \ present.\n   The Recipient MUA (rMUA) works on behalf of the Recipient to process\n\
    \   received mail.  This processing includes generating user-level\n   disposition\
    \ control messages, displaying and disposing of the\n   received message, and\
    \ closing or expanding the user-communication\n   loop by initiating replies and\
    \ forwarding new messages.\n   NOTE:   Although not shown in Figure 5, an MUA\
    \ itself can have a\n           distributed implementation, such as a \"thin\"\
    \ user-interface\n           module on a constrained device such as a smartphone,\
    \ with\n           most of the MUA functionality running remotely on a more\n\
    \           capable server.  An example of such an architecture might use\n  \
    \         IMAP [RFC3501] for most of the interactions between an MUA\n       \
    \    client and an MUA server.  An approach for such scenarios is\n          \
    \ defined by [RFC4550].\n   A Mediator is a special class of MUA.  It performs\
    \ message\n   re-posting, as discussed in Section 2.1.\n   An MUA can be automated,\
    \ on behalf of a User who is not present at\n   the time the MUA is active.  One\
    \ example is a bulk sending service\n   that has a timed-initiation feature. \
    \ These services are not to be\n   confused with a Mailing List Mediator, since\
    \ there is no incoming\n   message triggering the activity of the automated service.\n\
    \   A popular and problematic MUA is an automatic responder, such as one\n   that\
    \ sends out-of-office notices.  This behavior might be confused\n   with that\
    \ of a Mediator, but this MUA is generating a new message.\n   Automatic responders\
    \ can annoy Users of Mailing Lists unless they\n   follow [RFC3834].\n   The identity\
    \ fields are relevant to a typical MUA:\n      RFC5322.From\n      RFC5322.Reply-To\n\
    \      RFC5322.Sender\n      RFC5322.To, RFC5322.CC\n      RFC5322.BCC\n"
- title: 4.2.2.  Message Store (MS)
  contents:
  - "4.2.2.  Message Store (MS)\n   An MUA can employ a long-term Message Store (MS).\
    \  Figure 5 depicts\n   an Author's MS (aMS) and a Recipient's MS (rMS).  An MS\
    \ can be\n   located on a remote server or on the same machine as the MUA.\n \
    \  An MS acquires messages from an MDA either proactively by a local\n   mechanism\
    \ or even by a standardized mechanism such as SMTP(!), or\n   reactively by using\
    \ POP or IMAP.  The MUA accesses the MS either by a\n   local mechanism or by\
    \ using POP or IMAP.  Using POP for individual\n   message accesses, rather than\
    \ for bulk transfer, is relatively rare\n   and inefficient.\n"
- title: 4.3.  MHS-Level Services
  contents:
  - '4.3.  MHS-Level Services

    '
- title: 4.3.1.  Mail Submission Agent (MSA)
  contents:
  - "4.3.1.  Mail Submission Agent (MSA)\n   A Mail Submission Agent (MSA) accepts\
    \ the message submitted by the\n   aMUA and enforces the policies of the hosting\
    \ ADMD and the\n   requirements of Internet standards.  An MSA represents an unusual\n\
    \   functional dichotomy.  It represents the interests of the Author\n   (aMUA)\
    \ during message posting, to facilitate posting success; it also\n   represents\
    \ the interests of the MHS.  In the architecture, these\n   responsibilities are\
    \ modeled, as shown in Figure 5, by dividing the\n   MSA into two sub-components,\
    \ aMSA and hMSA, respectively.  Transfer\n   of responsibility for a single message,\
    \ from an Author's environment\n   to the MHS, is called \"posting\".  In Figure\
    \ 5, it is marked as the\n   (S) transition, within the MSA.\n   The hMSA takes\
    \ transit responsibility for a message that conforms to\n   the relevant Internet\
    \ standards and to local site policies.  It\n   rejects messages that are not\
    \ in conformance.  The MSA performs final\n   message preparation for submission\
    \ and effects the transfer of\n   responsibility to the MHS, via the hMSA.  The\
    \ amount of preparation\n   depends upon the local implementations.  Examples\
    \ of aMSA tasks\n   include adding header fields, such as Date: and Message-ID:,\
    \ and\n   modifying portions of the message from local notations to Internet\n\
    \   standards, such as expanding an address to its formal IMF\n   representation.\n\
    \   Historically, standards-based MUA/MSA message postings have used SMTP\n  \
    \ [RFC5321].  The standard currently preferred is SUBMISSION [RFC4409].\n   Although\
    \ SUBMISSION derives from SMTP, it uses a separate TCP port\n   and imposes distinct\
    \ requirements, such as access authorization.\n   These identities are relevant\
    \ to the MSA:\n      RFC5321.HELO/.EHLO\n      RFC3461.ENVID\n      RFC5321.MailFrom\n\
    \      RFC5321.RcptTo\n      RFC5321.Received\n      RFC0791.SourceAddr\n"
- title: 4.3.2.  Message Transfer Agent (MTA)
  contents:
  - "4.3.2.  Message Transfer Agent (MTA)\n   A Message Transfer Agent (MTA) relays\
    \ mail for one application-level\n   \"hop\".  It is like a packet switch or IP\
    \ router in that its job is to\n   make routing assessments and to move the message\
    \ closer to the\n   Recipients.  Of course, email objects are typically much larger\
    \ than\n   the payload of a packet or datagram, and the end-to-end latencies are\n\
    \   typically much higher.  Relaying is performed by a sequence of MTAs\n   until\
    \ the message reaches a destination MDA.  Hence, an MTA\n   implements both client\
    \ and server MTA functionality; it does not\n   change addresses in the envelope\
    \ or reformulate the editorial\n   content.  A change in data form, such as to\
    \ MIME Content-Transfer-\n   Encoding, is within the purview of an MTA, but removal\
    \ or replacement\n   of body content is not.  An MTA also adds trace information\n\
    \   [RFC2505].\n   NOTE:   Within a destination ADMD, email-relaying modules can\
    \ make a\n           variety of changes to the message, prior to delivery.  In\n\
    \           such cases, these modules are acting as Gateways, rather than\n  \
    \         MTAs.\n   Internet Mail uses SMTP ([RFC5321], [RFC2821], [RFC0821])\
    \ primarily\n   to effect point-to-point transfers between peer MTAs.  Other transfer\n\
    \   mechanisms include Batch SMTP [RFC2442] and On-Demand Mail Relay\n   (ODMR)\
    \ SMTP [RFC2645].  As with most network-layer mechanisms, the\n   Internet Mail\
    \ SMTP supports a basic level of reliability, by virtue\n   of providing for retransmission\
    \ after a temporary transfer failure.\n   Unlike typical packet switches (and\
    \ Instant Messaging services),\n   Internet Mail MTAs are expected to store messages\
    \ in a manner that\n   allows recovery across service interruptions, such as host-system\n\
    \   shutdown.  The degree of such robustness and persistence by an MTA\n   can\
    \ vary.  The base SMTP specification provides a framework for\n   protocol response\
    \ codes.  An extensible enhancement to this framework\n   is defined in [RFC5248].\n\
    \   Although quite basic, the dominant routing mechanism for Internet\n   Mail\
    \ is the DNS MX record [RFC1035], which specifies an MTA through\n   which the\
    \ queried domain can be reached.  This mechanism presumes a\n   public, or at\
    \ least a common, backbone that permits any attached MTA\n   to connect to any\
    \ other.\n   MTAs can perform any of these well-established roles:\n   Boundary\
    \ MTA:  An MTA that is part of an ADMD and interacts with MTAs\n             \
    \     in other ADMDs.  This is also called a Border MTA.\n                  There\
    \ can be different Boundary MTAs, according to the\n                  direction\
    \ of mail-flow.\n                  Outbound MTA:  An MTA that relays messages\
    \ to other\n                                 ADMDs.\n                  Inbound\
    \ MTA:   An MTA that receives inbound SMTP\n                                 messages\
    \ from MTA Relays in other\n                                 ADMDs, for example,\
    \ an MTA running on\n                                 the host listed as the target\
    \ of an MX\n                                 record.\n   Final MTA:     The MTA\
    \ that transfers a message to the MDA.\n   These identities are relevant to the\
    \ MTA:\n      RFC5321.HELO/.EHLO\n      RFC3461.ENVID\n      RFC5321.MailFrom\n\
    \      RFC5321.RcptTo\n      RFC5322.Received:  Set by - Relay Server\n      RFC0791.SourceAddr\n"
- title: 4.3.3.  Mail Delivery Agent (MDA)
  contents:
  - "4.3.3.  Mail Delivery Agent (MDA)\n   A transfer of responsibility from the MHS\
    \ to a Recipient's\n   environment (mailbox) is called \"delivery\".  In the architecture,\
    \ as\n   depicted in Figure 5, delivery takes place within a Mail Delivery\n \
    \  Agent (MDA) and is shown as the (D) transition from the MHS-oriented\n   MDA\
    \ component (hMDA) to the Recipient-oriented MDA component (rMDA).\n   An MDA\
    \ can provide distinctive, address-based functionality, made\n   possible by its\
    \ detailed information about the properties of the\n   destination address.  This\
    \ information might also be present\n   elsewhere in the Recipient's ADMD, such\
    \ as at an organizational\n   border (Boundary) Relay.  However, it is required\
    \ for the MDA, if\n   only because the MDA is required to know where to deliver\
    \ the\n   message.\n   Like an MSA, an MDA serves two roles, as depicted in Figure\
    \ 5.\n   Formal transfer of responsibility, called \"delivery\", is effected\n\
    \   between the two components that embody these roles and is shown as\n   \"\
    (D)\" in Figure 5.  The MHS portion (hMDA) primarily functions as a\n   server\
    \ SMTP engine.  A common additional role is to redirect the\n   message to an\
    \ alternative address, as specified by the Recipient\n   addressee's preferences.\
    \  The job of the Recipient portion of the MDA\n   (rMDA) is to perform any delivery\
    \ actions that the Recipient\n   specifies.\n   Transfer into the MDA is accomplished\
    \ by a normal MTA transfer\n   mechanism.  Transfer from an MDA to an MS uses\
    \ an access protocol,\n   such as POP or IMAP.\n   NOTE:   The term \"delivery\"\
    \ can refer to the formal, MHS function\n           specified here or to the first\
    \ time a message is displayed to\n           a Recipient.  A simple, practical\
    \ test for whether the MHS-\n           based definition applies is whether a\
    \ DSN can be generated.\n   These identities are relevant to the MDA:\n      RFC5321.Return-Path:\
    \  Set by - Author Originator or Mediator\n         Originator\n         The MDA\
    \ records the RFC5321.MailFrom address into the\n         RFC5321.Return-Path\
    \ field.\n      RFC5322.Received:  Set by - MDA server\n         An MDA can record\
    \ a Received: header field to indicate trace\n         information, including\
    \ source host and receiving host domain\n         names and/or IP Addresses.\n"
- title: 4.4.  Transition Modes
  contents:
  - "4.4.  Transition Modes\n   From the origination site to the point of delivery,\
    \ Internet Mail\n   usually follows a \"push\" model.  That is, the Actor that\
    \ holds the\n   message initiates transfer to the next venue, typically with SMTP\n\
    \   [RFC5321] or the Local Mail Transfer Protocol (LMTP) [RFC2033].  With\n  \
    \ a \"pull\" model, the Actor that holds the message waits for the Actor\n   in\
    \ the next venue to initiate a request for transfer.  Standardized\n   mechanisms\
    \ for pull-based MHS transfer are ETRN [RFC1985] and ODMR\n   [RFC2645].\n   After\
    \ delivery, the Recipient's MUA (or MS) can gain access by having\n   the message\
    \ pushed to it or by having the receiver of access pull the\n   message, such\
    \ as by using POP [RFC1939] and IMAP [RFC3501].\n"
- title: 4.5.  Implementation and Operation
  contents:
  - "4.5.  Implementation and Operation\n   A discussion of any interesting system\
    \ architecture often bogs down\n   when architecture and implementation are confused.\
    \  An architecture\n   defines the conceptual functions of a service, divided\
    \ into discrete\n   conceptual modules.  An implementation of that architecture\
    \ can\n   combine or separate architectural components, as needed for a\n   particular\
    \ operational environment.  For example, a software system\n   that primarily\
    \ performs message relaying is an MTA, yet it might also\n   include MDA functionality.\
    \  That same MTA system might be able to\n   interface with non-Internet email\
    \ services and thus perform both as\n   an MTA and as a Gateway.\n   Similarly,\
    \ implemented modules might be configured to form\n   elaborations of the architecture.\
    \  An interesting example is a\n   distributed MS.  One portion might be a remote\
    \ server and another\n   might be local to the MUA.  As discussed in [RFC1733],\
    \ there are\n   three operational relationships among such MSs:\n   Online:  The\
    \ MS is remote, and messages are accessible only when the\n      MUA is attached\
    \ to the MS so that the MUA will re-fetch all or\n      part of a message from\
    \ one session to the next.\n   Offline:  The MS is local to the User, and messages\
    \ are completely\n      moved from any remote store, rather than (also) being\
    \ retained\n      there.\n   Disconnected:  An rMS and a uMS are kept synchronized,\
    \ for all or\n      part of their contents, while they are connected.  When they\
    \ are\n      disconnected, mail can arrive at the rMS and the User can make\n\
    \      changes to the uMS.  The two stores are re-synchronized when they\n   \
    \   are reconnected.\n"
- title: 5.  Mediators
  contents:
  - "5.  Mediators\n   Basic message transfer from Author to Recipients is accomplished\
    \ by\n   using an asynchronous store-and-forward communication infrastructure\n\
    \   in a sequence of independent transmissions through some number of\n   MTAs.\
    \  A very different task is a sequence of postings and deliveries\n   through\
    \ Mediators.  A Mediator forwards a message through a\n   re-posting process.\
    \  The Mediator shares some functionality with\n   basic MTA relaying, but has\
    \ greater flexibility in both addressing\n   and content than is available to\
    \ MTAs.\n   This is the core set of message information that is commonly set by\n\
    \   all types of Mediators:\n      RFC5321.HELO/.EHLO:  Set by - Mediator Originator\n\
    \      RFC3461.ENVID:  Set by - Mediator Originator\n      RFC5321.RcptTo:  Set\
    \ by - Mediator Author\n      RFC5321.Received:  Set by - Mediator Dest\n    \
    \     The Mediator can record received information to indicate the\n         delivery\
    \ to the original address and submission to the alias\n         address.  The\
    \ trace of Received: header fields can include\n         everything from original\
    \ posting, through relaying, to final\n         delivery.\n   The aspect of a\
    \ Mediator that distinguishes it from any other MUA\n   creating a message is\
    \ that a Mediator preserves the integrity and\n   tone of the original message,\
    \ including the essential aspects of its\n   origination information.  The Mediator\
    \ might also add commentary.\n   Examples of MUA messages that a Mediator does\
    \ not create include:\n      New message that forwards an existing message:\n\
    \         Although this action provides a basic template for a class of\n    \
    \     Mediators, its typical occurrence is not, itself, an example of\n      \
    \   a Mediator.  The new message is viewed as being from the Actor\n         that\
    \ is doing the forwarding, rather than from the original\n         Author.\n \
    \        A new message encapsulates the original message and is seen as\n    \
    \     from the new Originator.  This Mediator Originator might add\n         commentary\
    \ and can modify the original message content.\n         Because the forwarded\
    \ message is a component of the message\n         sent by the new Originator,\
    \ the new message creates a new\n         dialogue.  However, the final Recipient\
    \ still sees the\n         contained message as from the original Author.\n  \
    \    Reply:\n         When a Recipient responds to the Author of a message, the\
    \ new\n         message is not typically viewed as a forwarding of the\n     \
    \    original.  Its focus is the new content, although it might\n         contain\
    \ all or part of the material from the original message.\n         The earlier\
    \ material is merely contextual and secondary.  This\n         includes automated\
    \ replies, such as vacation out-of-office\n         notices, as discussed in Section\
    \ 4.2.1.\n      Annotation:\n         The integrity of the original message is\
    \ usually preserved, but\n         one or more comments about the message are\
    \ added in a manner\n         that distinguishes commentary from original text.\
    \  The primary\n         purpose of the new message is to provide commentary from\
    \ a new\n         Author, similar to a Reply.\n   The remainder of this section\
    \ describes common examples of Mediators.\n"
- title: 5.1.  Alias
  contents:
  - "5.1.  Alias\n   One function of an MDA is to determine the internal location\
    \ of a\n   mailbox in order to perform delivery.  An Alias is a simple\n   re-addressing\
    \ facility that provides one or more new Internet Mail\n   addresses, rather than\
    \ a single, internal one; the message continues\n   through the transfer service,\
    \ for delivery to one or more alternate\n   addresses.  Although typically implemented\
    \ as part of an MDA, this\n   facility is a Recipient function.  It resubmits\
    \ the message, although\n   all handling information except the envelope Recipient\n\
    \   (rfc5321.RcptTo) address is retained.  In particular, the Return\n   Address\
    \ (rfc5321.MailFrom) is unchanged.\n   What is distinctive about this forwarding\
    \ mechanism is how closely it\n   resembles normal MTA store-and-forward relaying.\
    \  Its only\n   significant difference is that it changes the RFC5321.RcptTo value.\n\
    \   Because this change is so small, aliasing can be viewed as a part of\n   the\
    \ lower-level mail-relaying activity.  However, this small change\n   has a large\
    \ semantic impact: The designated Recipient has chosen a\n   new Recipient.\n\
    \   NOTE:   When the replacement list includes more than one address, the\n  \
    \         alias is increasingly likely to have delivery problems.  Any\n     \
    \      problem reports go to the original Author, not the\n           administrator\
    \ of the alias entry.  This makes it more\n           difficult to resolve the\
    \ problem, because the original Author\n           has no knowledge of the Alias\
    \ mechanism.\n   Including the core set of message information listed at the beginning\n\
    \   of this section, Alias typically changes:\n      RFC5322.To/.CC/.BCC:  Set\
    \ by - Author\n         These fields retain their original addresses.\n      RFC5321.MailFrom:\
    \  Set by - Author\n         The benefit of retaining the original MailFrom value\
    \ is to\n         ensure that an Actor related to the originating ADMD knows\n\
    \         there has been a delivery problem.  On the other hand, the\n       \
    \  responsibility for handling problems, when transiting from the\n         original\
    \ Recipient mailbox to the alias mailbox usually lies\n         with that original\
    \ Recipient, because the Alias mechanism is\n         strictly under that Recipient's\
    \ control.  Retaining the\n         original MailFrom address prevents this.\n"
- title: 5.2.  ReSender
  contents:
  - "5.2.  ReSender\n   Also called the ReDirector, the ReSender's actions differ\
    \ from\n   forwarding because the Mediator \"splices\" a message's addressing\n\
    \   information to connect the Author of the original message with the\n   Recipient\
    \ of the new message.  This connection permits them to have\n   direct exchange,\
    \ using their normal MUA Reply functions, while also\n   recording full reference\
    \ information about the Recipient who served\n   as a Mediator.  Hence, the new\
    \ Recipient sees the message as being\n   from the original Author, even if the\
    \ Mediator adds commentary.\n   Including the core set of message information\
    \ listed at the beginning\n   of this section, these identities are relevant to\
    \ a resent message:\n      RFC5322.From:  Set by - original Author\n         Names\
    \ and addresses for the original Author of the message\n         content are retained.\
    \  The free-form (display-name) portion of\n         the address might be modified\
    \ to provide an informal reference\n         to the ReSender.\n      RFC5322.Reply-To:\
    \  Set by - original Author\n         If this field is present in the original\
    \ message, it is\n         retained in the resent message.\n      RFC5322.Sender:\
    \  Set by - Author's Originator or Mediator\n         Originator\n      RFC5322.To/.CC/.BCC:\
    \  Set by - original Author\n         These fields specify the original message\
    \ Recipients.\n      RFC5322.Resent-From:   Set by - Mediator Author\n       \
    \  This address is of the original Recipient who is redirecting\n         the\
    \ message.  Otherwise, the same rules apply to the Resent-\n         From: field\
    \ as to an original RFC5322.From field.\n      RFC5322.Resent-Sender:  Set by\
    \ - Mediator Originator\n         The address of the Actor responsible for resubmitting\
    \ the\n         message.  As with RFC5322.Sender, this field can be omitted\n\
    \         when it contains the same address as RFC5322.Resent-From.\n      RFC5322.Resent-To/-CC/-BCC:\
    \  Set by - Mediator Author\n         The addresses of the new Recipients who\
    \ are now able to reply\n         to the original Author.\n      RFC5321.MailFrom:\
    \  Set by - Mediator Originator\n         The Actor responsible for resubmission\
    \ (RFC5322.Resent-Sender)\n         is also responsible for specifying the new\
    \ MailFrom address.\n"
- title: 5.3.  Mailing Lists
  contents:
  - "5.3.  Mailing Lists\n   A Mailing List receives messages as an explicit addressee\
    \ and then\n   re-posts them to a list of subscribed members.  The Mailing List\n\
    \   performs a task that can be viewed as an elaboration of the ReSender.\n  \
    \ In addition to sending the new message to a potentially large number\n   of\
    \ new Recipients, the Mailing List can modify content, for example,\n   by deleting\
    \ attachments, converting the format, and adding list-\n   specific comments.\
    \  Mailing Lists also archive messages posted by\n   Authors.  Still the message\
    \ retains characteristics of being from the\n   original Author.\n   Including\
    \ the core set of message information listed at the beginning\n   of this section,\
    \ these identities are relevant to a Mailing List\n   processor when submitting\
    \ a message:\n      RFC2919.List-Id:  Set by - Mediator Author\n      RFC2369.List-*:\
    \  Set by - Mediator Author\n      RFC5322.From:  Set by - original Author\n \
    \        Names and email addresses for the original Author of the\n         message\
    \ content are retained.\n      RFC5322.Reply-To:  Set by - Mediator or original\
    \ Author\n         Although problematic, it is common for a Mailing List to assign\n\
    \         its own addresses to the Reply-To: header field of messages\n      \
    \   that it posts.  This assignment is intended to ensure that\n         replies\
    \ go to all list members, rather than to only the\n         original Author. \
    \ As a User Actor, a Mailing List is the Author\n         of the new message and\
    \ can legitimately set the Reply-To:\n         value.  As a Mediator attempting\
    \ to represent the message on\n         behalf of its original Author, creating\
    \ or modifying a\n         Reply-To: field can be viewed as violating that Author's\n\
    \         intent.  When the Reply-To is modified in this way, a reply\n      \
    \   that is meant only for the original Author will instead go to\n         the\
    \ entire list.  When the Mailing List does not set the field,\n         a reply\
    \ meant for the entire list can instead go only to the\n         original Author.\
    \  At best, either choice is a matter of group\n         culture for the particular\
    \ list.\n      RFC5322.Sender:  Set by - Author Originator or Mediator Originator\n\
    \         This field usually specifies the address of the Actor\n         responsible\
    \ for Mailing List operations.  Mailing Lists that\n         operate in a manner\
    \ similar to a simple MTA Relay preserve as\n         much of the original handling\
    \ information as possible,\n         including the original RFC5322.Sender field.\
    \  (Note that this\n         mode of operation causes the Mailing List to behave\
    \ much like\n         an Alias, with a possible difference in number of new\n\
    \         addressees.)\n      RFC5322.To/.CC:  Set by - original Author\n    \
    \     These fields usually contain the original list of Recipient\n         addresses.\n\
    \      RFC5321.MailFrom:  Set by - Mediator Originator\n         Because a Mailing\
    \ List can modify the content of a message in\n         any way, it is responsible\
    \ for that content; that is, it is an\n         Author.  As such, the Return Address\
    \ is specified by the\n         Mailing List.  Although it is plausible for the\
    \ Mailing List to\n         reuse the Return Address employed by the original\
    \ Originator,\n         notifications sent to that address after a message has\
    \ been\n         processed by a Mailing List could be problematic.\n"
- title: 5.4.  Gateways
  contents:
  - "5.4.  Gateways\n   A Gateway performs the basic routing and transfer work of\
    \ message\n   relaying, but it also is permitted to modify content, structure,\n\
    \   address, or attributes as needed to send the message into a messaging\n  \
    \ environment that operates under different standards or potentially\n   incompatible\
    \ policies.  When a Gateway connects two differing\n   messaging services, its\
    \ role is easy to identify and understand.\n   When it connects environments that\
    \ follow similar technical\n   standards, but significantly different administrative\
    \ policies, it is\n   easy to view a Gateway as merely an MTA.\n   The critical\
    \ distinction between an MTA and a Gateway is that a\n   Gateway can make substantive\
    \ changes to a message to map between the\n   standards.  In virtually all cases,\
    \ this mapping results in some\n   degree of semantic loss.  The challenge of\
    \ Gateway design is to\n   minimize this loss.  Standardized Gateways to Internet\
    \ Mail are\n   facsimile [RFC4143], voicemail [RFC3801], and the Multimedia\n\
    \   Messaging Service (MMS) [RFC4356].\n   A Gateway can set any identity field\
    \ available to an MUA.  Including\n   the core set of message information listed\
    \ at the beginning of this\n   section, these identities are typically relevant\
    \ to Gateways:\n      RFC5322.From:  Set by - original Author\n         Names\
    \ and addresses for the original Author of the message\n         content are retained.\
    \  As for all original addressing\n         information in the message, the Gateway\
    \ can translate addresses\n         as required to continue to be useful in the\
    \ target environment.\n      RFC5322.Reply-To:  Set by - original Author\n   \
    \      It is best for a Gateway to retain this information, if it is\n       \
    \  present.  The ability to perform a successful reply by a\n         Recipient\
    \ is a typical test of Gateway functionality.\n      RFC5322.Sender:  Set by -\
    \ Author Originator or Mediator Originator\n         This field can retain the\
    \ original value or can be set to a new\n         address.\n      RFC5322.To/.CC/.BCC:\
    \  Set by - original Recipient\n         These fields usually retain their original\
    \ addresses.\n      RFC5321.MailFrom:  Set by - Author Originator or Mediator\n\
    \         Originator\n         The Actor responsible for handling the message\
    \ can specify a\n         new address to receive handling notices.\n"
- title: 5.5.  Boundary Filter
  contents:
  - "5.5.  Boundary Filter\n   To enforce security boundaries, organizations can subject\
    \ messages to\n   analysis for conformance with its safety policies.  An example\
    \ is\n   detection of content classed as spam or a virus.  A filter might\n  \
    \ alter the content to render it safe, such as by removing content\n   deemed\
    \ unacceptable.  Typically, these actions add content to the\n   message that\
    \ records the actions.\n"
- title: 6.  Considerations
  contents:
  - '6.  Considerations

    '
- title: 6.1.  Security Considerations
  contents:
  - "6.1.  Security Considerations\n   This document describes the existing Internet\
    \ Mail architecture.  It\n   introduces no new capabilities.  The security considerations\
    \ of this\n   deployed architecture are documented extensively in the technical\n\
    \   specifications referenced by this document.  These specifications\n   cover\
    \ classic security topics, such as authentication and privacy.\n   For example,\
    \ email-transfer protocols can use standardized mechanisms\n   for operation over\
    \ authenticated and/or encrypted links, and message\n   content has similar protection\
    \ standards available.  Examples of such\n   mechanisms include SMTP-TLS [RFC3207],\
    \ SMTP-Auth [RFC4954], OpenPGP\n   [RFC4880], and S/MIME [RFC3851].\n   The core\
    \ of the Internet Mail architecture does not impose any\n   security requirements\
    \ or functions on the end-to-end or hop-by-hop\n   components.  For example, it\
    \ does not require participant\n   authentication and does not attempt to prevent\
    \ data disclosure.\n   Particular message attributes might expose specific security\n\
    \   considerations.  For example, the blind carbon copy feature of the\n   architecture\
    \ invites disclosure concerns, as discussed in Section 7.2\n   of [RFC5321] and\
    \ Section 5 of [RFC5322].  Transport of text or non-\n   text content in this\
    \ architecture has security considerations that\n   are discussed in [RFC5322],\
    \ [RFC2045], [RFC2046], and [RFC4288];\n   also, security considerations are present\
    \ for some of the media types\n   registered with IANA.\n   Agents that automatically\
    \ respond to email raise significant security\n   considerations, as discussed\
    \ in [RFC3834].  Gateway behaviors affect\n   end-to-end security services, as\
    \ discussed in [RFC2480].  Security\n   considerations for boundary filters are\
    \ discussed in [RFC5228].\n   See Section 7.1 of [RFC5321] for a discussion of\
    \ the topic of\n   origination validation.  As mentioned in Section 4.1.4, it\
    \ is common\n   practice for components of this architecture to use the\n   RFC0791.SourceAddr\
    \ to make policy decisions [RFC2505], although the\n   address can be \"spoofed\"\
    .  It is possible to use it without\n   authorization.  SMTP and Submission authentication\
    \ ([RFC4409],\n   [RFC4954]) provide more secure alternatives.\n   The discussion\
    \ of trust boundaries, ADMDs, Actors, roles, and\n   responsibilities in this\
    \ document highlights the relevance and\n   potential complexity of security factors\
    \ for operation of an Internet\n   Mail service.  The core design of Internet\
    \ Mail to encourage open and\n   casual exchange of messages has met with scaling\
    \ challenges, as the\n   population of email participants has grown to include\
    \ those with\n   problematic practices.  For example, spam, as defined in [RFC2505],\n\
    \   is a by-product of this architecture.  A number of Standards Track or\n  \
    \ BCP documents on the subject have been issued (see [RFC2505],\n   [RFC5068],\
    \ and [RFC5235]).\n"
- title: 6.2.  Internationalization
  contents:
  - "6.2.  Internationalization\n   The core Internet email standards are based on\
    \ the use of US-ASCII --\n   that is, SMTP [RFC5321] and IMF [RFC5322], as well\
    \ as their\n   predecessors.  They describe the transport and composition of\n\
    \   messages as composed strictly of US-ASCII 7-bit encoded characters.\n   The\
    \ standards have been incrementally enhanced to allow for\n   characters outside\
    \ of this limited set, while retaining mechanisms\n   for backwards-compatibility.\
    \  Specifically:\n   o  The MIME specifications ([RFC2045], [RFC2046], [RFC2047],\n\
    \      [RFC2049]) allow for the use of coded character sets and\n      character-encoding\
    \ schemes (\"charsets\" in MIME terminology) other\n      than US-ASCII.  MIME's\
    \ [RFC2046] allows the textual content of a\n      message to have a label affixed\
    \ that specifies the charset used in\n      that content.  Equally, MIME's [RFC2047]\
    \ allows the textual\n      content of certain header fields in a message to be\
    \ similarly\n      labeled.  However, since messages might be transported over\
    \ SMTP\n      implementations only capable of transporting 7-bit encoded\n   \
    \   characters, MIME's [RFC2045] also provides for \"content transfer\n      encoding\"\
    \ so that characters of other charsets can be re-encoded\n      as an overlay\
    \ to US-ASCII.\n   o  MIME's [RFC2045] allows for the textual content of a message\
    \ to be\n      in an 8-bit character-encoding scheme.  In order to transport\n\
    \      these without re-encoding them, the SMTP specification supports an\n  \
    \    option [RFC1652] that permits the transport of such textual\n      content.\
    \  However, the [RFC1652] option does not address the use\n      of 8-bit content\
    \ in message header fields, and therefore [RFC2047]\n      encoding is still required\
    \ for those.\n   o  A series of experimental protocols on Email Address\n    \
    \  Internationalization (EAI) have been released that extend SMTP and\n      IMF\
    \ to allow for 8-bit encoded characters to appear in addresses\n      and other\
    \ information throughout the header fields of messages.\n      [RFC5335] specifies\
    \ the format of such message header fields\n      (which encode the characters\
    \ in UTF-8), and [RFC5336] specifies an\n      SMTP option for the transport of\
    \ these messages.\n   o  MIME's [RFC2045] and [RFC2046] allow for the transport\
    \ of true\n      multimedia material; such material enables internationalization\n\
    \      because it is not restricted to any particular language or locale.\n  \
    \ o  The formats for Delivery Status Notifications (DSNs -- [RFC3462],\n     \
    \ [RFC3463], [RFC3464]) and Message Disposition Notifications (MDNs\n      --\
    \ [RFC3798]) include both a structured and unstructured\n      representation\
    \ of the notification.  In the event that the\n      unstructured representation\
    \ is in the wrong language or is\n      otherwise unsuitable for use, this allows\
    \ an MUA to construct its\n      own appropriately localized representation of\
    \ notification for\n      display to the User.\n   o  POP and IMAP have no difficulties\
    \ with handling MIME messages,\n      including ones containing 8bit, and therefore\
    \ are not a source of\n      internationalization issues.\n   Hence, the use of\
    \ UTF-8 is fully established in existing Internet\n   Mail.  However, support\
    \ for long-standing encoding forms is retained\n   and is still used.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC0791]  Postel, J., \"Internet Protocol\",\
    \ STD 5, RFC 791,\n              September 1981.\n   [RFC1034]  Mockapetris, P.,\
    \ \"Domain names - concepts and facilities\",\n              STD 13, RFC 1034,\
    \ November 1987.\n   [RFC1035]  Mockapetris, P., \"Domain names - implementation\
    \ and\n              specification\", STD 13, RFC 1035, November 1987.\n   [RFC1939]\
    \  Myers, J. and M. Rose, \"Post Office Protocol - Version 3\",\n            \
    \  STD 53, RFC 1939, May 1996.\n   [RFC2045]  Freed, N. and N. Borenstein, \"\
    Multipurpose Internet Mail\n              Extensions (MIME) Part One: Format of\
    \ Internet Message\n              Bodies\", RFC 2045, November 1996.\n   [RFC2046]\
    \  Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n              Extensions\
    \ (MIME) Part Two: Media Types\", RFC 2046,\n              November 1996.\n  \
    \ [RFC2047]  Moore, K., \"MIME (Multipurpose Internet Mail Extensions)\n     \
    \         Part Three: Message Header Extensions for Non-ASCII Text\",\n      \
    \        RFC 2047, November 1996.\n   [RFC2049]  Freed, N. and N. Borenstein,\
    \ \"Multipurpose Internet Mail\n              Extensions (MIME) Part Five: Conformance\
    \ Criteria and\n              Examples\", RFC 2049, November 1996.\n   [RFC2181]\
    \  Elz, R. and R. Bush, \"Clarifications to the DNS\n              Specification\"\
    , RFC 2181, July 1997.\n   [RFC2369]  Neufeld, G. and J. Baer, \"The Use of URLs\
    \ as Meta-Syntax\n              for Core Mail List Commands and their Transport\
    \ through\n              Message Header Fields\", RFC 2369, July 1998.\n   [RFC2645]\
    \  Gellens, R., \"ON-DEMAND MAIL RELAY (ODMR) SMTP with\n              Dynamic\
    \ IP Addresses\", RFC 2645, August 1999.\n   [RFC2919]  Chandhok, R. and G. Wenger,\
    \ \"List-Id: A Structured Field\n              and Namespace for the Identification\
    \ of Mailing Lists\",\n              RFC 2919, March 2001.\n   [RFC3192]  Allocchio,\
    \ C., \"Minimal FAX address format in Internet\n              Mail\", RFC 3192,\
    \ October 2001.\n   [RFC3297]  Klyne, G., Iwazaki, R., and D. Crocker, \"Content\n\
    \              Negotiation for Messaging Services based on Email\",\n        \
    \      RFC 3297, July 2002.\n   [RFC3458]  Burger, E., Candell, E., Eliot, C.,\
    \ and G. Klyne, \"Message\n              Context for Internet Mail\", RFC 3458,\
    \ January 2003.\n   [RFC3461]  Moore, K., \"Simple Mail Transfer Protocol (SMTP)\
    \ Service\n              Extension for Delivery Status Notifications (DSNs)\"\
    ,\n              RFC 3461, January 2003.\n   [RFC3462]  Vaudreuil, G., \"The Multipart/Report\
    \ Content Type for the\n              Reporting of Mail System Administrative\
    \ Messages\",\n              RFC 3462, January 2003.\n   [RFC3463]  Vaudreuil,\
    \ G., \"Enhanced Mail System Status Codes\",\n              RFC 3463, January\
    \ 2003.\n   [RFC3501]  Crispin, M., \"INTERNET MESSAGE ACCESS PROTOCOL - VERSION\n\
    \              4rev1\", RFC 3501, March 2003.\n   [RFC3798]  Hansen, T. and G.\
    \ Vaudreuil, \"Message Disposition\n              Notification\", RFC 3798, May\
    \ 2004.\n   [RFC3834]  Moore, K., \"Recommendations for Automatic Responses to\n\
    \              Electronic Mail\", RFC 3834, August 2004.\n   [RFC3864]  Klyne,\
    \ G., Nottingham, M., and J. Mogul, \"Registration\n              Procedures for\
    \ Message Header Fields\", BCP 90, RFC 3864,\n              September 2004.\n\
    \   [RFC4021]  Klyne, G. and J. Palme, \"Registration of Mail and MIME\n     \
    \         Header Fields\", RFC 4021, March 2005.\n   [RFC4288]  Freed, N. and\
    \ J. Klensin, \"Media Type Specifications and\n              Registration Procedures\"\
    , BCP 13, RFC 4288, December 2005.\n   [RFC4289]  Freed, N. and J. Klensin, \"\
    Multipurpose Internet Mail\n              Extensions (MIME) Part Four: Registration\
    \ Procedures\",\n              BCP 13, RFC 4289, December 2005.\n   [RFC4409]\
    \  Gellens, R. and J. Klensin, \"Message Submission for Mail\",\n            \
    \  RFC 4409, April 2006.\n   [RFC4550]  Maes, S. and A. Melnikov, \"Internet Email\
    \ to Support\n              Diverse Service Environments (Lemonade) Profile\"\
    ,\n              RFC 4550, June 2006.\n   [RFC5228]  Guenther, P. and T. Showalter,\
    \ \"Sieve: An Email Filtering\n              Language\", RFC 5228, January 2008.\n\
    \   [RFC5248]  Hansen, T. and J. Klensin, \"A Registry for SMTP Enhanced\n   \
    \           Mail System Status Codes\", BCP 138, RFC 5248, June 2008.\n   [RFC5321]\
    \  Klensin, J., \"Simple Mail Transfer Protocol\", RFC 5321,\n              October\
    \ 2008.\n   [RFC5322]  Resnick, P., Ed., \"Internet Message Format\", RFC 5322,\n\
    \              October 2008.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [RFC0733]  Crocker, D., Vittal, J., Pogran,\
    \ K., and D. Henderson,\n              \"Standard for the format of ARPA network\
    \ text messages\",\n              RFC 733, November 1977.\n   [RFC0821]  Postel,\
    \ J., \"Simple Mail Transfer Protocol\", STD 10,\n              RFC 821, August\
    \ 1982.\n   [RFC0822]  Crocker, D., \"Standard for the format of ARPA Internet\n\
    \              text messages\", STD 11, RFC 822, August 1982.\n   [RFC1506]  Houttuin,\
    \ J., \"A Tutorial on Gatewaying between X.400 and\n              Internet Mail\"\
    , RFC 1506, August 1993.\n   [RFC1652]  Klensin, J., Freed, N., Rose, M., Stefferud,\
    \ E., and D.\n              Crocker, \"SMTP Service Extension for 8bit-MIMEtransport\"\
    ,\n              RFC 1652, July 1994.\n   [RFC1733]  Crispin, M., \"Distributed\
    \ Electronic Mail Models in\n              IMAP4\", RFC 1733, December 1994.\n\
    \   [RFC1767]  Crocker, D., \"MIME Encapsulation of EDI Objects\",\n         \
    \     RFC 1767, March 1995.\n   [RFC1985]  De Winter, J., \"SMTP Service Extension\
    \ for Remote Message\n              Queue Starting\", RFC 1985, August 1996.\n\
    \   [RFC2033]  Myers, J., \"Local Mail Transfer Protocol\", RFC 2033,\n      \
    \        October 1996.\n   [RFC2142]  Crocker, D., \"MAILBOX NAMES FOR COMMON\
    \ SERVICES, ROLES AND\n              FUNCTIONS\", RFC 2142, May 1997.\n   [RFC2442]\
    \  Freed, N., Newman, D., and Hoy, M., \"The Batch SMTP Media\n              Type\"\
    , RFC 2442, November 1998.\n   [RFC2480]  Freed, N., \"Gateways and MIME Security\
    \ Multiparts\",\n              RFC 2480, January 1999.\n   [RFC2505]  Lindberg,\
    \ G., \"Anti-Spam Recommendations for SMTP MTAs\",\n              BCP 30, RFC\
    \ 2505, February 1999.\n   [RFC2821]  Klensin, J., \"Simple Mail Transfer Protocol\"\
    , RFC 2821,\n              April 2001.\n   [RFC2822]  Resnick, P., \"Internet\
    \ Message Format\", RFC 2822,\n              April 2001.\n   [RFC3207]  Hoffman,\
    \ P., \"SMTP Service Extension for Secure SMTP over\n              Transport Layer\
    \ Security\", RFC 3207, February 2002.\n   [RFC3464]  Moore, K. and G. Vaudreuil,\
    \ \"An Extensible Message Format\n              for Delivery Status Notifications\"\
    , RFC 3464,\n              January 2003.\n   [RFC3801]  Vaudreuil, G. and G. Parsons,\
    \ \"Voice Profile for Internet\n              Mail - version 2 (VPIMv2)\", RFC\
    \ 3801, June 2004.\n   [RFC3851]  Ramsdell, B., \"Secure/Multipurpose Internet\
    \ Mail\n              Extensions (S/MIME) Version 3.1 Message Specification\"\
    ,\n              RFC 3851, July 2004.\n   [RFC3885]  Allman, E. and T. Hansen,\
    \ \"SMTP Service Extension for\n              Message Tracking\", RFC 3885, September\
    \ 2004.\n   [RFC4142]  Crocker, D. and G. Klyne, \"Full-mode Fax Profile for\n\
    \              Internet Mail (FFPIM)\", RFC 4142, November 2005.\n   [RFC4143]\
    \  Toyoda, K. and D. Crocker, \"Facsimile Using Internet Mail\n              (IFAX)\
    \ Service of ENUM\", RFC 4143, November 2005.\n   [RFC4356]  Gellens, R., \"Mapping\
    \ Between the Multimedia Messaging\n              Service (MMS) and Internet Mail\"\
    , RFC 4356, January 2006.\n   [RFC4880]  Callas, J., Donnerhacke, L., Finney,\
    \ H., Shaw, D., and R.\n              Thayer, \"OpenPGP Message Format\", RFC\
    \ 4880, November 2007.\n   [RFC4954]  Siemborski, R. and A. Melnikov, \"SMTP Service\
    \ Extension\n              for Authentication\", RFC 4954, July 2007.\n   [RFC5068]\
    \  Hutzler, C., Crocker, D., Resnick, P., Allman, E., and T.\n              Finch,\
    \ \"Email Submission Operations: Access and\n              Accountability Requirements\"\
    , BCP 134, RFC 5068,\n              November 2007.\n   [RFC5235]  Daboo, C., \"\
    Sieve Email Filtering: Spamtest and Virustest\n              Extensions\", RFC\
    \ 5235, January 2008.\n   [RFC5335]  Abel, Y., \"Internationalized Email Headers\"\
    , RFC 5335,\n              September 2008.\n   [RFC5336]  Yao, J. and W. Mao,\
    \ \"SMTP Extension for Internationalized\n              Email Addresses\", RFC\
    \ 5336, September 2008.\n   [Tussle]   Clark, D., Wroclawski, J., Sollins, K.,\
    \ and R. Braden,\n              \"Tussle in Cyberspace: Defining Tomorrow's Internet\"\
    ,\n              ACM SIGCOMM, 2002.\n"
- title: Appendix A.  Acknowledgments
  contents:
  - "Appendix A.  Acknowledgments\n   This work began in 2004 and has evolved through\
    \ numerous rounds of\n   community review; it derives from a section in an early\
    \ version of\n   [RFC5068].  Over its 5 years of development, the document has\
    \ gone\n   through 14 incremental versions, with vigorous community review that\n\
    \   produced many substantive changes.  Review was performed in the IETF\n   and\
    \ other email technical venues.  Although not a formal activity of\n   the IETF,\
    \ issues with the document's contents were resolved using the\n   classic style\
    \ of IETF community open, group decision-making.  The\n   document is already\
    \ cited in other work, such as in IMAP and Sieve\n   specifications and in academic\
    \ classwork.  The step of standardizing\n   is useful to provide a solid and stable\
    \ reference to the Internet's\n   now-complex email service.\n   Details of the\
    \ Originator Actor role was greatly clarified during\n   discussions in the IETF's\
    \ Marid working group.\n   Graham Klyne, Pete Resnick, and Steve Atkins provided\
    \ thoughtful\n   insight on the framework and details of the original drafts,\
    \ as did\n   Chris Newman for the final versions, while also serving as cognizant\n\
    \   Area Director for the document.  Tony Hansen served as document\n   shepherd\
    \ through the IETF process.\n   Later reviews and suggestions were provided by\
    \ Eric Allman, Nathaniel\n   Borenstein, Ed Bradford, Cyrus Daboo, Frank Ellermann,\
    \ Tony Finch,\n   Ned Freed, Eric Hall, Willemien Hoogendoorn, Brad Knowles, John\n\
    \   Leslie, Bruce Valdis Kletnieks, Mark E. Mallett, David MacQuigg,\n   Alexey\
    \ Melnikov, der Mouse, S. Moonesamy, Daryl Odnert, Rahmat M.\n   Samik-Ibrahim,\
    \ Marshall Rose, Hector Santos, Jochen Topf, Greg\n   Vaudreuil, Patrick Cain,\
    \ Paul Hoffman, Vijay Gurbani, and Hans\n   Lachman.\n   Diligent early proof-reading\
    \ was performed by Bruce Lilly.  Diligent\n   professional technical editing was\
    \ provided by Susan Hunziker.\n   The final stages of development for this document\
    \ were guided by a\n   design team comprising Alexey Melnikov, Pete Resnick, Carl\
    \ S.\n   Gutekunst, Jeff Macdonald, Randall Gellens, Tony Hansen, and Tony\n \
    \  Finch.  Pete Resnick developed the final version of the section on\n   internationalization.\n"
- title: Index
  contents:
  - "Index\n   7\n      7-bit  44\n   A\n      accountability  12\n      accountable\
    \  13-14\n      Actor\n         Administrative  14\n         Author  10\n    \
    \     Consumer  15\n         Edge  15\n         Gateway  13\n         Originator\
    \  12\n         Recipient  10\n         Return Handler  10\n         Transit \
    \ 15\n      actor  7, 19, 26, 28-29, 35-36, 38-40, 42-43, 49\n      Actors\n \
    \        MHS  11\n      addr-spec  17\n      address\n         addr-spec  17\n\
    \         local-part  18\n      ADMD  12, 14-15, 19, 25, 31, 37\n      Administrative\
    \ Actors  14\n      Administrative Management Domain  12\n      aMSA  31\n   \
    \   Author  10-11\n      author  35\n   B\n      body parts  24\n      bounce\
    \ handler  10\n      boundary  15\n   C\n      charset  44\n      Consumer Actor\
    \  15\n      content  11, 13-14, 20, 24, 32\n   D\n      delivery  4, 10-11, 13-14,\
    \ 18, 24-25, 35, 37-38\n      Discussion of document  7\n      domain name  17,\
    \ 21, 28\n      DSN  44\n   E\n      EAI  44\n      Edge Actor  15\n      encoding\
    \  44\n      end-to-end  4-6, 11, 15, 28\n      envelope  10, 13, 21, 24-25, 32,\
    \ 37\n      ETRN  35\n   G\n      Gateway  11, 13\n      gateway  6, 12-13, 18,\
    \ 25, 32\n   H\n      header  24\n      hMSA  31\n   I\n      identifier  18-19,\
    \ 21, 25, 29\n      IMAP  24, 31, 34-35, 44\n      IMF  19, 24, 44\n      Internet\
    \ Mail  4\n   L\n      left-hand side  18\n      LMTP  24, 35\n      local-part\
    \  18\n   M\n      Mail  4\n      Mail From  37\n      Mail Submission Agent \
    \ 12\n      mailbox  17, 19, 24, 28, 30, 33, 37-38\n      MDA  24, 37\n      MDN\
    \  10, 24, 44\n      message  6, 24\n      Message Disposition Notification  10\n\
    \      Message Handling Service  4\n      Message Handling System  11\n      Message\
    \ Transfer Agent  4\n      Message User Agent  4\n      MHS  4, 10-13, 21-22,\
    \ 24-25\n         Actors  11\n      MIME  24, 44\n      MS  24\n      MSA  12,\
    \ 24, 31\n      MTA  4, 15\n         boundary  15\n      MUA  4, 14, 24, 30-31\n\
    \   O\n      ODMR  35\n      operations  3, 15, 18, 29, 40\n      Originator \
    \ 10-12\n   P\n      POP  24, 31, 34-35, 44\n      posting  4, 10, 12, 21, 30-31,\
    \ 35, 37\n      pull  35\n      push  35\n   R\n      RcptTo  11\n      Receiver\
    \  11\n      Recipient  10-11, 37\n      recipient  35\n      relay  11\n    \
    \  responsibility  31\n      responsible  13-14\n      Return Address  37\n  \
    \    Return Handler  10\n      role  10, 18\n         Author  10\n         Originator\
    \  12\n         Recipient  10\n   S\n      SIEVE  24-25\n      SMTP  24, 35, 44\n\
    \   T\n      transfer  11, 13-14\n      Transit Actor  15\n      transition  31\n\
    \   U\n      UA  4\n      User Agent  4\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Dave Crocker\n   Brandenburg InternetWorking\n   675 Spruce\
    \ Drive\n   Sunnyvale, CA  94086\n   USA\n   Phone: +1.408.246.8253\n   EMail:\
    \ dcrocker@bbiw.net\n"
