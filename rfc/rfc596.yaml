- title: __initial_text__
  contents:
  - '                   Second Thoughts on Telnet Go-Ahead

    '
- title: INTRODUCTION
  contents:
  - "INTRODUCTION\n   In this RFC we present objections to the requirement that hosts\n\
    \   implement the Telnet Go-Ahead (GA) command, as specified in the\n   Telnet\
    \ Protocol Specification (NIC #15372).  The thrust of these\n   objections is\
    \ in three major directions:\n      1. The GA mechanism is esthetically unappealing,\
    \ both to myself\n      and to many other people I have talked to.  I shall attempt\
    \ to\n      describe why this is so.\n      2. As specified in the Protocol, GA\
    \ will not, in general, work;\n      i.e. it will not serve its intended purpose\
    \ unless hosts make\n      various unwarranted assumptions about how other hosts\
    \ operate.\n      3. GA is impossible for most hosts to implement correctly in\
    \ all\n      cases.  This is certainly true of the PDP-10 operating systems\n\
    \      with which I am familiar (10/50 and Tenex).\n   The purpose of this RFC\
    \ is to advocate either complete removal of the\n   GA mechanism or relegating\
    \ it to the status of a negotiated option\n   whose default state is that it be\
    \ suppressed.\n"
- title: TERMINOLOGY
  contents:
  - "TERMINOLOGY\n   \"Half-duplex\" is a two-way communication discipline in which\n\
    \   transmission takes place in only one direction at a time and the\n   receiving\
    \ party is constrained not to transmit until the transmitting\n   party has explicitly\
    \ given up control of the communication path\n   (\"turned the line around\").\n\
    \   This definition is distinct from a common (but incorrect) use of the\n   terms\
    \ \"half-duplex\" and \"full-duplex\" to designate local and remote\n   character\
    \ echoing.\n   \"Reverse break\" is a means by which a computer connected to a\n\
    \   terminal by a half-duplex path may regain control of the path for\n   further\
    \ typeout after previously having relinquished it.\n   This is the complement\
    \ of the \"break\" or \"attention\" mechanism,\n   implemented by all half-duplex\
    \ terminals, by means of which the user\n   may gain control of the line while\
    \ it is in use by the computer.\n"
- title: ESTHETIC OBJECTIONS TO GA
  contents:
  - "ESTHETIC OBJECTIONS TO GA\n   One assumption that permeates the Telnet Protocol\
    \ specification (and\n   is explicitly stated on Page 7) is that the \"normal\"\
    \ mode of\n   communication between computers and terminals is half-duplex, line-\n\
    \   at-a-time.  While historically this is partially true, it is also\n   clear,\
    \ both within the ARPA Network community and elsewhere, that the\n   trend is\
    \ toward highly interactive man-machine communication systems\n   which are difficult\
    \ to implement under half-duplex communication\n   disciplines.\n   The GA mechanism\
    \ is an attempt to solve a specific problem, that of\n   switching control between\
    \ computer and user in a subset of those\n   hosts utilizing IBM 2741 or equivalent\
    \ terminals.  I say \"a subset\"\n   because in fact the problem arises only in\
    \ the case of TIPs from\n   2741s (with reverse break); from what experience I\
    \ have had, I think\n   the TIP does a very good job of turning the line around\
    \ at the right\n   moments.  (I am told this is also the case at Multics).\n \
    \  Given the trend toward more interactive communication, and given the\n   fact\
    \ that terminals on the Network requiring a Go-Ahead mechanism are\n   a distinct\
    \ minority of all terminals, I think we should be reluctant\n   to burden our\
    \ protocols with kludges that are so clearly a concession\n   to obsolete design.\n\
    \      I have little doubt that before long somebody (if not IBM) will\n     \
    \ produce a full-duplex 2741-like terminal (indeed, perhaps it has\n      already\
    \ been done).  There is an obvious need for a terminal with\n      Selectric quality\
    \ keyboard and hard-copy better suited to\n      interactive applications (i.e.\
    \ full-duplex).\n   As a more practical consideration, it makes little sense to\
    \ have the\n   default state of the GA option be the one that benefits the least\n\
    \   number of hosts and terminals.\n      There is no question that most parties\
    \ to Telnet communication\n      will immediately negotiate to suppress GA.  To\
    \ do otherwise will\n      double the amount of network traffic generated by character-at-a-\n\
    \      time typein, and will increase it by a non-negligible amount even\n   \
    \   for a line-at-a-time typein.\n      It strikes me as worthwhile to minimize\
    \ the number of such\n      \"necessary\" option negotiations, especially in view\
    \ of the large\n      number of TIPs and mini-hosts on the Network.  Many such\
    \ hosts\n      must, due to resource constraints, implement only a limited subset\n\
    \      of the available options.  It follows, then, that the default\n      state\
    \ of all options should be the one most hosts will be willing\n      to use.\n"
- title: WHY GA WON'T WORK
  contents:
  - "WHY GA WON'T WORK\n   We now show that a server process's being \"blocked on\
    \ input\" (as\n   specified in the Protocol) is not itself a sufficient condition\
    \ for\n   sending out GA.\n   This is due to the fact that the user Telnet has\
    \ no control over the\n   packaging of a \"line\" of information sent to the server;\
    \ rather, this\n   is a function of the NCP, which must observe constraints such\
    \ as\n   allocation and buffering.  Consider the following example:\n      A user\
    \ types a line of text, which is buffered by his host's user\n      Telnet until\
    \ he signals end-of-line.  His keyboard then becomes\n      locked (this being\
    \ the behavior of half-duplex terminals while the\n      computer has control\
    \ of the line), and stays locked in\n      anticipation of the server's eventual\
    \ response and subsequent GA\n      command.\n      The user Telnet transmits\
    \ this text line over the connection;\n      however, due to insufficient allocation\
    \ or other conditions, the\n      text actually gets packaged up and sent as two\
    \ or more separate\n      messages, which arrive at the server host in the correct\
    \ order but\n      separated by some amount of time.\n      The server Telnet\
    \ passes the contents of the first message to the\n      appropriate process,\
    \ which reads the partial text line and\n      immediately blocks for further\
    \ input.  At this moment (assuming\n      the second message hasn't arrived yet),\
    \ the server telnet, in\n      accordance with the Protocol, sends back a GA command.\n\
    \      The rest of the text then arrives in response, the server process\n   \
    \   may generate a large volume of output.  Meanwhile, however, the GA\n     \
    \ command has caused the user's keyboard to become unlocked and\n      computer\
    \ output thereby blocked.  Hence we have a deadlock, which\n      will be resolved\
    \ only when the user recognizes what has happened\n      and (manually) gives\
    \ control back to the computer.\n   Of course, this particular problem is avoided\
    \ if the Telnet protocol\n   is modified to specify that the server Telnet will\
    \ transmit GA only\n   if the server process is blocked for input AND the most\
    \ recent\n   character passed to that process was end-of-line.\n      I claim\
    \ that this solution is bad in principle because it assumes\n      too much knowledge\
    \ on the part of the serving host as to what\n      constitutes \"end-of-line\"\
    \ in the using host.\n      Furthermore, the Protocol explicitly (and quite rightly)\
    \ specifies\n      that the user Telnet should provide some means by which a user\
    \ may\n      signal that all buffered text should be transmitted immediately,\n\
    \      without its being terminated by end-of-line.\n   One must conclude, then,\
    \ that in general the server Telnet has no\n   precise way of knowing when it\
    \ should send GA commands.\n"
- title: IMPLEMENTATION PROBLEMS
  contents:
  - "IMPLEMENTATION PROBLEMS\n   The foregoing analysis illustrates the problems that\
    \ arise with the\n   GA mechanism in communication between servers and users whose\
    \ normal\n   mode of operation is half-duplex, line-at-a-time.  When we turn to\n\
    \   hosts that provide full-duplex service, such as the PDP-10s and many\n   other\
    \ hosts on the Network, the problems are much more severe.\n      This is particularly\
    \ true of operating system such as Tenex that\n      exercise such tight control\
    \ over terminal behavior that they\n      prefer to operate in server echoing,\
    \ character-at-a-time mode.\n      This will probably become less necessary as\
    \ protocols such as\n      Remote Controlled transmission and Echoing Option come\
    \ into\n      general use, enabling servers to regulate echoing and break\n  \
    \    character classes in user Telnets.\n   Even in hosts such as 10/50 systems\
    \ that provide reasonable service\n   to line-at-a-time users for most subsystems\
    \ (e.g. excluding DDT and\n   TECO), GA is impossible to implement correctly.\
    \  This is true for\n   several reasons.\n   First, there are a number of subsystems\
    \ that never block for terminal\n   input but rather poll for it or accept it\
    \ on an interrupt basis.  In\n   the absence of typein, such processes go on to\
    \ do other tasks,\n   possibly generating terminal output.\n      Processes of\
    \ this sort come immediately to mind.  The user telnet,\n      FTP, and RJE programs\
    \ are implemented in this fashion by almost\n      all hosts.  10/50 has a subsystem\
    \ called OPSER, used to control\n      multiple independent subjobs from a single\
    \ terminal.\n      Since these programs never block for input, GA commands will\
    \ never\n      be sent by the server Telnet in such cases even though the\n  \
    \    processes are prepared to accept terminal input at any time.\n   Second,\
    \ there is not necessarily a one-to-one relationship between\n   processes and\
    \ terminals, as seems to be assumed by the Telnet\n   Protocol specification.\n\
    \      For example, in Tenex one process may be blocked for terminal\n      input\
    \ while another process is generating output to the same\n      terminal.  (Such\
    \ processes are typically parallel forks of the\n      same job).\n   Third, there\
    \ is the possibility of inter-terminal links, such as are\n   provided in many\
    \ systems.\n      By this I do not mean special Telnet connections established\n\
    \      between a pair of NVTs for the express purpose of terminal-to-\n      terminal\
    \ communication, as is suggested on page 9 of the Protocol\n      specification.\
    \  Rather, I am referring to facilities such as the\n      Tenex LINK facility,\
    \ in which any number and any mixture of local\n      and Network terminals and\
    \ processes may have their input and\n      output streams linked together in\
    \ arbitrarily complex ways.\n      Clearly the GA mechanism will fall flat on\
    \ its face in this case.\n      Also, the notion that one user of an inter-terminal\
    \ link should\n      have to \"manually signal that it is time for a GA to be\
    \ sent over\n      the Telnet connection\" in order to unblock another user's\
    \ keyboard\n      offends me to no end.\n   Finally, most systems provide means\
    \ by which system personnel and\n   processes may broadcast important messages\
    \ to all terminals (e.g.\n   SEND ALL in 10/50, NOTIFY in Tenex).  Clearly such\
    \ asynchronous\n   messages will be blocked by a half-duplex terminal that has\
    \ been\n   irrevocably placed in the typein state by a previous GA.\n      This\
    \ strikes me as such an obvious problem that I am forced to\n      wonder how\
    \ half-duplex hosts handle it even for their local\n      terminals.\n      [\
    \ This RFC was put into machine readable form for entry ]\n      [ into the online\
    \ RFC archives by Mirsad Todorovac 5/98 ]\n"
