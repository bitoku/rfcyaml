- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                     P. Narasimhan
  contents:
  - "Independent Submission                                     P. Narasimhan\n  \
    \             SLAPP: Secure Light Access Point Protocol\n"
- title: Abstract
  contents:
  - "Abstract\n   The Control and Provisioning of Wireless Access Points (CAPWAP)\n\
    \   problem statement describes a problem that needs to be addressed\n   before\
    \ a wireless LAN (WLAN) network designer can construct a\n   solution composed\
    \ of Wireless Termination Points (WTP) and Access\n   Controllers (AC) from multiple,\
    \ different vendors.  One of the\n   primary goals is to find a solution that\
    \ solves the interoperability\n   between the two classes of devices (WTPs and\
    \ ACs) that then enables\n   an AC from one vendor to control and manage a WTP\
    \ from another.\n   In this document, we present a protocol that forms the common\n\
    \   technology-independent framework and the ability to negotiate and\n   add,\
    \ on top of this framework, a control protocol that contains a\n   technology-dependent\
    \ component to arrive at a complete solution.  We\n   have also presented two\
    \ such control protocols -- an 802.11 Control\n   protocol, and another, more\
    \ generic image download protocol, in this\n   document.\n   Even though the text\
    \ in this document is written to specifically\n   address the problem stated in\
    \ RFC 3990, the solution can be applied\n   to any problem that has a controller\
    \ (equivalent to the AC) managing\n   one or more network elements (equivalent\
    \ to the WTP).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for the historical record.\n   This document defines a Historic\
    \ Document for the Internet community.\n   This is a contribution to the RFC Series,\
    \ independently of any other\n   RFC stream.  The RFC Editor has chosen to publish\
    \ this document at\n   its discretion and makes no statement about its value for\n\
    \   implementation or deployment.  Documents approved for publication by\n   the\
    \ RFC Editor are not a candidate for any level of Internet\n   Standard; see Section\
    \ 2 of RFC 5741.\n   Information about the current status of this document, any\
    \ errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5413.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This RFC documents the SLAPP protocol as it was when submitted\
    \ to the\n   IETF as a basis for further work in the CAPWAP Working Group, and\n\
    \   therefore it may resemble the CAPWAP protocol specification in RFC\n   5415\
    \ as well as other IETF work.  This RFC is being published solely\n   for the\
    \ historical record.  The protocol described in this RFC has\n   not been thoroughly\
    \ reviewed and may contain errors and omissions.\n   RFC 5415 documents the standards\
    \ track solution for the CAPWAP\n   Working Group and obsoletes any and all mechanisms\
    \ defined in this\n   RFC.  This RFC is not a candidate for any level of Internet\
    \ Standard\n   and should not be used as a basis for any sort of Internet\n  \
    \ deployment.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http//:trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Definitions .....................................................7\n  \
    \    2.1. Conventions Used in This Document ..........................7\n   3.\
    \ Topology ........................................................7\n   4. Protocol\
    \ ........................................................8\n      4.1. Protocol\
    \ Description .......................................8\n           4.1.1. State\
    \ Machine Explanation ...........................9\n      4.2. Format of a SLAPP\
    \ Header ..................................10\n      4.3. Version ...................................................11\n\
    \      4.4. Retransmission ............................................12\n  \
    \    4.5. Discovery .................................................12\n    \
    \       4.5.1. SLAPP Discover Request .............................13\n      \
    \     4.5.2. SLAPP Discover Response ............................15\n      4.6.\
    \ SLAPP Discovery Process ...................................17\n           4.6.1.\
    \ WTP ................................................17\n           4.6.2. AC\
    \ .................................................19\n   5. Security Association\
    \ ...........................................19\n      5.1. Example Authentication\
    \ Models (Informative) ...............20\n           5.1.1. Mutual Authentication\
    \ ..............................20\n           5.1.2. WTP-Only Authentication\
    \ ............................21\n           5.1.3. Anonymous Authentication ...........................21\n\
    \   6. SLAPP Control Protocols ........................................21\n  \
    \    6.1. 802.11 Control Protocol for SLAPP .........................21\n    \
    \       6.1.1. Supported CAPWAP Architectures .....................21\n      \
    \     6.1.2. Transport ..........................................24\n        \
    \   6.1.3. Provisioning and Configuration of WTP ..............26\n          \
    \ 6.1.4. Protocol Operation .................................60\n      6.2. Image\
    \ Download Protocol ...................................66\n           6.2.1. Image\
    \ Download Packet ..............................66\n           6.2.2. Image Download\
    \ Request .............................67\n           6.2.3. Image Download Process\
    \ .............................68\n           6.2.4. Image Download State Machine\
    \ .......................69\n   7. Security Considerations ........................................73\n\
    \   8. Extensibility to Other Technologies ............................73\n  \
    \ 9. Informative References .........................................74\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The need for a protocol by which wireless LAN (WLAN) Access\n\
    \   Controllers (ACs) can control and manage Wireless Termination Points\n   (WTPs)\
    \ from a different vendor has been presented in the CAPWAP\n   problem statement\
    \ [3].  We believe that this problem is more general\n   than as stated in [3]\
    \ and can be found in any application, including\n   non-wireless ones, that requires\
    \ a central controller to control and\n   manage one or more network elements\
    \ from a different vendor.\n   One way to solve the CAPWAP problem is to define\
    \ a complete control\n   protocol that enables an AC from one vendor to control\
    \ and manage a\n   WTP from a different vendor.  But a solution that is primarily\n\
    \   focused towards solving the problem for one particular underlying\n   technology\
    \ (IEEE 802.11, in this case) may find it difficult to\n   address other underlying\
    \ technologies.  Different underlying\n   technologies may differ on the set of\
    \ configurable options, and\n   different architectural choices that are specific\
    \ to that underlying\n   technology (similar to the Local Medium Access Control\
    \ (MAC) versus\n   Split MAC architectures in 802.11).  The architectural choices\
    \ that\n   are good for one underlying technology may not necessarily work for\n\
    \   another.  Not to forget that there may be multiple architectural\n   choices\
    \ [2] even for the same underlying technology.  A monolithic\n   control protocol\
    \ that strives to solve this problem for multiple\n   technologies runs the risk\
    \ of adding too much complexity and not\n   realizing the desired goals, or it\
    \ runs the risk of being too rigid\n   and hampering technological innovation.\n\
    \   A different way to solve this problem is to split the solution space\n   into\
    \ two components -- one that is technology-agnostic or\n   independent, and another\
    \ that is specific to the underlying\n   technology or even different approaches\
    \ to the same underlying\n   technology.  The technology-independent component\
    \ would be a common\n   framework that would be an important component of the\
    \ solution to\n   this class of problems without any dependency on the underlying\n\
    \   technology (i.e., 802.11, 802.16, etc.) being used.  The technology-\n   specific\
    \ component would be a control protocol that would be\n   negotiated using this\
    \ common framework and can be easily defined to\n   be relevant to that technology\
    \ without the need for having any\n   dependency on other underlying technologies.\
    \  This approach also\n   lends itself easily to extend the solution as new technologies\
    \ arise\n   or as new innovative methods to solve the same problem for an\n  \
    \ existing technology present themselves in the future.\n   In this document,\
    \ we present secure light access point protocol\n   (SLAPP), a technology-independent\
    \ protocol by which network elements\n   that are meant to be centrally managed\
    \ by a controller can discover\n   one or more controllers, perform a security\
    \ association with one of\n   them, and negotiate a control protocol that they\
    \ would use to perform\n   the technology-specific components of the control and\
    \ provisioning\n   protocol.  We have also presented two control protocols in\
    \ this\n   document -- an 802.11 control protocol for provisioning and managing\n\
    \   a set of 802.11 WTPs, and an image download protocol that is very\n   generic\
    \ and can be applied to any underlying technology.\n   Figure 1 shows the model\
    \ by which a technology-specific control\n   protocol can be negotiated using\
    \ SLAPP to complete a solution for a\n   certain underlying technology.  The figure\
    \ shows a control protocol\n   for 802.11 and 802.16 technology components, but\
    \ the SLAPP model does\n   not preclude multiple control protocols within a certain\
    \ technology\n   segment.  For example, a certain technology-specific control\
    \ protocol\n   may choose to support only the Local MAC architecture [2] while\n\
    \   deciding not to support the Split MAC architecture [2].  While the\n   image\
    \ download protocol is presented in this document, a SLAPP\n   implementation\
    \ MUST NOT assume that this control protocol is\n   supported by other SLAPP implementations.\n\
    \                                              Negotiated\n            SLAPP \
    \                            Control\n                                       \
    \       Protocol\n   +-------------------------+              +------------+\n\
    \   |                         |              |            |\n   |         SLAPP\
    \           |              |  Image     |\n   | (technology-independent +-------+----->|\
    \  Download  |\n   |      framework)         |       |      |  protocol  |\n \
    \  |                         |       |      |            |\n   |  negotiate one\
    \ control  |       |      +------------+\n   |  protocol here          |     \
    \  |\n   +-------------------------+       |\n                               \
    \      |      +------------+\n                                     |      |  \
    \          |\n                                     |      |   802.11   |\n   \
    \                                  +----->|  control   |\n                   \
    \                  |      |  protocol  |\n                                   \
    \  |      |            |\n                                     |      +------------+\n\
    \                                     |\n                                    \
    \ |\n                                     |      +------------+\n            \
    \                         |      |            |\n                            \
    \         |      |   802.16   |\n                                     +----->|\
    \  control   |\n                                     |      |  protocol  |\n \
    \                                    |      |            |\n                 \
    \                    |      +------------+\n                                 \
    \    |\n                                     |         .......\n             \
    \         Figure 1: SLAPP Protocol Model\n   The control protocols that are negotiable\
    \ using SLAPP are expected to\n   be published ones that have gone through a review\
    \ process in\n   standards bodies such as the IETF.  The control protocols can\
    \ either\n   re-use the security association created during SLAPP or have the\n\
    \   option of clearing all SLAPP state and restarting with whatever\n   mechanisms\
    \ are defined in the control protocol.\n   Recently, there was a significant amount\
    \ of interest in a similar\n   problem in the Radio Frequency Identification (RFID)\
    \ space that has\n   led to the definition of a simple lightweight RFID reader\
    \ protocol\n   (SLRRP) [9].  It is quite possible that SLRRP could be a\n   technology-specific\
    \ (RFID, in this case) control protocol negotiated\n   during a common technology-independent\
    \ framework.\n   All of the text in the document would seem to be written with\
    \ a WLAN\n   problem in mind.  Please note that while the letter of the document\n\
    \   does position the solution to solve a CAPWAP-specific problem, the\n   spirit\
    \ of the document is to address the more general problem.\n"
- title: 2.  Definitions
  contents:
  - '2.  Definitions

    '
- title: 2.1.  Conventions Used in This Document
  contents:
  - "2.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [1].\n"
- title: 3.  Topology
  contents:
  - "3.  Topology\n   The SLAPP protocol supports multiple topologies for interconnecting\n\
    \   WTPs and ACs as indicated in Figure 2.\n   In Figure 2, we have captured four\
    \ different interconnection\n   topologies:\n   1.  The WTP is directly connected\
    \ to the AC without any intermediate\n       nodes.  Many WTPs are deployed in\
    \ the plenum of buildings and are\n       required to be powered over the Ethernet\
    \ cable that is connecting\n       it to the network.  Many ACs in the marketplace\
    \ can supply power\n       over Ethernet, and in the case where the AC is the\
    \ one powering\n       the WTP, the WTP is directly connected to the AC.\n   2.\
    \  The WTP is not directly connected to the AC, but both the AC and\n       the\
    \ WTP are in the same Layer 2 (L2) (broadcast) domain.\n   3.  The WTP is not\
    \ directly connected to the AC, and they are not\n       present in the same L2\
    \ (broadcast) domain.  They are on two\n       different broadcast domains and\
    \ have a node on the path that\n       routes between two or more subnets.\n \
    \  4.  The fourth case is a subset of the third one with the exception\n     \
    \  that the intermediate nodes on the path from the WTP to the AC\n       may\
    \ not necessarily be in the same administrative domain.  The\n       intermediate\
    \ network may also span one or more WAN links that may\n       have lower capacity\
    \ than if both the AC and the WTP are within\n       the same building or campus.\n\
    \               +-----------------+            +-------+\n               |   \
    \              |    (1)     |       |\n               |       AC        +------------+\
    \  WTP  |\n               |                 |            |       |\n         \
    \      +--------+--------+            +-------+\n                        |\n \
    \                       |\n                        |\n                    +---+---+\n\
    \               (2)  |       |\n             +------+  L2   +--------+\n     \
    \        |      |       |        |\n             |      +---+---+        |\n \
    \            |                       |\n             |                       |\n\
    \       +-----+-----+             +---+---+    +-------+\n       |           |\
    \             |       | (3)|       |\n       |    WTP    |             |   L3\
    \  +----+  WTP  |\n       |           |             |       |    |       |\n \
    \      +-----------+             +---+---+    +-------+\n                    \
    \                 |\n                                     |\n                \
    \                     |\n                                 +---+----+    +-------+\n\
    \                                 |        | (4)|       |\n                  \
    \               |Internet+----+  WTP  |\n                                 |  \
    \      |    |       |\n                                 +--------+    +-------+\n\
    \                           Figure 2: SLAPP Topology\n"
- title: 4.  Protocol
  contents:
  - '4.  Protocol

    '
- title: 4.1.  Protocol Description
  contents:
  - "4.1.  Protocol Description\n   The SLAPP state machine for both the WTP and AC\
    \ is shown in Figure 3.\n   Both the WTP and the AC discover each other, negotiate\
    \ a control\n   protocol, perform a secure handshake to establish a secure channel\n\
    \   between them, and then use that secure channel to protect a\n   Negotiated\
    \ Control Protocol.\n   The WTP maintains the following variable for its state\
    \ machine:\n   abandon: a timer that sets the maximum amount of time the WTP will\n\
    \      wait for an acquired AC to begin the Datagram Transport Layer\n      Security\
    \ (DTLS) handshake.\n      /--------\\  /-----------\\\n      |        |  |  \
    \         |\n      |        v  v           |\n      |  +-------------+      |\n\
    \      | C| discovering |<-\\   |\n      |  +-------------+  |   |\n      |  \
    \      |          |   |\n      |        v          |   |\n      |  +-----------+\
    \    |   |\n      \\--| acquiring |    |   |\n         +-----------+    |   |\n\
    \               |          |   |\n               v          |   |\n         +----------+\
    \     |   |\n        C| securing |-----/   |\n         +----------+         |\n\
    \               |              |\n               v              |\n       +----------------+\
    \     |\n       |  negotiated    |     |\n      C|    control     |-----/\n  \
    \     |   protocol     |\n       +----------------+\n                        Figure\
    \ 3: SLAPP State Machine\n"
- title: 4.1.1.  State Machine Explanation
  contents:
  - "4.1.1.  State Machine Explanation\n   Note: The symbol \"C\" indicates an event\
    \ that results in the state\n   remaining the same.\n   Discovering\n      AC:\
    \ This is a quiescent state for the AC in which it waits for\n          WTPs to\
    \ request its acquisition.  When a request is received,\n          the AC transitions\
    \ to Acquiring.\n     WTP: The WTP is actively discovering an AC.  When the WTP\
    \ receives\n          a response to its Discover Request, it transitions to\n\
    \          Acquiring.\n   Acquiring\n      AC: A discover request from a WTP has\
    \ been received.  If the\n          request is invalid or the AC wishes to not\
    \ acquire the WTP, it\n          drops the packet and transitions back to Discovering.\n\
    \          Otherwise, a Discover Response is sent and the AC transitions\n   \
    \       to Securing.\n     WTP: A discover response from an AC has been received.\
    \  If the\n          response is not valid, the WTP transitions to Discovering;\n\
    \          otherwise, it sets the abandon timer to a suitable value to\n     \
    \     await a DTLS exchange.  If the timer fires in Acquiring, the\n         \
    \ WTP transitions back to Discovering.  If a DTLS \"client hello\"\n         \
    \ is received, the WTP transitions to Securing and cancels the\n          abandon\
    \ timer.\n   Securing\n      AC: The AC performs the \"client end\" of the DTLS\
    \ exchange.  Any\n          error in the DTLS exchange results in the AC transitioning\
    \ to\n          Discovering.  When the DTLS exchange finishes, the AC\n      \
    \    transitions to the Negotiated Control Protocol.\n     WTP: The WTP performs\
    \ the \"server end\" of the DTLS exchange.  Any\n          error in the DTLS exchange\
    \ results in the WTP transitioning to\n          Discovering.  When the DTLS exchange\
    \ finishes, the WTP\n          transitions to the Negotiated Control Protocol.\n\
    \   Negotiated Control Protocol\n      AC: The AC performs its side of the protocol\
    \ agreed to during the\n          discovery process.  Please refer to Section\
    \ 6.1 for the SLAPP\n          802.11 Control Protocol.  For the Image Download\
    \ Protocol\n          example, see Section 6.2.\n     WTP: The WTP performs its\
    \ side of the protocol agreed to during the\n          discovery process.  Please\
    \ refer to Section 6.1 for the SLAPP\n          802.11 Control Protocol.  For\
    \ the Image Download Protocol\n          example, see Section 6.2.\n"
- title: 4.2.  Format of a SLAPP Header
  contents:
  - "4.2.  Format of a SLAPP Header\n   All SLAPP packets begin with the same header\
    \ as shown in Figure 4.\n     0                   1                   2      \
    \             3\n     0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    |  Maj  |  Min  |     Type      |           Length              |\n    +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                          Figure 4: SLAPP Header\n   Where:\n      Maj (4 bits):\
    \ the major number of the SLAPP version\n      Min (4 bits): the minor number\
    \ of the SLAPP version\n      Type (1 octet): the type of SLAPP message\n    \
    \  Length (two octets): the length of the SLAPP message, including\n      the\
    \ entire SLAPP header\n   The following types of SLAPP messages have been defined:\n\
    \      name                     type\n      -----                   ------\n \
    \     discover request           1\n      discover response          2\n     \
    \ image download control     3\n      control protocol packet    4\n      reserved\
    \                  5-255\n"
- title: 4.3.  Version
  contents:
  - "4.3.  Version\n   SLAPP messages include a version in the form of major.minor.\
    \  This\n   document describes the 1.0 version of SLAPP, that is the major\n \
    \  version is one (1) and the minor version is zero (0).\n   Major versions are\
    \ incremented when the format of a SLAPP message\n   changes or the meaning of\
    \ a SLAPP message changes such that it would\n   not be properly parsed by an\
    \ older, existing version of SLAPP.  Minor\n   versions are incremented when some\
    \ incremental additions have been\n   made to SLAPP that enhance its capabilities\
    \ or convey additional\n   information in a way that does not change the format\
    \ or meaning of\n   the SLAPP message.\n   Future versions of SLAPP MAY NOT mandate\
    \ support for earlier major\n   versions of SLAPP, so an implementation MUST NOT\
    \ assume that a peer\n   that supports version \"n\" will therefore support version\
    \ \"n - i\"\n   (where both \"n\" and \"i\" are non-zero integers and \"n\" is\
    \ greater than\n   \"i\").\n   A SLAPP implementation that receives a SLAPP message\
    \ with a higher\n   major version number MUST drop that message.  A SLAPP implementation\n\
    \   that receives a SLAPP message with a lower major version SHOULD drop\n   down\
    \ to the version of SLAPP the peer supports.  If that version of\n   SLAPP is\
    \ not supported, the message MUST be dropped.  However, there\n   may be valid\
    \ reasons for which a peer wishes to drop a SLAPP message\n   with a supported\
    \ major version.\n   A SLAPP implementation that receives a SLAPP message with\
    \ a higher\n   minor version number MUST NOT drop that message.  It MUST respond\n\
    \   with the minor version number that it supports and will necessarily\n   not\
    \ support whatever incremental capabilities were added that\n   justified the\
    \ bump in the minor version.  A SLAPP implementation that\n   receives a SLAPP\
    \ message with a lower minor version MUST NOT drop\n   that message.  It SHOULD\
    \ revert back to the minor version that the\n   peer supports and not include\
    \ any incremental capabilities that were\n   added that justified the bump in\
    \ the minor version.\n"
- title: 4.4.  Retransmission
  contents:
  - "4.4.  Retransmission\n   SLAPP is a request response protocol.  Discovery and\
    \ security\n   handshake requests are made by the WTP, and responses to them are\n\
    \   made by the AC.  Image Download packets are initiated by the AC and\n   acknowledged\
    \ by the WTP (in a negative fashion, see Section 6.2).\n   Retransmissions are\
    \ handled solely by the initiator of the packet.\n   After each packet for which\
    \ a response is required is transmitted,\n   the sender MUST set a retransmission\
    \ timer and resend the packet upon\n   its expiry.  The receiver MUST be capable\
    \ of either regenerating a\n   previous response upon receipt of a retransmitted\
    \ packet or caching a\n   previous response and resending upon receipt of a retransmitted\n\
    \   packet.\n   The retransmission timer MUST be configurable and default to one\
    \ (1)\n   second.  No maximum or minimum for the timer is specified by this\n\
    \   version of SLAPP.\n   Each time a retransmission is made, a counter SHOULD\
    \ be incremented,\n   and the number of retransmissions attempted by a sender\
    \ before giving\n   up and declaring a SLAPP failure SHOULD be four (4)-- that\
    \ is, the\n   number of attempts made for each packet before declaring failure\
    \ is\n   five (5).\n   The exception to this rule is Image Download packets, which\
    \ are not\n   individually acknowledged by the WTP (see Section 6.2).  The final\n\
    \   packet is acknowledged and lost packets are indicated through Image\n   Download\
    \ Requests.\n"
- title: 4.5.  Discovery
  contents:
  - "4.5.  Discovery\n   When a WTP boots up and wants to interoperate with an Access\n\
    \   Controller so that it can be configured by the AC, one of the first\n   things\
    \ it needs to do is to discover one or more ACs in its network\n   neighborhood.\
    \  This section contains the details of this discovery\n   mechanism.\n   As described\
    \ in Section 3, an AC and a WTP could reside in the same\n   Layer 2 domain, or\
    \ be separated by a Layer 3 cloud including\n   intermediate clouds that are not\
    \ under the same administrative domain\n   (for example, an AC and a WTP separated\
    \ by a wide-area public\n   network).  So any proposed discovery mechanism should\
    \ have provisions\n   to enable a WTP to discover an AC across all these topologies.\n\
    \   We assume that a WTP, prior to starting the discovery process, has\n   already\
    \ obtained an IP address on its wired segment.\n"
- title: 4.5.1.  SLAPP Discover Request
  contents:
  - "4.5.1.  SLAPP Discover Request\n   The SLAPP discovery process is initiated by\
    \ sending a SLAPP discover\n   request packet.  The packet can be addressed to\
    \ the broadcast IP\n   address, a well-known multicast address, or (if the IP\
    \ address of an\n   AC is either configured prior to the WTP booting up or is\
    \ learned\n   during the boot-up sequence) addressed to a unicast IP address.\
    \  Lack\n   of a response to one method of discovery SHOULD result in the WTP\n\
    \   trying another method of discovery.  The SLAPP discover request\n   packet\
    \ is a UDP packet addressed to port [TBD] designated as the\n   SLAPP discovery\
    \ port.  The source port can be any random port.  The\n   payload of the SLAPP\
    \ discover request packet is shown in Figure 5.\n    0                   1   \
    \                2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Maj  |  Min  |    Type = 1   |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Transaction ID                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         WTP Identifier                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    WTP Identifier (continued) |             Flags             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      WTP Vendor ID                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      WTP HW Version                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      WTP SW Version                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | n controltypes| control type  |  .  .  .\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     Figure 5: SLAPP Discover Request\n"
- title: 4.5.1.1.  Transaction ID
  contents:
  - "4.5.1.1.  Transaction ID\n   The transaction ID is a randomly generated, 32-bit\
    \ number that is\n   maintained during one phase of the SLAPP discovery process.\
    \  It is\n   generated by a WTP starting a discovery process.  When one discovery\n\
    \   method fails to find an AC and the WTP attempts another discovery\n   method\
    \ it MUST NOT re-use the Transaction ID.  All ACs that intend to\n   respond to\
    \ a SLAPP discover request must use the same value for this\n   field as in the\
    \ request frame.\n"
- title: 4.5.1.2.  WTP Identifier
  contents:
  - "4.5.1.2.  WTP Identifier\n   This field allows the WTP to specify a unique identifier\
    \ for itself.\n   This MAY be, for instance, its 48-bit MAC address or it could\
    \ be any\n   other string such as a serial number.\n"
- title: 4.5.1.3.  Flags
  contents:
  - "4.5.1.3.  Flags\n   The Flags field is used to indicate certain things about\
    \ the discover\n   request.  For example, bit 0 in the Flags field indicates whether\
    \ the\n   discover request packet is being sent to the AC, if unicast, based on\n\
    \   a configuration at the WTP or based on some other means of discovery.\n  \
    \ This bit should always be set to the discover mode if the SLAPP\n   discover\
    \ request packet is being sent to either a broadcast or\n   multicast address.\
    \  Here are the valid values for various bits in the\n   Flags field.\n      Bit\
    \ 0:\n      0 - Configuration mode\n      1 - Discover mode\n      Bits 1-15:\n\
    \      Must always be set to 0 by the transmitter\n      Must be ignored by the\
    \ receiver\n"
- title: 4.5.1.4.  WTP Vendor ID
  contents:
  - "4.5.1.4.  WTP Vendor ID\n   This 32-bit field is the WTP vendor's Structure of\
    \ Management\n   Information (SMI) enterprise code in network octet order (these\n\
    \   enterprise codes can be obtained from, and registered with, IANA).\n"
- title: 4.5.1.5.  WTP HW Version
  contents:
  - "4.5.1.5.  WTP HW Version\n   This 32-bit field indicates the version of hardware\
    \ present in the\n   WTP.  This is a number that is totally left to the WTP vendor\
    \ to\n   choose.\n"
- title: 4.5.1.6.  WTP SW Version
  contents:
  - "4.5.1.6.  WTP SW Version\n   This 32-bit field indicates the version of software\
    \ present in the\n   WTP.  This is a number that is totally left to the WTP vendor\
    \ to\n   choose.\n"
- title: 4.5.1.7.  Number of Control Types
  contents:
  - "4.5.1.7.  Number of Control Types\n   This 8-bit field indicates the number of\
    \ 8-bit control protocol\n   indicators that follow it and therefore implicitly\
    \ indicates the\n   number of different control protocols the WTP is capable of\n\
    \   supporting.  This number MUST be at least one (1).\n"
- title: 4.5.1.8.  Control Types
  contents:
  - "4.5.1.8.  Control Types\n   This 8-bit field indicates the type of control protocol\
    \ the WTP\n   supports and is willing to use when communicating with an AC.  There\n\
    \   MAY be multiple \"control type\" indicators in a single SLAPP Discover\n \
    \  Request.\n      Valid Control Types\n      -------------------\n      0   \
    \   - RESERVED (MUST not be used)\n      1      - Image Download Control Protocol\n\
    \      2      - 802.11 SLAPP Control Protocol\n      3-255  - RESERVED (to IANA)\n"
- title: 4.5.2.  SLAPP Discover Response
  contents:
  - "4.5.2.  SLAPP Discover Response\n   An AC that receives a SLAPP discover request\
    \ packet from a WTP can\n   choose to respond with a SLAPP discover response packet.\
    \  The format\n   of the SLAPP discover response packet is shown in Figure 6.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Maj  |  Min  |    Type = 2   |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Transaction ID                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        WTP Identifier                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    WTP Identifier (continued) |             Flags             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      AC HW Vendor ID                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       AC HW Version                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       AC SW Version                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | control type  |\n   +-+-+-+-+-+-+-+-+\n                     Figure 6: SLAPP\
    \ Discover Response\n   The SLAPP discover response packet is a UDP packet.  It\
    \ is always\n   unicast to the WTP's IP address.  The source IP address is that\
    \ of\n   the AC sending the response.  The source port is the SLAPP discover\n\
    \   port [TBD] and the destination port is the same as the source port\n   used\
    \ in the SLAPP discover request.  The WTP's MAC address and the\n   transaction\
    \ ID must be identical to the values contained in the SLAPP\n   discover request.\
    \  The Status field indicates to the WTP whether the\n   AC is either accepting\
    \ the discover request and is willing to allow\n   the WTP to proceed to the next\
    \ stage (ACK) or whether it is denying\n   the WTP's earlier request (NACK). \
    \ The AC includes its own vendor ID,\n   hardware, and software versions in the\
    \ response.\n"
- title: 4.5.2.1.  Transaction ID
  contents:
  - "4.5.2.1.  Transaction ID\n   The value of the Transaction ID field should be\
    \ identical to its\n   value in the SLAPP discover request packet sent by the\
    \ WTP.\n"
- title: 4.5.2.2.  WTP Identifier
  contents:
  - "4.5.2.2.  WTP Identifier\n   The WTP Identifier that was sent in the corresponding\
    \ SLAPP discover\n   request frame.\n"
- title: 4.5.2.3.  Flags
  contents:
  - "4.5.2.3.  Flags\n   This field is unused by this version of SLAPP.  It MUST be\
    \ set to\n   zero (0) on transmission and ignored upon receipt.\n"
- title: 4.5.2.4.  AC Vendor ID
  contents:
  - "4.5.2.4.  AC Vendor ID\n   If the value of the Status field is a 1, indicating\
    \ that the AC is\n   sending a successful response, then the values in this field\
    \ and the\n   following two are valid.  The 32-bit AC Vendor ID points to the\n\
    \   vendor ID of the AC.  If the value of the Status field is not 1, then\n  \
    \ this field should be set to 0 by the AC and ignored by the WTP.\n"
- title: 4.5.2.5.  AC HW Version
  contents:
  - "4.5.2.5.  AC HW Version\n   If the value of the Status field is 1, then this\
    \ 32-bit field\n   contains the value of the AC's hardware version.  This value\
    \ is\n   chosen by the AC vendor.  If the value of the Status field is not 1,\n\
    \   then this field should be set to 0 by the AC and ignored by the WTP.\n"
- title: 4.5.2.6.  AC SW Version
  contents:
  - "4.5.2.6.  AC SW Version\n   If the value of the Status field is 1, then this\
    \ 32-bit field\n   contains the value of the AC's software version.  This value\
    \ is\n   chosen by the AC vendor.  If the value of the Status field is not 1,\n\
    \   then this field should be set to 0 by the AC and ignored by the WTP.\n"
- title: 4.5.2.7.  Control Type
  contents:
  - "4.5.2.7.  Control Type\n   The control type that the AC will use to communicate\
    \ with the WTP.\n   This value MUST match one of the control types passed in the\n\
    \   corresponding SLAPP Discover Request.\n"
- title: 4.6.  SLAPP Discovery Process
  contents:
  - '4.6.  SLAPP Discovery Process

    '
- title: 4.6.1.  WTP
  contents:
  - "4.6.1.  WTP\n   There are multiple ways in which a WTP can discover an AC.\n\
    \   1.  Static configuration: An administrator, prior to deploying a WTP,\n  \
    \     can configure an IP address of an AC on the WTP's non-volatile\n       memory.\
    \  If this is the case, then the SLAPP discover request\n       packet is addressed\
    \ to the configured IP address.\n   2.  DHCP options: As part of the DHCP response,\
    \ the DHCP server could\n       be configured to use option 43 to deliver the\
    \ IP address of an AC\n       to which the WTP should address the SLAPP discover\
    \ request\n       packet.  If the IP address of an AC is handed to the WTP as\
    \ part\n       of the DHCP response, then the WTP should address the SLAPP\n \
    \      discover request packet to this IP address.\n   3.  DNS configuration:\
    \ Instead of configuring a static IP address on\n       the WTP's non-volatile\
    \ memory, an administrator can configure a\n       Fully-Qualified Domain Name\
    \ (FQDN) of an AC.  If the FQDN of an\n       AC is configured, then the WTP queries\
    \ its configured DNS server\n       for the IP address associated with the configured\
    \ FQDN of the AC.\n       If the DNS query is successful and the WTP acquires\
    \ the IP\n       address of an AC from the DNS server, then the above discover\n\
    \       request packet is addressed to the unicast address of the AC.\n   4. \
    \ Broadcast: The WTP sends a discover request packet addressed to\n       the\
    \ broadcast IP address with the WTP's IP address as the source.\n       A network\
    \ administrator, if necessary, could configure the\n       default router for\
    \ the subnet that the WTP is on with a helper\n       address and unicast it to\
    \ any address on a different subnet.\n   5.  IP Multicast: A WTP can send the\
    \ above payload to a SLAPP IP\n       multicast address [TBD].\n   6.  DNS: If\
    \ there is no DNS FQDN configured on the WTP, and the WTP\n       is unable to\
    \ discover an AC by any of the above methods, then it\n       should attempt to\
    \ query the DNS server for a well-known FQDN of\n       an AC [TBD].  If this\
    \ DNS query succeeds, then the WTP should\n       address the SLAPP discover request\
    \ packet to the unicast address\n       of the AC.\n   The above process is summarized\
    \ in the sequence shown in Figure 7.\n   SLAPP discovery start:\n      Static\
    \ IP address config option:\n        Is a static IP address for an AC configured?\n\
    \          If yes, send SLAPP discover request to that unicast IP address\n  \
    \          SLAPP discover response within discovery_timer?\n              If yes,\
    \ go to \"done\"\n              If not, go to \"Static FQDN config option\"\n\
    \          If not, go to \"Static FQDN config option\"\n      Static FQDN config\
    \ option:\n        Is a static FQDN configured?\n          If yes, send a DNS\
    \ query for the IP address for the FQDN.\n          Is DNS query successful?\n\
    \            If yes, send SLAPP discover request to that IP address\n        \
    \    SLAPP discover response within discovery timer?\n              If yes, go\
    \ to \"done\"\n              If not, go to \"DHCP options option\"\n         \
    \   If not, go to \"DHCP options option\"\n       DHCP options option:\n     \
    \    Is the IP address of an AC present in the DHCP response?\n           If yes,\
    \ send SLAPP discover request to the AC's IP address\n           SLAPP discover\
    \ response within discovery timer?\n             If yes, go to \"done\"\n    \
    \         If not, go to \"Broadcast option\"\n           If not, go to \"Broadcast\
    \ option\"\n       Broadcast option:\n         Send SLAPP discover packet to the\
    \ broadcast address\n         SLAPP discover response within discovery timer?\n\
    \           If yes, go to \"done\"\n           If not, go to \"Multicast option\"\
    \n       Multicast option:\n         Send SLAPP discover packet to the SLAPP multicast\
    \ address\n         SLAPP discover response within discovery timer?\n        \
    \   If yes, go to \"done\"\n           If not, go to \"DNS discovery option\"\n\
    \       DNS discovery option:\n         Query the DNS server for a well-known\
    \ DNS name\n         Is the DNS discovery successful?\n           If yes, send\
    \ SLAPP discover request to that IP address\n           SLAPP discover response\
    \ within discovery timer?\n             If yes, go to \"done\"\n             If\
    \ not, go to \"SLAPP discovery restart\"\n           If not, go to \"SLAPP discovery\
    \ restart\"\n       SLAPP discovery restart:\n         Set timer for SLAPP discovery\
    \ idle timer\n         When timer expires, go to \"SLAPP discovery start\"\n \
    \      done:\n         Go to the next step\n                                 Figure\
    \ 7\n"
- title: 4.6.2.  AC
  contents:
  - "4.6.2.  AC\n   When an AC receives a SLAPP discover request, it must determine\n\
    \   whether or not it wishes to acquire the WTP.  An AC MAY only agree to\n  \
    \ acquire those WTPs whose WTP Identifiers are statically configured in\n   its\
    \ configuration.  Or an AC that is willing to gratuitously acquire\n   WTPs MAY\
    \ accept any request pending authentication.  An AC MUST only\n   choose to acquire\
    \ WTPs that speak a common Negotiated Control\n   Protocol, but other factors\
    \ may influence its decision.  For\n   instance, if the Negotiated Control Protocol\
    \ is the Image Download\n   protocol defined in this memo, the AC MUST NOT acquire\
    \ a WTP for\n   which it does not have a compatible image to download as determined\n\
    \   by the WTP's HW Vendor ID, HW Version, and Software Version.\n   Whatever\
    \ its decision, the AC MUST respond one of two ways.\n   1.  The AC sends a SLAPP\
    \ discover response indicating its agreement\n       to acquire the WTP.\n   2.\
    \  The AC silently drops the SLAPP discover request and does not\n       respond\
    \ at all.\n"
- title: 5.  Security Association
  contents:
  - "5.  Security Association\n   Once an AC has been discovered by a WTP and agreed\
    \ to acquire it (by\n   sending a Discover Response), it will initiate a DTLS\
    \ [6] [8]\n   exchange with the WTP by assuming the role of the \"client\".  The\
    \ WTP\n   assumes the role of the \"server\".  The port used by both the WTP and\n\
    \   AC for this exchange will be [TBD].\n   An obvious question is \"Why is the\
    \ AC acting as a client?\".  The\n   reason is to allow for non-mutual authentication\
    \ in which the WTP is\n   authenticated by the AC (see Section 5.1.2).\n   Informational\
    \ note: DTLS is used because it provides a secure and\n   connectionless channel\
    \ using a widely accepted and analyzed protocol.\n   In addition, the myriad of\
    \ authentication options in DTLS allows for\n   a wide array of options with which\
    \ to secure the channel between the\n   WTP and the AC -- mutual and certificate-based;\
    \ asymmetric or non-\n   mutual authentication; anonymous authentication, etc.\
    \  Furthermore,\n   DTLS defines its own fragmentation and reassembly techniques\
    \ as well\n   as ways in which peers agree on an effective MTU.  Using DTLS\n\
    \   obviates the need to redefine these aspects of a protocol and\n   therefore\
    \ lessens code bloat as the same problem doesn't need to be\n   solved yet again\
    \ in another place.\n   Failure of the DTLS handshake protocol will cause both\
    \ parties to\n   abandon the exchange.  The AC SHOULD blacklist this WTP for a\
    \ period\n   of time to prevent a misconfigured WTP from repeatedly discovering\n\
    \   and failing authentication.  The WTP MUST return to the discovery\n   state\
    \ of SLAPP to locate another suitable AC with which it will\n   initiate a DTLS\
    \ exchange.\n   Once the DTLS handshake has succeeded, the WTP and AP transition\
    \ into\n   \"image download state\" and protect all further SLAPP messages with\n\
    \   the DTLS-negotiated cipher suite.\n"
- title: 5.1.  Example Authentication Models (Informative)
  contents:
  - "5.1.  Example Authentication Models (Informative)\n   Any valid cipher suite\
    \ in [7] can be used to authenticate the WTP\n   and/or the AC.  Different scenarios\
    \ require different authentication\n   models.  The following examples are illustrative\
    \ only and not meant\n   to be exhaustive.\n   Since neither side typically involves\
    \ a human being, a username/\n   password-based authentication is not possible.\n\
    \   Zero-config requirements on certain WTP deployments can predicate\n   certain\
    \ authentication options and eliminate others.\n"
- title: 5.1.1.  Mutual Authentication
  contents:
  - "5.1.1.  Mutual Authentication\n   When mutually authenticating, the WTP authenticates\
    \ the AC, thereby\n   ensuring that the AC to which it is connecting is a trusted\
    \ AC, and\n   the AC authenticates the WTP, thereby ensuring that the WTP that\
    \ is\n   connecting is a trusted WTP.\n   Mutual authentication is typically achieved\
    \ by using certificates on\n   the WTP and AC, which ensure public keys each party\
    \ owns.  These\n   certificates are digitally signed by a Certification Authority,\
    \ a\n   trusted third party.\n   Enrolling each WTP in a Certification Authority\
    \ is outside the scope\n   of this document, but it should be noted that a manufacturing\n\
    \   Certification Authority does not necessarily provide the level of\n   assurance\
    \ necessary as it will only guarantee that a WTP or AC was\n   manufactured by\
    \ a particular company and cannot distinguish between a\n   trusted WTP and a\
    \ WTP that is not trusted but was purchased from the\n   same manufacturer as\
    \ the AC.\n"
- title: 5.1.2.  WTP-Only Authentication
  contents:
  - "5.1.2.  WTP-Only Authentication\n   Some deployments may only require the WTP\
    \ to authenticate to the AC\n   and not the other way around.\n   In this case,\
    \ the WTP has a keypair that can uniquely identify it\n   (for example, using\
    \ a certificate) and, that keypair is used in a\n   \"server-side authentication\"\
    \ [7] exchange.\n   This authentication model does not authenticate the AC and\
    \ a rogue AC\n   could assert control of a valid WTP.  It should be noted, though,\n\
    \   that this will only allow the WTP to provide service for networks\n   made\
    \ available by the rogue AC.  No unauthorized network access is\n   possible.\n"
- title: 5.1.3.  Anonymous Authentication
  contents:
  - "5.1.3.  Anonymous Authentication\n   In some deployments, it MAY just be necessary\
    \ to foil the casual\n   snooping of packets.  In this case, an unauthenticated,\
    \ but\n   encrypted, connection can suffice.  Typically a Diffie-Hellman\n   exchange\
    \ is performed between the AC and WTP and the resulting\n   unauthenticated key\
    \ is used to encrypt traffic between the AC and\n   WTP.\n"
- title: 6.  SLAPP Control Protocols
  contents:
  - "6.  SLAPP Control Protocols\n   In this section, we describe two extensions for\
    \ SLAPP -- one that is\n   specific to 802.11 WLANs and another that is a technology-neutral\n\
    \   protocol by which an AC can download a bootable image to a WTP.\n"
- title: 6.1.  802.11 Control Protocol for SLAPP
  contents:
  - "6.1.  802.11 Control Protocol for SLAPP\n   This section describes a SLAPP extension\
    \ that is targeted towards\n   WTPs and ACs implementing the IEEE 802.11 WLAN\
    \ standard.  This\n   extension contains all the technology-specific components\
    \ that will\n   be used by an AC to control and manage 802.11 WTPs.\n"
- title: 6.1.1.  Supported CAPWAP Architectures
  contents:
  - "6.1.1.  Supported CAPWAP Architectures\n   The CAPWAP architecture taxonomy document\
    \ [2] describes multiple\n   architectures that are in use today in the WLAN industry.\
    \  While\n   there is a wide spectrum of variability present in these documented\n\
    \   architectures, supporting every single variation or choice would lead\n  \
    \ to a complex protocol and negotiation phase.  In the interest of\n   limiting\
    \ the complexity of the 802.11 component, we have limited the\n   negotiation\
    \ to four different architectural choices as listed below:\n   Local MAC, bridged\
    \ mode:  This mode of operation falls under the\n      Local MAC architecture.\
    \  The 802.11 MAC is terminated at the WTP.\n      The WTP implements an L2 bridge\
    \ that forwards packets between its\n      WLAN interface and its Ethernet interface.\n\
    \   Local MAC, tunneled mode:  This mode of operation also falls under\n     \
    \ the Local MAC architecture where the 802.11 MAC is terminated at\n      the\
    \ WTP.  The difference between this mode and the previous one is\n      that in\
    \ this mode, the WTP tunnels 802.3 frames to the AC using\n      the mechanisms\
    \ defined in Section 6.1.2.\n   Split MAC, L2 crypto at WTP:  This mode of operation\
    \ falls under the\n      Split MAC architecture.  The 802.11 MAC is split between\
    \ the WTP\n      and the AC, the exact nature of the split is described in Section\n\
    \      6.1.1.2.  The L2 crypto functions are implemented in the WTP are\n    \
    \  the ones used to satisfy this function irrespective of whether or\n      not\
    \ the AC is also capable of this function.  The WTP tunnels L2\n      frames to\
    \ the AC using mechanisms defined in Section 6.1.2.\n   Split MAC, L2 crypto at\
    \ AC:  This mode of operation also falls under\n      the Split MAC architecture.\
    \  The difference between this one and\n      the previous one is that the L2\
    \ crypto functions implemented in\n      the AC are used to satisfy this function\
    \ irrespective of whether\n      or not these functions are also available at\
    \ the WTP.  The WTP\n      tunnels L2 frames to the AC using mechanisms defined\
    \ in Section\n      6.1.2.\n"
- title: 6.1.1.1.  Local MAC
  contents:
  - "6.1.1.1.  Local MAC\n   The Local MAC architecture as documented in the CAPWAP\
    \ architecture\n   taxonomy document [2] performs all 802.11 frame processing\
    \ at the\n   WTP.  The conversion from 802.11 to 802.3 and vice versa is also\n\
    \   implemented at the WTP.  This would mean that other functions like\n   fragmentation/reassembly\
    \ of 802.11 frames, and encryption/decryption\n   of 802.11 frames is implemented\
    \ at the WTP.\n"
- title: 6.1.1.1.1.  Bridged Mode
  contents:
  - "6.1.1.1.1.  Bridged Mode\n   In this sub-mode of the Local MAC architecture,\
    \ the 802.11 frames are\n   converted to 802.3 frames and bridged onto the Ethernet\
    \ interface of\n   the WTP.  These frames may be tagged with 802.1Q VLAN tags\
    \ assigned\n   by the AC.\n"
- title: 6.1.1.1.2.  Tunneled Mode
  contents:
  - "6.1.1.1.2.  Tunneled Mode\n   In this sub-mode of the Local MAC architecture,\
    \ the 802.11 frames are\n   converted to 802.3 frames and are tunneled (using\
    \ the tunneling\n   mechanism defined in Section 6.1.2) to the AC to which the\
    \ WTP is\n   attached.  These frames may be tagged with 802.1Q VLAN tags assigned\n\
    \   by the AC.\n"
- title: 6.1.1.2.  Split MAC
  contents:
  - "6.1.1.2.  Split MAC\n   In the Split MAC architecture, the MAC functions of an\
    \ 802.11 AP are\n   split between the WTP and the AC.  The exact nature of the\
    \ split is\n   dependent upon the sub-modes listed in this section.  In both cases,\n\
    \   frames are tunneled to the AC using the mechanism defined in Section\n   6.1.2.\n\
    \   Some of these Split MAC architectures convert the 802.11 frames into\n   802.3\
    \ frames, which may be 802.1Q-tagged using tags assigned by the\n   AC, while\
    \ other of these Split MAC architectures will tunnel the\n   entire 802.11 frame\
    \ to the AC.  The AC and WTP agree on what type of\n   frame will be tunneled\
    \ during the control protocol registration in\n   Section 6.1.3\n"
- title: 6.1.1.2.1.  L2 Crypto at the WTP
  contents:
  - "6.1.1.2.1.  L2 Crypto at the WTP\n   For this sub-mode of the Split MAC architecture,\
    \ the 802.11 AP\n   functions are split as follows:\n   At the WTP:\n      802.11\
    \ control frame processing\n      802.11 encryption and decryption\n      802.11\
    \ fragmentation and reassembly\n      Rate Adaptation\n      802.11 beacon generation\n\
    \      Power-save buffering and Traffic Indication Map (TIM) processing\n   At\
    \ the AC:\n      802.11 Management frame processing\n      802.11 DS and portal\n\
    \   Split MAC implementations of this kind may tunnel either 802.11 or\n   802.3\
    \ frames between the AC and the WTP.\n"
- title: 6.1.1.2.2.  L2 Crypto at the AC
  contents:
  - "6.1.1.2.2.  L2 Crypto at the AC\n   For this sub-mode of the Split MAC architecture,\
    \ the 802.11 AP\n   functions are split as follows:\n   At the WTP:\n      802.11\
    \ control frame processing\n      Rate Adaptation\n      802.11 beacon generation\n\
    \      Power-save buffering and TIM processing\n   At the AC:\n      802.11 Management\
    \ frame processing\n      802.11 encryption and decryption\n      802.11 fragmentation\
    \ and reassembly\n      802.11 DS and portal\n   Split MAC implementations of\
    \ this kind tunnel 802.11 frames between\n   the AC and the WTP.\n"
- title: 6.1.2.  Transport
  contents:
  - "6.1.2.  Transport\n   The 802.11 Control Protocol has two components, one for\
    \ transporting\n   the specific control and provisioning messages and another\
    \ to tunnel\n   data traffic from the WTP to the AC.\n   The SLAPP 802.11 Control\
    \ Protocol uses the Generic Routing\n   Encapsulation (GRE) [4] to encapsulate\
    \ L2 frames.  Depending on\n   whether and how an architecture splits its MAC,\
    \ some architectures\n   may tunnel 802.11 frames directly to the AC while others\
    \ may tunnel\n   802.3 frames, which may be optionally 802.1Q-tagged using tags\n\
    \   assigned by the AC.\n   The delivery mechanism of these GRE packets is IP.\
    \  Therefore, the IP\n   protocol of the outer packet is 47, indicating a GRE\
    \ header follows.\n   When GRE encapsulates 802.11 frames, the ether type in the\
    \ GRE header\n   is TBD; when GRE encapsulates 802.3 frames, the ether type in\
    \ the GRE\n   header is TBD2.\n   Since IP is the delivery mechanism, all issues\
    \ governing\n   fragmentation and reassembly are handled by [5].\n"
- title: 6.1.2.1.  SLAPP 802.11 Control Protocol Header
  contents:
  - "6.1.2.1.  SLAPP 802.11 Control Protocol Header\n   When using the 802.11 Control\
    \ Protocol, the type of SLAPP message is\n   four (4), \"control protocol packet\"\
    .  In this case, a two (2) octet\n   field is appended to the SLAPP header to\
    \ indicate the control\n   protocol type as shown in Figure 8.  The SLAPP 802.11\
    \ Control\n   Protocol takes place in the \"Negotiated Control Protocol\" phase\
    \ of\n   Section 4.1, and all SLAPP 802.11 Control Protocol messages are\n   therefore\
    \ secured by the security association created immediately\n   prior to entering\
    \ that phase.\n       0                   1                   2              \
    \     3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  Maj\
    \  |  Min  |      4        |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  802.11 Control Protocol Type |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 8: SLAPP Control Protocol Header\n   Where valid 802.11\
    \ Control Protocol Types are:\n      1 : Registration Request - sent from WTP\
    \ to AC\n      2 : Registration Response - sent from AC to WTP\n      3 : De-Registration\
    \ Request - sent by either WTP or AC\n      4 : De-Registration Response - sent\
    \ by the recipient of the\n          corresponding request\n      5 : Configuration\
    \ Request - sent by WTP to AC\n      6 : Configuration Response - sent by AC to\
    \ WTP\n      7 : Configuration Update - sent by AC to WTP\n      8 : Configuration\
    \ Acknowledgment - sent by the WTP to AC\n      9 : Status Request - sent by the\
    \ AC to the WTP\n      10 : Status Response - sent by the WTP to the AC\n    \
    \  11 : Statistics Request - sent by the AC to the WTP\n      12 : Statistics\
    \ Response - sent by the WTP to the AC\n      13 : Event - sent by the WTP to\
    \ the AC\n      14 : Keepalive - sent either way\n      15 : Key Config Request\
    \ - sent by the AC to the WTP\n      16 : Key Config Response - sent by the WTP\
    \ to the AC\n"
- title: 6.1.3.  Provisioning and Configuration of WTP
  contents:
  - "6.1.3.  Provisioning and Configuration of WTP\n   All basic configuration functions\
    \ are applicable per-Extended Service\n   Set Identifier (ESSID) per-radio in\
    \ a WTP.  Some WTPs MAY support\n   more than one ESSID per-radio, while all WTPs\
    \ MUST support at least\n   one ESSID per-radio, which may be considered the primary\
    \ ESSID in\n   case of multiple ESSID support.  All per-WTP configurations and\n\
    \   capabilities (e.g., number of radios) are handled as part of the\n   discovery\
    \ and initialization process.\n   The provisioning of the regulatory domain of\
    \ a WTP is beyond the\n   scope of this document.  A WTP, once provisioned for\
    \ a specific\n   regulatory domain, MUST restrict the operational modes, channel,\n\
    \   transmit power, and any other necessary limits based on the knowledge\n  \
    \ contained within its software image and hardware capabilities.  The\n   WTP\
    \ MUST communicate its capabilities limited by the regulatory\n   domain as well\
    \ as by the WTP hardware, if any, to the AC during the\n   capability exchange.\n\
    \   The allocation and assignment of Basic Service Set Identifiers\n   (BSSIDs)\
    \ to the primary interface and to the virtual access point\n   (AP) interfaces,\
    \ if supported, are outside the scope of this\n   document.\n"
- title: 6.1.3.1.  Information Elements
  contents:
  - "6.1.3.1.  Information Elements\n   Information elements (IEs) are used to communicate\
    \ capability,\n   configuration, status, and statistics information between the\
    \ AC and\n   the WTP.\n"
- title: 6.1.3.1.1.  Structure of an Information Element
  contents:
  - "6.1.3.1.1.  Structure of an Information Element\n   The structure of an information\
    \ element is show below.  The element\n   ID starts with an element ID octet,\
    \ followed by a 1-octet length, and\n   the value of the element ID whose length\
    \ is indicated in the Length\n   field.  The maximum length of an element is 255\
    \ octets.\n    0                   1                   2                   3\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Element ID  |     Length    |   Value ....                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 6.1.3.1.2.  CAPWAP Mode
  contents:
  - "6.1.3.1.2.  CAPWAP Mode\n   This element defines the MAC architecture modes (Section\
    \ 6.1.1).\n      Element ID : 1\n      Length : 1\n      Value : The following\
    \ values are defined.\n      Bit 0 : CAPWAP mode 1 - Local MAC, bridged mode\n\
    \      Bit 1 : CAPWAP mode 2 - Local MAC, tunneled mode\n      Bit 2 : CAPWAP\
    \ mode 3 - Split MAC, WTP encryption, 802.3 tunneling\n      Bit 3 : CAPWAP mode\
    \ 4 - Split MAC, WTP encryption, 802.11\n              tunneling\n      Bit 4\
    \ : CAPWAP mode 5 - Split MAC, AC encryption, 802.11 tunneling\n      Bits 5-7\
    \ : Set to 0\n   When this element is included in the capabilities message, then\
    \ the\n   setting of a bit indicates the support for this CAPWAP mode at the\n\
    \   WTP.  When this element is used in configuration and status messages,\n  \
    \ then exactly one of bits 0-4 MUST be set.\n"
- title: 6.1.3.1.3.  Number of WLAN Interfaces
  contents:
  - "6.1.3.1.3.  Number of WLAN Interfaces\n   This element refers to the number of\
    \ 802.11 WLANs present in the WTP.\n      Element ID : 2\n      Length : 1\n \
    \     Value : 0-255\n"
- title: 6.1.3.1.4.  WLAN Interface Index
  contents:
  - "6.1.3.1.4.  WLAN Interface Index\n   This element is used to refer to a particular\
    \ instance of a WLAN\n   interface when used in configuration and status messages.\
    \  When used\n   within a recursion element, the elements within the recursion\
    \ element\n   correspond to the WLAN interface specified in this element.\n  \
    \    Element ID : 3\n      Length : 1\n      Value : 0 - (Number of WLAN interfaces\
    \ - 1)\n"
- title: 6.1.3.1.5.  WLAN Interface Hardware Vendor ID
  contents:
  - "6.1.3.1.5.  WLAN Interface Hardware Vendor ID\n   This element is the WLAN Interface\
    \ hardware vendor's SMI enterprise\n   code in network octet order (these enterprise\
    \ codes can be obtained\n   from, and registered with, IANA).  This field appears\
    \ once for each\n   instance of WLAN interface present in the WTP.\n      Element\
    \ ID : 4\n      Length : 4\n      Value : 32-bit value\n"
- title: 6.1.3.1.6.  WLAN Interface Type ID
  contents:
  - "6.1.3.1.6.  WLAN Interface Type ID\n   This element is an ID assigned by the\
    \ WLAN Interface hardware vendor\n   to indicate the type of the WLAN interface.\
    \  It is controlled by the\n   hardware vendor and the range of possible values\
    \ is beyond the scope\n   of this document.  This field appears once for each\
    \ instance of a\n   WLAN interface present in the WTP.\n      Element ID : 5\n\
    \      Length : 4\n"
- title: 6.1.3.1.7.  Regulatory Domain
  contents:
  - "6.1.3.1.7.  Regulatory Domain\n   If a regulatory domain is provisioned in the\
    \ WTP, then the WTP\n   indicates this by including this element in the capabilities\
    \ list.\n   If this information is not available at the WTP, then this element\n\
    \   SHOULD not be included in the capabilities list.  The process by\n   which\
    \ this information is provisioned into the WTP is beyond the\n   scope of this\
    \ document.\n      Element ID : 6\n      Length : 4\n      Value : ISO code assigned\
    \ to the regulatory domain\n"
- title: 6.1.3.1.8.  802.11 PHY Mode and Channel Information
  contents:
  - "6.1.3.1.8.  802.11 PHY Mode and Channel Information\n   This element indicates\
    \ the list of 802.11 Physical Layer (PHY) modes\n   supported by the WTP along\
    \ with a list of channels and maximum power\n   level supported for this mode.\
    \  This element appears once for each\n   instance of WLAN interface at the WTP.\
    \  There could be multiple\n   instances of this element if the WLAN interface\
    \ supports multiple PHY\n   types.\n      Element ID : 7\n      Length : Variable\n\
    \      Valid : This field consists of\n      PHY mode : With a length of 1 octet\
    \ with values as follows:\n         0 : Radio Disabled/Inactive\n         1 :\
    \ IEEE 802.11b\n         2 : IEEE 802.11g\n         3 : IEEE 802.11a\n       \
    \  4-255 : Reserved\n      Power Level : In the capabilities messages, this indicates\
    \ the\n         maximum power level supported in this mode by the WTP; while in\n\
    \         the configuration and status messages, this field indicates the\n  \
    \       desired power level or the current power level that the WTP is\n     \
    \    operating at.  The field has a length of 1 octet and the power\n        \
    \ level is indicated in dBm.\n      Channel Information : A variable number of\
    \ 2-octet values that\n         indicate the center frequencies (in KHz) of all\
    \ supported\n         channels in this PHY mode.\n   When this element is used\
    \ in configuration and status messages, the\n   Power Level field indicates the\
    \ desired or current operating power\n   level.  The Channel field has exactly\
    \ one 2-octet value indicating\n   the desired or current operating frequency.\n"
- title: 6.1.3.1.9.  Cryptographic Capability
  contents:
  - "6.1.3.1.9.  Cryptographic Capability\n   In the capabilities message, this element\
    \ contains the list of\n   cryptographic algorithms that are supported by the\
    \ WTP.  This appears\n   once for each instance of the WLAN interface present\
    \ in the WTP.  In\n   configuration and status messages, this element is used\
    \ to indicate\n   the configured cryptographic capabilities at the WTP.\n    \
    \  Element ID : 8\n      Length : 1\n      Value : The following bits are defined:\n\
    \         Bit 0 : WEP\n         Bit 1 : TKIP\n         Bit 2 : AES-CCMP\n    \
    \     Bits 3-7 : Reserved\n"
- title: 6.1.3.1.10.  Other IEEE 802.11 Standards Support
  contents:
  - "6.1.3.1.10.  Other IEEE 802.11 Standards Support\n   This element contains a\
    \ bitmap indicating support at the WTP for\n   various IEEE 802.11 standards.\n\
    \      Element ID : 9\n      Length : 4\n      Value : A bitmap as follows:\n\
    \         Bit 0 : WPA\n         Bit 1 : 802.11i\n         Bit 2 : WMM\n      \
    \   Bit 3 : WMM-SA\n         Bit 4 : U-APSD\n         Bits 5-32 : Reserved\n"
- title: 6.1.3.1.11.  Antenna Information Element
  contents:
  - "6.1.3.1.11.  Antenna Information Element\n   In the capabilities message, this\
    \ element is formatted as follows\n      Element ID : 10\n      Length : 4\n \
    \     Value : Formatted as follows:\n         Bits 0-7 : Number of Antennae\n\
    \         Bit 8 : Individually Configurable, 0 = No, 1 = Yes\n         Bit 9 :\
    \ Diversity support, 0 = No, 1 = Yes\n         Bit 10 : 0 = Internal, 1 = External\n\
    \         Bits 11-31 : Reserved\n   In configuration and status messages, this\
    \ element is formatted as\n   follows:\n      Element ID : 10\n      Length :\
    \ 4\n      Value : Formatted as follows:\n         Bits 0-7 : Antenna Number -\
    \ is a number between 0 and the\n         number of antennae indicated by the\
    \ WTP.  The value is valid\n         only if Bit 8 is set; otherwise, it MUST\
    \ be ignored.\n         Bit 8 : Antenna Select - if this bit is reset, then the\
    \ antenna\n         selection is left to the algorithm on the WTP.  If this bit\
    \ is\n         set, then the Antenna Number field indicates the antenna that\n\
    \         should be used for transmit and receive.\n         Bits 9-31 : Reserved\n"
- title: 6.1.3.1.12.  Number of BSSIDs
  contents:
  - "6.1.3.1.12.  Number of BSSIDs\n   This element indicates the number of BSSIDs\
    \ supported by the WLAN\n   interface.  This element is optional in the capabilities\
    \ part of the\n   registration request message, and if it is absent, then the\
    \ number of\n   BSSIDs is set to 1.  This element appears once for each instance\
    \ of a\n   WLAN interface present in the WTP.\n      Element ID : 11\n      Length\
    \ : 1\n      Value : The number of BSSIDs that the WLAN interface is capable of\n\
    \      supporting.\n"
- title: 6.1.3.1.13.  BSSID Index
  contents:
  - "6.1.3.1.13.  BSSID Index\n   This element is used when sending configuration\
    \ or status specific to\n   a certain BSSID in the WTP.\n      Element ID : 12\n\
    \      Length : 1\n      Valid values are from 0 to (Number of BSSIDs -1)\n"
- title: 6.1.3.1.14.  ESSID
  contents:
  - "6.1.3.1.14.  ESSID\n   This element is used in configuration and status messages\
    \ to either\n   configure the ESSID on a certain BSSID or report the current\n\
    \   operating value.\n      Element ID : 13\n      Length : Variable, between\
    \ 0 and 32 both inclusive.\n      Value : Variable, contains ASCII characters.\n\
    \   There is no default value for this parameter.\n"
- title: 6.1.3.1.15.  ESSID Announcement Policy
  contents:
  - "6.1.3.1.15.  ESSID Announcement Policy\n   This element is used in configuration\
    \ and status messages to control\n   the announcement of the ESSID in 802.11 beacons.\
    \  For the Local MAC\n   modes of operation, this field is also used to control\
    \ whether the\n   WTP should respond to Probe Requests that have a NULL ESSID\
    \ in them.\n      Element ID : 14\n      Length : 1\n      Value : Defined as\
    \ follows:\n      Bit 0 : ESSID announcement, 0 = Hide ESSID, 1 = Display ESSID\
    \ in\n              802.11 beacons.  The default value for this bit is 1.\n  \
    \    Bit 1 : Probe Response policy, 0 = Respond to Probe Requests that\n     \
    \         contain a NULL ESSID, 1 = Respond only to Probe Requests\n         \
    \     that match the configured ESSID.  The default value for\n              this\
    \ bit is 0.\n      Bit 2-7 : Reserved\n"
- title: 6.1.3.1.16.  Beacon Interval
  contents:
  - "6.1.3.1.16.  Beacon Interval\n   This element is used to configure the beacon\
    \ interval on a BSSID on\n   the WTP.\n      Element ID : 15\n      Length : 2\n\
    \      Value : Valid values for the beacon interval as allowed by IEEE\n     \
    \ 802.11\n   The default value for this parameter is 100.\n"
- title: 6.1.3.1.17.  DTIM period
  contents:
  - "6.1.3.1.17.  DTIM period\n   This element is used to configure the DTIM period\
    \ on a BSSID present\n   on the WTP.\n      Element ID : 16\n      Length : 2\n\
    \      Value : Valid values for the DTIM period as allowed by IEEE\n      802.11.\n\
    \   The default value for this parameter is 1.\n"
- title: 6.1.3.1.18.  Basic Rates
  contents:
  - "6.1.3.1.18.  Basic Rates\n   Configure or report the configured set of basic\
    \ rates.\n      Element ID : 17\n      Length : 4\n      Value : Each of the bits\
    \ in the following list is interpreted as\n      follows.  If the bit is set,\
    \ then that particular rate is to be\n      configured as a basic rate.  If the\
    \ bit is reset, then the rate is\n      not to be configured as a basic rate.\n\
    \         Bit 0 : 1 Mbps\n         Bit 1 : 2 Mbps\n         Bit 2 : 5.5 Mbps\n\
    \         Bit 3 : 11 Mbps\n         Bit 4 : 6 Mbps\n         Bit 5 : 9 Mbps\n\
    \         Bit 6 : 12 Mbps\n         Bit 7 : 18 Mbps\n         Bit 8 : 24 Mbps\n\
    \         Bit 9 : 36 Mbps\n         Bit 10 : 48 Mbps\n         Bit 11 : 54 Mbps\n\
    \         Bits 12-31 : Reserved\n"
- title: 6.1.3.1.19.  Supported Rates
  contents:
  - "6.1.3.1.19.  Supported Rates\n   Configure or report the configured set of basic\
    \ rates.\n      Element ID : 18\n      Length : 4\n      Value : Each of the bits\
    \ in the following list is interpreted as\n      follows.  If the bit is set,\
    \ then that particular rate is to be\n      configured as a supported rate.  If\
    \ the bit is reset, then the\n      rate is not to be configured as a supported\
    \ rate.\n         Bit 0 : 1 Mbps\n         Bit 1 : 2 Mbps\n         Bit 2 : 5.5\
    \ Mbps\n         Bit 3 : 11 Mbps\n         Bit 4 : 6 Mbps\n         Bit 5 : 9\
    \ Mbps\n         Bit 6 : 12 Mbps\n         Bit 7 : 18 Mbps\n         Bit 8 : 24\
    \ Mbps\n         Bit 9 : 36 Mbps\n         Bit 10 : 48 Mbps\n         Bit 11 :\
    \ 54 Mbps\n         Bits 12-31 : Reserved\n"
- title: 6.1.3.1.20.  802.11 Retry Count
  contents:
  - "6.1.3.1.20.  802.11 Retry Count\n   This element is used to configure long and\
    \ short retries for each\n   BSSID present on the WTP.\n      Element ID : 19\n\
    \      Length : 2\n      Value : as follows:\n         Bits 0-7 : Short retry\
    \ count, default value is 3.\n         Bits 8-15 : Long retry count, default value\
    \ is 3.\n"
- title: 6.1.3.1.21.  Fragmentation Threshold
  contents:
  - "6.1.3.1.21.  Fragmentation Threshold\n   This element is used to configure the\
    \ fragmentation threshold on a\n   BSSID present on the WTP.\n      Element ID\
    \ : 20\n      Length : 2\n      Value : Valid values for the fragmentation threshold\
    \ as allowed by\n      IEEE 802.11.\n   The default value for this parameter is\
    \ 2346.\n"
- title: 6.1.3.1.22.  RTS Threshold
  contents:
  - "6.1.3.1.22.  RTS Threshold\n   This element is used to configure the Request\
    \ to Send (RTS) threshold\n   on a BSSID present on the WTP.\n      Element ID\
    \ : 21\n      Length : 2\n      Value : Valid values for RTS threshold as allowed\
    \ by IEEE 802.11.\n   The default value for this parameter is 2346.\n"
- title: 6.1.3.1.23.  Short/Long Preamble
  contents:
  - "6.1.3.1.23.  Short/Long Preamble\n   This element is used to configure the preamble\
    \ type used for\n   transmission in 802.11b mode.\n      Element ID : 22\n   \
    \   Length : 1\n      Value : Defined as follows:\n         0 : Disable Short\
    \ preamble\n         1 : Enable Short preamble\n         2-255 : Reserved\n  \
    \ The default value for this parameter is 0.\n"
- title: 6.1.3.1.24.  802.1Q Tag
  contents:
  - "6.1.3.1.24.  802.1Q Tag\n   This element is used to configure the tagging of\
    \ packets belonging to\n   a particular SSID when transferred between the AC and\
    \ the WTP in\n   CAPWAP modes 2-3, or before the WTP bridges the 802.3 frame to\
    \ its\n   wired interface when operating in CAPWAP mode 1.\n      Element ID :\
    \ 23\n      Length : 2\n      Value : 802.1Q tag\n   If this element is absent\
    \ in the configuration, then the WTP MUST\n   assume that no tagging is required\
    \ and should expect to receive\n   untagged frames on frames destined towards\
    \ the wireless interface.\n"
- title: 6.1.3.1.25.  SLAPP Registration ID
  contents:
  - "6.1.3.1.25.  SLAPP Registration ID\n   A successful registration response from\
    \ an AC to a WTP MUST contain\n   this element.  It is used in messages between\
    \ the WTP and the AC on\n   all other messages during the duration for which the\
    \ registration is\n   active.\n      Element ID : 24\n      Length : 4\n     \
    \ Value : A 32-bit unsigned number allocated by the AC\n"
- title: 6.1.3.1.26.  WTP Name
  contents:
  - "6.1.3.1.26.  WTP Name\n   The AC uses this element to assign a string of ASCII\
    \ characters to\n   the WTP.\n      Element ID : 25\n      Length : Variable,\
    \ between 0 and 64 both inclusive\n      Value : A variable length string of ASCII\
    \ characters\n"
- title: 6.1.3.1.27.  Event Filter
  contents:
  - "6.1.3.1.27.  Event Filter\n   The AC uses this element to assign importance to\
    \ events, enable or\n   disable notification, and to configure the global event\
    \ notification\n   policy.  When the Event Identifier is 0, this element serves\
    \ as a\n   global notification policy message.  The bitmap indicates the types\n\
    \   of events that require the WTP to generate a notification.  When the\n   Event\
    \ Identifier is non-zero, this element is used to configure a\n   specific event\
    \ for notification and its importance level.  The\n   importance level is specified\
    \ by setting exactly one bit in the\n   bitmap.  If none of the bits are set in\
    \ the bitmap, the element\n   should be interpreted as a cancellation request.\
    \  The WTP should stop\n   sending notifications for the corresponding event specified\
    \ in the\n   Element Identifier.\n      Element ID : 26\n      Length : 4\n  \
    \    Value : Defined as follows:\n         Bits 0 - 15: Event Identifier\n   \
    \      Bit 16: Fatal - The system is not usable.\n         Bit 17: Alert - Immediate\
    \ action is required.\n         Bit 18: Critical\n         Bit 19: Error\n   \
    \      Bit 20: Warning\n         Bit 21: Notification\n         Bit 22: Informational\n\
    \         Bit 23: Debug\n         Bits 24 - 31: Reserved\n"
- title: 6.1.3.1.28.  Radio Mode
  contents:
  - "6.1.3.1.28.  Radio Mode\n   The AC uses this element to indicate the mode of\
    \ operation for the\n   radio for each WLAN interface.\n      Element ID : 27\n\
    \      Length : 1\n      Value : The following are valid values:\n         0 :\
    \ Radio is disabled\n         1 : Radio is enabled\n         2-255 : Reserved\n"
- title: 6.1.3.1.29.  IEEE 802.11e Element
  contents:
  - "6.1.3.1.29.  IEEE 802.11e Element\n   The AC uses this element to configure 802.11e\
    \ functions at the WTP.\n      Element ID : 28\n      Length : 4\n      Value\
    \ : A bitmap as follows:\n         Bit 0 : WMM\n         Bit 1 : WMM-SA\n    \
    \     Bit 2 : U-APSD\n         Bits 3-32 : Reserved\n"
- title: 6.1.3.1.30.  Configuration Statistics
  contents:
  - "6.1.3.1.30.  Configuration Statistics\n   This element defines the statistics\
    \ relating to configuration and\n   registration events as seen by the WTP.\n\
    \      Element ID : 29\n      Length : 32\n      Value : The value is as follows:\n\
    \      *  Configuration Requests : 4 octets - Number of Configuration\n      \
    \   Request messages sent by the WTP since the last reboot or reset\n        \
    \ of the counters.\n      *  Configuration Responses : 4 octets\n      *  Configuration\
    \ Updates : 4 octets\n      *  Configuration ACKs : 4 octets\n      *  Registration\
    \ Requests : 4 octets\n      *  Registration Responses : 4 octets\n      *  De-Registration\
    \ Requests : 4 octets\n      *  De-Registration Responses : 4 octets\n"
- title: 6.1.3.1.31.  Transmit Frame Counters
  contents:
  - "6.1.3.1.31.  Transmit Frame Counters\n   This information element contains a\
    \ set of counters relating to the\n   transmit side of the wireless link at the\
    \ WTP.  These counters apply\n   to either a BSS or an Access Category (if Wireless\
    \ Multimedia (WMM)\n   is enabled).\n      Element ID : 30\n      Length : 112\
    \ octets\n      Value : The value of this element is defined as follows:\n   \
    \   *  Total received from the network : 4 octets\n      *  Successfully transmitted\
    \ frames (total) : 4 octets\n      *  Successfully transmitted 802.11 Mgmt frames\
    \ : 4 octets\n      *  Successfully transmitted 802.11 Data frames : 4 octets\n\
    \      *  Transmitted 802.11 Control frames : 4 octets\n      *  Frames that reached\
    \ max-retry limit : 4 octets\n      *  Transmitted frames with 1 retry attempt\
    \ : 4 octets\n      *  Transmitted frames with 2 retry attempts : 4 octets\n \
    \     *  Transmitted frames with more than 2 retry attempts : 4 octets\n     \
    \ *  Frames transmitted at each 802.11 PHY rate : 12*4 octets - The\n        \
    \ counters indicate the number of frames at each of the following\n         rates,\
    \ respectively: 1, 2, 5.5, 11, 6, 9, 12, 18, 24, 36, 48,\n         54 Mbps.\n\
    \      *  Total frame dropped : 4 octets\n      *  Frames dropped due to insufficient\
    \ resources : 4 octets\n      *  Frames dropped due to power-save timeouts : 4\
    \ octets\n      *  Frames dropped due to other reasons : 4 octets\n      *  Fragments\
    \ transmitted : 4 octets\n      *  Fragments dropped : 4 octets\n      *  Power-save\
    \ multicast frames : 4 octets\n      *  Power-save unicast frames : 4 octets\n"
- title: 6.1.3.1.32.  Received Frame Counters
  contents:
  - "6.1.3.1.32.  Received Frame Counters\n   This information element includes all\
    \ statistics related to the\n   reception of the frames by WTP.  These counters\
    \ apply to either a BSS\n   or an Access Category (if WMM is enabled).\n     \
    \ Element ID : 31\n      Length : 108 octets\n      Value : The value of this\
    \ element is defined as follows:\n      *  Total Frames received : 4 octets\n\
    \      *  Frames with the retry bit set : 4 octets\n      *  802.11 Data frames\
    \ received : 4 octets\n      *  802.11 Mgmt frames received : 4 octets\n     \
    \ *  802.11 Control frames received : 4 octets\n      *  Cyclic Redundancy Check\
    \ (CRC) errors : 4 octets\n      *  PHY errors : 4 octets\n      *  Total Fragments\
    \ received : 4 octets\n      *  Reassembled frames : 4 octets\n      *  Reassembly\
    \ failures : 4 octets\n      *  Successful Decryption : 4 octets\n      *  Decryption\
    \ failures : 4 octets\n      *  Rate statistics : 48 octets - The number of frames\
    \ received at\n         each of the 802.11 PHY rates, respectively - 1, 2, 5.5,\
    \ 11, 6,\n         9, 12, 18, 24, 36, 49, 54 Mbps.\n      *  Total frames dropped\
    \ : 4 octets\n      *  Frames dropped due to insufficient resources : 4 octets\n\
    \      *  Frames dropped due to other reasons : 4 octets\n"
- title: 6.1.3.1.33.  Association Statistics
  contents:
  - "6.1.3.1.33.  Association Statistics\n   This element includes information about\
    \ the current stations\n   associated with the BSS.\n      Element ID : 32\n \
    \     Length : Variable\n      Value : The value is defined as follows:\n    \
    \  *  Total association requests : 4 octets\n      *  Total associations accepted\
    \ : 4 octets\n      *  Total associations rejected : 4 octets\n      *  Current\
    \ associations : 4 octets\n      *  For each associated station,\n         + \
    \ Station MAC address : 6 octets\n         +  Power save state : 1 octet\n   \
    \      +  Current Tx rate : 1 octet\n         +  Rate of last packet : 1 octet\n\
    \         +  Preamble type : 1 octet\n         +  WMM/U-APSD state : 1 octet\n"
- title: 6.1.3.1.34.  Status Element
  contents:
  - "6.1.3.1.34.  Status Element\n   The status IE is included in the status response\
    \ message sent by the\n   WTP to the AC.  It contains a set of fields that are\
    \ used to indicate\n   the status of various states at the WTP or each BSS configured\
    \ in the\n   WTP.\n      Element ID : 33\n      Length : 2 octets\n      Value\
    \ : The value is defined as follows:\n         Enterprise Resource Planning (ERP)\
    \ element, if applicable.  If\n         not applicable, then this field MUST be\
    \ set to 0.\n         Noise Floor : 1 octet\n"
- title: 6.1.3.1.35.  Event Configuration
  contents:
  - "6.1.3.1.35.  Event Configuration\n   This element is used by the AC to configure\
    \ the set of events that it\n   wants to be notified by the WTP.\n      Element\
    \ ID : 34\n      Length : 4 octets\n      Value : The value is defined as follows:\n\
    \      *  Radar Detection - 1 octet\n         +  Bit 0 : 1 = notify on detecting\
    \ radar interference, 0\n            otherwise.\n         +  Bit 1 : 1 = notify\
    \ of channel change due to radar\n            interference, 0 otherwise.\n   \
    \      +  All other bits are reserved.\n      *  Excessive Retry Event - 1 octet.\
    \  Number of successive frames\n         that have not been acknowledged by a\
    \ client.  A value of 0\n         disables notification.\n      *  Noise Floor\
    \ Threshold - 1 octet.  Defines the threshold above\n         which an event would\
    \ be generated by the WTP.\n      *  802.11 Management and Action Frame Notification\
    \ - 1 octet.\n         +  Bit 0 : If set, notify the AC of Probe Requests from\n\
    \            stations (please use with caution).  If reset, then no Probe\n  \
    \          Response notification is needed.\n         +  Bit 1 : If set, the WTP\
    \ should notify the AC of all other\n            management frames from stations.\n\
    \         +  All other bits are reserved.\n"
- title: 6.1.3.1.36.  Radar Detection Event
  contents:
  - "6.1.3.1.36.  Radar Detection Event\n   This element is used by the WTP to notify\
    \ the AC of the detection of\n   radar interference and any channel changes as\
    \ a result of this\n   detection.\n      Element ID : 35\n      Length : 10 octets\n\
    \      Value : Defined as follows:\n         BSSID : 6 octets.  The BSSID of the\
    \ WLAN interface that\n         detected the radar interference.\n         Channel\
    \ : 2 octets.  The channel on which radar interference\n         was detected.\n\
    \         New Channel : 2 octets.  The new channel to which the WTP moved\n  \
    \       as a result of the detection of radar interference.\n"
- title: 6.1.3.1.37.  Excessive Retry Event
  contents:
  - "6.1.3.1.37.  Excessive Retry Event\n   This element is used by the WTP to indicate\
    \ excessive retry events on\n   transmission to an associated station.\n     \
    \ Element ID : 36\n      Length : 14 octets\n      Value : Defined as follows:\n\
    \         Station MAC : 6 octets\n         Associated BSSID : 6 octets\n     \
    \    Length of last burst of excessive retries : 2 octets.\n"
- title: 6.1.3.1.38.  Noise Floor Event
  contents:
  - "6.1.3.1.38.  Noise Floor Event\n   This element is used by the WTP to notify\
    \ the AC of the current noise\n   floor at one of the WLAN interfaces exceeding\
    \ the configured noise\n   floor threshold.\n      Element ID : 37\n      Length\
    \ : 10 octets\n      Value : Defined as follows:\n         BSSID : 6 octets\n\
    \         Current Channel : 2 octets\n         Current Noise Floor : 2 octets\n"
- title: 6.1.3.1.39.  Raw 802.11 Frame
  contents:
  - "6.1.3.1.39.  Raw 802.11 Frame\n   This element provides a generic capability\
    \ for either a WTP or an AC\n   to send a raw 802.11 frame to the other party.\
    \  For example, it can\n   be used to notify the AC of station association/disassociation\
    \ events\n   in the case of Local MAC architectures.\n      Element ID : 252\n\
    \      Length : Variable\n      Value : A raw 802.11 frame\n"
- title: 6.1.3.1.40.  Vendor-Specific Element
  contents:
  - "6.1.3.1.40.  Vendor-Specific Element\n   This element is used to transfer vendor-specific\
    \ information between\n   the WTP and the AC.\n      Element ID : 253\n      Length\
    \ : Variable, > 3\n      Value : This variable-length element starts with a 3-octet\n\
    \      Organizationally Unique Identifier (OUI), followed by a series of\n   \
    \   octets that are specific to the vendor represented by the OUI.\n"
- title: 6.1.3.1.41.  Recursion Element
  contents:
  - "6.1.3.1.41.  Recursion Element\n   This element type can be used to recursively\
    \ define a variable-length\n   element that should be interpreted as a series\
    \ of other elements\n   defined in this section.  It can be used to bound a set\
    \ of elements\n   as a unit.\n      Element ID : 254\n      Length : Variable\n\
    \      Value : A variable length element that contains a set of one or\n     \
    \ more elements defined in this section.\n"
- title: 6.1.3.1.42.  Pad Element
  contents:
  - "6.1.3.1.42.  Pad Element\n   This is a generic element type that can be used\
    \ to pad the packets,\n   if necessary.\n      Element ID : 255\n      Length\
    \ : Variable\n      Value : A variable-length element that MUST be filled with\
    \ all 0s\n      at the source and MUST be ignored at the destination.\n"
- title: 6.1.3.2.  SLAPP 802.11 Control Protocol Messages
  contents:
  - '6.1.3.2.  SLAPP 802.11 Control Protocol Messages

    '
- title: 6.1.3.2.1.  Registration Request
  contents:
  - "6.1.3.2.1.  Registration Request\n   At the start of the SLAPP 802.11 Control\
    \ Protocol, the WTP sends a\n   registration request to the AC that it authenticated\
    \ with.  The\n   registration request carries a list of information elements\n\
    \   indicating the WTP's capabilities to the AC.  The message starts with\n  \
    \ the SLAPP 802.11 Control Protocol header (Figure 8) with a SLAPP\n   Control\
    \ Protocol message type of 1.\n    0                   1                   2 \
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Maj  |  Min  |      4        |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               1               |            Flags              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Transaction ID                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ~                    Information Elements                       ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 9: SLAPP 802.11 Registration Request\n      Flags : Reserved\n\
    \      Transaction ID : A 32-bit random number chosen by the WTP at the\n    \
    \  start of a new registration phase.  This number is used in the\n      registration\
    \ response by the AC to match the response to the\n      corresponding request.\n\
    \   The following information elements are mandatory in the capabilities\n   exchange:\n\
    \      1 : CAPWAP mode\n      2 : Number of WLAN interfaces\n      For each WLAN\
    \ interface:\n         7 : 802.11 PHY mode and Channel Information\n         8\
    \ : Cryptographic Capability\n         9 : Other 802.11 standards support\n  \
    \ The following information elements may be optionally included in the\n   registration\
    \ request:\n      For each WLAN interface:\n         4 : WLAN Interface HW Vendor\
    \ ID\n         5 : WLAN Interface Type ID\n         6 : Regulatory Domain\n  \
    \       10 : Antenna Information Element\n         11 : Number of BSSIDs\n   \
    \      253 : Vendor-Specific Element\n"
- title: 6.1.3.2.2.  Registration Response
  contents:
  - "6.1.3.2.2.  Registration Response\n   Upon receiving a registration request,\
    \ the AC may either chose to\n   accept the WTP or reject its registration request.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Maj  |  Min  |      4        |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               2               |            Flags              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Transaction ID                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ~                    Information Elements                       ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \               Figure 10: SLAPP 802.11 Registration Response\n      Flags :\n\
    \         Bit 0 : Indicates the status of the transaction, 0 = successful\n  \
    \       response from the AC, 1 = the registration request is being\n        \
    \ rejected by the AC.\n         Bits 1-7 : Reserved\n         Bits 8-15 : If bit\
    \ 0 = 1 (i.e., the registration request is\n         being rejected by the AC),\
    \ then this field contains a reason\n         code.  Otherwise, these bits are\
    \ currently set to 0.  The\n         following reason codes are currently defined:\n\
    \            0 : Reserved\n            1 : Unspecified reason\n            2 :\
    \ Unable to handle more WTPs\n            3 : Incompatible capabilities\n    \
    \        4-255 : Reserved\n      Transaction ID : A 32-bit random number chosen\
    \ by the WTP at the\n      start of a new registration phase.  This number is\
    \ used in the\n      registration response by the AC to match the response to\
    \ the\n      corresponding request.\n   The following information elements are\
    \ mandatory if the transaction\n   is successful:\n      1 : CAPWAP mode - the\
    \ mode that the AC chooses from among the list\n      of supported modes sent\
    \ by the WTP in the registration request.\n      24 : SLAPP registration ID\n"
- title: 6.1.3.2.3.  De-Registration Request
  contents:
  - "6.1.3.2.3.  De-Registration Request\n    0                   1              \
    \     2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Maj  |  Min  |      4        |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               3               |            Flags              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    SLAPP Registration ID                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Reason Code                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \              Figure 11: SLAPP 802.11 De-Registration Request\n      Flags :\
    \ Reserved\n      SLAPP Registration ID : The registration ID assigned by the\
    \ AC\n      upon successful registration.\n      Reason Code : The following are\
    \ valid values:\n         0 : Unspecified reason\n         1 : The device that\
    \ is the source of the frame is going down.\n         All other values are reserved.\n"
- title: 6.1.3.2.4.  De-Registration Response
  contents:
  - "6.1.3.2.4.  De-Registration Response\n   The De-Registration Response is a simple\
    \ ACK from the recipient of\n   the corresponding De-Registration Request.\n \
    \   0                   1                   2                   3\n    0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Maj  |  Min  |      4        |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               4               |            Flags              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    SLAPP Registration ID                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Reason Code                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \             Figure 12: SLAPP 802.11 De-Registration Response\n      Flags :\
    \ Reserved\n      SLAPP Registration ID : The registration ID assigned by the\
    \ AC\n      upon successful registration.\n      Reason Code : The same reason\
    \ code used in the corresponding\n      request.\n"
- title: 6.1.3.2.5.  Configuration Request
  contents:
  - "6.1.3.2.5.  Configuration Request\n   The Configuration Request message is used\
    \ by the WTP to request a set\n   of configurations for each BSS that the AC wishes\
    \ to configure at the\n   WTP.\n    0                   1                   2\
    \                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Maj  |  Min  |      4        |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               5               |            Flags              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    SLAPP Registration ID                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ~                 Information Element ID list                   ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \               Figure 13: SLAPP 802.11 Configuration Request\n   The Information\
    \ Element ID list field contains the list of IEs that\n   the WTP is interested\
    \ in obtaining configuration information for.\n"
- title: 6.1.3.2.6.  Configuration Response
  contents:
  - "6.1.3.2.6.  Configuration Response\n   The Configuration Response message is\
    \ used by the AC to respond to a\n   Configuration Request by the WTP.\n    0\
    \                   1                   2                   3\n    0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Maj  |  Min  |      4        |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               6               |            Flags              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    SLAPP Registration ID                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ~                 Information Element list                      ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \              Figure 14: SLAPP 802.11 Configuration Response\n   The following\
    \ information elements are mandatory in the Configuration\n   Response:\n    \
    \  01: CAPWAP mode\n      For each WLAN interface:\n         03: WLAN Interface\
    \ Index\n         27: Radio Mode\n         07: 802.11 PHY mode and Channel Selection\n\
    \         For each BSSID:\n            12: BSSID Index\n            13: ESSID\n\
    \            08: Cryptographic Selection\n   The following information elements\
    \ may be optionally included in the\n   Configuration Response:\n      10: Antenna\
    \ Information Element\n      25: WTP Name\n      For each WLAN interface:\n  \
    \       For each BSSID:\n            14: ESSID Announcement Policy\n         \
    \   15: Beacon Interval\n            16: DTIM Period\n            17: Basic Rates\n\
    \            18: Supported Rates\n            19: Retry Count\n            20:\
    \ Fragmentation Threshold\n            21: RTS Threshold\n            22: Short/Long\
    \ Preamble\n            23: 802.1Q Tag\n            253: Vendor-Specific Element\n\
    \   If any of the optional IEs is absent in the Configuration Response\n   message,\
    \ then their default values are applied by the WTP.\n"
- title: 6.1.3.2.7.  Configuration Update
  contents:
  - "6.1.3.2.7.  Configuration Update\n   The Configuration Update message is initiated\
    \ by the AC to push\n   modified or updated configuration to the WTP.  It has\
    \ a format\n   similar to that of the Configuration Response message defined above.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Maj  |  Min  |      4        |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               7               |            Flags              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    SLAPP Registration ID                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ~                 Information Element list                      ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \               Figure 15: SLAPP 802.11 Configuration Update\n   The list of mandatory\
    \ and optional IEs for the Configuration Update\n   message is the same as that\
    \ for the Configuration Response message.\n"
- title: 6.1.3.2.8.  Configuration Acknowledgment
  contents:
  - "6.1.3.2.8.  Configuration Acknowledgment\n   The Configuration Acknowledgment\
    \ message is used by the WTP to inform\n   the AC whether it has accepted the\
    \ prior Configuration Update or\n   Configuration Response message.  The WTP can\
    \ reject the configuration\n   sent by the AC, in which case it MUST return to\
    \ the discovery state.\n    0                   1                   2        \
    \           3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Maj  |  Min  |      4        |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               8               |            Flags              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    SLAPP Registration ID                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Status Code                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                 Figure 16: SLAPP 802.11 Configuration ACK\n   The Status Code\
    \ field contains one of the following values:\n      0 : Success - The WTP accepts\
    \ that the configuration pushed by the\n      AC and has applied it.\n      1\
    \ : Failure - The WTP did not accept the configuration pushed by\n      the AC\
    \ and MUST be de-registered at the AC.\n"
- title: 6.1.3.2.9.  Status Request
  contents:
  - "6.1.3.2.9.  Status Request\n   The status request message is used by the AC to\
    \ request the\n   configuration and operational status from the WTP.\n    0  \
    \                 1                   2                   3\n    0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Maj  |  Min  |      4        |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |               9               |            Flags              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    SLAPP Registration ID                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ~                  Information Element ID list                  ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 17: SLAPP 802.11 Status Request\n   The Information\
    \ Element ID list contains the list of IEs for which\n   the AC requests status.\n"
- title: 6.1.3.2.10.  Status Response
  contents:
  - "6.1.3.2.10.  Status Response\n   The status response message is used by the WTP\
    \ to respond to a status\n   request from the AC.\n    0                   1 \
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Maj  |  Min  |      4        |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              10               |            Flags              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    SLAPP Registration ID                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ~                   Information Element list                    ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 18: SLAPP 802.11 Status Response\n   The Flags field\
    \ contains one of the following values:\n      Bit 0 : If set, Unknown AC or SLAPP\
    \ registration ID.  If this bit\n      is reset, then this indicates a successful\
    \ response.\n      Bit 1 : If set, the WTP indicates that it has not been configured\n\
    \      yet; otherwise, the WTP is in a configured state.\n      All other values\
    \ are reserved.\n   The status IE is mandatory in a status response message.\n"
- title: 6.1.3.2.11.  Statistics Request
  contents:
  - "6.1.3.2.11.  Statistics Request\n   The Statistics request message is used by\
    \ the AC to request\n   statistics information from the WTP.\n    0          \
    \         1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Maj  |  Min  |      4        |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              11               |            Flags              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    SLAPP Registration ID                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ~                   Information Element list                    ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 19: SLAPP 802.11 Statistics Request\n   The Flags field\
    \ contains the following bits:\n      Bit 0 : If set to 1, then the WTP should\
    \ reset the counters after\n      sending the statistics response message.\n \
    \     All other bits are reserved and MUST be set to 0 by the source and\n   \
    \   ignored by the destination.\n"
- title: 6.1.3.2.12.  Statistics Response
  contents:
  - "6.1.3.2.12.  Statistics Response\n    0                   1                 \
    \  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Maj  |  Min  |      4        |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              12               |            Flags              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    SLAPP Registration ID                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ~                   Information Element list                    ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 20: SLAPP 802.11 Statistics Response\n   The Flags field\
    \ contains the following bits:\n      Bit 0 : If set, then the counters have been\
    \ reset as requested by\n      the AC.\n      Bit 1 : If set, then the WTP has\
    \ encountered a statistics request\n      from either an unknown AC or with an\
    \ unknown SLAPP registration\n      ID.\n      Bit 2 : If set, WTP indicates that\
    \ it has not been configured yet;\n      otherwise, the WTP is in a configured\
    \ state.\n      All other bits are reserved.\n"
- title: 6.1.3.2.13.  Keepalive
  contents:
  - "6.1.3.2.13.  Keepalive\n   The keepalive messages can be initiated by either\
    \ the WTP or the AC.\n   It is used to probe the availability of the other party\
    \ and the path\n   between them.  The initial message is termed the keepalive\
    \ request,\n   while the response to that message is termed the keepalive response.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Maj  |  Min  |      4        |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              13               |            Flags              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    SLAPP Registration ID                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     Figure 21: SLAPP Keepalive Packet\n   The Flags field has\
    \ the following values:\n      Bit 0 : Set to 0 in a keepalive request message,\
    \ set to 1 in a\n      keepalive response message.\n      Bit 1 : Set to 0 in\
    \ a keepalive request message, set to 1 in a\n      keepalive response message\
    \ if the initiator of the keepalive\n      request is unknown or the SLAPP registration\
    \ ID is incorrect, and\n      set to 0 otherwise.\n      All other bits are reserved\
    \ and must be set to 0 by the source and\n      ignored at the destination.\n"
- title: 6.1.3.2.14.  Key Configuration
  contents:
  - "6.1.3.2.14.  Key Configuration\n   In CAPWAP mode 5, the 802.11 crypto functions\
    \ are performed at the\n   AC.  So there is no need for the AC to send PTKs/GTKs\
    \ to the WTP.\n   When one of the CAPWAP Modes 1-4 has been negotiated between\
    \ the AC\n   and WTP, it is necessary for the AC to send both unicast and\n  \
    \ broadcast/multicast keys to the WTP.  This is accomplished after the\n   802.1x\
    \ authenticator (which resides on the AC) has successfully\n   authenticated the\
    \ supplicant.  Key Configuration Requests are\n   differentiated -- unicast or\
    \ broadcast -- by setting or clearing the\n   high-order bit of the \"Flags\"\
    \ field.  The setting of this bit\n   determines the contents of the Key Configuration\
    \ Request following\n   the SLAPP Registration ID.\n"
- title: 6.1.3.2.14.1.  Unicast Key Configuration Request
  contents:
  - "6.1.3.2.14.1.  Unicast Key Configuration Request\n   The Unicast Key Configuration\
    \ Request is used by the AC to inform the\n   WTP of the key to use when protecting\
    \ unicast frames to and from a\n   specified supplicant.\n    0              \
    \     1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Maj  |  Min  |      4        |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              15               |0|          Flags              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    SLAPP Registration ID                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     supplicant MAC address                    ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | supplicant mac address (cont) |  Supp 802.1Q tag      | RSVD  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     unicast key length        |         unicast key           ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \               Figure 22: Unicast Key Configuration Request\n   Note the high-order\
    \ bit of the \"Flags\" field is cleared to indicate a\n   unicast key is being\
    \ sent.  The 802.1Q tag field is used to indicate\n   to the WTP which VLAN this\
    \ supplicant is in and which broadcast/\n   multicast key to use when communicating\
    \ to it with broadcast/\n   multicast frames.\n"
- title: 6.1.3.2.14.2.  Broadcast/Multicast Key Configuration Request
  contents:
  - "6.1.3.2.14.2.  Broadcast/Multicast Key Configuration Request\n    0         \
    \          1                   2                   3\n    0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Maj  |  Min  |      4        |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              15               |1|          Flags              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    SLAPP Registration ID                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    801.1q tag         | RSVD  | broadcast/multicast key length|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ~                  broadcast/multicast key                      ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 23: Group Key Configuration Request\n   Note the high-order\
    \ bit of the \"Flags\" field is set, indicating a\n   broadcast/multicast key\
    \ is being sent.  The bits marked \"RSVD\" are\n   reserved and MUST be set to\
    \ zero by the AC and ignored by the WTP.\n"
- title: 6.1.3.2.14.3.  Unicast Key Configuration Response
  contents:
  - "6.1.3.2.14.3.  Unicast Key Configuration Response\n   The WTP acknowledges receipt\
    \ of a Unicast Key Configuration Request\n   by sending a Unicast Key Configuration\
    \ Response.  This response\n   mirrors the request but does not send back the\
    \ key length or the key\n   itself.  (The RSVD bits are returned for alignment\
    \ purposes and MUST\n   be set to zero by the WTP and ignored by the AC.)\n  \
    \  0                   1                   2                   3\n    0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Maj  |  Min  |      4        |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              16               |0|          Flags              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    SLAPP Registration ID                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     supplicant MAC address                    ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | supplicant mac address (cont) |  Supp 802.1Q tag      | RSVD  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \               Figure 24: Unicast Key Configuration Response\n"
- title: 6.1.3.2.14.4.  Multicast Key Configuration Response
  contents:
  - "6.1.3.2.14.4.  Multicast Key Configuration Response\n   The WTP acknowledges\
    \ receipt of a Multicast Key Configuration Request\n   by sending a Multicast\
    \ Key Configuration Response.  This response\n   mirrors the request, but it does\
    \ not send back the key length or the\n   key itself.  (The RSVD bits are returned\
    \ for alignment purposes and\n   MUST be set to zero by the WTP and ignored by\
    \ the AC.)\n    0                   1                   2                   3\n\
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Maj  |  Min  |      4        |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |              16               |0|          Flags              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    SLAPP Registration ID                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    801.1q tag         | RSVD  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 25: Group Key Configuration Response\n"
- title: 6.1.3.3.  Monitoring and Statistics
  contents:
  - "6.1.3.3.  Monitoring and Statistics\n   An AC may want to periodically monitor\
    \ the health of a WTP, collect\n   the necessary information for diagnostics,\
    \ and get notifications on\n   pre-defined events at the WTP that may be of interest.\
    \  This section\n   defines a set of WTP statistics and events and describes the\
    \ process\n   of collecting statistics from WTPs and configuring the event\n \
    \  notification mechanism at the WTP.  It is beyond the scope of this\n   document\
    \ to describe what should/could be done with the collected\n   information.\n"
- title: 6.1.3.3.1.  Statistics Collection Procedure
  contents:
  - "6.1.3.3.1.  Statistics Collection Procedure\n   The simple statistics collection\
    \ procedure defined here does not\n   require the WTP to maintain any timers or\
    \ any similar mechanisms.  A\n   WTP is responsible only for maintaining the statistics\
    \ defined in\n   Information Elements 29, 30, 31, and 32.  The WTP must also respond\n\
    \   to a statistics request message from the AC by delivering the\n   appropriate\
    \ statistics to the AC using a statistics response message.\n   For example, if\
    \ an AC is interested in gathering periodic statistics\n   about some specific\
    \ statistics, it is the responsibility of the AC to\n   poll the WTP at the appropriate\
    \ intervals.\n"
- title: 6.1.3.3.2.  Events Procedure
  contents:
  - "6.1.3.3.2.  Events Procedure\n   The event notification process includes the\
    \ following: 1) Event\n   Registration: the registration of events of interest\
    \ at the WTP by\n   the AC and 2) Notification: The communication of event-related\n\
    \   information by the WTP to the AC whenever the conditions for a\n   specific\
    \ registered event has occurred.  The set of events supported\n   by a WTP and\
    \ the event-specific parameters that may be configured as\n   part of a event\
    \ registration are given in Section 6.1.3.3.3.\n"
- title: 6.1.3.3.3.  WTP Events
  contents:
  - "6.1.3.3.3.  WTP Events\n   This section defines a set of WTP events along with\
    \ the event-\n   specific parameters that may be configured by ACs and the event-\n\
    \   related information that should be delivered to the ACs by WTPs when\n   the\
    \ conditions for a particular configured event have occurred.\n      Radar Detection\
    \ Event: Configure whether the AC is interested in\n      receiving a notification\
    \ whenever a radar event is detected.  The\n      WTP may notify the AC about\
    \ the type of radar interference and the\n      new channel that the WTP has moved\
    \ to as a result, if any, using\n      the Radar Detection Event Element (element\
    \ ID: 35).\n      Excessive Retry Event: Configure the number of consecutive\n\
    \      transmission failures before a notification is generated.  The WTP\n  \
    \    may notify the MAC address of the station (STA) and the number of\n     \
    \ consecutive unacknowledged frames so far using the Excessive Retry\n      Event\
    \ Element (element ID : 36).\n      Noise Floor Event: Configure the noise floor\
    \ threshold above which\n      an event notification would be generated by the\
    \ WTP.  The WTP may\n      notify the AC with the most recent measured noise floor\
    \ that\n      exceeded the configured threshold using the Noise Floor Event\n\
    \      Element (element ID : 37).\n      De-Authentication Event: Configure whether\
    \ the AC is interested in\n      receiving a notification whenever a station has\
    \ been de-\n      authenticated by the WTP.  The WTP may notify the AC with the\
    \ MAC\n      address of the STA along with a reason code (inactivity, etc.).\n\
    \      Association Event: Needed in Local MAC architecture.\n      Disassociation\
    \ Event: Needed in Local MAC architecture.\n"
- title: 6.1.4.  Protocol Operation
  contents:
  - "6.1.4.  Protocol Operation\n   The SLAPP 802.11 Control Protocol operation is\
    \ described in this\n   section.\n"
- title: 6.1.4.1.  SLAPP 802.11 Control Protocol State Machine
  contents:
  - '6.1.4.1.  SLAPP 802.11 Control Protocol State Machine

    '
- title: 6.1.4.1.1.  At the WTP
  contents:
  - "6.1.4.1.1.  At the WTP\n       +-------------+\n       | discovering |<-------------------------------+<----+\n\
    \       +-------------+                                |     |\n         ^  ^\
    \                                         |     |\n         |  |          +-----------+\
    \                  |     |\n         |  |          | securing  |             \
    \     |     |\n         |  |          +----+------+                  |     |\n\
    \         |  |               |                         |     |\n         |  |\
    \               v                         |     |\n         |  |        +--------------+\
    \                 |     |\n         |  |   +--->| Unregistered |             \
    \    |     |\n         |  |   |    +------+-------+                 |     |\n\
    \         |  |   |           |                         |     |\n         |  |\
    \   |           |Registration             |     |\n         |  |   |Timeout  \
    \  |Request                  |     |\n         |  |   |           |          \
    \               |     |\n         |  |   |           v                       \
    \  |     |\n         |  |   |    +--------------+                 |     |\n  \
    \       |  |   +----+ Registration |                 |     |\n         |  |  \
    \      |              |                 |     |\n         |  | Reject |      \
    \        |                 |     |\n         |  +--------+   Pending    |    \
    \             |     |\n         | nTimeout>3|              |                 |\
    \     |\n         |           |              |                 |     |\n     \
    \    |           +------+-------+                 |     |\n         |        \
    \          |                         |     |\n         |                  |Accept\
    \                   |     |\n         |                  |                   \
    \      |     |\n         |                  |                         |     |\n\
    \         |                  v                         |     |\n         |   \
    \        +------+-------+                 |     |\n         |           |  Registered\
    \  |                 |     |\n         |      +--->|              |          \
    \       |     |\n         |      |    +------+-------+                 |     |\n\
    \         |      |           |                         |     |\n         |   \
    \   |Timeout    |Config                   |     |\n         |      |         \
    \  |Request                  |     |\n         |      |           |          \
    \               |     |\n         |      |           v                       \
    \  |     |\n         |      |    +------+-------+                 |     |\n  \
    \       |      +----+              |           Reject|     |\n         |     \
    \      |Configuration |                 |     |\n         |   Reject  | Pending\
    \      |                 |     |\n         +-----------+              |      \
    \           |     |\n         ^ nTimeout>3+------+-------+                 | \
    \    |\n         |                  |                         |     |\n      \
    \   |                  |                         |     |\n   De-reg|         \
    \         |    +----------------+   |     |\n    resp |                  |   \
    \ v     Accept     |   |     |\n    +----+---+       +------+----+--+        \
    \   +-+---+--+  |\n    |        | De-reg|              |           | Update |\
    \  |\n    |  De    +<------+ Configured   +-----------+        |  |\n    |Register|\
    \ req   |              |           | Pending|  |\n    |        |       |     \
    \         |           +----+---+  |\n    +--------+       +------+-------+   \
    \                    |\n                            |                        \
    \       |\n                            |                               |\n   \
    \                         |                               |\n                \
    \        Too |Many                           |\n                        Keepalive\
    \                           |\n                        Failures              \
    \              |\n                            |                              \
    \ |\n                            |                               |\n         \
    \                   |   De-Register                 |\n                      \
    \      +-------------------------------+\n   In Configured and/or Registered states,\
    \ respond to\n   Status Requests, Statistics Requests, Keepalives, Key Config\n\
    \            Figure 26: SLAPP 802.11 Control Protocol at the WTP\n"
- title: 6.1.4.1.1.1.  State Machine Explanation
  contents:
  - "6.1.4.1.1.1.  State Machine Explanation\n   Unregistered: The transition into\
    \ this state is from the securing\n      state (Figure 3).  Send registration\
    \ request message to move to\n      Registration Pending state, set timer for\
    \ registration response.\n   Registration Pending: On a registration response\
    \ from the AC, cancel\n      registration timer.  If the response is successful,\
    \ move to\n      Registered state.  If not, move to discovering state (Figure\
    \ 3).\n      If timer expires, if nTimeout >3, then move to discovering state.\n\
    \      If not, return to Unregistered state.\n   Registered: Send Configuration\
    \ Request message to AC to move to\n      Configuration Pending state, and set\
    \ timer for Configuration\n      Response.  In this state, respond to status request,\
    \ statistics\n      request, and keepalive messages from the AC.\n   Configuration\
    \ Pending: If a Configuration Response is received from\n      the AC, cancel\
    \ the Configuration Response timer.  If the response\n      is successful and\
    \ the configuration is acceptable, then send the\n      Configuration ACK message\
    \ to AC, and move to Configured state.  If\n      the Configuration Request is\
    \ rejected or the configuration is not\n      acceptable, then send a de-register\
    \ request to the AC and move to\n      discovering.  If the Configuration Response\
    \ timer expires, move to\n      Registered state unless nTimeout >3, in which\
    \ case move to\n      discovering state.\n   Configured: In the Configured state,\
    \ the WTP responds to the status\n      request, statistics request, and keepalive\
    \ messages from the AC.\n      If it receives a de-register request message from\
    \ the AC, then it\n      sends a de-register response to the AC and moves to the\n\
    \      discovering state.  If the WTP receives a Configuration Update\n      message,\
    \ then it moves to the Update Pending state.  If it\n      receives too many consecutive\
    \ keepalive failures (no responses\n      from the AC to keepalive requests),\
    \ then it sends a de-register\n      message to the AC and moves to the discovering\
    \ state.\n   Update Pending: In the Update Pending state, the WTP analyzes the\n\
    \      configuration information received in the Configuration Update\n      message.\
    \  If the configuration is found to be acceptable, then it\n      applies the\
    \ configuration and returns to the Configured state.  If\n      the WTP chooses\
    \ to reject the configuration update, then it sends\n      a de-register request\
    \ to the AC and moves to the discovering\n      state.\n   De-register: From the\
    \ Configured state, the WTP moves to the\n      De-register state when it receives\
    \ a de-register request message\n      from the AC.  It sends a de-register response\
    \ to the AC and moves\n      to the discovering state.\n"
- title: 6.1.4.1.2.  At the AC
  contents:
  - "6.1.4.1.2.  At the AC\n            +----------+\n            | securing |\n \
    \           +----+-----+\n                 |\n                 |\n           \
    \      |\n                 v\n            +--------------+\n   +--------| Unregistered\
    \ |\n   |        +----+---------+\n   |             |\n   |Timeout      |Register\n\
    \   |             |request\n   |             v                   +-------------+\n\
    \   |         +----------+   Accept   | Registration|\n   |     +---+Register\
    \  +----------->|  Pending    |\n   |     |   |Processing|            +-+-----+-----+\n\
    \   |     |   +----------+              |     |\n   |     |                  \
    \           |     |\n   |     |Reject                    Timeout  |\n   |    \
    \ |                             |     |Config\n   |     |                    \
    \         |     |Request\n   |     |      +--------------+       |     |\n   |\
    \     +----->|              |<------+     |\n   |            |  discovering |\
    \             v\n   +----------->|              |        +------------+\n    \
    \            +--------------+        | Registered |\n                    ^   \
    \  ^  ^          +----+-------+\n                    |     |  |              \
    \ |\n                    |     |  |               |Config\n                  \
    \  |     |  |               |Response\n                    |     |  |        \
    \       v\n                    |     |  | Timeout  +------------+\n          \
    \          |     |  +----------| Config     |\n                    |     |   or\
    \ Reject | Pending    |\n                    |     |             +----+-------+\n\
    \                    |     |                  |\n                    |     | \
    \                 |Config ACK\n                    |     |                  v\n\
    \                    |     |De-Register  +------------+\n                    |\
    \     +-------------|            |\n                    |     or Keepalive  |\
    \ Configured |<--+\n                    |        failures   |            |   |\n\
    \                    |                   +----+-------+   |\n              Reject|\
    \                        |           |\n                  or|                \
    \        |           |\n              Timeout     +-----------+      |Config \
    \    |\n                    |     | Update    |      |Update     |\n         \
    \           +-----| Pending   |<-----+           |\n                         \
    \ +----+------+                  |\n                               |         \
    \  Accept        |\n                               +-------------------------+\n\
    \            Figure 27: SLAPP 802.11 Control Protocol at the AC\n"
- title: 6.1.4.1.2.1.  State Machine Explanation
  contents:
  - "6.1.4.1.2.1.  State Machine Explanation\n   The states \"securing\" and \"discovering\"\
    \ are described in Figure 3.\n   Unregistered: This state is entered from the\
    \ securing state described\n      in Figure 3.  In this state, the AC is waiting\
    \ for a registration\n      request message from the WTP.  Upon receiving the\
    \ registration\n      request message, it moves into the Registration Processing\
    \ state.\n   Registration Processing: In this state, the AC must determine whether\n\
    \      or not it can accept the new WTP.  If the AC decides to accept the\n  \
    \    WTP, it must pick a CAPWAP mode to operate in and send a\n      registration\
    \ response message with a success code and moves to the\n      Registration Pending\
    \ state.  If the AC chooses to reject the\n      current registration request\
    \ from the WTP, it must send a\n      registration response with a failure code\
    \ and move to the\n      discovering state.\n   Registration Pending: If the timer\
    \ expires before a response from the\n      WTP is received, then the AC destroys\
    \ the registration state and\n      moves to the discovering state.  If a Configuration\
    \ Request\n      message is received from the WTP, then the AC moves into the\n\
    \      Registered state and processes the Configuration Request message.\n   \
    \   It sends a Configuration Response message to the WTP with the\n      appropriate\
    \ IEs and moves into the Configuration Pending state.\n   Configuration Pending:\
    \ If the timer expires before a response is\n      received from the WTP, then\
    \ the AC destroys the current\n      registration and moves into the discovering\
    \ state.  If a\n      Configuration ACK is received from the WTP, but contains\
    \ a failure\n      code, then the AC again destroys the registration state and\
    \ moves\n      into the discovering state.  If the Configuration ACK from the\
    \ WTP\n      is successful, then the AC moves to the Configured state.\n   Configured:\
    \ In the Configured state, the AC can send a status\n      request, statistics\
    \ request, keepalive, and Key Configuration\n      messages to the WTP.  Any response\
    \ to these messages from the WTP\n      that indicates an unknown SLAPP registration\
    \ ID or an unknown AC\n      causes the AC to destroy any registration or configuration\
    \ state\n      and move to the discovering state.  From the configured state,\
    \ the\n      AC can send a Configuration Update message and move into the\n  \
    \    Update Pending state.  If it receives a de-register request from\n      the\
    \ WTP, then it destroys all current registration and\n      configuration state\
    \ and moves into the discovering state.  If a\n      number of successive keepalive\
    \ messages go unacknowledged by the\n      WTP, then the AC moves into the discovering\
    \ state.\n   Update Pending: When the AC receives a Configuration ACK message\
    \ with\n      a success code, then it returns to the Configured state.  If the\n\
    \      status code is a failure or if the timer expires before the\n      Configuration\
    \ ACK is received from the WTP, the AC destroys all\n      registration and configuration\
    \ state for the WTP and moves into\n      the discovering state.\n"
- title: 6.2.  Image Download Protocol
  contents:
  - "6.2.  Image Download Protocol\n   The Image Download protocol is a control protocol\
    \ defined in this\n   document that is generic enough to be agnostic to the underlying\n\
    \   technology.\n   In the Image Download protocol, the WTP obtains a bootable\
    \ image from\n   the AC by receiving a series of image transfer packets.  Missed\
    \ image\n   data packets are re-requested by the WTP by sending image data\n \
    \  request packets indicating the missing packets.\n   The image to download is\
    \ divided into slices of equal size (except\n   for the last slice, which can\
    \ be less than the slice size provided,\n   it is also greater than zero).  The\
    \ size of each slice depends on the\n   MTU determined by the DTLS exchange and\
    \ SHOULD be the realized MTU\n   minus the size of an Image Download Request (Figure\
    \ 29).\n   Note that the Image Download packet and Image Download Request is\n\
    \   encapsulated in a DTLS header that secures the image download.\n"
- title: 6.2.1  Image Download Packet
  contents:
  - "6.2.1  Image Download Packet\n   The format of an Image Download packet is shown\
    \ in Figure 28.\n    0                   1                   2               \
    \    3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  Maj\
    \  |  Min  |    Type = 3   |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  RESERVED |M|R|            packet sequence number             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   ~                     image data slice                          ~\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 28: SLAPP Image Download Packet\n   where:\n   length:\
    \ variable\n   RESERVED: Unused in this version of SLAPP, MUST be zero (0) on\n\
    \      transmission and ignored upon receipt.\n   M: The \"More\" bit indicating\
    \ that the current packet is not the final\n      one.\n   R: The \"Request\"\
    \ bit.  This bit MUST be set to one (1) when the\n      packet is the response\
    \ to a request and zero (0) otherwise.\n   packet sequence number: A monotonically\
    \ increasing counter that\n      assigns a unique number to each slice of the\
    \ image.\n   image data slice: A portion of the bootable image.\n"
- title: 6.2.2.  Image Download Request
  contents:
  - "6.2.2.  Image Download Request\n   The format of an Image Download Request is\
    \ shown in Figure 29.\n    0                   1                   2         \
    \          3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  Maj  |  Min  |    Type = 3   |           Length              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  RESERVED |M|R|            packet sequence number             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \              Figure 29: SLAPP Image Download Request Packet\n   where:\n   length:\
    \ eight (8) octets\n   RESERVED: Unused in this version of SLAPP, MUST be zero\
    \ on\n      transmission and ignored upon receipt.\n   M: The \"More\" bit.  This\
    \ MUST be equal to the one (1) when negatively\n      acknowledging a missed packet\
    \ and set to zero (0) when indicating\n      the end of the Image Download protocol.\n\
    \   R: the \"Request\" bit.  This MUST be one in an Image Download Request.\n\
    \   packet sequence number: The packet sequence number of the missing\n      image\
    \ data slice.\n"
- title: 6.2.3.  Image Download Process
  contents:
  - "6.2.3.  Image Download Process\n   The AC will divide the bootable image into\
    \ a series of slices and\n   send each slice as an Image Download packet.  The\
    \ size of each image\n   data slice (and therefore the size of each Image Download\
    \ packet)\n   depends on the MTU of the connection determined during the DTLS\n\
    \   handshake.  With the transmission of each slice, the AC MUST\n   increment\
    \ the packet sequence number.\n   Image Download packets are negatively ACK'd.\
    \  An AC MUST NOT assume\n   anything about the reception of packets; it sends\
    \ based upon negative\n   ACKs.  One could naively assume that since the packets\
    \ are sent\n   sequentially, that all packets with a sequence number of \"n -\
    \ 1\" are\n   implicitly ack'd by the receipt of a request for the packet with\n\
    \   sequence number \"n\" to be retransmitted.  Such an assumption would be\n\
    \   incorrect since previous requests could, themselves, have been\n   dropped.\n\
    \   The Image Download process is initiated by the WTP requesting a\n   packet\
    \ with the packet sequence number of zero (0).  The AC sets the\n   packet sequence\
    \ counter for this WTP to one (1) and sends the first\n   slice.  The \"Request\"\
    \ bit for the first slice sent by the AC MUST be\n   set to zero (0) since the\
    \ first slice was technically not requested.\n   The WTP sets a periodic timer\
    \ that, when it fires, causes the WTP to\n   send Image Download Requests for\
    \ slices that have been missed since\n   the last periodic timer had fired.  Since\
    \ individual Image Download\n   packets are not ack'd, the AC MUST NOT set a timer\
    \ when each one is\n   sent.\n   If a WTP notices missed image transfer packets\
    \ -- when the difference\n   between the packet sequence number of a received\
    \ image transfer\n   packet and the packet sequence number of the last image transfer\n\
    \   packet previously received is greater than one -- it will note that\n   fact\
    \ in a bitmask.  When the periodic timer fires, the WTP will\n   request the slices\
    \ that are absent from that bitmask.  Each slice\n   will be requested by sending\
    \ a Download Request with a length of\n   eight (8) and indicating the sequence\
    \ number of the packet requested.\n   The AC MUST interleave these retransmissions\
    \ with packets in the\n   sequence.\n   Since both sides implicitly agree upon\
    \ the MTU of the link, the WTP\n   will know the slice size that the AC will use\
    \ during the Image\n   Download process.  A dropped packet will therefore result\
    \ in an\n   internal buffer pointer on the WTP being incremented by the slice\n\
    \   size and the lost packet requested.  When the lost packet is\n   received,\
    \ it can be inserted into the buffer in the space provided by\n   the pointer\
    \ increment when its loss was first detected.  That is,\n   loss of packet <n>\
    \ will result in packet <n> being re-requested and\n   when received inserted\
    \ into the buffer at an offset of <n-1> *\n   <slicesize> from the start of the\
    \ buffer.\n   The final packet sent by the AC will not have the \"more\" bit set,\
    \ and\n   this indicates to the WTP that the end of the image has been\n   received.\
    \  This final packet is acknowledged by the WTP indicating\n   the end of the\
    \ Image Download process.\n   A lost final packet will result in the AC resending\
    \ the final packet\n   again (see Section 4.4).\n"
- title: 6.2.4.  Image Download State Machine
  contents:
  - "6.2.4.  Image Download State Machine\n   The Image Download protocol is a Negotiated\
    \ Control Protocol defined\n   for SLAPP.  Transitions to it come from the \"\
    secure\" state and\n   transitions out of it go to the \"acquire\" state.  See\
    \ Figure 3.\n"
- title: 6.2.4.1.  AC
  contents:
  - "6.2.4.1.  AC\n   The AC's state machine for the Image Download protocol is shown\
    \ in\n   Figure 30.  The AC maintains the following variables for its state\n\
    \   machine:\n   seq_num: The current slice that is being sent.\n   nslices: The\
    \ total number of slices in the image.\n   req_num: The number of the slice that\
    \ was requested.\n   more: Whether the \"More bit\" in the packet should be set.\n\
    \   starved: A timer that sets the maximum amount of time in which an AC\n   \
    \   will attempt to download an image.\n   Note: The symbol \"C\" indicates an\
    \ event in a state that results in\n   the state remaining the same.\n       \
    \                       |\n                              v\n                 \
    \        +----------+\n                         |  waiting |\n               \
    \          +----------+\n                              |\n                   \
    \           |   seq_num = 1, more = 1,\n                              |   nslices\
    \ = x, starved = t\n                M bit         v\n   +----------+  is 0  +-------------+\n\
    \   | finished |<-------|  received   |<------\\\n   +----------+        |   \
    \          |<----\\ |\n                       +-------------+     | |\n    req_num\
    \ = requested       |            | |\n                 packet       | M bit is\
    \ 1 | |\n                              V            | |\n                    \
    \     +----------+      | |\n             seq_num++, C|  sending |------/ |\n\
    \             req_num=0   +----------+        |\n                            \
    \  |              |\n                           |  |              |\n       +-------------+\
    \     |  |              |\n       | discovering |<----/  |              |\n  \
    \     |             |<----\\  |              |\n       +-------------+     | \
    \ |              |\n                           |  v              v\n         \
    \                 +--------+         |\n                          | idle   |---------/\n\
    \                          +--------+\n     Figure 30: SLAPP Image Download Protocol\
    \ State Machine at the AC\n   The following states are defined:\n   Waiting: When\
    \ the AC leaves the SLAPP state of \"Secure\", it enters\n      the \"Waiting\"\
    \ state of the Image Download protocol.  seq_num is\n      set to one (1), more\
    \ is set to one (1), nslices is set to the\n      number of slices in the particular\
    \ image to download, and starved\n      is set to the maximum amount of time the\
    \ AC will devote to\n      downloading a particular image.\n   Received: The AC\
    \ enters this state when it has received an Image\n      Download Request.  If\
    \ the sequence number of the packet is zero\n      (0), it sets seq_num to one\
    \ (1) and transitions to Sending; else,\n      if the M bit is set, it sets req_num\
    \ to the sequence number of the\n      request and transitions to Sending; else,\
    \ (if the M bit is clear)\n      it transitions to Finished.\n   Sending: The\
    \ AC is sending a slice to the WTP.  If req_num is equal\n      to zero (0), it\
    \ sends the slice indicated by seq_num and\n      increments seq_num.  If req_num\
    \ is greater than zero (0), it sends\n      the slice indicated by req_num and\
    \ sets req_num to zero (0).  The\n      \"More\" bit in either case is set depending\
    \ on the value of more.\n      As long as no request packets are received Sending\
    \ transitions to\n      Sending.  When seq_num equals nslices \"More\" is set\
    \ to zero (0)\n      and the state transitions to Idle.  If the starved timer\
    \ expires,\n      the AC transitions to the SLAPP state of Discovering.\n   Idle:\
    \ The AC has sent all the slices in the image and is just waiting\n      for requests.\
    \  If the starved timer expires the AC transitions to\n      the SLAPP state of\
    \ Discovering.\n   Finished: The Image Download protocol has terminated.  The\
    \ starved\n      timer is canceled.\n"
- title: 6.2.4.2.  WTP
  contents:
  - "6.2.4.2.  WTP\n   The WTP's state machine for the Image Download protocol is\
    \ shown in\n   Figure 31.  The WTP maintains the following variables for its state\n\
    \   machine:\n   recv_num: The sequence number of the last received slice.\n \
    \  req: A bitmask whose length equals the number of slices in the image.\n   retry:\
    \ A timer.\n   giveup: A timer.\n   final: The sequence number of the last slice.\n\
    \   Note: The symbol \"C\" indicates an event in a state that results in\n   the\
    \ state remaining the same.\n                               |\n              \
    \                 v\n                          +----------+\n                \
    \          |   init   |    recv_num = 0,\n                          +----------+\
    \    final = 0, req = 0,\n                               |          giveup = t\n\
    \                               v\n    +----------+         +-----------+\n  \
    \  | finished |<------- |  sending  |<-------\\\n    +----------+         +-----------+\
    \        |\n                               |              | retry fires\n    \
    \                           v              |\n                        +--------------+\
    \      |\n      bit in req =     C|  receiving   |------/\n   seq_num in packet\
    \    +--------------+\n        is set                 |\n                    \
    \           | giveup fires\n                               v\n               \
    \         +-------------+\n                        | discovering |\n         \
    \               +-------------+\n     Figure 31: SLAPP Image Download Protocol\
    \ State Machine at the WTP\n   The following states are defined:\n   Init:\n \
    \     When the WTP leaves the SLAPP state of \"Secure\", it enters the\n     \
    \ \"Init\" state of the Image Download protocol.  recv_num, final, and\n     \
    \ the req bitmask are set to zero (0), and the giveup timer is set\n      to a\
    \ suitably large number.  The WTP transitions directly to\n      Sending.\n  \
    \ Sending:\n      If recv_num is zero (0) the WTP sends a request for a packet\
    \ with\n      sequence number of zero (0) and the \"More\" bit set to one (1).\n\
    \      Otherwise, for every unset bit in req between one (1) and\n      recv_num,\
    \ a request packet is sent with the sequence number\n      corresponding to the\
    \ unset bit in req and the \"More\" bit set to\n      more.\n      If there are\
    \ no unset bits in req and final is non-zero, a request\n      packet is sent\
    \ for the sequence number represented by final with\n      the \"More\" bit cleared,\
    \ giveup is cleared and the state machine\n      transitions to Finished.  Otherwise,\
    \ retry is set to a suitable\n      value and the WTP transitions to Receiving.\n\
    \   Receiving:\n      In this state, the WTP receives Image Download packets.\
    \  The bit\n      in req corresponding to the sequence number in the received\
    \ packet\n      is set, indicating this packet has been received.  If the sequence\n\
    \      number of the received packet has already been received, the\n      packet\
    \ is silently dropped; otherwise, the data in the packet is\n      stored as the\
    \ indicated slice in a file that represents the\n      downloaded image.  If the\
    \ received packet has the \"More\" bit\n      cleared, final is set to the sequence\
    \ number in that packet.  When\n      the retry timer fires, the WTP transitions\
    \ to Sending.  If the\n      giveup timer fires, the WTP transitions to the SLAPP\
    \ state of\n      Discovering.\n   Finished:\n      The Image Download protocol\
    \ has finished.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This document describes a protocol, SLAPP, which\
    \ uses a different\n   protocol, DTLS, to provide for authentication, key exchange,\
    \ and bulk\n   data encryption of a Negotiated Control Protocol.  Its security\n\
    \   considerations are therefore those of DTLS.\n   The AC creates state upon\
    \ receipt of an acceptable Discover Request.\n   AC implementations of SLAPP SHOULD\
    \ therefore take measures to protect\n   themselves from denial-of-service attacks\
    \ that attempt to exhaust\n   resources on target machines.  These measures could\
    \ take the form of\n   randomly dropping connections when the number of open connections\n\
    \   reaches a certain threshold.\n   The WTP exposes information about itself\
    \ during the discovery phase.\n   Some of this information could not be gleaned\
    \ by other means.\n"
- title: 8.  Extensibility to Other Technologies
  contents:
  - "8.  Extensibility to Other Technologies\n   The SLAPP protocol can be considered\
    \ to be a technology-independent\n   protocol that can be extended with technology-specific\
    \ components to\n   solve an interoperability problem where a central controller\
    \ from one\n   vendor is expected to control and manage network elements from\
    \ a\n   different vendor.\n   While the description of the SLAPP protocol in this\
    \ document assumes\n   that it is meant to solve the multi-vendor interoperability\
    \ problem,\n   as defined in the CAPWAP problem statement [3], splitting the\n\
    \   solution to two components where technology-dependent control\n   protocols\
    \ are negotiated using a technology-independent framework\n   enables the use\
    \ of SLAPP as the common framework for multiple\n   underlying technologies that\
    \ are vastly different from one another.\n"
- title: 9.  Informative References
  contents:
  - "9.  Informative References\n   [1]   Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [2]   Yang, L., Zerfos, P., and E. Sadot, \"Architecture Taxonomy for\n  \
    \       Control and Provisioning of Wireless Access Points (CAPWAP)\",\n     \
    \    RFC 4118, June 2005.\n   [3]   O'Hara, B., Calhoun, P., and J. Kempf, \"\
    Configuration and\n         Provisioning for Wireless Access Points (CAPWAP) Problem\n\
    \         Statement\", RFC 3990, February 2005.\n   [4]   Farinacci, D., Li, T.,\
    \ Hanks, S., Meyer, D., and P. Traina,\n         \"Generic Routing Encapsulation\
    \ (GRE)\", RFC 2784, March 2000.\n   [5]   Braden, R., Ed., \"Requirements for\
    \ Internet Hosts -\n         Communication Layers\", STD 3, RFC 1122, October\
    \ 1989.\n   [6]   Rescorla, E. and N. Modadugu, \"Datagram Transport Layer\n \
    \        Security\", RFC 4347, April 2006.\n   [7]   Dierks, T. and E. Rescorla,\
    \ \"The Transport Layer Security (TLS)\n         Protocol Version 1.2\", RFC 5246,\
    \ August 2008.\n   [8]   Modadugu, N. and E. Rescorla, \"The Design and Implementation\
    \ of\n         Datagram TLS\",\n         <http://crypto.stanford.edu/~nagendra/papers/dtls.pdf>.\n\
    \   [9]   Krishna, P. and D. Husak, \"Simple Lightweight RFID Reader\n       \
    \  Protocol\", Work in Progress, August 2005.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Partha Narasimhan\n   Aruba Networks\n   1322 Crossman\
    \ Ave\n   Sunnyvale, CA  94089\n   Phone: +1 408-480-4716\n   EMail: partha@arubanetworks.com\n\
    \   Dan Harkins\n   Aruba Networks\n   1322 Crossman Ave\n   Sunnyvale, CA  94089\n\
    \   EMail: dharkins@arubanetworks.com\n   Subbu Ponnuswamy\n   Aruba Networks\n\
    \   1322 Crossman Ave\n   Sunnyvale, CA  94089\n   Phone: +1 408-754-1213\n  \
    \ EMail: subbu@arubanetworks.com\n"
