- title: __initial_text__
  contents:
  - '  Internet Message Access Protocol version 4 - LIST Command Extensions

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   IMAP4 has two commands for listing mailboxes: LIST and LSUB.  As\
    \ we\n   have added extensions, such as Mailbox Referrals, that have required\n\
    \   specialized lists we have had to expand the number of list commands,\n   since\
    \ each extension must add its function to both LIST and LSUB, and\n   these commands\
    \ are not, as they are defined, extensible.  If we've\n   needed the extensions\
    \ to work together, we've had to add a set of\n   commands to mix the different\
    \ options, the set increasing in size\n   with each new extension.  This document\
    \ describes an extension to the\n   base LIST command that will allow these additions\
    \ to be done with\n   mutually compatible options to the LIST command, avoiding\
    \ the\n   exponential increase in specialized list commands.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction and Overview  . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Conventions Used in This Document  . . . . . . . . .\
    \ . . . . .  4\n   3.  Extended LIST Command  . . . . . . . . . . . . . . . .\
    \ . . . .  4\n     3.1.  Initial List of Selection Options  . . . . . . . . .\
    \ . . .  7\n     3.2.  Initial List of Return Options . . . . . . . . . . . .\
    \ . .  8\n     3.3.  General Principles for Returning LIST Responses  . . . .\
    \ .  9\n     3.4.  Additional Requirements on LIST-EXTENDED Clients . . . . .\
    \  9\n     3.5.  CHILDINFO Extended Data Item . . . . . . . . . . . . . . . 10\n\
    \   4.  The CHILDREN Return Option . . . . . . . . . . . . . . . . . . 11\n  \
    \ 5.  Examples . . . . . . . . . . . . . . . . . . . . . . . . . . . 12\n   6.\
    \  Formal Syntax  . . . . . . . . . . . . . . . . . . . . . . . . 19\n   7.  Internationalization\
    \ Considerations  . . . . . . . . . . . . . 22\n   8.  Security Considerations\
    \  . . . . . . . . . . . . . . . . . . . 23\n   9.  IANA Considerations  . . .\
    \ . . . . . . . . . . . . . . . . . . 23\n     9.1.  Guidelines for IANA  . .\
    \ . . . . . . . . . . . . . . . . . 23\n     9.2.  Registration Procedure and\
    \ Change Control  . . . . . . . . 23\n     9.3.  Registration Template for LIST-EXTENDED\
    \ Options  . . . . . 25\n     9.4.  Initial LIST-EXTENDED Option Registrations\
    \ . . . . . . . . 25\n     9.5.  Registration Template for LIST-EXTENDED Extended\
    \ Data\n           Item . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ 28\n     9.6.  Initial LIST-EXTENDED Extended Data Item Registrations . . 28\n\
    \   10. Acknowledgements . . . . . . . . . . . . . . . . . . . . . . . 29\n  \
    \ 11. References . . . . . . . . . . . . . . . . . . . . . . . . . . 29\n    \
    \ 11.1. Normative References . . . . . . . . . . . . . . . . . . . 29\n     11.2.\
    \ Informative References . . . . . . . . . . . . . . . . . . 30\n"
- title: 1.  Introduction and Overview
  contents:
  - "1.  Introduction and Overview\n   The LIST command is extended by amending the\
    \ syntax to allow options\n   and multiple patterns to be specified.  The list\
    \ of options replaces\n   the several commands that are currently used to mix\
    \ and match the\n   information requested.  The new syntax is backward compatible,\
    \ with\n   no ambiguity: the new syntax is being used if one of the following\n\
    \   conditions is true:\n   1.  if the first word after the command name begins\
    \ with a\n       parenthesis (\"LIST selection options\")\n   2.  if the second\
    \ word after the command name begins with a\n       parenthesis (\"multiple mailbox\
    \ patterns\")\n   3.  if the LIST command has more than 2 parameters (\"LIST return\n\
    \       options\")\n   Otherwise the original syntax is used.\n   By adding options\
    \ to the LIST command, we are announcing the intent\n   to phase out and eventually\
    \ to deprecate the RLIST and RLSUB commands\n   described in [MBRef].  We are\
    \ also defining the mechanism to request\n   extended mailbox information, such\
    \ as is described in the Child\n   Mailbox Extension [CMbox].  The base LSUB command\
    \ is not deprecated\n   by this extension; rather, this extension adds a way to\
    \ obtain\n   subscription information with more options, with those server\n \
    \  implementations that support it.  Clients that simply need a list of\n   subscribed\
    \ mailboxes, as provided by the LSUB command, SHOULD\n   continue to use that\
    \ command.\n   This document defines an IMAP4 extension that is identified by\
    \ the\n   capability string \"LIST-EXTENDED\".  The LIST-EXTENDED extension makes\n\
    \   the following changes to the IMAP4 protocol, which are described in\n   more\
    \ detail in Section 3 and Section 4:\n   a.  defines new syntax for LIST command\
    \ options.\n   b.  extends LIST to allow for multiple mailbox patterns.\n   c.\
    \  adds LIST command selection options: SUBSCRIBED, REMOTE, and\n       RECURSIVEMATCH.\n\
    \   d.  adds LIST command return options: SUBSCRIBED and CHILDREN.\n   e.  adds\
    \ new mailbox attributes: \"\\NonExistent\", \"\\Subscribed\",\n       \"\\Remote\"\
    , \"\\HasChildren\", and \"\\HasNoChildren\".\n   f.  adds CHILDINFO extended\
    \ data item.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   In examples, \"C:\" indicates lines\
    \ sent by a client that is connected\n   to a server.  \"S:\" indicates lines\
    \ sent by the server to the client.\n   The key words \"MUST\", \"MUST NOT\",\
    \ \"SHOULD\", \"SHOULD NOT\", and \"MAY\"\n   are used in this document as specified\
    \ in RFC 2119 [Kwds].\n   The term \"canonical LIST pattern\" refers to the canonical\
    \ pattern\n   constructed internally by the server from the reference and mailbox\n\
    \   name arguments (Section 6.3.8 of [IMAP4]).  The [IMAP4] LIST command\n   returns\
    \ only mailboxes that match the canonical LIST pattern.\n   Other terms are introduced\
    \ where they are referenced for the first\n   time.\n"
- title: 3.  Extended LIST Command
  contents:
  - "3.  Extended LIST Command\n   This extension updates the syntax of the LIST command\
    \ to allow for\n   multiple mailbox patterns to be specified, if they are enclosed\
    \ in\n   parentheses.  A mailbox name matches a list of mailbox patterns if it\n\
    \   matches at least one mailbox pattern.  If a mailbox name matches\n   multiple\
    \ mailbox patterns from the list, the server SHOULD return\n   only a single LIST\
    \ response.\n   Note that the non-extended LIST command is required to treat an\
    \ empty\n   (\"\" string) mailbox name argument as a special request to return\
    \ the\n   hierarchy delimiter and the root name of the name given in the\n   reference\
    \ parameter (as per [IMAP4]).  However, ANY extended LIST\n   command (extended\
    \ in any of 3 ways specified in Section 1, or any\n   combination thereof) MUST\
    \ NOT treat the empty mailbox name as such a\n   special request, and any regular\
    \ processing described in this\n   document applies.  In particular, if an extended\
    \ LIST command has\n   multiple mailbox names and one (or more) of them is the\
    \ empty string,\n   the empty string MUST be ignored for the purpose of matching.\n\
    \   Some servers might restrict which patterns are allowed in a LIST\n   command.\
    \  If a server doesn't accept a particular pattern, it MUST\n   silently ignore\
    \ it.\n   The LIST command syntax is also extended in two additional ways: by\n\
    \   adding a parenthesized list of command options between the command\n   name\
    \ and the reference name (LIST selection options) and an optional\n   list of\
    \ options at the end that control what kind of information\n   should be returned\
    \ (LIST return options).  See the formal syntax in\n   Section 6 for specific\
    \ details.\n   A LIST selection option tells the server which mailbox names should\n\
    \   be selected by the LIST operation.  The server should return\n   information\
    \ about all mailbox names that match any of the \"canonical\n   LIST pattern\"\
    \ (as described above) and satisfy additional selection\n   criteria (if any)\
    \ specified by the LIST selection options.  Let's\n   call any such mailbox name\
    \ a \"matched mailbox name\".  When multiple\n   selection options are specified,\
    \ the server MUST return information\n   about mailbox names that satisfy every\
    \ selection option, unless a\n   description of a particular specified option\
    \ prescribes special\n   rules.  An example of an option prescribing special rules\
    \ is the\n   RECURSIVEMATCH selection option described later in this section.\
    \  We\n   will use the term \"selection criteria\" when referring collectively\
    \ to\n   all selection options specified in a LIST command.\n   A LIST return\
    \ option controls which information is returned for each\n   matched mailbox name.\
    \  Note that return options MUST NOT cause the\n   server to report information\
    \ about additional mailbox names.  If the\n   client has not specified any return\
    \ option, only information about\n   attributes should be returned by the server.\
    \  (Of course, the server\n   is allowed to include any other information at will.)\n\
    \   Both selection and return command options will be defined in this\n   document\
    \ and in approved extension documents; each option will be\n   enabled by a capability\
    \ string (one capability may enable multiple\n   options), and a client MUST NOT\
    \ send an option for which the server\n   has not advertised support.  A server\
    \ MUST respond to options it does\n   not recognize with a BAD response.  The\
    \ client SHOULD NOT specify any\n   option more than once; however, if the client\
    \ does this, the server\n   MUST act as if it received the option only once. \
    \ The order in which\n   options are specified by the client is not significant.\n\
    \   In general, each selection option except RECURSIVEMATCH will have a\n   corresponding\
    \ return option.  The REMOTE selection option is an\n   anomaly in this regard,\
    \ and does not have a corresponding return\n   option.  That is because it expands,\
    \ rather than restricts, the set\n   of mailboxes that are returned.  Future extensions\
    \ to this\n   specification should keep parallelism in mind and define a pair\
    \ of\n   corresponding options.\n   This extension is identified by the capability\
    \ string\n   \"LIST-EXTENDED\", and support for it is a prerequisite for any future\n\
    \   extensions that require specialized forms of the LIST command.  Such\n   extensions\
    \ MUST refer to this document and MUST add their function\n   through command\
    \ options as described herein.  Note that extensions\n   that don't require support\
    \ for an extended LIST command, but use\n   extended LIST responses (see below),\
    \ don't need to advertise the\n   \"LIST-EXTENDED\" capability string.\n   This\
    \ extension also defines extensions to the LIST response, allowing\n   a series\
    \ of extended fields at the end, a parenthesized list of\n   tagged data (also\
    \ referred to as \"extended data item\").  The first\n   element of an extended\
    \ field is a tag, which identifies the type of\n   data.  Tags MUST be registered\
    \ with IANA, as described in Section 9.5\n   of this document.  An example of\
    \ such an extended set might be\n   tablecloth ((\"edge\" \"lacy\") (\"color\"\
    \ \"red\"))) (X-Sample \"text\"))\n   or\n   tablecloth (\"edge\" \"lacy\")) (X-Sample\
    \ \"text\" \"more text\"))\n   See the formal syntax, in Section 6, for the full\
    \ syntactic details.\n   The server MUST NOT return any extended data item unless\
    \ the client\n   has expressed its ability to support extended LIST responses,\
    \ for\n   example, by using an extended LIST command.  The server MAY return\n\
    \   data in the extended fields that was not directly solicited by the\n   client\
    \ in the corresponding LIST command.  For example, the client\n   can enable extra\
    \ extended fields by using another IMAP extension that\n   make use of the extended\
    \ LIST responses.  The client MUST ignore all\n   extended fields it doesn't recognize.\n\
    \   The LIST-EXTENDED capability also defines several new mailbox\n   attributes.\n\
    \   The \"\\NonExistent\" attribute indicates that a mailbox name does not\n \
    \  refer to an existing mailbox.  Note that this attribute is not\n   meaningful\
    \ by itself, as mailbox names that match the canonical LIST\n   pattern but don't\
    \ exist must not be returned unless one of the two\n   conditions listed below\
    \ is also satisfied:\n   a.  The mailbox name also satisfies the selection criteria\
    \ (for\n       example, it is subscribed and the \"SUBSCRIBED\" selection option\n\
    \       has been specified).\n   b.  \"RECURSIVEMATCH\" has been specified, and\
    \ the mailbox name has at\n       least one descendant mailbox name that does\
    \ not match the LIST\n       pattern and does match the selection criteria.\n\
    \   In practice, this means that the \"\\NonExistent\" attribute is usually\n\
    \   returned with one or more of \"\\Subscribed\", \"\\Remote\",\n   \"\\HasChildren\"\
    , or the CHILDINFO extended data item (see their\n   description below).\n   The\
    \ \"\\NonExistent\" attribute implies \"\\NoSelect\".  The \"\\NonExistent\"\n\
    \   attribute MUST be supported and MUST be accurately computed.\n"
- title: 3.1.  Initial List of Selection Options
  contents:
  - "3.1.  Initial List of Selection Options\n   The selection options defined in\
    \ this specification are as follows:\n   SUBSCRIBED -  causes the LIST command\
    \ to list subscribed names,\n      rather than the existing mailboxes.  This will\
    \ often be a subset\n      of the actual mailboxes.  It's also possible for this\
    \ list to\n      contain the names of mailboxes that don't exist.  In any case,\
    \ the\n      list MUST include exactly those mailbox names that match the\n  \
    \    canonical list pattern and are subscribed to.  This option is\n      intended\
    \ to supplement the LSUB command.  Of particular note are\n      the mailbox attributes\
    \ as returned by this option, compared with\n      what is returned by LSUB. \
    \ With the latter, the attributes\n      returned may not reflect the actual attribute\
    \ status on the\n      mailbox name, and the \\NoSelect attribute has a second\
    \ special\n      meaning (it indicates that this mailbox is not, itself,\n   \
    \   subscribed, but that it has descendant mailboxes that are).  With\n      the\
    \ SUBSCRIBED selection option described here, the attributes are\n      accurate\
    \ and complete, and have no special meanings.  \"LSUB\" and\n      \"LIST (SUBSCRIBED)\"\
    \ are, thus, not the same thing, and some\n      servers must do significant extra\
    \ work to respond to \"LIST\n      (SUBSCRIBED)\".  Because of this, clients SHOULD\
    \ continue to use\n      \"LSUB\" unless they specifically want the additional\
    \ information\n      offered by \"LIST (SUBSCRIBED)\".\n      This option defines\
    \ a new mailbox attribute, \"\\Subscribed\", that\n      indicates that a mailbox\
    \ name is subscribed to.  The \"\\Subscribed\"\n      attribute MUST be supported\
    \ and MUST be accurately computed when\n      the SUBSCRIBED selection option\
    \ is specified.\n      Note that the SUBSCRIBED selection option implies the SUBSCRIBED\n\
    \      return option (see below).\n   REMOTE -  causes the LIST command to show\
    \ remote mailboxes as well as\n      local ones, as described in [MBRef].  This\
    \ option is intended to\n      replace the RLIST command and, in conjunction with\
    \ the SUBSCRIBED\n      selection option, the RLSUB command.\n      This option\
    \ defines a new mailbox attribute, \"\\Remote\", that\n      indicates that a\
    \ mailbox is a remote mailbox.  The \"\\Remote\"\n      attribute MUST be accurately\
    \ computed when the REMOTE option is\n      specified.\n      The REMOTE selection\
    \ option has no interaction with other options.\n      Its effect is to tell the\
    \ server to apply the other options, if\n      any, to remote mailboxes, in addition\
    \ to local ones.  In\n      particular, it has no interaction with RECURSIVEMATCH\
    \ (see below).\n      A request for (REMOTE RECURSIVEMATCH) is invalid, because\
    \ a\n      request for (RECURSIVEMATCH) is.  A request for (REMOTE\n      RECURSIVEMATCH\
    \ SUBSCRIBED) is asking for all subscribed mailboxes,\n      both local and remote.\n\
    \   RECURSIVEMATCH -  this option forces the server to return information\n  \
    \    about parent mailboxes that don't match other selection options,\n      but\
    \ have some submailboxes that do.  Information about children is\n      returned\
    \ in the CHILDINFO extended data item, as described in\n      Section 3.5.\n \
    \     Note 1: In order for a parent mailbox to be returned, it still has\n   \
    \   to match the canonical LIST pattern.\n      Note 2: When returning the CHILDINFO\
    \ extended data item, it\n      doesn't matter whether or not the submailbox matches\
    \ the canonical\n      LIST pattern.  See also example 9 in Section 5.\n     \
    \ The RECURSIVEMATCH option MUST NOT occur as the only selection\n      option\
    \ (or only with REMOTE), as it only makes sense when other\n      selection options\
    \ are also used.  The server MUST return BAD\n      tagged response in such case.\n\
    \      Note that even if the RECURSIVEMATCH option is specified, the\n      client\
    \ MUST still be able to handle a case when a CHILDINFO\n      extended data item\
    \ is returned and there are no submailboxes that\n      meet the selection criteria\
    \ of the subsequent LIST command, as\n      they can be deleted/renamed after\
    \ the LIST response was sent, but\n      before the client had a chance to access\
    \ them.\n"
- title: 3.2.  Initial List of Return Options
  contents:
  - "3.2.  Initial List of Return Options\n   The return options defined in this specification\
    \ are as follows:\n   SUBSCRIBED -  causes the LIST command to return subscription\
    \ state\n      for all matching mailbox names.  The \"\\Subscribed\" attribute\
    \ MUST\n      be supported and MUST be accurately computed when the SUBSCRIBED\n\
    \      return option is specified.  Further, all mailbox flags MUST be\n     \
    \ accurately computed (this differs from the behavior of the LSUB\n      command).\n\
    \   CHILDREN -  requests mailbox child information as originally proposed\n  \
    \    in [CMbox].  See Section 4, below, for details.  This option MUST\n     \
    \ be supported by all servers.\n"
- title: 3.3.  General Principles for Returning LIST Responses
  contents:
  - "3.3.  General Principles for Returning LIST Responses\n   This section outlines\
    \ several principles that can be used by server\n   implementations of this document\
    \ to decide whether a LIST response\n   should be returned, as well as how many\
    \ responses and what kind of\n   information they may contain.\n   1.  At most\
    \ one LIST response should be returned for each mailbox\n       name that matches\
    \ the canonical LIST pattern.  Server\n       implementors must not assume that\
    \ clients will be able to\n       assemble mailbox attributes and other information\
    \ returned in\n       multiple LIST responses.\n   2.  There are only two reasons\
    \ for including a matching mailbox name\n       in the responses to the LIST command\
    \ (note that the server is\n       allowed to return unsolicited responses at\
    \ any time, and such\n       responses are not governed by this rule):\n     \
    \  A.  The mailbox name also satisfies the selection criteria.\n       B.  The\
    \ mailbox name doesn't satisfy the selection criteria, but\n           it has\
    \ at least one descendant mailbox name that satisfies\n           the selection\
    \ criteria and that doesn't match the canonical\n           LIST pattern.\n  \
    \         For more information on this case, see the CHILDINFO extended\n    \
    \       data item described in Section 3.5.  Note that the CHILDINFO\n       \
    \    extended data item can only be returned when the\n           RECURSIVEMATCH\
    \ selection option is specified.\n   3.  Attributes returned in the same LIST\
    \ response must be treated\n       additively.  For example, the following response\n\
    \          S: * LIST (\\Subscribed \\NonExistent) \"/\" \"Fruit/Peach\"\n    \
    \   means that the \"Fruit/Peach\" mailbox doesn't exist, but it is\n       subscribed.\n"
- title: 3.4.  Additional Requirements on LIST-EXTENDED Clients
  contents:
  - "3.4.  Additional Requirements on LIST-EXTENDED Clients\n   All clients that support\
    \ this extension MUST treat an attribute with\n   a stronger meaning as implying\
    \ any attribute that can be inferred\n   from it.  For example, the client must\
    \ treat the presence of the\n   \\NoInferiors attribute as if the \\HasNoChildren\
    \ attribute was also\n   sent by the server.\n   The following table summarizes\
    \ inference rules described in\n   Section 3.\n                +--------------------+-------------------+\n\
    \                | returned attribute | implied attribute |\n                +--------------------+-------------------+\n\
    \                |    \\NoInferiors    |   \\HasNoChildren  |\n              \
    \  |    \\NonExistent    |     \\NoSelect     |\n                +--------------------+-------------------+\n"
- title: 3.5.  CHILDINFO Extended Data Item
  contents:
  - "3.5.  CHILDINFO Extended Data Item\n   The CHILDINFO extended data item MUST\
    \ NOT be returned unless the\n   client has specified the RECURSIVEMATCH selection\
    \ option.\n   The CHILDINFO extended data item in a LIST response describes the\n\
    \   selection criteria that has caused it to be returned and indicates\n   that\
    \ the mailbox has at least one descendant mailbox that matches the\n   selection\
    \ criteria.\n   The LSUB command indicates this condition by using the \"\\NoSelect\"\
    \n   attribute, but the LIST (SUBSCRIBED) command MUST NOT do that, since\n  \
    \ \"\\NoSelect\" retains its original meaning here.  Further, the\n   CHILDINFO\
    \ extended data item is more general, in that it can be used\n   with any extended\
    \ set of selection criteria.\n   Note: Some servers allow for mailboxes to exist\
    \ without requiring\n   their parent to exist.  For example, a mailbox \"Customers/ABC\"\
    \ can\n   exist while the mailbox \"Customers\" does not.  As CHILDINFO extended\n\
    \   data item is not allowed if the RECURSIVEMATCH selection option is\n   not\
    \ specified, such servers SHOULD use the \"\\NonExistent\n   \\HasChildren\" attribute\
    \ pair to signal to the client that there is a\n   descendant mailbox that matches\
    \ the selection criteria.  See example\n   11 in Section 5.\n   The returned selection\
    \ criteria allow the client to distinguish a\n   solicited response from an unsolicited\
    \ one, as well as to distinguish\n   among solicited responses caused by multiple\
    \ pipelined LIST commands\n   that specify different criteria.\n   Servers SHOULD\
    \ ONLY return a non-matching mailbox name along with\n   CHILDINFO if at least\
    \ one matching child is not also being returned.\n   That is, servers SHOULD suppress\
    \ redundant CHILDINFO responses.\n   Examples 8 and 10 in Section 5 demonstrate\
    \ the difference between\n   present CHILDINFO extended data item and the \"\\\
    HasChildren\"\n   attribute.\n   The following table summarizes interaction between\
    \ the \"\\NonExistent\"\n   attribute and CHILDINFO (the first column indicates\
    \ whether the\n   parent mailbox exists):\n   +--------+--------------+--------------------+----------------------+\n\
    \   | exists |   meets the  |  has a child that  |       returned       |\n  \
    \ |        |   selection  |      meets the     |     LIST-EXTENDED    |\n   |\
    \        |   criteria   | selection criteria |    attributes and    |\n   |  \
    \      |              |                    |       CHILDINFO      |\n   +--------+--------------+--------------------+----------------------+\n\
    \   |   no   |      no      |         no         |   no LIST response   |\n  \
    \ |        |              |                    |       returned       |\n   |\
    \   yes  |      no      |         no         |   no LIST response   |\n   |  \
    \      |              |                    |       returned       |\n   |   no\
    \   |      yes     |         no         |     (\\NonExistent    |\n   |      \
    \  |              |                    |        <attr>)       |\n   |   yes  |\
    \      yes     |         no         |       (<attr>)       |\n   |   no   |  \
    \    no      |         yes        |   (\\NonExistent) +   |\n   |        |   \
    \           |                    |       CHILDINFO      |\n   |   yes  |     \
    \ no      |         yes        |    () + CHILDINFO    |\n   |   no   |      yes\
    \     |         yes        |     (\\NonExistent    |\n   |        |          \
    \    |                    |  <attr>) + CHILDINFO |\n   |   yes  |      yes   \
    \  |         yes        | (<attr>) + CHILDINFO |\n   +--------+--------------+--------------------+----------------------+\n\
    \   where <attr> is one or more attributes that correspond to the\n   selection\
    \ criteria; for example, for the SUBSCRIBED option the <attr>\n   is \\Subscribed.\n"
- title: 4.  The CHILDREN Return Option
  contents:
  - "4.  The CHILDREN Return Option\n   The CHILDREN return option implements the\
    \ Child Mailbox Extension,\n   originally proposed by Mike Gahrns and Raymond\
    \ Cheng, of Microsoft\n   Corporation.  Most of the information in this section\
    \ is taken\n   directly from their original specification [CMbox].  The CHILDREN\n\
    \   return option is simply an indication that the client wants this\n   information;\
    \ a server MAY provide it even if the option is not\n   specified.\n   Many IMAP4\
    \ [IMAP4] clients present to the user a hierarchical view of\n   the mailboxes\
    \ that a user has access to.  Rather than initially\n   presenting to the user\
    \ the entire mailbox hierarchy, it is often\n   preferable to show to the user\
    \ a collapsed outline list of the\n   mailbox hierarchy (particularly if there\
    \ is a large number of\n   mailboxes).  The user can then expand the collapsed\
    \ outline hierarchy\n   as needed.  It is common to include within the collapsed\
    \ hierarchy a\n   visual clue (such as a ''+'') to indicate that there are child\n\
    \   mailboxes under a particular mailbox.  When the visual clue is\n   clicked,\
    \ the hierarchy list is expanded to show the child mailboxes.\n   The CHILDREN\
    \ return option provides a mechanism for a client to\n   efficiently determine\
    \ whether a particular mailbox has children,\n   without issuing a LIST \"\" *\
    \ or a LIST \"\" % for each mailbox name.\n   The CHILDREN return option defines\
    \ two new attributes that MUST be\n   returned within a LIST response: \\HasChildren\
    \ and \\HasNoChildren.\n   Although these attributes MAY be returned in response\
    \ to any LIST\n   command, the CHILDREN return option is provided to indicate\
    \ that the\n   client particularly wants this information.  If the CHILDREN return\n\
    \   option is present, the server MUST return these attributes even if\n   their\
    \ computation is expensive.\n   \\HasChildren\n   The presence of this attribute\
    \ indicates that the mailbox has child\n        mailboxes.  A server SHOULD NOT\
    \ set this attribute if there are\n        child mailboxes and the user does not\
    \ have permission to access\n        any of them.  In this case, \\HasNoChildren\
    \ SHOULD be used.  In\n        many cases, however, a server may not be able to\
    \ efficiently\n        compute whether a user has access to any child mailbox.\
    \  Note\n        that even though the \\HasChildren attribute for a mailbox must\n\
    \        be correct at the time of processing of the mailbox, a client\n     \
    \   must be prepared to deal with a situation when a mailbox is\n        marked\
    \ with the \\HasChildren attribute, but no child mailbox\n        appears in the\
    \ response to the LIST command.  This might happen,\n        for example, due\
    \ to children mailboxes being deleted or made\n        inaccessible to the user\
    \ (using access control) by another\n        client before the server is able\
    \ to list them.\n   \\HasNoChildren\n   The presence of this attribute indicates\
    \ that the mailbox has NO\n        child mailboxes that are accessible to the\
    \ currently\n        authenticated user.\n   It is an error for the server to\
    \ return both a \\HasChildren and a\n   \\HasNoChildren attribute in the same\
    \ LIST response.\n   Note: the \\HasNoChildren attribute should not be confused\
    \ with the\n   IMAP4 [IMAP4] defined attribute \\NoInferiors, which indicates\
    \ that no\n   child mailboxes exist now and none can be created in the future.\n"
- title: 5.  Examples
  contents:
  - "5.  Examples\n   1:   The first example shows the complete local hierarchy that\
    \ will\n        be used for the other examples.\n      C: A01 LIST \"\" \"*\"\n\
    \      S: * LIST (\\Marked \\NoInferiors) \"/\" \"inbox\"\n      S: * LIST ()\
    \ \"/\" \"Fruit\"\n      S: * LIST () \"/\" \"Fruit/Apple\"\n      S: * LIST ()\
    \ \"/\" \"Fruit/Banana\"\n      S: * LIST () \"/\" \"Tofu\"\n      S: * LIST ()\
    \ \"/\" \"Vegetable\"\n      S: * LIST () \"/\" \"Vegetable/Broccoli\"\n     \
    \ S: * LIST () \"/\" \"Vegetable/Corn\"\n      S: A01 OK done\n   2:   In the\
    \ next example, we will see the subscribed mailboxes.  This\n        is similar\
    \ to, but not equivalent with, <LSUB \"\" \"*\">.  Note\n        that the mailbox\
    \ called \"Fruit/Peach\" is subscribed to, but does\n        not actually exist\
    \ (perhaps it was deleted while still\n        subscribed).  The \"Fruit\" mailbox\
    \ is not subscribed to, but it\n        has two subscribed children.  The \"Vegetable\"\
    \ mailbox is\n        subscribed and has two children; one of them is subscribed\
    \ as\n        well.\n      C: A02 LIST (SUBSCRIBED) \"\" \"*\"\n      S: * LIST\
    \ (\\Marked \\NoInferiors \\Subscribed) \"/\" \"inbox\"\n      S: * LIST (\\Subscribed)\
    \ \"/\" \"Fruit/Banana\"\n      S: * LIST (\\Subscribed \\NonExistent) \"/\" \"\
    Fruit/Peach\"\n      S: * LIST (\\Subscribed) \"/\" \"Vegetable\"\n      S: *\
    \ LIST (\\Subscribed) \"/\" \"Vegetable/Broccoli\"\n      S: A02 OK done\n   3:\
    \   The next example shows the use of the CHILDREN option.  The\n        client,\
    \ without having to list the second level of hierarchy,\n        now knows which\
    \ of the top-level mailboxes have submailboxes\n        (children) and which do\
    \ not.  Note that it's not necessary for\n        the server to return the \\\
    HasNoChildren attribute for the inbox,\n        because the \\NoInferiors attribute\
    \ already implies that, and has\n        a stronger meaning.\n      C: A03 LIST\
    \ () \"\" \"%\" RETURN (CHILDREN)\n      S: * LIST (\\Marked \\NoInferiors) \"\
    /\" \"inbox\"\n      S: * LIST (\\HasChildren) \"/\" \"Fruit\"\n      S: * LIST\
    \ (\\HasNoChildren) \"/\" \"Tofu\"\n      S: * LIST (\\HasChildren) \"/\" \"Vegetable\"\
    \n      S: A03 OK done\n   4:   In this example, we see more mailboxes that reside\
    \ on another\n        server.  This is similar to the command <RLIST \"\" \"%\"\
    >.\n      C: A04 LIST (REMOTE) \"\" \"%\" RETURN (CHILDREN)\n      S: * LIST (\\\
    Marked \\NoInferiors) \"/\" \"inbox\"\n      S: * LIST (\\HasChildren) \"/\" \"\
    Fruit\"\n      S: * LIST (\\HasNoChildren) \"/\" \"Tofu\"\n      S: * LIST (\\\
    HasChildren) \"/\" \"Vegetable\"\n      S: * LIST (\\Remote) \"/\" \"Bread\"\n\
    \      S: * LIST (\\HasChildren \\Remote) \"/\" \"Meat\"\n      S: A04 OK done\n\
    \   5:   The following example also requests the server to include\n        mailboxes\
    \ that reside on another server.  The server returns\n        information about\
    \ all mailboxes that are subscribed.  This is\n        similar to the command\
    \ <RLSUB \"\" \"*\">.  We also see the use of\n        two selection options.\n\
    \      C: A05 LIST (REMOTE SUBSCRIBED) \"\" \"*\"\n      S: * LIST (\\Marked \\\
    NoInferiors \\Subscribed) \"/\" \"inbox\"\n      S: * LIST (\\Subscribed) \"/\"\
    \ \"Fruit/Banana\"\n      S: * LIST (\\Subscribed \\NonExistent) \"/\" \"Fruit/Peach\"\
    \n      S: * LIST (\\Subscribed) \"/\" \"Vegetable\"\n      S: * LIST (\\Subscribed)\
    \ \"/\" \"Vegetable/Broccoli\"\n      S: * LIST (\\Remote \\Subscribed) \"/\"\
    \ \"Bread\"\n      S: A05 OK done\n   6:   The following example requests the\
    \ server to include mailboxes\n        that reside on another server.  The server\
    \ is asked to return\n        subscription information for all returned mailboxes.\
    \  This is\n        different from the example above.\n        Note that the output\
    \ of this command is not a superset of the\n        output in the previous example,\
    \ as it doesn't include LIST\n        response for the non-existent \"Fruit/Peach\"\
    .\n      C: A06 LIST (REMOTE) \"\" \"*\" RETURN (SUBSCRIBED)\n      S: * LIST\
    \ (\\Marked \\NoInferiors \\Subscribed) \"/\" \"inbox\"\n      S: * LIST () \"\
    /\" \"Fruit\"\n      S: * LIST () \"/\" \"Fruit/Apple\"\n      S: * LIST (\\Subscribed)\
    \ \"/\" \"Fruit/Banana\"\n      S: * LIST () \"/\" \"Tofu\"\n      S: * LIST (\\\
    Subscribed) \"/\" \"Vegetable\"\n      S: * LIST (\\Subscribed) \"/\" \"Vegetable/Broccoli\"\
    \n      S: * LIST () \"/\" \"Vegetable/Corn\"\n      S: * LIST (\\Remote \\Subscribed)\
    \ \"/\" \"Bread\"\n      S: * LIST (\\Remote) \"/\" \"Meat\"\n      S: A06 OK\
    \ done\n   7:   In the following example, the client has specified multiple\n\
    \        mailbox patterns.  Note that this example does not use the\n        mailbox\
    \ hierarchy used in the previous examples.\n      C: BBB LIST \"\" (\"INBOX\"\
    \ \"Drafts\" \"Sent/%\")\n      S: * LIST () \"/\" \"INBOX\"\n      S: * LIST\
    \ (\\NoInferiors) \"/\" \"Drafts\"\n      S: * LIST () \"/\" \"Sent/March2004\"\
    \n      S: * LIST (\\Marked) \"/\" \"Sent/December2003\"\n      S: * LIST () \"\
    /\" \"Sent/August2004\"\n      S: BBB OK done\n   8:   The following example demonstrates\
    \ the difference between the\n        \\HasChildren attribute and the CHILDINFO\
    \ extended data item.\n        Let's assume there is the following hierarchy:\n\
    \      C: C01 LIST \"\" \"*\"\n      S: * LIST (\\Marked \\NoInferiors) \"/\"\
    \ \"inbox\"\n      S: * LIST () \"/\" \"Foo\"\n      S: * LIST () \"/\" \"Foo/Bar\"\
    \n      S: * LIST () \"/\" \"Foo/Baz\"\n      S: * LIST () \"/\" \"Moo\"\n   \
    \   S: C01 OK done\n   If the client asks RETURN (CHILDREN), it will get this:\n\
    \      C: CA3 LIST \"\" \"%\" RETURN (CHILDREN)\n      S: * LIST (\\Marked \\\
    NoInferiors) \"/\" \"inbox\"\n      S: * LIST (\\HasChildren) \"/\" \"Foo\"\n\
    \      S: * LIST (\\HasNoChildren) \"/\" \"Moo\"\n      S: CA3 OK done\n   A)\
    \ Let's also assume that the mailbox \"Foo/Baz\" is the only\n   subscribed mailbox.\
    \  Then we get this result:\n      C: C02 LIST (SUBSCRIBED) \"\" \"*\"\n     \
    \ S: * LIST (\\Subscribed) \"/\" \"Foo/Baz\"\n      S: C02 OK done\n   Now, if\
    \ the client issues <LIST (SUBSCRIBED) \"\" \"%\">, the server will\n   return\
    \ no mailboxes (as the mailboxes \"Moo\", \"Foo\", and \"Inbox\" are\n   NOT subscribed).\
    \  However, if the client issues this:\n      C: C04 LIST (SUBSCRIBED RECURSIVEMATCH)\
    \ \"\" \"%\"\n      S: * LIST () \"/\" \"Foo\" (\"CHILDINFO\" (\"SUBSCRIBED\"\
    ))\n      S: C04 OK done\n   (i.e., the mailbox \"Foo\" is not subscribed, but\
    \ it has a child that\n   is.)\n   A1) If the mailbox \"Foo\" had also been subscribed,\
    \ the last command\n   would return this:\n      C: C04 LIST (SUBSCRIBED RECURSIVEMATCH)\
    \ \"\" \"%\"\n      S: * LIST (\\Subscribed) \"/\" \"Foo\" (\"CHILDINFO\" (\"\
    SUBSCRIBED\"))\n      S: C04 OK done\n   or even this:\n      C: C04 LIST (SUBSCRIBED\
    \ RECURSIVEMATCH) \"\" \"%\"\n      S: * LIST (\\Subscribed \\HasChildren) \"\
    /\" \"Foo\" (\"CHILDINFO\"\n         (\"SUBSCRIBED\"))\n      S: C04 OK done\n\
    \   A2) If we assume instead that the mailbox \"Foo\" is not part of the\n   original\
    \ hierarchy and is not subscribed, the last command will give\n   this result:\n\
    \      C: C04 LIST (SUBSCRIBED RECURSIVEMATCH) \"\" \"%\"\n      S: * LIST (\\\
    NonExistent) \"/\" \"Foo\" (\"CHILDINFO\" (\"SUBSCRIBED\"))\n      S: C04 OK done\n\
    \   B) Now, let's assume that no mailbox is subscribed.  In this case,\n   the\
    \ command <LIST (SUBSCRIBED RECURSIVEMATCH) \"\" \"%\"> will return no\n   responses,\
    \ as there are no subscribed children (even though \"Foo\" has\n   children).\n\
    \   C) And finally, suppose that only the mailboxes \"Foo\" and \"Moo\" are\n\
    \   subscribed.  In that case, we see this result:\n      C: C04 LIST (SUBSCRIBED\
    \ RECURSIVEMATCH) \"\" \"%\" RETURN (CHILDREN)\n      S: * LIST (\\HasChildren\
    \ \\Subscribed) \"/\" \"Foo\"\n      S: * LIST (\\HasNoChildren \\Subscribed)\
    \ \"/\" \"Moo\"\n      S: C04 OK done\n   (which means that the mailbox \"Foo\"\
    \ has children, but none of them is\n   subscribed).\n   9:   The following example\
    \ demonstrates that the CHILDINFO extended\n        data item is returned whether\
    \ or not children mailboxes match\n        the canonical LIST pattern.\n     \
    \   Let's assume there is the following hierarchy:\n      C: D01 LIST \"\" \"\
    *\"\n      S: * LIST (\\Marked \\NoInferiors) \"/\" \"inbox\"\n      S: * LIST\
    \ () \"/\" \"foo2\"\n      S: * LIST () \"/\" \"foo2/bar1\"\n      S: * LIST ()\
    \ \"/\" \"foo2/bar2\"\n      S: * LIST () \"/\" \"baz2\"\n      S: * LIST () \"\
    /\" \"baz2/bar2\"\n      S: * LIST () \"/\" \"baz2/bar22\"\n      S: * LIST ()\
    \ \"/\" \"baz2/bar222\"\n      S: * LIST () \"/\" \"eps2\"\n      S: * LIST ()\
    \ \"/\" \"eps2/mamba\"\n      S: * LIST () \"/\" \"qux2/bar2\"\n      S: D01 OK\
    \ done\n   And that the following mailboxes are subscribed:\n      C: D02 LIST\
    \ (SUBSCRIBED) \"\" \"*\"\n      S: * LIST (\\Subscribed) \"/\" \"foo2/bar1\"\n\
    \      S: * LIST (\\Subscribed) \"/\" \"foo2/bar2\"\n      S: * LIST (\\Subscribed)\
    \ \"/\" \"baz2/bar2\"\n      S: * LIST (\\Subscribed) \"/\" \"baz2/bar22\"\n \
    \     S: * LIST (\\Subscribed) \"/\" \"baz2/bar222\"\n      S: * LIST (\\Subscribed)\
    \ \"/\" \"eps2\"\n      S: * LIST (\\Subscribed) \"/\" \"eps2/mamba\"\n      S:\
    \ * LIST (\\Subscribed) \"/\" \"qux2/bar2\"\n      S: D02 OK done\n   The client\
    \ issues the following command first:\n      C: D03 LIST (RECURSIVEMATCH SUBSCRIBED)\
    \ \"\" \"*2\"\n      S: * LIST () \"/\" \"foo2\" (\"CHILDINFO\" (\"SUBSCRIBED\"\
    ))\n      S: * LIST (\\Subscribed) \"/\" \"foo2/bar2\"\n      S: * LIST (\\Subscribed)\
    \ \"/\" \"baz2/bar2\"\n      S: * LIST (\\Subscribed) \"/\" \"baz2/bar22\"\n \
    \     S: * LIST (\\Subscribed) \"/\" \"baz2/bar222\"\n      S: * LIST (\\Subscribed)\
    \ \"/\" \"eps2\" (\"CHILDINFO\" (\"SUBSCRIBED\"))\n      S: * LIST (\\Subscribed)\
    \ \"/\" \"qux2/bar2\"\n      S: D03 OK done\n   and the server may also include\
    \ (but this would violate a SHOULD NOT\n   in Section 3.5, because CHILDINFO is\
    \ redundant)\n      S: * LIST () \"/\" \"baz2\" (\"CHILDINFO\" (\"SUBSCRIBED\"\
    ))\n      S: * LIST (\\NonExistent) \"/\" \"qux2\" (\"CHILDINFO\" (\"SUBSCRIBED\"\
    ))\n   The CHILDINFO extended data item is returned for mailboxes \"foo2\",\n\
    \   \"baz2\", and \"eps2\", because all of them have subscribed children,\n  \
    \ even though for the mailbox \"foo2\" only one of the two subscribed\n   children\
    \ matches the pattern, for the mailbox \"baz2\" all the\n   subscribed children\
    \ match the pattern, and for the mailbox \"eps2\"\n   none of the subscribed children\
    \ matches the pattern.\n   Note that if the client issues\n      C: D03 LIST (RECURSIVEMATCH\
    \ SUBSCRIBED) \"\" \"*\"\n      S: * LIST () \"/\" \"foo2\" (\"CHILDINFO\" (\"\
    SUBSCRIBED\"))\n      S: * LIST (\\Subscribed) \"/\" \"foo2/bar1\"\n      S: *\
    \ LIST (\\Subscribed) \"/\" \"foo2/bar2\"\n      S: * LIST () \"/\" \"baz2\" (\"\
    CHILDINFO\" (\"SUBSCRIBED\"))\n      S: * LIST (\\Subscribed) \"/\" \"baz2/bar2\"\
    \n      S: * LIST (\\Subscribed) \"/\" \"baz2/bar22\"\n      S: * LIST (\\Subscribed)\
    \ \"/\" \"baz2/bar222\"\n      S: * LIST (\\Subscribed) \"/\" \"eps2\" (\"CHILDINFO\"\
    \ (\"SUBSCRIBED\"))\n      S: * LIST (\\Subscribed) \"/\" \"eps2/mamba\"\n   \
    \   S: * LIST (\\Subscribed) \"/\" \"qux2/bar2\"\n      S: D03 OK done\n   The\
    \ LIST responses for mailboxes \"foo2\", \"baz2\", and \"eps2\" still\n   have\
    \ the CHILDINFO extended data item, even though this information\n   is redundant\
    \ and the client can determine it by itself.\n   10:  The following example shows\
    \ usage of multiple mailbox patterns.\n        It also demonstrates that the presence\
    \ of the CHILDINFO extended\n        data item doesn't necessarily imply \\HasChildren.\n\
    \      C: a1 LIST \"\" (\"foo\" \"foo/*\")\n      S: * LIST () \"/\" foo\n   \
    \   S: a1 OK done\n      C: a2 LIST (SUBSCRIBED) \"\" \"foo/*\"\n      S: * LIST\
    \ (\\Subscribed \\NonExistent) \"/\" foo/bar\n      S: a2 OK done\n      C: a3\
    \ LIST (SUBSCRIBED RECURSIVEMATCH) \"\" foo RETURN (CHILDREN)\n      S: * LIST\
    \ (\\HasNoChildren) \"/\" foo (\"CHILDINFO\" (\"SUBSCRIBED\"))\n      S: a3 OK\
    \ done\n   11:  The following example shows how a server that supports missing\n\
    \        mailbox hierarchy elements can signal to a client that didn't\n     \
    \   specify the RECURSIVEMATCH selection option that there is a\n        child\
    \ mailbox that matches the selection criteria.\n      C: a1 LIST (REMOTE) \"\"\
    \ *\n      S: * LIST () \"/\" music/rock\n      S: * LIST (\\Remote) \"/\" also/jazz\n\
    \      S: a1 OK done\n      C: a2 LIST () \"\" %\n      S: * LIST (\\NonExistent\
    \ \\HasChildren) \"/\" music\n      S: a2 OK done\n      C: a3 LIST (REMOTE) \"\
    \" %\n      S: * LIST (\\NonExistent \\HasChildren) \"/\" music\n      S: * LIST\
    \ (\\NonExistent \\HasChildren) \"/\" also\n      S: a3 OK done\n      C: a3.1\
    \ LIST \"\" (% music/rock)\n      S: * LIST () \"/\" music/rock\n      S: a3.1\
    \ OK done\n   Because \"music/rock\" is the only mailbox under \"music\", there's\
    \ no\n   need for the server to also return \"music\".  However clients must\n\
    \   handle both cases.\n"
- title: 6.  Formal Syntax
  contents:
  - "6.  Formal Syntax\n   The following syntax specification uses the Augmented Backus-Naur\n\
    \   Form (ABNF) as described in [ABNF].  Terms not defined here are taken\n  \
    \ from [IMAP4].  In particular, note that the version of \"mailbox-list\"\n  \
    \ below, which defines the payload of the LIST response, updates the\n   version\
    \ defined in the IMAP specification.  It is pointed to by\n   \"mailbox-data\"\
    , which is defined in [IMAP4].\n   \"vendor-token\" is defined in [ACAP].  Note\
    \ that this normative\n   reference to ACAP will be an issue in moving this spec\
    \ forward, since\n   it introduces a dependency on ACAP.  The definitions of\n\
    \   \"vendor-token\" and of the IANA registry must eventually go somewhere\n \
    \  else, in a document that can be moved forward on the standards track\n   independently\
    \ of ACAP.\n   childinfo-extended-item =  \"CHILDINFO\" SP \"(\"\n           \
    \    list-select-base-opt-quoted\n               *(SP list-select-base-opt-quoted)\
    \ \")\"\n               ; Extended data item (mbox-list-extended-item)\n     \
    \          ; returned when the RECURSIVEMATCH\n               ; selection option\
    \ is specified.\n               ; Note 1: the CHILDINFO tag can be returned\n\
    \               ; with and without surrounding quotes, as per\n              \
    \ ; mbox-list-extended-item-tag production.\n               ; Note 2: The selection\
    \ options are always returned\n               ; quoted, unlike their specification\
    \ in\n               ; the extended LIST command.\n   child-mbox-flag =  \"\\\
    HasChildren\" / \"\\HasNoChildren\"\n               ; attributes for CHILDREN\
    \ return option, at most one\n               ; possible per LIST response\n  \
    \ eitem-standard-tag =  atom\n               ; a tag for extended list data defined\
    \ in a Standard\n               ; Track or Experimental RFC.\n   eitem-vendor-tag\
    \ =  vendor-token \"-\" atom\n               ; a vendor-specific tag for extended\
    \ list data\n   list =      \"LIST\" [SP list-select-opts] SP mailbox SP mbox-or-pat\n\
    \               [SP list-return-opts]\n   list-return-opts =  \"RETURN\" SP\n\
    \               \"(\" [return-option *(SP return-option)] \")\"\n            \
    \   ; list return options, e.g., CHILDREN\n   list-select-base-opt =  \"SUBSCRIBED\"\
    \ / option-extension\n               ; options that can be used by themselves\n\
    \   list-select-base-opt-quoted =  DQUOTE list-select-base-opt DQUOTE\n   list-select-independent-opt\
    \ =  \"REMOTE\" / option-extension\n               ; options that do not syntactically\
    \ interact with\n               ; other options\n   list-select-mod-opt =  \"\
    RECURSIVEMATCH\" / option-extension\n               ; options that require a list-select-base-opt\n\
    \               ; to also be present\n   list-select-opt =  list-select-base-opt\
    \ / list-select-independent-opt\n               / list-select-mod-opt\n      \
    \         ; An option registration template is described in\n               ;\
    \ Section 9.3 of this document.\n   list-select-opts =  \"(\" [\n            \
    \     (*(list-select-opt SP) list-select-base-opt\n                  *(SP list-select-opt))\n\
    \               / (list-select-independent-opt\n                  *(SP list-select-independent-opt))\n\
    \               ] \")\"\n               ; Any number of options may be in any\
    \ order.\n               ; If a list-select-mod-opt appears, then a\n        \
    \       ; list-select-base-opt must also appear.\n               ; This allows\
    \ these:\n               ; ()\n               ; (REMOTE)\n               ; (SUBSCRIBED)\n\
    \               ; (SUBSCRIBED REMOTE)\n               ; (SUBSCRIBED RECURSIVEMATCH)\n\
    \               ; (SUBSCRIBED REMOTE RECURSIVEMATCH)\n               ; But does\
    \ NOT allow these:\n               ; (RECURSIVEMATCH)\n               ; (REMOTE\
    \ RECURSIVEMATCH)\n   mailbox-list =  \"(\" [mbx-list-flags] \")\" SP\n      \
    \         (DQUOTE QUOTED-CHAR DQUOTE / nil) SP mailbox\n               [SP mbox-list-extended]\n\
    \               ; This is the list information pointed to by the ABNF\n      \
    \         ; item \"mailbox-data\", which is defined in [IMAP4]\n   mbox-list-extended\
    \ =  \"(\" [mbox-list-extended-item\n               *(SP mbox-list-extended-item)]\
    \ \")\"\n   mbox-list-extended-item =  mbox-list-extended-item-tag SP\n      \
    \         tagged-ext-val\n   mbox-list-extended-item-tag =  astring\n        \
    \       ; The content MUST conform to either \"eitem-vendor-tag\"\n          \
    \     ; or \"eitem-standard-tag\" ABNF productions.\n               ; A tag registration\
    \ template is described in this\n               ; document in Section 9.5.\n \
    \  mbx-list-oflag =/  child-mbox-flag / \"\\Subscribed\" / \"\\Remote\"\n   mbx-list-sflag\
    \ =/  \"\\NonExistent\"\n   mbox-or-pat =  list-mailbox / patterns\n   option-extension\
    \ =  (option-standard-tag / option-vendor-tag)\n               [SP option-value]\n\
    \   option-standard-tag =  atom\n               ; an option defined in a Standards\
    \ Track or\n               ; Experimental RFC\n   option-val-comp =  astring /\n\
    \               option-val-comp *(SP option-val-comp) /\n               \"(\"\
    \ option-val-comp \")\"\n   option-value =  \"(\" option-val-comp \")\"\n   option-vendor-tag\
    \ =  vendor-token \"-\" atom\n               ; a vendor-specific option, non-standard\n\
    \   patterns =  \"(\" list-mailbox *(SP list-mailbox) \")\"\n   return-option\
    \ =  \"SUBSCRIBED\" / \"CHILDREN\" / option-extension\n   tagged-ext-comp =  astring\
    \ /\n               tagged-ext-comp *(SP tagged-ext-comp) /\n               \"\
    (\" tagged-ext-comp \")\"\n               ; Extensions that follow this general\n\
    \               ; syntax should use nstring instead of\n               ; astring\
    \ when appropriate in the context\n               ; of the extension.\n      \
    \         ; Note that a message set or a \"number\"\n               ; can always\
    \ be represented as an \"atom\".\n               ; A URL should be represented\
    \ as\n               ; a \"quoted\" string.\n   tagged-ext-simple =  sequence-set\
    \ / number\n   tagged-ext-val =  tagged-ext-simple /\n               \"(\" [tagged-ext-comp]\
    \ \")\"\n"
- title: 7.  Internationalization Considerations
  contents:
  - "7.  Internationalization Considerations\n   The LIST command selection option\
    \ types defined in this specification\n   involve simple tests of mailbox properties.\
    \  However, future\n   extensions to LIST-EXTENDED may define selection options\
    \ that do more\n   sophisticated tests.  In the case of a test that requires matching\n\
    \   text, in the presence of the COMPARATOR [I18N] extension, the active\n   comparator\
    \ must be used to do comparisons.  Such LIST-EXTENDED\n   extensions MUST indicate\
    \ in their specification the interaction with\n   the COMPARATOR [I18N] extension.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This document describes syntactic changes to\
    \ the specification of the\n   IMAP4 commands LIST, LSUB, RLIST, and RLSUB, and\
    \ the modified LIST\n   command has the same security considerations as those\
    \ commands.  They\n   are described in [IMAP4] and [MBRef].\n   The Child Mailbox\
    \ Extension provides a client a more efficient means\n   of determining whether\
    \ a particular mailbox has children.  If a\n   mailbox has children, but the currently\
    \ authenticated user does not\n   have access to any of them, the server SHOULD\
    \ respond with a\n   \\HasNoChildren attribute.  In many cases, however, a server\
    \ may not\n   be able to efficiently compute whether a user has access to any\
    \ child\n   mailbox.  If such a server responds with a \\HasChildren attribute,\n\
    \   when in fact the currently authenticated user does not have access to\n  \
    \ any child mailboxes, potentially more information is conveyed about\n   the\
    \ mailbox than intended.  In most situations, this will not be a\n   security\
    \ concern, because if information regarding whether a mailbox\n   has children\
    \ is considered sensitive, a user would not be granted\n   access to that mailbox\
    \ in the first place.\n   The CHILDINFO extended data item has the same security\
    \ considerations\n   as the \\HasChildren attribute described above.\n"
- title: 9.  IANA Considerations
  contents:
  - '9.  IANA Considerations

    '
- title: 9.1.  Guidelines for IANA
  contents:
  - "9.1.  Guidelines for IANA\n   IANA has created two new registries for LIST-EXTENDED\
    \ options and\n   LIST-EXTENDED response data.  The templates and the initial\n\
    \   registrations are detailed below.\n"
- title: 9.2.  Registration Procedure and Change Control
  contents:
  - "9.2.  Registration Procedure and Change Control\n   Registration of a LIST-EXTENDED\
    \ option is done by filling in the\n   template in Section 9.3 and sending it\
    \ via electronic mail to\n   iana@iana.org.  Registration of a LIST-EXTENDED extended\
    \ data item is\n   done by filling in the template in Section 9.5 and sending\
    \ it via\n   electronic mail to iana@iana.org.  IANA has the right to reject\n\
    \   obviously bogus registrations, but will perform no review of claims\n   made\
    \ in the registration form.\n   A LIST-EXTENDED option/extended data item name\
    \ that starts with \"V-\"\n   is reserved for vendor-specific options/extended\
    \ data items.  All\n   options, whether they are vendor specific or global, should\
    \ be\n   registered with IANA.  If a LIST-EXTENDED extended data item is\n   returned\
    \ as a result of requesting a particular LIST-EXTENDED option,\n   the name of\
    \ the option SHOULD be used as the name of the\n   LIST-EXTENDED extended data\
    \ item.\n   Each vendor-specific option/extended data item MUST start with its\n\
    \   vendor-token (\"vendor prefix\").  The vendor-token MUST be registered\n \
    \  with IANA, using the [ACAP] vendor subtree registry.\n   Standard LIST-EXTENDED\
    \ option/extended data item names are case\n   insensitive.  If the vendor prefix\
    \ is omitted from a vendor-specific\n   LIST-EXTENDED option/extended data item\
    \ name, the rest is case\n   insensitive.  The vendor prefix itself is not case\
    \ sensitive, as it\n   might contain non-ASCII characters.  While the registration\n\
    \   procedures do not require it, authors of\n   LIST-EXTENDED options/extended\
    \ data items are encouraged to seek\n   community review and comment whenever\
    \ that is feasible.  Authors may\n   seek community review by posting a specification\
    \ of their proposed\n   mechanism as an\n   Internet-Draft.  LIST-EXTENDED option/extended\
    \ data items intended\n   for widespread use should be standardized through the\
    \ normal IETF\n   process, when appropriate.\n   Comments on registered LIST-EXTENDED\
    \ options/extended response data\n   should first be sent to the \"owner\" of\
    \ the mechanism and/or to the\n   IMAPEXT WG mailing list.  Submitters of comments\
    \ may, after a\n   reasonable attempt to contact the owner, request IANA to attach\
    \ their\n   comment to the registration itself.  If IANA approves of this, the\n\
    \   comment will be made accessible in conjunction with the registration\n   LIST-EXTENDED\
    \ options/extended response data itself.\n   Once a LIST-EXTENDED registration\
    \ has been published by IANA, the\n   author may request a change to its definition.\
    \  The change request\n   follows the same procedure as the registration request.\n\
    \   The owner of a LIST-EXTENDED registration may pass responsibility for\n  \
    \ the registered option/extended data item to another person or agency\n   by\
    \ informing IANA; this can be done without discussion or review.\n   The IESG\
    \ may reassign responsibility for a LIST-EXTENDED\n   option/extended data item.\
    \  The most common case of this will be to\n   enable changes to be made to mechanisms\
    \ where the author of the\n   registration has died, has moved out of contact,\
    \ or is otherwise\n   unable to make changes that are important to the community.\n\
    \   LIST-EXTENDED registrations may not be deleted; mechanisms that are\n   no\
    \ longer believed appropriate for use can be declared OBSOLETE by a\n   change\
    \ to their \"intended use\" field.  Such LIST-EXTENDED\n   options/extended data\
    \ items will be clearly marked in the lists\n   published by IANA.\n   The IESG\
    \ is considered to be the owner of all LIST-EXTENDED\n   options/extended data\
    \ items that are on the IETF standards track.\n"
- title: 9.3.  Registration Template for LIST-EXTENDED Options
  contents:
  - "9.3.  Registration Template for LIST-EXTENDED Options\n   To: iana@iana.org\n\
    \   Subject: Registration of LIST-EXTENDED option X\n   LIST-EXTENDED option name:\n\
    \   LIST-EXTENDED option type: (One of SELECTION or RETURN)\n   Implied return\
    \ options(s), if the option type is SELECTION: (zero or\n   more)\n   LIST-EXTENDED\
    \ option description:\n   Published specification (optional, recommended):\n \
    \  Security considerations:\n   Intended usage:\n   (One of COMMON, LIMITED USE,\
    \ or OBSOLETE)\n   Person and email address to contact for further information:\n\
    \   Owner/Change controller:\n   (Any other information that the author deems\
    \ interesting may be added\n   below this line.)\n"
- title: 9.4.  Initial LIST-EXTENDED Option Registrations
  contents:
  - "9.4.  Initial LIST-EXTENDED Option Registrations\n   The LIST-EXTENDED option\
    \ registry has been populated with the\n   following entries:\n   1.  To: iana@iana.org\n\
    \       Subject: Registration of LIST-EXTENDED option SUBSCRIBED\n       LIST-EXTENDED\
    \ option name: SUBSCRIBED\n       LIST-EXTENDED option type: SELECTION\n     \
    \  Implied return options(s): SUBSCRIBED\n       LIST-EXTENDED option description:\
    \ Causes the LIST command to list\n       subscribed mailboxes, rather than the\
    \ actual mailboxes.\n       Published specification: RFC 5258, Section 3.\n  \
    \     Security considerations: RFC 5258, Section 8.\n       Intended usage: COMMON\n\
    \       Person and email address to contact for further information:\n       Alexey\
    \ Melnikov <Alexey.Melnikov@isode.com>\n       Owner/Change controller: iesg@ietf.org\n\
    \   2.  To: iana@iana.org\n       Subject: Registration of LIST-EXTENDED option\
    \ REMOTE\n       LIST-EXTENDED option name: REMOTE\n       LIST-EXTENDED option\
    \ type: SELECTION\n       Implied return options(s): (none)\n       LIST-EXTENDED\
    \ option description: Causes the LIST command to\n       return remote mailboxes\
    \ as well as local ones, as described in\n       RFC 2193.\n       Published specification:\
    \ RFC 5258, Section 3.\n       Security considerations: RFC 5258, Section 8.\n\
    \       Intended usage: COMMON\n       Person and email address to contact for\
    \ further information:\n       Alexey Melnikov <Alexey.Melnikov@isode.com>\n \
    \      Owner/Change controller: iesg@ietf.org\n   3.  To: iana@iana.org\n    \
    \   Subject: Registration of LIST-EXTENDED option SUBSCRIBED\n       LIST-EXTENDED\
    \ option name: SUBSCRIBED\n       LIST-EXTENDED option type: RETURN\n       LIST-EXTENDED\
    \ option description: Causes the LIST command to\n       return subscription state.\n\
    \       Published specification: RFC 5258, Section 3.\n       Security considerations:\
    \ RFC 5258, Section 8.\n       Intended usage: COMMON\n       Person and email\
    \ address to contact for further information:\n       Alexey Melnikov <Alexey.Melnikov@isode.com>\n\
    \       Owner/Change controller: iesg@ietf.org\n   4.  To: iana@iana.org\n   \
    \    Subject: Registration of LIST-EXTENDED option RECURSIVEMATCH\n       LIST-EXTENDED\
    \ option name: RECURSIVEMATCH\n       LIST-EXTENDED option type: SELECTION\n \
    \      Implied return options(s): (none)\n       LIST-EXTENDED option description:\
    \ Requests that CHILDINFO\n       extended data item (childinfo-extended-item)\
    \ is to be returned.\n       Published specification: RFC 5258, Section 3.\n \
    \      Security considerations: RFC 5258, Section 8.\n       Intended usage: COMMON\n\
    \       Person and email address to contact for further information:\n       Alexey\
    \ Melnikov <Alexey.Melnikov@isode.com>\n       Owner/Change controller: iesg@ietf.org\n\
    \   5.  To: iana@iana.org\n       Subject: Registration of LIST-EXTENDED option\
    \ CHILDREN\n       LIST-EXTENDED option name: CHILDREN\n       LIST-EXTENDED option\
    \ type: RETURN\n       LIST-EXTENDED option description: Requests mailbox child\n\
    \       information.\n       Published specification: RFC 5258, Section 3 and\
    \ Section 4.\n       Security considerations: RFC 5258, Section 8.\n       Intended\
    \ usage: COMMON\n       Person and email address to contact for further information:\n\
    \       Alexey Melnikov <Alexey.Melnikov@isode.com>\n       Owner/Change controller:\
    \ iesg@ietf.org\n"
- title: 9.5.  Registration Template for LIST-EXTENDED Extended Data Item
  contents:
  - "9.5.  Registration Template for LIST-EXTENDED Extended Data Item\n   To: iana@iana.org\n\
    \   Subject: Registration of X LIST-EXTENDED extended data item\n   LIST-EXTENDED\
    \ extended data item tag:\n   LIST-EXTENDED extended data item description:\n\
    \   Which LIST-EXTENDED option(s) (and their types) causes this extended\n   data\
    \ item to be returned (if any):\n   Published specification (optional, recommended):\n\
    \   Security considerations:\n   Intended usage:\n   (One of COMMON, LIMITED USE,\
    \ or OBSOLETE)\n   Person and email address to contact for further information:\n\
    \   Owner/Change controller:\n   (Any other information that the author deems\
    \ interesting may be added\n   below this line.)\n"
- title: 9.6.  Initial LIST-EXTENDED Extended Data Item Registrations
  contents:
  - "9.6.  Initial LIST-EXTENDED Extended Data Item Registrations\n   The LIST-EXTENDED\
    \ extended data item registry has been populated with\n   the following entries:\n\
    \   1.  To: iana@iana.org\n       Subject: Registration of CHILDINFO LIST-EXTENDED\
    \ extended data\n       item\n       LIST-EXTENDED extended data item tag: CHILDINFO\n\
    \       LIST-EXTENDED extended data item description: The CHILDINFO\n       extended\
    \ data item describes the selection criteria that has\n       caused it to be\
    \ returned and indicates that the mailbox has one\n       or more child mailboxes\
    \ that match the selection criteria.\n       Which LIST-EXTENDED option(s) (and\
    \ their types) causes this\n       extended data item to be returned (if any):\
    \ RECURSIVEMATCH\n       selection option\n       Published specification: RFC\
    \ 5258, Section 3.5.\n       Security considerations: RFC 5258, Section 8.\n \
    \      Intended usage: COMMON\n       Person and email address to contact for\
    \ further information:\n       Alexey Melnikov <Alexey.Melnikov@isode.com>\n \
    \      Owner/Change controller: iesg@ietf.org\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   Mike Gahrns and Raymond Cheng of Microsoft Corporation\
    \ originally\n   devised the Child Mailbox Extension and proposed it in 1997;\
    \ the\n   idea, as well as most of the text in Section 4, is theirs.\n   This\
    \ document is the result of discussions on the IMAP4 and IMAPEXT\n   mailing lists\
    \ and is meant to reflect consensus of those groups.  In\n   particular, Mark\
    \ Crispin, Philip Guenther, Cyrus Daboo, Timo\n   Sirainen, Ken Murchison, Rob\
    \ Siemborski, Steve Hole, Arnt\n   Gulbrandsen, Larry Greenfield, Dave Cridland,\
    \ and Pete Maclean were\n   active participants in those discussions or made suggestions\
    \ to this\n   document.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [ABNF]   Crocker, D., Ed. and P. Overell, \"\
    Augmented BNF for Syntax\n            Specifications: ABNF\", STD 68, RFC 5234,\
    \ January 2008.\n   [ACAP]   Newman, C. and J. Myers, \"ACAP -- Application Configuration\n\
    \            Access Protocol\", RFC 2244, November 1997.\n   [I18N]   Newman,\
    \ C., Gulbrandsen, A., and A. Melnikov, \"Internet\n            Message Access\
    \ Protocol Internationalization\", RFC 5255,\n            June 2008.\n   [IMAP4]\
    \  Crispin, M., \"Internet Message Access Protocol - Version\n            4rev1\"\
    , RFC 3501, March 2003.\n   [Kwds]   Bradner, S., \"Key words for use in RFCs\
    \ to Indicate\n            Requirement Levels\", RFC 2119, March 1997.\n   [MBRef]\
    \  Gahrns, M., \"IMAP4 Mailbox Referrals\", RFC 2193,\n            September 1997.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [CMbox]  Gahrns, M. and R. Cheng, \"The Internet\
    \ Message Action\n            Protocol (IMAP4) Child Mailbox Extension\", RFC\
    \ 3348,\n            July 2002.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Barry Leiba\n   IBM T.J. Watson Research Center\n   19\
    \ Skyline Drive\n   Hawthorne, NY  10532\n   US\n   Phone: +1 914 784 7941\n \
    \  EMail: leiba@watson.ibm.com\n   Alexey Melnikov\n   Isode Limited\n   5 Castle\
    \ Business Village\n   36 Station Road\n   Hampton, Middlesex  TW12 2BX\n   UK\n\
    \   EMail: Alexey.Melnikov@isode.com\n   URI:   http://www.melnikov.ca/\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
