- title: __initial_text__
  contents:
  - '    Protocol for Access Node Control Mechanism in Broadband Networks

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes the Access Node Control Protocol (ANCP).\n\
    \   ANCP operates between a Network Access Server (NAS) and an Access\n   Node\
    \ (e.g., a Digital Subscriber Line Access Multiplexer (DSLAM)) in\n   a multi-service\
    \ reference architecture in order to perform operations\n   related to Quality\
    \ of Service, service, and subscribers.  Use cases\n   for ANCP are documented\
    \ in RFC 5851.  As well as describing the base\n   ANCP protocol, this document\
    \ specifies capabilities for Digital\n   Subscriber Line (DSL) topology discovery,\
    \ line configuration, and\n   remote line connectivity testing.  The design of\
    \ ANCP allows for\n   protocol extensions in other documents if they are needed\
    \ to support\n   other use cases and other access technologies.\n   ANCP is based\
    \ on the General Switch Management Protocol version 3\n   (GSMPv3) described in\
    \ RFC 3292, but with many modifications and\n   extensions, to the point that\
    \ the two protocols are not\n   interoperable.  For this reason, ANCP was assigned\
    \ a separate version\n   number to distinguish it.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6320.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................5\n\
    \      1.1. Historical Note ............................................6\n  \
    \    1.2. Requirements Language ......................................6\n    \
    \  1.3. Terminology ................................................6\n   2. Broadband\
    \ Access Aggregation ....................................8\n      2.1. ATM-Based\
    \ Broadband Aggregation ............................8\n      2.2. Ethernet-Based\
    \ Broadband Aggregation .......................9\n   3. Access Node Control Protocol\
    \ -- General Aspects ................10\n      3.1. Protocol Version ..........................................10\n\
    \      3.2. ANCP Transport ............................................10\n  \
    \    3.3. Encoding of Text Fields ...................................11\n    \
    \  3.4. Treatment of Reserved and Unused Fields ...................12\n      3.5.\
    \ The ANCP Adjacency Protocol ...............................12\n           3.5.1.\
    \ ANCP Adjacency Message Format ......................12\n           3.5.2. ANCP\
    \ Adjacency Procedures ..........................18\n      3.6. ANCP General Message\
    \ Formats ..............................29\n           3.6.1. The ANCP Message\
    \ Header ............................29\n           3.6.2. The ANCP Message Body\
    \ ..............................36\n      3.7. General Principles for the Design\
    \ of ANCP Messages ........37\n   4. Generally Useful ANCP Messages and TLVs ........................38\n\
    \      4.1. Provisioning Message ......................................38\n  \
    \    4.2. Generic Response Message ..................................39\n    \
    \  4.3. Target TLV ................................................41\n      4.4.\
    \ Command TLV ...............................................41\n      4.5. Status-Info\
    \ TLV ...........................................42\n   5. Introduction to ANCP\
    \ Capabilities for Digital\n      Subscriber Lines (DSLs) ........................................43\n\
    \      5.1. DSL Access Line Identification ............................44\n  \
    \         5.1.1. Control Context (Informative) ......................44\n    \
    \       5.1.2. TLVs for DSL Access Line Identification ............45\n   6. ANCP-Based\
    \ DSL Topology Discovery ..............................48\n      6.1. Control\
    \ Context (Informative) .............................48\n      6.2. Protocol Requirements\
    \ .....................................50\n           6.2.1. Protocol Requirements\
    \ on the AN Side ...............50\n           6.2.2. Protocol Requirements on\
    \ the NAS Side ..............50\n      6.3. ANCP Port Up and Port Down Event Message\
    \ Descriptions .....51\n      6.4. Procedures ................................................52\n\
    \           6.4.1. Procedures on the AN Side ..........................52\n  \
    \         6.4.2. Procedures on the NAS Side .........................53\n    \
    \  6.5. TLVs for DSL Line Attributes ..............................53\n      \
    \     6.5.1. DSL-Line-Attributes TLV ............................53\n        \
    \   6.5.2. DSL-Type TLV .......................................54\n          \
    \ 6.5.3. Actual-Net-Data-Rate-Upstream TLV ..................54\n           6.5.4.\
    \ Actual-Net-Data-Rate-Downstream TLV ................54\n           6.5.5. Minimum-Net-Data-Rate-Upstream\
    \ TLV .................55\n           6.5.6. Minimum-Net-Data-Rate-Downstream\
    \ TLV ...............55\n           6.5.7. Attainable-Net-Data-Rate-Upstream TLV\
    \ ..............55\n           6.5.8. Attainable-Net-Data-Rate-Downstream TLV\
    \ ............55\n           6.5.9. Maximum-Net-Data-Rate-Upstream TLV .................56\n\
    \           6.5.10. Maximum-Net-Data-Rate-Downstream TLV ..............56\n  \
    \         6.5.11. Minimum-Net-Low-Power-Data-Rate-Upstream TLV ......56\n    \
    \       6.5.12. Minimum-Net-Low-Power-Data-Rate-Downstream TLV ....56\n      \
    \     6.5.13. Maximum-Interleaving-Delay-Upstream TLV ...........57\n        \
    \   6.5.14. Actual-Interleaving-Delay-Upstream TLV ............57\n          \
    \ 6.5.15. Maximum-Interleaving-Delay-Downstream TLV .........57\n           6.5.16.\
    \ Actual-Interleaving-Delay-Downstream ..............57\n           6.5.17. DSL-Line-State\
    \ TLV ................................58\n           6.5.18. Access-Loop-Encapsulation\
    \ TLV .....................58\n   7. ANCP-Based DSL Line Configuration ..............................59\n\
    \      7.1. Control Context (Informative) .............................59\n  \
    \    7.2. Protocol Requirements .....................................61\n    \
    \       7.2.1. Protocol Requirements on the NAS Side ..............61\n      \
    \     7.2.2. Protocol Requirements on the AN Side ...............61\n      7.3.\
    \ ANCP Port Management (Line Configuration) Message Format ..62\n      7.4. Procedures\
    \ ................................................64\n           7.4.1. Procedures\
    \ on the NAS Side .........................64\n           7.4.2. Procedures on\
    \ the AN Side ..........................64\n      7.5. TLVs for DSL Line Configuration\
    \ ...........................64\n           7.5.1. Service-Profile-Name TLV ...........................65\n\
    \   8. ANCP-Based DSL Remote Line Connectivity Testing ................65\n  \
    \    8.1. Control Context (Informative) .............................65\n    \
    \  8.2. Protocol Requirements .....................................66\n      \
    \     8.2.1. Protocol Requirements on the NAS Side ..............66\n        \
    \   8.2.2. Protocol Requirements on the AN Side ...............66\n      8.3.\
    \ Port Management (OAM) Message Format ......................67\n      8.4. Procedures\
    \ ................................................68\n           8.4.1. NAS-Side\
    \ Procedures ................................68\n           8.4.2. AN-Side Procedures\
    \ .................................69\n      8.5. TLVs for the DSL Line Remote\
    \ Connectivity Testing\n           Capability ................................................70\n\
    \           8.5.1. OAM-Loopback-Test-Parameters TLV ...................70\n  \
    \         8.5.2. Opaque-Data TLV ....................................71\n    \
    \       8.5.3. OAM-Loopback-Test-Response-String TLV ..............71\n   9. IANA\
    \ Considerations ............................................71\n   10. IANA Actions\
    \ ..................................................72\n      10.1. ANCP Message\
    \ Type Registry ...............................72\n      10.2. ANCP Result Code\
    \ Registry ................................73\n      10.3. ANCP Port Management\
    \ Function Registry ...................74\n      10.4. ANCP Technology Type Registry\
    \ ............................75\n      10.5. ANCP Command Code Registry ...............................75\n\
    \      10.6. ANCP TLV Type Registry ...................................75\n  \
    \    10.7. ANCP Capability Type Registry ............................77\n    \
    \  10.8. Joint GSMP / ANCP Version Registry .......................77\n   11.\
    \ Security Considerations .......................................77\n   12. Contributors\
    \ ..................................................79\n   13. Acknowledgements\
    \ ..............................................79\n   14. References ....................................................79\n\
    \      14.1. Normative References .....................................79\n  \
    \    14.2. Informative References ...................................80\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines a new protocol, the Access Node Control\n\
    \   Protocol (ANCP), to realize a control plane between a service-\n   oriented\
    \ layer 3 edge device (the Network Access Server, NAS) and a\n   layer 2 Access\
    \ Node (e.g., Digital Subscriber Line Access\n   Multiplexer, DSLAM) in order\
    \ to perform operations related to quality\n   of service (QoS), services, and\
    \ subscriptions.  The requirements for\n   ANCP and the context within which it\
    \ operates are described in\n   [RFC5851].\n   ANCP provides its services to control\
    \ applications operating in the\n   AN and NAS, respectively.  This relationship\
    \ is shown in Figure 1.\n   Specification of the control applications is beyond\
    \ the scope of this\n   document, but informative partial descriptions are provided\
    \ as\n   necessary to give a context for the operation of the protocol.\n    \
    \      Access Node                            Network Access Server\n     +--------------------+\
    \                     +--------------------+\n     | +----------------+ |    \
    \                 | +----------------+ |\n     | |   AN Control   | |        \
    \             | |  NAS Control   | |\n     | |  Application   | |            \
    \         | |  Application   | |\n     | +----------------+ |                \
    \     | +----------------+ |\n     | +----------------+ |                    \
    \ | +----------------+ |\n     | |   ANCP Agent   | |    ANCP Messages    | |\
    \   ANCP Agent   | |\n     | |   (AN side)    |<----------------------->|   (NAS\
    \ side)   | |\n     | +----------------+ |                     | +----------------+\
    \ |\n     +--------------------+                     +--------------------+\n\
    \   Figure 1:  Architectural Context for the Access Node Control Protocol\n  \
    \ At various points in this document, information flows between the\n   control\
    \ applications and ANCP are described.  The purpose of such\n   descriptions is\
    \ to clarify the boundary between this specification\n   and, for example, [TR-147].\
    \  There is no intention to place limits on\n   the degree to which the control\
    \ application and the protocol\n   implementation are integrated.\n   This specification\
    \ specifies ANCP transport over TCP/IP.  TCP\n   encapsulation for ANCP is as\
    \ defined in Section 3.2.\n   The organization of this document is as follows:\n\
    \   o  Sections 1.2 and 1.3 introduce some terminology that will be\n      useful\
    \ in understanding the rest of the document.\n   o  Section 2 provides a description\
    \ of the access networks within\n      which ANCP will typically be deployed.\n\
    \   o  Section 3 specifies generally applicable aspects of ANCP.\n   o  Section\
    \ 4 specifies some messages and TLVs intended for use by\n      multiple capabilities\
    \ spanning multiple technologies.\n   o  Section 5 and the three following sections\
    \ describe and specify\n      the ANCP implementation of three capabilities applicable\
    \ to the\n      control of DSL access technology: topology discovery, line\n \
    \     configuration, and remote line connectivity testing.\n   o  Section 9 is\
    \ the IANA Considerations section.  This section\n      defines a number of new\
    \ ANCP-specific registries as well as the\n      joint GSMP/ANCP version registry\
    \ mentioned below.\n   o  Section 11 addresses security considerations relating\
    \ to ANCP,\n      beginning with the requirements stated in [RFC5713].\n"
- title: 1.1.  Historical Note
  contents:
  - "1.1.  Historical Note\n   Initial implementations of the protocol that became\
    \ ANCP were based\n   on the General Switch Management Protocol version 3 (GSMPv3)\n\
    \   [RFC3292].  The ANCP charter required the Working Group to develop\n   its\
    \ protocol based on these implementations.  In the end, ANCP\n   introduced so\
    \ many extensions and modifications to GSMPv3 that the\n   two protocols are not\
    \ interoperable.  Nevertheless, although this\n   specification has no normative\
    \ dependencies on [RFC3292], the mark of\n   ANCP's origins can be seen in the\
    \ various unused fields within the\n   ANCP message header.\n   Early in ANCP's\
    \ development, the decision was made to use the same\n   TCP port and encapsulation\
    \ as GSMPv3, and by the time ANCP was\n   finished, it was too late to reverse\
    \ that decision because of\n   existing implementations.  As a result, it is necessary\
    \ to have a way\n   for an ANCP peer to quickly distinguish ANCP from GSMP during\
    \ initial\n   adjacency negotiations.  This has been provided by a joint registry\n\
    \   of GSMP and ANCP version numbers.  GSMP has version numbers 1 through\n  \
    \ 3.  ANCP has the initial version number 50.\n"
- title: 1.2.  Requirements Language
  contents:
  - "1.2.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 1.3.  Terminology
  contents:
  - "1.3.  Terminology\n   This section repeats some definitions from [RFC5851], but\
    \ it also\n   adds definitions for terms used only in this document.\n   Access\
    \ Node (AN):  [RFC5851] Network device, usually located at a\n      service provider\
    \ central office or street cabinet that terminates\n      access (local) loop\
    \ connections from subscribers.  In case the\n      access loop is a Digital Subscriber\
    \ Line (DSL), the Access Node\n      provides DSL signal termination and is referred\
    \ to as a DSL Access\n      Multiplexer (DSLAM).\n   Network Access Server (NAS):\
    \  [RFC5851] Network element that\n      aggregates subscriber traffic from a\
    \ number of Access Nodes.  The\n      NAS is an enforcement point for policy management\
    \ and IP QoS in\n      the access network.  It is also referred to as a Broadband\
    \ Network\n      Gateway (BNG) or Broadband Remote Access Server (BRAS).\n   Home\
    \ Gateway (HGW):  Network element that connects subscriber devices\n      to the\
    \ Access Node and the access network.  In the case of DSL,\n      the Home Gateway\
    \ is a DSL network termination that may operate\n      either as a layer 2 bridge\
    \ or as a layer 3 router.  In the latter\n      case, such a device is also referred\
    \ to as a Routing Gateway (RG).\n   ANCP agent:  A logical entity that implements\
    \ ANCP in the Access Node\n      (AN-side) or NAS (NAS-side).\n   Access Node\
    \ control adjacency:  (modified from [RFC5851]) The\n      relationship between\
    \ the AN-side ANCP agent and the NAS-side ANCP\n      agent for the purpose of\
    \ exchanging Access Node Control Protocol\n      messages.  The adjacency may\
    \ be either up or down, depending on\n      the result of the Access Node Control\
    \ adjacency protocol\n      operation.\n   ANCP capability:  A specific set of\
    \ ANCP messages, message content,\n      and procedures required to implement\
    \ a specific use case or set of\n      use cases.  Some ANCP capabilities are\
    \ applicable to just one\n      access technology while others are technology\
    \ independent.  The\n      capabilities applicable to a given ANCP adjacency are\
    \ negotiated\n      during adjacency startup.\n   Type-Length-Value (TLV):  A\
    \ data structure consisting of a 16-bit\n      type field, a sixteen-bit length\
    \ field, and a variable-length\n      value field padded to the nearest 32-bit\
    \ word boundary, as\n      described in Section 3.6.2.  The value field of a TLV\
    \ can contain\n      other TLVs.  An IANA registry is maintained for values of\
    \ the ANCP\n      TLV Type field.\n   Net data rate:  [RFC5851] Defined by ITU-T\
    \ G.993.2 [G.993.2], Section\n      3.39, i.e., the portion of the total data\
    \ rate that can be used to\n      transmit user information (e.g., ATM cells or\
    \ Ethernet frames).\n      It excludes overhead that pertains to the physical\
    \ transmission\n      mechanism (e.g., trellis coding in the case of DSL).  It\
    \ includes\n      TPS-TC (Transport Protocol Specific - Transmission Convergence)\n\
    \      encapsulation; this is zero for ATM encapsulation and non-zero for\n  \
    \    64/65 encapsulation.\n   Line rate:  [RFC5851] Defined by ITU-T G.993.2.\
    \  It contains the\n      complete overhead including Reed-Solomon and trellis\
    \ coding.\n   DSL multi-pair bonding:  Method for bonding (or aggregating) multiple\n\
    \      xDSL access lines into a single bidirectional logical link,\n      henceforth\
    \ referred to in this document as \"DSL bonded circuit\".\n      DSL \"multi-pair\"\
    \ bonding allows an operator to combine the data\n      rates on two or more copper\
    \ pairs, and deliver the aggregate data\n      rate to a single customer.  ITU-T\
    \ recommendations G.998.1\n      [G.998.1] and G.998.2 [G.998.2], respectively,\
    \ describe ATM- and\n      Ethernet-based multi-pair bonding.\n"
- title: 2.   Broadband Access Aggregation
  contents:
  - '2.   Broadband Access Aggregation

    '
- title: 2.1.  ATM-Based Broadband Aggregation
  contents:
  - "2.1.  ATM-Based Broadband Aggregation\n   The end-to-end DSL network consists\
    \ of network service provider (NSP)\n   and application service provider (ASP)\
    \ networks, regional/access\n   network, and customer premises network.  Figure\
    \ 2 shows ATM broadband\n   access network components.\n   The regional/access\
    \ network consists of the regional network, Network\n   Access Server (NAS), and\
    \ the access network as shown in Figure 2.\n   Its primary function is to provide\
    \ end-to-end transport between the\n   customer premises and the NSP or ASP.\n\
    \   The Access Node terminates the DSL signal.  It may be in the form of\n   a\
    \ DSLAM in the central office, a remote DSLAM, or a Remote Access\n   Multiplexer\
    \ (RAM).  The Access Node is the first point in the network\n   where traffic\
    \ on multiple DSL access lines will be aggregated onto a\n   single network.\n\
    \   The NAS performs multiple functions in the network.  The NAS is the\n   aggregation\
    \ point for subscriber traffic.  It provides aggregation\n   capabilities (e.g.,\
    \ IP, PPP, ATM) between the Regional/Access Network\n   and the NSP or ASP.  These\
    \ include traditional ATM-based offerings\n   and newer, more native IP-based\
    \ services.  This includes support for\n   Point-to-Point Protocol over ATM (PPPoA)\
    \ and PPP over Ethernet\n   (PPPoE), as well as direct IP services encapsulated\
    \ over an\n   appropriate layer 2 transport.\n   Beyond aggregation, the NAS is\
    \ also the enforcement point for policy\n   management and IP QoS in the regional/access\
    \ networks.  To allow IP\n   QoS support over an existing non-IP-aware layer 2\
    \ access network\n   without using multiple layer 2 QoS classes, a mechanism based\
    \ on\n   hierarchical scheduling is used.  This mechanism, defined in\n   [TR-059],\
    \ preserves IP QoS over the ATM network between the NAS and\n   the Routing Gateway\
    \ (RG) at the edge of the subscriber network, by\n   carefully controlling downstream\
    \ traffic in the NAS, so that\n   significant queuing and congestion do not occur\
    \ farther down the ATM\n   network.  This is achieved by using a Diffserv-aware\
    \ hierarchical\n   scheduler in the NAS that will account for downstream trunk\n\
    \   bandwidths and DSL synchronization rates.\n   [RFC5851] provides detailed\
    \ definitions of the functions of each\n   network element in the broadband reference\
    \ architecture.\n                              Access                   Customer\n\
    \                       <--- Aggregation -->  <------- Premises ------->\n   \
    \                           Network                   Network\n              \
    \         +------------------+ +--------------------------+\n   +---------+  \
    \ +---+ | +-----+ +------+ | |+-----+ +---+ +---------+ |\n"
- title: NSP|         | +-|NAS|-| |ATM  |-|Access| --||DSL  |-|HGW|-|Subscriber||
  contents:
  - 'NSP|         | +-|NAS|-| |ATM  |-|Access| --||DSL  |-|HGW|-|Subscriber||

    '
- title: '---+ Regional| | +---+ | +-----+ | Node | | ||Modem| +---+ |Devices   ||'
  contents:
  - "---+ Regional| | +---+ | +-----+ | Node | | ||Modem| +---+ |Devices   ||\n  \
    \ |Broadband| | +---+ |         +------+ | |+-----+       +----------+|\n"
- title: ASP|Network  |-+-|NAS| +--------------|---+ +--------------------------+
  contents:
  - 'ASP|Network  |-+-|NAS| +--------------|---+ +--------------------------+

    '
- title: '---+         | | +---+                |     +--------------------------+'
  contents:
  - "---+         | | +---+                |     +--------------------------+\n  \
    \ |         | | +---+                |     |+-----+ +---+ +----------+|\n   +---------+\
    \ +-|NAS|                +-----|| DSL |-|HGW|-|Subscriber||\n                \
    \ +---+                      ||Modem| +---+ |Devices   ||\n                  \
    \                          |+-----+       +----------+|\n                    \
    \                        +--------------------------+\n HGW: Home Gateway\n NAS:\
    \ Network Access Server\n               Figure 2: ATM Broadband Aggregation Topology\n"
- title: 2.2.  Ethernet-Based Broadband Aggregation
  contents:
  - "2.2.  Ethernet-Based Broadband Aggregation\n   The Ethernet aggregation network\
    \ architecture builds on the Ethernet\n   bridging/switching concepts defined\
    \ in IEEE 802.  The Ethernet\n   aggregation network provides traffic aggregation,\
    \ class of service\n   distinction, and customer separation and traceability.\
    \  VLAN tagging,\n   defined in [IEEE802.1Q] and enhanced by [IEEE802.1ad], is\
    \ used as the\n   standard virtualization mechanism in the Ethernet aggregation\n\
    \   network.  The aggregation devices are \"provider edge bridges\" defined\n\
    \   in [IEEE802.1ad].\n   Stacked VLAN tags provide one possible way to create\
    \ an equivalent of\n   \"virtual paths\" and \"virtual circuits\" in the aggregation\
    \ network.\n   The \"outer\" VLAN can be used to create a form of \"virtual path\"\
    \n   between a given DSLAM and a given NAS.  \"Inner\" VLAN tags create a\n  \
    \ form of \"virtual circuit\" on a per-DSL-line basis.  This is the 1:1\n   VLAN\
    \ allocation model.  An alternative model is to bridge sessions\n   from multiple\
    \ subscribers behind a DSLAM into a single VLAN in the\n   aggregation network.\
    \  This is the N:1 VLAN allocation model.  Section\n   1.6 of [TR-101] provides\
    \ brief definitions of these two models, while\n   Section 2.5.1 describes them\
    \ in more detail.\n"
- title: 3.  Access Node Control Protocol -- General Aspects
  contents:
  - "3.  Access Node Control Protocol -- General Aspects\n   This section specifies\
    \ aspects of the Access Node Control Protocol\n   (ANCP) that are generally applicable.\n"
- title: 3.1.  Protocol Version
  contents:
  - "3.1.  Protocol Version\n   ANCP messages contain an 8-bit protocol version field.\
    \  For the\n   protocol version specified in this document, the value of that\
    \ field\n   MUST be set to 50.\n"
- title: 3.2.  ANCP Transport
  contents:
  - "3.2.  ANCP Transport\n   This document specifies the use of TCP / IPsec+IKEv2\
    \ / IP for\n   transport of ANCP messages.  For further discussion of the use\
    \ of\n   IPsec and IKEv2, see Section 11.  The present section deals with the\n\
    \   TCP aspects.  Other specifications may introduce additional\n   transports\
    \ in the future.\n      In the case of ATM access, a separate permanent virtual\
    \ circuit\n      (PVC) that is a control channel and is capable of transporting\
    \ IP\n      MAY be configured between the NAS and the AN for ANCP messages.\n\
    \      In the case of an Ethernet access/aggregation network, a typical\n    \
    \  practice is to send the Access Node Control Protocol messages over\n      a\
    \ dedicated Ethernet virtual LAN (VLAN) using a separate VLAN\n      identifier\
    \ (VLAN ID).\n   When transported over TCP, ANCP messages MUST use an encapsulation\n\
    \   consisting of a 4-byte header field prepended to the ANCP message as\n   shown\
    \ in Figure 3.\n       0                   1                   2             \
    \      3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |    Identifier (0x880C)        |           Length              |\n   \
    \   |-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      ~   \
    \                      ANCP Message                          ~\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \           Figure 3: Encapsulation of ANCP Messages over TCP/IP\n   The fields\
    \ of the encapsulating header are as follows:\n   Identifier (16 bits):  This\
    \ identifies a GSMP or ANCP message.  It\n      MUST be set to 0x880C.\n   Length\
    \ (16 bits):  Total length of the ANCP message in bytes, not\n      including\
    \ the 4-byte encapsulating header.\n   The Access Node MUST initiate the TCP session\
    \ to the NAS, using\n   destination port 6068.\n      This is necessary to avoid\
    \ static address provisioning on the NAS\n      for all the ANs that are being\
    \ served by the NAS.  It is easier to\n      configure a given AN with the single\
    \ IP address of the NAS that\n      serves the AN.\n   The NAS MUST listen on\
    \ port 6068 for incoming connections from the\n   Access Nodes.\n   In the event\
    \ of an ANCP transport protocol failure, all pending ANCP\n   messages destined\
    \ to the disconnected recipient SHOULD be discarded\n   until the transport connection\
    \ is re-established.\n"
- title: 3.3.  Encoding of Text Fields
  contents:
  - "3.3.  Encoding of Text Fields\n   In ANCP, all text fields use UTF-8 encoding\
    \ [RFC3629].  Note that US-\n   ASCII characters have the same representation\
    \ when coded as UTF-8 as\n   they do when coded according to [US_ASCII].\n   When\
    \ extracting text fields from a message, the ANCP agent MUST NOT\n   assume that\
    \ the fields are zero-terminated.\n"
- title: 3.4.  Treatment of Reserved and Unused Fields
  contents:
  - "3.4.  Treatment of Reserved and Unused Fields\n   ANCP messages contain a number\
    \ of fields that are unused or reserved.\n   Some fields are always unused (typically\
    \ because they were inherited\n   from GSMPv3 but are not useful in the ANCP context).\
    \  Others are\n   reserved in the current specification, but are provided for\n\
    \   flexibility in future extensions to ANCP.  Both reserved and unused\n   fields\
    \ MUST be set to zeroes by the sender and MUST be ignored by the\n   receiver.\n\
    \   Unused bits in a flag field are shown in figures as 'x'.  The above\n   requirement\
    \ (sender set to zero, receiver ignore) applies to such\n   unused bits.\n"
- title: 3.5.  The ANCP Adjacency Protocol
  contents:
  - "3.5.  The ANCP Adjacency Protocol\n   ANCP uses the adjacency protocol to synchronize\
    \ the NAS and Access\n   Nodes and maintain the ANCP session.  After the TCP connection\
    \ is\n   established, adjacency protocol messages MUST be exchanged as\n   specified\
    \ in this section.  ANCP messages other than adjacency\n   protocol messages MUST\
    \ NOT be sent until the adjacency protocol has\n   achieved synchronization.\n"
- title: 3.5.1.  ANCP Adjacency Message Format
  contents:
  - "3.5.1.  ANCP Adjacency Message Format\n   The ANCP adjacency message format is\
    \ shown in Figure 4 below.\n       0                   1                   2 \
    \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Version   | Message Type  |     Timer     |M|     Code    |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                          Sender Name                          |\n      +   \
    \                            +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |      \
    \                         |                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n      |                         Receiver Name\
    \                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                          Sender Port                          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                         Receiver Port                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | PType |P Flag |               Sender Instance                 |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ Partition ID  |              Receiver Instance                |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Reserved      | # of Caps     | Total Length                  |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      ~   \
    \                Capability Fields                           ~\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 4: ANCP Adjacency Message Format\n   The fields of the\
    \ ANCP adjacency message are as follows:\n   Version (8 bits):  ANCP version,\
    \ which is subject to negotiation.\n      This is the key parameter by means of\
    \ which ANCP messages can be\n      distinguished from GSMP messages received\
    \ over the same port.\n   Message Type (8 bits):  Always has value 10 (adjacency\
    \ protocol).\n   Timer (8 bits):  The Timer field is used to negotiate the timer\
    \ value\n      used in the adjacency protocol with the peer.  The timer specifies\n\
    \      the nominal time between periodic adjacency protocol messages.  It\n  \
    \    is a constant for the duration of an ANCP session.  The Timer\n      field\
    \ is specified in units of 100 ms, with a default value of 250\n      (i.e., 25\
    \ seconds).\n   M flag (1 bit):  Used in the SYN message to prevent the NAS from\n\
    \      synchronizing with another NAS and the AN from synchronizing with\n   \
    \   another AN.  In the SYN message, it is always set to 1 by the NAS\n      and\
    \ to 0 by the AN.  In other adjacency message types, it is\n      always set to\
    \ 0 by the sender and ignored by the receiver.\n   Code (7 bits):  The adjacency\
    \ protocol message type.  It MUST have\n      one of the following values:\n \
    \        Code = 1: SYN;\n         Code = 2: SYNACK;\n         Code = 3: ACK;\n\
    \         Code = 4: RSTACK.\n   Sender Name (48 bits):  For the SYN, SYNACK, and\
    \ ACK messages, is the\n      identifier of the entity sending the message.  The\
    \ Sender Name is\n      a 48-bit quantity that is unique within the operational\
    \ context of\n      the device.  A 48-bit IEEE 802 Media Access Control (MAC)\
    \ address,\n      if available, may be used for the Sender Name.  If the Ethernet\n\
    \      encapsulation is used, the Sender Name MUST be the Source Address\n   \
    \   from the MAC header.  For the RSTACK message, the Sender Name\n      field\
    \ is set to the value of the Receiver Name field from the\n      incoming message\
    \ that caused the RSTACK message to be generated.\n   Receiver Name (48 bits)\
    \  For the SYN, SYNACK, and ACK messages, is\n      the name of the entity that\
    \ the sender of the message believes is\n      at the far end of the link.  If\
    \ the sender of the message does not\n      know the name of the entity at the\
    \ far end of the link, this field\n      SHOULD be set to zero.  For the RSTACK\
    \ message, the Receiver Name\n      field is set to the value of the Sender Name\
    \ field from the\n      incoming message that caused the RSTACK message to be\
    \ generated.\n   Sender Port (32 bits):  For the SYN, SYNACK, and ACK messages,\
    \ is the\n      local port number of the link across which the message is being\n\
    \      sent.  For the RSTACK message, the Sender Port field is set to the\n  \
    \    value of the Receiver Port field from the incoming message that\n      caused\
    \ the RSTACK message to be generated.\n   Receiver Port (32 bits):  For the SYN,\
    \ SYNACK, and ACK messages, is\n      what the sender believes is the local port\
    \ number for the link,\n      allocated by the entity at the far end of the link.\
    \  If the sender\n      of the message does not know the port number at the far\
    \ end of the\n      link, this field SHOULD be set to zero.  For the RSTACK message,\n\
    \      the Receiver Port field is set to the value of the Sender Port\n      field\
    \ from the incoming message that caused the RSTACK message to\n      be generated.\n\
    \   PType (4 bits):  PType is used to specify if partitions are used and\n   \
    \   how the Partition ID is negotiated.\n         Type of partition being requested:\n\
    \         0 - no partition;\n         1 - fixed partition request;\n         2\
    \ - fixed partition assigned.\n   P Flag (4 bits):  Used to indicate the type\
    \ of partition request.\n         1 - new adjacency;\n         2 - recovered adjacency.\n\
    \      In case of a conflict between the peers' views of the value of the\n  \
    \    P Flag, the lower value is used.\n   Sender Instance (24 bits):  For the\
    \ SYN, SYNACK, and ACK messages, is\n      the sender's instance number for the\
    \ link to the peer.  It is used\n      to detect when the link comes back up after\
    \ going down or when the\n      identity of the entity at the other end of the\
    \ link changes.  The\n      instance number is a 24-bit number that is guaranteed\
    \ to be unique\n      within the recent past and to change when the link or node\
    \ comes\n      back up after going down.  Zero is not a valid instance number.\n\
    \      For the RSTACK message, the Sender Instance field is set to the\n     \
    \ value of the Receiver Instance field from the incoming message\n      that caused\
    \ the RSTACK message to be generated.\n   Partition ID (8 bits):  Field used to\
    \ associate the message with a\n      specific partition of the AN.  The value\
    \ of this field is\n      negotiated during the adjacency procedure.  The AN makes\
    \ the final\n      decision, but will consider a request from the NAS.  If the\
    \ AN\n      does not support partitions, the value of this field MUST be 0.\n\
    \      Otherwise, it MUST be non-zero.\n   Receiver Instance (24 bits):  For the\
    \ SYN, SYNACK, and ACK messages,\n      is what the sender believes is the current\
    \ instance number for the\n      link, allocated by the entity at the far end\
    \ of the link.  If the\n      sender of the message does not know the current\
    \ instance number at\n      the far end of the link, this field SHOULD be set\
    \ to zero.  For\n      the RSTACK message, the Receiver Instance field is set\
    \ to the\n      value of the Sender Instance field from the incoming message that\n\
    \      caused the RSTACK message to be generated.\n   Reserved (8 bits):  Reserved\
    \ for use by a future version of this\n      specification.\n   # of Caps (8 bits):\
    \  Indicates the number of Capability fields that\n      follow.\n   Total Length\
    \ (16 bits):  Indicates the total number of bytes occupied\n      by the Capability\
    \ fields that follow.\n   Capability Fields:  Each Capability field indicates\
    \ one ANCP\n      capability supported by the sender of the adjacency message.\n\
    \      Negotiation of a common set of capabilities to be supported within\n  \
    \    the ANCP session is described below.  The detailed format of a\n      Capability\
    \ field is shown in Figure 5 and described below.\n       0                  \
    \ 1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Capability Type           |   Capability Length           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      ~   \
    \                                                            ~\n      ~      \
    \             Capability Data                             ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                        Figure 5: Capability Field\n   The sub-fields of this\
    \ structure are as follows:\n   Capability Type (16 bits):  Indicates the specific\
    \ capability\n      supported.  An IANA registry exists for values of this sub-field.\n\
    \      The values specified by this document are listed below.\n   Capability\
    \ Length (16 bits):  The number of bytes of data contained\n      in the Capability\
    \ Data sub-field, excluding padding.  If the\n      definition of a particular\
    \ capability includes no capability data,\n      the value of the Capability Length\
    \ sub-field is zero.\n   Capability Data (as indicated by Capability Length):\
    \  Contains data\n      associated with the capability as specified for that capability.\n\
    \      If the definition of a particular capability includes no\n      capability\
    \ data, the Capability Data sub-field is absent (has zero\n      length).  Otherwise,\
    \ the Capability Data sub-field MUST be padded\n      with zeroes as required\
    \ to terminate on a 4-byte word boundary.\n      The possibility of specifying\
    \ capability data provides the\n      flexibility to advertise more than the mere\
    \ presence or absence of\n      a capability if needed.\n   The following capabilities\
    \ are defined for ANCP as applied to DSL\n   access:\n   o  Capability Type: DSL\
    \ Topology Discovery = 0x01\n         Access technology: DSL\n         Length\
    \ (in bytes): 0\n         Capability Data: NULL\n      For the detailed protocol\
    \ specification of this capability, see\n      Section 6.\n   o  Capability Type:\
    \ DSL Line Configuration = 0x02\n         Access technology: DSL\n         Length\
    \ (in bytes): 0\n         Capability Data: NULL\n      For the detailed protocol\
    \ specification of this capability, see\n      Section 7.\n   o  Capability Type:\
    \ DSL Remote Line Connectivity Testing = 0x04\n         Access technology: DSL\n\
    \         Length (in bytes): 0\n         Capability Data: NULL\n      For the\
    \ detailed protocol specification of this capability, see\n      Section 8.\n\
    \   In addition to the adjacency messages whose format is shown in\n   Figure\
    \ 6, ANCP adjacency procedures use the Adjacency Update message\n   (Figure 6)\
    \ to inform other NASs controlling the same AN partition\n   when a particular\
    \ NAS joins or loses an adjacency with that\n   partition.\n       0         \
    \          1                   2                   3\n       0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |    Version    | Message Type  | Result|        Code           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ Partition ID  |            Transaction Identifier             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |I|      SubMessage Number      |           Length              |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \            Figure 6: The Adjacency Update Message\n   The Adjacency Update message\
    \ is identical to the general ANCP message\n   header described in Section 3.6,\
    \ but the field settings are in part\n   specific to the Adjacency Update message.\
    \  The fields in this message\n   are as follows:\n   Version (8 bits):  The ANCP\
    \ version negotiated and running in this\n      adjacency.\n   Message Type (8\
    \ bits):  Always 85.\n   Result (4 bits):  Set to Ignore (0).\n   Code (12 bits):\
    \  Set to the total number of adjacencies currently\n      established on this\
    \ partition, from the point of view of the AN.\n   Partition ID (8 bits):  The\
    \ partition identifier of the partition for\n      which this notification is\
    \ being sent.\n   Transaction Identifier (24 bits):  MUST be set to 0.\n   I (1\
    \ bit), SubMessage number (15 bits):  Set as described in\n      Section 3.6.1.7.\n\
    \   Length (16 bits):  Set as described in Section 3.6.1.8.\n"
- title: 3.5.2.  ANCP Adjacency Procedures
  contents:
  - '3.5.2.  ANCP Adjacency Procedures

    '
- title: 3.5.2.1.  Overview
  contents:
  - "3.5.2.1.  Overview\n   The ANCP adjacency protocol operates symmetrically between\
    \ the NAS\n   and the AN.  In the absence of errors or race conditions, each peer\n\
    \   sends a SYN message, receives a SYNACK message in acknowledgement,\n   and\
    \ completes the establishment of the adjacency by sending an ACK\n   message.\
    \  Through this exchange, each peer learns the values of the\n   Name, Port, and\
    \ Instance parameters identifying the other peer, and\n   the two peers negotiate\
    \ the values of the Version, Timer, P Flag, and\n   Partition ID parameters and\
    \ the set of capabilities that the\n   adjacency will support.\n   Once the adjacency\
    \ has been established, its liveness is periodically\n   tested.  The peers engage\
    \ in an ACK message exchange at a frequency\n   determined by the negotiated value\
    \ of the Timer field.\n   If an inconsistency, loss of contact, or protocol violation\
    \ is\n   detected, the detecting peer can force a restart of the\n   synchronization\
    \ process by sending an RSTACK message to the other\n   end.\n   Once an adjacency\
    \ has been established, if more than one NAS has\n   established an adjacency\
    \ to the same partition, then the AN sends an\n   Adjacency Update message to\
    \ each such NAS to let it know how many\n   established adjacencies the partition\
    \ currently supports.  Similarly,\n   if an adjacency is lost, the AN sends an\
    \ Adjacency Update message to\n   each of the remaining adjacent NASs to let them\
    \ know about the change\n   in status.\n"
- title: 3.5.2.2.  Adjacency Protocol State Machine
  contents:
  - "3.5.2.2.  Adjacency Protocol State Machine\n   The adjacency protocol is described\
    \ by the following rules and state\n   tables.  It begins with the sending of\
    \ a SYN by each end as soon as\n   the transport connection has been established.\
    \  If at any point the\n   operations A, B, C, or \"Verify Adjacent State\" defined\
    \ below detect a\n   mismatch, a log SHOULD be generated, identifying the fields\
    \ concerned\n   and the expected and received values for each.\n   The rules and\
    \ state tables use the following operations:\n   o  The \"Record Adjacency State\"\
    \ operation is defined in\n      Section 3.5.2.3.2.\n   o  The \"Verify Adjacency\
    \ State\" operation consists of verifying that\n      the contents of the incoming\
    \ SYNACK message match the adjacency\n      state values previously recorded.\n\
    \   o  The procedure \"Reset the link\" is defined as:\n      1.  Generate a new\
    \ instance number for the link.\n      2.  Delete the peer verifier (set to zero\
    \ the values of Sender\n          Instance, Sender Port, and Sender Name previously\
    \ stored by\n          the \"Record Adjacency State\" operation).\n      3.  Send\
    \ a SYN message (Section 3.5.2.3.1).\n      4.  Enter the SYNSENT state.\n   o\
    \  The state tables use the following Boolean terms and operators.\n      A. \
    \ The Sender Instance in the incoming message matches the value\n          stored\
    \ from a previous message by the \"Record Adjacency State\"\n          operation.\n\
    \      B.  The Sender Instance, Sender Port, Sender Name, and Partition\n    \
    \      ID fields in the incoming message match the values stored from\n      \
    \    a previous message by the \"Record Adjacency State\" operation.\n      C.\
    \  The Receiver Instance, Receiver Port, Receiver Name, and\n          Partition\
    \ ID fields in the incoming message match the values\n          of the Sender\
    \ Instance, Sender Port, Sender Name, and\n          Partition ID currently sent\
    \ in outgoing SYN, SYNACK, and ACK\n          messages, except that the NAS always\
    \ accepts the Partition ID\n          value presented to it in a SYN or SYNACK\
    \ message.\n         \"&&\" Represents the logical AND operation.\n         \"\
    ||\" Represents the logical OR operation.\n         \"!\"  Represents the logical\
    \ negation (NOT) operation.\n   o  A timer is required for the periodic generation\
    \ of SYN, SYNACK,\n      and ACK messages.  The value of the timer is negotiated\
    \ in the\n      Timer field.  The period of the timer is unspecified, but a value\n\
    \      of 25 seconds is suggested.  Note that since ANCP uses a reliable\n   \
    \   transport protocol, the timer is unlikely to expire in any state\n      other\
    \ than ESTAB.\n      There are two independent events: the timer expires, and\
    \ a packet\n      arrives.  The processing rules for these events are:\n     \
    \    Timer Expires: Reset Timer\n            If state = SYNSENT Send SYN\n   \
    \         If state = SYNRCVD Send SYNACK\n            If state = ESTAB Send ACK\n\
    \         Packet Arrives:\n            If incoming message is an RSTACK:\n   \
    \            If (A && C && !SYNSENT) Reset the link\n               Else discard\
    \ the message.\n            If incoming message is a SYN, SYNACK, or ACK:\n  \
    \             Response defined by the following state tables.\n            If\
    \ incoming message is any other ANCP message and state !=\n            ESTAB:\n\
    \               Discard incoming message.\n               If state = SYNSENT Send\
    \ SYN (Note 1)\n               If state = SYNRCVD Send SYNACK (Note 1)\n     \
    \    Note 1: No more than two SYN or SYNACK messages should be sent\n        \
    \ within any time period of length defined by the timer.\n   o  State synchronization\
    \ across a link is considered to be achieved\n      when the protocol reaches\
    \ the ESTAB state.  All ANCP messages,\n      other than adjacency protocol messages,\
    \ that are received before\n      synchronization is achieved will be discarded.\n"
- title: 3.5.2.2.1.  State Tables
  contents:
  - "3.5.2.2.1.  State Tables\n    State: SYNSENT\n   +===================================================================+\n\
    \   |    Condition    |                Action               | New State |\n  \
    \ +=================+=====================================+===========+\n   |\
    \   SYNACK && C   |  Update Peer Verifier; Send ACK     |   ESTAB   |\n   +-----------------+-------------------------------------+-----------+\n\
    \   |   SYNACK && !C  |            Send RSTACK              |  SYNSENT  |\n  \
    \ +-----------------+-------------------------------------+-----------+\n   |\
    \       SYN       |  Update Peer Verifier; Send SYNACK  |  SYNRCVD  |\n   +-----------------+-------------------------------------+-----------+\n\
    \   |       ACK       |            Send RSTACK              |  SYNSENT  |\n  \
    \ +===================================================================+\n    State:\
    \ SYNRCVD\n   +===================================================================+\n\
    \   |    Condition    |                Action               | New State |\n  \
    \ +=================+=====================================+===========+\n   |\
    \   SYNACK && C   |  Verify Adjacency State; Send ACK   |   ESTAB   |\n   +-----------------+-------------------------------------+-----------+\n\
    \   |   SYNACK && !C  |            Send RSTACK              |  SYNRCVD  |\n  \
    \ +-----------------+-------------------------------------+-----------+\n   |\
    \       SYN       | Record Adjacency State; Send SYNACK |  SYNRCVD  |\n   +-----------------+-------------------------------------+-----------+\n\
    \   |  ACK && B && C  |              Send ACK               |   ESTAB   |\n  \
    \ +-----------------+-------------------------------------+-----------+\n   |\
    \ ACK && !(B && C)|            Send RSTACK              |  SYNRCVD  |\n   +===================================================================+\n\
    \    State: ESTAB\n   +===================================================================+\n\
    \   |    Condition    |                Action               | New State |\n  \
    \ +=================+=====================================+===========+\n   |\
    \  SYN || SYNACK  |           Send ACK (Note 2)         |   ESTAB   |\n   +-----------------+-------------------------------------+-----------+\n\
    \   |  ACK && B && C  |           Send ACK (Note 3)         |   ESTAB   |\n  \
    \ +-----------------+-------------------------------------+-----------+\n   |\
    \ ACK && !(B && C)|              Send RSTACK            |   ESTAB   |\n   +===================================================================+\n\
    \   Note 2: No more than two ACKs should be sent within any time period\n   of\
    \ length defined by the timer.  Thus, one ACK MUST be sent every\n   time the\
    \ timer expires.  In addition, one further ACK may be sent\n   between timer expirations\
    \ if the incoming message is a SYN or SYNACK.\n   This additional ACK allows the\
    \ adjacency protocol to reach\n   synchronization more quickly.\n   Note 3: No\
    \ more than one ACK should be sent within any time period of\n   length defined\
    \ by the timer.\n"
- title: 3.5.2.3.  The Adjacency Protocol SYN Message
  contents:
  - '3.5.2.3.  The Adjacency Protocol SYN Message

    '
- title: 3.5.2.3.1.  Action by the Sender
  contents:
  - "3.5.2.3.1.  Action by the Sender\n   The SYN message is sent in accordance with\
    \ the state tables just\n   described.  The sender sets the individual fields\
    \ as follows:\n   Version:  SHOULD be set to the highest version of ANCP that\
    \ the\n      sender supports.\n   Message Type:  MUST be set to 10.\n   Timer:\
    \  SHOULD be set to the value configured in the AN or NAS\n      sending the message.\n\
    \   M Flag:  MUST be set to 1 by the NAS, and 0 by the AN.\n   Code:  MUST be\
    \ set to 1 (SYN).\n   Sender Name:  Set as described in Section 3.5.1.\n   Receiver\
    \ Name:  SHOULD be set to 0.\n   Sender Port:  Set as described in Section 3.5.1.\n\
    \   Receiver Port:  SHOULD be set to 0.\n   PType:  Set according to the following\
    \ rules:\n         Settings by the AN:\n            0 - the AN does not support\
    \ partitions;\n            2 - the value of Partition ID contained in this message\
    \ is\n            assigned to the current partition.\n         Settings by the\
    \ NAS:\n            0 - the NAS leaves the decision on partitioning to the AN\n\
    \            (RECOMMENDED setting);\n            1 - the NAS requests that the\
    \ AN use the value of Partition\n            ID contained in this message for\
    \ the current partition.  The\n            NAS MAY use this setting even if it\
    \ has already received a\n            SYN message from the AN, provided that the\
    \ AN has indicated\n            support for partitions.  The NAS MUST be prepared\
    \ to use\n            whatever value it receives in a subsequent SYN or SYNACK\n\
    \            message, even if this differs from the requested value.\n   P Flag:\
    \  Set to the mode of adjacency setup (new adjacency vs.\n      recovered adjacency)\
    \ requested by the sender.  Warning: setting P\n      Flag=1 runs the risk of\
    \ state mismatch because ANCP does not\n      provide the means for the NAS to\
    \ audit the current state of the\n      AN.\n   Sender Instance:  Set as described\
    \ in Section 3.5.1.\n   Partition ID:  MUST be set to 0 if PType=0; otherwise,\
    \ set to the\n      assigned or requested partition identifier value.\n   Receiver\
    \ Instance:  SHOULD be set to 0.\n   # of Caps:  MUST be set to the number of\
    \ Capability fields that\n      follow.\n   Total Length:  MUST be set to the\
    \ total number of bytes in the\n      Capability fields that follow.\n   Capability\
    \ Fields:  One Capability field MUST be present for each\n      ANCP capability\
    \ for which the sender wishes to advertise support.\n"
- title: 3.5.2.3.2.  Action by the Receiver
  contents:
  - "3.5.2.3.2.  Action by the Receiver\n   Upon receiving a validly formed SYN message,\
    \ the receiver first\n   checks the value of the Version field.  If this value\
    \ is not within\n   the range of ANCP versions that the receiver supports, the\
    \ message\n   MUST be silently ignored.  Similarly, the message is silently ignored\n\
    \   if the M flag is 0 and the receiver is an AN or if the M flag is 1\n   and\
    \ the receiver is a NAS.  If these checks are passed and the\n   receiver is in\
    \ ESTAB state, it returns an ACK (as indicated by the\n   ESTAB state table in\
    \ Section 3.5.2.2.1).  The contents of the ACK\n   MUST reflect the adjacency\
    \ state as previously recorded by the\n   receiver.\n   Otherwise, the receiver\
    \ MUST perform the \"Record Adjacency State\"\n   operation by recording the following\
    \ fields:\n   Version:  The supported Version value received in the SYN message.\n\
    \      This value MUST be used for all subsequent ANCP messages sent\n      during\
    \ the life of the adjacency.\n   Timer:  The larger of the Timer value received\
    \ in the SYN message and\n      the value with which the receiver is configured.\n\
    \   Sender Name:  The value of the Sender Name field in the SYN message\n    \
    \  just received.\n   Receiver Name:  The value used by the receiver in the Sender\
    \ Name\n      field of SYN, SYNACK, and ACK messages it sends in this adjacency.\n\
    \   Sender Port:  The value of the Sender Port field in the SYN message\n    \
    \  just received.\n   Receiver Port:  The value used by the receiver in the Sender\
    \ Port\n      field of SYN, SYNACK, and ACK messages it sends in this adjacency.\n\
    \   Sender Instance:  The value of the Sender Instance field in the SYN\n    \
    \  message just received.\n   P Flag:  The lesser of the value determined by local\
    \ policy and the\n      value received in the SYN message.  That is, preference\
    \ is given\n      to \"0 - New adjacency\" if there is a conflict.\n   Partition\
    \ ID:  If the SYN receiver is the AN, this is set to 0 if the\n      AN does not\
    \ support partitions or to the non-zero value of the\n      partition identifier\
    \ it chooses to assign otherwise.  If the SYN\n      receiver is the NAS, this\
    \ is set to the value of the Partition ID\n      field copied from the SYN.\n\
    \   Receiver Instance:  The value used by the receiver in the Sender\n      Instance\
    \ field of SYN, SYNACK, and ACK messages it sends in this\n      adjacency.\n\
    \   Capabilities:  The set of ANCP capabilities that were offered in the\n   \
    \   SYN and are supported by the receiver.\n"
- title: 3.5.2.4.  The Adjacency Protocol SYNACK Message
  contents:
  - '3.5.2.4.  The Adjacency Protocol SYNACK Message

    '
- title: 3.5.2.4.1.  Action by the Sender
  contents:
  - "3.5.2.4.1.  Action by the Sender\n   The SYNACK is sent in response to a successfully\
    \ received SYN\n   message, as indicated by the state tables.  The Version, Timer,\
    \ P\n   Flag, and Partition ID fields MUST be populated with the values\n   recorded\
    \ as part of adjacency state.  The # of Caps, Total Length,\n   and Capability\
    \ fields MUST also be populated in accordance with the\n   Capabilities recorded\
    \ as part of adjacency state.  The remaining\n   fields of the SYNACK message\
    \ MUST be populated as follows:\n   Message Type:  MUST be 10.\n   M flag:  MUST\
    \ be set to 0.\n   Code:  MUST be 2 (SYNACK).\n   PType:  MUST be 0 if the Partition\
    \ ID value is 0 or 2 if the\n      Partition ID value is non-zero.\n   Sender\
    \ Name:  MUST be set to the Receiver Name value recorded as part\n      of adjacency\
    \ state.\n   Receiver Name:  MUST be set to the Sender Name value recorded as\
    \ part\n      of adjacency state.\n   Sender Port:  MUST be set to the Receiver\
    \ Port value recorded as part\n      of adjacency state.\n   Receiver Port:  MUST\
    \ be set to the Sender Port value recorded as part\n      of adjacency state.\n\
    \   Sender Instance:  MUST be set to the Receiver Instance value recorded\n  \
    \    as part of adjacency state.\n   Receiver Instance:  MUST be set to the Sender\
    \ Instance value recorded\n      as part of adjacency state.\n   If the set of\
    \ capabilities recorded in the adjacency state is empty,\n   then after sending\
    \ the SYNACK the sender MUST raise an alarm to\n   management, halt the adjacency\
    \ procedure, and tear down the TCP\n   session if it is not being used by another\
    \ adjacency.  The sender MAY\n   also terminate the IPsec security association\
    \ if no other adjacency\n   is using it.\n"
- title: 3.5.2.4.2.  Action by the Receiver
  contents:
  - "3.5.2.4.2.  Action by the Receiver\n   As indicated by the state tables, the\
    \ receiver of a SYNACK first\n   checks that the Receiver Name, Receiver Port,\
    \ and Receiver Instance\n   values match the Sender Name, Sender Port, and Sender\
    \ Instance values\n   it sent in SYN message that is being acknowledged.  The\
    \ AN also\n   checks that the PType and Partition ID match.  If any of these checks\n\
    \   fail, the receiver sends an RSTACK as described in Section 3.5.2.6.1.\n  \
    \ The receiver next checks whether the set of capabilities provided in\n   the\
    \ SYNACK is empty.  If so, the receiver MUST raise an alarm to\n   management\
    \ and halt the adjacency procedure.\n   Assuming that the SYNACK passes these\
    \ checks, two cases arise.  The\n   first possibility is that the receiver has\
    \ already recorded adjacency\n   state.  This will occur if the SYNACK is received\
    \ while the receiver\n   is in SYNRCVD state.  In this case, the Version, Timer,\
    \ Sender Name,\n   Sender Port, Sender Instance, P Flag, and capability-related\
    \ fields\n   in the SYNACK MUST match those recorded as part of adjacency state.\n\
    \   If a mismatch is detected, the receiver sends an RSTACK.  This is the\n  \
    \ \"Verify Adjacency State\" procedure shown in the SYNRCVD state table.\n   If,\
    \ on the other hand, the SYNACK is received while the receiver is\n   in SYNSENT\
    \ state, the receiver MUST record session state as described\n   in Section 3.5.2.3.2.\n\
    \   In either case, if the receiver is the NAS, it MUST accept the\n   Partition\
    \ ID value provided in the SYNACK, updating its recorded\n   adjacency state if\
    \ necessary.\n"
- title: 3.5.2.5.  The Adjacency Protocol ACK Message
  contents:
  - '3.5.2.5.  The Adjacency Protocol ACK Message

    '
- title: 3.5.2.5.1.  Actions by the Sender
  contents:
  - "3.5.2.5.1.  Actions by the Sender\n   As indicated by the state tables, the ACK\
    \ message is sent in a number\n   of different circumstances.  The main-line usages\
    \ are as a response\n   to SYNACK, leading directly to the ESTAB state, and as\
    \ a periodic\n   test of liveness once the ESTAB state has been reached.\n   The\
    \ sender MUST populate the ACK from recorded adjacency state,\n   exactly as described\
    \ in Section 3.5.2.4.1.  The only difference is\n   that Code MUST be set to 3\
    \ (ACK).\n"
- title: 3.5.2.5.2.  Actions by the Receiver
  contents:
  - "3.5.2.5.2.  Actions by the Receiver\n   The required actions by the receiver\
    \ are specified by the state\n   tables.  In addition to the checks B and C, the\
    \ receiver SHOULD\n   verify that the remaining contents of the ACK match the\
    \ recorded\n   adjacency state at the receiver.  If that check fails, the receiver\n\
    \   MUST send an RSTACK as described in Section 3.5.2.6.1.\n   Once the adjacency\
    \ has been established, either peer can initiate the\n   ACK exchange that tests\
    \ for liveness.  To meet the restrictions on\n   ACK frequency laid down in the\
    \ notes to the state tables, it is\n   desirable that only one such exchange occur\
    \ during any one interval.\n   Hence, if a peer receives an ACK when in ESTAB\
    \ state, it MUST reply\n   to that ACK as directed by the state tables, but SHOULD\
    \ NOT initiate\n   another ACK exchange in the same interval.  To meet this objective,\n\
    \   the receiver MUST reset its timer when it receives an ACK while in\n   ESTAB\
    \ state.\n      It is, of course, possible that two exchanges happen because of\n\
    \      race conditions.\n"
- title: 3.5.2.6.  The Adjacency Protocol RSTACK Message
  contents:
  - '3.5.2.6.  The Adjacency Protocol RSTACK Message

    '
- title: 3.5.2.6.1.  Action by the Sender
  contents:
  - "3.5.2.6.1.  Action by the Sender\n   The RSTACK is sent in response to various\
    \ error conditions as\n   indicated by the state tables.  In general, it leads\
    \ to a restart of\n   adjacency negotiations (although this takes a few steps\
    \ when the\n   original sender of the RSTACK is in ESTAB state).\n   As indicated\
    \ in Section 3.5.1, the Sender Name, Port, and Instance\n   fields in the RSTACK\
    \ MUST be copied from the Receiver, Name, Port,\n   and Instance fields in the\
    \ message that caused the RSTACK to be sent.\n   Similarly, the Receiver identifier\
    \ fields in the RSTACK MUST be\n   copied from the corresponding Sender identifier\
    \ fields in the message\n   that triggered the RSTACK.\n   If the sender has recorded\
    \ adjacency state, the Version, Timer,\n   PType, P Flag, Partition ID, and capability-related\
    \ fields SHOULD be\n   set based on the recorded adjacency state.  Otherwise,\
    \ they SHOULD be\n   the same as the sender would send in a SYN message.  The\
    \ Message Type\n   MUST be 10, the M flag MUST be 0, and Code MUST be 4 (RSTACK).\n"
- title: 3.5.2.6.2.  Action by the Receiver
  contents:
  - "3.5.2.6.2.  Action by the Receiver\n   The receiver of an RSTACK MAY attempt\
    \ to diagnose the problem that\n   caused the RSTACK to be generated by comparing\
    \ its own adjacency\n   state with the contents of the RSTACK.  However, the primary\
    \ purpose\n   of the RSTACK is to trigger action as prescribed by Section 3.5.2.2.\n"
- title: 3.5.2.7.  Loss of Synchronization
  contents:
  - "3.5.2.7.  Loss of Synchronization\n   Loss of synchronization MAY be declared\
    \ if after synchronization is\n   achieved:\n   o  no valid ANCP messages are\
    \ received in any period of time in\n      excess of three times the value of\
    \ the Timer field negotiated in\n      the adjacency protocol messages, or\n \
    \  o  a mismatch in adjacency state is detected.\n   In either case, the peer\
    \ detecting the condition MUST send an RSTACK\n   to the other peer, as directed\
    \ in Section 3.5.2.6.1, in order to\n   initiate resynchronization.\n   While\
    \ re-establishing synchronization with a controller, a switch\n   SHOULD maintain\
    \ its connection state, deferring the decision about\n   resetting the state until\
    \ after synchronization is re-established.\n   Once synchronization is re-established,\
    \ the decision about resetting\n   the connection state SHOULD be made based on\
    \ the negotiated value of\n   the P Flag.\n"
- title: 3.6.  ANCP General Message Formats
  contents:
  - "3.6.  ANCP General Message Formats\n   This section describes the general format\
    \ of ANCP messages other than\n   the adjacency messages.  See Figure 7.\n   \
    \    0                   1                   2                   3\n       0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |    Version    | Message Type  | Result|      Result Code      |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \ Partition ID  |            Transaction Identifier             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |I|      SubMessage Number      |           Length              |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      ~   \
    \                       Message Payload                      ~\n      |      \
    \                                                         |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                   Figure 7: ANCP General Message Format\n"
- title: 3.6.1.  The ANCP Message Header
  contents:
  - "3.6.1.  The ANCP Message Header\n   A complete explanation of the ANCP general\
    \ message header fields\n   follows.\n"
- title: 3.6.1.1.  Version Field (8 bits)
  contents:
  - "3.6.1.1.  Version Field (8 bits)\n   This field carries the version of ANCP that\
    \ was agreed upon for the\n   session during adjacency negotiation.\n"
- title: 3.6.1.2.  Message Type Field (8 bits)
  contents:
  - "3.6.1.2.  Message Type Field (8 bits)\n   This field indicates the ANCP message\
    \ type.  Message type values are\n   registered in an IANA registry.\n"
- title: 3.6.1.3.  Result Field (4 bits)
  contents:
  - "3.6.1.3.  Result Field (4 bits)\n   In request messages, the Result field indicates\
    \ the circumstances\n   under which a response is required.  ANCP specifies what\
    \ Result value\n   each request message type should have.  In responses, the Result\n\
    \   field indicates either Success (0x3) or Failure (0x4), as the case\n   may\
    \ be.\n   Ignore:  Res = 0x0 - Treat this field as a \"no operation\" and follow\n\
    \      the response procedures specified for the received message type.\n   Nack:\
    \  Res = 0x1 - Result value indicating that a response is\n      expected to the\
    \ request only in cases of failure caused during the\n      processing of the\
    \ message contents or of the contained\n      directive(s).\n   AckAll:  Res =\
    \ 0x2 - Result value indicating that a response to the\n      message is requested\
    \ in all cases.\n   Success:  Res = 0x3 - Result value indicating that this is\
    \ a response\n      and that the request was executed successfully.  The Result\
    \ Code\n      field for a successful result is typically 0, but it MAY take on\n\
    \      other values as specified for particular message types.\n   Failure:  Res\
    \ = 0x4 - Result value indicating that this is a response\n      and that the\
    \ request was not executed successfully.  The receiver\n      of the response\
    \ SHOULD take further action as indicated by the\n      Result Code value and\
    \ any diagnostic data contained in a Status-\n      Info TLV included in the response.\n"
- title: 3.6.1.4.  Result Code Field (12 bits)
  contents:
  - "3.6.1.4.  Result Code Field (12 bits)\n   This field gives further information\
    \ concerning the result in a\n   response message.  It is mostly used to pass\
    \ an error code in a\n   failure response, but it can also be used to give further\
    \ information\n   in a success response message or an event message.  In a request\n\
    \   message, the Result Code field is not used and MUST be set to 0x0 (No\n  \
    \ result).\n   A number of Result Code values are specified below.  Specification\
    \ of\n   additional Result Code values in extensions or updates to this\n   document\
    \ MUST include the following information:\n   o  Result Code value;\n   o  One-line\
    \ description;\n   o  Where condition detected (control application or ANCP agent);\n\
    \   o  Further description (if any);\n   o  Required additional information in\
    \ the response message;\n   o  Target (control application or ANCP agent at the\
    \ peer that sent\n      the original request);\n   o  Action RECOMMENDED for the\
    \ receiving ANCP agent.\n   In addition to any suggested action in the text that\
    \ follows, a count\n   of the number of times a given non-zero Result Code value\
    \ was\n   received SHOULD be provided for management.  Where an action includes\n\
    \   the re-sending of a request, a given request SHOULD NOT be re-sent\n   more\
    \ than once.\n   This document specifies the following Result Code values.\n \
    \  Result Code value: 0x2\n      *  One-line description: Invalid request message\n\
    \      *  Where condition detected: ANCP agent\n      *  Further description:\
    \ The request was a properly formed message\n         that violates the protocol\
    \ through its timing or direction of\n         transmission.  The most likely\
    \ reason for this outcome in the\n         field will be a race condition.\n \
    \     *  Required additional information in the response message: None,\n    \
    \     if the response message is of the same type as the request.  As\n      \
    \   specified in Section 4.2, if the response message is a Generic\n         Response\
    \ message.\n      *  Target: ANCP agent at the peer that sent the original request\n\
    \      *  Action RECOMMENDED for the receiving ANCP agent: The original\n    \
    \     request MAY be re-sent once only after a short delay.  Inform\n        \
    \ the control application with appropriate identification of the\n         failed\
    \ transaction if the second attempt fails or no second\n         attempt is made.\n\
    \   Result Code value: 0x6\n      *  One-line description: One or more of the\
    \ specified ports are\n         down\n      *  Where condition detected: Control\
    \ application\n      *  Further description (if any): This Result Code value indicates\n\
    \         a state mismatch between the NAS and AN control applications,\n    \
    \     possibly due to a race condition.\n      *  Required additional information\
    \ in the response message: If the\n         request identified multiple access\
    \ lines or the response is a\n         Generic Response message, then the response\
    \ MUST contain a\n         Status-Info TLV encapsulating TLV(s) containing the\
    \ line\n         identifier(s) of the access lines that are not operational.\n\
    \      *  Target: Control application at the peer that sent the original\n   \
    \      request\n      *  Action RECOMMENDED for the receiving ANCP agent: Indicate\
    \ the\n         error and forward the line identifier(s) to the control\n    \
    \     application.\n   Result Code value: 0x13\n      *  One-line description:\
    \ Out of resources\n      *  Where condition detected: ANCP protocol layer or\
    \ control\n         application\n      *  Further description (e.g., memory exhausted):\
    \ This Result Code\n         value MUST be reported only by the AN, and indicates\
    \ a\n         condition that is probably unrelated to specific access lines\n\
    \         (although it may be related to the specific request).\n      *  Required\
    \ additional information in the response message: None,\n         if the response\
    \ message is of the same type as the request.  As\n         specified in Section\
    \ 4.2, if the response message is a Generic\n         Response message.\n    \
    \  *  Target: ANCP agent at the peer that sent the original request\n      * \
    \ Action RECOMMENDED for the receiving ANCP agent: If the NAS\n         receives\
    \ this Result Code value from multiple requests for the\n         same AN in a\
    \ short interval, it SHOULD reduce the rate at which\n         it sends requests\
    \ in proportion to the rate at which requests\n         are failing with Result\
    \ Code = 19.  It MAY retry individual\n         requests.  If only a specific\
    \ request is failing with Result\n         Code = 19, the ANCP agent in the NAS\
    \ MAY request the control\n         application to decompose the request into\
    \ simpler components if\n         this is possible.\n   Result Code value: 0x51\n\
    \      *  One-line description: Request message type not implemented\n      *\
    \  Where condition detected: ANCP agent\n      *  Further description: This could\
    \ indicate a mismatch in protocol\n         version or capability state.  It is\
    \ also possible that support\n         of a specific message is optional within\
    \ some ANCP capability.\n      *  Required additional information in the response\
    \ message: None,\n         if the response message is of the same type as the\
    \ request.  As\n         specified in Section 4.2, if the response message is\
    \ a Generic\n         Response message.\n      *  Target: ANCP agent at the peer\
    \ that sent the original request\n      *  Action RECOMMENDED for the receiving\
    \ ANCP agent: If the\n         receiver of this Result Code value expects that\
    \ support of the\n         message type concerned is mandatory according to the\n\
    \         capabilities negotiated for the session, it MAY re-send the\n      \
    \   message in case the message was corrupted in transit the first\n         time.\
    \  If that fails, and use of the message type cannot be\n         avoided, the\
    \ ANCP agent MAY reset the adjacency by sending an\n         RSTACK adjacency\
    \ message as described in Section 3.5.2.6.1,\n         where Sender and Receiver\
    \ Name, Port, and Instance are taken\n         from recorded adjacency state.\
    \  If a reset does not eliminate\n         the problem, the receiving ANCP agent\
    \ SHOULD raise an alarm to\n         management and then cease to operate.\n \
    \  Result Code value: 0x53\n      *  One-line description: Malformed message\n\
    \      *  Where condition detected: ANCP agent\n      *  Further description:\
    \ This could be the result of corruption in\n         transit, or an error in\
    \ implementation at one end or the other.\n      *  Required additional information\
    \ in the response message: None,\n         if the response message is of the same\
    \ type as the request.  As\n         specified in Section 4.2, if the response\
    \ message is a Generic\n         Response message.\n      *  Target: ANCP agent\
    \ at the peer that sent the original request\n      *  Action RECOMMENDED for\
    \ the receiving ANCP agent: The request\n         SHOULD be re-sent once to eliminate\
    \ the possibility of in-\n         transit corruption.\n   Result Code value:\
    \ 0x54\n      *  One-line description: Mandatory TLV missing\n      *  Where condition\
    \ detected: ANCP agent\n      *  Further description: None\n      *  Required\
    \ additional information in the response message: The\n         response message\
    \ MUST contain a Status-Info message that\n         encapsulates an instance of\
    \ each missing mandatory TLV, where\n         the length is set to zero and the\
    \ value field is empty (i.e.,\n         only the 4-byte TLV header is present).\n\
    \      *  Target: ANCP agent at the peer that sent the original request\n    \
    \  *  Action RECOMMENDED for the receiving ANCP agent: Re-send the\n         message\
    \ with the missing TLV(s), if possible.  Otherwise,\n         report the error\
    \ to the control application with an indication\n         of the missing information\
    \ required to construct the missing\n         TLV(s).\n   Result Code value: 0x55\n\
    \      *  One-line description: Invalid TLV contents\n      *  Where condition\
    \ detected: ANCP agent\n      *  Further description: The contents of one or more\
    \ TLVs in the\n         request do not match the specifications provided for the\
    \ those\n         TLVs.\n      *  Required additional information in the response\
    \ message: The\n         response MUST contain a Status-Info TLV encapsulating\
    \ the\n         erroneous TLVs copied from the original request.\n      *  Target:\
    \ ANCP agent at the peer that sent the original request\n      *  Action RECOMMENDED\
    \ for the receiving ANCP agent: Correct the\n         error and re-send the request,\
    \ if possible.  Otherwise, report\n         the error to the control application\
    \ with an indication of the\n         erroneous information associated with the\
    \ invalid TLV(s).\n   Result Code value: 0x500\n      *  One-line description:\
    \ One or more of the specified ports do not\n         exist\n      *  Where condition\
    \ detected: Control application\n      *  Further description (if any): This may\
    \ indicate a configuration\n         mismatch between the AN and the NAS or Authentication,\n\
    \         Authorization, and Accounting (AAA).\n      *  Required additional information\
    \ in the response message: If the\n         request identified multiple access\
    \ lines or the response is a\n         Generic Response message, then the response\
    \ MUST contain a\n         Status-Info TLV encapsulating TLV(s) containing the\
    \ rejected\n         line identifier(s).\n      *  Target: Control application\
    \ at the peer that sent the original\n         request\n      *  Action RECOMMENDED\
    \ for the receiving ANCP agent: Indicate the\n         error and forward the line\
    \ identifiers to the control\n         application.\n"
- title: 3.6.1.5.  Partition ID (8 bits)
  contents:
  - "3.6.1.5.  Partition ID (8 bits)\n   The Partition ID field MUST contain the value\
    \ that was negotiated for\n   Partition ID during the adjacency procedure as described\
    \ above.\n"
- title: 3.6.1.6.  Transaction ID (24 bits)
  contents:
  - "3.6.1.6.  Transaction ID (24 bits)\n   The Transaction ID is set by the sender\
    \ of a request message to\n   associate a response message with the original request\
    \ message.\n   Unless otherwise specified for a given message type, the Transaction\n\
    \   ID in request messages MUST be set to a value in the range\n   (1, 2^24 -\
    \ 1).  When used in this manner, the Transaction ID\n   sequencing MUST be maintained\
    \ independently for each message type\n   within each ANCP adjacency.  Furthermore,\
    \ it SHOULD be incremented by\n   1 for each new message of the given type, cycling\
    \ back to 1 after\n   running the full range.  For event messages, the Transaction\
    \ ID\n   SHOULD be set to zero.\n   Unless otherwise specified, the default behavior\
    \ for all ANCP\n   responses is that the value of the Transaction ID MUST be copied\
    \ from\n   the corresponding request message.\n"
- title: 3.6.1.7.  I Flag and SubMessage Number (1 + 15 bits)
  contents:
  - "3.6.1.7.  I Flag and SubMessage Number (1 + 15 bits)\n   In GSMPv3, these provide\
    \ a mechanism for message fragmentation.\n   Because ANCP uses TCP transport,\
    \ this mechanism is unnecessary.  An\n   ANCP agent MUST set the I Flag and subMessage\
    \ Number fields to 1 to\n   signify \"no fragmentation\".\n"
- title: 3.6.1.8.  Length (16 bits)
  contents:
  - "3.6.1.8.  Length (16 bits)\n   This field MUST be set to the length of the ANCP\
    \ message in bytes,\n   including its header fields and message body but excluding\
    \ the 4-byte\n   encapsulating header defined in Section 3.2.\n"
- title: 3.6.2.  The ANCP Message Body
  contents:
  - "3.6.2.  The ANCP Message Body\n   The detailed contents of the message payload\
    \ portion of a given ANCP\n   message can vary with the capability in the context\
    \ of which it is\n   being used.  However, the general format consists of zero\
    \ or more\n   fixed fields, followed by a variable amount of data in the form\
    \ of\n   Type-Length-Value (TLV) data structures.\n   The general format of a\
    \ TLV is shown in Figure 8:\n    0                   1                   2   \
    \                3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type (IANA registered)    |          Length               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                          Value                              ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                       Figure 8: General TLV Format\n   The fields of a TLV are\
    \ defined as follows:\n   Type (16 bits):  The TLV Type is an unsigned value identifying\
    \ the\n      TLV type and nature of its contents.  An IANA registry has been\n\
    \      established for ANCP TLV Type codes.\n   Length (16 bits):  The number\
    \ of bytes of data in the Value field of\n      the TLV, excluding any padding\
    \ required to bring this TLV to a\n      4-byte word boundary (see \"Value\" below).\
    \  If a TLV contains other\n      TLVs, any padding in the contained TLVs MUST\
    \ be included in the\n      value of Length.  Depending on the specification of\
    \ the TLV, the\n      value of Length can be zero, a constant for all instances\
    \ of the\n      TLV, or a varying quantity.\n   Value (variable):  The actual\
    \ data carried by the TLV, if any.  The\n      Value field in each TLV MUST be\
    \ padded with zeroes as required to\n      align with a 4-byte word boundary.\
    \  The Value field of a TLV MAY\n      include fixed fields and/or other TLVs.\n\
    \   Unless otherwise specified, TLVs MAY be added to a message in any\n   order.\
    \  If the recipient of a message does not understand a\n   particular TLV, it\
    \ MUST silently ignore it.\n   A number of TLVs are specified in the remainder\
    \ of this document.\n"
- title: 3.7.  General Principles for the Design of ANCP Messages
  contents:
  - "3.7.  General Principles for the Design of ANCP Messages\n   ANCP allows for\
    \ two messaging constructs to support request/response\n   interaction:\n   a.\
    \  The same message type is used for both the request message and\n       the\
    \ response message.  The Result and Result Code field settings\n       are used\
    \ to differentiate between request and response messages.\n   b.  The request\
    \ and response messages use two different message\n       types.\n   The first\
    \ approach is illustrated by the protocol specifications in\n   Section 8.4, the\
    \ second by specifications in Section 6.4.  The\n   purpose of this section is\
    \ to provide more details about the second\n   approach in order to allow the\
    \ use of this messaging construct for\n   the development of additional ANCP extensions.\n\
    \   As Section 3.6 indicated, all ANCP messages other than adjacency\n   messages\
    \ share a common header format.  When the response message\n   type is different\
    \ from that of the request, the specification of the\n   request message will\
    \ typically indicate that the Result field is set\n   to Ignore (0x0) and provide\
    \ procedures indicating explicitly when the\n   receiver should generate a response\
    \ and what message type it should\n   use.\n   The Transaction ID field is used\
    \ to distinguish between multiple\n   request messages of the same type and to\
    \ associate a response message\n   to a request.  Specifications of ANCP messages\
    \ for applications not\n   requiring response correlation SHOULD indicate that\
    \ the Transaction\n   ID MUST be set to zero in requests.  Applications that require\n\
    \   response correlation SHOULD refer to the Transaction ID behavior\n   described\
    \ in Section 3.6.1.\n   The specification for a response message SHOULD indicate\
    \ in all cases\n   that the value of the Transaction Identifier MUST be set to\
    \ that of\n   the corresponding request message.  This allows the requester to\n\
    \   establish whether or not correlation is needed (by setting a non-zero\n  \
    \ or zero value for the Transaction ID).\n"
- title: 4.  Generally Useful ANCP Messages and TLVs
  contents:
  - "4.  Generally Useful ANCP Messages and TLVs\n   This section defines two messages\
    \ and a number of TLVs that could be\n   useful in multiple capabilities.  In\
    \ some cases, the content is\n   under-specified, with the intention that particular\
    \ capabilities\n   spell out the remaining details.\n"
- title: 4.1.  Provisioning Message
  contents:
  - "4.1.  Provisioning Message\n   The Provisioning message is sent by the NAS to\
    \ the AN to provision\n   information of global scope (i.e., not associated with\
    \ specific\n   access lines) on the AN.  The Provisioning message has the format\n\
    \   shown in Figure 9.  Support of the Provisioning message is OPTIONAL\n   unless\
    \ the ANCP agent claims support for a capability that requires\n   its use.\n\
    \    0                   1                   2                   3\n    0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           TCP/IP Encapsulating Header (Section 3.2)           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                ANCP General Message Header                    |\n   +  \
    \                    (Section 3.6.1)                          +\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                           TLVs                              ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \               Figure 9: Format of the Provisioning Message\n   The message header\
    \ field settings given below are REQUIRED in the\n   Provisioning message.  The\
    \ remaining message header fields MUST be\n   set as specified in Section 3.6.1.\
    \  Which TLVs to carry in the\n   Provisioning message is specified as part of\
    \ the specification of the\n   capabilities that use that message.  The Provisioning\
    \ message MAY be\n   used to carry data relating to more than one capability at\
    \ once,\n   assuming that the capabilities concerned can coexist and have all\n\
    \   been negotiated during adjacency establishment.\n   Message Type:  MUST be\
    \ set to 93.\n   Result:  MUST be set to 0x0 (Ignore).\n   Result Code:  MUST\
    \ be set to zero.\n   Transaction ID:  MUST be populated with a non-zero value\
    \ chosen in\n      the manner described in Section 3.6.1.6.\n   If the AN can\
    \ process the message successfully and accept all the\n   provisioning directives\
    \ contained in it, the AN MUST NOT send any\n   response.\n   Unless otherwise\
    \ specified for a particular capability, if the AN\n   fails to process the message\
    \ successfully it MUST send a Generic\n   Response message (Section 4.2) indicating\
    \ failure and providing\n   appropriate diagnostic information.\n"
- title: 4.2.  Generic Response Message
  contents:
  - "4.2.  Generic Response Message\n   This section defines the Generic Response\
    \ message.  The Generic\n   Response message MAY be specified as the appropriate\
    \ response to a\n   message defined in an extension to ANCP, instead of a more\
    \ specific\n   response message.  As a general guideline, specification of the\n\
    \   Generic Response message as a response is appropriate where no data\n   needs\
    \ to be returned to the peer other than a result (success or\n   failure), plus,\
    \ in the case of a failure, a code indicating the\n   reason for failure and a\
    \ limited amount of diagnostic data.\n   Depending on the particular use case,\
    \ the Generic Response message\n   MAY be sent by either the NAS or the AN.\n\
    \   Support of the Generic Response message, both as sender and as\n   receiver,\
    \ is REQUIRED for all ANCP agents, regardless of what\n   capabilities they support.\n\
    \   The AN or NAS MAY send a Generic Response message indicating a\n   failure\
    \ condition independently of a specific request before closing\n   the adjacency\
    \ as a consequence of that failure condition.  In this\n   case, the sender MUST\
    \ set the Transaction ID field in the header and\n   the Message Type field within\
    \ the Status-Info TLV to zeroes.  The\n   receiver MAY record the information\
    \ contained in the Status-Info TLV\n   for management use.\n   The format of the\
    \ Generic Response message is shown in Figure 10.\n    0                   1 \
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           TCP/IP Encapsulating Header (Section 3.2)           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                ANCP General Message Header                    |\n   +  \
    \                    (Section 3.6.1)                          +\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                Access line identifying TLV(s)                 |\n   +  \
    \              (copied from original request)                 +\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Status-Info TLV                            |\n   ~  \
    \                   (Section 4.5)                             ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   NOTE: TLVs MAY be in a different order from what is shown in this\n   figure.\n\
    \           Figure 10: Structure of the Generic Response Message\n   This document\
    \ specifies the following header fields.  The remaining\n   fields in the ANCP\
    \ general message header MUST be set as specified in\n   Section 3.6.1.\n   Message\
    \ Type:  MUST be set to 91.\n   Result:  MUST be set to 0x3 (Success) or 0x4 (Failure).\n\
    \   Result Code:  MUST be set to zero for success or an appropriate non-\n   \
    \   zero value for failure.\n   Transaction ID:  MUST be copied from the message\
    \ to which this\n      message is a response.\n   If the original request applied\
    \ to a specific access line or set of\n   lines, the TLVs identifying the line(s)\
    \ and possibly the user MUST be\n   copied into the Generic Response message at\
    \ the top level.\n   The Status-Info TLV MAY be present in a success response,\
    \ to provide\n   a warning as defined for a specific request message type.  It\
    \ MUST be\n   present in a failure response.  See Section 4.5 for a detailed\n\
    \   description of the Status-Info TLV.  The actual contents will depend\n   on\
    \ the request message type this message is responding to and the\n   value of\
    \ the Result Code field.\n   To prevent an infinite loop of error responses, if\
    \ the Generic\n   Response message is itself in error, the receiver MUST NOT generate\n\
    \   an error response in return.\n"
- title: 4.3.  Target TLV
  contents:
  - "4.3.  Target TLV\n   Type:  0x1000 to 0x1020 depending on the specific content.\
    \  Only\n      0x1000 has been assigned in this specification (see below).\n \
    \     Support of any specific variant of the Target TLV is OPTIONAL\n      unless\
    \ the ANCP agent claims support for a capability that\n      requires its use.\n\
    \   Description:  The Target TLV (0x1000 - 0x1020) is intended to be a\n     \
    \ general means to represent different types of objects.\n   Length:  Variable,\
    \ depending on the specific object type.\n   Value:  Target information as defined\
    \ for each object type.  The\n      Value field MAY consist of sub-TLVs.\n   TLV\
    \ Type 0x1000 is assigned to a variant of the Target TLV\n   representing a single\
    \ access line and encapsulating one or more sub-\n   TLVs identifying the target.\
    \  Figure 11 is an example illustrating\n   the TLV format for a single port identified\
    \ by an Access-Loop-\n   Circuit-ID TLV (0x0001) (Section 5.1.2.1).\n    0   \
    \                1                   2                   3\n    0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    TLV Type = 0x1000          |Length = Circuit-ID Length + 4 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Access-Loop-Circuit-ID=0x0001 |       Circuit-ID Length       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                  Access Loop Circuit ID                     ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \          Figure 11: Example of Target TLV for Single Access Line\n"
- title: 4.4.   Command TLV
  contents:
  - "4.4.   Command TLV\n   Type:  0x0011\n   Description:  The Command TLV (0x0011)\
    \ is intended to be a general\n      means of encapsulating one or more command\
    \ directives in a TLV-\n      oriented message.  The semantics of the command\
    \ can be specified\n      for each message type using it.  That is, the specification\
    \ of\n      each message type that can carry the Command TLV is expected to\n\
    \      define the meaning of the content of the payload, although re-use\n   \
    \   of specifications is, of course, permissible when appropriate.\n      Support\
    \ of any specific variant of the Command TLV is OPTIONAL\n      unless the ANCP\
    \ agent claims support for a capability that\n      requires its use.\n   Length:\
    \  Variable, depending on the specific contents.\n   Value:  Command information\
    \ as defined for each message type.  The\n      field MAY include sub-TLVs.  The\
    \ contents of this TLV MUST be\n      specified as one \"command\" or alternatively\
    \ a sequence of one or\n      more \"commands\", each beginning with a 1-byte\
    \ Command Code and\n      possibly including other data following the Command\
    \ Code.  An IANA\n      registry has been established for Command Code values.\
    \  This\n      document reserves the Command Code value 0 as an initial entry\
    \ in\n      the registry.\n"
- title: 4.5.  Status-Info TLV
  contents:
  - "4.5.  Status-Info TLV\n   Name:  Status-Info\n   Type:  0x0106\n   Description:\
    \  The Status-Info-TLV is intended to be a general\n      container for warning\
    \ or error diagnostics relating to commands\n      and/or requests.  It is a supplement\
    \ to the Result Code field in\n      the ANCP general header.  The specifications\
    \ for individual\n      message types MAY indicate the use of this TLV as part\
    \ of\n      responses, particularly for failures.  As mentioned above, the\n \
    \     Generic Response message will usually include an instance of the\n     \
    \ Status-Info TLV.  Support of the Status-Info TLV, both as sender\n      and\
    \ as receiver, is REQUIRED for all ANCP agents, regardless of\n      what capabilities\
    \ they support.\n   Length:  Variable, depending on the specific contents.\n \
    \  Value:  The following fixed fields.  In addition, sub-TLVs MAY be\n      appended\
    \ to provide further diagnostic information.\n      Reserved (8 bits):  See Section\
    \ 3.4 for handling of reserved\n         fields.\n      Msg Type (8 bits):  Message\
    \ Type of the request for which this TLV\n         is providing diagnostics.\n\
    \      Error Message Length (16 bits):  Number of bytes in the error\n       \
    \  message, excluding padding, but including the language tag and\n         delimiter.\
    \  This MAY be zero if no error message is provided.\n      Error Message:  Human-readable\
    \ string providing information about\n         the warning or error condition.\
    \  The initial characters of the\n         string MUST be a language tag as described\
    \ in [RFC5646],\n         terminated by a colon (\":\").  The actual text string\
    \ follows\n         the delimiter.  The field is padded at the end with zeroes\
    \ as\n         necessary to extend it to a 4-byte word boundary.\n      Section\
    \ 3.6.1.4 provides recommendations for what TLVs to add in\n      the Status-Info\
    \ TLV for particular values of the message header\n      Result Code field.\n\
    \   Figure 12 illustrates the Status-Info TLV.\n    0                   1    \
    \               2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    TLV Type = 0x0106          |              Length           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Reserved   |  Msg Type     |      Error Message Length     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |        Error Message (padded to 4-byte boundary)              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           optional sub-TLVs...                                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                      Figure 12: The Status-Info TLV\n"
- title: 5.  Introduction to ANCP Capabilities for Digital Subscriber Lines
  contents:
  - "5.  Introduction to ANCP Capabilities for Digital Subscriber Lines\n    (DSLs)\n\
    \   DSL is a widely deployed access technology for Broadband Access for\n   Next\
    \ Generation Networks.  Specifications such as [TR-059], [TR-058],\n   and [TR-092]\
    \ describe possible architectures for these access\n   networks.  The scope of\
    \ these specifications includes the delivery of\n   voice, video, and data services.\n\
    \   The next three sections of this document specify basic ANCP\n   capabilities\
    \ for use specifically in controlling Access Nodes serving\n   DSL access (Tech\
    \ Type = 0x05).  The same ANs could be serving other\n   access technologies (e.g.,\
    \ Metro-Ethernet, Passive Optical\n   Networking, WiMax), in which case the AN\
    \ will also have to support\n   the corresponding other-technology-specific capabilities.\
    \  Those\n   additional capabilities are outside the scope of the present\n  \
    \ document.\n"
- title: 5.1.  DSL Access Line Identification
  contents:
  - "5.1.  DSL Access Line Identification\n   Most ANCP messages involve actions relating\
    \ to a specific access\n   line.  Thus, it is necessary to describe how access\
    \ lines are\n   identified within those messages.  This section defines four TLVs\
    \ for\n   that purpose and provides an informative description of how they are\n\
    \   used.\n"
- title: 5.1.1.  Control Context (Informative)
  contents:
  - "5.1.1.  Control Context (Informative)\n   Three types of identification are described\
    \ in [TR-101] and provided\n   for in the TLVs defined in this section:\n   o\
    \  identification of an access line by its logical appearance on the\n      user\
    \ side of the Access Node;\n   o  identification of an access line by its logical\
    \ appearance on the\n      NAS side of the Access Node; and\n   o  identification\
    \ down to the user or host level as a supplement to\n      access line identification\
    \ in one of the other two forms.\n   All of these identifiers originate with the\
    \ AN control application,\n   during the process of DSL topology discovery.  The\
    \ control\n   application chooses which identifiers to use and the values to place\n\
    \   into them on a line-by-line basis, based on AN configuration and\n   deployment\
    \ considerations.\n   Aside from its use in ANCP signalling, access line identification\
    \ is\n   also used in DHCP ([RFC2131], [RFC3315]) transactions involving hosts\n\
    \   served by DSL.  Either the AN or the NAS can serve as a DHCP relay\n   node.\
    \  [TR-101] requires the AN or NAS in this role to add access\n   line identification\
    \ in Option 82 (Information) ([RFC3046], with its\n   IPv6 equivalent in [RFC4649])\
    \ to each DHCP request it forwards to the\n   DHCP server.  It is desirable for\
    \ efficiency that the identification\n   used in this signalling should be the\
    \ same as the identification used\n   in ANCP messages.\n   From the point of\
    \ view of ANCP itself, the identifiers are opaque.\n   From the point of view\
    \ of the AN control application, the syntax for\n   the user-side access line\
    \ identifier is the same as specified in\n   Section 3.9.3 of [TR-101] for DHCP\
    \ Option 82.  The syntax for the\n   ASCII form of the NAS-side access line identifier\
    \ will be similar.\n   Access line identification by logical appearance on the\
    \ user side of\n   the Access Node will always identify a DSL access line uniquely.\n\
    \   Identification by the logical appearance on the NAS side of the\n   Access\
    \ Node is unique only if there is a one-to-one mapping between\n   the appearances\
    \ on the two sides and no identity-modifying\n   aggregation between the AN and\
    \ the NAS.  In other cases, and in\n   particular in the case of Ethernet aggregation\
    \ using the N:1 VLAN\n   model, the user-side access line identification is necessary,\
    \ but the\n   NAS-side identification is potentially useful information allowing\n\
    \   the NAS to build up a picture of the aggregation network topology.\n   Additional\
    \ identification down to the user or host level is intended\n   to supplement\
    \ rather than replace either of the other two forms of\n   identification.\n \
    \     Sections 3.8 and 3.9 of [TR-101] are contradictory on this point.\n    \
    \  It is assumed here that Section 3.9 is meant to be authoritative.\n   The user-level\
    \ identification takes the form of an administered\n   string that again is opaque\
    \ at the ANCP level.\n   The NAS control application will use the identifying\
    \ information it\n   receives from the AN directly for some purposes.  For examples,\
    \ see\n   the introductory part of Section 3.9 of [TR-101].  For other\n   purposes,\
    \ the NAS will build a mapping between the unique access line\n   identification\
    \ provided by the AN, the additional identification of\n   the user or host (where\
    \ provided), and the IP interface on a\n   particular host.  For access lines\
    \ with static IP address assignment,\n   that mapping could be configured instead.\n"
- title: 5.1.2.  TLVs for DSL Access Line Identification
  contents:
  - "5.1.2.  TLVs for DSL Access Line Identification\n   This section provides a normative\
    \ specification of the TLVs that ANCP\n   provides to carry the types of identification\
    \ just described.  The\n   Access-Loop-Circuit-ID TLV identifies an access line\
    \ by its logical\n   appearance on the user side of the Access Node.  Two alternatives,\n\
    \   the Access-Aggregation-Circuit-ID-ASCII TLV and the Access-\n   Aggregation-Circuit-ID-Binary\
    \ TLV, identify an access line by its\n   logical appearance on the NAS side of\
    \ the Access Node.  It is\n   unlikely that a given AN uses both of these TLVs,\
    \ either for the same\n   line or for different lines, since they carry equivalent\
    \ information.\n   Finally, the Access-Loop-Remote-ID TLV contains an operator-\n\
    \   configured string that uniquely identifies the user on the associated\n  \
    \ access line, as described in Sections 3.9.1 and 3.9.2 of [TR-101].\n   ANCP\
    \ agents conforming to this section MUST satisfy the following\n   requirements:\n\
    \   o  ANCP agents MUST be able to build and send the Access-Loop-\n      Circuit-ID\
    \ TLV, the Access-Loop-Remote-ID TLV, and either the\n      Access-Aggregation-Circuit-ID-ASCII\
    \ TLV or the Access-Aggregation-\n      Circuit-ID-Binary TLV (implementation\
    \ choice), when passed the\n      associated information from the AN control application.\n\
    \   o  ANCP agents MUST be able to receive all four TLV types, extract\n     \
    \ the relevant information, and pass it to the control application.\n   o  If\
    \ the Access-Loop-Remote-ID TLV is present in a message, it MUST\n      be accompanied\
    \ by an Access-Loop-Circuit-ID TLV and/or an Access-\n      Aggregation-Circuit-ID-ASCII\
    \ TLV or Access-Aggregation-Circuit-ID-\n      Binary TLV with two VLAN identifiers.\n\
    \         The Access-Loop-Remote-ID TLV is not enough to identify an\n       \
    \  access line uniquely on its own.  As indicated above, an\n         Access-Aggregation-Circuit-ID-ASCII\
    \ TLV or Access-Aggregation-\n         Circuit-ID-Binary TLV with two VLAN identifiers\
    \ may or may not\n         identify an access line uniquely, but this is up to\
    \ the control\n         application to decide.\n   o  If the Access-Aggregation-Circuit-ID-ASCII\
    \ TLV or Access-\n      Aggregation-Circuit-ID-Binary TLV is present in a message\
    \ with\n      just one VLAN identifier, it MUST be accompanied by an Access-\n\
    \      Loop-Circuit-ID TLV.\n"
- title: 5.1.2.1.  Access-Loop-Circuit-ID TLV
  contents:
  - "5.1.2.1.  Access-Loop-Circuit-ID TLV\n   Type:  0x0001\n   Description:  A locally\
    \ administered human-readable string generated\n      by or configured on the\
    \ Access Node, identifying the corresponding\n      access loop logical port on\
    \ the user side of the Access Node.\n   Length:  Up to 63 bytes\n   Value:  ASCII\
    \ string\n"
- title: 5.1.2.2.  Access-Loop-Remote-ID TLV
  contents:
  - "5.1.2.2.  Access-Loop-Remote-ID TLV\n   Type:  0x0002\n   Description:  An operator-configured\
    \ string that uniquely identifies\n      the user on the associated access line,\
    \ as described in Sections\n      3.9.1 and 3.9.2 of [TR-101].\n   Length:  Up\
    \ to 63 bytes\n   Value:  ASCII string\n"
- title: 5.1.2.3.  Access-Aggregation-Circuit-ID-Binary TLV
  contents:
  - "5.1.2.3.  Access-Aggregation-Circuit-ID-Binary TLV\n   Type:  0x0006\n   Description:\
    \  This TLV identifies or partially identifies a specific\n      access line by\
    \ means of its logical circuit identifier on the NAS\n      side of the Access\
    \ Node.\n      For Ethernet access aggregation, where a per-subscriber (stacked)\n\
    \      VLAN can be applied (1:1 model as defined in [TR-101]), the TLV\n     \
    \ contains two value fields.  Each field carries a 12-bit VLAN\n      identifier\
    \ (which is part of the VLAN tag defined by\n      [IEEE802.1Q]).  The first field\
    \ MUST carry the inner VLAN\n      identifier, while the second field MUST carry\
    \ the outer VLAN\n      identifier.\n      When the N:1 VLAN model is used, only\
    \ one VLAN tag is available.\n      For the N:1 model, the Access-Aggregation-Circuit-ID-Binary\
    \ TLV\n      contains a single value field, which MUST carry the 12-bit VLAN\n\
    \      identifier derived from the single available VLAN tag.\n      In the case\
    \ of an ATM aggregation network, where the DSLAM is\n      directly connected\
    \ to the NAS (without an intermediate ATM\n      switch), the Virtual Path Identifier\
    \ (VPI) and Virtual Circuit\n      Identifier (VCI) on the DSLAM uplink correspond\
    \ uniquely to the\n      DSL access line on the DSLAM.  The Access-Aggregation-Circuit-ID-\n\
    \      Binary TLV MAY be used to carry the VPI and VCI.  The first value\n   \
    \   field of the TLV MUST carry the VCI, while the second value field\n      MUST\
    \ carry the VPI.\n      Each identifier MUST be placed in the low-order bits of\
    \ its\n      respective 32-bit field, with the higher-order bits set to zero.\n\
    \      The ordering of the bits of the identifier MUST be the same as\n      when\
    \ the identifier is transmitted on the wire to identify an\n      Ethernet frame\
    \ or ATM cell.\n      The Access-Aggregation-Circuit-ID-Binary is illustrated\
    \ in\n      Figure 13.\n   Length:  4 or 8 bytes\n   Value:  One or two 32-bit\
    \ binary fields.\n      0                   1                   2            \
    \       3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |    TLV Type = 0x0006          |        Length = 4 or 8        |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  Single\
    \ VLAN Identifier, inner VLAN identifier, or VCI        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                Outer VLAN identifier or VPI                   |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \  Figure 13: The Access-Aggregation-Circuit-ID-Binary TLV\n"
- title: 5.1.2.4.  Access-Aggregation-Circuit-ID-ASCII TLV
  contents:
  - "5.1.2.4.  Access-Aggregation-Circuit-ID-ASCII TLV\n   Type:  0x0003\n   Description:\
    \  This TLV transmits the ASCII equivalent of the Access-\n      Aggregation-Circuit-ID-Binary\
    \ TLV.  As mentioned in the previous\n      section, the AN control application\
    \ will use a format similar to\n      that specified in Section 3.9.3 of [TR-101]\
    \ for the format of the\n      \"circuit-id\".\n      As an extension to the present\
    \ document, the Access Node could\n      convey to the NAS the characteristics\
    \ (e.g., bandwidth) of the\n      uplink on the Access Node.  This TLV or the\
    \ binary equivalent\n      defined above then serves the purpose of uniquely identifying\
    \ the\n      uplink whose characteristics are being defined.  The present\n  \
    \    document does not specify the TLVs needed to convey the uplink\n      characteristics.\n\
    \   Length:  Up to 63 bytes\n   Value:  ASCII string\n"
- title: 6.  ANCP-Based DSL Topology Discovery
  contents:
  - "6.  ANCP-Based DSL Topology Discovery\n   Section 3.1 of [RFC5851] describes\
    \ the requirements for the DSL\n   Topology Discovery capability.\n"
- title: 6.1.  Control Context (Informative)
  contents:
  - "6.1.  Control Context (Informative)\n   The AN control application in the DSLAM\
    \ requests ANCP to send a DSL-\n   specific Port Up message to the NAS under the\
    \ following\n   circumstances:\n   o  when a new adjacency with the NAS is established,\
    \ for each DSL\n      loop that is synchronized at that time;\n   o  subsequent\
    \ to that, whenever a DSL access line resynchronizes; and\n   o  whenever the\
    \ AN control application wishes to signal that a line\n      attribute has changed.\n\
    \   The AN control application in the DSLAM requests ANCP to send a DSL-\n   specific\
    \ Port Down message to the NAS under the following\n   circumstances:\n   o  when\
    \ a new adjacency with the NAS is established, for each DSL\n      loop that is\
    \ provisioned but not synchronized at that time;\n   o  whenever a DSL access\
    \ line that is equipped in an AN but\n      administratively disabled is signaled\
    \ as \"IDLE\"; and\n   o  subsequent to that, whenever a DSL access line loses\n\
    \      synchronization.\n   The AN control application passes information to identify\
    \ the DSL\n   loop to ANCP to include in the Port Up or Port Down message, along\n\
    \   with information relating to DSL access line attributes.\n   In the case of\
    \ bonded copper loops to the customer premise (as per\n   DSL multi-pair bonding\
    \ described by [G.998.1] and [G.998.2]), the AN\n   control application requests\
    \ that ANCP send DSL-specific Port Up and\n   Port Down messages for the aggregate\
    \ \"DSL bonded circuit\"\n   (represented as a single logical port) as well as\
    \ the individual DSL\n   access lines of which it is comprised.  The information\
    \ relating to\n   DSL access line attributes that is passed by the AN control\n\
    \   application is aggregate information.\n   ANCP generates the DSL-specific\
    \ Port Up or Port Down message and\n   transfers it to the NAS.  ANCP on the NAS\
    \ side passes an indication\n   to the NAS control application that a DSL Port\
    \ Up or Port Down\n   message has been received along with the information contained\
    \ in the\n   message.\n   The NAS control application updates its view of the\
    \ DSL access line\n   state, performs any required accounting operations, and\
    \ uses any\n   included line attributes to adjust the operation of its queuing/\n\
    \   scheduling mechanisms as they apply to data passing to and from that\n   DSL\
    \ access line.\n   Figure 14 summarizes the interaction.\n   1.   Home       \
    \     Access                          NAS\n       Gateway           Node\n   \
    \          ----------->     -------------------------->\n                  DSL\
    \          Port Up (Event message)\n                 Signal        (default line\
    \ parameters)\n   2.   Home            Access                          NAS\n \
    \      Gateway           Node\n             ----------->     -------------------------->\n\
    \                  DSL           Port Up (Event message)\n                Resynch\
    \        (updated line parameters)\n   3.   Home            Access           \
    \               NAS\n       Gateway           Node\n             ----------->\
    \     -------------------------->\n             Loss of          Port Down (Event\
    \ message)\n             DSL Signal       (selected line parameters)\n       \
    \   Figure 14: ANCP Message Flow for DSL Topology Discovery\n"
- title: 6.2.  Protocol Requirements
  contents:
  - "6.2.  Protocol Requirements\n   The DSL topology discovery capability is assigned\
    \ capability type\n   0x0001.  No capability data is associated with this capability.\n"
- title: 6.2.1.  Protocol Requirements on the AN Side
  contents:
  - "6.2.1.  Protocol Requirements on the AN Side\n   The AN-side ANCP agent MUST\
    \ be able to create DSL-specific Port Up\n   and Port Down messages according\
    \ to the format specified in\n   Section 6.3.\n   The AN-side ANCP agent MUST\
    \ conform to the normative requirements of\n   Section 5.1.2.\n   The AN-side\
    \ ANCP agent MUST follow the AN-side procedures associated\n   with DSL-specific\
    \ Port Up and Port Down messages as they are\n   specified in Section 6.4.\n"
- title: 6.2.2.  Protocol Requirements on the NAS Side
  contents:
  - "6.2.2.  Protocol Requirements on the NAS Side\n   The NAS-side ANCP agent MUST\
    \ be able to receive and validate DSL-\n   specific Port Up and Port Down messages\
    \ according to the format\n   specified in Section 6.3.\n   The NAS-side ANCP\
    \ agent MUST conform to the normative requirements of\n   Section 5.1.2.\n   The\
    \ NAS-side ANCP agent MUST follow the NAS-side procedures\n   associated with\
    \ DSL-specific Port Up and Port Down messages as they\n   are specified in Section\
    \ 6.4.\n"
- title: 6.3.  ANCP Port Up and Port Down Event Message Descriptions
  contents:
  - "6.3.  ANCP Port Up and Port Down Event Message Descriptions\n   The format of\
    \ the ANCP Port Up and Port Down Event messages is shown\n   in Figure 15.\n \
    \   0                   1                   2                   3\n    0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           TCP/IP Encapsulating Header (Section 3.2)           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                ANCP General Message Header                    |\n   +  \
    \                    (Section 3.6.1)                          +\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                  Unused (20 bytes)                          ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |x|x|x|x|x|x|x|x| Message Type  |   Tech Type   |  Reserved     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     # of TLVs                 | Extension Block length (bytes)|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \               Access line identifying TLV(s)                ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                DSL-Line-Attributes TLV                        |\n   ~  \
    \      (MANDATORY in Port Up, OPTIONAL in Port Down)          ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   NOTE: TLVs MAY be in a different order from what is shown in this\n   figure.\n\
    \    Figure 15: Format of the ANCP Port Up and Port Down Event Messages\n    \
    \                    for DSL Topology Discovery\n   See Section 3.6.1 for a description\
    \ of the ANCP general message\n   header.  The Message Type field MUST be set\
    \ to 80 for Port Up, 81 for\n   Port Down.  The 4-bit Result field MUST be set\
    \ to zero (signifying\n   Ignore).  The 12-bit Result Code field and the 24-bit\
    \ Transaction\n   Identifier field MUST also be set to zeroes.  Other fields in\
    \ the\n   general header MUST be set a as described in Section 3.6.\n   The five-word\
    \ Unused field is a historical leftover.  The handling of\n   unused/reserved\
    \ fields is described in Section 3.4.\n   The remaining message fields belong\
    \ to the \"extension block\", and are\n   described as follows:\n   Extension\
    \ Flags (8 bits):  The flag bits denoted by 'x' are currently\n      unspecified\
    \ and reserved.\n   Message Type (8 bits):  Message Type has the same value as\
    \ in the\n      general header (i.e., 80 or 81).\n   Tech Type (8 bits):  MUST\
    \ be set to 0x05 (DSL).\n   Reserved (8 bits):  set as described in Section 3.4.\n\
    \   # of TLVs (16 bits):  The number of TLVs that follow, not counting\n     \
    \ TLVs encapsulated within other TLVs.\n   Extension Block Length (16 bits): \
    \ The total length of the TLVs\n      carried in the extension block in bytes,\
    \ including any padding\n      within individual TLVs.\n   TLVs:  One or more\
    \ TLVs to identify a DSL access line and zero or\n      more TLVs to define its\
    \ characteristics.\n"
- title: 6.4.  Procedures
  contents:
  - '6.4.  Procedures

    '
- title: 6.4.1.  Procedures on the AN Side
  contents:
  - "6.4.1.  Procedures on the AN Side\n   The AN-side ANCP agent creates and transmits\
    \ a DSL-specific Port Up\n   or Port Down message when requested by the AN control\
    \ application and\n   presented with the information needed to build a valid message.\
    \  It\n   is RECOMMENDED that the Access Node use a dampening mechanism per DSL\n\
    \   access line to control the rate at which state changes are\n   communicated\
    \ to the NAS.\n   At the top level, the extension block within a DSL-specific\
    \ Port Up\n   or Port Down message MUST include TLVs from Section 5.1.2 to identify\n\
    \   the DSL access line.\n   TLVs presenting DSL access line attributes (i.e.,\
    \ the TLVs specified\n   in Section 6.5) MUST be encapsulated within the DSL-Line-Attributes\n\
    \   TLV.  When the DSL-Line-Attributes TLV is present in a message, it\n   MUST\
    \ contain at least one such TLV and will generally contain more\n   than one.\
    \  In the Port Up message, the DSL-Line-Attributes TLV MUST\n   be present.  In\
    \ the Port Down message, the DSL-Line-Attributes TLV\n   MAY be present.\n"
- title: 6.4.2.  Procedures on the NAS Side
  contents:
  - "6.4.2.  Procedures on the NAS Side\n   The NAS-side ANCP agent MUST be prepared\
    \ to receive Port Up and Port\n   Down messages for a given DSL access line or\
    \ logical port at any time\n   after negotiation of an adjacency has been completed.\
    \  It is possible\n   for two Port Up messages in succession to be received for\
    \ the same\n   DSL access line without an intervening Port Down message, and vice\n\
    \   versa.\n   The NAS-side ANCP agent SHOULD validate each message against the\n\
    \   specifications given in Section 6.3 and the TLV specifications given\n   in\
    \ Sections 5.1.2 and 6.5.  If it finds an error, it MAY generate a\n   Generic\
    \ Response message containing an appropriate Result Code value.\n   If it does\
    \ so, the message MUST contain copies of all of the\n   identifier TLVs from Section\
    \ 5.1.2 that were present in the Port Up\n   or Port Down message.  The message\
    \ MUST also contain a Status-Info\n   TLV that in turn contains other information\
    \ appropriate to the\n   message header Result Code value as described in Section\
    \ 3.6.1.4.\n"
- title: 6.5.  TLVs for DSL Line Attributes
  contents:
  - "6.5.  TLVs for DSL Line Attributes\n   As specified above, the DSL-Line-Attributes\
    \ TLV is inserted into the\n   Port Up or Port Down message at the top level.\
    \  The remaining TLVs\n   defined below are encapsulated within the DSL-Line-Attributes\
    \ TLV.\n"
- title: 6.5.1.  DSL-Line-Attributes TLV
  contents:
  - "6.5.1.  DSL-Line-Attributes TLV\n   Type:  0x0004\n   Description:  This TLV\
    \ encapsulates attribute values for a DSL access\n      line serving a subscriber.\n\
    \   Length:  Variable (up to 1023 bytes)\n   Value:  One or more encapsulated\
    \ TLVs corresponding to DSL access\n      line attributes.  The DSL-Line-Attributes\
    \ TLV MUST contain at\n      least one TLV when it is present in a Port Up or\
    \ Port Down\n      message.  The actual contents are determined by the AN control\n\
    \      application.\n"
- title: 6.5.2.  DSL-Type TLV
  contents:
  - "6.5.2.  DSL-Type TLV\n   Type:  0x0091\n   Description:  Indicates the type of\
    \ transmission system in use.\n   Length:  4 bytes\n   Value:  32-bit unsigned\
    \ integer\n         ADSL1 = 1\n         ADSL2 = 2\n         ADSL2+ = 3\n     \
    \    VDSL1 = 4\n         VDSL2 = 5\n         SDSL = 6\n         OTHER = 0\n"
- title: 6.5.3.  Actual-Net-Data-Rate-Upstream TLV
  contents:
  - "6.5.3.  Actual-Net-Data-Rate-Upstream TLV\n   Type:  0x0081\n   Description:\
    \  Actual upstream net data rate on a DSL access line.\n   Length:  4 bytes\n\
    \   Value:  Rate in kbits/s as a 32-bit unsigned integer\n"
- title: 6.5.4.  Actual-Net-Data-Rate-Downstream TLV
  contents:
  - "6.5.4.  Actual-Net-Data-Rate-Downstream TLV\n   Type:  0x0082\n   Description:\
    \  Actual downstream net data rate on a DSL access line.\n   Length:  4 bytes\n\
    \   Value:  Rate in kbits/s as a 32-bit unsigned integer\n"
- title: 6.5.5.  Minimum-Net-Data-Rate-Upstream TLV
  contents:
  - "6.5.5.  Minimum-Net-Data-Rate-Upstream TLV\n   Type:  0x0083\n   Description:\
    \  Minimum upstream net data rate desired by the operator.\n   Length:  4 bytes\n\
    \   Value:  Rate in kbits/s as a 32-bit unsigned integer\n"
- title: 6.5.6.  Minimum-Net-Data-Rate-Downstream TLV
  contents:
  - "6.5.6.  Minimum-Net-Data-Rate-Downstream TLV\n   Type:  0x0084\n   Description:\
    \  Minimum downstream net data rate desired by the\n      operator.\n   Length:\
    \  4 bytes\n   Value:  Rate in kbits/s as a 32-bit unsigned integer\n"
- title: 6.5.7.  Attainable-Net-Data-Rate-Upstream TLV
  contents:
  - "6.5.7.  Attainable-Net-Data-Rate-Upstream TLV\n   Type:  0x0085\n   Description:\
    \  Maximum net upstream rate that can be attained on the\n      DSL access line.\n\
    \   Length:  4 bytes\n   Value:  Rate in kbits/s as a 32-bit unsigned integer\n"
- title: 6.5.8.  Attainable-Net-Data-Rate-Downstream TLV
  contents:
  - "6.5.8.  Attainable-Net-Data-Rate-Downstream TLV\n   Type:  0x0086\n   Description:\
    \  Maximum net downstream rate that can be attained on the\n      DSL access line.\n\
    \   Length:  4 bytes\n   Value:  Rate in kbits/s as a 32-bit unsigned integer\n"
- title: 6.5.9.  Maximum-Net-Data-Rate-Upstream TLV
  contents:
  - "6.5.9.  Maximum-Net-Data-Rate-Upstream TLV\n   Type:  0x0087\n   Description:\
    \  Maximum net upstream data rate desired by the operator.\n   Length:  4 bytes\n\
    \   Value:  Rate in kbits/s as a 32-bit unsigned integer\n"
- title: 6.5.10.  Maximum-Net-Data-Rate-Downstream TLV
  contents:
  - "6.5.10.  Maximum-Net-Data-Rate-Downstream TLV\n   Type:  0x0088\n   Description:\
    \  Maximum net downstream data rate desired by the\n      operator.\n   Length:\
    \  4 bytes\n   Value:  Rate in kbits/s as a 32-bit unsigned integer\n"
- title: 6.5.11.  Minimum-Net-Low-Power-Data-Rate-Upstream TLV
  contents:
  - "6.5.11.  Minimum-Net-Low-Power-Data-Rate-Upstream TLV\n   Type:  0x0089\n   Description:\
    \  Minimum net upstream data rate desired by the operator\n      in low power\
    \ state.\n   Length:  4 bytes\n   Value:  Rate in kbits/s as a 32-bit unsigned\
    \ integer\n"
- title: 6.5.12.  Minimum-Net-Low-Power-Data-Rate-Downstream TLV
  contents:
  - "6.5.12.  Minimum-Net-Low-Power-Data-Rate-Downstream TLV\n   Type:  0x008A\n \
    \  Description:  Minimum net downstream data rate desired by the\n      operator\
    \ in low power state.\n   Length:  4 bytes\n   Value:  Rate in kbits/s as a 32-bit\
    \ unsigned integer\n"
- title: 6.5.13.  Maximum-Interleaving-Delay-Upstream TLV
  contents:
  - "6.5.13.  Maximum-Interleaving-Delay-Upstream TLV\n   Type:  0x008B\n   Description:\
    \  Maximum one-way interleaving delay.\n   Length:  4 bytes\n   Value:  Time in\
    \ ms as a 32-bit unsigned integer\n"
- title: 6.5.14.  Actual-Interleaving-Delay-Upstream TLV
  contents:
  - "6.5.14.  Actual-Interleaving-Delay-Upstream TLV\n   Type:  0x008C\n   Description:\
    \  Value corresponding to the interleaver setting.\n   Length:  4 bytes\n   Value:\
    \  Time in ms as a 32-bit unsigned integer\n"
- title: 6.5.15.  Maximum-Interleaving-Delay-Downstream TLV
  contents:
  - "6.5.15.  Maximum-Interleaving-Delay-Downstream TLV\n   Type:  0x008D\n   Description:\
    \  Maximum one-way interleaving delay.\n   Length:  4 bytes\n   Value:  Time in\
    \ ms as a 32-bit unsigned integer\n"
- title: 6.5.16.  Actual-Interleaving-Delay-Downstream
  contents:
  - "6.5.16.  Actual-Interleaving-Delay-Downstream\n   Type:  0x008E\n   Description:\
    \  Value corresponding to the interleaver setting.\n   Length:  4 bytes\n   Value:\
    \  Time in ms as a 32-bit unsigned integer\n"
- title: 6.5.17.  DSL-Line-State TLV
  contents:
  - "6.5.17.  DSL-Line-State TLV\n   Type:  0x008F\n   Description:  The state of\
    \ the DSL access line.\n   Length:  4 bytes\n   Value:  32-bit unsigned integer\n\
    \         SHOWTIME = 1\n         IDLE = 2\n         SILENT = 3\n"
- title: 6.5.18.  Access-Loop-Encapsulation TLV
  contents:
  - "6.5.18.  Access-Loop-Encapsulation TLV\n   Type:  0x0090\n   Description:  The\
    \ data link protocol and, optionally, the\n      encapsulation overhead on the\
    \ access loop.  When this TLV is\n      present, at least the data link protocol\
    \ MUST be indicated.  The\n      encapsulation overhead MAY be indicated.  The\
    \ Access Node MAY\n      choose to not convey the encapsulation on the access\
    \ loop by\n      specifying values of 0 (NA) for the two encapsulation fields.\n\
    \   Length:  3 bytes\n   Value:  The 3 bytes (most to least significant) and valid\
    \ set of\n      values for each byte are defined as follows:\n         Byte 1:\
    \ Data Link\n            ATM AAL5 = 0\n            ETHERNET = 1\n         Byte\
    \ 2: Encapsulation 1\n            NA = 0\n            Untagged Ethernet = 1\n\
    \            Single-tagged Ethernet = 2\n            Double-tagged Ethernet =\
    \ 3\n         Byte 3: Encapsulation 2\n            NA = 0\n            PPPoA LLC\
    \ = 1\n            PPPoA Null = 2\n            IPoA LLC = 3\n            IPoA\
    \ Null = 4\n            Ethernet over AAL5 LLC with FCS = 5\n            Ethernet\
    \ over AAL5 LLC without FCS = 6\n            Ethernet over AAL5 NULL with FCS\
    \ = 7\n            Ethernet over AAL5 NULL without FCS = 8\n   The Access-Loop-Encapsulation\
    \ TLV is illustrated in Figure 16.\n      0                   1              \
    \     2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |    TLV Type = 0x0090          |        Length = 3             |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     | Data\
    \ link     |    Encaps 1   |    Encaps 2   | Padding (=0)  |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \               Figure 16: The Access-Loop-Encapsulation TLV\n"
- title: 7.  ANCP-Based DSL Line Configuration
  contents:
  - "7.  ANCP-Based DSL Line Configuration\n   The use case for ANCP-based DSL Line\
    \ Configuration is described in\n   Section 3.2 of [RFC5851].\n"
- title: 7.1.  Control Context (Informative)
  contents:
  - "7.1.  Control Context (Informative)\n   Triggered by topology information reporting\
    \ a new DSL access line or\n   triggered by a subsequent user session establishment\
    \ (via PPP or\n   DHCP), RADIUS/AAA sends service parameters to the NAS control\n\
    \   application for configuration on the access line.  The NAS control\n   application\
    \ passes the request on to the NAS-side agent, which sends\n   the information\
    \ to the AN by means of a Port Management (line\n   configuration) message.  The\
    \ AN-side agent passes this information up\n   to the AN control application,\
    \ which applies it to the line.\n   Figure 17 summarizes the interaction.\n  \
    \   Home            Access               NAS             RADIUS/AAA\n    Gateway\
    \           Node                             Policy Server\n          ----------->\
    \     --------------->\n              DSL          Port Up message)\n        \
    \     Signal       (line parameters)\n          -------------------------------->\
    \   -------------->\n                  PPP/DHCP Session            Authentication\
    \ &\n                                              authorization\n           \
    \               <----------------\n                            Port Management\
    \ message\n                            (line configuration)\n   Figure 17: Message\
    \ Flow - ANCP Mapping for Initial Line Configuration\n   The NAS could update\
    \ the line configuration as a result of a\n   subscriber service change (e.g.,\
    \ triggered by the policy server).\n   Figure 18 summarizes the interaction.\n\
    \   User     Home            Access         NAS\n           Gateway          \
    \ Node\n                -------------------------->\n                  PPP/DHCP\
    \ Session\n      ----------------------------------------------------> Web portal,\n\
    \                  Service on demand                           OSS, etc.\n   \
    \                                                              |\n           \
    \                                  <-----------  RADIUS/AAA\n                \
    \                             Change of     Policy Server\n                  \
    \                         authorization\n                             <------------\n\
    \                              Port Management\n                             \
    \     message\n                              (new profile)\n   OSS: Operations\
    \ Support System\n   Figure 18: Message Flow - ANCP Mapping for Updated Line Configuration\n"
- title: 7.2.  Protocol Requirements
  contents:
  - "7.2.  Protocol Requirements\n   The DSL access line configuration capability\
    \ is assigned capability\n   type 0x0002.  No capability data is associated with\
    \ this capability.\n"
- title: 7.2.1.  Protocol Requirements on the NAS Side
  contents:
  - "7.2.1.  Protocol Requirements on the NAS Side\n   The NAS-side ANCP agent MUST\
    \ be able to create DSL-specific Port\n   Management (line configuration) messages\
    \ according to the format\n   specified in Section 7.3.\n   The NAS-side ANCP\
    \ agent MUST conform to the normative requirements of\n   Section 5.1.2.\n   The\
    \ NAS-side ANCP agent MUST follow the NAS-side procedures\n   associated with\
    \ DSL-specific Port Management (line configuration)\n   messages as they are specified\
    \ in Section 7.4.\n"
- title: 7.2.2.  Protocol Requirements on the AN Side
  contents:
  - "7.2.2.  Protocol Requirements on the AN Side\n   The AN-side ANCP agent MUST\
    \ conform to the normative requirements of\n   Section 5.1.2.\n   The AN-side\
    \ ANCP agent MUST be able to receive and validate DSL-\n   specific Port Management\
    \ (line configuration) messages according to\n   the format specified in Section\
    \ 7.3.\n   The AN-side ANCP agent MUST follow the AN-side procedures associated\n\
    \   with DSL-specific Port Management (line configuration) messages as\n   specified\
    \ in Section 7.4.\n"
- title: 7.3.  ANCP Port Management (Line Configuration) Message Format
  contents:
  - "7.3.  ANCP Port Management (Line Configuration) Message Format\n   The ANCP Port\
    \ Management message for DSL access line configuration\n   has the format shown\
    \ in Figure 19.\n    0                   1                   2               \
    \    3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \         TCP/IP Encapsulating Header (Section 3.2)           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                ANCP General Message Header                    |\n   +  \
    \                    (Section 3.6.1)                          +\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                     Unused (12 bytes)                       ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |        Unused (2 bytes)       |  Function=8   | X-Function=0  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Unused (4 bytes)                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |x|x|x|x|x|x|x|x| Message Type  |            Reserved           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     # of TLVs                 | Extension Block length (bytes)|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \               Access line identifying TLV(s)                ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \              Line configuration TLV(s)                      ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   NOTE: TLVs MAY be in a different order from what is shown in this\n   figure.\n\
    \       Figure 19: Port Management Message for DSL Line Configuration\n   See\
    \ Section 3.6 for a description of the ANCP general message header.\n   The Message\
    \ Type field MUST be set to 32.  The 12-bit Result Code\n   field MUST be set\
    \ to 0x0.  The 4-bit Result field MUST be set to\n   either 0x1 (Nack) or 0x2\
    \ (AckAll), as determined by policy on the\n   NAS.  The 24-bit Transaction Identifier\
    \ field MUST be set to a\n   positive value.  Other fields in the general header\
    \ MUST be set as\n   described in Section 3.6.\n   The handling of the various\
    \ unused/reserved fields is described in\n   Section 3.4.\n   The remaining message\
    \ fields are described as follows:\n   Function (8 bits):  Action to be performed.\
    \  For line configuration,\n      Function MUST be set to 8 (Configure Connection\
    \ Service Data).\n      This action type requests the Access Node (i.e., DSLAM)\
    \ to apply\n      service configuration data contained in the line configuration\n\
    \      TLVs to the DSL access line designated by the access line\n      identifying\
    \ TLVs.\n   X-Function (8 bits):  Qualifies the action set by Function.  For DSL\n\
    \      access line configuration, this field MUST be set to 0.\n   Extension Flags\
    \ (8 bits):  The flag bits denoted by 'x' before the\n      Message Type field\
    \ are reserved for future use.\n   Message Type (8 bits):  Message Type has the\
    \ same value as in the\n      general header (i.e., 32).\n   Reserved (16 bits):\
    \  Reserved for future use.\n   # of TLVs (16 bits):  The number of TLVs that\
    \ follow, not counting\n      TLVs encapsulated within other TLVs.\n   Extension\
    \ Block Length (16 bits):  The total length of the TLVs\n      carried in the\
    \ extension block in bytes, including any padding\n      within individual TLVs.\n\
    \   TLVs:  Two or more TLVs to identify a DSL access line and configure\n    \
    \  its service data.\n   Other ANCP capabilities, either specific to DSL or technology-\n\
    \   independent, MAY reuse the Port Management message for service\n   configuration.\
    \  If the settings of the fixed fields are compatible\n   with the settings just\
    \ described, the same Port Management message\n   that is used for DSL access\
    \ line configuration MAY be used to carry\n   TLVs relating to the other capabilities\
    \ that apply to the same DSL\n   access line.\n   Use of the Port Management message\
    \ for configuration MAY also be\n   generalized to other access technologies,\
    \ if the respective\n   capabilities specify use of access line identifiers appropriate\
    \ to\n   those technologies in place of the identifiers defined in\n   Section\
    \ 5.1.2.\n"
- title: 7.4.  Procedures
  contents:
  - "7.4.  Procedures\n   Service configuration MAY be performed on an access line\
    \ regardless\n   of its current state.\n"
- title: 7.4.1.  Procedures on the NAS Side
  contents:
  - "7.4.1.  Procedures on the NAS Side\n   When requested by the NAS control application\
    \ and presented with the\n   necessary information to do so, the NAS-side agent\
    \ MUST create and\n   send a Port Management message with the fixed fields set\
    \ as described\n   in the previous section.  The message MUST contain one or more\
    \ TLVs\n   to identify an access line according the requirements of\n   Section\
    \ 5.1.2.  The NAS MUST include one or more TLVs to configure\n   line service\
    \ parameters for that line.  Section 7.5 currently\n   identifies only one such\
    \ TLV, Service-Profile-Name, but other TLVs\n   MAY be added by extensions to\
    \ ANCP.\n"
- title: 7.4.2.  Procedures on the AN Side
  contents:
  - "7.4.2.  Procedures on the AN Side\n   The AN-side ANCP agent MUST be prepared\
    \ to receive Port Management\n   (line configuration) messages for a given DSL\
    \ access line or logical\n   port at any time after negotiation of an adjacency\
    \ has been\n   completed.\n   The AN-side ANCP agent SHOULD validate each message\
    \ against the\n   specifications given in Section 7.3 and the TLV specifications\
    \ given\n   in Sections 5.1.2 and 7.5.  If it finds an error it MUST return a\n\
    \   Port Management response message that copies the Port Management\n   request\
    \ as it was received, but has the Result header field set to\n   0x04 (Failure)\
    \ and the Result Code field set to the appropriate\n   value.  The AN-side agent\
    \ MAY add a Status-Info TLV (Section 4.5) to\n   provide further information on\
    \ the error, particularly if this is\n   recommended in Section 3.6.1.4 for the\
    \ given Result Code value.  If\n   it does so, the various length fields and the\
    \ # of TLVs field within\n   the message MUST be adjusted accordingly.\n"
- title: 7.5.  TLVs for DSL Line Configuration
  contents:
  - "7.5.  TLVs for DSL Line Configuration\n   Currently, only the following TLV is\
    \ specified for DSL access line\n   configuration.  More TLVs may be defined in\
    \ a future version of this\n   specification or in ANCP extensions for individual\
    \ service attributes\n   of a DSL access line (e.g., rates, interleaving delay,\
    \ multicast\n   channel entitlement access-list).\n"
- title: 7.5.1.  Service-Profile-Name TLV
  contents:
  - "7.5.1.  Service-Profile-Name TLV\n   Type:  0x0005\n   Description:  Reference\
    \ to a pre-configured profile on the DSLAM that\n      contains service-specific\
    \ data for the subscriber.\n   Length:  Up to 64 bytes\n   Value:  ASCII string\
    \ containing the profile name (which the NAS\n      learns from a policy server\
    \ after a subscriber is authorized).\n"
- title: 8.  ANCP-Based DSL Remote Line Connectivity Testing
  contents:
  - "8.  ANCP-Based DSL Remote Line Connectivity Testing\n   The use case and requirements\
    \ for ANCP-Based DSL remote line\n   connectivity testing are specified in Section\
    \ 3.3 of [RFC5851].\n"
- title: 8.1.  Control Context (Informative)
  contents:
  - "8.1.  Control Context (Informative)\n   The NAS control application initiates\
    \ a request for remote\n   connectivity testing for a given access line.  The\
    \ NAS control\n   application can provide loop count and timeout test parameters\
    \ and\n   opaque data for its own use with the request.  The loop count\n   parameter\
    \ indicates the number of test messages or cells to be used.\n   The timeout parameter\
    \ indicates the longest that the NAS control\n   application will wait for a result.\n\
    \   The request is passed in a Port Management (Operations,\n   Administration,\
    \ and Maintenance, OAM) message.  If the NAS control\n   application has supplied\
    \ test parameters, they are used; otherwise,\n   the AN control application uses\
    \ default test parameters.  If a loop\n   count parameter provided by the NAS\
    \ is outside the valid range, the\n   AN does not execute the test, but returns\
    \ a result indicating that\n   the test has failed due to an invalid parameter.\
    \  If the test takes\n   longer than the timeout value (default or provided by\
    \ the NAS), the\n   AN control application can return a failure result indicating\
    \ timeout\n   or else can send no response.  The AN control application can provide\n\
    \   a human-readable string describing the test results, for both\n   failures\
    \ and successes.  If provided, this string is included in the\n   response.  Responses\
    \ always include the opaque data, if any, provided\n   by the NAS control application.\n\
    \   Figure 20 summarizes the interaction.\n   +-------------+    +-----+     \
    \ +-------+          +----------------+\n   |Radius/AAA   |----|NAS  |------|\
    \ DSLAM |----------|    CPE         |\n   |Policy Server|    +-----+      +-------+\
    \          | (DSL Modem +   |\n   +-------------+                            \
    \        |Routing Gateway)|\n                                                \
    \      +----------------+\n                    Port Management Message\n     \
    \               (Remote Loopback          ATM loopback\n                     Trigger\
    \ Request)         or EFM Loopback\n                  1.  ---------------->  \
    \   2. -------->\n                                               <-------+\n \
    \                      3. <---------------\n                       Port Management\
    \ Message\n                  (Remote Loopback Test Response)\n   CPE: Customer\
    \ Premises Equipment\n   EFM: Ethernet First Mile\n                Figure 20:\
    \ Message Flow for ANCP-Based OAM\n"
- title: 8.2.  Protocol Requirements
  contents:
  - "8.2.  Protocol Requirements\n   The DSL remote line connectivity testing capability\
    \ is assigned\n   capability type 0x0004.  No capability data is associated with\
    \ this\n   capability.\n"
- title: 8.2.1.  Protocol Requirements on the NAS Side
  contents:
  - "8.2.1.  Protocol Requirements on the NAS Side\n   The NAS-side ANCP agent MUST\
    \ be able to create DSL-specific Port\n   Management (OAM) messages according\
    \ to the format specified in\n   Section 8.3.\n   The NAS-side ANCP agent MUST\
    \ conform to the normative requirements of\n   Section 5.1.2.\n   The NAS-side\
    \ ANCP agent MUST follow the NAS-side procedures\n   associated with DSL-specific\
    \ Port Management (OAM) messages as they\n   are specified in Section 8.4.\n"
- title: 8.2.2.  Protocol Requirements on the AN Side
  contents:
  - "8.2.2.  Protocol Requirements on the AN Side\n   The AN-side ANCP agent MUST\
    \ conform to the normative requirements of\n   Section 5.1.2.\n   The AN-side\
    \ ANCP agent MUST be able to receive and validate DSL-\n   specific Port Management\
    \ (OAM) messages according to the format\n   specified in Section 8.3.\n   The\
    \ AN-side ANCP agent MUST follow the AN-side procedures associated\n   with DSL-specific\
    \ Port Management (OAM) messages as specified in\n   Section 8.4.\n"
- title: 8.3.  Port Management (OAM) Message Format
  contents:
  - "8.3.  Port Management (OAM) Message Format\n   The Port Management message for\
    \ DSL access line testing has the same\n   format as for DSL access line configuration\
    \ (see Section 7.3), with\n   the following differences:\n   o  The Result field\
    \ in the request SHOULD be set to AckAll (0x2), to\n      allow the NAS to receive\
    \ the information contained in a successful\n      test response.\n   o  The Function\
    \ field MUST be set to 9 (Remote Loopback).  (The\n      X-Function field continues\
    \ to be 0.)\n   o  The appended TLVs in the extension value field include testing-\n\
    \      related TLVs rather than subscriber service information.\n   The Port Management\
    \ (OAM) message is illustrated in Figure 21.\n    0                   1      \
    \             2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |           TCP/IP Encapsulating Header (Section 3.2)           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                ANCP General Message Header                    |\n   +  \
    \                    (Section 3.6.1)                          +\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                     Unused (12 bytes)                       ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |        Unused (2 bytes)       |  Function=9   | X-Function=0  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                       Unused (4 bytes)                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |x|x|x|x|x|x|x|x| Message Type  |            Reserved           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     # of TLVs                 | Extension Block length (bytes)|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \               Access line identifying TLV(s)                ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                 Testing-related TLVs                        ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   NOTE: TLVs MAY be in a different order from what is shown in this\n   figure.\n\
    \                  Figure 21: Port Management Message for\n                  \
    \ DSL Line Remote Connectivity Testing\n"
- title: 8.4.  Procedures
  contents:
  - "8.4.  Procedures\n   From the point of view of ANCP, it is permissible to attempt\
    \ line\n   connectivity testing regardless of the state of the line.  However,\n\
    \   testing could fail in some states due to technology limitations.\n"
- title: 8.4.1.  NAS-Side Procedures
  contents:
  - "8.4.1.  NAS-Side Procedures\n   When requested by the NAS control application\
    \ and presented with the\n   necessary information to do so, the NAS-side agent\
    \ creates and sends\n   a Port Management (OAM) request with the fixed fields\
    \ set as\n   described in the previous section.  The message MUST contain one\
    \ or\n   more TLVs to identify an access line according the requirements of\n\
    \   Section 5.1.2.  The NAS MAY include the Opaque-Data TLV and/or the\n   OAM-Loopback-Test-Parameters\
    \ TLV (defined in Section 8.5) to\n   configure the loopback test for that line.\n"
- title: 8.4.2.  AN-Side Procedures
  contents:
  - "8.4.2.  AN-Side Procedures\n   The AN-side ANCP agent SHOULD validate each message\
    \ against the\n   specifications given in Section 8.3 and the TLV specifications\
    \ given\n   in Sections 5.1.2 and 8.5.  If it finds an error it MUST return a\n\
    \   Port Management response message that copies the Port Management\n   request\
    \ as it was received, but has the Result header field set to\n   0x04 (Failure)\
    \ and the Result Code field set to the appropriate\n   value.  Result Code value\
    \ 0x509 as described below MAY apply, as well\n   as the other Result Code values\
    \ documented in Section 3.6.1.4.\n   Result Code value 0x509 SHOULD be used if\
    \ the OAM-Loopback-Test-\n   Parameters TLV is present with an invalid value of\
    \ the Count field.\n   The AN-side agent MAY add a Status-Info TLV (Section 4.5)\
    \ to provide\n   further information on the error, particularly if this is recommended\n\
    \   in Section 3.6.1.4 for the given Result Code value.  If it does so,\n   the\
    \ various length fields and the # of TLVs field within the message\n   MUST be\
    \ adjusted accordingly.\n   If the received message passes validation, the AN-side\
    \ ANCP agent\n   extracts the information from the TLVs contained in the message\
    \ and\n   presents that information to the AN control application.  It MUST NOT\n\
    \   generate an immediate response to the request, but it MUST instead\n   wait\
    \ for the AN control application to indicate that the response\n   should be sent.\n\
    \   When requested by the AN control application and presented with the\n   necessary\
    \ information to do so, the AN-side agent creates and sends a\n   Port Management\
    \ (OAM) response to the original request.  The Result\n   field MUST be set to\
    \ Success (0x3) or Failure (0x4), and the Result\n   Code field SHOULD be set\
    \ to one of the following values, as indicated\n   by the AN control application.\n\
    \   0x500:  Specified access line does not exist.  See the documentation\n   \
    \   of Result Code 0x500 in Section 3.6.1.4 for more information.  The\n     \
    \ Result header field MUST be set to Failure (0x4).\n   0x501:  Loopback test\
    \ timed out.  The Result header field MUST be set\n      to Failure (0x4).\n \
    \  0x503:  DSL access line status showtime\n   0x504:  DSL access line status\
    \ idle\n   0x505:  DSL access line status silent\n   0x506:  DSL access line status\
    \ training\n   0x507:  DSL access line integrity error\n   0x508:  DSLAM resource\
    \ not available.  The Result header field MUST\n      be set to Failure (0x04).\n\
    \   0x509:  Invalid test parameter.  The Result header field MUST be set\n   \
    \   to Failure (0x4).\n   All other fields of the request including the TLVs MUST\
    \ be copied\n   into the response unchanged, except that in a successful response\
    \ the\n   OAM-Loopback-Test-Parameters TLV MUST NOT appear.  If the AN control\n\
    \   application has provided the necessary information, the AN-side agent\n  \
    \ MUST also include an instance of the OAM-Loopback-Test-Response-\n   String\
    \ TLV in the response.\n"
- title: 8.5.  TLVs for the DSL Line Remote Connectivity Testing Capability
  contents:
  - "8.5.  TLVs for the DSL Line Remote Connectivity Testing Capability\n   The following\
    \ TLVs have been defined for use with the DSL access line\n   testing capability.\n"
- title: 8.5.1.  OAM-Loopback-Test-Parameters TLV
  contents:
  - "8.5.1.  OAM-Loopback-Test-Parameters TLV\n   Type:  0x0007\n   Description: \
    \ Parameters intended to override the default values for\n      this loopback\
    \ test.\n   Length:  2 bytes\n   Value:  Two unsigned 1-byte fields described\
    \ below (listed in order\n      of most to least significant).\n         Byte\
    \ 1: Count.  Number of loopback cells/messages that should\n         be generated\
    \ on the local loop as part of the loopback test.\n         The Count value SHOULD\
    \ be greater than 0 and less than or equal\n         to 32.\n         Byte 2:\
    \ Timeout.  Upper bound on the time in seconds that the\n         NAS will wait\
    \ for a response from the DSLAM.  The value 0 MAY\n         be used to indicate\
    \ that the DSLAM MUST use a locally\n         determined value for the timeout.\n\
    \   The OAM-Loopback-Test-Parameters TLV is illustrated in Figure 22.\n      0\
    \                   1                   2                   3\n      0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |    TLV Type = 0x0007          |        Length = 2             |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \ Count       |  Timeout      |         Padding (=0)          |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \              Figure 22: The OAM-Loopback-Test-Parameters TLV\n"
- title: 8.5.2.  Opaque-Data TLV
  contents:
  - "8.5.2.  Opaque-Data TLV\n   Type:  0x0008\n   Description:  An 8-byte opaque\
    \ field used by the NAS control\n      application for its own purposes (e.g.,\
    \ response correlation).\n      The procedures in Section 8.4.2 ensure that if\
    \ it is present in\n      the request it is copied unchanged to the response.\n\
    \   Length:  8 bytes\n   Value:  Two 32-bit unsigned integers.\n"
- title: 8.5.3.  OAM-Loopback-Test-Response-String TLV
  contents:
  - "8.5.3.  OAM-Loopback-Test-Response-String TLV\n   Type:  0x0009\n   Description:\
    \  Suitably formatted string containing useful details\n      about the test that\
    \ the NAS will display for the operator, exactly\n      as received from the DSLAM\
    \ (no manipulation or interpretation by\n      the NAS).\n   Length:  Up to 128\
    \ bytes\n   Value:  UTF-8 encoded string of text.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   This section documents the following IANA actions:\n\
    \   o  establishment of the following new ANCP registries:\n         ANCP Message\
    \ Types;\n         ANCP Result Codes;\n         ANCP Port Management Functions;\n\
    \         ANCP Technology Types;\n         ANCP Command Codes;\n         ANCP\
    \ TLV Types;\n         ANCP Capabilities.\n   o  establishment of a new joint\
    \ GSMP/ANCP version registry;\n   o  addition of ANCP as another user of TCP port\
    \ 6068 in the port\n      number registry available from http://www.iana.org.\
    \  The current\n      user is GSMP.\n   All of these actions are described in\
    \ detail below except for the\n   port registration, for which the final point\
    \ above provides\n   sufficient information.\n"
- title: 10.  IANA Actions
  contents:
  - '10.  IANA Actions

    '
- title: 10.1.  ANCP Message Type Registry
  contents:
  - "10.1.  ANCP Message Type Registry\n   IANA has created a new registry, ANCP Message\
    \ Types.  Additions to\n   that registry are permitted by Standards Action, as\
    \ defined by\n   [RFC5226].  The values for Message Type MAY range from 0 to 255,\
    \ but\n   new Message Types SHOULD be assigned values sequentially from 90\n \
    \  onwards (noting that 91 and 93 are already assigned).  The initial\n   contents\
    \ of the ANCP Message Types registry are as follows:\n             +--------------+--------------------+-----------+\n\
    \             | Message Type | Message Name       | Reference |\n            \
    \ +--------------+--------------------+-----------+\n             | 10       \
    \    | Adjacency Protocol | RFC 6320  |\n             | 32           | Port Management\
    \    | RFC 6320  |\n             | 80           | Port Up            | RFC 6320\
    \  |\n             | 81           | Port Down          | RFC 6320  |\n       \
    \      | 85           | Adjacency Update   | RFC 6320  |\n             | 91  \
    \         | Generic Response   | RFC 6320  |\n             | 93           | Provisioning\
    \       | RFC 6320  |\n             +--------------+--------------------+-----------+\n"
- title: 10.2.  ANCP Result Code Registry
  contents:
  - "10.2.  ANCP Result Code Registry\n   IANA has created a new registry, ANCP Result\
    \ Codes.  The\n   documentation of new Result Codes MUST include the following\n\
    \   information:\n   o  Result Code value (as assigned by IANA);\n   o  One-line\
    \ description;\n   o  Where condition detected (control application or ANCP agent);\n\
    \   o  Further description (if any);\n   o  Required additional information in\
    \ the response message;\n   o  Target (control application or ANCP agent at the\
    \ peer that sent\n      the original request);\n   o  Action RECOMMENDED for the\
    \ receiving ANCP agent.\n   The values for Result Code are expressed in hexadecimal\
    \ and MAY range\n   from 0x0 to 0xFFFFFF.  The range 0x0 to 0xFFF is allocated\
    \ by the\n   criterion of IETF Review, as defined by [RFC5226].  IANA SHOULD\n\
    \   allocate new Result Code values from this range sequentially\n   beginning\
    \ at 0x100.  The range 0x1000 onwards is allocated by the\n   criterion of Specification\
    \ Required, as defined by [RFC5226].  IANA\n   SHOULD allocate new Result Code\
    \ values from this range sequentially\n   beginning at 0x1000.  The initial contents\
    \ of the ANCP Message Types\n   registry are as follows:\n   +------------+------------------------------------------+-----------+\n\
    \   | Result     | One-line description                     | Reference |\n  \
    \ | Code       |                                          |           |\n   +------------+------------------------------------------+-----------+\n\
    \   | 0x0        | No result                                | RFC 6320  |\n  \
    \ | 0x2        | Invalid request message                  | RFC 6320  |\n   |\
    \ 0x6        | One or more of the specified ports are   | RFC 6320  |\n   |  \
    \          | down                                     |           |\n   | 0x13\
    \       | Out of resources                         | RFC 6320  |\n   | 0x51  \
    \     | Request message type not implemented     | RFC 6320  |\n   | 0x53    \
    \   | Malformed message                        | RFC 6320  |\n   | 0x54      \
    \ | Mandatory TLV missing                    | RFC 6320  |\n   | 0x55       |\
    \ Invalid TLV contents                     | RFC 6320  |\n   | 0x500      | One\
    \ or more of the specified ports do    | RFC 6320  |\n   |            | not exist\
    \                                |           |\n   | 0x501      | Loopback test\
    \ timed out                  | RFC 6320  |\n   | 0x502      | Reserved       \
    \                          | RFC 6320  |\n   | 0x503      | DSL access line status\
    \ showtime          | RFC 6320  |\n   | 0x504      | DSL access line status idle\
    \              | RFC 6320  |\n   | 0x505      | DSL access line status silent\
    \            | RFC 6320  |\n   | 0x506      | DSL access line status training\
    \          | RFC 6320  |\n   | 0x507      | DSL access line integrity error  \
    \        | RFC 6320  |\n   | 0x508      | DSLAM resource not available       \
    \      | RFC 6320  |\n   | 0x509      | Invalid test parameter               \
    \    | RFC 6320  |\n   +------------+------------------------------------------+-----------+\n"
- title: 10.3.  ANCP Port Management Function Registry
  contents:
  - "10.3.  ANCP Port Management Function Registry\n   IANA has created a new ANCP\
    \ Port Management Function registry, with\n   the following initial entries. \
    \ Additions to this registry will be by\n   Standards Action, as defined by [RFC5226].\
    \  Values may range from 0\n   to 255.  IANA SHOULD assign values sequentially\
    \ beginning with 1,\n   taking account of the values already assigned below.\n\
    \      NOTE: Future extensions of ANCP may need to establish sub-\n      registries\
    \ of permitted X-Function values for specific values of\n      Function.\n   \
    \ +----------------+-----------------------------------+-----------+\n    | Function\
    \ Value | Function Name                     | Reference |\n    +----------------+-----------------------------------+-----------+\n\
    \    | 0              | Reserved                          | RFC 6320  |\n    |\
    \ 8              | Configure Connection Service Data | RFC 6320  |\n    | 9  \
    \            | Remote Loopback                   | RFC 6320  |\n    +----------------+-----------------------------------+-----------+\n"
- title: 10.4.  ANCP Technology Type Registry
  contents:
  - "10.4.  ANCP Technology Type Registry\n   IANA has created a new ANCP Technology\
    \ Type registry, with additions\n   by Expert Review, as defined by [RFC5226].\
    \  The Technology Type MUST\n   designate a distinct access transport technology.\
    \  Values may range\n   from 0 to 255.  IANA SHOULD assign new values sequentially\
    \ beginning\n   at 2, taking into account of the values already assigned below.\
    \  The\n   initial entries are as follows:\n      +-----------------+-------------------------------+-----------+\n\
    \      | Tech Type Value | Tech Type Name                | Reference |\n     \
    \ +-----------------+-------------------------------+-----------+\n      | 0 \
    \              | Not technology dependent      | RFC 6320  |\n      | 1      \
    \         | Passive Optical Network (PON) | RFC 6320  |\n      | 5           \
    \    | Digital Subscriber Line (DSL) | RFC 6320  |\n      | 255             |\
    \ Reserved                      | RFC 6320  |\n      +-----------------+-------------------------------+-----------+\n"
- title: 10.5.  ANCP Command Code Registry
  contents:
  - "10.5.  ANCP Command Code Registry\n   IANA has created a new ANCP Command Code\
    \ registry, with additions by\n   Standards Action, as defined by [RFC5226]. \
    \ Values may range from 0\n   to 255.  IANA SHOULD assign new values sequentially\
    \ beginning with 1.\n   The initial entry is as follows:\n     +--------------------+-----------------------------+-----------+\n\
    \     | Command Code Value | Command Code Directive Name | Reference |\n     +--------------------+-----------------------------+-----------+\n\
    \     | 0                  | Reserved                    | RFC 6320  |\n     +--------------------+-----------------------------+-----------+\n"
- title: 10.6.  ANCP TLV Type Registry
  contents:
  - "10.6.  ANCP TLV Type Registry\n   IANA has created a new ANCP TLV Type registry.\
    \  Values are expressed\n   in hexadecimal and may range from 0x0000 to 0xFFFF.\
    \  Additions in the\n   range 0x0000 to 0x1FFF are by IETF Review, as defined\
    \ by [RFC5226].\n   IANA SHOULD assign new values in this range sequentially beginning\
    \ at\n   0x100, taking account of the assignments already made below.\n   Additions\
    \ in the range 0x2000 to 0xFFFF are by Specification\n   Required, again as defined\
    \ by [RFC5226].  IANA SHOULD assign new\n   values in this range sequentially\
    \ beginning at 0x2000.  In both\n   cases, the documentation of the TLV MUST provide:\n\
    \   o  a TLV name following the convention used for the initial entries\n    \
    \  (capitalized words separated by hyphens);\n   o  a brief description of the\
    \ intended use;\n   o  a precise description of the contents of each fixed field,\n\
    \      including its length, type, and units (if applicable);\n   o  identification\
    \ of any mandatory encapsulated TLVs;\n   o  an indication of whether optional\
    \ TLVs may be encapsulated, with\n      whatever information is available on their\
    \ identity (could range\n      from a general class of information to specific\
    \ TLV names,\n      depending on the nature of the TLV being defined).\n   The\
    \ initial entries are as follows:\n   +----------+--------------------------------------------+-----------+\n\
    \   | Type Code| TLV Name                                   | Reference |\n  \
    \ +----------+--------------------------------------------+-----------+\n   |\
    \ 0x0000   | Reserved                                   | RFC 6320  |\n   | 0x0001\
    \   | Access-Loop-Circuit-ID                     | RFC 6320  |\n   | 0x0002  \
    \ | Access-Loop-Remote-ID                      | RFC 6320  |\n   | 0x0003   |\
    \ Access-Aggregation-Circuit-ID-ASCII        | RFC 6320  |\n   | 0x0004   | DSL-Line-Attributes\
    \                        | RFC 6320  |\n   | 0x0005   | Service-Profile-Name \
    \                      | RFC 6320  |\n   | 0x0006   | Access-Aggregation-Circuit-ID-Binary\
    \       | RFC 6320  |\n   | 0x0007   | OAM-Loopback-Test-Parameters          \
    \     | RFC 6320  |\n   | 0x0008   | Opaque-Data                             \
    \   | RFC 6320  |\n   | 0x0009   | OAM-Loopback-Test-Response-String         \
    \ | RFC 6320  |\n   | 0x0011   | Command                                    |\
    \ RFC 6320  |\n   | 0x0081   | Actual-Net-Data-Rate-Upstream              | RFC\
    \ 6320  |\n   | 0x0082   | Actual-Net-Data-Rate-Downstream            | RFC 6320\
    \  |\n   | 0x0083   | Minimum-Net-Data-Rate-Upstream             | RFC 6320  |\n\
    \   | 0x0084   | Minimum-Net-Data-Rate-Downstream           | RFC 6320  |\n  \
    \ | 0x0085   | Attainable-Net-Data-Rate-Upstream          | RFC 6320  |\n   |\
    \ 0x0086   | Attainable-Net-Data-Rate-Downstream        | RFC 6320  |\n   | 0x0087\
    \   | Maximum-Net-Data-Rate-Upstream             | RFC 6320  |\n   | 0x0088  \
    \ | Maximum-Net-Data-Rate-Downstream           | RFC 6320  |\n   | 0x0089   |\
    \ Minimum-Net-Low-Power-Data-Rate-Upstream   | RFC 6320  |\n   | 0x008A   | Minimum-Net-Low-Power-Data-Rate-Downstream\
    \ | RFC 6320  |\n   | 0x008B   | Maximum-Interleaving-Delay-Upstream        |\
    \ RFC 6320  |\n   | 0x008C   | Actual-Interleaving-Delay-Upstream         | RFC\
    \ 6320  |\n   | 0x008D   | Maximum-Interleaving-Delay-Downstream      | RFC 6320\
    \  |\n   | 0x008E   | Actual-Interleaving-Delay-Downstream       | RFC 6320  |\n\
    \   | 0x008F   | DSL-Line-State                             | RFC 6320  |\n  \
    \ | 0x0090   | Access-Loop-Encapsulation                  | RFC 6320  |\n   |\
    \ 0x0091   | DSL-Type                                   | RFC 6320  |\n   | 0x0106\
    \   | Status-Info                                | RFC 6320  |\n   | 0x1000  \
    \ | Target (single access line variant)        | RFC 6320  |\n   | 0x1001 - |\
    \ Reserved for Target variants               | RFC 6320  |\n   | 0x1020   |  \
    \                                          |           |\n   +----------+--------------------------------------------+-----------+\n"
- title: 10.7.  ANCP Capability Type Registry
  contents:
  - "10.7.  ANCP Capability Type Registry\n   IANA has created a new ANCP Capability\
    \ Type registry, with additions\n   by Standards Action as defined by [RFC5226].\
    \  Values may range from 0\n   to 255.  IANA SHOULD assign values sequentially\
    \ beginning at 5.  The\n   specification for a given capability MUST indicate\
    \ the Technology\n   Type value with which it is associated.  The specification\
    \ MUST\n   further indicate whether the capability is associated with any\n  \
    \ capability data.  Normally, a capability is expected to be defined in\n   the\
    \ same document that specifies the implementation of that\n   capability in protocol\
    \ terms.  The initial entries in the ANCP\n   capability registry are as follows:\n\
    \   +-------+------------------------+--------+-------------+-----------+\n  \
    \ | Value | Capability Type Name   | Tech   | Capability  | Reference |\n   |\
    \       |                        | Type   | Data?       |           |\n   +-------+------------------------+--------+-------------+-----------+\n\
    \   | 0     | Reserved               |        |             | RFC 6320  |\n  \
    \ | 1     | DSL Topology Discovery | 5      | No          | RFC 6320  |\n   |\
    \ 2     | DSL Line Configuration | 5      | No          | RFC 6320  |\n   | 3\
    \     | Reserved               |        |             | RFC 6320  |\n   | 4  \
    \   | DSL Line Testing       | 5      | No          | RFC 6320  |\n   +-------+------------------------+--------+-------------+-----------+\n"
- title: 10.8.  Joint GSMP / ANCP Version Registry
  contents:
  - "10.8.  Joint GSMP / ANCP Version Registry\n   IANA has created a new joint GSMP\
    \ / ANCP Version registry.  Additions\n   to this registry are by Standards Action\
    \ as defined by [RFC5226].\n   Values may range from 0 to 255.  Values for the\
    \ General Switch\n   Management Protocol (GSMP) MUST be assigned sequentially\
    \ beginning\n   with 4 for the next version.  Values for the Access Network Control\n\
    \   Protocol (ANCP) MUST be assigned sequentially beginning with 50 for\n   the\
    \ present version.  The initial entries are as follows:\n                 +---------+----------------+-----------+\n\
    \                 | Version | Description    | Reference |\n                 +---------+----------------+-----------+\n\
    \                 | 1       | GSMP Version 1 | RFC 1987  |\n                 |\
    \ 2       | GSMP Version 2 | RFC 2297  |\n                 | 3       | GSMP Version\
    \ 3 | RFC 3292  |\n                 | 50      | ANCP Version 1 | RFC 6320  |\n\
    \                 +---------+----------------+-----------+\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   Security of ANCP is discussed in [RFC5713].\
    \  A number of security\n   requirements on ANCP are stated in Section 8 of that\
    \ document.  Those\n   applicable to ANCP itself are copied to the present document:\n\
    \   o  The protocol solution MUST offer authentication of the AN to the\n    \
    \  NAS.\n   o  The protocol solution MUST offer authentication of the NAS to the\n\
    \      AN.\n   o  The protocol solution MUST allow authorization to take place\
    \ at\n      the NAS and the AN.\n   o  The protocol solution MUST offer replay\
    \ protection.\n   o  The protocol solution MUST provide data-origin authentication.\n\
    \   o  The protocol solution MUST be robust against denial-of-service\n      (DoS)\
    \ attacks.  In this context, the protocol solution MUST\n      consider a specific\
    \ mechanism for the DoS that the user might\n      create by sending many IGMP\
    \ messages.\n   o  The protocol solution SHOULD offer confidentiality protection.\n\
    \   o  The protocol solution SHOULD ensure that operations in default\n      configuration\
    \ guarantee a low number of AN/NAS protocol\n      interactions.\n   Most of these\
    \ requirements relate to secure transport of ANCP.\n   Robustness against denial-of-service\
    \ attacks partly depends on\n   transport and partly on protocol design.  Ensuring\
    \ a low number of\n   AN/NAS protocol interactions in default mode is purely a\
    \ matter of\n   protocol design.\n   For secure transport, either the combination\
    \ of IPsec with IKEv2\n   (references below) or the use of TLS [RFC5246] will\
    \ meet the\n   requirements listed above.  However, the use of TLS has been\n\
    \   rejected.  The deciding point is a detail of protocol design that was\n  \
    \ unavailable when [RFC5713] was written.  The ANCP adjacency is a\n   major point\
    \ of vulnerability for denial-of-service attacks.  If the\n   adjacency can be\
    \ shut down, either the AN clears its state pending\n   reestablishment of the\
    \ adjacency, or the possibility of mismatches\n   between the AN's and NAS's view\
    \ of state on the AN is opened up.  Two\n   ways to cause an adjacency to be taken\
    \ down are to modify messages so\n   that the ANCP agents conclude that they are\
    \ no longer synchronized,\n   or to attack the underlying TCP session.  TLS will\
    \ protect message\n   contents but not the TCP connection.  One has to use either\
    \ IPsec or\n   the TCP authentication option [RFC5925] for that.  Hence, the\n\
    \   conclusion that ANCP MUST run over IPsec with IKEv2 for\n   authentication\
    \ and key management.\n   In greater detail: the ANCP stack MUST include IPsec\
    \ [RFC4301]\n   running in transport mode, since the AN and NAS are the endpoints\
    \ of\n   the path.  The Encapsulating Security Payload (ESP) [RFC4303] MUST be\n\
    \   used, in order to satisfy the requirement for data confidentiality.\n   ESP\
    \ MUST be configured for the combination of confidentiality,\n   integrity, and\
    \ anti-replay capability.  The traffic flow\n   confidentiality service of ESP\
    \ is unnecessary and, in fact,\n   unworkable in the case of ANCP.\n   IKEv2 [RFC5996]\
    \ is also REQUIRED, to meet the requirements for mutual\n   authentication and\
    \ authorization.  Since the NAS and AN MAY be in\n   different trust domains,\
    \ the use of certificates for mutual\n   authentication could be the most practical\
    \ approach.  However, this\n   is up to the operator(s) concerned.\n   The AN\
    \ MUST play the role of initiator of the IKEv2 conversation.\n"
- title: 12.  Contributors
  contents:
  - "12.  Contributors\n   Swami Subramanian was an early member of the authors' team.\
    \  The ANCP\n   Working Group is grateful to Roberta Maglione, who served as design\n\
    \   team member and primary editor of this document for two years before\n   stepping\
    \ down.\n"
- title: 13.  Acknowledgements
  contents:
  - "13.  Acknowledgements\n   The authors would like to thank everyone who provided\
    \ comments or\n   inputs to this document.  The authors acknowledge the inputs\
    \ provided\n   by Wojciech Dec, Peter Arberg, Josef Froehler, Derek Harkness,\
    \ Kim\n   Hyldgaard, Sandy Ng, Robert Peschi, and Michel Platnic, and the\n  \
    \ further comments provided by Mykyta Yevstifeyev, Brian Carter, Ben\n   Campbell,\
    \ Alexey Melnikov, Adrian Farrel, Robert Sparks, Peter St.\n   Andre, Sean Turner,\
    \ Dan Romascanu, Brian Carter, and Michael Scott.\n"
- title: 14.  References
  contents:
  - '14.  References

    '
- title: 14.1.  Normative References
  contents:
  - "14.1.  Normative References\n   [RFC2119]      Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                  Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC3292]      Doria, A., Hellstrand, F., Sundell, K., and T.\n\
    \                  Worster, \"General Switch Management Protocol (GSMP)\n    \
    \              V3\", RFC 3292, June 2002.\n   [RFC3629]      Yergeau, F., \"UTF-8,\
    \ a transformation format of ISO\n                  10646\", STD 63, RFC 3629,\
    \ November 2003.\n   [RFC4301]      Kent, S. and K. Seo, \"Security Architecture\
    \ for the\n                  Internet Protocol\", RFC 4301, December 2005.\n \
    \  [RFC4303]      Kent, S., \"IP Encapsulating Security Payload (ESP)\",\n   \
    \               RFC 4303, December 2005.\n   [RFC5646]      Phillips, A. and M.\
    \ Davis, \"Tags for Identifying\n                  Languages\", BCP 47, RFC 5646,\
    \ September 2009.\n   [RFC5996]      Kaufman, C., Hoffman, P., Nir, Y., and P.\
    \ Eronen,\n                  \"Internet Key Exchange Protocol Version 2 (IKEv2)\"\
    ,\n                  RFC 5996, September 2010.\n"
- title: 14.2.  Informative References
  contents:
  - "14.2.  Informative References\n   [G.993.2]      \"ITU-T Recommendation G.993.2,\
    \ Very high speed digital\n                  subscriber line transceivers 2 (VDSL2)\"\
    , 2006.\n   [G.998.1]      \"ITU-T Recommendation G.998.1, ATM-based multi-pair\n\
    \                  bonding\", 2005.\n   [G.998.2]      \"ITU-T Recommendation\
    \ G.998.2, Ethernet-based multi-\n                  pair bonding,\", 2005.\n \
    \  [IEEE802.1Q]   IEEE, \"IEEE 802.1Q-2005, IEEE Standard for Local and\n    \
    \              Metropolitan Area Networks - Virtual Bridged Local\n          \
    \        Area Networks - Revision\", 2005.\n   [IEEE802.1ad]  IEEE, \"IEEE 802.1ad-2005,\
    \ Amendment to IEEE 802.1Q-\n                  2005. IEEE Standard for Local and\
    \ Metropolitan Area\n                  Networks - Virtual Bridged Local Area Networks\
    \ -\n                  Revision - Amendment 4: Provider Bridges\", 2005.\n   [RFC2131]\
    \      Droms, R., \"Dynamic Host Configuration Protocol\",\n                 \
    \ RFC 2131, March 1997.\n   [RFC3046]      Patrick, M., \"DHCP Relay Agent Information\
    \ Option\",\n                  RFC 3046, January 2001.\n   [RFC3315]      Droms,\
    \ R., Bound, J., Volz, B., Lemon, T., Perkins,\n                  C., and M. Carney,\
    \ \"Dynamic Host Configuration\n                  Protocol for IPv6 (DHCPv6)\"\
    , RFC 3315, July 2003.\n   [RFC4649]      Volz, B., \"Dynamic Host Configuration\
    \ Protocol for\n                  IPv6 (DHCPv6) Relay Agent Remote-ID Option\"\
    , RFC 4649,\n                  August 2006.\n   [RFC5226]      Narten, T. and\
    \ H. Alvestrand, \"Guidelines for Writing\n                  an IANA Considerations\
    \ Section in RFCs\", BCP 26,\n                  RFC 5226, May 2008.\n   [RFC5246]\
    \      Dierks, T. and E. Rescorla, \"The Transport Layer\n                  Security\
    \ (TLS) Protocol Version 1.2\", RFC 5246,\n                  August 2008.\n  \
    \ [RFC5713]      Moustafa, H., Tschofenig, H., and S. De Cnodder,\n          \
    \        \"Security Threats and Security Requirements for the\n              \
    \    Access Node Control Protocol (ANCP)\", RFC 5713,\n                  January\
    \ 2010.\n   [RFC5851]      Ooghe, S., Voigt, N., Platnic, M., Haag, T., and S.\n\
    \                  Wadhwa, \"Framework and Requirements for an Access Node\n \
    \                 Control Mechanism in Broadband Multi-Service\n             \
    \     Networks\", RFC 5851, May 2010.\n   [RFC5925]      Touch, J., Mankin, A.,\
    \ and R. Bonica, \"The TCP\n                  Authentication Option\", RFC 5925,\
    \ June 2010.\n   [TR-058]       Broadband Forum, \"TR-058, Multi-Service Architecture\
    \ &\n                  Framework Requirements\", September 2003.\n   [TR-059]\
    \       Broadband Forum, \"TR-059, DSL Evolution - Architecture\n            \
    \      Requirements for the Support of QoS-Enabled IP\n                  Services\"\
    , September 2003.\n   [TR-092]       Broadband Forum, \"TR-092, Broadband Remote\
    \ access\n                  server requirements document\", 2005.\n   [TR-101]\
    \       Broadband Forum, \"TR-101, Architecture & Transport:\n               \
    \   Migration to Ethernet Based DSL Aggregation\", 2005.\n   [TR-147]       Broadband\
    \ Forum, \"TR-147, Layer 2 Control Mechanism\n                  For Broadband\
    \ Multi-Service Architectures\", 2008.\n   [US_ASCII]     American National Standards\
    \ Institute, \"Coded\n                  Character Set - 7-bit American Standard\
    \ Code for\n                  Information Interchange\", ANSI X.34, 1986.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Sanjay Wadhwa\n   Alcatel-Lucent\n   701 E Middlefield\
    \ Rd\n   Mountain View, CA  94043-4079\n   USA\n   EMail: sanjay.wadhwa@alcatel-lucent.com\n\
    \   Jerome Moisand\n   Juniper Networks\n   10 Technology Park Drive\n   Westford,\
    \ MA  01886\n   USA\n   EMail: jmoisand@juniper.net\n   Thomas Haag\n   Deutsche\
    \ Telekom\n   Heinrich-Hertz-Strasse 3-7\n   Darmstadt  64295\n   Germany\n  \
    \ EMail: haagt@telekom.de\n   Norbert Voigt\n   Nokia Siemens Networks\n   Siemensallee\
    \ 1\n   Greifswald  17489\n   Germany\n   EMail: norbert.voigt@nsn.com\n   Tom\
    \ Taylor (editor)\n   Huawei Technologies\n   1852 Lorraine Ave\n   Ottawa\n \
    \  Canada\n   EMail: tom111.taylor@bell.net\n"
