- title: __initial_text__
  contents:
  - '         Location-Independent Data/Software Integrity Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes a protocol for adding integrity assurance to\n\
    \   files that are distributed across the Internet.  This protocol is\n   intended\
    \ for the distribution of software, data, documents, and any\n   other file that\
    \ is subject to malicious modification.  The protocol\n   described here is intended\
    \ to provide assurances of integrity and\n   time.  A trusted third party is required.\n"
- title: Introduction
  contents:
  - "Introduction\n   One problem with any system for verifying the integrity of a\
    \ file is\n   that the verifying program itself may be attacked. Thus, although\n\
    \   users may be reassured by their software that a file has not changed,\n  \
    \ in reality, the file, and the verifier might have both changed.\n   Because\
    \ of this danger, a protocol that does not rely on the\n   distribution of some\
    \ special software, but rather, is based entirely\n   on widely used standards,\
    \ is very useful. It allows users to build\n   their own software, or obtain trusted\
    \ copies of software to do\n   integrity checking independently. Therefore, the\
    \ protocol described\n   in this memo is composed of ASCII messages that may be\
    \ sent using e-\n   mail or any other means. There is an existing implementation,\
    \ Betsi\n   [1], that is designed this way. Betsi has been in existence since\n\
    \   August, 1994, and is operational on the Internet. It can be accessed\n   by\
    \ sending e-mail to certify@bellcore.com with subject 'help', or via\n   the world\
    \ wide web at http://info.bellcore.com/BETSI/betsi.html.\n   The purpose of the\
    \ proposed protocol is for authors to be able to\n   distribute their files to\
    \ users on the internet with guarantees of\n   time and integrity, by use of a\
    \ trusted third party. The protocol is\n   divided into several phases:\n    \
    \       I.   Author registration\n           II.  Author verification\n      \
    \     III. File Certification\n           IV.  File Distribution\n           V.\
    \   File Integrity Verification\n   Phases I, III, IV, and V are defined in the\
    \ protocol. Phase II is\n   intentionally not defined. Author verification can\
    \ be different for\n   different applications, and the particular method chosen\
    \ for phase II\n   is identified in phases III and V.  It is the hope that further\n\
    \   Internet Drafts will describe the various possibilities for phase II.\n  \
    \ This memo describes the method for author verification in the Betsi\n   system,\
    \ and makes several recommendations.\n"
- title: Requirements
  contents:
  - "Requirements\n   It is important that the integrity and time information be\n\
    \   independent from the location of the file. Lowry [2] defines a syntax\n  \
    \ and protocols for location-independent objects.  His system requires\n   that\
    \ end-users possess special software, and is still in the\n   prototype stage.\
    \  The protocol described in this memo has been\n   implemented, and is already\
    \ in wide-spread use across the Internet.\n   It is simple, compact and easy to\
    \ understand.  The disadvantage of a\n   very complex system is that users may\
    \ not be inclined to trust the\n   designers' claims if they cannot understand\
    \ how it works.\n"
- title: Assumptions
  contents:
  - "Assumptions\n   The three entities in the protocol are Authors (A), Users (U),\
    \ and a\n   Trusted third party (T).  The protocol described here is algorithm\n\
    \   independent, and all of the messages are in ASCII.  It is assumed\n   that\
    \ for each signature scheme used, there is a well-known\n   verification key associated\
    \ with T.\n   Any signature scheme may be used, as long as there is a standard\n\
    \   ASCII representation of a digital signature. PGP [3] meets all of the\n  \
    \ above requirements, but it also requires encryption, and thus, export\n   restrictions\
    \ may deter some users. The DSS [4] is recommended, but\n   some suspect that\
    \ it contains a trapdoor [5] based on some results by\n   Simmons [6]. It is also\
    \ not clear that there is a standard for\n   generating an ASCII signature using\
    \ the DSS.\n"
- title: High level view
  contents:
  - "High level view\n   The protocol works as follows. In the first phase, authors\
    \ request to\n   register with the trusted third party, T.  Any registered author\
    \ can\n   distribute files with integrity and time assurance. Time assurance\n\
    \   means that there is a guarantee that a file existed at a given time.\n   In\
    \ the second phase, T somehow verifies the identity of an author who\n   requests\
    \ to register.  Registration is not complete until this\n   verification takes\
    \ place.\n   To distribute a file, a registered author computes a cryptographic\n\
    \   hash of the file, and sends it over an integrity protected channel to\n  \
    \ T. T then creates an object containing the hash, the current time,\n   the name\
    \ of the author, the name of the file, and some other\n   information, seals the\
    \ object, and returns it to the author. The\n   author can then use the sealed\
    \ object as a location-independent proof\n   of the integrity and timeliness of\
    \ the file.\n   Any user who obtains the file and the sealed object, can compute\
    \ the\n   cryptographic hash of the file, check the seal on the object, and\n\
    \   verify that the object has not changed.\n   The trusted third party must maintain\
    \ a widely available, dated, and\n   signed, certificate revocation list (CRL).\
    \ Users who access a file\n   with a certificate must check that the CRL is current\
    \ and complete,\n   and that the certificate is not listed.\n"
- title: Author registration
  contents:
  - "Author registration\n   In the first phase, authors request to register with\
    \ the trusted\n   third party, T. The author sends an ASCII message to T containing\n\
    \   keywords followed by values. Some of the fields are optional, and are\n  \
    \ marked with a *. The values are represented with angle brackets < >.\n     AUTHOR-NAME=\
    \ <first m. last>\n   * AUTHOR-ORGANIZATION= <Company, school, etc.>\n   * AUTHOR-EMAIL=\
    \ <e-mail address>\n     AUTHOR-LOCATION= <city, state>\n   * AUTHOR-PHONE-1=\
    \ <Home phone>\n   * AUTHOR-PHONE-2= <Work phone>\n     SIGNATURE-SYSTEM= <name\
    \ of signature system>\n   * MISC-FIELD-n= <Any number of additional fields can\
    \ be defined here>\n   * AUTHOR-PUBLIC-KEY=\n   * <public key of author>\n   Each\
    \ of the fields contains the keyword and the value on the same\n   line, except\
    \ for the public key. An ASCII version of the key is\n   pasted on the line after\
    \ the AUTHOR-PUBLIC-KEY keyword.  The format\n   of this ASCII key will depend\
    \ on the signature system used.  The\n   public key field is optional. The user\
    \ may include his own, or one\n   can be supplied by T during phase II.  T responds\
    \ with a message that\n   the request was received, and that the user should wait\
    \ for off-line\n   verification.  If a user receives this confirmation message,\
    \ and he\n   did not request to register, he knows that somebody may be attempting\n\
    \   to register on his behalf.\n"
- title: Author verification
  contents:
  - "Author verification\n   The trusted third party, T, must verify the identity\
    \ of the author\n   who sent the request message in phase I.  The rest of the\
    \ information\n   in the request is also confirmed.  This process takes place\
    \ off-line.\n   The method used is intentionally left open, but whatever technique\
    \ is\n   used must be identified in phases III and V.\n   In the Betsi implementation,\
    \ T uses the phone company infrastructure.\n   T calls directory assistance (1-xxx-555-1212)\
    \ in the city of the\n   author and asks for the author's number. Then, that number\
    \ is called,\n   and T asks the author to verify the information sent in the request.\n\
    \   In particular, T insures that the author has registered his correct\n   public\
    \ key. Or, in some cases, T assigns a public key to the author.\n   As Betsi is\
    \ only operational in the United States, other mechanisms\n   need to be in place\
    \ for verifying identities of people\n   internationally. Hopefully, standards\
    \ for doing this will arise. The\n   rest of the protocol is independent of whatever\
    \ mechanism is used for\n   off-line identity and public key verification.\n"
- title: File certification
  contents:
  - "File certification\n   Registered authors can obtain location-independent objects\
    \ from the\n   trusted third party, T, that vouch for the integrity and time of\
    \ any\n   file.\n   An author generates the following ASCII message and signs\
    \ it with the\n   signature key that corresponds to the public key that was registered.\n\
    \     AUTHOR-NAME= <first m. last>\n     HASH-FUNCTION= <md5,sha, etc.>\n   *\
    \ FILE-LOCATION= <ftp site/directory>\n     <list of hashes>\n   Each entry in\
    \ the <list of hashes> consists of two mandatory fields\n   and one optional one,\
    \ as follows:\n     <fixed-length hash of file> <name of file> <version number>\n\
    \   The <fixed-length hash of file> is a fixed-length hexadecimal value\n   corresponding\
    \ to the hash of the contents of the file.  For MD5, the\n   output is 32 hexadecimal\
    \ digits. There is one space between the\n   fields, and the name of the file\
    \ contains no spaces.  The <version\n   number> is optional.  The <list of hashes>\
    \ contains at least one\n   entry, and may contain as many as the author wants.\
    \  The message is\n   signed and sent to the trusted third party, T.\n   When\
    \ T receives the request for file certification, he verifies the\n   signature\
    \ on the request and creates a location-independent\n   certificate for the request.\
    \ The certificate is signed by T, and\n   contains the following information:\n\
    \     TRUSTED-PARTY= <identity of T>\n     AUTHOR-VERIFICATION-METHOD= <how authors\
    \ are verified off-line>\n     AUTHOR-NAME= <first m. last>\n     AUTHOR-ORGANIZATION=\
    \ <company, school, etc.>\n     HASH-FUNCTION= <md5,sha, etc.>\n     DATE= <date>\n\
    \     <list of hashes>\n   The <list of hashes> is the same as the one in the\
    \ author's request.\n   T signs the message and sends it to the author, who verifies\
    \ the\n   signature and the contents of the certificate.  Note that the method\n\
    \   for off-line author verification is included in the certificate.\n"
- title: File distribution
  contents:
  - "File distribution\n   In the file distribution phase, the author distributes\
    \ his file,\n   along with the certificate from T. The file and certificate are\n\
    \   location-independent. That is,  the integrity and timeliness of the\n   file\
    \ can be verified independently from the location of the file and\n   the certificate.\
    \ This means that files can be distributed from\n   insecure sites, and over insecure\
    \ networks.\n"
- title: File integrity verification
  contents:
  - "File integrity verification\n   The final phase is file integrity verification.\
    \ A user obtains the\n   public key of the trusted third party, T, from several\
    \ independent\n   sources, until he is convinced of its authenticity.  The user\
    \ then\n   verifies the certificate for a file, and decides whether or not he\n\
    \   trusts the method of off-line verification that was used by T. If so,\n  \
    \ then he extracts the name of the hash function in the certificate,\n   and performs\
    \ the hash function on the actual file. Finally, the user\n   compares the hash\
    \ of the file to the hash in the certificate. The\n   user also checks the date\
    \ in the certificate if he is concerned with\n   this information.  As a last\
    \ step, the user checks the highly\n   available certificate revocation list of\
    \ T, to see if the current\n   certificate is listed.  When all of this has concluded,\
    \ if none of\n   the assumptions of the system has been violated, then the user\
    \ is\n   assured of the integrity and timeliness of the file.\n"
- title: References
  contents:
  - "References\n   [1] Rubin, A., \"Trusted Distribution of Software over the Internet\"\
    ,\n       Internet Society Symposium on Network and Distributed System\n     \
    \  Security,\" pp. 47-53, 1995.\n   [2] Lowrey, J., \"Location-Independent Information\
    \ Object Security\",\n       Internet Society Symposium on Network and Distributed\
    \ System\n       Security,\" pp. 54-62, 1995.\n   [3] Zimmerman, P., \"PGP User's\
    \ Guide\", 1992.\n   [4] National Institute for Standards and Technology, Digital\n\
    \       Signature Standard (DSS), Federal Register 56(169), 1991.\n   [5] Schneier,\
    \ B., \"Applied Cryptography\", ISBN 0-471-59756-2.\n   [6] Simmons, G., \"The\
    \ Subliminal Channels of the U.S.  Digital\n       Signature Algorithm (DSA)\"\
    , Proceedings of the 3rd Symposium on:\n       State and Progress of research\
    \ in Cryptography, pp. 35-54, 1993.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are discussed throughout this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Aviel D. Rubin\n   Bellcore\n   Morristown, NJ 07960\n \
    \  USA\n   Phone: +1 201 829 5922\n   Fax: +1 201 829 2645\n   EMail: rubin@bellcore.com\n"
