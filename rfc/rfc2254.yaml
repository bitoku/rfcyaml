- title: __initial_text__
  contents:
  - '            The String Representation of LDAP Search Filters

    '
- title: 1. Status of this Memo
  contents:
  - "1. Status of this Memo\n   This document specifies an Internet standards track\
    \ protocol for the\n   Internet community, and requests discussion and suggestions\
    \ for\n   improvements.  Please refer to the current edition of the \"Internet\n\
    \   Official Protocol Standards\" (STD 1) for the standardization state\n   and\
    \ status of this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1997).  All Rights Reserved.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This document describes a directory access protocol that provides\n\
    \   both read and update access.  Update access requires secure\n   authentication,\
    \ but this document does not mandate implementation of\n   any satisfactory authentication\
    \ mechanisms.\n   In accordance with RFC 2026, section 4.4.1, this specification\
    \ is\n   being approved by IESG as a Proposed Standard despite this\n   limitation,\
    \ for the following reasons:\n   a. to encourage implementation and interoperability\
    \ testing of\n      these protocols (with or without update access) before they\n\
    \      are deployed, and\n   b. to encourage deployment and use of these protocols\
    \ in read-only\n      applications.  (e.g. applications where LDAPv3 is used as\n\
    \      a query language for directories which are updated by some\n      secure\
    \ mechanism other than LDAP), and\n   c. to avoid delaying the advancement and\
    \ deployment of other Internet\n      standards-track protocols which require\
    \ the ability to query, but\n      not update, LDAPv3 directory servers.\n   Readers\
    \ are hereby warned that until mandatory authentication\n   mechanisms are standardized,\
    \ clients and servers written according to\n   this specification which make use\
    \ of update functionality are\n   UNLIKELY TO INTEROPERATE, or MAY INTEROPERATE\
    \ ONLY IF AUTHENTICATION\n   IS REDUCED TO AN UNACCEPTABLY WEAK LEVEL.\n   Implementors\
    \ are hereby discouraged from deploying LDAPv3 clients or\n   servers which implement\
    \ the update functionality, until a Proposed\n   Standard for mandatory authentication\
    \ in LDAPv3 has been approved and\n   published as an RFC.\n"
- title: 2. Abstract
  contents:
  - "2. Abstract\n   The Lightweight Directory Access Protocol (LDAP) [1] defines\
    \ a\n   network representation of a search filter transmitted to an LDAP\n   server.\
    \  Some applications may find it useful to have a common way of\n   representing\
    \ these search filters in a human-readable form.  This\n   document defines a\
    \ human-readable string format for representing LDAP\n   search filters.\n   This\
    \ document replaces RFC 1960, extending the string LDAP filter\n   definition\
    \ to include support for LDAP version 3 extended match\n   filters, and including\
    \ support for representing the full range of\n   possible LDAP search filters.\n"
- title: 3. LDAP Search Filter Definition
  contents:
  - "3. LDAP Search Filter Definition\n   An LDAPv3 search filter is defined in Section\
    \ 4.5.1 of [1] as\n   follows:\n        Filter ::= CHOICE {\n                and\
    \                [0] SET OF Filter,\n                or                 [1] SET\
    \ OF Filter,\n                not                [2] Filter,\n               \
    \ equalityMatch      [3] AttributeValueAssertion,\n                substrings\
    \         [4] SubstringFilter,\n                greaterOrEqual     [5] AttributeValueAssertion,\n\
    \                lessOrEqual        [6] AttributeValueAssertion,\n           \
    \     present            [7] AttributeDescription,\n                approxMatch\
    \        [8] AttributeValueAssertion,\n                extensibleMatch    [9]\
    \ MatchingRuleAssertion\n        }\n        SubstringFilter ::= SEQUENCE {\n \
    \               type    AttributeDescription,\n                SEQUENCE OF CHOICE\
    \ {\n                        initial        [0] LDAPString,\n                \
    \        any            [1] LDAPString,\n                        final       \
    \   [2] LDAPString\n                }\n        }\n        AttributeValueAssertion\
    \ ::= SEQUENCE {\n                attributeDesc   AttributeDescription,\n    \
    \            attributeValue  AttributeValue\n        }\n        MatchingRuleAssertion\
    \ ::= SEQUENCE {\n                matchingRule    [1] MatchingRuleID OPTIONAL,\n\
    \                type            [2] AttributeDescription OPTIONAL,\n        \
    \        matchValue      [3] AssertionValue,\n                dnAttributes   \
    \ [4] BOOLEAN DEFAULT FALSE\n        }\n        AttributeDescription ::= LDAPString\n\
    \        AttributeValue ::= OCTET STRING\n        MatchingRuleID ::= LDAPString\n\
    \        AssertionValue ::= OCTET STRING\n        LDAPString ::= OCTET STRING\n\
    \   where the LDAPString above is limited to the UTF-8 encoding of the\n   ISO\
    \ 10646 character set [4].  The AttributeDescription is a string\n   representation\
    \ of the attribute description and is defined in [1].\n   The AttributeValue and\
    \ AssertionValue OCTET STRING have the form\n   defined in [2].  The Filter is\
    \ encoded for transmission over a\n   network using the Basic Encoding Rules defined\
    \ in [3], with\n   simplifications described in [1].\n"
- title: 4. String Search Filter Definition
  contents:
  - "4. String Search Filter Definition\n   The string representation of an LDAP search\
    \ filter is defined by the\n   following grammar, following the ABNF notation\
    \ defined in [5].  The\n   filter format uses a prefix notation.\n        filter\
    \     = \"(\" filtercomp \")\"\n        filtercomp = and / or / not / item\n \
    \       and        = \"&\" filterlist\n        or         = \"|\" filterlist\n\
    \        not        = \"!\" filter\n        filterlist = 1*filter\n        item\
    \       = simple / present / substring / extensible\n        simple     = attr\
    \ filtertype value\n        filtertype = equal / approx / greater / less\n   \
    \     equal      = \"=\"\n        approx     = \"~=\"\n        greater    = \"\
    >=\"\n        less       = \"<=\"\n        extensible = attr [\":dn\"] [\":\"\
    \ matchingrule] \":=\" value\n                     / [\":dn\"] \":\" matchingrule\
    \ \":=\" value\n        present    = attr \"=*\"\n        substring  = attr \"\
    =\" [initial] any [final]\n        initial    = value\n        any        = \"\
    *\" *(value \"*\")\n        final      = value\n        attr       = AttributeDescription\
    \ from Section 4.1.5 of [1]\n        matchingrule = MatchingRuleId from Section\
    \ 4.1.9 of [1]\n        value      = AttributeValue from Section 4.1.6 of [1]\n\
    \   The attr, matchingrule, and value constructs are as described in the\n   corresponding\
    \ section of [1] given above.\n   If a value should contain any of the following\
    \ characters\n           Character       ASCII value\n           ---------------------------\n\
    \           *               0x2a\n           (               0x28\n          \
    \ )               0x29\n           \\               0x5c\n           NUL     \
    \        0x00\n   the character must be encoded as the backslash '\\' character\
    \ (ASCII\n   0x5c) followed by the two hexadecimal digits representing the ASCII\n\
    \   value of the encoded character. The case of the two hexadecimal\n   digits\
    \ is not significant.\n   This simple escaping mechanism eliminates filter-parsing\
    \ ambiguities\n   and allows any filter that can be represented in LDAP to be\n\
    \   represented as a NUL-terminated string. Other characters besides the\n   ones\
    \ listed above may be escaped using this mechanism, for example,\n   non-printing\
    \ characters.\n   For example, the filter checking whether the \"cn\" attribute\
    \ contained\n   a value with the character \"*\" anywhere in it would be represented\
    \ as\n   \"(cn=*\\2a*)\".\n   Note that although both the substring and present\
    \ productions in the\n   grammar above can produce the \"attr=*\" construct, this\
    \ construct is\n   used only to denote a presence filter.\n"
- title: 5. Examples
  contents:
  - "5. Examples\n   This section gives a few examples of search filters written using\n\
    \   this notation.\n        (cn=Babs Jensen)\n        (!(cn=Tim Howes))\n    \
    \    (&(objectClass=Person)(|(sn=Jensen)(cn=Babs J*)))\n        (o=univ*of*mich*)\n\
    \   The following examples illustrate the use of extensible matching.\n      \
    \  (cn:1.2.3.4.5:=Fred Flintstone)\n        (sn:dn:2.4.6.8.10:=Barney Rubble)\n\
    \        (o:dn:=Ace Industry)\n        (:dn:2.4.6.8.10:=Dino)\n   The second example\
    \ illustrates the use of the \":dn\" notation to\n   indicate that matching rule\
    \ \"2.4.6.8.10\" should be used when making\n   comparisons, and that the attributes\
    \ of an entry's distinguished name\n   should be considered part of the entry\
    \ when evaluating the match.\n   The third example denotes an equality match,\
    \ except that DN\n   components should be considered part of the entry when doing\
    \ the\n   match.\n   The fourth example is a filter that should be applied to\
    \ any\n   attribute supporting the matching rule given (since the attr has been\n\
    \   left off). Attributes supporting the matching rule contained in the\n   DN\
    \ should also be considered.\n   The following examples illustrate the use of\
    \ the escaping mechanism.\n        (o=Parens R Us \\28for all your parenthetical\
    \ needs\\29)\n        (cn=*\\2A*)\n        (filename=C:\\5cMyFile)\n        (bin=\\\
    00\\00\\00\\04)\n        (sn=Lu\\c4\\8di\\c4\\87)\n   The first example shows\
    \ the use of the escaping mechanism to\n   represent parenthesis characters. The\
    \ second shows how to represent a\n   \"*\" in a value, preventing it from being\
    \ interpreted as a substring\n   indicator. The third illustrates the escaping\
    \ of the backslash\n   character.\n   The fourth example shows a filter searching\
    \ for the four-byte value\n   0x00000004, illustrating the use of the escaping\
    \ mechanism to\n   represent arbitrary data, including NUL characters.\n   The\
    \ final example illustrates the use of the escaping mechanism to\n   represent\
    \ various non-ASCII UTF-8 characters.\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   This memo describes a string representation of\
    \ LDAP search filters.\n   While the representation itself has no known security\
    \ implications,\n   LDAP search filters do. They are interpreted by LDAP servers\
    \ to\n   select entries from which data is retrieved.  LDAP servers should\n \
    \  take care to protect the data they maintain from unauthorized access.\n"
- title: 7. References
  contents:
  - "7. References\n   [1] Wahl, M., Howes, T., and S. Kille, \"Lightweight Directory\
    \ Access\n   Protocol (v3)\", RFC 2251, December 1997.\n   [2] Wahl, M., Coulbeck,\
    \ A., Howes, T., and S. Kille, \"Lightweight\n   Directory Access Protocol (v3):\
    \ Attribute Syntax Definitions\", RFC\n   2252, December 1997.\n   [3] Specification\
    \ of ASN.1 encoding rules: Basic, Canonical, and\n   Distinguished Encoding Rules,\
    \ ITU-T Recommendation X.690, 1994.\n   [4] Yergeau, F., \"UTF-8, a transformation\
    \ format of Unicode and ISO\n   10646\", RFC 2044, October 1996.\n   [5] Crocker,\
    \ D., \"Standard for the Format of ARPA Internet Text\n   Messages\", STD 11,\
    \ RFC 822, August 1982.\n"
- title: 8. Author's Address
  contents:
  - "8. Author's Address\n   Tim Howes\n   Netscape Communications Corp.\n   501 E.\
    \ Middlefield Road\n   Mountain View, CA 94043\n   USA\n   Phone: +1 415 937-3419\n\
    \   EMail: howes@netscape.com\n"
- title: 9. Full Copyright Statement
  contents:
  - "9. Full Copyright Statement\n   Copyright (C) The Internet Society (1997).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
