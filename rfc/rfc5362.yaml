- contents:
  - ' The Session Initiation Protocol (SIP) Pending Additions Event Package

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   This document defines the SIP Pending Additions event package.  This\n
    \  event package is used by SIP relays to inform user agents about the\n   consent-related
    status of the entries to be added to a resource list.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Terminology .....................................................3\n   3.
    Overview of Operation ...........................................3\n   4. XML
    Schema Definition ...........................................3\n   5. Pending
    Additions Event Package Definition ......................5\n      5.1. Event Package
    Name .........................................5\n           5.1.1. Event Package
    Parameters ............................5\n           5.1.2. SUBSCRIBE Bodies ....................................5\n
    \          5.1.3. Subscription Duration ...............................5\n           5.1.4.
    NOTIFY Bodies .......................................5\n           5.1.5. Notifier
    Processing of SUBSCRIBE Requests ...........6\n           5.1.6. Notifier Generation
    of NOTIFY Requests ..............6\n           5.1.7. Subscriber Processing of
    NOTIFY Requests ............6\n           5.1.8. Handling of Forked Requests .........................7\n
    \          5.1.9. Rate of Notifications ...............................7\n           5.1.10.
    State Agents .......................................7\n           5.1.11. Example
    ............................................7\n   6. Partial Notifications ...........................................8\n
    \     6.1. Generation of Partial Notifications ........................8\n      6.2.
    Processing of Partial Notifications ........................9\n      6.3. XML
    Schema for Partial Notifications .......................9\n      6.4. Examples
    ..................................................11\n   7. IANA Considerations
    ............................................11\n      7.1. SIP Event Package Registration
    ............................11\n      7.2. URN Sub-Namespace Registration: consent-status
    ............12\n      7.3. XML Schema Registration: consent-status ...................12\n
    \     7.4. XML Schema Registration: resource-lists ...................13\n      7.5.
    MIME Type Registration:\n           application/resource-lists-diff+xml .......................13\n
    \  8. Security Considerations ........................................14\n   9.
    Acknowledgments ................................................14\n   10. Normative
    References ..........................................14\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The framework for consent-based communications in SIP [RFC5360]\n
    \  identifies the need for users manipulating the translation logic at a\n   relay
    (e.g., adding a new recipient) to be informed about the\n   consent-related status
    of the recipients of a given translation.\n   That is, the user manipulating the
    translation logic needs to know\n   which recipients have given the relay permission
    to send them SIP\n   requests.\n   This document defines a SIP event package whereby
    user agents can\n   subscribe to the consent-related state of the resources that
    are\n   being added to a resource list that defines a translation.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in [RFC2119].\n   Relay:
    \ Any SIP server, be it a proxy, B2BUA (Back-to-Back User\n      Agent), or some
    hybrid, that receives a request, translates its\n      Request-URI into one or
    more next-hop URIs (i.e., recipient URIs),\n      and delivers the request to
    those URIs.\n"
  title: 2.  Terminology
- contents:
  - "3.  Overview of Operation\n   A user agent subscribes to a relay using the Pending
    Additions event\n   package.  NOTIFY requests within this event package can carry
    an XML\n   document in the \"application/resource-lists+xml\" format [RFC4826]
    or\n   in the \"application/resource-lists-diff+xml\" format, which is based\n
    \  on XML patch operations [RFC5261].\n   A document in the \"application/resource-lists+xml\"
    format provides\n   the user agent with the whole list of resources being added
    to a\n   resource list along with the consent-related status of those\n   resources.
    \ A document in the \"application/resource-lists-diff+xml\"\n   format provides
    the user agent with the changes the list of resources\n   being added has experimented
    with since the last notification sent to\n   the user agent.\n"
  title: 3.  Overview of Operation
- contents:
  - "4.  XML Schema Definition\n   This section defines the <consent-status> element,
    which provides\n   consent-related information about a resource to be added to
    a relay's\n   translation logic.\n   A consent-status document is an XML document
    that MUST be well-formed\n   and SHOULD be valid.  Consent-status documents MUST
    be based on XML\n   1.0 and MUST be encoded using UTF-8.  This specification makes
    use of\n   XML namespaces for identifying consent-status documents.  The\n   namespace
    URI for elements defined for this purpose is a URN, using\n   the namespace identifier
    'ietf'.  This URN is:\n                   urn:ietf:params:xml:ns:consent-status\n
    \  <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <xs:schema targetNamespace=\"urn:ietf:params:xml:ns:consent-status\"\n
    \    elementFormDefault=\"qualified\"\n     attributeFormDefault=\"unqualified\"\n
    \    xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n     xmlns:tns=\"urn:ietf:params:xml:ns:consent-status\">\n
    \     <xs:element name=\"consent-status\">\n         <xs:simpleType>\n           <xs:restriction
    base=\"xs:string\">\n             <xs:enumeration value=\"pending\"/>\n             <xs:enumeration
    value=\"waiting\"/>\n             <xs:enumeration value=\"error\"/>\n             <xs:enumeration
    value=\"denied\"/>\n             <xs:enumeration value=\"granted\"/>\n           </xs:restriction>\n
    \        </xs:simpleType>\n      </xs:element>\n   </xs:schema>\n   The <consent-status>
    element can take on the following values:\n   Pending:  the relay has received
    a request to add a resource to its\n      translation logic and will ask for permission
    to do so.\n   Waiting:  the relay has requested permission to add the resource
    to\n      its translation logic but has not gotten any answer from the\n      resource
    yet.\n   Error:  the relay has requested permission to add the resource to its\n
    \     translation logic and has received an error response (e.g., a SIP\n      error
    response to the MESSAGE request sent to request permission).\n      That is, the
    permission document requesting permission could not\n      be delivered to the
    resource.\n   Denied:  the resource has denied the relay permission to add the\n
    \     resource to the relay's translation logic.\n   Granted:  the resource has
    granted the relay permission to add the\n      resource to the relay's translation
    logic.\n   Section 5.1.11 contains an example of an \"application/resource-\n
    \  lists+xml\" document that carries consent-related state information\n   using
    <consent-status> elements.\n"
  title: 4.  XML Schema Definition
- contents:
  - "5.  Pending Additions Event Package Definition\n   This section provides the
    details for defining a SIP [RFC3261] event\n   notification package, as specified
    by [RFC3265].  Support for this\n   section (i.e., Section 5) is REQUIRED for
    implementations of this\n   specification.  Support for partial notifications
    is optional, but if\n   a subscriber signals support for partial notifications,
    Section 6\n   MUST be implemented.\n"
  - contents:
    - "5.1.  Event Package Name\n   The name of this event package is \"consent-pending-additions\".
      \ This\n   package name is carried in the Event and Allow-Events header, as\n
      \  defined in [RFC3265].\n"
    - contents:
      - "5.1.1.  Event Package Parameters\n   This package does not define any event
        package parameters.\n"
      title: 5.1.1.  Event Package Parameters
    - contents:
      - "5.1.2.  SUBSCRIBE Bodies\n   A SUBSCRIBE for Pending Additions events MAY
        contain a body.  This\n   body would serve the purpose of filtering the subscription.
        \ Filter\n   documents are not specified in this document and, at the time
        of\n   writing, they are expected to be the subject of future\n   standardization
        activity.\n   A SUBSCRIBE for the Pending Additions event package MAY be sent\n
        \  without a body.  This implies that the default session policy\n   filtering
        policy has been requested.  The default policy is that\n   notifications are
        generated every time there is any change in the\n   state of a resource in
        the list.\n"
      title: 5.1.2.  SUBSCRIBE Bodies
    - contents:
      - "5.1.3.  Subscription Duration\n   The default expiration time for a subscription
        is one hour (3600\n   seconds).\n"
      title: 5.1.3.  Subscription Duration
    - contents:
      - "5.1.4.  NOTIFY Bodies\n   In this event package, the body of the notifications
        contains a\n   resource list document.  This document describes the resources
        being\n   added as recipients to a translation operation.  All subscribers
        and\n   notifiers MUST support the \"application/resource-lists+xml\" data\n
        \  format [RFC4826] and its extension to carry consent-related state\n   information,
        which is specified in Section 4.  The SUBSCRIBE request\n   MAY contain an
        Accept header field.  If no such header field is\n   present, it has a default
        value of \"application/resource-lists+xml\".\n   If the header field is present,
        it MUST include\n   \"application/resource-lists+xml\", and MAY include any
        other types\n   capable of representing consent-related state.\n   Additionally,
        all subscribers and notifiers SHOULD support the\n   \"application/resource-lists-diff+xml\"
        format.  Section 6 discusses\n   the usage of the Pending Additions event
        package with this format.\n"
      title: 5.1.4.  NOTIFY Bodies
    - contents:
      - "5.1.5.  Notifier Processing of SUBSCRIBE Requests\n   The state of the resources
        to be added to a relay's translation logic\n   can reveal sensitive information.
        \ Therefore, all subscriptions\n   SHOULD be authenticated and then authorized
        before approval.\n   Authorization policy is at the discretion of the administrator.\n"
      title: 5.1.5.  Notifier Processing of SUBSCRIBE Requests
    - contents:
      - "5.1.6.  Notifier Generation of NOTIFY Requests\n   A notifier for the Pending
        Additions event package SHOULD include the\n   <consent-status> element, which
        is defined in Section 4.  The\n   <consent-status> element MUST be positioned
        as an instance of the\n   <any> element within the <entry> element.\n   Notifications
        SHOULD be generated for the Pending Additions package\n   whenever there is
        a change in the consent-related state of a\n   resource.  When a resource
        moves to the error, denied, or granted\n   states, and once a NOTIFY request
        is sent, the resource is removed\n   from further notifications.\n"
      title: 5.1.6.  Notifier Generation of NOTIFY Requests
    - contents:
      - "5.1.7.  Subscriber Processing of NOTIFY Requests\n   As stated in Section
        3, a document in the \"application/resource-\n   lists+xml\" format provides
        the subscriber with the whole list of\n   resources being added to a resource
        list along with the consent-\n   related status of those resources.  On receiving
        a NOTIFY request\n   with such a document, the subscriber SHOULD update its
        local\n   information about the resources being added to the resource list
        with\n   the information in the document.  NOTIFY requests contain full state.\n
        \  The subscriber does not need to perform any type of information\n   aggregation.
        \ Section 6 discusses the use of the Pending Additions\n   event package with
        partial notifications.\n"
      title: 5.1.7.  Subscriber Processing of NOTIFY Requests
    - contents:
      - "5.1.8.  Handling of Forked Requests\n   The state of a given resource list
        is normally handled by a server\n   and stored in a repository.  Therefore,
        there is usually a single\n   place where the resource-list state is resident.
        \ This implies that a\n   subscription for this information is readily handled
        by a single\n   element with access to this repository.  There is, therefore,
        no\n   compelling need for a subscription to pending additions information\n
        \  to fork.  As a result, a subscriber MUST NOT create multiple dialogs\n
        \  as a result of a single subscription request.  The required\n   processing
        to guarantee that only a single dialog is established is\n   described in
        Section 4.4.9 of [RFC3265].\n"
      title: 5.1.8.  Handling of Forked Requests
    - contents:
      - "5.1.9.  Rate of Notifications\n   For reasons of congestion control, it is
        important that the rate of\n   notifications not become excessive.  As a result,
        it is RECOMMENDED\n   that the server does not generate notifications for
        a single\n   subscriber at a rate faster than once every 5 seconds.\n"
      title: 5.1.9.  Rate of Notifications
    - contents:
      - "5.1.10.  State Agents\n   State agents have no role in the handling of this
        package.\n"
      title: 5.1.10.  State Agents
    - contents:
      - "5.1.11.  Example\n   The following is an example of an \"application/resource-lists+xml\"\n
        \  document that carries consent-related state information using\n   <consent-status>
        elements:\n      <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <resource-lists
        xmlns=\"urn:ietf:params:xml:ns:resource-lists\"\n       xmlns:cs=\"urn:ietf:params:xml:ns:consent-status\">\n
        \      <list>\n        <entry uri=\"sip:bill@example.com\">\n         <display-name>Bill
        Doe</display-name>\n         <cs:consent-status>pending</cs:consent-status>\n
        \       </entry>\n        <entry uri=\"sip:joe@example.com\">\n         <display-name>Joe
        Smith</display-name>\n         <cs:consent-status>pending</cs:consent-status>\n
        \       </entry>\n        <entry uri=\"sip:nancy@example.com\">\n         <display-name>Nancy
        Gross</display-name>\n         <cs:consent-status>granted</cs:consent-status>\n
        \       </entry>\n       </list>\n      </resource-lists>\n"
      title: 5.1.11.  Example
    title: 5.1.  Event Package Name
  title: 5.  Pending Additions Event Package Definition
- contents:
  - "6.  Partial Notifications\n   The lists of resources reported by this event package
    may contain\n   many resources.  When the \"application/resource-lists+xml\" format
    is\n   used and there is a change in the consent-related status of a\n   resource,
    the server generates a notification with the whole list.\n   Generating large
    notifications to report small changes does not meet\n   the efficiency requirements
    of some bandwidth-constrained\n   environments.  The partial notifications mechanism
    specified in this\n   section is a more efficient way to report changes in the
    status of\n   resources.\n   Subscribers signal support for partial notifications
    by including the\n   \"application/resource-lists-diff+xml\" format in the Accept
    header\n   field of the SUBSCRIBE requests they generate.  If a client\n   subscribing
    to the Pending Additions event package generates an\n   Accept header field that
    includes the MIME type\n   \"application/resource-lists-diff+xml\", the server
    has the option of\n   returning documents in this format (instead of in the\n
    \  \"application/resource-lists+xml\" format).\n"
  - contents:
    - "6.1.  Generation of Partial Notifications\n   Once a subscription is accepted
      and installed, the server MUST\n   deliver full state in its first notification.
      \ To report full state,\n   the server uses the regular format for resource
      lists.  Consequently,\n   the server MUST set the Content-Type header field
      to the value\n   'application/resource-lists+xml'.\n   In order to deliver a
      partial notification, the server MUST set the\n   Content-Type header field
      to the value 'application/resource-lists-\n   diff+xml'.  When the server generates
      a partial notification, the\n   server SHOULD only include the information that
      has changed since the\n   previous notification.  It is up to the server's local
      policy to\n   determine what is considered as a change to the previous state.\n
      \  The server MUST construct partial notifications according to the\n   following
      logic: all information that has been added to the document\n   is listed inside
      <add> elements, all information that has been\n   removed from the document
      is listed inside <remove> elements, and all\n   information that has been changed
      is listed under <replace> elements.\n   The server MUST NOT send a new NOTIFY
      request with a partial\n   notification until it has received a final response
      from the\n   subscriber for the previous one or the previous NOTIFY request
      has\n   timed out.\n   When the server receives a SUBSCRIBE request (refresh
      or termination)\n   within the associated subscription, it SHOULD send a NOTIFY
      request\n   containing the full document using the 'application/resource-\n
      \  lists+xml' content type.\n   If the server has used a content type other
      than\n   'application/resource-lists+xml' in notifications within the existing\n
      \  subscription and changes to deliver partial notifications, the server\n   MUST
      deliver full state using the 'application/resource-lists+xml'\n   content type
      before generating its first partial notification.\n"
    title: 6.1.  Generation of Partial Notifications
  - contents:
    - "6.2.  Processing of Partial Notifications\n   When a subscriber receives the
      first notification containing full\n   state in a 'application/resource-lists+xml'
      MIME body, the subscriber\n   MUST store the received full document as its local
      copy.\n   When the subscriber receives a subsequent notification, the\n   subscriber
      MUST modify its locally stored information according to\n   the following logic:\n
      \  o  If the notification carries an %'application/resource-lists+xml'\n      document,
      the subscriber MUST replace its local copy of the\n      document with the document
      received in notification.\n   o  If the notification carries an 'application/resource-lists-\n
      \     diff+xml' document, the subscriber MUST apply the changes\n      indicated
      in the received 'application/resource-lists-diff+xml'\n      document to its
      local copy of the full document.\n   If a subscriber encounters a processing
      error while processing an\n   'application/resource-lists-diff+xml' encoded
      document, the\n   subscriber SHOULD renew its subscription.  A subscriber can
      fall back\n   to normal operations by not including the 'application/resource-\n
      \  lists-diff+xml' format in a new SUBSCRIBE request.\n   If the server changes
      the content type used in notifications within\n   the existing subscription,
      the subscriber MUST discard all the\n   previously received information and
      process the new content as\n   specified for that content type.\n"
    title: 6.2.  Processing of Partial Notifications
  - contents:
    - "6.3.  XML Schema for Partial Notifications\n   This is the XML schema for the
      \"application/resource-lists-diff+xml\"\n   data format.  The \"urn:ietf:params:xml:schema:xml-patch-ops\"
      schema\n   is defined in [RFC5261].\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n
      \    <xs:schema\n            targetNamespace=\"urn:ietf:params:xml:ns:resource-lists\"\n
      \           xmlns=\"urn:ietf:params:xml:ns:resource-lists\"\n            xmlns:xs=\"http://www.w3.org/2001/XMLSchema\"\n
      \           elementFormDefault=\"qualified\">\n        <!-- include patch-ops
      type definitions -->\n         <xs:include\n              schemaLocation=\"urn:ietf:params:xml:schema:patch-ops\"/>\n
      \       <!-- partial updates -->\n      <xs:element name=\"resource-lists-diff\">\n
      \      <xs:sequence minOccurs=\"0\" maxOccurs=\"unbounded\">\n        <xs:choice>\n
      \        <xs:element name=\"add\">\n          <xs:complexType mixed=\"true\">\n
      \          <xs:complexContent>\n            <xs:extension base=\"add\">\n             <xs:anyAttribute
      processContents=\"lax\"/>\n            </xs:extension>\n           </xs:complexContent>\n
      \         </xs:complexType>\n         </xs:element>\n         <xs:element name=\"remove\">\n
      \         <xs:complexType>\n           <xs:complexContent>\n            <xs:extension
      base=\"remove\">\n             <xs:anyAttribute processContents=\"lax\"/>\n
      \           </xs:extension>\n           </xs:complexContent>\n          </xs:complexType>\n
      \        </xs:element>\n         <xs:element name=\"replace\">\n          <xs:complexType
      mixed=\"true\">\n           <xs:complexContent>\n            <xs:extension base=\"replace\">\n
      \            <xs:anyAttribute processContents=\"lax\"/>\n            </xs:extension>\n
      \          </xs:complexContent>\n          </xs:complexType>\n         </xs:element>\n
      \        <xs:any namespace=\"##other\" processContents=\"lax\"/>\n        </xs:choice>\n
      \      </xs:sequence>\n       <xs:anyAttribute processContents=\"lax\"/>\n      </xs:element>\n
      \    </xs:schema>\n"
    title: 6.3.  XML Schema for Partial Notifications
  - contents:
    - "6.4.  Examples\n   Section 5.1.11 contains an example of an 'application/resource-\n
      \  lists+xml' document, which carries full state.  The following is an\n   'application/resource-lists-diff+xml'
      partial update document:\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <resource-lists-diff
      xmlns=\"urn:ietf:params:xml:ns:resource-lists\"\n    xmlns:cs=\"urn:ietf:params:xml:ns:consent-status\">\n
      \  <replace\n"
    - "sel=\"*/list/entry[@uri='sip:bill@example.com']/cs:consent-status/text()\"\n
      \  >granted</replace>\n   </resource-lists-diff>\n   The following is the resulting
      'application/resource-lists+xml'\n   document after applying the partial update:\n
      \     <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n      <resource-lists xmlns=\"urn:ietf:params:xml:ns:resource-lists\"\n
      \      xmlns:cs=\"urn:ietf:params:xml:ns:consent-status\">\n       <list>\n
      \       <entry uri=\"sip:bill@example.com\">\n         <display-name>Bill Doe</display-name>\n
      \        <cs:consent-status>granted</cs:consent-status>\n        </entry>\n
      \       <entry uri=\"sip:joe@example.com\">\n         <display-name>Joe Smith</display-name>\n
      \        <cs:consent-status>pending</cs:consent-status>\n        </entry>\n
      \       <entry uri=\"sip:nancy@example.com\">\n         <display-name>Nancy
      Gross</display-name>\n         <cs:consent-status>granted</cs:consent-status>\n
      \       </entry>\n       </list>\n      </resource-lists>\n"
    title: 6.4.  Examples
  title: 6.  Partial Notifications
- contents:
  - "7.  IANA Considerations\n   There are five IANA considerations associated with
    this\n   specification.\n"
  - contents:
    - "7.1.  SIP Event Package Registration\n   This specification registers a SIP
      event package per the procedures\n   in [RFC3265].\n   Package name: consent-pending-additions\n
      \  Type: package\n   Contact: Gonzalo Camarillo <Gonzalo.Camarillo@ericsson.com>\n
      \  Published Specification: RFC 5362.\n"
    title: 7.1.  SIP Event Package Registration
  - contents:
    - "7.2.  URN Sub-Namespace Registration: consent-status\n   This section registers
      a new XML namespace per the procedures in\n   [RFC3688].\n   URI: The URI for
      this namespace is\n   urn:ietf:params:xml:ns:consent-status\n   Registrant Contact:
      IETF SIPPING working group <sipping@ietf.org>,\n   Gonzalo Camarillo <Gonzalo.Camarillo@ericsson.com>\n
      \  XML:\n   <?xml version=\"1.0\"?>\n   <!DOCTYPE html PUBLIC \"-//W3C//DTD
      XHTML Basic 1.0//EN\"\n             \"http://www.w3.org/TR/xhtml-basic/xhtml-basic10.dtd\">\n
      \  <html xmlns=\"http://www.w3.org/1999/xhtml\">\n   <head>\n     <meta http-equiv=\"content-type\"\n
      \       content=\"text/html;charset=iso-8859-1\"/>\n     <title>Pending Additions
      Extension Namespace</title>\n   </head>\n   <body>\n     <h1>Namespace for Consent-related
      Status Information Extension</h1>\n     <h2>urn:ietf:params:xml:ns:consent-status</h2>\n
      \    <p>See <a href=\"http://www.rfc-editor.org/rfc/rfc5362.txt\">RFC 5362\n
      \      </a>.</p>\n    </body>\n   </html>\n"
    title: '7.2.  URN Sub-Namespace Registration: consent-status'
  - contents:
    - "7.3.  XML Schema Registration: consent-status\n   This section registers an
      XML schema per the procedures in [RFC3688].\n   URI: urn:ietf:params:xml:schema:consent-status\n
      \  Registrant Contact: IETF SIPPING working group <sipping@ietf.org>,\n   Gonzalo
      Camarillo <Gonzalo.Camarillo@ericsson.com>\n   The XML for this schema can be
      found in Section 4.\n"
    title: '7.3.  XML Schema Registration: consent-status'
  - contents:
    - "7.4.  XML Schema Registration: resource-lists\n   This section registers an
      XML schema per the procedures in [RFC3688].\n   This XML schema is an extension
      to the XML schema (whose ID is\n   resource-list) defined in [RFC4826].  The
      IANA has added a row in the\n   XML schema registry with the following values:\n
      \     ID: resource-lists-diff\n      URI: urn:ietf:params:xml:schema:resource-lists-diff\n
      \     Filename: resource-lists-diff\n      Reference [RFC5362]\n   Registrant
      Contact: IETF SIPPING working group <sipping@ietf.org>,\n   Gonzalo Camarillo
      <Gonzalo.Camarillo@ericsson.com>\n   The XML for this schema can be found in
      Section 6.3.\n"
    title: '7.4.  XML Schema Registration: resource-lists'
  - contents:
    - "7.5.  MIME Type Registration: application/resource-lists-diff+xml\n   This
      section registers the 'application/resource-lists-diff+xml' MIME\n   type.\n
      \  MIME media type name:  application\n   MIME subtype name:  resource-lists-diff+xml\n
      \  Mandatory parameters: none\n      Optional parameters:  Same as charset parameter
      application/xml as\n      specified in [RFC3023].\n   Encoding considerations:
      \ Same as encoding considerations of\n      application/xml as specified in
      [RFC3023].\n   Security considerations: See Section 10 of [RFC3023] and Section
      7 of\n      [RFC4826].\n   Interoperability considerations:  none\n   Published
      specification:  RFC 5362\n   Applications that use this media type:  This document
      type has been\n      defined to support partial notifications in subscriptions
      to\n      resource lists.\n   Additional Information:\n   Magic number:  none\n
      \  File extension:  .rld\n   Macintosh file type code:  \"TEXT\"\n   Personal
      and email address for further information:  Gonzalo\n      Camarillo <Gonzalo.Camarillo@ericsson.com>\n
      \  Intended usage:  COMMON\n   Author/Change controller:  The IETF\n"
    title: '7.5.  MIME Type Registration: application/resource-lists-diff+xml'
  title: 7.  IANA Considerations
- contents:
  - "8.  Security Considerations\n   \"A Framework for Consent-Based Communications
    in the Session\n   Initiation Protocol (SIP)\" [RFC5360] discusses security-related\n
    \  issues that are related to this specification.\n   Subscriptions to the Pending
    Additions event package can reveal\n   sensitive information.  For this reason,
    it is RECOMMENDED that\n   relays use strong means for authentication and information\n
    \  confidentiality.  Additionally, attackers may attempt to modify the\n   contents
    of the notifications sent by a relay to its subscribers.\n   Consequently, it
    is RECOMMENDED that relays use a strong means for\n   information integrity protection.\n
    \  It is RECOMMENDED that relays authenticate subscribers using the\n   normal
    SIP authentication mechanisms, such as Digest, as defined in\n   [RFC3261].\n
    \  The mechanism used for conveying information to subscribers SHOULD\n   ensure
    the integrity and confidentially of the information.  In order\n   to achieve
    these, an end-to-end SIP encryption mechanism, such as\n   S/MIME, as described
    in [RFC3261], SHOULD be used.\n   If strong end-to-end security means (such as
    above) is not available,\n   it is RECOMMENDED that hop-by-hop security based
    on TLS and SIPS\n   URIs, as described in [RFC3261], is used.\n"
  title: 8.  Security Considerations
- contents:
  - "9.  Acknowledgments\n   Jonathan Rosenberg provided useful ideas on this document.
    \ Ben\n   Campbell and Mary Barnes performed a thorough review of this\n   document.
    \ Jari Urpalainen helped improve the partial notifications\n   mechanism.\n"
  title: 9.  Acknowledgments
- contents:
  - "10.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in
    RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
    1997.\n   [RFC3023]  Murata, M., St. Laurent, S., and D. Kohn, \"XML Media\n              Types\",
    RFC 3023, January 2001.\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo,
    G., Johnston,\n              A., Peterson, J., Sparks, R., Handley, M., and E.\n
    \             Schooler, \"SIP: Session Initiation Protocol\", RFC 3261,\n              June
    2002.\n   [RFC3265]  Roach, A.B., \"Session Initiation Protocol (SIP)-Specific\n
    \             Event Notification\", RFC 3265, June 2002.\n   [RFC3688]  Mealling,
    M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n              January 2004.\n
    \  [RFC4826]  Rosenberg, J., \"Extensible Markup Language (XML) Formats\n              for
    Representing Resource Lists\", RFC 4826, May 2007.\n   [RFC5261]  Urpalainen,
    J., \"An Extensible Markup Language (XML) Patch\n              Operations Framework
    Utilizing XML Path Language (XPath)\n              Selectors\", RFC 5261, September
    2008.\n   [RFC5360]  Rosenberg, J., Camarillo, G., and D. Willis, \"A Framework\n
    \             for Consent-Based Communications in the Session Initiation\n              Protocol
    (SIP)\", RFC 5360, October 2008.\n"
  title: 10.  Normative References
- contents:
  - "Author's Address\n   Gonzalo Camarillo\n   Ericsson\n   Hirsalantie 11\n   Jorvas
    \ 02420\n   Finland\n   EMail: Gonzalo.Camarillo@ericsson.com\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
