- title: __initial_text__
  contents:
  - "            Supplemental Information for the New Definition\n         of the\
    \ EF PHB (Expedited Forwarding Per-Hop Behavior)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document was written during the process of clarification of\n\
    \   RFC2598 \"An Expedited Forwarding PHB\" that led to the publication of\n \
    \  revised specification of EF \"An Expedited Forwarding PHB\".  Its\n   primary\
    \ motivation is providing additional explanation to the revised\n   EF definition\
    \ and its properties.  The document also provides\n   additional implementation\
    \ examples and gives some guidance for\n   computation of the numerical parameters\
    \ of the new definition for\n   several well known schedulers and router architectures.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1      Introduction  ...........................................\
    \   2\n   2      Definition of EF PHB  ...................................   3\n\
    \   2.1    The formal definition  ..................................   3\n   2.2\
    \    Relation to Packet Scale Rate Guarantee  ................   6\n   2.3   \
    \ The need for dual characterization of EF PHB  ...........   7\n   3      Per\
    \ Packet delay  .......................................   9\n   3.1    Single\
    \ hop delay bound  .................................   9\n   3.2    Multi-hop\
    \ worst case delay  .............................  10\n   4      Packet loss \
    \ ............................................  10\n   5      Implementation considerations\
    \  ..........................  11\n   5.1    The output buffered model with EF\
    \ FIFO at the output.  ..  12\n   5.1.1  Strict Non-preemptive Priority Queue\
    \  ...................  12\n   5.1.2  WF2Q  ...................................................\
    \  13\n   5.1.3  Deficit Round Robin (DRR)  ..............................  13\n\
    \   5.1.4  Start-Time Fair Queuing and Self-Clocked Fair Queuing  ..  13\n   5.2\
    \    Router with Internal Delay and EF FIFO at the output  ...  13\n   6     \
    \ Security Considerations  ................................  14\n   7      References\
    \  .............................................  14\n   Appendix A. Difficulties\
    \ with the RFC 2598 EF PHB Definition  ..  16\n   Appendix B. Alternative Characterization\
    \ of Packet Scale Rate\n               Guarantee  .........................................\
    \  20\n   Acknowledgements  ..............................................  22\n\
    \   Authors' Addresses  ............................................  22\n   Full\
    \ Copyright Statement  ......................................  24\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The Expedited Forwarding (EF) Per-Hop Behavior (PHB) was\
    \ designed to\n   be used to build a low-loss, low-latency, low-jitter, assured\n\
    \   bandwidth service.  The potential benefits of this service, and\n   therefore\
    \ the EF PHB, are enormous.  Because of the great value of\n   this PHB, it is\
    \ critical that the forwarding behavior required of and\n   delivered by an EF-compliant\
    \ node be specific, quantifiable, and\n   unambiguous.\n   Unfortunately, the\
    \ definition of EF PHB in the original RFC2598 [10]\n   was not sufficiently precise\
    \ (see Appendix A and [4]).  A more\n   precise definition is given in [6].  This\
    \ document is intended to aid\n   in the understanding of the properties of the\
    \ new definition and\n   provide supplemental information not included in the\
    \ text of [6] for\n   sake of brevity.\n   This document is outlined as follows.\
    \  In section 2, we briefly\n   restate the definition for EF PHB of [6].  We\
    \ then provide some\n   additional discussion of this definition and describe\
    \ some of its\n   properties.  We discuss the issues associated with per-packet\
    \ delay\n   and loss in sections 3 and 4.  In section 5 we discuss the impact\
    \ of\n   known scheduling architectures on the critical parameters of the new\n\
    \   definition.  We also discuss the impact of deviation of real devices\n   from\
    \ the ideal output-buffered model on the magnitude of the critical\n   parameters\
    \ in the definition.\n"
- title: 2. Definition of EF PHB
  contents:
  - '2. Definition of EF PHB

    '
- title: 2.1. The formal definition
  contents:
  - "2.1. The formal definition\n   An intuitive explanation of the new EF definition\
    \ is described in\n   [6].  Here we restate the formal definition from [6] verbatim.\n\
    \   A node that supports EF on an interface I at some configured rate R\n   MUST\
    \ satisfy the following equations:\n      d_j <= f_j + E_a for all j>0       \
    \                         (eq_1)\n   where f_j is defined iteratively by\n   \
    \   f_0 = 0, d_0 = 0\n      f_j = max(a_j, min(d_j-1, f_j-1)) + l_j/R,  for all\
    \ j > 0   (eq_2)\n   In this definition:\n      -  d_j is the time that the last\
    \ bit of the j-th EF packet to\n         depart actually leaves the node from\
    \ the interface I.\n      -  f_j is the target departure time for the j-th EF\
    \ packet to\n         depart from I, the \"ideal\" time at or before which the\
    \ last bit\n         of that packet should leave the node.\n      -  a_j is the\
    \ time that the last bit of the j-th EF packet\n         destined to the output\
    \ I actually arrives at the node.\n      -  l_j is the size (bits) of the j-th\
    \ EF packet to depart from I.\n         l_j is measured on the IP datagram (IP\
    \ header plus payload) and\n         does not include any lower layer (e.g. MAC\
    \ layer) overhead.\n      -  R is the EF configured rate at output I (in bits/second).\n\
    \      -  E_a is the error term for the treatment of the EF aggregate.\n     \
    \    Note that E_a represents the worst case deviation between\n         actual\
    \ departure time of an EF packet and ideal departure time\n         of the same\
    \ packet, i.e. E_a provides an upper bound on (d_j -\n         f_j) for all j.\n\
    \      -  d_0 and f_0 do not refer to a real packet departure but are\n      \
    \   used purely for the purposes of the recursion.  The time origin\n        \
    \ should be chosen such that no EF packets are in the system at\n         time\
    \ 0.\n      -  for the definitions of a_j and d_j, the \"last bit\" of the\n \
    \        packet includes the layer 2 trailer if present, because a\n         packet\
    \ cannot generally be considered available for forwarding\n         until such\
    \ a trailer has been received.\n   An EF-compliant node MUST be able to be characterized\
    \ by the range of\n   possible R values that it can support on each of its interfaces\
    \ while\n   conforming to these equations, and the value of E_a that can be met\n\
    \   on each interface.  R may be line rate or less.  E_a MAY be specified\n  \
    \ as a worst-case value for all possible R values or MAY be expressed\n   as a\
    \ function of R.\n   Note also that, since a node may have multiple inputs and\
    \ complex\n   internal scheduling, the j-th EF packet to arrive at the node\n\
    \   destined for a certain interface may not be the j-th EF packet to\n   depart\
    \ from that interface.  It is in this sense that eq_1 and eq_2\n   are unaware\
    \ of packet identity.\n   In addition, a node that supports EF on an interface\
    \ I at some\n   configured rate R MUST satisfy the following equations:\n    \
    \  D_j <= F_j + E_p for all j>0                                (eq_3)\n   where\
    \ F_j is defined iteratively by\n      F_0 = 0, D_0 = 0\n      F_j = max(A_j,\
    \ min(D_j-1, F_j-1)) + L_j/R,  for all j > 0   (eq_4)\n   In this definition:\n\
    \      -  D_j is the actual departure time of the individual EF packet\n     \
    \    that arrived at the node destined for interface I at time A_j,\n        \
    \ i.e., given a packet which was the j-th EF packet destined for\n         I to\
    \ arrive at the node via any input, D_j is the time at which\n         the last\
    \ bit of that individual packet actually leaves the node\n         from the interface\
    \ I.\n      -  F_j is the target departure time for the individual EF packet\n\
    \         that arrived at the node destined for interface I at time A_j.\n   \
    \   -  A_j is the time that the last bit of the j-th EF packet\n         destined\
    \ to the output I to arrive actually arrives at the\n         node.\n      - \
    \ L_j is the size (bits) of the j-th EF packet to arrive at the\n         node\
    \ that is destined to output I. L_j is measured on the IP\n         datagram (IP\
    \ header plus payload) and does not include any\n         lower layer (e.g. MAC\
    \ layer) overhead.\n      -  R is the EF configured rate at output I (in bits/second).\n\
    \      -  E_p is the error term for the treatment of individual EF\n         packets.\
    \  Note that E_p represents the worst case deviation\n         between the actual\
    \ departure time of an EF packet and the ideal\n         departure time of the\
    \ same packet, i.e. E_p provides an upper\n         bound on (D_j - F_j) for all\
    \ j.\n      -  D_0 and F_0 do not refer to a real packet departure but are\n \
    \        used purely for the purposes of the recursion.  The time origin\n   \
    \      should be chosen such that no EF packets are in the system at\n       \
    \  time 0.\n      -  for the definitions of A_j and D_j, the \"last bit\" of the\n\
    \         packet includes the layer 2 trailer if present, because a\n        \
    \ packet cannot generally be considered available for forwarding\n         until\
    \ such a trailer has been received.\n   It is the fact that D_j and F_j refer\
    \ to departure times for the j-th\n   packet to arrive that makes eq_3 and eq_4\
    \ aware of packet identity.\n   This is the critical distinction between the last\
    \ two equations and\n   the first two.\n   An EF-compliant node SHOULD be able\
    \ to be characterized by the range\n   of possible R values that it can support\
    \ on each of its interfaces\n   while conforming to these equations, and the value\
    \ of E_p that can be\n   met on each interface.  E_p MAY be specified as a worst-case\
    \ value\n   for all possible R values or MAY be expressed as a function of R.\
    \ An\n   E_p value of \"undefined\" MAY be specified.\n   Finally, there is an\
    \ additional recommendation in [6] that an EF\n   compliant node SHOULD NOT reorder\
    \ packets within a micorflow.\n   The definitions described in this section are\
    \ referred to as\n   aggregate and packet-identity-aware packet scale rate guarantee\n\
    \   [4],[2].  An alternative mathematical characterization of packet\n   scale\
    \ rate guarantee is given in Appendix B.\n"
- title: 2.2. Relation to Packet Scale Rate Guarantee
  contents:
  - "2.2. Relation to Packet Scale Rate Guarantee\n   Consider the case of an ideal\
    \ output-buffered device with an EF FIFO\n   at the output.  For such a device,\
    \ the i-th packet to arrive to the\n   device is also the i-th packet to depart\
    \ from the device.  Therefore,\n   in this ideal model the aggregate behavior\
    \ and packet-identity-aware\n   characteristics are identical, and E_a = E_p.\
    \  In this section we\n   therefore omit the subscript and refer to the latency\
    \ term simply as\n   E.\n   It could be shown that for such an ideal device the\
    \ definition of\n   section 2.1 is stronger than the well-known rate-latency curve\
    \ [2] in\n   the sense that if a scheduler satisfies the EF definition it also\n\
    \   satisfies the rate-latency curve.  As a result, all the properties\n   known\
    \ for the rate-latency curve also apply to the modified EF\n   definition.  However,\
    \ we argue below that the definition of section\n   2.1 is more suitable to reflect\
    \ the intent of EF PHB than the rate-\n   latency curve.\n   It is shown in [2]\
    \ that the rate-latency curve is equivalent to the\n   following definition:\n\
    \   Definition of Rate Latency Curve (RLC):\n      D(j) <= F'(j) + E         \
    \                                  (eq_5)\n   where\n      F'(0)=0, F'(j)=max(a(j),\
    \ F'(j-1))+ L(j)/R for all j>0       (eq_6)\n   It can be easily verified that\
    \ the EF definition of section 2.1 is\n   stronger than RLC by noticing that for\
    \ all j, F'(j) >= F(j).\n   It is easy to see that F'(j) in the definition of\
    \ RLC corresponds to\n   the time the j-th departure should have occurred should\
    \ the EF\n   aggregate be constantly served exactly at its configured rate R.\n\
    \   Following the common convention, we refer to F'(j) as the \"fluid\n   finish\
    \ time\" of the j-th packet to depart.\n   The intuitive meaning of the rate-latency\
    \ curve of RLC is that any\n   packet is served at most time E later than this\
    \ packet would finish\n   service in the fluid model.\n   For RLC (and hence for\
    \ the stronger EF definition) it holds that in\n   any interval (0,t) the EF aggregate\
    \ gets close to the desired service\n   rate R (as long as there is enough traffic\
    \ to sustain this rate).\n   The discrepancy between the ideal and the actual\
    \ service in this\n   interval depends on the latency term E, which in turn depends\
    \ on the\n   scheduling implementation.  The smaller E, the smaller the difference\n\
    \   between the configured rate and the actual rate achieved by the\n   scheduler.\n\
    \   While RLC guarantees the desired rate to the EF aggregate in all\n   intervals\
    \ (0,t) to within a specified error, it may nevertheless\n   result in large gaps\
    \ in service.  For example, suppose that (a large\n   number) N of identical EF\
    \ packets of length L arrived from different\n   interfaces to the EF queue in\
    \ the absence of any non-EF traffic.\n   Then any work-conserving scheduler will\
    \ serve all N packets at link\n   speed.  When the last packet is sent at time\
    \ NL/C, where C is the\n   capacity of output link, F'(N) will be equal to NL/R.\
    \  That is, the\n   scheduler is running ahead of ideal, since NL/C < NL/R for\
    \ R < C.\n   Suppose now that at time NL/C a large number of non-EF packets\n\
    \   arrive, followed by a single EF packet.  Then the scheduler can\n   legitimately\
    \ delay starting to send the EF packet until time\n   F'(N+1)=(N+1)L/R + E - L/C.\
    \  This means that the EF aggregate will\n   have no service at all in the interval\
    \ (NL/C, (N+1)L/R + E - L/C).\n   This interval can be quite large if R is substantially\
    \ smaller than\n   C.  In essence, the EF aggregate can be \"punished\" by a gap\
    \ in\n   service for receiving faster service than its configured rate at the\n\
    \   beginning.\n   The new EF definition alleviates this problem by introducing\
    \ the term\n   min(D(j-1), F(j-1)) in the recursion.  Essentially, this means\
    \ that\n   the fluid finishing time is \"reset\" if that packet is sent before\
    \ its\n   \"ideal\" departure time.  As a consequence of that, for the case where\n\
    \   the EF aggregate is served in the FIFO order, suppose a packet\n   arrives\
    \ at time t to a server satisfying the EF definition.  The\n   packet will be\
    \ transmitted no later than time t + Q(t)/R + E, where\n   Q(t) is the EF queue\
    \ size at time t (including the packet under\n   discussion)[4].\n"
- title: 2.3. The need for dual characterization of EF PHB
  contents:
  - "2.3. The need for dual characterization of EF PHB\n   In a more general case,\
    \ where either the output scheduler does not\n   serve the EF packets in a FIFO\
    \ order, or the variable internal delay\n   in the device reorders packets while\
    \ delivering them to the output\n   (or both), the i-th packet destined to a given\
    \ output interface to\n   arrive to the device may no longer be the i-th packet\
    \ to depart from\n   that interface.  In that case the packet-identity-aware and\
    \ the\n   aggregate definitions are no longer identical.\n   The aggregate behavior\
    \ definition can be viewed as a truly aggregate\n   characteristic of the service\
    \ provided to EF packets.  For an\n   analogy, consider a dark reservoir to which\
    \ all arriving packets are\n   placed.  A scheduler is allowed to pick a packet\
    \ from the reservoir\n   in a random order, without any knowledge of the order\
    \ of packet\n   arrivals.  The aggregate part of the definition measures the accuracy\n\
    \   of the output rate provided to the EF aggregate as a whole.  The\n   smaller\
    \ E_a, the more accurate is the assurance that the reservoir is\n   drained at\
    \ least at the configured rate.\n   Note that in this reservoir analogy packets\
    \ of EF aggregate may be\n   arbitrarily reordered.  However, the definition of\
    \ EF PHB given in\n   [6] explicitly requires that no packet reordering occur\
    \ within a\n   microflow.  This requirement restricts the scheduling\n   implementations,\
    \ or, in the reservoir analogy, the order of pulling\n   packets out of the reservoir\
    \ to make sure that packets within a\n   microflow are not reordered, but it still\
    \ allows reordering at the\n   aggregate level.\n   Note that reordering within\
    \ the aggregate, as long as there is no\n   flow-level reordering, does not necessarily\
    \ reflect a \"bad\" service.\n   Consider for example a scheduler that arbitrates\
    \ among 10 different\n   EF \"flows\" with diverse rates.  A scheduler that is\
    \ aware of the rate\n   requirements may choose to send a packet of the faster\
    \ flow before a\n   packet of the slower flow to maintain lower jitter at the\
    \ flow level.\n   In particular, an ideal \"flow\"-aware WFQ scheduler will cause\n\
    \   reordering within the aggregate, while maintaining packet ordering\n   and\
    \ small jitter at the flow level.\n   It is intuitively clear that for such a\
    \ scheduler, as well as for a\n   simpler FIFO scheduler, the \"accuracy\" of\
    \ the service rate is crucial\n   for minimizing \"flow\"-level jitter.  The packet-identity-aware\n\
    \   definition quantifies this accuracy of the service rate.\n   However, the\
    \ small value of E_a does not give any assurances about\n   the absolute value\
    \ of per-packet delay.  In fact, if the input rate\n   exceeds the configured\
    \ rate, the aggregate behavior definition may\n   result in arbitrarily large\
    \ delay of a subset of packets.  This is\n   the primary motivation for the packet-identity-aware\
    \ definition.\n   The primary goal of the packet-aware characterization of the\
    \ EF\n   implementation is that, unlike the aggregate behavior\n   characterization,\
    \ it provides a way to find a per-packet delay bound\n   as a function of input\
    \ traffic parameters.\n   While the aggregate behavior definition characterizes\
    \ the accuracy of\n   the service rate of the entire EF aggregate, the packet-identity-\n\
    \   aware part of the definition characterizes the deviation of the\n   device\
    \ from an ideal server that serves the EF aggregate in FIFO\n   order at least\
    \ at the configured rate.\n   The value of E_p in the packet-identity-aware definition\
    \ is therefore\n   affected by two factors: the accuracy of the aggregate rate\
    \ service\n   and the degree of packet reordering within the EF aggregate (under\n\
    \   the constraint that packets within the same microflow are not\n   reordered).\
    \  Therefore, a sub-aggregate aware device that provides an\n   ideal service\
    \ rate to the aggregate, and also provides an ideal rate\n   service for each\
    \ of the sub-aggregates, may nevertheless have a very\n   large value of E_p (in\
    \ this case E_p must be at least equal to the\n   ratio of the maximum packet\
    \ size divided by the smallest rate of any\n   sub aggregate).  As a result, a\
    \ large value of E_p does not\n   necessarily mean that the service provided to\
    \ EF aggregate is bad -\n   rather it may be an indication that the service is\
    \ good, but non-\n   FIFO.  On the other hand, a large value of E_p may also mean\
    \ that the\n   aggregate service is very inaccurate (bursty), and hence in this\
    \ case\n   the large value of E_p reflects a poor quality of implementation.\n\
    \   As a result, a large number of E_p does not necessarily provide any\n   guidance\
    \ on the quality of the EF implementation.  However, a small\n   value of E_p\
    \ does indicate a high quality FIFO implementation.\n   Since E_p and E_a relate\
    \ to different aspects of the EF\n   implementation, they should be considered\
    \ together to determine the\n   quality of the implementation.\n"
- title: 3. Per Packet delay
  contents:
  - "3. Per Packet delay\n   The primary motivation for the packet-identity-aware\
    \ definition is\n   that it allows quantification of the per-packet delay bound.\
    \  This\n   section discusses the issues with computing per-packet delay.\n"
- title: 3.1. Single hop delay bound
  contents:
  - "3.1. Single hop delay bound\n   If the total traffic arriving to an output port\
    \ I from all inputs is\n   constrained by a leaky bucket with parameters (R, B),\
    \ where R is the\n   configured rate at I, and B is the bucket depth (burst),\
    \ then the\n   delay of any packet departing from I is bounded by D_p, given by\n\
    \      D_p = B/R + E_p                                             (eq_7)\n  \
    \ (see appendix B).\n   Because the delay bound depends on the configured rate\
    \ R and the\n   input burstiness B, it is desirable for both of these parameters\
    \ to\n   be visible to a user of the device.  A PDB desiring a particular\n  \
    \ delay bound may need to limit the range of configured rates and\n   allowed\
    \ burstiness that it can support in order to deliver such\n   bound.  Equation\
    \ (eq_7) provides a means for determining an\n   acceptable operating region for\
    \ the device with a given E_p.  It may\n   also be useful to limit the total offered\
    \ load to a given output to\n   some rate R_1 < R (e.g. to obtain end-to-end delay\
    \ bounds [5]).  It\n   is important to realize that, while R_1 may also be a configurable\n\
    \   parameter of the device, the delay bound in (eq_7) does not depend on\n  \
    \ it.  It may be possible to get better bounds explicitly using the\n   bound\
    \ on the input rate, but the bound (eq_7) does not take advantage\n   of this\
    \ information.\n"
- title: 3.2. Multi-hop worst case delay
  contents:
  - "3.2. Multi-hop worst case delay\n   Although the PHB defines inherently local\
    \ behavior, in this section\n   we briefly discuss the issue of per-packet delay\
    \ as the packet\n   traverses several hops implementing EF PHB.  Given a delay\
    \ bound\n   (eq_7) at a single hop, it is tempting to conclude that per-packet\n\
    \   bound across h hops is simply h times the bound (eq_7).  However,\n   this\
    \ is not necessarily the case, unless B represents the worst case\n   input burstiness\
    \ across all nodes in the network.\n   Unfortunately, obtaining such a worst case\
    \ value of B is not trivial.\n   If EF PHB is implemented using aggregate class-based\
    \ scheduling where\n   all EF packets share a single FIFO, the effect of jitter\
    \ accumulation\n   may result in an increase in burstiness from hop to hop.  In\n\
    \   particular, it can be shown that unless severe restrictions on EF\n   utilization\
    \ are imposed, even if all EF flows are ideally shaped at\n   the ingress, then\
    \ for any value of delay D it is possible to\n   construct a network where EF\
    \ utilization on any link is bounded not\n   to exceed a given factor, no flow\
    \ traverses more than a specified\n   number of hops, but there exists a packet\
    \ that experiences a delay\n   more than D [5].  This result implies that the\
    \ ability to limit the\n   worst case burstiness and the resulting end-to-end\
    \ delay across\n   several hops may require not only limiting EF utilization on\
    \ all\n   links, but also constraining the global network topology.  Such\n  \
    \ topology constraints would need to be specified in the definition of\n   any\
    \ PDB built on top of EF PHB, if such PDB requires a strict worst\n   case delay\
    \ bound.\n"
- title: 4. Packet loss
  contents:
  - "4. Packet loss\n   Any device with finite buffering may need to drop packets\
    \ if the\n   input burstiness becomes sufficiently high.  To meet the low loss\n\
    \   objective of EF, a node may be characterized by the operating region\n   in\
    \ which loss of EF due to  congestion will not occur.  This may be\n   specified\
    \ as a token bucket of  rate r <= R and burst size B that can\n   be offered from\
    \ all inputs to a  given output interface without loss.\n   However, as discussed\
    \ in the previous section, the phenomenon of\n   jitter accumulation makes it\
    \ generally difficult to guarantee that\n   the input burstiness never exceeds\
    \ the specified operating region for\n   nodes internal to the DiffServ domain.\
    \  A no-loss guarantee across\n   multiple hops may require specification of constraints\
    \ on network\n   topology which are outside the scope of inherently local definition\n\
    \   of a PHB.  Thus, it must be possible to establish whether a device\n   conforms\
    \ to the EF definition even when some packets are lost.\n   This can be done by\
    \ performing an \"off-line\" test of conformance to\n   equations (eq_1)- (eq_4).\
    \  After observing a sequence of packets\n   entering and leaving the node, the\
    \ packets which did not leave are\n   assumed lost and are notionally removed\
    \ from the input stream.  The\n   remaining packets now constitute the arrival\
    \ stream and the packets\n   which left the node constitute the departure stream.\
    \  Conformance to\n   the equations can thus be verified by considering only those\
    \ packets\n   that successfully passed through the node.\n   Note that specification\
    \ of which packets are lost in the case when\n   loss does occur is beyond the\
    \ scope of the definition of EF PHB.\n   However, those packets that were not\
    \ lost must conform to the\n   equations definition of EF PHB in section 2.1.\n"
- title: 5. Implementation considerations
  contents:
  - "5. Implementation considerations\n   A packet passing through a router will experience\
    \ delay for a number\n   of reasons.  Two familiar components of this delay are\
    \ the time the\n   packet spends in a buffer at an outgoing link waiting for the\n\
    \   scheduler to select it and the time it takes to actually transmit the\n  \
    \ packet on the outgoing line.\n   There may be other components of a packet's\
    \ delay through a router,\n   however.  A router might have to do some amount\
    \ of header processing\n   before the packet can be given to the correct output\
    \ scheduler, for\n   example.  In another case a router may have a FIFO buffer\
    \ (called a\n   transmission queue in [7]) where the packet sits after being selected\n\
    \   by the output scheduler but before it is transmitted.  In cases such\n   as\
    \ these, the extra delay a packet may experience can be accounted\n   for by absorbing\
    \ it into the latency terms E_a and E_p.\n   Implementing EF on a router with\
    \ a multi-stage switch fabric requires\n   special attention.  A packet may experience\
    \ additional delays due to\n   the fact that it must compete with other traffic\
    \ for forwarding\n   resources at multiple contention points in the switch core.\
    \  The\n   delay an EF packet may experience before it even reaches the output-\n\
    \   link scheduler should be included in the latency term.  Input-\n   buffered\
    \ and input/output-buffered routers based on crossbar design\n   may also require\
    \ modification of their latency terms.  The factors\n   such as the speedup factor\
    \ and the choice of crossbar arbitration\n   algorithms may affect the latency\
    \ terms substantially.\n   Delay in the switch core comes from two sources, both\
    \ of which must\n   be considered.  The first part of this delay is the fixed\
    \ delay a\n   packet experiences regardless of the other traffic.  This component\n\
    \   of the delay includes the time it takes for things such as packet\n   segmentation\
    \ and reassembly in cell based cores, enqueueing and\n   dequeuing at each stage,\
    \ and transmission between stages.  The second\n   part of the switch core delay\
    \ is variable and depends on the type and\n   amount of other traffic traversing\
    \ the core.  This delay comes about\n   if the stages in the core mix traffic\
    \ flowing between different\n   input/output port pairs.  Thus, EF packets must\
    \ compete against other\n   traffic for forwarding resources in the core.  Some\
    \ of this\n   competing traffic may even be traffic from other, non-EF aggregates.\n\
    \   This introduces extra delay, that can also be absorbed by the latency\n  \
    \ term in the definition.\n   To capture these considerations, in this section\
    \ we will consider two\n   simplified implementation examples.  The first is an\
    \ ideal output\n   buffered node where packets entering the device from an input\n\
    \   interface are immediately delivered to the output scheduler.  In this\n  \
    \ model the properties of the output scheduler fully define the values\n   of\
    \ the parameters E_a and E_p.  We will consider the case where the\n   output\
    \ scheduler implements aggregate class-based queuing, so that\n   all EF packets\
    \ share a single queue.  We will discuss the values of\n   E_a and E_p for a variety\
    \ of class-based schedulers widely\n   considered.\n   The second example will\
    \ consider a router modeled as a black box with\n   a known bound on the variable\
    \ delay a packet can experience from the\n   time it arrives to an input to the\
    \ time it is delivered to its\n   destination output.  The output scheduler in\
    \ isolation is assumed to\n   be an aggregate scheduler where all EF packets share\
    \ a single FIFO\n   queue, with a known value of E_a(S)=E_p(S)=E(S).  This model\
    \ provides\n   a reasonable abstraction to a large class of router implementations.\n"
- title: 5.1. The output buffered model with EF FIFO at the output.
  contents:
  - "5.1. The output buffered model with EF FIFO at the output.\n   As has been mentioned\
    \ earlier, in this model E_a = E_p, so we shall\n   omit the subscript and refer\
    \ to both terms as latency E.  The\n   remainder of this subsection discusses\
    \ E for a number of scheduling\n   implementations.\n"
- title: 5.1.1. Strict Non-preemptive Priority Queue
  contents:
  - "5.1.1. Strict Non-preemptive Priority Queue\n   A Strict Priority scheduler in\
    \ which all EF packets share a single\n   FIFO queue which is served at strict\
    \ non-preemptive priority over\n   other queues satisfies the EF definition with\
    \ the latency term E =\n   MTU/C where MTU is the maximum packet size and C is\
    \ the speed of the\n   output link.\n"
- title: 5.1.2. WF2Q
  contents:
  - "5.1.2. WF2Q\n   Another scheduler that satisfies the EF definition with a small\n\
    \   latency term is WF2Q described in [1].  A class-based WF2Q scheduler,\n  \
    \ in which all EF traffic shares a single queue with the weight\n   corresponding\
    \ to the configured rate of the EF aggregate satisfies\n   the EF definition with\
    \ the latency term E = MTU/C+MTU/R.\n"
- title: 5.1.3. Deficit Round Robin (DRR)
  contents:
  - "5.1.3. Deficit Round Robin (DRR)\n   For DRR [12], E can be shown to grow linearly\
    \ with\n   N*(r_max/r_min)*MTU, where r_min and r_max denote the smallest and\n\
    \   the largest rate among the rate assignments of all queues in the\n   scheduler,\
    \ and N is the number of queues in the scheduler.\n"
- title: 5.1.4. Start-Time Fair Queuing and Self-Clocked Fair Queuing
  contents:
  - "5.1.4. Start-Time Fair Queuing and Self-Clocked Fair Queuing\n   For Start-Time\
    \ Fair Queuing (SFQ) [9] and Self-Clocked Fair Queuing\n   (SCFQ) [8] E can be\
    \ shown to grow linearly with the number of queues\n   in the scheduler.\n"
- title: 5.2. Router with Internal Delay and EF FIFO at the output
  contents:
  - "5.2. Router with Internal Delay and EF FIFO at the output\n   In this section\
    \ we consider a router which is modeled as follows.  A\n   packet entering the\
    \ router may experience a variable delay D_v with a\n   known upper bound D. That\
    \ is, 0<=D_v<=D.  At the output all EF\n   packets share a single class queue.\
    \  Class queues are scheduled by a\n   scheduler with a known value E_p(S)=E(S)\
    \ (where E(S) corresponds to\n   the model where this scheduler is implemented\
    \ in an ideal output\n   buffered device).\n   The computation of E_p is more\
    \ complicated in this case.  For such\n   device, it can be shown that E_p = E(S)+2D+2B/R\
    \ (see [13]).\n   Recall from the discussion of section 3 that bounding input\n\
    \   burstiness B may not be easy in a general topology.  In the absence\n   of\
    \ the knowledge of a bound on B one can bound E_p as E_p = E(S) +\n   D*C_inp/R\
    \ (see [13]).\n   Note also that the bounds in this section are derived using\
    \ only the\n   bound on the variable portion of the interval delay and the error\n\
    \   bound of the output scheduler.  If more details about the\n   architecture\
    \ of a device are available, it may be possible to compute\n   better bounds.\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   This informational document provides additional\
    \ information to aid in\n   understanding of the EF PHB described in [6].  It\
    \ adds no new\n   functions to it.  As a result, it adds no security issues to\
    \ those\n   described in that specification.\n"
- title: 7. References
  contents:
  - "7. References\n   [1]   J.C.R. Bennett and H. Zhang, \"WF2Q: Worst-case Fair\
    \ Weighted\n         Fair Queuing\", INFOCOM'96, March 1996.\n   [2]   J.-Y. Le\
    \ Boudec, P. Thiran, \"Network Calculus\", Springer Verlag\n         Lecture Notes\
    \ in Computer Science volume 2050, June 2001\n         (available online at http://lcawww.epfl.ch).\n\
    \   [3]   Bradner, S., \"Key Words for Use in RFCs to Indicate Requirement\n \
    \        Levels\", BCP 14, RFC 2119, March 1997.\n   [4]   J.C.R. Bennett, K.\
    \ Benson, A. Charny, W. Courtney, J.Y. Le\n         Boudec, \"Delay Jitter Bounds\
    \ and Packet Scale Rate Guarantee\n         for Expedited Forwarding\", Proc.\
    \ Infocom 2001, April 2001.\n   [5]   A. Charny, J.-Y. Le Boudec \"Delay Bounds\
    \ in a Network with\n         Aggregate Scheduling\".  Proc. of QoFIS'2000, September\
    \ 25-26,\n         2000, Berlin, Germany.\n   [6]   Davie, B., Charny, A., Baker,\
    \ F., Bennett, J.C.R., Benson, K.,\n         Boudec, J., Chiu, A., Courtney, W.,\
    \ Davari, S., Firoiu, V.,\n         Kalmanek, C., Ramakrishnan, K.K. and D. Stiliadis,\
    \ \"An\n         Expedited Forwarding PHB (Per-Hop Behavior)\", RFC 3246, March\n\
    \         2002.\n   [7]   T. Ferrari and P. F. Chimento, \"A Measurement-Based\
    \ Analysis of\n         Expedited Forwarding PHB Mechanisms,\" Eighth International\n\
    \         Workshop on Quality of Service, Pittsburgh, PA, June 2000.\n   [8] \
    \  S.J. Golestani. \"A Self-clocked Fair Queuing Scheme for Broad-\n         band\
    \ Applications\".  In Proceedings of IEEE INFOCOM'94, pages\n         636-646,\
    \ Toronto, CA, April 1994.\n   [9]   P. Goyal, H.M. Vin, and H. Chen. \"Start-time\
    \ Fair Queuing: A\n         Scheduling Algorithm for Integrated Services\".  In\
    \ Proceedings\n         of the ACM-SIGCOMM 96, pages 157-168, Palo Alto, CA, August\n\
    \         1996.\n   [10]  Jacobson, V., Nichols, K. and K. Poduri, \"An Expedited\n\
    \         Forwarding PHB\", RFC 2598, June 1999.\n   [11]  Jacobson, V., Nichols,\
    \ K. and K. Poduri, \"The 'Virtual Wire'\n         Behavior Aggregate\", Work\
    \ in Progress.\n   [12]  M. Shreedhar and G. Varghese. \"Efficient Fair Queuing\
    \ Using\n         Deficit Round Robin\".  In Proceedings of SIGCOMM'95, pages\n\
    \         231-243, Boston, MA, September 1995.\n   [13]  Le Boudec, J.-Y., Charny,\
    \ A. \"Packet Scale Rate Guarantee for\n         non-FIFO Nodes\", Infocom 2002,\
    \ New York, June 2002.\n"
- title: Appendix A. Difficulties with the RFC 2598 EF PHB Definition
  contents:
  - "Appendix A. Difficulties with the RFC 2598 EF PHB Definition\n   The definition\
    \ of the EF PHB as given in [10] states:\n   \"The EF PHB is defined as a forwarding\
    \ treatment for a particular\n   diffserv aggregate where the departure rate of\
    \ the aggregate's\n   packets from any diffserv node must equal or exceed a configurable\n\
    \   rate.  The EF traffic SHOULD receive this rate independent of the\n   intensity\
    \ of any other traffic attempting to transit the node.  It\n   [the EF PHB departure\
    \ rate] SHOULD average at least the configured\n   rate when measured over any\
    \ time interval equal to or longer than the\n   time it takes to send an output\
    \ link MTU sized packet at the\n   configured rate.\"\n   A literal interpretation\
    \ of the definition would consider the\n   behaviors given in the next two subsections\
    \ as non-compliant.  The\n   definition also unnecessarily constrains the maximum\
    \ configurable\n   rate of an EF aggregate.\n"
- title: A.1 Perfectly-Clocked Forwarding
  contents:
  - "A.1 Perfectly-Clocked Forwarding\n   Consider the following stream forwarded\
    \ from a router with EF-\n   configured rate R=C/2, where C is the output line\
    \ rate.  In the\n   illustration, E is an MTU-sized EF packet while x is a non-EF\
    \ packet\n   or unused capacity, also of size MTU.\n      E x E x E x E x E x\
    \ E x...\n       |-----|\n   The interval between the vertical bars is 3*MTU/C,\
    \ which is greater\n   than MTU/(C/2), and so is subject to the EF PHB definition.\
    \  During\n   this interval, 3*MTU/2 bits of the EF aggregate should be forwarded,\n\
    \   but only MTU bits are forwarded.  Therefore, while this forwarding\n   pattern\
    \ should be considered compliant under any reasonable\n   interpretation of the\
    \ EF PHB, it actually does not formally comply\n   with the definition of RFC\
    \ 2598.\n   Note that this forwarding pattern can occur in any work-conserving\n\
    \   scheduler in an ideal output-buffered architecture where EF packets\n   arrive\
    \ in a perfectly clocked manner according to the above pattern\n   and are forwarded\
    \ according to exactly the same pattern in the\n   absence of any non-EF traffic.\n\
    \   Trivial as this example may be, it reveals the lack of mathematical\n   precision\
    \ in the formal definition.  The fact that no work-conserving\n   scheduler can\
    \ formally comply with the definition is unfortunate, and\n   appears to warrant\
    \ some changes to the definition that would correct\n   this problem.\n   The\
    \ underlying reason for the problem described here is quite simple\n   - one can\
    \ only expect that the EF aggregate is served at configured\n   rate in some interval\
    \ where there is enough backlog of EF packets to\n   sustain that rate.  In the\
    \ example above the packets come in exactly\n   at the rate at which they are\
    \ served, and so there is no persistent\n   backlog.  Certainly, if the input\
    \ rate is even smaller than the\n   configured rate of the EF aggregate, there\
    \ will be no backlog as\n   well, and a similar formal difficulty will occur.\n\
    \   A seemingly simple solution to this difficulty might be to require\n   that\
    \ the EF aggregate is served at its configured rate only when the\n   queue is\
    \ backlogged.  However, as we show in the remainder of this\n   section, this\
    \ solution does not suffice.\n"
- title: A.2 Router Internal Delay
  contents:
  - "A.2 Router Internal Delay\n   We now argue that the example considered in the\
    \ previous section is\n   not as trivial as it may seem at first glance.\n   Consider\
    \ a router with EF configured rate R = C/2 as in the previous\n   example, but\
    \ with an internal delay of 3T (where T = MTU/C) between\n   the time that a packet\
    \ arrives at the router and the time that it is\n   first eligible for forwarding\
    \ at the output link.  Such things as\n   header processing, route look-up, and\
    \ delay in switching through a\n   multi-layer fabric could cause this delay.\
    \  Now suppose that EF\n   traffic arrives regularly at a rate of (2/3)R = C/3.\
    \  The router will\n   perform as shown below.\n      EF Packet Number 1 2 3 4\
    \ 5 6 ...\n      Arrival (at router) 0 3T 6T 9T 12T 15T ...\n      Arrival (at\
    \ scheduler) 3T 6T 9T 12T 15T 18T ...\n      Departure 4T 7T 10T 13T 16T 19T ...\n\
    \   Again, the output does not satisfy the RFC 2598 definition of EF PHB.\n  \
    \ As in the previous example, the underlying reason for this problem is\n   that\
    \ the scheduler cannot forward EF traffic faster than it arrives.\n   However,\
    \ it can be easily seen that the existence of internal delay\n   causes one packet\
    \ to be inside the router at all times.  An external\n   observer will rightfully\
    \ conclude that the number of EF packets that\n   arrived to the router is always\
    \ at least one greater than the number\n   of EF packets that left the router,\
    \ and therefore the EF aggregate is\n   constantly backlogged.  However, while\
    \ the EF aggregate is\n   continuously backlogged, the observed output rate is\
    \ nevertheless\n   strictly less that the configured rate.\n   This example indicates\
    \ that the simple addition of the condition that\n   EF aggregate must receive\
    \ its configured rate only when the EF\n   aggregate is backlogged does not suffice\
    \ in this case.\n   Yet, the problem described here is of fundamental importance\
    \ in\n   practice.  Most routers have a certain amount of internal delay.  A\n\
    \   vendor declaring EF compliance is not expected to simultaneously\n   declare\
    \ the details of the internals of the router.  Therefore, the\n   existence of\
    \ internal delay may cause a perfectly reasonable EF\n   implementation to display\
    \ seemingly non-conformant behavior, which is\n   clearly undesirable.\n"
- title: A.3 Maximum Configurable Rate and Provisioning Efficiency
  contents:
  - "A.3 Maximum Configurable Rate and Provisioning Efficiency\n   It is well understood\
    \ that with any non-preemptive scheduler, the\n   RFC-2598-compliant configurable\
    \ rate for an EF aggregate cannot\n   exceed C/2 [11].  This is because an MTU-sized\
    \ EF packet may arrive\n   to an empty queue at time t just as an MTU-sized non-EF\
    \ packet begins\n   service.  The maximum number of EF bits that could be forwarded\n\
    \   during the interval [t, t + 2*MTU/C] is MTU.  But if configured rate\n   R\
    \ > C/2, then this interval would be of length greater than MTU/R,\n   and more\
    \ than MTU EF bits would have to be served during this\n   interval for the router\
    \ to be compliant.  Thus, R must be no greater\n   than C/2.\n   It can be shown\
    \ that for schedulers other than PQ, such as various\n   implementations of WFQ,\
    \ the maximum compliant configured rate may be\n   much smaller than 50%.  For\
    \ example, for SCFQ [8] the maximum\n   configured rate cannot exceed C/N, where\
    \ N is the number of queues in\n   the scheduler.  For WRR, mentioned as compliant\
    \ in section 2.2 of RFC\n   2598, this limitation is even more severe.  This is\
    \ because in these\n   schedulers a packet arriving to an empty EF queue may be\
    \ forced to\n   wait until one packet from each other queue (in the case of SCFQ)\
    \ or\n   until several packets from each other queue (in the case of WRR) are\n\
    \   served before it will finally be forwarded.\n   While it is frequently assumed\
    \ that the configured rate of EF traffic\n   will be substantially smaller than\
    \ the link bandwidth, the\n   requirement that this rate should never exceed 50%\
    \ of the link\n   bandwidth appears unnecessarily limiting.  For example, in a\
    \ fully\n   connected mesh network, where any flow traverses a single link on\
    \ its\n   way from source to its destination there seems no compelling reason\n\
    \   to limit the amount of EF traffic to 50% (or an even smaller\n   percentage\
    \ for some schedulers) of the link bandwidth.\n   Another, perhaps even more striking\
    \ example is the fact that even a\n   TDM circuit with dedicated slots cannot\
    \ be configured to forward EF\n   packets at more than 50% of the link speed without\
    \ violating RFC 2598\n   (unless the entire link is configured for EF).  If the\
    \ configured\n   rate of EF traffic is greater than 50% (but less than the link\n\
    \   speed), there will always exist an interval longer than MTU/R in\n   which\
    \ less than the configured rate is achieved.  For example,\n   suppose the configured\
    \ rate of the EF aggregate is 2C/3.  Then the\n   forwarding pattern of the TDM\
    \ circuit might be\n   E E x E E x E E x ...\n      |---|\n   where only one packet\
    \ is served in the marked interval of length 2T =\n   2MTU/C.  But at least 4/3\
    \ MTU would have to be served during this\n   interval by a router in compliance\
    \ with the definition in RFC 2598.\n   The fact that even a TDM line cannot be\
    \ booked over 50% by EF traffic\n   indicates that the restriction is artificial\
    \ and unnecessary.\n"
- title: A.4 The Non-trivial Nature of the Difficulties
  contents:
  - "A.4 The Non-trivial Nature of the Difficulties\n   One possibility to correct\
    \ the problems discussed in the previous\n   sections might be to attempt to clarify\
    \ the definition of the\n   intervals to which the definition applied or by averaging\
    \ over\n   multiple intervals.  However, an attempt to do so meets with\n   considerable\
    \ analytical and implementation difficulties.  For\n   example, attempting to\
    \ align interval start times with some epochs of\n   the forwarded stream appears\
    \ to require a certain degree of global\n   clock synchronization and is fraught\
    \ with the risk of\n   misinterpretation and mistake in practice.\n   Another\
    \ approach might be to allow averaging of the rates over some\n   larger time\
    \ scale.  However, it is unclear exactly what finite time\n   scale would suffice\
    \ in all reasonable cases.  Furthermore, this\n   approach would compromise the\
    \ notion of very short-term time scale\n   guarantees that are the essence of\
    \ EF PHB.\n   We also explored a combination of two simple fixes.  The first is\
    \ the\n   addition of the condition that the only intervals subject to the\n \
    \  definition are those that fall inside a period during which the EF\n   aggregate\
    \ is continuously backlogged in the router (i.e., when an EF\n   packet is in\
    \ the router).  The second is the addition of an error\n   (latency) term that\
    \ could serve as a figure-of-merit in the\n   advertising of EF services.\n  \
    \ With the addition of these two changes the candidate definition\n   becomes\
    \ as follows:\n   In any interval of time (t1, t2) in which EF traffic is continuously\n\
    \   backlogged, at least R(t2 - t1 - E) bits of EF traffic must be\n   served,\
    \ where R is the configured rate for the EF aggregate and E is\n   an implementation-specific\
    \ latency term.\n   The \"continuously backlogged\" condition eliminates the insufficient-\n\
    \   packets-to-forward difficulty while the addition of the latency term\n   of\
    \ size MTU/C resolves the perfectly-clocked forwarding example\n   (section A.1),\
    \ and also removes the limitation on EF configured rate.\n   However, neither\
    \ fix (nor the two of them together) resolves the\n   example of section A.2.\
    \ To see this, recall that in the example of\n   section A.2 the EF aggregate\
    \ is continuously backlogged, but the\n   service rate of the EF aggregate is\
    \ consistently smaller than the\n   configured rate, and therefore no finite latency\
    \ term will suffice to\n   bring the example into conformance.\n"
- title: Appendix B. Alternative Characterization of Packet Scale Rate Guarantee
  contents:
  - "Appendix B. Alternative Characterization of Packet Scale Rate Guarantee\n   The\
    \ proofs of several bounds in this document can be found in [13].\n   These proofs\
    \ use an algebraic characterization of the aggregate\n   definition given by (eq_1),\
    \ (eq_2), and packet identity aware\n   definition given by (eq_3), (eq_4).  Since\
    \ this characterization is\n   of interest on its own, we present it in this section.\n"
- title: Theorem B1.  Characterization of the aggregate definition without
  contents:
  - "Theorem B1.  Characterization of the aggregate definition without\n         \
    \    f_n.\n   Consider a system where packets are numbered 1, 2, ... in order\
    \ of\n   arrival.  As in the aggregate definition, call a_n the n-th arrival\n\
    \   time, d_n - the n-th departure time, and l_n the size of the n-th\n   packet\
    \ to depart.  Define by convention d_0=0.  The aggregate\n   definition with rate\
    \ R and latency E_a is equivalent to saying that\n   for all n and all 0<=j<=\
    \ n-1:\n      d_n <= E_a + d_j + (l_(j+1) + ... + l_n)/R                 (eq_b1)\n\
    \   or\n   there exists some j+1 <= k <= n  such that\n      d_n  <= E_a + a_k\
    \ + (l_k + ... + l_n)/R                    (eq_b2)\n"
- title: Theorem B2.  Characterization of packet-identity-aware definition
  contents:
  - "Theorem B2.  Characterization of packet-identity-aware definition\n         \
    \    without F_n.\n   Consider a system where packets are numbered 1, 2, ... in\
    \ order of\n   arrival.  As in the packet-identity-aware definition, call A_n,\
    \ D_n\n   the arrival and departure times for the n-th packet, and L_n the size\n\
    \   of this packet.  Define by convention D_0=0.  The packet identity\n   aware\
    \ definition with rate R and latency E_p is equivalent to saying\n   that for\
    \ all n and all 0<=j<= n-1:\n      D_n <= E_p + D_j + (L_{j+1} + ... + L_n)/R\
    \                 (eq_b3)\n   or\n   there exists some j+1 <= k <= n  such that\n\
    \      D_n  <= E_p + A_k + (L_k + ... + L_n)/R                    (eq_b4)\n  \
    \ For the proofs of both Theorems, see [13].\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This document could not have been written without Fred Baker,\
    \ Bruce\n   Davie and Dimitrios Stiliadis.  Their time, support and insightful\n\
    \   comments were invaluable.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Anna Charny\n   Cisco Systems\n   300 Apollo Drive\n \
    \  Chelmsford, MA 01824\n   EMail: acharny@cisco.com\n   Jon Bennett\n   Motorola\n\
    \   3 Highwood Drive East\n   Tewksbury, MA 01876\n   EMail: jcrb@motorola.com\n\
    \   Kent Benson\n   Tellabs Research Center\n   3740 Edison Lake Parkway #101\n\
    \   Mishawaka, IN  46545\n   EMail: Kent.Benson@tellabs.com\n   Jean-Yves Le Boudec\n\
    \   ICA-EPFL, INN\n   Ecublens, CH-1015\n   Lausanne-EPFL, Switzerland\n   EMail:\
    \ jean-yves.leboudec@epfl.ch\n   Angela Chiu\n   Celion Networks\n   1 Sheila\
    \ Drive, Suite 2\n   Tinton Falls, NJ 07724\n   EMail: angela.chiu@celion.com\n\
    \   Bill Courtney\n   TRW\n   Bldg. 201/3702\n   One Space Park\n   Redondo Beach,\
    \ CA 90278\n   EMail: bill.courtney@trw.com\n   Shahram Davari\n   PMC-Sierra\
    \ Inc\n   411 Legget Drive\n   Ottawa, ON K2K 3C9, Canada\n   EMail: shahram_davari@pmc-sierra.com\n\
    \   Victor Firoiu\n   Nortel Networks\n   600 Tech Park\n   Billerica, MA 01821\n\
    \   EMail: vfiroiu@nortelnetworks.com\n   Charles Kalmanek\n   AT&T Labs-Research\n\
    \   180 Park Avenue, Room A113,\n   Florham Park NJ\n   EMail: crk@research.att.com\n\
    \   K.K. Ramakrishnan\n   TeraOptic Networks, Inc.\n   686 W. Maude Ave\n   Sunnyvale,\
    \ CA 94086\n   EMail: kk@teraoptic.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
