Abstract This memo defines a portion of the Management Information Base (MIB) for use with network management protocols in TCP/IP based internets.
In particular, it defines objects for managing RIP Version 2.
The Internet standard Network Management Framework consists of three components.
They are: STD 16/RFC 1155 which defines the SMI, the mechanisms used for describing and naming objects for the purpose of management.
STD 16/RFC 1212 defines a more concise description mechanism, which is wholly consistent with the SMI.
RFC 1156 which defines MIB I, the core set of managed objects for the Internet suite of protocols.
STD 17/RFC 1213 defines MIB II, an evolution of MIB I based on implementation experience and new operational requirements.
STD 15/RFC 1157 which defines the SNMP, the protocol used for network access to managed objects.
The Framework permits new objects to be defined for the purpose of experimentation and evaluation.
Objects Managed objects are accessed via a virtual information store, termed the Management Information Base or MIB.
Objects in the MIB are defined using the subset of Abstract Syntax Notation One (ASN.1)
[7] defined in the SMI.
In particular, each object has a name, a syntax, and an encoding.
The name is an object identifier, an administratively assigned name, which specifies an object type.
The object type together with an object instance serves to uniquely identify a specific instantiation of the object.
For human convenience, we often use a textual string, termed the OBJECT DESCRIPTOR, to also refer to the object type.
The syntax of an object type defines the abstract data structure corresponding to that object type.
The ASN.1 language is used for this purpose.
However, the SMI [3] purposely restricts the ASN.1 constructs which may be used.
These restrictions are explicitly made for simplicity.
The encoding of an object type is simply how that object type is represented using the object type's syntax.
Implicitly tied to the notion of an object type's syntax and encoding
is how the object type is represented when being transmitted on the network.
The SMI specifies the use of the basic encoding rules of ASN.1 [8], subject to the additional requirements imposed by the SNMP.
2.1 Format of Definitions Section 4 contains contains the specification of all object types contained in this MIB module.
The object types are defined using the conventions defined in the SMI, as amended by the extensions specified in [9].
Several new data types are introduced as a textual convention in this MIB document.
These textual conventions enhance the readability of the specification and can ease comparison with other specifications if appropriate.
It should be noted that the introduction of the these textual conventions has no effect on either the syntax nor the semantics of any managed objects.
The use of these is merely an artifact of the explanatory method used.
Objects defined in terms of one of these methods are always encoded by means of the rules that define the primitive type.
Hence, no changes to the SMI or the SNMP are necessary to accommodate these textual conventions which are adopted merely for the convenience of readers and writers in pursuit of the elusive goal of clear, concise, and unambiguous MIB documents.
The new data types are: Validation (the standard "set to invalid causes deletion" type), and RouteTag.
The RouteTag type represents the contents of the Route Tag field in the packet header or route entry.
The RIP 2 MIB contains global counters useful for detecting the deleterious effects of RIP incompatibilities, an "interfaces" table which contains interface specific statistics and configuration information, and an optional "neighbor" table containing information that may be helpful in debugging neighbor relationships.
Like the protocol itself, this MIB takes great care to preserve compatibility with RIP 1 systems, and controls for monitoring and controlling system interactions.
IMPORTS Counter, TimeTicks, IpAddress FROM RFC1155
SMI mib 2 FROM RFC1213
MIB OBJECT TYPE FROM RFC 1212;
the RouteTag type represents the contents of the   Route Tag field in the packet header or route entry.
the Validation type is used for the variable that deletes   an entry from a table, and ALWAYS takes at least these values:
These counters are intended to facilitate debugging quickly   changing routes or failing neighbors rip2GlobalGroup
"The number of changes made to the IP Route Da  tabase by RIP."
"The number of responses sent  to  RIP  queries from other systems."
Since RIP versions 1 and 2 do not deal with addressless links,   it is assumed that RIP "interfaces" are subnets within a   routing domain.
The RIP Interface Status Table.
mandatory DESCRIPTION "A Single Routing Domain in a single Subnet.
"The IP Address of this system on the indicated subnet."
"The number of RIP response packets received by the  RIP  process  which were subsequently dis  carded for any reason (e.g. a version 0 packet, or an unknown command type)."
"The number of routes, in  valid  RIP  packets, which were ignored for any reason (e.g. unknown address family, or invalid metric)."
{ rip2IfStatEntry 3 } rip2IfStatSentUpdates OBJECT TYPE
"The number of triggered RIP  updates  actually sent  on  this interface.
This explicitly does NOT include full updates
mandatory DESCRIPTION "Writing invalid has  the  effect  of  deleting this interface."
The RIP Interface Configuration Table.
"A list of subnets which require separate  con  figuration in RIP."
mandatory DESCRIPTION "A Single Routing Domain in a single Subnet.
OCTET STRING (SIZE(0..16)), rip2IfConfSend INTEGER, rip2IfConfReceive INTEGER, rip2IfConfDefaultMetric INTEGER, rip2IfConfStatus Validation }
"The IP Address of this system on the indicated subnet."
mandatory DESCRIPTION "Value inserted into the Routing  Domain  field of all RIP packets sent on this interface."
INTEGER { noAuthentication (1), simplePassword (2) } ACCESS
"The type of Authentication used on this inter  face.
"The value to be used as the Authentication Key whenever    the   corresponding   instance   of rip2IfConfAuthType has  the  value  simplePass  word.
A modification of the corresponding in  stance of rip2IfConfAuthType  does  not  modify the rip2IfConfAuthKey value.
If a string shorter than 16 octets is supplied, it  will be left justified and padded to 16 oc  tets, on the right, with nulls (0x00).
Reading this object always results in an  OCTET STRING  of  length zero; authentication may not be bypassed by reading the MIB object.
INTEGER { doNotSend (1), ripVersion1 (2), rip1Compatible (3), ripVersion2 (4) }
"What  the  router  sends  on  this  interface.
ripVersion1 implies sending RIP updates compli  ant  with  RFC  1058.
rip1Compatible  implies broadcasting RIP 2 updates using RFC 1058 route subsumption rules.
ripVersion2 implies  multi  casting RIP 2 updates."
INTEGER { rip1 (1), rip2 (2), rip1OrRip2 (3) } ACCESS
"This indicates which version  of  RIP  updates are   to  be  accepted.
that  rip2  and rip1OrRip2 implies reception of multicast pack  ets.
"This variable indicates what metric is  to  be used  as  a  default
route in RIP updates ori  ginated on this interface.
A value of zero in  dicates
that  no  default route should be ori  ginated; in this  case,  a  default  route  via another router may be propagated."
mandatory DESCRIPTION "Writing invalid has  the  effect  of  deleting this interface."
"A list of RIP Peers."
mandatory DESCRIPTION "Information regarding a single routing peer.
"The IP Address of the Peer System."
"The value in the Routing Domain field  in  RIP packets received from the peer."
"The RIP version number in the  header  of  the last RIP packet received."
"The number of RIP response packets  from  this peer discarded as invalid."
Security Considerations Security issues are not discussed in this memo.
