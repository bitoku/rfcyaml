- title: __initial_text__
  contents:
  - '                   Improved Packet Reordering Metrics

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   The content of this RFC was at one time considered by the IETF,\
    \ and\n   therefore it may resemble a current IETF work in progress or a\n   published\
    \ IETF work.  The IETF standard for reordering metrics is RFC\n   4737.  The metrics\
    \ in this document were not adopted for inclusion in\n   RFC 4737.  This RFC is\
    \ not a candidate for any level of Internet\n   Standard.  The IETF disclaims\
    \ any knowledge of the fitness of this\n   RFC for any purpose and in particular\
    \ notes that the decision to\n   publish is not based on IETF review for such\
    \ things as security,\n   congestion control, or inappropriate interaction with\
    \ deployed\n   protocols.  The RFC Editor has chosen to publish this document\
    \ at its\n   discretion.  Readers of this RFC should exercise caution in\n   evaluating\
    \ its value for implementation and deployment.  See RFC 3932\n   for more information.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document presents two improved metrics for packet reordering,\n\
    \   namely, Reorder Density (RD) and Reorder Buffer-occupancy Density\n   (RBD).\
    \  A threshold is used to clearly define when a packet is\n   considered lost,\
    \ to bound computational complexity at O(N), and to\n   keep the memory requirement\
    \ for evaluation independent of N, where N\n   is the length of the packet sequence.\
    \  RD is a comprehensive metric\n   that captures the characteristics of reordering,\
    \ while RBD evaluates\n   the sequences from the point of view of recovery from\
    \ reordering.\n   These metrics are simple to compute yet comprehensive in their\n\
    \   characterization of packet reordering.  The measures are robust and\n   orthogonal\
    \ to packet loss and duplication.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction and Motivation .....................................3\n\
    \   2. Attributes of Packet Reordering Metrics .........................4\n  \
    \ 3. Reorder Density and Reorder Buffer-Occupancy Density ............7\n    \
    \  3.1. Receive Index (RI) .........................................8\n      3.2.\
    \ Out-of-Order Packet ........................................9\n      3.3. Displacement\
    \ (D) ...........................................9\n      3.4. Displacement Threshold\
    \ (DT) ................................9\n      3.5. Displacement Frequency (FD)\
    \ ...............................10\n      3.6. Reorder Density (RD) ......................................10\n\
    \      3.7. Expected Packet (E) .......................................10\n  \
    \    3.8. Buffer Occupancy (B) ......................................10\n    \
    \  3.9. Buffer-Occupancy Threshold (BT) ...........................11\n      3.10.\
    \ Buffer-Occupancy Frequency (FB) ..........................11\n      3.11. Reorder\
    \ Buffer-Occupancy Density (RBD) ...................11\n   4. Representation of\
    \ Packet Reordering and Reorder Density ........11\n   5. Selection of DT ................................................12\n\
    \   6. Detection of Lost and Duplicate Packets ........................13\n  \
    \ 7. Algorithms to Evaluate RD and RBD ..............................14\n    \
    \  7.1. Algorithm for RD ..........................................14\n      7.2.\
    \ Algorithm for RBD .........................................16\n   8. Examples\
    \ .......................................................17\n   9. Characteristics\
    \ Derivable from RD and RBD ......................21\n   10. Comparison with Other\
    \ Metrics .................................22\n   11. Security Considerations\
    \ .......................................22\n   12. References ....................................................22\n\
    \      12.1. Normative References .....................................22\n  \
    \    12.2. Informative References ...................................22\n   13.\
    \ Contributors ..................................................24\n"
- title: 1.  Introduction and Motivation
  contents:
  - "1.  Introduction and Motivation\n   Packet reordering is a phenomenon that occurs\
    \ in Internet Protocol\n   (IP) networks.  Major causes of packet reordering include,\
    \ but are\n   not limited to, packet striping at layers 2 and 3 [Ben99] [Jai03],\n\
    \   priority scheduling (e.g., Diffserv), and route fluttering [Pax97]\n   [Boh03].\
    \  Reordering leads to degradation of the performance of many\n   applications\
    \ [Ben99] [Bla02] [Lao02].  Increased link speeds [Bar04],\n   increased parallelism\
    \ within routers and switches, Quality-of-Service\n   (QoS) support, and load\
    \ balancing among links all point to increased\n   packet reordering in future\
    \ networks.\n   Effective metrics for reordering are required to measure and quantify\n\
    \   reordering.  A good metric or a set of metrics capturing the nature\n   of\
    \ reordering can be expected to provide insight into the reordering\n   phenomenon\
    \ in networks.  It may be possible to use such metrics to\n   predict the effects\
    \ of reordering on applications that are sensitive\n   to packet reordering, and\
    \ perhaps even to compensate for reordering.\n   A metric for reordered packets\
    \ may also help evaluate network\n   protocols and implementations with respect\
    \ to their impact on packet\n   reordering.\n   The percentage of out-of-order\
    \ packets is often used as a metric for\n   characterizing reordering.  However,\
    \ this metric is vague and lacking\n   in detail.  Further, there is no uniform\
    \ definition for the degree of\n   reordering of an arrived packet [Ban02] [Pi05a].\
    \  For example,\n   consider the two packet sequences (1, 3, 4, 2, 5) and (1,\
    \ 4, 3, 2,\n   5).  It is possible to interpret the reordering of packets in these\n\
    \   sequences differently.  For example,\n   (i)   Packets 2, 3, and 4 are out\
    \ of order in both cases.\n   (ii)  Only packet 2 is out of order in the first\
    \ sequence, while\n         packets 2 and 3 are out of order in the second.\n\
    \   (iii) Packets 3 and 4 are out of order in both the sequences.\n   (iv)  Packets\
    \ 2, 3, and 4 are out of order in the first sequence,\n         while packets\
    \ 4 and 2 are out of order in the second sequence.\n   In essence, the percentage\
    \ of out-of-order packets as a metric of\n   reordering is subject to interpretation\
    \ and cannot capture the\n   reordering unambiguously and hence, accurately.\n\
    \   Other metrics attempt to overcome this ambiguity by defining only the\n  \
    \ late packets or only the early packets as being reordered.  However,\n   measuring\
    \ reordering based only on late or only on early packets is\n   not always effective.\
    \  Consider, for example, the sequence (1, 20, 2,\n   3, ..., 19, 21, 22, ...);\
    \ the only anomaly is that packet 20 is\n   delivered immediately after packet\
    \ 1.  A metric based only on\n   lateness will indicate a high degree of reordering,\
    \ even though in\n   this example it is a single packet arriving ahead of others.\n\
    \   Similarly, a metric based only on earliness does not accurately\n   capture\
    \ reordering caused by a late arriving packet.  A complete\n   reorder metric\
    \ must account for both earliness and lateness, and it\n   must be able to differentiate\
    \ between the two.  The inability to\n   capture both the earliness and the lateness\
    \ precludes a metric from\n   being useful for estimating end-to-end reordering\
    \ based on reordering\n   in constituent subnets.\n   The sensitivity to packet\
    \ reordering can vary significantly from one\n   application to the other.  Consider\
    \ again the packet sequence (1, 3,\n   4, 2, 5).  If buffers are available to\
    \ store packets 3 and 4 while\n   waiting for packet 2, an application can recover\
    \ from reordering.\n   However, with certain real-time applications, the out-of-order\n\
    \   arrival of packet 2 may render it useless.  While one can argue that\n   a\
    \ good packet reordering measurement scheme should capture\n   application-specific\
    \ effects, a counter argument can also be made\n   that packet reordering should\
    \ be measured strictly with respect to\n   the order of delivery, independent\
    \ of the application.\n   Many different packet reordering metrics have been suggested.\
    \  For\n   example, the standards-track document RFC 4737 [RFC4737] defines 11\n\
    \   metrics for packet reordering, including lateness-based percentage\n   metrics,\
    \ reordering extent metrics, and N-reordering.\n   Section 2 of this document\
    \ discusses the desirable attributes of any\n   packet reordering metric.  Section\
    \ 3 introduces two additional packet\n   reorder metrics: Reorder Density (RD)\
    \ and Reorder Buffer-occupancy\n   Density (RBD), which we claim are superior\
    \ to the others [Pi07].  In\n   particular, RD possesses all the desirable attributes,\
    \ while other\n   metrics fall significantly short in several of these attributes.\
    \  RBD\n   is unique in measuring reordering in terms of the system resources\n\
    \   needed for recovery from packet reordering.  Both RD and RBD have a\n   computation\
    \ complexity O(N), where N is the length of the packet\n   sequence, and they\
    \ can therefore be used for real-time online\n   monitoring.\n"
- title: 2.  Attributes of Packet Reordering Metrics
  contents:
  - "2.  Attributes of Packet Reordering Metrics\n   The first and foremost requirement\
    \ of a packet reordering metric is\n   its ability to capture the amount and extent\
    \ of reordering in a\n   sequence of packets.  The fact that a measure varies\
    \ with reordering\n   of packets in a stream does not make it a good metric. \
    \ In [Ben99],\n   the authors have identified desirable features of a reordering\n\
    \   metric.  This list encloses the foremost requirements stated above:\n   simplicity,\
    \ low sensitivity to packet loss, ability to combine\n   reorder measures from\
    \ two networks, minimal value for in-order data,\n   and independence of data\
    \ size.  These features are explained below in\n   detail, along with additional\
    \ desired features.  Note, the ability to\n   combine reorder measures from two\
    \ networks is added to broaden\n   applicability, and data size independence is\
    \ discussed under\n   evaluation complexity.  However, data size independence\
    \ could also\n   refer to the final measure, as in percentage reordering or even\
    \ a\n   normalized representation.\n   a) Simplicity\n      An ideal metric is\
    \ one that is simple to understand and evaluate,\n      and yet informative, i.e.,\
    \ able to provide a complete picture of\n      reordering.  Percentage of packets\
    \ reordered is the simplest\n      singleton metric; but the ambiguity in its\
    \ definition, as\n      discussed earlier, and its failure to carry the extent\
    \ of\n      reordering make it less informative.  On the other hand, keeping\n\
    \      track of the displacements of each and every packet without\n      compressing\
    \ the data will contain all the information about\n      reordering, but it is\
    \ not simple to evaluate or use.\n      A simpler metric may be preferred in some\
    \ cases even though it\n      does not capture reordering completely, while other\
    \ cases may\n      demand a more complex, yet complete metric.\n      In striving\
    \ to strike a balance, the lateness-based metrics\n      consider only the late\
    \ packets as reordered, and earliness-based\n      metrics only the early packets\
    \ as reordered.  However, a metric\n      based only on earliness or only on lateness\
    \ captures only a part\n      of the information associated with reordering. \
    \ In contrast, a\n      metric capturing both early and late arrivals provides\
    \ a complete\n      picture of reordering in a sequence.\n   b) Low Sensitivity\
    \ to Packet Loss and Duplication\n      A reorder metric should treat only an\
    \ out-of-order packet as\n      reordered, i.e., if a packet is lost during transit,\
    \ then this\n      should not result in its following packets, which arrive in\
    \ order,\n      being classified as out of order.  Consider the sequence (1, 3,\
    \ 4,\n      5, 6).  If packet 2 has been lost, the sequence should not be\n  \
    \    considered to contain any out-of-order packets.  Similarly, if\n      multiple\
    \ copies of a packet (duplicates) are delivered, this must\n      not result in\
    \ a packet being classified as out of order, as long\n      as one copy arrives\
    \ in the proper position.  For example, sequence\n      (1, 2, 3, 2, 4, 5) has\
    \ no reordering.  The lost and duplicate\n      packet counts may be tracked using\
    \ metrics specifically intended\n      to measure those, e.g., percentage of lost\
    \ packets, and percentage\n      of duplicate packets.\n   c) Low Evaluation Complexity\n\
    \      Memory and time complexities associated with evaluating a metric\n    \
    \  play a vital role in implementation and real-time measurements.\n      Spatial/memory\
    \ complexity corresponds to the amount of buffers\n      required for the overall\
    \ measurement process, whereas\n      time/computation complexity refers to the\
    \ number of computation\n      steps involved in computing the amount of reordering\
    \ in a\n      sequence.  On-the-fly evaluation of the metric for large streams\n\
    \      of packets requires the computational complexity to be O(N), where\n  \
    \    N denotes the number of received packets, used for the reordering\n     \
    \ measure.  This allows the metric to be updated in constant-time as\n      each\
    \ packet arrives.  In the absence of a threshold defining\n      losses or the\
    \ number of sequence numbers to buffer for detection\n      of duplicates, the\
    \ worst-case complexity of loss and duplication\n      detection will increase\
    \ with N.  The rate of increase will depend,\n      among other things, on the\
    \ value of N and the implementation of\n      the duplicate detection scheme.\n\
    \   d) Robustness\n      Reorder measurements should be robust against different\
    \ network\n      phenomena and peculiarities in measurement or sequences such\
    \ as a\n      very late arrival of a duplicate packet, or even a rogue packet\n\
    \      due to an error or sequence number wraparound.  The impact due to\n   \
    \   an event associated with a single or a small number of packets\n      should\
    \ have a sense of proportionality on the reorder measure.\n      Consider, for\
    \ example, the arrival sequence: (1, 5430, 2, 3, 4, 5,\n      ...) where packet\
    \ 5430 appears to be very early; it may be due to\n      either sequence rollover\
    \ in test streams or some unknown reason.\n   e) Broad Applicability\n      A\
    \ framework for IP performance metrics [RFC2330] states: \"The\n      metrics\
    \ must aid users and providers in understanding the\n      performance they experience\
    \ or provide\".\n      Rather than being a mere value or a set of values that\
    \ changes\n      with the reordering of packets in a stream, a reorder metric\n\
    \      should be useful for a variety of purposes.  An application or a\n    \
    \  transport protocol implementation, for example, may be able to use\n      the\
    \ reordering information to allocate resources to recover from\n      reordering.\
    \  A metric may be useful for TCP flow control, buffer\n      resource allocation\
    \ for recovery from reordering and/or network\n      diagnosis.\n      The ability\
    \ to combine the reorder metrics of constituent subnets\n      to measure the\
    \ end-to-end reordering would be an extremely useful\n      property.  In the\
    \ absence of this property, no amount of\n      individual network measurements,\
    \ short of measuring the reordering\n      for the pair of endpoints of interest,\
    \ would be useful in\n      predicting the end-to-end reordering.\n      The ability\
    \ to provide different types of information based on\n      monitoring or diagnostic\
    \ needs also broadens the applicability of\n      a metric.  Examples of applicable\
    \ information for reordering may\n      include parameters such as the percentage\
    \ of reordered packets\n      that resulted in fast retransmissions in TCP, or\
    \ the percentage of\n      utilization of the reorder recovery buffer.\n"
- title: 3.  Reorder Density and Reorder Buffer-Occupancy Density
  contents:
  - "3.  Reorder Density and Reorder Buffer-Occupancy Density\n   In this memo, we\
    \ define two discrete density functions, Reorder\n   Density (RD) and Reorder\
    \ Buffer-occupancy Density (RBD), that capture\n   the nature of reordering in\
    \ a packet stream.  These two metrics can\n   be used individually or collectively\
    \ to characterize the reordering\n   in a packet stream.  Also presented are algorithms\
    \ for real-time\n   evaluation of these metrics for an incoming packet stream.\n\
    \   RD is defined as the distribution of displacements of packets from\n   their\
    \ original positions, normalized with respect to the number of\n   packets.  An\
    \ early packet corresponds to a negative displacement and\n   a late packet to\
    \ a positive displacement.  A threshold on\n   displacement is used to keep the\
    \ computation within bounds.  The\n   choice of threshold value depends on the\
    \ measurement uses and\n   constraints, such as whether duplicate packets are\
    \ accounted for when\n   evaluating these displacements (discussed in Section\
    \ 5).\n   The ability of RD to capture the nature and properties of reordering\n\
    \   in a comprehensive manner has been demonstrated in [Pi05a], [Pi05b],\n   [Pi05c],\
    \ and [Pi07].  The RD observed at the output port of a subnet\n   when the input\
    \ is an in-order packet stream can be viewed as a\n   \"reorder response\" of\
    \ a network, a concept somewhat similar to the\n   \"system response\" or \"impulse\
    \ response\" used in traditional system\n   theory.  For a subnet under stationary\
    \ conditions, RD is the\n   probability density of the packet displacement.  RD\
    \ measured on\n   individual subnets can be combined, using the convolution operation,\n\
    \   to predict the end-to-end reorder characteristics of the network\n   formed\
    \ by the cascade of subnets under a fairly broad set of\n   conditions [Pi05b].\
    \  RD also shows significant promise as a tool for\n   analytical modeling of\
    \ reordering, as demonstrated with a load-\n   balancing scenario in [Pi06]. \
    \ Use of a threshold to define the\n   condition under which a packet is considered\
    \ lost makes the metric\n   robust, efficient, and adaptable for different network\
    \ and stream\n   characteristics.\n   RBD is the normalized histogram of the occupancy\
    \ of a hypothetical\n   buffer that would allow the recovery from out-of-order\
    \ delivery of\n   packets.  If an arriving packet is early, it is added to a\n\
    \   hypothetical buffer until it can be released in order [Ban02].  The\n   occupancy\
    \ of this buffer, after each arrival, is used as the measure\n   of reordering.\
    \  A threshold, used to declare a packet as lost, keeps\n   the complexity of\
    \ computation within bounds.  The threshold may be\n   selected based on application\
    \ requirements in situations where the\n   late arrival of a packet makes it useless,\
    \ e.g., a real-time\n   application.  In [Ban02], this metric was called RD and\
    \ buffer\n   occupancy was known as displacement.\n   RD and RBD are simple, yet\
    \ useful, metrics for measurement and\n   evaluation of reordering.  These metrics\
    \ are robust against many\n   peculiarities, such as those discussed previously,\
    \ and have a\n   computational complexity of O(N), where N is the received sequence\n\
    \   size.  RD is orthogonal to loss and duplication, whereas RBD is\n   orthogonal\
    \ to duplication.\n   A detailed comparison of these and other proposed metrics\
    \ for\n   reordering is presented in [Pi07].\n   The following terms are used\
    \ to formally define RD, RBD, and the\n   measurement algorithms.  The wraparound\
    \ of sequence numbers is not\n   addressed in this document explicitly, but with\
    \ the use of modulo-N\n   arithmetic, all claims made here remain valid in the\
    \ presence of\n   wraparound.\n"
- title: 3.1.  Receive Index (RI)
  contents:
  - "3.1.  Receive Index (RI)\n   Consider a sequence of packets (1, 2, ..., N) transmitted\
    \ over a\n   network.  A receive index RI (1, 2, ...), is a value assigned to\
    \ a\n   packet as it arrives at its destination, according to the order of\n \
    \  arrival.  A receive index is not assigned to duplicate packets, and\n   the\
    \ receive index value skips the value corresponding to a lost\n   packet.  (The\
    \ detection of loss and duplication for this purpose is\n   described in Section\
    \ 6.)  In the absence of reordering, the sequence\n   number of the packet and\
    \ the receive index are the same for each\n   packet.\n   RI is used to compute\
    \ earliness and lateness of an arriving packet.\n   Below are two examples of\
    \ received sequences with receive index\n   values for a sequence of 5 packets\
    \ (1, 2, 3, 4, 5) arriving out of\n   order:\n   Example 1:\n   Arrived sequence:\
    \    2   1   4   5    3\n   receive index:       1   2   3   4    5\n   Example\
    \ 2:\n   Arrived sequence:    1   4   3   5    3\n   receive index:       1  \
    \ 3   4   5    -\n   In Example 1, there is no loss or duplication.  In Example\
    \ 2, the\n   packet with sequence number 2 is lost.  Thus, 2 is not assigned as\
    \ an\n   RI.  Packet 3 is duplicated; thus, the second copy is not assigned an\n\
    \   RI.\n"
- title: 3.2.  Out-of-Order Packet
  contents:
  - "3.2.  Out-of-Order Packet\n   When the sequence number of a packet is not equal\
    \ to the RI assigned\n   to it, it is considered to be an out-of-order packet.\
    \  Duplicates for\n   which an RI is not defined are ignored.\n"
- title: 3.3.  Displacement (D)
  contents:
  - "3.3.  Displacement (D)\n   Displacement (D) of a packet is defined as the difference\
    \ between RI\n   and the sequence number of the packet, i.e., the displacement\
    \ of\n   packet i is RI[i] - i.  Thus, a negative displacement indicates the\n\
    \   earliness of a packet and a positive displacement the lateness.  In\n   example\
    \ 3 below, an arrived sequence with displacements of each\n   packet is illustrated.\n\
    \   Example 3:\n   Arrived sequence:    1   4   3   5   3   8   7   6\n   receive\
    \ index:       1   3   4   5   -   6   7   8\n   Displacement:        0  -1  \
    \ 1   0   -  -2   0   2\n"
- title: 3.4.  Displacement Threshold (DT)
  contents:
  - "3.4.  Displacement Threshold (DT)\n   The displacement threshold is a threshold\
    \ on the displacement of\n   packets that allows the metric to classify a packet\
    \ as lost or\n   duplicate.  Determining when to classify a packet as lost is\n\
    \   difficult because there is no point in time at which a packet can\n   definitely\
    \ be classified as lost; the packet may still arrive after\n   some arbitrarily\
    \ long delay.  However, from a practical point of\n   view, a packet may be classified\
    \ as lost if it has not arrived within\n   a certain administratively defined\
    \ displacement threshold, DT.\n   Similarly, to identify a duplicate packet, it\
    \ is theoretically\n   necessary to keep track of all the arrived (or missing)\
    \ packets.\n   Again, however, from a practical point of view, missing packets\n\
    \   within a certain window of sequence numbers suffice.  Thus, DT is\n   used\
    \ as a practical means for declaring a packet as lost or\n   duplicated.  DT makes\
    \ the metric more robust, keeps the computational\n   complexity for long sequences\
    \ within O(N), and keeps storage\n   requirements independent of N.\n   If the\
    \ DT selected is too small, reordered packets might be\n   classified as lost.\
    \  A large DT will increase both the size of memory\n   required to keep track\
    \ of sequence numbers and the length of\n   computation time required to evaluate\
    \ the metric.  Indeed, it is\n   possible to use two different thresholds for\
    \ the two cases.  The\n   selection of DT is further discussed in Section 5.\n"
- title: 3.5.  Displacement Frequency (FD)
  contents:
  - "3.5.  Displacement Frequency (FD)\n   Displacement Frequency FD[k] is the number\
    \ of arrived packets having\n   a displacement of k, where k takes values from\
    \ -DT to DT.\n"
- title: 3.6.  Reorder Density (RD)
  contents:
  - "3.6.  Reorder Density (RD)\n   RD is defined as the distribution of the Displacement\
    \ Frequencies\n   FD[k], normalized with respect to N', where N' is the length\
    \ of the\n   received sequence, ignoring lost and duplicate packets.  N' is equal\n\
    \   to the sum(FD[k]) for k in [-DT, DT].\n"
- title: 3.7.  Expected Packet (E)
  contents:
  - "3.7.  Expected Packet (E)\n   A packet with sequence number E is expected if\
    \ E is the largest\n   number such that all the packets with sequence numbers\
    \ less than E\n   have already arrived or have been determined to be lost.\n"
- title: 3.8.  Buffer Occupancy (B)
  contents:
  - "3.8.  Buffer Occupancy (B)\n   An arrived packet with a sequence number greater\
    \ than that of an\n   expected packet is considered to be stored in a hypothetical\
    \ buffer\n   sufficiently long to permit recovery from reordering.  At any packet\n\
    \   arrival instant, the buffer occupancy is equal to the number of\n   out-of-order\
    \ packets in the buffer, including the newly arrived\n   packet.  One buffer location\
    \ is assumed for each packet, although it\n   is possible to extend the concept\
    \ to the case where the number of\n   bytes is used for buffer occupancy.  For\
    \ example, consider the\n   sequence of packets (1, 2, 4, 5, 3) with expected\
    \ order (1, 2, 3, 4,\n   5).  When packet 4 arrives, the buffer occupancy is 1\
    \ because packet\n   4 arrived early.  Similarly, the buffer occupancy becomes\
    \ 2 when\n   packet 5 arrives.  When packet 3 arrives, recovery from reordering\n\
    \   occurs and the buffer occupancy reduces to zero.\n"
- title: 3.9.  Buffer-Occupancy Threshold (BT)
  contents:
  - "3.9.  Buffer-Occupancy Threshold (BT)\n   Buffer-occupancy threshold is a threshold\
    \ on the maximum size of the\n   hypothetical buffer that is used for recovery\
    \ from reordering.  As\n   with the case of DT for RD, BT is used for loss and\
    \ duplication\n   classification for Reorder Buffer-occupancy Density (RBD) computation\n\
    \   (see Section 3.11).  BT provides robustness and limits the\n   computational\
    \ complexity of RBD.\n"
- title: 3.10.  Buffer-Occupancy Frequency (FB)
  contents:
  - "3.10.  Buffer-Occupancy Frequency (FB)\n   At the arrival of each packet, the\
    \ buffer occupancy may take any\n   value, k, ranging from 0 to BT.  The buffer\
    \ occupancy frequency FB[k]\n   is the number of arrival instances after which\
    \ the occupancy takes\n   the value of k.\n"
- title: 3.11.  Reorder Buffer-Occupancy Density (RBD)
  contents:
  - "3.11.  Reorder Buffer-Occupancy Density (RBD)\n   Reorder buffer-occupancy density\
    \ is the buffer occupancy frequencies\n   normalized by the total number of non-duplicate\
    \ packets, i.e.,\n   RBD[k] = FB[k]/N' where N' is the length of the received\
    \ sequence,\n   ignoring excessively delayed (deemed lost) and duplicate packets.\
    \  N'\n   is also the sum(FB[k]) for all k such that k belongs to [0, BT].\n"
- title: 4.  Representation of Packet Reordering and Reorder Density
  contents:
  - "4.  Representation of Packet Reordering and Reorder Density\n   Consider a sequence\
    \ of packets (1, 2, ..., N).  Let the RI assigned\n   to packet m be \"the sequence\
    \ number m plus an offset dm\", i.e.,\n            RI = m + dm; D  = dm\n   A\
    \ reorder event of packet m is represented by r(m, dm).  When dm is\n   not equal\
    \ to zero, a reorder event is said to have occurred.  A\n   packet is late if\
    \ dm > 0 and early if dm < 0.  Thus, packet\n   reordering of a sequence of packets\
    \ is completely represented by the\n   union of reorder events, R, referred to\
    \ as the reorder set:\n            R = {r(m,dm)| dm not equal to 0 for all m}\n\
    \   If there is no reordering in a packet sequence, then R is the null\n   set.\n\
    \   Examples 4 and 5 illustrate the reorder set:\n   Example 4. No losses or duplicates\n\
    \   Arrived Sequence     1       2       3       5       4       6\n   receive\
    \ index (RI)   1       2       3       4       5       6\n   Displacement (D)\
    \     0       0       0      -1       1       0\n   R = {(4,1), (5,-1)}\n   Example\
    \ 5. Packet 4 is lost and 2 is duplicated\n   Arrived Sequence     1       2 \
    \      5       3       6       2\n   receive index (RI)   1       2       3  \
    \     5       6       -\n   Displacement (D)     0       0       -2      2   \
    \    0       -\n   R = {(3, 2), (5, -2)}\n   RD is defined as the discrete density\
    \ of the frequency of packets\n   with respect to their displacements, i.e., the\
    \ lateness and earliness\n   from the original position.  Let S[k] denote the\
    \ set of reorder\n   events in R with displacement equal to k.  That is:\n   \
    \         S[k]= {r(m, dm)| dm = k}\n   Let |S[k]| be the cardinality of set S[k].\
    \  Thus, RD[k] is defined as\n   |S[k]| normalized with respect to the total number\
    \ of received\n   packets (N').  Note that N' does not include duplicate or lost\n\
    \   packets.\n            RD[k]  = |S[k]| / N' for k not equal to zero\n   RD[0]\
    \ corresponds to the packets for which RI is the same as the\n   sequence number:\n\
    \            RD[0] = 1 - sum(|S[k]| / N')\n   As defined previously, FD[k] is\
    \ the measure that keeps track of\n   |S[k]|.\n"
- title: 5.  Selection of DT
  contents:
  - "5.  Selection of DT\n   Although assigning a threshold for determining lost and\
    \ duplicate\n   packets might appear to introduce error into the reorder metrics,\
    \ in\n   practice this need not be the case.  Applications, protocols, and the\n\
    \   network itself operate within finite resource constraints that\n   introduce\
    \ practical limits beyond which the choice of certain values\n   becomes irrelevant.\
    \  If the operational nature of an application is\n   such that a DT can be defined,\
    \ then using DT in the computation of\n   reorder metrics will not invalidate\
    \ nor limit the effectiveness of\n   the metrics, i.e., increasing DT does not\
    \ provide any benefit.  In\n   the case of TCP, the maximum transmit and receive\
    \ window sizes impose\n   a natural limit on the useful value of DT.  Sequence\
    \ number\n   wraparound may provide a useful upper bound for DT in some instances.\n\
    \   If there are no operational constraints imposed by factors as\n   described\
    \ above, or if one is purely interested in a more complete\n   picture of reordering,\
    \ then DT can be made as large as required.  If\n   DT is equal to the length\
    \ of the packet sequence (worst case\n   scenario), a complete picture of reordering\
    \ is seen.  Any metric that\n   does not rely on a threshold to declare a packet\
    \ as lost implicitly\n   makes one of two assumptions: a) A missing packet is\
    \ not considered\n   lost until the end of the sequence, or b) the packet is considered\n\
    \   lost until it arrives.  The former corresponds to the case where DT\n   is\
    \ set to the length of the sequence.  The latter leads to many\n   problems related\
    \ to complexity and robustness.\n"
- title: 6.  Detection of Lost and Duplicate Packets
  contents:
  - "6.  Detection of Lost and Duplicate Packets\n   In RD, a packet is considered\
    \ lost if it is late beyond DT.\n   Non-duplicate arriving packets do not have\
    \ a copy in the buffer and\n   do not have a sequence number less (earlier) than\
    \ E.  In RBD, a\n   packet is considered lost if the buffer is filled to its threshold\n\
    \   BT.  A packet is considered a duplicate when the sequence number is\n   less\
    \ than the expected packet, or if the sequence number is already\n   in the buffer.\n\
    \   Since RI skips the sequence number of a lost packet, the question\n   arises\
    \ as to how to assign an RI to subsequent packets that arrive\n   before it is\
    \ known that the packet is lost.  This problem arises only\n   when reorder metrics\
    \ are calculated in real-time for an incoming\n   sequence, and not with offline\
    \ computations.  This concern can be\n   handled in one of two ways:\n   a) Go-back\
    \ Method:  RD is computed as packets arrive.  When a packet\n   is deemed lost,\
    \ RI values are corrected and displacements are\n   recomputed.  The Go-back Method\
    \ is only invoked when a packet is lost\n   and recomputing RD involves at most\
    \ DT packets.\n   b) Stay-back Method:  RD evaluation lags the arriving packets\
    \ so that\n   the correct RI and E values can be assigned to each packet as it\n\
    \   arrives.  Here, RI is assigned to a packet only once, and the value\n   assigned\
    \ is guaranteed to be correct.  In the worst case, the\n   computation lags the\
    \ arriving packet by DT.  The lag associated with\n   the Stay-back Method is\
    \ incurred only when a packet is missing.\n   Another issue related to a metric\
    \ and its implementation is the\n   robustness against peculiarities that may\
    \ occur in a sequence as\n   discussed in Section 2.  Consider, for example, the\
    \ arrival sequence\n   (1, 5430, 2, 3, 4, 5, ...).  With RD, a sense of proportionality\
    \ is\n   easily maintained using the concept of threshold (DT), which limits\n\
    \   the effects a rogue packet can have on the measurement results.  In\n   this\
    \ example, when the displacement is greater than DT, rogue packet\n   5430 is\
    \ discarded.  In this way the impact due to the rogue packet is\n   limited, at\
    \ most, to DT packets, thus imposing a limit on the amount\n   of error it can\
    \ cause in the results.  Note also that a threshold\n   different from DT can\
    \ be used for the same purpose.  For example, a\n   pre-specified threshold that\
    \ limits the time a packet remains in the\n   buffer can make RBD robust against\
    \ rogue packets.\n"
- title: 7.  Algorithms to Evaluate RD and RBD
  contents:
  - "7.  Algorithms to Evaluate RD and RBD\n   The algorithms to compute RD and RBD\
    \ are given below.  These\n   algorithms are applicable for online computation\
    \ of an incoming\n   packet stream and provide an up-to-date metric for the packet\
    \ stream\n   read so far.  For simplicity, the sequence numbers are considered\
    \ to\n   start from 1 and continue in increments of 1.  Only the Stay-back\n \
    \  Method of loss detection is presented here; hence, the RD values lag\n   by\
    \ a maximum of DT.  The algorithm for the Go-back Method is given in\n   [Bar04].\
    \  Perl scripts for these algorithms are posted in [Per04].\n"
- title: 7.1.  Algorithm for RD
  contents:
  - "7.1.  Algorithm for RD\n   Variables used:\n   -------------------------------------------------------------------\n\
    \    RI: receive index.\n    S: Arrival under consideration for lateness/earliness\
    \ computation.\n    D: Lateness or earliness of the packet being processed: dm\
    \ for m.\n    FD[-DT..DT]: Frequency of lateness and earliness.\n    window[1..DT+1]:\
    \ List of incoming sequence numbers; FIFO buffer.\n    buffer[1..DT]: Array to\
    \ hold sequence numbers of early arrivals.\n    window[] and buffer[] are empty\
    \ at the beginning.\n   ===================================================================\n\
    \   Step 1. Initialize:\n      Store first unique DT+1 sequence numbers in arriving\
    \ order into\n      window; RI = 1;\n   Step 2. Repeat (until window is empty):\n\
    \      If (window or buffer contains sequence number RI)\n      {\n         Move\
    \ sequence number out of window to S # window is FIFO\n         D = RI - S; #\
    \ compute displacement\n         If (absolute(D) <= DT) # Apply threshold\n  \
    \       {\n            FD[D]++; # Update frequency\n            If (buffer contains\
    \ sequence number RI)\n               Delete RI from buffer;\n            If (D\
    \ < 0) # Early Arrival\n               add S to empty slot in buffer;\n      \
    \      RI++; # Update RI value\n         }\n         Else # Displacement beyond\
    \ threshold.\n         {\n            Discard S;\n            # Note, an early\
    \ arrival in window is moved to buffer if\n            # its displacement is less\
    \ or equal to DT.  Therefore, the\n            # contents in buffer will have\
    \ only possible RIs.  Thus,\n            # clearing an RI as it is consumed prevents\
    \ memory leaks\n            # in buffer\n         }\n         # Get next incoming\
    \ non-duplicate sequence number, if any.\n         newS = get_next_arrival();\
    \ # subroutine called*\n         if (newS != null)\n         {\n             \
    \ add newS to window;\n         }\n         if (window is empty) go to step 3;\n\
    \      }\n      Else # RI not found.  Get next RI value.\n      {\n         #\
    \ Next RI is the minimum among window and buffer contents.\n         m = minimum\
    \ (minimum (window), minimum (buffer));\n         If (RI < m)\n            RI\
    \ = m;\n         Else\n            RI++;\n      }\n   Step 3. Normalize FD to\
    \ get RD;\n   # Get a new sequence number from packet stream, if any\n   subroutine\
    \ get_next_arrival()\n   {\n        do   # get non-duplicate next arrival\n  \
    \      {\n              newS = new sequence from arriving stream;\n          \
    \    if (newS == null) # End of packet stream\n                 return null;\n\
    \        } while (newS < RI or newS in buffer or newS in window);\n        return\
    \ newS;\n   }\n"
- title: 7.2.  Algorithm for RBD
  contents:
  - "7.2.  Algorithm for RBD\n   Variables used:\n   ---------------------------------------------------------------------\n\
    \   # E : Next expected sequence number.\n   # S : Sequence number of the packet\
    \ just arrived.\n   # B : Current buffer occupancy.\n   # BT: Buffer Occupancy\
    \ threshold.\n   # FB[i]: Frequency of buffer occupancy i  (0 <= i <= BT).\n \
    \  # in_buffer(N) : True if the packet with sequence number N is\n     already\
    \ stored in the buffer.\n   =====================================================================\n\
    \   1.  Initialize E = 1, B = 0 and FB[i] = 0 for all values of i.\n   2.  Do\
    \ the following for each arrived packet.\n          If (in_buffer(S) || S < E)\
    \ /*Do nothing*/;\n          /* Case a: S is a duplicate or excessively delayed\
    \ packet.\n          Discard the packet.*/\n          Else\n          {\n    \
    \         If (S == E)\n             /* Case b: Expected packet has arrived.*/\n\
    \             {\n                E = E + 1;\n                While (in_buffer(E))\n\
    \                {\n                   B = B - 1; /* Free buffer occupied by E.*/\n\
    \                   E = E + 1; /* Expect next packet.*/\n                }\n \
    \               FB[B] = FB[B] + 1; /*Update frequency for buffer\n           \
    \     occupancy B.*/\n             } /* End of If (S == E)*/\n             ElseIf\
    \ (S > E)\n             /* Case c: Arrived packet has a sequence number higher\n\
    \                than expected.*/\n             {\n                If (B < BT)\n\
    \                /* Store the arrived packet in a buffer.*/\n                \
    \   B = B + 1;\n                Else\n                /* Expected packet is delayed\
    \ beyond the BT.\n                Treat it as lost.*/\n                {\n   \
    \                Repeat\n                   {\n                      E = E + 1;\n\
    \                   }\n                   Until (in_buffer(E) || E == S);\n  \
    \                 While (in_buffer(E) || E == S)\n                   {\n     \
    \                 if (E != S) B = B - 1;\n                      E = E + 1;\n \
    \                  }\n                 }\n                 FB[B] = FB[B] + 1;\
    \ /*Update frequency for buffer\n                 occupancy B.*/\n           \
    \  } /* End of ElseIf (S > E)*/\n          }\n   3. Normalize FB[i] to obtain\
    \ RBD[i], for all values of i using\n                            FB[i]\n     \
    \ RBD[i] = ----------------------------------\n                  Sum(FB[j] for\
    \ 0 <= j <= BT)\n"
- title: 8.  Examples
  contents:
  - "8.  Examples\n   a. Scenario with no packet loss\n   Consider the sequence of\
    \ packets (1, 4, 2, 5, 3, 6, 7, 8) with DT =\n   BT = 4.\n   Tables 1 and 2 show\
    \ the computational steps when the RD algorithm is\n   applied to the above sequence.\n\
    \   ------------------------------------------------------\n   Table 1: Late/Early-packet\
    \ Frequency computation steps\n   ------------------------------------------------------\n\
    \   S         1     4     2     5     3     6   7    8\n   RI        1     2 \
    \    3     4     5     6   7    8\n   D         0    -2     1    -1     2    \
    \ 0   0    0\n   FD[D]     1     1     1     1     1     2   3    4\n   ------------------------------------------------------\n\
    \   (S, RI,D and FD[D] as described in Section 7.1)\n   ------------------------------------------------------\n\
    \   The last row (FD[D]) represents the current frequency of occurrence\n   of\
    \ the displacement D, e.g., column 3 indicates FD[1] = 1 while\n   column 4 indicates\
    \ FD[-1] = 1.  The final set of values for RD are\n   shown in Table 2.\n   -------------------------------------------------\n\
    \   Table 2: Reorder Density (RD)\n   -------------------------------------------------\n\
    \     D       -2       -1      0     1       2\n   FD[D]      1        1     \
    \ 4     1       1\n   RD[D]     0.125   0.125   0.5   0.125   0.125\n   -------------------------------------------------\n\
    \   (D,FD[D] and RD[D] as described in Section 7.1)\n   -------------------------------------------------\n\
    \   Tables 3 and 4 illustrate the computational steps for RBD for the\n   same\
    \ example.\n   ------------------------------------------------------------\n\
    \   Table 3: Buffer occupancy frequencies (FB) computation steps\n   ------------------------------------------------------------\n\
    \   S         1     4     2     5     3     6     7     8\n   E         1    \
    \ 2     2     3     3     6     7     8\n   B         0     1     1     2    \
    \ 0     0     0     0\n   FB[B]     1     1     2     1     2     3     4    \
    \ 5\n   ------------------------------------------------------------\n   (E,S,B\
    \ and FB[B] as described in Section 7.2)\n   ------------------------------------------------------------\n\
    \   ------------------------------------------------------------\n   Table 4:\
    \ Reorder Buffer-occupancy Density\n   ------------------------------------------------------------\n\
    \   B           0        1     2\n   FB[B]       5        2     1\n   RBD[B] \
    \    0.625   0.25  0.125\n   ------------------------------------------------------------\n\
    \   (B,FB[B] and RBD[B] as discussed in Section 7.2)\n   ------------------------------------------------------------\n\
    \   Graphical representations of the densities are as follows:\n             \
    \   ^                            ^\n                |                        \
    \    |\n                |                            _\n    ^       0.5 _    \
    \               ^ 0.625 | |\n    |          | |                  |       | |\n\
    \               | |                          | |\n   RD[D]       | |         \
    \       RBD[B]    | | - o.25\n          _  _ | | _  _ 0.125               | ||\
    \ | - 0.125\n         | || || || || |                    | || || |\n        --+--+--+--+--+--+-->\
    \             ---+--+--+--\n         -2 -1  0  1  2                      0  1\
    \  2\n                D  -->                        B -->\n   b. Scenario with\
    \ packet loss\n   Consider a sequence of 6 packets (1, 2, 4, 5, 6, 7) with DT\
    \ = BT = 3.\n   Table 5 shows the computational steps when the RD algorithm is\n\
    \   applied to the above sequence to obtain FD[D].\n   ------------------------------------------------------\n\
    \   Table 5: Late/Early-packet Frequency computation steps\n   ------------------------------------------------------\n\
    \   S         1     2     4     5     6     7\n   RI        1     2     4    \
    \ 5     6     7\n   D         0     0     0     0     0     0\n   FD[D]     1\
    \     2     3     4     5     6\n   ------------------------------------------------------\n\
    \   (S,RI,D and FD[D] as described in Section 7.1)\n   ------------------------------------------------------\n\
    \   Table 6 illustrates the FB[B] for the above arrival sequence.\n   -------------------------------------------------\n\
    \   Table 6: Buffer occupancy computation steps\n   -------------------------------------------------\n\
    \   S        1     2     4     5     6     7\n   E        1     2     3     3\
    \     3     7\n   B        0     0     1     2     3     0\n   FB[B]    1    \
    \ 2     1     1     1     3\n   -------------------------------------------------\n\
    \   (E,S,B and FB[B] as described in Section 7.2)\n   -------------------------------------------------\n\
    \   Graphical representations of RD and RBD for the above sequence are as\n  \
    \ follows.\n                ^                        ^\n                |    \
    \                    |\n          1.0   _                        |\n      ^  \
    \      | |                ^      |\n      |        | |                | 0.5  _\n\
    \               | |                      | |\n    RD[D]      | |             \
    \  RBD[B] | | _  _  _ 0.167\n               | |                      | || || ||\
    \ |\n           --+--+--+-->                --+--+--+--+-->\n            -1  0\
    \  1                     0  1  2  3\n                D  -->                  \
    \    B -->\n   c. Scenario with duplicate packets\n   Consider a sequence of 6\
    \ packets (1, 3, 2, 3, 4, 5) with DT = 2.\n   Table 7 shows the computational\
    \ steps when the RD algorithm is\n   applied to the above sequence to obtain FD[D].\n\
    \   ------------------------------------------------------\n   Table 7: Late/Early-packet\
    \ Frequency computation steps\n   ------------------------------------------------------\n\
    \   S         1     3     2     3     4     5\n   RI        1     2     3    \
    \ -     4     5\n   D         0    -1     1     -     0     0\n   FD[D]     1\
    \     1     1     -     2     3\n   ------------------------------------------------------\n\
    \   (S, RI,D and FD[D] as described in Section 7.1)\n   ------------------------------------------------------\n\
    \   Table 8 illustrates the FB[B] for the above arrival sequence.\n   ------------------------------------------------------\n\
    \   Table 8: Buffer Occupancy Frequency computation steps\n   ------------------------------------------------------\n\
    \   S     1     3     2     3     4     5\n   E     1     2     2     -     4\
    \     5\n   B     0     1     0     -     0     0\n   FB[B] 1     1     2    \
    \ -     3     4\n   ------------------------------------------------------\n \
    \  (E,S,B and FB[B] as described in Section 7.2)\n   ------------------------------------------------------\n\
    \   Graphical representations of RD and RBD for the above sequence are as\n  \
    \ follows:\n                 ^                            ^\n                \
    \ |                            |\n     ^           |                   ^   0.8\
    \  _\n     |       0.6 _                   |       | |\n                | |  \
    \                        | |\n    RD[D]       | |                RBD[B]    | |\n\
    \          0.2 _ | | _ 0.2                    | | _ 0.2\n             | || ||\
    \ |                       | || |\n         --+--+--+--+--+--+-->             ---+--+--+--\n\
    \          -2 -1  0  1  2                      0  1  2\n                 D  -->\
    \                        B -->\n"
- title: 9.  Characteristics Derivable from RD and RBD
  contents:
  - "9.  Characteristics Derivable from RD and RBD\n   Additional information may\
    \ be extracted from RD and RBD depending on\n   the specific applications.  For\
    \ example, in the case of resource\n   allocation at a node to recover from reordering,\
    \ the mean and\n   variance of buffer occupancy can be derived from RBD.  For\
    \ example:\n   Mean occupancy of recovery buffer =  sum(i*RBD[i] for 0 <= i <=\
    \ BT)\n   The basic definition of RBD may be modified to count the buffer\n  \
    \ occupancy in bytes as opposed to packets when the actual buffer space\n   is\
    \ more important.  Another alternative is to use time to update the\n   buffer\
    \ occupancy compared to updating it at every arrival instant.\n   The parameters\
    \ that can be extracted from RD include the percentage\n   of late (or early)\
    \ packets, mean displacement of packets, and mean\n   displacement of late (or\
    \ early) packets [Ye06].  For example, the\n   fraction of packets that arrive\
    \ after three or more of their\n   successors according to the order of transmission\
    \ is given by Sum\n   [RD[i] for 3<=i<=DT].  RD also allows for extraction of\
    \ parameters\n   such as entropy of the reordered sequence, a measure of disorder\
    \ in\n   the sequence [Ye06].  Due to the probability mass function nature of\n\
    \   RD, it is also a convenient measure for theoretical modeling and\n   analysis\
    \ of reordering, e.g., see [Pi06].\n"
- title: 10.  Comparison with Other Metrics
  contents:
  - "10.  Comparison with Other Metrics\n   RD and RBD are compared to other metrics\
    \ of [RFC4737] in [Pi07].\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   The security considerations listed in [RFC4737],\
    \ [RFC3763], and\n   [RFC4656] are extensive and directly applicable to the usage\
    \ of these\n   metrics; thus, they should be consulted for additional details.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [RFC2330]  Paxson, V., Almes, G., Mahdavi, J.,\
    \ and M. Mathis,\n              \"Framework for IP Performance Metrics\", RFC\
    \ 2330, May\n              1998.\n   [Pi07]     N. M. Piratla and A. P. Jayasumana,\
    \ \"Metrics for Packet\n              Reordering - A Comparative Analysis,\" International\n\
    \              Journal of Communication Systems (IJCS), Vol. 21/1, 2008,\n   \
    \           pp: 99-113.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [Ben99]    J. C. R. Bennett, C. Partridge and\
    \ N. Shectman, \"Packet\n              Reordering is Not Pathological Network\
    \ Behavior,\" IEEE/ACM\n              Trans. on Networking , Dec. 1999, pp.789-798.\n\
    \   [Jai03]    S. Jaiswal, G. Iannaccone, C. Diot, J. Kurose and D.\n        \
    \      Towsley, \"Measurement and Classification of Out-of-\n              sequence\
    \ Packets in Tier-1 IP Backbone,\" Proc. IEEE\n              INFOCOM, Mar.  2003,\
    \ pp. 1199-1209.\n   [Pax97]    V.Paxson, \"Measurements and Analysis of End-to-End\n\
    \              Internet Dynamics,\" Ph.D. Dissertation, U.C. Berkeley,\n     \
    \         1997, ftp://ftp.ee.lbl.gov/papers/vp-thesis/dis.ps.gz.\n   [Boh03] \
    \   S. Bohacek, J. Hespanha, J. Lee, C. Lim and K.Obraczka,\n              \"\
    TCP-PR: TCP for Persistent Packet Reordering,\" Proc. of\n              the IEEE\
    \ 23rdICDCS, May 2003, pp.222-231.\n   [Bla02]    E. Blanton and M. Allman, \"\
    On Making TCP More Robust to\n              Packet Reordering,\" ACM Computer\
    \ Comm. Review, 32(1), Jan.\n              2002, pp.20-30.\n   [Lao02]    M. Laor\
    \ and L. Gendel, \"The Effect of Packet Reordering in\n              a Backbone\
    \ Link on Application Throughput,\" IEEE Network,\n              Sep./Oct. 2002,\
    \ pp.28-36.\n   [Bar04]    A. A. Bare, \"Measurement and Analysis of Packet Reordering\n\
    \              Using Reorder Density,\" Masters Thesis, Department of\n      \
    \        Computer Science, Colorado State University, Fort Collins,\n        \
    \      Colorado, Fall 2004.\n   [Ban02]    T. Banka, A. A. Bare, A. P. Jayasumana,\
    \ \"Metrics for\n              Degree of Reordering in Packet Sequences\", Proc.\
    \ 27th IEEE\n              Conference on Local Computer Networks, Tampa, FL, Nov.\n\
    \              2002, pp. 332-342.\n   [Pi05a]    N. M. Piratla, \"A Theoretical\
    \ Foundation, Metrics and\n              Modeling of Packet Reordering and Methodology\
    \ of Delay\n              Modeling using Inter-packet Gaps,\" Ph.D. Dissertation,\n\
    \              Department of Electrical and Computer Engineering,\n          \
    \    Colorado State University, Fort Collins, CO, Fall 2005.\n   [Pi05b]    N.\
    \ M. Piratla, A. P. Jayasumana and A. A. Bare, \"RD: A\n              Formal,\
    \ Comprehensive Metric for Packet Reordering,\" Proc.\n              5th International\
    \ IFIP-TC6 Networking Conference\n              (Networking 2005), Waterloo, Canada,\
    \ May 2-6, 2005, LNCS\n              3462, pp: 78-89.\n   [Pi06]     N. M. Piratla\
    \ and A. P. Jayasumana, \"Reordering of Packets\n              due to Multipath\
    \ Forwarding - An Analysis,\" Proc. IEE\n              Intl.  Conf. Communications\
    \ ICC 2006, Istanbul, Turkey,\n              Jun. 2006, pp:829-834.\n   [Per04]\
    \    Perl Scripts for RLED and RBD,\n              http://www.cnrl.colostate.edu/packet_reorder.html,\
    \ Last\n              modified on Jul. 18, 2004.\n   [Ye06]     B. Ye, A. P. Jayasumana\
    \ and N. Piratla, \"On Monitoring of\n              End-to-End Packet Reordering\
    \ over the Internet,\" Proc.\n              Int.  Conf. on Networking and Services\
    \ (ICNS'06), Santa\n              Clara, CA, July 2006.\n   [RFC4737]  Morton,\
    \ A., Ciavattone, L., Ramachandran, G., Shalunov,\n              S., and J. Perser,\
    \ \"Packet Reordering Metrics\", RFC 4737,\n              November 2006.\n   [RFC3763]\
    \  Shalunov, S. and B. Teitelbaum, \"One-way Active\n              Measurement\
    \ Protocol (OWAMP) Requirements\", RFC 3763,\n              April 2004.\n   [RFC4656]\
    \  Shalunov, S., Teitelbaum, B., Karp, A., Boote, J., and M.\n              Zekauskas,\
    \ \"A One-way Active Measurement Protocol\n              (OWAMP)\", RFC 4656,\
    \ September 2006.\n   [Pi05c]    N. M. Piratla, A. P. Jayasumana and T. Banka,\
    \ \"On Reorder\n              Density and its Application to Characterization\
    \ of Packet\n              Reordering,\" Proc. 30th IEEE Local Computer Networks\n\
    \              Conference (LCN 2005), Sydney, Australia, Nov. 2005,\n        \
    \      pp:156-165.\n"
- title: 13.  Contributors
  contents:
  - "13.  Contributors\n   Jerry McCollom\n   Hewlett Packard, 3404 East Harmony Road\n\
    \   Fort Collins, CO 80528, USA\n   EMail: jerry_mccollom@hp.com\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Anura P. Jayasumana\n   Computer Networking Research Laboratory\n\
    \   Department of Electrical and Computer Engineering\n   1373 Colorado State\
    \ University,\n   Fort Collins, CO 80523, USA\n   EMail: Anura.Jayasumana@colostate.edu\n\
    \   Nischal M. Piratla\n   Deutsche Telekom Laboratories\n   Ernst-Reuter-Platz\
    \ 7\n   D-10587 Berlin, Germany\n   EMail: Nischal.Piratla@telekom.de\n   Tarun\
    \ Banka\n   Computer Networking Research Laboratory\n   Department of Electrical\
    \ and Computer Engineering\n   1373 Colorado State University\n   Fort Collins,\
    \ CO 80523, USA\n   EMail: Tarun.Banka@colostate.edu\n   Abhijit A. Bare\n   Agilent\
    \ Technologies, Inc.\n   900 South Taft Ave.\n   Loveland, CO 80537, USA\n   EMail:\
    \ abhijit_bare@agilent.com\n   Rick Whitner\n   Agilent Technologies, Inc.\n \
    \  900 South Taft Ave.\n   Loveland, CO 80537, USA\n   EMail: rick_whitner@agilent.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78\
    \ and at http://www.rfc-editor.org/copyright.html,\n   and except as set forth\
    \ therein, the authors retain all their rights.\n   This document and the information\
    \ contained herein are provided on an\n   \"AS IS\" basis and THE CONTRIBUTOR,\
    \ THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED BY (IF ANY), THE INTERNET\
    \ SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING TASK FORCE DISCLAIM\
    \ ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY\
    \ THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY\
    \ IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
