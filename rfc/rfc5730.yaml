- title: __initial_text__
  contents:
  - '                 Extensible Provisioning Protocol (EPP)

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes an application-layer client-server protocol\n\
    \   for the provisioning and management of objects stored in a shared\n   central\
    \ repository.  Specified in XML, the protocol defines generic\n   object management\
    \ operations and an extensible framework that maps\n   protocol operations to\
    \ objects.  This document includes a protocol\n   specification, an object mapping\
    \ template, and an XML media type\n   registration.  This document obsoletes RFC\
    \ 4930.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Conventions Used in This Document ..........................3\n  \
    \ 2. Protocol Description ............................................4\n    \
    \  2.1. Transport Mapping Considerations ...........................7\n      2.2.\
    \ Protocol Identification ....................................8\n      2.3. Hello\
    \ Format ...............................................8\n      2.4. Greeting\
    \ Format ............................................8\n      2.5. Command Format\
    \ ............................................12\n      2.6. Response Format ...........................................13\n\
    \      2.7. Protocol Extension Framework ..............................16\n  \
    \         2.7.1. Protocol Extension .................................16\n    \
    \       2.7.2. Object Extension ...................................17\n      \
    \     2.7.3. Command-Response Extension .........................18\n      2.8.\
    \ Object Identification .....................................18\n      2.9. Protocol\
    \ Commands .........................................19\n           2.9.1. Session\
    \ Management Commands ........................19\n                  2.9.1.1. EPP\
    \ <login> Command .......................20\n                  2.9.1.2. EPP <logout>\
    \ Command ......................22\n           2.9.2. Query Commands .....................................23\n\
    \                  2.9.2.1. EPP <check> Command .......................23\n  \
    \                2.9.2.2. EPP <info> Command ........................25\n    \
    \              2.9.2.3. EPP <poll> Command ........................26\n      \
    \            2.9.2.4. EPP <transfer> Query Command ..............30\n        \
    \   2.9.3. Object Transform Commands ..........................31\n          \
    \        2.9.3.1. EPP <create> Command ......................32\n            \
    \      2.9.3.2. EPP <delete> Command ......................33\n              \
    \    2.9.3.3. EPP <renew> Command .......................34\n                \
    \  2.9.3.4. EPP <transfer> Command ....................35\n                  2.9.3.5.\
    \ EPP <update> Command ......................38\n   3. Result Codes ...................................................39\n\
    \   4. Formal Syntax ..................................................45\n  \
    \    4.1. Base Schema ...............................................45\n    \
    \  4.2. Shared Structure Schema ...................................56\n   5. Internationalization\
    \ Considerations ............................59\n   6. IANA Considerations ............................................59\n\
    \   7. Security Considerations ........................................60\n  \
    \ 8. Acknowledgements ...............................................61\n   9.\
    \ References .....................................................62\n      9.1.\
    \ Normative References ......................................62\n      9.2. Informative\
    \ References ....................................62\n   Appendix A.  Object Mapping\
    \ Template ..............................64\n   Appendix B.  Media Type Registration:\
    \ application/epp+xml .........66\n   Appendix C.  Changes from RFC 4930 ................................67\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes specifications for the Extensible\n\
    \   Provisioning Protocol (EPP) version 1.0, an XML text protocol that\n   permits\
    \ multiple service providers to perform object-provisioning\n   operations using\
    \ a shared central object repository.  EPP is\n   specified using the Extensible\
    \ Markup Language (XML) 1.0 as described\n   in [W3C.REC-xml-20040204] and XML\
    \ Schema notation as described in\n   [W3C.REC-xmlschema-1-20041028] and [W3C.REC-xmlschema-2-20041028].\n\
    \   EPP meets and exceeds the requirements for a generic registry\n   registrar\
    \ protocol as described in [RFC3375].  This document\n   obsoletes RFC 4930 [RFC4930].\n\
    \   EPP content is identified by MIME media type application/epp+xml.\n   Registration\
    \ information for this media type is included in an\n   appendix to this document.\n\
    \   EPP is intended for use in diverse operating environments where\n   transport\
    \ and security requirements vary greatly.  It is unlikely\n   that a single transport\
    \ or security specification will meet the needs\n   of all anticipated operators,\
    \ so EPP was designed for use in a\n   layered protocol environment.  Bindings\
    \ to specific transport and\n   security protocols are outside the scope of this\
    \ specification.\n   The original motivation for this protocol was to provide\
    \ a standard\n   Internet domain name registration protocol for use between domain\n\
    \   name registrars and domain name registries.  This protocol provides a\n  \
    \ means of interaction between a registrar's applications and registry\n   applications.\
    \  It is expected that this protocol will have additional\n   uses beyond domain\
    \ name registration.\n   XML is case sensitive.  Unless stated otherwise, XML\
    \ specifications\n   and examples provided in this document MUST be interpreted\
    \ in the\n   character case presented to develop a conforming implementation.\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   In examples, \"C:\" represents lines sent by a protocol client\
    \ and \"S:\"\n   represents lines returned by a protocol server.  Indentation\
    \ and\n   white space in examples are provided only to illustrate element\n  \
    \ relationships and are not REQUIRED features of this protocol.  A\n   protocol\
    \ client that is authorized to manage an existing object is\n   described as a\
    \ \"sponsoring\" client throughout this document.\n"
- title: 2.  Protocol Description
  contents:
  - "2.  Protocol Description\n   EPP is a stateful XML protocol that can be layered\
    \ over multiple\n   transport protocols.  Protected using lower-layer security\
    \ protocols,\n   clients exchange identification, authentication, and option\n\
    \   information, and then engage in a series of client-initiated command-\n  \
    \ response exchanges.  All EPP commands are atomic (there is no partial\n   success\
    \ or partial failure) and designed so that they can be made\n   idempotent (executing\
    \ a command more than once has the same net\n   effect on system state as successfully\
    \ executing the command once).\n   EPP provides four basic service elements: service\
    \ discovery,\n   commands, responses, and an extension framework that supports\n\
    \   definition of managed objects and the relationship of protocol\n   requests\
    \ and responses to those objects.\n   An EPP server MUST respond to client-initiated\
    \ communication (which\n   can be either a lower-layer connection request or an\
    \ EPP service\n   discovery message) by returning a greeting to a client.  A server\n\
    \   MUST promptly respond to each EPP command with a coordinated response\n  \
    \ that describes the results of processing the command.  The following\n   server\
    \ state machine diagram illustrates the message exchange process\n   in detail:\n\
    \              |\n              V\n      +-----------------+                 \
    \ +-----------------+\n      |   Waiting for   |     Connected    |     Prepare\
    \     |\n      |      Client     |----------------->|     Greeting    |\n    \
    \  +-----------------+    or <hello>    +-----------------+\n         ^      \
    \                                     |\n         | Close Connection         \
    \            Send |\n         |     or Idle                      Greeting |\n\
    \      +-----------------+                            V\n      |       End   \
    \    |     Timeout      +-----------------+\n      |     Session     |<-----------------|\
    \   Waiting for   |\n      +-----------------+                  |      Client\
    \     |\n         ^    ^    ^        Send +-------->|  Authentication |\n    \
    \     |    |    |    Response |         +-----------------+\n         |    | \
    \   |     +--------------+            |\n         |    |    |     | Prepare Fail\
    \ |            | <login>\n         |    |    +-----|   Response   |          \
    \  | Received\n         |    |    Send  +--------------+            V\n      \
    \   |    |    2501          ^         +-----------------+\n         |    |   Response\
    \       |         |   Processing    |\n         |    |                  +---------|\
    \     <login>     |\n         |    |                  Auth Fail +-----------------+\n\
    \         |    |       Timeout                         |\n         |    +-------------------------------+\
    \       | Auth OK\n         |                                    |       V\n \
    \        |   +-----------------+  <hello>  +-----------------+\n         |   |\
    \     Prepare     |<----------|   Waiting for   |\n         |   |     Greeting\
    \    |---------->|   Command or    |\n         |   +-----------------+   Send\
    \    |     <hello>     |\n         | Send x5xx             Greeting  +-----------------+\n\
    \         | Response  +-----------------+  Send    ^  |\n         +-----------|\
    \     Prepare     | Response |  | Command\n                     |     Response\
    \    |----------+  | Received\n                     +-----------------+      \
    \       V\n                                ^          +-----------------+\n  \
    \                      Command |          |   Processing    |\n              \
    \        Processed +----------|     Command     |\n                          \
    \                 +-----------------+\n   Figure 1: EPP Server State Machine\n\
    \   EPP commands fall into three categories: session management commands,\n  \
    \ query commands, and object transform commands.  Session management\n   commands\
    \ are used to establish and end persistent sessions with an\n   EPP server.  Query\
    \ commands are used to perform read-only object\n   information retrieval operations.\
    \  Transform commands are used to\n   perform read-write object management operations.\n\
    \   Commands are processed by a server in the order they are received\n   from\
    \ a client.  Though an immediate response confirming receipt and\n   processing\
    \ of the command is produced by the server, the protocol\n   includes features\
    \ that allow for offline review of transform commands\n   before the requested\
    \ action is actually completed.  In such\n   situations, the response from the\
    \ server MUST clearly note that the\n   command has been received and processed\
    \ but that the requested action\n   is pending.  The state of the corresponding\
    \ object MUST clearly\n   reflect processing of the pending action.  The server\
    \ MUST also\n   notify the client when offline processing of the action has been\n\
    \   completed.  Object mappings SHOULD describe standard formats for\n   notices\
    \ that describe completion of offline processing.\n   EPP uses XML namespaces\
    \ to provide an extensible object management\n   framework and to identify schemas\
    \ required for XML instance parsing\n   and validation.  These namespaces and\
    \ schema definitions are used to\n   identify both the base protocol schema and\
    \ the schemas for managed\n   objects.  The XML namespace prefixes used in examples\
    \ (such as the\n   string \"foo\" in \"xmlns:foo\") are solely for illustrative\
    \ purposes.  A\n   conforming implementation MUST NOT require the use of these\
    \ or any\n   other specific namespace prefixes.\n   All XML instances SHOULD begin\
    \ with an <?xml?> declaration to\n   identify the version of XML that is being\
    \ used, optionally identify\n   use of the character encoding used, and optionally\
    \ provide a hint to\n   an XML parser that an external schema file is needed to\
    \ validate the\n   XML instance.  Conformant XML parsers recognize both UTF-8\
    \ (defined\n   in RFC 3629 [RFC3629]) and UTF-16 (defined in RFC 2781 [RFC2781]);\n\
    \   per RFC 2277 [RFC2277], UTF-8 is the RECOMMENDED character encoding\n   for\
    \ use with EPP.\n   Character encodings other than UTF-8 and UTF-16 are allowed\
    \ by XML.\n   UTF-8 is the default encoding assumed by XML in the absence of an\n\
    \   \"encoding\" attribute or a byte order mark (BOM); thus, the \"encoding\"\n\
    \   attribute in the XML declaration is OPTIONAL if UTF-8 encoding is\n   used.\
    \  EPP clients and servers MUST accept a UTF-8 BOM if present,\n   though emitting\
    \ a UTF-8 BOM is NOT RECOMMENDED.\n   Example XML declarations:\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   <?xml version=\"1.0\" standalone=\"\
    no\"?>\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <?xml version=\"1.0\"\
    ?>\n"
- title: 2.1.  Transport Mapping Considerations
  contents:
  - "2.1.  Transport Mapping Considerations\n   As described previously, EPP can be\
    \ layered over multiple transport\n   protocols.  There are, however, a common\
    \ set of considerations that\n   MUST be addressed by any transport mapping defined\
    \ for EPP.  These\n   include:\n   -  The transport mapping MUST preserve command\
    \ order.\n   -  The transport mapping MUST address the relationship between\n\
    \      sessions and the client-server connection concept.\n   -  The transport\
    \ mapping MUST preserve the stateful nature of the\n      protocol.\n   -  The\
    \ transport mapping MUST frame data units.\n   -  The transport mapping MUST be\
    \ onto a transport, such as TCP\n      [RFC0793] or Stream Control Transmission\
    \ Protocol (SCTP)\n      [RFC4960], that provides congestion avoidance that follows\
    \ RFC\n      2914 [RFC2914]; or, if it maps onto a protocol such as SMTP\n   \
    \   [RFC5321] or Blocks Extensible Exchange Protocol (BEEP) [RFC3080],\n     \
    \ then the performance issues need to take into account issues of\n      overload,\
    \ server availability, and so forth.\n   -  The transport mapping MUST ensure\
    \ reliability.\n   -  The transport mapping MUST explicitly allow or prohibit\n\
    \      pipelining.\n   Pipelining, also known as command streaming, is when a\
    \ client sends\n   multiple commands to a server without waiting for each corresponding\n\
    \   response.  After sending the commands, the client waits for the\n   responses\
    \ to arrive in the order corresponding to the completed\n   commands.  Performance\
    \ gains can sometimes be realized with\n   pipelining, especially with high-latency\
    \ transports, but there are\n   additional considerations associated with defining\
    \ a transport\n   mapping that supports pipelining:\n   -  Commands MUST be processed\
    \ independent of each other.\n   -  Depending on the transport, pipelining MAY\
    \ be possible in the form\n      of sending a complete session in a well-defined\
    \ \"batch\".\n   -  The transport mapping MUST describe how an error in processing\
    \ a\n      command affects continued operation of the session.\n   A transport\
    \ mapping MUST explain how all of these requirements are\n   met, given the transport\
    \ protocol being used to exchange data.\n"
- title: 2.2.  Protocol Identification
  contents:
  - "2.2.  Protocol Identification\n   All EPP XML instances MUST begin with an <epp>\
    \ element.  This element\n   identifies the start of an EPP protocol element and\
    \ the namespace\n   used within the protocol.  The <epp> start element and the\
    \ associated\n   </epp> ending element MUST be applied to all structures sent\
    \ by both\n   clients and servers.\n   Example \"start\" and \"end\" EPP elements:\n\
    \   <epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   </epp>\n"
- title: 2.3.  Hello Format
  contents:
  - "2.3.  Hello Format\n   EPP MAY be carried over both connection-oriented and connection-less\n\
    \   transport protocols.  An EPP client MAY request a <greeting> from an\n   EPP\
    \ server at any time between a successful <login> command and a\n   <logout> command\
    \ by sending a <hello> to a server.  Use of this\n   element is essential in a\
    \ connection-less environment where a server\n   cannot return a <greeting> in\
    \ response to a client-initiated\n   connection.  An EPP <hello> MUST be an empty\
    \ element with no child\n   elements.\n   Example <hello>:\n   C:<?xml version=\"\
    1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\"\
    >\n   C:  <hello/>\n   C:</epp>\n"
- title: 2.4.  Greeting Format
  contents:
  - "2.4.  Greeting Format\n   An EPP server responds to a successful connection and\
    \ <hello> element\n   by returning a <greeting> element to the client.  An EPP\
    \ greeting\n   contains the following elements:\n   -  An <svID> element that\
    \ contains the name of the server.\n   -  An <svDate> element that contains the\
    \ server's current date and\n      time in Universal Coordinated Time (UTC).\n\
    \   -  An <svcMenu> element that identifies the services supported by the\n  \
    \    server, including:\n      o  One or more <version> elements that identify\
    \ the protocol\n         versions supported by the server.\n      o  One or more\
    \ <lang> elements that contain the identifiers of the\n         text response\
    \ languages known by the server.  Language\n         identifiers MUST be structured\
    \ as documented in [RFC4646].\n      o  One or more <objURI> elements that contain\
    \ namespace URIs\n         representing the objects that the server is capable\
    \ of\n         managing.  A server MAY limit object management privileges on a\n\
    \         per-client basis.\n      o  An OPTIONAL <svcExtension> element that\
    \ contains one or more\n         <extURI> elements that contain namespace URIs\
    \ representing\n         object extensions supported by the server.\n      o \
    \ A <dcp> (data collection policy) element that contains child\n         elements\
    \ used to describe the server's privacy policy for data\n         collection and\
    \ management.  Policy implications usually extend\n         beyond the client-server\
    \ relationship.  Both clients and\n         servers can have relationships with\
    \ other entities that need to\n         know the server operator's data collection\
    \ policy to make\n         informed provisioning decisions.  Policy information\
    \ MUST be\n         disclosed to provisioning entities, though the method of\n\
    \         disclosing policy data outside of direct protocol interaction\n    \
    \     is beyond the scope of this specification.  Child elements\n         include\
    \ the following:\n         *  An <access> element that describes the access provided\
    \ by\n            the server to the client on behalf of the originating data\n\
    \            source.  The <access> element MUST contain one of the\n         \
    \   following child elements:\n            +  <all/>: Access is given to all identified\
    \ data.\n            +  <none/>: No access is provided to identified data.\n \
    \           +  <null/>: Data is not persistent, so no access is\n            \
    \   possible.\n            +  <personal/>: Access is given to identified data\
    \ relating\n               to individuals and organizational entities.\n     \
    \       +  <personalAndOther/>: Access is given to identified data\n         \
    \      relating to individuals, organizational entities, and\n               other\
    \ data of a non-personal nature.\n            +  <other/>: Access is given to\
    \ other identified data of a\n               non-personal nature.\n         *\
    \  One or more <statement> elements that describe data\n            collection\
    \ purposes, data recipients, and data retention.\n            Each <statement>\
    \ element MUST contain a <purpose> element, a\n            <recipient> element,\
    \ and a <retention> element.  The\n            <purpose> element MUST contain\
    \ one or more of the following\n            child elements that describe the purposes\
    \ for which data is\n            collected:\n            +  <admin/>: Administrative\
    \ purposes.  Information can be\n               used for administrative and technical\
    \ support of the\n               provisioning system.\n            +  <contact/>:\
    \ Contact for marketing purposes.  Information\n               can be used to\
    \ contact individuals, through a\n               communications channel other\
    \ than the protocol, for the\n               promotion of a product or service.\n\
    \            +  <prov/>: Object-provisioning purposes.  Information can\n    \
    \           be used to identify objects and inter-object\n               relationships.\n\
    \            +  <other/>: Other purposes.  Information may be used in\n      \
    \         other ways not captured by the above definitions.\n         *  The <recipient>\
    \ element MUST contain one or more of the\n            following child elements\
    \ that describes the recipients of\n            collected data:\n            +\
    \  <other/>: Other entities following unknown practices.\n            +  <ours>:\
    \ Server operator and/or entities acting as agents\n               or entities\
    \ for whom the server operator is acting as an\n               agent.  An agent\
    \ in this instance is defined as a third\n               party that processes\
    \ data only on behalf of the service\n               provider for the completion\
    \ of the stated purposes.  The\n               <ours> element contains an OPTIONAL\
    \ <recDesc> element\n               that can be used to describe the recipient.\n\
    \            +  <public/>: Public forums.\n            +  <same/>: Other entities\
    \ following server practices.\n            +  <unrelated/>: Unrelated third parties.\n\
    \         *  The <retention> element MUST contain one of the following\n     \
    \       child elements that describes data retention practices:\n            +\
    \  <business/>: Data persists per business practices.\n            +  <indefinite/>:\
    \ Data persists indefinitely.\n            +  <legal/>: Data persists per legal\
    \ requirements.\n            +  <none/>: Data is not persistent and is not retained\
    \ for\n               more than a brief period of time necessary to make use of\n\
    \               it during the course of a single online interaction.\n       \
    \     +  <stated/>: Data persists to meet the stated purpose.\n         *  An\
    \ OPTIONAL <expiry> element that describes the lifetime of\n            the policy.\
    \  The <expiry> element MUST contain one of the\n            following child elements:\n\
    \            +  <absolute/>: The policy is valid from the current date\n     \
    \          and time until it expires on the specified date and time.\n       \
    \     +  <relative/>: The policy is valid from the current date\n            \
    \   and time until the end of the specified duration.\n   Data collection policy\
    \ elements are based on work described in the\n   World Wide Web Consortium's\
    \ Platform for Privacy Preferences\n   [W3C.REC-P3P-20020416] specification.\n\
    \   Example greeting:\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"\
    no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <greeting>\n\
    \   S:    <svID>Example EPP server epp.example.com</svID>\n   S:    <svDate>2000-06-08T22:00:00.0Z</svDate>\n\
    \   S:    <svcMenu>\n   S:      <version>1.0</version>\n   S:      <lang>en</lang>\n\
    \   S:      <lang>fr</lang>\n   S:      <objURI>urn:ietf:params:xml:ns:obj1</objURI>\n\
    \   S:      <objURI>urn:ietf:params:xml:ns:obj2</objURI>\n   S:      <objURI>urn:ietf:params:xml:ns:obj3</objURI>\n\
    \   S:      <svcExtension>\n   S:        <extURI>http://custom/obj1ext-1.0</extURI>\n\
    \   S:      </svcExtension>\n   S:    </svcMenu>\n   S:    <dcp>\n   S:      <access><all/></access>\n\
    \   S:      <statement>\n   S:        <purpose><admin/><prov/></purpose>\n   S:\
    \        <recipient><ours/><public/></recipient>\n   S:        <retention><stated/></retention>\n\
    \   S:      </statement>\n   S:    </dcp>\n   S:  </greeting>\n   S:</epp>\n"
- title: 2.5.  Command Format
  contents:
  - "2.5.  Command Format\n   An EPP client interacts with an EPP server by sending\
    \ a command to\n   the server and receiving a response from the server.  In addition\
    \ to\n   the standard EPP elements, an EPP command contains the following\n  \
    \ elements:\n   -  A command element whose tag corresponds to one of the valid\
    \ EPP\n      commands described in this document.  The command element MAY\n \
    \     contain either protocol-specified or object-specified child\n      elements.\n\
    \   -  An OPTIONAL <extension> element that MAY be used for server-\n      defined\
    \ command extensions.\n   -  An OPTIONAL <clTRID> (client transaction identifier)\
    \ element that\n      MAY be used to uniquely identify the command to the client.\n\
    \      Clients are responsible for maintaining their own transaction\n      identifier\
    \ space to ensure uniqueness.\n   Example command with object-specified child\
    \ elements:\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n\
    \   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n   C:\
    \    <info>\n   C:      <obj:info xmlns:obj=\"urn:ietf:params:xml:ns:obj\">\n\
    \   C:        <obj:name>example</obj:name>\n   C:      </obj:info>\n   C:    </info>\n\
    \   C:    <clTRID>ABC-12345</clTRID>\n   C:  </command>\n   C:</epp>\n"
- title: 2.6.  Response Format
  contents:
  - "2.6.  Response Format\n   An EPP server responds to a client command by returning\
    \ a response to\n   the client.  EPP commands are atomic, so a command will either\n\
    \   succeed completely or fail completely.  Success and failure results\n   MUST\
    \ NOT be mixed.  In addition to the standard EPP elements, an EPP\n   response\
    \ contains the following elements:\n   -  One or more <result> elements that document\
    \ the success or failure\n      of command execution.  If the command was processed\
    \ successfully,\n      only one <result> element MUST be returned.  If the command\
    \ was\n      not processed successfully, multiple <result> elements MAY be\n \
    \     returned to document failure conditions.  Each <result> element\n      contains\
    \ the following attribute and child elements:\n      o  A \"code\" attribute whose\
    \ value is a four-digit, decimal number\n         that describes the success or\
    \ failure of the command.\n      o  A <msg> element containing a human-readable\
    \ description of the\n         response code.  The language of the response is\
    \ identified via\n         an OPTIONAL \"lang\" attribute.  If not specified,\
    \ the default\n         attribute value MUST be \"en\" (English).\n      o  Zero\
    \ or more OPTIONAL <value> elements that identify a client-\n         provided\
    \ element (including XML tag and value) or other\n         information that caused\
    \ a server error condition.\n      o  Zero or more OPTIONAL <extValue> elements\
    \ that can be used to\n         provide additional error diagnostic information,\
    \ including:\n         *  A <value> element that identifies a client-provided\
    \ element\n            (including XML tag and value) that caused a server error\n\
    \            condition.\n         *  A <reason> element containing a human-readable\
    \ message that\n            describes the reason for the error.  The language\
    \ of the\n            response is identified via an OPTIONAL \"lang\" attribute.\
    \  If\n            not specified, the default attribute value MUST be \"en\"\n\
    \            (English).\n   -  An OPTIONAL <msgQ> element that describes messages\
    \ queued for\n      client retrieval.  A <msgQ> element MUST NOT be present if\
    \ there\n      are no messages queued for client retrieval.  A <msgQ> element\
    \ MAY\n      be present in responses to EPP commands other than the <poll>\n \
    \     command if messages are queued for retrieval.  A <msgQ> element\n      MUST\
    \ be present in responses to the EPP <poll> command if messages\n      are queued\
    \ for retrieval.  The <msgQ> element contains the\n      following attributes:\n\
    \      o  A \"count\" attribute that describes the number of messages that\n \
    \        exist in the queue.\n      o  An \"id\" attribute used to uniquely identify\
    \ the message at the\n         head of the queue.\n      The <msgQ> element contains\
    \ the following OPTIONAL child elements\n      that MUST be returned in response\
    \ to a <poll> request command and\n      MUST NOT be returned in response to any\
    \ other command, including a\n      <poll> acknowledgement:\n      o  A <qDate>\
    \ element that contains the date and time that the\n         message was enqueued.\n\
    \      o  A <msg> element containing a human-readable message.  The\n        \
    \ language of the response is identified via an OPTIONAL \"lang\"\n         attribute.\
    \  If not specified, the default attribute value MUST\n         be \"en\" (English).\
    \  This element MAY contain XML content for\n         formatting purposes, but\
    \ the XML content is not specified by\n         the protocol and will thus not\
    \ be processed for validity.\n   -  An OPTIONAL <resData> (response data) element\
    \ that contains child\n      elements specific to the command and associated object.\n\
    \   -  An OPTIONAL <extension> element that MAY be used for server-\n      defined\
    \ response extensions.\n   -  A <trID> (transaction identifier) element containing\
    \ the\n      transaction identifier assigned by the server to the command for\n\
    \      which the response is being returned.  The transaction identifier\n   \
    \   is formed using the <clTRID> associated with the command if\n      supplied\
    \ by the client and a <svTRID> (server transaction\n      identifier) that is\
    \ assigned by and unique to the server.\n   Transaction identifiers provide command-response\
    \ synchronization\n   integrity.  They SHOULD be logged, retained, and protected\
    \ to ensure\n   that both the client and the server have consistent temporal and\n\
    \   state-management records.\n   Example response without <value> or <resData>:\n\
    \   S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp\
    \ xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n   S:    <result\
    \ code=\"1000\">\n   S:      <msg lang=\"en\">Command completed successfully</msg>\n\
    \   S:    </result>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n\
    \   S:      <svTRID>54321-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n\
    \   S:</epp>\n   Example response with <resData>:\n   S:<?xml version=\"1.0\"\
    \ encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\"\
    >\n   S:  <response>\n   S:    <result code=\"1000\">\n   S:      <msg>Command\
    \ completed successfully</msg>\n   S:    </result>\n   S:    <resData>\n   S:\
    \      <obj:creData xmlns:obj=\"urn:ietf:params:xml:ns:obj\">\n   S:        <obj:name>example</obj:name>\n\
    \   S:      </obj:creData>\n   S:    </resData>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n\
    \   S:      <svTRID>54321-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n\
    \   S:</epp>\n   Example response with error value elements:\n   S:<?xml version=\"\
    1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\"\
    >\n   S:  <response>\n   S:    <result code=\"2004\">\n   S:      <msg>Parameter\
    \ value range error</msg>\n   S:      <value xmlns:obj=\"urn:ietf:params:xml:ns:obj\"\
    >\n   S:        <obj:elem1>2525</obj:elem1>\n   S:      </value>\n   S:    </result>\n\
    \   S:    <result code=\"2005\">\n   S:      <msg>Parameter value syntax error</msg>\n\
    \   S:      <value xmlns:obj=\"urn:ietf:params:xml:ns:obj\">\n   S:        <obj:elem2>ex(ample</obj:elem2>\n\
    \   S:      </value>\n   S:      <extValue>\n   S:        <value xmlns:obj=\"\
    urn:ietf:params:xml:ns:obj\">\n   S:          <obj:elem3>abc.ex(ample</obj:elem3>\n\
    \   S:        </value>\n   S:        <reason>Invalid character found.</reason>\n\
    \   S:      </extValue>\n   S:    </result>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n\
    \   S:      <svTRID>54321-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n\
    \   S:</epp>\n   Example response with notice of waiting server messages:\n  \
    \ S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp xmlns=\"\
    urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n   S:    <result code=\"\
    1000\">\n   S:      <msg>Command completed successfully</msg>\n   S:    </result>\n\
    \   S:    <msgQ count=\"5\" id=\"12345\"/>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n\
    \   S:      <svTRID>54321-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n\
    \   S:</epp>\n   Command success or failure MUST NOT be assumed if no response\
    \ is\n   returned or if a returned response is malformed.  Protocol\n   idempotency\
    \ ensures the safety of retrying a command in cases of\n   response-delivery failure.\n"
- title: 2.7.  Protocol Extension Framework
  contents:
  - "2.7.  Protocol Extension Framework\n   EPP provides an extension framework that\
    \ allows features to be added\n   at the protocol, object, and command-response\
    \ levels.\n"
- title: 2.7.1.  Protocol Extension
  contents:
  - "2.7.1.  Protocol Extension\n   The EPP extension framework allows for definition\
    \ of new protocol\n   elements identified using XML namespace notation with a\
    \ reference to\n   an XML schema that defines the namespace.  The <epp> element\
    \ that\n   identifies the beginning of a protocol instance includes multiple\n\
    \   child element choices, one of which is an <extension> element whose\n   children\
    \ define the extension.  For example, a protocol extension\n   element would be\
    \ described in generic terms as follows:\n   C:<epp>\n   C:  <extension>\n   C:\
    \    <!-- One or more extension elements. -->\n   C:    <ext:foo xmlns:ext=\"\
    urn:ietf:params:xml:ns:ext\">\n   C:      <!-- One or more extension child elements.\
    \ -->\n   C:    </ext:foo>\n   C:  </extension>\n   C:</epp>\n   This document\
    \ does not define mappings for specific extensions.\n   Extension specifications\
    \ MUST be described in separate documents that\n   define the objects and operations\
    \ subject to the extension.\n"
- title: 2.7.2.  Object Extension
  contents:
  - "2.7.2.  Object Extension\n   EPP provides an extensible object management framework\
    \ that defines\n   the syntax and semantics of protocol operations applied to\
    \ a managed\n   object.  This framework pushes the definition of each protocol\n\
    \   operation into the context of a specific object, providing the\n   ability\
    \ to add mappings for new objects without having to modify the\n   base protocol.\n\
    \   Protocol elements that contain data specific to objects are\n   identified\
    \ using XML namespace notation with a reference to an XML\n   schema that defines\
    \ the namespace.  The schema for EPP supports use\n   of dynamic object schemas\
    \ on a per-command and per-response basis.\n   For example, the start of an object-specific\
    \ command element would be\n   described in generic terms as follows:\n   C:<EPPCommandName>\n\
    \   C:  <object:command xmlns:object=\"urn:ietf:params:xml:ns:object\">\n   C:\
    \    <!-- One or more object-specific command elements. -->\n   C:  </object:command>\n\
    \   C:</EPPCommandName>\n   An object-specific response element would be described\
    \ similarly:\n   S:<resData>\n   S:  <object:resData xmlns:object=\"urn:ietf:params:xml:ns:object\"\
    >\n   S:    <!-- One or more object-specific response elements. -->\n   S:  </object:resData>\n\
    \   S:</resData>\n   This document does not define mappings for specific objects.\
    \  The\n   mapping of EPP to an object MUST be described in separate documents\n\
    \   that specifically address each command and response in the context of\n  \
    \ the object.  A suggested object mapping outline is included as an\n   appendix\
    \ to this document.\n"
- title: 2.7.3.  Command-Response Extension
  contents:
  - "2.7.3.  Command-Response Extension\n   EPP provides a facility for protocol command\
    \ and response extensions.\n   Protocol commands and responses MAY be extended\
    \ by an <extension>\n   element that contains additional elements whose syntax\
    \ and semantics\n   are not explicitly defined by EPP or an EPP object mapping.\
    \  This\n   element is OPTIONAL.  Extensions are typically defined by agreement\n\
    \   between client and server and MAY be used to extend EPP for unique\n   operational\
    \ needs.  A server-extended command element would be\n   described in generic\
    \ terms as follows:\n   C:<command>\n   C:  <!-- EPPCommandName can be \"create\"\
    , \"update\", etc. -->\n   C:  <EPPCommandName>\n   C:    <object:command xmlns:object=\"\
    urn:ietf:params:xml:ns:object\">\n   C:      <!-- One or more object-specific\
    \ command elements. -->\n   C:    </object:command>\n   C:  </EPPCommandName>\n\
    \   C:  <extension>\n   C:    <!-- One or more server-defined elements. -->\n\
    \   C:  </extension>\n   C:</command>\n   A server-extended response element would\
    \ be described similarly:\n   S:<response>\n   S:  <result code=\"1000\">\n  \
    \ S:    <msg lang=\"en\">Command completed successfully</msg>\n   S:  </result>\n\
    \   S:  <extension>\n   S:    <!-- One or more server-defined elements. -->\n\
    \   S:  </extension>\n   S:  <trID>\n   S:    <clTRID>ABC-12345</clTRID>\n   S:\
    \    <svTRID>54321-XYZ</svTRID>\n   S:  </trID>\n   S:</response>\n   This document\
    \ does not define any specific server extensions.  The\n   mapping of server extensions\
    \ to EPP MUST be described in separate\n   documents that specifically address\
    \ extended commands and responses\n   in the server's operational context.\n"
- title: 2.8.  Object Identification
  contents:
  - "2.8.  Object Identification\n   Some objects, such as name servers and contacts,\
    \ can have utility in\n   multiple repositories.  However, maintaining disjoint\
    \ copies of\n   object information in multiple repositories can lead to\n   inconsistencies\
    \ that have adverse consequences for the Internet.  For\n   example, changing\
    \ the name of a name server in one repository but not\n   in a second repository\
    \ that refers to the server for domain name\n   delegation can produce unexpected\
    \ DNS query results.\n   Globally unique identifiers can help facilitate object-information\n\
    \   sharing between repositories.  A globally unique identifier MUST be\n   assigned\
    \ to every object when the object is created; the identifier\n   MUST be returned\
    \ to the client as part of any request to retrieve the\n   detailed attributes\
    \ of an object.  Specific identifier values are a\n   matter of repository policy,\
    \ but they SHOULD be constructed according\n   to the following algorithm:\n \
    \  a.  Divide the provisioning repository world into a number of object\n    \
    \   repository classes.\n   b.  Each repository within a class is assigned an\
    \ identifier that is\n       maintained by IANA.\n   c.  Each repository is responsible\
    \ for assigning a unique local\n       identifier for each object within the repository.\n\
    \   d.  The globally unique identifier is a concatenation of the local\n     \
    \  identifier, followed by a hyphen (\"-\", ASCII value 0x002D),\n       followed\
    \ by the repository identifier.\n"
- title: 2.9.  Protocol Commands
  contents:
  - "2.9.  Protocol Commands\n   EPP provides commands to manage sessions, retrieve\
    \ object\n   information, and perform transformation operations on objects.  All\n\
    \   EPP commands are atomic and designed so that they can be made\n   idempotent,\
    \ either succeeding completely or failing completely and\n   producing predictable\
    \ results in case of repeated executions.  This\n   section describes each EPP\
    \ command, including examples with\n   representative server responses.\n"
- title: 2.9.1.  Session Management Commands
  contents:
  - "2.9.1.  Session Management Commands\n   EPP provides two commands for session\
    \ management: <login> to\n   establish a session with a server and <logout> to\
    \ end a session with\n   a server.  The <login> command establishes an ongoing\
    \ server session\n   that preserves client identity and authorization information\
    \ during\n   the duration of the session.\n"
- title: 2.9.1.1.  EPP <login> Command
  contents:
  - "2.9.1.1.  EPP <login> Command\n   The EPP <login> command is used to establish\
    \ a session with an EPP\n   server in response to a greeting issued by the server.\
    \  A <login>\n   command MUST be sent to a server before any other EPP command\
    \ to\n   establish an ongoing session.  A server operator MAY limit the number\n\
    \   of failed login attempts N, 1 <= N <= infinity, after which a login\n   failure\
    \ results in the connection to the server (if a connection\n   exists) being closed.\n\
    \   A client identifier and initial password MUST be created on the\n   server\
    \ before a client can successfully complete a <login> command.\n   The client\
    \ identifier and initial password MUST be delivered to the\n   client using an\
    \ out-of-band method that protects the identifier and\n   password from inadvertent\
    \ disclosure.\n   In addition to the standard EPP command elements, the <login>\
    \ command\n   contains the following child elements:\n   -  A <clID> element that\
    \ contains the client identifier assigned to\n      the client by the server.\n\
    \   -  A <pw> element that contains the client's plain text password.\n      The\
    \ value of this element is case sensitive.\n   -  An OPTIONAL <newPW> element\
    \ that contains a new plain text\n      password to be assigned to the client\
    \ for use with subsequent\n      <login> commands.  The value of this element\
    \ is case sensitive.\n   -  An <options> element that contains the following child\
    \ elements:\n      -  A <version> element that contains the protocol version to\
    \ be\n         used for the command or ongoing server session.\n      -  A <lang>\
    \ element that contains the text response language to be\n         used for the\
    \ command or ongoing server session commands.\n      The values of the <version>\
    \ and <lang> elements MUST exactly match\n      one of the values presented in\
    \ the EPP greeting.\n   -  A <svcs> element that contains one or more <objURI>\
    \ elements that\n      contain namespace URIs representing the objects to be managed\n\
    \      during the session.  The <svcs> element MAY contain an OPTIONAL\n     \
    \ <svcExtension> element that contains one or more <extURI> elements\n      that\
    \ identify object extensions to be used during the session.\n   The PLAIN Simple\
    \ Authentication and Security Layer (SASL) mechanism\n   presented in [RFC4616]\
    \ describes a format for providing a user\n   identifier, an authorization identifier,\
    \ and a password as part of a\n   single plain-text string.  The EPP authentication\
    \ mechanism is\n   similar, though EPP does not require a session-level authorization\n\
    \   identifier and the user identifier and password are separated into\n   distinct\
    \ XML elements.  Additional identification and authorization\n   schemes MUST\
    \ be provided at other protocol layers to provide more\n   robust security services.\n\
    \   Example <login> command:\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"\
    no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n\
    \   C:    <login>\n   C:      <clID>ClientX</clID>\n   C:      <pw>foo-BAR2</pw>\n\
    \   C:      <newPW>bar-FOO2</newPW>\n   C:      <options>\n   C:        <version>1.0</version>\n\
    \   C:        <lang>en</lang>\n   C:      </options>\n   C:      <svcs>\n   C:\
    \        <objURI>urn:ietf:params:xml:ns:obj1</objURI>\n   C:        <objURI>urn:ietf:params:xml:ns:obj2</objURI>\n\
    \   C:        <objURI>urn:ietf:params:xml:ns:obj3</objURI>\n   C:        <svcExtension>\n\
    \   C:          <extURI>http://custom/obj1ext-1.0</extURI>\n   C:        </svcExtension>\n\
    \   C:      </svcs>\n   C:    </login>\n   C:    <clTRID>ABC-12345</clTRID>\n\
    \   C:  </command>\n   C:</epp>\n   When a <login> command has been processed\
    \ successfully, a server MUST\n   respond with an EPP response with no <resData>\
    \ element.  If\n   successful, the server will respond by creating and maintaining\
    \ a new\n   session that SHOULD be terminated by a future <logout> command.\n\
    \   Example <login> response:\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"\
    no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n\
    \   S:    <result code=\"1000\">\n   S:      <msg>Command completed successfully</msg>\n\
    \   S:    </result>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n\
    \   S:      <svTRID>54321-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n\
    \   S:</epp>\n   The EPP <login> command is used to establish a session with an\
    \ EPP\n   server.  A <login> command MUST be rejected if received within the\n\
    \   bounds of an existing session.  This command MUST be available to all\n  \
    \ clients.\n"
- title: 2.9.1.2.  EPP <logout> Command
  contents:
  - "2.9.1.2.  EPP <logout> Command\n   The EPP <logout> command is used to end a\
    \ session with an EPP server.\n   The <logout> command MUST be represented as\
    \ an empty element with no\n   child elements.\n   A server MAY end a session\
    \ due to client inactivity or excessive\n   client-session longevity.  The parameters\
    \ for determining excessive\n   client inactivity or session longevity are a matter\
    \ of server policy\n   and are not specified by this protocol.\n   Transport mappings\
    \ MUST explicitly describe any connection-oriented\n   processing that takes place\
    \ after processing a <logout> command and\n   ending a session.\n   Example <logout>\
    \ command:\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n\
    \   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n   C:\
    \    <logout/>\n   C:    <clTRID>ABC-12345</clTRID>\n   C:  </command>\n   C:</epp>\n\
    \   When a <logout> command has been processed successfully, a server\n   MUST\
    \ respond with an EPP response with no <resData> element.  If\n   successful,\
    \ the server MUST also end the current session.\n   Example <logout> response:\n\
    \   S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp\
    \ xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n   S:    <result\
    \ code=\"1500\">\n   S:      <msg>Command completed successfully; ending session</msg>\n\
    \   S:    </result>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n\
    \   S:      <svTRID>54321-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n\
    \   S:</epp>\n   The EPP <logout> command is used to end a session with an EPP\
    \ server.\n   A <logout> command MUST be rejected if the command has not been\n\
    \   preceded by a successful <login> command.  This command MUST be\n   available\
    \ to all clients.\n"
- title: 2.9.2.  Query Commands
  contents:
  - '2.9.2.  Query Commands

    '
- title: 2.9.2.1.  EPP <check> Command
  contents:
  - "2.9.2.1.  EPP <check> Command\n   The EPP <check> command is used to determine\
    \ if an object can be\n   provisioned within a repository.  It provides a hint\
    \ that allows a\n   client to anticipate the success or failure of provisioning\
    \ an object\n   using the <create> command as object-provisioning requirements\
    \ are\n   ultimately a matter of server policy.\n   The elements needed to identify\
    \ an object are object-specific, so the\n   child elements of the <check> command\
    \ are specified using the EPP\n   extension framework.  In addition to the standard\
    \ EPP command\n   elements, the <check> command contains the following child elements:\n\
    \   -  An object-specific <obj:check> element that identifies the objects\n  \
    \    to be queried.  Multiple objects of the same type MAY be queried\n      within\
    \ a single <check> command.\n   Example <check> command:\n   C:<?xml version=\"\
    1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\"\
    >\n   C:  <command>\n   C:    <check>\n   C:      <obj:check xmlns:obj=\"urn:ietf:params:xml:ns:obj\"\
    >\n   C:        <obj:name>example1</obj:name>\n   C:        <obj:name>example2</obj:name>\n\
    \   C:        <obj:name>example3</obj:name>\n   C:      </obj:check>\n   C:  \
    \  </check>\n   C:    <clTRID>ABC-12346</clTRID>\n   C:  </command>\n   C:</epp>\n\
    \   When a <check> command has been processed successfully, a server MUST\n  \
    \ respond with an EPP <resData> element that MUST contain a child\n   element\
    \ that identifies the object namespace.  The child elements of\n   the <resData>\
    \ element are object-specific, though the EPP <resData>\n   element MUST contain\
    \ a child <obj:chkData> element that contains one\n   or more <obj:cd> (check\
    \ data) elements.  Each <obj:cd> element\n   contains the following child elements:\n\
    \   -  An object-specific element that identifies the queried object.\n      This\
    \ element MUST contain an \"avail\" attribute whose value\n      indicates object\
    \ availability (can it be provisioned or not) at\n      the moment the <check>\
    \ command was completed.  A value of \"1\" or\n      \"true\" means that the object\
    \ can be provisioned.  A value of \"0\"\n      or \"false\" means that the object\
    \ cannot be provisioned.\n   -  An OPTIONAL <obj:reason> element that MAY be provided\
    \ when an\n      object cannot be provisioned.  If present, this element contains\n\
    \      server-specific text to help explain why the object cannot be\n      provisioned.\
    \  This text MUST be represented in the response\n      language previously negotiated\
    \ with the client; an OPTIONAL \"lang\"\n      attribute MAY be present to identify\
    \ the language if the\n      negotiated value is something other than the default\
    \ value of \"en\"\n      (English).\n   Example <check> response:\n   S:<?xml\
    \ version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\"\
    >\n   S:  <response>\n   S:    <result code=\"1000\">\n   S:      <msg>Command\
    \ completed successfully</msg>\n   S:    </result>\n   S:    <resData>\n   S:\
    \      <obj:chkData xmlns:obj=\"urn:ietf:params:xml:ns:obj\">\n   S:        <obj:cd>\n\
    \   S:          <obj:name avail=\"1\">example1</obj:name>\n   S:        </obj:cd>\n\
    \   S:        <obj:cd>\n   S:          <obj:name avail=\"0\">example2</obj:name>\n\
    \   S:          <obj:reason>In use</obj:reason>\n   S:        </obj:cd>\n   S:\
    \        <obj:cd>\n   S:          <obj:name avail=\"1\">example3</obj:name>\n\
    \   S:        </obj:cd>\n   S:      </obj:chkData>\n   S:    </resData>\n   S:\
    \    <trID>\n   S:      <clTRID>ABC-12346</clTRID>\n   S:      <svTRID>54322-XYZ</svTRID>\n\
    \   S:    </trID>\n   S:  </response>\n   S:</epp>\n   The EPP <check> command\
    \ is used to determine if an object can be\n   provisioned within a repository.\
    \  This action MUST be open to all\n   authorized clients.\n"
- title: 2.9.2.2.  EPP <info> Command
  contents:
  - "2.9.2.2.  EPP <info> Command\n   The EPP <info> command is used to retrieve information\
    \ associated\n   with an existing object.  The elements needed to identify an\
    \ object\n   and the type of information associated with an object are both\n\
    \   object-specific, so the child elements of the <info> command are\n   specified\
    \ using the EPP extension framework.  In addition to the\n   standard EPP command\
    \ elements, the <info> command contains the\n   following child elements:\n  \
    \ -  An object-specific <obj:info> element that identifies the object\n      to\
    \ be queried.\n   Example <info> command:\n   C:<?xml version=\"1.0\" encoding=\"\
    UTF-8\" standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\"\
    >\n   C:  <command>\n   C:    <info>\n   C:      <obj:info xmlns:obj=\"urn:ietf:params:xml:ns:obj\"\
    >\n   C:        <!-- Object-specific elements. -->\n   C:      </obj:info>\n \
    \  C:    </info>\n   C:    <clTRID>ABC-12346</clTRID>\n   C:  </command>\n   C:</epp>\n\
    \   When an <info> command has been processed successfully, a server MUST\n  \
    \ respond with an EPP <resData> element that MUST contain a child\n   element\
    \ that identifies the object namespace and the Repository\n   Object IDentifier\
    \ (ROID) that was assigned to the object when the\n   object was created.  Other\
    \ child elements of the <resData> element\n   are object-specific.\n   Example\
    \ <info> response:\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"\
    no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n\
    \   S:    <result code=\"1000\">\n   S:      <msg>Command completed successfully</msg>\n\
    \   S:    </result>\n   S:    <resData>\n   S:      <obj:infData xmlns:obj=\"\
    urn:ietf:params:xml:ns:obj\">\n   S:        <obj:roid>EXAMPLE1-REP</obj:roid>\n\
    \   S:        <!-- Object-specific elements. -->\n   S:      </obj:infData>\n\
    \   S:    </resData>\n   S:    <trID>\n   S:      <clTRID>ABC-12346</clTRID>\n\
    \   S:      <svTRID>54322-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n\
    \   S:</epp>\n   The EPP <info> command is used to retrieve information associated\n\
    \   with an existing object.  This action SHOULD be limited to authorized\n  \
    \ clients; restricting this action to the sponsoring client is\n   RECOMMENDED.\n"
- title: 2.9.2.3.  EPP <poll> Command
  contents:
  - "2.9.2.3.  EPP <poll> Command\n   The EPP <poll> command is used to discover and\
    \ retrieve service\n   messages queued by a server for individual clients.  If\
    \ the message\n   queue is not empty, a successful response to a <poll> command\
    \ MUST\n   return the first message from the message queue.  Each response\n \
    \  returned from the server includes a server-unique message identifier\n   that\
    \ MUST be provided to acknowledge receipt of the message, and a\n   counter that\
    \ indicates the number of messages in the queue.  After a\n   message has been\
    \ received by the client, the client MUST respond to\n   the message with an explicit\
    \ acknowledgement to confirm that the\n   message has been received.  A server\
    \ MUST dequeue the message and\n   decrement the queue counter after receiving\
    \ acknowledgement from the\n   client, making the next message in the queue (if\
    \ any) available for\n   retrieval.\n   Servers can occasionally perform actions\
    \ on objects that are not in\n   direct response to a client request, or an action\
    \ taken by one client\n   can indirectly involve a second client.  Examples of\
    \ such actions\n   include deletion upon expiration, automatic renewal upon expiration,\n\
    \   and transfer coordination; other types of service information MAY be\n   defined\
    \ as a matter of server policy.  Service messages SHOULD be\n   created for passive\
    \ clients affected by an action on an object.\n   Service messages MAY also be\
    \ created for active clients that request\n   an action on an object, though such\
    \ messages MUST NOT replace the\n   normal protocol response to the request. \
    \ For example, <transfer>\n   actions SHOULD be reported to the client that has\
    \ the authority to\n   approve or reject a transfer request.  Other methods of\
    \ server-client\n   action notification, such as offline reporting, are also possible\
    \ and\n   are beyond the scope of this specification.\n   Message queues can consume\
    \ server resources if clients do not\n   retrieve and acknowledge messages on\
    \ a regular basis.  Servers MAY\n   implement other mechanisms to dequeue and\
    \ deliver messages if queue\n   maintenance needs exceed server resource consumption\
    \ limits.  Server\n   operators SHOULD consider time-sensitivity and resource\
    \ management\n   factors when selecting a delivery method for service information\n\
    \   because some message types can be reasonably delivered using non-\n   protocol\
    \ methods that require fewer server resources.\n   Some of the information returned\
    \ in response to a <poll> command can\n   be object-specific, so some child elements\
    \ of the <poll> response MAY\n   be specified using the EPP extension framework.\
    \  The <poll> command\n   MUST be represented as an empty element with no child\
    \ elements.  An\n   \"op\" attribute with value \"req\" is REQUIRED to retrieve\
    \ the first\n   message from the server message queue.  An \"op\" attribute (with\
    \ value\n   \"ack\") and a \"msgID\" attribute (whose value corresponds to the\
    \ value\n   of the \"id\" attribute copied from the <msg> element in the message\n\
    \   being acknowledged) are REQUIRED to acknowledge receipt of a message.\n  \
    \ Example <poll> command:\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"\
    no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n\
    \   C:    <poll op=\"req\"/>\n   C:    <clTRID>ABC-12345</clTRID>\n   C:  </command>\n\
    \   C:</epp>\n   The returned result code notes that a message has been dequeued\
    \ and\n   returned in response to a <poll> command.\n   Example <poll> response\
    \ with object-specific information:\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\"\
    \ standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n \
    \  S:  <response>\n   S:    <result code=\"1301\">\n   S:      <msg>Command completed\
    \ successfully; ack to dequeue</msg>\n   S:    </result>\n   S:    <msgQ count=\"\
    5\" id=\"12345\">\n   S:      <qDate>2000-06-08T22:00:00.0Z</qDate>\n   S:   \
    \   <msg>Transfer requested.</msg>\n   S:    </msgQ>\n   S:    <resData>\n   S:\
    \      <obj:trnData\n   S:       xmlns:obj=\"urn:ietf:params:xml:ns:obj-1.0\"\
    >\n   S:        <obj:name>example.com</obj:name>\n   S:        <obj:trStatus>pending</obj:trStatus>\n\
    \   S:        <obj:reID>ClientX</obj:reID>\n   S:        <obj:reDate>2000-06-08T22:00:00.0Z</obj:reDate>\n\
    \   S:        <obj:acID>ClientY</obj:acID>\n   S:        <obj:acDate>2000-06-13T22:00:00.0Z</obj:acDate>\n\
    \   S:        <obj:exDate>2002-09-08T22:00:00.0Z</obj:exDate>\n   S:      </obj:trnData>\n\
    \   S:    </resData>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n\
    \   S:      <svTRID>54321-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n\
    \   S:</epp>\n   A client MUST acknowledge each response to dequeue the message\
    \ and\n   make subsequent messages available for retrieval.\n   Example <poll>\
    \ acknowledgement command:\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"\
    no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n\
    \   C:    <poll op=\"ack\" msgID=\"12345\"/>\n   C:    <clTRID>ABC-12346</clTRID>\n\
    \   C:  </command>\n   C:</epp>\n   A <poll> acknowledgement response notes the\
    \ ID of the message that\n   has been acknowledged and the number of messages\
    \ remaining in the\n   queue.\n   Example <poll> acknowledgement response:\n \
    \  S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp xmlns=\"\
    urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n   S:    <result code=\"\
    1000\">\n   S:      <msg>Command completed successfully</msg>\n   S:    </result>\n\
    \   S:    <msgQ count=\"4\" id=\"12345\"/>\n   S:    <trID>\n   S:      <clTRID>ABC-12346</clTRID>\n\
    \   S:      <svTRID>54322-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n\
    \   S:</epp>\n   Service messages can also be returned without object information.\n\
    \   Example <poll> response with mixed message content and without\n   object-specific\
    \ information:\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"\
    ?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n \
    \  S:    <result code=\"1301\">\n   S:      <msg>Command completed successfully;\
    \ ack to dequeue</msg>\n   S:    </result>\n   S:    <msgQ count=\"4\" id=\"12346\"\
    >\n   S:      <qDate>2000-06-08T22:10:00.0Z</qDate>\n   S:      <msg lang=\"en\"\
    >Credit balance low.\n   S:        <limit>100</limit><bal>5</bal>\n   S:     \
    \ </msg>\n   S:    </msgQ>\n   S:    <trID>\n   S:      <clTRID>ABC-12346</clTRID>\n\
    \   S:      <svTRID>54321-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n\
    \   S:</epp>\n   The returned result code and message is used to note an empty\
    \ server\n   message queue.\n   Example <poll> response to note an empty message\
    \ queue:\n      S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n\
    \      S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n      S:  <response>\n\
    \      S:    <result code=\"1300\">\n      S:      <msg>Command completed successfully;\
    \ no messages</msg>\n      S:    </result>\n      S:    <trID>\n      S:     \
    \ <clTRID>ABC-12346</clTRID>\n      S:      <svTRID>54321-XYZ</svTRID>\n     \
    \ S:    </trID>\n      S:  </response>\n      S:</epp>\n   The EPP <poll> command\
    \ is used to discover and retrieve client\n   service messages from a server.\
    \  This action SHOULD be limited to\n   authorized clients; queuing service messages\
    \ and limiting queue\n   access on a per-client basis is RECOMMENDED.\n"
- title: 2.9.2.4.  EPP <transfer> Query Command
  contents:
  - "2.9.2.4.  EPP <transfer> Query Command\n   The EPP <transfer> command provides\
    \ a query operation that allows a\n   client to determine real-time status of\
    \ pending and completed\n   transfer requests.  The elements needed to identify\
    \ an object that is\n   the subject of a transfer request are object-specific,\
    \ so the child\n   elements of the <transfer> query command are specified using\
    \ the EPP\n   extension framework.  In addition to the standard EPP command\n\
    \   elements, the <transfer> command contains an \"op\" attribute with\n   value\
    \ \"query\" and the following child elements:\n   -  An object-specific <obj:transfer>\
    \ element that identifies the\n      object whose transfer status is requested.\n\
    \   Transfer status is typically considered sensitive information by the\n   clients\
    \ involved in the operation.  Object mappings MUST provide\n   features to restrict\
    \ transfer queries to authorized clients, such as\n   by requiring authorization\
    \ information as part of the request.\n   Example <transfer> query command:\n\
    \   C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp\
    \ xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n   C:    <transfer\
    \ op=\"query\">\n   C:      <obj:transfer xmlns:obj=\"urn:ietf:params:xml:ns:obj\"\
    >\n   C:        <!-- Object-specific elements. -->\n   C:      </obj:transfer>\n\
    \   C:    </transfer>\n   C:    <clTRID>ABC-12346</clTRID>\n   C:  </command>\n\
    \   C:</epp>\n   When a <transfer> query command has been processed successfully,\
    \ a\n   server MUST respond with an EPP <resData> element that MUST contain a\n\
    \   child element that identifies the object namespace.  The child\n   elements\
    \ of the <resData> element are object-specific, but they MUST\n   include elements\
    \ that identify the object, the status of the\n   transfer, the identifier of\
    \ the client that requested the transfer,\n   the date and time that the request\
    \ was made, the identifier of the\n   client that is authorized to act on the\
    \ request, the date and time by\n   which an action is expected, and an OPTIONAL\
    \ date and time noting\n   changes in the object's validity period (if applicable)\
    \ that occur as\n   a result of the transfer.\n   Example <transfer> query response:\n\
    \   S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp\
    \ xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n   S:    <result\
    \ code=\"1000\">\n   S:      <msg>Command completed successfully</msg>\n   S:\
    \    </result>\n   S:    <resData>\n   S:      <obj:trnData xmlns:obj=\"urn:ietf:params:xml:ns:obj\"\
    >\n   S:        <obj:name>example</obj:name>\n   S:        <obj:trStatus>pending</obj:trStatus>\n\
    \   S:        <obj:reID>ClientX</obj:reID>\n   S:        <obj:reDate>2000-06-08T22:00:00.0Z</obj:reDate>\n\
    \   S:        <obj:acID>ClientY</obj:acID>\n   S:        <obj:acDate>2000-06-13T22:00:00.0Z</obj:acDate>\n\
    \   S:        <obj:exDate>2002-09-08T22:00:00.0Z</obj:exDate>\n   S:      </obj:trnData>\n\
    \   S:    </resData>\n   S:    <trID>\n   S:      <clTRID>ABC-12346</clTRID>\n\
    \   S:      <svTRID>54322-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n\
    \   S:</epp>\n   The EPP <transfer> command provides a query operation that allows\
    \ a\n   client to determine real-time status of pending and completed\n   transfer\
    \ requests.  This action SHOULD be limited to authorized\n   clients; restricting\
    \ queries to the requesting and responding clients\n   is RECOMMENDED.  Object\
    \ transfer MAY be unavailable or limited by\n   object-specific policies.\n"
- title: 2.9.3.  Object Transform Commands
  contents:
  - "2.9.3.  Object Transform Commands\n   EPP provides five commands to transform\
    \ objects: <create> to create\n   an instance of an object with a server, <delete>\
    \ to remove an\n   instance of an object from a server, <renew> to extend the\
    \ validity\n   period of an object, <transfer> to manage changes in client\n \
    \  sponsorship of an object, and <update> to change information\n   associated\
    \ with an object.\n"
- title: 2.9.3.1.  EPP <create> Command
  contents:
  - "2.9.3.1.  EPP <create> Command\n   The EPP <create> command is used to create\
    \ an instance of an object.\n   An object can be created for an indefinite period\
    \ of time, or an\n   object can be created for a specific validity period.  The\
    \ EPP\n   mapping for an object MUST describe the status of an object with\n \
    \  respect to time in order to include expected client and server\n   behavior\
    \ if a validity period is used.\n   The elements needed to identify an object\
    \ and associated attributes\n   are object-specific, so the child elements of\
    \ the <create> command\n   are specified using the EPP extension framework.  In\
    \ addition to the\n   standard EPP command elements, the <create> command contains\
    \ the\n   following child elements:\n   -  An object-specific <obj:create> element\
    \ that identifies the object\n      to be created and the elements that are required\
    \ to create the\n      object.\n   Example <create> command:\n   C:<?xml version=\"\
    1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\"\
    >\n   C:  <command>\n   C:    <create>\n   C:      <obj:create xmlns:obj=\"urn:ietf:params:xml:ns:obj\"\
    >\n   C:        <!-- Object-specific elements. -->\n   C:      </obj:create>\n\
    \   C:    </create>\n   C:    <clTRID>ABC-12345</clTRID>\n   C:  </command>\n\
    \   C:</epp>\n   When a <create> command has been processed successfully, a server\
    \ MAY\n   respond with an EPP <resData> element that MUST contain a child\n  \
    \ element that identifies the object namespace.  The child elements of\n   the\
    \ <resData> element are object-specific.\n   Example <create> response with <resData>:\n\
    \   S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp\
    \ xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n   S:    <result\
    \ code=\"1000\">\n   S:      <msg>Command completed successfully</msg>\n   S:\
    \    </result>\n   S:    <resData>\n   S:      <obj:creData xmlns:obj=\"urn:ietf:params:xml:ns:obj\"\
    >\n   S:        <!-- Object-specific elements. -->\n   S:      </obj:creData>\n\
    \   S:    </resData>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n\
    \   S:      <svTRID>54321-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n\
    \   S:</epp>\n   The EPP <create> command is used to create an instance of an\
    \ object.\n   This action SHOULD be limited to authorized clients and MAY be\n\
    \   restricted on a per-client basis.\n"
- title: 2.9.3.2.  EPP <delete> Command
  contents:
  - "2.9.3.2.  EPP <delete> Command\n   The EPP <delete> command is used to remove\
    \ an instance of an existing\n   object.  The elements needed to identify an object\
    \ are object-\n   specific, so the child elements of the <delete> command are\
    \ specified\n   using the EPP extension framework.  In addition to the standard\
    \ EPP\n   command elements, the <delete> command contains the following child\n\
    \   elements:\n   -  An object-specific <obj:delete> element that identifies the\
    \ object\n      to be deleted.\n   Example <delete> command:\n   C:<?xml version=\"\
    1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\"\
    >\n   C:  <command>\n   C:    <delete>\n   C:      <obj:delete xmlns:obj=\"urn:ietf:params:xml:ns:obj\"\
    >\n   C:        <!-- Object-specific elements. -->\n   C:      </obj:delete>\n\
    \   C:    </delete>\n   C:    <clTRID>ABC-12346</clTRID>\n   C:  </command>\n\
    \   C:</epp>\n   When a <delete> command has been processed successfully, a server\
    \ MAY\n   respond with an EPP <resData> element that MUST contain a child\n  \
    \ element that identifies the object namespace.  The child elements of\n   the\
    \ <resData> element are object-specific.\n   Example <delete> response without\
    \ <resData>:\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"\
    ?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n \
    \  S:    <result code=\"1000\">\n   S:      <msg>Command completed successfully</msg>\n\
    \   S:    </result>\n   S:    <trID>\n   S:      <clTRID>ABC-12346</clTRID>\n\
    \   S:      <svTRID>54322-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n\
    \   S:</epp>\n   The EPP <delete> command is used to remove an instance of an\
    \ existing\n   object.  This action SHOULD be limited to authorized clients;\n\
    \   restricting this action to the sponsoring client is RECOMMENDED.\n"
- title: 2.9.3.3.  EPP <renew> Command
  contents:
  - "2.9.3.3.  EPP <renew> Command\n   The EPP <renew> command is used to extend the\
    \ validity period of an\n   existing object.  The elements needed to identify\
    \ and extend the\n   validity period of an object are object-specific, so the\
    \ child\n   elements of the <renew> command are specified using the EPP extension\n\
    \   framework.  In addition to the standard EPP command elements, the\n   <renew>\
    \ command contains the following child elements:\n   -  An object-specific <obj:renew>\
    \ element that identifies the object\n      to be renewed and the elements that\
    \ are required to extend the\n      validity period of the object.\n   Example\
    \ <renew> command:\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"\
    no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n\
    \   C:    <renew>\n   C:      <obj:renew xmlns:obj=\"urn:ietf:params:xml:ns:obj\"\
    >\n   C:        <!-- Object-specific elements. -->\n   C:      </obj:renew>\n\
    \   C:    </renew>\n   C:    <clTRID>ABC-12346</clTRID>\n   C:  </command>\n \
    \  C:</epp>\n   When a <renew> command has been processed successfully, a server\
    \ MAY\n   respond with an EPP <resData> element that MUST contain a child\n  \
    \ element that identifies the object namespace.  The child elements of\n   the\
    \ <resData> element are object-specific.\n   Example <renew> response with <resData>:\n\
    \   S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp\
    \ xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n   S:    <result\
    \ code=\"1000\">\n   S:      <msg>Command completed successfully</msg>\n   S:\
    \    </result>\n   S:    <resData>\n   S:      <obj:renData xmlns:obj=\"urn:ietf:params:xml:ns:obj\"\
    >\n   S:        <!-- Object-specific elements. -->\n   S:      </obj:renData>\n\
    \   S:    </resData>\n   S:    <trID>\n   S:      <clTRID>ABC-12346</clTRID>\n\
    \   S:      <svTRID>54322-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n\
    \   S:</epp>\n   The EPP <renew> command is used to extend the validity period\
    \ of an\n   existing object.  This action SHOULD be limited to authorized\n  \
    \ clients; restricting this action to the sponsoring client is\n   RECOMMENDED.\
    \  Object renewal MAY be unavailable or limited by object-\n   specific policies.\n"
- title: 2.9.3.4.  EPP <transfer> Command
  contents:
  - "2.9.3.4.  EPP <transfer> Command\n   The EPP <transfer> command is used to manage\
    \ changes in client\n   sponsorship of an existing object.  Clients can initiate\
    \ a transfer\n   request, cancel a transfer request, approve a transfer request,\
    \ and\n   reject a transfer request using the \"op\" command attribute.\n   A\
    \ client who wishes to assume sponsorship of a known object from\n   another client\
    \ uses the <transfer> command with the value of the \"op\"\n   attribute set to\
    \ \"request\".  Once a transfer has been requested, the\n   same client can cancel\
    \ the request using a <transfer> command with\n   the value of the \"op\" attribute\
    \ set to \"cancel\".  A request to cancel\n   the transfer MUST be sent to the\
    \ server before the current sponsoring\n   client either approves or rejects the\
    \ transfer request and before the\n   server automatically processes the request\
    \ due to responding client\n   inactivity.\n   Once a transfer request has been\
    \ received by the server, the server\n   MUST notify the current sponsoring client\
    \ of the requested transfer\n   either by queuing a service message for retrieval\
    \ via the <poll>\n   command or by using an out-of-band mechanism to inform the\
    \ client of\n   the request.  The current status of a pending <transfer> command\
    \ for\n   any object can be found using the <transfer> query command.  Transfer\n\
    \   service messages MUST include the object-specific elements specified\n   for\
    \ <transfer> command responses.\n   The current sponsoring client MAY explicitly\
    \ approve or reject the\n   transfer request.  The client can approve the request\
    \ using a\n   <transfer> command with the value of the \"op\" attribute set to\n\
    \   \"approve\".  The client can reject the request using a <transfer>\n   command\
    \ with the value of the \"op\" attribute set to \"reject\".\n   A server MAY automatically\
    \ approve or reject all transfer requests\n   that are not explicitly approved\
    \ or rejected by the current\n   sponsoring client within a fixed amount of time.\
    \  The amount of time\n   to wait for explicit action and the default server behavior\
    \ are local\n   matters not specified by EPP, but they SHOULD be documented in\
    \ a\n   server-specific profile document that describes default server\n   behavior\
    \ for client information.\n   Objects eligible for transfer MUST have associated\
    \ authorization\n   information that MUST be provided to complete a <transfer>\
    \ command.\n   The type of authorization information required is object-specific;\n\
    \   passwords or more complex mechanisms based on public key cryptography\n  \
    \ are typical.\n   The elements needed to identify and complete the transfer of\
    \ an\n   object are object-specific, so the child elements of the <transfer>\n\
    \   command are specified using the EPP extension framework.  In addition\n  \
    \ to the standard EPP command elements, the <transfer> command contains\n   the\
    \ following child elements:\n   -  An object-specific <obj:transfer> element that\
    \ identifies the\n      object to be transferred and the elements that are required\
    \ to\n      process the transfer command.\n   Example <transfer> command:\n  \
    \ C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp xmlns=\"\
    urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n   C:    <transfer op=\"\
    request\">\n   C:      <obj:transfer xmlns:obj=\"urn:ietf:params:xml:ns:obj\"\
    >\n   C:        <!-- Object-specific elements. -->\n   C:      </obj:transfer>\n\
    \   C:    </transfer>\n   C:    <clTRID>ABC-12346</clTRID>\n   C:  </command>\n\
    \   C:</epp>\n   When a <transfer> command has been processed successfully, a\
    \ server\n   MUST respond with an EPP <resData> element that MUST contain a child\n\
    \   element that identifies the object namespace.  The child elements of\n   the\
    \ <resData> element are object-specific, but they MUST include\n   elements that\
    \ identify the object, the status of the transfer, the\n   identifier of the client\
    \ that requested the transfer, the date and\n   time that the request was made,\
    \ the identifier of the client that is\n   authorized to act on the request, the\
    \ date and time by which an\n   action is expected, and an OPTIONAL date and time\
    \ noting changes in\n   the object's validity period (if applicable) that occur\
    \ as a result\n   of the transfer.\n   Example <transfer> response with <resData>:\n\
    \   S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp\
    \ xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n   S:    <result\
    \ code=\"1001\">\n   S:      <msg>Command completed successfully; action pending</msg>\n\
    \   S:    </result>\n   S:    <resData>\n   S:      <obj:trnData xmlns:obj=\"\
    urn:ietf:params:xml:ns:obj\">\n   S:        <obj:name>example</obj:name>\n   S:\
    \        <obj:trStatus>pending</obj:trStatus>\n   S:        <obj:reID>ClientX</obj:reID>\n\
    \   S:        <obj:reDate>2000-06-08T22:00:00.0Z</obj:reDate>\n   S:        <obj:acID>ClientY</obj:acID>\n\
    \   S:        <obj:acDate>2000-06-13T22:00:00.0Z</obj:acDate>\n   S:        <obj:exDate>2002-09-08T22:00:00.0Z</obj:exDate>\n\
    \   S:      </obj:trnData>\n   S:    </resData>\n   S:    <trID>\n   S:      <clTRID>ABC-12346</clTRID>\n\
    \   S:      <svTRID>54322-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n\
    \   S:</epp>\n   The EPP <transfer> command is used to manage changes in client\n\
    \   sponsorship of an existing object.  This action SHOULD be limited to\n   authorized\
    \ clients; restricting <transfer> requests to a client other\n   than the current\
    \ sponsoring client, <transfer> approval requests to\n   the current sponsoring\
    \ client, and <transfer> cancellation requests\n   to the original requesting\
    \ client is RECOMMENDED.  Object transfer\n   MAY be unavailable or limited by\
    \ object-specific policies.\n"
- title: 2.9.3.5.  EPP <update> Command
  contents:
  - "2.9.3.5.  EPP <update> Command\n   The EPP <update> command is used to change\
    \ information associated\n   with an existing object.  The elements needed to\
    \ identify and modify\n   an object are object-specific, so the child elements\
    \ of the <update>\n   command are specified using the EPP extension framework.\
    \  In addition\n   to the standard EPP command elements, the <update> command\
    \ contains\n   the following child elements:\n   -  An object-specific <obj:update>\
    \ element that identifies the object\n      to be updated and the elements that\
    \ are required to modify the\n      object.  Object-specific elements MUST identify\
    \ values to be\n      added, values to be removed, or values to be changed.\n\
    \   Example <update> command:\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"\
    no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n\
    \   C:    <update>\n   C:      <obj:update xmlns:obj=\"urn:ietf:params:xml:ns:obj\"\
    >\n   C:        <!-- Object-specific elements. -->\n   C:      </obj:update>\n\
    \   C:    </update>\n   C:    <clTRID>ABC-12346</clTRID>\n   C:  </command>\n\
    \   C:</epp>\n   When an <update> command has been processed successfully, a server\n\
    \   MAY respond with an EPP <resData> element that MUST contain a child\n   element\
    \ that identifies the object namespace.  The child elements of\n   the <resData>\
    \ element are object-specific.\n   Example <update> response without <resData>:\n\
    \   S:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp\
    \ xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   S:  <response>\n   S:    <result\
    \ code=\"1000\">\n   S:      <msg>Command completed successfully</msg>\n   S:\
    \    </result>\n   S:    <trID>\n   S:      <clTRID>ABC-12346</clTRID>\n   S:\
    \      <svTRID>54322-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n   S:</epp>\n\
    \   The EPP <update> command is used to change information associated\n   with\
    \ an existing object.  This action SHOULD be limited to authorized\n   clients;\
    \ restricting this action to the sponsoring client is\n   RECOMMENDED.\n"
- title: 3.  Result Codes
  contents:
  - "3.  Result Codes\n   EPP result codes are based on the theory of reply codes\
    \ described in\n   section 4.2.1 of [RFC5321].  EPP uses four decimal digits to\
    \ describe\n   the success or failure of each EPP command.  Each of the digits\
    \ of\n   the reply have special significance.\n   The first digit denotes command\
    \ success or failure.  The second digit\n   denotes the response category, such\
    \ as command syntax or security.\n   The third and fourth digits provide explicit\
    \ response detail within\n   each response category.\n   There are two values\
    \ for the first digit of the reply code:\n   1yzz    Positive completion reply.\
    \  The command was accepted and\n           processed by the system without error.\n\
    \   2yzz    Negative completion reply.  The command was not accepted, and\n  \
    \         the requested action did not occur.\n   The second digit groups responses\
    \ into one of six specific\n   categories:\n   x0zz    Protocol Syntax\n   x1zz\
    \    Implementation-specific Rules\n   x2zz    Security\n   x3zz    Data Management\n\
    \   x4zz    Server System\n   x5zz    Connection Management\n   The third and\
    \ fourth digits provide response detail within the\n   categories defined by the\
    \ first and second digits.  The complete list\n   of valid result codes is enumerated\
    \ below and in the normative\n   schema.\n   Every EPP response MUST include a\
    \ result code and a human-readable\n   description of the result code.  The language\
    \ used to represent the\n   description MAY be identified using an instance of\
    \ the \"lang\"\n   attribute within the <msg> element.  If not specified, the\
    \ default\n   language is English, identified as \"en\".  A description of the\n\
    \   structure of valid values for the \"lang\" attribute is described in\n   [RFC4646].\n\
    \   Response text MAY be translated into other languages, though the\n   translation\
    \ MUST preserve the meaning of the code as described here.\n   Response code values\
    \ MUST NOT be changed when translating text.\n   Response text in the table below\
    \ is enclosed in quotes to clearly\n   mark the beginning and ending of each response\
    \ string.  Quotes MUST\n   NOT be used to delimit these strings when returning\
    \ response text via\n   the protocol.\n   Successful command completion responses:\n\
    \      Code    Response text in English\n      ____    ________________________\n\
    \      1000    \"Command completed successfully\"\n              This is the usual\
    \ response code for a successfully\n              completed command that is not\
    \ addressed by any other\n              1xxx-series response code.\n      1001\
    \    \"Command completed successfully; action pending\"\n              This response\
    \ code MUST be returned when responding to a\n              command that requires\
    \ offline activity before the\n              requested action can be completed.\
    \  See Section 2 for a\n              description of other processing requirements.\n\
    \      1300    \"Command completed successfully; no messages\"\n             \
    \ This response code MUST be returned when responding to a\n              <poll>\
    \ request command and the server message queue is\n              empty.\n    \
    \  1301    \"Command completed successfully; ack to dequeue\"\n              This\
    \ response code MUST be returned when responding to a\n              <poll> request\
    \ command and a message has been retrieved\n              from the server message\
    \ queue.\n      1500    \"Command completed successfully; ending session\"\n \
    \             This response code MUST be returned when responding to a\n     \
    \         successful <logout> command.\n   Command error responses:\n      Code\
    \    Response text in English\n      ____    ________________________\n      2000\
    \    \"Unknown command\"\n              This response code MUST be returned when\
    \ a server receives\n              a command element that is not defined by EPP.\n\
    \      2001    \"Command syntax error\"\n              This response code MUST\
    \ be returned when a server receives\n              an improperly formed command\
    \ element.\n      2002    \"Command use error\"\n              This response code\
    \ MUST be returned when a server receives\n              a properly formed command\
    \ element but the command cannot\n              be executed due to a sequencing\
    \ or context error.  For\n              example, a <logout> command cannot be\
    \ executed without\n              having first completed a <login> command.\n\
    \      2003    \"Required parameter missing\"\n              This response code\
    \ MUST be returned when a server receives\n              a command for which a\
    \ required parameter value has not\n              been provided.\n      2004 \
    \   \"Parameter value range error\"\n              This response code MUST be\
    \ returned when a server receives\n              a command parameter whose value\
    \ is outside the range of\n              values specified by the protocol.  The\
    \ error value SHOULD\n              be returned via a <value> element in the EPP\
    \ response.\n      2005    \"Parameter value syntax error\"\n              This\
    \ response code MUST be returned when a server receives\n              a command\
    \ containing a parameter whose value is improperly\n              formed.  The\
    \ error value SHOULD be returned via a <value>\n              element in the EPP\
    \ response.\n      2100    \"Unimplemented protocol version\"\n              This\
    \ response code MUST be returned when a server receives\n              a command\
    \ element specifying a protocol version that is\n              not implemented\
    \ by the server.\n      2101    \"Unimplemented command\"\n              This\
    \ response code MUST be returned when a server receives\n              a valid\
    \ EPP command element that is not implemented by the\n              server.  For\
    \ example, a <transfer> command can be\n              unimplemented for certain\
    \ object types.\n      2102    \"Unimplemented option\"\n              This response\
    \ code MUST be returned when a server receives\n              a valid EPP command\
    \ element that contains a protocol\n              option that is not implemented\
    \ by the server.\n      2103    \"Unimplemented extension\"\n              This\
    \ response code MUST be returned when a server receives\n              a valid\
    \ EPP command element that contains a protocol\n              command extension\
    \ that is not implemented by the server.\n      2104    \"Billing failure\"\n\
    \              This response code MUST be returned when a server attempts\n  \
    \            to execute a billable operation and the command cannot be\n     \
    \         completed due to a client-billing failure.\n      2105    \"Object is\
    \ not eligible for renewal\"\n              This response code MUST be returned\
    \ when a client attempts\n              to <renew> an object that is not eligible\
    \ for renewal in\n              accordance with server policy.\n      2106   \
    \ \"Object is not eligible for transfer\"\n              This response code MUST\
    \ be returned when a client attempts\n              to <transfer> an object that\
    \ is not eligible for transfer\n              in accordance with server policy.\n\
    \      2200    \"Authentication error\"\n              This response code MUST\
    \ be returned when a server notes an\n              error when validating client\
    \ credentials.\n      2201    \"Authorization error\"\n              This response\
    \ code MUST be returned when a server notes a\n              client-authorization\
    \ error when executing a command.  This\n              error is used to note that\
    \ a client lacks privileges to\n              execute the requested command.\n\
    \      2202    \"Invalid authorization information\"\n              This response\
    \ code MUST be returned when a server receives\n              invalid command\
    \ authorization information when attempting\n              to confirm authorization\
    \ to execute a command.  This error\n              is used to note that a client\
    \ has the privileges required\n              to execute the requested command,\
    \ but the authorization\n              information provided by the client does\
    \ not match the\n              authorization information archived by the server.\n\
    \      2300    \"Object pending transfer\"\n              This response code MUST\
    \ be returned when a server receives\n              a command to transfer of an\
    \ object that is pending\n              transfer due to an earlier transfer request.\n\
    \      2301    \"Object not pending transfer\"\n              This response code\
    \ MUST be returned when a server receives\n              a command to confirm,\
    \ reject, or cancel the transfer of an\n              object when no command has\
    \ been made to transfer the\n              object.\n      2302    \"Object exists\"\
    \n              This response code MUST be returned when a server receives\n \
    \             a command to create an object that already exists in the\n     \
    \         repository.\n      2303    \"Object does not exist\"\n             \
    \ This response code MUST be returned when a server receives\n              a\
    \ command to query or transform an object that does not\n              exist in\
    \ the repository.\n      2304    \"Object status prohibits operation\"\n     \
    \         This response code MUST be returned when a server receives\n       \
    \       a command to transform an object that cannot be completed\n          \
    \    due to server policy or business practices.  For example,\n             \
    \ a server can disallow <transfer> commands under terms and\n              conditions\
    \ that are matters of local policy, or the server\n              might have received\
    \ a <delete> command for an object whose\n              status prohibits deletion.\n\
    \      2305    \"Object association prohibits operation\"\n              This\
    \ response code MUST be returned when a server receives\n              a command\
    \ to transform an object that cannot be completed\n              due to dependencies\
    \ on other objects that are associated\n              with the target object.\
    \  For example, a server can\n              disallow <delete> commands while an\
    \ object has active\n              associations with other objects.\n      2306\
    \    \"Parameter value policy error\"\n              This response code MUST be\
    \ returned when a server receives\n              a command containing a parameter\
    \ value that is\n              syntactically valid but semantically invalid due\
    \ to local\n              policy.  For example, the server can support a subset\
    \ of a\n              range of valid protocol parameter values.  The error value\n\
    \              SHOULD be returned via a <value> element in the EPP\n         \
    \     response.\n      2307    \"Unimplemented object service\"\n            \
    \  This response code MUST be returned when a server receives\n              a\
    \ command to operate on an object service that is not\n              supported\
    \ by the server.\n      2308    \"Data management policy violation\"\n       \
    \       This response code MUST be returned when a server receives\n         \
    \     a command whose execution results in a violation of server\n           \
    \   data management policies.  For example, removing all\n              attribute\
    \ values or object associations from an object\n              might be a violation\
    \ of a server's data management\n              policies.\n      2400    \"Command\
    \ failed\"\n              This response code MUST be returned when a server is\n\
    \              unable to execute a command due to an internal server\n       \
    \       error that is not related to the protocol.  The failure\n            \
    \  can be transient.  The server MUST keep any ongoing\n              session\
    \ active.\n      2500    \"Command failed; server closing connection\"\n     \
    \         This response code MUST be returned when a server receives\n       \
    \       a command that cannot be completed due to an internal\n              server\
    \ error that is not related to the protocol.  The\n              failure is not\
    \ transient and will cause other commands to\n              fail as well.  The\
    \ server MUST end the active session and\n              close the existing connection.\n\
    \      2501    \"Authentication error; server closing connection\"\n         \
    \     This response code MUST be returned when a server notes an\n           \
    \   error when validating client credentials and a\n              server-defined\
    \ limit on the number of allowable failures\n              has been exceeded.\
    \  The server MUST close the existing\n              connection.\n      2502 \
    \   \"Session limit exceeded; server closing connection\"\n              This\
    \ response code MUST be returned when a server receives\n              a <login>\
    \ command and the command cannot be completed\n              because the client\
    \ has exceeded a system-defined limit on\n              the number of sessions\
    \ that the client can establish.  It\n              might be possible to establish\
    \ a session by ending\n              existing unused sessions and closing inactive\
    \ connections.\n"
- title: 4.  Formal Syntax
  contents:
  - "4.  Formal Syntax\n   EPP is specified in XML Schema notation.  The formal syntax\
    \ presented\n   here is a complete schema representation of EPP suitable for\n\
    \   automated validation of EPP XML instances.\n   Two schemas are presented here.\
    \  The first schema is the base EPP\n   schema.  The second schema defines elements\
    \ and structures that can\n   be used by both the base EPP schema and object mapping\
    \ schema.  The\n   BEGIN and END tags are not part of the schema; they are used\
    \ to note\n   the beginning and ending of the schema for URI registration purposes.\n"
- title: 4.1.  Base Schema
  contents:
  - "4.1.  Base Schema\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as authors\n   of the code.  All rights reserved.\n   Redistribution and use\
    \ in source and binary forms, with or without\n   modification, are permitted\
    \ provided that the following conditions\n   are met:\n   o  Redistributions of\
    \ source code must retain the above copyright\n      notice, this list of conditions\
    \ and the following disclaimer.\n   o  Redistributions in binary form must reproduce\
    \ the above copyright\n      notice, this list of conditions and the following\
    \ disclaimer in\n      the documentation and/or other materials provided with\
    \ the\n      distribution.\n   o  Neither the name of Internet Society, IETF or\
    \ IETF Trust, nor the\n      names of specific contributors, may be used to endorse\
    \ or promote\n      products derived from this software without specific prior\
    \ written\n      permission.\n   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS\
    \ AND CONTRIBUTORS\n   \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,\
    \ BUT NOT\n   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\
    \ FOR\n   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n\
    \   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n  \
    \ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n   LIMITED\
    \ TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n   DATA, OR PROFITS;\
    \ OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n   THEORY OF LIABILITY,\
    \ WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n   (INCLUDING NEGLIGENCE OR\
    \ OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n   OF THIS SOFTWARE, EVEN IF ADVISED\
    \ OF THE POSSIBILITY OF SUCH DAMAGE.\n   BEGIN\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <schema targetNamespace=\"urn:ietf:params:xml:ns:epp-1.0\"\n   \
    \        xmlns:epp=\"urn:ietf:params:xml:ns:epp-1.0\"\n           xmlns:eppcom=\"\
    urn:ietf:params:xml:ns:eppcom-1.0\"\n           xmlns=\"http://www.w3.org/2001/XMLSchema\"\
    \n           elementFormDefault=\"qualified\">\n   <!--\n   Import common element\
    \ types.\n   -->\n     <import namespace=\"urn:ietf:params:xml:ns:eppcom-1.0\"\
    />\n     <annotation>\n       <documentation>\n         Extensible Provisioning\
    \ Protocol v1.0 schema.\n       </documentation>\n     </annotation>\n   <!--\n\
    \   Every EPP XML instance must begin with this element.\n   -->\n     <element\
    \ name=\"epp\" type=\"epp:eppType\"/>\n   <!--\n   An EPP XML instance must contain\
    \ a greeting, hello, command,\n   response, or extension.\n   -->\n     <complexType\
    \ name=\"eppType\">\n       <choice>\n         <element name=\"greeting\" type=\"\
    epp:greetingType\"/>\n         <element name=\"hello\"/>\n         <element name=\"\
    command\" type=\"epp:commandType\"/>\n         <element name=\"response\" type=\"\
    epp:responseType\"/>\n         <element name=\"extension\" type=\"epp:extAnyType\"\
    />\n       </choice>\n     </complexType>\n   <!--\n   A greeting is sent by a\
    \ server in response to a client connection\n   or <hello>.\n   -->\n     <complexType\
    \ name=\"greetingType\">\n       <sequence>\n         <element name=\"svID\" type=\"\
    epp:sIDType\"/>\n         <element name=\"svDate\" type=\"dateTime\"/>\n     \
    \    <element name=\"svcMenu\" type=\"epp:svcMenuType\"/>\n         <element name=\"\
    dcp\" type=\"epp:dcpType\"/>\n       </sequence>\n     </complexType>\n   <!--\n\
    \   Server IDs are strings with minimum and maximum length restrictions.\n   -->\n\
    \     <simpleType name=\"sIDType\">\n       <restriction base=\"normalizedString\"\
    >\n         <minLength value=\"3\"/>\n         <maxLength value=\"64\"/>\n   \
    \    </restriction>\n     </simpleType>\n   <!--\n   A server greeting identifies\
    \ available object services.\n   -->\n     <complexType name=\"svcMenuType\">\n\
    \       <sequence>\n         <element name=\"version\" type=\"epp:versionType\"\
    \n          maxOccurs=\"unbounded\"/>\n         <element name=\"lang\" type=\"\
    language\"\n          maxOccurs=\"unbounded\"/>\n         <element name=\"objURI\"\
    \ type=\"anyURI\"\n          maxOccurs=\"unbounded\"/>\n         <element name=\"\
    svcExtension\" type=\"epp:extURIType\"\n          minOccurs=\"0\"/>\n       </sequence>\n\
    \     </complexType>\n   <!--\n   Data Collection Policy types.\n   -->\n    \
    \ <complexType name=\"dcpType\">\n       <sequence>\n         <element name=\"\
    access\" type=\"epp:dcpAccessType\"/>\n         <element name=\"statement\" type=\"\
    epp:dcpStatementType\"\n          maxOccurs=\"unbounded\"/>\n         <element\
    \ name=\"expiry\" type=\"epp:dcpExpiryType\"\n          minOccurs=\"0\"/>\n  \
    \     </sequence>\n     </complexType>\n     <complexType name=\"dcpAccessType\"\
    >\n       <choice>\n         <element name=\"all\"/>\n         <element name=\"\
    none\"/>\n         <element name=\"null\"/>\n         <element name=\"other\"\
    />\n         <element name=\"personal\"/>\n         <element name=\"personalAndOther\"\
    />\n       </choice>\n     </complexType>\n     <complexType name=\"dcpStatementType\"\
    >\n       <sequence>\n         <element name=\"purpose\" type=\"epp:dcpPurposeType\"\
    />\n         <element name=\"recipient\" type=\"epp:dcpRecipientType\"/>\n   \
    \      <element name=\"retention\" type=\"epp:dcpRetentionType\"/>\n       </sequence>\n\
    \     </complexType>\n     <complexType name=\"dcpPurposeType\">\n       <sequence>\n\
    \         <element name=\"admin\"\n          minOccurs=\"0\"/>\n         <element\
    \ name=\"contact\"\n          minOccurs=\"0\"/>\n         <element name=\"other\"\
    \n          minOccurs=\"0\"/>\n         <element name=\"prov\"\n          minOccurs=\"\
    0\"/>\n       </sequence>\n     </complexType>\n     <complexType name=\"dcpRecipientType\"\
    >\n       <sequence>\n         <element name=\"other\"\n          minOccurs=\"\
    0\"/>\n         <element name=\"ours\" type=\"epp:dcpOursType\"\n          minOccurs=\"\
    0\" maxOccurs=\"unbounded\"/>\n         <element name=\"public\"\n          minOccurs=\"\
    0\"/>\n         <element name=\"same\"\n          minOccurs=\"0\"/>\n        \
    \ <element name=\"unrelated\"\n          minOccurs=\"0\"/>\n       </sequence>\n\
    \     </complexType>\n     <complexType name=\"dcpOursType\">\n       <sequence>\n\
    \         <element name=\"recDesc\" type=\"epp:dcpRecDescType\"\n          minOccurs=\"\
    0\"/>\n       </sequence>\n     </complexType>\n     <simpleType name=\"dcpRecDescType\"\
    >\n       <restriction base=\"token\">\n         <minLength value=\"1\"/>\n  \
    \       <maxLength value=\"255\"/>\n       </restriction>\n     </simpleType>\n\
    \     <complexType name=\"dcpRetentionType\">\n       <choice>\n         <element\
    \ name=\"business\"/>\n         <element name=\"indefinite\"/>\n         <element\
    \ name=\"legal\"/>\n         <element name=\"none\"/>\n         <element name=\"\
    stated\"/>\n       </choice>\n     </complexType>\n     <complexType name=\"dcpExpiryType\"\
    >\n       <choice>\n         <element name=\"absolute\" type=\"dateTime\"/>\n\
    \         <element name=\"relative\" type=\"duration\"/>\n       </choice>\n \
    \    </complexType>\n   <!--\n   Extension framework types.\n   -->\n     <complexType\
    \ name=\"extAnyType\">\n       <sequence>\n         <any namespace=\"##other\"\
    \n          maxOccurs=\"unbounded\"/>\n       </sequence>\n     </complexType>\n\
    \     <complexType name=\"extURIType\">\n       <sequence>\n         <element\
    \ name=\"extURI\" type=\"anyURI\"\n          maxOccurs=\"unbounded\"/>\n     \
    \  </sequence>\n     </complexType>\n   <!--\n   An EPP version number is a dotted\
    \ pair of decimal numbers.\n   -->\n     <simpleType name=\"versionType\">\n \
    \      <restriction base=\"token\">\n         <pattern value=\"[1-9]+\\.[0-9]+\"\
    />\n         <enumeration value=\"1.0\"/>\n       </restriction>\n     </simpleType>\n\
    \   <!--\n   Command types.\n   -->\n     <complexType name=\"commandType\">\n\
    \       <sequence>\n         <choice>\n           <element name=\"check\" type=\"\
    epp:readWriteType\"/>\n           <element name=\"create\" type=\"epp:readWriteType\"\
    />\n           <element name=\"delete\" type=\"epp:readWriteType\"/>\n       \
    \    <element name=\"info\" type=\"epp:readWriteType\"/>\n           <element\
    \ name=\"login\" type=\"epp:loginType\"/>\n           <element name=\"logout\"\
    />\n           <element name=\"poll\" type=\"epp:pollType\"/>\n           <element\
    \ name=\"renew\" type=\"epp:readWriteType\"/>\n           <element name=\"transfer\"\
    \ type=\"epp:transferType\"/>\n           <element name=\"update\" type=\"epp:readWriteType\"\
    />\n         </choice>\n         <element name=\"extension\" type=\"epp:extAnyType\"\
    \n          minOccurs=\"0\"/>\n         <element name=\"clTRID\" type=\"epp:trIDStringType\"\
    \n          minOccurs=\"0\"/>\n       </sequence>\n     </complexType>\n   <!--\n\
    \   The <login> command.\n   -->\n     <complexType name=\"loginType\">\n    \
    \   <sequence>\n         <element name=\"clID\" type=\"eppcom:clIDType\"/>\n \
    \        <element name=\"pw\" type=\"epp:pwType\"/>\n         <element name=\"\
    newPW\" type=\"epp:pwType\"\n          minOccurs=\"0\"/>\n         <element name=\"\
    options\" type=\"epp:credsOptionsType\"/>\n         <element name=\"svcs\" type=\"\
    epp:loginSvcType\"/>\n       </sequence>\n     </complexType>\n     <complexType\
    \ name=\"credsOptionsType\">\n       <sequence>\n         <element name=\"version\"\
    \ type=\"epp:versionType\"/>\n         <element name=\"lang\" type=\"language\"\
    />\n       </sequence>\n     </complexType>\n     <simpleType name=\"pwType\"\
    >\n       <restriction base=\"token\">\n         <minLength value=\"6\"/>\n  \
    \       <maxLength value=\"16\"/>\n       </restriction>\n     </simpleType>\n\
    \     <complexType name=\"loginSvcType\">\n       <sequence>\n         <element\
    \ name=\"objURI\" type=\"anyURI\"\n          maxOccurs=\"unbounded\"/>\n     \
    \    <element name=\"svcExtension\" type=\"epp:extURIType\"\n          minOccurs=\"\
    0\"/>\n       </sequence>\n     </complexType>\n   <!--\n   The <poll> command.\n\
    \   -->\n     <complexType name=\"pollType\">\n       <attribute name=\"op\" type=\"\
    epp:pollOpType\"\n        use=\"required\"/>\n       <attribute name=\"msgID\"\
    \ type=\"token\"/>\n     </complexType>\n     <simpleType name=\"pollOpType\"\
    >\n       <restriction base=\"token\">\n         <enumeration value=\"ack\"/>\n\
    \         <enumeration value=\"req\"/>\n       </restriction>\n     </simpleType>\n\
    \   <!--\n   The <transfer> command.  This is object-specific, and uses attributes\n\
    \   to identify the requested operation.\n   -->\n     <complexType name=\"transferType\"\
    >\n       <sequence>\n         <any namespace=\"##other\"/>\n       </sequence>\n\
    \       <attribute name=\"op\" type=\"epp:transferOpType\"\n        use=\"required\"\
    />\n     </complexType>\n     <simpleType name=\"transferOpType\">\n       <restriction\
    \ base=\"token\">\n         <enumeration value=\"approve\"/>\n         <enumeration\
    \ value=\"cancel\"/>\n         <enumeration value=\"query\"/>\n         <enumeration\
    \ value=\"reject\"/>\n         <enumeration value=\"request\"/>\n       </restriction>\n\
    \     </simpleType>\n   <!--\n   All other object-centric commands.  EPP doesn't\
    \ specify the syntax or\n   semantics of object-centric command elements.  The\
    \ elements MUST be\n   described in detail in another schema specific to the object.\n\
    \   -->\n     <complexType name=\"readWriteType\">\n       <sequence>\n      \
    \   <any namespace=\"##other\"/>\n       </sequence>\n     </complexType>\n  \
    \   <complexType name=\"trIDType\">\n       <sequence>\n         <element name=\"\
    clTRID\" type=\"epp:trIDStringType\"\n          minOccurs=\"0\"/>\n         <element\
    \ name=\"svTRID\" type=\"epp:trIDStringType\"/>\n       </sequence>\n     </complexType>\n\
    \     <simpleType name=\"trIDStringType\">\n       <restriction base=\"token\"\
    >\n         <minLength value=\"3\"/>\n         <maxLength value=\"64\"/>\n   \
    \    </restriction>\n     </simpleType>\n   <!--\n   Response types.\n   -->\n\
    \     <complexType name=\"responseType\">\n       <sequence>\n         <element\
    \ name=\"result\" type=\"epp:resultType\"\n          maxOccurs=\"unbounded\"/>\n\
    \         <element name=\"msgQ\" type=\"epp:msgQType\"\n          minOccurs=\"\
    0\"/>\n         <element name=\"resData\" type=\"epp:extAnyType\"\n          minOccurs=\"\
    0\"/>\n         <element name=\"extension\" type=\"epp:extAnyType\"\n        \
    \  minOccurs=\"0\"/>\n         <element name=\"trID\" type=\"epp:trIDType\"/>\n\
    \       </sequence>\n     </complexType>\n     <complexType name=\"resultType\"\
    >\n       <sequence>\n         <element name=\"msg\" type=\"epp:msgType\"/>\n\
    \         <choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n           <element\
    \ name=\"value\" type=\"epp:errValueType\"/>\n           <element name=\"extValue\"\
    \ type=\"epp:extErrValueType\"/>\n         </choice>\n       </sequence>\n   \
    \    <attribute name=\"code\" type=\"epp:resultCodeType\"\n        use=\"required\"\
    />\n     </complexType>\n     <complexType name=\"errValueType\" mixed=\"true\"\
    >\n       <sequence>\n         <any namespace=\"##any\" processContents=\"skip\"\
    />\n       </sequence>\n       <anyAttribute namespace=\"##any\" processContents=\"\
    skip\"/>\n     </complexType>\n     <complexType name=\"extErrValueType\">\n \
    \      <sequence>\n         <element name=\"value\" type=\"epp:errValueType\"\
    />\n         <element name=\"reason\" type=\"epp:msgType\"/>\n       </sequence>\n\
    \     </complexType>\n     <complexType name=\"msgQType\">\n       <sequence>\n\
    \         <element name=\"qDate\" type=\"dateTime\"\n          minOccurs=\"0\"\
    />\n         <element name=\"msg\" type=\"epp:mixedMsgType\"\n          minOccurs=\"\
    0\"/>\n       </sequence>\n       <attribute name=\"count\" type=\"unsignedLong\"\
    \n        use=\"required\"/>\n       <attribute name=\"id\" type=\"eppcom:minTokenType\"\
    \n        use=\"required\"/>\n     </complexType>\n     <complexType name=\"mixedMsgType\"\
    \ mixed=\"true\">\n       <sequence>\n         <any processContents=\"skip\"\n\
    \          minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n       </sequence>\n   \
    \    <attribute name=\"lang\" type=\"language\"\n        default=\"en\"/>\n  \
    \   </complexType>\n   <!--\n   Human-readable text may be expressed in languages\
    \ other than English.\n   -->\n     <complexType name=\"msgType\">\n       <simpleContent>\n\
    \         <extension base=\"normalizedString\">\n           <attribute name=\"\
    lang\" type=\"language\"\n            default=\"en\"/>\n         </extension>\n\
    \       </simpleContent>\n     </complexType>\n   <!--\n   EPP result codes.\n\
    \   -->\n     <simpleType name=\"resultCodeType\">\n       <restriction base=\"\
    unsignedShort\">\n         <enumeration value=\"1000\"/>\n         <enumeration\
    \ value=\"1001\"/>\n         <enumeration value=\"1300\"/>\n         <enumeration\
    \ value=\"1301\"/>\n         <enumeration value=\"1500\"/>\n         <enumeration\
    \ value=\"2000\"/>\n         <enumeration value=\"2001\"/>\n         <enumeration\
    \ value=\"2002\"/>\n         <enumeration value=\"2003\"/>\n         <enumeration\
    \ value=\"2004\"/>\n         <enumeration value=\"2005\"/>\n         <enumeration\
    \ value=\"2100\"/>\n         <enumeration value=\"2101\"/>\n         <enumeration\
    \ value=\"2102\"/>\n         <enumeration value=\"2103\"/>\n         <enumeration\
    \ value=\"2104\"/>\n         <enumeration value=\"2105\"/>\n         <enumeration\
    \ value=\"2106\"/>\n         <enumeration value=\"2200\"/>\n         <enumeration\
    \ value=\"2201\"/>\n         <enumeration value=\"2202\"/>\n         <enumeration\
    \ value=\"2300\"/>\n         <enumeration value=\"2301\"/>\n         <enumeration\
    \ value=\"2302\"/>\n         <enumeration value=\"2303\"/>\n         <enumeration\
    \ value=\"2304\"/>\n         <enumeration value=\"2305\"/>\n         <enumeration\
    \ value=\"2306\"/>\n         <enumeration value=\"2307\"/>\n         <enumeration\
    \ value=\"2308\"/>\n         <enumeration value=\"2400\"/>\n         <enumeration\
    \ value=\"2500\"/>\n         <enumeration value=\"2501\"/>\n         <enumeration\
    \ value=\"2502\"/>\n       </restriction>\n     </simpleType>\n   <!--\n   End\
    \ of schema.\n   -->\n   </schema>\n   END\n"
- title: 4.2.  Shared Structure Schema
  contents:
  - "4.2.  Shared Structure Schema\n   Copyright (c) 2009 IETF Trust and the persons\
    \ identified as authors\n   of the code.  All rights reserved.\n   Redistribution\
    \ and use in source and binary forms, with or without\n   modification, are permitted\
    \ provided that the following conditions\n   are met:\n   o  Redistributions of\
    \ source code must retain the above copyright\n      notice, this list of conditions\
    \ and the following disclaimer.\n   o  Redistributions in binary form must reproduce\
    \ the above copyright\n      notice, this list of conditions and the following\
    \ disclaimer in\n      the documentation and/or other materials provided with\
    \ the\n      distribution.\n   o  Neither the name of Internet Society, IETF or\
    \ IETF Trust, nor the\n      names of specific contributors, may be used to endorse\
    \ or promote\n      products derived from this software without specific prior\
    \ written\n      permission.\n   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS\
    \ AND CONTRIBUTORS\n   \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,\
    \ BUT NOT\n   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS\
    \ FOR\n   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n\
    \   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n  \
    \ SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n   LIMITED\
    \ TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n   DATA, OR PROFITS;\
    \ OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n   THEORY OF LIABILITY,\
    \ WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n   (INCLUDING NEGLIGENCE OR\
    \ OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n   OF THIS SOFTWARE, EVEN IF ADVISED\
    \ OF THE POSSIBILITY OF SUCH DAMAGE.\n   BEGIN\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <schema targetNamespace=\"urn:ietf:params:xml:ns:eppcom-1.0\"\n\
    \           xmlns:eppcom=\"urn:ietf:params:xml:ns:eppcom-1.0\"\n           xmlns=\"\
    http://www.w3.org/2001/XMLSchema\"\n           elementFormDefault=\"qualified\"\
    >\n     <annotation>\n       <documentation>\n         Extensible Provisioning\
    \ Protocol v1.0\n         shared structures schema.\n       </documentation>\n\
    \     </annotation>\n   <!--\n   Object authorization information types.\n   -->\n\
    \     <complexType name=\"pwAuthInfoType\">\n       <simpleContent>\n        \
    \ <extension base=\"normalizedString\">\n           <attribute name=\"roid\" type=\"\
    eppcom:roidType\"/>\n         </extension>\n       </simpleContent>\n     </complexType>\n\
    \     <complexType name=\"extAuthInfoType\">\n       <sequence>\n         <any\
    \ namespace=\"##other\"/>\n       </sequence>\n     </complexType>\n   <!--\n\
    \   <check> response types.\n   -->\n     <complexType name=\"reasonType\">\n\
    \       <simpleContent>\n         <extension base=\"eppcom:reasonBaseType\">\n\
    \           <attribute name=\"lang\" type=\"language\"/>\n         </extension>\n\
    \       </simpleContent>\n     </complexType>\n     <simpleType name=\"reasonBaseType\"\
    >\n       <restriction base=\"token\">\n         <minLength value=\"1\"/>\n  \
    \       <maxLength value=\"32\"/>\n       </restriction>\n     </simpleType>\n\
    \   <!--\n   Abstract client and object identifier type.\n   -->\n     <simpleType\
    \ name=\"clIDType\">\n       <restriction base=\"token\">\n         <minLength\
    \ value=\"3\"/>\n         <maxLength value=\"16\"/>\n       </restriction>\n \
    \    </simpleType>\n   <!--\n   DNS label type.\n   -->\n     <simpleType name=\"\
    labelType\">\n       <restriction base=\"token\">\n         <minLength value=\"\
    1\"/>\n         <maxLength value=\"255\"/>\n       </restriction>\n     </simpleType>\n\
    \   <!--\n   Non-empty token type.\n   -->\n     <simpleType name=\"minTokenType\"\
    >\n       <restriction base=\"token\">\n         <minLength value=\"1\"/>\n  \
    \     </restriction>\n     </simpleType>\n   <!--\n   Repository Object IDentifier\
    \ type.\n   -->\n     <simpleType name=\"roidType\">\n       <restriction base=\"\
    token\">\n         <pattern value=\"(\\w|_){1,80}-\\w{1,8}\"/>\n       </restriction>\n\
    \     </simpleType>\n   <!--\n   Transfer status identifiers.\n   -->\n     <simpleType\
    \ name=\"trStatusType\">\n       <restriction base=\"token\">\n         <enumeration\
    \ value=\"clientApproved\"/>\n         <enumeration value=\"clientCancelled\"\
    />\n         <enumeration value=\"clientRejected\"/>\n         <enumeration value=\"\
    pending\"/>\n         <enumeration value=\"serverApproved\"/>\n         <enumeration\
    \ value=\"serverCancelled\"/>\n       </restriction>\n     </simpleType>\n   <!--\n\
    \   End of schema.\n   -->\n   </schema>\n   END\n"
- title: 5.  Internationalization Considerations
  contents:
  - "5.  Internationalization Considerations\n   EPP is represented in XML, which\
    \ provides native support for encoding\n   information using the Unicode character\
    \ set and its more compact\n   representations including UTF-8.  Conformant XML\
    \ processors recognize\n   both UTF-8 and UTF-16.  Though XML includes provisions\
    \ to identify\n   and use other character encodings through use of an \"encoding\"\
    \n   attribute in an <?xml?> declaration, use of UTF-8 is RECOMMENDED in\n   environments\
    \ where parser-encoding-support incompatibility exists.\n   EPP includes a provision\
    \ for returning a human-readable message with\n   every result code.  This document\
    \ describes result codes in English,\n   but the actual text returned with a result\
    \ MAY be provided in a\n   language negotiated when a session is established.\
    \  Languages other\n   than English MUST be noted through specification of a \"\
    lang\"\n   attribute for each message.  Valid values for the \"lang\" attribute\n\
    \   and \"lang\" negotiation elements are described in [RFC4646].\n   All date-time\
    \ values presented via EPP MUST be expressed in Universal\n   Coordinated Time\
    \ using the Gregorian calendar.  XML Schema allows use\n   of time zone identifiers\
    \ to indicate offsets from the zero meridian,\n   but this option MUST NOT be\
    \ used with EPP.  The extended date-time\n   form using upper case \"T\" and \"\
    Z\" characters defined in\n   [W3C.REC-xmlschema-2-20041028] MUST be used to represent\
    \ date-time\n   values, as XML Schema does not support truncated date-time forms\
    \ or\n   lower case \"T\" and \"Z\" characters.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document uses URNs to describe XML namespaces\
    \ and XML schemas\n   conforming to a registry mechanism described in [RFC3688].\
    \  Four URI\n   assignments have been registered by the IANA.\n   Registration\
    \ request for the EPP namespace:\n      URI: urn:ietf:params:xml:ns:epp-1.0\n\
    \      Registrant Contact: See the \"Author's Address\" section of this\n    \
    \  document.\n      XML: None.  Namespace URIs do not represent an XML specification.\n\
    \   Registration request for the EPP XML schema:\n      URI: urn:ietf:params:xml:schema:epp-1.0\n\
    \      Registrant Contact: See the \"Author's Address\" section of this\n    \
    \  document.\n      XML: See the \"Base Schema\" section of this document.\n \
    \  Registration request for the EPP shared structure namespace:\n      URI: urn:ietf:params:xml:ns:eppcom-1.0\n\
    \      Registrant Contact: See the \"Author's Address\" section of this\n    \
    \  document.\n      XML: None.  Namespace URIs do not represent an XML specification.\n\
    \   Registration request for the EPP shared structure XML schema:\n      URI:\
    \ urn:ietf:params:xml:schema:eppcom-1.0\n      Registrant Contact: See the \"\
    Author's Address\" section of this\n      document.\n      XML: See the \"Shared\
    \ Structure Schema\" section of this document.\n   A MIME media type registration\
    \ template is included in Appendix B.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   EPP provides only simple client-authentication\
    \ services.  A passive\n   attack is sufficient to recover client identifiers\
    \ and passwords,\n   allowing trivial command forgery.  Protection against most\
    \ common\n   attacks and more robust security services MUST be provided by other\n\
    \   protocol layers.  Specifically, EPP instances MUST be protected using\n  \
    \ a transport mechanism or application protocol that provides\n   integrity, confidentiality,\
    \ and mutual, strong client-server\n   authentication.\n   EPP uses a variant\
    \ of the PLAIN SASL mechanism described in [RFC4616]\n   to provide a simple application-layer\
    \ authentication service that\n   augments or supplements authentication and identification\
    \ services\n   that might be available at other protocol layers.  Where the PLAIN\n\
    \   SASL mechanism specifies provision of an authorization identifier,\n   authentication\
    \ identifier, and password as a single string separated\n   by ASCII NUL characters,\
    \ EPP specifies use of a combined\n   authorization and authentication identifier\
    \ and a password provided\n   as distinct XML elements.\n   Repeated password\
    \ guessing attempts can be discouraged by limiting\n   the number of <login> attempts\
    \ that can be attempted on an open\n   connection.  A server MAY close an open\
    \ connection if multiple\n   <login> attempts are made with either an invalid\
    \ client identifier,\n   an invalid password, or both an invalid client identifier\
    \ and an\n   invalid password.\n   EPP uses authentication information associated\
    \ with objects to\n   confirm object-transfer authority.  Authentication information\n\
    \   exchanged between EPP clients and third-party entities MUST be\n   exchanged\
    \ using a facility that provides privacy and integrity\n   services to protect\
    \ against unintended disclosure and modification\n   while in transit.\n   EPP\
    \ instances SHOULD be protected using a transport mechanism or\n   application\
    \ protocol that provides anti-replay protection.  EPP\n   provides some protection\
    \ against replay attacks through command\n   idempotency and client-initiated\
    \ transaction identification.\n   Consecutive command replays will not change\
    \ the state of an object in\n   any way.  There is, however, a chance of unintended\
    \ or malicious\n   consequence if a command is replayed after intervening commands\
    \ have\n   changed the object state and client identifiers are not used to\n \
    \  detect replays.  For example, a replayed <create> command that\n   follows\
    \ a <delete> command might succeed without additional\n   facilities to prevent\
    \ or detect the replay.\n   As described in Section 2, EPP includes features that\
    \ allow for\n   offline review of transform commands before the requested action\
    \ is\n   actually completed.  The server is required to notify the client when\n\
    \   offline processing of the action has been completed.  Notifications\n   can\
    \ be sent using an out-of-band mechanism that is not protected by\n   the mechanism\
    \ used to provide EPP transport security.  Notifications\n   sent without EPP's\
    \ transport-security services should be protected\n   using another mechanism\
    \ that provides an appropriate level of\n   protection for the notification.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   RFC 3730 is a product of the PROVREG working group,\
    \ which suggested\n   improvements and provided many invaluable comments.  The\
    \ author\n   wishes to acknowledge the efforts of WG chairs Edward Lewis and Jaap\n\
    \   Akkerhuis for their process and editorial contributions.  RFC 4930\n   and\
    \ this document are individual submissions, based on the work done\n   in RFC\
    \ 3730.\n   Specific suggestions that have been incorporated into this document\n\
    \   were provided by Chris Bason, Eric Brunner-Williams, Jordyn Buchanan,\n  \
    \ Roger Castillo Cortazar, Dave Crocker, Ayesha Damaraju, Sheer\n   El-Showk,\
    \ Patrik Faltstrom, James Gould, John Immordino, Dan Kohn,\n   Hong Liu, Klaus\
    \ Malorny, Dan Manley, Michael Mealling, Patrick\n   Mevzek, Andrew Newton, Budi\
    \ Rahardjo, Asbjorn Steira, Rick Wesson,\n   and Jay Westerdal.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2277]  Alvestrand, H., \"IETF Policy on Character Sets and\n \
    \             Languages\", BCP 18, RFC 2277, January 1998.\n   [RFC2914]  Floyd,\
    \ S., \"Congestion Control Principles\", BCP 41,\n              RFC 2914, September\
    \ 2000.\n   [RFC3629]  Yergeau, F., \"UTF-8, a transformation format of ISO\n\
    \              10646\", STD 63, RFC 3629, November 2003.\n   [RFC3688]  Mealling,\
    \ M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n              January 2004.\n\
    \   [RFC4646]  Phillips, A. and M. Davis, \"Tags for Identifying\n           \
    \   Languages\", BCP 47, RFC 4646, September 2006.\n   [W3C.REC-xml-20040204]\n\
    \              Sperberg-McQueen, C., Maler, E., Yergeau, F., Paoli, J.,\n    \
    \          and T. Bray, \"Extensible Markup Language (XML) 1.0 (Third\n      \
    \        Edition)\", World Wide Web Consortium FirstEdition REC-xml-\n       \
    \       20040204, February 2004,\n              <http://www.w3.org/TR/2004/REC-xml-20040204>.\n\
    \   [W3C.REC-xmlschema-1-20041028]\n              Maloney, M., Thompson, H., Mendelsohn,\
    \ N., and D. Beech,\n              \"XML Schema Part 1: Structures Second Edition\"\
    , World Wide\n              Web Consortium Recommendation REC-xmlschema-1-20041028,\n\
    \              October 2004,\n              <http://www.w3.org/TR/2004/REC-xmlschema-1-20041028>.\n\
    \   [W3C.REC-xmlschema-2-20041028]\n              Malhotra, A. and P. Biron, \"\
    XML Schema Part 2: Datatypes\n              Second Edition\", World Wide Web Consortium\n\
    \              Recommendation REC-xmlschema-2-20041028, October 2004,\n      \
    \        <http://www.w3.org/TR/2004/REC-xmlschema-2-20041028>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC0793]  Postel, J., \"Transmission Control\
    \ Protocol\", STD 7,\n              RFC 793, September 1981.\n   [RFC2781]  Hoffman,\
    \ P. and F. Yergeau, \"UTF-16, an encoding of ISO\n              10646\", RFC\
    \ 2781, February 2000.\n   [RFC3023]  Murata, M., St. Laurent, S., and D. Kohn,\
    \ \"XML Media\n              Types\", RFC 3023, January 2001.\n   [RFC3080]  Rose,\
    \ M., \"The Blocks Extensible Exchange Protocol Core\",\n              RFC 3080,\
    \ March 2001.\n   [RFC3375]  Hollenbeck, S., \"Generic Registry-Registrar Protocol\n\
    \              Requirements\", RFC 3375, September 2002.\n   [RFC4616]  Zeilenga,\
    \ K., \"The PLAIN Simple Authentication and\n              Security Layer (SASL)\
    \ Mechanism\", RFC 4616, August 2006.\n   [RFC4930]  Hollenbeck, S., \"Extensible\
    \ Provisioning Protocol (EPP)\",\n              RFC 4930, May 2007.\n   [RFC4960]\
    \  Stewart, R., \"Stream Control Transmission Protocol\",\n              RFC 4960,\
    \ September 2007.\n   [RFC5321]  Klensin, J., \"Simple Mail Transfer Protocol\"\
    , RFC 5321,\n              October 2008.\n   [W3C.REC-P3P-20020416]\n        \
    \      Marchiori, M., \"The Platform for Privacy Preferences 1.0\n           \
    \   (P3P1.0) Specification\", World Wide Web Consortium\n              Recommendation\
    \ REC-P3P-20020416, April 2002,\n              <http://www.w3.org/TR/2002/REC-P3P-20020416>.\n"
- title: Appendix A.  Object Mapping Template
  contents:
  - "Appendix A.  Object Mapping Template\n   This appendix describes a recommended\
    \ outline for documenting the EPP\n   mapping of an object.  Documents that describe\
    \ EPP object mappings\n   SHOULD describe the mapping in a format similar to the\
    \ one used here.\n   Additional sections are required if the object mapping is\
    \ written in\n   Internet-Draft or RFC format.\n   1. Introduction\n      Provide\
    \ an introduction that describes the object and gives an\n      overview of the\
    \ mapping to EPP.\n   2. Object Attributes\n      Describe the attributes associated\
    \ with the object, including\n      references to syntax specifications as appropriate.\
    \  Examples of\n      object attributes include a name or identifier and dates\n\
    \      associated with modification events.\n   3. EPP Command Mapping\n   3.1.\
    \  EPP Query Commands\n   3.1.1.  EPP <check> Command\n      Describe the object-specific\
    \ mappings required to implement the\n      EPP <check> command.  Include both\
    \ sample commands and sample\n      responses.\n   3.1.2.  EPP <info> Command\n\
    \      Describe the object-specific mappings required to implement the\n     \
    \ EPP <info> command.  Include both sample commands and sample\n      responses.\n\
    \   3.1.3.  EPP <poll> Command\n      Describe the object-specific mappings required\
    \ to implement the\n      EPP <poll> command.  Include both sample commands and\
    \ sample\n      responses.\n   3.1.4.  EPP <transfer> Command\n      Describe\
    \ the object-specific mappings required to implement the\n      EPP <transfer>\
    \ query command.  Include both sample commands and\n      sample responses.\n\
    \   3.2.  EPP Transform Commands\n   3.2.1.  EPP <create> Command\n      Describe\
    \ the object-specific mappings required to implement the\n      EPP <create> command.\
    \  Include both sample commands and sample\n      responses.  Describe the status\
    \ of the object with respect to\n      time, including expected client and server\
    \ behavior if a validity\n      period is used.\n   3.2.2.  EPP <delete> Command\n\
    \      Describe the object-specific mappings required to implement the\n     \
    \ EPP <delete> command.  Include both sample commands and sample\n      responses.\n\
    \   3.2.3.  EPP <renew> Command\n      Describe the object-specific mappings required\
    \ to implement the\n      EPP <renew> command.  Include both sample commands and\
    \ sample\n      responses.\n   3.2.4.  EPP <transfer> Command\n      Describe\
    \ the object-specific mappings required to implement the\n      EPP <transfer>\
    \ command.  Include both sample commands and sample\n      responses.\n   3.2.4.\
    \  EPP <update> Command\n      Describe the object-specific mappings required\
    \ to implement the\n      EPP <update> command.  Include both sample commands\
    \ and sample\n      responses.\n   4. Formal Syntax\n      Provide the XML schema\
    \ for the object mapping.  An XML DTD MUST\n      NOT be used, as DTDs do not\
    \ provide sufficient support for XML\n      namespaces and strong data typing.\n"
- title: 'Appendix B.  Media Type Registration: application/epp+xml'
  contents:
  - "Appendix B.  Media Type Registration: application/epp+xml\n   MIME media type\
    \ name: application\n   MIME subtype name: epp+xml\n   Required parameters: none\n\
    \   Optional parameters: Same as the charset parameter of application/xml\n  \
    \ as specified in [RFC3023].\n   Encoding considerations: Same as the encoding\
    \ considerations of\n   application/xml as specified in [RFC3023].\n   Security\
    \ considerations: This type has all of the security\n   considerations described\
    \ in [RFC3023] plus the considerations\n   specified in the Security Considerations\
    \ section of this document.\n   Interoperability considerations: XML has proven\
    \ to be interoperable\n   across WWW Distributed Authoring and Versioning (WebDAV)\
    \ clients and\n   servers, and for import and export from multiple XML authoring\
    \ tools.\n   For maximum interoperability, validating processors are recommended.\n\
    \   Although non-validating processors can be more efficient, they are\n   not\
    \ required to handle all features of XML.  For further information,\n   see Section\
    \ 2.9, \"Standalone Document Declaration\", and Section 5,\n   \"Conformance\"\
    , of [W3C.REC-xml-20040204].\n   Published specification: This document.\n   Applications\
    \ that use this media type: EPP is device-, platform-, and\n   vendor-neutral\
    \ and is supported by multiple service providers.\n   Additional information:\
    \ If used, magic numbers, fragment identifiers,\n   base URIs, and use of the\
    \ BOM should be as specified in [RFC3023].\n   Magic number(s): None.\n   File\
    \ extension(s): .xml\n   Macintosh file type code(s): \"TEXT\"\n   Person & email\
    \ address for further information: See the \"Author's\n   Address\" section of\
    \ this document.\n   Intended usage: COMMON\n   Author/Change controller: IETF\n"
- title: Appendix C.  Changes from RFC 4930
  contents:
  - "Appendix C.  Changes from RFC 4930\n   1.   Changed \"This document obsoletes\
    \ RFC 3730\" to \"This document\n        obsoletes RFC 4930\".\n   2.   Replaced\
    \ references to RFC 2595 with references to RFC 4616.\n   3.   Replaced references\
    \ to RFC 2821 with references to RFC 5321.\n   4.   Replaced references to RFC\
    \ 2960 with references to RFC 4960.\n   5.   Replaced references to RFC 3066 with\
    \ references to RFC 4646.\n   6.   Replaced references to RFC 3730 with references\
    \ to RFC 4930.\n   7.   Added \"A protocol client that is authorized to manage\
    \ an\n        existing object is described as a \"sponsoring\" client throughout\n\
    \        this document\" in Section 1.1.\n   8.   Changed \"This action MUST be\
    \ open to all authorized clients\" to\n        \"This command MUST be available\
    \ to all clients\" in the\n        descriptions of the <login> and <logout> commands.\n\
    \   9.   Changed \"Specific result codes are listed in the table below\" to\n\
    \        \"The complete list of valid result codes is enumerated below and\n \
    \       in the normative schema\" in Section 3.\n   10.  Added new paragraph to\
    \ Section 7 to give guidance on the need to\n        protect offline transaction\
    \ notices.\n   11.  Added reference to Appendix B in the IANA Considerations\n\
    \        section.\n   12.  Added BSD license text to XML schema section.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Scott Hollenbeck\n   VeriSign, Inc.\n   21345 Ridgetop Circle\n\
    \   Dulles, VA  20166-6503\n   US\n   EMail: shollenbeck@verisign.com\n"
