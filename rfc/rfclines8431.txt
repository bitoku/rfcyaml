Abstract This document defines a YANG data model for the Routing Information Base (RIB) that aligns with the Interface to the Routing System (I2RS) RIB information model.
The Interface to the Routing System (I2RS)
[RFC7921] provides read and write access to the information and state within the routing process that exists inside the routing elements; this is achieved via protocol message exchange between I2RS clients and I2RS agents associated with the routing system.
One of the functions of I2RS is to read and write data of the Routing Information Base (RIB).
[I2RS REQS] introduces a set of RIB use cases.
The RIB information model is defined in [RFC8430].
This document defines a YANG data model [RFC7950]
[RFC6991] for the RIB that satisfies the RIB use cases and aligns with the RIB information model.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
Remote Procedure Call IM: Information Model.
An abstract model of a conceptual domain, which is independent of a specific implementation or data representation.
Tree Diagrams Tree diagrams used in this document follow the notation defined in [RFC8340].
The following figure shows an overview of the structure tree of the ietf i2rs rib module.
To give a whole view of the structure tree, some details of the tree are omitted.
The relevant details are introduced in the subsequent subsections.
if:interface ref  rw router id?
dotted quad  rw lookup limit?
rw rib list  [name]  rw name
string  rw address family address family definition
rw route vendor attributes  rw nexthop list
ro nexthop state nexthop state definition
n route change  ro rib name
[route change reason]  ro route change reason    route change reason definition Figure 1: Overview of I2RS RIB Module Structure 2.1.
RIB Capability RIB capability negotiation is very important because not all of the hardware will be able to support all kinds of nexthops, and there might be a limitation on how many levels of lookup can be practically performed.
Therefore, a RIB data model needs to specify a way for an external entity to learn about the functional capabilities of a network device.
At the same time, nexthop chains can be used to specify multiple headers over a packet before that particular packet is forwarded.
Not every network device will be able to support all kinds of nexthop chains along with the arbitrary number of headers that are chained together.
The RIB data model needs a way to expose the nexthop chaining capability supported by a given network device.
This module uses the feature and if feature statements to achieve above capability advertisement.
Routing Instance and RIB A routing instance, in the context of the RIB information model, is a collection of RIBs, interfaces, and routing protocol parameters.
A routing instance creates a logical slice of the router and can allow multiple different logical slices, across a set of routers, to communicate with each other.
The routing protocol parameters control the information available in the RIBs.
More details about a routing instance can be found in Section 2.2 of [RFC8430].
For a routing instance, there can be multiple RIBs.
Therefore, this model uses "list" to express the RIBs.
The structure tree is shown below:  rw routing instance
if:interface ref  rw router id?
dotted quad  rw lookup limit?
refer to Section 2.3 Figure 2:
Route A route is essentially a match condition and an action following that match.
The match condition specifies the kind of route (e.g., IPv4, MPLS, Media Access Control (MAC), Interface, etc.)
and the set of fields to match on.
A route MUST contain the ROUTE PREFERENCE attribute (see Section 2.3 of [RFC8430]).
In addition, a route MUST associate with the following status attributes in responses to a RIB writing/reading operation:
Active: Indicates whether a route has at least one fully resolved nexthop and is therefore eligible for installation in the FIB.
Indicates whether the route got installed in the FIB.
Reason: Indicates the specific reason that caused the failure, e.g., "Not authorized".
In addition, a route can be associated with one or more optional route attributes (e.g., route vendor attributes).
A RIB will have a number of routes, so the routes are expressed as a list under a specific RIB.
Each RIB has its own route list.
Figure 3: Routes Structure 2.4.
A nexthop represents an object resulting from a route lookup.
As illustrated in Figure 4 of [RFC8430], to support various use cases (e.g., load balancing, protection, multicast, or a combination of them), the nexthop is modeled as a multilevel structure and supports recursion.
The first level of the nexthop includes the following four types:  Base:
The "base" nexthop is the foundation of all other nexthop types.
IPv6 address    egress interface    egress interface with IPv4 address    egress interface with IPv6 address
egress interface with MAC address    logical tunnel    tunnel encapsulation    tunnel decapsulation    rib name
Chain: The "chain" nexthop provides a way to perform multiple operations on a packet by logically combining them.
The "load balance" nexthop is designed for a load  balance case where it normally will have multiple weighted nexthops.
The "protection" nexthop is designed for a protection scenario where it normally will have primary and standby nexthop.
The "replicate" nexthop is designed for multiple destinations forwarding.
The structure tree of nexthop is shown in the following figures.
rw nexthop lb weight nexthop lb weight definition
Nexthop Structure Figure 5 (as shown below) is a subtree of nexthop.
It's under the nexthop base node and shows the structure of the "base" nexthop.
rw egress interface ipv6 address
rw dest ipv4 address inet:
rw src ipv6 address inet:
rw dest ipv6 address inet:
rw src ipv4 address inet:
rw src ipv6 address inet:
rw dest ipv6 address inet:
rw src ipv4 address inet:
rw dest ipv6 address inet:
:(tunnel decapsulation nexthop) {nexthop tunnel}?
This module defines the following RPC operations:
Add a RIB to a routing instance.
The following are passed as the input parameters: the name of the RIB, the address family of the RIB, and (optionally) whether the RPF check is enabled.
Delete a RIB from a routing instance.
When a RIB is deleted, all routes installed in the RIB will be deleted.
A rib  name is passed as the input parameter.
Add a route or a set of routes to a RIB.
The following are passed as the input parameters: the name of the RIB, the route prefix(es), the route attributes, the route vendor attributes, the nexthop, and the "whether to return failure details" indication.
Before calling the route add rpc, it is required to call the nh  add rpc to create and/or return the nexthop identifier.
However, in situations when the nexthop already exists and the nexthop
id is known, this action is not expected.
Delete a route or a set of routes from a RIB.
The following are passed as the input parameters: the name of the RIB, the route prefix(es), and the "whether to return failure details" indication.
route update: Update a route or a set of routes.
The following are passed as the input parameters: the name of the RIB, the route prefix(es), the route attributes, the route vendor attributes, or the nexthop.
The match conditions can be either route prefix(es), route attributes, route vendor attributes, or nexthops.
The update actions include the following: update the nexthops, update the route attributes, and update the route vendor attributes.
Add a nexthop to a RIB.
The following are passed as the input parameters: the name of the RIB and the nexthop.
The network node is required to allocate a nexthop identifier to the nexthop.
The outputs include the result of the nexthop add operation.
when success, a nexthop identifier will be returned to the I2RS client)
false failed (when failed, the I2RS agent may return the specific reason that caused the failure)
Delete a nexthop from a RIB.
The following are passed as the input parameters: the name of the RIB and a nexthop or nexthop identifier.
The structure tree of rpcs is shown in following figure.
Notifications Asynchronous notifications are sent by the RIB manager of a network device to an external entity when some event triggers on the network device.
An implementation of this RIB data model MUST support sending two kinds of asynchronous notifications.
Installed (indicates whether the route got installed in the FIB) Active (indicates whether a route has at least one fully resolved nexthop and is therefore eligible for installation in the FIB)
Reason (e.g., "Not authorized") 2.
Nexthop resolution status notification Nexthops can be fully resolved or unresolved.
A resolved nexthop has an adequate level of information to send the outgoing packet towards the destination by forwarding it on an interface to a directly connected neighbor.
An unresolved nexthop is something that requires the RIB manager to determine the final resolved nexthop.
In one example, a nexthop could be an IP address.
The RIB manager would resolve how to reach that IP address, e.g., by checking if that particular IP address is reachable by regular IP forwarding, by an MPLS tunnel, or by both.
If the RIB manager cannot resolve the nexthop, then the nexthop remains in an unresolved state and is NOT a suitable candidate for installation in the FIB.
An implementation of this RIB data model MUST support sending route  change notifications whenever a route transitions between the following states:  from the active state to the inactive state  from the inactive state to the active state  from the installed state to the uninstalled state  from the uninstalled state to the installed state
A single notification MAY be used when a route transitions from inactive/uninstalled to active/installed or in the other direction.
The structure tree of notifications is shown in the following figure.
notifications:  n nexthop resolution status change
ro nexthop state nexthop state definition
n route change  ro rib name
route change reason definition Figure 7:
This YANG module references [RFC2784],
> file "ietf i2rs rib@2018
; description "This module defines a YANG data model for Routing Information Base (RIB) that aligns with the I2RS RIB information model.
IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
; } feature mpls tunnel { description "
; } identity tunnel decapsulation action { description "Base identity from which all tunnel decapsulation actions are derived.
Tunnel decapsulation actions include ipv4 decapsulation (to decapsulate an IPv4 tunnel)
; } typedef ttl action definition { type identityref { base ttl action
; } identity hop limit no action { base hop limit action; description "Do nothing regarding the hop limit."
; } identity hop limit copy to inner { base hop limit action; description "Copy the hop limit of the outer header to the inner header."
This indicates that the network device should drop the packet and increment a drop counter."
; } identity discard with error { base special nexthop; description "
All locally destined traffic SHOULD be throttled to avoid a denial of service attack on the router's control plane.
An optional rate limiter can be specified to indicate how to throttle traffic destined for the control plane."
ip src dest { base ip route match type; description "Source and Destination route match type"; }
typedef ip route match type definition { type identityref { base ip route match type; } description "IP route match type definition."
; } identity address family { description "Base identity from which all RIB address families are derived."
; } identity route state { description "Base identity from which all route states are derived."
; } typedef route change reason definition { type identityref { base route change reason; } description "Route change reason definition."
It is an integer value between 1 and 99.
To download N nexthops to the FIB, the N nexthops with the lowest value are selected.
If there are more than N nexthops that have the same preference, an implementation of the I2RS client should select N nexthops and download them.
As for how to select the nexthops, this is left to the implementations."
Each list member SHOULD be assigned a weight between 1 and 99.
The weight determines the proportion of traffic to be sent over a nexthop used for forwarding as a ratio of the weight of this nexthop divided by the sum of the weights of all the nexthops of this route that are used for forwarding.
To perform equal load balancing, one MAY specify a weight of 0 for all the member nexthops.
The value 0 is reserved for equal load balancing and, if applied, MUST be applied to all member nexthops.
Note that the weight of 0 is special because of historical reasons.
It's typically used in hardware devices to signify ECMP."
and the set of fields to match on."; choice route type { description "Route types: IPv4, IPv6, MPLS, MAC, etc."; case ipv4 { description "IPv4 route case."; container ipv4 { description "IPv4 route match."; choice ip route match type { description "IP route match type options: match source, or match destination, or match source and destination."; case dest ipv4 address { leaf dest ipv4 prefix { type inet:
ipv4 prefix; mandatory true; description "An IPv4 destination address as the match.";
} } case src ipv4 address { leaf src ipv4 prefix { type inet:
A combination of an IPv4 source and an IPv4 destination address as the match."; leaf dest ipv4 prefix { type inet:ipv4 prefix; mandatory true
; choice ip route match type { description "IP route match type options: match source, match destination, or match source and destination."; case dest ipv6 address { leaf dest ipv6 prefix { type inet:ipv6 prefix; mandatory true; description "An IPv6 destination address as the match.";
} } case src ipv6 address { leaf src
ipv6 prefix { type inet:ipv6 prefix; mandatory true
A nexthop list member is a nexthop."
id { type uint32; mandatory true; description "A nexthop identifier that points to a nexthop list member.
A nexthop list member is a nexthop."
; } leaf nexthop preference { type nexthop preference definition; mandatory true; description "Nexthop preference is used for protection schemes.
It is an integer value between 1 and 99.
Lower values are more preferred.
A nexthop list member is a nexthop."
; mandatory true; description "Name of the outgoing interface."
; mandatory true; description "Name of the outgoing interface."
; } leaf ipv6 address { type inet:ipv6 address; mandatory true; description "The nexthop points to an interface with an IPv6 address."
The nexthop is an egress interface and an IP address.
The egress interface must be an Ethernet interface.
An optional egress interface can be chained to the tunnel encapsulation to indicate which interface to send the packet out on.
This is to specify the decapsulation of a tunnel header."
; container logical tunnel { uses logical tunnel; description "
This can be an MPLS Label Switched Path (LSP) or a GRE tunnel (or others as defined in this document) that is represented by a unique identifier (e.g., name).
This is a way to perform chained lookups."
route vendor attributes { description "Route vendor attributes."
} leaf vxlan identifier { type uint32; mandatory true
d"; description "Label operations."; leaf label oper
id { type uint32; description "An optional identifier that points to a label operation."
; choice tunnel type { description "Tunnel options for nexthops."
; case ipv4 { if feature "ipv4 tunnel"; container ipv4 header { uses ipv4 header; description "IPv4 header."
The TTL actions: no action or copy to inner header.";
This is a numerical value that allows for comparing routes from different protocols.
Static configuration is also considered a protocol for the purpose of this field.
It is also known as administrative distance.
Future documents should specify these attributes by augmenting the cases in this choice."
This MUST be unique across all routing instances in a given network device."
; } list interface list { key "name"; description "
This represents the list of interfaces associated with this routing instance.
The interface list helps constrain the boundaries of packet forwarding.
Packets coming on these interfaces are directly associated with the given routing instance.
The interface list contains a list of identifiers with each identifier uniquely identifying an interface."; leaf name { type if:interface ref; description "A reference to the name of a network layer interface."
A limit on how many levels of a lookup can be performed."
An RPF check is used to prevent spoofing and limit malicious traffic."
This is a list that maintains the nexthops added to the RIB.
description "Each RIB can be optionally associated with an ENABLE IP RPF CHECK attribute that enables RPF checks on all IP routes in that RIB.
; description "Return the result of the rib delete operation.
It is an array that includes the route index and error code of the failed route."
Reserved 1 Trying to add a repeat route 2
To add a route or a list of routes to a RIB"; input { leaf return failure detail { type boolean; default "false"; description "Whether to return the failure detail.
true  return the failure detail false do not return the failure detail
The list of routes to be added."; uses route prefix; container route attributes { uses route attributes; description "The route attributes."
; } container route vendor attributes { if feature "route vendor attributes"; uses route vendor attributes; description "The route vendor attributes."
true  return the failure detail false do not return the failure detail
update the route attributes 3.
update the route vendor attributes"; choice update options { description "Update options: 1.
update the route attributes 3.
update the route vendor attributes"
; case update nexthop { container updated nexthop { uses nexthop; description "The nexthop used for updating."
The match conditions, which could be: a. route prefix, b. route attributes, or c. nexthop.
The update parameters to be used: a. new nexthop, b. new route attributes, or c. nexthop.
Actions: 1. update the nexthop 2.
update the route attributes The outputs: success count the number of routes updated failed count the number of routes fail to update failure detail the detail failure info "; input { leaf return failure detail { type boolean; default "false"; description "Whether to return the failure detail.
true  return the failure detail false do not return the failure detail
update the route attributes 3.
update the route vendor attributes"; uses route update options
attributes condition"; container input route vendor attributes { description "The vendor route attributes are used for matching."; uses route vendor attributes; } container update parameters vendor { description "
update the route attributes 3.
update the route vendor attributes"; uses route update options
; uses nexthop; } container update parameters nexthop { description "Update options: 1. update the nexthop 2.
update the route attributes 3.
update the route vendor attributes"; uses route update options; }
Inputs parameters: 1. rib name 2.
: Add the nexthop to the RIB Outputs: 1.
Operation result: true  success false failed 2.
notification nexthop resolution status change { description "Nexthop resolution status (resolved/unresolved) notification."
mandatory true; description "Indicates whether the route got installed in the FIB."
; } leaf route state { type route state definition; mandatory true; description "Indicates whether a route is active or inactive."
; } list route change reasons { key "route change reason"; description "The reasons that cause the route change.
This document registers a URI in the "ns" registry within the "IETF XML Registry" [RFC3688]:
i2rs rib Registrant Contact: The IESG.
N/A, the requested URI is an XML namespace.
This document registers a YANG module in the "YANG Module Names" registry [RFC7950]:
The YANG module specified in this document defines a schema for data that is designed to be accessed via network management protocols such as NETCONF [RFC6241] or RESTCONF [RFC8040].
The lowest NETCONF layer is the secure transport layer, and the mandatory to implement secure transport is Secure Shell (SSH) [RFC6242].
The lowest RESTCONF layer is HTTPS, and the mandatory to implement secure transport is TLS [RFC8446].
The NETCONF access control model [RFC8341] provides the means to restrict access for particular NETCONF or RESTCONF users to a preconfigured subset of all available NETCONF or RESTCONF protocol operations and content.
The YANG module defines information that can be configurable in certain instances, for example, a RIB, a route, a nexthop can be created or deleted by client applications; the YANG module also defines RPCs that can be used by client applications to add/delete RIBs, routes, and nexthops.
In such cases, a malicious client could attempt to remove, add, or update a RIB, a route, or a nexthop by creating or deleting corresponding elements in the RIB, route, and nexthop lists, respectively.
Removing a RIB or a route could lead to disruption or impact in performance of a service; updating a route may lead to suboptimal path and degradation of service levels as well as possibly disruption of service.
For those reasons, it is important that the NETCONF access control model is vigorously applied to prevent misconfiguration by unauthorized clients.
There are a number of data nodes defined in this YANG module that are writable/creatable/deletable (i.e., config true, which is the default).
These data nodes may be considered sensitive or vulnerable in some network environments.
Write operations (e.g., edit config) to these data nodes without proper protection can have a negative effect on network operations.
These are the subtrees and data nodes and their sensitivity/vulnerability:
A malicious client could attempt to remove a RIB from a routing instance, for example, in order to sabotage the services provided by the RIB or to add a RIB to a routing instance (hence, to inject unauthorized traffic into the nexthop).
route: A malicious client could attempt to remove or add a route from/to a RIB, for example, in order to sabotage the services provided by the RIB.
A malicious client could attempt to remove or add a nexthop from/to RIB, which may lead to a suboptimal path, a degradation of service levels, and a possible disruption of service.
The following individuals also contributed to this document.
Zekun He, Tencent Holdings Ltd.
Sujian Lu, Tencent Holdings Ltd.
