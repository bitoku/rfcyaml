- title: __initial_text__
  contents:
  - '     Calendaring Extensions to WebDAV (CalDAV): Managed Attachments

    '
- title: Abstract
  contents:
  - "Abstract\n   This specification adds an extension to the Calendaring Extensions\
    \ to\n   WebDAV (CalDAV) to allow attachments associated with iCalendar data\n\
    \   to be stored and managed on the server.\n   This specification documents existing\
    \ code deployed by multiple\n   vendors.  It is published as an Informational\
    \ specification rather\n   than Standards Track due to its noncompliance with\
    \ multiple best\n   current practices of HTTP.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are candidates for any level of Internet\n\
    \   Standard; see Section 2 of RFC 7841.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   https://www.rfc-editor.org/info/rfc8607.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n     1.1.  Rationale for Informational Status  . . . . . . .\
    \ . . . .   4\n   2.  Conventions Used in This Document . . . . . . . . . . .\
    \ . . .   4\n   3.  Overview  . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .   4\n     3.1.  Requirements  . . . . . . . . . . . . . . . . . . . . .\
    \ .   5\n     3.2.  Discovering Support for Managed Attachments . . . . . . .\
    \   5\n     3.3.  POST Request for Managing Attachments . . . . . . . . . .  \
    \ 6\n       3.3.1.  action Query Parameter  . . . . . . . . . . . . . . .   6\n\
    \       3.3.2.  rid Query Parameter . . . . . . . . . . . . . . . . .   6\n  \
    \     3.3.3.  managed-id Query Parameter  . . . . . . . . . . . . .   7\n    \
    \ 3.4.  Adding Attachments  . . . . . . . . . . . . . . . . . . .   7\n     3.5.\
    \  Updating Attachments  . . . . . . . . . . . . . . . . . .  10\n     3.6.  Removing\
    \ Attachments via POST . . . . . . . . . . . . . .  13\n     3.7.  Adding Existing\
    \ Managed Attachments via PUT . . . . . . .  15\n     3.8.  Updating Attachments\
    \ via PUT  . . . . . . . . . . . . . .  15\n     3.9.  Removing Attachments via\
    \ PUT  . . . . . . . . . . . . . .  15\n     3.10. Retrieving Attachments  . .\
    \ . . . . . . . . . . . . . . .  15\n     3.11. Error Handling  . . . . . . .\
    \ . . . . . . . . . . . . . .  16\n     3.12. Additional Considerations . . .\
    \ . . . . . . . . . . . . .  17\n       3.12.1.  Quotas . . . . . . . . . . .\
    \ . . . . . . . . . . . .  17\n       3.12.2.  Access Control . . . . . . . .\
    \ . . . . . . . . . . .  17\n       3.12.3.  Redirects  . . . . . . . . . . .\
    \ . . . . . . . . . .  18\n       3.12.4.  Processing Time  . . . . . . . . .\
    \ . . . . . . . . .  18\n       3.12.5.  Automatic Cleanup by Servers . . . .\
    \ . . . . . . . .  18\n       3.12.6.  Sending Scheduling Messages with Attachments\
    \ . . . .  18\n       3.12.7.  Migrating Calendar Data  . . . . . . . . . . .\
    \ . . .  18\n   4.  Modifications to iCalendar Syntax . . . . . . . . . . . .\
    \ . .  19\n     4.1.  SIZE Property Parameter . . . . . . . . . . . . . . . .\
    \ .  19\n     4.2.  FILENAME Property Parameter . . . . . . . . . . . . . . .\
    \  19\n     4.3.  MANAGED-ID Property Parameter . . . . . . . . . . . . . .  20\n\
    \   5.  Additional Message Header Fields  . . . . . . . . . . . . . .  20\n  \
    \   5.1.  Cal-Managed-ID Response Header Field  . . . . . . . . . .  20\n   6.\
    \  Additional WebDAV Properties  . . . . . . . . . . . . . . . .  21\n     6.1.\
    \  CALDAV:managed-attachments-server-URL Property  . . . . .  21\n     6.2.  CALDAV:max-attachment-size\
    \ Property . . . . . . . . . . .  22\n     6.3.  CALDAV:max-attachments-per-resource\
    \ Property  . . . . . .  23\n   7.  Security Considerations . . . . . . . . .\
    \ . . . . . . . . . .  24\n   8.  IANA Considerations . . . . . . . . . . . .\
    \ . . . . . . . . .  24\n     8.1.  Parameter Registrations . . . . . . . . .\
    \ . . . . . . . .  24\n     8.2.  Message Header Field Registrations  . . . .\
    \ . . . . . . .  25\n       8.2.1.  Cal-Managed-ID  . . . . . . . . . . . . .\
    \ . . . . . .  25\n   9.  References  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  25\n     9.1.  Normative References  . . . . . . . . . . . . . .\
    \ . . . .  25\n     9.2.  Informative References  . . . . . . . . . . . . . .\
    \ . . .  27\n   Appendix A.  Example Involving Recurring Events . . . . . . .\
    \ . .  28\n   Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .  34\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .\
    \  34\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The iCalendar [RFC5545] data format is used to represent\
    \ calendar\n   data and is used with iCalendar Transport-independent\n   Interoperability\
    \ Protocol (iTIP) [RFC5546] to handle scheduling\n   operations between calendar\
    \ users.\n   [RFC4791] defines the Calendaring Extensions to WebDAV (CalDAV),\n\
    \   based on HTTP [RFC7230], for accessing calendar data stored on a\n   server.\n\
    \   Calendar users often want to include attachments with their calendar\n   data\
    \ events or tasks (for example, a copy of a presentation or the\n   meeting agenda).\
    \ iCalendar provides an \"ATTACH\" property whose value\n   is either the inline\
    \ Base64 encoded attachment data or a URL\n   specifying the location of the attachment\
    \ data.\n   Use of inline attachment data is not ideal with CalDAV because the\n\
    \   data would need to be uploaded to the server each time a change to\n   the\
    \ calendar data is made, even minor changes such as a change to the\n   summary.\
    \  Whilst a client could choose to use a URL value instead,\n   the problem then\
    \ becomes where and how the client discovers an\n   appropriate URL to use and\
    \ how it ensures that only those attendees\n   listed in the event or task are\
    \ able to access it.\n   This specification solves this problem by having the\
    \ client send the\n   attachment to the server, separately from the iCalendar\
    \ data, and\n   having the server add appropriate \"ATTACH\" properties in the\n\
    \   iCalendar data as well as manage access privileges.  The server can\n   also\
    \ provide additional information to the client about each\n   attachment in the\
    \ iCalendar data, such as the size and an identifier.\n"
- title: 1.1.  Rationale for Informational Status
  contents:
  - "1.1.  Rationale for Informational Status\n   Although this extension to CalDAV\
    \ has wide deployment, its design\n   does not comply with some of the best current\
    \ practices of HTTP,\n   namely:\n   o  All operations on attachments are modeled\
    \ as HTTP POST operations,\n      where the actual type of operation is specified\
    \ using a query\n      parameter instead of using separate HTTP POST, PUT, and\
    \ DELETE\n      methods where appropriate.\n   o  Specific query strings are hardwired\
    \ into the protocol in\n      violation of Section 2.4 of [RFC7320].\n   Additionally,\
    \ this extension misuses the Content-Disposition header\n   field [RFC6266] as\
    \ a request header field to convey a filename for an\n   attachment rather than\
    \ using an existing request header field\n   suitable for that purpose, such as\
    \ \"Slug\" (see Section 9.7 of\n   [RFC5023]).\n   Rather than creating interoperability\
    \ problems with deployed code by\n   updating the design of this extension to\
    \ be compliant with best\n   current practices and to allow this specification\
    \ to be placed on the\n   Standards Track, it was decided to simply document how\
    \ existing\n   implementations interoperate and to publish the document as\n \
    \  Informational.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be\
    \ interpreted as described in\n   BCP 14 [RFC2119] [RFC8174] when, and only when,\
    \ they appear in all\n   capitals, as shown here.\n   The notation used in this\
    \ memo is the ABNF notation of [RFC5234] as\n   used by iCalendar [RFC5545]. \
    \ Any syntax elements shown below that\n   are not explicitly defined in this\
    \ specification come from iCalendar\n   [RFC5545].\n"
- title: 3.  Overview
  contents:
  - "3.  Overview\n   There are four main operations a client needs to perform with\n\
    \   attachments for calendar data: add, update, remove, and retrieve.\n   The\
    \ first three operations are carried out by the client issuing an\n   HTTP POST\
    \ request on the calendar object resource to which the\n   attachment is associated\
    \ and specifying the appropriate \"action\"\n   query parameter (see Section 3.3).\
    \  In the case of the remove\n   operation, the client can alternatively directly\
    \ update the calendar\n   object resource and remove the relevant \"ATTACH\" properties\
    \ (see\n   Section 3.9).  The retrieve operation is accomplished by simply\n \
    \  issuing an HTTP GET request targeting the attachment URI specified by\n   the\
    \ calendar resource's \"ATTACH\" property (see Section 3.10).\n   iCalendar data\
    \ stored in a CalDAV calendar object resource can\n   contain multiple components\
    \ when recurrences are involved.  In such a\n   situation, the client needs to\
    \ be able to target a specific\n   recurrence instance or multiple instances when\
    \ adding or deleting\n   attachments.  As a result, the POST request needs to\
    \ provide a way\n   for the client to specify which recurrence instances should\
    \ be\n   targeted for the attachment operation.  This is accomplished through\n\
    \   use of additional query parameters on the POST Request-URI.\n"
- title: 3.1.  Requirements
  contents:
  - "3.1.  Requirements\n   A server that supports the features described in this\
    \ specification\n   is REQUIRED to support the CalDAV \"calendar-access\" [RFC4791]\n\
    \   features.\n   In addition, such a server SHOULD support the \"return=representation\"\
    \n   Prefer header field [RFC7240] preference on successful HTTP PUT and\n   POST\
    \ requests targeting existing calendar object resources by\n   returning the new\
    \ representation of that calendar resource (including\n   its new ETag header\
    \ field value) in the response.\n"
- title: 3.2.  Discovering Support for Managed Attachments
  contents:
  - "3.2.  Discovering Support for Managed Attachments\n   A server supporting the\
    \ features described in this specification MUST\n   include \"calendar-managed-attachments\"\
    \ as a token in the DAV response\n   header field (as defined in Section 10.1\
    \ of [RFC4918]) from an\n   OPTIONS request on a calendar home collection.\n \
    \  A server might choose not to support the storing of managed\n   attachments\
    \ on a per-recurrence-instance basis (i.e., they can only\n   be added to all\
    \ instances as a whole).  If that is the case, the\n   server MUST also include\
    \ \"calendar-managed-attachments-no-recurrence\"\n   as a token in the DAV response\
    \ header field from an OPTIONS request\n   on a calendar home collection.  When\
    \ that field is present, clients\n   MUST NOT attempt any managed attachment operations\
    \ that target\n   specific recurrence instances.\n"
- title: 3.3.  POST Request for Managing Attachments
  contents:
  - "3.3.  POST Request for Managing Attachments\n   An HTTP POST request is used\
    \ to add, update, or remove attachments.\n   These requests are subject to the\
    \ preconditions listed in\n   Section 3.11.  The Request-URI will contain various\
    \ query parameters\n   to specify the behavior.\n"
- title: 3.3.1.  action Query Parameter
  contents:
  - "3.3.1.  action Query Parameter\n   The \"action\" query parameter is used to\
    \ identify which attachment\n   operation the client is requesting.  This parameter\
    \ MUST be present\n   once on each POST request used to manage attachments.  One\
    \ of these\n   three values MUST be used:\n   attachment-add:  Indicates an operation\
    \ that is adding an attachment\n      to a calendar object resource.  See Section\
    \ 3.4 for more details.\n   attachment-update:  Indicates an operation that is\
    \ updating an\n      existing attachment on a calendar object resource.  See\n\
    \      Section 3.5 for more details.\n   attachment-remove:  Indicates an operation\
    \ that is removing an\n      attachment from a calendar object resource.  See\
    \ Section 3.6 for\n      more details.\n   Example:\n   https://calendar.example.com/events/1.ics?action=attachment-add\n"
- title: 3.3.2.  rid Query Parameter
  contents:
  - "3.3.2.  rid Query Parameter\n   The \"rid\" query parameter is used to identify\
    \ which recurrence\n   instances are being targeted by the client for the attachment\n\
    \   operation.  This query parameter MUST contain one or more items,\n   separated\
    \ by commas (denoted in ASCII as \"0x2C\").  The item values\n   can be in one\
    \ of two forms:\n   Master instance:  The value \"M\" (case insensitive) refers\
    \ to the\n      \"master\" recurrence instance, i.e., the component that does\
    \ not\n      include a \"RECURRENCE-ID\" property.  This item MUST be present\n\
    \      only once.\n   Specific instance:  A specific iCalendar instance is targeted\
    \ by\n      using its \"RECURRENCE-ID\" value as the item value.  That value\n\
    \      MUST correspond to the \"RECURRENCE-ID\" value as stored in the\n     \
    \ calendar object resource (i.e., without any conversion to UTC).\n      If multiple\
    \ items of this form are used, they MUST be unique\n      values.  For example,\
    \ to target a recurrence defined by property\n      RECURRENCE-ID;TZID=America/Montreal:20111022T160000,\
    \ the query\n      parameter rid=20111022T160000 would be used.\n   If the \"\
    rid\" query parameter is not present, all recurrence instances\n   in the calendar\
    \ object resource are targeted.\n   The \"rid\" query parameter MUST NOT be present\
    \ in the case of an\n   update operation, or if the server chooses not to support\
    \ per-\n   recurrence instance managed attachments (see Section 3.2).\n   Example\
    \ (targeting the master instance and a specific overridden\n   instance):\n  \
    \ https://calendar.example.com/events/1.ics?\n     action=attachment-add&rid=M,20111022T160000\n"
- title: 3.3.3.  managed-id Query Parameter
  contents:
  - "3.3.3.  managed-id Query Parameter\n   The \"managed-id\" query parameter is\
    \ used to identify which \"ATTACH\"\n   property is being updated or removed.\
    \  The value of this query\n   parameter MUST match the \"MANAGED-ID\" (Section\
    \ 4.3) property\n   parameter value on the \"ATTACH\" property in the calendar\
    \ object\n   resource instance(s) targeted by the request.\n   The \"managed-id\"\
    \ query parameter MUST NOT be present in the case of\n   an add operation.\n \
    \  Example:\n   https://calendar.example.com/events/1.ics?\n     action=attachment-update&managed-id=aUNhbGVuZGFy\n"
- title: 3.4.  Adding Attachments
  contents:
  - "3.4.  Adding Attachments\n   To add an attachment to an existing calendar object\
    \ resource, the\n   following needs to occur:\n   1.  The client issues a POST\
    \ request targeted at the calendar object\n       resource structured as follows:\n\
    \       A.  The Request-URI will include an \"action\" query parameter with\n\
    \           the value \"attachment-add\" (see Section 3.3.1).\n       B.  If all\
    \ recurrence instances are having an attachment added,\n           the \"rid\"\
    \ query parameter is not present in the Request-URI.\n           If one or more\
    \ specific recurrence instances are targeted,\n           then the Request-URI\
    \ will include a \"rid\" query parameter\n           containing the list of instances\
    \ (see Section 3.3.2).\n       C.  The body of the request contains the data for\
    \ the attachment.\n       D.  The client MUST include a valid Content-Type header\
    \ field\n           describing the media type of the attachment (as required by\n\
    \           HTTP).\n       E.  The client SHOULD include a Content-Disposition\
    \ header field\n           [RFC6266] with a \"type\" parameter set to \"attachment\"\
    , and a\n           \"filename\" parameter that indicates the name of the\n  \
    \         attachment.  Note that the use of Content-Disposition as a\n       \
    \    request header field is nonstandard and specific to this\n           protocol.\n\
    \       F.  The client MAY include a Prefer header field [RFC7240] with\n    \
    \       the \"return=representation\" preference to request that the\n       \
    \    modified calendar object resource be returned as the body of\n          \
    \ a successful response to the POST request.\n   2.  When the server receives\
    \ the POST request, it does the following:\n       A.  Validates that any recurrence\
    \ instances referred to via the\n           \"rid\" query parameter are valid\
    \ for the calendar object\n           resource being targeted.\n       B.  Stores\
    \ the supplied attachment data into a resource and\n           generates an appropriate\
    \ URI for clients to access the\n           resource.\n       C.  For each affected\
    \ recurrence instance in the calendar object\n           resource targeted by\
    \ the request, adds an \"ATTACH\" property\n           whose value is the URI\
    \ of the stored attachment.  The\n           \"ATTACH\" property MUST contain\
    \ a \"MANAGED-ID\" property\n           parameter whose value is a unique identifier\
    \ (within the\n           context of the server as a whole).  The \"ATTACH\" property\n\
    \           SHOULD contain an \"FMTTYPE\" property parameter whose value\n   \
    \        matches the Content-Type header field value from the request.\n     \
    \      The \"ATTACH\" property SHOULD contain a \"FILENAME\" property\n      \
    \     parameter whose value matches the value of the Content-\n           Disposition\
    \ header field \"filename\" parameter value from the\n           request, taking\
    \ into account the restrictions expressed in\n           Section 4.2.  The \"\
    ATTACH\" property SHOULD include a \"SIZE\"\n           property parameter whose\
    \ value represents the size in octets\n           of the attachment.  If a specified\
    \ recurrence instance does\n           not have a matching component in the calendar\
    \ object\n           resource, then the server MUST modify the calendar object\n\
    \           resource to include an overridden component with the\n           appropriate\
    \ \"RECURRENCE-ID\" property.\n       D.  Upon successful creation of the attachment\
    \ resource, and\n           modification of the targeted calendar object resource,\
    \ it\n           MUST return an appropriate HTTP success status response and\n\
    \           include a \"Cal-Managed-ID\" header field containing the\n       \
    \    \"MANAGED-ID\" property parameter value of the newly created\n          \
    \ \"ATTACH\" property.  The client can use the \"Cal-Managed-ID\"\n          \
    \ header field value to correlate the attachment with \"ATTACH\"\n           properties\
    \ added to the calendar object resource.  If the\n           client included a\
    \ Prefer header field with the\n           \"return=representation\" preference\
    \ in the request, the server\n           SHOULD return the modified calendar object\
    \ resource as the\n           body of the response.  Otherwise, the server can\
    \ expect that\n           the client will reload the calendar object resource\
    \ with a\n           subsequent GET request to refresh any local cache.\n   In\
    \ the following example, the client adds a new attachment to a\n   nonrecurring\
    \ event and asks the server (via the Prefer header field\n   [RFC7240]) to return\
    \ the modified version of that event in the\n   response.\n   >> Request <<\n\
    \   POST /events/64.ics?action=attachment-add HTTP/1.1\n   Host: cal.example.com\n\
    \   Content-Type: text/html; charset=\"utf-8\"\n   Content-Disposition:attachment;filename=agenda.html\n\
    \   Content-Length: 59\n   Prefer: return=representation\n   <html>\n     <body>\n\
    \       <h1>Agenda</h1>\n     </body>\n   </html>\n   >> Response <<\n   HTTP/1.1\
    \ 201 Created\n   Content-Type: text/calendar; charset=\"utf-8\"\n   Content-Length:\
    \ 371\n   Content-Location: https://cal.example.com/events/64.ics\n   ETag: \"\
    123456789-000-111\"\n   Cal-Managed-ID: 97S\n   BEGIN:VCALENDAR\n   VERSION:2.0\n\
    \   PRODID:-//Example Corp.//CalDAV Server//EN\n   BEGIN:VEVENT\n   UID:20010712T182145Z-123401@example.com\n\
    \   DTSTAMP:20120201T203412Z\n   DTSTART:20120714T170000Z\n   DTEND:20120715T040000Z\n\
    \   SUMMARY:One-off meeting\n   ATTACH;MANAGED-ID=97S;FMTTYPE=text/html;SIZE=59;\n\
    \    FILENAME=agenda.html:https://cal.example.com/attach/64/34X22R\n   END:VEVENT\n\
    \   END:VCALENDAR\n"
- title: 3.5.  Updating Attachments
  contents:
  - "3.5.  Updating Attachments\n   When an attachment is updated, the server MUST\
    \ change the associated\n   \"MANAGED-ID\" property parameter and MAY change the\
    \ \"ATTACH\" property\n   value.  With this approach, clients are able to determine\
    \ when an\n   attachment has been updated by some other client by looking for\
    \ a\n   change to either the \"ATTACH\" property value or the \"MANAGED-ID\"\n\
    \   property parameter value.\n   To change the data of an existing managed attachment\
    \ in a calendar\n   object resource, the following needs to occur:\n   1.  The\
    \ client issues a POST request targeted at the calendar object\n       resource\
    \ structured as follows:\n       A.  The Request-URI will include an \"action\"\
    \ query parameter with\n           the value \"attachment-update\" (see Section\
    \ 3.3.1).\n       B.  The Request-URI will include a \"managed-id\" query parameter\n\
    \           with the value matching that of the \"MANAGED-ID\" property\n    \
    \       parameter for the \"ATTACH\" property being updated (see\n           Section\
    \ 3.3.3).\n       C.  The body of the request contains the updated data for the\n\
    \           attachment.\n       D.  The client MUST include a valid Content-Type\
    \ header field\n           describing the media type of the attachment (as required\
    \ by\n           HTTP).\n       E.  The client SHOULD include a Content-Disposition\
    \ header field\n           [RFC6266] with a \"type\" parameter set to \"attachment\"\
    , and a\n           \"filename\" parameter that indicates the name of the\n  \
    \         attachment.\n       F.  The client MAY include a Prefer header field\
    \ [RFC7240] with\n           the \"return=representation\" preference to request\
    \ that the\n           modified calendar object resource be returned as the body\
    \ of\n           a successful response to the POST request.\n   2.  When the server\
    \ receives the POST request, it does the following:\n       A.  Validates that\
    \ the \"managed-id\" query parameter is valid for\n           the calendar object\
    \ resource.\n       B.  Updates the content of the attachment resource corresponding\n\
    \           to that \"managed-id\" value with the supplied attachment data.\n\
    \       C.  For each affected recurrence instance in the calendar object\n   \
    \        resource targeted by the request, updates the \"ATTACH\"\n          \
    \ property whose \"MANAGED-ID\" property parameter value matches\n           the\
    \ \"managed-id\" query parameter.  The \"MANAGED-ID\" property\n           parameter\
    \ value is changed to allow other clients to detect\n           the update, and\
    \ the property value (attachment URI) might\n           also be changed.  The\
    \ \"ATTACH\" property SHOULD contain a\n           \"FMTTYPE\" property parameter\
    \ whose value matches the Content-\n           Type header field value from the\
    \ request; this could differ\n           from the original value if the media\
    \ type of the updated\n           attachment is different.  The \"ATTACH\" property\
    \ SHOULD\n           contain a \"FILENAME\" property parameter whose value matches\n\
    \           the Content-Disposition header field \"filename\" parameter\n    \
    \       value from the request, taking into account the restrictions\n       \
    \    expressed in Section 4.2.  The \"ATTACH\" property SHOULD\n           include\
    \ a \"SIZE\" property parameter whose value represents\n           the size in\
    \ octets of the updated attachment.\n       D.  Upon successful update of the\
    \ attachment resource, and\n           modification of the targeted calendar object\
    \ resource, it\n           MUST return an appropriate HTTP success status response\
    \ and\n           include a \"Cal-Managed-ID\" header field containing the new\n\
    \           value of the \"MANAGED-ID\" property parameter.  The client can\n\
    \           use the \"Cal-Managed-ID\" header field value to correlate the\n \
    \          attachment with \"ATTACH\" properties added to the calendar\n     \
    \      object resource.  If the client included a Prefer header\n           field\
    \ with the \"return=representation\" preference in the\n           request, the\
    \ server SHOULD return the modified calendar\n           object resource as the\
    \ body of the response.  Otherwise, the\n           server can expect that the\
    \ client will reload the calendar\n           object resource with a subsequent\
    \ GET request to refresh any\n           local cache.\n   The update operation\
    \ does not take a \"rid\" query parameter and does\n   not add, or remove, any\
    \ \"ATTACH\" property in the targeted calendar\n   object resource.  To link an\
    \ existing attachment to a new instance,\n   the client simply does a PUT on the\
    \ calendar object resource, adding\n   an \"ATTACH\" property that duplicates\
    \ the existing one (see\n   Section 3.7).\n   In the following example, the client\
    \ updates an existing attachment\n   and asks the server (via the Prefer header\
    \ field [RFC7240]) to return\n   the updated version of that event in the response.\n\
    \   >> Request <<\n   POST /events/64.ics?action=attachment-update&managed-id=97S\
    \ HTTP/1.1\n   Host: cal.example.com\n   Content-Type: text/html; charset=\"utf-8\"\
    \n   Content-Disposition:attachment;filename=agenda.html\n   Content-Length: 96\n\
    \   Prefer: return=representation\n   <html>\n     <body>\n       <h1>Agenda</h1>\n\
    \       <p>Discuss attachment draft</p>\n     </body>\n   </html>\n   >> Response\
    \ <<\n   HTTP/1.1 200 OK\n   Content-Type: text/calendar; charset=\"utf-8\"\n\
    \   Content-Length: 371\n   Content-Location: https://cal.example.com/events/64.ics\n\
    \   Cal-Managed-ID: 98S\n   ETag: \"123456789-000-222\"\n   BEGIN:VCALENDAR\n\
    \   VERSION:2.0\n   PRODID:-//Example Corp.//CalDAV Server//EN\n   BEGIN:VEVENT\n\
    \   UID:20010712T182145Z-123401@example.com\n   DTSTAMP:20120201T203412Z\n   DTSTART:20120714T170000Z\n\
    \   DTEND:20120715T040000Z\n   SUMMARY:One-off meeting\n   ATTACH;MANAGED-ID=98S;FMTTYPE=text/html;SIZE=96;\n\
    \    FILENAME=agenda.html:https://cal.example.com/attach/64/34X22R\n   END:VEVENT\n\
    \   END:VCALENDAR\n"
- title: 3.6.  Removing Attachments via POST
  contents:
  - "3.6.  Removing Attachments via POST\n   To remove an existing attachment from\
    \ a calendar object, the\n   following needs to occur:\n   1.  The client issues\
    \ a POST request targeted at the calendar object\n       resource structured as\
    \ follows:\n       A.  The Request-URI will include an \"action\" query parameter\
    \ with\n           the value \"attachment-remove\" (see Section 3.3.1).\n    \
    \   B.  If all recurrence instances are having an attachment removed,\n      \
    \     the \"rid\" query parameter is not present in the Request-URI.\n       \
    \    If one or more specific recurrence instances are targeted,\n           then\
    \ the Request-URI will include a \"rid\" query parameter\n           containing\
    \ the list of instances (see Section 3.3.2).\n       C.  The Request-URI will\
    \ include a \"managed-id\" query parameter\n           with the value matching\
    \ that of the \"MANAGED-ID\" property\n           parameter for the \"ATTACH\"\
    \ property being removed (see\n           Section 3.3.3).\n       D.  The body\
    \ of the request will be empty.\n       E.  The client MAY include a Prefer header\
    \ field [RFC7240] with\n           the \"return=representation\" preference to\
    \ request that the\n           modified calendar object resource be returned as\
    \ the body of\n           a successful response to the POST request.\n   2.  When\
    \ the server receives the POST request, it does the following:\n       A.  Validates\
    \ that any recurrence instances referred to via the\n           \"rid\" query\
    \ parameter are valid for the calendar object\n           resource being targeted.\n\
    \       B.  Validates that the \"managed-id\" query parameter is valid for\n \
    \          the calendar object resource and specific instances being\n       \
    \    targeted.\n       C.  For each affected recurrence instance in the calendar\
    \ object\n           resource targeted by the request, removes the matching\n\
    \           \"ATTACH\" property.  Note that if a specified recurrence\n      \
    \     instance does not have a matching component in the calendar\n          \
    \ object resource, then the server MUST modify the calendar\n           object\
    \ resource to include an overridden component with the\n           appropriate\
    \ \"RECURRENCE-ID\" property and the matching\n           \"ATTACH\" property\
    \ removed.  This latter case is actually\n           valid only if the master\
    \ component does include the\n           referenced \"ATTACH\" property.\n   \
    \    D.  If the attachment resource is no longer referenced by any\n         \
    \  instance of the calendar object resource, it can delete the\n           attachment\
    \ resource to free up storage space.\n       E.  Upon successful removal of the\
    \ attachment resource and\n           modification of the targeted calendar object\
    \ resource, it\n           MUST return an appropriate HTTP success status response.\
    \  If\n           the client included a Prefer header field with the\n       \
    \    \"return=representation\" preference in the request, the server\n       \
    \    SHOULD return the modified calendar object resource as the\n           body\
    \ of the response.  Otherwise, the server can expect that\n           the client\
    \ will reload the calendar object resource with a\n           subsequent GET request\
    \ to refresh any local cache.\n   In the following example, the client deletes\
    \ an existing attachment\n   by passing its \"managed-id\" value in the request.\
    \  The Prefer header\n   field [RFC7240] is not set in the request so the calendar\
    \ object\n   resource data is not returned in the response.\n   >> Request <<\n\
    \   POST /events/64.ics?action=attachment-remove&managed-id=98S HTTP/1.1\n   Host:\
    \ cal.example.com\n   Content-Length: 0\n   >> Response <<\n   HTTP/1.1 204 No\
    \ Content\n   Content-Length: 0\n"
- title: 3.7.  Adding Existing Managed Attachments via PUT
  contents:
  - "3.7.  Adding Existing Managed Attachments via PUT\n   Clients can make use of\
    \ existing managed attachments by adding the\n   corresponding \"ATTACH\" property\
    \ to calendar object resources (subject\n   to the restrictions described in Section\
    \ 3.12.2).\n   If a managed attachment is used in more than calendar resource,\n\
    \   servers SHOULD NOT change either the \"MANAGED-ID\" property parameter\n \
    \  value or the \"ATTACH\" property value for these attachments; this\n   ensures\
    \ that clients do not have to download the attachment data\n   again if they already\
    \ have it cached.  Additionally, servers SHOULD\n   validate \"SIZE\" property\
    \ parameter values and replace incorrect\n   values with the actual sizes of existing\
    \ attachments.\n   These PUT requests are subject to the preconditions listed\
    \ in\n   Section 3.11.\n"
- title: 3.8.  Updating Attachments via PUT
  contents:
  - "3.8.  Updating Attachments via PUT\n   Servers MUST NOT allow clients to update\
    \ attachment data directly via\n   a PUT on the attachment URI (or via any other\
    \ HTTP method that\n   modifies content).  Instead, attachments can only be updated\
    \ via use\n   of POST requests on the calendar data.\n"
- title: 3.9.  Removing Attachments via PUT
  contents:
  - "3.9.  Removing Attachments via PUT\n   Clients can remove attachments by simply\
    \ rewriting the calendar\n   object resource data to remove the appropriate \"\
    ATTACH\" properties.\n   Servers MUST NOT allow clients to delete attachments\
    \ directly via a\n   DELETE request on the attachment URI.\n"
- title: 3.10.  Retrieving Attachments
  contents:
  - "3.10.  Retrieving Attachments\n   Clients retrieve attachments by issuing an\
    \ HTTP GET request using the\n   value of the corresponding \"ATTACH\" property\
    \ as the Request-URI,\n   taking into account the substitution mechanism associated\
    \ with the\n   \"CALDAV:managed-attachments-server-URL\" property (see Section\
    \ 6.1).\n"
- title: 3.11.  Error Handling
  contents:
  - "3.11.  Error Handling\n   This specification creates additional preconditions\
    \ for the POST\n   method.\n   The new preconditions are:\n   (CALDAV:max-attachment-size):\
    \  The attachment submitted in the POST\n      request MUST have an octet size\
    \ less than or equal to the value of\n      the \"CALDAV:max-attachment-size\"\
    \ property value (Section 6.2) on\n      the calendar collection of the target\
    \ calendar resource.\n   (CALDAV:max-attachments-per-resource):  The addition\
    \ of the\n      attachment submitted in the POST request MUST result in the target\n\
    \      calendar resource having a number of managed attachments less than\n  \
    \    or equal to the value of the \"CALDAV:max-attachments-per-resource\"\n  \
    \    property value (Section 6.3) on the calendar collection of the\n      target\
    \ calendar resource.\n   (CALDAV:valid-action):  The \"action\" query parameter\
    \ in the POST\n      request MUST contain only one of the following three values:\n\
    \      \"attachment-add\", \"attachment-update\", or \"attachment-remove\".\n\
    \   (CALDAV:valid-rid):  The \"rid\" query parameter in the POST request\n   \
    \   MUST NOT be present with an \"action=attachment-update\" query\n      parameter\
    \ and MUST contain the value \"M\" and/or values\n      corresponding to \"RECURRENCE-ID\"\
    \ property values in the iCalendar\n      data targeted by the request.\n   (CALDAV:valid-managed-id):\
    \  The \"managed-id\" query parameter in the\n      POST request MUST NOT be present\
    \ with an \"action=attachment-add\"\n      query parameter and MUST contain a\
    \ value corresponding to a\n      \"MANAGED-ID\" property parameter value in the\
    \ iCalendar data\n      targeted by the request.\n   A POST request to add, modify,\
    \ or delete a managed attachment results\n   in an implicit modification of the\
    \ targeted calendar resource\n   (equivalent of a PUT).  As a consequence, clients\
    \ should also be\n   prepared to handle preconditions associated with this implicit\
    \ PUT.\n   This includes (but is not limited to):\n      (CALDAV:max-resource-size)\
    \ (from Section 5.3.2.1 of [RFC4791])\n      (DAV:quota-not-exceeded) (from Section\
    \ 6 of [RFC4331])\n      (DAV:sufficient-disk-space) (from Section 6 of [RFC4331])\n\
    \   A PUT request to add or modify an existing calendar object resource\n   can\
    \ make reference to an existing managed attachment.  The following\n   new precondition\
    \ is defined:\n   (CALDAV:valid-managed-id-parameter):  a \"MANAGED-ID\" property\n\
    \      parameter value in the iCalendar data in the PUT request is not\n     \
    \ valid (e.g., does not match any existing managed attachment).\n   If a precondition\
    \ for a request is not satisfied:\n   1.  The response status of the request MUST\
    \ either be 403 (Forbidden)\n       if the request should not be repeated because\
    \ it will always\n       fail, or 409 (Conflict) if it is expected that the user\
    \ might be\n       able to resolve the conflict and resubmit the request.\n  \
    \ 2.  The appropriate XML element MUST be returned as the child of a\n       top-level\
    \ DAV:error element in the response body.\n"
- title: 3.12.  Additional Considerations
  contents:
  - '3.12.  Additional Considerations

    '
- title: 3.12.1.  Quotas
  contents:
  - "3.12.1.  Quotas\n   The WebDAV Quotas specification [RFC4331] defines two live\
    \ WebDAV\n   properties (DAV:quota-available-bytes and DAV:quota-used-bytes) to\n\
    \   communicate storage quota information to clients.  Server\n   implementations\
    \ MAY choose to include managed attachment sizes when\n   calculating the amount\
    \ of storage used by a particular resource.\n"
- title: 3.12.2.  Access Control
  contents:
  - "3.12.2.  Access Control\n   Access to the managed attachments referenced in a\
    \ calendar object\n   resource SHOULD be restricted to only those calendar users\
    \ who have\n   access to that calendar object either directly or indirectly (via\n\
    \   being an attendee who would receive a scheduling message).\n   When accessing\
    \ a managed attachment, clients SHOULD be prepared to\n   authenticate with the\
    \ server storing the attachment resource.  The\n   credentials required to access\
    \ the managed attachment store could be\n   different from the ones used to access\
    \ the CalDAV server.\n   This specification only allows organizers of scheduled\
    \ events to add\n   managed attachments.  Servers MUST prevent attendees of scheduled\n\
    \   events from adding, updating, or removing managed attachments.  In\n   addition,\
    \ the server MUST prevent a calendar user from reusing a\n   managed attachment\
    \ (based on its \"managed-id\" value), unless that\n   user is the one who originally\
    \ created the managed attachment.\n"
- title: 3.12.3.  Redirects
  contents:
  - "3.12.3.  Redirects\n   For POST requests that add or update attachment data,\
    \ the server MAY\n   issue a 307 (Temporary Redirect) [RFC7231] or 308 (Permanent\n\
    \   Redirect) [RFC7538] response to require the client to reissue the\n   POST\
    \ request using a different Request-URI.  As a result, clients\n   SHOULD use\
    \ the \"100-continue\" expectation defined in Section 5.1.1 of\n   [RFC7231].\
    \  Using this mechanism ensures that, if a redirect does\n   occur, the client\
    \ does not needlessly send the attachment data.\n"
- title: 3.12.4.  Processing Time
  contents:
  - "3.12.4.  Processing Time\n   Clients can expect servers to take a while to respond\
    \ to POST\n   requests that include large attachment bodies.  Servers SHOULD use\n\
    \   the 102 (Processing) interim response defined in Section 10.1 of\n   [RFC2518]\
    \ to keep the client connection alive if the POST request\n   will take significant\
    \ time to complete.\n"
- title: 3.12.5.  Automatic Cleanup by Servers
  contents:
  - "3.12.5.  Automatic Cleanup by Servers\n   Servers MAY automatically remove attachment\
    \ data, for example, to\n   regain the storage taken by unused attachments or\
    \ as the result of a\n   virus scanning.  When doing so, they SHOULD NOT modify\
    \ calendar data\n   referencing those attachments.  Instead, they SHOULD respond\
    \ with 410\n   (Gone) to any request on the removed attachment URI.\n"
- title: 3.12.6.  Sending Scheduling Messages with Attachments
  contents:
  - "3.12.6.  Sending Scheduling Messages with Attachments\n   When a managed attachment\
    \ is added, updated, or removed from a\n   calendar object resource, the server\
    \ MUST ensure that a scheduling\n   message is sent to update any attendees with\
    \ the changes, as per\n   [RFC6638].\n"
- title: 3.12.7.  Migrating Calendar Data
  contents:
  - "3.12.7.  Migrating Calendar Data\n   When exporting calendar data from a CalDAV\
    \ server supporting managed\n   attachments, clients SHOULD remove all \"MANAGED-ID\"\
    \ property\n   parameters from \"ATTACH\" properties in the calendar data.  Similarly,\n\
    \   when importing calendar data from another source, clients SHOULD\n   remove\
    \ any \"MANAGED-ID\" property parameters on \"ATTACH\" properties\n   (failure\
    \ to do so will likely result in the server removing those\n   properties automatically).\n"
- title: 4.  Modifications to iCalendar Syntax
  contents:
  - '4.  Modifications to iCalendar Syntax

    '
- title: 4.1.  SIZE Property Parameter
  contents:
  - "4.1.  SIZE Property Parameter\n   Parameter Name:  SIZE\n   Purpose:  To specify\
    \ the size of an attachment.\n   Format Definition:  This property parameter is\
    \ defined by the\n      following notation:\n      sizeparam = \"SIZE\" \"=\"\
    \ paramtext\n      ; positive integers\n   Description:  This property parameter\
    \ MAY be specified on \"ATTACH\"\n      properties.  It indicates the size in\
    \ octets of the corresponding\n      attachment data.  Since iCalendar integer\
    \ values are restricted to\n      a maximum value of 2147483647, the current property\
    \ parameter is\n      defined as text to allow an extended range to be used.\n\
    \   Example:\n      ATTACH;SIZE=1234:https://attachments.example.com/abcd.txt\n"
- title: 4.2.  FILENAME Property Parameter
  contents:
  - "4.2.  FILENAME Property Parameter\n   Parameter Name:  FILENAME\n   Purpose:\
    \  To specify the filename of a managed attachment.\n   Format Definition:  This\
    \ property parameter is defined by the\n      following notation:\n      filenameparam\
    \ = \"FILENAME\" \"=\" paramtext\n   Description:  This property parameter MAY\
    \ be specified on \"ATTACH\"\n      properties corresponding to managed attachments.\
    \  Its value\n      provides information on how to construct a filename for storing\n\
    \      the attachment data.  This parameter is very similar in nature to\n   \
    \   the Content-Disposition header field \"filename\" parameter and\n      exposes\
    \ the same security risks.  As a consequence, clients MUST\n      follow the guidelines\
    \ expressed in Section 4.3 of [RFC6266] when\n      consuming this property parameter\
    \ value.  Similarly, servers MUST\n      follow those same guidelines before storing\
    \ a value.\n   Example:\n      ATTACH;FILENAME=agenda.html:\n       https://attachments.example.com/rt452S\n"
- title: 4.3.  MANAGED-ID Property Parameter
  contents:
  - "4.3.  MANAGED-ID Property Parameter\n   Parameter Name:  MANAGED-ID\n   Purpose:\
    \  To uniquely identify a managed attachment.\n   Format Definition:  This property\
    \ parameter is defined by the\n      following notation:\n      managedidparam\
    \ = \"MANAGED-ID\" \"=\" paramtext\n   Description:  This property parameter MUST\
    \ be specified on \"ATTACH\"\n      properties corresponding to managed attachments.\
    \  Its value is\n      generated by the server and uniquely identifies a managed\n\
    \      attachment within the scope of the CalDAV server.  This property\n    \
    \  parameter MUST NOT be present in the case of unmanaged\n      attachments.\n\
    \   Example:\n      ATTACH;MANAGED-ID=aUNhbGVuZGFy:\n       https://attachments.example.com/abcd.txt\n"
- title: 5.  Additional Message Header Fields
  contents:
  - '5.  Additional Message Header Fields

    '
- title: 5.1.  Cal-Managed-ID Response Header Field
  contents:
  - "5.1.  Cal-Managed-ID Response Header Field\n   The Cal-Managed-ID response header\
    \ field provides the value of the\n   \"MANAGED-ID\" property parameter corresponding\
    \ to a newly added\n   \"ATTACH\" property.\n   ABNF:\n   Cal-Managed-ID = \"\
    Cal-Managed-ID\" \":\" paramtext\n   ; \"paramtext\" is defined in Section 3.1\
    \ of [RFC5545]\n   Example:\n   Cal-Managed-ID:aUNhbGVuZGFy\n   The Cal-Managed-ID\
    \ header field MUST only be sent by an origin server\n   in response to a successful\
    \ POST request with an \"action\" query\n   parameter set to \"attachment-add\"\
    \ or \"attachment-update\".  It MUST\n   only appear once in a response and MUST\
    \ NOT appear in trailers.\n   The Cal-Managed-ID header field is end to end and\
    \ MUST be forwarded\n   by intermediaries.  Intermediaries MUST NOT insert, delete,\
    \ or modify\n   a Cal-Managed-ID header field.\n"
- title: 6.  Additional WebDAV Properties
  contents:
  - '6.  Additional WebDAV Properties

    '
- title: 6.1.  CALDAV:managed-attachments-server-URL Property
  contents:
  - "6.1.  CALDAV:managed-attachments-server-URL Property\n   Name:  managed-attachments-server-URL\n\
    \   Namespace:  urn:ietf:params:xml:ns:caldav\n   Purpose:  This property specifies\
    \ the server base URI to use when\n      retrieving managed attachments.\n   Protected:\
    \  This property MUST be protected as only the server can\n      update the value.\n\
    \   COPY/MOVE behavior:  This property is only defined on a calendar home\n  \
    \    collection, which cannot be moved or copied.\n   allprop behavior:  This\
    \ property SHOULD NOT be returned by a PROPFIND\n      DAV:allprop request.\n\
    \   Description:  This property MAY be defined on a calendar home\n      collection.\
    \  If present, it contains either a single DAV:href XML\n      element or none\
    \ at all.\n      When one DAV:href element is present, its value MUST be an\n\
    \      absolute HTTP URI containing only the scheme (i.e., \"https\") and\n  \
    \    authority (i.e., host and port) parts.  Whenever a managed\n      attachment\
    \ is to be retrieved via an HTTP GET, the client MUST\n      construct the actual\
    \ URL of the attachment by substituting the\n      scheme and authority parts\
    \ of the attachment URI (as stored in the\n      iCalendar \"ATTACH\" property)\
    \ with the present WebDAV property\n      value.\n      When no DAV:href element\
    \ is present, the client MUST substitute\n      the scheme and authority parts\
    \ of the attachment URI with the\n      scheme and authority part of the calendar\
    \ home collection absolute\n      URI.\n      In the absence of this property,\
    \ the client can consider the\n      attachment URI as its actual URL.\n   Definition:\n\
    \   <!ELEMENT managed-attachments-server-URL (DAV:href?)>\n   Example:\n   <C:managed-attachments-server-URL\
    \ xmlns:D=\"DAV:\"\n       xmlns:C=\"urn:ietf:params:xml:ns:caldav\">\n     <D:href>https://attachstore.example.com</D:href>\n\
    \   </C:managed-attachments-server-URL>\n"
- title: 6.2.  CALDAV:max-attachment-size Property
  contents:
  - "6.2.  CALDAV:max-attachment-size Property\n   Name:  max-attachment-size\n  \
    \ Namespace:  urn:ietf:params:xml:ns:caldav\n   Purpose:  This property provides\
    \ a numeric value indicating the\n      maximum attachment size, in octets, that\
    \ the server is willing to\n      accept when a managed attachment is stored on\
    \ the server.\n   Protected:  This property MUST be protected as it indicates\
    \ limits\n      provided by the server.\n   COPY/MOVE behavior:  This property\
    \ value MUST be preserved in COPY\n      and MOVE operations.\n   allprop behavior:\
    \  This property SHOULD NOT be returned by a PROPFIND\n      DAV:allprop request.\n\
    \   Description:  The \"CALDAV:max-attachment-size\" property is used to\n   \
    \   specify a numeric value that represents the maximum attachment\n      size,\
    \ in octets, that the server is willing to accept when a\n      managed attachment\
    \ is stored on the server.  The property is\n      defined on the parent collection\
    \ of the calendar object resource\n      to which the attachment is associated.\
    \  Any attempt to store a\n      managed attachment exceeding this size MUST result\
    \ in an error,\n      with the CALDAV:max-attachment-size precondition (Section\
    \ 3.11)\n      being violated.  In the absence of this property, the client can\n\
    \      assume that the server will allow storing an attachment of any\n      reasonable\
    \ size.\n   Definition:\n   <!ELEMENT max-attachment-size (#PCDATA)>\n   <!--\
    \ PCDATA value: a numeric value (positive decimal integer) -->\n   Example:\n\
    \   <C:max-attachment-size xmlns:C=\"urn:ietf:params:xml:ns:caldav\"\n       \
    \ >102400000</C:max-attachment-size>\n"
- title: 6.3.  CALDAV:max-attachments-per-resource Property
  contents:
  - "6.3.  CALDAV:max-attachments-per-resource Property\n   Name:  max-attachments-per-resource\n\
    \   Namespace:  urn:ietf:params:xml:ns:caldav\n   Purpose:  This property provides\
    \ a numeric value indicating the\n      maximum number of managed attachments\
    \ across all instances of a\n      calendar object resource stored in a calendar\
    \ collection.\n   Protected:  This property MUST be protected as it indicates\
    \ limits\n      provided by the server.\n   COPY/MOVE behavior:  This property\
    \ value MUST be preserved in COPY\n      and MOVE operations.\n   allprop behavior:\
    \  This property SHOULD NOT be returned by a PROPFIND\n      DAV:allprop request.\n\
    \   Description:  The \"CALDAV:max-attachments-per-resource\" property is\n  \
    \    used to specify a numeric value that represents the maximum number\n    \
    \  of managed attachments across all instances of a calendar object\n      resource\
    \ stored in a calendar collection.  Unmanaged attachments\n      are not counted\
    \ toward that limit.  The property is defined on the\n      parent collection\
    \ of the calendar object resource to which the\n      attachment is associated.\
    \  Any attempt to add a managed attachment\n      that would cause the calendar\
    \ resource to exceed this limit MUST\n      result in an error, with the CALDAV:max-attachments-per-resource\n\
    \      precondition (Section 3.11) being violated.  In the absence of\n      this\
    \ property, the client can assume that the server can handle\n      any number\
    \ of managed attachments per calendar resource.\n   Definition:\n   <!ELEMENT\
    \ max-attachments-per-resource (#PCDATA)>\n   <!-- PCDATA value: a numeric value\
    \ (positive decimal integer) -->\n   Example:\n   <C:max-attachments-per-resource\n\
    \       xmlns:C=\"urn:ietf:params:xml:ns:caldav\"\n        >12</C:max-attachments-per-resource>\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The security considerations in [RFC4791] and\
    \ [RFC4918] apply to this\n   extension.  Additionally, servers need to be aware\
    \ that a client\n   could attack underlying storage by POSTing extremely large\n\
    \   attachments and could attack processing time by uploading a recurring\n  \
    \ event with a large number of overrides and then repeatedly adding,\n   updating,\
    \ and deleting attachments.\n   Malicious content could be introduced into the\
    \ calendar server by way\n   of a managed attachment, and propagated to many end\
    \ users via\n   scheduling.  Servers SHOULD check managed attachments for malicious\n\
    \   or inappropriate content.  Upon detecting such content, servers\n   SHOULD\
    \ remove the attachment following the rules described in\n   Section 3.12.5.\n"
- title: 8.  IANA Considerations
  contents:
  - '8.  IANA Considerations

    '
- title: 8.1.  Parameter Registrations
  contents:
  - "8.1.  Parameter Registrations\n   This specification defines the following new\
    \ iCalendar property\n   parameters to be added to the \"Parameters\" registry\
    \ defined in\n   Section 8.2.4 of [RFC5545]:\n             +------------+---------+-----------------------+\n\
    \             | Parameter  | Status  | Reference             |\n             +------------+---------+-----------------------+\n\
    \             | SIZE       | Current | RFC 8607, Section 4.1 |\n             |\
    \ FILENAME   | Current | RFC 8607, Section 4.2 |\n             | MANAGED-ID |\
    \ Current | RFC 8607, Section 4.3 |\n             +------------+---------+-----------------------+\n"
- title: 8.2.  Message Header Field Registrations
  contents:
  - "8.2.  Message Header Field Registrations\n   The message header fields below\
    \ should be added to the \"Permanent\n   Message Header Field Names\" registry\
    \ (see [RFC3864]).\n"
- title: 8.2.1.  Cal-Managed-ID
  contents:
  - "8.2.1.  Cal-Managed-ID\n   Header field name: Cal-Managed-ID\n   Protocol: http\n\
    \   Status: standard\n   Author/Change controller: IETF\n   Reference: this specification\
    \ (Section 5.1)\n   Related information: none\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC2518]  Goland, Y., Whitehead, E., Faizi, A., Carter, S., and D.\n    \
    \          Jensen, \"HTTP Extensions for Distributed Authoring --\n          \
    \    WEBDAV\", RFC 2518, DOI 10.17487/RFC2518, February 1999,\n              <https://www.rfc-editor.org/info/rfc2518>.\n\
    \   [RFC3864]  Klyne, G., Nottingham, M., and J. Mogul, \"Registration\n     \
    \         Procedures for Message Header Fields\", BCP 90, RFC 3864,\n        \
    \      DOI 10.17487/RFC3864, September 2004,\n              <https://www.rfc-editor.org/info/rfc3864>.\n\
    \   [RFC4331]  Korver, B. and L. Dusseault, \"Quota and Size Properties\n    \
    \          for Distributed Authoring and Versioning (DAV)\n              Collections\"\
    , RFC 4331, DOI 10.17487/RFC4331, February\n              2006, <https://www.rfc-editor.org/info/rfc4331>.\n\
    \   [RFC4791]  Daboo, C., Desruisseaux, B., and L. Dusseault,\n              \"\
    Calendaring Extensions to WebDAV (CalDAV)\", RFC 4791,\n              DOI 10.17487/RFC4791,\
    \ March 2007,\n              <https://www.rfc-editor.org/info/rfc4791>.\n   [RFC4918]\
    \  Dusseault, L., Ed., \"HTTP Extensions for Web Distributed\n              Authoring\
    \ and Versioning (WebDAV)\", RFC 4918,\n              DOI 10.17487/RFC4918, June\
    \ 2007,\n              <https://www.rfc-editor.org/info/rfc4918>.\n   [RFC5234]\
    \  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n             \
    \ Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,\
    \ January 2008,\n              <https://www.rfc-editor.org/info/rfc5234>.\n  \
    \ [RFC5545]  Desruisseaux, B., Ed., \"Internet Calendaring and\n             \
    \ Scheduling Core Object Specification (iCalendar)\",\n              RFC 5545,\
    \ DOI 10.17487/RFC5545, September 2009,\n              <https://www.rfc-editor.org/info/rfc5545>.\n\
    \   [RFC6266]  Reschke, J., \"Use of the Content-Disposition Header Field\n  \
    \            in the Hypertext Transfer Protocol (HTTP)\", RFC 6266,\n        \
    \      DOI 10.17487/RFC6266, June 2011,\n              <https://www.rfc-editor.org/info/rfc6266>.\n\
    \   [RFC6638]  Daboo, C. and B. Desruisseaux, \"Scheduling Extensions to\n   \
    \           CalDAV\", RFC 6638, DOI 10.17487/RFC6638, June 2012,\n           \
    \   <https://www.rfc-editor.org/info/rfc6638>.\n   [RFC7230]  Fielding, R., Ed.\
    \ and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1):\
    \ Message Syntax and Routing\",\n              RFC 7230, DOI 10.17487/RFC7230,\
    \ June 2014,\n              <https://www.rfc-editor.org/info/rfc7230>.\n   [RFC7231]\
    \  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n             \
    \ Protocol (HTTP/1.1): Semantics and Content\", RFC 7231,\n              DOI 10.17487/RFC7231,\
    \ June 2014,\n              <https://www.rfc-editor.org/info/rfc7231>.\n   [RFC7240]\
    \  Snell, J., \"Prefer Header for HTTP\", RFC 7240,\n              DOI 10.17487/RFC7240,\
    \ June 2014,\n              <https://www.rfc-editor.org/info/rfc7240>.\n   [RFC7538]\
    \  Reschke, J., \"The Hypertext Transfer Protocol Status Code\n              308\
    \ (Permanent Redirect)\", RFC 7538, DOI 10.17487/RFC7538,\n              April\
    \ 2015, <https://www.rfc-editor.org/info/rfc7538>.\n   [RFC8174]  Leiba, B., \"\
    Ambiguity of Uppercase vs Lowercase in RFC\n              2119 Key Words\", BCP\
    \ 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [RFC5023]  Gregorio, J., Ed. and B. de hOra,\
    \ Ed., \"The Atom\n              Publishing Protocol\", RFC 5023, DOI 10.17487/RFC5023,\n\
    \              October 2007, <https://www.rfc-editor.org/info/rfc5023>.\n   [RFC5546]\
    \  Daboo, C., Ed., \"iCalendar Transport-Independent\n              Interoperability\
    \ Protocol (iTIP)\", RFC 5546,\n              DOI 10.17487/RFC5546, December 2009,\n\
    \              <https://www.rfc-editor.org/info/rfc5546>.\n   [RFC7320]  Nottingham,\
    \ M., \"URI Design and Ownership\", BCP 190,\n              RFC 7320, DOI 10.17487/RFC7320,\
    \ July 2014,\n              <https://www.rfc-editor.org/info/rfc7320>.\n   [RFC8144]\
    \  Murchison, K., \"Use of the Prefer Header Field in Web\n              Distributed\
    \ Authoring and Versioning (WebDAV)\", RFC 8144,\n              DOI 10.17487/RFC8144,\
    \ April 2017,\n              <https://www.rfc-editor.org/info/rfc8144>.\n"
- title: Appendix A.  Example Involving Recurring Events
  contents:
  - "Appendix A.  Example Involving Recurring Events\n   In the following example,\
    \ the organizer of a recurring meeting makes\n   an unsuccessful attempt to add\
    \ an agenda (HTML attachment) to the\n   corresponding calendar resource with\
    \ a conditional request.  Note\n   that the client includes both the Expect and\
    \ Prefer header fields in\n   the request, thereby preventing itself from needlessly\
    \ sending the\n   attachment data and requesting that the current resource be\
    \ returned\n   in the failure response (see Section 3.2 of [RFC8144]).\n   >>\
    \ Request <<\n   POST /events/65.ics?action=attachment-add HTTP/1.1\n   Host:\
    \ cal.example.com\n   Content-Type: text/html; charset=\"utf-8\"\n   Content-Disposition:\
    \ attachment;filename=agenda.html\n   Content-Length: 80\n   If-Match: \"abcdefg-000\"\
    \n   Expect: 100-continue\n   Prefer: return=representation\n   >> Final Response\
    \ <<\n   HTTP/1.1 412 Precondition Failed\n   Content-Type: text/calendar; charset=\"\
    utf-8\"\n   Content-Length: 929\n   Content-Location: https://cal.example.com/events/65.ics\n\
    \   ETag: \"123456789-000-000\"\n   BEGIN:VCALENDAR\n   VERSION:2.0\n   PRODID:-//Example\
    \ Corp.//CalDAV Server//EN\n   BEGIN:VTIMEZONE\n   LAST-MODIFIED:20040110T032845Z\n\
    \   TZID:America/Montreal\n   BEGIN:DAYLIGHT\n   DTSTART:20000404T020000\n   RRULE:FREQ=YEARLY;BYDAY=1SU;BYMONTH=4\n\
    \   TZNAME:EDT\n   TZOFFSETFROM:-0500\n   TZOFFSETTO:-0400\n   END:DAYLIGHT\n\
    \   BEGIN:STANDARD\n   DTSTART:20001026T020000\n   RRULE:FREQ=YEARLY;BYDAY=-1SU;BYMONTH=10\n\
    \   TZNAME:EST\n   TZOFFSETFROM:-0400\n   TZOFFSETTO:-0500\n   END:STANDARD\n\
    \   END:VTIMEZONE\n   BEGIN:VEVENT\n   UID:20010712T182145Z-123401@example.com\n\
    \   DTSTAMP:20120201T203412Z\n   DTSTART;TZID=America/Montreal:20120206T100000\n\
    \   DURATION:PT1H\n   RRULE:FREQ=WEEKLY\n   SUMMARY:Planning Meeting\n   ORGANIZER:mailto:cyrus@example.com\n\
    \   ATTENDEE;CUTYPE=INDIVIDUAL;PARTSTAT=ACCEPTED:mailto:cyrus@exampl\n    e.com\n\
    \   ATTENDEE;CUTYPE=INDIVIDUAL;PARTSTAT=ACCEPTED:mailto:arnaudq@exam\n    ple.com\n\
    \   ATTENDEE;CUTYPE=INDIVIDUAL;PARTSTAT=NEEDS-ACTION:mailto:mike@exa\n    mple.com\n\
    \   END:VEVENT\n   END:VCALENDAR\n   The organizer of a recurring meeting successfully\
    \ adds an agenda\n   (HTML attachment) to the corresponding calendar resource.\
    \  Attendees\n   of the meeting are granted read access to the newly created\n\
    \   attachment resource.  Their own copy of the meeting is updated to\n   include\
    \ the new \"ATTACH\" property pointing to the attachment\n   resource, and they\
    \ are notified of the change via their scheduling\n   inbox.\n   >> Request <<\n\
    \   POST /events/65.ics?action=attachment-add HTTP/1.1\n   Host: cal.example.com\n\
    \   Content-Type: text/html; charset=\"utf-8\"\n   Content-Disposition: attachment;filename=agenda.html\n\
    \   Content-Length: 80\n   If-Match: \"123456789-000-000\"\n   Expect: 100-continue\n\
    \   Prefer: return=representation\n   >> Interim Response <<\n   HTTP/1.1 100\
    \ Continue\n   >> Request Body <<\n   <html>\n     <body>\n       <h1>Agenda</h1>\n\
    \       <p>As usual</p>\n     </body>\n   </html>\n   >> Final Response <<\n \
    \  HTTP/1.1 201 Created\n   Content-Type: text/calendar; charset=\"utf-8\"\n \
    \  Content-Length: 1043\n   Content-Location: https://cal.example.com/events/65.ics\n\
    \   ETag: \"123456789-000-111\"\n   Cal-Managed-ID: 97S\n   BEGIN:VCALENDAR\n\
    \   VERSION:2.0\n   PRODID:-//Example Corp.//CalDAV Server//EN\n   BEGIN:VTIMEZONE\n\
    \   LAST-MODIFIED:20040110T032845Z\n   TZID:America/Montreal\n   BEGIN:DAYLIGHT\n\
    \   DTSTART:20000404T020000\n   RRULE:FREQ=YEARLY;BYDAY=1SU;BYMONTH=4\n   TZNAME:EDT\n\
    \   TZOFFSETFROM:-0500\n   TZOFFSETTO:-0400\n   END:DAYLIGHT\n   BEGIN:STANDARD\n\
    \   DTSTART:20001026T020000\n   RRULE:FREQ=YEARLY;BYDAY=-1SU;BYMONTH=10\n   TZNAME:EST\n\
    \   TZOFFSETFROM:-0400\n   TZOFFSETTO:-0500\n   END:STANDARD\n   END:VTIMEZONE\n\
    \   BEGIN:VEVENT\n   UID:20010712T182145Z-123401@example.com\n   DTSTAMP:20120201T203412Z\n\
    \   DTSTART;TZID=America/Montreal:20120206T100000\n   DURATION:PT1H\n   RRULE:FREQ=WEEKLY\n\
    \   SUMMARY:Planning Meeting\n   ORGANIZER:mailto:cyrus@example.com\n   ATTENDEE;CUTYPE=INDIVIDUAL;PARTSTAT=ACCEPTED:mailto:cyrus@exampl\n\
    \    e.com\n   ATTENDEE;CUTYPE=INDIVIDUAL;PARTSTAT=ACCEPTED:mailto:arnaudq@exam\n\
    \    ple.com\n   ATTENDEE;CUTYPE=INDIVIDUAL;PARTSTAT=NEEDS-ACTION:mailto:mike@exa\n\
    \    mple.com\n   ATTACH;MANAGED-ID=97S;FMTTYPE=text/html;SIZE=80;\n    FILENAME=agenda.html:https://cal.example.com/attach/65/34X22R\n\
    \   END:VEVENT\n   END:VCALENDAR\n   The organizer has a more specific agenda\
    \ for the 20th of February\n   meeting.  It is added to that particular instance\
    \ of the meeting by\n   specifying the \"rid\" query parameter.  Note that an\
    \ overridden\n   instance is created with the \"RECURRENCE-ID\" property value\
    \ matching\n   the value of the \"rid\" query parameter in the request.  Also,\
    \ note\n   that the server takes significant time to complete the request and\n\
    \   notifies the client accordingly.\n   >> Request <<\n  POST /events/65.ics?action=attachment-add&rid=20120220T100000\
    \ HTTP/1.1\n  Host: cal.example.com\n  Content-Type: text/html; charset=\"utf-8\"\
    \n  Content-Disposition: attachment;filename=agenda0220.html\n  Content-Length:\
    \ 105\n  If-Match: \"123456789-000-111\"\n  Expect: 100-continue\n  Prefer: return=representation\n\
    \   >> Interim Response <<\n   HTTP/1.1 100 Continue\n   >> Request Body <<\n\
    \   <html>\n     <body>\n       <h1>Agenda</h1>\n       <p>Something different,\
    \ for a change</p>\n     </body>\n   </html>\n   >> Interim Response <<\n   HTTP/1.1\
    \ 102 Processing\n   >> Final Response <<\n   HTTP/1.1 201 Created\n   Content-Type:\
    \ text/calendar; charset=\"utf-8\"\n   Content-Length: 1661\n   Content-Location:\
    \ https://cal.example.com/events/65.ics\n   ETag: \"123456789-000-222\"\n   Cal-Managed-ID:\
    \ 33225\n   BEGIN:VCALENDAR\n   VERSION:2.0\n   PRODID:-//Example Corp.//CalDAV\
    \ Server//EN\n   BEGIN:VTIMEZONE\n   LAST-MODIFIED:20040110T032845Z\n   TZID:America/Montreal\n\
    \   BEGIN:DAYLIGHT\n   DTSTART:20000404T020000\n   RRULE:FREQ=YEARLY;BYDAY=1SU;BYMONTH=4\n\
    \   TZNAME:EDT\n   TZOFFSETFROM:-0500\n   TZOFFSETTO:-0400\n   END:DAYLIGHT\n\
    \   BEGIN:STANDARD\n   DTSTART:20001026T020000\n   RRULE:FREQ=YEARLY;BYDAY=-1SU;BYMONTH=10\n\
    \   TZNAME:EST\n   TZOFFSETFROM:-0400\n   TZOFFSETTO:-0500\n   END:STANDARD\n\
    \   END:VTIMEZONE\n   BEGIN:VEVENT\n   UID:20010712T182145Z-123401@example.com\n\
    \   DTSTAMP:20120201T203412Z\n   DTSTART;TZID=America/Montreal:20120206T100000\n\
    \   DURATION:PT1H\n   RRULE:FREQ=WEEKLY\n   SUMMARY:Planning Meeting\n   ORGANIZER:mailto:cyrus@example.com\n\
    \   ATTENDEE;CUTYPE=INDIVIDUAL;PARTSTAT=ACCEPTED:mailto:cyrus@exampl\n    e.com\n\
    \   ATTENDEE;CUTYPE=INDIVIDUAL;PARTSTAT=ACCEPTED:mailto:arnaudq@exam\n    ple.com\n\
    \   ATTENDEE;CUTYPE=INDIVIDUAL;PARTSTAT=NEEDS-ACTION:mailto:mike@exa\n    mple.com\n\
    \   ATTACH;MANAGED-ID=97S;FMTTYPE=text/html;SIZE=80;\n    FILENAME=agenda.html:https://cal.example.com/attach/65/34X22R\n\
    \   END:VEVENT\n   BEGIN:VEVENT\n   UID:20010712T182145Z-123401@example.com\n\
    \   RECURRENCE-ID;TZID=America/Montreal:20120220T100000\n   DTSTAMP:20120201T203412Z\n\
    \   DTSTART;TZID=America/Montreal:20120220T100000\n   DURATION:PT1H\n   SUMMARY:Planning\
    \ Meeting\n   ORGANIZER:mailto:cyrus@example.com\n   ATTENDEE;CUTYPE=INDIVIDUAL;PARTSTAT=ACCEPTED:mailto:cyrus@example.\n\
    \    com\n   ATTENDEE;CUTYPE=INDIVIDUAL;PARTSTAT=ACCEPTED:mailto:arnaudq@exampl\n\
    \    e.com\n   ATTENDEE;CUTYPE=INDIVIDUAL;PARTSTAT=NEEDS-ACTION:mailto:mike@examp\n\
    \    le.com\n   ATTACH;MANAGED-ID=33225;FMTTYPE=text/html;SIZE=105;\n    FILENAME=agenda0220.html:https://cal.example.com/attach/65/FGZ225\n\
    \   END:VEVENT\n   END:VCALENDAR\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   This specification came about via discussions at the Calendaring\
    \ and\n   Scheduling Consortium.  Thanks in particular to Mike Douglass and\n\
    \   Eric York.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Cyrus Daboo\n   Apple Inc.\n   1 Infinite Loop\n   Cupertino,\
    \ CA  95014\n   United States of America\n   Email: cyrus@daboo.name\n   URI:\
    \   http://www.apple.com/\n   Arnaud Quillaud\n   Oracle Corporation\n   180,\
    \ Avenue de l'Europe\n   Saint Ismier cedex  38334\n   France\n   Email: arnaud.quillaud@oracle.com\n\
    \   URI:   http://www.oracle.com/\n   Kenneth Murchison (editor)\n   FastMail\
    \ US LLC\n   1429 Walnut St, Suite 1201\n   Philadephia, PA  19102\n   United\
    \ States of America\n   Email: murch@fastmailteam.com\n   URI:   http://www.fastmail.com/\n"
