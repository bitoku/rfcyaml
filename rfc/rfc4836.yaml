- contents:
  - "                   Definitions of Managed Objects for\n               IEEE 802.3
    Medium Attachment Units (MAUs)\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document defines a portion of the Management Information Base\n
    \  (MIB) for use with network management protocols in the Internet\n   community.
    \ In particular, it defines objects for managing IEEE 802.3\n   Medium Attachment
    Units (MAUs).  This document obsoletes RFC 3636.\n   It amends that specification
    by moving MAU type OBJECT-IDENTITY\n   definitions and relevant textual conventions
    into a separate Internet\n   Assigned Number Authority (IANA) maintained MIB module.
    \ In addition,\n   management information is added to enable support for Ethernet
    in the\n   First Mile (EFM) and 10GBASE-CX4 MAUs.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n   2.  The Internet-Standard Management Framework . . . . . .
    . . . .  3\n   3.  Overview . . . . . . . . . . . . . . . . . . . . . . . . .
    . .  4\n     3.1.  Relationship to RFC 3636 . . . . . . . . . . . . . . . . .
    \ 4\n     3.2.  Relationship to Other MIBs . . . . . . . . . . . . . . . .  5\n
    \      3.2.1.  Relationship to the Interfaces MIB . . . . . . . . . .  5\n       3.2.2.
    \ Relationship to the 802.3 Repeater MIB Module  . . . .  6\n     3.3.  Management
    of Internal MAUs  . . . . . . . . . . . . . . .  6\n     3.4.  Mapping of IEEE
    802.3 Managed Objects  . . . . . . . . . .  6\n     3.5.  Addition of New MAU
    Types  . . . . . . . . . . . . . . . .  9\n       3.5.1.  dot3MauType OBJECT-IDENTITIES
    \ . . . . . . . . . . . .  9\n       3.5.2.  IANAifMauTypeListBits TEXTUAL-CONVENTION
    . . . . . . .  9\n       3.5.3.  IANAifMauMediaAvailable TEXTUAL-CONVENTION .
    . . . . .  9\n       3.5.4.  IANAifMauAutoNegCapBits TEXTUAL-CONVENTION . . .
    . . . 10\n       3.5.5.  JackType TEXTUAL-CONVENTION  . . . . . . . . . . . .
    . 10\n   4.  MAU MIB Definitions  . . . . . . . . . . . . . . . . . . . . . 10\n
    \  5.  IANA-Maintained MAU TC Definitions . . . . . . . . . . . . . . 46\n   6.
    \ Security Considerations  . . . . . . . . . . . . . . . . . . . 62\n   7.  IANA
    Considerations  . . . . . . . . . . . . . . . . . . . . . 63\n   8.  Acknowledgments
    \ . . . . . . . . . . . . . . . . . . . . . . . 63\n   9.  References . . . .
    . . . . . . . . . . . . . . . . . . . . . . 64\n     9.1.  Normative References
    . . . . . . . . . . . . . . . . . . . 64\n     9.2.  Informative References .
    . . . . . . . . . . . . . . . . . 66\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document defines a portion of the Management Information
    Base\n   (MIB) for use with network management protocols in the Internet\n   community.
    \ In particular, it defines objects for managing IEEE 802.3\n   [IEEE802.3] Medium
    Attachment Units (MAUs).\n   The previous version of this document, RFC 3636 [RFC3636],
    defined a\n   single MIB module.  This document splits the original MIB module
    into\n   two, putting frequently updated object identities and textual\n   conventions
    into a separate, IANA-maintained MIB module, in order to\n   decrease the need
    of updating the basic MAU MIB module.\n   The first version of the IANA-maintained
    MIB module also extends the\n   list of managed objects to support Ethernet in
    the First Mile (EFM)\n   and 10GBASE-CX4 interfaces.\n   Ethernet technology,
    as defined by the 802.3 Working Group of the\n   IEEE, continues to evolve, with
    scalable increases in speed, new\n   types of cabling and interfaces, and new
    features.  This evolution\n   may require changes in the managed objects in order
    to reflect this\n   new functionality.  This document, as with other documents
    issued by\n   this working group, reflects a certain stage in the evolution of\n
    \  Ethernet technology.  In the future, this document might be revised,\n   or
    new documents might be issued by the Ethernet Interfaces and Hub\n   MIB Working
    Group, in order to reflect the evolution of Ethernet\n   technology.\n"
  title: 1.  Introduction
- contents:
  - "2.  The Internet-Standard Management Framework\n   For a detailed overview of
    the documents that describe the current\n   Internet-Standard Management Framework,
    please refer to section 7 of\n   RFC 3410 [RFC3410].\n   Managed objects are accessed
    via a virtual information store, termed\n   the Management Information Base or
    MIB.  MIB objects are generally\n   accessed through the Simple Network Management
    Protocol (SNMP).\n   Objects in the MIB are defined using the mechanisms defined
    in the\n   Structure of Management Information (SMI).  This memo specifies a MIB\n
    \  module that is compliant to the SMIv2, which is described in STD 58,\n   RFC
    2578 [RFC2578], STD 58, RFC 2579 [RFC2579] and STD 58, RFC 2580\n   [RFC2580].\n
    \  The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n
    \  \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n
    \  document are to be interpreted as described in RFC 2119 [RFC2119].\n"
  title: 2.  The Internet-Standard Management Framework
- contents:
  - "3.  Overview\n   Instances of these object types represent attributes of an IEEE
    802.3\n   MAU.  Several types of MAUs are defined in the IEEE 802.3 CSMA/CD\n
    \  standard [IEEE802.3].  These MAUs may be connected to IEEE 802.3\n   repeaters
    or to 802.3 (Ethernet-like) interfaces.  For convenience,\n   this document refers
    to these devices as \"repeater MAUs\" and\n   \"interface MAUs.\"\n   The definitions
    presented here are based on Section 30.5, \"Layer\n   Management for 10 Mb/s,
    100 Mb/s, 1000 Mb/s, and 10 Gb/s Medium\n   Attachment Units (MAUs)\", Section
    30.6, \"Management for link Auto-\n   Negotiation\", and Annex 30A, \"GDMO Specifications
    for 802.3 managed\n   object classes\" of IEEE Std. 802.3-2005 [IEEE802.3].  This\n
    \  specification is intended to provide for management of all types of\n   Ethernet/802.3
    MAUs.\n"
  - contents:
    - "3.1.  Relationship to RFC 3636\n   The management definitions provided in this
      document are intended to\n   be a superset of those defined by RFC 3636 [RFC3636].\n
      \  In order to decrease the need of updating the basic MAU MIB module\n   due
      to the new MAU type, Media Available state, Auto Negotiation\n   capability
      and/or Jack type introduction, all relevant object\n   identities and textual
      conventions have been moved to a separate,\n   IANA-maintained MIB module IANA-MAU-MIB,
      the first version of which\n   is defined in this document.  Thus when a new
      MAU type, Media\n   Available state, Auto Negotiation capability, and/or Jack
      type is\n   defined by the IEEE 802.3 working group, only the IANA-maintained\n
      \  module needs to be revised, leaving the basic MAU-MIB module defined\n   in
      this document unchanged.\n   In addition, the new definitions are added to the
      IANA-maintained MIB\n   module, to support Ethernet in the First Mile (EFM)
      and 10GBASE-CX4\n   interfaces, defined in IEEE Std 802.3ah-2004 [IEEE802.3ah]
      and IEEE\n   Std 802.3ak-2004 [IEEE802.3ak] respectively, now part of IEEE Std\n
      \  802.3-2005 [IEEE802.3].\n   It should be noted that the changes made in this
      revision will not be\n   entirely backward-compatible with MIB modules that
      currently import\n   MAU type object identity descriptors from the MAU-MIB;
      such modules\n   will need to be revised to import those DESCRIPTORS from the
      IANA-\n   MAU-MIB.  Similarly, any management applications that process the\n
      \  object identity definitions (e.g., to present the DESCRIPTION text to\n   a
      user) will need to get those definitions from the IANA-MAU-MIB\n   instead of
      the MAU-MIB.  While it is true that changes that require\n   such adjustments
      are not strictly compliant with the SMIv2 rules\n   governing MIB module revisions
      (see [RFC2578] Section 10), in this\n   case continued high maintenance costs
      that would result from not\n   making these changes make the deviation from
      the rules justified.  It\n   should be noted that the working group was not
      able to find any\n   examples of MIB modules or management applications that
      would\n   actually be negatively affected by the changes.\n"
    title: 3.1.  Relationship to RFC 3636
  - contents:
    - "3.2.  Relationship to Other MIBs\n   It is assumed that an agent implementing
      MAU-MIB will also implement\n   (at least) the 'system' group defined in the
      SNMPv2 MIB [RFC3418].\n   The following sections identify other MIBs that such
      an agent should\n   implement.\n"
    - contents:
      - "3.2.1.  Relationship to the Interfaces MIB\n   The sections of this document
        that define interface MAU-related\n   objects specify an extension to the
        Interfaces MIB [RFC2863].  An\n   agent implementing these interface-MAU related
        objects MUST also\n   implement the relevant groups of the ifCompliance3 MODULE-COMPLIANCE\n
        \  statement of the Interface MIB.  The value of the object ifMauIfIndex\n
        \  is the same as the value of 'ifIndex' used to instantiate the\n   interface
        to which the given MAU is connected.\n   It is REQUIRED that an agent implementing
        the interface-MAU related\n   objects in the MAU-MIB will also fully comply
        with the\n   dot3Compliance2 MODULE-COMPLIANCE statement of the Ethernet-like\n
        \  Interfaces MIB, [RFC3635].  Furthermore, when the interface-MAU\n   related
        objects are used to manage a 10GBASE-W PHY -- i.e., when\n   ifMauType is
        equal to dot3MauType10GigBaseW or any other 10GBASE-W\n   variant -- then
        the agent MUST also support the Ethernet WAN\n   Interface Sublayer (WIS)
        MIB [RFC3637] and must follow the interface\n   layering model specified therein.
        \ In that case the value of the\n   object ifMauIfIndex is the same as the
        value of 'ifIndex' for the\n   layer at the top of the stack, i.e., for the
        ifTable entry that has\n   'ifType' equal to ethernetCsmacd(6).  If the interface-MAU
        related\n   objects are used to manage a PHY that allows the MAU type to be\n
        \  changed dynamically, then the agent SHALL create ifTable,\n   ifStackTable,
        and ifInvStackTable entries that pertain to the WIS\n   when ifMauDefaultType
        is changed to a 10GBASEW variant (i.e., one of\n   dot3MauType10GigBaseW,
        dot3MauType10GigBaseEW,\n   dot3MauType10GigBaseLW, or dot3MauType10GigBaseSW)
        from any other\n   type, and shall destroy the WIS-related entries when ifMauDefaultType\n
        \  is changed to a non- 10GBASE-W type.  The agent SHALL also change the\n
        \  values of 'ifConnectorPresent' and 'ifHighSpeed' in the ifTable entry\n
        \  indexed by ifMauIfIndex as specified in [RFC3635] and [RFC3637] when\n
        \  ifMauDefaultType is manipulated in this way, but SHALL NOT otherwise\n
        \  alter that entry.\n   (Note that repeater ports are not represented as
        interfaces in the\n   Interface MIB.)\n"
      title: 3.2.1.  Relationship to the Interfaces MIB
    - contents:
      - "3.2.2.  Relationship to the 802.3 Repeater MIB Module\n   The section of
        this document that defines repeater MAU-related\n   objects specifies an extension
        to the 802.3 Repeater MIB defined in\n   [RFC2108].  An agent implementing
        these repeater-MAU related objects\n   MUST also comply with the snmpRptrModCompl
        compliance statement of\n   the 802.3 Repeater MIB module.\n   The values
        of 'rpMauGroupIndex' and 'rpMauPortIndex' used to\n   instantiate a repeater
        MAU variable SHALL be the same as the values\n   of 'rptrPortGroupIndex' and
        'rptrPortIndex' used to instantiate the\n   port that the given MAU is connected
        to.\n"
      title: 3.2.2.  Relationship to the 802.3 Repeater MIB Module
    title: 3.2.  Relationship to Other MIBs
  - contents:
    - "3.3.  Management of Internal MAUs\n   In some situations, a MAU can be \"internal\"
      -- i.e., its\n   functionality is implemented entirely within a device.  For
      example,\n   a managed repeater may contain an internal repeater-MAU and/or
      an\n   internal interface-MAU through which management communications\n   originating
      on one of the repeater's external ports pass, in order to\n   reach the management
      agent associated with the repeater.  Such\n   internal MAUs may or may not be
      managed.  If they are managed,\n   objects describing their attributes should
      appear in the appropriate\n   MIB subtree: dot3RpMauBasicGroup for internal
      repeater-MAUs and\n   dot3IfMauBasicGroup for internal interface-MAUs.\n"
    title: 3.3.  Management of Internal MAUs
  - contents:
    - "3.4.  Mapping of IEEE 802.3 Managed Objects\n   This section contains the mapping
      between relevant managed objects\n   (attributes) defined in [IEEE802.3] Clause
      30, and managed objects\n   defined in this document.\n   +----------------------------------+--------------------------------+\n
      \  | IEEE 802.3 Managed Object        | Corresponding SNMP Object      |\n   +----------------------------------+--------------------------------+\n
      \  | oMAU                             |                                |\n   +----------------------------------+--------------------------------+\n
      \  | .aMAUID                          | rpMauIndex or ifMauIndex or    |\n   |
      \                                 | broadMauIndex                  |\n   +----------------------------------+--------------------------------+\n
      \  | .aMAUType                        | rpMauType or ifMauType         |\n   +----------------------------------+--------------------------------+\n
      \  | .aMAUTypeList                    | ifMauTypeListBits              |\n   +----------------------------------+--------------------------------+\n
      \  | .aMediaAvailable                 | rpMauMediaAvailable or         |\n   |
      \                                 | ifMauMediaAvailable            |\n   +----------------------------------+--------------------------------+\n
      \  | .aLoseMediaCounter               | rpMauMediaAvailableStateExits  |\n   |
      \                                 | or                             |\n   |                                  |
      ifMauMediaAvailableStateExits  |\n   +----------------------------------+--------------------------------+\n
      \  | .aJabber                         | rpMauJabberState and           |\n   |
      \                                 | rpMauJabberingStateEnters or   |\n   |                                  |
      ifMauJabberState and           |\n   |                                  | ifMauJabberingStateEnters
      \     |\n   +----------------------------------+--------------------------------+\n
      \  | .aMAUAdminState                  | rpMauStatus or ifMauStatus     |\n   +----------------------------------+--------------------------------+\n
      \  | .aBbMAUXmitRcvSplitType          | broadMauXmtRcvSplitType        |\n   +----------------------------------+--------------------------------+\n
      \  | .aBroadbandFrequencies           | broadMauXmtCarrierFreq and     |\n   |
      \                                 | broadMauTranslationFreq        |\n   +----------------------------------+--------------------------------+\n
      \  | .aFalseCarriers                  | rpMauFalseCarriers or          |\n   |
      \                                 | ifMauFalseCarriers             |\n   +----------------------------------+--------------------------------+\n
      \  | .acResetMAU                      | rpMauStatus or ifMauStatus     |\n   +----------------------------------+--------------------------------+\n
      \  | .acMAUAdminControl               | rpMauStatus or ifMauStatus     |\n   +----------------------------------+--------------------------------+\n
      \  | .nJabber                         | rpMauJabberTrap or             |\n   |
      \                                 | ifMauJabberTrap                |\n   +----------------------------------+--------------------------------+\n
      \  | oAutoNegotiation                 |                                |\n   +----------------------------------+--------------------------------+\n
      \  | .aAutoNegID                      | ifMauIndex                     |\n   +----------------------------------+--------------------------------+\n
      \  | .aAutoNegAdminState              | ifMauAutoNegAdminStatus        |\n   +----------------------------------+--------------------------------+\n
      \  | .aAutoNegRemoteSignalling        | ifMauAutoNegRemoteSignalling   |\n   |
      .aAutoNegAutoConfig              | ifMauAutoNegConfig             |\n   +----------------------------------+--------------------------------+\n
      \  | .aAutoNegLocalTechnologyAbility  | ifMauAutoNegCapabilityBits     |\n   +----------------------------------+--------------------------------+\n
      \  | .aAutoNegAdvertisedTechnologyAbi | ifMauAutoNegAdvertisedBits and |\n   |
      lity                             | ifMauAutoNegRemoteFaultAdverti |\n   |                                  |
      sed                            |\n   +----------------------------------+--------------------------------+\n
      \  | .aAutoNegReceivedTechnologyAbili | ifMauAutoNegReceivedBits and   |\n   |
      ty                               | ifMauAutoNegRemoteFaultReceive |\n   |                                  |
      d                              |\n   +----------------------------------+--------------------------------+\n
      \  | .acAutoNegRestartAutoConfig      | ifMauAutoNegRestart            |\n   +----------------------------------+--------------------------------+\n
      \  | .acAutoNegAdminControl           | ifMauAutoNegAdminStatus        |\n   +----------------------------------+--------------------------------+\n
      \             Table 1: Mapping of IEEE 802.3 Managed Objects\n   The following
      IEEE 802.3 managed objects have not been included in\n   the MAU-MIB for the
      following reasons.\n   +------------------------------------+------------------------------+\n
      \  | IEEE 802.3 Managed Object          | Reason for exclusion         |\n   +------------------------------------+------------------------------+\n
      \  | oMAU                               |                              |\n   +------------------------------------+------------------------------+\n
      \  | .aIdleErrorCount                   | Only useful for 100BaseT2,   |\n   |
      \                                   | which is not widely          |\n   |                                    |
      implemented.                 |\n   +------------------------------------+------------------------------+\n
      \  | oAutoNegotiation                   |                              |\n   +------------------------------------+------------------------------+\n
      \  | .aAutoNegLocalSelectorAbility      | Only needed for support of   |\n   |
      \                                   | isoethernet (802.9a), which  |\n   |                                    |
      is not supported by MAU-MIB. |\n   +------------------------------------+------------------------------+\n
      \  | .aAutoNegAdvertisedSelectorAbility |                              |\n   +------------------------------------+------------------------------+\n
      \  | .aAutoNegReceivedSelectorAbility   |                              |\n   +------------------------------------+------------------------------+\n
      \              Table 2: Unmapped IEEE 802.3 Managed Objects\n"
    title: 3.4.  Mapping of IEEE 802.3 Managed Objects
  - contents:
    - '3.5.  Addition of New MAU Types

      '
    - contents:
      - "3.5.1.  dot3MauType OBJECT-IDENTITIES\n   The dot3MauType OBJECT IDENTIFIER
        and its OBJECT-IDENTITY definitions\n   has been moved from the MAU-MIB into
        the IANA-maintained IANA-MAU-\n   MIB, the first version of which is defined
        in this document.\n   When a new IEEE 802.3 MAU is defined, IANA can re-issue
        a version of\n   IANA-MAU-MIB with the new dot3MauType OBJECT-IDENTITY and
        its\n   matching IANAifMauTypeListBits textual convention value and,\n   possibly,
        with new IANAifMauMediaAvailable, IANAifMauAutoNegCapBits,\n   and/or IANAifJackType
        values.\n   An Expert Review, as defined in RFC 2434 [RFC2434], is REQUIRED
        for\n   the addition of the new MAU, Media Available states, Auto Negotiation\n
        \  capabilities, and/or Jack types.\n   In some cases, new MAU types may require
        additional managed objects\n   or may have side effects on the behavior of
        existing managed objects.\n   In such cases a standards-track specification
        (which may be a new\n   document or a revision of this document) is also REQUIRED.
        \ Any such\n   document is REQUIRED to note any special properties of the
        MAU types\n   that it defines - for example, side effects on the ifStackTable
        as\n   noted in this document for 10GBASE-W MAUs.\n"
      title: 3.5.1.  dot3MauType OBJECT-IDENTITIES
    - contents:
      - "3.5.2.  IANAifMauTypeListBits TEXTUAL-CONVENTION\n   The syntax of ifMauTypeListBits
        is changed to be a textual\n   convention, such that the enumerated integer
        values are now defined\n   in the textual convention IANAifMauTypeListBits,
        which can be re-\n   specified (with additional values, when defined by IEEE
        802.3) in the\n   IANA-maintained MIB module without issuing a new version
        of this\n   document.\n"
      title: 3.5.2.  IANAifMauTypeListBits TEXTUAL-CONVENTION
    - contents:
      - "3.5.3.  IANAifMauMediaAvailable TEXTUAL-CONVENTION\n   The syntax of ifMauMediaAvailable
        and rpMauMediaAvailable is changed\n   to be a textual convention, such that
        the enumerated integer values\n   are now defined in the textual convention
        IANAifMauMediaAvailable,\n   which can be re-specified (with additional values,
        when defined by\n   IEEE 802.3) in the IANA-maintained MIB module without
        issuing a new\n   version of this document.\n"
      title: 3.5.3.  IANAifMauMediaAvailable TEXTUAL-CONVENTION
    - contents:
      - "3.5.4.  IANAifMauAutoNegCapBits TEXTUAL-CONVENTION\n   The syntax of ifMauAutoNegCapabilityBits,\n
        \  ifMauAutoNegCapAdvertisedBits, and ifMauAutoNegCapReceivedBits\n   objects
        is changed to be a textual convention, such that the\n   enumerated integer
        values are now defined in the textual convention\n   IANAifMauAutoNegCapBits,
        which can be re-specified (with additional\n   values, when defined by IEEE
        802.3) in the IANA-maintained MIB module\n   without issuing a new version
        of this document.\n"
      title: 3.5.4.  IANAifMauAutoNegCapBits TEXTUAL-CONVENTION
    - contents:
      - "3.5.5.  JackType TEXTUAL-CONVENTION\n   The JackType Textual Convention has
        been deprecated in favor of the\n   IANAifJackType defined in the IANA-maintained
        MIB module, so the new\n   Jack types can be added (when defined by IEEE 802.3)
        without issuing\n   a new version of this document.\n"
      title: 3.5.5.  JackType TEXTUAL-CONVENTION
    title: 3.5.  Addition of New MAU Types
  title: 3.  Overview
- contents:
  - "4.  MAU MIB Definitions\n   MAU-MIB DEFINITIONS ::= BEGIN\n     IMPORTS\n       Counter32,
    Integer32, Counter64,\n       OBJECT-TYPE, MODULE-IDENTITY, NOTIFICATION-TYPE,
    mib-2\n         FROM SNMPv2-SMI         -- RFC 2578\n       TruthValue, AutonomousType,
    TEXTUAL-CONVENTION\n         FROM SNMPv2-TC          -- RFC 2579\n       OBJECT-GROUP,
    MODULE-COMPLIANCE, NOTIFICATION-GROUP\n         FROM SNMPv2-CONF        -- RFC
    2580\n       InterfaceIndex\n         FROM IF-MIB             -- RFC 2863\n       IANAifMauTypeListBits,
    IANAifMauMediaAvailable,\n       IANAifMauAutoNegCapBits, IANAifJackType\n         FROM
    IANA-MAU-MIB\n                          -- http://www.iana.org/assignments/ianamau-mib\n
    \      ;\n     mauMod MODULE-IDENTITY\n       LAST-UPDATED \"200704210000Z\"  --
    April 21, 2007\n       ORGANIZATION \"IETF Ethernet Interfaces and Hub MIB Working
    Group\"\n       CONTACT-INFO\n         \"WG charter:\n           http://www.ietf.org/html.charters/hubmib-charter.html\n
    \        Mailing Lists:\n           General Discussion: hubmib@ietf.org\n           To
    Subscribe: hubmib-request@ietf.org\n           In Body: subscribe your_email_address\n
    \         Chair: Bert Wijnen\n         Postal: Alcatel-Lucent\n                 Schagen
    33\n                 3461 GL Linschoten\n                 Netherlands\n          Phone:
    +31-348-407-775\n          EMail: bwijnen@alcatel-lucent.com\n         Editor:
    Edward Beili\n         Postal: Actelis Networks Inc.\n                 25 Bazel
    St., P.O.B. 10173\n                 Petach-Tikva 10173\n                 Israel\n
    \           Tel: +972-3-924-3491\n          EMail: edward.beili@actelis.com\"\n
    \      DESCRIPTION\n         \"Management information for 802.3 MAUs.\n         The
    following reference is used throughout this MIB module:\n         [IEEE802.3]
    refers to:\n            IEEE Std 802.3, 2005 Edition: 'IEEE Standard for Information\n
    \           technology - Telecommunications and information exchange\n            between
    systems - Local and metropolitan area networks -\n            Specific requirements
    - Part 3: Carrier sense multiple\n            access with collision detection
    (CSMA/CD) access method and\n            physical layer specifications'.\n            Of
    particular interest is Clause 30, 'Management'.\n         Copyright (C) The IETF
    Trust (2007).\n         This version of this MIB module is part of RFC 4836;\n
    \        see the RFC itself for full legal notices.\"\n       REVISION    \"200704210000Z\"
    \ -- April 21, 2007\n       DESCRIPTION \"Updated to reference IANA maintaned
    textual\n                   conventions for MAU types, Media Availability state,\n
    \                  Auto Negotiation capabilities, and jack types,\n                   instead
    of using internally defined values.\n                   This version is published
    as RFC 4836.\"\n       REVISION    \"200309190000Z\"  -- September 19, 2003\n
    \      DESCRIPTION \"Updated to include support for 10 Gb/s MAUs.\n                   This
    resulted in the following revisions:\n                   - Added OBJECT-IDENTITY
    definitions for\n                     10 gigabit MAU types\n                   -
    Added fiberLC jack type to JackType TC\n                   - Extended ifMauTypeListBits
    with bits for\n                     the 10 gigabit MAU types\n                   -
    Added enumerations to ifMauMediaAvailable,\n                     and updated its
    DESCRIPTION to reflect\n                     behaviour at 10 Gb/s\n                   -
    Added 64-bit version of ifMauFalseCarriers\n                     and added mauIfGrpHCStats
    object group to\n                     contain the new object\n                   -
    Deprecated mauModIfCompl2 and replaced it\n                     with mauModIfCompl3,
    which includes the new\n                     object group\n                    This
    version published as RFC 3636.\"\n       REVISION    \"199908240400Z\" -- August
    24, 1999\n       DESCRIPTION \"This version published as RFC 2668.  Updated\n
    \                  to include support for 1000 Mb/sec\n                   MAUs
    and flow control negotiation.\"\n       REVISION    \"199710310000Z\" -- October
    31, 1997\n       DESCRIPTION \"Version published as RFC 2239.\"\n       REVISION
    \   \"199309300000Z\" -- September 30, 1993\n       DESCRIPTION \"Initial version,
    published as RFC 1515.\"\n       ::= { snmpDot3MauMgt 6 }\n      snmpDot3MauMgt
    OBJECT IDENTIFIER ::= { mib-2 26 }\n      -- Textual Conventions\n      JackType
    ::= TEXTUAL-CONVENTION\n        STATUS      deprecated\n        DESCRIPTION \"*********
    THIS TC IS DEPRECATED **********\n                    This TC has been deprecated
    in favour of\n                    IANAifJackType.\n                    Common
    enumeration values for repeater\n                    and interface MAU jack types.\"\n
    \       SYNTAX      INTEGER {\n                              other(1),\n                              rj45(2),\n
    \                             rj45S(3), -- rj45 shielded\n                              db9(4),\n
    \                             bnc(5),\n                              fAUI(6),
    \ -- female aui\n                              mAUI(7),  -- male aui\n                              fiberSC(8),\n
    \                             fiberMIC(9),\n                              fiberST(10),\n
    \                             telco(11),\n                              mtrj(12),
    \ -- fiber MT-RJ\n                              hssdc(13), -- fiber channel style-2\n
    \                             fiberLC(14)\n                          }\n      dot3RpMauBasicGroup\n
    \         OBJECT IDENTIFIER ::= { snmpDot3MauMgt 1 }\n      dot3IfMauBasicGroup\n
    \         OBJECT IDENTIFIER ::= { snmpDot3MauMgt 2 }\n      dot3BroadMauBasicGroup\n
    \         OBJECT IDENTIFIER ::= { snmpDot3MauMgt 3 }\n      -- OIDs under the
    following branch are reserved for\n      -- the IANA-MAU-MIB to assign as MAU
    type values:\n      --                        { snmpDot3MauMgt 4 }\n      dot3IfMauAutoNegGroup\n
    \         OBJECT IDENTIFIER ::= { snmpDot3MauMgt 5 }\n      -- the following OID
    is the MODULE-IDENTITY value\n      -- for this MIB module:   { snmpDot3MauMgt
    6 }\n      --\n      -- The Basic Repeater MAU Table\n      --\n      rpMauTable
    OBJECT-TYPE\n        SYNTAX      SEQUENCE OF RpMauEntry\n        MAX-ACCESS  not-accessible\n
    \       STATUS      current\n        DESCRIPTION \"Table of descriptive and status
    information\n                    about the MAU(s) attached to the ports of a\n
    \                   repeater.\"\n        ::= { dot3RpMauBasicGroup 1 }\n      rpMauEntry
    OBJECT-TYPE\n        SYNTAX      RpMauEntry\n        MAX-ACCESS  not-accessible\n
    \       STATUS      current\n        DESCRIPTION \"An entry in the table, containing
    information\n                    about a single MAU.\"\n        INDEX       {
    rpMauGroupIndex,\n                      rpMauPortIndex,\n                      rpMauIndex\n
    \                   }\n        ::= { rpMauTable 1 }\n      RpMauEntry ::=\n        SEQUENCE
    {\n            rpMauGroupIndex                     Integer32,\n            rpMauPortIndex
    \                     Integer32,\n            rpMauIndex                          Integer32,\n
    \           rpMauType                           AutonomousType,\n            rpMauStatus
    \                        INTEGER,\n            rpMauMediaAvailable                 IANAifMauMediaAvailable,\n
    \           rpMauMediaAvailableStateExits       Counter32,\n            rpMauJabberState
    \                   INTEGER,\n            rpMauJabberingStateEnters           Counter32,\n
    \           rpMauFalseCarriers                  Counter32\n      }\n      rpMauGroupIndex
    OBJECT-TYPE\n        SYNTAX      Integer32 (1..2147483647)\n        MAX-ACCESS
    \ read-only  -- read-only since originally an\n                               --
    SMIv1 index\n        STATUS      current\n        DESCRIPTION \"This variable
    uniquely identifies the group\n                    containing the port to which
    the MAU described\n                    by this entry is connected.\n                    Note:
    \ In practice, a group will generally be\n                    a field-replaceable
    unit (i.e., module, card,\n                    or board) that can fit in the physical
    system\n                    enclosure, and the group number will correspond\n
    \                   to a number marked on the physical enclosure.\n                    The
    group denoted by a particular value of this\n                    object is the
    same as the group denoted by the\n                    same value of rptrGroupIndex.\"\n
    \       REFERENCE   \"RFC 2108, rptrGroupIndex.\"\n        ::= { rpMauEntry 1
    }\n      rpMauPortIndex OBJECT-TYPE\n        SYNTAX      Integer32 (1..2147483647)\n
    \       MAX-ACCESS  read-only  -- read-only since originally an\n                               --
    SMIv1 index\n        STATUS      current\n        DESCRIPTION \"This variable
    uniquely identifies the repeater\n                    port within group rpMauGroupIndex
    to which the\n                    MAU described by this entry is connected.\"\n
    \       REFERENCE   \"RFC 2108, rptrPortIndex.\"\n        ::= { rpMauEntry 2 }\n
    \     rpMauIndex OBJECT-TYPE\n        SYNTAX      Integer32 (1..2147483647)\n
    \       MAX-ACCESS  read-only  -- read-only since originally an\n                               --
    SMIv1 index\n        STATUS      current\n        DESCRIPTION \"This variable
    uniquely identifies the MAU\n                    described by this entry from
    among other\n                    MAUs connected to the same port\n                    (rpMauPortIndex).\"\n
    \       REFERENCE   \"[IEEE802.3], 30.5.1.1.1, aMAUID.\"\n        ::= { rpMauEntry
    3 }\n      rpMauType OBJECT-TYPE\n        SYNTAX      AutonomousType\n        MAX-ACCESS
    \ read-only\n        STATUS      current\n        DESCRIPTION \"This object identifies
    the MAU type.  Values for\n                    standard IEEE 802.3 MAU types are
    defined in the\n                    IANA maintained IANA-MAU-MIB module, as\n
    \                   OBJECT-IDENTITIES of dot3MauType.\n                    If
    the MAU type is unknown, the object identifier\n                    zeroDotZero
    is returned.\"\n        REFERENCE   \"[IEEE802.3], 30.5.1.1.2, aMAUType.\"\n        ::=
    { rpMauEntry 4 }\n      rpMauStatus OBJECT-TYPE\n          SYNTAX      INTEGER
    {\n                          other(1),\n                          unknown(2),\n
    \                         operational(3),\n                          standby(4),\n
    \                         shutdown(5),\n                          reset(6)\n                      }\n
    \         MAX-ACCESS  read-write\n          STATUS      current\n          DESCRIPTION
    \"The current state of the MAU.  This object MAY\n                      be implemented
    as a read-only object by those\n                      agents and MAUs that do
    not implement software\n                      control of the MAU state.  Some
    agents may not\n                      support setting the value of this object
    to some\n                      of the enumerated values.\n                      The
    value other(1) is returned if the MAU is in\n                      a state other
    than one of the states 2 through\n                      6.\n                      The
    value unknown(2) is returned when the MAU's\n                      true state
    is unknown; for example, when it is\n                      being initialized.\n
    \                     A MAU in the operational(3) state is fully\n                      functional;
    it operates, and passes signals to its\n                      attached DTE or
    repeater port in accordance to\n                      its specification.\n                      A
    MAU in standby(4) state forces DI and CI to\n                      idle, and the
    media transmitter to idle or fault,\n                      if supported.  Standby(4)
    mode only applies to\n                      link type MAUs.  The state of\n                      rpMauMediaAvailable
    is unaffected.\n                      A MAU in shutdown(5) state assumes the same\n
    \                     condition on DI, CI, and the media transmitter,\n                      as
    though it were powered down or not connected.\n                      The MAU MAY
    return other(1) value for the\n                      rpMauJabberState and rpMauMediaAvailable
    objects\n                      when it is in this state.  For an AUI, this\n                      state
    will remove power from the AUI.\n                      Setting this variable to
    the value reset(6)\n                      resets the MAU in the same manner as
    a\n                      power-off, power-on cycle of at least one-half\n                      second
    would.  The agent is not required to\n                      return the value reset(6).\n
    \                     Setting this variable to the value\n                      operational(3),
    standby(4), or shutdown(5)\n                      causes the MAU to assume the
    respective state,\n                      except that setting a mixing-type MAU
    or an AUI\n                      to standby(4) will cause the MAU to enter the\n
    \                     shutdown state.\"\n          REFERENCE   \"[IEEE802.3],
    30.5.1.1.7, aMAUAdminState,\n                      30.5.1.2.2, acMAUAdminControl,
    and 30.5.1.2.1,\n                      acResetMAU.\"\n          ::= { rpMauEntry
    5 }\n      rpMauMediaAvailable OBJECT-TYPE\n          SYNTAX      IANAifMauMediaAvailable\n
    \         MAX-ACCESS  read-only\n          STATUS      current\n          DESCRIPTION
    \"This object identifies Media Available state of\n                      the MAU,
    complementary to the rpMauStatus.  Values\n                      for the standard
    IEEE 802.3 Media Available states\n                      are defined in the IANA
    maintained IANA-MAU-MIB\n                      module, as IANAifMauMediaAvailable
    TC.\"\n          REFERENCE   \"[IEEE802.3], 30.5.1.1.4, aMediaAvailable.\"\n          ::=
    { rpMauEntry 6 }\n      rpMauMediaAvailableStateExits OBJECT-TYPE\n          SYNTAX
    \     Counter32\n          MAX-ACCESS  read-only\n          STATUS      current\n
    \         DESCRIPTION \"A count of the number of times that\n                      rpMauMediaAvailable
    for this MAU instance leaves\n                      the state available(3).\n
    \                     Discontinuities in the value of this counter can\n                      occur
    at re-initialization of the management\n                      system and at other
    times, as indicated by the\n                      value of rptrMonitorPortLastChange.\"\n
    \         REFERENCE   \"[IEEE802.3], 30.5.1.1.5, aLoseMediaCounter.\n                      RFC
    2108, rptrMonitorPortLastChange\"\n          ::= { rpMauEntry 7 }\n      rpMauJabberState
    OBJECT-TYPE\n          SYNTAX      INTEGER {\n                          other(1),\n
    \                         unknown(2),\n                          noJabber(3),\n
    \                         jabbering(4)\n                      }\n          MAX-ACCESS
    \ read-only\n          STATUS      current\n          DESCRIPTION \"The value
    other(1) is returned if the jabber\n                      state is not 2, 3, or
    4.  The agent MUST always\n                      return other(1) for MAU type
    dot3MauTypeAUI.\n                      The value unknown(2) is returned when the
    MAU's\n                      true state is unknown; for example, when it is\n
    \                     being initialized.\n                      If the MAU is
    not jabbering the agent returns\n                      noJabber(3).  This is the
    'normal' state.\n                      If the MAU is in jabber state the agent
    returns\n                      the jabbering(4) value.\"\n          REFERENCE
    \"[IEEE802.3], 30.5.1.1.6, aJabber.jabberFlag.\"\n          ::= { rpMauEntry 8
    }\n      rpMauJabberingStateEnters OBJECT-TYPE\n          SYNTAX      Counter32\n
    \         MAX-ACCESS  read-only\n          STATUS      current\n          DESCRIPTION
    \"A count of the number of times that\n                      mauJabberState for
    this MAU instance enters the\n                      state jabbering(4).  For MAUs
    of type\n                      dot3MauTypeAUI, dot3MauType100BaseT4,\n                      dot3MauType100BaseTX,
    dot3MauType100BaseFX, and\n                      all 1000Mbps types, this counter
    will always\n                      indicate zero.\n                      Discontinuities
    in the value of this counter can\n                      occur at re-initialization
    of the management\n                      system and at other times, as indicated
    by the\n                      value of rptrMonitorPortLastChange.\"\n          REFERENCE
    \  \"[IEEE802.3], 30.5.1.1.6, aJabber.jabberCounter.\n                      RFC
    2108, rptrMonitorPortLastChange\"\n          ::= { rpMauEntry 9 }\n      rpMauFalseCarriers
    OBJECT-TYPE\n          SYNTAX      Counter32\n          MAX-ACCESS  read-only\n
    \         STATUS      current\n          DESCRIPTION \"A count of the number of
    false carrier events\n                      during IDLE in 100BASE-X links.  This
    counter\n                      does not increment at the symbol rate.  It can\n
    \                     increment after a valid carrier completion at a\n                      maximum
    rate of once per 100 ms until the next\n                      carrier event.\n
    \                     This counter increments only for MAUs of type\n                      dot3MauType100BaseT4,
    dot3MauType100BaseTX,\n                      dot3MauType100BaseFX, and all 1000Mbps
    types.\n                      For all other MAU types, this counter will\n                      always
    indicate zero.\n                      The approximate minimum time for rollover
    of\n                      this counter is 7.4 hours.\n                      Discontinuities
    in the value of this counter can\n                      occur at re-initialization
    of the management\n                      system and at other times, as indicated
    by the\n                      value of rptrMonitorPortLastChange.\"\n          REFERENCE
    \  \"[IEEE802.3], 30.5.1.1.10, aFalseCarriers.\n                      RFC 2108,
    rptrMonitorPortLastChange\"\n          ::= { rpMauEntry 10 }\n      -- The rpJackTable
    applies to MAUs attached to repeaters\n      -- which have one or more external
    jacks (connectors).\n      rpJackTable OBJECT-TYPE\n          SYNTAX      SEQUENCE
    OF RpJackEntry\n          MAX-ACCESS  not-accessible\n          STATUS      current\n
    \         DESCRIPTION \"Information about the external jacks attached\n                      to
    MAUs attached to the ports of a repeater.\"\n          ::= { dot3RpMauBasicGroup
    2 }\n      rpJackEntry OBJECT-TYPE\n          SYNTAX      RpJackEntry\n          MAX-ACCESS
    \ not-accessible\n          STATUS      current\n          DESCRIPTION \"An entry
    in the table, containing information\n                      about a particular
    jack.\"\n          INDEX       { rpMauGroupIndex,\n                        rpMauPortIndex,\n
    \                       rpMauIndex,\n                        rpJackIndex\n                      }\n
    \         ::= { rpJackTable 1 }\n      RpJackEntry ::=\n          SEQUENCE {\n
    \             rpJackIndex                         Integer32,\n              rpJackType
    \                         IANAifJackType\n          }\n      rpJackIndex OBJECT-TYPE\n
    \         SYNTAX      Integer32 (1..2147483647)\n          MAX-ACCESS  not-accessible\n
    \         STATUS      current\n          DESCRIPTION \"This variable uniquely
    identifies the jack\n                      described by this entry from among
    other jacks\n                      attached to the same MAU (rpMauIndex).\"\n
    \         ::= { rpJackEntry 1 }\n      rpJackType OBJECT-TYPE\n          SYNTAX
    \     IANAifJackType\n          MAX-ACCESS  read-only\n          STATUS      current\n
    \         DESCRIPTION \"The jack connector type, as it appears on the\n                      outside
    of the system.\"\n          ::= { rpJackEntry 2 }\n      --\n      -- The Basic
    Interface MAU Table\n      --\n      ifMauTable OBJECT-TYPE\n          SYNTAX
    \     SEQUENCE OF IfMauEntry\n          MAX-ACCESS  not-accessible\n          STATUS
    \     current\n          DESCRIPTION \"Table of descriptive and status information\n
    \                     about MAU(s) attached to an interface.\"\n          ::=
    { dot3IfMauBasicGroup 1 }\n      ifMauEntry OBJECT-TYPE\n          SYNTAX      IfMauEntry\n
    \         MAX-ACCESS  not-accessible\n          STATUS      current\n          DESCRIPTION
    \"An entry in the table, containing information\n                      about a
    single MAU.\"\n          INDEX       { ifMauIfIndex,\n                        ifMauIndex\n
    \                     }\n          ::= { ifMauTable 1 }\n      IfMauEntry ::=\n
    \         SEQUENCE {\n              ifMauIfIndex                      InterfaceIndex,\n
    \             ifMauIndex                        Integer32,\n              ifMauType
    \                        AutonomousType,\n              ifMauStatus                       INTEGER,\n
    \             ifMauMediaAvailable               IANAifMauMediaAvailable,\n              ifMauMediaAvailableStateExits
    \    Counter32,\n              ifMauJabberState                  INTEGER,\n              ifMauJabberingStateEnters
    \        Counter32,\n              ifMauFalseCarriers                Counter32,\n
    \             ifMauTypeList                     Integer32,\n              ifMauDefaultType
    \                 AutonomousType,\n              ifMauAutoNegSupported             TruthValue,\n
    \             ifMauTypeListBits                 IANAifMauTypeListBits,\n              ifMauHCFalseCarriers
    \             Counter64\n          }\n      ifMauIfIndex OBJECT-TYPE\n          SYNTAX
    \     InterfaceIndex\n          MAX-ACCESS  read-only  -- read-only since originally
    an\n                                 -- SMIv1 index\n          STATUS      current\n
    \         DESCRIPTION \"This variable uniquely identifies the interface\n                      to
    which the MAU described by this entry is\n                      connected.\"\n
    \         REFERENCE   \"RFC 2863, ifIndex\"\n          ::= { ifMauEntry 1 }\n
    \     ifMauIndex OBJECT-TYPE\n          SYNTAX      Integer32 (1..2147483647)\n
    \         MAX-ACCESS  read-only  -- read-only since originally an\n                                 --
    SMIv1 index\n          STATUS      current\n          DESCRIPTION \"This variable
    uniquely identifies the MAU\n                      described by this entry from
    among other MAUs\n                      connected to the same interface (ifMauIfIndex).\"\n
    \         REFERENCE   \"[IEEE802.3], 30.5.1.1.1, aMAUID.\"\n          ::= { ifMauEntry
    2 }\n      ifMauType OBJECT-TYPE\n        SYNTAX      AutonomousType\n        MAX-ACCESS
    \ read-only\n        STATUS      current\n        DESCRIPTION \"This object identifies
    the MAU type.  Values for\n                    standard IEEE 802.3 MAU types are
    defined in the\n                    IANA maintained IANA-MAU-MIB module, as\n
    \                   OBJECT-IDENTITIES of dot3MauType.\n                    If
    the MAU type is unknown, the object identifier\n                    zeroDotZero
    is returned.\n                    This object represents the operational type
    of\n                    the MAU, as determined by either 1) the result\n                    of
    the auto-negotiation function or 2) if\n                    auto-negotiation is
    not enabled or is not\n                    implemented for this MAU, by the value
    of the\n                    object ifMauDefaultType.  In case 2), a set to\n                    the
    object ifMauDefaultType will force the MAU\n                    into the new operating
    mode.\"\n        REFERENCE   \"[IEEE802.3], 30.5.1.1.2, aMAUType.\"\n        ::=
    { ifMauEntry 3 }\n      ifMauStatus OBJECT-TYPE\n          SYNTAX      INTEGER
    {\n                          other(1),\n                          unknown(2),\n
    \                         operational(3),\n                          standby(4),\n
    \                         shutdown(5),\n                          reset(6)\n                      }\n
    \         MAX-ACCESS  read-write\n          STATUS      current\n          DESCRIPTION
    \"The current state of the MAU.  This object MAY\n                      be implemented
    as a read-only object by those\n                      agents and MAUs that do
    not implement software\n                      control of the MAU state.  Some
    agents may not\n                      support setting the value of this object
    to some\n                      of the enumerated values.\n                      The
    value other(1) is returned if the MAU is in\n                      a state other
    than one of the states 2 through\n                      6.\n                      The
    value unknown(2) is returned when the MAU's\n                      true state
    is unknown; for example, when it is\n                      being initialized.\n
    \                     A MAU in the operational(3) state is fully\n                      functional;
    it operates, and passes signals to its\n                      attached DTE or
    repeater port in accordance to\n                      its specification.\n                      A
    MAU in standby(4) state forces DI and CI to\n                      idle and the
    media transmitter to idle or fault,\n                      if supported.  Standby(4)
    mode only applies to\n                      link type MAUs.  The state of\n                      ifMauMediaAvailable
    is unaffected.\n                      A MAU in shutdown(5) state assumes the same\n
    \                     condition on DI, CI, and the media transmitter,\n                      as
    though it were powered down or not connected.\n                      The MAU MAY
    return other(1) value for the\n                      ifMauJabberState and ifMauMediaAvailable
    objects\n                      when it is in this state.  For an AUI, this\n                      state
    will remove power from the AUI.\n                      Setting this variable to
    the value reset(6)\n                      resets the MAU in the same manner as
    a\n                      power-off, power-on cycle of at least one-half\n                      second
    would.  The agent is not required to\n                      return the value reset(6).\n
    \                     Setting this variable to the value\n                      operational(3),
    standby(4), or shutdown(5)\n                      causes the MAU to assume the
    respective state,\n                      except that setting a mixing-type MAU
    or an AUI\n                      to standby(4) will cause the MAU to enter the\n
    \                     shutdown state.\"\n          REFERENCE   \"[IEEE802.3],
    30.5.1.1.7, aMAUAdminState,\n                      30.5.1.2.2, acMAUAdminControl,
    and 30.5.1.2.1,\n                      acResetMAU.\"\n          ::= { ifMauEntry
    4 }\n      ifMauMediaAvailable OBJECT-TYPE\n          SYNTAX      IANAifMauMediaAvailable\n
    \         MAX-ACCESS  read-only\n          STATUS      current\n          DESCRIPTION
    \"This object identifies Media Available state of\n                      the MAU,
    complementary to the ifMauStatus.  Values\n                      for the standard
    IEEE 802.3 Media Available states\n                      are defined in the IANA
    maintained IANA-MAU-MIB\n                      module, as IANAifMauMediaAvailable
    TC.\"\n          REFERENCE   \"[IEEE802.3], 30.5.1.1.4, aMediaAvailable.\"\n          ::=
    { ifMauEntry 5 }\n      ifMauMediaAvailableStateExits OBJECT-TYPE\n          SYNTAX
    \     Counter32\n          MAX-ACCESS  read-only\n          STATUS      current\n
    \         DESCRIPTION \"A count of the number of times that\n                      ifMauMediaAvailable
    for this MAU instance leaves\n                      the state available(3).\n
    \                     Discontinuities in the value of this counter can\n                      occur
    at re-initialization of the management\n                      system and at other
    times, as indicated by the\n                      value of ifCounterDiscontinuityTime.\"\n
    \         REFERENCE   \"[IEEE802.3], 30.5.1.1.5, aLoseMediaCounter.\n                      RFC
    2863, ifCounterDiscontinuityTime.\"\n          ::= { ifMauEntry 6 }\n      ifMauJabberState
    OBJECT-TYPE\n          SYNTAX      INTEGER {\n                          other(1),\n
    \                         unknown(2),\n                          noJabber(3),\n
    \                         jabbering(4)\n                      }\n          MAX-ACCESS
    \ read-only\n          STATUS      current\n          DESCRIPTION \"The value
    other(1) is returned if the jabber\n                      state is not 2, 3, or
    4.  The agent MUST always\n                      return other(1) for MAU type
    dot3MauTypeAUI.\n                      The value unknown(2) is returned when the
    MAU's\n                      true state is unknown; for example, when it is\n
    \                     being initialized.\n                      If the MAU is
    not jabbering the agent returns\n                      noJabber(3).  This is the
    'normal' state.\n                      If the MAU is in jabber state the agent
    returns\n                      the jabbering(4) value.\"\n          REFERENCE
    \  \"[IEEE802.3], 30.5.1.1.6, aJabber.jabberFlag.\"\n          ::= { ifMauEntry
    7 }\n      ifMauJabberingStateEnters OBJECT-TYPE\n          SYNTAX      Counter32\n
    \         MAX-ACCESS  read-only\n          STATUS      current\n          DESCRIPTION
    \"A count of the number of times that\n                      mauJabberState for
    this MAU instance enters the\n                      state jabbering(4).  This
    counter will always\n                      indicate zero for MAUs of type dot3MauTypeAUI\n
    \                     and those of speeds above 10Mbps.\n                      Discontinuities
    in the value of this counter can\n                      occur at re-initialization
    of the management\n                      system and at other times, as indicated
    by the\n                      value of ifCounterDiscontinuityTime.\"\n          REFERENCE
    \  \"[IEEE802.3], 30.5.1.1.6, aJabber.jabberCounter.\n                      RFC
    2863, ifCounterDiscontinuityTime.\"\n          ::= { ifMauEntry 8 }\n      ifMauFalseCarriers
    OBJECT-TYPE\n          SYNTAX      Counter32\n          MAX-ACCESS  read-only\n
    \         STATUS      current\n          DESCRIPTION \"A count of the number of
    false carrier events\n                      during IDLE in 100BASE-X and 1000BASE-X
    links.\n                      For all other MAU types, this counter will\n                      always
    indicate zero.  This counter does not\n                      increment at the
    symbol rate.\n                      It can increment after a valid carrier\n                      completion
    at a maximum rate of once per 100 ms\n                      for 100BASE-X and
    once per 10us for 1000BASE-X\n                      until the next CarrierEvent.\n
    \                     This counter can roll over very quickly.  A\n                      management
    station is advised to poll the\n                      ifMauHCFalseCarriers instead
    of this counter in\n                      order to avoid loss of information.\n
    \                     Discontinuities in the value of this counter can\n                      occur
    at re-initialization of the management\n                      system and at other
    times, as indicated by the\n                      value of ifCounterDiscontinuityTime.\"\n
    \         REFERENCE   \"[IEEE802.3], 30.5.1.1.10, aFalseCarriers.\n                      RFC
    2863, ifCounterDiscontinuityTime.\"\n          ::= { ifMauEntry 9 }\n      ifMauTypeList
    OBJECT-TYPE\n          SYNTAX      Integer32\n          MAX-ACCESS  read-only\n
    \         STATUS      deprecated\n          DESCRIPTION \"********* THIS OBJECT
    IS DEPRECATED **********\n                      This object has been deprecated
    in favour of\n                      ifMauTypeListBits.\n                      A
    value that uniquely identifies the set of\n                      possible IEEE
    802.3 types that the MAU could be.\n                      The value is a sum that
    initially takes the\n                      value zero.  Then, for each type capability
    of\n                      this MAU, 2 raised to the power noted below is\n                      added
    to the sum.  For example, a MAU that has\n                      the capability
    to be only 10BASE-T would have a\n                      value of 512 (2**9).  In
    contrast, a MAU that\n                      supports both 10Base-T (full duplex)
    and\n                      100BASE-TX (full duplex) would have a value of\n                      ((2**11)
    + (2**16)), or 67584.\n                      The powers of 2 assigned to the capabilities
    are\n                      these:\n                      Power  Capability\n                        0
    \     other or unknown\n                        1      AUI\n                        2
    \     10BASE-5\n                        3      FOIRL\n                        4
    \     10BASE-2\n                        5      10BASE-T duplex mode unknown\n
    \                       6      10BASE-FP\n                        7      10BASE-FB\n
    \                       8      10BASE-FL duplex mode unknown\n                        9
    \     10BROAD36\n                       10      10BASE-T  half duplex mode\n                       11
    \     10BASE-T  full duplex mode\n                       12      10BASE-FL half
    duplex mode\n                       13      10BASE-FL full duplex mode\n                       14
    \     100BASE-T4\n                       15      100BASE-TX half duplex mode\n
    \                      16      100BASE-TX full duplex mode\n                       17
    \     100BASE-FX half duplex mode\n                       18      100BASE-FX full
    duplex mode\n                       19      100BASE-T2 half duplex mode\n                       20
    \     100BASE-T2 full duplex mode\n                      If auto-negotiation is
    present on this MAU, this\n                      object will map to ifMauAutoNegCapability.\"\n
    \         ::= { ifMauEntry 10 }\n      ifMauDefaultType OBJECT-TYPE\n          SYNTAX
    \     AutonomousType\n          MAX-ACCESS  read-write\n          STATUS      current\n
    \         DESCRIPTION \"This object identifies the default\n                      administrative
    baseband MAU type to be used in\n                      conjunction with the operational
    MAU type\n                      denoted by ifMauType.\n                      The
    set of possible values for this object is\n                      the same as the
    set defined for the ifMauType\n                      object.\n                      This
    object represents the\n                      administratively-configured type
    of the MAU.  If\n                      auto-negotiation is not enabled or is not\n
    \                     implemented for this MAU, the value of this\n                      object
    determines the operational type of the\n                      MAU.  In this case,
    a set to this object will\n                      force the MAU into the specified
    operating mode.\n                      If auto-negotiation is implemented and
    enabled\n                      for this MAU, the operational type of the MAU\n
    \                     is determined by auto-negotiation, and the value\n                      of
    this object denotes the type to which the MAU\n                      will automatically
    revert if/when\n                      auto-negotiation is later disabled.\n                      NOTE
    TO IMPLEMENTORS:  It may be necessary to\n                      provide for underlying
    hardware implementations\n                      which do not follow the exact
    behavior specified\n                      above.  In particular, when\n                      ifMauAutoNegAdminStatus
    transitions from enabled\n                      to disabled, the agent implementation
    MUST\n                      ensure that the operational type of the MAU (as\n
    \                     reported by ifMauType) correctly transitions to\n                      the
    value specified by this object, rather than\n                      continuing
    to operate at the value earlier\n                      determined by the auto-negotiation
    function.\"\n          REFERENCE   \"[IEEE802.3], 30.5.1.1.1, aMAUID, and 22.2.4.1.4.\"\n
    \         ::= { ifMauEntry 11 }\n      ifMauAutoNegSupported OBJECT-TYPE\n          SYNTAX
    \     TruthValue\n          MAX-ACCESS  read-only\n          STATUS      current\n
    \         DESCRIPTION \"This object indicates whether or not\n                      auto-negotiation
    is supported on this MAU.\"\n          ::= { ifMauEntry 12 }\n      ifMauTypeListBits
    OBJECT-TYPE\n          SYNTAX      IANAifMauTypeListBits\n          MAX-ACCESS
    \ read-only\n          STATUS      current\n          DESCRIPTION \"A value that
    uniquely identifies the set of\n                      possible IEEE 802.3 types
    that the MAU could be.\n                      If auto-negotiation is present on
    this MAU, this\n                      object will map to ifMauAutoNegCapabilityBits.\n
    \                     Note that this MAU may be capable of operating\n                      as
    a MAU type that is beyond the scope of this\n                      MIB.  This
    is indicated by returning the\n                      bit value bOther in addition
    to any bit values\n                      for standard capabilities that are listed
    in the\n                      IANAifMauTypeListBits TC.\"\n          ::= { ifMauEntry
    13 }\n      ifMauHCFalseCarriers OBJECT-TYPE\n          SYNTAX      Counter64\n
    \         MAX-ACCESS  read-only\n          STATUS      current\n          DESCRIPTION
    \"A count of the number of false carrier events\n                      during
    IDLE in 100BASE-X and 1000BASE-X links.\n                      For all other MAU
    types, this counter will\n                      always indicate zero.  This counter
    does not\n                      increment at the symbol rate.\n                      This
    counter is a 64-bit version of\n                      ifMauFalseCarriers.  Since
    the 32-bit version of\n                      this counter can roll over very quickly,\n
    \                     management stations are advised to poll the\n                      64-bit
    version instead, in order to avoid loss\n                      of information.\n
    \                     Discontinuities in the value of this counter can\n                      occur
    at re-initialization of the management\n                      system and at other
    times, as indicated by the\n                      value of ifCounterDiscontinuityTime.\"\n
    \         REFERENCE   \"[IEEE802.3], 30.5.1.1.10, aFalseCarriers.\n                      RFC
    2863, ifCounterDiscontinuityTime.\"\n          ::= { ifMauEntry 14 }\n      --
    The ifJackTable applies to MAUs attached to interfaces\n      -- which have one
    or more external jacks (connectors).\n      ifJackTable OBJECT-TYPE\n          SYNTAX
    \     SEQUENCE OF IfJackEntry\n          MAX-ACCESS  not-accessible\n          STATUS
    \     current\n          DESCRIPTION \"Information about the external jacks attached\n
    \                     to MAUs attached to an interface.\"\n          ::= { dot3IfMauBasicGroup
    2 }\n      ifJackEntry OBJECT-TYPE\n          SYNTAX      IfJackEntry\n          MAX-ACCESS
    \ not-accessible\n          STATUS      current\n          DESCRIPTION \"An entry
    in the table, containing information\n                      about a particular
    jack.\"\n          INDEX       { ifMauIfIndex,\n                        ifMauIndex,\n
    \                       ifJackIndex\n                      }\n          ::= {
    ifJackTable 1 }\n      IfJackEntry ::=\n          SEQUENCE {\n              ifJackIndex
    \                        Integer32,\n              ifJackType                          IANAifJackType\n
    \         }\n      ifJackIndex OBJECT-TYPE\n          SYNTAX      Integer32 (1..2147483647)\n
    \         MAX-ACCESS  not-accessible\n          STATUS      current\n          DESCRIPTION
    \"This variable uniquely identifies the jack\n                      described
    by this entry from among other jacks\n                      attached to the same
    MAU.\"\n          ::= { ifJackEntry 1 }\n      ifJackType OBJECT-TYPE\n          SYNTAX
    \     IANAifJackType\n          MAX-ACCESS  read-only\n          STATUS      current\n
    \         DESCRIPTION \"The jack connector type, as it appears on the\n                      outside
    of the system.\"\n          ::= { ifJackEntry 2 }\n      --\n      -- The MAU
    Auto-Negotiation Table\n      --\n      ifMauAutoNegTable OBJECT-TYPE\n          SYNTAX
    \     SEQUENCE OF IfMauAutoNegEntry\n          MAX-ACCESS  not-accessible\n          STATUS
    \     current\n          DESCRIPTION \"Configuration and status objects for the\n
    \                     auto-negotiation function of MAUs attached to\n                      interfaces.\n
    \                     The ifMauAutoNegTable applies to systems in\n                      which
    auto-negotiation is supported on one or\n                      more MAUs attached
    to interfaces.  Note that if\n                      auto-negotiation is present
    and enabled, the\n                      ifMauType object reflects the result of
    the\n                      auto-negotiation function.\"\n          ::= { dot3IfMauAutoNegGroup
    1 }\n      ifMauAutoNegEntry OBJECT-TYPE\n          SYNTAX      IfMauAutoNegEntry\n
    \         MAX-ACCESS  not-accessible\n          STATUS      current\n          DESCRIPTION
    \"An entry in the table, containing configuration\n                      and status
    information for the auto-negotiation\n                      function of a particular
    MAU.\"\n          INDEX       { ifMauIfIndex,\n                        ifMauIndex\n
    \                     }\n          ::= { ifMauAutoNegTable 1 }\n      IfMauAutoNegEntry
    ::=\n          SEQUENCE {\n              ifMauAutoNegAdminStatus           INTEGER,\n
    \             ifMauAutoNegRemoteSignaling       INTEGER,\n              ifMauAutoNegConfig
    \               INTEGER,\n              ifMauAutoNegCapability            Integer32,\n
    \             ifMauAutoNegCapAdvertised         Integer32,\n              ifMauAutoNegCapReceived
    \          Integer32,\n              ifMauAutoNegRestart               INTEGER,\n
    \             ifMauAutoNegCapabilityBits        IANAifMauAutoNegCapBits,\n              ifMauAutoNegCapAdvertisedBits
    \    IANAifMauAutoNegCapBits,\n              ifMauAutoNegCapReceivedBits       IANAifMauAutoNegCapBits,\n
    \             ifMauAutoNegRemoteFaultAdvertised INTEGER,\n              ifMauAutoNegRemoteFaultReceived
    \  INTEGER\n          }\n      ifMauAutoNegAdminStatus OBJECT-TYPE\n          SYNTAX
    \     INTEGER {\n                          enabled(1),\n                          disabled(2)\n
    \                     }\n          MAX-ACCESS  read-write\n          STATUS      current\n
    \         DESCRIPTION \"Setting this object to enabled(1) will cause\n                      the
    interface that has the auto-negotiation\n                      signaling ability
    to be enabled.\n                      If the value of this object is disabled(2)
    then\n                      the interface will act as it would if it had no\n
    \                     auto-negotiation signaling.  Under these\n                      conditions,
    an IEEE 802.3 MAU will immediately\n                      be forced to the state
    indicated by the value of\n                      the object ifMauDefaultType.\n
    \                     NOTE TO IMPLEMENTORS:  When\n                      ifMauAutoNegAdminStatus
    transitions from enabled\n                      to disabled, the agent implementation
    MUST\n                      ensure that the operational type of the MAU (as\n
    \                     reported by ifMauType) correctly transitions to\n                      the
    value specified by the ifMauDefaultType\n                      object, rather
    than continuing to operate at the\n                      value earlier determined
    by the auto-negotiation\n                      function.\"\n          REFERENCE
    \  \"[IEEE802.3], 30.6.1.1.2, aAutoNegAdminState,\n                      and 30.6.1.2.2,
    acAutoNegAdminControl.\"\n          ::= { ifMauAutoNegEntry 1 }\n      ifMauAutoNegRemoteSignaling
    OBJECT-TYPE\n          SYNTAX      INTEGER {\n                          detected(1),\n
    \                         notdetected(2)\n                      }\n          MAX-ACCESS
    \ read-only\n          STATUS      current\n          DESCRIPTION \"A value indicating
    whether the remote end of\n                      the link is using auto-negotiation
    signaling.  It\n                      takes the value detected(1) if and only
    if,\n                      during the previous link negotiation, FLP Bursts\n
    \                     were received.\"\n          REFERENCE   \"[IEEE802.3], 30.6.1.1.3,\n
    \                     aAutoNegRemoteSignaling.\"\n          ::= { ifMauAutoNegEntry
    2 }\n      ifMauAutoNegConfig OBJECT-TYPE\n          SYNTAX      INTEGER {\n                          other(1),\n
    \                         configuring(2),\n                          complete(3),\n
    \                         disabled(4),\n                          parallelDetectFail(5)\n
    \                     }\n          MAX-ACCESS  read-only\n          STATUS      current\n
    \         DESCRIPTION \"A value indicating the current status of the\n                      auto-negotiation
    process.  The enumeration\n                      parallelDetectFail(5) maps to
    a failure in\n                      parallel detection as defined in 28.2.3.1
    of\n                      [IEEE802.3].\"\n          REFERENCE   \"[IEEE802.3],
    30.6.1.1.4, aAutoNegAutoConfig.\"\n          ::= { ifMauAutoNegEntry 4 }\n      ifMauAutoNegCapability
    OBJECT-TYPE\n          SYNTAX      Integer32\n          MAX-ACCESS  read-only\n
    \         STATUS      deprecated\n          DESCRIPTION \"********* THIS OBJECT
    IS DEPRECATED **********\n                      This object has been deprecated
    in favour of\n                      ifMauAutoNegCapabilityBits.\n                      A
    value that uniquely identifies the set of\n                      capabilities
    of the local auto-negotiation\n                      entity.  The value is a sum
    that initially\n                      takes the value zero.  Then, for each capability\n
    \                     of this interface, 2 raised to the power noted\n                      below
    is added to the sum.  For example, an\n                      interface that has
    the capability to support\n                      only 100Base-TX half duplex would
    have a value\n                      of 32768 (2**15).  In contrast, an interface\n
    \                     that supports both 100Base-TX half duplex and\n                      100Base-TX
    full duplex would have a value of\n                      98304 ((2**15) + (2**16)).\n
    \                     The powers of 2 assigned to the capabilities are\n                      these:\n
    \                     Power   Capability\n                        0       other
    or unknown\n                       (1-9)    (reserved)\n                       10
    \      10BASE-T  half duplex mode\n                       11       10BASE-T  full
    duplex mode\n                       12       (reserved)\n                       13
    \      (reserved)\n                       14       100BASE-T4\n                       15
    \      100BASE-TX half duplex mode\n                       16       100BASE-TX
    full duplex mode\n                       17       (reserved)\n                       18
    \      (reserved)\n                       19      100BASE-T2 half duplex mode\n
    \                      20      100BASE-T2 full duplex mode\n                      Note
    that interfaces that support this MIB may\n                      have capabilities
    that extend beyond the scope\n                      of this MIB.\"\n          REFERENCE
    \  \"[IEEE802.3], 30.6.1.1.5,\n                      aAutoNegLocalTechnologyAbility.\"\n
    \         ::= { ifMauAutoNegEntry 5 }\n      ifMauAutoNegCapAdvertised OBJECT-TYPE\n
    \         SYNTAX      Integer32\n          MAX-ACCESS  read-write\n          STATUS
    \     deprecated\n          DESCRIPTION \"********* THIS OBJECT IS DEPRECATED
    **********\n                      This object has been deprecated in favour of\n
    \                     ifMauAutoNegCapAdvertisedBits.\n                      A
    value that uniquely identifies the set of\n                      capabilities
    advertised by the local\n                      auto-negotiation entity. Refer
    to\n                      ifMauAutoNegCapability for a description of the\n                      possible
    values of this object.\n                      Capabilities in this object that
    are not\n                      available in ifMauAutoNegCapability cannot be\n
    \                     enabled.\"\n          REFERENCE   \"[IEEE802.3], 30.6.1.1.6,\n
    \                     aAutoNegAdvertisedTechnologyAbility.\"\n          ::= {
    ifMauAutoNegEntry 6 }\n      ifMauAutoNegCapReceived OBJECT-TYPE\n          SYNTAX
    \     Integer32\n          MAX-ACCESS  read-only\n          STATUS      deprecated\n
    \         DESCRIPTION \"********* THIS OBJECT IS DEPRECATED **********\n                      This
    object has been deprecated in favour of\n                      ifMauAutoNegCapReceivedBits.\n
    \                     A value that uniquely identifies the set of\n                      capabilities
    received from the remote\n                      auto-negotiation entity. Refer
    to\n                      ifMauAutoNegCapability for a description of the\n                      possible
    values of this object.\n                      Note that interfaces that support
    this MIB may\n                      be attached to remote auto-negotiation entities\n
    \                     that have capabilities beyond the scope of this\n                      MIB.\"\n
    \         REFERENCE   \"[IEEE802.3], 30.6.1.1.7,\n                      aAutoNegReceivedTechnologyAbility.\"\n
    \         ::= { ifMauAutoNegEntry 7 }\n      ifMauAutoNegRestart OBJECT-TYPE\n
    \         SYNTAX      INTEGER {\n                          restart(1),\n                          norestart(2)\n
    \                     }\n          MAX-ACCESS  read-write\n          STATUS      current\n
    \         DESCRIPTION \"If the value of this object is set to\n                      restart(1)
    then this will force auto-negotiation\n                      to begin link renegotiation.
    \ If auto-negotiation\n                      signaling is disabled, a write to
    this object\n                      has no effect.\n                      Setting
    the value of this object to norestart(2)\n                      has no effect.\"\n
    \         REFERENCE   \"[IEEE802.3], 30.6.1.2.1,\n                      acAutoNegRestartAutoConfig.\"\n
    \         ::= { ifMauAutoNegEntry 8 }\n      ifMauAutoNegCapabilityBits OBJECT-TYPE\n
    \         SYNTAX      IANAifMauAutoNegCapBits\n          MAX-ACCESS  read-only\n
    \         STATUS      current\n          DESCRIPTION \"A value that uniquely identifies
    the set of\n                      capabilities of the local auto-negotiation\n
    \                     entity.  Note that interfaces that support this\n                      MIB
    may have capabilities that extend beyond the\n                      scope of this
    MIB.\n                      Note that the local auto-negotiation entity may\n
    \                     support some capabilities beyond the scope of\n                      this
    MIB.  This is indicated by returning the\n                      bit value bOther
    in addition to any bit values\n                      for standard capabilities
    that are listed in the\n                      IANAifMauAutoNegCapBits TC.\"\n
    \         REFERENCE   \"[IEEE802.3], 30.6.1.1.5,\n                      aAutoNegLocalTechnologyAbility.\"\n
    \         ::= { ifMauAutoNegEntry 9 }\n      ifMauAutoNegCapAdvertisedBits OBJECT-TYPE\n
    \         SYNTAX      IANAifMauAutoNegCapBits\n          MAX-ACCESS  read-write\n
    \         STATUS      current\n          DESCRIPTION \"A value that uniquely identifies
    the set of\n                      capabilities advertised by the local\n                      auto-negotiation
    entity.\n                      Capabilities in this object that are not\n                      available
    in ifMauAutoNegCapabilityBits cannot\n                      be enabled.\n                      Note
    that the local auto-negotiation entity may\n                      advertise some
    capabilities beyond the scope of\n                      this MIB.  This is indicated
    by returning the\n                      bit value bOther in addition to any bit
    values\n                      for standard capabilities that are listed in the\n
    \                     IANAifMauAutoNegCapBits TC.\"\n          REFERENCE   \"[IEEE802.3],
    30.6.1.1.6,\n                      aAutoNegAdvertisedTechnologyAbility.\"\n          ::=
    { ifMauAutoNegEntry 10 }\n      ifMauAutoNegCapReceivedBits OBJECT-TYPE\n          SYNTAX
    \     IANAifMauAutoNegCapBits\n          MAX-ACCESS  read-only\n          STATUS
    \     current\n          DESCRIPTION \"A value that uniquely identifies the set
    of\n                      capabilities received from the remote\n                      auto-negotiation
    entity.\n                      Note that interfaces that support this MIB may\n
    \                     be attached to remote auto-negotiation entities\n                      that
    have capabilities beyond the scope of this\n                      MIB.  This is
    indicated by returning the bit\n                      value bOther in addition
    to any bit values for\n                      standard capabilities that are listed
    in the\n                      IANAifMauAutoNegCapBits TC.\"\n          REFERENCE
    \  \"[IEEE802.3], 30.6.1.1.7,\n                      aAutoNegReceivedTechnologyAbility.\"\n
    \         ::= { ifMauAutoNegEntry 11 }\n      ifMauAutoNegRemoteFaultAdvertised
    OBJECT-TYPE\n          SYNTAX      INTEGER {\n                          noError(1),\n
    \                         offline(2),\n                          linkFailure(3),\n
    \                         autoNegError(4)\n                      }\n          MAX-ACCESS
    \ read-write\n          STATUS      current\n          DESCRIPTION \"A value that
    identifies any local fault\n                      indications that this MAU has
    detected and will\n                      advertise at the next auto-negotiation\n
    \                     interaction for 1000Mbps MAUs.\"\n          REFERENCE   \"[IEEE802.3],
    30.6.1.1.6,\n                      aAutoNegAdvertisedTechnologyAbility.\"\n          ::=
    { ifMauAutoNegEntry 12 }\n      ifMauAutoNegRemoteFaultReceived OBJECT-TYPE\n
    \         SYNTAX      INTEGER {\n                          noError(1),\n                          offline(2),\n
    \                         linkFailure(3),\n                          autoNegError(4)\n
    \                     }\n          MAX-ACCESS  read-only\n          STATUS      current\n
    \         DESCRIPTION \"A value that identifies any fault indications\n                      received
    from the far end of a link by the\n                      local auto-negotiation
    entity for 1000Mbps\n                      MAUs.\"\n          REFERENCE   \"[IEEE802.3],
    30.6.1.1.7,\n                      aAutoNegReceivedTechnologyAbility.\"\n          ::=
    { ifMauAutoNegEntry 13 }\n      --\n      -- The Basic Broadband MAU Table\n      --\n
    \     broadMauBasicTable OBJECT-TYPE\n          SYNTAX      SEQUENCE OF BroadMauBasicEntry\n
    \         MAX-ACCESS  not-accessible\n          STATUS      deprecated\n          DESCRIPTION
    \"********* THIS OBJECT IS DEPRECATED **********\n                      This entire
    table has been deprecated.  There\n                      have been no reported
    implementations of this\n                      table, and it is unlikely that
    there ever will\n                      be.  IEEE recommends that broadband MAU
    types\n                      should not be used for new installations.\n                      Table
    of descriptive and status information\n                      about the broadband
    MAUs connected to\n                      interfaces.\"\n          ::= { dot3BroadMauBasicGroup
    1 }\n      broadMauBasicEntry OBJECT-TYPE\n          SYNTAX      BroadMauBasicEntry\n
    \         MAX-ACCESS  not-accessible\n          STATUS      deprecated\n          DESCRIPTION
    \"********* THIS OBJECT IS DEPRECATED **********\n                      An entry
    in the table, containing information\n                      about a single broadband
    MAU.\"\n          INDEX       { broadMauIfIndex,\n                        broadMauIndex\n
    \                     }\n          ::= { broadMauBasicTable 1 }\n      BroadMauBasicEntry
    ::=\n          SEQUENCE {\n              broadMauIfIndex                     InterfaceIndex,\n
    \             broadMauIndex                       Integer32,\n              broadMauXmtRcvSplitType
    \            INTEGER,\n              broadMauXmtCarrierFreq              Integer32,\n
    \             broadMauTranslationFreq             Integer32\n          }\n      broadMauIfIndex
    OBJECT-TYPE\n          SYNTAX      InterfaceIndex\n          MAX-ACCESS  read-only
    \ -- read-only since originally an\n                                 -- SMIv1
    index\n          STATUS      deprecated\n          DESCRIPTION \"********* THIS
    OBJECT IS DEPRECATED **********\n                      This variable uniquely
    identifies the interface\n                      to which the MAU described by
    this entry is\n                      connected.\"\n          REFERENCE   \"RFC
    2863, ifIndex.\"\n          ::= { broadMauBasicEntry 1 }\n      broadMauIndex
    OBJECT-TYPE\n          SYNTAX      Integer32 (1..2147483647)\n          MAX-ACCESS
    \ read-only  -- read-only since originally an\n                                 --
    SMIv1 index\n          STATUS      deprecated\n          DESCRIPTION \"*********
    THIS OBJECT IS DEPRECATED **********\n                      This variable uniquely
    identifies the MAU\n                      connected to interface broadMauIfIndex
    that is\n                      described by this entry.\"\n          REFERENCE
    \  \"[IEEE802.3], 30.5.1.1.1, aMAUID.\"\n          ::= { broadMauBasicEntry 2
    }\n      broadMauXmtRcvSplitType OBJECT-TYPE\n          SYNTAX      INTEGER {\n
    \                         other(1),\n                          single(2),\n                          dual(3)\n
    \                     }\n          MAX-ACCESS  read-only\n          STATUS      deprecated\n
    \         DESCRIPTION \"********* THIS OBJECT IS DEPRECATED **********\n                      This
    object indicates the type of frequency\n                      multiplexing/cabling
    system used to separate the\n                      transmit and receive paths
    for the 10BROAD36\n                      MAU.\n                      The value
    other(1) is returned if the split type\n                      is not either single
    or dual.\n                      The value single(2) indicates a single cable\n
    \                     system.  The value dual(3) indicates a dual\n                      cable
    system, offset normally zero.\"\n          REFERENCE   \"[IEEE802.3], 30.5.1.1.8,
    aBbMAUXmitRcvSplitType.\"\n          ::= { broadMauBasicEntry 3 }\n      broadMauXmtCarrierFreq
    OBJECT-TYPE\n          SYNTAX      Integer32\n          MAX-ACCESS  read-only\n
    \         STATUS      deprecated\n          DESCRIPTION \"********* THIS OBJECT
    IS DEPRECATED **********\n                      This variable indicates the transmit
    carrier\n                      frequency of the 10BROAD36 MAU in MHz/4; that\n
    \                     is, in units of 250 kHz.\"\n          REFERENCE   \"[IEEE802.3],
    30.5.1.1.9,\n                      aBroadbandFrequencies.xmitCarrierFrequency.\"\n
    \         ::= { broadMauBasicEntry 4 }\n      broadMauTranslationFreq OBJECT-TYPE\n
    \         SYNTAX      Integer32\n          MAX-ACCESS  read-only\n          STATUS
    \     deprecated\n          DESCRIPTION \"********* THIS OBJECT IS DEPRECATED
    **********\n                      This variable indicates the translation offset\n
    \                     frequency of the 10BROAD36 MAU in MHz/4; that\n                      is,
    in units of 250 kHz.\"\n          REFERENCE   \"[IEEE802.3], 30.5.1.1.9,\n                      aBroadbandFrequencies.translationFrequency.\"\n
    \         ::= { broadMauBasicEntry 5 }\n      -- Notifications for use by 802.3
    MAUs\n      snmpDot3MauTraps OBJECT IDENTIFIER ::= { snmpDot3MauMgt 0 }\n      rpMauJabberTrap
    NOTIFICATION-TYPE\n          OBJECTS     { rpMauJabberState }\n          STATUS
    \     current\n          DESCRIPTION \"This trap is sent whenever a managed repeater\n
    \                     MAU enters the jabber state.\n                      The
    agent MUST throttle the generation of\n                      consecutive rpMauJabberTraps
    so that there is at\n                      least a five-second gap between them.\"\n
    \         REFERENCE   \"[IEEE802.3], 30.5.1.3.1, nJabber notification.\"\n          ::=
    { snmpDot3MauTraps 1 }\n      ifMauJabberTrap NOTIFICATION-TYPE\n          OBJECTS
    \    { ifMauJabberState }\n          STATUS      current\n          DESCRIPTION
    \"This trap is sent whenever a managed interface\n                      MAU enters
    the jabber state.\n                      The agent MUST throttle the generation
    of\n                      consecutive ifMauJabberTraps so that there is at\n                      least
    a five-second gap between them.\"\n          REFERENCE   \"[IEEE802.3], 30.5.1.3.1,
    nJabber notification.\"\n          ::= { snmpDot3MauTraps 2 }\n      -- Conformance
    information\n      mauModConf\n              OBJECT IDENTIFIER ::= { mauMod 1
    }\n        mauModCompls\n              OBJECT IDENTIFIER ::= { mauModConf 1 }\n
    \       mauModObjGrps\n              OBJECT IDENTIFIER ::= { mauModConf 2 }\n
    \       mauModNotGrps\n              OBJECT IDENTIFIER ::= { mauModConf 3 }\n
    \     -- Object groups\n      mauRpGrpBasic OBJECT-GROUP\n          OBJECTS     {
    rpMauGroupIndex,\n                        rpMauPortIndex,\n                        rpMauIndex,\n
    \                       rpMauType,\n                        rpMauStatus,\n                        rpMauMediaAvailable,\n
    \                       rpMauMediaAvailableStateExits,\n                        rpMauJabberState,\n
    \                       rpMauJabberingStateEnters\n                      }\n          STATUS
    \     current\n          DESCRIPTION \"Basic conformance group for MAUs attached
    to\n                      repeater ports.  This group is also the\n                      conformance
    specification for RFC 1515\n                      implementations.\"\n          ::=
    { mauModObjGrps 1 }\n      mauRpGrp100Mbs OBJECT-GROUP\n          OBJECTS     {
    rpMauFalseCarriers }\n          STATUS      current\n          DESCRIPTION \"Conformance
    group for MAUs attached to\n                      repeater ports with 100 Mb/s
    or greater\n                      capability.\"\n          ::= { mauModObjGrps
    2 }\n      mauRpGrpJack OBJECT-GROUP\n          OBJECTS     { rpJackType }\n          STATUS
    \     current\n          DESCRIPTION \"Conformance group for MAUs attached to\n
    \                     repeater ports with managed jacks.\"\n          ::= { mauModObjGrps
    3 }\n      mauIfGrpBasic OBJECT-GROUP\n          OBJECTS     { ifMauIfIndex,\n
    \                       ifMauIndex,\n                        ifMauType,\n                        ifMauStatus,\n
    \                       ifMauMediaAvailable,\n                        ifMauMediaAvailableStateExits,\n
    \                       ifMauJabberState,\n                        ifMauJabberingStateEnters\n
    \                     }\n          STATUS      current\n          DESCRIPTION
    \"Basic conformance group for MAUs attached to\n                      interfaces.
    \ This group also provides a\n                      conformance specification
    for RFC 1515\n                      implementations.\"\n          ::= { mauModObjGrps
    4 }\n      mauIfGrp100Mbs OBJECT-GROUP\n          OBJECTS     { ifMauFalseCarriers,\n
    \                       ifMauTypeList,\n                        ifMauDefaultType,\n
    \                       ifMauAutoNegSupported\n                      }\n          STATUS
    \     deprecated\n          DESCRIPTION \"********* THIS GROUP IS DEPRECATED **********\n
    \                     Conformance group for MAUs attached to\n                      interfaces
    with 100 Mb/s capability.\n                      This object group has been deprecated
    in favor\n                      of mauIfGrpHighCapacity.\"\n          ::= { mauModObjGrps
    5 }\n      mauIfGrpJack OBJECT-GROUP\n          OBJECTS     { ifJackType }\n          STATUS
    \     current\n          DESCRIPTION \"Conformance group for MAUs attached to\n
    \                     interfaces with managed jacks.\"\n          ::= { mauModObjGrps
    6 }\n      mauIfGrpAutoNeg OBJECT-GROUP\n          OBJECTS     { ifMauAutoNegAdminStatus,\n
    \                       ifMauAutoNegRemoteSignaling,\n                        ifMauAutoNegConfig,\n
    \                       ifMauAutoNegCapability,\n                        ifMauAutoNegCapAdvertised,\n
    \                       ifMauAutoNegCapReceived,\n                        ifMauAutoNegRestart\n
    \                     }\n          STATUS      deprecated\n          DESCRIPTION
    \"********* THIS GROUP IS DEPRECATED **********\n                      Conformance
    group for MAUs attached to\n                      interfaces with managed auto-negotiation.\n
    \                     This object group has been deprecated in favor\n                      of
    mauIfGrpAutoNeg2.\"\n          ::= { mauModObjGrps 7 }\n      mauBroadBasic OBJECT-GROUP\n
    \         OBJECTS     { broadMauIfIndex,\n                        broadMauIndex,\n
    \                       broadMauXmtRcvSplitType,\n                        broadMauXmtCarrierFreq,\n
    \                       broadMauTranslationFreq\n                      }\n          STATUS
    \     deprecated\n          DESCRIPTION \"********* THIS GROUP IS DEPRECATED **********\n
    \                     Conformance group for broadband MAUs attached\n                      to
    interfaces.\n                      This object group is deprecated.  There have\n
    \                     been no reported implementations of this group,\n                      and
    it was felt to be unlikely that there will\n                      be any future
    implementations.\"\n          ::= { mauModObjGrps 8 }\n      mauIfGrpHighCapacity
    OBJECT-GROUP\n          OBJECTS     { ifMauFalseCarriers,\n                        ifMauTypeListBits,\n
    \                       ifMauDefaultType,\n                        ifMauAutoNegSupported\n
    \                     }\n          STATUS      current\n          DESCRIPTION
    \"Conformance group for MAUs attached to\n                      interfaces with
    100 Mb/s or greater capability.\"\n          ::= { mauModObjGrps 9 }\n      mauIfGrpAutoNeg2
    OBJECT-GROUP\n          OBJECTS     { ifMauAutoNegAdminStatus,\n                        ifMauAutoNegRemoteSignaling,\n
    \                       ifMauAutoNegConfig,\n                        ifMauAutoNegCapabilityBits,\n
    \                       ifMauAutoNegCapAdvertisedBits,\n                        ifMauAutoNegCapReceivedBits,\n
    \                       ifMauAutoNegRestart\n                      }\n          STATUS
    \     current\n          DESCRIPTION \"Conformance group for MAUs attached to\n
    \                     interfaces with managed auto-negotiation.\"\n          ::=
    { mauModObjGrps 10 }\n      mauIfGrpAutoNeg1000Mbps OBJECT-GROUP\n          OBJECTS
    \    { ifMauAutoNegRemoteFaultAdvertised,\n                        ifMauAutoNegRemoteFaultReceived\n
    \                     }\n          STATUS      current\n          DESCRIPTION
    \"Conformance group for 1000Mbps MAUs attached to\n                      interfaces
    with managed auto-negotiation.\"\n          ::= { mauModObjGrps 11 }\n      mauIfGrpHCStats
    OBJECT-GROUP\n          OBJECTS     { ifMauHCFalseCarriers }\n          STATUS
    \     current\n          DESCRIPTION \"Conformance for high capacity statistics
    for\n                      MAUs attached to interfaces.\"\n          ::= { mauModObjGrps
    12 }\n      -- Notification groups\n      rpMauNotifications NOTIFICATION-GROUP\n
    \         NOTIFICATIONS { rpMauJabberTrap }\n          STATUS      current\n          DESCRIPTION
    \"Notifications for repeater MAUs.\"\n          ::= { mauModNotGrps 1 }\n      ifMauNotifications
    NOTIFICATION-GROUP\n          NOTIFICATIONS { ifMauJabberTrap }\n          STATUS
    \     current\n          DESCRIPTION \"Notifications for interface MAUs.\"\n          ::=
    { mauModNotGrps 2 }\n      -- Compliances\n      mauModRpCompl MODULE-COMPLIANCE\n
    \         STATUS      deprecated\n          DESCRIPTION \"******** THIS COMPLIANCE
    IS DEPRECATED ********\n                      Compliance for MAUs attached to
    repeater\n                      ports.\n                      This compliance
    is deprecated and replaced by\n                      mauModRpCompl2, which corrects
    an oversight by\n                      allowing rpMauStatus to be implemented\n
    \                     read-only.\"\n          MODULE -- this module\n              MANDATORY-GROUPS
    { mauRpGrpBasic }\n              GROUP       mauRpGrp100Mbs\n              DESCRIPTION
    \"Implementation of this optional group is\n                          recommended
    for MAUs that have 100Mb/s or\n                          greater capability.\"\n
    \             GROUP       mauRpGrpJack\n              DESCRIPTION \"Implementation
    of this optional group is\n                          recommended for MAUs that
    have one or more\n                          external jacks.\"\n              GROUP
    \      rpMauNotifications\n              DESCRIPTION \"Implementation of this
    group is recommended\n                          for MAUs attached to repeater
    ports.\"\n          ::= { mauModCompls 1 }\n      mauModIfCompl MODULE-COMPLIANCE\n
    \         STATUS      deprecated\n          DESCRIPTION \"******** THIS COMPLIANCE
    IS DEPRECATED ********\n                      Compliance for MAUs attached to
    interfaces.\n                      This compliance is deprecated and replaced
    by\n                      mauModIfCompl2.\"\n          MODULE -- this module\n
    \             MANDATORY-GROUPS { mauIfGrpBasic }\n              GROUP       mauIfGrp100Mbs\n
    \             DESCRIPTION \"Implementation of this optional group is\n                          recommended
    for MAUs that have 100Mb/s\n                          capability.\"\n              GROUP
    \      mauIfGrpJack\n              DESCRIPTION \"Implementation of this optional
    group is\n                          recommended for MAUs that have one or more\n
    \                         external jacks.\"\n              GROUP       mauIfGrpAutoNeg\n
    \             DESCRIPTION \"Implementation of this group is mandatory\n                          for
    MAUs that support managed\n                          auto-negotiation.\"\n              GROUP
    \      mauBroadBasic\n              DESCRIPTION \"Implementation of this group
    is mandatory\n                          for broadband MAUs.\"\n              GROUP
    \      ifMauNotifications\n              DESCRIPTION \"Implementation of this
    group is recommended\n                          for MAUs attached to interfaces.\"\n
    \         ::= { mauModCompls 2 }\n      mauModIfCompl2 MODULE-COMPLIANCE\n          STATUS
    \     deprecated\n          DESCRIPTION \"******** THIS COMPLIANCE IS DEPRECATED
    ********\n                      Compliance for MAUs attached to interfaces.\n
    \                     This compliance is deprecated and replaced by\n                      mauModIfCompl3.\"\n
    \         MODULE -- this module\n              MANDATORY-GROUPS { mauIfGrpBasic
    }\n              GROUP       mauIfGrpHighCapacity\n              DESCRIPTION \"Implementation
    of this optional group is\n                          recommended for MAUs that
    have 100Mb/s\n                          or greater capability.\"\n              GROUP
    \      mauIfGrpJack\n              DESCRIPTION \"Implementation of this optional
    group is\n                          recommended for MAUs that have one or more\n
    \                         external jacks.\"\n              GROUP       mauIfGrpAutoNeg2\n
    \             DESCRIPTION \"Implementation of this group is mandatory\n                          for
    MAUs that support managed\n                          auto-negotiation.\"\n              GROUP
    \      mauIfGrpAutoNeg1000Mbps\n              DESCRIPTION \"Implementation of
    this group is mandatory\n                          for MAUs that have 1000Mb/s
    or greater\n                          capability and support managed\n                          auto-negotiation.\"\n
    \             GROUP       ifMauNotifications\n              DESCRIPTION \"Implementation
    of this group is recommended\n                          for MAUs attached to interfaces.\"\n
    \             OBJECT      ifMauStatus\n              MIN-ACCESS  read-only\n              DESCRIPTION
    \"Write access is not required.\"\n          ::= { mauModCompls 3 }\n      mauModRpCompl2
    MODULE-COMPLIANCE\n          STATUS      current\n          DESCRIPTION \"Compliance
    for MAUs attached to repeater\n                      ports.\n                      Note
    that compliance with this compliance\n                      statement requires
    compliance with the\n                      snmpRptrModCompl MODULE-COMPLIANCE
    statement of\n                      the SNMP-REPEATER-MIB (RFC 2108).\"\n          MODULE
    -- this module\n              MANDATORY-GROUPS { mauRpGrpBasic }\n              GROUP
    \      mauRpGrp100Mbs\n              DESCRIPTION \"Implementation of this optional
    group is\n                          recommended for MAUs that have 100Mb/s or\n
    \                         greater capability.\"\n              GROUP       mauRpGrpJack\n
    \             DESCRIPTION \"Implementation of this optional group is\n                          recommended
    for MAUs that have one or more\n                          external jacks.\"\n
    \             GROUP       rpMauNotifications\n              DESCRIPTION \"Implementation
    of this group is recommended\n                          for MAUs attached to repeater
    ports.\"\n              OBJECT      rpMauStatus\n              MIN-ACCESS  read-only\n
    \             DESCRIPTION \"Write access is not required.\"\n          ::= { mauModCompls
    4 }\n      mauModIfCompl3 MODULE-COMPLIANCE\n          STATUS      current\n          DESCRIPTION
    \"Compliance for MAUs attached to interfaces.\n                      Note that
    compliance with this compliance\n                      statement requires compliance
    with the\n                      ifCompliance3 MODULE-COMPLIANCE statement of the\n
    \                     IF-MIB (RFC 2863) and the dot3Compliance2\n                      MODULE-COMPLIANCE
    statement of the\n                      EtherLike-MIB (RFC3635).\"\n          MODULE
    -- this module\n              MANDATORY-GROUPS { mauIfGrpBasic }\n              GROUP
    \      mauIfGrpHighCapacity\n              DESCRIPTION \"Implementation of this
    optional group is\n                          recommended for MAUs that have 100Mb/s\n
    \                         or greater capability.\"\n              GROUP       mauIfGrpHCStats\n
    \             DESCRIPTION \"Implementation of this group is mandatory\n                          for
    MAUs that have 1000Mb/s capacity, and\n                          is recommended
    for MAUs that have 100Mb/s\n                          capacity.\"\n              GROUP
    \      mauIfGrpJack\n              DESCRIPTION \"Implementation of this optional
    group is\n                          recommended for MAUs that have one or more\n
    \                         external jacks.\"\n              GROUP       mauIfGrpAutoNeg2\n
    \             DESCRIPTION \"Implementation of this group is mandatory\n                          for
    MAUs that support managed\n                          auto-negotiation.\"\n              GROUP
    \      mauIfGrpAutoNeg1000Mbps\n              DESCRIPTION \"Implementation of
    this group is mandatory\n                          for MAUs that have 1000Mb/s
    or greater\n                          capability and support managed\n                          auto-negotiation.\"\n
    \             GROUP       ifMauNotifications\n              DESCRIPTION \"Implementation
    of this group is recommended\n                          for MAUs attached to interfaces.\"\n
    \             OBJECT      ifMauStatus\n              MIN-ACCESS  read-only\n              DESCRIPTION
    \"Write access is not required.\"\n          ::= { mauModCompls 5 }\n   END\n"
  title: 4.  MAU MIB Definitions
- contents:
  - "5.  IANA-Maintained MAU TC Definitions\n   IANA-MAU-MIB DEFINITIONS ::= BEGIN\n
    \    IMPORTS\n       MODULE-IDENTITY, OBJECT-IDENTITY, mib-2\n         FROM SNMPv2-SMI\n
    \      TEXTUAL-CONVENTION\n         FROM SNMPv2-TC\n       ;\n     ianaMauMIB
    MODULE-IDENTITY\n       LAST-UPDATED \"200704210000Z\"  -- April 21, 2007\n       ORGANIZATION
    \"IANA\"\n       CONTACT-INFO \"        Internet Assigned Numbers Authority\n
    \                    Postal: ICANN\n                             4676 Admiralty
    Way, Suite 330\n                             Marina del Rey, CA 90292\n                        Tel:
    +1-310-823-9358\n                      EMail: iana@iana.org\"\n       DESCRIPTION\n
    \        \"This MIB module defines dot3MauType OBJECT-IDENTITIES and\n         IANAifMauListBits,
    IANAifMauMediaAvailable,\n         IANAifMauAutoNegCapBits, and IANAifJackType\n
    \        TEXTUAL-CONVENTIONs, specifying enumerated values of the\n         ifMauTypeListBits,
    ifMauMediaAvailable / rpMauMediaAvailable,\n         ifMauAutoNegCapabilityBits
    / ifMauAutoNegCapAdvertisedBits /\n         ifMauAutoNegCapReceivedBits and ifJackType
    / rpJackType objects\n         respectively, defined in the MAU-MIB.\n         It
    is intended that each new MAU type, Media Availability\n         state, Auto Negotiation
    capability and/or Jack type defined by\n         the IEEE 802.3 working group
    and approved for publication in a\n         revision of IEEE Std 802.3 will be
    added to this MIB module,\n         provided that it is suitable for being managed
    by the base\n         objects in the MAU-MIB.  An Expert Review, as defined in\n
    \        RFC 2434 [RFC2434], is REQUIRED for such additions.\n         The following
    reference is used throughout this MIB module:\n         [IEEE802.3] refers to:\n
    \           IEEE Std 802.3, 2005 Edition: 'IEEE Standard for\n            Information
    technology - Telecommunications and information\n            exchange between
    systems - Local and metropolitan area\n            networks - Specific requirements
    -\n            Part 3: Carrier sense multiple access with collision\n            detection
    (CSMA/CD) access method and physical layer\n            specifications'.\n         This
    reference should be updated as appropriate when new\n         MAU types, Media
    Availability states, Auto Negotiation\n         capabilities, and/or Jack types
    are added to this MIB module.\n         Copyright (C) The IETF Trust (2007).\n
    \        The initial version of this MIB module was published in\n         RFC
    4836; for full legal notices see the RFC itself.\n         Supplementary information
    may be available at:\n         http://www.ietf.org/copyrights/ianamib.html\"\n
    \      REVISION     \"200704210000Z\"  -- April 21, 2007\n       DESCRIPTION  \"Initial
    version of this MIB as published in\n                     RFC 4836.\"\n       ::=
    { mib-2 154 }\n     -- Textual Conventions\n     IANAifMauTypeListBits ::= TEXTUAL-CONVENTION\n
    \      STATUS       current\n       DESCRIPTION\n         \"This data type is
    used as the syntax of the ifMauTypeListBits\n         object in the (updated)
    definition of MAU-MIB's ifMauTable.\n         The most recent version of this
    textual convention is available\n         in the online version of this MIB module
    on the IANA web site.\n         Requests for new values should be made to IANA
    via email\n         (iana@iana.org).\n         Note that changes in this textual
    convention SHALL be\n         synchronized with relevant changes in the dot3MauType\n
    \        OBJECT-IDENTITIES.\"\n       REFERENCE\n         \"[IEEE802.3], Section
    30.5.1.1.2\"\n       SYNTAX       BITS {\n              bOther(0),          --
    other or unknown\n              bAUI(1),            -- AUI\n              b10base5(2),
    \       -- 10BASE-5\n              bFoirl(3),          -- FOIRL\n              b10base2(4),
    \       -- 10BASE-2\n              b10baseT(5),        -- 10BASE-T duplex mode
    unknown\n              b10baseFP(6),       -- 10BASE-FP\n              b10baseFB(7),
    \      -- 10BASE-FB\n              b10baseFL(8),       -- 10BASE-FL duplex mode
    unknown\n              b10broad36(9),      -- 10BROAD36\n              b10baseTHD(10),
    \    -- 10BASE-T  half duplex mode\n              b10baseTFD(11),     -- 10BASE-T
    \ full duplex mode\n              b10baseFLHD(12),    -- 10BASE-FL half duplex
    mode\n              b10baseFLFD(13),    -- 10BASE-FL full duplex mode\n              b100baseT4(14),
    \    -- 100BASE-T4\n              b100baseTXHD(15),   -- 100BASE-TX half duplex
    mode\n              b100baseTXFD(16),   -- 100BASE-TX full duplex mode\n              b100baseFXHD(17),
    \  -- 100BASE-FX half duplex mode\n              b100baseFXFD(18),   -- 100BASE-FX
    full duplex mode\n              b100baseT2HD(19),   -- 100BASE-T2 half duplex
    mode\n              b100baseT2FD(20),   -- 100BASE-T2 full duplex mode\n              b1000baseXHD(21),
    \  -- 1000BASE-X half duplex mode\n              b1000baseXFD(22),   -- 1000BASE-X
    full duplex mode\n              b1000baseLXHD(23),  -- 1000BASE-LX half duplex
    mode\n              b1000baseLXFD(24),  -- 1000BASE-LX full duplex mode\n              b1000baseSXHD(25),
    \ -- 1000BASE-SX half duplex mode\n              b1000baseSXFD(26),  -- 1000BASE-SX
    full duplex mode\n              b1000baseCXHD(27),  -- 1000BASE-CX half duplex
    mode\n              b1000baseCXFD(28),  -- 1000BASE-CX full duplex mode\n              b1000baseTHD(29),
    \  -- 1000BASE-T half duplex mode\n              b1000baseTFD(30),   -- 1000BASE-T
    full duplex mode\n              b10GbaseX(31),      -- 10GBASE-X\n              b10GbaseLX4(32),
    \   -- 10GBASE-LX4\n              b10GbaseR(33),      -- 10GBASE-R\n              b10GbaseER(34),
    \    -- 10GBASE-ER\n              b10GbaseLR(35),     -- 10GBASE-LR\n              b10GbaseSR(36),
    \    -- 10GBASE-SR\n              b10GbaseW(37),      -- 10GBASE-W\n              b10GbaseEW(38),
    \    -- 10GBASE-EW\n              b10GbaseLW(39),     -- 10GBASE-LW\n              b10GbaseSW(40),
    \    -- 10GBASE-SW\n              -- new since RFC 3636\n              b10GbaseCX4(41),
    \   -- 10GBASE-CX4\n              b2BaseTL(42),       -- 2BASE-TL\n              b10PassTS(43),
    \     -- 10PASS-TS\n              b100BaseBX10D(44),  -- 100BASE-BX10D\n              b100BaseBX10U(45),
    \ -- 100BASE-BX10U\n              b100BaseLX10(46),   -- 100BASE-LX10\n              b1000BaseBX10D(47),
    -- 1000BASE-BX10D\n              b1000BaseBX10U(48), -- 1000BASE-BX10U\n              b1000BaseLX10(49),
    \ -- 1000BASE-LX10\n              b1000BasePX10D(50), -- 1000BASE-PX10D\n              b1000BasePX10U(51),
    -- 1000BASE-PX10U\n              b1000BasePX20D(52), -- 1000BASE-PX20D\n              b1000BasePX20U(53)
    \ -- 1000BASE-PX20U\n         }\n     IANAifMauMediaAvailable ::= TEXTUAL-CONVENTION\n
    \      STATUS       current\n       DESCRIPTION\n         \"This data type is
    used as the syntax of the\n         ifMauMediaAvailable and rpMauMediaAvailable
    objects in the\n         (updated) definition of MAU-MIB's ifMauTable and rpMauTable\n
    \        respectively.\n         Possible values are:\n           other(1)             -
    undefined (not listed below)\n           unknown(2)           - MAU's true state
    is unknown; e.g.,\n                                  during initialization\n           available(3)
    \        - link, light, or loopback is normal\n           notAvailable(4)      -
    link loss, low light, or no loopback\n           remoteFault(5)       - a fault
    has been detected at the\n                                  remote end of the
    link.  This value\n                                  applies to 10BASE-FB, 100BASE-T4
    Far\n                                  End Fault Indication and non-specified\n
    \                                 remote faults from a system running\n                                  auto-negotiation\n
    \          invalidSignal(6)     - invalid signal has been received from\n                                  the
    other end of the link, 10BASE-FB\n                                  only\n           remoteJabber(7)
    \     - remote fault, due to jabber\n           remoteLinkLoss(8)    - remote
    fault, due to link loss\n           remoteTest(9)        - remote fault, due to
    test\n           offline(10)          - offline, Clause 37 Auto-Negotiation\n
    \                                 only\n           autoNegError(11)     - Auto-Negotiation
    Error, Clause 37\n                                  Auto-Negotiation only\n           pmdLinkFault(12)
    \    - PMA/PMD receive link fault.  In case\n                                  of
    PAF (2BASE-TL / 10PASS-TS PHYs),\n                                  all PMEs in
    the aggregation group have\n                                  detected a link
    fault\n           wisFrameLoss(13)     - WIS loss of frame, 10GBASE-W only\n           wisSignalLoss(14)
    \   - WIS loss of signal, 10GBASE-W only\n           pcsLinkFault(15)     - PCS
    receive link fault\n           excessiveBER(16)     - PCS Bit Error Ratio monitor\n
    \                                 reporting excessive error ratio\n           dxsLinkFault(17)
    \    - DTE XGXS receive link fault, XAUI only\n           pxsLinkFault(18)     -
    PHY XGXS receive link fault, XAUI only\n           availableReduced(19) - link
    normal, reduced bandwidth,\n                                  2BASE-TL / 10PASS-TS
    only\n           ready(20)            - at least one PME in the aggregation\n
    \                                 group is detecting handshake tones,\n                                  2BASE-TL
    / 10PASS-TS only\n         If the MAU is a 10M b/s link or fiber type (FOIRL,
    10BASE-T,\n         10BASE-F), then this is equivalent to the link test fail\n
    \        state/low light function.  For an AUI, 10BASE2, 10BASE5, or\n         10BROAD36
    MAU, this indicates whether loopback is detected on\n         the DI circuit.
    \ The value of this attribute persists between\n         packets for MAU types
    AUI, 10BASE5, 10BASE2, 10BROAD36, and\n         10BASEFP.\n         At power-up
    or following a reset, the Media Available state\n         will be unknown(2) for
    AUI, 10BASE5, 10BASE2, 10BROAD36, and\n         10BASE-FP MAUs.  For these MAUs
    loopback will be tested on each\n         transmission during which no collision
    is detected.\n         If DI is receiving input when DO returns to IDL after a\n
    \        transmission and there has been no collision during the\n         transmission,
    then loopback will be detected.  The Media\n         Available state will only
    change during noncollided\n         transmissions for AUI, 10BASE2, 10BASE5, 10BROAD36,
    and\n         10BASE-FP MAUs.\n         For 100BASE-T2, 100BASE-T4, 100BASE-TX,
    100BASE-FX,\n         100BASE-LX10, and 100BASE-BX10 PHYs the enumerations match
    the\n         states within the link integrity state diagram.\n         Any MAU
    that implements management of [IEEE802.3] Clause\n         28 Auto-Negotiation,
    will map remote fault indication to\n         remoteFault(5).\n         Any MAU
    that implements management of Clause 37\n         Auto-Negotiation, will map the
    received RF1 and RF2 bits as\n         follows: Offline maps to offline(10), Link_Failure
    maps to\n         remoteFault(5), and Auto-Negotiation Error maps to\n         autoNegError(11).\n
    \        The value remoteFault(5) applies to 10BASE-FB remote\n         fault
    indication, the 100BASE-X far-end fault indication, and\n         nonspecified
    remote faults from a system running Clause 28\n         Auto-Negotiation.\n         The
    value remoteJabber(7), remoteLink loss(8), or remoteTest(9)\n         SHOULD be
    used instead of remoteFault(5) where the reason for\n         remote fault is
    identified in the remote signaling protocol.\n         Where a Clause 22 MII or
    Clause 35 GMII is present, a logic\n         one in the remote fault bit maps
    to the value remoteFault(5),\n         a logic zero in the link status bit maps
    to the enumeration\n         notAvailable(4).  The value notAvailable(4) takes
    precedence\n         over remoteFault(5).\n         For 2BASE-TL and 10PASS-TS
    PHYs, the value unknown(2) maps to\n         the condition where the PHY (PCS
    with connected PMEs) is\n         initializing, the value ready(20) maps to the
    condition where\n         the interface is down and at least one PME in the aggregation\n
    \        group is ready for handshake, the value available(3) maps to\n         the
    condition where all the PMEs in the aggregation group are\n         up, the value
    notAvailable(4) maps to the condition where all\n         the PMEs in the aggregation
    group are down and no handshake\n         tones are detected, the value availableReduced(19)
    maps to the\n         condition where the interface is up, a link fault is detected\n
    \        at the receive direction by one or more PMEs in the\n         aggregation
    group, but at least one PME is up and the\n         enumeration pmdLinkFault(12)
    maps to the condition where a link\n         fault is detected at the receive
    direction by all of the PMEs\n         in the aggregation group.\n         For
    10 Gb/s the enumerations map to value of the link_fault\n         variable within
    the Link Fault Signaling state diagram\n         as follows: the value OK maps
    to the value available(3),\n         the value Local Fault maps to the value notAvailable(4),\n
    \        and the value Remote Fault maps to the value remoteFault(5).\n         The
    value pmdLinkFault(12), wisFrameLoss(13),\n         wisSignalLoss(14), pcsLinkFault(15),
    excessiveBER(16), or\n         dxsLinkFault(17) SHOULD be used instead of the
    value\n         notAvailable(4), where the reason for the Local Fault state can\n
    \        be identified through the use of the Clause 45 MDIO Interface.\n         Where
    multiple reasons for the Local Fault state can be\n         identified, only the
    highest precedence error SHOULD be\n         reported.  This precedence in descending
    order is as follows:\n           pxsLinkFault\n           pmdLinkFault\n           wisFrameLoss\n
    \          wisSignalLoss\n           pcsLinkFault\n           excessiveBER\n           dxsLinkFault.\n
    \        Where a Clause 45 MDIO interface is present a logic zero in\n         the
    PMA/PMD Receive link status bit ([IEEE802.3]\n         Section 45.2.1.2.2) maps
    to the value pmdLinkFault(12),\n         logic one in the LOF status bit (Section
    45.2.2.10.4) maps\n         to the value wisFrameLoss(13), a logic one in the
    LOS\n         status bit (Section 45.2.2.10.5) maps to the value\n         wisSignalLoss,
    a logic zero in the PCS Receive\n         link status bit (Section 45.2.3.2.2)
    maps to the value\n         pcsLinkFault(15), a logic one in the 10GBASE-R PCS
    Latched\n         high BER status bit (Section 45.2.3.12.2) maps to the value\n
    \        excessiveBER, a logic zero in the DTE XS receive link status\n         bit
    (Section 45.2.5.2.2) maps to the value dxsLinkFault(17)\n         and a logic
    zero in the PHY XS transmit link status bit\n         (Section 45.2.4.2.2) maps
    to the value pxsLinkFault(18).\n         The most recent version of this textual
    convention is available\n         in the online version of this MIB module on
    the IANA web site.\n         Requests for new values should be made to IANA via
    email\n         (iana@iana.org).\"\n       REFERENCE\n         \"[IEEE802.3],
    Section 30.5.1.1.4\"\n       SYNTAX       INTEGER {\n              other(1),\n
    \             unknown(2),\n              available(3),\n              notAvailable(4),\n
    \             remoteFault(5),\n              invalidSignal(6),\n              remoteJabber(7),\n
    \             remoteLinkLoss(8),\n              remoteTest(9),\n              offline(10),\n
    \             autoNegError(11),\n              pmdLinkFault(12),\n              wisFrameLoss(13),\n
    \             wisSignalLoss(14),\n              pcsLinkFault(15),\n              excessiveBER(16),\n
    \             dxsLinkFault(17),\n              pxsLinkFault(18),\n              availableReduced(19),\n
    \             ready(20)\n         }\n     IANAifMauAutoNegCapBits ::= TEXTUAL-CONVENTION\n
    \      STATUS       current\n       DESCRIPTION\n         \"This data type is
    used as the syntax of the\n         ifMauAutoNegCapabilityBits, ifMauAutoNegCapAdvertisedBits,
    and\n         ifMauAutoNegCapReceivedBits objects in the (updated) definition\n
    \        of MAU-MIB's ifMauAutoNegTable.\n         The most recent version of
    this textual convention is available\n         in the online version of this MIB
    module on the IANA web site.\n         Requests for new values should be made
    to IANA via email\n         (iana@iana.org).\"\n       REFERENCE\n         \"[IEEE802.3],
    Section 30.6.1.1.5\"\n       SYNTAX       BITS {\n              bOther(0),          --
    other or unknown\n              b10baseT(1),        -- 10BASE-T  half duplex mode\n
    \             b10baseTFD(2),      -- 10BASE-T  full duplex mode\n              b100baseT4(3),
    \     -- 100BASE-T4\n              b100baseTX(4),      -- 100BASE-TX half duplex
    mode\n              b100baseTXFD(5),    -- 100BASE-TX full duplex mode\n              b100baseT2(6),
    \     -- 100BASE-T2 half duplex mode\n              b100baseT2FD(7),    -- 100BASE-T2
    full duplex mode\n              bFdxPause(8),       -- PAUSE for full-duplex links\n
    \             bFdxAPause(9),      -- Asymmetric PAUSE for full-duplex\n                                  --
    \    links\n              bFdxSPause(10),     -- Symmetric PAUSE for full-duplex\n
    \                                 --     links\n              bFdxBPause(11),
    \    -- Asymmetric and Symmetric PAUSE for\n                                  --
    \    full-duplex links\n              b1000baseX(12),     -- 1000BASE-X, -LX,
    -SX, -CX half\n                                  --     duplex mode\n              b1000baseXFD(13),
    \  -- 1000BASE-X, -LX, -SX, -CX full\n                                  --     duplex
    mode\n              b1000baseT(14),     -- 1000BASE-T half duplex mode\n              b1000baseTFD(15)
    \   -- 1000BASE-T full duplex mode\n         }\n     IANAifJackType ::= TEXTUAL-CONVENTION\n
    \      STATUS       current\n       DESCRIPTION\n         \"Common enumeration
    values for repeater and interface MAU\n         jack types.  This data type is
    used as the syntax of the\n         ifJackType and rpJackType objects in the (updated)
    definition\n         of MAU-MIB's ifJackTable and rpJackTable respectively.\n
    \        Possible values are:\n              other(1)          - undefined or
    unknown\n              rj45(2)           - RJ45\n              rj45S(3)          -
    RJ45 shielded\n              db9(4)            - DB9\n              bnc(5)            -
    BNC\n              fAUI(6)           - AUI female\n              mAUI(7)           -
    AUI male\n              fiberSC(8)        - SC fiber\n              fiberMIC(9)
    \      - MIC fiber\n              fiberST(10)       - ST fiber\n              telco(11)
    \        - Telco\n              mtrj(12)          - MT-RJ fiber\n              hssdc(13)
    \        - fiber channel style-2\n              fiberLC(14)       - LC fiber\n
    \             cx4(15)           - IB4X for 10GBASE-CX4\n         The most recent
    version of this textual convention is available\n         in the online version
    of this MIB module on the IANA web site.\n         Requests for new values should
    be made to IANA via email\n         (iana@iana.org).\"\n       SYNTAX       INTEGER
    {\n              other(1),\n              rj45(2),\n              rj45S(3),\n
    \             db9(4),\n              bnc(5),\n              fAUI(6),\n              mAUI(7),\n
    \             fiberSC(8),\n              fiberMIC(9),\n              fiberST(10),\n
    \             telco(11),\n              mtrj(12),\n              hssdc(13),\n
    \             fiberLC(14),\n              -- new since RFC 3636\n              cx4(15)\n
    \        }\n     -- OBJECT IDENTITIES for MAU types\n     --  (see rpMauType and
    ifMauType of MAU-MIB for usage)\n     -- The following definitions has been moved
    from RFC 3636 and\n     -- no longer appear in its revision.\n     dot3MauType
    OBJECT IDENTIFIER ::= { mib-2 snmpDot3MauMgt(26) 4 }\n     dot3MauTypeAUI OBJECT-IDENTITY\n
    \      STATUS      current\n       DESCRIPTION \"no internal MAU, view from AUI\"\n
    \      REFERENCE   \"[IEEE802.3], Section 7\"\n       ::= { dot3MauType 1 }\n
    \    dot3MauType10Base5 OBJECT-IDENTITY\n       STATUS      current\n       DESCRIPTION
    \"thick coax MAU\"\n       REFERENCE   \"[IEEE802.3], Section 7\"\n       ::=
    { dot3MauType 2 }\n     dot3MauTypeFoirl OBJECT-IDENTITY\n       STATUS      current\n
    \      DESCRIPTION \"FOIRL MAU\"\n       REFERENCE   \"[IEEE802.3], Section 9.9\"\n
    \      ::= { dot3MauType 3 }\n     dot3MauType10Base2 OBJECT-IDENTITY\n       STATUS
    \     current\n       DESCRIPTION \"thin coax MAU\"\n       REFERENCE   \"[IEEE802.3],
    Section 10\"\n       ::= { dot3MauType 4 }\n     dot3MauType10BaseT OBJECT-IDENTITY\n
    \      STATUS      current\n       DESCRIPTION \"UTP MAU.\n                   Note
    that it is strongly recommended that\n                   agents return either
    dot3MauType10BaseTHD or\n                   dot3MauType10BaseTFD if the duplex
    mode is\n                   known.  However, management applications should\n
    \                  be prepared to receive this MAU type value from\n                   older
    agent implementations.\"\n       REFERENCE   \"[IEEE802.3], Section 14\"\n       ::=
    { dot3MauType 5 }\n     dot3MauType10BaseFP OBJECT-IDENTITY\n       STATUS      current\n
    \      DESCRIPTION \"passive fiber MAU\"\n       REFERENCE   \"[IEEE802.3], Section
    16\"\n       ::= { dot3MauType 6 }\n     dot3MauType10BaseFB OBJECT-IDENTITY\n
    \      STATUS      current\n       DESCRIPTION \"sync fiber MAU\"\n       REFERENCE
    \  \"[IEEE802.3], Section 17\"\n       ::= { dot3MauType 7 }\n     dot3MauType10BaseFL
    OBJECT-IDENTITY\n       STATUS      current\n       DESCRIPTION \"async fiber
    MAU.\n                   Note that it is strongly recommended that\n                   agents
    return either dot3MauType10BaseFLHD or\n                   dot3MauType10BaseFLFD
    if the duplex mode is\n                   known.  However, management applications
    should\n                   be prepared to receive this MAU type value from\n                   older
    agent implementations.\"\n       REFERENCE   \"[IEEE802.3], Section 18\"\n       ::=
    { dot3MauType 8 }\n     dot3MauType10Broad36 OBJECT-IDENTITY\n       STATUS      current\n
    \      DESCRIPTION \"broadband DTE MAU.\n                   Note that 10BROAD36
    MAUs can be attached to\n                   interfaces but not to repeaters.\"\n
    \      REFERENCE   \"[IEEE802.3], Section 11\"\n       ::= { dot3MauType 9 }\n
    \    ------ new since RFC 1515:\n     dot3MauType10BaseTHD OBJECT-IDENTITY\n       STATUS
    \     current\n       DESCRIPTION \"UTP MAU, half duplex mode\"\n       REFERENCE
    \  \"[IEEE802.3], Section 14\"\n       ::= { dot3MauType 10 }\n     dot3MauType10BaseTFD
    OBJECT-IDENTITY\n       STATUS      current\n       DESCRIPTION \"UTP MAU, full
    duplex mode\"\n       REFERENCE   \"[IEEE802.3], Section 14\"\n       ::= { dot3MauType
    11 }\n     dot3MauType10BaseFLHD OBJECT-IDENTITY\n       STATUS      current\n
    \      DESCRIPTION \"async fiber MAU, half duplex mode\"\n       REFERENCE   \"[IEEE802.3],
    Section 18\"\n       ::= { dot3MauType 12 }\n     dot3MauType10BaseFLFD OBJECT-IDENTITY\n
    \      STATUS      current\n       DESCRIPTION \"async fiber MAU, full duplex
    mode\"\n       REFERENCE   \"[IEEE802.3], Section 18\"\n       ::= { dot3MauType
    13 }\n     dot3MauType100BaseT4 OBJECT-IDENTITY\n       STATUS      current\n
    \      DESCRIPTION \"4 pair category 3 UTP\"\n       REFERENCE   \"[IEEE802.3],
    Section 23\"\n       ::= { dot3MauType 14 }\n     dot3MauType100BaseTXHD OBJECT-IDENTITY\n
    \      STATUS      current\n       DESCRIPTION \"2 pair category 5 UTP, half duplex
    mode\"\n       REFERENCE   \"[IEEE802.3], Section 25\"\n       ::= { dot3MauType
    15 }\n     dot3MauType100BaseTXFD OBJECT-IDENTITY\n       STATUS      current\n
    \      DESCRIPTION \"2 pair category 5 UTP, full duplex mode\"\n       REFERENCE
    \  \"[IEEE802.3], Section 25\"\n       ::= { dot3MauType 16 }\n     dot3MauType100BaseFXHD
    OBJECT-IDENTITY\n       STATUS      current\n       DESCRIPTION \"X fiber over
    PMT, half duplex mode\"\n       REFERENCE   \"[IEEE802.3], Section 26\"\n       ::=
    { dot3MauType 17 }\n     dot3MauType100BaseFXFD OBJECT-IDENTITY\n       STATUS
    \     current\n       DESCRIPTION \"X fiber over PMT, full duplex mode\"\n       REFERENCE
    \  \"[IEEE802.3], Section 26\"\n       ::= { dot3MauType 18 }\n     dot3MauType100BaseT2HD
    OBJECT-IDENTITY\n       STATUS      current\n       DESCRIPTION \"2 pair category
    3 UTP, half duplex mode\"\n       REFERENCE   \"[IEEE802.3], Section 32\"\n       ::=
    { dot3MauType 19 }\n     dot3MauType100BaseT2FD OBJECT-IDENTITY\n       STATUS
    \     current\n       DESCRIPTION \"2 pair category 3 UTP, full duplex mode\"\n
    \      REFERENCE   \"[IEEE802.3], Section 32\"\n       ::= { dot3MauType 20 }\n
    \    ------ new since RFC 2239:\n     dot3MauType1000BaseXHD OBJECT-IDENTITY\n
    \      STATUS      current\n       DESCRIPTION \"PCS/PMA, unknown PMD, half duplex
    mode\"\n       REFERENCE   \"[IEEE802.3], Section 36\"\n       ::= { dot3MauType
    21 }\n     dot3MauType1000BaseXFD OBJECT-IDENTITY\n       STATUS      current\n
    \      DESCRIPTION \"PCS/PMA, unknown PMD, full duplex mode\"\n       REFERENCE
    \  \"[IEEE802.3], Section 36\"\n       ::= { dot3MauType 22 }\n     dot3MauType1000BaseLXHD
    OBJECT-IDENTITY\n       STATUS      current\n       DESCRIPTION \"Fiber over long-wavelength
    laser, half duplex\n                   mode\"\n       REFERENCE   \"[IEEE802.3],
    Section 38\"\n       ::= { dot3MauType 23 }\n     dot3MauType1000BaseLXFD OBJECT-IDENTITY\n
    \      STATUS      current\n       DESCRIPTION \"Fiber over long-wavelength laser,
    full duplex\n                   mode\"\n       REFERENCE   \"[IEEE802.3], Section
    38\"\n       ::= { dot3MauType 24 }\n     dot3MauType1000BaseSXHD OBJECT-IDENTITY\n
    \      STATUS      current\n       DESCRIPTION \"Fiber over short-wavelength laser,
    half\n                   duplex mode\"\n       REFERENCE   \"[IEEE802.3], Section
    38\"\n       ::= { dot3MauType 25 }\n     dot3MauType1000BaseSXFD OBJECT-IDENTITY\n
    \      STATUS      current\n       DESCRIPTION \"Fiber over short-wavelength laser,
    full\n                   duplex mode\"\n       REFERENCE   \"[IEEE802.3], Section
    38\"\n       ::= { dot3MauType 26 }\n     dot3MauType1000BaseCXHD OBJECT-IDENTITY\n
    \      STATUS      current\n       DESCRIPTION \"Copper over 150-Ohm balanced
    cable, half\n                   duplex mode\"\n       REFERENCE   \"[IEEE802.3],
    Section 39\"\n       ::= { dot3MauType 27 }\n     dot3MauType1000BaseCXFD OBJECT-IDENTITY\n
    \      STATUS      current\n       DESCRIPTION \"Copper over 150-Ohm balanced
    cable, full\n                   duplex mode\"\n       REFERENCE   \"[IEEE802.3],
    Section 39\"\n       ::= { dot3MauType 28 }\n     dot3MauType1000BaseTHD OBJECT-IDENTITY\n
    \      STATUS      current\n       DESCRIPTION \"Four-pair Category 5 UTP, half
    duplex mode\"\n       REFERENCE   \"[IEEE802.3], Section 40\"\n       ::= { dot3MauType
    29 }\n     dot3MauType1000BaseTFD OBJECT-IDENTITY\n       STATUS      current\n
    \      DESCRIPTION \"Four-pair Category 5 UTP, full duplex mode\"\n       REFERENCE
    \  \"[IEEE802.3], Section 40\"\n       ::= { dot3MauType 30 }\n     ------ new
    since RFC 2668:\n     dot3MauType10GigBaseX OBJECT-IDENTITY\n       STATUS      current\n
    \      DESCRIPTION \"X PCS/PMA, unknown PMD.\"\n       REFERENCE   \"[IEEE802.3],
    Section 48\"\n       ::= { dot3MauType 31 }\n     dot3MauType10GigBaseLX4 OBJECT-IDENTITY\n
    \      STATUS      current\n       DESCRIPTION \"X fiber over WWDM optics\"\n
    \      REFERENCE   \"[IEEE802.3], Section 53\"\n       ::= { dot3MauType 32 }\n
    \    dot3MauType10GigBaseR OBJECT-IDENTITY\n       STATUS      current\n       DESCRIPTION
    \"R PCS/PMA, unknown PMD.\"\n       REFERENCE   \"[IEEE802.3], Section 49\"\n
    \      ::= { dot3MauType 33 }\n     dot3MauType10GigBaseER OBJECT-IDENTITY\n       STATUS
    \     current\n       DESCRIPTION \"R fiber over 1550 nm optics\"\n       REFERENCE
    \  \"[IEEE802.3], Section 52\"\n       ::= { dot3MauType 34 }\n     dot3MauType10GigBaseLR
    OBJECT-IDENTITY\n       STATUS      current\n       DESCRIPTION \"R fiber over
    1310 nm optics\"\n       REFERENCE   \"[IEEE802.3], Section 52\"\n       ::= {
    dot3MauType 35 }\n     dot3MauType10GigBaseSR OBJECT-IDENTITY\n       STATUS      current\n
    \      DESCRIPTION \"R fiber over 850 nm optics\"\n       REFERENCE   \"[IEEE802.3],
    Section 52\"\n       ::= { dot3MauType 36 }\n     dot3MauType10GigBaseW OBJECT-IDENTITY\n
    \      STATUS      current\n       DESCRIPTION \"W PCS/PMA, unknown PMD.\"\n       REFERENCE
    \  \"[IEEE802.3], Section 49 and 50\"\n       ::= { dot3MauType 37 }\n     dot3MauType10GigBaseEW
    OBJECT-IDENTITY\n       STATUS      current\n       DESCRIPTION \"W fiber over
    1550 nm optics\"\n       REFERENCE   \"[IEEE802.3], Section 52\"\n       ::= {
    dot3MauType 38 }\n     dot3MauType10GigBaseLW OBJECT-IDENTITY\n       STATUS      current\n
    \      DESCRIPTION \"W fiber over 1310 nm optics\"\n       REFERENCE   \"[IEEE802.3],
    Section 52\"\n       ::= { dot3MauType 39 }\n     dot3MauType10GigBaseSW OBJECT-IDENTITY\n
    \      STATUS      current\n       DESCRIPTION \"W fiber over 850 nm optics\"\n
    \      REFERENCE   \"[IEEE802.3], Section 52\"\n       ::= { dot3MauType 40 }\n
    \    ------ new since RFC 3636:\n     dot3MauType10GigBaseCX4 OBJECT-IDENTITY\n
    \      STATUS      current\n       DESCRIPTION \"X copper over 8 pair 100-Ohm
    balanced cable\"\n       REFERENCE   \"[IEEE802.3], Section 54\"\n       ::= {
    dot3MauType 41 }\n     dot3MauType2BaseTL OBJECT-IDENTITY\n       STATUS      current\n
    \      DESCRIPTION \"Voice grade UTP copper, up to 2700m, optional PAF\"\n       REFERENCE
    \  \"[IEEE802.3], Sections 61 and 63\"\n       ::= { dot3MauType 42 }\n     dot3MauType10PassTS
    OBJECT-IDENTITY\n       STATUS      current\n       DESCRIPTION \"Voice grade
    UTP copper, up to 750m, optional PAF\"\n       REFERENCE   \"[IEEE802.3], Sections
    61 and 62\"\n       ::= { dot3MauType 43 }\n     dot3MauType100BaseBX10D OBJECT-IDENTITY\n
    \      STATUS      current\n       DESCRIPTION \"One single-mode fiber OLT, long
    wavelength, 10km\"\n       REFERENCE   \"[IEEE802.3], Section 58\"\n       ::=
    { dot3MauType 44 }\n     dot3MauType100BaseBX10U OBJECT-IDENTITY\n       STATUS
    \     current\n       DESCRIPTION \"One single-mode fiber ONU, long wavelength,
    10km\"\n       REFERENCE   \"[IEEE802.3], Section 58\"\n       ::= { dot3MauType
    45 }\n     dot3MauType100BaseLX10 OBJECT-IDENTITY\n       STATUS      current\n
    \      DESCRIPTION \"Two single-mode fibers, long wavelength, 10km\"\n       REFERENCE
    \  \"[IEEE802.3], Section 58\"\n       ::= { dot3MauType 46 }\n     dot3MauType1000BaseBX10D
    OBJECT-IDENTITY\n       STATUS      current\n       DESCRIPTION \"One single-mode
    fiber OLT, long wavelength, 10km\"\n       REFERENCE   \"[IEEE802.3], Section
    59\"\n       ::= { dot3MauType 47 }\n     dot3MauType1000BaseBX10U OBJECT-IDENTITY\n
    \      STATUS      current\n       DESCRIPTION \"One single-mode fiber ONU, long
    wavelength, 10km\"\n       REFERENCE   \"[IEEE802.3], Section 59\"\n       ::=
    { dot3MauType 48 }\n     dot3MauType1000BaseLX10 OBJECT-IDENTITY\n       STATUS
    \     current\n       DESCRIPTION \"Two sigle-mode fiber, long wavelength, 10km\"\n
    \      REFERENCE   \"[IEEE802.3], Section 59\"\n       ::= { dot3MauType 49 }\n
    \    dot3MauType1000BasePX10D OBJECT-IDENTITY\n       STATUS      current\n       DESCRIPTION
    \"One single-mode fiber EPON OLT, 10km\"\n       REFERENCE   \"[IEEE802.3], Section
    60\"\n       ::= { dot3MauType 50 }\n     dot3MauType1000BasePX10U OBJECT-IDENTITY\n
    \      STATUS      current\n       DESCRIPTION \"One single-mode fiber EPON ONU,
    10km\"\n       REFERENCE   \"[IEEE802.3], Section 60\"\n       ::= { dot3MauType
    51 }\n     dot3MauType1000BasePX20D OBJECT-IDENTITY\n       STATUS      current\n
    \      DESCRIPTION \"One single-mode fiber EPON OLT, 20km\"\n       REFERENCE
    \  \"[IEEE802.3], Section 60\"\n       ::= { dot3MauType 52 }\n     dot3MauType1000BasePX20U
    OBJECT-IDENTITY\n       STATUS      current\n       DESCRIPTION \"One single-mode
    fiber EPON ONU, 20km\"\n       REFERENCE   \"[IEEE802.3], Section 60\"\n       ::=
    { dot3MauType 53 }\n   END\n"
  title: 5.  IANA-Maintained MAU TC Definitions
- contents:
  - "6.  Security Considerations\n   The IANA-MAU-MIB does not define any management
    objects.  Instead, it\n   defines a set of textual conventions which are used
    by the MAU-MIB\n   and may be used by other MIB modules to define management objects.\n
    \  Meaningful security considerations can only be written for MIB\n   modules
    that define management objects.\n   There are a number of management objects defined
    in the MAU-MIB that\n   have a MAX-ACCESS clause of read-write.  Setting these
    objects can\n   have a serious effect on the operation of the network, including:\n
    \  o  enabling or disabling a MAU\n   o  changing a MAU's default type\n   o  enabling,
    disabling, or restarting autonegotiation\n   o  modifying the capabilities that
    a MAU advertizes during\n      autonegotiation.\n   Such objects may be considered
    sensitive or vulnerable in some\n   network environments.  The support for SET
    operations in a non-secure\n   environment without proper protection can have
    a negative effect on\n   network operations.\n   Some of the readable objects
    in the MAU-MIB module (i.e., objects\n   with a MAX-ACCESS other than not-accessible)
    may be considered\n   sensitive or vulnerable in some network environments.  In
    some\n   environments, it may be undesirable to allow unauthorized parties to\n
    \  access statistics or status information about individual links in a\n   network.
    \ It is thus important to control even GET and/or NOTIFY\n   access to these objects
    and possibly to even encrypt the values of\n   these objects when sending them
    over the network via SNMP.\n   SNMP versions prior to SNMPv3 did not include adequate
    security.\n   Even if the network itself is secure (for example by using IPsec),\n
    \  even then, there is no control as to who on the secure network is\n   allowed
    to access and GET/SET (read/change/create/delete) the objects\n   in the MAU-MIB
    module.\n   It is RECOMMENDED that the implementors consider the security\n   features
    as provided by the SNMPv3 framework (see [RFC3410], section\n   8), including
    full support for the SNMPv3 cryptographic mechanisms\n   (for authentication and
    privacy).\n   Furthermore, deployment of SNMP versions prior to SNMPv3 is NOT\n
    \  RECOMMENDED.  Instead, it is RECOMMENDED to deploy SNMPv3 and to\n   enable
    cryptographic security.  It is then a customer/operator\n   responsibility to
    ensure that the SNMP entity giving access to an\n   instance of the MAU-MIB module
    is properly configured to give access\n   to the objects only to those principals
    (users) that have legitimate\n   rights to indeed GET or SET (change/create/delete)
    them.\n"
  title: 6.  Security Considerations
- contents:
  - "7.  IANA Considerations\n   This document defines first version of the IANA-maintained
    IANA-MAU-\n   MIB module.  It is intended that each new MAU type, Media Available\n
    \  state, Auto Negotiation capability, and/or Jack type defined by the\n   IEEE
    802.3 working group and approved for publication in a revision\n   of IEEE Std
    802.3 will be added to the IANA-maintaned MIB module,\n   provided that it is
    suitable for being managed by the base objects in\n   the MAU-MIB module.\n   For
    each new MAU type added, a short description of the MAU\n   technology and, wherever
    possible, a reference to a publicly\n   available specification SHOULD be specified.
    \ An Expert Review, as\n   defined in RFC 2434 [RFC2434], is REQUIRED, for each
    modification.\n"
  title: 7.  IANA Considerations
- contents:
  - "8.  Acknowledgments\n   This document was produced by the IETF Ethernet Interfaces
    and Hub\n   MIB Working Group, whose efforts were greatly advanced by the\n   contributions
    of the following people:\n      Mike Heard\n      John Flick\n      Dan Romascanu\n
    \  This document is based on the Proposed Standard MAU MIB, RFC 3636\n   [RFC3636],
    edited by John Flick of Hewlett-Packard, and produced by\n   the Ethernet Interfaces
    and Hub MIB Working Group.  It extends that\n   document by moving the object
    identities and textual conventions for\n   MAU types into a IANA-maintained MIB
    module.  In addition, support is\n   provided for the EFM and 10GBASE-CX4 MAUs
    as defined in [IEEE802.3ah]\n   and [IEEE802.3ak] respectively.\n   RFC 3636,
    in turn, was based on the Proposed Standard MAU MIB, RFC\n   2668 [RFC2668], edited
    by John Flick of Hewlett-Packard and Andrew\n   Smith, then of Extreme Networks,
    and produced by the Ethernet\n   Interfaces and Hub MIB Working Group.  It extends
    that document by\n   providing support for 10 Gb/s MAUs as defined in [IEEE802.3ae].\n
    \  RFC 2668, in turn, was based on the Proposed Standard MAU MIB, RFC\n   2239
    [RFC2239], edited by Kathryn de Graaf, then of 3Com, and Dan\n   Romascanu, then
    of Madge Networks, and produced by the Ethernet\n   Interfaces and Hub MIB Working
    Group.  It extended that document by\n   providing support for 1000 Mb/sec MAUs,
    PAUSE negotiation and remote\n   fault status as defined in [IEEE802.3].\n   RFC
    2239, in turn, was based on the Proposed Standard MAU MIB, RFC\n   1515 [RFC1515],
    edited by Donna McMaster, then of SynOptics\n   Communications, Keith McCloghrie,
    then of Hughes LAN Systems, and Sam\n   Roberts, then of Farallon Computing, and
    produced by the Hub MIB\n   Working Group.  It extends that document by providing
    support for 100\n   Mb/sec MAUs, full duplex MAUs, auto-negotiation, and jack
    management\n   as defined in [IEEE802.3].\n"
  title: 8.  Acknowledgments
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [IEEE802.3]    IEEE, \"IEEE Standard for Information
      technology -\n                  Telecommunications and information exchange
      between\n                  systems - Local and metropolitan area networks -\n
      \                 Specific requirements - Part 3: Carrier sense multiple\n                  access
      with collision detection (CSMA/CD) access\n                  method and physical
      layer specifications\", IEEE\n                  Std 802.3-2005, December 2005.\n
      \  [IEEE802.3ae]  IEEE, \"IEEE Standard for Information technology -\n                  Telecommunications
      and information exchange between\n                  systems - Local and metropolitan
      area networks -\n                  Specific requirements - Part 3: Carrier sense
      multiple\n                  access with collision detection (CSMA/CD) access\n
      \                 method and physical layer specifications - Media\n                  Access
      Control (MAC) Parameters, Physical Layer and\n                  Management Parameters
      for 10 Gb/s Operation\", IEEE\n                  Std 802.3ae-2002, August 2002.\n
      \  [IEEE802.3ah]  IEEE, \"Information technology - Telecommunications and\n
      \                 information exchange between systems - Local and\n                  metropolitan
      area networks - Specific requirements -\n                  Part 3: Carrier sense
      multiple access with collision\n                  detection (CSMA/CD) access
      method and physical layer\n                  specifications - Media Access Control
      Parameters,\n                  Physical Layers and Management Parameters for\n
      \                 Subscriber Access Networks\", IEEE Std 802.3ah-2004,\n                  September
      2004.\n   [IEEE802.3ak]  IEEE, \"IEEE Standard for Information technology -\n
      \                 Telecommunications and information exchange between\n                  systems
      - Local and metropolitan area networks -\n                  Specific requirements
      - Part 3: Carrier sense multiple\n                  access with collision detection
      (CSMA/CD) access\n                  method and physical layer specifications
      - Physical\n                  Layer and Management Parameters for 10Gb/s Operation,\n
      \                 Type 10GBASE-CX4\", IEEE Std 802.3ak-2004, March 2004.\n   [RFC2108]
      \     de Graaf, K., Romascanu, D., McMaster, D., and K.\n                  McCloghrie,
      \"Definitions of Managed Objects for IEEE\n                  802.3 Repeater
      Devices using SMIv2\", RFC 2108,\n                  February 1997.\n   [RFC2119]
      \     Bradner, S., \"Key words for use in RFCs to Indicate\n                  Requirement
      Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2434]      Narten, T. and H.
      Alvestrand, \"Guidelines for Writing\n                  an IANA Considerations
      Section in RFCs\", BCP 26,\n                  RFC 2434, October 1998.\n   [RFC2578]
      \     McCloghrie, K., Ed., Perkins, D., Ed., and J.\n                  Schoenwaelder,
      Ed., \"Structure of Management\n                  Information Version 2 (SMIv2)\",
      STD 58, RFC 2578,\n                  April 1999.\n   [RFC2579]      McCloghrie,
      K., Ed., Perkins, D., Ed., and J.\n                  Schoenwaelder, Ed., \"Textual
      Conventions for SMIv2\",\n                  STD 58, RFC 2579, April 1999.\n
      \  [RFC2580]      McCloghrie, K., Perkins, D., and J. Schoenwaelder,\n                  \"Conformance
      Statements for SMIv2\", STD 58, RFC 2580,\n                  April 1999.\n   [RFC2863]
      \     McCloghrie, K. and F. Kastenholz, \"The Interfaces\n                  Group
      MIB\", RFC 2863, June 2000.\n   [RFC3635]      Flick, J., \"Definitions of Managed
      Objects for the\n                  Ethernet-like Interface Types\", RFC 3635,\n
      \                 September 2003.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [RFC1515]      McMaster, D., McCloghrie, K.,
      and S. Roberts,\n                  \"Definitions of Managed Objects for IEEE
      802.3 Medium\n                  Attachment Units (MAUs)\", RFC 1515, September
      1993.\n   [RFC2239]      de Graaf, K., Romascanu, D., McMaster, D., McCloghrie,\n
      \                 K., and S. Roberts, \"Definitions of Managed Objects\n                  for
      IEEE 802.3 Medium Attachment Units (MAUs) using\n                  SMIv2\",
      RFC 2239, November 1997.\n   [RFC2668]      Smith, A., Flick, J., de Graaf,
      K., Romascanu, D.,\n                  McMaster, D., McCloghrie, K., and S. Roberts,\n
      \                 \"Definitions of Managed Objects for IEEE 802.3 Medium\n                  Attachment
      Units (MAUs)\", RFC 2668, August 1999.\n   [RFC3410]      Case, J., Mundy, R.,
      Partain, D., and B. Stewart,\n                  \"Introduction and Applicability
      Statements for\n                  Internet-Standard Management Framework\",
      RFC 3410,\n                  December 2002.\n   [RFC3418]      Presuhn, R.,
      \"Management Information Base (MIB) for\n                  the Simple Network
      Management Protocol (SNMP)\",\n                  STD 62, RFC 3418, December
      2002.\n   [RFC3636]      Flick, J., \"Definitions of Managed Objects for IEEE\n
      \                 802.3 Medium Attachment Units (MAUs)\", RFC 3636,\n                  September
      2003.\n   [RFC3637]      Heard, C., \"Definitions of Managed Objects for the\n
      \                 Ethernet WAN Interface Sublayer\", RFC 3637,\n                  September
      2003.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Author's Address\n   Edward Beili\n   Actelis Networks\n   Bazel 25\n   Petach-Tikva\n
    \  Israel\n   Phone: +972-3-924-3491\n   EMail: edward.beili@actelis.com\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
