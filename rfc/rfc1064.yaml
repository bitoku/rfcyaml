- title: __initial_text__
  contents:
  - '              INTERACTIVE MAIL ACCESS PROTOCOL - VERSION 2

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC suggests a method for workstations to dynamically\
    \ access\n   mail from a mailbox server (\"repository\").  This RFC specifies\
    \ a\n   standard for the SUMEX-AIM community and a proposed experimental\n   protocol\
    \ for the Internet community.  Discussion and suggestions for\n   improvement\
    \ are requested.  Distribution of this memo is unlimited.\n"
- title: Introduction
  contents:
  - "Introduction\n   The intent of the Interactive Mail Access Protocol, Version\
    \ 2 (IMAP2)\n   is to allow a workstation or similar small machine to access\n\
    \   electronic mail from a mailbox server.  IMAP2 is the protocol used by\n  \
    \ the SUMEX-AIM MM-D (MM Distributed) mail system.\n   Although different in many\
    \ ways from POP2 (RFC 937), IMAP2 may be\n   thought of as a functional superset\
    \ of POP2, and the POP2 RFC was\n   used as a model for this RFC.  There was a\
    \ cognizant reason for this;\n   RFC 937 deals with an identical problem and it\
    \ was desirable to offer\n   a basis for comparison.\n   Like POP2, IMAP2 specifies\
    \ a means of accessing stored mail and not\n   of posting mail; this function\
    \ is handled by a mail transfer protocol\n   such as SMTP (RFC 821).  A comparison\
    \ with the DMSP protocol of\n   PCMAIL can be found at the end of \"System Model\
    \ and Philosophy\"\n   section.\n   This protocol assumes a reliable data stream\
    \ such as provided by TCP\n   or any similar protocol.  When TCP is used, the\
    \ IMAP2 server listens\n   on port 143.\n"
- title: System Model and Philosophy
  contents:
  - "System Model and Philosophy\n   Electronic mail is a primary means of communication\
    \ for the widely\n   spread SUMEX-AIM community.  The advent of distributed workstations\n\
    \   is forcing a significant rethinking of the mechanisms employed to\n   manage\
    \ such mail.  With mainframes, each user tends to receive and\n   process mail\
    \ at the computer he used most of the time, his \"primary\n   host\".  The first\
    \ inclination of many users when an independent\n   workstation is placed in front\
    \ of them is to begin receiving mail at\n   the workstation, and, in fact, many\
    \ vendors have implemented\n   facilities to do this.  However, this approach\
    \ has several\n   disadvantages:\n      (1) Workstations (especially Lisp workstations)\
    \ have a software\n      design that gives full control of all aspects of the\
    \ system to the\n      user at the console.  As a result, background tasks, like\n\
    \      receiving mail, could well be kept from running for long periods\n    \
    \  of time either because the user is asking to use all of the\n      machine's\
    \ resources, or because, in the course of working, the\n      user has (perhaps\
    \ accidentally) manipulated the environment in\n      such a way as to prevent\
    \ mail reception.  This could lead to\n      repeated failed delivery attempts\
    \ by outside agents.\n      (2) The hardware failure of a single workstation could\
    \ keep its\n      user \"off the air\" for a considerable time, since repair of\n\
    \      individual workstation units might be delayed.  Given the growing\n   \
    \   number of workstations spread throughout office environments,\n      quick\
    \ repair would not be assured, whereas a centralized mainframe\n      is generally\
    \ repaired very soon after failure.\n      (3) It is more difficult to keep track\
    \ of mailing addresses when\n      each person is associated with a distinct machine.\
    \  Consider the\n      difficulty in keeping track of a large number of postal\
    \ addresses\n      or phone numbers, particularly if there was no single address\
    \ or\n      phone number for an organization through which you could reach any\n\
    \      person in that organization.  Traditionally, electronic mail on\n     \
    \ the ARPANET involved remembering a name and one of several \"hosts\"\n     \
    \ (machines) whose name reflected the organization in which the\n      individual\
    \ worked.  This was suitable at a time when most\n      organizations had only\
    \ one central host.  It is less satisfactory\n      today unless the concept of\
    \ a host is changed to refer to an\n      organizational entity and not a particular\
    \ machine.\n      (4)  It is very difficult to keep a multitude of heterogeneous\n\
    \      workstations working properly with complex mailing protocols,\n      making\
    \ it difficult to move forward as progress is made in\n      electronic communication\
    \ and as new standards emerge.  Each system\n      has to worry about receiving\
    \ incoming mail, routing and delivering\n      outgoing mail, formatting, storing,\
    \ and providing for the\n      stability of mailboxes over a variety of possible\
    \ filing and\n      mailing protocols.\n   Consequently, while the workstation\
    \ may be viewed as an Internet host\n   in the sense that it implements IP, it\
    \ should not be viewed as the\n   entity which contains the user's mailbox.  Rather,\
    \ a mail server\n   machine (sometimes called a \"repository\") should hold the\
    \ mailbox,\n   and the workstation (hereafter referred to as a \"client\") should\n\
    \   access the mailbox via mail transactions.  Because the mail server\n   machine\
    \ would be isolated from direct user manipulation, it could\n   achieve high software\
    \ reliability easily, and, as a shared resource,\n   it could achieve high hardware\
    \ reliability, perhaps through\n   redundancy.  The mail server could be used\
    \ from arbitrary locations,\n   allowing users to read mail across campus, town,\
    \ or country using\n   more and more commonly available clients.  Furthermore,\
    \ the same user\n   may access his mailbox from different clients at different\
    \ times, and\n   multiple users may access the same mailbox simultaneously.\n\
    \   The mail server acts an an interface among users, data storage, and\n   other\
    \ mailers.  The mail access protocol is used to retrieve\n   messages, access\
    \ and change properties of messages, and manage\n   mailboxes.  This differs from\
    \ some approaches (e.g., Unix mail via\n   NFS) in that the mail access protocol\
    \ is used for all message\n   manipulations, isolating the user and the client\
    \ from all knowledge\n   of how the data storage is used.  This means that the\
    \ mail server can\n   utilize the data storage in whatever way is most efficient\
    \ to\n   organize the mail in that particular environment, without having to\n\
    \   worry about storage representation compatibility across different\n   machines.\n\
    \   In defining a mail access protocol, it is important to keep in mind\n   that\
    \ the client and server form a macrosystem, in which it should be\n   possible\
    \ to exploit the strong points of both while compensating for\n   each other's\
    \ weaknesses.  Furthermore, it's desirable to allow for a\n   growth path beyond\
    \ the hoary text-only RFC 822 protocol.  Unlike\n   POP2, IMAP2 has extensive\
    \ features for remote searching and parsing\n   of messages on the server.  For\
    \ example, a free text search\n   (optionally in conjunction with other searching)\
    \ can be made\n   throughout the entire mailbox by the server and the results\
    \ made\n   available to the client without the client having to transfer the\n\
    \   entire mailbox and searching itself.  Since remote parsing of a\n   message\
    \ into a structured (and standard format) \"envelope\" is\n   available, a client\
    \ can display envelope information and implement\n   commands such as REPLY without\
    \ having any understanding of how to\n   parse RFC 822, etc. headers.\n   Additionally,\
    \ IMAP2 offers several facilities for managing a mailbox\n   beyond the simple\
    \ \"delete message\" functionality of POP2.\n   In spite of this, IMAP2 is a relatively\
    \ simple protocol.  Although\n   servers should implement the full set of IMAP2\
    \ functions, a simple\n   client can be written which uses IMAP2 in much the way\
    \ as a POP2\n   client.\n   IMAP2 differs from the DMSP protocol of PCMAIL (RFC\
    \ 1056) in a more\n   fundamental manner, reflecting the differing architectures\
    \ of MM-D\n   and PCMAIL.  PCMAIL is either an online (\"interactive mode\"),\
    \ or\n   offline (\"batch mode\") system.  MM-D is primarily an online system\
    \ in\n   which real-time and simultaneous mail access were considered\n   important.\n\
    \   In PCMAIL, there is a long-term client/server relationship in which\n   some\
    \ mailbox state is preserved on the client.  There is a\n   registration of clients\
    \ used by a particular user, and the client\n   keeps a set of \"descriptors\"\
    \ for each message which summarize the\n   message.  The server and client synchronize\
    \ their states when the\n   DMSP connection starts up, and, if a client has not\
    \ accessed the\n   server for a while, the client does a complete reset (reload)\
    \ of its\n   state from the server.\n   In MM-D, the client/server relationship\
    \ lasts only for the duration\n   of the IMAP2 connection.  All mailbox state\
    \ is maintained on the\n   server.  There is no registration of clients.  The\
    \ function of a\n   descriptor is handled by a structured representation of the\
    \ message\n   \"envelope\".  This structure makes it unnecessary for a client\
    \ to know\n   anything about RFC 822 parsing.  There is no synchronization since\n\
    \   the client does not remember state between IMAP2 connections.  This\n   is\
    \ not a problem since in general the client never needs the entire\n   state of\
    \ the mailbox in a single session, therefore there isn't much\n   overhead in\
    \ fetching the state information that is needed as it is\n   needed.\n   There\
    \ are also some functional differences between IMAP2 and DMSP.\n   DMSP has explicit\
    \ support for bulletin boards which are only handled\n   implicitly in IMAP2.\
    \  DMSP has functions for sending messages,\n   printing messages, listing mailboxes,\
    \ and changing passwords, all of\n   which are done outside of IMAP2.  DMSP has\
    \ 16 binary flags of which 8\n   are defined by the system.  IMAP has flag names;\
    \ there are currently\n   5 defined system flag names and a facility for some\
    \ number (30 in the\n   current implementations) of user flag names.  IMAP2 has\
    \ a\n   sophisticated message search facility in the server to identify\n   interesting\
    \ messages based on dates, addresses, flag status, or\n   textual contents without\
    \ compelling the client to fetch this data for\n   every message.\n   It was felt\
    \ that maintaining state on the client is advantageous only\n   in those cases\
    \ where the client is only used by a single user, or if\n   there is some means\
    \ on the client to restrict access to another\n   user's data.  It can be a serious\
    \ disadvantage in an environment in\n   which multiple users routinely use the\
    \ same client, the same user\n   routinely uses different clients, and where there\
    \ are no access\n   restrictions on the client.  It was also observed that most\
    \ user mail\n   access is to a relatively small set of \"interesting\" messages,\
    \ which\n   were either \"new\" mail or mail based upon some user-selected\n \
    \  criteria. Consequently, IMAP2 was designed to easily identify those\n   \"\
    interesting\" messages so that the client could fetch the state of\n   those messages\
    \ and not those that were not \"interesting\".\n"
- title: The Protocol
  contents:
  - "The Protocol\n   The IMAP2 protocol consists of a sequence of client commands\
    \ and\n   server responses, with server data interspersed between the\n   responses.\
    \  Unlike most Internet protocols, commands and responses\n   are tagged.  That\
    \ is, a command begins with a unique identifier\n   (typically a short alphanumeric\
    \ sequence such as a Lisp \"gensym\"\n   function would generate e.g., A0001,\
    \ A0002, etc.), called a tag.  The\n   response to this command is given the same\
    \ tag from the server.\n   Additionally, the server may send an arbitrary amount\
    \ of \"unsolicited\n   data\", which is identified by the special reserved tag\
    \ of \"*\".  There\n   is another special reserved tag, \"+\", discussed below.\n\
    \   The server must be listening for a connection.  When a connection is\n   opened\
    \ the server sends an unsolicited OK response as a greeting\n   message and then\
    \ waits for commands.  When commands are received the\n   server acts on them\
    \ and responds with responses, often interspersed\n   with data.\n   The client\
    \ opens a connection, waits for the greeting, then sends a\n   LOGIN command with\
    \ user name and password arguments to establish\n   authorization.  Following\
    \ an OK response from the server, the client\n   then sends a SELECT command to\
    \ access the desired mailbox.  The\n   user's default mailbox has a special reserved\
    \ name of \"INBOX\" which\n   is independent of the operating system that the\
    \ server is implemented\n   on.  The server will generally send a list of valid\
    \ flags, number of\n   messages, and number of messages arrived since last access\
    \ for this\n   mailbox as unsolicited data, followed by an OK response.  The client\n\
    \   may terminate access to this mailbox and access a different one with\n   another\
    \ SELECT command.\n   The client reads mailbox information by means of FETCH commands.\
    \  The\n   actual data is transmitted via the unsolicited data mechanism (that\n\
    \   is, FETCH should be viewed as poking the server to include the\n   desired\
    \ data along with any other data it wishes to transmit to the\n   client).  There\
    \ are three major categories of data which may be\n   fetched.\n   The first category\
    \ is that data which is associated with a message as\n   an entity in the mailbox.\
    \  There are presently three such items of\n   data: the \"internal date\", the\
    \ \"RFC 822 size\", and the \"flags\".  The\n   internal date is the date and\
    \ time that the message was placed in the\n   mailbox.  The RFC 822 size is subject\
    \ to deletion in the future; it\n   is the size in bytes of the message, expressed\
    \ as an RFC 822 text\n   string.  Current clients only use it as part of a status\
    \ display\n   line.  The flags are a list of status flags associated with the\n\
    \   message (see below).  All of the first category data can be fetched\n   by\
    \ using the macro-fetch word \"FAST\"; that is, \"FAST\" expands to\n   \"(FLAGS\
    \ INTERNALDATE RFC822.SIZE)\".\n   The second category is that data which describes\
    \ the composition and\n   delivery information of a message; that is, information\
    \ such as the\n   message sender, recipient lists, message-ID, subject, etc. \
    \ This is\n   the information which is stored in the message header in RFC 822\n\
    \   format message and is traditionally called the \"envelope\".  [Note:\n   this\
    \ should not be confused with the SMTP (RFC 821) envelope, which\n   is strictly\
    \ limited to delivery information.]  IMAP2 defines a\n   structured and unambiguous\
    \ representation for the envelope which is\n   particularly nice for Lisp-based\
    \ parsers.  A client can use the\n   envelope for operations such as replying\
    \ and not worry about RFC 822\n   at all.  Envelopes are discussed in more detail\
    \ below.  The first and\n   second category data can be fetched together by using\
    \ the macro-fetch\n   word \"ALL\"; that is, \"ALL\" expands to \"(FLAGS INTERNALDATE\n\
    \   RFC822.SIZE ENVELOPE)\".\n   The third category is that data which is intended\
    \ for direct human\n   viewing.  The present RFC 822 based IMAP2 defines three\
    \ such items:\n   RFC822.HEADER, RFC822.TEXT, and RFC822 (the latter being the\
    \ two\n   former appended together in a single text string).  Fetching \"RFC822\"\
    \n   is equivalent to typing the RFC 822 representation of the message as\n  \
    \ stored on the mailbox without any filtering or processing.\n   Typically, a\
    \ client will \"FETCH ALL\" for some or all of the messages\n   in the mailbox\
    \ for use as a presentation menu, and when the user\n   wishes to read a particular\
    \ message will \"FETCH RFC822.TEXT\" to get\n   the message body.  A more primitive\
    \ client could, of course, simply\n   \"FETCH RFC822\" a la POP2-type functionality.\n\
    \   The client can alter certain data (presently only the flags) by means\n  \
    \ of a STORE command.  As an example, a message is deleted from a\n   mailbox\
    \ by a STORE command which includes the \\DELETED flag as one of\n   the flags\
    \ being set.\n   Other client operations include copying a message to another\
    \ mailbox\n   (COPY command), permanently removing deleted messages (EXPUNGE\n\
    \   command), checking for new messages (CHECK command), and searching\n   for\
    \ messages which match certain criteria (SEARCH command).\n   The client terminates\
    \ the session with the LOGOUT command.  The\n   server returns a \"BYE\" followed\
    \ by an \"OK\".\n   A Typical Scenario\n           Client                    \
    \      Server\n           ------                          ------\n           \
    \                            {Wait for Connection}\n       {Open Connection} \
    \       -->\n                                   <-- * OK IMAP2 Server Ready\n\
    \                                       {Wait for command}\n       A001 LOGIN\
    \ Fred Secret   -->\n                                   <-- A001 OK User Fred\
    \ logged in\n                                       {Wait for command}\n     \
    \  A002 SELECT INBOX        -->\n                                   <-- * FLAGS\
    \ (Meeting Notice \\Answered\n                                               \
    \ \\Flagged \\Deleted \\Seen)\n                                   <-- * 19 EXISTS\n\
    \                                   <-- * 2 RECENT\n                         \
    \          <-- A0002 OK Select complete\n                                    \
    \   {Wait for command}\n       A003 FETCH 1:19 ALL      -->\n                \
    \                   <-- * 1 Fetch (......)\n                                 \
    \          ...\n                                   <-- * 18 Fetch (......)\n \
    \                                  <-- * 19 Fetch (......)\n                 \
    \                  <-- A003 OK Fetch complete\n                              \
    \         {Wait for command}\n       A004 FETCH 8 RFC822.TEXT -->\n          \
    \                         <-- * 8 Fetch (RFC822.TEXT {893}\n                 \
    \                          ...893 characters of text...\n                    \
    \               <-- )\n                                   <-- A004 OK Fetch complete\n\
    \                                       {Wait for command}\n       A005 STORE\
    \ 8 +Flags \\Deleted -->\n                                   <-- * 8 Store (Flags\
    \ (\\Deleted\n                                                  \\Seen))\n   \
    \                                <-- A005 OK Store complete\n                \
    \                       {Wait for command}\n       A006 EXPUNGE             -->\n\
    \                                   <-- * 19 EXISTS\n                        \
    \           <-- * 8 EXPUNGE\n                                   <-- * 18 EXISTS\n\
    \                                   <-- A006 Expunge complete\n              \
    \                         {Wait for command}\n       A007 LOGOUT             \
    \ -->\n                                   <-- * BYE IMAP2 server quitting\n  \
    \                                 <-- A007 OK Logout complete\n       {Close Connection}\
    \       --><-- {Close connection}\n                                       {Go\
    \ back to start}\n"
- title: Conventions
  contents:
  - "Conventions\n   The following terms are used in a meta-sense in the syntax\n\
    \   specification below:\n      An ASCII-STRING is a sequence of arbitrary ASCII\
    \ characters.\n      An ATOM is a sequence of ASCII characters delimited by SP\
    \ or CRLF.\n      A CHARACTER is any ASCII character except \"\"\"\", \"{\", CR,\
    \ LF, \"%\",\n      or \"\\\".\n      A CRLF is an ASCII carriage-return character\
    \ followed immediately\n      by an ASCII linefeed character.\n      A NUMBER\
    \ is a sequence of the ASCII characters which represent\n      decimal numerals\
    \ (\"0\" through \"9\"), delimited by SP, CRLF, \",\", or\n      \":\".\n    \
    \  A SP is the ASCII space character.\n      A TEXT_LINE is a human-readable sequence\
    \ of ASCII characters up to\n      but not including a terminating CRLF.\n   One\
    \ of the most common fields in the IMAP2 protocol is a STRING,\n   which may be\
    \ an ATOM, QUOTED-STRING (a sequence of CHARACTERs inside\n   double-quotes),\
    \ or a LITERAL.  A literal consists of an open brace\n   (\"{\"), a number, a\
    \ close brace (\"}\"), a CRLF, and then an ASCII-\n   STRING of n characters,\
    \ where n is the value of the number inside the\n   brace. In general, a string\
    \ should be represented as an ATOM or\n   QUOTED-STRING if at all possible.  The\
    \ semantics for QUOTED-STRING or\n   LITERAL are checked before those for ATOM;\
    \ therefore an ATOM used in\n   a STRING may only contain CHARACTERs.  Literals\
    \ are most often sent\n   from the server to the client; in the rare case of a\
    \ client to server\n   literal there is a special consideration (see the \"+ text\"\
    \ response\n   below).\n   Another important field is the SEQUENCE, which identifies\
    \ a set of\n   messages by consecutive numbers from 1 to n where n is the number\
    \ of\n   messages in the mailbox.  A sequence may consist of a single number,\n\
    \   a pair of numbers delimited by colon indicating all numbers between\n   those\
    \ two numbers, or a list of single numbers and/or number pairs.\n   For example,\
    \ the sequence 2,4:7,9,12:15 is equivalent to\n   2,4,5,6,7,9,12,13,14,15 and\
    \ identifies all of those messages.\n"
- title: Definitions of Commands and Responses
  contents:
  - "Definitions of Commands and Responses\n     Summary of Commands and Responses\n\
    \       Commands                            ||      Responses\n       --------\
    \                            ||      -------\n       tag NOOP                \
    \            ||      tag OK text\n       tag LOGIN user password             ||\
    \      tag NO text\n       tag LOGOUT                          ||      tag BAD\
    \ text\n       tag SELECT mailbox                  ||      * message_number data\n\
    \       tag CHECK                           ||      * FLAGS flag_list\n      \
    \ tag EXPUNGE                         ||      * SEARCH sequence\n       tag COPY\
    \ sequence mailbox           ||      * BYE text\n       tag FETCH sequence data\
    \             ||      * OK text\n       tag STORE sequence data value       ||\
    \      * NO text\n       tag SEARCH search_program           ||      * BAD text\n\
    \                                           ||      + text\n"
- title: Commands
  contents:
  - "Commands\n   tag NOOP\n      The NOOP command returns an OK to the client.  By\
    \ itself, it does\n      nothing, but certain things may happen as side effects.\
    \  For\n      example, server implementations which implicitly check the mailbox\n\
    \      for new mail may do so as a result of this command.  The primary\n    \
    \  use of this command is to for the client to see if the server is\n      still\
    \ alive (and notify the server that the client is still alive,\n      for those\
    \ servers which have inactivity autologout timers).\n   tag LOGIN user password\n\
    \      The LOGIN command identifies the user to the server and carries\n     \
    \ the password authenticating this user.  This information is used\n      by the\
    \ server to control access to the mailboxes.\n      EXAMPLE: A001 LOGIN SMITH\
    \ SESAME logs in as user SMITH with\n      password SESAME.\n   tag LOGOUT\n \
    \     The LOGOUT command indicates the client is done with the session.\n    \
    \  The server sends an unsolicited BYE response before the (tagged)\n      OK\
    \ response, and then closes the connection.\n   tag SELECT mailbox\n      The\
    \ SELECT command selects a particular mailbox.  The server must\n      check that\
    \ the user is permitted read access to this mailbox.\n      Prior to returning\
    \ an OK to the client, the server must send an\n      unsolicited FLAGS and <n>\
    \ EXISTS response to the client giving the\n      flags list for this mailbox\
    \ (simply the system flags if this\n      mailbox doesn't have any special flags)\
    \ and the number of messages\n      in the mailbox.  It is also recommended that\
    \ the server send a <n>\n      RECENT unsolicited response to the client for the\
    \ benefit of\n      clients which make use of the number of new messages in a\
    \ mailbox.\n      Multiple SELECT commands are permitted in a session, in which\
    \ case\n      the prior mailbox is deselected first.\n      The default mailbox\
    \ for the SELECT command is INBOX, which is a\n      special name reserved to\
    \ mean \"the primary mailbox for this user\n      on this server\".  The format\
    \ of other mailbox names is operating\n      system dependent (as of this writing,\
    \ it reflects the filename\n      path of the mailbox file on the current servers).\n\
    \      EXAMPLE: A002 SELECT INBOX selects the default mailbox.\n   tag CHECK\n\
    \      The CHECK command forces a check for new messages and a rescan of\n   \
    \   the mailbox for internal change for those implementations which\n      allow\
    \ multiple simultaneous read/write access to the same mailbox\n      (e.g., TOPS-20).\
    \  It is recommend that periodic implicit checks\n      for new mail be done by\
    \ servers as well.  The server should send\n      an unsolicited <n> EXISTS response\
    \ prior to returning an OK to the\n      client.\n   tag EXPUNGE\n      The EXPUNGE\
    \ command permanently removes all messages with the\n      \\DELETED flag set\
    \ in its flags from the mailbox.  Prior to\n      returning an OK to the client,\
    \ for each message which is removed,\n      an unsolicited <n> EXPUNGE response\
    \ is sent indicating which\n      message was removed.  The message number of\
    \ each subsequent\n      message in the mailbox is immediately decremented by\
    \ 1; this means\n      that if the last 5 messages in a 9-message mail file are\
    \ expunged\n      you will receive 5 \"* 5 EXPUNGE\" responses.  To ensure mailbox\n\
    \      integrity and server/client synchronization, it is recommended\n      that\
    \ the server do an implicit check prior to commencing the\n      expunge and again\
    \ when the expunge is completed.  Furthermore, if\n      the server allows multiple\
    \ simultaneous access to the same mail\n      file the server must lock the mail\
    \ file for exclusive access while\n      an expunge is taking place.\n      EXPUNGE\
    \ is not allowed if the user does not have write access to\n      this mailbox.\n\
    \   tag COPY sequence mailbox\n      The COPY command copies the specified message(s)\
    \ to the specified\n      destination mailbox.  If the destination mailbox does\
    \ not exist,\n      the server should create it.  Prior to returning an OK to\
    \ the\n      client, the server should return an unsolicited <n> COPY response\n\
    \      for each message copied.  A copy should set the \\SEEN flag for all\n \
    \     messages which were successfully copied (provided, of course, that\n   \
    \   the user has write access to this mailbox).\n      EXAMPLE: A003 COPY 2:4\
    \ MEETING copies messages 2, 3, and 4 to\n      mailbox \"MEETING\".\n      COPY\
    \ is not allowed if the user does not have write access to the\n      destination\
    \ mailbox.\n   tag FETCH sequence data\n      The FETCH command retrieves data\
    \ associated with a message in the\n      mailbox.  The data items to be fetched\
    \ may be either a single atom\n      or an S-expression list.  The currently defined\
    \ data items that\n      can be fetched are:\n      ALL             Macro equivalent\
    \ to:\n                      (FLAGS INTERNALDATE RFC822.SIZE ENVELOPE)\n     \
    \ ENVELOPE        The envelope of the message.  The envelope is\n            \
    \          computed by the server by parsing the RFC 822\n                   \
    \   header into the component parts, defaulting\n                      various\
    \ fields as necessary.\n      FAST            Macro equivalent to:\n         \
    \             (FLAGS INTERNALDATE RFC822.SIZE)\n      FLAGS           The flags\
    \ which are set for this message.\n                      This may include the\
    \ following system flags:\n                              \\RECENT    Message arrived\
    \ since\n                                          last read of this mail\n  \
    \                                        file\n                              \\\
    SEEN      Message has been read\n                              \\ANSWERED  Message\
    \ has been answered\n                              \\FLAGGED   Message is \"flagged\"\
    \ for\n                                          urgent/special attention\n  \
    \                            \\DELETED   Message is \"deleted\" for\n        \
    \                                  removal by later EXPUNGE\n      INTERNALDATE\
    \    The date and time the message was written to\n                      the mailbox.\n\
    \      RFC822          The message in RFC 822 format.\n      RFC822.HEADER   The\
    \ RFC 822 format header of the message.\n      RFC822.SIZE     The number of characters\
    \ in the message as\n                      expressed in RFC 822 format.\n    \
    \  RFC822.TEXT     The text body of the message, omitting the\n              \
    \        RFC 822 header.\n      EXAMPLES:\n      A003 FETCH 2:4 ALL\n        \
    \ fetches the flags, internal date, RFC 822 size, and envelope\n         for messages\
    \ 2, 3, and 4.\n      A004 FETCH 3 RFC822\n         fetches the RFC 822 representation\
    \ for message 3.\n      A005 FETCH 4 (FLAGS RFC822.HEADER)\n         fetches the\
    \ flags and RFC 822 format header for message 4.\n   tag STORE sequence data value\n\
    \      The STORE command alters data associated with a message in the\n      mailbox.\
    \  The currently defined data items that can be stored are:\n      FLAGS     \
    \      Replace the flags for the message with the\n                      argument\
    \ (in flag list format).\n      +FLAGS          Add the flags in the argument\
    \ to the\n                      message's flag list.\n      -FLAGS          Remove\
    \ the flags in the argument from the\n                      message's flag list.\n\
    \         STORE is not allowed if the user does not have write access to\n   \
    \      this mailbox.\n         EXAMPLE:  A003 STORE 2:4 +FLAGS (\\DELETED)\n \
    \        marks messages 2, 3, and 4 for deletion.\n   tag SEARCH search_criteria\n\
    \      The SEARCH command searches the mailbox for messages which match\n    \
    \  the given set of criteria.  The unsolicited SEARCH <1#number>\n      response\
    \ from the server is a list of messages which express the\n      intersection\
    \ (AND function) of all the messages.  The currently\n      defined criteria are:\n\
    \      ALL             All messages in the mailbox; the default\n            \
    \          initial criterion for ANDing.\n      ANSWERED        Messages with\
    \ the \\ANSWERED flag set.\n      BCC string      Messages which contain the specified\
    \ string\n                      in the envelope's BCC field.\n      BEFORE date\
    \     Messages whose internal date is earlier than\n                      the\
    \ specified date.\n      BODY string     Messages which contain the specified\
    \ string\n                      in the body of the message.\n      CC string \
    \      Messages which contain the specified string\n                      in the\
    \ envelope's CC field.\n      DELETED         Messages with the \\DELETED flag\
    \ set.\n      FLAGGED         Messages with the \\FLAGGED flag set.\n      KEYWORD\
    \ flag    Messages with the specified flag set.\n      NEW             Messages\
    \ which have the \\RECENT flag set but\n                      not the \\SEEN flag.\
    \  This is functionally\n                      equivalent to \"RECENT UNSEEN\"\
    .\n      OLD             Messages which do not have the \\RECENT flag\n      \
    \                set.\n      ON date         Messages whose internal date is the\
    \ same as\n                      the specified date.\n      RECENT          Messages\
    \ which have the \\RECENT flag set.\n      SEEN            Messages which have\
    \ the \\SEEN flag set.\n      SINCE date      Messages whose internal date is\
    \ later than\n                      the specified date.\n      SUBJECT string\
    \  Messages which contain the specified string\n                      in the envelope's\
    \ SUBJECT field.\n      TEXT string     Messages which contain the specified string.\n\
    \      TO string       Messages which contain the specified string in\n      \
    \                the envelope's TO field.\n      UNANSWERED      Messages which\
    \ do not have the \\ANSWERED flag\n                      set.\n      UNDELETED\
    \       Messages which do not have the \\DELETED flag\n                      set.\n\
    \      UNFLAGGED       Messages which do not have the \\FLAGGED flag\n       \
    \               set.\n      UNKEYWORD flag  Messages which do not have the specified\
    \ flag\n                      set.\n      UNSEEN          Messages which do not\
    \ have the \\SEEN flag set.\n         EXAMPLE:  A003 SEARCH DELETED FROM \"SMITH\"\
    \ SINCE 1-OCT-87\n         returns the message numbers for all deleted messages\
    \ from Smith\n         that were placed in the mail file since October 1, 1987.\n"
- title: Responses
  contents:
  - "Responses\n   tag OK text\n      This response identifies successful completion\
    \ of the command with\n      the indicated tag.  The text is a line of human-readable\
    \ text\n      which may be useful in a protocol telemetry log for debugging\n\
    \      purposes.\n   tag NO text\n      This response identifies unsuccessful\
    \ completion of the command\n      with the indicated tag.  The text is a line\
    \ of human-readable text\n      which probably should be displayed to the user\
    \ in an error report\n      by the client.\n   tag BAD text\n      This response\
    \ indicates faulty protocol received from the client\n      and indicates a bug\
    \ in the client.  The text is a line of human-\n      readable text which should\
    \ be recorded in any telemetry as part of\n      a bug report to the maintainer\
    \ of the client.\n   * number message_data\n      This response occurs as a result\
    \ of several different commands.\n      The message_data is one of the following:\n\
    \      EXISTS  The specified number of messages exists in the mailbox.\n     \
    \ RECENT  The specified number of messages have arrived since the\n          \
    \    last time this mailbox was read.\n      EXPUNGE The specified message number\
    \ has been permanently\n              removed from the mailbox, and the next message\
    \ in the\n              mailbox (if any) becomes that message number.\n      STORE\
    \ data\n              Functionally equivalent to FETCH, only it happens as a\n\
    \              result of a STORE command.\n      FETCH data\n              This\
    \ is the principle means by which data about a\n              message is returned\
    \ to the client.  The data is in a\n              Lisp-like S-expression property\
    \ list form.  The current\n              properties are:\n         ENVELOPE  \
    \   An S-expression format list which describes the\n                      envelope\
    \ of a message.  The envelope is computed\n                      by the server\
    \ by parsing the RFC 822 header into\n                      the component parts,\
    \ defaulting various fields\n                      as necessary.\n           \
    \           The fields of the envelope are in the following\n                \
    \      order: date, subject, from, sender, reply-to, to,\n                   \
    \   cc, bcc, in-reply-to, and message-id.  The date,\n                      subject,\
    \ in-reply-to, and message-id fields are\n                      strings.  The\
    \ from, sender, reply-to, to, cc,\n                      and bcc fields are lists\
    \ of addresses.\n                      An address is an S-expression format list\
    \ which\n                      describes an electronic mail address.  The fields\n\
    \                      of an address are in the following order:\n           \
    \           personal name, source-route (a.k.a. the\n                      at-domain-list\
    \ in SMTP), mailbox name, and\n                      host name.\n            \
    \          Any field of an envelope or address which is\n                    \
    \  not applicable is presented as the atom NIL.\n                      Note that\
    \ the server must default the reply-to\n                      and sender fields\
    \ from the from field; a client is\n                      not expected to know\
    \ to do this.\n         FLAGS        An S-expression format list of flags which\
    \ are set\n                      for this message.  This may include the following\n\
    \                      system flags:\n                      \\RECENT       Message\
    \ arrived since last\n                                     read of this mail file\n\
    \                      \\SEEN         Message has been read\n                \
    \      \\ANSWERED     Message has been answered\n                      \\FLAGGED\
    \      Message is \"flagged\" for\n                                     urgent/special\
    \ attention\n                      \\DELETED      Message is \"deleted\" for\n\
    \                                     removal by later EXPUNGE\n         INTERNALDATE\
    \  A string containing the date and time the\n                       message was\
    \ written to the mailbox.\n         RFC822        A string expressing the message\
    \ in RFC 822\n                       format.\n         RFC822.HEADER A string\
    \ expressing the RFC 822 format\n                       header of the message\n\
    \         RFC822.SIZE   A number indicating the number of\n                  \
    \     characters in the message as expressed\n                       in RFC 822\
    \ format.\n         RFC822.TEXT   A string expressing the text body of the\n \
    \                      message, omitting the RFC 822 header.\n   * FLAGS flag_list\n\
    \      This response occurs as a result of a SELECT command.  The flag\n     \
    \ list are the list of flags (at a minimum, the system-defined\n      flags) which\
    \ are applicable for this mailbox.  Flags other than\n      the system flags are\
    \ a function of the server implementation.\n   * SEARCH number(s)\n      This\
    \ response occurs as a result of a SEARCH command.  The\n      number(s) refer\
    \ those messages which match the search criteria.\n      Each number is delimited\
    \ by a space, e.g., \"SEARCH 2 3 6\".\n   * BYE text\n      This response indicates\
    \ that the server is about to close the\n      connection.  The text is a line\
    \ of human-readable text which\n      should be displayed to the user in a status\
    \ report by the client.\n      This may be sent as part of a normal logout sequence,\
    \ or as a\n      panic shutdown announcement by the server.  It is also used by\n\
    \      some servers as an announcement of an inactivity autologout.\n   * OK text\n\
    \      This response indicates that the server is alive.  No special\n      action\
    \ on the part of the client is called for.  This is presently\n      only used\
    \ by servers at startup as a greeting message indicating\n      that they are\
    \ ready to accept the first command.  The text is a\n      line of human-readable\
    \ text which may be logged in protocol\n      telemetry.\n   * NO text\n     \
    \ This response indicates some operational error at the server which\n      cannot\
    \ be traced to any protocol command.  The text is a line of\n      human-readable\
    \ text which should be logged in protocol telemetry\n      for the maintainer\
    \ of the server and/or the client.  No known\n      server currently outputs such\
    \ a response.\n   * BAD text\n      This response indicates some protocol error\
    \ at the server which\n      cannot be traced to any protocol command.  The text\
    \ is a line of\n      human-readable text which should be logged in protocol telemetry\n\
    \      for the maintainer of the server and/or the client.  This\n      generally\
    \ indicates a protocol synchronization problem on the part\n      of the client,\
    \ and examination of the protocol telemetry is\n      advised to determine the\
    \ cause of the problem.\n   + text\n      This response indicates that the server\
    \ is ready to accept the\n      text of a literal from the client.  Normally,\
    \ a command from the\n      client is a single text line.  If the server detects\
    \ an error in\n      the command, it can simply discard the remainder of the line.\
    \  It\n      cannot do this in the case of commands which contain literals,\n\
    \      since a literal can be an arbitrarily long amount of text, and the\n  \
    \    server may not even be expecting a literal.  This mechanism is\n      provided\
    \ so the client knows not to send a literal until the\n      server definitely\
    \ expects it, preserving client/server\n      synchronization.\n      In actual\
    \ practice, this situation is rarely encountered.  In the\n      current protocol,\
    \ the only client command likely to contain a\n      literal is the LOGIN command.\
    \  Consider a situation in which a\n      server validates the user before checking\
    \ the password.  If the\n      password contains \"funny\" characters and hence\
    \ is sent as a\n      literal, then if the user is invalid an error would occur\
    \ before\n      the password is parsed.\n      No such synchronization protection\
    \ is provided for literals sent\n      from the server to the client, for performance\
    \ reasons.  Any\n      synchronization problems in this direction would be due\
    \ to a bug\n      in the client or server and not for some operational problem.\n"
- title: Sample IMAP2 session
  contents:
  - "Sample IMAP2 session\n   The following is a transcript of an actual IMAP2 session.\
    \  Server\n   output is identified by \"S:\" and client output by \"U:\".  In\
    \ cases\n   where lines were too long to fit within the boundaries of this\n \
    \  document, the line was continued on the next line preceded by a tab.\n   S:\
    \      * OK SUMEX-AIM.Stanford.EDU Interim Mail Access Protocol II\n         \
    \          Service 6.1(349) at Thu, 9 Jun 88 14:58:30 PDT\n   U:      a001 login\
    \ crispin secret\n   S:      a002 OK User CRISPIN logged in at Thu, 9 Jun 88 14:58:42\
    \ PDT,\n                   job 76\n   U:      a002 select inbox\n   S:      *\
    \ FLAGS (Bugs SF Party Skating Meeting Flames Request AI\n                   Question\
    \ Note \\XXXX \\YYYY \\Answered \\Flagged \\Deleted\n                   \\Seen)\n\
    \   S:      * 16 EXISTS\n   S:      * 0 RECENT\n   S:      a002 OK Select complete\n\
    \   U:      a003 fetch 16 all\n   S:      * 16 Fetch (Flags (\\Seen) InternalDate\
    \ \" 9-Jun-88 12:55:\n               RFC822.Size 637 Envelope (\"Sat, 4 Jun 88\
    \ 13:27:11 PDT\"\n               \"INFO-MAC Mail Message\" ((\"Larry Fagan\" NIL\
    \ \"FAGAN\"\n               \"SUMEX-AIM.Stanford.EDU\")) ((\"Larry Fagan\" NIL\
    \ \"FAGAN\"\n               \"SUMEX-AIM.Stanford.EDU\")) ((\"Larry Fagan\" NIL\
    \ \"FAGAN\"\n               \"SUMEX-AIM.Stanford.EDU\")) ((NIL NIL \"rindflEISCH\"\
    \n               \"SUMEX-AIM.Stanford.EDU\")) NIL NIL NIL\n               \"<12403828905.13.FAGAN@SUMEX-AIM.Stanford.EDU>\"\
    ))\n   S:   a003 OK Fetch completed\n   U:   a004 fetch 16 rfc822\n   S:   * 16\
    \ Fetch (RFC822 {637}\n   S:   Mail-From: RINDFLEISCH created at  9-Jun-88 12:55:43\n\
    \   S:   Mail-From: FAGAN created at  4-Jun-88 13:27:12\n   S:   Date: Sat, 4\
    \ Jun 88 13:27:11 PDT\n   S:   From: Larry Fagan  <FAGAN@SUMEX-AIM.Stanford.EDU>\n\
    \   S:   To: rindflEISCH@SUMEX-AIM.Stanford.EDU\n   S:   Subject: INFO-MAC Mail\
    \ Message\n   S:   Message-ID: <12403828905.13.FAGAN@SUMEX-AIM.Stanford.EDU>\n\
    \   S:   ReSent-Date: Thu, 9 Jun 88 12:55:43 PDT\n   S:   ReSent-From: TC Rindfleisch\
    \ <Rindfleisch@SUMEX-AIM.Stanford.EDU>\n   S:   ReSent-To: Yeager@SUMEX-AIM.Stanford.EDU,\n\
    \                   Crispin@SUMEX-AIM.Stanford.EDU\n   S:   ReSent-Message-ID:\n\
    \           <12405133897.80.RINDFLEISCH@SUMEX-AIM.Stanford.EDU>\n   S:\n   S:\
    \   The file is <info-mac>usenetv4-55.arc  ...\n   S:   Larry\n   S:   -------\n\
    \   S:   )\n   S:   pa004 OK Fetch completed\n   U:   a005 logout\n   S:   * BYE\
    \ DEC-20 IMAP II server terminating connection\n   S:   a005 OK SUMEX-AIM.Stanford.EDU\
    \ Interim Mail Access Protocol\n                   Service logout\n"
- title: Implementation Discussion
  contents:
  - "Implementation Discussion\n   As of this writing, SUMEX has completed an IMAP2\
    \ client for Xerox\n   Lisp machines written in hybrid Interlisp/CommonLisp and\
    \ is beta-\n   testing a client for TI Explorers written entirely in CommonLisp.\n\
    \   SUMEX has also completed a portable IMAP2 client protocol library\n   module\
    \ written in C.  This library, with the addition of a small main\n   program (primarily\
    \ user interface) and a TCP/IP driver, became a\n   rudimentary remote system\
    \ mail-reading program under Unix.  The first\n   production use of this library\
    \ will be as a part of a MacII client\n   which is under development.\n   As of\
    \ this writing, SUMEX has completed IMAP2 servers for TOPS-20\n   written in DEC-20\
    \ assembly language and 4.2/3 BSD Unix written in C.\n   The TOPS-20 server is\
    \ fully compatible with MM-20, the standard\n   TOPS-20 mailsystem, and requires\
    \ no special action or setup on the\n   part of the user.  The INBOX under TOPS-20\
    \ is the user's MAIL.TXT.\n   The TOPS-20 server also supports multiple simultaneous\
    \ access to the\n   same mailbox, including simultaneous access between the IMAP2\
    \ server\n   and MM-20.  The 4.2/3 BSD Unix server requires that the user use\n\
    \   mail.txt format which is compatible only with SRI MM-32 or Columbia\n   MM-C.\
    \  The 4.2/3 BSD Unix server only allows simultaneous read\n   access; write access\
    \ must be exclusive.\n   The Xerox Lisp client and DEC-20 server have been in\
    \ production use\n   for over a year; the Unix server was put into production\
    \ use a few\n   months ago.  IMAP2 has been used to access mailboxes at remote\
    \ sites\n   from a local workstation via the Internet.  For example, from the\n\
    \   Stanford local network the author has read his mailbox at a Milnet\n   site.\n\
    \   This specification does not make any formal definition of size\n   restrictions,\
    \ but the DEC-20 server has the following limitations:\n    . length of a mailbox:\
    \ 7,077,888 characters\n    . maximum number of messages: 18,432 messages\n  \
    \  . length of a command line: 10,000 characters\n    . length of the local host\
    \ name: 64 characters\n    . length of a \"short\" argument: 39 characters\n \
    \   . length of a \"long\" argument: 491,520 characters\n    . maximum amount\
    \ of data output in a single fetch:\n      655,360 characters\n   To date, nobody\
    \ has run up against any of these limitations, many of\n   which are substantially\
    \ larger than most current user mail reading\n   programs.\n   There are several\
    \ advantages to the scheme of tags and unsolicited\n   responses.  First, the\
    \ infamous synchronization problems of SMTP and\n   similar protocols do not happen\
    \ with tagged commands; a command is\n   not considered satisfied until a response\
    \ with the same tag is seen.\n   Tagging allows an arbitrary amount of other responses\
    \ (\"unsolicited\"\n   data) to be sent by the server with no possibility of the\
    \ client\n   losing synchronization.  Compare this with the problems that FTP\
    \ or\n   SMTP clients have with continuation, partial completion, and\n   commentary\
    \ reply codes.\n   Another advantage is that a non-lockstep client implementation\
    \ is\n   possible.  The client could send a command, and entrust the handling\n\
    \   of the server responses to a different process which would signal the\n  \
    \ client when the tagged response comes in.  Under certain\n   circumstances,\
    \ the client could even have more than one command\n   outstanding.\n   It was\
    \ observed that synchronization problems can occur with literals\n   if the literal\
    \ is not recognized as such.  Fortunately, the cases in\n   which this can happen\
    \ are relatively rare; a mechanism (the special\n   \"+\" tag response) was introduced\
    \ to handle those few cases which\n   could happen.  The proper way to address\
    \ this problem in all cases is\n   probably to move towards a record-oriented\
    \ architecture instead of\n   the text stream model provided by TCP.\n   Unsolicited\
    \ data needs some discussion.  Unlike most protocols, in\n   which the server\
    \ merely does the client's bidding, an IMAP2 server\n   has a semi-autonomous\
    \ role.  By means of sending \"unsolicited data\",\n   the server is in effect\
    \ sending a command to the client -- to update\n   and/or extend its (incomplete)\
    \ model of the mailbox with new\n   information from the server.  In this viewpoint,\
    \ a \"fetch\" command is\n   merely a request to the server to include the desired\
    \ data in any\n   other \"unsolicited\" data the server may send, and a server\n\
    \   acknowledgement to the \"fetch\" is a statement that all the requested\n \
    \  data has been sent.\n   In terms of implementation, the client may have a local\
    \ cache of data\n   from the mailbox.  This cache is incomplete, and at startup\
    \ is empty.\n   A listener processes all unsolicited data, and updates the cache\n\
    \   based on this data.  If a tagged response arrives, the listener\n   unblocks\
    \ the process which sent the tagged request.\n   Perhaps as a result of opening\
    \ a mailbox, unsolicited data from the\n   server arrives.  The first piece of\
    \ data is the number of messages.\n   This is used to size the cache; note that\
    \ by sending a new \"number of\n   messages\" unsolicited data message the cache\
    \ would be re-sized (this\n   is how newly arrived mail is handled).  If the client\
    \ attempts to\n   access information from the cache, it will encounter empty spots\n\
    \   which will trigger \"fetch\" requests.  The request would be sent, some\n\
    \   unsolicited data including the answer to the fetch will flow back,\n   and\
    \ then the \"fetch\" response will unblock the client.\n   People familiar with\
    \ demand-paged virtual memory operating system\n   design will recognize this\
    \ model as being very similar to page-fault\n   handling on a demand-paged system.\n"
- title: Formal Syntax
  contents:
  - "Formal Syntax\n   The following syntax specification uses the augmented Backus-Naur\n\
    \   Form (BNF) notation as specified in RFC 822 with one exception; the\n   delimiter\
    \ used with the \"#\" construct is a single space (SP) and not\n   a comma.\n\
    \   address         ::= \"(\" addr_name SP addr_adl SP addr_mailbox SP\n     \
    \                  addr_host \")\"\n   addr_adl        ::= nil / string\n   addr_host\
    \       ::= nil / string\n   addr_mailbox    ::= nil / string\n   addr_name  \
    \     ::= nil / string\n   check           ::= \"CHECK\"\n   copy            ::=\
    \ \"COPY\" SP sequence SP mailbox\n   data            ::= (\"FLAGS\" SP flag_list\
    \ / \"SEARCH\" SP 1#number /\n                       \"BYE\" SP text_line / \"\
    OK\" SP text_line /\n                       \"NO\" SP text_line / \"BAD\" SP text_line)\n\
    \   date            ::= string in form \"dd-mmm-yy hh:mm:ss-zzz\"\n   envelope\
    \        ::= \"(\" env_date SP env_subject SP env_from SP\n                  \
    \     env_sender SP env_reply-to SP env_to SP\n                       env_cc SP\
    \ env_bcc SP env_in-reply-to SP\n                       env_message-id \")\"\n\
    \   env_bcc         ::= nil / \"(\" 1*address \")\"\n   env_cc          ::= nil\
    \ / \"(\" 1*address \")\"\n   env_date        ::= string\n   env_from        ::=\
    \ nil / \"(\" 1*address \")\"\n   env_in-reply-to ::= nil / string\n   env_message-id\
    \  ::= nil / string\n   env_reply-to    ::= nil / \"(\" 1*address \")\"\n   env_sender\
    \      ::= nil / \"(\" 1*address \")\"\n   env_subject     ::= nil / string\n\
    \   env_to          ::= nil / \"(\" 1*address \")\"\n   expunge         ::= \"\
    EXPUNGE\"\n   fetch           ::= \"FETCH\" SP sequence SP (\"ALL\" / \"FAST\"\
    \ /\n                       fetch_att / \"(\" 1#fetch_att \")\")\n   fetch_att\
    \       ::= \"ENVELOPE\" / \"FLAGS\" / \"INTERNALDATE\" /\n                  \
    \     \"RFC822\" / \"RFC822.HEADER\" / \"RFC822.SIZE\" /\n                   \
    \    \"RFC822.TEXT\"\n   flag_list       ::= ATOM / \"(\" 1#ATOM \")\"\n   literal\
    \         ::= \"{\" NUMBER \"}\" CRLF ASCII-STRING\n   login           ::= \"\
    LOGIN\" SP userid SP password\n   logout          ::= \"LOGOUT\"\n   mailbox \
    \        ::= \"INBOX\" / string\n   msg_copy        ::= \"COPY\"\n   msg_data\
    \        ::= (msg_exists / msg_recent / msg_expunge /\n                      \
    \ msg_fetch / msg_copy)\n   msg_exists      ::= \"EXISTS\"\n   msg_expunge   \
    \  ::= \"EXPUNGE\"\n   msg_fetch       ::= (\"FETCH\" / \"STORE\") SP \"(\" 1#(\"\
    ENVELOPE\" SP\n                        envelope / \"FLAGS\" SP \"(\" 1#(recent_flag\n\
    \                        flag_list) \")\" / \"INTERNALDATE\" SP date /\n     \
    \                   \"RFC822\" SP string / \"RFC822.HEADER\" SP string /\n   \
    \                     \"RFC822.SIZE\" SP NUMBER / \"RFC822.TEXT\" SP\n       \
    \                 string) \")\"\n   msg_recent      ::= \"RECENT\"\n   msg_num\
    \         ::= NUMBER\n   nil             ::= \"NIL\"\n   noop            ::= \"\
    NOOP\"\n   password        ::= string\n   recent_flag     ::= \"\\RECENT\"\n \
    \  ready           ::= \"+\" SP text_line\n   request         ::= tag SP (noop\
    \ / login / logout / select / check /\n                       expunge / copy /\
    \ fetch / store / search) CRLF\n   response        ::= tag SP (\"OK\" / \"NO\"\
    \ / \"BAD\") SP text_line CRLF\n   search          ::= \"SEARCH\" SP 1#(\"ALL\"\
    \ / \"ANSWERED\" /\n                       \"BCC\" SP string / \"BEFORE\" SP string\
    \ /\n                       \"BODY\" SP string / \"CC\" SP string / \"DELETED\"\
    \ /\n                       \"FLAGGED\" / \"KEYWORD\" SP atom / \"NEW\" / \"OLD\"\
    \ /\n                       \"ON\" SP string / \"RECENT\" / \"SEEN\" /\n     \
    \                  \"SINCE\" SP string / \"TEXT\" SP string /\n              \
    \         \"TO\" SP string / \"UNANSWERED\" / \"UNDELETED\" /\n              \
    \         \"UNFLAGGED\" / \"UNKEYWORD\" / \"UNSEEN\")\n   select          ::=\
    \ \"SELECT\" SP mailbox\n   sequence        ::= NUMBER / (NUMBER \",\" sequence)\
    \ / (NUMBER \":\"\n                       sequence)\n   store           ::= \"\
    STORE\" SP sequence SP store_att\n   store_att       ::= (\"+FLAGS\" SP flag_list\
    \ / \"-FLAGS\" SP flag_list /\n                       \"FLAGS\" SP flag_list)\n\
    \   string          ::= atom / \"\"\"\" 1*character \"\"\"\" / literal\n   system_flags\
    \    ::= \"\\ANSWERED\" SP \"\\FLAGGED\" SP \"\\DELETED\" SP\n               \
    \        \"\\SEEN\"\n   tag             ::= atom\n   unsolicited     ::= \"*\"\
    \ SP (msg_num SP msg_data / data) CRLF\n   userid          ::= string\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Bill Yeager and Rich Acuff both contributed invaluable suggestions\
    \ in\n   the evolution of IMAP2 from the original IMAP.  The SUMEX IMAP2\n   software\
    \ was written by Mark Crispin (DEC-20 server, Xerox Lisp\n   client, C client),\
    \ Frank Gilmurray (Common Lisp client), Christopher\n   Lane (Xerox Lisp client),\
    \ and Bill Yeager (Unix server).  Any\n   mistakes or flaws in this IMAP2 protocol\
    \ specification are, however,\n   strictly my own.\n"
