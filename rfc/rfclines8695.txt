Abstract This document describes a data model for the management of the Routing Information Protocol (RIP).
Both RIP version 2 and RIPng are covered.
The data model includes definitions for configuration, operational state, and Remote Procedure Calls (RPCs).
The YANG data model in this document conforms to the Network Management Datastore Architecture (NMDA).
This document introduces a YANG [RFC7950] data model for the Routing Information Protocol (RIP) [RFC2453][RFC2080].
RIP was designed to work as an Interior Gateway Protocol (IGP) in moderate size Autonomous Systems (AS).
This YANG data model supports both RIP version 2 and RIPng.
RIP version 2 (defined in [RFC2453]) supports IPv4.
RIPng (defined in [RFC2080]) supports IPv6.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
Tree Diagrams A simplified graphical representation of the data model is used in this document.
The meaning of the symbols in these diagrams is defined in [RFC8340].
Prefixes in Data Node Names
In this document, names of data nodes, actions, and other data model objects are often used without a prefix, as long as it is clear from the context in which YANG module each name is defined.
Otherwise, names are prefixed using the standard prefix associated with the corresponding YANG module, as shown in Table 1.
bfd types   ietf bfd types
Table 1: Prefixes and Corresponding YANG 2.
Design of the Data Model 2.1.
Scope of the Data Model
The data model covers RIP version 2
[RFC2453] and RIPng [RFC2080] protocols.
Manage the protocol operational behaviors.
Retrieve the protocol operational status.
The capabilities described in [RFC1724] are covered.
Relation to the Core Routing Framework
This data model augments the core routing data model "ietf routing" specified in [RFC8349].
rw routing  rw router id?
Augmented by this Model ...
The "rip" container instantiates a RIP entity that supports RIP version 2 or RIPng.
Depending on the implementation of "ietf  routing", a RIP instance MAY belong to a logical router or network instance.
The data model structure for the protocol configuration is as shown below: augment /rt:routing/
rw rip  rw <per instance configuration
if:interface ref  rw <per interface configuration>
The data model structure for the protocol states is as shown below: augment /rt:routing/
rw rip  ro <per instance operational states
ro <IPv4 RIP route states
This model conforms to the Network Management Datastore Architecture (NMDA) [RFC8342].
The operational state data is combined with the associated configuration data in the same hierarchy [RFC8407].
When protocol states are retrieved from the NMDA operational state datastore, the returned states cover all "config true" (rw) and "config false
" (ro) nodes defined in the schema.
This model defines one RPC "clear rip route" that can be used to clear RIP routes from the routing table.
This model does not define RIP specific notifications.
To enable notifications, the mechanisms defined in [RFC8639] and [RFC8641] can be used.
Specify subtree filters or XML Path Language (XPath) filters so that only interested contents will be sent.
Specify either periodic or on demand notifications.
This model defines several features that are beyond the basic RIP configuration, and it is the responsibility of each vendor to decide whether to support a given feature on a device.
This document defines the YANG module "ietf rip", which has the following tree structure: module: ietf rip augment /rt:routing/
rw distribute list  [prefix set name direction]
rw desired min tx interval?
counter32 rpcs:  x clear rip route  w input  w rip instance?
file "ietf rip@2020 02 20.yang
" module ietf rip { yang version 1.1; namespace "urn:ietf:params:xml:
>"; description "This YANG module defines a model for managing Routing Information Protocol (RIP), including RIP version 2 and RIPng.
Copyright (c) 2020 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 8695; see the RFC itself for full legal notices."; revision 2020 02 20 { description "Initial revision."
A YANG Data Model for Routing Information Protocol (RIP).
RFC 2453: RIP Version 2.
The string value is the name identifier for uniquely identifying the referenced prefix set, which contains a list of prefixes that a routing policy can applied.
The definition of such a prefix set is outside the scope of this document."
; } typedef route policy ref { type string; description "A type for a reference to a route policy.
The string value is the name identifier for uniquely identifying the referenced routing policy, which contains one or more policy rules that can be used for a routing decision.
container cg nat { presence "Present if Carrier Grade Network Address Translation (CGNAT) routes are redistributed."; description "Carrier Grade Network Address Translation (CGNAT) routes."; uses redistribute route policy attributes; } container connected { presence "Present if directly attached network routes are redistributed."
; description "Redistributes directly attached networks into the RIP routing instance."; uses redistribute route policy attributes; } container ipsec { presence "Present if IP security routing instance routes are redistributed."; description "Redistributes routes from the IP security routing instance into the RIP routing instance."
IS IS routing instance into the RIP routing instance."
; } leaf level { type enumeration { enum 1 { description "IS IS level 1 routes."
; } enum 2 { description "IS IS level 2 routes."
Present if Network Address Translation (NAT) routes are redistributed."
; description "Redistributes Network Address Translation (NAT) routes into the RIP routing instance."; uses redistribute route policy attributes;
} container static { presence "Present if redistributing static routes."
; description "Redistributes static routes into the RIP routing instance."; uses redistribute route policy attributes; }
; leaf metric { type uint8 { range "0..16"
; } description "Metric used for the redistributed route.
If a metric is not specified, the metric configured with the default metric attribute in RIP router configuration is used.
grouping timers container { description "Container for settings of basic timers"; container timers {
{ description "invalid interval must be at least three times the value for the update interval argument."
; } must 'flush interval > invalid interval' { description "flush interval must be larger than the value for the invalid interval argument."
; } description "Timers for the specified RIPv2 or RIPng instance or interface."
This value is at least three times the value for the update interval argument.";
This value must be larger than the value for the invalid interval argument."
This attribute is used to suppress triggered updates.
When the arrival of a regularly scheduled update matches the number of seconds or is less than the number seconds configured with this attribute, the triggered update is suppressed.
global attributes grouping distribute lists { description "Grouping for distribute lists.
; } description "Enable RIP on this interface."
description "Disables listening to, and processing of,
; } container summary address { description "Summarizes information about RIPv2 or RIPng routes sent over the specified interface in RIPv2 or RIPng update packets."; leaf address { type inet:ip prefix;
description "Specifies the IP address and the prefix length that identify the routes to be summarized.
RIPv2 or RIPng is operational on this interface."
; } enum down { description "RIPv2 or RIPng is not operational on this interface."
description "The interface has a valid address."
; } container statistics { if feature "interface statistics"; config false; description "Interface statistics counters."; leaf discontinuity time { type yang:date and time; description "The time on the most recent occasion at which any one or more of the statistics counters suffered a discontinuity.
If no such discontinuities have occurred since the last re initialization of the local management subsystem, then this node contains the time the local management subsystem re initialized itself."
; } leaf bad packets rcvd { type yang:counter32
The number of triggered RIP updates actually sent on this interface.
This explicitly does NOT include full updates sent containing new information."
interfaces /  Operational state  / leaf next triggered update { type uint32; config false; description "Next triggered update."
; } leaf interface { type if:interface ref; description "The interface that the route uses."
; } leaf interface { type if:interface ref; description "The interface that the route uses."
ipv6 container statistics { if feature "global statistics"; config false; description "Global statistics counters."; leaf discontinuity time { type yang:date and time; description "
The time on the most recent occasion at which any one or more of the statistics counters suffered a discontinuity.
If no such discontinuities have occurred since the last re initialization of the local management subsystem, then this node contains the time the local management subsystem re initialized itself."
; input { leaf rip instance { type leafref { path "/rt:routing/
} description "Instance name identifying a specific RIP instance.
This leaf is optional for the RPC.
If it is specified, the RPC will clear all routes in the specified RIP instance; if it is not specified, the RPC will clear all routes in all RIP instances."
This document registers the following namespace URIs in the "IETF XML Registry" [RFC3688]:
yang:ietf rip Registrant Contact:  The IESG.
N/A; the requested URI is an XML namespace.
This document registers the following YANG modules in the "YANG Module Names" registry [RFC6020]
yang:ietf rip Prefix:  rip Reference:
The YANG module specified in this document defines a schema for data that is designed to be accessed via network management protocols such as NETCONF [RFC6241] or RESTCONF [RFC8040].
The lowest NETCONF layer is the secure transport layer, and the mandatory to implement secure transport is Secure Shell (SSH) [RFC6242].
The lowest RESTCONF layer is HTTPS, and the mandatory to implement secure transport is TLS [RFC8446].
The NETCONF Access Control Model (NACM)
[RFC8341] provides the means to restrict access for particular NETCONF or RESTCONF users to a preconfigured subset of all available NETCONF or RESTCONF protocol operations and content.
There are a number of data nodes defined in this YANG module that are writable/creatable/deletable (i.e., config true, which is the default).
These data nodes may be considered sensitive or vulnerable in some network environments.
Write operations (e.g., edit config) to these data nodes without proper protection can have a negative effect on network operations.
These are the subtrees and data nodes and their sensitivity/vulnerability:
rip Unauthorized access to any data node of these subtrees can adversely affect the routing subsystem of both the local device and the network.
This may lead to network malfunctions, delivery of packets to inappropriate destinations, and other problems.
Some of the readable data nodes in this YANG module may be considered sensitive or vulnerable in some network environments.
It is thus important to control
read access (e.g., via get, get config, or notification) to these data nodes.
These are the subtrees and data nodes and their sensitivity/vulnerability:
rip Unauthorized access to any data node of these subtrees can disclose the operational state information of RIP on this device.
Some of the RPC operations in this YANG module may be considered sensitive or vulnerable in some network environments.
It is thus important to control access to these operations.
These are the operations and their sensitivity/vulnerability:
Unauthorized access to the RPC above can adversely affect the routing subsystem of both the local device and the network.
This may lead to network malfunctions, delivery of packets to inappropriate destinations, and other problems.
Appendix A.  Data Tree Example
This section contains an example of an instance data tree in the JSON encoding [RFC7951], containing both configuration and state data.
