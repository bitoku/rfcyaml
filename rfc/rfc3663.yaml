- title: __initial_text__
  contents:
  - "                       Domain Administrative Data\n            in Lightweight\
    \ Directory Access Protocol (LDAP)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   Domain registration data has typically been exposed to the general\n\
    \   public via Nicname/Whois for administrative purposes.  This document\n   describes\
    \ the Referral Lightweight Directory Access Protocol (LDAP)\n   Service, an experimental\
    \ service using LDAP and well-known LDAP types\n   to make domain administrative\
    \ data available.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n       1.1.  Historical Directory Services for Domain Registration\n\
    \             Data . . . . . . . . . . . . . . . . . . . . . . . . . .  3\n  \
    \     1.2.  Motivations. . . . . . . . . . . . . . . . . . . . . . .  3\n    \
    \   1.3.  Abbreviations Used . . . . . . . . . . . . . . . . . . .  4\n   2. \
    \ Service Description. . . . . . . . . . . . . . . . . . . . . .  4\n   3.  Registry\
    \ LDAP Service. . . . . . . . . . . . . . . . . . . . .  6\n       3.1.  TLD DIT.\
    \ . . . . . . . . . . . . . . . . . . . . . . . .  6\n             3.1.1.  DIT\
    \ Structure. . . . . . . . . . . . . . . . . .  6\n             3.1.2.  Allowed\
    \ Searches . . . . . . . . . . . . . . . .  7\n             3.1.3.  Access Control\
    \ . . . . . . . . . . . . . . . . .  7\n       3.2.  Name Server DIT. . . . .\
    \ . . . . . . . . . . . . . . . .  8\n             3.2.1.  DIT Structure. . .\
    \ . . . . . . . . . . . . . . .  8\n             3.2.2.  Allowed Searches . .\
    \ . . . . . . . . . . . . . .  8\n       3.3.  Registrar Referral DIT . . . .\
    \ . . . . . . . . . . . . .  9\n             3.3.1.  DIT Structure. . . . . .\
    \ . . . . . . . . . . . .  9\n   4.  Registrar LDAP Service . . . . . . . . .\
    \ . . . . . . . . . . . 10\n       4.1.  TLD DIT. . . . . . . . . . . . . . .\
    \ . . . . . . . . . . 10\n             4.1.1.  DIT Structure. . . . . . . . .\
    \ . . . . . . . . . 10\n             4.1.2.  Allowed Searches . . . . . . . .\
    \ . . . . . . . . 11\n             4.1.3.  Access Control . . . . . . . . . .\
    \ . . . . . . . 11\n       4.2.  Name Server and Contact DIT. . . . . . . . .\
    \ . . . . . . 12\n             4.2.1.  DIT Structure. . . . . . . . . . . . .\
    \ . . . . . 12\n             4.2.2.  Allowed Searches . . . . . . . . . . . .\
    \ . . . . 13\n   5.  Clients. . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . 13\n   6.  Lessons Learned. . . . . . . . . . . . . . . . . . . . . .\
    \ . . 14\n       6.1.  Intra-Server Referrals . . . . . . . . . . . . . . . .\
    \ . 14\n       6.2.  Inter-Server Referrals . . . . . . . . . . . . . . . . .\
    \ 15\n       6.3.  Common DIT . . . . . . . . . . . . . . . . . . . . . . . 15\n\
    \       6.4.  Universal Client . . . . . . . . . . . . . . . . . . . . 16\n  \
    \     6.5.  Targeting Searches by Tier . . . . . . . . . . . . . . . 16\n    \
    \   6.6.  Data Mining. . . . . . . . . . . . . . . . . . . . . . . 16\n   7. \
    \ IANA Considerations. . . . . . . . . . . . . . . . . . . . . . 16\n   8.  Internationalization\
    \ Considerations. . . . . . . . . . . . . . 16\n   9.  Security Considerations.\
    \ . . . . . . . . . . . . . . . . . . . 17\n   10. Intellectual Property Statement.\
    \ . . . . . . . . . . . . . . . 17\n   11. Normative References . . . . . . .\
    \ . . . . . . . . . . . . . . 18\n   Appendix A.  Other Work. . . . . . . . .\
    \ . . . . . . . . . . . . . 19\n   Appendix B.  Acknowledgments . . . . . . .\
    \ . . . . . . . . . . . . 19\n   Author's Address . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . 20\n   Full Copyright Statement . . . . . . . . . . .\
    \ . . . . . . . . . . 21\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes the Referral Lightweight Directory\
    \ Access\n   Protocol (LDAP) Service, an experimental project launched by\n  \
    \ VeriSign, Inc., to explore the use of LDAP and LDAP-related\n   technologies\
    \ for use as a directory service of administrative domain\n   registration information.\n"
- title: 1.1.  Historical Directory Services for Domain Registration Data
  contents:
  - "1.1.  Historical Directory Services for Domain Registration Data\n   The original\
    \ National Science Foundation contract for the InterNIC\n   called for the creation\
    \ of an X.500 directory service for the\n   administrative needs of the domain\
    \ registration data and information.\n   Due to problems with implementations\
    \ of X.500 server software, a\n   server based on the Nicname/Whois [1] protocol\
    \ was temporarily\n   erected.\n   In 1994, the Rwhois [3] protocol was introduced\
    \ to enhance the\n   Nicname/Whois protocol.  This directory service never gained\
    \ wide\n   acceptance for use with domain data.\n   Presently, ICANN requires\
    \ the operation of Nicname/Whois servers by\n   registries and registrars of generic\
    \ Top-Level Domains (TLD's).\n"
- title: 1.2.  Motivations
  contents:
  - "1.2.  Motivations\n   With the recent split in functional responsibilities between\n\
    \   registries and registrars, the constant misuse and data-mining of\n   domain\
    \ registration data, and the difficulties with machine-\n   readability of Nicname/Whois\
    \ output, the creation of the Referral\n   LDAP Service had the following motivations:\n\
    \   o  Use a mechanism native to the directory protocol to refer clients\n   \
    \   from inquiries about specific domains made at a registry to the\n      appropriate\
    \ domain within the appropriate directory service at a\n      registrar.\n   o\
    \  Limit access to domain data based on authentication of the client.\n   o  Provide\
    \ structured queries and well-known and structured results.\n   o  Use a directory\
    \ service technology already in general use.\n   Given these general criteria,\
    \ LDAP [5] was selected as the protocol\n   for this directory service.  The decision\
    \ was also made to restrict\n   the use of LDAP to features most readily available\
    \ in common\n   implementations.  Therefore, a goal was set to not define any\
    \ new\n   object classes, syntaxes, or matching rules.\n   The experiment was\
    \ successful in exploring how LDAP might be used in\n   this context and demonstrating\
    \ the level of customization required\n   for an operational service.  Conclusions\
    \ and observations about this\n   experiment are outlined in Section 6.\n"
- title: 1.3.  Abbreviations Used
  contents:
  - "1.3.  Abbreviations Used\n   The following abbreviations are used to describe\
    \ the nature of this\n   experiment:\n      TLD: Top-Level Domain.  Refers to\
    \ the domain names just beneath\n      the root in the Domain Name System.  This\
    \ experiment used the\n      TLD's .com, .net, .org, and .edu.\n      SLD: Second-Level\
    \ Domain.  Refers to the domain names just beneath\n      a TLD in the Domain\
    \ Name System.  An example of such a domain name\n      would be \"example.com\"\
    .\n      DIT: Directory Information Tree.  One of many hierarchies of data\n \
    \     entries in an LDAP server.\n      DN: Distinguished Name.  The unique name\
    \ of an entry in a DIT.\n      cn: common name.  See RFC 2256 [7].\n      dc:\
    \ domain component.  See RFC 2247 [4].\n      uid: user id.  See RFC 2798 [9].\n"
- title: 2.  Service Description
  contents:
  - "2.  Service Description\n   The service is composed of three distinct server\
    \ types: a registry\n   LDAP server, registrar LDAP servers, and registrant LDAP\
    \ servers.\n   The registry LDAP server contains three Directory Information Trees\n\
    \   (DIT's).\n   o  The Top-Level Domain DIT's follow the DNS hierarchy for domains\n\
    \      (e.g., dc=foo,dc=com).\n   o  The name server DIT allows a view of the\
    \ name servers, many of\n      which serve multiple domains.\n   o  The registrar-referral\
    \ DIT provides referrals from the registry\n      into the respective TLD DIT\
    \ of the registrars (on a TLD basis).\n   The registrar LDAP server contains two\
    \ types of DIT's.\n   o  The TLD DIT follows the DNS hierarchy for domains (e.g.,\n\
    \      dc=foo,dc=com) and parallels the TLD DIT of the registry.\n   o  The name\
    \ server and contact DIT allow a view of the name servers\n      and contacts,\
    \ many of which are associated and serve multiple\n      domains.\n   There is\
    \ no specification on the DIT or schema for the registrant\n   LDAP server.  Referrals\
    \ from the registrar server to the registrant\n   server are provided solely for\
    \ the purpose of allowing the registrant\n   direct control over extra administrative\
    \ information as it relates to\n   a particular domain.\n   Access control for\
    \ this service is merely a demonstration of using a\n   Distinguished Name (DN)\
    \ and password.  Should registries and\n   registrars uniformly adopt LDAP as\
    \ a means to disseminate domain\n   registration data, standardization of these\
    \ DN's would need to be\n   undertaken based on each type of user base.\n"
- title: 3.  Registry LDAP Service
  contents:
  - '3.  Registry LDAP Service

    '
- title: 3.1.  TLD DIT
  contents:
  - '3.1.  TLD DIT

    '
- title: 3.1.1.  DIT Structure
  contents:
  - "3.1.1.  DIT Structure\n   The registry TLD DIT has the following structural hierarchy:\n\
    \                          TLD (e.g., dc=net)\n                              \
    \    |\n                                  |\n               -------------------------------------\n\
    \               |                                   |\n      SLD (e.g., dc=foo,dc=net)\
    \           SLD (e.g., dc=bar,dc=net)\n               |                      \
    \             |\n       ---------------------            ---------------------\n\
    \       |           |       |            |           |       |\n   name server\
    \     |       |        name server     |       |\n   (e.g.,          |       |\
    \        (e.g.,          |       |\n   cn=nameserver1, |       |        cn=nameserver1,\
    \ |       |\n   dc=foo,dc=net ) |       |        dc=bar,dc=net ) |       |\n \
    \                  |       |                        |       |\n          name\
    \ server      |               name server      |\n          (e.g.,           |\
    \               (e.g.,           |\n          cn=nameserver2,  |             \
    \  cn=nameserver2,  |\n          dc=foo,dc=net )  |               dc=bar,dc=net\
    \ )  |\n                           |                                |\n      \
    \          registrar referral               registrar referral\n             \
    \   (e.g.,                           (e.g.,\n                cn=registrar,   \
    \                 cn=registrar,\n                dc=foo,dc=net )             \
    \     dc=bar,dc=net )\n                    Figure 1: Registry DIT Overview\n \
    \  The root of a TLD DIT is an entry of objectclass domain as specified\n   by\
    \ RFC 2247 [4] and represents a top-level domain.\n   The second tier of the DIT\
    \ represents second-level domains.  Each of\n   these entries is of objectclass\
    \ domain as specified by RFC 2247 [4].\n   The description attribute on these\
    \ entries often contains descriptive\n   text giving the name of the registrar\
    \ through which these domains\n   have been registered.\n   The third tier contains\
    \ entries specific to each second-level domain.\n   Name server entries are of\
    \ objectclass ipHost as specified by RFC\n   2307 [8].  The distinguished names\
    \ of these name server entries are\n   algorithmically calculated, where the first\
    \ component is the word\n   \"nameserver\" concatenated with an index number of\
    \ the name server\n   entry and the remaining components are the appropriate domain\
    \ names.\n   There is no specification relating the value of the name server entry\n\
    \   to the index it may be assigned other than it is unique and\n   consistent\
    \ with respect to the client session.  This tier also\n   contains the referral\
    \ from the registry to the registrar.  This\n   referral is a direct referral\
    \ to the entry in the appropriate\n   registrar LDAP server corresponding to the\
    \ domain name that the\n   referral falls beneath in this DIT.\n"
- title: 3.1.2.  Allowed Searches
  contents:
  - "3.1.2.  Allowed Searches\n   Because of the vast number of entries contained\
    \ within this DIT, only\n   certain types of searches are allowed.  Allowing any\
    \ search\n   expressible via LDAP would lead to expensive searches that would\
    \ be\n   far too costly for a publicly available service.  The searches\n   allowed\
    \ are as follows:\n   o  One-level scoped searches based at the root of the DIT.\
    \  Substring\n      matching is allowed on dc attributes, but the substring must\
    \ be at\n      least be 3 characters in length.\n   o  Base search based at the\
    \ root of the DIT.\n   o  Base, one-level, and sub-tree searches based at any\
    \ second level\n      domain name (the second tier) and below.\n"
- title: 3.1.3.  Access Control
  contents:
  - "3.1.3.  Access Control\n   The registry TLD DIT only has one access control type.\
    \  When a client\n   binds with a DN of \"cn=trademark\" and password of \"attorney\"\
    , the\n   second-level domain entries also take on an objectclass of\n   extensibleObject\
    \ with the added attributes of \"createddate\" and\n   \"registrationexpirationdate\"\
    , which are of type Generalized Time, as\n   specified by RFC 2252 [6].\n"
- title: 3.2.  Name Server DIT
  contents:
  - '3.2.  Name Server DIT

    '
- title: 3.2.1.  DIT Structure
  contents:
  - "3.2.1.  DIT Structure\n   The registry name server DIT has the following structural\
    \ hierarchy:\n                         (o=nsiregistry.com)\n                 \
    \                 |\n                                  |\n               -------------------------------------\n\
    \               |                  |                |\n           name server\
    \        name server      name server\n         (cn=ns1.foo.net)   (cn=ns.bar.com)\
    \  (cn=named.acme.org)\n                    Figure 2: Registry DIT Overview\n\
    \   The root of a name server DIT is an entry of objectclass organization\n  \
    \ as specified by RFC 1617 [2].  It has no significance other than to\n   serve\
    \ as the root of the DIT.\n   The second tier of this DIT represents name servers.\
    \  Each of these\n   entries is of objectclass ipHost, as specified by RFC 2307\
    \ [8].\n"
- title: 3.2.2.  Allowed Searches
  contents:
  - "3.2.2.  Allowed Searches\n   Because of the vast number of entries contained\
    \ within this DIT, only\n   certain types of searches are allowed.  Allowing any\
    \ search\n   expressible via LDAP would lead to searches far too costly for a\n\
    \   publicly available service.  The searches allowed are as follows:\n   o  One-level\
    \ and sub-tree scoped searches based at the root of the\n      DIT if a filter\
    \ on the cn attribute is provided.\n   o  Base search based at the root of the\
    \ DIT.\n   o  Base, one-level, and sub-tree searches based at any name server\n\
    \      entry.\n"
- title: 3.3.  Registrar Referral DIT
  contents:
  - '3.3.  Registrar Referral DIT

    '
- title: 3.3.1.  DIT Structure
  contents:
  - "3.3.1.  DIT Structure\n   The registry registrar-referral DIT has the following\
    \ structural\n   hierarchy:\n                        (o=tlds)\n              \
    \             |\n                           |\n            -------------------------------\n\
    \            |         |         |         |\n           tld       tld       tld\
    \       tld\n         (dc=net)  (dc=com)  (dc=org)  (dc=edu)\n            |  \
    \       |         |         |\n            :         :         |         :\n \
    \           :         :         |         :\n                                |\n\
    \                   ---------------------------\n                   |        \
    \    |            |\n               referral to  referral to  referral to\n  \
    \             registrar 1  registrar 2  registrar n\n               dc=org DIT\
    \   dc=org DIT   dc=org DIT\n                Figure 3: Registry Referral DIT Overview\n\
    \   The root of the registrar referral DIT is an entry of objectclass\n   organization,\
    \ as specified by RFC 1617 [2].  It has no significance\n   other than to serve\
    \ as the root of this DIT.\n   The second tier of this DIT represents top-level\
    \ domains.  Each of\n   these entries is of objectclass domain, as specified by\
    \ RFC 2247 [4].\n   Underneath each TLD entry, the third tier contains referrals\
    \ to the\n   appropriate TLD DIT of each registrar.\n"
- title: 4.  Registrar LDAP Service
  contents:
  - '4.  Registrar LDAP Service

    '
- title: 4.1.  TLD DIT
  contents:
  - '4.1.  TLD DIT

    '
- title: 4.1.1.  DIT Structure
  contents:
  - "4.1.1.  DIT Structure\n   The registrar TLD DIT, which is similar to the registry\
    \ TLD DIT, has\n   the following structural hierarchy:\n                     \
    \     TLD (e.g., dc=net)\n                                  |\n              \
    \                    |\n               ------------------------------------------------\n\
    \               |                                          |   |\n      SLD (e.g.,\
    \ dc=foo,dc=net)                           :   :\n               |           \
    \                               :   :\n       ---------------------------------------------\n\
    \       |                        |                  |\n       |              \
    \          |                  |\n   name server            contact           \
    \  referral to\n   (e.g., cn=nameserver1, (e.g., cn=contact1, registrant\n   dc=foo,dc=net\
    \       )  dc=foo,dc=net    )\n       |\n       |\n   name server contact\n  \
    \ (e.g., cn=contact,\n   cn=nameserver1,\n   dc=foo,dc=net     )\n           \
    \         Figure 4: Registrar DIT Overview\n   The root of a TLD DIT is an entry\
    \ of objectclass domain, as specified\n   by RFC 2247 [4] and represents a top-level\
    \ domain.\n   The second tier of the DIT represents second-level domains.  Each\
    \ of\n   these entries is of objectclass domain, as specified by RFC 2247 [4].\n\
    \   The third tier contains entries specific to each second-level domain.\n  \
    \ The entries at this level are as follows:\n   o  Name server entries are of\
    \ objectclass ipHost, as specified by RFC\n      2307 [8].  The distinguished\
    \ names of these name server entries\n      are algorithmically calculated where\
    \ the first component is the\n      word \"nameserver\" concatenated with an index\
    \ number of the name\n      server entry and the remaining components are the\
    \ appropriate\n      domain names.  There is no specification relating the value\
    \ of the\n      name server entry to the index it may be assigned other than it\
    \ is\n      unique and consistent with respect to the client session.\n   o  Contact\
    \ entries are of objectclass inetOrgPerson, as specified by\n      RFC 2798 [9].\
    \  The distinguished names of these contact entries\n      are algorithmically\
    \ calculated, where the first component is the\n      word \"contact\" concatenated\
    \ with an index number of the contact\n      and the remaining components are\
    \ the appropriate domain names.\n      There is no specification relating the\
    \ value of the contact entry\n      to the index it may be assigned other than\
    \ it is unique and\n      consistent with respect to the client session.  The\
    \ description\n      attribute of the entry contains the role for which a contact\
    \ is\n      related to a domain.  These roles are identified as \"Admin\n    \
    \  Contact\", \"Technical Contact\", and \"Billing Contact\", and may\n      appear\
    \ in any order.\n   o  Finally, this third tier contains the referral from the\
    \ registrar\n      to the registrant.\n   The fourth tier only contains name server\
    \ contact entries.  These\n   entries are of objectclass inetOrgPerson, as specified\
    \ by RFC 2798\n   [9].\n"
- title: 4.1.2.  Allowed Searches
  contents:
  - "4.1.2.  Allowed Searches\n   Because of the vast number of entries contained\
    \ within this DIT, only\n   certain types of searches are allowed.  Allowing any\
    \ search\n   expressible via LDAP would lead to searches far too costly for a\n\
    \   publicly available service.  The searches allowed are as follows:\n   o  One-level\
    \ scoped searches based at the root of the DIT.  Substring\n      matching is\
    \ allowed on dc and o attributes, but the substring must\n      be at least 3\
    \ characters in length.\n   o  Base search based at the root of the DIT.\n   o\
    \  Base, one-level, and sub-tree searches based at any second level\n      domain\
    \ name (the second tier) and below.\n"
- title: 4.1.3.  Access Control
  contents:
  - "4.1.3.  Access Control\n   The registrar TLD DIT has two access control types.\
    \  When binding\n   anonymously, a client only sees dc, o, and c attributes of\
    \ the\n   second-level domain entries.  When a client binds with a DN of\n   \"\
    cn=trademark\" and password of \"attorney\", all of the other\n   attributes normally\
    \ available on entries of objectclass domain are\n   visible if they have values.\
    \  In addition, if a client binds with the\n   DN of a contact and password of\
    \ \"password\", all attributes for\n   second-level domain entries for which the\
    \ bind DN has a relation are\n   visible.\n"
- title: 4.2.  Name Server and Contact DIT
  contents:
  - '4.2.  Name Server and Contact DIT

    '
- title: 4.2.1.  DIT Structure
  contents:
  - "4.2.1.  DIT Structure\n   The registrar name server and contact DIT has the following\n\
    \   structural hierarchy:\n                             (o=nsi.com)\n        \
    \                          |\n                                  |\n          \
    \     --------------------------------------\n               |               \
    \                     |\n            Contacts                           Name Servers\n\
    \          (ou=contacts)                     (ou=name servers)\n             \
    \  |                                    |\n        -----------------         \
    \       ------------------------\n        |             | |                | \
    \                   | |\n     Contact          : :            Name Server    \
    \          : :\n   (uid=handle)       : :            (cn=handle)             \
    \ : :\n                                         |\n                          \
    \           Name Server\n                                       Contact\n    \
    \                                 (cn=contact1)\n                    Figure 5:\
    \ Registrar DIT Overview\n   The first tier of the name server and contact DIT\
    \ is an entry of\n   objectclass organization, as specified by RFC 1617 [2].\n\
    \   The second tier of the DIT contains two entries, each of which is of\n   objectclass\
    \ organizationalUnit, as specified by RFC 2256 [7].  One\n   entry represents\
    \ the part of the DIT containing contacts and the\n   other entry represents the\
    \ part of the DIT containing name servers.\n   Entries underneath the contacts\
    \ organizationalUnit entry are of\n   objectclass inetOrgPerson and represent\
    \ contacts registered with the\n   registrar.  Their RDN is composed of the uid\
    \ attribute.  The uid\n   attribute's value is a unique identifier or handle that\
    \ is registrar\n   assigned.\n   Entries underneath the name server organizationalUnit\
    \ entry are of\n   objectclass ipHost and represent name servers registered with\
    \ the\n   registrar.  Their RDN is composed of the cn attribute.  The cn\n   attribute's\
    \ value is a unique identifier or handle that is registrar\n   assigned.  Each\
    \ name server entry may optionally have children\n   entries of objectclass inetOrgPerson.\
    \  These entries represent the\n   contacts of the name server they fall beneath.\n"
- title: 4.2.2.  Allowed Searches
  contents:
  - "4.2.2.  Allowed Searches\n   Because of the vast number of entries contained\
    \ within this DIT, only\n   certain types of searches are allowed.  Allowing any\
    \ search\n   expressible via LDAP would lead to searches far too costly for a\n\
    \   publicly available service.  The searches allowed are as follows:\n   o  One-level\
    \ and base searches at the root of the DIT.\n   o  Sub-tree searches at the root\
    \ of the DIT using cn and uid\n      attributes as a filter.\n   o  Base searches\
    \ at either entry of the second tier.\n   o  One-level and sub-tree searches at\
    \ either entry of the second\n      tier, using cn or uid attributes as a filter.\n\
    \   o  Base, one-level, and sub-tree searches based at any contact or\n      name\
    \ server entry and below.\n"
- title: 5.  Clients
  contents:
  - "5.  Clients\n   Early scoping and analysis of this project were based on the\
    \ use of\n   output from command line clients, specifically the \"ldapsearch\"\
    \n   command present with many implementations of LDAP servers.  Our\n   survey\
    \ of this tool, available from many vendors, showed that\n   referral chasing\
    \ was difficult to control or predict, and the\n   behavior between these implementations\
    \ with respect to referral\n   chasing was inconsistent.\n   Based on the limited\
    \ nature of the expressive capabilities present\n   with just command line tools,\
    \ searches involving nested queries or\n   advanced referral chasing were deemed\
    \ the domain of clients making\n   direct use of LDAP client libraries.  Three\
    \ of these types of clients\n   were produced: a web-based client, a cross-platform\
    \ C-based client,\n   and a Java client.  No significant deficiencies or problems\
    \ were\n   found with the LDAP client libraries in the construction of these\n\
    \   clients, and the level of control provided by their programming\n   interfaces\
    \ was adequate to create the necessary searches.  Instead,\n   most of the problems\
    \ encountered with these clients were based on\n   usability concerns.\n   It\
    \ was found that the web-based client caused a great amount of\n   confusion for\
    \ users not familiar with LDAP or Nicname/Whois with\n   respect to the underlying\
    \ technology and the network model.  Thus,\n   many users believed the web-based\
    \ client to be the only interface to\n   the data and were unaware or confused\
    \ by the intermediate LDAP\n   protocol.  In addition, it was difficult to express\
    \ to users the\n   registry-registrar-registrant service model in adequate terms\
    \ from\n   search results where the results could be rendered properly among the\n\
    \   various common web browsers.\n   Both the C and Java based clients were built\
    \ to be both graphical and\n   cross-platform (in the case of the C-based client,\
    \ the Linux and\n   Windows platforms were chosen as targets).  The LDAP client\
    \ libraries\n   chosen for both clients proved to be quite capable and offered\
    \ the\n   necessary levels of control for conducting nested queries and\n   advanced\
    \ referral chasing.  Expectations at the outset for\n   construction of both clients,\
    \ based on past experience, were that the\n   C-based client would not only perform\
    \ better than the Java client but\n   also have a better appearance.  In reality,\
    \ these assumptions were\n   incorrect as there was no perceivable difference\
    \ in performance and\n   the look of the Java client was often considered to be\
    \ far superior\n   to its counter-part.  In addition, the Java client required\
    \ much less\n   time to create.  Both clients are available under the terms of\
    \ an\n   open source license.  Though it is impossible to have accurate\n   measurements\
    \ of their popularity, through monitoring and feedback it\n   was perceived that\
    \ the web-based client had far greater use.\n"
- title: 6.  Lessons Learned
  contents:
  - "6.  Lessons Learned\n   Based on the experience of piloting this experimental\
    \ service,\n   feedback from users of the service, and general comments and\n\
    \   observations of current and common opinions, the following items have\n  \
    \ been noted.\n"
- title: 6.1.  Intra-Server Referrals
  contents:
  - "6.1.  Intra-Server Referrals\n   Original analysis of the data set to be used\
    \ revealed a high degree\n   of relationships between name servers, contacts,\
    \ and domains.\n   Storing the data in non-normalized form according to the DIT\
    \ outlined\n   in this document would make an original relational dataset of roughly\n\
    \   20 million objects explode to over 115 million objects.\n   To combat this\
    \ problem, the first pass at defining the DIT's made\n   heavy use of referrals\
    \ between the TLD DIT's and the name server and\n   contact DIT's.  The use of\
    \ the 'alias' objectclass was considered but\n   ruled out in hopes of using referrals\
    \ for load balancing across\n   servers (i.e., placing each TLD DIT on a separate\
    \ server, and\n   separate servers for the name server and contact DIT's).  However,\n\
    \   initial testing with the 'ldapsearch' command found inconsistencies\n   with\
    \ the interpretation of the referrals and how they were managed.\n   Not only\
    \ were the results inconsistent between implementations, but\n   many of these\
    \ clients would easily get caught in referral loops.\n   The final solution to\
    \ the problem was to create a customized back-end\n   data store containing the\
    \ data in a normalized form.  This gave the\n   client the appearance of having\
    \ a non-normalized data set which\n   required no intra-server referrals.  Aliases\
    \ may have been a better\n   solution, however our interpretation of their output\
    \ with\n   implementations of the 'ldapsearch' tool was not satisfactory.  It\n\
    \   was also later learned that some LDAP server implementations place\n   certain\
    \ restrictions on aliases that would have conflicted with our\n   overall DIT\
    \ structure.  In the end, it was felt that a customized\n   back-end would be\
    \ required by any server with a large data-set, but\n   smaller data-sets for\
    \ less populated domains could easily use off-\n   the-shelf implementations.\n"
- title: 6.2.  Inter-Server Referrals
  contents:
  - "6.2.  Inter-Server Referrals\n   The modeling of the overall service to provide\
    \ the split in\n   operational responsibility between registry and registrar required\n\
    \   the use of referrals (i.e., the two servers would not be operated by\n   the\
    \ same organization, therefore would most likely not co-exist on\n   the same\
    \ physical machine or network).  The chief problem with LDAP\n   referrals returned\
    \ for this purpose grew out of the need to limit\n   data returned to the client\
    \ and the priority given to referrals.  It\n   was quite easy to cause a sub-tree\
    \ query at certain levels, for\n   instance a TLD level, to return nothing but\
    \ referrals.  This was true\n   because referrals would be returned out of the\
    \ scope of the supplied\n   search filter and therefore would fill the result\
    \ set to its limit,\n   normally set to 50 entries.\n   In certain use cases,\
    \ a result set with nothing but referrals was\n   desired (e.g., o=tlds).  However,\
    \ even in these cases it was possible\n   for some referrals to not be returned\
    \ due to the size limit.  In this\n   case, it was felt that a result set of 50\
    \ referrals, the default for\n   the size limit in most cases, was too large for\
    \ any practical use by\n   a client and was a failing of query distribution in\
    \ general rather\n   than a limitation of LDAP.\n"
- title: 6.3.  Common DIT
  contents:
  - "6.3.  Common DIT\n   Because of the nature of software development, the graphical\
    \ and web\n   clients were developed after the development of the server software.\n\
    \   The 'ldapsearch' client was used for testing and development during\n   server\
    \ software creation.  It was not until the creation of more\n   advanced clients\
    \ that it was discovered that the design decision of\n   uniform DIT naming should\
    \ have been made.  Technically, this would\n   have allowed for slightly better\
    \ software modularization and re-use.\n   In addition, the use of a company name\
    \ in the DIT structure did not\n   allow the easy integration of another domain\
    \ registry, as in the\n   registry-registrar model.  Not only would clients have\
    \ to be\n   reconfigured for each new registry operator, but this would most\n\
    \   likely have social implications as well.\n"
- title: 6.4.  Universal Client
  contents:
  - "6.4.  Universal Client\n   The construction of the clients revealed yet another\
    \ misconception.\n   Though this project used a generic directory service technology,\
    \ the\n   clients required a high-degree of algorithmic knowledge about the DIT\n\
    \   structure and schemas being used.  The graphical clients could not be\n  \
    \ used against an LDAP service with another DIT or schema.  Therefore,\n   a generic\
    \ or universal client, one that could be used for all LDAP\n   applications, would\
    \ either not be able to make full use of the data\n   provided by the service\
    \ or would be far too complex for operation by\n   the average user.\n"
- title: 6.5.  Targeting Searches by Tier
  contents:
  - "6.5.  Targeting Searches by Tier\n   The network model for this service was divided\
    \ into three tiers:\n   registry, registrar, and registrant.  Despite this, all\
    \ searches\n   needed to start at the registry level causing overhead for searches\n\
    \   that could be targeted at a select tier.  This service did not\n   implement\
    \ a solution to this problem, such as using SRV and/or NAPTR\n   records in DNS\
    \ to allow a client to find a responsible LDAP server.\n"
- title: 6.6.  Data Mining
  contents:
  - "6.6.  Data Mining\n   Section 3.1.2 and Section 4.1.2 describe the searches allowed\
    \ by this\n   service.  However, the most common question asked by users of the\n\
    \   service revolved around getting around these restrictions.  Because\n   browsing\
    \ at the TLD level was not permitted, many users asked about\n   the feasibility\
    \ of using recursive dictionary queries to circumvent\n   the search restrictions.\n\
    \   It should be noted that many operators of Nicname/Whois server\n   consider\
    \ this practice to be data mining and often refer to it\n   specifically as a\
    \ dictionary attack.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   There are no applicable IANA considerations presented\
    \ in this\n   document.\n"
- title: 8.  Internationalization Considerations
  contents:
  - "8.  Internationalization Considerations\n   The domain administrative data in\
    \ this service did not cover\n   Internationalized Domain Names (IDN's).\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   This experiment did not endeavor to use security\
    \ mechanisms beyond\n   those readily available in LDAP [5].  Section 3.1.3 and\
    \ Section 4.1.3\n   describe the various access controls used within the scope\
    \ of the\n   defined security mechanisms.   While these mechanisms were adequate\n\
    \   for this experimental deployment, they would not be adequate for a\n   production\
    \ environment, and they should not be taken as a model for\n   those contemplating\
    \ deployment on the Internet.\n"
- title: 10.  Intellectual Property Statement
  contents:
  - "10.  Intellectual Property Statement\n   The IETF takes no position regarding\
    \ the validity or scope of any\n   intellectual property or other rights that\
    \ might be claimed to\n   pertain to the implementation or use of the technology\
    \ described in\n   this document or the extent to which any license under such\
    \ rights\n   might or might not be available; neither does it represent that it\n\
    \   has made any effort to identify any such rights.  Information on the\n   IETF's\
    \ procedures with respect to rights in standards-track and\n   standards-related\
    \ documentation can be found in BCP-11.  Copies of\n   claims of rights made available\
    \ for publication and any assurances of\n   licenses to be made available, or\
    \ the result of an attempt made to\n   obtain a general license or permission\
    \ for the use of such\n   proprietary rights by implementors or users of this\
    \ specification can\n   be obtained from the IETF Secretariat.\n   The IETF invites\
    \ any interested party to bring to its attention any\n   copyrights, patents or\
    \ patent applications, or other proprietary\n   rights which may cover technology\
    \ that may be required to practice\n   this standard.  Please address the information\
    \ to the IETF Executive\n   Director.\n"
- title: 11.  Normative References
  contents:
  - "11.  Normative References\n   [1]  Harrenstien, K., Stahl, M. and E. Feinler,\
    \ \"NICNAME/WHOIS\", RFC\n        954, October 1985.\n   [2]  Barker, P., Kille,\
    \ S. and T. Lenggenhager, \"Naming and\n        Structuring Guidelines for X.500\
    \ Directory Pilots\", RFC 1617,\n        May 1994.\n   [3]  Williamson, S., Kosters,\
    \ M., Blacka, D., Singh, J. and K.\n        Zeilstra, \"Referral Whois (RWhois)\
    \ Protocol V1.5\", RFC 2167,\n        June 1997.\n   [4]  Kille, S., Wahl, M.,\
    \ Grimstad, A., Huber, R. and S. Sataluri,\n        \"Using Domains in LDAP/X.500\
    \ Distinguished Names\", RFC 2247,\n        January 1998.\n   [5]  Wahl, M., Howes,\
    \ T. and S. Kille, \"Lightweight Directory Access\n        Protocol (v3)\", RFC\
    \ 2251, December 1997.\n   [6]  Wahl, M., Coulbeck, A., Howes, T. and S. Kille,\
    \ \"Lightweight\n        Directory Access Protocol (v3): Attribute Syntax Definitions\"\
    ,\n        RFC 2252, December 1997.\n   [7]  Wahl, M., \"A Summary of the X.500(96)\
    \ User Schema for use with\n        LDAPv3\", RFC 2256, December 1997.\n   [8]\
    \  Howard, L., \"An Approach for Using LDAP as a Network Information\n       \
    \ Service\", RFC 2307, March 1998.\n   [9]  Smith, M., \"Definition of the inetOrgPerson\
    \ LDAP Object Class\",\n        RFC 2798, April 2000.\n"
- title: Appendix A.  Other Work
  contents:
  - "Appendix A.  Other Work\n   In addition to the deployment of servers and development\
    \ of clients,\n   VeriSign conducted two sub-projects related to this experiment.\n\
    \   The first project was a Nicname/Whois-to-LDAP gateway.  The goal of\n   the\
    \ project was to create an LDAP server for use by registrars to\n   deploy in\
    \ front of their Nicname/Whois servers.  This gateway would\n   take LDAP requests,\
    \ translate them to Nicname/Whois requests, issue\n   the request to a specific\
    \ Nicname/Whois server deployed on port 43,\n   interpret the response, and return\
    \ LDAP result sets.  Because of the\n   unspecified nature of Nicname/Whois result\
    \ sets, the gateway was\n   programmed to specifically recognize only the output\
    \ of three\n   distinct registrars.  While this gateway proved valuable enough\
    \ to\n   allow domain lookups and limited searches, it was unable to provide\n\
    \   consistent contact lookups, nameserver lookups, or registrant\n   referrals.\
    \  This software was also made publicly available under the\n   terms of an open\
    \ source license.\n   The second project was an informal survey of registrants\
    \ with\n   deployed LDAP servers.  This was conducted by using the com, net,\n\
    \   org, and edu zone files and testing for the existence of an LDAP\n   server\
    \ on port 389 using the name of the domain, a host named \"ldap\"\n   in the domain,\
    \ and a host named \"dir\" in the domain (e.g., \"foo.com\",\n   \"ldap.foo.com\"\
    , and \"dir.foo.com\").  This survey did not attempt to\n   resolve LDAP services\
    \ using SRV records in DNS.\n   The result of this survey found that roughly 0.5%\
    \ of active domains\n   had an LDAP server.  By profiling a server's root DSA-specific\
    \ Entry\n   (DSE), the survey found that about 90% of the servers were\n   implementations\
    \ provided by vendor A, 9% of the servers were\n   implementations provided by\
    \ vendor B, and 1% of the servers were\n   implementations provided by other vendors.\
    \  Of the servers queried\n   that were determined to be implementations provided\
    \ by vendor A, it\n   appeared that about only 10% contained public data (this\
    \ also led to\n   the assumption that the other 90% were not intended to be publicly\n\
    \   queried).  Of the servers queried that were determined to be\n   implementations\
    \ provided by vendor B, it appears that nearly all\n   contained public data.\n"
- title: Appendix B.  Acknowledgments
  contents:
  - "Appendix B.  Acknowledgments\n   Significant analysis, design, and implementation\
    \ for this project\n   were conducted by Brad McMillen, David Blacka, Anna Zhang,\
    \ and\n   Michael Schiraldi.  Mark Kosters and Leslie Daigle provided guidance\n\
    \   by reviewing this project, the project's goals, and this document.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Andrew Newton\n   VeriSign, Inc.\n   21345 Ridgetop Circle\n\
    \   Sterling, VA  20166\n   USA\n   Phone: +1 703 948 3382\n   EMail: anewton@verisignlabs.com;\
    \ anewton@ecotroph.net\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2003).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assignees.\n\
    \   This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
