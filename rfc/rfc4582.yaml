- title: __initial_text__
  contents:
  - '                The Binary Floor Control Protocol (BFCP)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   Floor control is a means to manage joint or exclusive access to\n\
    \   shared resources in a (multiparty) conferencing environment.\n   Thereby,\
    \ floor control complements other functions -- such as\n   conference and media\
    \ session setup, conference policy manipulation,\n   and media control -- that\
    \ are realized by other protocols.\n   This document specifies the Binary Floor\
    \ Control Protocol (BFCP).\n   BFCP is used between floor participants and floor\
    \ control servers,\n   and between floor chairs (i.e., moderators) and floor control\n\
    \   servers.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Terminology .....................................................4\n  \
    \ 3. Scope ...........................................................5\n    \
    \  3.1. Floor Creation .............................................7\n      3.2.\
    \ Obtaining Information to Contact a Floor Control Server ....7\n      3.3. Obtaining\
    \ Floor-Resource Associations ......................7\n      3.4. Privileges of\
    \ Floor Control ................................8\n   4. Overview of Operation\
    \ ...........................................8\n      4.1. Floor Participant to\
    \ Floor Control Server Interface ........8\n      4.2. Floor Chair to Floor Control\
    \ Server Interface .............13\n   5. Packet Format ..................................................14\n\
    \      5.1. COMMON-HEADER Format ......................................15\n  \
    \    5.2. Attribute Format ..........................................16\n    \
    \       5.2.1. BENEFICIARY-ID .....................................18\n      \
    \     5.2.2. FLOOR-ID ...........................................18\n        \
    \   5.2.3. FLOOR-REQUEST-ID ...................................19\n          \
    \ 5.2.4. PRIORITY ...........................................19\n           5.2.5.\
    \ REQUEST-STATUS .....................................20\n           5.2.6. ERROR-CODE\
    \ .........................................21\n                  5.2.6.1. Error-Specific\
    \ Details for Error Code 4 ...22\n           5.2.7. ERROR-INFO .........................................22\n\
    \           5.2.8. PARTICIPANT-PROVIDED-INFO ..........................23\n  \
    \         5.2.9. STATUS-INFO ........................................24\n    \
    \       5.2.10. SUPPORTED-ATTRIBUTES ..............................24\n      \
    \     5.2.11. SUPPORTED-PRIMITIVES ..............................25\n        \
    \   5.2.12. USER-DISPLAY-NAME .................................26\n          \
    \ 5.2.13. USER-URI ..........................................26\n           5.2.14.\
    \ BENEFICIARY-INFORMATION ...........................27\n           5.2.15. FLOOR-REQUEST-INFORMATION\
    \ .........................27\n           5.2.16. REQUESTED-BY-INFORMATION ..........................28\n\
    \           5.2.17.  FLOOR-REQUEST-STATUS .............................29\n  \
    \         5.2.18.  OVERALL-REQUEST-STATUS ...........................30\n    \
    \  5.3. Message Format ............................................30\n      \
    \     5.3.1. FloorRequest .......................................31\n        \
    \   5.3.2. FloorRelease .......................................31\n          \
    \ 5.3.3. FloorRequestQuery ..................................31\n           5.3.4.\
    \ FloorRequestStatus .................................31\n           5.3.5. UserQuery\
    \ ..........................................32\n           5.3.6. UserStatus .........................................32\n\
    \           5.3.7. FloorQuery .........................................32\n  \
    \         5.3.8. FloorStatus ........................................33\n    \
    \       5.3.9. ChairAction ........................................33\n      \
    \     5.3.10. ChairActionAck ....................................33\n        \
    \   5.3.11. Hello .............................................33\n          \
    \ 5.3.12. HelloAck ..........................................34\n           5.3.13.\
    \ Error .............................................34\n   6. Transport ......................................................34\n\
    \   7. Lower-Layer Security ...........................................35\n  \
    \ 8. Protocol Transactions ..........................................35\n    \
    \  8.1. Client Behavior ...........................................36\n      8.2.\
    \ Server Behavior ...........................................36\n   9. Authentication\
    \ and Authorization ...............................36\n      9.1. TLS-Based Mutual\
    \ Authentication ...........................37\n   10. Floor Participant Operations\
    \ ..................................37\n      10.1. Requesting a Floor .......................................37\n\
    \           10.1.1. Sending a FloorRequest Message ....................38\n  \
    \         10.1.2. Receiving a Response ..............................38\n    \
    \  10.2. Cancelling a Floor Request and Releasing a Floor .........40\n      \
    \     10.2.1. Sending a FloorRelease Message ....................40\n        \
    \   10.2.2. Receiving a Response ..............................40\n   11. Chair\
    \ Operations ..............................................41\n      11.1. Sending\
    \ a ChairAction Message ............................41\n      11.2. Receiving\
    \ a Response .....................................42\n   12. General Client Operations\
    \ .....................................43\n      12.1. Requesting Information\
    \ about Floors ......................43\n           12.1.1. Sending a FloorQuery\
    \ Message ......................43\n           12.1.2. Receiving a Response ..............................43\n\
    \      12.2. Requesting Information about Floor Requests ..............44\n  \
    \         12.2.1. Sending a FloorRequestQuery Message ...............45\n    \
    \       12.2.2. Receiving a Response ..............................45\n      12.3.\
    \ Requesting Information about a User ......................45\n           12.3.1.\
    \ Sending a UserQuery Message .......................46\n           12.3.2. Receiving\
    \ a Response ..............................46\n      12.4. Obtaining the Capabilities\
    \ of a Floor Control Server .....46\n           12.4.1. Sending a Hello Message\
    \ ...........................47\n           12.4.2. Receiving Responses ...............................47\n\
    \   13. Floor Control Server Operations ...............................47\n  \
    \    13.1. Reception of a FloorRequest Message ......................48\n    \
    \       13.1.1. Generating the First FloorRequestStatus Message ...48\n      \
    \     13.1.2. Generation of Subsequent\n                   FloorRequestStatus\
    \ Messages .......................50\n      13.2. Reception of a FloorRequestQuery\
    \ Message .................51\n      13.3. Reception of a UserQuery Message .........................52\n\
    \      13.4. Reception of a FloorRelease Message ......................53\n  \
    \    13.5. Reception of a FloorQuery Message ........................54\n    \
    \       13.5.1. Generation of the First FloorStatus Message .......55\n      \
    \     13.5.2. Generation of Subsequent FloorStatus Messages .....56\n      13.6.\
    \ Reception of a ChairAction Message .......................56\n      13.7. Reception\
    \ of a Hello Message .............................57\n      13.8. Error Message\
    \ Generation .................................58\n   14. Security Considerations\
    \ .......................................58\n   15. IANA Considerations ...........................................59\n\
    \      15.1. Attribute Subregistry ....................................59\n  \
    \    15.2. Primitive Subregistry ....................................60\n    \
    \  15.3. Request Status Subregistry ...............................61\n      15.4.\
    \ Error Code Subregistry ...................................62\n   16. Acknowledgements\
    \ ..............................................62\n   17. References ....................................................63\n\
    \      17.1. Normative References .....................................63\n  \
    \    17.2. Informational References .................................63\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Within a conference, some applications need to manage the\
    \ access to a\n   set of shared resources, such as the right to send media to\
    \ a\n   particular media session.  Floor control enables such applications to\n\
    \   provide users with coordinated (shared or exclusive) access to these\n   resources.\n\
    \   The Requirements for Floor Control Protocol [9] list a set of\n   requirements\
    \ that need to be met by floor control protocols.  The\n   Binary Floor Control\
    \ Protocol (BFCP), which is specified in this\n   document, meets these requirements.\n\
    \   In addition, BFCP has been designed so that it can be used in\n   low-bandwidth\
    \ environments.  The binary encoding used by BFCP\n   achieves a small message\
    \ size (when message signatures are not used)\n   that keeps the time it takes\
    \ to transmit delay-sensitive BFCP\n   messages to a minimum.  Delay-sensitive\
    \ BFCP messages include\n   FloorRequest, FloorRelease, FloorRequestStatus, and\
    \ ChairAction.  It\n   is expected that future extensions to these messages will\
    \ not\n   increase the size of these messages in a significant way.\n   The remainder\
    \ of this document is organized as follows: Section 2\n   defines the terminology\
    \ used throughout this document, Section 3\n   discusses the scope of BFCP (i.e.,\
    \ which tasks fall within the scope\n   of BFCP and which ones are performed using\
    \ different mechanisms),\n   Section 4 provides a non-normative overview of BFCP\
    \ operation, and\n   subsequent sections provide the normative specification of\
    \ BFCP.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"NOT\n   RECOMMENDED\", \"MAY\", and \"OPTIONAL\" are to be interpreted as\n\
    \   described in BCP 14, RFC 2119 [1] and indicate requirement levels for\n  \
    \ compliant implementations.\n   Media Participant: An entity that has access\
    \ to the media resources\n   of a conference (e.g., it can receive a media stream).\
    \  In floor-\n   controlled conferences, a given media participant is typically\n\
    \   colocated with a floor participant, but it does not need to be.\n   Third-party\
    \ floor requests consist of having a floor participant\n   request a floor for\
    \ a media participant when they are not colocated.\n   The protocol between a\
    \ floor participant and a media participant\n   (that are not colocated) is outside\
    \ the scope of this document.\n   Client: A floor participant or a floor chair\
    \ that communicates with a\n   floor control server using BFCP.\n   Floor: A temporary\
    \ permission to access or manipulate a specific\n   shared resource or set of\
    \ resources.\n   Floor Chair: A logical entity that manages one floor (grants,\
    \ denies,\n   or revokes a floor).  An entity that assumes the logical role of\
    \ a\n   floor chair for a given transaction may assume a different role\n   (e.g.,\
    \ floor participant) for a different transaction.  The roles of\n   floor chair\
    \ and floor participant are defined on a transaction-by-\n   transaction basis.\
    \  BFCP transactions are defined in Section 8.\n   Floor Control: A mechanism\
    \ that enables applications or users to gain\n   safe and mutually exclusive or\
    \ non-exclusive input access to the\n   shared object or resource.\n   Floor Control\
    \ Server: A logical entity that maintains the state of\n   the floor(s), including\
    \ which floors exists, who the floor chairs\n   are, who holds a floor, etc. \
    \ Requests to manipulate a floor are\n   directed at the floor control server.\
    \  The floor control server of a\n   conference may perform other logical roles\
    \ (e.g., floor participant)\n   in another conference.\n   Floor Participant:\
    \ A logical entity that requests floors, and\n   possibly information about them,\
    \ from a floor control server.  An\n   entity that assumes the logical role of\
    \ a floor participant for a\n   given transaction may assume a different role\
    \ (e.g., a floor chair)\n   for a different transaction.  The roles of floor participant\
    \ and\n   floor chair are defined on a transaction-by-transaction basis.  BFCP\n\
    \   transactions are defined in Section 8.  In floor-controlled\n   conferences,\
    \ a given floor participant is typically colocated with a\n   media participant,\
    \ but it does not need to be.  Third-party floor\n   requests consist of having\
    \ a floor participant request a floor for a\n   media participant when they are\
    \ not colocated.\n   Participant: An entity that acts as a floor participant,\
    \ as a media\n   participant, or as both.\n"
- title: 3.  Scope
  contents:
  - "3.  Scope\n   As stated earlier, BFCP is a protocol to coordinate access to shared\n\
    \   resources in a conference following the requirements defined in [9].\n   Floor\
    \ control complements other functions defined in the XCON\n   conferencing framework\
    \ [10].  The floor control protocol BFCP defined\n   in this document only specifies\
    \ a means to arbitrate access to\n   floors.  The rules and constraints for floor\
    \ arbitration and the\n   results of floor assignments are outside the scope of\
    \ this document\n   and are defined by other protocols [10].\n   Figure 1 shows\
    \ the tasks that BFCP can perform.\n                              +---------+\n\
    \                              |  Floor  |\n                              |  Chair\
    \  |\n                              |         |\n                            \
    \  +---------+\n                                 ^   |\n                     \
    \            |   |\n                    Notification |   | Decision\n        \
    \                         |   |\n                                 |   |\n    \
    \                  Floor      |   v\n   +-------------+   Request  +---------+\
    \              +-------------+\n   |    Floor    |----------->|  Floor  | Notification\
    \ |    Floor    |\n   | Participant |            | Control |------------->| Participant\
    \ |\n   |             |<-----------|  Server |              |             |\n\
    \   +-------------+ Granted or +---------+              +-------------+\n    \
    \                 Denied\n                 Figure 1: Functionality provided by\
    \ BFCP\n   BFCP provides a means:\n   o  for floor participants to send floor\
    \ requests to floor control\n      servers.\n   o  for floor control servers to\
    \ grant or deny requests to access a\n      given resource from floor participants.\n\
    \   o  for floor chairs to send floor control servers decisions regarding\n  \
    \    floor requests.\n   o  for floor control servers to keep floor participants\
    \ and floor\n      chairs informed about the status of a given floor or a given\
    \ floor\n      request.\n   Even though tasks that do not belong to the previous\
    \ list are outside\n   the scope of BFCP, some of these out-of-scope tasks relate\
    \ to floor\n   control and are essential for creating floors and establishing\
    \ BFCP\n   connections between different entities.  In the following\n   subsections,\
    \ we discuss some of these tasks and mechanisms to perform\n   them.\n"
- title: 3.1.  Floor Creation
  contents:
  - "3.1.  Floor Creation\n   The association of a given floor with a resource or\
    \ a set of\n   resources (e.g., media streams) is out of the scope of BFCP as\n\
    \   described in [10].  Floor creation and termination are also outside\n   the\
    \ scope of BFCP; these aspects are handled using the conference\n   control protocol\
    \ for manipulating the conference object.\n   Consequently, the floor control\
    \ server needs to stay up to date on\n   changes to the conference object (e.g.,\
    \ when a new floor is created).\n"
- title: 3.2.  Obtaining Information to Contact a Floor Control Server
  contents:
  - "3.2.  Obtaining Information to Contact a Floor Control Server\n   A client needs\
    \ a set of data in order to establish a BFCP connection\n   to a floor control\
    \ server.  These data include the transport address\n   of the server, the conference\
    \ identifier, and a user identifier.\n   Clients can obtain this information in\
    \ different ways.  One is to use\n   an SDP offer/answer [8] exchange, which is\
    \ described in [7].  Other\n   mechanisms are described in the XCON framework\
    \ [10] (and other\n   related documents).\n"
- title: 3.3.  Obtaining Floor-Resource Associations
  contents:
  - "3.3.  Obtaining Floor-Resource Associations\n   Floors are associated with resources.\
    \  For example, a floor that\n   controls who talks at a given time has a particular\
    \ audio session as\n   its associated resource.  Associations between floors and\
    \ resources\n   are part of the conference object.\n   Floor participants and\
    \ floor chairs need to know which resources are\n   associated with which floors.\
    \  They can obtain this information by\n   using different mechanisms, such as\
    \ an SDP offer/answer [8] exchange.\n   How to use an SDP offer/answer exchange\
    \ to obtain these associations\n   is described in [7].\n      Note that floor\
    \ participants perform SDP offer/answer exchanges\n      with the conference focus\
    \ of the conference.  So, the conference\n      focus needs to obtain information\
    \ about associations between\n      floors and resources in order to be able to\
    \ provide this\n      information to a floor participant in an SDP offer/answer\n\
    \      exchange.\n   Other mechanisms for obtaining this information, including\
    \ discussion\n   of how the information is made available to a (SIP) Focus, are\n\
    \   described in the XCON framework [10] (and other related documents).\n"
- title: 3.4.  Privileges of Floor Control
  contents:
  - "3.4.  Privileges of Floor Control\n   A participant whose floor request is granted\
    \ has the right to use (in\n   a certain way) the resource or resources associated\
    \ with the floor\n   that was requested.  For example, the participant may have\
    \ the right\n   to send media over a particular audio stream.\n   Nevertheless,\
    \ holding a floor does not imply that others will not be\n   able to use its associated\
    \ resources at the same time, even if they\n   do not have the right to do so.\
    \  Determination of which media\n   participants can actually use the resources\
    \ in the conference is\n   discussed in the XCON Framework [10].\n"
- title: 4.  Overview of Operation
  contents:
  - "4.  Overview of Operation\n   This section provides a non-normative description\
    \ of BFCP operations.\n   Section 4.1 describes the interface between floor participants\
    \ and\n   floor control servers, and Section 4.2 describes the interface\n   between\
    \ floor chairs and floor control servers.\n   BFCP messages, which use a TLV (Type-Length-Value)\
    \ binary encoding,\n   consist of a common header followed by a set of attributes.\
    \  The\n   common header contains, among other information, a 32-bit conference\n\
    \   identifier.  Floor participants, media participants, and floor chairs\n  \
    \ are identified by 16-bit user identifiers.\n   BFCP supports nested attributes\
    \ (i.e., attributes that contain\n   attributes).  These are referred to as grouped\
    \ attributes.\n   There are two types of transactions in BFCP: client-initiated\n\
    \   transactions and server-initiated transactions.  Client-initiated\n   transactions\
    \ consist of a message from a client to the floor control\n   server and a response\
    \ from the floor control server to the client.\n   Both messages can be related\
    \ because they carry the same Transaction\n   ID value in their common headers.\
    \  Server-initiated transactions\n   consist of a single message, whose Transaction\
    \ ID is 0, from the\n   floor control server to a client.\n"
- title: 4.1.  Floor Participant to Floor Control Server Interface
  contents:
  - "4.1.  Floor Participant to Floor Control Server Interface\n   Floor participants\
    \ request a floor by sending a FloorRequest message\n   to the floor control server.\
    \  BFCP supports third-party floor\n   requests.  That is, the floor participant\
    \ sending the floor request\n   need not be colocated with the media participant\
    \ that will get the\n   floor once the floor request is granted.  FloorRequest\
    \ messages carry\n   the identity of the requester in the User ID field of the\
    \ common\n   header, and the identity of the beneficiary of the floor (in third-\n\
    \   party floor requests) in a BENEFICIARY-ID attribute.\n      Third-party floor\
    \ requests can be sent, for example, by floor\n      participants that have a\
    \ BFCP connection to the floor control\n      server but that are not media participants\
    \ (i.e., they do not\n      handle any media).\n   FloorRequest messages identify\
    \ the floor or floors being requested by\n   carrying their 16-bit floor identifiers\
    \ in FLOOR-ID attributes.  If a\n   FloorRequest message carries more than one\
    \ floor identifier, the\n   floor control server treats all the floor requests\
    \ as an atomic\n   package.  That is, the floor control server either grants or\
    \ denies\n   all the floors in the FloorRequest message.\n   Floor control servers\
    \ respond to FloorRequest messages with\n   FloorRequestStatus messages, which\
    \ provide information about the\n   status of the floor request.  The first FloorRequestStatus\
    \ message is\n   the response to the FloorRequest message from the client, and\n\
    \   therefore has the same Transaction ID as the FloorRequest.\n   Additionally,\
    \ the first FloorRequestStatus message carries the Floor\n   Request ID in a FLOOR-REQUEST-INFORMATION\
    \ attribute.  Subsequent\n   FloorRequestStatus messages related to the same floor\
    \ request will\n   carry the same Floor Request ID.  This way, the floor participant\
    \ can\n   associate them with the appropriate floor request.\n   Messages from\
    \ the floor participant related to a particular floor\n   request also use the\
    \ same Floor Request ID as the first\n   FloorRequestStatus Message from the floor\
    \ control server.\n   Figure 2 shows how a floor participant requests a floor,\
    \ obtains it,\n   and, at a later time, releases it.  This figure illustrates\
    \ the use,\n   among other things, of the Transaction ID and the FLOOR-REQUEST-ID\n\
    \   attribute.\n      Floor Participant                                 Floor\
    \ Control\n                                                           Server\n\
    \              |(1) FloorRequest                               |\n           \
    \   |Transaction ID: 123                            |\n              |User ID:\
    \ 234                                   |\n              |FLOOR-ID: 543      \
    \                            |\n              |---------------------------------------------->|\n\
    \              |                                               |\n           \
    \   |(2) FloorRequestStatus                         |\n              |Transaction\
    \ ID: 123                            |\n              |User ID: 234          \
    \                         |\n              |FLOOR-REQUEST-INFORMATION        \
    \              |\n              |      Floor Request ID: 789                 \
    \   |\n              |      OVERALL-REQUEST-STATUS                   |\n     \
    \         |              Request Status: Pending          |\n              | \
    \     FLOOR-REQUEST-STATUS                     |\n              |            Floor\
    \ ID: 543                      |\n              |<----------------------------------------------|\n\
    \              |                                               |\n           \
    \   |(3) FloorRequestStatus                         |\n              |Transaction\
    \ ID: 0                              |\n              |User ID: 234          \
    \                         |\n              |FLOOR-REQUEST-INFORMATION        \
    \              |\n              |      Floor Request ID: 789                 \
    \   |\n              |      OVERALL-REQUEST-STATUS                   |\n     \
    \         |              Request Status: Accepted         |\n              | \
    \             Queue Position: 1st              |\n              |      FLOOR-REQUEST-STATUS\
    \                     |\n              |            Floor ID: 543            \
    \          |\n              |<----------------------------------------------|\n\
    \              |                                               |\n           \
    \   |(4) FloorRequestStatus                         |\n              |Transaction\
    \ ID: 0                              |\n              |User ID: 234          \
    \                         |\n              |FLOOR-REQUEST-INFORMATION        \
    \              |\n              |      Floor Request ID: 789                 \
    \   |\n              |      OVERALL-REQUEST-STATUS                   |\n     \
    \         |              Request Status: Granted          |\n              | \
    \     FLOOR-REQUEST-STATUS                     |\n              |            Floor\
    \ ID: 543                      |\n              |<----------------------------------------------|\n\
    \              |                                               |\n           \
    \   |(5) FloorRelease                               |\n              |Transaction\
    \ ID: 154                            |\n              |User ID: 234          \
    \                         |\n              |FLOOR-REQUEST-ID: 789            \
    \              |\n              |---------------------------------------------->|\n\
    \              |                                               |\n           \
    \   |(6) FloorRequestStatus                         |\n              |Transaction\
    \ ID: 154                            |\n              |User ID: 234          \
    \                         |\n              |FLOOR-REQUEST-INFORMATION        \
    \              |\n              |      Floor Request ID: 789                 \
    \   |\n              |      OVERALL-REQUEST-STATUS                   |\n     \
    \         |              Request Status: Released         |\n              | \
    \     FLOOR-REQUEST-STATUS                     |\n              |            Floor\
    \ ID: 543                      |\n              |<----------------------------------------------|\n\
    \                Figure 2: Requesting and releasing a floor\n   Figure 3 shows\
    \ how a floor participant requests to be informed on the\n   status of a floor.\
    \  The first FloorStatus message from the floor\n   control server is the response\
    \ to the FloorQuery message and, as\n   such, has the same Transaction ID as the\
    \ FloorQuery message.\n   Subsequent FloorStatus messages consist of server-initiated\n\
    \   transactions, and therefore their Transaction ID is 0.  FloorStatus\n   message\
    \ (2) indicates that there are currently two floor requests for\n   the floor\
    \ whose Floor ID is 543.  FloorStatus message (3) indicates\n   that the floor\
    \ requests with Floor Request ID 764 has been granted,\n   and the floor request\
    \ with Floor Request ID 635 is the first in the\n   queue.  FloorStatus message\
    \ (4) indicates that the floor request with\n   Floor Request ID 635 has been\
    \ granted.\n      Floor Participant                                 Floor Control\n\
    \                                                           Server\n         \
    \     |(1) FloorQuery                                 |\n              |Transaction\
    \ ID: 257                            |\n              |User ID: 234          \
    \                         |\n              |FLOOR-ID: 543                    \
    \              |\n              |---------------------------------------------->|\n\
    \              |                                               |\n           \
    \   |(2) FloorStatus                                |\n              |Transaction\
    \ ID: 257                            |\n              |User ID: 234          \
    \                         |\n              |FLOOR-ID:543                     \
    \              |\n              |FLOOR-REQUEST-INFORMATION                   \
    \   |\n              |      Floor Request ID: 764                    |\n     \
    \         |      OVERALL-REQUEST-STATUS                   |\n              | \
    \             Request Status: Accepted         |\n              |            \
    \  Queue Position: 1st              |\n              |      FLOOR-REQUEST-STATUS\
    \                     |\n              |            Floor ID: 543            \
    \          |\n              |      BENEFICIARY-INFORMATION                  |\n\
    \              |                  Beneficiary ID: 124          |\n           \
    \   |FLOOR-REQUEST-INFORMATION                      |\n              |      Floor\
    \ Request ID: 635                    |\n              |      OVERALL-REQUEST-STATUS\
    \                   |\n              |              Request Status: Accepted \
    \        |\n              |              Queue Position: 2nd              |\n\
    \              |      FLOOR-REQUEST-STATUS                     |\n           \
    \   |            Floor ID: 543                      |\n              |      BENEFICIARY-INFORMATION\
    \                  |\n              |                  Beneficiary ID: 154   \
    \       |\n              |<----------------------------------------------|\n \
    \             |                                               |\n            \
    \  |(3) FloorStatus                                |\n              |Transaction\
    \ ID: 0                              |\n              |User ID: 234          \
    \                         |\n              |FLOOR-ID:543                     \
    \              |\n              |FLOOR-REQUEST-INFORMATION                   \
    \   |\n              |      Floor Request ID: 764                    |\n     \
    \         |      OVERALL-REQUEST-STATUS                   |\n              | \
    \             Request Status: Granted          |\n              |      FLOOR-REQUEST-STATUS\
    \                     |\n              |            Floor ID: 543            \
    \          |\n              |      BENEFICIARY-INFORMATION                  |\n\
    \              |                  Beneficiary ID: 124          |\n           \
    \   |FLOOR-REQUEST-INFORMATION                      |\n              |      Floor\
    \ Request ID: 635                    |\n              |      OVERALL-REQUEST-STATUS\
    \                   |\n              |              Request Status: Accepted \
    \        |\n              |              Queue Position: 1st              |\n\
    \              |      FLOOR-REQUEST-STATUS                     |\n           \
    \   |            Floor ID: 543                      |\n              |      BENEFICIARY-INFORMATION\
    \                  |\n              |                  Beneficiary ID: 154   \
    \       |\n              |<----------------------------------------------|\n \
    \             |                                               |\n            \
    \  |(4) FloorStatus                                |\n              |Transaction\
    \ ID: 0                              |\n              |User ID: 234          \
    \                         |\n              |FLOOR-ID:543                     \
    \              |\n              |FLOOR-REQUEST-INFORMATION                   \
    \   |\n              |      Floor Request ID: 635                    |\n     \
    \         |      OVERALL-REQUEST-STATUS                   |\n              | \
    \             Request Status: Granted          |\n              |      FLOOR-REQUEST-STATUS\
    \                     |\n              |            Floor ID: 543            \
    \          |\n              |      BENEFICIARY-INFORMATION                  |\n\
    \              |                  Beneficiary ID: 154          |\n           \
    \   |<----------------------------------------------|\n           Figure 3: Obtaining\
    \ status information about a floor\n   FloorStatus messages contain information\
    \ about the floor requests\n   they carry.  For example, FloorStatus message (4)\
    \ indicates that the\n   floor request with Floor Request ID 635 has as the beneficiary\
    \ (i.e.,\n   the participant that holds the floor when a particular floor request\n\
    \   is granted) the participant whose User ID is 154.  The floor request\n   applies\
    \ only to the floor whose Floor ID is 543.  That is, this is\n   not a multi-floor\
    \ floor request.\n      A multi-floor floor request applies to more than one floor\
    \ (e.g.,\n      a participant wants to be able to speak and write on the\n   \
    \   whiteboard at the same time).  The floor control server treats a\n      multi-floor\
    \ floor request as an atomic package.  That is, the\n      floor control server\
    \ either grants the request for all floors or\n      denies the request for all\
    \ floors.\n"
- title: 4.2.  Floor Chair to Floor Control Server Interface
  contents:
  - "4.2.  Floor Chair to Floor Control Server Interface\n   Figure 4 shows a floor\
    \ chair instructing a floor control server to\n   grant a floor.\n      Note,\
    \ however, that although the floor control server needs to\n      take into consideration\
    \ the instructions received in ChairAction\n      messages (e.g., granting a floor),\
    \ it does not necessarily need to\n      perform them exactly as requested by\
    \ the floor chair.  The\n      operation that the floor control server performs\
    \ depends on the\n      ChairAction message and on the internal state of the floor\
    \ control\n      server.\n   For example, a floor chair may send a ChairAction\
    \ message granting a\n   floor that was requested as part of an atomic floor request\
    \ operation\n   that involved several floors.  Even if the chair responsible for\
    \ one\n   of the floors instructs the floor control server to grant the floor,\n\
    \   the floor control server will not grant it until the chairs\n   responsible\
    \ for the other floors agree to grant them as well.  In\n   another example, a\
    \ floor chair may instruct the floor control server\n   to grant a floor to a\
    \ participant.  The floor control server needs to\n   revoke the floor from its\
    \ current holder before granting it to the\n   new participant.\n   So, the floor\
    \ control server is ultimately responsible for keeping a\n   coherent floor state\
    \ using instructions from floor chairs as input to\n   this state.\n      Floor\
    \ Chair                                    Floor Control\n                   \
    \                                     Server\n           |(1) ChairAction    \
    \                            |\n           |Transaction ID: 769              \
    \              |\n           |User ID: 357                                   |\n\
    \           |FLOOR-REQUEST-INFORMATION                      |\n           |  \
    \    Floor Request ID: 635                    |\n           |      FLOOR-REQUEST-STATUS\
    \                     |\n           |            Floor ID: 543               \
    \       |\n           |            Request Status: Granted            |\n    \
    \       |---------------------------------------------->|\n           |      \
    \                                         |\n           |(2) ChairActionAck  \
    \                           |\n           |Transaction ID: 769               \
    \             |\n           |User ID: 357                                   |\n\
    \           |<----------------------------------------------|\n           Figure\
    \ 4: Chair instructing the floor control server\n"
- title: 5.  Packet Format
  contents:
  - "5.  Packet Format\n   BFCP packets consist of a 12-octet common header followed\
    \ by\n   attributes.  All the protocol values MUST be sent in network byte\n \
    \  order.\n"
- title: 5.1.  COMMON-HEADER Format
  contents:
  - "5.1.  COMMON-HEADER Format\n   The following is the format of the common header.\n\
    \      0                   1                   2                   3\n      0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Ver |Reserved |  Primitive    |        Payload Length         |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                       Conference ID                         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |         Transaction ID        |            User ID            |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \              Figure 5: COMMON-HEADER format\n   Ver: The 3-bit version field\
    \ MUST be set to 1 to indicate this\n   version of BFCP.\n   Reserved: At this\
    \ point, the 5 bits in the reserved field SHOULD be\n   set to zero by the sender\
    \ of the message and MUST be ignored by the\n   receiver.\n   Primitive: This\
    \ 8-bit field identifies the main purpose of the\n   message.  The following primitive\
    \ values are defined:\n             +-------+--------------------+------------------+\n\
    \             | Value | Primitive          | Direction        |\n            \
    \ +-------+--------------------+------------------+\n             |   1   | FloorRequest\
    \       | P -> S           |\n             |   2   | FloorRelease       | P ->\
    \ S           |\n             |   3   | FloorRequestQuery  | P -> S ; Ch -> S\
    \ |\n             |   4   | FloorRequestStatus | P <- S ; Ch <- S |\n        \
    \     |   5   | UserQuery          | P -> S ; Ch -> S |\n             |   6  \
    \ | UserStatus         | P <- S ; Ch <- S |\n             |   7   | FloorQuery\
    \         | P -> S ; Ch -> S |\n             |   8   | FloorStatus        | P\
    \ <- S ; Ch <- S |\n             |   9   | ChairAction        | Ch -> S      \
    \    |\n             |   10  | ChairActionAck     | Ch <- S          |\n     \
    \        |   11  | Hello              | P -> S ; Ch -> S |\n             |   12\
    \  | HelloAck           | P <- S ; Ch <- S |\n             |   13  | Error   \
    \           | P <- S ; Ch <- S |\n             +-------+--------------------+------------------+\n\
    \                         S:  Floor Control Server\n                         P:\
    \  Floor Participant\n                         Ch: Floor Chair\n             \
    \            Table 1: BFCP primitives\n   Payload Length: This 16-bit field contains\
    \ the length of the message\n   in 4-octet units, excluding the common header.\n\
    \   Conference ID: This 32-bit field identifies the conference the\n   message\
    \ belongs to.\n   Transaction ID: This field contains a 16-bit value that allows\
    \ users\n   to match a given message with its response.  The value of the\n  \
    \ Transaction ID in server-initiated transactions is 0 (see Section 8).\n   User\
    \ ID: This field contains a 16-bit value that uniquely identifies\n   a participant\
    \ within a conference.\n      The identity used by a participant in BFCP, which\
    \ is carried in\n      the User ID field, is generally mapped to the identity\
    \ used by the\n      same participant in the session establishment protocol (e.g.,\
    \ in\n      SIP).  The way this mapping is performed is outside the scope of\n\
    \      this specification.\n"
- title: 5.2.  Attribute Format
  contents:
  - "5.2.  Attribute Format\n   BFCP attributes are encoded in TLV (Type-Length-Value)\
    \ format.\n   Attributes are 32-bit aligned.\n      0                   1    \
    \               2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |    Type     |M|    Length     |                               |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |\n     |  \
    \                                                             |\n     /      \
    \                 Attribute Contents                      /\n     /          \
    \                                                     /\n     |              \
    \                                                 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                        Figure 6: Attribute format\n   Type: This 7-bit field\
    \ contains the type of the attribute.  Each\n   attribute, identified by its type,\
    \ has a particular format.  The\n   attribute formats defined are:\n      Unsigned16:\
    \ The contents of the attribute consist of a 16-bit\n      unsigned integer.\n\
    \      OctetString16: The contents of the attribute consist of 16 bits of\n  \
    \    arbitrary data.\n      OctetString: The contents of the attribute consist\
    \ of arbitrary\n      data of variable length.\n      Grouped: The contents of\
    \ the attribute consist of a sequence of\n      attributes.\n      Note that extension\
    \ attributes defined in the future may define\n      new attribute formats.\n\
    \   The following attribute types are defined:\n      +------+---------------------------+---------------+\n\
    \      | Type | Attribute                 | Format        |\n      +------+---------------------------+---------------+\n\
    \      |   1  | BENEFICIARY-ID            | Unsigned16    |\n      |   2  | FLOOR-ID\
    \                  | Unsigned16    |\n      |   3  | FLOOR-REQUEST-ID        \
    \  | Unsigned16    |\n      |   4  | PRIORITY                  | OctetString16\
    \ |\n      |   5  | REQUEST-STATUS            | OctetString16 |\n      |   6 \
    \ | ERROR-CODE                | OctetString   |\n      |   7  | ERROR-INFO   \
    \             | OctetString   |\n      |   8  | PARTICIPANT-PROVIDED-INFO | OctetString\
    \   |\n      |   9  | STATUS-INFO               | OctetString   |\n      |  10\
    \  | SUPPORTED-ATTRIBUTES      | OctetString   |\n      |  11  | SUPPORTED-PRIMITIVES\
    \      | OctetString   |\n      |  12  | USER-DISPLAY-NAME         | OctetString\
    \   |\n      |  13  | USER-URI                  | OctetString   |\n      |  14\
    \  | BENEFICIARY-INFORMATION   | Grouped       |\n      |  15  | FLOOR-REQUEST-INFORMATION\
    \ | Grouped       |\n      |  16  | REQUESTED-BY-INFORMATION  | Grouped      \
    \ |\n      |  17  | FLOOR-REQUEST-STATUS      | Grouped       |\n      |  18 \
    \ | OVERALL-REQUEST-STATUS    | Grouped       |\n      +------+---------------------------+---------------+\n\
    \                         Table 2: BFCP attributes\n   M: The 'M' bit, known as\
    \ the Mandatory bit, indicates whether support\n   of the attribute is required.\
    \  If an unrecognized attribute with the\n   'M' bit set is received, the message\
    \ is rejected.  The 'M' bit is\n   significant for extension attributes defined\
    \ in other documents only.\n   All attributes specified in this document MUST\
    \ be understood by the\n   receiver so that the setting of the 'M' bit is irrelevant\
    \ for these.\n   In all other cases, the unrecognised attribute is ignored but\
    \ the\n   message is processed.\n   Length: This 8-bit field contains the length\
    \ of the attribute in\n   octets, excluding any padding defined for specific attributes.\
    \  The\n   length of attributes that are not grouped includes the Type, 'M' bit,\n\
    \   and Length fields.  The Length in grouped attributes is the length of\n  \
    \ the grouped attribute itself (including Type, 'M' bit, and Length\n   fields)\
    \ plus the total length (including padding) of all the included\n   attributes.\n\
    \   Attribute Contents: The contents of the different attributes are\n   defined\
    \ in the following sections.\n"
- title: 5.2.1.  BENEFICIARY-ID
  contents:
  - "5.2.1.  BENEFICIARY-ID\n   The following is the format of the BENEFICIARY-ID\
    \ attribute.\n      0                   1                   2                \
    \   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \ |0 0 0 0 0 0 1|M|0 0 0 0 0 1 0 0|        Beneficiary ID         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                      Figure 7: BENEFICIARY-ID format\n   Beneficiary ID: This\
    \ field contains a 16-bit value that uniquely\n   identifies a user within a conference.\n\
    \      Note that although the formats of the Beneficiary ID and of the\n     \
    \ User ID field in the common header are similar, their semantics\n      are different.\
    \  The Beneficiary ID is used in third-party floor\n      requests and to request\
    \ information about a particular\n      participant.\n"
- title: 5.2.2.  FLOOR-ID
  contents:
  - "5.2.2.  FLOOR-ID\n   The following is the format of the FLOOR-ID attribute.\n\
    \      0                   1                   2                   3\n      0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |0 0 0 0 0 1 0|M|0 0 0 0 0 1 0 0|           Floor ID            |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \                 Figure 8: FLOOR-ID format\n   Floor ID: This field contains\
    \ a 16-bit value that uniquely identifies\n   a floor within a conference.\n"
- title: 5.2.3.  FLOOR-REQUEST-ID
  contents:
  - "5.2.3.  FLOOR-REQUEST-ID\n   The following is the format of the FLOOR-REQUEST-ID\
    \ attribute.\n      0                   1                   2                \
    \   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \ |0 0 0 0 0 1 1|M|0 0 0 0 0 1 0 0|       Floor Request ID        |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     Figure 9: FLOOR-REQUEST-ID format\n   Floor Request ID:\
    \ This field contains a 16-bit value that identifies\n   a floor request at the\
    \ floor control server.\n"
- title: 5.2.4.  PRIORITY
  contents:
  - "5.2.4.  PRIORITY\n   The following is the format of the PRIORITY attribute.\n\
    \      0                   1                   2                   3\n      0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |0 0 0 0 1 0 0|M|0 0 0 0 0 1 0 0|Prio |         Reserved        |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \                Figure 10: PRIORITY format\n   Prio: This field contains a 3-bit\
    \ priority value, as shown in\n   Table 3.  Senders SHOULD NOT use values higher\
    \ than 4 in this field.\n   Receivers MUST treat values higher than 4 as if the\
    \ value received\n   were 4 (Highest).  The default priority value when the PRIORITY\n\
    \   attribute is missing is 2 (Normal).\n                           +-------+----------+\n\
    \                           | Value | Priority |\n                           +-------+----------+\n\
    \                           |   0   | Lowest   |\n                           |\
    \   1   | Low      |\n                           |   2   | Normal   |\n      \
    \                     |   3   | High     |\n                           |   4 \
    \  | Highest  |\n                           +-------+----------+\n           \
    \              Table 3: Priority values\n   Reserved: At this point, the 13 bits\
    \ in the reserved field SHOULD be\n   set to zero by the sender of the message\
    \ and MUST be ignored by the\n   receiver.\n"
- title: 5.2.5.  REQUEST-STATUS
  contents:
  - "5.2.5.  REQUEST-STATUS\n   The following is the format of the REQUEST-STATUS\
    \ attribute.\n      0                   1                   2                \
    \   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \ |0 0 0 0 1 0 1|M|0 0 0 0 0 1 0 0|Request Status |Queue Position |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     Figure 11: REQUEST-STATUS format\n   Request Status: This\
    \ 8-bit field contains the status of the request,\n   as described in the following\
    \ table.\n                           +-------+-----------+\n                 \
    \          | Value | Status    |\n                           +-------+-----------+\n\
    \                           |   1   | Pending   |\n                          \
    \ |   2   | Accepted  |\n                           |   3   | Granted   |\n  \
    \                         |   4   | Denied    |\n                           |\
    \   5   | Cancelled |\n                           |   6   | Released  |\n    \
    \                       |   7   | Revoked   |\n                           +-------+-----------+\n\
    \                      Table 4: Request Status values\n   Queue Position: This\
    \ 8-bit field contains, when applicable, the\n   position of the floor request\
    \ in the floor request queue at the\n   server.  If the Request Status value is\
    \ different from Accepted, if\n   the floor control server does not implement\
    \ a floor request queue, or\n   if the floor control server does not want to provide\
    \ the client with\n   this information, all the bits of this field SHOULD be set\
    \ to zero.\n   A floor request is in Pending state if the floor control server\
    \ needs\n   to contact a floor chair in order to accept the floor request, but\n\
    \   has not done it yet.  Once the floor control chair accepts the floor\n   request,\
    \ the floor request is moved to the Accepted state.\n"
- title: 5.2.6.  ERROR-CODE
  contents:
  - "5.2.6.  ERROR-CODE\n   The following is the format of the ERROR-CODE attribute.\n\
    \      0                   1                   2                   3\n      0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |0 0 0 0 1 1 0|M|    Length     |  Error Code   |               |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+               |\n     |  \
    \                                                             |\n     |      \
    \               Error Specific Details                    |\n     /          \
    \                                                     /\n     /              \
    \                 +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |                  \
    \             |            Padding            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                       Figure 12: ERROR-CODE format\n   Error Code: This 8-bit\
    \ field contains an error code from the\n   following table.  If an error code\
    \ is not recognised by the receiver,\n   then the receiver MUST assume that an\
    \ error exists, and therefore\n   that the message is processed, but the nature\
    \ of the error is\n   unclear.\n   +-------+-----------------------------------------------------------+\n\
    \   | Value | Meaning                                                   |\n  \
    \ +-------+-----------------------------------------------------------+\n   |\
    \   1   | Conference does not Exist                                 |\n   |  \
    \ 2   | User does not Exist                                       |\n   |   3\
    \   | Unknown Primitive                                         |\n   |   4  \
    \ | Unknown Mandatory Attribute                               |\n   |   5   |\
    \ Unauthorized Operation                                    |\n   |   6   | Invalid\
    \ Floor ID                                          |\n   |   7   | Floor Request\
    \ ID Does Not Exist                           |\n   |   8   | You have Already\
    \ Reached the Maximum Number of Ongoing    |\n   |       | Floor Requests for\
    \ this Floor                             |\n   |   9   | Use TLS             \
    \                                      |\n   +-------+-----------------------------------------------------------+\n\
    \                        Table 5: Error Code meaning\n   Error Specific Details:\
    \ Present only for certain Error Codes.  In\n   this document, only for Error\
    \ Code 4 (Unknown Mandatory Attribute).\n   See Section 5.2.6.1 for its definition.\n\
    \   Padding: One, two, or three octets of padding added so that the\n   contents\
    \ of the ERROR-CODE attribute is 32-bit aligned.  If the\n   attribute is already\
    \ 32-bit aligned, no padding is needed.\n   The Padding bits SHOULD be set to\
    \ zero by the sender and MUST be\n   ignored by the receiver.\n"
- title: 5.2.6.1.  Error-Specific Details for Error Code 4
  contents:
  - "5.2.6.1.  Error-Specific Details for Error Code 4\n   The following is the format\
    \ of the Error-Specific Details field for\n   Error Code 4.\n      0         \
    \          1                   2                   3\n      0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Unknown Type|R| Unknown Type|R| Unknown Type|R| Unknown Type|R|\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                                                             |\n     /      \
    \                         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |          \
    \                     | Unknown Type|R| Unknown Type|R|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Unknown Type|R| Unknown Type|R|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                   Figure 13: Unknown attributes format\n   Unknown Type: These\
    \ 7-bit fields contain the Types of the attributes\n   (which were present in\
    \ the message that triggered the Error message)\n   that were unknown to the receiver.\n\
    \   R: At this point, this bit is reserved.  It SHOULD be set to zero by\n   the\
    \ sender of the message and MUST be ignored by the receiver.\n"
- title: 5.2.7.  ERROR-INFO
  contents:
  - "5.2.7.  ERROR-INFO\n   The following is the format of the ERROR-INFO attribute.\n\
    \      0                   1                   2                   3\n      0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |0 0 0 0 1 1 1|M|    Length     |                               |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |\n     |  \
    \                                                             |\n     /      \
    \                       Text                              /\n     /          \
    \                                     +-+-+-+-+-+-+-+-+\n     |              \
    \                                 |    Padding    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                       Figure 14: ERROR-INFO format\n   Text: This field contains\
    \ UTF-8 [6] encoded text.\n   In some situations, the contents of the Text field\
    \ may be generated\n   by an automaton.  If this automaton has information about\
    \ the\n   preferred language of the receiver of a particular ERROR-INFO\n   attribute,\
    \ it MAY use this language to generate the Text field.\n   Padding: One, two,\
    \ or three octets of padding added so that the\n   contents of the ERROR-INFO\
    \ attribute is 32-bit aligned.  The Padding\n   bits SHOULD be set to zero by\
    \ the sender and MUST be ignored by the\n   receiver.  If the attribute is already\
    \ 32-bit aligned, no padding is\n   needed.\n"
- title: 5.2.8.  PARTICIPANT-PROVIDED-INFO
  contents:
  - "5.2.8.  PARTICIPANT-PROVIDED-INFO\n   The following is the format of the PARTICIPANT-PROVIDED-INFO\n\
    \   attribute.\n      0                   1                   2              \
    \     3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \ |0 0 0 1 0 0 0|M|    Length     |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               |\n     |                                    \
    \                           |\n     /                             Text       \
    \                       /\n     /                                            \
    \   +-+-+-+-+-+-+-+-+\n     |                                               |\
    \    Padding    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 15: PARTICIPANT-PROVIDED-INFO format\n   Text: This field\
    \ contains UTF-8 [6] encoded text.\n   Padding: One, two, or three octets of padding\
    \ added so that the\n   contents of the PARTICIPANT-PROVIDED-INFO attribute is\
    \ 32-bit\n   aligned.  The Padding bits SHOULD be set to zero by the sender and\n\
    \   MUST be ignored by the receiver.  If the attribute is already 32-bit\n   aligned,\
    \ no padding is needed.\n"
- title: 5.2.9.  STATUS-INFO
  contents:
  - "5.2.9.  STATUS-INFO\n   The following is the format of the STATUS-INFO attribute.\n\
    \      0                   1                   2                   3\n      0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |0 0 0 1 0 0 1|M|    Length     |                               |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |\n     |  \
    \                                                             |\n     /      \
    \                       Text                              /\n     /          \
    \                                     +-+-+-+-+-+-+-+-+\n     |              \
    \                                 |    Padding    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                       Figure 16: STATUS-INFO format\n   Text: This field contains\
    \ UTF-8 [6] encoded text.\n   In some situations, the contents of the Text field\
    \ may be generated\n   by an automaton.  If this automaton has information about\
    \ the\n   preferred language of the receiver of a particular STATUS-INFO\n   attribute,\
    \ it MAY use this language to generate the Text field.\n   Padding: One, two,\
    \ or three octets of padding added so that the\n   contents of the STATUS-INFO\
    \ attribute is 32-bit aligned.  The Padding\n   bits SHOULD be set to zero by\
    \ the sender and MUST be ignored by the\n   receiver.  If the attribute is already\
    \ 32-bit aligned, no padding is\n   needed.\n"
- title: 5.2.10.  SUPPORTED-ATTRIBUTES
  contents:
  - "5.2.10.  SUPPORTED-ATTRIBUTES\n   The following is the format of the SUPPORTED-ATTRIBUTES\
    \ attribute.\n      0                   1                   2                \
    \   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \ |0 0 0 1 0 1 0|M|    Length     | Supp. Attr. |R| Supp. Attr. |R|\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Supp. Attr. |R| Supp. Attr. |R| Supp. Attr. |R| Supp. Attr. |R|\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                                                             |\n     /      \
    \                                                         /\n     /          \
    \                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |              \
    \                 |            Padding            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 17: SUPPORTED-ATTRIBUTES format\n   Supp. Attr.: These\
    \ fields contain the Types of the attributes that\n   are supported by the floor\
    \ control server in the following format:\n   R: Reserved: This bit MUST be set\
    \ to zero upon transmission and MUST\n   be ignored upon reception.\n   Padding:\
    \ Two octets of padding added so that the contents of the\n   SUPPORTED-ATTRIBUTES\
    \ attribute is 32-bit aligned.  If the attribute\n   is already 32-bit aligned,\
    \ no padding is needed.\n   The Padding bits SHOULD be set to zero by the sender\
    \ and MUST be\n   ignored by the receiver.\n"
- title: 5.2.11.  SUPPORTED-PRIMITIVES
  contents:
  - "5.2.11.  SUPPORTED-PRIMITIVES\n   The following is the format of the SUPPORTED-PRIMITIVES\
    \ attribute.\n      0                   1                   2                \
    \   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \ |0 0 0 1 0 1 1|M|    Length     |   Primitive   |   Primitive   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |   Primitive   |   Primitive   |   Primitive   |   Primitive   |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                                                             |\n     /      \
    \                                                         /\n     /          \
    \                     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |              \
    \                 |            Padding            |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                  Figure 18: SUPPORTED-PRIMITIVES format\n   Primitive: These\
    \ fields contain the types of the BFCP messages that\n   are supported by the\
    \ floor control server.  See Table 1 for the list\n   of BFCP primitives.\n  \
    \ Padding: One, two, or three octets of padding added so that the\n   contents\
    \ of the SUPPORTED-PRIMITIVES attribute is 32-bit aligned.  If\n   the attribute\
    \ is already 32-bit aligned, no padding is needed.\n   The Padding bits SHOULD\
    \ be set to zero by the sender and MUST be\n   ignored by the receiver.\n"
- title: 5.2.12.  USER-DISPLAY-NAME
  contents:
  - "5.2.12.  USER-DISPLAY-NAME\n   The following is the format of the USER-DISPLAY-NAME\
    \ attribute.\n      0                   1                   2                \
    \   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \ |0 0 0 1 1 0 0|M|    Length     |                               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               |\n     |                                    \
    \                           |\n     /                             Text       \
    \                       /\n     /                                            \
    \   +-+-+-+-+-+-+-+-+\n     |                                               |\
    \    Padding    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                    Figure 19: USER-DISPLAY-NAME format\n   Text: This field\
    \ contains the UTF-8 encoded name of the user.\n   Padding: One, two, or three\
    \ octets of padding added so that the\n   contents of the USER-DISPLAY-NAME attribute\
    \ is 32-bit aligned.  The\n   Padding bits SHOULD be set to zero by the sender\
    \ and MUST be ignored\n   by the receiver.  If the attribute is already 32-bit\
    \ aligned, no\n   padding is needed.\n"
- title: 5.2.13.  USER-URI
  contents:
  - "5.2.13.  USER-URI\n   The following is the format of the USER-URI attribute.\n\
    \      0                   1                   2                   3\n      0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |0 0 0 1 1 0 1|M|    Length     |                               |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               |\n     |  \
    \                                                             |\n     /      \
    \                       Text                              /\n     /          \
    \                                     +-+-+-+-+-+-+-+-+\n     |              \
    \                                 |    Padding    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                        Figure 20: USER-URI format\n   Text: This field contains\
    \ the UTF-8 encoded user's contact URI, that\n   is, the URI used by the user\
    \ to set up the resources (e.g., media\n   streams) that are controlled by BFCP.\
    \  For example, in the context of\n   a conference set up by SIP, the USER-URI\
    \ attribute would carry the\n   SIP URI of the user.\n      Messages containing\
    \ a user's URI in a USER-URI attribute also\n      contain the user's User ID.\
    \  This way, a client receiving such a\n      message can correlate the user's\
    \ URI (e.g., the SIP URI the user\n      used to join a conference) with the user's\
    \ User ID.\n   Padding: One, two, or three octets of padding added so that the\n\
    \   contents of the USER-URI attribute is 32-bit aligned.  The Padding\n   bits\
    \ SHOULD be set to zero by the sender and MUST be ignored by the\n   receiver.\
    \  If the attribute is already 32-bit aligned, no padding is\n   needed.\n"
- title: 5.2.14.  BENEFICIARY-INFORMATION
  contents:
  - "5.2.14.  BENEFICIARY-INFORMATION\n   The BENEFICIARY-INFORMATION attribute is\
    \ a grouped attribute that\n   consists of a header, which is referred to as BENEFICIARY-\n\
    \   INFORMATION-HEADER, followed by a sequence of attributes.  The\n   following\
    \ is the format of the BENEFICIARY-INFORMATION-HEADER:\n      0              \
    \     1                   2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |0 0 0 1 1 1 0|M|    Length     |        Beneficiary ID         |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \     Figure 21: BENEFICIARY-INFORMATION-HEADER format\n   Beneficiary ID: This\
    \ field contains a 16-bit value that uniquely\n   identifies a user within a conference.\n\
    \   The following is the ABNF (Augmented Backus-Naur Form) [2] of the\n   BENEFICIARY-INFORMATION\
    \ grouped attribute.  (EXTENSION-ATTRIBUTE\n   refers to extension attributes\
    \ that may be defined in the future.)\n   BENEFICIARY-INFORMATION =   (BENEFICIARY-INFORMATION-HEADER)\n\
    \                               [USER-DISPLAY-NAME]\n                        \
    \       [USER-URI]\n                              *[EXTENSION-ATTRIBUTE]\n   \
    \              Figure 22: BENEFICIARY-INFORMATION format\n"
- title: 5.2.15.  FLOOR-REQUEST-INFORMATION
  contents:
  - "5.2.15.  FLOOR-REQUEST-INFORMATION\n   The FLOOR-REQUEST-INFORMATION attribute\
    \ is a grouped attribute that\n   consists of a header, which is referred to as\
    \ FLOOR-REQUEST-\n   INFORMATION-HEADER, followed by a sequence of attributes.\
    \  The\n   following is the format of the FLOOR-REQUEST-INFORMATION-HEADER:\n\
    \      0                   1                   2                   3\n      0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |0 0 0 1 1 1 1|M|    Length     |       Floor Request ID        |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \    Figure 23: FLOOR-REQUEST-INFORMATION-HEADER format\n   Floor Request ID:\
    \ This field contains a 16-bit value that identifies\n   a floor request at the\
    \ floor control server.\n   The following is the ABNF of the FLOOR-REQUEST-INFORMATION\
    \ grouped\n   attribute.  (EXTENSION-ATTRIBUTE refers to extension attributes\
    \ that\n   may be defined in the future.)\n   FLOOR-REQUEST-INFORMATION =   (FLOOR-REQUEST-INFORMATION-HEADER)\n\
    \                                 [OVERALL-REQUEST-STATUS]\n                 \
    \              1*(FLOOR-REQUEST-STATUS)\n                                 [BENEFICIARY-INFORMATION]\n\
    \                                 [REQUESTED-BY-INFORMATION]\n               \
    \                  [PRIORITY]\n                                 [PARTICIPANT-PROVIDED-INFO]\n\
    \                                *[EXTENSION-ATTRIBUTE]\n                Figure\
    \ 24: FLOOR-REQUEST-INFORMATION format\n"
- title: 5.2.16.  REQUESTED-BY-INFORMATION
  contents:
  - "5.2.16.  REQUESTED-BY-INFORMATION\n   The REQUESTED-BY-INFORMATION attribute\
    \ is a grouped attribute that\n   consists of a header, which is referred to as\
    \ REQUESTED-BY-\n   INFORMATION-HEADER, followed by a sequence of attributes.\
    \  The\n   following is the format of the REQUESTED-BY-INFORMATION-HEADER:\n \
    \     0                   1                   2                   3\n      0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |0 0 1 0 0 0 0|M|    Length     |       Requested-by ID         |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \     Figure 25: REQUESTED-BY-INFORMATION-HEADER format\n   Requested-by ID: This\
    \ field contains a 16-bit value that uniquely\n   identifies a user within a conference.\n\
    \   The following is the ABNF of the REQUESTED-BY-INFORMATION grouped\n   attribute.\
    \  (EXTENSION-ATTRIBUTE refers to extension attributes that\n   may be defined\
    \ in the future.)\n   REQUESTED-BY-INFORMATION =   (REQUESTED-BY-INFORMATION-HEADER)\n\
    \                                [USER-DISPLAY-NAME]\n                       \
    \         [USER-URI]\n                               *[EXTENSION-ATTRIBUTE]\n\
    \                Figure 26: REQUESTED-BY-INFORMATION format\n"
- title: 5.2.17.  FLOOR-REQUEST-STATUS
  contents:
  - "5.2.17.  FLOOR-REQUEST-STATUS\n   The FLOOR-REQUEST-STATUS attribute is a grouped\
    \ attribute that\n   consists of a header, which is referred to as\n   FLOOR-REQUEST-STATUS-HEADER,\
    \ followed by a sequence of attributes.\n   The following is the format of the\
    \ FLOOR-REQUEST-STATUS-HEADER:\n       0                   1                 \
    \  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |0 0 1 0 0 0 1|M|    Length     |           Floor ID            |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \         Figure 27: FLOOR-REQUEST-STATUS-HEADER format\n   Floor ID: this field\
    \ contains a 16-bit value that uniquely identifies\n   a floor within a conference.\n\
    \   The following is the ABNF of the FLOOR-REQUEST-STATUS grouped\n   attribute.\
    \  (EXTENSION-ATTRIBUTE refers to extension attributes that\n   may be defined\
    \ in the future.)\n   FLOOR-REQUEST-STATUS     =   (FLOOR-REQUEST-STATUS-HEADER)\n\
    \                                [REQUEST-STATUS]\n                          \
    \      [STATUS-INFO]\n                               *[EXTENSION-ATTRIBUTE]\n\
    \                  Figure 28: FLOOR-REQUEST-STATUS format\n"
- title: 5.2.18.  OVERALL-REQUEST-STATUS
  contents:
  - "5.2.18.  OVERALL-REQUEST-STATUS\n   The OVERALL-REQUEST-STATUS attribute is a\
    \ grouped attribute that\n   consists of a header, which is referred to as\n \
    \  OVERALL-REQUEST-STATUS-HEADER, followed by a sequence of attributes.\n   The\
    \ following is the format of the OVERALL-REQUEST-STATUS-HEADER:\n       0    \
    \               1                   2                   3\n       0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |0 0 1 0 0 1 0|M|    Length     |       Floor Request ID        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \        Figure 29: OVERALL-REQUEST-STATUS-HEADER format\n   Floor Request ID:\
    \ this field contains a 16-bit value that identifies\n   a floor request at the\
    \ floor control server.\n   The following is the ABNF of the OVERALL-REQUEST-STATUS\
    \ grouped\n   attribute.  (EXTENSION-ATTRIBUTE refers to extension attributes\
    \ that\n   may be defined in the future.)\n   OVERALL-REQUEST-STATUS   =   (OVERALL-REQUEST-STATUS-HEADER)\n\
    \                                [REQUEST-STATUS]\n                          \
    \      [STATUS-INFO]\n                               *[EXTENSION-ATTRIBUTE]\n\
    \                 Figure 30: OVERALL-REQUEST-STATUS format\n"
- title: 5.3.  Message Format
  contents:
  - "5.3.  Message Format\n   This section contains the normative ABNF (Augmented\
    \ Backus-Naur Form)\n   [2] of the BFCP messages.  Extension attributes that may\
    \ be defined\n   in the future are referred to as EXTENSION-ATTRIBUTE in the ABNF.\n"
- title: 5.3.1.  FloorRequest
  contents:
  - "5.3.1.  FloorRequest\n   Floor participants request a floor by sending a FloorRequest\
    \ message\n   to the floor control server.  The following is the format of the\n\
    \   FloorRequest message:\n   FloorRequest =   (COMMON-HEADER)\n             \
    \     1*(FLOOR-ID)\n                    [BENEFICIARY-ID]\n                   \
    \ [PARTICIPANT-PROVIDED-INFO]\n                    [PRIORITY]\n              \
    \     *[EXTENSION-ATTRIBUTE]\n                      Figure 31: FloorRequest format\n"
- title: 5.3.2.  FloorRelease
  contents:
  - "5.3.2.  FloorRelease\n   Floor participants release a floor by sending a FloorRelease\
    \ message\n   to the floor control server.  Floor participants also use the\n\
    \   FloorRelease message to cancel pending floor requests.  The following\n  \
    \ is the format of the FloorRelease message:\n   FloorRelease =   (COMMON-HEADER)\n\
    \                    (FLOOR-REQUEST-ID)\n                   *[EXTENSION-ATTRIBUTE]\n\
    \                      Figure 32: FloorRelease format\n"
- title: 5.3.3.  FloorRequestQuery
  contents:
  - "5.3.3.  FloorRequestQuery\n   Floor participants and floor chairs request information\
    \ about a floor\n   request by sending a FloorRequestQuery message to the floor\
    \ control\n   server.  The following is the format of the FloorRequestQuery\n\
    \   message:\n   FloorRequestQuery =   (COMMON-HEADER)\n                     \
    \    (FLOOR-REQUEST-ID)\n                        *[EXTENSION-ATTRIBUTE]\n    \
    \                Figure 33: FloorRequestQuery format\n"
- title: 5.3.4.  FloorRequestStatus
  contents:
  - "5.3.4.  FloorRequestStatus\n   The floor control server informs floor participants\
    \ and floor chairs\n   about the status of their floor requests by sending them\n\
    \   FloorRequestStatus messages.  The following is the format of the\n   FloorRequestStatus\
    \ message:\n   FloorRequestStatus =   (COMMON-HEADER)\n                      \
    \    (FLOOR-REQUEST-INFORMATION)\n                         *[EXTENSION-ATTRIBUTE]\n\
    \                   Figure 34: FloorRequestStatus format\n"
- title: 5.3.5.  UserQuery
  contents:
  - "5.3.5.  UserQuery\n   Floor participants and floor chairs request information\
    \ about a\n   participant and the floor requests related to this participant by\n\
    \   sending a UserQuery message to the floor control server.  The\n   following\
    \ is the format of the UserQuery message:\n   UserQuery =   (COMMON-HEADER)\n\
    \                 [BENEFICIARY-ID]\n                *[EXTENSION-ATTRIBUTE]\n \
    \                       Figure 35: UserQuery format\n"
- title: 5.3.6.  UserStatus
  contents:
  - "5.3.6.  UserStatus\n   The floor control server provides information about participants\
    \ and\n   their related floor requests to floor participants and floor chairs\n\
    \   by sending them UserStatus messages.  The following is the format of\n   the\
    \ UserStatus message:\n   UserStatus =   (COMMON-HEADER)\n                  [BENEFICIARY-INFORMATION]\n\
    \                 *(FLOOR-REQUEST-INFORMATION)\n                 *[EXTENSION-ATTRIBUTE]\n\
    \                       Figure 36: UserStatus format\n"
- title: 5.3.7.  FloorQuery
  contents:
  - "5.3.7.  FloorQuery\n   Floor participants and floor chairs request information\
    \ about a floor\n   or floors by sending a FloorQuery message to the floor control\n\
    \   server.  The following is the format of the FloorRequest message:\n   FloorQuery\
    \ =   (COMMON-HEADER)\n                 *(FLOOR-ID)\n                 *[EXTENSION-ATTRIBUTE]\n\
    \                       Figure 37: FloorQuery format\n"
- title: 5.3.8.  FloorStatus
  contents:
  - "5.3.8.  FloorStatus\n   The floor control server informs floor participants and\
    \ floor chairs\n   about the status (e.g., the current holder) of a floor by sending\n\
    \   them FloorStatus messages.  The following is the format of the\n   FloorStatus\
    \ message:\n   FloorStatus        =     (COMMON-HEADER)\n                    \
    \      *1(FLOOR-ID)\n                           *[FLOOR-REQUEST-INFORMATION]\n\
    \                           *[EXTENSION-ATTRIBUTE]\n                       Figure\
    \ 38: FloorStatus format\n"
- title: 5.3.9.  ChairAction
  contents:
  - "5.3.9.  ChairAction\n   Floor chairs send instructions to floor control servers\
    \ by sending\n   ChairAction messages.  The following is the format of the ChairAction\n\
    \   message:\n   ChairAction  =   (COMMON-HEADER)\n                    (FLOOR-REQUEST-INFORMATION)\n\
    \                   *[EXTENSION-ATTRIBUTE]\n                       Figure 39:\
    \ ChairAction format\n"
- title: 5.3.10.  ChairActionAck
  contents:
  - "5.3.10.  ChairActionAck\n   Floor control servers confirm that they have accepted\
    \ a ChairAction\n   message by sending a ChairActionAck message.  The following\
    \ is the\n   format of the ChairActionAck message:\n   ChairActionAck  =   (COMMON-HEADER)\n\
    \                      *[EXTENSION-ATTRIBUTE]\n                     Figure 40:\
    \ ChairActionAck format\n"
- title: 5.3.11.  Hello
  contents:
  - "5.3.11.  Hello\n   Floor participants and floor chairs check the liveliness of\
    \ floor\n   control servers by sending a Hello message.  The following is the\n\
    \   format of the Hello message:\n   Hello         =  (COMMON-HEADER)\n      \
    \             *[EXTENSION-ATTRIBUTE]\n                          Figure 41: Hello\
    \ format\n"
- title: 5.3.12.  HelloAck
  contents:
  - "5.3.12.  HelloAck\n   Floor control servers confirm that they are alive on reception\
    \ of a\n   Hello message by sending a HelloAck message.  The following is the\n\
    \   format of the HelloAck message:\n   HelloAck      =  (COMMON-HEADER)\n   \
    \                 (SUPPORTED-PRIMITIVES)\n                    (SUPPORTED-ATTRIBUTES)\n\
    \                   *[EXTENSION-ATTRIBUTE]\n                        Figure 42:\
    \ HelloAck format\n"
- title: 5.3.13.  Error
  contents:
  - "5.3.13.  Error\n   Floor control servers inform floor participants and floor\
    \ chairs\n   about errors processing requests by sending them Error messages.\
    \  The\n   following is the format of the Error message:\n   Error           \
    \   =   (COMMON-HEADER)\n                          (ERROR-CODE)\n            \
    \              [ERROR-INFO]\n                         *[EXTENSION-ATTRIBUTE]\n\
    \                          Figure 43: Error format\n"
- title: 6.  Transport
  contents:
  - "6.  Transport\n   BFCP entities exchange BFCP messages using TCP connections.\
    \  TCP\n   provides an in-order reliable delivery of a stream of bytes.\n   Consequently,\
    \ message framing is implemented in the application\n   layer.  BFCP implements\
    \ application-layer framing using TLV-encoded\n   attributes.\n   A client MUST\
    \ NOT use more than one TCP connection to communicate\n   with a given floor control\
    \ server within a conference.  Nevertheless,\n   if the same physical box handles\
    \ different clients (e.g., a floor\n   chair and a floor participant), which are\
    \ identified by different\n   User IDs, a separate connection per client is allowed.\n\
    \   If a BFCP entity (a client or a floor control server) receives data\n   from\
    \ TCP that cannot be parsed, the entity MUST close the TCP\n   connection, and\
    \ the connection SHOULD be reestablished.  Similarly,\n   if a TCP connection\
    \ cannot deliver a BFCP message and times out, the\n   TCP connection SHOULD be\
    \ reestablished.\n   The way connection reestablishment is handled depends on\
    \ how the\n   client obtains information to contact the floor control server (e.g.,\n\
    \   using an SDP offer/answer exchange [7]).  Once the TCP connection is\n   reestablished,\
    \ the client MAY resend those messages for which it did\n   not get a response\
    \ from the floor control server.\n   If a floor control server detects that the\
    \ TCP connection towards one\n   of the floor participants is lost, it is up to\
    \ the local policy of\n   the floor control server what to do with the pending\
    \ floor requests\n   of the floor participant.  In any case, it is RECOMMENDED\
    \ that the\n   floor control server keep the floor requests (i.e., that it does\
    \ not\n   cancel them) while the TCP connection is reestablished.\n   If a client\
    \ wishes to end its BFCP connection with a floor control\n   server, the client\
    \ closes (i.e., a graceful close) the TCP connection\n   towards the floor control\
    \ server.  If a floor control server wishes\n   to end its BFCP connection with\
    \ a client (e.g., the Focus of the\n   conference informs the floor control server\
    \ that the client has been\n   kicked out from the conference), the floor control\
    \ server closes\n   (i.e., a graceful close) the TCP connection towards the client.\n"
- title: 7.  Lower-Layer Security
  contents:
  - "7.  Lower-Layer Security\n   BFCP relies on lower-layer security mechanisms to\
    \ provide replay and\n   integrity protection and confidentiality.  BFCP floor\
    \ control servers\n   and clients (which include both floor participants and floor\
    \ chairs)\n   MUST support TLS [3].  Any BFCP entity MAY support other security\n\
    \   mechanisms.\n   BFCP entities MUST support, at a minimum, the TLS\n   TLS_RSA_WITH_AES_128_CBC_SHA\
    \ ciphersuite [5].\n   Which party, the client or the floor control server, acts\
    \ as the TLS\n   server depends on how the underlying TCP connection is established.\n\
    \   For example, when the TCP connection is established using an SDP\n   offer/answer\
    \ exchange [7], the answerer (which may be the client or\n   the floor control\
    \ server) always acts as the TLS server.\n"
- title: 8.  Protocol Transactions
  contents:
  - "8.  Protocol Transactions\n   In BFCP, there are two types of transactions: client-initiated\n\
    \   transactions and server-initiated transactions (notifications).\n   Client-initiated\
    \ transactions consist of a request from a client to a\n   floor control server\
    \ and a response from the floor control server to\n   the client.  The request\
    \ carries a Transaction ID in its common\n   header, which the floor control server\
    \ copies into the response.\n   Clients use Transaction ID values to match responses\
    \ with previously\n   issued requests.\n   Server-initiated transactions consist\
    \ of a single message from a\n   floor control server to a client.  Since they\
    \ do not trigger any\n   response, their Transaction ID is set to 0.\n"
- title: 8.1.  Client Behavior
  contents:
  - "8.1.  Client Behavior\n   A client starting a client-initiated transaction MUST\
    \ set the\n   Conference ID in the common header of the message to the Conference\n\
    \   ID for the conference that the client obtained previously.\n   The client\
    \ MUST set the Transaction ID value in the common header to\n   a number that\
    \ is different from 0 and that MUST NOT be reused in\n   another message from\
    \ the client until a response from the server is\n   received for the transaction.\
    \  The client uses the Transaction ID\n   value to match this message with the\
    \ response from the floor control\n   server.\n"
- title: 8.2.  Server Behavior
  contents:
  - "8.2.  Server Behavior\n   A floor control server sending a response within a\
    \ client-initiated\n   transaction MUST copy the Conference ID, the Transaction\
    \ ID, and the\n   User ID from the request received from the client into the response.\n\
    \   Server-initiated transactions MUST contain a Transaction ID equal to\n   0.\n"
- title: 9.  Authentication and Authorization
  contents:
  - "9.  Authentication and Authorization\n   BFCP clients SHOULD authenticate the\
    \ floor control server before\n   sending any BFCP message to it or accepting\
    \ any BFCP message from it.\n   Similarly, floor control servers SHOULD authenticate\
    \ a client before\n   accepting any BFCP message from it or sending any BFCP message\
    \ to it.\n   BFCP supports TLS-based mutual authentication between clients and\n\
    \   floor control servers, as specified in Section 9.1.  This is the\n   RECOMMENDED\
    \ authentication mechanism in BFCP.\n      Note that future extensions may define\
    \ additional authentication\n      mechanisms.\n   In addition to authenticating\
    \ BFCP messages, floor control servers\n   need to authorize them.  On receiving\
    \ an authenticated BFCP message,\n   the floor control server checks whether the\
    \ client sending the\n   message is authorized.  If the client is not authorized\
    \ to perform\n   the operation being requested, the floor control server generates\
    \ an\n   Error message, as described in Section 13.8, with an Error code with\n\
    \   a value of 5 (Unauthorized Operation).  Messages from a client that\n   cannot\
    \ be authorized MUST NOT be processed further.\n"
- title: 9.1.  TLS-Based Mutual Authentication
  contents:
  - "9.1.  TLS-Based Mutual Authentication\n   BFCP supports TLS-based mutual authentication\
    \ between clients and\n   floor control servers.  BFCP assumes that there is an\
    \ integrity-\n   protected channel between the client and the floor control server\n\
    \   that can be used to exchange their self-signed certificates or, more\n   commonly,\
    \ the fingerprints of these certificates.  These certificates\n   are used at\
    \ TLS establishment time.\n      The implementation of such an integrity-protected\
    \ channel using\n      SIP and the SDP offer/answer model is described in [7].\n\
    \   BFCP messages received over an authenticated TLS connection are\n   considered\
    \ authenticated.  A floor control server that receives a\n   BFCP message over\
    \ TCP (no TLS) can request the use of TLS by\n   generating an Error message,\
    \ as described in Section 13.8, with an\n   Error code with a value of 9 (Use\
    \ TLS).  Clients SHOULD simply ignore\n   unauthenticated messages.\n      Note\
    \ that future extensions may define additional authentication\n      mechanisms\
    \ that may not require an initial integrity-protected\n      channel (e.g., authentication\
    \ based on certificates signed by a\n      certificate authority).\n   As described\
    \ in Section 9, floor control servers need to perform\n   authorization before\
    \ processing any message.  In particular, the\n   floor control server SHOULD\
    \ check that messages arriving over a given\n   authenticated TLS connection use\
    \ an authorized User ID (i.e., a User\n   ID that the user that established the\
    \ authenticated TLS connection is\n   allowed to use).\n"
- title: 10.  Floor Participant Operations
  contents:
  - "10.  Floor Participant Operations\n   This section specifies how floor participants\
    \ can perform different\n   operations, such as requesting a floor, using the\
    \ protocol elements\n   described in earlier sections.  Section 11 specifies operations\
    \ that\n   are specific to floor chairs, such as instructing the floor control\n\
    \   server to grant or revoke a floor, and Section 12 specifies\n   operations\
    \ that can be performed by any client (i.e., both floor\n   participants and floor\
    \ chairs).\n"
- title: 10.1.  Requesting a Floor
  contents:
  - "10.1.  Requesting a Floor\n   A floor participant that wishes to request one\
    \ or more floors does so\n   by sending a FloorRequest message to the floor control\
    \ server.\n"
- title: 10.1.1.  Sending a FloorRequest Message
  contents:
  - "10.1.1.  Sending a FloorRequest Message\n   The ABNF in Section 5.3.1 describes\
    \ the attributes that a\n   FloorRequest message can contain.  In addition, the\
    \ ABNF specifies\n   normatively which of these attributes are mandatory, and\
    \ which ones\n   are optional.\n   The floor participant sets the Conference ID\
    \ and the Transaction ID\n   in the common header following the rules given in\
    \ Section 8.1.\n   The floor participant sets the User ID in the common header\
    \ to the\n   floor participant's identifier.  This User ID will be used by the\n\
    \   floor control server to authenticate and authorize the request.  If\n   the\
    \ sender of the FloorRequest message (identified by the User ID) is\n   not the\
    \ participant that would eventually get the floor (i.e., a\n   third-party floor\
    \ request), the sender SHOULD add a BENEFICIARY-ID\n   attribute to the message\
    \ identifying the beneficiary of the floor.\n      Note that the name space for\
    \ both the User ID and the Beneficiary\n      ID is the same.  That is, a given\
    \ participant is identified by a\n      single 16-bit value that can be used in\
    \ the User ID in the common\n      header and in several attributes: BENEFICIARY-ID,\
    \ BENEFICIARY-\n      INFORMATION, and REQUESTED-BY-INFORMATION.\n   The floor\
    \ participant must insert at least one FLOOR-ID attribute in\n   the FloorRequest\
    \ message.  If the client inserts more than one\n   FLOOR-ID attribute, the floor\
    \ control server will treat all the floor\n   requests as an atomic package. \
    \ That is, the floor control server\n   will either grant or deny all the floors\
    \ in the FloorRequest message.\n   The floor participant may use a PARTICIPANT-PROVIDED-INFO\
    \ attribute\n   to state the reason why the floor or floors are being requested.\
    \  The\n   Text field in the PARTICIPANT-PROVIDED-INFO attribute is intended for\n\
    \   human consumption.\n   The floor participant may request that the server handle\
    \ the floor\n   request with a certain priority using a PRIORITY attribute.\n"
- title: 10.1.2.  Receiving a Response
  contents:
  - "10.1.2.  Receiving a Response\n   A message from the floor control server is\
    \ considered a response to\n   the FloorRequest message if the message from the\
    \ floor control server\n   has the same Conference ID, Transaction ID, and User\
    \ ID as the\n   FloorRequest message, as described in Section 8.1.  On receiving\
    \ such\n   a response, the floor participant follows the rules in Section 9 that\n\
    \   relate to floor control server authentication.\n   The successful processing\
    \ of a FloorRequest message at the floor\n   control server involves generating\
    \ one or several FloorRequestStatus\n   messages.  The floor participant obtains\
    \ a Floor Request ID in the\n   Floor Request ID field of a FLOOR-REQUEST-INFORMATION\
    \ attribute in\n   the first FloorRequestStatus message from the floor control\
    \ server.\n   Subsequent FloorRequestStatus messages from the floor control server\n\
    \   regarding the same floor request will carry the same Floor Request ID\n  \
    \ in a FLOOR-REQUEST-INFORMATION attribute as the initial\n   FloorRequestStatus\
    \ message.  This way, the floor participant can\n   associate subsequent incoming\
    \ FloorRequestStatus messages with the\n   ongoing floor request.\n   The floor\
    \ participant obtains information about the status of the\n   floor request in\
    \ the FLOOR-REQUEST-INFORMATION attribute of each of\n   the FloorRequestStatus\
    \ messages received from the floor control\n   server.  This attribute is a grouped\
    \ attribute, and as such it\n   includes a number of attributes that provide information\
    \ about the\n   floor request.\n   The OVERALL-REQUEST-STATUS attribute provides\
    \ information about the\n   overall status of the floor request.  If the Request\
    \ Status value is\n   Granted, all the floors that were requested in the FloorRequest\n\
    \   message have been granted.  If the Request Status value is Denied,\n   all\
    \ the floors that were requested in the FloorRequest message have\n   been denied.\
    \  A floor request is considered to be ongoing while it is\n   in the Pending,\
    \ Accepted, or Granted states.  If the floor request\n   value is unknown, then\
    \ the response is still processed.  However, no\n   meaningful value can be reported\
    \ to the user.\n   The STATUS-INFO attribute, if present, provides extra information\n\
    \   that the floor participant MAY display to the user.\n   The FLOOR-REQUEST-STATUS\
    \ attributes provide information about the\n   status of the floor request as\
    \ it relates to a particular floor.  The\n   STATUS-INFO attribute, if present,\
    \ provides extra information that\n   the floor participant MAY display to the\
    \ user.\n   The BENEFICIARY-INFORMATION attribute identifies the beneficiary of\n\
    \   the floor request in third-party floor requests.  The\n   REQUESTED-BY-INFORMATION\
    \ attribute need not be present in\n   FloorRequestStatus messages received by\
    \ the floor participant that\n   requested the floor, as this floor participant\
    \ is already identified\n   by the User ID in the common header.\n   The PRIORITY\
    \ attribute, when present, contains the priority that was\n   requested by the\
    \ generator of the FloorRequest message.\n   If the response is an Error message,\
    \ the floor control server could\n   not process the FloorRequest message for\
    \ some reason, which is\n   described in the Error message.\n"
- title: 10.2.  Cancelling a Floor Request and Releasing a Floor
  contents:
  - "10.2.  Cancelling a Floor Request and Releasing a Floor\n   A floor participant\
    \ that wishes to cancel an ongoing floor request\n   does so by sending a FloorRelease\
    \ message to the floor control\n   server.  The FloorRelease message is also used\
    \ by floor participants\n   that hold a floor and would like to release it.\n"
- title: 10.2.1.  Sending a FloorRelease Message
  contents:
  - "10.2.1.  Sending a FloorRelease Message\n   The ABNF in Section 5.3.2 describes\
    \ the attributes that a\n   FloorRelease message can contain.  In addition, the\
    \ ABNF specifies\n   normatively which of these attributes are mandatory, and\
    \ which ones\n   are optional.\n   The floor participant sets the Conference ID\
    \ and the Transaction ID\n   in the common header following the rules given in\
    \ Section 8.1.  The\n   floor participant sets the User ID in the common header\
    \ to the floor\n   participant's identifier.  This User ID will be used by the\
    \ floor\n   control server to authenticate and authorize the request.\n      Note\
    \ that the FloorRelease message is used to release a floor or\n      floors that\
    \ were granted and to cancel ongoing floor requests\n      (from the protocol\
    \ perspective, both are ongoing floor requests).\n      Using the same message\
    \ in both situations helps resolve the race\n      condition that occurs when\
    \ the FloorRelease message and the\n      FloorGrant message cross each other\
    \ on the wire.\n   The floor participant uses the FLOOR-REQUEST-ID that was received\
    \ in\n   the response to the FloorRequest message that the FloorRelease\n   message\
    \ is cancelling.\n      Note that if the floor participant requested several floors\
    \ as an\n      atomic operation (i.e., in a single FloorRequest message), all\
    \ the\n      floors are released as an atomic operation as well (i.e., all are\n\
    \      released at the same time).\n"
- title: 10.2.2.  Receiving a Response
  contents:
  - "10.2.2.  Receiving a Response\n   A message from the floor control server is\
    \ considered a response to\n   the FloorRelease message if the message from the\
    \ floor control server\n   has the same Conference ID, Transaction ID, and User\
    \ ID as the\n   FloorRequest message, as described in Section 8.1.  On receiving\
    \ such\n   a response, the floor participant follows the rules in Section 9 that\n\
    \   relate to floor control server authentication.\n   If the response is a FloorRequestStatus\
    \ message, the Request Status\n   value in the OVERALL-REQUEST-STATUS attribute\
    \ (within the FLOOR-\n   REQUEST-INFORMATION grouped attribute) will be Cancelled\
    \ or Released.\n   If the response is an Error message, the floor control server\
    \ could\n   not process the FloorRequest message for some reason, which is\n \
    \  described in the Error message.\n   It is possible that the FloorRelease message\
    \ crosses on the wire with\n   a FloorRequestStatus message from the server with\
    \ a Request Status\n   different from Cancelled or Released.  In any case, such\
    \ a\n   FloorRequestStatus message will not be a response to the FloorRelease\n\
    \   message, as its Transaction ID will not match that of the\n   FloorRelease.\n"
- title: 11.  Chair Operations
  contents:
  - "11.  Chair Operations\n   This section specifies how floor chairs can instruct\
    \ the floor\n   control server to grant or revoke a floor using the protocol elements\n\
    \   described in earlier sections.\n   Floor chairs that wish to send instructions\
    \ to a floor control server\n   do so by sending a ChairAction message.\n"
- title: 11.1.  Sending a ChairAction Message
  contents:
  - "11.1.  Sending a ChairAction Message\n   The ABNF in Section 5.3.9 describes\
    \ the attributes that a ChairAction\n   message can contain.  In addition, the\
    \ ABNF specifies normatively\n   which of these attributes are mandatory, and\
    \ which ones are optional.\n   The floor chair sets the Conference ID and the\
    \ Transaction ID in the\n   common header following the rules given in Section\
    \ 8.1.  The floor\n   chair sets the User ID in the common header to the floor\n\
    \   participant's identifier.  This User ID will be used by the floor\n   control\
    \ server to authenticate and authorize the request.\n   The ChairAction message\
    \ contains instructions that apply to one or\n   more floors within a particular\
    \ floor request.  The floor or floors\n   are identified by the FLOOR-REQUEST-STATUS\
    \ attributes and the floor\n   request is identified by the FLOOR-REQUEST-INFORMATION-HEADER,\
    \ which\n   are carried in the ChairAction message.\n   For example, if a floor\
    \ request consists of two floors that depend on\n   different floor chairs, each\
    \ floor chair will grant its floor within\n   the floor request.  Once both chairs\
    \ have granted their floor, the\n   floor control server will grant the floor\
    \ request as a whole.  On the\n   other hand, if one of the floor chairs denies\
    \ its floor, the floor\n   control server will deny the floor request as a whole,\
    \ regardless of\n   the other floor chair's decision.\n   The floor chair provides\
    \ the new status of the floor request as it\n   relates to a particular floor\
    \ using a FLOOR-REQUEST-STATUS attribute.\n   If the new status of the floor request\
    \ is Accepted, the floor chair\n   MAY use the Queue Position field to provide\
    \ a queue position for the\n   floor request.  If the floor chair does not wish\
    \ to provide a queue\n   position, all the bits of the Queue Position field SHOULD\
    \ be set to\n   zero.  The floor chair SHOULD use the Status Revoked to revoke\
    \ a\n   floor that was granted (i.e., Granted status) and SHOULD use the\n   Status\
    \ Denied to reject floor requests in any other status (e.g.,\n   Pending and Accepted).\n\
    \   The floor chair MAY add an OVERALL-REQUEST-STATUS attribute to the\n   ChairAction\
    \ message to provide a new overall status for the floor\n   request.  If the new\
    \ overall status of the floor request is Accepted,\n   the floor chair MAY use\
    \ the Queue Position field to provide a queue\n   position for the floor request.\n\
    \      Note that a particular floor control server may implement a\n      different\
    \ queue for each floor containing all the floor requests\n      that relate to\
    \ that particular floor, a general queue for all\n      floor requests, or both.\
    \  Also note that a floor request may\n      involve several floors and that a\
    \ ChairAction message may only\n      deal with a subset of these floors (e.g.,\
    \ if a single floor chair\n      is not authorized to manage all the floors).\
    \  In this case, the\n      floor control server will combine the instructions\
    \ received from\n      the different floor chairs in FLOOR-REQUEST-STATUS attributes\
    \ to\n      come up with the overall status of the floor request.\n      Note\
    \ that, while the action of a floor chair may communicate\n      information in\
    \ the OVERALL-REQUEST-STATUS attribute, the floor\n      control server may override,\
    \ modify, or ignore this field's\n      content.\n   The floor chair may use STATUS-INFO\
    \ attributes to state the reason\n   why the floor or floors are being accepted,\
    \ granted, or revoked.  The\n   Text in the STATUS-INFO attribute is intended\
    \ for human consumption.\n"
- title: 11.2.  Receiving a Response
  contents:
  - "11.2.  Receiving a Response\n   A message from the floor control server is considered\
    \ a response to\n   the ChairAction message if the message from the server has\
    \ the same\n   Conference ID, Transaction ID, and User ID as the ChairAction\n\
    \   message, as described in Section 8.1.  On receiving such a response,\n   the\
    \ floor chair follows the rules in Section 9 that relate to floor\n   control\
    \ server authentication.\n   A ChairActionAck message from the floor control server\
    \ confirms that\n   the floor control server has accepted the ChairAction message.\
    \  An\n   Error message indicates that the floor control server could not\n  \
    \ process the ChairAction message for some reason, which is described\n   in the\
    \ Error message.\n"
- title: 12.  General Client Operations
  contents:
  - "12.  General Client Operations\n   This section specifies operations that can\
    \ be performed by any\n   client.  That is, they are not specific to floor participants\
    \ or\n   floor chairs.  They can be performed by both.\n"
- title: 12.1.  Requesting Information about Floors
  contents:
  - "12.1.  Requesting Information about Floors\n   A client can obtain information\
    \ about the status of a floor or floors\n   in different ways, which include using\
    \ BFCP and using out-of-band\n   mechanisms.  Clients using BFCP to obtain such\
    \ information use the\n   procedures described in this section.\n   Clients request\
    \ information about the status of one or several floors\n   by sending a FloorQuery\
    \ message to the floor control server.\n"
- title: 12.1.1.  Sending a FloorQuery Message
  contents:
  - "12.1.1.  Sending a FloorQuery Message\n   The ABNF in Section 5.3.7 describes\
    \ the attributes that a FloorQuery\n   message can contain.  In addition, the\
    \ ABNF specifies normatively\n   which of these attributes are mandatory, and\
    \ which ones are optional.\n   The client sets the Conference ID and the Transaction\
    \ ID in the\n   common header following the rules given in Section 8.1.  The client\n\
    \   sets the User ID in the common header to the client's identifier.\n   This\
    \ User ID will be used by the floor control server to authenticate\n   and authorize\
    \ the request.\n   The client inserts in the message all the Floor IDs it wants\
    \ to\n   receive information about.  The floor control server will send\n   periodic\
    \ information about all of these floors.  If the client does\n   not want to receive\
    \ information about a particular floor any longer,\n   it sends a new FloorQuery\
    \ message removing the FLOOR-ID of this\n   floor.  If the client does not want\
    \ to receive information about any\n   floor any longer, it sends a FloorQuery\
    \ message with no FLOOR-ID\n   attribute.\n"
- title: 12.1.2.  Receiving a Response
  contents:
  - "12.1.2.  Receiving a Response\n   A message from the floor control server is\
    \ considered a response to\n   the FloorQuery message if the message from the\
    \ floor control server\n   has the same Conference ID, Transaction ID, and User\
    \ ID as the\n   FloorRequest message, as described in Section 8.1.  On receiving\
    \ such\n   a response, the client follows the rules in Section 9 that relate to\n\
    \   floor control server authentication.\n   On reception of the FloorQuery message,\
    \ the floor control server will\n   respond with a FloorStatus message or with\
    \ an Error message.  If the\n   response is a FloorStatus message, it will contain\
    \ information about\n   one of the floors the client requested information about.\
    \  If the\n   client did not include any FLOOR-ID attribute in its FloorQuery\n\
    \   message (i.e., the client does not want to receive information about\n   any\
    \ floor any longer), the FloorStatus message from the floor control\n   server\
    \ will not include any FLOOR-ID attribute either.\n   FloorStatus messages that\
    \ carry information about a floor contain a\n   FLOOR-ID attribute that identifies\
    \ the floor.  After this attribute,\n   FloorStatus messages contain information\
    \ about existing (one or more)\n   floor requests that relate to that floor. \
    \ The information about each\n   particular floor request is encoded in a FLOOR-REQUEST-INFORMATION\n\
    \   attribute.  This grouped attribute carries a Floor Request ID that\n   identifies\
    \ the floor request, followed by a set of attributes that\n   provide information\
    \ about the floor request.\n   After the first FloorStatus, the floor control\
    \ server will continue\n   sending FloorStatus messages, periodically informing\
    \ the client about\n   changes on the floors the client requested information\
    \ about.\n"
- title: 12.2.  Requesting Information about Floor Requests
  contents:
  - "12.2.  Requesting Information about Floor Requests\n   A client can obtain information\
    \ about the status of one or several\n   floor requests in different ways, which\
    \ include using BFCP and using\n   out-of-band mechanisms.  Clients using BFCP\
    \ to obtain such\n   information use the procedures described in this section.\n\
    \   Clients request information about the current status of a floor\n   request\
    \ by sending a FloorRequestQuery message to the floor control\n   server.\n  \
    \ Requesting information about a particular floor request is useful in\n   a number\
    \ of situations.  For example, on reception of a FloorRequest\n   message, a floor\
    \ control server may choose to return\n   FloorRequestStatus messages only when\
    \ the floor request changes its\n   state (e.g., from Accepted to Granted), but\
    \ not when the floor\n   request advances in its queue.  In this situation, if\
    \ the user\n   requests it, the floor participant can use a FloorRequestQuery\n\
    \   message to poll the floor control server for the status of the floor\n   request.\n"
- title: 12.2.1.  Sending a FloorRequestQuery Message
  contents:
  - "12.2.1.  Sending a FloorRequestQuery Message\n   The ABNF in Section 5.3.3 describes\
    \ the attributes that a\n   FloorRequestQuery message can contain.  In addition,\
    \ the ABNF\n   specifies normatively which of these attributes are mandatory,\
    \ and\n   which ones are optional.\n   The client sets the Conference ID and the\
    \ Transaction ID in the\n   common header following the rules given in Section\
    \ 8.1.  The client\n   sets the User ID in the common header to the client's identifier.\n\
    \   This User ID will be used by the floor control server to authenticate\n  \
    \ and authorize the request.\n   The client must insert a FLOOR-REQUEST-ID attribute\
    \ that identifies\n   the floor request at the floor control server.\n"
- title: 12.2.2.  Receiving a Response
  contents:
  - "12.2.2.  Receiving a Response\n   A message from the floor control server is\
    \ considered a response to\n   the FloorRequestQuery message if the message from\
    \ the floor control\n   server has the same Conference ID, Transaction ID, and\
    \ User ID as the\n   FloorRequestQuery message, as described in Section 8.1. \
    \ On receiving\n   such a response, the client follows the rules in Section 9\
    \ that\n   relate to floor control server authentication.\n   If the response\
    \ is a FloorRequestStatus message, the client obtains\n   information about the\
    \ status of the FloorRequest the client requested\n   information about in a FLOOR-REQUEST-INFORMATION\
    \ attribute.\n   If the response is an Error message, the floor control server\
    \ could\n   not process the FloorRequestQuery message for some reason, which is\n\
    \   described in the Error message.\n"
- title: 12.3.  Requesting Information about a User
  contents:
  - "12.3.  Requesting Information about a User\n   A client can obtain information\
    \ about a participant and the floor\n   requests related to this participant in\
    \ different ways, which include\n   using BFCP and using out-of-band mechanisms.\
    \  Clients using BFCP to\n   obtain such information use the procedures described\
    \ in this section.\n   Clients request information about a participant and the\
    \ floor\n   requests related to this participant by sending a UserQuery message\n\
    \   to the floor control server.\n   This functionality may be useful for floor\
    \ chairs or floor\n   participants interested in the display name and the URI\
    \ of a\n   particular floor participant.  In addition, a floor participant may\n\
    \   find it useful to request information about itself.  For example, a\n   floor\
    \ participant, after experiencing connectivity problems (e.g.,\n   its TCP connection\
    \ with the floor control server was down for a while\n   and eventually was re-established),\
    \ may need to request information\n   about all the floor requests associated\
    \ to itself that still exist.\n"
- title: 12.3.1.  Sending a UserQuery Message
  contents:
  - "12.3.1.  Sending a UserQuery Message\n   The ABNF in Section 5.3.5 describes\
    \ the attributes that a UserQuery\n   message can contain.  In addition, the ABNF\
    \ specifies normatively\n   which of these attributes are mandatory, and which\
    \ ones are optional.\n   The client sets the Conference ID and the Transaction\
    \ ID in the\n   common header following the rules given in Section 8.1.  The client\n\
    \   sets the User ID in the common header to the client's identifier.\n   This\
    \ User ID will be used by the floor control server to authenticate\n   and authorize\
    \ the request.\n   If the floor participant the client is requesting information\
    \ about\n   is not the client issuing the UserQuery message (which is identified\n\
    \   by the User ID in the common header of the message), the client MUST\n   insert\
    \ a BENEFICIARY-ID attribute.\n"
- title: 12.3.2.  Receiving a Response
  contents:
  - "12.3.2.  Receiving a Response\n   A message from the floor control server is\
    \ considered a response to\n   the UserQuery message if the message from the floor\
    \ control server\n   has the same Conference ID, Transaction ID, and User ID as\
    \ the\n   UserQuery message, as described in Section 8.1.  On receiving such a\n\
    \   response, the client follows the rules in Section 9 that relate to\n   floor\
    \ control server authentication.\n   If the response is a UserStatus message,\
    \ the client obtains\n   information about the floor participant in a BENEFICIARY-INFORMATION\n\
    \   grouped attribute and about the status of the floor requests\n   associated\
    \ with the floor participant in FLOOR-REQUEST-INFORMATION\n   attributes.\n  \
    \ If the response is an Error message, the floor control server could\n   not\
    \ process the UserQuery message for some reason, which is described\n   in the\
    \ Error message.\n"
- title: 12.4.  Obtaining the Capabilities of a Floor Control Server
  contents:
  - "12.4.  Obtaining the Capabilities of a Floor Control Server\n   A client that\
    \ wishes to obtain the capabilities of a floor control\n   server does so by sending\
    \ a Hello message to the floor control\n   server.\n"
- title: 12.4.1.  Sending a Hello Message
  contents:
  - "12.4.1.  Sending a Hello Message\n   The ABNF in Section 5.3.11 describes the\
    \ attributes that a Hello\n   message can contain.  In addition, the ABNF specifies\
    \ normatively\n   which of these attributes are mandatory, and which ones are\
    \ optional.\n   The client sets the Conference ID and the Transaction ID in the\n\
    \   common header following the rules given in Section 8.1.  The client\n   sets\
    \ the User ID in the common header to the client's identifier.\n   This User ID\
    \ will be used by the floor control server to authenticate\n   and authorize the\
    \ request.\n"
- title: 12.4.2.  Receiving Responses
  contents:
  - "12.4.2.  Receiving Responses\n   A message from the floor control server is considered\
    \ a response to\n   the Hello message by the client if the message from the floor\
    \ control\n   server has the same Conference ID, Transaction ID, and User ID as\
    \ the\n   Hello message, as described in Section 8.1.  On receiving such a\n \
    \  response, the client follows the rules in Section 9 that relate to\n   floor\
    \ control server authentication.\n   If the response is a HelloAck message, the\
    \ floor control server could\n   process the Hello message successfully.  The\
    \ SUPPORTED-PRIMITVIES and\n   SUPPORTED-ATTRIBUTES attributes indicate which\
    \ primitives and\n   attributes, respectively, are supported by the server.\n\
    \   If the response is an Error message, the floor control server could\n   not\
    \ process the Hello message for some reason, which is described in\n   the Error\
    \ message.\n"
- title: 13.  Floor Control Server Operations
  contents:
  - "13.  Floor Control Server Operations\n   This section specifies how floor control\
    \ servers can perform\n   different operations, such as granting a floor, using\
    \ the protocol\n   elements described in earlier sections.\n   On reception of\
    \ a message from a client, the floor control server\n   MUST check whether the\
    \ value of the Primitive is supported.  If it\n   does not, the floor control\
    \ server SHOULD send an Error message, as\n   described in Section 13.8, with\
    \ Error code 3 (Unknown Primitive).\n   On reception of a message from a client,\
    \ the floor control server\n   MUST check whether the value of the Conference\
    \ ID matched an existing\n   conference.  If it does not, the floor control server\
    \ SHOULD send an\n   Error message, as described in Section 13.8, with Error code\
    \ 1\n   (Conference does not Exist).\n   On reception of a message from a client,\
    \ the floor control server\n   follows the rules in Section 9 that relate to the\
    \ authentication of\n   the message.\n   On reception of a message from a client,\
    \ the floor control server\n   MUST check whether it understands all the mandatory\
    \ ('M' bit set)\n   attributes in the message.  If the floor control server does\
    \ not\n   understand all of them, the floor control server SHOULD send an Error\n\
    \   message, as described in Section 13.8, with Error code 2\n   (Authentication\
    \ Failed).  The Error message SHOULD list the\n   attributes that were not understood.\n"
- title: 13.1.  Reception of a FloorRequest Message
  contents:
  - "13.1.  Reception of a FloorRequest Message\n   On reception of a FloorRequest\
    \ message, the floor control server\n   follows the rules in Section 9 that relate\
    \ to client authentication\n   and authorization.  If while processing the FloorRequest\
    \ message, the\n   floor control server encounters an error, it SHOULD generate\
    \ an Error\n   response following the procedures described in Section 13.8.\n\
    \      BFCP allows floor participants to have several ongoing floor\n      requests\
    \ for the same floor (e.g., the same floor participant can\n      occupy more\
    \ than one position in a queue at the same time).  A\n      floor control server\
    \ that only supports a certain number of\n      ongoing floor requests per floor\
    \ participant (e.g., one) can use\n      Error Code 8 (You have Already Reached\
    \ the Maximum Number of\n      Ongoing Floor Requests for this Floor) to inform\
    \ the floor\n      participant.\n"
- title: 13.1.1.  Generating the First FloorRequestStatus Message
  contents:
  - "13.1.1.  Generating the First FloorRequestStatus Message\n   The successful processing\
    \ of a FloorRequest message by a floor\n   control server involves generating\
    \ one or several FloorRequestStatus\n   messages, the first of which SHOULD be\
    \ generated as soon as possible.\n   If the floor control server cannot accept,\
    \ grant, or deny the floor\n   request right away (e.g., a decision from a chair\
    \ is needed), it\n   SHOULD use a Request Status value of Pending in the OVERALL-REQUEST-\n\
    \   STATUS attribute (within the FLOOR-REQUEST-INFORMATION grouped\n   attribute)\
    \ of the first FloorRequestStatus message it generates.\n      The policy that\
    \ a floor control server follows to grant or deny\n      floors is outside the\
    \ scope of this document.  A given floor\n      control server may perform these\
    \ decisions automatically while\n      another may contact a human acting as a\
    \ chair every time a\n      decision needs to be made.\n   The floor control server\
    \ MUST copy the Conference ID, the Transaction\n   ID, and the User ID from the\
    \ FloorRequest into the\n   FloorRequestStatus, as described in Section 8.2. \
    \ Additionally, the\n   floor control server MUST add a FLOOR-REQUEST-INFORMATION\
    \ grouped\n   attribute to the FloorRequestStatus.  The attributes contained in\n\
    \   this grouped attribute carry information about the floor request.\n   The\
    \ floor control server MUST assign an identifier that is unique\n   within the\
    \ conference to this floor request, and MUST insert it in\n   the Floor Request\
    \ ID field of the FLOOR-REQUEST-INFORMATION\n   attribute.  This identifier will\
    \ be used by the floor participant (or\n   by a chair or chairs) to refer to this\
    \ specific floor request in the\n   future.\n   The floor control server MUST\
    \ copy the Floor IDs in the FLOOR-ID\n   attributes of the FloorRequest into the\
    \ FLOOR-REQUEST-STATUS\n   attributes in the FLOOR-REQUEST-INFORMATION grouped\
    \ attribute.  These\n   Floor IDs identify the floors being requested (i.e., the\
    \ floors\n   associated with this particular floor request).\n   The floor control\
    \ server SHOULD copy (if present) the contents of the\n   BENEFICIARY-ID attribute\
    \ from the FloorRequest into a\n   BENEFICIARY-INFORMATION attribute inside the\n\
    \   FLOOR-REQUEST-INFORMATION grouped attribute.  Additionally, the floor\n  \
    \ control server MAY provide the display name and the URI of the\n   beneficiary\
    \ in this BENEFICIARY-INFORMATION attribute.\n   The floor control server MAY\
    \ provide information about the requester\n   of the floor in a REQUESTED-BY-INFORMATION\
    \ attribute inside the\n   FLOOR-REQUEST-INFORMATION grouped attribute.\n   The\
    \ floor control server MAY copy (if present) the PARTICIPANT-\n   PROVIDED-INFO\
    \ attribute from the FloorRequest into the FLOOR-\n   REQUEST-INFORMATION grouped\
    \ attribute.\n      Note that this attribute carries the priority requested by\
    \ the\n      participant.  The priority that the floor control server assigns\n\
    \      to the floor request depends on the priority requested by the\n      participant\
    \ and the rights the participant has according to the\n      policy of the conference.\
    \  For example, a participant that is only\n      allowed to use the Normal priority\
    \ may request Highest priority\n      for a floor request.  In that case, the\
    \ floor control server would\n      ignore the priority requested by the participant.\n\
    \   The floor control server MAY copy (if present) the\n   PARTICIPANT-PROVIDED-INFO\
    \ attribute from the FloorRequest into the\n   FLOOR-REQUEST-INFORMATION grouped\
    \ attribute.\n"
- title: 13.1.2.  Generation of Subsequent FloorRequestStatus Messages
  contents:
  - "13.1.2.  Generation of Subsequent FloorRequestStatus Messages\n   A floor request\
    \ is considered to be ongoing as long as it is not in\n   the Cancelled, Released,\
    \ or Revoked states.  If the OVERALL-REQUEST-\n   STATUS attribute (inside the\
    \ FLOOR-REQUEST-INFORMATION grouped\n   attribute) of the first FloorRequestStatus\
    \ message generated by the\n   floor control server did not indicate any of these\
    \ states, the floor\n   control server will need to send subsequent FloorRequestStatus\n\
    \   messages.\n   When the status of the floor request changes, the floor control\n\
    \   server SHOULD send new FloorRequestStatus messages with the\n   appropriate\
    \ Request Status.  The floor control server MUST add a\n   FLOOR-REQUEST-INFORMATION\
    \ attribute with a Floor Request ID equal to\n   the one sent in the first FloorRequestStatus\
    \ message to any new\n   FloorRequestStatus related to the same floor request.\
    \  (The Floor\n   Request ID identifies the floor request to which the\n   FloorRequestStatus\
    \ applies.)\n   The floor control server MUST set the Transaction ID of subsequent\n\
    \   FloorRequestStatus messages to 0.\n      The rate at which the floor control\
    \ server sends\n      FloorRequestStatus messages is a matter of local policy.\
    \  A floor\n      control server may choose to send a new FloorRequestStatus message\n\
    \      every time the floor request moves in the floor request queue,\n      while\
    \ another may choose only to send a new FloorRequestStatus\n      message when\
    \ the floor request is Granted or Denied.\n   The floor control server may add\
    \ a STATUS-INFO attribute to any of\n   the FloorRequestStatus messages it generates\
    \ to provide extra\n   information about its decisions regarding the floor request\
    \ (e.g.,\n   why it was denied).\n      Floor participants and floor chairs may\
    \ request to be informed\n      about the status of a floor following the procedures\
    \ in\n      Section 12.1.  If the processing of a floor request changes the\n\
    \      status of a floor (e.g., the floor request is granted and\n      consequently\
    \ the floor has a new holder), the floor control server\n      needs to follow\
    \ the procedures in Section 13.5 to inform the\n      clients that have requested\
    \ that information.\n   The common header and the rest of the attributes are the\
    \ same as in\n   the first FloorRequestStatus message.\n   The floor control server\
    \ can discard the state information about a\n   particular floor request when\
    \ this reaches a status of Cancelled,\n   Released, or Revoked.\n"
- title: 13.2.  Reception of a FloorRequestQuery Message
  contents:
  - "13.2.  Reception of a FloorRequestQuery Message\n   On reception of a FloorRequestQuery\
    \ message, the floor control server\n   follows the rules in Section 9 that relate\
    \ to client authentication\n   and authorization.  If while processing the FloorRequestQuery\n\
    \   message, the floor control server encounters an error, it SHOULD\n   generate\
    \ an Error response following the procedures described in\n   Section 13.8.\n\
    \   The successful processing of a FloorRequestQuery message by a floor\n   control\
    \ server involves generating a FloorRequestStatus message,\n   which SHOULD be\
    \ generated as soon as possible.\n   The floor control server MUST copy the Conference\
    \ ID, the Transaction\n   ID, and the User ID from the FloorRequestQuery message\
    \ into the\n   FloorRequestStatus message, as described in Section 8.2.\n   Additionally,\
    \ the floor control server MUST include information about\n   the floor request\
    \ in the FLOOR-REQUEST-INFORMATION grouped attribute\n   to the FloorRequestStatus.\n\
    \   The floor control server MUST copy the contents of the\n   FLOOR-REQUEST-ID\
    \ attribute from the FloorRequestQuery message into\n   the Floor Request ID field\
    \ of the FLOOR-REQUEST-INFORMATION\n   attribute.\n   The floor control server\
    \ MUST add FLOOR-REQUEST-STATUS attributes to\n   the FLOOR-REQUEST-INFORMATION\
    \ grouped attribute identifying the\n   floors being requested (i.e., the floors\
    \ associated with the floor\n   request identified by the FLOOR-REQUEST-ID attribute).\n\
    \   The floor control server SHOULD add a BENEFICIARY-ID attribute to the\n  \
    \ FLOOR-REQUEST-INFORMATION grouped attribute identifying the\n   beneficiary\
    \ of the floor request.  Additionally, the floor control\n   server MAY provide\
    \ the display name and the URI of the beneficiary in\n   this BENEFICIARY-INFORMATION\
    \ attribute.\n   The floor control server MAY provide information about the requester\n\
    \   of the floor in a REQUESTED-BY-INFORMATION attribute inside the\n   FLOOR-REQUEST-INFORMATION\
    \ grouped attribute.\n   The floor control server MAY provide the reason why the\
    \ floor\n   participant requested the floor in a PARTICIPANT-PROVIDED-INFO.\n\
    \   The floor control server MAY also add to the\n   FLOOR-REQUEST-INFORMATION\
    \ grouped attribute a PRIORITY attribute with\n   the Priority value requested\
    \ for the floor request and a STATUS-INFO\n   attribute with extra information\
    \ about the floor request.\n   The floor control server MUST add an OVERALL-REQUEST-STATUS\
    \ attribute\n   to the FLOOR-REQUEST-INFORMATION grouped attribute with the current\n\
    \   status of the floor request.  The floor control server MAY provide\n   information\
    \ about the status of the floor request as it relates to\n   each of the floors\
    \ being requested in the FLOOR-REQUEST-STATUS\n   attributes.\n"
- title: 13.3.  Reception of a UserQuery Message
  contents:
  - "13.3.  Reception of a UserQuery Message\n   On reception of a UserQuery message,\
    \ the floor control server follows\n   the rules in Section 9 that relate to client\
    \ authentication and\n   authorization.  If while processing the UserQuery message,\
    \ the floor\n   control server encounters an error, it SHOULD generate an Error\n\
    \   response following the procedures described in Section 13.8.\n   The successful\
    \ processing of a UserQuery message by a floor control\n   server involves generating\
    \ a UserStatus message, which SHOULD be\n   generated as soon as possible.\n \
    \  The floor control server MUST copy the Conference ID, the Transaction\n   ID,\
    \ and the User ID from the UserQuery message into the USerStatus\n   message,\
    \ as described in Section 8.2.\n   The sender of the UserQuery message is requesting\
    \ information about\n   all the floor requests associated with a given participant\
    \ (i.e., the\n   floor requests where the participant is either the beneficiary\
    \ or the\n   requester).  This participant is identified by a BENEFICIARY-ID\n\
    \   attribute or, in the absence of a BENEFICIARY-ID attribute, by a the\n   User\
    \ ID in the common header of the UserQuery message.\n   The floor control server\
    \ MUST copy, if present, the contents of the\n   BENEFICIARY-ID attribute from\
    \ the UserQuery message into a\n   BENEFICIARY-INFORMATION attribute in the UserStatus\
    \ message.\n   Additionally, the floor control server MAY provide the display\
    \ name\n   and the URI of the participant about which the UserStatus message\n\
    \   provides information in this BENEFICIARY-INFORMATION attribute.\n   The floor\
    \ control server SHOULD add to the UserStatus message a\n   FLOOR-REQUEST-INFORMATION\
    \ grouped attribute for each floor request\n   related to the participant about\
    \ which the message provides\n   information (i.e., the floor requests where the\
    \ participant is either\n   the beneficiary or the requester).  For each\n   FLOOR-REQUEST-INFORMATION\
    \ attribute, the floor control server follows\n   the following steps.\n   The\
    \ floor control server MUST identify the floor request the\n   FLOOR-REQUEST-INFORMATION\
    \ attribute applies to by filling the Floor\n   Request ID field of the FLOOR-REQUEST-INFORMATION\
    \ attribute.\n   The floor control server MUST add FLOOR-REQUEST-STATUS attributes\
    \ to\n   the FLOOR-REQUEST-INFORMATION grouped attribute identifying the\n   floors\
    \ being requested (i.e., the floors associated with the floor\n   request identified\
    \ by the FLOOR-REQUEST-ID attribute).\n   The floor control server SHOULD add\
    \ a BENEFICIARY-ID attribute to the\n   FLOOR-REQUEST-INFORMATION grouped attribute\
    \ identifying the\n   beneficiary of the floor request.  Additionally, the floor\
    \ control\n   server MAY provide the display name and the URI of the beneficiary\
    \ in\n   this BENEFICIARY-INFORMATION attribute.\n   The floor control server\
    \ MAY provide information about the requester\n   of the floor in a REQUESTED-BY-INFORMATION\
    \ attribute inside the\n   FLOOR-REQUEST-INFORMATION grouped attribute.\n   The\
    \ floor control server MAY provide the reason why the floor\n   participant requested\
    \ the floor in a PARTICIPANT-PROVIDED-INFO.\n   The floor control server MAY also\
    \ add to the FLOOR-REQUEST-\n   INFORMATION grouped attribute a PRIORITY attribute\
    \ with the Priority\n   value requested for the floor request.\n   The floor control\
    \ server MUST include the current status of the floor\n   request in an OVERALL-REQUEST-STATUS\
    \ attribute to the FLOOR-REQUEST-\n   INFORMATION grouped attribute.  The floor\
    \ control server MAY add a\n   STATUS-INFO attribute with extra information about\
    \ the floor request.\n   The floor control server MAY provide information about\
    \ the status of\n   the floor request as it relates to each of the floors being\
    \ requested\n   in the FLOOR-REQUEST-STATUS attributes.\n"
- title: 13.4.  Reception of a FloorRelease Message
  contents:
  - "13.4.  Reception of a FloorRelease Message\n   On reception of a FloorRelease\
    \ message, the floor control server\n   follows the rules in Section 9 that relate\
    \ to client authentication\n   and authorization.  If while processing the FloorRelease\
    \ message, the\n   floor control server encounters an error, it SHOULD generate\
    \ an Error\n   response following the procedures described in Section 13.8.\n\
    \   The successful processing of a FloorRelease message by a floor\n   control\
    \ server involves generating a FloorRequestStatus message,\n   which SHOULD be\
    \ generated as soon as possible.\n   The floor control server MUST copy the Conference\
    \ ID, the Transaction\n   ID, and the User ID from the FloorRelease message into\
    \ the\n   FloorRequestStatus message, as described in Section 8.2.\n   The floor\
    \ control server MUST add a FLOOR-REQUEST-INFORMATION grouped\n   attribute to\
    \ the FloorRequestStatus.  The attributes contained in\n   this grouped attribute\
    \ carry information about the floor request.\n   The FloorRelease message identifies\
    \ the floor request it applies to\n   using a FLOOR-REQUEST-ID.  The floor control\
    \ server MUST copy the\n   contents of the FLOOR-REQUEST-ID attribute from the\
    \ FloorRelease\n   message into the Floor Request ID field of the\n   FLOOR-REQUEST-INFORMATION\
    \ attribute.\n   The floor control server MUST identify the floors being requested\n\
    \   (i.e., the floors associated with the floor request identified by the\n  \
    \ FLOOR-REQUEST-ID attribute) in FLOOR-REQUEST-STATUS attributes to the\n   FLOOR-REQUEST-INFORMATION\
    \ grouped attribute.\n   The floor control server MUST add an OVERALL-REQUEST-STATUS\
    \ attribute\n   to the FLOOR-REQUEST-INFORMATION grouped attribute.  The Request\n\
    \   Status value SHOULD be Released, if the floor (or floors) had been\n   previously\
    \ granted, or Cancelled, if the floor (or floors) had not\n   been previously\
    \ granted.  The floor control server MAY add a STATUS-\n   INFO attribute with\
    \ extra information about the floor request.\n"
- title: 13.5.  Reception of a FloorQuery Message
  contents:
  - "13.5.  Reception of a FloorQuery Message\n   On reception of a FloorQuery message,\
    \ the floor control server\n   follows the rules in Section 9 that relate to client\
    \ authentication.\n   If while processing the FloorRelease message, the floor\
    \ control\n   server encounters an error, it SHOULD generate an Error response\n\
    \   following the procedures described in Section 13.8.\n   A floor control server\
    \ receiving a FloorQuery message from a client\n   SHOULD keep this client informed\
    \ about the status of the floors\n   identified by FLOOR-ID attributes in the\
    \ FloorQuery message.  Floor\n   Control Servers keep clients informed by using\
    \ FloorStatus messages.\n   An individual FloorStatus message carries information\
    \ about a single\n   floor.  So, when a FloorQuery message requests information\
    \ about more\n   than one floor, the floor control server needs to send separate\n\
    \   FloorStatus messages for different floors.\n   The information FloorQuery\
    \ messages carry may depend on the user\n   requesting the information.  For example,\
    \ a chair may be able to\n   receive information about pending requests, while\
    \ a regular user may\n   not be authorized to do so.\n"
- title: 13.5.1.  Generation of the First FloorStatus Message
  contents:
  - "13.5.1.  Generation of the First FloorStatus Message\n   The successful processing\
    \ of a FloorQuery message by a floor control\n   server involves generating one\
    \ or several FloorStatus messages, the\n   first of which SHOULD be generated\
    \ as soon as possible.\n   The floor control server MUST copy the Conference ID,\
    \ the Transaction\n   ID, and the User ID from the FloorQuery message into the\
    \ FloorStatus\n   message, as described in Section 8.2.\n   If the FloorQuery\
    \ message did not contain any FLOOR-ID attribute, the\n   floor control server\
    \ sends the FloorStatus message without adding any\n   additional attribute and\
    \ does not send any subsequent FloorStatus\n   message to the floor participant.\n\
    \   If the FloorQuery message contained one or more FLOOR-ID attributes,\n   the\
    \ floor control server chooses one from among them and adds this\n   FLOOR-ID\
    \ attribute to the FloorStatus message.  The floor control\n   server SHOULD add\
    \ a FLOOR-REQUEST-INFORMATION grouped attribute for\n   each floor request associated\
    \ to the floor.  Each\n   FLOOR-REQUEST-INFORMATION grouped attribute contains\
    \ a number of\n   attributes that provide information about the floor request.\
    \  For\n   each FLOOR-REQUEST-INFORMATION attribute, the floor control server\n\
    \   follows the following steps.\n   The floor control server MUST identify the\
    \ floor request the\n   FLOOR-REQUEST-INFORMATION attribute applies to by filling\
    \ the Floor\n   Request ID field of the FLOOR-REQUEST-INFORMATION attribute.\n\
    \   The floor control server MUST add FLOOR-REQUEST-STATUS attributes to\n   the\
    \ FLOOR-REQUEST-INFORMATION grouped attribute identifying the\n   floors being\
    \ requested (i.e., the floors associated with the floor\n   request identified\
    \ by the FLOOR-REQUEST-ID attribute).\n   The floor control server SHOULD add\
    \ a BENEFICIARY-ID attribute to the\n   FLOOR-REQUEST-INFORMATION grouped attribute\
    \ identifying the\n   beneficiary of the floor request.  Additionally, the floor\
    \ control\n   server MAY provide the display name and the URI of the beneficiary\
    \ in\n   this BENEFICIARY-INFORMATION attribute.\n   The floor control server\
    \ MAY provide information about the requester\n   of the floor in a REQUESTED-BY-INFORMATION\
    \ attribute inside the\n   FLOOR-REQUEST-INFORMATION grouped attribute.\n   The\
    \ floor control server MAY provide the reason why the floor\n   participant requested\
    \ the floor in a PARTICIPANT-PROVIDED-INFO.\n   The floor control server MAY also\
    \ add to the FLOOR-REQUEST-\n   INFORMATION grouped attribute a PRIORITY attribute\
    \ with the Priority\n   value requested for the floor request.\n   The floor control\
    \ server MUST add an OVERALL-REQUEST-STATUS attribute\n   to the FLOOR-REQUEST-INFORMATION\
    \ grouped attribute with the current\n   status of the floor request.  The floor\
    \ control server MAY add a\n   STATUS-INFO attribute with extra information about\
    \ the floor request.\n   The floor control server MAY provide information about\
    \ the status of\n   the floor request as it relates to each of the floors being\
    \ requested\n   in the FLOOR-REQUEST-STATUS attributes.\n"
- title: 13.5.2.  Generation of Subsequent FloorStatus Messages
  contents:
  - "13.5.2.  Generation of Subsequent FloorStatus Messages\n   If the FloorQuery\
    \ message carried more than one FLOOR-ID attribute,\n   the floor control server\
    \ SHOULD generate a FloorStatus message for\n   each of them (except for the FLOOR-ID\
    \ attribute chosen for the first\n   FloorStatus message) as soon as possible.\
    \  These FloorStatus messages\n   are generated following the same rules as those\
    \ for the first\n   FloorStatus message (see Section 13.5.1), but their Transaction\
    \ ID is\n   0.\n   After generating these messages, the floor control server sends\n\
    \   FloorStatus messages, periodically keeping the client informed about\n   all\
    \ the floors for which the client requested information.  The\n   Transaction\
    \ ID of these messages MUST be 0.\n      The rate at which the floor control server\
    \ sends FloorStatus\n      messages is a matter of local policy.  A floor control\
    \ server may\n      choose to send a new FloorStatus message every time a new\
    \ floor\n      request arrives, while another may choose to only send a new\n\
    \      FloorStatus message when a new floor request is Granted.\n"
- title: 13.6.  Reception of a ChairAction Message
  contents:
  - "13.6.  Reception of a ChairAction Message\n   On reception of a ChairAction message,\
    \ the floor control server\n   follows the rules in Section 9 that relate to client\
    \ authentication\n   and authorization.  If while processing the ChairAction message,\
    \ the\n   floor control server encounters an error, it SHOULD generate an Error\n\
    \   response following the procedures described in Section 13.8.\n   The successful\
    \ processing of a ChairAction message by a floor control\n   server involves generating\
    \ a ChairActionAck message, which SHOULD be\n   generated as soon as possible.\n\
    \   The floor control server MUST copy the Conference ID, the Transaction\n  \
    \ ID, and the User ID from the ChairAction message into the\n   ChairActionAck\
    \ message, as described in Section 8.2.\n   The floor control server needs to\
    \ take into consideration the\n   operation requested in the ChairAction message\
    \ (e.g., granting a\n   floor) but does not necessarily need to perform it as\
    \ requested by\n   the floor chair.  The operation that the floor control server\n\
    \   performs depends on the ChairAction message and on the internal state\n  \
    \ of the floor control server.\n   For example, a floor chair may send a ChairAction\
    \ message granting a\n   floor that was requested as part of an atomic floor request\
    \ operation\n   that involved several floors.  Even if the chair responsible for\
    \ one\n   of the floors instructs the floor control server to grant the floor,\n\
    \   the floor control server will not grant it until the chairs\n   responsible\
    \ for the other floors agree to grant them as well.\n   So, the floor control\
    \ server is ultimately responsible for keeping a\n   coherent floor state using\
    \ instructions from floor chairs as input to\n   this state.\n   If the new Status\
    \ in the ChairAction message is Accepted and all the\n   bits of the Queue Position\
    \ field are zero, the floor chair is\n   requesting that the floor control server\
    \ assign a queue position\n   (e.g., the last in the queue) to the floor request\
    \ based on the local\n   policy of the floor control server.  (Of course, such\
    \ a request only\n   applies if the floor control server implements a queue.)\n"
- title: 13.7.  Reception of a Hello Message
  contents:
  - "13.7.  Reception of a Hello Message\n   On reception of a Hello message, the\
    \ floor control server follows the\n   rules in Section 9 that relate to client\
    \ authentication.  If while\n   processing the Hello message, the floor control\
    \ server encounters an\n   error, it SHOULD generate an Error response following\
    \ the procedures\n   described in Section 13.8.\n   The successful processing\
    \ of a Hello message by a floor control\n   server involves generating a HelloAck\
    \ message, which SHOULD be\n   generated as soon as possible.  The floor control\
    \ server MUST copy\n   the Conference ID, the Transaction ID, and the User ID\
    \ from the Hello\n   into the HelloAck, as described in Section 8.2.\n   The floor\
    \ control server MUST add a SUPPORTED-PRIMITIVES attribute to\n   the HelloAck\
    \ message listing all the primitives (i.e., BFCP messages)\n   supported by the\
    \ floor control server.\n   The floor control server MUST add a SUPPORTED-ATTRIBUTES\
    \ attribute to\n   the HelloAck message listing all the attributes supported by\
    \ the\n   floor control server.\n"
- title: 13.8.  Error Message Generation
  contents:
  - "13.8.  Error Message Generation\n   Error messages are always sent in response\
    \ to a previous message from\n   the client as part of a client-initiated transaction.\
    \  The ABNF in\n   Section 5.3.13 describes the attributes that an Error message\
    \ can\n   contain.  In addition, the ABNF specifies normatively which of these\n\
    \   attributes are mandatory and which ones are optional.\n   The floor control\
    \ server MUST copy the Conference ID, the Transaction\n   ID, and the User ID\
    \ from the message from the client into the Error\n   message, as described in\
    \ Section 8.2.\n   The floor control server MUST add an ERROR-CODE attribute to\
    \ the\n   Error message.  The ERROR-CODE attribute contains an Error Code from\n\
    \   Table 5.  Additionally, the floor control server may add an\n   ERROR-INFO\
    \ attribute with extra information about the error.\n"
- title: 14.  Security Considerations
  contents:
  - "14.  Security Considerations\n   BFCP uses TLS to provide mutual authentication\
    \ between clients and\n   servers.  TLS also provides replay and integrity protection\
    \ and\n   confidentiality.  It is RECOMMENDED that TLS with non-null encryption\n\
    \   always be used.  BFCP entities MAY use other security mechanisms as\n   long\
    \ as they provide similar security properties.\n   The remainder of this section\
    \ analyzes some of the threats against\n   BFCP and how they are addressed.\n\
    \   An attacker may attempt to impersonate a client (a floor participant\n   or\
    \ a floor chair) in order to generate forged floor requests or to\n   grant or\
    \ deny existing floor requests.  Client impersonation is\n   avoided by having\
    \ servers only accept BFCP messages over\n   authenticated TLS connections.  The\
    \ floor control server assumes that\n   attackers cannot highjack the TLS connection\
    \ and, therefore, that\n   messages over the TLS connection come from the client\
    \ that was\n   initially authenticated.\n   An attacker may attempt to impersonate\
    \ a floor control server.  A\n   successful attacker would be able to make clients\
    \ think that they\n   hold a particular floor so that they would try to access\
    \ a resource\n   (e.g., sending media) without having legitimate rights to access\
    \ it.\n   Floor control server impersonation is avoided by having servers only\n\
    \   accept BFCP messages over authenticated TLS connections.\n   Attackers may\
    \ attempt to modify messages exchanged by a client and a\n   floor control server.\
    \  The integrity protection provided by TLS\n   connections prevents this attack.\n\
    \   An attacker may attempt to fetch a valid message sent by a client to\n   a\
    \ floor control server and replay it over a connection between the\n   attacker\
    \ and the floor control server.  This attack is prevented by\n   having floor\
    \ control servers check that messages arriving over a\n   given authenticated\
    \ TLS connection use an authorized user ID (i.e., a\n   user ID that the user\
    \ that established the authenticated TLS\n   connection is allowed to use).\n\
    \   Attackers may attempt to pick messages from the network to get access\n  \
    \ to confidential information between the floor control server and a\n   client\
    \ (e.g., why a floor request was denied).  TLS confidentiality\n   prevents this\
    \ attack.  Therefore, it is RECOMMENDED that TLS be used\n   with a non-null encryption\
    \ algorithm.\n"
- title: 15.  IANA Considerations
  contents:
  - "15.  IANA Considerations\n   The IANA has created a new registry for BFCP parameters\
    \ called\n   \"Binary Floor Control Protocol (BFCP) Parameters\".  This new registry\n\
    \   has a number of subregistries, which are described in the following\n   sections.\n"
- title: 15.1.  Attribute Subregistry
  contents:
  - "15.1.  Attribute Subregistry\n   This section establishes the Attribute subregistry\
    \ under the BFCP\n   Parameters registry.  As per the terminology in RFC 2434\
    \ [4], the\n   registration policy for BFCP attributes shall be \"Specification\n\
    \   Required\".  For the purposes of this subregistry, the BFCP attributes\n \
    \  for which IANA registration is requested MUST be defined by a\n   standards-track\
    \ RFC.  Such an RFC MUST specify the attribute's type,\n   name, format, and semantics.\n\
    \   For each BFCP attribute, the IANA registers its type, its name, and\n   the\
    \ reference to the RFC where the attribute is defined.  The\n   following table\
    \ contains the initial values of this subregistry.\n           +------+---------------------------+------------+\n\
    \           | Type | Attribute                 | Reference  |\n           +------+---------------------------+------------+\n\
    \           |   1  | BENEFICIARY-ID            | [RFC 4582] |\n           |  \
    \ 2  | FLOOR-ID                  | [RFC 4582] |\n           |   3  | FLOOR-REQUEST-ID\
    \          | [RFC 4582] |\n           |   4  | PRIORITY                  | [RFC\
    \ 4582] |\n           |   5  | REQUEST-STATUS            | [RFC 4582] |\n    \
    \       |   6  | ERROR-CODE                | [RFC 4582] |\n           |   7  |\
    \ ERROR-INFO                | [RFC 4582] |\n           |   8  | PARTICIPANT-PROVIDED-INFO\
    \ | [RFC 4582] |\n           |   9  | STATUS-INFO               | [RFC 4582] |\n\
    \           |  10  | SUPPORTED-ATTRIBUTES      | [RFC 4582] |\n           |  11\
    \  | SUPPORTED-PRIMITIVES      | [RFC 4582] |\n           |  12  | USER-DISPLAY-NAME\
    \         | [RFC 4582] |\n           |  13  | USER-URI                  | [RFC\
    \ 4582] |\n           |  14  | BENEFICIARY-INFORMATION   | [RFC 4582] |\n    \
    \       |  15  | FLOOR-REQUEST-INFORMATION | [RFC 4582] |\n           |  16  |\
    \ REQUESTED-BY-INFORMATION  | [RFC 4582] |\n           |  17  | FLOOR-REQUEST-STATUS\
    \      | [RFC 4582] |\n           |  18  | OVERALL-REQUEST-STATUS    | [RFC 4582]\
    \ |\n           +------+---------------------------+------------+\n         Table\
    \ 6: Initial values of the BFCP Attribute subregistry\n"
- title: 15.2.  Primitive Subregistry
  contents:
  - "15.2.  Primitive Subregistry\n   This section establishes the Primitive subregistry\
    \ under the BFCP\n   Parameters registry.  As per the terminology in RFC 2434\
    \ [4], the\n   registration policy for BFCP primitives shall be \"Specification\n\
    \   Required\".  For the purposes of this subregistry, the BFCP primitives\n \
    \  for which IANA registration is requested MUST be defined by a\n   standards-track\
    \ RFC.  Such an RFC MUST specify the primitive's value,\n   name, format, and\
    \ semantics.\n   For each BFCP primitive, the IANA registers its value, its name,\
    \ and\n   the reference to the RFC where the primitive is defined.  The\n   following\
    \ table contains the initial values of this subregistry.\n                +-------+--------------------+------------+\n\
    \                | Value | Primitive          | Reference  |\n               \
    \ +-------+--------------------+------------+\n                |   1   | FloorRequest\
    \       | [RFC 4582] |\n                |   2   | FloorRelease       | [RFC 4582]\
    \ |\n                |   3   | FloorRequestQuery  | [RFC 4582] |\n           \
    \     |   4   | FloorRequestStatus | [RFC 4582] |\n                |   5   | UserQuery\
    \          | [RFC 4582] |\n                |   6   | UserStatus         | [RFC\
    \ 4582] |\n                |   7   | FloorQuery         | [RFC 4582] |\n     \
    \           |   8   | FloorStatus        | [RFC 4582] |\n                |   9\
    \   | ChairAction        | [RFC 4582] |\n                |   10  | ChairActionAck\
    \     | [RFC 4582] |\n                |   11  | Hello              | [RFC 4582]\
    \ |\n                |   12  | HelloAck           | [RFC 4582] |\n           \
    \     |   13  | Error              | [RFC 4582] |\n                +-------+--------------------+------------+\n\
    \         Table 7: Initial values of the BFCP primitive subregistry\n"
- title: 15.3.  Request Status Subregistry
  contents:
  - "15.3.  Request Status Subregistry\n   This section establishes the Request Status\
    \ subregistry under the\n   BFCP Parameters registry.  As per the terminology\
    \ in RFC 2434 [4],\n   the registration policy for BFCP request status shall be\n\
    \   \"Specification Required\".  For the purposes of this subregistry, the\n \
    \  BFCP request status for which IANA registration is requested MUST be\n   defined\
    \ by a standards-track RFC.  Such an RFC MUST specify the value\n   and the semantics\
    \ of the request status.\n   For each BFCP request status, the IANA registers\
    \ its value, its\n   meaning, and the reference to the RFC where the request status\
    \ is\n   defined.  The following table contains the initial values of this\n \
    \  subregistry.\n                    +-------+-----------+------------+\n    \
    \                | Value | Status    | Reference  |\n                    +-------+-----------+------------+\n\
    \                    |   1   | Pending   | [RFC 4582] |\n                    |\
    \   2   | Accepted  | [RFC 4582] |\n                    |   3   | Granted   |\
    \ [RFC 4582] |\n                    |   4   | Denied    | [RFC 4582] |\n     \
    \               |   5   | Cancelled | [RFC 4582] |\n                    |   6\
    \   | Released  | [RFC 4582] |\n                    |   7   | Revoked   | [RFC\
    \ 4582] |\n                    +-------+-----------+------------+\n         Table\
    \ 8: Initial values of the Request Status subregistry\n"
- title: 15.4.  Error Code Subregistry
  contents:
  - "15.4.  Error Code Subregistry\n   This section establishes the Error Code subregistry\
    \ under the BFCP\n   Parameters registry.  As per the terminology in RFC 2434\
    \ [4], the\n   registration policy for BFCP error codes shall be \"Specification\n\
    \   Required\".  For the purposes of this subregistry, the BFCP error\n   codes\
    \ for which IANA registration is requested MUST be defined by a\n   standards-track\
    \ RFC.  Such an RFC MUST specify the value and the\n   semantics of the error\
    \ code, and any Error Specific Details that\n   apply to it.\n   For each BFCP\
    \ primitive, the IANA registers its value, its meaning,\n   and the reference\
    \ to the RFC where the primitive is defined.  The\n   following table contains\
    \ the initial values of this subregistry.\n +-------+-----------------------------------------------+------------+\n\
    \ | Value | Meaning                                       | Reference  |\n +-------+-----------------------------------------------+------------+\n\
    \ |   1   | Conference does not Exist                     | [RFC 4582] |\n | \
    \  2   | User does not Exist                           | [RFC 4582] |\n |   3\
    \   | Unknown Primitive                             | [RFC 4582] |\n |   4   |\
    \ Unknown Mandatory Attribute                   | [RFC 4582] |\n |   5   | Unauthorized\
    \ Operation                        | [RFC 4582] |\n |   6   | Invalid Floor ID\
    \                              | [RFC 4582] |\n |   7   | Floor Request ID Does\
    \ Not Exist               | [RFC 4582] |\n |   8   | You have Already Reached\
    \ the Maximum Number   | [RFC 4582] |\n |       | of Ongoing Floor Requests for\
    \ this Floor      |            |\n |   9   | Use TLS                         \
    \              | [RFC 4582] |\n +-------+-----------------------------------------------+-----------+\n\
    \           Table 9: Initial Values of the Error Code subregistry\n"
- title: 16.  Acknowledgements
  contents:
  - "16.  Acknowledgements\n   The XCON WG chairs, Adam Roach and Alan Johnston, provided\
    \ useful\n   ideas for this document.  Additionally, Xiaotao Wu, Paul Kyzivat,\n\
    \   Jonathan Rosenberg, Miguel A. Garcia-Martin, Mary Barnes, Ben\n   Campbell,\
    \ Dave Morgan, and Oscar Novo provided useful comments.\n"
- title: 17.  References
  contents:
  - '17.  References

    '
- title: 17.1.  Normative References
  contents:
  - "17.1.  Normative References\n   [1]  Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n \
    \  [2]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n        Specifications:\
    \ ABNF\", RFC 4234, October 2005.\n   [3]  Dierks, T. and E. Rescorla, \"The Transport\
    \ Layer Security (TLS)\n        Protocol Version 1.1\", RFC 4346, April 2006.\n\
    \   [4]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an IANA\n    \
    \    Considerations Section in RFCs\", BCP 26, RFC 2434, October 1998.\n   [5]\
    \  Chown, P., \"Advanced Encryption Standard (AES) Ciphersuites for\n        Transport\
    \ Layer Security (TLS)\", RFC 3268, June 2002.\n   [6]  Yergeau, F., \"UTF-8,\
    \ a transformation format of ISO 10646\", STD\n        63, RFC 3629, November\
    \ 2003.\n   [7]  Camarillo, G., \"Session Description Protocol (SDP) Format for\n\
    \        Binary Floor Control Protocol (BFCP) Streams\", RFC 4583,\n        November\
    \ 2006.\n"
- title: 17.2.  Informational References
  contents:
  - "17.2.  Informational References\n   [8]   Rosenberg, J. and H. Schulzrinne, \"\
    An Offer/Answer Model with\n         Session Description Protocol (SDP)\", RFC\
    \ 3264, June 2002.\n   [9]  Koskelainen, P., Ott, J., Schulzrinne, H., and X.\
    \ Wu,\n         \"Requirements for Floor Control Protocols\", RFC 4376, February\n\
    \         2006.\n   [10]  Barnes, M. and C. Boulton, \"A Framework and Data Model\
    \ for\n         Centralized Conferencing\", Work in Progress, February 2005.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Gonzalo Camarillo\n   Ericsson\n   Hirsalantie 11\n  \
    \ Jorvas  02420\n   Finland\n   EMail: Gonzalo.Camarillo@ericsson.com\n   Joerg\
    \ Ott\n   Helsinki University of Technology\n   Department for Electrical and\
    \ Communications Engineering\n   Networking Laboratory\n   PO Box 3000\n   02015\
    \ TKK\n   Finland\n   EMail: jo@netlab.hut.fi\n   Keith Drage\n   Lucent Technologies\n\
    \   Windmill Hill Business Park\n   Swindon\n   Wiltshire  SN5 6PP\n   UK\n  \
    \ EMail: drage@lucent.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2006).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST,\n   AND THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES,\n   EXPRESS OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT\n   THE USE OF THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY\n   IMPLIED WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR\n   PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
