- contents:
  - '          The Session Initiation Protocol (SIP) UPDATE Method

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This specification defines the new UPDATE method for the Session\n
    \  Initiation Protocol (SIP).  UPDATE allows a client to update\n   parameters
    of a session (such as the set of media streams and their\n   codecs) but has no
    impact on the state of a dialog.  In that sense,\n   it is like a re-INVITE, but
    unlike re-INVITE, it can be sent before\n   the initial INVITE has been completed.
    \ This makes it very useful for\n   updating session parameters within early dialogs.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1    Introduction ..............................................
    \   2\n   2    Terminology ...............................................    3\n
    \  3    Overview of Operation .....................................    3\n   4
    \   Determining Support for this Extension ....................    3\n   5    UPDATE
    Handling ...........................................    4\n   5.1  Sending an
    UPDATE .........................................    4\n   5.2  Receiving an UPDATE
    .......................................    5\n   5.3  Processing the UPDATE Response
    ............................    6\n   6    Proxy Behavior ............................................
    \   7\n   7    Definition of the UPDATE method ...........................    7\n
    \  8    Example Call Flow .........................................    7\n   9
    \   Security Considerations ...................................   11\n   10   IANA
    Considerations .......................................   11\n   11   Notice Regarding
    Intellectual Property Rights .............   11\n   12   Normative References
    ......................................   11\n   13   Acknowledgements ..........................................
    \  12\n   14   Author's Address ..........................................   12\n
    \  15   Full Copyright Statement ..................................   13\n"
  title: Table of Contents
- contents:
  - "1 Introduction\n   The Session Initiation Protocol (SIP) [1] defines the INVITE
    method\n   for the initiation and modification of sessions.  However, this\n   method
    actually affects two important pieces of state.  It impacts\n   the session (the
    media streams SIP sets up) and also the dialog (the\n   state that SIP itself
    defines).  While this is reasonable in many\n   cases, there are important scenarios
    in which this coupling causes\n   complications.\n   The primary difficulty is
    when aspects of the session need to be\n   modified before the initial INVITE
    has been answered.  An example of\n   this situation is \"early media\", a condition
    where the session is\n   established, for the purpose of conveying progress of
    the call, but\n   before the INVITE itself is accepted.  It is important that
    either\n   caller or callee be able to modify the characteristics of that\n   session
    (putting the early media on hold, for example), before the\n   call is answered.
    \ However, a re-INVITE cannot be used for this\n   purpose, because the re-INVITE
    has an impact on the state of the\n   dialog, in addition to the session.\n   As
    a result, a solution is needed that allows the caller or callee to\n   provide
    updated session information before a final response to the\n   initial INVITE
    request is generated.  The UPDATE method, defined\n   here, fulfills that need.
    \ It can be sent by a UA within a dialog\n   (early or confirmed) to update session
    parameters without impacting\n   the dialog state itself.\n"
  title: 1 Introduction
- contents:
  - "2 Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"REQUIRED\",\n
    \  \"SHALL\", \"SHALL NOT\", \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",\n
    \  and \"OPTIONAL\" are to be interpreted as described in BCP 14, RFC 2119\n   [2]
    and indicate requirement levels for compliant SIP\n   implementations.\n"
  title: 2 Terminology
- contents:
  - "3 Overview of Operation\n   Operation of this extension is straightforward.  The
    caller begins\n   with an INVITE transaction, which proceeds normally.  Once a
    dialog\n   is established, either early or confirmed, the caller can generate
    an\n   UPDATE method that contains an SDP offer [3] for the purposes of\n   updating
    the session.  The response to the UPDATE method contains the\n   answer.  Similarly,
    once a dialog is established, the callee can send\n   an UPDATE with an offer,
    and the caller places its answer in the 2xx\n   to the UPDATE.  The Allow header
    field is used to indicate support\n   for the UPDATE method.  There are additional
    constraints on when\n   UPDATE can be used, based on the restrictions of the offer/answer\n
    \  model.\n"
  title: 3 Overview of Operation
- contents:
  - "4 Determining Support for this Extension\n   The initiation of a session operates
    as specified in RFC 3261 [1].\n   However, a UAC compliant to this specification
    SHOULD also include an\n   Allow header field in the INVITE request, listing the
    method UPDATE,\n   to indicate its ability to receive an UPDATE request.\n   When
    a UAS compliant to this specification receives an INVITE request\n   for a new
    dialog, and generates a reliable provisional response\n   containing SDP, that
    response SHOULD contain an Allow header field\n   that lists the UPDATE method.
    \ This informs the caller that the\n   callee is capable of receiving an UPDATE
    request at any time.  An\n   unreliable provisional response MAY contain an Allow
    header field\n   listing the UPDATE method, and a 2xx response SHOULD contain
    an Allow\n   header field listing the UPDATE method.\n   Responses are processed
    normally as per RFC 3261 [1], and in the case\n   of reliable provisional responses,
    according to [4].  It is important\n   to note that a reliable provisional response
    will always create an\n   early dialog at the UAC.  Creation of this dialog is
    necessary in\n   order to receive UPDATE requests from the callee.\n   If the
    response contains an Allow header field containing the value\n   \"UPDATE\", the
    UAC knows that the callee supports UPDATE, and the UAC\n   is allowed to follow
    the procedures of Section 5.1.\n"
  title: 4 Determining Support for this Extension
- contents:
  - '5 UPDATE Handling

    '
  - contents:
    - "5.1 Sending an UPDATE\n   The UPDATE request is constructed as would any other
      request within\n   an existing dialog, as described in Section 12.2.1 of RFC
      3261.  It\n   MAY be sent for both early and confirmed dialogs, and MAY be sent
      by\n   either caller or callee.  Although UPDATE can be used on confirmed\n
      \  dialogs, it is RECOMMENDED that a re-INVITE be used instead.  This is\n   because
      an UPDATE needs to be answered immediately, ruling out the\n   possibility of
      user approval.  Such approval will frequently be\n   needed, and is possible
      with a re-INVITE.\n   The UAC MAY add optional headers for the UPDATE request,
      as defined\n   in Tables 1 and 2.\n   UPDATE is a target refresh request. As
      specified in RFC 3261 [1],\n   this means that it can update the remote target
      of a dialog. If a UA\n   uses an UPDATE request or response to modify the remote
      target while\n   an INVITE transaction is in progress, and it is a UAS for that
      INVITE\n   transaction, it MUST place the same value into the Contact header\n
      \  field of the 2xx to the INVITE that it placed into the UPDATE request\n   or
      response.\n   The rules for inclusion of offers and answers in SIP messages
      as\n   defined in Section 13.2.1 of RFC 3261 still apply.  These rules exist\n
      \  to guarantee a consistent view of the session state.  This means\n   that,
      for the caller:\n      o  If the UPDATE is being sent before completion of the
      initial\n         INVITE transaction, and the initial INVITE contained an offer,\n
      \        the UPDATE can contain an offer if the callee generated an\n         answer
      in a reliable provisional response, and the caller has\n         received answers
      to any other offers it sent in either PRACK or\n         UPDATE, and has generated
      answers for any offers it received in\n         an UPDATE from the callee.\n
      \     o  If the UPDATE is being sent before completion of the initial\n         INVITE
      transaction, and the initial INVITE did not contain an\n         offer, the
      UPDATE can contain an offer if the callee generated\n         an offer in a
      reliable provisional response, and the UAC\n         generated an answer in
      the corresponding PRACK.  Of course, it\n         can't send an UPDATE if it
      has not received answers to any\n         other offers it sent in either PRACK
      or UPDATE, or has not\n         generated answers for any other offers it received
      in an UPDATE\n         from the callee.\n      o  If the UPDATE is being sent
      after the completion of the initial\n         INVITE transaction, it cannot
      contain an offer if the caller\n         has generated or received offers in
      a re-INVITE or UPDATE which\n         have not been answered.\n   and for the
      callee:\n      o  If the UPDATE is being sent before the completion of the INVITE\n
      \        transaction, and the initial INVITE contained an offer, the\n         UPDATE
      cannot be sent with an offer unless the callee has\n         generated an answer
      in a reliable provisional response, has\n         received a PRACK for that
      reliable provisional response, has\n         not received any requests (PRACK
      or UPDATE) with offers that it\n         has not answered, and has not sent
      any UPDATE requests\n         containing offers that have not been answered.\n
      \     o  If the UPDATE is being sent before completion of the INVITE\n         transaction,
      and the initial INVITE did not contain an offer,\n         the UPDATE cannot
      be sent with an offer unless the callee has\n         sent an offer in a reliable
      provisional response, received an\n         answer in a PRACK, and has not received
      any UPDATE requests\n         with offers that it has not answered, and has
      not sent any\n         UPDATE requests containing offers that have not been
      answered.\n      o  If the UPDATE is being sent after the completion of the
      initial\n         INVITE transaction, it cannot be sent with an offer if the\n
      \        callee has generated or received offers in a re-INVITE or\n         UPDATE
      which have not been answered.\n"
    title: 5.1 Sending an UPDATE
  - contents:
    - "5.2 Receiving an UPDATE\n   The UPDATE is processed as any other mid-dialog
      target refresh\n   request, as described in Section 12.2.2 of RFC 3261 [1].
      \ If the\n   request is generally acceptable, processing continues as described\n
      \  below.  This processing is nearly identical to that of Section 14.2\n   of
      RFC 3261 [1], but generalized for the case of UPDATE.\n   A UAS that receives
      an UPDATE before it has generated a final\n   response to a previous UPDATE
      on the same dialog MUST return a 500\n   response to the new UPDATE, and MUST
      include a Retry-After header\n   field with a randomly chosen value between
      0 and 10 seconds.\n   If an UPDATE is received that contains an offer, and the
      UAS has\n   generated an offer (in an UPDATE, PRACK or INVITE) to which it has\n
      \  not yet received an answer, the UAS MUST reject the UPDATE with a 491\n   response.
      \ Similarly, if an UPDATE is received that contains an\n   offer, and the UAS
      has received an offer (in an UPDATE, PRACK, or\n   INVITE) to which it has not
      yet generated an answer, the UAS MUST\n   reject the UPDATE with a 500 response,
      and MUST include a Retry-After\n   header field with a randomly chosen value
      between 0 and 10 seconds.\n   If a UA receives an UPDATE for an existing dialog,
      it MUST check any\n   version identifiers in the session description or, if
      there are no\n   version identifiers, the content of the session description
      to see if\n   it has changed.  If the session description has changed, the UAS
      MUST\n   adjust the session parameters accordingly and generate an answer in\n
      \  the 2xx response.  However, unlike a re-INVITE, the UPDATE MUST be\n   responded
      to promptly, and therefore the user cannot generally be\n   prompted to approve
      the session changes.  If the UAS cannot change\n   the session parameters without
      prompting the user, it SHOULD reject\n   the request with a 504 response.  If
      the new session description is\n   not acceptable, the UAS can reject it by
      returning a 488 (Not\n   Acceptable Here) response for the UPDATE.  This response
      SHOULD\n   include a Warning header field.\n"
    title: 5.2 Receiving an UPDATE
  - contents:
    - "5.3 Processing the UPDATE Response\n   Processing of the UPDATE response at
      the UAC follows the rules in\n   Section 12.2.1.2 of RFC 3261 [1] for a target
      refresh request.  Once\n   that processing is complete, it continues as specified
      below.  This\n   processing is nearly identical to the processing of Section
      14.1 of\n   RFC 3261 [1], but generalized for UPDATE.\n   If a UA receives a
      non-2xx final response to a UPDATE, the session\n   parameters MUST remain unchanged,
      as if no UPDATE had been issued.\n   Note that, as stated in Section 12.2.1
      of RFC 3261 [1], if the non-\n   2xx final response is a 481 (Call/Transaction
      Does Not Exist), or a\n   408 (Request Timeout), or no response at all is received
      for the\n   UPDATE (that is, a timeout is returned by the UPDATE client\n   transaction),
      the UAC will terminate the dialog.\n   If a UAC receives a 491 response to a
      UPDATE, it SHOULD start a timer\n   with a value T chosen as follows:\n      1.
      If the UAC is the owner of the Call-ID of the dialog ID\n         (meaning it
      generated the value), T has a randomly chosen value\n         between 2.1 and
      4 seconds in units of 10 ms.\n      2. If the UAC is not the owner of the Call-ID
      of the dialog ID, T\n         has a randomly chosen value between 0 and 2 seconds
      in units of\n         10 ms.\n   When the timer fires, the UAC SHOULD attempt
      the UPDATE once more, if\n   it still desires for that session modification
      to take place.  For\n   example, if the call was already hung up with a BYE,
      the UPDATE would\n   not take place.\n"
    title: 5.3 Processing the UPDATE Response
  title: 5 UPDATE Handling
- contents:
  - "6 Proxy Behavior\n   Proxy processing of the UPDATE request is identical to any
    other\n   non-INVITE request.\n"
  title: 6 Proxy Behavior
- contents:
  - "7 Definition of the UPDATE method\n   The semantics of the UPDATE method are
    described in detail above.\n   This extension adds another value to the Method
    BNF described in RFC\n   3261:\n         UPDATEm  =  %x55.50.44.41.54.45 ; UPDATE
    in caps\n         Method   =  INVITEm / ACKm / OPTIONSm / BYEm\n                     /
    CANCELm / REGISTERm / UPDATEm\n                     / extension-method\n   Table
    1 extends Table 2 of RFC 3261 for the UPDATE method.\n   Table 2 updates Table
    3 of RFC 3261 for the UPDATE method.\n"
  title: 7 Definition of the UPDATE method
- contents:
  - "8 Example Call Flow\n   This section presents an example call flow using the
    UPDATE method.\n   The flow is shown in Figure 1.  The caller sends an initial
    INVITE\n   (1) which contains an offer.  The callee generates a 180 response (2)\n
    \  with an answer to that offer.  With the completion of an offer/answer\n   exchange,
    the session is established, although the dialog is still in\n   the early state.
    \ The caller generates a PRACK (3) to acknowledge the\n   180, and the PRACK is
    answered with a 200 OK (4).  The caller decides\n   to update some aspect of the
    session - to put it on hold, for\n   example.  So, they generate an UPDATE request
    (5) with a new offer.\n   This offer is answered in the 200 response to the UPDATE
    (6).\n   Shortly thereafter, the callee decides to update some aspect of the\n
    \  session, so it generates an UPDATE request (7) with an offer, and the\n   answer
    is sent in the 200 response (8).  Finally, the callee answers\n   the call, resulting
    in a 200 OK response to the INVITE (9), and then\n   an ACK (10).  Neither the
    200 OK to the INVITE, nor the ACK, will\n   contain SDP.\n               Header
    field          where   proxy  UPDATE\n               ____________________________________________\n
    \              Accept                  R              o\n               Accept
    \                2xx             o\n               Accept                 415
    \            c\n               Accept-Encoding         R              o\n               Accept-Encoding
    \       2xx             o\n               Accept-Encoding        415             c\n
    \              Accept-Language         R              o\n               Accept-Language
    \       2xx             o\n               Accept-Language        415             c\n
    \              Alert-Info                             -\n               Allow
    \                  R              o\n               Allow                  2xx
    \            o\n               Allow                   r              o\n               Allow
    \                 405             m\n               Allow-Events           (1)
    \            -\n               Authentication-Info    2xx             o\n               Authorization
    \          R              o\n               Call-ID                 c       r
    \     m\n               Call-Info                      ar      o\n               Contact
    \                R              m\n               Contact                1xx             o\n
    \              Contact                2xx             m\n               Contact
    \               3xx      d      o\n               Contact                485             o\n
    \              Content-Disposition                    o\n               Content-Encoding
    \                      o\n               Content-Language                       o\n
    \              Content-Length                 ar      t\n               Content-Type
    \                          *\n               CSeq                    c       r
    \     m\n               Date                            a      o\n               Error-Info
    \          300-699    a      o\n               Event                  (1)             -\n
    \              Expires                                -\n               From                    c
    \      r      m\n               In-Reply-To                            -\n               Max-Forwards
    \           R      amr     m\n               Min-Expires                            -\n
    \              MIME-Version                           o\n               Organization
    \                  ar      o\n   Table 1: Summary of header fields, A--O ; (1)
    defined in [5].\n           Header field              where       proxy  UPDATE\n
    \          ____________________________________________________\n           Priority
    \                                      -\n           Proxy-Authenticate         407
    \        ar      m\n           Proxy-Authenticate         401         ar      o\n
    \          Proxy-Authorization         R          dr      o\n           Proxy-Require
    \              R          ar      o\n           RAck                        R
    \                 -\n           Record-Route                R          ar      o\n
    \          Record-Route             2xx,18x       mr      o\n           Reply-To
    \                                      -\n           Require                                ar
    \     c\n           Retry-After          404,413,480,486           o\n                                    500,503
    \              o\n                                    600,603               o\n
    \          Route                       R          adr     c\n           RSeq                        -
    \                 -\n           Server                      r                  o\n
    \          Subject                     -                  -\n           Subscription-State
    \        (1)                 -\n           Supported                   R                  o\n
    \          Supported                  2xx                 o\n           Timestamp
    \                                     o\n           To                          c
    \          r      m\n           Unsupported                420                 m\n
    \          User-Agent                                     o\n           Via                         R
    \         amr     m\n           Via                        rc          dr      m\n
    \          Warning                     r                  o\n           WWW-Authenticate
    \          401         ar      m\n           WWW-Authenticate           407         ar
    \     o\n   Table 2: Summary of header fields, P--Z.\n                Caller                        Callee\n
    \                  |                             |\n                   |                             |\n
    \                  |(1) INVITE with offer 1      |\n                   |---------------------------->|\n
    \                  |                             |\n                   |                             |\n
    \                  |(2) 180 with answer 1        |\n                   |<----------------------------|\n
    \                  |                             |\n                   |                             |\n
    \                  |(3) PRACK                    |\n                   |---------------------------->|\n
    \                  |                             |\n                   |                             |\n
    \                  |(4) 200 PRACK                |\n                   |<----------------------------|\n
    \                  |                             |\n                   |                             |\n
    \                  |(5) UPDATE with offer 2      |\n                   |---------------------------->|\n
    \                  |                             |\n                   |                             |\n
    \                  |(6) 200 UPDATE with answer 2 |\n                   |<----------------------------|\n
    \                  |                             |\n                   |                             |\n
    \                  |(7) UPDATE with offer 3      |\n                   |<----------------------------|\n
    \                  |                             |\n                   |                             |\n
    \                  |(8) 200 UPDATE with answer 3 |\n                   |---------------------------->|\n
    \                  |                             |\n                   |                             |\n
    \                  |(9) 200 INVITE               |\n                   |<----------------------------|\n
    \                  |                             |\n                   |                             |\n
    \                  |(10) ACK                     |\n                   |---------------------------->|\n
    \                  |                             |\n                   |                             |\n
    \                  |                             |\n                   |                             |\n
    \                    Figure 1: UPDATE Call Flow\n"
  title: 8 Example Call Flow
- contents:
  - "9 Security Considerations\n   The security considerations for UPDATE are identical
    to those for\n   re-INVITE.  It is important that the UPDATE be integrity protected\n
    \  and authenticated as coming from the same source as the entity on the\n   other
    end of the dialog.  RFC 3261 [1] discusses security mechanisms\n   for achieving
    these functions.\n"
  title: 9 Security Considerations
- contents:
  - "10 IANA Considerations\n   As per Section 27.4 of RFC 3261 [1], this specification
    serves as a\n   registration for the SIP UPDATE request method.  The information
    to\n   be added to the registry is:\n      RFC 3311: This specification serves
    as the RFC for registering\n                the UPDATE request method.\n      Method
    Name: UPDATE\n      Reason Phrase: Not applicable.\n"
  title: 10 IANA Considerations
- contents:
  - "11 Notice Regarding Intellectual Property Rights\n      The IETF has been notified
    of intellectual property rights claimed\n      in regard to some or all of the
    specification contained in this\n      document.  For more information consult
    the online list of claimed\n      rights.\n"
  title: 11 Notice Regarding Intellectual Property Rights
- contents:
  - "12 Normative References\n   [1] Rosenberg, J., Schulzrinne, H., Camarillo, G.,
    Johnston, A.,\n       Peterson, J., Sparks, R., Handley, M. and E. Schooler, \"SIP:\n
    \      Session Initiation Protocol\", RFC 3261, June 2002.\n   [2] Bradner, S.,
    \"Key words for use in RFCs to Indicate Requirement\n       Levels\", BCP 14,
    RFC 2119, March 1997.\n   [3] Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer
    Model with the\n       Session Description Protocol (SDP)\", RFC 3264, June 2002.\n
    \  [4] Rosenberg, J. and H. Schulzrinne, \"Reliability of Provisional\n       Responses
    in the Session Initiation Protocol (SIP)\", RFC 3262,\n       June 2002.\n   [5]
    Roach, A.B., \"Session Initiation Protocol (SIP)-Specific Event\n       Notification\",
    RFC 3265, June 2002.\n"
  title: 12 Normative References
- contents:
  - "13 Acknowledgements\n   The author would like to thank Jo Hornsby, Markus Isomaki,
    Rohan\n   Mahy, and Bob Penfield for their comments.\n"
  title: 13 Acknowledgements
- contents:
  - "14 Author's Address\n   Jonathan Rosenberg\n   dynamicsoft\n   72 Eagle Rock
    Avenue\n   First Floor\n   East Hanover, NJ 07936\n   EMail: jdrosen@dynamicsoft.com\n"
  title: 14 Author's Address
- contents:
  - "15 Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: 15 Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
