- title: __initial_text__
  contents:
  - '                IP over InfiniBand (IPoIB) Architecture

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   InfiniBand is a high-speed, channel-based interconnect between\n\
    \   systems and devices.\n   This document presents an overview of the InfiniBand\
    \ architecture.\n   It further describes the requirements and guidelines for the\n\
    \   transmission of IP over InfiniBand.  Discussions in this document are\n  \
    \ applicable to both IPv4 and IPv6 unless explicitly specified.  The\n   encapsulation\
    \ of IP over InfiniBand and the mechanism for IP address\n   resolution on IB\
    \ fabrics are covered in other documents.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n      3.2. Multicast Support .........................................13\n\
    \           3.2.1. Mapping IP Multicast to IB Multicast ...............14\n  \
    \         3.2.2. Transient Flag in IB MGIDs .........................14\n    \
    \  3.3. IP Subnets Across IB Subnets ..............................14\n   4. IP\
    \ Subnets in InfiniBand Fabrics ...............................14\n      4.1.\
    \ IPoIB VLANs ...............................................16\n      4.2. Multicast\
    \ in IPoIB subnets ................................16\n           4.2.1. Sending\
    \ IP Multicast Datagrams .....................17\n           4.2.2. Receiving\
    \ Multicast Packets ........................18\n           4.2.3. Router Considerations\
    \ for IPoIB ....................18\n           4.2.4. Impact of InfiniBand Architecture\
    \ Limits ...........19\n           4.2.5. Leaving/Deleting a Multicast Group .................19\n\
    \      4.3. Transmission of IPoIB Packets .............................20\n  \
    \    4.4. Reverse Address Resolution Protocol (RARP) and\n           Static ARP\
    \ Entries ........................................20\n      4.5. DHCPv4 and IPoIB\
    \ ..........................................21\n   5. QoS and Related Issues .........................................21\n\
    \   6. Security Considerations ........................................21\n  \
    \ 7. Acknowledgements ...............................................21\n   8.\
    \ References .....................................................21\n      8.1.\
    \ Normative References ......................................21\n      8.2. Informative\
    \ References ....................................22\n"
- title: 1.  Introduction to InfiniBand
  contents:
  - "1.  Introduction to InfiniBand\n   The InfiniBand Trade Association (IBTA) was\
    \ formed to develop an I/O\n   specification to deliver a channel based, switched\
    \ fabric technology.\n   The InfiniBand standard is aimed at meeting the requirements\
    \ of\n   scalability, reliability, availability, and performance of servers in\n\
    \   data centers.\n"
- title: 1.1.  InfiniBand Architecture Specification
  contents:
  - "1.1.  InfiniBand Architecture Specification\n   The InfiniBand Trade Association\
    \ specification is available for\n   download from http://www.infinibandta.org.\n"
- title: 1.2.  Overview of InfiniBand Architecture
  contents:
  - "1.2.  Overview of InfiniBand Architecture\n   For a more complete overview, the\
    \ reader is referred to chapter 3 of\n   the InfiniBand specification.\n   InfiniBand\
    \ Architecture (IBA) defines a System Area Network (SAN) for\n   connecting multiple\
    \ independent processor platforms, I/O platforms,\n   and I/O devices.  The IBA\
    \ SAN is a communications and management\n   infrastructure supporting both I/O\
    \ and inter-processor communications\n   for one or more computer systems.\n \
    \  An IBA SAN consists of processor nodes and I/O units connected\n   through\
    \ an IBA fabric made up of cascaded switches and IB routers\n   (connecting IB\
    \ subnets).  I/O units can range in complexity from a\n   single Application-specific\
    \ Integrated Circuit (ASIC) IBA-attached\n   device (such as a LAN adapter) to\
    \ a large, memory-rich Redundant\n   Array of Independent Disks (RAID) subsystem.\n\
    \   An IBA network may be subdivided into subnets interconnected by\n   routers.\
    \  These are IB routers and IB subnets and not IP routers or\n   IP subnets. \
    \ This document will refer to InfiniBand routers and\n   subnets as 'IB routers'\
    \ and 'IB subnets' respectively.  The IP\n   routers and IP subnets will be referred\
    \ to as 'routers' and\n   'subnets', respectively.\n   Each IB node or switch\
    \ may attach to a single or multiple switches or\n   directly with each other.\
    \  Each IB unit interfaces with the link by\n   way of channel adapters (CAs).\
    \  The architecture supports multiple\n   CAs per unit with each CA providing\
    \ one or more ports that connect to\n   the fabric.  Each CA appears as a node\
    \ to the fabric.\n   The ports are the endpoints to which the data is sent.  However,\
    \ each\n   of the ports may include multiple QPs (Queue Pairs) that may be\n \
    \  directly addressed from a remote peer.  From the point of view of\n   data\
    \ transfer the QP number (QPN) is part of the address.\n   IBA supports both connection-oriented\
    \ and datagram service between\n   the ports.  The peers are identified by QPN\
    \ and the port identifier.\n   There are a two exceptions.  QPNs are not used\
    \ when packets are\n   multicast.  QPNs are also not used in the Raw Datagram\
    \ mode.\n   A port, in a data packet, is identified by a Local Identifier (LID)\n\
    \   and optionally a Global Identifier (GID).  The GID in the packet is\n   needed\
    \ only when communicating across an IB subnet, though it may\n   always be included.\n\
    \   The GID is 128 bits long and is formed by the concatenation of a 64-\n   bit\
    \ IB subnet prefix and a 64-bit EUI-64-compliant portion.  The\n   EUI-64 portion\
    \ of a GID is referred to as the Global Unique\n   Identifier (GUID; EUI stands\
    \ for Extended Unique Identifier).  The\n   LID is a 16-bit value that is assigned\
    \ when the port becomes active.\n   The GUID is the only persistent identifier\
    \ of a port.  However, it\n   cannot be used as an address in a packet.  If the\
    \ prefix is modified,\n   then the GID may change.  The subnet manager may attempt\
    \ to keep the\n   LID values constant across reboots, but that is not a requirement.\n\
    \   The assignment of the GID and the LID is done by the subnet manager.\n   Every\
    \ IB subnet has at least one subnet manager component that\n   controls the fabric.\
    \  It assigns the LIDs and GIDs.  The subnet\n   manager also programs the switches\
    \ so that they route packets between\n   destinations.  The subnet manager (SM)\
    \ and a related component, the\n   subnet administrator (SA), are the central\
    \ repository of all\n   information that is required to set-up and bring up the\
    \ fabric.\n   IB routers are components that route packets between IB subnets\
    \ based\n   on the GIDs.  Thus, within an IB subnet a packet may or may not\n\
    \   include a GID but when going across an IB subnet the GID must be\n   included.\
    \  A LID is always needed in a packet since the destination\n   within a subnet\
    \ is determined by it.\n   A CA and a switch may have multiple ports.  Each CA\
    \ port is assigned\n   its own LID or a range of LIDs.  The ports of a switch\
    \ are not\n   addressable by LIDs/GIDs or, in other words, are transparent to\
    \ other\n   end nodes.  Each port has its own set of buffers.  The buffering is\n\
    \   channeled through virtual lanes (VL) where each VL has its own flow\n   control.\
    \  There may be up to 16 VLs.\n   VLs provide a mechanism for creating multiple\
    \ virtual links within a\n   single physical link.  All ports must support VL15\
    \ which is reserved\n   exclusively for subnet management datagrams and hence\
    \ does not\n   concern the IP over Infiniband (IPoIB) discussions.  The actual\
    \ VL\n   that a packet uses is configured by the SM in the switch/channel\n  \
    \ adapter tables and is determined based on the Service Level (SL)\n   specified\
    \ in every packet.  There are 16 possible SLs.\n   In addition to the features\
    \ described above viz.  QPs, SLs, and\n   addressing (GID/LID), IBA also defines\
    \ the following:\n   Partitioning:\n      Every packet, but for the raw datagrams,\
    \ carries the partition key\n      (P_Key).  These values are used for isolation\
    \ in the fabric.  A\n      switch (this is an optional feature) may be programmed\
    \ by the SM\n      to drop packets not having a certain key.  The CA ports always\n\
    \      check for the P_Keys.  A CA port may belong to multiple\n      partitions.\
    \  P_Key checking is optional at IB routers.\n      A P_Key may be described as\
    \ having 'limited membership' or 'full\n      membership'.  For a packet to be\
    \ accepted, at least one of the\n      P_Keys (i.e., the P_Key in the packet or\
    \ the P_Key in the port)\n      must be 'full membership' P_Keys.\n   Q_Keys:\n\
    \      Q_Keys are used to enforce access rights for reliable and\n      unreliable\
    \ IB datagram services.  Raw datagram services do not use\n      Q_Keys.  At communication\
    \ establishment, the endpoints exchange\n      the Q_Keys and must always use\
    \ the relevant Q_Keys when\n      communicating with one another.  Multicast packets\
    \ use the Q_Key\n      associated with the multicast group.\n      Q_Keys with\
    \ the most significant bit set are considered controlled\n      Q_Keys (such as\
    \ the General Service Interface (GSI) Q_Key\n      [IB_ARCH]) and a Host Channel\
    \ Adapter (HCA) does not allow a\n      consumer to arbitrarily specify a controlled\
    \ Q_Key.  An attempt to\n      send a controlled Q_Key results in using the Q_Key\
    \ in the QP\n      context.  Thus, the Operating System maintains control since\
    \ it\n      can configure the QP context for the controlled Q_Key for\n      privileged\
    \ consumers.  It must be noted that though the notion of\n      a 'controlled\
    \ Q_Key' is suggested by IB specification, it does not\n      require its use\
    \ or implementation.\n   Multicast support:\n      A switch may support multicasting,\
    \ that is, replication of packets\n      across multiple output ports.  This is\
    \ an optional feature.\n      Similarly, support for sending/receiving multicast\
    \ packets is\n      optional in CAs.  A multicast group is identified by a GID.\
    \  The\n      GID format is as defined in RFC 2373 on IPv6 addressing [IB_ARCH].\n\
    \      Thus, from an IPv6-over-InfiniBand point of view, the data link\n     \
    \ multicast address looks like the network address.  An IB port must\n      explicitly\
    \ join a multicast group by sending a request to the SM\n      to receive multicast\
    \ packets.  A port may send packets to any\n      multicast group.  In both cases,\
    \ the multicast LID to be used in\n      the packets is received from the SM.\n\
    \   There are six methods for data transfer in IB architecture:\n      1.  Unreliable\
    \ Datagram (unacknowledged - connectionless)\n         The Unreliable Datagram\
    \ (UD) service is connectionless and\n         unacknowledged.  It allows the\
    \ QP to communicate with any\n         unreliable datagram QP on any node.\n \
    \        The switches and hence each link can support only a certain\n       \
    \  MTU.  The MTU ranges are 256 octets, 512 octets, 1024 octets,\n         2048\
    \ octets, and 4096 octets.  A UD packet cannot be larger\n         than the link\
    \ MTU between the two peers.\n      2.  Reliable Datagram    (acknowledged - multiplexed)\n\
    \         The Reliable Datagram (RD) service is multiplexed over\n         connections\
    \ between nodes called End-to-End Contexts (EEC),\n         which allows each\
    \ RD QP to communicate with any RD QP on any\n         node with an established\
    \ EEC.  Multiple QPs can use the same\n         EEC and a single QP can use multiple\
    \ EECs (one for each remote\n         node per reliable datagram domain).\n  \
    \    3.  Reliable Connected (acknowledged - connection oriented)\n         The\
    \ Reliable Connected (RC) service associates a local QP with\n         one and\
    \ only one remote QP.  The message sizes maybe as large\n         as 2^31 octets\
    \ in length.  The CA implementation takes care of\n         segmentation and assembly.\n\
    \      4.  Unreliable Connected (unacknowledged - connection oriented)\n     \
    \    The Unreliable Connected (UC) service associates one local QP\n         with\
    \ one and only one remote QP.  There is no acknowledgement\n         and hence\
    \ no resend of lost or corrupted packets.  Such packets\n         are therefore\
    \ simply dropped.  It is similar to RC otherwise.\n      5.  Raw Ethertype (unacknowledged\
    \ - connectionless)\n         The Ethertype raw datagram packet contains a generic\
    \ transport\n         header that is not interpreted by the CA but it specifies\
    \ the\n         protocol type.  The values for ethertype are the same as\n   \
    \      defined by Internet Assigned Numbers Authority (IANA) [IANA]\n        \
    \ for ethertype.\n      6.  Raw IPv6 (unacknowledged - connectionless)\n     \
    \    Using IPv6 raw datagram service, the IBA CA can support\n         standard\
    \ protocol layers atop IPv6 (such as TCP/UDP).  Thus,\n         native IPv6 packets\
    \ can be bridged into the IBA SAN and\n         delivered directly to a port and\
    \ to its IPv6 raw datagram QP.\n   The first four types are referred to as IB\
    \ transports.  The latter\n   two are classified as raw datagrams.  There is no\
    \ indication of the\n   QP number in the raw datagram packets.  The raw datagram\
    \ packets are\n   limited by the link MTU in size.\n   The two connected modes\
    \ and the Reliable Datagram mode may also\n   support Automatic Path Migration\
    \ (APM).  This is an optional facility\n   that provides for a hardware based\
    \ path fail over.  An alternate path\n   is associated with the QP when the connection/EE\
    \ context is first\n   created.  If unrecoverable errors are encountered, the\
    \ connection\n   switches to using the alternative path.\n"
- title: 1.2.1.  InfiniBand Addresses
  contents:
  - "1.2.1.  InfiniBand Addresses\n   The InfiniBand architecture borrows heavily\
    \ from the IPv6\n   architecture in terms of the InfiniBand subnet structure and\
    \ GIDs.\n   The InfiniBand architecture defines the GID associated with a port\
    \ as\n   a 128-bit unicast or multicast identifier.  IBA derives the GID\n   address\
    \ format, as defined in RFC 2373 [IB_ARCH], with some\n   additional properties/restrictions\
    \ defined to facilitate efficient\n   discovery, communication, and routing.\n\
    \   Note:  The IBA explicitly refers to RFC 2373, which is obsolete\n      [RFC3513].\
    \  It must be noted that IBA is therefore unaffected by\n      any further changes\
    \ that are introduced in IPv6 addressing\n      architecture.\n   IBA defines\
    \ two types of GIDs: unicast and multicast.\n"
- title: 1.2.1.1.  Unicast GIDs
  contents:
  - "1.2.1.1.  Unicast GIDs\n   The unicast GIDs are defined, as in IPv6, with three\
    \ scopes.  The IB\n   specification states the following:\n   a.  link local:\
    \ FE80/10.\n                   The IB routers will not forward packets with a\
    \ link-\n                   local address in source or destination beyond the\
    \ IB\n                   subnet.\n   b.  site local: FEC0/10\n               \
    \    A unicast GID used within a collection of subnets\n                   that\
    \ is unique within that collection (e.g., a data\n                   center or\
    \ campus) but is not necessarily globally\n                   unique.  IB routers\
    \ must not forward any packets with\n                   either a site-local Source\
    \ GID or a site-local\n                   Destination GID outside of the site.\n\
    \   c.  global:\n                   A unicast GID with a global prefix; an IB\
    \ router may\n                   use this GID to route packets throughout an\n\
    \                   enterprise or internet.\n"
- title: 1.2.1.2.  Multicast GIDs
  contents:
  - "1.2.1.2.  Multicast GIDs\n   The multicast GIDs also parallel the IPv6 multicast\
    \ addresses.  The\n   IB specification defines the multicast GIDs as follows:\n\
    \      FFxy:<112 bits>\n      Flag bits:\n         The nibble, denoted by x above,\
    \ are the 4 flag bits: 000T.\n         The first 3 bits are reserved and are set\
    \ to zero.  The last\n         bit is defined as follows:\n            T=0: denotes\
    \ a permanently assigned, that is, well-known GID\n            T=1: denotes a\
    \ transient group\n      Scope bits:\n         The 4 bits, denoted by y in the\
    \ GID above, are the scope bits.\n         These scope values are described in\
    \ Table 1.\n                 scope value        Address value\n              \
    \   0                        Reserved\n                 1                    \
    \    Unassigned\n                 2                        Link-local\n      \
    \           3                        Unassigned\n                 4          \
    \              Unassigned\n                 5                        Site-local\n\
    \                 6                        Unassigned\n                 7    \
    \                    Unassigned\n                 8                        Organization-local\n\
    \                 9                        Unassigned\n                 0xA  \
    \                    Unassigned\n                 0xB                      Unassigned\n\
    \                 0xC                      Unassigned\n                 0xD  \
    \                    Unassigned\n                 0xE                      Global\n\
    \                 0xF                      Reserved\n                        \
    \ Table 1\n   The IB specification further refers to RFC 2373 and RFC 2375 while\n\
    \   defining the well-known multicast addresses.  However, it then states\n  \
    \ that the well-known addresses apply to IB raw IPv6 datagrams only.\n   It must\
    \ be noted though that a multicast group can be associated with\n   only a single\
    \ Multicast Global Identifier (MGID).  Thus the same MGID\n   cannot be associated\
    \ with the UD mode and the Raw Datagram mode.\n"
- title: 1.3.  InfiniBand Multicast Group Management
  contents:
  - "1.3.  InfiniBand Multicast Group Management\n   IB multicast groups, identified\
    \ by MGIDs, are managed by the SM.  The\n   SM explicitly programs the IB switches\
    \ in the fabric to ensure that\n   the packets are received by all the members\
    \ of the multicast group\n   that request the reception of packets.  The SM also\
    \ needs to program\n   the switches such that packets transmitted to the group\
    \ by any group\n   member reach all receivers in the multicast group.\n   IBA\
    \ distinguishes between multicast senders and receivers.  Though\n   all members\
    \ of a multicast group can transmit to the group (and\n   expect their packets\
    \ to be correctly forwarded), not all members of\n   the group are receivers.\
    \  A port needs to explicitly request that\n   multicast packets addressed to\
    \ the group be forwarded to it.\n   A multicast group is created by sending a\
    \ join request to the SM.  As\n   will be explained later, IBA defines multiple\
    \ modes for joining a\n   multicast group.  The subnet manager records the group's\
    \ multicast\n   GID and the associated characteristics.  The group characteristics\n\
    \   are defined by the group path MTU, whether the group will be used for\n  \
    \ raw datagrams or unreliable datagrams, the service level, the\n   partition\
    \ key associated with the group, the Local Identifier (LID)\n   associated with\
    \ the group, and so on.  These characteristics are\n   defined at the time of\
    \ the group creation.  The interested reader may\n   look up the 'MCMemberRecord'\
    \ attribute in the IB architecture\n   specification [IB_ARCH] for the complete\
    \ list of characteristics that\n   define a group.\n   A LID is associated with\
    \ the multicast group by the SM at the time of\n   the multicast group creation.\
    \  The SM determines the multicast tree\n   based on all the group members and\
    \ programs the relevant switches.\n   The Multicast LID (MLID) is used by the\
    \ switches to route the\n   packets.\n   Any member IB port wanting to participate\
    \ in the multicast group must\n   join the group.  As part of the join operation,\
    \ the node receives the\n   group characteristics from the SM.  At the same time,\
    \ the subnet\n   manager ensures that the requester can indeed participate in\
    \ the\n   group by verifying that it can support the group MTU and its\n   accessibility\
    \ to the rest of the group members.  Other group\n   characteristics may need\
    \ verification too.\n   The SM, for groups that span IB subnet boundaries, must\
    \ interact with\n   IB routers to determine the presence of this group in other\
    \ IB\n   subnets.  If present, the MTU must match across the IB subnets.\n   P_Key\
    \ is another characteristic that must match across IB subnets\n   since the P_Key\
    \ inserted into a packet is not modified by the IB\n   switches or IB routers.\
    \  Thus, if the P_Keys did not match the IB\n   router(s) itself might drop the\
    \ packets or destinations on other\n   subnets might drop the packets.\n   A join\
    \ operation may cause the SM to reprogram the fabric so that the\n   new member\
    \ can participate in the multicast group.  By the same\n   token, a leave may\
    \ cause the SM to reprogram the fabric to stop\n   forwarding the packets to the\
    \ requester.\n"
- title: 1.3.1.  Multicast Member Record
  contents:
  - "1.3.1.  Multicast Member Record\n   The multicast group is maintained by the\
    \ SM with each of the group\n   members represented by an MCMemberRecord [IB_ARCH].\
    \  Some of its\n   components are the following:\n   MGID      - Multicast GID\
    \ for this multicast group\n   PortGID   - Valid GID of the port joining this\
    \ multicast group\n   Q_Key     - Q_Key to be used by this multicast group\n \
    \  MLID      - Multicast LID for this multicast group\n   MTU       - MTU for\
    \ this multicast group\n   P_Key     - Partition key for this multicast group\n\
    \   SL        - Service level for this multicast group\n   Scope     - Same as\
    \ MGID address scope\n   JoinState - Join/Leave status requested by the port:\n\
    \               bit 0: FullMember\n               bit 1: NonMember\n         \
    \      bit 2: SendOnlyNonMember\n"
- title: 1.3.1.1.  JoinState
  contents:
  - "1.3.1.1.  JoinState\n   The JoinState indicates the membership qualities a port\
    \ wishes to add\n   while joining/creating a group or delete when leaving a group.\
    \  The\n   meaning of the JoinState bits are as follows:\n      FullMember:\n\
    \         Messages destined for the group are routed to and from the\n       \
    \  port.  A group may be deleted by the SM if there are no\n         FullMembers\
    \ in the group.\n      NonMember:\n         Messages destined for the group are\
    \ routed to and from the\n         port.  The port is not considered a member\
    \ for purposes of\n         group creation/deletion.\n      SendOnlyNonMember:\n\
    \         Group messages are only routed from the port but not to the\n      \
    \   port.  The port is not considered a member for purposes of\n         group\
    \ creation/deletion.\n   A port may have multiple bits set in its record.  In\
    \ such a case, the\n   membership qualities are a union of the JoinStates.  A\
    \ port may leave\n   the multicast group for each of the JoinStates individually\
    \ or in any\n   combination of JoinState bits [IB_ARCH].\n"
- title: 1.3.2.  Join and Leave Operations
  contents:
  - "1.3.2.  Join and Leave Operations\n   An IB port joins a multicast group by sending\
    \ a join request\n   (SubnAdmSet() method) and leaves a multicast group by sending\
    \ a leave\n   message (SubnAdmDelete() method) to the SM.  The IBA specification\n\
    \   [IB_ARCH] describes the methods and attributes to be used when\n   sending\
    \ these messages.\n"
- title: 1.3.2.1.  Creating a Multicast Group
  contents:
  - "1.3.2.1.  Creating a Multicast Group\n   There is no 'create' command to form\
    \ a new multicast group.  The\n   FullMember bit in the JoinState must be set\
    \ to create a multicast\n   group.  In other words, the first FullMember join\
    \ request will cause\n   the group to be created as a side effect of the join\
    \ request.\n   Subsequent join or leave requests may contain any combination of\
    \ the\n   JoinState bits.\n   The creator of the group specifies the Q_Key, MTU,\
    \ P_Key, SL,\n   FlowLabel, TClass, and the Scope value.  A creator may request\
    \ that a\n   suitable MGID be created for it.  Alternatively, the request can\n\
    \   specify the desired MGID.  In both cases, the MLID is assigned by the\n  \
    \ SM.\n   Thus, a group will be created with the specified values when the\n \
    \  requester sets the FullMember bit and no such group already exists in\n   the\
    \ subnet.\n"
- title: 1.3.2.2.  Deleting a Multicast Group
  contents:
  - "1.3.2.2.  Deleting a Multicast Group\n   When the last FullMember leaves the\
    \ multicast group the SM may delete\n   the multicast group releasing all resources,\
    \ including those that\n   might exist in the fabric itself, associated with the\
    \ group.\n   Note that a special 'delete' message does not exist.  It is a side\n\
    \   effect of the last FullMember 'leave' operation.\n"
- title: 1.3.2.3.  Multicast Group Create/Delete Traps
  contents:
  - "1.3.2.3.  Multicast Group Create/Delete Traps\n   The SA may be requested by\
    \ the ports to generate a report whenever a\n   multicast group is created or\
    \ deleted.  The port can specify the\n   multicast group(s) it is interested in\
    \ by using its MGID or by\n   submitting a wild card request.  The SA will report\
    \ these events\n   using traps 66 (for creates) and 67 (for deletes)[IB_ARCH].\n\
    \   Therefore, a port wishing to join a group but not create it by itself\n  \
    \ may request a create notification or a port might even request a\n   notification\
    \ for all groups that are created (a wild card request).\n   The SA will diligently\
    \ inform them of the creation utilizing the\n   aforementioned traps.  The requester\
    \ can then join the multicast\n   group indicated.  Similarly, a SendOnlyNonMember\
    \ or a NonMember might\n   request the SA to inform it of group deletions.  The\
    \ endnode, on\n   receiving a delete report, can safely release the resources\n\
    \   associated with the group.  The associated MLID is no longer valid\n   for\
    \ the group and may be reassigned to a new multicast group by the\n   SM.\n"
- title: 2.  Management of InfiniBand Subnet
  contents:
  - "2.  Management of InfiniBand Subnet\n   To aid in the monitoring and configuration\
    \ of InfiniBand subnet\n   components, a set of MIB modules needs to be defined.\
    \  MIB modules\n   are needed for the channel adapters, InfiniBand interfaces,\n\
    \   InfiniBand subnet manager, and InfiniBand subnet management agents\n   and\
    \ to allow the management of specific device properties.  It must\n   be noted\
    \ that the management objects addressed in the IPoIB documents\n   are for all\
    \ of the IB subnet components and are not limited to IP\n   (over IB).  The relevant\
    \ MIB modules are described in separate\n   documents and are not covered here.\n"
- title: 3.  IP over IB
  contents:
  - "3.  IP over IB\n   As described in section 1.0, the InfiniBand architecture provides\
    \ a\n   broad set of capabilities to choose from when implementing IP over\n \
    \  InfiniBand networks.\n   The IPoIB specification must not, and does not, require\
    \ changes in IP\n   and higher-layer protocols.  Nor does it mandate requirements\
    \ on IP\n   stacks to implement special user-level programs.  It is an aim of\n\
    \   IPoIB specification that the IPoIB changes be amenable to\n   modularization\
    \ and incorporation into existing implementations at the\n   same level as other\
    \ media types.\n"
- title: 3.1. InfiniBand as Datalink
  contents:
  - "3.1. InfiniBand as Datalink\n   InfiniBand architecture provides multiple methods\
    \ of data exchange\n   between two endpoints as was noted above.  These are the\
    \ following:\n           Reliable Connected (RC)\n           Reliable Datagram\
    \  (RD)\n           Unreliable Connected (UC)\n           Unreliable Datagram\
    \ (UD)\n           Raw Datagram : Raw IPv6 (R6)\n                        : Raw\
    \ Ethertype (RE)\n   IPoIB can be implemented over any, multiple, or all of these\n\
    \   services.  A case can be made for support on any of the transport\n   methods\
    \ depending on the desired features.\n   The IB specification requires Unreliable\
    \ Datagram mode to be\n   supported by all the IB nodes.  The host channel adapters\
    \ (HCAs) are\n   specifically required to support Reliable connected (RC) and\n\
    \   Unreliable connected (UC) modes but the same is not the case with\n   target\
    \ channel adapters (TCAs).  Support for the two Raw Datagram\n   modes is entirely\
    \ optional.  The Raw Datagram mode supports a 16-bit\n   Cyclic Redundancy Check\
    \ (CRC) as compared to the better protection\n   provided by the use of a 32-bit\
    \ CRC in other modes.\n   For the sake of simplicity, ease of implementation and\
    \ integration\n   with existing stacks, it is desirable that the fabric support\n\
    \   multicasting.  This is possible only in Unreliable datagram (UD) and\n   IB's\
    \ Raw datagram modes.\n   Thus, it is only the UD mode that is universal, supports\
    \ multicast,\n   and supports a robust CRC.  Given these conditions it is the\
    \ obvious\n   choice for IP over InfiniBand [RFC4391].\n   Future documents might\
    \ consider the connected modes.  In contrast to\n   the limited link MTU offered\
    \ by UD mode, the connected modes can\n   offer significant benefit in terms of\
    \ performance by utilizing a\n   larger MTU.  Reliability is also enhanced if\
    \ the underlying feature\n   of automatic path migration of connected modes is\
    \ utilized.\n"
- title: 3.2.  Multicast Support
  contents:
  - "3.2.  Multicast Support\n   InfiniBand specification makes support of multicasting\
    \ in the\n   switches optional.  Multicast however, is a basic requirement in\
    \ IP\n   networks.  Therefore, IPoIB requires that multicast-capable\n   InfiniBand\
    \ fabrics be used to implement IPoIB subnets.\n"
- title: 3.2.1.  Mapping IP Multicast to IB Multicast
  contents:
  - "3.2.1.  Mapping IP Multicast to IB Multicast\n   Well-known IP multicast groups\
    \ are defined for both IPv4 and IPv6\n   [IANA, RFC3513].  Multicast groups may\
    \ also be dynamically created at\n   any time.  To avoid creating unnecessary\
    \ duplicates of multicast\n   packets in the fabric, and to avoid unnecessary\
    \ handling of such\n   packets at the hosts, each of the IP multicast groups needs\
    \ to be\n   associated with a different IB multicast group as far as possible.\
    \  A\n   process is defined in [RFC4391] for mapping the IP multicast\n   addresses\
    \ to unique IB multicast addresses.\n"
- title: 3.2.2.  Transient Flag in IB MGIDs
  contents:
  - "3.2.2.  Transient Flag in IB MGIDs\n   The IB specification describes the flag\
    \ bits as discussed in section\n   1.2.  The IB specification also defines some\
    \ well-known IB MGIDs.\n   The MGIDs are reserved for the IB's Raw Datagram mode\
    \ which is\n   incompatible with the other transports of IB.  Any mapping that\
    \ is\n   defined from IP multicast addresses therefore must not fall into IB's\n\
    \   definition of a well-known address.\n   Therefore all IPoIB related multicast\
    \ GIDs always set the transient\n   bit.\n"
- title: 3.3.  IP Subnets Across IB Subnets
  contents:
  - "3.3.  IP Subnets Across IB Subnets\n   Some implementations may wish to support\
    \ multiple clusters of\n   machines in their own IB subnets but otherwise be part\
    \ of a common IP\n   subnet.  For such a solution, the IB specification needs\
    \ multiple\n   upgrades.  Some of the required enhancements are as follows:\n\
    \   1) A method for creating IB multicast GIDs that span multiple IB\n      subnets.\
    \  The partition keys and other parameters need to be\n      consistent across\
    \ IB subnets.\n   2) Develop IB routing protocol to determine the IB topology\
    \ across IB\n      subnets.\n   3) Define the process and protocols needed between\
    \ IB nodes and IB\n      routers.\n   Until the above conditions are met, it is\
    \ not possible to implement\n   IPoIB subnets that span IB subnets.  The IPoIB\
    \ standards have\n   however, been defined with this possibility in mind.\n"
- title: 4.  IP Subnets in InfiniBand Fabrics
  contents:
  - "4.  IP Subnets in InfiniBand Fabrics\n   The IPoIB subnet is overlaid over the\
    \ IB subnet.  The IPoIB subnet is\n   brought up in the following steps:\n   Note:\
    \ the join/leave operation at the IP level will be referred to as\n         IP_join/IP_leave\
    \ and the join/leave operations at the IB level\n         will be referred to\
    \ as IB_join in this document.\n   1.  The all-IPoIB nodes IB multicast group\
    \ is created\n      The fabric administrator creates an IB multicast group (henceforth\n\
    \      called 'broadcast group') when the IP subnet is set up.  The\n      'broadcast\
    \ group' is defined in [RFC4391].  The method by which\n      the broadcast group\
    \ is setup is not defined by IPoIB.  The group\n      may be setup at the SM by\
    \ the administrator or by the first\n      IB_join.\n      As noted earlier, at\
    \ the time of creating an IB multicast group,\n      multiple values such as the\
    \ P_Key, Q_Key, Service Level, Hop\n      Limit, Flow ID, TClass, MTU, etc.  have\
    \ to be specified.  These\n      values should be such that all potential members\
    \ of the IB\n      multicast group are able to communicate with one another when\n\
    \      using them.  In the future, as the IB specification associates\n      more\
    \ meaning with the various parameters and defines IB Quality of\n      Service\
    \ (QoS), different values for IP multicast traffic may be\n      possible.  All\
    \ unicast packets also need to use the P_Key and\n      Q_Key specified in the\
    \ broadcast group [RFC4391].  It is obvious\n      that a thought out configuration\
    \ is required for a successful\n      setup of the IPoIB subnet.\n   2.  All IPoIB\
    \ interfaces IB_join the broadcast group\n      The broadcast group defines the\
    \ span and the members of the IPoIB\n      link.  This link gets built up as IPoIB\
    \ nodes IB_join the\n      broadcast group.\n      The IB_join to the broadcast\
    \ group has the additional benefit of\n      distributing the above mentioned\
    \ multicast group parameters to all\n      the members of the subnet.\n      Note\
    \ that this IB_join to the broadcast group is a FullMember\n      join.  If any\
    \ of the ports or the switches linking the port to the\n      rest of the IPoIB\
    \ subnet cannot support the parameters (e.g., path\n      MTU or P_Key) associated\
    \ with the broadcast group, then the\n      IB_join request will fail and the\
    \ requesting port will not become\n      part of the IPoIB subnet.\n   3.  Configuration\
    \ Parameters\n      As noted above, parameters such as Q_Key and Path MTU, which\
    \ are\n      needed for all IPoIB communication, are returned to the IPoIB node\n\
    \      on IB_joining the 'broadcast group'.  [RFC4391] also notes that\n     \
    \ the parameters used in the broadcast group are used when creating\n      other\
    \ multicast groups.\n      However, the P_Key must still be known to the IPoIB\
    \ endnode before\n      it can join the broadcast group.  The P_Key is included\
    \ in the\n      mapping of the broadcast group [RFC4391].  Another parameter,\
    \ the\n      scope of the broadcast group, also needs to be known to the\n   \
    \   endnode before it can join the broadcast group.  It is an\n      implementation\
    \ choice on how the P_Key and the scope bits related\n      to the IPoIB subnet\
    \ are determined by the implementation.  These\n      could be configuration parameters\
    \ initialized by some means by the\n      administrator.\n      The methods employed\
    \ by an implementation to determine the P_Key\n      and scope bits are not specified\
    \ by IPoIB.\n"
- title: 4.1.  IPoIB VLANs
  contents:
  - "4.1.  IPoIB VLANs\n   The endpoints in an IB subnet must have compatible P_Keys\
    \ to\n   communicate with one another.  Thus, the administrator when setting\n\
    \   up an IP subnet over an IB subnet must ensure that all the members\n   have\
    \ compatible P_Keys.  An IP subnet can have only one P_Key\n   associated with\
    \ it to ensure that all IP nodes in it can talk to one\n   another.  An endpoint\
    \ may, however, have multiple P_Keys.\n   The IB architecture specifies that there\
    \ can be only one MGID\n   associated with a multicast group in the IB subnet.\
    \  The P_Key is\n   included in the MGID mappings from the IP multicast addresses\n\
    \   [RFC4391].  Since the P_Key is unique in the IB subnet, the inclusion\n  \
    \ of the P_Key in the IB MGIDs ensures that unique MGID mappings are\n   created.\
    \  Every unique broadcast group MGID so formed creates a\n   separate abstract\
    \ IPoIB link and hence an IPoIB VLAN.\n"
- title: 4.2.  Multicast in IPoIB subnets
  contents:
  - "4.2.  Multicast in IPoIB subnets\n   IP multicast on InfiniBand subnets follows\
    \ the same concepts and\n   rules as on any other media.  However, unlike most\
    \ other media\n   multicast over InfiniBand requires interaction with another\
    \ entity,\n   the IB subnet manager.  This section describes the outline of the\n\
    \   process and suggests some guidelines.\n   IB architecture specifies the following\
    \ format for IB multicast\n   packets when used over Unreliable Datagram (UD)\
    \ mode:\n   +--------+-------+---------+---------+-------+---------+---------+\n\
    \   |Local   |Global |Base     |Datagram |Packet |Invariant| Variant |\n   |Routing\
    \ |Routing|Transport|Extended |Payload| CRC     |  CRC    |\n   |Header  |Header\
    \ |Header   |Transport| (IP)  |         |         |\n   |        |       |   \
    \      |Header   |       |         |         |\n   +--------+-------+---------+---------+-------+---------+---------+\n\
    \   For details about the various headers please refer to InfiniBand\n   Architecture\
    \ Specification [IB_ARCH].\n   The Global Routing Header (GRH) includes the IB\
    \ multicast group GID.\n   The Local Routing Header (LRH) includes the Local Identifier\
    \ (LID).\n   The IB switches in the fabric route the packet based on the LID.\n\
    \   The GID is made available to the receiving IB user (the IPoIB\n   interface\
    \ driver for example).  The driver can therefore determine\n   the IB group the\
    \ packet belongs to.\n   IPv4 defines three levels of multicast conformance [RFC1112].\n\
    \      Level 0: No support for IP multicasting\n      Level 1: Support for sending\
    \ but not receiving multicasts\n      Level 2: Full support for IP multicasting\n\
    \   In IPv6, there is no such distinction.  Full multicast support is\n   mandatory.\
    \  In addition, all IPv4 subnets support broadcast\n   (255.255.255.255).  IPv4\
    \ broadcast can always be sent/received by all\n   IPv4 interfaces.\n   Every\
    \ IPoIB subnet requires the broadcast GID to be defined.  Thus, a\n   packet can\
    \ always be broadcast.\n"
- title: 4.2.1.  Sending IP Multicast Datagrams
  contents:
  - "4.2.1.  Sending IP Multicast Datagrams\n   An IP host may send a multicast packet\
    \ at any time to any multicast\n   address.\n   The IP layer conveys the multicast\
    \ packet to the IPoIB interface\n   driver/module.  This module attempts to IB_join\
    \ the relevant IB\n   multicast group.  This is required since otherwise InfiniBand\n\
    \   architecture does not guarantee that the packet will reach its\n   destinations.\n\
    \   A pure sender may choose to join the multicast group as a FullMember.\n  \
    \ In such a case, the sender will receive all the multicast packets\n   transmitted\
    \ to the IB group.  In addition, the IB group will not be\n   deleted until the\
    \ sender leaves the group.\n   Alternatively, a sender might IB_join as a SendOnlyNonMember.\
    \  In\n   such a case, the packets are not routed to the sender though packets\n\
    \   transmitted by it can reach the other group members.  In addition,\n   the\
    \ group can be deleted when all FullMembers have left the group.\n   The sender\
    \ can further request delete updates from the SM.\n   If the sender does not find\
    \ the group in existence, it is recommended\n   in [RFC4391] that the packets\
    \ be sent to the MGID corresponding to\n   the all-IP routers address.  A sender\
    \ could also send the packets to\n   the broadcast group.  The sender might also\
    \ choose to request\n   'creation' reports from the SM.\n"
- title: 4.2.2.  Receiving Multicast Packets
  contents:
  - "4.2.2.  Receiving Multicast Packets\n   The IP host must join the IB multicast\
    \ group corresponding to the IP\n   address.  This follows from the IBA requirement\
    \ that the receiver\n   must join the relevant IB multicast group.  The group\
    \ is\n   automatically created if it does not exist [IB_ARCH].\n   The IP receivers\
    \ must IB_leave the IB group when the IP layer stops\n   listening of the corresponding\
    \ IP address.  The SM can then choose to\n   delete the group.\n"
- title: 4.2.3.  Router Considerations for IPoIB
  contents:
  - "4.2.3.  Router Considerations for IPoIB\n   IP routers know of the new IP groups\
    \ created in the subnet by the use\n   of protocols such as Internet Group Management\
    \ Protocol (IGMPv3) /\n   Multicast Listener Discovery (MLD) [RFC3376, RFC2710].\
    \  However, this\n   is not enough for IPoIB since the router needs to IB_join\
    \ the\n   relevant IB groups to be able to receive and transmit the packets.\n\
    \   There is no promiscuous mode for listening to all packets.\n   The IPoIB routers\
    \ therefore need to request the SM to report all\n   creations of IB groups in\
    \ the fabric.  The IPoIB router can then\n   IB_join the reported group.  It is\
    \ not desirable that the router's\n   IB_joining of a multicast group be considered\
    \ the same as the IB_join\n   from a receiver -- the router's IB_join should not\
    \ disallow the\n   group's deletion when all receivers leave.  To overcome just\
    \ this\n   type of situation, IBA provides the NonMember IB_join mode.\n   The\
    \ NonMember IB_join mode can be used by IP routers when they join\n   in response\
    \ to the create reports.  A router should ideally request\n   the delete reports\
    \ too so that it can release all the resources\n   associated with the group.\
    \  The MLID associated with a deleted MGID\n   can be reassigned by the SM, and\
    \ therefore there is a possibility of\n   erroneous transmissions if the MLID\
    \ is cached.  A router that does\n   not request delete reports will still work\
    \ correctly since it will\n   receive the correct MLID , and purge any old cached\
    \ value, when it\n   IB_joins the IB group in response to a create report.\n \
    \  It is reasonable for a router to IB_join as a FullMember if it is\n   joining\
    \ the IB group in response to an application/routing daemon\n   request.  In such\
    \ a case, the router might end up controlling the\n   existence of the IB group\
    \ (since it is a FullMember of the group).\n"
- title: 4.2.4.  Impact of InfiniBand Architecture Limits
  contents:
  - "4.2.4.  Impact of InfiniBand Architecture Limits\n   An HCA or TCA may have a\
    \ limit on the number of MGIDs it can support.\n   Thus, even though the groups\
    \ may not be limited at the subnet manager\n   and in the subnet as such, they\
    \ may be limited at a particular\n   interface.  It is advisable to choose an\
    \ adequately provisioned\n   HCA/TCA when setting up an IPoIB subnet.\n"
- title: 4.2.5.  Leaving/Deleting a Multicast Group
  contents:
  - "4.2.5.  Leaving/Deleting a Multicast Group\n   An IPv4 sender (level 1 compliance)\
    \ IB_joins the IB multicast group\n   only because that is the only way to guarantee\
    \ reception of the\n   packets by all the group recipients.  The sender must,\
    \ however,\n   IB_leave the group at some time.  A sender could, when not a receiver\n\
    \   on the group, start a timer per multicast group sent to.  The sender\n   leaves\
    \ the IB group when the timer goes off.  It restarts the timer\n   if another\
    \ message is sent.\n   This suggestion does not apply to the IB broadcast group.\
    \  It also\n   does not apply to the IB group corresponding to the all-hosts\n\
    \   multicast group.  An IPv4 host must always remain a member of the\n   broadcast\
    \ group.\n   An IP multicast receiver IB_leaves the corresponding IB multicast\n\
    \   group when it IP_leaves the IP multicast group.  In the case of IPv4\n   implementation,\
    \ the receiver may choose to continue to be a sender\n   (level 1 compliance),\
    \ in which case it may choose not to IB_leave the\n   IB group but start a timer\
    \ as explained above.\n   As noted elsewhere, the SM can choose to free up the\
    \ resources (e.g.,\n   routing entries in the switches) associated with the IB\
    \ group when\n   the last FullMember IB_leaves the group.  The MLID therefore\
    \ becomes\n   invalid for the group.  The MLID can be reassigned when a new group\n\
    \   is created.\n   SendOnlyNonMember/NonMember ports caching the MLID need to\
    \ avoid this\n   possibility.  The way out is for them to request group delete\n\
    \   reports.  An IP router requesting reports for all groups need not\n   request\
    \ the delete report since an IB_join in response to a create\n   report will return\
    \ the new MLID association to it.\n   A router might prefer to IB_leave the IB\
    \ multicast group when there\n   are no members of the IP multicast address in\
    \ the subnet and it has\n   no explicit knowledge of any need to forward such\
    \ packets.\n"
- title: 4.3.  Transmission of IPoIB Packets
  contents:
  - "4.3.  Transmission of IPoIB Packets\n   The encapsulation of IP packets in InfiniBand\
    \ is described in\n   [RFC4391].\n   It specifies the use of an 'Ethertype' value\
    \ [IANA] in all IPoIB\n   communication packets.  The link-layer address is comprised\
    \ of the\n   GID and the Queue Pair Number (QPN) [RFC4391].\n   To enable IPoIB\
    \ subnets to span across multiple IB-subnets, the\n   specification utilizes the\
    \ GID as part of the link-layer address.\n   Since all packets in IB have to use\
    \ the Local Identifier (LID), the\n   address resolution process has the additional\
    \ step of resolving the\n   destination GID, returned in response to Address Resolution\
    \ Protocol\n   (ARP) / Neighbor Discover (ND) request, to the LID [RFC4391]. \
    \ This\n   phase of address resolution might also be used to determine other\n\
    \   essential parameters (e.g., the SL, path rate, etc.) for successful\n   IB\
    \ communication between two peers.\n   As noted earlier, all communication in\
    \ the IPoIB subnet derives the\n   Q_Key to use from the Q_Key specified in the\
    \ broadcast group.\n"
- title: 4.4.  Reverse Address Resolution Protocol (RARP) and Static ARP Entries
  contents:
  - "4.4.  Reverse Address Resolution Protocol (RARP) and Static ARP Entries\n   RARP\
    \ entries or static ARP entries are based on invariant link\n   addresses.  In\
    \ the case of IPoIB, the link address includes the QPN,\n   which might not be\
    \ constant across reboots or even across network\n   interface resets.  Therefore,\
    \ static ARP entries or RARP server\n   entries will only work if the implementation(s)\
    \ using these options\n   can ensure that the QPN associated with an interface\
    \ is invariant\n   across reboots/network resets [RFC4391].\n"
- title: 4.5.  DHCPv4 and IPoIB
  contents:
  - "4.5.  DHCPv4 and IPoIB\n   DHCPv4 [RFC2131] utilizes a 'client identifier' field\
    \ (expected to\n   hold the link-layer address) of 16 octets.  The address in\
    \ the case\n   of IPoIB is 20 octets.  To get around this problem, IPoIB specifies\n\
    \   [RFC4390] that the 'broadcast flag' be used by the client when\n   requesting\
    \ an IP address.\n"
- title: 5.  QoS and Related Issues
  contents:
  - "5.  QoS and Related Issues\n   The IB specification suggests the use of service\
    \ levels for load\n   balancing, QoS, and deadlock avoidance within an IB subnet.\
    \  But the\n   IB specification leaves the usage and mode of determination of\
    \ the SL\n   for the application to decide.  The SL and list of SLs are available\n\
    \   in the SA, but it is up to the endnode's application to choose the\n   'right'\
    \ value.\n   Every IPoIB implementation will determine the relevant SL value based\n\
    \   on its own policy.  No method or process for choosing the SL has been\n  \
    \ defined by the IPoIB standards.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document describes the IB architecture as\
    \ relevant to IPoIB.  It\n   further restates issues specified in other documents.\
    \  It does not\n   itself specify any requirements.  There are no security issues\n\
    \   introduces by this document.  IPoIB-related security issues are\n   described\
    \ in [RFC4391] and [RFC4390].\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   This document has benefited from the comments and suggestions\
    \ of the\n   members of the IPoIB working group and the members of the\n   InfiniBand(SM)\
    \ Trade Association.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [IB_ARCH]     InfiniBand Architecture Specification,\
    \ Volume 1,\n                 Release 1.2, October, 2004.\n   [RFC4391]     Chu,\
    \ J. and V. Kashyap, \"Transmission of IP over\n                 InfiniBand (IPoIB)\"\
    , RFC 4391, April 2006.\n   [RFC4390]     Kashyap, V., \"Dynamic Host Configuration\
    \ Protocol\n                 (DHCP) over InfiniBand\", RFC 4390, April 2006.\n\
    \   [RFC2131]     Droms, R., \"Dynamic Host Configuration Protocol\", RFC\n  \
    \               2131, March 1997.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [RFC3513]     Hinden, R. and S. Deering, \"\
    Internet Protocol Version 6\n                 (IPv6) Addressing Architecture\"\
    , RFC 3513, April 2003.\n   [RFC2375]     Hinden, R. and S. Deering, \"IPv6 Multicast\
    \ Address\n                 Assignments\", RFC 2375, July 1998.\n   [IANA]   \
    \     Internet Assigned Numbers Authority, URL\n                 http://www.iana.org\n\
    \   [RFC1112]     Deering, S., \"Host extensions for IP multicasting\", STD\n\
    \                 5, RFC 1112, August 1989.\n   [RFC3376]     Cain, B., Deering,\
    \ S., Kouvelas, I., Fenner, B., and A.\n                 Thyagarajan, \"Internet\
    \ Group Management Protocol,\n                 Version 3\", RFC 3376, October\
    \ 2002.\n   [RFC2710]     Deering, S., Fenner, W., and B. Haberman, \"Multicast\n\
    \                 Listener Discovery (MLD) for IPv6\", RFC 2710, October\n   \
    \              1999.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Vivek Kashyap\n   IBM\n   15450, SW Koll Parkway\n   Beaverton,\
    \ OR 97006\n   Phone: +1 503 578 3422\n   EMail: vivk@us.ibm.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
