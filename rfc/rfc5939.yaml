- title: __initial_text__
  contents:
  - '       Session Description Protocol (SDP) Capability Negotiation

    '
- title: Abstract
  contents:
  - "Abstract\n   The Session Description Protocol (SDP) was intended to describe\n\
    \   multimedia sessions for the purposes of session announcement, session\n  \
    \ invitation, and other forms of multimedia session initiation.  SDP\n   was not\
    \ intended to provide capability indication or capability\n   negotiation; however,\
    \ over the years, SDP has seen widespread\n   adoption and as a result it has\
    \ been gradually extended to provide\n   limited support for these, notably in\
    \ the form of the offer/answer\n   model defined in RFC 3264.  SDP does not define\
    \ how to negotiate one\n   or more alternative transport protocols (e.g., RTP\
    \ profiles) or\n   attributes.  This makes it difficult to deploy new RTP profiles\
    \ such\n   as Secure RTP or RTP with RTCP-based feedback, negotiate use of\n \
    \  different security keying mechanisms, etc.  It also presents problems\n   for\
    \ some forms of media negotiation.\n   The purpose of this document is to address\
    \ these shortcomings by\n   extending SDP with capability negotiation parameters\
    \ and associated\n   offer/answer procedures to use those parameters in a backwards\n\
    \   compatible manner.\n   The document defines a general SDP Capability Negotiation\
    \ framework.\n   It also specifies how to provide attributes and transport protocols\n\
    \   as capabilities and negotiate them using the framework.  Extensions\n   for\
    \ other types of capabilities (e.g., media types and media formats)\n   may be\
    \ provided in other documents.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5939.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Conventions Used in This Document ...............................7\n  \
    \ 3. SDP Capability Negotiation Solution .............................7\n    \
    \  3.1. SDP Capability Negotiation Model ...........................7\n      3.2.\
    \ Solution Overview .........................................10\n      3.3. Version\
    \ and Extension Indication Attributes ...............14\n      3.4. Capability\
    \ Attributes .....................................17\n      3.5. Configuration\
    \ Attributes ..................................22\n      3.6. Offer/Answer Model\
    \ Extensions .............................32\n      3.7. Interactions with ICE\
    \ .....................................45\n      3.8. Interactions with SIP Option\
    \ Tags .........................47\n      3.9. Processing Media before Answer\
    \ ............................48\n      3.10. Indicating Bandwidth Usage ...............................49\n\
    \      3.11. Dealing with Large Number of Potential Configurations ....50\n  \
    \    3.12. SDP Capability Negotiation and Intermediaries ............51\n    \
    \  3.13. Considerations for Specific Attribute Capabilities .......52\n      3.14.\
    \ Relationship to RFC 3407 .................................54\n   4. Examples\
    \ .......................................................54\n      4.1. Multiple\
    \ Transport Protocols ..............................54\n      4.2. DTLS-SRTP or\
    \ SRTP with Media-Level Security Descriptions...58\n      4.3. Best-Effort SRTP\
    \ with Session-Level MIKEY and Media-Level\n           Security Descriptions .....................................61\n\
    \      4.4. SRTP with Session-Level MIKEY and Media-Level Security\n         \
    \  Descriptions as Alternatives ..............................66\n   5. Security\
    \ Considerations ........................................69\n   6. IANA Considerations\
    \ ............................................72\n      6.1. New SDP Attributes\
    \ ........................................72\n      6.2. New SDP Capability Negotiation\
    \ Option Tag Registry ........73\n      6.3. New SDP Capability Negotiation Potential\n\
    \           Configuration Parameter Registry ..........................74\n  \
    \ 7. Acknowledgments ................................................74\n   8.\
    \ References .....................................................75\n      8.1.\
    \ Normative References ......................................75\n      8.2. Informative\
    \ References ....................................75\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Session Description Protocol (SDP) was intended to describe\n\
    \   multimedia sessions for the purposes of session announcement, session\n  \
    \ invitation, and other forms of multimedia session initiation.  An SDP\n   session\
    \ description contains one or more media stream descriptions\n   with information\
    \ such as IP address and port, type of media stream\n   (e.g., audio or video),\
    \ transport protocol (possibly including\n   profile information, e.g., RTP/AVP\
    \ or RTP/SAVP), media formats (e.g.,\n   codecs), and various other session and\
    \ media stream parameters that\n   define the session.\n   Simply providing media\
    \ stream descriptions is sufficient for session\n   announcements for a broadcast\
    \ application, where the media stream\n   parameters are fixed for all participants.\
    \  When a participant wants\n   to join the session, he obtains the session announcement\
    \ and uses the\n   media descriptions provided, e.g., joins a multicast group\
    \ and\n   receives media packets in the encoding format specified.  If the\n \
    \  media stream description is not supported by the participant, he is\n   unable\
    \ to receive the media.\n   Such restrictions are not generally acceptable to\
    \ multimedia session\n   invitations, where two or more entities attempt to establish\
    \ a media\n   session, that uses a set of media stream parameters acceptable to\
    \ all\n   participants.  First of all, each entity must inform the other of its\n\
    \   receive address, and secondly, the entities need to agree on the\n   media\
    \ stream parameters to use for the session, e.g., transport\n   protocols and\
    \ codecs.  To solve this, RFC 3264 [RFC3264] defined the\n   offer/answer model,\
    \ whereby an offerer constructs an offer SDP\n   session description that lists\
    \ the media streams, codecs, and other\n   SDP parameters that the offerer is\
    \ willing to use.  This offer\n   session description is sent to the answerer,\
    \ which chooses from among\n   the media streams, codecs and other session description\
    \ parameters\n   provided, and generates an answer session description with his\n\
    \   parameters, based on that choice.  The answer session description is\n   sent\
    \ back to the offerer thereby completing the session negotiation\n   and enabling\
    \ the establishment of the negotiated media streams.\n   Taking a step back, we\
    \ can make a distinction between the\n   capabilities supported by each participant,\
    \ the way in which those\n   capabilities can be supported, and the parameters\
    \ that can actually\n   be used for the session.  More generally, we can say that\
    \ we have the\n   following:\n   o  A set of capabilities for the session and\
    \ its associated media\n      stream components, supported by each side.  The\
    \ capability\n      indications by themselves do not imply a commitment to use\
    \ the\n      capabilities in the session.\n      Capabilities can, for example,\
    \ be that the \"RTP/SAVP\" profile is\n      supported, that the \"PCMU\" (Pulse\
    \ Code Modulation mu-law) codec is\n      supported, or that the \"crypto\" attribute\
    \ is supported with a\n      particular value.\n   o  A set of potential configurations\
    \ indicating which combinations of\n      those capabilities can be used for the\
    \ session and its associated\n      media stream components.  Potential configurations\
    \ are not ready\n      for use.  Instead, they provide an alternative that may\
    \ be used,\n      subject to further negotiation.\n      A potential configuration\
    \ can, for example, indicate that the\n      \"PCMU\" codec and the \"RTP/SAVP\"\
    \ transport protocol are not only\n      supported (i.e., listed as capabilities),\
    \ but they are offered for\n      potential use in the session.\n   o  An actual\
    \ configuration for the session and its associated media\n      stream components,\
    \ that specifies which combinations of session\n      parameters and media stream\
    \ components can be used currently and\n      with what parameters.  Use of an\
    \ actual configuration does not\n      require any further negotiation.\n    \
    \  An actual configuration can, for example, be that the \"PCMU\" codec\n    \
    \  and the \"RTP/SAVP\" transport protocol are offered for use\n      currently.\n\
    \   o  A negotiation process that takes the set of actual and potential\n    \
    \  configurations (combinations of capabilities) as input and\n      provides\
    \ the negotiated actual configurations as output.\n   SDP by itself was designed\
    \ to provide only one of these, namely\n   listing of the actual configurations;\
    \ however, over the years, use of\n   SDP has been extended beyond its original\
    \ scope.  Of particular\n   importance are the session negotiation semantics that\
    \ were defined by\n   the offer/answer model in RFC 3264.  In this model, both\
    \ the offer\n   and the answer contain actual configurations; separate capabilities\n\
    \   and potential configurations are not supported.\n   Other relevant extensions\
    \ have been defined as well.  RFC 3407\n   [RFC3407] defined simple capability\
    \ declarations, which extends SDP\n   with a simple and limited set of capability\
    \ descriptions.  Grouping\n   of media lines, which defines how media lines in\
    \ SDP can have other\n   semantics than the traditional \"simultaneous media streams\"\
    \n   semantics, was defined in RFC 5888 [RFC5888], etc.\n   Each of these extensions\
    \ was designed to solve a specific limitation\n   of SDP.  Since SDP had already\
    \ been stretched beyond its original\n   intent, a more comprehensive capability\
    \ declaration and negotiation\n   process was intentionally not defined.  Instead,\
    \ work on a \"next\n   generation\" of a protocol to provide session description\
    \ and\n   capability negotiation was initiated [SDPng].  SDPng defined a\n   comprehensive\
    \ capability negotiation framework and protocol that was\n   not bound by existing\
    \ SDP constraints.  SDPng was not designed to be\n   backwards compatible with\
    \ existing SDP and hence required both sides\n   to support it, with a graceful\
    \ fallback to legacy operation when\n   needed.  This, combined with lack of ubiquitous\
    \ multipart MIME\n   support in the protocols that would carry SDP or SDPng, made\
    \ it\n   challenging to migrate towards SDPng.  In practice, SDPng has not\n \
    \  gained traction and, as of the time of publication of this document,\n   work\
    \ on SDPng has stopped.  Existing real-time multimedia\n   communication protocols\
    \ such as SIP, Real Time Streaming Protocol\n   (RTSP), Megaco, and Media Gateway\
    \ Control Protocol (MGCP) continue to\n   use SDP.  However, SDP does not address\
    \ an increasingly important\n   problem: the ability to negotiate one or more\
    \ alternative transport\n   protocols (e.g., RTP profiles) and associated parameters\
    \ (e.g., SDP\n   attributes).  This makes it difficult to deploy new RTP profiles\
    \ such\n   as Secure RTP (SRTP) [RFC3711], RTP with RTCP-based feedback\n   [RFC4585],\
    \ etc.  The problem is exacerbated by the fact that RTP\n   profiles are defined\
    \ independently.  When a new profile is defined\n   and N other profiles already\
    \ exist, there is a potential need for\n   defining N additional profiles, since\
    \ profiles cannot be combined\n   automatically.  For example, in order to support\
    \ the plain and Secure\n   RTP version of RTP with and without RTCP-based feedback,\
    \ four\n   separate profiles (and hence profile definitions) are needed: RTP/AVP\n\
    \   [RFC3551], RTP/SAVP [RFC3711], RTP/AVPF [RFC4585], and RTP/SAVPF\n   [RFC5124].\
    \  In addition to the pressing profile negotiation problem,\n   other important\
    \ real-life limitations have been found as well.\n   Keying material and other\
    \ parameters, for example, need to be\n   negotiated with some of the transport\
    \ protocols, but not others.\n   Similarly, some media formats and types of media\
    \ streams need to\n   negotiate a variety of different parameters.\n   The purpose\
    \ of this document is to define a mechanism that enables\n   SDP to provide limited\
    \ support for indicating capabilities and their\n   associated potential configurations,\
    \ and negotiate the use of those\n   potential configurations as actual configurations.\
    \  It is not the\n   intent to provide a full-fledged capability indication and\n\
    \   negotiation mechanism along the lines of SDPng or ITU-T H.245.\n   Instead,\
    \ the focus is on addressing a set of well-known real-life\n   limitations.  More\
    \ specifically, the solution provided in this\n   document provides a general\
    \ SDP Capability Negotiation framework that\n   is backwards compatible with existing\
    \ SDP.  It also defines\n   specifically how to provide attributes and transport\
    \ protocols as\n   capabilities and negotiate them using the framework.  Extensions\
    \ for\n   other types of capabilities (e.g., media types and formats) may be\n\
    \   provided in other documents.\n   As mentioned above, SDP is used by several\
    \ protocols, and hence the\n   mechanism should be usable by all of these.  One\
    \ particularly\n   important protocol for this problem is the Session Initiation\n\
    \   Protocol (SIP) [RFC3261].  SIP uses the offer/answer model [RFC3264]\n   (which\
    \ is not specific to SIP) to negotiate sessions and hence the\n   mechanism defined\
    \ here provides the offer/answer procedures to use\n   for the capability negotiation\
    \ framework.\n   The rest of the document is structured as follows.  In Section\
    \ 3, we\n   present the SDP Capability Negotiation solution, which consists of\n\
    \   new SDP attributes and associated offer/answer procedures.  In\n   Section\
    \ 4, we provide examples illustrating its use.  In Section 5,\n   we provide the\
    \ security considerations.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  SDP Capability Negotiation Solution
  contents:
  - "3.  SDP Capability Negotiation Solution\n   In this section, we first present\
    \ the conceptual model behind the SDP\n   Capability Negotiation framework followed\
    \ by an overview of the SDP\n   Capability Negotiation solution.  We then define\
    \ new SDP attributes\n   for the solution and provide its associated updated offer/answer\n\
    \   procedures.\n"
- title: 3.1.  SDP Capability Negotiation Model
  contents:
  - "3.1.  SDP Capability Negotiation Model\n   Our model uses the concepts of\n \
    \  o  Capabilities\n   o  Potential Configurations\n   o  Actual Configurations\n\
    \   o  Negotiation Process\n   as defined in Section 1.  Conceptually, we want\
    \ to offer not just the\n   actual configuration SDP session description (which\
    \ is done with the\n   offer/answer model defined in [RFC3264]), but the actual\n\
    \   configuration SDP session description as well as one or more\n   alternative\
    \ SDP session descriptions, i.e., potential configurations.\n   The answerer must\
    \ choose either the actual configuration or one of\n   the potential configurations,\
    \ and generate an answer SDP session\n   description based on that.  The offerer\
    \ may need to perform\n   processing on the answer, which depends on the offer\
    \ that was chosen\n   (actual or potential configuration).  The answerer therefore\
    \ informs\n   the offerer which configuration the answerer chose.  The process\
    \ can\n   be viewed *conceptually* as follows:\n        Offerer              \
    \             Answerer\n        =======                           ========\n \
    \  1) Generate offer with actual\n      configuration and alternative\n      potential\
    \ configurations\n   2) Send offer with all configurations\n   +------------+\n\
    \   | SDP o1     |\n   | (actual    |\n   |  config    |\n   |            |-+\
    \      Offer\n   +------------+ |      ----->   3) Process offered configurations\n\
    \     | SDP o2     |                  in order of preference indicated\n     |\
    \ (potential |               4) Generate answer based on chosen\n     |  config\
    \ 1) |-+                configuration (e.g., o2), and\n     +------------+ | \
    \               inform offerer which one was\n       | SDP o3     |          \
    \      chosen\n       | (potential |\n       |  config 2) |-+\n       +------------+\
    \ |\n         | SDP ...    |\n         :            :\n                      \
    \                +------------+\n                                      | SDP a1\
    \     |\n                        Answer        | (actual    |\n              \
    \          <-----        |  config,o2)|\n                                    \
    \  |            |\n   5) Process answer based on         +------------+\n    \
    \  the configuration that was\n      chosen (o2), as indicated in\n      the answer\n\
    \   The above illustrates the conceptual model: the actual solution uses\n   a\
    \ single SDP session description, which contains the actual\n   configuration\
    \ (as with existing SDP session descriptions and the\n   offer/answer model defined\
    \ in [RFC3264]) and several new attributes\n   and associated procedures, that\
    \ encode the capabilities and potential\n   configurations.  A more accurate depiction\
    \ of the actual offer SDP\n   session description is therefore as follows:\n \
    \         +--------------------+\n          | SDP o1             |\n         \
    \ | (actual            |\n          |  config            |\n          |      \
    \              |\n          | +-------------+    |\n          | | capability 1|\
    \    |\n          | | capability 2|    |\n          | | ...         |    |\n \
    \         | +-------------+    |   Offer\n          |                    |   ----->\n\
    \          | +-------------+    |\n          | | potential   |    |\n        \
    \  | |   config 1  |    |\n          | | potential   |    |\n          | |   config\
    \ 2  |    |\n          | | ...         |    |\n          | +-------------+   \
    \ |\n          |                    |\n          +--------------------+\n   The\
    \ above structure is used for two reasons:\n   o  Backwards compatibility:   As\
    \ noted above, support for multipart\n      MIME is not ubiquitous.  By encoding\
    \ both capabilities and\n      potential configurations in SDP attributes, we\
    \ can represent\n      everything in a single SDP session description thereby\
    \ avoiding\n      any multipart MIME support issues.  Furthermore, since unknown\
    \ SDP\n      attributes are ignored by the SDP recipient, we ensure that\n   \
    \   entities that do not support the framework simply perform the\n      regular\
    \ RFC 3264 offer/answer procedures.  This provides us with\n      seamless backwards\
    \ compatibility.\n   o  Message size efficiency:   When we have multiple media\
    \ streams,\n      each of which may potentially use two or more different transport\n\
    \      protocols with a variety of different associated parameters, the\n    \
    \  number of potential configurations can be large.  If each possible\n      alternative\
    \ is represented as a complete SDP session description\n      in an offer, we\
    \ can easily end up with large messages.  By\n      providing a more compact encoding,\
    \ we get more efficient message\n      sizes.\n   In the next section, we describe\
    \ the exact structure and specific SDP\n   parameters used to represent this.\n"
- title: 3.2.  Solution Overview
  contents:
  - "3.2.  Solution Overview\n   The solution consists of the following:\n   o  Two\
    \ new SDP attributes to support extensions to the framework\n      itself as follows:\n\
    \      o  A new attribute (\"a=csup\") that lists the supported base\n       \
    \  (optionally) and any supported extension options to the\n         framework.\n\
    \      o  A new attribute (\"a=creq\") that lists the extensions to the\n    \
    \     framework that are required to be supported by the entity\n         receiving\
    \ the SDP session description in order to do capability\n         negotiation.\n\
    \   o  Two new SDP attributes used to express capabilities as follows\n      (additional\
    \ attributes can be defined as extensions):\n      o  A new attribute (\"a=acap\"\
    ) that defines how to list an\n         attribute name and its associated value\
    \ (if any) as a\n         capability.\n      o  A new attribute (\"a=tcap\") that\
    \ defines how to list transport\n         protocols (e.g., \"RTP/AVP\") as capabilities.\n\
    \   o  Two new SDP attributes to negotiate configurations as follows:\n      o\
    \  A new attribute (\"a=pcfg\") that lists potential configurations\n        \
    \ supported.  This is done by reference to the capabilities from\n         the\
    \ SDP session description in question.  Extension\n         capabilities can be\
    \ defined and referenced in the potential\n         configurations.  Alternative\
    \ potential configurations have an\n         explicit ordering associated with\
    \ them.  Also, potential\n         configurations are by default preferred over\
    \ the actual\n         configuration included in the \"m=\" line and its associated\n\
    \         parameters.\n         This preference order was chosen to provide maximum\
    \ backwards\n         compatibility for the capability negotiation framework and\
    \ the\n         possible values offered for a session.  For example, an entity\n\
    \         that wants to establish a Secure RTP media stream but is\n         willing\
    \ to accept a plain RTP media stream (assumed to be the\n         least common\
    \ denominator for most endpoints), can offer plain\n         RTP in the actual\
    \ configuration and use the capability\n         negotiation extensions to indicate\
    \ the preference for Secure\n         RTP.  Entities that do not support the capability\
    \ negotiation\n         extensions or Secure RTP will then default to plain RTP.\n\
    \      o  A new attribute (\"a=acfg\") to be used in an answer SDP session\n \
    \        description.  The attribute identifies a potential\n         configuration\
    \ from an offer SDP session description that was\n         used as an actual configuration\
    \ to form the answer SDP session\n         description.  Extension capabilities\
    \ can be included as well.\n   o  Extensions to the offer/answer model that allow\
    \ for capabilities\n      and potential configurations to be included in an offer.\n\
    \      Capabilities can be provided at the session level and the media\n     \
    \ level.  Potential configurations can be included only at the media\n      level,\
    \ where they constitute alternative offers that may be\n      accepted by the\
    \ answerer instead of the actual configuration(s)\n      included in the \"m=\"\
    \ line(s) and associated parameters.  The\n      mechanisms defined in this document\
    \ enable potential\n      configurations to change the transport protocol, add\
    \ new\n      attributes, as well as remove all existing attributes from the\n\
    \      actual configuration.  The answerer indicates which (if any) of\n     \
    \ the potential configurations it used to form the answer by\n      including\
    \ the actual configuration attribute (\"a=acfg\") in the\n      answer.  Capabilities\
    \ may be included in answers as well, where\n      they can aid in guiding a subsequent\
    \ new offer.\n   The mechanism is illustrated by the offer/answer exchange below,\n\
    \   where Alice sends an offer to Bob:\n                Alice                \
    \               Bob\n                  | (1) Offer (SRTP and RTP)         |\n\
    \                  |--------------------------------->|\n                  | \
    \                                 |\n                  | (2) Answer (SRTP)   \
    \             |\n                  |<---------------------------------|\n    \
    \              |                                  |\n                  | (3) Offer\
    \ (SRTP)                 |\n                  |--------------------------------->|\n\
    \                  |                                  |\n                  | (4)\
    \ Answer (SRTP)                |\n                  |<---------------------------------|\n\
    \                  |                                  |\n   Alice's offer includes\
    \ RTP and SRTP as alternatives, where RTP is the\n   default (actual configuration),\
    \ but SRTP is the preferred one\n   (potential configuration):\n      v=0\n  \
    \    o=- 25678 753849 IN IP4 192.0.2.1\n      s=\n      c=IN IP4 192.0.2.1\n \
    \     t=0 0\n      m=audio 53456 RTP/AVP 0 18\n      a=tcap:1 RTP/SAVP\n     \
    \ a=acap:1 crypto:1 AES_CM_128_HMAC_SHA1_80\n         inline:WVNfX19zZW1jdGwgKCkgewkyMjA7fQp9CnVubGVz|2^20|1:4\n\
    \      a=pcfg:1 t=1 a=1\n   The \"m=\" line indicates that Alice is offering to\
    \ use plain RTP with\n   PCMU or G.729.  The capabilities are provided by the\
    \ \"a=tcap\" and\n   \"a=acap\" attributes.  The transport capability attribute\
    \ (\"a=tcap\")\n   indicates that Secure RTP under the AVP profile (\"RTP/SAVP\"\
    ) is\n   supported with an associated transport capability handle of 1.  The\n\
    \   \"acap\" attribute provides an attribute capability with a handle of 1.\n\
    \   The attribute capability is a \"crypto\" attribute, which provides the\n \
    \  keying material for SRTP using SDP security descriptions [RFC4568].\n   The\
    \ \"a=pcfg\" attribute provides the potential configuration included\n   in the\
    \ offer by reference to the capability parameters.  One\n   alternative is provided;\
    \ it has a configuration number of 1 and it\n   consists of transport protocol\
    \ capability 1 (i.e., the RTP/SAVP\n   profile -- Secure RTP), and the attribute\
    \ capability 1 (i.e., the\n   \"crypto\" attribute provided).  Potential configurations\
    \ are preferred\n   over the actual configuration included in the offer SDP session\n\
    \   description, and hence Alice is expressing a preference for using\n   Secure\
    \ RTP.\n   Bob receives the SDP session description offer from Alice.  Bob\n \
    \  supports SRTP and the SDP Capability Negotiation framework, and hence\n   he\
    \ accepts the (preferred) potential configuration for Secure RTP\n   provided\
    \ by Alice and generates the following answer SDP session\n   description:\n \
    \     v=0\n      o=- 24351 621814 IN IP4 192.0.2.2\n      s=\n      c=IN IP4 192.0.2.2\n\
    \      t=0 0\n      m=audio 54568 RTP/SAVP 0 18\n      a=crypto:1 AES_CM_128_HMAC_SHA1_80\n\
    \            inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:4\n      a=acfg:1\
    \ t=1 a=1\n   Bob includes the \"a=acfg\" attribute in the answer to inform Alice\n\
    \   that he based his answer on an offer using potential configuration 1\n   with\
    \ transport protocol capability 1 and attribute capability 1 from\n   the offer\
    \ SDP session description (i.e., the RTP/SAVP profile using\n   the keying material\
    \ provided).  Bob also includes his keying material\n   in a \"crypto\" attribute.\
    \  If Bob supported one or more extensions to\n   the Capability Negotiation framework,\
    \ he would have included option\n   tags for those in the answer as well (in an\
    \ \"a=csup\" attribute).\n   When Alice receives Bob's answer, session negotiation\
    \ has completed;\n   however, Alice nevertheless generates a new offer using the\n\
    \   negotiated configuration as the actual configuration.  This is done\n   purely\
    \ to assist any intermediaries that may reside between Alice and\n   Bob but do\
    \ not support the SDP Capability Negotiation framework, and\n   hence may not\
    \ understand the negotiation that just took place.\n   Alice's updated offer includes\
    \ only SRTP, and it is not using the SDP\n   Capability Negotiation framework\
    \ (Alice could have included the\n   capabilities as well if she wanted):\n  \
    \    v=0\n      o=- 25678 753850 IN IP4 192.0.2.1\n      s=\n      c=IN IP4 192.0.2.1\n\
    \      t=0 0\n      m=audio 53456 RTP/SAVP 0 18\n      a=crypto:1 AES_CM_128_HMAC_SHA1_80\n\
    \         inline:WVNfX19zZW1jdGwgKCkgewkyMjA7fQp9CnVubGVz|2^20|1:4\n   The \"\
    m=\" line now indicates that Alice is offering to use Secure RTP\n   with PCMU\
    \ or G.729.  The \"crypto\" attribute, which provides the SRTP\n   keying material,\
    \ is included with the same value again.\n   Bob receives the SDP session description\
    \ offer from Alice, which he\n   accepts, and then generates an answer to Alice:\n\
    \      v=0\n      o=- 24351 621815 IN IP4 192.0.2.2\n      s=\n      c=IN IP4\
    \ 192.0.2.2\n      t=0 0\n      m=audio 54568 RTP/SAVP 0 18\n      a=crypto:1\
    \ AES_CM_128_HMAC_SHA1_80\n            inline:PS1uQCVeeCFCanVmcjkpPywjNWhcYD0mXXtxaVBR|2^20|1:4\n\
    \   Bob includes the same \"crypto\" attribute as before, and the session\n  \
    \ proceeds without change.  Although Bob did not include any\n   capabilities\
    \ in his answer, he could have done so if he wanted.\n   Note that in this particular\
    \ example, the answerer supported the\n   capability negotiation extensions defined\
    \ here.  Had he not, he would\n   simply have ignored the new attributes and accepted\
    \ the (actual\n   configuration) offer to use normal RTP.  In that case, the following\n\
    \   answer would have been generated instead:\n      v=0\n      o=- 24351 621814\
    \ IN IP4 192.0.2.2\n      s=\n      c=IN IP4 192.0.2.2\n      t=0 0\n      m=audio\
    \ 54568 RTP/AVP 0 18\n"
- title: 3.3.  Version and Extension Indication Attributes
  contents:
  - "3.3.  Version and Extension Indication Attributes\n   In this section, we present\
    \ the new attributes associated with\n   indicating the SDP Capability Negotiation\
    \ extensions supported and\n   required.\n"
- title: 3.3.1.  Supported Capability Negotiation Extensions Attribute
  contents:
  - "3.3.1.  Supported Capability Negotiation Extensions Attribute\n   The SDP Capability\
    \ Negotiation solution allows for capability\n   negotiation extensions to be\
    \ defined.  Associated with each such\n   extension is an option tag that identifies\
    \ the extension in question.\n   Option tags MUST be registered with IANA per\
    \ the procedures defined\n   in Section 6.2.\n   The Supported Capability Negotiation\
    \ Extensions attribute (\"a=csup\")\n   contains a comma-separated list of option\
    \ tags identifying the SDP\n   Capability Negotiation extensions supported by\
    \ the entity that\n   generated the SDP session description.  The attribute can\
    \ be provided\n   at the session level and the media level, and it is defined\
    \ as\n   follows:\n      a=csup: <option-tag-list>\n   RFC 4566, Section 9, provides\
    \ the ABNF [RFC5234] for SDP attributes.\n   The \"csup\" attribute adheres to\
    \ the RFC 4566 \"attribute\" production,\n   with an att-value defined as follows:\n\
    \      att-value         = option-tag-list\n      option-tag-list   = option-tag\
    \ *(\",\" option-tag)\n      option-tag        = token    ; defined in [RFC4566]\n\
    \   A special base option tag with a value of \"cap-v0\" is defined for the\n\
    \   basic SDP Capability Negotiation framework defined in this document.\n   Entities\
    \ can use this option tag with the \"a=csup\" attribute to\n   indicate support\
    \ for the SDP Capability Negotiation framework\n   specified in this document.\
    \  Please note that white space is not\n   allowed in this rule.\n   The following\
    \ examples illustrate use of the \"a=csup\" attribute with\n   the \"cap-v0\"\
    \ option tag and two hypothetical option tags, \"foo\" and\n   \"bar\" (note the\
    \ lack of white space):\n      a=csup:cap-v0\n      a=csup:foo\n      a=csup:bar\n\
    \      a=csup:cap-v0,foo,bar\n   The \"a=csup\" attribute can be provided at the\
    \ session and the media\n   level.  When provided at the session level, it applies\
    \ to the entire\n   SDP session description.  When provided at the media level,\
    \ it\n   applies only to the media description in question (option tags\n   provided\
    \ at the session level apply as well).  There MUST NOT be more\n   than one \"\
    a=csup\" attribute at the session level and one at the media\n   level (one per\
    \ media description in the latter case).\n   Whenever an entity that supports\
    \ one or more extensions to the SDP\n   Capability Negotiation framework generates\
    \ an SDP session\n   description, it SHOULD include the \"a=csup\" attribute with\
    \ the option\n   tags for the extensions it supports at the session and/or media\n\
    \   level, unless those option tags are already provided in one or more\n   \"\
    a=creq\" attribute (see Section 3.3.2) at the relevant levels.\n   Inclusion of\
    \ the base option tag is OPTIONAL; support for the base\n   framework can be inferred\
    \ from presence of the \"a=pcfg\" attribute\n   defined in Section 3.5.1.\n  \
    \ Use of the base option tag may still be useful in some scenarios,\n   e.g.,\
    \ when using SIP OPTIONS [RFC3261] or generating an answer to an\n   offer that\
    \ did not use the SDP Capability Negotiation framework.\n"
- title: 3.3.2.  Required Capability Negotiation Extensions Attribute
  contents:
  - "3.3.2.  Required Capability Negotiation Extensions Attribute\n   The Required\
    \ Capability Negotiation Extensions attribute (\"a=creq\")\n   contains a comma-separated\
    \ list of option tags (see Section 3.3.1)\n   specifying the SDP Capability Negotiation\
    \ extensions that MUST be\n   supported by the entity receiving the SDP session\
    \ description, in\n   order for that entity to properly process the SDP Capability\n\
    \   Negotiation attributes and associated procedures.  There is no need\n   to\
    \ include the base option tag (\"cap-v0\") with the \"creq\" attribute,\n   since\
    \ any entity that supports the \"creq\" attribute in the first\n   place also\
    \ supports the base option tag.  Still, it is permissible to\n   do so.\n    \
    \  Such functionality may be important if a future version of the\n      Capability\
    \ Negotiation framework were not backwards compatible.\n   The attribute can be\
    \ provided at the session level and the media\n   level, and it is defined as\
    \ follows:\n      a=creq: <option-tag-list>\n   The \"creq\" attribute adheres\
    \ to the RFC 4566 \"attribute\" production,\n   with an att-value defined as follows:\n\
    \      att-value   = option-tag-list\n   The following examples illustrate use\
    \ of the \"a=creq\" attribute with\n   the \"cap-v0\" base option tag and two\
    \ hypothetical option tags, \"foo\"\n   and \"bar\" (note the lack of white space):\n\
    \      a=creq:cap-v0\n      a=creq:foo\n      a=creq:bar\n      a=creq:cap-v0,foo,bar\n\
    \   The \"a=creq\" attribute can be provided at the session and the media\n  \
    \ level.  When provided at the session level, it applies to the entire\n   SDP\
    \ session description.  When provided at the media level, it\n   applies only\
    \ to the media description in question (required option\n   tags provided at the\
    \ session level apply as well).  There MUST NOT be\n   more than one \"a=creq\"\
    \ attribute at the session level and one\n   \"a=creq\" attribute at the media\
    \ level (one per media description in\n   the latter case).\n   When an entity\
    \ generates an SDP session description and it requires\n   the recipient of that\
    \ SDP session description to support one or more\n   SDP Capability Negotiation\
    \ extensions (except for the base) at the\n   session or media level in order\
    \ to properly process the SDP\n   Capability Negotiation, the \"a=creq\" attribute\
    \ MUST be included with\n   option tags that identify the required extensions\
    \ at the session\n   and/or media level.  If support for an extension is needed\
    \ only in\n   one or more specific potential configurations, the potential\n \
    \  configuration provides a way to indicate that instead (see Section\n   3.5.1).\
    \  Support for the basic negotiation framework is implied by\n   the presence\
    \ of an \"a=pcfg\" attribute (see Section 3.5.1) and hence\n   it is not required\
    \ to include the \"a=creq\" attribute with the base\n   option tag (\"cap-v0\"\
    ).\n   A recipient that receives an SDP session description and does not\n   support\
    \ one or more of the required extensions listed in a \"creq\"\n   attribute MUST\
    \ NOT perform the SDP Capability Negotiation defined in\n   this document; instead\
    \ the recipient MUST proceed as if the SDP\n   Capability Negotiation attributes\
    \ were not included in the first\n   place, i.e., the capability negotiation attributes\
    \ are ignored.  In\n   that case, if the SDP session description recipient is\
    \ an SDP\n   answerer [RFC3264], the recipient SHOULD include a \"csup\" attribute\n\
    \   in the resulting SDP session description answer listing the SDP\n   Capability\
    \ Negotiation extensions it actually supports.\n      This ensures that introduction\
    \ of the SDP Capability Negotiation\n      mechanism by itself does not lead to\
    \ session failures\n   For non-supported extensions provided at the session level,\
    \ this\n   implies that SDP Capability Negotiation MUST NOT be performed at all.\n\
    \   For non-supported extensions at the media level, this implies that\n   SDP\
    \ Capability Negotiation MUST NOT be performed for the media stream\n   in question.\n\
    \      An entity that does not support the SDP Capability Negotiation\n      framework\
    \ at all, will ignore these attributes (as well as the\n      other SDP Capability\
    \ Negotiation attributes) and not perform any\n      SDP Capability Negotiation\
    \ in the first place.\n"
- title: 3.4.  Capability Attributes
  contents:
  - "3.4.  Capability Attributes\n   In this section, we present the new attributes\
    \ associated with\n   indicating the capabilities for use by the SDP Capability\n\
    \   Negotiation.\n"
- title: 3.4.1.  Attribute Capability Attribute
  contents:
  - "3.4.1.  Attribute Capability Attribute\n   Attributes and their associated values\
    \ can be expressed as\n   capabilities by use of a new attribute capability attribute\n\
    \   (\"a=acap\"), which is defined as follows:\n      a=acap: <att-cap-num> <att-par>\n\
    \   where <att-cap-num> is an integer between 1 and 2^31-1 (both\n   included)\
    \ used to number the attribute capability and <att-par> is an\n   attribute (\"\
    a=\") in its \"<attribute>\" or \"<attribute>:<value>\" form,\n   i.e., excluding\
    \ the \"a=\" part (see [RFC4566]).  The attribute can be\n   provided at the session\
    \ level and the media level.\n   The \"acap\" attribute adheres to the RFC 4566\
    \ \"attribute\" production,\n   with an att-value defined as follows:\n      att-value\
    \   = att-cap-num 1*WSP att-par\n      att-cap-num = 1*10(DIGIT)  ;defined in\
    \ [RFC5234]\n      att-par     = attribute    ;defined in [RFC4566]\n   Note that\
    \ white space is not permitted before the att-cap-num.\n   When the attribute\
    \ capability contains a session-level attribute,\n   that \"acap\" attribute can\
    \ only be provided at the session level.\n   Conversely, media-level attributes\
    \ can be provided in attribute\n   capabilities at either the media level or session\
    \ level.  The base\n   SDP Capability Negotiation framework however only defines\
    \ procedures\n   for use of media-level attribute capabilities at the media level.\n\
    \   Implementations that conform only to the base framework MUST NOT\n   generate\
    \ media-level attribute capabilities at the session level;\n   however, extensions\
    \ may change this (see, e.g., [SDPMedCap] for one\n   such extension) and hence\
    \ all implementations MUST still be prepared\n   to receive such capabilities\
    \ (see Section 3.6.2 for processing\n   rules).\n   Each occurrence of the \"\
    acap\" attribute in the entire session\n   description MUST use a different value\
    \ of <att-cap-num>.  Consecutive\n   numbering of the <att-cap-num> values is\
    \ not required.\n      There is a need to be able to reference both session-level\
    \ and\n      media-level attributes in potential configurations at the media\n\
    \      level, and this provides for a simple solution to avoiding overlap\n  \
    \    between the references (handles) to each attribute capability.\n   The <att-cap-num>\
    \ values provided are independent of similar\n   <cap-num> values provided for\
    \ other types of capabilities, i.e., they\n   form a separate name-space for attribute\
    \ capabilities.\n   The following examples illustrate use of the \"acap\" attribute:\n\
    \      a=acap:1 ptime:20\n      a=acap:2 ptime:30\n      a=acap:3 key-mgmt:mikey\
    \ AQAFgM0XflABAAAAAAAAAAAAAAsAyONQ6gAA\n      AAAGEEoo2pee4hp2UaDX8ZE22YwKAAAPZG9uYWxkQGR1Y2suY29tAQAAAAAAAQAk0\n\
    \      JKpgaVkDaawi9whVBtBt0KZ14ymNuu62+Nv3ozPLygwK/GbAV9iemnGUIZ19fWQUO\n   \
    \   SrzKTAv9zV\n      a=acap:4 crypto:1 AES_CM_128_HMAC_SHA1_32\n            inline:NzB4d1BINUAvLEw6UzF3WSJ+PSdFcGdUJShpX1Zj|2^20|1:32\n\
    \   The first two attribute capabilities provide attribute values for the\n  \
    \ ptime attribute.  The third provides SRTP parameters by using\n   Multimedia\
    \ Internet KEYing (MIKEY) [RFC3830] with the \"key-mgmt\"\n   attribute [RFC4567].\
    \  The fourth provides SRTP parameters by use of\n   security descriptions with\
    \ the \"crypto\" attribute [RFC4568].  Note\n   that the line-wrapping and new-lines\
    \ in example three and four are\n   provided for formatting reasons only -- they\
    \ are not permitted in\n   actual SDP session descriptions.\n      Readers familiar\
    \ with RFC 3407 may notice the similarity between\n      the RFC 3407 \"cpar\"\
    \ attribute and the above.  There are however a\n      couple of important differences,\
    \ notably that the \"acap\" attribute\n      contains a handle that enables referencing\
    \ it and it furthermore\n      supports only attributes (the \"cpar\" attribute\
    \ defined in RFC 3407\n      supports bandwidth information as well).  The \"\
    acap\" attribute\n      also is not automatically associated with any particular\n\
    \      capabilities.  See Section 3.14 for the relationship to RFC 3407.\n   Attribute\
    \ capabilities MUST NOT embed any capability negotiation\n   parameters.  This\
    \ restriction applies to all the capability\n   negotiation parameters defined\
    \ in this document (\"csup\", \"creq\",\n   \"acap\", \"tcap\", \"pcfg\", and\
    \ \"acfg\") as well as any capability\n   negotiation extensions defined.  The\
    \ following examples are thus\n   invalid attribute capabilities and MUST NOT\
    \ be used:\n     a=acap:1 acap:2 foo:a       ;Not allowed to embed \"acap\"\n\
    \     a=acap:2 a=pcfg:1 t=1 a=1   ;Not allowed to embed \"pcfg\"\n   The reason\
    \ for this restriction is to avoid overly complex processing\n   rules resulting\
    \ from the expansion of such capabilities into\n   potential configurations (see\
    \ Section 3.6.2 for further details).\n"
- title: 3.4.2.  Transport Protocol Capability Attribute
  contents:
  - "3.4.2.  Transport Protocol Capability Attribute\n   Transport protocols can be\
    \ expressed as capabilities by use of a new\n   Transport Protocol Capability\
    \ attribute (\"a=tcap\") defined as\n   follows:\n      a=tcap: <trpr-cap-num>\
    \ <proto-list>\n   where <trpr-cap-num> is an integer between 1 and 2^31-1 (both\n\
    \   included) used to number the transport address capability for later\n   reference,\
    \ and <proto-list> is one or more <proto>, separated by\n   white space, as defined\
    \ in the SDP \"m=\" line.  The attribute can be\n   provided at the session level\
    \ and the media level.\n   The \"tcap\" attribute adheres to the RFC 4566 \"attribute\"\
    \ production,\n   with an att-value defined as follows:\n      att-value     \
    \ = trpr-cap-num 1*WSP proto-list\n      trpr-cap-num   = 1*10(DIGIT)        \
    \   ;defined in [RFC5234]\n      proto-list     = proto *(1*WSP proto)  ;defined\
    \ in [RFC4566]\n   Note that white space is not permitted before the trpr-cap-num.\n\
    \   The \"tcap\" attribute can be provided at the session level and the\n   media\
    \ level.  There MUST NOT be more than one \"a=tcap\" attribute at\n   the session\
    \ level and one at the media level (one per media\n   description in the latter\
    \ case).  Each occurrence of the \"tcap\"\n   attribute in the entire session\
    \ description MUST use a different\n   value of <trpr-cap-num>.  When multiple\
    \ <proto> values are provided,\n   the first one is associated with the value\
    \ <trpr-cap-num>, the second\n   one with the value one higher, etc.  There MUST\
    \ NOT be any capability\n   number overlap between different \"tcap\" attributes\
    \ in the entire SDP\n   session description.  The <trpr-cap-num> values provided\
    \ are\n   independent of similar <cap-num> values provided for other capability\n\
    \   attributes, i.e., they form a separate name-space for transport\n   protocol\
    \ capabilities.  Consecutive numbering of the <trpr-cap-num>\n   values in different\
    \ \"tcap\" attributes is not required.\n   Below, we provide examples of the \"\
    a=tcap\" attribute:\n      a=tcap:1 RTP/AVP\n      a=tcap:2 RTP/AVPF\n      a=tcap:3\
    \ RTP/SAVP RTP/SAVPF\n      a=tcap:5 UDP/TLS/RTP/SAVP\n   The first one provides\
    \ a capability for the \"RTP/AVP\" profile defined\n   in [RFC3551] and the second\
    \ one provides a capability for the RTP\n   with RTCP-based feedback profile defined\
    \ in [RFC4585].  The third one\n   provides capabilities for the \"RTP/SAVP\"\
    \ (transport capability number\n   3) and \"RTP/SAVPF\" profiles (transport protocol\
    \ capability number 4).\n   The last one provides capabilities for \"UDP/TLS/RTP/SAVP\"\
    , i.e.,\n   DTLS-SRTP [RFC5764] (transport capability number 5).\n   The \"tcap\"\
    \ attribute by itself can only specify transport protocols\n   as defined by <proto>\
    \ in [RFC4566]; however, full specification of a\n   media stream requires further\
    \ qualification of the transport protocol\n   by one or more media format descriptions,\
    \ which themselves often\n   depend on the transport protocol.  As an example,\
    \ [RFC3551] defines\n   the \"RTP/AVP\" transport for use with audio and video\
    \ codecs (media\n   formats), whereas [RFC4145] defines the \"TCP\" transport,\
    \ which, for\n   example, may be used to negotiate T.38 fax (\"image/t38\"), etc.\
    \  In a\n   non-SDP context, some media formats could be viewed as transports\n\
    \   themselves (e.g., T.38); however, in the context of SDP and SDP\n   Capability\
    \ Negotiation, they are not.  If capability negotiation is\n   required for such\
    \ media formats, they MUST all either be valid under\n   the transport protocol\
    \ indicated in the \"m=\" line included for the\n   media stream description,\
    \ or a suitable extension must be used, e.g.,\n   SDP Media Capabilities [SDPMedCap].\n\
    \   The ability to use a particular transport protocol is inherently\n   implied\
    \ by including it in the \"m=\" line, regardless of whether or\n   not it is provided\
    \ in a \"tcap\" attribute.  However, if a potential\n   configuration needs to\
    \ reference that transport protocol as a\n   capability, the transport protocol\
    \ MUST be included explicitly in a\n   \"tcap\" attribute.\n      This may seem\
    \ redundant (and indeed it is from the offerer's point\n      of view), however\
    \ it is done to protect against intermediaries\n      (e.g., middleboxes) that\
    \ may modify \"m=\" lines while passing\n      unknown attributes through.  If\
    \ an implicit transport capability\n      were used instead (e.g., a reserved\
    \ transport capability number\n      could be used to refer to the transport protocol\
    \ in the \"m=\"\n      line), and an intermediary were to modify the transport\
    \ protocol\n      in the \"m=\" line (e.g., to translate between plain RTP and\
    \ Secure\n      RTP), then the potential configuration referencing that implicit\n\
    \      transport capability may no longer be correct.  With explicit\n      capabilities,\
    \ we avoid this pitfall; however, the potential\n      configuration preference\
    \ (see Section 3.5.1) may not reflect that\n      of the intermediary (which some\
    \ may view as a feature).\n   Note that a transport protocol capability may be\
    \ provided,\n   irrespective of whether or not it is referenced in a potential\n\
    \   configuration (just like any other capability).\n"
- title: 3.4.3.  Extension Capability Attributes
  contents:
  - "3.4.3.  Extension Capability Attributes\n   The SDP Capability Negotiation framework\
    \ allows for new types of\n   capabilities to be defined as extensions and used\
    \ with the general\n   capability negotiation framework.  The syntax and semantics\
    \ of such\n   new capability attributes are not defined here; however, in order\
    \ to\n   be used with potential configurations, they SHOULD allow for a\n   numeric\
    \ handle to be associated with each capability.  This handle\n   can be used as\
    \ a reference within the potential and actual\n   configuration attributes (see\
    \ Sections 3.5.1 and 3.5.2).  The\n   definition of such extension capability\
    \ attributes MUST also state\n   whether they can be applied at the session level,\
    \ media level, or\n   both.  Note that extensions can have option tags defined\
    \ for them,\n   and option tags MUST be registered with the IANA in accordance\
    \ with\n   the procedures specified in Section 6.2.\n   Extension capabilities\
    \ SHOULD NOT embed any capability negotiation\n   parameters.  This applies to\
    \ all the capability negotiation\n   parameters defined in this document as well\
    \ as any extensions\n   defined.  The reason for this restriction is to avoid\
    \ overly complex\n   processing rules resulting from the expansion of such capabilities\n\
    \   into potential configurations (see Section 3.6.2 for further\n   details).\
    \  If an extension does not follow the above \"SHOULD NOT\"\n   recommendation,\
    \ the extension MUST provide a careful analysis of why\n   such behavior is both\
    \ necessary and safe.\n"
- title: 3.5.  Configuration Attributes
  contents:
  - '3.5.  Configuration Attributes

    '
- title: 3.5.1.  Potential Configuration Attribute
  contents:
  - "3.5.1.  Potential Configuration Attribute\n   Potential configurations can be\
    \ expressed by use of a new Potential\n   Configuration Attribute (\"a=pcfg\"\
    ) defined as follows:\n      a=pcfg: <config-number> [<pot-cfg-list>]\n   where\
    \ <config-number> is an integer between 1 and 2^31-1 (both\n   included).  The\
    \ attribute can be provided only at the media level.\n   The \"pcfg\" attribute\
    \ adheres to the RFC 4566 \"attribute\" production,\n   with an att-value defined\
    \ as follows:\n      att-value      = config-number [1*WSP pot-cfg-list]\n   \
    \   config-number  = 1*10(DIGIT)  ;defined in [RFC5234]\n      pot-cfg-list  \
    \ = pot-config *(1*WSP pot-config)\n      pot-config     = attribute-config-list\
    \ /\n                       transport-protocol-config-list /\n               \
    \        extension-config-list\n   The missing productions are defined below.\
    \  Note that white space is\n   not permitted before the config-number.\n   The\
    \ potential configuration attribute can be provided only at the\n   media level\
    \ and there can be multiple instances of it within a given\n   media description.\
    \  The attribute includes a configuration number,\n   which is an integer between\
    \ 1 and 2^31-1 (both included).  The\n   configuration number MUST be unique within\
    \ the media description\n   (i.e., it has only media-level scope).  The configuration\
    \ number also\n   indicates the relative preference of potential configurations;\
    \ lower\n   numbers are preferred over higher numbers.  Consecutive numbering\
    \ of\n   the configuration numbers in different \"pcfg\" attributes in a media\n\
    \   description is not required.\n   A potential configuration list is normally\
    \ provided after the\n   configuration number.  When the potential configuration\
    \ list is\n   omitted, the potential configuration equals the actual configuration.\n\
    \   The potential configuration list contains one or more of attribute,\n   transport,\
    \ and extension configuration lists.  A potential\n   configuration may for example\
    \ include attribute capabilities and\n   transport capabilities, transport capabilities\
    \ only, or some other\n   combination of capabilities.  If transport capabilities\
    \ are not\n   included in a potential configuration, the default transport for\
    \ that\n   media stream is used.\n   The potential configuration lists generally\
    \ reference one or more\n   capabilities (extension configuration lists MAY use\
    \ a different\n   format).  Those capabilities are (conceptually) used to construct\
    \ a\n   new internal version of the SDP session description by use of purely\n\
    \   syntactic add and (possibly) delete operations on the original SDP\n   session\
    \ description (actual configuration).  This provides an\n   alternative potential\
    \ configuration SDP session description that can\n   be used by conventional SDP\
    \ and offer/answer procedures if selected.\n   This document defines attribute\
    \ configuration lists and transport\n   protocol configuration lists.  Each of\
    \ these MUST NOT be present more\n   than once in a particular potential configuration\
    \ attribute.\n   Attribute capabilities referenced by the attribute configuration\
    \ list\n   (if included) are added to the actual configuration, whereas a\n  \
    \ transport capability referenced by the transport protocol\n   configuration\
    \ list (if included) replaces the default transport\n   protocol from the actual\
    \ configuration.  Extension configuration\n   lists can be included as well. \
    \ There can be more than one extension\n   configuration list; however, each particular\
    \ extension MUST NOT be\n   present more than once in a given \"a=pcfg\" attribute.\
    \  Together, the\n   various configuration lists define a potential configuration.\n\
    \   There can be multiple potential configurations in a media\n   description.\
    \  Each of these indicates not only a willingness, but in\n   fact a desire to\
    \ use the potential configuration.\n   The example SDP session description below\
    \ contains two potential\n   configurations:\n      v=0\n      o=- 25678 753849\
    \ IN IP4 192.0.2.1\n      s=\n      c=IN IP4 192.0.2.1\n      t=0 0\n      m=audio\
    \ 53456 RTP/AVP 0 18\n      a=tcap:1 RTP/SAVP RTP/SAVPF\n      a=acap:1 crypto:1\
    \ AES_CM_128_HMAC_SHA1_32\n         inline:NzB4d1BINUAvLEw6UzF3WSJ+PSdFcGdUJShpX1Zj|2^20|1:32\n\
    \      a=pcfg:1 t=1 a=1\n      a=pcfg:2 t=2 a=1\n   Potential configuration 1\
    \ contains a transport protocol configuration\n   list that references transport\
    \ capability 1 (\"RTP/SAVP\") and an\n   attribute configuration list that references\
    \ attribute capability 1\n   (\"a=crypto:...\").  Potential configuration 2 contains\
    \ a transport\n   protocol configuration list that references transport capability\
    \ 2\n   (\"RTP/SAVPF\") and an attribute configuration list that references\n\
    \   attribute capability 1 (\"a=crypto:...\").\n   Attribute capabilities are\
    \ used in a potential configuration by use\n   of the attribute-config-list parameter,\
    \ which is defined by the\n   following ABNF:\n      attribute-config-list = \
    \ \"a=\" delete-attributes\n      attribute-config-list =/ \"a=\" [delete-attributes\
    \ \":\"]\n                        mo-att-cap-list *(BAR mo-att-cap-list)\n   \
    \   delete-attributes = DELETE ( \"m\" ; media attributes\n                  \
    \            / \"s\"    ; session attributes\n                              /\
    \ \"ms\" ) ; media and session attributes\n      mo-att-cap-list   = mandatory-optional-att-cap-list\
    \ /\n                                    mandatory-att-cap-list /\n          \
    \                             optional-att-cap-list\n      mandatory-optional-att-cap-list\
    \  = mandatory-att-cap-list\n                                             \",\"\
    \ optional-att-cap-list\n      mandatory-att-cap-list           = att-cap-list\n\
    \      optional-att-cap-list            = \"[\" att-cap-list \"]\"\n      att-cap-list\
    \      = att-cap-num *(\",\" att-cap-num)\n      att-cap-num       = 1*10(DIGIT)\
    \     ;defined in [RFC5234]\n      BAR               = \"|\"\n      DELETE   \
    \         = \"-\"\n   Note that white space is not permitted within the attribute-config-\n\
    \   list rule.\n   Each attribute configuration list can optionally begin with\n\
    \   instructions for how to handle attributes that are part of the actual\n  \
    \ configuration SDP session description (i.e., the \"a=\" lines present\n   in\
    \ the original SDP session description).  By default, such\n   attributes will\
    \ remain as part of the potential configuration in\n   question.  However, if\
    \ delete-attributes indicates \"-m\", then all\n   attribute lines within the\
    \ media description in question will be\n   deleted in the resulting potential\
    \ configuration SDP session\n   description (i.e., all \"a=\" lines under the\
    \ \"m=\" line in question).\n   If delete-attributes indicates \"-s\", then all\
    \ attribute lines at the\n   session level will be deleted (i.e., all \"a=\" lines\
    \ before the first\n   \"m=\" line).  If delete-attributes indicates \"-ms\",\
    \ then all attribute\n   lines within this media description (\"m=\" line) and\
    \ all attribute\n   lines at the session level will be deleted.\n   The attribute\
    \ capability list comes next (if included).  It contains\n   one or more alternative\
    \ lists of attribute capabilities.  The\n   alternative attribute capability lists\
    \ are separated by a vertical\n   bar (\"|\"), and each list contains one or more\
    \ attribute capabilities\n   separated by commas (\",\").  The attribute capabilities\
    \ are either\n   mandatory or optional.  Mandatory attribute capabilities MUST\
    \ be\n   supported in order to use the potential configuration, whereas\n   optional\
    \ attribute capabilities MAY be supported in order to use the\n   potential configuration.\n\
    \   Within each attribute capability list, all the mandatory attribute\n   capabilities\
    \ (if any) are listed first, and all the optional\n   attribute capabilities (if\
    \ any) are listed last.  The optional\n   attribute capabilities are contained\
    \ within a pair of square brackets\n   (\"[\" and \"]\").  Each attribute capability\
    \ is merely an attribute\n   capability number (att-cap-num) that identifies a\
    \ particular\n   attribute capability by referring to attribute capability numbers\n\
    \   defined above and hence MUST be between 1 and 2^31-1 (both included).\n  \
    \ The following example illustrates the above:\n      a=pcfg:1 a=-m:1,2,[3,4]|1,7,[5]\n\
    \   where\n   o  \"a=-m:1,2,[3,4]|1,7,[5]\" is the attribute configuration list\n\
    \   o  \"-m\" indicates to delete all attributes from the media description\n\
    \      of the actual configuration\n   o  \"1,2,[3,4]\" and \"1,7,[5]\" are both\
    \ attribute capability lists.\n      The two lists are alternatives, since they\
    \ are separated by a\n      vertical bar above\n   o  \"1\", \"2\", and \"7\"\
    \ are mandatory attribute capabilities\n   o  \"3\", \"4\", and \"5\" are optional\
    \ attribute capabilities\n   Note that in the example above, we have a single\
    \ handle (\"1\") for the\n   potential configuration(s), but there are actually\
    \ two different\n   potential configurations (separated by a vertical bar).  This\
    \ is done\n   for message size efficiency reasons, which is especially important\n\
    \   when we add other types of capabilities to the potential\n   configuration.\
    \  If there is a need to provide a unique handle for\n   each, then separate \"\
    a=pcfg\" attributes with different handles MUST\n   be used instead.\n   Each\
    \ referenced attribute capability in the potential configuration\n   will result\
    \ in the corresponding attribute name and its associated\n   value (contained\
    \ inside the attribute capability) being added to the\n   resulting potential\
    \ configuration SDP session description.\n   Alternative attribute capability\
    \ lists are separated by a vertical\n   bar (\"|\"), the scope of which extends\
    \ to the next alternative (i.e.,\n   \",\" has higher precedence than \"|\").\
    \  The alternatives are ordered by\n   preference with the most preferred listed\
    \ first.  In order for a\n   recipient of the SDP session description (e.g., an\
    \ answerer receiving\n   this in an offer) to use this potential configuration,\
    \ exactly one of\n   the alternative lists MUST be selected in its entirety. \
    \ This\n   requires that all mandatory attribute capabilities referenced by the\n\
    \   potential configuration are supported with the attribute values\n   provided.\n\
    \   Transport protocol configuration lists are included in a potential\n   configuration\
    \ by use of the transport-protocol-config-list parameter,\n   which is defined\
    \ by the following ABNF:\n      transport-protocol-config-list =\n           \
    \                \"t=\" trpr-cap-num *(BAR trpr-cap-num)\n      trpr-cap-num \
    \       = 1*10(DIGIT)   ; defined in [RFC5234]\n   Note that white space is not\
    \ permitted within this rule.\n   The trpr-cap-num refers to transport protocol\
    \ capability numbers\n   defined above and hence MUST be between 1 and 2^31-1\
    \ (both included).\n   Alternative transport protocol capabilities are separated\
    \ by a\n   vertical bar (\"|\").  The alternatives are ordered by preference with\n\
    \   the most preferred listed first.  If there are no transport protocol\n   capabilities\
    \ included in a potential configuration at the media\n   level, the transport\
    \ protocol information from the associated \"m=\"\n   line MUST be used.  In order\
    \ for a recipient of the SDP session\n   description (e.g., an answerer receiving\
    \ this in an offer) to use\n   this potential configuration, exactly one of the\
    \ alternatives MUST be\n   selected.  This requires that the transport protocol\
    \ in question is\n   supported.\n      In the presence of intermediaries (the\
    \ existence of which may not\n      be known), care should be taken with assuming\
    \ that the transport\n      protocol in the \"m=\" line will not be modified by\
    \ an intermediary.\n      Use of an explicit transport protocol capability will\
    \ guard\n      against capability negotiation implications of that.\n   Extension\
    \ capabilities can be included in a potential configuration\n   as well by use\
    \ of extension configuration lists.  Extension\n   configuration lists MUST adhere\
    \ to the following ABNF:\n      extension-config-list   = [\"+\"] ext-cap-name\
    \ \"=\" ext-cap-list\n      ext-cap-name            = 1*(ALPHA / DIGIT)\n    \
    \  ext-cap-list            = 1*VCHAR   ; defined in [RFC5234]\n   Note that white\
    \ space is not permitted within this rule.\n   The ext-cap-name refers to the\
    \ name of the extension capability and\n   the ext-cap-list is here merely defined\
    \ as a sequence of visible\n   characters.  The actual extension supported MUST\
    \ refine both of these\n   further.  For extension capabilities that merely need\
    \ to be\n   referenced by a capability number, it is RECOMMENDED to follow a\n\
    \   structure similar to what has been specified above.  Unsupported or\n   unknown\
    \ potential extension configuration lists in a potential\n   configuration attribute\
    \ MUST be ignored, unless they are prefixed\n   with the plus (\"+\") sign, which\
    \ indicates that the extension is\n   mandatory and MUST be supported in order\
    \ to use that potential\n   configuration.\n      The \"creq\" attribute and its\
    \ associated rules can be used to\n      ensure that required extensions are supported\
    \ in the first place.\n   Extension configuration lists define new potential configuration\n\
    \   parameters and hence they MUST be registered with IANA per the\n   procedures\
    \ defined in Section 6.3.\n   Potential configuration attributes can be provided\
    \ only at the media\n   level; however, it is possible to reference capabilities\
    \ provided at\n   either the session or media level.  There are certain semantic\
    \ rules\n   and restrictions associated with this:\n   A (media-level) potential\
    \ configuration attribute in a given media\n   description MUST NOT reference\
    \ a media-level capability provided in a\n   different media description; doing\
    \ so invalidates that potential\n   configuration (note that a potential configuration\
    \ attribute can\n   contain more than one potential configuration by use of\n\
    \   alternatives).  A potential configuration attribute can however\n   reference\
    \ a session-level capability.  The semantics of doing so\n   depends on the type\
    \ of capability.  In the case of transport protocol\n   capabilities, it has no\
    \ particular implication.  In the case of\n   attribute capabilities, however,\
    \ it does.  More specifically, the\n   attribute name and value (provided within\
    \ that attribute capability)\n   will be considered part of the resulting SDP\
    \ for that particular\n   configuration at the *session* level.  In other words,\
    \ it will be\n   as-if that attribute was provided with that value at the session\n\
    \   level in the first place.  As a result, the base SDP Capability\n   Negotiation\
    \ framework REQUIRES that potential configurations do not\n   reference any session-level\
    \ attribute capabilities that contain\n   media-level attributes (since that would\
    \ place a media-level\n   attribute at the session level).  Extensions may modify\
    \ this\n   behavior, as long as it is fully backwards compatible with the base\n\
    \   specification.\n   Individual media streams perform capability negotiation\
    \ individually,\n   and hence it is possible that one media stream (where the\
    \ attribute\n   was part of a potential configuration) chose a configuration without\n\
    \   a session-level attribute that was chosen by another media stream.\n   The\
    \ session-level attribute however remains \"active\" and applies to\n   the entire\
    \ resulting potential configuration SDP session description.\n   In theory, this\
    \ is problematic if one or more session-level\n   attributes either conflicts\
    \ with or potentially interacts with\n   another session-level or media-level\
    \ attribute in an undefined\n   manner.  In practice, such examples seem to be\
    \ rare (at least with\n   the SDP attributes that had been defined at time of\
    \ publication of\n   this document).\n      A related set of problems can occur\
    \ if we need coordination\n      between session-level attributes from multiple\
    \ media streams in\n      order for a particular functionality to work.  The grouping\n\
    \      framework [RFC5888] is an example of this.  If we use the SDP\n      Capability\
    \ Negotiation framework to select a session-level group\n      attribute (provided\
    \ as an attribute capability), and we require\n      two media descriptions to\
    \ do this consistently, we could have a\n      problem.  The Forward Error Correction\
    \ (FEC) grouping semantics\n      [RFC4756] is one example where this in theory\
    \ could cause\n      problems, however in practice, it is unclear that there is\
    \ a\n      significant problem with the grouping semantics that had been\n   \
    \   defined at time of publication of this document.\n   Resolving the above issues\
    \ in general requires inter-media stream\n   constraints and synchronized potential\
    \ configuration processing; this\n   would add considerable complexity to the\
    \ overall solution.  In\n   practice, with the SDP attributes defined at time\
    \ of publication of\n   this document, it does not seem to be a significant problem,\
    \ and\n   hence the base SDP Capability Negotiation solution does not provide\
    \ a\n   solution to this issue.  Instead, it is RECOMMENDED that use of\n   session-level\
    \ attributes in a potential configuration is avoided when\n   possible, and when\
    \ not, that such use is examined closely for any\n   potential interaction issues.\
    \  If interaction is possible, the entity\n   generating the SDP session description\
    \ SHOULD NOT assume that well-\n   defined operation will occur at the receiving\
    \ entity.  This implies\n   that mechanisms that might have such interactions\
    \ cannot be used in\n   security critical contexts.\n   The session-level operation\
    \ of extension capabilities is undefined.\n   Consequently, each new session-level\
    \ extension capability defined\n   MUST specify the implication of making it part\
    \ of a configuration at\n   the media level.\n   Below, we provide an example\
    \ of the \"a=pcfg\" attribute in a complete\n   media description in order to\
    \ properly indicate the supporting\n   attributes:\n      v=0\n      o=- 25678\
    \ 753849 IN IP4 192.0.2.1\n      s=\n      c=IN IP4 192.0.2.1\n      t=0 0\n \
    \     m=audio 53456 RTP/AVPF 0 18\n      a=acap:1 crypto:1 AES_CM_128_HMAC_SHA1_32\n\
    \         inline:NzB4d1BINUAvLEw6UzF3WSJ+PSdFcGdUJShpX1Zj|2^20|1:32\n      a=tcap:1\
    \ RTP/AVPF RTP/AVP RTP/SAVP RTP/SAVPF\n      a=pcfg:1 t=4|3 a=1\n      a=pcfg:8\
    \ t=1|2\n   We have two potential configuration attributes listed here.  The\n\
    \   first one (and most preferred, since its configuration number is \"1\")\n\
    \   indicates that either of the profiles RTP/SAVPF or RTP/SAVP\n   (specified\
    \ by the transport protocol capability numbers 4 and 3) can\n   be supported with\
    \ attribute capability 1 (the \"crypto\" attribute);\n   RTP/SAVPF is preferred\
    \ over RTP/SAVP since its capability number (4)\n   is listed first in the preferred\
    \ potential configuration.  Note that\n   although we have a single potential\
    \ configuration attribute and\n   associated handle, we have two potential configurations.\n\
    \   The second potential configuration attribute indicates that the\n   RTP/AVPF\
    \ or RTP/AVP profiles can be used, with RTP/AVPF being the\n   preferred one.\
    \  This non-secure RTP alternative is the less preferred\n   one since its configuration\
    \ number is \"8\".  Again, note that we have\n   two potential configurations\
    \ here and hence a total of four potential\n   configurations in the SDP session\
    \ description above.\n"
- title: 3.5.2.  Actual Configuration Attribute
  contents:
  - "3.5.2.  Actual Configuration Attribute\n   The actual configuration attribute\
    \ identifies which of the potential\n   configurations from an offer SDP session\
    \ description was selected and\n   used as the actual configuration to generate\
    \ an answer SDP session\n   description.  This is done by including the configuration\
    \ number and\n   the configuration lists (if any) from the offer that were selected\n\
    \   and used by the answerer in his offer/answer procedure as follows:\n   o \
    \ A selected attribute configuration MUST include the delete-\n      attributes\
    \ and the known and supported parameters from the\n      selected alternative\
    \ mo-att-cap-list (i.e., containing all\n      mandatory and all known and supported\
    \ optional capability numbers\n      from the potential configuration).  If delete-attributes\
    \ were not\n      included in the potential configuration, they will of course\
    \ not\n      be present here either.\n   o  A selected transport protocol configuration\
    \ MUST include the\n      selected transport protocol capability number.\n   o\
    \  A selected potential extension configuration MUST include the\n      selected\
    \ extension configuration parameters as specified for that\n      particular extension.\n\
    \   o  When a configuration list contains alternatives (separated by\n      \"\
    |\"), the selected configuration only MUST be provided.\n   Note that the selected\
    \ configuration number and all selected\n   capability numbers used in the actual\
    \ configuration attribute refer\n   to those from the offer: not the answer.\n\
    \      The answer may for example include capabilities as well to inform\n   \
    \   the offerer of the answerers capabilities above and beyond the\n      negotiated\
    \ configuration.  The actual configuration attribute does\n      not refer to\
    \ any of those answer capabilities though.\n   The Actual Configuration Attribute\
    \ (\"a=acfg\") is defined as follows:\n      a=acfg: <config-number> [<sel-cfg-list>]\n\
    \   where <config-number> is an integer between 1 and 2^31-1 (both\n   included)\
    \ that refers to the selected potential configuration.  The\n   attribute can\
    \ be provided only at the media level.\n   The \"acfg\" attribute adheres to the\
    \ RFC 4566 \"attribute\" production,\n   with an att-value defined as follows:\n\
    \      att-value      = config-number [1*WSP sel-cfg-list]\n                 \
    \       ;config-number defined in Section 3.5.1.\n      sel-cfg-list   = sel-cfg\
    \ *(1*WSP sel-cfg)\n      sel-cfg        = sel-attribute-config /\n          \
    \                 sel-transport-protocol-config /\n                          \
    \ sel-extension-config\n      sel-attribute-config =\n               \"a=\" [delete-attributes\
    \ \":\"] mo-att-cap-list\n                                    ; defined in Section\
    \ 3.5.1.\n      sel-transport-protocol-config =\n               \"t=\" trpr-cap-num\
    \    ; defined in Section 3.5.1.\n      sel-extension-config =\n             \
    \  ext-cap-name \"=\" 1*VCHAR   ; defined in Section 3.5.1.\n   Note that white\
    \ space is not permitted before the config-number.\n   The actual configuration\
    \ (\"a=acfg\") attribute can be provided only at\n   the media level.  There MUST\
    \ NOT be more than one occurrence of an\n   actual configuration attribute within\
    \ a given media description.\n   Below, we provide an example of the \"a=acfg\"\
    \ attribute (building on\n   the previous example with the potential configuration\
    \ attribute):\n      v=0\n      o=- 24351 621814 IN IP4 192.0.2.2\n      s=\n\
    \      c=IN IP4 192.0.2.2\n      t=0 0\n      m=audio 54568 RTP/SAVPF 0\n    \
    \  a=crypto:1 AES_CM_128_HMAC_SHA1_32\n         inline:WSJ+PSdFcGdUJShpX1ZjNzB4d1BINUAvLEw6UzF3|2^20|1:32\n\
    \      a=acfg:1 t=4 a=1\n   It indicates that the answerer used an offer consisting\
    \ of potential\n   configuration number 1 with transport protocol capability 4\
    \ from the\n   offer (RTP/SAVPF) and attribute capability 1 (the \"crypto\"\n\
    \   attribute).  The answerer includes his own \"crypto\" attribute as\n   well.\n"
- title: 3.6.  Offer/Answer Model Extensions
  contents:
  - "3.6.  Offer/Answer Model Extensions\n   In this section, we define extensions\
    \ to the offer/answer model\n   defined in [RFC3264] to allow for potential configurations\
    \ to be\n   included in an offer, where they constitute alternative offers that\n\
    \   may be accepted by the answerer instead of the actual\n   configuration(s)\
    \ included in the \"m=\" line(s).\n   The procedures defined in the following\
    \ subsections apply to both\n   unicast and multicast streams.\n"
- title: 3.6.1.  Generating the Initial Offer
  contents:
  - "3.6.1.  Generating the Initial Offer\n   An offerer that wants to use the SDP\
    \ Capability Negotiation defined\n   in this document MUST include the following\
    \ in the offer:\n   o  Zero or more attribute capability attributes.  There MUST\
    \ be an\n      attribute capability attribute (\"a=acap\") as defined in Section\n\
    \      3.4.1 for each attribute name and associated value (if any) that\n    \
    \  needs to be indicated as a capability in the offer.  Attribute\n      capabilities\
    \ may be included irrespective of whether or not they\n      are referenced by\
    \ a potential configuration.\n      Session-level attributes and associated values\
    \ MUST be provided in\n      attribute capabilities only at the session level,\
    \ whereas media-\n      level attributes and associated values can be provided\
    \ in\n      attribute capabilities at either the media level or session level.\n\
    \      Attributes that are allowed at either the session or media level\n    \
    \  can be provided in attribute capabilities at either level.\n   o  Zero or more\
    \ transport protocol capability attributes.  There MUST\n      be transport protocol\
    \ capabilities as defined in Section 3.4.2\n      with values for each transport\
    \ protocol that needs to be indicated\n      as a capability in the offer.\n \
    \     Transport protocol capabilities may be included irrespective of\n      whether\
    \ or not they are referenced by a potential configuration.\n      Transport protocols\
    \ that apply to multiple media descriptions\n      SHOULD be provided as transport\
    \ protocol capabilities at the\n      session level whereas transport protocols\
    \ that apply only to a\n      specific media description (\"m=\" line), SHOULD\
    \ be provided as\n      transport protocol capabilities within that particular\
    \ media\n      description.  In either case, there MUST NOT be more than a single\n\
    \      \"a=tcap\" attribute at the session level and a single \"a=tcap\"\n   \
    \   attribute in each media description.\n   o  Zero or more extension capability\
    \ attributes.  There MUST be one\n      or more extension capability attributes\
    \ (as outlined in Section\n      3.4.3) for each extension capability that is\
    \ referenced by a\n      potential configuration.  Extension capability attributes\
    \ that are\n      not referenced by a potential configuration can be provided\
    \ as\n      well.\n   o  Zero or more potential configuration attributes.  There\
    \ MUST be\n      one or more potential configuration attributes (\"a=pcfg\"),\
    \ as\n      defined in Section 3.5.1, in each media description where\n      alternative\
    \ potential configurations are to be negotiated.  Each\n      potential configuration\
    \ attribute MUST adhere to the rules\n      provided in Section 3.5.1 and the\
    \ additional rules provided below.\n   If the offerer requires support for one\
    \ or more extensions (besides\n   the base protocol defined here), then the offerer\
    \ MUST include one or\n   more \"a=creq\" attributes as follows:\n   o  If support\
    \ for one or more capability negotiation extensions is\n      required for the\
    \ entire session description, then option tags for\n      those extensions MUST\
    \ be included in a single session-level \"creq\"\n      attribute.\n   o  For\
    \ each media description that requires support for one or more\n      capability\
    \ negotiation extensions not listed at the session level,\n      a single \"creq\"\
    \ attribute containing all the required extensions\n      for that media description\
    \ MUST be included within the media\n      description (in accordance with Section\
    \ 3.3.2).\n   Note that extensions that only need to be supported by a particular\n\
    \   potential configuration can use the \"mandatory\" extension prefix\n   (\"\
    +\") within the potential configuration (see Section 3.5.1).\n   The offerer SHOULD\
    \ furthermore include the following:\n   o  A supported capability negotiation\
    \ extension attribute (\"a=csup\")\n      at the session level and/or media level\
    \ as defined in Section\n      3.3.2 for each capability negotiation extension\
    \ supported by the\n      offerer and not included in a corresponding \"a=creq\"\
    \ attribute\n      (i.e., at the session level or in the same media description).\n\
    \      Option tags provided in a \"a=csup\" attribute at the session level\n \
    \     indicate extensions supported for the entire session description,\n    \
    \  whereas option tags provided in a \"a=csup\" attribute in a media\n      description\
    \ indicate extensions supported for only that particular\n      media description.\n\
    \   Capabilities provided in an offer merely indicate what the offerer is\n  \
    \ capable of doing.  They do not constitute a commitment or even an\n   indication\
    \ to use them.  In contrast, each potential configuration\n   constitutes an alternative\
    \ offer that the offerer would like to use.\n   The potential configurations MUST\
    \ be used by the answerer to\n   negotiate and establish the session.\n   The\
    \ offerer MUST include one or more potential configuration\n   attributes (\"\
    a=pcfg\") in each media description where the offerer\n   wants to provide alternative\
    \ offers (in the form of potential\n   configurations).  Each potential configuration\
    \ attribute in a given\n   media description MUST contain a unique configuration\
    \ number and\n   zero, one or more potential configuration lists, as described\
    \ in\n   Section 3.5.1.  Each potential configuration list MUST refer to\n   capabilities\
    \ that are provided at the session level or within that\n   particular media description;\
    \ otherwise, the potential configuration\n   is considered invalid.  The base\
    \ SDP Capability Negotiation framework\n   REQUIRES that potential configurations\
    \ not reference any session-\n   level attribute capabilities that contain media-level-only\n\
    \   attributes; however, extensions may modify this behavior, as long as\n   it\
    \ is fully backwards compatible with the base specification.\n   Furthermore,\
    \ it is RECOMMENDED that potential configurations avoid\n   use of session-level\
    \ capabilities whenever possible; refer to Section\n   3.5.1.\n   The current\
    \ actual configuration is included in the \"m=\" line (as\n   defined by [RFC3264])\
    \ and any associated parameters for the media\n   description (e.g., attribute\
    \ (\"a=\") and bandwidth (\"b=\") lines).\n   Note that the actual configuration\
    \ is by default the least-preferred\n   configuration, and hence the answerer\
    \ will seek to negotiate use of\n   one of the potential configurations instead.\
    \  If the offerer wishes a\n   different preference for the actual configuration,\
    \ the offerer MUST\n   include a corresponding potential configuration with the\
    \ relevant\n   configuration number (which indicates the relative preference between\n\
    \   potential configurations); this corresponding potential configuration\n  \
    \ should simply duplicate the actual configuration.\n      This can either be\
    \ done implicitly (by not referencing any\n      capabilities), or explicitly\
    \ (by providing and using capabilities\n      for the transport protocol and all\
    \ the attributes that are part of\n      the actual configuration).  The latter\
    \ may help detect\n      intermediaries that modify the actual configuration but\
    \ are not\n      SDP Capability Negotiation aware.\n   Per [RFC3264], once the\
    \ offerer generates the offer, he must be\n   prepared to receive incoming media\
    \ in accordance with that offer.\n   That rule applies here as well, but only\
    \ for the actual\n   configurations provided in the offer: Media received by the\
    \ offerer\n   according to one of the potential configurations MAY be discarded,\n\
    \   until the offerer receives an answer indicating what the actual\n   selected\
    \ configuration is.  Once that answer is received, incoming\n   media MUST be\
    \ processed in accordance with the actual selected\n   configuration indicated\
    \ and the answer received (provided the\n   offer/answer exchange completed successfully).\n\
    \   The above rule assumes that the offerer can determine whether\n   incoming\
    \ media adheres to the actual configuration offered or one of\n   the potential\
    \ configurations instead; this may not always be the\n   case.  If the offerer\
    \ wants to ensure he does not play out any\n   garbage, the offerer SHOULD discard\
    \ all media received before the\n   answer SDP session description is received.\
    \  Conversely, if the\n   offerer wants to avoid clipping, he SHOULD attempt to\
    \ play any\n   incoming media as soon as it is received (at the risk of playing\
    \ out\n   garbage).  In either case, please note that this document does not\n\
    \   place any requirements on the offerer to process and play media\n   before\
    \ answer.  For further details, please refer to Section 3.9.\n"
- title: 3.6.2.  Generating the Answer
  contents:
  - "3.6.2.  Generating the Answer\n   When receiving an offer, the answerer MUST\
    \ check for the presence of\n   a required capability negotiation extension attribute\
    \ (\"a=creq\")\n   provided at the session level.  If one is found, then capability\n\
    \   negotiation MUST be performed.  If none is found, then the answerer\n   MUST\
    \ check each offered media description for the presence of a\n   required capability\
    \ negotiation extension attribute (\"a=creq\") and\n   one or more potential configuration\
    \ attributes (\"a=pcfg\").\n   Capability negotiation MUST be performed for each\
    \ media description\n   where either of those is present in accordance with the\
    \ procedures\n   described below.\n   The answerer MUST first ensure that it supports\
    \ any required\n   capability negotiation extensions:\n   o  If a session-level\
    \ \"creq\" attribute is provided, and it contains\n      an option tag that the\
    \ answerer does not support, then the\n      answerer MUST NOT use any of the\
    \ potential configuration\n      attributes provided for any of the media descriptions.\
    \  Instead,\n      the normal offer/answer procedures MUST continue as per [RFC3264].\n\
    \      Furthermore, the answerer MUST include a session-level supported\n    \
    \  capability negotiation extensions attribute (\"a=csup\") with option\n    \
    \  tags for the capability negotiation extensions supported by the\n      answerer.\n\
    \   o  If a media-level \"creq\" attribute is provided, and it contains an\n \
    \     option tag that the answerer does not support, then the answerer\n     \
    \ MUST NOT use any of the potential configuration attributes\n      provided for\
    \ that particular media description.  Instead, the\n      offer/answer procedures\
    \ for that media description MUST continue\n      as per [RFC3264] (SDP Capability\
    \ Negotiation is still performed\n      for other media descriptions in the SDP\
    \ session description).\n      Furthermore, the answerer MUST include a supported\
    \ capability\n      negotiation extensions attribute (\"a=csup\") in that media\n\
    \      description with option tags for the capability negotiation\n      extensions\
    \ supported by the answerer for that media description.\n   Assuming all required\
    \ capability negotiation extensions are\n   supported, the answerer now proceeds\
    \ as follows.\n   For each media description where capability negotiation is to\
    \ be\n   performed (i.e., all required capability negotiation extensions are\n\
    \   supported and at least one valid potential configuration attribute is\n  \
    \ present), the answerer MUST perform capability negotiation by using\n   the\
    \ most preferred potential configuration that is valid to the\n   answerer, subject\
    \ to any local policies.  A potential configuration\n   is valid to the answerer\
    \ if:\n   1. It is in accordance with the syntax and semantics provided in\n \
    \     Section 3.5.1.\n   2. It contains a configuration number that is unique\
    \ within that\n      media description.\n   3. All attribute capabilities referenced\
    \ by the potential\n      configuration are valid themselves (as defined in Section\
    \ 3.4.1)\n      and each of them is provided either at the session level or within\n\
    \      this particular media description.\n      For session-level attribute capabilities\
    \ referenced, the\n      attributes contained inside them MUST NOT be media-level-only\n\
    \      attributes.  Note that the answerer can only determine this for\n     \
    \ attributes supported by the answerer.  If an attribute is not\n      supported,\
    \ it will simply be ignored by the answerer and hence\n      will not trigger\
    \ an \"invalid\" potential configuration.\n   4. All transport protocol capabilities\
    \ referenced by the potential\n      configuration are valid themselves (as defined\
    \ in Section 3.4.2)\n      and each of them is furthermore provided either at\
    \ the session\n      level or within this particular media description.\n   5.\
    \ All extension capabilities referenced by the potential\n      configuration\
    \ and supported by the answerer are valid themselves\n      (as defined by that\
    \ particular extension) and each of them are\n      furthermore provided either\
    \ at the session level or within this\n      particular media description.  Unknown\
    \ or unsupported extension\n      capabilities MUST be ignored, unless they are\
    \ prefixed with the\n      plus (\"+\") sign, which indicates that the extension\
    \ MUST be\n      supported in order to use that potential configuration.  If the\n\
    \      extension is not supported, that potential configuration is not\n     \
    \ valid to the answerer.\n   The most preferred valid potential configuration\
    \ in a media\n   description is the valid potential configuration with the lowest\n\
    \   configuration number.  The answerer MUST now process the offer for\n   that\
    \ media stream based on the most preferred valid potential\n   configuration.\
    \  Conceptually, this entails the answerer constructing\n   an (internal) offer\
    \ as follows.  First, all capability negotiation\n   parameters from the offer\
    \ SDP session description are removed,\n   thereby yielding an offer SDP session\
    \ description with the actual\n   configuration as if SDP Capability Negotiation\
    \ was not done in the\n   first place.  Secondly, this actual configuration SDP\
    \ session\n   description is modified as follows for each media stream offered,\n\
    \   based on the capability negotiation parameters included originally:\n   o\
    \  If a transport protocol capability is included in the potential\n      configuration,\
    \ then it replaces the transport protocol provided in\n      the \"m=\" line for\
    \ that media description.\n   o  If attribute capabilities are present with a\
    \ delete-attributes\n      session indication (\"-s\") or media and session indication\
    \ (\"-ms\"),\n      then all session-level attributes from the actual configuration\n\
    \      SDP session description MUST be deleted in the resulting potential\n  \
    \    configuration SDP session description in accordance with the\n      procedures\
    \ in Section 3.5.1.  If attribute capabilities are\n      present with a delete-attributes\
    \ media indication (\"-m\") or media\n      and session indication (\"-ms\"),\
    \ then all attributes from the\n      actual configuration SDP session description\
    \ inside this media\n      description MUST be deleted.\n   o  If a session-level\
    \ attribute capability is included, the attribute\n      (and its associated value,\
    \ if any) contained in it MUST be added\n      to the resulting SDP session description.\
    \  All such added session-\n      level attributes MUST be listed before the session-level\n\
    \      attributes that were initially present in the SDP session\n      description.\
    \  Furthermore, the added session-level attributes MUST\n      be added in the\
    \ order they were provided in the potential\n      configuration (see also Section\
    \ 3.5.1).\n         This allows for attributes with implicit preference ordering\
    \ to\n         be added in the desired order; the \"crypto\" attribute [RFC4568]\n\
    \         is one such example.\n   o  If a media-level attribute capability is\
    \ included, then the\n      attribute (and its associated value, if any) MUST\
    \ be added to the\n      resulting SDP session description within the media description\
    \ in\n      question.  All such added media-level attributes MUST be listed\n\
    \      before the media-level attributes that were initially present in\n    \
    \  the media description in question.  Furthermore, the added media-\n      level\
    \ attributes MUST be added in the order they were provided in\n      the potential\
    \ configuration (see also Section 3.5.1).\n   o  If a supported extension capability\
    \ is included, then it MUST be\n      processed in accordance with the rules provided\
    \ for that\n      particular extension capability.\n   The above steps MUST be\
    \ performed exactly once per potential\n   configuration, i.e., there MUST NOT\
    \ be any recursive processing of\n   any additional capability negotiation parameters\
    \ that may (illegally)\n   have been nested inside capabilities themselves.\n\
    \   As an example of this, consider the (illegal) attribute capability\n    a=acap:1\
    \ acap:2 foo:a\n   The resulting potential configuration SDP session description\
    \ will,\n   after the above processing has been done, contain the attribute\n\
    \   capability\n    a=acap:2 foo:a\n   However, since we do not perform any recursive\
    \ processing of\n   capability negotiation parameters, this second attribute capability\n\
    \   parameter will not be processed by the offer/answer procedure.\n   Instead,\
    \ it will simply appear as a (useless) attribute in the SDP\n   session description\
    \ that will be ignored by further processing.\n   Note that a transport protocol\
    \ from the potential configuration\n   replaces the transport protocol in the\
    \ actual configuration, but an\n   attribute capability from the potential configuration\
    \ is simply added\n   to the actual configuration.  In some cases, this can result\
    \ in\n   having one or more meaningless attributes in the resulting potential\n\
    \   configuration SDP session description, or worse, ambiguous or\n   potentially\
    \ even illegal attributes.  Use of delete-attributes for\n   the session- and/or\
    \ media-level attributes MUST be done to avoid such\n   scenarios.  Nevertheless,\
    \ it is RECOMMENDED that implementations\n   ignore meaningless attributes that\
    \ may result from potential\n   configurations.\n      For example, if the actual\
    \ configuration was using Secure RTP and\n      included an \"a=crypto\" attribute\
    \ for the SRTP keying material,\n      then use of a potential configuration that\
    \ uses plain RTP would\n      make the \"crypto\" attribute meaningless.  The\
    \ answerer may or may\n      not ignore such a meaningless attribute.  The offerer\
    \ can here\n      ensure correct operation by using delete-attributes to remove\
    \ the\n      \"crypto\" attribute (but will then need to provide attribute\n \
    \     capabilities to reconstruct the SDP session description with the\n     \
    \ necessary attributes deleted, e.g., rtpmaps).\n   Also note, that while it is\
    \ permissible to include media-level\n   attribute capabilities at the session\
    \ level, the base SDP Capability\n   Negotiation framework defined here does not\
    \ define any procedures for\n   use of them, i.e., the answerer effectively ignores\
    \ them.\n   Please refer to Section 3.6.2.1 for examples of how the answerer may\n\
    \   conceptually \"see\" the resulting offered alternative potential\n   configurations.\n\
    \   The answerer MUST check that he supports all mandatory attribute\n   capabilities\
    \ from the potential configuration (if any), the transport\n   protocol capability\
    \ (if any) from the potential configuration, and\n   all mandatory extension capabilities\
    \ from the potential configuration\n   (if any).  If he does not, the answerer\
    \ MUST proceed to the second\n   most preferred valid potential configuration\
    \ for the media\n   description, etc.\n   o  In the case of attribute capabilities,\
    \ support implies that the\n      attribute name contained in the capability is\
    \ supported and it can\n      (and will) be negotiated successfully in the offer/answer\
    \ exchange\n      with the value provided.  This does not necessarily imply that\
    \ the\n      value provided is supported in its entirety.  For example, the\n\
    \      \"a=fmtp\" parameter is often provided with one or more values in a\n \
    \     list, where the offerer and answerer negotiate use of some subset\n    \
    \  of the values provided.  Other attributes may include mandatory\n      and\
    \ optional parts to their values; support for the mandatory part\n      is all\
    \ that is required here.\n         A side effect of the above rule is that whenever\
    \ an \"fmtp\" or\n         \"rtpmap\" parameter is provided as a mandatory attribute\n\
    \         capability, the corresponding media format (codec) must be\n       \
    \  supported and use of it negotiated successfully.  If this is\n         not\
    \ the offerer's intent, the corresponding attribute\n         capabilities must\
    \ be listed as optional instead.\n   o  In the case of transport protocol capabilities,\
    \ support implies\n      that the transport protocol contained in the capability\
    \ is\n      supported and the transport protocol can (and will) be negotiated\n\
    \      successfully in the offer/answer exchange.\n   o  In the case of extension\
    \ capabilities, the extension MUST define\n      the rules for when the extension\
    \ capability is considered\n      supported and those rules MUST be satisfied.\n\
    \   If the answerer has exhausted all potential configurations for the\n   media\
    \ description, without finding a valid one that is also\n   supported, then the\
    \ answerer MUST process the offered media stream\n   based on the actual configuration\
    \ plus any session-level attributes\n   added by a valid and supported potential\
    \ configuration from another\n   media description in the offered SDP session\
    \ description.\n   The above process describes potential configuration selection\
    \ as a\n   per-media-stream process.  Inter-media stream coordination of\n   selected\
    \ potential configurations however is required in some cases.\n   First of all,\
    \ session-level attributes added by a potential\n   configuration for one media\
    \ description MUST NOT cause any problems\n   for potential configurations selected\
    \ by other media descriptions in\n   the offer SDP session description.  If the\
    \ session-level attributes\n   are mandatory, then those session-level attributes\
    \ MUST furthermore\n   be supported by the session as a whole (i.e., all the media\n\
    \   descriptions if relevant).  As mentioned earlier, this adds\n   additional\
    \ complexity to the overall processing and hence it is\n   RECOMMENDED not to\
    \ use session-level attribute capabilities in\n   potential configurations, unless\
    \ absolutely necessary.\n   Once the answerer has selected a valid and supported\
    \ offered\n   potential configuration for all of the media streams (or has fallen\n\
    \   back to the actual configuration plus any added session attributes),\n   the\
    \ answerer MUST generate a valid virtual answer SDP session\n   description based\
    \ on the selected potential configuration SDP session\n   description, as \"seen\"\
    \ by the answerer using normal offer/answer\n   rules (see Section 3.6.2.1 for\
    \ examples).  The actual answer SDP\n   session description is formed from the\
    \ virtual answer SDP session\n   description as follows: if the answerer selected\
    \ one of the potential\n   configurations in a media description, the answerer\
    \ MUST include an\n   actual configuration attribute (\"a=acfg\") within that\
    \ media\n   description.  The \"a=acfg\" attribute MUST identify the configuration\n\
    \   number for the selected potential configuration as well as the actual\n  \
    \ parameters that were used from that potential configuration; if the\n   potential\
    \ configuration included alternatives, the selected\n   alternatives only MUST\
    \ be included.  Only the known and supported\n   parameters will be included.\
    \  Unknown or unsupported parameters MUST\n   NOT be included in the actual configuration\
    \ attribute.  In the case\n   of attribute capabilities, only the known and supported\
    \ capabilities\n   are included; unknown or unsupported attribute capabilities\
    \ MUST NOT\n   be included.\n   If the answerer supports one or more capability\
    \ negotiation\n   extensions that were not included in a required capability\n\
    \   negotiation extensions attribute in the offer, then the answerer\n   SHOULD\
    \ furthermore include a supported capability negotiation\n   attribute (\"a=csup\"\
    ) at the session level with option tags for the\n   extensions supported across\
    \ media streams.  Also, if the answerer\n   supports one or more capability negotiation\
    \ extensions for only\n   particular media descriptions, then a supported capability\n\
    \   negotiation attribute with those option tags SHOULD be included\n   within\
    \ each relevant media description.  The required capability\n   negotiation attribute\
    \ (\"a=creq\") MUST NOT be used in an answer.\n   The offerer's originally provided\
    \ actual configuration is contained\n   in the offer media description's \"m=\"\
    \ line (and associated\n   parameters).  The answerer MAY send media to the offerer\
    \ in\n   accordance with that actual configuration as soon as it receives the\n\
    \   offer; however, it MUST NOT send media based on that actual\n   configuration\
    \ if it selects an alternative potential configuration.\n   If the answerer selects\
    \ one of the potential configurations, then the\n   answerer MAY immediately start\
    \ to send media to the offerer in\n   accordance with the selected potential configuration;\
    \ however, the\n   offerer MAY discard such media or play out garbage until the\
    \ offerer\n   receives the answer.  Please refer to Section 3.9.  for additional\n\
    \   considerations and possible alternative solutions outside the base\n   SDP\
    \ Capability Negotiation framework.\n   If the answerer selected a potential configuration\
    \ instead of the\n   actual configuration, then it is RECOMMENDED that the answerer\
    \ send\n   back an answer SDP session description as soon as possible.  This\n\
    \   minimizes the risk of having media discarded or played out as garbage\n  \
    \ by the offerer.  In the case of SIP [RFC3261] without any extensions,\n   this\
    \ implies that if the offer was received in an INVITE message,\n   then the answer\
    \ SDP session description should be provided in the\n   first non-100 provisional\
    \ response sent back (per RFC 3261, the\n   answer would need to be repeated in\
    \ the 200 response as well, unless\n   a relevant extension such as [RFC3262]\
    \ is being used).\n"
- title: 3.6.2.1.  Example Views of Potential Configurations
  contents:
  - "3.6.2.1.  Example Views of Potential Configurations\n   The following examples\
    \ illustrate how the answerer may conceptually\n   \"see\" a potential configuration.\
    \  Consider the following offered SDP\n   session description:\n      v=0\n  \
    \    o=alice 2891092738 2891092738 IN IP4 lost.example.com\n      s=\n      t=0\
    \ 0\n      c=IN IP4 lost.example.com\n      a=tool:foo\n      a=acap:1 key-mgmt:mikey\
    \ AQAFgM0XflABAAAAAAAAAAAAAAsAyO...\n      a=tcap:1 RTP/SAVP RTP/AVP\n      m=audio\
    \ 59000 RTP/AVP 98\n      a=rtpmap:98 AMR/8000\n      a=acap:2 crypto:1 AES_CM_128_HMAC_SHA1_32\n\
    \         inline:NzB4d1BINUAvLEw6UzF3WSJ+PSdFcGdUJShpX1Zj|2^20|1:32\n      a=pcfg:1\
    \ t=1 a=1|2\n      m=video 52000 RTP/AVP 31\n      a=rtpmap:31 H261/90000\n  \
    \    a=acap:3 crypto:1 AES_CM_128_HMAC_SHA1_80\n         inline:d0RmdmcmVCspeEc3QGZiNWpVLFJhQX1cfHAwJSoj|2^20|1:32\n\
    \      a=pcfg:1 t=1 a=1|3\n   This particular SDP session description offers an\
    \ audio stream and a\n   video stream, each of which can either use plain RTP\
    \ (actual\n   configuration) or Secure RTP (potential configuration).  Furthermore,\n\
    \   two different keying mechanisms are offered, namely session-level Key\n  \
    \ Management Extensions using MIKEY (attribute capability 1) and media-\n   level\
    \ SDP security descriptions (attribute capabilities 2 and 3).\n   There are several\
    \ potential configurations here, however, below we\n   show the one the answerer\
    \ \"sees\" when using potential configuration 1\n   for both audio and video,\
    \ and furthermore using attribute capability\n   1 (MIKEY) for both (we have removed\
    \ all the capability negotiation\n   attributes for clarity):\n      v=0\n   \
    \   o=alice 2891092738 2891092738 IN IP4 lost.example.com\n      s=\n      t=0\
    \ 0\n      c=IN IP4 lost.example.com\n      a=tool:foo\n      a=key-mgmt:mikey\
    \ AQAFgM0XflABAAAAAAAAAAAAAAsAyO...\n      m=audio 59000 RTP/SAVP 98\n      a=rtpmap:98\
    \ AMR/8000\n      m=video 52000 RTP/SAVP 31\n      a=rtpmap:31 H261/90000\n  \
    \ Note that the transport protocol in the media descriptions indicate\n   use\
    \ of Secure RTP.\n   Below, we show the offer the answerer \"sees\" when using\
    \ potential\n   configuration 1 for both audio and video and furthermore using\n\
    \   attribute capability 2 and 3, respectively, (SDP security\n   descriptions)\
    \ for the audio and video stream -- note the order in\n   which the resulting\
    \ attributes are provided:\n      v=0\n      o=alice 2891092738 2891092738 IN\
    \ IP4 lost.example.com\n      s=\n      t=0 0\n      c=IN IP4 lost.example.com\n\
    \      a=tool:foo\n      m=audio 59000 RTP/SAVP 98\n      a=crypto:1 AES_CM_128_HMAC_SHA1_32\n\
    \         inline:NzB4d1BINUAvLEw6UzF3WSJ+PSdFcGdUJShpX1Zj|2^20|1:32\n      a=rtpmap:98\
    \ AMR/8000\n      m=video 52000 RTP/SAVP 31\n      a=crypto:1 AES_CM_128_HMAC_SHA1_80\n\
    \         inline:d0RmdmcmVCspeEc3QGZiNWpVLFJhQX1cfHAwJSoj|2^20|1:32\n        \
    \ a=rtpmap:31 H261/90000\n   Again, note that the transport protocol in the media\
    \ descriptions\n   indicate use of Secure RTP.\n   And finally, we show the offer\
    \ the answerer \"sees\" when using\n   potential configuration 1 with attribute\
    \ capability 1 (MIKEY) for the\n   audio stream, and potential configuration 1\
    \ with attribute capability\n   3 (SDP security descriptions) for the video stream:\n\
    \      v=0\n      o=alice 2891092738 2891092738 IN IP4 lost.example.com\n    \
    \  s=\n      t=0 0\n      c=IN IP4 lost.example.com\n      a=key-mgmt:mikey AQAFgM0XflABAAAAAAAAAAAAAAsAyO...\n\
    \      a=tool:foo\n      m=audio 59000 RTP/SAVP 98\n      a=rtpmap:98 AMR/8000\n\
    \      m=video 52000 RTP/SAVP 31\n      a=crypto:1 AES_CM_128_HMAC_SHA1_80\n \
    \        inline:d0RmdmcmVCspeEc3QGZiNWpVLFJhQX1cfHAwJSoj|2^20|1:32\n      a=rtpmap:31\
    \ H261/90000\n"
- title: 3.6.3.  Offerer Processing of the Answer
  contents:
  - "3.6.3.  Offerer Processing of the Answer\n   When the offerer attempted to use\
    \ SDP Capability Negotiation in the\n   offer, the offerer MUST examine the answer\
    \ for actual use of SDP\n   Capability Negotiation.\n   For each media description\
    \ where the offerer included a potential\n   configuration attribute (\"a=pcfg\"\
    ), the offerer MUST first examine\n   that media description for the presence\
    \ of a valid actual\n   configuration attribute (\"a=acfg\").  An actual configuration\n\
    \   attribute is valid if:\n   o  it refers to a potential configuration that\
    \ was present in the\n      corresponding offer, and\n   o  it contains the actual\
    \ parameters that were used from that\n      potential configuration; if the potential\
    \ configuration included\n      alternatives, the selected alternatives only MUST\
    \ be included.\n      Note that the answer will include only parameters and attribute\n\
    \      capabilities that are known and supported by the answerer, as\n      described\
    \ in Section 3.6.2.\n   If a valid actual configuration attribute is not present\
    \ in a media\n   description, then the offerer MUST process the answer SDP session\n\
    \   description for that media stream per the normal offer/answer rules\n   defined\
    \ in [RFC3264].  However, if a valid one is found, the offerer\n   MUST instead\
    \ process the answer as follows:\n   o  The actual configuration attribute specifies\
    \ which of the\n      potential configurations was used by the answerer to generate\
    \ the\n      answer for this media stream.  This includes all the supported\n\
    \      attribute capabilities and the transport capabilities referenced\n    \
    \  by the potential configuration selected, where the attribute\n      capabilities\
    \ have any associated delete-attributes included.\n      Extension capabilities\
    \ supported by the answerer are included as\n      well.\n   o  The offerer MUST\
    \ now process the answer in accordance with the\n      rules in [RFC3264], except\
    \ that it must be done as if the offer\n      consisted of the selected potential\
    \ configuration instead of the\n      original actual configuration, including\
    \ any transport protocol\n      changes in the media (\"m=\") line(s), attributes\
    \ added and deleted\n      by the potential configuration at the media and session\
    \ level, and\n      any extensions used.  If this derived answer is not a valid\
    \ answer\n      to the potential configuration offer selected by the answerer,\
    \ the\n      offerer MUST instead continue further processing as it would have\n\
    \      for a regular offer/answer exchange, where the answer received\n      does\
    \ not adhere to the rules of [RFC3264].\n   If the offer/answer exchange was successful,\
    \ and if the answerer\n   selected one of the potential configurations from the\
    \ offer as the\n   actual configuration, and the selected potential configuration\n\
    \   differs from the actual configuration in the offer (the \"m=\", \"a=\",\n\
    \   etc., lines), then the offerer SHOULD initiate another offer/answer\n   exchange.\
    \  This second offer/answer exchange will not modify the\n   session in any way;\
    \ however, it will help intermediaries (e.g.,\n   middleboxes), which look at\
    \ the SDP session description but do not\n   support the capability negotiation\
    \ extensions, understand the details\n   of the media stream(s) that were actually\
    \ negotiated.  This new offer\n   MUST contain the selected potential configuration\
    \ as the actual\n   configuration, i.e., with the actual configuration used in\
    \ the \"m=\"\n   line and any other relevant attributes, bandwidth parameters,\
    \ etc.\n   Note that, per normal offer/answer rules, the second offer/answer\n\
    \   exchange still needs to update the version number in the \"o=\" line\n   (<sess-version>\
    \ in [RFC4566]).  Attribute lines carrying keying\n   material SHOULD repeat the\
    \ keys from the previous offer, unless\n   re-keying is necessary, e.g., due to\
    \ a previously forked SIP INVITE\n   request.  Please refer to Section 3.12 for\
    \ additional considerations\n   related to intermediaries.\n"
- title: 3.6.4.  Modifying the Session
  contents:
  - "3.6.4.  Modifying the Session\n   Capabilities and potential configurations may\
    \ be included in\n   subsequent offers as defined in [RFC3264], Section 8.  The\
    \ procedure\n   for doing so is similar to that described above with the answer\n\
    \   including an indication of the actual selected configuration used by\n   the\
    \ answerer.\n   If the answer indicates use of a potential configuration from\
    \ the\n   offer, then the guidelines provided in Section 3.6.3 for doing a\n \
    \  second offer/answer exchange using that potential configuration as\n   the\
    \ actual configuration apply.\n"
- title: 3.7.  Interactions with ICE
  contents:
  - "3.7.  Interactions with ICE\n   Interactive Connectivity Establishment (ICE)\
    \ [RFC5245] provides a\n   mechanism for verifying connectivity between two endpoints\
    \ by sending\n   Session Traversal Utilities for NAT (STUN) messages directly\
    \ between\n   the media endpoints.  The basic ICE specification [RFC5245] is only\n\
    \   defined to support UDP-based connectivity; however, it allows for\n   extensions\
    \ to support other transport protocols, such as TCP, which\n   is being specified\
    \ in [ICETCP].  ICE defines a new \"a=candidate\"\n   attribute, which, among\
    \ other things, indicates the possible\n   transport protocol(s) to use and then\
    \ associates a priority with each\n   of them.  The most preferred transport protocol\
    \ that *successfully*\n   verifies connectivity will end up being used.\n   When\
    \ using ICE, it is thus possible that the transport protocol that\n   will be\
    \ used differs from what is specified in the \"m=\" line.  Since\n   both ICE\
    \ and SDP Capability Negotiation may specify alternative\n   transport protocols,\
    \ there is a potentially unintended interaction\n   when using these together.\n\
    \   We provide the following guidelines for addressing that.\n   There are two\
    \ basic scenarios to consider:\n   1) A particular media stream can run over different\
    \ transport\n      protocols (e.g., UDP, TCP, or TCP/TLS), and the intent is simply\n\
    \      to use the one that works (in the preference order specified).\n   2) A\
    \ particular media stream can run over different transport\n      protocols (e.g.,\
    \ UDP, TCP, or TCP/TLS) and the intent is to have\n      the negotiation process\
    \ decide which one to use (e.g., T.38 over\n      TCP or UDP).\n   In scenario\
    \ 1, there should be ICE \"a=candidate\" attributes for UDP,\n   TCP, etc., but\
    \ otherwise nothing special in the potential\n   configuration attributes to indicate\
    \ the desire to use different\n   transport protocols (e.g., UDP, or TCP).  The\
    \ ICE procedures\n   essentially cover the capability negotiation required (by\
    \ having the\n   answerer select something it supports and then use of trial and\
    \ error\n   connectivity checks).\n   Scenario 2 does not require a need to support\
    \ or use ICE.  Instead,\n   we simply use transport protocol capabilities and\
    \ potential\n   configuration attributes to indicate the desired outcome.\n  \
    \ The scenarios may be combined, e.g., by offering potential\n   configuration\
    \ alternatives where some of them can support only one\n   transport protocol\
    \ (e.g., UDP), whereas others can support multiple\n   transport protocols (e.g.,\
    \ UDP or TCP).  In that case, there is a\n   need for tight control over the ICE\
    \ candidates that will be used for\n   a particular configuration, yet the actual\
    \ configuration may want to\n   use all of the ICE candidates.  In that case,\
    \ the ICE candidate\n   attributes can be defined as attribute capabilities and\
    \ the relevant\n   ones should then be included in the proper potential configurations\n\
    \   (for example, candidate attributes for UDP only for potential\n   configurations\
    \ that are restricted to UDP, whereas there could be\n   candidate attributes\
    \ for UDP, TCP, and TCP/TLS for potential\n   configurations that can use all\
    \ three).  Furthermore, use of the\n   delete-attributes in a potential configuration\
    \ can be used to ensure\n   that ICE will not end up using a transport protocol\
    \ that is not\n   desired for a particular configuration.\n   SDP Capability Negotiation\
    \ recommends use of a second offer/answer\n   exchange when the negotiated actual\
    \ configuration was one of the\n   potential configurations from the offer (see\
    \ Section 3.6.3).\n   Similarly, ICE requires use of a second offer/answer exchange\
    \ if the\n   chosen candidate is not the same as the one in the m/c-line from\
    \ the\n   offer.  When ICE and capability negotiation are used at the same\n \
    \  time, the two secondary offer/answer exchanges SHOULD be combined to\n   a\
    \ single one.\n"
- title: 3.8.  Interactions with SIP Option Tags
  contents:
  - "3.8.  Interactions with SIP Option Tags\n   SIP [RFC3261] allows for SIP extensions\
    \ to define a SIP option tag\n   that identifies the SIP extension.  Support for\
    \ one or more such\n   extensions can be indicated by use of the SIP Supported\
    \ header, and\n   required support for one or more such extensions can be indicated\
    \ by\n   use of the SIP Require header.  The \"a=csup\" and \"a=creq\" attributes\n\
    \   defined by the SDP Capability Negotiation framework are similar,\n   except\
    \ that support for these two attributes by themselves cannot be\n   guaranteed\
    \ (since they are specified as extensions to the SDP\n   specification [RFC4566]\
    \ itself).\n   SIP extensions with associated option tags can introduce enhancements\n\
    \   to not only SIP, but also SDP.  This is for example the case for SIP\n   preconditions\
    \ defined in [RFC3312].  When using SDP Capability\n   Negotiation, some potential\
    \ configurations may include certain SDP\n   extensions, whereas others may not.\
    \  Since the purpose of the SDP\n   Capability Negotiation is to negotiate a session\
    \ based on the\n   features supported by both sides, use of the SIP Require header\
    \ for\n   such extensions may not produce the desired result.  For example, if\n\
    \   one potential configuration requires SIP preconditions support,\n   another\
    \ does not, and the answerer does not support preconditions,\n   then use of the\
    \ SIP Require header for preconditions would result in\n   a session failure,\
    \ in spite of the fact that a valid and supported\n   potential configuration\
    \ was included in the offer.\n   In general, this can be alleviated by use of\
    \ mandatory and optional\n   attribute capabilities in a potential configuration.\
    \  There are\n   however cases where permissible SDP values are tied to the use\
    \ of the\n   SIP Require header.  SIP preconditions [RFC3312] is one such example,\n\
    \   where preconditions with a \"mandatory\" strength-tag can only be used\n \
    \  when a SIP Require header with the SIP option tag \"precondition\" is\n   included.\
    \  Future SIP extensions that may want to use the SDP\n   Capability Negotiation\
    \ framework should avoid such coupling.\n"
- title: 3.9.  Processing Media before Answer
  contents:
  - "3.9.  Processing Media before Answer\n   The offer/answer model [RFC3264] requires\
    \ an offerer to be able to\n   receive media in accordance with the offer prior\
    \ to receiving the\n   answer.  This property is retained with the SDP Capability\n\
    \   Negotiation extensions defined here, but only when the actual\n   configuration\
    \ is selected by the answerer.  If a potential\n   configuration is chosen, the\
    \ offerer may decide not to process any\n   media received before the answer is\
    \ received.  This may lead to\n   clipping.  Consequently, the SDP Capability\
    \ Negotiation framework\n   recommends sending back an answer SDP session description\
    \ as soon as\n   possible.\n   The issue can be resolved by introducing a three-way\
    \ handshake.  In\n   the case of SIP, this can, for example, be done by defining\
    \ a\n   precondition [RFC3312] for capability negotiation (or by using an\n  \
    \ existing precondition that is known to generate a second offer/answer\n   exchange\
    \ before proceeding with the session).  However, preconditions\n   are often viewed\
    \ as complicated to implement and they may add to\n   overall session establishment\
    \ delay by requiring an extra\n   offer/answer exchange.\n   An alternative three-way\
    \ handshake can be performed by use of ICE\n   [RFC5245].  When ICE is being used,\
    \ and the answerer receives a STUN\n   Binding Request for any one of the accepted\
    \ media streams from the\n   offerer, the answerer knows the offer has received\
    \ his answer.  At\n   that point, the answerer knows that the offerer will be\
    \ able to\n   process incoming media according to the negotiated configuration\
    \ and\n   hence he can start sending media without the risk of the offerer\n \
    \  either discarding it or playing garbage.\n   Please note that, the above considerations\
    \ notwithstanding, this\n   document does not place any requirements on the offerer\
    \ to process\n   and play media before answer; it merely provides recommendations\
    \ for\n   how to ensure that media sent by the answerer and received by the\n\
    \   offerer prior to receiving the answer can in fact be rendered by the\n   offerer.\n\
    \   In some use cases, a three-way handshake is not needed.  An example\n   is\
    \ when the offerer does not need information from the answer, such\n   as keying\
    \ material in the SDP session description, in order to\n   process incoming media.\
    \  The SDP Capability Negotiation framework\n   does not define any such solutions;\
    \ however, extensions may do so.\n   For example, one technique proposed for best-effort\
    \ SRTP in [BESRTP]\n   is to provide different RTP payload type mappings for different\n\
    \   transport protocols used, outside of the actual configuration, while\n   still\
    \ allowing them to be used by the answerer (exchange of keying\n   material is\
    \ still needed, e.g., inband).  The basic SDP Capability\n   Negotiation framework\
    \ defined here does not include the ability to do\n   so; however, extensions\
    \ that enable that may be defined.\n"
- title: 3.10.  Indicating Bandwidth Usage
  contents:
  - "3.10.  Indicating Bandwidth Usage\n   The amount of bandwidth used for a particular\
    \ media stream depends on\n   the negotiated codecs, transport protocol and other\
    \ parameters.  For\n   example the use of Secure RTP [RFC3711] with integrity\
    \ protection\n   requires more bandwidth than plain RTP [RFC3551].  SDP defines\
    \ the\n   bandwidth (\"b=\") parameter to indicate the proposed bandwidth for\
    \ the\n   session or media stream.\n   In SDP, as defined by [RFC4566], each media\
    \ description contains one\n   transport protocol and one or more codecs.  When\
    \ specifying the\n   proposed bandwidth, the worst case scenario must be taken\
    \ into\n   account, i.e., use of the highest bandwidth codec provided, the\n \
    \  transport protocol indicated, and the worst case (bandwidth-wise)\n   parameters\
    \ that can be negotiated (e.g., a 32-bit Hashed Message\n   Authentication Code\
    \ (HMAC) or an 80-bit HMAC).\n   The base SDP Capability Negotiation framework\
    \ does not provide a way\n   to negotiate bandwidth parameters.  The issue thus\
    \ remains; however,\n   it is potentially worse than with SDP per [RFC4566], since\
    \ it is\n   easier to negotiate additional codecs, and furthermore possible to\n\
    \   negotiate different transport protocols.  The recommended approach\n   for\
    \ addressing this is the same as for plain SDP; the worst case (now\n   including\
    \ potential configurations) needs to be taken into account\n   when specifying\
    \ the bandwidth parameters in the actual configuration.\n   This can make the\
    \ bandwidth value less accurate than in SDP per\n   [RFC4566] (due to potential\
    \ greater variability in the potential\n   configuration bandwidth use).  Extensions\
    \ can be defined to address\n   this shortcoming.\n   Note, that when using RTP\
    \ retransmission [RFC4588] with the RTCP-\n   based feedback profile [RFC4585]\
    \ (RTP/AVPF), the retransmitted\n   packets are part of the media stream bandwidth\
    \ when using\n   synchronization source (SSRC) multiplexing.  If a feedback-based\n\
    \   protocol is offered as the actual configuration transport protocol, a\n  \
    \ non-feedback-based protocol is offered as a potential configuration\n   transport\
    \ protocol and ends up being used, the actual bandwidth usage\n   may be lower\
    \ than the indicated bandwidth value in the offer (and\n   vice versa).\n"
- title: 3.11.  Dealing with Large Number of Potential Configurations
  contents:
  - "3.11.  Dealing with Large Number of Potential Configurations\n   When using the\
    \ SDP Capability Negotiation, it is easy to generate\n   offers that contain a\
    \ large number of potential configurations.  For\n   example, in the offer:\n\
    \      v=0\n      o=- 25678 753849 IN IP4 192.0.2.1\n      s=\n      c=IN IP4\
    \ 192.0.2.1\n      t=0 0\n      m=audio 53456 RTP/AVP 0 18\n      a=tcap:1 RTP/SAVPF\
    \ RTP/SAVP RTP/AVPF\n      a=acap:1 crypto:1 AES_CM_128_HMAC_SHA1_80\n       \
    \  inline:WVNfX19zZW1jdGwgKCkgewkyMjA7fQp9CnVubGVz|2^20|1:4\n         FEC_ORDER=FEC_SRTP\n\
    \      a=acap:2 key-mgmt:mikey AQAFgM0XflABAAAAAAAAAAAAAAsAyO...\n      a=acap:3\
    \ rtcp-fb:0 nack\n      a=pcfg:1 t=1 a=1,3|2,3\n      a=pcfg:2 t=2 a=1|2\n   \
    \   a=pcfg:3 t=3 a=3\n   we have 5 potential configurations on top of the actual\
    \ configuration\n   for a single media stream.  Adding an extension capability\
    \ with just\n   two alternatives for each would double that number (to 10), and\
    \ doing\n   the equivalent with two media streams would again double that number\n\
    \   (to 20).  While it is easy (and inexpensive) for the offerer to\n   generate\
    \ such offers, processing them at the answering side may not\n   be.  Consequently,\
    \ it is RECOMMENDED that offerers do not create\n   offers with unnecessarily\
    \ large number of potential configurations in\n   them.\n   On the answering side,\
    \ implementers MUST take care to avoid excessive\n   memory and CPU consumption.\
    \  For example, a naive implementation that\n   first generates all the valid\
    \ potential configuration SDP session\n   descriptions internally, could find\
    \ itself being memory exhausted,\n   especially if it supports a large number\
    \ of endpoints.  Similarly, a\n   naive implementation that simply performs iterative\
    \ trial-and-error\n   processing on each possible potential configuration SDP\
    \ session\n   description (in the preference order specified) could find itself\n\
    \   being CPU constrained.  An alternative strategy is to prune the\n   search\
    \ space first by discarding the set of offered potential\n   configurations where\
    \ the transport protocol indicated (if any) is not\n   supported, and/or one or\
    \ more mandatory attribute capabilities (if\n   any) are either not supported\
    \ or not valid.  Potential configurations\n   with unsupported mandatory extension\
    \ configurations in them can be\n   discarded as well.\n"
- title: 3.12.  SDP Capability Negotiation and Intermediaries
  contents:
  - "3.12.  SDP Capability Negotiation and Intermediaries\n   An intermediary is here\
    \ defined as an entity between a SIP user agent\n   A and a SIP user agent B,\
    \ that needs to perform some kind of\n   processing on the SDP session descriptions\
    \ exchanged between A and B,\n   in order for the session establishment to operate\
    \ as intended.\n   Examples of such intermediaries include Session Border Controllers\n\
    \   (SBCs) that may perform media relaying, Proxy Call Session Control\n   Functions\
    \ (P-CSCFs) that may authorize use of a certain amount of\n   network resources\
    \ (bandwidth), etc.  The presence and design of such\n   intermediaries may not\
    \ follow the \"Internet\" model or the SIP\n   requirements for proxies (which\
    \ are not supposed to look in message\n   bodies such as SDP session descriptions);\
    \ however, they are a fact of\n   life in some deployment scenarios and hence\
    \ deserve consideration.\n   If the intermediary needs to understand the characteristics\
    \ of the\n   media sessions being negotiated, e.g., the amount of bandwidth used\n\
    \   or the transport protocol negotiated, then use of the SDP Capability\n   Negotiation\
    \ framework may impact them.  For example, some\n   intermediaries are known to\
    \ disallow answers where the transport\n   protocol differs from the one in the\
    \ offer.  Use of the SDP\n   Capability Negotiation framework in the presence\
    \ of such\n   intermediaries could lead to session failures.  Intermediaries that\n\
    \   need to authorize use of network resources based on the negotiated\n   media\
    \ stream parameters are affected as well.  If they inspect only\n   the offer,\
    \ then they may authorize parameters assuming a different\n   transport protocol,\
    \ codecs, etc., than what is actually being\n   negotiated.  For these, and other,\
    \ reasons it is RECOMMENDED that\n   implementers of intermediaries add support\
    \ for the SDP Capability\n   Negotiation framework.\n   The SDP Capability Negotiation\
    \ framework itself attempts to help out\n   these intermediaries as well, by recommending\
    \ a second offer/answer\n   exchange when use of a potential configuration has\
    \ been negotiated\n   (see Section 3.6.3).  However, there are several limitations\
    \ with\n   this approach.  First of all, although the second offer/answer\n  \
    \ exchange is RECOMMENDED, it is not required and hence may not be\n   performed.\
    \  Secondly, the intermediary may refuse the initial answer,\n   e.g., due to\
    \ perceived transport protocol mismatch.  Thirdly, the\n   strategy is not foolproof\
    \ since the offer/answer procedures [RFC3264]\n   leave the original offer/answer\
    \ exchange in effect when a subsequent\n   one fails.  Consider the following\
    \ example:\n   1. Offerer generates an SDP session description offer with the\
    \ actual\n      configuration specifying a low-bandwidth configuration (e.g.,\n\
    \      plain RTP) and a potential configuration specifying a high(er)\n      bandwidth\
    \ configuration (e.g., Secure RTP with integrity).\n   2. An intermediary (e.g.,\
    \ an SBC or P-CSCF), that does not support\n      SDP Capability Negotiation,\
    \ authorizes the session based on the\n      actual configuration it sees in the\
    \ SDP session description.\n   3. The answerer chooses the high(er) bandwidth\
    \ potential\n      configuration and generates an answer SDP session description\n\
    \      based on that.\n   4. The intermediary passes through the answer SDP session\n\
    \      description.\n   5. The offerer sees the accepted answer, and generates\
    \ an updated\n      offer that contains the selected potential configuration as\
    \ the\n      actual configuration.  In other words, the high(er) bandwidth\n \
    \     configuration (which has already been negotiated successfully) is\n    \
    \  now the actual configuration in the offer SDP session description.\n   6. The\
    \ intermediary sees the new offer; however, it does not\n      authorize the use\
    \ of the high(er) bandwidth configuration, and\n      consequently generates a\
    \ rejection message to the offerer.\n   7. The offerer receives the rejected offer.\n\
    \   After step 7, per RFC 3264, the offer/answer exchange that completed\n   in\
    \ step 5 remains in effect; however, the intermediary may not have\n   authorized\
    \ the necessary network resources and hence the media stream\n   may experience\
    \ quality issues.  The solution to this problem is to\n   upgrade the intermediary\
    \ to support the SDP Capability Negotiation\n   framework.\n"
- title: 3.13.  Considerations for Specific Attribute Capabilities
  contents:
  - '3.13.  Considerations for Specific Attribute Capabilities

    '
- title: 3.13.1.  The "rtpmap" and "fmtp" Attributes
  contents:
  - "3.13.1.  The \"rtpmap\" and \"fmtp\" Attributes\n   The base SDP Capability Negotiation\
    \ framework defines transport\n   capabilities and attribute capabilities.  Media\
    \ capabilities, which\n   can be used to describe media formats and their associated\n\
    \   parameters, are not defined in this document; however, the \"rtpmap\"\n  \
    \ and \"fmtp\" attributes can nevertheless be used as attribute\n   capabilities.\
    \  Using such attribute capabilities in a potential\n   configuration requires\
    \ a bit of care though.\n   The rtpmap parameter binds an RTP payload type to\
    \ a media format\n   (e.g., codec).  While it is possible to provide rtpmaps for\
    \ payload\n   types not found in the corresponding \"m=\" line, such rtpmaps provide\n\
    \   no value in normal offer/answer exchanges, since only the payload\n   types\
    \ found in the \"m=\" line are part of the offer (or answer).  This\n   applies\
    \ to the base SDP Capability Negotiation framework as well.\n   Only the media\
    \ formats (e.g., RTP payload types) provided in the \"m=\"\n   line are actually\
    \ offered; inclusion of \"rtpmap\" attributes with\n   other RTP payload types\
    \ in a potential configuration does not change\n   this fact and hence they do\
    \ not provide any useful information there.\n   They may still be useful as pure\
    \ capabilities though (outside a\n   potential configuration) in order to inform\
    \ a peer of additional\n   codecs supported.\n   It is possible to provide an\
    \ \"rtpmap\" attribute capability with a\n   payload type mapping to a different\
    \ codec than a corresponding actual\n   configuration \"rtpmap\" attribute for\
    \ the media description has.  Such\n   practice is permissible as a way of indicating\
    \ a capability.  If that\n   capability is included in a potential configuration,\
    \ then delete-\n   attributes (see Section 3.5.1) MUST be used to ensure that\
    \ there is\n   not multiple \"rtpmap\" attributes for the same payload type in\
    \ a given\n   media description (which would not be allowed by SDP [RFC4566]).\n\
    \   Similar considerations and rules apply to the \"fmtp\" attribute.  An\n  \
    \ \"fmtp\" attribute capability for a media format not included in the\n   \"\
    m=\" line is useless in a potential configuration (but may be useful\n   as a\
    \ capability by itself).  An \"fmtp\" attribute capability in a\n   potential\
    \ configuration for a media format that already has an \"fmtp\"\n   attribute\
    \ in the actual configuration may lead to multiple fmtp\n   format parameters\
    \ for that media format and that is not allowed by\n   SDP [RFC4566].  The delete-attributes\
    \ MUST be used to ensure that\n   there are not multiple \"fmtp\" attributes for\
    \ a given media format in\n   a media description.\n   Extensions to the base\
    \ SDP Capability Negotiation framework may\n   change the above behavior.\n"
- title: 3.13.2.  Direction Attributes
  contents:
  - "3.13.2.  Direction Attributes\n   SDP defines the \"inactive\", \"sendonly\"\
    , \"recvonly\", and \"sendrecv\"\n   direction attributes.  The direction attributes\
    \ can be applied at\n   either the session level or the media level.  In either\
    \ case, it is\n   possible to define attribute capabilities for these direction\n\
    \   capabilities; if used by a potential configuration, the normal\n   offer/answer\
    \ procedures still apply.  For example, if an offered\n   potential configuration\
    \ includes the \"sendonly\" direction attribute,\n   and it is selected as the\
    \ actual configuration, then the answer MUST\n   include a corresponding \"recvonly\"\
    \ (or \"inactive\") attribute.\n"
- title: 3.14.  Relationship to RFC 3407
  contents:
  - "3.14.  Relationship to RFC 3407\n   RFC 3407 defines capability descriptions\
    \ with limited abilities to\n   describe attributes, bandwidth parameters, transport\
    \ protocols and\n   media formats.  RFC 3407 does not define any negotiation procedures\n\
    \   for actually using those capability descriptions.\n   This document defines\
    \ new attributes for describing attribute\n   capabilities and transport capabilities.\
    \  It also defines procedures\n   for using those capabilities as part of an offer/answer\
    \ exchange.  In\n   contrast to RFC 3407, this document does not define bandwidth\n\
    \   parameters, and it also does not define how to express ranges of\n   values.\
    \  Extensions to this document may be defined in order to fully\n   cover all\
    \ the capabilities provided by RFC 3407 (for example, more\n   general media capabilities).\n\
    \   It is RECOMMENDED that implementations use the attributes and\n   procedures\
    \ defined in this document instead of those defined in\n   [RFC3407].  If capability\
    \ description interoperability with legacy\n   RFC 3407 implementations is desired,\
    \ implementations MAY include both\n   RFC 3407 capability descriptions and capabilities\
    \ defined by this\n   document.  The offer/answer negotiation procedures defined\
    \ in this\n   document will not use the RFC 3407 capability descriptions.\n"
- title: 4.  Examples
  contents:
  - "4.  Examples\n   In this section, we provide examples showing how to use the\
    \ SDP\n   Capability Negotiation.\n"
- title: 4.1.  Multiple Transport Protocols
  contents:
  - "4.1.  Multiple Transport Protocols\n   The following example illustrates how\
    \ to use the SDP Capability\n   Negotiation extensions to negotiate use of one\
    \ out of several\n   possible transport protocols.  The offerer uses the expected\
    \ least-\n   common-denominator (plain RTP) as the actual configuration, and the\n\
    \   alternative transport protocols as the potential configurations.\n   The example\
    \ is illustrated by the offer/answer exchange below, where\n   Alice sends an\
    \ offer to Bob:\n                Alice                               Bob\n   \
    \               | (1) Offer (RTP/[S]AVP[F])        |\n                  |--------------------------------->|\n\
    \                  |                                  |\n                  | (2)\
    \ Answer (RTP/AVPF)            |\n                  |<---------------------------------|\n\
    \                  |                                  |\n                  | (3)\
    \ Offer (RTP/AVPF)             |\n                  |--------------------------------->|\n\
    \                  |                                  |\n                  | (4)\
    \ Answer (RTP/AVPF)            |\n                  |<---------------------------------|\n\
    \                  |                                  |\n   Alice's offer includes\
    \ plain RTP (RTP/AVP), RTP with RTCP-based\n   feedback (RTP/AVPF), Secure RTP\
    \ (RTP/SAVP), and Secure RTP with RTCP-\n   based feedback (RTP/SAVPF) as alternatives.\
    \  RTP is the default, with\n   RTP/SAVPF, RTP/SAVP, and RTP/AVPF as the alternatives\
    \ and preferred\n   in the order listed:\n      v=0\n      o=- 25678 753849 IN\
    \ IP4 192.0.2.1\n      s=\n      c=IN IP4 192.0.2.1\n      t=0 0\n      m=audio\
    \ 53456 RTP/AVP 0 18\n      a=tcap:1 RTP/SAVPF RTP/SAVP RTP/AVPF\n      a=acap:1\
    \ crypto:1 AES_CM_128_HMAC_SHA1_80\n         inline:WVNfX19zZW1jdGwgKCkgewkyMjA7fQp9CnVubGVz|2^20|1:4\n\
    \         FEC_ORDER=FEC_SRTP\n      a=acap:2 rtcp-fb:0 nack\n      a=pcfg:1 t=1\
    \ a=1,[2]\n      a=pcfg:2 t=2 a=1\n      a=pcfg:3 t=3 a=[2]\n   The \"m=\" line\
    \ indicates that Alice is offering to use plain RTP with\n   PCMU or G.729.  The\
    \ capabilities are provided by the \"a=tcap\" and\n   \"a=acap\" attributes. \
    \ The \"tcap\" capability indicates that Secure RTP\n   with RTCP-based feedback\
    \ (RTP/SAVPF), Secure RTP (RTP/SAVP), and RTP\n   with RTCP-based feedback are\
    \ supported.  The first \"acap\" attribute\n   provides an attribute capability\
    \ with a handle of 1.  The capability\n   is a \"crypto\" attribute, which provides\
    \ the keying material for SRTP\n   using SDP security descriptions [RFC4568].\
    \  The second \"acap\"\n   attribute provides an attribute capability with a handle\
    \ of 2.  The\n   capability is an \"rtcp-fb\" attribute, which is used by the\
    \ RTCP-based\n   feedback profiles to indicate that payload type 0 (PCMU) supports\n\
    \   feedback type \"nack\".  The \"a=pcfg\" attributes provide the potential\n\
    \   configurations included in the offer by reference to the\n   capabilities.\
    \  There are three potential configurations:\n   o  Potential configuration 1,\
    \ which is the most preferred potential\n      configuration specifies use of\
    \ transport protocol capability 1\n      (RTP/SAVPF) and attribute capabilities\
    \ 1 (the \"crypto\" attribute)\n      and 2 (the \"rtcp-fb\" attribute).  Support\
    \ for the first one is\n      mandatory whereas support for the second one is\
    \ optional.\n   o  Potential configuration 2, which is the second most preferred\n\
    \      potential configuration specifies use of transport protocol\n      capability\
    \ 2 (RTP/SAVP) and mandatory attribute capability 1 (the\n      \"crypto\" attribute).\n\
    \   o  Potential configuration 3, which is the least preferred potential\n   \
    \   configuration (but the second least preferred configuration\n      overall,\
    \ since the actual configuration provided by the \"m=\" line\n      is always\
    \ the least preferred configuration), specifies use of\n      transport protocol\
    \ capability 3 (RTP/AVPF) and optional attribute\n      capability 2 (the \"rtcp-fb\"\
    \ attribute).\n   Bob receives the SDP session description offer from Alice. \
    \ Bob does\n   not support any Secure RTP profiles; however, he supports plain\
    \ RTP\n   and RTP with RTCP-based feedback, as well as the SDP Capability\n  \
    \ Negotiation extensions, and hence he accepts the potential\n   configuration\
    \ for RTP with RTCP-based feedback provided by Alice:\n      v=0\n      o=- 24351\
    \ 621814 IN IP4 192.0.2.2\n      s=\n      c=IN IP4 192.0.2.2\n      t=0 0\n \
    \     m=audio 54568 RTP/AVPF 0 18\n      a=rtcp-fb:0 nack\n      a=acfg:1 t=3\
    \ a=[2]\n   Bob includes the \"a=acfg\" attribute in the answer to inform Alice\n\
    \   that he based his answer on an offer containing the potential\n   configuration\
    \ with transport protocol capability 3 and optional\n   attribute capability 2\
    \ from the offer SDP session description (i.e.,\n   the RTP/AVPF profile using\
    \ the \"rtcp-fb\" value provided).  Bob also\n   includes an \"rtcp-fb\" attribute\
    \ with the value \"nack\" value for RTP\n   payload type 0.\n   When Alice receives\
    \ Bob's answer, session negotiation has completed,\n   however Alice nevertheless\
    \ chooses to generate a new offer using the\n   actual configuration.  This is\
    \ done purely to assist any\n   intermediaries that may reside between Alice and\
    \ Bob but do not\n   support the SDP Capability Negotiation framework (and hence\
    \ may not\n   understand the negotiation that just took place):\n   Alice's updated\
    \ offer includes only RTP/AVPF, and it is not using the\n   SDP Capability Negotiation\
    \ framework (Alice could have included the\n   capabilities as well if she wanted):\n\
    \      v=0\n      o=- 25678 753850 IN IP4 192.0.2.1\n      s=\n      c=IN IP4\
    \ 192.0.2.1\n      t=0 0\n      m=audio 53456 RTP/AVPF 0 18\n      a=rtcp-fb:0\
    \ nack\n   The \"m=\" line now indicates that Alice is offering to use RTP with\n\
    \   RTCP-based feedback and using PCMU or G.729.  The \"rtcp-fb\" attribute\n\
    \   provides the feedback type \"nack\" for payload type 0 again (but as\n   part\
    \ of the actual configuration).\n   Bob receives the SDP session description offer\
    \ from Alice, which he\n   accepts, and then generates an answer to Alice:\n \
    \     v=0\n      o=- 24351 621815 IN IP4 192.0.2.2\n      s=\n      c=IN IP4 192.0.2.2\n\
    \      t=0 0\n      m=audio 54568 RTP/AVPF 0 18\n      a=rtcp-fb:0 nack\n   Bob\
    \ includes the same \"rtcp-fb\" attribute as before, and the session\n   proceeds\
    \ without change.  Although Bob did not include any\n   capabilities in his answer,\
    \ he could have done so if he wanted.\n   Note that in this particular example,\
    \ the answerer supported the SDP\n   Capability Negotiation framework and hence\
    \ the attributes and\n   procedures defined here; however, had he not, the answerer\
    \ would\n   simply have ignored the new attributes received in step 1 and\n  \
    \ accepted the offer to use normal RTP.  In that case, the following\n   answer\
    \ would have been generated in step 2 instead:\n      v=0\n      o=- 24351 621814\
    \ IN IP4 192.0.2.2\n      s=\n      c=IN IP4 192.0.2.2\n      t=0 0\n      m=audio\
    \ 54568 RTP/AVP 0 18\n"
- title: 4.2.  DTLS-SRTP or SRTP with Media-Level Security Descriptions
  contents:
  - "4.2.  DTLS-SRTP or SRTP with Media-Level Security Descriptions\n   The following\
    \ example illustrates how to use the SDP Capability\n   Negotiation framework\
    \ to negotiate use of SRTP using either SDP\n   security descriptions or DTLS-SRTP.\
    \  The offerer (Alice) wants to\n   establish a Secure RTP audio stream but is\
    \ willing to use plain RTP.\n   Alice prefers to use DTLS-SRTP as the key management\
    \ protocol, but\n   supports SDP security descriptions as well (note that [RFC5763]\n\
    \   contains additional DTLS-SRTP examples).\n   The example is illustrated by\
    \ the offer/answer exchange below, where\n   Alice sends an offer to Bob:\n  \
    \           Alice                                     Bob\n               | (1)\
    \ Offer (RTP/[S]AVP,SDES | DTLS-SRTP)|\n               |--------------------------------------->|\n\
    \               |                                        |\n               |<---------\
    \ DTLS-SRTP handshake -------->|\n               |                           \
    \             |\n               | (2) Answer (DTLS-SRTP)                 |\n \
    \              |<---------------------------------------|\n               |  \
    \                                      |\n               | (3) Offer (DTLS-SRTP)\
    \                  |\n               |--------------------------------------->|\n\
    \               |                                        |\n               | (4)\
    \ Answer (DTLS-SRTP)                 |\n               |<---------------------------------------|\n\
    \               |                                        |\n   Alice's offer includes\
    \ an audio stream that offers use of plain RTP\n   and Secure RTP as alternatives.\
    \  For the Secure RTP stream, it can be\n   established using either DTLS-SRTP\
    \ or SDP security descriptions:\n      v=0\n      o=- 25678 753849 IN IP4 192.0.2.1\n\
    \      s=\n      t=0 0\n      c=IN IP4 192.0.2.1\n      a=acap:1 setup:actpass\n\
    \      a=acap:2 fingerprint: SHA-1 \\\n            4A:AD:B9:B1:3F:82:18:3B:54:02:12:DF:3E:5D:49:6B:19:E5:7C:AB\n\
    \      a=tcap:1 UDP/TLS/RTP/SAVP RTP/SAVP\n      m=audio 59000 RTP/AVP 98\n  \
    \    a=rtpmap:98 AMR/8000\n      a=acap:3 crypto:1 AES_CM_128_HMAC_SHA1_32\n \
    \        inline:NzB4d1BINUAvLEw6UzF3WSJ+PSdFcGdUJShpX1Zj|2^20|1:32\n      a=pcfg:1\
    \ t=1 a=1,2\n      a=pcfg:2 t=2 a=3\n   The first (and preferred) potential configuration\
    \ for the audio\n   stream specifies use of transport capability 1 (UDP/TLS/RTP/SAVP),\n\
    \   i.e., DTLS-SRTP, and attribute capabilities 1 and 2 (active/passive\n   mode\
    \ and certificate fingerprint), both of which must be supported to\n   choose\
    \ this potential configuration.  The second (and less preferred)\n   potential\
    \ configuration specifies use of transport capability 2\n   (RTP/SAVP) and mandatory\
    \ attribute capability 3, i.e., the SDP\n   security description.\n   Bob receives\
    \ the SDP session description offer from Alice.  Bob\n   supports DTLS-SRTP as\
    \ preferred by Alice and Bob now initiates the\n   DTLS-SRTP handshake to establish\
    \ the DTLS-SRTP session (see [RFC5764]\n   for details).\n   Bob also sends back\
    \ an answer to Alice as follows:\n      v=0\n      o=- 24351 621814 IN IP4 192.0.2.2\n\
    \      s=\n      a=setup:active\n      a=fingerprint: SHA-1 \\\n        FF:FF:FF:B1:3F:82:18:3B:54:02:12:DF:3E:5D:49:6B:19:E5:7C:AB\n\
    \      t=0 0\n      c=IN IP4 192.0.2.2\n      m=audio 54568 UDP/TLS/RTP/SAVP 98\n\
    \      a=rtpmap:98 AMR/8000\n      a=acfg:1 t=1 a=1,2\n   For the audio stream,\
    \ Bob accepted the use of DTLS-SRTP, and hence\n   the profile in the \"m=\" line\
    \ is \"UDP/TLS/RTP/SAVP\".  Bob also\n   includes a \"setup:active\" attribute\
    \ to indicate he is the active\n   endpoint for the DTLS-SRTP session as well\
    \ as the fingerprint for\n   Bob's certificate.  Bob's \"acfg\" attribute indicates\
    \ that he chose\n   potential configuration 1 from Alice's offer.\n   When Alice\
    \ receives Bob's answer, session negotiation has completed\n   (and Alice can\
    \ verify the DTLS handshake using Bob's certificate\n   fingerprint in the answer);\
    \ however, Alice nevertheless chooses to\n   generate a new offer using the actual\
    \ configuration.  This is done\n   purely to assist any intermediaries that may\
    \ reside between Alice and\n   Bob but do not support the capability negotiation\
    \ extensions (and\n   hence may not understand the negotiation that just took\
    \ place).\n   Alice's updated offer includes only DTLS-SRTP for the audio stream,\n\
    \   and it is not using the SDP Capability Negotiation framework (Alice\n   could\
    \ have included the capabilities as well if she wanted):\n      v=0\n      o=-\
    \ 25678 753850 IN IP4 192.0.2.1\n      s=\n      t=0 0\n      c=IN IP4 192.0.2.1\n\
    \      a=setup:actpass\n      a=fingerprint: SHA-1 \\\n            4A:AD:B9:B1:3F:82:18:3B:54:02:12:DF:3E:5D:49:6B:19:E5:7C:AB\n\
    \      m=audio 59000 UDP/TLS/RTP/AVP 98\n      a=rtpmap:98 AMR/8000\n   The \"\
    m=\" line for the audio stream now indicates that Alice is\n   offering to use\
    \ DTLS-SRTP in active/passive mode using her\n   certificate fingerprint provided.\n\
    \   Bob receives the SDP session description offer from Alice, which he\n   accepts,\
    \ and then generates an answer to Alice:\n      v=0\n      o=- 24351 621814 IN\
    \ IP4 192.0.2.2\n      s=\n      a=setup:active\n      a=fingerprint: SHA-1 \\\
    \n        FF:FF:FF:B1:3F:82:18:3B:54:02:12:DF:3E:5D:49:6B:19:E5:7C:AB\n      t=0\
    \ 0\n      c=IN IP4 192.0.2.2\n      m=audio 54568 UDP/TLS/RTP/SAVP 98\n     \
    \ a=rtpmap:98 AMR/8000\n      a=acfg:1 t=1 a=1,2\n   Bob includes the same \"\
    setup:active\" and fingerprint attributes as\n   before, and the session proceeds\
    \ without change.  Although Bob did\n   not include any capabilities in his answer,\
    \ he could have done so if\n   he wanted.\n   Note that in this particular example,\
    \ the answerer supported the\n   capability extensions defined here; however,\
    \ had he not, the answerer\n   would simply have ignored the new attributes received\
    \ in step 1 and\n   accepted the offer to use normal RTP.  In that case, the following\n\
    \   answer would have been generated in step 2 instead:\n      v=0\n      o=-\
    \ 24351 621814 IN IP4 192.0.2.2\n      s=\n      t=0 0\n      c=IN IP4 192.0.2.2\n\
    \      m=audio 54568 RTP/AVP 98\n      a=rtpmap:98 AMR/8000\n   Finally, if Bob\
    \ had chosen to use SDP security descriptions instead\n   of DTLS-SRTP, the following\
    \ answer would have been generated:\n      v=0\n      o=- 24351 621814 IN IP4\
    \ 192.0.2.2\n      s=\n      t=0 0\n      c=IN IP4 192.0.2.2\n      m=audio 54568\
    \ RTP/SAVP 98\n      a=rtpmap:98 AMR/8000\n      a=crypto:1 AES_CM_128_HMAC_SHA1_32\n\
    \         inline:WSJ+PSdFcGdUJShpX1ZjNzB4d1BINUAvLEw6UzF3|2^20|1:32\n      a=acfg:2\
    \ t=2 a=3\n"
- title: 4.3.  Best-Effort SRTP with Session-Level MIKEY and Media-Level Security
  contents:
  - "4.3.  Best-Effort SRTP with Session-Level MIKEY and Media-Level Security\n  \
    \    Descriptions\n   The following example illustrates how to use the SDP Capability\n\
    \   Negotiation extensions to support so-called Best-Effort Secure RTP as\n  \
    \ well as alternative keying mechanisms, more specifically MIKEY\n   [RFC3830]\
    \ and SDP security descriptions.  The offerer (Alice) wants\n   to establish an\
    \ audio and video session.  Alice prefers to use\n   session-level MIKEY as the\
    \ key management protocol, but supports SDP\n   security descriptions as well.\n\
    \   The example is illustrated by the offer/answer exchange below, where\n   Alice\
    \ sends an offer to Bob:\n             Alice                                 \
    \    Bob\n               | (1) Offer (RTP/[S]AVP[F], SDES|MIKEY)  |\n        \
    \       |--------------------------------------->|\n               |         \
    \                               |\n               | (2) Answer (RTP/SAVP, SDES)\
    \            |\n               |<---------------------------------------|\n  \
    \             |                                        |\n               | (3)\
    \ Offer (RTP/SAVP, SDES)             |\n               |--------------------------------------->|\n\
    \               |                                        |\n               | (4)\
    \ Answer (RTP/SAVP, SDES)            |\n               |<---------------------------------------|\n\
    \               |                                        |\n   Alice's offer includes\
    \ an audio and a video stream.  The audio stream\n   offers use of plain RTP and\
    \ Secure RTP as alternatives, whereas the\n   video stream offers use of plain\
    \ RTP, RTP with RTCP-based feedback,\n   Secure RTP, and Secure RTP with RTCP-based\
    \ feedback as alternatives:\n      v=0\n      o=- 25678 753849 IN IP4 192.0.2.1\n\
    \      s=\n      t=0 0\n      c=IN IP4 192.0.2.1\n      a=acap:1 key-mgmt:mikey\
    \ AQAFgM0XflABAAAAAAAAAAAAAAsAyO...\n      a=tcap:1 RTP/SAVPF RTP/SAVP RTP/AVPF\n\
    \      m=audio 59000 RTP/AVP 98\n      a=rtpmap:98 AMR/8000\n      a=acap:2 crypto:1\
    \ AES_CM_128_HMAC_SHA1_32\n         inline:NzB4d1BINUAvLEw6UzF3WSJ+PSdFcGdUJShpX1Zj|2^20|1:32\n\
    \      a=pcfg:1 t=2 a=1|2\n      m=video 52000 RTP/AVP 31\n      a=rtpmap:31 H261/90000\n\
    \      a=acap:3 crypto:1 AES_CM_128_HMAC_SHA1_80\n         inline:d0RmdmcmVCspeEc3QGZiNWpVLFJhQX1cfHAwJSoj|2^20|1:32\n\
    \      a=acap:4 rtcp-fb:* nack\n      a=pcfg:1 t=1 a=1,4|3,4\n      a=pcfg:2 t=2\
    \ a=1|3\n      a=pcfg:3 t=3 a=4\n   The potential configuration for the audio\
    \ stream specifies use of\n   transport capability 2 (RTP/SAVP) and either attribute\
    \ capability 1\n   (session-level MIKEY as the keying mechanism) or 2 (SDP security\n\
    \   descriptions as the keying mechanism).  Support for either of these\n   attribute\
    \ capabilities is mandatory.  There are three potential\n   configurations for\
    \ the video stream.\n   o  The first configuration with configuration number 1\
    \ uses transport\n      capability 1 (RTP/SAVPF) with either attribute capabilities\
    \ 1 and\n      4 (session-level MIKEY and the \"rtcp-fb\" attribute) or attribute\n\
    \      capabilities 3 and 4 (SDP security descriptions and the \"rtcp-fb\"\n \
    \     attribute).  In this example, the offerer insists on not only the\n    \
    \  keying mechanism being supported, but also that the \"rtcp-fb\"\n      attribute\
    \ is supported with the value indicated.  Consequently,\n      all the attribute\
    \ capabilities are marked as mandatory in this\n      potential configuration.\n\
    \   o  The second configuration with configuration number 2 uses\n      transport\
    \ capability 2 (RTP/SAVP) and either attribute capability\n      1 (session-level\
    \ MIKEY) or attribute capability 3 (SDP security\n      descriptions).  Both attribute\
    \ capabilities are mandatory in this\n      configuration.\n   o  The third configuration\
    \ with configuration number 3 uses transport\n      capability 3 (RTP/AVPF) and\
    \ mandatory attribute capability 4 (the\n      \"rtcp-fb\" attribute).\n   Bob\
    \ receives the SDP session description offer from Alice.  Bob\n   supports Secure\
    \ RTP, Secure RTP with RTCP-based feedback and the SDP\n   Capability Negotiation\
    \ extensions.  Bob also supports SDP security\n   descriptions, but not MIKEY,\
    \ and hence he generates the following\n   answer:\n      v=0\n      o=- 24351\
    \ 621814 IN IP4 192.0.2.2\n      s=\n      t=0 0\n      c=IN IP4 192.0.2.2\n \
    \     m=audio 54568 RTP/SAVP 98\n      a=rtpmap:98 AMR/8000\n      a=crypto:1\
    \ AES_CM_128_HMAC_SHA1_32\n         inline:WSJ+PSdFcGdUJShpX1ZjNzB4d1BINUAvLEw6UzF3|2^20|1:32\n\
    \      a=acfg:1 t=2 a=2\n      m=video 55468 RTP/SAVPF 31\n      a=rtpmap:31 H261/90000\n\
    \      a=crypto:1 AES_CM_128_HMAC_SHA1_80\n         inline:AwWpVLFJhQX1cfHJSojd0RmdmcmVCspeEc3QGZiN|2^20|1:32\n\
    \      a=rtcp-fb:* nack\n      a=acfg:1 t=1 a=3,4\n   For the audio stream, Bob\
    \ accepted the use of Secure RTP, and hence\n   the profile in the \"m=\" line\
    \ is \"RTP/SAVP\".  Bob also includes a\n   \"crypto\" attribute with his own\
    \ keying material, and an \"acfg\"\n   attribute identifying actual configuration\
    \ 1 for the audio media\n   stream from the offer, using transport capability\
    \ 2 (RTP/SAVP) and\n   attribute capability 2 (the \"crypto\" attribute from the\
    \ offer).  For\n   the video stream, Bob accepted the use of Secure RTP with RTCP-based\n\
    \   feedback, and hence the profile in the \"m=\" line is \"RTP/SAVPF\".  Bob\n\
    \   also includes a \"crypto\" attribute with his own keying material, and\n \
    \  an \"acfg\" attribute identifying actual configuration 1 for the video\n  \
    \ stream from the offer, using transport capability 1 (RTP/SAVPF) and\n   attribute\
    \ capabilities 3 (the \"crypto\" attribute from the offer) and\n   4 (the \"rtcp-fb\"\
    \ attribute from the offer).\n   When Alice receives Bob's answer, session negotiation\
    \ has completed;\n   however, Alice nevertheless chooses to generate a new offer\
    \ using the\n   actual configuration.  This is done purely to assist any\n   intermediaries\
    \ that may reside between Alice and Bob but do not\n   support the capability\
    \ negotiation extensions (and hence may not\n   understand the negotiation that\
    \ just took place).\n   Alice's updated offer includes only SRTP for the audio\
    \ stream SRTP\n   with RTCP-based feedback for the video stream, and it is not\
    \ using\n   the SDP Capability Negotiation framework (Alice could have included\n\
    \   the capabilities as well is she wanted):\n      v=0\n      o=- 25678 753850\
    \ IN IP4 192.0.2.1\n      s=\n      t=0 0\n      c=IN IP4 192.0.2.1\n      m=audio\
    \ 59000 RTP/SAVP 98\n      a=rtpmap:98 AMR/8000\n      a=crypto:1 AES_CM_128_HMAC_SHA1_32\n\
    \         inline:NzB4d1BINUAvLEw6UzF3WSJ+PSdFcGdUJShpX1Zj|2^20|1:32\n      m=video\
    \ 52000 RTP/SAVPF 31\n      a=rtpmap:31 H261/90000\n      a=crypto:1 AES_CM_128_HMAC_SHA1_80\n\
    \         inline:d0RmdmcmVCspeEc3QGZiNWpVLFJhQX1cfHAwJSoj|2^20|1:32\n      a=rtcp-fb:*\
    \ nack\n   The \"m=\" line for the audio stream now indicates that Alice is\n\
    \   offering to use Secure RTP with PCMU or G.729, whereas the \"m=\" line\n \
    \  for the video stream indicates that Alice is offering to use Secure\n   RTP\
    \ with RTCP-based feedback and H.261.  Each media stream includes a\n   \"crypto\"\
    \ attribute, which provides the SRTP keying material, with the\n   same value\
    \ again.\n   Bob receives the SDP session description offer from Alice, which\
    \ he\n   accepts, and then generates an answer to Alice:\n      v=0\n      o=-\
    \ 24351 621815 IN IP4 192.0.2.2\n      s=\n      t=0 0\n      c=IN IP4 192.0.2.2\n\
    \      m=audio 54568 RTP/SAVP 98\n      a=rtpmap:98 AMR/8000\n      a=crypto:1\
    \ AES_CM_128_HMAC_SHA1_32\n         inline:WSJ+PSdFcGdUJShpX1ZjNzB4d1BINUAvLEw6UzF3|2^20|1:32\n\
    \      m=video 55468 RTP/SAVPF 31\n      a=rtpmap:31 H261/90000\n      a=crypto:1\
    \ AES_CM_128_HMAC_SHA1_80\n         inline:AwWpVLFJhQX1cfHJSojd0RmdmcmVCspeEc3QGZiN|2^20|1:32\n\
    \      a=rtcp-fb:* nack\n   Bob includes the same \"crypto\" attribute as before,\
    \ and the session\n   proceeds without change.  Although Bob did not include any\n\
    \   capabilities in his answer, he could have done so if he wanted.\n   Note that\
    \ in this particular example, the answerer supported the\n   capability extensions\
    \ defined here; however, had he not, the answerer\n   would simply have ignored\
    \ the new attributes received in step 1 and\n   accepted the offer to use normal\
    \ RTP.  In that case, the following\n   answer would have been generated in step\
    \ 2 instead:\n      v=0\n      o=- 24351 621814 IN IP4 192.0.2.2\n      s=\n \
    \     t=0 0\n      c=IN IP4 192.0.2.2\n      m=audio 54568 RTP/AVP 98\n      a=rtpmap:98\
    \ AMR/8000\n      m=video 55468 RTP/AVP 31\n      a=rtpmap:31 H261/90000\n   \
    \   a=rtcp-fb:* nack\n   Finally, if Bob had chosen to use session-level MIKEY\
    \ instead of SDP\n   security descriptions, the following answer would have been\n\
    \   generated:\n      v=0\n      o=- 24351 621814 IN IP4 192.0.2.2\n      s=\n\
    \      t=0 0\n      c=IN IP4 192.0.2.2\n      a=key-mgmt:mikey AQEFgM0XflABAAAAAAAAAAAAAAYAyO...\n\
    \      m=audio 54568 RTP/SAVP 98\n      a=rtpmap:98 AMR/8000\n      a=acfg:1 t=2\
    \ a=1\n      m=video 55468 RTP/SAVPF 31\n      a=rtpmap:31 H261/90000\n      a=rtcp-fb:*\
    \ nack\n      a=acfg:1 t=1 a=1,4\n   It should be noted, that although Bob could\
    \ have chosen session-level\n   MIKEY for one media stream, and SDP security descriptions\
    \ for another\n   media stream, there are no well-defined offerer processing rules\
    \ of\n   the resulting answer for this, and hence the offerer may incorrectly\n\
    \   assume use of MIKEY for both streams.  To avoid this, if the answerer\n  \
    \ chooses session-level MIKEY, then all Secure RTP-based media streams\n   SHOULD\
    \ use MIKEY (this applies irrespective of whether or not SDP\n   Capability Negotiation\
    \ is being used).  Use of media-level MIKEY does\n   not have a similar constraint.\n"
- title: 4.4.  SRTP with Session-Level MIKEY and Media-Level Security
  contents:
  - "4.4.  SRTP with Session-Level MIKEY and Media-Level Security\n      Descriptions\
    \ as Alternatives\n   The following example illustrates how to use the SDP Capability\n\
    \   Negotiation framework to negotiate use of either MIKEY or SDP\n   security\
    \ descriptions, when one of them is included as part of the\n   actual configuration,\
    \ and the other one is being selected.  The\n   offerer (Alice) wants to establish\
    \ an audio and video session.  Alice\n   prefers to use session-level MIKEY as\
    \ the key management protocol,\n   but supports SDP security descriptions as well.\n\
    \   The example is illustrated by the offer/answer exchange below, where\n   Alice\
    \ sends an offer to Bob:\n             Alice                                 \
    \    Bob\n               | (1) Offer (RTP/[S]AVP[F], SDES|MIKEY)  |\n        \
    \       |--------------------------------------->|\n               |         \
    \                               |\n               | (2) Answer (RTP/SAVP, SDES)\
    \            |\n               |<---------------------------------------|\n  \
    \             |                                        |\n   Alice's offer includes\
    \ an audio and a video stream.  Both the audio\n   and the video stream offer\
    \ use of Secure RTP:\n      v=0\n      o=- 25678 753849 IN IP4 192.0.2.1\n   \
    \   s=\n      t=0 0\n      c=IN IP4 192.0.2.1\n      a=key-mgmt:mikey AQAFgM0XflABAAAAAAAAAAAAAAsAyO...\n\
    \      m=audio 59000 RTP/SAVP 98\n      a=rtpmap:98 AMR/8000\n      a=acap:1 crypto:1\
    \ AES_CM_128_HMAC_SHA1_32\n         inline:NzB4d1BINUAvLEw6UzF3WSJ+PSdFcGdUJShpX1Zj|2^20|1:32\n\
    \      a=pcfg:1 a=-s:1\n      m=video 52000 RTP/SAVP 31\n      a=rtpmap:31 H261/90000\n\
    \      a=acap:2 crypto:1 AES_CM_128_HMAC_SHA1_80\n         inline:d0RmdmcmVCspeEc3QGZiNWpVLFJhQX1cfHAwJSoj|2^20|1:32\n\
    \      a=pcfg:1 a=-s:2\n   Alice does not know whether Bob supports MIKEY or SDP\
    \ security\n   descriptions.  She could include attributes for both; however,\
    \ the\n   resulting procedures and potential interactions are not well-\n   defined.\
    \  Instead, she places a session-level \"key-mgmt\" attribute\n   for MIKEY in\
    \ the actual configuration with SDP security descriptions\n   as an alternative\
    \ in the potential configuration.  The potential\n   configuration for the audio\
    \ stream specifies that all session-level\n   attributes are to be deleted (i.e.,\
    \ the session-level \"a=key-mgmt\"\n   attribute) and that mandatory attribute\
    \ capability 2 is to be used\n   (i.e., the \"crypto\" attribute).  The potential\
    \ configuration for the\n   video stream is similar, except it uses its own mandatory\
    \ \"crypto\"\n   attribute capability (2).  Note how the deletion of the session-level\n\
    \   attributes does not affect the media-level attributes.\n   Bob receives the\
    \ SDP session description offer from Alice.  Bob\n   supports Secure RTP and the\
    \ SDP Capability Negotiation framework.\n   Bob also supports both SDP security\
    \ descriptions and MIKEY.  Since\n   the potential configuration is more preferred\
    \ than the actual\n   configuration, Bob (conceptually) generates an internal\
    \ potential\n   configuration SDP session description that contains the \"crypto\"\
    \n   attributes for the audio and video stream, but not the \"key-mgmt\"\n   attribute\
    \ for MIKEY, thereby avoiding any ambiguity between the two\n   keying mechanisms.\
    \  As a result, he generates the following answer:\n      v=0\n      o=- 24351\
    \ 621814 IN IP4 192.0.2.2\n      s=\n      t=0 0\n      c=IN IP4 192.0.2.2\n \
    \     m=audio 54568 RTP/SAVP 98\n      a=rtpmap:98 AMR/8000\n      a=crypto:1\
    \ AES_CM_128_HMAC_SHA1_32\n         inline:WSJ+PSdFcGdUJShpX1ZjNzB4d1BINUAvLEw6UzF3|2^20|1:32\n\
    \      a=acfg:1 a=-s:1\n      m=video 55468 RTP/SAVP 31\n      a=rtpmap:31 H261/90000\n\
    \      a=crypto:1 AES_CM_128_HMAC_SHA1_80\n         inline:AwWpVLFJhQX1cfHJSojd0RmdmcmVCspeEc3QGZiN|2^20|1:32\n\
    \      a=acfg:1 a=-s:2\n   For the audio stream, Bob accepted the use of Secure\
    \ RTP using SDP\n   security descriptions.  Bob therefore includes a \"crypto\"\
    \ attribute\n   with his own keying material, and an \"acfg\" attribute identifying\
    \ the\n   actual configuration 1 for the audio media stream from the offer,\n\
    \   with the delete-attributes (\"-s\") and attribute capability 1 (the\n   \"\
    crypto\" attribute from the offer).  For the video stream, Bob also\n   accepted\
    \ the use of Secure RTP using SDP security descriptions.  Bob\n   therefore includes\
    \ a \"crypto\" attribute with his own keying material,\n   and an \"acfg\" attribute\
    \ identifying actual configuration 1 for the\n   video stream from the offer,\
    \ with the delete-attributes (\"-s\") and\n   attribute capability 2.\n   Below,\
    \ we illustrate the offer SDP session description, when Bob\n   instead offers\
    \ the \"crypto\" attribute as the actual configuration\n   keying mechanism and\
    \ \"key-mgmt\" as the potential configuration:\n      v=0\n      o=- 25678 753849\
    \ IN IP4 192.0.2.1\n      s=\n      t=0 0\n      c=IN IP4 192.0.2.1\n      a=acap:1\
    \ key-mgmt:mikey AQAFgM0XflABAAAAAAAAAAAAAAsAyO...\n      m=audio 59000 RTP/SAVP\
    \ 98\n      a=rtpmap:98 AMR/8000\n      a=crypto:1 AES_CM_128_HMAC_SHA1_32\n \
    \        inline:NzB4d1BINUAvLEw6UzF3WSJ+PSdFcGdUJShpX1Zj|2^20|1:32\n      a=acap:2\
    \ rtpmap:98 AMR/8000\n      a=pcfg:1 a=-m:1,2\n      m=video 52000 RTP/SAVP 31\n\
    \      a=rtpmap:31 H261/90000\n      a=acap:3 crypto:1 AES_CM_128_HMAC_SHA1_80\n\
    \         inline:d0RmdmcmVCspeEc3QGZiNWpVLFJhQX1cfHAwJSoj|2^20|1:32\n      a=acap:4\
    \ rtpmap:31 H261/90000\n      a=pcfg:1 a=-m:1,4\n   Note how we this time need\
    \ to perform delete-attributes at the media\n   level instead of the session level.\
    \  When doing that, all attributes\n   from the actual configuration SDP session\
    \ description, including the\n   rtpmaps provided, are removed.  Consequently,\
    \ we had to include these\n   rtpmaps as capabilities as well, and then include\
    \ them in the\n   potential configuration, thereby effectively recreating the\
    \ original\n   \"rtpmap\" attributes in the resulting potential configuration\
    \ SDP\n   session description.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The SDP Capability Negotiation framework is defined\
    \ to be used within\n   the context of the offer/answer model, and hence all the\
    \ offer/answer\n   security considerations apply here as well [RFC3264].  Similarly,\
    \ the\n   Session Initiation Protocol (SIP) uses SDP and the offer/answer\n  \
    \ model, and hence, when used in that context, the SIP security\n   considerations\
    \ apply as well [RFC3261].\n   However, SDP Capability Negotiation introduces\
    \ additional security\n   issues.  Its use as a mechanism to enable alternative\
    \ transport\n   protocol negotiation (secure and non-secure) as well as its ability\n\
    \   to negotiate use of more or less secure keying methods and material\n   warrant\
    \ further security considerations.  Also, the (continued)\n   support for receiving\
    \ media before answer combined with negotiation\n   of alternative transport protocols\
    \ (secure and non-secure) warrants\n   further security considerations.  We discuss\
    \ these issues below.\n   The SDP Capability Negotiation framework allows for\
    \ an offered media\n   stream to both indicate and support various levels of security\
    \ for\n   that media stream.  Different levels of security can for example be\n\
    \   negotiated by use of alternative attribute capabilities each\n   indicating\
    \ more or less secure keying methods as well as more or less\n   strong ciphers.\
    \  Since the offerer indicates support for each of\n   these alternatives, he\
    \ will presumably accept the answerer seemingly\n   selecting any of the offered\
    \ alternatives.  If an attacker can modify\n   the SDP session description offer,\
    \ he can thereby force the\n   negotiation of the weakest security mechanism that\
    \ the offerer is\n   willing to accept.  This may enable the attacker to compromise\
    \ the\n   security of the negotiated media stream.  Similarly, if the offerer\n\
    \   wishes to negotiate use of a secure media stream (e.g., Secure RTP),\n   but\
    \ includes a non-secure media stream (e.g., plain RTP) as a valid\n   (but less\
    \ preferred) alternative, then an attacker that can modify\n   the offered SDP\
    \ session description will be able to force the\n   establishment of an insecure\
    \ media stream.  The solution to both of\n   these problems involves the use of\
    \ integrity protection over the SDP\n   session description.  Ideally, this integrity\
    \ protection provides\n   end-to-end integrity protection in order to protect\
    \ from any man-in-\n   the-middle attack; secure multiparts such as Secure/Multipurpose\n\
    \   Internet Mail Extensions (S/MIME) [RFC5751] provide one such\n   solution;\
    \ however, S/MIME requires use and availability of a Public\n   Key Infrastructure\
    \ (PKI).  A slightly less secure alternative when\n   using SIP, but generally\
    \ much easier to deploy in practice, is to use\n   SIP Identity [RFC4474]; this\
    \ requires the existence of an\n   authentication service (see [RFC4474]).  Although\
    \ this mechanism\n   still requires a PKI, it only requires that servers (as opposed\
    \ to\n   end-users) have third-party validatable certificates, which\n   significantly\
    \ reduces the barrier to entry by ordinary users.  Yet\n   another, and considerably\
    \ less secure, alternative is to use hop-by-\n   hop security only, e.g., TLS\
    \ or IPsec thereby ensuring the integrity\n   of the offered SDP session description\
    \ on a hop-by-hop basis.  This\n   is less secure because SIP allows partially\
    \ trusted intermediaries on\n   the signaling path, and such intermediaries processing\
    \ the SIP\n   request at each hop would be able to perform a man-in-the-middle\n\
    \   attack by modifying the offered SDP session description.  In simple\n   architectures\
    \ where the two UA's proxies communicate directly, the\n   security provided by\
    \ this method is roughly comparable to that\n   provided by the previously discussed\
    \ signature-based mechanisms.\n   Per the normal offer/answer procedures, as soon\
    \ as the offerer has\n   generated an offer, the offerer must be prepared to receive\
    \ media in\n   accordance with that offer.  The SDP Capability Negotiation preserves\n\
    \   that behavior for the actual configuration in the offer; however, the\n  \
    \ offerer has no way of knowing which configuration (actual or\n   potential)\
    \ was selected by the answerer, until an answer indication\n   is received.  This\
    \ opens up a new security issue where an attacker\n   may be able to interject\
    \ media towards the offerer until the answer\n   is received.  For example, the\
    \ offerer may use plain RTP as the\n   actual configuration and Secure RTP as\
    \ an alternative potential\n   configuration.  Even though the answerer selects\
    \ Secure RTP, the\n   offerer will not know that until he receives the answer,\
    \ and hence an\n   attacker will be able to send media to the offerer meanwhile.\
    \  The\n   easiest protection against such an attack is to not offer use of the\n\
    \   non-secure media stream in the actual configuration; however, that\n   may\
    \ in itself have undesirable side effects: If the answerer does not\n   support\
    \ the secure media stream and also does not support the\n   capability negotiation\
    \ framework, then negotiation of the media\n   stream will fail.  Alternatively,\
    \ SDP security preconditions\n   [RFC5027] can be used.  This will ensure that\
    \ media is not flowing\n   until session negotiation has completed and hence the\
    \ selected\n   configuration is known.  Use of preconditions however requires\
    \ both\n   sides to support them.  If they don't, and use of them is required,\n\
    \   the session will fail.  As a (limited) work around to this, it is\n   RECOMMENDED\
    \ that SIP entities generate an answer SDP session\n   description and send it\
    \ to the offerer as soon as possible, for\n   example, in a 183 Session Progress\
    \ message.  This will limit the time\n   during which an attacker can send media\
    \ to the offerer.  Section 3.9\n   presents other alternatives as well.\n   Additional\
    \ security considerations apply to the answer SDP session\n   description as well.\
    \  The actual configuration attribute tells the\n   offerer on which potential\
    \ configuration the answer was based, and\n   hence an attacker that can either\
    \ modify or remove the actual\n   configuration attribute in the answer can cause\
    \ session failure as\n   well as extend the time window during which the offerer\
    \ will accept\n   incoming media that does not conform to the actual answer. \
    \ The\n   solutions to this SDP session description answer integrity problem\n\
    \   are the same as for the offer, i.e., use of end-to-end integrity\n   protection,\
    \ SIP identity, or hop-by-hop protection.  The mechanism to\n   use depends on\
    \ the mechanisms supported by the offerer as well as the\n   acceptable security\
    \ trade offs.\n   As described in Sections 3.1 and 3.11, SDP Capability Negotiation\n\
    \   conceptually allows an offerer to include many different offers in a\n   single\
    \ SDP session description.  This can cause the answerer to\n   process a large\
    \ number of alternative potential offers, which can\n   consume significant memory\
    \ and CPU resources.  An attacker can use\n   this amplification feature to launch\
    \ a denial-of-service attack\n   against the answerer.  The answerer must protect\
    \ itself from such\n   attacks.  As explained in Section 3.11, the answerer can\
    \ help reduce\n   the effects of such an attack by first discarding all potential\n\
    \   configurations that contain unsupported transport protocols,\n   unsupported\
    \ or invalid mandatory attribute capabilities, or\n   unsupported mandatory extension\
    \ configurations.  The answerer should\n   also look out for potential configurations\
    \ that are designed to pass\n   the above test, but nevertheless produce a large\
    \ number of potential\n   configuration SDP session descriptions that cannot be\
    \ supported.\n      A possible way of achieving that is for an attacker to find\
    \ a\n      valid session-level attribute that causes conflicts or otherwise\n\
    \      interferes with individual media description configurations.  At\n    \
    \  the time of publication of this document, we do not know of such\n      an\
    \ SDP attribute; however, this does not mean it does not exist,\n      or that\
    \ it will not exist in the future.  If such attributes are\n      found to exist,\
    \ implementers should explicitly protect against\n      them.\n   A significant\
    \ number of valid and supported potential configurations\n   may remain.  However,\
    \ since all of those contain only valid and\n   supported transport protocols\
    \ and attributes, it is expected that\n   only a few of them will need to be processed\
    \ on average.  Still, the\n   answerer must ensure that it does not needlessly\
    \ consume large\n   amounts of memory or CPU resources when processing those as\
    \ well as\n   be prepared to handle the case where a large number of potential\n\
    \   configurations still need to be processed.\n"
- title: 6.  IANA Considerations
  contents:
  - '6.  IANA Considerations

    '
- title: 6.1.  New SDP Attributes
  contents:
  - "6.1.  New SDP Attributes\n   The IANA has registered the following new SDP attributes:\n\
    \   Attribute name:      csup\n   Long form name:      Supported capability negotiation\
    \ extensions\n   Type of attribute:   Session-level and media-level\n   Subject\
    \ to charset:  No\n   Purpose:             Option tags for supported SDP Capability\n\
    \                        Negotiation extensions\n   Appropriate values:  See Section\
    \ 3.3.1 of RFC 5939\n   Contact name:        Flemming Andreasen, fandreas@cisco.com\n\
    \   Attribute name:      creq\n   Long form name:      Required capability negotiation\
    \ extensions\n   Type of attribute:   Session-level and media-level\n   Subject\
    \ to charset:  No\n   Purpose:             Option tags for required SDP Capability\n\
    \                        Negotiation extensions\n   Appropriate values:  See Section\
    \ 3.3.2 of RFC 5939\n   Contact name:        Flemming Andreasen, fandreas@cisco.com\n\
    \   Attribute name:      acap\n   Long form name:      Attribute capability\n\
    \   Type of attribute:   Session-level and media-level\n   Subject to charset:\
    \  No\n   Purpose:             Attribute capability containing an attribute\n\
    \                        name and associated value\n   Appropriate values:  See\
    \ Section 3.4.1 of RFC 5939\n   Contact name:        Flemming Andreasen, fandreas@cisco.com\n\
    \   Attribute name:      tcap\n   Long form name:      Transport Protocol Capability\n\
    \   Type of attribute:   Session-level and media-level\n   Subject to charset:\
    \  No\n   Purpose:             Transport protocol capability listing one or\n\
    \                        more transport protocols\n   Appropriate values:  See\
    \ Section 3.4.2 of RFC 5939\n   Contact name:        Flemming Andreasen, fandreas@cisco.com\n\
    \   Attribute name:      pcfg\n   Long form name:      Potential Configuration\n\
    \   Type of attribute:   Media-level\n   Subject to charset:  No\n   Purpose:\
    \             Potential configuration for SDP Capability\n                   \
    \     Negotiation\n   Appropriate values:  See Section 3.5.1 of RFC 5939\n   Contact\
    \ name:        Flemming Andreasen, fandreas@cisco.com\n   Attribute name:    \
    \  acfg\n   Long form name:      Actual configuration\n   Type of attribute: \
    \  Media-level\n   Subject to charset:  No\n   Purpose:             Actual configuration\
    \ for SDP Capability\n                        Negotiation\n   Appropriate values:\
    \  See Section 3.5.2 of RFC 5939\n   Contact name:        Flemming Andreasen,\
    \ fandreas@cisco.com\n"
- title: 6.2.  New SDP Capability Negotiation Option Tag Registry
  contents:
  - "6.2.  New SDP Capability Negotiation Option Tag Registry\n   The IANA has created\
    \ a new SDP Capability Negotiation Option Tag\n   registry.  An IANA SDP Capability\
    \ Negotiation Option Tag registration\n   MUST be documented in an RFC in accordance\
    \ with the [RFC5226] IETF\n   Review policy.  The RFC MUST provide the name of\
    \ the option tag, a\n   syntax, and a semantic specification of any new SDP attributes\
    \ and\n   any extensions to the potential configuration (\"a=pcfg\") and actual\n\
    \   configuration (\"a=acfg\") attributes provided in this document.  If\n   the\
    \ extension defines any new SDP attributes that are intended to be\n   capabilities\
    \ for use by the capability negotiation framework (e.g.,\n   similar to \"a=acap\"\
    ), those capabilities MUST adhere to the\n   guidelines provided in Section 3.4.3.\
    \  Extensions to the potential\n   and actual configuration attributes MUST adhere\
    \ to the syntax\n   provided in Sections 3.5.1 and 3.5.2.\n   The option tag \"\
    cap-v0\" is defined in this document, and the IANA has\n   registered this option\
    \ tag.\n"
- title: 6.3.  New SDP Capability Negotiation Potential Configuration Parameter
  contents:
  - "6.3.  New SDP Capability Negotiation Potential Configuration Parameter\n    \
    \  Registry\n   The IANA has created a new SDP Capability Negotiation Potential\n\
    \   Configuration Parameter registry.  An IANA SDP Capability Negotiation\n  \
    \ Potential Configuration registration MUST be documented in an RFC in\n   accordance\
    \ with the [RFC5226] IETF Review policy.  The RFC MUST\n   define the syntax and\
    \ semantics of each new potential configuration\n   parameter.  The syntax MUST\
    \ adhere to the syntax provided for\n   extensions in Section 3.5.1 and the semantics\
    \ MUST adhere to the\n   semantics provided for extensions in Section 3.5.1 and\
    \ 3.5.2.\n   Associated with each registration MUST be the encoding name for the\n\
    \   parameter as well as a short descriptive name for it.\n   The potential configuration\
    \ parameters \"a\" for \"attribute\" and \"t\"\n   for \"transport protocol\"\
    \ are defined in this document, and the IANA\n   has registered them.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   The SDP Capability Negotiation solution defined in this\
    \ document\n   draws on the overall capability negotiation framework that was\n\
    \   defined by [SDPng].  Also, the SDP Capability Negotiation solution is\n  \
    \ heavily influenced by the discussions and work done by the SDP\n   Capability\
    \ Negotiation Design Team.  The following people in\n   particular provided useful\
    \ comments and suggestions to either the\n   document itself or the overall direction\
    \ of the solution defined\n   here: Francois Audet, John Elwell, Roni Even, Miguel\
    \ Garcia, Robert\n   Gilman, Cullen Jennings, Jonathan Lennox, Matt Lepinski,\
    \ Jean-\n   Francois Mule, Joerg Ott, Colin Perkins, Jonathan Rosenberg, Thomas\n\
    \   Stach, and Dan Wing.\n   General Area review comments were provided by Christian\
    \ Vogt, and\n   Stephen Kent provided Security Directorate review comments.  Eric\n\
    \   Rescorla provided textual input to the Security Considerations.\n   Alexey\
    \ Melnikov, Robert Sparks, and Magnus Westerlund provided\n   several review comments\
    \ as well.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3264]  Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model\n\
    \              with Session Description Protocol (SDP)\", RFC 3264, June\n   \
    \           2002.\n   [RFC4566]  Handley, M., Jacobson, V., and C. Perkins, \"\
    SDP: Session\n              Description Protocol\", RFC 4566, July 2006.\n   [RFC5226]\
    \  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA\
    \ Considerations Section in RFCs\", BCP 26, RFC 5226,\n              May 2008.\n\
    \   [RFC5234]  Crocker, D., Ed., and P. Overell, \"Augmented BNF for\n       \
    \       Syntax Specifications: ABNF\", STD 68, RFC 5234, January\n           \
    \   2008.\n   [RFC5245]  Rosenberg, J., \"Interactive Connectivity Establishment\n\
    \              (ICE): A Protocol for Network Address Translator (NAT)\n      \
    \        Traversal for Offer/Answer Protocols\", RFC 5245, April\n           \
    \   2010.\n"
- title: 8.2. Informative References
  contents:
  - "8.2. Informative References\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo,\
    \ G., Johnston,\n              A., Peterson, J., Sparks, R., Handley, M., and\
    \ E.\n              Schooler, \"SIP: Session Initiation Protocol\", RFC 3261,\n\
    \              June 2002.\n   [RFC3312]  Camarillo, G., Ed., Marshall, W., Ed.,\
    \ and J. Rosenberg,\n              \"Integration of Resource Management and Session\
    \ Initiation\n              Protocol (SIP)\", RFC 3312, October 2002.\n   [RFC3262]\
    \  Rosenberg, J. and H. Schulzrinne, \"Reliability of\n              Provisional\
    \ Responses in Session Initiation Protocol\n              (SIP)\", RFC 3262, June\
    \ 2002.\n   [RFC3407]  Andreasen, F., \"Session Description Protocol (SDP) Simple\n\
    \              Capability Declaration\", RFC 3407, October 2002.\n   [RFC3551]\
    \  Schulzrinne, H. and S. Casner, \"RTP Profile for Audio and\n              Video\
    \ Conferences with Minimal Control\", STD 65, RFC 3551,\n              July 2003.\n\
    \   [RFC3711]  Baugher, M., McGrew, D., Naslund, M., Carrara, E., and K.\n   \
    \           Norrman, \"The Secure Real-time Transport Protocol (SRTP)\",\n   \
    \           RFC 3711, March 2004.\n   [RFC3830]  Arkko, J., Carrara, E., Lindholm,\
    \ F., Naslund, M., and K.\n              Norrman, \"MIKEY: Multimedia Internet\
    \ KEYing\", RFC 3830,\n              August 2004.\n   [RFC4145]  Yon, D. and G.\
    \ Camarillo, \"TCP-Based Media Transport in\n              the Session Description\
    \ Protocol (SDP)\", RFC 4145,\n              September 2005.\n   [RFC4474]  Peterson,\
    \ J. and C. Jennings, \"Enhancements for\n              Authenticated Identity\
    \ Management in the Session\n              Initiation Protocol (SIP)\", RFC 4474,\
    \ August 2006.\n   [RFC4567]  Arkko, J., Lindholm, F., Naslund, M., Norrman, K.,\
    \ and E.\n              Carrara, \"Key Management Extensions for Session\n   \
    \           Description Protocol (SDP) and Real Time Streaming\n             \
    \ Protocol (RTSP)\", RFC 4567, July 2006.\n   [RFC4568]  Andreasen, F., Baugher,\
    \ M., and D. Wing, \"Session\n              Description Protocol (SDP) Security\
    \ Descriptions for Media\n              Streams\", RFC 4568, July 2006.\n   [RFC4585]\
    \  Ott, J., Wenger, S., Sato, N., Burmeister, C., and J. Rey,\n              \"\
    Extended RTP Profile for Real-time Transport Control\n              Protocol (RTCP)-Based\
    \ Feedback (RTP/AVPF)\", RFC 4585, July\n              2006.\n   [RFC4588]  Rey,\
    \ J., Leon, D., Miyazaki, A., Varsa, V., and R.\n              Hakenberg, \"RTP\
    \ Retransmission Payload Format\", RFC 4588,\n              July 2006.\n   [RFC4756]\
    \  Li, A., \"Forward Error Correction Grouping Semantics in\n              Session\
    \ Description Protocol\", RFC 4756, November 2006.\n   [RFC5027]  Andreasen, F.\
    \ and D. Wing, \"Security Preconditions for\n              Session Description\
    \ Protocol (SDP) Media Streams\", RFC\n              5027, October 2007.\n   [RFC5124]\
    \  Ott, J. and E. Carrara, \"Extended Secure RTP Profile for\n              Real-time\
    \ Transport Control Protocol (RTCP)-Based Feedback\n              (RTP/SAVPF)\"\
    , RFC 5124, February 2008.\n   [RFC5751]  Ramsdell, B. and S. Turner, \"Secure/Multipurpose\
    \ Internet\n              Mail Extensions (S/MIME) Version 3.2 Message\n     \
    \         Specification\", RFC 5751, January 2010.\n   [RFC5763]  Fischl, J.,\
    \ Tschofenig, H., and E. Rescorla, \"Framework\n              for Establishing\
    \ a Secure Real-time Transport Protocol\n              (SRTP) Security Context\
    \ Using Datagram Transport Layer\n              Security (DTLS)\", RFC 5763, May\
    \ 2010.\n   [RFC5764]  McGrew, D. and E. Rescorla, \"Datagram Transport Layer\n\
    \              Security (DTLS) Extension to Establish Keys for the Secure\n  \
    \            Real-time Transport Protocol (SRTP)\", RFC 5764, May 2010.\n   [RFC5888]\
    \  Camarillo, G. and H. Schulzrinne, \"The Session Description\n             \
    \ Protocol (SDP) Grouping Framework\", RFC 5888, June 2010.\n   [BESRTP]   Kaplan,\
    \ H. and F. Audet, \"Session Description Protocol\n              (SDP) Offer/Answer\
    \ Negotiation For Best-Effort Secure\n              Real-Time Transport Protocol\"\
    , Work in Progress, October\n              2006.\n   [ICETCP]   Rosenberg, J.,\
    \ Keranen, A., Lowekamp, B., and A. Roach,\n              \"TCP Candidates with\
    \ Interactive Connectivity\n              Establishment (ICE)\", Work in Progress,\
    \ September 2010.\n   [SDPMedCap]\n              Gilman, R., Even, R., and F.\
    \ Andreasen, \"SDP media\n              capabilities Negotiation\", Work in Progress,\
    \ July 2010.\n   [SDPng]    Kutscher, D., Ott, J., and C. Bormann, \"Session\n\
    \              Description and Capability Negotiation\", Work in Progress,\n \
    \             February 2005.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Flemming Andreasen\n   Cisco Systems\n   Iselin, NJ 08830\n\
    \   USA\n   EMail: fandreas@cisco.com\n"
