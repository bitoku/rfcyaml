- title: __initial_text__
  contents:
  - "            Password Authenticated Connection Establishment\n       with the\
    \ Internet Key Exchange Protocol version 2 (IKEv2)\n"
- title: Abstract
  contents:
  - "Abstract\n   The Internet Key Exchange protocol version 2 (IKEv2) does not allow\n\
    \   secure peer authentication when using short credential strings, i.e.,\n  \
    \ passwords.  Several proposals have been made to integrate password-\n   authentication\
    \ protocols into IKE.  This document provides an\n   adaptation of Password Authenticated\
    \ Connection Establishment (PACE)\n   to the setting of IKEv2 and demonstrates\
    \ the advantages of this\n   integration.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6631.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Terminology ................................................4\n  \
    \ 2. Overview ........................................................5\n   3.\
    \ Protocol Sequence ...............................................6\n      3.1.\
    \ The IKE_SA_INIT Exchange ...................................6\n      3.2. The\
    \ IKE_AUTH Exchange, Round #1 ............................7\n      3.3. The IKE_AUTH\
    \ Exchange, Round #2 ............................7\n      3.4. Public Key Validation\
    \ ......................................8\n      3.5. Creating a Long-Term Shared\
    \ Secret .........................9\n      3.6. Using the Long-Term Shared Secret\
    \ .........................11\n   4. Encrypting and Mapping the Nonce ...............................11\n\
    \      4.1. Encrypting the Nonce ......................................11\n  \
    \    4.2. Mapping the Nonce .........................................12\n    \
    \       4.2.1. Modular Diffie-Hellman .............................13\n      \
    \     4.2.2. Elliptic Curve Diffie-Hellman ......................13\n   5. Protocol\
    \ Details ...............................................13\n      5.1. Password\
    \ Processing .......................................13\n      5.2. The SECURE_PASSWORD_METHODS\
    \ Notification ..................14\n      5.3. The PSK_PERSIST Notification ..............................15\n\
    \      5.4. The PSK_CONFIRM Notification ..............................15\n  \
    \    5.5. The GSPM(ENONCE) Payload ..................................15\n    \
    \  5.6. The KE (KEi2/KEr2) Payloads in PACE .......................16\n      5.7.\
    \ PACE and Session Resumption ...............................16\n   6. Security\
    \ Considerations ........................................16\n      6.1. Credential\
    \ Security Assumptions ...........................16\n      6.2. Vulnerability\
    \ to Passive and Active Attacks ...............16\n      6.3. Perfect Forward\
    \ Secrecy ...................................17\n      6.4. Randomness ................................................17\n\
    \      6.5. Identity Protection .......................................17\n  \
    \    6.6. Denial of Service .........................................17\n    \
    \  6.7. Choice of Encryption Algorithms ...........................17\n      6.8.\
    \ Security Model and Security Proof .........................18\n      6.9. Long-Term\
    \ Credential Storage ..............................18\n   7. IANA Considerations\
    \ ............................................19\n   8. Acknowledgments ................................................19\n\
    \   9. References .....................................................19\n  \
    \    9.1. Normative References ......................................19\n    \
    \  9.2. Informative References ....................................20\n   Appendix\
    \ A. Protocol Selection Criteria ...........................22\n     A.1. Security\
    \ Criteria ..........................................22\n     A.2. Intellectual\
    \ Property Criteria .............................22\n     A.3. Miscellaneous Criteria\
    \ .....................................22\n   Appendix B. Password Salting ......................................23\n\
    \     B.1. Solving the Asymmetric Case with Symmetric Cryptography ....24\n  \
    \   B.2. Solving the Fully Symmetric Case with Asymmetric\n          Cryptography\
    \ ...............................................25\n     B.3. Generation of a\
    \ Strong, Long-Term, Shared Secret ...........26\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   PACE [TR03110] is a security protocol that establishes a\
    \ mutually\n   authenticated (and encrypted) channel between two parties based\
    \ on\n   weak (short) passwords.  PACE provides strong session keys that are\n\
    \   independent of the strength of the password.  PACE belongs to a\n   family\
    \ of protocols often referred to as Zero-Knowledge Password\n   Proof (ZKPP) protocols,\
    \ all of which amplify weak passwords into\n   strong session keys.  This document\
    \ describes the integration of PACE\n   into IKEv2 [RFC5996] as a new authentication\
    \ mode, analogous to the\n   existing certificate and Pre-Shared Key (PSK) authentication\
    \ modes.\n   Some of the advantages of our approach, compared to the existing\n\
    \   IKEv2, include the following:\n   o  The current best practice to implement\
    \ password authentication in\n      IKE involves certificate-based authentication\
    \ of the server plus\n      some Extensible Authentication Protocol (EAP) method\
    \ to\n      authenticate the client.  This involves two non-trivial\n      infrastructure\
    \ components (PKI and EAP/AAA).  Moreover,\n      certificate authentication is\
    \ hard to get right and often depends\n      on unreliable user behavior for its\
    \ security.\n   o  Alternatively, native IKEv2 shared secret authentication can\
    \ be\n      used with passwords.  However, this usage is insecure;\n      specifically,\
    \ it is vulnerable to active attackers.\n   o  Some newer EAP methods can be used\
    \ for mutual authentication and,\n      combined with [RFC5998], can be well integrated\
    \ into IKEv2.  This\n      is certainly an option in some cases, but the current\
    \ proposal may\n      be simpler to implement.\n   Compared to other protocols\
    \ aiming at similar goals, PACE has several\n   advantages.  PACE was designed\
    \ to allow for a high level of\n   flexibility with respect to cryptographic algorithms;\
    \ e.g., it can be\n   implemented based on Modular Diffie-Hellman as well as Elliptic\
    \ Curve\n   Diffie-Hellman without any restrictions on the mathematical group\
    \ to\n   be used, other than the requirement that the group be\n   cryptographically\
    \ secure.  The protocol itself is also proven to be\n   cryptographically secure\
    \ [PACEsec].  The PACE protocol is currently\n   used in an international standard\
    \ for digital travel documents\n   [ICAO].\n   The integration aims at keeping\
    \ IKEv2 unchanged as much as possible;\n   e.g., the mechanisms used to establish\
    \ Child security associations\n   (SAs) as provided by IKEv2 would be maintained\
    \ with no change.\n   The Password-Authenticated Key Exchange (PAKE) framework\
    \ document\n   [RFC6467] defines a set of payloads for different types of PAKE\n\
    \   methods within IKEv2.  This document reuses this framework.  Note\n   that\
    \ the current document is self-contained; i.e., all relevant\n   payloads and\
    \ semantics are redefined here.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ [RFC2119].\n   The following notation is used in this document:\n      E() \
    \     Symmetric encryption\n      D()      Symmetric decryption\n      KA()  \
    \   Key agreement\n      Map()    Mapping function\n      Pwd      Shared password\n\
    \      SPwd     Stored password\n      KPwd     Symmetric key derived from a password\
    \ Pwd\n      G        Static group generator\n      GE       Ephemeral group generator\n\
    \      ENONCE   Encrypted nonce\n      PKEi     Ephemeral public key of the initiator\n\
    \      SKEi     Ephemeral secret key of the initiator\n      PKEr     Ephemeral\
    \ public key of the responder\n      SKEr     Ephemeral secret key of the responder\n\
    \      AUTH     Authentication payload\n   Any other notation used here is defined\
    \ in [RFC5996].\n"
- title: 2.  Overview
  contents:
  - "2.  Overview\n   At a high level, the following steps are performed by the initiator\n\
    \   and the responder.  They result in a two-round IKE_AUTH exchange,\n   described\
    \ in Section 3 below.\n   1.  The initiator randomly and uniformly chooses a nonce\
    \ s, encrypts\n       the nonce using the password, and sends the ciphertext\n\
    \          ENONCE = E(KPwd, s)\n       to the responder.  The responder recovers\
    \ the plaintext nonce s\n       with the help of the shared password Pwd.\n  \
    \ 2.  The nonce s is mapped to an ephemeral generator\n          GE = G^s * SASharedSecret,\n\
    \       where G is the generator of the selected Modular Exponential\n       (MODP)\
    \ group and SASharedSecret is a shared secret that has been\n       generated\
    \ in the IKE_SA_INIT step.\n   3.  Both the initiator and the responder each calculate\
    \ an ephemeral\n       key pair\n          (SKEi, PKEi = GE^SKEi) and (SKEr, PKEr=GE^SKEr),\n\
    \       respectively, based on the ephemeral generator GE, and exchange\n    \
    \   the public keys.\n   4.  Finally, they compute the shared secret\n       \
    \   PACESharedSecret = PKEi^SKEr = PKEr^SKEi\n       and generate, exchange, and\
    \ verify the IKE authentication token\n       AUTH using the shared secret PACESharedSecret.\n\
    \   The encryption function E() must be carefully chosen to prevent\n   dictionary\
    \ attacks that would otherwise allow an attacker to recover\n   the password.\
    \  Those restrictions are described in Section 4.1.\n   Details on the mapping\
    \ function, including the elliptic curve\n   variant, can be found in Section\
    \ 4.2.\n   To avoid the risks inherent in storing a short password (e.g., the\n\
    \   fact that passwords are often reused for different applications),\n   this\
    \ protocol allows the peers to jointly convert the password into a\n   cryptographically\
    \ stronger shared secret.  This shared secret can\n   then be stored by both peers,\
    \ in lieu of the original password or its\n   salted variants.\n"
- title: 3.  Protocol Sequence
  contents:
  - "3.  Protocol Sequence\n   The protocol consists of three round trips -- an IKE_SA_INIT\
    \ exchange\n   and a 2-round IKE_AUTH exchange -- as shown in the next figure.\
    \  An\n   optional Informational exchange may follow (see Section 3.5).\n    \
    \ Initiator                      Responder\n     ---------                   \
    \   ---------\n     IKE_SA_INIT:\n     HDR, SAi1, KEi, Ni, N(SECURE_PASSWORD_METHODS)\
    \  ->\n                      <- HDR, SAr1, KEr, Nr, N(SECURE_PASSWORD_METHODS)\n\
    \     IKE_AUTH round #1:\n     HDR, SK{IDi, [IDr,], SAi2,\n             TSi, TSr,\
    \ GSPM(ENONCE), KEi2} ->\n                                                  <-\
    \ HDR, SK{IDr, KEr2}\n     IKE_AUTH round #2:\n     HDR, SK{AUTH [, N(PSK_PERSIST)]\
    \ } ->\n                   <- HDR, SK{AUTH, SAr2, TSi, TSr [, N(PSK_PERSIST)]\
    \ }\n                     Figure 1: IKE SA Setup with PACE\n"
- title: 3.1.  The IKE_SA_INIT Exchange
  contents:
  - "3.1.  The IKE_SA_INIT Exchange\n   The initiator sends a SECURE_PASSWORD_METHODS\
    \ notification that\n   indicates its support of this extension and its wish to\
    \ authenticate\n   using a password.  The following text assumes that the responder\
    \ sent\n   back a SECURE_PASSWORD_METHODS notification that indicates its\n  \
    \ preference for PACE.\n   If PACE was chosen, the algorithms negotiated in SAi1\
    \ and SAr1 are\n   also used for the execution of PACE, i.e., the key agreement\
    \ protocol\n   (Modular Diffie-Hellman or Elliptic Curve Diffie-Hellman), the\
    \ group\n   to be used, and the encryption algorithm.\n"
- title: '3.2.  The IKE_AUTH Exchange, Round #1'
  contents:
  - "3.2.  The IKE_AUTH Exchange, Round #1\n   This is the first part of the PACE\
    \ authentication of the peers.  This\n   exchange MUST NOT be used unless both\
    \ peers indicated support of this\n   protocol.\n   The initiator selects a random\
    \ nonce s and encrypts it to form ENONCE\n   using the password Pwd, as described\
    \ in Section 4.1.  Then, the\n   initiator maps the nonce to an ephemeral generator\
    \ GE of the group as\n   described in Section 4.2, chooses randomly and uniformly\
    \ an ephemeral\n   key pair (SKEi,PKEi) based on the ephemeral generator, and\
    \ finally\n   generates the payloads GSPM(ENONCE) containing the encrypted nonce\n\
    \   and KEi2 containing the ephemeral public key.\n   The responder decrypts the\
    \ received encrypted nonce s = D(KPwd,\n   ENONCE), performs the mapping, and\
    \ randomly and uniformly chooses an\n   ephemeral key pair (SKEr,PKEr) based on\
    \ the ephemeral generator GE.\n   The responder generates the KEr2 payload containing\
    \ the ephemeral\n   public key.\n   The request is equivalent to the IKE_AUTH\
    \ request in a normal IKEv2\n   exchange; i.e., any payload that is valid in an\
    \ IKE_AUTH request is\n   valid (with the same semantics) in this round's request.\
    \  In\n   particular, certificate-related payloads are allowed, even though\n\
    \   their use may not be practical within this mode.\n"
- title: '3.3.  The IKE_AUTH Exchange, Round #2'
  contents:
  - "3.3.  The IKE_AUTH Exchange, Round #2\n   This is the second part of the PACE\
    \ authentication of the peers.\n   The initiator and the responder calculate the\
    \ shared secret\n   PACESharedSecret\n      PACESharedSecret = KA(SKEi, PKEr,\
    \ GE) = KA(SKEr, PKEi, GE),\n   where KA denotes the Diffie-Hellman key agreement,\
    \ e.g., (for MODP\n   groups), modular exponentiation.  Then, they calculate the\n\
    \   authentication tokens AUTHi and AUTHr.\n   The initiator calculates\n    \
    \  AUTHi = prf(prf+(Ni | Nr, PACESharedSecret),\n      <InitiatorSignedOctets>\
    \ | PKEr)\n   See Section 2.15 of [RFC5996] for the definition of signed octets.\n\
    \   The responder calculates\n      AUTHr = prf(prf+(Ni | Nr, PACESharedSecret),\n\
    \      <ResponderSignedOctets> | PKEi)\n   Both AUTH payloads MUST indicate as\
    \ their authentication method the\n   Generic Secure Password Authentication Method\
    \ [RFC6467], whose value\n   is 12.  The authentication tokens are exchanged,\
    \ and each of them\n   MUST be verified by the other party.  The behavior when\
    \ this\n   verification fails is unchanged from [RFC5996].\n   Each of the peers\
    \ MAY generate a long-term credential at this point,\n   after it has verified\
    \ the opposite peer's identity.  The shared\n   secret is\n      LongTermSecret\
    \ = prf(Ni | Nr, \"PACE Generated PSK\" |\n      PACESharedSecret),\n   where\
    \ the literal string is ASCII-encoded, with no zero terminator.\n   The generated\
    \ secret MUST be persisted to stable memory before\n   sending the response. \
    \ See Section 3.5 for more details about this\n   facility.\n   This round's response\
    \ is equivalent to the IKE_AUTH response in a\n   normal IKEv2 exchange; i.e.,\
    \ any payload that is valid in an IKE_AUTH\n   response is valid (with the same\
    \ semantics) in the second round's\n   response.\n   Following authentication,\
    \ all temporary values MUST be deleted by the\n   peers, including in particular\
    \ s, the ephemeral generator, the\n   ephemeral key pairs, and PACESharedSecret.\n"
- title: 3.4.  Public Key Validation
  contents:
  - "3.4.  Public Key Validation\n   The security of the protocol relies on the entanglement\
    \ of a weak\n   password with cryptographically strong shared secrets, SASharedSecret\n\
    \   and PACESharedSecret, mutually and randomly generated by the\n   initiator\
    \ and the responder.  If an attacker can influence the\n   randomness of those\
    \ shared secrets, the confidentiality of the\n   password may be directly affected.\n\
    \   Implementations MUST therefore verify that the shared secrets\n   SASharedSecret\
    \ and PACESharedSecret are random elements of the group\n   generated by G to\
    \ prevent small subgroup attacks.  This can be\n   achieved by a validation of\
    \ the public keys (i.e., KEi, PKEi, and\n   KEr, PKEr).\n   First of all, each\
    \ party MUST check that the public keys PKEi, PKEr,\n   KEi, and KEr differ. \
    \ Otherwise, it MUST abort the protocol.\n   For each received public key PK,\
    \ the following tests SHOULD be\n   performed.  Any failure in the validation\
    \ MUST be interpreted as an\n   attack, and the protocol SHALL be aborted.\n \
    \  o  Verify that PK is an element of the Diffie-Hellman Group.\n      *  For\
    \ Modular Diffie-Hellman, check that PK lies within the\n         interval [2,p-2].\n\
    \      *  For Elliptic Curve Diffie-Hellman, check that PK is a point on\n   \
    \      the Elliptic Curve and not the point at infinity.\n   o  Verify that PK\
    \ is an element of the cryptographic subgroup of\n      order q.\n      *  For\
    \ Modular Diffie-Hellman, check that PK^q = 1 (mod p).\n      *  For Elliptic\
    \ Curve Diffie-Hellman, check that q * PK = 0.\n   Note that for most of the MODP\
    \ groups, the order q = (p-1)/2.  This\n   applies in particular to the standard\
    \ groups #2, #5, and #14,\n   commonly used in IKE.  For ECP and MODP groups not\
    \ based on safe\n   primes, the order q is explictly stated in the parameters.\n\
    \   As an alternative to the public key validation, the compatible\n   cofactor\
    \ exponentiation/multiplication may be used, which is often\n   more efficient\
    \ but requires changes to the implementation of the key\n   agreement.  Details\
    \ on the implementation can be found in [RFC2785]\n   and in [TR03111] for Modular\
    \ Diffie-Hellman and Elliptic Curve\n   Diffie-Hellman, respectively.\n"
- title: 3.5.  Creating a Long-Term Shared Secret
  contents:
  - "3.5.  Creating a Long-Term Shared Secret\n   To reduce the time that the peers\
    \ store a hashed password, it is\n   RECOMMENDED that the password be replaced\
    \ by a dedicated shared\n   secret, according to the method described in this\
    \ section.  See\n   Appendix B for more discussion of the security threats involved.\n\
    \   Both peers generate the value LongTermSecret during round #2 of\n   IKE_AUTH,\
    \ as shown above.  Later on, they exchange a PERSIST_PSK\n   notification.  Assume\
    \ that both peers support this mechanism (e.g.,\n   the IKE implementation is\
    \ able to modify its own credential store).\n   Then, each of the peers, when\
    \ receiving the notification, permanently\n   deletes the stored password and\
    \ replaces it with LongTermSecret.\n   These credentials are stored in the Peer\
    \ Authorization Database (PAD)\n   [RFC4301] and are associated with the identity\
    \ of the opposite peer.\n   This solution is designed as a two-phase commitment,\
    \ so that failure\n   at any time cannot result in the peers not having any shared\
    \ secret.\n     Initiator                      Responder\n     ---------     \
    \                 ---------\n     IKE_AUTH round #2:\n     HDR, SK{..., N(PSK_PERSIST)}\
    \ ---------->\n                                 Responder computes and stores\
    \ PSK\n                           <------- HDR, SK{..., N(PSK_PERSIST)}\n    \
    \ Initiator computes and stores PSK\n     HDR, SK{N(PSK_CONFIRM)} -------------->\n\
    \                                 Responder deletes the short password\n     \
    \                      <-------------- HDR, SK{N(PSK_CONFIRM)}\n     Initiator\
    \ deletes the short password\n            Figure 2: IKE SA Setup with PACE and\
    \ PSK Generation\n   In the second round of IKE_AUTH, the initiator MAY send a\
    \ PSK_PERSIST\n   notification if it wishes to use this mechanism.  If the responder\n\
    \   agrees, and only after it has authenticated the initiator, it MUST\n   generate\
    \ a new PSK, save it to stable storage (e.g., to disk), and\n   MUST respond with\
    \ a PSK_PERSIST notification.  Otherwise, it simply\n   does not include the notification\
    \ in its reply.  When receiving the\n   reply, and after authenticating the responder,\
    \ the initiator MUST\n   also generate the PSK and save it in stable storage.\n\
    \   If the peers have negotiated this mechanism, the initiator MUST send\n   the\
    \ PSK_CONFIRM notification in an Informational exchange shortly\n   after the\
    \ IKE SA has been set up.  When the responder receives it, it\n   MUST delete\
    \ the stored short password from its credential database\n   and respond with\
    \ a PSK_CONFIRM notification.  Upon receiving this\n   notification, the initiator\
    \ deletes its copy of the short password.\n   If not saved to persistent storage,\
    \ the LongTermSecret MUST be\n   deleted when the IKE SA is rekeyed or when it\
    \ is torn down.  It\n   SHOULD be deleted 1 hour after the initial IKE SA has\
    \ been set up.\n"
- title: 3.6.  Using the Long-Term Shared Secret
  contents:
  - "3.6.  Using the Long-Term Shared Secret\n   The LongTermSecret MUST be used as\
    \ a regular IKE Pre-Shared Key\n   (PSK), rather than with PACE or any other password-based\n\
    \   authentication method.\n   Normally, at the completion of this protocol, both\
    \ peers will have\n   either a shared password or a shared PSK.  The protocol\
    \ is designed\n   so that the peers will have a shared credential, regardless\
    \ of any\n   protocol failures.  However, in some failure cases, the initiator\
    \ may\n   find itself with both a short password and a PSK for a particular\n\
    \   peer.  In that case, it MUST first try to authenticate with a\n   password\
    \ and, upon success, MUST attempt to convert it to a PSK.  If\n   password authentication\
    \ fails, it MUST use the PSK and upon\n   successful setup of the IKE SA MUST\
    \ permanently delete the password.\n"
- title: 4.  Encrypting and Mapping the Nonce
  contents:
  - '4.  Encrypting and Mapping the Nonce

    '
- title: 4.1.  Encrypting the Nonce
  contents:
  - "4.1.  Encrypting the Nonce\n   The shared password is not used as is.  Instead,\
    \ it SHOULD be\n   converted into a \"stored password\" SPwd, so that the plaintext\n\
    \   password does not need to be stored for long periods.  SPwd is\n   defined\
    \ as\n      SPwd = prf(\"IKE with PACE\", Pwd),\n   where the literal string consists\
    \ of ASCII characters with no zero\n   terminator.  If the negotiated pseudorandom\
    \ function (prf) requires a\n   fixed-size key, the literal string is either truncated\
    \ or padded with\n   zero octets on the right, as needed.  Multiple copies of\
    \ SPwd MAY be\n   stored, if the prf function is not known in advance.\n     \
    \ KPwd = prf+(Ni | Nr, SPwd),\n   where Ni and Nr are the regular IKE nonces,\
    \ stripped of any headers.\n   If the negotiated prf takes a fixed-length key\
    \ and the lengths of Ni\n   and Nr do not add up to that length, half the bits\
    \ must come from Ni\n   and half from Nr, taking the first bits of each.  \"prf+\"\
    \ is defined\n   in Section 2.13 of [RFC5996].  The length of KPwd is determined\
    \ by\n   the key length of the negotiated encryption algorithm.\n   A nonce s\
    \ is randomly selected by the initiator (see Section 6.4 for\n   additional considerations).\
    \  The length of s MUST be exactly\n   32 octets.\n   KPwd is now used with the\
    \ encryption transform to encrypt the nonce:\n      ENONCE = E(KPwd, s)\n   If\
    \ an Initialization Vector (IV) is required by the cipher, it MUST\n   be included\
    \ in the GSPM(ENONCE) payload.  It is RECOMMENDED that the\n   IV be chosen both\
    \ randomly and uniformly distributed, even though\n   this condition is not necessary\
    \ for the cryptographic security of the\n   protocol.\n   Note: Padding MUST NOT\
    \ be used when encrypting the nonce.  The size\n   of the nonce has been chosen\
    \ such that it can be encrypted with block\n   ciphers having block sizes of 32,\
    \ 64, and 128 bits without any\n   padding.\n   If an authenticated encryption\
    \ cipher [RFC5282] has been negotiated\n   for the IKE SA, it MUST NOT be used\
    \ as is because such use would be\n   vulnerable to dictionary attacks.  Instead,\
    \ the corresponding\n   unauthenticated mode MUST be used.  All Galois/Counter\
    \ Mode (GCM) and\n   all Counter with CBC-MAC (CCM) encryption algorithms are\
    \ mapped to\n   the corresponding counter-mode algorithm.  For example, if the\n\
    \   negotiated encryption algorithm (Transform Type 1) is \"AES-GCM with\n   an\
    \ 8-octet Integrity Check Value (ICV)\", then ENCR_AES_CTR (with the\n   same\
    \ key length) is used to encrypt the nonce.  If such a mapping\n   does not exist\
    \ for a particular cipher, then it MUST NOT be used\n   within the current protocol.\n"
- title: 4.2.  Mapping the Nonce
  contents:
  - "4.2.  Mapping the Nonce\n   The mapping is based on a second anonymous Diffie-Hellman\
    \ key\n   agreement protocol to create a shared secret that is used together\n\
    \   with the exchanged nonce to calculate a common secret generator of\n   the\
    \ group.\n   While in [TR03110] the generation of the shared secret is part of\
    \ the\n   mapping, in the setting of IKEv2, a shared secret SASharedSecret has\n\
    \   already been generated as part of the IKE_SA_INIT step.  Using the\n   notation\
    \ of [RFC5996],\n      SASharedSecret = g^ir\n   Let G and GE be the generator\
    \ of the negotiated Diffie-Hellman group,\n   and the calculated ephemeral generator,\
    \ respectively.  The following\n   subsections describe the mapping for different\
    \ Diffie-Hellman\n   variants.\n"
- title: 4.2.1.  Modular Diffie-Hellman
  contents:
  - "4.2.1.  Modular Diffie-Hellman\n   The function Map:G->GE is defined as GE =\
    \ G^s * SASharedSecret.\n   Note that the protocol will fail if G^s = 1/SASharedSecret.\
    \  If s is\n   chosen randomly, this event occurs with negligible probability.\
    \  In\n   implementations that detect such a failure, the initiator SHOULD\n \
    \  choose s again.\n"
- title: 4.2.2.  Elliptic Curve Diffie-Hellman
  contents:
  - "4.2.2.  Elliptic Curve Diffie-Hellman\n   The function Map:G->GE is defined as\
    \ GE = s*G + SASharedSecret.\n   Note that the protocol will fail if s*G = -SharedSecret.\
    \  If s is\n   chosen randomly, this event occurs with negligible probability.\
    \  In\n   implementations that detect such a failure, the initiator SHOULD\n \
    \  choose s again.\n"
- title: 5.  Protocol Details
  contents:
  - '5.  Protocol Details

    '
- title: 5.1.  Password Processing
  contents:
  - "5.1.  Password Processing\n   The input password string SHOULD be processed according\
    \ to the rules\n   of the [RFC4013] profile of [RFC3454].  A password SHOULD be\n\
    \   considered a \"stored string\" per [RFC3454]; therefore, unassigned\n   code\
    \ points are prohibited.  The output is the binary representation\n   of the processed\
    \ UTF-8 character string.  Prohibited output and\n   unassigned codepoints encountered\
    \ in SASLprep preprocessing SHOULD\n   cause a preprocessing failure, and the\
    \ output SHOULD NOT be used.  A\n   compliant implementation MUST NOT apply any\
    \ other form of processing\n   to the input password, other than as described\
    \ in this section.\n   See Section 3 of [RFC4013] for examples of SASLprep processing.\n"
- title: 5.2.  The SECURE_PASSWORD_METHODS Notification
  contents:
  - "5.2.  The SECURE_PASSWORD_METHODS Notification\n   [RFC6467] defines a new type\
    \ of Notify payload to indicate support\n   for Secure Password Methods (SPMs)\
    \ in the IKE_SA_INIT exchange.  The\n   SPM Notify payload is defined as follows:\n\
    \                          1                   2                   3\n      0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Next Payload  |C|  RESERVED   |         Payload Length        |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  Protocol\
    \ ID  |   SPI Size    |      Notify Message Type      |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                                                               |\n    \
    \ ~                Security Parameter Index (SPI)                 ~\n     |  \
    \                                                             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                                                               |\n    \
    \ ~                       Notification Data                       ~\n     |  \
    \                                                             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \            Figure 3: SECURE_PASSWORD_METHODS Payload Structure\n   The Protocol\
    \ ID is zero, and the SPI Size is also zero, indicating\n   that the SPI field\
    \ is empty.  The Notify Message Type is\n   SECURE_PASSWORD_METHODS (value 16424).\n\
    \   The Notification Data contains the list of the 16-bit secure password\n  \
    \ method numbers:\n                          1                   2           \
    \        3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Secure Password Method #1     | Secure Password Method #2     |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     | Secure\
    \ Password Method #3     | ...                           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \              Figure 4: SECURE_PASSWORD_METHODS Payload Data\n   For the current\
    \ method, the list of proposed methods MUST include the\n   value PACE (1).\n"
- title: 5.3.  The PSK_PERSIST Notification
  contents:
  - "5.3.  The PSK_PERSIST Notification\n   This document defines the PSK_PERSIST\
    \ notification type, whose value\n   is 16425.  This notification MUST be sent\
    \ with no data.  However, for\n   future extensibility, the receiver MUST ignore\
    \ any notification data\n   if such data is present.\n"
- title: 5.4.  The PSK_CONFIRM Notification
  contents:
  - "5.4.  The PSK_CONFIRM Notification\n   This document defines the PSK_CONFIRM\
    \ notification type, whose value\n   is 16426.  This notification MUST be sent\
    \ with no data.  However, for\n   future extensibility, the receiver MUST ignore\
    \ any notification data\n   if such data is present.\n"
- title: 5.5.  The GSPM(ENONCE) Payload
  contents:
  - "5.5.  The GSPM(ENONCE) Payload\n   This protocol defines the ENONCE (encrypted\
    \ nonce) payload, which\n   reuses the Generic SPM (GSPM) payload type [RFC6467]\
    \ (value 49).  Its\n   format is as follows:\n      0                   1    \
    \               2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Next Payload  |C|  RESERVED   |         Payload Length        |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     | PACE-RESERVED\
    \ |     Initialization Vector                     |\n     +-+-+-+-+-+-+-+-+  \
    \                                             +\n     |     (optional, length\
    \ depends on the encryption algorithm)    |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |                        Encrypted Nonce                        ~\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     ~  \
    \                                                             |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                    Figure 5: ENONCE Payload Structure\n   See Section 4.1 for\
    \ further details about the encrypted nonce.  Note\n   that the protocol -- and\
    \ in particular this payload's format -- does\n   not support any padding of the\
    \ encrypted data.\n   The PACE-RESERVED field must be sent as zero, and it must\
    \ be rejected\n   by the receiver if it is not 0.\n"
- title: 5.6.  The KE (KEi2/KEr2) Payloads in PACE
  contents:
  - "5.6.  The KE (KEi2/KEr2) Payloads in PACE\n   PACE reuses the Key Exchange (KE)\
    \ payload for its Diffie-Hellman\n   exchange, with the new payloads being sent\
    \ within the IKE_AUTH\n   exchange.  Since only one Diffie-Hellman group is negotiated,\
    \ the\n   group denoted by these payloads MUST be identical to the one used in\n\
    \   the \"regular\" KE payloads in IKE_SA_INIT.\n"
- title: 5.7.  PACE and Session Resumption
  contents:
  - "5.7.  PACE and Session Resumption\n   A session resumption [RFC5723] ticket may\
    \ be requested during the\n   IKE_AUTH exchange.  The request MUST be sent in\
    \ the request of the\n   first round, and any response MUST be sent in the response\
    \ of the\n   second one.\n   PACE should be considered an \"authentication method\"\
    , in the sense of\n   Section 5 of [RFC5723], which means that its use MUST be\
    \ noted in the\n   protected ticket.  The format of the ticket is not standardized;\n\
    \   however, it is RECOMMENDED that this indication distinguish between\n   the\
    \ different secure password authentication methods defined for IKE.\n   Note that\
    \ even if the initial authentication used PACE and its\n   extended IKE_AUTH,\
    \ session resumption will still include the normal\n   IKE_AUTH exchange.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   A major goal of this protocol has been to maintain\
    \ the level of\n   security provided by IKEv2.  What follows is an analysis of\
    \ this\n   protocol.  The reader is referred to [RFC5996] for the generic IKEv2\n\
    \   security considerations.\n"
- title: 6.1.  Credential Security Assumptions
  contents:
  - "6.1.  Credential Security Assumptions\n   This protocol makes no assumption on\
    \ the strength of the shared\n   credential.  Best common practices regarding\
    \ minimal password length,\n   use of multiple character classes, etc. SHOULD\
    \ be followed.\n"
- title: 6.2.  Vulnerability to Passive and Active Attacks
  contents:
  - "6.2.  Vulnerability to Passive and Active Attacks\n   The protocol is secure\
    \ against both passive and active attackers.\n   See Section 6.8 for a security\
    \ proof.\n   While not attacking the cryptography, an attacker can still perform\
    \ a\n   standard password-guessing attack.  To mitigate such attacks, an\n   implementation\
    \ MUST include standard protections, such as rate-\n   limiting the number of\
    \ allowed password-guessing attempts, possibly\n   locking identities out after\
    \ a certain number of failed attempts,\n   etc.  Note that the protocol is symmetric;\
    \ therefore, this guidance\n   applies to client-side implementations as well.\n"
- title: 6.3.  Perfect Forward Secrecy
  contents:
  - "6.3.  Perfect Forward Secrecy\n   The key derivation for the IKE SA and any Child\
    \ SAs is performed as\n   part of IKEv2 and remains unchanged.  It directly follows\
    \ that\n   perfect forward security is provided independent of the\n   authentication\
    \ additionally performed by PACE.\n"
- title: 6.4.  Randomness
  contents:
  - "6.4.  Randomness\n   The security of this protocol depends on the quality generation\
    \ of\n   random quantities; see Section 5 of [RFC5996] for more details.\n   Specifically,\
    \ any deviation from randomness of the nonce s might\n   compromise the password.\
    \  Therefore, it is strongly RECOMMENDED that\n   the initiator pass the raw random\
    \ material through a strong prf to\n   ensure the statistical qualities of the\
    \ nonce.\n"
- title: 6.5.  Identity Protection
  contents:
  - "6.5.  Identity Protection\n   This protocol is identical to IKEv2 in the quality\
    \ of identity\n   protection it provides.  Both peers' identities are secure from\n\
    \   passive attackers, and both peers' identities are exposed to active,\n   man-in-the-middle\
    \ attackers.\n"
- title: 6.6.  Denial of Service
  contents:
  - "6.6.  Denial of Service\n   We are not aware of any new denial-of-service attack\
    \ vector enabled\n   by this protocol.\n"
- title: 6.7.  Choice of Encryption Algorithms
  contents:
  - "6.7.  Choice of Encryption Algorithms\n   Any transforms negotiated for IKEv2\
    \ may be used by this protocol.\n   Please refer to Section 4.1 for the considerations\
    \ regarding\n   authenticated encryption (\"combined mode\") algorithms.\n"
- title: 6.8.  Security Model and Security Proof
  contents:
  - "6.8.  Security Model and Security Proof\n   PACE is cryptographically proven\
    \ secure in [PACEsec] in the model of\n   Bellare, Pointcheval, and Rogaway [BPRmodel].\
    \  The setting in which\n   PACE is proven secure is, however, slightly different\
    \ from the\n   setting used in IKEv2.  The differences are described in the\n\
    \   following:\n   o  Part of the mapping is already performed within IKEv2 before\
    \ PACE\n      is started.  This rearrangement does not affect the proof, as the\n\
    \      resulting PACESharedSecret remains close to uniformly distributed\n   \
    \   in the group generated by G.\n   o  The keys for the IKE SA and any Child\
    \ SAs are already generated\n      within IKEv2 before PACE is started.  While\
    \ those session keys\n      could also be derived in PACE, only the keys for the\n\
    \      authentication token are considered in the proof, which explicitly\n  \
    \    recommends a separate key for this purpose.\n   o  IKEv2 allows the negotiation\
    \ of a stream cipher for PACE, while\n      the proven variant always uses a block\
    \ cipher.  The ideal cipher\n      is replaced in the proof by a lazy-sampling\
    \ technique that is\n      similarly applicable to the stream-cipher-based construction.\n\
    \   The differences in the setting therefore have no impact on the\n   validity\
    \ of the proof.\n"
- title: 6.9.  Long-Term Credential Storage
  contents:
  - "6.9.  Long-Term Credential Storage\n   This protocol does not require that peers\
    \ store the plaintext\n   password.  Instead, the value SPwd SHOULD be stored\
    \ by both peers.\n   In addition, the protocol allows both peers to replace the\
    \ password\n   by a crypto-strength shared secret.  This solution improves the\n\
    \   system's security (since passwords are often used for multiple\n   applications),\
    \ but at the cost of implementation complexity.  In\n   particular, if this optional\
    \ mechanism is to be used, the credential\n   database would need to be writable\
    \ by the key management subsystem.\n   See Appendix B for alternatives to this\
    \ approach.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   IANA has allocated the following values:\n   o  A\
    \ PACE value of 1 from the \"IKEv2 Secure Password Methods\"\n      registry [RFC6467].\n\
    \   o  A PSK_PERSIST value of 16425 and a PSK_CONFIRM value of 16426 from\n  \
    \    the \"IKEv2 Notify Message Types - Status Types\" registry.  We note\n  \
    \    that these notification types are generic and that other password\n     \
    \ authentication methods may also choose to use them.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   We would like to thank Dan Harkins for pointing out a\
    \ security issue\n   with our use of combined-mode algorithms in a previous version\
    \ of the\n   protocol.  We thank Tero Kivinen for his generic framework document,\n\
    \   and for a thorough and fruitful review.  Hugo Krawczyk proposed that\n   the\
    \ password be amplified into a persistent shared secret.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]     Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                 Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2785]     Zuccherato, R., \"Methods for Avoiding the \"\
    Small-\n                 Subgroup\" Attacks on the Diffie-Hellman Key Agreement\n\
    \                 Method for S/MIME\", RFC 2785, March 2000.\n   [RFC3454]   \
    \  Hoffman, P. and M. Blanchet, \"Preparation of\n                 Internationalized\
    \ Strings (\"stringprep\")\", RFC 3454,\n                 December 2002.\n   [RFC4013]\
    \     Zeilenga, K., \"SASLprep: Stringprep Profile for User\n                \
    \ Names and Passwords\", RFC 4013, February 2005.\n   [RFC4301]     Kent, S. and\
    \ K. Seo, \"Security Architecture for the\n                 Internet Protocol\"\
    , RFC 4301, December 2005.\n   [RFC5996]     Kaufman, C., Hoffman, P., Nir, Y.,\
    \ and P. Eronen,\n                 \"Internet Key Exchange Protocol Version 2\
    \ (IKEv2)\",\n                 RFC 5996, September 2010.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [BPRmodel]    Bellare, M., Pointcheval, D.,\
    \ and P. Rogaway,\n                 \"Authenticated Key Exchange Secure against\
    \ Dictionary\n                 Attacks\", EUROCRYPT 2000, LNCS 1807, pp. 139-155,\n\
    \                 Springer-Verlag, 2000, <http://www.iacr.org/cryptodb/\n    \
    \             archive/2000/EUROCRYPT/18070139.pdf>.\n   [ICAO]        ISO/IEC\
    \ JTC1 SC17 WG3/TF5 for the International Civil\n                 Aviation Organization\
    \ (ICAO), \"Supplemental Access\n                 Control for Machine Readable\
    \ Travel Documents\",\n                 Version 1.01, November 2010.\n   [IKEv2-CONS]\
    \  Harkins, D., \"Password-Based Authentication in IKEv2:\n                 Selection\
    \ Criteria and Considerations\", Work\n                 in Progress, October 2010.\n\
    \   [PACEsec]     Bender, J., Fischlin, M., and D. Kuegler, \"Security\n     \
    \            Analysis of the PACE Key-Agreement Protocol\",\n                \
    \ LNCS 5735, pp. 33-48, Springer-Verlag (the extended\n                 abstract\
    \ appeared in Information Security Conference\n                 (ISC) 2009), December\
    \ 2009,\n                 <http://eprint.iacr.org/2009/624>.\n   [RFC5282]   \
    \  Black, D. and D. McGrew, \"Using Authenticated\n                 Encryption\
    \ Algorithms with the Encrypted Payload of the\n                 Internet Key\
    \ Exchange version 2 (IKEv2) Protocol\",\n                 RFC 5282, August 2008.\n\
    \   [RFC5723]     Sheffer, Y. and H. Tschofenig, \"Internet Key Exchange\n   \
    \              Protocol Version 2 (IKEv2) Session Resumption\",\n            \
    \     RFC 5723, January 2010.\n   [RFC5998]     Eronen, P., Tschofenig, H., and\
    \ Y. Sheffer, \"An\n                 Extension for EAP-Only Authentication in\
    \ IKEv2\",\n                 RFC 5998, September 2010.\n   [RFC6467]     Kivinen,\
    \ T., \"Secure Password Framework for Internet\n                 Key Exchange\
    \ Version 2 (IKEv2)\", RFC 6467,\n                 December 2011.\n   [TR03110]\
    \     BSI, \"TR-03110, Advanced Security Mechanisms for\n                 Machine\
    \ Readable Travel Documents, Part 2 - Extended\n                 Access Control\
    \ Version 2 (EACv2), Password\n                 Authenticated Connection Establishment\
    \ (PACE), and\n                 Restricted Identification (RI)\", Version 2.10,\n\
    \                 March 2012.\n   [TR03111]     BSI, \"TR-03111, Elliptic Curve\
    \ Cryptography\",\n                 Version 1.11, April 2009.\n"
- title: Appendix A.  Protocol Selection Criteria
  contents:
  - "Appendix A.  Protocol Selection Criteria\n   To support the selection of a password-based\
    \ protocol for inclusion\n   in IKEv2, a number of criteria are provided in [IKEv2-CONS].\
    \  In the\n   following sections, those criteria are applied to the PACE protocol.\n"
- title: A.1.  Security Criteria
  contents:
  - "A.1.  Security Criteria\n   SEC1:  PACE is a zero-knowledge protocol.\n   SEC2:\
    \  The protocol supports perfect forward secrecy and is resistant\n          to\
    \ replay attacks.\n   SEC3:  The identity protection provided by IKEv2 remains\
    \ unchanged.\n   SEC4:  Any cryptographically secure Diffie-Hellman group can\
    \ be used.\n   SEC5:  The protocol is proven secure in the Bellare-Pointcheval-\n\
    \          Rogaway model.\n   SEC6:  Strong session keys are generated.\n   SEC7:\
    \  A transform of the password can be used instead of the\n          password\
    \ itself.\n"
- title: A.2.  Intellectual Property Criteria
  contents:
  - "A.2.  Intellectual Property Criteria\n   IPR1:  The first version of [TR03110]\
    \ was published on May 21, 2007.\n   IPR2:  BSI has developed PACE aiming to be\
    \ free of patents.  BSI has\n          not applied for a patent on PACE.\n   IPR3:\
    \  The protocol itself is believed to be free of IPR.\n"
- title: A.3.  Miscellaneous Criteria
  contents:
  - "A.3.  Miscellaneous Criteria\n   MISC1:   One additional exchange is required.\n\
    \   MISC2:   The protocol requires the following operations per entity:\n    \
    \        *  one key derivation from the password,\n            *  one symmetric\
    \ encryption or decryption,\n            *  one multi-exponentiation for the mapping,\n\
    \            *  one exponentiation for the key pair generation,\n            *\
    \  one exponentiation for the shared secret calculation, and\n            *  two\
    \ symmetric authentications (generation and\n               verification).\n \
    \  MISC3:   The performance is independent of the type/size of password.\n   MISC4:\
    \   Internationalization of character-based passwords is\n            supported.\n\
    \   MISC5:   The protocol uses the same group as that negotiated for\n       \
    \     IKEv2.\n   MISC6:   The protocol fits into the request/response nature of\
    \ IKE.\n   MISC7:   The password-based symmetric encryption must be additionally\n\
    \            negotiated.\n   MISC8:   Neither trusted third parties nor clock\
    \ synchronization are\n            required.\n   MISC9:   Only general cryptographic\
    \ primitives are required.\n   MISC10:  Any secure variant of Diffie-Hellman (e.g.,\
    \ Modular or\n            Elliptic Curve) can be used.\n   MISC11:  The protocol\
    \ can be implemented easily based on existing\n            cryptographic primitives.\n"
- title: Appendix B.  Password Salting
  contents:
  - "Appendix B.  Password Salting\n   This protocol requires that passwords not be\
    \ stored in plaintext.\n   Instead, we store a hash of the password with a fixed\
    \ hash.  This\n   value is then used in the ZKPP protocol, replacing the original\n\
    \   password and acting as a \"password equivalent\".  The main benefit of\n \
    \  this solution is that a system administrator or an undetermined\n   attacker\
    \ does not get immediate access to the passwords.  We believe\n   this is sufficiently\
    \ secure for the main usage scenario of the\n   protocol.\n   However, the common\
    \ practice of password salting is clearly more\n   powerful, and this appendix\
    \ presents a few ideas on how password\n   salting can be applied and/or adapted\
    \ to fit into a symmetric\n   protocol such as IKE.  First, let us list the threats\
    \ that we expect\n   salting to handle, as well as the non-threats:\n   o  The\
    \ plain password should not be visible to a casual onlooker, as\n      noted above.\
    \  It is assumed that very often the same password is\n      used for multiple\
    \ applications, and so a password exposed allows\n      an attacker a starting\
    \ point for further attacks.\n   o  An attacker must not be able to construct\
    \ lookup tables (such as\n      the famous \"rainbow tables\") that enable her\
    \ to discover the plain\n      password.\n   o  IKE is a symmetric protocol, in\
    \ the sense that any of the peers\n      might initiate an IKE exchange to another\
    \ peer.  As a result, all\n      peers must have stored credentials (passwords\
    \ or password\n      equivalents) that would enable them to set up an IKE exchange.\n\
    \      So, an attacker that reaches the credential store would in fact be\n  \
    \    able to impersonate IKE to another peer.  We believe that this\n      reduces,\
    \ but does not invalidate, the importance of salting,\n      because of the other\
    \ threats that remain.\n   Below we present different scenarios and solutions\
    \ that support\n   password salting in this setting.\n   We assume that each credential\
    \ is used to authenticate exactly two\n   peers to one another; i.e., (as per\
    \ the best practice), group\n   credentials are not allowed.\n"
- title: B.1.  Solving the Asymmetric Case with Symmetric Cryptography
  contents:
  - "B.1.  Solving the Asymmetric Case with Symmetric Cryptography\n   Despite the\
    \ protocol's symmetry, there are use cases that are\n   somewhat asymmetric. \
    \ Consider the case of an organization that\n   consists of a headquarters and\
    \ branches, using a hub-and-spoke\n   architecture.  Communication sessions can\
    \ be initiated by the center\n   or by any of the branches, but only the center\
    \ holds a large\n   credential database.\n   Here it would be possible to use\
    \ traditional password salting,\n      stored password = hash(salt, password),\n\
    \   where the hash function is a symmetric hash (e.g., HMAC-SHA-256,\n   using\
    \ the salt as its key), and the salt is picked at random for each\n   password.\
    \  The salt would need to be sent in the first exchange of\n   the protocol, regardless\
    \ of which side initiates the session.  Unlike\n   the normal use of salted passwords,\
    \ here it is the stored password,\n   rather than the original password, that\
    \ is used by the follow-on ZKPP\n   protocol.\n"
- title: B.2.  Solving the Fully Symmetric Case with Asymmetric Cryptography
  contents:
  - "B.2.  Solving the Fully Symmetric Case with Asymmetric Cryptography\n   For the\
    \ fully symmetric case, we propose a salting method based on a\n   commutative\
    \ one-way function.  This is essentially a novel variant of\n   the RSA protocol.\
    \  Using this solution, all protocol peers can store\n   the password in a salted\
    \ form.\n   The implementation proposed here requires a composite number n that\n\
    \   is common to all peers.  The composite number n can be generated by a\n  \
    \ trusted (third) party as n = p * q, where p and q are strong primes\n   (i.e.,\
    \ p = 2 * p' + 1 and q = 2 * q' + 1, where p' and q' are also\n   primes), and\
    \ the trusted party promises not to retain a copy of the\n   primes.  Alternatively,\
    \ n can be chosen randomly and tested for\n   \"small\" prime factors.  In the\
    \ latter case, it is certainly not\n   guaranteed that n is composed of only two\
    \ primes.  While this has the\n   advantage that no one knows the factorization\
    \ of n, the disadvantage\n   is that n is likely to be significantly easier to\
    \ factor.\n   Each peer then chooses a public encryption key \"e\".  In a simple\n\
    \   implementation, the encryption key is generated randomly by each\n   peer,\
    \ picking a different value for each of the passwords that it\n   stores.\n  \
    \ Note that although the pair (n,e) is similar to an RSA public key,\n   the usual\
    \ rules for generating \"e\" for the RSA protocol do not apply\n   here, and a\
    \ random \"e\" is sufficient.  The password is hashed by a\n   symmetric hash\
    \ function H (e.g., SHA-256).  Each peer i stores the\n   two values\n      e_i,\
    \ H(P)^e_i (mod n),\n   where P is the original password.  The values e_i are\
    \ exchanged by\n   the peers before the ZKPP protocol commences (in IKEv2-PACE,\
    \ this\n   would be in IKE_SA_INIT), and the following value is used in the ZKPP\n\
    \   protocol run that follows, in lieu of the original password:\n      H(P) ^\
    \ (e_i * e_j) (mod n).\n   This transformation is used as a salting mechanism\
    \ only, and the\n   salted values themselves are never sent on the wire.\n   This\
    \ scheme can be enhanced by basing the value \"e\" on each peer's\n   identity\
    \ (IDi, IDr), e.g., making it a simple hash of the identity.\n   This eliminates\
    \ the need to send \"e\" explicitly and additionally\n   binds the identity of\
    \ the peer with its secret.\n"
- title: B.3.  Generation of a Strong, Long-Term, Shared Secret
  contents:
  - "B.3.  Generation of a Strong, Long-Term, Shared Secret\n   An alternative to\
    \ salting is to store the plain passwords, but only\n   for a short while.  As\
    \ soon as the first IKE SA is set up between two\n   peers, the peers exchange\
    \ nonces and generate a strong shared secret,\n   based on IKE's SK_d.  They now\
    \ destroy the short password and replace\n   it with the new secret.\n   This\
    \ method has been added to the current protocol as an optional\n   mechanism.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Dennis Kuegler\n   Bundesamt fuer Sicherheit in der Informationstechnik\
    \ (BSI)\n   Postfach 200363\n   Bonn  53133\n   Germany\n   EMail: dennis.kuegler@bsi.bund.de\n\
    \   Yaron Sheffer\n   Porticor\n   EMail: yaronf.ietf@gmail.com\n"
