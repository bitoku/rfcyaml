- title: __initial_text__
  contents:
  - '                   SDP: Session Description Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines the Session Description Protocol, SDP.  SDP\
    \ is\n   intended for describing multimedia sessions for the purposes of\n   session\
    \ announcement, session invitation, and other forms of\n   multimedia session\
    \ initiation.\n   This document is a product of the Multiparty Multimedia Session\n\
    \   Control (MMUSIC) working group of the Internet Engineering Task\n   Force.\
    \ Comments are solicited and should be addressed to the working\n   group's mailing\
    \ list at confctrl@isi.edu and/or the authors.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   On the Internet multicast backbone (Mbone), a session directory\
    \ tool\n   is used to advertise multimedia conferences and communicate the\n \
    \  conference addresses and conference tool-specific information\n   necessary\
    \ for participation.  This document defines a session\n   description protocol\
    \ for this purpose, and for general real-time\n   multimedia session description\
    \ purposes. This memo does not describe\n   multicast address allocation or the\
    \ distribution of SDP messages in\n   detail.  These are described in accompanying\
    \ memos.  SDP is not\n   intended for negotiation of media encodings.\n"
- title: 2.  Background
  contents:
  - "2.  Background\n   The Mbone is the part of the internet that supports IP multicast,\
    \ and\n   thus permits efficient many-to-many communication.  It is used\n   extensively\
    \ for multimedia conferencing.  Such conferences usually\n   have the property\
    \ that tight coordination of conference membership is\n   not necessary; to receive\
    \ a conference, a user at an Mbone site only\n   has to know the conference's\
    \ multicast group address and the UDP\n   ports for the conference data streams.\n\
    \   Session directories assist the advertisement of conference sessions\n   and\
    \ communicate the relevant conference setup information to\n   prospective participants.\
    \  SDP is designed to convey such information\n   to recipients.  SDP is purely\
    \ a format for session description - it\n   does not incorporate a transport protocol,\
    \ and is intended to use\n   different transport protocols as appropriate including\
    \ the Session\n   Announcement Protocol [4], Session Initiation Protocol [11],\
    \ Real-\n   Time Streaming Protocol [12], electronic mail using the MIME\n   extensions,\
    \ and the Hypertext Transport Protocol.\n   SDP is intended to be general purpose\
    \ so that it can be used for a\n   wider range of network environments and applications\
    \ than just\n   multicast session directories.  However, it is not intended to\n\
    \   support negotiation of session content or media encodings - this is\n   viewed\
    \ as outside the scope of session description.\n"
- title: 3.  Glossary of Terms
  contents:
  - "3.  Glossary of Terms\n   The following terms are used in this document, and\
    \ have specific\n   meaning within the context of this document.\n   Conference\n\
    \     A multimedia conference is a set of two or more communicating users\n  \
    \   along with the software they are using to communicate.\n   Session\n     A\
    \ multimedia session is a set of multimedia senders and receivers\n     and the\
    \ data streams flowing from senders to receivers.  A\n     multimedia conference\
    \ is an example of a multimedia session.\n   Session Advertisement\n     See session\
    \ announcement.\n   Session Announcement\n     A session announcement is a mechanism\
    \ by which a session\n     description is conveyed to users in a proactive fashion,\
    \ i.e., the\n     session description was not explicitly requested by the user.\n\
    \   Session Description\n     A well defined format for conveying sufficient information\
    \ to\n     discover and participate in a multimedia session.\n"
- title: 3.1.  Terminology
  contents:
  - "3.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ RFC 2119.\n"
- title: 4.  SDP Usage
  contents:
  - '4.  SDP Usage

    '
- title: 4.1.  Multicast Announcements
  contents:
  - "4.1.  Multicast Announcements\n   SDP is a session description protocol for multimedia\
    \ sessions. A\n   common mode of usage is for a client to announce a conference\
    \ session\n   by periodically multicasting an announcement packet to a well known\n\
    \   multicast address and port using the Session Announcement Protocol\n   (SAP).\n\
    \   SAP packets are UDP packets with the following format:\n         |--------------------|\n\
    \         | SAP header         |\n         |--------------------|\n         |\
    \ text payload       |\n         |//////////\n   The header is the Session Announcement\
    \ Protocol header.  SAP is\n   described in more detail in a companion memo [4]\n\
    \   The text payload is an SDP session description, as described in this\n   memo.\
    \  The text payload should be no greater than 1 Kbyte in length.\n   If announced\
    \ by SAP, only one session announcement is permitted in a\n   single packet.\n"
- title: 4.2.  Email and WWW Announcements
  contents:
  - "4.2.  Email and WWW Announcements\n   Alternative means of conveying session\
    \ descriptions include\n   electronic mail and the World Wide Web. For both email\
    \ and WWW\n   distribution, the use of the MIME content type \"application/sdp\"\
    \n   should be used.  This enables the automatic launching of applications\n \
    \  for participation in the session from the WWW client or mail reader\n   in\
    \ a standard manner.\n   Note that announcements of multicast sessions made only\
    \ via email or\n   the World Wide Web (WWW) do not have the property that the\
    \ receiver\n   of a session announcement can necessarily receive the session because\n\
    \   the multicast sessions may be restricted in scope, and access to the\n   WWW\
    \ server or reception of email is possible outside this scope.  SAP\n   announcements\
    \ do not suffer from this mismatch.\n"
- title: 5.  Requirements and Recommendations
  contents:
  - "5.  Requirements and Recommendations\n   The purpose of SDP is to convey information\
    \ about media streams in\n   multimedia sessions to allow the recipients of a\
    \ session description\n   to participate in the session.  SDP is primarily intended\
    \ for use in\n   an internetwork, although it is sufficiently general that it\
    \ can\n   describe conferences in other network environments.\n   A multimedia\
    \ session, for these purposes, is defined as a set of\n   media streams that exist\
    \ for some duration of time.  Media streams\n   can be many-to-many.  The times\
    \ during which the session is active\n   need not be continuous.\n   Thus far,\
    \ multicast based sessions on the Internet have differed from\n   many other forms\
    \ of conferencing in that anyone receiving the traffic\n   can join the session\
    \ (unless the session traffic is encrypted).  In\n   such an environment, SDP\
    \ serves two primary purposes.  It is a means\n   to communicate the existence\
    \ of a session, and is a means to convey\n   sufficient information to enable\
    \ joining and participating in the\n   session.  In a unicast environment, only\
    \ the latter purpose is likely\n   to be relevant.\n   Thus SDP includes:\n  \
    \ o Session name and purpose\n   o Time(s) the session is active\n   o The media\
    \ comprising the session\n   o Information to receive those media (addresses,\
    \ ports, formats and\n     so on)\n   As resources necessary to participate in\
    \ a session may be limited,\n   some additional information may also be desirable:\n\
    \   o Information about the bandwidth to be used by the conference\n   o Contact\
    \ information for the person responsible for the session\n   In general, SDP must\
    \ convey sufficient information to be able to join\n   a session (with the possible\
    \ exception of encryption keys) and to\n   announce the resources to be used to\
    \ non-participants that may need\n   to know.\n"
- title: 5.1.  Media Information
  contents:
  - "5.1.  Media Information\n   SDP includes:\n   o The type of media (video, audio,\
    \ etc)\n   o The transport protocol (RTP/UDP/IP, H.320, etc)\n   o The format\
    \ of the media (H.261 video, MPEG video, etc)\n   For an IP multicast session,\
    \ the following are also conveyed:\n   o Multicast address for media\n   o Transport\
    \ Port for media\n   This address and port are the destination address and destination\n\
    \   port of the multicast stream, whether being sent, received, or both.\n   For\
    \ an IP unicast session, the following are conveyed:\n   o Remote address for\
    \ media\n   o Transport port for contact address\n   The semantics of this address\
    \ and port depend on the media and\n   transport protocol defined.  By default,\
    \ this is the remote address\n   and remote port to which data is sent, and the\
    \ remote address and\n   local port on which to receive data.  However, some media\
    \ may define\n   to use these to establish a control channel for the actual media\n\
    \   flow.\n"
- title: 5.2.  Timing Information
  contents:
  - "5.2.  Timing Information\n   Sessions may either be bounded or unbounded in time.\
    \ Whether or not\n   they are bounded, they may be only active at specific times.\n\
    \   SDP can convey:\n   o An arbitrary list of start and stop times bounding the\
    \ session\n   o For each bound, repeat times such as \"every Wednesday at 10am\
    \ for\n     one hour\"\n   This timing information is globally consistent, irrespective\
    \ of local\n   time zone or daylight saving time.\n"
- title: 5.3.  Private Sessions
  contents:
  - "5.3.  Private Sessions\n   It is possible to create both public sessions and\
    \ private sessions.\n   Private sessions will typically be conveyed by encrypting\
    \ the session\n   description to distribute it.  The details of how encryption\
    \ is\n   performed are dependent on the mechanism used to convey SDP - see [4]\n\
    \   for how this is done for session announcements.\n   If a session announcement\
    \ is private it is possible to use that\n   private announcement to convey encryption\
    \ keys necessary to decode\n   each of the media in a conference, including enough\
    \ information to\n   know which encryption scheme is used for each media.\n"
- title: 5.4.  Obtaining Further Information about a Session
  contents:
  - "5.4.  Obtaining Further Information about a Session\n   A session description\
    \ should convey enough information to decide\n   whether or not to participate\
    \ in a session.  SDP may include\n   additional pointers in the form of Universal\
    \ Resources Identifiers\n   (URIs) for more information about the session.\n"
- title: 5.5.  Categorisation
  contents:
  - "5.5.  Categorisation\n   When many session descriptions are being distributed\
    \ by SAP or any\n   other advertisement mechanism, it may be desirable to filter\n\
    \   announcements that are of interest from those that are not.  SDP\n   supports\
    \ a categorisation mechanism for sessions that is capable of\n   being automated.\n"
- title: 5.6.  Internationalization
  contents:
  - "5.6.  Internationalization\n   The SDP specification recommends the use of the\
    \ ISO 10646 character\n   sets in the UTF-8 encoding (RFC 2044) to allow many\
    \ different\n   languages to be represented.  However, to assist in compact\n\
    \   representations, SDP also allows other character sets such as ISO\n   8859-1\
    \ to be used when desired.  Internationalization only applies to\n   free-text\
    \ fields (session name and background information), and not\n   to SDP as a whole.\n"
- title: 6.  SDP Specification
  contents:
  - "6.  SDP Specification\n   SDP session descriptions are entirely textual using\
    \ the ISO 10646\n   character set in UTF-8 encoding. SDP field names and attributes\
    \ names\n   use only the US-ASCII subset of UTF-8, but textual fields and\n  \
    \ attribute values may use the full ISO 10646 character set.  The\n   textual\
    \ form, as opposed to a binary encoding such as ASN/1 or XDR,\n   was chosen to\
    \ enhance portability, to enable a variety of transports\n   to be used (e.g,\
    \ session description in a MIME email message) and to\n   allow flexible, text-based\
    \ toolkits (e.g., Tcl/Tk ) to be used to\n   generate and to process session descriptions.\
    \  However, since the\n   total bandwidth allocated to all SAP announcements is\
    \ strictly\n   limited, the encoding is deliberately compact.  Also, since\n \
    \  announcements may be transported via very unreliable means (e.g.,\n   email)\
    \ or damaged by an intermediate caching server, the encoding was\n   designed\
    \ with strict order and formatting rules so that most errors\n   would result\
    \ in malformed announcements which could be detected\n   easily and discarded.\
    \ This also allows rapid discarding of encrypted\n   announcements for which a\
    \ receiver does not have the correct key.\n   An SDP session description consists\
    \ of a number of lines of text of\n   the form <type>=<value> <type> is always\
    \ exactly one character and is\n   case-significant.  <value> is a structured\
    \ text string whose format\n   depends on <type>.  It also will be case-significant\
    \ unless a\n   specific field defines otherwise.  Whitespace is not permitted\
    \ either\n   side of the `=' sign. In general <value> is either a number of fields\n\
    \   delimited by a single space character or a free format string.\n   A session\
    \ description consists of a session-level description\n   (details that apply\
    \ to the whole session and all media streams) and\n   optionally several media-level\
    \ descriptions (details that apply onto\n   to a single media stream).\n   An\
    \ announcement consists of a session-level section followed by zero\n   or more\
    \ media-level sections.  The session-level part starts with a\n   `v=' line and\
    \ continues to the first media-level section.  The media\n   description starts\
    \ with an `m=' line and continues to the next media\n   description or end of\
    \ the whole session description.  In general,\n   session-level values are the\
    \ default for all media unless overridden\n   by an equivalent media-level value.\n\
    \   When SDP is conveyed by SAP, only one session description is allowed\n   per\
    \ packet.  When SDP is conveyed by other means, many SDP session\n   descriptions\
    \ may be concatenated together (the `v=' line indicating\n   the start of a session\
    \ description terminates the previous\n   description).  Some lines in each description\
    \ are required and some\n   are optional but all must appear in exactly the order\
    \ given here (the\n   fixed order greatly enhances error detection and allows\
    \ for a simple\n   parser). Optional items are marked with a `*'.\n"
- title: Session description
  contents:
  - "Session description\n        v=  (protocol version)\n        o=  (owner/creator\
    \ and session identifier).\n        s=  (session name)\n        i=* (session information)\n\
    \        u=* (URI of description)\n        e=* (email address)\n        p=* (phone\
    \ number)\n        c=* (connection information - not required if included in all\
    \ media)\n        b=* (bandwidth information)\n        One or more time descriptions\
    \ (see below)\n        z=* (time zone adjustments)\n        k=* (encryption key)\n\
    \        a=* (zero or more session attribute lines)\n        Zero or more media\
    \ descriptions (see below)\n"
- title: Time description
  contents:
  - "Time description\n        t=  (time the session is active)\n        r=* (zero\
    \ or more repeat times)\n"
- title: Media description
  contents:
  - "Media description\n        m=  (media name and transport address)\n        i=*\
    \ (media title)\n        c=* (connection information - optional if included at\
    \ session-level)\n        b=* (bandwidth information)\n        k=* (encryption\
    \ key)\n        a=* (zero or more media attribute lines)\n   The set of `type'\
    \ letters is deliberately small and not intended to\n   be extensible -- SDP parsers\
    \ must completely ignore any announcement\n   that contains a `type' letter that\
    \ it does not understand. The\n   `attribute' mechanism (\"a=\" described below)\
    \ is the primary means for\n   extending SDP and tailoring it to particular applications\
    \ or media.\n   Some attributes (the ones listed in this document) have a defined\n\
    \   meaning but others may be added on an application-, media- or\n   session-specific\
    \ basis.  A session directory must ignore any\n   attribute it doesn't understand.\n\
    \   The connection (`c=') and attribute (`a=') information in the\n   session-level\
    \ section applies to all the media of that session unless\n   overridden by connection\
    \ information or an attribute of the same name\n   in the media description. \
    \ For instance, in the example below, each\n   media behaves as if it were given\
    \ a `recvonly' attribute.\n   An example SDP description is:\n        v=0\n  \
    \      o=mhandley 2890844526 2890842807 IN IP4 126.16.64.4\n        s=SDP Seminar\n\
    \        i=A Seminar on the session description protocol\n        u=http://www.cs.ucl.ac.uk/staff/M.Handley/sdp.03.ps\n\
    \        e=mjh@isi.edu (Mark Handley)\n        c=IN IP4 224.2.17.12/127\n    \
    \    t=2873397496 2873404696\n        a=recvonly\n        m=audio 49170 RTP/AVP\
    \ 0\n        m=video 51372 RTP/AVP 31\n        m=application 32416 udp wb\n  \
    \      a=orient:portrait\n   Text records such as the session name and information\
    \ are bytes\n   strings which may contain any byte with the exceptions of 0x00\
    \ (Nul),\n   0x0a (ASCII newline) and 0x0d (ASCII carriage return).  The sequence\n\
    \   CRLF (0x0d0a) is used to end a record, although parsers should be\n   tolerant\
    \ and also accept records terminated with a single newline\n   character.  By\
    \ default these byte strings contain ISO-10646\n   characters in UTF-8 encoding,\
    \ but this default may be changed using\n   the `charset' attribute.\n   Protocol\
    \ Version\n   v=0\n   The \"v=\" field gives the version of the Session Description\
    \ Protocol.\n   There is no minor version number.\n   Origin\n   o=<username>\
    \ <session id> <version> <network type> <address type>\n   <address>\n   The \"\
    o=\" field gives the originator of the session (their username\n   and the address\
    \ of the user's host) plus a session id and session\n   version number.\n   <username>\
    \ is the user's login on the originating host, or it is \"-\"\n   if the originating\
    \ host does not support the concept of user ids.\n   <username> must not contain\
    \ spaces.  <session id> is a numeric string\n   such that the tuple of <username>,\
    \ <session id>, <network type>,\n   <address type> and <address> form a globally\
    \ unique identifier for\n   the session.\n   The method of <session id> allocation\
    \ is up to the creating tool, but\n   it has been suggested that a Network Time\
    \ Protocol (NTP) timestamp be\n   used to ensure uniqueness [1].\n   <version>\
    \ is a version number for this announcement.  It is needed\n   for proxy announcements\
    \ to detect which of several announcements for\n   the same session is the most\
    \ recent.  Again its usage is up to the\n   creating tool, so long as <version>\
    \ is increased when a modification\n   is made to the session data.  Again, it\
    \ is recommended (but not\n   mandatory) that an NTP timestamp is used.\n   <network\
    \ type> is a text string giving the type of network.\n   Initially \"IN\" is defined\
    \ to have the meaning \"Internet\".  <address\n   type> is a text string giving\
    \ the type of the address that follows.\n   Initially \"IP4\" and \"IP6\" are\
    \ defined.  <address> is the globally\n   unique address of the machine from which\
    \ the session was created.\n   For an address type of IP4, this is either the\
    \ fully-qualified domain\n   name of the machine, or the dotted-decimal representation\
    \ of the IP\n   version 4 address of the machine.  For an address type of IP6,\
    \ this\n   is either the fully-qualified domain name of the machine, or the\n\
    \   compressed textual representation of the IP version 6 address of the\n   machine.\
    \  For both IP4 and IP6, the fully-qualified domain name is\n   the form that\
    \ SHOULD be given unless this is unavailable, in which\n   case the globally unique\
    \ address may be substituted.  A local IP\n   address MUST NOT be used in any\
    \ context where the SDP description\n   might leave the scope in which the address\
    \ is meaningful.\n   In general, the \"o=\" field serves as a globally unique\
    \ identifier for\n   this version of this session description, and the subfields\
    \ excepting\n   the version taken together identify the session irrespective of\
    \ any\n   modifications.\n   Session Name\n   s=<session name>\n   The \"s=\"\
    \ field is the session name.  There must be one and only one\n   \"s=\" field\
    \ per session description, and it must contain ISO 10646\n   characters (but see\
    \ also the `charset' attribute below).\n   Session and Media Information\n   i=<session\
    \ description>\n   The \"i=\" field is information about the session.  There may\
    \ be at\n   most one session-level \"i=\" field per session description, and at\n\
    \   most one \"i=\" field per media. Although it may be omitted, this is\n   discouraged\
    \ for session announcements, and user interfaces for\n   composing sessions should\
    \ require text to be entered.  If it is\n   present it must contain ISO 10646\
    \ characters (but see also the\n   `charset' attribute below).\n   A single \"\
    i=\" field can also be used for each media definition.  In\n   media definitions,\
    \ \"i=\" fields are primarily intended for labeling\n   media streams. As such,\
    \ they are most likely to be useful when a\n   single session has more than one\
    \ distinct media stream of the same\n   media type.  An example would be two different\
    \ whiteboards, one for\n   slides and one for feedback and questions.\n   URI\n\
    \   u=<URI>\n   o A URI is a Universal Resource Identifier as used by WWW clients\n\
    \   o The URI should be a pointer to additional information about the\n     conference\n\
    \   o This field is optional, but if it is present it should be specified\n  \
    \   before the first media field\n   o No more than one URI field is allowed per\
    \ session description\n   Email Address and Phone Number\n   e=<email address>\n\
    \   p=<phone number>\n   o These specify contact information for the person responsible\
    \ for\n     the conference.  This is not necessarily the same person that\n  \
    \   created the conference announcement.\n   o Either an email field or a phone\
    \ field must be specified.\n     Additional email and phone fields are allowed.\n\
    \   o If these are present, they should be specified before the first\n     media\
    \ field.\n   o More than one email or phone field can be given for a session\n\
    \     description.\n   o Phone numbers should be given in the conventional international\n\
    \     format - preceded by a \"+ and the international country code.\n     There\
    \ must be a space or a hyphen (\"-\") between the country code\n     and the rest\
    \ of the phone number.  Spaces and hyphens may be used\n     to split up a phone\
    \ field to aid readability if desired. For\n     example:\n                  \
    \ p=+44-171-380-7777 or p=+1 617 253 6011\n   o Both email addresses and phone\
    \ numbers can have an optional free\n     text string associated with them, normally\
    \ giving the name of the\n     person who may be contacted.  This should be enclosed\
    \ in\n     parenthesis if it is present.  For example:\n                     \
    \   e=mjh@isi.edu (Mark Handley)\n     The alternative RFC822 name quoting convention\
    \ is also allowed for\n     both email addresses and phone numbers.  For example,\n\
    \                        e=Mark Handley <mjh@isi.edu>\n     The free text string\
    \ should be in the ISO-10646 character set with\n     UTF-8 encoding, or alternatively\
    \ in ISO-8859-1 or other encodings\n     if the appropriate charset session-level\
    \ attribute is set.\n   Connection Data\n   c=<network type> <address type> <connection\
    \ address>\n   The \"c=\" field contains connection data.\n   A session announcement\
    \ must contain one \"c=\" field in each media\n   description (see below) or a\
    \ \"c=\" field at the session-level.  It may\n   contain a session-level \"c=\"\
    \ field and one additional \"c=\" field per\n   media description, in which case\
    \ the per-media values override the\n   session-level settings for the relevant\
    \ media.\n   The first sub-field is the network type, which is a text string\n\
    \   giving the type of network.  Initially \"IN\" is defined to have the\n   meaning\
    \ \"Internet\".\n   The second sub-field is the address type.  This allows SDP\
    \ to be used\n   for sessions that are not IP based.  Currently only IP4 is defined.\n\
    \   The third sub-field is the connection address.  Optional extra\n   subfields\
    \ may be added after the connection address depending on the\n   value of the\
    \ <address type> field.\n   For IP4 addresses, the connection address is defined\
    \ as follows:\n   o Typically the connection address will be a class-D IP multicast\n\
    \     group address.  If the session is not multicast, then the\n     connection\
    \ address contains the fully-qualified domain name or the\n     unicast IP address\
    \ of the expected data source or data relay or\n     data sink as determined by\
    \ additional attribute fields. It is not\n     expected that fully-qualified domain\
    \ names or unicast addresses\n     will be given in a session description that\
    \ is communicated by a\n     multicast announcement, though this is not prohibited.\
    \  If a\n     unicast data stream is to pass through a network address\n     translator,\
    \ the use of a fully-qualified domain name rather than an\n     unicast IP address\
    \ is RECOMMENDED.  In other cases, the use of an\n     IP address to specify a\
    \ particular interface on a multi-homed host\n     might be required.  Thus this\
    \ specification leaves the decision as\n     to which to use up to the individual\
    \ application, but all\n     applications MUST be able to cope with receiving\
    \ both formats.\n   o Conferences using an IP multicast connection address must\
    \ also have\n     a time to live (TTL) value present in addition to the multicast\n\
    \     address.  The TTL and the address together define the scope with\n     which\
    \ multicast packets sent in this conference will be sent. TTL\n     values must\
    \ be in the range 0-255.\n     The TTL for the session is appended to the address\
    \ using a slash as\n     a separator.  An example is:\n                      \
    \     c=IN IP4 224.2.1.1/127\n     Hierarchical or layered encoding schemes are\
    \ data streams where the\n     encoding from a single media source is split into\
    \ a number of\n     layers.  The receiver can choose the desired quality (and\
    \ hence\n     bandwidth) by only subscribing to a subset of these layers.  Such\n\
    \     layered encodings are normally transmitted in multiple multicast\n     groups\
    \ to allow multicast pruning.  This technique keeps unwanted\n     traffic from\
    \ sites only requiring certain levels of the hierarchy.\n     For applications\
    \ requiring multiple multicast groups, we allow the\n     following notation to\
    \ be used for the connection address:\n            <base multicast address>/<ttl>/<number\
    \ of addresses>\n     If the number of addresses is not given it is assumed to\
    \ be one.\n     Multicast addresses so assigned are contiguously allocated above\n\
    \     the base address, so that, for example:\n                          c=IN\
    \ IP4 224.2.1.1/127/3\n     would state that addresses 224.2.1.1, 224.2.1.2 and\
    \ 224.2.1.3 are\n     to be used at a ttl of 127.  This is semantically identical\
    \ to\n     including multiple \"c=\" lines in a media description:\n         \
    \                  c=IN IP4 224.2.1.1/127\n                           c=IN IP4\
    \ 224.2.1.2/127\n                           c=IN IP4 224.2.1.3/127\n     Multiple\
    \ addresses or \"c=\" lines can only be specified on a per-\n     media basis,\
    \ and not for a session-level \"c=\" field.\n     It is illegal for the slash\
    \ notation described above to be used for\n     IP unicast addresses.\n   Bandwidth\n\
    \   b=<modifier>:<bandwidth-value>\n   o This specifies the proposed bandwidth\
    \ to be used by the session or\n     media, and is optional.\n   o <bandwidth-value>\
    \ is in kilobits per second\n   o <modifier> is a single alphanumeric word giving\
    \ the meaning of the\n     bandwidth figure.\n   o Two modifiers are initially\
    \ defined:\n   CT Conference Total: An implicit maximum bandwidth is associated\
    \ with\n     each TTL on the Mbone or within a particular multicast\n     administrative\
    \ scope region (the Mbone bandwidth vs. TTL limits are\n     given in the MBone\
    \ FAQ). If the bandwidth of a session or media in\n     a session is different\
    \ from the bandwidth implicit from the scope,\n     a `b=CT:...' line should be\
    \ supplied for the session giving the\n     proposed upper limit to the bandwidth\
    \ used. The primary purpose of\n     this is to give an approximate idea as to\
    \ whether two or more\n     conferences can co-exist simultaneously.\n   AS Application-Specific\
    \ Maximum: The bandwidth is interpreted to be\n     application-specific, i.e.,\
    \ will be the application's concept of\n     maximum bandwidth.  Normally this\
    \ will coincide with what is set on\n     the application's \"maximum bandwidth\"\
    \ control if applicable.\n     Note that CT gives a total bandwidth figure for\
    \ all the media at\n     all sites.  AS gives a bandwidth figure for a single\
    \ media at a\n     single site, although there may be many sites sending\n   \
    \  simultaneously.\n   o Extension Mechanism: Tool writers can define experimental\
    \ bandwidth\n     modifiers by prefixing their modifier with \"X-\". For example:\n\
    \                                 b=X-YZ:128\n     SDP parsers should ignore bandwidth\
    \ fields with unknown modifiers.\n     Modifiers should be alpha-numeric and,\
    \ although no length limit is\n     given, they are recommended to be short.\n\
    \   Times, Repeat Times and Time Zones\n   t=<start time>  <stop time>\n   o \"\
    t=\" fields specify the start and stop times for a conference\n     session. \
    \ Multiple \"t=\" fields may be used if a session is active\n     at multiple\
    \ irregularly spaced times; each additional \"t=\" field\n     specifies an additional\
    \ period of time for which the session will\n     be active.  If the session is\
    \ active at regular times, an \"r=\"\n     field (see below) should be used in\
    \ addition to and following a\n     \"t=\" field - in which case the \"t=\" field\
    \ specifies the start and\n     stop times of the repeat sequence.\n   o The first\
    \ and second sub-fields give the start and stop times for\n     the conference\
    \ respectively.  These values are the decimal\n     representation of Network\
    \ Time Protocol (NTP) time values in\n     seconds [1].  To convert these values\
    \ to UNIX time, subtract\n     decimal 2208988800.\n   o If the stop-time is set\
    \ to zero, then the session is not bounded,\n     though it will not become active\
    \ until after the start-time.  If\n     the start-time is also zero, the session\
    \ is regarded as permanent.\n     User interfaces should strongly discourage the\
    \ creation of\n     unbounded and permanent sessions as they give no information\
    \ about\n     when the session is actually going to terminate, and so make\n \
    \    scheduling difficult.\n     The general assumption may be made, when displaying\
    \ unbounded\n     sessions that have not timed out to the user, that an unbounded\n\
    \     session will only be active until half an hour from the current\n     time\
    \ or the session start time, whichever is the later.  If\n     behaviour other\
    \ than this is required, an end-time should be given\n     and modified as appropriate\
    \ when new information becomes available\n     about when the session should really\
    \ end.\n     Permanent sessions may be shown to the user as never being active\n\
    \     unless there are associated repeat times which state precisely when\n  \
    \   the session will be active.  In general, permanent sessions should\n     not\
    \ be created for any session expected to have a duration of less\n     than 2\
    \ months, and should be discouraged for sessions expected to\n     have a duration\
    \ of less than 6 months.\n     r=<repeat interval> <active duration> <list of\
    \ offsets from start-\n     time>\n   o \"r=\" fields specify repeat times for\
    \ a session.  For example, if\n     a session is active at 10am on Monday and\
    \ 11am on Tuesday for one\n     hour each week for three months, then the <start\
    \ time> in the\n     corresponding \"t=\" field would be the NTP representation\
    \ of 10am on\n     the first Monday, the <repeat interval> would be 1 week, the\n\
    \     <active duration> would be 1 hour, and the offsets would be zero\n     and\
    \ 25 hours. The corresponding \"t=\" field stop time would be the\n     NTP representation\
    \ of the end of the last session three months\n     later. By default all fields\
    \ are in seconds, so the \"r=\" and \"t=\"\n     fields might be:\n          \
    \                 t=3034423619 3042462419\n                            r=604800\
    \ 3600 0 90000\n    To make announcements more compact, times may also be given\
    \ in units\n    of days, hours or minutes. The syntax for these is a number\n\
    \    immediately followed by a single case-sensitive character.\n    Fractional\
    \ units are not allowed - a smaller unit should be used\n    instead.  The following\
    \ unit specification characters are allowed:\n                         d - days\
    \ (86400 seconds)\n                        h - minutes (3600 seconds)\n      \
    \                   m - minutes (60 seconds)\n         s - seconds (allowed for\
    \ completeness but not recommended)\n   Thus, the above announcement could also\
    \ have been written:\n                               r=7d 1h 0 25h\n     Monthly\
    \ and yearly repeats cannot currently be directly specified\n     with a single\
    \ SDP repeat time - instead separate \"t\" fields should\n     be used to explicitly\
    \ list the session times.\n        z=<adjustment time> <offset> <adjustment time>\
    \ <offset> ....\n   o To schedule a repeated session which spans a change from\
    \ daylight-\n     saving time to standard time or vice-versa, it is necessary\
    \ to\n     specify offsets from the base repeat times. This is required\n    \
    \ because different time zones change time at different times of day,\n     different\
    \ countries change to or from daylight time on different\n     dates, and some\
    \ countries do not have daylight saving time at all.\n     Thus in order to schedule\
    \ a session that is at the same time winter\n     and summer, it must be possible\
    \ to specify unambiguously by whose\n     time zone a session is scheduled.  To\
    \ simplify this task for\n     receivers, we allow the sender to specify the NTP\
    \ time that a time\n     zone adjustment happens and the offset from the time\
    \ when the\n     session was first scheduled.  The \"z\" field allows the sender\
    \ to\n     specify a list of these adjustment times and offsets from the base\n\
    \     time.\n     An example might be:\n                        z=2882844526 -1h\
    \ 2898848070 0\n     This specifies that at time 2882844526 the time base by which\
    \ the\n     session's repeat times are calculated is shifted back by 1 hour,\n\
    \     and that at time 2898848070 the session's original time base is\n     restored.\
    \ Adjustments are always relative to the specified start\n     time - they are\
    \ not cumulative.\n   o    If a session is likely to last several years, it is\
    \  expected\n   that\n     the session announcement will be modified periodically\
    \ rather than\n     transmit several years worth of adjustments in one announcement.\n\
    \   Encryption Keys\n   k=<method>\n   k=<method>:<encryption key>\n   o The session\
    \ description protocol may be used to convey encryption\n     keys.  A key field\
    \ is permitted before the first media entry (in\n     which case it applies to\
    \ all media in the session), or for each\n     media entry as required.\n   o\
    \ The format of keys and their usage is outside the scope of this\n     document,\
    \ but see [3].\n   o The method indicates the mechanism to be used to obtain a\
    \ usable\n     key by external means, or from the encoded encryption key given.\n\
    \     The following methods are defined:\n      k=clear:<encryption key>\n   \
    \     The encryption key (as described in [3] for  RTP  media  streams\n     \
    \   under  the  AV  profile)  is  included untransformed in this key\n       \
    \ field.\n      k=base64:<encoded encryption key>\n        The encryption key\
    \ (as described in [3] for RTP media streams\n        under the AV profile) is\
    \ included in this key field but has been\n        base64 encoded because it includes\
    \ characters that are\n        prohibited in SDP.\n      k=uri:<URI to obtain\
    \ key>\n        A Universal Resource Identifier as used by WWW clients is\n  \
    \      included in this key field.  The URI refers to the data\n        containing\
    \ the key, and may require additional authentication\n        before the key can\
    \ be returned.  When a request is made to the\n        given URI, the MIME content-type\
    \ of the reply specifies the\n        encoding for the key in the reply.  The\
    \ key should not be\n        obtained until the user wishes to join the session\
    \ to reduce\n        synchronisation of requests to the WWW server(s).\n     \
    \ k=prompt\n        No key is included in this SDP description, but the session\
    \ or\n        media stream referred to by this key field is encrypted.  The\n\
    \        user should be prompted for the key when attempting to join the\n   \
    \     session, and this user-supplied key should then be used to\n        decrypt\
    \ the media streams.\n   Attributes\n   a=<attribute>\n   a=<attribute>:<value>\n\
    \   Attributes are the primary means for extending SDP.  Attributes may\n   be\
    \ defined to be used as \"session-level\" attributes, \"media-level\"\n   attributes,\
    \ or both.\n   A media description may have any number of attributes (\"a=\" fields)\n\
    \   which are media specific.  These are referred to as \"media-level\"\n   attributes\
    \ and add information about the media stream.  Attribute\n   fields can also be\
    \ added before the first media field; these\n   \"session-level\" attributes convey\
    \ additional information that applies\n   to the conference as a whole rather\
    \ than to individual media; an\n   example might be the conference's floor control\
    \ policy.\n   Attribute fields may be of two forms:\n   o property attributes.\
    \  A property attribute is simply of the form\n     \"a=<flag>\".  These are binary\
    \ attributes, and the presence of the\n     attribute conveys that the attribute\
    \ is a property of the session.\n     An example might be \"a=recvonly\".\n  \
    \ o value attributes.  A value attribute is of the form\n     \"a=<attribute>:<value>\"\
    .  An example might be that a whiteboard\n     could have the value attribute\
    \ \"a=orient:landscape\"\n   Attribute interpretation depends on the media tool\
    \ being invoked.\n   Thus receivers of session descriptions should be configurable\
    \ in\n   their interpretation of announcements in general and of attributes in\n\
    \   particular.\n   Attribute names must be in the US-ASCII subset of ISO-10646/UTF-8.\n\
    \   Attribute values are byte strings, and MAY use any byte value except\n   0x00\
    \ (Nul), 0x0A (LF), and 0x0D (CR). By default, attribute values\n   are to be\
    \ interpreted as in ISO-10646 character set with UTF-8\n   encoding.  Unlike other\
    \ text fields, attribute values are NOT\n   normally affected by the `charset'\
    \ attribute as this would make\n   comparisons against known values problematic.\
    \  However, when an\n   attribute is defined, it can be defined to be charset-dependent,\
    \ in\n   which case it's value should be interpreted in the session charset\n\
    \   rather than in ISO-10646.\n   Attributes that will be commonly used can be\
    \ registered with IANA\n   (see Appendix B).  Unregistered attributes should begin\
    \ with \"X-\" to\n   prevent inadvertent collision with registered attributes.\
    \  In either\n   case, if an attribute is received that is not understood, it\
    \ should\n   simply be ignored by the receiver.\n   Media Announcements\n   m=<media>\
    \ <port> <transport> <fmt list>\n   A session description may contain a number\
    \ of media descriptions.\n   Each media description starts with an \"m=\" field,\
    \ and is terminated\n   by either the next \"m=\" field or by the end of the session\n\
    \   description.  A media field also has several sub-fields:\n   o The first sub-field\
    \ is the media type.  Currently defined media are\n     \"audio\", \"video\",\
    \ \"application\", \"data\" and \"control\", though this\n     list may be extended\
    \ as new communication modalities emerge (e.g.,\n     telepresense).  The difference\
    \ between \"application\" and \"data\" is\n     that the former is a media flow\
    \ such as whiteboard information, and\n     the latter is bulk-data transfer such\
    \ as multicasting of program\n     executables which will not typically be displayed\
    \ to the user.\n     \"control\" is used to specify an additional conference control\n\
    \     channel for the session.\n   o The second sub-field is the transport port\
    \ to which the media\n     stream will be sent.  The meaning of the transport\
    \ port depends on\n     the network being used as specified in the relevant \"\
    c\" field and\n     on the transport protocol defined in the third sub-field.\
    \  Other\n     ports used by the media application (such as the RTCP port, see\n\
    \     [2]) should be derived algorithmically from the base media port.\n     Note:\
    \ For transports based on UDP, the value should be in the range\n     1024 to\
    \ 65535 inclusive.  For RTP compliance it should be an even\n     number.\n  \
    \   For applications where hierarchically encoded streams are being\n     sent\
    \ to a unicast address, it may be necessary to specify multiple\n     transport\
    \ ports.  This is done using a similar notation to that\n     used for IP multicast\
    \ addresses in the \"c=\" field:\n          m=<media> <port>/<number of ports>\
    \ <transport> <fmt list>\n     In such a case, the ports used depend on the transport\
    \ protocol.\n     For RTP, only the even ports are used for data and the\n   \
    \  corresponding one-higher odd port is used for RTCP.  For example:\n       \
    \                  m=video 49170/2 RTP/AVP 31\n     would specify that ports 49170\
    \ and 49171 form one RTP/RTCP pair and\n     49172 and 49173 form the second RTP/RTCP\
    \ pair.  RTP/AVP is the\n     transport protocol and 31 is the format (see below).\n\
    \     It is illegal for both multiple addresses to be specified in the\n     \"\
    c=\" field and for multiple ports to be specified in the \"m=\" field\n     in\
    \ the same session description.\n   o The third sub-field is the transport protocol.\
    \  The transport\n     protocol values are dependent on the address-type field\
    \ in the \"c=\"\n     fields.  Thus a \"c=\" field of IP4 defines that the transport\n\
    \     protocol runs over IP4.  For IP4, it is normally expected that most\n  \
    \   media traffic will be carried as RTP over UDP.  The following\n     transport\
    \ protocols are preliminarily defined, but may be extended\n     through registration\
    \ of new protocols with IANA:\n     - RTP/AVP - the IETF's Realtime Transport\
    \ Protocol using the\n       Audio/Video profile carried over UDP.\n     - udp\
    \ - User Datagram Protocol\n     If an application uses a single combined proprietary\
    \ media format\n     and transport protocol over UDP, then simply specifying the\n\
    \     transport protocol as udp and using the format field to distinguish\n  \
    \   the combined protocol is recommended.  If a transport protocol is\n     used\
    \ over UDP to carry several distinct media types that need to be\n     distinguished\
    \ by a session directory, then specifying the transport\n     protocol and media\
    \ format separately is necessary. RTP is an\n     example of a transport-protocol\
    \ that carries multiple payload\n     formats that must be distinguished by the\
    \ session directory for it\n     to know how to start appropriate tools, relays,\
    \ mixers or\n     recorders.\n     The main reason to specify the transport-protocol\
    \ in addition to\n     the media format is that the same standard media formats\
    \ may be\n     carried over different transport protocols even when the network\n\
    \     protocol is the same - a historical example is vat PCM audio and\n     RTP\
    \ PCM audio.  In addition, relays and monitoring tools that are\n     transport-protocol-specific\
    \ but format-independent are possible.\n     For RTP media streams operating under\
    \ the RTP Audio/Video Profile\n     [3], the protocol field is \"RTP/AVP\".  Should\
    \ other RTP profiles be\n     defined in the future, their profiles will be specified\
    \ in the same\n     way.  For example, the protocol field \"RTP/XYZ\" would specify\
    \ RTP\n     operating under a profile whose short name is \"XYZ\".\n   o The fourth\
    \ and subsequent sub-fields are media formats.  For audio\n     and video, these\
    \ will normally be a media payload type as defined\n     in the RTP Audio/Video\
    \ Profile.\n     When a list of payload formats is given, this implies that all\
    \ of\n     these formats may be used in the session, but the first of these\n\
    \     formats is the default format for the session.\n     For media whose transport\
    \ protocol is not RTP or UDP the format\n     field is protocol specific.  Such\
    \ formats should be defined in an\n     additional specification document.\n \
    \    For media whose transport protocol is RTP, SDP can be used to\n     provide\
    \ a dynamic binding of media encoding to RTP payload type.\n     The encoding\
    \ names in the RTP AV Profile do not specify unique\n     audio encodings (in\
    \ terms of clock rate and number of audio\n     channels), and so they are not\
    \ used directly in SDP format fields.\n     Instead, the payload type number should\
    \ be used to specify the\n     format for static payload types and the payload\
    \ type number along\n     with additional encoding information should be used\
    \ for dynamically\n     allocated payload types.\n     An example of a static\
    \ payload type is u-law PCM coded single\n     channel audio sampled at 8KHz.\
    \  This is completely defined in the\n     RTP Audio/Video profile as payload\
    \ type 0, so the media field for\n     such a stream sent to UDP port 49232 is:\n\
    \                           m=video 49232 RTP/AVP 0\n     An example of a dynamic\
    \ payload type is 16 bit linear encoded\n     stereo audio sampled at 16KHz. \
    \ If we wish to use dynamic RTP/AVP\n     payload type 98 for such a stream, additional\
    \ information is\n     required to decode it:\n                          m=video\
    \ 49232 RTP/AVP 98\n                           a=rtpmap:98 L16/16000/2\n     The\
    \ general form of an rtpmap attribute is:\n     a=rtpmap:<payload type> <encoding\
    \ name>/<clock rate>[/<encoding\n     parameters>]\n     For audio streams, <encoding\
    \ parameters> may specify the number of\n     audio channels.  This parameter\
    \ may be omitted if the number of\n     channels is one provided no additional\
    \ parameters are needed.  For\n     video streams, no encoding parameters are\
    \ currently specified.\n     Additional parameters may be defined in the future,\
    \ but\n     codecspecific parameters should not be added.  Parameters added to\n\
    \     an rtpmap attribute should only be those required for a session\n     directory\
    \ to make the choice of appropriate media too to\n     participate in a session.\
    \  Codec-specific parameters should be\n     added in other attributes.\n    \
    \ Up to one rtpmap attribute can be defined for each media format\n     specified.\
    \ Thus we might have:\n                       m=audio 49230 RTP/AVP 96 97 98\n\
    \                             a=rtpmap:96 L8/8000\n                          \
    \  a=rtpmap:97 L16/8000\n                           a=rtpmap:98 L16/11025/2\n\
    \     RTP profiles that specify the use of dynamic payload types must\n     define\
    \ the set of valid encoding names and/or a means to register\n     encoding names\
    \ if that profile is to be used with SDP.\n     Experimental encoding formats\
    \ can also be specified using rtpmap.\n     RTP formats that are not registered\
    \ as standard format names must\n     be preceded by \"X-\".  Thus a new experimental\
    \ redundant audio\n     stream called GSMLPC using dynamic payload type 99 could\
    \ be\n     specified as:\n                          m=video 49232 RTP/AVP 99\n\
    \                          a=rtpmap:99 X-GSMLPC/8000\n     Such an experimental\
    \ encoding requires that any site wishing to\n     receive the media stream has\
    \ relevant configured state in its\n     session directory to know which tools\
    \ are appropriate.\n     Note that RTP audio formats typically do not include\
    \ information\n     about the number of samples per packet.  If a non-default\
    \ (as\n     defined in the RTP Audio/Video Profile) packetisation is required,\n\
    \     the \"ptime\" attribute is used as given below.\n     For more details on\
    \ RTP audio and video formats, see [3].\n   o Formats for non-RTP media should\
    \ be registered as MIME content\n     types as described in Appendix B.  For example,\
    \ the LBL whiteboard\n     application might be registered as MIME content-type\
    \ application/wb\n     with encoding considerations specifying that it operates\
    \ over UDP,\n     with no appropriate file format.  In SDP this would then be\n\
    \     expressed using a combination of the \"media\" field and the \"fmt\"\n \
    \    field, as follows:\n                         m=application 32416 udp wb\n\
    \   Suggested Attributes\n   The following attributes are suggested.  Since application\
    \ writers\n   may add new attributes as they are required, this list is not\n\
    \   exhaustive.\n   a=cat:<category>\n       This attribute gives the dot-separated\
    \ hierarchical category of\n       the session.  This is to enable a receiver\
    \ to filter unwanted\n       sessions by category.  It would probably have been\
    \ a compulsory\n       separate field, except for its experimental nature at this\
    \ time.\n       It is a session-level attribute, and is not dependent on charset.\n\
    \   a=keywds:<keywords>\n       Like the cat attribute, this is to assist identifying\
    \ wanted\n       sessions at the receiver.  This allows a receiver to select\n\
    \       interesting session based on keywords describing the purpose of\n    \
    \   the session.  It is a session-level attribute. It is a charset\n       dependent\
    \ attribute, meaning that its value should be interpreted\n       in the charset\
    \ specified for the session description if one is\n       specified, or by default\
    \ in ISO 10646/UTF-8.\n   a=tool:<name and version of tool>\n       This gives\
    \ the name and version number of the tool used to create\n       the session description.\
    \  It is a session-level attribute, and is\n       not dependent on charset.\n\
    \   a=ptime:<packet time>\n       This gives the length of time in milliseconds\
    \ represented by the\n       media in a packet. This is probably only meaningful\
    \ for audio\n       data.  It should not be necessary to know ptime to decode\
    \ RTP or\n       vat audio, and it is intended as a recommendation for the\n \
    \      encoding/packetisation of audio.  It is a media attribute, and is\n   \
    \    not dependent on charset.\n   a=recvonly\n       This specifies that the\
    \ tools should be started in receive-only\n       mode where applicable. It can\
    \ be either a session or media\n       attribute, and is not dependent on charset.\n\
    \   a=sendrecv\n       This specifies that the tools should be started in send\
    \ and\n       receive mode.  This is necessary for interactive conferences with\n\
    \       tools such as wb which defaults to receive only mode. It can be\n    \
    \   either a session or media attribute, and is not dependent on\n       charset.\n\
    \   a=sendonly\n       This specifies that the tools should be started in send-only\n\
    \       mode.  An example may be where a different unicast address is to\n   \
    \    be used for a traffic destination than for a traffic source. In\n       such\
    \ a case, two media descriptions may be use, one sendonly and\n       one recvonly.\
    \ It can be either a session or media attribute, but\n       would normally only\
    \ be used as a media attribute, and is not\n       dependent on charset.\n   a=orient:<whiteboard\
    \ orientation>\n       Normally this is only used in a whiteboard media specification.\n\
    \       It specifies the orientation of a the whiteboard on the screen.\n    \
    \   It is a media attribute. Permitted values are `portrait',\n       `landscape'\
    \ and `seascape' (upside down landscape). It is not\n       dependent on charset\n\
    \   a=type:<conference type>\n       This specifies the type of the conference.\
    \  Suggested values are\n       `broadcast', `meeting', `moderated', `test' and\
    \ `H332'.\n       `recvonly' should be the default for `type:broadcast' sessions,\n\
    \       `type:meeting' should imply `sendrecv' and `type:moderated'\n       should\
    \ indicate the use of a floor control tool and that the\n       media tools are\
    \ started so as to \"mute\" new sites joining the\n       conference.\n      \
    \ Specifying the attribute type:H332 indicates that this loosely\n       coupled\
    \ session is part of a H.332 session as defined in the ITU\n       H.332 specification\
    \ [10].  Media tools should be started\n       `recvonly'.\n       Specifying\
    \ the attribute type:test is suggested as a hint that,\n       unless explicitly\
    \ requested otherwise, receivers can safely avoid\n       displaying this session\
    \ description to users.\n       The type attribute is a session-level attribute,\
    \ and is not\n       dependent on charset.\n   a=charset:<character set>\n   \
    \    This specifies the character set to be used to display the\n       session\
    \ name and information data.  By default, the ISO-10646\n       character set\
    \ in UTF-8 encoding is used. If a more compact\n       representation is required,\
    \ other character sets may be used such\n       as ISO-8859-1 for Northern European\
    \ languages.  In particular,\n       the ISO 8859-1 is specified with the following\
    \ SDP attribute:\n                             a=charset:ISO-8859-1\n       This\
    \ is a session-level attribute; if this attribute is present,\n       it must\
    \ be before the first media field.  The charset specified\n       MUST be one\
    \ of those registered with IANA, such as ISO-8859-1.\n       The character set\
    \ identifier is a US-ASCII string and MUST be\n       compared against the IANA\
    \ identifiers using a case-insensitive\n       comparison.  If the identifier\
    \ is not recognised or not\n       supported, all strings that are affected by\
    \ it SHOULD be regarded\n       as byte strings.\n       Note that a character\
    \ set specified MUST still prohibit the use\n       of bytes 0x00 (Nul), 0x0A\
    \ (LF) and 0x0d (CR). Character sets\n       requiring the use of these characters\
    \ MUST define a quoting\n       mechanism that prevents these bytes appearing\
    \ within text fields.\n   a=sdplang:<language tag>\n       This can be a session\
    \ level attribute or a media level attribute.\n       As a session level attribute,\
    \ it specifies the language for the\n       session description.  As a media level\
    \ attribute, it specifies\n       the language for any media-level SDP information\
    \ field associated\n       with that media.  Multiple sdplang attributes can be\
    \ provided\n       either at session or media level if multiple languages in the\n\
    \       session description or media use multiple languages, in which\n      \
    \ case the order of the attributes indicates the order of\n       importance of\
    \ the various languages in the session or media from\n       most important to\
    \ least important.\n       In general, sending session descriptions consisting\
    \ of multiple\n       languages should be discouraged.  Instead, multiple descriptions\n\
    \       should be sent describing the session, one in each language.\n       However\
    \ this is not possible with all transport mechanisms, and\n       so multiple\
    \ sdplang attributes are allowed although not\n       recommended.\n       The\
    \ sdplang attribute value must be a single RFC 1766 language\n       tag in US-ASCII.\
    \  It is not dependent on the charset attribute.\n       An sdplang attribute\
    \ SHOULD be specified when a session is of\n       sufficient scope to cross geographic\
    \ boundaries where the\n       language of recipients cannot be assumed, or where\
    \ the session is\n       in a different language from the locally assumed norm.\n\
    \   a=lang:<language tag>\n       This can be a session level attribute or a media\
    \ level attribute.\n       As a session level attribute, it specifies the default\
    \ language\n       for the session being described.  As a media level attribute,\
    \ it\n       specifies the language for that media, overriding any session-\n\
    \       level language specified.  Multiple lang attributes can be\n       provided\
    \ either at session or media level if multiple languages\n       if the session\
    \ description or media use multiple languages, in\n       which case the order\
    \ of the attributes indicates the order of\n       importance of the various languages\
    \ in the session or media from\n       most important to least important.\n  \
    \     The lang attribute value must be a single RFC 1766 language tag\n      \
    \ in US-ASCII. It is not dependent on the charset attribute.  A\n       lang attribute\
    \ SHOULD be specified when a session is of\n       sufficient scope to cross geographic\
    \ boundaries where the\n       language of recipients cannot be assumed, or where\
    \ the session is\n       in a different language from the locally assumed norm.\n\
    \   a=framerate:<frame rate>\n       This gives the maximum video frame rate in\
    \ frames/sec.  It is\n       intended as a recommendation for the encoding of\
    \ video data.\n       Decimal representations of fractional values using the notation\n\
    \       \"<integer>.<fraction>\" are allowed.  It is a media attribute, is\n \
    \      only defined for video media, and is not dependent on charset.\n   a=quality:<quality>\n\
    \       This gives a suggestion for the quality of the encoding as an\n      \
    \ integer value.\n       The intention of the quality attribute for video is to\
    \ specify a\n       non-default trade-off between frame-rate and still-image quality.\n\
    \       For video, the value in the range 0 to 10, with the following\n      \
    \ suggested meaning:\n       10 - the best still-image quality the compression\
    \ scheme can\n       give.\n       5 - the default behaviour given no quality\
    \ suggestion.\n       0 - the worst still-image quality the codec designer thinks\
    \ is\n           still usable.\n       It is a media attribute, and is not dependent\
    \ on charset.\n   a=fmtp:<format> <format specific parameters>\n       This attribute\
    \ allows parameters that are specific to a\n       particular format to be conveyed\
    \ in a way that SDP doesn't have\n       to understand them.  The format must\
    \ be one of the formats\n       specified for the media.  Format-specific parameters\
    \ may be any\n       set of parameters required to be conveyed by SDP and given\n\
    \       unchanged to the media tool that will use this format.\n       It is a\
    \ media attribute, and is not dependent on charset.\n"
- title: 6.1.  Communicating Conference Control Policy
  contents:
  - "6.1.  Communicating Conference Control Policy\n   There is some debate over the\
    \ way conference control policy should be\n   communicated.  In general, the authors\
    \ believe that an implicit\n   declarative style of specifying conference control\
    \ is desirable where\n   possible.\n   A simple declarative style uses a single\
    \ conference attribute field\n   before the first media field, possibly supplemented\
    \ by properties\n   such as `recvonly' for some of the media tools.  This conference\n\
    \   attribute conveys the conference control policy. An example might be:\n  \
    \                           a=type:moderated\n   In some cases, however, it is\
    \ possible that this may be insufficient\n   to communicate the details of an\
    \ unusual conference control policy.\n   If this is the case, then a conference\
    \ attribute specifying external\n   control might be set, and then one or more\
    \ \"media\" fields might be\n   used to specify the conference control tools and\
    \ configuration data\n   for those tools. An example is an ITU H.332 session:\n\
    \                c=IN IP4 224.5.6.7\n                a=type:H332\n           \
    \     m=audio 49230 RTP/AVP 0\n                m=video 49232 RTP/AVP 31\n    \
    \            m=application 12349 udp wb\n                m=control 49234 H323\
    \ mc\n                c=IN IP4 134.134.157.81\n   In this example, a general conference\
    \ attribute (type:H332) is\n   specified stating that conference control will\
    \ be provided by an\n   external H.332 tool, and a contact addresses for the H.323\
    \ session\n   multipoint controller is given.\n   In this document, only the declarative\
    \ style of conference control\n   declaration is specified.  Other forms of conference\
    \ control should\n   specify an appropriate type attribute, and should define\
    \ the\n   implications this has for control media.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   SDP is a session description format that describes\
    \ multimedia\n   sessions.  A session description should not be trusted unless\
    \ it has\n   been obtained by an authenticated transport protocol from a trusted\n\
    \   source.  Many different transport protocols may be used to distribute\n  \
    \ session description, and the nature of the authentication will differ\n   from\
    \ transport to transport.\n   One transport that will frequently be used to distribute\
    \ session\n   descriptions is the Session Announcement Protocol (SAP).  SAP\n\
    \   provides both encryption and authentication mechanisms but due to the\n  \
    \ nature of session announcements it is likely that there are many\n   occasions\
    \ where the originator of a session announcement cannot be\n   authenticated because\
    \ they are previously unknown to the receiver of\n   the announcement and because\
    \ no common public key infrastructure is\n   available.\n   On receiving a session\
    \ description over an unauthenticated transport\n   mechanism or from an untrusted\
    \ party, software parsing the session\n   should take a few precautions. Session\
    \ description contain\n   information required to start software on the receivers\
    \ system.\n   Software that parses a session description MUST not be able to start\n\
    \   other software except that which is specifically configured as\n   appropriate\
    \ software to participate in multimedia sessions.  It is\n   normally considered\
    \ INAPPROPRIATE for software parsing a session\n   description to start, on a\
    \ user's system, software that is\n   appropriate to participate in multimedia\
    \ sessions, without the user\n   first being informed that such software will\
    \ be started and giving\n   their consent.  Thus a session description arriving\
    \ by session\n   announcement, email, session invitation, or WWW page SHOULD not\n\
    \   deliver the user into an {it interactive} multimedia session without\n   the\
    \ user being aware that this will happen.  As it is not always\n   simple to tell\
    \ whether a session is interactive or not, applications\n   that are unsure should\
    \ assume sessions are interactive.\n   In this specification, there are no attributes\
    \ which would allow the\n   recipient of a session description to be informed\
    \ to start multimedia\n   tools in a mode where they default to transmitting.\
    \  Under some\n   circumstances it might be appropriate to define such attributes.\
    \  If\n   this is done an application parsing a session description containing\n\
    \   such attributes SHOULD either ignore them, or inform the user that\n   joining\
    \ this session will result in the automatic transmission of\n   multimedia data.\
    \  The default behaviour for an unknown attribute is\n   to ignore it.\n   Session\
    \ descriptions may be parsed at intermediate systems such as\n   firewalls for\
    \ the purposes of opening a hole in the firewall to allow\n   the participation\
    \ in multimedia sessions.  It is considered\n   INAPPROPRIATE for a firewall to\
    \ open such holes for unicast data\n   streams unless the session description\
    \ comes in a request from inside\n   the firewall.\n   For multicast sessions,\
    \ it is likely that local administrators will\n   apply their own policies, but\
    \ the exclusive use of \"local\" or \"site-\n   local\" administrative scope within\
    \ the firewall and the refusal of\n   the firewall to open a hole for such scopes\
    \ will provide separation\n   of global multicast sessions from local ones.\n"
- title: 'Appendix A: SDP Grammar'
  contents:
  - "Appendix A: SDP Grammar\n   This appendix provides an Augmented BNF grammar for\
    \ SDP. ABNF is\n   defined in RFC 2234.\n   announcement =        proto-version\n\
    \                         origin-field\n                         session-name-field\n\
    \                         information-field\n                         uri-field\n\
    \                         email-fields\n                         phone-fields\n\
    \                         connection-field\n                         bandwidth-fields\n\
    \                         time-fields\n                         key-field\n  \
    \                       attribute-fields\n                         media-descriptions\n\
    \   proto-version =       \"v=\" 1*DIGIT CRLF\n                         ;this\
    \ memo describes version 0\n   origin-field =        \"o=\" username space\n \
    \                        sess-id space sess-version space\n                  \
    \       nettype space addrtype space\n                         addr CRLF\n   session-name-field\
    \ =  \"s=\" text CRLF\n   information-field =   [\"i=\" text CRLF]\n   uri-field\
    \ =           [\"u=\" uri CRLF]\n   email-fields =        *(\"e=\" email-address\
    \ CRLF)\n   phone-fields =        *(\"p=\" phone-number CRLF)\n   connection-field\
    \ =    [\"c=\" nettype space addrtype space\n                         connection-address\
    \ CRLF]\n                         ;a connection field must be present\n      \
    \                   ;in every media description or at the\n                  \
    \       ;session-level\n   bandwidth-fields =    *(\"b=\" bwtype \":\" bandwidth\
    \ CRLF)\n   time-fields =         1*( \"t=\" start-time space stop-time\n    \
    \                     *(CRLF repeat-fields) CRLF)\n                         [zone-adjustments\
    \ CRLF]\n   repeat-fields =       \"r=\" repeat-interval space typed-time\n  \
    \                       1*(space typed-time)\n   zone-adjustments =    time space\
    \ [\"-\"] typed-time\n                         *(space time space [\"-\"] typed-time)\n\
    \   key-field =           [\"k=\" key-type CRLF]\n   key-type =            \"\
    prompt\" |\n                         \"clear:\" key-data |\n                 \
    \        \"base64:\" key-data |\n                         \"uri:\" uri\n   key-data\
    \ =            email-safe | \"~\" | \"\n   attribute-fields =    *(\"a=\" attribute\
    \ CRLF)\n   media-descriptions =  *( media-field\n                         information-field\n\
    \                         *(connection-field)\n                         bandwidth-fields\n\
    \                         key-field\n                         attribute-fields\
    \ )\n   media-field =         \"m=\" media space port [\"/\" integer]\n      \
    \                   space proto 1*(space fmt) CRLF\n   media =               1*(alpha-numeric)\n\
    \                         ;typically \"audio\", \"video\", \"application\"\n \
    \                        ;or \"data\"\n   fmt =                 1*(alpha-numeric)\n\
    \                         ;typically an RTP payload type for audio\n         \
    \                ;and video media\n   proto =               1*(alpha-numeric)\n\
    \                         ;typically \"RTP/AVP\" or \"udp\" for IP4\n   port =\
    \                1*(DIGIT)\n                         ;should in the range \"1024\"\
    \ to \"65535\" inclusive\n                         ;for UDP based media\n   attribute\
    \ =           (att-field \":\" att-value) | att-field\n   att-field =        \
    \   1*(alpha-numeric)\n   att-value =           byte-string\n   sess-id =    \
    \         1*(DIGIT)\n                         ;should be unique for this originating\
    \ username/host\n   sess-version =        1*(DIGIT)\n                        \
    \ ;0 is a new session\n   connection-address =  multicast-address\n          \
    \               | addr\n   multicast-address =   3*(decimal-uchar \".\") decimal-uchar\
    \ \"/\" ttl\n                         [ \"/\" integer ]\n                    \
    \     ;multicast addresses may be in the range\n                         ;224.0.0.0\
    \ to 239.255.255.255\n   ttl =                 decimal-uchar\n   start-time =\
    \          time | \"0\"\n   stop-time =           time | \"0\"\n   time =    \
    \            POS-DIGIT 9*(DIGIT)\n                         ;sufficient for 2 more\
    \ centuries\n   repeat-interval =     typed-time\n   typed-time =          1*(DIGIT)\
    \ [fixed-len-time-unit]\n   fixed-len-time-unit = \"d\" | \"h\" | \"m\" | \"s\"\
    \n   bwtype =              1*(alpha-numeric)\n   bandwidth =           1*(DIGIT)\n\
    \   username =            safe\n                         ;pretty wide definition,\
    \ but doesn't include space\n   email-address =       email | email \"(\" email-safe\
    \ \")\" |\n                         email-safe \"<\" email \">\"\n   email = \
    \              ;defined in RFC822\n   uri=                  ;defined in RFC1630\n\
    \   phone-number =        phone | phone \"(\" email-safe \")\" |\n           \
    \              email-safe \"<\" phone \">\"\n   phone =               \"+\" POS-DIGIT\
    \ 1*(space | \"-\" | DIGIT)\n                         ;there must be a space or\
    \ hyphen between the\n                         ;international code and the rest\
    \ of the number.\n   nettype =             \"IN\"\n                         ;list\
    \ to be extended\n   addrtype =            \"IP4\" | \"IP6\"\n               \
    \          ;list to be extended\n   addr =                FQDN | unicast-address\n\
    \   FQDN =                4*(alpha-numeric|\"-\"|\".\")\n                    \
    \     ;fully qualified domain name as specified in RFC1035\n   unicast-address\
    \ =     IP4-address | IP6-address\n   IP4-address =         b1 \".\" decimal-uchar\
    \ \".\" decimal-uchar \".\" b4\n   b1 =                  decimal-uchar\n     \
    \                    ;less than \"224\"; not \"0\" or \"127\"\n   b4 =       \
    \           decimal-uchar\n                         ;not \"0\"\n   IP6-address\
    \ =         ;to be defined\n   text =                byte-string\n           \
    \              ;default is to interpret this as IS0-10646 UTF8\n             \
    \            ;ISO 8859-1 requires a \"a=charset:ISO-8859-1\"\n               \
    \          ;session-level attribute to be used\n   byte-string =         1*(0x01..0x09|0x0b|0x0c|0x0e..0xff)\n\
    \                         ;any byte except NUL, CR or LF\n   decimal-uchar = \
    \      DIGIT\n                         | POS-DIGIT DIGIT\n                   \
    \      | (\"1\" 2*(DIGIT))\n                         | (\"2\" (\"0\"|\"1\"|\"\
    2\"|\"3\"|\"4\") DIGIT)\n                         | (\"2\" \"5\" (\"0\"|\"1\"\
    |\"2\"|\"3\"|\"4\"|\"5\"))\n   integer =             POS-DIGIT *(DIGIT)\n   alpha-numeric\
    \ =       ALPHA | DIGIT\n   DIGIT =               \"0\" | POS-DIGIT\n   POS-DIGIT\
    \ =           \"1\"|\"2\"|\"3\"|\"4\"|\"5\"|\"6\"|\"7\"|\"8\"|\"9\"\n   ALPHA\
    \ =               \"a\"|\"b\"|\"c\"|\"d\"|\"e\"|\"f\"|\"g\"|\"h\"|\"i\"|\"j\"\
    |\"k\"|\n                         \"l\"|\"m\"|\"n\"|\"o \"|\"p\"|\"q\"|\"r\"|\"\
    s\"|\"t\"|\"u\"|\"v\"|\n                         \"w\"|\"x\"|\"y\"|\"z\"|\"A\"\
    |\"B\"|\"C \"|\"D\"|\"E\"|\"F\"|\"G\"|\n                         \"H\"|\"I\"|\"\
    J\"|\"K\"|\"L\"|\"M\"|\"N\"|\"O\"|\"P\"|\" Q\"|\"R\"|\n                      \
    \   \"S\"|\"T\"|\"U\"|\"V\"|\"W\"|\"X\"|\"Y\"|\"Z\"\n   email-safe =         \
    \ safe | space | tab\n   safe =                alpha-numeric |\n             \
    \            \"'\" | \"'\" | \"-\" | \".\" | \"/\" | \":\" | \"?\" | \"\"\" |\n\
    \                         \"#\" | \"$\" | \"&\" | \"*\" | \";\" | \"=\" | \"@\"\
    \ | \"[\" |\n                         \"]\" | \"^\" | \"_\" | \"`\" | \"{\" |\
    \ \"|\" | \"}\" | \"+\" |\n                         \"~\" | \"\n   space =   \
    \            %d32\n   tab =                 %d9\n   CRLF =                %d13.10\n"
- title: 'Appendix B: Guidelines for registering SDP names with IANA'
  contents:
  - "Appendix B: Guidelines for registering SDP names with IANA\n   There are seven\
    \ field names that may be registered with IANA. Using\n   the terminology in the\
    \ SDP specification BNF, they are \"media\",\n   \"proto\", \"fmt\", \"att-field\"\
    , \"bwtype\", \"nettype\" and \"addrtype\".\n   \"media\" (eg, audio, video, application,\
    \ data).\n       Packetized media types, such as those used by RTP, share the\n\
    \       namespace used by media types registry [RFC 2048] (i.e. \"MIME\n     \
    \  types\").  The list of valid media names is the set of top-level\n       MIME\
    \ content types.  The set of media is intended to be small and\n       not to\
    \ be extended except under rare circumstances.  (The MIME\n       subtype corresponds\
    \ to the \"fmt\" parameter below).\n   \"proto\"\n       In general this should\
    \ be an IETF standards-track transport\n       protocol identifier such as RTP/AVP\
    \ (rfc 1889 under the rfc 1890\n       profile).\n       However, people will\
    \ want to invent their own proprietary\n       transport protocols.  Some of these\
    \ should be registered as a\n       \"fmt\" using \"udp\" as the protocol and\
    \ some of which probably\n       can't be.\n       Where the protocol and the\
    \ application are intimately linked,\n       such as with the LBL whiteboard wb\
    \ which used a proprietary and\n       special purpose protocol over UDP, the\
    \ protocol name should be\n       \"udp\" and the format name that should be registered\
    \ is \"wb\".  The\n       rules for formats (see below) apply to such registrations.\n\
    \       Where the proprietary transport protocol really carries many\n       different\
    \ data formats, it is possible to register a new protocol\n       name with IANA.\
    \ In such a case, an RFC MUST be produced\n       describing the protocol and\
    \ referenced in the registration.  Such\n       an RFC MAY be informational, although\
    \ it is preferable if it is\n       standards-track.\n   \"fmt\"\n       The format\
    \ namespace is dependent on the context of the \"proto\"\n       field, so a format\
    \ cannot be registered without specifying one or\n       more transport protocols\
    \ that it applies to.\n       Formats cover all the possible encodings that might\
    \ want to be\n       transported in a multimedia session.\n       For RTP formats\
    \ that have been assigned static payload types, the\n       payload type number\
    \ is used.  For RTP formats using a dynamic\n       payload type number, the dynamic\
    \ payload type number is given as\n       the format and an additional \"rtpmap\"\
    \ attribute specifies the\n       format and parameters.\n       For non-RTP formats,\
    \ any unregistered format name may be\n       registered through the MIME-type\
    \ registration process [RFC 2048].\n       The type given here is the MIME subtype\
    \ only (the top-level MIME\n       content type is specified by the media parameter).\
    \  The MIME type\n       registration SHOULD reference a standards-track RFC which\n\
    \       describes the transport protocol for this media type.  If there\n    \
    \   is an existing MIME type for this format, the MIME registration\n       should\
    \ be augmented to reference the transport specification for\n       this media\
    \ type.  If there is not an existing MIME type for this\n       format, and there\
    \ exists no appropriate file format, this should\n       be noted in the encoding\
    \ considerations as \"no appropriate file\n       format\".\n   \"att-field\"\
    \ (Attribute names)\n       Attribute field names MAY be registered with IANA,\
    \ although this\n       is not compulsory, and unknown attributes are simply ignored.\n\
    \       When an attribute is registered, it must be accompanied by a\n       brief\
    \ specification stating the following:\n       o contact name, email address and\
    \ telephone number\n       o attribute-name (as it will appear in SDP)\n     \
    \  o long-form attribute name in English\n       o type of attribute (session\
    \ level, media level, or both)\n       o whether the attribute value is subject\
    \ to the charset\n       attribute.\n       o a one paragraph explanation of the\
    \ purpose of the attribute.\n       o a specification of appropriate attribute\
    \ values for this\n         attribute.\n       IANA will not sanity check such\
    \ attribute registrations except to\n       ensure that they do not clash with\
    \ existing registrations.\n       Although the above is the minimum that IANA\
    \ will accept, if the\n       attribute is expected to see widespread use and\
    \ interoperability\n       is an issue, authors are encouraged to produce a standards-track\n\
    \       RFC that specifies the attribute more precisely.\n       Submitters of\
    \ registrations should ensure that the specification\n       is in the spirit\
    \ of SDP attributes, most notably that the\n       attribute is platform independent\
    \ in the sense that it makes no\n       implicit assumptions about operating systems\
    \ and does not name\n       specific pieces of software in a manner that might\
    \ inhibit\n       interoperability.\n   \"bwtype\" (bandwidth specifiers)\n  \
    \     A proliferation of bandwidth specifiers is strongly discouraged.\n     \
    \  New bandwidth specifiers may be registered with IANA.  The\n       submission\
    \ MUST reference a standards-track RFC specifying the\n       semantics of the\
    \ bandwidth specifier precisely, and indicating\n       when it should be used,\
    \ and why the existing registered bandwidth\n       specifiers do not suffice.\n\
    \   \"nettype\" (Network Type)\n       New network types may be registered with\
    \ IANA if SDP needs to be\n       used in the context of non-internet environments.\
    \ Whilst these\n       are not normally the preserve of IANA, there may be circumstances\n\
    \       when an Internet application needs to interoperate with a non-\n     \
    \  internet application, such as when gatewaying an internet\n       telephony\
    \ call into the PSTN.  The number of network types should\n       be small and\
    \ should be rarely extended.  A new network type\n       cannot be registered\
    \ without registering at least one address\n       type to be used with that network\
    \ type.  A new network type\n       registration MUST reference an RFC which gives\
    \ details of the\n       network type and address type and specifies how and when\
    \ they\n       would be used.  Such an RFC MAY be Informational.\n   \"addrtype\"\
    \ (Address Type)\n       New address types may be registered with IANA.  An address\
    \ type\n       is only meaningful in the context of a network type, and any\n\
    \       registration of an address type MUST specify a registered network\n  \
    \     type, or be submitted along with a network type registration.  A\n     \
    \  new address type registration MUST reference an RFC giving\n       details\
    \ of the syntax of the address type.  Such an RFC MAY be\n       Informational.\
    \  Address types are not expected to be registered\n       frequently.\n   Registration\
    \ Procedure\n   To register a name the above guidelines should be followed regarding\n\
    \   the required  level  of  documentation  that  is required.  The\n   registration\
    \ itself should be sent to IANA.  Attribute registrations\n   should  include\
    \ the  information  given  above.   Other registrations\n   should include the\
    \ following additional information:\n   o contact name, email address and telephone\
    \ number\n   o name being registered (as it will appear in SDP)\n   o long-form\
    \ name in English\n   o type of name (\"media\", \"proto\", \"fmt\", \"bwtype\"\
    , \"nettype\", or\n     \"addrtype\")\n   o a one paragraph explanation of the\
    \ purpose of the registered name.\n   o a reference to the specification (eg RFC\
    \ number) of the registered\n     name.\n   IANA may refer any registration to\
    \ the IESG or to any appropriate\n   IETF working group for review, and may request\
    \ revisions to be made\n   before a registration will be made.\n"
- title: 'Appendix C: Authors'' Addresses'
  contents:
  - "Appendix C: Authors' Addresses\n   Mark Handley\n   Information Sciences Institute\n\
    \   c/o MIT Laboratory for Computer Science\n   545 Technology Square\n   Cambridge,\
    \ MA 02139\n   United States\n   electronic mail: mjh@isi.edu\n   Van Jacobson\n\
    \   MS 46a-1121\n   Lawrence Berkeley Laboratory\n   Berkeley, CA 94720\n   United\
    \ States\n   electronic mail: van@ee.lbl.gov\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   Many people in the IETF MMUSIC working group have made comments\
    \ and\n   suggestions contributing to this document.  In particular, we would\n\
    \   like to thank Eve Schooler, Steve Casner, Bill Fenner, Allison\n   Mankin,\
    \ Ross Finlayson, Peter Parnes, Joerg Ott, Carsten Bormann, Rob\n   Lanphier and\
    \ Steve Hanna.\n"
- title: References
  contents:
  - "References\n   [1] Mills, D., \"Network Time Protocol (version 3) specification\
    \ and\n   implementation\", RFC 1305, March 1992.\n   [2] Schulzrinne, H., Casner,\
    \ S., Frederick, R. and V. Jacobson, \"RTP:\n   A Transport Protocol for Real-Time\
    \ Applications\", RFC 1889, January\n   1996.\n   [3] Schulzrinne, H., \"RTP Profile\
    \ for Audio and Video Conferences\n   with Minimal Control\", RFC 1890, January\
    \ 1996\n   [4] Handley, M., \"SAP - Session Announcement Protocol\", Work in\n\
    \   Progress.\n   [5] V. Jacobson, S. McCanne, \"vat - X11-based audio teleconferencing\n\
    \   tool\" vat manual page, Lawrence Berkeley Laboratory, 1994.\n   [6] The Unicode\
    \ Consortium, \"The Unicode Standard -- Version 2.0\",\n   Addison-Wesley, 1996.\n\
    \   [7] ISO/IEC 10646-1:1993. International Standard -- Information\n   technol-\
    \ ogy -- Universal Multiple-Octet Coded Character Set (UCS) --\n   Part 1: Architecture\
    \ and Basic Multilingual Plane.  Five amendments\n   and a techn- ical  corrigendum\
    \  have been published up to now.  UTF-8\n   is described in Annex R, published\
    \ as Amendment 2.\n   [8] Goldsmith, D., and M. Davis, \"Using Unicode with MIME\"\
    , RFC 1641,\n   July 1994.\n   [9] Yergeau, F., \"UTF-8, a transformation format\
    \ of Unicode and ISO\n   10646\", RFC 2044, October 1996.\n   [10] ITU-T Recommendation\
    \ H.332 (1998): \"Multimedia Terminal for\n   Receiving Internet-based H.323 Conferences\"\
    , ITU, Geneva.\n   [11] Handley, M., Schooler, E., and H. Schulzrinne, \"Session\n\
    \   Initiation Protocol (SIP)\", Work in Progress.\n   [12] Schulzrinne, H., Rao,\
    \ A., and R. Lanphier, \"Real Time Streaming\n   Protocol (RTSP)\", RFC 2326,\
    \ April 1998.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1998).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
