Abstract This document describes the encryption algorithm Rabbit.
It is a stream cipher algorithm with a 128 bit key and 64 bit initialization vector (IV).
The method was published in 2003 and has been subject to public security and performance revision.
Its high performance makes it particularly suited for the use with Internet protocols where large amounts of data have to be processed.
Introduction Rabbit is a stream cipher algorithm that has been designed for high performance in software implementations.
Both key setup and encryption are very fast, making the algorithm particularly suited for all applications where large amounts of data or large numbers of data packages have to be encrypted.
Examples include, but are not limited to, server side encryption, multimedia encryption, hard disk encryption, and encryption on limited resource devices.
The cipher is based on ideas derived from the behavior of certain chaotic maps.
These maps have been carefully discretized, resulting in a compact stream cipher.
Rabbit has been openly published in 2003 [1] and has not displayed any weaknesses as of the time of this writing.
To ensure ongoing security evaluation, it was also submitted to the ECRYPT eSTREAM
Technically, Rabbit consists of a pseudorandom bitstream generator that takes a 128 bit key and a 64 bit initialization vector (IV) as input and generates a stream of 128 bit blocks.
Encryption is performed by combining this output with the message, using the exclusive OR operation.
Decryption is performed in exactly the same way as encryption.
Further information about Rabbit, including reference implementation, test vectors, performance figures, and security white papers, is available from http://www.cryptico.com/. 2.
When labeling bits of a variable, A, the least significant bit is denoted by A[0].
g] represents bits h through g of variable A, where h is more significant than g.
Given a 64 bit word, the function MSW extracts the most significant 32 bits, whereas the function LSW extracts the least significant 32 bits.
Constants prefixed with 0x are in hexadecimal notation.
In particular, the constant WORDSIZE is defined to be 0x100000000.
The internal state of the stream cipher consists of 513 bits.
512 bits are divided between eight 32 bit state variables, X0,...
,X7 and eight 32 bit counter variables,
In addition, there is one counter carry bit, b. 2.3.
The counter carry bit b is initialized to zero.
The state and counter words are derived from the key K[127..0].
The key is divided into subkeys K0   K[15..0]
The initial state is initialized as follows: for j 0 to 7: if j is even:
K(j 5 mod 8) else:
Cj   Kj    K(j 1 mod 8)
The system is then iterated four times, each iteration consisting of counter update (Section 2.5) and next state function (Section 2.6).
After that, the counter variables are reinitialized to for j 0 to 7:
If an IV is used for encryption, the counter variables are modified after the key setup.
Denoting the IV bits by IV[63..0], the setup proceeds as follows:
The system is then iterated another 4 times, each iteration consisting of counter update (Section 2.5) and next state function (Section 2.6).
The relationship between key and IV setup is as follows:
After the key setup, the resulting inner state is saved as a master state.
Then the IV setup is run to obtain the first encryption starting state.
Whenever re initialization under a new IV is necessary, the IV setup is run on the master state again to derive the next encryption starting state.
Before each execution of the next state function (Section 2.6), the counter system has to be updated.
This system uses constants A1,...
It also uses the counter carry bit b to update the counter system, as follows: for j 0 to 7: temp   Cj
The core of the Rabbit algorithm is the next state function.
It is based on the function g, which transforms two 32 bit inputs into one 32 bit output, as follows: g(u,v)   LSW(square(u v))
Using this function, the algorithm updates the inner state as follows: for j 0 to 7:
After the key and IV setup are concluded, the algorithm is iterated in order to produce one 128 bit output block, S, per round.
Each round consists of executing steps 2.5 and 2.6 and then extracting an output S[127..0] as follows: S[15..0]
Encryption/Decryption Scheme Given a 128 bit message block, M, encryption E and decryption M'
E    M ^ S    and M'
If S is the same in both operations (as it should be if the same key and IV are used), then M   M'.
The encryption/decryption scheme is repeated until all blocks in the message have been encrypted/decrypted.
If the message size is not a multiple of 128 bits, only the needed amount of least significant bits from the last output block S is used for the last message block M.
If the application requires the encryption of smaller blocks (or even individual bits), a 128 bit buffer is used.
The buffer is initialized by generating a new value, S, and copying it into the buffer.
After that, all data blocks are encrypted using the least significant bits in this buffer.
Whenever the buffer is empty, a new value S is generated and copied into the buffer.
Security Considerations For an encryption algorithm, the security provided is, of course, the most important issue.
No security weaknesses have been found to date, neither by the designers nor by independent cryptographers scrutinizing the algorithms after its publication in [1].
Note that a full discussion of Rabbit's security against known cryptanalytic techniques is provided in [3].
In the following, we restrict ourselves to some rules on how to use the Rabbit algorithm properly.
Message Length Rabbit was designed to encrypt up to 2 to the power of 64 128 bit message blocks under the same the key.
Should this amount of data ever be exceeded, the key has to be replaced.
It is recommended to follow this rule even when the IV is changed on a regular basis.
It is possible to run Rabbit without the IV setup.
However, in this case, the generator must never be reset under the same key, since this would destroy its security (for a recent example, see [4]).
However, in order to guarantee synchronization between sender and receiver, ciphers are frequently reset in practice.
This means that both sender and receiver set the inner state of the cipher back to a known value and then derive the new encryption state using an IV.
If this is done, it is important to make sure that no IV is ever reused under the same key.
This is a set of test vectors for conformance testing, given in octet form.
For use with Rabbit, they have to be transformed into integers by
OS2IP and I2OSP, as described in [5].
Testing without IV Setup key
[00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00] S[0]
[B1 57 54 F0 36 A5 D6 EC F5 6B 45 26 1C 4A F7 02]
[88 E8 D8 15 C5 9C 0C 39 7B 69 6C 47 89 C6 8A A7]
[F4 16 A1 C3 70 0C D4 51 DA 68 D1 88 16 73 D6 96]
[91 28 13 29 2E 3D
36 FE 3B FC 62 F1 DC 51 C3 AC] S[0]
[3D 2D F3 C8 3E F6 27 A1 E9 7F C3 84 87 E2 51 9C] S[1]
[F5 76 CD 61 F4 40 5B 88 96 BF 53 AA 85 54 FC 19]
[E5 54 74 73 FB DB 43 50 8A E5 3B 20 20 4D 4C 5E] key
[83 95 74 15 87
E0 C7 33 E9 E9 AB 01 C0 9B 00 43]
[0C B1 0D CD A0 41 CD AC 32 EB 5C FD 02 D0 60 9B] S[1]
[95 FC 9F CA 0F 17 01 5A 7B 70 92 11 4C FF 3E AD]
[96 49 E5 DE 8B FC 7F 3F 92 41 47 AD 3A 94 74 28] A.2.
Testing with IV Setup mkey
[00 00 00 00 00 00 00 00 00 00 00
[C6 A7 27 5E F8
54 95 D8 7C CD 5D 37
67 05 B7 ED] S[1]
[5F 29 A6 AC 04 F5 EF D4 7B 8F
29 32 70 DC 4A 8D]
[2A DE 82 2B 29 DE 6C 1E E5 2B DB 8A 47 BF 8F 66]
[1F CD 4E B9 58 00 12 E2 E0 DC CC 92 22 01 7D 6D] S[1]
[A7 5F 4E 10 D1 21 25 01 7B 24 99 FF ED 93 6F 2E]
C3 93 E7 38 39
[44 5A D8 C8 05
85 8D BF 70 B6 AF 23 A1 51 10 4D]
[96 C8 F2 79 47 F4 2C 5B AE AE 67 C6 AC C3 5B 03]
[9F CB FC 89 5F A7 1C 17 31 3D F0 34 F0 15 51 CB]
The following set of vectors describes the inner state of Rabbit during key and iv setup.
It is meant mainly for debugging purposes.
Octet strings are written according to I2OSP conventions.
Testing Round Function and Key Setup key
FC 62 F1 DC 51 C3 AC]
Inner state after key expansion:
b    0 X0   0xDC51C3AC, X1   0x13292E3D, X2   0x3BFC62F1, X3   0xC3AC9128, X4   0x2E3D36FE, X5   0x62F1DC51, X6   0x91281329
, X7   0x36FE3BFC, C0   0x36FE2E3D,
, C4   0xC3ACDC51, C5   0x2E3D1329, C6
Inner state after first key setup iteration: b    1 X0   0xF2E8C8B1, X1   0x38E06FA7, X2   0x9A0D72C0
X5   0x4B239CBE, X6   0x0565DCCC, X7   0xB1587C8D, C0   0x8433018A,
, C3   0x89310A4B, C4   0x96FA1124, C5   0x6310605E, C6   0xB0260F49, C7   0x6475F87F Inner state
after fourth key setup iteration
: b    0 X0   0x1D059312, X1   0xBDDC3E45, X2   0xF440927D, X3   0x50CBB553, X4   0x36709423, X5   0x0B6F0711, X6   0x3ADA3A7B, X7   0xEB9800C8, C0   0x6BD17B74
, C1   0x2986363E, C2   0xE676C5FC
, C3   0x70CF8432, C4   0x10E1AF9E, C5   0x018A47FD, C6   0x97C48931,
C7   0xDE5D96F9 Inner state after final key setup xor: b    0 X0   0x1D059312, X1   0xBDDC3E45, X2   0xF440927D,
, X4   0x36709423, X5   0x0B6F0711, X6   0x3ADA3A7B
, X7   0xEB9800C8, C0   0x5DA1EF57, C1   0x22E9312F, C2   0xDCACFF87, C3   0x9B5784FA, C4   0x0DE43C8C
after generation of 48 bytes of output: b    1 X0   0xB5428566, X1
X2   0xFF5578DE, X3   0x7293950F, X4   0x145CE109, X5   0xC93875B0,
, C1   0x9CD0CFA9, C2   0x7B26E725, C3   0x82F5FEE2, C4   0x87CBDB06,
The 48 output bytes: S[0]
[3D 2D F3 C8 3E F6 27 A1 E9 7F C3 84 87 E2 51 9C] S[1]
[F5 76 CD 61 F4 40 5B 88 96 BF 53 AA 85 54 FC 19]
[E5 54 74 73 FB DB 43 50 8A E5 3B 20 20 4D 4C 5E] B.2.
FC 62 F1 DC 51 C3 AC]
, X4   0x36709423, X5   0x0B6F0711, X6   0x3ADA3A7B
, X7   0xEB9800C8, C0   0x9C87910E,
, C3   0x6E22FAA3, C4   0xCCC242D5, C5   0x7F25B89E, C6   0xA0F7EE39,
C7   0x7BE35DF3 Inner state after first IV setup iteration: b    1 X0   0xC4FF831A, X1   0xEF5CD094, X2   0xC5933855, X3   0xC05A5C03, X4   0x4A50522F,
X5   0xDF487BE4, X6   0xA45FA013, X7   0x05531179
, C0   0xE9BC645B, C1   0xB4E824DC, C2   0x54B25827, C3   0xBB57CDF0, C4   0xA00F77A8, C5   0xB3F905D3, C6   0xEE2CC186, C7   0x4F3092C6
Inner state after fourth IV setup iteration:
b    1 X0   0x6274E424, X1   0xE14CE120, X2   0xDA8739D9, X3   0x65E0402D,
, X7   0x9B467ABD, C0   0xD15ADE44,
, C2   0xF32C3FC6, C3   0xA2F647D7, C4
, C5   0x5272ED72, C6   0xD5CB3B6E, C7   0xC9183140
