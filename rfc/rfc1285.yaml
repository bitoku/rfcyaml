- title: __initial_text__
  contents:
  - '                    FDDI Management Information Base

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo is an extension to the SNMP MIB.  This RFC\
    \ specifies an IAB\n   standards track protocol for the Internet community, and\
    \ requests\n   discussion and suggestions for improvements.  Please refer to the\n\
    \   current edition of the \"IAB Official Protocol Standards\" for the\n   standardization\
    \ state and status of this protocol.  Distribution of\n   this memo is unlimited.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Abstract ..............................................\
    \    1\n   2. The Network Management Framework.......................    1\n \
    \  3. Objects ...............................................    2\n   3.1 Format\
    \ of Definitions ................................    2\n   4. Overview ..............................................\
    \    3\n   4.1 Textual Conventions ..................................    3\n \
    \  5. Object Definitions ....................................    4\n   5.1 The\
    \ SMT Group ........................................    5\n   5.2 The MAC Group\
    \ ........................................   15\n   5.3 The PATH Group .......................................\
    \   27\n   5.4 The PORT Group .......................................   27\n \
    \  5.5 The ATTACHMENT Group .................................   38\n   5.6 The\
    \ Chip Set Group ...................................   42\n   6. Acknowledgements\
    \ ......................................   43\n   7. References ............................................\
    \   45\n   Security Considerations...................................   46\n \
    \  Author's Address..........................................   46\n"
- title: 1.  Abstract
  contents:
  - "1.  Abstract\n   This memo defines a portion of the Management Information Base\
    \ (MIB)\n   for use with network management protocols in TCP/IP-based internets.\n\
    \   In particular, it defines objects for managing devices which\n   implement\
    \ the FDDI.\n"
- title: 2.  The Network Management Framework
  contents:
  - "2.  The Network Management Framework\n   The Internet-standard Network Management\
    \ Framework consists of three\n   components.  They are:\n      RFC 1155 which\
    \ defines the SMI, the mechanisms used for describing\n      and naming objects\
    \ for the purpose of management.  RFC 1212\n      defines a more concise description\
    \ mechanism, which is wholly\n      consistent with the SMI.\n      RFC 1156 which\
    \ defines MIB-I, the core set of managed objects for\n      the Internet suite\
    \ of protocols.  RFC 1213, defines MIB-II, an\n      evolution of MIB-I based\
    \ on implementation experience and new\n      operational requirements.\n    \
    \  RFC 1157 which defines the SNMP, the protocol used for network\n      access\
    \ to managed objects.\n   The Framework permits new objects to be defined for\
    \ the purpose of\n   experimentation and evaluation.\n"
- title: 3.  Objects
  contents:
  - "3.  Objects\n   Managed objects are accessed via a virtual information store,\
    \ termed\n   the Management Information Base or MIB.  Objects in the MIB are\n\
    \   defined using the subset of Abstract Syntax Notation One (ASN.1) [5]\n   defined\
    \ in the SMI.  In particular, each object has a name, a syntax,\n   and an encoding.\
    \  The name is an object identifier, an\n   administratively assigned name, which\
    \ specifies an object type.  The\n   object type together with an object instance\
    \ serves to uniquely\n   identify a specific instantiation of the object.  For\
    \ human\n   convenience, we often use a textual string, termed the OBJECT\n  \
    \ DESCRIPTOR, to also refer to the object type.\n   The syntax of an object type\
    \ defines the abstract data structure\n   corresponding to that object type. \
    \ The ASN.1 language is used for\n   this purpose.  However, the SMI [1] purposely\
    \ restricts the ASN.1\n   constructs which may be used.  These restrictions are\
    \ explicitly made\n   for simplicity.\n   The encoding of an object type is simply\
    \ how that object type is\n   represented using the object type's syntax.  Implicitly\
    \ tied to the\n   notion of an object type's syntax and encoding is how the object\
    \ type\n   is represented when being transmitted on the network.\n   The SMI specifies\
    \ the use of the basic encoding rules of ASN.1 [6],\n   subject to the additional\
    \ requirements imposed by the SNMP.\n"
- title: 3.1.  Format of Definitions
  contents:
  - "3.1.  Format of Definitions\n   Section 5 contains contains the specification\
    \ of all object types\n   contained in this MIB module.  The object types are\
    \ defined using the\n   conventions defined in the SMI, as amended by the extensions\n\
    \   specified in [7].\n"
- title: 4.  Overview
  contents:
  - "4.  Overview\n   This document defines the managed objects for FDDI devices which\
    \ are\n   to be accessible via the Simple Network Management Protocol (SNMP).\n\
    \   At present, this applies to these values of the ifType variable in\n   the\
    \ Internet-standard MIB:\n               fddi(15)\n   For these interfaces, the\
    \ value of the ifSpecific variable in the\n   MIB-II [4] has the OBJECT IDENTIFIER\
    \ value:\n               fddi    OBJECT IDENTIFIER ::= { transmission 15 }\n \
    \  The definitions of the objects presented here draws heavily from\n   related\
    \ work in the ANSI X3T9.5 committee and the SMT subcommittee of\n   that committee\
    \ [8].  In fact, the definitions of the managed objects\n   in this document are,\
    \ to the maximum extent possible, identical to\n   those identified by the ANSI\
    \ committee.  The semantics of each\n   managed object should be the same with\
    \ syntactic changes made as\n   necessary to recast the objects in terms of the\
    \ Internet-standard SMI\n   and MIB so as to be compatible with the SNMP.  Examples\
    \ of these\n   syntactic changes include remapping booleans to enumerated integers,\n\
    \   remapping bit strings to octet strings, and the like.  In addition,\n   the\
    \ naming of the objects was changed to achieve compatibility.\n   These minimal\
    \ syntactic changes with no semantic changes should allow\n   implementations\
    \ of SNMP manageable FDDI systems to share\n   instrumentation with other network\
    \ management schemes and thereby\n   minimize implementation cost.  In addition,\
    \ the translation of\n   information conveyed by managed objects from one network\
    \ management\n   scheme to another is eased by these shared definitions.\n   Only\
    \ the essential variables, as indicated by their mandatory status\n   in the ANSI\
    \ specification were retained in this document.  The\n   importance of variables\
    \ which have an optional status in the ANSI\n   specification were perceived as\
    \ being less widely accepted.\n"
- title: 4.1.  Textual Conventions
  contents:
  - "4.1.  Textual Conventions\n   Several new datatypes are introduced as a textual\
    \ convention in this\n   MIB document.  These textual conventions enhance the\
    \ readability of\n   the document and ease comparisons with its ANSI counterpart.\
    \  It\n   should be noted that the introduction of the following textual\n   conventions\
    \ has no effect on either the syntax nor the semantics of\n   any managed objects.\
    \  The use of these is merely an artifact of the\n   explanatory method used.\
    \  Objects defined in terms of one of these\n   methods are always encoded by\
    \ means of the rules that define the\n   primitive type.  Hence, no changes to\
    \ the SMI or the SNMP are\n   necessary to accommodate these textual conventions\
    \ which are adopted\n   merely for the convenience of readers and writers in pursuit\
    \ of the\n   elusive goal of clear, concise, and unambiguous MIB documents.\n"
- title: 5.  Object Definitions
  contents:
  - "5.  Object Definitions\n          RFC1285-MIB DEFINITIONS ::= BEGIN\n       \
    \   IMPORTS\n                  Counter\n                      FROM RFC1155-SMI\n\
    \                  transmission\n                      FROM RFC1213-MIB\n    \
    \              OBJECT-TYPE\n                      FROM RFC-1212;\n          --\
    \  This MIB module uses the extended OBJECT-TYPE macro as\n          --  defined\
    \ in [7].\n          -- this is the FDDI MIB module\n          fddi    OBJECT\
    \ IDENTIFIER ::= { transmission 15 }\n          -- textual conventions\n     \
    \     FddiTime ::= INTEGER (0..2147483647)\n          -- This data type specifies\
    \ octet units of 80 nanoseconds as\n          -- an integer value.  It is used\
    \ for Path Latency  and\n          -- Synchronous Bandwidth values.  The encoding\
    \ is normal\n          -- integer representation (not twos complement).\n    \
    \      FddiResourceId ::= INTEGER (0..65535)\n          -- This data type is used\
    \ to refer to an instance of a  MAC,\n          -- PORT, PATH, or ATTACHMENT Resource\
    \ ID.  Indexing begins\n          -- at 1.  Zero is used to indicate the absence\
    \ of a resource.\n          FddiSMTStationIdType ::= OCTET STRING (SIZE (8))\n\
    \          -- The unique identifier for the FDDI station.  This is a\n       \
    \   -- string of 8 octets, represented as\n          --                      \
    \          X' yy yy xx xx xx xx xx xx'\n          -- with the low order 6 octet\
    \ (xx) from a unique IEEE\n          -- assigned address.  The high order two\
    \ bits of the IEEE\n          -- address, the group address bit and the administration\
    \ bit\n          -- (Universal/Local) bit should both be zero.  The first two\n\
    \          -- octets, the yy octets, are implementor-defined.\n          --\n\
    \          -- The representation of the address portion of the station id\n  \
    \        -- is in the IEEE (ANSI/IEEE P802.1A) canonical notation for\n      \
    \    -- 48 bit addresses.  The canonical form is a 6-octet string\n          --\
    \ where the first octet contains the first 8 bits of the\n          -- address,\
    \ with the I/G(Individual/Group) address bit as the\n          -- least significant\
    \ bit and the  U/L (Universal/Local) bit\n          -- as the next more significant\
    \ bit, and so on.  Note that\n          -- addresses in the ANSI FDDI standard\
    \ SMT frames are\n          -- represented in FDDI MAC order.\n          FddiMACLongAddressType\
    \ ::= OCTET STRING (SIZE (6))\n          -- The representation of long MAC addresses\
    \ as management\n          -- values is in the IEEE (ANSI/IEEE P802.1A) canonical\n\
    \          -- notation for 48 bit addresses.  The canonical form is a\n      \
    \    -- 6-octet string where the first octet contains the first 8\n          --\
    \ bits of the address, with the I/G (Individual/Group)\n          -- address bit\
    \ as the least significant bit and the  U/L\n          -- (Universal/Local) bit\
    \ as the next more significant bit,\n          -- and so on.  Note that the addresses\
    \ in the SMT frames are\n          -- represented in FDDI MAC order.\n       \
    \   -- groups in the FDDI MIB module\n          snmpFddiSMT        OBJECT IDENTIFIER\
    \ ::= { fddi 1 }\n          snmpFddiMAC        OBJECT IDENTIFIER ::= { fddi 2\
    \ }\n          snmpFddiPATH       OBJECT IDENTIFIER ::= { fddi 3 }\n         \
    \ snmpFddiPORT       OBJECT IDENTIFIER ::= { fddi 4 }\n          snmpFddiATTACHMENT\
    \ OBJECT IDENTIFIER ::= { fddi 5 }\n          snmpFddiChipSets    OBJECT IDENTIFIER\
    \ ::= { fddi 6 }\n          -- the SMT group\n          -- Implementation of the\
    \ SMT group is mandatory for all\n          -- systems which implement manageable\
    \ FDDI subsystems.\n          snmpFddiSMTNumber OBJECT-TYPE\n              SYNTAX\
    \  INTEGER (0..65535)\n              ACCESS  read-only\n              STATUS \
    \ mandatory\n              DESCRIPTION\n                      \"The number of\
    \ SMT implementations (regardless of\n                      their current state)\
    \ on this network management\n                      application entity.  The value\
    \ for this variable\n                      must remain constant at least from\
    \ one re-\n                      initialization of the entity's network management\n\
    \                      system to the next re-initialization.\"\n             \
    \ ::= { snmpFddiSMT  1 }\n          -- the SMT table\n          snmpFddiSMTTable\
    \ OBJECT-TYPE\n              SYNTAX  SEQUENCE OF SnmpFddiSMTEntry\n          \
    \    ACCESS  not-accessible\n              STATUS  mandatory\n              DESCRIPTION\n\
    \                      \"A list of SMT entries.  The number of entries is\n  \
    \                    given by  the value of snmpFddiSMTNumber.\"\n           \
    \   ::= { snmpFddiSMT  2 }\n          snmpFddiSMTEntry OBJECT-TYPE\n         \
    \     SYNTAX  SnmpFddiSMTEntry\n              ACCESS  not-accessible\n       \
    \       STATUS  mandatory\n              DESCRIPTION\n                      \"\
    An SMT entry containing information common to a\n                      given SMT.\"\
    \n              INDEX   { snmpFddiSMTIndex }\n              ::= { snmpFddiSMTTable\
    \ 1 }\n          SnmpFddiSMTEntry ::=\n              SEQUENCE {\n            \
    \      snmpFddiSMTIndex\n                      INTEGER,\n                  snmpFddiSMTStationId\n\
    \                      FddiSMTStationIdType,\n                  snmpFddiSMTOpVersionId\n\
    \                      INTEGER,\n                  snmpFddiSMTHiVersionId\n  \
    \                    INTEGER,\n                  snmpFddiSMTLoVersionId\n    \
    \                  INTEGER,\n                  snmpFddiSMTMACCt\n            \
    \          INTEGER,\n                  snmpFddiSMTNonMasterCt\n              \
    \        INTEGER,\n                  snmpFddiSMTMasterCt\n                   \
    \   INTEGER,\n                  snmpFddiSMTPathsAvailable\n                  \
    \    INTEGER,\n                  snmpFddiSMTConfigCapabilities\n             \
    \         INTEGER,\n                  snmpFddiSMTConfigPolicy\n              \
    \        INTEGER,\n                  snmpFddiSMTConnectionPolicy\n           \
    \           INTEGER,\n                  snmpFddiSMTTNotify\n                 \
    \     INTEGER,\n                  snmpFddiSMTStatusReporting\n               \
    \       INTEGER,\n                  snmpFddiSMTECMState\n                    \
    \  INTEGER,\n                  snmpFddiSMTCFState\n                      INTEGER,\n\
    \                  snmpFddiSMTHoldState\n                      INTEGER,\n    \
    \              snmpFddiSMTRemoteDisconnectFlag\n                      INTEGER,\n\
    \                  snmpFddiSMTStationAction\n                      INTEGER\n \
    \             }\n          snmpFddiSMTIndex OBJECT-TYPE\n              SYNTAX\
    \  INTEGER (1..65535)\n              ACCESS  read-only\n              STATUS \
    \ mandatory\n              DESCRIPTION\n                      \"A unique value\
    \ for each SMT.  Its value ranges\n                      between 1 and the value\
    \ of snmpFddiSMTNumber.  The\n                      value for each SMT must remain\
    \ constant at least\n                      from one re-initialization of the entity's\
    \ network\n                      management system to the next re-initialization.\"\
    \n              ::= { snmpFddiSMTEntry 1 }\n          snmpFddiSMTStationId OBJECT-TYPE\n\
    \              SYNTAX  FddiSMTStationIdType -- OCTET STRING (SIZE (8))\n     \
    \         ACCESS  read-only\n              STATUS  mandatory\n              DESCRIPTION\n\
    \                      \"Uniquely identifies an FDDI station.\"\n            \
    \  REFERENCE\n                      \"ANSI { fddiSMT 11 }\"\n              ::=\
    \ { snmpFddiSMTEntry 2 }\n          snmpFddiSMTOpVersionId OBJECT-TYPE\n     \
    \         SYNTAX  INTEGER (1..65535)\n              ACCESS  read-write\n     \
    \         STATUS  mandatory\n              DESCRIPTION\n                     \
    \ \"The version that this station is using for its\n                      operation\
    \ (refer to ANSI 7.1.2.2).\"\n              REFERENCE\n                      \"\
    ANSI { fddiSMT 13 }\"\n              ::= { snmpFddiSMTEntry 3 }\n          snmpFddiSMTHiVersionId\
    \ OBJECT-TYPE\n              SYNTAX  INTEGER (1..65535)\n              ACCESS\
    \  read-only\n              STATUS  mandatory\n              DESCRIPTION\n   \
    \                   \"The highest version of SMT that this station\n         \
    \             supports (refer to ANSI 7.1.2.2).\"\n              REFERENCE\n \
    \                     \"ANSI { fddiSMT 14 }\"\n              ::= { snmpFddiSMTEntry\
    \ 4 }\n          snmpFddiSMTLoVersionId OBJECT-TYPE\n              SYNTAX  INTEGER\
    \ (1..65535)\n              ACCESS  read-only\n              STATUS  mandatory\n\
    \              DESCRIPTION\n                      \"The lowest version of SMT\
    \ that this station\n                      supports (refer to ANSI 7.1.2.2).\"\
    \n              REFERENCE\n                      \"ANSI { fddiSMT 15 }\"\n   \
    \           ::= { snmpFddiSMTEntry 5 }\n          snmpFddiSMTMACCt OBJECT-TYPE\n\
    \              SYNTAX  INTEGER (0..255)\n              ACCESS  read-only\n   \
    \           STATUS  mandatory\n              DESCRIPTION\n                   \
    \   \"The number of MACs in the station or\n                      concentrator.\"\
    \n              REFERENCE\n                      \"ANSI { fddiSMT 21 }\"\n   \
    \           ::= { snmpFddiSMTEntry 6 }\n          snmpFddiSMTNonMasterCt OBJECT-TYPE\n\
    \              SYNTAX  INTEGER (0..2)\n              ACCESS  read-only\n     \
    \         STATUS  mandatory\n              DESCRIPTION\n                     \
    \ \"The number of Non Master PORTs (A, B, or S PORTs)\n                      in\
    \ the station or concentrator.\"\n              REFERENCE\n                  \
    \    \"ANSI { fddiSMT 22 }\"\n              ::= { snmpFddiSMTEntry 7 }\n     \
    \     snmpFddiSMTMasterCt OBJECT-TYPE\n              SYNTAX  INTEGER (0..255)\n\
    \              ACCESS  read-only\n              STATUS  mandatory\n          \
    \    DESCRIPTION\n                      \"The number of Master PORTs in a node.\
    \  If the\n                      node is not a concentrator, the value is zero.\"\
    \n              REFERENCE\n                      \"ANSI { fddiSMT 23 }\"\n   \
    \           ::= { snmpFddiSMTEntry 8 }\n          snmpFddiSMTPathsAvailable OBJECT-TYPE\n\
    \              SYNTAX  INTEGER (0..7)\n              ACCESS  read-only\n     \
    \         STATUS  mandatory\n              DESCRIPTION\n                     \
    \ \"A value that indicates the PATH types available\n                      in\
    \ the station.\n                      The value is a sum.  This value initially\
    \ takes\n                      the value zero, then for each type of PATH that\n\
    \                      this node has available, 2 raised to a power is\n     \
    \                 added to the sum.  The powers are according to the\n       \
    \               following table:\n                               Path   Power\n\
    \                            Primary   0\n                          Secondary\
    \   1\n                              Local   2\n                      For example,\
    \ a station having Primary and Local\n                      PATHs available would\
    \ have a value of 5 (2**0 +\n                      2**2).\"\n              REFERENCE\n\
    \                      \"ANSI { fddiSMT 24 }\"\n              ::= { snmpFddiSMTEntry\
    \ 9 }\n          snmpFddiSMTConfigCapabilities OBJECT-TYPE\n              SYNTAX\
    \  INTEGER (0..3)\n              ACCESS  read-only\n              STATUS  mandatory\n\
    \              DESCRIPTION\n                      \"A value that indicates capabilities\
    \ that are\n                      present in the node.  If 'holdAvailable' is\n\
    \                      present, this indicates support of the optional\n     \
    \                 Hold Function (refer to ANSI SMT 9.4.3.2).  If\n           \
    \           'CF-Wrap-AB' is present, this indicates that the\n               \
    \       WRAP_AB state is forced.\n                      The value is a sum.  This\
    \ value initially takes\n                      the value zero, then for each of\
    \ the configuration\n                      policies currently enforced on the\
    \ node, 2 raised\n                      to a power is added to the sum.  The powers\
    \ are\n                      according to the following table:\n             \
    \                    Policy   Power\n                          holdAvailable \
    \  0\n                             CF-Wrap-AB   1 \"\n              REFERENCE\n\
    \                      \"ANSI { fddiSMT 25 }\"\n              ::= { snmpFddiSMTEntry\
    \ 10 }\n          snmpFddiSMTConfigPolicy OBJECT-TYPE\n              SYNTAX  INTEGER\
    \ (0..3)\n              ACCESS  read-write\n              STATUS  mandatory\n\
    \              DESCRIPTION\n                      \"A value that indicates the\
    \ configuration policies\n                      currently enforced in the node\
    \ (refer to ANSI SMT\n                      9.4.3.2).  The 'configurationHold'\
    \ policy refers\n                      to the Hold flag, and should not be present\
    \ only\n                      if the Hold function is supported.  The 'CF-Wrap-\n\
    \                      AB' policy refers to the CF_Wrap_AB flag.\n           \
    \           The value is a sum.  This value initially takes\n                \
    \      the value zero, then for each of the configuration\n                  \
    \    policies currently enforced on the node, 2 raised\n                     \
    \ to a power is added to the sum.  The powers are\n                      according\
    \ to the following table:\n                                     Policy   Power\n\
    \                          configurationHold   0\n                           \
    \      CF-Wrap-AB   1 \"\n              REFERENCE\n                      \"ANSI\
    \ { fddiSMT 26 }\"\n              ::= { snmpFddiSMTEntry 11 }\n          snmpFddiSMTConnectionPolicy\
    \ OBJECT-TYPE\n              SYNTAX  INTEGER (0..65535)\n              ACCESS\
    \  read-write\n              STATUS  mandatory\n              DESCRIPTION\n  \
    \                    \"A value that indicates the connection policies\n      \
    \                enforced at the station.  A station sets the\n              \
    \        corresponding policy for each of the connection\n                   \
    \   types that it rejects.  The letter designations, X\n                     \
    \ and Y, in the 'rejectX-Y' names have the following\n                      significance:\
    \  X represents the PC-Type of the\n                      local PORT and Y represents\
    \ a PC-Neighbor in the\n                      evaluation of Connection-Policy\
    \ (PC-Type, PC-\n                      Neighbor) that is done to determine the\
    \ setting of\n                      T-Val(3) in the PC-Signaling sequence (refer\
    \ to\n                      ANSI Section 9.6.3).\n                      The value\
    \ is a sum.  This value initially takes\n                      the value zero,\
    \ then for each of the connection\n                      policies currently enforced\
    \ on the node, 2 raised\n                      to a power is added to the sum.\
    \  The powers are\n                      according to the following table:\n \
    \                            Policy   Power\n                          rejectA-A\
    \   0\n                          rejectA-B   1\n                          rejectA-S\
    \   2\n                          rejectA-M   3\n                          rejectB-A\
    \   4\n                          rejectB-B   5\n                          rejectB-S\
    \   6\n                          rejectB-M   7\n                          rejectS-A\
    \   8\n                          rejectS-B   9\n                          rejectS-S\
    \   10\n                          rejectS-M   11\n                          rejectM-A\
    \   12\n                          rejectM-B   13\n                          rejectM-S\
    \   14\n                          rejectM-M   15\n                      Implementors\
    \ should note that the polarity of\n                      these bits is different\
    \ in different places in an\n                      SMT system.  Implementors should\
    \ take appropriate\n                      care.\"\n              REFERENCE\n \
    \                     \"ANSI { fddiSMT 27 }\"\n              ::= { snmpFddiSMTEntry\
    \ 12 }\n          snmpFddiSMTTNotify OBJECT-TYPE\n              SYNTAX  INTEGER\
    \ (2..30)\n              ACCESS  read-write\n              STATUS  mandatory\n\
    \              DESCRIPTION\n                      \"The timer used in the Neighbor\
    \ Notification\n                      protocol, reported in seconds and ranging\
    \ from 2\n                      to 30 seconds (refer to ANSI SMT 8.3.1).\"\n \
    \             REFERENCE\n                      \"ANSI { fddiSMT 29 }\"\n     \
    \         ::= { snmpFddiSMTEntry 13 }\n          snmpFddiSMTStatusReporting OBJECT-TYPE\n\
    \              SYNTAX  INTEGER { true(1), false(2) }\n              ACCESS  read-only\n\
    \              STATUS  mandatory\n              DESCRIPTION\n                \
    \      \"Indicates whether the node implements the Status\n                  \
    \    Reporting Protocol.  This object is included for\n                      compatibility\
    \ with products that were designed\n                      prior to the adoption\
    \ of this standard.\"\n              REFERENCE\n                      \"ANSI {\
    \ fddiSMT 30 }\"\n              ::= { snmpFddiSMTEntry 14 }\n          snmpFddiSMTECMState\
    \ OBJECT-TYPE\n              SYNTAX  INTEGER {\n                          ec0(1),\
    \ -- Out\n                          ec1(2), -- In\n                          ec2(3),\
    \ -- Trace\n                          ec3(4), -- Leave\n                     \
    \     ec4(5), -- Path_Test\n                          ec5(6), -- Insert\n    \
    \                      ec6(7), -- Check\n                          ec7(8)  --\
    \ Deinsert\n                      }\n              ACCESS  read-only\n       \
    \       STATUS  mandatory\n              DESCRIPTION\n                      \"\
    Indicates the current state of the ECM state\n                      machine (refer\
    \ to ANSI SMT 9.5.2).\"\n              REFERENCE\n                      \"ANSI\
    \ { fddiSMT 41 }\"\n              ::= { snmpFddiSMTEntry 15 }\n          snmpFddiSMTCFState\
    \ OBJECT-TYPE\n              SYNTAX  INTEGER {\n                          cf0(1),\
    \ -- Isolated\n                          cf1(2), -- Wrap_S\n                 \
    \         cf2(3), -- Wrap_A\n                          cf3(4), -- Wrap_B\n   \
    \                       cf4(5), -- Wrap_AB\n                          cf5(6) \
    \ -- Thru\n                      }\n              ACCESS  read-only\n        \
    \      STATUS  mandatory\n              DESCRIPTION\n                      \"\
    The attachment configuration for the station or\n                      concentrator\
    \ (refer to ANSI SMT 9.7.4.3).\"\n              REFERENCE\n                  \
    \    \"ANSI { fddiSMT 42 }\"\n              ::= { snmpFddiSMTEntry 16 }\n    \
    \      snmpFddiSMTHoldState OBJECT-TYPE\n              SYNTAX  INTEGER {\n   \
    \                       not-implemented(1), -- holding not implemented\n     \
    \                     not-holding(2),\n                          holding-prm(3),\
    \     -- holding on primary\n                          holding-sec(4)      --\
    \ holding on secondary\n                      }\n              ACCESS  read-only\n\
    \              STATUS  mandatory\n              DESCRIPTION\n                \
    \      \"This value indicates the current state of the\n                     \
    \ Hold function.  The values are determined as\n                      follows:\
    \  'holding-prm' is set if the primary ring\n                      is operational\
    \ and the Recovery Enable Flag is\n                      clear (NOT NO_Flag(primary)\
    \ AND NOT RE_Flag).  is\n                      set if the secondary ring is operational\
    \ and the\n                      Recovery Enable Flag is clear (NOT\n        \
    \              NO_Flag(secondary) AND NOT RE_Flag).  Ref 9.4.3.\n            \
    \          and 10.3.1.  the primary or secondary, i.e., the\n                \
    \      Recovery Enable, RE_Flag, is set.\"\n              REFERENCE\n        \
    \              \"ANSI { fddiSMT 43 }\"\n              ::= { snmpFddiSMTEntry 17\
    \ }\n          snmpFddiSMTRemoteDisconnectFlag OBJECT-TYPE\n              SYNTAX\
    \  INTEGER { true(1), false(2) }\n              ACCESS  read-only\n          \
    \    STATUS  mandatory\n              DESCRIPTION\n                      \"A flag\
    \ indicating that the station was remotely\n                      disconnected\
    \ from the network.  A station requires\n                      a Connect Action\
    \ (SM_CM_CONNECT.request (Connect))\n                      to rejoin and clear\
    \ the flag (refer to ANSI\n                      6.4.5.2).\"\n              REFERENCE\n\
    \                      \"ANSI { fddiSMT 44 }\"\n              ::= { snmpFddiSMTEntry\
    \ 18 }\n          snmpFddiSMTStationAction OBJECT-TYPE\n              SYNTAX \
    \ INTEGER {\n                          other(1),           -- none of the following\n\
    \                          connect(2),\n                          disconnect(3),\n\
    \                          path-Test(4),\n                          self-Test(5)\n\
    \                      }\n              ACCESS  read-write\n              STATUS\
    \  mandatory\n              DESCRIPTION\n                      \"This object,\
    \ when read, always returns a value of\n                      other(1).  The behavior\
    \ of setting this variable\n                      to each of the acceptable values\
    \ is as follows:\n                      Other:          Results in a badValue\
    \ error.\n                      Connect:        Generates an\n               \
    \       SM_CM_Connect.request(connect) signal to CMT\n                      indicating\
    \ that the ECM State machine is to begin\n                      a connection sequence.\
    \  The\n                      fddiSMTRemoteDisconnectFlag is cleared on the\n\
    \                      setting of this variable to 1.  See ANSI Ref\n        \
    \              9.3.1.1.\n                      Disconnect:     Generates an\n\
    \                      SM_CM_Connect.request(disconnect) signal to ECM\n     \
    \                 and sets the fddiSMTRemoteDisconnectFlag.  See\n           \
    \           ANSI Ref 9.3.1.1.\n                      Path-Test:      Initiates\
    \ a station path test.\n                      The Path_Test variable (See ANSI\
    \ Ref. 9.4.1) is\n                      set to Testing.  The results of this action\
    \ are\n                      not specified in this standard.\n               \
    \       Self-Test:      Initiates a station self test.\n                     \
    \ The results of this action are not specified in\n                      this\
    \ standard.\n                      Attempts to set this object to all other values\n\
    \                      results in a badValue error.  Agents may elect to\n   \
    \                   return a badValue error on attempts to set this\n        \
    \              variable to path-Test(4) or self-Test(5).\"\n              REFERENCE\n\
    \                      \"ANSI { fddiSMT 60 }\"\n              ::= { snmpFddiSMTEntry\
    \ 19 }\n          -- the MAC group\n          -- Implementation of the MAC Group\
    \ is mandatory for all\n          -- systems which implement manageable FDDI subsystems.\n\
    \          snmpFddiMACNumber OBJECT-TYPE\n              SYNTAX  INTEGER (0..65535)\n\
    \              ACCESS  read-only\n              STATUS  mandatory\n          \
    \    DESCRIPTION\n                      \"The total number of MAC implementations\
    \ (across\n                      all SMTs) on this network management application\n\
    \                      entity.  The value for this variable must remain\n    \
    \                  constant at least from one re-initialization of\n         \
    \             the entity's network management system to the next\n           \
    \           re-initialization.\"\n              ::= { snmpFddiMAC  1 }\n     \
    \     -- the MAC table\n          snmpFddiMACTable OBJECT-TYPE\n             \
    \ SYNTAX  SEQUENCE OF SnmpFddiMACEntry\n              ACCESS  not-accessible\n\
    \              STATUS  mandatory\n              DESCRIPTION\n                \
    \      \"A list of MAC entries.  The number of entries is\n                  \
    \    given by the value of snmpFddiMACNumber.\"\n              ::= { snmpFddiMAC\
    \  2 }\n          snmpFddiMACEntry OBJECT-TYPE\n              SYNTAX  SnmpFddiMACEntry\n\
    \              ACCESS  not-accessible\n              STATUS  mandatory\n     \
    \         DESCRIPTION\n                      \"A MAC entry containing information\
    \ common to a\n                      given MAC.\"\n              INDEX   { snmpFddiMACSMTIndex,\
    \ snmpFddiMACIndex }\n              ::= { snmpFddiMACTable 1 }\n          SnmpFddiMACEntry\
    \ ::=\n              SEQUENCE {\n                  snmpFddiMACSMTIndex\n     \
    \                     INTEGER,\n                  snmpFddiMACIndex\n         \
    \                 INTEGER,\n                  snmpFddiMACFrameStatusCapabilities\n\
    \                          INTEGER,\n                  snmpFddiMACTMaxGreatestLowerBound\n\
    \                          FddiTime,\n                  snmpFddiMACTVXGreatestLowerBound\n\
    \                          FddiTime,\n                  snmpFddiMACPathsAvailable\n\
    \                          INTEGER,\n                  snmpFddiMACCurrentPath\n\
    \                          INTEGER,\n                  snmpFddiMACUpstreamNbr\n\
    \                          FddiMACLongAddressType,\n                  snmpFddiMACOldUpstreamNbr\n\
    \                          FddiMACLongAddressType,\n                  snmpFddiMACDupAddrTest\n\
    \                          INTEGER,\n                  snmpFddiMACPathsRequested\n\
    \                          INTEGER,\n                  snmpFddiMACDownstreamPORTType\n\
    \                          INTEGER,\n                  snmpFddiMACSMTAddress\n\
    \                          FddiMACLongAddressType,\n                  snmpFddiMACTReq\n\
    \                          FddiTime,\n                  snmpFddiMACTNeg\n    \
    \                      FddiTime,\n                  snmpFddiMACTMax\n        \
    \                  FddiTime,\n                  snmpFddiMACTvxValue\n        \
    \                  FddiTime,\n                  snmpFddiMACTMin\n            \
    \              FddiTime,\n                  snmpFddiMACCurrentFrameStatus\n  \
    \                        INTEGER,\n                  snmpFddiMACFrameCts\n   \
    \                       Counter,\n                  snmpFddiMACErrorCts\n    \
    \                      Counter,\n                  snmpFddiMACLostCts\n      \
    \                    Counter,\n                  snmpFddiMACFrameErrorThreshold\n\
    \                          INTEGER,\n                  snmpFddiMACFrameErrorRatio\n\
    \                          INTEGER,\n                  snmpFddiMACRMTState\n \
    \                         INTEGER,\n                  snmpFddiMACDaFlag\n    \
    \                      INTEGER,\n                  snmpFddiMACUnaDaFlag\n    \
    \                      INTEGER,\n                  snmpFddiMACFrameCondition\n\
    \                          INTEGER,\n                  snmpFddiMACChipSet\n  \
    \                        OBJECT IDENTIFIER,\n                  snmpFddiMACAction\n\
    \                          INTEGER\n              }\n          snmpFddiMACSMTIndex\
    \ OBJECT-TYPE\n              SYNTAX  INTEGER (1..65535)\n              ACCESS\
    \  read-only\n              STATUS  mandatory\n              DESCRIPTION\n   \
    \                   \"The value of the SMT index associated with this\n      \
    \                MAC.\"\n              ::= { snmpFddiMACEntry 1 }\n          snmpFddiMACIndex\
    \ OBJECT-TYPE\n              SYNTAX  INTEGER (1..65535)\n              ACCESS\
    \  read-only\n              STATUS  mandatory\n              DESCRIPTION\n   \
    \                   \"A unique value for each MAC on the managed\n           \
    \           entity.  The MAC identified by a particular value\n              \
    \        of this index is that identified by the same value\n                \
    \      of an ifIndex object instance.  That is, if a MAC\n                   \
    \   is associated with the interface whose value of\n                      ifIndex\
    \ in the Internet-Standard MIB is equal to\n                      5, then the\
    \ value of snmpFddiMACIndex shall also\n                      equal 5.  The value\
    \ for each MAC must remain\n                      constant at least from one re-initialization\
    \ of\n                      the entity's network management system to the next\n\
    \                      re-initialization.\"\n              ::= { snmpFddiMACEntry\
    \ 2 }\n          snmpFddiMACFrameStatusCapabilities OBJECT-TYPE\n            \
    \  SYNTAX  INTEGER (0..1799)\n              ACCESS  read-only\n              STATUS\
    \  mandatory\n              DESCRIPTION\n                      \"A value that\
    \ indicates the MAC's bridge and end-\n                      station capabilities\
    \ for operating in a bridged\n                      FDDI network.\n          \
    \            The value is a sum.  This value initially takes\n               \
    \       the value zero, then for each capability present,\n                  \
    \    2 raised to a power is added to the sum.  The\n                      powers\
    \ are according to the following table:\n                           Capability\
    \    Power\n                           FSC-Type0    0\n                      \
    \     -- MAC repeats A/C indicators as received on\n                         \
    \  -- copying with the intent to forward.\n                           FSC-Type1\
    \    1\n                           -- MAC sets C but not A on copying for\n  \
    \                         -- forwarding.\n                           FSC-Type2\
    \    2\n                           -- MAC resets C and sets A on C set and\n \
    \                          -- A reset if the frame is not copied and the\n   \
    \                        -- frame was addressed to this MAC\n                \
    \           FSC-Type0-programmable    8\n                           -- Type0 capability\
    \ is programmable\n                           FSC-Type1-programmable    9\n  \
    \                         -- Type1 capability is programmable\n              \
    \             FSC-Type2-programmable   10\n                           -- Type2\
    \ capability is programmable\n                      \"\n              REFERENCE\n\
    \                      \"ANSI { fddiMAC 11 }\"\n              ::= { snmpFddiMACEntry\
    \ 3 }\n          snmpFddiMACTMaxGreatestLowerBound OBJECT-TYPE\n             \
    \ SYNTAX  FddiTime\n              ACCESS  read-write\n              STATUS  mandatory\n\
    \              DESCRIPTION\n                      \"The greatest lower bound of\
    \ T_Max supported for\n                      this MAC.\"\n              REFERENCE\n\
    \                      \"ANSI { fddiMAC 13 }\"\n              ::= { snmpFddiMACEntry\
    \ 4 }\n          snmpFddiMACTVXGreatestLowerBound OBJECT-TYPE\n              SYNTAX\
    \  FddiTime\n              ACCESS  read-only\n              STATUS  mandatory\n\
    \              DESCRIPTION\n                      \"The greatest lower bound of\
    \ TVX supported for\n                      this MAC.\"\n              REFERENCE\n\
    \                      \"ANSI { fddiMAC 14 }\"\n              ::= { snmpFddiMACEntry\
    \ 5 }\n          snmpFddiMACPathsAvailable OBJECT-TYPE\n              SYNTAX \
    \ INTEGER (0..7)\n              ACCESS  read-only\n              STATUS  mandatory\n\
    \              DESCRIPTION\n                      \"A value that indicates the\
    \ PATH types available\n                      for this MAC.\n                \
    \      The value is a sum.  This value initially takes\n                     \
    \ the value zero, then for each type of PATH that\n                      this\
    \ MAC has available, 2 raised to a power is\n                      added to the\
    \ sum.  The powers are according to the\n                      following table:\n\
    \                               Path   Power\n                            Primary\
    \   0\n                          Secondary   1\n                             \
    \ Local   2 \"\n              REFERENCE\n                      \"ANSI { fddiMAC\
    \ 22 }\"\n              ::= { snmpFddiMACEntry 6 }\n          snmpFddiMACCurrentPath\
    \ OBJECT-TYPE\n              SYNTAX  INTEGER {\n                          unknown(1),\n\
    \                          primary(2),\n                          secondary(4),\n\
    \                          local(8),\n                          isolated(16)\n\
    \                      }\n              ACCESS  read-only\n              STATUS\
    \  mandatory\n              DESCRIPTION\n                      \"Indicates the\
    \ association of the MAC with a\n                      station PATH.\"\n     \
    \         REFERENCE\n                      \"ANSI { fddiMAC 23 }\"\n         \
    \     ::= { snmpFddiMACEntry 7 }\n          snmpFddiMACUpstreamNbr OBJECT-TYPE\n\
    \              SYNTAX  FddiMACLongAddressType -- OCTET STRING (SIZE (6))\n   \
    \           ACCESS  read-only\n              STATUS  mandatory\n             \
    \ DESCRIPTION\n                      \"The MAC's upstream neighbor's long individual\
    \ MAC\n                      address.  It may be determined by the Neighbor\n\
    \                      Information Frame protocol (refer to ANSI SMT\n       \
    \               7.2.1).  The value shall be reported as '00 00 00\n          \
    \            00 00 00' if it is unknown.\"\n              REFERENCE\n        \
    \              \"ANSI { fddiMAC 24 }\"\n              ::= { snmpFddiMACEntry 8\
    \ }\n          snmpFddiMACOldUpstreamNbr OBJECT-TYPE\n              SYNTAX  FddiMACLongAddressType\
    \ -- OCTET STRING (SIZE (6))\n              ACCESS  read-only\n              STATUS\
    \  mandatory\n              DESCRIPTION\n                      \"The previous\
    \ value of the MAC's upstream\n                      neighbor's long individual\
    \ MAC address.  It may be\n                      determined by the Neighbor Information\
    \ Frame\n                      protocol (refer to ANSI SMT 7.2.1).  The value\n\
    \                      shall be reported as '00 00 00 00 00 00' if it is\n   \
    \                   unknown.\"\n              REFERENCE\n                    \
    \  \"ANSI { fddiMAC 26 }\"\n              ::= { snmpFddiMACEntry 9 }\n       \
    \   snmpFddiMACDupAddrTest OBJECT-TYPE\n              SYNTAX  INTEGER { none(1),\
    \ pass(2), fail(3) }\n              ACCESS  read-only\n              STATUS  mandatory\n\
    \              DESCRIPTION\n                      \"The Duplicate Address Test\
    \ flag, Dup_Addr_Test\n                      (refer to ANSI 8.3.1).\"\n      \
    \        REFERENCE\n                      \"ANSI { fddiMAC 29 }\"\n          \
    \    ::= { snmpFddiMACEntry 10 }\n          snmpFddiMACPathsRequested OBJECT-TYPE\n\
    \              SYNTAX  INTEGER\n              ACCESS  read-write\n           \
    \   STATUS  mandatory\n              DESCRIPTION\n                      \"A value\
    \ that indicates PATH(s) desired for this\n                      MAC.\n      \
    \                The value is a sum which represents the individual\n        \
    \              PATHs that are desired.  This value initially\n               \
    \       takes the value zero, then for each type of PATH\n                   \
    \   that this node is, 2 raised to a power is added to\n                     \
    \ the sum.  The powers are according to the\n                      following table:\n\
    \                               Path   Power\n                            Primary\
    \   0\n                          Secondary   1\n                             \
    \ Local   2\n                           Isolated   3\n                      The\
    \ precedence order is primary, secondary, local,\n                      and then\
    \ isolated if multiple PATHs are desired\n                      are set.\"\n \
    \             REFERENCE\n                      \"ANSI { fddiMAC 32 }\"\n     \
    \         ::= { snmpFddiMACEntry 11 }\n          snmpFddiMACDownstreamPORTType\
    \ OBJECT-TYPE\n              SYNTAX  INTEGER { a(1), b(2), s(3), m(4), unknown(5)\
    \ }\n              ACCESS  read-only\n              STATUS  mandatory\n      \
    \        DESCRIPTION\n                      \"Indicates the PC-Type of the first\
    \ port that is\n                      downstream of this MAC (the exit port).\"\
    \n              REFERENCE\n                      \"ANSI { fddiMAC 33 }\"\n   \
    \           ::= { snmpFddiMACEntry 12 }\n          snmpFddiMACSMTAddress OBJECT-TYPE\n\
    \              SYNTAX  FddiMACLongAddressType -- OCTET STRING (SIZE (6))\n   \
    \           ACCESS  read-only\n              STATUS  mandatory\n             \
    \ DESCRIPTION\n                      \"The 48 bit individual address of the MAC\
    \ used for\n                      SMT frames.\"\n              REFERENCE\n   \
    \                   \"ANSI { fddiMAC 41 }\"\n              ::= { snmpFddiMACEntry\
    \ 13 }\n          snmpFddiMACTReq OBJECT-TYPE\n              SYNTAX  FddiTime\n\
    \              ACCESS  read-write\n              STATUS  mandatory\n         \
    \     DESCRIPTION\n                      \"The value of T-Req (refer to ANSI MAC\
    \ 2.2.1 and\n                      ANSI MAC 7.3.5.2).\"\n              REFERENCE\n\
    \                      \"ANSI { fddiMAC 51 }\"\n              ::= { snmpFddiMACEntry\
    \ 14 }\n          snmpFddiMACTNeg OBJECT-TYPE\n              SYNTAX  FddiTime\n\
    \              ACCESS  read-only\n              STATUS  mandatory\n          \
    \    DESCRIPTION\n                      \"The value of T-Neg (refer to ANSI MAC\
    \ 2.2.1 and\n                      ANSI MAC 7.3.5.2).\"\n              REFERENCE\n\
    \                      \"ANSI { fddiMAC 52 }\"\n              ::= { snmpFddiMACEntry\
    \ 15 }\n          snmpFddiMACTMax OBJECT-TYPE\n              SYNTAX  FddiTime\n\
    \              ACCESS  read-only\n              STATUS  mandatory\n          \
    \    DESCRIPTION\n                      \"The value of T-Max (refer to ANSI MAC\
    \ 2.2.1 and\n                      ANSI MAC 7.3.5.2).\"\n              REFERENCE\n\
    \                      \"ANSI { fddiMAC 53 }\"\n              ::= { snmpFddiMACEntry\
    \ 16 }\n          snmpFddiMACTvxValue OBJECT-TYPE\n              SYNTAX  FddiTime\n\
    \              ACCESS  read-only\n              STATUS  mandatory\n          \
    \    DESCRIPTION\n                      \"The value of TvxValue (refer to ANSI\
    \ MAC 2.2.1\n                      and ANSI MAC 7.3.5.2).\"\n              REFERENCE\n\
    \                      \"ANSI { fddiMAC 54 }\"\n              ::= { snmpFddiMACEntry\
    \ 17 }\n          snmpFddiMACTMin OBJECT-TYPE\n              SYNTAX  FddiTime\n\
    \              ACCESS  read-only\n              STATUS  mandatory\n          \
    \    DESCRIPTION\n                      \"The value of T-Min (refer to ANSI MAC\
    \ 2.2.1 and\n                      ANSI MAC 7.3.5.2).\"\n              REFERENCE\n\
    \                      \"ANSI { fddiMAC 55 }\"\n              ::= { snmpFddiMACEntry\
    \ 18 }\n          snmpFddiMACCurrentFrameStatus OBJECT-TYPE\n              SYNTAX\
    \  INTEGER (0..7)\n              ACCESS  read-write\n              STATUS  mandatory\n\
    \              DESCRIPTION\n                      \"A value that indicates the\
    \ MAC's operational\n                      frame status setting functionality.\n\
    \                      The value is a sum.  This value initially takes\n     \
    \                 the value zero, then for each functionality\n              \
    \        present, 2 raised to a power is added to the sum.\n                 \
    \     The powers are according to the following table:\n                     \
    \     Functionality   Power\n                              FSC-Type0   0\n   \
    \                           -- MAC repeats A/C indicators as received\n      \
    \                        FSC-Type1   1\n                              -- MAC sets\
    \ C but not A on copying for\n                              -- forwarding\n  \
    \                            FSC-Type2   2\n                              -- MAC\
    \ resets C and sets A on C set and A\n                              -- reset if\
    \ frame is not copied\n                      \"\n              REFERENCE\n   \
    \                   \"ANSI { fddiMAC 63 }\"\n              ::= { snmpFddiMACEntry\
    \ 19 }\n          snmpFddiMACFrameCts OBJECT-TYPE\n              SYNTAX  Counter\n\
    \              ACCESS  read-only\n              STATUS  mandatory\n          \
    \    DESCRIPTION\n                      \"Frame_Ct (refer to ANSI MAC 2.2.1).\"\
    \n              REFERENCE\n                      \"ANSI { fddiMAC 71 }\"\n   \
    \           ::= { snmpFddiMACEntry 20 }\n          snmpFddiMACErrorCts OBJECT-TYPE\n\
    \              SYNTAX  Counter\n              ACCESS  read-only\n            \
    \  STATUS  mandatory\n              DESCRIPTION\n                      \"Error_Ct\
    \ (refer to ANSI MAC 2.2.1).\"\n              REFERENCE\n                    \
    \  \"ANSI { fddiMAC 81 }\"\n              ::= { snmpFddiMACEntry 21 }\n      \
    \    snmpFddiMACLostCts OBJECT-TYPE\n              SYNTAX  Counter\n         \
    \     ACCESS  read-only\n              STATUS  mandatory\n              DESCRIPTION\n\
    \                      \"Lost_Ct (refer to ANSI MAC 2.2.1).\"\n              REFERENCE\n\
    \                      \"ANSI { fddiMAC 82 }\"\n              ::= { snmpFddiMACEntry\
    \ 22 }\n          snmpFddiMACFrameErrorThreshold OBJECT-TYPE\n              SYNTAX\
    \  INTEGER (1..65535)\n              ACCESS  read-only\n              STATUS \
    \ mandatory\n              DESCRIPTION\n                      \"A threshold for\
    \ determining when a MAC Condition\n                      report should be generated.\
    \  The condition is true\n                      when the ratio, ((delta snmpFddiMACLostCt\
    \ + delta\n                      snmpFddiMACErrorCt) / (delta snmpFddiMACFrameCt\
    \ +\n                      delta snmpFddiMACLostCt)) x 2**16. exceeds the\n  \
    \                    threshold.  It is used to determine when a station\n    \
    \                  has an unacceptable frame error threshold.  The\n         \
    \             sampling algorithm is implementation dependent.\n              \
    \        Any attempt to set this variable to a value of\n                    \
    \  less than one shall result in a badValue error.\n                      Those\
    \ who are familiar with the SNMP management\n                      framework will\
    \ recognize that thresholds are not\n                      in keeping with the\
    \ SNMP philosophy.  However,\n                      this variable is supported\
    \ by underlying SMT\n                      implementations already and maintaining\
    \ this\n                      threshold should not pose an undue additional\n\
    \                      burden on SNMP agent implementors.\"\n              REFERENCE\n\
    \                      \"ANSI { fddiMAC 95 }\"\n              ::= { snmpFddiMACEntry\
    \ 23 }\n          snmpFddiMACFrameErrorRatio OBJECT-TYPE\n              SYNTAX\
    \  INTEGER (1..65535)\n              ACCESS  read-only\n              STATUS \
    \ mandatory\n              DESCRIPTION\n                      \"This attribute\
    \ is the actual ratio, ((delta\n                      snmpFddiMACLostCt + delta\
    \ snmpFddiMACErrorCt) /\n                      (delta snmpFddiMACFrameCt + delta\n\
    \                      snmpFddiMACLostCt)) x 2**16.\"\n              REFERENCE\n\
    \                      \"ANSI { fddiMAC 96 }\"\n              ::= { snmpFddiMACEntry\
    \ 24 }\n          snmpFddiMACRMTState OBJECT-TYPE\n              SYNTAX  INTEGER\
    \ {\n                          rm0(1), -- Isolated\n                         \
    \ rm1(2), -- Non_Op\n                          rm2(3), -- Ring_Op\n          \
    \                rm3(4), -- Detect\n                          rm4(5), -- Non_Op_Dup\n\
    \                          rm5(6), -- Ring_Op_Dup\n                          rm6(7),\
    \ -- Directed\n                          rm7(8)  -- Trace\n                  \
    \    }\n              ACCESS  read-only\n              STATUS  mandatory\n   \
    \           DESCRIPTION\n                      \"Indicates the current state of\
    \ the Ring\n                      Management state machine (refer to ANSI Section\n\
    \                      10).\"\n              REFERENCE\n                     \
    \ \"ANSI { fddiMAC 111 }\"\n              ::= { snmpFddiMACEntry 25 }\n      \
    \    snmpFddiMACDaFlag OBJECT-TYPE\n              SYNTAX  INTEGER { true(1), false(2)\
    \ }\n              ACCESS  read-only\n              STATUS  mandatory\n      \
    \        DESCRIPTION\n                      \"The RMT flag Duplicate Address Flag,\
    \ DA_Flag\n                      (refer to ANSI 10.3.1.2).\"\n              REFERENCE\n\
    \                      \"ANSI { fddiMAC 112 }\"\n              ::= { snmpFddiMACEntry\
    \ 26 }\n          snmpFddiMACUnaDaFlag OBJECT-TYPE\n              SYNTAX  INTEGER\
    \ { true(1), false(2) }\n              ACCESS  read-only\n              STATUS\
    \  mandatory\n              DESCRIPTION\n                      \"A flag set when\
    \ the upstream neighbor reports a\n                      duplicate address condition.\
    \  Reset when the\n                      condition clears.\"\n              REFERENCE\n\
    \                      \"ANSI { fddiMAC 113 }\"\n              ::= { snmpFddiMACEntry\
    \ 27 }\n          snmpFddiMACFrameCondition OBJECT-TYPE\n              SYNTAX\
    \  INTEGER { true(1), false(2) }\n              ACCESS  read-only\n          \
    \    STATUS  mandatory\n              DESCRIPTION\n                      \"Indicates\
    \ the MAC Condition is active when set.\n                      Cleared when the\
    \ condition clears and on power\n                      up.\"\n              REFERENCE\n\
    \                      \"ANSI { fddiMAC 114 }\"\n              ::= { snmpFddiMACEntry\
    \ 28 }\n          snmpFddiMACChipSet OBJECT-TYPE\n              SYNTAX  OBJECT\
    \ IDENTIFIER\n              ACCESS  read-only\n              STATUS  mandatory\n\
    \              DESCRIPTION\n                      \"This object identifies the\
    \ hardware chip(s) which\n                      is (are) principally responsible\
    \ for the\n                      implementation of the MAC function.  A few OBJECT\n\
    \                      IDENTIFIERS are identified elsewhere in this memo.\n  \
    \                    For those The assignment of additional OBJECT\n         \
    \             IDENTIFIERs to various types of hardware chip sets\n           \
    \           is managed by the IANA.  For example, vendors\n                  \
    \    whose chip sets are not defined in this memo may\n                      request\
    \ a number from the Internet Assigned\n                      Numbers Authority\
    \ (IANA) which indicates the\n                      assignment of a enterprise\
    \ specific subtree which,\n                      among other things, may be used\
    \ to allocate OBJECT\n                      IDENTIFIER assignments for that enterprise's\
    \ chip\n                      sets.  Similarly, in the absence of an\n       \
    \               appropriately assigned OBJECT IDENTIFIER in this\n           \
    \           memo or in an enterprise specific subtree of a\n                 \
    \     chip vendor, a board or system vendor can request\n                    \
    \  a number for a subtree from the IANA and make an\n                      appropriate\
    \ assignment.  It is desired that,\n                      whenever possible, the\
    \ same OBJECT IDENTIFIER be\n                      used for all chips of a given\
    \ type.  Consequently,\n                      the assignment made in this memo\
    \ for a chip, if\n                      any, should be used in preference to any\
    \ other\n                      assignment and the assignment made by the chip\n\
    \                      manufacturer, if any, should be used in preference\n  \
    \                    to assignments made by users of those chips.  If\n      \
    \                the hardware chip set is unknown, the object\n              \
    \        identifier\n                      unknownChipSet OBJECT IDENTIFIER ::=\
    \ { 0 0 }\n                      is returned.  Note that unknownChipSet is a\n\
    \                      syntactically valid object identifier, and any\n      \
    \                conformant implementation of ASN.1 and the BER\n            \
    \          must be able to generate and recognize this\n                     \
    \ value.\"\n              ::= { snmpFddiMACEntry 29 }\n          snmpFddiMACAction\
    \ OBJECT-TYPE\n              SYNTAX  INTEGER {\n                          other(1),\
    \           -- none of the following\n                          enableLLCService(2),\n\
    \                          disableLLCService(3),\n                          connectMAC(4),\n\
    \                          disconnectMAC(5)\n                      }\n       \
    \       ACCESS  read-write\n              STATUS  mandatory\n              DESCRIPTION\n\
    \                      \"This object, when read, always returns a value of\n \
    \                     other(1).  The behavior of setting this variable\n     \
    \                 to each of the acceptable values is as follows:\n          \
    \            Other:                  Results in a badValue\n                 \
    \                             error.\n                      enableLLCService:\
    \       enables MAC service to\n                                             \
    \ higher layers.\n                      disableLLCService:      disables MAC service\
    \ to\n                                              higher layers.\n         \
    \             connectMAC:             connect this MAC in\n                  \
    \                            station.\n                      disconnectMAC:  \
    \        disconnect this MAC in\n                                            \
    \  station.\n                      Attempts to set this object to all other values\n\
    \                      results in a badValue error.\"\n              REFERENCE\n\
    \                      \"ANSI { fddiMAC 130 }\"\n              ::= { snmpFddiMACEntry\
    \ 30 }\n          -- the PATH group\n          -- the PATH group is empty for\
    \ now and shall remain so until\n          -- the ANSI community sorts out their\
    \ PATH group\n          -- the PORT group\n          -- Implementation of the\
    \ PORT group is mandatory for all\n          -- systems which implement manageable\
    \ FDDI subsystems.\n          snmpFddiPORTNumber OBJECT-TYPE\n              SYNTAX\
    \  INTEGER (0..65535)\n              ACCESS  read-only\n              STATUS \
    \ mandatory\n              DESCRIPTION\n                      \"The total number\
    \ of PORT implementations (across\n                      all SMTs) on this network\
    \ management application\n                      entity.  The value for this variable\
    \ must remain\n                      constant at least from one re-initialization\
    \ of\n                      the entity's network management system to the next\n\
    \                      re-initialization.\"\n              ::= { snmpFddiPORT\
    \  1 }\n          -- the PORT table\n          snmpFddiPORTTable OBJECT-TYPE\n\
    \              SYNTAX  SEQUENCE OF SnmpFddiPORTEntry\n              ACCESS  not-accessible\n\
    \              STATUS  mandatory\n              DESCRIPTION\n                \
    \      \"A list of PORT entries.  The number of entries is\n                 \
    \     given by the value of snmpFddiPORTNumber.\"\n              ::= { snmpFddiPORT\
    \  2 }\n          snmpFddiPORTEntry OBJECT-TYPE\n              SYNTAX  SnmpFddiPORTEntry\n\
    \              ACCESS  not-accessible\n              STATUS  mandatory\n     \
    \         DESCRIPTION\n                      \"A PORT entry containing information\
    \ common to a\n                      given PORT.\"\n              INDEX   { snmpFddiPORTSMTIndex,\
    \ snmpFddiPORTIndex }\n              ::= { snmpFddiPORTTable 1 }\n          SnmpFddiPORTEntry\
    \ ::=\n              SEQUENCE {\n                  snmpFddiPORTSMTIndex\n    \
    \                      INTEGER,\n                  snmpFddiPORTIndex\n       \
    \                   INTEGER,\n                  snmpFddiPORTPCType\n         \
    \                 INTEGER,\n                  snmpFddiPORTPCNeighbor\n       \
    \                   INTEGER,\n                  snmpFddiPORTConnectionPolicies\n\
    \                          INTEGER,\n                  snmpFddiPORTRemoteMACIndicated\n\
    \                          INTEGER,\n                  snmpFddiPORTCEState\n \
    \                         INTEGER,\n                  snmpFddiPORTPathsRequested\n\
    \                          INTEGER,\n                  snmpFddiPORTMACPlacement\n\
    \                          FddiResourceId,\n                  snmpFddiPORTAvailablePaths\n\
    \                          INTEGER,\n                  snmpFddiPORTMACLoopTime\n\
    \                          FddiTime,\n                  snmpFddiPORTTBMax\n  \
    \                        FddiTime,\n                  snmpFddiPORTBSFlag\n   \
    \                       INTEGER,\n                  snmpFddiPORTLCTFailCts\n \
    \                         Counter,\n                  snmpFddiPORTLerEstimate\n\
    \                          INTEGER,\n                  snmpFddiPORTLemRejectCts\n\
    \                          Counter,\n                  snmpFddiPORTLemCts\n  \
    \                        Counter,\n                  snmpFddiPORTLerCutoff\n \
    \                         INTEGER,\n                  snmpFddiPORTLerAlarm\n \
    \                         INTEGER,\n                  snmpFddiPORTConnectState\n\
    \                          INTEGER,\n                  snmpFddiPORTPCMState\n\
    \                          INTEGER,\n                  snmpFddiPORTPCWithhold\n\
    \                          INTEGER,\n                  snmpFddiPORTLerCondition\n\
    \                          INTEGER,\n                  snmpFddiPORTChipSet\n \
    \                         OBJECT IDENTIFIER,\n                  snmpFddiPORTAction\n\
    \                          INTEGER\n              }\n          snmpFddiPORTSMTIndex\
    \ OBJECT-TYPE\n              SYNTAX  INTEGER (1..65535)\n              ACCESS\
    \  read-only\n              STATUS  mandatory\n              DESCRIPTION\n   \
    \                   \"The value of the SMT index associated with this\n      \
    \                PORT.\"\n              ::= { snmpFddiPORTEntry 1 }\n        \
    \  snmpFddiPORTIndex OBJECT-TYPE\n              SYNTAX  INTEGER (1..65535)\n \
    \             ACCESS  read-only\n              STATUS  mandatory\n           \
    \   DESCRIPTION\n                      \"A unique value for each PORT within a\
    \ given SMT.\n                      Its value ranges between 1 and the sum of\
    \ the\n                      values of snmpFddiSMTNonMasterCt\n              \
    \        { snmpFddiSMTEntry 6 } and snmpFddiSMTMasterCt\n                    \
    \  { snmpFddiSMTEntry 7 } on the given SMT.  The\n                      value\
    \ for each PORT must remain constant at least\n                      from one\
    \ re-initialization of the entity's network\n                      management\
    \ system to the next re-initialization.\"\n              ::= { snmpFddiPORTEntry\
    \ 2 }\n          snmpFddiPORTPCType OBJECT-TYPE\n              SYNTAX  INTEGER\
    \ { a(1), b(2), s(3), m(4) }\n              ACCESS  read-only\n              STATUS\
    \  mandatory\n              DESCRIPTION\n                      \"PC_Type (refer\
    \ to ANSI SMT 9.2.2 and ANSI SMT\n                      9.6.3.2).\"\n        \
    \      REFERENCE\n                      \"ANSI { fddiPORT 12 }\"\n           \
    \   ::= { snmpFddiPORTEntry 3 }\n          snmpFddiPORTPCNeighbor OBJECT-TYPE\n\
    \              SYNTAX  INTEGER { a(1), b(2), s(3), m(4), unknown(5) }\n      \
    \        ACCESS  read-only\n              STATUS  mandatory\n              DESCRIPTION\n\
    \                      \"The type (PC_Neighbor) of the remote PORT that is\n \
    \                     determined in PC_Signaling in R_Val (1,2) (refer\n     \
    \                 to ANSI SMT 9.6.3.2).\"\n              REFERENCE\n         \
    \             \"ANSI { fddiPORT 13 }\"\n              ::= { snmpFddiPORTEntry\
    \ 4 }\n          snmpFddiPORTConnectionPolicies OBJECT-TYPE\n              SYNTAX\
    \  INTEGER (0..7)\n              ACCESS  read-write\n              STATUS  mandatory\n\
    \              DESCRIPTION\n                      \"A value that indicates the\
    \ node's PORT policies.\n                      Pc-MAC-LCT, Pc-MAC-Loop, and Pc-MAC-Placement\n\
    \                      indicate how the respective PC Signaling\n            \
    \          Capability flags should  be set (refer to ANSI SMT\n              \
    \        9.4.3.2).\n                      The value is a sum.  This value initially\
    \ takes\n                      the value zero, then for each PORT policy, 2\n\
    \                      raised to a power is added to the sum.  The powers\n  \
    \                    are according to the following table:\n                 \
    \                   Policy   Power\n                                Pc-MAC-LCT\
    \   0\n                               Pc-MAC-Loop   1\n                      \
    \    Pc-MAC-Placement   2 \"\n              REFERENCE\n                      \"\
    ANSI { fddiPORT 14 }\"\n              ::= { snmpFddiPORTEntry 5 }\n          snmpFddiPORTRemoteMACIndicated\
    \ OBJECT-TYPE\n              SYNTAX  INTEGER { true(1), false(2) }\n         \
    \     ACCESS  read-only\n              STATUS  mandatory\n              DESCRIPTION\n\
    \                      \"The indication, in PC-Signaling that the remote\n   \
    \                   partner intends to place a MAC in the output token\n     \
    \                 PATH of this PORT.  Signaled as R_Val (9) (refer\n         \
    \             to ANSI SMT 9.6.3.2).\"\n              REFERENCE\n             \
    \         \"ANSI { fddiPORT 15 }\"\n              ::= { snmpFddiPORTEntry 6 }\n\
    \          snmpFddiPORTCEState OBJECT-TYPE\n              SYNTAX  INTEGER {\n\
    \                          ce0(1), -- Isolated\n                          ce1(2),\
    \ -- Insert_P\n                          ce2(3), -- Insert_S\n               \
    \           ce3(4), -- Insert_X\n                          ce4(5)  -- Local\n\
    \                      }\n              ACCESS  read-only\n              STATUS\
    \  mandatory\n              DESCRIPTION\n                      \"Indicates the\
    \ current state of PORT's\n                      Configuration Element (CE) (refer\
    \ to ANSI 9.7.5).\n                      Note that this value represents the Current\
    \ Path\n                      information for this PORT.\"\n              REFERENCE\n\
    \                      \"ANSI { fddiPORT 16 }\"\n              ::= { snmpFddiPORTEntry\
    \ 7 }\n          snmpFddiPORTPathsRequested OBJECT-TYPE\n              SYNTAX\
    \  INTEGER (0..15)\n              ACCESS  read-write\n              STATUS  mandatory\n\
    \              DESCRIPTION\n                      \"A value that indicates the\
    \ desired association(s)\n                      of the port with a station PATH.\
    \  The 'Primary'\n                      Path is the default.  The value of 'Secondary'\
    \ is\n                      only meaningful for S (slave) or M (master) PORT\n\
    \                      PC-Types.  This value effects the setting of the\n    \
    \                  CF_Insert_S, and CF_Insert_L flags (refer to ANSI\n       \
    \               Section 9.4.3).  If the 'Primary' PATH is present,\n         \
    \             then the Primary PATH (the default PATH) is\n                  \
    \    selected.  If the 'Secondary' PATH is present and\n                     \
    \ the 'Primary' PATH is not present, then the\n                      CF_Insert_S\
    \ flag is set.  If the 'Local' PATH is\n                      sent and neither\
    \ the 'Primary' or 'Secondary'\n                      PATHs are sent, then the\
    \ CF_Insert_L flag is set.\n                      The value is a sum.  This value\
    \ initially takes\n                      the value zero, then for each type of\
    \ PATH\n                      desired, 2 raised to a power is added to the sum.\n\
    \                      The powers are according to the following table:\n    \
    \                           Path   Power\n                            Primary\
    \   0\n                          Secondary   1\n                             \
    \ Local   2\n                           Isolated   3 \"\n              REFERENCE\n\
    \                      \"ANSI { fddiPORT 17 }\"\n              ::= { snmpFddiPORTEntry\
    \ 8 }\n          snmpFddiPORTMACPlacement OBJECT-TYPE\n              SYNTAX  FddiResourceId\
    \ -- INTEGER (0..65535)\n              ACCESS  read-only\n              STATUS\
    \  mandatory\n              DESCRIPTION\n                      \"Indicates the\
    \ upstream MAC, if any, that is\n                      associated with the PORT.\
    \  The value shall be zero\n                      if there is no MAC associated\
    \ with the PORT.\n                      Otherwise, the value shall be equal to\
    \ the value\n                      of snmpFddiMACIndex associated with the MAC.\"\
    \n              REFERENCE\n                      \"ANSI { fddiPORT 18 }\"\n  \
    \            ::= { snmpFddiPORTEntry 9 }\n          snmpFddiPORTAvailablePaths\
    \ OBJECT-TYPE\n              SYNTAX  INTEGER (0..7)\n              ACCESS  read-only\n\
    \              STATUS  mandatory\n              DESCRIPTION\n                \
    \      \"A value that indicates the PATH types available\n                   \
    \   for M and S PORTs.\n                      The value is a sum.  This value\
    \ initially takes\n                      the value zero, then for each type of\
    \ PATH that\n                      this port has available, 2 raised to a power\
    \ is\n                      added to the sum.  The powers are according to the\n\
    \                      following table:\n                               Path \
    \  Power\n                            Primary   0\n                          Secondary\
    \   1\n                              Local   2 \"\n              REFERENCE\n \
    \                     \"ANSI { fddiPORT 19 }\"\n              ::= { snmpFddiPORTEntry\
    \ 10 }\n          snmpFddiPORTMACLoopTime OBJECT-TYPE\n              SYNTAX  FddiTime\n\
    \              ACCESS  read-write\n              STATUS  mandatory\n         \
    \     DESCRIPTION\n                      \"Time for the optional MAC Local Loop,\
    \ T_Next(9),\n                      which is greater-than or equal-to 200 milliseconds\n\
    \                      (refer to ANSI SMT 9.4.4.2.3).\"\n              REFERENCE\n\
    \                      \"ANSI { fddiPORT 21 }\"\n              ::= { snmpFddiPORTEntry\
    \ 11 }\n          snmpFddiPORTTBMax OBJECT-TYPE\n              SYNTAX  FddiTime\n\
    \              ACCESS  read-write\n              STATUS  mandatory\n         \
    \     DESCRIPTION\n                      \"TB_Max (refer to ANSI SMT 9.4.4.2.1).\"\
    \n              REFERENCE\n                      \"ANSI { fddiPORT 32 }\"\n  \
    \            ::= { snmpFddiPORTEntry 12 }\n          snmpFddiPORTBSFlag OBJECT-TYPE\n\
    \              SYNTAX  INTEGER { true(1), false(2) }\n              ACCESS  read-only\n\
    \              STATUS  mandatory\n              DESCRIPTION\n                \
    \      \"The Break State, BS_Flag (refer to ANSI SMT\n                      9.4.3.4).\"\
    \n              REFERENCE\n                      \"ANSI { fddiPORT 33 }\"\n  \
    \            ::= { snmpFddiPORTEntry 13 }\n          snmpFddiPORTLCTFailCts OBJECT-TYPE\n\
    \              SYNTAX  Counter\n              ACCESS  read-only\n            \
    \  STATUS  mandatory\n              DESCRIPTION\n                      \"The count\
    \ of the consecutive times the link\n                      confidence test (LCT)\
    \ has failed during connection\n                      management (refer to ANSI\
    \ 9.4.1).\"\n              REFERENCE\n                      \"ANSI { fddiPORT\
    \ 42 }\"\n              ::= { snmpFddiPORTEntry 14 }\n          snmpFddiPORTLerEstimate\
    \ OBJECT-TYPE\n              SYNTAX  INTEGER (4..15)\n              ACCESS  read-only\n\
    \              STATUS  mandatory\n              DESCRIPTION\n                \
    \      \"A long term average link error rate.  It ranges\n                   \
    \   from 10**-4 to 10**-15 and is reported as the\n                      absolute\
    \ value of the exponent of the estimate.\"\n              REFERENCE\n        \
    \              \"ANSI { fddiPORT 51 }\"\n              ::= { snmpFddiPORTEntry\
    \ 15 }\n          snmpFddiPORTLemRejectCts OBJECT-TYPE\n              SYNTAX \
    \ Counter\n              ACCESS  read-only\n              STATUS  mandatory\n\
    \              DESCRIPTION\n                      \"A link error monitoring count\
    \ of the times that a\n                      link has been rejected.\"\n     \
    \         REFERENCE\n                      \"ANSI { fddiPORT 52 }\"\n        \
    \      ::= { snmpFddiPORTEntry 16 }\n          snmpFddiPORTLemCts OBJECT-TYPE\n\
    \              SYNTAX  Counter\n              ACCESS  read-only\n            \
    \  STATUS  mandatory\n              DESCRIPTION\n                      \"The aggregate\
    \ link error monitor error count, set\n                      to zero only on station\
    \ power_up.\"\n              REFERENCE\n                      \"ANSI { fddiPORT\
    \ 53 }\"\n              ::= { snmpFddiPORTEntry 17 }\n          snmpFddiPORTLerCutoff\
    \ OBJECT-TYPE\n              SYNTAX  INTEGER (4..15)\n              ACCESS  read-write\n\
    \              STATUS  mandatory\n              DESCRIPTION\n                \
    \      \"The link error rate estimate at which a link\n                      connection\
    \ will be broken.  It ranges from 10**-4\n                      to 10**-15 and\
    \ is reported as the absolute value\n                      of the exponent.\"\n\
    \              REFERENCE\n                      \"ANSI { fddiPORT 58 }\"\n   \
    \           ::= { snmpFddiPORTEntry 18 }\n          snmpFddiPORTLerAlarm OBJECT-TYPE\n\
    \              SYNTAX  INTEGER (4..15)\n              ACCESS  read-write\n   \
    \           STATUS  mandatory\n              DESCRIPTION\n                   \
    \   \"The link error rate estimate at which a link\n                      connection\
    \ will generate an alarm.  It ranges from\n                      10**-4 to 10**-15\
    \ and is reported as the absolute\n                      value of the exponent\
    \ of the estimate.\"\n              REFERENCE\n                      \"ANSI {\
    \ fddiPORT 59 }\"\n              ::= { snmpFddiPORTEntry 19 }\n          snmpFddiPORTConnectState\
    \ OBJECT-TYPE\n              SYNTAX  INTEGER {\n                          disabled(1),\n\
    \                          connecting(2),\n                          standby(3),\n\
    \                          active(4)\n                      }\n              ACCESS\
    \  read-only\n              STATUS  mandatory\n              DESCRIPTION\n   \
    \                   \"An indication of the connect state of this PORT.\n     \
    \                 Basically, this gives a higher level view of the\n         \
    \             state of the connection by grouping PCM states and\n           \
    \           the PC-Withhold flag state.  The supported values\n              \
    \        and their corresponding PCM states and PC-Withhold\n                \
    \      condition, when relevant, are:\n                        disabled: (PC0:Off,\
    \ PC9:Maint)\n                      connecting: (PC1(Break) || PC3 (Connect) ||\
    \ PC4\n                      (Next)                 || PC5 (Signal) || PC6\n \
    \                     (Join) || PC7 (Verify))             &&\n               \
    \       (PC_Withhold = None)\n                         standby: (NOT PC_Withhold\
    \ == None)\n                          active: (PC2:Trace || PC8:Active) \"\n \
    \             REFERENCE\n                      \"ANSI { fddiPORT 61 }\"\n    \
    \          ::= { snmpFddiPORTEntry 20 }\n          snmpFddiPORTPCMState OBJECT-TYPE\n\
    \              SYNTAX  INTEGER {\n                          pc0(1), -- Off\n \
    \                         pc1(2), -- Break\n                          pc2(3),\
    \ -- Trace\n                          pc3(4), -- Connect\n                   \
    \       pc4(5), -- Next\n                          pc5(6), -- Signal\n       \
    \                   pc6(7), -- Join\n                          pc7(8), -- Verify\n\
    \                          pc8(9), -- Active\n                          pc9(10)\
    \ -- Maint\n                      }\n              ACCESS  read-only\n       \
    \       STATUS  mandatory\n              DESCRIPTION\n                      \"\
    (refer to SMT 9.6.2).\"\n              REFERENCE\n                      \"ANSI\
    \ { fddiPORT 62 }\"\n              ::= { snmpFddiPORTEntry 21 }\n          snmpFddiPORTPCWithhold\
    \ OBJECT-TYPE\n              SYNTAX  INTEGER { none(1), m-m(2), other(3) }\n \
    \             ACCESS  read-only\n              STATUS  mandatory\n           \
    \   DESCRIPTION\n                      \"PC_Withhold, (refer to ANSI SMT 9.4.1).\"\
    \n              REFERENCE\n                      \"ANSI { fddiPORT 63 }\"\n  \
    \            ::= { snmpFddiPORTEntry 22 }\n          snmpFddiPORTLerCondition\
    \ OBJECT-TYPE\n              SYNTAX  INTEGER { true(1), false(2) }\n         \
    \     ACCESS  read-only\n              STATUS  mandatory\n              DESCRIPTION\n\
    \                      \"This variable is set to true whenever LerEstimate\n \
    \                     is less than or equal to LerAlarm.\"\n              REFERENCE\n\
    \                      \"ANSI { fddiPORT 64 }\"\n              ::= { snmpFddiPORTEntry\
    \ 23 }\n          snmpFddiPORTChipSet OBJECT-TYPE\n              SYNTAX  OBJECT\
    \ IDENTIFIER\n              ACCESS  read-only\n              STATUS  mandatory\n\
    \              DESCRIPTION\n                      \"This object identifies the\
    \ hardware chip(s) which\n                      is (are) principally responsible\
    \ for the\n                      implementation of the PORT (PHY) function.  A\
    \ few\n                      OBJECT IDENTIFIERS are identified elsewhere in\n\
    \                      this memo.  For those The assignment of additional\n  \
    \                    OBJECT IDENTIFIERs to various types of hardware\n       \
    \               chip sets is managed by the IANA.  For example,\n            \
    \          vendors whose chip sets are not defined in this\n                 \
    \     memo may request a number from the Internet\n                      Assigned\
    \ Numbers Authority (IANA) which indicates\n                      the assignment\
    \ of a enterprise specific subtree\n                      which, among other things,\
    \ may be used to allocate\n                      OBJECT IDENTIFIER assignments\
    \ for that\n                      enterprise's chip sets.  Similarly, in the absence\n\
    \                      of an appropriately assigned OBJECT IDENTIFIER in\n   \
    \                   this memo or in an enterprise specific subtree of\n      \
    \                a chip vendor, a board or system vendor can\n               \
    \       request a number for a subtree from the IANA and\n                   \
    \   make an appropriate assignment.  It is desired\n                      that,\
    \ whenever possible, the same OBJECT\n                      IDENTIFIER be used\
    \ for all chips of a given type.\n                      Consequently, the assignment\
    \ made in this memo for\n                      a chip, if any, should be used\
    \ in preference to\n                      any other assignment and the assignment\
    \ made by\n                      the chip manufacturer, if any, should be used\
    \ in\n                      preference to assignments made by users of those\n\
    \                      chips.  If the hardware chip set is unknown, the\n    \
    \                  object identifier\n                      unknownChipSet OBJECT\
    \ IDENTIFIER ::= { 0 0 }\n                      is returned.  Note that unknownChipSet\
    \ is a\n                      syntactically valid object identifier, and any\n\
    \                      conformant implementation of ASN.1 and the BER\n      \
    \                must be able to generate and recognize this\n               \
    \       value.\"\n              ::= { snmpFddiPORTEntry 24 }\n          snmpFddiPORTAction\
    \ OBJECT-TYPE\n              SYNTAX  INTEGER {\n                          other(1),\
    \           -- none of the following\n                          maintPORT(2),\n\
    \                          enablePORT(3),\n                          disablePORT(4),\n\
    \                          startPORT(5),\n                          stopPORT(6)\n\
    \                      }\n              ACCESS  read-write\n              STATUS\
    \  mandatory\n              DESCRIPTION\n                      \"This object,\
    \ when read, always returns a value of\n                      other(1).  The behavior\
    \ of setting this variable\n                      to each of the acceptable values\
    \ is as follows:\n                      Other:          Results in a badValue\
    \ error.\n                      maintPORT:      Signal PC_Maint\n            \
    \          enablePORT:     Signal PC_Enable\n                      disablePORT:\
    \    Signal PC_Disable\n                      startPORT:      Signal PC_Start\n\
    \                      stopPORT:       Signal PC_Stop\n                      Signals\
    \ cause an SM_CM_CONTROL.request service to\n                      be generated\
    \ with a control_action of `Signal' and\n                      the `variable'\
    \ parameter set with the appropriate\n                      value (i.e., PC_Maint,\
    \ PC_Enable, PC_Disable,\n                      PC_Start, PC_Stop).  Ref. ANSI\
    \ SMT Section 9.3.2.\n                      Attempts to set this object to all\
    \ other values\n                      results in a badValue error.\"\n       \
    \       REFERENCE\n                      \"ANSI { fddiPORT 70 }\"\n          \
    \    ::= { snmpFddiPORTEntry 25 }\n          -- the ATTACHMENT group\n       \
    \   -- Implementation of the ATTACHMENT group is mandatory for\n          -- all\
    \ systems which implement manageable FDDI subsystems.\n          snmpFddiATTACHMENTNumber\
    \ OBJECT-TYPE\n              SYNTAX  INTEGER (0..65535)\n              ACCESS\
    \  read-only\n              STATUS  mandatory\n              DESCRIPTION\n   \
    \                   \"The total number of attachments (across all SMTs)\n    \
    \                  on this network management application entity.\n          \
    \            The value for this variable must remain constant\n              \
    \        at least from one re-initialization of the\n                      entity's\
    \ network management system to the next\n                      re-initialization.\"\
    \n              ::= { snmpFddiATTACHMENT  1 }\n          -- the ATTACHMENT table\n\
    \          snmpFddiATTACHMENTTable OBJECT-TYPE\n              SYNTAX  SEQUENCE\
    \ OF SnmpFddiATTACHMENTEntry\n              ACCESS  not-accessible\n         \
    \     STATUS  mandatory\n              DESCRIPTION\n                      \"A\
    \ list of ATTACHMENT entries.  The number of\n                      entries is\
    \ given by the value of\n                      snmpFddiATTACHMENTNumber.\"\n \
    \             ::= { snmpFddiATTACHMENT  2 }\n          snmpFddiATTACHMENTEntry\
    \ OBJECT-TYPE\n              SYNTAX  SnmpFddiATTACHMENTEntry\n              ACCESS\
    \  not-accessible\n              STATUS  mandatory\n              DESCRIPTION\n\
    \                      \"An ATTACHMENT entry containing information common\n \
    \                     to a given set of ATTACHMENTs.\n                      The\
    \ ATTACHMENT Resource represents a PORT or a\n                      pair of PORTs\
    \ plus the optional associated optical\n                      bypass that are\
    \ managed as a functional unit.\n                      Because of its relationship\
    \ to the PORT Objects,\n                      there is a natural association of\
    \ ATTACHMENT\n                      Resource Indices to the PORT Indices.  The\n\
    \                      resource index for the ATTACHMENT is equal to the\n   \
    \                   associated PORT index for 'single-attachment' and\n      \
    \                'concentrator' type snmpFddiATTACHMENTClasses.\n            \
    \          For 'dual-attachment' Classes, the ATTACHMENT\n                   \
    \   Index is the PORT Index of the A PORT of the A/B\n                      PORT\
    \ Pair that represents the ATTACHMENT.\"\n              INDEX   { snmpFddiATTACHMENTSMTIndex,\n\
    \                                             snmpFddiATTACHMENTIndex }\n    \
    \          ::= { snmpFddiATTACHMENTTable 1 }\n          SnmpFddiATTACHMENTEntry\
    \ ::=\n              SEQUENCE {\n                  snmpFddiATTACHMENTSMTIndex\n\
    \                          INTEGER,\n                  snmpFddiATTACHMENTIndex\n\
    \                          INTEGER,\n                  snmpFddiATTACHMENTClass\n\
    \                          INTEGER,\n                  snmpFddiATTACHMENTOpticalBypassPresent\n\
    \                          INTEGER,\n                  snmpFddiATTACHMENTIMaxExpiration\n\
    \                          FddiTime,\n                  snmpFddiATTACHMENTInsertedStatus\n\
    \                          INTEGER,\n                  snmpFddiATTACHMENTInsertPolicy\n\
    \                          INTEGER\n              }\n          snmpFddiATTACHMENTSMTIndex\
    \ OBJECT-TYPE\n              SYNTAX  INTEGER (1..65535)\n              ACCESS\
    \  read-only\n              STATUS  mandatory\n              DESCRIPTION\n   \
    \                   \"The value of the SMT index associated with this\n      \
    \                ATTACHMENT.\"\n              ::= { snmpFddiATTACHMENTEntry 1\
    \ }\n          snmpFddiATTACHMENTIndex OBJECT-TYPE\n              SYNTAX  INTEGER\
    \ (1..65535)\n              ACCESS  read-only\n              STATUS  mandatory\n\
    \              DESCRIPTION\n                      \"A unique value for each ATTACHMENT\
    \ on a given\n                      SMT.  Its value ranges between 1 and the sum\
    \ of\n                      the values of snmpFddiSMTNonMasterCt {\n         \
    \             snmpFddiSMTEntry 6 } and snmpFddiSMTMasterCt {\n               \
    \       snmpFddiSMTEntry 7 } on the given SMT.  The value\n                  \
    \    for each ATTACHMENT must remain constant at least\n                     \
    \ from one re-initialization of the entity's network\n                      management\
    \ system to the next re-initialization.\"\n              ::= { snmpFddiATTACHMENTEntry\
    \ 2 }\n          snmpFddiATTACHMENTClass OBJECT-TYPE\n              SYNTAX  INTEGER\
    \ {\n                          single-attachment(1),\n                       \
    \   dual-attachment(2),\n                          concentrator(3)\n         \
    \             }\n              ACCESS  read-only\n              STATUS  mandatory\n\
    \              DESCRIPTION\n                      \"The Attachment class.  This\
    \  represents a PORT or\n                      a pair of PORTs plus the associated\
    \ optional\n                      optical bypass that are managed as a functional\n\
    \                      unit.  The PORT associations are the following:\n     \
    \                     single-attachment - S PORTs\n                          \
    \  dual-attachment - A/B PORT Pairs\n                               concentrator\
    \ - M PORTs \"\n              REFERENCE\n                      \"ANSI { fddiATTACHMENT\
    \ 11 }\"\n              ::= { snmpFddiATTACHMENTEntry 3 }\n          snmpFddiATTACHMENTOpticalBypassPresent\
    \ OBJECT-TYPE\n              SYNTAX  INTEGER { true(1), false(2) }\n         \
    \     ACCESS  read-only\n              STATUS  mandatory\n              DESCRIPTION\n\
    \                      \"The value of this value is false for 'single-\n     \
    \                 attachment' and { snmpFddiATTACHMENT 11 }.\n               \
    \       Correct operation of CMT for single-attachment and\n                 \
    \     concentrator attachments requires that a bypass\n                      function\
    \ must not loopback the network side of the\n                      MIC, but only\
    \ the node side.\"\n              REFERENCE\n                      \"ANSI { fddiATTACHMENT\
    \ 12 }\"\n              ::= { snmpFddiATTACHMENTEntry 4 }\n          snmpFddiATTACHMENTIMaxExpiration\
    \ OBJECT-TYPE\n              SYNTAX  FddiTime\n              ACCESS  read-only\n\
    \              STATUS  mandatory\n              DESCRIPTION\n                \
    \      \"I_Max (refer to ANSI SMT 9.4.4.2.1).  It is\n                      recognized\
    \ that some currently deployed systems do\n                      not implement\
    \ an optical bypass.  Systems which do\n                      not implement optical\
    \ bypass should return a value\n                      of 0.\"\n              REFERENCE\n\
    \                      \"ANSI { fddiATTACHMENT 13 }\"\n              ::= { snmpFddiATTACHMENTEntry\
    \ 5 }\n          snmpFddiATTACHMENTInsertedStatus OBJECT-TYPE\n              SYNTAX\
    \  INTEGER { true(1), false(2), unimplemented(3) }\n              ACCESS  read-only\n\
    \              STATUS  mandatory\n              DESCRIPTION\n                \
    \      \"Indicates whether the attachment is currently\n                     \
    \ inserted in the node.\"\n              REFERENCE\n                      \"ANSI\
    \ { fddiATTACHMENT 14 }\"\n              ::= { snmpFddiATTACHMENTEntry 6 }\n \
    \         snmpFddiATTACHMENTInsertPolicy OBJECT-TYPE\n              SYNTAX  INTEGER\
    \ { true(1), false(2), unimplemented(3) }\n              ACCESS  read-write\n\
    \              STATUS  mandatory\n              DESCRIPTION\n                \
    \      \"Indicates the Insert Policy for this Attachment.\n                  \
    \    Insert: True (1), Don't Insert:  False (2),\n                      Unimplemented\
    \ (3)\"\n              REFERENCE\n                      \"ANSI { fddiATTACHMENT\
    \ 15 }\"\n              ::= { snmpFddiATTACHMENTEntry 7 }\n          -- the Chip\
    \ Set group\n          -- The following object identifiers are allocated for use\n\
    \          -- with the snmpFddiMACChipSet and snmpFddiPORTChipSet\n          --\
    \ variables.\n                 snmpFddiPHYChipSets   -- Chips primarily responsible\n\
    \                                       -- for implementing the PHY\n        \
    \                               -- function.\n                         OBJECT\
    \ IDENTIFIER ::= { snmpFddiChipSets 1 }\n                                    \
    \   -- None defined at present\n                                       -- Chipsets\
    \ may someday be\n                                       -- defined here\n   \
    \              snmpFddiMACChipSets   -- Chips primarily responsible\n        \
    \                               -- for implementing the\n                    \
    \                   -- MAC function.\n                         OBJECT IDENTIFIER\
    \ ::= { snmpFddiChipSets 2 }\n                                        -- None\
    \ defined at present\n                                        -- Chipsets may\
    \ someday be\n                                        -- defined here\n      \
    \           snmpFddiPHYMACChipSets -- Chips which implement both\n           \
    \                             -- the PHY and MAC functions\n                 \
    \        OBJECT IDENTIFIER ::= { snmpFddiChipSets 3 }\n                      \
    \                  -- None defined at present\n                              \
    \          -- Chipsets may someday be\n                                      \
    \  -- defined here\n          END\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   This document was produced by the IETF FDDI MIB working\
    \ group:\n               Steve Adams, Digital Equipment Corporation\n        \
    \       Hossein Alaee, 3Com Corporation\n               Haggar Alsaleh, Bell Northern\
    \ Research\n               William Anderson, Mitre Corporation\n             \
    \  Alan Apt, Addison-Wesley\n               Mary Artibee, Silicon Graphics\n \
    \              Karen Auerbach, Epilogue Technologies\n               Doug Bagnall,\
    \ Apollo/Hewlett Packard\n               Chet Birger, Coral Network Corporation\n\
    \               Pablo Brenner, Sparta\n               Howard Brown, Cabletron\n\
    \               Jack Brown, US Army Computer Engineering Center\n            \
    \   Eric Brunner\n               Jeff Case, The University of Tennessee\n    \
    \           Tammy Chan, Fibercom\n               Asheem Chandna, AT&T\n      \
    \         Cho Y. Chang, Apollo/Hewlett Packard\n               Chris Chiotasso,\
    \ Fibronics\n               Paul Ciarfella, Digital Equipment Corporation\n  \
    \             John Cook, Chipcom\n               Don Coolidge, Silicon Graphics\n\
    \               Burt Cyr, Unisys\n               James R. Davin, Massachusetts\
    \ Institute of Technology\n               Nabil Damouny\n               Nadya\
    \ El-Afandi, Network Systems Corporation\n               Hunaid Engineer, Cray\
    \ Research\n               Jeff Fitzgerald, Fibercom\n               Richard Fox,\
    \ Synoptics\n               Stan Froyd, ACC\n               Debbie Futcher, U.S.\
    \ Naval Surface Warfare Center\n               Joseph Golio, Cray Research\n \
    \              Jeremy Greene, Coral\n               Brian D. Handspicker, Digital\
    \ Equipment Corporation\n               Peter Hayden, Digital Equipment Corporation\n\
    \               Scott Hiles, U.S. Naval Surface Warfare Center\n             \
    \  Greg Jones, Data General\n               Satish Joshi, SynOptics Communications\n\
    \               Jayant Kadambi, AT&T Bell Labs\n               Joanna Karwowska,\
    \ Data General\n               Frank Kastenholz, Interlan\n               Jim\
    \ Kinder, Fibercom\n               Christopher Kolb, PSI\n               Cheryl\
    \ Krupczak, NCR\n               Peter Lin, Vitalink\n               Then Liu\n\
    \               John R. LoVerso, Concurrent Computer Corporation\n           \
    \    Ron Mackey\n               Gary Malkin, Proteon\n               Bruce McClure,\
    \ Synernetics\n               Keith McCloghrie, Hughes Lan Systems\n         \
    \      Donna McMaster, SynOptics\n               John O'Hara, Massachusetts Institute\
    \ of Technology\n               Dave Perkins, SynOptics Communications\n     \
    \          James E. Reeves, SynOptics Communications\n               Jim Reinstedler,\
    \ Ungermann-Bass\n               Radhi Renous, Fibronics\n               Anil\
    \ Rijsinghani, Digital Equipment Corporation\n               Bob Rolla, Synernetics\n\
    \               Nelson Ronkin, Synernetics\n               Marshall T. Rose, Performance\
    \ Systems International, Inc.\n               Milt Roselinsky, CMC\n         \
    \      Jon Saperia, Digital Equipment Corporation\n               Greg Satz, cisco\
    \ Systems\n               Steven Senum, Network Systems Corporation\n        \
    \       Jim Sheridan, IBM Corporation\n               Jeffrey Schiller, MIT\n\
    \               Dror Shindelman, Sparta\n               Mark Sleeper, Sparta\n\
    \               Craig Smelser, Digital Equipment Corporation\n               Lou\
    \ Steinberg, IBM Corporation\n               Mary Jane Strohl, Apollo/Hewlett\
    \ Packard\n               Sally Tarquinio, Mitre Corporation\n               Kaj\
    \ Tesink, Bellcore\n               Ian Thomas, Chipcom\n               Dean Throop,\
    \ Data General\n               Bill Townsend, Xylogics\n               Ahmet H.\
    \ Tuncay, SynOptics Communications\n               Mike Turico, Motorola\n   \
    \            Chris VandenBerg, ACC\n               Sudhanshu Verma, Hewlett Packard\n\
    \               Joe Vermeulen, UNISYS\n               David Waiteman, BBN\n  \
    \             Bert Williams, Synernetics\n               Mark Wood, AT&T Computer\
    \ Systems\n               Y. C. Yang\n               Denis Yaro, Sun Microsystems\n\
    \               Jeff Young, Cray Research\n   The editor gratefully acknowledges\
    \ the contributions of the editor of\n   the ANSI X3T9.5 SMT document, Mary Jane\
    \ Strohl of Hewlett\n   Packard/Apollo, whose provision of that document in machine\
    \ readable\n   form saved much typing and avoided many data entry errors.\n  \
    \ The author gratefully acknowledges the labors of Dr. Marshall T. Rose\n   in\
    \ assisting with converting this document to the new concise MIB\n   format.\n"
- title: 8.  References
  contents:
  - "8.  References\n   [1] Rose M., and K. McCloghrie, \"Structure and Identification\
    \ of\n       Management Information for TCP/IP-based internets\", RFC 1155,\n\
    \       Performance Systems International, Hughes LAN Systems, May 1990.\n   [2]\
    \ McCloghrie K., and M. Rose, \"Management Information Base for\n       Network\
    \ Management of TCP/IP-based internets\", RFC 1156, Hughes\n       LAN Systems,\
    \ Performance Systems International, May 1990.\n   [3] Case, J., Fedor, M., Schoffstall,\
    \ M., and J. Davin, \"Simple\n       Network Management Protocol\", RFC 1157,\
    \ SNMP Research,\n       Performance Systems International, Performance Systems\n\
    \       International, MIT Laboratory for Computer Science, May 1990.\n   [4]\
    \ McCloghrie K., and M. Rose, Editors, \"Management Information Base\n       for\
    \ Network Management of TCP/IP-based internets\", RFC 1213,\n       Performance\
    \ Systems International, March 1991.\n   [5] Information processing systems -\
    \ Open Systems Interconnection -\n       Specification of Abstract Syntax Notation\
    \ One (ASN.1),\n       International Organization for Standardization, International\n\
    \       Standard 8824, December 1987.\n   [6] Information processing systems -\
    \ Open Systems Interconnection -\n       Specification of Basic Encoding Rules\
    \ for Abstract Notation One\n       (ASN.1), International Organization for Standardization,\n\
    \       International Standard 8825, December 1987.\n   [7] Rose, M., and K. McCloghrie,\
    \ Editors, \"Concise MIB Definitions\",\n       RFC 1212, Performance Systems\
    \ International, Hughes LAN Systems,\n       March 1991.\n   [8] American National\
    \ Standards Institute, \"FDDI Station Management\n       (SMT)\", Preliminary\
    \ Draft Proposed American National Standard,\n       American National Standards\
    \ Institute, X3T9/90-X3T9.5/84-49 REV\n       6.2, May 18, 1990.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Jeffrey D. Case\n   SNMP Research, Incorporated\n   3001\
    \ Kimberlin Heights Road\n   Knoxville, Tennessee  37920\n   Phone: (615) 573-1434\n\
    \   EMail: case@CS.UTK.EDU\n"
