- title: __initial_text__
  contents:
  - "              RSA Key Exchange for the Secure Shell (SSH)\n                 \
    \       Transport Layer Protocol\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes a key-exchange method for the Secure Shell (SSH)\n\
    \   protocol based on Rivest-Shamir-Adleman (RSA) public-key encryption.\n   It\
    \ uses much less client CPU time than the Diffie-Hellman algorithm\n   specified\
    \ as part of the core protocol, and hence is particularly\n   suitable for slow\
    \ client systems.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Secure Shell (SSH) [RFC4251] is a secure remote-login protocol.\
    \  The\n   core protocol uses Diffie-Hellman key exchange.  On slow CPUs, this\n\
    \   key exchange can take tens of seconds to complete, which can be\n   irritating\
    \ for the user.  A previous version of the SSH protocol,\n   described in [SSH1],\
    \ uses a key-exchange method based on\n   Rivest-Shamir-Adleman (RSA) public-key\
    \ encryption, which consumes an\n   order of magnitude less CPU time on the client,\
    \ and hence is\n   particularly suitable for slow client systems such as mobile\
    \ devices.\n   This memo describes a key-exchange mechanism for the version of\
    \ SSH\n   described in [RFC4251] that is similar to that used by the older\n \
    \  version, and about as fast, while retaining the security advantages\n   of\
    \ the newer protocol.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\" and \"SHOULD\"\
    \ in this document are to be\n   interpreted as described in [RFC2119].\n   The\
    \ data types \"byte\", \"string\", and \"mpint\" are defined in Section 5\n  \
    \ of [RFC4251].\n   Other terminology and symbols have the same meaning as in\
    \ [RFC4253].\n"
- title: 3.  Overview
  contents:
  - "3.  Overview\n   The RSA key-exchange method consists of three messages.  The\
    \ server\n   sends to the client an RSA public key, K_T, to which the server holds\n\
    \   the private key.  This may be a transient key generated solely for\n   this\
    \ SSH connection, or it may be re-used for several connections.\n   The client\
    \ generates a string of random bytes, K, encrypts it using\n   K_T, and sends\
    \ the result back to the server, which decrypts it.  The\n   client and server\
    \ each hash K, K_T, and the various key-exchange\n   parameters to generate the\
    \ exchange hash, H, which is used to\n   generate the encryption keys for the\
    \ session, and the server signs H\n   with its host key and sends the signature\
    \ to the client.  The client\n   then verifies the host key as described in Section\
    \ 8 of [RFC4253].\n   This method provides explicit server identification as defined\
    \ in\n   Section 7 of [RFC4253].  It requires a signature-capable host key.\n"
- title: 4.  Details
  contents:
  - "4.  Details\n   The RSA key-exchange method has the following parameters:\n \
    \      HASH     hash algorithm for calculating exchange hash, etc.\n       HLEN\
    \     output length of HASH in bits\n       MINKLEN  minimum transient RSA modulus\
    \ length in bits\n   Their values are defined in Section 5 and Section 6 for the\
    \ two\n   methods defined by this document.\n   The method uses the following\
    \ messages.\n   First, the server sends:\n       byte      SSH_MSG_KEXRSA_PUBKEY\n\
    \       string    server public host key and certificates (K_S)\n       string\
    \    K_T, transient RSA public key\n   The key K_T is encoded according to the\
    \ \"ssh-rsa\" scheme described in\n   Section 6.6 of [RFC4253].  Note that unlike\
    \ an \"ssh-rsa\" host key,\n   K_T is used only for encryption, and not for signature.\
    \  The modulus\n   of K_T MUST be at least MINKLEN bits long.\n   The client generates\
    \ a random integer, K, in the range\n   0 <= K < 2^(KLEN-2*HLEN-49), where KLEN\
    \ is the length of the modulus\n   of K_T, in bits.  The client then uses K_T\
    \ to encrypt:\n       mpint     K, the shared secret\n   The encryption is performed\
    \ according to the RSAES-OAEP scheme of\n   [RFC3447], with a mask generation\
    \ function of MGF1-with-HASH, a hash\n   of HASH, and an empty label.  See Appendix\
    \ A for a proof that the\n   encoding of K is always short enough to be thus encrypted.\
    \  Having\n   performed the encryption, the client sends:\n       byte      SSH_MSG_KEXRSA_SECRET\n\
    \       string    RSAES-OAEP-ENCRYPT(K_T, K)\n   Note that the last stage of RSAES-OAEP-ENCRYPT\
    \ is to encode an\n   integer as an octet string using the I2OSP primitive of\
    \ [RFC3447].\n   This, combined with encoding the result as an SSH \"string\"\
    , gives a\n   result that is similar, but not identical, to the SSH \"mpint\"\n\
    \   encoding applied to that integer.  This is the same encoding as is\n   used\
    \ by \"ssh-rsa\" signatures in [RFC4253].\n   The server decrypts K.  If a decryption\
    \ error occurs, the server\n   SHOULD send SSH_MESSAGE_DISCONNECT with a reason\
    \ code of\n   SSH_DISCONNECT_KEY_EXCHANGE_FAILED and MUST disconnect.  Otherwise,\n\
    \   the server responds with:\n       byte      SSH_MSG_KEXRSA_DONE\n       string\
    \    signature of H with host key\n   The hash H is computed as the HASH hash\
    \ of the concatenation of the\n   following:\n       string    V_C, the client's\
    \ identification string\n                 (CR and LF excluded)\n       string\
    \    V_S, the server's identification string\n                 (CR and LF excluded)\n\
    \       string    I_C, the payload of the client's SSH_MSG_KEXINIT\n       string\
    \    I_S, the payload of the server's SSH_MSG_KEXINIT\n       string    K_S, the\
    \ host key\n       string    K_T, the transient RSA key\n       string    RSAES_OAEP_ENCRYPT(K_T,\
    \ K), the encrypted secret\n       mpint     K, the shared secret\n   This value\
    \ is called the exchange hash, and it is used to\n   authenticate the key exchange.\
    \  The exchange hash SHOULD be kept\n   secret.\n   The signature algorithm MUST\
    \ be applied over H, not the original\n   data.  Most signature algorithms include\
    \ hashing and additional\n   padding.  For example, \"ssh-dss\" specifies SHA-1\
    \ hashing.  In such\n   cases, the data is first hashed with HASH to compute H,\
    \ and H is then\n   hashed again as part of the signing operation.\n"
- title: 5.  rsa1024-sha1
  contents:
  - "5.  rsa1024-sha1\n   The \"rsa1024-sha1\" method specifies RSA key exchange as\
    \ described\n   above with the following parameters:\n       HASH     SHA-1, as\
    \ defined in [RFC3174]\n       HLEN     160\n       MINKLEN  1024\n"
- title: 6.  rsa2048-sha256
  contents:
  - "6.  rsa2048-sha256\n   The \"rsa2048-sha256\" method specifies RSA key exchange\
    \ as described\n   above with the following parameters:\n       HASH     SHA-256,\
    \ as defined in [FIPS-180-2]\n       HLEN     256\n       MINKLEN  2048\n"
- title: 7.  Message Numbers
  contents:
  - "7.  Message Numbers\n   The following message numbers are defined:\n       SSH_MSG_KEXRSA_PUBKEY\
    \  30\n       SSH_MSG_KEXRSA_SECRET  31\n       SSH_MSG_KEXRSA_DONE    32\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   The security considerations in [RFC4251] apply.\n\
    \   If the RSA private key generated by the server is revealed, then the\n   session\
    \ key is revealed.  The server should thus arrange to erase\n   this from memory\
    \ as soon as it is no longer required.  If the same\n   RSA key is used for multiple\
    \ SSH connections, an attacker who can\n   find the private key (either by factorising\
    \ the public key or by\n   other means) will gain access to all of the sessions\
    \ that used that\n   key.  As a result, servers SHOULD use each RSA key for as\
    \ few key\n   exchanges as possible.\n   [RFC3447] recommends that RSA keys used\
    \ with RSAES-OAEP not be used\n   with other schemes, or with RSAES-OAEP using\
    \ a different hash\n   function.  In particular, this means that K_T should not\
    \ be used as a\n   host key, or as a server key in earlier versions of the SSH\
    \ protocol.\n   Like all key-exchange mechanisms, this one depends for its security\n\
    \   on the randomness of the secrets generated by the client (the random\n   number\
    \ K) and the server (the transient RSA private key).  In\n   particular, it is\
    \ essential that the client use a high-quality\n   cryptographic pseudo-random\
    \ number generator to generate K.  Using a\n   bad random number generator will\
    \ allow an attacker to break all the\n   encryption and integrity protection of\
    \ the Secure Shell transport\n   layer.  See [RFC4086] for recommendations on\
    \ random number\n   generation.\n   The size of transient key used should be sufficient\
    \ to protect the\n   encryption and integrity keys generated by the key-exchange\
    \ method.\n   For recommendations on this, see [RFC3766].  The strength of\n \
    \  RSAES-OAEP is in part dependent on the hash function it uses.\n   [RFC3447]\
    \ suggests using a hash with an output length of twice the\n   security level\
    \ required, so SHA-1 is appropriate for applications\n   requiring up to 80 bits\
    \ of security, and SHA-256 for those requiring\n   up to 128 bits.\n   Unlike\
    \ the Diffie-Hellman key-exchange method defined by [RFC4253],\n   this method\
    \ allows the client to fully determine the shared secret,\n   K.  This is believed\
    \ not to be significant, since K is only ever used\n   when hashed with data provided\
    \ in part by the server (usually in the\n   form of the exchange hash, H).  If\
    \ an extension to SSH were to use K\n   directly and to assume that it had been\
    \ generated by Diffie-Hellman\n   key exchange, this could produce a security\
    \ weakness.  Protocol\n   extensions using K directly should be viewed with extreme\
    \ suspicion.\n   This key-exchange method is designed to be resistant to collision\n\
    \   attacks on the exchange hash, by ensuring that neither side is able\n   to\
    \ freely choose its input to the hash after seeing all of the other\n   side's\
    \ input.  The server's last input is in SSH_MSG_KEXRSA_PUBKEY,\n   before it has\
    \ seen the client's choice of K.  The client's last input\n   is K and its RSA\
    \ encryption, and the one-way nature of RSA encryption\n   should ensure that\
    \ the client cannot choose K so as to cause a\n   collision.\n"
- title: 9.  IANA Considerations
  contents:
  - "9.  IANA Considerations\n   IANA has assigned the names \"rsa1024-sha1\" and\
    \ \"rsa2048-sha256\" as\n   Key Exchange Method Names in accordance with [RFC4250].\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   The author acknowledges the assistance of Simon Tatham\
    \ with the\n   design of this key exchange method.\n   The text of this document\
    \ is derived in part from [RFC4253].\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]     Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                 Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC3174]     Eastlake, D. and P. Jones, \"US Secure Hash Algorithm\
    \ 1\n                 (SHA1)\", RFC 3174, September 2001.\n   [RFC3447]     Jonsson,\
    \ J. and B. Kaliski, \"Public-Key Cryptography\n                 Standards (PKCS)\
    \ #1: RSA Cryptography Specifications\n                 Version 2.1\", RFC 3447,\
    \ February 2003.\n   [RFC4251]     Ylonen, T. and C. Lonvick, \"The Secure Shell\
    \ (SSH)\n                 Protocol Architecture\", RFC 4251, January 2006.\n \
    \  [RFC4253]     Ylonen, T. and C. Lonvick, \"The Secure Shell (SSH)\n       \
    \          Transport Layer Protocol\", RFC 4253, January 2006.\n   [RFC4250] \
    \    Lehtinen, S. and C. Lonvick, \"The Secure Shell (SSH)\n                 Protocol\
    \ Assigned Numbers\", RFC 4250, January 2006.\n   [FIPS-180-2]  National Institute\
    \ of Standards and Technology (NIST),\n                 \"Secure Hash Standard\
    \ (SHS)\", FIPS PUB 180-2,\n                 August 2002.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [SSH1]        Ylonen, T., \"SSH -- Secure Login\
    \ Connections over the\n                 Internet\", 6th USENIX Security Symposium,\
    \ pp. 37-42,\n                 July 1996.\n   [RFC3766]     Orman, H. and P. Hoffman,\
    \ \"Determining Strengths For\n                 Public Keys Used For Exchanging\
    \ Symmetric Keys\",\n                 BCP 86, RFC 3766, April 2004.\n   [RFC4086]\
    \     Eastlake, D., Schiller, J., and S. Crocker, \"Randomness\n             \
    \    Requirements for Security\", BCP 106, RFC 4086,\n                 June 2005.\n"
- title: Appendix A.  On the Size of K
  contents:
  - "Appendix A.  On the Size of K\n   The requirements on the size of K are intended\
    \ to ensure that it is\n   always possible to encrypt it under K_T.  The mpint\
    \ encoding of K\n   requires a leading zero bit, padding to a whole number of\
    \ bytes, and\n   a four-byte length field, giving a maximum length in bytes,\n\
    \   B = (KLEN-2*HLEN-49+1+7)/8 + 4 = (KLEN-2*HLEN-9)/8 (where \"/\" denotes\n\
    \   integer division rounding down).\n   The maximum length of message that can\
    \ be encrypted using RSAEP-OAEP\n   is defined by [RFC3447] in terms of the key\
    \ length in bytes, which is\n   (KLEN+7)/8.  The maximum length is thus L = (KLEN+7-2*HLEN-16)/8\
    \ =\n   (KLEN-2*HLEN-9)/8.  Thus, the encoded version of K is always small\n \
    \  enough to be encrypted under K_T.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Ben Harris\n   2a Eachard Road\n   CAMBRIDGE\n   CB4 1XA\n\
    \   UNITED KINGDOM\n   EMail: bjh21@bjh21.me.uk\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
