- title: __initial_text__
  contents:
  - " An Extension to the REsource LOcation And Discovery (RELOAD) Protocol\n    \
    \               to Support Direct Response Routing\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines an optional extension to the REsource LOcation\n\
    \   And Discovery (RELOAD) protocol to support the direct response\n   routing\
    \ mode.  RELOAD recommends symmetric recursive routing for\n   routing messages.\
    \  The new optional extension provides a shorter\n   route for responses, thereby\
    \ reducing overhead on intermediate peers.\n   This document also describes potential\
    \ cases where this extension can\n   be used.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7263.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Terminology .....................................................4\n  \
    \ 3. Overview ........................................................5\n    \
    \  3.1. SRR and DRR ................................................5\n      \
    \     3.1.1. Symmetric Recursive Routing (SRR) ...................6\n        \
    \   3.1.2. Direct Response Routing (DRR) .......................6\n      3.2.\
    \ Scenarios Where DRR Can Be Used ............................7\n           3.2.1.\
    \ Managed or Closed P2P Systems .......................7\n           3.2.2. Wireless\
    \ Scenarios ..................................8\n   4. Relationship between SRR\
    \ and DRR ................................8\n      4.1. How DRR Works ..............................................8\n\
    \      4.2. How SRR and DRR Work Together ..............................8\n  \
    \ 5. DRR Extensions to RELOAD ........................................9\n    \
    \  5.1. Basic Requirements .........................................9\n      5.2.\
    \ Modification to RELOAD Message Structure ...................9\n           5.2.1.\
    \ State-Keeping Flag ..................................9\n           5.2.2. Extensive\
    \ Routing Mode .............................10\n      5.3. Creating a Request\
    \ ........................................11\n           5.3.1. Creating a Request\
    \ for DRR .........................11\n      5.4. Request and Response Processing\
    \ ...........................11\n           5.4.1. Destination Peer: Receiving\
    \ a Request and\n                  Sending a Response .................................11\n\
    \           5.4.2. Sending Peer: Receiving a Response .................12\n  \
    \ 6. Overlay Configuration Extension ................................12\n   7.\
    \ Security Considerations ........................................12\n   8. IANA\
    \ Considerations ............................................13\n      8.1. A\
    \ New RELOAD Forwarding Option ............................13\n      8.2. A New\
    \ IETF XML Registry ...................................13\n   9. Acknowledgments\
    \ ................................................13\n   10. References ....................................................13\n\
    \      10.1. Normative References .....................................13\n  \
    \    10.2. Informative References ...................................14\n   Appendix\
    \ A. Optional Methods to Investigate Peer Connectivity .....15\n     A.1. Getting\
    \ Addresses to Be Used as Candidates for DRR .........15\n     A.2. Public Reachability\
    \ Test ...................................16\n   Appendix B. Comparison of Cost\
    \ of SRR and DRR .....................17\n     B.1. Closed or Managed Networks\
    \ .................................17\n     B.2. Open Networks ..............................................19\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The REsource LOcation And Discovery (RELOAD) protocol [RFC6940]\n\
    \   recommends symmetric recursive routing (SRR) for routing messages and\n  \
    \ describes the extensions that would be required to support additional\n   routing\
    \ algorithms.  In addition to SRR, two other routing options --\n   direct response\
    \ routing (DRR) and relay peer routing (RPR) -- are\n   also discussed in Appendix\
    \ A of [RFC6940].  As we show in Section 3,\n   DRR is advantageous over SRR in\
    \ some scenarios in that DRR can reduce\n   load (CPU and link bandwidth) on intermediate\
    \ peers.  For example, in\n   a closed network where every peer is in the same\
    \ address realm, DRR\n   performs better than SRR.  In other scenarios, using\
    \ a combination of\n   DRR and SRR together is more likely to provide benefits\
    \ than if SRR\n   is used alone.\n   Note that in this document we focus on the\
    \ DRR mode and its\n   extensions to RELOAD to produce a standalone solution.\
    \  Please refer\n   to [RFC7264] for details on the RPR mode.\n   We first discuss\
    \ the problem statement in Section 3.  How to combine\n   DRR and SRR is presented\
    \ in Section 4.  An extension to RELOAD to\n   support DRR is defined in Section\
    \ 5.  Some optional methods to check\n   peer connectivity are introduced in Appendix\
    \ A.  In Appendix B, we\n   give a comparison of the cost of SRR and DRR in both\
    \ managed and open\n   networks.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n   We use terminology and definitions from the base RELOAD\
    \ specification\n   [RFC6940] extensively in this document.  We also use terms\
    \ defined in\n   the NAT behavior discovery document [RFC5780].  Other terms used\
    \ in\n   this document are defined inline when used and are also defined below\n\
    \   for reference.\n      Publicly Reachable: A peer is publicly reachable if\
    \ it can receive\n      unsolicited messages from any other peer in the same overlay.\n\
    \      Note: \"Publicly\" does not mean that the peers must be on the\n      public\
    \ Internet, because the RELOAD protocol may be used in a\n      closed network.\n\
    \      Direct Response Routing (DRR): \"DRR\" refers to a routing mode in\n  \
    \    which responses to Peer-to-Peer SIP (P2PSIP) requests are returned\n    \
    \  to the sending peer directly from the destination peer based on\n      the\
    \ sending peer's own local transport address(es).  For\n      simplicity, the\
    \ abbreviation \"DRR\" is used in the rest of this\n      document.\n      Symmetric\
    \ Recursive Routing (SRR): \"SRR\" refers to a routing mode\n      in which responses\
    \ follow the reverse path of the request to get\n      to the sending peer.  For\
    \ simplicity, the abbreviation \"SRR\" is\n      used in the rest of this document.\n\
    \      Relay Peer Routing (RPR): \"RPR\" refers to a routing mode in which\n \
    \     responses to P2PSIP requests are sent by the destination peer to\n     \
    \ the transport address of a relay peer that will forward the\n      responses\
    \ towards the sending peer.  For simplicity, the\n      abbreviation \"RPR\" is\
    \ used in the rest of this document.\n"
- title: 3.  Overview
  contents:
  - "3.  Overview\n   RELOAD is expected to work under a great number of application\n\
    \   scenarios.  The situations where RELOAD is to be deployed differ\n   greatly.\
    \  For instance, some deployments are global, such as a\n   Skype-like system\
    \ intended to provide public service, while others\n   run in small-scale closed\
    \ networks.  SRR works in any situation, but\n   DRR may work better in some specific\
    \ scenarios.\n"
- title: 3.1.  SRR and DRR
  contents:
  - "3.1.  SRR and DRR\n   RELOAD is a simple request-response protocol.  After sending\
    \ a\n   request, a peer waits for a response from a destination peer.  There\n\
    \   are several ways for the destination peer to send a response back to\n   the\
    \ source peer.  In this section, we will provide detailed\n   information on two\
    \ routing modes: SRR and DRR.\n   Some assumptions are made in the illustrations\
    \ that follow:\n   1)  Peer A sends a request destined to a peer who is the responsible\n\
    \       peer for a Resource-ID k.\n   2)  Peer X is the root peer responsible\
    \ for Resource-ID k.\n   3)  The intermediate peers for the path from A to X are\
    \ peers B, C,\n       and D.\n"
- title: 3.1.1.  Symmetric Recursive Routing (SRR)
  contents:
  - "3.1.1.  Symmetric Recursive Routing (SRR)\n   For SRR, when the request sent\
    \ by peer A is received by an\n   intermediate peer B, C, or D, each intermediate\
    \ peer will insert\n   information on the peer from whom they got the request\
    \ in the\n   Via List, as described in RELOAD [RFC6940].  As a result, the\n \
    \  destination peer X will know the exact path that the request has\n   traversed.\
    \  Peer X will then send back the response in the reverse\n   path by constructing\
    \ a Destination List based on the Via List in the\n   request.  Figure 1 illustrates\
    \ SRR.\n         A            B            C             D           X\n     \
    \    |  Request   |            |            |            |\n         |----------->|\
    \            |            |            |\n         |            | Request    |\
    \            |            |\n         |            |----------->|            |\
    \            |\n         |            |            | Request    |            |\n\
    \         |            |            |----------->|            |\n         |  \
    \          |            |            | Request    |\n         |            | \
    \           |            |----------->|\n         |            |            |\
    \            |            |\n         |            |            |            |\
    \  Response  |\n         |            |            |            |<-----------|\n\
    \         |            |            |  Response  |            |\n         |  \
    \          |            |<-----------|            |\n         |            | \
    \ Response  |            |            |\n         |            |<-----------|\
    \            |            |\n         |  Response  |            |            |\
    \            |\n         |<-----------|            |            |            |\n\
    \         |            |            |            |            |\n            \
    \                Figure 1: SRR Mode\n   SRR works in any situation, especially\
    \ when there are NATs or\n   firewalls.  A downside of this solution is that the\
    \ message takes\n   several hops to return to the peer, increasing the bandwidth\
    \ usage\n   and CPU/battery load of multiple peers.\n"
- title: 3.1.2.  Direct Response Routing (DRR)
  contents:
  - "3.1.2.  Direct Response Routing (DRR)\n   In DRR, peer X receives the request\
    \ sent by peer A through\n   intermediate peers B, C, and D, as in SRR.  However,\
    \ peer X sends the\n   response back directly to peer A based on peer A's local\
    \ transport\n   address.  In this case, the response is not routed through\n \
    \  intermediate peers.  Figure 2 illustrates DRR.  Using a shorter route\n   means\
    \ less overhead on intermediate peers, especially in the case of\n   wireless\
    \ networks where the CPU and uplink bandwidth are limited.\n   For example, in\
    \ the absence of NATs, or if the NAT implements\n   endpoint-independent filtering,\
    \ this is the optimal routing\n   technique.  Note that establishing a secure\
    \ connection requires\n   multiple round trips.  Please refer to Appendix B for\
    \ a cost\n   comparison between SRR and DRR.\n           A            B      \
    \      C             D           X\n           |  Request   |            |   \
    \         |            |\n           |----------->|            |            |\
    \            |\n           |            | Request    |            |          \
    \  |\n           |            |----------->|            |            |\n     \
    \      |            |            | Request    |            |\n           |   \
    \         |            |----------->|            |\n           |            |\
    \            |            | Request    |\n           |            |          \
    \  |            |----------->|\n           |            |            |       \
    \     |            |\n           |            |            |            |  Response\
    \  |\n           |<-----------+------------+------------+------------|\n     \
    \      |            |            |            |            |\n               \
    \             Figure 2: DRR Mode\n"
- title: 3.2.  Scenarios Where DRR Can Be Used
  contents:
  - "3.2.  Scenarios Where DRR Can Be Used\n   This section lists several scenarios\
    \ where using DRR would work and\n   identifies when the increased efficiency\
    \ would be advantageous.\n"
- title: 3.2.1.  Managed or Closed P2P Systems
  contents:
  - "3.2.1.  Managed or Closed P2P Systems\n   The properties that make P2P technology\
    \ attractive, such as the lack\n   of need for centralized servers, self-organization,\
    \ etc., are\n   attractive for managed systems as well as unmanaged systems. \
    \ Many of\n   these systems are deployed on private networks where peers are in\
    \ the\n   same address realm and/or can directly route to each other.  In such\n\
    \   a scenario, the network administrator can indicate preference for DRR\n  \
    \ in the peer's configuration file.  Peers in such a system would\n   always try\
    \ DRR first, but peers MUST also support SRR in case DRR\n   fails.  During the\
    \ process of establishing a direct connection with\n   the sending peer, if the\
    \ responding peer receives a request with SRR\n   as the preferred routing mode\
    \ (or it fails to establish the direct\n   connection), the responding peer SHOULD\
    \ NOT use DRR but instead\n   switch to SRR.  The simple policy is to try DRR\
    \ and, if this fails,\n   switch to SRR for all connections.  In a finer-grained\
    \ policy, a peer\n   would keep a list of unreachable peers based on trying DRR\
    \ and then\n   would use only SRR for those peers.  The advantage of using DRR\
    \ is\n   network stability, since it puts less overhead on the intermediate\n\
    \   peers that will not route the responses.  The intermediate peers will\n  \
    \ need to route fewer messages and will save CPU resources as well as\n   link\
    \ bandwidth usage.\n"
- title: 3.2.2.  Wireless Scenarios
  contents:
  - "3.2.2.  Wireless Scenarios\n   In some mobile deployments, using DRR may help\
    \ reduce radio battery\n   usage and bandwidth by the intermediate peers.  The\
    \ service provider\n   may recommend using DRR based on his knowledge of the topology.\n"
- title: 4.  Relationship between SRR and DRR
  contents:
  - '4.  Relationship between SRR and DRR

    '
- title: 4.1.  How DRR Works
  contents:
  - "4.1.  How DRR Works\n   DRR is very simple.  The only requirement is for the\
    \ source peers to\n   provide their potential (publicly reachable) transport address\
    \ to the\n   destination peers, so that the destination peer knows where to send\n\
    \   the response.  Responses are sent directly to the requesting peer.\n"
- title: 4.2.  How SRR and DRR Work Together
  contents:
  - "4.2.  How SRR and DRR Work Together\n   DRR is not intended to replace SRR. \
    \ It is better to use these two\n   modes together to adapt to each peer's specific\
    \ situation.  In this\n   section, we give some informative suggestions for how\
    \ to transition\n   between the routing modes in RELOAD.\n   According to [RFC6940],\
    \ SRR MUST be supported.  An overlay MAY be\n   configured to use alternative\
    \ routing algorithms, and alternative\n   routing algorithms MAY be selected on\
    \ a per-message basis.  That is,\n   a node in an overlay that supports SRR and\
    \ some other routing\n   algorithm -- for example, DRR -- might use SRR some of\
    \ the time and\n   DRR some of the time.  A node joining the overlay should get\
    \ the\n   preferred routing mode from the configuration file.  If an overlay\n\
    \   runs within a private network and all peers in the system can reach\n   each\
    \ other directly, peers MAY send most of the transactions with\n   DRR.  However,\
    \ DRR SHOULD NOT be used in the open Internet or if the\n   administrator does\
    \ not feel he has enough information about the\n   overlay network topology. \
    \ A new overlay configuration element\n   specifying the usage of DRR is defined\
    \ in Section 6.\n   Alternatively, a peer can collect statistical data on the\
    \ success of\n   the different routing modes based on previous transactions and\
    \ keep a\n   list of non-reachable addresses.  Based on this data, the peer will\n\
    \   have a clearer view of the success rate of different routing modes.\n   In\
    \ addition to data on the success rate, the peer can also get data\n   of finer\
    \ granularity -- for example, the number of retransmissions\n   the peer needs\
    \ to achieve a desirable success rate.\n   A typical strategy for the peer is\
    \ as follows.  A peer chooses to\n   start with DRR based on the configuration.\
    \  Based on the success rate\n   as indicated by statistics on lost messages or\
    \ by responses that used\n   DRR, the peer can either continue to offer DRR first\
    \ or switch to\n   SRR.  Note that a peer should use the DRR success statistics\
    \ to\n   decide whether to continue using DRR or fall back to SRR.  Making\n \
    \  such a decision per specific connection is not recommended; this\n   should\
    \ be an application decision.\n"
- title: 5.  DRR Extensions to RELOAD
  contents:
  - "5.  DRR Extensions to RELOAD\n   Adding support for DRR requires extensions to\
    \ the current RELOAD\n   protocol.  In this section, we define the required extensions,\n\
    \   including extensions to message structure and message processing.\n"
- title: 5.1.  Basic Requirements
  contents:
  - "5.1.  Basic Requirements\n   All peers MUST be able to process requests for routing\
    \ in SRR and MAY\n   support DRR routing requests.\n"
- title: 5.2.  Modification to RELOAD Message Structure
  contents:
  - "5.2.  Modification to RELOAD Message Structure\n   RELOAD provides an extensible\
    \ framework to accommodate future\n   extensions.  In this section, we define\
    \ a ForwardingOption structure\n   to support DRR mode.  Additionally, we present\
    \ a state-keeping flag\n   to inform intermediate peers if they are allowed to\
    \ not maintain\n   state for a transaction.\n"
- title: 5.2.1.  State-Keeping Flag
  contents:
  - "5.2.1.  State-Keeping Flag\n   RELOAD allows intermediate peers to maintain state\
    \ in order to\n   implement SRR -- for example, for implementing hop-by-hop\n\
    \   retransmission.  If DRR is used, the response will not follow the\n   reverse\
    \ path, and the state in the intermediate peers will not be\n   cleared until\
    \ such state expires.  In order to address this issue, we\n   define a new flag,\
    \ state-keeping flag, in the ForwardingOption\n   structure to indicate whether\
    \ the state-keeping is required in the\n   intermediate peers.\n   Flag: 0x08\
    \ IGNORE-STATE-KEEPING\n   If IGNORE-STATE-KEEPING is set, any peer receiving\
    \ this message but\n   who is not the destination of the message SHOULD forward\
    \ the message\n   with the full Via List and SHOULD NOT maintain any internal\
    \ state.\n"
- title: 5.2.2.  Extensive Routing Mode
  contents:
  - "5.2.2.  Extensive Routing Mode\n   This document introduces a new forwarding\
    \ option for an extensive\n   routing mode.  This option conforms to the description\
    \ in\n   Section 6.3.2.3 of [RFC6940].\n   We first define a new type to define\
    \ the new option,\n   extensive_routing_mode:\n   The option value that defines\
    \ the ExtensiveRoutingModeOption\n   structure is illustrated below:\n   enum\
    \ {(0),DRR(1),(255)} RouteMode;\n   struct {\n           RouteMode           \
    \    routemode;\n           OverlayLinkType         transport;\n           IpAddressPort\
    \           ipaddressport;\n           Destination             destinations<1..2^8-1>;\n\
    \   } ExtensiveRoutingModeOption;\n   The above structure reuses the OverlayLinkType,\
    \ Destination, and\n   IpAddressPort structures as defined in Sections 6.5.1.1,\
    \ 6.3.2.2, and\n   6.3.1.1 of [RFC6940], respectively.\n   RouteMode: refers to\
    \ which type of routing mode is indicated to the\n   destination peer.\n   OverlayLinkType:\
    \ refers to the transport type that is used to deliver\n   responses from the\
    \ destination peer to the sending peer.\n   IpAddressPort: refers to the transport\
    \ address that the destination\n   peer will use for sending responses.  This\
    \ will be a sending peer\n   address for DRR.\n   Destination: refers to the sending\
    \ peer itself.  If the routing mode\n   is DRR, then the destination only contains\
    \ the sending peer's\n   Node-ID.\n"
- title: 5.3.  Creating a Request
  contents:
  - '5.3.  Creating a Request

    '
- title: 5.3.1.  Creating a Request for DRR
  contents:
  - "5.3.1.  Creating a Request for DRR\n   When using DRR for a transaction, the\
    \ sending peer MUST set the\n   IGNORE-STATE-KEEPING flag in the ForwardingHeader.\
    \  Additionally, the\n   peer MUST construct and include a ForwardingOption structure\
    \ in the\n   ForwardingHeader.  When constructing the ForwardingOption structure,\n\
    \   the fields MUST be set as follows:\n   1)  The type MUST be set to extensive_routing_mode.\n\
    \   2)  The ExtensiveRoutingModeOption structure MUST be used for the\n      \
    \ option field within the ForwardingOption structure.  The fields\n       MUST\
    \ be defined as follows:\n       2.1)  routemode set to 0x01 (DRR).\n       2.2)\
    \  transport set as appropriate for the sender.\n       2.3)  ipaddressport set\
    \ to the peer's associated transport\n             address.\n       2.4)  The\
    \ destination structure MUST contain one value, defined\n             as type\
    \ \"node\" and set with the sending peer's own values.\n"
- title: 5.4.  Request and Response Processing
  contents:
  - "5.4.  Request and Response Processing\n   This section gives normative text for\
    \ message processing after DRR is\n   introduced.  Here, we only describe the\
    \ additional procedures for\n   supporting DRR.  Please refer to [RFC6940] for\
    \ RELOAD base\n   procedures.\n"
- title: '5.4.1.  Destination Peer: Receiving a Request and Sending a Response'
  contents:
  - "5.4.1.  Destination Peer: Receiving a Request and Sending a Response\n   When\
    \ the destination peer receives a request, it will check the\n   options in the\
    \ forwarding header.  If the destination peer cannot\n   understand the extensive_routing_mode\
    \ option in the request, it MUST\n   attempt to use SRR to return an \"Error_Unknown_Extension\"\
    \ response\n   (defined in Sections 6.3.3.1 and 14.9 of [RFC6940]) to the sending\n\
    \   peer.\n   If the routing mode is DRR, the destination peer MUST construct\
    \ the\n   Destination List for the response with only one entry, using the\n \
    \  requesting peer's Node-ID from the Via List in the request as the\n   value.\n\
    \   In the event that the routing mode is set to DRR and there is not\n   exactly\
    \ one destination, the destination peer MUST try to return an\n   \"Error_Unknown_Extension\"\
    \ response (defined in Sections 6.3.3.1 and\n   14.9 of [RFC6940]) to the sending\
    \ peer using SRR.\n   After the peer constructs the Destination List for the response,\
    \ it\n   sends the response to the transport address, which is indicated in\n\
    \   the ipaddressport field in the option using the specific transport\n   mode\
    \ in the ForwardingOption.  If the destination peer receives a\n   retransmit\
    \ with SRR preference on the message it is trying to respond\n   to now, the responding\
    \ peer SHOULD abort the DRR response and\n   use SRR.\n"
- title: '5.4.2.  Sending Peer: Receiving a Response'
  contents:
  - "5.4.2.  Sending Peer: Receiving a Response\n   Upon receiving a response, the\
    \ peer follows the rules in [RFC6940].\n   The peer SHOULD note if DRR worked,\
    \ in order to decide whether to\n   offer DRR again.  If the peer does not receive\
    \ a response until the\n   timeout, it SHOULD resend the request using SRR.\n"
- title: 6.  Overlay Configuration Extension
  contents:
  - "6.  Overlay Configuration Extension\n   This document extends the RELOAD overlay\
    \ configuration (see\n   Section 11.1 of [RFC6940]) by adding one new element,\
    \ \"route-mode\",\n   inside each \"configuration\" element.\n   The Compact Regular\
    \ Language for XML Next Generation (RELAX NG)\n   grammar for this element is:\n\
    \      namespace route-mode = \"urn:ietf:params:xml:ns:p2p:route-mode\"\n    \
    \  parameter &= element route-mode:mode { xsd:string }?\n   This namespace is\
    \ added into the <mandatory-extension> element in the\n   overlay configuration\
    \ file.  The defined routing modes include DRR\n   and RPR.\n   The mode can be\
    \ DRR or RPR and, if specified in the configuration,\n   should be the preferred\
    \ routing mode used by the application.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   The normative security recommendations of Section\
    \ 13 of [RFC6940] are\n   applicable to this document.  As a routing alternative,\
    \ the security\n   part of DRR conforms to Section 13.6 of [RFC6940], which describes\n\
    \   routing security.  For example, the DRR routing option provides\n   information\
    \ about the route back to the source.  According to\n   Section 13.6 of [RFC6940],\
    \ the entire DRR routing message MUST be\n   digitally signed and sent over via\
    \ a protected channel to protect the\n   DRR routing information.\n"
- title: 8.  IANA Considerations
  contents:
  - '8.  IANA Considerations

    '
- title: 8.1.  A New RELOAD Forwarding Option
  contents:
  - "8.1.  A New RELOAD Forwarding Option\n   A new RELOAD Forwarding Option type\
    \ has been added to the \"RELOAD\n   Forwarding Option\" registry defined in [RFC6940].\n\
    \   Code: 2\n   Forwarding Option: extensive_routing_mode\n"
- title: 8.2.  A New IETF XML Registry
  contents:
  - "8.2.  A New IETF XML Registry\n   IANA has registered the following URN in the\
    \ \"XML Namespaces\" class\n   of the \"IETF XML Registry\" in accordance with\
    \ [RFC3688].\n   URI: urn:ietf:params:xml:ns:p2p:route-mode\n   Registrant Contact:\
    \ The IESG\n   XML: This specification\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   David Bryan helped extensively with this document and\
    \ helped provide\n   some of the text, analysis, and ideas contained here.  The\
    \ authors\n   would like to thank Ted Hardie, Narayanan Vidya, Dondeti Lakshminath,\n\
    \   Bruce Lowekamp, Stephane Bryant, Marc Petit-Huguenin, and Carlos\n   Jesus\
    \ Bernardos Cano for their constructive comments.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n\
    \              January 2004.\n   [RFC6940]  Jennings, C., Lowekamp, B., Rescorla,\
    \ E., Baset, S., and\n              H. Schulzrinne, \"REsource LOcation And Discovery\
    \ (RELOAD)\n              Base Protocol\", RFC 6940, January 2014.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [Chord]    Stoica, I., Morris, R., Liben-Nowell,\
    \ D., Karger, D.,\n              Kaashoek, M., Dabek, F., and H. Balakrishnan,\
    \ \"Chord: A\n              Scalable Peer-to-Peer Lookup Protocol for Internet\n\
    \              Applications\", IEEE/ACM Transactions on Networking\n         \
    \     Volume 11, Issue 1, 17-32, February 2003.\n   [DTLS]     Modadugu, N. and\
    \ E. Rescorla, \"The Design and\n              Implementation of Datagram TLS\"\
    , Proc. 11th Network and\n              Distributed System Security Symposium\
    \ (NDSS),\n              February 2004.\n   [IGD2]     UPnP Forum, \"WANIPConnection:2\
    \ Service\", September 2010,\n              <http://upnp.org/specs/gw/\n     \
    \         UPnP-gw-WANIPConnection-v2-Service.pdf>.\n   [RFC3424]  Daigle, L. and\
    \ IAB, \"IAB Considerations for UNilateral\n              Self-Address Fixing\
    \ (UNSAF) Across Network Address\n              Translation\", RFC 3424, November\
    \ 2002.\n   [RFC5780]  MacDonald, D. and B. Lowekamp, \"NAT Behavior Discovery\n\
    \              Using Session Traversal Utilities for NAT (STUN)\",\n         \
    \     RFC 5780, May 2010.\n   [RFC6886]  Cheshire, S. and M. Krochmal, \"NAT Port\
    \ Mapping Protocol\n              (NAT-PMP)\", RFC 6886, April 2013.\n   [RFC7264]\
    \  Zong, N., Jiang, X., Even, R., and Y. Zhang, \"An Extension\n             \
    \ to the REsource LOcation And Discovery (RELOAD) Protocol\n              to Support\
    \ Relay Peer Routing\", RFC 7264, June 2014.\n   [wikiChord]\n              Wikipedia,\
    \ \"Chord (peer-to-peer)\", 2013,\n              <http://en.wikipedia.org/w/\n\
    \              index.php?title=Chord_%28peer-to-peer%29&oldid=549516287>.\n"
- title: Appendix A.  Optional Methods to Investigate Peer Connectivity
  contents:
  - "Appendix A.  Optional Methods to Investigate Peer Connectivity\n   This section\
    \ is for informational purposes only and provides some\n   mechanisms that can\
    \ be used when the configuration information does\n   not specify if DRR can be\
    \ used.  It summarizes some methods that can\n   be used by a peer to determine\
    \ its own network location compared with\n   NAT.  These methods may help a peer\
    \ to decide which routing mode it\n   may wish to try.  Note that there is no\
    \ foolproof way to determine\n   whether a peer is publicly reachable, other than\
    \ via out-of-band\n   mechanisms.  This document addresses UNilateral Self-Address\
    \ Fixing\n   (UNSAF) [RFC3424] considerations by specifying a fallback plan to\
    \ SRR\n   [RFC6940].  SRR is not an UNSAF mechanism.  This document does not\n\
    \   define any new UNSAF mechanisms.\n   For DRR to function correctly, a peer\
    \ may attempt to determine\n   whether it is publicly reachable.  If it is not,\
    \ the peer should fall\n   back to SRR.  If the peer believes it is publicly reachable,\
    \ DRR may\n   be attempted.  NATs and firewalls are two major contributors to\n\
    \   preventing DRR from functioning properly.  There are a number of\n   techniques\
    \ by which a peer can get its reflexive address on the\n   public side of the\
    \ NAT.  After obtaining the reflexive address, a\n   peer can perform further\
    \ tests to learn whether the reflexive address\n   is publicly reachable.  If\
    \ the address appears to be publicly\n   reachable, the peer to which the address\
    \ belongs can use DRR for\n   responses.\n   Some conditions that are unique in\
    \ P2PSIP architecture could be\n   leveraged to facilitate the tests.  In a P2P\
    \ overlay network, each\n   peer has only a partial view of the whole network\
    \ and knows of a few\n   peers in the overlay.  P2P routing algorithms can easily\
    \ deliver a\n   request from a sending peer to a peer with whom the sending peer\
    \ has\n   no direct connection.  This makes it easy for a peer to ask other\n\
    \   peers to send unsolicited messages back to the requester.\n   In the following\
    \ sections, we first introduce several ways for a peer\n   to get the addresses\
    \ needed for further tests.  Then, a test for\n   learning whether a peer may\
    \ be publicly reachable is proposed.\n"
- title: A.1.  Getting Addresses to Be Used as Candidates for DRR
  contents:
  - "A.1.  Getting Addresses to Be Used as Candidates for DRR\n   In order to test\
    \ whether a peer may be publicly reachable, the peer\n   should first get one\
    \ or more addresses that will be used by other\n   peers to send him messages\
    \ directly.  This address is either a local\n   address of a peer or a translated\
    \ address that is assigned by a NAT\n   to the peer.\n   Session Traversal Utilities\
    \ for NAT (STUN) is used to get a reflexive\n   address on the public side of\
    \ a NAT with the help of STUN servers.\n   NAT behavior discovery using STUN is\
    \ specified in [RFC5780].  Under\n   the RELOAD architecture, a few infrastructure\
    \ servers can be\n   leveraged for discovering NAT behavior, such as enrollment\
    \ servers,\n   diagnostic servers, bootstrap servers, etc.\n   The peer can use\
    \ a STUN Binding request to one of the STUN servers to\n   trigger a STUN Binding\
    \ response, which returns the reflexive address\n   from the server's perspective.\
    \  If the reflexive transport address is\n   the same as the source address of\
    \ the Binding request, the peer can\n   determine that there is likely no NAT\
    \ between it and the chosen\n   infrastructure server.  (Certainly, in some rare\
    \ cases, the allocated\n   address happens to be the same as the source address.\
    \  Further tests\n   will detect this case and rule it out in the end.)  Usually,\
    \ these\n   infrastructure servers are publicly reachable in the overlay, so the\n\
    \   peer can be considered publicly reachable.  On the other hand, using\n   the\
    \ techniques in [RFC5780], a peer can also decide whether it is\n   behind a NAT\
    \ with endpoint-independent mapping behavior.  If the peer\n   is behind a NAT\
    \ with endpoint-independent mapping behavior, the\n   reflexive address should\
    \ also be a candidate for further tests.\n   The Universal Plug and Play Internet\
    \ Gateway Device (UPnP-IGD) [IGD2]\n   is a mechanism that a peer can use to get\
    \ the assigned address from\n   its residential gateway, and after obtaining this\
    \ address to\n   communicate it with other peers, the peer can receive unsolicited\n\
    \   messages from outside, even though it is behind a NAT.  So, the\n   address\
    \ obtained through the UPnP mechanism should also be used for\n   further tests.\n\
    \   Another way that a peer behind NAT can learn its assigned address by\n   NAT\
    \ is via the NAT Port Mapping Protocol (NAT-PMP) [RFC6886].  As\n   with UPnP-IGD,\
    \ the address obtained using this mechanism should also\n   be tested further.\n\
    \   The above techniques are not exhaustive.  These techniques can be\n   used\
    \ to get candidate transport addresses for further tests.\n"
- title: A.2.  Public Reachability Test
  contents:
  - "A.2.  Public Reachability Test\n   Using the transport addresses obtained by\
    \ the above techniques, a\n   peer can start a test to learn whether the candidate\
    \ transport\n   address is publicly reachable.  The basic idea of the test is\
    \ that a\n   peer sends a request and expects another peer in the overlay to send\n\
    \   back a response.  If the response is successfully received by the\n   sending\
    \ peer and the peer giving the response has no direct\n   connection with the\
    \ sending peer, the sending peer can determine that\n   the address is probably\
    \ publicly reachable and hence the peer may be\n   publicly reachable at the tested\
    \ transport address.\n   In a P2P overlay, a request is routed through the overlay\
    \ and finally\n   a destination peer will terminate the request and give the response.\n\
    \   In a large system, there is a high probability that the destination\n   peer\
    \ has no direct connection with the sending peer.  Every peer\n   maintains a\
    \ connection table, particularly in the RELOAD\n   architecture, so it is easier\
    \ for a peer to see whether it has direct\n   connection with another peer.\n\
    \   If a peer wants to test whether its transport address is publicly\n   reachable,\
    \ it can send a request to the overlay.  The routing for the\n   test message\
    \ would be different from other kinds of requests because\n   it is not for storing\
    \ or fetching something to or from the overlay,\n   or for locating a specific\
    \ peer; instead, it is to get a peer who can\n   deliver to the sending peer an\
    \ unsolicited response and who has no\n   direct connection with him.  Each intermediate\
    \ peer receiving the\n   request first checks to see whether it has a direct connection\
    \ with\n   the sending peer.  If there is a direct connection, the request is\n\
    \   routed to the next peer.  If there is no direct connection, the\n   intermediate\
    \ peer terminates the request and sends the response back\n   directly to the\
    \ sending peer with the transport address under test.\n   After performing the\
    \ test, if the peer determines that it may be\n   publicly reachable, it can try\
    \ DRR in subsequent transactions.\n"
- title: Appendix B.  Comparison of Cost of SRR and DRR
  contents:
  - "Appendix B.  Comparison of Cost of SRR and DRR\n   The major advantage of using\
    \ DRR is that it reduces the number of\n   intermediate peers traversed by the\
    \ response.  This reduces the load,\n   such as processing and communication bandwidth,\
    \ on those peers'\n   resources.\n"
- title: B.1.  Closed or Managed Networks
  contents:
  - "B.1.  Closed or Managed Networks\n   As described in Section 3, many P2P systems\
    \ run in a closed or\n   managed environment (e.g., carrier networks), so network\n\
    \   administrators would know that they could safely use DRR.\n   SRR uses more\
    \ routing hops than DRR.  Assuming that there are N peers\n   in the P2P system\
    \ and Chord [Chord] [wikiChord] is applied for\n   routing, the number of hops\
    \ for a response in SRR and in DRR are\n   listed in the following table.  Establishing\
    \ a secure connection\n   between the sending peer and the responding peer with\
    \ Transport Layer\n   Security (TLS) or Datagram TLS (DTLS) requires multiple\
    \ messages.\n   Note that establishing (D)TLS secure connections for a P2P overlay\
    \ is\n   not optimal in some cases, e.g., DRR where (D)TLS is heavy for\n   temporary\
    \ connections.  Therefore, in the following table we show the\n   cases of 1)\
    \ no (D)TLS in DRR and 2) still using DTLS in DRR as\n   sub-optimal.  As the\
    \ worst-cost case, seven (7) messages are used\n   during DTLS handshaking [DTLS].\
    \  (The TLS handshake is a negotiation\n   protocol that requires two (2) round\
    \ trips, while the DTLS handshake\n   is a negotiation protocol that requires\
    \ three (3) round trips.)\n            Mode       | Success | No. of Hops | No.\
    \ of Msgs\n            ------------------------------------------------\n    \
    \        SRR        |  Yes    |     log(N)  |    log(N)\n            DRR     \
    \   |  Yes    |     1       |    1\n            DRR (DTLS) |  Yes    |     1 \
    \      |    7+1\n         Table 1: Comparison of SRR and DRR in Closed Networks\n\
    \   From the above comparison, it is clear that:\n   1)  In most cases when the\
    \ number of peers (N) > 2 (2^1), DRR uses\n       fewer hops than SRR.  Using\
    \ a shorter route means less overhead\n       and resource usage on intermediate\
    \ peers, which is an important\n       consideration for adopting DRR in the cases\
    \ where such resources\n       as CPU and bandwidth are limited, e.g., the case\
    \ of mobile,\n       wireless networks.\n   2)  In the cases when N > 256 (2^8),\
    \ DRR also uses fewer messages\n       than SRR.\n   3)  In the cases when N <\
    \ 256, DRR uses more messages than SRR (but\n       still uses fewer hops than\
    \ SRR), so the consideration of whether\n       to use DRR or SRR depends on other\
    \ factors such as using less\n       resources (bandwidth and processing) from\
    \ the intermediate peers.\n       Section 4 provides use cases where DRR has a\
    \ better chance of\n       working or where the considerations of intermediary\
    \ resources are\n       important.\n"
- title: B.2.  Open Networks
  contents:
  - "B.2.  Open Networks\n   In open networks (e.g., the Internet) where DRR is not\
    \ guaranteed to\n   work, DRR can fall back to SRR if it fails after trial, as\
    \ described\n   in Section 4.  Based on the same settings as those listed in\n\
    \   Appendix B.1, the number of hops, as well as the number of messages\n   for\
    \ a response in SRR and DRR, are listed in the following table:\n    Mode    \
    \   |       Success           | No. of Hops | No. of Msgs\n    ----------------------------------------------------------------\n\
    \    SRR        |         Yes             |   log(N)    |   log(N)\n    DRR  \
    \      |         Yes             |   1         |   1\n               | Fail &\
    \ fall back to SRR |   1+log(N)  |   1+log(N)\n    DRR (DTLS) |         Yes  \
    \           |   1         |   7+1\n               | Fail & fall back to SRR |\
    \   1+log(N)  |   8+log(N)\n          Table 2: Comparison of SRR and DRR in Open\
    \ Networks\n   From the above comparison, it can be observed that trying to first\n\
    \   use DRR could still provide an overall number of hops lower than\n   directly\
    \ using SRR.  Suppose that P peers are publicly reachable; the\n   number of hops\
    \ in DRR and SRR is P*1+(N-P)*(1+logN) and N*logN,\n   respectively.  The condition\
    \ for fewer hops in DRR is\n   P*1+(N-P)*(1+logN) < N*logN, which is P/N > 1/logN.\
    \  This means that\n   when the number of peers (N) grows, the required ratio\
    \ of publicly\n   reachable peers P/N for fewer hops in DRR decreases.  Therefore,\
    \ the\n   chance of trying DRR with fewer hops than SRR improves as the scale\n\
    \   of the network increases.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Ning Zong\n   Huawei Technologies\n   EMail: zongning@huawei.com\n\
    \   Xingfeng Jiang\n   Huawei Technologies\n   EMail: jiang.x.f@huawei.com\n \
    \  Roni Even\n   Huawei Technologies\n   EMail: roni.even@mail01.huawei.com\n\
    \   Yunfei Zhang\n   CoolPad / China Mobile\n   EMail: hishigh@gmail.com\n"
