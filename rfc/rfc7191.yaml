- title: __initial_text__
  contents:
  - "                   Cryptographic Message Syntax (CMS)\n              Key Package\
    \ Receipt and Error Content Types\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines the syntax for two Cryptographic Message Syntax\n\
    \   (CMS) content types: one for key package receipts and another for key\n  \
    \ package errors.  The key package receipt content type is used to\n   confirm\
    \ receipt of an identified key package or collection of key\n   packages.  The\
    \ key package error content type is used to indicate an\n   error occurred during\
    \ the processing of a key package.  CMS can be\n   used to digitally sign, digest,\
    \ authenticate, or encrypt these\n   content types.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7191.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Requirements Terminology ...................................2\n  \
    \    1.2. ASN.1 Syntax Notation ......................................2\n    \
    \  1.3. Processing Key Package Receipt Requests ....................3\n      1.4.\
    \ Processing Key Packages with Errors ........................3\n   2. SIR Entity\
    \ Name .................................................3\n   3. Key Package Identifier\
    \ and Receipt Request Attribute ............4\n   4. Key Package Receipt CMS Content\
    \ Type ............................6\n   5. Key Package Error CMS Content Type\
    \ ..............................8\n   6. Protecting the KeyPackageReceipt and\
    \ KeyPackageError ...........17\n   7. Using the application/cms Media Type ...........................17\n\
    \   8. IANA Considerations ............................................17\n  \
    \ 9. Security Considerations ........................................17\n   10.\
    \ Acknowledgements ..............................................18\n   11. References\
    \ ....................................................18\n      11.1. Normative\
    \ References .....................................18\n      11.2. Informative\
    \ References ...................................20\n   Appendix A. ASN.1 Module\
    \ ..........................................21\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document defines the syntax for two Cryptographic Message\
    \ Syntax\n   (CMS) [RFC5652] content types: one for key package receipts and\n\
    \   another for key package errors.  The key package receipt content type\n  \
    \ is used to confirm receipt of an identified key package or collection\n   of\
    \ key packages.  The key package error content type is used to\n   indicate an\
    \ error occurred during the processing of a key package.\n   CMS can be used to\
    \ digitally sign, digest, authenticate, or encrypt\n   these content types.\n"
- title: 1.1.  Requirements Terminology
  contents:
  - "1.1.  Requirements Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 1.2.  ASN.1 Syntax Notation
  contents:
  - "1.2.  ASN.1 Syntax Notation\n   The content types defined herein use ASN.1 ([X.680],\
    \ [X.681],\n   [X.682], and [X.683]).\n   The CONTENT-TYPE definition was updated\
    \ to the 2008 version of ASN.1\n   by [RFC6268]; however, none of the new 2008\
    \ ASN.1 tokens are used in\n   this specification, which allows compilers that\
    \ only support the 2002\n   version of ASN.1 to compile the module in Appendix\
    \ A.\n"
- title: 1.3.  Processing Key Package Receipt Requests
  contents:
  - "1.3.  Processing Key Package Receipt Requests\n   The key package or collection\
    \ of key packages [RFC4073] [RFC5958]\n   [RFC6031] [RFC6032] for which the receipt\
    \ is being generated MUST be\n   signed, and the key package MUST include the\
    \ key-package-identifier-\n   and-receipt-request attribute specified in Section\
    \ 3.\n"
- title: 1.4.  Processing Key Packages with Errors
  contents:
  - "1.4.  Processing Key Packages with Errors\n   The key package or collection of\
    \ key packages [RFC4073] [RFC5958]\n   [RFC6031] [RFC6032] for which the error\
    \ is being generated might be\n   signed.  The key package can be identified by\
    \ a key-package-\n   identifier-and-receipt-request attribute specified in Section\
    \ 3.\n"
- title: 2.  SIR Entity Name
  contents:
  - "2.  SIR Entity Name\n   Within a key distribution system, the source, intermediary,\
    \ and\n   receiver entities are identified by a Source Intermediary Recipient\n\
    \   (SIR) entity name.  The syntax for the SIR entity name does not\n   impose\
    \ any particular structure, and it accommodates straightforward\n   registration\
    \ of additional SIR entity name types.\n   The inclusion of the nameType object\
    \ identifier ensures that two\n   identifiers of different types that happen to\
    \ contain the same values\n   are not interpreted as equivalent.  Additional SIR\
    \ entity name types\n   are expected to be registered that represent different\
    \ granularities.\n   For example, one SIR entity name type might represent the\
    \ receiver\n   organization, and at a finer granularity, another SIR entity name\n\
    \   type might identify a specific device, perhaps using a manufacturer\n   identifier\
    \ and serial number.  The use of an object identifier avoids\n   the need for\
    \ a central registry of SIR entity name types.\n   The nameValue is an OCTET STRING,\
    \ which allows the canonical form of\n   any name to be carried.  Two names of\
    \ the same type are considered\n   equal if the octet strings are the same length\
    \ and contain the same\n   string of octets.\n   SIREntityNames and SIREntityName\
    \ have the following syntax:\n      SIREntityNames ::= SEQUENCE SIZE (1..MAX)\
    \ OF SIREntityName\n      SIR-ENTITY-NAME ::= CLASS {\n          &sIRENType OBJECT\
    \ IDENTIFIER UNIQUE,\n          &SIRENValue\n          } WITH SYNTAX {\n     \
    \     SYNTAX &SIRENValue IDENTIFIED BY &sIRENType }\n      SIREntityName ::= SEQUENCE\
    \ {\n          sirenType    SIR-ENTITY-NAME.&sIRENType({SIREntityNameTypes}),\n\
    \          sirenValue   OCTET STRING (CONTAINING\n                         SIR-ENTITY-NAME.&SIRENValue(\n\
    \                           {SIREntityNameTypes}{@sirenType}) ) }\n   This document\
    \ defines one SIR entity name type: the DN type.  The DN\n   type uses a nameType\
    \ of id-dn and a nameValue of a Distinguished Name\n   (DN).  The nameValue OCTET\
    \ STRING carries an ASN.1 encoded Name as\n   specified in [RFC5280].  Note that\
    \ other documents may define\n   additional types.\n      SIREntityNameTypes SIR-ENTITY-NAME\
    \ ::= {\n          siren-dn,\n          ... -- Expect additional SIR Entity Name\
    \ types -- }\n      siren-dn SIR-ENTITY-NAME ::= {\n          SYNTAX DistinguishedName\n\
    \          IDENTIFIED BY id-dn }\n      id-dn OBJECT IDENTIFIER ::= {\n      \
    \    joint-iso-ccitt(2) country(16) us(840) organization(1)\n          gov(101)\
    \ dod(2) infosec(1) sir-name-types(16) 0 }\n"
- title: 3.  Key Package Identifier and Receipt Request Attribute
  contents:
  - "3.  Key Package Identifier and Receipt Request Attribute\n   The key-package-identifier-and-receipt-request\
    \ attribute, as its name\n   implies, allows the originator to identify the key\
    \ package and,\n   optionally, request receipts.  This attribute can appear as\
    \ a signed,\n   authenticated, and content attribute.  Signed attributes are carried\n\
    \   in the CMS Signed-data content type described in Section 5 of\n   [RFC5652].\
    \  Authenticated attributes are carried in the CMS\n   Authenticated-data content\
    \ type described in Section 9 of [RFC5652]\n   or in the CMS Authenticated-enveloped-data\
    \ content type described in\n   Section 2 of [RFC5083].  Content attributes are\
    \ carried in the\n   Content-with-attributes content type described in Section\
    \ 3 of\n   [RFC4073].\n   The key-package-identifier-and-receipt-request attribute\
    \ has the\n   following syntax:\n     aa-keyPackageIdentifierAndReceiptRequest\
    \ ATTRIBUTE ::= {\n         TYPE KeyPkgIdentifierAndReceiptReq\n         IDENTIFIED\
    \ BY id-aa-KP-keyPkgIdAndReceiptReq }\n     id-aa-KP-keyPkgIdAndReceiptReq OBJECT\
    \ IDENTIFIER ::= {\n         joint-iso-itu-t(2) country(16) us(840) organization(1)\n\
    \         gov(101) dod(2) infosec(1) attributes(5) 65 }\n     KeyPkgIdentifierAndReceiptReq\
    \ ::= SEQUENCE {\n         pkgID       KeyPkgID,\n         receiptReq  KeyPkgReceiptReq\
    \ OPTIONAL }\n     KeyPkgID ::= OCTET STRING\n     KeyPkgReceiptReq ::= SEQUENCE\
    \ {\n         encryptReceipt     BOOLEAN DEFAULT FALSE,\n         receiptsFrom\
    \   [0] SIREntityNames OPTIONAL,\n         receiptsTo         SIREntityNames }\n\
    \   Even though the ATTRIBUTE syntax is defined as a SET OF\n   AttributeValue,\
    \ a key-package-identifier-and-receipt-request\n   attribute MUST have a single\
    \ attribute value; zero or multiple\n   instances of AttributeValue are not permitted.\n\
    \   The fields in the key-package-identifier-and-receipt-request\n   attribute\
    \ have the following semantics:\n      o pkgID contains an octet string, and this\
    \ syntax does not impose\n        any particular structure on the identifier.\n\
    \      o receiptReq is OPTIONAL, and when it is present, it includes an\n    \
    \    encryption receipt flag, an OPTIONAL indication of which\n        receivers\
    \ should generate receipts, and an indication of where\n        the receipts are\
    \ to be sent.\n        * The encryption receipt flag indicates whether the key\
    \ package\n          originator wants the receipt to be encrypted.  If the boolean\n\
    \          is set, then the receipt SHOULD be encrypted.\n        * The OPTIONAL\
    \ ReceiptsFrom field provides an indication of\n          which receivers SHOULD\
    \ generate receipts.  When the\n          ReceiptsFrom field is absent, all receivers\
    \ of the key package\n          are expected to return receipts.  When the ReceiptsFrom\
    \ field\n          is present, a list of SIR entity names indicates which\n  \
    \        receivers of the key package are requested to return receipts.\n    \
    \      In this case, the receiver SHOULD return a receipt only if\n          their\
    \ SIR entity name appears on the list.\n        * The receipt request does not\
    \ include any key management\n          information; however, the list of SIR\
    \ entity names in the\n          receiptsTo field can be used to select symmetric\
    \ or asymmetric\n          keying material for the receipt receivers.\n   A receiver\
    \ SHOULD ignore the nameValue associated with any\n   unrecognized nameType in\
    \ either the receiptsFrom field or the\n   receiptsTo field.\n   When the key-package-identifier-and-receipt-request\
    \ attribute appears\n   in more than one location in the overall key package,\
    \ each occurrence\n   is evaluated independently.  That is, the receiver may generate\
    \ more\n   than one receipt for a single key package.  However, the time at\n\
    \   which the receipts are sent will depend on policies that are beyond\n   the\
    \ scope of this document.\n"
- title: 4.  Key Package Receipt CMS Content Type
  contents:
  - "4.  Key Package Receipt CMS Content Type\n   The key package receipt content\
    \ type is used to confirm receipt of an\n   identified key package or collection\
    \ of key packages.  This content\n   type MUST be encoded using the Distinguished\
    \ Encoding Rules (DER)\n   [X.690].\n   The key package receipt content type has\
    \ the following syntax:\n     ct-key-package-receipt CONTENT-TYPE ::= {\n    \
    \     TYPE KeyPackageReceipt\n         IDENTIFIED BY id-ct-KP-keyPackageReceipt\
    \ }\n     id-ct-KP-keyPackageReceipt OBJECT IDENTIFIER ::= {\n         joint-iso-itu-t(2)\
    \ country(16) us(840) organization(1)\n         gov(101) dod(2) infosec(1) formats(2)\n\
    \         key-package-content-types(78) 3 }\n     KeyPackageReceipt ::= SEQUENCE\
    \ {\n         version          KeyPkgVersion DEFAULT v2,\n         receiptOf \
    \       KeyPkgIdentifier,\n         receivedBy       SIREntityName }\n     --\
    \ Revised definition of KeyPkgVersion from [RFC6031]\n     KeyPkgVersion ::= INTEGER\
    \  { v1(1), v2(2) } (1 .. 65535)\n     KeyPkgIdentifier ::= CHOICE {\n       \
    \  pkgID            KeyPkgID,\n         attribute        SingleAttribute {{ KeyPkgIdentifiers\
    \ }} }\n     KeyPkgID ::= OCTET STRING\n     KeyPkgIdentifiers ATTRIBUTE ::= {\
    \ ... }\n   The KeyPackageReceipt fields are used as follows:\n      o version\
    \ identifies version of the key package receipt content.\n        For this version\
    \ of the specification, the default value, v2,\n        MUST be used.  Note that\
    \ v1 was defined in an earlier version,\n        but the use of v1 is deprecated.\n\
    \      o receiptOf offers two alternatives for identifying the key\n        package\
    \ for which the receipt is being generated.  The first\n        alternative, pkgID,\
    \ MUST be supported, and pkgID provides the\n        key package identifier of\
    \ the key package or collection of key\n        packages for which this receipt\
    \ is being generated.  This key\n        package identifier value MUST exactly\
    \ match the key package\n        identifier value of the key-package-identifier-and-receipt-\n\
    \        request attribute in the received key package or collection.\n      \
    \  The key-package-identifier-and-receipt-request attribute is\n        described\
    \ Section 3.  The second alternative allows alternate\n        attributes to be\
    \ used to define the identifier.\n      o receivedBy identifies the entity that\
    \ received the key package.\n        The entity is named by an SIR entity name\
    \ as specified in\n        Section 2.\n   Key package receipts MUST be encapsulated\
    \ in a CMS SignedData content\n   type to carry the signature of the entity that\
    \ is confirming receipt\n   of the identified key package or collection of key\
    \ packages.  Key\n   package receipts MAY be encrypted by encapsulating them in\
    \ the CMS\n   EncryptedData content type, the CMS EnvelopedData content type,\
    \ or\n   the AuthEnvelopedData content type.  When the key package receipt is\n\
    \   signed and encrypted, it MUST be signed prior to being encrypted.\n   Note\
    \ that delivery assurance is the responsibility of the protocol\n   that is used\
    \ to transport and track key packages.  The key package\n   receipt content type\
    \ can be used in conjunction with that protocol as\n   part of an overall delivery\
    \ assurance solution.\n   Because the receipts are signed, all recipients that\
    \ generate key\n   package receipts MUST have a private signature key to sign\
    \ the\n   receipt as well as store their own certificate or have a means of\n\
    \   obtaining the key identifier of their public key.  If memory is a\n   concern,\
    \ the public key identifier can be computed from the public\n   key.\n   If the\
    \ receipt signer has access to a real-time clock, then the\n   binary-signing-time\
    \ [RFC6019] signed attribute SHOULD be included in\n   the key package receipt\
    \ to provide the date and time when it was\n   generated.\n"
- title: 5.  Key Package Error CMS Content Type
  contents:
  - "5.  Key Package Error CMS Content Type\n   The key package error content type\
    \ provides an indication of the\n   reason for rejection of a key package or collection\
    \ of key packages.\n   This content type MUST be encoded using the Distinguished\
    \ Encoding\n   Rules (DER) [X.690].\n   The key package error content type has\
    \ the following syntax:\n     ct-key-package-error CONTENT-TYPE ::= {\n      \
    \   TYPE KeyPackageError IDENTIFIED BY id-ct-KP-keyPackageError }\n     id-ct-KP-keyPackageError\
    \ OBJECT IDENTIFIER ::= {\n         joint-iso-itu-t(2) country(16) us(840) organization(1)\n\
    \         gov(101) dod(2) infosec(1) formats(2)\n         key-package-content-types(78)\
    \ 6 }\n     KeyPackageError ::= SEQUENCE {\n         version        KeyPkgVersion\
    \ DEFAULT v2,\n         errorOf    [0] KeyPkgIdentifier OPTIONAL,\n         errorBy\
    \        SIREntityName,\n         errorCode      ErrorCodeChoice }\n     KeyPkgVersion\
    \ ::= INTEGER  { v1(1), v2(2) } (1 .. 65535)\n     KeyPkgIdentifier ::= CHOICE\
    \ {\n         pkgID            KeyPkgID,\n         attribute        SingleAttribute\
    \ {{ KeyPkgIdentifiers }} }\n     KeyPkgID ::= OCTET STRING\n     KeyPkgIdentifiers\
    \ ATTRIBUTE ::= { ... }\n     ErrorCodeChoice ::= CHOICE {\n         enum    \
    \       EnumeratedErrorCode,\n         oid            OBJECT IDENTIFIER }\n  \
    \   EnumeratedErrorCode ::= ENUMERATED {\n         decodeFailure             \
    \        (1),\n         badContentInfo                    (2),\n         badSignedData\
    \                     (3),\n         badEncapContent                   (4),\n\
    \         badCertificate                    (5),\n         badSignerInfo     \
    \                (6),\n         badSignedAttrs                    (7),\n     \
    \    badUnsignedAttrs                  (8),\n         missingContent         \
    \           (9),\n         noTrustAnchor                    (10),\n         notAuthorized\
    \                    (11),\n         badDigestAlgorithm               (12),\n\
    \         badSignatureAlgorithm            (13),\n         unsupportedKeySize\
    \               (14),\n         unsupportedParameters            (15),\n     \
    \    signatureFailure                 (16),\n         insufficientMemory     \
    \          (17),\n         incorrectTarget                  (23),\n         missingSignature\
    \                 (29),\n         resourcesBusy                    (30),\n   \
    \      versionNumberMismatch            (31),\n         revokedCertificate   \
    \            (33),\n     --  Error codes with values <= 33 are aligned with [RFC5934]\n\
    \         ambiguousDecrypt                 (60),\n         noDecryptKey      \
    \               (61),\n         badEncryptedData                 (62),\n     \
    \    badEnvelopedData                 (63),\n         badAuthenticatedData   \
    \          (64),\n         badAuthEnvelopedData             (65),\n         badKeyAgreeRecipientInfo\
    \         (66),\n         badKEKRecipientInfo              (67),\n         badEncryptContent\
    \                (68),\n         badEncryptAlgorithm              (69),\n    \
    \     missingCiphertext                (70),\n         decryptFailure        \
    \           (71),\n         badMACAlgorithm                  (72),\n         badAuthAttrs\
    \                     (73),\n         badUnauthAttrs                   (74),\n\
    \         invalidMAC                       (75),\n         mismatchedDigestAlg\
    \              (76),\n         missingCertificate               (77),\n      \
    \   tooManySigners                   (78),\n         missingSignedAttributes \
    \         (79),\n         derEncodingNotUsed               (80),\n         missingContentHints\
    \              (81),\n         invalidAttributeLocation         (82),\n      \
    \   badMessageDigest                 (83),\n         badKeyPackage           \
    \         (84),\n         badAttributes                    (85),\n         attributeComparisonFailure\
    \       (86),\n         unsupportedSymmetricKeyPackage   (87),\n         unsupportedAsymmetricKeyPackage\
    \  (88),\n         constraintViolation              (89),\n         ambiguousDefaultValue\
    \            (90),\n         noMatchingRecipientInfo          (91),\n        \
    \ unsupportedKeyWrapAlgorithm      (92),\n         badKeyTransRecipientInfo  \
    \       (93),\n         other                           (127),\n         ... --\
    \ Expect additional error codes  -- }\n   The KeyPackageError fields are used\
    \ as follows:\n      o version identifies version of the key package error content\n\
    \        structure.  For this version of the specification, the default\n    \
    \    value, v2, MUST be used.  Note that v1 was defined in an earlier\n      \
    \  version, but the use of v1 is deprecated.\n      o errorOf is OPTIONAL, and\
    \ it provides the identifier of the\n        keying material for which this error\
    \ is being generated.  This\n        is omitted if the receiver or intermediary\
    \ cannot parse the\n        received data to determine the package identifier.\
    \  Also,\n        encryption may prevent an intermediary from obtaining any of\
    \ the\n        identifiers.  Two alternatives for identifying the keying\n   \
    \     material are possible; see KeyPkgIdentifier as described in\n        Section\
    \ 4.  The value MUST exactly match the value of the key-\n        package-identifier-and-receipt-request\
    \ attribute in the received\n        key package or collection.  The key-package-identifier-and-\n\
    \        receipt-request attribute is described in Section 3.\n      o errorBy\
    \ identifies the entity that received the key package.\n        The entity is\
    \ named by an SIR entity name as specified in\n        Section 2.\n      o errorCode\
    \ contains a code that indicates the reason for the\n        error.  It contains\
    \ either an enumerated error code from the\n        list below or an extended\
    \ error code represented by an object\n        identifier.  The enumerated error\
    \ code alternative MUST be\n        supported.  The object identifier error code\
    \ MAY be supported.\n          * decodeFailure is used to indicate that the key\
    \ package\n            intermediary or receiver was unable to successfully decode\n\
    \            the provided package.  The specified content type and the\n     \
    \       provided content do not match.\n          * badContentInfo is used to\
    \ indicate that the ContentInfo\n            syntax is invalid or that the contentType\
    \ carried within the\n            ContentInfo is unknown or unsupported.\n   \
    \       * badSignedData is used to indicate that the SignedData syntax\n     \
    \       is invalid, the version is unknown or unsupported, or more\n         \
    \   than one entry is present in digestAlgorithms.\n          * badEncapContent\
    \ is used to indicate that the\n            EncapsulatedContentInfo syntax is\
    \ invalid within a\n            SignedData or an AuthenticatedData or the\n  \
    \          EncryptedContentInfo syntax is invalid within an\n            AuthEnvelopedData.\n\
    \          * badCertificate is used to indicate that the syntax for one\n    \
    \        or more certificates in CertificateSet or elsewhere is\n            invalid\
    \ or unsupported.\n          * badSignerInfo is used to indicate that the SignerInfo\
    \ syntax\n            is invalid or the version is unknown or unsupported.\n \
    \         * badSignedAttrs is used to indicate that the signedAttrs\n        \
    \    syntax within SignerInfo is invalid.\n          * badUnsignedAttrs is used\
    \ to indicate that the unsignedAttrs\n            within SignerInfo contains one\
    \ or more attributes.  Since\n            unrecognized attributes are ignored,\
    \ this error code is used\n            when the object identifier for the attribute\
    \ is recognized,\n            but the value is malformed or internally inconsistent.\
    \  In\n            addition, this error code can be used when policy prohibits\n\
    \            an implementation from supporting unsigned attributes.\n        \
    \  * missingContent is used to indicate that the optional\n            eContent\
    \ is missing in EncapsulatedContentInfo, which is\n            required when including\
    \ an asymmetric key package, a\n            symmetric key package, and an encrypted\
    \ key package.  This\n            error can be generated due to problems located\
    \ in SignedData\n            or AuthenticatedData.\n            Note that CMS\
    \ EncapsulatedContentInfo eContent field is\n            optional [RFC5652]; however,\
    \ [RFC5958], [RFC6031], and\n            [RFC6032] require that the eContent be\
    \ present.\n          * noTrustAnchor is used to indicate that the\n         \
    \   subjectKeyIdentifier does not identify the public key of a\n            trust\
    \ anchor or a certification path that terminates with an\n            installed\
    \ trust anchor.\n          * notAuthorized is used to indicate that the sid within\n\
    \            SignerInfo leads to an installed trust anchor, but that\n       \
    \     trust anchor is not an authorized signer for the received\n            content\
    \ type.\n          * badDigestAlgorithm is used to indicate that the\n       \
    \     digestAlgorithm in either SignerInfo, SignedData, or\n            AuthenticatedData\
    \ is unknown or unsupported.\n          * badSignatureAlgorithm is used to indicate\
    \ that the\n            signatureAlgorithm in SignerInfo is unknown or unsupported.\n\
    \          * unsupportedKeySize is used to indicate that the\n            signatureAlgorithm\
    \ in SignerInfo is known and supported, but\n            the digital signature\
    \ could not be validated because an\n            unsupported key size was employed\
    \ by the signer.\n            Alternatively, the algorithm used in EnvelopedData,\n\
    \            AuthenticatedData, or AuthEnvelopedData to generate the key-\n  \
    \          encryption key is known and supported, but an unsupported\n       \
    \     key size was employed by the originator.\n          * unsupportedParameters\
    \ is used to indicate that the\n            signatureAlgorithm in SignerInfo is\
    \ known, but the digital\n            signature could not be validated because\
    \ unsupported\n            parameters were employed by the signer.  Alternatively,\
    \ the\n            algorithm used in EnvelopedData, AuthenticatedData, or\n  \
    \          AuthEnvelopedData to generate the key-encryption key is\n         \
    \   known and supported, but unsupported parameters were\n            employed\
    \ by the originator.\n          * signatureFailure is used to indicate that the\n\
    \            signatureAlgorithm in SignerInfo is known and supported, but\n  \
    \          the digital signature in the signature field within\n            SignerInfo\
    \ could not be validated.\n          * insufficientMemory indicates that the key\
    \ package could not\n            be processed because the intermediary or receiver\
    \ did not\n            have sufficient memory to store the keying material.\n\
    \          * incorrectTarget indicates that a receiver is not the\n          \
    \  intended recipient.\n          * missingSignature indicates that the receiver\
    \ requires the\n            key package to be signed or authenticated with a Message\n\
    \            Authentication Code (MAC), but the received key package was\n   \
    \         not signed or authenticated.\n          * resourcesBusy indicates that\
    \ the resources necessary to\n            process the key package are not available\
    \ at the present\n            time, but the resources might be available at some\
    \ point in\n            the future.\n          * versionNumberMismatch indicates\
    \ that the version number in a\n            received key package is not acceptable.\n\
    \          * revokedCertificate indicates that one or more of the\n          \
    \  certificates needed to properly process the key package has\n            been\
    \ revoked.\n          * ambiguousDecrypt indicates that the EncryptedData content\n\
    \            type was used, and the key package receiver could not\n         \
    \   determine the appropriate keying material to perform the\n            decryption.\n\
    \          * noDecryptKey indicates that the receiver does not have the\n    \
    \        key named in the content-decryption-key-identifier attribute\n      \
    \      (see [RFC6032]).\n          * badEncryptedData indicates that the EncryptedData\
    \ syntax is\n            invalid or the version is unknown or unsupported.\n \
    \         * badEnvelopedData indicates that the EnvelopedData syntax is\n    \
    \        invalid or the version is unknown or unsupported.\n          * badAuthenticatedData\
    \ indicates that the AuthenticatedData\n            syntax is invalid or the version\
    \ is unknown or unsupported.\n          * badAuthEnvelopedData indicates that\
    \ the AuthEnvelopedData\n            syntax is invalid or the version is unknown\
    \ or unsupported.\n          * badKeyAgreeRecipientInfo indicates that the\n \
    \           KeyAgreeRecipientInfo syntax is invalid or the version is\n      \
    \      unknown or unsupported.\n          * badKEKRecipientInfo indicates that\
    \ the KEKRecipientInfo\n            syntax is invalid or the version is unknown\
    \ or unsupported.\n          * badEncryptContent indicates that the EncryptedContentInfo\n\
    \            syntax is invalid, or that the content type carried within\n    \
    \        the contentType is unknown or unsupported.\n          * badEncryptAlgorithm\
    \ indicates that the encryption algorithm\n            identified by contentEncryptionAlgorithm\
    \ in\n            EncryptedContentInfo is unknown or unsupported.  This can\n\
    \            result from EncryptedData, EnvelopedData, or\n            AuthEnvelopedData.\n\
    \          * missingCiphertext indicates that the optional\n            encryptedContent\
    \ is missing in EncryptedContentInfo, which\n            is required when including\
    \ an asymmetric key package, a\n            symmetric key package, and an encrypted\
    \ key package.\n          * decryptFailure indicates that the encryptedContent\
    \ in\n            EncryptedContentInfo did not decrypt properly.\n          *\
    \ badMACAlgorithm indicates that the MAC algorithm identified\n            by\
    \ MessageAuthenticationCodeAlgorithm in AuthenticatedData\n            is unknown\
    \ or unsupported.\n          * badAuthAttrs is used to indicate that the authAttrs\
    \ syntax\n            within AuthenticatedData or AuthEnvelopedData is invalid.\n\
    \            Since unrecognized attributes are ignored, this error code\n    \
    \        is used when the object identifier for the attribute is\n           \
    \ recognized, but the value is malformed or internally\n            inconsistent.\n\
    \          * badUnauthAttrs is used to indicate that the unauthAttrs\n       \
    \     syntax within AuthenticatedData or AuthEnvelopedData is\n            invalid.\
    \  Since unrecognized attributes are ignored, this\n            error code is\
    \ used when the object identifier for the\n            attribute is recognized,\
    \ but the value is malformed or\n            internally inconsistent.\n      \
    \    * invalidMAC is used to indicate that the message\n            authentication\
    \ code value within AuthenticatedData or\n            AuthEnvelopedData did not\
    \ validate properly.\n          * mismatchedDigestAlg is used to indicate that\
    \ the digest\n            algorithm in digestAlgorithms field within SignedData\
    \ does\n            not match the digest algorithm used in the signature\n   \
    \         algorithm.\n          * missingCertificate indicates that a signature\
    \ could not be\n            verified using a trust anchor or a certificate from\
    \ the\n            certificates field within SignedData.  Similarly, this error\n\
    \            code can indicate that a needed certificate is missing when\n   \
    \         processing EnvelopedData, AuthEnvelopedData, or\n            AuthenticatedData.\n\
    \          * tooManySigners indicates that a SignedData content contained\n  \
    \          more than one SignerInfo for a content type that requires\n       \
    \     only one signer.\n          * missingSignedAttributes indicates that a SignedInfo\
    \ within a\n            SignedData content did not contain any signed attributes;\
    \ at\n            a minimum, the content-type and message-digest must be\n   \
    \         present, as per [RFC5652].  Similarly, this error code can\n       \
    \     indicate that required authenticated attributes are missing\n          \
    \  when processing AuthEnvelopedData or AuthenticatedData.\n          * derEncodingNotUsed\
    \ indicates that the content contained BER\n            encoding, or some other\
    \ encoding, where DER encoding was\n            required.\n          * missingContentHints\
    \ indicates that a SignedData content\n            encapsulates a content other\
    \ than a key package or an\n            encrypted key package; however, the content-hints\
    \ attribute\n            [RFC2634] is not included.  Similarly, this error code\
    \ can\n            indicate that the content-hints attribute was missing when\n\
    \            processing AuthEnvelopedData or AuthenticatedData.\n          * invalidAttributeLocation\
    \ indicates that an attribute\n            appeared in an unacceptable location.\n\
    \          * badMessageDigest indicates that the value of the message-\n     \
    \       digest attribute [RFC5652] did not match the calculated\n            value.\n\
    \          * badKeyPackage indicates that the SymmetricKeyPackage\n          \
    \  [RFC6031] or AsymmetricKeyPackage [RFC5958] syntax is\n            invalid\
    \ or that the version is unknown.\n          * badAttributes indicates that an\
    \ attribute collection either\n            contained multiple instances of the\
    \ same attribute type that\n            allows only one instance or contained\
    \ an attribute instance\n            with multiple values in an attribute that\
    \ allows only one\n            value.\n          * attributeComparisonFailure\
    \ indicates that multiple instances\n            of an attribute failed the comparison\
    \ rules for the type of\n            attribute.\n          * unsupportedSymmetricKeyPackage\
    \ indicates that the\n            implementation does not support symmetric key\
    \ packages\n            [RFC6031].\n          * unsupportedAsymmetricKeyPackage\
    \ indicates that the\n            implementation does not support asymmetric key\
    \ packages\n            [RFC5958].\n          * constraintViolation indicates\
    \ that one or more of the\n            attributes has a value that is not in the\
    \ authorized set of\n            values for the signer [RFC6010].  That is, the\
    \ value is in\n            conflict with the constraints imposed on the signer.\n\
    \          * ambiguousDefaultValue indicates that one or more of the\n       \
    \     attributes that is part of the signer's constraints is\n            omitted\
    \ from the key package, and the constraint permits\n            more than one\
    \ value; therefore, the appropriate default\n            value for that attribute\
    \ or attribute cannot be determined.\n          * noMatchingRecipientInfo indicates\
    \ that a recipientInfo could\n            not be found for the recipient.  This\
    \ can result from a ktri\n            or kari found in EncryptedData, EnvelopedData,\
    \ or\n            AuthEnvelopedData.\n          * unsupportedKeyWrapAlgorithm\
    \ indicates that the key wrap\n            algorithm is not supported.\n     \
    \     * badKeyTransRecipientInfo indicates that the\n            KeyTransRecipientInfo\
    \ syntax is invalid or the version is\n            unknown or unsupported.\n \
    \         * other indicates that the key package could not be processed,\n   \
    \         but the reason is not covered by any of the assigned status\n      \
    \      codes.  Use of this status code SHOULD be avoided.\n   The key package\
    \ error content type MUST be signed if the entity\n   generating it is capable\
    \ of signing it.  For example, a device will\n   be incapable of signing when\
    \ it is in early stages of deployment and\n   it has not been configured with\
    \ a private signing key or a device has\n   an internal error that prevents use\
    \ of its private signing key.  When\n   it is signed, the key package error MUST\
    \ be encapsulated in a CMS\n   SignedData content type to carry the signature\
    \ of the party that is\n   indicating an error.  When it is encrypted, the key\
    \ package error\n   MUST be encapsulated in a CMS EnvelopedData content type,\
    \ a CMS\n   EncryptedData content type, or a CMS AuthEnvelopedData content type.\n\
    \   When a key package error is signed and encrypted, it MUST be signed\n   prior\
    \ to being encrypted.\n   All devices that generate signed key package error reports\
    \ MUST store\n   their own certificate or have a means of obtaining the key identifier\n\
    \   of their public key.  If memory is a concern, the public key\n   identifier\
    \ can be computed from the public key.\n   If the error report signer has access\
    \ to a real-time clock, then the\n   binary-signing-time attribute [RFC6019] SHOULD\
    \ be included in the key\n   package error to provide the date and time when it\
    \ was generated.\n"
- title: 6.  Protecting the KeyPackageReceipt and KeyPackageError
  contents:
  - "6.  Protecting the KeyPackageReceipt and KeyPackageError\n   CMS protecting content\
    \ types, [RFC5652] and [RFC5083], can be used to\n   provide security to the KeyPackageReceipt\
    \ and KeyPackageError content\n   types:\n      o SignedData can be used to apply\
    \ a digital signature.\n      o EncryptedData can be used to encrypt the content\
    \ type with\n        simple symmetric encryption, where the sender and the receiver\n\
    \        already share the necessary encryption key.\n      o EnvelopedData can\
    \ be used to encrypt the content type with\n        symmetric encryption, where\
    \ the sender and the receiver do not\n        already share the necessary encryption\
    \ key.\n      o AuthenticatedData can be used to integrity protect the content\n\
    \        type with message authentication algorithms that support\n        authenticated\
    \ encryption, where key management information is\n        handled in a manner\
    \ similar to EnvelopedData.\n      o AuthEnvelopedData can be used to protect\
    \ the content types with\n        algorithms that support authenticated encryption,\
    \ where key\n        management information is handled in a manner similar to\n\
    \        EnvelopedData.\n"
- title: 7.  Using the application/cms Media Type
  contents:
  - "7.  Using the application/cms Media Type\n   The media type and parameters for\
    \ carrying a key package receipt or a\n   key package error content type are specified\
    \ in [RFC7193].\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   IANA has updated the reference for the following\
    \ registration in the\n   \"SMI Security for S/MIME Module Identifier (1.2.840.113549.1.9.16.0)\"\
    \n   registry:\n      63  id-mod-keyPkgReceiptAndErrV2  [RFC7191]\n"
- title: 9.  Security Considerations
  contents:
  - "9.  Security Considerations\n   The key package receipt and key package error\
    \ contents are not\n   necessarily protected.  These content types can be combined\
    \ with a\n   security protocol to protect the contents of the package.\n   The\
    \ KeyPkgReceiptReq structure includes a receiptsFrom list and a\n   receiptsTo\
    \ list.  Both lists contain SIREntityNames.  The syntax does\n   not specify a\
    \ limit on the number of SIREntityNames that may be\n   included in either of\
    \ these lists.  In addition, there is\n   purposefully no requirement that the\
    \ receiptTo entries have any\n   relation to the sender of the key package.  To\
    \ avoid these features\n   being used as part of a denial-of-service amplification,\
    \ receipts\n   should only be returned for key packages with a valid signature\
    \ from\n   a trusted signer.\n   If an implementation is willing to accept key\
    \ packages from more than\n   one source, then there is a possibility that the\
    \ same key package\n   identifier could be used by more than one source.  As a\
    \ result, there\n   is the potential for a receipt for one key package to be confused\n\
    \   with the receipt for another, potentially leading to confusion about\n   the\
    \ keying material that is available to the recipient.  In\n   environments with\
    \ multiple key sources, a convention for assignment\n   of key package identifiers\
    \ can avoid this potential confusion\n   altogether.\n   In some situations, returning\
    \ very detailed error information can\n   provide an attacker with insight into\
    \ the security processing.  Where\n   this is a concern, the implementation should\
    \ return the most generic\n   error code that is appropriate.  However, detailed\
    \ error codes are\n   very helpful during development, debugging, and interoperability\n\
    \   testing.  For this reason, implementations may want to have a way to\n   configure\
    \ the use of a generic error code or a detailed one.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   Many thanks to Radia Perlman, Sean Turner, Jim Schaad,\
    \ and Carl\n   Wallace for their insightful review.  Thanks to Robert Sparks for\n\
    \   improved wording.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC2634]  Hoffman, P., Ed., \"Enhanced Security Services for S/MIME\"\
    ,\n              RFC 2634, June 1999.\n   [RFC4073]  Housley, R., \"Protecting\
    \ Multiple Contents with the\n              Cryptographic Message Syntax (CMS)\"\
    , RFC 4073, May 2005.\n   [RFC5280]  Cooper, D., Santesson, S., Farrell, S., Boeyen,\
    \ S.,\n              Housley, R., and W. Polk, \"Internet X.509 Public Key\n \
    \             Infrastructure Certificate and Certificate Revocation List\n   \
    \           (CRL) Profile\", RFC 5280, May 2008.\n   [RFC5652]  Housley, R., \"\
    Cryptographic Message Syntax (CMS)\", STD 70,\n              RFC 5652, September\
    \ 2009.\n   [RFC5912]  Hoffman, P. and J. Schaad, \"New ASN.1 Modules for the\n\
    \              Public Key Infrastructure Using X.509 (PKIX)\", RFC 5912,\n   \
    \           June 2010.\n   [RFC5958]  Turner, S., \"Asymmetric Key Packages\"\
    , RFC 5958, August\n              2010.\n   [RFC6010]  Housley, R., Ashmore, S.,\
    \ and C. Wallace, \"Cryptographic\n              Message Syntax (CMS) Content\
    \ Constraints Extension\", RFC\n              6010, September 2010.\n   [RFC6019]\
    \  Housley, R., \"BinaryTime: An Alternate Format for\n              Representing\
    \ Date and Time in ASN.1\", RFC 6019, September\n              2010.\n   [RFC6031]\
    \  Turner, S. and R. Housley, \"Cryptographic Message Syntax\n              (CMS)\
    \ Symmetric Key Package Content Type\", RFC 6031,\n              December 2010.\n\
    \   [RFC6032]  Turner, S. and R. Housley, \"Cryptographic Message Syntax\n   \
    \           (CMS) Encrypted Key Package Content Type\", RFC 6032,\n          \
    \    December 2010.\n   [RFC6268]  Schaad, J. and S. Turner, \"Additional New\
    \ ASN.1 Modules\n              for the Cryptographic Message Syntax (CMS) and\
    \ the Public\n              Key Infrastructure Using X.509 (PKIX)\", RFC 6268,\
    \ July\n              2011.\n   [RFC7193]  Turner, S., Housley, R., and J. Schaad,\
    \ \"The\n              application/cms Media Type\", RFC 7193, April 2014.\n \
    \  [X.680]    ITU-T Recommendation X.680 (2002) | ISO/IEC 8824-1:2002.\n     \
    \         Information Technology - Abstract Syntax Notation One.\n   [X.681] \
    \   ITU-T Recommendation X.681 (2002) | ISO/IEC 8824-2:2002.\n              Information\
    \ Technology - Abstract Syntax Notation One:\n              Information Object\
    \ Specification.\n   [X.682]    ITU-T Recommendation X.682 (2002) | ISO/IEC 8824-3:2002.\n\
    \              Information Technology - Abstract Syntax Notation One:\n      \
    \        Constraint Specification.\n   [X.683]    ITU-T Recommendation X.683 (2002)\
    \ | ISO/IEC 8824-4:2002.\n              Information Technology - Abstract Syntax\
    \ Notation One:\n              Parameterization of ASN.1 Specifications.\n   [X.690]\
    \    ITU-T Recommendation X.690 (2002) | ISO/IEC 8825- 1:2002.\n             \
    \ Information Technology - ASN.1 encoding rules:\n              Specification\
    \ of Basic Encoding Rules (BER), Canonical\n              Encoding Rules (CER)\
    \ and Distinguished Encoding Rules\n              (DER).\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [RFC5083]  Housley, R., \"Cryptographic Message\
    \ Syntax (CMS)\n              Authenticated-Enveloped-Data Content Type\", RFC\
    \ 5083,\n              November 2007.\n   [RFC5934]  Housley, R., Ashmore, S.,\
    \ and C. Wallace, \"Trust Anchor\n              Management Protocol (TAMP)\",\
    \ RFC 5934, August 2010.\n"
- title: Appendix A.  ASN.1 Module
  contents:
  - "Appendix A.  ASN.1 Module\n   This annex provides the normative ASN.1 definitions\
    \ for the\n   structures described in this specification using ASN.1 as defined\
    \ in\n   [X.680], [X.681], [X.682], and [X.683].\n   KeyPackageReceiptAndErrorModuleV2\n\
    \     { iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n     \
    \  smime(16) modules(0) id-mod-keyPkgReceiptAndErrV2(63) }\n   DEFINITIONS IMPLICIT\
    \ TAGS ::=\n   BEGIN\n   -- EXPORTS ALL\n   IMPORTS\n   -- FROM New SMIME ASN.1\
    \ [RFC6268]\n   CONTENT-TYPE\n     FROM CryptographicMessageSyntax-2010\n    \
    \   { iso(1) member-body(2) us(840) rsadsi(113549)\n         pkcs(1) pkcs-9(9)\
    \ smime(16) modules(0) id-mod-cms-2009(58) }\n   -- From New PKIX ASN.1 [RFC5912]\n\
    \   ATTRIBUTE, SingleAttribute {}\n     FROM PKIX-CommonTypes-2009\n       { iso(1)\
    \ identified-organization(3) dod(6) internet(1)\n         security(5) mechanisms(5)\
    \ pkix(7) id-mod(0)\n         id-mod-pkixCommon-02(57) }\n   DistinguishedName\n\
    \     FROM PKIX1Explicit-2009\n       { iso(1) identified-organization(3) dod(6)\
    \ internet(1)\n         security(5) mechanisms(5) pkix(7) id-mod(0)\n        \
    \ id-mod-pkix1-explicit-02(51)}\n   ;\n   ---\n   --- Key Package Version Number\
    \ (revised from [RFC6031])\n   ---\n   KeyPkgVersion ::= INTEGER  { v1(1), v2(2)\
    \ } (1 .. 65535)\n   --\n   -- SIR Entity Name\n   --\n   SIREntityNames ::= SEQUENCE\
    \ SIZE (1..MAX) OF SIREntityName\n   SIREntityNameTypes SIR-ENTITY-NAME ::= {\n\
    \       siren-dn,\n       ... -- Expect additional SIR Entity Name types -- }\n\
    \   SIR-ENTITY-NAME ::= CLASS {\n       &sIRENType OBJECT IDENTIFIER UNIQUE,\n\
    \       &SIRENValue\n       } WITH SYNTAX {\n       SYNTAX &SIRENValue IDENTIFIED\
    \ BY &sIRENType }\n   SIREntityName ::= SEQUENCE {\n       sirenType      SIR-ENTITY-NAME.&sIRENType({SIREntityNameTypes}),\n\
    \       sirenValue     OCTET STRING (CONTAINING\n                        SIR-ENTITY-NAME.&SIRENValue(\n\
    \                          {SIREntityNameTypes}{@sirenType}) ) }\n   siren-dn\
    \ SIR-ENTITY-NAME ::= {\n       SYNTAX DistinguishedName\n       IDENTIFIED BY\
    \ id-dn }\n   id-dn OBJECT IDENTIFIER ::= {\n       joint-iso-ccitt(2) country(16)\
    \ us(840) organization(1)\n       gov(101) dod(2) infosec(1) sir-name-types(16)\
    \ 0 }\n   --\n   -- Attribute Definitions\n   --\n   aa-keyPackageIdentifierAndReceiptRequest\
    \ ATTRIBUTE ::= {\n       TYPE KeyPkgIdentifierAndReceiptReq\n       IDENTIFIED\
    \ BY id-aa-KP-keyPkgIdAndReceiptReq }\n   id-aa-KP-keyPkgIdAndReceiptReq OBJECT\
    \ IDENTIFIER ::= {\n       joint-iso-itu-t(2) country(16) us(840) organization(1)\n\
    \       gov(101) dod(2) infosec(1) attributes(5) 65 }\n   KeyPkgIdentifierAndReceiptReq\
    \ ::= SEQUENCE {\n       pkgID       KeyPkgID,\n       receiptReq  KeyPkgReceiptReq\
    \ OPTIONAL }\n   KeyPkgID ::= OCTET STRING\n   KeyPkgReceiptReq ::= SEQUENCE {\n\
    \       encryptReceipt     BOOLEAN DEFAULT FALSE,\n       receiptsFrom   [0] SIREntityNames\
    \ OPTIONAL,\n       receiptsTo         SIREntityNames }\n   --\n   -- Content\
    \ Type Definitions\n   --\n   KeyPackageContentTypes CONTENT-TYPE ::= {\n    \
    \ ct-key-package-receipt |\n     ct-key-package-error,\n     ... -- Expect additional\
    \ content types -- }\n   -- Key Package Receipt CMS Content Type\n   ct-key-package-receipt\
    \ CONTENT-TYPE ::= {\n       TYPE KeyPackageReceipt\n       IDENTIFIED BY id-ct-KP-keyPackageReceipt\
    \ }\n   id-ct-KP-keyPackageReceipt OBJECT IDENTIFIER ::= {\n       joint-iso-itu-t(2)\
    \ country(16) us(840) organization(1)\n       gov(101) dod(2) infosec(1) formats(2)\n\
    \       key-package-content-types(78) 3 }\n   KeyPackageReceipt ::= SEQUENCE {\n\
    \       version          KeyPkgVersion DEFAULT v2,\n       receiptOf        KeyPkgIdentifier,\n\
    \       receivedBy       SIREntityName }\n   KeyPkgIdentifier ::= CHOICE {\n \
    \      pkgID            KeyPkgID,\n       attribute        SingleAttribute {{\
    \ KeyPkgIdentifiers }} }\n   KeyPkgIdentifiers ATTRIBUTE ::= { ... }\n   -- Key\
    \ Package Receipt CMS Content Type\n   ct-key-package-error CONTENT-TYPE ::= {\n\
    \       TYPE KeyPackageError IDENTIFIED BY id-ct-KP-keyPackageError }\n   id-ct-KP-keyPackageError\
    \ OBJECT IDENTIFIER ::= {\n       joint-iso-itu-t(2) country(16) us(840) organization(1)\n\
    \       gov(101) dod(2) infosec(1) formats(2)\n       key-package-content-types(78)\
    \ 6 }\n   KeyPackageError ::= SEQUENCE {\n       version        KeyPkgVersion\
    \ DEFAULT v2,\n       errorOf    [0] KeyPkgIdentifier OPTIONAL,\n       errorBy\
    \        SIREntityName,\n       errorCode      ErrorCodeChoice }\n   ErrorCodeChoice\
    \ ::= CHOICE {\n       enum           EnumeratedErrorCode,\n       oid       \
    \     OBJECT IDENTIFIER }\n   EnumeratedErrorCode ::= ENUMERATED {\n       decodeFailure\
    \                     (1),\n       badContentInfo                    (2),\n  \
    \     badSignedData                     (3),\n       badEncapContent         \
    \          (4),\n       badCertificate                    (5),\n       badSignerInfo\
    \                     (6),\n       badSignedAttrs                    (7),\n  \
    \     badUnsignedAttrs                  (8),\n       missingContent          \
    \          (9),\n       noTrustAnchor                    (10),\n       notAuthorized\
    \                    (11),\n       badDigestAlgorithm               (12),\n  \
    \     badSignatureAlgorithm            (13),\n       unsupportedKeySize      \
    \         (14),\n       unsupportedParameters            (15),\n       signatureFailure\
    \                 (16),\n       insufficientMemory               (17),\n     \
    \  incorrectTarget                  (23),\n       missingSignature           \
    \      (29),\n       resourcesBusy                    (30),\n       versionNumberMismatch\
    \            (31),\n       revokedCertificate               (33),\n   --  Error\
    \ codes with values <= 33 are aligned with [RFC5934]\n       ambiguousDecrypt\
    \                 (60),\n       noDecryptKey                     (61),\n     \
    \  badEncryptedData                 (62),\n       badEnvelopedData           \
    \      (63),\n       badAuthenticatedData             (64),\n       badAuthEnvelopedData\
    \             (65),\n       badKeyAgreeRecipientInfo         (66),\n       badKEKRecipientInfo\
    \              (67),\n       badEncryptContent                (68),\n       badEncryptAlgorithm\
    \              (69),\n       missingCiphertext                (70),\n       decryptFailure\
    \                   (71),\n       badMACAlgorithm                  (72),\n   \
    \    badAuthAttrs                     (73),\n       badUnauthAttrs           \
    \        (74),\n       invalidMAC                       (75),\n       mismatchedDigestAlg\
    \              (76),\n       missingCertificate               (77),\n       tooManySigners\
    \                   (78),\n       missingSignedAttributes          (79),\n   \
    \    derEncodingNotUsed               (80),\n       missingContentHints      \
    \        (81),\n       invalidAttributeLocation         (82),\n       badMessageDigest\
    \                 (83),\n       badKeyPackage                    (84),\n     \
    \  badAttributes                    (85),\n       attributeComparisonFailure \
    \      (86),\n       unsupportedSymmetricKeyPackage   (87),\n       unsupportedAsymmetricKeyPackage\
    \  (88),\n       constraintViolation              (89),\n       ambiguousDefaultValue\
    \            (90),\n       noMatchingRecipientInfo          (91),\n       unsupportedKeyWrapAlgorithm\
    \      (92),\n       badKeyTransRecipientInfo         (93),\n       other    \
    \                       (127),\n       ... -- Expect additional error codes  --\
    \ }\n   END\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Russ Housley\n   Vigil Security, LLC\n   918 Spring Knoll\
    \ Drive\n   Herndon, VA 20170\n   USA\n   EMail: housley@vigilsec.com\n"
