- title: __initial_text__
  contents:
  - "       Threat Analysis for TCP Extensions for Multipath Operation\n         \
    \               with Multiple Addresses\n"
- title: Abstract
  contents:
  - "Abstract\n   Multipath TCP (MPTCP for short) describes the extensions proposed\
    \ for\n   TCP so that endpoints of a given TCP connection can use multiple\n \
    \  paths to exchange data.  Such extensions enable the exchange of\n   segments\
    \ using different source-destination address pairs, resulting\n   in the capability\
    \ of using multiple paths in a significant number of\n   scenarios.  Some level\
    \ of multihoming and mobility support can be\n   achieved through these extensions.\
    \  However, the support for multiple\n   IP addresses per endpoint may have implications\
    \ on the security of\n   the resulting MPTCP.  This note includes a threat analysis\
    \ for MPTCP.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6181.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.  Scope  . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   3.  Related Work . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n   4.  Basic MPTCP  . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  6\n   5.  Flooding Attacks . . . . . . . . . . . . . . . . . . . . .\
    \ . .  8\n   6.  Hijacking Attacks  . . . . . . . . . . . . . . . . . . . . .\
    \ . 10\n     6.1.  Hijacking Attacks to the Basic MPTCP . . . . . . . . . . .\
    \ 10\n     6.2.  Time-Shifted Hijacking Attacks . . . . . . . . . . . . . . 13\n\
    \     6.3.  NAT Considerations . . . . . . . . . . . . . . . . . . . . 14\n  \
    \ 7.  Recommendation . . . . . . . . . . . . . . . . . . . . . . . . 15\n   8.\
    \  Security Considerations  . . . . . . . . . . . . . . . . . . . 16\n   9.  Contributors\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . 16\n   10. Acknowledgments\
    \  . . . . . . . . . . . . . . . . . . . . . . . 16\n   11. References . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . 16\n     11.1. Normative References\
    \ . . . . . . . . . . . . . . . . . . . 16\n     11.2. Informative References\
    \ . . . . . . . . . . . . . . . . . . 16\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Multipath TCP (MPTCP for short) describes the extensions\
    \ proposed for\n   TCP [RFC0793] so that endpoints of a given TCP connection can\
    \ use\n   multiple paths to exchange data.  Such extensions enable the exchange\n\
    \   of segments using different source-destination address pairs,\n   resulting\
    \ in the capability of using multiple paths in a significant\n   number of scenarios.\
    \  Some level of multihoming and mobility support\n   can be achieved through\
    \ these extensions.  However, the support for\n   multiple IP addresses per endpoint\
    \ may have implications on the\n   security of the resulting MPTCP.  This note\
    \ includes a threat\n   analysis for MPTCP.  There are many other ways to provide\
    \ multiple\n   paths for a TCP connection other than the usage of multiple\n \
    \  addresses.  The threat analysis performed in this document is limited\n   to\
    \ the specific case of using multiple addresses per endpoint.\n"
- title: 2.  Scope
  contents:
  - "2.  Scope\n   There are multiple ways to achieve Multipath TCP.  Essentially,\
    \ what\n   is needed is for different segments of the communication to be\n  \
    \ forwarded through different paths by enabling the sender to specify\n   some\
    \ form of path selector.  There are multiple options for such a\n   path selector,\
    \ including the usage of different next hops, using\n   tunnels to different egress\
    \ points, and so on.  The scope of the\n   analysis included in this note is limited\
    \ to a particular approach,\n   namely MPTCP, that relies on the usage of multiple\
    \ IP address per\n   endpoint and that uses different source-destination address\
    \ pairs as\n   a means to express different paths.  So, in the rest of this note,\n\
    \   the MPTCP expression will refer to this multi-addressed flavor of\n   Multipath\
    \ TCP [MPTCP-MULTIADDRESSED].\n   This goal of this note is to perform a threat\
    \ analysis for MPTCP.\n   Introducing the support of multiple addresses per endpoint\
    \ in a\n   single TCP connection may result in additional vulnerabilities\n  \
    \ compared to single-path TCP.  The scope of this note is to identify\n   and\
    \ characterize these new vulnerabilities.  So, the scope of the\n   analysis is\
    \ limited to the additional vulnerabilities resulting from\n   the multi-address\
    \ support compared to the current TCP (where each\n   endpoint only has one address\
    \ available for use per connection).  A\n   full analysis of the complete set\
    \ of threats is explicitly out of the\n   scope.  The goal of this analysis is\
    \ to help the MPTCP designers\n   create an MPTCP specification that is as secure\
    \ as the current TCP.\n   It is a non-goal of this analysis to help in the design\
    \ of MPTCP that\n   is more secure than regular TCP.\n   The focus of the analysis\
    \ is on attackers that are not along the\n   path, at least not during the whole\
    \ duration of the connection.  In\n   the current single-path TCP, an on-path\
    \ attacker can launch a\n   significant number of attacks, including eavesdropping,\
    \ connection\n   hijacking Man-in-the-Middle (MiTM) attacks, and so on.  However,\
    \ it\n   is not possible for the off-path attackers to launch such attacks.\n\
    \   There is a middle ground in case the attacker is located along the\n   path\
    \ for a short period of time to launch the attack and then moves\n   away, but\
    \ the attack effects still apply.  These are the so-called\n   time-shifted attacks.\
    \  Since these are not possible in today's TCP,\n   they are also consider in\
    \ the analysis.  So, summarizing, both\n   attacks launched by off-path attackers\
    \ and time-shifted attacks are\n   considered to be within scope.  Attacks launched\
    \ by on-path attackers\n   are out of scope, since they also apply to current\
    \ single-path TCP.\n   However, that some current on-path attacks may become more\
    \ difficult\n   with Multipath TCP, since an attacker (on a single path) will\
    \ not\n   have visibility of the complete data stream.\n"
- title: 3.  Related Work
  contents:
  - "3.  Related Work\n   There is a significant amount of previous work in terms\
    \ of analysis\n   of protocols that support address agility.  The most relevant\
    \ ones\n   are presented in this section.\n   Most of the problems related to\
    \ address agility have been deeply\n   analyzed and understood in the context\
    \ of Route Optimization support\n   in Mobile IPv6 (MIPv6 RO) [RFC3775].  [RFC4225]\
    \ includes the\n   rationale for the design of the security of MIPv6 RO.  All\
    \ the\n   attacks described in the aforementioned analysis apply here and are\n\
    \   an excellent basis for our own analysis.  The main differences are as\n  \
    \ follows:\n   o  In MIPv6 RO, the address binding affects all the communications\n\
    \      involving an address, while in the MPTCP case, a single connection\n  \
    \    is at stake.  If a binding between two addresses is created at the\n    \
    \  IP layer, this binding can and will affect all the connections\n      that\
    \ involve those addresses.  However, in MPTCP, if an additional\n      address\
    \ is added to an ongoing TCP connection, the additional\n      address will/can\
    \ only affect the connection at hand and not other\n      connections, even if\
    \ the same address is being used for those\n      other connections.  The result\
    \ is that, in MPTCP, there is much\n      less at stake and the resulting vulnerabilities\
    \ are less.  On the\n      other hand, it is very important to keep the assumption\
    \ valid that\n      the address bindings for a given connection do not affect\
    \ other\n      connections.  If reusing of binding or security information is\
    \ to\n      be considered, this assumption could be no longer valid and the\n\
    \      full impact of the vulnerabilities must be assessed.\n   o  In MIPv6, there\
    \ is a trusted third party, called the Home Agent\n      that can help with some\
    \ security problems, as expanded in the next\n      bullet.\n   o  In MIPv6 RO,\
    \ there is the assumption that the original address\n      (Home Address) through\
    \ which the connection has been established\n      is always available, and in\
    \ case it is not, the communication will\n      be lost.  This is achieved by\
    \ leveraging in the on the trusted\n      party (the Home Agent) to relay the\
    \ packets to the current\n      location of the Mobile Node.  In MPTCP, it is\
    \ an explicit goal to\n      provide communication resilience when one of the\
    \ address pairs is\n      no longer usable, so it is not possible to leverage\
    \ on the\n      original address pair to be always working.\n   o  MIPv6 RO is,\
    \ of course, designed for IPv6, and it is an explicit\n      goal of MPTCP to\
    \ support both IPv6 and IPv4.  Some MIPv6 RO\n      security solutions rely on\
    \ the usage of some characteristics of\n      IPv6 (such as the usage of Cryptographically\
    \ Generated Addresses\n      (CGA) [RFC3972]), which will not be usable in the\
    \ context of\n      MPTCP.\n   o  As opposed to MPTCP, MIPv6 RO does not have\
    \ connection-state-\n      information, including sequence numbers, port numbers\
    \ that could\n      be leveraged to provide security in some form.\n   In the\
    \ Shim6 [RFC5533] design, similar issues related to address\n   agility were considered\
    \ and a threat analysis was also performed\n   [RFC4218].  The analysis performed\
    \ for Shim6 also largely applies to\n   the MPTCP context, the main differences\
    \ being:\n   o  The Shim6 protocol is a layer 3 protocol so all the communications\n\
    \      involving the target address are at stake; in MPTCP, the impact\n     \
    \ can be limited to a single TCP connection.\n   o  Similar to MIPv6 RO, Shim6\
    \ only uses IPv6 addresses as identifiers\n      and leverages on some of their\
    \ properties to provide the security,\n      such as relying on CGA or Hash-Based\
    \ Addresses (HBA) [RFC5535],\n      which is not possible in the MPTCP case where\
    \ IPv4 addresses must\n      be supported.\n   o  Similar to MIPv6 RO, Shim6 does\
    \ not have a connection-state-\n      information, including sequence numbers,\
    \ port that could be\n      leveraged to provide security in some form.\n   Stream\
    \ Control Transmission Protocol (SCTP) [RFC4960]is a transport\n   protocol that\
    \ supports multiple addresses per endpoint and the\n   security implications are\
    \ very close to the ones of MPTCP.  A\n   security analysis, identifying a set\
    \ of attacks and proposed\n   solutions was performed in [RFC5062].  The results\
    \ of this analysis\n   apply directly to the case of MPTCP.  However, the analysis\
    \ was\n   performed after the base SCTP was designed and the goal of the\n   document\
    \ was essentially to improve the security of SCTP.  As such,\n   the document\
    \ is very specific to the actual SCTP specification and\n   relies on the SCTP\
    \ messages and behavior to characterize the issues.\n   While some them can be\
    \ translated to the MPTCP case, some may be\n   caused by the specific behavior\
    \ of SCTP.\n   So, the conclusion is that while there is significant amount of\n\
    \   previous work that is closely related, and it can and will be used it\n  \
    \ as a basis for this analysis, there is a set of characteristics that\n   are\
    \ specific to MPTCP that grant the need for a specific analysis for\n   MPTCP.\
    \  The goal of this analysis is to help MPTCP designers to\n   include a set of\
    \ security mechanisms that prevent the introduction of\n   new vulnerabilities\
    \ to the Internet due to the adoption of MPTCP.\n"
- title: 4.  Basic MPTCP
  contents:
  - "4.  Basic MPTCP\n   The goal of this document is to serve as input for MPTCP\
    \ designers to\n   properly take into account the security issues.  As such, the\n\
    \   analysis cannot be performed for a specific MPTCP specification, but\n   must\
    \ be a general analysis that applies to the widest possible set of\n   MPTCP designs.\
    \  In order to do that, the fundamental features that\n   any MPTCP must provide\
    \ are identified and only those are assumed\n   while performing the security\
    \ analysis.  In some cases, there is a\n   design choice that significantly influences\
    \ the security aspects of\n   the resulting protocol.  In that case, both options\
    \ are considered.\n   It is assumed that any MPTCP will behave in the case of\
    \ a single\n   address per endpoint as TCP.  This means that an MPTCP connection\n\
    \   will be established by using the TCP 3-way handshake and will use a\n   single\
    \ address pair.\n   The addresses used for the establishment of the connection\
    \ do have a\n   special role in the sense that this is the address used as identifier\n\
    \   by the upper layers.  The address used as destination address in the\n   SYN\
    \ packet is the address that the application is using to identify\n   the peer\
    \ and has been obtained either through the DNS (with or\n   without DNS Security\
    \ (DNSSEC) validation) or passed by a referral or\n   manually introduced by the\
    \ user.  As such, the initiator does have a\n   certain amount of trust in the\
    \ fact that it is establishing a\n   communication with that particular address.\
    \  If due to MPTCP, packets\n   end up being delivered to an alternative address,\
    \ the trust that the\n   initiator has placed on that address would be deceived.\
    \  In any case,\n   the adoption of MPTCP necessitates a slight evolution of the\n\
    \   traditional TCP trust model, in that the initiator is additionally\n   trusting\
    \ the peer to provide additional addresses that it will trust\n   to the same\
    \ degree as the original pair.  An application or\n   implementation that cannot\
    \ trust the peer in this way should not make\n   use of multiple paths.\n   During\
    \ the 3-way handshake, the sequence number will be synchronized\n   for both ends,\
    \ as in regular TCP.  It is assumed that an MPTCP\n   connection will use a single\
    \ sequence number for the data, even if\n   the data is exchanged through different\
    \ paths, as MPTCP provides an\n   in-order delivery service of bytes\n   Once\
    \ the connection is established, the MPTCP extensions can be used\n   to add addresses\
    \ for each of the endpoints.  This is achieved by each\n   end sending a control\
    \ message containing the additional address(es).\n   In order to associate the\
    \ additional address to an ongoing\n   connection, the connection needs to be\
    \ identified.  It is assumed\n   that the connection can be identified by the\
    \ 4-tuple of source\n   address, source port, destination address, destination\
    \ port used for\n   the establishment of the connection.  So, at least, the control\n\
    \   message that will convey the additional address information can also\n   contain\
    \ the 4-tuple in order to inform about what connection the\n   address belong\
    \ to (if no other connection identifier is defined).\n   There are two different\
    \ ways to convey address information:\n   o  Explicit mode: the control message\
    \ contain a list of addresses.\n   o  Implicit mode: the address added is the\
    \ one included in the source\n      address field of the IP header\n   These two\
    \ modes have different security properties for some type of\n   attacks.  The\
    \ explicit mode seems to be the more vulnerable to abuse.\n   The implicit mode\
    \ may benefit from forms of ingress filtering\n   security, which would reduce\
    \ the possibility of an attacker to add\n   any arbitrary address to an ongoing\
    \ connection.  However, ingress\n   filtering deployment is far from universal,\
    \ and it is unwise to rely\n   on it as a basis for the protection of MPTCP.\n\
    \   Further consideration regarding the interaction between ingress\n   filtering\
    \ and implicit mode signaling is needed in the case that an\n   address that is\
    \ no longer available from the MPTCP connection is\n   removed.  A host attached\
    \ to a network that performs ingress\n   filtering and using implicit signaling\
    \ would not be able to remove an\n   address that is no longer available (either\
    \ because of a failure or\n   due to a mobility event) from an ongoing MPTCP connection.\n\
    \   It is assumed that MPTCP will use all the address pairs that it has\n   available\
    \ for sending packets, and that it will distribute the load\n   based on congestion\
    \ among the different paths.\n"
- title: 5.  Flooding Attacks
  contents:
  - "5.  Flooding Attacks\n   The first type of attacks that are introduced by address\
    \ agility are\n   the flooding (or bombing) attacks.  The setup for this attack\
    \ is\n   depicted in the following figure:\n               +--------+        (step\
    \ 1)           +------+\n               |Attacker| ------------------------- |Source|\n\
    \               |    A   |IPA                     IPS|  S   |\n              \
    \ +--------+                          /+------+\n                            \
    \                      /\n                                        (step 2) /\n\
    \                                                /\n                         \
    \                      v IPT\n                                           +------+\n\
    \                                           |Target|\n                       \
    \                    |  T   |\n                                           +------+\n\
    \   The scenario consists of an Attacker A who has an IP address IPA.  A\n   server\
    \ that can generate a significant amount of traffic (such as a\n   streaming server),\
    \ called source S and that has IP address IPS.\n   Target T has an IP address\
    \ IPT.\n   In step 1 of this attack, the Attacker A establishes an MPTCP\n   connection\
    \ with the source of the traffic server S and starts\n   downloading a significant\
    \ amount of traffic.  The initial connection\n   only involves one IP address\
    \ per endpoint, IPA and IPS.  Once the\n   download is on course, in step 2 of\
    \ the attack, the Attacker A adds\n   IPT as one of the available addresses for\
    \ the communication.  How the\n   additional address is added depends on the MPTCP\
    \ address management\n   mode.  In explicit address management, the Attacker A\
    \ only needs to\n   send a signaling packet conveying address IPT.  In implicit\
    \ mode, the\n   Attacker A would need to send a packet with IPT as the source\n\
    \   address.  Depending on whether ingress filtering is deployed and the\n   location\
    \ of the attacker, it may or may not be possible for the\n   attacker to send\
    \ such a packet.  At this stage, the MPTCP connection\n   still has a single address\
    \ for the Source S, i.e., IPS, but has two\n   addresses for the Attacker A, IPA,\
    \ and IPT.  The attacker now\n   attempts to get the Source S to send the traffic\
    \ of the ongoing\n   download to the Target T IP address, i.e., IPT.  The attacker\
    \ can do\n   that by pretending that the path between IPA and IPT is congested\
    \ but\n   that the path between IPS and IPT is not.  In order to do that, it\n\
    \   needs to send ACKs for the data that flows through the path between\n   IPS\
    \ and IPT and not send ACKs for the data that is sent to IPA.  The\n   details\
    \ of this will depend on how the data sent through the\n   different paths is\
    \ ACKed.  One possibility is that ACKs for the data\n   sent using a given address\
    \ pair should come in packets containing the\n   same address pair.  If so, the\
    \ attacker would need to send ACKs using\n   packets containing IPT as the source\
    \ address to keep the attack\n   flowing.  This may or may not be possible depending\
    \ on the deployment\n   of ingress filtering and the location of the attacker.\
    \  The attacker\n   would also need to guess the sequence number of the data being\
    \ sent\n   to the Target.  Once the attacker manages to perform these actions,\n\
    \   the attack is on place and the download will hit the target.  In this\n  \
    \ type of attack, the Source S still thinks it is sending packets to\n   the Attacker\
    \ A while in reality it is sending the packet to Target T.\n   Once the traffic\
    \ from the Source S start hitting the Target T, the\n   target will react.  Since\
    \ the packets are likely to belong to a non-\n   existent TCP connection, the\
    \ Target T will issue RST packets.  It is\n   relevant to understand how MPTCP\
    \ reacts to incoming RST packets.  It\n   seems that the at least the MPTCP that\
    \ receives a RST packet should\n   terminate the packet exchange corresponding\
    \ to the particular address\n   pair (maybe not the complete MPTCP connection,\
    \ but at least it should\n   not send more packets with the address pair involved\
    \ in the RST\n   packet).  However, if the attacker, before redirecting the traffic\n\
    \   has managed to increase the window size considerably, the flight size\n  \
    \ could be enough to impose a significant amount of traffic to the\n   Target\
    \ node.  There is a subtle operation that the attacker needs to\n   achieve in\
    \ order to launch a significant attack.  On the one hand, it\n   needs to grow\
    \ the window enough so that the flight size is big enough\n   to cause enough\
    \ effect; on the other hand, the attacker needs to be\n   able to simulate congestion\
    \ on the IPA-IPS path so that traffic is\n   actually redirected to the alternative\
    \ path without significantly\n   reducing the window.  This will heavily depend\
    \ on how the coupling of\n   the windows between the different paths works, in\
    \ particular how the\n   windows are increased.  Some designs of the congestion\
    \ control window\n   coupling could render this attack ineffective.  If the MPTCP\
    \ requires\n   performing slow start per subflow, then the flooding will be limited\n\
    \   by the slow-start initial window size.\n   Previous protocols, such as MIPv6\
    \ RO and SCTP, that have to deal with\n   this type of attacks have done so by\
    \ adding a reachability check\n   before actually sending data to a new address.\
    \  The solution used in\n   other protocols would include the Source S to explicitly\
    \ asking the\n   host sitting in the new address (the Target T sitting in IPT)\
    \ whether\n   it is willing to accept packets from the MPTCP connection identified\n\
    \   by the 4-tuple IPA, port A, IPS, port S.  Since this is not part of\n   the\
    \ established connection that Target T has, T would not accept the\n   request\
    \ and Source S would not use IPT to send packets for this MPTCP\n   connection.\
    \  Usually, the request also includes a nonce that cannot\n   be guessed by the\
    \ Attacker A so that it cannot fake the reply to the\n   request easily.  In the\
    \ case of SCTP, it sends a message with a 64-\n   bit nonce (in a HEARTBEAT).\n\
    \   One possible approach to do this reachability test would be to\n   perform\
    \ a 3-way handshake for each new address pair that is going to\n   be used in\
    \ an MPTCP connection.  While there are other reasons for\n   doing this (such\
    \ as NAT traversal), such approach would also act as a\n   reachability test and\
    \ would prevent the flooding attacks described in\n   this section.\n   Another\
    \ type of flooding attack that could potentially be performed\n   with MPTCP is\
    \ one where the attacker initiates a communication with a\n   peer and includes\
    \ a long list of alternative addresses in explicit\n   mode.  If the peer decides\
    \ to establish subflows with all the\n   available addresses, the attacker has\
    \ managed to achieve an amplified\n   attack, since by sending a single packet\
    \ containing all the\n   alternative addresses, it triggers the peer to generate\
    \ packets to\n   all the destinations.\n"
- title: 6.  Hijacking Attacks
  contents:
  - '6.  Hijacking Attacks

    '
- title: 6.1.  Hijacking Attacks to the Basic MPTCP
  contents:
  - "6.1.  Hijacking Attacks to the Basic MPTCP\n   The hijacking attacks essentially\
    \ use the MPTCP address agility to\n   allow an attacker to hijack a connection.\
    \  This means that the victim\n   of a connection thinks that it is talking to\
    \ a peer, while it is\n   actually exchanging packets with the attacker.  In some\
    \ sense, it is\n   the dual of the flooding attacks (where the victim thinks it\
    \ is\n   exchanging packets with the attacker but in reality is sending the\n\
    \   packets to the target).\n   The scenario for a hijacking attack is described\
    \ in the next figure.\n                +------+                           +------+\n\
    \                | Node | ------------------------- | Node |\n               \
    \ |   1  |IP1                     IP2|  2   |\n                +------+      \
    \                    /+------+\n                                             \
    \    /\n                                                /\n                  \
    \                             /\n                                            \
    \  v IPA\n                                         +--------+\n              \
    \                           |Attacker|\n                                     \
    \    |    A   |\n                                         +--------+\n   An MPTCP\
    \ connection is established between Node 1 and Node 2.  The\n   connection is\
    \ using only one address per endpoint, IP1 and IP2.  The\n   attacker then launches\
    \ the hijacking attack by adding IPA as an\n   additional address for Node 1.\
    \  There is not much difference between\n   explicit or implicit address management,\
    \ since, in both cases, the\n   Attacker A could easily send a control packet\
    \ adding the address IPA,\n   either as control data or as the source address\
    \ of the control\n   packet.  In order to be able to hijack the connection, the\
    \ attacker\n   needs to know the 4-tuple that identifies the connection, including\n\
    \   the pair of addresses and the pair of ports.  It seems reasonable to\n   assume\
    \ that knowing the source and destination IP addresses and the\n   port of the\
    \ server side is fairly easy for the attacker.  Learning\n   the port of the client\
    \ (i.e., of the initiator of the connection) may\n   prove to be more challenging.\
    \  The attacker would need to guess what\n   the port is or to learn it by intercepting\
    \ the packets.  Assuming\n   that the attacker can gather the 4-tuple and issue\
    \ the message adding\n   IPA to the addresses available for the MPTCP connection,\
    \ then the\n   Attacker A has been able to participate in the communication. \
    \ In\n   particular:\n   o  Segments flowing from the Node 2: Depending how the\
    \ usage of\n      addresses is defined, Node 2 will start using IPA to send data\
    \ to.\n      In general, since the main goal is to achieve multipath\n      capabilities,\
    \ it can be assumed that unless there are already many\n      IP address pairs\
    \ in use in the MPTCP connection, Node 2 will start\n      sending data to IPA.\
    \  This means that part of the data of the\n      communication will reach the\
    \ attacker but probably not all of it.\n      This already has negative effects,\
    \ since Node 1 will not receive\n      all the data from Node 2.  Moreover, from\
    \ the application\n      perspective, this would result in a Denial-of-Service\
    \ (DoS)\n      attack, since the byte flow will stop waiting for the missing\n\
    \      data.  However, it is not enough to achieve full hijacking of the\n   \
    \   connection, since part of data will be still delivered to IP1, so\n      it\
    \ would reach Node 1 and not the attacker.  In order for the\n      attacker to\
    \ receive all the data of the MPTCP connection, the\n      attacker must somehow\
    \ remove IP1 of the set of available addresses\n      for the connection.  In\
    \ the case of implicit address management,\n      this operation is likely to\
    \ imply sending a termination packet\n      with IP1 as source address, which\
    \ may or may not be possible for\n      the attacker depending on whether ingress\
    \ filtering is in place\n      and the location of the attacker.  If explicit\
    \ address management\n      is used, then the attacker will send a remove address\
    \ control\n      packet containing IP1.  Once IP1 is removed, all the data sent\
    \ by\n      Node 2 will reach the attacker and the incoming traffic has been\n\
    \      hijacked.\n   o  Segments flowing to the Node 2: As soon as IPA is accepted\
    \ by Node\n      2 as part of the address set for the MPTCP connection, the\n\
    \      attacker can send packets using IPA, and those packets will be\n      considered\
    \ as part of MPTCP connection by Node 2.  This means that\n      the attacker\
    \ will be able to inject data into the MPTCP\n      connection, so from this perspective,\
    \ the attacker has hijacked\n      part of the outgoing traffic.  However, Node\
    \ 1 would still be able\n      to send traffic that will be received by Node 2\
    \ as part of the\n      MPTCP connection.  This means that there will be two sources\
    \ of\n      data, i.e., Node 1 and the attacker, potentially preventing the\n\
    \      full hijacking of the outgoing traffic by the attacker.  In order\n   \
    \   to achieve a full hijacking, the attacker would need to remove IP1\n     \
    \ from the set of available addresses.  This can be done using the\n      same\
    \ techniques described in the previous paragraph.\n   A related attack that can\
    \ be achieved using similar techniques would\n   be an MiTM attack.  The scenario\
    \ for the attack is depicted in the\n   figure below.\n                      \
    \  +------+                 +------+\n                        | Node | ---------------\
    \ | Node |\n                        |   1  |IP1           IP2|  2   |\n      \
    \                  +------+ \\              /+------+\n                      \
    \            \\            /\n                                   \\          /\n\
    \                                    \\        /\n                           \
    \         v IPA  v\n                                   +--------+\n          \
    \                         |Attacker|\n                                   |   \
    \ A   |\n                                   +--------+\n   There is an established\
    \ connection between Node 1 and Node 2.  The\n   Attacker A will use the MPTCP\
    \ address agility capabilities to place\n   itself as a MiTM.  In order to do\
    \ so, it will add IP address IPA as\n   an additional address for the MPTCP connection\
    \ on both Node 1 and\n   Node 2.  This is essentially the same technique described\
    \ earlier in\n   this section, only that it is used against both nodes involved\
    \ in the\n   communication.  The main difference is that in this case, the\n \
    \  attacker can simply sniff the content of the communication that is\n   forwarded\
    \ through it and in turn forward the data to the peer of the\n   communication.\
    \  The result is that the attacker can place himself in\n   the middle of the\
    \ communication and sniff part of the traffic\n   unnoticed.  Similar considerations\
    \ about how the attacker can manage\n   to get to see all the traffic by removing\
    \ the genuine address of the\n   peer apply.\n"
- title: 6.2.  Time-Shifted Hijacking Attacks
  contents:
  - "6.2.  Time-Shifted Hijacking Attacks\n   A simple way to prevent off-path attackers\
    \ from launching hijacking\n   attacks is to provide security for the control\
    \ messages that adds and\n   removes addresses by the usage of a cookie.  In this\
    \ type of\n   approaches, the peers involved in the MPTCP connection agree on\
    \ a\n   cookie that is exchanged in plaintext during the establishment of the\n\
    \   connection and that needs to be presented in every control packet\n   that\
    \ adds or removes an address for any of the peers.  The result is\n   that the\
    \ attacker needs to know the cookie in order to launch any of\n   the hijacking\
    \ attacks described earlier.  This implies that off-path\n   attackers can no\
    \ longer perform the hijacking attacks and that only\n   on-path attackers can\
    \ do so, so one may consider a cookie-based\n   approach to secure MPTCP connection\
    \ results in similar security to\n   current TCP.  While it is close, it is not\
    \ entirely true.\n   The main difference between the security of an MPTCP secured\
    \ through\n   cookies and the current TCP is the time-shifted attacks.  As has\
    \ been\n   described earlier, a time-shifted attack is one where the attacker\
    \ is\n   along the path during a period of time, and then moves away but the\n\
    \   effects of the attack still remain, after the attacker is long gone.\n   In\
    \ the case of an MPTCP secured through the usage of cookies, the\n   attacker\
    \ needs to be along the path until the cookie is exchanged.\n   After the attacker\
    \ has learned the cookie, it can move away from the\n   path and can still launch\
    \ the hijacking attacks described in the\n   previous section.\n   There are several\
    \ types of approaches that provide some protection\n   against hijacking attacks\
    \ and that are vulnerable to some forms of\n   time-shifted attacks.  A general\
    \ taxonomy of solutions and the\n   residual threats for each type is presented\
    \ next:\n   o  Cookie-based solution: As it has been described earlier, one\n\
    \      possible approach is to use a cookie that is sent in cleartext in\n   \
    \   every MPTCP control message that adds a new address to the\n      existing\
    \ connection.  The residual threat in this type of solution\n      is that any\
    \ attacker that can sniff any of these control messages\n      will learn the\
    \ cookie and will be able to add new addresses at any\n      given point in the\
    \ lifetime of the connection.  Moreover, the\n      endpoints will not detect\
    \ the attack since the original cookie is\n      being used by the attacker. \
    \ Summarizing, the vulnerability window\n      of this type of attacks includes\
    \ all the flow establishment\n      exchanges and it is undetectable by the endpoints.\n\
    \   o  Shared secret exchanged in plaintext: An alternative option that\n    \
    \  is more secure than the cookie-based approach is to exchange a key\n      in\
    \ cleartext during the establishment of the first subflow and\n      then validate\
    \ the following subflows by using a keyed Hashed\n      Message Authentication\
    \ Code (HMAC) signature using the shared key.\n      This solution would be vulnerable\
    \ to attackers sniffing the\n      message exchange for the establishment of the\
    \ first subflow, but\n      after that, the shared key is not transmitted any\
    \ more, so the\n      attacker cannot learn it through sniffing any other message.\n\
    \      Unfortunately, in order to be compatible with NATs (see analysis\n    \
    \  below) even though this approach includes a keyed HMAC signature,\n      this\
    \ signature cannot cover the IP address that is being added.\n      This means\
    \ that this type of approaches are also vulnerable to\n      integrity attacks\
    \ of the exchanged messages.  This means that even\n      though the attacker\
    \ cannot learn the shared key by sniffing the\n      subsequent subflow establishment,\
    \ the attacker can modify the\n      subflow establishment message and change\
    \ the address that is being\n      added.  So, the vulnerability window for confidentially\
    \ to the\n      shared key is limited to the establishment of the first subflow,\n\
    \      but the vulnerability window for integrity attacks still includes\n   \
    \   all the subflow establishment exchanges.  These attacks are still\n      undetectable\
    \ by the endpoints.  The SCTP security falls in this\n      category.\n   o  Strong\
    \ crypto anchor exchange: Another approach that could be used\n      would be\
    \ to exchange some strong crypto anchor while the\n      establishment of the\
    \ first subflow, such as a public key or a hash\n      chain anchor.  Subsequent\
    \ subflows could be protected by using the\n      crypto material associated to\
    \ that anchor.  An attacker in this\n      case would need to change the crypto\
    \ material exchanged in the\n      connection establishment phase.  As a result,\
    \ the vulnerability\n      window for forging the crypto anchor is limited to\
    \ the initial\n      connection establishment exchange.  Similar to the previous\
    \ case,\n      due to NAT traversal considerations, the vulnerability window for\n\
    \      integrity attacks include all the subflow establishment exchanges.\n  \
    \    Because the attacker needs to change the crypto anchor, this\n      approach\
    \ are detectable by the endpoints, if they communicate\n      directly.\n"
- title: 6.3.  NAT Considerations
  contents:
  - "6.3.  NAT Considerations\n   In order to be widely adopted, MPTCP must work through\
    \ NATs.  NATs\n   are an interesting device from a security perspective.  In terms\
    \ of\n   MPTCP, they essentially behave as an MiTM attacker.  MPTCP's security\n\
    \   goal is to prevent from any attacker to insert their addresses as\n   valid\
    \ addresses for a given MPTCP connection.  But that is exactly\n   what a NAT\
    \ does: it modifies the addresses.  So, if MPTCP is to work\n   through NATs,\
    \ MPTCP must accept address rewritten by NATs as valid\n   addresses for a given\
    \ session.  The most direct corollary is that the\n   MPTCP messages that add\
    \ addresses in the implicit mode (i.e., the SYN\n   of new subflows) cannot be\
    \ protected against integrity attacks, since\n   they must allow for NATs to change\
    \ their addresses.  This rules out\n   any solution that would rely on providing\
    \ integrity protection to\n   prevent an attacker from changing the address used\
    \ in a subflow\n   establishment exchange.  This implies that alternative creative\n\
    \   mechanisms are needed to protect from integrity attacks to the MPTCP\n   signaling\
    \ that adds new addresses to a connection.  It is far from\n   obvious how one\
    \ such creative approach could look like at this point.\n   In the case of explicit\
    \ mode, you could protect the address included\n   in the MPTCP option.  Now the\
    \ question is what address to include in\n   the MPTCP option that conveys address\
    \ information.  If the address\n   included is the address configured in the host\
    \ interface and that\n   interface is behind a NAT, the address information is\
    \ useless, as the\n   address is not actually reachable from the other end so\
    \ there is no\n   point in conveying it and even less in securing it.  It would\
    \ be\n   possible to envision the usage of NAT traversal techniques, such as\n\
    \   Session Traversal Utilities for NAT (STUN) to learn the address and\n   port\
    \ that the NAT has assigned and convey that information in a\n   secure.  While\
    \ this is possible, it relies on using NAT traversal\n   techniques and also tools\
    \ to convey the address and the port in a\n   secure manner.\n"
- title: 7.  Recommendation
  contents:
  - "7.  Recommendation\n   The presented analysis shows that there is a tradeoff\
    \ between the\n   complexity of the security solution and the residual threats.\
    \  After\n   evaluating the different aspects in the MPTCP WG, the conclusions\
    \ are\n   as follows:\n   MPTCP should implement some form of reachability check\
    \ using a random\n   nonce (e.g., TCP 3-way handshake) before adding a new address\
    \ to an\n   ongoing communication in order to prevent flooding attacks.\n   The\
    \ default security mechanisms for MPTCP should be to exchange a key\n   in cleartext\
    \ in the establishment of the first subflow and then\n   secure following address\
    \ additions by using a keyed HMAC using the\n   exchanged key.\n   MPTCP security\
    \ mechanism should support using a pre-shared key to be\n   used in the keyed\
    \ HMAC, providing a higher level of protection than\n   the previous one.\n  \
    \ A mechanism to prevent replay attacks using these messages should be\n   provided,\
    \ e.g., a sequence number protected by the HMAC.\n   The MPTCP should be extensible\
    \ and it should be able to accommodate\n   multiple security solutions, in order\
    \ to enable the usage of more\n   secure mechanisms if needed.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This note contains a security analysis for MPTCP,\
    \ so no further\n   security considerations need to be described in this section.\n"
- title: 9.  Contributors
  contents:
  - "9.  Contributors\n   Alan Ford - Roke Manor Research, Ltd.\n"
- title: 10.  Acknowledgments
  contents:
  - "10.  Acknowledgments\n   Rolf Winter, Randall Stewart, Andrew McDonald, Michael\
    \ Tuexen,\n   Michael Scharf, Tim Shepard, Yoshifumi Nishida, Lars Eggert, Phil\n\
    \   Eardley, Jari Arkko, David Harrington, Dan Romascanu, and Alexey\n   Melnikov\
    \ reviewed an earlier version of this document and provided\n   comments to improve\
    \ it.\n   Mark Handley pointed out the problem with NATs and integrity\n   protection\
    \ of MPTCP signaling.\n   Marcelo Bagnulo is partly funded by Trilogy, a research\
    \ project\n   supported by the European Commission under its Seventh Framework\n\
    \   Program.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC0793]  Postel, J., \"Transmission Control\
    \ Protocol\", STD 7,\n              RFC 793, September 1981.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [RFC4225]  Nikander, P., Arkko, J., Aura, T.,\
    \ Montenegro, G., and E.\n              Nordmark, \"Mobile IP Version 6 Route\
    \ Optimization Security\n              Design Background\", RFC 4225, December\
    \ 2005.\n   [RFC4218]  Nordmark, E. and T. Li, \"Threats Relating to IPv6\n  \
    \            Multihoming Solutions\", RFC 4218, October 2005.\n   [RFC3972]  Aura,\
    \ T., \"Cryptographically Generated Addresses (CGA)\",\n              RFC 3972,\
    \ March 2005.\n   [RFC5062]  Stewart, R., Tuexen, M., and G. Camarillo, \"Security\n\
    \              Attacks Found Against the Stream Control Transmission\n       \
    \       Protocol (SCTP) and Current Countermeasures\", RFC 5062,\n           \
    \   September 2007.\n   [RFC5535]  Bagnulo, M., \"Hash-Based Addresses (HBA)\"\
    , RFC 5535,\n              June 2009.\n   [RFC3775]  Johnson, D., Perkins, C.,\
    \ and J. Arkko, \"Mobility Support\n              in IPv6\", RFC 3775, June 2004.\n\
    \   [RFC5533]  Nordmark, E. and M. Bagnulo, \"Shim6: Level 3 Multihoming\n   \
    \           Shim Protocol for IPv6\", RFC 5533, June 2009.\n   [RFC4960]  Stewart,\
    \ R., \"Stream Control Transmission Protocol\",\n              RFC 4960, September\
    \ 2007.\n   [MPTCP-MULTIADDRESSED]\n              Ford, A., Raiciu, C., and M.\
    \ Handley, \"TCP Extensions for\n              Multipath Operation with Multiple\
    \ Addresses\", Work\n              in Progress, October 2010.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Marcelo Bagnulo\n   Universidad Carlos III de Madrid\n \
    \  Av. Universidad 30\n   Leganes, Madrid  28911\n   SPAIN\n   Phone: 34 91 6248814\n\
    \   EMail: marcelo@it.uc3m.es\n   URI:   http://www.it.uc3m.es\n"
