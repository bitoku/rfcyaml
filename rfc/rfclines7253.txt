The OCB Authenticated Encryption Algorithm Abstract
This document specifies OCB, a shared key blockcipher based encryption scheme that provides confidentiality and authenticity for plaintexts and authenticity for associated data.
This document is a product of the Crypto Forum Research Group (CFRG).
Introduction Schemes for authenticated encryption (AE) simultaneously provide for confidentiality and authentication.
While this goal would traditionally be achieved by melding separate encryption and authentication mechanisms, each using its own key, integrated AE schemes intertwine what is needed for confidentiality and what is needed for authenticity.
By conceptualizing AE as a single cryptographic goal, AE schemes are less likely to be misused than conventional encryption schemes.
Also, integrated AE schemes can be significantly faster than what one sees from composing separate confidentiality and authenticity means.
When an AE scheme allows for the authentication of unencrypted data at the same time that a plaintext is being encrypted and authenticated, the scheme is an authenticated encryption with associated data (AEAD) scheme.
Associated data can be useful when, for example, a network packet has unencrypted routing information and an encrypted payload.
OCB is an AEAD scheme that depends on a blockcipher.
This document fully defines OCB encryption and decryption except for the choice of the blockcipher and the length of authentication tag that is part of the ciphertext.
The blockcipher must have a 128 bit blocksize.
Each choice of blockcipher and tag length specifies a different variant of OCB.
Several AES based variants are defined in Section 3.1.
OCB encryption and decryption employ a nonce N, which must be distinct for each invocation of the OCB encryption operation.
OCB requires the associated data A to be specified when one encrypts or decrypts, but it may be zero length.
The plaintext P and the associated data A can have any bitlength.
The ciphertext C one gets by encrypting P in the presence of A consists of a ciphertext core having the same length as P, plus an authentication tag.
One can view the resulting ciphertext as either the pair (ciphertext core, tag) or their concatenation (ciphertext core    tag), the difference being purely how one assembles and parses ciphertexts.
OCB encryption protects the confidentiality of P and the authenticity of A, N, and P.
on average, about a   m   1.02 blockcipher calls, where a is the blocklength of A, m is the blocklength of P, and the nonce N is implemented as a counter (if N is random, then OCB uses a   m   2 blockcipher calls).
If A is fixed during a session, then, after preprocessing, there is effectively no cost to having A authenticated on subsequent encryptions, and the mode will average m   1.02 blockcipher calls.
OCB requires a single key K for the underlying blockcipher, and all blockcipher calls are keyed by K.  OCB
In particular, one need not know the length of A or P to proceed with encryption, nor need one know the length of A or C to proceed with decryption.
OCB is parallelizable: the bulk of its blockcipher calls can be performed simultaneously.
Computational work beyond blockcipher calls consists of a small and fixed number of logical operations per call.
OCB enjoys provable security: the mode of operation is secure assuming that the underlying blockcipher is secure.
As with most modes of operation, security degrades as the number of blocks processed gets large (see Section 5 for details).
For reasons of generality, OCB is defined to operate on arbitrary bitstrings.
But for reasons of simplicity and efficiency, most implementations will assume that strings operated on are bytestrings (i.e., strings that are a multiple of 8 bits).
To promote interoperability, implementations of OCB that communicate with implementations of unknown capabilities should restrict all provided values (nonces, tags, plaintexts, ciphertexts, and associated data) to bytestrings.
The version of OCB defined in this document is a refinement of two prior schemes.
The original OCB version was published in 2001 [OCB1] and was listed as an optional component in IEEE 802.11i.
A second version was published in 2004
[OCB2] and is specified in ISO 19772.
The scheme described here is called OCB3 in the 2011 paper describing the mode [OCB3]; it shall be referred to simply as OCB throughout this document.
The only difference between the algorithm of this RFC and that of the [OCB3] paper is that the tag length is now encoded into the internally formatted nonce.
See [OCB3] for complete references, timing information, and a discussion of the differences between the algorithms.
OCB was initially the acronym for Offset Codebook but is now the algorithm's full name.
OCB has received years of in depth analysis previous to its submission to the CFRG and has been under review by the members of the CFRG for over a year.
It is the consensus of the CFRG that the security mechanisms provided by the OCB AEAD algorithm described in this document are suitable for use in providing confidentiality and authentication.
2.  Notation and Basic Operations
There are two types of variables used in this specification, strings and integers.
Although strings processed by most implementations of OCB will be strings of bytes, bit level operations are used throughout this specification document for defining OCB.
String variables are always written with an initial uppercase letter while integer variables are written in all lowercase.
For example, when i   2, then P i refers to the variable P 2.
The integer c raised to the i th power.
The length of string S in bits (e.g., bitlen(101)   3).
The string made of n zero bits.
The number of trailing zero bits in the base 2 representation of the positive integer n.  More formally, ntz(n) is the largest integer x for which 2^x divides n. S xor T
The string that is the bitwise exclusive or of S and T. Strings S and T will always have the same length.
th bit of the string S
(indices begin at 1, so if S is 011, then S[1]   0, S[2]
The substring of S consisting of bits i through j, inclusive.
The base 2 interpretation of bitstring S (e.g., str2num(1110)   14).
whose base 2 interpretation is i (e.g., num2str(14,4)   1110 and num2str(1,2)   01).
If S[1]   0, then double(S)
To be complete, the algorithms in this document require specification of two global parameters: a blockcipher operating on 128 bit blocks and the length of authentication tags in use.
Specifying a blockcipher implicitly defines the following symbols.
The blockcipher's key length in bits.
The blockcipher function mapping 128 bit plaintext block P to its corresponding ciphertext block using KEYLEN bit key K. DECIPHER(K,C)
The inverse blockcipher function mapping 128 bit ciphertext block C to its corresponding plaintext block using KEYLEN bit key K.
The TAGLEN parameter specifies the length of authentication tag used by OCB and may be any value up to 128.
Greater values for TAGLEN provide greater assurances of authenticity, but ciphertexts produced by OCB are longer than their corresponding plaintext by TAGLEN bits.
See Section 5 for details about TAGLEN and security.
As an example, if 128 bit authentication tags and AES with 192 bit keys are to be used, then KEYLEN is 192, ENCIPHER refers to the AES 192 cipher, DECIPHER refers to the AES 192 inverse cipher, and TAGLEN is 128 [AES].
Named OCB Parameter Sets and RFC 5116 Constants
The following table gives names to common OCB global parameter sets.
Each of the AES variants is defined in [AES].
RFC 5116 requires the specification of certain constants for each named AEAD scheme.
For each of the OCB parameter sets listed above: P MAX, A MAX, and C MAX are all unbounded; N MIN is 1 byte, and N MAX is 15 bytes.
The parameter sets indicating the use of AES 128, AES 192, and AES 256 have K LEN equal to 16, 24, and 32 bytes, respectively.
Each ciphertext is longer than its corresponding plaintext by exactly TAGLEN bits, and TAGLEN is given at the end of each name.
For instance, an AEAD AES 128 OCB TAGLEN64 ciphertext is exactly 64 bits longer than its corresponding plaintext.
OCB Algorithms OCB is described in this section using pseudocode.
Given any collection of inputs of the required types, following the pseudocode description for a function will produce the correct output of the promised type.
: HASH OCB has the ability to authenticate unencrypted associated data at the same time that it provides for authentication and encrypts a plaintext.
The following hash function is central to providing this functionality.
If an application has no associated data, then the associated data should be considered to exist and to be the empty string.
HASH, conveniently, always returns zeros(128)
when the associated data is the empty string.
Hash result Sum is defined as follows.
double(L {i 1}) for every integer
Consider A as a sequence of 128 bit blocks //
Let m be the largest integer so that 128m <  bitlen(A)
A  , and bitlen(A i)
128 for each 1 <
A   may possibly be the empty string.
Process any whole blocks //
Offset {i 1} xor L {ntz(i)}
Sum {i 1} xor ENCIPHER(K,
Process any final partial block; compute final hash value //
Sum m xor ENCIPHER(K, CipherInput)
else Sum   Sum m end if 4.2.
This function computes a ciphertext (which includes a bundled authentication tag) when given a plaintext, associated data, nonce, and key.
For each invocation of OCB ENCRYPT using the same key K, the value of the nonce input
Plaintext Output: C, string of length
Ciphertext C is defined as follows.
double(L {i 1}) for every integer
Consider P as a sequence of 128 bit blocks //
Let m be the largest integer
so that 128m <  bitlen(P
128 for each 1 <
: P   may possibly be the empty string.
Nonce dependent and per encryption variables //
Stretch[1 bottom..128 bottom] Checksum 0   zeros(128)
Process any whole blocks //
for each 1 <  i <  m Offset
Offset {i 1} xor L {ntz(i)
Process any final partial block and compute raw tag //
This function computes a plaintext when given a ciphertext, associated data, nonce, and key.
An authentication tag is embedded in the ciphertext.
If the tag is not correct for the ciphertext, associated data, nonce, and key, then an INVALID signal is produced.
Ciphertext Output: P, string of length bitlen(C)
Plaintext or INVALID indicating authentication failure P is defined as follows.
double(L {i 1}) for every integer
Consider C as a sequence of 128 bit blocks //
Let m be the largest integer so that 128m <  bitlen(C)
i <  m, and bitlen(T)
Note: C   may possibly be the empty string.
Nonce dependent and per decryption variables //
Stretch[1 bottom..128 bottom] Checksum 0   zeros(128)
Process any whole blocks //
for each 1 <  i <  m Offset
Offset {i 1} xor L {ntz(i)}
Process any final partial block and compute raw tag //
// Check for validity and assemble
else P   INVALID end if 5.
Security Considerations OCB achieves two security properties, confidentiality and authenticity.
Confidentiality is defined via "indistinguishability from random bits", meaning that an adversary is unable to distinguish OCB outputs from an equal number of random bits.
Authenticity is defined via "authenticity of ciphertexts", meaning that an adversary is unable to produce any valid nonce ciphertext pair that it has not already acquired.
The security guarantees depend on the underlying blockcipher being secure in the sense of a strong pseudorandom permutation.
Thus, if OCB is used with a blockcipher that is not secure as a strong pseudorandom permutation, the security guarantees vanish.
The need for the strong pseudorandom permutation property means that OCB should be used with a conservatively designed, well  trusted blockcipher, such as AES.
Both the confidentiality and the authenticity properties of OCB degrade as per s^2 / 2^128, where s is the total number of blocks that the adversary acquires.
The consequence of this formula is that the proven security disappears when s becomes as large as 2^64.
Thus, the user should never use a key to generate an amount of ciphertext that is near to, or exceeds, 2^64 blocks.
In order to ensure that s^2 / 2^128 remains small, a given key should be used to encrypt at most 2^48 blocks (2^55 bits or 4 petabytes), including the associated data.
To ensure these limits are not crossed, automated key management is recommended in systems exchanging large amounts of data [RFC4107].
When a ciphertext decrypts as INVALID, it is the implementor's responsibility to make sure that no information beyond this fact is made adversarially available.
OCB encryption and decryption produce an internal 128 bit authentication tag.
The parameter TAGLEN determines how many bits of this internal tag are included in ciphertexts and used for authentication.
The value of TAGLEN has two impacts: an adversary can trivially forge with probability 2^{ TAGLEN}, and ciphertexts are TAGLEN bits longer than their corresponding plaintexts.
It is up to the application designer to choose an appropriate value for TAGLEN.
Long tags cost no more computationally than short ones.
Normally, a given key should be used to create ciphertexts with a single tag length, TAGLEN, and an application should reject any ciphertext that claims authenticity under the same key but a different tag length.
While the ciphertext core and all of the bits of the tag do depend on the tag length, this is done for added robustness to misuse and should not suggest that receivers accept ciphertexts employing variable tag lengths under a single key.
Timing attacks are not a part of the formal security model and an implementation should take care to mitigate them in contexts where this is a concern.
To render timing attacks impotent, the amount of time to encrypt or decrypt a string should be independent of the key and the contents of the string.
The only explicitly conditional OCB operation that depends on private data is double(), which means that using constant time blockcipher and double() implementations eliminates most (if not all) sources of timing attacks on OCB.
Power usage attacks are likewise out of the scope of the formal model and should be considered for environments where they are threatening.
The OCB encryption scheme reveals in the ciphertext the length of the plaintext.
Sometimes the length of the plaintext is a valuable piece of information that should be hidden.
For environments where "traffic analysis" is a concern, techniques beyond OCB encryption (typically involving padding) would be necessary.
TAGLEN] introduces no security concerns.
Because TAGLEN is fixed, both versions allow ciphertexts to be parsed unambiguously.
It is crucial that, as one encrypts, one does not repeat a nonce.
The inadvertent reuse of the same nonce by two invocations of the OCB encryption operation, with the same key, but with distinct plaintext values, undermines the confidentiality of the plaintexts protected in those two invocations and undermines all of the authenticity and integrity protection provided by that key.
For this reason, OCB should only be used whenever nonce uniqueness can be provided with certainty.
Note that it is acceptable to input the same nonce value multiple times to the decryption operation.
We emphasize that the security consequences are quite serious if an attacker observes two ciphertexts that were created using the same nonce and key values, unless the plaintext and associated data values in both invocations of the encrypt operation were identical.
First, a loss of confidentiality ensues because the attacker will be able to infer relationships between the two plaintext values.
Second, a loss of authenticity ensues because the attacker will be able to recover secret information used to provide authenticity, making subsequent forgeries trivial.
Note that there are AEAD schemes, particularly the Synthetic Initialization Vector (SIV)
[RFC5297], appropriate for environments where nonces are unavailable or unreliable.
OCB is not such a scheme.
Nonces need not be secret, and a counter may be used for them.
If two parties send OCB encrypted plaintexts to one another using the same key, then the space of nonces used by the two parties must be partitioned so that no nonce that could be used by one party to encrypt could be used by the other to encrypt (e.g., odd and even counters).
The Internet Assigned Numbers Authority (IANA) has defined a registry for Authenticated Encryption with Associated Data parameters.
The IANA has added the following entries to the AEAD Registry.
Each name refers to a set of parameters defined in Section 3.1.
This section gives sample output values for various inputs when using OCB with AES as per the parameters defined in Section 3.1.
All strings are represented in hexadecimal (e.g., 0F represents the bitstring 00001111).
The following 16 (N,A,P,C) tuples show the ciphertext C that results from OCB ENCRYPT(K,N,A,P) for various lengths of associated data (A) and plaintext (P).
The key (K) has a fixed value, the tag length is 128 bits, and the nonce (N) increments.
An empty entry indicates the empty string.
BBAA99887766554433221101 A: 0001020304050607 P: 0001020304050607
BBAA99887766554433221107 A: 000102030405060708090A0B0C0D0E0F1011121314151617 P: 000102030405060708090A0B0C0D0E0F1011121314151617 C:
BBAA99887766554433221108 A: 000102030405060708090A0B0C0D0E0F1011121314151617 P: C: 6DC225A071FC1B9F7C69F93B0F1E10DE N:
BBAA99887766554433221109 A: P: 000102030405060708090A0B0C0D0E0F1011121314151617 C: 221BD0DE7FA6FE993ECCD769460A0AF2D6CDED0C395B1C3C
BBAA9988776655443322110A A: 000102030405060708090A0B0C0D0E0F1011121314151617 18191A1B1C1D1E1F P: 000102030405060708090A0B0C0D0E0F1011121314151617 18191A1B1C1D1E1F C: BD6F6C496201C69296C11EFD138A467ABD3C707924B964DE AFFC40319AF5A48540FBBA186C5553C68AD9F592A79A4240 N: BBAA9988776655443322110B A: 000102030405060708090A0B0C0D0E0F1011121314151617 18191A1B1C1D1E1F P:
BBAA9988776655443322110C A: P: 000102030405060708090A0B0C0D0E0F1011121314151617 18191A1B1C1D1E1F C:
BBAA9988776655443322110E A: 000102030405060708090A0B0C0D0E0F1011121314151617 18191A1B1C1D1E1F2021222324252627 P: C: C5CD9D1850C141E358649994EE701B68 N:
Next are several internal values generated during the OCB ENCRYPT computation for the last test vector listed above.
The next tuple shows a result with a tag length of 96 bits and a different key.
AC4F02AA The following algorithm tests a wider variety of inputs.
Results are given for each parameter set defined in Section 3.1.
C   <empty string> for i   0 to 127 do S   zeros(8i)
C   C    OCB ENCRYPT(K,N,<empty string>,S)
Iteration i of the loop adds 2i   (3   TAGLEN
/ 8) bytes to C, resulting in an ultimate length for C of 22,400 bytes when TAGLEN   128, 20,864 bytes when TAGLEN   192, and 19,328 bytes when TAGLEN   64.
The final OCB ENCRYPT has an empty plaintext component, so serves only to authenticate C.
TAGLEN128 Output: 67E944D23256C5E0B6C61FA22FDF1EA2 AEAD AES 192 OCB
F673F2C3E7174AAE7BAE986CA9F29E17 AEAD AES 256 OCB
Output: D90EB8E9C977C88B79DD793D7FFA161C AEAD AES 128 OCB
AEAD AES 192 OCB TAGLEN96 Output : 05D56EAD2752C86BE6932C5E AEAD AES 256 OCB TAGLEN96 Output :
5458359AC23B0CBA9E6330DD AEAD AES 128 OCB TAGLEN64 Output : 192C9B7BD90BA06A AEAD AES 192 OCB TAGLEN64 Output : 0066BC6E0EF34E24 AEAD AES 256 OCB TAGLEN64 Output : 7D4EA5D445501CBE
