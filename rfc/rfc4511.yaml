- title: __initial_text__
  contents:
  - '      Lightweight Directory Access Protocol (LDAP): The Protocol

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the protocol elements, along with their\n\
    \   semantics and encodings, of the Lightweight Directory Access Protocol\n  \
    \ (LDAP).  LDAP provides access to distributed directory services that\n   act\
    \ in accordance with X.500 data and service models.  These protocol\n   elements\
    \ are based on those described in the X.500 Directory Access\n   Protocol (DAP).\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Relationship to Other LDAP Specifications ..................3\n  \
    \ 2. Conventions .....................................................3\n   3.\
    \ Protocol Model ..................................................4\n      3.1.\
    \ Operation and LDAP Message Layer Relationship ..............5\n   4. Elements\
    \ of Protocol ............................................5\n      4.1. Common\
    \ Elements ............................................5\n           4.1.1. Message\
    \ Envelope ....................................6\n           4.1.2. String Types\
    \ ........................................7\n           4.1.3. Distinguished Name\
    \ and Relative Distinguished Name ..8\n           4.1.4. Attribute Descriptions\
    \ ..............................8\n           4.1.5. Attribute Value .....................................8\n\
    \           4.1.6. Attribute Value Assertion ...........................9\n  \
    \         4.1.7. Attribute and PartialAttribute ......................9\n    \
    \       4.1.8. Matching Rule Identifier ...........................10\n      \
    \     4.1.9. Result Message .....................................10\n        \
    \   4.1.10. Referral ..........................................12\n          \
    \ 4.1.11. Controls ..........................................14\n      4.2. Bind\
    \ Operation ............................................16\n           4.2.1.\
    \ Processing of the Bind Request .....................17\n           4.2.2. Bind\
    \ Response ......................................18\n      4.3. Unbind Operation\
    \ ..........................................18\n      4.4. Unsolicited Notification\
    \ ..................................19\n           4.4.1. Notice of Disconnection\
    \ ............................19\n      4.5. Search Operation ..........................................20\n\
    \           4.5.1. Search Request .....................................20\n  \
    \         4.5.2. Search Result ......................................27\n    \
    \       4.5.3. Continuation References in the Search Result .......28\n      4.6.\
    \ Modify Operation ..........................................31\n      4.7. Add\
    \ Operation .............................................33\n      4.8. Delete\
    \ Operation ..........................................34\n      4.9. Modify DN\
    \ Operation .......................................34\n      4.10. Compare Operation\
    \ ........................................36\n      4.11. Abandon Operation ........................................36\n\
    \      4.12. Extended Operation .......................................37\n  \
    \    4.13. IntermediateResponse Message .............................39\n    \
    \       4.13.1. Usage with LDAP ExtendedRequest and\n                   ExtendedResponse\
    \ ..................................40\n           4.13.2. Usage with LDAP Request\
    \ Controls ..................40\n      4.14. StartTLS Operation .......................................40\n\
    \           4.14.1. StartTLS Request ..................................40\n  \
    \         4.14.2. StartTLS Response .................................41\n    \
    \       4.14.3. Removal of the TLS Layer ..........................41\n   5. Protocol\
    \ Encoding, Connection, and Transfer ....................42\n      5.1. Protocol\
    \ Encoding .........................................42\n      5.2. Transmission\
    \ Control Protocol (TCP) .......................43\n      5.3. Termination of\
    \ the LDAP session ...........................43\n   6. Security Considerations\
    \ ........................................43\n   7. Acknowledgements ...............................................45\n\
    \   8. Normative References ...........................................46\n  \
    \ 9. Informative References .........................................48\n   10.\
    \ IANA Considerations ...........................................48\n   Appendix\
    \ A. LDAP Result Codes .....................................49\n      A.1. Non-Error\
    \ Result Codes ....................................49\n      A.2. Result Codes\
    \ ..............................................49\n   Appendix B. Complete ASN.1\
    \ Definition .............................54\n   Appendix C. Changes ...............................................60\n\
    \      C.1. Changes Made to RFC 2251 ..................................60\n  \
    \    C.2. Changes Made to RFC 2830 ..................................66\n    \
    \  C.3. Changes Made to RFC 3771 ..................................66\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Directory is \"a collection of open systems cooperating\
    \ to provide\n   directory services\" [X.500].  A directory user, which may be\
    \ a human\n   or other entity, accesses the Directory through a client (or\n \
    \  Directory User Agent (DUA)).  The client, on behalf of the directory\n   user,\
    \ interacts with one or more servers (or Directory System Agents\n   (DSA)). \
    \ Clients interact with servers using a directory access\n   protocol.\n   This\
    \ document details the protocol elements of the Lightweight\n   Directory Access\
    \ Protocol (LDAP), along with their semantics.\n   Following the description of\
    \ protocol elements, it describes the way\n   in which the protocol elements are\
    \ encoded and transferred.\n"
- title: 1.1.  Relationship to Other LDAP Specifications
  contents:
  - "1.1.  Relationship to Other LDAP Specifications\n   This document is an integral\
    \ part of the LDAP Technical Specification\n   [RFC4510], which obsoletes the\
    \ previously defined LDAP technical\n   specification, RFC 3377, in its entirety.\n\
    \   This document, together with [RFC4510], [RFC4513], and [RFC4512],\n   obsoletes\
    \ RFC 2251 in its entirety.  Section 3.3 is obsoleted by\n   [RFC4510].  Sections\
    \ 4.2.1 (portions) and 4.2.2 are obsoleted by\n   [RFC4513].  Sections 3.2, 3.4,\
    \ 4.1.3 (last paragraph), 4.1.4, 4.1.5,\n   4.1.5.1, 4.1.9 (last paragraph), 5.1,\
    \ 6.1, and 6.2 (last paragraph)\n   are obsoleted by [RFC4512].  The remainder\
    \ of RFC 2251 is obsoleted\n   by this document.  Appendix C.1 summarizes substantive\
    \ changes in the\n   remainder.\n   This document obsoletes RFC 2830, Sections\
    \ 2 and 4.  The remainder of\n   RFC 2830 is obsoleted by [RFC4513].  Appendix\
    \ C.2 summarizes\n   substantive changes to the remaining sections.\n   This document\
    \ also obsoletes RFC 3771 in entirety.\n"
- title: 2.  Conventions
  contents:
  - "2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", and \"MAY\"\
    \ in this document are\n   to be interpreted as described in [RFC2119].\n   Character\
    \ names in this document use the notation for code points and\n   names from the\
    \ Unicode Standard [Unicode].  For example, the letter\n   \"a\" may be represented\
    \ as either <U+0061> or <LATIN SMALL LETTER A>.\n   Note: a glossary of terms\
    \ used in Unicode can be found in [Glossary].\n   Information on the Unicode character\
    \ encoding model can be found in\n   [CharModel].\n   The term \"transport connection\"\
    \ refers to the underlying transport\n   services used to carry the protocol exchange,\
    \ as well as associations\n   established by these services.\n   The term \"TLS\
    \ layer\" refers to Transport Layer Security (TLS)\n   services used in providing\
    \ security services, as well as associations\n   established by these services.\n\
    \   The term \"SASL layer\" refers to Simply Authentication and Security\n   Layer\
    \ (SASL) services used in providing security services, as well as\n   associations\
    \ established by these services.\n   The term \"LDAP message layer\" refers to\
    \ the LDAP Message Protocol\n   Data Unit (PDU) services used in providing directory\
    \ services, as\n   well as associations established by these services.\n   The\
    \ term \"LDAP session\" refers to combined services (transport\n   connection,\
    \ TLS layer, SASL layer, LDAP message layer) and their\n   associations.\n   See\
    \ the table in Section 5 for an illustration of these four terms.\n"
- title: 3.  Protocol Model
  contents:
  - "3.  Protocol Model\n   The general model adopted by this protocol is one of clients\n\
    \   performing protocol operations against servers.  In this model, a\n   client\
    \ transmits a protocol request describing the operation to be\n   performed to\
    \ a server.  The server is then responsible for performing\n   the necessary operation(s)\
    \ in the Directory.  Upon completion of an\n   operation, the server typically\
    \ returns a response containing\n   appropriate data to the requesting client.\n\
    \   Protocol operations are generally independent of one another.  Each\n   operation\
    \ is processed as an atomic action, leaving the directory in\n   a consistent\
    \ state.\n   Although servers are required to return responses whenever such\n\
    \   responses are defined in the protocol, there is no requirement for\n   synchronous\
    \ behavior on the part of either clients or servers.\n   Requests and responses\
    \ for multiple operations generally may be\n   exchanged between a client and\
    \ server in any order.  If required,\n   synchronous behavior may be controlled\
    \ by client applications.\n   The core protocol operations defined in this document\
    \ can be mapped\n   to a subset of the X.500 (1993) Directory Abstract Service\
    \ [X.511].\n   However, there is not a one-to-one mapping between LDAP operations\n\
    \   and X.500 Directory Access Protocol (DAP) operations.  Server\n   implementations\
    \ acting as a gateway to X.500 directories may need to\n   make multiple DAP requests\
    \ to service a single LDAP request.\n"
- title: 3.1.  Operation and LDAP Message Layer Relationship
  contents:
  - "3.1.  Operation and LDAP Message Layer Relationship\n   Protocol operations are\
    \ exchanged at the LDAP message layer.  When\n   the transport connection is closed,\
    \ any uncompleted operations at the\n   LDAP message layer are abandoned (when\
    \ possible) or are completed\n   without transmission of the response (when abandoning\
    \ them is not\n   possible).  Also, when the transport connection is closed, the\
    \ client\n   MUST NOT assume that any uncompleted update operations have succeeded\n\
    \   or failed.\n"
- title: 4.  Elements of Protocol
  contents:
  - "4.  Elements of Protocol\n   The protocol is described using Abstract Syntax\
    \ Notation One\n   ([ASN.1]) and is transferred using a subset of ASN.1 Basic\
    \ Encoding\n   Rules ([BER]).  Section 5 specifies how the protocol elements are\n\
    \   encoded and transferred.\n   In order to support future extensions to this\
    \ protocol, extensibility\n   is implied where it is allowed per ASN.1 (i.e.,\
    \ sequence, set,\n   choice, and enumerated types are extensible).  In addition,\
    \ ellipses\n   (...) have been supplied in ASN.1 types that are explicitly\n \
    \  extensible as discussed in [RFC4520].  Because of the implied\n   extensibility,\
    \ clients and servers MUST (unless otherwise specified)\n   ignore trailing SEQUENCE\
    \ components whose tags they do not recognize.\n   Changes to the protocol other\
    \ than through the extension mechanisms\n   described here require a different\
    \ version number.  A client\n   indicates the version it is using as part of the\
    \ BindRequest,\n   described in Section 4.2.  If a client has not sent a Bind,\
    \ the\n   server MUST assume the client is using version 3 or later.\n   Clients\
    \ may attempt to determine the protocol versions a server\n   supports by reading\
    \ the 'supportedLDAPVersion' attribute from the\n   root DSE (DSA-Specific Entry)\
    \ [RFC4512].\n"
- title: 4.1.  Common Elements
  contents:
  - "4.1.  Common Elements\n   This section describes the LDAPMessage envelope Protocol\
    \ Data Unit\n   (PDU) format, as well as data type definitions, which are used\
    \ in the\n   protocol operations.\n"
- title: 4.1.1.  Message Envelope
  contents:
  - "4.1.1.  Message Envelope\n   For the purposes of protocol exchanges, all protocol\
    \ operations are\n   encapsulated in a common envelope, the LDAPMessage, which\
    \ is defined\n   as follows:\n        LDAPMessage ::= SEQUENCE {\n           \
    \  messageID       MessageID,\n             protocolOp      CHOICE {\n       \
    \           bindRequest           BindRequest,\n                  bindResponse\
    \          BindResponse,\n                  unbindRequest         UnbindRequest,\n\
    \                  searchRequest         SearchRequest,\n                  searchResEntry\
    \        SearchResultEntry,\n                  searchResDone         SearchResultDone,\n\
    \                  searchResRef          SearchResultReference,\n            \
    \      modifyRequest         ModifyRequest,\n                  modifyResponse\
    \        ModifyResponse,\n                  addRequest            AddRequest,\n\
    \                  addResponse           AddResponse,\n                  delRequest\
    \            DelRequest,\n                  delResponse           DelResponse,\n\
    \                  modDNRequest          ModifyDNRequest,\n                  modDNResponse\
    \         ModifyDNResponse,\n                  compareRequest        CompareRequest,\n\
    \                  compareResponse       CompareResponse,\n                  abandonRequest\
    \        AbandonRequest,\n                  extendedReq           ExtendedRequest,\n\
    \                  extendedResp          ExtendedResponse,\n                 \
    \ ...,\n                  intermediateResponse  IntermediateResponse },\n    \
    \         controls       [0] Controls OPTIONAL }\n        MessageID ::= INTEGER\
    \ (0 ..  maxInt)\n        maxInt INTEGER ::= 2147483647 -- (2^^31 - 1) --\n  \
    \ The ASN.1 type Controls is defined in Section 4.1.11.\n   The function of the\
    \ LDAPMessage is to provide an envelope containing\n   common fields required\
    \ in all protocol exchanges.  At this time, the\n   only common fields are the\
    \ messageID and the controls.\n   If the server receives an LDAPMessage from the\
    \ client in which the\n   LDAPMessage SEQUENCE tag cannot be recognized, the messageID\
    \ cannot\n   be parsed, the tag of the protocolOp is not recognized as a request,\n\
    \   or the encoding structures or lengths of data fields are found to be\n   incorrect,\
    \ then the server SHOULD return the Notice of Disconnection\n   described in Section\
    \ 4.4.1, with the resultCode set to protocolError,\n   and MUST immediately terminate\
    \ the LDAP session as described in\n   Section 5.3.\n   In other cases where the\
    \ client or server cannot parse an LDAP PDU,\n   it SHOULD abruptly terminate\
    \ the LDAP session (Section 5.3) where\n   further communication (including providing\
    \ notice) would be\n   pernicious.  Otherwise, server implementations MUST return\
    \ an\n   appropriate response to the request, with the resultCode set to\n   protocolError.\n"
- title: 4.1.1.1.  MessageID
  contents:
  - "4.1.1.1.  MessageID\n   All LDAPMessage envelopes encapsulating responses contain\
    \ the\n   messageID value of the corresponding request LDAPMessage.\n   The messageID\
    \ of a request MUST have a non-zero value different from\n   the messageID of\
    \ any other request in progress in the same LDAP\n   session.  The zero value\
    \ is reserved for the unsolicited notification\n   message.\n   Typical clients\
    \ increment a counter for each request.\n   A client MUST NOT send a request with\
    \ the same messageID as an\n   earlier request in the same LDAP session unless\
    \ it can be determined\n   that the server is no longer servicing the earlier\
    \ request (e.g.,\n   after the final response is received, or a subsequent Bind\n\
    \   completes).  Otherwise, the behavior is undefined.  For this purpose,\n  \
    \ note that Abandon and successfully abandoned operations do not send\n   responses.\n"
- title: 4.1.2.  String Types
  contents:
  - "4.1.2.  String Types\n   The LDAPString is a notational convenience to indicate\
    \ that, although\n   strings of LDAPString type encode as ASN.1 OCTET STRING types,\
    \ the\n   [ISO10646] character set (a superset of [Unicode]) is used, encoded\n\
    \   following the UTF-8 [RFC3629] algorithm.  Note that Unicode\n   characters\
    \ U+0000 through U+007F are the same as ASCII 0 through 127,\n   respectively,\
    \ and have the same single octet UTF-8 encoding.  Other\n   Unicode characters\
    \ have a multiple octet UTF-8 encoding.\n        LDAPString ::= OCTET STRING --\
    \ UTF-8 encoded,\n                                    -- [ISO10646] characters\n\
    \   The LDAPOID is a notational convenience to indicate that the\n   permitted\
    \ value of this string is a (UTF-8 encoded) dotted-decimal\n   representation\
    \ of an OBJECT IDENTIFIER.  Although an LDAPOID is\n   encoded as an OCTET STRING,\
    \ values are limited to the definition of\n   <numericoid> given in Section 1.4\
    \ of [RFC4512].\n        LDAPOID ::= OCTET STRING -- Constrained to <numericoid>\n\
    \                                 -- [RFC4512]\n   For example,\n        1.3.6.1.4.1.1466.1.2.3\n"
- title: 4.1.3.  Distinguished Name and Relative Distinguished Name
  contents:
  - "4.1.3.  Distinguished Name and Relative Distinguished Name\n   An LDAPDN is defined\
    \ to be the representation of a Distinguished Name\n   (DN) after encoding according\
    \ to the specification in [RFC4514].\n        LDAPDN ::= LDAPString\n        \
    \           -- Constrained to <distinguishedName> [RFC4514]\n   A RelativeLDAPDN\
    \ is defined to be the representation of a Relative\n   Distinguished Name (RDN)\
    \ after encoding according to the\n   specification in [RFC4514].\n        RelativeLDAPDN\
    \ ::= LDAPString\n                           -- Constrained to <name-component>\
    \ [RFC4514]\n"
- title: 4.1.4.  Attribute Descriptions
  contents:
  - "4.1.4.  Attribute Descriptions\n   The definition and encoding rules for attribute\
    \ descriptions are\n   defined in Section 2.5 of [RFC4512].  Briefly, an attribute\n\
    \   description is an attribute type and zero or more options.\n        AttributeDescription\
    \ ::= LDAPString\n                                -- Constrained to <attributedescription>\n\
    \                                -- [RFC4512]\n"
- title: 4.1.5.  Attribute Value
  contents:
  - "4.1.5.  Attribute Value\n   A field of type AttributeValue is an OCTET STRING\
    \ containing an\n   encoded attribute value.  The attribute value is encoded according\
    \ to\n   the LDAP-specific encoding definition of its corresponding syntax.\n\
    \   The LDAP-specific encoding definitions for different syntaxes and\n   attribute\
    \ types may be found in other documents and in particular\n   [RFC4517].\n   \
    \     AttributeValue ::= OCTET STRING\n   Note that there is no defined limit\
    \ on the size of this encoding;\n   thus, protocol values may include multi-megabyte\
    \ attribute values\n   (e.g., photographs).\n   Attribute values may be defined\
    \ that have arbitrary and non-printable\n   syntax.  Implementations MUST NOT\
    \ display or attempt to decode an\n   attribute value if its syntax is not known.\
    \  The implementation may\n   attempt to discover the subschema of the source\
    \ entry and to retrieve\n   the descriptions of 'attributeTypes' from it [RFC4512].\n\
    \   Clients MUST only send attribute values in a request that are valid\n   according\
    \ to the syntax defined for the attributes.\n"
- title: 4.1.6.  Attribute Value Assertion
  contents:
  - "4.1.6.  Attribute Value Assertion\n   The AttributeValueAssertion (AVA) type\
    \ definition is similar to the\n   one in the X.500 Directory standards.  It contains\
    \ an attribute\n   description and a matching rule ([RFC4512], Section 4.1.3)\
    \ assertion\n   value suitable for that type.  Elements of this type are typically\n\
    \   used to assert that the value in assertionValue matches a value of an\n  \
    \ attribute.\n        AttributeValueAssertion ::= SEQUENCE {\n             attributeDesc\
    \   AttributeDescription,\n             assertionValue  AssertionValue }\n   \
    \     AssertionValue ::= OCTET STRING\n   The syntax of the AssertionValue depends\
    \ on the context of the LDAP\n   operation being performed.  For example, the\
    \ syntax of the EQUALITY\n   matching rule for an attribute is used when performing\
    \ a Compare\n   operation.  Often this is the same syntax used for values of the\n\
    \   attribute type, but in some cases the assertion syntax differs from\n   the\
    \ value syntax.  See objectIdentiferFirstComponentMatch in\n   [RFC4517] for an\
    \ example.\n"
- title: 4.1.7.  Attribute and PartialAttribute
  contents:
  - "4.1.7.  Attribute and PartialAttribute\n   Attributes and partial attributes\
    \ consist of an attribute description\n   and attribute values.  A PartialAttribute\
    \ allows zero values, while\n   Attribute requires at least one value.\n     \
    \   PartialAttribute ::= SEQUENCE {\n             type       AttributeDescription,\n\
    \             vals       SET OF value AttributeValue }\n        Attribute ::=\
    \ PartialAttribute(WITH COMPONENTS {\n             ...,\n             vals (SIZE(1..MAX))})\n\
    \   No two of the attribute values may be equivalent as described by\n   Section\
    \ 2.2 of [RFC4512].  The set of attribute values is unordered.\n   Implementations\
    \ MUST NOT rely upon the ordering being repeatable.\n"
- title: 4.1.8.  Matching Rule Identifier
  contents:
  - "4.1.8.  Matching Rule Identifier\n   Matching rules are defined in Section 4.1.3\
    \ of [RFC4512].  A matching\n   rule is identified in the protocol by the printable\
    \ representation of\n   either its <numericoid> or one of its short name descriptors\n\
    \   [RFC4512], e.g., 'caseIgnoreMatch' or '2.5.13.2'.\n        MatchingRuleId\
    \ ::= LDAPString\n"
- title: 4.1.9.  Result Message
  contents:
  - "4.1.9.  Result Message\n   The LDAPResult is the construct used in this protocol\
    \ to return\n   success or failure indications from servers to clients.  To various\n\
    \   requests, servers will return responses containing the elements found\n  \
    \ in LDAPResult to indicate the final status of the protocol operation\n   request.\n\
    \        LDAPResult ::= SEQUENCE {\n             resultCode         ENUMERATED\
    \ {\n                  success                      (0),\n                  operationsError\
    \              (1),\n                  protocolError                (2),\n   \
    \               timeLimitExceeded            (3),\n                  sizeLimitExceeded\
    \            (4),\n                  compareFalse                 (5),\n     \
    \             compareTrue                  (6),\n                  authMethodNotSupported\
    \       (7),\n                  strongerAuthRequired         (8),\n          \
    \             -- 9 reserved --\n                  referral                   \
    \  (10),\n                  adminLimitExceeded           (11),\n             \
    \     unavailableCriticalExtension (12),\n                  confidentialityRequired\
    \      (13),\n                  saslBindInProgress           (14),\n         \
    \         noSuchAttribute              (16),\n                  undefinedAttributeType\
    \       (17),\n                  inappropriateMatching        (18),\n        \
    \          constraintViolation          (19),\n                  attributeOrValueExists\
    \       (20),\n                  invalidAttributeSyntax       (21),\n        \
    \               -- 22-31 unused --\n                  noSuchObject           \
    \      (32),\n                  aliasProblem                 (33),\n         \
    \         invalidDNSyntax              (34),\n                       -- 35 reserved\
    \ for undefined isLeaf --\n                  aliasDereferencingProblem    (36),\n\
    \                       -- 37-47 unused --\n                  inappropriateAuthentication\
    \  (48),\n                  invalidCredentials           (49),\n             \
    \     insufficientAccessRights     (50),\n                  busy             \
    \            (51),\n                  unavailable                  (52),\n   \
    \               unwillingToPerform           (53),\n                  loopDetect\
    \                   (54),\n                       -- 55-63 unused --\n       \
    \           namingViolation              (64),\n                  objectClassViolation\
    \         (65),\n                  notAllowedOnNonLeaf          (66),\n      \
    \            notAllowedOnRDN              (67),\n                  entryAlreadyExists\
    \           (68),\n                  objectClassModsProhibited    (69),\n    \
    \                   -- 70 reserved for CLDAP --\n                  affectsMultipleDSAs\
    \          (71),\n                       -- 72-79 unused --\n                \
    \  other                        (80),\n                  ...  },\n           \
    \  matchedDN          LDAPDN,\n             diagnosticMessage  LDAPString,\n \
    \            referral           [3] Referral OPTIONAL }\n   The resultCode enumeration\
    \ is extensible as defined in Section 3.8 of\n   [RFC4520].  The meanings of the\
    \ listed result codes are given in\n   Appendix A.  If a server detects multiple\
    \ errors for an operation,\n   only one result code is returned.  The server should\
    \ return the\n   result code that best indicates the nature of the error encountered.\n\
    \   Servers may return substituted result codes to prevent unauthorized\n   disclosures.\n\
    \   The diagnosticMessage field of this construct may, at the server's\n   option,\
    \ be used to return a string containing a textual, human-\n   readable diagnostic\
    \ message (terminal control and page formatting\n   characters should be avoided).\
    \  As this diagnostic message is not\n   standardized, implementations MUST NOT\
    \ rely on the values returned.\n   Diagnostic messages typically supplement the\
    \ resultCode with\n   additional information.  If the server chooses not to return\
    \ a\n   textual diagnostic, the diagnosticMessage field MUST be empty.\n   For\
    \ certain result codes (typically, but not restricted to\n   noSuchObject, aliasProblem,\
    \ invalidDNSyntax, and\n   aliasDereferencingProblem), the matchedDN field is\
    \ set (subject to\n   access controls) to the name of the last entry (object or\
    \ alias) used\n   in finding the target (or base) object.  This will be a truncated\n\
    \   form of the provided name or, if an alias was dereferenced while\n   attempting\
    \ to locate the entry, of the resulting name.  Otherwise,\n   the matchedDN field\
    \ is empty.\n"
- title: 4.1.10.  Referral
  contents:
  - "4.1.10.  Referral\n   The referral result code indicates that the contacted server\
    \ cannot\n   or will not perform the operation and that one or more other servers\n\
    \   may be able to.  Reasons for this include:\n   - The target entry of the request\
    \ is not held locally, but the server\n     has knowledge of its possible existence\
    \ elsewhere.\n   - The operation is restricted on this server -- perhaps due to\
    \ a\n     read-only copy of an entry to be modified.\n   The referral field is\
    \ present in an LDAPResult if the resultCode is\n   set to referral, and it is\
    \ absent with all other result codes.  It\n   contains one or more references\
    \ to one or more servers or services\n   that may be accessed via LDAP or other\
    \ protocols.  Referrals can be\n   returned in response to any operation request\
    \ (except Unbind and\n   Abandon, which do not have responses).  At least one\
    \ URI MUST be\n   present in the Referral.\n   During a Search operation, after\
    \ the baseObject is located, and\n   entries are being evaluated, the referral\
    \ is not returned.  Instead,\n   continuation references, described in Section\
    \ 4.5.3, are returned\n   when other servers would need to be contacted to complete\
    \ the\n   operation.\n        Referral ::= SEQUENCE SIZE (1..MAX) OF uri URI\n\
    \        URI ::= LDAPString     -- limited to characters permitted in\n      \
    \                         -- URIs\n   If the client wishes to progress the operation,\
    \ it contacts one of\n   the supported services found in the referral.  If multiple\
    \ URIs are\n   present, the client assumes that any supported URI may be used\
    \ to\n   progress the operation.\n   Clients that follow referrals MUST ensure\
    \ that they do not loop\n   between servers.  They MUST NOT repeatedly contact\
    \ the same server\n   for the same request with the same parameters.  Some clients\
    \ use a\n   counter that is incremented each time referral handling occurs for\
    \ an\n   operation, and these kinds of clients MUST be able to handle at least\n\
    \   ten nested referrals while progressing the operation.\n   A URI for a server\
    \ implementing LDAP and accessible via TCP/IP (v4 or\n   v6) [RFC793][RFC791]\
    \ is written as an LDAP URL according to\n   [RFC4516].\n   Referral values that\
    \ are LDAP URLs follow these rules:\n   - If an alias was dereferenced, the <dn>\
    \ part of the LDAP URL MUST be\n     present, with the new target object name.\n\
    \   - It is RECOMMENDED that the <dn> part be present to avoid ambiguity.\n  \
    \ - If the <dn> part is present, the client uses this name in its next\n     request\
    \ to progress the operation, and if it is not present the\n     client uses the\
    \ same name as in the original request.\n   - Some servers (e.g., participating\
    \ in distributed indexing) may\n     provide a different filter in a URL of a\
    \ referral for a Search\n     operation.\n   - If the <filter> part of the LDAP\
    \ URL is present, the client uses\n     this filter in its next request to progress\
    \ this Search, and if it\n     is not present the client uses the same filter\
    \ as it used for that\n     Search.\n   - For Search, it is RECOMMENDED that the\
    \ <scope> part be present to\n     avoid ambiguity.\n   - If the <scope> part\
    \ is missing, the scope of the original Search is\n     used by the client to\
    \ progress the operation.\n   - Other aspects of the new request may be the same\
    \ as or different\n     from the request that generated the referral.\n   Other\
    \ kinds of URIs may be returned.  The syntax and semantics of\n   such URIs is\
    \ left to future specifications.  Clients may ignore URIs\n   that they do not\
    \ support.\n   UTF-8 encoded characters appearing in the string representation\
    \ of a\n   DN, search filter, or other fields of the referral value may not be\n\
    \   legal for URIs (e.g., spaces) and MUST be escaped using the % method\n   in\
    \ [RFC3986].\n"
- title: 4.1.11.  Controls
  contents:
  - "4.1.11.  Controls\n   Controls provide a mechanism whereby the semantics and\
    \ arguments of\n   existing LDAP operations may be extended.  One or more controls\
    \ may\n   be attached to a single LDAP message.  A control only affects the\n\
    \   semantics of the message it is attached to.\n   Controls sent by clients are\
    \ termed 'request controls', and those\n   sent by servers are termed 'response\
    \ controls'.\n        Controls ::= SEQUENCE OF control Control\n        Control\
    \ ::= SEQUENCE {\n             controlType             LDAPOID,\n            \
    \ criticality             BOOLEAN DEFAULT FALSE,\n             controlValue  \
    \          OCTET STRING OPTIONAL }\n   The controlType field is the dotted-decimal\
    \ representation of an\n   OBJECT IDENTIFIER that uniquely identifies the control.\
    \  This\n   provides unambiguous naming of controls.  Often, response control(s)\n\
    \   solicited by a request control share controlType values with the\n   request\
    \ control.\n   The criticality field only has meaning in controls attached to\n\
    \   request messages (except UnbindRequest).  For controls attached to\n   response\
    \ messages and the UnbindRequest, the criticality field SHOULD\n   be FALSE, and\
    \ MUST be ignored by the receiving protocol peer.  A\n   value of TRUE indicates\
    \ that it is unacceptable to perform the\n   operation without applying the semantics\
    \ of the control.\n   Specifically, the criticality field is applied as follows:\n\
    \   - If the server does not recognize the control type, determines that\n   \
    \  it is not appropriate for the operation, or is otherwise unwilling\n     to\
    \ perform the operation with the control, and if the criticality\n     field is\
    \ TRUE, the server MUST NOT perform the operation, and for\n     operations that\
    \ have a response message, it MUST return with the\n     resultCode set to unavailableCriticalExtension.\n\
    \   - If the server does not recognize the control type, determines that\n   \
    \  it is not appropriate for the operation, or is otherwise unwilling\n     to\
    \ perform the operation with the control, and if the criticality\n     field is\
    \ FALSE, the server MUST ignore the control.\n   - Regardless of criticality,\
    \ if a control is applied to an\n     operation, it is applied consistently and\
    \ impartially to the\n     entire operation.\n   The controlValue may contain\
    \ information associated with the\n   controlType.  Its format is defined by the\
    \ specification of the\n   control.  Implementations MUST be prepared to handle\
    \ arbitrary\n   contents of the controlValue octet string, including zero bytes.\
    \  It\n   is absent only if there is no value information that is associated\n\
    \   with a control of its type.  When a controlValue is defined in terms\n   of\
    \ ASN.1, and BER-encoded according to Section 5.1, it also follows\n   the extensibility\
    \ rules in Section 4.\n   Servers list the controlType of request controls they\
    \ recognize in\n   the 'supportedControl' attribute in the root DSE (Section 5.1\
    \ of\n   [RFC4512]).\n   Controls SHOULD NOT be combined unless the semantics\
    \ of the\n   combination has been specified.  The semantics of control\n   combinations,\
    \ if specified, are generally found in the control\n   specification most recently\
    \ published.  When a combination of\n   controls is encountered whose semantics\
    \ are invalid, not specified\n   (or not known), the message is considered not\
    \ well-formed; thus, the\n   operation fails with protocolError.  Controls with\
    \ a criticality of\n   FALSE may be ignored in order to arrive at a valid combination.\n\
    \   Additionally, unless order-dependent semantics are given in a\n   specification,\
    \ the order of a combination of controls in the SEQUENCE\n   is ignored.  Where\
    \ the order is to be ignored but cannot be ignored\n   by the server, the message\
    \ is considered not well-formed, and the\n   operation fails with protocolError.\
    \  Again, controls with a\n   criticality of FALSE may be ignored in order to\
    \ arrive at a valid\n   combination.\n   This document does not specify any controls.\
    \  Controls may be\n   specified in other documents.  Documents detailing control\
    \ extensions\n   are to provide for each control:\n   - the OBJECT IDENTIFIER\
    \ assigned to the control,\n   - direction as to what value the sender should\
    \ provide for the\n     criticality field (note: the semantics of the criticality\
    \ field are\n     defined above should not be altered by the control's\n     specification),\n\
    \   - whether the controlValue field is present, and if so, the format of\n  \
    \   its contents,\n   - the semantics of the control, and\n   - optionally, semantics\
    \ regarding the combination of the control with\n     other controls.\n"
- title: 4.2.  Bind Operation
  contents:
  - "4.2.  Bind Operation\n   The function of the Bind operation is to allow authentication\n\
    \   information to be exchanged between the client and server.  The Bind\n   operation\
    \ should be thought of as the \"authenticate\" operation.\n   Operational, authentication,\
    \ and security-related semantics of this\n   operation are given in [RFC4513].\n\
    \   The Bind request is defined as follows:\n        BindRequest ::= [APPLICATION\
    \ 0] SEQUENCE {\n             version                 INTEGER (1 ..  127),\n \
    \            name                    LDAPDN,\n             authentication    \
    \      AuthenticationChoice }\n        AuthenticationChoice ::= CHOICE {\n   \
    \          simple                  [0] OCTET STRING,\n                       \
    \              -- 1 and 2 reserved\n             sasl                    [3] SaslCredentials,\n\
    \             ...  }\n        SaslCredentials ::= SEQUENCE {\n             mechanism\
    \               LDAPString,\n             credentials             OCTET STRING\
    \ OPTIONAL }\n   Fields of the BindRequest are:\n   - version: A version number\
    \ indicating the version of the protocol to\n     be used at the LDAP message\
    \ layer.  This document describes version\n     3 of the protocol.  There is no\
    \ version negotiation.  The client\n     sets this field to the version it desires.\
    \  If the server does not\n     support the specified version, it MUST respond\
    \ with a BindResponse\n     where the resultCode is set to protocolError.\n  \
    \ - name: If not empty, the name of the Directory object that the\n     client\
    \ wishes to bind as.  This field may take on a null value (a\n     zero-length\
    \ string) for the purposes of anonymous binds ([RFC4513],\n     Section 5.1) or\
    \ when using SASL [RFC4422] authentication\n     ([RFC4513], Section 5.2).  Where\
    \ the server attempts to locate the\n     named object, it SHALL NOT perform alias\
    \ dereferencing.\n   - authentication: Information used in authentication.  This\
    \ type is\n     extensible as defined in Section 3.7 of [RFC4520].  Servers that\
    \ do\n     not support a choice supplied by a client return a BindResponse\n \
    \    with the resultCode set to authMethodNotSupported.\n     Textual passwords\
    \ (consisting of a character sequence with a known\n     character set and encoding)\
    \ transferred to the server using the\n     simple AuthenticationChoice SHALL\
    \ be transferred as UTF-8 [RFC3629]\n     encoded [Unicode].  Prior to transfer,\
    \ clients SHOULD prepare text\n     passwords as \"query\" strings by applying\
    \ the SASLprep [RFC4013]\n     profile of the stringprep [RFC3454] algorithm.\
    \  Passwords\n     consisting of other data (such as random octets) MUST NOT be\n\
    \     altered.  The determination of whether a password is textual is a\n    \
    \ local client matter.\n"
- title: 4.2.1.  Processing of the Bind Request
  contents:
  - "4.2.1.  Processing of the Bind Request\n   Before processing a BindRequest, all\
    \ uncompleted operations MUST\n   either complete or be abandoned.  The server\
    \ may either wait for the\n   uncompleted operations to complete, or abandon them.\
    \  The server then\n   proceeds to authenticate the client in either a single-step\
    \ or\n   multi-step Bind process.  Each step requires the server to return a\n\
    \   BindResponse to indicate the status of authentication.\n   After sending a\
    \ BindRequest, clients MUST NOT send further LDAP PDUs\n   until receiving the\
    \ BindResponse.  Similarly, servers SHOULD NOT\n   process or respond to requests\
    \ received while processing a\n   BindRequest.\n   If the client did not bind\
    \ before sending a request and receives an\n   operationsError to that request,\
    \ it may then send a BindRequest.  If\n   this also fails or the client chooses\
    \ not to bind on the existing\n   LDAP session, it may terminate the LDAP session,\
    \ re-establish it, and\n   begin again by first sending a BindRequest.  This will\
    \ aid in\n   interoperating with servers implementing other versions of LDAP.\n\
    \   Clients may send multiple Bind requests to change the authentication\n   and/or\
    \ security associations or to complete a multi-stage Bind\n   process.  Authentication\
    \ from earlier binds is subsequently ignored.\n   For some SASL authentication\
    \ mechanisms, it may be necessary for the\n   client to invoke the BindRequest\
    \ multiple times ([RFC4513], Section\n   5.2).  Clients MUST NOT invoke operations\
    \ between two Bind requests\n   made as part of a multi-stage Bind.\n   A client\
    \ may abort a SASL bind negotiation by sending a BindRequest\n   with a different\
    \ value in the mechanism field of SaslCredentials, or\n   an AuthenticationChoice\
    \ other than sasl.\n   If the client sends a BindRequest with the sasl mechanism\
    \ field as an\n   empty string, the server MUST return a BindResponse with the\n\
    \   resultCode set to authMethodNotSupported.  This will allow the client\n  \
    \ to abort a negotiation if it wishes to try again with the same SASL\n   mechanism.\n"
- title: 4.2.2.  Bind Response
  contents:
  - "4.2.2.  Bind Response\n   The Bind response is defined as follows.\n        BindResponse\
    \ ::= [APPLICATION 1] SEQUENCE {\n             COMPONENTS OF LDAPResult,\n   \
    \          serverSaslCreds    [7] OCTET STRING OPTIONAL }\n   BindResponse consists\
    \ simply of an indication from the server of the\n   status of the client's request\
    \ for authentication.\n   A successful Bind operation is indicated by a BindResponse\
    \ with a\n   resultCode set to success.  Otherwise, an appropriate result code\
    \ is\n   set in the BindResponse.  For BindResponse, the protocolError result\n\
    \   code may be used to indicate that the version number supplied by the\n   client\
    \ is unsupported.\n   If the client receives a BindResponse where the resultCode\
    \ is set to\n   protocolError, it is to assume that the server does not support\
    \ this\n   version of LDAP.  While the client may be able proceed with another\n\
    \   version of this protocol (which may or may not require closing and\n   re-establishing\
    \ the transport connection), how to proceed with\n   another version of this protocol\
    \ is beyond the scope of this\n   document.  Clients that are unable or unwilling\
    \ to proceed SHOULD\n   terminate the LDAP session.\n   The serverSaslCreds field\
    \ is used as part of a SASL-defined bind\n   mechanism to allow the client to\
    \ authenticate the server to which it\n   is communicating, or to perform \"challenge-response\"\
    \ authentication.\n   If the client bound with the simple choice, or the SASL\
    \ mechanism\n   does not require the server to return information to the client,\
    \ then\n   this field SHALL NOT be included in the BindResponse.\n"
- title: 4.3.  Unbind Operation
  contents:
  - "4.3.  Unbind Operation\n   The function of the Unbind operation is to terminate\
    \ an LDAP session.\n   The Unbind operation is not the antithesis of the Bind\
    \ operation as\n   the name implies.  The naming of these operations are historical.\n\
    \   The Unbind operation should be thought of as the \"quit\" operation.\n   The\
    \ Unbind operation is defined as follows:\n        UnbindRequest ::= [APPLICATION\
    \ 2] NULL\n   The client, upon transmission of the UnbindRequest, and the server,\n\
    \   upon receipt of the UnbindRequest, are to gracefully terminate the\n   LDAP\
    \ session as described in Section 5.3.  Uncompleted operations are\n   handled\
    \ as specified in Section 3.1.\n"
- title: 4.4.  Unsolicited Notification
  contents:
  - "4.4.  Unsolicited Notification\n   An unsolicited notification is an LDAPMessage\
    \ sent from the server to\n   the client that is not in response to any LDAPMessage\
    \ received by the\n   server.  It is used to signal an extraordinary condition\
    \ in the\n   server or in the LDAP session between the client and the server.\
    \  The\n   notification is of an advisory nature, and the server will not expect\n\
    \   any response to be returned from the client.\n   The unsolicited notification\
    \ is structured as an LDAPMessage in which\n   the messageID is zero and protocolOp\
    \ is set to the extendedResp\n   choice using the ExtendedResponse type (See Section\
    \ 4.12).  The\n   responseName field of the ExtendedResponse always contains an\
    \ LDAPOID\n   that is unique for this notification.\n   One unsolicited notification\
    \ (Notice of Disconnection) is defined in\n   this document.  The specification\
    \ of an unsolicited notification\n   consists of:\n   - the OBJECT IDENTIFIER\
    \ assigned to the notification (to be specified\n     in the responseName,\n \
    \  - the format of the contents of the responseValue (if any),\n   - the circumstances\
    \ which will cause the notification to be sent, and\n   - the semantics of the\
    \ message.\n"
- title: 4.4.1.  Notice of Disconnection
  contents:
  - "4.4.1.  Notice of Disconnection\n   This notification may be used by the server\
    \ to advise the client that\n   the server is about to terminate the LDAP session\
    \ on its own\n   initiative.  This notification is intended to assist clients\
    \ in\n   distinguishing between an exceptional server condition and a\n   transient\
    \ network failure.  Note that this notification is not a\n   response to an Unbind\
    \ requested by the client.  Uncompleted\n   operations are handled as specified\
    \ in Section 3.1.\n   The responseName is 1.3.6.1.4.1.1466.20036, the responseValue\
    \ field\n   is absent, and the resultCode is used to indicate the reason for the\n\
    \   disconnection.  When the strongerAuthRequired resultCode is returned\n   with\
    \ this message, it indicates that the server has detected that an\n   established\
    \ security association between the client and server has\n   unexpectedly failed\
    \ or been compromised.\n   Upon transmission of the Notice of Disconnection, the\
    \ server\n   gracefully terminates the LDAP session as described in Section 5.3.\n"
- title: 4.5.  Search Operation
  contents:
  - "4.5.  Search Operation\n   The Search operation is used to request a server to\
    \ return, subject\n   to access controls and other restrictions, a set of entries\
    \ matching\n   a complex search criterion.  This can be used to read attributes\
    \ from\n   a single entry, from entries immediately subordinate to a particular\n\
    \   entry, or from a whole subtree of entries.\n"
- title: 4.5.1.  Search Request
  contents:
  - "4.5.1.  Search Request\n   The Search request is defined as follows:\n      \
    \  SearchRequest ::= [APPLICATION 3] SEQUENCE {\n             baseObject     \
    \ LDAPDN,\n             scope           ENUMERATED {\n                  baseObject\
    \              (0),\n                  singleLevel             (1),\n        \
    \          wholeSubtree            (2),\n                  ...  },\n         \
    \    derefAliases    ENUMERATED {\n                  neverDerefAliases       (0),\n\
    \                  derefInSearching        (1),\n                  derefFindingBaseObj\
    \     (2),\n                  derefAlways             (3) },\n             sizeLimit\
    \       INTEGER (0 ..  maxInt),\n             timeLimit       INTEGER (0 ..  maxInt),\n\
    \             typesOnly       BOOLEAN,\n             filter          Filter,\n\
    \             attributes      AttributeSelection }\n        AttributeSelection\
    \ ::= SEQUENCE OF selector LDAPString\n                        -- The LDAPString\
    \ is constrained to\n                        -- <attributeSelector> in Section\
    \ 4.5.1.8\n        Filter ::= CHOICE {\n             and             [0] SET SIZE\
    \ (1..MAX) OF filter Filter,\n             or              [1] SET SIZE (1..MAX)\
    \ OF filter Filter,\n             not             [2] Filter,\n             equalityMatch\
    \   [3] AttributeValueAssertion,\n             substrings      [4] SubstringFilter,\n\
    \             greaterOrEqual  [5] AttributeValueAssertion,\n             lessOrEqual\
    \     [6] AttributeValueAssertion,\n             present         [7] AttributeDescription,\n\
    \             approxMatch     [8] AttributeValueAssertion,\n             extensibleMatch\
    \ [9] MatchingRuleAssertion,\n             ...  }\n        SubstringFilter ::=\
    \ SEQUENCE {\n             type           AttributeDescription,\n            \
    \ substrings     SEQUENCE SIZE (1..MAX) OF substring CHOICE {\n              \
    \    initial [0] AssertionValue,  -- can occur at most once\n                \
    \  any     [1] AssertionValue,\n                  final   [2] AssertionValue }\
    \ -- can occur at most once\n             }\n        MatchingRuleAssertion ::=\
    \ SEQUENCE {\n             matchingRule    [1] MatchingRuleId OPTIONAL,\n    \
    \         type            [2] AttributeDescription OPTIONAL,\n             matchValue\
    \      [3] AssertionValue,\n             dnAttributes    [4] BOOLEAN DEFAULT FALSE\
    \ }\n   Note that an X.500 \"list\"-like operation can be emulated by the\n  \
    \ client requesting a singleLevel Search operation with a filter\n   checking\
    \ for the presence of the 'objectClass' attribute, and that an\n   X.500 \"read\"\
    -like operation can be emulated by a baseObject Search\n   operation with the\
    \ same filter.  A server that provides a gateway to\n   X.500 is not required\
    \ to use the Read or List operations, although it\n   may choose to do so, and\
    \ if it does, it must provide the same\n   semantics as the X.500 Search operation.\n"
- title: 4.5.1.1.  SearchRequest.baseObject
  contents:
  - "4.5.1.1.  SearchRequest.baseObject\n   The name of the base object entry (or\
    \ possibly the root) relative to\n   which the Search is to be performed.\n"
- title: 4.5.1.2.  SearchRequest.scope
  contents:
  - "4.5.1.2.  SearchRequest.scope\n   Specifies the scope of the Search to be performed.\
    \  The semantics (as\n   described in [X.511]) of the defined values of this field\
    \ are:\n      baseObject: The scope is constrained to the entry named by\n   \
    \   baseObject.\n      singleLevel: The scope is constrained to the immediate\n\
    \      subordinates of the entry named by baseObject.\n      wholeSubtree: The\
    \ scope is constrained to the entry named by\n      baseObject and to all its\
    \ subordinates.\n"
- title: 4.5.1.3.  SearchRequest.derefAliases
  contents:
  - "4.5.1.3.  SearchRequest.derefAliases\n   An indicator as to whether or not alias\
    \ entries (as defined in\n   [RFC4512]) are to be dereferenced during stages of\
    \ the Search\n   operation.\n   The act of dereferencing an alias includes recursively\
    \ dereferencing\n   aliases that refer to aliases.\n   Servers MUST detect looping\
    \ while dereferencing aliases in order to\n   prevent denial-of-service attacks\
    \ of this nature.\n   The semantics of the defined values of this field are:\n\
    \      neverDerefAliases: Do not dereference aliases in searching or in\n    \
    \  locating the base object of the Search.\n      derefInSearching: While searching\
    \ subordinates of the base object,\n      dereference any alias within the search\
    \ scope.  Dereferenced\n      objects become the vertices of further search scopes\
    \ where the\n      Search operation is also applied.  If the search scope is\n\
    \      wholeSubtree, the Search continues in the subtree(s) of any\n      dereferenced\
    \ object.  If the search scope is singleLevel, the\n      search is applied to\
    \ any dereferenced objects and is not applied\n      to their subordinates.  Servers\
    \ SHOULD eliminate duplicate entries\n      that arise due to alias dereferencing\
    \ while searching.\n      derefFindingBaseObj: Dereference aliases in locating\
    \ the base\n      object of the Search, but not when searching subordinates of\
    \ the\n      base object.\n      derefAlways: Dereference aliases both in searching\
    \ and in locating\n      the base object of the Search.\n"
- title: 4.5.1.4.  SearchRequest.sizeLimit
  contents:
  - "4.5.1.4.  SearchRequest.sizeLimit\n   A size limit that restricts the maximum\
    \ number of entries to be\n   returned as a result of the Search.  A value of\
    \ zero in this field\n   indicates that no client-requested size limit restrictions\
    \ are in\n   effect for the Search.  Servers may also enforce a maximum number\
    \ of\n   entries to return.\n"
- title: 4.5.1.5.  SearchRequest.timeLimit
  contents:
  - "4.5.1.5.  SearchRequest.timeLimit\n   A time limit that restricts the maximum\
    \ time (in seconds) allowed for\n   a Search.  A value of zero in this field indicates\
    \ that no client-\n   requested time limit restrictions are in effect for the\
    \ Search.\n   Servers may also enforce a maximum time limit for the Search.\n"
- title: 4.5.1.6.  SearchRequest.typesOnly
  contents:
  - "4.5.1.6.  SearchRequest.typesOnly\n   An indicator as to whether Search results\
    \ are to contain both\n   attribute descriptions and values, or just attribute\
    \ descriptions.\n   Setting this field to TRUE causes only attribute descriptions\
    \ (and\n   not values) to be returned.  Setting this field to FALSE causes both\n\
    \   attribute descriptions and values to be returned.\n"
- title: 4.5.1.7.  SearchRequest.filter
  contents:
  - "4.5.1.7.  SearchRequest.filter\n   A filter that defines the conditions that\
    \ must be fulfilled in order\n   for the Search to match a given entry.\n   The\
    \ 'and', 'or', and 'not' choices can be used to form combinations\n   of filters.\
    \  At least one filter element MUST be present in an 'and'\n   or 'or' choice.\
    \  The others match against individual attribute values\n   of entries in the\
    \ scope of the Search.  (Implementor's note: the\n   'not' filter is an example\
    \ of a tagged choice in an implicitly-tagged\n   module.  In BER this is treated\
    \ as if the tag were explicit.)\n   A server MUST evaluate filters according to\
    \ the three-valued logic of\n   [X.511] (1993), Clause 7.8.1.  In summary, a filter\
    \ is evaluated to\n   \"TRUE\", \"FALSE\", or \"Undefined\".  If the filter evaluates\
    \ to TRUE for\n   a particular entry, then the attributes of that entry are returned\
    \ as\n   part of the Search result (subject to any applicable access control\n\
    \   restrictions).  If the filter evaluates to FALSE or Undefined, then\n   the\
    \ entry is ignored for the Search.\n   A filter of the \"and\" choice is TRUE\
    \ if all the filters in the SET OF\n   evaluate to TRUE, FALSE if at least one\
    \ filter is FALSE, and\n   Undefined otherwise.  A filter of the \"or\" choice\
    \ is FALSE if all the\n   filters in the SET OF evaluate to FALSE, TRUE if at\
    \ least one filter\n   is TRUE, and Undefined otherwise.  A filter of the 'not'\
    \ choice is\n   TRUE if the filter being negated is FALSE, FALSE if it is TRUE,\
    \ and\n   Undefined if it is Undefined.\n   A filter item evaluates to Undefined\
    \ when the server would not be\n   able to determine whether the assertion value\
    \ matches an entry.\n   Examples include:\n   - An attribute description in an\
    \ equalityMatch, substrings,\n     greaterOrEqual, lessOrEqual, approxMatch, or\
    \ extensibleMatch filter\n     is not recognized by the server.\n   - The attribute\
    \ type does not define the appropriate matching rule.\n   - A MatchingRuleId in\
    \ the extensibleMatch is not recognized by the\n     server or is not valid for\
    \ the attribute type.\n   - The type of filtering requested is not implemented.\n\
    \   - The assertion value is invalid.\n   For example, if a server did not recognize\
    \ the attribute type\n   shoeSize, the filters (shoeSize=*), (shoeSize=12), (shoeSize>=12),\n\
    \   and (shoeSize<=12) would each evaluate to Undefined.\n   Servers MUST NOT\
    \ return errors if attribute descriptions or matching\n   rule ids are not recognized,\
    \ assertion values are invalid, or the\n   assertion syntax is not supported.\
    \  More details of filter processing\n   are given in Clause 7.8 of [X.511].\n"
- title: 4.5.1.7.1.  SearchRequest.filter.equalityMatch
  contents:
  - "4.5.1.7.1.  SearchRequest.filter.equalityMatch\n   The matching rule for an equalityMatch\
    \ filter is defined by the\n   EQUALITY matching rule for the attribute type or\
    \ subtype.  The filter\n   is TRUE when the EQUALITY rule returns TRUE as applied\
    \ to the\n   attribute or subtype and the asserted value.\n"
- title: 4.5.1.7.2.  SearchRequest.filter.substrings
  contents:
  - "4.5.1.7.2.  SearchRequest.filter.substrings\n   There SHALL be at most one 'initial'\
    \ and at most one 'final' in the\n   'substrings' of a SubstringFilter.  If 'initial'\
    \ is present, it SHALL\n   be the first element of 'substrings'.  If 'final' is\
    \ present, it\n   SHALL be the last element of 'substrings'.\n   The matching\
    \ rule for an AssertionValue in a substrings filter item\n   is defined by the\
    \ SUBSTR matching rule for the attribute type or\n   subtype.  The filter is TRUE\
    \ when the SUBSTR rule returns TRUE as\n   applied to the attribute or subtype\
    \ and the asserted value.\n   Note that the AssertionValue in a substrings filter\
    \ item conforms to\n   the assertion syntax of the EQUALITY matching rule for\
    \ the attribute\n   type rather than to the assertion syntax of the SUBSTR matching\
    \ rule\n   for the attribute type.  Conceptually, the entire SubstringFilter is\n\
    \   converted into an assertion value of the substrings matching rule\n   prior\
    \ to applying the rule.\n"
- title: 4.5.1.7.3.  SearchRequest.filter.greaterOrEqual
  contents:
  - "4.5.1.7.3.  SearchRequest.filter.greaterOrEqual\n   The matching rule for a greaterOrEqual\
    \ filter is defined by the\n   ORDERING matching rule for the attribute type or\
    \ subtype.  The filter\n   is TRUE when the ORDERING rule returns FALSE as applied\
    \ to the\n   attribute or subtype and the asserted value.\n"
- title: 4.5.1.7.4.  SearchRequest.filter.lessOrEqual
  contents:
  - "4.5.1.7.4.  SearchRequest.filter.lessOrEqual\n   The matching rules for a lessOrEqual\
    \ filter are defined by the\n   ORDERING and EQUALITY matching rules for the attribute\
    \ type or\n   subtype.  The filter is TRUE when either the ORDERING or EQUALITY\n\
    \   rule returns TRUE as applied to the attribute or subtype and the\n   asserted\
    \ value.\n"
- title: 4.5.1.7.5.  SearchRequest.filter.present
  contents:
  - "4.5.1.7.5.  SearchRequest.filter.present\n   A present filter is TRUE when there\
    \ is an attribute or subtype of the\n   specified attribute description present\
    \ in an entry, FALSE when no\n   attribute or subtype of the specified attribute\
    \ description is\n   present in an entry, and Undefined otherwise.\n"
- title: 4.5.1.7.6.  SearchRequest.filter.approxMatch
  contents:
  - "4.5.1.7.6.  SearchRequest.filter.approxMatch\n   An approxMatch filter is TRUE\
    \ when there is a value of the attribute\n   type or subtype for which some locally-defined\
    \ approximate matching\n   algorithm (e.g., spelling variations, phonetic match,\
    \ etc.) returns\n   TRUE.  If a value matches for equality, it also satisfies\
    \ an\n   approximate match.  If approximate matching is not supported for the\n\
    \   attribute, this filter item should be treated as an equalityMatch.\n"
- title: 4.5.1.7.7.  SearchRequest.filter.extensibleMatch
  contents:
  - "4.5.1.7.7.  SearchRequest.filter.extensibleMatch\n   The fields of the extensibleMatch\
    \ filter item are evaluated as\n   follows:\n   - If the matchingRule field is\
    \ absent, the type field MUST be\n     present, and an equality match is performed\
    \ for that type.\n   - If the type field is absent and the matchingRule is present,\
    \ the\n     matchValue is compared against all attributes in an entry that\n \
    \    support that matchingRule.\n   - If the type field is present and the matchingRule\
    \ is present, the\n     matchValue is compared against the specified attribute\
    \ type and its\n     subtypes.\n   - If the dnAttributes field is set to TRUE,\
    \ the match is additionally\n     applied against all the AttributeValueAssertions\
    \ in an entry's\n     distinguished name, and it evaluates to TRUE if there is\
    \ at least\n     one attribute or subtype in the distinguished name for which\
    \ the\n     filter item evaluates to TRUE.  The dnAttributes field is present\n\
    \     to alleviate the need for multiple versions of generic matching\n     rules\
    \ (such as word matching), where one applies to entries and\n     another applies\
    \ to entries and DN attributes as well.\n   The matchingRule used for evaluation\
    \ determines the syntax for the\n   assertion value.  Once the matchingRule and\
    \ attribute(s) have been\n   determined, the filter item evaluates to TRUE if\
    \ it matches at least\n   one attribute type or subtype in the entry, FALSE if\
    \ it does not\n   match any attribute type or subtype in the entry, and Undefined\
    \ if\n   the matchingRule is not recognized, the matchingRule is unsuitable\n\
    \   for use with the specified type, or the assertionValue is invalid.\n"
- title: 4.5.1.8.  SearchRequest.attributes
  contents:
  - "4.5.1.8.  SearchRequest.attributes\n   A selection list of the attributes to\
    \ be returned from each entry\n   that matches the search filter.  Attributes\
    \ that are subtypes of\n   listed attributes are implicitly included.  LDAPString\
    \ values of this\n   field are constrained to the following Augmented Backus-Naur\
    \ Form\n   (ABNF) [RFC4234]:\n      attributeSelector = attributedescription /\
    \ selectorspecial\n      selectorspecial = noattrs / alluserattrs\n      noattrs\
    \ = %x31.2E.31 ; \"1.1\"\n      alluserattrs = %x2A ; asterisk (\"*\")\n     \
    \ The <attributedescription> production is defined in Section 2.5 of\n      [RFC4512].\n\
    \      There are three special cases that may appear in the attributes\n     \
    \ selection list:\n      1. An empty list with no attributes requests the return\
    \ of all\n         user attributes.\n      2. A list containing \"*\" (with zero\
    \ or more attribute\n         descriptions) requests the return of all user attributes\
    \ in\n         addition to other listed (operational) attributes.\n      3. A\
    \ list containing only the OID \"1.1\" indicates that no\n         attributes\
    \ are to be returned.  If \"1.1\" is provided with other\n         attributeSelector\
    \ values, the \"1.1\" attributeSelector is\n         ignored.  This OID was chosen\
    \ because it does not (and can not)\n         correspond to any attribute in use.\n\
    \   Client implementors should note that even if all user attributes are\n   requested,\
    \ some attributes and/or attribute values of the entry may\n   not be included\
    \ in Search results due to access controls or other\n   restrictions.  Furthermore,\
    \ servers will not return operational\n   attributes, such as objectClasses or\
    \ attributeTypes, unless they are\n   listed by name.  Operational attributes\
    \ are described in [RFC4512].\n   Attributes are returned at most once in an entry.\
    \  If an attribute\n   description is named more than once in the list, the subsequent\
    \ names\n   are ignored.  If an attribute description in the list is not\n   recognized,\
    \ it is ignored by the server.\n"
- title: 4.5.2.  Search Result
  contents:
  - "4.5.2.  Search Result\n   The results of the Search operation are returned as\
    \ zero or more\n   SearchResultEntry and/or SearchResultReference messages, followed\
    \ by\n   a single SearchResultDone message.\n        SearchResultEntry ::= [APPLICATION\
    \ 4] SEQUENCE {\n             objectName      LDAPDN,\n             attributes\
    \      PartialAttributeList }\n        PartialAttributeList ::= SEQUENCE OF\n\
    \                             partialAttribute PartialAttribute\n        SearchResultReference\
    \ ::= [APPLICATION 19] SEQUENCE\n                                  SIZE (1..MAX)\
    \ OF uri URI\n        SearchResultDone ::= [APPLICATION 5] LDAPResult\n   Each\
    \ SearchResultEntry represents an entry found during the Search.\n   Each SearchResultReference\
    \ represents an area not yet explored during\n   the Search.  The SearchResultEntry\
    \ and SearchResultReference messages\n   may come in any order.  Following all\
    \ the SearchResultReference and\n   SearchResultEntry responses, the server returns\
    \ a SearchResultDone\n   response, which contains an indication of success or\
    \ details any\n   errors that have occurred.\n   Each entry returned in a SearchResultEntry\
    \ will contain all\n   appropriate attributes as specified in the attributes field\
    \ of the\n   Search Request, subject to access control and other administrative\n\
    \   policy.  Note that the PartialAttributeList may hold zero elements.\n   This\
    \ may happen when none of the attributes of an entry were\n   requested or could\
    \ be returned.  Note also that the partialAttribute\n   vals set may hold zero\
    \ elements.  This may happen when typesOnly is\n   requested, access controls\
    \ prevent the return of values, or other\n   reasons.\n   Some attributes may\
    \ be constructed by the server and appear in a\n   SearchResultEntry attribute\
    \ list, although they are not stored\n   attributes of an entry.  Clients SHOULD\
    \ NOT assume that all\n   attributes can be modified, even if this is permitted\
    \ by access\n   control.\n   If the server's schema defines short names [RFC4512]\
    \ for an attribute\n   type, then the server SHOULD use one of those names in\
    \ attribute\n   descriptions for that attribute type (in preference to using the\n\
    \   <numericoid> [RFC4512] format of the attribute type's object\n   identifier).\
    \  The server SHOULD NOT use the short name if that name\n   is known by the server\
    \ to be ambiguous, or if it is otherwise likely\n   to cause interoperability\
    \ problems.\n"
- title: 4.5.3.  Continuation References in the Search Result
  contents:
  - "4.5.3.  Continuation References in the Search Result\n   If the server was able\
    \ to locate the entry referred to by the\n   baseObject but was unable or unwilling\
    \ to search one or more non-\n   local entries, the server may return one or more\n\
    \   SearchResultReference messages, each containing a reference to\n   another\
    \ set of servers for continuing the operation.  A server MUST\n   NOT return any\
    \ SearchResultReference messages if it has not located\n   the baseObject and\
    \ thus has not searched any entries.  In this case,\n   it would return a SearchResultDone\
    \ containing either a referral or\n   noSuchObject result code (depending on the\
    \ server's knowledge of the\n   entry named in the baseObject).\n   If a server\
    \ holds a copy or partial copy of the subordinate naming\n   context (Section\
    \ 5 of [RFC4512]), it may use the search filter to\n   determine whether or not\
    \ to return a SearchResultReference response.\n   Otherwise, SearchResultReference\
    \ responses are always returned when\n   in scope.\n   The SearchResultReference\
    \ is of the same data type as the Referral.\n   If the client wishes to progress\
    \ the Search, it issues a new Search\n   operation for each SearchResultReference\
    \ that is returned.  If\n   multiple URIs are present, the client assumes that\
    \ any supported URI\n   may be used to progress the operation.\n   Clients that\
    \ follow search continuation references MUST ensure that\n   they do not loop\
    \ between servers.  They MUST NOT repeatedly contact\n   the same server for the\
    \ same request with the same parameters.  Some\n   clients use a counter that\
    \ is incremented each time search result\n   reference handling occurs for an\
    \ operation, and these kinds of\n   clients MUST be able to handle at least ten\
    \ nested referrals while\n   progressing the operation.\n   Note that the Abandon\
    \ operation described in Section 4.11 applies\n   only to a particular operation\
    \ sent at the LDAP message layer between\n   a client and server.  The client\
    \ must individually abandon subsequent\n   Search operations it wishes to.\n \
    \  A URI for a server implementing LDAP and accessible via TCP/IP (v4 or\n   v6)\
    \ [RFC793][RFC791] is written as an LDAP URL according to\n   [RFC4516].\n   SearchResultReference\
    \ values that are LDAP URLs follow these rules:\n   - The <dn> part of the LDAP\
    \ URL MUST be present, with the new target\n     object name.  The client uses\
    \ this name when following the\n     reference.\n   - Some servers (e.g., participating\
    \ in distributed indexing) may\n     provide a different filter in the LDAP URL.\n\
    \   - If the <filter> part of the LDAP URL is present, the client uses\n     this\
    \ filter in its next request to progress this Search, and if it\n     is not present\
    \ the client uses the same filter as it used for that\n     Search.\n   - If the\
    \ originating search scope was singleLevel, the <scope> part\n     of the LDAP\
    \ URL will be \"base\".\n   - It is RECOMMENDED that the <scope> part be present\
    \ to avoid\n     ambiguity.  In the absence of a <scope> part, the scope of the\n\
    \     original Search request is assumed.\n   - Other aspects of the new Search\
    \ request may be the same as or\n     different from the Search request that generated\
    \ the\n     SearchResultReference.\n   - The name of an unexplored subtree in\
    \ a SearchResultReference need\n     not be subordinate to the base object.\n\
    \   Other kinds of URIs may be returned.  The syntax and semantics of\n   such\
    \ URIs is left to future specifications.  Clients may ignore URIs\n   that they\
    \ do not support.\n   UTF-8-encoded characters appearing in the string representation\
    \ of a\n   DN, search filter, or other fields of the referral value may not be\n\
    \   legal for URIs (e.g., spaces) and MUST be escaped using the % method\n   in\
    \ [RFC3986].\n"
- title: 4.5.3.1.  Examples
  contents:
  - "4.5.3.1.  Examples\n   For example, suppose the contacted server (hosta) holds\
    \ the entry\n   <DC=Example,DC=NET> and the entry <CN=Manager,DC=Example,DC=NET>.\
    \  It\n   knows that both LDAP servers (hostb) and (hostc) hold\n   <OU=People,DC=Example,DC=NET>\
    \ (one is the master and the other server\n   a shadow), and that LDAP-capable\
    \ server (hostd) holds the subtree\n   <OU=Roles,DC=Example,DC=NET>.  If a wholeSubtree\
    \ Search of\n   <DC=Example,DC=NET> is requested to the contacted server, it may\n\
    \   return the following:\n     SearchResultEntry for DC=Example,DC=NET\n    \
    \ SearchResultEntry for CN=Manager,DC=Example,DC=NET\n     SearchResultReference\
    \ {\n       ldap://hostb/OU=People,DC=Example,DC=NET??sub\n       ldap://hostc/OU=People,DC=Example,DC=NET??sub\
    \ }\n     SearchResultReference {\n       ldap://hostd/OU=Roles,DC=Example,DC=NET??sub\
    \ }\n     SearchResultDone (success)\n   Client implementors should note that\
    \ when following a\n   SearchResultReference, additional SearchResultReference\
    \ may be\n   generated.  Continuing the example, if the client contacted the\n\
    \   server (hostb) and issued the Search request for the subtree\n   <OU=People,DC=Example,DC=NET>,\
    \ the server might respond as follows:\n     SearchResultEntry for OU=People,DC=Example,DC=NET\n\
    \     SearchResultReference {\n       ldap://hoste/OU=Managers,OU=People,DC=Example,DC=NET??sub\
    \ }\n     SearchResultReference {\n       ldap://hostf/OU=Consultants,OU=People,DC=Example,DC=NET??sub\
    \ }\n     SearchResultDone (success)\n   Similarly, if a singleLevel Search of\
    \ <DC=Example,DC=NET> is\n   requested to the contacted server, it may return\
    \ the following:\n     SearchResultEntry for CN=Manager,DC=Example,DC=NET\n  \
    \   SearchResultReference {\n       ldap://hostb/OU=People,DC=Example,DC=NET??base\n\
    \       ldap://hostc/OU=People,DC=Example,DC=NET??base }\n     SearchResultReference\
    \ {\n       ldap://hostd/OU=Roles,DC=Example,DC=NET??base }\n     SearchResultDone\
    \ (success)\n   If the contacted server does not hold the base object for the\
    \ Search,\n   but has knowledge of its possible location, then it may return a\n\
    \   referral to the client.  In this case, if the client requests a\n   subtree\
    \ Search of <DC=Example,DC=ORG> to hosta, the server returns a\n   SearchResultDone\
    \ containing a referral.\n     SearchResultDone (referral) {\n       ldap://hostg/DC=Example,DC=ORG??sub\
    \ }\n"
- title: 4.6.  Modify Operation
  contents:
  - "4.6.  Modify Operation\n   The Modify operation allows a client to request that\
    \ a modification\n   of an entry be performed on its behalf by a server.  The\
    \ Modify\n   Request is defined as follows:\n        ModifyRequest ::= [APPLICATION\
    \ 6] SEQUENCE {\n             object          LDAPDN,\n             changes  \
    \       SEQUENCE OF change SEQUENCE {\n                  operation       ENUMERATED\
    \ {\n                       add     (0),\n                       delete  (1),\n\
    \                       replace (2),\n                       ...  },\n       \
    \           modification    PartialAttribute } }\n   Fields of the Modify Request\
    \ are:\n   - object: The value of this field contains the name of the entry to\n\
    \     be modified.  The server SHALL NOT perform any alias dereferencing\n   \
    \  in determining the object to be modified.\n   - changes: A list of modifications\
    \ to be performed on the entry.  The\n     entire list of modifications MUST be\
    \ performed in the order they\n     are listed as a single atomic operation. \
    \ While individual\n     modifications may violate certain aspects of the directory\
    \ schema\n     (such as the object class definition and Directory Information\
    \ Tree\n     (DIT) content rule), the resulting entry after the entire list of\n\
    \     modifications is performed MUST conform to the requirements of the\n   \
    \  directory model and controlling schema [RFC4512].\n     -  operation: Used\
    \ to specify the type of modification being\n        performed.  Each operation\
    \ type acts on the following\n        modification.  The values of this field\
    \ have the following\n        semantics, respectively:\n           add: add values\
    \ listed to the modification attribute,\n           creating the attribute if\
    \ necessary.\n           delete: delete values listed from the modification attribute.\n\
    \           If no values are listed, or if all current values of the\n       \
    \    attribute are listed, the entire attribute is removed.\n           replace:\
    \ replace all existing values of the modification\n           attribute with the\
    \ new values listed, creating the attribute\n           if it did not already\
    \ exist.  A replace with no value will\n           delete the entire attribute\
    \ if it exists, and it is ignored\n           if the attribute does not exist.\n\
    \     -  modification: A PartialAttribute (which may have an empty SET\n     \
    \   of vals) used to hold the attribute type or attribute type and\n        values\
    \ being modified.\n   Upon receipt of a Modify Request, the server attempts to\
    \ perform the\n   necessary modifications to the DIT and returns the result in\
    \ a Modify\n   Response, defined as follows:\n        ModifyResponse ::= [APPLICATION\
    \ 7] LDAPResult\n   The server will return to the client a single Modify Response\n\
    \   indicating either the successful completion of the DIT modification,\n   or\
    \ the reason that the modification failed.  Due to the requirement\n   for atomicity\
    \ in applying the list of modifications in the Modify\n   Request, the client\
    \ may expect that no modifications of the DIT have\n   been performed if the Modify\
    \ Response received indicates any sort of\n   error, and that all requested modifications\
    \ have been performed if\n   the Modify Response indicates successful completion\
    \ of the Modify\n   operation.  Whether or not the modification was applied cannot\
    \ be\n   determined by the client if the Modify Response was not received\n  \
    \ (e.g., the LDAP session was terminated or the Modify operation was\n   abandoned).\n\
    \   Servers MUST ensure that entries conform to user and system schema\n   rules\
    \ or other data model constraints.  The Modify operation cannot\n   be used to\
    \ remove from an entry any of its distinguished values,\n   i.e., those values\
    \ which form the entry's relative distinguished\n   name.  An attempt to do so\
    \ will result in the server returning the\n   notAllowedOnRDN result code.  The\
    \ Modify DN operation described in\n   Section 4.9 is used to rename an entry.\n\
    \   For attribute types that specify no equality matching, the rules in\n   Section\
    \ 2.5.1 of [RFC4512] are followed.\n   Note that due to the simplifications made\
    \ in LDAP, there is not a\n   direct mapping of the changes in an LDAP ModifyRequest\
    \ onto the\n   changes of a DAP ModifyEntry operation, and different implementations\n\
    \   of LDAP-DAP gateways may use different means of representing the\n   change.\
    \  If successful, the final effect of the operations on the\n   entry MUST be\
    \ identical.\n"
- title: 4.7.  Add Operation
  contents:
  - "4.7.  Add Operation\n   The Add operation allows a client to request the addition\
    \ of an entry\n   into the Directory.  The Add Request is defined as follows:\n\
    \        AddRequest ::= [APPLICATION 8] SEQUENCE {\n             entry       \
    \    LDAPDN,\n             attributes      AttributeList }\n        AttributeList\
    \ ::= SEQUENCE OF attribute Attribute\n   Fields of the Add Request are:\n   -\
    \ entry: the name of the entry to be added.  The server SHALL NOT\n     dereference\
    \ any aliases in locating the entry to be added.\n   - attributes: the list of\
    \ attributes that, along with those from the\n     RDN, make up the content of\
    \ the entry being added.  Clients MAY or\n     MAY NOT include the RDN attribute(s)\
    \ in this list.  Clients MUST\n     NOT supply NO-USER-MODIFICATION attributes\
    \ such as the\n     createTimestamp or creatorsName attributes, since the server\n\
    \     maintains these automatically.\n   Servers MUST ensure that entries conform\
    \ to user and system schema\n   rules or other data model constraints.  For attribute\
    \ types that\n   specify no equality matching, the rules in Section 2.5.1 of [RFC4512]\n\
    \   are followed (this applies to the naming attribute in addition to any\n  \
    \ multi-valued attributes being added).\n   The entry named in the entry field\
    \ of the AddRequest MUST NOT exist\n   for the AddRequest to succeed.  The immediate\
    \ superior (parent) of an\n   object or alias entry to be added MUST exist.  For\
    \ example, if the\n   client attempted to add <CN=JS,DC=Example,DC=NET>, the\n\
    \   <DC=Example,DC=NET> entry did not exist, and the <DC=NET> entry did\n   exist,\
    \ then the server would return the noSuchObject result code with\n   the matchedDN\
    \ field containing <DC=NET>.\n   Upon receipt of an Add Request, a server will\
    \ attempt to add the\n   requested entry.  The result of the Add attempt will\
    \ be returned to\n   the client in the Add Response, defined as follows:\n   \
    \     AddResponse ::= [APPLICATION 9] LDAPResult\n   A response of success indicates\
    \ that the new entry has been added to\n   the Directory.\n"
- title: 4.8.  Delete Operation
  contents:
  - "4.8.  Delete Operation\n   The Delete operation allows a client to request the\
    \ removal of an\n   entry from the Directory.  The Delete Request is defined as\
    \ follows:\n        DelRequest ::= [APPLICATION 10] LDAPDN\n   The Delete Request\
    \ consists of the name of the entry to be deleted.\n   The server SHALL NOT dereference\
    \ aliases while resolving the name of\n   the target entry to be removed.\n  \
    \ Only leaf entries (those with no subordinate entries) can be deleted\n   with\
    \ this operation.\n   Upon receipt of a Delete Request, a server will attempt\
    \ to perform\n   the entry removal requested and return the result in the Delete\n\
    \   Response defined as follows:\n        DelResponse ::= [APPLICATION 11] LDAPResult\n"
- title: 4.9.  Modify DN Operation
  contents:
  - "4.9.  Modify DN Operation\n   The Modify DN operation allows a client to change\
    \ the Relative\n   Distinguished Name (RDN) of an entry in the Directory and/or\
    \ to move\n   a subtree of entries to a new location in the Directory.  The Modify\n\
    \   DN Request is defined as follows:\n        ModifyDNRequest ::= [APPLICATION\
    \ 12] SEQUENCE {\n             entry           LDAPDN,\n             newrdn  \
    \        RelativeLDAPDN,\n             deleteoldrdn    BOOLEAN,\n            \
    \ newSuperior     [0] LDAPDN OPTIONAL }\n   Fields of the Modify DN Request are:\n\
    \   - entry: the name of the entry to be changed.  This entry may or may\n   \
    \  not have subordinate entries.\n   - newrdn: the new RDN of the entry.  The\
    \ value of the old RDN is\n     supplied when moving the entry to a new superior\
    \ without changing\n     its RDN.  Attribute values of the new RDN not matching\
    \ any\n     attribute value of the entry are added to the entry, and an\n    \
    \ appropriate error is returned if this fails.\n   - deleteoldrdn: a boolean field\
    \ that controls whether the old RDN\n     attribute values are to be retained\
    \ as attributes of the entry or\n     deleted from the entry.\n   - newSuperior:\
    \ if present, this is the name of an existing object\n     entry that becomes\
    \ the immediate superior (parent) of the\n     existing entry.\n   The server\
    \ SHALL NOT dereference any aliases in locating the objects\n   named in entry\
    \ or newSuperior.\n   Upon receipt of a ModifyDNRequest, a server will attempt\
    \ to perform\n   the name change and return the result in the Modify DN Response,\n\
    \   defined as follows:\n        ModifyDNResponse ::= [APPLICATION 13] LDAPResult\n\
    \   For example, if the entry named in the entry field was <cn=John\n   Smith,c=US>,\
    \ the newrdn field was <cn=John Cougar Smith>, and the\n   newSuperior field was\
    \ absent, then this operation would attempt to\n   rename the entry as <cn=John\
    \ Cougar Smith,c=US>.  If there was\n   already an entry with that name, the operation\
    \ would fail with the\n   entryAlreadyExists result code.\n   Servers MUST ensure\
    \ that entries conform to user and system schema\n   rules or other data model\
    \ constraints.  For attribute types that\n   specify no equality matching, the\
    \ rules in Section 2.5.1 of [RFC4512]\n   are followed (this pertains to newrdn\
    \ and deleteoldrdn).\n   The object named in newSuperior MUST exist.  For example,\
    \ if the\n   client attempted to add <CN=JS,DC=Example,DC=NET>, the\n   <DC=Example,DC=NET>\
    \ entry did not exist, and the <DC=NET> entry did\n   exist, then the server would\
    \ return the noSuchObject result code with\n   the matchedDN field containing\
    \ <DC=NET>.\n   If the deleteoldrdn field is TRUE, the attribute values forming\
    \ the\n   old RDN (but not the new RDN) are deleted from the entry.  If the\n\
    \   deleteoldrdn field is FALSE, the attribute values forming the old RDN\n  \
    \ will be retained as non-distinguished attribute values of the entry.\n   Note\
    \ that X.500 restricts the ModifyDN operation to affect only\n   entries that\
    \ are contained within a single server.  If the LDAP\n   server is mapped onto\
    \ DAP, then this restriction will apply, and the\n   affectsMultipleDSAs result\
    \ code will be returned if this error\n   occurred.  In general, clients MUST\
    \ NOT expect to be able to perform\n   arbitrary movements of entries and subtrees\
    \ between servers or\n   between naming contexts.\n"
- title: 4.10.  Compare Operation
  contents:
  - "4.10.  Compare Operation\n   The Compare operation allows a client to compare\
    \ an assertion value\n   with the values of a particular attribute in a particular\
    \ entry in\n   the Directory.  The Compare Request is defined as follows:\n  \
    \      CompareRequest ::= [APPLICATION 14] SEQUENCE {\n             entry    \
    \       LDAPDN,\n             ava             AttributeValueAssertion }\n   Fields\
    \ of the Compare Request are:\n   - entry: the name of the entry to be compared.\
    \  The server SHALL NOT\n     dereference any aliases in locating the entry to\
    \ be compared.\n   - ava: holds the attribute value assertion to be compared.\n\
    \   Upon receipt of a Compare Request, a server will attempt to perform\n   the\
    \ requested comparison and return the result in the Compare\n   Response, defined\
    \ as follows:\n        CompareResponse ::= [APPLICATION 15] LDAPResult\n   The\
    \ resultCode is set to compareTrue, compareFalse, or an appropriate\n   error.\
    \  compareTrue indicates that the assertion value in the ava\n   field matches\
    \ a value of the attribute or subtype according to the\n   attribute's EQUALITY\
    \ matching rule.  compareFalse indicates that the\n   assertion value in the ava\
    \ field and the values of the attribute or\n   subtype did not match.  Other result\
    \ codes indicate either that the\n   result of the comparison was Undefined (Section\
    \ 4.5.1.7), or that\n   some error occurred.\n   Note that some directory systems\
    \ may establish access controls that\n   permit the values of certain attributes\
    \ (such as userPassword) to be\n   compared but not interrogated by other means.\n"
- title: 4.11.  Abandon Operation
  contents:
  - "4.11.  Abandon Operation\n   The function of the Abandon operation is to allow\
    \ a client to request\n   that the server abandon an uncompleted operation.  The\
    \ Abandon\n   Request is defined as follows:\n        AbandonRequest ::= [APPLICATION\
    \ 16] MessageID\n   The MessageID is that of an operation that was requested earlier\
    \ at\n   this LDAP message layer.  The Abandon request itself has its own\n  \
    \ MessageID.  This is distinct from the MessageID of the earlier\n   operation\
    \ being abandoned.\n   There is no response defined in the Abandon operation.\
    \  Upon receipt\n   of an AbandonRequest, the server MAY abandon the operation\
    \ identified\n   by the MessageID.  Since the client cannot tell the difference\n\
    \   between a successfully abandoned operation and an uncompleted\n   operation,\
    \ the application of the Abandon operation is limited to\n   uses where the client\
    \ does not require an indication of its outcome.\n   Abandon, Bind, Unbind, and\
    \ StartTLS operations cannot be abandoned.\n   In the event that a server receives\
    \ an Abandon Request on a Search\n   operation in the midst of transmitting responses\
    \ to the Search, that\n   server MUST cease transmitting entry responses to the\
    \ abandoned\n   request immediately, and it MUST NOT send the SearchResultDone.\
    \  Of\n   course, the server MUST ensure that only properly encoded LDAPMessage\n\
    \   PDUs are transmitted.\n   The ability to abandon other (particularly update)\
    \ operations is at\n   the discretion of the server.\n   Clients should not send\
    \ Abandon requests for the same operation\n   multiple times, and they MUST also\
    \ be prepared to receive results\n   from operations they have abandoned (since\
    \ these might have been in\n   transit when the Abandon was requested or might\
    \ not be able to be\n   abandoned).\n   Servers MUST discard Abandon requests\
    \ for messageIDs they do not\n   recognize, for operations that cannot be abandoned,\
    \ and for\n   operations that have already been abandoned.\n"
- title: 4.12.  Extended Operation
  contents:
  - "4.12.  Extended Operation\n   The Extended operation allows additional operations\
    \ to be defined for\n   services not already available in the protocol; for example,\
    \ to Add\n   operations to install transport layer security (see Section 4.14).\n\
    \   The Extended operation allows clients to make requests and receive\n   responses\
    \ with predefined syntaxes and semantics.  These may be\n   defined in RFCs or\
    \ be private to particular implementations.\n   Each Extended operation consists\
    \ of an Extended request and an\n   Extended response.\n        ExtendedRequest\
    \ ::= [APPLICATION 23] SEQUENCE {\n             requestName      [0] LDAPOID,\n\
    \             requestValue     [1] OCTET STRING OPTIONAL }\n   The requestName\
    \ is a dotted-decimal representation of the unique\n   OBJECT IDENTIFIER corresponding\
    \ to the request.  The requestValue is\n   information in a form defined by that\
    \ request, encapsulated inside an\n   OCTET STRING.\n   The server will respond\
    \ to this with an LDAPMessage containing an\n   ExtendedResponse.\n        ExtendedResponse\
    \ ::= [APPLICATION 24] SEQUENCE {\n             COMPONENTS OF LDAPResult,\n  \
    \           responseName     [10] LDAPOID OPTIONAL,\n             responseValue\
    \    [11] OCTET STRING OPTIONAL }\n   The responseName field, when present, contains\
    \ an LDAPOID that is\n   unique for this extended operation or response.  This\
    \ field is\n   optional (even when the extension specification defines an LDAPOID\n\
    \   for use in this field).  The field will be absent whenever the server\n  \
    \ is unable or unwilling to determine the appropriate LDAPOID to\n   return, for\
    \ instance, when the requestName cannot be parsed or its\n   value is not recognized.\n\
    \   Where the requestName is not recognized, the server returns\n   protocolError.\
    \  (The server may return protocolError in other cases.)\n   The requestValue\
    \ and responseValue fields contain information\n   associated with the operation.\
    \  The format of these fields is defined\n   by the specification of the Extended\
    \ operation.  Implementations MUST\n   be prepared to handle arbitrary contents\
    \ of these fields, including\n   zero bytes.  Values that are defined in terms\
    \ of ASN.1 and BER-\n   encoded according to Section 5.1 also follow the extensibility\
    \ rules\n   in Section 4.\n   Servers list the requestName of Extended Requests\
    \ they recognize in\n   the 'supportedExtension' attribute in the root DSE (Section\
    \ 5.1 of\n   [RFC4512]).\n   Extended operations may be specified in other documents.\
    \  The\n   specification of an Extended operation consists of:\n   - the OBJECT\
    \ IDENTIFIER assigned to the requestName,\n   - the OBJECT IDENTIFIER (if any)\
    \ assigned to the responseName (note\n     that the same OBJECT IDENTIFIER may\
    \ be used for both the\n     requestName and responseName),\n   - the format of\
    \ the contents of the requestValue and responseValue\n     (if any), and\n   -\
    \ the semantics of the operation.\n"
- title: 4.13.  IntermediateResponse Message
  contents:
  - "4.13.  IntermediateResponse Message\n   While the Search operation provides a\
    \ mechanism to return multiple\n   response messages for a single Search request,\
    \ other operations, by\n   nature, do not provide for multiple response messages.\n\
    \   The IntermediateResponse message provides a general mechanism for\n   defining\
    \ single-request/multiple-response operations in LDAP.  This\n   message is intended\
    \ to be used in conjunction with the Extended\n   operation to define new single-request/multiple-response\
    \ operations\n   or in conjunction with a control when extending existing LDAP\n\
    \   operations in a way that requires them to return Intermediate\n   response\
    \ information.\n   It is intended that the definitions and descriptions of Extended\n\
    \   operations and controls that make use of the IntermediateResponse\n   message\
    \ will define the circumstances when an IntermediateResponse\n   message can be\
    \ sent by a server and the associated meaning of an\n   IntermediateResponse message\
    \ sent in a particular circumstance.\n        IntermediateResponse ::= [APPLICATION\
    \ 25] SEQUENCE {\n                responseName     [0] LDAPOID OPTIONAL,\n   \
    \             responseValue    [1] OCTET STRING OPTIONAL }\n   IntermediateResponse\
    \ messages SHALL NOT be returned to the client\n   unless the client issues a\
    \ request that specifically solicits their\n   return.  This document defines\
    \ two forms of solicitation: Extended\n   operation and request control.  IntermediateResponse\
    \ messages are\n   specified in documents describing the manner in which they\
    \ are\n   solicited (i.e., in the Extended operation or request control\n   specification\
    \ that uses them).  These specifications include:\n   - the OBJECT IDENTIFIER\
    \ (if any) assigned to the responseName,\n   - the format of the contents of the\
    \ responseValue (if any), and\n   - the semantics associated with the IntermediateResponse\
    \ message.\n   Extensions that allow the return of multiple types of\n   IntermediateResponse\
    \ messages SHALL identify those types using unique\n   responseName values (note\
    \ that one of these may specify no value).\n   Sections 4.13.1 and 4.13.2 describe\
    \ additional requirements on the\n   inclusion of responseName and responseValue\
    \ in IntermediateResponse\n   messages.\n"
- title: 4.13.1.  Usage with LDAP ExtendedRequest and ExtendedResponse
  contents:
  - "4.13.1.  Usage with LDAP ExtendedRequest and ExtendedResponse\n   A single-request/multiple-response\
    \ operation may be defined using a\n   single ExtendedRequest message to solicit\
    \ zero or more\n   IntermediateResponse messages of one or more kinds, followed\
    \ by an\n   ExtendedResponse message.\n"
- title: 4.13.2.  Usage with LDAP Request Controls
  contents:
  - "4.13.2.  Usage with LDAP Request Controls\n   A control's semantics may include\
    \ the return of zero or more\n   IntermediateResponse messages prior to returning\
    \ the final result\n   code for the operation.  One or more kinds of IntermediateResponse\n\
    \   messages may be sent in response to a request control.\n   All IntermediateResponse\
    \ messages associated with request controls\n   SHALL include a responseName.\
    \  This requirement ensures that the\n   client can correctly identify the source\
    \ of IntermediateResponse\n   messages when:\n   - two or more controls using\
    \ IntermediateResponse messages are\n     included in a request for any LDAP operation\
    \ or\n   - one or more controls using IntermediateResponse messages are\n    \
    \ included in a request with an LDAP Extended operation that uses\n     IntermediateResponse\
    \ messages.\n"
- title: 4.14.  StartTLS Operation
  contents:
  - "4.14.  StartTLS Operation\n   The Start Transport Layer Security (StartTLS) operation's\
    \ purpose is\n   to initiate installation of a TLS layer.  The StartTLS operation\
    \ is\n   defined using the Extended operation mechanism described in Section\n\
    \   4.12.\n"
- title: 4.14.1.  StartTLS Request
  contents:
  - "4.14.1.  StartTLS Request\n   A client requests TLS establishment by transmitting\
    \ a StartTLS\n   request message to the server.  The StartTLS request is defined\
    \ in\n   terms of an ExtendedRequest.  The requestName is\n   \"1.3.6.1.4.1.1466.20037\"\
    , and the requestValue field is always\n   absent.\n   The client MUST NOT send\
    \ any LDAP PDUs at this LDAP message layer\n   following this request until it\
    \ receives a StartTLS Extended response\n   and, in the case of a successful response,\
    \ completes TLS\n   negotiations.\n   Detected sequencing problems (particularly\
    \ those detailed in Section\n   3.1.1 of [RFC4513]) result in the resultCode being\
    \ set to\n   operationsError.\n   If the server does not support TLS (whether\
    \ by design or by current\n   configuration), it returns with the resultCode set\
    \ to protocolError\n   as described in Section 4.12.\n"
- title: 4.14.2.  StartTLS Response
  contents:
  - "4.14.2.  StartTLS Response\n   When a StartTLS request is received, servers supporting\
    \ the operation\n   MUST return a StartTLS response message to the requestor.\
    \  The\n   responseName is \"1.3.6.1.4.1.1466.20037\" when provided (see Section\n\
    \   4.12).  The responseValue is always absent.\n   If the server is willing and\
    \ able to negotiate TLS, it returns the\n   StartTLS response with the resultCode\
    \ set to success.  Upon client\n   receipt of a successful StartTLS response,\
    \ protocol peers may\n   commence with TLS negotiation as discussed in Section\
    \ 3 of [RFC4513].\n   If the server is otherwise unwilling or unable to perform\
    \ this\n   operation, the server is to return an appropriate result code\n   indicating\
    \ the nature of the problem.  For example, if the TLS\n   subsystem is not presently\
    \ available, the server may indicate this by\n   returning with the resultCode\
    \ set to unavailable.  In cases where a\n   non-success result code is returned,\
    \ the LDAP session is left without\n   a TLS layer.\n"
- title: 4.14.3.  Removal of the TLS Layer
  contents:
  - "4.14.3.  Removal of the TLS Layer\n   Either the client or server MAY remove\
    \ the TLS layer and leave the\n   LDAP message layer intact by sending and receiving\
    \ a TLS closure\n   alert.\n   The initiating protocol peer sends the TLS closure\
    \ alert and MUST\n   wait until it receives a TLS closure alert from the other\
    \ peer before\n   sending further LDAP PDUs.\n   When a protocol peer receives\
    \ the initial TLS closure alert, it may\n   choose to allow the LDAP message layer\
    \ to remain intact.  In this\n   case, it MUST immediately transmit a TLS closure\
    \ alert.  Following\n   this, it MAY send and receive LDAP PDUs.\n   Protocol\
    \ peers MAY terminate the LDAP session after sending or\n   receiving a TLS closure\
    \ alert.\n"
- title: 5.  Protocol Encoding, Connection, and Transfer
  contents:
  - "5.  Protocol Encoding, Connection, and Transfer\n   This protocol is designed\
    \ to run over connection-oriented, reliable\n   transports, where the data stream\
    \ is divided into octets (8-bit\n   units), with each octet and each bit being\
    \ significant.\n   One underlying service, LDAP over TCP, is defined in Section\
    \ 5.2.\n   This service is generally applicable to applications providing or\n\
    \   consuming X.500-based directory services on the Internet.  This\n   specification\
    \ was generally written with the TCP mapping in mind.\n   Specifications detailing\
    \ other mappings may encounter various\n   obstacles.\n   Implementations of LDAP\
    \ over TCP MUST implement the mapping as\n   described in Section 5.2.\n   This\
    \ table illustrates the relationship among the different layers\n   involved in\
    \ an exchange between two protocol peers:\n               +----------------------+\n\
    \               |  LDAP message layer  |\n               +----------------------+\
    \ > LDAP PDUs\n               +----------------------+ < data\n              \
    \ |      SASL layer      |\n               +----------------------+ > SASL-protected\
    \ data\n               +----------------------+ < data\n               |     \
    \  TLS layer      |\n   Application +----------------------+ > TLS-protected data\n\
    \   ------------+----------------------+ < data\n     Transport | transport connection\
    \ |\n               +----------------------+\n"
- title: 5.1.  Protocol Encoding
  contents:
  - "5.1.  Protocol Encoding\n   The protocol elements of LDAP SHALL be encoded for\
    \ exchange using the\n   Basic Encoding Rules [BER] of [ASN.1] with the following\n\
    \   restrictions:\n   - Only the definite form of length encoding is used.\n \
    \  - OCTET STRING values are encoded in the primitive form only.\n   - If the\
    \ value of a BOOLEAN type is true, the encoding of the value\n     octet is set\
    \ to hex \"FF\".\n   - If a value of a type is its default value, it is absent.\
    \  Only some\n     BOOLEAN and INTEGER types have default values in this protocol\n\
    \     definition.\n   These restrictions are meant to ease the overhead of encoding\
    \ and\n   decoding certain elements in BER.\n   These restrictions do not apply\
    \ to ASN.1 types encapsulated inside of\n   OCTET STRING values, such as attribute\
    \ values, unless otherwise\n   stated.\n"
- title: 5.2.  Transmission Control Protocol (TCP)
  contents:
  - "5.2.  Transmission Control Protocol (TCP)\n   The encoded LDAPMessage PDUs are\
    \ mapped directly onto the TCP\n   [RFC793] bytestream using the BER-based encoding\
    \ described in Section\n   5.1.  It is recommended that server implementations\
    \ running over the\n   TCP provide a protocol listener on the Internet Assigned\
    \ Numbers\n   Authority (IANA)-assigned LDAP port, 389 [PortReg].  Servers may\n\
    \   instead provide a listener on a different port number.  Clients MUST\n   support\
    \ contacting servers on any valid TCP port.\n"
- title: 5.3.  Termination of the LDAP session
  contents:
  - "5.3.  Termination of the LDAP session\n   Termination of the LDAP session is\
    \ typically initiated by the client\n   sending an UnbindRequest (Section 4.3),\
    \ or by the server sending a\n   Notice of Disconnection (Section 4.4.1).  In\
    \ these cases, each\n   protocol peer gracefully terminates the LDAP session by\
    \ ceasing\n   exchanges at the LDAP message layer, tearing down any SASL layer,\n\
    \   tearing down any TLS layer, and closing the transport connection.\n   A protocol\
    \ peer may determine that the continuation of any\n   communication would be pernicious,\
    \ and in this case, it may abruptly\n   terminate the session by ceasing communication\
    \ and closing the\n   transport connection.\n   In either case, when the LDAP\
    \ session is terminated, uncompleted\n   operations are handled as specified in\
    \ Section 3.1.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This version of the protocol provides facilities\
    \ for simple\n   authentication using a cleartext password, as well as any SASL\n\
    \   [RFC4422] mechanism.  Installing SASL and/or TLS layers can provide\n   integrity\
    \ and other data security services.\n   It is also permitted that the server can\
    \ return its credentials to\n   the client, if it chooses to do so.\n   Use of\
    \ cleartext password is strongly discouraged where the\n   underlying transport\
    \ service cannot guarantee confidentiality and may\n   result in disclosure of\
    \ the password to unauthorized parties.\n   Servers are encouraged to prevent\
    \ directory modifications by clients\n   that have authenticated anonymously [RFC4513].\n\
    \   Security considerations for authentication methods, SASL mechanisms,\n   and\
    \ TLS are described in [RFC4513].\n   Note that SASL authentication exchanges\
    \ do not provide data\n   confidentiality or integrity protection for the version\
    \ or name\n   fields of the BindRequest or the resultCode, diagnosticMessage,\
    \ or\n   referral fields of the BindResponse, nor for any information\n   contained\
    \ in controls attached to Bind requests or responses.  Thus,\n   information contained\
    \ in these fields SHOULD NOT be relied on unless\n   it is otherwise protected\
    \ (such as by establishing protections at the\n   transport layer).\n   Implementors\
    \ should note that various security factors (including\n   authentication and\
    \ authorization information and data security\n   services) may change during\
    \ the course of the LDAP session or even\n   during the performance of a particular\
    \ operation.  For instance,\n   credentials could expire, authorization identities\
    \ or access controls\n   could change, or the underlying security layer(s) could\
    \ be replaced\n   or terminated.  Implementations should be robust in the handling\
    \ of\n   changing security factors.\n   In some cases, it may be appropriate to\
    \ continue the operation even\n   in light of security factor changes.  For instance,\
    \ it may be\n   appropriate to continue an Abandon operation regardless of the\n\
    \   change, or to continue an operation when the change upgraded (or\n   maintained)\
    \ the security factor.  In other cases, it may be\n   appropriate to fail or alter\
    \ the processing of the operation.  For\n   instance, if confidential protections\
    \ were removed, it would be\n   appropriate either to fail a request to return\
    \ sensitive data or,\n   minimally, to exclude the return of sensitive data.\n\
    \   Implementations that cache attributes and entries obtained via LDAP\n   MUST\
    \ ensure that access controls are maintained if that information\n   is to be\
    \ provided to multiple clients, since servers may have access\n   control policies\
    \ that prevent the return of entries or attributes in\n   Search results except\
    \ to particular authenticated clients.  For\n   example, caches could serve result\
    \ information only to the client\n   whose request caused it to be in the cache.\n\
    \   Servers may return referrals or Search result references that\n   redirect\
    \ clients to peer servers.  It is possible for a rogue\n   application to inject\
    \ such referrals into the data stream in an\n   attempt to redirect a client to\
    \ a rogue server.  Clients are advised\n   to be aware of this and possibly reject\
    \ referrals when\n   confidentiality measures are not in place.  Clients are advised\
    \ to\n   reject referrals from the StartTLS operation.\n   The matchedDN and diagnosticMessage\
    \ fields, as well as some\n   resultCode values (e.g., attributeOrValueExists\
    \ and\n   entryAlreadyExists), could disclose the presence or absence of\n   specific\
    \ data in the directory that is subject to access and other\n   administrative\
    \ controls.  Server implementations should restrict\n   access to protected information\
    \ equally under both normal and error\n   conditions.\n   Protocol peers MUST\
    \ be prepared to handle invalid and arbitrary-\n   length protocol encodings.\
    \  Invalid protocol encodings include: BER\n   encoding exceptions, format string\
    \ and UTF-8 encoding exceptions,\n   overflow exceptions, integer value exceptions,\
    \ and binary mode on/off\n   flag exceptions.  The LDAPv3 PROTOS [PROTOS-LDAP]\
    \ test suite provides\n   excellent examples of these exceptions and test cases\
    \ used to\n   discover flaws.\n   In the event that a protocol peer senses an\
    \ attack that in its nature\n   could cause damage due to further communication\
    \ at any layer in the\n   LDAP session, the protocol peer should abruptly terminate\
    \ the LDAP\n   session as described in Section 5.3.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   This document is based on RFC 2251 by Mark Wahl, Tim\
    \ Howes, and Steve\n   Kille.  RFC 2251 was a product of the IETF ASID Working\
    \ Group.\n   It is also based on RFC 2830 by Jeff Hodges, RL \"Bob\" Morgan, and\n\
    \   Mark Wahl.  RFC 2830 was a product of the IETF LDAPEXT Working Group.\n  \
    \ It is also based on RFC 3771 by Roger Harrison and Kurt Zeilenga.\n   RFC 3771\
    \ was an individual submission to the IETF.\n   This document is a product of\
    \ the IETF LDAPBIS Working Group.\n   Significant contributors of technical review\
    \ and content include Kurt\n   Zeilenga, Steven Legg, and Hallvard Furuseth.\n"
- title: 8.  Normative References
  contents:
  - "8.  Normative References\n   [ASN.1]       ITU-T Recommendation X.680 (07/2002)\
    \ | ISO/IEC 8824-\n                 1:2002 \"Information Technology - Abstract\
    \ Syntax\n                 Notation One (ASN.1): Specification of basic notation\"\
    .\n   [BER]         ITU-T Rec. X.690 (07/2002) | ISO/IEC 8825-1:2002,\n      \
    \           \"Information technology - ASN.1 encoding rules:\n               \
    \  Specification of Basic Encoding Rules (BER), Canonical\n                 Encoding\
    \ Rules (CER) and Distinguished Encoding Rules\n                 (DER)\", 2002.\n\
    \   [ISO10646]    Universal Multiple-Octet Coded Character Set (UCS) -\n     \
    \            Architecture and Basic Multilingual Plane, ISO/IEC\n            \
    \     10646-1 : 1993.\n   [RFC791]      Postel, J., \"Internet Protocol\", STD\
    \ 5, RFC 791,\n                 September 1981.\n   [RFC793]      Postel, J.,\
    \ \"Transmission Control Protocol\", STD 7, RFC\n                 793, September\
    \ 1981.\n   [RFC2119]     Bradner, S., \"Key words for use in RFCs to Indicate\n\
    \                 Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC3454]\
    \     Hoffman P. and M. Blanchet, \"Preparation of\n                 Internationalized\
    \ Strings ('stringprep')\", RFC 3454,\n                 December 2002.\n   [RFC3629]\
    \     Yergeau, F., \"UTF-8, a transformation format of ISO\n                 10646\"\
    , STD 63, RFC 3629, November 2003.\n   [RFC3986]     Berners-Lee, T., Fielding,\
    \ R., and L. Masinter,\n                 \"Uniform Resource Identifier (URI):\
    \ Generic Syntax\",\n                 STD 66, RFC 3986, January 2005.\n   [RFC4013]\
    \     Zeilenga, K., \"SASLprep: Stringprep Profile for User\n                \
    \ Names and Passwords\", RFC 4013, February 2005.\n   [RFC4234]     Crocker, D.\
    \ and P. Overell, \"Augmented BNF for Syntax\n                 Specifications:\
    \ ABNF\", RFC 4234, October 2005.\n   [RFC4346]     Dierks, T. and E. Rescorla,\
    \ \"The TLS Protocol Version\n                 1.1\", RFC 4346, March 2006.\n\
    \   [RFC4422]     Melnikov, A., Ed. and K. Zeilenga, Ed., \"Simple\n         \
    \        Authentication and Security Layer (SASL)\", RFC 4422,\n             \
    \    June 2006.\n   [RFC4510]     Zeilenga, K., Ed., \"Lightweight Directory Access\n\
    \                 Protocol (LDAP): Technical Specification Road Map\", RFC\n \
    \                4510, June 2006.\n   [RFC4512]     Zeilenga, K., Lightweight\
    \ Directory Access Protocol\n                 (LDAP): Directory Information Models\"\
    , RFC 4512, June\n                 2006.\n   [RFC4513]     Harrison, R., Ed.,\
    \ \"Lightweight Directory Access\n                 Protocol (LDAP): Authentication\
    \ Methods and Security\n                 Mechanisms\", RFC 4513, June 2006.\n\
    \   [RFC4514]     Zeilenga, K., Ed., \"Lightweight Directory Access\n        \
    \         Protocol (LDAP): String Representation of Distinguished\n          \
    \       Names\", RFC 4514, June 2006.\n   [RFC4516]     Smith, M., Ed. and T.\
    \ Howes, \"Lightweight Directory\n                 Access Protocol (LDAP): Uniform\
    \ Resource Locator\", RFC\n                 4516, June 2006.\n   [RFC4517]   \
    \  Legg, S., Ed., \"Lightweight Directory Access Protocol\n                 (LDAP):\
    \ Syntaxes and Matching Rules\", RFC 4517, June\n                 2006.\n   [RFC4520]\
    \     Zeilenga, K., \"Internet Assigned Numbers Authority\n                 (IANA)\
    \ Considerations for the Lightweight Directory\n                 Access Protocol\
    \ (LDAP)\", BCP 64, RFC 4520, June 2006.\n   [Unicode]     The Unicode Consortium,\
    \ \"The Unicode Standard, Version\n                 3.2.0\" is defined by \"The\
    \ Unicode Standard, Version\n                 3.0\" (Reading, MA, Addison-Wesley,\
    \ 2000. ISBN 0-201-\n                 61633-5), as amended by the \"Unicode Standard\
    \ Annex\n                 #27: Unicode 3.1\"\n                 (http://www.unicode.org/reports/tr27/)\
    \ and by the\n                 \"Unicode Standard Annex #28: Unicode 3.2\"\n \
    \                (http://www.unicode.org/reports/tr28/).\n   [X.500]       ITU-T\
    \ Rec. X.500, \"The Directory: Overview of Concepts,\n                 Models\
    \ and Service\", 1993.\n   [X.511]       ITU-T Rec. X.511, \"The Directory: Abstract\
    \ Service\n                 Definition\", 1993.\n"
- title: 9.  Informative References
  contents:
  - "9.  Informative References\n   [CharModel]   Whistler, K. and M. Davis, \"Unicode\
    \ Technical Report\n                 #17, Character Encoding Model\", UTR17,\n\
    \                 <http://www.unicode.org/unicode/reports/tr17/>, August\n   \
    \              2000.\n   [Glossary]    The Unicode Consortium, \"Unicode Glossary\"\
    ,\n                 <http://www.unicode.org/glossary/>.\n   [PortReg]     IANA,\
    \ \"Port Numbers\",\n                 <http://www.iana.org/assignments/port-numbers>.\n\
    \   [PROTOS-LDAP] University of Oulu, \"PROTOS Test-Suite: c06-ldapv3\"\n    \
    \             <http://www.ee.oulu.fi/research/ouspg/protos/testing/\n        \
    \         c06/ldapv3/>.\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   The Internet Assigned Numbers Authority (IANA) has\
    \ updated the LDAP\n   result code registry to indicate that this document provides\
    \ the\n   definitive technical specification for result codes 0-36, 48-54, 64-\n\
    \   70, 80-90.  It is also noted that one resultCode value\n   (strongAuthRequired)\
    \ has been renamed (to strongerAuthRequired).\n   The IANA has also updated the\
    \ LDAP Protocol Mechanism registry to\n   indicate that this document and [RFC4513]\
    \ provides the definitive\n   technical specification for the StartTLS (1.3.6.1.4.1.1466.20037)\n\
    \   Extended operation.\n   IANA has assigned LDAP Object Identifier 18 [RFC4520]\
    \ to identify the\n   ASN.1 module defined in this document.\n        Subject:\
    \ Request for LDAP Object Identifier Registration\n        Person & email address\
    \ to contact for further information:\n             Jim Sermersheim <jimse@novell.com>\n\
    \        Specification: RFC 4511\n        Author/Change Controller: IESG\n   \
    \     Comments:\n             Identifies the LDAP ASN.1 module\n"
- title: Appendix A.  LDAP Result Codes
  contents:
  - "Appendix A.  LDAP Result Codes\n   This normative appendix details additional\
    \ considerations regarding\n   LDAP result codes and provides a brief, general\
    \ description of each\n   LDAP result code enumerated in Section 4.1.9.\n   Additional\
    \ result codes MAY be defined for use with extensions\n   [RFC4520].  Client implementations\
    \ SHALL treat any result code that\n   they do not recognize as an unknown error\
    \ condition.\n   The descriptions provided here do not fully account for result\
    \ code\n   substitutions used to prevent unauthorized disclosures (such as\n \
    \  substitution of noSuchObject for insufficientAccessRights, or\n   invalidCredentials\
    \ for insufficientAccessRights).\n"
- title: A.1.  Non-Error Result Codes
  contents:
  - "A.1.  Non-Error Result Codes\n   These result codes (called \"non-error\" result\
    \ codes) do not indicate\n   an error condition:\n        success (0),\n     \
    \   compareFalse (5),\n        compareTrue (6),\n        referral (10), and\n\
    \        saslBindInProgress (14).\n   The success, compareTrue, and compareFalse\
    \ result codes indicate\n   successful completion (and, hence, are referred to\
    \ as \"successful\"\n   result codes).\n   The referral and saslBindInProgress\
    \ result codes indicate the client\n   needs to take additional action to complete\
    \ the operation.\n"
- title: A.2.  Result Codes
  contents:
  - "A.2.  Result Codes\n   Existing LDAP result codes are described as follows:\n\
    \      success (0)\n         Indicates the successful completion of an operation.\
    \  Note:\n         this code is not used with the Compare operation.  See\n  \
    \       compareFalse (5) and compareTrue (6).\n      operationsError (1)\n   \
    \      Indicates that the operation is not properly sequenced with\n         relation\
    \ to other operations (of same or different type).\n         For example, this\
    \ code is returned if the client attempts to\n         StartTLS [RFC4346] while\
    \ there are other uncompleted operations\n         or if a TLS layer was already\
    \ installed.\n      protocolError (2)\n         Indicates the server received\
    \ data that is not well-formed.\n         For Bind operation only, this code is\
    \ also used to indicate\n         that the server does not support the requested\
    \ protocol\n         version.\n         For Extended operations only, this code\
    \ is also used to\n         indicate that the server does not support (by design\
    \ or\n         configuration) the Extended operation associated with the\n   \
    \      requestName.\n         For request operations specifying multiple controls,\
    \ this may\n         be used to indicate that the server cannot ignore the order\n\
    \         of the controls as specified, or that the combination of the\n     \
    \    specified controls is invalid or unspecified.\n      timeLimitExceeded (3)\n\
    \         Indicates that the time limit specified by the client was\n        \
    \ exceeded before the operation could be completed.\n      sizeLimitExceeded (4)\n\
    \         Indicates that the size limit specified by the client was\n        \
    \ exceeded before the operation could be completed.\n      compareFalse (5)\n\
    \         Indicates that the Compare operation has successfully\n         completed\
    \ and the assertion has evaluated to FALSE or\n         Undefined.\n      compareTrue\
    \ (6)\n         Indicates that the Compare operation has successfully\n      \
    \   completed and the assertion has evaluated to TRUE.\n      authMethodNotSupported\
    \ (7)\n         Indicates that the authentication method or mechanism is not\n\
    \         supported.\n      strongerAuthRequired (8)\n         Indicates the server\
    \ requires strong(er) authentication in\n         order to complete the operation.\n\
    \         When used with the Notice of Disconnection operation, this\n       \
    \  code indicates that the server has detected that an\n         established security\
    \ association between the client and\n         server has unexpectedly failed\
    \ or been compromised.\n      referral (10)\n         Indicates that a referral\
    \ needs to be chased to complete the\n         operation (see Section 4.1.10).\n\
    \      adminLimitExceeded (11)\n         Indicates that an administrative limit\
    \ has been exceeded.\n      unavailableCriticalExtension (12)\n         Indicates\
    \ a critical control is unrecognized (see Section\n         4.1.11).\n      confidentialityRequired\
    \ (13)\n         Indicates that data confidentiality protections are required.\n\
    \      saslBindInProgress (14)\n         Indicates the server requires the client\
    \ to send a new bind\n         request, with the same SASL mechanism, to continue\
    \ the\n         authentication process (see Section 4.2).\n      noSuchAttribute\
    \ (16)\n         Indicates that the named entry does not contain the specified\n\
    \         attribute or attribute value.\n      undefinedAttributeType (17)\n \
    \        Indicates that a request field contains an unrecognized\n         attribute\
    \ description.\n      inappropriateMatching (18)\n         Indicates that an attempt\
    \ was made (e.g., in an assertion) to\n         use a matching rule not defined\
    \ for the attribute type\n         concerned.\n      constraintViolation (19)\n\
    \         Indicates that the client supplied an attribute value that\n       \
    \  does not conform to the constraints placed upon it by the\n         data model.\n\
    \         For example, this code is returned when multiple values are\n      \
    \   supplied to an attribute that has a SINGLE-VALUE constraint.\n      attributeOrValueExists\
    \ (20)\n         Indicates that the client supplied an attribute or value to\n\
    \         be added to an entry, but the attribute or value already\n         exists.\n\
    \      invalidAttributeSyntax (21)\n         Indicates that a purported attribute\
    \ value does not conform\n         to the syntax of the attribute.\n      noSuchObject\
    \ (32)\n         Indicates that the object does not exist in the DIT.\n      aliasProblem\
    \ (33)\n         Indicates that an alias problem has occurred.  For example,\n\
    \         the code may used to indicate an alias has been dereferenced\n     \
    \    that names no object.\n      invalidDNSyntax (34)\n         Indicates that\
    \ an LDAPDN or RelativeLDAPDN field (e.g., search\n         base, target entry,\
    \ ModifyDN newrdn, etc.) of a request does\n         not conform to the required\
    \ syntax or contains attribute\n         values that do not conform to the syntax\
    \ of the attribute's\n         type.\n      aliasDereferencingProblem (36)\n \
    \        Indicates that a problem occurred while dereferencing an\n         alias.\
    \  Typically, an alias was encountered in a situation\n         where it was not\
    \ allowed or where access was denied.\n      inappropriateAuthentication (48)\n\
    \         Indicates the server requires the client that had attempted\n      \
    \   to bind anonymously or without supplying credentials to\n         provide\
    \ some form of credentials.\n      invalidCredentials (49)\n         Indicates\
    \ that the provided credentials (e.g., the user's name\n         and password)\
    \ are invalid.\n      insufficientAccessRights (50)\n         Indicates that the\
    \ client does not have sufficient access\n         rights to perform the operation.\n\
    \      busy (51)\n         Indicates that the server is too busy to service the\n\
    \         operation.\n      unavailable (52)\n         Indicates that the server\
    \ is shutting down or a subsystem\n         necessary to complete the operation\
    \ is offline.\n      unwillingToPerform (53)\n         Indicates that the server\
    \ is unwilling to perform the\n         operation.\n      loopDetect (54)\n  \
    \       Indicates that the server has detected an internal loop (e.g.,\n     \
    \    while dereferencing aliases or chaining an operation).\n      namingViolation\
    \ (64)\n         Indicates that the entry's name violates naming restrictions.\n\
    \      objectClassViolation (65)\n         Indicates that the entry violates object\
    \ class restrictions.\n      notAllowedOnNonLeaf (66)\n         Indicates that\
    \ the operation is inappropriately acting upon a\n         non-leaf entry.\n \
    \     notAllowedOnRDN (67)\n         Indicates that the operation is inappropriately\
    \ attempting to\n         remove a value that forms the entry's relative distinguished\n\
    \         name.\n      entryAlreadyExists (68)\n         Indicates that the request\
    \ cannot be fulfilled (added, moved,\n         or renamed) as the target entry\
    \ already exists.\n      objectClassModsProhibited (69)\n         Indicates that\
    \ an attempt to modify the object class(es) of\n         an entry's 'objectClass'\
    \ attribute is prohibited.\n         For example, this code is returned when a\
    \ client attempts to\n         modify the structural object class of an entry.\n\
    \      affectsMultipleDSAs (71)\n         Indicates that the operation cannot\
    \ be performed as it would\n         affect multiple servers (DSAs).\n      other\
    \ (80)\n         Indicates the server has encountered an internal error.\n"
- title: Appendix B.  Complete ASN.1 Definition
  contents:
  - "Appendix B.  Complete ASN.1 Definition\n   This appendix is normative.\n    \
    \    Lightweight-Directory-Access-Protocol-V3 {1 3 6 1 1 18}\n        -- Copyright\
    \ (C) The Internet Society (2006).  This version of\n        -- this ASN.1 module\
    \ is part of RFC 4511; see the RFC itself\n        -- for full legal notices.\n\
    \        DEFINITIONS\n        IMPLICIT TAGS\n        EXTENSIBILITY IMPLIED ::=\n\
    \        BEGIN\n        LDAPMessage ::= SEQUENCE {\n             messageID   \
    \    MessageID,\n             protocolOp      CHOICE {\n                  bindRequest\
    \           BindRequest,\n                  bindResponse          BindResponse,\n\
    \                  unbindRequest         UnbindRequest,\n                  searchRequest\
    \         SearchRequest,\n                  searchResEntry        SearchResultEntry,\n\
    \                  searchResDone         SearchResultDone,\n                 \
    \ searchResRef          SearchResultReference,\n                  modifyRequest\
    \         ModifyRequest,\n                  modifyResponse        ModifyResponse,\n\
    \                  addRequest            AddRequest,\n                  addResponse\
    \           AddResponse,\n                  delRequest            DelRequest,\n\
    \                  delResponse           DelResponse,\n                  modDNRequest\
    \          ModifyDNRequest,\n                  modDNResponse         ModifyDNResponse,\n\
    \                  compareRequest        CompareRequest,\n                  compareResponse\
    \       CompareResponse,\n                  abandonRequest        AbandonRequest,\n\
    \                  extendedReq           ExtendedRequest,\n                  extendedResp\
    \          ExtendedResponse,\n                  ...,\n                  intermediateResponse\
    \  IntermediateResponse },\n             controls       [0] Controls OPTIONAL\
    \ }\n        MessageID ::= INTEGER (0 ..  maxInt)\n        maxInt INTEGER ::=\
    \ 2147483647 -- (2^^31 - 1) --\n        LDAPString ::= OCTET STRING -- UTF-8 encoded,\n\
    \                                    -- [ISO10646] characters\n        LDAPOID\
    \ ::= OCTET STRING -- Constrained to <numericoid>\n                          \
    \       -- [RFC4512]\n        LDAPDN ::= LDAPString -- Constrained to <distinguishedName>\n\
    \                              -- [RFC4514]\n        RelativeLDAPDN ::= LDAPString\
    \ -- Constrained to <name-component>\n                                      --\
    \ [RFC4514]\n        AttributeDescription ::= LDAPString\n                   \
    \             -- Constrained to <attributedescription>\n                     \
    \           -- [RFC4512]\n        AttributeValue ::= OCTET STRING\n        AttributeValueAssertion\
    \ ::= SEQUENCE {\n             attributeDesc   AttributeDescription,\n       \
    \      assertionValue  AssertionValue }\n        AssertionValue ::= OCTET STRING\n\
    \        PartialAttribute ::= SEQUENCE {\n             type       AttributeDescription,\n\
    \             vals       SET OF value AttributeValue }\n        Attribute ::=\
    \ PartialAttribute(WITH COMPONENTS {\n             ...,\n             vals (SIZE(1..MAX))})\n\
    \        MatchingRuleId ::= LDAPString\n        LDAPResult ::= SEQUENCE {\n  \
    \           resultCode         ENUMERATED {\n                  success       \
    \               (0),\n                  operationsError              (1),\n  \
    \                protocolError                (2),\n                  timeLimitExceeded\
    \            (3),\n                  sizeLimitExceeded            (4),\n     \
    \             compareFalse                 (5),\n                  compareTrue\
    \                  (6),\n                  authMethodNotSupported       (7),\n\
    \                  strongerAuthRequired         (8),\n                       --\
    \ 9 reserved --\n                  referral                     (10),\n      \
    \            adminLimitExceeded           (11),\n                  unavailableCriticalExtension\
    \ (12),\n                  confidentialityRequired      (13),\n              \
    \    saslBindInProgress           (14),\n                  noSuchAttribute   \
    \           (16),\n                  undefinedAttributeType       (17),\n    \
    \              inappropriateMatching        (18),\n                  constraintViolation\
    \          (19),\n                  attributeOrValueExists       (20),\n     \
    \             invalidAttributeSyntax       (21),\n                       -- 22-31\
    \ unused --\n                  noSuchObject                 (32),\n          \
    \        aliasProblem                 (33),\n                  invalidDNSyntax\
    \              (34),\n                       -- 35 reserved for undefined isLeaf\
    \ --\n                  aliasDereferencingProblem    (36),\n                 \
    \      -- 37-47 unused --\n                  inappropriateAuthentication  (48),\n\
    \                  invalidCredentials           (49),\n                  insufficientAccessRights\
    \     (50),\n                  busy                         (51),\n          \
    \        unavailable                  (52),\n                  unwillingToPerform\
    \           (53),\n                  loopDetect                   (54),\n    \
    \                   -- 55-63 unused --\n                  namingViolation    \
    \          (64),\n                  objectClassViolation         (65),\n     \
    \             notAllowedOnNonLeaf          (66),\n                  notAllowedOnRDN\
    \              (67),\n                  entryAlreadyExists           (68),\n \
    \                 objectClassModsProhibited    (69),\n                       --\
    \ 70 reserved for CLDAP --\n                  affectsMultipleDSAs          (71),\n\
    \                       -- 72-79 unused --\n                  other          \
    \              (80),\n                  ...  },\n             matchedDN      \
    \    LDAPDN,\n             diagnosticMessage  LDAPString,\n             referral\
    \           [3] Referral OPTIONAL }\n        Referral ::= SEQUENCE SIZE (1..MAX)\
    \ OF uri URI\n        URI ::= LDAPString     -- limited to characters permitted\
    \ in\n                               -- URIs\n        Controls ::= SEQUENCE OF\
    \ control Control\n        Control ::= SEQUENCE {\n             controlType  \
    \           LDAPOID,\n             criticality             BOOLEAN DEFAULT FALSE,\n\
    \             controlValue            OCTET STRING OPTIONAL }\n        BindRequest\
    \ ::= [APPLICATION 0] SEQUENCE {\n             version                 INTEGER\
    \ (1 ..  127),\n             name                    LDAPDN,\n             authentication\
    \          AuthenticationChoice }\n        AuthenticationChoice ::= CHOICE {\n\
    \             simple                  [0] OCTET STRING,\n                    \
    \                 -- 1 and 2 reserved\n             sasl                    [3]\
    \ SaslCredentials,\n             ...  }\n        SaslCredentials ::= SEQUENCE\
    \ {\n             mechanism               LDAPString,\n             credentials\
    \             OCTET STRING OPTIONAL }\n        BindResponse ::= [APPLICATION 1]\
    \ SEQUENCE {\n             COMPONENTS OF LDAPResult,\n             serverSaslCreds\
    \    [7] OCTET STRING OPTIONAL }\n        UnbindRequest ::= [APPLICATION 2] NULL\n\
    \        SearchRequest ::= [APPLICATION 3] SEQUENCE {\n             baseObject\
    \      LDAPDN,\n             scope           ENUMERATED {\n                  baseObject\
    \              (0),\n                  singleLevel             (1),\n        \
    \          wholeSubtree            (2),\n                  ...  },\n         \
    \    derefAliases    ENUMERATED {\n                  neverDerefAliases       (0),\n\
    \                  derefInSearching        (1),\n                  derefFindingBaseObj\
    \     (2),\n                  derefAlways             (3) },\n             sizeLimit\
    \       INTEGER (0 ..  maxInt),\n             timeLimit       INTEGER (0 ..  maxInt),\n\
    \             typesOnly       BOOLEAN,\n             filter          Filter,\n\
    \             attributes      AttributeSelection }\n        AttributeSelection\
    \ ::= SEQUENCE OF selector LDAPString\n                       -- The LDAPString\
    \ is constrained to\n                       -- <attributeSelector> in Section\
    \ 4.5.1.8\n        Filter ::= CHOICE {\n             and             [0] SET SIZE\
    \ (1..MAX) OF filter Filter,\n             or              [1] SET SIZE (1..MAX)\
    \ OF filter Filter,\n             not             [2] Filter,\n             equalityMatch\
    \   [3] AttributeValueAssertion,\n             substrings      [4] SubstringFilter,\n\
    \             greaterOrEqual  [5] AttributeValueAssertion,\n             lessOrEqual\
    \     [6] AttributeValueAssertion,\n             present         [7] AttributeDescription,\n\
    \             approxMatch     [8] AttributeValueAssertion,\n             extensibleMatch\
    \ [9] MatchingRuleAssertion,\n             ...  }\n        SubstringFilter ::=\
    \ SEQUENCE {\n             type           AttributeDescription,\n            \
    \ substrings     SEQUENCE SIZE (1..MAX) OF substring CHOICE {\n              \
    \    initial [0] AssertionValue,  -- can occur at most once\n                \
    \  any     [1] AssertionValue,\n                  final   [2] AssertionValue }\
    \ -- can occur at most once\n             }\n        MatchingRuleAssertion ::=\
    \ SEQUENCE {\n             matchingRule    [1] MatchingRuleId OPTIONAL,\n    \
    \         type            [2] AttributeDescription OPTIONAL,\n             matchValue\
    \      [3] AssertionValue,\n             dnAttributes    [4] BOOLEAN DEFAULT FALSE\
    \ }\n        SearchResultEntry ::= [APPLICATION 4] SEQUENCE {\n             objectName\
    \      LDAPDN,\n             attributes      PartialAttributeList }\n        PartialAttributeList\
    \ ::= SEQUENCE OF\n                             partialAttribute PartialAttribute\n\
    \        SearchResultReference ::= [APPLICATION 19] SEQUENCE\n               \
    \                   SIZE (1..MAX) OF uri URI\n        SearchResultDone ::= [APPLICATION\
    \ 5] LDAPResult\n        ModifyRequest ::= [APPLICATION 6] SEQUENCE {\n      \
    \       object          LDAPDN,\n             changes         SEQUENCE OF change\
    \ SEQUENCE {\n                  operation       ENUMERATED {\n               \
    \        add     (0),\n                       delete  (1),\n                 \
    \      replace (2),\n                       ...  },\n                  modification\
    \    PartialAttribute } }\n        ModifyResponse ::= [APPLICATION 7] LDAPResult\n\
    \        AddRequest ::= [APPLICATION 8] SEQUENCE {\n             entry       \
    \    LDAPDN,\n             attributes      AttributeList }\n        AttributeList\
    \ ::= SEQUENCE OF attribute Attribute\n        AddResponse ::= [APPLICATION 9]\
    \ LDAPResult\n        DelRequest ::= [APPLICATION 10] LDAPDN\n        DelResponse\
    \ ::= [APPLICATION 11] LDAPResult\n        ModifyDNRequest ::= [APPLICATION 12]\
    \ SEQUENCE {\n             entry           LDAPDN,\n             newrdn      \
    \    RelativeLDAPDN,\n             deleteoldrdn    BOOLEAN,\n             newSuperior\
    \     [0] LDAPDN OPTIONAL }\n        ModifyDNResponse ::= [APPLICATION 13] LDAPResult\n\
    \        CompareRequest ::= [APPLICATION 14] SEQUENCE {\n             entry  \
    \         LDAPDN,\n             ava             AttributeValueAssertion }\n  \
    \      CompareResponse ::= [APPLICATION 15] LDAPResult\n        AbandonRequest\
    \ ::= [APPLICATION 16] MessageID\n        ExtendedRequest ::= [APPLICATION 23]\
    \ SEQUENCE {\n             requestName      [0] LDAPOID,\n             requestValue\
    \     [1] OCTET STRING OPTIONAL }\n        ExtendedResponse ::= [APPLICATION 24]\
    \ SEQUENCE {\n             COMPONENTS OF LDAPResult,\n             responseName\
    \     [10] LDAPOID OPTIONAL,\n             responseValue    [11] OCTET STRING\
    \ OPTIONAL }\n        IntermediateResponse ::= [APPLICATION 25] SEQUENCE {\n \
    \            responseName     [0] LDAPOID OPTIONAL,\n             responseValue\
    \    [1] OCTET STRING OPTIONAL }\n        END\n"
- title: Appendix C.  Changes
  contents:
  - "Appendix C.  Changes\n   This appendix is non-normative.\n   This appendix summarizes\
    \ substantive changes made to RFC 2251, RFC\n   2830, and RFC 3771.\n"
- title: C.1.  Changes Made to RFC 2251
  contents:
  - "C.1.  Changes Made to RFC 2251\n   This section summarizes the substantive changes\
    \ made to Sections 1,\n   2, 3.1, and 4, and the remainder of RFC 2251.  Readers\
    \ should\n   consult [RFC4512] and [RFC4513] for summaries of changes to other\n\
    \   sections.\n"
- title: C.1.1.  Section 1 (Status of this Memo)
  contents:
  - "C.1.1.  Section 1 (Status of this Memo)\n   - Removed IESG note.  Post publication\
    \ of RFC 2251, mandatory LDAP\n     authentication mechanisms have been standardized\
    \ which are\n     sufficient to remove this note.  See [RFC4513] for authentication\n\
    \     mechanisms.\n"
- title: C.1.2.  Section 3.1 (Protocol Model) and others
  contents:
  - "C.1.2.  Section 3.1 (Protocol Model) and others\n   - Removed notes giving history\
    \ between LDAP v1, v2, and v3.  Instead,\n     added sufficient language so that\
    \ this document can stand on its\n     own.\n"
- title: C.1.3.  Section 4 (Elements of Protocol)
  contents:
  - "C.1.3.  Section 4 (Elements of Protocol)\n   - Clarified where the extensibility\
    \ features of ASN.1 apply to the\n     protocol.  This change affected various\
    \ ASN.1 types by the\n     inclusion of ellipses (...) to certain elements.\n\
    \   - Removed the requirement that servers that implement version 3 or\n     later\
    \ MUST provide the 'supportedLDAPVersion' attribute.  This\n     statement provided\
    \ no interoperability advantages.\n"
- title: C.1.4.  Section 4.1.1 (Message Envelope)
  contents:
  - "C.1.4.  Section 4.1.1 (Message Envelope)\n   - There was a mandatory requirement\
    \ for the server to return a\n     Notice of Disconnection and drop the transport\
    \ connection when a\n     PDU is malformed in a certain way.  This has been updated\
    \ such that\n     the server SHOULD return the Notice of Disconnection, and it\
    \ MUST\n     terminate the LDAP Session.\n"
- title: C.1.5.  Section 4.1.1.1 (Message ID)
  contents:
  - "C.1.5.  Section 4.1.1.1 (Message ID)\n   - Required that the messageID of requests\
    \ MUST be non-zero as the\n     zero is reserved for Notice of Disconnection.\n\
    \   - Specified when it is and isn't appropriate to return an already\n     used\
    \ messageID.  RFC 2251 accidentally imposed synchronous server\n     behavior\
    \ in its wording of this.\n"
- title: C.1.6.  Section 4.1.2 (String Types)
  contents:
  - "C.1.6.  Section 4.1.2 (String Types)\n   - Stated that LDAPOID is constrained\
    \ to <numericoid> from [RFC4512].\n"
- title: C.1.7.  Section 4.1.5.1 (Binary Option) and others
  contents:
  - "C.1.7.  Section 4.1.5.1 (Binary Option) and others\n   - Removed the Binary Option\
    \ from the specification.  There are\n     numerous interoperability problems\
    \ associated with this method of\n     alternate attribute type encoding.  Work\
    \ to specify a suitable\n     replacement is ongoing.\n"
- title: C.1.8.  Section 4.1.8 (Attribute)
  contents:
  - "C.1.8.  Section 4.1.8 (Attribute)\n   - Combined the definitions of PartialAttribute\
    \ and Attribute here,\n     and defined Attribute in terms of PartialAttribute.\n"
- title: C.1.9.  Section 4.1.10 (Result Message)
  contents:
  - "C.1.9.  Section 4.1.10 (Result Message)\n   - Renamed \"errorMessage\" to \"\
    diagnosticMessage\" as it is allowed to\n     be sent for non-error results.\n\
    \   - Moved some language into Appendix A, and referred the reader there.\n  \
    \ - Allowed matchedDN to be present for other result codes than those\n     listed\
    \ in RFC 2251.\n   - Renamed the code \"strongAuthRequired\" to \"strongerAuthRequired\"\
    \ to\n     clarify that this code may often be returned to indicate that a\n \
    \    stronger authentication is needed to perform a given operation.\n"
- title: C.1.10.  Section 4.1.11 (Referral)
  contents:
  - "C.1.10.  Section 4.1.11 (Referral)\n   - Defined referrals in terms of URIs rather\
    \ than URLs.\n   - Removed the requirement that all referral URIs MUST be equally\n\
    \     capable of progressing the operation.  The statement was ambiguous\n   \
    \  and provided no instructions on how to carry it out.\n   - Added the requirement\
    \ that clients MUST NOT loop between servers.\n   - Clarified the instructions\
    \ for using LDAPURLs in referrals, and in\n     doing so added a recommendation\
    \ that the scope part be present.\n   - Removed imperatives which required clients\
    \ to use URLs in specific\n     ways to progress an operation.  These did nothing\
    \ for\n     interoperability.\n"
- title: C.1.11.  Section 4.1.12 (Controls)
  contents:
  - "C.1.11.  Section 4.1.12 (Controls)\n   - Specified how control values defined\
    \ in terms of ASN.1 are to be\n     encoded.\n   - Noted that the criticality\
    \ field is only applied to request\n     messages (except UnbindRequest), and\
    \ must be ignored when present\n     on response messages and UnbindRequest.\n\
    \   - Specified that non-critical controls may be ignored at the\n     server's\
    \ discretion.  There was confusion in the original wording\n     which led some\
    \ to believe that recognized controls may not be\n     ignored as long as they\
    \ were associated with a proper request.\n   - Added language regarding combinations\
    \ of controls and the ordering\n     of controls on a message.\n   - Specified\
    \ that when the semantics of the combination of controls\n     is undefined or\
    \ unknown, it results in a protocolError.\n   - Changed \"The server MUST be prepared\"\
    \ to \"Implementations MUST be\n     prepared\" in paragraph 8 to reflect that\
    \ both client and server\n     implementations must be able to handle this (as\
    \ both parse\n     controls).\n"
- title: C.1.12.  Section 4.2 (Bind Operation)
  contents:
  - "C.1.12.  Section 4.2 (Bind Operation)\n   - Mandated that servers return protocolError\
    \ when the version is not\n     supported.\n   - Disambiguated behavior when the\
    \ simple authentication is used, the\n     name is empty, and the password is\
    \ non-empty.\n   - Required servers to not dereference aliases for Bind.  This\
    \ was\n     added for consistency with other operations and to help ensure\n \
    \    data consistency.\n   - Required that textual passwords be transferred as\
    \ UTF-8 encoded\n     Unicode, and added recommendations on string preparation.\
    \  This was\n     to help ensure interoperability of passwords being sent from\n\
    \     different clients.\n"
- title: C.1.13.  Section 4.2.1 (Sequencing of the Bind Request)
  contents:
  - "C.1.13.  Section 4.2.1 (Sequencing of the Bind Request)\n   - This section was\
    \ largely reorganized for readability, and language\n     was added to clarify\
    \ the authentication state of failed and\n     abandoned Bind operations.\n  \
    \ - Removed: \"If a SASL transfer encryption or integrity mechanism has\n    \
    \ been negotiated, that mechanism does not support the changing of\n     credentials\
    \ from one identity to another, then the client MUST\n     instead establish a\
    \ new connection.\"\n     If there are dependencies between multiple negotiations\
    \ of a\n     particular SASL mechanism, the technical specification for that\n\
    \     SASL mechanism details how applications are to deal with them.\n     LDAP\
    \ should not require any special handling.\n   - Dropped MUST imperative in paragraph\
    \ 3 to align with [RFC2119].\n   - Mandated that clients not send non-Bind operations\
    \ while a Bind is\n     in progress, and suggested that servers not process them\
    \ if they\n     are received.  This is needed to ensure proper sequencing of the\n\
    \     Bind in relationship to other operations.\n"
- title: C.1.14.  Section 4.2.3 (Bind Response)
  contents:
  - "C.1.14.  Section 4.2.3 (Bind Response)\n   - Moved most error-related text to\
    \ Appendix A, and added text\n     regarding certain errors used in conjunction\
    \ with the Bind\n     operation.\n   - Prohibited the server from specifying serverSaslCreds\
    \ when not\n     appropriate.\n"
- title: C.1.15.  Section 4.3 (Unbind Operation)
  contents:
  - "C.1.15.  Section 4.3 (Unbind Operation)\n   - Specified that both peers are to\
    \ cease transmission and terminate\n     the LDAP session for the Unbind operation.\n"
- title: C.1.16.  Section 4.4 (Unsolicited Notification)
  contents:
  - "C.1.16.  Section 4.4 (Unsolicited Notification)\n   - Added instructions for\
    \ future specifications of Unsolicited\n     Notifications.\n"
- title: C.1.17.  Section 4.5.1 (Search Request)
  contents:
  - "C.1.17.  Section 4.5.1 (Search Request)\n   - SearchRequest attributes is now\
    \ defined as an AttributeSelection\n     type rather than AttributeDescriptionList,\
    \ and an ABNF is\n     provided.\n   - SearchRequest attributes may contain duplicate\
    \ attribute\n     descriptions.  This was previously prohibited.  Now servers\
    \ are\n     instructed to ignore subsequent names when they are duplicated.\n\
    \     This was relaxed in order to allow different short names and also\n    \
    \ OIDs to be requested for an attribute.\n   - The present search filter now evaluates\
    \ to Undefined when the\n     specified attribute is not known to the server.\
    \  It used to\n     evaluate to FALSE, which caused behavior inconsistent with\
    \ what\n     most would expect, especially when the 'not' operator was used.\n\
    \   - The Filter choice SubstringFilter substrings type is now defined\n     with\
    \ a lower bound of 1.\n   - The SubstringFilter substrings 'initial, 'any', and\
    \ 'final' types\n     are now AssertionValue rather than LDAPString.  Also, added\n\
    \     imperatives stating that 'initial' (if present) must be listed\n     first,\
    \ and 'final' (if present) must be listed last.\n   - Disambiguated the semantics\
    \ of the derefAliases choices.  There was\n     question as to whether derefInSearching\
    \ applied to the base object\n     in a wholeSubtree Search.\n   - Added instructions\
    \ for equalityMatch, substrings, greaterOrEqual,\n     lessOrEqual, and approxMatch.\n"
- title: C.1.18.  Section 4.5.2 (Search Result)
  contents:
  - "C.1.18.  Section 4.5.2 (Search Result)\n   - Recommended that servers not use\
    \ attribute short names when it\n     knows they are ambiguous or may cause interoperability\
    \ problems.\n   - Removed all mention of ExtendedResponse due to lack of\n   \
    \  implementation.\n"
- title: C.1.19.  Section 4.5.3 (Continuation References in the Search Result)
  contents:
  - "C.1.19.  Section 4.5.3 (Continuation References in the Search Result)\n   - Made\
    \ changes similar to those made to Section 4.1.11.\n"
- title: C.1.20.  Section 4.5.3.1 (Example)
  contents:
  - "C.1.20.  Section 4.5.3.1 (Example)\n   - Fixed examples to adhere to changes\
    \ made to Section 4.5.3.\n"
- title: C.1.21.  Section 4.6 (Modify Operation)
  contents:
  - "C.1.21.  Section 4.6 (Modify Operation)\n   - Replaced AttributeTypeAndValues\
    \ with Attribute as they are\n     equivalent.\n   - Specified the types of modification\
    \ changes that might\n     temporarily violate schema.  Some readers were under\
    \ the impression\n     that any temporary schema violation was allowed.\n"
- title: C.1.22.  Section 4.7 (Add Operation)
  contents:
  - "C.1.22.  Section 4.7 (Add Operation)\n   - Aligned Add operation with X.511 in\
    \ that the attributes of the RDN\n     are used in conjunction with the listed\
    \ attributes to create the\n     entry.  Previously, Add required that the distinguished\
    \ values be\n     present in the listed attributes.\n   - Removed requirement\
    \ that the objectClass attribute MUST be\n     specified as some DSE types do\
    \ not require this attribute.\n     Instead, generic wording was added, requiring\
    \ the added entry to\n     adhere to the data model.\n   - Removed recommendation\
    \ regarding placement of objects.  This is\n     covered in the data model document.\n"
- title: C.1.23.  Section 4.9 (Modify DN Operation)
  contents:
  - "C.1.23.  Section 4.9 (Modify DN Operation)\n   - Required servers to not dereference\
    \ aliases for Modify DN.  This\n     was added for consistency with other operations\
    \ and to help ensure\n     data consistency.\n   - Allow Modify DN to fail when\
    \ moving between naming contexts.\n   - Specified what happens when the attributes\
    \ of the newrdn are not\n     present on the entry.\n"
- title: C.1.24.  Section 4.10 (Compare Operation)
  contents:
  - "C.1.24.  Section 4.10 (Compare Operation)\n   - Specified that compareFalse means\
    \ that the Compare took place and\n     the result is false.  There was confusion\
    \ that led people to\n     believe that an Undefined match resulted in compareFalse.\n\
    \   - Required servers to not dereference aliases for Compare.  This was\n   \
    \  added for consistency with other operations and to help ensure\n     data consistency.\n"
- title: C.1.25.  Section 4.11 (Abandon Operation)
  contents:
  - "C.1.25.  Section 4.11 (Abandon Operation)\n   - Explained that since Abandon\
    \ returns no response, clients should\n     not use it if they need to know the\
    \ outcome.\n   - Specified that Abandon and Unbind cannot be abandoned.\n"
- title: C.1.26.  Section 4.12 (Extended Operation)
  contents:
  - "C.1.26.  Section 4.12 (Extended Operation)\n   - Specified how values of Extended\
    \ operations defined in terms of\n     ASN.1 are to be encoded.\n   - Added instructions\
    \ on what Extended operation specifications\n     consist of.\n   - Added a recommendation\
    \ that servers advertise supported Extended\n     operations.\n"
- title: C.1.27.  Section 5.2 (Transfer Protocols)
  contents:
  - "C.1.27.  Section 5.2 (Transfer Protocols)\n   - Moved referral-specific instructions\
    \ into referral-related\n     sections.\n"
- title: C.1.28.  Section 7 (Security Considerations)
  contents:
  - "C.1.28.  Section 7 (Security Considerations)\n   - Reworded notes regarding SASL\
    \ not protecting certain aspects of\n     the LDAP Bind messages.\n   - Noted\
    \ that Servers are encouraged to prevent directory\n     modifications by clients\
    \ that have authenticated anonymously\n     [RFC4513].\n   - Added a note regarding\
    \ the possibility of changes to security\n     factors (authentication, authorization,\
    \ and data confidentiality).\n   - Warned against following referrals that may\
    \ have been injected in\n     the data stream.\n   - Noted that servers should\
    \ protect information equally, whether in\n     an error condition or not, and\
    \ mentioned matchedDN,\n     diagnosticMessage, and resultCodes specifically.\n\
    \   - Added a note regarding malformed and long encodings.\n"
- title: C.1.29.  Appendix A (Complete ASN.1 Definition)
  contents:
  - "C.1.29.  Appendix A (Complete ASN.1 Definition)\n   - Added \"EXTENSIBILITY IMPLIED\"\
    \ to ASN.1 definition.\n   - Removed AttributeType.  It is not used.\n"
- title: C.2.  Changes Made to RFC 2830
  contents:
  - "C.2.  Changes Made to RFC 2830\n   This section summarizes the substantive changes\
    \ made to Sections of\n   RFC 2830.  Readers should consult [RFC4513] for summaries\
    \ of changes\n   to other sections.\n"
- title: C.2.1.  Section 2.3 (Response other than "success")
  contents:
  - "C.2.1.  Section 2.3 (Response other than \"success\")\n   - Removed wording indicating\
    \ that referrals can be returned from\n     StartTLS.\n   - Removed requirement\
    \ that only a narrow set of result codes can be\n     returned.  Some result codes\
    \ are required in certain scenarios, but\n     any other may be returned if appropriate.\n\
    \   - Removed requirement that the ExtendedResponse.responseName MUST be\n   \
    \  present.  There are circumstances where this is impossible, and\n     requiring\
    \ this is at odds with language in Section 4.12.\n"
- title: C.2.1.  Section 4 (Closing a TLS Connection)
  contents:
  - "C.2.1.  Section 4 (Closing a TLS Connection)\n   - Reworded most of this section\
    \ to align with definitions of the\n     LDAP protocol layers.\n   - Removed instructions\
    \ on abrupt closure as this is covered in other\n     areas of the document (specifically,\
    \ Section 5.3)\n"
- title: C.3.  Changes Made to RFC 3771
  contents:
  - "C.3.  Changes Made to RFC 3771\n   - Rewrote to fit into this document.  In general,\
    \ semantics were\n     preserved.  Supporting and background language seen as\
    \ redundant\n     due to its presence in this document was omitted.\n   - Specified\
    \ that Intermediate responses to a request may be of\n     different types, and\
    \ one of the response types may be specified to\n     have no response value.\n"
- title: Editor's Address
  contents:
  - "Editor's Address\n   Jim Sermersheim\n   Novell, Inc.\n   1800 South Novell Place\n\
    \   Provo, Utah 84606, USA\n   Phone: +1 801 861-3088\n   EMail: jimse@novell.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
