- title: __initial_text__
  contents:
  - '                     TCP Alternate Checksum Options

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo suggests a pair of TCP options to allow use\
    \ of alternate\n   data checksum algorithms in the TCP header.  The use of these\
    \ options\n   is experimental, and not recommended for production use.\n   Note:\
    \  This RFC corrects errors introduced in the editing process in\n   RFC 1145.\n\
    \   Distribution of this memo is unlimited.\n"
- title: Introduction
  contents:
  - "Introduction\n   Some members of the networking community have expressed interest\
    \ in\n   using checksum-algorithms with different error detection and\n   correction\
    \ properties than the standard TCP checksum.  The option\n   described in this\
    \ memo provides a mechanism to negotiate the use of\n   an alternate checksum\
    \ at connection-establishment time, as well as a\n   mechanism to carry additional\
    \ checksum information for algorithms\n   that utilize checksums that are longer\
    \ than 16 bits.\n"
- title: Definition of the Options
  contents:
  - "Definition of the Options\n   The TCP Alternate Checksum Request Option may be\
    \ sent in a SYN\n   segment by a TCP to indicate that the TCP is prepared to both\n\
    \   generate and receive checksums based on an alternate algorithm.\n   During\
    \ communication, the alternate checksum replaces the regular TCP\n   checksum\
    \ in the checksum field of the TCP header.  Should the\n   alternate checksum\
    \ require more than 2 octets to transmit, the\n   checksum may either be moved\
    \ into a TCP Alternate Checksum Data\n   Option and the checksum field of the\
    \ TCP header be sent as 0, or the\n   data may be split between the header field\
    \ and the option.  Alternate\n   checksums are computed over the same data as\
    \ the regular TCP checksum\n   (see TCP Alternate Checksum Data Option discussion\
    \ below).\n"
- title: TCP Alternate Checksum Request Option
  contents:
  - "TCP Alternate Checksum Request Option\n   The format of the TCP Alternate Checksum\
    \ Request Option is:\n                 +----------+----------+----------+\n  \
    \               |  Kind=14 | Length=3 |  chksum  |\n                 +----------+----------+----------+\n\
    \   Here chksum is a number identifying the type of checksum to be used.\n   The\
    \ currently defined values of chksum are:\n                   0  -- TCP checksum\n\
    \                   1  -- 8-bit  Fletcher's algorithm (see Appendix I)\n     \
    \              2  -- 16-bit Fletcher's algorithm (see Appendix II)\n   Note that\
    \ the 8-bit Fletcher algorithm gives a 16-bit checksum and\n   the 16-bit algorithm\
    \ gives a 32-bit checksum.\n   Alternate checksum negotiation proceeds as follows:\n\
    \      A SYN segment used to originate a connection may contain the\n      Alternate\
    \ Checksum Request Option, which specifies an alternate\n      checksum-calculation\
    \ algorithm to be used for the connection.  The\n      acknowledging SYN-ACK segment\
    \ may also carry the option.\n      If both SYN segments carry the Alternate Checksum\
    \ Request option,\n      and both specify the same algorithm, that algorithm must\
    \ be used\n      for the remainder of the connection.  Otherwise, the standard\
    \ TCP\n      checksum algorithm must be used for the entire connection.  Thus,\n\
    \      for example, if one TCP specifies type 1 checksums, and the other\n   \
    \   specifies type 2 checksums, then they will use type 0 (the regular\n     \
    \ TCP checksum).  Note that in practice, one TCP will typically be\n      responding\
    \ to the other's SYN, and thus either accepting or\n      rejecting the proposed\
    \ alternate checksum algorithm.\n      Any segment with the SYN bit set must always\
    \ use the standard TCP\n      checksum algorithm.  Thus the SYN segment will always\
    \ be\n      understood by the receiving TCP.  The alternate checksum must not\n\
    \      be used until the first non-SYN segment.  In addition, because RST\n  \
    \    segments may also be received or sent without complete state\n      information,\
    \ any segment with the RST bit set must use the\n      standard TCP checksum.\n\
    \      The option may not be sent in any segment that does not have the\n    \
    \  SYN bit set.\n      An implementation of TCP which does not support the option\
    \ should\n      silently ignore it (as RFC 1122 requires).  Ignoring the option\n\
    \      will force any TCP attempting to use an alternate checksum to use\n   \
    \   the standard TCP checksum algorithm, thus ensuring\n      interoperability.\n"
- title: TCP Alternate Checksum Data Option
  contents:
  - "TCP Alternate Checksum Data Option\n   The format of the TCP Alternate Checksum\
    \ Data Option is:\n                +---------+---------+---------+     +---------+\n\
    \                | Kind=15 |Length=N |  data   | ... |  data   |\n           \
    \     +---------+---------+---------+     +---------+\n   This field is used only\
    \ when the alternate checksum that is\n   negotiated is longer than 16 bits. \
    \ These checksums will not fit in\n   the checksum field of the TCP header and\
    \ thus at least part of them\n   must be put in an option.  Whether the checksum\
    \ is split between the\n   checksum field in the TCP header and the option or\
    \ the entire\n   checksum is placed in the option is determined on a checksum\
    \ by\n   checksum basis.\n   The length of this option will depend on the choice\
    \ of alternate\n   checksum algorithm for this connection.\n   While computing\
    \ the alternate checksum, the TCP checksum field and\n   the data portion TCP\
    \ Alternate Checksum Data Option are replaced with\n   zeros.\n   An otherwise\
    \ acceptable segment carrying this option on a connection\n   using a 16-bit checksum\
    \ algorithm, or carrying this option with an\n   inappropriate number of data\
    \ octets for the chosen alternate checksum\n   algorithm is in error and must\
    \ be discarded; a RST-segment must be\n   generated, and the connection aborted.\n\
    \   Note the requirement above that RST and SYN segments must always use\n   the\
    \ standard TCP checksum.\n"
- title: 'APPENDIX I:  The 8-bit Fletcher Checksum Algorithm'
  contents:
  - "APPENDIX I:  The 8-bit Fletcher Checksum Algorithm\n   The 8-bit Fletcher Checksum\
    \ Algorithm is calculated over a sequence\n   of data octets (call them D[1] through\
    \ D[N]) by maintaining 2\n   unsigned 1's-complement 8-bit accumulators A and\
    \ B whose contents are\n   initially zero, and performing the following loop where\
    \ i ranges from\n   1 to N:\n           A := A + D[i]\n           B := B + A\n\
    \   It can be shown that at the end of the loop A will contain the 8-bit\n   1's\
    \ complement sum of all octets in the datagram, and that B will\n   contain (N)D[1]\
    \ + (N-1)D[2] + ... + D[N].\n   The octets covered by this algorithm should be\
    \ the same as those over\n   which the standard TCP checksum calculation is performed,\
    \ with the\n   pseudoheader being D[1] through D[12] and the TCP header beginning\
    \ at\n   D[13].  Note that, for purposes of the checksum computation, the\n  \
    \ checksum field itself must be equal to zero.\n   At the end of the loop, the\
    \ A goes in the first byte of the TCP\n   checksum and B goes in the second byte.\n\
    \   Note that, unlike the OSI version of the Fletcher checksum, this\n   checksum\
    \ does not adjust the check bytes so that the receiver\n   checksum is 0.\n  \
    \ There are a number of much faster algorithms for calculating the two\n   octets\
    \ of the 8-bit Fletcher checksum.  For more information see\n   [Sklower89], [Nakassis88]\
    \ and [Fletcher82].  Naturally, any\n   computation which computes the same number\
    \ as would be calculated by\n   the loop above may be used to calculate the checksum.\
    \  One advantage\n   of the Fletcher algorithms over the standard TCP checksum\
    \ algorithm\n   is the ability to detect the transposition of octets/words of\
    \ any\n   size within a datagram.\n"
- title: 'APPENDIX II:  The 16-bit Fletcher Checksum Algorithm'
  contents:
  - "APPENDIX II:  The 16-bit Fletcher Checksum Algorithm\n   The 16-bit Fletcher\
    \ Checksum algorithm proceeds in precisely the same\n   manner as the 8-bit checksum\
    \ algorithm,, except that A, B and the\n   D[i] are 16-bit quantities.  It is\
    \ necessary (as it is with the\n   standard TCP checksum algorithm) to pad a datagram\
    \ containing an odd\n   number of octets with a zero octet.\n   Result A should\
    \ be placed in the TCP header checksum field and Result\n   B should appear in\
    \ an TCP Alternate Checksum Data option.  This\n   option must be present in every\
    \ TCP header. The two bytes reserved\n   for B should be set to zero during the\
    \ calculation of the checksum.\n   The checksum field of the TCP header shall\
    \ contain the contents of A\n   at the end of the loop.  The TCP Alternate Checksum\
    \ Data option must\n   be present and contain the contents of B at the end of\
    \ the loop.\n"
- title: 'BIBLIOGRAPHY:'
  contents:
  - "BIBLIOGRAPHY:\n   [BrBoPa89]     Braden, R., Borman, D., and C. Partridge, \"\
    Computing\n                  the Internet Checksum\", ACM Computer Communication\n\
    \                  Review, Vol. 19, No. 2, pp. 86-101, April 1989.\n         \
    \         [Note that this includes Plummer, W. \"IEN-45: TCP\n               \
    \   Checksum Function Design\" (1978) as an appendix.]\n   [Fletcher82]   Fletcher,\
    \ J., \"An Arithmetic Checksum for Serial\n                  Transmissions\",\
    \ IEEE Transactions on Communication,\n                  Vol. COM-30, No. 1, pp.\
    \ 247-252, January 1982.\n   [Nakassis88]   Nakassis, T., \"Fletcher's Error Detection\
    \ Algorithm:\n                  How to implement it efficiently and how to avoid\
    \ the\n                  most common pitfalls\", ACM Computer Communication\n\
    \                  Review, Vol. 18, No. 5, pp. 86-94, October 1988.\n   [Sklower89]\
    \    Sklower, K., \"Improving the Efficiency of the OSI\n                  Checksum\
    \ Calculation\", ACM Computer Communication\n                  Review, Vol. 19,\
    \ No. 5, pp. 32-43, October 1989.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not addressed in this memo.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Johnny Zweig\n   Digital Computer Lab\n   University of\
    \ Illinois (UIUC)\n   1304 West Springfield Avenue\n   CAMPUS MC 258\n   Urbana,\
    \ IL 61801\n   Phone:  (217) 333-7937\n   EMail:  zweig@CS.UIUC.EDU\n   Craig\
    \ Partridge\n   Bolt Beranek and Newman Inc.\n   50 Moulton Street\n   Cambridge,\
    \ MA 02138\n   Phone: (617) 873-2459\n   EMail: craig@BBN.COM\n"
