- title: __initial_text__
  contents:
  - "     On the Problem of Signature Authentication for Network Mail\nThis note describes\
    \ the problem of signature authentication for network\nmail, presents a general\
    \ approach to the problem and proposes a specific \nimplementation of that approach.\n\
    1. The Problem\n   The problem we wish to consider is:\n      How can the recipient\
    \ of a network mail message be \"certain\"\n      that the signature (e.g., the\
    \ name in the \"FROM\" field) is\n      authentic; that is, that the message is\
    \ really from whom it\n      claims to be?\nWe are interested in the problem of\
    \ signature authenticity in the network\ncontext.  For purposes of this note we\
    \ shall assume a solution to the\nsignature authentication problem for local mail\
    \ (i.e., messages from one\nuser to another within a single host).  That is, we\
    \ assume that for any\nhost, either the host regards the problem as important\
    \ and has a mechanism\nfor guaranteeing signatures on local mail or that the host\
    \ does not regard the\nproblem as important and does not guarantee signature authentication.\
    \  It\nshould become clear how this assumption relates to our approach to the\
    \ network\nsignature problem.\nWe shall discuss our approach using the following\
    \ simple model for network\nmail:\n      To send net mail a user invokes a mail\
    \ sending process (SP) on\n      his local host (SH).  The process SP acts on\
    \ behalf of the user\n      to deliver the message to an appropriate mailbox at\
    \ the\n      receiving host (RH).  It does that by interacting with a\n      receiving\
    \ process (RP) that runs on host RH.  RP accepts the\n      message from SP and\
    \ deposits it in the appropriate mailbox.\nIn the current implementation of network\
    \ mail, the receiving process RP is \ntypically an FTP server process.  For the\
    \ current TENEX implementation the \nmail sending process SP is either a process\
    \ running SNDMSG or a \"background\" \nMAILER process which sends \"queued\" (previously\
    \ posted but undelivered) mail.\n2.  An Approach\nWe seek a solution which will\
    \ allow RP, the receiving process, to mark\nthe signature on messages it receives\
    \ as authenticated or not with\nrespect to SH, the sending host.  If RP can so\
    \ mark incoming messages,\na user reading his mail at RH would be able to see\
    \ the signature on each\nmessage as authenticated or not with respect to the host\
    \ of origin.  The\nauthenticity of the signature on a piece of mail is understood\
    \ to be \nresponsibility of the originating host.  The credibility a user gives\
    \ a\nparticular message which is marked as authentic can be based on the user's\n\
    own estimate of the source host's user authentication and access control\nmechanisms.\n\
    \    The success of this approach depends upon two things:\n    a.  Users develop\
    \ estimates of the security of various host user\n        authentication and access\
    \ control mechanisms.  We have seen that\n        users who are concerned about\
    \ data privacy and security are\n        already doing this within the ARPANET.\n\
    \    b.  The existence of a mechanism which RP, the receiving process,\n     \
    \   can use to distinguish mail authenticated with respect to the\n        sending\
    \ host from mail that has not been authenticated by the\n        sending host.\
    \  That is, a mechanism is required which will allow a\n        properly authorized\
    \ (by the sending host) mail sending process to\n        identify itself as such\
    \ to the mail receiving process.  The\n        receiving process can then mark\
    \ mail from such an authenticated\n        process as authentic.  Nonauthorized\
    \ processes (e.g., a user\n        process attempting to pose as an authorized\
    \ mail sending process)\n        may try to send mail to mailboxes at RH; in such\
    \ a case the\n        receiving process has the option of refusing to accept the\
    \ message\n        or accepting them marking them as unauthenticated.\n3.  Proposed\
    \ Implementation of Approach\nThe use of passwords is one possible way to accomplish\
    \ sending process\nauthentication.  Only an authorized sending process would know\
    \ the password\nand thus be able to properly identify itself to a mail receiving\
    \ process.\nWe reject the password mechanism as operationally impractical for\
    \ the following\nreasons:\n    a.  Use of a password requires that the password\
    \ be stored in\n        the sending program or be accessible to it in some way\
    \ thereby\n        increasing the likelihood that the privacy of such a password\
    \ will\n        be compromised.\n    b.  If a password is compromised, it must\
    \ be changed at both\n        sending and receiving hosts; a synchronization problem.\n\
    \    c.  Truly secure mail would probably require passwords for each\n       \
    \ pair of hosts; this requires N*N passwords for an N host network.\nAs an alternative\
    \ to the use of passwords as a means for process\nauthentication, we propose that\
    \ authentication be based on the\ncommunication path itself between the sending\
    \ and receiving process.\nIn the ARPANET, a communication path is uniquely identified\
    \ by its two\nends: the send host-socket pair and the receive host-socket pair.\
    \  A\nprocess can accurately determine the host-socket pair at the remote end\n\
    of a communication path.  We propose that the receiving process\nconsider the\
    \ sending process to be a properly authorized (by the\nsending host) sender of\
    \ mail only if the sending end of the\ncommunication path is (one of) the socket(s)\
    \ reserved for transmission\nof authenticated mail.  The mail sending socket(s)\
    \ would be reserved\nby prior host agreement.\nThe responsibility of the sending\
    \ host is to allow only authorized\nmail sending processes to access the mail\
    \ sending socket(s).  The\nresponsibility of the user concerned about the authenticity\
    \ of his\nmail is to understand that mail marked as authentic means that the\n\
    sending host has determined the identity of the sender and that the\nsignature\
    \ on such mail is only as good or bad as the user authentication\nand access control\
    \ procedures of the sending host.\n4.  Additional Remarks\n    a.  The use of\
    \ sockets for process authentication is not a new concept\n        within the\
    \ ARPANET.  By host agreement, the TELNET logger process\n        responds to\
    \ connections to socket #1, the FTP logger process to socket\n        #3, etc.\
    \  In fact, the privacy of net mail depends upon how well the\n        host controls\
    \ access to the FTP logger socket; that is, the\n        authenticity of the mail\
    \ receiving process is based upon that fact\n        that it is the process reached\
    \ by ICP'ing to socket #3.  This note\n        proposes that the same mechanism\
    \ be used to provide authentication of\n        mail sending processes.\n    b.\
    \  Planned TENEX Experiment\n        A set of sockets has been assigned for mail\
    \ transmission.  They are\n       (all numbers are decimal)\n           ICP \"\
    from\" socket - 232\n           FTP user command sockets:  receive, send = 234,\
    \ 235\n           Default data transfer (user, send) socket = 237\n        We\
    \ intend to modify the TENEX mail sending, receiving and reading\n        software\
    \ as suggested above.  Mail sent by TENEX to remote hosts\n        which is authentic\
    \ (with respect to TENEX) will be sent by initiating\n        the ICP to the remote\
    \ FTP server socket 232.  Mail received from\n        remote hosts will be marked\
    \ as authentic only if the ICP to the TENEX\n        FTP server was initiated\
    \ from remote socket 232.  The TENEX mail\n        reading software will indicate\
    \ for each message whether or not the\n        signature on the message was source\
    \ authenticated.\n    c.  Contention for the Mail Sending Socket\n        Depending\
    \ upon the implementation of the sending host's NCP and\n        its mail net\
    \ sending software, it may be the case that several users\n        concurrently\
    \ sending network mail may be competing for the single\n        ICP \"from\" socket.\
    \  If socket contention turns out to be a serious\n        problem in practice,\
    \ a set of ICP \"from\" sockets could be reserved\n        for authenticated network\
    \ mail.\n    d.  The local mail signature authentication problem is nearly independent\n\
    \        of the network mail signature authentication problem as we have\n   \
    \     discussed it.  For example, the following observations can be made:\n  \
    \      1.  The local users of a host which does not authenticate local mail\n\
    \            probably should not expect the host to reliably deliver\n       \
    \     authenticated network  mail to them.  Because local mail is not\n      \
    \      authenticated, it is likely that a malicious local user could\n       \
    \     add to other users' mail boxes forged messages which are formatted\n   \
    \         identically to net mail and are marked as authentic in the way\n   \
    \         the host's mail receiving process marks mail.\n        2. A host that\
    \ has strong user authentication procedures and\n           authenticates local\
    \ mail is not necessarily a reliable source\n           of authenticated network\
    \ mail.  In order to be a reliable source,\n           it must limit access to\
    \ the net mail transmission socket(s) to\n           authorized mail sending processes.\n\
    \       3.  A host which does not support local authentic mail could be a\n  \
    \         reliable source of authentic net mail.\n"
