- title: __initial_text__
  contents:
  - '               One-Time Password (OTP) Pre-Authentication

    '
- title: Abstract
  contents:
  - "Abstract\n   The Kerberos protocol provides a framework authenticating a client\n\
    \   using the exchange of pre-authentication data.  This document\n   describes\
    \ the use of this framework to carry out One-Time Password\n   (OTP) authentication.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6560.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Scope ......................................................3\n  \
    \    1.2. Overall Design .............................................3\n    \
    \  1.3. Conventions Used in This Document ..........................4\n   2. Usage\
    \ Overview ..................................................4\n      2.1. OTP\
    \ Mechanism Support ......................................4\n      2.2. Pre-Authentication\
    \ .........................................4\n      2.3. PIN Change .................................................5\n\
    \      2.4. Resynchronization ..........................................6\n  \
    \ 3. Pre-Authentication Protocol Details .............................6\n    \
    \  3.1. Initial Client Request .....................................6\n      3.2.\
    \ KDC Challenge ..............................................7\n      3.3. Client\
    \ Response ............................................9\n      3.4. Verifying\
    \ the Pre-Authentication Data .....................13\n      3.5. Confirming the\
    \ Reply Key Change ...........................15\n      3.6. Reply Key Generation\
    \ ......................................15\n   4. OTP Kerberos Message Types .....................................17\n\
    \      4.1. PA-OTP-CHALLENGE ..........................................17\n  \
    \    4.2. PA-OTP-REQUEST ............................................21\n    \
    \  4.3. PA-OTP-PIN-CHANGE .........................................25\n   5. IANA\
    \ Considerations ............................................26\n   6. Security\
    \ Considerations ........................................27\n      6.1. Man-in-the-Middle\
    \ Attacks .................................27\n      6.2. Reflection ................................................28\n\
    \      6.3. Denial-of-Service Attacks .................................28\n  \
    \    6.4. Replay ....................................................29\n    \
    \  6.5. Brute-Force Attack ........................................29\n      6.6.\
    \ FAST Facilities ...........................................30\n   8. Acknowledgments\
    \ ................................................30\n   8. References .....................................................31\n\
    \      8.1. Normative References ......................................31\n  \
    \    8.2. Informative References ....................................32\n   Appendix\
    \ A.  ASN.1 Module  ....................................... 33\n   Appendix B.\
    \  Examples of OTP Pre-Authentication Exchanges ........ 36\n     B.1.  Four-Pass\
    \ Authentication ................................. 36\n     B.2.  Two-Pass Authentication\
    \  ................................. 38\n     B.3.  PIN Change ...............................................\
    \ 40\n     B.4.  Resynchronization  ....................................... 41\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Scope
  contents:
  - "1.1.  Scope\n   This document describes a Flexible Authentication Secure Tunneling\n\
    \   (FAST) [RFC6113] factor that allows One-Time Password (OTP) values to\n  \
    \ be used in the Kerberos V5 [RFC4120] pre-authentication in a manner\n   that\
    \ does not require use of the user's Kerberos password.  The\n   system is designed\
    \ to work with different types of OTP algorithms\n   such as time-based OTPs [RFC2808],\
    \ counter-based tokens [RFC4226] and\n   challenge-response systems such as [RFC2289].\
    \  It is also designed to\n   work with tokens that are electronically connected\
    \ to the user's\n   computer via means such as a USB interface.\n   This FAST\
    \ factor provides the following facilities (as defined in\n   [RFC6113]): client-authentication,\
    \ replacing-reply-key, and KDC-\n   authentication.  It does not provide the strengthening-reply-key\n\
    \   facility.\n   This proposal is partially based upon previous work on integrating\n\
    \   single-use authentication mechanisms into Kerberos [HORENEZ004].\n"
- title: 1.2.  Overall Design
  contents:
  - "1.2.  Overall Design\n   This proposal supports four- and two-pass variants.\
    \  In the four-pass\n   system, the client sends the Key Distribution Center (KDC)\
    \ an initial\n   AS-REQ, and the KDC responds with a KRB-ERROR containing pre-\n\
    \   authentication data that includes a random nonce.  The client then\n   encrypts\
    \ the nonce and returns it to the KDC in a second AS-REQ.\n   Finally, the KDC\
    \ returns the AS-REP.  In the two-pass variant, the\n   client encrypts a timestamp\
    \ rather than a nonce from the KDC, and the\n   encrypted data is sent to the\
    \ KDC in the initial AS-REQ.  The two-\n   pass system can be used in cases where\
    \ the client can determine in\n   advance that OTP pre-authentication is supported\
    \ by the KDC, which\n   OTP key should be used and the encryption parameters required\
    \ by the\n   KDC.\n   In both systems, in order to create the message sent to\
    \ the KDC, the\n   client must generate the OTP value and two keys: the classic\
    \ Reply\n   Key used to decrypt the KDC's reply and a key to encrypt the data\n\
    \   sent to the KDC.  In most cases, the OTP value will be used in the\n   key\
    \ generation, but in order to support algorithms where the KDC\n   cannot obtain\
    \ the value (e.g., [RFC2289]), the system supports the\n   option of including\
    \ the OTP value in the request along with the\n   encrypted nonce.  In addition,\
    \ in order to support situations where\n   the KDC is unable to obtain the plaintext\
    \ OTP value, the system also\n   supports the use of hashed OTP values in the\
    \ key derivation.\n   The pre-authentication data sent from the client to the\
    \ KDC is sent\n   within the encrypted data provided by the FAST pre-authentication\n\
    \   data type of the AS-REQ.  The KDC then obtains the OTP value,\n   generates\
    \ the same keys, and verifies the pre-authentication data by\n   decrypting the\
    \ nonce.  If the verification succeeds, then it confirms\n   knowledge of the\
    \ Reply Key by using it to encrypt data in the AS-REP.\n"
- title: 1.3.  Conventions Used in This Document
  contents:
  - "1.3.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   This document assumes familiarity with the Kerberos\n   pre-authentication\
    \ framework [RFC6113] and so freely uses terminology\n   and notation from that\
    \ document.\n   The word padata is used as shorthand for pre-authentication data.\n"
- title: 2.  Usage Overview
  contents:
  - '2.  Usage Overview

    '
- title: 2.1.  OTP Mechanism Support
  contents:
  - "2.1.  OTP Mechanism Support\n   As described above, this document describes a\
    \ generic system for\n   supporting different OTP mechanisms in Kerberos pre-authentication.\n\
    \   To ensure interoperability, all implementations of this specification\n  \
    \ SHOULD provide a mechanism (e.g., a provider interface) to add or\n   remove\
    \ support for a particular OTP mechanism.\n"
- title: 2.2.  Pre-Authentication
  contents:
  - "2.2.  Pre-Authentication\n   The approach uses pre-authentication data in AS-REQ,\
    \ AS-REP, and\n   KRB-ERROR messages.\n   In the four-pass system, the client\
    \ begins by sending an initial\n   AS-REQ to the KDC that may contain pre-authentication\
    \ data such as\n   the standard Kerberos password data.  The KDC will then determine,\
    \ in\n   an implementation dependent fashion, whether OTP authentication is\n\
    \   required and if it is, it will respond with a KRB-ERROR message\n   containing\
    \ a PA-OTP-CHALLENGE (see Section 4.1) in the PA-DATA.\n   The PA-OTP-CHALLENGE\
    \ will contain a KDC-generated nonce, a list of\n   hash algorithm identifiers,\
    \ and an iteration count if hashed OTP\n   values are used (see Section 3.6) and\
    \ OPTIONAL information on how the\n   OTP should be generated by the client. \
    \ The client will then generate\n   the OTP value and two keys: a Client Key to\
    \ encrypt the KDC's nonce\n   and a Reply Key used to decrypt the KDC's reply.\n\
    \   As described in Section 5.4.1 of [RFC6113], the FAST system uses an\n   Armor\
    \ Key to set up an encrypted tunnel for use by FAST factors.  As\n   described\
    \ in Section 3.6 of this document, the Client Key and Reply\n   Key will be generated\
    \ from the Armor Key and the OTP value, unless\n   the OTP algorithm does not\
    \ allow the KDC to obtain the OTP value.  If\n   hash algorithm identifiers were\
    \ included in the PA-OTP-CHALLENGE,\n   then the client will use the hash of the\
    \ OTP value rather than the\n   plaintext value in the key generation.  Both keys\
    \ will have the same\n   encryption type as the Armor Key.\n   The generated Client\
    \ Key will be used to encrypt the nonce received\n   from the KDC.  The encrypted\
    \ value along with optional information on\n   how the OTP was generated are then\
    \ sent to the KDC in a\n   PA-OTP-REQUEST (see Section 4.2) encrypted within the\
    \ armored-data of\n   a PA-FX-FAST-REQUEST PA-DATA element of a second AS-REQ.\n\
    \   In the two-pass system, the client sends the PA-OTP-REQUEST in the\n   initial\
    \ AS-REQ instead of sending it in response to a\n   PA-OTP-CHALLENGE returned\
    \ by the KDC.  Since no challenge is received\n   from the KDC, the client includes\
    \ an encrypted timestamp in the\n   request rather than the encrypted KDC nonce.\n\
    \   In both cases, on receipt of a PA-OTP-REQUEST, the KDC generates the\n   keys\
    \ in the same way as the client, and uses the generated Client Key\n   to verify\
    \ the pre-authentication by decrypting the encrypted data\n   sent by the client\
    \ (either nonce or timestamp).  If the validation\n   succeeds, then the KDC will\
    \ authenticate itself to the client and\n   confirm that the Reply Key has been\
    \ updated by using the generated\n   Reply Key in the AS-REP response.\n"
- title: 2.3.  PIN Change
  contents:
  - "2.3.  PIN Change\n   Most OTP tokens involve the use of a Personal Identification\
    \ Number\n   (PIN) in the generation of the OTP value.  This PIN value will be\n\
    \   combined with the value generated by the token to produce the final\n   OTP\
    \ value that will be used in this protocol.\n   If, following successful validation\
    \ of a PA-OTP-REQUEST in an AS-REQ,\n   the KDC determines that the user's PIN\
    \ has expired and needs to\n   change, then it SHOULD respond with a KRB-ERROR\
    \ of type\n   KDC_ERR_PIN_EXPIRED.  It MAY include formatting information on the\n\
    \   PIN in a PA-OTP-PIN-CHANGE (see Section 4.3) encrypted within the\n   armored-data\
    \ of the PA-FX-FAST-REPLY PA-DATA element.\n              KDC_ERR_PIN_EXPIRED\
    \           96\n   If the PIN change is to be handled by a PIN-change service,\
    \ then it\n   is assumed that authentication to that service will succeed if the\n\
    \   PIN has expired.\n   If the user's PIN has not expired but has been changed,\
    \ then the KDC\n   MAY return the new value to the client in a PA-OTP-PIN-CHANGE\n\
    \   encrypted within the armored-data of the PA-FX-FAST-REPLY PA-DATA\n   element\
    \ of the AS-REP.  Similarly, if a PIN change is not required,\n   then the KDC\
    \ MAY return a PA-OTP-PIN-CHANGE to inform the client of\n   the current PIN's\
    \ expiration time.\n"
- title: 2.4.  Resynchronization
  contents:
  - "2.4.  Resynchronization\n   It is possible with time- and event-based tokens\
    \ that the OTP server\n   will lose synchronization with the current token state.\
    \  For example,\n   event-based tokens may drift since the counter on the token\
    \ is\n   incremented every time the token is used, but the counter on the\n  \
    \ server is only incremented on an authentication.  Similarly, the\n   clocks\
    \ on time-based tokens may drift.\n   Methods to recover from this type of situation\
    \ are OTP\n   algorithm-specific but may involve the client sending a sequence\
    \ of\n   OTP values to allow the server to further validate the correct\n   position\
    \ in its search window (see Section 7.4 of [RFC4226] for an\n   example).\n  \
    \ If, when processing a PA-OTP-REQUEST, the pre-authentication\n   validation\
    \ fails for this reason, then the KDC MAY return a KRB-ERROR\n   message.  The\
    \ KRB-ERROR message MAY contain a PA-OTP-CHALLENGE in the\n   PA-DATA with a single\
    \ otp-tokenInfo representing the token used in\n   the initial authentication\
    \ attempt but with the \"nextOTP\" flag set.\n   If this flag is set, then the\
    \ client SHOULD re-try the authentication\n   using an OTP value generated using\
    \ the token in the \"state\" after\n   that used in the failed authentication\
    \ attempt, for example, using\n   the next time interval or counter value.\n"
- title: 3.  Pre-Authentication Protocol Details
  contents:
  - '3.  Pre-Authentication Protocol Details

    '
- title: 3.1.  Initial Client Request
  contents:
  - "3.1.  Initial Client Request\n   In the four-pass mode, the client begins by\
    \ sending an initial\n   AS-REQ, possibly containing other pre-authentication\
    \ data.  If the\n   KDC determines that OTP-based pre-authentication is required\
    \ and the\n   request does not contain a PA-OTP-REQUEST, then it will respond\
    \ as\n   described in Section 3.2.\n   If the client has all the necessary information,\
    \ it MAY use the\n   two-pass system by constructing a PA-OTP-REQUEST as described\
    \ in\n   Section 3.3 and including it in the initial request.\n"
- title: 3.2.  KDC Challenge
  contents:
  - "3.2.  KDC Challenge\n   If the user is required to authenticate using an OTP,\
    \ then the KDC\n   SHALL respond to the initial AS-REQ with a KRB-ERROR (as described\
    \ in\n   Section 2.2 of [RFC6113]), with a PA-OTP-CHALLENGE contained within\n\
    \   the enc-fast-rep of the armored-data of a PA-FX-FAST-REPLY encrypted\n   under\
    \ the current Armor Key as described in [RFC6113].\n   If the OTP mechanism is\
    \ to be carried out as an individual mechanism,\n   then the PA-OTP-CHALLENGE\
    \ SHALL be carried within the padata of the\n   KrbFastResponse.  Alternatively,\
    \ if the OTP mechanism is required as\n   part of an authentication set, then\
    \ the PA-OTP-CHALLENGE SHALL be\n   carried within a PA-AUTHENTICATION-SET-ELEM\
    \ as described in Section\n   5.3 of [RFC6113].\n   The PA-OTP-CHALLENGE SHALL\
    \ contain a nonce value to be returned\n   encrypted in the client's PA-OTP-REQUEST.\
    \  This nonce string MUST\n   contain a randomly chosen component at least as\
    \ long as the Armor Key\n   length (see [RFC4086] for an in-depth discussion of\
    \ randomness).  In\n   order to allow it to maintain any state necessary to verify\
    \ the\n   returned nonce, the KDC SHOULD use the mechanism described in Section\n\
    \   5.2 of [RFC6113].\n   The KDC MAY use the otp-service field to assist the\
    \ client in\n   locating the OTP token to be used by identifying the purpose of\
    \ the\n   authentication.  For example, the otp-service field could assist a\n\
    \   user in identifying the token to be used when a user has multiple OTP\n  \
    \ tokens that are used for different purposes.  If the token is a\n   connected\
    \ device, then these values SHOULD be an exact octet-level\n   match for the values\
    \ present on the target token.\n   The KDC SHALL include a sequence of one or\
    \ more otp-tokenInfo\n   elements containing information on the token or tokens\
    \ that the user\n   can use for the authentication and how the OTP value is to\
    \ be\n   generated using those tokens.  If a single otp-tokenInfo element is\n\
    \   included, then only a single token is acceptable by the KDC, and any\n   OTP\
    \ value generated by the client MUST be generated according to the\n   information\
    \ contained within that element.  If more than one\n   otp-tokenInfo element is\
    \ included, then the OTP value MUST be\n   generated according to the information\
    \ contained within one of those\n   elements.\n   The KDC MAY include the otp-vendor\
    \ field in an otp-tokenInfo to\n   identify the vendor of the token that can be\
    \ used in the\n   authentication request in order to assist the client in locating\
    \ that\n   token.\n   If the KDC is able to obtain the OTP values for the token,\
    \ then the\n   OTP value SHOULD be used in the key generation as described in\n\
    \   Section 3.6; therefore, the KDC SHOULD set the \"must-encrypt-nonce\"\n  \
    \ flag in the otp-tokenInfo.  If the KDC is unable to obtain the OTP\n   values\
    \ for the token, then the \"must-encrypt-nonce\" flag MUST NOT be\n   set.  If\
    \ the flag is not set, then the OTP value will be returned by\n   the client in\
    \ the otp-value field of the PA-OTP-REQUEST and so, if\n   returning of OTP values\
    \ in this way does not conform to KDC policy,\n   then the KDC SHOULD NOT include\
    \ the otp-tokenInfo for that token in\n   the PA-OTP-CHALLENGE.\n   If the KDC\
    \ requires that hashed OTPs be used in the key generation as\n   described in\
    \ Section 3.6 (for example, it is only able to obtain\n   hashed OTP values for\
    \ the token), then it MUST include the supported\n   hash algorithms in order\
    \ of preference in the supportedHashAlg of the\n   otp-KeyInfo and the minimum\
    \ value of the iteration count in the\n   iterationCount element.\n   Since the\
    \ OTP mechanism described in this document is replacing the\n   Reply Key, the\
    \ classic shared-key system cannot be relied upon to\n   allow the client to verify\
    \ the KDC.  Therefore, as described in\n   Section 3.4 of [RFC6113], some other\
    \ mechanism must be provided to\n   support this.  If the OTP value is used in\
    \ the Reply Key generation,\n   then the client and KDC have a shared key and\
    \ KDC-authentication is\n   provided by the KDC using the Reply Key generated\
    \ from the OTP value.\n   However, if the OTP value is sent in the otp-value element\
    \ of the\n   PA-OTP-REQUEST, then there is no such shared key and the OTP\n  \
    \ mechanism does not provide KDC-authentication.  Therefore, if the OTP\n   mechanism\
    \ is not being used in an environment where\n   KDC-authentication is being provided\
    \ by other means (e.g., by the use\n   of a host-key-based Armor Key), then the\
    \ KDC MUST NOT include any\n   otp-tokenInfo elements in the PA-OTP-CHALLENGE\
    \ that do not have the\n   \"must-encrypt-nonce\" flag set.\n   If the OTP for\
    \ a token is to be generated using a server-generated\n   challenge, then the\
    \ value of the challenge SHALL be included in the\n   otp-challenge field of the\
    \ otp-tokenInfo for that token.  If the\n   token is a connected device and the\
    \ OTP is to be generated by\n   combining the challenge with the token's current\
    \ state (e.g., time),\n   then the \"combine\" flag SHALL be set within the otp-tokenInfo\n\
    \   containing the challenge.\n   If the KDC can determine which OTP token key\
    \ (the seed value on the\n   token used to generate the OTP) is to be used, then\
    \ the otp-tokenID\n   field MAY be included in the otp-tokenInfo to pass that\
    \ value to the\n   client.\n   The otp-algID field MAY be included in an otp-tokenInfo\
    \ to identify\n   the algorithm that should be used in the OTP calculation for\
    \ that\n   token.  For example, it could be used when a user has been issued\n\
    \   with multiple tokens that support different algorithms.\n   If the KDC can\
    \ determine that an OTP token that can be used by the\n   user does not require\
    \ the client to collect a PIN, then it SHOULD set\n   the \"do-not-collect-pin\"\
    \ flag in the otp-tokenInfo representing that\n   token.  If the KDC can determine\
    \ that the token requires the client\n   to collect a PIN, then it SHOULD set\
    \ the \"collect-pin\" flag.  If the\n   KDC is unable to determine whether or\
    \ not the client should collect a\n   PIN, then the \"collect-pin\" and \"do-not-collect-pin\"\
    \ flags MUST NOT\n   be set.\n   If the KDC requires the PIN of an OTP token to\
    \ be returned to it\n   separately, then it SHOULD set the \"separate-pin-required\"\
    \ flag in\n   the otp-KeyInfo representing that token.\n   If the KDC requires\
    \ that the OTPs generated by the token have a Luhn\n   check digit appended, as\
    \ defined in [ISOIEC7812], then it MUST set\n   the \"check-digit\" flag.  This\
    \ flag only applies if the format of the\n   OTP is decimal; therefore, the otp-format\
    \ field, if present, MUST\n   have the value of \"decimal\".\n   Finally, in order\
    \ to support connected tokens that can generate OTP\n   values of varying lengths\
    \ or formats, the KDC MAY include the desired\n   otp-length and format of the\
    \ OTP in the otp-length and otp-format\n   fields of an otp-tokenInfo.\n"
- title: 3.3.  Client Response
  contents:
  - "3.3.  Client Response\n   The client response SHALL be sent to the KDC as a PA-OTP-REQUEST\n\
    \   included within the enc-fast-req of the armored-data within a\n   PA-FX-FAST-REQUEST\
    \ encrypted under the current Armor Key as described\n   in [RFC6113].\n   In\
    \ order to generate its response, the client MUST generate an OTP\n   value. \
    \ If the PA-OTP-CHALLENGE contained one or more otp-tokenInfo\n   elements, then\
    \ the OTP value MUST be based on the information\n   contained within one of those\
    \ elements.\n   The otp-service, otp-vendor, otp-tokenID, otp-length, otp-format,\
    \ and\n   otp-algID elements of the PA-OTP-CHALLENGE are provided by the KDC to\n\
    \   assist the client in locating the correct token to use, but the use\n   of\
    \ the above fields will depend on the type of token.\n   If the token is a disconnected\
    \ device, then the values of otp-service\n   and otp-vendor MAY be displayed to\
    \ the user in order to help the user\n   select the correct token, and the values\
    \ of otp-algID, otp-tokenID,\n   otp-length, and otp-format MAY be ignored.\n\
    \   If the token is a connected device, then these values, if present,\n   SHOULD\
    \ be used by the client to locate the correct token.  When the\n   token is connected,\
    \ clients MUST support matching based on a binary\n   comparison of the otp-vendor\
    \ and otp-service strings when comparing\n   the values against those present\
    \ on the token.  Clients MAY have\n   other comparisons including normalization\
    \ insensitive comparisons to\n   try and find the right token.  The values of\
    \ otp-vendor and\n   otp-service MAY be displayed to prompt the user if the correct\
    \ token\n   is not found.\n   If the \"nextOTP\" flag is set in the otp-tokenInfo\
    \ from the\n   PA-OTP-CHALLENGE, then the OTP value MUST be generated from the\
    \ next\n   token state rather than that used in the previous PA-OTP-REQUEST for\n\
    \   that token.  The \"nextOTP\" flag MUST also be set in the new\n   PA-OTP-REQUEST.\n\
    \   If the \"collect-pin\" flag is set, then the token requires a PIN to be\n\
    \   collected by the client.  If the \"do-not-collect-pin\" flag is set in\n \
    \  the otp-tokenInfo from the PA-OTP-CHALLENGE, then the token\n   represented\
    \ by the otp-tokenInfo does not require a PIN to be\n   collected by the client\
    \ as part of the OTP value.  If neither of the\n   \"collect-pin\" nor \"do-not-collect-pin\"\
    \ flags are set, then PIN\n   requirements of the token are unspecified.  If both\
    \ flags are set,\n   then the client SHALL regard the request as invalid.\n  \
    \ If the \"separate-pin-required\" flag is set, then any PIN collected by\n  \
    \ the client MUST be included as a UTF-8 string in the otp-pin of the\n   PA-OTP-REQUEST.\n\
    \   If the token is a connected device, then how the PIN is used to\n   generate\
    \ the OTP value will depend on the type of device.  However,\n   if the token\
    \ is a disconnected device, then it will depend on the\n   \"separate-pin-required\"\
    \ flag.  If the flag is not set, then the OTP\n   value MUST be generated by appending\
    \ the PIN with the value from the\n   token entered by the user and, if the flag\
    \ is set, then the OTP value\n   MUST be the value from the token.\n   The clients\
    \ SHOULD NOT normalize the PIN value or any OTP value\n   collected from the user\
    \ or returned by a connected token in any way.\n   If the \"check-digit\" flag\
    \ is set, then any OTP values SHOULD be\n   decimal and have a Luhn check digit\
    \ appended [ISOIEC7812].  If the\n   token is disconnected, then the Client MAY\
    \ ignore this flag; if the\n   token is connected, then the Client MUST enforce\
    \ it.  The Client MUST\n   regard the request as invalid, if otp-format is present\
    \ and set to\n   any value other than \"decimal\".\n   If an otp-challenge is\
    \ present in the otp-tokenInfo selected by the\n   client from the PA-OTP-CHALLENGE,\
    \ then the OTP value for the token\n   MUST be generated based on a challenge,\
    \ if the token is capable of\n   accepting a challenge.  The client MAY ignore\
    \ the provided challenge\n   if and only if the token is not capable of including\
    \ a challenge in\n   the OTP calculation.\n   If the \"combine\" flag is not set\
    \ in the otp-tokenInfo of the\n   PA-OTP-CHALLENGE, then the OTP SHALL be calculated\
    \ based only the\n   challenge and not the internal state (e.g., time or counter)\
    \ of the\n   token.  If the \"combine\" flag is set, then the OTP SHALL be\n \
    \  calculated using both the internal state and the provided challenge,\n   if\
    \ that value is obtainable by the client.  If the flag is set but\n   otp-challenge\
    \ is not present, then the client SHALL regard the\n   request as invalid.\n \
    \  If token is a connected device, then the use of the challenge will\n   depend\
    \ on the type of device but will involve passing the challenge\n   and the value\
    \ of the \"combine\" flag in a token-specific manner to the\n   token, along with\
    \ a PIN if collected and the values of otp-length and\n   otp-format if specified,\
    \ in order to obtain the OTP value.  If the\n   token is disconnected, then the\
    \ challenge MUST be displayed to the\n   user and the value of the \"combine\"\
    \ flag MAY be ignored by the\n   client.\n   If the OTP value was generated using\
    \ a challenge that was not sent by\n   the KDC, then the challenge SHALL be included\
    \ in the otp-challenge of\n   the PA-OTP-REQUEST.  If the OTP was generated by\
    \ combining a\n   challenge (either received from the KDC or generated by the\
    \ client)\n   with the token state, then the \"combine\" flag SHALL be set in\
    \ the\n   PA-OTP-REQUEST.\n   If the \"must-encrypt-nonce\" flag is set in the\
    \ otp-tokenInfo, then\n   the OTP value MUST be used to generate the Client Key\
    \ and Reply Key\n   as described in Section 3.6 and MUST NOT be included in the\
    \ otp-value\n   field of the PA-OTP-REQUEST.  If the flag is not set, then the\
    \ OTP\n   value MUST be included in the otp-value field of the PA-OTP-REQUEST\n\
    \   and MUST NOT be used in the key derivation.  In this case, the Client\n  \
    \ Key and Reply Key SHALL be the same as the Armor Key as described in\n   Section\
    \ 3.6; so, if the returning of OTP values in this way does not\n   conform to\
    \ local policy on the client (for example, if\n   KDC-Authentication is required\
    \ and is not being provided by other\n   means), then it SHOULD NOT use the token\
    \ for authentication.\n   If the supportedHashAlg and iterationCount elements\
    \ are included in\n   the otp-tokenInfo, then the client MUST use hashed OTP values\
    \ in the\n   generation of the Reply Key and Client Key as described in Section\n\
    \   3.6.  The client MUST select the first algorithm from the list that\n   it\
    \ supports and the AlgorithmIdentifer [RFC5280] selected MUST be\n   placed in\
    \ the hashAlg element of the PA-OTP-REQUEST.  However, if\n   none of the algorithm\
    \ identifiers conform to local policy\n   restrictions, then the authentication\
    \ attempt MUST NOT proceed using\n   that token.  If the value of iterationCount\
    \ does not conform to local\n   policy on the client, then the client MAY use\
    \ a larger value, but\n   MUST NOT use a lower value.  The value of the iteration\
    \ count used by\n   the client MUST be returned in the PA-OTP-REQUEST sent to\
    \ the KDC.\n   If hashed OTP values are used, then the nonce generated by the\
    \ client\n   MUST be as long as the longest key length of the symmetric key types\n\
    \   that it supports and MUST be chosen randomly (see [RFC4086]).  The\n   nonce\
    \ MUST be included in the PA-OTP-REQUEST, along with the hash\n   algorithm and\
    \ iteration count used in the nonce, hashAlg, and\n   iterationCount fields of\
    \ the PA-OTP-REQUEST.  These fields MUST NOT\n   be included if hashed OTP values\
    \ were not used.  It is RECOMMENDED\n   that the iteration count used by the client\
    \ be chosen in such a way\n   that it is computationally infeasible/unattractive\
    \ for an attacker to\n   brute-force search for the given OTP.\n   The PA-OTP-REQUEST\
    \ returned by the client SHOULD include information\n   on the generated OTP value\
    \ reported by the OTP token when available\n   to the client.  The otp-time and\
    \ otp-counter fields of the\n   PA-OTP-REQUEST SHOULD be used to return the time\
    \ and counter values\n   used by the token if available to the client.  The otp-format\
    \ field\n   MAY be used to report the format of the generated OTP.  This field\n\
    \   SHOULD be used if a token can generate OTP values in multiple\n   formats.\
    \  The otp-algID field SHOULD be used by the client to report\n   the algorithm\
    \ used in the OTP calculation, and the otp-tokenID SHOULD\n   be used to report\
    \ the identifier of the OTP token key used if the\n   information is known to\
    \ the client.\n   If the PA-OTP-REQUEST is being sent in response to a PA-OTP-CHALLENGE\n\
    \   that contained an otp-vendor field in the selected otp-tokenInfo,\n   then\
    \ the otp-vendor field of the PA-OTP-REQUEST MUST be set to the\n   same value.\
    \  If no otp-vendor field was provided by the KDC, then the\n   field SHOULD be\
    \ set to the vendor identifier of the token if known to\n   the client.\n   The\
    \ generated Client Key is used by the client to encrypt data to be\n   included\
    \ in the encData of the PA-OTP-REQUEST to allow the KDC to\n   authenticate the\
    \ user.  The key usage for this encryption is\n   KEY_USAGE_OTP_REQUEST.\n   o\
    \  If the PA-OTP-REQUEST is being generated in response to a\n      PA-OTP-CHALLENGE\
    \ returned by the KDC, then the client SHALL\n      encrypt a PA-OTP-ENC-REQUEST\
    \ containing the value of nonce from\n      the PA-OTP-CHALLENGE using the same\
    \ encryption type as the Armor\n      Key.\n   o  If the PA-OTP-REQUEST is not\
    \ in response to a PA-OTP-CHALLENGE,\n      then the client SHALL encrypt a PA-ENC-TS-ENC\
    \ containing the\n      current time as in the encrypted timestamp pre-authentication\n\
    \      mechanism [RFC4120].\n   If the client is working in two-pass mode and\
    \ so, is not responding\n   to an initial KDC challenge, then the values of the\
    \ iteration count\n   and hash algorithms cannot be obtained from that challenge.\
    \  The\n   client SHOULD use any values obtained from a previous\n   PA-OTP-CHALLENGE\
    \ or, if no values are available, it MAY use initial\n   configured values.\n"
- title: 3.4.  Verifying the Pre-Authentication Data
  contents:
  - "3.4.  Verifying the Pre-Authentication Data\n   The KDC validates the pre-authentication\
    \ data by generating the\n   Client Key and Reply Key in the same way as the client\
    \ and using the\n   generated Client Key to decrypt the value of encData from\
    \ the\n   PA-OTP-REQUEST.  The generated Reply Key is used to encrypt data in\n\
    \   the AS-REP.\n   If the otp-value field is included in the PA-OTP-REQUEST,\
    \ then the\n   KDC MUST use that value unless the OTP method is required to support\n\
    \   KDC-authentication (see Section 3.2).  If the otp-value is not\n   included\
    \ in the PA-OTP-REQUEST, then the KDC will need to generate or\n   obtain the\
    \ OTP value.\n   If the otp-pin field is present in the PA-OTP-REQUEST, then the\
    \ PIN\n   value has to be value provided by the client.  The KDC SHOULD\n   SASLPrep\
    \ (Stringprep Profile for User Names and Passwords) [RFC4013]\n   the value in\
    \ lookup mode before comparison.\n   It should be noted that it is anticipated\
    \ that, as improved string\n   comparison technologies are standardized, the processing\
    \ done by the\n   KDC will change, but efforts will be made to maintain as much\n\
    \   compatibility with SASLprep as possible.\n   If the otp-challenge field is\
    \ present, then the OTP was calculated\n   using that challenge.  If the \"combine\"\
    \ flag is also set, then the\n   OTP was calculated using the challenge and the\
    \ token's current state.\n   It is RECOMMENDED that the KDC act upon the values\
    \ of otp-time,\n   otp-counter, otp-format, otp-algID, and otp-tokenID if they\
    \ are\n   present in the PA-OTP-REQUEST.  If the KDC receives a request\n   containing\
    \ these values, but cannot act upon them, then they MAY be\n   ignored.\n   The\
    \ KDC generates the Client Key and Reply Key as described in\n   Section 3.6 from\
    \ the OTP value using the nonce, hash algorithm, and\n   iteration count if present\
    \ in the PA-OTP-REQUEST.  The KDC MUST fail\n   the request with KDC_ERR_INVALID_HASH_ALG,\
    \ if the KDC requires hashed\n   OTP values and the hashAlg field was not present\
    \ in the\n   PA-OTP-REQUEST or if the value of this field does not conform to\n\
    \   local KDC policy.  Similarly, the KDC MUST fail the request with\n   KDC_ERR_INVALID_ITERATION_COUNT,\
    \ if the value of the iterationCount\n   included in the PA-OTP-REQUEST does not\
    \ conform to local KDC policy\n   or is less than that specified in the PA-OTP-CHALLENGE.\
    \  In addition,\n   the KDC MUST fail the authentication request with\n   KDC_ERR_PIN_REQUIRED,\
    \ if it requires a separate PIN to the OTP value\n   and an otp-pin was not included\
    \ in the PA-OTP-REQUEST.  The above\n   error codes are defined as follows:\n\
    \              KDC_ERR_INVALID_HASH_ALG           94\n              KDC_ERR_INVALID_ITERATION_COUNT\
    \    95\n              KDC_ERR_PIN_REQUIRED               97\n   The generated\
    \ Client Key is then used to decrypt the encData from the\n   PA-OTP-REQUEST.\
    \  If the client response was sent as a result of a\n   PA-OTP-CHALLENGE, then\
    \ the decrypted data will be a\n   PA-OTP-ENC-REQUEST and the client authentication\
    \ MUST fail with\n   KDC_ERR_PREAUTH_FAILED if the nonce value from the PA-OTP-ENC-REQUEST\n\
    \   is not the same as the nonce value sent in the PA-OTP-CHALLENGE.  If\n   the\
    \ response was not sent as a result of a PA-OTP-CHALLENGE, then the\n   decrypted\
    \ value will be a PA-ENC-TS-ENC, and the authentication\n   process will be the\
    \ same as with classic encrypted timestamp\n   pre-authentication [RFC4120].\n\
    \   The KDC MUST fail the request with KDC_ERR_ETYPE_NOSUPP, if the\n   encryption\
    \ type used by the client in the encData does not conform to\n   KDC policy.\n\
    \   If authentication fails due to the hash algorithm, iteration count,\n   or\
    \ encryption type used by the client, then the KDC SHOULD return a\n   PA-OTP-CHALLENGE\
    \ with the required values in the error response.  If\n   the authentication fails\
    \ due to the token state on the server is no\n   longer being synchronized with\
    \ the token used, then the KDC MAY\n   return a PA-OTP-CHALLENGE with the \"nextOTP\"\
    \ flag set as described in\n   Section 2.4.\n   If, during the authentication\
    \ process, the KDC determines that the\n   user's PIN has been changed, then it\
    \ SHOULD include a\n   PA-OTP-PIN-CHANGE in the response, as described in Section\
    \ 2.3,\n   containing the new PIN value.  The KDC MAY also include the new PIN's\n\
    \   expiration time and the expiration time of the OTP account within the\n  \
    \ last-req field of the PA-OTP-PIN-CHANGE.  (These fields can be used\n   by the\
    \ KDC to handle cases where the account related to the user's\n   OTP token has\
    \ a different expiration time to the user's Kerberos\n   account.)  If the KDC\
    \ determines that the user's PIN or OTP account\n   are about to expire, it MAY\
    \ return a PA-OTP-PIN-CHANGE with that\n   information.  Finally, if the KDC determines\
    \ that the user's PIN has\n   expired, then it SHOULD return a KRB-ERROR of type\n\
    \   KDC_ERR_PIN_EXPIRED as described in Section 2.3\n"
- title: 3.5.  Confirming the Reply Key Change
  contents:
  - "3.5.  Confirming the Reply Key Change\n   If the pre-authentication data was\
    \ successfully verified, then, in\n   order to support mutual authentication,\
    \ the KDC SHALL respond to the\n   client's PA-OTP-REQUEST by using the generated\
    \ Reply Key to encrypt\n   the data in the AS-REP.  The client then uses its generated\
    \ Reply Key\n   to decrypt the encrypted data and MUST NOT continue with the\n\
    \   authentication process, if decryption is not successful.\n"
- title: 3.6.  Reply Key Generation
  contents:
  - "3.6.  Reply Key Generation\n   In order to authenticate the user, the client\
    \ and KDC need to\n   generate two encryption keys:\n   o  The Client Key to be\
    \ used by the client to encrypt and by the KDC\n      to decrypt the encData in\
    \ the PA-OTP-REQUEST.\n   o  The Reply Key to be used in the standard manner by\
    \ the KDC to\n      encrypt data in the AS-REP.\n      The method used to generate\
    \ the two keys will depend on the OTP\n      algorithm.\n   o  If the OTP value\
    \ is included in the otp-value of the PA-OTP-\n      REQUEST, then the two keys\
    \ SHALL be the same as the Armor Key\n      (defined in [RFC6113]).\n   o  If\
    \ the OTP value is not included in the otp-value of the\n      PA-OTP-REQUEST,\
    \ then the two keys SHALL be derived from the Armor\n      Key and the OTP value\
    \ as described below.\n   If the OTP value is not included in the PA-OTP-REQUEST,\
    \ then the\n   Reply Key and Client Key SHALL be generated using the KRB-FX-CF2\n\
    \   algorithm from [RFC6113] as follows:\n              Client Key = KRB-FX-CF2(K1,\
    \ K2, O1, O2)\n              Reply Key = KRB-FX-CF2(K1, K2, O3, O4)\n   The octet\
    \ string parameters, O1, O2, O3, and O4 shall be the ASCII\n   string \"OTPComb1\"\
    , \"OTPComb2\", \"OTPComb3\", and \"OTPComb4\" as shown\n   below:\n         \
    \     {0x4f, 0x54, 0x50, 0x43, 0x6f, 0x6d, 0x62, 0x31}\n              {0x4f, 0x54,\
    \ 0x50, 0x43, 0x6f, 0x6d, 0x62, 0x32}\n              {0x4f, 0x54, 0x50, 0x43,\
    \ 0x6f, 0x6d, 0x62, 0x33}\n              {0x4f, 0x54, 0x50, 0x43, 0x6f, 0x6d,\
    \ 0x62, 0x34}\n   The first input key, K1, SHALL be the Armor Key and so, as described\n\
    \   in Section 5.1 of [RFC6113], the enctypes of the generated Client Key\n  \
    \ and Reply Key will be the same as the enctype of Armor Key.  The\n   second\
    \ input key, K2, shall be derived from the OTP value using\n   string-to-key (defined\
    \ in [RFC3961]) as described below.\n   If the hash of the OTP value is to be\
    \ used, then K2 SHALL be derived\n   as follows:\n   o  An initial hash value,\
    \ H, is generated:\n            H = hash(realm|nonce|OTP)\n   Where:\n      *\
    \  \"|\" denotes concatenation.\n      *  hash is the hash algorithm selected\
    \ by the client.\n      *  realm is the name of the server's realm as carried\
    \ in the realm\n         field of the AS-REQ (not including the tag and length\
    \ from the\n         DER encoding).\n      *  nonce is the value of the random\
    \ nonce value generated by the\n         client and carried in the nonce field\
    \ of the PA-OTP-REQUEST\n         (not including the tag and length from the DER\
    \ encoding).\n      *  If the OTP format is decimal, hexadecimal, or alphanumeric,\n\
    \         then OTP is the value of the OTP generated as described in\n       \
    \  Section 3.3 with SASLprep [RFC4013] applied in lookup mode;\n         otherwise,\
    \ it is the unnormalized OTP value.\n   o  The initial hash value is then hashed\
    \ iterationCount-1 times to\n      produce a final hash value, H' (where iterationCount\
    \ is the value\n      from the PA-OTP-REQUEST).\n            H' = hash(hash(...(iterationCount-1\
    \ times)...(H)))\n   o  The value of K2 is then derived from the Base64 [RFC2045]\
    \ encoding\n      of this final hash value.\n            K2 = string-to-key(Base64(H')|\"\
    Krb-preAuth\")\n   If the hash value is not used, then K2 SHALL be derived from\
    \ the\n   base64 encoding of the OTP value.\n            K2 = string-to-key(Base64(OTP)|\"\
    Krb-preAuth\")\n   The enctype used for string-to-key SHALL be that of the Armor\
    \ Key and\n   the salt and any additional parameters for string-to-key MAY be\n\
    \   provided by the KDC in the PA-OTP-CHALLENGE.  If the salt and\n   string-to-key\
    \ parameters are not provided, then the default values\n   defined for the particular\
    \ enctype SHALL be used.\n   If the strengthen-key is present in KrbFastResponse,\
    \ then it is\n   combined with the Reply Key to generate the final AS-REQ as described\n\
    \   in [RFC6113].  The strengthen-key does not influence the Client Key.\n"
- title: 4.  OTP Kerberos Message Types
  contents:
  - '4.  OTP Kerberos Message Types

    '
- title: 4.1.  PA-OTP-CHALLENGE
  contents:
  - "4.1.  PA-OTP-CHALLENGE\n   The padata-type PA-OTP-CHALLENGE is returned by the\
    \ KDC to the client\n   in the enc-fast-rep of a PA-FX-FAST-REPLY in the PA-DATA\
    \ of a\n   KRB-ERROR when OTP pre-authentication is required.  The corresponding\n\
    \   padata-value field contains the Distinguished Encoding Rules (DER)\n   [X.680]\
    \ and [X.690] encoding of a PA-OTP-CHALLENGE containing a\n   server-generated\
    \ nonce and information for the client on how to\n   generate the OTP.\n     \
    \       PA-OTP-CHALLENGE     141\n            PA-OTP-CHALLENGE ::= SEQUENCE {\n\
    \              nonce            [0] OCTET STRING,\n              otp-service \
    \     [1] UTF8String               OPTIONAL,\n              otp-tokenInfo    [2]\
    \ SEQUENCE (SIZE(1..MAX)) OF\n                                               \
    \        OTP-TOKENINFO,\n              salt             [3] KerberosString   \
    \        OPTIONAL,\n              s2kparams        [4] OCTET STRING          \
    \   OPTIONAL,\n              ...\n            }\n            OTP-TOKENINFO ::=\
    \ SEQUENCE {\n              flags            [0] OTPFlags,\n              otp-vendor\
    \       [1] UTF8String               OPTIONAL,\n              otp-challenge  \
    \  [2] OCTET STRING (SIZE(1..MAX))\n                                         \
    \                   OPTIONAL,\n              otp-length       [3] Int32      \
    \              OPTIONAL,\n              otp-format       [4] OTPFormat       \
    \         OPTIONAL,\n              otp-tokenID      [5] OCTET STRING         \
    \    OPTIONAL,\n              otp-algID        [6] AnyURI                   OPTIONAL,\n\
    \              supportedHashAlg [7] SEQUENCE OF AlgorithmIdentifier\n        \
    \                                                    OPTIONAL,\n             \
    \ iterationCount   [8] Int32                    OPTIONAL,\n              ...\n\
    \            }\n            OTPFormat ::= INTEGER {\n              decimal(0),\n\
    \              hexadecimal(1),\n              alphanumeric(2),\n             \
    \ binary(3),\n              base64(4)\n            }\n            OTPFlags ::=\
    \ KerberosFlags\n            -- reserved(0),\n            -- nextOTP(1),\n   \
    \         -- combine(2),\n            -- collect-pin(3),\n            -- do-not-collect-pin(4),\n\
    \            -- must-encrypt-nonce (5),\n            -- separate-pin-required\
    \ (6),\n            -- check-digit (7)\n   nonce\n      A KDC-supplied nonce value\
    \ to be encrypted by the client in the\n      PA-OTP-REQUEST.  This nonce string\
    \ MUST contain a randomly chosen\n      component at least as long as the Armor\
    \ Key length.\n   otp-service\n      Use of this field is OPTIONAL, but MAY be\
    \ used by the KDC to\n      assist the client to locate the appropriate OTP tokens\
    \ to be used.\n      For example, this field could be used when a user has multiple\
    \ OTP\n      tokens for different purposes.\n   otp-tokenInfo\n      This element\
    \ MUST be included, and it is a sequence of one or more\n      OTP-TOKENINFO objects\
    \ containing information on the token or\n      tokens that the user can use for\
    \ the authentication and how the\n      OTP value is to be generated using those\
    \ tokens.  If a single\n      OTP-TOKENINFO object is included, then only a single\
    \ token is\n      acceptable by the KDC and any OTP value generated by the client\n\
    \      MUST be generated according to the information contained within\n     \
    \ that element.  If more than one OTP-TOKENINFO object is included,\n      then\
    \ the OTP value MUST be generated according to the information\n      contained\
    \ within one of those objects.\n      flags\n         If the \"nextOTP\" flag\
    \ is set, then the OTP SHALL be based on\n         the next token \"state\" rather\
    \ than the one used in the previous\n         authentication.  As an example,\
    \ for a time-based token, this\n         means the next time slot and for an event-based\
    \ token, this\n         could mean the next counter value.  If the \"nextOTP\"\
    \ flag is\n         set, then there MUST only be a single otp-tokenInfo element\
    \ in\n         the PA-OTP-CHALLENGE.\n         The \"combine\" flag controls how\
    \ the challenge included in\n         otp-challenge shall be used.  If the flag\
    \ is set, then OTP\n         SHALL be calculated using the challenge from otp-challenge\
    \ and\n         the internal token state (e.g., time or counter).  If the\n  \
    \       \"combine\" flag is not set, then the OTP SHALL be calculated\n      \
    \   based only on the challenge.  If the flag is set and otp-\n         challenge\
    \ is not present, then the request SHALL be regarded as\n         invalid.\n \
    \        If the \"do-not-collect-pin\" flag is set, then the token\n         represented\
    \ by the current otp-tokenInfo does not require a PIN\n         to be collected\
    \ as part of the OTP.  If the \"collect-pin\" flag\n         is set, then the\
    \ token requires a PIN.  If neither flag is set,\n         then whether or not\
    \ a PIN is required is unspecified.  The\n         flags are mutually exclusive\
    \ and so both flags MUST NOT be set,\n         or the client MUST regard the request\
    \ as invalid.\n         If the \"must-encrypt-nonce\" flag is set, then the OTP\
    \ value\n         MUST NOT be included in the otp-value field of the\n       \
    \  PA-OTP-REQUEST, but instead the OTP value MUST be used in the\n         generation\
    \ of the Reply Key and Client Key as described in\n         Section 3.6.\n   \
    \      If the \"separate-pin-required\" flag is set, then the PIN\n         collected\
    \ by the client SHOULD NOT be used in the generation of\n         the OTP value\
    \ and SHOULD be returned in the otp-pin field of\n         the PA-OTP-REQUEST.\n\
    \         The \"check-digit\" flag controls whether or not the OTP values\n  \
    \       generated by the token need to include a Luhn check digit\n         [ISOIEC7812].\
    \  If the token is disconnected, then the Client\n         MAY ignore this flag;\
    \ if this flag is set and the token is\n         connected, then the OTP MUST\
    \ be a decimal with a check digit\n         appended.\n      otp-vendor\n    \
    \     Use of this field is OPTIONAL, but MAY be used by the KDC to\n         identify\
    \ the vendor of the OTP token to be used.\n      otp-challenge\n         The otp-challenge\
    \ is used by the KDC to send a challenge value\n         for use in the OTP calculation.\
    \  The challenge is an OPTIONAL\n         octet string that SHOULD be uniquely\
    \ generated for each request\n         in which it is present.  When the challenge\
    \ is not present, the\n         OTP will be calculated on the current token state\
    \ only.  The\n         client MAY ignore a provided challenge if and only if the\
    \ OTP\n         token the client is interacting with is not capable of\n     \
    \    including a challenge in the OTP calculation.  In this case,\n         KDC\
    \ policies will determine whether or not to accept a provided\n         OTP value.\n\
    \      otp-length\n         Use of this field is OPTIONAL, but MAY be used by\
    \ the KDC to\n         specify the desired length of the generated OTP.  For example,\n\
    \         this field could be used when a token is capable of producing\n    \
    \     OTP values of different lengths.  If the format of the OTP is\n        \
    \ 'decimal', 'hexidecimal', or 'alphanumeric', then this value\n         indicates\
    \ the desired length in digits/characters; if the OTP\n         format is 'binary',\
    \ then this value indicates the desired\n         length in octets; and if the\
    \ OTP format is 'base64', then this\n         value indicates the desired length\
    \ of the unencoded OTP value\n         in octets.\n      otp-format\n        \
    \ Use of this field is OPTIONAL, but MAY be used by the KDC to\n         specify\
    \ the desired format of the generated OTP value.  For\n         example, this\
    \ field could be used when a token is capable of\n         producing OTP values\
    \ of different formats.\n      otp-tokenID\n         Use of this field is OPTIONAL,\
    \ but MAY be used by the KDC to\n         identify which token key should be used\
    \ for the authentication.\n         For example, this field could be used when\
    \ a user has been\n         issued multiple token keys by the same server.\n \
    \     otp-algID\n         Use of this field is OPTIONAL, but MAY be used by the\
    \ KDC to\n         identify the algorithm to use when generating the OTP.  The\n\
    \         value of this field MUST be a URI [RFC3986] and SHOULD be\n        \
    \ obtained from the Portable Symmetric Key Container (PSKC)\n         algorithm\
    \ registry [RFC6030].\n      supportedHashAlg\n         If present, then a hash\
    \ of the OTP value MUST be used in the\n         key derivation rather than the\
    \ plain text value.  Each\n         AlgorithmIdentifier identifies a hash algorithm\
    \ that is\n         supported by the KDC in decreasing order of preference.  The\n\
    \         client MUST select the first algorithm from the list that it\n     \
    \    supports.  Support for SHA-256 by both the client and KDC is\n         REQUIRED.\
    \  The AlgorithmIdentifier selected by the client MUST\n         be placed in\
    \ the hashAlg element of the PA-OTP-REQUEST.\n      iterationCount\n         The\
    \ minimum value of the iteration count to be used by the\n         client when\
    \ hashing the OTP value.  This value MUST be present\n         if supportedHashAlg\
    \ is present and otherwise MUST NOT be\n         present.  If the value of this\
    \ element does not conform to\n         local policy on the client, then the client\
    \ MAY use a larger\n         value but MUST NOT use a lower value.  The value\
    \ of the\n         iteration count used by the client MUST be returned in the\n\
    \         PA-OTP-REQUEST sent to the KDC.\n   salt\n      The salt value to be\
    \ used in string-to-key when used to calculate\n      the keys as described in\
    \ Section 3.6.\n   s2kparams\n      Any additional parameters required by string-to-key\
    \ as described\n      in Section 3.6.\n"
- title: 4.2.  PA-OTP-REQUEST
  contents:
  - "4.2.  PA-OTP-REQUEST\n   The padata-type PA-OTP-REQUEST is sent by the client\
    \ to the KDC in\n   the KrbFastReq padata of a PA-FX-FAST-REQUEST that is included\
    \ in the\n   PA-DATA of an AS-REQ.  The corresponding padata-value field contains\n\
    \   the DER encoding of a PA-OTP-REQUEST.\n   The message contains pre-authentication\
    \ data encrypted by the client\n   using the generated Client Key and optional\
    \ information on how the\n   OTP was generated.  It may also, optionally, contain\
    \ the generated\n   OTP value.\n            PA-OTP-REQUEST     142\n         \
    \   PA-OTP-REQUEST ::= SEQUENCE {\n              flags          [0]  OTPFlags,\n\
    \              nonce          [1]  OCTET STRING                OPTIONAL,\n   \
    \           encData        [2]  EncryptedData,\n                             \
    \    -- PA-OTP-ENC-REQUEST or PA-ENC-TS-ENC\n                                \
    \ -- Key usage of KEY_USAGE_OTP_REQUEST\n              hashAlg        [3]  AlgorithmIdentifier\
    \         OPTIONAL,\n              iterationCount [4]  Int32                 \
    \      OPTIONAL,\n              otp-value      [5]  OCTET STRING             \
    \   OPTIONAL,\n              otp-pin        [6]  UTF8String                  OPTIONAL,\n\
    \              otp-challenge  [7]  OCTET STRING (SIZE(1..MAX)) OPTIONAL,\n   \
    \           otp-time       [8]  KerberosTime                OPTIONAL,\n      \
    \        otp-counter    [9]  OCTET STRING                OPTIONAL,\n         \
    \     otp-format     [10] OTPFormat                   OPTIONAL,\n            \
    \  otp-tokenID    [11] OCTET STRING                OPTIONAL,\n              otp-algID\
    \      [12] AnyURI                      OPTIONAL,\n              otp-vendor  \
    \   [13] UTF8String                  OPTIONAL,\n              ...\n          \
    \  }\n            KEY_USAGE_OTP_REQUEST  45\n            PA-OTP-ENC-REQUEST ::=\
    \ SEQUENCE {\n               nonce     [0] OCTET STRING,\n               ...\n\
    \            }\n   flags\n      This field MUST be present.\n      If the \"nextOTP\"\
    \ flag is set, then the OTP was calculated based on\n      the next token \"state\"\
    \ rather than the current one.  This flag\n      MUST be set if and only if it\
    \ was set in a corresponding\n      PA-OTP-CHALLENGE.\n      If the \"combine\"\
    \ flag is set, then the OTP was calculated based on\n      a challenge and the\
    \ token state.\n      No other OTPFlag bits are applicable and MUST be ignored\
    \ by the\n      KDC.\n   nonce\n      This field MUST be present if a hashed OTP\
    \ value was used as input\n      to string-to-key (see Section 3.6) and MUST NOT\
    \ be present\n      otherwise.  If present, it MUST contain the nonce value generated\n\
    \      by the client and used in the generation of hashed OTP values as\n    \
    \  described in Section 3.6.  This nonce string MUST be as long as\n      the\
    \ longest key length of the symmetric key types that the client\n      supports\
    \ and MUST be chosen randomly.\n   encData\n      This field MUST be present and\
    \ MUST contain the pre-authentication\n      data encrypted under the Client Key\
    \ with a key usage of\n      KEY_USAGE_OTP_REQUEST.  If the PA-OTP-REQUEST is\
    \ sent as a result\n      of a PA-OTP-CHALLENGE, then this MUST contain a PA-OTP-ENC-REQUEST\n\
    \      with the nonce from the PA-OTP-CHALLENGE.  If no challenge was\n      received,\
    \ then this MUST contain a PA-ENC-TS-ENC.\n   hashAlg\n      This field MUST be\
    \ present if a hashed OTP value was used as input\n      to string-to-key (see\
    \ Section 3.6) and MUST NOT be present\n      otherwise.  If present, it MUST\
    \ contain the AlgorithmIdentifier of\n      the hash algorithm used.  If the PA-OTP-REQUEST\
    \ is sent as a\n      result of a PA-OTP-CHALLENGE, then the AlgorithmIdentifer\
    \ MUST be\n      the first one supported by the client from the supportedHashAlg\
    \ of\n      the PA-OTP-CHALLENGE.\n   iterationCount\n      This field MUST be\
    \ present if a hashed OTP value was used as input\n      to string-to-key (see\
    \ Section 3.6) and MUST NOT be present\n      otherwise.  If present, it MUST\
    \ contain the iteration count used\n      when hashing the OTP value.  If the\
    \ PA-OTP-REQUEST is sent as a\n      result of a PA-OTP-CHALLENGE, then the value\
    \ MUST NOT be less that\n      specified in the PA-OTP-CHALLENGE.\n   otp-value\n\
    \      The generated OTP value.  This value MUST NOT be present if the\n     \
    \ \"must-encrypt-nonce\" flag was set in the PA-OTP-CHALLENGE.\n   otp-pin\n \
    \     The OTP PIN value entered by the user.  This value MUST NOT be\n      present\
    \ unless the \"separate-pin-required\" flag was set in the\n      PA-OTP-CHALLENGE.\n\
    \   otp-challenge\n      Value used by the client in the OTP calculation.  It\
    \ MUST be sent\n      to the KDC if and only if the value would otherwise be unknown\
    \ to\n      the KDC (for example, the token- or client-modified or generated\n\
    \      challenge).\n   otp-time\n      This field MAY be included by the client\
    \ to carry the time value\n      as reported by the OTP token.  Use of this element\
    \ is OPTIONAL,\n      but it MAY be used by a client to simplify the OTP calculations\n\
    \      carried out by the KDC.  It is RECOMMENDED that the KDC act upon\n    \
    \  this value if it is present in the request and it is capable of\n      using\
    \ it in the generation of the OTP value.\n   otp-counter\n      This field MAY\
    \ be included by the client to carry the token\n      counter value, as reported\
    \ by the OTP token.  Use of this element\n      is OPTIONAL, but it MAY be used\
    \ by a client to simplify the OTP\n      calculations carried out by the KDC.\
    \  It is RECOMMENDED that the\n      KDC act upon this value if it is present\
    \ in the request and it is\n      capable of using it in the generation of the\
    \ OTP value.\n   otp-format\n      This field MAY be used by the client to send\
    \ the format of the\n      generated OTP as reported by the OTP token.  Use of\
    \ this element\n      is OPTIONAL, but it MAY be used by the client to simplify\
    \ the OTP\n      calculations carried out by the KDC.  It is RECOMMENDED that\
    \ the\n      KDC act upon this value, if it is present in the request and it is\n\
    \      capable of using it in the generation of the OTP value.\n   otp-tokenID\n\
    \      This field MAY be used by the client to send the identifier of the\n  \
    \    token key used, as reported by the OTP token.  Use of this field\n      is\
    \ OPTIONAL, but MAY be used by the client to simplify the\n      authentication\
    \ process by identifying a particular token key\n      associated with the user.\
    \  It is RECOMMENDED that the KDC act upon\n      this value, if it is present\
    \ in the request and it is capable of\n      using it in the generation of the\
    \ OTP value.\n   otp-algID\n      This field MAY be used by the client to send\
    \ the identifier of the\n      OTP algorithm used, as reported by the OTP token.\
    \  Use of this\n      element is OPTIONAL, but it MAY be used by the client to\
    \ simplify\n      the OTP calculations carried out by the KDC.  It is RECOMMENDED\n\
    \      that the KDC act upon this value, if it is present in the request\n   \
    \   and it is capable of using it in the generation of the OTP value.\n      The\
    \ value of this field MUST be a URI [RFC3986] and SHOULD be\n      obtained from\
    \ the PSKC algorithm registry [RFC6030].\n   otp-vendor\n      If the PA-OTP-REQUEST\
    \ is being sent in response to a\n      PA-OTP-CHALLENGE that contained an otp-vendor\
    \ field in the\n      selected otp-tokenInfo, then this field MUST be set to the\
    \ same\n      value; otherwise, this field SHOULD be set to the vendor\n     \
    \ identifier of the token, if known to the client.  It is\n      RECOMMENDED that\
    \ the KDC act upon this value if it is present in\n      the request and it is\
    \ capable of using it in the generation of the\n      OTP value.\n"
- title: 4.3.  PA-OTP-PIN-CHANGE
  contents:
  - "4.3.  PA-OTP-PIN-CHANGE\n   The padata-type PA-OTP-PIN-CHANGE is returned by\
    \ the KDC in the\n   enc-fast-rep of a PA-FX-FAST-REPLY in the AS-REP if the user\
    \ must\n   change their PIN, if the user's PIN has been changed, or to notify\n\
    \   the user of the PIN's expiry time.\n   The corresponding padata-value field\
    \ contains the DER encoding of a\n   PA-OTP-PIN-CHANGE.\n            PA-OTP-PIN-CHANGE\
    \     144\n            PA-OTP-PIN-CHANGE ::= SEQUENCE {\n              flags \
    \    [0] PinFlags,\n              pin       [1] UTF8String OPTIONAL,\n       \
    \       minLength [2] INTEGER    OPTIONAL,\n              maxLength [3] INTEGER\
    \    OPTIONAL,\n              last-req  [4] LastReq    OPTIONAL,\n           \
    \   format    [5] OTPFormat  OPTIONAL,\n              ...\n            }\n   \
    \         PinFlags ::= KerberosFlags\n              -- reserved(0),\n        \
    \      -- systemSetPin(1),\n              -- mandatory(2)\n   flags\n      The\
    \ \"systemSetPin\" flag is used to indicate the type of PIN change\n      that\
    \ is taking place.  If the flag is set, then the user's PIN has\n      been changed\
    \ for the user by the system.  If the flag is not set,\n      then the user's\
    \ PIN needs to be changed by the user.\n      If the \"systemSetPin\" flag is\
    \ not set and the \"mandatory\" flag is\n      set, then user PIN change is required\
    \ before the next\n      authentication using the current OTP token.  If the \"\
    mandatory\"\n      flag is not set, then the user PIN change is optional.  If\
    \ the\n      \"systemSetPin\" flag is set, then the \"mandatory\" flag has no\n\
    \      meaning and SHOULD be ignored by the client.\n   pin\n      The pin field\
    \ is used to carry a new PIN value.  If the\n      \"systemSetPin\" flag is set,\
    \ then the pin field is used to carry\n      the new PIN value set for the user\
    \ and MUST be present.  If the\n      \"systemSetPin\" flag is not set, then use\
    \ of this field is OPTIONAL\n      and MAY be used to carry a system-generated\
    \ PIN that MAY be used\n      by the user when changing the PIN.\n   minLength\
    \ and maxLength\n      Use of the minLength and maxLength fields is OPTIONAL.\
    \  If the\n      \"systemSetPin\" flag is not set, then these fields MAY be included\n\
    \      to pass restrictions on the size of the user-selected PIN.\n   last-req\n\
    \      Use of the last-req field (as defined in Section 5.4.2 of\n      [RFC4120]))\
    \ is OPTIONAL, but MAY be included with an lr-type of 6\n      to carry PIN expiration\
    \ information.\n      *  If the \"systemSetPin\" flag is set, then the expiration\
    \ time\n         MUST be that of the new system-set PIN.\n      *  If the \"systemSetPin\"\
    \ flag is not set, then the expiration time\n         MUST be that of the current\
    \ PIN of the token used in the\n         authentication.\n      The element MAY\
    \ also be included with an lr-type of 7 to indicate\n      when the OTP account\
    \ will expire.\n   format\n      The format element MAY be included by the KDC\
    \ to carry format\n      restrictions on the new PIN.\n      *  If the \"systemSetPin\"\
    \ flag is set, then the element MUST\n         describe the format of the new\
    \ system-generated PIN.\n      *  If the \"systemSetPin\" flag is not set, then\
    \ the element MUST\n         describe restrictions on any new user-generated PIN.\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   The OTP algorithm identifier URIs used as otp-algID\
    \ values in the\n   PA-OTP-CHALLENGE described in Section 4.1 and the PA-OTP-REQUEST\n\
    \   described in Section 4.2 have been registered in the \"Algorithm URI\n   Registry\
    \ and Related PSKC Profiles\" registry [RFC6030].\n   The following pre-authentication\
    \ types are defined in this document:\n            PA-OTP-CHALLENGE          \
    \ 141\n            PA-OTP-REQUEST             142\n            PA-OTP-PIN-CHANGE\
    \          144\n   Note that PA-OTP-CONFIRM (143) has been marked as OBSOLETE\
    \ per this\n   document.\n   These values are currently registered in a registry\
    \ created by\n   [RFC6113], but the entries have been updated to refer to this\n\
    \   document.\n   The following error codes and key usage values are defined in\
    \ this\n   document:\n            KDC_ERR_INVALID_HASH_ALG           94\n    \
    \        KDC_ERR_INVALID_ITERATION_COUNT    95\n            KDC_ERR_PIN_EXPIRED\
    \                96\n            KDC_ERR_PIN_REQUIRED               97\n     \
    \       KEY_USAGE_OTP_REQUEST              45\n   These values are currently not\
    \ managed by IANA and have not been\n   accounted for.  There is currently work\
    \ in progress [LHA10] to define\n   IANA registries and a registration process\
    \ for these values.\n"
- title: 6.  Security Considerations
  contents:
  - '6.  Security Considerations

    '
- title: 6.1.  Man-in-the-Middle Attacks
  contents:
  - "6.1.  Man-in-the-Middle Attacks\n   In the system described in this document,\
    \ the OTP pre-authentication\n   protocol is tunneled within the FAST Armor channel\
    \ provided by the\n   pre-authentication framework.  As described in [ASNINY02],\
    \ tunneled\n   protocols are potentially vulnerable to man-in-the-middle (MITM)\n\
    \   attacks if the outer tunnel is compromised, and it is generally\n   considered\
    \ good practice in such cases to bind the inner encryption\n   to the outer tunnel.\n\
    \   In order to mitigate against such attacks, the proposed system uses\n   the\
    \ outer Armor Key in the derivation of the inner Client and Reply\n   keys and\
    \ so achieves crypto-binding to the outer channel.\n   As described in Section\
    \ 5.4 of [RFC6113], FAST can use an anonymous\n   Ticket-Granting Ticket (TGT)\
    \ obtained using anonymous Public Key\n   Cryptography for Initial Authentication\
    \ in Kerberos (PKINIT)\n   [RFC6112] [RFC4556] as the Armor Key.  However, the\
    \ current anonymous\n   PKINIT proposal is open to MITM attacks since the attacker\n\
    \   can choose a session key such that the session key between the MITM\n   and\
    \ the real KDC is the same as the session key between the client\n   and the MITM.\n\
    \   As described in Section 3.6, if the OTP value is not being sent to\n   the\
    \ KDC, then the Armor Key is used along with the OTP value in the\n   generation\
    \ of the Client Key and Reply Key.  If the Armor Key is\n   known, then the only\
    \ entropy remaining in the key generation is\n   provided by the OTP value.  If\
    \ the OTP algorithm requires that the\n   OTP value be sent to the KDC, then it\
    \ is sent encrypted within the\n   tunnel provided by the FAST Armor and so, is\
    \ exposed to the attacker\n   if the attacker has the Armor Key.\n   Therefore,\
    \ unless the identity of the KDC has been verified,\n   anonymous PKINIT SHALL\
    \ NOT be used with OTP algorithms that require\n   the OTP value to be sent to\
    \ the KDC.  In addition, the security\n   considerations should be carefully considered\
    \ before anonymous PKINIT\n   is used with other algorithms such as those with\
    \ short OTP values.\n   Careful consideration should also be made if host key\
    \ armor is used\n   to provide the KDC-authentication facility with OTP algorithms\
    \ where\n   the OTP value is sent within the otp-value field of the\n   PA-OTP-REQUEST\
    \ since compromised host keys would allow an attacker to\n   impersonate the KDC.\n"
- title: 6.2.  Reflection
  contents:
  - "6.2.  Reflection\n   The four-pass system described above is a challenge-response\n\
    \   protocol, and such protocols are potentially vulnerable to reflection\n  \
    \ attacks.  No such attacks are known at this point, but to help\n   mitigate\
    \ against such attacks, the system uses different keys to\n   encrypt the client\
    \ and server nonces.\n"
- title: 6.3.  Denial-of-Service Attacks
  contents:
  - "6.3.  Denial-of-Service Attacks\n   The protocol supports the use of an iteration\
    \ count in the generation\n   of the Client and Reply keys, and the client can\
    \ send the number of\n   iterations used as part of the PA-OTP-REQUEST.  This\
    \ could open the\n   KDC up to a denial-of-service attack if a large value for\
    \ the\n   iteration count was specified by the attacker.  It is therefore,\n \
    \  particularly important that, as described in Section 3.4, the KDC\n   reject\
    \ any authentication requests where the iteration count is above\n   a maximum\
    \ value specified by local policy.\n"
- title: 6.4.  Replay
  contents:
  - "6.4.  Replay\n   In the four-pass version of this protocol, the client encrypts\
    \ a\n   KDC-generated nonce, so replay can be detected by the KDC.  The\n   two-pass\
    \ version of the protocol does not involve a server nonce; the\n   client instead\
    \ encrypts a timestamp, and therefore is not protected\n   from replay in this\
    \ way, but it will instead require some other\n   mechanism, such as an OTP-server-based\
    \ system or a timestamp-based\n   replay cache on the KDC.\n   As described in\
    \ Section 5.2 of [RFC6113], a client cannot be certain\n   that it will use the\
    \ same KDC for all messages in a conversation.\n   Therefore, the client cannot\
    \ assume that the PA-OTP-REQUEST will be\n   sent to the same KDC that issued\
    \ the PA-OTP-CHALLENGE.  In order to\n   support this, a KDC implementing this\
    \ protocol requires a means of\n   sharing session state.  However, doing this\
    \ does introduce the\n   possibility of a replay attack where the same response\
    \ is sent to\n   multiple KDCs.\n   In the case of time- or event-based tokens\
    \ or server-generated\n   challenges, protection against replay may be provided\
    \ by the OTP\n   server being used if that server is capable of keeping track\
    \ of the\n   last used value.  This protection therefore relies upon the\n   assumption\
    \ that the OTP server being used in this protocol is either\n   not redundant\
    \ or involves a commit protocol to synchronize between\n   replicas.  If this\
    \ does not hold for an OTP server being used, then\n   the system may be vulnerable\
    \ to replay attacks.\n   However, OTP servers may not be able to detect replay\
    \ of OTPs\n   generated using only a client-generated challenge; since, the KDC\n\
    \   would not be able to detect replay in two-pass mode, it is\n   recommended\
    \ that the use of OTPs generated from only a\n   client-generated challenge (that\
    \ is, not in combination with some\n   other factor such as time) should not be\
    \ supported in two-pass mode.\n"
- title: 6.5.  Brute-Force Attack
  contents:
  - "6.5.  Brute-Force Attack\n   A compromised or hostile KDC may be able to obtain\
    \ the OTP value used\n   by the client via a brute-force attack.  If the OTP value\
    \ is short,\n   then the KDC could iterate over the possible OTP values until\
    \ a\n   Client Key is generated that can decrypt the encData sent in the\n   PA-OTP-REQUEST.\n\
    \   As described in Section 3.6, an iteration count can be used in the\n   generation\
    \ of the Client Key and the value of the iteration count can\n   be controlled\
    \ by local client policy.  Use of this iteration count\n   can make it computationally\
    \ infeasible/unattractive for an attacker\n   to brute-force search for the given\
    \ OTP within the lifetime of that\n   OTP.\n   If PINs contain international characters,\
    \ similar looking or similar\n   functioning characters may be mapped together.\
    \  For example, the\n   combined and decomposed forms of accented characters will\
    \ typically\n   be treated the same.  Users who attempt to exploit artifacts of\n\
    \   international characters to improve the strength of their PINs may\n   experience\
    \ false positives in the sense that PINs they intended to be\n   distinct are\
    \ not actually distinct.  This decision was made in order\n   to improve usability\
    \ across the widest variety of input methods.\n   Users can choose other methods\
    \ to add strength to PINs.\n"
- title: 6.6.  FAST Facilities
  contents:
  - "6.6.  FAST Facilities\n   The secret used to generate the OTP is known only to\
    \ the client and\n   the KDC, so successful decryption of the encrypted nonce\
    \ by the KDC\n   authenticates the user.  If the OTP value is used in the Reply\
    \ Key\n   generation, then successful decryption of the encrypted nonce by the\n\
    \   client proves that the expected KDC replied.  The Reply Key is\n   replaced\
    \ by either a key generated from the OTP and Armor Key or by\n   the Armor Key.\
    \  This FAST factor therefore, provides the following\n   facilities: client-authentication,\
    \ replacing-reply-key, and,\n   depending on the OTP algorithm, KDC-authentication.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   Many significant contributions were made to this document\
    \ by RSA\n   employees, but special thanks go to Magnus Nystrom, John Linn,\n\
    \   Richard Zhang, Piers Bowness, Robert Philpott, Robert Polansky, and\n   Boris\
    \ Khoutorski.\n   Many valuable suggestions were also made by members of the Kerberos\n\
    \   Working Group, but special thanks go to Larry Zhu, Jeffrey Hutzelman,\n  \
    \ Tim Alsop, Henry Hotz, Nicolas Williams, Sam Hartman, Frank Cusak,\n   Simon\
    \ Josefsson, Greg Hudson, and Linus Nordberg.\n   I would also like to thank Tim\
    \ Alsop and Srinivas Cheruku of\n   CyberSafe for many valuable review comments.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [ISOIEC7812] ISO, \"ISO/IEC 7812-1:2006 Identification\
    \ cards --\n                Identification of issuers -- Part 1: Numbering system\"\
    ,\n                October 2006, <http://www.iso.org/iso/iso_catalogue/\n    \
    \            catalogue_tc/catalogue_detail.htm?csnumber=39698>.\n   [RFC2045]\
    \    Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n             \
    \   Extensions (MIME) Part One: Format of Internet Message\n                Bodies\"\
    , RFC 2045, November 1996.\n   [RFC2119]    Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3961]    Raeburn, K., \"Encryption and Checksum Specifications\
    \ for\n                Kerberos 5\", RFC 3961, February 2005.\n   [RFC3986]  \
    \  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n               \
    \ Resource Identifier (URI): Generic Syntax\", STD 66, RFC\n                3986,\
    \ January 2005.\n   [RFC4013]    Zeilenga, K., \"SASLprep: Stringprep Profile\
    \ for User\n                Names and Passwords\", RFC 4013, February 2005.\n\
    \   [RFC4086]    Eastlake 3rd, D., Schiller, J., and S. Crocker,\n           \
    \     \"Randomness Requirements for Security\", BCP 106, RFC\n               \
    \ 4086, June 2005.\n   [RFC4120]    Neuman, C., Yu, T., Hartman, S., and K. Raeburn,\
    \ \"The\n                Kerberos Network Authentication Service (V5)\", RFC 4120,\n\
    \                July 2005.\n   [RFC4556]    Zhu, L. and B. Tung, \"Public Key\
    \ Cryptography for\n                Initial Authentication in Kerberos (PKINIT)\"\
    , RFC 4556,\n                June 2006.\n   [RFC5280]    Cooper, D., Santesson,\
    \ S., Farrell, S., Boeyen, S.,\n                Housley, R., and W. Polk, \"Internet\
    \ X.509 Public Key\n                Infrastructure Certificate and Certificate\
    \ Revocation\n                List (CRL) Profile\", RFC 5280, May 2008.\n   [RFC6112]\
    \    Zhu, L., Leach, P., and S. Hartman, \"Anonymity Support\n               \
    \ for Kerberos\", RFC 6112, April 2011.\n   [RFC6113]    Hartman, S. and L. Zhu,\
    \ \"A Generalized Framework for\n                Kerberos Pre-Authentication\"\
    , RFC 6113, April 2011.\n   [X.680]      ITU-T, \"Recommendation X.680 (2002)\
    \ | ISO/IEC\n                8824-1:2002, Information technology - Abstract Syntax\n\
    \                Notation One (ASN.1): Specification of basic notation.\",\n \
    \               July 2002.\n   [X.690]      ITU-T, \"Recommendation X.690 (2008)\
    \ | ISO/IEC\n                8825-1:2008, X.690 : Information technology - ASN.1\n\
    \                encoding rules: Specification of Basic Encoding Rules\n     \
    \           (BER), Canonical Encoding Rules (CER) and Distinguished\n        \
    \        Encoding Rules (DER)\", December 2008.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [ASNINY02]   Asokan, N., Niemi, V., and K. Nyberg,\
    \ \"Man-in-the-Middle\n                in Tunneled Authentication Protocols\"\
    , Cryptology ePrint\n                Archive Report 2002/163, November 2002.\n\
    \   [HORENEZ004] Horstein, K., Renard, K., Neuman, C., and G. Zorn,\n        \
    \        \"Integrating Single-use Authentication Mechanisms with\n           \
    \     Kerberos\", Work in Progress, July 2004.\n   [LHA10]      Hornquist Astrand,\
    \ L., \"Kerberos number registry to\n                IANA\", Work in Progress,\
    \ March 2010.\n   [RFC2289]    Haller, N., Metz, C., Nesser, P., and M. Straw,\
    \ \"A\n                One-Time Password System\", STD 61, RFC 2289, February\n\
    \                1998.\n   [RFC2808]    Nystrom, M., \"The SecurID(r) SASL Mechanism\"\
    , RFC 2808,\n                April 2000.\n   [RFC4226]    M'Raihi, D., Bellare,\
    \ M., Hoornaert, F., Naccache, D.,\n                and O. Ranen, \"HOTP: An HMAC-Based\
    \ One-Time Password\n                Algorithm\", RFC 4226, December 2005.\n \
    \  [RFC6030]    Hoyer, P., Pei, M., and S. Machani, \"Portable Symmetric\n   \
    \             Key Container (PSKC)\", RFC 6030, October 2010.\n"
- title: Appendix A.  ASN.1 Module
  contents:
  - "Appendix A.  ASN.1 Module\n   OTPKerberos\n   DEFINITIONS IMPLICIT TAGS ::=\n\
    \   BEGIN\n   IMPORTS\n          KerberosTime, KerberosFlags, EncryptionKey, Int32,\n\
    \          EncryptedData, LastReq, KerberosString\n          FROM KerberosV5Spec2\
    \ {iso(1) identified-organization(3)\n                                dod(6) internet(1)\
    \ security(5)\n                                kerberosV5(2) modules(4) krb5spec2(2)}\n\
    \                                -- as defined in RFC 4120.\n          AlgorithmIdentifier\n\
    \          FROM PKIX1Explicit88 { iso (1) identified-organization (3)\n      \
    \                           dod (6) internet (1)\n                           \
    \      security (5) mechanisms (5) pkix (7)\n                                \
    \ id-mod (0) id-pkix1-explicit (18) };\n                                 -- As\
    \ defined in RFC 5280.\n          PA-OTP-CHALLENGE ::= SEQUENCE {\n          \
    \  nonce            [0] OCTET STRING,\n            otp-service      [1] UTF8String\
    \               OPTIONAL,\n            otp-tokenInfo    [2] SEQUENCE (SIZE(1..MAX))\
    \ OF\n                                                     OTP-TOKENINFO,\n  \
    \          salt             [3] KerberosString           OPTIONAL,\n         \
    \   s2kparams        [4] OCTET STRING             OPTIONAL,\n            ...\n\
    \          }\n          OTP-TOKENINFO ::= SEQUENCE {\n            flags      \
    \      [0] OTPFlags,\n            otp-vendor       [1] UTF8String            \
    \   OPTIONAL,\n            otp-challenge    [2] OCTET STRING (SIZE(1..MAX))\n\
    \                                                          OPTIONAL,\n       \
    \     otp-length       [3] Int32                    OPTIONAL,\n            otp-format\
    \       [4] OTPFormat                OPTIONAL,\n            otp-tokenID      [5]\
    \ OCTET STRING             OPTIONAL,\n            otp-algID        [6] AnyURI\
    \                   OPTIONAL,\n            supportedHashAlg [7] SEQUENCE OF AlgorithmIdentifier\n\
    \                                                          OPTIONAL,\n       \
    \     iterationCount   [8] Int32                    OPTIONAL,\n            ...\n\
    \          }\n          OTPFormat ::= INTEGER {\n            decimal(0),\n   \
    \         hexadecimal(1),\n            alphanumeric(2),\n            binary(3),\n\
    \            base64(4)\n          }\n          OTPFlags ::= KerberosFlags\n  \
    \        -- reserved(0),\n          -- nextOTP(1),\n          -- combine(2),\n\
    \          -- collect-pin(3),\n          -- do-not-collect-pin(4),\n         \
    \ -- must-encrypt-nonce (5),\n          -- separate-pin-required (6),\n      \
    \    -- check-digit (7)\n          PA-OTP-REQUEST ::= SEQUENCE {\n           \
    \ flags          [0]  OTPFlags,\n            nonce          [1]  OCTET STRING\
    \                OPTIONAL,\n            encData        [2]  EncryptedData,\n \
    \                              -- PA-OTP-ENC-REQUEST or PA-ENC-TS-ENC\n      \
    \                         -- Key usage of KEY_USAGE_OTP_REQUEST\n            hashAlg\
    \        [3]  AlgorithmIdentifier         OPTIONAL,\n            iterationCount\
    \ [4]  Int32                       OPTIONAL,\n            otp-value      [5] \
    \ OCTET STRING                OPTIONAL,\n            otp-pin        [6]  UTF8String\
    \                  OPTIONAL,\n            otp-challenge  [7]  OCTET STRING (SIZE(1..MAX))\
    \ OPTIONAL,\n            otp-time       [8]  KerberosTime                OPTIONAL,\n\
    \            otp-counter    [9]  OCTET STRING                OPTIONAL,\n     \
    \       otp-format     [10] OTPFormat                   OPTIONAL,\n          \
    \  otp-tokenID    [11] OCTET STRING                OPTIONAL,\n            otp-algID\
    \      [12] AnyURI                      OPTIONAL,\n            otp-vendor    \
    \ [13] UTF8String                  OPTIONAL,\n            ...\n          }\n \
    \         PA-OTP-ENC-REQUEST ::= SEQUENCE {\n            nonce     [0] OCTET STRING,\n\
    \            ...\n          }\n          PA-OTP-PIN-CHANGE ::= SEQUENCE {\n  \
    \          flags     [0] PinFlags,\n            pin       [1] UTF8String OPTIONAL,\n\
    \            minLength [2] INTEGER    OPTIONAL,\n            maxLength [3] INTEGER\
    \    OPTIONAL,\n            last-req  [4] LastReq    OPTIONAL,\n            format\
    \    [5] OTPFormat  OPTIONAL,\n            ...\n          }\n          PinFlags\
    \ ::= KerberosFlags\n          -- reserved(0),\n          -- systemSetPin(1),\n\
    \          -- mandatory(2)\n          AnyURI ::= UTF8String\n             (CONSTRAINED\
    \ BY {\n             -- MUST be a valid URI in accordance with IETF RFC 2396\n\
    \             })\n      END\n"
- title: Appendix B.  Examples of OTP Pre-Authentication Exchanges
  contents:
  - "Appendix B.  Examples of OTP Pre-Authentication Exchanges\n   This section is\
    \ non-normative.\n"
- title: B.1.  Four-Pass Authentication
  contents:
  - "B.1.  Four-Pass Authentication\n   In this mode, the client sends an initial\
    \ AS-REQ to the KDC that does\n   not contain a PA-OTP-REQUEST and the KDC responds\
    \ with a KRB-ERROR\n   containing a PA-OTP-CHALLENGE.\n   In this example, the\
    \ user has been issued with a connected,\n   time-based token, and the KDC requires\
    \ hashed OTP values in the key\n   generation with SHA-384 as the preferred hash\
    \ algorithm and a minimum\n   of 1024 iterations.  The local policy on the client\
    \ supports SHA-256\n   and requires 100,000 iterations of the hash of the OTP\
    \ value.\n   The basic sequence of steps involved is as follows:\n   1.   The\
    \ client obtains the user name of the user.\n   2.   The client sends an initial\
    \ AS-REQ to the KDC that does not\n        contain a PA-OTP-REQUEST.\n   3.  \
    \ The KDC determines that the user identified by the AS-REQ\n        requires\
    \ OTP authentication.\n   4.   The KDC constructs a PA-OTP-CHALLENGE as follows:\n\
    \        nonce\n           A randomly generated value.\n        otp-service\n\
    \           A string that can be used by the client to assist the user in\n  \
    \         locating the correct token.\n        otp-tokenInfo\n           Information\
    \ about how the OTP should be generated from the\n           token.\n        flags\n\
    \           must-encrypt-nonce and collect-pin bits set\n        supportedHashAlg\n\
    \           AlgorithmIdentifiers for SHA-384, SHA-256, and SHA-1\n        iterationCount\n\
    \           1024\n   5.   The KDC returns a KRB-ERROR with an error code of\n\
    \        KDC_ERR_PREAUTH_REQUIRED and the PA-OTP-CHALLENGE in the e-data.\n  \
    \ 6.   The client displays the value of otp-service and prompts the\n        user\
    \ to connect the token.\n   7.   The client collects a PIN from the user.\n  \
    \ 8.   The client obtains the current OTP value from the token using\n       \
    \ the PIN and records the time as reported by the token.\n   9.   The client generates\
    \ the Client Key and Reply Key as described\n        in Section 3.6 using SHA-256\
    \ from the list of algorithms sent by\n        the KDC, the iteration count of\
    \ 100,000 as required by local\n        policy, and a randomly generated nonce.\n\
    \   10.  The client constructs a PA-OTP-REQUEST as follows:\n        flags\n \
    \          0\n        nonce\n           The randomly generated value.\n      \
    \  encData\n           An EncryptedData containing a PA-OTP-ENC-REQUEST encrypted\n\
    \           under the Client Key with a key usage of\n           KEY_USAGE_OTP_REQUEST\
    \ and the encryption type of the Armor\n           Key.  The PA-OTP-ENC-REQUEST\
    \ contains the nonce from the\n           PA-OTP-CHALLENGE.\n        hashAlg\n\
    \           SHA-256\n        iterationCount\n           100,000\n        otp-time\n\
    \           The time used in the OTP calculation as reported by the OTP\n    \
    \       token.\n   11.  The client encrypts the PA-OTP-REQUEST within the enc-fast-req\n\
    \        of a PA-FX-FAST-REQUEST.\n   12.  The client sends an AS-REQ to the KDC\
    \ containing the\n        PA-FX-FAST-REQUEST within the padata.\n   13.  The KDC\
    \ validates the padata in the PA-OTP-REQUEST by performing\n        the following\
    \ steps:\n        *  Generates the Client Key and Reply Key from the OTP value\
    \ for\n           the user identified in the AS-REQ, using an iteration count\n\
    \           of 100,000, a hash algorithm of SHA-256, and the nonce as\n      \
    \     specified in the PA-OTP-REQUEST.\n        *  Uses the generated Client Key\
    \ to decrypt the\n           PA-OTP-ENC-REQUEST in the encData of the PA-OTP-REQUEST.\n\
    \        *  Authenticates the user by comparing the nonce value from the\n   \
    \        decrypted PA-OTP-ENC-REQUEST to that sent in the\n           corresponding\
    \ PA-OTP-CHALLENGE.\n   14.  The KDC constructs a TGT for the user.\n   15.  The\
    \ KDC returns an AS-REP to the client, encrypted using the\n        Reply Key,\
    \ containing the TGT and padata with the\n        PA-FX-FAST-REPLY.\n   16.\n\
    \        The client authenticates the KDC and verifies the Reply Key\n       \
    \ change.  The client uses the generated Reply Key to decrypt the\n        encrypted\
    \ data in the AS-REP.\n"
- title: B.2.  Two-Pass Authentication
  contents:
  - "B.2.  Two-Pass Authentication\n   In this mode, the client includes a PA-OTP-REQUEST\
    \ within a\n   PA-FX-FAST-REQUEST padata of the initial AS-REQ sent to the KDC.\n\
    \   In this example, the user has been issued a hand-held token, so, none\n  \
    \ of the OTP generation parameters (otp-length, etc.) are included in\n   the\
    \ PA-OTP-REQUEST.  The KDC does not require hashed OTP values in\n   the key generation.\n\
    \   It is assumed that the client has been configured with the following\n   information\
    \ or has obtained it from a previous PA-OTP-CHALLENGE.\n   o  The OTP value must\
    \ not be carried in the otp-value.\n   o  The hashed OTP values are not required.\n\
    \   The basic sequence of steps involved is as follows:\n   1.   The client obtains\
    \ the user name and OTP value from the user.\n   2.   The client generates the\
    \ Client Key and Reply Key using unhashed\n        OTP values as described in\
    \ Section 3.6.\n   3.   The client constructs a PA-OTP-REQUEST as follows:\n \
    \       flags\n           0\n        encData\n           An EncryptedData containing\
    \ a PA-ENC-TS-ENC encrypted under\n           the Client Key with a key usage\
    \ of KEY_USAGE_OTP_REQUEST and\n           an encryption type of the Armor Key.\
    \  The PA-ENC-TS-ENC\n           contains the current client time.\n   4.   The\
    \ client encrypts the PA-OTP-REQUEST within the enc-fast-req\n        of a PA-FX-FAST-REQUEST.\n\
    \   5.   The client sends an AS-REQ to the KDC containing the\n        PA-FX-FAST-REQUEST\
    \ within the padata.\n   6.   The KDC validates the padata by performing the following\
    \ steps:\n        *  Generates the Client Key and Reply Key from the unhashed\
    \ OTP\n           value for the user identified in the AS-REQ.\n        *  Uses\
    \ the generated Client Key to decrypt the PA-ENC-TS-ENC in\n           the encData\
    \ of the PA-OTP-REQUEST.\n        *  Authenticates the user using the timestamp\
    \ in the standard\n           manner.\n   7.   The KDC constructs a TGT for the\
    \ user.\n   8.   The KDC returns an AS-REP to the client, encrypted using the\n\
    \        Reply Key, containing the TGT and padata with the\n        PA-FX-FAST-REPLY.\n\
    \   9.   The client authenticates the KDC and verifies the key change.\n     \
    \   The client uses the generated Reply Key to decrypt the encrypted\n       \
    \ data in the AS-REP.\n"
- title: B.3.  PIN Change
  contents:
  - "B.3.  PIN Change\n   This exchange follows from the point where the KDC receives\
    \ the\n   PA-OTP-REQUEST from the client in the examples in Appendix B.1 and\n\
    \   Appendix B.2.  During the validation of the pre-authentication data\n   (whether\
    \ encrypted nonce or encrypted timestamp), the KDC determines\n   that the user's\
    \ PIN has expired and so, must be changed.  The KDC\n   therefore, includes a\
    \ PA-OTP-PIN-CHANGE in the AS-REP.\n   In this example, the KDC does not generate\
    \ PIN values for the user\n   but requires that the user generate a new PIN that\
    \ is between 4 and 8\n   characters in length.  The actual PIN change is handled\
    \ by a PIN\n   change service.\n   The basic sequence of steps involved is as\
    \ follows:\n   1.   The client constructs and sends a PA-OTP-REQUEST to the KDC\
    \ as\n        described in the previous examples.\n   2.   The KDC validates the\
    \ pre-authentication data and authenticates\n        the user as in the previous\
    \ examples but determines that the\n        user's PIN has expired.\n   3.   The\
    \ KDC constructs a PA-OTP-PIN-CHANGE as follows:\n        flags\n           0\n\
    \        minLength\n           4\n        maxLength\n           8\n   4.   The\
    \ KDC encrypts the PA-OTP-PIN-CHANGE within the enc-fast-rep\n        of a PA-FX-FAST-REPLY.\n\
    \   5.   The KDC returns a KRB-ERROR to the client of type\n        KDC_ERR_PIN_EXPIRED\
    \ with padata containing the PA-FX-FAST-REPLY.\n   6.   The client authenticates\
    \ to the PIN change service and changes\n        the user's PIN.\n   7.   The\
    \ client sends a second AS-REQ to the KDC containing a PA-OTP-\n        REQUEST\
    \ constructed using the new PIN.\n   8.   The KDC responds with an AS-REP containing\
    \ a TGT.\n"
- title: B.4.  Resynchronization
  contents:
  - "B.4.  Resynchronization\n   This exchange follows from the point where the KDC\
    \ receives the\n   PA-OTP-REQUEST from the client.  During the validation of the\n\
    \   pre-authentication data (whether encrypted nonce or encrypted\n   timestamp),\
    \ the KDC determines that the local record of the token's\n   state needs to be\
    \ resynchronized with the token.  The KDC therefore,\n   includes a KRB-ERROR\
    \ containing a PA-OTP-CHALLENGE with the \"nextOTP\"\n   flag set.\n   The sequence\
    \ of steps below follows is a variation of the four pass\n   examples shown in\
    \ Appendix B.1 but the same process would also work\n   in the two-pass case.\n\
    \   1.   The client constructs and sends a PA-OTP-REQUEST to the KDC as\n    \
    \    described in the previous examples.\n   2.   The KDC validates the pre-authentication\
    \ data and authenticates\n        the user as in the previous examples, but determines\
    \ that user's\n        token requires resynchronizing.\n   3.   KDC constructs\
    \ a PA-OTP-CHALLENGE as follows:\n        nonce\n           A randomly generated\
    \ value.\n        otp-service\n           Set to a string that can be used by\
    \ the client to assist the\n           user in locating the correct token.\n \
    \       otp-tokenInfo\n           Information about how the OTP should be generated\
    \ from the\n           token.\n        flags\n           must-encrypt-nonce, collect-pin,\
    \ and nextOTP bits set\n        supportedHashAlg\n           AlgorithmIdentifiers\
    \ for SHA-256 and SHA-1\n        iterationCount\n           1024\n   4.   KDC\
    \ returns a KRB-ERROR with an error code of\n        KDC_ERR_PREAUTH_REQUIRED\
    \ and the PA-OTP-CHALLENGE in the e-data.\n   5.   The client obtains the next\
    \ OTP value from the token and records\n        the time as reported by the token.\n\
    \   6.   The client generates the Client Key and Reply Key as described\n    \
    \    in Section 3.6 using SHA-256 from the list of algorithms sent by\n      \
    \  the KDC, the iteration count of 100,000 as required by local\n        policy,\
    \ and a randomly generated nonce.\n   7.   The client constructs a PA-OTP-REQUEST\
    \ as follows:\n        flags\n           nextOTP bit set\n        nonce\n    \
    \       The randomly generated value.\n        encData\n           An EncryptedData\
    \ containing a PA-OTP-ENC-REQUEST encrypted\n           under the Client Key with\
    \ a key usage of\n           KEY_USAGE_OTP_REQUEST and the encryption type of\
    \ the Armor\n           Key.  The PA-OTP-ENC-REQUEST contains the nonce from the\n\
    \           PA-OTP-CHALLENGE.\n        hashAlg\n           SHA-256\n        iterationCount\n\
    \           100,000\n        otp-time\n           The time used in the OTP calculation\
    \ as reported by the OTP\n           token.\n   8.   The client encrypts the PA-OTP-REQUEST\
    \ within the enc-fast-req\n        of a PA-FX-FAST-REQUEST.\n   9.   The client\
    \ sends an AS-REQ to the KDC containing the\n        PA-FX-FAST-REQUEST within\
    \ the padata.\n   10.  The authentication process now proceeds as with the classic\n\
    \        sequence.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Gareth Richards\n   RSA, The Security Division of EMC\n\
    \   RSA House\n   Western Road\n   Bracknell, Berkshire  RG12 1RT\n   UK\n   EMail:\
    \ gareth.richards@rsa.com\n"
