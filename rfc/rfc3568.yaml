- title: __initial_text__
  contents:
  - '         Known Content Network (CN) Request-Routing Mechanisms

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document presents a summary of Request-Routing techniques that\n\
    \   are used to direct client requests to surrogates based on various\n   policies\
    \ and a possible set of metrics.  The document covers\n   techniques that were\
    \ commonly used in the industry on or before\n   December 2000.  In this memo,\
    \ the term Request-Routing represents\n   techniques that is commonly called content\
    \ routing or content\n   redirection.  In principle, Request-Routing techniques\
    \ can be\n   classified under: DNS Request-Routing, Transport-layer\n   Request-Routing,\
    \ and Application-layer Request-Routing.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . 2\n   2.  DNS based Request-Routing Mechanisms . . . . . . . . . .\
    \ . . 3\n       2.1.  Single Reply . . . . . . . . . . . . . . . . . . . . . 3\n\
    \       2.2.  Multiple Replies . . . . . . . . . . . . . . . . . . . 3\n     \
    \  2.3.  Multi-Level Resolution . . . . . . . . . . . . . . . . 4\n          \
    \   2.3.1.  NS Redirection . . . . . . . . . . . . . . . . 4\n             2.3.2.\
    \  CNAME Redirection. . . . . . . . . . . . . . . 5\n       2.4.  Anycast. . .\
    \ . . . . . . . . . . . . . . . . . . . . . 5\n       2.5.  Object Encoding. .\
    \ . . . . . . . . . . . . . . . . . . 6\n       2.6.  DNS Request-Routing Limitations.\
    \ . . . . . . . . . . . 6\n   3.  Transport-Layer Request-Routing  . . . . . .\
    \ . . . . . . . . 7\n   4.  Application-Layer Request-Routing  . . . . . . . .\
    \ . . . . . 8\n       4.1.  Header Inspection. . . . . . . . . . . . . . . . .\
    \ . . 8\n             4.1.1.  URL-Based Request-Routing. . . . . . . . . . . 8\n\
    \             4.1.2.  Header-Based Request-Routing . . . . . . . . . 9\n     \
    \        4.1.3.  Site-Specific Identifiers. . . . . . . . . . .10\n       4.2.\
    \  Content Modification . . . . . . . . . . . . . . . . .10\n             4.2.1.\
    \  A-priori URL Rewriting . . . . . . . . . . . .11\n             4.2.2.  On-Demand\
    \ URL Rewriting. . . . . . . . . . . .11\n             4.2.3.  Content Modification\
    \ Limitations . . . . . . .11\n   5.  Combination of Multiple Mechanisms . . .\
    \ . . . . . . . . . .11\n   6.  Security Considerations  . . . . . . . . . . .\
    \ . . . . . . .12\n   7.  Additional Authors and Acknowledgements  . . . . . .\
    \ . . . .12\n   A.  Measurements . . . . . . . . . . . . . . . . . . . . . . .\
    \ .13\n       A.1.  Proximity Measurements . . . . . . . . . . . . . . . .13\n\
    \             A.1.1.  Active Probing . . . . . . . . . . . . . . . .13\n     \
    \        A.1.2.  Metric Types . . . . . . . . . . . . . . . . .14\n          \
    \   A.1.3.  Surrogate Feedback . . . . . . . . . . . . . .14\n   8.  Normative\
    \ References . . . . . . . . . . . . . . . . . . . .15\n   9.  Informative References\
    \ . . . . . . . . . . . . . . . . . . .15\n   10. Intellectual Property and Copyright\
    \ Statements . . . . . . .17\n   11. Authors' Addresses . . . . . . . . . . .\
    \ . . . . . . . . . .18\n   12. Full Copyright Statement . . . . . . . . . . .\
    \ . . . . . . .19\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document provides a summary of known request routing\
    \ techniques\n   that are used by the industry before December 2000.  Request\
    \ routing\n   techniques are generally used to direct client requests to surrogates\n\
    \   based on various policies and a possible set of metrics.  The task of\n  \
    \ directing clients' requests to surrogates is also called\n   Request-Routing,\
    \ Content Routing or Content Redirection.\n   Request-Routing techniques are commonly\
    \ used in Content Networks\n   (also known as Content Delivery Networks) [8].\
    \  Content Networks\n   include network infrastructure that exists in layers 4\
    \ through 7.\n   Content Networks deal with the routing and forwarding of requests\
    \ and\n   responses for content. Content Networks rely on layer 7 protocols\n\
    \   such as HTTP [4] for transport.\n   Request-Routing techniques are generally\
    \ used to direct client\n   requests for objects to a surrogate or a set of surrogates\
    \ that could\n   best serve that content.  Request-Routing mechanisms could be\
    \ used to\n   direct client requests to surrogates that are within a Content\n\
    \   Network (CN) [8].\n   Request-Routing techniques are used as a vehicle to\
    \ extend the reach\n   and scale of Content Delivery Networks.  There exist multiple\n\
    \   Request-Routing mechanisms.  At a high-level, these may be classified\n  \
    \ under: DNS Request-Routing, transport-layer Request-Routing, and\n   application-layer\
    \ Request-Routing.\n   A request routing system uses a set of metrics in an attempt\
    \ to\n   direct users to surrogate that can best serve the request.  For\n   example,\
    \ the choice of the surrogate could be based on network\n   proximity, bandwidth\
    \ availability, surrogate load and availability of\n   content.  Appendix A provides\
    \ a summary of metrics and measurement\n   techniques that could be used in the\
    \ selection of the best surrogate.\n   The memo is organized as follows: Section\
    \ 2 provides a summary of\n   known DNS based Request-Routing techniques.  Section\
    \ 3 discusses\n   transport-layer Request-Routing methods.  In section 4 application\n\
    \   layer Request-Routing mechanisms are explored.  Section 5 provides\n   insight\
    \ on combining the various methods that were discussed in the\n   earlier sections\
    \ in order to optimize the performance of the\n   Request-Routing System.  Appendix\
    \ A provides a summary of possible\n   metrics and measurements techniques that\
    \ could be used by the\n   Request-Routing system to choose a given surrogate.\n"
- title: 2.  DNS based Request-Routing Mechanisms
  contents:
  - "2.  DNS based Request-Routing Mechanisms\n   DNS based Request-Routing techniques\
    \ are common due to the ubiquity\n   of the DNS system [10][12][13].  In DNS based\
    \ Request-Routing\n   techniques, a specialized DNS server is inserted in the\
    \ DNS\n   resolution process.  The server is capable of returning a different\n\
    \   set of A, NS or CNAME records based on user defined policies,\n   metrics,\
    \ or a combination of both.  In [11] RFC 2782 (DNS SRV)\n   provides guidance\
    \ on the use of DNS for load balancing.  The RFC\n   describes some of the limitations\
    \ and suggests appropriate useage of\n   DNS based techniques.  The next sections\
    \ provides a summary of some\n   of the used techniques.\n"
- title: 2.1.  Single Reply
  contents:
  - "2.1.  Single Reply\n   In this approach, the DNS server is authoritative for\
    \ the entire DNS\n   domain or a sub domain.  The DNS server returns the IP address\
    \ of the\n   best surrogate in an A record to the requesting DNS server.  The\
    \ IP\n   address of the surrogate could also be a virtual IP(VIP) address of\n\
    \   the best set of surrogates for requesting DNS server.\n"
- title: 2.2.  Multiple Replies
  contents:
  - "2.2.  Multiple Replies\n   In this approach, the Request-Routing DNS server returns\
    \ multiple\n   replies such as several A records for various surrogates.  Common\n\
    \   implementations of client site DNS server's cycles through the\n   multiple\
    \ replies in a Round-Robin fashion.  The order in which the\n   records are returned\
    \ can be used to direct multiple clients using a\n   single client site DNS server.\n"
- title: 2.3.  Multi-Level Resolution
  contents:
  - "2.3.  Multi-Level Resolution\n   In this approach multiple Request-Routing DNS\
    \ servers can be involved\n   in a single DNS resolution.  The rationale of utilizing\
    \ multiple\n   Request-Routing DNS servers in a single DNS resolution is to allow\n\
    \   one to distribute more complex decisions from a single server to\n   multiple,\
    \ more specialized, Request-Routing DNS servers.  The most\n   common mechanisms\
    \ used to insert multiple Request-Routing DNS servers\n   in a single DNS resolution\
    \ is the use of NS and CNAME records.  An\n   example would be the case where\
    \ a higher level DNS server operates\n   within a territory, directing the DNS\
    \ lookup to a more specific DNS\n   server within that territory to provide a\
    \ more accurate resolution.\n"
- title: 2.3.1.  NS Redirection
  contents:
  - "2.3.1.  NS Redirection\n   A DNS server can use NS records to redirect the authority\
    \ of the next\n   level domain to another Request-Routing DNS server.  The, technique\n\
    \   allows multiple DNS server to be involved in the name resolution\n   process.\
    \  For example, a client site DNS server resolving\n   a.b.example.com [10] would\
    \ eventually request a resolution of\n   a.b.example.com from the name server\
    \ authoritative for example.com.\n   The name server authoritative for this domain\
    \ might be a\n   Request-Routing NS server.  In this case the Request-Routing\
    \ DNS\n   server can either return a set of A records or can redirect the\n  \
    \ resolution of the request a.b.example.com to the DNS server that is\n   authoritative\
    \ for example.com using NS records.\n   One drawback of using NS records is that\
    \ the number of\n   Request-Routing DNS servers are limited by the number of parts\
    \ in the\n   DNS name.  This problem results from DNS policy that causes a client\n\
    \   site DNS server to abandon a request if no additional parts of the\n   DNS\
    \ name are resolved in an exchange with an authoritative DNS\n   server.\n   A\
    \ second drawback is that the last DNS server can determine the TTL\n   of the\
    \ entire resolution process.  Basically, the last DNS server can\n   return in\
    \ the authoritative section of its response its own NS\n   record.  The client\
    \ will use this cached NS record for further\n   request resolutions until it\
    \ expires.\n   Another drawback is that some implementations of bind voluntarily\n\
    \   cause timeouts to simplify their implementation in cases in which a\n   NS\
    \ level redirect points to a name server for which no valid A record\n   is returned\
    \ or cached.  This is especially a problem if the domain of\n   the name server\
    \ does not match the domain currently resolved, since\n   in this case the A records,\
    \ which might be passed in the DNS\n   response, are discarded for security reasons.\
    \  Another drawback is\n   the added delay in resolving the request due to the\
    \ use of multiple\n   DNS servers.\n"
- title: 2.3.2.  CNAME Redirection
  contents:
  - "2.3.2.  CNAME Redirection\n   In this scenario, the Request-Routing DNS server\
    \ returns a CNAME\n   record to direct resolution to an entirely new domain. \
    \ In principle,\n   the new domain might employ a new set of Request-Routing DNS\
    \ servers.\n   One disadvantage of this approach is the additional overhead of\n\
    \   resolving the new domain name.  The main advantage of this approach\n   is\
    \ that the number of Request-Routing DNS servers is independent of\n   the format\
    \ of the domain name.\n"
- title: 2.4.  Anycast
  contents:
  - "2.4.  Anycast\n   Anycast [5] is an inter-network service that is applicable\
    \ to\n   networking situations where a host, application, or user wishes to\n\
    \   locate a host which supports a particular service but, if several\n   servers\
    \ utilizes the service, it does not particularly care which\n   server is used.\
    \  In an anycast service, a host transmits a datagram\n   to an anycast address\
    \ and the inter-network is responsible for\n   providing best effort delivery\
    \ of the datagram to at least one, and\n   preferably only one, of the servers\
    \ that accept datagrams for the\n   anycast address.\n   The motivation for anycast\
    \ is that it considerably simplifies the\n   task of finding an appropriate server.\
    \  For example, users, instead\n   of consulting a list of servers and choosing\
    \ the closest one, could\n   simply type the name of the server and be connected\
    \ to the nearest\n   one.  By using anycast, DNS resolvers would no longer have\
    \ to be\n   configured with the IP addresses of their servers, but rather could\n\
    \   send a query to a well-known DNS anycast address.\n   Furthermore, to combine\
    \ measurement and redirection, the\n   Request-Routing DNS server can advertise\
    \ an anycast address as its IP\n   address.  The same address is used by multiple\
    \ physical DNS servers.\n   In this scenario, the Request-Routing DNS server that\
    \ is the closest\n   to the client site DNS server in terms of OSPF and BGP routing\
    \ will\n   receive the packet containing the DNS resolution request.  The server\n\
    \   can use this information to make a Request-Routing decision.\n   Drawbacks\
    \ of this approach are listed below:\n   o  The DNS server may not be the closest\
    \ server in terms of routing\n      to the client.\n   o  Typically, routing protocols\
    \ are not load sensitive.  Hence, the\n      closest server may not be the one\
    \ with the least network latency.\n   o  The server load is not considered during\
    \ the Request-Routing\n      process.\n"
- title: 2.5.  Object Encoding
  contents:
  - "2.5.  Object Encoding\n   Since only DNS names are visible during the DNS Request-Routing,\
    \ some\n   solutions encode the object type, object hash, or similar information\n\
    \   into the DNS name.  This might vary from a simple division of objects\n  \
    \ based on object type (such as images.a.b.example.com and\n   streaming.a.b.example.com)\
    \ to a sophisticated schema in which the\n   domain name contains a unique identifier\
    \ (such as a hash) of the\n   object.  The obvious advantage is that object information\
    \ is\n   available at resolution time.  The disadvantage is that the client\n\
    \   site DNS server has to perform multiple resolutions to retrieve a\n   single\
    \ Web page, which might increase rather than decrease the\n   overall latency.\n"
- title: 2.6.  DNS Request-Routing Limitations
  contents:
  - "2.6.  DNS Request-Routing Limitations\n   This section lists some of the limitations\
    \ of DNS based\n   Request-Routing techniques.\n   o  DNS only allows resolution\
    \ at the domain level.  However, an ideal\n      request resolution system should\
    \ service requests per object\n      level.\n   o  In DNS based Request-Routing\
    \ systems servers may be required to\n      return DNS entries with a short time-to-live\
    \ (TTL) values.  This\n      may be needed in order to be able to react quickly\
    \ in the face of\n      outages.  This in return may increase the volume of requests\
    \ to\n      DNS servers.\n   o  Some DNS implementations do not always adhere\
    \ to DNS standards.\n      For example, many DNS implementations do not honor\
    \ the DNS TTL\n      field.\n   o  DNS Request-Routing is based only on knowledge\
    \ of the client DNS\n      server, as client addresses are not relayed within\
    \ DNS requests.\n      This limits the ability of the Request-Routing system to\
    \ determine\n      a client's proximity to the surrogate.\n   o  DNS servers can\
    \ request and allow recursive resolution of DNS\n      names.  For recursive resolution\
    \ of requests, the Request-Routing\n      DNS server will not be exposed to the\
    \ IP address of the client's\n      site DNS server.  In this case, the Request-Routing\
    \ DNS server\n      will be exposed to the address of the DNS server that is\n\
    \      recursively requesting the information on behalf of the client's\n    \
    \  site DNS server.  For example, imgs.example.com might be resolved\n      by\
    \ a CN, but the request for the resolution might come from\n      dns1.example.com\
    \ as a result of the recursion.\n   o  Users that share a single client site DNS\
    \ server will be\n      redirected to the same set of IP addresses during the\
    \ TTL\n      interval.  This might lead to overloading of the surrogate during\n\
    \      a flash crowd.\n   o  Some implementations of bind can cause DNS timeouts\
    \ to occur while\n      handling exceptional situations.  For example, timeouts\
    \ can occur\n      for NS redirections to unknown domains.\n   DNS based request\
    \ routing techniques can suffer from serious\n   limitations.  For example, the\
    \ use of such techniques can overburden\n   third party DNS servers, which should\
    \ not be allowed [19].  In [11]\n   RFC 2782 provides warnings on the use of DNS\
    \ for load balancing.\n   Readers are encouraged to read the RFC for better understanding\
    \ of\n   the limitations.\n"
- title: 3.  Transport-Layer Request-Routing
  contents:
  - "3.  Transport-Layer Request-Routing\n   At the transport-layer finer levels of\
    \ granularity can be achieved by\n   the close inspection of client's requests.\
    \  In this approach, the\n   Request-Routing system inspects the information available\
    \ in the\n   first packet of the client's request to make surrogate selection\n\
    \   decisions.  The inspection of the client's requests provides data\n   about\
    \ the client's IP address, port information, and layer 4\n   protocol.  The acquired\
    \ data could be used in combination with\n   user-defined policies and other metrics\
    \ to determine the selection of\n   a surrogate that is better suited to serve\
    \ the request.  The\n   techniques [20][18][15] are used to hand off the session\
    \ to a more\n   appropriate surrogate are beyond the scope of this document.\n\
    \   In general, the forward-flow traffic (client to newly selected\n   surrogate)\
    \ will flow through the surrogate originally chosen by DNS.\n   The reverse-flow\
    \ (surrogate to client) traffic, which normally\n   transfers much more data than\
    \ the forward flow, would typically take\n   the direct path.\n   The overhead\
    \ associated with transport-layer Request-Routing [21][19]\n   is better suited\
    \  for long-lived sessions such as FTP [1] and RTSP\n   [3].  However, it also\
    \ could be used to direct clients away from\n   overloaded surrogates.\n   In\
    \ general, transport-layer Request-Routing can be combined with DNS\n   based\
    \ techniques.  As stated earlier, DNS based methods resolve\n   clients requests\
    \ based on domains or sub domains with exposure to the\n   client's DNS server\
    \ IP address.  Hence, the DNS based methods could\n   be used as a first step\
    \ in deciding on an appropriate surrogate with\n   more accurate refinement made\
    \ by the transport-layer Request-Routing\n   system.\n"
- title: 4.  Application-Layer Request-Routing
  contents:
  - "4.  Application-Layer Request-Routing\n   Application-layer Request-Routing systems\
    \ perform deeper examination\n   of client's packets beyond the transport layer\
    \ header.  Deeper\n   examination of client's packets provides fine-grained Request-Routing\n\
    \   control down to the level of individual objects.  The process could\n   be\
    \ performed in real time at the time of the object request.  The\n   exposure\
    \ to the client's IP address combined with the fine-grained\n   knowledge of the\
    \ requested objects enable application-layer\n   Request-Routing systems to provide\
    \ better control over the selection\n   of the best surrogate.\n"
- title: 4.1.  Header Inspection
  contents:
  - "4.1.  Header Inspection\n   Some application level protocols such as HTTP [4],\
    \ RTSP [3], and SSL\n   [2] provide hints in the initial portion of the session\
    \ about how the\n   client request must be directed.  These hints may come from\
    \ the URL\n   of the content or other parts of the MIME request header such as\n\
    \   Cookies.\n"
- title: 4.1.1.  URL-Based Request-Routing
  contents:
  - "4.1.1.  URL-Based Request-Routing\n   Application level protocols such as HTTP\
    \ and RTSP describe the\n   requested  content by its URL [6].  In many cases,\
    \ this information\n   is sufficient to disambiguate the content and suitably\
    \ direct the\n   request.  In most cases, it may be sufficient to make Request-Routing\n\
    \   decision just by examining the prefix or suffix of the URL.\n"
- title: 4.1.1.1.  302 Redirection
  contents:
  - "4.1.1.1.  302 Redirection\n   In this approach, the client's request is first\
    \ resolved to a virtual\n   surrogate.  Consequently, the surrogate returns an\n\
    \   application-specific code such as the 302 (in the case of HTTP [4] or\n  \
    \ RTSP [3]) to redirect the client to the actual delivery node.\n   This technique\
    \ is relatively simple to implement.  However, the main\n   drawback of this method\
    \ is the additional latency involved in sending\n   the redirect message back\
    \ to the client.\n"
- title: 4.1.1.2.  In-Path Element
  contents:
  - "4.1.1.2.  In-Path Element\n   In this technique, an In-Path element is present\
    \ in the network in\n   the forwarding path of the client's request.  The In-Path\
    \ element\n   provides transparent interception of the transport connection. \
    \ The\n   In-Path element examines the client's content requests and performs\n\
    \   Request-Routing decisions.\n   The In-Path element then splices the client\
    \ connection to a\n   connection with the appropriate delivery node and passes\
    \ along the\n   content request.  In general, the return path would go through\
    \ the\n   In-Path element.  However, it is possible to arrange for a direct\n\
    \   return by passing the address translation information to the\n   surrogate\
    \ or delivery node through some proprietary means.\n   The primary disadvantage\
    \ with this method is the performance\n   implications of URL-parsing in the path\
    \ of the network traffic.\n   However, it is generally the case that the return\
    \ traffic is much\n   larger than the forward traffic.\n   The technique allows\
    \ for the possibility of partitioning the traffic\n   among a set of delivery\
    \ nodes by content objects identified by URLs.\n   This allows object-specific\
    \ control of server loading.  For example,\n   requests for non-cacheable object\
    \ types may be directed away from a\n   cache.\n"
- title: 4.1.2.  Header-Based Request-Routing
  contents:
  - "4.1.2.  Header-Based Request-Routing\n   This technique involves the task of\
    \ using HTTP [4] such as Cookie,\n   Language, and User-Agent, in order to select\
    \ a surrogate.  In [20]\n   some examples of using this technique are provided.\n\
    \   Cookies can be used to identify a customer or session by a web site.\n   Cookie\
    \ based Request-Routing provides content service differentiation\n   based on\
    \ the client.  This approach works provided that the cookies\n   belong to the\
    \ client.  In addition, it is possible to direct a\n   connection from a multi-session\
    \ transaction to the same server to\n   achieve session-level persistence.\n \
    \  The language header can be used to direct traffic to a\n   language-specific\
    \ delivery node.  The user-agent header helps\n   identify the type of client\
    \ device.  For example, a voice-browser,\n   PDA, or cell phone can indicate the\
    \ type of delivery node that has\n   content specialized to handle the content\
    \ request.\n"
- title: 4.1.3.  Site-Specific Identifiers
  contents:
  - "4.1.3.  Site-Specific Identifiers\n   Site-specific identifiers help authenticate\
    \ and identify a session\n   from a specific user.  This information may be used\
    \ to direct a\n   content request.\n   An example of a site-specific identifier\
    \ is the SSL Session\n   Identifier.  This identifier is generated by a web server\
    \ and used by\n   the web client in succeeding sessions to identify itself and\
    \ avoid an\n   entire security authentication exchange.  In order to inspect the\n\
    \   session identifier, an In-Path element would observe the responses of\n  \
    \ the web server and determine the session identifier which is then\n   used to\
    \ associate the session to a specific server.  The remaining\n   sessions are\
    \ directed based on the stored session identifier.\n"
- title: 4.2.  Content Modification
  contents:
  - "4.2.  Content Modification\n   This technique enables a content provider to take\
    \ direct control over\n   Request-Routing decisions without the need for specific\
    \ witching\n   devices or directory services in the path between the client and\
    \ the\n   origin server.  Basically, a content provider can directly\n   communicate\
    \ to the client the best surrogate that can serve the\n   request.  Decisions\
    \ about the best surrogate can be made on a per-\n   object basis or it can depend\
    \ on a set of metrics.  The overall goal\n   is to improve scalability and the\
    \ performance for delivering the\n   modified content, including all embedded\
    \ objects.\n   In general, the method takes advantage of content objects that\n\
    \   consist of basic structure that includes references to additional,\n   embedded\
    \ objects.  For example, most web pages, consist of an HTML\n   document that\
    \ contains plain text together with some embedded\n   objects, such as GIF or\
    \ JPEG images.  The embedded objects are\n   referenced using embedded HTML directives.\
    \  In general, embedded HTML\n   directives direct the client to retrieve the\
    \ embedded objects from\n   the origin server.  A content provider can now modify\
    \ references to\n   embedded objects such that they could be fetched from the\
    \ best\n   surrogate.  This technique is also known as URL rewriting.\n   Content\
    \ modification techniques must not violate the architectural\n   concepts of the\
    \ Internet [9].  Special considerations must be made to\n   ensure that the task\
    \ of modifying the content is performed in a\n   manner that is consistent with\
    \ RFC 3238 [9] that specifies the\n   architectural considerations for intermediaries\
    \ that perform\n   operations or modifications on content.\n   The basic types\
    \ of URL rewriting are discussed in the following\n   subsections.\n"
- title: 4.2.1.  A-priori URL Rewriting
  contents:
  - "4.2.1.  A-priori URL Rewriting\n   In this scheme, a content provider rewrites\
    \ the embedded URLs before\n   the content is positioned on the origin server.\
    \  In this case, URL\n   rewriting can be done either manually or by using software\
    \ tools that\n   parse the content and replace embedded URLs.\n   A-priori URL\
    \ rewriting alone does not allow consideration of client\n   specifics for Request-Routing.\
    \  However, it can be used in\n   combination with DNS Request-Routing to direct\
    \ related DNS queries\n   into the domain name space of the service provider.\
    \  Dynamic\n   Request-Routing based on client specifics are then done using the\
    \ DNS\n   approach.\n"
- title: 4.2.2.  On-Demand URL Rewriting
  contents:
  - "4.2.2.  On-Demand URL Rewriting\n   On-Demand or dynamic URL rewriting, modifies\
    \ the content when the\n   client request reaches the origin server.  At this\
    \ time, the identity\n   of the client is known and can be considered when rewriting\
    \ the\n   embedded URLs.  In particular, an automated process can determine,\n\
    \   on-demand, which surrogate would serve the requesting client best.\n   The\
    \ embedded URLs can then be rewritten to direct the client to\n   retrieve the\
    \ objects from the best surrogate rather than from the\n   origin server.\n"
- title: 4.2.3.  Content Modification Limitations
  contents:
  - "4.2.3.  Content Modification Limitations\n   Content modification as a Request-Routing\
    \ mechanism suffers from many\n   limitation [23].  For example:\n   o  The first\
    \ request from a client to a specific site must be served\n      from the origin\
    \ server.\n   o  Content that has been modified to include references to nearby\n\
    \      surrogates rather than to the origin server should be marked as\n     \
    \ non-cacheable.  Alternatively, such pages can be marked to be\n      cacheable\
    \ only for a relatively short period of time.  Rewritten\n      URLs on cached\
    \ pages can cause problems, because they can get\n      outdated and point to\
    \ surrogates that are no longer available or\n      no longer good choices.\n"
- title: 5.  Combination of Multiple Mechanisms
  contents:
  - "5.  Combination of Multiple Mechanisms\n   There are environments in which a\
    \ combination of different mechanisms\n   can be beneficial and advantageous over\
    \ using one of the proposed\n   mechanisms alone.  The following example illustrates\
    \ how the\n   mechanisms can be used in combination.\n   A basic problem of DNS\
    \ Request-Routing is the resolution granularity\n   that allows resolution on\
    \ a per-domain level only.  A per-object\n   redirection cannot easily be achieved.\
    \  However, content modification\n   can be used together with DNS Request-Routing\
    \ to overcome this\n   problem.  With content modification, references to different\
    \ objects\n   on the same origin server can be rewritten to point into different\n\
    \   domain name spaces.  Using DNS Request-Routing, requests for those\n   objects\
    \ can now dynamically be directed to different surrogates.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The main objective of this document is to provide\
    \ a summary of\n   current Request-Routing techniques.  Such techniques are currently\n\
    \   implemented in the Internet.  However, security must be addressed by\n   any\
    \ entity that implements any technique that redirects client's\n   requests. \
    \ In [9] RFC 3238 addresses the main requirements for\n   entities that intend\
    \ to modify requests for content in the Internet.\n   Some active probing techniques\
    \ will set off intrusion detection\n   systems and firewalls.  Therefore, it is\
    \ recommended that\n   implementers be aware of routing protocol security [25].\n\
    \   It is important to note the impact of TLS [2] on request routing in\n   CNs.\
    \  Specifically, when TLS is used the full URL is not visible to\n   the content\
    \ network unless it terminates the TLS session.  The\n   current document focuses\
    \ on HTTP techniques.  TLS based techniques\n   that require the termination of\
    \ TLS sessions on Content Peering\n   Gateways [8] are beyond the of scope of\
    \ this document.\n   The details of security techniques are also beyond the scope\
    \ of this\n   document.\n"
- title: 7.  Additional Authors and Acknowledgements
  contents:
  - "7.  Additional Authors and Acknowledgements\n   The following people have contributed\
    \ to the task of authoring this\n   document: Fred Douglis (IBM Research), Mark\
    \ Green, Markus Hofmann\n   (Lucent), Doug Potter.\n   The authors acknowledge\
    \ the contributions and comments of Ian Cooper,\n   Nalin Mistry (Nortel), Wayne\
    \ Ding (Nortel) and Eric Dean\n   (CrystalBall).\n"
- title: Appendix A.  Measurements
  contents:
  - "Appendix A.  Measurements\n   Request-Routing systems can use a variety of metrics\
    \ in order to\n   determine the best surrogate that can serve a client's request.\
    \  In\n   general, these metrics are based on network measurements and feedback\n\
    \   from surrogates.  It is possible to combine multiple metrics using\n   both\
    \ proximity and surrogate feedback for best surrogate selection.\n   The following\
    \ sections describe several well known metrics as well as\n   the major techniques\
    \ for obtaining them.\n"
- title: A.1.  Proximity Measurements
  contents:
  - "A.1.  Proximity Measurements\n   Proximity measurements can be used by the Request-Routing\
    \ system to\n   direct users to the \"closest\" surrogate.  In this document proximity\n\
    \   means round-trip time.  In a DNS Request-Routing system, the\n   measurements\
    \ are made to the client's local DNS server.  However,\n   when the IP address\
    \ of the client is accessible more accurate\n   proximity measurements can be\
    \ obtained [24].\n   Proximity measurements can be exchanged between surrogates\
    \ and the\n   requesting entity.  In many cases, proximity measurements are\n\
    \   \"one-way\" in that they measure either the forward or reverse path of\n \
    \  packets from the surrogate to the requesting entity.  This is\n   important\
    \ as many paths in the Internet are asymmetric [24].\n   In order to obtain a\
    \ set of proximity measurements, a network may\n   employ active probing techniques.\n"
- title: A.1.1.  Active Probing
  contents:
  - "A.1.1.  Active Probing\n   Active probing is when past or possible requesting\
    \ entities are\n   probed using one or more techniques to determine one or more\
    \ metrics\n   from each surrogate or set of surrogates.  An example of a probing\n\
    \   technique is an ICMP ECHO Request that is periodically sent from each\n  \
    \ surrogate or set of surrogates to a potential requesting entity.\n   In any\
    \ active probing approach, a list of potential requesting\n   entities need to\
    \ be obtained.  This list can be generated\n   dynamically.  Here, as requests\
    \ arrive, the requesting entity\n   addresses can be cached for later probing.\
    \  Another potential\n   solution is to use an algorithm to divide address space\
    \ into blocks\n   and to probe random addresses within those blocks.  Limitations\
    \ of\n   active probing techniques include:\n   o  Measurements can only be taken\
    \ periodically.\n   o  Firewalls and NATs disallow probes.\n   o  Probes often\
    \ cause security alarms to be triggered on intrusion\n      detection systems.\n"
- title: A.1.2.  Metric Types
  contents:
  - "A.1.2.  Metric Types\n   The following sections list some of the metrics, which\
    \ can be used\n   for proximity calculations.\n   o  Latency: Network latency\
    \ measurements metrics are used to\n      determine the surrogate (or set of surrogates)\
    \ that has the least\n      delay to the requesting entity.  These measurements\
    \ can be\n      obtained using active probing techniques.\n   o  Hop Counts: Router\
    \ hops from the surrogate to the requesting\n      entity can be used as a proximity\
    \ measurement.\n   o  BGP Information: BGP AS PATH and MED attributes can be used\
    \ to\n      determine the \"BGP distance\" to a given prefix/length pair.  In\n\
    \      order to use BGP information for proximity measurements, it must\n    \
    \  be obtained at each surrogate site/location.\n   It is important to note that\
    \ the value of BGP AS PATH information can\n   be meaningless as a good selection\
    \ metric [24].\n"
- title: A.1.3.  Surrogate Feedback
  contents:
  - "A.1.3.  Surrogate Feedback\n   In order to select a \"least-loaded\" delivery\
    \ node.  Feedback can be\n   delivered from each surrogate or can be aggregated\
    \ by site or by\n   location.\n"
- title: A.1.3.1.  Probing
  contents:
  - "A.1.3.1.  Probing\n   Feedback information may be obtained by periodically probing\
    \ a\n   surrogate by issuing an HTTP request and observing the behavior.  The\n\
    \   problems with probing for surrogate information are:\n   o  It is difficult\
    \ to obtain \"real-time\" information.\n   o  Non-real-time information may be\
    \ inaccurate.\n   Consequently, feedback information can be obtained by agents\
    \ that\n   reside on surrogates that can communicate a variety of metrics about\n\
    \   their nodes.\n"
- title: 8.  Normative References
  contents:
  - "8.  Normative References\n   [1]  Postel, J. and J. Reynolds, \"File Transfer\
    \ Protocol\", STD 9, RFC\n        959, October 1985.\n   [2]  Dierks, T. and C.\
    \ Allen, \"The TLS Protocol Version 1\", RFC 2246,\n        January 1999.\n  \
    \ [3]  Schulzrinne, H., Rao, A. and R. Lanphier, \"Real Time Streaming\n     \
    \   Protocol\", RFC 2326, April 1998.\n   [4]  Fielding, R., Gettys, J., Mogul,\
    \ J., Frystyk, H., Masinter, L.,\n        Leach, P. and T. Berners-Lee, \"Hypertext\
    \ Transfer\n        Protocol -- HTTP/1.1\", RFC 2616, June 1999.\n   [5]  Partridge,\
    \ C., Mendez, T. and W. Milliken, \"Host Anycasting\n        Service\", RFC 1546,\
    \ November 1993.\n   [6]  Berners-Lee, T., Masinter, L. and M. McCahill, \"Uniform\
    \ Resource\n        Locators (URL)\", RFC 1738, December 1994.\n   [7]  Schulzrinne,\
    \ H., Casner, S., Federick, R. and V. Jacobson, \"RTP:\n        A Transport Protocol\
    \ for Real-Time Applications\", RFC 1889,\n        January 1996.\n   [8]  Day,\
    \ M., Cain, B., Tomlinson, G. and P. Rzewski, \"A Model for\n        Content Internetworking\
    \ (CDI)\", RFC 3466, February 2003.\n   [9]  Floyd, S. and L. Daigle, \"IAB Architectural\
    \ and Policy\n        Considerations for Open Pluggable Edge Services\", RFC 3238,\n\
    \        January 2002.\n"
- title: 9.  Informative References
  contents:
  - "9.  Informative References\n   [10] Eastlake, D. and A, Panitz, \"Reserved Top\
    \ Level DNS Names\", BCP\n        32, RFC 2606, June 1999.\n   [11] Gulbrandsen,\
    \ A., Vixie, P. and L. Esibov, \"A DNS RR for\n        specifying the location\
    \ of services (DNS SRV)\", RFC 2782,\n        February 2002.\n   [12] Mockapetris,\
    \ P., \"Domain names - concepts and facilities\", STD\n        13, RFC 1034, November\
    \ 1987.\n   [13] Mockapetris, P., \"Domain names - concepts and facilities\",\
    \ STD\n        13, RFC 1035, November 1987.\n   [14] Elz, R. and R. Bush, \"Clarifications\
    \ to the DNS Specification\",\n        RFC 2181, July  1997.\n   [15] Awduche,\
    \ D., Chiu, A., Elwalid, A., Widjaja, I. and X. Xiao,\n        \"Overview and\
    \ Principles of Internet Traffic Engineering\", RFC\n        3272, May 2002.\n\
    \   [16] Crawley, E., Nair, R., Rajagopalan, B. and H. Sandick, \"A\n        Framework\
    \ for QoS-based Routing in the Internet\", RFC 2386,\n        August 1998.\n \
    \  [17] Huston, G., \"Commentary on Inter-Domain Routing in the\n        Internet\"\
    , RFC 3221, December 2001.\n   [18] M. Welsh et al., \"SEDA: An Architecture for\
    \ Well-Conditioned,\n        Scalable Internet Services\", Proceedings of the\
    \ Eighteenth\n        Symposium on Operating Systems Principles (SOSP-18) 2001,\n\
    \        October 2001.\n   [19] A. Shaikh, \"On the effectiveness of DNS-based\
    \ Server Selection\",\n        INFOCOM 2001, August 2001.\n   [20] C. Yang et\
    \ al., \"An effective mechanism for supporting content-\n        based routing\
    \ in scalable Web server clusters\", Proc.\n        International Workshops on\
    \ Parallel Processing 1999, September\n        1999.\n   [21] R. Liston et al.,\
    \ \"Using a Proxy to Measure Client-Side Web\n        Performance\", Proceedings\
    \ of the Sixth International Web Content\n        Caching and Distribution Workshop\
    \ (WCW'01) 2001, August 2001.\n   [22] W. Jiang et al., \"Modeling of packet loss\
    \ and delay and their\n        effect on real-time multimedia service quality\"\
    , Proceedings of\n        NOSSDAV 2000, June 2000.\n   [23] K. Johnson et al.,\
    \ \"The measured performance of content\n        distribution networks\", Proceedings\
    \ of the Fifth International\n        Web Caching Workshop and Content Delivery\
    \ Workshop 2000, May\n        2000.\n   [24] V. Paxson, \"End-to-end Internet\
    \ packet dynamics\", IEEE/ACM\n        Transactions 1999, June 1999.\n   [25]\
    \ F. Wang et al., \"Secure routing protocols: Theory and Practice\",\n       \
    \ Technical report, North Carolina State University 1997, May\n        1997.\n"
- title: 10.  Intellectual Property Statement
  contents:
  - "10.  Intellectual Property Statement\n   The IETF takes no position regarding\
    \ the validity or scope of any\n   intellectual property or other rights that\
    \ might be claimed to\n   pertain to the implementation or use of the technology\
    \ described in\n   this document or the extent to which any license under such\
    \ rights\n   might or might not be available; neither does it represent that it\n\
    \   has made any effort to identify any such rights.  Information on the\n   IETF's\
    \ procedures with respect to rights in standards-track and\n   standards-related\
    \ documentation can be found in BCP-11.  Copies of\n   claims of rights made available\
    \ for publication and any assurances of\n   licenses to be made available, or\
    \ the result of an attempt made to\n   obtain a general license or permission\
    \ for the use of such\n   proprietary rights by implementors or users of this\
    \ specification can\n   be obtained from the IETF Secretariat.\n   The IETF invites\
    \ any interested party to bring to its attention any\n   copyrights, patents or\
    \ patent applications, or other proprietary\n   rights which may cover technology\
    \ that may be required to practice\n   this standard.  Please address the information\
    \ to the IETF Executive\n   Director.\n"
- title: 11.  Authors' Addresses
  contents:
  - "11.  Authors' Addresses\n   Abbie Barbir\n   Nortel Networks\n   3500 Carling\
    \ Avenue\n   Nepean, Ontario  K2H 8E9\n   Canada\n   Phone: +1 613 763 5229\n\
    \   EMail: abbieb@nortelnetworks.com\n   Brad Cain\n   Storigen Systems\n   650\
    \ Suffolk Street\n   Lowell, MA  01854\n   USA\n   Phone: +1 978-323-4454\n  \
    \ EMail: bcain@storigen.com\n   Raj Nair\n   6 Burroughs Rd\n   Lexington, MA\
    \  02420\n   USA\n   EMail: nair_raj@yahoo.com\n   Oliver Spatscheck\n   AT&T\n\
    \   180 Park Ave, Bldg 103\n   Florham Park, NJ  07932\n   USA\n   EMail: spatsch@research.att.com\n"
- title: 12.  Full Copyright Statement
  contents:
  - "12.  Full Copyright Statement\n   Copyright (C) The Internet Society (2003).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assignees.\n\
    \   This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
