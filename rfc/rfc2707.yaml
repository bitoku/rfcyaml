- title: __initial_text__
  contents:
  - '                       Job Monitoring MIB - V1.0

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: IESG Note
  contents:
  - "IESG Note\n   This MIB module uses an unconventional scheme for modeling management\n\
    \   information (on top of the SNMP model) which is unique to this MIB.\n   The\
    \ IESG recommends against using this document as an example for the\n   design\
    \ of future MIBs.\n   The \"Printer Working Group\" industry consortium is not\
    \ an IETF\n   working group, and the IETF does not recognize the Printer Working\n\
    \   Group as a standards-setting body.  This document is being published\n   solely\
    \ to provide information to the Internet community regarding a\n   MIB that might\
    \ be deployed in the marketplace. Publication of this\n   document as an RFC is\
    \ not an endorsement of this MIB.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document provides a printer industry standard SNMP MIB for\
    \ (1)\n   monitoring the status and progress of print jobs (2) obtaining\n   resource\
    \ requirements before a job is processed, (3) monitoring\n   resource consumption\
    \ while a job is being processed and (4)\n   collecting resource accounting data\
    \ after the completion of a job.\n   This MIB is intended to be implemented (1)\
    \ in a printer or (2) in a\n   server that supports one or more printers.  Use\
    \ of the object set is\n   not limited to printing.  However, support for services\
    \ other than\n   printing is outside the scope of this Job Monitoring MIB.  Future\n\
    \   extensions to this MIB may include, but are not limited to, fax\n   machines\
    \ and scanners.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1   INTRODUCTION                                      \
    \              4\n     1.1 Types of Information in the MIB                   \
    \            5\n     1.2 Types of Job Monitoring Applications                \
    \          6\n   2   TERMINOLOGY AND JOB MODEL                               \
    \        7\n     2.1 System Configurations for the Job Monitoring MIB        \
    \     11\n       2.1.1   Configuration 1 - client-printer                    \
    \   11\n       2.1.2   Configuration 2 - client-server-printer - agent in the\n\
    \               server                                                 12\n  \
    \     2.1.3   Configuration 3 - client-server-printer - client\n             \
    \  monitors printer agent and server                      14\n   3   MANAGED OBJECT\
    \ USAGE                                           15\n     3.1 Conformance Considerations\
    \                                   15\n       3.1.1   Conformance Terminology\
    \                                16\n       3.1.2   Agent Conformance Requirements\
    \                         16\n         3.1.2.1   MIB II System Group objects \
    \                       17\n         3.1.2.2   MIB II Interface Group objects\
    \                     17\n         3.1.2.3   Printer MIB objects             \
    \                   17\n       3.1.3   Job Monitoring Application Conformance\
    \ Requirements    17\n     3.2 The Job Tables and the Oldest Active and Newest\
    \ Active\n         Indexes                                                   \
    \   18\n     3.3 The Attribute Mechanism and the Attribute Table(s)          \
    \ 20\n       3.3.1   Conformance of Attribute Implementation                21\n\
    \       3.3.2   Useful, 'Unknown', and 'Other' Values for Objects and\n      \
    \         Attributes                                             21\n       3.3.3\
    \   Index Value Attributes                                 22\n       3.3.4  \
    \ Data Sub-types and Attribute Naming Conventions        22\n       3.3.5   Single-Value\
    \ (Row) Versus Multi-Value (MULTI-ROW)\n               Attributes            \
    \                                 23\n       3.3.6   Requested Objects and Attributes\
    \                       23\n       3.3.7   Consumption Attributes            \
    \                     24\n       3.3.8   Attribute Specifications            \
    \                   24\n       3.3.9   Job State Reason bit definitions      \
    \                 43\n         3.3.9.1   JmJobStateReasons1TC specification  \
    \               44\n         3.3.9.2   JmJobStateReasons2TC specification    \
    \             47\n         3.3.9.3   JmJobStateReasons3TC specification      \
    \           51\n         3.3.9.4   JmJobStateReasons4TC specification        \
    \         51\n     3.4 Monitoring Job Progress                               \
    \       51\n     3.5 Job Identification                                      \
    \     55\n       3.5.1   The Job Submission ID specifications                \
    \   56\n     3.6 Internationalization Considerations                         \
    \ 60\n       3.6.1   Text generated by the server or device                 61\n\
    \       3.6.2   Text supplied by the job submitter                     61\n  \
    \     3.6.3   'DateAndTime' for representing the date and time       63\n    \
    \ 3.7 IANA and PWG Registration Considerations                     63\n      \
    \ 3.7.1   PWG Registration of enums                              63\n        \
    \ 3.7.1.1   Type 1 enumerations                                64\n         3.7.1.2\
    \   Type 2 enumerations                                64\n         3.7.1.3  \
    \ Type 3 enumeration                                 64\n       3.7.2   PWG Registration\
    \ of type 2 bit values                  65\n       3.7.3   PWG Registration of\
    \ Job Submission Id Formats          65\n       3.7.4   PWG Registration of MIME\
    \ types/sub-types for document-\n               formats                      \
    \                          65\n     3.8 Security Considerations              \
    \                        65\n       3.8.1   Read-Write objects               \
    \                      65\n       3.8.2   Read-Only Objects In Other User's Jobs\
    \                 66\n     3.9 Notifications                                 \
    \               66\n   4   MIB SPECIFICATION                                 \
    \             67\n     Textual conventions for this MIB module               \
    \           68\n       JmUTF8StringTC                                        \
    \         68\n       JmJobStringTC                                           \
    \       68\n       JmNaturalLanguageTagTC                                    \
    \     68\n       JmTimeStampTC                                               \
    \   69\n       JmJobSourcePlatformTypeTC                                     \
    \ 69\n       JmFinishingTC                                                  70\n\
    \       JmPrintQualityTC                                               71\n  \
    \     JmPrinterResolutionTC                                          71\n    \
    \   JmTonerEconomyTC                                               72\n      \
    \ JmBooleanTC                                                    72\n       JmMediumTypeTC\
    \                                                 72\n       JmJobCollationTypeTC\
    \                                           74\n       JmJobSubmissionIDTypeTC\
    \                                        74\n       JmJobStateTC             \
    \                                      75\n       JmAttributeTypeTC          \
    \                                    78\n       JmJobServiceTypesTC          \
    \                                  81\n       JmJobStateReasons1TC           \
    \                                83\n       JmJobStateReasons2TC             \
    \                              83\n       JmJobStateReasons3TC               \
    \                            83\n       JmJobStateReasons4TC                 \
    \                          84\n     The General Group (MANDATORY)            \
    \                        84\n       jmGeneralJobSetIndex   (Int32(1..32767)) \
    \                      85\n       jmGeneralNumberOfActiveJobs   (Int32(0..)) \
    \                    86\n       jmGeneralOldestActiveJobIndex   (Int32(0..)) \
    \                  86\n       jmGeneralNewestActiveJobIndex   (Int32(0..))   \
    \                86\n       jmGeneralJobPersistence   (Int32(15..))          \
    \              87\n       jmGeneralAttributePersistence   (Int32(15..))      \
    \            87\n       jmGeneralJobSetName   (UTF8String63)                 \
    \          88\n     The Job ID Group (MANDATORY)                             \
    \        88\n       jmJobSubmissionID   (OCTET STRING(SIZE(48)))             \
    \      89\n       jmJobIDJobSetIndex   (Int32(0..32767))                     \
    \    90\n       jmJobIDJobIndex   (Int32(0..))                               \
    \  91\n     The Job Group (MANDATORY)                                        91\n\
    \       jmJobIndex   (Int32(1..))                                      92\n  \
    \     jmJobState   (JmJobStateTC)                                    92\n    \
    \   jmJobStateReasons1   (JmJobStateReasons1TC)                    93\n      \
    \ jmNumberOfInterveningJobs   (Int32(-2..))                      93\n       jmJobKOctetsPerCopyRequested\
    \   (Int32(-2..))                   94\n       jmJobKOctetsProcessed   (Int32(-2..))\
    \                          94\n       jmJobImpressionsPerCopyRequested   (Int32(-2..))\
    \               95\n       jmJobImpressionsCompleted   (Int32(-2..))         \
    \             96\n       jmJobOwner   (JobString63)                          \
    \           96\n     The Attribute Group (MANDATORY)                         \
    \         97\n       jmAttributeTypeIndex   (JmAttributeTypeTC)              \
    \       98\n       jmAttributeInstanceIndex   (Int32(1..32767))              \
    \     99\n       jmAttributeValueAsInteger   (Int32(-2..))                   \
    \   99\n       jmAttributeValueAsOctets   (Octets63)                         100\n\
    \   5   APPENDIX A - IMPLEMENTING THE JOB LIFE CYCLE                  104\n  \
    \ 6   APPENDIX B - SUPPORT OF JOB SUBMISSION PROTOCOLS              105\n   7\
    \   REFERENCES                                                    105\n   8  \
    \ NOTICES                                                       108\n   9   AUTHORS'\
    \ ADDRESSES                                            109\n   10  INDEX     \
    \                                                    111\n   11  Full Copyright\
    \ Statement                                      114\n"
- title: 1  Introduction
  contents:
  - "1  Introduction\n   This specification defines an official Printer Working Group\
    \ (PWG)\n   [PWG] standard SNMP MIB for the monitoring of jobs on network\n  \
    \ printers.  This specification is being published as an IETF\n   Information\
    \ Document for the convenience of the Internet community.\n   In consultation\
    \ with the IETF Application Area Directors, it was\n   concluded that this MIB\
    \ specification properly belongs as an\n   Information document, because this\
    \ MIB monitors a service node on the\n   network, rather than a network node proper.\n\
    \   The Job Monitoring MIB is intended to be implemented by an agent\n   within\
    \ a printer or the first server closest to the printer, where\n   the printer\
    \ is either directly connected to the server only or the\n   printer does not\
    \ contain the job monitoring MIB agent.  It is\n   recommended that implementations\
    \ place the SNMP agent as close as\n   possible to the processing of the print\
    \ job.  This MIB applies to\n   printers with and without spooling capabilities.\
    \  This MIB is\n   designed to be compatible with most current commonly-used job\n\
    \   submission protocols.  In most environments that support high\n   function\
    \ job submission/job control protocols, like ISO DPA [iso-\n   dpa], those protocols\
    \ would be used to monitor and manage print jobs\n   rather than using the Job\
    \ Monitoring MIB.\n   The Job Monitoring MIB consists of a General Group, a Job\
    \ Submission\n   ID Group, a Job Group, and an Attribute Group.  Each group is\
    \ a\n   table.  All accessible objects are read-only.  The General Group\n   contains\
    \ general information that applies to all jobs in a job set.\n   The Job Submission\
    \ ID table maps the job submission ID that the\n   client uses to identify a job\
    \ to the jmJobIndex that the Job\n   Monitoring Agent uses to identify jobs in\
    \ the Job and Attribute\n   tables.  The Job table contains the MANDATORY integer\
    \ job state and\n   status objects.  The Attribute table consists of multiple\
    \ entries per\n   job that specify (1) job and document identification and parameters,\n\
    \   (2) requested resources, and (3) consumed resources during and after\n   job\
    \ processing/printing.  A larger number of job attributes are\n   defined as textual\
    \ conventions that an agent SHALL return if the\n   server or device implements\
    \ the functionality so represented and the\n   agent has access to the information.\n"
- title: 1.1 Types of Information in the MIB
  contents:
  - "1.1 Types of Information in the MIB\n   The job MIB is intended to provide the\
    \ following information for the\n   indicated Role Models in the Printer MIB [print-mib]\
    \ (Appendix D -\n   Roles of Users).\n      User:\n         Provide the ability\
    \ to identify the least busy printer.  The\n         user will be able to determine\
    \ the number and size of jobs\n         waiting for each printer.  No attempt\
    \ is made to actually\n         predict the length of time that jobs will take.\n\
    \         Provide the ability to identify the current status of the\n        \
    \ user's job (user queries).\n         Provide a timely indication that the job\
    \ has completed and\n         where it can be found.\n         Provide error and\
    \ diagnostic information for jobs that did not\n         successfully complete.\n\
    \      Operator:\n         Provide a presentation of the state of all the jobs\
    \ in the\n         print system.\n         Provide the ability to identify the\
    \ user that submitted the\n         print job.\n         Provide the ability to\
    \ identify the resources required by each\n         job.\n         Provide the\
    \ ability to define which physical printers are\n         candidates for the print\
    \ job.\n         Provide some idea of how long each job will take.  However,\n\
    \         exact estimates of time to process a job is not being\n         attempted.\
    \  Instead, objects are included that allow the\n         operator to be able\
    \ to make gross estimates.\n      Capacity Planner:\n         Provide the ability\
    \ to determine printer utilization as a\n         function of time.\n        \
    \ Provide the ability to determine how long jobs wait before\n         starting\
    \ to print.\n      Accountant:\n         Provide information to allow the creation\
    \ of a record of\n         resources consumed and printer usage data for charging\
    \ users or\n         groups for resources consumed.\n         Provide information\
    \ to allow the prediction of consumable usage\n         and resource need.\n \
    \  The MIB supports printers that can contain more than one job at a\n   time,\
    \ but still be usable for low end printers that only contain a\n   single job\
    \ at a time.  In particular, the MIB supports the needs of\n   Windows and other\
    \ PC environments for managing low-end direct-connect\n   (serial or parallel)\
    \ and networked devices without unnecessary\n   overhead or complexity, while\
    \ also providing for higher end systems\n   and devices.\n"
- title: 1.2 Types of Job Monitoring Applications
  contents:
  - "1.2 Types of Job Monitoring Applications\n   The Job Monitoring MIB is designed\
    \ for the following types of\n   monitoring applications:\n        1. Monitor\
    \ a single job starting when the job is submitted and\n           ending a defined\
    \ period after the job completes.  The Job\n           Submission ID table provides\
    \ the map to find the specific job\n           to be monitored.\n        2. Monitor\
    \ all 'active' jobs in a queue, which this\n           specification generalizes\
    \ to a \"job set\".  End users may use\n           such a program when selecting\
    \ a least busy printer, so the\n           MIB is designed for such a program\
    \ to start up quickly and\n           find the information needed quickly without\
    \ having to read\n           all (completed) jobs in order to find the active\
    \ jobs.\n           System operators may also use such a program, in which case\n\
    \           it would be running for a long period of time and may also be\n  \
    \         interested in the jobs that have completed.  Finally such a\n      \
    \     program may be used to provide an enhanced console and\n           logging\
    \ capability.\n        3. Collect resource usage for accounting or system utilization\n\
    \           purposes that copy the completed job statistics to an\n          \
    \ accounting system. It is recognized that depending on\n           accounting\
    \ programs to copy MIB data during the job-retention\n           period is somewhat\
    \ unreliable, since the accounting program\n           may not be running (or\
    \ may have crashed).  Such a program is\n           also expected to keep a shadow\
    \ copy of the entire Job\n           Attribute table including completed, canceled,\
    \ and aborted\n           jobs which the program updates on each polling cycle.\
    \  Such a\n           program polls at the rate of the persistence of the Attribute\n\
    \           table.  The design is not optimized to help such an\n           application\
    \ determine which jobs are completed, canceled, or\n           aborted.  Instead,\
    \ the application SHOULD query each job that\n           the application's shadow\
    \ copy shows was not complete,\n           canceled, or aborted at the previous\
    \ poll cycle to see if it\n           is now complete or canceled, plus any new\
    \ jobs that have been\n           submitted.\n   The MIB provides a set of objects\
    \ that represent a compatible subset\n   of job and document attributes of the\
    \ ISO DPA standard [iso-dpa] and\n   the Internet Printing Protocol (IPP) [ipp-model],\
    \ so that coherence\n   is maintained between these two protocols and the information\n\
    \   presented to end users and system operators by monitoring\n   applications.\
    \  However, the job monitoring MIB is intended to be used\n   with printers that\
    \ implement other job submitting and management\n   protocols, such as IEEE 1284.1\
    \ (TIPSI) [tipsi], as well as with ones\n   that do implement ISO DPA.  Thus the\
    \ job monitoring MIB does not\n   require implementation of either the ISO DPA\
    \ or IPP protocols.\n   The MIB is designed so that an additional MIB(s) can be\
    \ specified in\n   the future for monitoring multi-function (scan, FAX, copy)\
    \ jobs as an\n   augmentation to this MIB.\n"
- title: 2  Terminology and Job Model
  contents:
  - "2  Terminology and Job Model\n   This section defines the terms that are used\
    \ in this specification\n   and the general model for jobs in alphabetical order.\n\
    \      NOTE - Existing systems use conflicting terms, so these terms are\n   \
    \   drawn from the ISO 10175 Document Printing Application (DPA)\n      standard\
    \ [iso-dpa].  For example, PostScript systems use the term\n      session for\
    \ what is called a job in this specification and the\n      term job to mean what\
    \ is called a document in this specification.\n   Accounting Application:  The\
    \ SNMP management application that copies\n   job information to some more permanent\
    \ medium so that another\n   application can perform accounting on the data for\
    \ Accountants, Asset\n   Managers, and Capacity Planners use.\n   Agent:  The\
    \ network entity that accepts SNMP requests from a monitor\n   or accounting application\
    \ and provides access to the instrumentation\n   for managing jobs modeled by\
    \ the management objects defined in the\n   Job Monitoring MIB module for a server\
    \ or a device.\n   Attribute:  A name, value-pair that specifies a job or document\n\
    \   instruction, a status, or a condition of a job or a document that has\n  \
    \ been submitted to a server or device.  A particular attribute NEED\n   NOT be\
    \ present in each job instance.  In other words, attributes are\n   present in\
    \ a job instance only when there is a need to express the\n   value, either because\
    \ (1) the client supplied a value in the job\n   submission protocol, (2) the\
    \ document data contained an embedded\n   attribute, or (3) the server or device\
    \ supplied a default value.  An\n   agent MAY represent an attribute as an entry\
    \ (row) in the Attribute\n   table in this MIB in which entries are present only\
    \ when necessary.\n   Attributes are identified in this MIB by an enum.\n   Client:\
    \  The network entity that end users use to submit jobs to\n   spoolers, servers,\
    \ or printers and other devices, depending on the\n   configuration, using any\
    \ job submission protocol over a serial or\n   parallel port to a directly-connected\
    \ device or over the network to a\n   networked-connected device.\n   Device:\
    \  A hardware entity that (1) interfaces to humans, such as a\n   device that\
    \ produces marks on paper or scans marks on paper to\n   produce an electronic\
    \ representation, (2) accesses digital media,\n   such as CD-ROMs, or (3) interfaces\
    \ electronically to another device,\n   such as sends FAX data to another FAX\
    \ device.\n   Document:  A sub-section within a job that contains print data and\n\
    \   document instructions that apply to just the document.\n   Document Instruction:\
    \  An instruction specifying how to process the\n   document.  Document instructions\
    \ MAY be passed in the job submission\n   protocol separate from the actual document\
    \ data, or MAY be embedded\n   in the document data or a combination, depending\
    \ on the job\n   submission protocol and implementation.\n   End User:  A user\
    \ that uses a client to submit a print job.  See\n   \"user\".\n   Impression:\
    \  For a print job, an impression is the passage of the\n   entire side of a sheet\
    \ by the marker, whether or not any marks are\n   made and independent of the\
    \ number of passes that the side makes past\n   the marker.  Thus a four pass\
    \ color process counts as a single\n   impression, as does highlight color.  Impression\
    \ counters count all\n   kinds:  monochrome, highlight color, and full process\
    \ color, while\n   full color counters only count full color impressions, and\
    \ high light\n   color counters only count high light color impressions.\n   One-sided\
    \ processing involves one impression per sheet.  Two-sided\n   processing involves\
    \ two impressions per sheet.  If a two-sided\n   document has an odd number of\
    \ pages, the last sheet still counts as\n   two impressions, if that sheet makes\
    \ two passes through the marker or\n   the marker marks on both sides of a sheet\
    \ in a single pass.  Two-up\n   printing is the placement of two logical pages\
    \ on one side of a sheet\n   and so is still a single impression.  See \"page\"\
    \ and \"sheet\".\n   NOTE - Since impressions include blank sides, it is suggested\
    \ that\n   accounting application implementers consider charging for sheets,\n\
    \   rather than impressions, possibly using the value of the sides\n   attribute\
    \ to select different charges for one-sided versus two-sided\n   printing, since\
    \ some users may think that impressions don't include\n   blank sides.\n   Internal\
    \ Collation: The production of the sheets for each document\n   copy performed\
    \ within the printing device by making multiple passes\n   over either the source\
    \ or an intermediate representation of the\n   document.\n   Job:  A unit of work\
    \ whose results are expected together without\n   interjection of unrelated results.\
    \  A job contains one or more\n   documents.\n   Job Accounting:  The activity\
    \ of a management application of\n   accessing the MIB and recording what happens\
    \ to the job during and\n   after the processing of the job.\n   Job Instruction:\
    \  An instruction specifying how, when, or where the\n   job is to be processed.\
    \  Job instructions MAY be passed in the job\n   submission protocol or MAY be\
    \ embedded in the document data or a\n   combination depending on the job submission\
    \ protocol and\n   implementation.\n   Job Monitoring (using SNMP):  The activity\
    \ of a management\n   application of accessing the MIB and (1) identifying jobs\
    \ in the job\n   tables being processed by the server, printer or other devices,\
    \ and\n   (2) displaying information to the user about the processing of the\n\
    \   job.\n   Job Monitoring Application:  The SNMP management application that\
    \ End\n   Users, and System Operators use to monitor jobs using SNMP.  A\n   monitor\
    \ MAY be either a separate application or MAY be part of the\n   client that also\
    \ submits jobs.  See \"monitor\".\n   Job Set:  A group of jobs that are queued\
    \ and scheduled together\n   according to a specified scheduling algorithm for\
    \ a specified device\n   or set of devices.  For implementations that embed the\
    \ SNMP agent in\n   the device, the MIB job set normally represents all the jobs\
    \ known to\n   the device, so that the implementation only implements a single\
    \ job\n   set.  If the SNMP agent is implemented in a server that controls one\n\
    \   or more devices, each MIB job set represents a job queue for (1) a\n   specific\
    \ device or (2) set of devices, if the server uses a single\n   queue to load\
    \ balance between several devices.  Each job set is\n   disjoint; no job SHALL\
    \ be represented in more than one MIB job set.\n   Monitor:  Short for Job Monitoring\
    \ Application.\n   Page:  A page is a logical division of the original source\
    \ document.\n   Number up is the imposition of more than one page on a single\
    \ side of\n   a sheet.  See \"impression\" and \"sheet\" and \"two-up\".\n   Proxy:\
    \  An agent that acts as a concentrator for one or more other\n   agents by accepting\
    \ SNMP operations on the behalf of one or more\n   other agents, forwarding them\
    \ on to those other agents, gathering\n   responses from those other agents and\
    \ returning them to the original\n   requesting monitor.\n   Queuing:  The act\
    \ of a device or server of ordering (queuing) the\n   jobs for the purposes of\
    \ scheduling the jobs to be processed.\n   Printer:  A device that puts marks\
    \ on media.\n   Server:  A network entity that accepts jobs from clients and in\
    \ turn\n   submits the jobs to printers and other devices that may be directly\n\
    \   connected to the server via a serial or parallel port or may be on\n   the\
    \ network.  A server MAY be a printer supervisor control program,\n   or a print\
    \ spooler.\n   Sheet:  A sheet is a single instance of a medium, whether printing\
    \ on\n   one or both sides of the medium.  See \"impression\" and \"page\".\n\
    \   SNMP Information Object:  A name, value-pair that specifies an\n   action,\
    \ a status, or a condition in an SNMP MIB.  Objects are\n   identified in SNMP\
    \ by an OBJECT IDENTIFIER.\n   Spooler:  A server that accepts jobs, spools the\
    \ data, and decides\n   when and on which printer to print the job.  A spooler\
    \ is a client to\n   a printer or a printer supervisor, depending on implementation.\n\
    \   Spooling:  The act of a device or server of (1) accepting jobs and\n   (2)\
    \ writing the job's attributes and document data on to secondary\n   storage.\n\
    \   Stacked:  When a media sheet is placed in an output bin of a device.\n   Supervisor:\
    \  A server that contains a control program that controls a\n   printer or other\
    \ device.  A supervisor is a client to the printer or\n   other device.\n   System\
    \ Operator:  A user that uses a monitor to monitor the system\n   and carries\
    \ out tasks to keep the system running.\n   System Administrator:  A user that\
    \ specifies policy for the system.\n   Two-up:  The placement of two pages on\
    \ one side of a sheet so that\n   each side or impressions counts as two pages.\
    \  See \"page\" and\n   \"sheet\".\n   User:  A person that uses a client or a\
    \ monitor.  See \"end user\".\n"
- title: 2.1 System Configurations for the Job Monitoring MIB
  contents:
  - "2.1 System Configurations for the Job Monitoring MIB\n   This section enumerates\
    \ the three configurations in which the Job\n   Monitoring MIB is intended to\
    \ be used.  To simplify the pictures, the\n   devices are shown as printers. \
    \ See section 1.1 entitled \"Types of\n   Information in the MIB\".\n   The diagram\
    \ in the Printer MIB [print-mib] entitled: \"One Printer's\n   View of the Network\"\
    \ is assumed for this MIB as well.  Please refer\n   to that diagram to aid in\
    \ understanding the following system\n   configurations.\n"
- title: 2.1.1 Configuration 1 - client-printer
  contents:
  - "2.1.1 Configuration 1 - client-printer\n   In the client-printer configuration\
    \ 1, the client(s) submit jobs\n   directly to the printer, either by some direct\
    \ connect, or by network\n   connection.\n   The job submitting client and/or\
    \ monitoring application monitor jobs\n   by communicating directly with an agent\
    \ that is part of the printer.\n   The agent in the printer SHALL keep the job\
    \ in the Job Monitoring MIB\n   as long as the job is in the printer, plus a defined\
    \ time period\n   after the job enters the completed state in which accounting\
    \ programs\n   can copy out the accounting data from the Job Monitoring MIB.\n\
    \                  all         end-user     ######## SNMP query\n            \
    \   +-------+     +--------+    ---- job submission\n               |monitor|\
    \     | client |\n               +---#---+     +--#--+--+\n                  \
    \ #            #  |\n                   # ############  |\n                  \
    \ # #             |\n            +==+===#=#=+==+        |\n            |  | agent\
    \ |  |        |\n            |  +-------+  |        |\n            |   PRINTER\
    \   <--------+\n            |             | Print Job Delivery Channel\n     \
    \       |             |\n            +=============+\n   Figure 2-1 - Configuration\
    \ 1 - client-printer - agent in the printer\n   The Job Monitoring MIB is designed\
    \ to support the following\n   relationships (not shown in Figure 2-1):\n    \
    \    1. Multiple clients MAY submit jobs to a printer.\n        2. Multiple clients\
    \ MAY monitor a printer.\n        3. Multiple monitors MAY monitor a printer.\n\
    \        4. A client MAY submit jobs to multiple printers.\n        5. A monitor\
    \ MAY monitor multiple printers.\n"
- title: 2.1.2 Configuration 2 - client-server-printer - agent in the server
  contents:
  - "2.1.2 Configuration 2 - client-server-printer - agent in the server\n   In the\
    \ client-server-printer configuration 2, the client(s) submit\n   jobs to an intermediate\
    \ server by some network connection, not\n   directly to the printer.  While configuration\
    \ 2 is included, the\n   design center for this MIB is configurations 1 and 3.\n\
    \   The job submitting client and/or monitoring application monitor jobs\n   by\
    \ communicating directly with:\n      A Job Monitoring MIB agent that is part\
    \ of the server (or a front\n      for the server)\n   There is no SNMP Job Monitoring\
    \ MIB agent in the printer in\n   configuration 2, at least that the client or\
    \ monitor are aware.  In\n   this configuration, the agent SHALL return the current\
    \ values of the\n   objects in the Job Monitoring MIB both for jobs the server\
    \ keeps and\n   jobs that the server has submitted to the printer.  The Job\n\
    \   Monitoring MIB agent obtains the required information from the\n   printer\
    \ by a method that is beyond the scope of this document.  The\n   agent in the\
    \ server SHALL keep the job in the Job Monitoring MIB in\n   the server as long\
    \ as the job is in the printer, plus a defined time\n   period after the job enters\
    \ the completed state in which accounting\n   programs can copy out the accounting\
    \ data from the Job Monitoring\n   MIB.\n                all          end-user\n\
    \             +-------+     +----------+\n             |monitor|     |  client\
    \  |     ######## SNMP query\n             +---+---#     +---#----+-+     ****\
    \ non-SNMP cntrl\n                      #        #    |       ---- job submission\n\
    \                       #       #    |\n                        #      #    |\n\
    \                         #=====#=+==v==+\n                         | agent |\
    \     |\n                         +-------+     |\n                         |\
    \    server   |\n                         +----+-----+--+\n                  \
    \    control *     |\n                     **********     |\n                \
    \     *              |\n            +========v====+         |\n            | \
    \            |         |\n            |             |         |\n            |\
    \   PRINTER   <---------+\n            |             | Print Job Delivery Channel\n\
    \            |             |\n            +=============+\n   Figure 2-2 - Configuration\
    \ 2 - client-server-printer - agent in the\n   server\n   The Job Monitoring MIB\
    \ is designed to support the following\n   relationships (not shown in Figure\
    \ 2-2):\n        1. Multiple clients MAY submit jobs to a server.\n        2.\
    \ Multiple clients MAY monitor a server.\n        3. Multiple monitors MAY monitor\
    \ a server.\n        4. A client MAY submit jobs to multiple servers.\n      \
    \  5. A monitor MAY monitor multiple servers.\n        6. Multiple servers MAY\
    \ submit jobs to a printer.\n        7. Multiple servers MAY control a printer.\n"
- title: 2.1.3 Configuration 3 - client-server-printer - client monitors printer
  contents:
  - "2.1.3 Configuration 3 - client-server-printer - client monitors printer\n   \
    \   agent and server\n   In the client-server-printer configuration 3, the client(s)\
    \ submit\n   jobs to an intermediate server by some network connection, not\n\
    \   directly to the printer.  That server does not contain a Job\n   Monitoring\
    \ MIB agent.\n   The job submitting client and/or monitoring application monitor\
    \ jobs\n   by communicating directly with:\n        1. The server using some undefined\
    \ protocol to monitor jobs in\n           the server (that does not contain the\
    \ Job Monitoring MIB) AND\n        2. A Job Monitoring MIB agent that is part\
    \ of the printer to\n           monitor jobs after the server passes the jobs\
    \ to the printer.\n           In such configurations, the server deletes its copy\
    \ of the\n           job from the server after submitting the job to the printer\n\
    \           usually almost immediately (before the job does much\n           processing,\
    \ if any).\n   In configuration 3, the agent (in the printer) SHALL keep the values\n\
    \   of the objects in the Job Monitoring MIB that the agent implements\n   updated\
    \ for a job that the server has submitted to the printer.  The\n   agent SHALL\
    \ obtain information about the jobs submitted to the\n   printer from the server\
    \ (either in the job submission protocol, in\n   the document data, or by direct\
    \ query of the server), in order to\n   populate some of the objects the Job Monitoring\
    \ MIB in the printer.\n   The agent in the printer SHALL keep the job in the Job\
    \ Monitoring MIB\n   as long as the job is in the Printer, and longer in order\
    \ to\n   implement the completed state in which monitoring programs can copy\n\
    \   out the accounting data from the Job Monitoring MIB.\n                all\
    \          end-user\n             +-------+     +----------+\n             |monitor|\
    \     |  client  |     ######## SNMP query\n             +---+---*     +---*----+-+\
    \     **** non-SNMP query\n                 #    *        *    |       ---- job\
    \ submission\n                 #     *       *    |\n                 #      *\
    \      *    |\n                 #       *=====v====v==+\n                 #  \
    \     |             |\n                 #       |    server   |\n            \
    \     #       |             |\n                 #       +----#-----+--+\n    \
    \             #    optional#     |\n                 #   ##########     |\n  \
    \               #   #              |\n            +==+=v===v=+==+         |\n\
    \            |  | agent |  |         |\n            |  +-------+  |         |\n\
    \            |   PRINTER   <---------+\n            |             | Print Job\
    \ Delivery Channel\n            |             |\n            +=============+\n\
    \   Figure 2-3 - Configuration 3 - client-server-printer - client\n   monitors\
    \ printer agent and server\n   The Job Monitoring MIB is designed to support the\
    \ following\n   relationships (not shown in Figure 2-3):\n        1. Multiple\
    \ clients MAY submit jobs to a server.\n        2. Multiple clients MAY monitor\
    \ a server.\n        3. Multiple monitors MAY monitor a server.\n        4. A\
    \ client MAY submit jobs to multiple servers.\n        5. A monitor MAY monitor\
    \ multiple servers.\n        6. Multiple servers MAY submit jobs to a printer.\n\
    \        7. Multiple servers MAY control a printer.\n"
- title: 3  Managed Object Usage
  contents:
  - "3  Managed Object Usage\n   This section describes the usage of the objects in\
    \ the MIB.\n"
- title: 3.1 Conformance Considerations
  contents:
  - "3.1 Conformance Considerations\n   In order to achieve interoperability between\
    \ job monitoring\n   applications and job monitoring agents, this specification\
    \ includes\n   the conformance requirements for both monitoring applications and\n\
    \   agents.\n"
- title: 3.1.1 Conformance Terminology
  contents:
  - "3.1.1 Conformance Terminology\n   This specification uses the verbs: \"SHALL\"\
    , \"SHOULD\", \"MAY\", and\n   \"NEED NOT\" to specify conformance requirements\
    \ according to RFC 2119\n   [RFC2119] as follows:\n      \"SHALL\":  indicates\
    \ an action that the subject of the sentence\n      must implement in order to\
    \ claim conformance to this specification\n      \"MAY\":  indicates an action\
    \ that the subject of the sentence does\n      not have to implement in order\
    \ to claim conformance to this\n      specification, in other words that action\
    \ is an implementation\n      option\n      \"NEED NOT\":  indicates an action\
    \ that the subject of the sentence\n      does not have to implement in order\
    \ to claim conformance to this\n      specification.  The verb \"NEED NOT\" is\
    \ used instead of \"may not\",\n      since \"may not\" sounds like a prohibition.\n\
    \      \"SHOULD\":  indicates an action that is recommended for the subject\n\
    \      of the sentence to implement, but is not required, in order to\n      claim\
    \ conformance to this specification.\n"
- title: 3.1.2 Agent Conformance Requirements
  contents:
  - "3.1.2 Agent Conformance Requirements\n   A conforming agent:\n      1. SHALL\
    \ implement all MANDATORY groups in this specification.\n      2. SHALL implement\
    \ any attributes if (1) the server or device\n         supports the functionality\
    \ represented by the attribute and (2)\n         the information is available\
    \ to the agent.\n      3. SHOULD implement both forms of an attribute if it implements\
    \ an\n         attribute that permits a choice of INTEGER and OCTET STRING\n \
    \        forms, since implementing both forms may help management\n         applications\
    \ by giving them a choice of representations, since\n         the representation\
    \ are equivalent.  See the JmAttributeTypeTC\n         textual-convention.\n \
    \  NOTE - This MIB, like the Printer MIB, is written following the\n   subset\
    \ of SMIv2 that can be supported by SMIv1 and SNMPv1\n   implementations.\n"
- title: 3.1.2.1 MIB II System Group objects
  contents:
  - "3.1.2.1 MIB II System Group objects\n   The Job Monitoring MIB agent SHALL implement\
    \ all objects in the\n   System Group of MIB-II [mib-II], whether the Printer\
    \ MIB [print-mib]\n   is implemented or not.\n"
- title: 3.1.2.2 MIB II Interface Group objects
  contents:
  - "3.1.2.2 MIB II Interface Group objects\n   The Job Monitoring MIB agent SHALL\
    \ implement all objects in the\n   Interfaces Group of MIB-II [mib-II], whether\
    \ the Printer MIB [print-\n   mib] is implemented or not.\n"
- title: 3.1.2.3 Printer MIB objects
  contents:
  - "3.1.2.3 Printer MIB objects\n   If the agent is providing access to a device\
    \ that is a printer, the\n   agent SHALL implement all of the MANDATORY objects\
    \ in the Printer MIB\n   [print-mib] and all the objects in other MIBs that conformance\
    \ to the\n   Printer MIB requires, such as the Host Resources MIB [hr-mib].  If\n\
    \   the agent is providing access to a server that controls one or more\n   direct-connect\
    \ or networked printers, the agent NEED NOT implement\n   the Printer MIB and\
    \ NEED NOT implement the Host Resources MIB.\n"
- title: 3.1.3 Job Monitoring Application Conformance Requirements
  contents:
  - "3.1.3 Job Monitoring Application Conformance Requirements\n   A conforming job\
    \ monitoring application:\n        1. SHALL accept the full syntactic range for\
    \ all objects in all\n           MANDATORY groups and all MANDATORY attributes\
    \ that are\n           required to be implemented by an agent according to Section\n\
    \           3.1.2 and SHALL either present them to the user or ignore\n      \
    \     them.\n        2. SHALL accept the full syntactic range for all attributes,\n\
    \           including enum and bit values specified in this specification\n  \
    \         and additional ones that may be registered with the PWG and\n      \
    \     SHALL either present them to the user or ignore them.  In\n           particular,\
    \ a conforming job monitoring application SHALL not\n           malfunction when\
    \ receiving any standard or registered enum or\n           bit values.  See Section\
    \ 3.7 entitled \"IANA and PWG\n           Registration Considerations\".\n   \
    \     3. SHALL NOT fail when operating with agents that materialize\n        \
    \   attributes after the job has been submitted, as opposed to\n           when\
    \ the job is submitted.\n        4. SHALL, if it supports a time attribute, accept\
    \ either form of\n           the time attribute, since agents are free to implement\
    \ either\n           time form.\n"
- title: 3.2 The Job Tables and the Oldest Active and Newest Active Indexes
  contents:
  - "3.2 The Job Tables and the Oldest Active and Newest Active Indexes\n   The jmJobTable\
    \ and jmAttributeTable contain objects and attributes,\n   respectively, for each\
    \ job in a job set.  These first two indexes\n   are:\n        1. jmGeneralJobSetIndex\
    \ - which job set\n        2. jmJobIndex - which job in the job set\n   In order\
    \ for a monitoring application to quickly find that active\n   jobs (jobs in the\
    \ pending, processing, or processingStopped states),\n   the MIB contains two\
    \ indexes:\n        1. jmGeneralOldestActiveJobIndex - the index of the active\
    \ job\n           that has been in the tables the longest.\n        2. jmGeneralNewestActiveJobIndex\
    \ - the index of the active job\n           that has been most recently added\
    \ to the tables.\n   The agent SHALL assign the next incremental value of jmJobIndex\
    \ to\n   the job, when a new job is accepted by the server or device to which\n\
    \   the agent is providing access.  If the incremented value of\n   jmJobIndex\
    \ would exceed the implementation-defined maximum value for\n   jmJobIndex, the\
    \ agent SHALL 'wrap' back to 1.  An agent uses the\n   resulting value of jmJobIndex\
    \ for storing information in the\n   jmJobTable and the jmAttributeTable about\
    \ the job.\n   It is recommended that the largest value for jmJobIndex be much\n\
    \   larger than the maximum number of jobs that the implementation can\n   contain\
    \ at a single time, so as to minimize the premature re-use of a\n   jmJobIndex\
    \ value for a newer job while clients retain the same '\n   stale' value for an\
    \ older job.\n   It is recommended that agents that are providing access to\n\
    \   servers/devices that already allocate job-identifiers for jobs as\n   integers\
    \ use the same integer value for the jmJobIndex.  Then\n   management applications\
    \ using this MIB and applications using other\n   protocols will see the same\
    \ job identifiers for the same jobs.\n   Agents providing access to systems that\
    \ contain jobs with a job\n   identifier of 0 SHALL map the job identifier value\
    \ 0 to a jmJobIndex\n   value that is one higher than the highest job identifier\
    \ value that\n   any job can have on that system.  Then only job 0 will have a\n\
    \   different job-identifier value than the job's jmJobIndex value.\n   NOTE -\
    \ If a server or device accepts jobs using multiple job\n   submission protocols,\
    \ it may be difficult for the agent to meet the\n   recommendation to use the\
    \ job-identifier values that the server or\n   device assigns as the jmJobIndex\
    \ value, unless the server/device\n   assigns job-identifiers for each of its\
    \ job submission protocols from\n   the same job-identifier number space.\n  \
    \ Each time a new job is accepted by the server or device that the\n   agent is\
    \ providing access to AND that job is to be 'active' (pending,\n   processing,\
    \ or processingStopped, but not pendingHeld), the agent\n   SHALL copy the value\
    \ of the job's jmJobIndex to the\n   jmGeneralNewestActiveJobIndex object.  If\
    \ the new job is to be '\n   inactive' (pendingHeld state), the agent SHALL not\
    \ change the value\n   of jmGeneralNewestActiveJobIndex object (though the agent\
    \ SHALL\n   assign the next incremental jmJobIndex value to the job).\n   When\
    \ a job transitions from one of the 'active' job states (pending,\n   processing,\
    \ processingStopped) to one of the 'inactive' job states\n   (pendingHeld, completed,\
    \ canceled, or aborted), with a jmJobIndex\n   value that matches the jmGeneralOldestActiveJobIndex\
    \ object, the\n   agent SHALL advance (or wrap) the value to the next oldest 'active'\n\
    \   job, if any.  See the JmJobStateTC textual-convention for a\n   definition\
    \ of the job states.\n   Whenever a job transitions from one of the 'inactive'\
    \ job states to\n   one of the 'active' job states (from pendingHeld to pending\
    \ or\n   processing), the agent SHALL update the value of either the\n   jmGeneralOldestActiveJobIndex\
    \ or the jmGeneralNewestActiveJobIndex\n   objects, or both, if the job's jmJobIndex\
    \ value is outside the range\n   between jmGeneralOldestActiveJobIndex and\n \
    \  jmGeneralNewestActiveJobIndex.\n   When all jobs become 'inactive', i.e., enter\
    \ the pendingHeld,\n   completed, canceled, or aborted states, the agent SHALL\
    \ set the value\n   of both the jmGeneralOldestActiveJobIndex and\n   jmGeneralNewestActiveJobIndex\
    \ objects to 0.\n   NOTE - Applications that wish to efficiently access all of\
    \ the active\n   jobs MAY use jmGeneralOldestActiveJobIndex value to start with\
    \ the\n   oldest active job and continue until they reach the index value equal\n\
    \   to jmGeneralNewestActiveJobIndex, skipping over any pendingHeld,\n   completed,\
    \ canceled, or aborted jobs that might intervene.\n   If an application detects\
    \ that the jmGeneralNewestActiveJobIndex is\n   smaller than jmGeneralOldestActiveJobIndex,\
    \ the job index has\n   wrapped.  In this case, the application SHALL reset the\
    \ index to 1\n   when the end of the table is reached and continue the GetNext\n\
    \   operations to find the rest of the active jobs.\n   NOTE - Applications detect\
    \ the end of the jmAttributeTable table when\n   the OID returned by the GetNext\
    \ operation is an OID in a different\n   MIB.  There is no object in this MIB\
    \ that specifies the maximum value\n   for the jmJobIndex supported by the implementation.\n\
    \   When the server or device is power-cycled, the agent SHALL remember\n   the\
    \ next jmJobIndex value to be assigned, so that new jobs are not\n   assigned\
    \ the same jmJobIndex as recent jobs before the power cycle.\n"
- title: 3.3 The Attribute Mechanism and the Attribute Table(s)
  contents:
  - "3.3 The Attribute Mechanism and the Attribute Table(s)\n   Attributes are similar\
    \ to information objects, except that attributes\n   are identified by an enum,\
    \ instead of an OID, so that attributes may\n   be registered without requiring\
    \ a new MIB.  Also an implementation\n   that does not have the functionality\
    \ represented by the attribute can\n   omit the attribute entirely, rather than\
    \ having to return a\n   distinguished value.  The agent is free to materialize\
    \ an attribute\n   in the jmAttributeTable as soon as the agent is aware of the\
    \ value of\n   the attribute.\n   The agent materializes job attributes in a four-indexed\n\
    \   jmAttributeTable:\n        1. jmGeneralJobSetIndex - which job set\n     \
    \   2. jmJobIndex - which job in the job set\n        3. jmAttributeTypeIndex\
    \ - which attribute\n        4. jmAttributeInstanceIndex - which attribute instance\
    \ for those\n           attributes that can have multiple values per job.\n  \
    \ Some attributes represent information about a job, such as a file-\n   name,\
    \ a document-name, a submission-time or a completion time.  Other\n   attributes\
    \ represent resources required, e.g., a medium or a\n   colorant, etc. to process\
    \ the job before the job starts processing OR\n   to indicate the amount of the\
    \ resource consumed during and after\n   processing, e.g., pages completed or\
    \ impressions completed.  If both\n   a required and a consumed value of a resource\
    \ is needed, this\n   specification assigns two separate attribute enums in the\
    \ textual\n   convention.\n   NOTE - The table of contents lists all the attributes\
    \ in order.  This\n   order is the order of enum assignments which is the order\
    \ that the\n   SNMP GetNext operation returns attributes.  Most attributes apply\
    \ to\n   all three configurations covered by this MIB specification (see\n   section\
    \ 2.1 entitled \"System Configurations for the Job Monitoring\n   MIB\").  Those\
    \ attributes that apply to a particular configuration are\n   indicated as 'Configuration\
    \ n:' and SHALL NOT be used with other\n   configurations.\n"
- title: 3.3.1 Conformance of Attribute Implementation
  contents:
  - "3.3.1 Conformance of Attribute Implementation\n   An agent SHALL implement any\
    \ attribute if (1) the server or device\n   supports the functionality represented\
    \ by the attribute and (2) the\n   information is available to the agent.  The\
    \ agent MAY create the\n   attribute row in the jmAttributeTable when the information\
    \ is\n   available or MAY create the row earlier with the designated 'unknown'\n\
    \   value appropriate for that attribute.  See next section.\n   If the server\
    \ or device does not implement or does not provide access\n   to the information\
    \ about an attribute, the agent SHOULD NOT create\n   the corresponding row in\
    \ the jmAttributeTable.\n"
- title: 3.3.2 Useful, 'Unknown', and 'Other' Values for Objects and Attributes
  contents:
  - "3.3.2 Useful, 'Unknown', and 'Other' Values for Objects and Attributes\n   Some\
    \ attributes have a 'useful' Integer32 value, some have a 'useful'\n   OCTET STRING\
    \ value, some MAY have either or both depending on\n   implementation, and some\
    \ MUST have both.  See the JmAttributeTypeTC\n   textual convention for the specification\
    \ of each attribute.\n   SNMP requires that if an object cannot be implemented\
    \ because its\n   values cannot be accessed, then a compliant agent SHALL return\
    \ an\n   SNMP error in SNMPv1 or an exception value in SNMPv2.  However, this\n\
    \   MIB has been designed so that 'all' objects can and SHALL be\n   implemented\
    \ by an agent, so that neither the SNMPv1 error nor the\n   SNMPv2 exception value\
    \ SHALL be generated by the agent.  This MIB has\n   also been designed so that\
    \ when an agent materializes an attribute,\n   the agent SHALL materialize a row\
    \ consisting of both the\n   jmAttributeValueAsInteger and jmAttributeValueAsOctets\
    \ objects.\n   In general, values for objects and attributes have been chosen\
    \ so\n   that a management application will be able to determine whether a '\n\
    \   useful', 'unknown', or 'other' value is available.  When a useful\n   value\
    \ is not available for an object, that agent SHALL return a\n   zero-length string\
    \ for octet strings, the value 'unknown(2)' for\n   enums, a '0' value for an\
    \ object that represents an index in another\n   table, and a value '-2' for counting\
    \ integers.\n   Since each attribute is represented by a row consisting of both\
    \ the\n   jmAttributeValueAsInteger and jmAttributeValueAsOctets MANDATORY\n \
    \  objects, SNMP requires that the agent SHALL always create an\n   attribute\
    \ row with both objects specified.  However, for most\n   attributes the agent\
    \ SHALL return a \"useful\" value for one of the\n   objects and SHALL return\
    \ the 'other' value for the other object.  For\n   integer only attributes, the\
    \ agent SHALL always return a zero-length\n   string value for the jmAttributeValueAsOctets\
    \ object.  For octet\n   string only attributes, the agent SHALL always return\
    \ a '-1' value\n   for the jmAttributeValueAsInteger object.\n"
- title: 3.3.3 Index Value Attributes
  contents:
  - "3.3.3 Index Value Attributes\n   A number of attributes are indexes in other\
    \ tables.  Such attribute\n   names end with the word 'Index'.  If the agent has\
    \ not (yet) assigned\n   an index value for a particular index attribute for a\
    \ job, the agent\n   SHALL either: (1) return the value 0 or (2) not add this\
    \ attribute to\n   the jmAttributeTable until the index value is assigned.  In\
    \ the\n   interests of brevity, the semantics for 0 is specified once here and\n\
    \   is not repeated for each index attribute specification and a DEFVAL\n   of\
    \ 0 is implied, even though the DEFVAL for jmAttributeValueAsInteger\n   is -2.\n"
- title: 3.3.4 Data Sub-types and Attribute Naming Conventions
  contents:
  - "3.3.4 Data Sub-types and Attribute Naming Conventions\n   Many attributes are\
    \ sub-typed to give a more specific data type than\n   Integer32 or OCTET STRING.\
    \  The data sub-type of each attribute is\n   indicated on the first line(s) of\
    \ the description.  Some attributes\n   have several different data sub-type representations.\
    \  When an\n   attribute has both an Integer32 data sub-type and an OCTET STRING\n\
    \   data sub-type, the attribute can be represented in a single row in\n   the\
    \ jmAttributeTable.  In this case, the data sub-type name is not\n   included\
    \ as the last part of the name of the attribute, e.g.,\n   documentFormat(38)\
    \ which is both an enum and/or a name.  When the\n   data sub-types cannot be\
    \ represented by a single row in the\n   jmAttributeTable, each such representation\
    \ is considered a separate\n   attribute and is assigned a separate name and enum\
    \ value.  For these\n   attributes, the name of the data sub-type is the last\
    \ part of the\n   name of the attribute: Name, Index, DateAndTime, TimeStamp,\
    \ etc.  For\n   example, documentFormatIndex(37) is an index.\n   NOTE: The Table\
    \ of Contents also lists the data sub-type and/or data\n   sub-types of each attribute,\
    \ using the textual-convention name when\n   such is defined.  The following abbreviations\
    \ are used in the Table\n   of Contents as shown:\n     'Int32(-2..)'     Integer32\
    \ (-2..2147483647)\n     'Int32(0..)'      Integer32 (0..2147483647)\n     'Int32(1..)'\
    \      Integer32 (1..2147483647)\n     'Int32(m..n)'     For all other Integer\
    \ ranges, the lower\n                       and upper bound of the range is\n\
    \                       indicated.\n     'UTF8String63'    JmUTF8StringTC (SIZE(0..63))\n\
    \     'JobString63'     JmJobStringTC (SIZE(0..63))\n     'Octets63'        OCTET\
    \ STRING (SIZE(0..63))\n     'Octets(m..n)'    For all other OCTET STRING ranges,\
    \ the\n                       exact range is indicated.\n"
- title: 3.3.5 Single-Value (Row) Versus Multi-Value (MULTI-ROW) Attributes
  contents:
  - "3.3.5 Single-Value (Row) Versus Multi-Value (MULTI-ROW) Attributes\n   Most attributes\
    \ have only one row per job.  However, a few attributes\n   can have multiple\
    \ values per job or even per document, where each\n   value is a separate row\
    \ in the jmAttributeTable.  Unless indicated\n   with 'MULTI-ROW:' in the JmAttributeTypeTC\
    \ description, an agent\n   SHALL ensure that each attribute occurs only once\
    \ in the\n   jmAttributeTable for a job.  Most of the 'MULTI-ROW' attributes do\n\
    \   not allow duplicate values, i.e., the agent SHALL ensure that each\n   value\
    \ occurs only once for a job.  Only if the specification of the '\n   MULTI-ROW'\
    \ attribute also says \"There is no restriction on the same\n   xxx occurring\
    \ in multiple rows\" can the agent allow duplicate values\n   to occur for the\
    \ job.\n   NOTE - Duplicates are allowed for 'extensive' 'MULTI-ROW' attributes,\n\
    \   such as fileName(34) or documentName(35) which are specified to be '\n   per-document'\
    \ attributes, but are not allowed for 'intensive' '\n   MULTI-ROW' attributes,\
    \ such as mediumConsumed(171) and\n   documentFormat(38) which are specified to\
    \ be 'per-job' attributes.\n"
- title: 3.3.6 Requested Objects and Attributes
  contents:
  - "3.3.6 Requested Objects and Attributes\n   A number of objects and attributes\
    \ record requirements for the job.\n   Such object and attribute names end with\
    \ the word 'Requested'.  In\n   the interests of brevity, the phrase 'requested'\
    \ means: (1) requested\n   by the client (or intervening server) in the job submission\
    \ protocol\n   and may also mean (2) embedded in the submitted document data,\
    \ and/or\n   (3) defaulted by the recipient device or server with the same\n \
    \  semantics as if the requester had supplied, depending on\n   implementation.\
    \  Also if a value is supplied by the job submission\n   client, and the server/device\
    \ determines a better value, through\n   processing or other means, the agent\
    \ MAY return that better value for\n   such object and attribute.\n"
- title: 3.3.7 Consumption Attributes
  contents:
  - "3.3.7 Consumption Attributes\n   A number of objects and attributes record consumption.\
    \  Such\n   attribute names end with the word 'Completed' or 'Consumed'.  If the\n\
    \   job has not yet consumed what that resource is metering, the agent\n   either:\
    \ (1) SHALL return the value 0 or (2) SHALL not add this\n   attribute to the\
    \ jmAttributeTable until the consumption begins.  In\n   the interests of brevity,\
    \ the semantics for 0 is specified once here\n   and is not repeated for each\
    \ consumption attribute specification and\n   a DEFVAL of 0 is implied, even though\
    \ the DEFVAL for\n   jmAttributeValueAsInteger is -2.\n"
- title: 3.3.8 Attribute Specifications
  contents:
  - "3.3.8 Attribute Specifications\n   This section specifies the job attributes.\n\
    \   In the following definitions of the attributes, each description\n   indicates\
    \ whether the useful value of the attribute SHALL be\n   represented using the\
    \ jmAttributeValueAsInteger or the\n   jmAttributeValueAsOctets objects by the\
    \ initial tag: 'INTEGER:' or '\n   OCTETS:', respectively.\n   Some attributes\
    \ allow the agent implementer a choice of useful values\n   of either an integer,\
    \ an octet string representation, or both,\n   depending on implementation.  These\
    \ attributes are indicated with '\n   INTEGER:' AND/OR 'OCTETS:' tags.\n   A very\
    \ few attributes require both objects at the same time to\n   represent a pair\
    \ of useful values (see mediumConsumed(171)).  These\n   attributes are indicated\
    \ with 'INTEGER:' AND 'OCTETS:' tags.  See the\n   jmAttributeGroup for the descriptions\
    \ of these two MANDATORY objects.\n   NOTE - The enum assignments are grouped\
    \ logically with values\n   assigned in groups of 20, so that additional values\
    \ may be registered\n   in the future and assigned a value that is part of their\
    \ logical\n   grouping.\n   Values in the range 2**30 to 2**31-1 are reserved\
    \ for private or\n   experimental usage.  This range corresponds to the same range\n\
    \   reserved in IPP.  Implementers are warned that use of such values may\n  \
    \ conflict with other implementations.  Implementers are encouraged to\n   request\
    \ registration of enum values following the procedures in\n   Section 3.7.1.\n\
    \   NOTE: No attribute name exceeds 31 characters.\n   The standard attribute\
    \ types are:\n    jmAttributeTypeIndex              Datatype\n    --------------------\
    \              --------\n    other(1),                         Integer32 (-2..2147483647)\n\
    \                                      AND/OR\n                              \
    \        OCTET STRING(SIZE(0..63))\n        INTEGER:  and/or  OCTETS:  An attribute\
    \ that is not in the\n        list and/or that has not been approved and registered\
    \ with\n        the PWG.\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \    + Job State attributes (3 - 19 decimal)\n    +\n    + The following attributes\
    \ specify the state of a job.\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \    jobStateReasons2(3),              JmJobStateReasons2TC\n        INTEGER:\
    \  Additional information about the job's current state\n        that augments\
    \ the jmJobState object.  See the description under\n        the JmJobStateReasons1TC\
    \ textual-convention.\n    jobStateReasons3(4),              JmJobStateReasons3TC\n\
    \        INTEGER:  Additional information about the job's current state\n    \
    \    that augments the jmJobState object.  See the description under\n       \
    \ JmJobStateReasons1TC textual-convention.\n    jobStateReasons4(5),         \
    \     JmJobStateReasons4TC\n        INTEGER:  Additional information about the\
    \ job's current state\n        that augments the jmJobState object.  See the description\
    \ under\n        JmJobStateReasons1TC textual-convention.\n    processingMessage(6),\
    \             JmUTF8StringTC (SIZE(0..63))\n        OCTETS:  MULTI-ROW:  A coded\
    \ character set message that is\n        generated by the server or device during\
    \ the processing of the\n        job as a simple form of processing log to show\
    \ progress and any\n        problems.  The natural language of each value is specified\
    \ by\n        the corresponding processingMessageNaturalLangTag(7) value.\n  \
    \      NOTE - This attribute is intended for such conditions as\n        interpreter\
    \ messages, rather than being the printable form of\n        the jmJobState and\
    \ jmJobStateReasons1 objects and\n        jobStateReasons2, jobStateReasons3,\
    \ and jobStateReasons4\n        attributes.  In order to produce a localized printable\
    \ form of\n        these job state objects/attribute, a management application\n\
    \        SHOULD produce a message from their enum and bit values.\n        NOTE\
    \ - There is no job description attribute in IPP/1.0 that\n        corresponds\
    \ to this attribute and this attribute does not\n        correspond to the IPP/1.0\
    \ 'job-state-message' job description\n        attribute, which is just a printable\
    \ form of the IPP 'job-state'\n        and 'job-state-reasons' job attributes.\n\
    \        There is no restriction for the same message occurring in\n        multiple\
    \ rows.\n    processingMessageNaturalLangTag(7),   OCTET STRING(SIZE(0..63))\n\
    \        OCTETS:  MULTI-ROW:  The natural language of the corresponding\n    \
    \    processingMessage(6) attribute value.  See section 3.6.1,\n        entitled\
    \ 'Text generated by the server or device'.\n        If the agent does not know\
    \ the natural language of the job\n        processing message, the agent SHALL\
    \ either (1) return a zero\n        length string value for the processingMessageNaturalLangTag(7)\n\
    \        attribute or (2) not return the\n        processingMessageNaturalLangTag(7)\
    \ attribute for the job.\n        There is no restriction for the same tag occurring\
    \ in multiple\n        rows, since when this attribute is implemented, it SHOULD\
    \ have a\n        value row for each corresponding processingMessage(6) attribute\n\
    \        value row.\n    jobCodedCharSet(8),               CodedCharSet\n    \
    \    INTEGER:  The MIBenum identifier of the coded character set that\n      \
    \  the agent is using to represent coded character set objects and\n        attributes\
    \ of type 'JmJobStringTC'.  These coded character set\n        objects and attributes\
    \ are either: (1) supplied by the job\n        submitting client or (2) defaulted\
    \ by the server or device when\n        omitted by the job submitting client.\
    \  The agent SHALL represent\n        these objects and attributes in the MIB\
    \ either (1) in the coded\n        character set as they were submitted or (2)\
    \ MAY convert the\n        coded character set to another coded character set\
    \ or encoding\n        scheme as identified by the jobCodedCharSet(8) attribute.\
    \  See\n        section 3.6.2, entitled 'Text supplied by the job submitter'.\n\
    \        These MIBenum values are assigned by IANA [IANA-charsets] when\n    \
    \    the coded character sets are registered.  The coded character\n        set\
    \ SHALL be one of the ones registered with IANA [IANA] and the\n        enum value\
    \ uses the CodedCharSet textual-convention from the\n        Printer MIB.  See\
    \ the JmJobStringTC textual-convention.\n        If the agent does not know what\
    \ coded character set was used by\n        the job submitting client, the agent\
    \ SHALL either (1) return the\n        'unknown(2)' value for the jobCodedCharSet(8)\
    \ attribute or (2)\n        not return the jobCodedCharSet(8) attribute for the\
    \ job.\n    jobNaturalLanguageTag(9),         OCTET STRING(SIZE(0..63))\n    \
    \    OCTETS: The natural language of the job attributes supplied by\n        the\
    \ job submitter or defaulted by the server or device for the\n        job, i.e.,\
    \ all objects and attributes represented by the '\n        JmJobStringTC' textual-convention,\
    \ such as jobName,\n        mediumRequested, etc.  See Section 3.6.2, entitled\
    \ 'Text\n        supplied by the job submitter'.\n        If the agent does not\
    \ know what natural language was used by the\n        job submitting client, the\
    \ agent SHALL either (1) return a zero\n        length string value for the jobNaturalLanguageTag(9)\
    \ attribute\n        or (2) not return jobNaturalLanguageTag(9)  attribute for\
    \ the\n        job.\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \    + Job Identification attributes (20 - 49 decimal)\n    +\n    + The following\
    \ attributes help an end user, a system\n    + operator, or an accounting program\
    \ identify a job.\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \    jobURI(20),                       OCTET STRING(SIZE(0..63))\n        OCTETS:\
    \  MULTI-ROW:  The job's Universal Resource\n        Identifier (URI) [RFC1738].\
    \  See IPP [ipp-model] for\n        example usage.\n        NOTE - The agent may\
    \ be able to generate this value on each\n        SNMP Get operation from smaller\
    \ values, rather than having\n        to store the entire URI.\n        If the\
    \ URI exceeds 63 octets, the agent SHALL use multiple\n        values, with the\
    \ next 63 octets coming in the second value,\n        etc.\n        NOTE - IPP\
    \ [ipp-model] has a 1023-octet maximum length for\n        a URI, though the URI\
    \ standard itself and HTTP/1.1 specify\n        no maximum length.\n    jobAccountName(21),\
    \               OCTET STRING(SIZE(0..63))\n        OCTETS:  Arbitrary binary information\
    \ which MAY be coded\n        character set data or encrypted data supplied by\
    \ the\n        submitting user for use by accounting services to allocate\n  \
    \      or categorize charges for services provided, such as a\n        customer\
    \ account name or number.\n        NOTE: This attribute NEED NOT be printable\
    \ characters.\n    serverAssignedJobName(22),        JmJobStringTC (SIZE(0..63))\n\
    \        OCTETS:  Configuration 3 only:  The human readable string\n        name,\
    \ number, or ID of the job as assigned by the server\n        that submitted the\
    \ job to the device that the agent is\n        providing access to with this MIB.\n\
    \        NOTE - This attribute is intended for enabling a user to\n        find\
    \ his/her job that a server submitted to a device when\n        either the client\
    \ does not support the jmJobSubmissionID or\n        the server does not pass\
    \ the jmJobSubmissionID through to\n        the device.\n    jobName(23),    \
    \                  JmJobStringTC (SIZE(0..63))\n        OCTETS:  The human readable\
    \ string name of the job as\n        assigned by the submitting user to help the\
    \ user\n        distinguish between his/her various jobs.  This name does\n  \
    \      not need to be unique.\n        This attribute is intended for enabling\
    \ a user or the\n        user's application to convey a job name that MAY be printed\n\
    \        on a start sheet, returned in a query result, or used in\n        notification\
    \ or logging messages.\n        In order to assist users to find their jobs for\
    \ job\n        submission protocols that don't supply a jmJobSubmissionID,\n \
    \       the agent SHOULD maintain the jobName attribute for the\n        time\
    \ specified by the jmGeneralJobPersistence object,\n        rather than the (shorter)\
    \ jmGeneralAttributePersistence\n        object.\n        If this attribute is\
    \ not specified when the job is\n        submitted, no job name is assumed, but\
    \ implementation\n        specific defaults are allowed, such as the value of\
    \ the\n        documentName attribute of the first document in the job or\n  \
    \      the fileName attribute of the first document in the job.\n        The jobName\
    \ attribute is distinguished from the jobComment\n        attribute, in that the\
    \ jobName attribute is intended to\n        permit the submitting user to distinguish\
    \ between different\n        jobs that he/she has submitted.  The jobComment attribute\n\
    \        is intended to be free form additional information that a\n        user\
    \ might wish to use to communicate with himself/herself,\n        such as a reminder\
    \ of what to do with the results or to\n        indicate a different set of input\
    \ parameters were tried in\n        several different job submissions.\n    jobServiceTypes(24),\
    \              JmJobServiceTypesTC\n        INTEGER:  Specifies the type(s) of\
    \ service to which the job\n        has been submitted (print, fax, scan, etc.).\
    \  The service\n        type is bit encoded with each job service type so that\
    \ more\n        general and arbitrary services can be created, such as\n     \
    \   services with more than one destination type, or ones with\n        only a\
    \ source or only a destination.  For example, a job\n        service might scan,\
    \ faxOut, and print a single job.  In\n        this case, three bits would be\
    \ set in the jobServiceTypes\n        attribute, corresponding to the hexadecimal\
    \ values: 0x8 +\n        0x20 + 0x4, respectively, yielding: 0x2C.\n        Whether\
    \ this attribute is set from a job attribute supplied\n        by the job submission\
    \ client or is set by the recipient job\n        submission server or device depends\
    \ on the job submission\n        protocol.  This attribute SHALL be implemented\
    \ if the\n        server or device has other types in addition to or instead\n\
    \        of printing.\n        One of the purposes of this attribute is to permit\
    \ a\n        requester to filter out jobs that are not of interest.  For\n   \
    \     example, a printer operator may only be interested in jobs\n        that\
    \ include printing.\n    jobSourceChannelIndex(25),        Integer32 (0..2147483647)\n\
    \        INTEGER:  The index of the row in the associated Printer\n        MIB\
    \ [print-mib] of the channel which is the source of the\n        print job.\n\
    \    jobSourcePlatformType(26),        JmJobSourcePlatformTypeTC\n        INTEGER:\
    \  The source platform type of the immediate\n        upstream submitter that\
    \ submitted the job to the server\n        (configuration 2) or device (configuration\
    \ 1 and 3) to\n        which the agent is providing access.  For configuration\
    \ 1,\n        this is the type of the client that submitted the job to\n     \
    \   the device;  for configuration 2, this is the type of the\n        client\
    \ that submitted the job to the server; and for\n        configuration 3, this\
    \ is the type of the server that\n        submitted the job to the device.\n \
    \   submittingServerName(27),         JmJobStringTC (SIZE(0..63))\n        OCTETS:\
    \  For configuration 3 only:  The administrative name\n        of the server that\
    \ submitted the job to the device.\n    submittingApplicationName(28),    JmJobStringTC\
    \ (SIZE(0..63))\n        OCTETS:  The name of the client application (not the\
    \ server\n        in configuration 3) that submitted the job to the server or\n\
    \        device.\n    jobOriginatingHost(29),           JmJobStringTC (SIZE(0..63))\n\
    \        OCTETS:  The name of the client host (not the server host\n        name\
    \ in configuration 3) that submitted the job to the\n        server or device.\n\
    \    deviceNameRequested(30),          JmJobStringTC (SIZE(0..63))\n        OCTETS:\
    \  The administratively defined coded character set\n        name of the target\
    \ device requested by the submitting user.\n        For configuration 1, its value\
    \ corresponds to the Printer\n        MIB [print-mib]: prtGeneralPrinterName object.\
    \  For\n        configuration 2 and 3, its value is the name of the logical\n\
    \        or physical device that the user supplied to indicate to\n        the\
    \ server on which device(s) they wanted the job to be\n        processed.\n  \
    \  queueNameRequested(31),           JmJobStringTC (SIZE(0..63))\n        OCTETS:\
    \  The administratively defined coded character set\n        name of the target\
    \ queue requested by the submitting user.\n        For configuration 1, its value\
    \ corresponds to the queue in\n        the device for which the agent is providing\
    \ access.  For\n        configuration 2 and 3, its value is the name of the queue\n\
    \        that the user supplied to indicate to the server on which\n        device(s)\
    \ they wanted the job to be processed.\n        NOTE - typically an implementation\
    \ SHOULD support either\n        the deviceNameRequested or queueNameRequested\
    \ attribute,\n        but not both.\n    physicalDevice(32),               hrDeviceIndex\n\
    \                                      AND/OR\n                              \
    \        JmUTF8StringTC (SIZE(0..63))\n        INTEGER:  MULTI-ROW:  The index\
    \ of the physical device MIB\n        instance requested/used, such as the Printer\
    \ MIB [print-mib].\n        This value is an hrDeviceIndex value.  See the Host\n\
    \        Resources MIB [hr-mib].\n        AND/OR\n        OCTETS:  MULTI-ROW:\
    \  The name of the physical device to\n        which the job is assigned.\n  \
    \  numberOfDocuments(33),            Integer32 (-2..2147483647)\n        INTEGER:\
    \  The number of documents in this job.\n        The agent SHOULD return this\
    \ attribute if the job has more\n        than one document.\n    fileName(34),\
    \                     JmJobStringTC (SIZE(0..63))\n        OCTETS:  MULTI-ROW:\
    \  The coded character set file name or\n        URI [URI-spec] of the document.\n\
    \        There is no restriction on the same file name occurring in\n        multiple\
    \ rows.\n    documentName(35),                 JmJobStringTC (SIZE(0..63))\n \
    \       OCTETS:  MULTI-ROW:  The coded character set name of the\n        document.\n\
    \        There is no restriction on the same document name occurring\n       \
    \ in multiple rows.\n    jobComment(36),                   JmJobStringTC (SIZE(0..63))\n\
    \        OCTETS:  An arbitrary human-readable coded character text\n        string\
    \ supplied by the submitting user or the job\n        submitting application program\
    \ for any purpose.  For\n        example, a user might indicate what he/she is\
    \ going to do\n        with the printed output or the job submitting application\n\
    \        program might indicate how the document was produced.\n        The jobComment\
    \ attribute is not intended to be a name; see\n        the jobName attribute.\n\
    \    documentFormatIndex(37),          Integer32 (0..2147483647)\n        INTEGER:\
    \  MULTI-ROW:  The index in the prtInterpreterTable\n        in the Printer MIB\
    \ [print-mib] of the page description\n        language (PDL) or control language\
    \ interpreter that this\n        job requires/uses.  A document or a job MAY use\
    \ more than\n        one PDL or control language.\n        NOTE - As with all\
    \ intensive attributes where multiple rows\n        are allowed, there SHALL be\
    \ only one distinct row for each\n        distinct interpreter; there SHALL be\
    \ no duplicates.\n        NOTE - This attribute type is intended to be used with\
    \ an\n        agent that implements the Printer MIB and SHALL not be used\n  \
    \      if the agent does not implement the Printer MIB.  Such an\n        agent\
    \ SHALL use the documentFormat attribute instead.\n    documentFormat(38),   \
    \            PrtInterpreterLangFamilyTC\n                                    \
    \  AND/OR\n                                      OCTET STRING(SIZE(0..63))\n \
    \       INTEGER:  MULTI-ROW:  The interpreter language family\n        corresponding\
    \ to the Printer MIB [print-mib]\n        prtInterpreterLangFamily object, that\
    \ this job\n        requires/uses.  A document or a job MAY use more than one\n\
    \        PDL or control language.\n        AND/OR\n        OCTETS:  MULTI-ROW:\
    \  The document format registered as a\n        media type [iana-media-types],\
    \ i.e., the name of the MIME\n        content-type/subtype.  Examples: 'application/postscript',\n\
    \        'application/vnd.hp-PCL', 'application/pdf', 'text/plain'\n        (US-ASCII\
    \ SHALL be assumed), 'text/plain; charset=iso-8859-1',\n        and 'application/octet-stream'.\
    \  The IPP 'document-format'\n        job attribute uses these same values with\
    \ the same semantics.\n        See the IPP [ipp-model] 'mimeMediaType' attribute\
    \ syntax and\n        the document-format attribute for further examples and\n\
    \        explanation.\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \    + Job Parameter attributes (50 - 67 decimal)\n    +\n    + The following\
    \ attributes represent input parameters\n    + supplied by the submitting client\
    \ in the job submission\n    + protocol.\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \    jobPriority(50),                  Integer32 (-2..100)\n        INTEGER: \
    \ The priority for scheduling the job.  It is used by\n        servers and devices\
    \ that employ a priority-based scheduling\n        algorithm.\n        A higher\
    \ value specifies a higher priority.  The value 1 is\n        defined to indicate\
    \ the lowest possible priority (a job which a\n        priority-based scheduling\
    \ algorithm SHALL pass over in favor of\n        higher priority jobs).  The value\
    \ 100 is defined to indicate the\n        highest possible priority.  Priority\
    \ is expected to be evenly or\n        'normally' distributed across this range.\
    \  The mapping of\n        vendor-defined priority over this range is implementation-\n\
    \        specific.  -2 indicates unknown.\n    jobProcessAfterDateAndTime(51),\
    \   DateAndTime (SNMPv2-TC)\n        OCTETS:  The calendar date and time of day\
    \ after which the job\n        SHALL become a candidate to be scheduled for processing.\
    \  If the\n        value of this attribute is in the future, the server SHALL\
    \ set\n        the value of the job's jmJobState object to pendingHeld and add\n\
    \        the jobProcessAfterSpecified bit value to the job's\n        jmJobStateReasons1\
    \ object.  When the specified date and time\n        arrives, the server SHALL\
    \ remove the jobProcessAfterSpecified\n        bit value from the job's jmJobStateReasons1\
    \ object and, if no\n        other reasons remain, SHALL change the job's jmJobState\
    \ object\n        to pending.\n    jobHold(52),                      JmBooleanTC\n\
    \        INTEGER:  If the value is 'true(4)', a client has explicitly\n      \
    \  specified that the job is to be held until explicitly released.\n        Until\
    \ the job is explicitly released by a client, the job SHALL\n        be in the\
    \ pendingHeld state with the jobHoldSpecified value in\n        the jmJobStateReasons1\
    \ attribute.\n    jobHoldUntil(53),                 JmJobStringTC (SIZE(0..63))\n\
    \        OCTETS:  The named time period during which the job SHALL become\n  \
    \      a candidate for processing, such as 'evening', 'night', '\n        weekend',\
    \ 'second-shift', 'third-shift', etc., (supported values\n        configured by\
    \ the system administrator).  See IPP [ipp-model]\n        for the standard keyword\
    \ values.  Until that time period\n        arrives, the job SHALL be in the pendingHeld\
    \ state with the\n        jobHoldUntilSpecified value in the jmJobStateReasons1\
    \ object.\n        The value 'no-hold' SHALL indicate explicitly that no time\n\
    \        period has been specified; the absence of this attribute SHALL\n    \
    \    indicate implicitly that no time period has been specified.\n    outputBin(54),\
    \                    Integer32 (0..2147483647)\n                             \
    \         AND/OR\n                                      JmJobStringTC (SIZE(0..63))\n\
    \        INTEGER:  MULTI-ROW:  The output subunit index in the Printer\n     \
    \   MIB [print-mib]\n        AND/OR\n        OCTETS:  MULTI-ROW:  the name or\
    \ number (represented as ASCII\n        digits) of the output bin to which all\
    \ or part of the job is\n        placed in.\n    sides(55),                  \
    \      Integer32 (-2..2)\n        INTEGER: MULTI-ROW: The number of sides, '1'\
    \ or '2', that any\n        document in this job requires/used.\n    finishing(56),\
    \                    JmFinishingTC\n        INTEGER:  MULTI-ROW:  Type of finishing\
    \ that any document in\n        this job requires/used.\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \    + Image Quality attributes (requested and consumed) (70 - 87)\n    +\n  \
    \  + For devices that can vary the image quality.\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \    printQualityRequested(70),        JmPrintQualityTC\n        INTEGER:  MULTI-ROW:\
    \  The print quality selection requested for\n        a document in the job for\
    \ printers that allow quality\n        differentiation.\n    printQualityUsed(71),\
    \             JmPrintQualityTC\n        INTEGER:  MULTI-ROW:  The print quality\
    \ selection actually used\n        by a document in the job for printers that\
    \ allow quality\n        differentiation.\n    printerResolutionRequested(72),\
    \   JmPrinterResolutionTC\n        OCTETS:  MULTI-ROW:  The printer resolution\
    \ requested for a\n        document in the job for printers that support resolution\n\
    \        selection.\n    printerResolutionUsed(73),        JmPrinterResolutionTC\n\
    \        OCTETS:  MULTI-ROW:  The printer resolution actually used by a\n    \
    \    document in the job for printers that support resolution\n        selection.\n\
    \    tonerEcomonyRequested(74),        JmTonerEconomyTC\n        INTEGER:  MULTI-ROW:\
    \  The toner economy selection requested for\n        documents in the job for\
    \ printers that allow toner economy\n        differentiation.\n    tonerEcomonyUsed(75),\
    \             JmTonerEconomyTC\n        INTEGER:  MULTI-ROW:  The toner economy\
    \ selection actually used\n        by documents in the job for printers that allow\
    \ toner economy\n        differentiation.\n    tonerDensityRequested(76)     \
    \    Integer32 (-2..100)\n        INTEGER:  MULTI-ROW:  The toner density requested\
    \ for a document\n        in this job for devices that can vary toner density\
    \ levels.\n        Level 1 is the lowest density and level 100 is the highest\n\
    \        density level.  Devices with a smaller range, SHALL map the\n       \
    \ 1-100 range evenly onto the implemented range.\n    tonerDensityUsed(77),  \
    \           Integer32 (-2..100)\n        INTEGER:  MULTI-ROW:  The toner density\
    \ used by documents in\n        this job for devices that can vary toner density\
    \ levels.  Level\n        1 is the lowest density and level 100 is the highest\
    \ density\n        level.  Devices with a smaller range, SHALL map the 1-100 range\n\
    \        evenly onto the implemented range.\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \    + Job Progress attributes (requested and consumed) (90-109)\n    +\n    +\
    \ Pairs of these attributes can be used by monitoring\n    + applications to show\
    \ an indication of relative progress\n    + to users.  See section 3.4, entitled:\n\
    \    + 'Monitoring Job Progress'.\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \    jobCopiesRequested(90),           Integer32 (-2..2147483647)\n        INTEGER:\
    \  The number of copies of the entire job that are to be\n        produced.\n\
    \    jobCopiesCompleted(91),           Integer32 (-2..2147483647)\n        INTEGER:\
    \  The number of copies of the entire job that have been\n        completed so\
    \ far.\n    documentCopiesRequested(92),      Integer32 (-2..2147483647)\n   \
    \     INTEGER:  The total count of the number of document copies\n        requested\
    \ for the job as a whole.  If there are documents A, B,\n        and C, and document\
    \ B is specified to produce 4 copies, the\n        number of document copies requested\
    \ is 6 for the job.\n        This attribute SHALL be used only when a job has\
    \ multiple\n        documents.  The jobCopiesRequested attribute SHALL be used\
    \ when\n        the job has only one document.\n    documentCopiesCompleted(93),\
    \      Integer32 (-2..2147483647)\n        INTEGER:  The total count of the number\
    \ of document copies\n        completed so far for the job as a whole.  If there\
    \ are documents\n        A, B, and C, and document B is specified to produce 4\
    \ copies,\n        the number of document copies starts a 0 and runs up to 6 for\n\
    \        the job as the job processes.\n        This attribute SHALL be used only\
    \ when a job has multiple\n        documents.  The jobCopiesCompleted attribute\
    \ SHALL be used when\n        the job has only one document.\n    jobKOctetsTransferred(94),\
    \        Integer32 (-2..2147483647)\n        INTEGER:  The number of K (1024)\
    \ octets transferred to the\n        server or device to which the agent is providing\
    \ access.  This\n        count is independent of the number of copies of the job\
    \ or\n        documents that will be produced, but it is only a measure of the\n\
    \        number of bytes transferred to the server or device.\n        The agent\
    \ SHALL round the actual number of octets transferred up\n        to the next\
    \ higher K.  Thus 0 octets SHALL be represented as '\n        0', 1-1024 octets\
    \ SHALL BE represented as '1', 1025-2048 SHALL\n        be '2', etc.  When the\
    \ job completes, the values of the\n        jmJobKOctetsPerCopyRequested object\
    \ and the\n        jobKOctetsTransferred attribute SHALL be equal.\n        NOTE\
    \ - The jobKOctetsTransferred can be used with the\n        jmJobKOctetsPerCopyRequested\
    \ object in order to produce a\n        relative indication of the progress of\
    \ the job for agents that\n        do not implement the jmJobKOctetsProcessed\
    \ object.\n    sheetCompletedCopyNumber(95),     Integer32 (-2..2147483647)\n\
    \        INTEGER:  The number of the copy being stacked for the current\n    \
    \    document.  This number starts at 0, is set to 1 when the first\n        sheet\
    \ of the first copy for each document is being stacked and\n        is equal to\
    \ n where n is the nth sheet stacked in the current\n        document copy.  See\
    \ section 3.4 , entitled 'Monitoring Job\n        Progress'.\n    sheetCompletedDocumentNumber(96),\
    \ Integer32 (-2..2147483647)\n        INTEGER:  The ordinal number of the document\
    \ in the job that is\n        currently being stacked.  This number starts at\
    \ 0, increments to\n        1 when the first sheet of the first document in the\
    \ job is being\n        stacked, and is equal to n where n is the nth document\
    \ in the\n        job, starting with 1.\n        Implementations that only support\
    \ one document jobs SHOULD NOT\n        implement this attribute.\n    jobCollationType(97),\
    \             JmJobCollationTypeTC\n        INTEGER:  The type of job collation.\
    \ See also Section 3.4,\n        entitled 'Monitoring Job Progress'.\n   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \   + Impression attributes (110 - 129 decimal)\n   +\n   + See the definition\
    \ of the terms 'impression', 'sheet',\n   + and 'page' in Section 2.\n   +\n \
    \  + See also jmJobImpressionsPerCopyRequested and\n   + jmJobImpressionsCompleted\
    \ objects in the jmJobTable.\n   ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \   impressionsSpooled(110),          Integer32 (-2..2147483647)\n        INTEGER:\
    \  The number of impressions spooled to the server or\n        device for the\
    \ job so far.\n    impressionsSentToDevice(111),     Integer32 (-2..2147483647)\n\
    \        INTEGER:  The number of impressions sent to the device for the\n    \
    \    job so far.\n    impressionsInterpreted(112),      Integer32 (-2..2147483647)\n\
    \        INTEGER:  The number of impressions interpreted for the job so\n    \
    \    far.\n    impressionsCompletedCurrentCopy(113),\n                       \
    \               Integer32 (-2..2147483647)\n        INTEGER:  The number of impressions\
    \ completed by the device for\n        the current copy of the current document\
    \ so far.  For printing,\n        the impressions completed includes interpreting,\
    \ marking, and\n        stacking the output.  For other types of job services,\
    \ the\n        number of impressions completed includes the number of\n      \
    \  impressions processed.\n        This value SHALL be reset to 0 for each document\
    \ in the job and\n        for each document copy.\n    fullColorImpressionsCompleted(114),\
    \ Integer32 (-2..2147483647)\n        INTEGER:  The number of full color impressions\
    \ completed by the\n        device for this job so far.  For printing, the impressions\n\
    \        completed includes interpreting, marking, and stacking the\n        output.\
    \  For other types of job services, the number of\n        impressions completed\
    \ includes the number of impressions\n        processed. Full color impressions\
    \ are typically defined as those\n        requiring 3 or more colorants, but this\
    \ MAY vary by\n        implementation.  In any case, the value of this attribute\
    \ counts\n        by 1 for each side that has full color, not by the number of\n\
    \        colors per side (and the other impression counters are\n        incremented,\
    \ except highlightColorImpressionsCompleted(115)).\n    highlightColorImpressionsCompleted(115),\n\
    \                                      Integer32 (-2..2147483647)\n        INTEGER:\
    \  The number of highlight color impressions\n        completed by the device\
    \ for this job so far.  For printing,\n        the impressions completed includes\
    \ interpreting, marking,\n        and stacking the output.  For other types of\
    \ job services,\n        the number of impressions completed includes the number\
    \ of\n        impressions processed.  Highlight color impressions are\n      \
    \  typically defined as those requiring black plus one other\n        colorant,\
    \ but this MAY vary by implementation.  In any\n        case, the value of this\
    \ attribute counts by 1 for each side\n        that has highlight color (and the\
    \ other impression counters\n        are incremented, except\n        fullColorImpressionsCompleted(114)).\n\
    \    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    + Page attributes\
    \ (130 - 149 decimal)\n    +\n    + See the definition of 'impression', 'sheet',\
    \ and 'page'\n    + in Section 2.\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \    pagesRequested(130),              Integer32 (-2..2147483647)\n        INTEGER:\
    \  The number of logical pages requested by the job\n        to be processed.\n\
    \    pagesCompleted(131),              Integer32 (-2..2147483647)\n        INTEGER:\
    \  The number of logical pages completed for this\n        job so far.\n     \
    \   For implementations where multiple copies are produced by\n        the interpreter\
    \ with only a single pass over the data, the\n        final value SHALL be equal\
    \ to the value of the\n        pagesRequested object.  For implementations where\
    \ multiple\n        copies are produced by the interpreter by processing the\n\
    \        data for each copy, the final value SHALL be a multiple of\n        the\
    \ value of the pagesRequested object.\n        NOTE - See the impressionsCompletedCurrentCopy\
    \ and\n        pagesCompletedCurrentCopy attributes for attributes that\n    \
    \    are reset on each document copy.\n        NOTE - The pagesCompleted object\
    \ can be used with the\n        pagesRequested object to provide an indication\
    \ of the\n        relative progress of the job, provided that the\n        multiplicative\
    \ factor is taken into account for some\n        implementations of multiple copies.\n\
    \    pagesCompletedCurrentCopy(132),   Integer32 (-2..2147483647)\n        INTEGER:\
    \  The number of logical pages completed for the\n        current copy of the\
    \ document so far.  This value SHALL be\n        reset to 0 for each document\
    \ in the job and for each\n        document copy.\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \    + Sheet attributes (150 - 169 decimal)\n    +\n    + See the definition of\
    \ 'impression', 'sheet', and 'page'\n    + in Section 2.\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \    sheetsRequested(150),             Integer32 (-2..2147483647)\n        INTEGER:\
    \  The total number of medium sheets requested to be\n        produced for this\
    \ job.\n        Unlike the jmJobKOctetsPerCopyRequested and\n        jmJobImpressionsPerCopyRequested\
    \ attributes, the\n        sheetsRequested(150) attribute SHALL include the\n\
    \        multiplicative factor contributed by the number of copies\n        and\
    \ so is the total number of sheets to be produced by the\n        job, as opposed\
    \ to the size of the document(s) submitted.\n    sheetsCompleted(151),       \
    \      Integer32 (-2..2147483647)\n        INTEGER:  The total number of medium\
    \ sheets that have\n        completed marking and stacking for the entire job\
    \ so far\n        whether those sheets have been processed on one side or on\n\
    \        both.\n    sheetsCompletedCurrentCopy(152),  Integer32 (-2..2147483647)\n\
    \        INTEGER:  The number of medium sheets that have completed\n        marking\
    \ and stacking for the current copy of a document in\n        the job so far whether\
    \ those sheets have been processed on\n        one side or on both.\n        The\
    \ value of this attribute SHALL be 0 before the job\n        starts processing\
    \ and SHALL be reset to 1 after the first\n        sheet of each document and\
    \ document copy in the job is\n        processed and stacked.\n    ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \    + Resources attributes (requested and consumed) (170 - 189)\n    +\n    +\
    \ Pairs of these attributes can be used by monitoring\n    + applications to show\
    \ an indication of relative usage to\n    + users, i.e., a 'thermometer'.\n  \
    \  ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n    mediumRequested(170),\
    \             JmMediumTypeTC\n                                      AND/OR\n \
    \                                     JmJobStringTC (SIZE(0..63))\n        INTEGER:\
    \  MULTI-ROW:  The type\n        AND/OR\n        OCTETS:  MULTI-ROW:  the name\
    \ of the medium that is\n        required by the job.\n        NOTE - The name\
    \ (JmJobStringTC) values correspond to the\n        name values of the prtInputMediaName\
    \ object in the Printer\n        MIB [print-mib] and the name, size, and input\
    \ tray values\n        of the IPP 'media' attribute [ipp-model].\n    mediumConsumed(171),\
    \              Integer32 (-2..2147483647)\n                                  \
    \    AND\n                                      JmJobStringTC (SIZE(0..63))\n\
    \        INTEGER:  MULTI-ROW:  The number of sheets\n        AND\n        OCTETS:\
    \  MULTI-ROW:  the name of the medium that has been\n        consumed so far whether\
    \ those sheets have been processed on\n        one side or on both.\n        This\
    \ attribute SHALL have both Integer32 and OCTET STRING\n        (represented as\
    \  JmJobStringTC) values.\n        NOTE - The name (JmJobStringTC) values correspond\
    \ to the\n        name values of the prtInputMediaName object in the Printer\n\
    \        MIB [print-mib] and the name, size, and input tray values\n        of\
    \ the IPP 'media' attribute [ipp-model].\n    colorantRequested(172),        \
    \   Integer32 (-2..2147483647)\n                                      AND/OR\n\
    \                                      JmJobStringTC (SIZE(0..63))\n        INTEGER:\
    \  MULTI-ROW:  The index (prtMarkerColorantIndex) in\n        the Printer MIB\
    \ [print-mib]\n        AND/OR\n        OCTETS:  MULTI-ROW:  the name of the colorant\
    \ requested.\n        NOTE - The name (JmJobStringTC) values correspond to the\n\
    \        name values of the prtMarkerColorantValue object in the\n        Printer\
    \ MIB.  Examples are: red, blue.\n    colorantConsumed(173),            Integer32\
    \ (-2..2147483647)\n                                      AND/OR\n           \
    \                           JmJobStringTC (SIZE(0..63))\n        INTEGER:  MULTI-ROW:\
    \  The index (prtMarkerColorantIndex) in\n        the Printer MIB [print-mib]\n\
    \        AND/OR\n        OCTETS:  MULTI-ROW:  the name of the colorant consumed.\n\
    \        NOTE - The name (JmJobStringTC) values correspond to the\n        name\
    \ values of the prtMarkerColorantValue object in the\n        Printer MIB.  Examples\
    \ are: red, blue\n    mediumTypeConsumed(174),          Integer32 (-2..2147483647)\n\
    \                                      AND\n                                 \
    \     JmJobStringTC (SIZE(0..63))\n        INTEGER:  MULTI-ROW:  The number of\
    \ sheets of the indicated\n        medium type that has been consumed so far whether\
    \ those\n        sheets have been processed on one side or on both\n        AND\n\
    \        OCTETS:  MULTI-ROW:  the name of that medium type.\n        This attribute\
    \ SHALL have both Integer32 and OCTET STRING\n        (represented as JmJobStringTC)\
    \ values.\n        NOTE - The type name (JmJobStringTC) values correspond to\n\
    \        the type name values of the prtInputMediaType object in the\n       \
    \ Printer MIB [print-mib].  Values are: 'stationery',\n        'transparency',\
    \ 'envelope', etc. These medium type names\n        correspond to the enum values\
    \ of JmMediumTypeTC used in the\n        mediumRequested attribute.\n    mediumSizeConsumed(175),\
    \          Integer32 (-2..2147483647)\n                                      AND\n\
    \                                      JmJobStringTC (SIZE(0..63))\n        INTEGER:\
    \  MULTI-ROW:  The number of sheets of the indicated\n        medium size that\
    \ has been consumed so far whether those\n        sheets have been processed on\
    \ one side or on both\n        AND\n        OCTETS:  MULTI-ROW:  the name of that\
    \ medium size.\n        This attribute SHALL have both Integer32 and OCTET STRING\n\
    \        (represented as JmJobStringTC) values.\n        NOTE - The size name\
    \ (JmJobStringTC) values correspond to\n        the size name values in the Printer\
    \ MIB [print-mib]\n        Appendix B.  These size name values are also a subset\
    \ of\n        the keyword values defined by [ipp-model] for the 'media'\n    \
    \    Job Template attribute.  Values are:  'letter', 'a', 'iso-\n        a4',\
    \ 'jis-b4', etc.\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \    + Time attributes (set by server or device) (190 - 209 decimal)\n    +\n\
    \    + This section of attributes are ones that are set by the\n    + server or\
    \ device that accepts jobs.  Two forms of time are\n    + provided.  Each form\
    \ is represented in a separate attribute.\n    + See section 3.1.2 and section\
    \ 3.1.3 for the\n    + conformance requirements for time attribute for agents\
    \ and\n    + monitoring applications, respectively.  The two forms are:\n    +\n\
    \    + 'DateAndTime' is an 8 or 11 octet binary encoded year,\n    + month, day,\
    \ hour, minute, second, deci-second with\n    + optional offset from UTC.  See\
    \ SNMPv2-TC [SMIv2-TC].\n    +\n    + NOTE: 'DateAndTime' is not printable characters;\
    \ it is\n    + binary.\n    +\n    + 'JmTimeStampTC' is the time of day measured\
    \ in the number of\n    + seconds since the system was booted.\n    +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    \    jobSubmissionToServerTime(190),   JmTimeStampTC\n                       \
    \               AND/OR\n                                      DateAndTime\n  \
    \      INTEGER:  Configuration 3 only:  The time\n        AND/OR\n        OCTETS:\
    \  the date and time that the job was submitted to\n        the server (as distinguished\
    \ from the device which uses\n        jobSubmissionTime).\n    jobSubmissionTime(191),\
    \           JmTimeStampTC\n                                      AND/OR\n    \
    \                                  DateAndTime\n        INTEGER:  Configurations\
    \ 1, 2, and 3:  The time\n        AND/OR\n        OCTETS:  the date and time that\
    \ the job was submitted to\n        the server or device to which the agent is\
    \ providing\n        access.\n    jobStartedBeingHeldTime(192),     JmTimeStampTC\n\
    \                                      AND/OR\n                              \
    \        DateAndTime\n        INTEGER:  The time\n        AND/OR\n        OCTETS:\
    \  the date and time that the job last entered the\n        pendingHeld state.\
    \  If the job has never entered the\n        pendingHeld state, then the value\
    \ SHALL be '0' or the\n        attribute SHALL not be present in the table.\n\
    \    jobStartedProcessingTime(193),    JmTimeStampTC\n                       \
    \               AND/OR\n                                      DateAndTime\n  \
    \      INTEGER:  The time\n        AND/OR\n        OCTETS:  the date and time\
    \ that the job started processing.\n    jobCompletionTime(194),           JmTimeStampTC\n\
    \                                      AND/OR\n                              \
    \        DateAndTime\n        INTEGER:  The time\n        AND/OR\n        OCTETS:\
    \  the date and time that the job entered the\n        completed, canceled, or\
    \ aborted state.\n    jobProcessingCPUTime(195)         Integer32 (-2..2147483647)\n\
    \        UNITS     'seconds'\n        INTEGER:  The amount of CPU time in seconds\
    \ that the job\n        has been in the processing state.  If the job enters the\n\
    \        processingStopped state, that elapsed time SHALL not be\n        included.\
    \  In other words, the jobProcessingCPUTime value\n        SHOULD be relatively\
    \ repeatable when the same job is\n        processed again on the same device.\n"
- title: 3.3.9 Job State Reason bit definitions
  contents:
  - "3.3.9 Job State Reason bit definitions\n   The JmJobStateReasonsNTC (N=1..4)\
    \ textual-conventions are used with\n   the jmJobStateReasons1 object and jobStateReasonsN\
    \ (N=2..4),\n   respectively, to provide additional information regarding the\
    \ current\n   jmJobState object value.  These values MAY be used with any job\
    \ state\n   or states for which the reason makes sense.\n   NOTE - While values\
    \ cannot be added to the jmJobState object without\n   impacting deployed clients\
    \ that take actions upon receiving\n   jmJobState values, it is the intent that\
    \ additional\n   JmJobStateReasonsNTC enums can be defined and registered without\n\
    \   impacting such deployed clients.  In other words, the\n   jmJobStateReasons1\
    \ object and jobStateReasonsN attributes are\n   intended to be extensible.\n\
    \   NOTE - The Job Monitoring MIB contains a superset of the IPP values\n   [ipp-model]\
    \ for the IPP 'job-state-reasons' attribute, since the Job\n   Monitoring MIB\
    \ is intended to cover other job submission protocols as\n   well.  Also some\
    \ of the names of the reasons have been changed from '\n   printer' to 'device',\
    \ since the Job Monitoring MIB is intended to\n   cover additional types of devices,\
    \ including input devices, such as\n   scanners.\n"
- title: 3.3.9.1 JmJobStateReasons1TC specification
  contents:
  - "3.3.9.1 JmJobStateReasons1TC specification\n   The following standard values\
    \ are defined (in hexadecimal) as powers\n   of two, since multiple values MAY\
    \ be used at the same time.  For ease\n   of understanding, the JmJobStateReasons1TC\
    \ reasons are presented in\n   the order in which the reasons are likely to occur\
    \ (if implemented),\n   starting with the 'jobIncoming' value and ending with\
    \ the '\n   jobCompletedWithErrors' value.\n    other                        \
    \     0x1\n        The job state reason is not one of the standardized or\n  \
    \      registered reasons.\n    unknown                           0x2\n      \
    \  The job state reason is not known to the agent or is\n        indeterminent.\n\
    \    jobIncoming                       0x4\n        The job has been accepted\
    \ by the server or device, but the\n        server or device is expecting (1)\
    \ additional operations from the\n        client to finish creating the job and/or\
    \ (2) is\n        accessing/accepting document data.\n    submissionInterrupted\
    \             0x8\n        The job was not completely submitted for some unforeseen\
    \ reason,\n        such as: (1) the server has crashed before the job was closed\
    \ by\n        the client, (2) the server or the document transfer method has\n\
    \        crashed in some non-recoverable way before the document data was\n  \
    \      entirely transferred to the server, (3) the client crashed or\n       \
    \ failed to close the job before the time-out period.\n    jobOutgoing       \
    \                0x10\n        Configuration 2 only:  The server is transmitting\
    \ the job to the\n        device.\n    jobHoldSpecified                  0x20\n\
    \        The value of the job's jobHold(52) attribute is TRUE.  The job\n    \
    \    SHALL NOT be a candidate for processing until this reason is\n        removed\
    \ and there are no other reasons to hold the job.\n    jobHoldUntilSpecified \
    \            0x40\n        The value of the job's jobHoldUntil(53) attribute specifies\
    \ a\n        time period that is still in the future.  The job SHALL NOT be a\n\
    \        candidate for processing until this reason is removed and there\n   \
    \     are no other reasons to hold the job.\n    jobProcessAfterSpecified    \
    \      0x80\n        The value of the job's jobProcessAfterDateAndTime(51) attribute\n\
    \        specifies a time that is still in the future.  The job SHALL NOT\n  \
    \      be a candidate for processing until this reason is removed and\n      \
    \  there are no other reasons to hold the job.\n    resourcesAreNotReady     \
    \         0x100\n        At least one of the resources needed by the job, such\
    \ as media,\n        fonts, resource objects, etc., is not ready on any of the\n\
    \        physical devices for which the job is a candidate.  This\n        condition\
    \ MAY be detected when the job is accepted, or\n        subsequently while the\
    \ job is pending or processing, depending\n        on implementation.\n    deviceStoppedPartly\
    \               0x200\n        One or more, but not all, of the devices to which\
    \ the job is\n        assigned are stopped.  If all of the devices are stopped\
    \ (or the\n        only device is stopped), the deviceStopped reason SHALL be\
    \ used.\n    deviceStopped                     0x400\n        The device(s) to\
    \ which the job is assigned is (are all) stopped.\n    jobInterpreting       \
    \            0x800\n        The device to which the job is assigned is interpreting\
    \ the\n        document data.\n    jobPrinting                       0x1000\n\
    \        The output device to which the job is assigned is marking media.\n  \
    \      This value is useful for servers and output devices which spend\n     \
    \   a great deal of time processing (1) when no marking is happening\n       \
    \ and then want to show that marking is now happening or (2) when\n        the\
    \ job is in the process of being canceled or aborted while the\n        job remains\
    \ in the processing state, but the marking has not yet\n        stopped so that\
    \ impression or sheet counts are still increasing\n        for the job.\n    jobCanceledByUser\
    \                 0x2000\n        The job was canceled by the owner of the job,\
    \ i.e., by a user\n        whose name is the same as the value of the job's jmJobOwner\n\
    \        object, or by some other authorized end-user, such as a member\n    \
    \    of the job owner's security group.\n    jobCanceledByOperator           \
    \  0x4000\n        The job was canceled by the operator, i.e., by a user who has\n\
    \        been authenticated as having operator privileges (whether local\n   \
    \     or remote).\n    jobCanceledAtDevice               0x8000\n        The job\
    \ was canceled by an unidentified local user, i.e., a user\n        at a console\
    \ at the device.\n    abortedBySystem                   0x10000\n        The job\
    \ (1) is in the process of being aborted, (2) has been\n        aborted by the\
    \ system and placed in the 'aborted' state, or (3)\n        has been aborted by\
    \ the system and placed in the 'pendingHeld'\n        state, so that a user or\
    \ operator can manually try the job\n        again.\n    processingToStopPoint\
    \             0x20000\n        The requester has issued an operation to cancel\
    \ or interrupt the\n        job or the server/device has aborted the job, but\
    \ the\n        server/device is still performing some actions on the job until\n\
    \        a specified stop point occurs or job termination/cleanup is\n       \
    \ completed.\n        This reason is recommended to be used in conjunction with\
    \ the\n        processing job state to indicate that the server/device is still\n\
    \        performing some actions on the job while the job remains in the\n   \
    \     processing state.  After all the job's resources consumed\n        counters\
    \  have stopped incrementing, the server/device moves the\n        job from the\
    \ processing state to the canceled or aborted job\n        states.\n    serviceOffLine\
    \                    0x40000\n        The service or document transform is off-line\
    \ and accepting no\n        jobs.  All pending jobs are put into the pendingHeld\
    \ state.\n        This situation could be true if the service's or document\n\
    \        transform's input is impaired or broken.\n    jobCompletedSuccessfully\
    \          0x80000\n        The job completed successfully.\n    jobCompletedWithWarnings\
    \          0x100000\n        The job completed with warnings.\n    jobCompletedWithErrors\
    \            0x200000\n        The job completed with errors (and possibly warnings\
    \ too).\n   The following additional job state reasons have been added to\n  \
    \ represent job states that are in ISO DPA [iso-dpa] and other job\n   submission\
    \ protocols:\n    jobPaused                         0x400000\n        The job\
    \ has been indefinitely suspended by a client issuing an\n        operation to\
    \ suspend the job so that other jobs may proceed\n        using the same devices.\
    \  The client MAY issue an operation to\n        resume the paused job at any\
    \ time, in which case the agent SHALL\n        remove the jobPaused values from\
    \ the job's jmJobStateReasons1\n        object and the job is eventually resumed\
    \ at or near the point\n        where the job was paused.\n    jobInterrupted\
    \                    0x800000 The job has been\n        interrupted while processing\
    \ by a client\n        issuing an operation that specifies another job to be run\n\
    \        instead of the current job.  The server or device will\n        automatically\
    \ resume the interrupted job when the interrupting\n        job completes.\n \
    \   jobRetained                       0x1000000\n        The job is being retained\
    \ by the server or device with all of\n        the job's document data (and submitted\
    \ resources, such as fonts,\n        logos, and forms, if any).  Thus a client\
    \ could issue an\n        operation to the server or device to either (1) re-do\
    \ the job\n        (or a copy of the job) on the same server or device or (2)\n\
    \        resubmit the job to another server or device.  When a client\n      \
    \  could no longer re-do/resubmit the job, such as after the\n        document\
    \ data has been discarded, the agent SHALL remove the\n        jobRetained value\
    \ from the jmJobStateReasons1 object.\n        These bit definitions are the equivalent\
    \ of a type 2 enum except\n        that combinations of bits may be used together.\
    \  See section\n        3.7.1.2.  The remaining bits are reserved for future\n\
    \        standardization and/or registration.\n"
- title: 3.3.9.2 JmJobStateReasons2TC specification
  contents:
  - "3.3.9.2 JmJobStateReasons2TC specification\n   The following standard values\
    \ are defined (in hexadecimal) as powers\n   of two, since multiple values MAY\
    \ be used at the same time.\n    cascaded                          0x1\n     \
    \   An outbound gateway has transmitted all of the job's job and\n        document\
    \ attributes and data to another spooling system.\n    deletedByAdministrator\
    \            0x2\n        The administrator has deleted the job.\n    discardTimeArrived\
    \                0x4\n        The job has been deleted due to the fact that the\
    \ time specified\n        by the job's job-discard-time attribute has arrived.\n\
    \    postProcessingFailed              0x8\n        The post-processing agent\
    \ failed while trying to log accounting\n        attributes for the job; therefore\
    \ the job has been placed into\n        the completed state with the jobRetained\
    \ jmJobStateReasons1\n        object value for a system-defined period of time,\
    \ so the\n        administrator can examine it, resubmit it, etc.\n    jobTransforming\
    \                   0x10\n        The server/device is interpreting document data\
    \ and producing\n        another electronic representation.\n    maxJobFaultCountExceeded\
    \          0x20\n        The job has faulted several times and has exceeded the\n\
    \        administratively defined fault count limit.\n    devicesNeedAttentionTimeOut\
    \       0x40\n        One or more document transforms that the job is using needs\n\
    \        human intervention in order for the job to make progress, but\n     \
    \   the human intervention did not occur within the site-settable\n        time-out\
    \ value.\n    needsKeyOperatorTimeOut           0x80\n        One or more devices\
    \ or document transforms that the job is using\n        need a specially trained\
    \ operator (who may need a key to unlock\n        the device and gain access)\
    \ in order for the job to make\n        progress, but the key operator intervention\
    \ did not occur within\n        the site-settable time-out value.\n    jobStartWaitTimeOut\
    \               0x100\n        The server/device has stopped the job at the beginning\
    \ of\n        processing to await human action, such as installing a special\n\
    \        cartridge or special non-standard media, but the job was not\n      \
    \  resumed within the site-settable time-out value and the\n        server/device\
    \ has transitioned the job to the pendingHeld state.\n    jobEndWaitTimeOut  \
    \               0x200\n        The server/device has stopped the job at the end\
    \ of processing\n        to await human action, such as removing a special cartridge\
    \ or\n        restoring standard media, but the job was not resumed within the\n\
    \        site-settable time-out value and the server/device has\n        transitioned\
    \ the job to the completed state.\n    jobPasswordWaitTimeOut            0x400\n\
    \        The server/device has stopped the job at the beginning of\n        processing\
    \ to await input of the job's password, but the\n        password was not received\
    \ within the site-settable time-out\n        value.\n    deviceTimedOut      \
    \              0x800\n        A device that the job was using has not responded\
    \ in a period\n        specified by the device's site-settable attribute.\n  \
    \  connectingToDeviceTimeOut         0x1000\n        The server is attempting\
    \ to connect to one or more devices which\n        may be dial-up, polled, or\
    \ queued, and so may be busy with\n        traffic from other systems, but server\
    \ was unable to connect to\n        the device within the site-settable time-out\
    \ value.\n    transferring                      0x2000\n        The job is being\
    \ transferred to a down stream server or\n        downstream device.\n    queuedInDevice\
    \                    0x4000\n        The server/device has queued the job in a\
    \ down stream server or\n        downstream device.\n    jobQueued           \
    \              0x8000\n        The server/device has queued the document data.\n\
    \    jobCleanup                        0x10000\n        The server/device is performing\
    \ cleanup activity as part of\n        ending normal processing.\n    jobPasswordWait\
    \                   0x20000\n        The server/device has selected the job to\
    \ be next to process,\n        but instead of assigning resources and starting\
    \ the job\n        processing, the server/device has transitioned the job to the\n\
    \        pendingHeld state to await entry of a password (and dispatched\n    \
    \    another job, if there is one).\n    validating                        0x40000\n\
    \        The server/device is validating the job after accepting the job.\n  \
    \  queueHeld                         0x80000\n        The operator has held the\
    \ entire job set or queue.\n    jobProofWait                      0x100000\n \
    \       The job has produced a single proof copy and is in the\n        pendingHeld\
    \ state waiting for the requester to issue an\n        operation to release the\
    \ job to print normally, obeying any job\n        and document copy attributes\
    \ that were originally submitted.\n    heldForDiagnostics                0x200000\n\
    \        The system is running intrusive diagnostics, so that all jobs\n     \
    \   are being held.\n    noSpaceOnServer                   0x800000\n        There\
    \ is no room on the server to store all of the job.\n    pinRequired         \
    \              0x1000000\n        The System Administrator settable device policy\
    \ is (1) to\n        require PINs, and (2) to hold jobs that do not have a pin\n\
    \        supplied as an input parameter when the job was created.\n    exceededAccountLimit\
    \              0x2000000\n        The account for which this job is drawn has\
    \ exceeded its limit.\n        This condition SHOULD be detected before the job\
    \ is scheduled so\n        that the user does not wait until his/her job is scheduled\
    \ only\n        to find that the account is overdrawn.  This condition MAY also\n\
    \        occur while the job is processing either as processing begins or\n  \
    \      part way through processing.\n    heldForRetry                      0x4000000\n\
    \        The job encountered some errors that the server/device could not\n  \
    \      recover from with its normal retry procedures, but the error\n        might\
    \ not be encountered if the job is processed again in the\n        future.  Example\
    \ cases are phone number busy or remote file\n        system in-accessible.  For\
    \ such a situation, the server/device\n        SHALL transition the job from the\
    \ processing to the pendingHeld,\n        rather than to the aborted state.\n\
    \    The following values are from the X/Open PSIS draft standard:\n    canceledByShutdown\
    \                0x8000000\n        The job was canceled because the server or\
    \ device was shutdown\n        before completing the job.\n    deviceUnavailable\
    \                 0x10000000\n        This job was aborted by the system because\
    \ the device is\n        currently unable to accept jobs.\n    wrongDevice   \
    \                    0x20000000\n        This job was aborted by the system because\
    \ the device is unable\n        to handle this particular job; the spooler SHOULD\
    \ try another\n        device or the user should submit the job to another device.\n\
    \    badJob                            0x40000000\n        This job was aborted\
    \ by the system because this job has a major\n        problem, such as an ill-formed\
    \ PDL; the spooler SHOULD not even\n        try another device.\n   These bit\
    \ definitions are the equivalent of a type 2 enum except that\n   combinations\
    \ of them may be used together.  See section 3.7.1.2.\n"
- title: 3.3.9.3 JmJobStateReasons3TC specification
  contents:
  - "3.3.9.3 JmJobStateReasons3TC specification\n   This textual-convention is used\
    \ with the jobStateReasons3 attribute\n   to provides additional information regarding\
    \ the jmJobState object.\n   The following standard values are defined (in hexadecimal)\
    \ as powers\n   of two, since multiple values may be used at the same time:\n\
    \    jobInterruptedByDeviceFailure     0x1\n        A device or the print system\
    \ software that the job was using has\n        failed while the job was processing.\
    \  The server or device is\n        keeping the job in the pendingHeld state until\
    \ an operator can\n        determine what to do with the job.\n   These bit definitions\
    \ are the equivalent of a type 2 enum except that\n   combinations of them may\
    \ be used together.  See section 3.7.1.2.  The\n   remaining bits are reserved\
    \ for future standardization and/or\n   registration.\n"
- title: 3.3.9.4 JmJobStateReasons4TC specification
  contents:
  - "3.3.9.4 JmJobStateReasons4TC specification\n   This textual-convention is used\
    \ with the jobStateReasons4 attribute\n   to provides additional information regarding\
    \ the jmJobState object.\n   The following standard values are defined (in hexadecimal)\
    \ as powers\n   of two, since multiple values MAY be used at the same time.\n\
    \        None defined at this time.\n   These bit definitions are the equivalent\
    \ of a type 2 enum except that\n   combinations of them may be used together.\
    \  See section 3.7.1.2.  The\n   remaining bits are reserved for future standardization\
    \ and/or\n   registration.\n"
- title: 3.4 Monitoring Job Progress
  contents:
  - "3.4 Monitoring Job Progress\n   There are a number of objects and attributes\
    \ for monitoring the\n   progress of a job.  These objects and attributes count\
    \ the number of\n   K octets, impressions, sheets, and pages requested or completed.\
    \  For\n   impressions and sheets, \"completed\" means stacked, unless the\n \
    \  implementation is unable to detect when each sheet is stacked, in\n   which\
    \ case stacked is approximated when processing of each sheet\n   completes.  There\
    \ are objects and attributes for the overall job and\n   for the current copy\
    \ of the document currently being stacked.  For\n   the latter, the rate at which\
    \ the various objects and attributes\n   count depends on the sheet and document\
    \ collation of the job.\n   Job Collation included sheet collation and document\
    \ collation.  Sheet\n   collation is defined to be the ordering of sheets within\
    \ a document\n   copy.  Document collation is defined to be ordering of document\n\
    \   copies within a multi-document job.  There are three types of job\n   collation\
    \ (see terminology definitions in Section 2):\n     1.uncollatedSheets(3) - No\
    \ collation of the sheets within each\n       document copy, i.e., each sheet\
    \ of a document that is to produce\n       multiple copies is replicated before\
    \ the next sheet in the\n       document is processed and stacked.  If the device\
    \ has an output\n       bin collator, the uncollatedSheets(3) value may actually\
    \ produce\n       collated sheets as far as the user is concerned (in the output\n\
    \       bins).  However, when the job collation is the to a monitoring\n     \
    \  application between a device that has an output bin collator and\n       one\
    \ that does not.\n     2.collatedDocuments(4) - Collation of the sheets within\
    \ each\n       document copy is performed within the printing device by making\n\
    \       multiple passes over either the source or an intermediate\n       representation\
    \ of the document.  In addition, when there are\n       multiple documents per\
    \ job, the i'th copy of each document is\n       stacked before the j'th copy\
    \ of each document, i.e., the\n       documents are collated within each job copy.\
    \  For example, if a\n       job is submitted with documents, A and B, the job\
    \ is made\n       available to the end user as: A, B, A, B, ....  The '\n    \
    \   collatedDocuments(4)' value corresponds to the IPP [ipp-model] '\n       separate-documents-collated-copies'\
    \ value of the \"multiple-\n       document-handling\" attribute.\n       If jobCopiesRequested\
    \ or documentCopiesRequested = 1, then\n       jobCollationType is defined as\
    \ 4.\n     3.uncollatedDocuments(5) - Collation of the sheets within each\n  \
    \     document copy is performed within the printing device by making\n      \
    \ multiple passes over either the source or an intermediate\n       representation\
    \ of the document.  In addition, when there are\n       multiple documents per\
    \ job, all copies of the first document in\n       the job are stacked before\
    \ the any copied of the next document in\n       the job, i.e., the documents\
    \ are uncollated within the job.  For\n       example, if a job is submitted with\
    \ documents, A and B, the job\n       is mad available to the end user as:  A,\
    \ A, ..., B, B, ....  The\n       'uncollatedDocuments(5)' value corresponds to\
    \ the IPP [ipp-model]\n       'separate-documents-uncollated-copies' value of\
    \ the \"multiple-\n       document-handling\" attribute.\n   Consider the following\
    \ four variables that are used to monitor the\n   progress of a job's impressions:\n\
    \     1.jmJobImpressionsCompleted - counts the total number of\n       impressions\
    \ stacked for the job\n     2.impressionsCompletedCurrentCopy - counts the number\
    \ of\n       impressions stacked for the current document copy\n     3.sheetCompletedCopyNumber\
    \ - identifies the number of the copy for\n       the current document being stacked\
    \ where the first copy is 1.\n     4.sheetCompletedDocumentNumber - identifies\
    \ the current document\n       within the job that is being stacked where the\
    \ first document in\n       a job is 1.  NOTE: this attribute SHOULD NOT be implemented\
    \ for\n       implementations that only support one document per job.\n   For\
    \ each of the three types of job collation, a job with three copies\n   of two\
    \ documents (1, 2), where each document consists of 3\n   impressions, the four\
    \ variables have the following values as each\n   sheet is stacked for one-sided\
    \ printing:\n                  Job Collation Type = uncollatedSheets(3)\n   jmJobImpressions\
    \ Impressions      sheetCompleted sheetCompleted\n   Completed        CompletedCurrent\
    \ CopyNumber     DocumentNumber\n                    Copy\n           0      \
    \          0               0               0\n           1                1  \
    \             1               1\n           2                1               2\
    \               1\n           3                1               3             \
    \  1\n           4                2               1               1\n        \
    \   5                2               2               1\n           6         \
    \       2               3               1\n           7                3     \
    \          1               1\n           8                3               2  \
    \             1\n           9                3               3               1\n\
    \          10                1               1               2\n          11 \
    \               1               2               2\n          12              \
    \  1               3               2\n          13                2          \
    \     1               2\n          14                2               2       \
    \        2\n          15                2               3               2\n  \
    \        16                3               1               2\n          17   \
    \             3               2               2\n          18                3\
    \               3               2\n                  Job Collation Type = collatedDocuments(4)\n\
    \   JmJobImpressions Impressions      sheetCompleted sheetCompleted\n   Completed\
    \        CompletedCurrent CopyNumber     DocumentNumber\n                    Copy\n\
    \           0                0               0               0\n           1 \
    \               1               1               1\n           2              \
    \  2               1               1\n           3                3          \
    \     1               1\n           4                1               1       \
    \        2\n           5                2               1               2\n  \
    \         6                3               1               2\n           7   \
    \             1               2               1\n           8                2\
    \               2               1\n           9                3             \
    \  2               1\n          10                1               2          \
    \     2\n          11                2               2               2\n     \
    \     12                3               2               2\n          13      \
    \          1               3               1\n          14                2  \
    \             3               1\n          15                3               3\
    \               1\n          16                1               3             \
    \  2\n          17                2               3               2\n        \
    \  18                3               3               2\n                 Job Collation\
    \ Type = uncollatedDocuments(5)\n   jmJobImpressions Impressions      sheetCompleted\
    \ sheetCompleted\n   Completed        CompletedCurrent CopyNumber     DocumentNumber\n\
    \                    Copy\n           0                0               0     \
    \          0\n           1                1               1               1\n\
    \           2                2               1               1\n           3 \
    \               3               1               1\n           4              \
    \  1               2               1\n           5                2          \
    \     2               1\n           6                3               2       \
    \        1\n           7                1               3               1\n  \
    \         8                2               3               1\n           9   \
    \             3               3               1\n          10                1\
    \               1               2\n          11                2             \
    \  1               2\n          12                3               1          \
    \     2\n          13                1               2               2\n     \
    \     14                2               2               2\n          15      \
    \          3               2               2\n          16                1  \
    \             3               2\n          17                2               3\
    \               2\n          18                3               3             \
    \  2\n"
- title: 3.5 Job Identification
  contents:
  - "3.5 Job Identification\n   There are a number of attributes that permit a user,\
    \ operator or\n   system administrator to identify jobs of interest, such as jobURI,\n\
    \   jobName, jobOriginatingHost, etc.  In addition, there is a\n   jmJobSubmissionID\
    \ object that is a text string table index.  Being a\n   table index allows a\
    \ monitoring application to quickly locate and\n   identify a particular job of\
    \ interest that was submitted from a\n   particular client by the user invoking\
    \ the monitoring application\n   without having to scan the entire job table.\
    \  The Job Monitoring MIB\n   needs to provide for identification of the job at\
    \ both sides of the\n   job submission process.  The primary identification point\
    \ is the\n   client side.  The jmJobSubmissionID allows the monitoring application\n\
    \   to identify the job of interest from all the jobs currently \"known\"\n  \
    \ by the server or device.  The value of jmJobSubmissionID can be\n   assigned\
    \ by either the client's local system or a downstream server\n   or device.  The\
    \ point of assignment depends on the job submission\n   protocol in use.\n   The\
    \ server/device-side identifier, called the jmJobIndex object,\n   SHALL be assigned\
    \ by the SNMP Job Monitoring MIB agent when the\n   server or device accepts the\
    \ jobs from submitting clients.  The\n   jmJobIndex object allows the interested\
    \ party to obtain all objects\n   desired that relate to a particular job.  See\
    \ Section 3.2, entitled '\n   The Job Tables and the Oldest Active and Newest\
    \ Active Indexes' for\n   the specification of how the agent SHALL assign the\
    \ jmJobIndex\n   values.\n   The MIB provides a mapping table that maps each jmJobSubmissionID\n\
    \   value to a corresponding jmJobIndex value generated by the agent, so\n   that\
    \ an application can determine the correct value for the\n   jmJobIndex value\
    \ for the job of interest in a single Get operation,\n   given the Job Submission\
    \ ID.  See the jmJobIDGroup.\n   In some configurations there may be more than\
    \ one application program\n   that monitors the same job when the job passes from\
    \ one network\n   entity to another when it is submitted.  See configuration 3.\
    \  When\n   there are multiple job submission IDs, each entity MAY supply an\n\
    \   appropriate jmJobSubmissionID value.  In this case there would be a\n   separate\
    \ entry in the jmJobSubmissionID table, one for each\n   jmJobSubmissionID.  All\
    \ entries would map to the same jmJobIndex that\n   contains the job data.  When\
    \ the job is deleted, it is up to the\n   agent to remove all entries that point\
    \ to the job from the\n   jmJobSubmissionID table as well.\n   The jobName attribute\
    \ provides a name that the user supplies as a job\n   attribute with the job.\
    \  The jobName attribute is not necessarily\n   unique, even for one user, let\
    \ alone across users.\n"
- title: 3.5.1 The Job Submission ID specifications
  contents:
  - "3.5.1 The Job Submission ID specifications\n   This section specifies the formats\
    \ for each of the registered Job\n   Submission Ids.  This format is used by the\
    \ JmJobSubmissionIDTypeTC.\n   Each job submission ID is a fixed-length, 48-octet\
    \ printable US-ASCII\n   [US-ASCII] coded character string containing no control\
    \ characters,\n   consisting of the following fields:\n          octet  1:  The\
    \ format letter identifying the format.  The\n            US-ASCII characters\
    \ '0-9', 'A-Z', and 'a-z' are assigned\n            in order giving 62 possible\
    \ formats.\n          octets 2-40:  A 39-character, US-ASCII trailing SPACE\n\
    \            filled field specified by the format letter, if the data\n      \
    \      is less than 39 ASCII characters.\n          octets 41-48:  A sequential\
    \ or random US-ASCII number to\n            make the ID quasi-unique.\n   If the\
    \ client does not supply a job submission ID in the job\n   submission protocol,\
    \ then the agent SHALL assign a job submission ID\n   using any of the standard\
    \ formats that are reserved for the agent.\n   Clients SHALL not use formats that\
    \ are reserved for agents and agents\n   SHALL NOT use formats that are reserved\
    \ for clients, in order to\n   reduce conflicts in ID generation.  See the description\
    \ for which\n   formats are reserved for clients or for agents.\n   Registration\
    \ of additional formats may be done following the\n   procedures described in\
    \ Section 3.7.3.\n   The format values defined at the time of completion of this\n\
    \   specification are:\n        Format\n        Letter  Description\n        ------\
    \   ------------\n        '0' Job Owner generated by the server/device\n     \
    \   octets 2-40:  The last 39 bytes of the jmJobOwner  object.\n        octets\
    \ 41-48:  The US-ASCII 8-decimal-digit sequential number\n            assigned\
    \ by the agent.\n        This format is reserved for agents.\n        NOTE - Clients\
    \ wishing to use a job submission ID that\n            incorporates the job owner,\
    \ SHALL use format '8', not\n            format '0'.\n        '1' Job Name\n \
    \       octets 2-40:  The last 39 bytes of the jobName attribute.\n        octets\
    \ 41-48:  The US-ASCII 8-decimal-digit random number\n            assigned by\
    \ the client.\n        This format is reserved for clients.\n        '2' Client\
    \ MAC address\n        octets 2-40:  The client MAC address: in hexadecimal with\n\
    \            each nibble of the 6 octet address being '0'-'9' or\n           \
    \ 'A' - 'F' (uppercase only). Most significant octet first.\n        octets 41-48:\
    \  The US-ASCII 8-decimal-digit sequential number\n            assigned by the\
    \ client.\n        This format is reserved for clients.\n        '3' Client URL\n\
    \        octets 2-40:  The last 39 bytes of the client URL [URI-spec].\n     \
    \   octets 41-48:  The US-ASCII 8-decimal-digit sequential number\n          \
    \  assigned by the client.\n        This format is reserved for clients.\n   \
    \     '4' Job URI\n        octets 2-40:  The last 39 bytes of the URI [URI-spec]\n\
    \            assigned by the server or device to the job when the job\n      \
    \      was submitted for processing.\n        octets 41-48:  The US-ASCII 8-decimal-digit\
    \ sequential number\n            assigned by the agent.\n        This format is\
    \ reserved for agents.\n        '5' POSIX User Number\n        octets 2-40:  The\
    \ last 39 bytes of a user number, such as\n            POSIX  user number.\n \
    \       octets 41-48:  The US-ASCII 8-decimal-digit sequential number\n      \
    \      assigned by the client.\n        This format is reserved for clients.\n\
    \        '6' User Account Number\n        octets 2-40:  The last 39 bytes of the\
    \ user account number.\n        octets 41-48:  The US-ASCII 8-decimal-digit sequential\
    \ number\n            assigned by the client.\n        This format is reserved\
    \ for clients.\n        '7' DTMF Incoming FAX routing number\n        octets 2-40:\
    \  The last 39 bytes of the DTMF incoming FAX\n            routing number.\n \
    \       octets 41-48:  The US-ASCII 8-decimal-digit sequential number\n      \
    \      assigned by the client.\n        This format is reserved for clients.\n\
    \        '8' Job Owner supplied by the client\n        octets 2-40:  The last\
    \ 39 bytes of the job owner name (that the\n            agent returns in the jmJobOwner\
    \ object).\n        octets 41-48:  The US-ASCII 8-decimal-digit sequential number\n\
    \            assigned by the client.\n        This format is reserved for clients.\
    \  See format '0' which is\n            reserved for agents.\n        '9' Host\
    \ Name\n        octets 2-40:  The last 39 bytes of the host name with trailing\n\
    \            SPACES that submitted the job to this server/device using\n     \
    \       a protocol, such as LPD [RFC1179] which includes the host\n          \
    \  name in the job submission protocol.\n        octets 41-48:  The US-ASCII 8-decimal-digit\
    \ leading zero\n            representation of the job id generated by the submitting\n\
    \            server (configuration 3) or the client (configuration 1\n       \
    \     and 2), such as in the LPD protocol.\n        This format is reserved for\
    \ clients.\n        'A' AppleTalk Protocol\n        octets 2-40:  Contains the\
    \ AppleTalk printer name, with the\n            first character of the name in\
    \ octet 2.  AppleTalk printer\n            names are a maximum of 31 characters.\
    \  Any unused portion\n            of this field shall be filled with spaces.\n\
    \        octets 41-48:  '00000XXX', where 'XXX' is the 3-digit US-ASCII\n    \
    \        decimal representation of the Connection Id.\n        This format is\
    \ reserved for agents.\n        'B' NetWare PServer\n        octets 2-40:  Contains\
    \ the Directory Path Name as recorded by\n            the Novell File Server in\
    \ the queue directory.  If the\n            string is less than 40 octets, the\
    \ left-most character in\n            the string shall appear in octet position\
    \ 2.  Otherwise,\n            only the last 39 bytes shall be included.  Any unused\n\
    \            portion of this field shall be filled with spaces.\n        octets\
    \ 41-48:  '000XXXXX'  The US-ASCII representation of the\n            Job Number\
    \ as per the NetWare File Server Queue Management\n            Services.\n   \
    \     This format is reserved for agents.\n        'C' Server Message Block protocol\
    \ (SMB)\n        octets 2-40:  Contains a decimal (US-ASCII coded)\n         \
    \   representation of the 16 bit SMB Tree Id field, which\n            uniquely\
    \ identifies the connection that submitted the job\n            to the printer.\
    \  The most significant digit of the numeric\n            string shall be placed\
    \ in octet position 2.  All unused\n            portions of this field shall be\
    \ filled with spaces.  The\n            SMB Tree Id has a maximum value of 65,535.\n\
    \        octets 41-48:  The US-ASCII 8-decimal-digit leading zero\n          \
    \  representation of the File Handle returned from the device\n            to\
    \ the client in response to a Create Print File command.\n        This format\
    \ is reserved for agents.\n        'D' Transport Independent Printer/System Interface\
    \ (TIP/SI)\n        octets 2-40:  Contains the Job Name from the Job Control-Start\n\
    \            Job (JC-SJ) command.  If the Job Name portion is less than\n    \
    \        40 octets, the left-most character in the string shall\n            appear\
    \ in octet position 2.  Any unused portion of this\n            field shall be\
    \ filled with spaces.  Otherwise, only the\n            last 39 bytes shall be\
    \ included.\n        octets 41-48:  The US-ASCII 8-decimal-digit leading zero\n\
    \            representation of the jmJobIndex assigned by the agent.\n       \
    \ This format is reserved for agents, since the agent supplies\n            octets\
    \ 41-48, though the client supplies the job name.\n            See format '1'\
    \ reserved to clients to submit job name ids\n            in which they supply\
    \ octets 41-48.\n        'E' IPDS on the MVS or VSE platform\n        octets 2-40:\
    \  Contains bytes 2-27 of the XOH Define Group\n            Boundary Group ID\
    \ triplet. Octet position 2 MUST carry\n            the value x'01'.  Bytes 28-40\
    \ MUST be filled with spaces.\n        octets 41-48: The US-ASCII 8-decimal-digit\
    \ leading zero\n            representation of the jmJobIndex assigned by the agent.\n\
    \        This format is reserved for agents, since the agent supplies\n      \
    \      octets 41-48, though the client supplies the job name.\n        'F' IPDS\
    \ on the VM platform\n        octets 2-40:  Contains bytes 2-31 of the XOH Define\
    \ Group\n            Boundary Group ID triplet. Octet position 2 MUST carry\n\
    \            the value x'02'.  Bytes 32-40 MUST be filled with spaces.\n     \
    \   octets 41-48: The US-ASCII 8-decimal-digit leading zero\n            representation\
    \ of the jmJobIndex assigned by the agent.\n        This format is reserved for\
    \ agents, since the agent supplies\n            octets 41-48, though the client\
    \ supplies the file name.\n        'G' IPDS on the OS/400 platform\n        octets\
    \ 2-40:  Contains bytes 2-36 of the XOH Define Group\n            Boundary Group\
    \ ID triplet.  Octet position 2 MUST carry\n            the value x'03'.  Bytes\
    \ 37-40 MUST be filled with spaces.\n        octets 41-48: The US-ASCII 8-decimal-digit\
    \ leading zero\n            representation of the jmJobIndex assigned by the agent.\n\
    \        This format is reserved for agents, since the agent supplies\n      \
    \      octets 41-48, though the client supplies the job name.\n   NOTE - the job\
    \ submission id is only intended to be unique between a\n   limited set of clients\
    \ for a limited duration of time, namely, for\n   the life time of the job in\
    \ the context of the server or device that\n   is processing the job.  Some of\
    \ the formats include something that is\n   unique per client and a random number\
    \ so that the same job submitted\n   by the same client will have a different\
    \ job submission id.  For\n   other formats, where part of the id is guaranteed\
    \ to be unique for\n   each client, such as the MAC address or URL, a sequential\
    \ number\n   SHOULD suffice for each client (and may be easier for each client\
    \ to\n   manage).  Therefore, the length of the job submission id has been\n \
    \  selected to reduce the probability of collision to an extremely low\n   number,\
    \ but is not intended to be an absolute guarantee of\n   uniqueness.  None-the-less,\
    \ collisions are remotely possible, but\n   without bad consequences, since this\
    \ MIB is intended to be used only\n   for monitoring jobs, not for controlling\
    \ and managing them.\n"
- title: 3.6 Internationalization Considerations
  contents:
  - "3.6 Internationalization Considerations\n   This section describes the internationalization\
    \ considerations\n   included in this MIB.\n"
- title: 3.6.1 Text generated by the server or device
  contents:
  - "3.6.1 Text generated by the server or device\n   There are a few objects and\
    \ attributes generated by the server or\n   device that SHALL be represented using\
    \ the Universal Multiple-Octet\n   Coded Character Set (UCS) [ISO-10646].  These\
    \ objects and attributes\n   are always supplied (if implemented) by the agent,\
    \ not by the job\n   submitting client:\n      1. jmGeneralJobSetName object\n\
    \      2. processingMessage(6) attribute\n      3. physicalDevice(32) (name value)\
    \ attribute\n   The character encoding scheme for representing these objects and\n\
    \   attributes SHALL be UTF-8 as REQUIRED by RFC 2277 [RFC2277].  The '\n   JmUTF8StringTC'\
    \ textual convention is used to indicate UTF-8 text\n   strings.\n   NOTE - For\
    \ strings in 7-bit US-ASCII, there is no impact since the\n   UTF-8 representation\
    \ of 7-bit ASCII is identical to the US-ASCII\n   [US-ASCII] encoding.\n   The\
    \ text contained in the processingMessage(6) attribute is generated\n   by the\
    \ server/device.  The natural language for the\n   processingMessage(6) attribute\
    \ is identified by the\n   processingMessageNaturalLangTag(7) attribute.  The\n\
    \   processingMessageNaturalLangTag(7) attribute uses the\n   JmNaturalLanguageTagTC\
    \ textual convention which SHALL conform to the\n   language tag mechanism specified\
    \ in RFC 1766 [RFC1766].  The\n   JmNaturalLanguageTagTC value is the same as\
    \ the IPP [ipp-model] '\n   naturalLanguage' attribute syntax.  RFC 1766 specifies\
    \ that a US-\n   ASCII string consisting of the natural language followed by an\n\
    \   optional country field. Both fields use the same two-character codes\n   from\
    \ ISO 639 [ISO-639] and ISO 3166 [ISO-3166], respectively, that\n   are used in\
    \ the Printer MIB for identifying language and country.\n   Examples of the values\
    \ of the processingMessageNaturalLangTag(7)\n   attribute include:\n        1.\
    \ 'en'    for English\n        2. 'en-us' for US English\n        3. 'fr'    for\
    \ French\n        4. 'de'    for German\n"
- title: 3.6.2 Text supplied by the job submitter
  contents:
  - "3.6.2 Text supplied by the job submitter\n   All of the objects and attributes\
    \ represented by the 'JmJobStringTC'\n   textual-convention are either (1) supplied\
    \ in the job submission\n   protocol by the client that submits the job to the\
    \ server or device\n   or (2) are defaulted by the server or device if the job\
    \ submitting\n   client does not supply values.  The agent SHALL represent these\n\
    \   objects and attributes in the MIB either (1) in the coded character\n   set\
    \ as they were submitted or (2) MAY convert the coded character set\n   to another\
    \ coded character set or encoding scheme.  In any case, the\n   resulting coded\
    \ character set representation SHOULD be UTF-8 [UTF-8],\n   but SHALL be one in\
    \ which the code positions from 0 to 31 is not\n   used, 32 to 127 is US-ASCII\
    \ [US-ASCII], 127 is not unused, and the\n   remaining code positions 128 to 255\
    \ represent single-byte or multi-\n   byte graphic characters structured according\
    \ to ISO 2022 [ISO-2022]\n   or are unused.\n   The coded character set SHALL\
    \ be one of the ones registered with IANA\n   [IANA] and SHALL be identified by\
    \ the jobCodedCharSet attribute in\n   the jmJobAttributeTable for the job.  If\
    \ the agent does not know what\n   coded character set was used by the job submitting\
    \ client, the agent\n   SHALL either (1) return the 'unknown(2)' value for the\n\
    \   jobCodedCharSet attribute or (2) not return the jobCodedCharSet\n   attribute\
    \ for the job.\n   Examples of coded character sets which meet this criteria for\
    \ use as\n   the value of the jobCodedCharSet job attribute are: US-ASCII [US-\n\
    \   ASCII], ISO 8859-1 (Latin-1) [ISO-8859-1], any ISO 8859-n, HP Roman8,\n  \
    \ IBM Code Page 850, Windows Default 8-bit set, UTF-8 [UTF-8], US-ASCII\n   plus\
    \ JIS X0208-1990 Japanese [JIS X0208], US-ASCII plus GB2312-1980\n   PRC Chinese\
    \ [GB2312].  See the IANA registry of coded character sets\n   [IANA charsets].\n\
    \   Examples of coded character sets which do not meet this criteria are:\n  \
    \ national 7-bit sets conforming to ISO 646 (except US-ASCII), EBCDIC,\n   and\
    \ ISO 10646 (Unicode) [ISO-10646].  In order to represent Unicode\n   characters,\
    \ the UTF-8 [UTF-8] encoding scheme SHALL be used which has\n   been assigned\
    \ the MIBenum value of '106' by IANA.\n   The jobCodedCharSet attribute uses the\
    \ imported 'CodedCharSet'\n   textual-convention from the Printer MIB [printmib].\n\
    \   The natural language for attributes represented by the textual-\n   convention\
    \ JmJobStringTC is identified either (1) by the\n   jobNaturalLanguageTag(9) attribute\
    \ or is keywords in US-English (as\n   in IPP).  A monitoring application SHOULD\
    \ attempt to localize\n   keywords into the language of the user by means of some\
    \ lookup\n   mechanism.  If the keyword value is not known to the monitoring\n\
    \   application, the monitoring application SHOULD assume that the value\n   is\
    \ in the natural language specified by the job's\n   jobNaturalLanguageTag(9)\
    \ attribute and SHOULD present the value to\n   its user as is.  The jobNaturalLanguageTag(9)\
    \ attribute value SHALL\n   have the same syntax and semantics as the\n   processingMessageNaturalLangTag(7)\
    \ attribute, except that the\n   jobNaturalLanguageTag(9) attribute identifies\
    \ the natural language of\n   attributes supplied by the job submitter instead\
    \ of the natural\n   language of the processingMessage(6) attribute.  See Section\
    \ 3.6.1.\n"
- title: 3.6.3 'DateAndTime' for representing the date and time
  contents:
  - "3.6.3 'DateAndTime' for representing the date and time\n   This MIB also contains\
    \ objects that are represented using the\n   DateAndTime textual convention from\
    \ SMIv2 [SMIv2-TC].  The job\n   management application SHALL display such objects\
    \ in the locale of\n   the user running the monitoring application.\n"
- title: 3.7 IANA and PWG Registration Considerations
  contents:
  - "3.7 IANA and PWG Registration Considerations\n   This MIB does not require any\
    \ additional registration schemes for\n   IANA, but does depend on registration\
    \ schemes that other Internet\n   standards track specifications have set up.\
    \  The names of these IANA\n   registration assignments under the /in-notes/iana/assignments/\
    \ path:\n   1.printer-language-numbers - used as enums in the documentFormat(38)\n\
    \       attribute\n   2.media-types - uses as keywords in the documentFormat(38)\
    \ attribute\n   3.character-sets - used as enums in the jobCodedCharSet(8) attribute\n\
    \   The Printer Working Group (PWG) will handle registration of\n   additional\
    \ enums after approving this standard, according to the\n   procedures described\
    \ in this section:\n"
- title: 3.7.1 PWG Registration of enums
  contents:
  - "3.7.1 PWG Registration of enums\n   This specification uses textual conventions\
    \ to define enumerated\n   values (enums) and bit values.  Enumerations (enums)\
    \ and bit values\n   are sets of symbolic values defined for use with one or more\
    \ objects\n   or attributes.  All enumeration sets and bit value sets are assigned\n\
    \   a symbolic data type name (textual convention).  As a convention the\n   symbolic\
    \ name ends in \"TC\" for textual convention.  These\n   enumerations are defined\
    \ at the beginning of the MIB module\n   specification.\n   The PWG has defined\
    \ several type of enumerations for use in the Job\n   Monitoring MIB and the Printer\
    \ MIB [print-mib].  These types differ\n   in the method employed to control the\
    \ addition of new enumerations.\n   Throughout this document, references to \"\
    type n enum\", where n can be\n   1, 2 or 3 can be found in the various tables.\
    \  The definitions of\n   these types of enumerations are:\n"
- title: 3.7.1.1 Type 1 enumerations
  contents:
  - "3.7.1.1 Type 1 enumerations\n   Type 1 enumeration:  All the values are defined\
    \ in the Job Monitoring\n   MIB specification (RFC for the Job Monitoring MIB).\
    \  Additional\n   enumerated values require a new RFC.\n   There are no type 1\
    \ enums in the current document.\n"
- title: 3.7.1.2 Type 2 enumerations
  contents:
  - "3.7.1.2 Type 2 enumerations\n   Type 2 enumeration:  An initial set of values\
    \ are defined in the Job\n   Monitoring MIB specification.  Additional enumerated\
    \ values are\n   registered with the PWG.\n   The following type 2 enums are contained\
    \ in the current document:\n        1. JmUTF8StringTC\n        2. JmJobStringTC\n\
    \        3. JmNaturalLanguageTagTC\n        4. JmTimeStampTC\n        5. JmFinishingTC\
    \ [same enum values as IPP \"finishing\" attribute]\n        6. JmPrintQualityTC\
    \ [same enum values as IPP \"print-quality\"\n           attribute]\n        7.\
    \ JmTonerEconomyTC\n        8. JmMediumTypeTC\n        9. JmJobSubmissionIDTypeTC\n\
    \        10.JmJobCollationTypeTC\n        11.JmJobStateTC [same enum values as\
    \ IPP \"job-state\" attribute]\n        12.JmAttributeTypeTC\n   For those textual\
    \ conventions that have the same enum values as the\n   indicated IPP Job attribute\
    \ are simultaneously registered by the PWG\n   for use with IPP [ipp-model] and\
    \ the Job Monitoring MIB.\n"
- title: 3.7.1.3 Type 3 enumeration
  contents:
  - "3.7.1.3 Type 3 enumeration\n   Type 3 enumeration:  An initial set of values\
    \ are defined in the Job\n   Monitoring MIB specification.  Additional enumerated\
    \ values are\n   registered through the PWG without PWG review.\n   There are\
    \ no type 3 enums in the current document.\n"
- title: 3.7.2 PWG Registration of type 2 bit values
  contents:
  - "3.7.2 PWG Registration of type 2 bit values\n   This memo contains the following\
    \ type 2 bit value textual-\n   conventions:\n        1. JmJobServiceTypesTC\n\
    \        2. JmJobStateReasons1TC\n        3. JmJobStateReasons2TC\n        4.\
    \ JmJobStateReasons3TC\n        5. JmJobStateReasons4TC\n   These textual-conventions\
    \ are defined as bits in an Integer so that\n   they can be used with SNMPv1 SMI.\
    \  The jobStateReasonsN (N=1..4)\n   attributes are defined as bit values using\
    \ the corresponding\n   JmJobStateReasonsNTC textual-conventions.\n   The registration\
    \ of JmJobServiceTypesTC and JmJobStateReasonsNTC bit\n   values follow the procedures\
    \ for a type 2 enum as specified in\n   Section 3.7.1.2.\n"
- title: 3.7.3 PWG Registration of Job Submission Id Formats
  contents:
  - "3.7.3 PWG Registration of Job Submission Id Formats\n   In addition to enums\
    \ and bit values, this specification assigns a\n   single ASCII digit or letter\
    \ to various job submission ID formats.\n   See the JmJobSubmissionIDTypeTC textual-convention\
    \ and the  object.\n   The registration of JobSubmissionID format numbers follows\
    \ the\n   procedures for a type 2 enum as specified in Section 3.7.1.2.\n"
- title: 3.7.4 PWG Registration of MIME types/sub-types for document-formats
  contents:
  - "3.7.4 PWG Registration of MIME types/sub-types for document-formats\n   The documentFormat(38)\
    \ attribute has MIME type/sub-type values for\n   indicating document formats\
    \ which IANA registers as \"media type\"\n   names.  The values of the documentFormat(38)\
    \ attribute are the same\n   as the corresponding Internet Printing Protocol (IPP)\
    \ \"document-\n   format\" Job attribute values [ipp-model].\n"
- title: 3.8 Security Considerations
  contents:
  - '3.8 Security Considerations

    '
- title: 3.8.1 Read-Write objects
  contents:
  - "3.8.1 Read-Write objects\n   All objects are read-only, greatly simplifying the\
    \ security\n   considerations.  If another MIB augments this MIB, that MIB might\n\
    \   accept SNMP Write operations to objects in that MIB whose effect is\n   to\
    \ modify the values of read-only objects in this MIB.  However, that\n   MIB SHALL\
    \ have to support the required access control in order to\n   achieve security,\
    \ not this MIB.\n"
- title: 3.8.2 Read-Only Objects In Other User's Jobs
  contents:
  - "3.8.2 Read-Only Objects In Other User's Jobs\n   The security policy of some\
    \ sites MAY be that unprivileged users can\n   only get the objects from jobs\
    \ that they submitted, plus a few\n   minimal objects from other jobs, such as\
    \ the\n   jmJobKOctetsPerCopyRequested and jmJobKOctetsProcessed objects, so\n\
    \   that a user can tell how busy a printer is.  Other sites MAY allow\n   all\
    \ unprivileged users to see all objects of all jobs.  This MIB does\n   not require,\
    \ nor does it specify how, such restrictions would be\n   implemented.  A monitoring\
    \ application SHOULD enforce the site\n   security policy with respect to returning\
    \ information to an\n   unprivileged end user that is using the monitoring application\
    \ to\n   monitor jobs that do not belong to that user, i.e., the jmJobOwner\n\
    \   object in the jmJobTable does not match the user's user name.\n   An operator\
    \ is a privileged user that would be able to see all\n   objects of all jobs,\
    \ independent of the policy for unprivileged\n   users.\n"
- title: 3.9 Notifications
  contents:
  - "3.9 Notifications\n   This MIB does not specify any notifications.  For simplicity,\n\
    \   management applications are expected to poll for status.  The\n   jmGeneralJobPersistence\
    \ and jmGeneralAttributePersistence objects\n   assist an application to determine\
    \ the polling rate.  The resulting\n   network traffic is not expected to be significant.\n"
- title: 4  MIB specification
  contents:
  - '4  MIB specification

    '
- title: The following pages constitute the actual Job Monitoring MIB.
  contents:
  - 'The following pages constitute the actual Job Monitoring MIB.

    '
- title: Job-Monitoring-MIB DEFINITIONS ::= BEGIN
  contents:
  - 'Job-Monitoring-MIB DEFINITIONS ::= BEGIN

    '
- title: IMPORTS
  contents:
  - "IMPORTS\n    MODULE-IDENTITY, OBJECT-TYPE, enterprises,\n    Integer32      \
    \                                 FROM SNMPv2-SMI\n    TEXTUAL-CONVENTION    \
    \                          FROM SNMPv2-TC\n    MODULE-COMPLIANCE, OBJECT-GROUP\
    \                 FROM SNMPv2-CONF;\n    -- The following textual-conventions\
    \ are needed to implement\n    -- certain attributes, but are not needed to compile\
    \ this MIB.\n    -- They are provided here for convenience:\n    -- hrDeviceIndex\
    \                        FROM HOST-RESOURCES-MIB\n    -- DateAndTime         \
    \                 FROM SNMPv2-TC\n    -- PrtInterpreterLangFamilyTC,\n    -- CodedCharSet\
    \                         FROM Printer-MIB\n"
- title: -- Use the enterprises arc assigned to the PWG which is pwg(2699).
  contents:
  - '-- Use the enterprises arc assigned to the PWG which is pwg(2699).

    '
- title: -- Group all PWG mibs under mibs(1).
  contents:
  - '-- Group all PWG mibs under mibs(1).

    '
- title: jobmonMIB MODULE-IDENTITY
  contents:
  - "jobmonMIB MODULE-IDENTITY\n    LAST-UPDATED \"9902190000Z\"\n    ORGANIZATION\
    \ \"Printer Working Group (PWG)\"\n    CONTACT-INFO\n        \"Tom Hastings\n\
    \        Postal:  Xerox Corp.\n                 Mail stop ESAE-231\n         \
    \        701 S. Aviation Blvd.\n                 El Segundo, CA 90245\n      \
    \  Tel:     (301)333-6413\n        Fax:     (301)333-5514\n        E-mail:  hastings@cp10.es.xerox.com\n\
    \        Send questions and comments to the Printer Working Group (PWG)\n    \
    \    using the Job Monitoring Project (JMP) Mailing List:\n        jmp@pwg.org\n\
    \        For further information, including how to subscribe to the\n        jmp\
    \ mailing list, access the PWG web page under 'JMP':\n            http://www.pwg.org/\n\
    \        Implementers of this specification are encouraged to join the\n     \
    \   jmp mailing list in order to participate in discussions on any\n        clarifications\
    \ needed and registration proposals being reviewed\n        in order to achieve\
    \ consensus.\"\n    DESCRIPTION\n        \"The MIB module for monitoring job in\
    \ servers, printers, and\n        other devices.\n        Version: 1.0\"\n   \
    \ -- revision history\n    REVISION    \"9902190000Z\"\n    DESCRIPTION \" This\
    \ version published as RFC 2707\"\n    ::= { enterprises pwg(2699)  mibs(1)  jobmonMIB(1)\
    \ }\n"
- title: -- Textual conventions for this MIB module
  contents:
  - '-- Textual conventions for this MIB module

    '
- title: JmUTF8StringTC ::= TEXTUAL-CONVENTION
  contents:
  - "JmUTF8StringTC ::= TEXTUAL-CONVENTION\n    DISPLAY-HINT \"255a\"\n    STATUS\
    \      current\n    DESCRIPTION\n        \"To facilitate internationalization,\
    \ this TC represents\n        information taken from the ISO/IEC IS 10646-1 character\
    \ set,\n        encoded as an octet string using the UTF-8 character encoding\n\
    \        scheme.\n        See section 3.6.1, entitled: 'Text generated by the\
    \ server or\n        device'.\"\n    SYNTAX      OCTET STRING (SIZE (0..63))\n"
- title: JmJobStringTC ::= TEXTUAL-CONVENTION
  contents:
  - "JmJobStringTC ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n\
    \        \"To facilitate internationalization, this TC represents\n        information\
    \ using any coded character set registered by IANA as\n        specified in section\
    \ 3.7.  While it is recommended that the\n        coded character set be UTF-8\
    \ [UTF-8], the actual coded\n        character set SHALL be indicated by the value\
    \ of the\n        jobCodedCharSet(8) attribute for the job.\n        See section\
    \ 3.6.2, entitled: 'Text supplied by the job\n        submitter'.\"\n    SYNTAX\
    \      OCTET STRING (SIZE (0..63))\n"
- title: JmNaturalLanguageTagTC  ::= TEXTUAL-CONVENTION
  contents:
  - "JmNaturalLanguageTagTC  ::= TEXTUAL-CONVENTION\n    STATUS      current\n   \
    \ DESCRIPTION\n        \"An IETF RFC 1766-compliant 'language tag', with zero\
    \ or more\n        sub-tags that identify a natural language.  While RFC 1766\n\
    \        specifies that the US-ASCII values are case-insensitive, this\n     \
    \   MIB specification requires that all characters SHALL be lower\n        case\
    \ in order to simplify comparing by management applications.\n        See section\
    \ 3.6.1, entitled: 'Text generated by the server or\n        device' and section\
    \ 3.6.2, entitled: 'Text supplied by the job\n        submitter'.\"\n    SYNTAX\
    \      OCTET STRING (SIZE (0..63))\n"
- title: JmTimeStampTC ::= TEXTUAL-CONVENTION
  contents:
  - "JmTimeStampTC ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n\
    \        \"The simple time at which an event took place.  The units are\n    \
    \    in seconds since the system was booted.\n        NOTE - JmTimeStampTC is\
    \ defined in units of seconds, rather\n        than 100ths of seconds, so as to\
    \ be simpler for agents to\n        implement (even if they have to implement\
    \ the 100ths of a\n        second to comply with implementing sysUpTime in MIB-II[mib-\n\
    \        II].)\n        NOTE - JmTimeStampTC is defined as an Integer32 so that\
    \ it can\n        be used as a value of an attribute, i.e., as a value of the\n\
    \        jmAttributeValueAsInteger object.  The TimeStamp textual-\n        convention\
    \ defined in SNMPv2-TC [SMIv2-TC] is defined as an\n        APPLICATION 3 IMPLICIT\
    \ INTEGER tag, not an Integer32 which is\n        defined in SNMPv2-SMI [SMIv2-TC]\
    \ as UNIVERSAL 2 IMPLICIT\n        INTEGER, so cannot be used in this MIB as one\
    \ of the values of\n        jmAttributeValueAsInteger.\"\n    SYNTAX      INTEGER\
    \ (0..2147483647)\n"
- title: JmJobSourcePlatformTypeTC ::= TEXTUAL-CONVENTION
  contents:
  - "JmJobSourcePlatformTypeTC ::= TEXTUAL-CONVENTION\n    STATUS      current\n \
    \   DESCRIPTION\n        \"The source platform type that can submit jobs to servers\
    \ or\n        devices in any of the 3 configurations.\n        This is a type\
    \ 2 enumeration.  See Section 3.7.1.2.  See also\n        IANA operating-system-names\
    \ registry.\"\n    SYNTAX      INTEGER {\n        other(1),\n        unknown(2),\n\
    \        sptUNIX(3),           -- UNIX\n        sptOS2(4),            -- OS/2\n\
    \        sptPCDOS(5),          -- DOS\n        sptNT(6),             -- NT\n \
    \       sptMVS(7),            -- MVS\n        sptVM(8),             -- VM\n  \
    \      sptOS400(9),          -- OS/400\n        sptVMS(10),           -- VMS\n\
    \        sptWindows(11),       -- Windows\n        sptNetWare(12)        -- NetWare\n\
    \    }\n"
- title: JmFinishingTC ::= TEXTUAL-CONVENTION
  contents:
  - "JmFinishingTC ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n\
    \        \"The type of finishing operation.\n        These values are the same\
    \ as the enum values of the IPP\n        'finishings' attribute.  See Section\
    \ 3.7.1.2.\n        other(1),\n            Some other finishing operation besides\
    \ one of the specified\n            or registered values.\n        unknown(2),\n\
    \            The finishing is unknown.\n        none(3),\n            Perform\
    \ no finishing.\n        staple(4),\n            Bind the document(s) with one\
    \ or more staples. The exact\n            number and placement of the staples\
    \ is site-defined.\n        punch(5),\n            Holes are required in the finished\
    \ document. The exact\n            number and placement of the holes is site-defined.\
    \  The\n            punch specification MAY be satisfied (in a site- and\n   \
    \         implementation-specific manner) either by\n            drilling/punching,\
    \ or by substituting pre-drilled media.\n        cover(6),\n            Select\
    \ a non-printed (or pre-printed) cover for the\n            document. This does\
    \ not supplant the specification of a\n            printed cover (on cover stock\
    \ medium) by the document\n            itself.\n        bind(7)\n            Binding\
    \ is to be applied to the document; the type and\n            placement of the\
    \ binding is product-specific.\n        This is a type 2 enumeration.  See Section\
    \ 3.7.1.2.\"\n    SYNTAX      INTEGER {\n        other(1),\n        unknown(2),\n\
    \        none(3),\n        staple(4),\n        punch(5),\n        cover(6),\n\
    \        bind(7)\n    }\n"
- title: JmPrintQualityTC ::= TEXTUAL-CONVENTION
  contents:
  - "JmPrintQualityTC ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Print quality settings.\n        These values are the same as the enum\
    \ values of the IPP 'print-\n        quality' attribute.  See Section 3.7.1.2.\n\
    \        This is a type 2 enumeration.  See Section 3.7.1.2.\"\n    SYNTAX   \
    \   INTEGER {\n        other(1),    -- Not one of the specified or registered\n\
    \                     -- values.\n        unknown(2),  -- The actual value is\
    \ unknown.\n        draft(3),    -- Lowest quality available on the printer.\n\
    \        normal(4),   -- Normal or intermediate quality on the\n             \
    \        -- printer.\n        high(5)      -- Highest quality available on the\
    \ printer.\n    }\n"
- title: JmPrinterResolutionTC ::= TEXTUAL-CONVENTION
  contents:
  - "JmPrinterResolutionTC ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Printer resolutions.\n        Nine octets consisting of two 4-octet\
    \ SIGNED-INTEGERs followed\n        by a SIGNED-BYTE.  The values are the same\
    \ as those specified\n        in the Printer MIB [printmib]. The first SIGNED-INTEGER\n\
    \        contains the value of prtMarkerAddressabilityXFeedDir.  The\n       \
    \ second SIGNED-INTEGER contains the value of\n        prtMarkerAddressabilityFeedDir.\
    \  The SIGNED-BYTE contains the\n        value of prtMarkerAddressabilityUnit.\n\
    \        Note: the latter value is either 3 (tenThousandsOfInches) or 4\n    \
    \    (micrometers) and the addressability is in 10,000 units of\n        measure.\
    \ Thus the SIGNED-INTEGERs represent integral values in\n        either dots-per-inch\
    \ or dots-per-centimeter.\n        The syntax is the same as the IPP 'printer-resolution'\n\
    \        attribute.  See Section 3.7.1.2.\"\n    SYNTAX      OCTET STRING (SIZE(9))\n"
- title: JmTonerEconomyTC ::= TEXTUAL-CONVENTION
  contents:
  - "JmTonerEconomyTC ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Toner economy settings.\n        This is a type 2 enumeration.  See\
    \ Section 3.7.1.2.\"\n    SYNTAX      INTEGER {\n        unknown(2),    -- unknown.\n\
    \        off(3),        -- Off.  Normal.  Use full toner.\n        on(4)     \
    \     -- On.  Use less toner than normal.\n    }\n"
- title: JmBooleanTC ::= TEXTUAL-CONVENTION
  contents:
  - "JmBooleanTC ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Boolean true or false value.\n        This is a type 2 enumeration.\
    \  See Section 3.7.1.2.\"\n    SYNTAX      INTEGER {\n        unknown(2),    --\
    \ unknown.\n        false(3),      -- FALSE.\n        true(4)        -- TRUE.\n\
    \    }\n"
- title: JmMediumTypeTC ::= TEXTUAL-CONVENTION
  contents:
  - "JmMediumTypeTC ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Identifies the type of medium.\n        other(1),\n            The\
    \ type is neither one of the values listed in this\n            specification\
    \ nor a registered value.\n        unknown(2),\n            The type is not known.\n\
    \        stationery(3),\n            Separately cut sheets of an opaque material.\n\
    \        transparency(4),\n            Separately cut sheets of a transparent\
    \ material.\n        envelope(5),\n            Envelopes that can be used for\
    \ conventional mailing\n            purposes.\n        envelopePlain(6),\n   \
    \         Envelopes that are not preprinted and have no windows.\n        envelopeWindow(7),\n\
    \            Envelopes that have windows for addressing purposes.\n        continuousLong(8),\n\
    \            Continuously connected sheets of an opaque material\n           \
    \ connected along the long edge.\n        continuousShort(9),\n            Continuously\
    \ connected sheets of an opaque material\n            connected along the short\
    \ edge.\n        tabStock(10),\n            Media with tabs.\n        multiPartForm(11),\n\
    \            Form medium composed of multiple layers not pre-attached to\n   \
    \         one another;  each sheet MAY be drawn separately from an\n         \
    \   input source.\n        labels(12),\n            Label-stock.\n        multiLayer(13)\n\
    \            Form medium composed of multiple layers which are pre-\n        \
    \    attached to one another, e.g. for use with impact printers.\n        This\
    \ is a type 2 enumeration.  See Section 3.7.1.2.  These enum\n        values correspond\
    \ to the keyword name strings of the\n        prtInputMediaType object in the\
    \ Printer MIB [print-mib].  There\n        is no printer description attribute\
    \ in IPP/1.0 that represents\n        these values.\"\n    SYNTAX      INTEGER\
    \ {\n        other(1),\n        unknown(2),\n        stationery(3),\n        transparency(4),\n\
    \        envelope(5),\n        envelopePlain(6),\n        envelopeWindow(7),\n\
    \        continuousLong(8),\n        continuousShort(9),\n        tabStock(10),\n\
    \        multiPartForm(11),\n        labels(12),\n        multiLayer(13)\n   \
    \ }\n"
- title: JmJobCollationTypeTC ::= TEXTUAL-CONVENTION
  contents:
  - "JmJobCollationTypeTC ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n\
    \        \"This value is the type of job collation.  Implementations that\n  \
    \      don't support multiple documents or don't support multiple\n        copies\
    \ SHALL NOT support the uncollatedDocuments(5) value.\n        This is a type\
    \ 2 enumeration.  See Section 3.7.1.2. See also\n        Section 3.4, entitled\
    \ 'Monitoring Job Progress'.\"\n    SYNTAX      INTEGER {\n        other(1),\n\
    \        unknown(2),\n        uncollatedSheets(3),    -- sheets within each document\
    \ copy\n                                -- are not collated: 1 1 ..., 2 2 ...,\n\
    \                                -- No corresponding value of IPP\n          \
    \                      -- \"multiple-document-handling\"\n        collatedDocuments(4),\
    \   -- internal collated sheets,\n                                -- documents:\
    \ A, B, A, B, ...\n                                -- Corresponds to IPP \"multiple-\n\
    \                                -- document-handling\"='separate-\n         \
    \                       -- documents-collated-copies'\n        uncollatedDocuments(5)\
    \  -- internal collated sheets,\n                                -- documents:\
    \ A, A, ..., B, B, ...\n                                -- Corresponds to IPP\
    \ \"multiple-\n                                -- document-handling\"='separate-\n\
    \                                -- documents-uncollated-copies'\n    }\n"
- title: JmJobSubmissionIDTypeTC ::= TEXTUAL-CONVENTION
  contents:
  - "JmJobSubmissionIDTypeTC ::= TEXTUAL-CONVENTION\n    STATUS      current\n   \
    \ DESCRIPTION\n        \"Identifies the format type of a job submission ID.\n\
    \        Each job submission ID is a fixed-length, 48-octet printable\n      \
    \  US-ASCII [US-ASCII] coded character string containing no\n        control characters,\
    \ consisting of the fields defined in section\n        3.5.1.\n        This is\
    \ like a type 2 enumeration.  See section 3.7.3.\"\n    SYNTAX    OCTET STRING(SIZE(1))\
    \ -- ASCII '0'-'9', 'A'-'Z', 'a'-'z'\n"
- title: JmJobStateTC ::= TEXTUAL-CONVENTION
  contents:
  - "JmJobStateTC ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n\
    \        \"The current state of the job (pending, processing, completed,\n   \
    \     etc.).  The following figure shows the normal job state\n        transitions:\n\
    \                                                    +----> canceled(7)\n    \
    \                                               /\n    +---> pending(3) ------->\
    \ processing(5) ------+------> completed(9)\n    |         ^                 \
    \     ^             \\\n"
- title: '--->+         |                      |              +----> aborted(8)'
  contents:
  - "--->+         |                      |              +----> aborted(8)\n    |\
    \         v                      v             /\n    +---> pendingHeld(4)  processingStopped(6)\
    \ ---+\n                Figure 4 - Normal Job State Transitions\n        Normally\
    \ a job progresses from left to right.  Other state\n        transitions are unlikely,\
    \ but are not forbidden.  Not shown are\n        the transitions to the canceled\
    \ state from the pending,\n        pendingHeld, and processingStopped states.\n\
    \        Jobs in the pending, processing, and processingStopped states\n     \
    \   are called 'active', while jobs in the pendingHeld, canceled,\n        aborted,\
    \ and completed states are called 'inactive'.  Jobs\n        reach one of the\
    \ three terminal states: completed, canceled, or\n        aborted, after the jobs\
    \ have completed all activity, and all\n        MIB objects and attributes have\
    \ reached their final values for\n        the job.\n        These values are the\
    \ same as the enum values of the IPP 'job-\n        state' job attribute.  See\
    \ Section 3.7.1.2.\n        unknown(2),\n            The job state is not known,\
    \ or its state is indeterminate.\n        pending(3),\n            The job is\
    \ a candidate to start processing, but is not yet\n            processing.\n \
    \       pendingHeld(4),\n            The job is not a candidate for processing\
    \ for any number of\n            reasons but will return to the pending state\
    \ as soon as the\n            reasons are no longer present.  The job's\n    \
    \        jmJobStateReasons1 object and/or jobStateReasonsN (N=2..4)\n        \
    \    attributes SHALL indicate why the job is no longer a\n            candidate\
    \ for processing.  The reasons are represented as\n            bits in the jmJobStateReasons1\
    \ object and/or\n            jobStateReasonsN (N=2..4) attributes.  See the\n\
    \            JmJobStateReasonsNTC (N=1..4) textual convention for the\n      \
    \      specification of each reason.\n        processing(5),\n            One\
    \ or more of:\n            1.  the job is using, or is attempting to use, one\
    \ or\n            more purely software processes that are analyzing,\n       \
    \     creating, or interpreting a PDL, etc.,\n            2.  the job is using,\
    \ or is attempting to use, one or\n            more hardware devices that are\
    \ interpreting a PDL,\n            making mark on a medium, and/or performing\
    \ finishing,\n            such as stapling, etc.,  OR\n            3. (configuration\
    \ 2) the server has made the job ready\n            for printing, but the output\
    \ device is not yet printing\n            it, either because the job hasn't reached\
    \ the output\n            device or because the job is queued in the output\n\
    \            device or some other spooler, awaiting the output\n            device\
    \ to print it.\n            When the job is in the processing state, the entire\
    \ job\n            state includes the detailed status represented in the\n   \
    \         device MIB indicated by the hrDeviceIndex value of the\n           \
    \ job's physicalDevice attribute, if the agent implements\n            such a\
    \ device MIB.\n            Implementations MAY, though they NEED NOT, include\n\
    \            additional values in the job's jmJobStateReasons1 object\n      \
    \      to indicate the progress of the job, such as adding the\n            jobPrinting\
    \ value to indicate when the device is actually\n            making marks on a\
    \ medium and/or the processingToStopPoint\n            value to indicate that\
    \ the server or device is in the\n            process of canceling or aborting\
    \ the job.\n        processingStopped(6),\n            The job has stopped while\
    \ processing for any number of\n            reasons and will return to the processing\
    \ state as soon\n            as the reasons are no longer present.\n         \
    \   The job's jmJobStateReasons1 object and/or the job's\n            jobStateReasonsN\
    \ (N=2..4) attributes MAY indicate why the\n            job has stopped processing.\
    \  For example, if the output\n            device is stopped, the deviceStopped\
    \ value MAY be\n            included in the job's jmJobStateReasons1 object.\n\
    \            NOTE - When an output device is stopped, the device\n           \
    \ usually indicates its condition in human readable form\n            at the device.\
    \  The management application can obtain\n             more complete device status\
    \ remotely by querying the\n            appropriate device MIB using the job's\
    \ deviceIndex\n            attribute(s), if the agent implements such a device\
    \ MIB\n        canceled(7),\n            A client has canceled the job and the\
    \ server or device\n            has completed canceling the job AND all MIB objects\
    \ and\n            attributes have reached their final values for the job.\n \
    \           While the server or device is canceling the job, the\n           \
    \ job's jmJobStateReasons1 object SHOULD contain the\n            processingToStopPoint\
    \ value and one of the\n            canceledByUser, canceledByOperator, or canceledAtDevice\n\
    \            values.  The canceledByUser, canceledByOperator, or\n           \
    \ canceledAtDevice values remain while the job is in the\n            canceled\
    \ state.\n        aborted(8),\n            The job has been aborted by the system,\
    \ usually while the\n            job was in the processing or processingStopped\
    \ state and\n            the server or device has completed aborting the job AND\n\
    \            all MIB objects and attributes have reached their final\n       \
    \     values for the job.  While the server or device is\n            aborting\
    \ the job, the job's jmJobStateReasons1 object MAY\n            contain the processingToStopPoint\
    \ and abortedBySystem\n            values.  If implemented, the abortedBySystem\
    \ value SHALL\n            remain while the job is in the aborted state.\n   \
    \     completed(9)\n            The job has completed successfully or with warnings\
    \ or\n            errors after processing and all of the media have been\n   \
    \         successfully stacked in the appropriate output bin(s) AND\n        \
    \    all MIB objects and attributes have reached their final\n            values\
    \ for the job.  The job's jmJobStateReasons1 object\n            SHOULD contain\
    \ one of: completedSuccessfully,\n            completedWithWarnings, or completedWithErrors\
    \ values.\n        This is a type 2 enumeration.  See Section 3.7.1.2.\"\n   \
    \ SYNTAX      INTEGER {\n        unknown(2),\n        pending(3),\n        pendingHeld(4),\n\
    \        processing(5),\n        processingStopped(6),\n        canceled(7),\n\
    \        aborted(8),\n        completed(9)\n    }\n"
- title: JmAttributeTypeTC ::= TEXTUAL-CONVENTION
  contents:
  - "JmAttributeTypeTC ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n\
    \        \"The type of the attribute which identifies the attribute.\n       \
    \ NOTE - The enum assignments are grouped logically with values\n        assigned\
    \ in groups of 20, so that additional values may be\n        registered in the\
    \ future and assigned a value that is part of\n        their logical grouping.\n\
    \        Values in the range 2**30 to 2**31-1 are reserved for private\n     \
    \   or experimental usage.  This range corresponds to the same\n        range\
    \ reserved in IPP.  Implementers are warned that use of\n        such values may\
    \ conflict with other implementations.\n        Implementers are encouraged to\
    \ request registration of enum\n        values following the procedures in Section\
    \ 3.7.1.\n        See Section 3.2 entitled 'The Attribute Mechanism' for a\n \
    \       description of this textual-convention and its use in the\n        jmAttributeTable.\
    \  See Section 3.3.8 for the specification of\n        each attribute.  The comment(s)\
    \ after each enum assignment\n        specifies the data type(s) of the attribute.\n\
    \        This is a type 2 enumeration.  See Section 3.7.1.2.\"\n    SYNTAX   \
    \   INTEGER {\n        other(1),                       -- Integer32 (-2..2147483647)\n\
    \                                        -- AND/OR\n                         \
    \               -- OCTET STRING(SIZE(0..63))\n        -- Job State attributes:\n\
    \        jobStateReasons2(3),            -- JmJobStateReasons2TC\n        jobStateReasons3(4),\
    \            -- JmJobStateReasons3TC\n        jobStateReasons4(5),           \
    \ -- JmJobStateReasons4TC\n        processingMessage(6),           -- JmUTF8StringTC\
    \ (SIZE(0..63))\n        processingMessageNaturalLangTag(7),\n               \
    \                         -- OCTET STRING(SIZE(0..63))\n        jobCodedCharSet(8),\
    \             -- CodedCharSet\n        jobNaturalLanguageTag(9),       -- OCTET\
    \ STRING(SIZE(0..63))\n        -- Job Identification attributes:\n        jobURI(20),\
    \                     -- OCTET STRING(SIZE(0..63))\n        jobAccountName(21),\
    \             -- OCTET STRING(SIZE(0..63))\n        serverAssignedJobName(22),\
    \      -- JmJobStringTC (SIZE(0..63))\n        jobName(23),                  \
    \  -- JmJobStringTC (SIZE(0..63))\n        jobServiceTypes(24),            --\
    \ JmJobServiceTypesTC\n        jobSourceChannelIndex(25),      -- Integer32 (0..2147483647)\n\
    \        jobSourcePlatformType(26),      -- JmJobSourcePlatformTypeTC\n      \
    \  submittingServerName(27),       -- JmJobStringTC (SIZE(0..63))\n        submittingApplicationName(28),\
    \  -- JmJobStringTC (SIZE(0..63))\n        jobOriginatingHost(29),         --\
    \ JmJobStringTC (SIZE(0..63))\n        deviceNameRequested(30),        -- JmJobStringTC\
    \ (SIZE(0..63))\n        queueNameRequested(31),         -- JmJobStringTC (SIZE(0..63))\n\
    \        physicalDevice(32),             -- hrDeviceIndex\n                  \
    \                      -- AND/OR\n                                        -- JmUTF8StringTC\
    \ (SIZE(0..63))\n        numberOfDocuments(33),          -- Integer32 (-2..2147483647)\n\
    \        fileName(34),                   -- JmJobStringTC (SIZE(0..63))\n    \
    \    documentName(35),               -- JmJobStringTC (SIZE(0..63))\n        jobComment(36),\
    \                 -- JmJobStringTC (SIZE(0..63))\n        documentFormatIndex(37),\
    \        -- Integer32 (0..2147483647)\n        documentFormat(38),           \
    \  -- PrtInterpreterLangFamilyTC\n                                        -- AND/OR\n\
    \                                        -- OCTET STRING(SIZE(0..63))\n      \
    \  -- Job Parameter attributes:\n        jobPriority(50),                -- Integer32\
    \ (-2..100)\n        jobProcessAfterDateAndTime(51), -- DateAndTime (SNMPv2-TC)\n\
    \        jobHold(52),                    -- JmBooleanTC\n        jobHoldUntil(53),\
    \               -- JmJobStringTC (SIZE(0..63))\n        outputBin(54),       \
    \           -- Integer32 (0..2147483647)\n                                   \
    \     -- AND/OR\n                                        -- JmJobStringTC (SIZE(0..63))\n\
    \        sides(55),                      -- Integer32 (-2..2)\n        finishing(56),\
    \                  -- JmFinishingTC\n        -- Image Quality attributes:\n  \
    \      printQualityRequested(70),      -- JmPrintQualityTC\n        printQualityUsed(71),\
    \           -- JmPrintQualityTC\n        printerResolutionRequested(72), -- JmPrinterResolutionTC\n\
    \        printerResolutionUsed(73),      -- JmPrinterResolutionTC\n        tonerEcomonyRequested(74),\
    \      -- JmTonerEconomyTC\n        tonerEcomonyUsed(75),           -- JmTonerEconomyTC\n\
    \        tonerDensityRequested(76),      -- Integer32 (-2..100)\n        tonerDensityUsed(77),\
    \           -- Integer32 (-2..100)\n        -- Job Progress attributes:\n    \
    \    jobCopiesRequested(90),         -- Integer32 (-2..2147483647)\n        jobCopiesCompleted(91),\
    \         -- Integer32 (-2..2147483647)\n        documentCopiesRequested(92),\
    \    -- Integer32 (-2..2147483647)\n        documentCopiesCompleted(93),    --\
    \ Integer32 (-2..2147483647)\n        jobKOctetsTransferred(94),      -- Integer32\
    \ (-2..2147483647)\n        sheetCompletedCopyNumber(95),   -- Integer32 (-2..2147483647)\n\
    \        sheetCompletedDocumentNumber(96),\n                                 \
    \       -- Integer32 (-2..2147483647)\n        jobCollationType(97),         \
    \  -- JmJobCollationTypeTC\n        -- Impression attributes:\n        impressionsSpooled(110),\
    \        -- Integer32 (-2..2147483647)\n        impressionsSentToDevice(111),\
    \   -- Integer32 (-2..2147483647)\n        impressionsInterpreted(112),    --\
    \ Integer32 (-2..2147483647)\n        impressionsCompletedCurrentCopy(113),\n\
    \                                        -- Integer32 (-2..2147483647)\n     \
    \   fullColorImpressionsCompleted(114),\n                                    \
    \    -- Integer32 (-2..2147483647)\n        highlightColorImpressionsCompleted(115),\n\
    \                                        -- Integer32 (-2..2147483647)\n     \
    \   -- Page attributes:\n        pagesRequested(130),            -- Integer32\
    \ (-2..2147483647)\n        pagesCompleted(131),            -- Integer32 (-2..2147483647)\n\
    \        pagesCompletedCurrentCopy(132), -- Integer32 (-2..2147483647)\n     \
    \   -- Sheet attributes:\n        sheetsRequested(150),           -- Integer32\
    \ (-2..2147483647)\n        sheetsCompleted(151),           -- Integer32 (-2..2147483647)\n\
    \        sheetsCompletedCurrentCopy(152),-- Integer32 (-2..2147483647)\n     \
    \   -- Resource attributes:\n        mediumRequested(170),           -- JmMediumTypeTC\n\
    \                                        -- AND/OR\n                         \
    \               -- JmJobStringTC (SIZE(0..63))\n        mediumConsumed(171), \
    \           -- Integer32 (-2..2147483647)\n                                  \
    \      -- AND\n                                        -- JmJobStringTC (SIZE(0..63))\n\
    \        colorantRequested(172),         -- Integer32 (-2..2147483647)\n     \
    \                                   -- AND/OR\n                              \
    \          -- JmJobStringTC (SIZE(0..63))\n        colorantConsumed(173),    \
    \      -- Integer32 (-2..2147483647)\n                                       \
    \ -- AND/OR\n                                        -- JmJobStringTC (SIZE(0..63))\n\
    \        mediumTypeConsumed(174),        -- Integer32 (-2..2147483647)\n     \
    \                                   -- AND\n                                 \
    \       -- JmJobStringTC (SIZE(0..63))\n        mediumSizeConsumed(175),     \
    \   -- Integer32 (-2..2147483647)\n                                        --\
    \ AND\n                                        -- JmJobStringTC (SIZE(0..63))\n\
    \        -- Time attributes:\n        jobSubmissionToServerTime(190), -- JmTimeStampTC\n\
    \                                        -- AND/OR\n                         \
    \               -- DateAndTime\n        jobSubmissionTime(191),         -- JmTimeStampTC\n\
    \                                        -- AND/OR\n                         \
    \               -- DateAndTime\n        jobStartedBeingHeldTime(192),   -- JmTimeStampTC\n\
    \                                        -- AND/OR\n                         \
    \               -- DateAndTime\n        jobStartedProcessingTime(193),  -- JmTimeStampTC\n\
    \                                        -- AND/OR\n                         \
    \               -- DateAndTime\n        jobCompletionTime(194),         -- JmTimeStampTC\n\
    \                                        -- AND/OR\n                         \
    \               -- DateAndTime\n        jobProcessingCPUTime(195)       -- Integer32\
    \ (-2..2147483647)\n    }\n"
- title: JmJobServiceTypesTC ::= TEXTUAL-CONVENTION
  contents:
  - "JmJobServiceTypesTC ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n\
    \        \"Specifies the type(s) of service to which the job has been\n      \
    \  submitted (print, fax, scan, etc.).  The service type is\n        represented\
    \ as an enum that is bit encoded with each job\n        service type so that more\
    \ general and arbitrary services can be\n        created, such as services with\
    \ more than one destination type,\n        or ones with only a source or only\
    \ a destination.  For example,\n        a job service might scan, faxOut, and\
    \ print a single job.  In\n        this case, three bits would be set in the jobServiceTypes\n\
    \        attribute, corresponding to the hexadecimal values: 0x8 + 0x20\n    \
    \    + 0x4, respectively, yielding: 0x2C.\n        Whether this attribute is set\
    \ from a job attribute supplied by\n        the job submission client or is set\
    \ by the recipient job\n        submission server or device depends on the job\
    \ submission\n        protocol.  With either implementation, the agent SHALL return\
    \ a\n        non-zero value for this attribute indicating the type of the\n  \
    \      job.\n        One of the purposes of this attribute is to permit a requester\n\
    \        to filter out jobs that are not of interest.  For example, a\n      \
    \  printer operator MAY only be interested in jobs that include\n        printing.\
    \  That is why the attribute is in the job\n        identification category.\n\
    \        The following service component types are defined (in\n        hexadecimal)\
    \ and are assigned a separate bit value for use with\n        the jobServiceTypes\
    \ attribute:\n        other                             0x1\n            The job\
    \ contains some instructions that are not one of the\n            identified types.\n\
    \        unknown                           0x2\n            The job contains some\
    \ instructions whose type is unknown to\n            the agent.\n        print\
    \                             0x4\n            The job contains some instructions\
    \ that specify printing\n        scan                              0x8\n     \
    \       The job contains some instructions that specify scanning\n        faxIn\
    \                             0x10\n            The job contains some instructions\
    \ that specify receive fax\n        faxOut                            0x20\n \
    \           The job contains some instructions that specify sending fax\n    \
    \    getFile                           0x40\n            The job contains some\
    \ instructions that specify accessing\n            files or documents\n      \
    \  putFile                           0x80\n            The job contains some instructions\
    \ that specify storing\n            files or documents\n        mailList     \
    \                     0x100\n            The job contains some instructions that\
    \ specify\n            distribution of documents using an electronic mail system.\n\
    \        These bit definitions are the equivalent of a type 2 enum\n        except\
    \ that combinations of them MAY be used together.  See\n        section 3.7.1.2.\"\
    \n    SYNTAX      INTEGER (0..2147483647)   -- 31 bits, all but sign bit\n"
- title: JmJobStateReasons1TC ::= TEXTUAL-CONVENTION
  contents:
  - "JmJobStateReasons1TC ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n\
    \        \"The JmJobStateReasonsNTC (N=1..4) textual-conventions are used\n  \
    \      with the jmJobStateReasons1 object and jobStateReasonsN\n        (N=2..4),\
    \ respectively, to provide additional information\n        regarding the current\
    \ jmJobState object value.  These values\n        MAY be used with any job state\
    \ or states for which the reason\n        makes sense.  See section 3.3.9.1 for\
    \ the specification of each\n        bit value defined for use with the JmJobStateReasons1TC.\n\
    \        These bit definitions are the equivalent of a type 2 enum\n        except\
    \ that combinations of bits may be used together.  See\n        section 3.7.1.2.\"\
    \n    SYNTAX      INTEGER (0..2147483647)   -- 31 bits, all but sign bit\n"
- title: JmJobStateReasons2TC ::= TEXTUAL-CONVENTION
  contents:
  - "JmJobStateReasons2TC ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n\
    \        \"This textual-convention is used with the jobStateReasons2\n       \
    \ attribute to provides additional information regarding the\n        jmJobState\
    \ object.  See section 3.3.9.2 for the specification\n        of JmJobStateReasons2TC.\
    \  See section 3.3.9.1 for the\n        description under JmJobStateReasons1TC\
    \ for additional\n        information that applies to all reasons.\n        These\
    \ bit definitions are the equivalent of a type 2 enum\n        except that combinations\
    \ of them may be used together.  See\n        section 3.7.1.2.\"\n    SYNTAX \
    \     INTEGER (0..2147483647)   -- 31 bits, all but sign bit\n"
- title: JmJobStateReasons3TC ::= TEXTUAL-CONVENTION
  contents:
  - "JmJobStateReasons3TC ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n\
    \        \"This textual-convention is used with the jobStateReasons3\n       \
    \ attribute to provides additional information regarding the\n        jmJobState\
    \ object.  See section 3.3.9.3 for the specification\n        of JmJobStateReasons3TC.\
    \  See section 3.3.9.1 for the\n        description under JmJobStateReasons1TC\
    \ for additional\n        information that applies to all reasons.\n        These\
    \ bit definitions are the equivalent of a type 2 enum\n        except that combinations\
    \ of them may be used together.  See\n        section 3.7.1.2.  \"\n    SYNTAX\
    \      INTEGER (0..2147483647)   -- 31 bits, all but sign bit\n"
- title: JmJobStateReasons4TC ::= TEXTUAL-CONVENTION
  contents:
  - "JmJobStateReasons4TC ::= TEXTUAL-CONVENTION\n    STATUS      current\n    DESCRIPTION\n\
    \        \"This textual-convention is used in the jobStateReasons4\n        attribute\
    \ to provides additional information regarding the\n        jmJobState object.\
    \  See section 3.3.9.4 for the specification\n        of JmJobStateReasons4TC.\
    \  See section 3.3.9.1 for the\n        description under JmJobStateReasons1TC\
    \ for additional\n        information that applies to all reasons.\n        These\
    \ bit definitions are the equivalent of a type 2 enum\n        except that combinations\
    \ of them may be used together.  See\n        section 3.7.1.2.\"\n    SYNTAX \
    \     INTEGER (0..2147483647)   -- 31 bits, all but sign bit\n"
- title: jobmonMIBObjects  OBJECT IDENTIFIER  ::= { jobmonMIB 1 }
  contents:
  - 'jobmonMIBObjects  OBJECT IDENTIFIER  ::= { jobmonMIB 1 }

    '
- title: -- The General Group (MANDATORY)
  contents:
  - '-- The General Group (MANDATORY)

    '
- title: -- The jmGeneralGroup consists entirely of the jmGeneralTable.
  contents:
  - '-- The jmGeneralGroup consists entirely of the jmGeneralTable.

    '
- title: jmGeneral  OBJECT IDENTIFIER ::= { jobmonMIBObjects 1 }
  contents:
  - 'jmGeneral  OBJECT IDENTIFIER ::= { jobmonMIBObjects 1 }

    '
- title: jmGeneralTable  OBJECT-TYPE
  contents:
  - "jmGeneralTable  OBJECT-TYPE\n    SYNTAX      SEQUENCE OF JmGeneralEntry\n   \
    \ MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n     \
    \   \"The jmGeneralTable consists of information of a general nature\n       \
    \ that are per-job-set, but are not per-job.  See Section 2\n        entitled\
    \ 'Terminology and Job Model' for the definition of a\n        job set.\n    \
    \    The MANDATORY-GROUP macro specifies that this group is\n        MANDATORY.\"\
    \n    ::= { jmGeneral 1 }\n"
- title: jmGeneralEntry  OBJECT-TYPE
  contents:
  - "jmGeneralEntry  OBJECT-TYPE\n    SYNTAX      JmGeneralEntry\n    MAX-ACCESS \
    \ not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"Information\
    \ about a job set (queue).\n        An entry SHALL exist in this table for each\
    \ job set.\"\n    INDEX  { jmGeneralJobSetIndex }\n    ::= { jmGeneralTable 1\
    \ }\n"
- title: JmGeneralEntry ::= SEQUENCE {
  contents:
  - "JmGeneralEntry ::= SEQUENCE {\n    jmGeneralJobSetIndex                  Integer32\
    \ (1..32767),\n    jmGeneralNumberOfActiveJobs           Integer32 (0..2147483647),\n\
    \    jmGeneralOldestActiveJobIndex         Integer32 (0..2147483647),\n    jmGeneralNewestActiveJobIndex\
    \         Integer32 (0..2147483647),\n    jmGeneralJobPersistence            \
    \   Integer32 (15..2147483647),\n    jmGeneralAttributePersistence         Integer32\
    \ (15..2147483647),\n    jmGeneralJobSetName                   JmUTF8StringTC\
    \ (SIZE(0..63))\n"
- title: '}'
  contents:
  - '}

    '
- title: jmGeneralJobSetIndex OBJECT-TYPE
  contents:
  - "jmGeneralJobSetIndex OBJECT-TYPE\n    SYNTAX      Integer32 (1..32767)\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"A unique\
    \ value for each job set in this MIB.  The jmJobTable\n        and jmAttributeTable\
    \ tables have this same index as their\n        primary index.\n        The value(s)\
    \ of the jmGeneralJobSetIndex SHALL be persistent\n        across power cycles,\
    \ so that clients that have retained\n        jmGeneralJobSetIndex values will\
    \ access the same job sets upon\n        subsequent power-up.\n        An implementation\
    \ that has only one job set, such as a printer\n        with a single queue, SHALL\
    \ hard code this object with the value\n        1.\n        See Section 2 entitled\
    \ 'Terminology and Job Model' for the\n        definition of a job set.\n    \
    \    Corresponds to the first index in jmJobTable and\n        jmAttributeTable.\"\
    \n    ::= { jmGeneralEntry 1 }\n"
- title: jmGeneralNumberOfActiveJobs OBJECT-TYPE
  contents:
  - "jmGeneralNumberOfActiveJobs OBJECT-TYPE\n    SYNTAX      Integer32 (0..2147483647)\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"The current number of 'active' jobs in the jmJobIDTable,\n        jmJobTable,\
    \ and jmAttributeTable, i.e., the total number of\n        jobs that are in the\
    \ pending, processing, or processingStopped\n        states.  See the JmJobStateTC\
    \ textual-convention for the exact\n        specification of the semantics of\
    \ the job states.\"\n    DEFVAL      { 0 }      -- no jobs\n    ::= { jmGeneralEntry\
    \ 2 }\n"
- title: jmGeneralOldestActiveJobIndex  OBJECT-TYPE
  contents:
  - "jmGeneralOldestActiveJobIndex  OBJECT-TYPE\n    SYNTAX      Integer32 (0..2147483647)\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"The jmJobIndex of the oldest job that is still in one of the\n        'active'\
    \ states (pending, processing, or processingStopped).\n        In other words,\
    \ the index of the 'active' job that has been in\n        the job tables the longest.\n\
    \        If there are no active jobs, the agent SHALL set the value of\n     \
    \   this object to 0.\n        See Section 3.2 entitled 'The Job Tables and the\
    \ Oldest Active\n        and Newest Active Indexes' for a description of the usage\
    \ of\n        this object.\"\n    DEFVAL      { 0 }      -- no active jobs\n \
    \   ::= { jmGeneralEntry 3 }\n"
- title: jmGeneralNewestActiveJobIndex  OBJECT-TYPE
  contents:
  - "jmGeneralNewestActiveJobIndex  OBJECT-TYPE\n    SYNTAX      Integer32 (0..2147483647)\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"The jmJobIndex of the newest job that is in one of the\n        'active' states\
    \ (pending, processing, or processingStopped).\n        In other words, the index\
    \ of the 'active' job that has been\n        most recently added to the job tables.\n\
    \        When all jobs become 'inactive', i.e., enter the pendingHeld,\n     \
    \   completed, canceled, or aborted states, the agent SHALL set the\n        value\
    \ of this object to 0.\n        See Section 3.2 entitled 'The Job Tables and the\
    \ Oldest Active\n        and Newest Active Indexes' for a description of the usage\
    \ of\n        this object.\"\n    DEFVAL      { 0 }      -- no active jobs\n \
    \   ::= { jmGeneralEntry 4 }\n"
- title: jmGeneralJobPersistence OBJECT-TYPE
  contents:
  - "jmGeneralJobPersistence OBJECT-TYPE\n    SYNTAX      Integer32 (15..2147483647)\n\
    \    UNITS       \"seconds\"\n    MAX-ACCESS  read-only\n    STATUS      current\n\
    \    DESCRIPTION\n        \"The minimum time in seconds for this instance of the\
    \ Job Set\n        that an entry SHALL remain in the jmJobIDTable and jmJobTable\n\
    \        after processing has completed, i.e., the minimum time in\n        seconds\
    \ starting when the job enters the completed, canceled,\n        or aborted state.\n\
    \        Configuring this object is implementation-dependent.\n        This value\
    \ SHALL be equal to or greater than the value of\n        jmGeneralAttributePersistence.\
    \  This value SHOULD be at least\n        60 which gives a monitoring or accounting\
    \ application one\n        minute in which to poll for job data.\"\n    DEFVAL\
    \      { 60 }          -- one minute\n    ::= { jmGeneralEntry 5 }\n"
- title: jmGeneralAttributePersistence OBJECT-TYPE
  contents:
  - "jmGeneralAttributePersistence OBJECT-TYPE\n    SYNTAX      Integer32 (15..2147483647)\n\
    \    UNITS       \"seconds\"\n    MAX-ACCESS  read-only\n    STATUS      current\n\
    \    DESCRIPTION\n        \"The minimum time in seconds for this instance of the\
    \ Job Set\n        that an entry SHALL remain in the jmAttributeTable after\n\
    \        processing has completed , i.e., the time in seconds starting\n     \
    \   when the job enters the completed, canceled, or aborted state.\n        Configuring\
    \ this object is implementation-dependent.\n        This value SHOULD be at least\
    \ 60 which gives a monitoring or\n        accounting application one minute in\
    \ which to poll for job\n        data.\"\n    DEFVAL      { 60 }          -- one\
    \ minute\n    ::= { jmGeneralEntry 6 }\n"
- title: jmGeneralJobSetName OBJECT-TYPE
  contents:
  - "jmGeneralJobSetName OBJECT-TYPE\n    SYNTAX      JmUTF8StringTC (SIZE(0..63))\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"The human readable name of this job set assigned by the system\n        administrator\
    \ (by means outside of this MIB).  Typically, this\n        name SHOULD be the\
    \ name of the job queue.  If a server or\n        device has only a single job\
    \ set, this object can be the\n        administratively assigned name of the server\
    \ or device itself.\n        This name does not need to be unique, though each\
    \ job set in a\n        single Job Monitoring MIB SHOULD have distinct names.\n\
    \        NOTE - If the job set corresponds to a single printer and the\n     \
    \   Printer MIB is implemented, this value SHOULD be the same as\n        the\
    \ prtGeneralPrinterName object in the draft Printer MIB\n        [print-mib-draft].\
    \  If the job set corresponds to an IPP\n        Printer, this value SHOULD be\
    \ the same as the IPP 'printer-\n        name' Printer attribute.\n        NOTE\
    \ - The purpose of this object is to help the user of the\n        job monitoring\
    \ application distinguish between several job sets\n        in implementations\
    \ that support more than one job set.\n        See the OBJECT compliance macro\
    \ for the minimum maximum length\n        required for conformance.\"\n    DEFVAL\
    \      { ''H }      -- empty string\n    ::= { jmGeneralEntry 7 }\n"
- title: -- The Job ID Group (MANDATORY)
  contents:
  - '-- The Job ID Group (MANDATORY)

    '
- title: -- The jmJobIDGroup consists entirely of the jmJobIDTable.
  contents:
  - '-- The jmJobIDGroup consists entirely of the jmJobIDTable.

    '
- title: jmJobID  OBJECT IDENTIFIER ::= { jobmonMIBObjects 2 }
  contents:
  - 'jmJobID  OBJECT IDENTIFIER ::= { jobmonMIBObjects 2 }

    '
- title: jmJobIDTable  OBJECT-TYPE
  contents:
  - "jmJobIDTable  OBJECT-TYPE\n    SYNTAX      SEQUENCE OF JmJobIDEntry\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"The jmJobIDTable\
    \ provides a correspondence map (1) between the\n        job submission ID that\
    \ a client uses to refer to a job and (2)\n        the jmGeneralJobSetIndex and\
    \ jmJobIndex that the Job Monitoring\n        MIB agent assigned to the job and\
    \ that are used to access the\n        job in all of the other tables in the MIB.\
    \  If a monitoring\n        application already knows the jmGeneralJobSetIndex\
    \ and the\n        jmJobIndex of the job it is querying, that application NEED\
    \ NOT\n        use the jmJobIDTable.\n        The MANDATORY-GROUP macro specifies\
    \ that this group is\n        MANDATORY.\"\n    ::= { jmJobID 1 }\n"
- title: jmJobIDEntry  OBJECT-TYPE
  contents:
  - "jmJobIDEntry  OBJECT-TYPE\n    SYNTAX      JmJobIDEntry\n    MAX-ACCESS  not-accessible\n\
    \    STATUS      current\n    DESCRIPTION\n        \"The map from (1) the jmJobSubmissionID\
    \ to (2) the\n        jmGeneralJobSetIndex and jmJobIndex.\n        An entry SHALL\
    \ exist in this table for each job currently known\n        to the agent for all\
    \ job sets and job states.  There MAY be\n        more than one jmJobIDEntry that\
    \ maps to a single job.  This\n        many to one mapping can occur when more\
    \ than one network entity\n        along the job submission path supplies a job\
    \ submission ID.\n        See Section 3.5.  However, each job SHALL appear once\
    \ and in\n        one and only one job set.\"\n    INDEX  { jmJobSubmissionID\
    \ }\n    ::= { jmJobIDTable 1 }\n"
- title: JmJobIDEntry ::= SEQUENCE {
  contents:
  - "JmJobIDEntry ::= SEQUENCE {\n    jmJobSubmissionID                     OCTET\
    \ STRING(SIZE(48)),\n    jmJobIDJobSetIndex                    Integer32 (0..32767),\n\
    \    jmJobIDJobIndex                       Integer32 (0..2147483647)\n"
- title: '}'
  contents:
  - '}

    '
- title: jmJobSubmissionID OBJECT-TYPE
  contents:
  - "jmJobSubmissionID OBJECT-TYPE\n    SYNTAX      OCTET STRING(SIZE(48))\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"A quasi-unique\
    \ 48-octet fixed-length string ID which\n        identifies the job within a particular\
    \ client-server\n        environment.  There are multiple formats for the\n  \
    \      jmJobSubmissionID.  Each format SHALL be uniquely identified.\n       \
    \ See the JmJobSubmissionIDTypeTC textual convention.  Each\n        format SHALL\
    \ be registered using the procedures of a type 2\n        enum.  See section 3.7.3\
    \ entitled: 'PWG Registration of Job\n        Submission Id Formats'.\n      \
    \  If the requester (client or server) does not supply a job\n        submission\
    \ ID in the job submission protocol, then the\n        recipient (server or device)\
    \ SHALL assign a job submission ID\n        using any of the standard formats\
    \ that have been reserved for\n        agents and adding the final 8 octets to\
    \ distinguish the ID from\n        others submitted from the same requester.\n\
    \        The monitoring application, whether in the client or running\n      \
    \  separately, MAY use the job submission ID to help identify\n        which jmJobIndex\
    \ was assigned by the agent, i.e., in which row\n        the job information is\
    \ in the other tables.\n        NOTE - fixed-length is used so that a management\
    \ application\n        can use a shortened GetNext varbind (in SNMPv1 and SNMPv2)\
    \ in\n        order to get the next submission ID, disregarding the remainder\n\
    \        of the ID in order to access jobs independent of the trailing\n     \
    \   identifier part, e.g., to get all jobs submitted by a\n        particular\
    \ jmJobOwner or submitted from a particular MAC\n        address.\n        See\
    \ the JmJobSubmissionIDTypeTC textual convention.\n        See APPENDIX B - Support\
    \ of Job Submission Protocols.\"\n    ::= { jmJobIDEntry 1 }\n"
- title: jmJobIDJobSetIndex OBJECT-TYPE
  contents:
  - "jmJobIDJobSetIndex OBJECT-TYPE\n    SYNTAX      Integer32 (0..32767)\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n        \"This object\
    \ contains the value of the jmGeneralJobSetIndex for\n        the job with the\
    \ jmJobSubmissionID value, i.e., the job set\n        index of the job set in\
    \ which the job was placed when that\n        server or device accepted the job.\
    \  This 16-bit value in\n        combination with the jmJobIDJobIndex value permits\
    \ the\n        management application to access the other tables to obtain the\n\
    \        job-specific objects for this job.\n        See jmGeneralJobSetIndex\
    \ in the jmGeneralTable.\"\n    DEFVAL      { 0 }      -- 0 indicates no job set\
    \ index\n    ::= { jmJobIDEntry 2 }\n"
- title: jmJobIDJobIndex OBJECT-TYPE
  contents:
  - "jmJobIDJobIndex OBJECT-TYPE\n    SYNTAX      Integer32 (0..2147483647)\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n        \"This object\
    \ contains the value of the jmJobIndex for the job\n        with the jmJobSubmissionID\
    \ value, i.e., the job index for the\n        job when the server or device accepted\
    \ the job.  This value, in\n        combination with the jmJobIDJobSetIndex value,\
    \ permits the\n        management application to access the other tables to obtain\
    \ the\n        job-specific objects for this job.\n        See jmJobIndex in the\
    \ jmJobTable.\"\n    DEFVAL      { 0 }      -- 0 indicates no jmJobIndex value.\n\
    \    ::= { jmJobIDEntry 3 }\n"
- title: -- The Job Group (MANDATORY)
  contents:
  - '-- The Job Group (MANDATORY)

    '
- title: -- The jmJobGroup consists entirely of the jmJobTable.
  contents:
  - '-- The jmJobGroup consists entirely of the jmJobTable.

    '
- title: jmJob  OBJECT IDENTIFIER ::= { jobmonMIBObjects 3 }
  contents:
  - 'jmJob  OBJECT IDENTIFIER ::= { jobmonMIBObjects 3 }

    '
- title: jmJobTable  OBJECT-TYPE
  contents:
  - "jmJobTable  OBJECT-TYPE\n    SYNTAX      SEQUENCE OF JmJobEntry\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"The jmJobTable\
    \ consists of basic job state and status\n        information for each job in\
    \ a job set that (1) monitoring\n        applications need to be able to access\
    \ in a single SNMP Get\n        operation, (2) that have a single value per job,\
    \ and (3) that\n        SHALL always be implemented.\n        The MANDATORY-GROUP\
    \ macro specifies that this group is\n        MANDATORY.\"\n    ::= { jmJob 1\
    \ }\n"
- title: jmJobEntry  OBJECT-TYPE
  contents:
  - "jmJobEntry  OBJECT-TYPE\n    SYNTAX      JmJobEntry\n    MAX-ACCESS  not-accessible\n\
    \    STATUS      current\n    DESCRIPTION\n        \"Basic per-job state and status\
    \ information.\n        An entry SHALL exist in this table for each job, no matter\
    \ what\n        the state of the job is.  Each job SHALL appear in one and only\n\
    \        one job set.\n        See Section 3.2 entitled 'The Job Tables'.\"\n\
    \    INDEX  { jmGeneralJobSetIndex, jmJobIndex }\n    ::= { jmJobTable 1 }\n"
- title: JmJobEntry ::= SEQUENCE {
  contents:
  - "JmJobEntry ::= SEQUENCE {\n    jmJobIndex                            Integer32\
    \ (1..2147483647),\n    jmJobState                            JmJobStateTC,\n\
    \    jmJobStateReasons1                    JmJobStateReasons1TC,\n    jmNumberOfInterveningJobs\
    \             Integer32 (-2..2147483647),\n    jmJobKOctetsPerCopyRequested  \
    \        Integer32 (-2..2147483647),\n    jmJobKOctetsProcessed              \
    \   Integer32 (-2..2147483647),\n    jmJobImpressionsPerCopyRequested      Integer32\
    \ (-2..2147483647),\n    jmJobImpressionsCompleted             Integer32 (-2..2147483647),\n\
    \    jmJobOwner                            JmJobStringTC (SIZE(0..63))\n"
- title: '}'
  contents:
  - '}

    '
- title: jmJobIndex OBJECT-TYPE
  contents:
  - "jmJobIndex OBJECT-TYPE\n    SYNTAX      Integer32 (1..2147483647)\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"The sequential,\
    \ monatonically increasing identifier index for\n        the job generated by\
    \ the server or device when that server or\n        device accepted the job. \
    \ This index value permits the\n        management application to access the other\
    \ tables to obtain the\n        job-specific row entries.\n        See Section\
    \ 3.2 entitled 'The Job Tables and the Oldest Active\n        and Newest Active\
    \ Indexes'.\n        See Section 3.5 entitled 'Job Identification'.\n        See\
    \ also jmGeneralNewestActiveJobIndex for the largest value of\n        jmJobIndex.\n\
    \        See JmJobSubmissionIDTypeTC for a limit on the size of this\n       \
    \ index if the agent represents it as an 8-digit decimal number.\"\n    ::= {\
    \ jmJobEntry 1 }\n"
- title: jmJobState OBJECT-TYPE
  contents:
  - "jmJobState OBJECT-TYPE\n    SYNTAX      JmJobStateTC\n    MAX-ACCESS  read-only\n\
    \    STATUS      current\n    DESCRIPTION\n        \"The current state of the\
    \ job (pending, processing, completed,\n        etc.).  Agents SHALL implement\
    \ only those states which are\n        appropriate for the particular implementation.\
    \  However,\n        management applications SHALL be prepared to receive all\
    \ the\n        standard job states.\n        The final value for this object SHALL\
    \ be one of: completed,\n        canceled, or aborted.  The minimum length of\
    \ time that the\n        agent SHALL maintain MIB data for a job in the completed,\n\
    \        canceled, or aborted state before removing the job data from\n      \
    \  the jmJobIDTable and jmJobTable is specified by the value of\n        the jmGeneralJobPersistence\
    \ object.\"\n    DEFVAL      { unknown }      -- default is unknown\n    ::= {\
    \ jmJobEntry 2 }\n"
- title: jmJobStateReasons1 OBJECT-TYPE
  contents:
  - "jmJobStateReasons1 OBJECT-TYPE\n    SYNTAX      JmJobStateReasons1TC\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n        \"Additional information\
    \ about the job's current state, i.e.,\n        information that augments the\
    \ value of the job's jmJobState\n        object.\n        Implementation of any\
    \ reason values is OPTIONAL, but an agent\n        SHOULD return any reason information\
    \ available.  These values\n        MAY be used with any job state or states for\
    \ which the reason\n        makes sense.  Since the Job State Reasons will be\
    \ more dynamic\n        than the Job State, it is recommended that a job monitoring\n\
    \        application read this object every time jmJobState is read.\n       \
    \ When the agent cannot provide a reason for the current state of\n        the\
    \ job, the value of the jmJobStateReasons1 object and\n        jobStateReasonsN\
    \ attributes SHALL be 0.\n        The jobStateReasonsN (N=2..4) attributes provide\
    \ further\n        additional information about the job's current state.\"\n \
    \   DEFVAL      { 0 }      -- no reasons\n    ::= { jmJobEntry 3 }\n"
- title: jmNumberOfInterveningJobs OBJECT-TYPE
  contents:
  - "jmNumberOfInterveningJobs OBJECT-TYPE\n    SYNTAX      Integer32 (-2..2147483647)\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"The number of jobs that are expected to complete processing\n        before\
    \ this job has completed processing according to the\n        implementation's\
    \ queuing algorithm, if no other jobs were to be\n        submitted.  In other\
    \ words, this value is the job's queue\n        position.  The agent SHALL return\
    \ a value of 0 for this\n        attribute when the job is the next job to complete\
    \ processing\n        (or has completed processing).\"\n    DEFVAL      { 0 }\
    \      -- default is no intervening jobs.\n    ::= { jmJobEntry 4 }\n"
- title: jmJobKOctetsPerCopyRequested OBJECT-TYPE
  contents:
  - "jmJobKOctetsPerCopyRequested OBJECT-TYPE\n    SYNTAX      Integer32 (-2..2147483647)\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"The total size in K (1024) octets of the document(s) being\n        requested\
    \ to be processed in the job.  The agent SHALL round\n        the actual number\
    \ of octets up to the next highest K.  Thus 0\n        octets is represented as\
    \ '0', 1-1024 octets is represented as\n        '1', 1025-2048 is represented\
    \ as '2', etc.\n        In computing this value, the server/device SHALL NOT include\n\
    \        the multiplicative factors contributed by (1) the number of\n       \
    \ document copies, and (2) the number of job copies, independent\n        of whether\
    \ the device can process multiple copies of the job or\n        document without\
    \ making multiple passes over the job or\n        document data and independent\
    \ of whether the output is collated\n        or not.  Thus the server/device computation\
    \ is independent of\n        the implementation and indicates the size of the\
    \ document(s)\n        measured in K octets independent of the number of copies.\"\
    \n    DEFVAL      { -2 }      -- the default is unknown(-2)\n    ::= { jmJobEntry\
    \ 5 }\n"
- title: jmJobKOctetsProcessed OBJECT-TYPE
  contents:
  - "jmJobKOctetsProcessed OBJECT-TYPE\n    SYNTAX      Integer32 (-2..2147483647)\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"The total number of octets processed by the server or device\n        measured\
    \ in units of K (1024) octets so far.  The agent SHALL\n        round the actual\
    \ number of octets processed up to the next\n        higher K.  Thus 0 octets\
    \ is represented as '0', 1-1024 octets\n        is represented as '1', 1025-2048\
    \ octets is '2', etc.  For\n        printing devices, this value is the number\
    \ interpreted by the\n        page description language interpreter rather than\
    \ what has been\n        marked on media.\n        For implementations where multiple\
    \ copies are produced by the\n        interpreter with only a single pass over\
    \ the data, the final\n        value SHALL be equal to the value of the\n    \
    \    jmJobKOctetsPerCopyRequested object.  For implementations where\n       \
    \ multiple copies are produced by the interpreter by processing\n        the data\
    \ for each copy, the final value SHALL be a multiple of\n        the value of\
    \ the jmJobKOctetsPerCopyRequested object.\n        NOTE - See the impressionsCompletedCurrentCopy\
    \ and\n        pagesCompletedCurrentCopy attributes for attributes that are\n\
    \        reset on each document copy.\n        NOTE - The jmJobKOctetsProcessed\
    \ object can be used with the\n        jmJobKOctetsPerCopyRequested object to\
    \ provide an indication of\n        the relative progress of the job, provided\
    \ that the\n        multiplicative factor is taken into account for some\n   \
    \     implementations of multiple copies.\"\n    DEFVAL      { 0 }      -- default\
    \ is no octets processed.\n    ::= { jmJobEntry 6 }\n"
- title: jmJobImpressionsPerCopyRequested OBJECT-TYPE
  contents:
  - "jmJobImpressionsPerCopyRequested OBJECT-TYPE\n    SYNTAX      Integer32 (-2..2147483647)\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"The total size in number of impressions of the document(s)\n        submitted.\n\
    \        In computing this value, the server/device SHALL NOT include\n      \
    \  the multiplicative factors contributed by (1) the number of\n        document\
    \ copies, and (2) the number of job copies, independent\n        of whether the\
    \ device can process multiple copies of the job or\n        document without making\
    \ multiple passes over the job or\n        document data and independent of whether\
    \ the output is collated\n        or not.  Thus the server/device computation\
    \ is independent of\n        the implementation and reflects the size of the document(s)\n\
    \        measured in impressions independent of the number of copies.\n      \
    \  See the definition of the term 'impression' in Section 2.\"\n    DEFVAL   \
    \   { -2 }      -- default is unknown(-2)\n    ::= { jmJobEntry 7 }\n"
- title: jmJobImpressionsCompleted OBJECT-TYPE
  contents:
  - "jmJobImpressionsCompleted OBJECT-TYPE\n    SYNTAX      Integer32 (-2..2147483647)\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"The total number of impressions completed for this job so far.\n        For\
    \ printing devices, the impressions completed includes\n        interpreting,\
    \ marking, and stacking the output.  For other\n        types of job services,\
    \ the number of impressions completed\n        includes the number of impressions\
    \ processed.\n        NOTE - See the impressionsCompletedCurrentCopy and\n   \
    \     pagesCompletedCurrentCopy attributes for attributes that are\n        reset\
    \ on each document copy.\n        NOTE - The jmJobImpressionsCompleted object\
    \ can be used with\n        the jmJobImpressionsPerCopyRequested object to provide\
    \ an\n        indication of the relative progress of the job, provided that\n\
    \        the multiplicative factor is taken into account for some\n        implementations\
    \ of multiple copies.\n        See the definition of the term 'impression' in\
    \ Section 2 and\n        the counting example in Section 3.4 entitled 'Monitoring\
    \ Job\n        Progress'.\"\n    DEFVAL      { 0 }      -- default is no octets\n\
    \    ::= { jmJobEntry 8 }\n"
- title: jmJobOwner OBJECT-TYPE
  contents:
  - "jmJobOwner OBJECT-TYPE\n    SYNTAX      JmJobStringTC (SIZE(0..63))\n    MAX-ACCESS\
    \  read-only\n    STATUS      current\n    DESCRIPTION\n        \"The coded character\
    \ set name of the user that submitted the\n        job.  The method of assigning\
    \ this user name will be system\n        and/or site specific but the method MUST\
    \ ensure that the name\n        is unique to the network that is visible to the\
    \ client and\n        target device.\n        This value SHOULD be the most authenticated\
    \ name of the user\n        submitting the job.\n        See the OBJECT compliance\
    \ macro for the minimum maximum length\n        required for conformance.\"\n\
    \    DEFVAL      { ''H }      -- default is empty string\n    ::= { jmJobEntry\
    \ 9 }\n"
- title: -- The Attribute Group (MANDATORY)
  contents:
  - '-- The Attribute Group (MANDATORY)

    '
- title: -- The jmAttributeGroup consists entirely of the jmAttributeTable.
  contents:
  - '-- The jmAttributeGroup consists entirely of the jmAttributeTable.

    '
- title: --
  contents:
  - '--

    '
- title: -- Implementation of the objects in this group is MANDATORY.
  contents:
  - '-- Implementation of the objects in this group is MANDATORY.

    '
- title: -- See Section 3.1 entitled 'Conformance Considerations'.
  contents:
  - '-- See Section 3.1 entitled ''Conformance Considerations''.

    '
- title: -- An agent SHALL implement any attribute if (1) the server or device
  contents:
  - '-- An agent SHALL implement any attribute if (1) the server or device

    '
- title: -- supports the functionality represented by the attribute and (2) the
  contents:
  - '-- supports the functionality represented by the attribute and (2) the

    '
- title: -- information is available to the agent.
  contents:
  - '-- information is available to the agent.

    '
- title: jmAttribute  OBJECT IDENTIFIER ::= { jobmonMIBObjects 4 }
  contents:
  - 'jmAttribute  OBJECT IDENTIFIER ::= { jobmonMIBObjects 4 }

    '
- title: jmAttributeTable  OBJECT-TYPE
  contents:
  - "jmAttributeTable  OBJECT-TYPE\n    SYNTAX      SEQUENCE OF JmAttributeEntry\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"The jmAttributeTable SHALL contain attributes of the job and\n      \
    \  document(s) for each job in a job set.  Instead of allocating\n        distinct\
    \ objects for each attribute, each attribute is\n        represented as a separate\
    \ row in the jmAttributeTable.\n        The MANDATORY-GROUP macro specifies that\
    \ this group is\n        MANDATORY.  An agent SHALL implement any attribute if\
    \ (1) the\n        server or device supports the functionality represented by\
    \ the\n        attribute and (2) the information is available to the agent. \"\
    \n    ::= { jmAttribute 1 }\n"
- title: jmAttributeEntry  OBJECT-TYPE
  contents:
  - "jmAttributeEntry  OBJECT-TYPE\n    SYNTAX      JmAttributeEntry\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"Attributes\
    \ representing information about the job and\n        document(s) or resources\
    \ required and/or consumed.\n        Each entry in the jmAttributeTable is a per-job\
    \ entry with an\n        extra index for each type of attribute (jmAttributeTypeIndex)\n\
    \        that a job can have and an additional index\n        (jmAttributeInstanceIndex)\
    \ for those attributes that can have\n        multiple instances per job.  The\
    \ jmAttributeTypeIndex object\n        SHALL contain an enum type that indicates\
    \ the type of attribute\n        (see the JmAttributeTypeTC textual-convention).\
    \  The value of\n        the attribute SHALL be represented in either the\n  \
    \      jmAttributeValueAsInteger or jmAttributeValueAsOctets objects,\n      \
    \  and/or both, as specified in the JmAttributeTypeTC textual-\n        convention.\n\
    \        The agent SHALL create rows in the jmAttributeTable as the\n        server\
    \ or device is able to discover the attributes either from\n        the job submission\
    \ protocol itself or from the document PDL.\n        As the documents are interpreted,\
    \ the interpreter MAY discover\n        additional attributes and so the agent\
    \ adds additional rows to\n        this table.  As the attributes that represent\
    \ resources are\n        actually consumed, the usage counter contained in the\n\
    \        jmAttributeValueAsInteger object is incremented according to\n      \
    \  the units indicated in the description of the JmAttributeTypeTC\n        enum.\n\
    \        The agent SHALL maintain each row in the jmAttributeTable for\n     \
    \   at least the minimum time after a job completes as specified by\n        the\
    \ jmGeneralAttributePersistence object.\n        Zero or more entries SHALL exist\
    \ in this table for each job in\n        a job set.\n        See Section 3.3 entitled\
    \ 'The Attribute Mechanism' for a\n        description of the jmAttributeTable.\"\
    \n    INDEX  { jmGeneralJobSetIndex, jmJobIndex, jmAttributeTypeIndex,\n    jmAttributeInstanceIndex\
    \ }\n    ::= { jmAttributeTable 1 }\n"
- title: JmAttributeEntry ::= SEQUENCE {
  contents:
  - "JmAttributeEntry ::= SEQUENCE {\n    jmAttributeTypeIndex                  JmAttributeTypeTC,\n\
    \    jmAttributeInstanceIndex              Integer32 (1..32767),\n    jmAttributeValueAsInteger\
    \             Integer32 (-2..2147483647),\n    jmAttributeValueAsOctets      \
    \        OCTET STRING(SIZE(0..63))\n"
- title: '}'
  contents:
  - '}

    '
- title: jmAttributeTypeIndex OBJECT-TYPE
  contents:
  - "jmAttributeTypeIndex OBJECT-TYPE\n    SYNTAX      JmAttributeTypeTC\n    MAX-ACCESS\
    \  not-accessible\n    STATUS      current\n    DESCRIPTION\n        \"The type\
    \ of attribute that this row entry represents.\n        The type MAY identify\
    \ information about the job or document(s)\n        or MAY identify a resource\
    \ required to process the job before\n        the job start processing and/or\
    \ consumed by the job as the job\n        is processed.\n        Examples of job\
    \ attributes (i.e., apply to the job as a whole)\n        that have only one instance\
    \ per job include:\n        jobCopiesRequested(90), documentCopiesRequested(92),\n\
    \        jobCopiesCompleted(91), documentCopiesCompleted(93), while\n        examples\
    \ of job attributes that may have more than one instance\n        per job include:\
    \  documentFormatIndex(37), and\n        documentFormat(38).\n        Examples\
    \ of document attributes (one instance per document)\n        include: fileName(34),\
    \ and documentName(35).\n        Examples of required and consumed resource attributes\
    \ include:\n        pagesRequested(130), mediumRequested(170), pagesCompleted(131),\n\
    \        and mediumConsumed(171), respectively.\"\n    ::= { jmAttributeEntry\
    \ 1 }\n"
- title: jmAttributeInstanceIndex OBJECT-TYPE
  contents:
  - "jmAttributeInstanceIndex OBJECT-TYPE\n    SYNTAX      Integer32 (1..32767)\n\
    \    MAX-ACCESS  not-accessible\n    STATUS      current\n    DESCRIPTION\n  \
    \      \"A running 16-bit index of the attributes of the same type for\n     \
    \   each job.  For those attributes with only a single instance per\n        job,\
    \ this index value SHALL be 1.  For those attributes that\n        are a single\
    \ value per document, the index value SHALL be the\n        document number, starting\
    \ with 1 for the first document in the\n        job.  Jobs with only a single\
    \ document SHALL use the index\n        value of 1.  For those attributes that\
    \ can have multiple values\n        per job or per document, such as documentFormatIndex(37)\
    \ or\n        documentFormat(38), the index SHALL be a running index for the\n\
    \        job as a whole, starting at 1.\"\n    ::= { jmAttributeEntry 2 }\n"
- title: jmAttributeValueAsInteger OBJECT-TYPE
  contents:
  - "jmAttributeValueAsInteger OBJECT-TYPE\n    SYNTAX      Integer32 (-2..2147483647)\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"The integer value of the attribute.  The value of the\n        attribute SHALL\
    \ be represented as an integer if the enum\n        description in the JmAttributeTypeTC\
    \ textual-convention\n        definition has the tag: 'INTEGER:'.\n        Depending\
    \ on the enum definition, this object value MAY be an\n        integer, a counter,\
    \ an index, or an enum, depending on the\n        jmAttributeTypeIndex value.\
    \  The units of this value are\n        specified in the enum description.\n \
    \       For those attributes that are accumulating job consumption as\n      \
    \  the job is processed as specified in the JmAttributeTypeTC\n        textual-convention,\
    \ SHALL contain the final value after the job\n        completes processing, i.e.,\
    \ this value SHALL indicate the total\n        usage of this resource made by\
    \ the job.\n        A monitoring application is able to copy this value to a\n\
    \        suitable longer term storage for later processing as part of an\n   \
    \     accounting system.\n        Since the agent MAY add attributes representing\
    \ resources to\n        this table while the job is waiting to be processed or\
    \ being\n        processed, which can be a long time before any of the resources\n\
    \        are actually used, the agent SHALL set the value of the\n        jmAttributeValueAsInteger\
    \ object to 0 for resources that the\n        job has not yet consumed.\n    \
    \    Attributes for which the concept of an integer value is\n        meaningless,\
    \ such as fileName(34), jobName, and\n        processingMessage, do not have the\
    \ 'INTEGER:' tag in the\n        JmAttributeTypeTC definition and so an agent\
    \ SHALL always\n        return a value of '-1' to indicate 'other' for the value\
    \ of the\n        jmAttributeValueAsInteger object for these attributes.\n   \
    \     For attributes which do have the 'INTEGER:' tag in the\n        JmAttributeTypeTC\
    \ definition, if the integer value is not (yet)\n        known, the agent either\
    \ (1) SHALL not materialize the row in\n        the jmAttributeTable until the\
    \ value is known or (2) SHALL\n        return a '-2' to represent an 'unknown'\
    \ counting integer value,\n        a '0' to represent an 'unknown' index value,\
    \ and a '2' to\n        represent an 'unknown(2)' enum value.\"\n    DEFVAL  \
    \    { -2 }      -- default value is unknown(-2)\n    ::= { jmAttributeEntry 3\
    \ }\n"
- title: jmAttributeValueAsOctets OBJECT-TYPE
  contents:
  - "jmAttributeValueAsOctets OBJECT-TYPE\n    SYNTAX      OCTET STRING(SIZE(0..63))\n\
    \    MAX-ACCESS  read-only\n    STATUS      current\n    DESCRIPTION\n       \
    \ \"The octet string value of the attribute.  The value of the\n        attribute\
    \ SHALL be represented as an OCTET STRING if the enum\n        description in\
    \ the JmAttributeTypeTC textual-convention\n        definition has the tag: 'OCTETS:'.\n\
    \        Depending on the enum definition, this object value MAY be a\n      \
    \  coded character set string (text), such as 'JmUTF8StringTC', or\n        a\
    \ binary octet string, such as 'DateAndTime'.\n        Attributes for which the\
    \ concept of an octet string value is\n        meaningless, such as pagesCompleted,\
    \ do not have the tag\n        'OCTETS:' in the JmAttributeTypeTC definition and\
    \ so the agent\n        SHALL always return a zero length string for the value\
    \ of the\n        jmAttributeValueAsOctets object.\n        For attributes which\
    \ do have the 'OCTETS:' tag in the\n        JmAttributeTypeTC definition, if the\
    \ OCTET STRING value is not\n        (yet) known, the agent either SHALL NOT materialize\
    \ the row in\n        the jmAttributeTable until the value is known or SHALL return\
    \ a\n        zero-length string.\"\n    DEFVAL      { ''H }      -- empty string\n\
    \    ::= { jmAttributeEntry 4 }\n"
- title: -- Notifications and Trapping
  contents:
  - '-- Notifications and Trapping

    '
- title: -- Reserved for the future
  contents:
  - '-- Reserved for the future

    '
- title: jobmonMIBNotifications  OBJECT IDENTIFIER  ::= { jobmonMIB 2 }
  contents:
  - 'jobmonMIBNotifications  OBJECT IDENTIFIER  ::= { jobmonMIB 2 }

    '
- title: -- Conformance Information
  contents:
  - '-- Conformance Information

    '
- title: jmMIBConformance OBJECT IDENTIFIER ::= { jobmonMIB 3 }
  contents:
  - 'jmMIBConformance OBJECT IDENTIFIER ::= { jobmonMIB 3 }

    '
- title: -- compliance statements
  contents:
  - '-- compliance statements

    '
- title: jmMIBCompliance MODULE-COMPLIANCE
  contents:
  - "jmMIBCompliance MODULE-COMPLIANCE\n    STATUS  current\n    DESCRIPTION\n   \
    \     \"The compliance statement for agents that implement the\n        job monitoring\
    \ MIB.\"\n    MODULE -- this module\n    MANDATORY-GROUPS {\n        jmGeneralGroup,\
    \ jmJobIDGroup, jmJobGroup, jmAttributeGroup }\n    OBJECT   jmGeneralJobSetName\n\
    \    SYNTAX   JmUTF8StringTC (SIZE(0..8))\n    DESCRIPTION\n        \"Only 8 octets\
    \ maximum string length NEED be supported by the\n        agent.\"\n    OBJECT\
    \   jmJobOwner\n    SYNTAX   JmJobStringTC (SIZE(0..16))\n    DESCRIPTION\n  \
    \      \"Only 16 octets maximum string length NEED be supported by the\n     \
    \   agent.\"\n"
- title: -- There are no CONDITIONALLY MANDATORY or OPTIONAL groups.
  contents:
  - "-- There are no CONDITIONALLY MANDATORY or OPTIONAL groups.\n    ::= { jmMIBConformance\
    \ 1 }\n"
- title: jmMIBGroups      OBJECT IDENTIFIER ::= { jmMIBConformance 2 }
  contents:
  - 'jmMIBGroups      OBJECT IDENTIFIER ::= { jmMIBConformance 2 }

    '
- title: jmGeneralGroup OBJECT-GROUP
  contents:
  - "jmGeneralGroup OBJECT-GROUP\n    OBJECTS {\n        jmGeneralNumberOfActiveJobs,\
    \   jmGeneralOldestActiveJobIndex,\n        jmGeneralNewestActiveJobIndex, jmGeneralJobPersistence,\n\
    \        jmGeneralAttributePersistence, jmGeneralJobSetName}\n    STATUS  current\n\
    \    DESCRIPTION\n        \"The general group.\"\n    ::= { jmMIBGroups 1 }\n"
- title: jmJobIDGroup OBJECT-GROUP
  contents:
  - "jmJobIDGroup OBJECT-GROUP\n    OBJECTS {\n        jmJobIDJobSetIndex, jmJobIDJobIndex\
    \ }\n    STATUS  current\n    DESCRIPTION\n        \"The job ID group.\"\n   \
    \ ::= { jmMIBGroups 2 }\n"
- title: jmJobGroup OBJECT-GROUP
  contents:
  - "jmJobGroup OBJECT-GROUP\n    OBJECTS {\n        jmJobState, jmJobStateReasons1,\
    \ jmNumberOfInterveningJobs,\n        jmJobKOctetsPerCopyRequested, jmJobKOctetsProcessed,\n\
    \        jmJobImpressionsPerCopyRequested, jmJobImpressionsCompleted,\n      \
    \  jmJobOwner }\n    STATUS  current\n    DESCRIPTION\n        \"The job group.\"\
    \n    ::= { jmMIBGroups 3 }\n"
- title: jmAttributeGroup OBJECT-GROUP
  contents:
  - "jmAttributeGroup OBJECT-GROUP\n    OBJECTS {\n        jmAttributeValueAsInteger,\
    \ jmAttributeValueAsOctets }\n    STATUS  current\n    DESCRIPTION\n        \"\
    The attribute group.\"\n    ::= { jmMIBGroups 4 }\n"
- title: END
  contents:
  - 'END

    '
- title: 5  Appendix A - Implementing the Job Life Cycle
  contents:
  - "5  Appendix A - Implementing the Job Life Cycle\n   The job object has well-defined\
    \ states and client operations that\n   affect the transition between the job\
    \ states.  Internal server and\n   device actions also affect the transitions\
    \ of the job between the job\n   states.  These states and transitions are referred\
    \ to as the job's\n   life cycle.\n   Not all implementations of job submission\
    \ protocols have all of the\n   states of the job model specified here.  The job\
    \ model specified here\n   is intended to be a superset of most implementations.\
    \  It is the\n   purpose of the agent to map the particular implementation's job\
    \ life\n   cycle onto the one specified here.  The agent MAY omit any states not\n\
    \   implemented.  Only the processing and completed states are required\n   to\
    \ be implemented by an agent.  However, a conforming management\n   application\
    \ SHALL be prepared to accept any of the states in the job\n   life cycle specified\
    \ here, so that the management application can\n   interoperate with any conforming\
    \ agent.\n   The job states are intended to be user visible.  The agent SHALL\
    \ make\n   these states visible in the MIB, but only for the subset of job\n \
    \  states that the implementation has.  Some implementations MAY need to\n   have\
    \ sub-states of these user-visible states.  The jmJobStateReasons1\n   object\
    \ and the jobStateReasonsN (N=2..4) attributes can be used to\n   represent the\
    \ sub-states of the jobs.\n   Job states are intended to last a user-visible length\
    \ of time in most\n   implementations.  However, some jobs may pass through some\
    \ states in\n   zero time in some situations and/or in some implementations.\n\
    \   The job model does not specify how accounting and auditing is\n   implemented,\
    \ except to assume that accounting and auditing logs are\n   separate from the\
    \ job life cycle and last longer than job entries in\n   the MIB.  Jobs in the\
    \ completed, aborted, or canceled states are not\n   logs, since jobs in these\
    \ states are accessible via SNMP protocol\n   operations and SHALL be removed\
    \ from the Job Monitoring MIB tables\n   after a site-settable or implementation-defined\
    \ period of time.  An\n   accounting application MAY copy accounting information\
    \ incrementally\n   to an accounting log as a job processes, or MAY be copied\
    \ while the\n   job is in the canceled, aborted, or completed states, depending\
    \ on\n   implementation.  The same is true for auditing logs.\n   The jmJobState\
    \ object specifies the standard job states.  The normal\n   job state transitions\
    \ are shown in the state transition diagram\n   presented in Figure 4.\n"
- title: 6  APPENDIX B - Support of Job Submission Protocols
  contents:
  - "6  APPENDIX B - Support of Job Submission Protocols\n   A companion PWG document,\
    \ entitled \"Job Submission Protocol Mapping\n   Recommendations for the Job Monitoring\
    \ MIB\" [protomap] contains the\n   recommended usage of each of the objects and\
    \ attributes in this MIB\n   with a number of job submission protocols.  In particular,\
    \ which job\n   submission ID format should be used is indicated for each job\n\
    \   submission protocol.\n   Some job submission protocols have support for the\
    \ client to specify\n   a job submission ID.  A second approach is to enhance\
    \ the document\n   format to embed the job submission ID in the document data.\
    \  This\n   second approach is independent of the job submission protocol.  This\n\
    \   appendix lists some examples of these approaches.\n   Some PJL implementations\
    \ wrap a banner page as a PJL job around a job\n   submitted by a client.  If\
    \ this results in multiple job submission\n   IDs, the agent SHALL create multiple\
    \ jmJobIDEntry rows in the\n   jmJobIDTable that each point to the same job entry\
    \ in the job tables.\n   See the specification of the jmJobIDEntry.\n"
- title: 7  References
  contents:
  - "7  References\n   [BCP-11]           Bradner S. and R. Hovey, \"The Organizations\n\
    \                      Involved in the IETF Standards Process\", BCP 11,\n   \
    \                   RFC 2028, October 1996.\n   [GB2312]           GB 2312-1980,\
    \ \"Chinese People's Republic of China\n                      (PRC) mixed one\
    \ byte and two byte coded character\n                      set\"\n   [hr-mib]\
    \           Grillo, P. and S. Waldbusser, \"Host Resources\n                 \
    \     MIB\", RFC 1514, September 1993.\n   [iana]             Reynolds, J. and\
    \ J. Postel, \"Assigned Numbers\",\n                      STD 2, RFC 1700, October\
    \ 1994.\n   [IANA-charsets]    Coded Character Sets registered by IANA and\n \
    \                     assigned an enum value for use in the CodedCharSet\n   \
    \                   textual convention imported from the Printer MIB.\n      \
    \                See ftp://ftp.isi.edu/in-\n                      notes/iana/assignments/character-sets\n\
    \   [iana-media-types] IANA Registration of MIME media types (MIME\n         \
    \             content types/subtypes). See\n                      ftp://ftp.isi.edu/in-notes/iana/assignments/\n\
    \   [ipp-model]        deBry, R., Hastings, T., Herriot, R., Issaacson,\n    \
    \                  S. and P. Powell, \"The Internet Printing\n               \
    \       Protocol/1.0: Model and Semantics\", RFC 2566,\n                     \
    \ April 1999.\n   [ISO-639]          ISO 639:1988 (E/F) - Code for Representation\
    \ of\n                      names of languages - The International\n         \
    \             Organization for Standardization, 1st edition,\n               \
    \       1988.\n   [ISO-646]          ISO/IEC 646:1991, \"Information technology\
    \ -- ISO\n                      7-bit coded character set for information\n  \
    \                    interchange\", JTC1/SC2.\n   [ISO-2022]         ISO/IEC 2022:1994\
    \ - \"Information technology --\n                      Character code  structure\
    \ and extension\n                      techniques\", JTC1/SC2.\n   [ISO-3166]\
    \         ISO 3166:1988 (E/F) - Codes for representation of\n                \
    \      names of countries - The International\n                      Organization\
    \ for Standardization, 3rd edition,\n                      1988-08-15.\"\n   [ISO-8859-1]\
    \       ISO/IEC 8859-1:1987, \"Information technology --\n                   \
    \   8-bit single byte coded graphic character sets -\n                      Part\
    \ 1:  Latin alphabet No. 1, JTC1/SC2.\"\n   [ISO-10646]        ISO/IEC 10646-1:1993,\
    \ \"Information technology --\n                      Universal Multiple-Octet\
    \ Coded Character Set (UCS)\n                      - Part 1: Architecture and\
    \ Basic Multilingual\n                      Plane, JTC1/SC2.\n   [iso-dpa]   \
    \       ISO/IEC 10175-1:1996 \"Information technology --\n                   \
    \   Text and Office Systems -- Document Printing\n                      Application\
    \ (DPA) -- Part 1: Abstract service\n                      definition and procedures.\
    \  See\n                      ftp://ftp.pwg.org/pub/pwg/dpa/\n   [JIS X0208] \
    \       JIS X0208-1990, \"Japanese two byte coded character\n                \
    \      set.\"\n   [mib-II]           McCloghrie, K. and M. Rose, \"Management\n\
    \                      Information Base for Network Management of\n          \
    \            TCP/IP-based internets: MIB-II\", STD 17, RFC 1213,\n           \
    \           March 1991.\n   [print-mib]        Smith, R., Wright, F., Hastings,\
    \ T., Zilles, S.\n                      and J. Gyllenskog, \"Printer MIB\", RFC\
    \ 1759, March\n                      1995.\n   [print-mib-draft]  Turner, R.,\
    \ \"Printer MIB\", Work in Progress,\n   [protomap]         Bergman, R., \"Job\
    \ Submission Protocol Mapping\n                      Recommendations for the Job\
    \ Monitoring MIB\", RFC\n                      2708, November 1999.\n   [pwg]\
    \              The Printer Working Group is a printer industry\n             \
    \         consortium open to any individuals.  For more\n                    \
    \  information, access the PWG web page:\n                      http://www.pwg.org\n\
    \   [RFC1179]          McLaughlin, L., III, \"Line Printer Daemon\n          \
    \            Protocol\", RFC 1179, August 1990.\n   [RFC1738]          Berners-Lee,\
    \ T., Masinter, L. and M., McCahill,\n                      \"Uniform Resource\
    \ Locators (URL)\", RFC 1738,\n                      December 1994.\n   [RFC1766]\
    \          Avelstrand, H., \"Tags for the Identification of\n                \
    \      Languages\", RFC 1766, March 1995.\n   [RFC2026]          Bradner, S.,\
    \ \"The Internet Standards Process --\n                      Revision 3\", BCP\
    \ 9, RFC 2026, October 1996.\n   [RFC2119]          Bradner, S., \"Keywords for\
    \ use in RFCs to Indicate\n                      Requirement Levels\", BCP 14,\
    \ RFC 2119, March 1997.\n   [RFC2277]          Alvestrand, H., \"IETF Policy on\
    \ Character Sets and\n                      Languages\", BCP 18, RFC 2277, January\
    \ 1998.\n   [RFC2278]          Freed, N. and  J. Postel, \"IANA CharSet\n    \
    \                  Registration Procedures\", BCP 19, RFC 2278,\n            \
    \          January 1998.\n   [SMIv2-SMI]        McCloghrie, K., Perkins, D. and\
    \ J. Schoenwaelder,\n                      \"Structure of Management Information\
    \ Version 2\n                      (SMIv2)\", STD 58, RFC 2578, April 1999.\n\
    \   [SMIv2-TC]         McCloghrie, K., Perkins, D. and J. Schoenwaelder,\n   \
    \                   \"Textual Conventions for SMIv2\", STD 58, RFC 2579,\n   \
    \                   April 1999.\n   [tipsi]            IEEE 1284.1, Transport-independent\
    \ Printer System\n                      Interface (TIPSI).\n   [URI-spec]    \
    \     Berners-Lee, T., Fielding, R. and  L. Masinter,\n                      \"\
    Uniform Resource Identifiers (URI), Generic\n                      Syntax\", RFC\
    \ 2396, August 1998.\n   [US-ASCII]         Coded Character Set - 7-bit American\
    \ Standard Code\n                      for Information Interchange, ANSI X3.4-1986.\n\
    \   [UTF-8]            Yergeau, F., \"UTF-8, a transformation format of\n    \
    \                  ISO 10646\", RFC 2279, January 1998.\n"
- title: 8  Notices
  contents:
  - "8  Notices\n   The IETF takes no position regarding the validity or scope of\
    \ any\n   intellectual property or other rights that might be claimed to\n   pertain\
    \ to the implementation or use of the technology described in\n   this document\
    \ or the extent to which any license under such rights\n   might or might not\
    \ be available; neither does it represent that it\n   has made any effort to identify\
    \ any such rights.  Information on the\n   IETF's procedures with respect to rights\
    \ in standards-track and\n   standards-related documentation can be found in BCP-11\
    \ [BCP-11].\n   Copies of claims of rights made available for publication and\
    \ any\n   assurances of licenses to be made available, or the result of an\n \
    \  attempt made to obtain a general license or permission for the use of\n   such\
    \ proprietary rights by implementers or users of this\n   specification can be\
    \ obtained from the IETF Secretariat.\n   The IETF invites any interested party\
    \ to bring to its attention any\n   copyrights, patents or patent applications,\
    \ or other proprietary\n   rights which may cover technology that may be required\
    \ to practice\n   this standard.  Please address the information to the IETF Executive\n\
    \   Director.\n"
- title: 9  Authors' Addresses
  contents:
  - "9  Authors' Addresses\n   Ron Bergman\n   Dataproducts Corp.\n   1757 Tapo Canyon\
    \ Road\n   Simi Valley, CA 93063-3394\n   Phone: 805-578-4421\n   Fax:  805-578-4001\n\
    \   EMail: rbergma@dpc.com\n   Tom Hastings\n   Xerox Corporation, ESAE-231\n\
    \   737 Hawaii St.\n   El Segundo, CA   90245\n   Phone: 310-333-6413\n   Fax:\
    \   310-333-5514\n   EMail: hastings@cp10.es.xerox.com\n   Scott A. Isaacson\n\
    \   Novell, Inc.\n   122 E 1700 S\n   Provo, UT   84606\n   Phone: 801-861-7366\n\
    \   Fax:   801-861-4025\n   EMail: scott_isaacson@novell.com\n   Harry Lewis\n\
    \   IBM Corporation\n   6300 Diagonal Hwy\n   Boulder, CO 80301\n   Phone: (303)\
    \ 924-5337\n   EMail: harryl@us.ibm.com\n   Send questions and comments to the\
    \ Printer Working Group (PWG)\n   using the Job Monitoring Project (JMP) Mailing\
    \ List:  jmp@pwg.org\n   To learn how to subscribe, send email to:  jmp-request@pwg.org\n\
    \   Implementers of this specification are encouraged to join the jmp\n   mailing\
    \ list in order to participate in discussions on any\n   clarifications needed\
    \ and registration proposals for additional\n   attributes and values being reviewed\
    \ in order to achieve consensus.\n   For further information, access the PWG web\
    \ page under \"JMP\":\n       http://www.pwg.org/\n   Other Participants:\n  \
    \     Chuck Adams - Tektronix\n       Jeff Barnett - IBM\n       Keith Carter,\
    \ IBM Corporation\n       Jeff Copeland - QMS\n       Andy Davidson - Tektronix\n\
    \       Roger deBry - IBM\n       Mabry Dozier - QMS\n       Lee Farrell - Canon\n\
    \       Steve Gebert - IBM\n       Robert Herriot - Sun Microsystems Inc.\n  \
    \     Shige Kanemitsu - Kyocera\n       David Kellerman - Northlake Software\n\
    \       Rick Landau - Digital\n       Pete Loya - HP\n       Ray Lutz - Cognisys\n\
    \       Jay Martin - Underscore\n       Mike MacKay, Novell, Inc.\n       Stan\
    \ McConnell - Xerox\n       Carl-Uno Manros, Xerox, Corp.\n       Pat Nogay -\
    \ IBM\n       Bob Pentecost - HP\n       Rob Rhoads - Intel\n       David Roach\
    \ - Unisys\n       Stuart Rowley - Kyocera\n       Hiroyuki Sato - Canon\n   \
    \    Bob Setterbo - Adobe\n       Gail Songer, EFI\n       Mike Timperman - Lexmark\n\
    \       Randy Turner - Sharp\n       William Wagner - Digital Products\n     \
    \  Jim Walker - Dazel\n       Chris Wellens - Interworking Labs\n       Rob Whittle\
    \ - Novell\n       Don Wright - Lexmark\n       Lloyd Young - Lexmark\n      \
    \ Atsushi Yuki - Kyocera\n       Peter Zehler, Xerox, Corp.\n"
- title: 10 INDEX
  contents:
  - "10 INDEX\n   This index includes the textual conventions, the objects, and the\n\
    \   attributes.  Textual conventions all start with the prefix:  \"JM\" and\n\
    \   end with the suffix:  \"TC\".  Objects all starts with the prefix:\n   \"\
    jm\" followed by the group name.  Attributes are identified with\n   enums, and\
    \ so start with any lower case letter and have no special\n   prefix.\n   colorantConsumed,\
    \ 40\n   colorantRequested, 40\n   deviceNameRequested, 30\n   documentCopiesCompleted,\
    \ 35\n   documentCopiesRequested, 35\n   documentFormat, 31\n   documentFormatIndex,\
    \ 31\n   documentName, 31\n   fileName, 31\n   finishing, 33\n   fullColorImpressionsCompleted,\
    \ 37\n   highlightColorImpressionsCompleted, 37\n   impressionsCompletedCurrentCopy,\
    \ 37\n   impressionsInterpreted, 37\n   impressionsSentToDevice, 37\n   impressionsSpooled,\
    \ 36\n   jmAttributeInstanceIndex, 99\n   jmAttributeTypeIndex, 98\n   JmAttributeTypeTC,\
    \ 78\n   jmAttributeValueAsInteger, 99\n   jmAttributeValueAsOctets, 100\n   JmBooleanTC,\
    \ 72\n   JmFinishingTC, 70\n   jmGeneralAttributePersistence, 87\n   jmGeneralJobPersistence,\
    \ 87\n   jmGeneralJobSetIndex, 85\n   jmGeneralJobSetName, 88\n   jmGeneralNewestActiveJobIndex,\
    \ 86\n   jmGeneralNumberOfActiveJobs, 86\n   jmGeneralOldestActiveJobIndex, 86\n\
    \   JmJobCollationTypeTC, 74\n   jmJobIDJobIndex, 91\n   jmJobIDJobSetIndex, 90\n\
    \   jmJobImpressionsCompleted, 96\n   jmJobImpressionsPerCopyRequested, 95\n \
    \  jmJobIndex, 92\n   jmJobKOctetsPerCopyRequested, 94\n   jmJobKOctetsProcessed,\
    \ 94\n   jmJobOwner, 96\n   JmJobServiceTypesTC, 81\n   JmJobSourcePlatformTypeTC,\
    \ 69\n   jmJobState, 92\n   jmJobStateReasons1, 93\n   JmJobStateReasons1TC, 83\n\
    \   JmJobStateReasons2TC, 83\n   JmJobStateReasons3TC, 83\n   JmJobStateReasons4TC,\
    \ 84\n   JmJobStateTC, 75\n   JmJobStringTC, 68\n   jmJobSubmissionID, 89\n  \
    \ JmJobSubmissionIDTypeTC, 74\n   JmMediumTypeTC, 72\n   JmNaturalLanguageTagTC,\
    \ 68\n   jmNumberOfInterveningJobs, 93\n   JmPrinterResolutionTC, 71\n   JmPrintQualityTC,\
    \ 71\n   JmTimeStampTC, 69\n   JmTonerEconomyTC, 72\n   JmUTF8StringTC, 68\n \
    \  jobAccountName, 27\n   jobCodedCharSet, 26\n   jobCollationType, 36\n   jobComment,\
    \ 31\n   jobCompletionTime, 43\n   jobCopiesCompleted, 35\n   jobCopiesRequested,\
    \ 35\n   jobHold, 33\n   jobHoldUntil, 33\n   jobKOctetsTransferred, 35\n   jobName,\
    \ 28\n   jobNaturalLanguageTag, 27\n   jobOriginatingHost, 30\n   jobPriority,\
    \ 32\n   jobProcessAfterDateAndTime, 32\n   jobProcessingCPUTime, 43\n   jobServiceTypes,\
    \ 29\n   jobSourceChannelIndex, 29\n   jobSourcePlatformType, 29\n   jobStartedBeingHeldTime,\
    \ 42\n   jobStartedProcessingTime, 43\n   jobStateReasons2, 25\n   jobStateReasons3,\
    \ 25\n   jobStateReasons4, 25\n   jobSubmissionTime, 42\n   jobSubmissionToServerTime,\
    \ 42\n   jobURI, 27\n   mediumConsumed, 40\n   mediumRequested, 39\n   mediumSizeConsumed,\
    \ 41\n   mediumTypeConsumed, 41\n   numberOfDocuments, 30\n   other, 25\n   outputBin,\
    \ 33\n   pagesCompleted, 38\n   pagesCompletedCurrentCopy, 38\n   pagesRequested,\
    \ 38\n   physicalDevice, 30\n   printerResolutionRequested, 34\n   printerResolutionUsed,\
    \ 34\n   printQualityRequested, 34\n   printQualityUsed, 34\n   processingMessage,\
    \ 25\n   processingMessageNaturalLangTag, 26\n   queueNameRequested, 30\n   serverAssignedJobName,\
    \ 28\n   sheetCompletedCopyNumber, 36\n   sheetCompletedDocumentNumber, 36\n \
    \  sheetsCompleted, 39\n   sheetsCompletedCurrentCopy, 39\n   sheetsRequested,\
    \ 39\n   sides, 33\n   submittingApplicationName, 29\n   submittingServerName,\
    \ 29\n   tonerDensityRequested, 34\n   tonerDensityUsed, 34\n   tonerEcomonyRequested,\
    \ 34\n   tonerEcomonyUsed, 34\n"
- title: 11  Full Copyright Statement
  contents:
  - "11  Full Copyright Statement\n   Copyright (C) The Internet Society (1999). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
