- title: __initial_text__
  contents:
  - '                       JSON Web Algorithms (JWA)

    '
- title: Abstract
  contents:
  - "Abstract\n   This specification registers cryptographic algorithms and identifiers\n\
    \   to be used with the JSON Web Signature (JWS), JSON Web Encryption\n   (JWE),\
    \ and JSON Web Key (JWK) specifications.  It defines several\n   IANA registries\
    \ for these identifiers.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7518.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n     1.1.  Notational Conventions  . . . . . . . . . . . . .\
    \ . . . .   4\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   5\n   3.  Cryptographic Algorithms for Digital Signatures and MACs \
    \ . .   6\n     3.1.  \"alg\" (Algorithm) Header Parameter Values for JWS . .\
    \ . .   6\n     3.2.  HMAC with SHA-2 Functions . . . . . . . . . . . . . . .\
    \ .   7\n     3.3.  Digital Signature with RSASSA-PKCS1-v1_5  . . . . . . . .\
    \   8\n     3.4.  Digital Signature with ECDSA  . . . . . . . . . . . . . .  \
    \ 9\n     3.5.  Digital Signature with RSASSA-PSS . . . . . . . . . . . .  10\n\
    \     3.6.  Using the Algorithm \"none\"  . . . . . . . . . . . . . . .  11\n\
    \   4.  Cryptographic Algorithms for Key Management . . . . . . . . .  11\n  \
    \   4.1.  \"alg\" (Algorithm) Header Parameter Values for JWE . . . .  12\n  \
    \   4.2.  Key Encryption with RSAES-PKCS1-v1_5  . . . . . . . . . .  13\n    \
    \ 4.3.  Key Encryption with RSAES OAEP  . . . . . . . . . . . . .  14\n     4.4.\
    \  Key Wrapping with AES Key Wrap  . . . . . . . . . . . . .  14\n     4.5.  Direct\
    \ Encryption with a Shared Symmetric Key . . . . . .  15\n     4.6.  Key Agreement\
    \ with Elliptic Curve Diffie-Hellman\n           Ephemeral Static (ECDH-ES)  .\
    \ . . . . . . . . . . . . . .  15\n       4.6.1.  Header Parameters Used for ECDH\
    \ Key Agreement . . . .  16\n         4.6.1.1.  \"epk\" (Ephemeral Public Key)\
    \ Header Parameter . .  16\n         4.6.1.2.  \"apu\" (Agreement PartyUInfo)\
    \ Header Parameter . .  17\n         4.6.1.3.  \"apv\" (Agreement PartyVInfo)\
    \ Header Parameter . .  17\n       4.6.2.  Key Derivation for ECDH Key Agreement\
    \ . . . . . . . .  17\n     4.7.  Key Encryption with AES GCM . . . . . . . .\
    \ . . . . . . .  18\n       4.7.1.  Header Parameters Used for AES GCM Key Encryption\
    \ . .  19\n         4.7.1.1.  \"iv\" (Initialization Vector) Header Parameter\
    \ . .  19\n         4.7.1.2.  \"tag\" (Authentication Tag) Header Parameter .\
    \ . .  19\n     4.8.  Key Encryption with PBES2 . . . . . . . . . . . . . . .\
    \ .  20\n       4.8.1.  Header Parameters Used for PBES2 Key Encryption . . .\
    \  20\n         4.8.1.1.  \"p2s\" (PBES2 Salt Input) Header Parameter . . . .\
    \  21\n         4.8.1.2.  \"p2c\" (PBES2 Count) Header Parameter  . . . . . .\
    \  21\n   5.  Cryptographic Algorithms for Content Encryption . . . . . . .  21\n\
    \     5.1.  \"enc\" (Encryption Algorithm) Header Parameter Values for\n     \
    \      JWE . . . . . . . . . . . . . . . . . . . . . . . . . . .  22\n     5.2.\
    \  AES_CBC_HMAC_SHA2 Algorithms  . . . . . . . . . . . . . .  22\n       5.2.1.\
    \  Conventions Used in Defining AES_CBC_HMAC_SHA2  . . .  23\n       5.2.2.  Generic\
    \ AES_CBC_HMAC_SHA2 Algorithm . . . . . . . . .  23\n         5.2.2.1.  AES_CBC_HMAC_SHA2\
    \ Encryption  . . . . . . . . . .  23\n         5.2.2.2.  AES_CBC_HMAC_SHA2 Decryption\
    \  . . . . . . . . . .  25\n       5.2.3.  AES_128_CBC_HMAC_SHA_256  . . . . .\
    \ . . . . . . . . .  25\n       5.2.4.  AES_192_CBC_HMAC_SHA_384  . . . . . .\
    \ . . . . . . . .  26\n       5.2.5.  AES_256_CBC_HMAC_SHA_512  . . . . . . .\
    \ . . . . . . .  26\n       5.2.6.  Content Encryption with AES_CBC_HMAC_SHA2\
    \ . . . . . .  26\n     5.3.  Content Encryption with AES GCM . . . . . . . .\
    \ . . . . .  27\n   6.  Cryptographic Algorithms for Keys . . . . . . . . . .\
    \ . . . .  27\n     6.1.  \"kty\" (Key Type) Parameter Values . . . . . . . .\
    \ . . . .  28\n     6.2.  Parameters for Elliptic Curve Keys  . . . . . . . .\
    \ . . .  28\n       6.2.1.  Parameters for Elliptic Curve Public Keys . . . .\
    \ . .  28\n         6.2.1.1.  \"crv\" (Curve) Parameter . . . . . . . . . . .\
    \ . .  28\n         6.2.1.2.  \"x\" (X Coordinate) Parameter  . . . . . . . .\
    \ . .  29\n         6.2.1.3.  \"y\" (Y Coordinate) Parameter  . . . . . . . .\
    \ . .  29\n       6.2.2.  Parameters for Elliptic Curve Private Keys  . . . .\
    \ .  29\n         6.2.2.1.  \"d\" (ECC Private Key) Parameter . . . . . . . .\
    \ .  29\n     6.3.  Parameters for RSA Keys . . . . . . . . . . . . . . . . .\
    \  30\n       6.3.1.  Parameters for RSA Public Keys  . . . . . . . . . . .  30\n\
    \         6.3.1.1.  \"n\" (Modulus) Parameter . . . . . . . . . . . . .  30\n\
    \         6.3.1.2.  \"e\" (Exponent) Parameter  . . . . . . . . . . . .  30\n\
    \       6.3.2.  Parameters for RSA Private Keys . . . . . . . . . . .  30\n  \
    \       6.3.2.1.  \"d\" (Private Exponent) Parameter  . . . . . . . .  30\n  \
    \       6.3.2.2.  \"p\" (First Prime Factor) Parameter  . . . . . . .  31\n  \
    \       6.3.2.3.  \"q\" (Second Prime Factor) Parameter . . . . . . .  31\n  \
    \       6.3.2.4.  \"dp\" (First Factor CRT Exponent) Parameter  . . .  31\n  \
    \       6.3.2.5.  \"dq\" (Second Factor CRT Exponent) Parameter . . .  31\n  \
    \       6.3.2.6.  \"qi\" (First CRT Coefficient) Parameter  . . . . .  31\n  \
    \       6.3.2.7.  \"oth\" (Other Primes Info) Parameter . . . . . . .  31\n  \
    \   6.4.  Parameters for Symmetric Keys . . . . . . . . . . . . . .  32\n    \
    \   6.4.1.  \"k\" (Key Value) Parameter . . . . . . . . . . . . . .  32\n   7.\
    \  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  32\n     7.1.\
    \  JSON Web Signature and Encryption Algorithms Registry . .  33\n       7.1.1.\
    \  Registration Template . . . . . . . . . . . . . . . .  34\n       7.1.2.  Initial\
    \ Registry Contents . . . . . . . . . . . . . .  35\n     7.2.  Header Parameter\
    \ Names Registration . . . . . . . . . . .  42\n       7.2.1.  Registry Contents\
    \ . . . . . . . . . . . . . . . . . .  42\n     7.3.  JSON Web Encryption Compression\
    \ Algorithms Registry . . .  43\n       7.3.1.  Registration Template . . . .\
    \ . . . . . . . . . . . .  43\n       7.3.2.  Initial Registry Contents . . .\
    \ . . . . . . . . . . .  44\n     7.4.  JSON Web Key Types Registry . . . . .\
    \ . . . . . . . . . .  44\n       7.4.1.  Registration Template . . . . . . .\
    \ . . . . . . . . .  44\n       7.4.2.  Initial Registry Contents . . . . . .\
    \ . . . . . . . .  45\n     7.5.  JSON Web Key Parameters Registration  . . .\
    \ . . . . . . .  45\n       7.5.1.  Registry Contents . . . . . . . . . . . .\
    \ . . . . . .  46\n     7.6.  JSON Web Key Elliptic Curve Registry  . . . . .\
    \ . . . . .  48\n       7.6.1.  Registration Template . . . . . . . . . . . .\
    \ . . . .  48\n       7.6.2.  Initial Registry Contents . . . . . . . . . . .\
    \ . . .  49\n   8.  Security Considerations . . . . . . . . . . . . . . . . .\
    \ . .  49\n     8.1.  Cryptographic Agility . . . . . . . . . . . . . . . . .\
    \ .  50\n     8.2.  Key Lifetimes . . . . . . . . . . . . . . . . . . . . . .\
    \  50\n     8.3.  RSAES-PKCS1-v1_5 Security Considerations  . . . . . . . .  50\n\
    \     8.4.  AES GCM Security Considerations . . . . . . . . . . . . .  50\n  \
    \   8.5.  Unsecured JWS Security Considerations . . . . . . . . . .  51\n    \
    \ 8.6.  Denial-of-Service Attacks . . . . . . . . . . . . . . . .  51\n     8.7.\
    \  Reusing Key Material when Encrypting Keys . . . . . . . .  51\n     8.8.  Password\
    \ Considerations . . . . . . . . . . . . . . . . .  52\n     8.9.  Key Entropy\
    \ and Random Values . . . . . . . . . . . . . .  52\n     8.10. Differences between\
    \ Digital Signatures and MACs . . . . .  52\n     8.11. Using Matching Algorithm\
    \ Strengths  . . . . . . . . . . .  53\n     8.12. Adaptive Chosen-Ciphertext\
    \ Attacks  . . . . . . . . . . .  53\n     8.13. Timing Attacks  . . . . . . .\
    \ . . . . . . . . . . . . . .  53\n     8.14. RSA Private Key Representations\
    \ and Blinding  . . . . . .  53\n   9.  Internationalization Considerations .\
    \ . . . . . . . . . . . .  53\n   10. References  . . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  53\n     10.1.  Normative References . . . . . . . .\
    \ . . . . . . . . . .  53\n     10.2.  Informative References . . . . . . . .\
    \ . . . . . . . . .  56\n   Appendix A.  Algorithm Identifier Cross-Reference\
    \ . . . . . . . .  59\n     A.1.  Digital Signature/MAC Algorithm Identifier Cross-\n\
    \           Reference . . . . . . . . . . . . . . . . . . . . . . . .  60\n  \
    \   A.2.  Key Management Algorithm Identifier Cross-Reference . . .  61\n    \
    \ A.3.  Content Encryption Algorithm Identifier Cross-Reference .  62\n   Appendix\
    \ B.  Test Cases for AES_CBC_HMAC_SHA2 Algorithms  . . . .  62\n     B.1.  Test\
    \ Cases for AES_128_CBC_HMAC_SHA_256 . . . . . . . . .  63\n     B.2.  Test Cases\
    \ for AES_192_CBC_HMAC_SHA_384 . . . . . . . . .  64\n     B.3.  Test Cases for\
    \ AES_256_CBC_HMAC_SHA_512 . . . . . . . . .  65\n   Appendix C.  Example ECDH-ES\
    \ Key Agreement Computation  . . . . .  66\n   Acknowledgements  . . . . . . .\
    \ . . . . . . . . . . . . . . . . .  69\n   Author's Address  . . . . . . . .\
    \ . . . . . . . . . . . . . . . .  69\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This specification registers cryptographic algorithms and\
    \ identifiers\n   to be used with the JSON Web Signature (JWS) [JWS], JSON Web\n\
    \   Encryption (JWE) [JWE], and JSON Web Key (JWK) [JWK] specifications.\n   It\
    \ defines several IANA registries for these identifiers.  All these\n   specifications\
    \ utilize JSON-based [RFC7159] data structures.  This\n   specification also describes\
    \ the semantics and operations that are\n   specific to these algorithms and key\
    \ types.\n   Registering the algorithms and identifiers here, rather than in the\n\
    \   JWS, JWE, and JWK specifications, is intended to allow them to remain\n  \
    \ unchanged in the face of changes in the set of Required, Recommended,\n   Optional,\
    \ and Deprecated algorithms over time.  This also allows\n   changes to the JWS,\
    \ JWE, and JWK specifications without changing this\n   document.\n   Names defined\
    \ by this specification are short because a core goal is\n   for the resulting\
    \ representations to be compact.\n"
- title: 1.1.  Notational Conventions
  contents:
  - "1.1.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted\
    \ as described in\n   \"Key words for use in RFCs to Indicate Requirement Levels\"\
    \ [RFC2119].\n   The interpretation should only be applied when the terms appear\
    \ in\n   all capital letters.\n   BASE64URL(OCTETS) denotes the base64url encoding\
    \ of OCTETS, per\n   Section 2 of [JWS].\n   UTF8(STRING) denotes the octets of\
    \ the UTF-8 [RFC3629] representation\n   of STRING, where STRING is a sequence\
    \ of zero or more Unicode\n   [UNICODE] characters.\n   ASCII(STRING) denotes\
    \ the octets of the ASCII [RFC20] representation\n   of STRING, where STRING is\
    \ a sequence of zero or more ASCII\n   characters.\n   The concatenation of two\
    \ values A and B is denoted as A || B.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The terms \"JSON Web Signature (JWS)\", \"Base64url Encoding\"\
    , \"Header\n   Parameter\", \"JOSE Header\", \"JWS Payload\", \"JWS Protected\
    \ Header\",\n   \"JWS Signature\", \"JWS Signing Input\", and \"Unsecured JWS\"\
    \ are defined\n   by the JWS specification [JWS].\n   The terms \"JSON Web Encryption\
    \ (JWE)\", \"Additional Authenticated Data\n   (AAD)\", \"Authentication Tag\"\
    , \"Content Encryption Key (CEK)\", \"Direct\n   Encryption\", \"Direct Key Agreement\"\
    , \"JWE Authentication Tag\", \"JWE\n   Ciphertext\", \"JWE Encrypted Key\", \"\
    JWE Initialization Vector\", \"JWE\n   Protected Header\", \"Key Agreement with\
    \ Key Wrapping\", \"Key\n   Encryption\", \"Key Management Mode\", and \"Key Wrapping\"\
    \ are defined by\n   the JWE specification [JWE].\n   The terms \"JSON Web Key\
    \ (JWK)\" and \"JWK Set\" are defined by the JWK\n   specification [JWK].\n  \
    \ The terms \"Ciphertext\", \"Digital Signature\", \"Initialization Vector\",\n\
    \   \"Message Authentication Code (MAC)\", and \"Plaintext\" are defined by\n\
    \   the \"Internet Security Glossary, Version 2\" [RFC4949].\n   This term is\
    \ defined by this specification:\n   Base64urlUInt\n      The representation of\
    \ a positive or zero integer value as the\n      base64url encoding of the value's\
    \ unsigned big-endian\n      representation as an octet sequence.  The octet sequence\
    \ MUST\n      utilize the minimum number of octets needed to represent the\n \
    \     value.  Zero is represented as BASE64URL(single zero-valued\n      octet),\
    \ which is \"AA\".\n"
- title: 3.  Cryptographic Algorithms for Digital Signatures and MACs
  contents:
  - "3.  Cryptographic Algorithms for Digital Signatures and MACs\n   JWS uses cryptographic\
    \ algorithms to digitally sign or create a MAC\n   of the contents of the JWS\
    \ Protected Header and the JWS Payload.\n"
- title: 3.1.  "alg" (Algorithm) Header Parameter Values for JWS
  contents:
  - "3.1.  \"alg\" (Algorithm) Header Parameter Values for JWS\n   The table below\
    \ is the set of \"alg\" (algorithm) Header Parameter\n   values defined by this\
    \ specification for use with JWS, each of which\n   is explained in more detail\
    \ in the following sections:\n   +--------------+-------------------------------+--------------------+\n\
    \   | \"alg\" Param  | Digital Signature or MAC      | Implementation     |\n\
    \   | Value        | Algorithm                     | Requirements       |\n  \
    \ +--------------+-------------------------------+--------------------+\n   |\
    \ HS256        | HMAC using SHA-256            | Required           |\n   | HS384\
    \        | HMAC using SHA-384            | Optional           |\n   | HS512  \
    \      | HMAC using SHA-512            | Optional           |\n   | RS256    \
    \    | RSASSA-PKCS1-v1_5 using       | Recommended        |\n   |            \
    \  | SHA-256                       |                    |\n   | RS384        |\
    \ RSASSA-PKCS1-v1_5 using       | Optional           |\n   |              | SHA-384\
    \                       |                    |\n   | RS512        | RSASSA-PKCS1-v1_5\
    \ using       | Optional           |\n   |              | SHA-512            \
    \           |                    |\n   | ES256        | ECDSA using P-256 and\
    \ SHA-256 | Recommended+       |\n   | ES384        | ECDSA using P-384 and SHA-384\
    \ | Optional           |\n   | ES512        | ECDSA using P-521 and SHA-512 |\
    \ Optional           |\n   | PS256        | RSASSA-PSS using SHA-256 and  | Optional\
    \           |\n   |              | MGF1 with SHA-256             |           \
    \         |\n   | PS384        | RSASSA-PSS using SHA-384 and  | Optional    \
    \       |\n   |              | MGF1 with SHA-384             |               \
    \     |\n   | PS512        | RSASSA-PSS using SHA-512 and  | Optional        \
    \   |\n   |              | MGF1 with SHA-512             |                   \
    \ |\n   | none         | No digital signature or MAC   | Optional           |\n\
    \   |              | performed                     |                    |\n  \
    \ +--------------+-------------------------------+--------------------+\n   The\
    \ use of \"+\" in the Implementation Requirements column indicates\n   that the\
    \ requirement strength is likely to be increased in a future\n   version of the\
    \ specification.\n   See Appendix A.1 for a table cross-referencing the JWS digital\n\
    \   signature and MAC \"alg\" (algorithm) values defined in this\n   specification\
    \ with the equivalent identifiers used by other standards\n   and software packages.\n"
- title: 3.2.  HMAC with SHA-2 Functions
  contents:
  - "3.2.  HMAC with SHA-2 Functions\n   Hash-based Message Authentication Codes (HMACs)\
    \ enable one to use a\n   secret plus a cryptographic hash function to generate\
    \ a MAC.  This\n   can be used to demonstrate that whoever generated the MAC was\
    \ in\n   possession of the MAC key.  The algorithm for implementing and\n   validating\
    \ HMACs is provided in RFC 2104 [RFC2104].\n   A key of the same size as the hash\
    \ output (for instance, 256 bits for\n   \"HS256\") or larger MUST be used with\
    \ this algorithm.  (This\n   requirement is based on Section 5.3.4 (Security Effect\
    \ of the HMAC\n   Key) of NIST SP 800-117 [NIST.800-107], which states that the\n\
    \   effective security strength is the minimum of the security strength\n   of\
    \ the key and two times the size of the internal hash value.)\n   The HMAC SHA-256\
    \ MAC is generated per RFC 2104, using SHA-256 as the\n   hash algorithm \"H\"\
    , using the JWS Signing Input as the \"text\" value,\n   and using the shared\
    \ key.  The HMAC output value is the JWS\n   Signature.\n   The following \"alg\"\
    \ (algorithm) Header Parameter values are used to\n   indicate that the JWS Signature\
    \ is an HMAC value computed using the\n   corresponding algorithm:\n         \
    \       +-------------------+--------------------+\n                | \"alg\"\
    \ Param Value | MAC Algorithm      |\n                +-------------------+--------------------+\n\
    \                | HS256             | HMAC using SHA-256 |\n                |\
    \ HS384             | HMAC using SHA-384 |\n                | HS512          \
    \   | HMAC using SHA-512 |\n                +-------------------+--------------------+\n\
    \   The HMAC SHA-256 MAC for a JWS is validated by computing an HMAC\n   value\
    \ per RFC 2104, using SHA-256 as the hash algorithm \"H\", using\n   the received\
    \ JWS Signing Input as the \"text\" value, and using the\n   shared key.  This\
    \ computed HMAC value is then compared to the result\n   of base64url decoding\
    \ the received encoded JWS Signature value.  The\n   comparison of the computed\
    \ HMAC value to the JWS Signature value MUST\n   be done in a constant-time manner\
    \ to thwart timing attacks.\n   Alternatively, the computed HMAC value can be\
    \ base64url encoded and\n   compared to the received encoded JWS Signature value\
    \ (also in a\n   constant-time manner), as this comparison produces the same result\
    \ as\n   comparing the unencoded values.  In either case, if the values match,\n\
    \   the HMAC has been validated.\n   Securing content and validation with the\
    \ HMAC SHA-384 and HMAC\n   SHA-512 algorithms is performed identically to the\
    \ procedure for HMAC\n   SHA-256 -- just using the corresponding hash algorithms\
    \ with\n   correspondingly larger minimum key sizes and result values: 384 bits\n\
    \   each for HMAC SHA-384 and 512 bits each for HMAC SHA-512.\n   An example using\
    \ this algorithm is shown in Appendix A.1 of [JWS].\n"
- title: 3.3.  Digital Signature with RSASSA-PKCS1-v1_5
  contents:
  - "3.3.  Digital Signature with RSASSA-PKCS1-v1_5\n   This section defines the use\
    \ of the RSASSA-PKCS1-v1_5 digital\n   signature algorithm as defined in Section\
    \ 8.2 of RFC 3447 [RFC3447]\n   (commonly known as PKCS #1), using SHA-2 [SHS]\
    \ hash functions.\n   A key of size 2048 bits or larger MUST be used with these\
    \ algorithms.\n   The RSASSA-PKCS1-v1_5 SHA-256 digital signature is generated\
    \ as\n   follows: generate a digital signature of the JWS Signing Input using\n\
    \   RSASSA-PKCS1-v1_5-SIGN and the SHA-256 hash function with the desired\n  \
    \ private key.  This is the JWS Signature value.\n   The following \"alg\" (algorithm)\
    \ Header Parameter values are used to\n   indicate that the JWS Signature is a\
    \ digital signature value computed\n   using the corresponding algorithm:\n  \
    \        +-------------------+---------------------------------+\n          |\
    \ \"alg\" Param Value | Digital Signature Algorithm     |\n          +-------------------+---------------------------------+\n\
    \          | RS256             | RSASSA-PKCS1-v1_5 using SHA-256 |\n         \
    \ | RS384             | RSASSA-PKCS1-v1_5 using SHA-384 |\n          | RS512 \
    \            | RSASSA-PKCS1-v1_5 using SHA-512 |\n          +-------------------+---------------------------------+\n\
    \   The RSASSA-PKCS1-v1_5 SHA-256 digital signature for a JWS is\n   validated\
    \ as follows: submit the JWS Signing Input, the JWS\n   Signature, and the public\
    \ key corresponding to the private key used\n   by the signer to the RSASSA-PKCS1-v1_5-VERIFY\
    \ algorithm using SHA-256\n   as the hash function.\n   Signing and validation\
    \ with the RSASSA-PKCS1-v1_5 SHA-384 and RSASSA-\n   PKCS1-v1_5 SHA-512 algorithms\
    \ is performed identically to the\n   procedure for RSASSA-PKCS1-v1_5 SHA-256\
    \ -- just using the\n   corresponding hash algorithms instead of SHA-256.\n  \
    \ An example using this algorithm is shown in Appendix A.2 of [JWS].\n"
- title: 3.4.  Digital Signature with ECDSA
  contents:
  - "3.4.  Digital Signature with ECDSA\n   The Elliptic Curve Digital Signature Algorithm\
    \ (ECDSA) [DSS] provides\n   for the use of Elliptic Curve Cryptography, which\
    \ is able to provide\n   equivalent security to RSA cryptography but using shorter\
    \ key sizes\n   and with greater processing speed for many operations.  This means\n\
    \   that ECDSA digital signatures will be substantially smaller in terms\n   of\
    \ length than equivalently strong RSA digital signatures.\n   This specification\
    \ defines the use of ECDSA with the P-256 curve and\n   the SHA-256 cryptographic\
    \ hash function, ECDSA with the P-384 curve\n   and the SHA-384 hash function,\
    \ and ECDSA with the P-521 curve and the\n   SHA-512 hash function.  The P-256,\
    \ P-384, and P-521 curves are\n   defined in [DSS].\n   The ECDSA P-256 SHA-256\
    \ digital signature is generated as follows:\n   1.  Generate a digital signature\
    \ of the JWS Signing Input using ECDSA\n       P-256 SHA-256 with the desired\
    \ private key.  The output will be\n       the pair (R, S), where R and S are\
    \ 256-bit unsigned integers.\n   2.  Turn R and S into octet sequences in big-endian\
    \ order, with each\n       array being be 32 octets long.  The octet sequence\n\
    \       representations MUST NOT be shortened to omit any leading zero\n     \
    \  octets contained in the values.\n   3.  Concatenate the two octet sequences\
    \ in the order R and then S.\n       (Note that many ECDSA implementations will\
    \ directly produce this\n       concatenation as their output.)\n   4.  The resulting\
    \ 64-octet sequence is the JWS Signature value.\n   The following \"alg\" (algorithm)\
    \ Header Parameter values are used to\n   indicate that the JWS Signature is a\
    \ digital signature value computed\n   using the corresponding algorithm:\n  \
    \         +-------------------+-------------------------------+\n           |\
    \ \"alg\" Param Value | Digital Signature Algorithm   |\n           +-------------------+-------------------------------+\n\
    \           | ES256             | ECDSA using P-256 and SHA-256 |\n          \
    \ | ES384             | ECDSA using P-384 and SHA-384 |\n           | ES512  \
    \           | ECDSA using P-521 and SHA-512 |\n           +-------------------+-------------------------------+\n\
    \   The ECDSA P-256 SHA-256 digital signature for a JWS is validated as\n   follows:\n\
    \   1.  The JWS Signature value MUST be a 64-octet sequence.  If it is\n     \
    \  not a 64-octet sequence, the validation has failed.\n   2.  Split the 64-octet\
    \ sequence into two 32-octet sequences.  The\n       first octet sequence represents\
    \ R and the second S.  The values R\n       and S are represented as octet sequences\
    \ using the Integer-to-\n       OctetString Conversion defined in Section 2.3.7\
    \ of SEC1 [SEC1]\n       (in big-endian octet order).\n   3.  Submit the JWS Signing\
    \ Input, R, S, and the public key (x, y) to\n       the ECDSA P-256 SHA-256 validator.\n\
    \   Signing and validation with the ECDSA P-384 SHA-384 and ECDSA P-521\n   SHA-512\
    \ algorithms is performed identically to the procedure for\n   ECDSA P-256 SHA-256\
    \ -- just using the corresponding hash algorithms\n   with correspondingly larger\
    \ result values.  For ECDSA P-384 SHA-384,\n   R and S will be 384 bits each,\
    \ resulting in a 96-octet sequence.  For\n   ECDSA P-521 SHA-512, R and S will\
    \ be 521 bits each, resulting in a\n   132-octet sequence.  (Note that the Integer-to-OctetString\
    \ Conversion\n   defined in Section 2.3.7 of SEC1 [SEC1] used to represent R and\
    \ S as\n   octet sequences adds zero-valued high-order padding bits when needed\n\
    \   to round the size up to a multiple of 8 bits; thus, each 521-bit\n   integer\
    \ is represented using 528 bits in 66 octets.)\n   Examples using these algorithms\
    \ are shown in Appendices A.3 and A.4\n   of [JWS].\n"
- title: 3.5.  Digital Signature with RSASSA-PSS
  contents:
  - "3.5.  Digital Signature with RSASSA-PSS\n   This section defines the use of the\
    \ RSASSA-PSS digital signature\n   algorithm as defined in Section 8.1 of RFC\
    \ 3447 [RFC3447] with the\n   MGF1 mask generation function and SHA-2 hash functions,\
    \ always using\n   the same hash function for both the RSASSA-PSS hash function\
    \ and the\n   MGF1 hash function.  The size of the salt value is the same size\
    \ as\n   the hash function output.  All other algorithm parameters use the\n \
    \  defaults specified in Appendix A.2.3 of RFC 3447.\n   A key of size 2048 bits\
    \ or larger MUST be used with this algorithm.\n   The RSASSA-PSS SHA-256 digital\
    \ signature is generated as follows:\n   generate a digital signature of the JWS\
    \ Signing Input using RSASSA-\n   PSS-SIGN, the SHA-256 hash function, and the\
    \ MGF1 mask generation\n   function with SHA-256 with the desired private key.\
    \  This is the JWS\n   Signature value.\n   The following \"alg\" (algorithm)\
    \ Header Parameter values are used to\n   indicate that the JWS Signature is a\
    \ digital signature value computed\n   using the corresponding algorithm:\n  \
    \ +-------------------+-----------------------------------------------+\n   |\
    \ \"alg\" Param Value | Digital Signature Algorithm                   |\n   +-------------------+-----------------------------------------------+\n\
    \   | PS256             | RSASSA-PSS using SHA-256 and MGF1 with        |\n  \
    \ |                   | SHA-256                                       |\n   |\
    \ PS384             | RSASSA-PSS using SHA-384 and MGF1 with        |\n   |  \
    \                 | SHA-384                                       |\n   | PS512\
    \             | RSASSA-PSS using SHA-512 and MGF1 with        |\n   |        \
    \           | SHA-512                                       |\n   +-------------------+-----------------------------------------------+\n\
    \   The RSASSA-PSS SHA-256 digital signature for a JWS is validated as\n   follows:\
    \ submit the JWS Signing Input, the JWS Signature, and the\n   public key corresponding\
    \ to the private key used by the signer to the\n   RSASSA-PSS-VERIFY algorithm\
    \ using SHA-256 as the hash function and\n   using MGF1 as the mask generation\
    \ function with SHA-256.\n   Signing and validation with the RSASSA-PSS SHA-384\
    \ and RSASSA-PSS\n   SHA-512 algorithms is performed identically to the procedure\
    \ for\n   RSASSA-PSS SHA-256 -- just using the alternative hash algorithm in\n\
    \   both roles.\n"
- title: 3.6.  Using the Algorithm "none"
  contents:
  - "3.6.  Using the Algorithm \"none\"\n   JWSs MAY also be created that do not provide\
    \ integrity protection.\n   Such a JWS is called an Unsecured JWS.  An Unsecured\
    \ JWS uses the\n   \"alg\" value \"none\" and is formatted identically to other\
    \ JWSs, but\n   MUST use the empty octet sequence as its JWS Signature value.\n\
    \   Recipients MUST verify that the JWS Signature value is the empty\n   octet\
    \ sequence.\n   Implementations that support Unsecured JWSs MUST NOT accept such\n\
    \   objects as valid unless the application specifies that it is\n   acceptable\
    \ for a specific object to not be integrity protected.\n   Implementations MUST\
    \ NOT accept Unsecured JWSs by default.  In order\n   to mitigate downgrade attacks,\
    \ applications MUST NOT signal\n   acceptance of Unsecured JWSs at a global level,\
    \ and SHOULD signal\n   acceptance on a per-object basis.  See Section 8.5 for\
    \ security\n   considerations associated with using this algorithm.\n"
- title: 4.  Cryptographic Algorithms for Key Management
  contents:
  - "4.  Cryptographic Algorithms for Key Management\n   JWE uses cryptographic algorithms\
    \ to encrypt or determine the Content\n   Encryption Key (CEK).\n"
- title: 4.1.  "alg" (Algorithm) Header Parameter Values for JWE
  contents:
  - "4.1.  \"alg\" (Algorithm) Header Parameter Values for JWE\n   The table below\
    \ is the set of \"alg\" (algorithm) Header Parameter\n   values that are defined\
    \ by this specification for use with JWE.\n   These algorithms are used to encrypt\
    \ the CEK, producing the JWE\n   Encrypted Key, or to use key agreement to agree\
    \ upon the CEK.\n   +--------------------+--------------------+--------+----------------+\n\
    \   | \"alg\" Param Value  | Key Management     | More   | Implementation |\n\
    \   |                    | Algorithm          | Header | Requirements   |\n  \
    \ |                    |                    | Params |                |\n   +--------------------+--------------------+--------+----------------+\n\
    \   | RSA1_5             | RSAES-PKCS1-v1_5   | (none) | Recommended-   |\n  \
    \ | RSA-OAEP           | RSAES OAEP using   | (none) | Recommended+   |\n   |\
    \                    | default parameters |        |                |\n   | RSA-OAEP-256\
    \       | RSAES OAEP using   | (none) | Optional       |\n   |               \
    \     | SHA-256 and MGF1   |        |                |\n   |                 \
    \   | with SHA-256       |        |                |\n   | A128KW            \
    \ | AES Key Wrap with  | (none) | Recommended    |\n   |                    |\
    \ default initial    |        |                |\n   |                    | value\
    \ using        |        |                |\n   |                    | 128-bit\
    \ key        |        |                |\n   | A192KW             | AES Key Wrap\
    \ with  | (none) | Optional       |\n   |                    | default initial\
    \    |        |                |\n   |                    | value using      \
    \  |        |                |\n   |                    | 192-bit key        |\
    \        |                |\n   | A256KW             | AES Key Wrap with  | (none)\
    \ | Recommended    |\n   |                    | default initial    |        |\
    \                |\n   |                    | value using        |        |  \
    \              |\n   |                    | 256-bit key        |        |    \
    \            |\n   | dir                | Direct use of a    | (none) | Recommended\
    \    |\n   |                    | shared symmetric   |        |              \
    \  |\n   |                    | key as the CEK     |        |                |\n\
    \   | ECDH-ES            | Elliptic Curve     | \"epk\", | Recommended+   |\n\
    \   |                    | Diffie-Hellman     | \"apu\", |                |\n\
    \   |                    | Ephemeral Static   | \"apv\"  |                |\n\
    \   |                    | key agreement      |        |                |\n  \
    \ |                    | using Concat KDF   |        |                |\n   |\
    \ ECDH-ES+A128KW     | ECDH-ES using      | \"epk\", | Recommended    |\n   |\
    \                    | Concat KDF and CEK | \"apu\", |                |\n   |\
    \                    | wrapped with       | \"apv\"  |                |\n   |\
    \                    | \"A128KW\"           |        |                |\n   |\
    \ ECDH-ES+A192KW     | ECDH-ES using      | \"epk\", | Optional       |\n   |\
    \                    | Concat KDF and CEK | \"apu\", |                |\n   |\
    \                    | wrapped with       | \"apv\"  |                |\n   |\
    \                    | \"A192KW\"           |        |                |\n   |\
    \ ECDH-ES+A256KW     | ECDH-ES using      | \"epk\", | Recommended    |\n   |\
    \                    | Concat KDF and CEK | \"apu\", |                |\n   |\
    \                    | wrapped with       | \"apv\"  |                |\n   |\
    \                    | \"A256KW\"           |        |                |\n   |\
    \ A128GCMKW          | Key wrapping with  | \"iv\",  | Optional       |\n   |\
    \                    | AES GCM using      | \"tag\"  |                |\n   |\
    \                    | 128-bit key        |        |                |\n   | A192GCMKW\
    \          | Key wrapping with  | \"iv\",  | Optional       |\n   |          \
    \          | AES GCM using      | \"tag\"  |                |\n   |          \
    \          | 192-bit key        |        |                |\n   | A256GCMKW  \
    \        | Key wrapping with  | \"iv\",  | Optional       |\n   |            \
    \        | AES GCM using      | \"tag\"  |                |\n   |            \
    \        | 256-bit key        |        |                |\n   | PBES2-HS256+A128KW\
    \ | PBES2 with HMAC    | \"p2s\", | Optional       |\n   |                   \
    \ | SHA-256 and        | \"p2c\"  |                |\n   |                   \
    \ | \"A128KW\" wrapping  |        |                |\n   | PBES2-HS384+A192KW\
    \ | PBES2 with HMAC    | \"p2s\", | Optional       |\n   |                   \
    \ | SHA-384 and        | \"p2c\"  |                |\n   |                   \
    \ | \"A192KW\" wrapping  |        |                |\n   | PBES2-HS512+A256KW\
    \ | PBES2 with HMAC    | \"p2s\", | Optional       |\n   |                   \
    \ | SHA-512 and        | \"p2c\"  |                |\n   |                   \
    \ | \"A256KW\" wrapping  |        |                |\n   +--------------------+--------------------+--------+----------------+\n\
    \   The More Header Params column indicates what additional Header\n   Parameters\
    \ are used by the algorithm, beyond \"alg\", which all use.\n   All but \"dir\"\
    \ and \"ECDH-ES\" also produce a JWE Encrypted Key value.\n   The use of \"+\"\
    \ in the Implementation Requirements column indicates\n   that the requirement\
    \ strength is likely to be increased in a future\n   version of the specification.\
    \  The use of \"-\" indicates that the\n   requirement strength is likely to be\
    \ decreased in a future version of\n   the specification.\n   See Appendix A.2\
    \ for a table cross-referencing the JWE \"alg\"\n   (algorithm) values defined\
    \ in this specification with the equivalent\n   identifiers used by other standards\
    \ and software packages.\n"
- title: 4.2.  Key Encryption with RSAES-PKCS1-v1_5
  contents:
  - "4.2.  Key Encryption with RSAES-PKCS1-v1_5\n   This section defines the specifics\
    \ of encrypting a JWE CEK with\n   RSAES-PKCS1-v1_5 [RFC3447].  The \"alg\" (algorithm)\
    \ Header Parameter\n   value \"RSA1_5\" is used for this algorithm.\n   A key\
    \ of size 2048 bits or larger MUST be used with this algorithm.\n   An example\
    \ using this algorithm is shown in Appendix A.2 of [JWE].\n"
- title: 4.3.  Key Encryption with RSAES OAEP
  contents:
  - "4.3.  Key Encryption with RSAES OAEP\n   This section defines the specifics of\
    \ encrypting a JWE CEK with RSAES\n   using Optimal Asymmetric Encryption Padding\
    \ (OAEP) [RFC3447].  Two\n   sets of parameters for using OAEP are defined, which\
    \ use different\n   hash functions.  In the first case, the default parameters\
    \ specified\n   in Appendix A.2.1 of RFC 3447 are used.  (Those default parameters\n\
    \   are the SHA-1 hash function and the MGF1 with SHA-1 mask generation\n   function.)\
    \  In the second case, the SHA-256 hash function and the\n   MGF1 with SHA-256\
    \ mask generation function are used.\n   The following \"alg\" (algorithm) Header\
    \ Parameter values are used to\n   indicate that the JWE Encrypted Key is the\
    \ result of encrypting the\n   CEK using the corresponding algorithm:\n   +-------------------+-----------------------------------------------+\n\
    \   | \"alg\" Param Value | Key Management Algorithm                      |\n\
    \   +-------------------+-----------------------------------------------+\n  \
    \ | RSA-OAEP          | RSAES OAEP using default parameters           |\n   |\
    \ RSA-OAEP-256      | RSAES OAEP using SHA-256 and MGF1 with        |\n   |  \
    \                 | SHA-256                                       |\n   +-------------------+-----------------------------------------------+\n\
    \   A key of size 2048 bits or larger MUST be used with these algorithms.\n  \
    \ (This requirement is based on Table 4 (Security-strength time frames)\n   of\
    \ NIST SP 800-57 [NIST.800-57], which requires 112 bits of security\n   for new\
    \ uses, and Table 2 (Comparable strengths) of the same, which\n   states that\
    \ 2048-bit RSA keys provide 112 bits of security.)\n   An example using RSAES\
    \ OAEP with the default parameters is shown in\n   Appendix A.1 of [JWE].\n"
- title: 4.4.  Key Wrapping with AES Key Wrap
  contents:
  - "4.4.  Key Wrapping with AES Key Wrap\n   This section defines the specifics of\
    \ encrypting a JWE CEK with the\n   Advanced Encryption Standard (AES) Key Wrap\
    \ Algorithm [RFC3394] using\n   the default initial value specified in Section\
    \ 2.2.3.1 of that\n   document.\n   The following \"alg\" (algorithm) Header Parameter\
    \ values are used to\n   indicate that the JWE Encrypted Key is the result of\
    \ encrypting the\n   CEK using the corresponding algorithm and key size:\n   +-----------------+-------------------------------------------------+\n\
    \   | \"alg\" Param     | Key Management Algorithm                        |\n\
    \   | Value           |                                                 |\n  \
    \ +-----------------+-------------------------------------------------+\n   |\
    \ A128KW          | AES Key Wrap with default initial value using   |\n   |  \
    \               | 128-bit key                                     |\n   | A192KW\
    \          | AES Key Wrap with default initial value using   |\n   |         \
    \        | 192-bit key                                     |\n   | A256KW    \
    \      | AES Key Wrap with default initial value using   |\n   |             \
    \    | 256-bit key                                     |\n   +-----------------+-------------------------------------------------+\n\
    \   An example using this algorithm is shown in Appendix A.3 of [JWE].\n"
- title: 4.5.  Direct Encryption with a Shared Symmetric Key
  contents:
  - "4.5.  Direct Encryption with a Shared Symmetric Key\n   This section defines\
    \ the specifics of directly performing symmetric\n   key encryption without performing\
    \ a key wrapping step.  In this case,\n   the shared symmetric key is used directly\
    \ as the Content Encryption\n   Key (CEK) value for the \"enc\" algorithm.  An\
    \ empty octet sequence is\n   used as the JWE Encrypted Key value.  The \"alg\"\
    \ (algorithm) Header\n   Parameter value \"dir\" is used in this case.\n   Refer\
    \ to the security considerations on key lifetimes in Section 8.2\n   and AES GCM\
    \ in Section 8.4 when considering utilizing direct\n   encryption.\n"
- title: 4.6.  Key Agreement with Elliptic Curve Diffie-Hellman Ephemeral Static
  contents:
  - "4.6.  Key Agreement with Elliptic Curve Diffie-Hellman Ephemeral Static\n   \
    \   (ECDH-ES)\n   This section defines the specifics of key agreement with Elliptic\n\
    \   Curve Diffie-Hellman Ephemeral Static [RFC6090], in combination with\n   the\
    \ Concat KDF, as defined in Section 5.8.1 of [NIST.800-56A].  The\n   key agreement\
    \ result can be used in one of two ways:\n   1.  directly as the Content Encryption\
    \ Key (CEK) for the \"enc\"\n       algorithm, in the Direct Key Agreement mode,\
    \ or\n   2.  as a symmetric key used to wrap the CEK with the \"A128KW\",\n  \
    \     \"A192KW\", or \"A256KW\" algorithms, in the Key Agreement with Key\n  \
    \     Wrapping mode.\n   A new ephemeral public key value MUST be generated for\
    \ each key\n   agreement operation.\n   In Direct Key Agreement mode, the output\
    \ of the Concat KDF MUST be a\n   key of the same length as that used by the \"\
    enc\" algorithm.  In this\n   case, the empty octet sequence is used as the JWE\
    \ Encrypted Key\n   value.  The \"alg\" (algorithm) Header Parameter value \"\
    ECDH-ES\" is\n   used in the Direct Key Agreement mode.\n   In Key Agreement with\
    \ Key Wrapping mode, the output of the Concat KDF\n   MUST be a key of the length\
    \ needed for the specified key wrapping\n   algorithm.  In this case, the JWE\
    \ Encrypted Key is the CEK wrapped\n   with the agreed-upon key.\n   The following\
    \ \"alg\" (algorithm) Header Parameter values are used to\n   indicate that the\
    \ JWE Encrypted Key is the result of encrypting the\n   CEK using the result of\
    \ the key agreement algorithm as the key\n   encryption key for the corresponding\
    \ key wrapping algorithm:\n   +-----------------+-------------------------------------------------+\n\
    \   | \"alg\" Param     | Key Management Algorithm                        |\n\
    \   | Value           |                                                 |\n  \
    \ +-----------------+-------------------------------------------------+\n   |\
    \ ECDH-ES+A128KW  | ECDH-ES using Concat KDF and CEK wrapped with   |\n   |  \
    \               | \"A128KW\"                                        |\n   | ECDH-ES+A192KW\
    \  | ECDH-ES using Concat KDF and CEK wrapped with   |\n   |                 |\
    \ \"A192KW\"                                        |\n   | ECDH-ES+A256KW  |\
    \ ECDH-ES using Concat KDF and CEK wrapped with   |\n   |                 | \"\
    A256KW\"                                        |\n   +-----------------+-------------------------------------------------+\n"
- title: 4.6.1.  Header Parameters Used for ECDH Key Agreement
  contents:
  - "4.6.1.  Header Parameters Used for ECDH Key Agreement\n   The following Header\
    \ Parameter names are used for key agreement as\n   defined below.\n"
- title: 4.6.1.1.  "epk" (Ephemeral Public Key) Header Parameter
  contents:
  - "4.6.1.1.  \"epk\" (Ephemeral Public Key) Header Parameter\n   The \"epk\" (ephemeral\
    \ public key) value created by the originator for\n   the use in key agreement\
    \ algorithms.  This key is represented as a\n   JSON Web Key [JWK] public key\
    \ value.  It MUST contain only public key\n   parameters and SHOULD contain only\
    \ the minimum JWK parameters\n   necessary to represent the key; other JWK parameters\
    \ included can be\n   checked for consistency and honored, or they can be ignored.\
    \  This\n   Header Parameter MUST be present and MUST be understood and processed\n\
    \   by implementations when these algorithms are used.\n"
- title: 4.6.1.2.  "apu" (Agreement PartyUInfo) Header Parameter
  contents:
  - "4.6.1.2.  \"apu\" (Agreement PartyUInfo) Header Parameter\n   The \"apu\" (agreement\
    \ PartyUInfo) value for key agreement algorithms\n   using it (such as \"ECDH-ES\"\
    ), represented as a base64url-encoded\n   string.  When used, the PartyUInfo value\
    \ contains information about\n   the producer.  Use of this Header Parameter is\
    \ OPTIONAL.  This Header\n   Parameter MUST be understood and processed by implementations\
    \ when\n   these algorithms are used.\n"
- title: 4.6.1.3.  "apv" (Agreement PartyVInfo) Header Parameter
  contents:
  - "4.6.1.3.  \"apv\" (Agreement PartyVInfo) Header Parameter\n   The \"apv\" (agreement\
    \ PartyVInfo) value for key agreement algorithms\n   using it (such as \"ECDH-ES\"\
    ), represented as a base64url encoded\n   string.  When used, the PartyVInfo value\
    \ contains information about\n   the recipient.  Use of this Header Parameter\
    \ is OPTIONAL.  This\n   Header Parameter MUST be understood and processed by\
    \ implementations\n   when these algorithms are used.\n"
- title: 4.6.2.  Key Derivation for ECDH Key Agreement
  contents:
  - "4.6.2.  Key Derivation for ECDH Key Agreement\n   The key derivation process\
    \ derives the agreed-upon key from the\n   shared secret Z established through\
    \ the ECDH algorithm, per\n   Section 6.2.2.2 of [NIST.800-56A].\n   Key derivation\
    \ is performed using the Concat KDF, as defined in\n   Section 5.8.1 of [NIST.800-56A],\
    \ where the Digest Method is SHA-256.\n   The Concat KDF parameters are set as\
    \ follows:\n   Z\n      This is set to the representation of the shared secret\
    \ Z as an\n      octet sequence.\n   keydatalen\n      This is set to the number\
    \ of bits in the desired output key.  For\n      \"ECDH-ES\", this is length of\
    \ the key used by the \"enc\" algorithm.\n      For \"ECDH-ES+A128KW\", \"ECDH-ES+A192KW\"\
    , and \"ECDH-ES+A256KW\", this\n      is 128, 192, and 256, respectively.\n  \
    \ AlgorithmID\n      The AlgorithmID value is of the form Datalen || Data, where\
    \ Data\n      is a variable-length string of zero or more octets, and Datalen\
    \ is\n      a fixed-length, big-endian 32-bit counter that indicates the\n   \
    \   length (in octets) of Data.  In the Direct Key Agreement case,\n      Data\
    \ is set to the octets of the ASCII representation of the \"enc\"\n      Header\
    \ Parameter value.  In the Key Agreement with Key Wrapping\n      case, Data is\
    \ set to the octets of the ASCII representation of the\n      \"alg\" (algorithm)\
    \ Header Parameter value.\n   PartyUInfo\n      The PartyUInfo value is of the\
    \ form Datalen || Data, where Data is\n      a variable-length string of zero\
    \ or more octets, and Datalen is a\n      fixed-length, big-endian 32-bit counter\
    \ that indicates the length\n      (in octets) of Data.  If an \"apu\" (agreement\
    \ PartyUInfo) Header\n      Parameter is present, Data is set to the result of\
    \ base64url\n      decoding the \"apu\" value and Datalen is set to the number\
    \ of\n      octets in Data.  Otherwise, Datalen is set to 0 and Data is set to\n\
    \      the empty octet sequence.\n   PartyVInfo\n      The PartyVInfo value is\
    \ of the form Datalen || Data, where Data is\n      a variable-length string of\
    \ zero or more octets, and Datalen is a\n      fixed-length, big-endian 32-bit\
    \ counter that indicates the length\n      (in octets) of Data.  If an \"apv\"\
    \ (agreement PartyVInfo) Header\n      Parameter is present, Data is set to the\
    \ result of base64url\n      decoding the \"apv\" value and Datalen is set to\
    \ the number of\n      octets in Data.  Otherwise, Datalen is set to 0 and Data\
    \ is set to\n      the empty octet sequence.\n   SuppPubInfo\n      This is set\
    \ to the keydatalen represented as a 32-bit big-endian\n      integer.\n   SuppPrivInfo\n\
    \      This is set to the empty octet sequence.\n   Applications need to specify\
    \ how the \"apu\" and \"apv\" Header\n   Parameters are used for that application.\
    \  The \"apu\" and \"apv\" values\n   MUST be distinct, when used.  Applications\
    \ wishing to conform to\n   [NIST.800-56A] need to provide values that meet the\
    \ requirements of\n   that document, e.g., by using values that identify the producer\
    \ and\n   consumer.  Alternatively, applications MAY conduct key derivation in\n\
    \   a manner similar to \"Diffie-Hellman Key Agreement Method\" [RFC2631]:\n \
    \  in that case, the \"apu\" parameter MAY either be omitted or represent\n  \
    \ a random 512-bit value (analogous to PartyAInfo in Ephemeral-Static\n   mode\
    \ in RFC 2631) and the \"apv\" parameter SHOULD NOT be present.\n   See Appendix\
    \ C for an example key agreement computation using this\n   method.\n"
- title: 4.7.  Key Encryption with AES GCM
  contents:
  - "4.7.  Key Encryption with AES GCM\n   This section defines the specifics of encrypting\
    \ a JWE Content\n   Encryption Key (CEK) with Advanced Encryption Standard (AES)\
    \ in\n   Galois/Counter Mode (GCM) ([AES] and [NIST.800-38D]).\n   Use of an Initialization\
    \ Vector (IV) of size 96 bits is REQUIRED with\n   this algorithm.  The IV is\
    \ represented in base64url-encoded form as\n   the \"iv\" (initialization vector)\
    \ Header Parameter value.\n   The Additional Authenticated Data value used is\
    \ the empty octet\n   string.\n   The requested size of the Authentication Tag\
    \ output MUST be 128 bits,\n   regardless of the key size.\n   The JWE Encrypted\
    \ Key value is the ciphertext output.\n   The Authentication Tag output is represented\
    \ in base64url-encoded\n   form as the \"tag\" (authentication tag) Header Parameter\
    \ value.\n   The following \"alg\" (algorithm) Header Parameter values are used\
    \ to\n   indicate that the JWE Encrypted Key is the result of encrypting the\n\
    \   CEK using the corresponding algorithm and key size:\n    +-------------------+---------------------------------------------+\n\
    \    | \"alg\" Param Value | Key Management Algorithm                    |\n \
    \   +-------------------+---------------------------------------------+\n    |\
    \ A128GCMKW         | Key wrapping with AES GCM using 128-bit key |\n    | A192GCMKW\
    \         | Key wrapping with AES GCM using 192-bit key |\n    | A256GCMKW   \
    \      | Key wrapping with AES GCM using 256-bit key |\n    +-------------------+---------------------------------------------+\n"
- title: 4.7.1.  Header Parameters Used for AES GCM Key Encryption
  contents:
  - "4.7.1.  Header Parameters Used for AES GCM Key Encryption\n   The following Header\
    \ Parameters are used for AES GCM key encryption.\n"
- title: 4.7.1.1.  "iv" (Initialization Vector) Header Parameter
  contents:
  - "4.7.1.1.  \"iv\" (Initialization Vector) Header Parameter\n   The \"iv\" (initialization\
    \ vector) Header Parameter value is the\n   base64url-encoded representation of\
    \ the 96-bit IV value used for the\n   key encryption operation.  This Header\
    \ Parameter MUST be present and\n   MUST be understood and processed by implementations\
    \ when these\n   algorithms are used.\n"
- title: 4.7.1.2.  "tag" (Authentication Tag) Header Parameter
  contents:
  - "4.7.1.2.  \"tag\" (Authentication Tag) Header Parameter\n   The \"tag\" (authentication\
    \ tag) Header Parameter value is the\n   base64url-encoded representation of the\
    \ 128-bit Authentication Tag\n   value resulting from the key encryption operation.\
    \  This Header\n   Parameter MUST be present and MUST be understood and processed\
    \ by\n   implementations when these algorithms are used.\n"
- title: 4.8.  Key Encryption with PBES2
  contents:
  - "4.8.  Key Encryption with PBES2\n   This section defines the specifics of performing\
    \ password-based\n   encryption of a JWE CEK, by first deriving a key encryption\
    \ key from\n   a user-supplied password using PBES2 schemes as specified in\n\
    \   Section 6.2 of [RFC2898], then by encrypting the JWE CEK using the\n   derived\
    \ key.\n   These algorithms use HMAC SHA-2 algorithms as the Pseudorandom\n  \
    \ Function (PRF) for the PBKDF2 key derivation and AES Key Wrap\n   [RFC3394]\
    \ for the encryption scheme.  The PBES2 password input is an\n   octet sequence;\
    \ if the password to be used is represented as a text\n   string rather than an\
    \ octet sequence, the UTF-8 encoding of the text\n   string MUST be used as the\
    \ octet sequence.  The salt parameter MUST\n   be computed from the \"p2s\" (PBES2\
    \ salt input) Header Parameter value\n   and the \"alg\" (algorithm) Header Parameter\
    \ value as specified in the\n   \"p2s\" definition below.  The iteration count\
    \ parameter MUST be\n   provided as the \"p2c\" (PBES2 count) Header Parameter\
    \ value.  The\n   algorithms respectively use HMAC SHA-256, HMAC SHA-384, and\
    \ HMAC\n   SHA-512 as the PRF and use 128-, 192-, and 256-bit AES Key Wrap keys.\n\
    \   Their derived-key lengths respectively are 16, 24, and 32 octets.\n   The\
    \ following \"alg\" (algorithm) Header Parameter values are used to\n   indicate\
    \ that the JWE Encrypted Key is the result of encrypting the\n   CEK using the\
    \ result of the corresponding password-based encryption\n   algorithm as the key\
    \ encryption key for the corresponding key\n   wrapping algorithm:\n   +--------------------+----------------------------------------------+\n\
    \   | \"alg\" Param Value  | Key Management Algorithm                     |\n\
    \   +--------------------+----------------------------------------------+\n  \
    \ | PBES2-HS256+A128KW | PBES2 with HMAC SHA-256 and \"A128KW\"         |\n  \
    \ |                    | wrapping                                     |\n   |\
    \ PBES2-HS384+A192KW | PBES2 with HMAC SHA-384 and \"A192KW\"         |\n   |\
    \                    | wrapping                                     |\n   | PBES2-HS512+A256KW\
    \ | PBES2 with HMAC SHA-512 and \"A256KW\"         |\n   |                   \
    \ | wrapping                                     |\n   +--------------------+----------------------------------------------+\n\
    \   See Appendix C of the JWK specification [JWK] for an example key\n   encryption\
    \ computation using \"PBES2-HS256+A128KW\".\n"
- title: 4.8.1.  Header Parameters Used for PBES2 Key Encryption
  contents:
  - "4.8.1.  Header Parameters Used for PBES2 Key Encryption\n   The following Header\
    \ Parameters are used for Key Encryption with\n   PBES2.\n"
- title: 4.8.1.1.  "p2s" (PBES2 Salt Input) Header Parameter
  contents:
  - "4.8.1.1.  \"p2s\" (PBES2 Salt Input) Header Parameter\n   The \"p2s\" (PBES2\
    \ salt input) Header Parameter encodes a Salt Input\n   value, which is used as\
    \ part of the PBKDF2 salt value.  The \"p2s\"\n   value is BASE64URL(Salt Input).\
    \  This Header Parameter MUST be\n   present and MUST be understood and processed\
    \ by implementations when\n   these algorithms are used.\n   The salt expands\
    \ the possible keys that can be derived from a given\n   password.  A Salt Input\
    \ value containing 8 or more octets MUST be\n   used.  A new Salt Input value\
    \ MUST be generated randomly for every\n   encryption operation; see RFC 4086\
    \ [RFC4086] for considerations on\n   generating random values.  The salt value\
    \ used is (UTF8(Alg) || 0x00\n   || Salt Input), where Alg is the \"alg\" (algorithm)\
    \ Header Parameter\n   value.\n"
- title: 4.8.1.2.  "p2c" (PBES2 Count) Header Parameter
  contents:
  - "4.8.1.2.  \"p2c\" (PBES2 Count) Header Parameter\n   The \"p2c\" (PBES2 count)\
    \ Header Parameter contains the PBKDF2\n   iteration count, represented as a positive\
    \ JSON integer.  This Header\n   Parameter MUST be present and MUST be understood\
    \ and processed by\n   implementations when these algorithms are used.\n   The\
    \ iteration count adds computational expense, ideally compounded by\n   the possible\
    \ range of keys introduced by the salt.  A minimum\n   iteration count of 1000\
    \ is RECOMMENDED.\n"
- title: 5.  Cryptographic Algorithms for Content Encryption
  contents:
  - "5.  Cryptographic Algorithms for Content Encryption\n   JWE uses cryptographic\
    \ algorithms to encrypt and integrity-protect\n   the plaintext and to integrity-protect\
    \ the Additional Authenticated\n   Data.\n"
- title: 5.1.  "enc" (Encryption Algorithm) Header Parameter Values for JWE
  contents:
  - "5.1.  \"enc\" (Encryption Algorithm) Header Parameter Values for JWE\n   The\
    \ table below is the set of \"enc\" (encryption algorithm) Header\n   Parameter\
    \ values that are defined by this specification for use with\n   JWE.\n   +---------------+----------------------------------+----------------+\n\
    \   | \"enc\" Param   | Content Encryption Algorithm     | Implementation |\n\
    \   | Value         |                                  | Requirements   |\n  \
    \ +---------------+----------------------------------+----------------+\n   |\
    \ A128CBC-HS256 | AES_128_CBC_HMAC_SHA_256         | Required       |\n   |  \
    \             | authenticated encryption         |                |\n   |    \
    \           | algorithm, as defined in Section |                |\n   |      \
    \         | 5.2.3                            |                |\n   | A192CBC-HS384\
    \ | AES_192_CBC_HMAC_SHA_384         | Optional       |\n   |               |\
    \ authenticated encryption         |                |\n   |               | algorithm,\
    \ as defined in Section |                |\n   |               | 5.2.4       \
    \                     |                |\n   | A256CBC-HS512 | AES_256_CBC_HMAC_SHA_512\
    \         | Required       |\n   |               | authenticated encryption  \
    \       |                |\n   |               | algorithm, as defined in Section\
    \ |                |\n   |               | 5.2.5                            |\
    \                |\n   | A128GCM       | AES GCM using 128-bit key        | Recommended\
    \    |\n   | A192GCM       | AES GCM using 192-bit key        | Optional     \
    \  |\n   | A256GCM       | AES GCM using 256-bit key        | Recommended    |\n\
    \   +---------------+----------------------------------+----------------+\n  \
    \ All also use a JWE Initialization Vector value and produce JWE\n   Ciphertext\
    \ and JWE Authentication Tag values.\n   See Appendix A.3 for a table cross-referencing\
    \ the JWE \"enc\"\n   (encryption algorithm) values defined in this specification\
    \ with the\n   equivalent identifiers used by other standards and software packages.\n"
- title: 5.2.  AES_CBC_HMAC_SHA2 Algorithms
  contents:
  - "5.2.  AES_CBC_HMAC_SHA2 Algorithms\n   This section defines a family of authenticated\
    \ encryption algorithms\n   built using a composition of AES [AES] in Cipher Block\
    \ Chaining (CBC)\n   mode [NIST.800-38A] with PKCS #7 padding operations per Section\
    \ 6.3\n   of [RFC5652] and HMAC ([RFC2104] and [SHS]) operations.  This\n   algorithm\
    \ family is called AES_CBC_HMAC_SHA2.  It also defines three\n   instances of\
    \ this family: the first using 128-bit CBC keys and HMAC\n   SHA-256, the second\
    \ using 192-bit CBC keys and HMAC SHA-384, and the\n   third using 256-bit CBC\
    \ keys and HMAC SHA-512.  Test cases for these\n   algorithms can be found in\
    \ Appendix B.\n   These algorithms are based upon \"Authenticated Encryption with\
    \ AES-\n   CBC and HMAC-SHA\" [AEAD-CBC-SHA], performing the same cryptographic\n\
    \   computations, but with the Initialization Vector (IV) and\n   Authentication\
    \ Tag values remaining separate, rather than being\n   concatenated with the ciphertext\
    \ value in the output representation.\n   This option is discussed in Appendix\
    \ B of that specification.  This\n   algorithm family is a generalization of the\
    \ algorithm family in\n   [AEAD-CBC-SHA] and can be used to implement those algorithms.\n"
- title: 5.2.1.  Conventions Used in Defining AES_CBC_HMAC_SHA2
  contents:
  - "5.2.1.  Conventions Used in Defining AES_CBC_HMAC_SHA2\n   We use the following\
    \ notational conventions.\n      CBC-PKCS7-ENC(X, P) denotes the AES-CBC encryption\
    \ of P using PKCS\n      #7 padding utilizing the cipher with the key X.\n   \
    \   MAC(Y, M) denotes the application of the MAC to the message M\n      using\
    \ the key Y.\n"
- title: 5.2.2.  Generic AES_CBC_HMAC_SHA2 Algorithm
  contents:
  - "5.2.2.  Generic AES_CBC_HMAC_SHA2 Algorithm\n   This section defines AES_CBC_HMAC_SHA2\
    \ in a manner that is\n   independent of the AES-CBC key size or hash function\
    \ to be used.\n   Sections 5.2.2.1 and 5.2.2.2 define the generic encryption and\n\
    \   decryption algorithms.  Sections 5.2.3 through 5.2.5 define instances\n  \
    \ of AES_CBC_HMAC_SHA2 that specify those details.\n"
- title: 5.2.2.1.  AES_CBC_HMAC_SHA2 Encryption
  contents:
  - "5.2.2.1.  AES_CBC_HMAC_SHA2 Encryption\n   The authenticated encryption algorithm\
    \ takes as input four octet\n   strings: a secret key K, a plaintext P, Additional\
    \ Authenticated Data\n   A, and an Initialization Vector IV.  The authenticated\
    \ ciphertext\n   value E and the Authentication Tag value T are provided as outputs.\n\
    \   The data in the plaintext are encrypted and authenticated, and the\n   Additional\
    \ Authenticated Data are authenticated, but not encrypted.\n   The encryption\
    \ process is as follows, or uses an equivalent set of\n   steps:\n   1.  The secondary\
    \ keys MAC_KEY and ENC_KEY are generated from the\n       input key K as follows.\
    \  Each of these two keys is an octet\n       string.\n          MAC_KEY consists\
    \ of the initial MAC_KEY_LEN octets of K, in\n          order.\n          ENC_KEY\
    \ consists of the final ENC_KEY_LEN octets of K, in\n          order.\n      \
    \ The number of octets in the input key K MUST be the sum of\n       MAC_KEY_LEN\
    \ and ENC_KEY_LEN.  The values of these parameters are\n       specified by the\
    \ Authenticated Encryption algorithms in Sections\n       5.2.3 through 5.2.5.\
    \  Note that the MAC key comes before the\n       encryption key in the input\
    \ key K; this is in the opposite order\n       of the algorithm names in the identifier\
    \ \"AES_CBC_HMAC_SHA2\".\n   2.  The IV used is a 128-bit value generated randomly\
    \ or\n       pseudorandomly for use in the cipher.\n   3.  The plaintext is CBC\
    \ encrypted using PKCS #7 padding using\n       ENC_KEY as the key and the IV.\
    \  We denote the ciphertext output\n       from this step as E.\n   4.  The octet\
    \ string AL is equal to the number of bits in the\n       Additional Authenticated\
    \ Data A expressed as a 64-bit unsigned\n       big-endian integer.\n   5.  A\
    \ message Authentication Tag T is computed by applying HMAC\n       [RFC2104]\
    \ to the following data, in order:\n          the Additional Authenticated Data\
    \ A,\n          the Initialization Vector IV,\n          the ciphertext E computed\
    \ in the previous step, and\n          the octet string AL defined above.\n  \
    \     The string MAC_KEY is used as the MAC key.  We denote the output\n     \
    \  of the MAC computed in this step as M.  The first T_LEN octets of\n       M\
    \ are used as T.\n   6.  The ciphertext E and the Authentication Tag T are returned\
    \ as the\n       outputs of the authenticated encryption.\n   The encryption process\
    \ can be illustrated as follows.  Here K, P, A,\n   IV, and E denote the key,\
    \ plaintext, Additional Authenticated Data,\n   Initialization Vector, and ciphertext,\
    \ respectively.\n      MAC_KEY = initial MAC_KEY_LEN octets of K,\n      ENC_KEY\
    \ = final ENC_KEY_LEN octets of K,\n      E = CBC-PKCS7-ENC(ENC_KEY, P),\n   \
    \   M = MAC(MAC_KEY, A || IV || E || AL),\n      T = initial T_LEN octets of M.\n"
- title: 5.2.2.2.  AES_CBC_HMAC_SHA2 Decryption
  contents:
  - "5.2.2.2.  AES_CBC_HMAC_SHA2 Decryption\n   The authenticated decryption operation\
    \ has five inputs: K, A, IV, E,\n   and T as defined above.  It has only a single\
    \ output: either a\n   plaintext value P or a special symbol FAIL that indicates\
    \ that the\n   inputs are not authentic.  The authenticated decryption algorithm\
    \ is\n   as follows, or uses an equivalent set of steps:\n   1.  The secondary\
    \ keys MAC_KEY and ENC_KEY are generated from the\n       input key K as in Step\
    \ 1 of Section 5.2.2.1.\n   2.  The integrity and authenticity of A and E are\
    \ checked by\n       computing an HMAC with the inputs as in Step 5 of\n     \
    \  Section 5.2.2.1.  The value T, from the previous step, is\n       compared\
    \ to the first MAC_KEY length bits of the HMAC output.  If\n       those values\
    \ are identical, then A and E are considered valid,\n       and processing is\
    \ continued.  Otherwise, all of the data used in\n       the MAC validation are\
    \ discarded, and the authenticated\n       decryption operation returns an indication\
    \ that it failed, and\n       the operation halts.  (But see Section 11.5 of [JWE]\
    \ for security\n       considerations on thwarting timing attacks.)\n   3.  The\
    \ value E is decrypted and the PKCS #7 padding is checked and\n       removed.\
    \  The value IV is used as the Initialization Vector.  The\n       value ENC_KEY\
    \ is used as the decryption key.\n   4.  The plaintext value is returned.\n"
- title: 5.2.3.  AES_128_CBC_HMAC_SHA_256
  contents:
  - "5.2.3.  AES_128_CBC_HMAC_SHA_256\n   This algorithm is a concrete instantiation\
    \ of the generic\n   AES_CBC_HMAC_SHA2 algorithm above.  It uses the HMAC message\n\
    \   authentication code [RFC2104] with the SHA-256 hash function [SHS] to\n  \
    \ provide message authentication, with the HMAC output truncated to 128\n   bits,\
    \ corresponding to the HMAC-SHA-256-128 algorithm defined in\n   [RFC4868].  For\
    \ encryption, it uses AES in the CBC mode of operation\n   as defined in Section\
    \ 6.2 of [NIST.800-38A], with PKCS #7 padding and\n   a 128-bit IV value.\n  \
    \ The AES_CBC_HMAC_SHA2 parameters specific to AES_128_CBC_HMAC_SHA_256\n   are:\n\
    \      The input key K is 32 octets long.\n      ENC_KEY_LEN is 16 octets.\n \
    \     MAC_KEY_LEN is 16 octets.\n      The SHA-256 hash algorithm is used for\
    \ the HMAC.\n      The HMAC-SHA-256 output is truncated to T_LEN=16 octets, by\n\
    \      stripping off the final 16 octets.\n"
- title: 5.2.4.  AES_192_CBC_HMAC_SHA_384
  contents:
  - "5.2.4.  AES_192_CBC_HMAC_SHA_384\n   AES_192_CBC_HMAC_SHA_384 is based on AES_128_CBC_HMAC_SHA_256,\
    \ but\n   with the following differences:\n      The input key K is 48 octets\
    \ long instead of 32.\n      ENC_KEY_LEN is 24 octets instead of 16.\n      MAC_KEY_LEN\
    \ is 24 octets instead of 16.\n      SHA-384 is used for the HMAC instead of SHA-256.\n\
    \      The HMAC SHA-384 value is truncated to T_LEN=24 octets instead of\n   \
    \   16.\n"
- title: 5.2.5.  AES_256_CBC_HMAC_SHA_512
  contents:
  - "5.2.5.  AES_256_CBC_HMAC_SHA_512\n   AES_256_CBC_HMAC_SHA_512 is based on AES_128_CBC_HMAC_SHA_256,\
    \ but\n   with the following differences:\n      The input key K is 64 octets\
    \ long instead of 32.\n      ENC_KEY_LEN is 32 octets instead of 16.\n      MAC_KEY_LEN\
    \ is 32 octets instead of 16.\n      SHA-512 is used for the HMAC instead of SHA-256.\n\
    \      The HMAC SHA-512 value is truncated to T_LEN=32 octets instead of\n   \
    \   16.\n"
- title: 5.2.6.  Content Encryption with AES_CBC_HMAC_SHA2
  contents:
  - "5.2.6.  Content Encryption with AES_CBC_HMAC_SHA2\n   This section defines the\
    \ specifics of performing authenticated\n   encryption with the AES_CBC_HMAC_SHA2\
    \ algorithms.\n   The CEK is used as the secret key K.\n   The following \"enc\"\
    \ (encryption algorithm) Header Parameter values\n   are used to indicate that\
    \ the JWE Ciphertext and JWE Authentication\n   Tag values have been computed\
    \ using the corresponding algorithm:\n   +---------------+---------------------------------------------------+\n\
    \   | \"enc\" Param   | Content Encryption Algorithm                      |\n\
    \   | Value         |                                                   |\n  \
    \ +---------------+---------------------------------------------------+\n   |\
    \ A128CBC-HS256 | AES_128_CBC_HMAC_SHA_256 authenticated encryption |\n   |  \
    \             | algorithm, as defined in Section 5.2.3            |\n   | A192CBC-HS384\
    \ | AES_192_CBC_HMAC_SHA_384 authenticated encryption |\n   |               |\
    \ algorithm, as defined in Section 5.2.4            |\n   | A256CBC-HS512 | AES_256_CBC_HMAC_SHA_512\
    \ authenticated encryption |\n   |               | algorithm, as defined in Section\
    \ 5.2.5            |\n   +---------------+---------------------------------------------------+\n"
- title: 5.3.  Content Encryption with AES GCM
  contents:
  - "5.3.  Content Encryption with AES GCM\n   This section defines the specifics\
    \ of performing authenticated\n   encryption with AES in Galois/Counter Mode (GCM)\
    \ ([AES] and\n   [NIST.800-38D]).\n   The CEK is used as the encryption key.\n\
    \   Use of an IV of size 96 bits is REQUIRED with this algorithm.\n   The requested\
    \ size of the Authentication Tag output MUST be 128 bits,\n   regardless of the\
    \ key size.\n   The following \"enc\" (encryption algorithm) Header Parameter\
    \ values\n   are used to indicate that the JWE Ciphertext and JWE Authentication\n\
    \   Tag values have been computed using the corresponding algorithm and\n   key\
    \ size:\n           +-------------------+------------------------------+\n   \
    \        | \"enc\" Param Value | Content Encryption Algorithm |\n           +-------------------+------------------------------+\n\
    \           | A128GCM           | AES GCM using 128-bit key    |\n           |\
    \ A192GCM           | AES GCM using 192-bit key    |\n           | A256GCM   \
    \        | AES GCM using 256-bit key    |\n           +-------------------+------------------------------+\n\
    \   An example using this algorithm is shown in Appendix A.1 of [JWE].\n"
- title: 6.  Cryptographic Algorithms for Keys
  contents:
  - "6.  Cryptographic Algorithms for Keys\n   A JSON Web Key (JWK) [JWK] is a JSON\
    \ data structure that represents a\n   cryptographic key.  These keys can be either\
    \ asymmetric or symmetric.\n   They can hold both public and private information\
    \ about the key.\n   This section defines the parameters for keys using the algorithms\n\
    \   specified by this document.\n"
- title: 6.1.  "kty" (Key Type) Parameter Values
  contents:
  - "6.1.  \"kty\" (Key Type) Parameter Values\n   The table below is the set of \"\
    kty\" (key type) parameter values that\n   are defined by this specification for\
    \ use in JWKs.\n   +-------------+--------------------------------+--------------------+\n\
    \   | \"kty\" Param | Key Type                       | Implementation     |\n\
    \   | Value       |                                | Requirements       |\n  \
    \ +-------------+--------------------------------+--------------------+\n   |\
    \ EC          | Elliptic Curve [DSS]           | Recommended+       |\n   | RSA\
    \         | RSA [RFC3447]                  | Required           |\n   | oct  \
    \       | Octet sequence (used to        | Required           |\n   |        \
    \     | represent symmetric keys)      |                    |\n   +-------------+--------------------------------+--------------------+\n\
    \   The use of \"+\" in the Implementation Requirements column indicates\n   that\
    \ the requirement strength is likely to be increased in a future\n   version of\
    \ the specification.\n"
- title: 6.2.  Parameters for Elliptic Curve Keys
  contents:
  - "6.2.  Parameters for Elliptic Curve Keys\n   JWKs can represent Elliptic Curve\
    \ [DSS] keys.  In this case, the\n   \"kty\" member value is \"EC\".\n"
- title: 6.2.1.  Parameters for Elliptic Curve Public Keys
  contents:
  - "6.2.1.  Parameters for Elliptic Curve Public Keys\n   An Elliptic Curve public\
    \ key is represented by a pair of coordinates\n   drawn from a finite field, which\
    \ together define a point on an\n   Elliptic Curve.  The following members MUST\
    \ be present for all\n   Elliptic Curve public keys:\n   o  \"crv\"\n   o  \"\
    x\"\n   The following member MUST also be present for Elliptic Curve public\n\
    \   keys for the three curves defined in the following section:\n   o  \"y\"\n"
- title: 6.2.1.1.  "crv" (Curve) Parameter
  contents:
  - "6.2.1.1.  \"crv\" (Curve) Parameter\n   The \"crv\" (curve) parameter identifies\
    \ the cryptographic curve used\n   with the key.  Curve values from [DSS] used\
    \ by this specification\n   are:\n   o  \"P-256\"\n   o  \"P-384\"\n   o  \"P-521\"\
    \n   These values are registered in the IANA \"JSON Web Key Elliptic Curve\"\n\
    \   registry defined in Section 7.6.  Additional \"crv\" values can be\n   registered\
    \ by other specifications.  Specifications registering\n   additional curves must\
    \ define what parameters are used to represent\n   keys for the curves registered.\
    \  The \"crv\" value is a case-sensitive\n   string.\n   SEC1 [SEC1] point compression\
    \ is not supported for any of these three\n   curves.\n"
- title: 6.2.1.2.  "x" (X Coordinate) Parameter
  contents:
  - "6.2.1.2.  \"x\" (X Coordinate) Parameter\n   The \"x\" (x coordinate) parameter\
    \ contains the x coordinate for the\n   Elliptic Curve point.  It is represented\
    \ as the base64url encoding of\n   the octet string representation of the coordinate,\
    \ as defined in\n   Section 2.3.5 of SEC1 [SEC1].  The length of this octet string\
    \ MUST\n   be the full size of a coordinate for the curve specified in the \"\
    crv\"\n   parameter.  For example, if the value of \"crv\" is \"P-521\", the octet\n\
    \   string must be 66 octets long.\n"
- title: 6.2.1.3.  "y" (Y Coordinate) Parameter
  contents:
  - "6.2.1.3.  \"y\" (Y Coordinate) Parameter\n   The \"y\" (y coordinate) parameter\
    \ contains the y coordinate for the\n   Elliptic Curve point.  It is represented\
    \ as the base64url encoding of\n   the octet string representation of the coordinate,\
    \ as defined in\n   Section 2.3.5 of SEC1 [SEC1].  The length of this octet string\
    \ MUST\n   be the full size of a coordinate for the curve specified in the \"\
    crv\"\n   parameter.  For example, if the value of \"crv\" is \"P-521\", the octet\n\
    \   string must be 66 octets long.\n"
- title: 6.2.2.  Parameters for Elliptic Curve Private Keys
  contents:
  - "6.2.2.  Parameters for Elliptic Curve Private Keys\n   In addition to the members\
    \ used to represent Elliptic Curve public\n   keys, the following member MUST\
    \ be present to represent Elliptic\n   Curve private keys.\n"
- title: 6.2.2.1.  "d" (ECC Private Key) Parameter
  contents:
  - "6.2.2.1.  \"d\" (ECC Private Key) Parameter\n   The \"d\" (ECC private key) parameter\
    \ contains the Elliptic Curve\n   private key value.  It is represented as the\
    \ base64url encoding of\n   the octet string representation of the private key\
    \ value, as defined\n   in Section 2.3.7 of SEC1 [SEC1].  The length of this octet\
    \ string\n   MUST be ceiling(log-base-2(n)/8) octets (where n is the order of\
    \ the\n   curve).\n"
- title: 6.3.  Parameters for RSA Keys
  contents:
  - "6.3.  Parameters for RSA Keys\n   JWKs can represent RSA [RFC3447] keys.  In\
    \ this case, the \"kty\"\n   member value is \"RSA\".  The semantics of the parameters\
    \ defined below\n   are the same as those defined in Sections 3.1 and 3.2 of RFC\
    \ 3447.\n"
- title: 6.3.1.  Parameters for RSA Public Keys
  contents:
  - "6.3.1.  Parameters for RSA Public Keys\n   The following members MUST be present\
    \ for RSA public keys.\n"
- title: 6.3.1.1.  "n" (Modulus) Parameter
  contents:
  - "6.3.1.1.  \"n\" (Modulus) Parameter\n   The \"n\" (modulus) parameter contains\
    \ the modulus value for the RSA\n   public key.  It is represented as a Base64urlUInt-encoded\
    \ value.\n   Note that implementers have found that some cryptographic libraries\n\
    \   prefix an extra zero-valued octet to the modulus representations they\n  \
    \ return, for instance, returning 257 octets for a 2048-bit key, rather\n   than\
    \ 256.  Implementations using such libraries will need to take\n   care to omit\
    \ the extra octet from the base64url-encoded\n   representation.\n"
- title: 6.3.1.2.  "e" (Exponent) Parameter
  contents:
  - "6.3.1.2.  \"e\" (Exponent) Parameter\n   The \"e\" (exponent) parameter contains\
    \ the exponent value for the RSA\n   public key.  It is represented as a Base64urlUInt-encoded\
    \ value.\n   For instance, when representing the value 65537, the octet sequence\n\
    \   to be base64url-encoded MUST consist of the three octets [1, 0, 1];\n   the\
    \ resulting representation for this value is \"AQAB\".\n"
- title: 6.3.2.  Parameters for RSA Private Keys
  contents:
  - "6.3.2.  Parameters for RSA Private Keys\n   In addition to the members used to\
    \ represent RSA public keys, the\n   following members are used to represent RSA\
    \ private keys.  The\n   parameter \"d\" is REQUIRED for RSA private keys.  The\
    \ others enable\n   optimizations and SHOULD be included by producers of JWKs\n\
    \   representing RSA private keys.  If the producer includes any of the\n   other\
    \ private key parameters, then all of the others MUST be present,\n   with the\
    \ exception of \"oth\", which MUST only be present when more\n   than two prime\
    \ factors were used.\n"
- title: 6.3.2.1.  "d" (Private Exponent) Parameter
  contents:
  - "6.3.2.1.  \"d\" (Private Exponent) Parameter\n   The \"d\" (private exponent)\
    \ parameter contains the private exponent\n   value for the RSA private key. \
    \ It is represented as a Base64urlUInt-\n   encoded value.\n"
- title: 6.3.2.2.  "p" (First Prime Factor) Parameter
  contents:
  - "6.3.2.2.  \"p\" (First Prime Factor) Parameter\n   The \"p\" (first prime factor)\
    \ parameter contains the first prime\n   factor.  It is represented as a Base64urlUInt-encoded\
    \ value.\n"
- title: 6.3.2.3.  "q" (Second Prime Factor) Parameter
  contents:
  - "6.3.2.3.  \"q\" (Second Prime Factor) Parameter\n   The \"q\" (second prime factor)\
    \ parameter contains the second prime\n   factor.  It is represented as a Base64urlUInt-encoded\
    \ value.\n"
- title: 6.3.2.4.  "dp" (First Factor CRT Exponent) Parameter
  contents:
  - "6.3.2.4.  \"dp\" (First Factor CRT Exponent) Parameter\n   The \"dp\" (first\
    \ factor CRT exponent) parameter contains the Chinese\n   Remainder Theorem (CRT)\
    \ exponent of the first factor.  It is\n   represented as a Base64urlUInt-encoded\
    \ value.\n"
- title: 6.3.2.5.  "dq" (Second Factor CRT Exponent) Parameter
  contents:
  - "6.3.2.5.  \"dq\" (Second Factor CRT Exponent) Parameter\n   The \"dq\" (second\
    \ factor CRT exponent) parameter contains the CRT\n   exponent of the second factor.\
    \  It is represented as a Base64urlUInt-\n   encoded value.\n"
- title: 6.3.2.6.  "qi" (First CRT Coefficient) Parameter
  contents:
  - "6.3.2.6.  \"qi\" (First CRT Coefficient) Parameter\n   The \"qi\" (first CRT\
    \ coefficient) parameter contains the CRT\n   coefficient of the second factor.\
    \  It is represented as a\n   Base64urlUInt-encoded value.\n"
- title: 6.3.2.7.  "oth" (Other Primes Info) Parameter
  contents:
  - "6.3.2.7.  \"oth\" (Other Primes Info) Parameter\n   The \"oth\" (other primes\
    \ info) parameter contains an array of\n   information about any third and subsequent\
    \ primes, should they exist.\n   When only two primes have been used (the normal\
    \ case), this parameter\n   MUST be omitted.  When three or more primes have been\
    \ used, the\n   number of array elements MUST be the number of primes used minus\
    \ two.\n   For more information on this case, see the description of the\n   OtherPrimeInfo\
    \ parameters in Appendix A.1.2 of RFC 3447 [RFC3447],\n   upon which the following\
    \ parameters are modeled.  If the consumer of\n   a JWK does not support private\
    \ keys with more than two primes and it\n   encounters a private key that includes\
    \ the \"oth\" parameter, then it\n   MUST NOT use the key.  Each array element\
    \ MUST be an object with the\n   following members.\n"
- title: 6.3.2.7.1.  "r" (Prime Factor)
  contents:
  - "6.3.2.7.1.  \"r\" (Prime Factor)\n   The \"r\" (prime factor) parameter within\
    \ an \"oth\" array member\n   represents the value of a subsequent prime factor.\
    \  It is represented\n   as a Base64urlUInt-encoded value.\n"
- title: 6.3.2.7.2.  "d" (Factor CRT Exponent)
  contents:
  - "6.3.2.7.2.  \"d\" (Factor CRT Exponent)\n   The \"d\" (factor CRT exponent) parameter\
    \ within an \"oth\" array member\n   represents the CRT exponent of the corresponding\
    \ prime factor.  It is\n   represented as a Base64urlUInt-encoded value.\n"
- title: 6.3.2.7.3.  "t" (Factor CRT Coefficient)
  contents:
  - "6.3.2.7.3.  \"t\" (Factor CRT Coefficient)\n   The \"t\" (factor CRT coefficient)\
    \ parameter within an \"oth\" array\n   member represents the CRT coefficient\
    \ of the corresponding prime\n   factor.  It is represented as a Base64urlUInt-encoded\
    \ value.\n"
- title: 6.4.  Parameters for Symmetric Keys
  contents:
  - "6.4.  Parameters for Symmetric Keys\n   When the JWK \"kty\" member value is\
    \ \"oct\" (octet sequence), the member\n   \"k\" (see Section 6.4.1) is used to\
    \ represent a symmetric key (or\n   another key whose value is a single octet\
    \ sequence).  An \"alg\" member\n   SHOULD also be present to identify the algorithm\
    \ intended to be used\n   with the key, unless the application uses another means\
    \ or convention\n   to determine the algorithm used.\n"
- title: 6.4.1.  "k" (Key Value) Parameter
  contents:
  - "6.4.1.  \"k\" (Key Value) Parameter\n   The \"k\" (key value) parameter contains\
    \ the value of the symmetric (or\n   other single-valued) key.  It is represented\
    \ as the base64url\n   encoding of the octet sequence containing the key value.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   The following registration procedure is used for\
    \ all the registries\n   established by this specification.\n   The registration\
    \ procedure for values is Specification Required\n   [RFC5226] after a three-week\
    \ review period on the\n   jose-reg-review@ietf.org mailing list, on the advice\
    \ of one or more\n   Designated Experts.  However, to allow for the allocation\
    \ of values\n   prior to publication, the Designated Experts may approve registration\n\
    \   once they are satisfied that such a specification will be published.\n   Registration\
    \ requests sent to the mailing list for review should use\n   an appropriate subject\
    \ (e.g., \"Request to register algorithm:\n   example\").\n   Within the review\
    \ period, the Designated Experts will either approve\n   or deny the registration\
    \ request, communicating this decision to the\n   review list and IANA.  Denials\
    \ should include an explanation and, if\n   applicable, suggestions as to how\
    \ to make the request successful.\n   Registration requests that are undetermined\
    \ for a period longer than\n   21 days can be brought to the IESG's attention\
    \ (using the\n   iesg@ietf.org mailing list) for resolution.\n   Criteria that\
    \ should be applied by the Designated Experts include\n   determining whether\
    \ the proposed registration duplicates existing\n   functionality, whether it\
    \ is likely to be of general applicability or\n   useful only for a single application,\
    \ and whether the registration\n   description is clear.\n   IANA must only accept\
    \ registry updates from the Designated Experts\n   and should direct all requests\
    \ for registration to the review mailing\n   list.\n   It is suggested that multiple\
    \ Designated Experts be appointed who are\n   able to represent the perspectives\
    \ of different applications using\n   this specification, in order to enable broadly\
    \ informed review of\n   registration decisions.  In cases where a registration\
    \ decision could\n   be perceived as creating a conflict of interest for a particular\n\
    \   Expert, that Expert should defer to the judgment of the other\n   Experts.\n"
- title: 7.1.  JSON Web Signature and Encryption Algorithms Registry
  contents:
  - "7.1.  JSON Web Signature and Encryption Algorithms Registry\n   This specification\
    \ establishes the IANA \"JSON Web Signature and\n   Encryption Algorithms\" registry\
    \ for values of the JWS and JWE \"alg\"\n   (algorithm) and \"enc\" (encryption\
    \ algorithm) Header Parameters.  The\n   registry records the algorithm name,\
    \ the algorithm description, the\n   algorithm usage locations, the implementation\
    \ requirements, the\n   change controller, and a reference to the specification\
    \ that defines\n   it.  The same algorithm name can be registered multiple times,\n\
    \   provided that the sets of usage locations are disjoint.\n   It is suggested\
    \ that the length of the key be included in the\n   algorithm name when multiple\
    \ variations of algorithms are being\n   registered that use keys of different\
    \ lengths and the key lengths for\n   each need to be fixed (for instance, because\
    \ they will be created by\n   key derivation functions).  This allows readers\
    \ of the JSON text to\n   more easily make security decisions.\n   The Designated\
    \ Experts should perform reasonable due diligence that\n   algorithms being registered\
    \ either are currently considered\n   cryptographically credible or are being\
    \ registered as Deprecated or\n   Prohibited.\n   The implementation requirements\
    \ of an algorithm may be changed over\n   time as the cryptographic landscape\
    \ evolves, for instance, to change\n   the status of an algorithm to Deprecated\
    \ or to change the status of\n   an algorithm from Optional to Recommended+ or\
    \ Required.  Changes of\n   implementation requirements are only permitted on\
    \ a Specification\n   Required basis after review by the Designated Experts, with\
    \ the new\n   specification defining the revised implementation requirements level.\n"
- title: 7.1.1.  Registration Template
  contents:
  - "7.1.1.  Registration Template\n   Algorithm Name:\n      The name requested (e.g.,\
    \ \"HS256\").  This name is a case-sensitive\n      ASCII string.  Names may not\
    \ match other registered names in a\n      case-insensitive manner unless the\
    \ Designated Experts state that\n      there is a compelling reason to allow an\
    \ exception.\n   Algorithm Description:\n      Brief description of the algorithm\
    \ (e.g., \"HMAC using SHA-256\").\n   Algorithm Usage Location(s):\n      The\
    \ algorithm usage locations.  This must be one or more of the\n      values \"\
    alg\" or \"enc\" if the algorithm is to be used with JWS or\n      JWE.  The value\
    \ \"JWK\" is used if the algorithm identifier will be\n      used as a JWK \"\
    alg\" member value, but will not be used with JWS or\n      JWE; this could be\
    \ the case, for instance, for non-authenticated\n      encryption algorithms.\
    \  Other values may be used with the approval\n      of a Designated Expert.\n\
    \   JOSE Implementation Requirements:\n      The algorithm implementation requirements\
    \ for JWS and JWE, which\n      must be one the words Required, Recommended, Optional,\
    \ Deprecated,\n      or Prohibited.  Optionally, the word can be followed by a\
    \ \"+\" or\n      \"-\".  The use of \"+\" indicates that the requirement strength\
    \ is\n      likely to be increased in a future version of the specification.\n\
    \      The use of \"-\" indicates that the requirement strength is likely\n  \
    \    to be decreased in a future version of the specification.  Any\n      identifiers\
    \ registered for non-authenticated encryption algorithms\n      or other algorithms\
    \ that are otherwise unsuitable for direct use\n      as JWS or JWE algorithms\
    \ must be registered as \"Prohibited\".\n   Change Controller:\n      For Standards\
    \ Track RFCs, list the \"IESG\".  For others, give the\n      name of the responsible\
    \ party.  Other details (e.g., postal\n      address, email address, home page\
    \ URI) may also be included.\n   Specification Document(s):\n      Reference to\
    \ the document or documents that specify the parameter,\n      preferably including\
    \ URIs that can be used to retrieve copies of\n      the documents.  An indication\
    \ of the relevant sections may also be\n      included but is not required.\n\
    \   Algorithm Analysis Documents(s):\n      References to a publication or publications\
    \ in well-known\n      cryptographic conferences, by national standards bodies,\
    \ or by\n      other authoritative sources analyzing the cryptographic soundness\n\
    \      of the algorithm to be registered.  The Designated Experts may\n      require\
    \ convincing evidence of the cryptographic soundness of a\n      new algorithm\
    \ to be provided with the registration request unless\n      the algorithm is\
    \ being registered as Deprecated or Prohibited.\n      Having gone through working\
    \ group and IETF review, the initial\n      registrations made by this document\
    \ are exempt from the need to\n      provide this information.\n"
- title: 7.1.2.  Initial Registry Contents
  contents:
  - "7.1.2.  Initial Registry Contents\n   o  Algorithm Name: \"HS256\"\n   o  Algorithm\
    \ Description: HMAC using SHA-256\n   o  Algorithm Usage Location(s): \"alg\"\n\
    \   o  JOSE Implementation Requirements: Required\n   o  Change Controller: IESG\n\
    \   o  Specification Document(s): Section 3.2 of RFC 7518\n   o  Algorithm Analysis\
    \ Documents(s): n/a\n   o  Algorithm Name: \"HS384\"\n   o  Algorithm Description:\
    \ HMAC using SHA-384\n   o  Algorithm Usage Location(s): \"alg\"\n   o  JOSE Implementation\
    \ Requirements: Optional\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 3.2 of RFC 7518\n   o  Algorithm Analysis Documents(s): n/a\n   o  Algorithm\
    \ Name: \"HS512\"\n   o  Algorithm Description: HMAC using SHA-512\n   o  Algorithm\
    \ Usage Location(s): \"alg\"\n   o  JOSE Implementation Requirements: Optional\n\
    \   o  Change Controller: IESG\n   o  Specification Document(s): Section 3.2 of\
    \ RFC 7518\n   o  Algorithm Analysis Documents(s): n/a\n   o  Algorithm Name:\
    \ \"RS256\"\n   o  Algorithm Description: RSASSA-PKCS1-v1_5 using SHA-256\n  \
    \ o  Algorithm Usage Location(s): \"alg\"\n   o  JOSE Implementation Requirements:\
    \ Recommended\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 3.3 of RFC 7518\n   o  Algorithm Analysis Documents(s): n/a\n   o  Algorithm\
    \ Name: \"RS384\"\n   o  Algorithm Description: RSASSA-PKCS1-v1_5 using SHA-384\n\
    \   o  Algorithm Usage Location(s): \"alg\"\n   o  JOSE Implementation Requirements:\
    \ Optional\n   o  Change Controller: IESG\n   o  Specification Document(s): Section\
    \ 3.3 of RFC 7518\n   o  Algorithm Analysis Documents(s): n/a\n   o  Algorithm\
    \ Name: \"RS512\"\n   o  Algorithm Description: RSASSA-PKCS1-v1_5 using SHA-512\n\
    \   o  Algorithm Usage Location(s): \"alg\"\n   o  JOSE Implementation Requirements:\
    \ Optional\n   o  Change Controller: IESG\n   o  Specification Document(s): Section\
    \ 3.3 of RFC 7518\n   o  Algorithm Analysis Documents(s): n/a\n   o  Algorithm\
    \ Name: \"ES256\"\n   o  Algorithm Description: ECDSA using P-256 and SHA-256\n\
    \   o  Algorithm Usage Location(s): \"alg\"\n   o  JOSE Implementation Requirements:\
    \ Recommended+\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 3.4 of RFC 7518\n   o  Algorithm Analysis Documents(s): n/a\n   o  Algorithm\
    \ Name: \"ES384\"\n   o  Algorithm Description: ECDSA using P-384 and SHA-384\n\
    \   o  Algorithm Usage Location(s): \"alg\"\n   o  JOSE Implementation Requirements:\
    \ Optional\n   o  Change Controller: IESG\n   o  Specification Document(s): Section\
    \ 3.4 of RFC 7518\n   o  Algorithm Analysis Documents(s): n/a\n   o  Algorithm\
    \ Name: \"ES512\"\n   o  Algorithm Description: ECDSA using P-521 and SHA-512\n\
    \   o  Algorithm Usage Location(s): \"alg\"\n   o  JOSE Implementation Requirements:\
    \ Optional\n   o  Change Controller: IESG\n   o  Specification Document(s): Section\
    \ 3.4 of RFC 7518\n   o  Algorithm Analysis Documents(s): n/a\n   o  Algorithm\
    \ Name: \"PS256\"\n   o  Algorithm Description: RSASSA-PSS using SHA-256 and MGF1\
    \ with\n      SHA-256\n   o  Algorithm Usage Location(s): \"alg\"\n   o  JOSE\
    \ Implementation Requirements: Optional\n   o  Change Controller: IESG\n   o \
    \ Specification Document(s): Section 3.5 of RFC 7518\n   o  Algorithm Analysis\
    \ Documents(s): n/a\n   o  Algorithm Name: \"PS384\"\n   o  Algorithm Description:\
    \ RSASSA-PSS using SHA-384 and MGF1 with\n      SHA-384\n   o  Algorithm Usage\
    \ Location(s): \"alg\"\n   o  JOSE Implementation Requirements: Optional\n   o\
    \  Change Controller: IESG\n   o  Specification Document(s): Section 3.5 of RFC\
    \ 7518\n   o  Algorithm Analysis Documents(s): n/a\n   o  Algorithm Name: \"PS512\"\
    \n   o  Algorithm Description: RSASSA-PSS using SHA-512 and MGF1 with\n      SHA-512\n\
    \   o  Algorithm Usage Location(s): \"alg\"\n   o  JOSE Implementation Requirements:\
    \ Optional\n   o  Change Controller: IESG\n   o  Specification Document(s): Section\
    \ 3.5 of RFC 7518\n   o  Algorithm Analysis Documents(s): n/a\n   o  Algorithm\
    \ Name: \"none\"\n   o  Algorithm Description: No digital signature or MAC performed\n\
    \   o  Algorithm Usage Location(s): \"alg\"\n   o  JOSE Implementation Requirements:\
    \ Optional\n   o  Change Controller: IESG\n   o  Specification Document(s): Section\
    \ 3.6 of RFC 7518\n   o  Algorithm Analysis Documents(s): n/a\n   o  Algorithm\
    \ Name: \"RSA1_5\"\n   o  Algorithm Description: RSAES-PKCS1-v1_5\n   o  Algorithm\
    \ Usage Location(s): \"alg\"\n   o  JOSE Implementation Requirements: Recommended-\n\
    \   o  Change Controller: IESG\n   o  Specification Document(s): Section 4.2 of\
    \ RFC 7518\n   o  Algorithm Analysis Documents(s): n/a\n   o  Algorithm Name:\
    \ \"RSA-OAEP\"\n   o  Algorithm Description: RSAES OAEP using default parameters\n\
    \   o  Algorithm Usage Location(s): \"alg\"\n   o  JOSE Implementation Requirements:\
    \ Recommended+\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 4.3 of RFC 7518\n   o  Algorithm Analysis Documents(s): n/a\n   o  Algorithm\
    \ Name: \"RSA-OAEP-256\"\n   o  Algorithm Description: RSAES OAEP using SHA-256\
    \ and MGF1 with\n      SHA-256\n   o  Algorithm Usage Location(s): \"alg\"\n \
    \  o  JOSE Implementation Requirements: Optional\n   o  Change Controller: IESG\n\
    \   o  Specification Document(s): Section 4.3 of RFC 7518\n   o  Algorithm Analysis\
    \ Documents(s): n/a\n   o  Algorithm Name: \"A128KW\"\n   o  Algorithm Description:\
    \ AES Key Wrap using 128-bit key\n   o  Algorithm Usage Location(s): \"alg\"\n\
    \   o  JOSE Implementation Requirements: Recommended\n   o  Change Controller:\
    \ IESG\n   o  Specification Document(s): Section 4.4 of RFC 7518\n   o  Algorithm\
    \ Analysis Documents(s): n/a\n   o  Algorithm Name: \"A192KW\"\n   o  Algorithm\
    \ Description: AES Key Wrap using 192-bit key\n   o  Algorithm Usage Location(s):\
    \ \"alg\"\n   o  JOSE Implementation Requirements: Optional\n   o  Change Controller:\
    \ IESG\n   o  Specification Document(s): Section 4.4 of RFC 7518\n   o  Algorithm\
    \ Analysis Documents(s): n/a\n   o  Algorithm Name: \"A256KW\"\n   o  Algorithm\
    \ Description: AES Key Wrap using 256-bit key\n   o  Algorithm Usage Location(s):\
    \ \"alg\"\n   o  JOSE Implementation Requirements: Recommended\n   o  Change Controller:\
    \ IESG\n   o  Specification Document(s): Section 4.4 of RFC 7518\n   o  Algorithm\
    \ Analysis Documents(s): n/a\n   o  Algorithm Name: \"dir\"\n   o  Algorithm Description:\
    \ Direct use of a shared symmetric key\n   o  Algorithm Usage Location(s): \"\
    alg\"\n   o  JOSE Implementation Requirements: Recommended\n   o  Change Controller:\
    \ IESG\n   o  Specification Document(s): Section 4.5 of RFC 7518\n   o  Algorithm\
    \ Analysis Documents(s): n/a\n   o  Algorithm Name: \"ECDH-ES\"\n   o  Algorithm\
    \ Description: ECDH-ES using Concat KDF\n   o  Algorithm Usage Location(s): \"\
    alg\"\n   o  JOSE Implementation Requirements: Recommended+\n   o  Change Controller:\
    \ IESG\n   o  Specification Document(s): Section 4.6 of RFC 7518\n   o  Algorithm\
    \ Analysis Documents(s): n/a\n   o  Algorithm Name: \"ECDH-ES+A128KW\"\n   o \
    \ Algorithm Description: ECDH-ES using Concat KDF and \"A128KW\"\n      wrapping\n\
    \   o  Algorithm Usage Location(s): \"alg\"\n   o  JOSE Implementation Requirements:\
    \ Recommended\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 4.6 of RFC 7518\n   o  Algorithm Analysis Documents(s): n/a\n   o  Algorithm\
    \ Name: \"ECDH-ES+A192KW\"\n   o  Algorithm Description: ECDH-ES using Concat\
    \ KDF and \"A192KW\"\n      wrapping\n   o  Algorithm Usage Location(s): \"alg\"\
    \n   o  JOSE Implementation Requirements: Optional\n   o  Change Controller: IESG\n\
    \   o  Specification Document(s): Section 4.6 of RFC 7518\n   o  Algorithm Analysis\
    \ Documents(s): n/a\n   o  Algorithm Name: \"ECDH-ES+A256KW\"\n   o  Algorithm\
    \ Description: ECDH-ES using Concat KDF and \"A256KW\"\n      wrapping\n   o \
    \ Algorithm Usage Location(s): \"alg\"\n   o  JOSE Implementation Requirements:\
    \ Recommended\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 4.6 of RFC 7518\n   o  Algorithm Analysis Documents(s): n/a\n   o  Algorithm\
    \ Name: \"A128GCMKW\"\n   o  Algorithm Description: Key wrapping with AES GCM\
    \ using 128-bit key\n   o  Algorithm Usage Location(s): \"alg\"\n   o  JOSE Implementation\
    \ Requirements: Optional\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 4.7 of RFC 7518\n   o  Algorithm Analysis Documents(s): n/a\n   o  Algorithm\
    \ Name: \"A192GCMKW\"\n   o  Algorithm Description: Key wrapping with AES GCM\
    \ using 192-bit key\n   o  Algorithm Usage Location(s): \"alg\"\n   o  JOSE Implementation\
    \ Requirements: Optional\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 4.7 of RFC 7518\n   o  Algorithm Analysis Documents(s): n/a\n   o  Algorithm\
    \ Name: \"A256GCMKW\"\n   o  Algorithm Description: Key wrapping with AES GCM\
    \ using 256-bit key\n   o  Algorithm Usage Location(s): \"alg\"\n   o  JOSE Implementation\
    \ Requirements: Optional\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 4.7 of RFC 7518\n   o  Algorithm Analysis Documents(s): n/a\n   o  Algorithm\
    \ Name: \"PBES2-HS256+A128KW\"\n   o  Algorithm Description: PBES2 with HMAC SHA-256\
    \ and \"A128KW\"\n      wrapping\n   o  Algorithm Usage Location(s): \"alg\"\n\
    \   o  JOSE Implementation Requirements: Optional\n   o  Change Controller: IESG\n\
    \   o  Specification Document(s): Section 4.8 of RFC 7518\n   o  Algorithm Analysis\
    \ Documents(s): n/a\n   o  Algorithm Name: \"PBES2-HS384+A192KW\"\n   o  Algorithm\
    \ Description: PBES2 with HMAC SHA-384 and \"A192KW\"\n      wrapping\n   o  Algorithm\
    \ Usage Location(s): \"alg\"\n   o  JOSE Implementation Requirements: Optional\n\
    \   o  Change Controller: IESG\n   o  Specification Document(s): Section 4.8 of\
    \ RFC 7518\n   o  Algorithm Analysis Documents(s): n/a\n   o  Algorithm Name:\
    \ \"PBES2-HS512+A256KW\"\n   o  Algorithm Description: PBES2 with HMAC SHA-512\
    \ and \"A256KW\"\n      wrapping\n   o  Algorithm Usage Location(s): \"alg\"\n\
    \   o  JOSE Implementation Requirements: Optional\n   o  Change Controller: IESG\n\
    \   o  Specification Document(s): Section 4.8 of RFC 7518\n   o  Algorithm Analysis\
    \ Documents(s): n/a\n   o  Algorithm Name: \"A128CBC-HS256\"\n   o  Algorithm\
    \ Description: AES_128_CBC_HMAC_SHA_256 authenticated\n      encryption algorithm\n\
    \   o  Algorithm Usage Location(s): \"enc\"\n   o  JOSE Implementation Requirements:\
    \ Required\n   o  Change Controller: IESG\n   o  Specification Document(s): Section\
    \ 5.2.3 of RFC 7518\n   o  Algorithm Analysis Documents(s): n/a\n   o  Algorithm\
    \ Name: \"A192CBC-HS384\"\n   o  Algorithm Description: AES_192_CBC_HMAC_SHA_384\
    \ authenticated\n      encryption algorithm\n   o  Algorithm Usage Location(s):\
    \ \"enc\"\n   o  JOSE Implementation Requirements: Optional\n   o  Change Controller:\
    \ IESG\n   o  Specification Document(s): Section 5.2.4 of RFC 7518\n   o  Algorithm\
    \ Analysis Documents(s): n/a\n   o  Algorithm Name: \"A256CBC-HS512\"\n   o  Algorithm\
    \ Description: AES_256_CBC_HMAC_SHA_512 authenticated\n      encryption algorithm\n\
    \   o  Algorithm Usage Location(s): \"enc\"\n   o  JOSE Implementation Requirements:\
    \ Required\n   o  Change Controller: IESG\n   o  Specification Document(s): Section\
    \ 5.2.5 of RFC 7518\n   o  Algorithm Analysis Documents(s): n/a\n   o  Algorithm\
    \ Name: \"A128GCM\"\n   o  Algorithm Description: AES GCM using 128-bit key\n\
    \   o  Algorithm Usage Location(s): \"enc\"\n   o  JOSE Implementation Requirements:\
    \ Recommended\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 5.3 of RFC 7518\n   o  Algorithm Analysis Documents(s): n/a\n   o  Algorithm\
    \ Name: \"A192GCM\"\n   o  Algorithm Description: AES GCM using 192-bit key\n\
    \   o  Algorithm Usage Location(s): \"enc\"\n   o  JOSE Implementation Requirements:\
    \ Optional\n   o  Change Controller: IESG\n   o  Specification Document(s): Section\
    \ 5.3 of RFC 7518\n   o  Algorithm Analysis Documents(s): n/a\n   o  Algorithm\
    \ Name: \"A256GCM\"\n   o  Algorithm Description: AES GCM using 256-bit key\n\
    \   o  Algorithm Usage Location(s): \"enc\"\n   o  JOSE Implementation Requirements:\
    \ Recommended\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 5.3 of RFC 7518\n   o  Algorithm Analysis Documents(s): n/a\n"
- title: 7.2.  Header Parameter Names Registration
  contents:
  - "7.2.  Header Parameter Names Registration\n   This section registers the Header\
    \ Parameter names defined in Sections\n   4.6.1, 4.7.1, and 4.8.1 of this specification\
    \ in the IANA \"JSON Web\n   Signature and Encryption Header Parameters\" registry\
    \ established by\n   [JWS].\n"
- title: 7.2.1.  Registry Contents
  contents:
  - "7.2.1.  Registry Contents\n   o  Header Parameter Name: \"epk\"\n   o  Header\
    \ Parameter Description: Ephemeral Public Key\n   o  Header Parameter Usage Location(s):\
    \ JWE\n   o  Change Controller: IESG\n   o  Specification Document(s): Section\
    \ 4.6.1.1 of RFC 7518\n   o  Header Parameter Name: \"apu\"\n   o  Header Parameter\
    \ Description: Agreement PartyUInfo\n   o  Header Parameter Usage Location(s):\
    \ JWE\n   o  Change Controller: IESG\n   o  Specification Document(s): Section\
    \ 4.6.1.2 of RFC 7518\n   o  Header Parameter Name: \"apv\"\n   o  Header Parameter\
    \ Description: Agreement PartyVInfo\n   o  Header Parameter Usage Location(s):\
    \ JWE\n   o  Change Controller: IESG\n   o  Specification Document(s): Section\
    \ 4.6.1.3 of RFC 7518\n   o  Header Parameter Name: \"iv\"\n   o  Header Parameter\
    \ Description: Initialization Vector\n   o  Header Parameter Usage Location(s):\
    \ JWE\n   o  Change Controller: IESG\n   o  Specification Document(s): Section\
    \ 4.7.1.1 of RFC 7518\n   o  Header Parameter Name: \"tag\"\n   o  Header Parameter\
    \ Description: Authentication Tag\n   o  Header Parameter Usage Location(s): JWE\n\
    \   o  Change Controller: IESG\n   o  Specification Document(s): Section 4.7.1.2\
    \ of RFC 7518\n   o  Header Parameter Name: \"p2s\"\n   o  Header Parameter Description:\
    \ PBES2 Salt Input\n   o  Header Parameter Usage Location(s): JWE\n   o  Change\
    \ Controller: IESG\n   o  Specification Document(s): Section 4.8.1.1 of RFC 7518\n\
    \   o  Header Parameter Name: \"p2c\"\n   o  Header Parameter Description: PBES2\
    \ Count\n   o  Header Parameter Usage Location(s): JWE\n   o  Change Controller:\
    \ IESG\n   o  Specification Document(s): Section 4.8.1.2 of RFC 7518\n"
- title: 7.3.  JSON Web Encryption Compression Algorithms Registry
  contents:
  - "7.3.  JSON Web Encryption Compression Algorithms Registry\n   This specification\
    \ establishes the IANA \"JSON Web Encryption\n   Compression Algorithms\" registry\
    \ for JWE \"zip\" member values.  The\n   registry records the compression algorithm\
    \ value and a reference to\n   the specification that defines it.\n"
- title: 7.3.1.  Registration Template
  contents:
  - "7.3.1.  Registration Template\n   Compression Algorithm Value:\n      The name\
    \ requested (e.g., \"DEF\").  Because a core goal of this\n      specification\
    \ is for the resulting representations to be compact,\n      it is RECOMMENDED\
    \ that the name be short -- not to exceed 8\n      characters without a compelling\
    \ reason to do so.  This name is\n      case sensitive.  Names may not match other\
    \ registered names in a\n      case-insensitive manner unless the Designated Experts\
    \ state that\n      there is a compelling reason to allow an exception.\n   Compression\
    \ Algorithm Description:\n      Brief description of the compression algorithm\
    \ (e.g., \"DEFLATE\").\n   Change Controller:\n      For Standards Track RFCs,\
    \ list \"IESG\".  For others, give the name\n      of the responsible party. \
    \ Other details (e.g., postal address,\n      email address, home page URI) may\
    \ also be included.\n   Specification Document(s):\n      Reference to the document\
    \ or documents that specify the parameter,\n      preferably including URIs that\
    \ can be used to retrieve copies of\n      the documents.  An indication of the\
    \ relevant sections may also be\n      included but is not required.\n"
- title: 7.3.2.  Initial Registry Contents
  contents:
  - "7.3.2.  Initial Registry Contents\n   o  Compression Algorithm Value: \"DEF\"\
    \n   o  Compression Algorithm Description: DEFLATE\n   o  Change Controller: IESG\n\
    \   o  Specification Document(s): JSON Web Encryption (JWE) [JWE]\n"
- title: 7.4.  JSON Web Key Types Registry
  contents:
  - "7.4.  JSON Web Key Types Registry\n   This specification establishes the IANA\
    \ \"JSON Web Key Types\" registry\n   for values of the JWK \"kty\" (key type)\
    \ parameter.  The registry\n   records the \"kty\" value, implementation requirements,\
    \ and a reference\n   to the specification that defines it.\n   The implementation\
    \ requirements of a key type may be changed over\n   time as the cryptographic\
    \ landscape evolves, for instance, to change\n   the status of a key type to Deprecated\
    \ or to change the status of a\n   key type from Optional to Recommended+ or Required.\
    \  Changes of\n   implementation requirements are only permitted on a Specification\n\
    \   Required basis after review by the Designated Experts, with the new\n   specification\
    \ defining the revised implementation requirements level.\n"
- title: 7.4.1.  Registration Template
  contents:
  - "7.4.1.  Registration Template\n   \"kty\" Parameter Value:\n      The name requested\
    \ (e.g., \"EC\").  Because a core goal of this\n      specification is for the\
    \ resulting representations to be compact,\n      it is RECOMMENDED that the name\
    \ be short -- not to exceed 8\n      characters without a compelling reason to\
    \ do so.  This name is\n      case sensitive.  Names may not match other registered\
    \ names in a\n      case-insensitive manner unless the Designated Experts state\
    \ that\n      there is a compelling reason to allow an exception.\n   Key Type\
    \ Description:\n      Brief description of the Key Type (e.g., \"Elliptic Curve\"\
    ).\n   Change Controller:\n      For Standards Track RFCs, list \"IESG\".  For\
    \ others, give the name\n      of the responsible party.  Other details (e.g.,\
    \ postal address,\n      email address, home page URI) may also be included.\n\
    \   JOSE Implementation Requirements:\n      The key type implementation requirements\
    \ for JWS and JWE, which\n      must be one the words Required, Recommended, Optional,\
    \ Deprecated,\n      or Prohibited.  Optionally, the word can be followed by a\
    \ \"+\" or\n      \"-\".  The use of \"+\" indicates that the requirement strength\
    \ is\n      likely to be increased in a future version of the specification.\n\
    \      The use of \"-\" indicates that the requirement strength is likely\n  \
    \    to be decreased in a future version of the specification.\n   Specification\
    \ Document(s):\n      Reference to the document or documents that specify the\
    \ parameter,\n      preferably including URIs that can be used to retrieve copies\
    \ of\n      the documents.  An indication of the relevant sections may also be\n\
    \      included but is not required.\n"
- title: 7.4.2.  Initial Registry Contents
  contents:
  - "7.4.2.  Initial Registry Contents\n   This section registers the values defined\
    \ in Section 6.1.\n   o  \"kty\" Parameter Value: \"EC\"\n   o  Key Type Description:\
    \ Elliptic Curve\n   o  JOSE Implementation Requirements: Recommended+\n   o \
    \ Change Controller: IESG\n   o  Specification Document(s): Section 6.2 of RFC\
    \ 7518\n   o  \"kty\" Parameter Value: \"RSA\"\n   o  Key Type Description: RSA\n\
    \   o  JOSE Implementation Requirements: Required\n   o  Change Controller: IESG\n\
    \   o  Specification Document(s): Section 6.3 of RFC 7518\n   o  \"kty\" Parameter\
    \ Value: \"oct\"\n   o  Key Type Description: Octet Sequence\n   o  JOSE Implementation\
    \ Requirements: Required\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 6.4 of RFC 7518\n"
- title: 7.5.  JSON Web Key Parameters Registration
  contents:
  - "7.5.  JSON Web Key Parameters Registration\n   This section registers the parameter\
    \ names defined in Sections 6.2,\n   6.3, and 6.4 of this specification in the\
    \ IANA \"JSON Web Key\n   Parameters\" registry established by [JWK].\n"
- title: 7.5.1.  Registry Contents
  contents:
  - "7.5.1.  Registry Contents\n   o  Parameter Name: \"crv\"\n   o  Parameter Description:\
    \ Curve\n   o  Used with \"kty\" Value(s): \"EC\"\n   o  Parameter Information\
    \ Class: Public\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 6.2.1.1 of RFC 7518\n   o  Parameter Name: \"x\"\n   o  Parameter Description:\
    \ X Coordinate\n   o  Used with \"kty\" Value(s): \"EC\"\n   o  Parameter Information\
    \ Class: Public\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 6.2.1.2 of RFC 7518\n   o  Parameter Name: \"y\"\n   o  Parameter Description:\
    \ Y Coordinate\n   o  Used with \"kty\" Value(s): \"EC\"\n   o  Parameter Information\
    \ Class: Public\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 6.2.1.3 of RFC 7518\n   o  Parameter Name: \"d\"\n   o  Parameter Description:\
    \ ECC Private Key\n   o  Used with \"kty\" Value(s): \"EC\"\n   o  Parameter Information\
    \ Class: Private\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 6.2.2.1 of RFC 7518\n   o  Parameter Name: \"n\"\n   o  Parameter Description:\
    \ Modulus\n   o  Used with \"kty\" Value(s): \"RSA\"\n   o  Parameter Information\
    \ Class: Public\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 6.3.1.1 of RFC 7518\n   o  Parameter Name: \"e\"\n   o  Parameter Description:\
    \ Exponent\n   o  Used with \"kty\" Value(s): \"RSA\"\n   o  Parameter Information\
    \ Class: Public\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 6.3.1.2 of RFC 7518\n   o  Parameter Name: \"d\"\n   o  Parameter Description:\
    \ Private Exponent\n   o  Used with \"kty\" Value(s): \"RSA\"\n   o  Parameter\
    \ Information Class: Private\n   o  Change Controller: IESG\n   o  Specification\
    \ Document(s): Section 6.3.2.1 of RFC 7518\n   o  Parameter Name: \"p\"\n   o\
    \  Parameter Description: First Prime Factor\n   o  Used with \"kty\" Value(s):\
    \ \"RSA\"\n   o  Parameter Information Class: Private\n   o  Change Controller:\
    \ IESG\n   o  Specification Document(s): Section 6.3.2.2 of RFC 7518\n   o  Parameter\
    \ Name: \"q\"\n   o  Parameter Description: Second Prime Factor\n   o  Used with\
    \ \"kty\" Value(s): \"RSA\"\n   o  Parameter Information Class: Private\n   o\
    \  Change Controller: IESG\n   o  Specification Document(s): Section 6.3.2.3 of\
    \ RFC 7518\n   o  Parameter Name: \"dp\"\n   o  Parameter Description: First Factor\
    \ CRT Exponent\n   o  Used with \"kty\" Value(s): \"RSA\"\n   o  Parameter Information\
    \ Class: Private\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 6.3.2.4 of RFC 7518\n   o  Parameter Name: \"dq\"\n   o  Parameter Description:\
    \ Second Factor CRT Exponent\n   o  Used with \"kty\" Value(s): \"RSA\"\n   o\
    \  Parameter Information Class: Private\n   o  Change Controller: IESG\n   o \
    \ Specification Document(s): Section 6.3.2.5 of RFC 7518\n   o  Parameter Name:\
    \ \"qi\"\n   o  Parameter Description: First CRT Coefficient\n   o  Used with\
    \ \"kty\" Value(s): \"RSA\"\n   o  Parameter Information Class: Private\n   o\
    \  Change Controller: IESG\n   o  Specification Document(s): Section 6.3.2.6 of\
    \ RFC 7518\n   o  Parameter Name: \"oth\"\n   o  Parameter Description: Other\
    \ Primes Info\n   o  Used with \"kty\" Value(s): \"RSA\"\n   o  Parameter Information\
    \ Class: Private\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 6.3.2.7 of RFC 7518\n   o  Parameter Name: \"k\"\n   o  Parameter Description:\
    \ Key Value\n   o  Used with \"kty\" Value(s): \"oct\"\n   o  Parameter Information\
    \ Class: Private\n   o  Change Controller: IESG\n   o  Specification Document(s):\
    \ Section 6.4.1 of RFC 7518\n"
- title: 7.6.  JSON Web Key Elliptic Curve Registry
  contents:
  - "7.6.  JSON Web Key Elliptic Curve Registry\n   This section establishes the IANA\
    \ \"JSON Web Key Elliptic Curve\"\n   registry for JWK \"crv\" member values.\
    \  The registry records the curve\n   name, implementation requirements, and a\
    \ reference to the\n   specification that defines it.  This specification registers\
    \ the\n   parameter names defined in Section 6.2.1.1.\n   The implementation requirements\
    \ of a curve may be changed over time\n   as the cryptographic landscape evolves,\
    \ for instance, to change the\n   status of a curve to Deprecated or to change\
    \ the status of a curve\n   from Optional to Recommended+ or Required.  Changes\
    \ of implementation\n   requirements are only permitted on a Specification Required\
    \ basis\n   after review by the Designated Experts, with the new specification\n\
    \   defining the revised implementation requirements level.\n"
- title: 7.6.1.  Registration Template
  contents:
  - "7.6.1.  Registration Template\n   Curve Name:\n      The name requested (e.g.,\
    \ \"P-256\").  Because a core goal of this\n      specification is for the resulting\
    \ representations to be compact,\n      it is RECOMMENDED that the name be short\
    \ -- not to exceed 8\n      characters without a compelling reason to do so. \
    \ This name is\n      case sensitive.  Names may not match other registered names\
    \ in a\n      case-insensitive manner unless the Designated Experts state that\n\
    \      there is a compelling reason to allow an exception.\n   Curve Description:\n\
    \      Brief description of the curve (e.g., \"P-256 Curve\").\n   JOSE Implementation\
    \ Requirements:\n      The curve implementation requirements for JWS and JWE,\
    \ which must\n      be one the words Required, Recommended, Optional, Deprecated,\
    \ or\n      Prohibited.  Optionally, the word can be followed by a \"+\" or \"\
    -\".\n      The use of \"+\" indicates that the requirement strength is likely\n\
    \      to be increased in a future version of the specification.  The use\n  \
    \    of \"-\" indicates that the requirement strength is likely to be\n      decreased\
    \ in a future version of the specification.\n   Change Controller:\n      For\
    \ Standards Track RFCs, list \"IESG\".  For others, give the name\n      of the\
    \ responsible party.  Other details (e.g., postal address,\n      email address,\
    \ home page URI) may also be included.\n   Specification Document(s):\n      Reference\
    \ to the document or documents that specify the parameter,\n      preferably including\
    \ URIs that can be used to retrieve copies of\n      the documents.  An indication\
    \ of the relevant sections may also be\n      included but is not required.\n"
- title: 7.6.2.  Initial Registry Contents
  contents:
  - "7.6.2.  Initial Registry Contents\n   o  Curve Name: \"P-256\"\n   o  Curve Description:\
    \ P-256 Curve\n   o  JOSE Implementation Requirements: Recommended+\n   o  Change\
    \ Controller: IESG\n   o  Specification Document(s): Section 6.2.1.1 of RFC 7518\n\
    \   o  Curve Name: \"P-384\"\n   o  Curve Description: P-384 Curve\n   o  JOSE\
    \ Implementation Requirements: Optional\n   o  Change Controller: IESG\n   o \
    \ Specification Document(s): Section 6.2.1.1 of RFC 7518\n   o  Curve Name: \"\
    P-521\"\n   o  Curve Description: P-521 Curve\n   o  JOSE Implementation Requirements:\
    \ Optional\n   o  Change Controller: IESG\n   o  Specification Document(s): Section\
    \ 6.2.1.1 of RFC 7518\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   All of the security issues that are pertinent\
    \ to any cryptographic\n   application must be addressed by JWS/JWE/JWK agents.\
    \  Among these\n   issues are protecting the user's asymmetric private and symmetric\n\
    \   secret keys and employing countermeasures to various attacks.\n   The security\
    \ considerations in [AES], [DSS], [JWE], [JWK], [JWS],\n   [NIST.800-38D], [NIST.800-56A],\
    \ [NIST.800-107], [RFC2104], [RFC3394],\n   [RFC3447], [RFC5116], [RFC6090], and\
    \ [SHS] apply to this\n   specification.\n"
- title: 8.1.  Cryptographic Agility
  contents:
  - "8.1.  Cryptographic Agility\n   Implementers should be aware that cryptographic\
    \ algorithms become\n   weaker with time.  As new cryptanalysis techniques are\
    \ developed and\n   computing performance improves, the work factor to break a\
    \ particular\n   cryptographic algorithm will be reduced.  Therefore, implementers\
    \ and\n   deployments must be prepared for the set of algorithms that are\n  \
    \ supported and used to change over time.  Thus, cryptographic\n   algorithm implementations\
    \ should be modular, allowing new algorithms\n   to be readily inserted.\n"
- title: 8.2.  Key Lifetimes
  contents:
  - "8.2.  Key Lifetimes\n   Many algorithms have associated security considerations\
    \ related to\n   key lifetimes and/or the number of times that a key may be used.\n\
    \   Those security considerations continue to apply when using those\n   algorithms\
    \ with JOSE data structures.  See NIST SP 800-57\n   [NIST.800-57] for specific\
    \ guidance on key lifetimes.\n"
- title: 8.3.  RSAES-PKCS1-v1_5 Security Considerations
  contents:
  - "8.3.  RSAES-PKCS1-v1_5 Security Considerations\n   While Section 8 of RFC 3447\
    \ [RFC3447] explicitly calls for people not\n   to adopt RSASSA-PKCS1-v1_5 for\
    \ new applications and instead requests\n   that people transition to RSASSA-PSS,\
    \ this specification does include\n   RSASSA-PKCS1-v1_5, for interoperability\
    \ reasons, because it is\n   commonly implemented.\n   Keys used with RSAES-PKCS1-v1_5\
    \ must follow the constraints in\n   Section 7.2 of RFC 3447.  Also, keys with\
    \ a low public key exponent\n   value, as described in Section 3 of \"Twenty Years\
    \ of Attacks on the\n   RSA Cryptosystem\" [Boneh99], must not be used.\n"
- title: 8.4.  AES GCM Security Considerations
  contents:
  - "8.4.  AES GCM Security Considerations\n   Keys used with AES GCM must follow\
    \ the constraints in Section 8.3 of\n   [NIST.800-38D], which states: \"The total\
    \ number of invocations of the\n   authenticated encryption function shall not\
    \ exceed 2^32, including\n   all IV lengths and all instances of the authenticated\
    \ encryption\n   function with the given key\".  In accordance with this rule,\
    \ AES GCM\n   MUST NOT be used with the same key value more than 2^32 times.\n\
    \   An IV value MUST NOT ever be used multiple times with the same AES\n   GCM\
    \ key.  One way to prevent this is to store a counter with the key\n   and increment\
    \ it with every use.  The counter can also be used to\n   prevent exceeding the\
    \ 2^32 limit above.\n   This security consideration does not apply to the composite\
    \ AES-CBC\n   HMAC SHA-2 or AES Key Wrap algorithms.\n"
- title: 8.5.  Unsecured JWS Security Considerations
  contents:
  - "8.5.  Unsecured JWS Security Considerations\n   Unsecured JWSs (JWSs that use\
    \ the \"alg\" value \"none\") provide no\n   integrity protection.  Thus, they\
    \ must only be used in contexts in\n   which the payload is secured by means other\
    \ than a digital signature\n   or MAC value, or they need not be secured.\n  \
    \ An example means of preventing accepting Unsecured JWSs by default is\n   for\
    \ the \"verify\" method of a hypothetical JWS software library to\n   have a Boolean\
    \ \"acceptUnsecured\" parameter that indicates \"none\" is\n   an acceptable \"\
    alg\" value.  As another example, the \"verify\" method\n   might take a list\
    \ of algorithms that are acceptable to the\n   application as a parameter and\
    \ would reject Unsecured JWS values if\n   \"none\" is not in that list.\n   The\
    \ following example illustrates the reasons for not accepting\n   Unsecured JWSs\
    \ at a global level.  Suppose an application accepts\n   JWSs over two channels,\
    \ (1) HTTP and (2) HTTPS with client\n   authentication.  It requires a JWS Signature\
    \ on objects received over\n   HTTP, but accepts Unsecured JWSs over HTTPS.  If\
    \ the application were\n   to globally indicate that \"none\" is acceptable, then\
    \ an attacker\n   could provide it with an Unsecured JWS over HTTP and still have\
    \ that\n   object successfully validate.  Instead, the application needs to\n\
    \   indicate acceptance of \"none\" for each object received over HTTPS\n   (e.g.,\
    \ by setting \"acceptUnsecured\" to \"true\" for the first\n   hypothetical JWS\
    \ software library above), but not for each object\n   received over HTTP.\n"
- title: 8.6.  Denial-of-Service Attacks
  contents:
  - "8.6.  Denial-of-Service Attacks\n   Receiving agents that validate signatures\
    \ and sending agents that\n   encrypt messages need to be cautious of cryptographic\
    \ processing\n   usage when validating signatures and encrypting messages using\
    \ keys\n   larger than those mandated in this specification.  An attacker could\n\
    \   supply content using keys that would result in excessive\n   cryptographic\
    \ processing, for example, keys larger than those\n   mandated in this specification.\
    \  Implementations should set and\n   enforce upper limits on the key sizes they\
    \ accept.  Section 5.6.1\n   (Comparable Algorithm Strengths) of NIST SP 800-57\
    \ [NIST.800-57]\n   contains statements on largest approved key sizes that may\
    \ be\n   applicable.\n"
- title: 8.7.  Reusing Key Material when Encrypting Keys
  contents:
  - "8.7.  Reusing Key Material when Encrypting Keys\n   It is NOT RECOMMENDED to\
    \ reuse the same entire set of key material\n   (Key Encryption Key, Content Encryption\
    \ Key, Initialization Vector,\n   etc.) to encrypt multiple JWK or JWK Set objects,\
    \ or to encrypt the\n   same JWK or JWK Set object multiple times.  One suggestion\
    \ for\n   preventing reuse is to always generate at least one new piece of key\n\
    \   material for each encryption operation (e.g., a new Content\n   Encryption\
    \ Key, a new IV, and/or a new PBES2 Salt), based on the\n   considerations noted\
    \ in this document as well as from RFC 4086\n   [RFC4086].\n"
- title: 8.8.  Password Considerations
  contents:
  - "8.8.  Password Considerations\n   Passwords are vulnerable to a number of attacks.\
    \  To help mitigate\n   some of these limitations, this document applies principles\
    \ from RFC\n   2898 [RFC2898] to derive cryptographic keys from user-supplied\n\
    \   passwords.\n   However, the strength of the password still has a significant\
    \ impact.\n   A high-entropy password has greater resistance to dictionary attacks.\n\
    \   [NIST.800-63-2] contains guidelines for estimating password entropy,\n   which\
    \ can help applications and users generate stronger passwords.\n   An ideal password\
    \ is one that is as large as (or larger than) the\n   derived key length.  However,\
    \ passwords larger than a certain\n   algorithm-specific size are first hashed,\
    \ which reduces an attacker's\n   effective search space to the length of the\
    \ hash algorithm.  It is\n   RECOMMENDED that a password used for \"PBES2-HS256+A128KW\"\
    \ be no\n   shorter than 16 octets and no longer than 128 octets and a password\n\
    \   used for \"PBES2-HS512+A256KW\" be no shorter than 32 octets and no\n   longer\
    \ than 128 octets long.\n   Still, care needs to be taken in where and how password-based\n\
    \   encryption is used.  These algorithms can still be susceptible to\n   dictionary-based\
    \ attacks if the iteration count is too small; this is\n   of particular concern\
    \ if these algorithms are used to protect data\n   that an attacker can have indefinite\
    \ number of attempts to circumvent\n   the protection, such as protected data\
    \ stored on a file system.\n"
- title: 8.9.  Key Entropy and Random Values
  contents:
  - "8.9.  Key Entropy and Random Values\n   See Section 10.1 of [JWS] for security\
    \ considerations on key entropy\n   and random values.\n"
- title: 8.10.  Differences between Digital Signatures and MACs
  contents:
  - "8.10.  Differences between Digital Signatures and MACs\n   See Section 10.5 of\
    \ [JWS] for security considerations on differences\n   between digital signatures\
    \ and MACs.\n"
- title: 8.11.  Using Matching Algorithm Strengths
  contents:
  - "8.11.  Using Matching Algorithm Strengths\n   See Section 11.3 of [JWE] for security\
    \ considerations on using\n   matching algorithm strengths.\n"
- title: 8.12.  Adaptive Chosen-Ciphertext Attacks
  contents:
  - "8.12.  Adaptive Chosen-Ciphertext Attacks\n   See Section 11.4 of [JWE] for security\
    \ considerations on adaptive\n   chosen-ciphertext attacks.\n"
- title: 8.13.  Timing Attacks
  contents:
  - "8.13.  Timing Attacks\n   See Section 10.9 of [JWS] and Section 11.5 of [JWE]\
    \ for security\n   considerations on timing attacks.\n"
- title: 8.14.  RSA Private Key Representations and Blinding
  contents:
  - "8.14.  RSA Private Key Representations and Blinding\n   See Section 9.3 of [JWK]\
    \ for security considerations on RSA private\n   key representations and blinding.\n"
- title: 9.  Internationalization Considerations
  contents:
  - "9.  Internationalization Considerations\n   Passwords obtained from users are\
    \ likely to require preparation and\n   normalization to account for differences\
    \ of octet sequences generated\n   by different input devices, locales, etc. \
    \ It is RECOMMENDED that\n   applications perform the steps outlined in [PRECIS]\
    \ to prepare a\n   password supplied directly by a user before performing key\
    \ derivation\n   and encryption.\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [AES]      National Institute of Standards and\
    \ Technology (NIST),\n              \"Advanced Encryption Standard (AES)\", FIPS\
    \ PUB 197,\n              November 2001, <http://csrc.nist.gov/publications/\n\
    \              fips/fips197/fips-197.pdf>.\n   [Boneh99]  \"Twenty Years of Attacks\
    \ on the RSA Cryptosystem\", Notices\n              of the American Mathematical\
    \ Society (AMS), Vol. 46,\n              No. 2, pp. 203-213, 1999, <http://crypto.stanford.edu/\n\
    \              ~dabo/pubs/papers/RSA-survey.pdf>.\n   [DSS]      National Institute\
    \ of Standards and Technology (NIST),\n              \"Digital Signature Standard\
    \ (DSS)\", FIPS PUB 186-4, July\n              2013, <http://nvlpubs.nist.gov/nistpubs/FIPS/\n\
    \              NIST.FIPS.186-4.pdf>.\n   [JWE]      Jones, M. and J. Hildebrand,\
    \ \"JSON Web Encryption (JWE)\",\n              RFC 7516, DOI 10.17487/RFC7516,\
    \ May 2015,\n              <http://www.rfc-editor.org/info/rfc7516>.\n   [JWK]\
    \      Jones, M., \"JSON Web Key (JWK)\", RFC 7517,\n              DOI 10.17487/RFC7517,\
    \ May 2015,\n              <http://www.rfc-editor.org/info/rfc7517>.\n   [JWS]\
    \      Jones, M., Bradley, J., and N. Sakimura, \"JSON Web\n              Signature\
    \ (JWS)\", RFC 7515, DOI 10.17487/RFC7515, May\n              2015, <http://www.rfc-editor.org/info/rfc7515>.\n\
    \   [NIST.800-38A]\n              National Institute of Standards and Technology\
    \ (NIST),\n              \"Recommendation for Block Cipher Modes of Operation\"\
    , NIST\n              Special Publication 800-38A, December 2001,\n          \
    \    <http://csrc.nist.gov/publications/nistpubs/800-38a/\n              sp800-38a.pdf>.\n\
    \   [NIST.800-38D]\n              National Institute of Standards and Technology\
    \ (NIST),\n              \"Recommendation for Block Cipher Modes of Operation:\n\
    \              Galois/Counter Mode (GCM) and GMAC\", NIST Special\n          \
    \    Publication 800-38D, December 2001,\n              <http://csrc.nist.gov/publications/nistpubs/800-38D/\n\
    \              SP-800-38D.pdf>.\n   [NIST.800-56A]\n              National Institute\
    \ of Standards and Technology (NIST),\n              \"Recommendation for Pair-Wise\
    \ Key Establishment Schemes\n              Using Discrete Logarithm Cryptography\"\
    , NIST Special\n              Publication 800-56A, Revision 2, May 2013,\n   \
    \           <http://nvlpubs.nist.gov/nistpubs/SpecialPublications/\n         \
    \     NIST.SP.800-56Ar2.pdf>.\n   [NIST.800-57]\n              National Institute\
    \ of Standards and Technology (NIST),\n              \"Recommendation for Key\
    \ Management - Part 1: General\n              (Revision 3)\", NIST Special Publication\
    \ 800-57, Part 1,\n              Revision 3, July 2012, <http://csrc.nist.gov/publications/\n\
    \              nistpubs/800-57/sp800-57_part1_rev3_general.pdf>.\n   [RFC20] \
    \   Cerf, V., \"ASCII format for Network Interchange\", STD 80,\n            \
    \  RFC 20, DOI 10.17487/RFC0020, October 1969,\n              <http://www.rfc-editor.org/info/rfc20>.\n\
    \   [RFC2104]  Krawczyk, H., Bellare, M., and R. Canetti, \"HMAC:\n          \
    \    Keyed-Hashing for Message Authentication\", RFC 2104,\n              DOI\
    \ 10.17487/RFC2104, February 1997,\n              <http://www.rfc-editor.org/info/rfc2104>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC2898]\
    \  Kaliski, B., \"PKCS #5: Password-Based Cryptography\n              Specification\
    \ Version 2.0\", RFC 2898,\n              DOI 10.17487/RFC2898, September 2000,\n\
    \              <http://www.rfc-editor.org/info/rfc2898>.\n   [RFC3394]  Schaad,\
    \ J. and R. Housley, \"Advanced Encryption Standard\n              (AES) Key Wrap\
    \ Algorithm\", RFC 3394, DOI 10.17487/RFC3394,\n              September 2002,\
    \ <http://www.rfc-editor.org/info/rfc3394>.\n   [RFC3447]  Jonsson, J. and B.\
    \ Kaliski, \"Public-Key Cryptography\n              Standards (PKCS) #1: RSA Cryptography\
    \ Specifications\n              Version 2.1\", RFC 3447, DOI 10.17487/RFC3447,\
    \ February\n              2003, <http://www.rfc-editor.org/info/rfc3447>.\n  \
    \ [RFC3629]  Yergeau, F., \"UTF-8, a transformation format of ISO\n          \
    \    10646\", STD 63, RFC 3629, DOI 10.17487/RFC3629, November\n             \
    \ 2003, <http://www.rfc-editor.org/info/rfc3629>.\n   [RFC4868]  Kelly, S. and\
    \ S. Frankel, \"Using HMAC-SHA-256,\n              HMAC-SHA-384, and HMAC-SHA-512\
    \ with IPsec\", RFC 4868,\n              DOI 10.17487/RFC4868, May 2007,\n   \
    \           <http://www.rfc-editor.org/info/rfc4868>.\n   [RFC4949]  Shirey, R.,\
    \ \"Internet Security Glossary, Version 2\",\n              FYI 36, RFC 4949,\
    \ DOI 10.17487/RFC4949, August 2007,\n              <http://www.rfc-editor.org/info/rfc4949>.\n\
    \   [RFC5652]  Housley, R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n\
    \              RFC 5652, DOI 10.17487/RFC5652, September 2009,\n             \
    \ <http://www.rfc-editor.org/info/rfc5652>.\n   [RFC6090]  McGrew, D., Igoe, K.,\
    \ and M. Salter, \"Fundamental Elliptic\n              Curve Cryptography Algorithms\"\
    , RFC 6090,\n              DOI 10.17487/RFC6090, February 2011,\n            \
    \  <http://www.rfc-editor.org/info/rfc6090>.\n   [RFC7159]  Bray, T., Ed., \"\
    The JavaScript Object Notation (JSON) Data\n              Interchange Format\"\
    , RFC 7159, DOI 10.17487/RFC7159, March\n              2014, <http://www.rfc-editor.org/info/rfc7159>.\n\
    \   [SEC1]     Standards for Efficient Cryptography Group, \"SEC 1:\n        \
    \      Elliptic Curve Cryptography\", Version 2.0, May 2009,\n              <http://www.secg.org/sec1-v2.pdf>.\n\
    \   [SHS]      National Institute of Standards and Technology (NIST),\n      \
    \        \"Secure Hash Standard (SHS)\", FIPS PUB 180-4, March 2012,\n       \
    \       <http://csrc.nist.gov/publications/fips/fips180-4/\n              fips-180-4.pdf>.\n\
    \   [UNICODE]  The Unicode Consortium, \"The Unicode Standard\",\n           \
    \   <http://www.unicode.org/versions/latest/>.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [AEAD-CBC-SHA]\n              McGrew, D., Foley,\
    \ J., and K. Paterson, \"Authenticated\n              Encryption with AES-CBC\
    \ and HMAC-SHA\", Work in Progress,\n              draft-mcgrew-aead-aes-cbc-hmac-sha2-05,\
    \ July 2014.\n   [CanvasApp]\n              Facebook, \"Canvas Applications\"\
    , 2010,\n              <http://developers.facebook.com/docs/authentication/\n\
    \              canvas>.\n   [JCA]      Oracle, \"Java Cryptography Architecture\
    \ (JCA) Reference\n              Guide\", 2014, <http://docs.oracle.com/javase/8/docs/techno\n\
    \              tes/guides/security/crypto/CryptoSpec.html>.\n   [JSE]      Bradley,\
    \ J. and N. Sakimura (editor), \"JSON Simple\n              Encryption\", September\
    \ 2010,\n              <http://jsonenc.info/enc/1.0/>.\n   [JSMS]     Rescorla,\
    \ E. and J. Hildebrand, \"JavaScript Message\n              Security Format\"\
    , Work in Progress,\n              draft-rescorla-jsms-00, March 2011.\n   [JSS]\
    \      Bradley, J. and N. Sakimura, Ed., \"JSON Simple Sign 1.0\",\n         \
    \     Draft 01, September 2010, <http://jsonenc.info/jss/1.0/>.\n   [JWE-JWK]\
    \  Miller, M., \"Using JavaScript Object Notation (JSON) Web\n              Encryption\
    \ (JWE) for Protecting JSON Web Key (JWK)\n              Objects\", Work in Progress,\n\
    \              draft-miller-jose-jwe-protected-jwk-02, June 2013.\n   [MagicSignatures]\n\
    \              Panzer, J., Ed., Laurie, B., and D. Balfanz, \"Magic\n        \
    \      Signatures\", January 2011,\n              <http://salmon-protocol.googlecode.com/svn/trunk/\n\
    \              draft-panzer-magicsig-01.html>.\n   [NIST.800-107]\n          \
    \    National Institute of Standards and Technology (NIST),\n              \"\
    Recommendation for Applications Using Approved Hash\n              Algorithms\"\
    , NIST Special Publication 800-107, Revision 1,\n              August 2012, <http://csrc.nist.gov/publications/\n\
    \              nistpubs/800-107-rev1/sp800-107-rev1.pdf>.\n   [NIST.800-63-2]\n\
    \              National Institute of Standards and Technology (NIST),\n      \
    \        \"Electronic Authentication Guideline\", NIST Special\n             \
    \ Publication 800-63-2, August 2013,\n              <http://nvlpubs.nist.gov/nistpubs/SpecialPublications/\n\
    \              NIST.SP.800-63-2.pdf>.\n   [PRECIS]   Saint-Andre, P. and A. Melnikov,\
    \ \"Preparation,\n              Enforcement, and Comparison of Internationalized\
    \ Strings\n              Representing Usernames and Passwords\", Work in Progress,\n\
    \              draft-ietf-precis-saslprepbis-16, April 2015.\n   [RFC2631]  Rescorla,\
    \ E., \"Diffie-Hellman Key Agreement Method\",\n              RFC 2631, DOI 10.17487/RFC2631,\
    \ June 1999,\n              <http://www.rfc-editor.org/info/rfc2631>.\n   [RFC3275]\
    \  Eastlake 3rd, D., Reagle, J., and D. Solo, \"(Extensible\n              Markup\
    \ Language) XML-Signature Syntax and Processing\",\n              RFC 3275, DOI\
    \ 10.17487/RFC3275, March 2002,\n              <http://www.rfc-editor.org/info/rfc3275>.\n\
    \   [RFC4086]  Eastlake 3rd, D., Schiller, J., and S. Crocker,\n             \
    \ \"Randomness Requirements for Security\", BCP 106, RFC 4086,\n             \
    \ DOI 10.17487/RFC4086, June 2005,\n              <http://www.rfc-editor.org/info/rfc4086>.\n\
    \   [RFC5116]  McGrew, D., \"An Interface and Algorithms for Authenticated\n \
    \             Encryption\", RFC 5116, DOI 10.17487/RFC5116, January 2008,\n  \
    \            <http://www.rfc-editor.org/info/rfc5116>.\n   [RFC5226]  Narten,\
    \ T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA Considerations\
    \ Section in RFCs\", BCP 26, RFC 5226,\n              DOI 10.17487/RFC5226, May\
    \ 2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n   [W3C.NOTE-xmldsig-core2-20130411]\n\
    \              Eastlake, D., Reagle, J., Solo, D., Hirsch, F., Roessler,\n   \
    \           T., Yiu, K., Datta, P., and S. Cantor, \"XML Signature\n         \
    \     Syntax and Processing Version 2.0\", World Wide Web\n              Consortium\
    \ Note NOTE-xmldsig-core2-20130411, April 2013,\n              <http://www.w3.org/TR/2013/NOTE-xmldsig-core2-20130411/>.\n\
    \   [W3C.REC-xmlenc-core-20021210]\n              Eastlake, D. and J. Reagle,\
    \ \"XML Encryption Syntax and\n              Processing\", World Wide Web Consortium\
    \ Recommendation REC-\n              xmlenc-core-20021210, December 2002,\n  \
    \            <http://www.w3.org/TR/2002/REC-xmlenc-core-20021210>.\n   [W3C.REC-xmlenc-core1-20130411]\n\
    \              Eastlake, D., Reagle, J., Hirsch, F., and T. Roessler,\n      \
    \        \"XML Encryption Syntax and Processing Version 1.1\", World\n       \
    \       Wide Web Consortium Recommendation REC-xmlenc-\n              core1-20130411,\
    \ April 2013,\n              <http://www.w3.org/TR/2013/REC-xmlenc-core1-20130411/>.\n"
- title: Appendix A.  Algorithm Identifier Cross-Reference
  contents:
  - "Appendix A.  Algorithm Identifier Cross-Reference\n   This appendix contains\
    \ tables cross-referencing the cryptographic\n   algorithm identifier values defined\
    \ in this specification with the\n   equivalent identifiers used by other standards\
    \ and software packages.\n   See XML DSIG [RFC3275], XML DSIG 2.0\n   [W3C.NOTE-xmldsig-core2-20130411],\
    \ XML Encryption\n   [W3C.REC-xmlenc-core-20021210], XML Encryption 1.1\n   [W3C.REC-xmlenc-core1-20130411],\
    \ and Java Cryptography Architecture\n   [JCA] for more information about the\
    \ names defined by those\n   documents.\n"
- title: A.1.  Digital Signature/MAC Algorithm Identifier Cross-Reference
  contents:
  - "A.1.  Digital Signature/MAC Algorithm Identifier Cross-Reference\n   This section\
    \ contains a table cross-referencing the JWS digital\n   signature and MAC \"\
    alg\" (algorithm) values defined in this\n   specification with the equivalent\
    \ identifiers used by other standards\n   and software packages.\n   +-------------------------------------------------------------------+\n\
    \   | JWS      | XML DSIG                                               |\n  \
    \ | | JCA                                   | OID                     |\n   +-------------------------------------------------------------------+\n\
    \   | HS256    | http://www.w3.org/2001/04/xmldsig-more#hmac-sha256     |\n  \
    \ | | HmacSHA256                            | 1.2.840.113549.2.9      |\n   +-------------------------------------------------------------------+\n\
    \   | HS384    | http://www.w3.org/2001/04/xmldsig-more#hmac-sha384     |\n  \
    \ | | HmacSHA384                            | 1.2.840.113549.2.10     |\n   +-------------------------------------------------------------------+\n\
    \   | HS512    | http://www.w3.org/2001/04/xmldsig-more#hmac-sha512     |\n  \
    \ | | HmacSHA512                            | 1.2.840.113549.2.11     |\n   +-------------------------------------------------------------------+\n\
    \   | RS256    | http://www.w3.org/2001/04/xmldsig-more#rsa-sha256      |\n  \
    \ | | SHA256withRSA                         | 1.2.840.113549.1.1.11   |\n   +-------------------------------------------------------------------+\n\
    \   | RS384    | http://www.w3.org/2001/04/xmldsig-more#rsa-sha384      |\n  \
    \ | | SHA384withRSA                         | 1.2.840.113549.1.1.12   |\n   +-------------------------------------------------------------------+\n\
    \   | RS512    | http://www.w3.org/2001/04/xmldsig-more#rsa-sha512      |\n  \
    \ | | SHA512withRSA                         | 1.2.840.113549.1.1.13   |\n   +-------------------------------------------------------------------+\n\
    \   | ES256    | http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha256    |\n  \
    \ | | SHA256withECDSA                       | 1.2.840.10045.4.3.2     |\n   +-------------------------------------------------------------------+\n\
    \   | ES384    | http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha384    |\n  \
    \ | | SHA384withECDSA                       | 1.2.840.10045.4.3.3     |\n   +-------------------------------------------------------------------+\n\
    \   | ES512    | http://www.w3.org/2001/04/xmldsig-more#ecdsa-sha512    |\n  \
    \ | | SHA512withECDSA                       | 1.2.840.10045.4.3.4     |\n   +-------------------------------------------------------------------+\n\
    \   | PS256    | http://www.w3.org/2007/05/xmldsig-more#sha256-rsa-MGF1 |\n  \
    \ | | SHA256withRSAandMGF1                  | 1.2.840.113549.1.1.10   |\n   +-------------------------------------------------------------------+\n\
    \   | PS384    | http://www.w3.org/2007/05/xmldsig-more#sha384-rsa-MGF1 |\n  \
    \ | | SHA384withRSAandMGF1                  | 1.2.840.113549.1.1.10   |\n   +-------------------------------------------------------------------+\n\
    \   | PS512    | http://www.w3.org/2007/05/xmldsig-more#sha512-rsa-MGF1 |\n  \
    \ | | SHA512withRSAandMGF1                  | 1.2.840.113549.1.1.10   |\n   +-------------------------------------------------------------------+\n"
- title: A.2.  Key Management Algorithm Identifier Cross-Reference
  contents:
  - "A.2.  Key Management Algorithm Identifier Cross-Reference\n   This section contains\
    \ a table cross-referencing the JWE \"alg\"\n   (algorithm) values defined in\
    \ this specification with the equivalent\n   identifiers used by other standards\
    \ and software packages.\n   +-------------------------------------------------------------------+\n\
    \   | JWE           | XML ENC                                           |\n  \
    \ | | JCA                                   | OID                     |\n   +-------------------------------------------------------------------+\n\
    \   | RSA1_5        | http://www.w3.org/2001/04/xmlenc#rsa-1_5          |\n  \
    \ | | RSA/ECB/PKCS1Padding                  | 1.2.840.113549.1.1.1    |\n   +-------------------------------------------------------------------+\n\
    \   | RSA-OAEP      | http://www.w3.org/2001/04/xmlenc#rsa-oaep-mgf1p   |\n  \
    \ | | RSA/ECB/OAEPWithSHA-1AndMGF1Padding   | 1.2.840.113549.1.1.7    |\n   +-------------------------------------------------------------------+\n\
    \   | RSA-OAEP-256  | http://www.w3.org/2009/xmlenc11#rsa-oaep          |\n  \
    \ |               | & http://www.w3.org/2009/xmlenc11#mgf1sha256      |\n   |\
    \ | RSA/ECB/OAEPWithSHA-256AndMGF1Padding |                         |\n   | |\
    \ & MGF1ParameterSpec.SHA256            | 1.2.840.113549.1.1.7    |\n   +-------------------------------------------------------------------+\n\
    \   | ECDH-ES       | http://www.w3.org/2009/xmlenc11#ECDH-ES           |\n  \
    \ | | ECDH                                  | 1.3.132.1.12            |\n   +-------------------------------------------------------------------+\n\
    \   | A128KW        | http://www.w3.org/2001/04/xmlenc#kw-aes128        |\n  \
    \ | | AESWrap                               | 2.16.840.1.101.3.4.1.5  |\n   +-------------------------------------------------------------------+\n\
    \   | A192KW        | http://www.w3.org/2001/04/xmlenc#kw-aes192        |\n  \
    \ | | AESWrap                               | 2.16.840.1.101.3.4.1.25 |\n   +-------------------------------------------------------------------+\n\
    \   | A256KW        | http://www.w3.org/2001/04/xmlenc#kw-aes256        |\n  \
    \ | | AESWrap                               | 2.16.840.1.101.3.4.1.45 |\n   +-------------------------------------------------------------------+\n"
- title: A.3.  Content Encryption Algorithm Identifier Cross-Reference
  contents:
  - "A.3.  Content Encryption Algorithm Identifier Cross-Reference\n   This section\
    \ contains a table cross-referencing the JWE \"enc\"\n   (encryption algorithm)\
    \ values defined in this specification with the\n   equivalent identifiers used\
    \ by other standards and software packages.\n   For the composite algorithms \"\
    A128CBC-HS256\", \"A192CBC-HS384\", and\n   \"A256CBC-HS512\", the corresponding\
    \ AES-CBC algorithm identifiers are\n   listed.\n   +-------------------------------------------------------------------+\n\
    \   | JWE           | XML ENC                                           |\n  \
    \ | | JCA                                   | OID                     |\n   +-------------------------------------------------------------------+\n\
    \   | A128CBC-HS256 | http://www.w3.org/2001/04/xmlenc#aes128-cbc       |\n  \
    \ | | AES/CBC/PKCS5Padding                  | 2.16.840.1.101.3.4.1.2  |\n   +-------------------------------------------------------------------+\n\
    \   | A192CBC-HS384 | http://www.w3.org/2001/04/xmlenc#aes192-cbc       |\n  \
    \ | | AES/CBC/PKCS5Padding                  | 2.16.840.1.101.3.4.1.22 |\n   +-------------------------------------------------------------------+\n\
    \   | A256CBC-HS512 | http://www.w3.org/2001/04/xmlenc#aes256-cbc       |\n  \
    \ | | AES/CBC/PKCS5Padding                  | 2.16.840.1.101.3.4.1.42 |\n   +-------------------------------------------------------------------+\n\
    \   | A128GCM       | http://www.w3.org/2009/xmlenc11#aes128-gcm        |\n  \
    \ | | AES/GCM/NoPadding                     | 2.16.840.1.101.3.4.1.6  |\n   +-------------------------------------------------------------------+\n\
    \   | A192GCM       | http://www.w3.org/2009/xmlenc11#aes192-gcm        |\n  \
    \ | | AES/GCM/NoPadding                     | 2.16.840.1.101.3.4.1.26 |\n   +-------------------------------------------------------------------+\n\
    \   | A256GCM       | http://www.w3.org/2009/xmlenc11#aes256-gcm        |\n  \
    \ | | AES/GCM/NoPadding                     | 2.16.840.1.101.3.4.1.46 |\n   +-------------------------------------------------------------------+\n"
- title: Appendix B.  Test Cases for AES_CBC_HMAC_SHA2 Algorithms
  contents:
  - "Appendix B.  Test Cases for AES_CBC_HMAC_SHA2 Algorithms\n   The following test\
    \ cases can be used to validate implementations of\n   the AES_CBC_HMAC_SHA2 algorithms\
    \ defined in Section 5.2.  They are\n   also intended to correspond to test cases\
    \ that may appear in a future\n   version of [AEAD-CBC-SHA], demonstrating that\
    \ the cryptographic\n   computations performed are the same.\n   The variable\
    \ names are those defined in Section 5.2.  All values are\n   hexadecimal.\n"
- title: B.1.  Test Cases for AES_128_CBC_HMAC_SHA_256
  contents:
  - "B.1.  Test Cases for AES_128_CBC_HMAC_SHA_256\n   AES_128_CBC_HMAC_SHA_256\n\
    \     K =       00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f\n            \
    \   10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f\n     MAC_KEY = 00 01 02 03\
    \ 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f\n     ENC_KEY = 10 11 12 13 14 15 16 17\
    \ 18 19 1a 1b 1c 1d 1e 1f\n     P =       41 20 63 69 70 68 65 72 20 73 79 73\
    \ 74 65 6d 20\n               6d 75 73 74 20 6e 6f 74 20 62 65 20 72 65 71 75\n\
    \               69 72 65 64 20 74 6f 20 62 65 20 73 65 63 72 65\n            \
    \   74 2c 20 61 6e 64 20 69 74 20 6d 75 73 74 20 62\n               65 20 61 62\
    \ 6c 65 20 74 6f 20 66 61 6c 6c 20 69\n               6e 74 6f 20 74 68 65 20\
    \ 68 61 6e 64 73 20 6f 66\n               20 74 68 65 20 65 6e 65 6d 79 20 77\
    \ 69 74 68 6f\n               75 74 20 69 6e 63 6f 6e 76 65 6e 69 65 6e 63 65\n\
    \     IV =      1a f3 8c 2d c2 b9 6f fd d8 66 94 09 23 41 bc 04\n     A =    \
    \   54 68 65 20 73 65 63 6f 6e 64 20 70 72 69 6e 63\n               69 70 6c 65\
    \ 20 6f 66 20 41 75 67 75 73 74 65 20\n               4b 65 72 63 6b 68 6f 66\
    \ 66 73\n     AL =      00 00 00 00 00 00 01 50\n     E =       c8 0e df a3 2d\
    \ df 39 d5 ef 00 c0 b4 68 83 42 79\n               a2 e4 6a 1b 80 49 f7 92 f7\
    \ 6b fe 54 b9 03 a9 c9\n               a9 4a c9 b4 7a d2 65 5c 5f 10 f9 ae f7\
    \ 14 27 e2\n               fc 6f 9b 3f 39 9a 22 14 89 f1 63 62 c7 03 23 36\n \
    \              09 d4 5a c6 98 64 e3 32 1c f8 29 35 ac 40 96 c8\n             \
    \  6e 13 33 14 c5 40 19 e8 ca 79 80 df a4 b9 cf 1b\n               38 4c 48 6f\
    \ 3a 54 c5 10 78 15 8e e5 d7 9d e5 9f\n               bd 34 d8 48 b3 d6 95 50\
    \ a6 76 46 34 44 27 ad e5\n               4b 88 51 ff b5 98 f7 f8 00 74 b9 47\
    \ 3c 82 e2 db\n     M =       65 2c 3f a3 6b 0a 7c 5b 32 19 fa b3 a3 0b c1 c4\n\
    \               e6 e5 45 82 47 65 15 f0 ad 9f 75 a2 b7 1c 73 ef\n     T =    \
    \   65 2c 3f a3 6b 0a 7c 5b 32 19 fa b3 a3 0b c1 c4\n"
- title: B.2.  Test Cases for AES_192_CBC_HMAC_SHA_384
  contents:
  - "B.2.  Test Cases for AES_192_CBC_HMAC_SHA_384\n     K =       00 01 02 03 04\
    \ 05 06 07 08 09 0a 0b 0c 0d 0e 0f\n               10 11 12 13 14 15 16 17 18\
    \ 19 1a 1b 1c 1d 1e 1f\n               20 21 22 23 24 25 26 27 28 29 2a 2b 2c\
    \ 2d 2e 2f\n     MAC_KEY = 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f\n \
    \              10 11 12 13 14 15 16 17\n     ENC_KEY = 18 19 1a 1b 1c 1d 1e 1f\
    \ 20 21 22 23 24 25 26 27\n               28 29 2a 2b 2c 2d 2e 2f\n     P =  \
    \     41 20 63 69 70 68 65 72 20 73 79 73 74 65 6d 20\n               6d 75 73\
    \ 74 20 6e 6f 74 20 62 65 20 72 65 71 75\n               69 72 65 64 20 74 6f\
    \ 20 62 65 20 73 65 63 72 65\n               74 2c 20 61 6e 64 20 69 74 20 6d\
    \ 75 73 74 20 62\n               65 20 61 62 6c 65 20 74 6f 20 66 61 6c 6c 20\
    \ 69\n               6e 74 6f 20 74 68 65 20 68 61 6e 64 73 20 6f 66\n       \
    \        20 74 68 65 20 65 6e 65 6d 79 20 77 69 74 68 6f\n               75 74\
    \ 20 69 6e 63 6f 6e 76 65 6e 69 65 6e 63 65\n     IV =      1a f3 8c 2d c2 b9\
    \ 6f fd d8 66 94 09 23 41 bc 04\n     A =       54 68 65 20 73 65 63 6f 6e 64\
    \ 20 70 72 69 6e 63\n               69 70 6c 65 20 6f 66 20 41 75 67 75 73 74\
    \ 65 20\n               4b 65 72 63 6b 68 6f 66 66 73\n     AL =      00 00 00\
    \ 00 00 00 01 50\n     E =       ea 65 da 6b 59 e6 1e db 41 9b e6 2d 19 71 2a\
    \ e5\n               d3 03 ee b5 00 52 d0 df d6 69 7f 77 22 4c 8e db\n       \
    \        00 0d 27 9b dc 14 c1 07 26 54 bd 30 94 42 30 c6\n               57 be\
    \ d4 ca 0c 9f 4a 84 66 f2 2b 22 6d 17 46 21\n               4b f8 cf c2 40 0a\
    \ dd 9f 51 26 e4 79 66 3f c9 0b\n               3b ed 78 7a 2f 0f fc bf 39 04\
    \ be 2a 64 1d 5c 21\n               05 bf e5 91 ba e2 3b 1d 74 49 e5 32 ee f6\
    \ 0a 9a\n               c8 bb 6c 6b 01 d3 5d 49 78 7b cd 57 ef 48 49 27\n    \
    \           f2 80 ad c9 1a c0 c4 e7 9c 7b 11 ef c6 00 54 e3\n     M =       84\
    \ 90 ac 0e 58 94 9b fe 51 87 5d 73 3f 93 ac 20\n               75 16 80 39 cc\
    \ c7 33 d7 45 94 f8 86 b3 fa af d4\n               86 f2 5c 71 31 e3 28 1e 36\
    \ c7 a2 d1 30 af de 57\n     T =       84 90 ac 0e 58 94 9b fe 51 87 5d 73 3f\
    \ 93 ac 20\n               75 16 80 39 cc c7 33 d7\n"
- title: B.3.  Test Cases for AES_256_CBC_HMAC_SHA_512
  contents:
  - "B.3.  Test Cases for AES_256_CBC_HMAC_SHA_512\n     K =       00 01 02 03 04\
    \ 05 06 07 08 09 0a 0b 0c 0d 0e 0f\n               10 11 12 13 14 15 16 17 18\
    \ 19 1a 1b 1c 1d 1e 1f\n               20 21 22 23 24 25 26 27 28 29 2a 2b 2c\
    \ 2d 2e 2f\n               30 31 32 33 34 35 36 37 38 39 3a 3b 3c 3d 3e 3f\n \
    \    MAC_KEY = 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f\n             \
    \  10 11 12 13 14 15 16 17 18 19 1a 1b 1c 1d 1e 1f\n     ENC_KEY = 20 21 22 23\
    \ 24 25 26 27 28 29 2a 2b 2c 2d 2e 2f\n               30 31 32 33 34 35 36 37\
    \ 38 39 3a 3b 3c 3d 3e 3f\n     P =       41 20 63 69 70 68 65 72 20 73 79 73\
    \ 74 65 6d 20\n               6d 75 73 74 20 6e 6f 74 20 62 65 20 72 65 71 75\n\
    \               69 72 65 64 20 74 6f 20 62 65 20 73 65 63 72 65\n            \
    \   74 2c 20 61 6e 64 20 69 74 20 6d 75 73 74 20 62\n               65 20 61 62\
    \ 6c 65 20 74 6f 20 66 61 6c 6c 20 69\n               6e 74 6f 20 74 68 65 20\
    \ 68 61 6e 64 73 20 6f 66\n               20 74 68 65 20 65 6e 65 6d 79 20 77\
    \ 69 74 68 6f\n               75 74 20 69 6e 63 6f 6e 76 65 6e 69 65 6e 63 65\n\
    \     IV =      1a f3 8c 2d c2 b9 6f fd d8 66 94 09 23 41 bc 04\n     A =    \
    \   54 68 65 20 73 65 63 6f 6e 64 20 70 72 69 6e 63\n               69 70 6c 65\
    \ 20 6f 66 20 41 75 67 75 73 74 65 20\n               4b 65 72 63 6b 68 6f 66\
    \ 66 73\n     AL =      00 00 00 00 00 00 01 50\n     E =       4a ff aa ad b7\
    \ 8c 31 c5 da 4b 1b 59 0d 10 ff bd\n               3d d8 d5 d3 02 42 35 26 91\
    \ 2d a0 37 ec bc c7 bd\n               82 2c 30 1d d6 7c 37 3b cc b5 84 ad 3e\
    \ 92 79 c2\n               e6 d1 2a 13 74 b7 7f 07 75 53 df 82 94 10 44 6b\n \
    \              36 eb d9 70 66 29 6a e6 42 7e a7 5c 2e 08 46 a1\n             \
    \  1a 09 cc f5 37 0d c8 0b fe cb ad 28 c7 3f 09 b3\n               a3 b7 5e 66\
    \ 2a 25 94 41 0a e4 96 b2 e2 e6 60 9e\n               31 e6 e0 2c c8 37 f0 53\
    \ d2 1f 37 ff 4f 51 95 0b\n               be 26 38 d0 9d d7 a4 93 09 30 80 6d\
    \ 07 03 b1 f6\n     M =       4d d3 b4 c0 88 a7 f4 5c 21 68 39 64 5b 20 12 bf\n\
    \               2e 62 69 a8 c5 6a 81 6d bc 1b 26 77 61 95 5b c5\n            \
    \   fd 30 a5 65 c6 16 ff b2 f3 64 ba ec e6 8f c4 07\n               53 bc fc 02\
    \ 5d de 36 93 75 4a a1 f5 c3 37 3b 9c\n     T =       4d d3 b4 c0 88 a7 f4 5c\
    \ 21 68 39 64 5b 20 12 bf\n               2e 62 69 a8 c5 6a 81 6d bc 1b 26 77\
    \ 61 95 5b c5\n"
- title: Appendix C.  Example ECDH-ES Key Agreement Computation
  contents:
  - "Appendix C.  Example ECDH-ES Key Agreement Computation\n   This example uses\
    \ ECDH-ES Key Agreement and the Concat KDF to derive\n   the CEK in the manner\
    \ described in Section 4.6.  In this example, the\n   ECDH-ES Direct Key Agreement\
    \ mode (\"alg\" value \"ECDH-ES\") is used to\n   produce an agreed-upon key for\
    \ AES GCM with a 128-bit key (\"enc\"\n   value \"A128GCM\").\n   In this example,\
    \ a producer Alice is encrypting content to a consumer\n   Bob.  The producer\
    \ (Alice) generates an ephemeral key for the key\n   agreement computation.  Alice's\
    \ ephemeral key (in JWK format) used\n   for the key agreement computation in\
    \ this example (including the\n   private part) is:\n     {\"kty\":\"EC\",\n \
    \     \"crv\":\"P-256\",\n      \"x\":\"gI0GAILBdu7T53akrFmMyGcsF3n5dO7MmwNBHKW5SV0\"\
    ,\n      \"y\":\"SLW_xSffzlPWrHEVI30DHM_4egVwt3NQqeUD7nMFpps\",\n      \"d\":\"\
    0_NxaRPUMQoAJt50Gz8YiTr8gRTwyEaCumd-MToTmIo\"\n     }\n   The consumer's (Bob's)\
    \ key (in JWK format) used for the key agreement\n   computation in this example\
    \ (including the private part) is:\n     {\"kty\":\"EC\",\n      \"crv\":\"P-256\"\
    ,\n      \"x\":\"weNJy2HscCSM6AEDTDg04biOvhFhyyWvOHQfeF_PxMQ\",\n      \"y\":\"\
    e8lnCO-AlStT-NJVX-crhB7QRYhiix03illJOVAOyck\",\n      \"d\":\"VEmDZpDXXK8p8N0Cndsxs924q6nS1RXFASRl6BfUqdw\"\
    \n     }\n   Header Parameter values used in this example are as follows.  The\n\
    \   \"apu\" (agreement PartyUInfo) Header Parameter value is the base64url\n \
    \  encoding of the UTF-8 string \"Alice\" and the \"apv\" (agreement\n   PartyVInfo)\
    \ Header Parameter value is the base64url encoding of the\n   UTF-8 string \"\
    Bob\".  The \"epk\" (ephemeral public key) Header\n   Parameter is used to communicate\
    \ the producer's (Alice's) ephemeral\n   public key value to the consumer (Bob).\n\
    \     {\"alg\":\"ECDH-ES\",\n      \"enc\":\"A128GCM\",\n      \"apu\":\"QWxpY2U\"\
    ,\n      \"apv\":\"Qm9i\",\n      \"epk\":\n       {\"kty\":\"EC\",\n        \"\
    crv\":\"P-256\",\n        \"x\":\"gI0GAILBdu7T53akrFmMyGcsF3n5dO7MmwNBHKW5SV0\"\
    ,\n        \"y\":\"SLW_xSffzlPWrHEVI30DHM_4egVwt3NQqeUD7nMFpps\"\n       }\n \
    \    }\n   The resulting Concat KDF [NIST.800-56A] parameter values are:\n   Z\n\
    \      This is set to the ECDH-ES key agreement output.  (This value is\n    \
    \  often not directly exposed by libraries, due to NIST security\n      requirements,\
    \ and only serves as an input to a KDF.)  In this\n      example, Z is following\
    \ the octet sequence (using JSON array\n      notation):\n      [158, 86, 217,\
    \ 29, 129, 113, 53, 211, 114, 131, 66, 131, 191, 132,\n      38, 156, 251, 49,\
    \ 110, 163, 218, 128, 106, 72, 246, 218, 167, 121,\n      140, 254, 144, 196].\n\
    \   keydatalen\n      This value is 128 - the number of bits in the desired output\
    \ key\n      (because \"A128GCM\" uses a 128-bit key).\n   AlgorithmID\n     \
    \ This is set to the octets representing the 32-bit big-endian value\n      7\
    \ - [0, 0, 0, 7] - the number of octets in the AlgorithmID content\n      \"A128GCM\"\
    , followed, by the octets representing the ASCII string\n      \"A128GCM\" - [65,\
    \ 49, 50, 56, 71, 67, 77].\n   PartyUInfo\n      This is set to the octets representing\
    \ the 32-bit big-endian value\n      5 - [0, 0, 0, 5] - the number of octets in\
    \ the PartyUInfo content\n      \"Alice\", followed, by the octets representing\
    \ the UTF-8 string\n      \"Alice\" - [65, 108, 105, 99, 101].\n   PartyVInfo\n\
    \      This is set to the octets representing the 32-bit big-endian value\n  \
    \    3 - [0, 0, 0, 3] - the number of octets in the PartyUInfo content\n     \
    \ \"Bob\", followed, by the octets representing the UTF-8 string \"Bob\"\n   \
    \   - [66, 111, 98].\n   SuppPubInfo\n      This is set to the octets representing\
    \ the 32-bit big-endian value\n      128 - [0, 0, 0, 128] - the keydatalen value.\n\
    \   SuppPrivInfo\n      This is set to the empty octet sequence.\n   Concatenating\
    \ the parameters AlgorithmID through SuppPubInfo results\n   in an OtherInfo value\
    \ of:\n   [0, 0, 0, 7, 65, 49, 50, 56, 71, 67, 77, 0, 0, 0, 5, 65, 108, 105,\n\
    \   99, 101, 0, 0, 0, 3, 66, 111, 98, 0, 0, 0, 128]\n   Concatenating the round\
    \ number 1 ([0, 0, 0, 1]), Z, and the OtherInfo\n   value results in the Concat\
    \ KDF round 1 hash input of:\n   [0, 0, 0, 1,\n   158, 86, 217, 29, 129, 113,\
    \ 53, 211, 114, 131, 66, 131, 191, 132, 38,\n   156, 251, 49, 110, 163, 218, 128,\
    \ 106, 72, 246, 218, 167, 121, 140,\n   254, 144, 196,\n   0, 0, 0, 7, 65, 49,\
    \ 50, 56, 71, 67, 77, 0, 0, 0, 5, 65, 108, 105, 99,\n   101, 0, 0, 0, 3, 66, 111,\
    \ 98, 0, 0, 0, 128]\n   The resulting derived key, which is the first 128 bits\
    \ of the round 1\n   hash output is:\n   [86, 170, 141, 234, 248, 35, 109, 32,\
    \ 92, 34, 40, 205, 113, 167, 16,\n   26]\n   The base64url-encoded representation\
    \ of this derived key is:\n     VqqN6vgjbSBcIijNcacQGg\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Solutions for signing and encrypting JSON content were previously\n\
    \   explored by \"Magic Signatures\" [MagicSignatures], \"JSON Simple Sign\n \
    \  1.0\" [JSS], \"Canvas Applications\" [CanvasApp], \"JSON Simple\n   Encryption\"\
    \ [JSE], and \"JavaScript Message Security Format\" [JSMS],\n   all of which influenced\
    \ this document.\n   The \"Authenticated Encryption with AES-CBC and HMAC-SHA\"\
    \n   [AEAD-CBC-SHA] specification, upon which the AES_CBC_HMAC_SHA2\n   algorithms\
    \ are based, was written by David A. McGrew and Kenny\n   Paterson.  The test\
    \ cases for AES_CBC_HMAC_SHA2 are based upon those\n   for [AEAD-CBC-SHA] by John\
    \ Foley.\n   Matt Miller wrote \"Using JavaScript Object Notation (JSON) Web\n\
    \   Encryption (JWE) for Protecting JSON Web Key (JWK) Objects\"\n   [JWE-JWK],\
    \ upon which the password-based encryption content of this\n   document is based.\n\
    \   This specification is the work of the JOSE working group, which\n   includes\
    \ dozens of active and dedicated participants.  In particular,\n   the following\
    \ individuals contributed ideas, feedback, and wording\n   that influenced this\
    \ specification:\n   Dirk Balfanz, Richard Barnes, Carsten Bormann, John Bradley,\
    \ Brian\n   Campbell, Alissa Cooper, Breno de Medeiros, Vladimir Dzhuvinov, Roni\n\
    \   Even, Stephen Farrell, Yaron Y. Goland, Dick Hardt, Joe Hildebrand,\n   Jeff\
    \ Hodges, Edmund Jay, Charlie Kaufman, Barry Leiba, James Manger,\n   Matt Miller,\
    \ Kathleen Moriarty, Tony Nadalin, Axel Nennker, John\n   Panzer, Emmanuel Raviart,\
    \ Eric Rescorla, Pete Resnick, Nat Sakimura,\n   Jim Schaad, Hannes Tschofenig,\
    \ and Sean Turner.\n   Jim Schaad and Karen O'Donoghue chaired the JOSE working\
    \ group and\n   Sean Turner, Stephen Farrell, and Kathleen Moriarty served as\n\
    \   Security Area Directors during the creation of this specification.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Michael B. Jones\n   Microsoft\n   EMail: mbj@microsoft.com\n\
    \   URI:   http://self-issued.info/\n"
