- title: __initial_text__
  contents:
  - ''
- title: Independent Submission                                            J. Lee
  contents:
  - "Independent Submission                                            J. Lee\n  \
    \           A Description of the ARIA Encryption Algorithm\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the ARIA encryption algorithm.  ARIA is\
    \ a\n   128-bit block cipher with 128-, 192-, and 256-bit keys.  The\n   algorithm\
    \ consists of a key scheduling part and data randomizing\n   part.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This is a contribution to\
    \ the RFC Series, independently of any other\n   RFC stream.  The RFC Editor has\
    \ chosen to publish this document at\n   its discretion and makes no statement\
    \ about its value for\n   implementation or deployment.  Documents approved for\
    \ publication by\n   the RFC Editor are not a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc5794.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  ARIA Overview
  contents:
  - "1.1.  ARIA Overview\n   ARIA is a general-purpose block cipher algorithm developed\
    \ by Korean\n   cryptographers in 2003.  It is an iterated block cipher with 128-,\n\
    \   192-, and 256-bit keys and encrypts 128-bit blocks in 12, 14, and 16\n   rounds,\
    \ depending on the key size.  It is secure and suitable for\n   most software\
    \ and hardware implementations on 32-bit and 8-bit\n   processors.  It was established\
    \ as a Korean standard block cipher\n   algorithm in 2004 [ARIAKS] and has been\
    \ widely used in Korea,\n   especially for government-to-public services.  It\
    \ was included in\n   PKCS #11 in 2007 [ARIAPKCS].\n"
- title: 2.  Algorithm Description
  contents:
  - "2.  Algorithm Description\n   The algorithm consists of a key scheduling part\
    \ and data randomizing\n   part.\n"
- title: 2.1.  Notations
  contents:
  - "2.1.  Notations\n   The following notations are used in this document to describe\
    \ the\n   algorithm.\n      ^   bitwise XOR operation\n      <<< left circular\
    \ rotation\n      >>> right circular rotation\n      ||  concatenation of bit\
    \ strings\n      0x  hexadecimal representation\n"
- title: 2.2.  Key Scheduling Part
  contents:
  - "2.2.  Key Scheduling Part\n   Let K denote a master key of 128, 192, or 256 bits.\
    \  Given the master\n   key K, we first define 128-bit values KL and KR as follows.\n\
    \   KL || KR = K || 0 ... 0,\n   where the number of zeros is 128, 64, or 0, depending\
    \ on the size of\n   K.  That is, KL is set to the leftmost 128 bits of K and\
    \ KR is set to\n   the remaining bits of K (if any), right-padded with zeros to\
    \ a\n   128-bit value.  Then, we define four 128-bit values (W0, W1, W2, and\n\
    \   W3) as the intermediate round values appearing in the encryption of\n   KL\
    \ || KR by a 3-round, 256-bit Feistel cipher.\n   W0 = KL,\n   W1 = FO(W0, CK1)\
    \ ^ KR,\n   W2 = FE(W1, CK2) ^ W0,\n   W3 = FO(W2, CK3) ^ W1.\n   Here, FO and\
    \ FE, respectively called odd and even round functions,\n   are defined in Section\
    \ 2.4.1.  CK1, CK2, and CK3 are 128-bit\n   constants, taking one of the following\
    \ values.\n   C1 =  0x517cc1b727220a94fe13abe8fa9a6ee0\n   C2 =  0x6db14acc9e21c820ff28b1d5ef5de2b0\n\
    \   C3 =  0xdb92371d2126e9700324977504e8c90e\n   These values are obtained from\
    \ the first 128*3 bits of the fractional\n   part of 1/PI, where PI is the circle\
    \ ratio.  Now the constants CK1,\n   CK2, and CK3 are defined by the following\
    \ table.\n       Key size  CK1  CK2  CK3\n         128     C1   C2   C3\n    \
    \     192     C2   C3   C1\n         256     C3   C1   C2\n   For example, if\
    \ the key size is 192 bits, CK1 = C2, CK2 = C3, and\n   CK3 = C1.\n   Once W0,\
    \ W1, W2, and W3 are determined, we compute encryption round\n   keys ek1, ...,\
    \ ek17 as follows.\n   ek1  = W0 ^(W1 >>> 19),\n   ek2  = W1 ^(W2 >>> 19),\n \
    \  ek3  = W2 ^(W3 >>> 19),\n   ek4  = (W0 >>> 19) ^ W3,\n   ek5  = W0 ^ (W1 >>>\
    \ 31),\n   ek6  = W1 ^ (W2 >>> 31),\n   ek7  = W2 ^ (W3 >>> 31),\n   ek8  = (W0\
    \ >>> 31) ^ W3,\n   ek9  = W0 ^ (W1 <<< 61),\n   ek10 = W1 ^ (W2 <<< 61),\n  \
    \ ek11 = W2 ^ (W3 <<< 61),\n   ek12 = (W0 <<< 61) ^ W3,\n   ek13 = W0 ^ (W1 <<<\
    \ 31),\n   ek14 = W1 ^ (W2 <<< 31),\n   ek15 = W2 ^ (W3 <<< 31),\n   ek16 = (W0\
    \ <<< 31) ^ W3,\n   ek17 = W0 ^ (W1 <<< 19).\n   The number of rounds depends\
    \ on the size of the master key as\n   follows.\n        Key size     Number of\
    \ Rounds\n         128              12\n         192              14\n       \
    \  256              16\n   Due to an extra key addition layer in the last round,\
    \ 12-, 14-, and\n   16-round algorithms require 13, 15, and 17 round keys, respectively.\n\
    \   Decryption round keys are derived from the encryption round keys.\n   dk1\
    \ = ek{n+1},\n   dk2 = A(ek{n}),\n   dk3 = A(ek{n-1}),\n   ...,\n   dk{n}= A(ek2),\n\
    \   dk{n+1}= ek1.\n   Here, A and n denote the diffusion layer of ARIA and the\
    \ number of\n   rounds, respectively.  The diffusion layer A is defined in Section\n\
    \   2.4.3.\n"
- title: 2.3.  Data Randomizing Part
  contents:
  - "2.3.  Data Randomizing Part\n   The data randomizing part of the ARIA algorithm\
    \ consists of the\n   encryption and decryption processes.  The encryption and\
    \ decryption\n   processes use functions FO, FE, A, SL1, and SL2.  These functions\
    \ are\n   defined in Section 2.4.\n"
- title: 2.3.1.  Encryption Process
  contents:
  - '2.3.1.  Encryption Process

    '
- title: 2.3.1.1.  Encryption for 128-Bit Keys
  contents:
  - "2.3.1.1.  Encryption for 128-Bit Keys\n   Let P be a 128-bit plaintext and K\
    \ be a 128-bit master key.  Let ek1,\n   ..., ek13 be the encryption round keys\
    \ defined by K.  Then the\n   ciphertext C is computed by the following algorithm.\n\
    \   P1  = FO(P  , ek1 );              // Round 1\n   P2  = FE(P1 , ek2 );    \
    \          // Round 2\n   P3  = FO(P2 , ek3 );              // Round 3\n   P4\
    \  = FE(P3 , ek4 );              // Round 4\n   P5  = FO(P4 , ek5 );         \
    \     // Round 5\n   P6  = FE(P5 , ek6 );              // Round 6\n   P7  = FO(P6\
    \ , ek7 );              // Round 7\n   P8  = FE(P7 , ek8 );              // Round\
    \ 8\n   P9  = FO(P8 , ek9 );              // Round 9\n   P10 = FE(P9 , ek10);\
    \              // Round 10\n   P11 = FO(P10, ek11);              // Round 11\n\
    \   C   = SL2(P11 ^ ek12) ^ ek13;     // Round 12\n"
- title: 2.3.1.2.  Encryption for 192-Bit Keys
  contents:
  - "2.3.1.2.  Encryption for 192-Bit Keys\n   Let P be a 128-bit plaintext and K\
    \ be a 192-bit master key.  Let ek1,\n   ..., ek15 be the encryption round keys\
    \ defined by K.  Then the\n   ciphertext C is computed by the following algorithm.\n\
    \   P1  = FO(P  , ek1 );              // Round 1\n   P2  = FE(P1 , ek2 );    \
    \          // Round 2\n   P3  = FO(P2 , ek3 );              // Round 3\n   P4\
    \  = FE(P3 , ek4 );              // Round 4\n   P5  = FO(P4 , ek5 );         \
    \     // Round 5\n   P6  = FE(P5 , ek6 );              // Round 6\n   P7  = FO(P6\
    \ , ek7 );              // Round 7\n   P8  = FE(P7 , ek8 );              // Round\
    \ 8\n   P9  = FO(P8 , ek9 );              // Round 9\n   P10 = FE(P9 , ek10);\
    \              // Round 10\n   P11 = FO(P10, ek11);              // Round 11\n\
    \   P12 = FE(P11, ek12);              // Round 12\n   P13 = FO(P12, ek13);   \
    \           // Round 13\n   C   = SL2(P13 ^ ek14) ^ ek15;     // Round 14\n"
- title: 2.3.1.3.  Encryption for 256-Bit Keys
  contents:
  - "2.3.1.3.  Encryption for 256-Bit Keys\n   Let P be a 128-bit plaintext and K\
    \ be a 256-bit master key.  Let ek1,\n   ..., ek17 be the encryption round keys\
    \ defined by K.  Then the\n   ciphertext C is computed by the following algorithm.\n\
    \   P1 = FO(P  , ek1 );              // Round 1\n   P2 = FE(P1 , ek2 );      \
    \        // Round 2\n   P3 = FO(P2 , ek3 );              // Round 3\n   P4 = FE(P3\
    \ , ek4 );              // Round 4\n   P5 = FO(P4 , ek5 );              // Round\
    \ 5\n   P6 = FE(P5 , ek6 );              // Round 6\n   P7 = FO(P6 , ek7 );  \
    \            // Round 7\n   P8 = FE(P7 , ek8 );              // Round 8\n   P9\
    \ = FO(P8 , ek9 );              // Round 9\n   P10= FE(P9 , ek10);           \
    \   // Round 10\n   P11= FO(P10, ek11);              // Round 11\n   P12= FE(P11,\
    \ ek12);              // Round 12\n   P13= FO(P12, ek13);              // Round\
    \ 13\n   P14= FE(P13, ek14);              // Round 14\n   P15= FO(P14, ek15);\
    \              // Round 15\n   C  = SL2(P15 ^ ek16) ^ ek17;     // Round 16\n"
- title: 2.3.2.  Decryption Process
  contents:
  - "2.3.2.  Decryption Process\n   The decryption process of ARIA is the same as\
    \ the encryption process\n   except that encryption round keys are replaced by\
    \ decryption round\n   keys.  For example, encryption round keys ek1, ..., ek13\
    \ of the\n   12-round ARIA algorithm are replaced by decryption round keys dk1,\n\
    \   ..., dk13, respectively.\n"
- title: 2.4.  Components of ARIA
  contents:
  - '2.4.  Components of ARIA

    '
- title: 2.4.1.  Round Functions
  contents:
  - "2.4.1.  Round Functions\n   There are two types of round functions for ARIA.\
    \  One is called an\n   odd round function and is denoted by FO.  It takes as\
    \ input a pair\n   (D,RK) of two 128-bit strings and outputs\n   FO(D,RK) = A(SL1(D\
    \ ^ RK)).\n   The other is called an even round function and is denoted by FE.\
    \  It\n   takes as input a pair (D,RK) of two 128-bit strings and outputs\n  \
    \ FE(D,RK) = A(SL2(D ^ RK)).\n   Functions SL1 and SL2, called substitution layers,\
    \ are described in\n   Section 2.4.2.  Function A, called a diffusion layer, is\
    \ described in\n   Section 2.4.3.\n"
- title: 2.4.2.  Substitution Layers
  contents:
  - "2.4.2.  Substitution Layers\n   ARIA has two types of substitution layers that\
    \ alternate between\n   rounds.  Type 1 is used in the odd rounds, and type 2\
    \ is used in the\n   even rounds.\n   Type 1 substitution layer SL1 is an algorithm\
    \ that takes a 16-byte\n   string x0 || x1 ||...|| x15 as input and outputs a\
    \ 16-byte string\n   y0 || y1 ||...|| y15 as follows.\n   y0 = SB1(x0),  y1 =\
    \ SB2(x1),  y2 = SB3(x2),  y3 = SB4(x3),\n   y4 = SB1(x4),  y5 = SB2(x5),  y6\
    \ = SB3(x6),  y7 = SB4(x7),\n   y8 = SB1(x8),  y9 = SB2(x9),  y10= SB3(x10), y11=\
    \ SB4(x11),\n   y12= SB1(x12), y13= SB2(x13), y14= SB3(x14), y15= SB4(x15).\n\
    \   Type 2 substitution layer SL2 is an algorithm that takes a 16-byte\n   string\
    \ x0 || x1 ||...|| x15 as input and outputs a 16-byte string\n   y0 || y1 ||...||\
    \ y15 as follows.\n   y0 = SB3(x0),  y1 = SB4(x1),  y2 = SB1(x2),  y3 = SB2(x3),\n\
    \   y4 = SB3(x4),  y5 = SB4(x5),  y6 = SB1(x6),  y7 = SB2(x7),\n   y8 = SB3(x8),\
    \  y9 = SB4(x9),  y10= SB1(x10), y11= SB2(x11),\n   y12= SB3(x12), y13= SB4(x13),\
    \ y14= SB1(x14), y15= SB2(x15).\n   Here, SB1, SB2, SB3, and SB4 are S-boxes that\
    \ take an 8-bit string as\n   input and output an 8-bit string.  These S-boxes\
    \ are defined by the\n   following look-up tables.\n      SB1:\n          0  1\
    \  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n       00 63 7c 77 7b f2 6b 6f c5\
    \ 30 01 67 2b fe d7 ab 76\n       10 ca 82 c9 7d fa 59 47 f0 ad d4 a2 af 9c a4\
    \ 72 c0\n       20 b7 fd 93 26 36 3f f7 cc 34 a5 e5 f1 71 d8 31 15\n       30\
    \ 04 c7 23 c3 18 96 05 9a 07 12 80 e2 eb 27 b2 75\n       40 09 83 2c 1a 1b 6e\
    \ 5a a0 52 3b d6 b3 29 e3 2f 84\n       50 53 d1 00 ed 20 fc b1 5b 6a cb be 39\
    \ 4a 4c 58 cf\n       60 d0 ef aa fb 43 4d 33 85 45 f9 02 7f 50 3c 9f a8\n   \
    \    70 51 a3 40 8f 92 9d 38 f5 bc b6 da 21 10 ff f3 d2\n       80 cd 0c 13 ec\
    \ 5f 97 44 17 c4 a7 7e 3d 64 5d 19 73\n       90 60 81 4f dc 22 2a 90 88 46 ee\
    \ b8 14 de 5e 0b db\n       a0 e0 32 3a 0a 49 06 24 5c c2 d3 ac 62 91 95 e4 79\n\
    \       b0 e7 c8 37 6d 8d d5 4e a9 6c 56 f4 ea 65 7a ae 08\n       c0 ba 78 25\
    \ 2e 1c a6 b4 c6 e8 dd 74 1f 4b bd 8b 8a\n       d0 70 3e b5 66 48 03 f6 0e 61\
    \ 35 57 b9 86 c1 1d 9e\n       e0 e1 f8 98 11 69 d9 8e 94 9b 1e 87 e9 ce 55 28\
    \ df\n       f0 8c a1 89 0d bf e6 42 68 41 99 2d 0f b0 54 bb 16\n      SB2:\n\
    \          0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n       00 e2 4e 54\
    \ fc 94 c2 4a cc 62 0d 6a 46 3c 4d 8b d1\n       10 5e fa 64 cb b4 97 be 2b bc\
    \ 77 2e 03 d3 19 59 c1\n       20 1d 06 41 6b 55 f0 99 69 ea 9c 18 ae 63 df e7\
    \ bb\n       30 00 73 66 fb 96 4c 85 e4 3a 09 45 aa 0f ee 10 eb\n       40 2d\
    \ 7f f4 29 ac cf ad 91 8d 78 c8 95 f9 2f ce cd\n       50 08 7a 88 38 5c 83 2a\
    \ 28 47 db b8 c7 93 a4 12 53\n       60 ff 87 0e 31 36 21 58 48 01 8e 37 74 32\
    \ ca e9 b1\n       70 b7 ab 0c d7 c4 56 42 26 07 98 60 d9 b6 b9 11 40\n      \
    \ 80 ec 20 8c bd a0 c9 84 04 49 23 f1 4f 50 1f 13 dc\n       90 d8 c0 9e 57 e3\
    \ c3 7b 65 3b 02 8f 3e e8 25 92 e5\n       a0 15 dd fd 17 a9 bf d4 9a 7e c5 39\
    \ 67 fe 76 9d 43\n       b0 a7 e1 d0 f5 68 f2 1b 34 70 05 a3 8a d5 79 86 a8\n\
    \       c0 30 c6 51 4b 1e a6 27 f6 35 d2 6e 24 16 82 5f da\n       d0 e6 75 a2\
    \ ef 2c b2 1c 9f 5d 6f 80 0a 72 44 9b 6c\n       e0 90 0b 5b 33 7d 5a 52 f3 61\
    \ a1 f7 b0 d6 3f 7c 6d\n       f0 ed 14 e0 a5 3d 22 b3 f8 89 de 71 1a af ba b5\
    \ 81\n      SB3:\n          0  1  2  3  4  5  6  7  8  9  a  b  c  d  e  f\n \
    \      00 52 09 6a d5 30 36 a5 38 bf 40 a3 9e 81 f3 d7 fb\n       10 7c e3 39\
    \ 82 9b 2f ff 87 34 8e 43 44 c4 de e9 cb\n       20 54 7b 94 32 a6 c2 23 3d ee\
    \ 4c 95 0b 42 fa c3 4e\n       30 08 2e a1 66 28 d9 24 b2 76 5b a2 49 6d 8b d1\
    \ 25\n       40 72 f8 f6 64 86 68 98 16 d4 a4 5c cc 5d 65 b6 92\n       50 6c\
    \ 70 48 50 fd ed b9 da 5e 15 46 57 a7 8d 9d 84\n       60 90 d8 ab 00 8c bc d3\
    \ 0a f7 e4 58 05 b8 b3 45 06\n       70 d0 2c 1e 8f ca 3f 0f 02 c1 af bd 03 01\
    \ 13 8a 6b\n       80 3a 91 11 41 4f 67 dc ea 97 f2 cf ce f0 b4 e6 73\n      \
    \ 90 96 ac 74 22 e7 ad 35 85 e2 f9 37 e8 1c 75 df 6e\n       a0 47 f1 1a 71 1d\
    \ 29 c5 89 6f b7 62 0e aa 18 be 1b\n       b0 fc 56 3e 4b c6 d2 79 20 9a db c0\
    \ fe 78 cd 5a f4\n       c0 1f dd a8 33 88 07 c7 31 b1 12 10 59 27 80 ec 5f\n\
    \       d0 60 51 7f a9 19 b5 4a 0d 2d e5 7a 9f 93 c9 9c ef\n       e0 a0 e0 3b\
    \ 4d ae 2a f5 b0 c8 eb bb 3c 83 53 99 61\n       f0 17 2b 04 7e ba 77 d6 26 e1\
    \ 69 14 63 55 21 0c 7d\n      SB4:\n          0  1  2  3  4  5  6  7  8  9  a\
    \  b  c  d  e  f\n       00 30 68 99 1b 87 b9 21 78 50 39 db e1 72  9 62 3c\n\
    \       10 3e 7e 5e 8e f1 a0 cc a3 2a 1d fb b6 d6 20 c4 8d\n       20 81 65 f5\
    \ 89 cb 9d 77 c6 57 43 56 17 d4 40 1a 4d\n       30 c0 63 6c e3 b7 c8 64 6a 53\
    \ aa 38 98 0c f4 9b ed\n       40 7f 22 76 af dd 3a 0b 58 67 88 06 c3 35 0d 01\
    \ 8b\n       50 8c c2 e6 5f 02 24 75 93 66 1e e5 e2 54 d8 10 ce\n       60 7a\
    \ e8 08 2c 12 97 32 ab b4 27 0a 23 df ef ca d9\n       70 b8 fa dc 31 6b d1 ad\
    \ 19 49 bd 51 96 ee e4 a8 41\n       80 da ff cd 55 86 36 be 61 52 f8 bb 0e 82\
    \ 48 69 9a\n       90 e0 47 9e 5c 04 4b 34 15 79 26 a7 de 29 ae 92 d7\n      \
    \ a0 84 e9 d2 ba 5d f3 c5 b0 bf a4 3b 71 44 46 2b fc\n       b0 eb 6f d5 f6 14\
    \ fe 7c 70 5a 7d fd 2f 18 83 16 a5\n       c0 91 1f 05 95 74 a9 c1 5b 4a 85 6d\
    \ 13 07 4f 4e 45\n       d0 b2 0f c9 1c a6 bc ec 73 90 7b cf 59 8f a1 f9 2d\n\
    \       e0 f2 b1 00 94 37 9f d0 2e 9c 6e 28 3f 80 f0 3d d3\n       f0 25 8a b5\
    \ e7 42 b3 c7 ea f7 4c 11 33 03 a2 ac 60\n   For example, SB1(0x23) = 0x26 and\
    \ SB4(0xef) = 0xd3.  Note that SB3\n   and SB4 are the inverse functions of SB1\
    \ and SB2, respectively, and\n   accordingly SL2 is the inverse of SL1.\n"
- title: 2.4.3.  Diffusion Layer
  contents:
  - "2.4.3.  Diffusion Layer\n   Diffusion layer A is an algorithm that takes a 16-byte\
    \ string x0 ||\n   x1 || ... || x15 as input and outputs a 16-byte string\n  \
    \ y0 || y1 ||...|| y15 by the following equations.\n      y0  = x3 ^ x4 ^ x6 ^\
    \ x8  ^ x9  ^ x13 ^ x14,\n      y1  = x2 ^ x5 ^ x7 ^ x8  ^ x9  ^ x12 ^ x15,\n\
    \      y2  = x1 ^ x4 ^ x6 ^ x10 ^ x11 ^ x12 ^ x15,\n      y3  = x0 ^ x5 ^ x7 ^\
    \ x10 ^ x11 ^ x13 ^ x14,\n      y4  = x0 ^ x2 ^ x5 ^ x8  ^ x11 ^ x14 ^ x15,\n\
    \      y5  = x1 ^ x3 ^ x4 ^ x9  ^ x10 ^ x14 ^ x15,\n      y6  = x0 ^ x2 ^ x7 ^\
    \ x9  ^ x10 ^ x12 ^ x13,\n      y7  = x1 ^ x3 ^ x6 ^ x8  ^ x11 ^ x12 ^ x13,\n\
    \      y8  = x0 ^ x1 ^ x4 ^ x7  ^ x10 ^ x13 ^ x15,\n      y9  = x0 ^ x1 ^ x5 ^\
    \ x6  ^ x11 ^ x12 ^ x14,\n      y10 = x2 ^ x3 ^ x5 ^ x6  ^ x8  ^ x13 ^ x15,\n\
    \      y11 = x2 ^ x3 ^ x4 ^ x7  ^ x9  ^ x12 ^ x14,\n      y12 = x1 ^ x2 ^ x6 ^\
    \ x7  ^ x9  ^ x11 ^ x12,\n      y13 = x0 ^ x3 ^ x6 ^ x7  ^ x8  ^ x10 ^ x13,\n\
    \      y14 = x0 ^ x3 ^ x4 ^ x5  ^ x9  ^ x11 ^ x14,\n      y15 = x1 ^ x2 ^ x4 ^\
    \ x5  ^ x8  ^ x10 ^ x15.\n   Note that A is an involution.  That is, for any 16-byte\
    \ input string\n   x, x = A(A(x)) holds.\n"
- title: 3.  Security Considerations
  contents:
  - "3.  Security Considerations\n   ARIA is designed to be resistant to all known\
    \ attacks on block\n   ciphers [ARIA03].  Its security was analyzed by the COSIC\
    \ group of\n   K.U.Leuven in Belgium [ARIAEVAL] and no security flaw has been\
    \ found.\n"
- title: 4.  Informative References
  contents:
  - "4.  Informative References\n   [ARIAEVAL] Biryukov, A., et al., \"Security and\
    \ Performance Analysis\n              of ARIA\", K.U.Leuven (2003), available\
    \ at\n              http://www.cosic.esat.kuleuven.be/publications/\n        \
    \      article-500.pdf\n   [ARIA03]   Kwon, D., et al., \"New Block Cipher: ARIA\"\
    , ICISC 2003,\n              pp. 432-445.\n   [ARIAKS]   Korean Agency for Technology\
    \ and Standards (KATS), \"128\n              bit block encryption algorithm ARIA\"\
    , KS X 1213:2004,\n              December 2004 (In Korean).\n   [ARIAPKCS] RSA\
    \ Laboratories, PKCS #11 v2.20 Amendment 3 Revision 1:\n              Additional\
    \ PKCS #11 Mechanisms, January 2007.\n   [X.680]    ITU-T Recommendation X.680\
    \ (2002) | ISO/IEC 8824-1:2002,\n              Information technology - Abstract\
    \ Syntax Notation One\n              (ASN.1): Specification of basic notation.\n\
    \   [X.681]    ITU-T Recommendation X.681 (2002) | ISO/IEC 8824-2:2002,\n    \
    \          Information technology - Abstract Syntax Notation One\n           \
    \   (ASN.1): Information object specification.\n   [X.682]    ITU-T Recommendation\
    \ X.682 (2002) | ISO/IEC 8824-3:2002,\n              Information technology -\
    \ Abstract Syntax Notation One\n              (ASN.1): Constraint specification.\n\
    \   [X.683]    ITU-T Recommendation X.683 (2002) | ISO/IEC 8824-4:2002,\n    \
    \          Information technology - Abstract Syntax Notation One\n           \
    \   (ASN.1): Parameterization of ASN.1 specifications.\n"
- title: Appendix A.  Example Data of ARIA
  contents:
  - "Appendix A.  Example Data of ARIA\n   Here are test data for ARIA in hexadecimal\
    \ form.\n"
- title: A.1.  128-Bit Key
  contents:
  - "A.1.  128-Bit Key\n   - Key       : 000102030405060708090a0b0c0d0e0f\n   - Plaintext\
    \ : 00112233445566778899aabbccddeeff\n   - Ciphertext: d718fbd6ab644c739da95f3be6451778\n\
    \   - Round key generators\n      W0: 000102030405060708090a0b0c0d0e0f\n     \
    \ W1: 2afbea741e1746dd55c63ba1afcea0a5\n      W2: 7c8578018bb127e02dfe4e78c288e33c\n\
    \      W3: 6785b52b74da46bf181054082763ff6d\n   - Encryption round keys\n    \
    \  e1:  d415a75c794b85c5e0d2a0b3cb793bf6\n      e2:  369c65e4b11777ab713a3e1e6601b8f4\n\
    \      e3:  0368d4f13d14497b6529ad7ac809e7d0\n      e4:  c644552b549a263fb8d0b50906229eec\n\
    \      e5:  5f9c434951f2d2ef342787b1a781794c\n      e6:  afea2c0ce71db6de42a47461f4323c54\n\
    \      e7:  324286db44ba4db6c44ac306f2a84b2c\n      e8:  7f9fa93574d842b9101a58063771eb7b\n\
    \      e9:  aab9c57731fcd213ad5677458fcfe6d4\n      e10: 2f4423bb06465abada5694a19eb88459\n\
    \      e11: 9f8772808f5d580d810ef8ddac13abeb\n      e12: 8684946a155be77ef810744847e35fad\n\
    \      e13: 0f0aa16daee61bd7dfee5a599970fb35\n   - Intermediate round values\n\
    \      P1:  7fc7f12befd0a0791de87fa96b469f52\n      P2:  ac8de17e49f7c5117618993162b189e9\n\
    \      P3:  c3e8d59ec2e62d5249ca2741653cb7dd\n      P4:  5d4aebb165e141ff759f669e1e85cc45\n\
    \      P5:  7806e469f68874c5004b5f4a046bbcfa\n      P6:  110f93c9a630cdd51f97d2202413345a\n\
    \      P7:  e054428ef088fef97928241cd3be499e\n      P8:  5734f38ea1ca3ddd102e71f95e1d5f97\n\
    \      P9:  4903325be3e500cccd52fba4354a39ae\n      P10: cb8c508e2c4f87880639dc896d25ec9d\n\
    \      P11: e7e0d2457ed73d23d481424095afdca0\n"
- title: A.2.  192-Bit Key
  contents:
  - "A.2.  192-Bit Key\n   Key       : 000102030405060708090a0b0c0d0e0f\n        \
    \       1011121314151617\n   Plaintext : 00112233445566778899aabbccddeeff\n  \
    \ Ciphertext: 26449c1805dbe7aa25a468ce263a9e79\n"
- title: A.3.  256-Bit Key
  contents:
  - "A.3.  256-Bit Key\n   Key       : 000102030405060708090a0b0c0d0e0f\n        \
    \       101112131415161718191a1b1c1d1e1f\n   Plaintext : 00112233445566778899aabbccddeeff\n\
    \   Ciphertext: f92bd7c79fb72e2f2b8f80c1972d24fc\n"
- title: Appendix B.  OIDs
  contents:
  - "Appendix B.  OIDs\n   Here is an ASN.1 module conforming to the 2002 version\
    \ of ASN.1\n   [X.680][X.681][X.682][X.683].\n   AriaModesOfOperation {\n   iso(1)\
    \ member-body(2) korea(400) nsri(200046) algorithm (1)\n   symmetric-encryption-algorithm(1)\
    \ asn1-module(0) alg-oids(0) }\n   DEFINITIONS IMPLICIT TAGS ::=\n   BEGIN\n \
    \  OID ::= OBJECT IDENTIFIER\n   -- Synonyms --\n   id-algorithm OID ::=  { iso(1)\
    \ member-body(2) korea(410) nsri(200046)\n   algorithm(1)}\n   id-sea OID ::=\
    \ { id-algorithm symmetric-encryption-algorithm(1)}\n   id-pad OID ::= { id-algorithm\
    \ pad(2)}\n   id-pad-null  RELATIVE-OID ::= {0} -- no padding algorithms identified\n\
    \   id-pad-1     RELATIVE-OID ::= {1}\n   -- padding method 2 of ISO/IEC 9797-1:1999\n\
    \   -- confidentiality modes:\n   -- ECB, CBC, CFB, OFB, CTR\n   id-aria128-ecb\
    \ OID ::= { id-sea aria128-ecb(1)}\n   id-aria128-cbc OID ::= { id-sea aria128-cbc(2)}\n\
    \   id-aria128-cfb OID ::= { id-sea aria128-cfb(3)}\n   id-aria128-ofb OID ::=\
    \ { id-sea aria128-ofb(4)}\n   id-aria128-ctr OID ::= { id-sea aria128-ctr(5)}\n\
    \   id-aria192-ecb OID ::= { id-sea aria192-ecb(6)}\n   id-aria192-cbc OID ::=\
    \ { id-sea aria192-cbc(7)}\n   id-aria192-cfb OID ::= { id-sea aria192-cfb(8)}\n\
    \   id-aria192-ofb OID ::= { id-sea aria192-ofb(9)}\n   id-aria192-ctr OID ::=\
    \ { id-sea aria192-ctr(10)}\n   id-aria256-ecb OID ::= { id-sea aria256-ecb(11)}\n\
    \   id-aria256-cbc OID ::= { id-sea aria256-cbc(12)}\n   id-aria256-cfb OID ::=\
    \ { id-sea aria256-cfb(13)}\n   id-aria256-ofb OID ::= { id-sea aria256-ofb(14)}\n\
    \   id-aria256-ctr OID ::= { id-sea aria256-ctr(15)}\n   -- authentication modes:\
    \ CMAC\n   id-aria128-cmac OID ::= { id-sea aria128-cmac(21)}\n   id-aria192-cmac\
    \ OID ::= { id-sea aria192-cmac(22)}\n   id-aria256-cmac OID ::= { id-sea aria256-cmac(23)}\n\
    \   -- modes for both confidentiality and authentication\n   -- OCB 2.0, GCM,\
    \ CCM, Key Wrap\n   id-aria128-ocb2 OID ::= { id-sea aria128-ocb2(31)}\n   id-aria192-ocb2\
    \ OID ::= { id-sea aria192-ocb2(32)}\n   id-aria256-ocb2 OID ::= { id-sea aria256-ocb2(33)}\n\
    \   id-aria128-gcm OID ::= { id-sea aria128-gcm(34)}\n   id-aria192-gcm OID ::=\
    \ { id-sea aria192-gcm(35)}\n   id-aria256-gcm OID ::= { id-sea aria256-gcm(36)}\n\
    \   id-aria128-ccm OID ::= { id-sea aria128-ccm(37)}\n   id-aria192-ccm OID ::=\
    \ { id-sea aria192-ccm(38)}\n   id-aria256-ccm OID ::= { id-sea aria256-ccm(39)}\n\
    \   id-aria128-kw OID ::= { id-sea aria128-kw(40)}\n   id-aria192-kw OID ::= {\
    \ id-sea aria192-kw(41)}\n   id-aria256-kw OID ::= { id-sea aria256-kw(42)}\n\
    \   -- ARIA Key-Wrap with Padding Algorithm (AES version: RFC 5649)\n   id-aria128-kwp\
    \ OID ::= { id-sea aria128-kwp(43)}\n   id-aria192-kwp OID ::= { id-sea aria192-kwp(44)}\n\
    \   id-aria256-kwp OID ::= { id-sea aria256-kwp(45)}\n   AriaModeOfOperation ::=\
    \ AlgorithmIdentifier\n   { {AriaModeOfOperationAlgorithms} }\n   AriaModeOfOperationAlgorithms\
    \ ALGORITHM ::= {\n   aria128ecb  |aria128cbc  |aria128cfb  |aria128ofb  |aria128ctr\
    \  |\n   aria192ecb  |aria192cbc  |aria192cfb  |aria192ofb  |aria192ctr  |\n \
    \  aria256ecb  |aria256cbc  |aria256cfb  |aria256ofb  |aria256ctr  |\n   aria128cmac\
    \ |aria192cmac |aria256cmac |\n   aria128ocb2 |aria192ocb2 |aria256ocb2 |\n  \
    \ aria128gcm  |aria192gcm  |aria256gcm  |\n   aria128ccm  |aria192ccm  |aria256ccm\
    \  |\n   aria128kw   |aria192kw   |aria256kw   |\n   aria128kwp  |aria192kwp \
    \ |aria256kwp ,\n   ... --Extensible\n   }\n   aria128ecb  ALGORITHM ::=\n   {\
    \ OID id-aria128-ecb PARAMS AriaEcbParameters }\n   aria128cbc  ALGORITHM ::=\n\
    \   { OID id-aria128-cbc PARAMS AriaCbcParameters }\n   aria128cfb  ALGORITHM\
    \ ::=\n   { OID id-aria128-cfb PARAMS AriaCfbParameters }\n   aria128ofb  ALGORITHM\
    \ ::=\n   { OID id-aria128-ofb PARAMS AriaOfbParameters }\n   aria128ctr  ALGORITHM\
    \ ::=\n   { OID id-aria128-ctr PARAMS AriaCtrParameters }\n   aria192ecb  ALGORITHM\
    \ ::=\n   { OID id-aria192-ecb PARAMS AriaEcbParameters }\n   aria192cbc  ALGORITHM\
    \ ::=\n   { OID id-aria192-cbc PARAMS AriaCbcParameters }\n   aria192cfb  ALGORITHM\
    \ ::=\n   { OID id-aria192-cfb PARAMS AriaCfbParameters }\n   aria192ofb  ALGORITHM\
    \ ::=\n   { OID id-aria192-ofb PARAMS AriaOfbParameters }\n   aria192ctr  ALGORITHM\
    \ ::=\n   { OID id-aria192-ctr PARAMS AriaCtrParameters }\n   aria256ecb  ALGORITHM\
    \ ::=\n   { OID id-aria256-ecb PARAMS AriaEcbParameters }\n   aria256cbc  ALGORITHM\
    \ ::=\n   { OID id-aria256-cbc PARAMS AriaCbcParameters }\n   aria256cfb  ALGORITHM\
    \ ::=\n   { OID id-aria256-cfb PARAMS AriaCfbParameters }\n   aria256ofb  ALGORITHM\
    \ ::=\n   { OID id-aria256-ofb PARAMS AriaOfbParameters }\n   aria256ctr  ALGORITHM\
    \ ::=\n   { OID id-aria256-ctr PARAMS AriaCtrParameters }\n   aria128cmac ALGORITHM\
    \ ::=\n   { OID id-aria128-cmac PARAMS AriaCmacParameters }\n   aria192cmac ALGORITHM\
    \ ::=\n   { OID id-aria192-cmac PARAMS AriaCmacParameters }\n   aria256cmac ALGORITHM\
    \ ::=\n   { OID id-aria256-cmac PARAMS AriaCmacParameters }\n   aria128ocb2 ALGORITHM\
    \ ::=\n   { OID id-aria128-ocb2 PARAMS AriaOcb2Parameters }\n   aria192ocb2 ALGORITHM\
    \ ::=\n   { OID id-aria192-ocb2 PARAMS AriaOcb2Parameters }\n   aria256ocb2 ALGORITHM\
    \ ::=\n   { OID id-aria256-ocb2 PARAMS AriaOcb2Parameters }\n   aria128gcm  ALGORITHM\
    \ ::=\n   { OID id-aria128-gcm PARAMS AriaGcmParameters }\n   aria192gcm  ALGORITHM\
    \ ::=\n   { OID id-aria192-gcm PARAMS AriaGcmParameters }\n   aria256gcm  ALGORITHM\
    \ ::=\n   { OID id-aria256-gcm PARAMS AriaGcmParameters }\n   aria128ccm  ALGORITHM\
    \ ::=\n   { OID id-aria128-ccm PARAMS AriaCcmParameters }\n   aria192ccm  ALGORITHM\
    \ ::=\n   { OID id-aria192-ccm PARAMS AriaCcmParameters }\n   aria256ccm  ALGORITHM\
    \ ::=\n   { OID id-aria256-ccm PARAMS AriaCcmParameters }\n   aria128kw   ALGORITHM\
    \ ::= { OID id-aria128-kw }\n   aria192kw   ALGORITHM ::= { OID id-aria192-kw\
    \ }\n   aria256kw   ALGORITHM ::= { OID id-aria256-kw }\n   aria128kwp   ALGORITHM\
    \ ::= { OID id-aria128-kwp }\n   aria192kwp   ALGORITHM ::= { OID id-aria192-kwp\
    \ }\n   aria256kwp   ALGORITHM ::= { OID id-aria256-kwp }\n   AriaPadAlgo ::=\
    \ CHOICE {\n       specifiedPadAlgo   RELATIVE-OID,\n       generalPadAlgo   \
    \  OID\n   }\n   AriaEcbParameters ::= SEQUENCE {\n       padAlgo   AriaPadAlgo\
    \  DEFAULT specifiedPadAlgo:id-pad-null\n   }\n   AriaCbcParameters ::= SEQUENCE\
    \ {\n       m         INTEGER       DEFAULT 1,\n       -- number of stored ciphertext\
    \ blocks\n       padAlgo   AriaPadAlgo   DEFAULT specifiedPadAlgo:id-pad-1\n \
    \  }\n   AriaCfbParameters ::= SEQUENCE {\n       r         INTEGER,\n       --\
    \ bit-length of feedback buffer, 128<=r<=128*1024\n       k         INTEGER,\n\
    \       -- bit-length of feedback variable, 1<=k<=128\n       j         INTEGER,\n\
    \       -- bit-length of plaintext/ciphertext block, 1<=j<=k\n       padAlgo \
    \  AriaPadAlgo  DEFAULT specifiedPadAlgo:id-pad-null\n   }\n   AriaOfbParameters\
    \ ::= SEQUENCE {\n       j         INTEGER,\n       -- bit-length of plaintext/ciphertext\
    \ block, 1<=j<=128\n       padAlgo   AriaPadAlgo  DEFAULT specifiedPadAlgo:id-pad-null\n\
    \   }\n   AriaCtrParameters ::= SEQUENCE {\n       j         INTEGER,\n      \
    \ -- bit-length of plaintext/ciphertext block, 1<=j<=128\n       padAlgo   AriaPadAlgo\
    \  DEFAULT specifiedPadAlgo:id-pad-null\n   }\n   AriaCmacParameters ::= INTEGER\
    \ -- bit-length of authentication tag\n   AriaOcb2Parameters ::= INTEGER -- bit-length\
    \ of authentication tag\n   AriaGcmParameters  ::= SEQUENCE {\n       s      \
    \ INTEGER,   -- bit-length of starting variable\n       t       INTEGER    --\
    \ bit-length of authentication tag\n   }\n   AriaCcmParameters  ::= SEQUENCE {\n\
    \       w      INTEGER (2|3|4|5|6|7|8),\n       -- length of message length field\
    \ in octets\n       t      INTEGER (32|48|64|80|96|112|128)\n       -- bit-length\
    \ of authentication tag\n   }\n   ALGORITHM ::= CLASS {\n       &id    OBJECT\
    \ IDENTIFIER UNIQUE,\n       &Type  OPTIONAL\n   }\n   WITH SYNTAX { OID &id \
    \ [PARAMS &Type] }\n   AlgorithmIdentifier { ALGORITHM:AlgoSet } ::= SEQUENCE\
    \ {\n       algorithm    ALGORITHM.&id( {AlgoSet} ),\n       parameters ALGORITHM.&Type(\
    \ {AlgoSet}{@algorithm} ) OPTIONAL\n   }\n   END\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jungkeun Lee\n   National Security Research Institute\n\
    \   P.O.Box 1, Yuseong, Daejeon, 305-350, Korea\n   EMail: jklee@ensec.re.kr\n\
    \   Jooyoung Lee\n   National Security Research Institute\n   P.O.Box 1, Yuseong,\
    \ Daejeon, 305-350, Korea\n   EMail: jlee05@ensec.re.kr\n   Jaeheon Kim\n   National\
    \ Security Research Institute\n   P.O.Box 1, Yuseong, Daejeon, 305-350, Korea\n\
    \   EMail: jaeheon@ensec.re.kr\n   Daesung Kwon\n   National Security Research\
    \ Institute\n   P.O.Box 1, Yuseong, Daejeon, 305-350, Korea\n   EMail: ds_kwon@ensec.re.kr\n\
    \   Choonsoo Kim\n   National Security Research Institute\n   P.O.Box 1, Yuseong,\
    \ Daejeon, 305-350, Korea\n   EMail: jbr@ensec.re.kr\n"
