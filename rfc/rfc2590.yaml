- title: __initial_text__
  contents:
  - "         Transmission of IPv6 Packets over Frame Relay Networks\n           \
    \                  Specification\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes mechanisms for the transmission of IPv6 packets\n\
    \   over Frame Relay networks.\n"
- title: Table of Contents
  contents:
  - 'Table of Contents

    '
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document specifies the frame format for transmission\
    \ of IPv6\n   packets over Frame Relay networks, the method of forming IPv6 link-\n\
    \   local addresses on Frame Relay links, and the mapping of the IPv6\n   addresses\
    \ to Frame Relay addresses.  It also specifies the content of\n   the Source/Target\
    \ link-layer address option used in Neighbor\n   Discovery [ND] and Inverse Neighbor\
    \ Discovery [IND] messages when\n   those messages are transmitted over a Frame\
    \ Relay link.  It is part\n   of a set of specifications that define such IPv6\
    \ mechanisms for Non\n   Broadcast Multi Access (NBMA) media [IPv6-NBMA], [IPv6-ATM],\
    \ and a\n   larger set that defines such mechanisms for specific link layers\n\
    \   [IPv6-ETH], [IPv6-FDDI], [IPv6-PPP], [IPv6-ATM], etc...\n   The information\
    \ in this document applies to Frame Relay devices which\n   serve as end stations\
    \ (DTEs) on a public or private Frame Relay\n   network (for example, provided\
    \ by a common carrier or PTT.) Frame\n   Relay end stations can be IPv6 hosts\
    \ or routers. In this document\n   they are referred to as nodes.\n   In a Frame\
    \ Relay network, a number of virtual circuits form the\n   connections between\
    \ the attached stations (nodes). The resulting set\n   of interconnected devices\
    \ forms a private Frame Relay group which may\n   be either fully interconnected\
    \ with a complete \"mesh\" of virtual\n   circuits, or only partially interconnected.\
    \  In either case, each\n   virtual circuit is uniquely identified at each Frame\
    \ Relay interface\n   (card) by a Data Link Connection Identifier (DLCI).  In\
    \ most\n   circumstances, DLCIs have strictly local significance at each Frame\n\
    \   Relay interface.\n   A Frame Relay virtual circuit acts like a virtual-link\
    \ (also referred\n   to as logical-link), with its own link parameters, distinct\
    \ from the\n   parameters of other virtual circuits established on the same wire\
    \ or\n   fiber. Such parameters are the input/output maximum frame size,\n   incoming/outgoing\
    \ requested/agreed throughput, incoming/outgoing\n   acceptable throughput, incoming/outgoing\
    \ burst size,\n   incoming/outgoing frame rate.\n   By default a DLCI is 10 bits\
    \ in length. Frame Relay specifications\n   define also 16, 17, or 23 bit DLCIs.\
    \ The former is not used, while\n   the latter two are suggested for use with\
    \ SVCs.\n   Frame Relay virtual circuits can be created administratively as\n\
    \   Permanent Virtual Circuits -- PVCs -- or dynamically as Switched\n   Virtual\
    \ Circuits -- SVCs.  The mechanisms defined in this document\n   are intended\
    \ to apply to both permanent and switched Frame Relay\n   virtual circuits, whether\
    \ they are point to point or point to multi-\n   point.\n   The keywords MUST,\
    \ MUST NOT, MAY, OPTIONAL, REQUIRED, RECOMMENDED,\n   SHALL, SHALL NOT, SHOULD,\
    \ SHOULD NOT are to be interpreted as defined\n   in [RFC 2119].\n"
- title: 2. Maximum Transmission Unit
  contents:
  - "2. Maximum Transmission Unit\n   The IPv6 minimum MTU is defined in [IPv6].\n\
    \   In general, Frame Relay devices are configured to have a maximum\n   frame\
    \ size of at least 1600 octets. Therefore, the default IPv6 MTU\n   size for a\
    \ Frame Relay interface is considered to be 1592.\n   A smaller than default frame\
    \ size can be configured but of course not\n   smaller than the minimum IPv6 MTU.\n\
    \   An adequate larger than default IPv6 MTU and Frame Relay frame size\n   can\
    \ be configured to avoid fragmentation. The maximum frame size is\n   controlled\
    \ by the CRC generation mechanisms employed at the HDLC\n   level. CRC16 will\
    \ protect frames up to 4096 bytes in length, which\n   reduces the effective maximum\
    \ frame size to approximately 4088 bytes.\n   A larger desired frame size (such\
    \ as that used by FDDI or Token\n   Ring), would require the CRC32 mechanism,\
    \ which is not yet widely\n   used and is not mandatory for frame relay systems\
    \ conforming to Frame\n   Relay Forum and ITU-T standards.\n   In general, if\
    \ upper layers provide adequate error\n   protection/detection mechanisms, implementations\
    \ may allow\n   configuring a Frame Relay link with a larger than 4080 octets\
    \ frame\n   size but with a lesser error protection/detection mechanism at link\n\
    \   layer. However, because IPv6 relies on the upper and lower layer\n   error\
    \ detection, configuring the IPv6 MTU to a value larger than 4080\n   is strongly\
    \ discouraged.\n   Although a Frame Relay circuit allows the definition of distinct\n\
    \   maximum frame sizes for input and output, for simplification\n   purposes,\
    \ this specification assumes symmetry, i.e. the same MTU for\n   both input and\
    \ output.\n   Furthermore, implementations may limit the setting of the Frame\
    \ Relay\n   maximum frame size to the interface (link, or card) level, which then\n\
    \   is enforced on all of the PVCs or SVCs on that interface (on that\n   link,\
    \ or card). For an SVC, the maximum frame size parameter\n   negotiated during\
    \ circuit setup will not exceed the configured\n   maximum frame size.\n"
- title: 3. IPv6 Frame Format
  contents:
  - "3. IPv6 Frame Format\n   The IPv6 frame encapsulation for Frame Relay (for both\
    \ PVCs and SVCs)\n   follows [ENCAPS], which allows a VC to carry IPv6 packets\
    \ along with\n   other protocol packets. The NLPID frame format is used, in which\
    \ the\n   IPv6 NLPID has a value of 0x8E:\n            0                     \
    \  1                       (Octets)\n           +-----------------------+-----------------------+\n"
- title: (Octets)0  |                                               |
  contents:
  - "(Octets)0  |                                               |\n           /  \
    \               Q.922 Address                 /\n           /            (length\
    \ 'n' equals 2 or 4)         /\n           |                                 \
    \              |\n           +-----------------------+-----------------------+\n\
    \        n  | Control (UI)  0x03    |      NLPID  0x8E      |  NLPID\n       \
    \    +-----------------------+-----------------------+  indicating\n      n+2\
    \  |                       .                       |  IPv6\n           /     \
    \                  .                       /\n           /                  IPv6\
    \ packet                  /\n           |                       .            \
    \           |\n           +-----------------------+-----------------------+\n\
    \           |                                               |\n           +  \
    \                    FCS                      +\n           |                \
    \                               |\n           +-----------------------+-----------------------+\n\
    \      \"n\" is the length of the Q.922 address which can be 2 or 4 octets.\n\
    \      The Q.922 representation of a DLCI (in canonical order - the first\n  \
    \    bit is stored in the least significant, i.e., the right-most bit\n      of\
    \ a byte in memory) [CANON] is the following:\n            7     6     5     4\
    \     3     2     1     0      (bit order)\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n"
- title: (octet) 0  |            DLCI(high order)       |  0  |  0  |
  contents:
  - "(octet) 0  |            DLCI(high order)       |  0  |  0  |\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \        1  |  DLCI(low order)      |  0  |  0  |  0  |  1  |\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \              10 bits DLCI\n            7     6     5     4     3     2     1\
    \     0      (bit order)\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n"
- title: (octet) 0  |            DLCI(high order)       |  0  |  0  |
  contents:
  - "(octet) 0  |            DLCI(high order)       |  0  |  0  |\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \        1  |  DLCI                 |  0  |  0  |  0  |  0  |\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \        2  |             DLCI(low order)             |  0  |\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \        3  |       unused (set to 0)           |  1  |  1  |\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \              17 bits DLCI\n            7     6     5     4     3     2     1\
    \     0      (bit order)\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n"
- title: (octet) 0  |            DLCI(high order)       |  0  |  0  |
  contents:
  - "(octet) 0  |            DLCI(high order)       |  0  |  0  |\n           +-----+-----+-----+-----+-----+-----+-----+-----\n\
    \        1  |  DLCI                 |  0  |  0  |  0  |  0  |\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \        2  |             DLCI                        |  0  |\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \        3  |       DLCI (low order)            |  0  |  1  |\n           +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \              23 bits DLCI\n   The encapsulation of data or control messages\
    \ exchanged by various\n   protocols that use SNAP encapsulation (with their own\
    \ PIDs) is not\n   affected. The encoding of the IPv6 protocol identifier in such\n\
    \   messages MUST be done according to the specifications of those\n   protocols,\
    \ and [ASSNUM].\n"
- title: 4. Stateless Autoconfiguration
  contents:
  - "4. Stateless Autoconfiguration\n   An interface identifier [AARCH] for an IPv6\
    \ Frame Relay interface\n   must be unique on a Frame Relay link [AARCH], and\
    \ must be unique on\n   each of the virtual links represented by the VCs terminated\
    \ on the\n   interface.\n   The interface identifier for the Frame Relay interface\
    \ is locally\n   generated by the IPv6 module.\n   Each virtual circuit in a Frame\
    \ Relay network is uniquely identified\n   on a Frame Relay interface by a DLCI.\
    \ Furthermore, a DLCI can be seen\n   as an identification of the end point of\
    \ a virtual circuit on a Frame\n   Relay interface. Since each Frame Relay VC\
    \ is configured or\n   established separately, and acts like an independent virtual-link\n\
    \   from other VCs in the network, or on the interface, link, wire or\n   fiber,\
    \ it seems beneficial to view each VC's termination point on the\n   Frame Relay\
    \ interface as a \"pseudo-interface\" or \"logical-interface\"\n   overlaid on\
    \ the Frame Relay interface. Furthermore, it seems\n   beneficial to be able to\
    \ generate and associate an IPv6\n   autoconfigured address (including an IPv6\
    \ link local address) to each\n   \"pseudo-interface\", i.e. end-point of a VC,\
    \ i.e. to each DLCI on a\n   Frame Relay interface.\n   In order to achieve the\
    \ benefits described above, the mechanisms\n   specified in this document suggest\
    \ constructing the Frame Relay\n   interface identifier from 3 distinct fields\
    \ (Fig.1):\n   (a)  The \"EUI bits\" field. Bits 6 and 7 of the first octet,\n\
    \        representing the EUI-64 \"universal/local\" and respectively\n      \
    \  \"individual/group\" bits converted to IPv6 use. The former is set\n      \
    \  to zero to reflect that the 64 bit interface identifier value\n        has\
    \ local significance [AARCH]. The latter is set to 0 to\n        reflect the unicast\
    \ address [AARCH].\n   (b)  The \"Mid\" field. A 38 bit field which is generated\
    \ with the\n        purpose of adding uniqueness to the interface identifier.\n\
    \   (c)  The \"DLCI\" field. A 24 bit field that MAY hold a 10, 17, or 23\n  \
    \      bit DLCI value which MUST be extended with 0's to 24 bits. A\n        DLCI\
    \ based interface identifier -- which contains a valid DLCI\n        -- SHOULD\
    \ be generated as a result of successfully establishing\n        a VC -- PVC or\
    \ SVC.\n        If a DLCI is not known, the field MUST be set to the\n       \
    \ \"unspecified DLCI\" value which consists of setting each of the\n        24\
    \ bits to 1.\n   Since DLCIs are local to a Frame Relay node, it is possible to\
    \ have\n   Frame Relay distinct virtual circuits within a Frame Relay network\n\
    \   identified with the same DLCI values.\n             7     6     5     4  \
    \   3     2     1     0   (bit order)\n            +-----+-----+-----+-----+-----+-----+-----+-----+\n"
- title: (Octets) 0  |                                   |"EUI bits" |
  contents:
  - "(Octets) 0  |                                   |\"EUI bits\" |\n           \
    \ +                                   +-----+-----+\n         1  |           \
    \                                    |\n            +                        \
    \                       +\n         2  |                   \"Mid\"           \
    \            |\n            +                                               +\n\
    \         3  |                                               |\n            +\
    \                                               +\n         4  |             \
    \                                  |\n            +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \         5  |                                               |\n            +\
    \                                               +\n         6  |             \
    \      \"DLCI\"                      |\n            +                        \
    \                       +\n         7  |                                     \
    \          |\n            +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \            Fig.1 Frame Relay Pseudo-Interface Identifier\n   The Duplicate Address\
    \ Detection specified in [AUTOCONF] is used\n   repeatedly during the interface\
    \ identifier and local-link address\n   generation process, until the generated\
    \ identifier and consequently\n   the link-local address on the link -- VC --\
    \ are unique.\n"
- title: 4.1  Generating the "Mid" field.
  contents:
  - "4.1  Generating the \"Mid\" field.\n   The \"Mid\" can be generated in multiple\
    \ ways. This specification\n   suggests two mechanisms:\n (b.1)  \"Use of Local\
    \ Administrative Numbers\"\n        The \"Mid\" is filled with the result of merging:\n\
    \   (b.1.1)  A random number of 6 bits in length (Fig.2).\n   (b.1.2)  The Frame\
    \ Relay Node Identifier -- 16 bits -- is a user\n            administered value\
    \ used to locally identify a Frame Relay\n            node (Fig.2).\n   (b.1.3)\
    \  The Frame Relay Link Identifier -- 16 bits -- is a numerical\n            representation\
    \ of the Frame Relay interface or link (Fig.2).\n             7     6     5  \
    \   4     3     2     1     0  (bit order)\n            +-----+-----+-----+-----+-----+-----+-----+-----+\n"
- title: (Octets) 0  |          Random Number            |    MBZ    |
  contents:
  - "(Octets) 0  |          Random Number            |    MBZ    |\n            +-----------------------------------+-----+-----+\n\
    \         1  |                                               |\n            +\
    \          Frame Relay Node Identifier          +\n         2  |             \
    \                                  |\n            +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \         3  |                                               |\n            +\
    \          Frame Relay Link Identifier          +\n         4  |             \
    \                                  |\n            +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \         5  |                                               |\n            +\
    \                                               +\n         6  |             \
    \       \"DLCI\"                     |\n            +                        \
    \                       +\n         7  |                                     \
    \          |\n            +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \            Fig.2  Frame Relay Pseudo-Interface Identifier\n   or,\n (b.2)  \"\
    Use of The Frame Relay address - E.164 [E164], X.121\n       [X25] numbers, or\
    \ NSAP [NSAP] address\"\n       If a Frame Relay interface has an E.164 or a X.121\
    \ number, or an\n       NSAP address, the \"Mid\" field MUST be filled in with\
    \ a number\n       resulted from it as follows:  the number represented by the\
    \ BCD\n       encoding of the E.164 or X.121 number, or the binary encoding of\n\
    \       the NSAP address is truncated to 38 bits (Fig.3). Since the Frame\n  \
    \     Relay interface identifier has a \"local\" significance, the use of\n  \
    \     such a value has no real practical purposes other than adding to\n     \
    \  the uniqueness of the interface identifier on the link. Therefore\n       the\
    \ truncation can be performed on the high order or low order\n       bits. If\
    \ the high order bits truncation does not provide\n       uniqueness on the link\
    \ -- perhaps the DLCI value is not unique --\n       this most likely means that\
    \ the VC spans more for instance than a\n       national and/or international\
    \ destination area for an E.164\n       number, and therefore the truncation of\
    \ the low order bits should\n       be performed next, which most likely will\
    \ provide the desired\n       uniqueness.\n             7     6     5     4  \
    \   3     2     1     0     (bit order)\n            +-----+-----+-----+-----+-----+-----+-----+-----+\n"
- title: (Octets) 0  |                                   |    MBZ    |
  contents:
  - "(Octets) 0  |                                   |    MBZ    |\n            +\
    \                                   +-----+-----+\n         1  |             \
    \                                  |\n            +          E.164, X.121 (BCD\
    \ encoding)          +\n         2  |               or NSAP Address          \
    \       |\n            +                                               +\n   \
    \      3  |            (truncated to 38 bits)             |\n            +   \
    \                                            +\n         4  |                \
    \                               |\n            +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \         5  |                                               |\n            +\
    \                                               +\n         6  |             \
    \       \"DLCI\"                     |\n            +                        \
    \                       +\n         7  |                                     \
    \          |\n            +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \            Fig.3   Frame Relay (Pseudo) Interface Identifier\n"
- title: 5. Link-Local Addresses
  contents:
  - "5. Link-Local Addresses\n   The IPv6 link-local address [AARCH] for an IPv6 Frame\
    \ Relay interface\n   is formed by appending the interface identifier, formed\
    \ as defined\n   above, to the prefix FE80::/64 [AARCH].\n       10 bits     \
    \       54 bits                  64 bits\n     +----------+-----------------------+----------------------------+\n\
    \     |1111111010|         (zeros)       |Frame Relay Interface Ident.|\n    \
    \ +----------+-----------------------+----------------------------+\n"
- title: 6. Address Mapping -- Unicast, Multicast
  contents:
  - "6. Address Mapping -- Unicast, Multicast\n   The procedure for mapping IPv6 addresses\
    \ to link-layer addresses is\n   described in [IPv6-ND]. Additionally, extensions\
    \ to Neighbor\n   Discovery (ND) that allow the mapping of link-layer addresses\
    \ to IPv6\n   addresses are defined as Inverse Neighbor Discovery (IND) in [IND].\n\
    \   This document defines the formats of the link-layer address fields\n   used\
    \ by ND and IND. This specification does not define an algorithmic\n   mapping\
    \ of IPv6 multicast addresses to Frame Relay link-layer\n   addresses.\n   The\
    \ Source/Target Link-layer Address option used in Neighbor\n   Discovery and Inverse\
    \ Neighbor Discovery messages for a Frame Relay\n   link follows the general rules\
    \ defined by [IPv6-ND]. IPv6 addresses\n   can map two type of identifiers equivalent\
    \ to link-layer addresses:\n   DLCIs, and Frame Relay Addresses.  Therefore, for\
    \ Frame Relay, this\n   document defines two distinct formats for the ND and IND\
    \ messages\n   Link-Layer Address field:\n   (a)  DLCI Format -- used in ND and/or\
    \ IND messages on VCs that were\n        established prior to the ND or IND message\
    \ exchange --  mostly\n        PVCs. The use on SVCs makes sense with Inverse\
    \ Neighbor\n        Discovery [IND] messages if IND is employed after the successful\n\
    \        establishing of an SVC to gather information about other IPv6\n     \
    \   addresses assigned to the remote node and that SVC.\n   (b)  Frame Relay Address\
    \ Format -- used mostly prior to establishing\n        a new SVC, to get the \
    \ Frame Relay remote node identifier\n        (link-layer address) mapping to\
    \ a certain IPv6 address.\n        Note: An implementation may hold both types\
    \ of link layer\n        identifiers in the Neighbor Discovery cache. Additionally,\
    \ in\n        case of multiple VCs between two nodes, one node's Neighbor\n  \
    \      Discovery cache may hold a mapping of one of the remote node's\n      \
    \  IPv6 addresses to each and every DLCI identifying the VCs.\n        The mechanisms\
    \ which in such an implementation would make the\n        distinction between\
    \ the Neighbor Discovery Cache mapping of an\n        IPv6 address to a \"Frame\
    \ Relay Address Format\" and a \"DLCI\n        Format\" link-layer address, or\
    \ among several mappings to a \"DLCI\n        Format\" addresses are beyond the\
    \ scope of this specification.\n        The use of the override \"O\" bit in the\
    \ advertisement messages\n        that contain the above Link-Layer Address formats\
    \ SHOULD be\n        consistent with the [ND] specifications. Additionally, there\n\
    \        should be consistency related to the type of Link-Layer Address\n   \
    \     format: an implementation should override one address format in\n      \
    \  its Neighbor Discovery cache with the same type of address\n        format.\n\
    \   The \"DLCI Format\" is defined as follows:\n              7     6     5  \
    \   4     3     2     1     0    (bit order)\n             +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \          0  |                      Type                     |\n            \
    \ +-----+-----+-----+-----+-----+-----+-----+-----+\n          1  |          \
    \           Length                    |\n             +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \   with a DLCI (Q.922 address) encoded as option value:\n              7    \
    \ 6     5     4     3     2     1     0    (bit order)\n             +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \          2  |                                   |  1  |  1  |\n            \
    \ +              unused               +-----+-----+\n          3  |          \
    \                                     |\n             +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \          4  |            DLCI(high order)       |  0  |  0  |\n            \
    \ +-----+-----+-----+-----+-----+-----+-----+-----+\n          5  |  DLCI(low\
    \ order)      |  0  |  0  |  0  |  1  |\n             +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \          6  |                                               |\n            \
    \ +                   Padding                     +\n          7  |          \
    \         (zeros)                     |\n             +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \                 10 bits DLCI\n              7     6     5     4     3     2\
    \     1     0    (bit order)\n             +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \          2  |                                   |  1  |  1  |\n            \
    \ +              unused               +-----+-----+\n          3  |          \
    \                                     |\n             +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \          4  |            DLCI(high order)       |  0  |  0  |\n            \
    \ +-----+-----+-----+-----+-----+-----+-----+-----+\n          5  |  DLCI    \
    \             |  0  |  0  |  0  |  0  |\n             +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \          6  |             DLCI(low order)             |  0  |\n            \
    \ +-----+-----+-----+-----+-----+-----+-----+-----+\n          7  |       unused\
    \ (set to 0)           |  1  |  1  |\n             +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \                 17 bits DLCI\n              7     6     5     4     3     2\
    \     1     0    (bit order)\n             +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \          2  |                                   |  1  |  1  |\n            \
    \ +              unused               +-----+-----+\n          3  |          \
    \                                     |\n             +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \          4  |            DLCI(high order)       |  0  |  0  |\n            \
    \ +-----+-----+-----+-----+-----+-----+-----+-----\n          5  |  DLCI     \
    \            |  0  |  0  |  0  |  0  |\n             +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \          6  |             DLCI                        |  0  |\n            \
    \ +-----+-----+-----+-----+-----+-----+-----+-----+\n          7  |       DLCI\
    \ (low order)            |  0  |  1  |\n             +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \                 23 bits DLCI\n     Option fields:\n        Type        1 for\
    \ Source Link-layer address.\n                    2 for Target Link-layer address.\n\
    \        Length      The Length of the Option (including the Type\n          \
    \          and Length fields) in units of 8 octets.\n                    It has\
    \ the value 1.\n        Link-Layer Address        The DLCI encoded as a Q.922\
    \ address.\n      Description\n        The \"DLCI Format\" option value field\
    \ has two components:\n        (a)  Address Type -- encoded in the first two bits\
    \ of the first\n             two octets. Both bits are set to 1 to indicate the\
    \ DLCI\n             format. The rest of the bits in the two first octets are\n\
    \             not used -- they MUST be set to zero on transmit and MUST\n    \
    \         be ignored by the receiver.\n        (b)  DLCI -- encoded as a Q.922\
    \ address padded with zeros to the\n             last octet of the 6 octets available\
    \ for the entire Link-\n             Layer Address field of this format.\n   The\
    \ \"Frame Relay Address Format\" is defined as follows:\n              7     6\
    \     5     4     3     2     1     0    (bit order)\n             +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \          0  |                      Type                     |\n            \
    \ +-----+-----+-----+-----+-----+-----+-----+-----+\n          1  |          \
    \           Length                    |\n             +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \   with an E.164, X.121, number or NSAP  address encoded as option\n   value:\n\
    \              7     6     5     4     3     2     1     0    (bit order)\n  \
    \           +-----+-----+-----+-----+-----+-----+-----+-----+\n          2  |\
    \             size                  |  1  |  0  |\n             +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \          3  |            E.164 or X.121, or NSAP            |\n            \
    \ +---          Address Family Number          ---+\n          4  |          \
    \     (Assigned Number)               |\n             +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \          5  |                                               |\n            \
    \ /       E.164, or X.121 number (BCD encoded)    /\n             /          \
    \     or  NSAP address                /\n      4+size |                      \
    \                         |\n             +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \      5+size |                                               |\n            \
    \ /                    Padding                    /\n             /          \
    \          (zeros)                    /\n   8*Length-1|                      \
    \                         |\n             +-----+-----+-----+-----+-----+-----+-----+-----+\n\
    \      Option fields:\n        Type        1 for Source Link-layer address.\n\
    \                    2 for Target Link-layer address.\n        Length      The\
    \ length of the Option (including the\n                    Type and Length fields)\
    \ in units of 8 octet.\n                    It may have the value:\n         \
    \            2 -- for E.164, or X.121 numbers or NSAP\n                      \
    \    addresses not longer than 11 octets\n                          [E164], [X25],\
    \ [NSAP].\n                     3 -- for NSAP addresses longer than 11 but\n \
    \                         not longer than 19 octets.\n                     4 --\
    \ for NSAP addresses longer than 19 octets\n                          (not longer\
    \ than the maximum NSAP address\n                          length) [NSAP].\n \
    \       Link-Layer Address       The E.164, X.121, number encoded in\n       \
    \                          Binary Coded Decimal (BCD), or the NSAP\n         \
    \                        address.\n   Description\n     The \"Frame Relay Address\"\
    \ option value has three components:\n     (a)  Address Type -- encoded in the\
    \ first two bits of the first\n          octet.  The first bit is set to 0, the\
    \ second bit is set to 1.\n     (b)  Size -- encoded in the last (high order)\
    \ 6 bits of the first\n          octet. The maximum value of the field is the\
    \ maximum size of\n          the E.164, X.121, or NSAP addresses.\n     (c)  Address\
    \ Family Number -- the number assigned for the E.164,\n          X.121, or NSAP\
    \ address family [ASSNUM].\n     (d)  E.164, X.121, number -- encoded in BCD (two\
    \ digits per octet).\n          If the E.164, or X.121 has an even number of digits\
    \ the\n          encoding will fill all encoding octets -- half the number of\n\
    \          digits. If the E.164, or X.121 number has an odd number of\n      \
    \    digits, the lowest order digit fills only half of an octet --\n         \
    \ it is placed in the first 4 bits of the last octet of the\n          E.164,\
    \ or X.121 BCD encoding. The rest of the field up to the\n          last octet\
    \ of the 11 octets available is padded with zeros.\n          NSAP address --\
    \ the NSAP address. It is padded with zeros if\n          the NSAP address does\
    \ not fit in a number of octets that makes\n          the length of the option\
    \ an even number of 8 octets.\n"
- title: 7. Sending Neighbor Discovery Messages
  contents:
  - "7. Sending Neighbor Discovery Messages\n   Frame Relay networks do not provide\
    \ link-layer native multicasting\n   mechanisms. For the correct functioning of\
    \ the Neighbor Discovery\n   mechanisms, link-layer multicasting must be emulated.\n\
    \   To emulate multicasting for Neighbor Discovery (ND) the node MUST\n   send\
    \ frames carrying ND multicast packets to all VCs on a Frame Relay\n   interface.\
    \ This applies to ND messages addressed to both all-node and\n   solicited-node\
    \ multicast addresses. This method works well with PVCs.\n   A mesh of PVCs MAY\
    \ be configured and dedicated to multicast traffic\n   only.  An alternative to\
    \ a mesh of PVCs is a set of point-to-\n   multipoint PVCs.\n"
- title: 8. Receiving Neighbor Discovery Messages
  contents:
  - "8. Receiving Neighbor Discovery Messages\n   If a Neighbor Discovery Solicitation\
    \ message received by a node\n   contains the Source  link-layer  address option\
    \ with a DLCI, the\n   message MUST undergo Frame Relay specific preprocessing\
    \ required for\n   the correct interpretation of the field during the ND protocol\
    \ engine\n   processing. This processing is done before the Neighbor Discovery\n\
    \   message is processed by the Neighbor Discovery (ND) protocol engine.\n   The\
    \ motivation for this processing is the local significance of the\n   DLCI fields\
    \ in the Neighbor Discovery message: the DLCI significance\n   at the sender node\
    \ is different than the DLCI significance at the\n   receiver node. In other words,\
    \ the DLCI that identifies the Frame\n   Relay virtual circuit at the sender may\
    \ be different than the DLCI\n   that identifies the virtual circuit at the receiver\
    \ node.\n   Furthermore, the sender node may not be aware of the DLCI value at\n\
    \   the receiver. Therefore, the Frame Relay specific preprocessing\n   consists\
    \ in modifying the Neighbor Discovery Solicitation message\n   received, by storing\
    \ into the Source link-layer address option the\n   DLCI value of the virtual\
    \ circuit on which the frame was received, as\n   known to the receiver node.\
    \ The DLCI value being stored must be\n   encoded in the appropriate format (see\
    \ previous sections). The\n   passing of the DLCI value from the Frame Relay module\
    \ to the Neighbor\n   Discovery preprocessing module is an implementation choice.\n"
- title: 9. Security Considerations
  contents:
  - "9. Security Considerations\n   The mechanisms defined in this document for generating\
    \ an IPv6 Frame\n   Relay interface identifier are intended to provide uniqueness\
    \ at link\n   level -- virtual circuit.  The protection against duplication is\n\
    \   achieved by way of IPv6 Stateless Autoconfiguration Duplicate Address\n  \
    \ Detection mechanisms. Security protection against forgery or accident\n   at\
    \ the level of the mechanisms described here is provided by the IPv6\n   security\
    \ mechanisms [IPSEC], [IPSEC-Auth], [IPSEC-ESP] applied to\n   Neighbor Discovery\
    \ [IPv6-ND] or Inverse Neighbor Discovery [IND]\n   messages.\n   To avoid an\
    \ IPsec Authentication verification failure, the Frame\n   Relay specific preprocessing\
    \ of a Neighbor Discovery Solicitation\n   message that contains a DLCI format\
    \ Source link-layer address option,\n   MUST be done by the receiver node after\
    \ it completed IP Security\n   processing.\n"
- title: 10. Acknowledgments
  contents:
  - "10. Acknowledgments\n   Thanks to D. Harrington, and M. Merhar for reviewing\
    \  this document\n   and providing useful suggestions. Also thanks to G. Armitage\
    \ for his\n   reviewing and suggestions. Many thanks also to Thomas Narten for\n\
    \   suggestions on improving the document.\n"
- title: 11. References
  contents:
  - "11. References\n   [AARCH]      Hinden, R. and S. Deering, \"IPv6 Addressing\n\
    \                Architecture\", RFC 2373, July 1998.\n   [ASSNUM]     Reynolds,\
    \ J. and J. Postel, \"Assigned Numbers\", STD 2,\n                RFC 1700, October\
    \ 1994.  See also:\n                http://www.iana.org/numbers.html\n   [AUTOCONF]\
    \   Thomson, S. and T. Narten, \"IPv6 Stateless\n                Autoconfiguration\"\
    , RFC 2462, December 1998.\n   [CANON]      Narten, T. and C. Burton, \"A Caution\
    \ on the Canonical\n                Ordering of Link-Layer Addresses\", RFC 2469,\
    \ December\n                1998.\n   [ENCAPS]     Brown, C. and A. Malis, \"\
    Multiprotocol Interconnect over\n                Frame Relay\", STD 55, RFC 2427,\
    \ November 1998.\n   [IND]        Conta, A., \"Extensions to IPv6 Neighbor Discovery\
    \ for\n                Inverse Discovery\", Work in Progress, December 1998.\n\
    \   [IPv6]       Deering, S. and R. Hinden, \"Internet Protocol Version 6\n  \
    \              Specification\", RFC 2460, December 1998.\n   [IPv6-ATM]   Armitage,\
    \ G., Schulter, P. and M. Jork, \"IPv6 over ATM\n                Networks\", RFC\
    \ 2492, January 1999.\n   [IPv6-ETH]   Crawford, M., \"Transmission of IPv6 packets\
    \ over\n                Ethernet Networks\", RFC 2464, December 1998.\n   [IPv6-FDDI]\
    \  Crawford, M., \"Transmission of IPv6 packets over FDDI\n                Networks\"\
    , RFC 2467, December 1998.\n   [IPv6-NBMA]  Armitage, G., Schulter, P., Jork,\
    \ M. and G. Harter,\n                \"IPv6 over Non-Broadcast Multiple Access\
    \ (NBMA)\n                networks\", RFC 2491, January 1999.\n   [IPv6-ND]  \
    \  Narten, T., Nordmark, E. and W. Simpson, \"Neighbor\n                Discovery\
    \ for IP Version 6 (IPv6)\", RFC 2461, December\n                1998.\n   [IPv6-PPP]\
    \   Haskin, D. and E. Allen, \"IP Version 6 over PPP\", RFC\n                2472,\
    \ December 1998.\n   [IPv6-TR]    Narten, T.,  Crawford, M. and M. Thomas, \"\
    Transmission\n                of IPv6 packets over Token Ring Networks\", RFC\
    \ 2470,\n                December 1998.\n   [IPSEC]      Atkinson, R. and S. Kent,\
    \ \"Security Architecture for the\n                Internet Protocol\", RFC 2401,\
    \ November 1998.\n   [IPSEC-Auth] Atkinson, R. and S. Kent, \"IP Authentication\
    \ Header\",\n                RFC 2402, December 1998.\n   [IPSEC-ESP]  Atkinson,\
    \ R. and S. Kent, \"IP Encapsulating Security\n                Protocol (ESP)\"\
    , RFC 2406, November 1998.\n   [RFC2119]    Bradner, S., \"Key words for use in\
    \ RFCs to indicate\n                Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [E164]       International Telecommunication Union - \"Telephone\n\
    \                Network and ISDN Operation, Numbering, Routing, amd\n       \
    \         Mobile Service\", ITU-T Recommendation E.164, 1991.\n   [NSAP]     \
    \  ISO/IEC, \"Information Processing Systems -- Data\n                Communications\
    \ -- Network Service Definition Addendum 2:\n                Network Layer Addressing\"\
    . International Standard\n                8348/Addendum 2, ISO/IEC JTC 1, Switzerland\
    \ 1988.\n   [X25]        \"Information Technology -- Data Communications -- X.25\n\
    \                Packet Layer Protocol for Data Terminal Equipment\",\n      \
    \          International Standard 8208, March 1988.\n"
- title: 12. Authors' Addresses
  contents:
  - "12. Authors' Addresses\n   Alex Conta\n   Lucent Technologies Inc.\n   300 Baker\
    \ Ave, Suite 100\n   Concord, MA 01742\n   Phone: +1-978-287-2842\n   EMail: aconta@lucent.com\n\
    \   Andrew Malis\n   Ascend Communications\n   1 Robbins Rd\n   Westford, MA 01886\n\
    \   Phone: +1-978-952-7414\n   EMail: malis@ascend.com\n   Martin Mueller\n  \
    \ Lucent Technologies Inc.\n   300 Baker Ave, Suite 100\n   Concord, MA 01742\n\
    \   PHone: +1-978-287-2833\n   EMail:  memueller@lucent.com\n"
- title: 13.  Full Copyright Statement
  contents:
  - "13.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
