- contents:
  - '                 Child-to-Parent Synchronization in DNS

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document specifies how a child zone in the DNS can publish
    a\n   record to indicate to a parental agent that the parental agent may\n   copy
    and process certain records from the child zone.  The existence\n   of the record
    and any change in its value can be monitored by a\n   parental agent and acted
    on depending on local policy.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7477.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \     1.1. Terminology Used in This Document ..........................3\n   2.
    Definition of the CSYNC RRType ..................................3\n      2.1.
    The CSYNC Resource Record Format ...........................4\n           2.1.1.
    The CSYNC Resource Record Wire Format ...............4\n           2.1.2. The
    CSYNC Presentation Format .......................6\n           2.1.3. CSYNC RR
    Example ....................................6\n   3. CSYNC Data Processing ...........................................6\n
    \     3.1. Processing Procedure .......................................7\n      3.2.
    CSYNC Record Types .........................................8\n           3.2.1.
    The NS type .........................................8\n           3.2.2. The
    A and AAAA Types ................................9\n   4. Operational Considerations
    ......................................9\n      4.1. Error Reporting ...........................................10\n
    \     4.2. Child Nameserver Selection ................................10\n      4.3.
    Out-of-Bailiwick NS Records ...............................10\n      4.4. Documented
    Parental Agent Type Support ....................11\n      4.5. Removal of the
    CSYNC Records ..............................11\n      4.6. Parent/Child/Grandchild
    Glue Synchronization ..............12\n   5. Security Considerations ........................................12\n
    \  6. IANA Considerations ............................................12\n   7.
    References .....................................................13\n      7.1.
    Normative References ......................................13\n      7.2. Informative
    References ....................................14\n   Acknowledgments ...................................................15\n
    \  Author's Address ..................................................15\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document specifies how a child zone in the DNS ([RFC1034]\n
    \  [RFC1035]) can publish a record to indicate to a parental agent (see\n   Section
    1.1 for a definition of \"parental agent\") that it can copy\n   and process certain
    records from the child zone.  The existence of\n   the record and any change in
    its value can be monitored by a parental\n   agent and acted on depending on local
    policy.\n   Currently, some resource records (RRs) in a parent zone are typically\n
    \  expected to be in sync with the source data in the child's zone.  The\n   most
    common records that should match are the nameserver (NS) records\n   and any necessary
    associated address records (A and AAAA), also known\n   as \"glue records\".  These
    records are referred to as \"delegation\n   records\".\n   It has been challenging
    for operators of child DNS zones to update\n   their delegation records within
    the parent's set in a timely fashion.\n   These difficulties may stem from operator
    laziness as well as from\n   the complexities of maintaining a large number of
    DNS zones.  Having\n   an automated mechanism for signaling updates will greatly
    ease the\n   child zone operator's maintenance burden and improve the robustness\n
    \  of the DNS as a whole.\n   This document introduces a new Resource Record Type
    (RRType) named\n   \"CSYNC\" that indicates which delegation records published
    by a child\n   DNS operator should be processed by a parental agent and used to\n
    \  update the parent zone's DNS data.\n   This specification was not designed
    to synchronize DNSSEC security\n   records, such as DS RRsets.  For a solution
    to this problem, see the\n   complementary solution [RFC7344], which is designed
    to maintain\n   security delegation information.  In addition, this specification\n
    \  does not address how to perform bootstrapping operations, including\n   to
    get the required initial DNSSEC-secured operating environment in\n   place.\n"
  - contents:
    - "1.1.  Terminology Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
      as described in [RFC2119].\n   Terminology describing relationships between
      the interacting roles\n   involved in this document are defined in the following
      list:\n   Child:  The entity on record that has the delegation of the domain\n
      \     from the parent\n   Parent:  The domain in which the child is registered\n
      \  Child DNS operator:  The entity that maintains and publishes the zone\n      information
      for the child DNS\n   Parental agent:  The entity that the child has relationship
      with, to\n      change its delegation information\n"
    title: 1.1.  Terminology Used in This Document
  title: 1.  Introduction
- contents:
  - "2.  Definition of the CSYNC RRType\n   The CSYNC RRType contains, in its RDATA
    component, these parts: an\n   SOA serial number, a set of flags, and a simple
    bit-list indicating\n   the DNS RRTypes in the child that should be processed
    by the parental\n   agent in order to modify the DNS delegation records within
    the\n   parent's zone for the child DNS operator.  Child DNS operators\n   wanting
    a parental agent to perform the synchronization steps\n   outlined in this document
    MUST publish a CSYNC record at the apex of\n   the child zone.  Parental agent
    implementations MAY choose to query\n   child zones for this record and process
    DNS record data as indicated\n   by the Type Bit Map field in the RDATA of the
    CSYNC record.  How the\n   data is processed is described in Section 3.\n   Parental
    agents MUST process the entire set of child data indicated\n   by the Type Bit
    Map field (i.e., all record types indicated along\n   with all of the necessary
    records to support processing of that type)\n   or else parental agents MUST NOT
    make any changes to parental records\n   at all.  Errors due to unsupported Type
    Bit Map bits, or otherwise\n   nonpunishable data, SHALL result in no change to
    the parent zone's\n   delegation information for the child.  Parental agents MUST
    ignore a\n   child's CSYNC RDATA set if multiple CSYNC resource records are found;\n
    \  only a single CSYNC record should ever be present.\n   The parental agent MUST
    perform DNSSEC validation ([RFC4033]\n   [RFC4034] [RFC4035]), of the CSYNC RRType
    data and MUST perform\n   DNSSEC validation of any data to be copied from the
    child to the\n   parent.  Parents MUST NOT process any data from any of these
    records\n   if any of the validation results indicate anything other than\n   \"Secure\"
    [RFC4034] or if any the required data cannot be successfully\n   retrieved.\n"
  - contents:
    - '2.1.  The CSYNC Resource Record Format

      '
    - contents:
      - "2.1.1.  The CSYNC Resource Record Wire Format\n   The CSYNC RDATA consists
        of the following fields:\n                          1 1 1 1 1 1 1 1 1 1 2
        2 2 2 2 2 2 2 2 2 3 3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2
        3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |                          SOA Serial                           |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    |       Flags                   |            Type Bit Map       /\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
        \    /                     Type Bit Map (continued)                  /\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
      - contents:
        - "2.1.1.1.  The SOA Serial Field\n   The SOA Serial field contains a copy
          of the 32-bit SOA serial number\n   from the child zone.  If the soaminimum
          flag is set, parental agents\n   querying children's authoritative servers
          MUST NOT act on data from\n   zones advertising an SOA serial number less
          than this value.  See\n   [RFC1982] for properly implementing \"less than\"
          logic.  If the\n   soaminimum flag is not set, parental agents MUST ignore
          the value in\n   the SOA Serial field.  Clients can set the field to any
          value if the\n   soaminimum flag is unset, such as the number zero.\n   Note
          that a child zone's current SOA serial number may be greater\n   than the
          number indicated by the CSYNC record.  A child SHOULD update\n   the SOA
          Serial field in the CSYNC record every time the data being\n   referenced
          by the CSYNC record is changed (e.g., an NS record or\n   associated address
          record is changed).  A child MAY choose to update\n   the SOA Serial field
          to always match the current SOA Serial field.\n   Parental agents MAY cache
          SOA serial numbers from data they use and\n   refuse to process data from
          zones older than the last instance from\n   which they pulled data.\n   Although
          Section 3.2 of [RFC1982] describes how to properly implement\n   a less-than
          comparison operation with SOA serial numbers that may\n   wrap beyond the
          32-bit value in both the SOA record and the CSYNC\n   record, it is important
          that a child using the soaminimum flag must\n   not increment its SOA serial
          number value more than 2^16 within the\n   period of time that a parent
          might wait between polling the child for\n   the CSYNC record.\n"
        title: 2.1.1.1.  The SOA Serial Field
      - contents:
        - "2.1.1.2.  The Flags Field\n   The Flags field contains 16 bits of boolean
          flags that define\n   operations that affect the processing of the CSYNC
          record.  The flags\n   defined in this document are as follows:\n      0x00
          0x01: \"immediate\"\n      0x00 0x02: \"soaminimum\"\n   The definitions
          for how the flags are to be used can be found in\n   Section 3.\n   The
          remaining flags are reserved for use by future specifications.\n   Undefined
          flags MUST be set to 0 by CSYNC publishers.  Parental\n   agents MUST NOT
          process a CSYNC record if it contains a 1 value for a\n   flag that is unknown
          to or unsupported by the parental agent.\n"
        - contents:
          - "2.1.1.2.1.  The Type Bit Map Field\n   The Type Bit Map field indicates
            the record types to be processed by\n   the parental agent, according
            to the procedures in Section 3.  The\n   Type Bit Map field is encoded
            in the same way as the Type Bit Map\n   field of the NSEC record, described
            in [RFC4034], Section 4.1.2.  If\n   a bit has been set that a parental
            agent implementation does not\n   understand, the parental agent MUST
            NOT act upon the record.\n   Specifically, a parental agent must not simply
            copy the data, and it\n   must understand the semantics associated with
            a bit in the Type Bit\n   Map field that has been set to 1.\n"
          title: 2.1.1.2.1.  The Type Bit Map Field
        title: 2.1.1.2.  The Flags Field
      title: 2.1.1.  The CSYNC Resource Record Wire Format
    - contents:
      - "2.1.2.  The CSYNC Presentation Format\n   The CSYNC presentation format is
        as follows:\n      The SOA Serial field is represented as an integer.\n      The
        Flags field is represented as an integer.\n      The Type Bit Map field is
        represented as a sequence of RRType\n      mnemonics.  When the mnemonic is
        not known, the TYPE\n      representation described in [RFC3597], Section
        5, MUST be used.\n      Implementations that support parsing of presentation
        format\n      records SHOULD be able to read and understand these TYPE\n      representations
        as well.\n"
      title: 2.1.2.  The CSYNC Presentation Format
    - contents:
      - "2.1.3.  CSYNC RR Example\n   The following CSYNC RR shows an example entry
        for \"example.com\" that\n   indicates the NS, A, and AAAA bits are set and
        should be processed by\n   the parental agent for example.com.  The parental
        agent should pull\n   data only from a zone using a minimum SOA serial number
        of 66 (0x42\n   in hexadecimal).\n   example.com. 3600 IN CSYNC 66 3 A NS
        AAAA\n   The RDATA component of the example CSYNC RR would be encoded on the\n
        \  wire as follows:\n    0x00 0x00 0x00 0x42             (SOA Serial)\n    0x00
        0x03                       (Flags = immediate | soaminimum)\n    0x00 0x04
        0x60 0x00 0x00 0x08   (Type Bit Map)\n"
      title: 2.1.3.  CSYNC RR Example
    title: 2.1.  The CSYNC Resource Record Format
  title: 2.  Definition of the CSYNC RRType
- contents:
  - "3.  CSYNC Data Processing\n   The CSYNC record and associated data must be processed
    as an \"all or\n   nothing\" operation set.  If a parental agent fails to successfully\n
    \  query for any of the required records, the whole operation MUST be\n   aborted.
    \ (Note that a query resulting in \"no records exist\" as\n   proven by NSEC or
    NSEC3 is to be considered successful).\n   Parental agents MAY:\n      Process
    the CSYNC record immediately if the \"immediate\" flag is\n      set.  If the
    \"immediate\" flag is not set, the parental agent MUST\n      NOT act until the
    zone administrator approves the operation\n      through an out-of-band mechanism
    (such as through pushing a button\n      via a web interface).\n      Choose not
    to process the CSYNC record immediately, even if the\n      \"immediate\" flag
    is set.  That is, a parental agent might require\n      the child zone administrator
    approve the operation through an out-\n      of-band mechanism (such as through
    pushing a button via a web\n      interface).\n   Note: how the approval is done
    out of band is outside the scope of\n   this document and is implementation specific
    to parental agents.\n"
  - contents:
    - "3.1.  Processing Procedure\n   The following shows a sequence of steps that
      SHOULD be used when\n   collecting and processing CSYNC records from a child
      zone.  Because\n   DNS queries are not allowed to contain more than one \"question\"
      at a\n   time, a sequence of requests is needed.  When processing a CSYNC\n
      \  transaction request, all DNS queries should be sent to a single\n   authoritative
      name server for the child zone.  To ensure a single\n   host is being addressed,
      DNS over TCP SHOULD be used to avoid\n   conversing with multiple nodes at an
      anycast address.\n   1.  Query for the child zone's SOA record\n   2.  Query
      for the child zone's CSYNC record\n   3.  Query for the child zone's data records,
      as required by the CSYNC\n       record's Type Bit Map field\n       *  Note:
      if any of the resulting records being queried are not\n          authoritative
      within the child zone but rather in a grandchild\n          or deeper, SOA record
      queries must be made for the\n          grandchildren.  This will require the
      parental agent to\n          determine where the child/grandchild zone cuts
      occur.  Because\n          of the additional operational complexity, parental
      agents MAY\n          choose not to support this protocol with children making
      use\n          of records that are authoritative in the grandchildren.\n   4.
      \ Query for the collected SOA records again, starting with the\n       deepest
      and ending with the SOA of the child's.\n   If the SOA records from the first,
      middle, and last steps for a given\n   zone have different serial numbers (for
      example, because the zone was\n   edited and republished during the interval
      between steps 1 and 4),\n   then the CSYNC record obtained in the second set
      SHOULD NOT be\n   processed (rapidly changing child zones may need special\n
      \  consideration or processing).  The operation MAY be restarted or\n   retried
      in the future.\n   If the soaminimum flag is set and the SOA serial numbers
      are equal\n   but less than the CSYNC record's SOA Serial field [RFC1982], the\n
      \  record MUST NOT be processed.  If state is being kept by the parental\n   agent
      and the SOA serial number is less than the last time a CSYNC\n   record was
      processed, this CSYNC record SHOULD NOT be processed.\n   Similarly, if state
      is being kept by the parental agent and the SOA\n   Serial field of the CSYNC
      record is less than the SOA Serial field of\n   the CSYNC record from last time,
      then this CSYNC record SHOULD NOT be\n   processed.\n   If a failure of any
      kind occurs while trying to obtain any of the\n   required data, or if DNSSEC
      fails to validate all of the data\n   returned for these queries as \"secure\",
      then this CSYNC record MUST\n   NOT be processed.\n   See the \"Operational
      Consideration\" section (Section 4) for\n   additional guidance about processing.\n"
    title: 3.1.  Processing Procedure
  - contents:
    - "3.2.  CSYNC Record Types\n   This document defines how the following record
      types may be processed\n   if the CSYNC Type Bit Map field indicates they are
      to be processed.\n"
    - contents:
      - "3.2.1.  The NS type\n   The NS type flag indicates that the NS records from
        the child zone\n   should be copied into the parent's delegation information
        records for\n   the child.\n   NS records found within the child's zone should
        be copied verbatim\n   (with the exception of the Time to Live (TTL) field,
        for which the\n   parent MAY want to select a different value) and the result
        published\n   within the parent zone should be a set of NS records that match\n
        \  exactly.  If the child has published a new NS record within their\n   set,
        this record should be added to the parent zone.  Similarly, if\n   NS records
        in the parent's delegation records for the child contain\n   records that
        have been removed in the child's NS set, then they\n   should be removed in
        the parent's set as well.\n   Parental agents MAY refuse to perform NS updates
        if the replacement\n   records fail to meet NS record policies required by
        the parent zone\n   (e.g., \"every child zone must have at least two NS records\").\n
        \  Parental agents MUST NOT perform NS updates if there are no NS\n   records
        returned in a query, as verified by DNSSEC denial-of-\n   existence protection.
        \ This situation should never happen unless the\n   child nameservers are
        misconfigured.\n   Note that it is permissible for a child's nameserver to
        return a\n   CSYNC record that removes the queried nameserver itself from
        the\n   future NS or address set.\n"
      title: 3.2.1.  The NS type
    - contents:
      - "3.2.2.  The A and AAAA Types\n   The A and AAAA type flags indicates that
        the A and AAAA address glue\n   records for in-bailiwick NS records within
        the child zone should be\n   copied verbatim (with the exception of the TTL
        field, for which the\n   parent MAY want to select a different value) into
        the parent's\n   delegation information.\n   Queries should be sent by the
        parental agent to determine the A and\n   AAAA record addresses for each NS
        record within a NS set for the\n   child that are in bailiwick.\n   Note:
        only the matching types should be queried.  For example, if the\n   AAAA bit
        has not been set, then the AAAA records (if any) in the\n   parent's delegation
        should remain as is.  If a given address type is\n   set and the child's zone
        contains no data for that type (as proven by\n   appropriate NSEC or NSEC3
        records), then the result in the parent's\n   delegation records for the child
        should be an empty set.  However, if\n   the end result of processing would
        leave no glue records present in\n   the parent zone for any of the of the
        in-bailiwick NS records, then\n   the parent MUST NOT update the glue address
        records.  That is, if the\n   result of the processing would leave no in-bailiwick
        A or AAAA\n   records when there are in-bailiwick NS records, then processing
        of\n   the address records cannot happen as it would leave the parent/child\n
        \  relationship without any address linkage.\n   The procedure for querying
        for A and AAAA records MUST occur after\n   the procedure, if required, for
        querying for NS records as defined in\n   Section 3.2.1.  This ensures that
        the right set of NS records is used\n   as provided by the current NS set
        of the child.  That is, for CSYNC\n   records that have the NS bit set, the
        NS set used should be the one\n   pulled from the child while processing the
        CSYNC record.  For CSYNC\n   records without the NS bit set, the existing
        NS records within the\n   parent should be used to determine which A and/or
        AAAA records to\n   update.\n"
      title: 3.2.2.  The A and AAAA Types
    title: 3.2.  CSYNC Record Types
  title: 3.  CSYNC Data Processing
- contents:
  - "4.  Operational Considerations\n   There are a number of important operational
    aspects to consider when\n   deploying a CSYNC RRType.\n"
  - contents:
    - "4.1.  Error Reporting\n   There is no inline mechanism for a parental agent
      to report errors to\n   operators of child zones.  Thus, the only error reporting
      mechanisms\n   must be out of band, such as through a web console or over email.\n
      \  Parental agents should, at a minimum, at least log errors encountered\n   when
      processing CSYNC records.  Child operators utilizing the\n   \"immediate\" flag
      that fail to see an update within the parental\n   agent's specified operational
      window should access the parental\n   agent's error logging interface to determine
      why an update failed to\n   be processed.\n"
    title: 4.1.  Error Reporting
  - contents:
    - "4.2.  Child Nameserver Selection\n   Parental agents will need to poll child
      nameservers in search of\n   CSYNC records and related data records.\n   Parental
      agents MAY perform best-possible verification by querying\n   all NS records
      for available data to determine which has the most\n   recent SOA and CSYNC
      version (in an ideal world, they would all be\n   equal, but this is not possible
      in practice due to synchronization\n   delays and transfer failures).\n   Parental
      agents may offer a configuration interface to allow child\n   operators to specify
      which nameserver should be considered the master\n   to send data queries, too.
      \ Note that this master could be a\n   different nameserver than the publicly
      listed nameservers in the NS\n   set (i.e., it may be a \"hidden master\").\n
      \  Parental agents with a large number of clients may choose to offer a\n   programmatic
      interface to let their children indicate that new CSYNC\n   records and data
      are available for polling rather than polling every\n   child on a frequent
      basis.\n   Children that wish to phase out a nameserver will need to publish
      the\n   CSYNC record to remove the nameserver and then wait for the parental\n
      \  agent to process the published record before turning off the service.\n   This
      is required because the child cannot control which nameserver in\n   the existing
      NS set the parental agent may choose to query when\n   performing CSYNC processing.\n"
    title: 4.2.  Child Nameserver Selection
  - contents:
    - "4.3.  Out-of-Bailiwick NS Records\n   When a zone contains NS records where
      the domain name pointed at does\n   not fall within the zone itself, there is
      no way for the parent to\n   safely update the associated glue records.  Thus,
      the child DNS\n   operator MAY indicate that the NS records should be synchronized,
      and\n   MAY set any glue record flags (A, AAAA) as well, but the parent will\n
      \  only update those glue records that are below the child's delegation\n   point.\n
      \  Children deploying NS records pointing to domain names within their\n   own
      children (the \"grandchildren\") SHOULD ensure the grandchildren's\n   associated
      glue records are properly set before publishing the CSYNC\n   record.  That
      is, it is imperative that proper communication and\n   synchronization exist
      between the child and the grandchild.\n"
    title: 4.3.  Out-of-Bailiwick NS Records
  - contents:
    - "4.4.  Documented Parental Agent Type Support\n   Parental agents that support
      processing CSYNC records SHOULD publicly\n   document the following minimum
      processing characteristics:\n      The fact that they support CSYNC processing\n
      \     The Type Bit Map bits they support\n      The frequency with which they
      poll clients (which may also be\n      configurable by the client)\n      If
      they support the \"immediate\" flag\n      If they poll a child's single nameserver,
      a configured list of\n      nameservers, or all of the advertised nameservers
      when querying\n      records\n      If they support SOA serial number caching
      to avoid issues with\n      regression and/or replay\n      Where errors for
      CSYNC processing are published\n      If they support sending queries to a \"hidden
      master\"\n"
    title: 4.4.  Documented Parental Agent Type Support
  - contents:
    - "4.5.  Removal of the CSYNC Records\n   Children MAY remove the CSYNC record
      upon noticing that the parent\n   zone has published the required records, thus
      eliminating the need\n   for the parent to continually query for the CSYNC record
      and all\n   corresponding records.  By removing the CSYNC record from the child\n
      \  zone, the parental agent will only need to perform the query for the\n   CSYNC
      record and can stop processing when it finds it missing.  This\n   will reduce
      resource usage by both the child and the parental agent.\n"
    title: 4.5.  Removal of the CSYNC Records
  - contents:
    - "4.6.  Parent/Child/Grandchild Glue Synchronization\n   When a child needs to
      publish a CSYNC record that synchronizes NS and\n   A/AAAA glue records and
      the NS record is actually pointing to a child\n   of the child (a grandchild
      of the parent), then it is critical that\n   the glue records in the child point
      to the proper real addresses\n   records published by the grandchild.  It is
      assumed that if a child\n   is using a grandchild's nameserver that they must
      be in careful\n   synchronization.  Specifically, this specification requires
      this to\n   be the case.\n"
    title: 4.6.  Parent/Child/Grandchild Glue Synchronization
  title: 4.  Operational Considerations
- contents:
  - "5.  Security Considerations\n   This specification requires the use of DNSSEC
    in order to determine\n   that the data being updated was unmodified by third
    parties.\n   Parental agents implementing CSYNC processing MUST ensure all DNS\n
    \  transactions are validated by DNSSEC as \"secure\".  Clients deploying\n   CSYNC
    MUST ensure their zones are signed, current and properly linked\n   to the parent
    zone with a DS record that points to an appropriate\n   DNSKEY of the child's
    zone.\n   This specification does not address how to perform bootstrapping\n   operations
    to get the required initial DNSSEC-secured operating\n   environment in place.
    \ Additionally, this specification was not\n   designed to synchronize DNSSEC
    security records, such as DS pointers,\n   or the CSYNC record itself.  Thus,
    implementations of this protocol\n   MUST NOT use it to synchronize DS records,
    DNSKEY materials, CDS\n   records, CDNSKEY records, or CSYNC records.  Similarly,
    future\n   documents extending this protocol MUST NOT offer the ability to\n   synchronize
    DS, DNSKEY materials, CDS records, CDNSKEY records, or\n   CSYNC records.  For
    such a solution, please see the complimentary\n   solution [RFC7344] for maintaining
    security delegation information.\n   To ensure that an older CSYNC record making
    use of the soaminimum\n   flag cannot be replayed to revert values, the SOA serial
    number MUST\n   NOT be incremented by more than 2^16 during the lifetime of the\n
    \  signature window of the associated RRSIGs signing the SOA and CSYNC\n   records.
    \ Note that this is independent of whether or not the\n   increment causes the
    2^32 bit serial number field to wrap.\n"
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   This document defines a new DNS Resource Record Type,
    named \"CSYNC\".\n   The IANA has assigned a code point from the \"Resource Record
    (RR)\n   TYPEs\" sub-registry of the \"Domain Name System (DNS) Parameters\"\n
    \  registry (http://www.iana.org/assignments/dns-parameters) for this\n   record.\n
    \    TYPE    Value    Meaning                           Reference\n     -----
    \  ------   --------------------------        -----------\n     CSYNC   62       Child-to-Parent
    Synchronization   [RFC7477]\n   The IANA has created and maintains a sub-registry
    (the \"Child\n   Synchronization (CSYNC) Flags\" registry) of the \"Domain Name
    System\n   (DNS) Parameters\" registry.  The initial values for this registry
    are\n   below.\n   A \"Standards Action\" [RFC5226] is required for the assignment
    of new\n   flag value.\n   This registry holds a set of single-bit \"Flags\" for
    use in the CSYNC\n   record within the 16-bit Flags field.  Thus, a maximum of
    16 flags\n   may be defined.\n   The initial assignments in this registry are:\n
    \    Bit      Flag        Description               Reference\n     ----     ------
    \     -------------             -----------\n     Bit 0    immediate   Immediately
    process this  [RFC7477],\n                          CSYNC record.             Section
    3\n     Bit 1    soaminimum  Require a SOA serial      [RFC7477],\n                          number
    greater than the   Section 2.1.1.1\n                          one specified.\n"
  title: 6.  IANA Considerations
- contents:
  - '7.  References

    '
  - contents:
    - "7.1.  Normative References\n   [RFC1982]  Elz, R. and R. Bush, \"Serial Number
      Arithmetic\", RFC 1982,\n              August 1996, <http://www.rfc-editor.org/info/rfc1982>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n
      \  [RFC3597]  Gustafsson, A., \"Handling of Unknown DNS Resource Record\n              (RR)
      Types\", RFC 3597, September 2003,\n              <http://www.rfc-editor.org/info/rfc3597>.\n
      \  [RFC4034]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n              Rose,
      \"Resource Records for the DNS Security Extensions\",\n              RFC 4034,
      March 2005,\n              <http://www.rfc-editor.org/info/rfc4034>.\n"
    title: 7.1.  Normative References
  - contents:
    - "7.2.  Informative References\n   [RFC1034]  Mockapetris, P., \"Domain names
      - concepts and facilities\",\n              STD 13, RFC 1034, November 1987,\n
      \             <http://www.rfc-editor.org/info/rfc1034>.\n   [RFC1035]  Mockapetris,
      P., \"Domain names - implementation and\n              specification\", STD
      13, RFC 1035, November 1987,\n              <http://www.rfc-editor.org/info/rfc1035>.\n
      \  [RFC4033]  Arends, R., Austein, R., Larson, M., Massey, D., and S.\n              Rose,
      \"DNS Security Introduction and Requirements\", RFC\n              4033, March
      2005,\n              <http://www.rfc-editor.org/info/rfc4033>.\n   [RFC4035]
      \ Arends, R., Austein, R., Larson, M., Massey, D., and S.\n              Rose,
      \"Protocol Modifications for the DNS Security\n              Extensions\", RFC
      4035, March 2005,\n              <http://www.rfc-editor.org/info/rfc4035>.\n
      \  [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA
      Considerations Section in RFCs\", BCP 26, RFC 5226,\n              May 2008,
      <http://www.rfc-editor.org/info/rfc5226>.\n   [RFC7344]  Kumari, W., Gudmundsson,
      O., and G. Barwood, \"Automating\n              DNSSEC Delegation Trust Maintenance\",
      RFC 7344, September\n              2014, <http://www.rfc-editor.org/info/rfc7344>.\n"
    title: 7.2.  Informative References
  title: 7.  References
- contents:
  - "Acknowledgments\n   A thank you goes out to Warren Kumari and Olafur Gudmundsson,
    whose\n   work on the CDS record type helped inspire the work in this document,\n
    \  as well as the definition for the \"parental agent\" definition and\n   significant
    contributions to the text.  A thank you also goes out to\n   Ed Lewis, with whom
    the author held many conversations about the\n   issues surrounding parent/child
    relationships and synchronization.\n   Much of the work in this document is derived
    from the careful\n   existing analysis of these three esteemed colleagues.  Thank
    you to\n   the following people who have contributed text or detailed reviews
    to\n   the document (in no particular order): Matthijs Mekking, Petr Spacek,\n
    \  JINMEI Tatuya, Pete Resnick, Joel Jaeggli, Brian Haberman, Warren\n   Kumari,
    Adrian Farrel, Alia Atlas, Barry Leiba, Richard Barnes,\n   Stephen Farrell, and
    Ted Lemon.  Lastly, the DNSOP WG chairs Tim\n   Wicinski and Suzanne Woolf have
    been a tremendous help in getting\n   this document moving forward to publication.\n
    \  A special thanks goes to Roy Arends, for taking the \"bite out of that\n   hamburger\"
    challenge while discussing this document.\n   A similar project, independently
    designed and developed, was\n   conducted by ep.net called \"Child Activated DNS
    Refresh\".\n"
  title: Acknowledgments
- contents:
  - "Author's Address\n   Wes Hardaker\n   Parsons, Inc.\n   P.O. Box 382\n   Davis,
    CA  95617\n   US\n   Phone: +1 530 792 1913\n   EMail: ietf@hardakers.net\n"
  title: Author's Address
