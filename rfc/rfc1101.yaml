- title: __initial_text__
  contents:
  - '             DNS Encoding of Network Names and Other Types

    '
- title: 1. STATUS OF THIS MEMO
  contents:
  - "1. STATUS OF THIS MEMO\n   This RFC proposes two extensions to the Domain Name\
    \ System:\n      - A specific method for entering and retrieving RRs which map\n\
    \        between network names and numbers.\n      - Ideas for a general method\
    \ for describing mappings between\n        arbitrary identifiers and numbers.\n\
    \   The method for mapping between network names and addresses is a\n   proposed\
    \ standard, the ideas for a general method are experimental.\n   This RFC assumes\
    \ that the reader is familiar with the DNS [RFC 1034,\n   RFC 1035] and its use.\
    \  The data shown is for pedagogical use and\n   does not necessarily reflect\
    \ the real Internet.\n   Distribution of this memo is unlimited.\n"
- title: 2. INTRODUCTION
  contents:
  - "2. INTRODUCTION\n   The DNS is extensible and can be used for a virtually unlimited\n\
    \   number of data types, name spaces, etc.  New type definitions are\n   occasionally\
    \ necessary as are revisions or deletions of old types\n   (e.g., MX replacement\
    \ of MD and MF [RFC 974]), and changes described\n   in [RFC 973].  This RFC describes\
    \ changes due to the general need to\n   map between identifiers and values, and\
    \ a specific need for network\n   name support.\n   Users wish to be able to use\
    \ the DNS to map between network names and\n   numbers.  This need is the only\
    \ capability found in HOSTS.TXT which\n   is not available from the DNS.  In designing\
    \ a method to do this,\n   there were two major areas of concern:\n      - Several\
    \ tradeoffs involving control of network names, the\n        syntax of network\
    \ names, backward compatibility, etc.\n      - A desire to create a method which\
    \ would be sufficiently\n        general to set a good precedent for future mappings,\n\
    \        for example, between TCP-port names and numbers,\n        autonomous\
    \ system names and numbers, X.500 Relative\n        Distinguished Names (RDNs)\
    \ and their servers, or whatever.\n   It was impossible to reconcile these two\
    \ areas of concern for network\n   names because of the desire to unify network\
    \ number support within\n   existing IP address to host name support.  The existing\
    \ support is\n   the IN-ADDR.ARPA section of the DNS name space.  As a result\
    \ this RFC\n   describes one structure for network names which builds on the\n\
    \   existing support for host names, and another family of structures for\n  \
    \ future yellow pages (YP) functions such as conversions between TCP-\n   port\
    \ numbers and mnemonics.\n   Both structures are described in following sections.\
    \  Each structure\n   has a discussion of design issues and specific structure\n\
    \   recommendations.\n   We wish to avoid defining structures and methods which\
    \ can work but\n   do not because of indifference or errors on the part of system\n\
    \   administrators when maintaining the database.  The WKS RR is an\n   example.\
    \  Thus, while we favor distribution as a general method, we\n   also recognize\
    \ that centrally maintained tables (such as HOSTS.TXT)\n   are usually more consistent\
    \ though less maintainable and timely.\n   Hence we recommend both specific methods\
    \ for mapping network names,\n   addresses, and subnets, as well as an instance\
    \ of the general method\n   for mapping between allocated network numbers and\
    \ network names.\n   (Allocation is centrally performed by the SRI Network Information\n\
    \   Center, aka the NIC).\n"
- title: 3. NETWORK NAME ISSUES AND DISCUSSION
  contents:
  - "3. NETWORK NAME ISSUES AND DISCUSSION\n   The issues involved in the design were\
    \ the definition of network name\n   syntax, the mappings to be provided, and\
    \ possible support for similar\n   functions at the subnet level.\n"
- title: 3.1. Network name syntax
  contents:
  - "3.1. Network name syntax\n   The current syntax for network names, as defined\
    \ by [RFC 952] is an\n   alphanumeric string of up to 24 characters, which begins\
    \ with an\n   alpha, and may include \".\" and \"-\" except as first and last\n\
    \   characters.  This is the format which was also used for host names\n   before\
    \ the DNS.  Upward compatibility with existing names might be a\n   goal of any\
    \ new scheme.\n   However, the present syntax has been used to define a flat name\n\
    \   space, and hence would prohibit the same distributed name allocation\n   method\
    \ used for host names.  There is some sentiment for allowing the\n   NIC to continue\
    \ to allocate and regulate network names, much as it\n   allocates numbers, but\
    \ the majority opinion favors local control of\n   network names.  Although it\
    \ would be possible to provide a flat space\n   or a name space in which, for\
    \ example, the last label of a domain\n   name captured the old-style network\
    \ name, any such approach would add\n   complexity to the method and create different\
    \ rules for network names\n   and host names.\n   For these reasons, we assume\
    \ that the syntax of network names will be\n   the same as the expanded syntax\
    \ for host names permitted in [HR].\n   The new syntax expands the set of names\
    \ to allow leading digits, so\n   long as the resulting representations do not\
    \ conflict with IP\n   addresses in decimal octet form.  For example, 3Com.COM\
    \ and 3M.COM\n   are now legal, although 26.0.0.73.COM is not.  See [HR] for details.\n\
    \   The price is that network names will get as complicated as host\n   names.\
    \  An administrator will be able to create network names in any\n   domain under\
    \ his control, and also create network number to name\n   entries in IN-ADDR.ARPA\
    \ domains under his control.  Thus, the name\n   for the ARPANET might become\
    \ NET.ARPA, ARPANET.ARPA or Arpa-\n   network.MIL., depending on the preferences\
    \ of the owner.\n"
- title: 3.2. Mappings
  contents:
  - "3.2. Mappings\n   The desired mappings, ranked by priority with most important\
    \ first,\n   are:\n      - Mapping a IP address or network number to a network\
    \ name.\n        This mapping is for use in debugging tools and status displays\n\
    \        of various sorts.  The conversion from IP address to network\n      \
    \  number is well known for class A, B, and C IP addresses, and\n        involves\
    \ a simple mask operation.  The needs of other classes\n        are not yet defined\
    \ and are ignored for the rest of this RFC.\n      - Mapping a network name to\
    \ a network address.\n        This facility is of less obvious application, but\
    \ a\n        symmetrical mapping seems desirable.\n      - Mapping an organization\
    \ to its network names and numbers.\n        This facility is useful because it\
    \ may not always be possible\n        to guess the local choice for network names,\
    \ but the\n        organization name is often well known.\n      - Similar mappings\
    \ for subnets, even when nested.\n        The primary application is to be able\
    \ to identify all of the\n        subnets involved in a particular IP address.\
    \  A secondary\n        requirement is to retrieve address mask information.\n"
- title: 3.3. Network address section of the name space
  contents:
  - "3.3. Network address section of the name space\n   The network name syntax discussed\
    \ above can provide domain names\n   which will contain mappings from network\
    \ names to various quantities,\n   but we also need a section of the name space,\
    \ organized by network\n   and subnet number to hold the inverse mappings.\n \
    \  The choices include:\n      - The same network number slots already assigned\
    \ and delegated\n        in the IN-ADDR.ARPA section of the name space.\n    \
    \    For example, 10.IN-ADDR.ARPA for class A net 10,\n        2.128.IN-ADDR.ARPA\
    \ for class B net 128.2, etc.\n      - Host-zero addresses in the IN-ADDR.ARPA\
    \ tree.  (A host field\n        of all zero in an IP address is prohibited because\
    \ of\n        confusion related to broadcast addresses, et al.)\n        For example,\
    \ 0.0.0.10.IN-ADDR.ARPA for class A net 10,\n        0.0.2.128.IN-ADDR.arpa for\
    \ class B net 128.2, etc.  Like the\n        first scheme, it uses in-place name\
    \ space delegations to\n        distribute control.\n        The main advantage\
    \ of this scheme over the first is that it\n        allows convenient names for\
    \ subnets as well as networks.  A\n        secondary advantage is that it uses\
    \ names which are not in use\n        already, and hence it is possible to test\
    \ whether an\n        organization has entered this information in its domain\n\
    \        database.\n      - Some new section of the name space.\n        While\
    \ this option provides the most opportunities, it creates\n        a need to delegate\
    \ a whole new name space.  Since the IP\n        address space is so closely related\
    \ to the network number\n        space, most believe that the overhead of creating\
    \ such a new\n        space is overwhelming and would lead to the WKS syndrome.\
    \  (As\n        of February, 1989, approximately 400 sections of the\n       \
    \ IN-ADDR.ARPA tree are already delegated, usually at network\n        boundaries.)\n"
- title: 4. SPECIFICS FOR NETWORK NAME MAPPINGS
  contents:
  - "4. SPECIFICS FOR NETWORK NAME MAPPINGS\n   The proposed solution uses information\
    \ stored at:\n      - Names in the IN-ADDR.ARPA tree that correspond to host-zero\
    \ IP\n        addresses.  The same method is used for subnets in a nested\n  \
    \      fashion.  For example, 0.0.0.10.IN-ADDR.ARPA. for net 10.\n        Two\
    \ types of information are stored here: PTR RRs which point\n        to the network\
    \ name in their data sections, and A RRs, which\n        are present if the network\
    \ (or subnet) is subnetted further.\n        If a type A RR is present, then it\
    \ has the address mask as its\n        data.  The general form is:\n        <reversed-host-zero-number>.IN-ADDR.ARPA.\
    \ PTR <network-name>\n        <reversed-host-zero-number>.IN-ADDR.ARPA. A   <subnet-mask>\n\
    \        For example:\n        0.0.0.10.IN-ADDR.ARPA.  PTR     ARPANET.ARPA.\n\
    \        or\n        0.0.2.128.IN-ADDR.ARPA. PTR     cmu-net.cmu.edu.\n      \
    \                          A       255.255.255.0\n        In general, this information\
    \ will be added to an existing\n        master file for some IN-ADDR.ARPA domain\
    \ for each network\n        involved.  Similar RRs can be used at host-zero subnet\n\
    \        entries.\n      - Names which are network names.\n        The data stored\
    \ here is PTR RRs pointing at the host-zero\n        entries.  The general form\
    \ is:\n        <network-name> ptr <reversed-host-zero-number>.IN-ADDR.ARPA\n \
    \       For example:\n        ARPANET.ARPA.           PTR     0.0.0.10.IN-ADDR.ARPA.\n\
    \        or\n        isi-net.isi.edu.        PTR     0.0.9.128.IN-ADDR.ARPA.\n\
    \        In general, this information will be inserted in the master\n       \
    \ file for the domain name of the organization; this is a\n        different file\
    \ from that which holds the information below\n        IN-ADDR.ARPA.  Similar\
    \ PTR RRs can be used at subnet names.\n      - Names corresponding to organizations.\n\
    \        The data here is one or more PTR RRs pointing at the\n        IN-ADDR.ARPA\
    \ names corresponding to host-zero entries for\n        networks.\n        For\
    \ example:\n        ISI.EDU.        PTR     0.0.9.128.IN-ADDR.ARPA.\n        MCC.COM.\
    \        PTR     0.167.5.192.IN-ADDR.ARPA.\n                        PTR     0.168.5.192.IN-ADDR.ARPA.\n\
    \                        PTR     0.169.5.192.IN-ADDR.ARPA.\n                 \
    \       PTR     0.0.62.128.IN-ADDR.ARPA.\n"
- title: 4.1. A simple example
  contents:
  - "4.1. A simple example\n   The ARPANET is a Class A network without subnets. \
    \ The RRs which\n   would be added, assuming the ARPANET.ARPA was selected as\
    \ a network\n   name, would be:\n   ARPA.                   PTR     0.0.0.10.IN-ADDR.ARPA.\n\
    \   ARPANET.ARPA.           PTR     0.0.0.10.IN-ADDR.ARPA.\n   0.0.0.10.IN-ADDR.ARPA.\
    \  PTR     ARPANET.ARPA.\n   The first RR states that the organization named ARPA\
    \ owns net 10 (It\n   might also own more network numbers, and these would be\
    \ represented\n   with an additional RR per net.)  The second states that the\
    \ network\n   name ARPANET.ARPA. maps to net 10.  The last states that net 10\
    \ is\n   named ARPANET.ARPA.\n   Note that all of the usual host and corresponding\
    \ IN-ADDR.ARPA\n   entries would still be required.\n"
- title: 4.2. A complicated, subnetted example
  contents:
  - "4.2. A complicated, subnetted example\n   The ISI network is 128.9, a class B\
    \ number.  Suppose the ISI network\n   was organized into two levels of subnet,\
    \ with the first level using\n   an additional 8 bits of address, and the second\
    \ level using 4 bits,\n   for address masks of x'FFFFFF00' and X'FFFFFFF0'.\n\
    \   Then the following RRs would be entered in ISI's master file for the\n   ISI.EDU\
    \ zone:\n   ; Define network entry\n   isi-net.isi.edu.                PTR  0.0.9.128.IN-ADDR.ARPA.\n\
    \   ; Define first level subnets\n   div1-subnet.isi.edu.            PTR  0.1.9.128.IN-ADDR.ARPA.\n\
    \   div2-subnet.isi.edu.            PTR  0.2.9.128.IN-ADDR.ARPA.\n   ; Define\
    \ second level subnets\n   inc-subsubnet.isi.edu.          PTR  16.2.9.128.IN-ADDR.ARPA.\n\
    \   in the 9.128.IN-ADDR.ARPA zone:\n   ; Define network number and address mask\n\
    \   0.0.9.128.IN-ADDR.ARPA.         PTR  isi-net.isi.edu.\n                  \
    \                 A    255.255.255.0  ;aka X'FFFFFF00'\n   ; Define one of the\
    \ first level subnet numbers and masks\n   0.1.9.128.IN-ADDR.ARPA.         PTR\
    \  div1-subnet.isi.edu.\n                                   A    255.255.255.240\
    \ ;aka X'FFFFFFF0'\n   ; Define another first level subnet number and mask\n \
    \  0.2.9.128.IN-ADDR.ARPA.         PTR  div2-subnet.isi.edu.\n               \
    \                    A    255.255.255.240 ;aka X'FFFFFFF0'\n   ; Define second\
    \ level subnet number\n   16.2.9.128.IN-ADDR.ARPA.        PTR  inc-subsubnet.isi.edu.\n\
    \   This assumes that the ISI network is named isi-net.isi.edu., first\n   level\
    \ subnets are named div1-subnet.isi.edu. and div2-\n   subnet.isi.edu., and a\
    \ second level subnet is called inc-\n   subsubnet.isi.edu.  (In a real system\
    \ as complicated as this there\n   would be more first and second level subnets\
    \ defined, but we have\n   shown enough to illustrate the ideas.)\n"
- title: 4.3. Procedure for using an IP address to get network name
  contents:
  - "4.3. Procedure for using an IP address to get network name\n   Depending on whether\
    \ the IP address is class A, B, or C, mask off the\n   high one, two, or three\
    \ bytes, respectively.  Reverse the octets,\n   suffix IN-ADDR.ARPA, and do a\
    \ PTR query.\n   For example, suppose the IP address is 10.0.0.51.\n      1. Since\
    \ this is a class A address, use a mask x'FF000000' and\n         get 10.0.0.0.\n\
    \      2. Construct the name 0.0.0.10.IN-ADDR.ARPA.\n      3. Do a PTR query.\
    \  Get back\n         0.0.0.10.IN-ADDR.ARPA.  PTR     ARPANET.ARPA.\n      4.\
    \ Conclude that the network name is \"ARPANET.ARPA.\"\n   Suppose that the IP\
    \ address is 128.9.2.17.\n      1. Since this is a class B address, use a mask\
    \ of x'FFFF0000'\n         and get 128.9.0.0.\n      2. Construct the name 0.0.9.128.IN-ADDR.ARPA.\n\
    \      3. Do a PTR query.  Get back\n         0.0.9.128.IN-ADDR.ARPA.       PTR\
    \     isi-net.isi.edu\n      4. Conclude that the network name is \"isi-net.isi.edu.\"\
    \n"
- title: 4.4. Procedure for finding all subnets involved with an IP address
  contents:
  - "4.4. Procedure for finding all subnets involved with an IP address\n   This is\
    \ a simple extension of the IP address to network name method.\n   When the network\
    \ entry is located, do a lookup for a possible A RR.\n   If the A RR is found,\
    \ look up the next level of subnet using the\n   original IP address and the mask\
    \ in the A RR.  Repeat this procedure\n   until no A RR is found.\n   For example,\
    \ repeating the use of 128.9.2.17.\n      1. As before construct a query for 0.0.9.128.IN-ADDR.ARPA.\n\
    \         Retrieve:\n         0.0.9.128.IN-ADDR.ARPA.  PTR    isi-net.isi.edu.\n\
    \                                  A      255.255.255.0\n      2. Since an A RR\
    \ was found, repeat using mask from RR\n         (255.255.255.0), constructing\
    \ a query for\n         0.2.9.128.IN-ADDR.ARPA.  Retrieve:\n         0.2.9.128.IN-ADDR.ARPA.\
    \  PTR    div2-subnet.isi.edu.\n                                  A      255.255.255.240\n\
    \      3. Since another A RR was found, repeat using mask\n         255.255.255.240\
    \ (x'FFFFFFF0').  constructing a query for\n         16.2.9.128.IN-ADDR.ARPA.\
    \  Retrieve:\n         16.2.9.128.IN-ADDR.ARPA. PTR    inc-subsubnet.isi.edu.\n\
    \      4. Since no A RR is present at 16.2.9.128.IN-ADDR.ARPA., there\n      \
    \   are no more subnet levels.\n"
- title: 5. YP ISSUES AND DISCUSSION
  contents:
  - "5. YP ISSUES AND DISCUSSION\n   The term \"Yellow Pages\" is used in almost as\
    \ many ways as the term\n   \"domain\", so it is useful to define what is meant\
    \ herein by YP.  The\n   general problem to be solved is to create a method for\
    \ creating\n   mappings from one kind of identifier to another, often with an\n\
    \   inverse capability.  The traditional methods are to search or use a\n   precomputed\
    \ index of some kind.\n   Searching is impractical when the search is too large,\
    \ and\n   precomputed indexes are possible only when it is possible to specify\n\
    \   search criteria in advance, and pay for the resources necessary to\n   build\
    \ the index.  For example, it is impractical to search the entire\n   domain tree\
    \ to find a particular address RR, so we build the IN-\n   ADDR.ARPA YP.  Similarly,\
    \ we could never build an Internet-wide index\n   of \"hosts with a load average\
    \ of less than 2\" in less time than it\n   would take for the data to change,\
    \ so indexes are a useless approach\n   for that problem.\n   Such a precomputed\
    \ index is what we mean by YP, and we regard the\n   IN-ADDR.ARPA domain as the\
    \ first instance of a YP in the DNS.\n   Although a single, centrally-managed\
    \ YP for well-known values such as\n   TCP-port is desirable, we regard organization-specific\
    \ YPs for, say,\n   locally defined TCP ports as a natural extension, as are combinations\n\
    \   of YPs using search lists to merge the two.\n   In examining Internet Numbers\
    \ [RFC 997] and Assigned Numbers [RFC\n   1010], it is clear that there are several\
    \ mappings which might be of\n   value.  For example:\n   <assigned-network-name>\
    \ <==> <IP-address>\n   <autonomous-system-id>  <==> <number>\n   <protocol-id>\
    \           <==> <number>\n   <port-id>               <==> <number>\n   <ethernet-type>\
    \         <==> <number>\n   <public-data-net>       <==> <IP-address>\n   Following\
    \ the IN-ADDR example, the YP takes the form of a domain tree\n   organized to\
    \ optimize retrieval by search key and distribution via\n   normal DNS rules.\
    \  The name used as a key must include:\n      1. A well known origin.  For example,\
    \ IN-ADDR.ARPA is the\n         current IP-address to host name YP.\n      2.\
    \ A \"from\" data type.  This identifies the input type of the\n         mapping.\
    \  This is necessary because we may be mapping\n         something as anonymous\
    \ as a number to any number of\n         mnemonics, etc.\n      3. A \"to\" data\
    \ type.  Since we assume several symmetrical\n         mnemonic <==> number mappings,\
    \ this is also necessary.\n   This ordering reflects the natural scoping of control,\
    \ and hence the\n   order of the components in a domain name.  Thus domain names\
    \ would be\n   of the form:\n   <from-value>.<to-data-type>.<from-data-type>.<YP-origin>\n\
    \   To make this work, we need to define well-know strings for each of\n   these\
    \ metavariables, as well as encoding rules for converting a\n   <from-value> into\
    \ a domain name.  We might define:\n   <YP-origin>     :=YP\n   <from-data-type>:=TCP-port\
    \ | IN-ADDR | Number |\n                     Assigned-network-number | Name\n\
    \   <to-data-type>  :=<from-data-type>\n   Note that \"YP\" is NOT a valid country\
    \ code under [ISO 3166] (although\n   we may want to worry about the future),\
    \ and the existence of a\n   syntactically valid <to-data-type>.<from-data-type>\
    \ pair does not\n   imply that a meaningful mapping exists, or is even possible.\n\
    \   The encoding rules might be:\n   TCP-port        Six character alphanumeric\n\
    \   IN-ADDR         Reversed 4-octet decimal string\n   Number          decimal\
    \ integer\n   Assigned-network-number\n                   Reversed 4-octet decimal\
    \ string\n   Name            Domain name\n"
- title: 6. SPECIFICS FOR YP MAPPINGS
  contents:
  - '6. SPECIFICS FOR YP MAPPINGS

    '
- title: 6.1. TCP-PORT
  contents:
  - "6.1. TCP-PORT\n   $origin Number.TCP-port.YP.\n   23              PTR     TELNET.TCP-port.Number.YP.\n\
    \   25              PTR     SMTP.TCP-port.Number.YP.\n   $origin TCP-port.Number.YP.\n\
    \   TELNET          PTR     23.Number.TCP-port.YP.\n   SMTP            PTR   \
    \  25.Number.TCP-port.YP.\n   Thus the mapping between 23 and TELNET is represented\
    \ by a pair of\n   PTR RRs, one for each direction of the mapping.\n"
- title: 6.2. Assigned networks
  contents:
  - "6.2. Assigned networks\n   Network numbers are assigned by the NIC and reported\
    \ in \"Internet\n   Numbers\" RFCs.  To create a YP, the NIC would set up two\
    \ domains:\n   Name.Assigned-network-number.YP and Assigned-network-number.YP\n\
    \   The first would contain entries of the form:\n   $origin Name.Assigned-network-number.YP.\n\
    \   0.0.0.4         PTR     SATNET.Assigned-network-number.Name.YP.\n   0.0.0.10\
    \        PTR     ARPANET.Assigned-network-number.Name.YP.\n   The second would\
    \ contain entries of the form:\n   $origin Assigned-network-number.Name.YP.\n\
    \   SATNET.         PTR     0.0.0.4.Name.Assigned-network-number.YP.\n   ARPANET.\
    \        PTR     0.0.0.10.Name.Assigned-network-number.YP.\n   These YPs are not\
    \ in conflict with the network name support described\n   in the first half of\
    \ this RFC since they map between ASSIGNED network\n   names and numbers, not\
    \ those allocated by the organizations\n   themselves.  That is, they document\
    \ the NIC's decisions about\n   allocating network numbers but do not automatically\
    \ track any\n   renaming performed by the new owners.\n   As a practical matter,\
    \ we might want to create both of these domains\n   to enable users on the Internet\
    \ to experiment with centrally\n   maintained support as well as the distributed\
    \ version, or might want\n   to implement only the allocated number to name mapping\
    \ and request\n   organizations to convert their allocated network names to the\
    \ network\n   names described in the distributed model.\n"
- title: 6.3. Operational improvements
  contents:
  - "6.3. Operational improvements\n   We could imagine that all conversion routines\
    \ using these YPs might\n   be instructed to use \"YP.<local-domain>\" followed\
    \ by \"YP.\"  as a\n   search list.  Thus, if the organization ISI.EDU wished\
    \ to define\n   locally meaningful TCP-PORT, it would define the domains:\n  \
    \ <TCP-port.Number.YP.ISI.EDU> and <Number.TCP-port.YP.ISI.EDU>.\n   We could\
    \ add another level of indirection in the YP lookup, defining\n   the <to-data-type>.<from-data-type>.<YP-origin>\
    \ nodes to point to the\n   YP tree, rather than being the YP tree directly. \
    \ This would enable\n   entries of the form:\n   IN-ADDR.Netname.YP.   PTR   \
    \  IN-ADDR.ARPA.\n   to splice in YPs from other origins or existing spaces.\n\
    \   Another possibility would be to shorten the RDATA section of the RRs\n   which\
    \ map back and forth by deleting the origin.  This could be done\n   either by\
    \ allowing the domain name in the RDATA portion to not\n   identify a real domain\
    \ name, or by defining a new RR which used a\n   simple text string rather than\
    \ a domain name.\n   Thus, we might replace\n   $origin Assigned-network-number.Name.YP.\n\
    \   SATNET.         PTR     0.0.0.4.Name.Assigned-network-number.YP.\n   ARPANET.\
    \        PTR     0.0.0.10.Name.Assigned-network-number.YP.\n   with\n   $origin\
    \ Assigned-network-number.Name.YP.\n   SATNET.         PTR     0.0.0.4.\n   ARPANET.\
    \        PTR     0.0.0.10.\n   or\n   $origin Assigned-network-number.Name.YP.\n\
    \   SATNET.         PTT     \"0.0.0.4\"\n   ARPANET.        PTT     \"0.0.0.10\"\
    \n   where PTT is a new type whose RDATA section is a text string.\n"
- title: 7. ACKNOWLEDGMENTS
  contents:
  - "7. ACKNOWLEDGMENTS\n   Drew Perkins, Mark Lottor, and Rob Austein contributed\
    \ several of the\n   ideas in this RFC.  Numerous contributions, criticisms, and\n\
    \   compromises were produced in the IETF Domain working group and the\n   NAMEDROPPERS\
    \ mailing list.\n"
- title: 8. REFERENCES
  contents:
  - "8. REFERENCES\n   [HR]        Braden, B., editor, \"Requirements for Internet\
    \ Hosts\",\n               RFC in preparation.\n   [ISO 3166]  ISO, \"Codes for\
    \ the Representation of Names of\n               Countries\", 1981.\n   [RFC 882]\
    \   Mockapetris, P., \"Domain names - Concepts and\n               Facilities\"\
    , RFC 882, USC/Information Sciences Institute,\n               November 1983.\n\
    \               Superseded by RFC 1034.\n   [RFC 883]   Mockapetris, P.,\"Domain\
    \ names - Implementation and\n               Specification\", RFC 883, USC/Information\
    \ Sciences\n               Institute, November 1983.\n               Superceeded\
    \ by RFC 1035.\n   [RFC 920]   Postel, J. and J. Reynolds, \"Domain Requirements\"\
    , RFC\n               920, October 1984.\n               Explains the naming scheme\
    \ for top level domains.\n   [RFC 952]   Harrenstien, K., M. Stahl, and E. Feinler,\
    \ \"DoD Internet\n               Host Table Specification\", RFC 952, SRI, October\
    \ 1985.\n               Specifies the format of HOSTS.TXT, the host/address table\n\
    \               replaced by the DNS\n   [RFC 973]   Mockapetris, P., \"Domain\
    \ System Changes and\n               Observations\", RFC 973, USC/Information\
    \ Sciences\n               Institute, January 1986.\n               Describes\
    \ changes to RFCs 882 and 883 and reasons for\n               them.\n   [RFC 974]\
    \   Partridge, C., \"Mail routing and the domain system\", RFC\n             \
    \  974, CSNET CIC BBN Labs, January 1986.\n               Describes the transition\
    \ from HOSTS.TXT based mail\n               addressing to the more powerful MX\
    \ system used with the\n               domain system.\n   [RFC 997]   Reynolds,\
    \ J., and J. Postel, \"Internet Numbers\", RFC 997,\n               USC/Information\
    \ Sciences Institute, March 1987\n               Contains network numbers, autonomous\
    \ system numbers, etc.\n   [RFC 1010]  Reynolds, J., and J. Postel, \"Assigned\
    \ Numbers\", RFC\n               1010, USC/Information Sciences Institute, May\
    \ 1987\n               Contains socket numbers and mnemonics for host names,\n\
    \               operating systems, etc.\n   [RFC 1034]  Mockapetris, P., \"Domain\
    \ names - Concepts and\n               Facilities\", RFC 1034, USC/Information\
    \ Sciences\n               Institute, November 1987.\n               Introduction/overview\
    \ of the DNS.\n   [RFC 1035]  Mockapetris, P., \"Domain names - Implementation\
    \ and\n               Specification\", RFC 1035, USC/Information Sciences\n  \
    \             Institute, November 1987.\n               DNS implementation instructions.\n"
- title: 'Author''s Address:'
  contents:
  - "Author's Address:\n   Paul Mockapetris\n   USC/Information Sciences Institute\n\
    \   4676 Admiralty Way\n   Marina del Rey, CA 90292\n   Phone: (213) 822-1511\n\
    \   Email: PVM@ISI.EDU\n"
