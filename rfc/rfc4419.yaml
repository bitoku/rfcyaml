- title: __initial_text__
  contents:
  - "                   Diffie-Hellman Group Exchange for\n            the Secure\
    \ Shell (SSH) Transport Layer Protocol\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes a new key exchange method for the Secure Shell\n\
    \   (SSH) protocol.  It allows the SSH server to propose new groups on\n   which\
    \ to perform the Diffie-Hellman key exchange to the client.  The\n   proposed\
    \ groups need not be fixed and can change with time.\n"
- title: 1.  Overview and Rationale
  contents:
  - "1.  Overview and Rationale\n   SSH [RFC4251] is a very common protocol for secure\
    \ remote login on\n   the Internet.  Currently, SSH performs the initial key exchange\
    \ using\n   the \"diffie-hellman-group1-sha1\" method [RFC4253].  This method\n\
    \   prescribes a fixed group on which all operations are performed.\n   The Diffie-Hellman\
    \ key exchange provides a shared secret that cannot\n   be determined by either\
    \ party alone.  Furthermore, the shared secret\n   is known only to the participant\
    \ parties.  In SSH, the key exchange\n   is signed with the host key to provide\
    \ host authentication.\n   The security of the Diffie-Hellman key exchange is\
    \ based on the\n   difficulty of solving the Discrete Logarithm Problem (DLP).\
    \  Since we\n   expect that the SSH protocol will be in use for many years in\
    \ the\n   future, we fear that extensive precomputation and more efficient\n \
    \  algorithms to compute the discrete logarithm over a fixed group might\n   pose\
    \ a security threat to the SSH protocol.\n   The ability to propose new groups\
    \ will reduce the incentive to use\n   precomputation for more efficient calculation\
    \ of the discrete\n   logarithm.  The server can constantly compute new groups\
    \ in the\n   background.\n"
- title: 2.  Requirements Notation
  contents:
  - "2.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  Diffie-Hellman Group and Key Exchange
  contents:
  - "3.  Diffie-Hellman Group and Key Exchange\n   The server keeps a list of safe\
    \ primes and corresponding generators\n   that it can select from.  A prime p\
    \ is safe if p = 2q + 1 and q is\n   prime.  New primes can be generated in the\
    \ background.\n   The generator g should be chosen such that the order of the\
    \ generated\n   subgroup does not factor into small primes; that is, with p =\
    \ 2q + 1,\n   the order has to be either q or p - 1.  If the order is p - 1, then\n\
    \   the exponents generate all possible public values, evenly distributed\n  \
    \ throughout the range of the modulus p, without cycling through a\n   smaller\
    \ subset.  Such a generator is called a \"primitive root\" (which\n   is trivial\
    \ to find when p is \"safe\").\n   The client requests a modulus from the server\
    \ indicating the\n   preferred size.  In the following description (C is the client,\
    \ S is\n   the server, the modulus p is a large safe prime, and g is a generator\n\
    \   for a subgroup of GF(p), min is the minimal size of p in bits that is\n  \
    \ acceptable to the client, n is the size of the modulus p in bits that\n   the\
    \ client would like to receive from the server, max is the maximal\n   size of\
    \ p in bits that the client can accept, V_S is S's version\n   string, V_C is\
    \ C's version string, K_S is S's public host key, I_C is\n   C's KEXINIT message,\
    \ and I_S is S's KEXINIT message that has been\n   exchanged before this part\
    \ begins):\n   1.  C sends \"min || n || max\" to S, indicating the minimal acceptable\n\
    \       group size, the preferred size of the group, and the maximal\n       group\
    \ size in bits the client will accept.\n   2.  S finds a group that best matches\
    \ the client's request, and sends\n       \"p || g\" to C.\n   3.  C generates\
    \ a random number x, where 1 < x < (p-1)/2.  It\n       computes e = g^x mod p,\
    \ and sends \"e\" to S.\n   4.  S generates a random number y, where 0 < y < (p-1)/2,\
    \ and\n       computes f = g^y mod p.  S receives \"e\".  It computes K = e^y\
    \ mod\n       p, H = hash(V_C || V_S || I_C || I_S || K_S || min || n || max ||\n\
    \       p || g || e || f || K) (these elements are encoded according to\n    \
    \   their types; see below), and signature s on H with its private\n       host\
    \ key.  S sends \"K_S || f || s\" to C.  The signing operation\n       may involve\
    \ a second hashing operation.\n   5.  C verifies that K_S really is the host key\
    \ for S (e.g., using\n       certificates or a local database to obtain the public\
    \ key).  C is\n       also allowed to accept the key without verification; however,\n\
    \       doing so will render the protocol insecure against active attacks\n  \
    \     (but may be desirable for practical reasons in the short term in\n     \
    \  many environments).  C then computes K = f^x mod p, H = hash(V_C\n       ||\
    \ V_S || I_C || I_S || K_S || min || n || max || p || g || e ||\n       f || K),\
    \ and verifies the signature s on H.\n   Servers and clients SHOULD support groups\
    \ with a modulus length of k\n   bits, where 1024 <= k <= 8192.  The recommended\
    \ values for min and\n   max are 1024 and 8192, respectively.\n   Either side\
    \ MUST NOT send or accept e or f values that are not in the\n   range [1, p-1].\
    \  If this condition is violated, the key exchange\n   fails.  To prevent confinement\
    \ attacks, they MUST accept the shared\n   secret K only if 1 < K < p - 1.\n \
    \  The server should return the smallest group it knows that is larger\n   than\
    \ the size the client requested.  If the server does not know a\n   group that\
    \ is larger than the client request, then it SHOULD return\n   the largest group\
    \ it knows.  In all cases, the size of the returned\n   group SHOULD be at least\
    \ 1024 bits.\n   This is implemented with the following messages.  The hash algorithm\n\
    \   for computing the exchange hash is defined by the method name, and is\n  \
    \ called HASH.  The public key algorithm for signing is negotiated with\n   the\
    \ KEXINIT messages.\n   First, the client sends:\n     byte    SSH_MSG_KEY_DH_GEX_REQUEST\n\
    \     uint32  min, minimal size in bits of an acceptable group\n     uint32  n,\
    \ preferred size in bits of the group the server will send\n     uint32  max,\
    \ maximal size in bits of an acceptable group\n   The server responds with\n \
    \    byte    SSH_MSG_KEX_DH_GEX_GROUP\n     mpint   p, safe prime\n     mpint\
    \   g, generator for subgroup in GF(p)\n   The client responds with:\n     byte\
    \    SSH_MSG_KEX_DH_GEX_INIT\n     mpint   e\n   The server responds with:\n \
    \    byte    SSH_MSG_KEX_DH_GEX_REPLY\n     string  server public host key and\
    \ certificates (K_S)\n     mpint   f\n     string  signature of H\n   The hash\
    \ H is computed as the HASH hash of the concatenation of the\n   following:\n\
    \     string  V_C, the client's version string (CR and NL excluded)\n     string\
    \  V_S, the server's version string (CR and NL excluded)\n     string  I_C, the\
    \ payload of the client's SSH_MSG_KEXINIT\n     string  I_S, the payload of the\
    \ server's SSH_MSG_KEXINIT\n     string  K_S, the host key\n     uint32  min,\
    \ minimal size in bits of an acceptable group\n     uint32  n, preferred size\
    \ in bits of the group the server will send\n     uint32  max, maximal size in\
    \ bits of an acceptable group\n     mpint   p, safe prime\n     mpint   g, generator\
    \ for subgroup\n     mpint   e, exchange value sent by the client\n     mpint\
    \   f, exchange value sent by the server\n     mpint   K, the shared secret\n\
    \   This value is called the exchange hash, and it is used to\n   authenticate\
    \ the key exchange as per [RFC4253].\n"
- title: 4.  Key Exchange Methods
  contents:
  - "4.  Key Exchange Methods\n   This document defines two new key exchange methods:\n\
    \   \"diffie-hellman-group-exchange-sha1\" and\n   \"diffie-hellman-group-exchange-sha256\"\
    .\n"
- title: 4.1.  diffie-hellman-group-exchange-sha1
  contents:
  - "4.1.  diffie-hellman-group-exchange-sha1\n   The \"diffie-hellman-group-exchange-sha1\"\
    \ method specifies\n   Diffie-Hellman Group and Key Exchange with SHA-1 [FIPS-180-2]\
    \ as\n   HASH.\n"
- title: 4.2.  diffie-hellman-group-exchange-sha256
  contents:
  - "4.2.  diffie-hellman-group-exchange-sha256\n   The \"diffie-hellman-group-exchange-sha256\"\
    \ method specifies\n   Diffie-Hellman Group and Key Exchange with SHA-256 [FIPS-180-2]\
    \ as\n   HASH.\n   Note that the hash used in key exchange (in this case, SHA-256)\
    \ must\n   also be used in the key derivation pseudo-random function (PRF), as\n\
    \   per the requirement in the \"Output from Key Exchange\" section in\n   [RFC4253].\n"
- title: 5.  Summary of Message Numbers
  contents:
  - "5.  Summary of Message Numbers\n   The following message numbers have been defined\
    \ in this document.\n   They are in a name space private to this document and\
    \ not assigned by\n   IANA.\n     #define SSH_MSG_KEX_DH_GEX_REQUEST_OLD  30\n\
    \     #define SSH_MSG_KEX_DH_GEX_REQUEST      34\n     #define SSH_MSG_KEX_DH_GEX_GROUP\
    \        31\n     #define SSH_MSG_KEX_DH_GEX_INIT         32\n     #define SSH_MSG_KEX_DH_GEX_REPLY\
    \        33\n   SSH_MSG_KEX_DH_GEX_REQUEST_OLD is used for backward compatibility.\n\
    \   Instead of sending \"min || n || max\", the client only sends \"n\".  In\n\
    \   addition, the hash is calculated using only \"n\" instead of \"min || n\n\
    \   || max\".\n   The numbers 30-49 are key exchange specific and may be redefined\
    \ by\n   other kex methods.\n"
- title: 6.  Implementation Notes
  contents:
  - '6.  Implementation Notes

    '
- title: 6.1.  Choice of Generator
  contents:
  - "6.1.  Choice of Generator\n   One useful technique is to select the generator,\
    \ and then limit the\n   modulus selection sieve to primes with that generator:\n\
    \      2   when p (mod 24) = 11.\n      5   when p (mod 10) = 3 or 7.\n   It is\
    \ recommended to use 2 as generator, because it improves\n   efficiency in multiplication\
    \ performance.  It is usable even when it\n   is not a primitive root, as it still\
    \ covers half of the space of\n   possible residues.\n"
- title: 6.2.  Private Exponents
  contents:
  - "6.2.  Private Exponents\n   To increase the speed of the key exchange, both client\
    \ and server may\n   reduce the size of their private exponents.  It should be\
    \ at least\n   twice as long as the key material that is generated from the shared\n\
    \   secret.  For more details, see the paper by van Oorschot and Wiener\n   [VAN-OORSCHOT].\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This protocol aims to be simple and uses only\
    \ well-understood\n   primitives.  This encourages acceptance by the community\
    \ and allows\n   for ease of implementation, which hopefully leads to a more secure\n\
    \   system.\n   The use of multiple moduli inhibits a determined attacker from\n\
    \   precalculating moduli exchange values, and discourages dedication of\n   resources\
    \ for analysis of any particular modulus.\n   It is important to employ only safe\
    \ primes as moduli, as they allow\n   us to find a generator g so that the order\
    \ of the generated subgroup\n   does not factor into small primes, that is, with\
    \ p = 2q + 1, the\n   order has to be either q or p - 1.  If the order is p -\
    \ 1, then the\n   exponents generate all possible public values, evenly distributed\n\
    \   throughout the range of the modulus p, without cycling through a\n   smaller\
    \ subset.  Van Oorshot and Wiener note that using short private\n   exponents\
    \ with a random prime modulus p makes the computation of the\n   discrete logarithm\
    \ easy [VAN-OORSCHOT].  However, they also state\n   that this problem does not\
    \ apply to safe primes.\n   The least significant bit of the private exponent\
    \ can be recovered\n   when the modulus is a safe prime [MENEZES].  However, this\
    \ is not a\n   problem if the size of the private exponent is big enough.  Related\n\
    \   to this, Waldvogel and Massey note: When private exponents are chosen\n  \
    \ independently and uniformly at random from {0,...,p-2}, the key\n   entropy\
    \ is less than 2 bits away from the maximum, lg(p-1)\n   [WALDVOGEL].\n   The\
    \ security considerations in [RFC4251] also apply to this key\n   exchange method.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   The document is derived in part from \"SSH Transport\
    \ Layer Protocol\"\n   [RFC4253] by T. Ylonen, T. Kivinen, M. Saarinen, T.  Rinne,\
    \ and S.\n   Lehtinen.\n   Markku-Juhani Saarinen pointed out that the least significant\
    \ bit of\n   the private exponent can be recovered efficiently when using safe\n\
    \   primes and a subgroup with an order divisible by two.\n   Bodo Moeller suggested\
    \ that the server send only one group, reducing\n   the complexity of the implementation\
    \ and the amount of data that\n   needs to be exchanged between client and server.\n"
- title: 'Appendix A:  Generation of Safe Primes'
  contents:
  - "Appendix A:  Generation of Safe Primes\n   The \"Handbook of Applied Cryptography\"\
    \ [MENEZES] lists the following\n   algorithm to generate a k-bit safe prime p.\
    \  It has been modified so\n   that 2 is a generator for the multiplicative group\
    \ mod p.\n   1.  Do the following:\n       1.  Select a random (k-1)-bit prime\
    \ q, so that q mod 12 = 5.\n       2.  Compute p := 2q + 1, and test whether p\
    \ is prime (using,\n           e.g., trial division and the Rabin-Miller test).\n\
    \   2.  Repeat until p is prime.\n   If an implementation uses the OpenSSL libraries,\
    \ a group consisting\n   of a 1024-bit safe prime and 2 as generator can be created\
    \ as\n   follows:\n       DH *d = NULL;\n       d = DH_generate_parameters(1024,\
    \ DH_GENERATOR_2, NULL, NULL);\n       BN_print_fp(stdout, d->p);\n   The order\
    \ of the subgroup generated by 2 is q = p - 1.\n"
- title: References
  contents:
  - 'References

    '
- title: Normative References
  contents:
  - "Normative References\n   [FIPS-180-2]   National Institute of Standards and Technology\
    \ (NIST),\n                  \"Secure Hash Standard (SHS)\", FIPS PUB 180-2,\n\
    \                  August 2002.\n   [RFC4251]      Ylonen, T. and C. Lonvick,\
    \ \"The Secure Shell (SSH)\n                  Protocol Architecture\", RFC 4251,\
    \ January 2006.\n   [RFC4253]      Lonvick, C., \"The Secure Shell (SSH) Transport\
    \ Layer\n                  Protocol\", RFC 4253, January 2006.\n   [RFC2119] \
    \     Bradner, S., \"Key words for use in RFCs to Indicate\n                 \
    \ Requirement Levels\", BCP 14, RFC 2119, March 1997.\n"
- title: Informative References
  contents:
  - "Informative References\n   [MENEZES]      Menezes, A., van Oorschot, P., and\
    \ S. Vanstone,\n                  \"Handbook of Applied Cryptography\", CRC Press,\
    \ p. 537,\n                  1996.\n   [VAN-OORSCHOT] van Oorschot, P. and M.\
    \ Wiener, \"On Diffie-Hellman key\n                  agreement with short exponents\"\
    , Advances in\n                  Cryptology -EUROCRYPT'96, LNCS 1070,\n      \
    \            Springer-Verlag, pp. 332-343, 1996.\n   [WALDVOGEL]    Waldvogel,\
    \ C. and J. Massey, \"The probability\n                  distribution of the Diffie-Hellman\
    \ key\", Proceedings\n                  of AUSCRYPT 92, LNCS 718, Springer-Verlag,\
    \ pp.\n                  492-504, 1993.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Markus Friedl\n   EMail: markus@openbsd.org\n   Niels\
    \ Provos\n   EMail: provos@citi.umich.edu\n   William A. Simpson\n   EMail: wsimpson@greendragon.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
