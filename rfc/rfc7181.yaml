- title: __initial_text__
  contents:
  - '          The Optimized Link State Routing Protocol Version 2

    '
- title: Abstract
  contents:
  - "Abstract\n   This specification describes version 2 of the Optimized Link State\n\
    \   Routing Protocol (OLSRv2) for Mobile Ad Hoc Networks (MANETs).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7181.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2014 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................5\n\
    \   2. Terminology .....................................................6\n  \
    \ 3. Applicability Statement .........................................9\n   4.\
    \ Protocol Overview and Functioning ..............................10\n      4.1.\
    \ Overview ..................................................10\n      4.2. Routers\
    \ and Interfaces ....................................12\n      4.3. Information\
    \ Base Overview .................................13\n           4.3.1. Local Information\
    \ Base .............................13\n           4.3.2. Interface Information\
    \ Base .........................14\n           4.3.3. Neighbor Information Base\
    \ ..........................14\n           4.3.4. Topology Information Base ..........................14\n\
    \           4.3.5. Received Message Information Base ..................16\n  \
    \    4.4. Signaling Overview ........................................16\n    \
    \  4.5. Link Metrics ..............................................17\n      4.6.\
    \ Flooding MPRs and Routing MPR .............................18\n      4.7. Routing\
    \ Set Use ...........................................19\n   5. Protocol Parameters\
    \ and Constants ..............................19\n      5.1. Protocol and Port\
    \ Numbers .................................19\n      5.2. Multicast Address .........................................20\n\
    \      5.3. Interface Parameters ......................................20\n  \
    \         5.3.1. Received Message Validity Time .....................20\n    \
    \  5.4. Router Parameters .........................................20\n      \
    \     5.4.1. Local History Times ................................20\n        \
    \   5.4.2. Link Metric Parameters .............................21\n          \
    \ 5.4.3. Message Intervals ..................................21\n           5.4.4.\
    \ Advertised Information Validity Times ..............22\n           5.4.5. Processing\
    \ and Forwarding Validity Times ...........22\n           5.4.6. Jitter .............................................23\n\
    \           5.4.7. Hop Limit ..........................................23\n  \
    \         5.4.8. Willingness ........................................24\n    \
    \  5.5. Parameter Change Constraints ..............................25\n      5.6.\
    \ Constants .................................................27\n           5.6.1.\
    \ Link Metric Constants ..............................27\n           5.6.2. Willingness\
    \ Constants ..............................28\n           5.6.3. Time Constant\
    \ ......................................28\n   6. Link Metric Values .............................................28\n\
    \      6.1. Link Metric Representation ................................28\n  \
    \    6.2. Link Metric Compressed Form ...............................29\n   7.\
    \ Local Information Base .........................................29\n      7.1.\
    \ Originator Set ............................................30\n      7.2. Local\
    \ Attached Network Set ................................30\n   8. Interface Information\
    \ Base .....................................31\n      8.1. Link Set ..................................................31\n\
    \      8.2. 2-Hop Set .................................................32\n  \
    \ 9. Neighbor Information Base ......................................32\n   10.\
    \ Topology Information Base .....................................34\n      10.1.\
    \ Advertising Remote Router Set ............................34\n      10.2. Router\
    \ Topology Set ......................................35\n      10.3. Routable\
    \ Address Topology Set ............................35\n      10.4. Attached Network\
    \ Set .....................................36\n      10.5. Routing Set ..............................................37\n\
    \   11. Received Message Information Base .............................37\n  \
    \    11.1. Received Set .............................................38\n    \
    \  11.2. Processed Set ............................................38\n      11.3.\
    \ Forwarded Set ............................................39\n   12. Information\
    \ Base Properties ...................................39\n      12.1. Corresponding\
    \ Protocol Tuples ............................39\n      12.2. Address Ownership\
    \ ........................................40\n   13. Packets and Messages ..........................................41\n\
    \      13.1. Messages .................................................41\n  \
    \    13.2. Packets ..................................................41\n    \
    \  13.3. TLVs .....................................................42\n      \
    \     13.3.1. Message TLVs ......................................42\n        \
    \   13.3.2. Address Block TLVs ................................42\n   14. Message\
    \ Processing and Forwarding .............................45\n      14.1. Actions\
    \ When Receiving a Message .........................45\n      14.2. Message Considered\
    \ for Processing ........................46\n      14.3. Message Considered for\
    \ Forwarding ........................47\n   15. HELLO Messages ................................................49\n\
    \      15.1. HELLO Message Generation .................................49\n  \
    \    15.2. HELLO Message Transmission ...............................51\n    \
    \  15.3. HELLO Message Processing .................................51\n      \
    \     15.3.1. HELLO Message Discarding ..........................51\n        \
    \   15.3.2. HELLO Message Usage ...............................52\n   16. TC Messages\
    \ ...................................................56\n      16.1. TC Message\
    \ Generation ....................................56\n      16.2. TC Message Transmission\
    \ ..................................58\n      16.3. TC Message Processing ....................................59\n\
    \           16.3.1. TC Message Discarding .............................59\n  \
    \         16.3.2. TC Message Processing Definitions .................61\n    \
    \       16.3.3. Initial TC Message Processing .....................61\n      \
    \     16.3.4. Completing TC Message Processing ..................65\n   17. Information\
    \ Base Changes ......................................66\n      17.1. Originator\
    \ Address Changes ...............................66\n      17.2. Link State Changes\
    \ .......................................66\n      17.3. Neighbor State Changes\
    \ ...................................67\n      17.4. Advertised Neighbor Changes\
    \ ..............................67\n      17.5. Advertising Remote Router Tuple\
    \ Expires ..................68\n      17.6. Neighborhood Changes and MPR Updates\
    \ .....................68\n      17.7. Routing Set Updates ......................................70\n\
    \   18. Selecting MPRs ................................................71\n  \
    \    18.1. Overview .................................................72\n    \
    \  18.2. Neighbor Graph ...........................................72\n      18.3.\
    \ MPR Properties ...........................................73\n      18.4. Flooding\
    \ MPRs ............................................74\n      18.5. Routing MPRs\
    \ .............................................76\n      18.6. Calculating MPRs\
    \ .........................................77\n   19. Routing Set Calculation\
    \ .......................................78\n      19.1. Network Topology Graph\
    \ ...................................78\n      19.2. Populating the Routing Set\
    \ ...............................80\n   20. Proposed Values for Parameters ................................81\n\
    \      20.1. Local History Time Parameters ............................82\n  \
    \    20.2. Message Interval Parameters ..............................82\n    \
    \  20.3. Advertised Information Validity Time Parameters ..........82\n      20.4.\
    \ Received Message Validity Time Parameters ................82\n      20.5. Jitter\
    \ Time Parameters ...................................82\n      20.6. Hop Limit\
    \ Parameter ......................................82\n      20.7. Willingness\
    \ Parameters ...................................82\n   21. Sequence Numbers ..............................................83\n\
    \   22. Extensions ....................................................83\n  \
    \ 23. Security Considerations .......................................84\n    \
    \  23.1. Security Architecture ....................................84\n      23.2.\
    \ Integrity ................................................85\n      23.3. Confidentiality\
    \ ..........................................86\n      23.4. Interaction with External\
    \ Routing Domains ................87\n      23.5. Mandatory Security Mechanisms\
    \ ............................87\n      23.6. Key Management ...........................................88\n\
    \   24. IANA Considerations ...........................................90\n  \
    \    24.1. Expert Review: Evaluation Guidelines .....................91\n    \
    \  24.2. Message Types ............................................91\n      24.3.\
    \ Message-Type-Specific TLV Type Registries ................91\n      24.4. Message\
    \ TLV Types ........................................92\n      24.5. Address Block\
    \ TLV Types ..................................93\n      24.6. NBR_ADDR_TYPE and\
    \ MPR Values .............................96\n   25. Contributors ..................................................96\n\
    \   26. Acknowledgments ...............................................97\n  \
    \ 27. References ....................................................97\n    \
    \  27.1. Normative References .....................................97\n      27.2.\
    \ Informative References ...................................98\n   Appendix A.\
    \  Constraints .........................................100\n   Appendix B.  Example\
    \ Algorithm for Calculating MPRs ..............104\n     B.1.  Additional Notation\
    \ ......................................104\n     B.2.  MPR Selection Algorithm\
    \ ................................. 105\n   Appendix C.  Example Algorithm for\
    \ Calculating the Routing Set ...105\n     C.1.  Local Interfaces and Neighbors\
    \ ...........................106\n     C.2.  Add Neighbor Routers .....................................107\n\
    \     C.3.  Add Remote Routers .......................................107\n  \
    \   C.4.  Add Neighbor Addresses ...................................108\n    \
    \ C.5.  Add Remote Routable Addresses ............................109\n     C.6.\
    \  Add Attached Networks ....................................110\n     C.7.  Add\
    \ 2-Hop Neighbors ......................................110\n   Appendix D.  TC\
    \ Message Example ..................................111\n   Appendix E.  Flow\
    \ and Congestion Control .........................114\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Optimized Link State Routing Protocol version 2 (OLSRv2)\
    \ is the\n   successor to OLSR (version 1) as published in [RFC3626].  Compared\
    \ to\n   [RFC3626], OLSRv2 retains the same basic mechanisms and algorithms,\n\
    \   enhanced by the ability to use a link metric other than hop count in\n   the\
    \ selection of shortest routes.  OLSRv2 also uses a more flexible\n   and efficient\
    \ signaling framework and includes some simplification of\n   the messages being\
    \ exchanged.\n   OLSRv2 is developed for Mobile Ad Hoc Networks (MANETs).  It\
    \ operates\n   as a table-driven, proactive protocol, i.e., it exchanges topology\n\
    \   information with other routers in the network regularly.  OLSRv2 is\n   an\
    \ optimization of the classic link state routing protocol.  Its key\n   concept\
    \ is that of multipoint relays (MPRs).  Each router selects two\n   sets of MPRs,\
    \ each being a set of its neighbor routers that \"cover\"\n   all of its symmetrically\
    \ connected 2-hop neighbor routers.  These two\n   sets are \"flooding MPRs\"\
    \ and \"routing MPRs\", which are used to\n   achieve flooding reduction and topology\
    \ reduction, respectively.\n   Flooding reduction is achieved by control traffic\
    \ being flooded\n   through the network using hop-by-hop forwarding, but with\
    \ a router\n   only needing to forward control traffic that is first received\n\
    \   directly from one of the routers that have selected it as a flooding\n   MPR\
    \ (its \"flooding MPR selectors\").  This mechanism, denoted \"MPR\n   flooding\"\
    , provides an efficient mechanism for information\n   distribution within the\
    \ MANET by reducing the number of transmissions\n   required [MPR].\n   Topology\
    \ reduction is achieved by assigning a special responsibility\n   to routers selected\
    \ as routing MPRs when declaring link state\n   information.  A sufficient requirement\
    \ for OLSRv2 to provide shortest\n   routes to all destinations is that routers\
    \ declare link state\n   information for their routing MPR selectors, if any.\
    \  Routers that\n   are not selected as routing MPRs need not send any link state\n\
    \   information.  Based on this reduced link state information, routing\n   MPRs\
    \ are used as intermediate routers in multi-hop routes.\n   Thus, the use of MPRs\
    \ allows reduction of the number and the size of\n   link state messages and reduction\
    \ in the amount of link state\n   information maintained in each router.  When\
    \ possible (in particular\n   if using a hop count metric), the same routers may\
    \ be picked as both\n   flooding MPRs and routing MPRs.\n   A router selects both\
    \ routing and flooding MPRs from among its one-\n   hop neighbors connected by\
    \ \"symmetric\", i.e., bidirectional, links.\n   Therefore, selecting routes through\
    \ routing MPRs avoids the problems\n   associated with data packet transfer over\
    \ unidirectional links (e.g.,\n   the problem of not getting link-layer acknowledgments\
    \ at each hop,\n   for link layers employing this technique).\n   OLSRv2 uses\
    \ and extends the MANET Neighborhood Discovery Protocol\n   (NHDP) defined in\
    \ [RFC6130] and also uses the Generalized MANET\n   Packet/Message Format [RFC5444],\
    \ the TLVs specified in [RFC5497] and,\n   optionally, message jitter as specified\
    \ in [RFC5148].  These four\n   other protocols and specifications were all originally\
    \ created as\n   part of OLSRv2 but have been specified separately for wider use.\n\
    \   OLSRv2 makes no assumptions about the underlying link layer.  OLSRv2,\n  \
    \ through its use of [RFC6130], may use link-layer information and\n   notifications\
    \ when available and applicable.  In addition, OLSRv2\n   uses link metrics that\
    \ may be derived from link layer or any other\n   information.  OLSRv2 does not\
    \ specify the physical meaning of link\n   metrics but specifies a means by which\
    \ new types of link metrics may\n   be specified in the future but used by OLSRv2\
    \ without modification.\n   OLSRv2, like OLSR [RFC3626], inherits its concept\
    \ of forwarding and\n   relaying from the High Performance Radio Local Area Network\n\
    \   (HIPERLAN) (a MAC-layer protocol), which is standardized by ETSI\n   [HIPERLAN]\
    \ [HIPERLAN2].  This document does not obsolete [RFC3626],\n   which is left in\
    \ place for further experimentation.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   [RFC2119].\n   All terms introduced in [RFC5444], including \"packet\"\
    , \"Packet\n   Header\", \"message\", \"Message Header\", \"Message Body\", \"\
    Message Type\",\n   \"message sequence number\", \"hop limit\", \"hop count\"\
    , \"Address Block\",\n   \"TLV Block\", \"TLV\", \"Message TLV\", \"Address Block\
    \ TLV\", \"type\" (of\n   TLV), \"type extension\" (of TLV), \"value\" (of TLV),\
    \ \"address\",\n   \"address prefix\", and \"address object\" are to be interpreted\
    \ as\n   described there.\n   All terms introduced in [RFC6130], including \"\
    interface\", \"MANET\n   interface\", \"network address\", \"link\", \"symmetric\
    \ link\", \"symmetric\n   1-hop neighbor\", \"symmetric 2-hop neighbor\", \"symmetric\
    \ 1-hop\n   neighborhood\" \"constant\", \"interface parameter\", \"router parameter\"\
    ,\n   \"Information Base\", and \"HELLO message\" are to be interpreted as\n \
    \  described there.\n   Additionally, this specification uses the following terminology:\n\
    \   Router:\n      A MANET router that implements this protocol.\n   OLSRv2 interface:\n\
    \      A MANET interface running this protocol.  A router running this\n     \
    \ protocol MUST have at least one OLSRv2 interface.\n   Routable address:\n  \
    \    A network address that may be used as the destination of a data\n      packet.\
    \  A router that implements this protocol will need to\n      distinguish a routable\
    \ address from a non-routable address by\n      direct inspection of the network\
    \ address, based on global-scope\n      address allocations by IANA and/or administrative\
    \ configuration\n      (consistently across the MANET).  Broadcast and multicast\n\
    \      addresses, and addresses that are limited in scope to less than\n     \
    \ the entire MANET, MUST NOT be considered as routable addresses.\n      Anycast\
    \ addresses may be considered as routable addresses.\n   Originator address:\n\
    \      An address that is unique (within the MANET) to a router.  A\n      router\
    \ MUST select an originator address; it MAY choose one of its\n      interface\
    \ addresses as its originator address; and it MAY select\n      either a routable\
    \ or non-routable address.  A broadcast,\n      multicast, or anycast address\
    \ MUST NOT be chosen as an originator\n      address.  If the router selects a\
    \ routable address, then it MUST\n      be one that the router will accept as\
    \ destination.  An originator\n      address MUST NOT have a prefix length, except\
    \ when included in an\n      Address Block where it MAY be associated with a prefix\
    \ of maximum\n      prefix length (e.g., if the originator address is an IPv6\
    \ address,\n      it MUST have either no prefix length or have a prefix length\
    \ of\n      128).\n   Message originator address:\n      The originator address\
    \ of the router that created a message, as\n      deduced from that message by\
    \ its recipient.  For all messages used\n      in this specification, including\
    \ HELLO messages defined in\n      [RFC6130], the recipient MUST be able to deduce\
    \ an originator\n      address.  The message originator address will usually be\
    \ included\n      in the message as its <msg-orig-addr> element as defined in\n\
    \      [RFC5444].  However, an exceptional case, which does not add a\n      <msg-orig-addr>\
    \ element to a HELLO message, may be used by a\n      router that only has a single\
    \ address.\n   Willingness:\n      A numerical value between WILL_NEVER and WILL_ALWAYS\
    \ (both\n      inclusive) that represents the router's willingness to be selected\n\
    \      as an MPR.  A router has separate willingness values to be a\n      flooding\
    \ MPR and a routing MPR.\n   Willing symmetric 1-hop neighbor:\n      A symmetric\
    \ 1-hop neighbor that has willingness not equal to\n      WILL_NEVER.\n   Multipoint\
    \ relay (MPR):\n      A router, X, is an MPR for a router, Y, if router Y has\
    \ indicated\n      its selection of router X as an MPR in a recent HELLO message.\n\
    \      Router X may be a flooding MPR for Y if it is indicated to\n      participate\
    \ in the flooding process of messages received from\n      router Y, or it may\
    \ be a routing MPR for Y if it is indicated to\n      declare link state information\
    \ for the link from X to Y.  It may\n      also be both at the same time.\n  \
    \ MPR selector:\n      A router, Y, is a flooding/routing MPR selector of router\
    \ X if\n      router Y has selected router X as a flooding/routing MPR.\n   MPR\
    \ flooding:\n      The optimized MANET-wide information distribution mechanism,\n\
    \      employed by this protocol, in which a message is relayed by only a\n  \
    \    reduced subset of the routers in the network.  MPR flooding is the\n    \
    \  mechanism by which flooding reduction is achieved.\n   EXPIRED:\n      Indicates\
    \ that a timer is set to a value clearly preceding the\n      current time (e.g.,\
    \ current time - 1).\n   This specification employs the same notational conventions\
    \ as\n   [RFC5444] and [RFC6130].\n"
- title: 3.  Applicability Statement
  contents:
  - "3.  Applicability Statement\n   This document specifies OLSRv2, a proactive routing\
    \ protocol intended\n   for use in Mobile Ad Hoc Networks (MANETs) [RFC2501].\
    \  The protocol's\n   applicability is determined by its characteristics, which\
    \ are that\n   this protocol:\n   o  Is designed to work in networks with a dynamic\
    \ topology and in\n      which messages may be lost, such as due to collisions\
    \ over\n      wireless media.\n   o  Supports routers that each have one or more\
    \ participating OLSRv2\n      interfaces, which will consist of some or all of\
    \ its MANET\n      interfaces using [RFC6130].  The set of a router's OLSRv2\n\
    \      interfaces, and the sets of its other MANET and non-MANET\n      interfaces,\
    \ may change over time.  Each interface may have one or\n      more network addresses\
    \ (which may have prefix lengths), and these\n      may also be dynamically changing.\n\
    \   o  Enables hop-by-hop routing, i.e., each router can use its local\n     \
    \ information provided by this protocol to route packets.\n   o  Continuously\
    \ maintains routes to all destinations in the network,\n      i.e., routes are\
    \ instantly available and data traffic is subject\n      to no delays due to route\
    \ discovery.  Consequently, no data\n      traffic buffering is required.\n  \
    \ o  Supports routers that have non-OLSRv2 interfaces that may be local\n    \
    \  to a router or that can serve as gateways towards other networks.\n   o  Enables\
    \ the use of bidirectional additive link metrics to use\n      shortest distance\
    \ routes (i.e., routes with smallest total of link\n      metrics).  Incoming\
    \ link metric values are to be determined by a\n      process outside this specification.\n\
    \   o  Is optimized for large and dense networks; the larger and more\n      dense\
    \ a network, the more optimization can be achieved by using\n      MPRs, compared\
    \ to the classic link state algorithm [MPR].\n   o  Uses [RFC5444] as described\
    \ in its \"Intended Usage\" appendix and\n      by [RFC5498].\n   o  Allows \"\
    external\" and \"internal\" extensibility (adding new Message\n      Types and\
    \ adding information to existing messages) as enabled by\n      [RFC5444].\n \
    \  o  Is designed to work in a completely distributed manner and does\n      not\
    \ depend on any central entity.\n"
- title: 4.  Protocol Overview and Functioning
  contents:
  - "4.  Protocol Overview and Functioning\n   The objectives of this protocol are\
    \ for each router to:\n   o  Identify all destinations in the network.\n   o \
    \ Identify a sufficient subset of links in the network, in order\n      that shortest\
    \ routes can be calculated to all available\n      destinations.\n   o  Provide\
    \ a Routing Set containing these shortest routes from this\n      router to all\
    \ destinations (routable addresses and local links).\n"
- title: 4.1.  Overview
  contents:
  - "4.1.  Overview\n   These objectives are achieved, for each router, by:\n   o\
    \  Using NHDP [RFC6130] to identify symmetric 1-hop neighbors and\n      symmetric\
    \ 2-hop neighbors.\n   o  Reporting its participation in OLSRv2, and its willingness\
    \ to be a\n      flooding MPR and to be a routing MPR, by extending the HELLO\n\
    \      messages defined in [RFC6130] by the addition of an MPR_WILLING\n     \
    \ Message TLV.  The router's \"flooding willingness\" indicates how\n      willing\
    \ it is to participate in MPR flooding.  The router's\n      \"routing willingness\"\
    \ indicates how willing it is to be an\n      intermediate router for routing.\
    \  Note that a router is still able\n      to be a routing source or destination,\
    \ even if unwilling to\n      perform either function.\n   o  Extending the HELLO\
    \ messages defined in [RFC6130] to allow the\n      addition of directional link\
    \ metrics to advertised links with\n      other routers participating in OLSRv2\
    \ and to indicate which link\n      metric type is being used by those routers.\
    \  Both incoming and\n      outgoing link metrics may be reported, the former\
    \ determined by\n      the advertising router.\n   o  Selecting flooding MPRs\
    \ and routing MPRs from among its willing\n      symmetric 1-hop neighbors such\
    \ that, for each set of MPRs, all\n      symmetric 2-hop neighbors are reachable\
    \ either directly or via at\n      least one selected MPR, using a path of appropriate\
    \ minimum total\n      metric for at least routing MPR selection.  An analysis\
    \ and\n      examples of MPR selection algorithms are given in [MPR]; a\n    \
    \  suggested algorithm, appropriately adapted for each set of MPRs,\n      is\
    \ included in Appendix B of this specification.  Note that it is\n      not necessary\
    \ for routers to use the same algorithm in order to\n      interoperate in the\
    \ same MANET, but each such algorithm must have\n      the appropriate properties,\
    \ described in Section 18.\n   o  Signaling its flooding MPR and routing MPR selections,\
    \ by\n      extending the HELLO messages defined in [RFC6130] to report this\n\
    \      information by the addition of MPR Address Block TLV(s) associated\n  \
    \    with the appropriate network addresses.\n   o  Extracting its flooding MPR\
    \ selectors and routing MPR selectors\n      from received HELLO messages, using\
    \ the included MPR Address Block\n      TLV(s).\n   o  Defining a TC (Topology\
    \ Control) Message Type using the message\n      format specified in [RFC5444].\
    \  TC messages are used to\n      periodically signal links between routing MPR\
    \ selectors and itself\n      throughout the MANET.  This signaling includes suitable\n\
    \      directional neighbor metrics (the best link metric in that\n      direction\
    \ between those routers).\n   o  Allowing its TC messages, as well as HELLO messages,\
    \ to be\n      included in packets specified in [RFC5444], using the \"manet\"\
    \ IP\n      protocol or UDP port as specified in [RFC5498].\n   o  Diffusing TC\
    \ messages by using a flooding reduction mechanism,\n      denoted \"MPR flooding\"\
    ; only the flooding MPRs of a router will\n      retransmit messages received\
    \ from (i.e., originated or last\n      relayed by) that router.\n   Note that\
    \ the indicated extensions to [RFC6130] are of forms\n   permitted by that specification.\n\
    \   This specification defines:\n   o  The requirement to use [RFC6130], its parameters,\
    \ constants, HELLO\n      messages, and Information Bases, each as extended in\
    \ this\n      specification.\n   o  Two new Information Bases: the Topology Information\
    \ Base and the\n      Received Message Information Base.\n   o  TC messages, which\
    \ are used for MANET wide signaling (using MPR\n      flooding) of selected topology\
    \ (link state) information.\n   o  A requirement for each router to have an originator\
    \ address to be\n      included in, or deducible from, HELLO messages and TC messages.\n\
    \   o  The specification of new Message TLVs and Address Block TLVs that\n   \
    \   are used in HELLO messages and TC messages, including for\n      reporting\
    \ neighbor status, MPR selection, external gateways, link\n      metrics, willingness\
    \ to be an MPR, and content sequence numbers.\n      Note that the generation\
    \ of (incoming) link metric values is to be\n      undertaken by a process outside\
    \ this specification; this\n      specification concerns only the distribution\
    \ and use of those\n      metrics.\n   o  The generation of TC messages from the\
    \ appropriate information in\n      the Information Bases.\n   o  The updating\
    \ of the Topology Information Base according to\n      received TC messages.\n\
    \   o  The MPR flooding mechanism, including the inclusion of message\n      originator\
    \ address and sequence number to manage duplicate\n      messages, using information\
    \ recorded in the Received Message\n      Information Base.\n   o  The response\
    \ to other events, such as the expiration of\n      information in the Information\
    \ Bases.\n   This protocol inherits the stability of a link state algorithm and\n\
    \   has the advantage of having routes immediately available when needed,\n  \
    \ due to its proactive nature.\n   This protocol only interacts with IP through\
    \ routing table management\n   and the use of the sending IP address for IP datagrams\
    \ containing\n   messages used by this specification.\n"
- title: 4.2.  Routers and Interfaces
  contents:
  - "4.2.  Routers and Interfaces\n   In order for a router to participate in a MANET\
    \ using this protocol,\n   it must have at least one, and possibly more, OLSRv2\
    \ interfaces.\n   Each OLSRv2 interface:\n   o  Is a MANET interface, as specified\
    \ in [RFC6130].  In particular,\n      it must be configured with one or more\
    \ network addresses; these\n      addresses must each be specific to this router\
    \ and must include\n      any address that will be used as the sending address\
    \ of any IP\n      packet sent on this OLSRv2 interface.\n   o  Has a number of\
    \ interface parameters, adding to those specified in\n      [RFC6130].\n   o \
    \ Has an Interface Information Base, extending that specified in\n      [RFC6130].\n\
    \   o  Generates and processes HELLO messages according to [RFC6130],\n      extended\
    \ as specified in Section 15.\n   In addition to a set of OLSRv2 interfaces as\
    \ described above, each\n   router:\n   o  May have one or more non-OLSRv2 interfaces\
    \ (which may include\n      MANET interfaces and/or non-MANET interfaces) and/or\
    \ local\n      attached networks for which this router can accept IP packets.\n\
    \      All routable addresses for which the router is to accept IP\n      packets\
    \ must be used as an (OLSRv2 or non-OLSRv2) interface\n      network address or\
    \ as an address of a local attached network of\n      the router.\n   o  Has a\
    \ number of router parameters, adding to those specified in\n      [RFC6130].\n\
    \   o  Has a Local Information Base, extending that specified in\n      [RFC6130],\
    \ including selection of an originator address and\n      recording any locally\
    \ attached networks.\n   o  Has a Neighbor Information Base, extending that specified\
    \ in\n      [RFC6130] to record MPR selection and advertisement information.\n\
    \   o  Has a Topology Information Base, recording information received in\n  \
    \    TC messages.\n   o  Has a Received Message Information Base, recording information\n\
    \      about received messages to ensure that each TC message is only\n      processed\
    \ once, and forwarded at most once on each OLSRv2\n      interface, by a router.\n\
    \   o  Generates, receives, and processes TC messages.\n"
- title: 4.3.  Information Base Overview
  contents:
  - "4.3.  Information Base Overview\n   Each router maintains the Information Bases\
    \ described in the\n   following sections.  These are used for describing the\
    \ protocol in\n   this specification.  An implementation of this protocol may\
    \ maintain\n   this information in the indicated form or in any other organization\n\
    \   that offers access to this information.  In particular, note that it\n   is\
    \ not necessary to remove Tuples from Sets at the exact time\n   indicated, only\
    \ to behave as if the Tuples were removed at that time.\n"
- title: 4.3.1.  Local Information Base
  contents:
  - "4.3.1.  Local Information Base\n   The Local Information Base is specified in\
    \ [RFC6130] and contains a\n   router's local configuration.  It is extended in\
    \ this specification\n   to also record an originator address and to include a\
    \ router's:\n   o  Originator Set, containing addresses that were recently used\
    \ as\n      this router's originator address, that is used, together with the\n\
    \      router's current originator address, to enable a router to\n      recognize\
    \ and discard control traffic that was originated by the\n      router itself.\n\
    \   o  Local Attached Network Set, containing network addresses of\n      networks\
    \ to which this router can act as a gateway, that it\n      advertises in its\
    \ TC messages.\n"
- title: 4.3.2.  Interface Information Base
  contents:
  - "4.3.2.  Interface Information Base\n   The Interface Information Base for each\
    \ OLSRv2 interface is as\n   specified in [RFC6130], extended to also record,\
    \ in each Link Set,\n   link metric values (incoming and outgoing) and flooding\
    \ MPR selector\n   information.\n"
- title: 4.3.3.  Neighbor Information Base
  contents:
  - "4.3.3.  Neighbor Information Base\n   The Neighbor Information Base is specified\
    \ in [RFC6130] and is\n   extended to also record, in the Neighbor Tuple for each\
    \ neighbor:\n   o  Its originator address.\n   o  Neighbor metric values, these\
    \ being the minimum of the link metric\n      values in the indicated direction\
    \ for all symmetric 1-hop links\n      with that neighbor.\n   o  Its willingness\
    \ to be a flooding MPR and to be a routing MPR.\n   o  Whether it has been selected\
    \ by this router as a flooding MPR or\n      as a routing MPR and whether it is\
    \ a routing MPR selector of this\n      router.  (Whether it is a flooding MPR\
    \ selector of this neighbor\n      is recorded in the Interface Information Base.)\n\
    \   o  Whether it is to be advertised in TC messages sent by this router.\n"
- title: 4.3.4.  Topology Information Base
  contents:
  - "4.3.4.  Topology Information Base\n   The Topology Information Base in each router\
    \ contains:\n   o  An Advertising Remote Router Set, recording each remote router\n\
    \      from which TC messages have been received.  This is used in order\n   \
    \   to determine if a received TC message contains fresh or outdated\n      information;\
    \ a received TC message is ignored in the latter case.\n   o  A Router Topology\
    \ Set, recording links between routers in the\n      MANET, as described by received\
    \ TC messages.\n   o  A Routable Address Topology Set, recording routable addresses\
    \ in\n      the MANET (available as IP packet destinations) and from which\n \
    \     remote router these routable addresses can be directly reached\n      (i.e.,\
    \ in a single IP hop from that remote router), as reported by\n      received\
    \ TC messages.\n   o  An Attached Network Set, recording networks to which a remote\n\
    \      router has advertised that it may act as a gateway.  These\n      networks\
    \ may be reached in one or more IP hops from that remote\n      router.\n   o\
    \  A Routing Set, recording routes from this router to all available\n      destinations.\
    \  The IP routing table is to be updated using this\n      Routing Set.  (A router\
    \ may choose to use any or all destination\n      network addresses in the Routing\
    \ Set to update the IP routing\n      table.  This selection is outside the scope\
    \ of this\n      specification.)\n   The purpose of the Topology Information Base\
    \ is to record information\n   used, in addition to that in the Local Information\
    \ Base, the\n   Interface Information Bases, and the Neighbor Information Base,\
    \ to\n   construct the Routing Set (which is also included in the Topology\n \
    \  Information Base).\n   This specification describes the calculation of the\
    \ Routing Set based\n   on a Topology Graph constructed in two phases.  First,\
    \ a \"backbone\"\n   graph representing the routers in the MANET, and the connectivity\n\
    \   between them, is constructed from the Local Information Base, the\n   Neighbor\
    \ Information Base, and the Router Topology Set.  Second, this\n   graph is \"\
    decorated\" with additional destination network addresses\n   using the Local\
    \ Information Base, the Routable Address Topology Set,\n   and the Attached Network\
    \ Set.\n   The Topology Graph does not need to be recorded in the Topology\n \
    \  Information Base; it can either be constructed as required when the\n   Routing\
    \ Set is to be changed or need not be explicitly constructed\n   (as illustrated\
    \ in Appendix C).  An implementation may, however,\n   construct and retain the\
    \ Topology Graph if preferred.\n"
- title: 4.3.5.  Received Message Information Base
  contents:
  - "4.3.5.  Received Message Information Base\n   The Received Message Information\
    \ Base in each router contains:\n   o  A Received Set for each OLSRv2 interface,\
    \ describing TC messages\n      received by this router on that OLSRv2 interface.\n\
    \   o  A Processed Set, describing TC messages processed by this router.\n   o\
    \  A Forwarded Set, describing TC messages forwarded by this router.\n   The Received\
    \ Message Information Base serves the MPR flooding\n   mechanism by ensuring that\
    \ received messages are forwarded at most\n   once by a router and also ensures\
    \ that received messages are\n   processed exactly once by a router.  The Received\
    \ Message Information\n   Base may also record information about other Message\
    \ Types that use\n   the MPR flooding mechanism.\n"
- title: 4.4.  Signaling Overview
  contents:
  - "4.4.  Signaling Overview\n   This protocol generates and processes HELLO messages\
    \ according to\n   [RFC6130].  HELLO messages transmitted on OLSRv2 interfaces\
    \ are\n   extended according to Section 15 of this specification to include an\n\
    \   originator address, link metrics, and MPR selection information.\n   This\
    \ specification defines a single Message Type, the TC message.  TC\n   messages\
    \ are sent by their originating router proactively, at a\n   regular interval,\
    \ on all OLSRv2 interfaces.  This interval may be\n   fixed or dynamic, for example,\
    \ it may be backed off due to congestion\n   or network stability.  TC messages\
    \ may also be sent as a response to\n   a change in the router itself, or its\
    \ advertised symmetric 1-hop\n   neighborhood, for example, on first being selected\
    \ as a routing MPR.\n   Because TC messages are sent periodically, this protocol\
    \ is tolerant\n   of unreliable transmissions of TC messages.  Message losses\
    \ may occur\n   more frequently in wireless networks due to collisions or other\n\
    \   transmission problems.  This protocol may use \"jitter\", randomized\n   adjustments\
    \ to message transmission times, to reduce the incidence of\n   collisions, as\
    \ specified in [RFC5148].\n   This protocol is tolerant of out-of-sequence delivery\
    \ of TC messages\n   due to in-transit message reordering.  Each router maintains\
    \ an\n   Advertised Neighbor Sequence Number (ANSN) that is incremented when\n\
    \   its recorded neighbor information that is to be included in its TC\n   messages\
    \ changes.  This ANSN is included in the router's TC messages.\n   The recipient\
    \ of a TC message can use this included ANSN to identify\n   which of the information\
    \ it has received is most recent, even if\n   messages have been reordered while\
    \ in transit.  Only the most recent\n   information received is used; older information\
    \ received later is\n   discarded.\n   TC messages may be \"complete\" or \"incomplete\"\
    .  A complete TC message\n   advertises all of the originating router's routing\
    \ MPR selectors; it\n   may also advertise other symmetric 1-hop neighbors.  Complete\
    \ TC\n   messages are generated periodically (and also, optionally, in\n   response\
    \ to symmetric 1-hop neighborhood changes).  Incomplete TC\n   messages may be\
    \ used to report additions to advertised information,\n   without repeating unchanged\
    \ information.\n   TC messages, and HELLO messages as extended by this specification,\n\
    \   define (by inclusion or by deduction when having a single address) an\n  \
    \ originator address for the router that created the message.  A TC\n   message\
    \ reports both the originator addresses and routable addresses\n   of its advertised\
    \ neighbors, distinguishing the two using an Address\n   Block TLV (an address\
    \ may be both routable and an originator\n   address).  TC messages also report\
    \ the originator's locally attached\n   networks.\n   TC messages are MPR flooded\
    \ throughout the MANET.  A router\n   retransmits a TC message received on an\
    \ OLSRv2 interface if and only\n   if the message did not originate at this router\
    \ and has not been\n   previously forwarded by this router, this is the first\
    \ time the\n   message has been received on this OLSRv2 interface, and the message\n\
    \   is received from (i.e., originated from or was last relayed by) one\n   of\
    \ this router's flooding MPR selectors.\n   Some TC messages may be MPR flooded\
    \ over only part of the network,\n   e.g., allowing a router to ensure that nearer\
    \ routers are kept more\n   up to date than distant routers, such as is used in\
    \ Fisheye State\n   Routing [FSR] and Fuzzy Sighted Link State routing [FSLS].\
    \  This is\n   enabled using [RFC5497].\n   TC messages include outgoing neighbor\
    \ metrics that will be used in\n   the selection of routes.\n"
- title: 4.5.  Link Metrics
  contents:
  - "4.5.  Link Metrics\n   OLSRv1 [RFC3626] created minimum hop routes to destinations.\n\
    \   However, in many, if not most, circumstances, better routes (in terms\n  \
    \ of quality of service for end users) can be created by use of link\n   metrics.\n\
    \   OLSRv2, as defined in this specification, supports metric-based\n   routing,\
    \ i.e., it allows links to each have a chosen metric.  Link\n   metrics as defined\
    \ in OLSRv2 are additive, and the routes that are to\n   be created are those\
    \ with the minimum sum of the link metrics along\n   that route.\n   Link metrics\
    \ are defined to be directional; the link metric from one\n   router to another\
    \ may be different from that on the reverse link.\n   The link metric is assessed\
    \ at the receiver, as on a (typically)\n   wireless link, that is the better informed\
    \ as to link information.\n   Both incoming and outgoing link information is used\
    \ by OLSRv2; the\n   distinctions in this specification must be clearly followed.\n\
    \   This specification also defines both incoming and outgoing neighbor\n   metrics\
    \ for each symmetric 1-hop neighbor, these being the minimum\n   value of the\
    \ link metrics in the same direction for all symmetric\n   links with that neighbor.\
    \  Note that this means that all neighbor\n   metric values are link metric values\
    \ and that specification of, for\n   example, link metric value encoding also\
    \ includes encoding of\n   neighbor metric values.\n   This specification does\
    \ not define the nature of the link metric.\n   However, this specification allows,\
    \ through use of the type extension\n   of a defined Address Block TLV, for link\
    \ metrics with specific\n   meanings to be defined and either allocated by IANA\
    \ or privately\n   used.  Each HELLO or TC message carrying link (or neighbor)\
    \ metrics\n   thus indicates which link metric information it is carrying, allowing\n\
    \   routers to determine if they can interoperate.  If link metrics\n   require\
    \ additional signaling to determine their values, whether in\n   HELLO messages\
    \ or otherwise, then this is permitted but is outside\n   the scope of this specification.\n\
    \   Careful consideration should be given to how to use link metrics.  In\n  \
    \ particular, it is advisable to not simply default to use of all links\n   with\
    \ equal metrics (i.e., hop count) for routing without careful\n   consideration\
    \ of whether that is appropriate or not.\n"
- title: 4.6.  Flooding MPRs and Routing MPR
  contents:
  - "4.6.  Flooding MPRs and Routing MPR\n   This specification uses two sets of MPRs:\
    \ flooding MPRs and routing\n   MPRs.  These are selected separately, because:\n\
    \   o  Flooding MPRs may use metrics; routing MPRs must use metrics.\n   o  When\
    \ flooding MPRs use metrics, these are outgoing link metrics;\n      routing MPRs\
    \ use incoming neighbor metrics.\n   o  Flooding MPRs must be selected per OLSRv2\
    \ interface; routing MPRs\n      need not be selected per OLSRv2 interface.\n"
- title: 4.7.  Routing Set Use
  contents:
  - "4.7.  Routing Set Use\n   The purpose of the Routing Set is to determine and\
    \ record routes\n   (local interface network address and next-hop interface network\n\
    \   address) to all possible routable addresses advertised by this\n   protocol\
    \ as well as all destinations that are local, i.e., within one\n   hop, to the\
    \ router (whether using routable addresses or not).  Only\n   symmetric links\
    \ are used in such routes.\n   It is intended that the Routing Set can be used\
    \ for IP packet\n   routing, by using its contents to update the IP routing table.\
    \  That\n   update, and whether any Routing Tuples are not used when updating\
    \ the\n   IP routing table, is outside the scope of this specification.\n   The\
    \ signaling in this specification has been designed so that a\n   \"backbone\"\
    \ Topology Graph of routers, each identified by its\n   originator address, with\
    \ at most one direct connection between any\n   pair of routers, can be constructed\
    \ (from the Neighbor Set and the\n   Router Topology Set) using a suitable minimum\
    \ path length algorithm.\n   This Topology Graph can then have other network addresses\
    \ (routable\n   or of symmetric 1-hop neighbors) added to it (using the Interface\n\
    \   Information Bases, the Routable Address Topology Set, and the\n   Attached\
    \ Network Set).\n"
- title: 5.  Protocol Parameters and Constants
  contents:
  - "5.  Protocol Parameters and Constants\n   The parameters and constants used in\
    \ this specification are those\n   defined in [RFC6130] plus those defined in\
    \ this section.  The\n   separation in [RFC6130] into interface parameters, router\
    \ parameters,\n   and constants is also used in this specification.\n   Similarly\
    \ to the parameters in [RFC6130], parameters defined in this\n   specification\
    \ MAY be changed dynamically by a router and need not be\n   the same on different\
    \ routers, even in the same MANET, or, for\n   interface parameters, on different\
    \ interfaces of the same router.\n"
- title: 5.1.  Protocol and Port Numbers
  contents:
  - "5.1.  Protocol and Port Numbers\n   This protocol specifies TC messages, which\
    \ are included in packets as\n   defined by [RFC5444].  These packets MUST be\
    \ sent either using the\n   \"manet\" protocol number or the \"manet\" UDP well-known\
    \ port number, as\n   specified in [RFC5498].\n   TC messages and HELLO messages\
    \ [RFC6130] MUST, in a given MANET,\n   either both use IP or both use UDP, in\
    \ order for it to be possible to\n   combine messages of both protocols into the\
    \ same [RFC5444] packet for\n   transmission.\n"
- title: 5.2.  Multicast Address
  contents:
  - "5.2.  Multicast Address\n   This protocol specifies TC messages, which are included\
    \ in packets as\n   defined by [RFC5444].  These packets MAY be transmitted using\
    \ the\n   Link-Local multicast address \"LL-MANET-Routers\", as specified in\n\
    \   [RFC5498].\n"
- title: 5.3.  Interface Parameters
  contents:
  - "5.3.  Interface Parameters\n   A single additional interface parameter is specified\
    \ for OLSRv2\n   interfaces only.\n"
- title: 5.3.1.  Received Message Validity Time
  contents:
  - "5.3.1.  Received Message Validity Time\n   The following parameter manages the\
    \ validity time of recorded\n   received message information:\n   RX_HOLD_TIME:\n\
    \      The period after receipt of a message by the appropriate OLSRv2\n     \
    \ interface of this router for which that information is recorded,\n      in order\
    \ that the message is recognized as having been previously\n      received on\
    \ this OLSRv2 interface.\n   The following constraints apply to this parameter:\n\
    \   o  RX_HOLD_TIME > 0\n   o  RX_HOLD_TIME SHOULD be greater than the maximum\
    \ difference in time\n      that a message may take to traverse the MANET, taking\
    \ into account\n      any message forwarding jitter as well as propagation, queuing,\
    \ and\n      processing delays.\n"
- title: 5.4.  Router Parameters
  contents:
  - "5.4.  Router Parameters\n   The following router parameters are specified for\
    \ routers.\n"
- title: 5.4.1.  Local History Times
  contents:
  - "5.4.1.  Local History Times\n   The following router parameter manages the time\
    \ for which local\n   information is retained:\n   O_HOLD_TIME:\n      The time\
    \ for which a recently used and replaced originator address\n      is used to\
    \ recognize the router's own messages.\n   The following constraint applies to\
    \ this parameter:\n   o  O_HOLD_TIME > 0\n"
- title: 5.4.2.  Link Metric Parameters
  contents:
  - "5.4.2.  Link Metric Parameters\n   All routes found using this specification\
    \ use a single link metric\n   type that is specified by the router parameter\
    \ LINK_METRIC_TYPE,\n   which may take any value from 0 to 255, both inclusive.\n"
- title: 5.4.3.  Message Intervals
  contents:
  - "5.4.3.  Message Intervals\n   The following parameters regulate TC message transmissions\
    \ by a\n   router.  TC messages are usually sent periodically but MAY also be\n\
    \   sent in response to changes in the router's Neighbor Set and/or Local\n  \
    \ Attached Network Set.  In a highly dynamic network, and with a larger\n   value\
    \ of the parameter TC_INTERVAL and a smaller value of the\n   parameter TC_MIN_INTERVAL,\
    \ TC messages MAY be transmitted more often\n   in response to changes than periodically.\
    \  However, because a router\n   has no knowledge of, for example, routers remote\
    \ to it (i.e., beyond\n   two hops away) joining the network, TC messages MUST\
    \ NOT be sent\n   purely responsively.\n   TC_INTERVAL:\n      The maximum time\
    \ between the transmission of two successive TC\n      messages by this router.\
    \  When no TC messages are sent in response\n      to local network changes (by\
    \ design or because the local network\n      is not changing), then TC messages\
    \ MUST be sent at a regular\n      interval TC_INTERVAL, possibly modified by\
    \ jitter, as specified in\n      [RFC5148].\n   TC_MIN_INTERVAL:\n      The minimum\
    \ interval between transmission of two successive TC\n      messages by this router.\
    \  (This minimum interval MAY be modified\n      by jitter, as specified in [RFC5148].)\n\
    \   The following constraints apply to these parameters:\n   o  TC_INTERVAL >\
    \ 0\n   o  0 <= TC_MIN_INTERVAL <= TC_INTERVAL\n   o  If TLVs with Type = INTERVAL_TIME,\
    \ as defined in [RFC5497], are\n      included in TC messages, then TC_INTERVAL\
    \ MUST be representable by\n      way of the exponent-mantissa notation described\
    \ in Section 5 of\n      [RFC5497].\n"
- title: 5.4.4.  Advertised Information Validity Times
  contents:
  - "5.4.4.  Advertised Information Validity Times\n   The following parameters manage\
    \ the validity time of information\n   advertised in TC messages:\n   T_HOLD_TIME:\n\
    \      Used as the minimum value in the TLV with Type = VALIDITY_TIME\n      included\
    \ in all TC messages sent by this router.  If a single\n      value of parameter\
    \ TC_HOP_LIMIT (see Section 5.4.7) is used, then\n      this will be the only\
    \ value in that TLV.\n   A_HOLD_TIME:\n      The period during which TC messages\
    \ are sent after they no longer\n      have any advertised information to report\
    \ but are sent in order to\n      accelerate outdated information removal by other\
    \ routers.\n   The following constraints apply to these parameters:\n   o  T_HOLD_TIME\
    \ > 0\n   o  A_HOLD_TIME >= 0\n   o  T_HOLD_TIME >= TC_INTERVAL\n   o  If TC messages\
    \ can be lost, then both T_HOLD_TIME and A_HOLD_TIME\n      SHOULD be significantly\
    \ greater than TC_INTERVAL; a value >= 3 x\n      TC_INTERVAL is RECOMMENDED.\n\
    \   o  T_HOLD_TIME MUST be representable by way of the exponent-mantissa\n   \
    \   notation described in Section 5 of [RFC5497].\n"
- title: 5.4.5.  Processing and Forwarding Validity Times
  contents:
  - "5.4.5.  Processing and Forwarding Validity Times\n   The following parameters\
    \ manage the processing and forwarding\n   validity time of recorded message information:\n\
    \   P_HOLD_TIME:\n      The period after receipt of a message that is processed\
    \ by this\n      router for which that information is recorded, in order that\
    \ the\n      message is not processed again if received again.\n   F_HOLD_TIME:\n\
    \      The period after receipt of a message that is forwarded by this\n     \
    \ router for which that information is recorded, in order that the\n      message\
    \ is not forwarded again if received again.\n   The following constraints apply\
    \ to these parameters:\n   o  P_HOLD_TIME > 0\n   o  F_HOLD_TIME > 0\n   o  Both\
    \ of these parameters SHOULD be greater than the maximum\n      difference in\
    \ time that a message may take to traverse the MANET,\n      taking into account\
    \ any message forwarding jitter as well as\n      propagation, queuing, and processing\
    \ delays.\n"
- title: 5.4.6.  Jitter
  contents:
  - "5.4.6.  Jitter\n   If jitter, as defined in [RFC5148], is used, then the governing\n\
    \   jitter parameters are as follows:\n   TP_MAXJITTER:\n      Represents the\
    \ value of MAXJITTER used in [RFC5148] for\n      periodically generated TC messages\
    \ sent by this router.\n   TT_MAXJITTER:\n      Represents the value of MAXJITTER\
    \ used in [RFC5148] for externally\n      triggered TC messages sent by this router.\n\
    \   F_MAXJITTER:\n      Represents the default value of MAXJITTER used in [RFC5148]\
    \ for\n      messages forwarded by this router.  However, before using\n     \
    \ F_MAXJITTER, a router MAY attempt to deduce a more appropriate\n      value\
    \ of MAXJITTER, for example, based on any TLVs with Type =\n      INTERVAL_TIME\
    \ or Type = VALIDITY_TIME contained in the message to\n      be forwarded.\n \
    \  For constraints on these parameters, see [RFC5148].\n"
- title: 5.4.7.  Hop Limit
  contents:
  - "5.4.7.  Hop Limit\n   The parameter TC_HOP_LIMIT is the hop limit set in each\
    \ TC message.\n   TC_HOP_LIMIT MAY be a single fixed value or MAY be different\
    \ in TC\n   messages sent by the same router.  However, each other router, at\
    \ any\n   hop count distance, MUST see a regular pattern of TC messages in\n \
    \  order that meaningful values of TLVs with Type = INTERVAL_TIME and\n   Type\
    \ = VALIDITY_TIME at each hop count distance can be included as\n   defined in\
    \ [RFC5497].  Thus, the pattern of TC_HOP_LIMIT MUST be\n   defined to have this\
    \ property.  For example, the repeating pattern\n   (255 4 4) satisfies this property\
    \ (having period TC_INTERVAL at hop\n   counts up to 4, inclusive, and 3 x TC_INTERVAL\
    \ at hop counts greater\n   than 4), but the repeating pattern (255 255 4 4) does\
    \ not satisfy\n   this property because at hop counts greater than 4, message\
    \ intervals\n   are alternately TC_INTERVAL and 3 x TC_INTERVAL.\n   The following\
    \ constraints apply to this parameter:\n   o  The maximum value of TC_HOP_LIMIT\
    \ >= the network diameter in hops;\n      a value of 255 is RECOMMENDED.  Note\
    \ that if using a pattern of\n      different values of TC_HOP_LIMIT as described\
    \ above, then only the\n      maximum value in the pattern is so constrained.\n\
    \   o  All values of TC_HOP_LIMIT >= 2.\n"
- title: 5.4.8.  Willingness
  contents:
  - "5.4.8.  Willingness\n   Each router has two willingness parameters: WILL_FLOODING\
    \ and\n   WILL_ROUTING, each of which MUST be in the range WILL_NEVER to\n   WILL_ALWAYS,\
    \ inclusive.\n   WILL_FLOODING represents the router's willingness to be selected\
    \ as a\n   flooding MPR and hence to participate in MPR flooding, in particular\n\
    \   of TC messages.\n   WILL_ROUTING represents the router's willingness to be\
    \ selected as a\n   routing MPR and hence to be an intermediate router on routes.\n\
    \   In either case, the higher the value, the greater the router's\n   willingness\
    \ to be a flooding or routing MPR, as appropriate.  If a\n   router has a willingness\
    \ value of WILL_NEVER (the lowest possible\n   value), it does not perform the\
    \ corresponding task.  A MANET using\n   this protocol with too many routers having\
    \ either of the willingness\n   parameters WILL_FLOODING or WILL_ROUTING equal\
    \ to WILL_NEVER will not\n   function; it MUST be ensured, by administrative or\
    \ other means, that\n   this does not happen.\n   Note that the proportion at\
    \ which the routers having a willingness\n   value equal to WILL_NEVER is \"too\
    \ many\" depends on the network\n   topology -- which, in a MANET, may change\
    \ dynamically.  Willingness\n   is intended to enable that certain routers (e.g.,\
    \ routers that have\n   generous resources, such as a permanent power supply)\
    \ can be\n   configured to assume more of the network operation, while others\n\
    \   (e.g., routers that have lesser resources, such as are battery\n   operated)\
    \ can avoid such tasks.  A general guideline would be that\n   only if a router\
    \ is not actually able to assume the task (flooding or\n   routing) should it\
    \ be configured with the corresponding willingness\n   WILL_NEVER.\n   If a router\
    \ has a willingness value equal to WILL_ALWAYS (the highest\n   possible value),\
    \ then it will always be selected as a flooding or\n   routing MPR, as appropriate,\
    \ by all symmetric 1-hop neighbors.\n   In a MANET in which all routers have WILL_FLOODING\
    \ = WILL_ALWAYS,\n   flooding reduction will effectively be disabled, and flooding\
    \ will\n   perform as blind flooding.\n   In a MANET in which all routers have\
    \ WILL_ROUTING = WILL_ALWAYS,\n   topology reduction will effectively be disabled,\
    \ and all routers will\n   advertise all of their links in TC messages.\n   A\
    \ router that has WILL_ROUTING = WILL_NEVER will not act as an\n   intermediate\
    \ router in the MANET.  Such a router can act as a source,\n   destination, or\
    \ gateway to another routing domain.\n   Different routers MAY have different\
    \ values for WILL_FLOODING and/or\n   WILL_ROUTING.\n   The following constraints\
    \ apply to these parameters:\n   o  WILL_NEVER <= WILL_FLOODING <= WILL_ALWAYS\n\
    \   o  WILL_NEVER <= WILL_ROUTING <= WILL_ALWAYS\n"
- title: 5.5.  Parameter Change Constraints
  contents:
  - "5.5.  Parameter Change Constraints\n   If protocol parameters are changed dynamically,\
    \ then the constraints\n   in this section apply.\n   RX_HOLD_TIME\n      *  If\
    \ RX_HOLD_TIME for an OLSRv2 interface changes, then the\n         expiry time\
    \ for all Received Tuples for that OLSRv2 interface\n         MAY be changed.\n\
    \   O_HOLD_TIME\n      *  If O_HOLD_TIME changes, then the expiry time for all\
    \ Originator\n         Tuples MAY be changed.\n   TC_INTERVAL\n      *  If TC_INTERVAL\
    \ increases, then the next TC message generated by\n         this router MUST\
    \ be generated according to the previous,\n         shorter TC_INTERVAL.  Additional\
    \ subsequent TC messages MAY be\n         generated according to the previous,\
    \ shorter, TC_INTERVAL.\n      *  If TC_INTERVAL decreases, then the following\
    \ TC messages from\n         this router MUST be generated according to the current,\n\
    \         shorter, TC_INTERVAL.\n   P_HOLD_TIME\n      *  If P_HOLD_TIME changes,\
    \ then the expiry time for all Processed\n         Tuples MAY be changed.\n  \
    \ F_HOLD_TIME\n      *  If F_HOLD_TIME changes, then the expiry time for all Forwarded\n\
    \         Tuples MAY be changed.\n   TP_MAXJITTER\n      *  If TP_MAXJITTER changes,\
    \ then the periodic TC message schedule\n         on this router MAY be changed\
    \ immediately.\n   TT_MAXJITTER\n      *  If TT_MAXJITTER changes, then externally\
    \ triggered TC messages\n         on this router MAY be rescheduled.\n   F_MAXJITTER\n\
    \      *  If F_MAXJITTER changes, then TC messages waiting to be\n         forwarded\
    \ with a delay based on this parameter MAY be\n         rescheduled.\n   TC_HOP_LIMIT\n\
    \      *  If TC_HOP_LIMIT changes, and the router uses multiple values\n     \
    \    after the change, then message intervals and validity times\n         included\
    \ in TC messages MUST be respected.  The simplest way to\n         do this is\
    \ to start any new repeating pattern of TC_HOP_LIMIT\n         values with its\
    \ largest value.\n   LINK_METRIC_TYPE\n      *  If LINK_METRIC_TYPE changes, then\
    \ all link metric information\n         recorded by the router is invalid.  The\
    \ router MUST take the\n         following actions and all consequent actions\
    \ described in\n         Section 17 and [RFC6130].\n         +  For each Link\
    \ Tuple in any Link Set for an OLSRv2 interface,\n            either update L_in_metric\
    \ (the value MAXIMUM_METRIC MAY be\n            used) or remove the Link Tuple\
    \ from the Link Set.\n         +  For each Link Tuple that is not removed, set:\n\
    \            -  L_out_metric := UNKNOWN_METRIC;\n            -  L_SYM_time :=\
    \ EXPIRED;\n            -  L_MPR_selector := false.\n         +  Remove all Router\
    \ Topology Tuples, Routable Address Topology\n            Tuples, Attached Network\
    \ Tuples, and Routing Tuples from\n            their respective Protocol Sets\
    \ in the Topology Information\n            Base.\n"
- title: 5.6.  Constants
  contents:
  - "5.6.  Constants\n   The following constants are specified for routers.  Unlike\
    \ router\n   parameters, constants MUST NOT change and MUST be the same on all\n\
    \   routers.\n"
- title: 5.6.1.  Link Metric Constants
  contents:
  - "5.6.1.  Link Metric Constants\n   The constant minimum and maximum link metric\
    \ values are defined by:\n   o  MINIMUM_METRIC := 1\n   o  MAXIMUM_METRIC := 16776960\n\
    \   The symbolic value UNKNOWN_METRIC is defined in Section 6.1.\n"
- title: 5.6.2.  Willingness Constants
  contents:
  - "5.6.2.  Willingness Constants\n   The constant minimum, RECOMMENDED default,\
    \ and maximum willingness\n   values are defined by:\n   o  WILL_NEVER := 0\n\
    \   o  WILL_DEFAULT := 7\n   o  WILL_ALWAYS := 15\n"
- title: 5.6.3.  Time Constant
  contents:
  - "5.6.3.  Time Constant\n   The constant C (time granularity) is used as specified\
    \ in [RFC5497].\n   It MUST be the same as is used by [RFC6130], with RECOMMENDED\
    \ value:\n   o  C := 1/1024 second\n   Note that this constant is used in the\
    \ representation of time\n   intervals.  Time values (such as are stored in Protocol\
    \ Tuples) are\n   not so represented.  A resolution of C in such values is sufficient\n\
    \   (but not necessary) for such values.\n"
- title: 6.  Link Metric Values
  contents:
  - "6.  Link Metric Values\n   A router records a link metric value for each direction\
    \ of a link of\n   which it has knowledge.  These link metric values are used\
    \ to create\n   metrics for routes by the addition of link metric values.\n"
- title: 6.1.  Link Metric Representation
  contents:
  - "6.1.  Link Metric Representation\n   Link metrics are reported in messages using\
    \ a compressed\n   representation that occupies 12 bits, consisting of a 4-bit\
    \ field and\n   an 8-bit field.  The compressed representation represents positive\n\
    \   integer values with a minimum value of 1 and a maximum value that is\n   slightly\
    \ smaller than the maximum 24-bit value.  Only those values\n   that have exact\
    \ representation in the compressed form are used.\n   Route metrics are the summation\
    \ of no more than 256 link metric\n   values and can therefore be represented\
    \ using no more than 32 bits.\n   Link and route metrics used in the Information\
    \ Bases defined in this\n   specification refer to the uncompressed values, and\
    \ arithmetic\n   involving them does likewise and assumes full precision in the\n\
    \   result.  (How an implementation records the values is not part of\n   this\
    \ specification, as long as it behaves as if recording\n   uncompressed values.\
    \  An implementation can, for example, use 32-bit\n   values for all link and\
    \ route metrics.)\n   In some cases, a link metric value may be unknown.  This\
    \ is indicated\n   in this specification by the symbolic value UNKNOWN_METRIC.\
    \  An\n   implementation may use any representation of UNKNOWN_METRIC as it is\n\
    \   never included in messages or used in any computation.  (Possible\n   representations\
    \ are zero or any value greater than the maximum\n   representable metric value.)\n"
- title: 6.2.  Link Metric Compressed Form
  contents:
  - "6.2.  Link Metric Compressed Form\n   The 12-bit compressed form of a link metric\
    \ uses a modified form of a\n   representation with an 8-bit mantissa (denoted\
    \ a) and a 4-bit\n   exponent (denoted b).  Note that if represented as the 12-bit\
    \ value\n   256b+a, then the ordering of those 12-bit values is identical to the\n\
    \   ordering of the represented values.\n   The value so represented is (257+a)2^b\
    \ - 256, where ^ denotes\n   exponentiation.  This has a minimum value (when a\
    \ = 0 and b = 0) of\n   MINIMUM_METRIC = 1 and a maximum value (when a = 255 and\
    \ b = 15) of\n   MAXIMUM_METRIC = 2^24 - 256.\n   An algorithm for computing a\
    \ and b for the smallest representable\n   value not less than a link metric value\
    \ v such that MINIMUM_METRIC <=\n   v <= MAXIMUM_METRIC is:\n   1.  Find the smallest\
    \ integer b such that v + 256 <= 2^(b + 9).\n   2.  Set a := (v - 256(2^b - 1))\
    \ / (2^b) - 1, rounded up to the\n       nearest integer.\n"
- title: 7.  Local Information Base
  contents:
  - "7.  Local Information Base\n   The Local Information Base, as defined for each\
    \ router in [RFC6130],\n   is extended by this protocol by:\n   o  Recording the\
    \ router's originator address.  The originator address\n      MUST be unique to\
    \ this router.  It MUST NOT be used by any other\n      router as an originator\
    \ address.  It MAY be included in any\n      network address in any I_local_iface_addr_list\
    \ of this router; it\n      MUST NOT be included in any network address in any\n\
    \      I_local_iface_addr_list of any other router.  It MAY be included\n    \
    \  in, but MUST NOT be equal to, the AL_net_addr in any Local\n      Attached\
    \ Network Tuple in this or any other router.\n   o  The addition of an Originator\
    \ Set, defined in Section 7.1, and a\n      Local Attached Network Set, defined\
    \ in Section 7.2.\n   All routable addresses of the router for which it is to\
    \ accept IP\n   packets as destination MUST be included in the Local Interface\
    \ Set or\n   the Local Attached Network Set.\n"
- title: 7.1.  Originator Set
  contents:
  - "7.1.  Originator Set\n   A router's Originator Set records addresses that were\
    \ recently used\n   as originator addresses by this router.  If a router's originator\n\
    \   address is immutable, then the Originator Set is always empty and MAY\n  \
    \ be omitted.  It consists of Originator Tuples:\n      (O_orig_addr, O_time)\n\
    \   where:\n      O_orig_addr is a recently used originator address; note that\
    \ this\n      does not include a prefix length.\n      O_time specifies the time\
    \ at which this Tuple expires and MUST be\n      removed.\n"
- title: 7.2.  Local Attached Network Set
  contents:
  - "7.2.  Local Attached Network Set\n   A router's Local Attached Network Set records\
    \ its local non-OLSRv2\n   interfaces via which it can act as a gateway to other\
    \ networks.  The\n   Local Attached Network Set MUST be provided to this protocol\
    \ and MUST\n   reflect any changes in the router's status.  (In cases where the\n\
    \   router's configuration is static, the Local Attached Network Set will\n  \
    \ be constant; in cases where the router has no such non-OLSRv2\n   interfaces,\
    \ the Local Attached Network Set will be empty.)  The Local\n   Attached Network\
    \ Set is not modified by this protocol.  This protocol\n   will respond to (externally\
    \ provided) changes to the Local Attached\n   Network Set.  It consists of Local\
    \ Attached Network Tuples:\n      (AL_net_addr, AL_dist, AL_metric)\n   where:\n\
    \      AL_net_addr is the network address of an attached network that can\n  \
    \    be reached via this router.  This SHOULD be a routable address.\n      It\
    \ is constrained as described below.\n      AL_dist is the number of hops to the\
    \ network with network address\n      AL_net_addr from this router.\n      AL_metric\
    \ is the metric of the link to the attached network with\n      address AL_net_addr\
    \ from this router.\n   Attached networks local to this router only (i.e., not\
    \ reachable\n   except via this router) SHOULD be treated as local non-MANET\n\
    \   interfaces and added to the Local Interface Set, as specified in\n   [RFC6130],\
    \ rather than added to the Local Attached Network Set.\n   Because an attached\
    \ network is not specific to the router and may be\n   outside the MANET, an attached\
    \ network MAY also be attached to other\n   routers.  Routing to an AL_net_addr\
    \ will use maximum prefix length\n   matching; consequently, an AL_net_addr MAY\
    \ include, but MUST NOT\n   equal or be included in, any network address that\
    \ is of any interface\n   of any router (i.e., is included in any I_local_iface_addr_list)\
    \ or\n   equal any router's originator address.\n   It is not the responsibility\
    \ of this protocol to maintain routes from\n   this router to networks recorded\
    \ in the Local Attached Network Set.\n   Local Attached Network Tuples are removed\
    \ from the Local Attached\n   Network Set only when the router's local attached\
    \ network\n   configuration changes, i.e., they are not subject to timer-based\n\
    \   expiration or changes due to received messages.\n"
- title: 8.  Interface Information Base
  contents:
  - "8.  Interface Information Base\n   An Interface Information Base, as defined\
    \ in [RFC6130], is maintained\n   for each MANET interface.  The Link Set and\
    \ 2-Hop Set in the\n   Interface Information Base for an OLSRv2 interface are\
    \ modified by\n   this protocol.  In some cases, it may be convenient to consider\
    \ these\n   Sets as also containing these additional elements for other MANET\n\
    \   interfaces, taking the indicated values on creation but never being\n   updated.\n"
- title: 8.1.  Link Set
  contents:
  - "8.1.  Link Set\n   The Link Set is modified by adding these additional elements\
    \ to each\n   Link Tuple:\n      L_in_metric is the metric of the link from the\
    \ OLSRv2 interface\n      with addresses L_neighbor_iface_addr_list to this OLSRv2\n\
    \      interface;\n      L_out_metric is the metric of the link to the OLSRv2\
    \ interface\n      with addresses L_neighbor_iface_addr_list from this OLSRv2\n\
    \      interface;\n      L_mpr_selector is a boolean flag, describing if this\
    \ neighbor has\n      selected this router as a flooding MPR, i.e., is a flooding\
    \ MPR\n      selector of this router.\n   L_in_metric will be specified by a process\
    \ that is external to this\n   specification.  Any Link Tuple with L_status =\
    \ HEARD or L_status =\n   SYMMETRIC MUST have a specified value of L_in_metric\
    \ if it is to be\n   used by this protocol.\n   A Link Tuple created (but not\
    \ updated) by [RFC6130] MUST set:\n   o  L_in_metric := UNKNOWN_METRIC;\n   o\
    \  L_out_metric := UNKNOWN_METRIC;\n   o  L_mpr_selector := false.\n"
- title: 8.2.  2-Hop Set
  contents:
  - "8.2.  2-Hop Set\n   The 2-Hop Set is modified by adding these additional elements\
    \ to each\n   2-Hop Tuple:\n      N2_in_metric is the neighbor metric from the\
    \ router with address\n      N2_2hop_iface_addr to the router with OLSRv2 interface\
    \ addresses\n      N2_neighbor_iface_addr_list;\n      N2_out_metric is the neighbor\
    \ metric to the router with address\n      N2_2hop_iface_addr from the router\
    \ with OLSRv2 interface addresses\n      N2_neighbor_iface_addr_list.\n   A 2-Hop\
    \ Tuple created (but not updated) by [RFC6130] MUST set:\n   o  N2_in_metric :=\
    \ UNKNOWN_METRIC;\n   o  N2_out_metric := UNKNOWN_METRIC.\n"
- title: 9.  Neighbor Information Base
  contents:
  - "9.  Neighbor Information Base\n   A Neighbor Information Base, as defined in\
    \ [RFC6130], is maintained\n   for each router.  It is modified by this protocol\
    \ by adding these\n   additional elements to each Neighbor Tuple in the Neighbor\
    \ Set.  In\n   some cases, it may be convenient to consider these Sets as also\n\
    \   containing these additional elements for other MANET interfaces,\n   taking\
    \ the indicated values on creation but never being updated.\n      N_orig_addr\
    \ is the neighbor's originator address, which may be\n      unknown.  Note that\
    \ this originator address does not include a\n      prefix length;\n      N_in_metric\
    \ is the neighbor metric of any link from this neighbor\n      to an OLSRv2 interface\
    \ of this router, i.e., the minimum of all\n      corresponding L_in_metric with\
    \ L_status = SYMMETRIC and\n      L_in_metric != UNKNOWN_METRIC, UNKNOWN_METRIC\
    \ if there are no such\n      Link Tuples;\n      N_out_metric is the neighbor\
    \ metric of any link from an OLSRv2\n      interface of this router to this neighbor,\
    \ i.e., the minimum of\n      all corresponding L_out_metric with L_status = SYMMETRIC\
    \ and\n      L_out_metric != UNKNOWN_METRIC, UNKNOWN_METRIC if there are no\n\
    \      such Link Tuples;\n      N_will_flooding is the neighbor's willingness\
    \ to be selected as a\n      flooding MPR, in the range from WILL_NEVER to WILL_ALWAYS,\
    \ both\n      inclusive, taking the value WILL_NEVER if no OLSRv2-specific\n \
    \     information is received from this neighbor;\n      N_will_routing is the\
    \ neighbor's willingness to be selected as a\n      routing MPR, in the range\
    \ from WILL_NEVER to WILL_ALWAYS, both\n      inclusive, taking the value WILL_NEVER\
    \ if no OLSRv2-specific\n      information is received from this neighbor;\n \
    \     N_flooding_mpr is a boolean flag, describing if this neighbor is\n     \
    \ selected as a flooding MPR by this router;\n      N_routing_mpr is a boolean\
    \ flag, describing if this neighbor is\n      selected as a routing MPR by this\
    \ router;\n      N_mpr_selector is a boolean flag, describing if this neighbor\
    \ has\n      selected this router as a routing MPR, i.e., is a routing MPR\n \
    \     selector of this router.\n      N_advertised is a boolean flag, describing\
    \ if this router has\n      elected to advertise a link to this neighbor in its\
    \ TC messages.\n   A Neighbor Tuple created (but not updated) by [RFC6130] MUST\
    \ set:\n   o  N_orig_addr := unknown;\n   o  N_in_metric := UNKNOWN_METRIC;\n\
    \   o  N_out_metric := UNKNOWN_METRIC;\n   o  N_will_flooding := WILL_NEVER;\n\
    \   o  N_will_routing := WILL_NEVER;\n   o  N_routing_mpr := false;\n   o  N_flooding_mpr\
    \ := false;\n   o  N_mpr_selector := false;\n   o  N_advertised := false.\n  \
    \ The Neighbor Information Base also includes a variable, the\n   Advertised Neighbor\
    \ Sequence Number (ANSN), whose value is included\n   in TC messages to indicate\
    \ the freshness of the information\n   transmitted.  The ANSN is incremented whenever\
    \ advertised information\n   (the originator and routable addresses included in\
    \ Neighbor Tuples\n   with N_advertised = true and local attached networks recorded\
    \ in the\n   Local Attached Network Set in the Local Information Base) changes,\n\
    \   including addition or removal of such information.\n"
- title: 10.  Topology Information Base
  contents:
  - "10.  Topology Information Base\n   The Topology Information Base, defined for\
    \ each router by this\n   specification, stores information received in TC messages\
    \ in the\n   Advertising Remote Router Set, the Router Topology Set, the Routable\n\
    \   Address Topology Set, and the Attached Network Set.\n   Additionally, a Routing\
    \ Set is maintained, derived from the\n   information recorded in the Local Information\
    \ Base, the Interface\n   Information Bases, the Neighbor Information Base, and\
    \ the rest of the\n   Topology Information Base.\n"
- title: 10.1.  Advertising Remote Router Set
  contents:
  - "10.1.  Advertising Remote Router Set\n   A router's Advertising Remote Router\
    \ Set records information\n   describing each remote router in the network that\
    \ transmits TC\n   messages, allowing outdated TC messages to be recognized and\n\
    \   discarded.  It consists of Advertising Remote Router Tuples:\n      (AR_orig_addr,\
    \ AR_seq_number, AR_time)\n   where:\n      AR_orig_addr is the originator address\
    \ of a received TC message,\n      note that this does not include a prefix length;\n\
    \      AR_seq_number is the greatest ANSN in any TC message received that\n  \
    \    originated from the router with originator address AR_orig_addr\n      (i.e.,\
    \ that contributed to the information contained in this\n      Tuple);\n     \
    \ AR_time is the time at which this Tuple expires and MUST be\n      removed.\n"
- title: 10.2.  Router Topology Set
  contents:
  - "10.2.  Router Topology Set\n   A router's Topology Set records topology information\
    \ about the links\n   between routers in the MANET.  It consists of Router Topology\
    \ Tuples:\n      (TR_from_orig_addr, TR_to_orig_addr, TR_seq_number, TR_metric,\n\
    \       TR_time)\n   where:\n      TR_from_orig_addr is the originator address\
    \ of a router that can\n      reach the router with originator address TR_to_orig_addr\
    \ in one\n      hop (note that this does not include a prefix length);\n     \
    \ TR_to_orig_addr is the originator address of a router that can be\n      reached\
    \ by the router with originator address TR_from_orig_addr in\n      one hop (note\
    \ that this does not include a prefix length);\n      TR_seq_number is the greatest\
    \ ANSN in any TC message received that\n      originated from the router with\
    \ originator address\n      TR_from_orig_addr (i.e., that contributed to the information\n\
    \      contained in this Tuple);\n      TR_metric is the neighbor metric from\
    \ the router with originator\n      address TR_from_orig_addr to the router with\
    \ originator address\n      TR_to_orig_addr;\n      TR_time specifies the time\
    \ at which this Tuple expires and MUST be\n      removed.\n"
- title: 10.3.  Routable Address Topology Set
  contents:
  - "10.3.  Routable Address Topology Set\n   A router's Routable Address Topology\
    \ Set records topology information\n   about the routable addresses within the\
    \ MANET, including via which\n   routers they may be reached.  It consists of\
    \ Routable Address\n   Topology Tuples:\n      (TA_from_orig_addr, TA_dest_addr,\
    \ TA_seq_number, TA_metric,\n       TA_time)\n   where:\n      TA_from_orig_addr\
    \ is the originator address of a router that can\n      reach the router with\
    \ routable address TA_dest_addr in one hop\n      (note that this does not include\
    \ a prefix length);\n      TA_dest_addr is a routable address of a router that\
    \ can be reached\n      by the router with originator address TA_from_orig_addr\
    \ in one\n      hop;\n      TA_seq_number is the greatest ANSN in any TC message\
    \ received that\n      originated from the router with originator address\n  \
    \    TA_from_orig_addr (i.e., that contributed to the information\n      contained\
    \ in this Tuple);\n      TA_metric is the neighbor metric from the router with\
    \ originator\n      address TA_from_orig_addr to the router with OLSRv2 interface\n\
    \      address TA_dest_addr;\n      TA_time specifies the time at which this Tuple\
    \ expires and MUST be\n      removed.\n"
- title: 10.4.  Attached Network Set
  contents:
  - "10.4.  Attached Network Set\n   A router's Attached Network Set records information\
    \ about networks\n   (which may be outside the MANET) attached to other routers\
    \ and their\n   routable addresses.  It consists of Attached Network Tuples:\n\
    \      (AN_orig_addr, AN_net_addr, AN_seq_number, AN_dist, AN_metric,\n      \
    \ AN_time)\n   where:\n      AN_orig_addr is the originator address of a router\
    \ that can act as\n      gateway to the network with network address AN_net_addr\
    \ (note that\n      this does not include a prefix length);\n      AN_net_addr\
    \ is the network address of an attached network that may\n      be reached via\
    \ the router with originator address AN_orig_addr;\n      AN_seq_number is the\
    \ greatest ANSN in any TC message received that\n      originated from the router\
    \ with originator address AN_orig_addr\n      (i.e., that contributed to the information\
    \ contained in this\n      Tuple);\n      AN_dist is the number of hops to the\
    \ network with network address\n      AN_net_addr from the router with originator\
    \ address AN_orig_addr;\n      AN_metric is the metric of the link from the router\
    \ with\n      originator address AN_orig_addr to the attached network with\n \
    \     address AN_net_addr;\n      AN_time specifies the time at which this Tuple\
    \ expires and MUST be\n      removed.\n"
- title: 10.5.  Routing Set
  contents:
  - "10.5.  Routing Set\n   A router's Routing Set records the first hop along a selected\
    \ path to\n   each destination for which any such path is known.  It consists\
    \ of\n   Routing Tuples:\n      (R_dest_addr, R_next_iface_addr, R_local_iface_addr,\
    \ R_dist,\n       R_metric)\n   where:\n      R_dest_addr is the network address\
    \ of the destination, either the\n      network address of an interface of a destination\
    \ router or the\n      network address of an attached network;\n      R_next_iface_addr\
    \ is the network address of the \"next hop\" on the\n      selected path to the\
    \ destination;\n      R_local_iface_addr is an address of the local interface\
    \ over which\n      an IP packet MUST be sent to reach the destination by the\
    \ selected\n      path.\n      R_dist is the number of hops on the selected path\
    \ to the\n      destination;\n      R_metric is the metric of the route to the\
    \ destination with\n      address R_dest_addr.\n   The Routing Set for a router\
    \ is derived from the contents of other\n   Protocol Sets of the router (the Link\
    \ Sets, the Neighbor Set, the\n   Router Topology Set, the Routable Address Topology\
    \ Set, the Attached\n   Network Set, and OPTIONAL use of the 2-Hop Sets).  The\
    \ Routing Set is\n   updated (Routing Tuples added or removed, or the complete\
    \ Routing Set\n   recalculated) when routing paths are calculated, based on changes\
    \ to\n   these other Protocol Sets.  Routing Tuples are not subject to timer-\n\
    \   based expiration.\n"
- title: 11.  Received Message Information Base
  contents:
  - "11.  Received Message Information Base\n   The Received Message Information Base,\
    \ defined by this specification,\n   records information required to ensure that\
    \ a message is processed at\n   most once and is forwarded at most once per OLSRv2\
    \ interface of a\n   router, using MPR flooding.  Messages are recorded using\
    \ their\n   \"signature\", consisting of their type, originator address, and\n\
    \   message sequence number.\n"
- title: 11.1.  Received Set
  contents:
  - "11.1.  Received Set\n   A router has a Received Set per OLSRv2 interface.  Each\
    \ Received Set\n   records the signatures of messages that have been received\
    \ over that\n   OLSRv2 interface.  Each consists of Received Tuples:\n      (RX_type,\
    \ RX_orig_addr, RX_seq_number, RX_time)\n   where:\n      RX_type is the received\
    \ Message Type;\n      RX_orig_addr is the originator address of the received\
    \ message\n      (note that this does not include a prefix length);\n      RX_seq_number\
    \ is the message sequence number of the received\n      message;\n      RX_time\
    \ specifies the time at which this Tuple expires and MUST be\n      removed.\n"
- title: 11.2.  Processed Set
  contents:
  - "11.2.  Processed Set\n   A router has a single Processed Set that records signatures\
    \ of\n   messages that have been processed by the router.  It consists of\n  \
    \ Processed Tuples:\n      (P_type, P_orig_addr, P_seq_number, P_time)\n   where:\n\
    \      P_type is the processed Message Type;\n      P_orig_addr is the originator\
    \ address of the processed message\n      (note that this does not include a prefix\
    \ length);\n      P_seq_number is the message sequence number of the processed\n\
    \      message;\n      P_time specifies the time at which this Tuple expires and\
    \ MUST be\n      removed.\n"
- title: 11.3.  Forwarded Set
  contents:
  - "11.3.  Forwarded Set\n   A router has a single Forwarded Set that records signatures\
    \ of\n   messages that have been forwarded by the router.  It consists of\n  \
    \ Forwarded Tuples:\n      (F_type, F_orig_addr, F_seq_number, F_time)\n   where:\n\
    \      F_type is the forwarded Message Type;\n      F_orig_addr is the originator\
    \ address of the forwarded message\n      (note that this does not include a prefix\
    \ length);\n      F_seq_number is the message sequence number of the forwarded\n\
    \      message;\n      F_time specifies the time at which this Tuple expires and\
    \ MUST be\n      removed.\n"
- title: 12.  Information Base Properties
  contents:
  - "12.  Information Base Properties\n   This section describes some additional properties\
    \ of Information\n   Bases and their contents.\n"
- title: 12.1.  Corresponding Protocol Tuples
  contents:
  - "12.1.  Corresponding Protocol Tuples\n   As part of this specification, in a\
    \ number of cases, there is a\n   natural correspondence from a Protocol Tuple\
    \ in one Protocol Set to a\n   single Protocol Tuple in another Protocol Set,\
    \ in the same or another\n   Information Base.  The latter Protocol Tuple is referred\
    \ to as\n   \"corresponding\" to the former Protocol Tuple.\n   Specific examples\
    \ of corresponding Protocol Tuples include:\n   o  There is a Local Interface\
    \ Tuple corresponding to each Link Tuple,\n      where the Link Tuple is in the\
    \ Link Set for a MANET interface and\n      the Local Interface Tuple represents\
    \ that MANET interface.\n   o  There is a Neighbor Tuple corresponding to each\
    \ Link Tuple that\n      has L_HEARD_time not EXPIRED, such that N_neighbor_addr_list\n\
    \      contains L_neighbor_iface_addr_list.\n   o  There is a Link Tuple (in the\
    \ Link Set in the same Interface\n      Information Base) corresponding to each\
    \ 2-Hop Tuple such that\n      L_neighbor_iface_addr_list = N2_neighbor_iface_addr_list.\n\
    \   o  There is a Neighbor Tuple corresponding to each 2-Hop Tuple, such\n   \
    \   that N_neighbor_addr_list contains N2_neighbor_iface_addr_list.\n      (This\
    \ is the Neighbor Tuple corresponding to the Link Tuple\n      corresponding to\
    \ the 2-Hop Tuple.)\n   o  There is an Advertising Remote Router Tuple corresponding\
    \ to each\n      Router Topology Tuple such that AR_orig_addr = TR_from_orig_addr.\n\
    \   o  There is an Advertising Remote Router Tuple corresponding to each\n   \
    \   Routable Address Topology Tuple such that AR_orig_addr =\n      TA_from_orig_addr.\n\
    \   o  There is an Advertising Remote Router Tuple corresponding to each\n   \
    \   Attached Network Tuple such that AR_orig_addr = AN_orig_addr.\n   o  There\
    \ is a Neighbor Tuple corresponding to each Routing Tuple such\n      that N_neighbor_addr_list\
    \ contains R_next_iface_addr.\n"
- title: 12.2.  Address Ownership
  contents:
  - "12.2.  Address Ownership\n   Addresses or network addresses with the following\
    \ properties are\n   considered as \"fully owned\" by a router when processing\
    \ a received\n   message:\n   o  Equaling its originator address; OR\n   o  Equaling\
    \ the O_orig_addr in an Originator Tuple; OR\n   o  Equaling or being a sub-range\
    \ of the I_local_iface_addr_list in a\n      Local Interface Tuple; OR\n   o \
    \ Equaling or being a sub-range of the IR_local_iface_addr in a\n      Removed\
    \ Interface Address Tuple; OR\n   o  Equaling an AL_net_addr in a Local Attached\
    \ Network Tuple.\n   Addresses or network addresses with the following properties\
    \ are\n   considered as \"partially owned\" (which may include being fully owned)\n\
    \   by a router when processing a received message:\n   o  Overlapping (equaling\
    \ or containing) its originator address; OR\n   o  Overlapping (equaling or containing)\
    \ the O_orig_addr in an\n      Originator Tuple; OR\n   o  Overlapping the I_local_iface_addr_list\
    \ in a Local Interface\n      Tuple; OR\n   o  Overlapping the IR_local_iface_addr\
    \ in a Removed Interface Address\n      Tuple; OR\n   o  Equaling or having as\
    \ a sub-range an AL_net_addr in a Local\n      Attached Network Tuple.\n"
- title: 13.  Packets and Messages
  contents:
  - "13.  Packets and Messages\n   The packet and message format used by this protocol\
    \ is defined in\n   [RFC5444].  Except as otherwise noted, options defined in\
    \ [RFC5444]\n   may be freely used, in particular alternative formats defined\
    \ by\n   packet, message, Address Block, and TLV flags.\n   This section describes\
    \ the usage of the packets and messages defined\n   in [RFC5444] by this specification\
    \ and the TLVs defined by, and used\n   in, this specification.\n"
- title: 13.1.  Messages
  contents:
  - "13.1.  Messages\n   Routers using this protocol exchange information through\
    \ messages.\n   The Message Types used by this protocol are the HELLO message\
    \ and the\n   TC message.  The HELLO message is defined by [RFC6130] and extended\n\
    \   by this specification (see Section 15).  The TC message is defined by\n  \
    \ this specification (see Section 16).\n"
- title: 13.2.  Packets
  contents:
  - "13.2.  Packets\n   One or more messages sent by a router at the same time SHOULD\
    \ be\n   combined into a single packet, subject to any constraints on maximum\n\
    \   packet size (such as derived from the MTU over a local single hop)\n   that\
    \ MAY be imposed.  These messages may have originated at the\n   sending router\
    \ or at another router and are being forwarded by the\n   sending router.  Messages\
    \ with different originating routers MAY be\n   combined for transmission within\
    \ the same packet.  Messages from\n   other protocols defined using [RFC5444],\
    \ including but not limited to\n   NHDP [RFC6130], MAY be combined for transmission\
    \ within the same\n   packet.  This specification does not define or use any contents\
    \ of\n   the Packet Header.\n   Forwarded messages MAY be jittered as described\
    \ in [RFC5148],\n   including the observation that the forwarding jitter of all\
    \ messages\n   received in a single packet SHOULD be the same.  The value of\n\
    \   MAXJITTER used in jittering a forwarded message MAY be based on\n   information\
    \ in that message (in particular any Message TLVs with Type\n   = INTERVAL_TIME\
    \ or Type = VALIDITY_TIME) or otherwise SHOULD be with\n   a maximum delay of\
    \ F_MAXJITTER.  A router MAY modify the jitter\n   applied to a message in order\
    \ to more efficiently combine messages in\n   packets, as long as the maximum\
    \ jitter is not exceeded.\n"
- title: 13.3.  TLVs
  contents:
  - "13.3.  TLVs\n   This specification defines two Message TLVs and four Address\
    \ Block\n   TLVs.\n   All references in this specification to TLVs that do not\
    \ indicate a\n   type extension assume Type Extension = 0.  TLVs in processed\
    \ messages\n   with a type extension that is neither zero as so assumed, nor a\n\
    \   specifically indicated non-zero type extension, are ignored.\n   Note that,\
    \ following [RFC5444] and network byte order, bits in an\n   octet are numbered\
    \ from 0 (most significant) to 7 (least\n   significant).\n"
- title: 13.3.1.  Message TLVs
  contents:
  - "13.3.1.  Message TLVs\n   The MPR_WILLING TLV is used in HELLO messages.  A message\
    \ MUST NOT\n   contain more than one MPR_WILLING TLV.\n   +-------------+--------------+--------------------------------------+\n\
    \   |     Type    | Value Length | Value                                |\n  \
    \ +-------------+--------------+--------------------------------------+\n   |\
    \ MPR_WILLING |   1 octet    | Bits 0-3 encode the parameter        |\n   |  \
    \           |              | WILL_FLOODING; bits 4-7 encode the   |\n   |    \
    \         |              | parameter WILL_ROUTING.              |\n   +-------------+--------------+--------------------------------------+\n\
    \                    Table 1: MPR_WILLING TLV Definition\n   The CONT_SEQ_NUM\
    \ TLV is used in TC messages.  A message MUST NOT\n   contain more than one CONT_SEQ_NUM\
    \ TLV.\n   +--------------+--------------+-------------------------------------+\n\
    \   |     Type     | Value Length | Value                               |\n  \
    \ +--------------+--------------+-------------------------------------+\n   |\
    \ CONT_SEQ_NUM |   2 octets   | The ANSN contained in the Neighbor  |\n   |  \
    \            |              | Information Base.                   |\n   +--------------+--------------+-------------------------------------+\n\
    \                   Table 2: CONT_SEQ_NUM TLV Definition\n"
- title: 13.3.2.  Address Block TLVs
  contents:
  - "13.3.2.  Address Block TLVs\n   The LINK_METRIC TLV is used in HELLO messages\
    \ and TC messages.  It\n   MAY use any type extension; only LINK_METRIC TLVs with\
    \ type extension\n   equal to LINK_METRIC_TYPE will be used by this specification.\
    \  An\n   address MUST NOT be associated with more than one link metric value\n\
    \   for any given type extension, kind (link or neighbor), and direction\n   using\
    \ this TLV.\n   +-------------+--------------+--------------------------------------+\n\
    \   |     Type    | Value Length | Value                                |\n  \
    \ +-------------+--------------+--------------------------------------+\n   |\
    \ LINK_METRIC |   2 octets   | Bits 0-3 indicate kind(s) and        |\n   |  \
    \           |              | direction(s); bits 4-7 indicate      |\n   |    \
    \         |              | exponent (b); and bits 8-15 indicate |\n   |      \
    \       |              | mantissa (a).                        |\n   +-------------+--------------+--------------------------------------+\n\
    \                    Table 3: LINK_METRIC TLV Definition\n   The exponent and\
    \ mantissa use the representation defined in\n   Section 6.  Each bit of the types\
    \ and directions sub-field, if set\n   ('1'), indicates that the link metric is\
    \ of the indicated kind and\n   direction.  Any combination of these bits MAY\
    \ be used.\n                   +-----+-----------------+-----------+\n       \
    \            | Bit |       Kind      | Direction |\n                   +-----+-----------------+-----------+\n\
    \                   |  0  |   Link metric   | Incoming  |\n                  \
    \ |  1  |   Link metric   | Outgoing  |\n                   |  2  | Neighbor metric\
    \ | Incoming  |\n                   |  3  | Neighbor metric | Outgoing  |\n  \
    \                 +-----+-----------------+-----------+\n               Table\
    \ 4: LINK_METRIC TLV Types and Directions\n   The MPR TLV is used in HELLO messages\
    \ and indicates that an address\n   with which it is associated is of a symmetric\
    \ 1-hop neighbor that has\n   been selected as an MPR.\n   +------+--------------+---------------------------------------------+\n\
    \   | Type | Value Length | Value                                       |\n  \
    \ +------+--------------+---------------------------------------------+\n   |\
    \ MPR  |   1 octet    | FLOODING indicates that the corresponding   |\n   |  \
    \    |              | address is of a neighbor selected as a      |\n   |    \
    \  |              | flooding MPR; ROUTING indicates that the    |\n   |      |\
    \              | corresponding address is of a neighbor      |\n   |      |  \
    \            | selected as a routing MPR; and FLOOD_ROUTE  |\n   |      |    \
    \          | indicates both (see Section 24.6).          |\n   +------+--------------+---------------------------------------------+\n\
    \                        Table 5: MPR TLV Definition\n   The NBR_ADDR_TYPE TLV\
    \ is used in TC messages.\n   +---------------+--------------+------------------------------------+\n\
    \   |      Type     | Value Length | Value                              |\n  \
    \ +---------------+--------------+------------------------------------+\n   |\
    \ NBR_ADDR_TYPE |   1 octet    | ORIGINATOR indicates that the      |\n   |  \
    \             |              | corresponding address (which MUST  |\n   |    \
    \           |              | have maximum prefix length) is an  |\n   |      \
    \         |              | originator address; ROUTABLE       |\n   |        \
    \       |              | indicates that the corresponding   |\n   |          \
    \     |              | network address is a routable      |\n   |            \
    \   |              | address of an interface; and       |\n   |              \
    \ |              | ROUTABLE_ORIG indicates that the   |\n   |               |\
    \              | corresponding address is both (see |\n   |               |  \
    \            | Section 24.6).                     |\n   +---------------+--------------+------------------------------------+\n\
    \                   Table 6: NBR_ADDR_TYPE TLV Definition\n   If an address is\
    \ both an originator address and a routable address,\n   then it may be associated\
    \ with either one Address Block TLV with Type\n   := NBR_ADDR_TYPE and Value :=\
    \ ROUTABLE_ORIG, or with two Address\n   Block TLVs with Type:= NBR_ADDR_TYPE,\
    \ one with Value := ORIGINATOR\n   and one with Value := ROUTABLE.\n   The GATEWAY\
    \ TLV is used in TC messages.  An address MUST NOT be\n   associated with more\
    \ than one hop count value using this TLV.\n     +---------+--------------+-------------------------------------+\n\
    \     |   Type  | Value Length | Value                               |\n     +---------+--------------+-------------------------------------+\n\
    \     | GATEWAY |   1 octet    | Number of hops to attached network. |\n     +---------+--------------+-------------------------------------+\n\
    \                      Table 7: GATEWAY TLV Definition\n   All address objects\
    \ included in a TC message according to this\n   specification MUST be associated\
    \ either with at least one TLV with\n   Type := NBR_ADDR_TYPE or with a TLV with\
    \ Type := GATEWAY, but not\n   both.  Any other address objects MAY be included\
    \ in Address Blocks in\n   a TC message but are ignored by this specification.\n"
- title: 14.  Message Processing and Forwarding
  contents:
  - "14.  Message Processing and Forwarding\n   This section describes the optimized\
    \ flooding operation (MPR\n   flooding) used when control messages, as instances\
    \ of [RFC5444], are\n   intended for MANET-wide distribution.  This flooding mechanism\n\
    \   defines when a received message is, or is not, processed and/or\n   forwarded.\n\
    \   This flooding mechanism is used by this protocol and MAY be used by\n   extensions\
    \ to this protocol that define, and hence own, other Message\n   Types, to manage\
    \ processing and/or forwarding of these messages.\n   This specification contains\
    \ elements (P_type, RX_type, F_type)\n   required only for such usage.\n   This\
    \ flooding mechanism is always used for TC messages (see\n   Section 16).  Received\
    \ HELLO messages (see Section 15) are, unless\n   invalid, always processed and\
    \ never forwarded by this flooding\n   mechanism.  They thus do not need to be\
    \ recorded in the Received\n   Message Information Base.\n   The processing selection\
    \ and forwarding mechanisms are designed to\n   only need to parse the Message\
    \ Header in order to determine whether a\n   message is to be processed and/or\
    \ forwarded and not to have to parse\n   the Message Body even if the message\
    \ is forwarded (but not\n   processed).  An implementation MAY only parse the\
    \ Message Body if\n   necessary or MAY always parse the Message Body and reject\
    \ the message\n   if it cannot be so parsed or any other error is identified.\n\
    \   An implementation MUST discard the message silently if it is unable\n   to\
    \ parse the Message Header or (if attempted) the Message Body, or if\n   a message\
    \ (other than a HELLO message) does not include a message\n   sequence number.\n"
- title: 14.1.  Actions When Receiving a Message
  contents:
  - "14.1.  Actions When Receiving a Message\n   On receiving, on an OLSRv2 interface,\
    \ a message of a type specified\n   to be using this mechanism, which includes\
    \ the TC messages defined in\n   this specification, a router MUST perform the\
    \ following:\n   1.  If the router recognizes from the originator address of the\n\
    \       message that the message is one that the receiving router itself\n   \
    \    originated (i.e., the message originator address is the\n       originator\
    \ address of this router or is an O_orig_addr in an\n       Originator Tuple),\
    \ then the message MUST be silently discarded.\n   2.  Otherwise:\n       1. \
    \ If the message is of a type that may be processed, then the\n           message\
    \ is considered for processing according to\n           Section 14.2.\n      \
    \ 2.  If the message is of a type that may be forwarded, AND:\n           +  <msg-hop-limit>\
    \ is present and <msg-hop-limit> > 1; AND\n           +  <msg-hop-count> is not\
    \ present or <msg-hop-count> < 255,\n           then the message is considered\
    \ for forwarding according to\n           Section 14.3.\n"
- title: 14.2.  Message Considered for Processing
  contents:
  - "14.2.  Message Considered for Processing\n   If a message (the \"current message\"\
    ) is considered for processing,\n   then the following tasks MUST be performed:\n\
    \   1.  If the sending address (i.e., the source address of the IP\n       datagram\
    \ containing the current message) does not match (taking\n       into account\
    \ any address prefix) a network address in an\n       L_neighbor_iface_addr_list\
    \ of a Link Tuple, with L_status =\n       SYMMETRIC, in the Link Set for the\
    \ OLSRv2 interface on which the\n       current message was received (the \"receiving\
    \ interface\"), then\n       processing the current message is OPTIONAL.  If the\
    \ current\n       message is not processed, then the following steps are not\n\
    \       carried out.\n   2.  If a Processed Tuple exists with:\n       *  P_type\
    \ = the Message Type of the current message; AND\n       *  P_orig_addr = the\
    \ originator address of the current message;\n          AND\n       *  P_seq_number\
    \ = the message sequence number of the current\n          message,\n       then\
    \ the current message MUST NOT be processed.\n   3.  Otherwise:\n       1.  Create\
    \ a Processed Tuple in the Processed Set with:\n           +  P_type := the Message\
    \ Type of the current message;\n           +  P_orig_addr := the originator address\
    \ of the current\n              message;\n           +  P_seq_number := the sequence\
    \ number of the current\n              message;\n           +  P_time := current\
    \ time + P_HOLD_TIME.\n       2.  Process the current message according to its\
    \ Message Type.\n           For a TC message, this is as defined in Section 16.3.\n"
- title: 14.3.  Message Considered for Forwarding
  contents:
  - "14.3.  Message Considered for Forwarding\n   If a message (the \"current message\"\
    ) is considered for forwarding,\n   then the following tasks MUST be performed:\n\
    \   1.  If the sending address (i.e., the source address of the IP\n       datagram\
    \ containing the current message) does not match (taking\n       into account\
    \ any address prefix) a network address in an\n       L_neighbor_iface_addr_list\
    \ of a Link Tuple, with L_status =\n       SYMMETRIC, in the Link Set for the\
    \ OLSRv2 interface on which the\n       current message was received (the \"receiving\
    \ interface\"), then\n       the current message MUST be silently discarded.\n\
    \   2.  Otherwise:\n       1.  If a Received Tuple exists in the Received Set\
    \ for the\n           receiving interface, with:\n           +  RX_type = the\
    \ Message Type of the current message; AND\n           +  RX_orig_addr = the originator\
    \ address of the current\n              message; AND\n           +  RX_seq_number\
    \ = the sequence number of the current\n              message,\n           then\
    \ the current message MUST be silently discarded.\n       2.  Otherwise:\n   \
    \        1.  Create a Received Tuple in the Received Set for the\n           \
    \    receiving interface with:\n               -  RX_type := the Message Type\
    \ of the current message;\n               -  RX_orig_addr := originator address\
    \ of the current\n                  message;\n               -  RX_seq_number\
    \ := sequence number of the current\n                  message;\n            \
    \   -  RX_time := current time + RX_HOLD_TIME.\n           2.  If a Forwarded\
    \ Tuple exists with:\n               -  F_type = the Message Type of the current\
    \ message; AND\n               -  F_orig_addr = the originator address of the\
    \ current\n                  message; AND\n               -  F_seq_number = the\
    \ sequence number of the current\n                  message,\n               then\
    \ the current message MUST be silently discarded.\n           3.  Otherwise, if\
    \ the sending address matches (taking account\n               of any address prefix),\
    \ any network address in an\n               L_neighbor_iface_addr_list of a Link\
    \ Tuple in the Link\n               Set for the receiving OLSRv2 interface that\
    \ has L_status\n               = SYMMETRIC and L_mpr_selector = true, then:\n\
    \               1.  Create a Forwarded Tuple in the Forwarded Set with:\n    \
    \               o  F_type := the Message Type of the current message;\n      \
    \             o  F_orig_addr := originator address of the current\n          \
    \            message;\n                   o  F_seq_number := sequence number of\
    \ the current\n                      message;\n                   o  F_time :=\
    \ current time + F_HOLD_TIME.\n               2.  The Message Header of the current\
    \ message is modified\n                   by:\n                   o  Decrement\
    \ <msg-hop-limit> in the Message Header by\n                      1; AND\n   \
    \                o  If present, increment <msg-hop-count> in the\n           \
    \           Message Header by 1.\n               3.  The message is transmitted\
    \ over all OLSRv2\n                   interfaces, as described in Section 13.\n\
    \           4.  Otherwise, the current message MUST be silently\n            \
    \   discarded.\n"
- title: 15.  HELLO Messages
  contents:
  - "15.  HELLO Messages\n   The HELLO Message Type is owned by NHDP [RFC6130], and\
    \ HELLO messages\n   are thus generated, transmitted, received, and processed\
    \ by NHDP.\n   This protocol, as permitted by [RFC6130], also uses HELLO messages,\n\
    \   including adding to HELLO message generation and implementing\n   additional\
    \ processing based on received HELLO messages.  HELLO\n   messages are not forwarded\
    \ by NHDP [RFC6130] or by OLSRv2.\n"
- title: 15.1.  HELLO Message Generation
  contents:
  - "15.1.  HELLO Message Generation\n   HELLO messages sent over OLSRv2 interfaces\
    \ are generated as defined\n   in [RFC6130] and then modified as described in\
    \ this section.  HELLO\n   messages sent on other MANET interfaces are not modified\
    \ by this\n   specification.\n   HELLO messages sent over OLSRv2 interfaces are\
    \ extended by adding the\n   following elements:\n   o  A message originator address,\
    \ recording this router's originator\n      address.  This MUST use a <msg-orig-addr>\
    \ element, unless:\n      *  The message specifies only a single local interface\
    \ address\n         (i.e., contains only one address object that is associated\
    \ with\n         an Address Block TLV with Type = LOCAL_IF and that has no\n \
    \        prefix length or a maximum prefix length) that will then be\n       \
    \  used as the message originator address; OR\n      *  The message does not include\
    \ any local interface network\n         addresses (i.e., has no address objects\
    \ associated with an\n         Address Block TLV with Type = LOCAL_IF), as permitted\
    \ by the\n         specification in [RFC6130], when the router that generated\
    \ the\n         HELLO message has only one interface address and will use that\n\
    \         as the sending address of the IP datagram in which the HELLO\n     \
    \    message is contained.  In this case, that address will be used\n        \
    \ as the message originator address.\n   o  A Message TLV with Type := MPR_WILLING\
    \ MUST be included.\n   o  The following cases associate Address Block TLVs with\
    \ one or more\n      addresses from a Link Tuple or a Neighbor Tuple if these\
    \ are\n      included in the HELLO message.  In each case, the TLV MUST be\n \
    \     associated with at least one address object for an address from\n      the\
    \ relevant Tuple; the TLV MAY be associated with more such\n      addresses (including\
    \ a copy of that address object, possibly not\n      itself associated with any\
    \ other indicated TLVs, in the same or a\n      different Address Block).  These\
    \ additional TLVs MUST NOT be\n      associated with any other addresses in a\
    \ HELLO message that will\n      be processed by NHDP [RFC6130].\n      *  For\
    \ each Link Tuple for which L_in_metric != UNKNOWN_METRIC and\n         for which\
    \ one or more addresses in its\n         L_neighbor_iface_addr_list are included\
    \ as address objects with\n         an associated Address Block TLV with Type\
    \ = LINK_STATUS and\n         Value = HEARD or Value = SYMMETRIC, at least one\
    \ of these\n         addresses MUST be associated with an Address Block TLV with\n\
    \         Type := LINK_METRIC indicating an incoming link metric with\n      \
    \   value L_in_metric.\n      *  For each Link Tuple for which L_out_metric !=\
    \ UNKNOWN_METRIC\n         and for which one or more addresses in its\n      \
    \   L_neighbor_iface_addr_list are included as address objects with\n        \
    \ an associated Address Block TLV with Type = LINK_STATUS and\n         Value\
    \ = SYMMETRIC, at least one of these addresses MUST be\n         associated with\
    \ an Address Block TLV with Type := LINK_METRIC\n         indicating an outgoing\
    \ link metric with value L_out_metric.\n      *  For each Neighbor Tuple for which\
    \ N_symmetric = true and for\n         which one or more addresses in its N_neighbor_addr_list\
    \ are\n         included as address objects with an associated Address Block\n\
    \         TLV with Type = LINK_STATUS or Type = OTHER_NEIGHB and Value =\n   \
    \      SYMMETRIC, at least one of these addresses MUST be associated\n       \
    \  with an Address Block TLV with Type := LINK_METRIC indicating\n         an\
    \ incoming neighbor metric with value N_in_metric.\n      *  For each Neighbor\
    \ Tuple for which N_symmetric = true and for\n         which one or more addresses\
    \ in its N_neighbor_addr_list are\n         included as address objects with an\
    \ associated Address Block\n         TLV with Type = LINK_STATUS or Type = OTHER_NEIGHB\
    \ and Value =\n         SYMMETRIC, at least one of these addresses MUST be associated\n\
    \         with an Address Block TLV with Type := LINK_METRIC indicating\n    \
    \     an outgoing neighbor metric with value N_out_metric.\n      *  For each\
    \ Neighbor Tuple with N_flooding_mpr = true and for\n         which one or more\
    \ network addresses in its N_neighbor_addr_list\n         are included as address\
    \ objects in the HELLO message with an\n         associated Address Block TLV\
    \ with Type = LINK_STATUS and Value\n         = SYMMETRIC, at least one of these\
    \ addresses MUST be associated\n         with an Address Block TLV with Type :=\
    \ MPR and Value :=\n         FLOODING or Value := FLOOD_ROUTE.\n      *  For each\
    \ Neighbor Tuple with N_routing_mpr = true and for which\n         one or more\
    \ network addresses in its N_neighbor_addr_list are\n         included as address\
    \ objects in the HELLO message with an\n         associated Address Block TLV\
    \ with Type = LINK_STATUS and Value\n         = SYMMETRIC, at least one of these\
    \ addresses MUST be associated\n         with an Address Block TLV with Type :=\
    \ MPR and Value := ROUTING\n         or Value := FLOOD_ROUTE.\n"
- title: 15.2.  HELLO Message Transmission
  contents:
  - "15.2.  HELLO Message Transmission\n   HELLO messages are scheduled and transmitted\
    \ by NHDP [RFC6130].  This\n   protocol MAY require that an additional HELLO message\
    \ be sent on each\n   OLSRv2 interface when either of the router's sets of MPRs\
    \ changes, in\n   addition to the cases specified in [RFC6130] and subject to\
    \ the\n   constraints specified in [RFC6130] (notably on minimum HELLO message\n\
    \   transmission intervals).\n"
- title: 15.3.  HELLO Message Processing
  contents:
  - "15.3.  HELLO Message Processing\n   When received on an OLSRv2 interface, HELLO\
    \ messages are made\n   available to this protocol in two ways, both as permitted\
    \ by\n   [RFC6130]:\n   o  Such received HELLO messages MUST be made available\
    \ to this\n      protocol on reception, which allows them to be discarded before\n\
    \      being processed by NHDP [RFC6130], for example, if the information\n  \
    \    added to the HELLO message by this specification is inconsistent.\n   o \
    \ Such received HELLO messages MUST be made available to OLSRv2\n      after NHDP\
    \ [RFC6130] has completed its processing thereof, unless\n      discarded as malformed\
    \ by NHDP, for processing by OLSRv2.\n"
- title: 15.3.1.  HELLO Message Discarding
  contents:
  - "15.3.1.  HELLO Message Discarding\n   In addition to the reasons specified in\
    \ [RFC6130] for discarding a\n   HELLO message on reception, a HELLO message received\
    \ on an OLSRv2\n   interface MUST be discarded before processing by NHDP [RFC6130]\
    \ or\n   this specification if it:\n   o  Has more than one Message TLV with Type\
    \ = MPR_WILLING.\n   o  Has a message originator address, or a network address\n\
    \      corresponding to an address object associated with an Address\n      Block\
    \ TLV with Type = LOCAL_IF, that is partially owned by this\n      router.  (Some\
    \ of these cases are already excluded by [RFC6130].)\n   o  Includes any address\
    \ object associated with an Address Block TLV\n      with Type = LINK_STATUS or\
    \ Type = OTHER_NEIGHB that overlaps the\n      message's originator address.\n\
    \   o  Contains any address that will be processed by NHDP [RFC6130] that\n  \
    \    is associated, using the same or different address objects, with\n      two\
    \ different values of link metric with the same kind and\n      direction using\
    \ a TLV with Type = LINK_METRIC and Type Extension =\n      LINK_METRIC_TYPE.\
    \  This also applies to different addresses that\n      are both of the OLSRv2\
    \ interface on which the HELLO message was\n      received.\n   o  Contains any\
    \ address object associated with an Address Block TLV\n      with Type = MPR that\
    \ is not also associated with an Address Block\n      TLV with Type = LINK_STATUS\
    \ and Value = SYMMETRIC (including using\n      a different copy of that address\
    \ object in the same or a different\n      Address Block).\n"
- title: 15.3.2.  HELLO Message Usage
  contents:
  - "15.3.2.  HELLO Message Usage\n   HELLO messages are first processed as specified\
    \ in [RFC6130].  That\n   processing includes identifying (or creating) a Link\
    \ Tuple and a\n   Neighbor Tuple corresponding to the originator of the HELLO\
    \ message\n   (the \"current Link Tuple\" and the \"current Neighbor Tuple\").\
    \  After\n   this, the following processing MUST also be performed if the HELLO\n\
    \   message is received on an OLSRv2 interface and contains a TLV with\n   Type\
    \ = MPR_WILLING:\n   1.  If the HELLO message has a well-defined message originator\n\
    \       address, i.e., has an <msg-orig-addr> element or has zero or one\n   \
    \    network addresses associated with a TLV with Type = LOCAL_IF:\n       1.\
    \  Remove any Neighbor Tuple, other than the current Neighbor\n           Tuple,\
    \ with N_orig_addr = message originator address, taking\n           any consequent\
    \ action (including removing one or more Link\n           Tuples) as specified\
    \ in [RFC6130].\n       2.  The current Link Tuple is then updated according to:\n\
    \           1.  Update L_in_metric and L_out_metric as described in\n        \
    \       Section 15.3.2.1;\n           2.  Update L_mpr_selector as described in\
    \ Section 15.3.2.3.\n       3.  The current Neighbor Tuple is then updated according\
    \ to:\n           1.  N_orig_addr := message originator address;\n           2.\
    \  Update N_in_metric and N_out_metric as described in\n               Section\
    \ 15.3.2.1;\n           3.  Update N_will_flooding and N_will_routing as described\
    \ in\n               Section 15.3.2.2;\n           4.  Update N_mpr_selector as\
    \ described in Section 15.3.2.3.\n       4.  All 2-Hop Tuples that were updated\
    \ as described in [RFC6130]\n           are then updated according to:\n     \
    \      1.  Update N2_in_metric and N2_out_metric as described in\n           \
    \    Section 15.3.2.1.\n   2.  If there are any changes to the router's Information\
    \ Bases, then\n       perform the processing defined in Section 17.\n"
- title: 15.3.2.1.  Updating Metrics
  contents:
  - "15.3.2.1.  Updating Metrics\n   For each address in a received HELLO message\
    \ with an associated TLV\n   with Type = LINK_STATUS and Value = HEARD or Value\
    \ = SYMMETRIC, an\n   incoming (to the message originator) link metric value is\
    \ defined.\n   If the HELLO message contains a TLV with Type = LINK_METRIC and\
    \ Type\n   Extension = LINK_METRIC_TYPE that associates that address value with\n\
    \   a metric value of the appropriate kind (link) and direction\n   (incoming)\
    \ of metric, then the incoming link metric is that metric\n   value; otherwise,\
    \ the incoming link metric is defined as\n   UNKNOWN_METRIC.\n   For each address\
    \ in a received HELLO message with an associated TLV\n   with Type = LINK_STATUS\
    \ and Value = SYMMETRIC, an outgoing (from the\n   message originator) link metric\
    \ value is defined.  If the HELLO\n   message contains a TLV with Type = LINK_METRIC\
    \ and Type Extension =\n   LINK_METRIC_TYPE that associates that address value\
    \ with a metric\n   value of the appropriate kind (link) and direction (outgoing)\
    \ of\n   metric, then the outgoing link metric is that metric value;\n   otherwise,\
    \ the outgoing link metric is defined as UNKNOWN_METRIC.\n   For each address\
    \ in a received HELLO message with an associated TLV\n   with Type = LINK_STATUS\
    \ or Type = OTHER_NEIGHB and Value = SYMMETRIC,\n   an incoming (to the message\
    \ originator) neighbor metric value is\n   defined.  If the HELLO message contains\
    \ a TLV with Type = LINK_METRIC\n   and Type Extension = LINK_METRIC_TYPE that\
    \ associates that address\n   value with a metric value of the appropriate kind\
    \ (neighbor) and\n   direction (incoming) of metric, then the incoming neighbor\
    \ metric is\n   that metric value; otherwise, the incoming neighbor metric is\
    \ defined\n   as UNKNOWN_METRIC.\n   For each address in a received HELLO message\
    \ with an associated TLV\n   with Type = LINK_STATUS or Type = OTHER_NEIGHB and\
    \ Value = SYMMETRIC,\n   an outgoing (from the message originator) neighbor metric\
    \ value is\n   defined.  If the HELLO message contains a TLV with Type = LINK_METRIC\n\
    \   and Type Extension = LINK_METRIC_TYPE that associates that address\n   value\
    \ with a metric value of the appropriate kind (neighbor) and\n   direction (outgoing)\
    \ of metric, then the outgoing neighbor metric is\n   that metric value; otherwise,\
    \ the outgoing neighbor metric is defined\n   as UNKNOWN_METRIC.\n   The link\
    \ metric elements L_in_metric and L_out_metric in a Link Tuple\n   are updated\
    \ according to the following:\n   o  For any Link Tuple, L_in_metric MAY be set\
    \ to any representable\n      value by a process outside this specification at\
    \ any time.\n      L_in_metric MUST be so set whenever L_status becomes equal\
    \ to\n      HEARD or SYMMETRIC (if no other value is available, then the value\n\
    \      MAXIMUM_METRIC MUST be used).  Setting L_in_metric MAY use\n      information\
    \ based on the receipt of a packet including a HELLO\n      message that causes\
    \ the creation or updating of the Link Tuple.\n   o  When, as specified in [RFC6130],\
    \ a Link Tuple is updated (possibly\n      immediately after being created) due\
    \ to the receipt of a HELLO\n      message, if L_status = SYMMETRIC, then L_out_metric\
    \ is set equal\n      to the incoming link metric for any included address of\
    \ the\n      interface on which the HELLO message was received.  (Note that the\n\
    \      rules for discarding HELLO messages in Section 15.3.1 make this\n     \
    \ value unambiguous.)  If there is any such address, but no such\n      link metric,\
    \ then L_out_metric is set to UNKNOWN_METRIC.\n   The neighbor metric elements\
    \ N_in_metric and N_out_metric in a\n   Neighbor Tuple are updated according to\
    \ Section 17.3.\n   The metric elements N2_in_metric and N2_out_metric in any\
    \ 2-Hop Tuple\n   updated as defined in [RFC6130] are updated to equal the incoming\n\
    \   neighbor metric and outgoing neighbor metric, respectively,\n   associated\
    \ with the corresponding N2_2hop_addr.  If there are no such\n   metrics, then\
    \ these elements are set to UNKNOWN_METRIC.\n"
- title: 15.3.2.2.  Updating Willingness
  contents:
  - "15.3.2.2.  Updating Willingness\n   N_will_flooding and N_will_routing in the\
    \ current Neighbor Tuple are\n   updated using the Message TLV with Type = MPR_WILLING\
    \ (note that this\n   must be present) as follows:\n   o  N_will_flooding := bits\
    \ 0-3 of the value of that TLV; AND\n   o  N_will_routing := bits 4-7 of the value\
    \ of that TLV.\n   (Each being in the range 0 to 15, i.e., WILL_NEVER to WILL_ALWAYS.)\n"
- title: 15.3.2.3.  Updating MPR Selector Status
  contents:
  - "15.3.2.3.  Updating MPR Selector Status\n   L_mpr_selector is updated as follows:\n\
    \   1.  If a router finds an address object representing any of its\n       relevant\
    \ local interface network addresses (i.e., those contained\n       in the I_local_iface_addr_list\
    \ of an OLSRv2 interface) with an\n       associated Address Block TLV with Type\
    \ = MPR and Value = FLOODING\n       or Value = FLOOD_ROUTE in the HELLO message\
    \ (indicating that the\n       originating router has selected the receiving router\
    \ as a\n       flooding MPR), then, for the current Link Tuple:\n       *  L_mpr_selector\
    \ := true.\n   2.  Otherwise (i.e., if no such address object and Address Block\
    \ TLV\n       was found), if a router finds an address object representing any\n\
    \       of its relevant local interface network addresses (i.e., those\n     \
    \  contained in the I_local_iface_addr_list of an OLSRv2 interface)\n       with\
    \ an associated Address Block TLV with Type = LINK_STATUS and\n       Value =\
    \ SYMMETRIC in the HELLO message, then, for the current\n       Link Tuple:\n\
    \       *  L_mpr_selector := false.\n   N_mpr_selector is updated as follows:\n\
    \   1.  If a router finds an address object representing any of its\n       relevant\
    \ local interface network addresses (those contained in\n       the I_local_iface_addr_list\
    \ of an OLSRv2 interface) with an\n       associated Address Block TLV with Type\
    \ = MPR and Value = ROUTING\n       or Value = FLOOD_ROUTE in the HELLO message\
    \ (indicating that the\n       originating router has selected the receiving router\
    \ as a routing\n       MPR), then, for the current Neighbor Tuple:\n       * \
    \ N_mpr_selector := true;\n       *  N_advertised := true.\n   2.  Otherwise (i.e.,\
    \ if no such address object and Address Block TLV\n       was found), if a router\
    \ finds an address object representing any\n       of its relevant local interface\
    \ network addresses (those\n       contained in the I_local_iface_addr_list of\
    \ an OLSRv2 interface)\n       with an associated Address Block TLV with Type\
    \ = LINK_STATUS and\n       Value = SYMMETRIC in the HELLO message, then, for\
    \ the current\n       Neighbor Tuple:\n       *  N_mpr_selector := false;\n  \
    \     *  The router MAY also set N_advertised := false.\n"
- title: 16.  TC Messages
  contents:
  - "16.  TC Messages\n   This protocol defines, and hence owns, the TC Message Type\
    \ (see\n   Section 24).  Thus, as specified in [RFC5444], this protocol\n   generates\
    \ and transmits all TC messages, receives all TC messages,\n   and is responsible\
    \ for determining whether and how each TC message is\n   to be processed (updating\
    \ the Topology Information Base) and/or\n   forwarded, according to this specification.\n"
- title: 16.1.  TC Message Generation
  contents:
  - "16.1.  TC Message Generation\n   A TC message is a message as defined in [RFC5444].\
    \  A generated TC\n   message MUST contain the following elements as defined in\
    \ [RFC5444]:\n   o  A message originator address, recording this router's originator\n\
    \      address.  This MUST use a <msg-orig-addr> element.\n   o  <msg-seq-num>\
    \ element containing the message sequence number.\n   o  A <msg-hop-limit> element,\
    \ containing TC_HOP_LIMIT.  A router MAY\n      use the same or different values\
    \ of TC_HOP_LIMIT in its TC\n      messages (see Section 5.4.7).\n   o  A <msg-hop-count>\
    \ element, containing zero, if the message\n      contains a TLV with either Type\
    \ = VALIDITY_TIME or Type =\n      INTERVAL_TIME (as specified in [RFC5497]) indicating\
    \ more than one\n      time value according to distance.  A TC message MAY contain\
    \ such a\n      <msg-hop-count> element even if it does not need to.\n   o  A\
    \ single Message TLV with Type := CONT_SEQ_NUM and Value := ANSN\n      from the\
    \ Neighbor Information Base.  If the TC message is\n      complete, then this\
    \ Message TLV MUST have Type Extension :=\n      COMPLETE; otherwise, it MUST\
    \ have Type Extension := INCOMPLETE.\n      (Exception: a TC message MAY omit\
    \ such a Message TLV if the TC\n      message does not include any address objects\
    \ with an associated\n      Address Block TLV with Type = NBR_ADDR_TYPE or Type\
    \ = GATEWAY.)\n   o  A single Message TLV with Type := VALIDITY_TIME, as specified\
    \ in\n      [RFC5497].  If all TC messages are sent with the same hop limit,\n\
    \      then this TLV MUST have a value encoding the period T_HOLD_TIME.\n    \
    \  If TC messages are sent with different hop limits (more than one\n      value\
    \ of TC_HOP_LIMIT), then this TLV MUST specify times that vary\n      with the\
    \ number of hops appropriate to the chosen pattern of TC\n      message hop limits,\
    \ as specified in [RFC5497]; these times SHOULD\n      be appropriate multiples\
    \ of T_HOLD_TIME.  The options included in\n      [RFC5497] for representing zero\
    \ and infinite times MUST NOT be\n      used.\n   o  If the TC message is complete,\
    \ all network addresses that are the\n      N_orig_addr of a Neighbor Tuple with\
    \ N_advertised = true, MUST be\n      represented by address objects in one or\
    \ more Address Blocks.  If\n      the TC message is incomplete, then any such\
    \ address objects MAY be\n      included.  At least one copy of each such address\
    \ object that is\n      included MUST be associated with an Address Block TLV\
    \ with Type :=\n      NBR_ADDR_TYPE and Value := ORIGINATOR or with Value :=\n\
    \      ROUTABLE_ORIG if that address object is also to be associated with\n  \
    \    Value = ROUTABLE.\n   o  If the TC message is complete, all routable addresses\
    \ that are in\n      the N_neighbor_addr_list of a Neighbor Tuple with N_advertised\
    \ =\n      true MUST be represented by address objects in one or more Address\n\
    \      Blocks.  If the TC message is incomplete, then any such address\n     \
    \ objects MAY be included.  At least one copy of each such address\n      object\
    \ MUST be associated with an Address Block TLV with Type =\n      NBR_ADDR_TYPE\
    \ and Value = ROUTABLE or with Value = ROUTABLE_ORIG\n      if also to be associated\
    \ with Value = ORIGINATOR.  At least one\n      copy of each such address object\
    \ MUST be associated with an\n      Address Block TLV with Type = LINK_METRIC\
    \ and Type Extension =\n      LINK_METRIC_TYPE indicating an outgoing neighbor\
    \ metric with value\n      equal to the corresponding N_out_metric.\n   o  If\
    \ the TC message is complete, all network addresses that are the\n      AL_net_addr\
    \ of a Local Attached Network Tuple MUST be represented\n      by address objects\
    \ in one or more Address Blocks.  If the TC\n      message is incomplete, then\
    \ any such address objects MAY be\n      included.  At least one copy of each\
    \ such address object MUST be\n      associated with an Address Block TLV with\
    \ Type := GATEWAY and\n      Value := AN_dist.  At least one copy of each such\
    \ address object\n      MUST be associated with an Address Block TLV with Type\
    \ =\n      LINK_METRIC and Type Extension = LINK_METRIC_TYPE indicating an\n \
    \     outgoing neighbor metric equal to the corresponding AL_metric.\n   A TC\
    \ message MAY contain:\n   o  A single Message TLV with Type := INTERVAL_TIME,\
    \ as specified in\n      [RFC5497].  If all TC messages are sent with the same\
    \ hop limit,\n      then this TLV MUST have a value encoding the period TC_INTERVAL.\n\
    \      If TC messages are sent with different hop limits, then this TLV\n    \
    \  MUST specify times that vary with the number of hops appropriate\n      to\
    \ the chosen pattern of TC message hop limits, as specified in\n      [RFC5497];\
    \ these times MUST be appropriate multiples of\n      TC_INTERVAL.  The options\
    \ included in [RFC5497] for representing\n      zero and infinite times MUST NOT\
    \ be used.\n"
- title: 16.2.  TC Message Transmission
  contents:
  - "16.2.  TC Message Transmission\n   A router with one or more OLSRv2 interfaces,\
    \ and with any Neighbor\n   Tuples with N_advertised = true, or with a non-empty\
    \ Local Attached\n   Network Set MUST generate TC messages.  A router that does\
    \ not have\n   such information to advertise MUST also generate \"empty\" TC messages\n\
    \   for a period A_HOLD_TIME after it last generated a non-empty TC\n   message.\n\
    \   Complete TC messages are generated and transmitted periodically on\n   all\
    \ OLSRv2 interfaces, with a default interval between two\n   consecutive TC message\
    \ transmissions by the same router of\n   TC_INTERVAL.\n   TC messages MAY be\
    \ generated in response to a change in the\n   information that they are to advertise,\
    \ indicated by a change in the\n   ANSN in the Neighbor Information Base.  In\
    \ this case, a router MAY\n   send a complete TC message and, if so, MAY restart\
    \ its TC message\n   schedule.  Alternatively, a router MAY send an incomplete\
    \ TC message\n   with at least the newly advertised network addresses (i.e., not\n\
    \   previously, but now, an N_orig_addr or in an N_neighbor_addr_list in\n   a\
    \ Neighbor Tuple with N_advertised = true or an AL_net_addr) in its\n   Address\
    \ Blocks, with associated Address Block TLV(s).  Note that a\n   router cannot\
    \ report removal of advertised content using an\n   incomplete TC message.\n \
    \  When sending a TC message in response to a change of advertised\n   network\
    \ addresses, a router MUST respect a minimum interval of\n   TC_MIN_INTERVAL between\
    \ sending TC messages (complete or incomplete)\n   and a maximum interval of TC_INTERVAL\
    \ between sending complete TC\n   messages.  Thus, a router MUST NOT send an incomplete\
    \ TC message if\n   within TC_MIN_INTERVAL of the next scheduled time to send\
    \ a complete\n   TC message.\n   The generation of TC messages, whether scheduled\
    \ or triggered by a\n   change of contents, MAY be jittered as described in [RFC5148].\
    \  The\n   values of MAXJITTER used MUST be:\n   o  TP_MAXJITTER for periodic\
    \ TC message generation;\n   o  TT_MAXJITTER for responsive TC message generation.\n"
- title: 16.3.  TC Message Processing
  contents:
  - "16.3.  TC Message Processing\n   On receiving a TC message on an OLSRv2 interface,\
    \ the receiving\n   router MUST then follow the processing and forwarding procedures\n\
    \   defined in Section 14.\n   If the message is considered for processing (Section\
    \ 14.2), then a\n   router MUST first check if the message is invalid for processing\
    \ by\n   this router, as defined in Section 16.3.1.  A router MAY make a\n   similar\
    \ check before considering a message for forwarding; it MUST\n   check the aspects\
    \ that apply to elements in the Message Header.\n   If the TC message is not invalid,\
    \ then the processing specific to TC\n   Message Type, described in Section 16.3.2,\
    \ MUST be applied.  This\n   will update its appropriate Interface Information\
    \ Bases and its\n   Router Information Base.  Following this, if there are any\
    \ changes in\n   these Information Bases, then the processing in Section 17 MUST\
    \ be\n   performed.\n"
- title: 16.3.1.  TC Message Discarding
  contents:
  - "16.3.1.  TC Message Discarding\n   A received TC message is invalid for processing\
    \ by this router if the\n   message:\n   o  Has an address length specified in\
    \ the Message Header that is not\n      equal to the length of the addresses used\
    \ by this router.\n   o  Does not include a message originator address and a message\n\
    \      sequence number.\n   o  Does not include a hop count and contains a multi-value\
    \ TLV with\n      Type = VALIDITY_TIME or Type = INTERVAL_TIME, as defined in\n\
    \      [RFC5497].\n   o  Does not have exactly one Message TLV with Type = VALIDITY_TIME.\n\
    \   o  Has more than one Message TLV with Type = INTERVAL_TIME.\n   o  Does not\
    \ have a Message TLV with Type = CONT_SEQ_NUM and Type\n      Extension = COMPLETE\
    \ or Type Extension = INCOMPLETE and contains\n      at least one address object\
    \ associated with an Address Block TLV\n      with Type = NBR_ADDR_TYPE or Type\
    \ = GATEWAY.\n   o  Has more than one Message TLV with Type = CONT_SEQ_NUM and\
    \ Type\n      Extension = COMPLETE or Type Extension = INCOMPLETE.\n   o  Has\
    \ a message originator address that is partially owned by this\n      router.\n\
    \   o  Includes any address object with a prefix length that is not\n      maximal\
    \ (equal to the address length, in bits), associated with an\n      Address Block\
    \ TLV with Type = NBR_ADDR_TYPE and Value = ORIGINATOR\n      or Value = ROUTABLE_ORIG.\n\
    \   o  Includes any address object that represents a non-routable\n      address,\
    \ associated with an Address Block TLV with Type =\n      NBR_ADDR_TYPE and Value\
    \ = ROUTABLE or Value = ROUTABLE_ORIG.\n   o  Includes any address object associated\
    \ with an Address Block TLV\n      with Type = NBR_ADDR_TYPE or Type = GATEWAY\
    \ that also represents\n      the message's originator address.\n   o  Includes\
    \ any address object (including different copies of an\n      address object in\
    \ the same or different Address Blocks) that is\n      associated with an Address\
    \ Block TLV with Type = NBR_ADDR_TYPE or\n      Type = GATEWAY that is also associated\
    \ with more than one outgoing\n      neighbor metric using a TLV with Type = LINK_METRIC\
    \ and Type\n      Extension = LINK_METRIC_TYPE.\n   o  Associates any address\
    \ object (including different copies of an\n      address object in the same or\
    \ different Address Blocks) with more\n      than one single hop count value using\
    \ one or more Address Block\n      TLV(s) with Type = GATEWAY.\n   o  Associates\
    \ any address object (including different copies of an\n      address object in\
    \ the same or different Address Blocks) with\n      Address Block TLVs with Type\
    \ = NBR_ADDR_TYPE and Type = GATEWAY.\n   A router MAY recognize additional reasons\
    \ for identifying that a\n   message is invalid.  An invalid message MUST be silently\
    \ discarded,\n   without updating the router's Information Bases.\n   Note that\
    \ a router that acts inconsistently, for example, rejecting\n   TC messages \"\
    at random\", may cause parts of the network to not be\n   able to communicate\
    \ with other parts of the network.  It is\n   RECOMMENDED that such \"additional\
    \ reasons for identifying that a\n   message is invalid\" be a consistent network-wide\
    \ policy (e.g., as\n   part of a security policy), implemented on all participating\
    \ routers.\n"
- title: 16.3.2.  TC Message Processing Definitions
  contents:
  - "16.3.2.  TC Message Processing Definitions\n   When, according to Section 14.2,\
    \ a TC message is to be \"processed\n   according to its type\", this means that:\n\
    \   o  If the TC message contains a Message TLV with Type = CONT_SEQ_NUM\n   \
    \   and Type Extension = COMPLETE, then processing according to\n      Section\
    \ 16.3.3 and then according to Section 16.3.4 is carried\n      out.\n   o  If\
    \ the TC message contains a Message TLV with Type = CONT_SEQ_NUM\n      and Type\
    \ Extension = INCOMPLETE, then only processing according to\n      Section 16.3.3\
    \ is carried out.\n   For the purposes of the TC message processing in Section\
    \ 16.3.3 and\n   Section 16.3.4:\n   o  \"validity time\" is calculated from a\
    \ VALIDITY_TIME Message TLV in\n      the TC message according to the specification\
    \ in [RFC5497].  All\n      information in the TC message has the same validity\
    \ time.\n   o  \"received ANSN\" is defined as being the value of a Message TLV\n\
    \      with Type = CONT_SEQ_NUM.\n   o  \"associated metric value\" is defined\
    \ for any address in the TC\n      message as being either the outgoing neighbor\
    \ metric value\n      indicated by a TLV with Type = LINK_METRIC and Type Extension\
    \ =\n      LINK_METRIC_TYPE that is associated with any address object in the\n\
    \      TC message that is equal to that address or as UNKNOWN_METRIC\n      otherwise.\
    \  (Note that the rules in Section 16.3.1 make this\n      definition unambiguous.)\n\
    \   o  Comparisons of sequence numbers are carried out as specified in\n     \
    \ Section 21.\n"
- title: 16.3.3.  Initial TC Message Processing
  contents:
  - "16.3.3.  Initial TC Message Processing\n   The TC message is processed as follows:\n\
    \   1.  The Advertising Remote Router Set is updated according to\n       Section\
    \ 16.3.3.1.  If the TC message is indicated as discarded in\n       that processing,\
    \ then the following steps are not carried out.\n   2.  The Router Topology Set\
    \ is updated according to Section 16.3.3.2.\n   3.  The Routable Address Topology\
    \ Set is updated according to\n       Section 16.3.3.3.\n   4.  The Attached Network\
    \ Set is updated according to\n       Section 16.3.3.4.\n"
- title: 16.3.3.1.  Populating the Advertising Remote Router Set
  contents:
  - "16.3.3.1.  Populating the Advertising Remote Router Set\n   The router MUST update\
    \ its Advertising Remote Router Set as follows:\n   1.  If there is an Advertising\
    \ Remote Router Tuple with:\n       *  AR_orig_addr = message originator address;\
    \ AND\n       *  AR_seq_number > received ANSN,\n       then the TC message MUST\
    \ be discarded.\n   2.  Otherwise:\n       1.  If there is no Advertising Remote\
    \ Router Tuple such that:\n           +  AR_orig_addr = message originator address;\n\
    \           then create an Advertising Remote Router Tuple with:\n           +\
    \  AR_orig_addr := message originator address.\n       2.  This Advertising Remote\
    \ Router Tuple (existing or new) is\n           then modified as follows:\n  \
    \         +  AR_seq_number := received ANSN;\n           +  AR_time := current\
    \ time + validity time.\n"
- title: 16.3.3.2.  Populating the Router Topology Set
  contents:
  - "16.3.3.2.  Populating the Router Topology Set\n   The router MUST update its\
    \ Router Topology Set as follows:\n   1.  For each address (henceforth, advertised\
    \ address) that\n       corresponds to one or more address objects with an associated\n\
    \       Address Block TLV with Type = NBR_ADDR_TYPE and Value =\n       ORIGINATOR\
    \ or Value = ROUTABLE_ORIG and that is not partially\n       owned by this router,\
    \ perform the following processing:\n       1.  If the associated metric is UNKNOWN_METRIC,\
    \ then remove any\n           Router Topology Tuple such that:\n           + \
    \ TR_from_orig_addr = message originator address; AND\n           +  TR_to_orig_addr\
    \ = advertised address.\n       2.  Otherwise, if there is no Router Topology\
    \ Tuple such that:\n           +  TR_from_orig_addr = message originator address;\
    \ AND\n           +  TR_to_orig_addr = advertised address,\n           then create\
    \ a new Router Topology Tuple with:\n           +  TR_from_orig_addr := message\
    \ originator address;\n           +  TR_to_orig_addr := advertised address.\n\
    \       3.  This Router Topology Tuple (existing or new) is then modified\n  \
    \         as follows:\n           +  TR_seq_number := received ANSN;\n       \
    \    +  TR_metric := associated link metric;\n           +  TR_time := current\
    \ time + validity time.\n"
- title: 16.3.3.3.  Populating the Routable Address Topology Set
  contents:
  - "16.3.3.3.  Populating the Routable Address Topology Set\n   The router MUST update\
    \ its Routable Address Topology Set as follows:\n   1.  For each network address\
    \ (henceforth, advertised address) that\n       corresponds to one or more address\
    \ objects with an associated\n       Address Block TLV with Type = NBR_ADDR_TYPE\
    \ and Value = ROUTABLE\n       or Value = ROUTABLE_ORIG and that is not partially\
    \ owned by this\n       router, perform the following processing:\n       1. \
    \ If the associated metric is UNKNOWN_METRIC, then remove any\n           Routable\
    \ Address Topology Tuple such that:\n           +  TA_from_orig_addr = message\
    \ originator address; AND\n           +  TA_dest_addr = advertised address.\n\
    \       2.  Otherwise, if there is no Routable Address Topology Tuple\n      \
    \     such that:\n           +  TA_from_orig_addr = message originator address;\
    \ AND\n           +  TA_dest_addr = advertised address,\n           then create\
    \ a new Routable Address Topology Tuple with:\n           +  TA_from_orig_addr\
    \ := message originator address;\n           +  TA_dest_addr := advertised address.\n\
    \       3.  This Routable Address Topology Tuple (existing or new) is\n      \
    \     then modified as follows:\n           +  TA_seq_number := received ANSN;\n\
    \           +  TA_metric := associated link metric;\n           +  TA_time :=\
    \ current time + validity time.\n"
- title: 16.3.3.4.  Populating the Attached Network Set
  contents:
  - "16.3.3.4.  Populating the Attached Network Set\n   The router MUST update its\
    \ Attached Network Set as follows:\n   1.  For each network address (henceforth,\
    \ attached address) that\n       corresponds to one or more address objects with\
    \ an associated\n       Address Block TLV with Type = GATEWAY and that is not\
    \ fully owned\n       by this router, perform the following processing:\n    \
    \   1.  If the associated metric is UNKNOWN_METRIC, then remove any\n        \
    \   Attached Network Tuple such that:\n           +  AN_net_addr = attached address;\
    \ AND\n           +  AN_orig_addr = message originator address.\n       2.  Otherwise,\
    \ if there is no Attached Network Tuple such that:\n           +  AN_net_addr\
    \ = attached address; AND\n           +  AN_orig_addr = message originator address,\n\
    \           then create a new Attached Network Tuple with:\n           +  AN_net_addr\
    \ := attached address;\n           +  AN_orig_addr := message originator address.\n\
    \       3.  This Attached Network Tuple (existing or new) is then\n          \
    \ modified as follows:\n           +  AN_seq_number := received ANSN;\n      \
    \     +  AN_dist := the Value of the associated GATEWAY TLV;\n           +  AN_metric\
    \ := associated link metric;\n           +  AN_time := current time + validity\
    \ time.\n"
- title: 16.3.4.  Completing TC Message Processing
  contents:
  - "16.3.4.  Completing TC Message Processing\n   The TC message is processed as\
    \ follows:\n   1.  The Router Topology Set is updated according to Section 16.3.4.1.\n\
    \   2.  The Routable Address Topology Set is updated according to\n       Section\
    \ 16.3.4.2.\n   3.  The Attached Network Set is updated according to\n       Section\
    \ 16.3.4.3.\n"
- title: 16.3.4.1.  Purging the Router Topology Set
  contents:
  - "16.3.4.1.  Purging the Router Topology Set\n   The Router Topology Set MUST be\
    \ updated as follows:\n   1.  Any Router Topology Tuples with:\n       *  TR_from_orig_addr\
    \ = message originator address; AND\n       *  TR_seq_number < received ANSN,\n\
    \       MUST be removed.\n"
- title: 16.3.4.2.  Purging the Routable Address Topology Set
  contents:
  - "16.3.4.2.  Purging the Routable Address Topology Set\n   The Routable Address\
    \ Topology Set MUST be updated as follows:\n   1.  Any Routable Address Topology\
    \ Tuples with:\n       *  TA_from_orig_addr = message originator address; AND\n\
    \       *  TA_seq_number < received ANSN,\n       MUST be removed.\n"
- title: 16.3.4.3.  Purging the Attached Network Set
  contents:
  - "16.3.4.3.  Purging the Attached Network Set\n   The Attached Network Set MUST\
    \ be updated as follows:\n   1.  Any Attached Network Tuples with:\n       * \
    \ AN_orig_addr = message originator address; AND\n       *  AN_seq_number < received\
    \ ANSN,\n       MUST be removed.\n"
- title: 17.  Information Base Changes
  contents:
  - "17.  Information Base Changes\n   The changes described in the following sections\
    \ MUST be carried out\n   when any Information Base changes as indicated.\n"
- title: 17.1.  Originator Address Changes
  contents:
  - "17.1.  Originator Address Changes\n   If the router changes its originator address,\
    \ then:\n   1.  If there is no Originator Tuple with:\n       *  O_orig_addr =\
    \ old originator address\n       then create an Originator Tuple with:\n     \
    \  *  O_orig_addr := old originator address\n       The Originator Tuple (existing\
    \ or new) with:\n       *  O_orig_addr = new originator address\n       is then\
    \ modified as follows:\n       *  O_time := current time + O_HOLD_TIME\n"
- title: 17.2.  Link State Changes
  contents:
  - "17.2.  Link State Changes\n   The consistency of a Link Tuple MUST be maintained\
    \ according to the\n   following rules, in addition to those in [RFC6130]:\n \
    \  o  If L_status = HEARD or L_status = SYMMETRIC, then L_in_metric MUST\n   \
    \   be set (by a process outside this specification).\n   o  If L_status != SYMMETRIC,\
    \ then set L_mpr_selector := false.\n   o  If L_out_metric = UNKNOWN_METRIC, then\
    \ L_status MUST NOT equal\n      SYMMETRIC; set L_SYM_time := EXPIRED if this\
    \ would otherwise be\n      the case.\n"
- title: 17.3.  Neighbor State Changes
  contents:
  - "17.3.  Neighbor State Changes\n   The consistency of a Neighbor Tuple MUST be\
    \ maintained according to\n   the following rules, in addition to those in [RFC6130]:\n\
    \   1.  If N_symmetric = true, then N_in_metric MUST equal the minimum\n     \
    \  value of all L_in_metric of corresponding Link Tuples with\n       L_status\
    \ = SYMMETRIC and L_in_metric != UNKNOWN_METRIC.  If there\n       are no such\
    \ Link Tuples, then N_in_metric MUST equal\n       UNKNOWN_METRIC.\n   2.  If\
    \ N_symmetric = true, then N_out_metric MUST equal the minimum\n       value of\
    \ all L_out_metric of corresponding Link Tuples with\n       L_status = SYMMETRIC\
    \ and L_out_metric != UNKNOWN_METRIC.  If\n       there are no such Link Tuples,\
    \ then N_out_metric MUST equal\n       UNKNOWN_METRIC.\n   3.  If N_symmetric\
    \ = false, then N_flooding_mpr, N_routing_mpr,\n       N_mpr_selector, and N_advertised\
    \ MUST all be equal to false.\n   4.  If N_mpr_selector = true, then N_advertised\
    \ MUST be equal to\n       true.\n   5.  If N_symmetric = true, N_out_metric !=\
    \ UNKNOWN_METRIC and\n       N_mpr_selector = false, then a router MAY select\
    \ N_advertised =\n       true or N_advertised = false.  The more neighbors that\
    \ are\n       advertised, the larger TC messages become, but the more\n      \
    \ redundancy is available for routing.  A router SHOULD consider\n       the nature\
    \ of its network in making such a decision and SHOULD\n       avoid unnecessary\
    \ changes in advertising status, which may result\n       in unnecessary changes\
    \ to routing.\n"
- title: 17.4.  Advertised Neighbor Changes
  contents:
  - "17.4.  Advertised Neighbor Changes\n   The router MUST increment the ANSN in\
    \ the Neighbor Information Base\n   whenever:\n   1.  Any Neighbor Tuple changes\
    \ its N_advertised value, or any\n       Neighbor Tuple with N_advertised = true\
    \ is removed.\n   2.  Any Neighbor Tuple with N_advertised = true changes its\n\
    \       N_orig_addr or has any routable address added to or removed from\n   \
    \    N_neighbor_addr_list.\n   3.  Any Neighbor Tuple with N_advertised = true\
    \ has N_out_metric\n       changed.\n   4.  There is any change to the Local Attached\
    \ Network Set.\n"
- title: 17.5.  Advertising Remote Router Tuple Expires
  contents:
  - "17.5.  Advertising Remote Router Tuple Expires\n   The Router Topology Set, the\
    \ Routable Address Topology Set, and the\n   Attached Network Set MUST be changed\
    \ when an Advertising Remote\n   Router Tuple expires (AR_time is reached).  The\
    \ following changes are\n   required before the Advertising Remote Router Tuple\
    \ is removed:\n   1.  All Router Topology Tuples with:\n       *  TR_from_orig_addr\
    \ = AR_orig_addr of the Advertising Remote\n          Router Tuple\n       are\
    \ removed.\n   2.  All Routable Address Topology Tuples with:\n       *  TA_from_orig_addr\
    \ = AR_orig_addr of the Advertising Remote\n          Router Tuple\n       are\
    \ removed.\n   3.  All Attached Network Tuples with:\n       *  AN_orig_addr =\
    \ AR_orig_addr of the Advertising Remote Router\n          Tuple\n       are removed.\n"
- title: 17.6.  Neighborhood Changes and MPR Updates
  contents:
  - "17.6.  Neighborhood Changes and MPR Updates\n   The sets of symmetric 1-hop neighbors\
    \ selected as flooding MPRs and\n   routing MPRs MUST satisfy the conditions defined\
    \ in Section 18.  To\n   ensure this:\n   1.  The set of flooding MPRs of a router\
    \ MUST be recalculated if:\n       *  A Link Tuple is added with L_status = SYMMETRIC\
    \ and\n          L_out_metric != UNKNOWN_METRIC; OR\n       *  A Link Tuple with\
    \ L_status = SYMMETRIC and L_out_metric !=\n          UNKNOWN_METRIC is removed;\
    \ OR\n       *  A Link Tuple with L_status = SYMMETRIC and L_out_metric !=\n \
    \         UNKNOWN_METRIC changes to having L_status = HEARD, L_status =\n    \
    \      LOST, or L_out_metric = UNKNOWN_METRIC; OR\n       *  A Link Tuple with\
    \ L_status = HEARD or L_status = LOST changes\n          to having L_status =\
    \ SYMMETRIC and L_out_metric !=\n          UNKNOWN_METRIC; OR\n       *  The flooding\
    \ MPR selection process uses metric values (see\n          Section 18.4) and the\
    \ L_out_metric of any Link Tuple with\n          L_status = SYMMETRIC changes;\
    \ OR\n       *  The N_will_flooding of a Neighbor Tuple with N_symmetric =\n \
    \         true and N_out_metric != UNKNOWN_METRIC changes from\n          WILL_NEVER\
    \ to any other value; OR\n       *  The N_will_flooding of a Neighbor Tuple with\
    \ N_flooding_mpr =\n          true changes to WILL_NEVER from any other value;\
    \ OR\n       *  The N_will_flooding of a Neighbor Tuple with N_symmetric =\n \
    \         true, N_out_metric != UNKNOWN_METRIC, and N_flooding_mpr =\n       \
    \   false changes to WILL_ALWAYS from any other value; OR\n       *  A 2-Hop Tuple\
    \ with N2_out_metric != UNKNOWN_METRIC is added or\n          removed; OR\n  \
    \     *  The N2_out_metric of any 2-Hop Tuple changes and either the\n       \
    \   flooding MPR selection process uses metric values (see\n          Section\
    \ 18.4) or the change is to or from UNKNOWN_METRIC.\n   2.  Otherwise, the set\
    \ of flooding MPRs of a router MAY be\n       recalculated if the N_will_flooding\
    \ of a Neighbor Tuple with\n       N_symmetric = true changes in any other way;\
    \ it SHOULD be\n       recalculated if N_flooding_mpr = false and this is an increase\
    \ in\n       N_will_flooding or if N_flooding_mpr = true and this is a\n     \
    \  decrease in N_will_flooding.\n   3.  The set of routing MPRs of a router MUST\
    \ be recalculated if:\n       *  A Neighbor Tuple is added with N_symmetric =\
    \ true and\n          N_in_metric != UNKNOWN_METRIC; OR\n       *  A Neighbor\
    \ Tuple with N_symmetric = true and N_in_metric !=\n          UNKNOWN_METRIC is\
    \ removed; OR\n       *  A Neighbor Tuple with N_symmetric = true and N_in_metric\
    \ !=\n          UNKNOWN_METRIC changes to having N_symmetric = false; OR\n   \
    \    *  A Neighbor Tuple with N_symmetric = false changes to having\n        \
    \  N_symmetric = true and N_in_metric != UNKNOWN_METRIC; OR\n       *  The N_in_metric\
    \ of any Neighbor Tuple with N_symmetric = true\n          changes; OR\n     \
    \  *  The N_will_routing of a Neighbor Tuple with N_symmetric = true\n       \
    \   and N_in_metric != UNKNOWN_METRIC changes from WILL_NEVER to\n          any\
    \ other value; OR\n       *  The N_will_routing of a Neighbor Tuple with N_routing_mpr\
    \ =\n          true changes to WILL_NEVER from any other value; OR\n       * \
    \ The N_will_routing of a Neighbor Tuple with N_symmetric =\n          true, N_in_metric\
    \ != UNKNOWN_METRIC and N_routing_mpr = false\n          changes to WILL_ALWAYS\
    \ from any other value; OR\n       *  A 2-Hop Tuple with N2_in_metric != UNKNOWN_METRIC\
    \ is added or\n          removed; OR\n       *  The N2_in_metric of any 2-Hop\
    \ Tuple changes.\n   4.  Otherwise, the set of routing MPRs of a router MAY be\n\
    \       recalculated if the N_will_routing of a Neighbor Tuple with\n       N_symmetric\
    \ = true changes in any other way; it SHOULD be\n       recalculated if N_routing_mpr\
    \ = false and this is an increase in\n       N_will_routing or if N_routing_mpr\
    \ = true and this is a decrease\n       in N_will_routing.\n   If either set of\
    \ MPRs of a router is recalculated, this MUST be as\n   described in Section 18.\n"
- title: 17.7.  Routing Set Updates
  contents:
  - "17.7.  Routing Set Updates\n   The Routing Set MUST be updated, as described\
    \ in Section 19, when\n   changes in the Local Information Base, the Neighborhood\
    \ Information\n   Base, or the Topology Information Base indicate a change (including\n\
    \   of any potentially used outgoing neighbor metric values) of the known\n  \
    \ symmetric links and/or attached networks in the MANET, hence changing\n   the\
    \ Topology Graph.  It is sufficient to consider only changes that\n   affect at\
    \ least one of:\n   o  The Local Interface Set for an OLSRv2 interface, if the\
    \ change\n      removes any network address in an I_local_iface_addr_list.  In\n\
    \      this case, unless the OLSRv2 interface is removed, it may not be\n    \
    \  necessary to do more than replace such network addresses, if used,\n      by\
    \ an alternative network address from the same\n      I_local_iface_addr_list.\n\
    \   o  The Local Attached Set, if the change removes any AL_net_addr that\n  \
    \    is also an AN_net_addr.  In this case, it may not be necessary to\n     \
    \ do more than add Routing Tuples with R_dest_addr equal to that\n      AN_net_addr.\n\
    \   o  The Link Set of any OLSRv2 interface, considering only Link Tuples\n  \
    \    that have, or just had, L_status = SYMMETRIC and L_out_metric !=\n      UNKNOWN_METRIC\
    \ (including removal of such Link Tuples).\n   o  The Neighbor Set of the router,\
    \ considering only Neighbor Tuples\n      that have, or just had, N_symmetric\
    \ = true and N_out_metric !=\n      UNKNOWN_METRIC and do not have N_orig_addr\
    \ = unknown.\n   o  The 2-Hop Set of any OLSRv2 interface, if used in the creation\
    \ of\n      the Routing Set and if the change affects any 2-Hop Tuples with\n\
    \      N2_out_metric != UNKNOWN_METRIC.\n   o  The Router Topology Set of the\
    \ router.\n   o  The Routable Address Topology Set of the router.\n   o  The Attached\
    \ Network Set of the router.\n"
- title: 18.  Selecting MPRs
  contents:
  - "18.  Selecting MPRs\n   Each router MUST select, from among its willing symmetric\
    \ 1-hop\n   neighbors, two subsets of these routers, as flooding and routing\n\
    \   MPRs.  This selection is recorded in the router's Neighbor Set and\n   reported\
    \ in the router's HELLO messages.  Routers MAY select their\n   MPRs by any process\
    \ that satisfies the conditions that follow, which\n   may, but need not, use\
    \ the organization of the data described.\n   Routers can freely interoperate\
    \ whether they use the same or\n   different MPR selection algorithms.\n   Only\
    \ flooding MPRs forward control messages flooded through the\n   MANET, thus effecting\
    \ a flooding reduction, an optimization of the\n   flooding mechanism, known as\
    \ MPR flooding.  Routing MPRs are used to\n   effect a topology reduction in the\
    \ MANET.  (If no such reduction is\n   required, then a router can select all\
    \ of its relevant neighbors as\n   routing MPRs.)  Consequently, while it is not\
    \ essential that these\n   two sets of MPRs are minimal, keeping the numbers of\
    \ MPRs small\n   ensures that the overhead of this protocol is kept to a minimum.\n"
- title: 18.1.  Overview
  contents:
  - "18.1.  Overview\n   MPRs are selected according to the following steps, defined\
    \ in the\n   following sections:\n   o  A data structure known as a Neighbor Graph\
    \ is defined.\n   o  The properties of an MPR Set derived from a Neighbor Graph\
    \ are\n      defined.  Any algorithm that creates an MPR Set that satisfies\n\
    \      these properties is a valid MPR selection algorithm.  An example\n    \
    \  algorithm that creates such an MPR Set is given in Appendix B.\n   o  How to\
    \ create a Neighbor Graph for each interface based on the\n      corresponding\
    \ Interface Information Base is defined, and how to\n      combine the resulting\
    \ MPR Sets to determine the router's flooding\n      MPRs and record those in\
    \ the router's Neighbor Set are described.\n   o  How to create a single Neighbor\
    \ Graph based on all Interface\n      Information Bases and the Neighbor Information\
    \ Base is defined,\n      and how to record the resulting MPR Set as the router's\
    \ routing\n      MPRs in the router's Neighbor Set is described.\n   o  A specification\
    \ as to when MPRs MUST be calculated is given.\n   When a router selects its MPRs,\
    \ it MAY consider any characteristics\n   of its neighbors that it is aware of.\
    \  In particular, it SHOULD\n   consider the willingness of the neighbor, as recorded\
    \ by the\n   corresponding N_will_flooding or N_will_routing value, as\n   appropriate,\
    \ preferring neighbors with higher values.  (Note that\n   willingness values\
    \ equal to WILL_NEVER and WILL_ALWAYS are always\n   considered, as described.)\
    \  However, a router MAY consider other\n   characteristics to have a greater\
    \ significance.\n   Each router MAY select its flooding and routing MPRs independently\
    \ of\n   each other or coordinate its selections.  A router MAY make its MPR\n\
    \   selections independently of the MPR selection by other routers, or it\n  \
    \ MAY, for example, give preference to routers that either are, or are\n   not,\
    \ already selected as MPRs by other routers.\n"
- title: 18.2.  Neighbor Graph
  contents:
  - "18.2.  Neighbor Graph\n   A Neighbor Graph is a structure defined here as consisting\
    \ of sets N1\n   and N2 and some associated metric and willingness values.  Elements\n\
    \   of set N1 represent willing symmetric 1-hop neighbors, and elements\n   of\
    \ set N2 represent addresses of a symmetric 2-hop neighbor.\n   A Neighbor Graph\
    \ has the following properties:\n   o  It contains two disjoint sets N1 and N2.\n\
    \   o  For each element x in N1, there is an associated willingness value\n  \
    \    W(x) such that WILL_NEVER < W(x) <= WILL_ALWAYS.\n   o  For each element\
    \ x in N1, there is an associated metric d1(x) > 0.\n   o  For some elements y\
    \ in N2, there is an associated metric d1(y) >\n      0.  (Other elements y in\
    \ N2 have undefined d1(y); this may be\n      considered to be infinite.)\n  \
    \ o  For each element x in N1, there is a subset N2(x) of elements of\n      N2;\
    \ this subset may be empty.  For each x in N1 and each y in\n      N2(x), there\
    \ is an associated metric d2(x,y) > 0.  (For other x in\n      N1 and y in N2,\
    \ d2(x,y) is undefined and may be considered\n      infinite.)\n   o  N2 is equal\
    \ to the union of all the N2(x) for all x in N1, i.e.,\n      for each y in N2,\
    \ there is at least one x in N1 such that y is in\n      N2(x).\n   It is convenient\
    \ to also define:\n   o  For each y in N2, the set N1(y) that contains x in N1\
    \ if and only\n      if y is in N2(x).  From the final property above, N1(y) is\
    \ not\n      empty.\n   o  For each x in N1 and y in N2, if d2(x,y) is defined,\
    \ then d(x,y)\n      := d1(x)+d2(x,y); otherwise, d(x,y) is not defined.  (Thus,\
    \ d(x,y)\n      is defined if y is in N2(x) or, equivalently, if x is in N1(y).)\n\
    \   o  For any subset S of N1 and for each y in N2, the metric d(y,S) is\n   \
    \   the minimum value of d1(y), if defined, and of all d(x,y) for x in\n     \
    \ N1(y) and in S.  If there are no such metrics to take the minimum\n      value\
    \ of, then d(y,S) is undefined (may be considered to be\n      infinite).  From\
    \ the final property above, d(y,N1) is defined for\n      all y.\n"
- title: 18.3.  MPR Properties
  contents:
  - "18.3.  MPR Properties\n   Given a Neighbor Graph as defined in Section 18.2,\
    \ an MPR Set for\n   that Neighbor Graph is a subset M of the set N1 that satisfies\
    \ the\n   following properties:\n   o  If x in N1 has W(x) = WILL_ALWAYS, then\
    \ x is in M.\n   o  For any y in N2 that does not have a defined d1(y), there\
    \ is at\n      least one element in M that is also in N1(y).  This is equivalent\n\
    \      to the requirement that d(y,M) is defined.\n   o  For any y in N2, d(y,M)\
    \ = d(y,N1).\n   These properties reflect that the MPR Set consists of a set of\n\
    \   symmetric 1-hop neighbors that cover all the symmetric 2-hop\n   neighbors\
    \ and that they do so retaining a minimum distance route\n   (1-hop, if present,\
    \ or 2-hop) to each symmetric 2-hop neighbor.\n   Note that if M is an MPR Set,\
    \ then so is any subset of N1 that\n   contains M; also note that N1 is always\
    \ an MPR Set.  An MPR Set may\n   be empty but cannot be empty if N2 contains\
    \ any elements y that do\n   not have a defined d1(y).\n"
- title: 18.4.  Flooding MPRs
  contents:
  - "18.4.  Flooding MPRs\n   Whenever flooding MPRs are to be calculated, an implementation\
    \ MUST\n   determine and record a set of flooding MPRs that is equivalent to one\n\
    \   calculated as described in this section.\n   The calculation of flooding MPRs\
    \ need not use link metrics or,\n   equivalently, may use link metrics with a\
    \ fixed value, here taken to\n   be 1.  However, links with unknown metric (L_out_metric\
    \ =\n   UNKNOWN_METRIC) MUST NOT be used even if link metrics are otherwise\n\
    \   not used.\n   Routers MAY make individual decisions as to whether to use link\n\
    \   metrics for the calculation of flooding MPRs.  A router MUST use the\n   same\
    \ approach to the choice of whether to use link metrics for all\n   links, i.e.,\
    \ in the cases indicated by A or B, the same choice MUST\n   be made in each case.\n\
    \   For each OLSRv2 interface (the \"current interface\"), define a\n   Neighbor\
    \ Graph as defined in Section 18.2 according to the following:\n   o  Define a\
    \ reachable Link Tuple to be a Link Tuple in the Link Set\n      for the current\
    \ interface with L_status = SYMMETRIC and\n      L_out_metric != UNKNOWN_METRIC.\n\
    \   o  Define an allowed Link Tuple to be a reachable Link Tuple whose\n     \
    \ corresponding Neighbor Tuple has N_will_flooding > WILL_NEVER.\n   o  Define\
    \ an allowed 2-Hop Tuple to be a 2-Hop Tuple in the 2-Hop Set\n      for the current\
    \ interface for which N2_out_metric !=\n      UNKNOWN_METRIC and there is an allowed\
    \ Link Tuple with\n      L_neighbor_iface_addr_list = N2_neighbor_iface_addr_list.\n\
    \   o  Define an element of N1 for each allowed Link Tuple.  This then\n     \
    \ defines the corresponding Link Tuple for each element of N1 and\n      the corresponding\
    \ Neighbor Tuple for each element of N1, being the\n      Neighbor Tuple corresponding\
    \ to that Link Tuple.\n   o  For each element x in N1, define W(x) := N_will_flooding\
    \ of the\n      corresponding Neighbor Tuple.\n   o  For each element x in N1,\
    \ define d1(x) as either:\n      A.  L_out_metric of the corresponding Link Tuple;\
    \ OR\n      B.  1.\n   o  Define an element of N2 for each network address that\
    \ is the\n      N2_2hop_addr of one or more allowed 2-Hop Tuples.  This then\n\
    \      defines the corresponding address for each element of N2.\n   o  For each\
    \ element y in N2, if the corresponding address is in the\n      N_neighbor_addr_list\
    \ of a Neighbor Tuple that corresponds to one\n      or more reachable Link Tuples,\
    \ then define d1(y) as either:\n      A.  the minimum value of the L_out_metric\
    \ of those Link Tuples; OR\n      B.  1.\n      Otherwise, d1(y) is not defined.\
    \  In the latter case, where d1(y)\n      := 1, all such y in N2 may instead be\
    \ removed from N2.\n   o  For each element x in N1, define N2(x) as the set of\
    \ elements y in\n      N2 whose corresponding address is the N2_2hop_addr of an\
    \ allowed\n      2-Hop Tuple that has N2_neighbor_iface_addr_list =\n      L_neighbor_iface_addr_list\
    \ of the Link Tuple corresponding to x.\n      For all such x and y, define d2(x,y)\
    \ as either:\n      A.  N2_out_metric of that 2-Hop Tuple; OR\n      B.  1.\n\
    \   It is up to an implementation to decide how to label each element of\n   N1\
    \ or N2.  For example, an element of N1 may be labeled with one or\n   more addresses\
    \ from the corresponding L_neighbor_iface_addr_list or\n   with a pointer or reference\
    \ to the corresponding Link Tuple.\n   Using these Neighbor Graphs, flooding MPRs\
    \ are selected and recorded\n   by:\n   o  For each OLSRv2 interface, determine\
    \ an MPR Set as specified in\n      Section 18.3.\n   o  A Neighbor Tuple represents\
    \ a flooding MPR and has N_flooding_mpr\n      := true (otherwise, N_flooding_mpr\
    \ := false) if and only if that\n      Neighbor Tuple corresponds to an element\
    \ in an MPR Set created for\n      any interface as described above.  That is,\
    \ the overall set of\n      flooding MPRs is the union of the sets of flooding\
    \ MPRs for all\n      OLSRv2 interfaces.\n   A router MAY select its flooding\
    \ MPRs for each OLSRv2 interface\n   independently, or it MAY coordinate its MPR\
    \ selections across its\n   OLSRv2 interfaces, as long as the required condition\
    \ is satisfied for\n   each OLSRv2 interface.  One such coordinated approach is\
    \ to process\n   the OLSRv2 interfaces sequentially and, for each OLSRv2 interface,\n\
    \   start with flooding MPRs selected (and not removable) if the neighbor\n  \
    \ has been already selected as an MPR for an OLSRv2 interface that has\n   already\
    \ been processed.  The algorithm specified in Appendix B can be\n   used in this\
    \ way.\n"
- title: 18.5.  Routing MPRs
  contents:
  - "18.5.  Routing MPRs\n   Whenever routing MPRs are to be calculated, an implementation\
    \ MUST\n   determine and record a set of routing MPRs that is equivalent to one\n\
    \   calculated as described in this section.\n   Define a single Neighbor Graph\
    \ as defined in Section 18.2 according\n   to the following:\n   o  Define a reachable\
    \ Neighbor Tuple to be a Neighbor Tuple with\n      N_symmetric = true and N_in_metric\
    \ != UNKNOWN_METRIC.\n   o  Define an allowed Neighbor Tuple to be a reachable\
    \ Neighbor Tuple\n      with N_will_routing > WILL_NEVER.\n   o  Define an allowed\
    \ 2-Hop Tuple to be a 2-Hop Tuple in the 2-Hop Set\n      for any OLSRv2 interface\
    \ with N2_in_metric != UNKNOWN_METRIC and\n      for which there is an allowed\
    \ Neighbor Tuple with\n      N_neighbor_addr_list containing N2_neighbor_iface_addr_list.\n\
    \   o  Define an element of N1 for each allowed Neighbor Tuple.  This\n      then\
    \ defines the corresponding Neighbor Tuple for each element of\n      N1.\n  \
    \ o  For each element x in N1, define W(x) := N_will_routing of the\n      corresponding\
    \ Neighbor Tuple.\n   o  For each element x in N1, define d1(x) := N_in_metric\
    \ of the\n      corresponding Neighbor Tuple.\n   o  Define an element of N2 for\
    \ each network address that is the\n      N2_2hop_addr of one or more allowed\
    \ 2-Hop Tuples.  This then\n      defines the corresponding address for each element\
    \ of N2.\n   o  For each element y in N2, if the corresponding address is in the\n\
    \      N_neighbor_addr_list of a reachable Neighbor Tuple, then define\n     \
    \ d1(y) to be the N_in_metric of that Neighbor Tuple; otherwise,\n      d1(y)\
    \ is not defined.\n   o  For each element x in N1, define N2(x) as the set of\
    \ elements y in\n      N2 whose corresponding address is the N2_2hop_addr of an\
    \ allowed\n      2-Hop Tuple that has N2_neighbor_iface_addr_list contained in\n\
    \      N_neighbor_addr_list of the Neighbor Tuple corresponding to x.\n      For\
    \ all such x and y, define d2(x,y) := N2_out_metric of that\n      2-Hop Tuple.\n\
    \   It is up to an implementation to decide how to label each element of\n   N1\
    \ or N2.  For example, an element of N1 may be labeled with one or\n   more addresses\
    \ from the corresponding N_neighbor_addr_list or with a\n   pointer or reference\
    \ to the corresponding Neighbor Tuple.\n   Using these Neighbor Graphs, routing\
    \ MPRs are selected and recorded\n   according to the following:\n   o  Determine\
    \ an MPR Set as specified in Section 18.3.\n   o  A Neighbor Tuple represents\
    \ a routing MPR and has N_routing_mpr :=\n      true (otherwise, N_routing_mpr\
    \ := false) if and only if that\n      Neighbor Tuple corresponds to an element\
    \ in the MPR Set created as\n      described above.\n"
- title: 18.6.  Calculating MPRs
  contents:
  - "18.6.  Calculating MPRs\n   A router MUST recalculate each of its sets of MPRs\
    \ whenever the\n   currently selected set of MPRs does not still satisfy the required\n\
    \   conditions.  It MAY recalculate its MPRs if the current set of MPRs\n   is\
    \ still valid but could be more efficient.  Sufficient conditions to\n   recalculate\
    \ a router's sets of MPRs are given in Section 17.6.\n"
- title: 19.  Routing Set Calculation
  contents:
  - "19.  Routing Set Calculation\n   The Routing Set of a router is populated with\
    \ Routing Tuples that\n   represent paths from that router to all destinations\
    \ in the network.\n   These paths are calculated based on the Network Topology\
    \ Graph, which\n   is constructed from information in the Information Bases, obtained\n\
    \   via HELLO and TC message exchange.\n   Changes to the Routing Set do not require\
    \ any messages to be\n   transmitted.  The state of the Routing Set SHOULD, however,\
    \ be\n   reflected in the IP routing table by adding and removing entries from\n\
    \   that routing table as appropriate.  Only appropriate Routing Tuples\n   (in\
    \ particular only those that represent local links or paths to\n   routable addresses)\
    \ need be reflected in the IP routing table.\n"
- title: 19.1.  Network Topology Graph
  contents:
  - "19.1.  Network Topology Graph\n   The Network Topology Graph is formed from information\
    \ from the\n   router's Local Interface Set, Link Sets for OLSRv2 interfaces,\n\
    \   Neighbor Set, Router Topology Set, Routable Address Topology Set, and\n  \
    \ Attached Network Set.  The Network Topology Graph MAY also use\n   information\
    \ from the router's 2-Hop Sets for OLSRv2 interfaces.  The\n   Network Topology\
    \ Graph forms the router's topological view of the\n   network in the form of\
    \ a directed graph.  Each edge in that graph has\n   a metric value.  The Network\
    \ Topology Graph has a \"backbone\" (within\n   which minimum total metric routes\
    \ will be constructed) containing the\n   following edges:\n   o  Edges X -> Y\
    \ for all possible Y, and one X per Y, such that:\n      *  Y is the N_orig_addr\
    \ of a Neighbor Tuple; AND\n      *  N_orig_addr is not unknown; AND\n      *\
    \  X is in the I_local_iface_addr_list of a Local Interface Tuple;\n         AND\n\
    \      *  There is a Link Tuple with L_status = SYMMETRIC and\n         L_out_metric\
    \ != UNKNOWN_METRIC such that this Neighbor Tuple\n         and this Local Interface\
    \ Tuple correspond to it.  A network\n         address from L_neighbor_iface_addr_list\
    \ will be denoted R in\n         this case.\n      It SHOULD be preferred, where\
    \ possible, to select R = Y and to\n      select X from the Local Interface Tuple\
    \ corresponding to the Link\n      Tuple from which R was selected.  The metric\
    \ for such an edge is\n      the corresponding N_out_metric.\n   o  All edges\
    \ W -> U such that:\n      *  W is the TR_from_orig_addr of a Router Topology\
    \ Tuple; AND\n      *  U is the TR_to_orig_addr of the same Router Topology Tuple.\n\
    \      The metric of such an edge is the corresponding TR_metric.\n   The Network\
    \ Topology Graph is further \"decorated\" with the following\n   edges.  If a\
    \ network address S, V, Z, or T equals a network address Y\n   or W, then the\
    \ edge terminating in the network address S, V, Z, or T\n   MUST NOT be used in\
    \ any path.\n   o  Edges X -> S for all possible S, and one X per S, such that:\n\
    \      *  S is in the N_neighbor_addr_list of a Neighbor Tuple; AND\n      * \
    \ X is in the I_local_iface_addr_list of a Local Interface Tuple;\n         AND\n\
    \      *  There is a Link Tuple with L_status = SYMMETRIC and\n         L_out_metric\
    \ != UNKNOWN_METRIC such that this Neighbor Tuple\n         and this Local Interface\
    \ Tuple correspond to it.  A network\n         address from L_neighbor_iface_addr_list\
    \ will be denoted R in\n         this case.\n      It SHOULD be preferred, where\
    \ possible, to select R = S and to\n      select X from the Local Interface Tuple\
    \ corresponding to the Link\n      Tuple from which R was selected.  The metric\
    \ for such an edge is\n      the corresponding N_out_metric.\n   o  All edges\
    \ W -> V such that:\n      *  W is the TA_from_orig_addr of a Routable Address\
    \ Topology\n         Tuple; AND\n      *  V is the TA_dest_addr of the same Routable\
    \ Address Topology\n         Tuple.\n      The metric for such an edge is the\
    \ corresponding TA_metric.\n   o  All edges W -> T such that:\n      *  W is the\
    \ AN_orig_addr of an Attached Network Tuple; AND\n      *  T is the AN_net_addr\
    \ of the same Attached Network Tuple.\n      The metric for such an edge is the\
    \ corresponding AN_metric.\n   o  (OPTIONAL) All edges Y -> Z such that:\n   \
    \   *  Z is a routable address and is the N2_2hop_addr of a 2-Hop\n         Tuple\
    \ with N2_out_metric != UNKNOWN_METRIC; AND\n      *  Y is the N_orig_addr of\
    \ the corresponding Neighbor Tuple; AND\n      *  This Neighbor Tuple has N_will_routing\
    \ not equal to WILL_NEVER.\n      A path terminating with such an edge MUST NOT\
    \ be used in\n      preference to any other path.  The metric for such an edge\
    \ is the\n      corresponding N2_out_metric.\n   Any part of the Topology Graph\
    \ that is not connected to a local\n   network address X is not used.  Only one\
    \ selection X SHOULD be made\n   from each I_local_iface_addr_list, and only one\
    \ selection R SHOULD be\n   made from any L_neighbor_iface_addr_list.  All edges\
    \ have a hop count\n   of 1, except edges W -> T that have a hop count of the\
    \ corresponding\n   value of AN_dist.\n"
- title: 19.2.  Populating the Routing Set
  contents:
  - "19.2.  Populating the Routing Set\n   The Routing Set MUST contain the shortest\
    \ paths for all destinations\n   from all local OLSRv2 interfaces using the Network\
    \ Topology Graph.\n   This calculation MAY use any algorithm, including any means\
    \ of\n   choosing between paths of equal total metric.  (In the case of two\n\
    \   paths of equal total metric but differing hop counts, the path with\n   the\
    \ lower hop count SHOULD be used.)\n   Using the notation of Section 19.1, initially\
    \ \"backbone\" paths using\n   only edges X -> Y and W -> U need be constructed\
    \ (using a minimum\n   distance algorithm).  Then paths using only a final edge\
    \ of the other\n   types may be added.  These MUST NOT replace backbone paths\
    \ with the\n   same destination (and paths terminating in an edge Y -> Z SHOULD\
    \ NOT\n   replace paths with any other form of terminating edge).\n   Each path\
    \ will correspond to a Routing Tuple.  These will be of two\n   types.  The first\
    \ type will represent single edge paths, of type X ->\n   S or X -> Y, by:\n \
    \  o  R_local_iface_addr := X;\n   o  R_next_iface_addr := R;\n   o  R_dest_addr\
    \ := S or Y;\n   o  R_dist := 1;\n   o  R_metric := edge metric,\n   where R is\
    \ as defined in Section 19.1 for these types of edge.\n   The second type will\
    \ represent a multiple edge path, which will\n   always have first edge of type\
    \ X -> Y, and will have final edge of\n   type W -> U, W -> V, W -> T, or Y ->\
    \ Z.  The Routing Tuple will be:\n   o  R_local_iface_addr := X;\n   o  R_next_iface_addr\
    \ := Y;\n   o  R_dest_addr := U, V, T or Z;\n   o  R_dist := the total hop count\
    \ of all edges in the path;\n   o  R_metric := the total metric of all edges in\
    \ the path.\n   Finally, Routing Tuples of the second type whose R_dest_addr is\
    \ not\n   routable MAY be discarded.\n   An example algorithm for calculating\
    \ the Routing Set of a router is\n   given in Appendix C.\n"
- title: 20.  Proposed Values for Parameters
  contents:
  - "20.  Proposed Values for Parameters\n   This protocol uses all parameters defined\
    \ in [RFC6130] and additional\n   parameters defined in this specification.  All\
    \ but one (RX_HOLD_TIME)\n   of these additional parameters are router parameters\
    \ as defined in\n   [RFC6130].  The proposed values of the additional parameters\
    \ defined\n   in the following sections are appropriate to the case where all\n\
    \   parameters (including those defined in [RFC6130]) have a single\n   value.\
    \  Proposed values for parameters defined in [RFC6130] are given\n   in that specification.\n\
    \   The following proposed values are based on experience with [RFC3626]\n   deployments\
    \ (such as documented in [McCabe]) and are considered\n   typical.  They can be\
    \ changed to accommodate different deployment\n   requirements -- for example,\
    \ a network with capacity-limited network\n   interfaces would be expected to\
    \ use greater values for message\n   intervals, whereas a highly mobile network\
    \ would be expected to use\n   lower values for message intervals.  When determining\
    \ these values,\n   the constraints specified in Section 5 MUST be respected.\n\
    \   Note that routers in a MANET need not all use the same set of\n   parameters,\
    \ and those parameters that are indicated as interface\n   parameters need not\
    \ be the same on all OLSRv2 interfaces of a single\n   router.\n"
- title: 20.1.  Local History Time Parameters
  contents:
  - "20.1.  Local History Time Parameters\n   o  O_HOLD_TIME := 30 seconds\n"
- title: 20.2.  Message Interval Parameters
  contents:
  - "20.2.  Message Interval Parameters\n   o  TC_INTERVAL := 5 seconds\n   o  TC_MIN_INTERVAL\
    \ := TC_INTERVAL/4\n"
- title: 20.3.  Advertised Information Validity Time Parameters
  contents:
  - "20.3.  Advertised Information Validity Time Parameters\n   o  T_HOLD_TIME :=\
    \ 3 x TC_INTERVAL\n   o  A_HOLD_TIME := T_HOLD_TIME\n"
- title: 20.4.  Received Message Validity Time Parameters
  contents:
  - "20.4.  Received Message Validity Time Parameters\n   o  RX_HOLD_TIME := 30 seconds\n\
    \   o  P_HOLD_TIME := 30 seconds\n   o  F_HOLD_TIME := 30 seconds\n"
- title: 20.5.  Jitter Time Parameters
  contents:
  - "20.5.  Jitter Time Parameters\n   o  TP_MAXJITTER := HP_MAXJITTER\n   o  TT_MAXJITTER\
    \ := HT_MAXJITTER\n   o  F_MAXJITTER := TT_MAXJITTER\n"
- title: 20.6.  Hop Limit Parameter
  contents:
  - "20.6.  Hop Limit Parameter\n   o  TC_HOP_LIMIT := 255\n"
- title: 20.7.  Willingness Parameters
  contents:
  - "20.7.  Willingness Parameters\n   o  WILL_FLOODING := WILL_DEFAULT\n   o  WILL_ROUTING\
    \ := WILL_DEFAULT\n"
- title: 21.  Sequence Numbers
  contents:
  - "21.  Sequence Numbers\n   Sequence numbers are used in this specification for\
    \ the purpose of\n   discarding \"old\" information, i.e., messages received out\
    \ of order.\n   However, with a limited number of bits for representing sequence\n\
    \   numbers, wraparound (in which the sequence number is incremented from\n  \
    \ the maximum possible value to zero) will occur.  To prevent this from\n   interfering\
    \ with the operation of this protocol, the following MUST\n   be observed when\
    \ determining the ordering of sequence numbers.\n   The term MAXVALUE designates\
    \ in the following one more than the\n   largest possible value for a sequence\
    \ number.  For a 16-bit sequence\n   number (like those defined in this specification),\
    \ MAXVALUE is 65536.\n   The sequence number S1 is said to be \"greater than\"\
    \ the sequence\n   number S2 if:\n   o  S1 > S2 AND S1 - S2 < MAXVALUE/2, OR\n\
    \   o  S2 > S1 AND S2 - S1 > MAXVALUE/2\n   When sequence numbers S1 and S2 differ\
    \ by MAXVALUE/2, their ordering\n   cannot be determined.  In this case, which\
    \ should not occur, either\n   ordering may be assumed.\n   Thus, when comparing\
    \ two messages, it is possible -- even in the\n   presence of wraparound -- to\
    \ determine which message contains the\n   most recent information.\n"
- title: 22.  Extensions
  contents:
  - "22.  Extensions\n   An extension to this protocol will need to interact with\
    \ this\n   specification and possibly also with [RFC6130].  This protocol is\n\
    \   designed to permit such interactions, in particular:\n   o  Through accessing,\
    \ and possibly extending, the information in the\n      Information Bases.  All\
    \ updates to the elements specified in this\n      specification are subject to\
    \ the normative constraints specified\n      in [RFC6130] and Appendix A.  Note\
    \ that the processing specified\n      in this document ensures that these constraints\
    \ are satisfied.\n   o  Through accessing an outgoing message prior to it being\n\
    \      transmitted over any OLSRv2 interface and adding information to it\n  \
    \    as specified in [RFC5444].  This MAY include Message TLVs and/or\n      network\
    \ addresses with associated Address Block TLVs.  (Network\n      addresses without\
    \ new associated TLVs SHOULD NOT be added to\n      messages.)  This may, for\
    \ example, be to allow a security\n      protocol, as suggested in Section 23,\
    \ to add a TLV containing a\n      cryptographic signature to the message.\n \
    \  o  Through accessing an incoming message and potentially discarding\n     \
    \ it prior to processing by this protocol.  This may, for example,\n      allow\
    \ a security protocol, as suggested in Section 23, to perform\n      verification\
    \ of message signatures and prevent processing and/or\n      forwarding of unverifiable\
    \ messages by this protocol.\n   o  Through accessing an incoming message after\
    \ it has been completely\n      processed by this protocol.  In particular, this\
    \ may allow a\n      protocol that has added information, by way of inclusion\
    \ of\n      appropriate TLVs or of network addresses associated with new TLVs,\n\
    \      access to such information after appropriate updates have been\n      recorded\
    \ in the Information Bases in this protocol.\n   o  Through requesting that a\
    \ message be generated at a specific time.\n      In that case, message generation\
    \ MUST still respect the\n      constraints in [RFC6130] and Section 5.4.3.\n"
- title: 23.  Security Considerations
  contents:
  - "23.  Security Considerations\n   As a proactive routing protocol, OLSRv2 is a\
    \ potential target for\n   various attacks.  This section presents the envisioned\
    \ security\n   architecture for OLSRv2 and gives guidelines on how to provide\n\
    \   integrity, confidentiality, and integration into external routing\n   domains.\
    \  Separately specified mandatory security mechanisms are\n   summarized, and\
    \ some observations on key management are given.\n"
- title: 23.1.  Security Architecture
  contents:
  - "23.1.  Security Architecture\n   OLSRv2 integrates into the architecture specified\
    \ in Appendix A of\n   [RFC5444], in [RFC5498], and in Section 16 of [RFC6130],\
    \ the latter\n   by using and extending its messages and Information Bases.\n\
    \   As part of this architecture, OLSRv2 and NHDP [RFC6130] recognize\n   that\
    \ there may be external reasons for rejecting messages that would\n   be considered\
    \ \"badly formed\" or \"insecure\", e.g., if an Integrity\n   Check Value (ICV)\
    \ included in a message by an external mechanism\n   cannot be verified.  This\
    \ architecture allows options as to whether\n   and how to implement security\
    \ features, reflecting the situation that\n   MANET routing protocol deployment\
    \ domains have varying security\n   requirements, ranging from \"practically unbreakable\"\
    \ to \"virtually\n   none\".  This approach allows MANET routing protocol specifications\
    \ to\n   remain generic, with extensions to them and/or extensions to the\n  \
    \ multiplexing and demultiplexing process described in Appendix A of\n   [RFC5444],\
    \ providing security mechanisms appropriate to a given\n   deployment domain.\n\
    \   The following sections provide guidelines on how to provide\n   integrity,\
    \ confidentiality, and integration with external routing\n   domains in such extensions.\n"
- title: 23.2.  Integrity
  contents:
  - "23.2.  Integrity\n   Each router injects topological information into the network\
    \ by\n   transmitting HELLO messages and, for some routers, also TC messages.\n\
    \   If some routers for some reason (malice or malfunction) inject\n   invalid\
    \ control traffic, network integrity may be compromised.\n   Therefore, message,\
    \ or packet, authentication is strongly advised.\n   Different such situations\
    \ may occur, for example:\n   1.  A router generates TC messages, advertising\
    \ links to non-neighbor\n       routers;\n   2.  A router generates TC messages,\
    \ pretending to be another router;\n   3.  A router generates HELLO messages,\
    \ advertising non-neighbor\n       routers;\n   4.  A router generates HELLO messages,\
    \ pretending to be another\n       router;\n   5.  A router forwards altered control\
    \ messages;\n   6.  A router does not forward control messages;\n   7.  A router\
    \ does not select multipoint relays correctly;\n   8.  A router forwards broadcast\
    \ control messages unaltered but does\n       not forward unicast data traffic;\n\
    \   9.  A router \"replays\" previously recorded control traffic from\n      \
    \ another router.\n   Authentication of the originator router for control messages\
    \ (for\n   situations 2, 4, and 5) and of the individual links announced in the\n\
    \   control messages (for situations 1 and 3) may be used as a\n   countermeasure.\
    \  However, to prevent routers from repeating old (and\n   correctly authenticated)\
    \ information (situation 9), additional\n   information is required (e.g., a timestamp\
    \ or sequence number),\n   allowing a router to positively identify such replayed\
    \ messages.\n   In general, ICVs (e.g., digital signatures) and other required\n\
    \   security information can be transmitted within the HELLO and TC\n   messages\
    \ or within a packet header using the TLV mechanism.  Either\n   option permits\
    \ different levels of protection to coexist in the same\n   network, if desired.\n\
    \   An important consideration is that all control messages (HELLO\n   messages\
    \ and TC messages) are transmitted to all routers in the 1-hop\n   neighborhood\
    \ and some control messages (TC messages) are flooded to\n   all routers in the\
    \ network.  This is done in a packet that is\n   transmitted to all routers in\
    \ the 1-hop neighborhood, the current set\n   of which may not be known.  Thus,\
    \ a control message or packet used by\n   this protocol is always contained in\
    \ a transmission destined for\n   multiple destinations, and it is important that\
    \ the authentication\n   mechanism employed permits any receiving router to validate\
    \ the\n   authenticity of a message or packet.\n   [RFC7182] specifies a common\
    \ exchange format for cryptographic\n   information in the form of Packet TLVs,\
    \ Message TLVs, and Address\n   Block TLVs, as specified in [RFC5444].  These\
    \ may be used (and\n   shared) among MANET routing protocol security extensions.\
    \  In\n   particular, [RFC7182] specifies the format of TLVs for containing\n\
    \   Integrity Check Values (ICVs), i.e., signatures, for providing\n   integrity,\
    \ as well as TLVs for containing temporal information for\n   preventing replay\
    \ attacks.  [RFC7182] specifies registries for using\n   different ciphers and\
    \ formats of temporal information.  When using\n   ICV TLVs in an OLSRv2 deployment,\
    \ failure to verify an included ICV\n   mandates rejection of an incoming message\
    \ or packet as \"invalid\",\n   according to Section 12.1 of [RFC6130] and according\
    \ to\n   Section 16.3.1 of this specification when using the multiplexing and\n\
    \   demultiplexing process described in Appendix A of [RFC5444].\n   [RFC7182]\
    \ specifies how to insert ICVs into generated messages, how\n   to verify incoming\
    \ messages, and to reject \"insecure\" messages (i.e.,\n   messages without an\
    \ ICV or with an ICV that cannot be verified).\n   Different MANET deployments\
    \ may, as a result of the purpose for which\n   they are used and the possibility\
    \ and nature of their configuration,\n   require different ICV algorithms and\
    \ timestamps or multiple keys, and\n   thus, a security extension may use any\
    \ of the different options\n   provided in [RFC7182].\n"
- title: 23.3.  Confidentiality
  contents:
  - "23.3.  Confidentiality\n   OLSRv2 periodically MPR floods topological information\
    \ to all routers\n   in the network.  Hence, if used in an unprotected network,\
    \ in\n   particular, an unprotected wireless network, the network topology is\n\
    \   revealed to anyone who successfully listens to the control messages.\n   This\
    \ information may serve an attacker to acquire details about the\n   topology\
    \ and therefore to initiate more effective attacks against\n   routers in the\
    \ routing domain, e.g., by spoofing addresses of routers\n   in the network and\
    \ attracting traffic for these addresses.  Note that\n   this is independent of\
    \ the data traffic and purely protects the\n   control traffic, i.e., information\
    \ about the network topology.\n   In situations where the confidentiality of the\
    \ network topology is of\n   importance, regular cryptographic techniques, such\
    \ as use of OLSRv2\n   multicast control packets encrypted using IPsec (e.g.,\
    \ with a shared\n   secret key), can be applied to ensure that control traffic\
    \ can be\n   read and interpreted by only those authorized to do so.\n   Alternatively,\
    \ a security extension may specify a mechanism to\n   provide confidentiality\
    \ for control messages and/or packets.\n   However, unless the information about\
    \ the network topology itself is\n   confidential, integrity of control messages\
    \ (as specified in\n   Section 23.2) is sufficient to admit only trusted routers\
    \ (i.e.,\n   routers with valid credentials) to the network.\n"
- title: 23.4.  Interaction with External Routing Domains
  contents:
  - "23.4.  Interaction with External Routing Domains\n   This protocol provides a\
    \ basic mechanism for injecting external\n   routing information into this protocol's\
    \ routing domain.  Routing\n   information can also be extracted from this protocol's\
    \ Information\n   Bases, in particular the Routing Set, and injected into an external\n\
    \   routing domain, if the routing protocol governing that routing domain\n  \
    \ permits this.\n   When operating routers connecting a routing domain using this\n\
    \   protocol to an external routing domain, care MUST be taken not to\n   allow\
    \ potentially insecure and untrustworthy information to be\n   injected from this\
    \ routing domain to an external routing domain.\n   Care MUST also be taken to\
    \ validate the correctness of information\n   prior to it being injected, so as\
    \ to avoid polluting routing tables\n   with invalid information.\n   A recommended\
    \ way of extending connectivity from an external routing\n   domain to this routing\
    \ domain, which is routed using this protocol,\n   is to assign an IP prefix (under\
    \ the authority of the routers/\n   gateways connecting this routing domain with\
    \ the external routing\n   domain) exclusively to this routing domain and to configure\
    \ the\n   gateways to advertise routes for that IP prefix into the external\n\
    \   routing domain.\n"
- title: 23.5.  Mandatory Security Mechanisms
  contents:
  - "23.5.  Mandatory Security Mechanisms\n   A conformant implementation of OLSRv2\
    \ MUST, at minimum, implement the\n   security mechanisms specified in [RFC7183],\
    \ providing integrity and\n   replay protection of OLSRv2 control messages, including\
    \ of HELLO\n   messages specified by [RFC6130] and used by OLSRv2, by inclusion\
    \ of a\n   timestamp TLV and an Integrity Check Value (ICV) TLV.  This ICV TLV\n\
    \   uses a SHA-256-based HMAC and one or more manually managed shared\n   secret\
    \ keys.  The timestamp TLV is based on Portable Operating System\n   Interface\
    \ (POSIX) time, assuming router time synchronization.\n   The baseline use case,\
    \ for which this security mechanism provides\n   adequate integrity protection\
    \ without rekeying, is for short-lived\n   (for example, up to a couple of months)\
    \ OLSRv2 deployments.\n   Any deployment of OLSRv2 SHOULD use the security mechanism\
    \ specified\n   in [RFC7183] but MAY use another mechanism if more appropriate\
    \ in an\n   OLSRv2 deployment.  For example, for longer-term OLSRv2 deployments,\n\
    \   alternative security mechanisms (e.g., rekeying) SHOULD be\n   considered.\n"
- title: 23.6.  Key Management
  contents:
  - "23.6.  Key Management\n   This specification, as well as [RFC7183], does not\
    \ mandate automated\n   key management (AKM) as part of the security architecture\
    \ for OLSRv2.\n   While some use cases for OLSRv2 may require AKM, the baseline\n\
    \   assumption is that many use cases do not, for the reasons detailed\n   below.\n\
    \   Bootstrapping a key is hard in a radio network, where it is, in\n   general,\
    \ not possible to determine from where a received signal was\n   transmitted or\
    \ if two transmissions come from the same or from\n   different sources.\n   The\
    \ widespread use of radio networks and mobile phone networks works\n   under the\
    \ assumptions that (i) secret information is embedded in\n   mobile phones at\
    \ manufacture, and (ii) a centralized database of this\n   is accessible during\
    \ the network lifetime.\n   As a primary use case of a MANET is to provide connectivity\
    \ without\n   centralized entities and with minimal management, a solution such\
    \ as\n   described in the previous paragraph is not feasible.  In many\n   instances,\
    \ a cryptographic authority may not be present in the MANET\n   at all, since\
    \ such a cryptographic authority would be too vulnerable.\n   Due to the potentially\
    \ dynamic topology of a MANET, a cryptographic\n   authority may also become unreachable\
    \ (to some or all of the MANET\n   routers) without prior warning.\n   [BCP107]\
    \ provides guidelines for cryptographic key management.\n   Specifically, Section\
    \ 2.1 sets forth requirements for when AKM is\n   required, and Section 2.2 sets\
    \ forth conditions under which manual\n   key management is acceptable.\n   Section\
    \ 2.1 of [BCP107] stipulates that \"Automated key management\n   MUST be used\
    \ if any of [a set of given] conditions hold\".  These\n   conditions are listed\
    \ below, and arguments for each are provided in\n   regard to their applicability\
    \ for the baseline use case of OLSRv2.\n   o  A party will have to manage n^2\
    \ static keys, where n may become\n      large.\n      The baseline use case of\
    \ OLSRv2 uses only one or a small set of\n      manually managed shared secrets\
    \ in the whole MANET.\n   o  Any stream cipher (such as RC4 [RFC6229][RC4], AES-CTR\n\
    \      [RFC3610][NIST-SP-800-38A], or AES-CCM [RFC3686][NIST-SP-800-38C])\n  \
    \    is used.\n      A stream cipher is not envisioned for use to generate ICVs\
    \ for\n      OLSRv2 control messages.\n   o  An initialization vector (IV) might\
    \ be reused, especially an\n      implicit IV.  Note that random or pseudo-random\
    \ explicit IVs are\n      not a problem unless the probability of repetition is\
    \ high.\n      An IV is not envisioned for use to generate ICVs for OLSRv2\n \
    \     control messages.\n   o  Large amounts of data might need to be encrypted\
    \ in a short time,\n      causing frequent change of the short-term session key.\n\
    \      Integrity Check Values (ICVs) are required only for OLSRv2 control\n  \
    \    messages, which are low-volume messages.\n   o  Long-term session keys are\
    \ used by more than two parties.\n      Multicast is a necessary exception, but\
    \ multicast key management\n      standards are emerging in order to avoid this\
    \ in the future.\n      Sharing long-term session keys should generally be discouraged.\n\
    \      OLSRv2 control messages are all sent using link-local multicast.\n   o\
    \  The likely operational environment is one where personnel (or\n      device)\
    \ turnover is frequent, causing frequent change of the\n      short-term session\
    \ key.\n      This is not an intended deployment of OLSRv2.  For longer-term\n\
    \      OLSRv2 deployments, alternative security mechanisms (e.g.,\n      including\
    \ rekeying) SHOULD be considered.\n   Section 2.2 of [BCP107] stipulates that\
    \ \"Manual key management may be\n   a reasonable approach in any of [a given\
    \ set of] situations\".  These\n   situations are listed below, and arguments\
    \ for each are provided in\n   regard to their applicability for the baseline\
    \ use case of OLSRv2.\n   o  The environment has very limited available bandwidth\
    \ or very high\n      round-trip times.  Public key systems tend to require long\n\
    \      messages and lots of computation; symmetric key alternatives, such\n  \
    \    as Kerberos, often require several round trips and interaction\n      with\
    \ third parties.\n      As previously noted, there may not be the required infrastructure\n\
    \      (cryptographic authority) present (or, if present, may not be\n      reachable)\
    \ in the MANET.  Bandwidth in a MANET is commonly\n      limited, both by being\
    \ a radio environment and by the need for any\n      signaling to consume a minimal\
    \ proportion thereof, and round trip\n      times may also be significant.\n \
    \  o  The information being protected has low value.\n      This depends on the\
    \ OLSRv2 use case, but the information being\n      protected is OLSRv2 control\
    \ traffic, which is of at least moderate\n      value; thus, this case does not\
    \ apply.\n   o  The total volume of traffic over the entire lifetime of the long-\n\
    \      term session key will be very low.\n      Integrity Check Values (ICVs)\
    \ are required only for OLSRv2 control\n      messages, which are low-volume messages.\n\
    \   o  The scale of each deployment is very limited.\n      A typical use case\
    \ for OLSRv2 may involve only tens of devices --\n      with even the largest\
    \ use cases for OLSRv2 being small by Internet\n      standards.\n"
- title: 24.  IANA Considerations
  contents:
  - "24.  IANA Considerations\n   This specification defines one Message Type, which\
    \ has been allocated\n   from the \"Message Types\" registry of [RFC5444], two\
    \ Message TLV\n   Types, which have been allocated from the \"Message TLV Types\"\
    \n   registry of [RFC5444], and four Address Block TLV Types, which have\n   been\
    \ allocated from the \"Address Block TLV Types\" registry of\n   [RFC5444].\n"
- title: '24.1.  Expert Review: Evaluation Guidelines'
  contents:
  - "24.1.  Expert Review: Evaluation Guidelines\n   For the registries where an Expert\
    \ Review is required, the designated\n   expert SHOULD take the same general recommendations\
    \ into\n   consideration as are specified by [RFC5444].\n"
- title: 24.2.  Message Types
  contents:
  - "24.2.  Message Types\n   This specification defines one Message Type, allocated\
    \ from the 0-223\n   range of the \"Message Types\" namespace defined in [RFC5444],\
    \ as\n   specified in Table 8.\n          +------+----------------------------------------------+\n\
    \          | Type | Description                                  |\n         \
    \ +------+----------------------------------------------+\n          |  1   |\
    \ TC : Topology Control (MANET-wide signaling) |\n          +------+----------------------------------------------+\n\
    \                     Table 8: Message Type Assignment\n"
- title: 24.3.  Message-Type-Specific TLV Type Registries
  contents:
  - "24.3.  Message-Type-Specific TLV Type Registries\n   IANA has created a registry\
    \ for Message-Type-specific Message TLVs\n   for TC messages, in accordance with\
    \ Section 6.2.1 of [RFC5444] and\n   with initial assignments and allocation policies\
    \ as specified in\n   Table 9.\n               +---------+-------------+-------------------+\n\
    \               |   Type  | Description | Allocation Policy |\n              \
    \ +---------+-------------+-------------------+\n               | 128-223 | Unassigned\
    \  | Expert Review     |\n               +---------+-------------+-------------------+\n\
    \            Table 9: TC Message-Type-Specific Message TLV Types\n   IANA has\
    \ created a registry for Message-Type-specific Address Block\n   TLVs for TC messages,\
    \ in accordance with Section 6.2.1 of [RFC5444]\n   and with initial assignments\
    \ and allocation policies as specified in\n   Table 10.\n               +---------+-------------+-------------------+\n\
    \               |   Type  | Description | Allocation Policy |\n              \
    \ +---------+-------------+-------------------+\n               | 128-223 | Unassigned\
    \  | Expert Review     |\n               +---------+-------------+-------------------+\n\
    \        Table 10: TC Message-Type-Specific Address Block TLV Types\n"
- title: 24.4.  Message TLV Types
  contents:
  - "24.4.  Message TLV Types\n   This specification defines two Message TLV Types,\
    \ which have been\n   allocated from the \"Message TLV Types\" namespace defined\
    \ in\n   [RFC5444].  IANA has made allocations in the 0-127 range for these\n\
    \   types.  Two new Type Extension registries have been created with\n   assignments\
    \ as specified in Table 11 and Table 12.  Specifications of\n   these TLVs are\
    \ in Section 13.3.1.  Each of these TLVs MUST NOT be\n   included more than once\
    \ in a Message TLV Block.\n   +-------------+------+-----------+---------------------+------------+\n\
    \   |     Name    | Type |    Type   | Description         | Allocation |\n  \
    \ |             |      | Extension |                     | Policy     |\n   +-------------+------+-----------+---------------------+------------+\n\
    \   | MPR_WILLING |  7   |     0     | Bits 0-3 specify    |            |\n  \
    \ |             |      |           | the originating     |            |\n   |\
    \             |      |           | router's            |            |\n   |  \
    \           |      |           | willingness to act  |            |\n   |    \
    \         |      |           | as a flooding MPR;  |            |\n   |      \
    \       |      |           | bits 4-7 specify    |            |\n   |        \
    \     |      |           | the originating     |            |\n   |          \
    \   |      |           | router's            |            |\n   |            \
    \ |      |           | willingness to act  |            |\n   |             |\
    \      |           | as a routing MPR.   |            |\n   | MPR_WILLING |  7\
    \   |   1-255   | Unassigned.         | Expert     |\n   |             |     \
    \ |           |                     | Review     |\n   +-------------+------+-----------+---------------------+------------+\n\
    \            Table 11: Message TLV Type Assignment: MPR_WILLING\n   +--------------+------+-----------+--------------------+------------+\n\
    \   |     Name     | Type |    Type   | Description        | Allocation |\n  \
    \ |              |      | Extension |                    | Policy     |\n   +--------------+------+-----------+--------------------+------------+\n\
    \   | CONT_SEQ_NUM |  8   |     0     | COMPLETE:          |            |\n  \
    \ |              |      |           | Specifies a        |            |\n   |\
    \              |      |           | content sequence   |            |\n   |  \
    \            |      |           | number for this    |            |\n   |    \
    \          |      |           | complete message.  |            |\n   | CONT_SEQ_NUM\
    \ |  8   |     1     | INCOMPLETE:        |            |\n   |              |\
    \      |           | Specifies a        |            |\n   |              |  \
    \    |           | content sequence   |            |\n   |              |    \
    \  |           | number for this    |            |\n   |              |      |\
    \           | incomplete         |            |\n   |              |      |  \
    \         | message.           |            |\n   | CONT_SEQ_NUM |  8   |   2-255\
    \   | Unassigned.        | Expert     |\n   |              |      |          \
    \ |                    | Review     |\n   +--------------+------+-----------+--------------------+------------+\n\
    \            Table 12: Message TLV Type Assignment: CONT_SEQ_NUM\n   Type extensions\
    \ indicated as Expert Review SHOULD be allocated as\n   described in [RFC5444],\
    \ based on Expert Review as defined in\n   [RFC5226].\n"
- title: 24.5.  Address Block TLV Types
  contents:
  - "24.5.  Address Block TLV Types\n   This specification defines four Address Block\
    \ TLV Types, which have\n   been allocated from the \"Address Block TLV Types\"\
    \ namespace defined\n   in [RFC5444].  IANA has made allocations in the 8-127\
    \ range for these\n   types.  Four new Type Extension registries have been created\
    \ with\n   assignments as specified in Tables 13, 14, 15, and 16.\n   Specifications\
    \ of these TLVs are in Section 13.3.2.\n   The registration procedure for the\
    \ \"LINK_METRIC Address Block TLV\n   Type Extensions\" registry is Expert Review.\n\
    \   +-------------+------+-----------+----------------------------------+\n  \
    \ |     Name    | Type |    Type   | Description                      |\n   |\
    \             |      | Extension |                                  |\n   +-------------+------+-----------+----------------------------------+\n\
    \   | LINK_METRIC |  7   |     0     | Link metric meaning assigned by  |\n  \
    \ |             |      |           | administrative action.           |\n   |\
    \ LINK_METRIC |  7   |   1-223   | Unassigned.                      |\n   | LINK_METRIC\
    \ |  7   |  224-255  | Reserved for Experimental Use    |\n   +-------------+------+-----------+----------------------------------+\n\
    \         Table 13: Address Block TLV Type Assignment: LINK_METRIC\n   All LINK_METRIC\
    \ TLVs, whatever their type extension, MUST use their\n   value field to encode\
    \ the kind and value (in the interval\n   MINIMUM_METRIC to MAXIMUM_METRIC, inclusive)\
    \ of a link metric as\n   specified in Sections 6 and 13.3.2.  An assignment of\
    \ a LINK_METRIC\n   TLV type extension MUST specify the physical meaning of the\
    \ link\n   metric and the mapping of that physical meaning to the representable\n\
    \   values in the indicated interval.\n   +------+------+-----------+----------------------------+------------+\n\
    \   | Name | Type |    Type   | Description                | Allocation |\n  \
    \ |      |      | Extension |                            | Policy     |\n   +------+------+-----------+----------------------------+------------+\n\
    \   | MPR  |  8   |     0     | Specifies that a given     |            |\n  \
    \ |      |      |           | network address is of a    |            |\n   |\
    \      |      |           | router selected as a       |            |\n   |  \
    \    |      |           | flooding MPR (FLOODING =   |            |\n   |    \
    \  |      |           | 1), that a given network   |            |\n   |      |\
    \      |           | address is of a router     |            |\n   |      |  \
    \    |           | selected as a routing MPR  |            |\n   |      |    \
    \  |           | (ROUTING = 2), or both     |            |\n   |      |      |\
    \           | (FLOOD_ROUTE = 3).         |            |\n   | MPR  |  8   |  \
    \ 1-255   | Unassigned.                | Expert     |\n   |      |      |    \
    \       |                            | Review     |\n   +------+------+-----------+----------------------------+------------+\n\
    \             Table 14: Address Block TLV Type Assignment: MPR\n   +---------------+------+-----------+-------------------+------------+\n\
    \   |      Name     | Type |    Type   | Description       | Allocation |\n  \
    \ |               |      | Extension |                   | Policy     |\n   +---------------+------+-----------+-------------------+------------+\n\
    \   | NBR_ADDR_TYPE |  9   |     0     | Specifies that a  |            |\n  \
    \ |               |      |           | given network     |            |\n   |\
    \               |      |           | address is of a   |            |\n   |  \
    \             |      |           | neighbor reached  |            |\n   |    \
    \           |      |           | via the           |            |\n   |      \
    \         |      |           | originating       |            |\n   |        \
    \       |      |           | router, if it is  |            |\n   |          \
    \     |      |           | an originator     |            |\n   |            \
    \   |      |           | address           |            |\n   |              \
    \ |      |           | (ORIGINATOR = 1), |            |\n   |               |\
    \      |           | is a routable     |            |\n   |               |  \
    \    |           | address (ROUTABLE |            |\n   |               |    \
    \  |           | = 2), or if it is |            |\n   |               |      |\
    \           | both              |            |\n   |               |      |  \
    \         | (ROUTABLE_ORIG =  |            |\n   |               |      |    \
    \       | 3).               |            |\n   | NBR_ADDR_TYPE |  9   |   1-255\
    \   | Unassigned.       | Expert     |\n   |               |      |          \
    \ |                   | Review     |\n   +---------------+------+-----------+-------------------+------------+\n\
    \        Table 15: Address Block TLV Type Assignment: NBR_ADDR_TYPE\n   +---------+------+-----------+-------------------------+------------+\n\
    \   |   Name  | Type |    Type   | Description             | Allocation |\n  \
    \ |         |      | extension |                         | Policy     |\n   +---------+------+-----------+-------------------------+------------+\n\
    \   | GATEWAY |  10  |     0     | Specifies that a given  |            |\n  \
    \ |         |      |           | network address is      |            |\n   |\
    \         |      |           | reached via a gateway   |            |\n   |  \
    \       |      |           | on the originating      |            |\n   |    \
    \     |      |           | router, with value      |            |\n   |      \
    \   |      |           | equal to the number of  |            |\n   |        \
    \ |      |           | hops.                   |            |\n   | GATEWAY |\
    \  10  |   1-255   |                         | Expert     |\n   |         |  \
    \    |           |                         | Review     |\n   +---------+------+-----------+-------------------------+------------+\n\
    \           Table 16: Address Block TLV Type Assignment: GATEWAY\n   Type extensions\
    \ indicated as Expert Review SHOULD be allocated as\n   described in [RFC5444],\
    \ based on Expert Review as defined in\n   [RFC5226].\n"
- title: 24.6.  NBR_ADDR_TYPE and MPR Values
  contents:
  - "24.6.  NBR_ADDR_TYPE and MPR Values\n   Note: This section does not require any\
    \ IANA action, as the required\n   information is included in the descriptions\
    \ of the MPR and\n   NBR_ADDR_TYPE Address Block TLVs allocated in Section 24.5.\
    \  This\n   information is recorded here for clarity and for use elsewhere in\n\
    \   this specification.\n   The Values that the MPR Address Block TLV can use\
    \ are as follows:\n   o  FLOODING := 1;\n   o  ROUTING := 2;\n   o  FLOOD_ROUTE\
    \ := 3.\n   The Values that the NBR_ADDR_TYPE Address Block TLV can use are\n\
    \   follows:\n   o  ORIGINATOR := 1;\n   o  ROUTABLE := 2;\n   o  ROUTABLE_ORIG\
    \ := 3.\n"
- title: 25.  Contributors
  contents:
  - "25.  Contributors\n   This specification is the result of the joint efforts of\
    \ the\n   following contributors, listed alphabetically.\n   o  Cedric Adjih,\
    \ INRIA, France, <Cedric.Adjih@inria.fr>\n   o  Emmanuel Baccelli, INRIA , France,\
    \ <Emmanuel.Baccelli@inria.fr>\n   o  Thomas Heide Clausen, LIX, France, <T.Clausen@computer.org>\n\
    \   o  Justin Dean, NRL, USA, <jdean@itd.nrl.navy.mil>\n   o  Christopher Dearlove,\
    \ BAE Systems, UK,\n      <chris.dearlove@baesystems.com>\n   o  Ulrich Herberg,\
    \ Fujitsu Laboratories of America, USA,\n      <ulrich@herberg.name>\n   o  Satoh\
    \ Hiroki, Hitachi SDL, Japan, <hiroki.satoh.yj@hitachi.com>\n   o  Philippe Jacquet,\
    \ Alcatel Lucent Bell Labs, France,\n      <philippe.jacquet@alcatel-lucent.fr>\n\
    \   o  Monden Kazuya, Hitachi SDL, Japan, <kazuya.monden.vw@hitachi.com>\n   o\
    \  Kenichi Mase, Niigata University, Japan, <mase@ie.niigata-u.ac.jp>\n   o  Ryuji\
    \ Wakikawa, Toyota, Japan, <ryuji@sfc.wide.ad.jp>\n"
- title: 26.  Acknowledgments
  contents:
  - "26.  Acknowledgments\n   The authors would like to acknowledge the team behind\
    \ OLSRv1, as\n   listed in RFC 3626, including Anis Laouiti (INT), Pascale Minet\n\
    \   (INRIA), Paul Muhlethaler (INRIA), Amir Qayyum (M.A. Jinnah\n   University),\
    \ and Laurent Viennot (INRIA) for their contributions.\n   The authors would like\
    \ to gratefully acknowledge the following people\n   for intense technical discussions,\
    \ early reviews, and comments on the\n   specification and its components (listed\
    \ alphabetically): Khaldoun Al\n   Agha (LRI), Teco Boot (Infinity Networks),\
    \ Ross Callon (Juniper),\n   Song-Yean Cho (Samsung), Alan Cullen (BAE Systems),\
    \ Louise Lamont\n   (CRC), Li Li (CRC), Joseph Macker (NRL), Richard Ogier (SRI),\
    \ Charles\n   E. Perkins (Futurewei), Henning Rogge (Frauenhofer FKIE), and the\n\
    \   entire IETF MANET Working Group.\n   Finally, the authors would like to express\
    \ their gratitude to the\n   Area Directors for providing valuable review comments\
    \ during the IESG\n   evaluation, in particular (listed alphabetically) Benoit\
    \ Claise,\n   Adrian Farrel, Stephen Farrell, Barry Leiba, Pete Resnick, and Martin\n\
    \   Stiemerling.\n"
- title: 27.  References
  contents:
  - '27.  References

    '
- title: 27.1.  Normative References
  contents:
  - "27.1.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC5148]   Clausen, T., Dearlove, C., and B. Adamson, \"Jitter\n\
    \               Considerations in Mobile Ad Hoc Networks (MANETs)\", RFC\n   \
    \            5148, February 2008.\n   [RFC5226]   Narten, T. and H. Alvestrand,\
    \ \"Guidelines for Writing an\n               IANA Considerations Section in RFCs\"\
    , BCP 26, RFC 5226,\n               May 2008.\n   [RFC5444]   Clausen, T., Dearlove,\
    \ C., Dean, J., and C. Adjih,\n               \"Generalized Mobile Ad Hoc Network\
    \ (MANET) Packet/Message\n               Format\", RFC 5444, February 2009.\n\
    \   [RFC5497]   Clausen, T. and C. Dearlove, \"Representing Multi-Value\n    \
    \           Time in Mobile Ad Hoc Networks (MANETs)\", RFC 5497, March\n     \
    \          2009.\n   [RFC5498]   Chakeres, I., \"IANA Allocations for Mobile Ad\
    \ Hoc Network\n               (MANET) Protocols\", RFC 5498, March 2009.\n   [RFC6130]\
    \   Clausen, T., Dearlove, C., and J. Dean, \"Mobile Ad Hoc\n               Network\
    \ (MANET) Neighborhood Discovery Protocol (NHDP)\",\n               RFC 6130,\
    \ April 2011.\n   [RFC7182]   Herberg, U., Clausen, T., and C. Dearlove, \"Integrity\n\
    \               Check Value and Timestamp TLV Definitions for Mobile Ad\n    \
    \           Hoc Networks (MANETs)\", RFC 7182, April 2014.\n   [RFC7183]   Herberg,\
    \ U., Dearlove, C., and T. Clausen, \"Integrity\n               Protection for\
    \ the Neighborhood Discovery Protocol (NHDP)\n               and Optimized Link\
    \ State Routing Protocol Version 2\n               (OLSRv2)\", RFC 7183, April\
    \ 2014.\n"
- title: 27.2.  Informative References
  contents:
  - "27.2.  Informative References\n   [BCP107]    Bellovin, S. and R. Housley, \"\
    Guidelines for\n               Cryptographic Key Management\", BCP 107, RFC 4107,\
    \ June\n               2005.\n   [FSLS]      Santivanez, C., Ramanathan, R., and\
    \ I. Stavrakakis,\n               \"Making Link-State Routing Scale for Ad Hoc\
    \ Networks\",\n               MobiHoc '01, Proceedings of the 2nd ACM International\n\
    \               Symposium on Mobile Ad Hoc Networking & Computing, 2001.\n   [FSR]\
    \       Pei, G., Gerla, M., and T. Chen, \"Fisheye State Routing\n           \
    \    in Mobile Ad Hoc Networks\", ICDCS Workshop on Wireless\n               Networks\
    \ and Mobile Computing, 2000.\n   [HIPERLAN]  ETSI, \"Radio Equipment and Systems\
    \ (RES); HIgh\n               PErformance Radio Local Area Network (HIPERLAN)\
    \ Type 1;\n               Functional Specification\", ETSI 300-652, June 1996.\n\
    \   [HIPERLAN2] Jacquet, P., Minet, P., Muhlethaler, P., and N. Rivierre,\n  \
    \             \"Increasing Reliability in Cable-Free Radio LANs: Low\n       \
    \        Level Forwarding in HIPERLAN\", Wireless Personal\n               Communications,\
    \ Volume 4, Issue 1, 1997.\n   [MPR]       Qayyum, A., Viennot, L., and A. Laouiti,\
    \ \"Multipoint\n               relaying: An efficient technique for flooding in\
    \ mobile\n               wireless Networks\", INRIA, No. 3898, March 2000.\n \
    \  [McCabe]    McCabe, A., Dearlove, C., Fredin, M., and L. Axelsson,\n      \
    \         \"Scalability modelling of ad hoc routing protocols - a\n          \
    \     comparison of OLSR and DSR\", Scandinavian Wireless Adhoc\n            \
    \   Networks '04, 2004.\n   [NIST-SP-800-38A]\n               National Institute\
    \ of Standards and Technology,\n               \"Recommendation for Block Cipher\
    \ Modes of Operation:\n               Methods and Techniques\", Special Publication\
    \ 800-38A,\n               December 2001.\n   [NIST-SP-800-38C]\n            \
    \   National Institute of Standards and Technology,\n               \"Recommendation\
    \ for Block Cipher Modes of Operation: The\n               CCM Mode for Authentication\
    \ and Confidentiality\", Special\n               Publication 800-38C, May 2004.\n\
    \   [RC4]       Schneier, B., \"Applied Cryptography: Protocols,\n           \
    \    Algorithms, and Source Code in C\", Second Edition, John\n              \
    \ Wiley and Sons, New York, 1996.\n   [RFC2501]   Corson, M. and J. Macker, \"\
    Mobile Ad hoc Networking\n               (MANET): Routing Protocol Performance\
    \ Issues and\n               Evaluation Considerations\", RFC 2501, January 1999.\n\
    \   [RFC3610]   Whiting, D., Housley, R., and N. Ferguson, \"Counter with\n  \
    \             CBC-MAC (CCM)\", RFC 3610, September 2003.\n   [RFC3626]   Clausen,\
    \ T. and P. Jacquet, \"Optimized Link State Routing\n               Protocol (OLSR)\"\
    , RFC 3626, October 2003.\n   [RFC3686]   Housley, R., \"Using Advanced Encryption\
    \ Standard (AES)\n               Counter Mode With IPsec Encapsulating Security\
    \ Payload\n               (ESP)\", RFC 3686, January 2004.\n   [RFC6229]   Strombergson,\
    \ J. and S. Josefsson, \"Test Vectors for the\n               Stream Cipher RC4\"\
    , RFC 6229, May 2011.\n"
- title: Appendix A.  Constraints
  contents:
  - "Appendix A.  Constraints\n   Updates to the Local Information Base, the Neighborhood\
    \ Information\n   Base, or the Topology Information Base MUST ensure that all\n\
    \   constraints specified in this appendix are maintained, as well as\n   those\
    \ specified in [RFC6130].  This is the case for the processing,\n   specified\
    \ in this document.  Any protocol extension or outside\n   process, which updates\
    \ the Neighborhood Information Base or the\n   Topology Information Base, MUST\
    \ also ensure that these constraints\n   are maintained.\n   In each Originator\
    \ Tuple:\n   o  O_orig_addr MUST NOT equal any other O_orig_addr.\n   o  O_orig_addr\
    \ MUST NOT equal this router's originator address.\n   In each Local Attached\
    \ Network Tuple:\n   o  AL_net_addr MUST NOT equal any other AL_net_addr.\n  \
    \ o  AL_net_addr MUST NOT equal or be a sub-range of any network\n      address\
    \ in the I_local_iface_addr_list of any Local Interface\n      Tuple.\n   o  AL_net_addr\
    \ MUST NOT equal this router's originator address or\n      equal the O_orig_addr\
    \ in any Originator Tuple.\n   o  AL_dist MUST NOT be less than zero.\n   In each\
    \ Link Tuple:\n   o  L_neighbor_iface_addr_list MUST NOT contain any network address\n\
    \      that AL_net_addr of any Local Attached Network Tuple equals or is\n   \
    \   a sub-range of.\n   o  If L_in_metric != UNKNOWN_METRIC, then L_in_metric\
    \ MUST be\n      representable in the defined compressed form.\n   o  If L_out_metric\
    \ != UNKNOWN_METRIC, then L_out_metric MUST be\n      representable in the defined\
    \ compressed form.\n   o  If L_mpr_selector = true, then L_status = SYMMETRIC.\n\
    \   In each Neighbor Tuple:\n   o  N_orig_addr MUST NOT be changed to unknown.\n\
    \   o  N_orig_addr MUST NOT equal this router's originator address or\n      equal\
    \ O_orig_addr in any Originator Tuple.\n   o  N_orig_addr MUST NOT equal the AL_net_addr\
    \ in any Local Attached\n      Network Tuple.\n   o  If N_orig_addr != unknown,\
    \ then N_orig_addr MUST NOT equal the\n      N_orig_addr in any other Neighbor\
    \ Tuple.\n   o  N_neighbor_addr_list MUST NOT contain any network address that\n\
    \      includes this router's originator address, the O_orig_addr in any\n   \
    \   Originator Tuple, or equal or have as a sub-range the AL_net_addr\n      in\
    \ any Local Attached Network Tuple.\n   o  If N_orig_addr = unknown, then N_will_flooding\
    \ = WILL_NEVER,\n      N_will_routing = WILL_NEVER, N_flooding_mpr = false, N_routing_mpr\n\
    \      = false, N_mpr_selector = false, and N_advertised = false.\n   o  N_in_metric\
    \ MUST equal the minimum value of the L_in_metric values\n      of all corresponding\
    \ Link Tuples with L_status = SYMMETRIC and\n      L_in_metric != UNKNOWN_METRIC,\
    \ if any; otherwise, N_in_metric =\n      UNKNOWN_METRIC.\n   o  N_out_metric\
    \ MUST equal the minimum value of the L_out_metric\n      values of all corresponding\
    \ Link Tuples with L_status = SYMMETRIC\n      and L_out_metric != UNKNOWN_METRIC,\
    \ if any; otherwise,\n      N_out_metric = UNKNOWN_METRIC.\n   o  N_will_flooding\
    \ and N_will_routing MUST be in the range from\n      WILL_NEVER to WILL_ALWAYS,\
    \ inclusive.\n   o  If N_flooding_mpr = true, then N_symmetric MUST be true,\n\
    \      N_out_metric MUST NOT equal UNKNOWN_METRIC, and N_will_flooding\n     \
    \ MUST NOT equal WILL_NEVER.\n   o  If N_routing_mpr = true, then N_symmetric\
    \ MUST be true,\n      N_in_metric MUST NOT equal UNKNOWN_METRIC, and N_will_routing\
    \ MUST\n      NOT equal WILL_NEVER.\n   o  If N_symmetric = true and N_flooding_mpr\
    \ = false, then\n      N_will_flooding MUST NOT equal WILL_ALWAYS.\n   o  If N_symmetric\
    \ = true and N_routing_mpr = false, then\n      N_will_routing MUST NOT equal\
    \ WILL_ALWAYS.\n   o  If N_mpr_selector = true, then N_advertised MUST be true.\n\
    \   o  If N_advertised = true, then N_symmetric MUST be true and\n      N_out_metric\
    \ MUST NOT equal UNKNOWN_METRIC.\n   In each Lost Neighbor Tuple:\n   o  NL_neighbor_addr\
    \ MUST NOT include this router's originator\n      address, the O_orig_addr in\
    \ any Originator Tuple, or equal or have\n      as a sub-range the AL_net_addr\
    \ in any Local Attached Network\n      Tuple.\n   In each 2-Hop Tuple:\n   o \
    \ N2_2hop_addr MUST NOT equal this router's originator address,\n      equal the\
    \ O_orig_addr in any Originator Tuple, or equal or have as\n      a sub-range\
    \ the AL_net_addr in any Local Attached Network Tuple.\n   o  If N2_in_metric\
    \ != UNKNOWN_METRIC, then N2_in_metric MUST be\n      representable in the defined\
    \ compressed form.\n   o  If N2_out_metric != UNKNOWN_METRIC, then N2_out_metric\
    \ MUST be\n      representable in the defined compressed form.\n   In each Advertising\
    \ Remote Router Tuple:\n   o  AR_orig_addr MUST NOT be in any network address\
    \ in the\n      I_local_iface_addr_list in any Local Interface Tuple or be in\
    \ the\n      IR_local_iface_addr in any Removed Interface Address Tuple.\n   o\
    \  AR_orig_addr MUST NOT equal this router's originator address or\n      equal\
    \ the O_orig_addr in any Originator Tuple.\n   o  AR_orig_addr MUST NOT be in\
    \ the AL_net_addr in any Local Attached\n      Network Tuple.\n   o  AR_orig_addr\
    \ MUST NOT equal the AR_orig_addr in any other\n      Advertising Remote Router\
    \ Tuple.\n   In each Router Topology Tuple:\n   o  There MUST be an Advertising\
    \ Remote Router Tuple with AR_orig_addr\n      = TR_from_orig_addr.\n   o  TR_to_orig_addr\
    \ MUST NOT be in any network address in the\n      I_local_iface_addr_list in\
    \ any Local Interface Tuple or be in the\n      IR_local_iface_addr in any Removed\
    \ Interface Address Tuple.\n   o  TR_to_orig_addr MUST NOT equal this router's\
    \ originator address or\n      equal the O_orig_addr in any Originator Tuple.\n\
    \   o  TR_to_orig_addr MUST NOT be in the AL_net_addr in any Local\n      Attached\
    \ Network Tuple.\n   o  The ordered pair (TR_from_orig_addr, TR_to_orig_addr)\
    \ MUST NOT\n      equal the corresponding pair for any other Router Topology Tuple.\n\
    \   o  TR_seq_number MUST NOT be greater than AR_seq_number in the\n      Advertising\
    \ Remote Router Tuple with AR_orig_addr =\n      TR_from_orig_addr.\n   o  TR_metric\
    \ MUST be representable in the defined compressed form.\n   In each Routable Address\
    \ Topology Tuple:\n   o  There MUST be an Advertising Remote Router Tuple with\
    \ AR_orig_addr\n      = TA_from_orig_addr.\n   o  TA_dest_addr MUST be routable.\n\
    \   o  TA_dest_addr MUST NOT overlap any network address in the\n      I_local_iface_addr_list\
    \ in any Local Interface Tuple or overlap\n      the IR_local_iface_addr in any\
    \ Removed Interface Address Tuple.\n   o  TA_dest_addr MUST NOT include this router's\
    \ originator address or\n      include the O_orig_addr in any Originator Tuple.\n\
    \   o  TA_dest_addr MUST NOT equal or have as a sub-range the AL_net_addr\n  \
    \    in any Local Attached Network Tuple.\n   o  The ordered pair (TA_from_orig_addr,\
    \ TA_dest_addr) MUST NOT equal\n      the corresponding pair for any other Attached\
    \ Network Tuple.\n   o  TA_seq_number MUST NOT be greater than AR_seq_number in\
    \ the\n      Advertising Remote Router Tuple with AR_orig_addr =\n      TA_from_orig_addr.\n\
    \   o  TA_metric MUST be representable in the defined compressed form.\n   In\
    \ each Attached Network Tuple:\n   o  There MUST be an Advertising Remote Router\
    \ Tuple with AR_orig_addr\n      = AN_orig_addr.\n   o  AN_net_addr MUST NOT equal\
    \ or be a sub-range of any network\n      address in the I_local_iface_addr_list\
    \ in any Local Interface\n      Tuple or equal or be a sub-range of the IR_local_iface_addr\
    \ in any\n      Removed Interface Address Tuple.\n   o  AN_net_addr MUST NOT equal\
    \ this router's originator address or\n      equal the O_orig_addr in any Originator\
    \ Tuple.\n   o  The ordered pair (AN_orig_addr, AN_net_addr) MUST NOT equal the\n\
    \      corresponding pair for any other Attached Network Tuple.\n   o  AN_seq_number\
    \ MUST NOT be greater than AR_seq_number in the\n      Advertising Remote Router\
    \ Tuple with AR_orig_addr = AN_orig_addr.\n   o  AN_dist MUST NOT be less than\
    \ zero.\n   o  AN_metric MUST be representable in the defined compressed form.\n"
- title: Appendix B.  Example Algorithm for Calculating MPRs
  contents:
  - "Appendix B.  Example Algorithm for Calculating MPRs\n   The following specifies\
    \ an algorithm that MAY be used to select an\n   MPR Set given a Neighbor Graph,\
    \ as defined in Section 18.2 and\n   Section 18.3.\n   This algorithm selects\
    \ an MPR Set M that is a subset of the set N1\n   that is part of the Neighbor\
    \ Graph.  This algorithm assumes that a\n   subset I of N1 is pre-selected as\
    \ MPRs, i.e., that M will contain I.\n"
- title: B.1.  Additional Notation
  contents:
  - "B.1.  Additional Notation\n   The following additional notation, in addition\
    \ to that in\n   Section 18.2, will be used by this algorithm:\n   N:\n      A\
    \ subset of N2, consisting of those elements y in N2 such that\n      either d1(y)\
    \ is not defined, or there is at least one x in N1 such\n      that d(x,y) is\
    \ defined and d(x,y) < d1(y).\n   D(x):\n      For an element x in N1, the number\
    \ of elements y in N for which\n      d(x,y) is defined and has minimal value\
    \ among the d(z,y) for all z\n      in N1.\n   R(x,M):\n      For an element x\
    \ in N1, the number of elements y in N for which\n      d(x,y) is defined has\
    \ minimal value among the d(z,y) for all z in\n      N1 and no such minimal values\
    \ have z in M.  (Note that, denoting\n      the empty set by 0, D(x) = R(x,0).)\n"
- title: B.2.  MPR Selection Algorithm
  contents:
  - "B.2.  MPR Selection Algorithm\n   To create the MPR Set M, starting with M :=\
    \ I:\n   1.  Add all elements x in N1 that have W(x) = WILL_ALWAYS to M.\n   2.\
    \  For each element y in N for which there is only one element x in\n       N1\
    \ such that d2(x,y) is defined, add that element x to M.\n   3.  While there exists\
    \ any element x in N1 with R(x,M) > 0:\n       1.  Select an element x in N1 with\
    \ R(x,M) > 0 in the following\n           order of priority, and then add to M:\n\
    \           +  greatest W(x), THEN\n           +  greatest R(x,M), THEN\n    \
    \       +  greatest D(x), THEN\n           +  any choice, which MAY be based on\
    \ other criteria (for\n              example, a router MAY choose to prefer a\
    \ neighbor as an\n              MPR if that neighbor has already selected the\
    \ router as an\n              MPR of the same type, MAY prefer a neighbor based\
    \ on\n              information freshness, or MAY prefer a neighbor based on\n\
    \              length of time previously selected as an MPR) or MAY be\n     \
    \         random.\n   4.  OPTIONAL: consider each element x in M, but not in I,\
    \ in turn and\n       if x can be removed from M while still leaving it satisfying\
    \ the\n       definition of an MPR Set, then remove that element x from M.\n \
    \      Elements MAY be considered in any order, e.g., in order of\n       increasing\
    \ W(x).\n"
- title: Appendix C.  Example Algorithm for Calculating the Routing Set
  contents:
  - "Appendix C.  Example Algorithm for Calculating the Routing Set\n   The following\
    \ procedure is given as an example for calculating the\n   Routing Set using a\
    \ variation of Dijkstra's algorithm.  First, all\n   Routing Tuples are removed,\
    \ and then, using the selections and\n   definitions in Appendix C.1, the procedures\
    \ in the following sections\n   (each considered a \"stage\" of the processing)\
    \ are applied in turn.\n"
- title: C.1.  Local Interfaces and Neighbors
  contents:
  - "C.1.  Local Interfaces and Neighbors\n   The following selections and definitions\
    \ are made:\n   1.  For each Local Interface Tuple, select a network address from\
    \ its\n       I_local_iface_addr_list.  This is defined as the selected address\n\
    \       for this Local Interface Tuple.\n   2.  For each Link Tuple, the selected\
    \ address of its corresponding\n       Local Interface Tuple is defined as the\
    \ selected local address\n       for this Link Tuple.\n   3.  For each Neighbor\
    \ Tuple with N_symmetric = true and N_out_metric\n       != UNKNOWN_METRIC, select\
    \ a Link Tuple with L_status = SYMMETRIC\n       for which this is the corresponding\
    \ Neighbor Tuple and has\n       L_out_metric = N_out_metric.  This is defined\
    \ as the selected\n       Link Tuple for this Neighbor Tuple.\n   4.  For each\
    \ network address (N_orig_addr or in N_neighbor_addr_list,\n       the \"neighbor\
    \ address\") from a Neighbor Tuple with N_symmetric =\n       true and N_out_metric\
    \ != UNKNOWN_METRIC, select a Link Tuple (the\n       \"selected Link Tuple\"\
    ) from those for which this is the\n       corresponding Neighbor Tuple, have\
    \ L_status = SYMMETRIC, and have\n       L_out_metric = N_out_metric, by:\n  \
    \     1.  If there is such a Link Tuple whose\n           L_neighbor_iface_addr_list\
    \ contains the neighbor address,\n           select that Link Tuple.\n       2.\
    \  Otherwise, select the selected Link Tuple for this Neighbor\n           Tuple.\n\
    \       Then for this neighbor address:\n       3.  The selected local address\
    \ is defined as the selected local\n           address for the selected Link Tuple.\n\
    \       4.  The selected link address is defined as an address from the\n    \
    \       L_neighbor_iface_addr_list of the selected Link Tuple, if\n          \
    \ possible equal to this neighbor address.\n   5.  Routing Tuple preference is\
    \ decided by preference for minimum\n       R_metric, then for minimum R_dist,\
    \ and then for preference for\n       corresponding Neighbor Tuples in this order:\n\
    \       *  For greater N_will_routing.\n       *  For N_mpr_selector = true over\
    \ N_mpr_selector = false.\n       Note that preferred Routing Tuples SHOULD be\
    \ used.  Routing\n       Tuples with minimum R_metric MUST be used; this is specified\n\
    \       outside the definition of preference.  An implementation MAY\n       modify\
    \ this definition of preference (including for minimum\n       R_dist) without\
    \ otherwise affecting this algorithm.\n"
- title: C.2.  Add Neighbor Routers
  contents:
  - "C.2.  Add Neighbor Routers\n   The following procedure is executed once.\n  \
    \ 1.  For each Neighbor Tuple with N_symmetric = true and N_out_metric\n     \
    \  != UNKNOWN_METRIC, add a Routing Tuple with:\n       *  R_dest_addr := N_orig_addr;\n\
    \       *  R_next_iface_addr := selected link address for N_orig_addr;\n     \
    \  *  R_local_iface_addr := selected local address for N_orig_addr;\n       *\
    \  R_metric := N_out_metric;\n       *  R_dist := 1.\n"
- title: C.3.  Add Remote Routers
  contents:
  - "C.3.  Add Remote Routers\n   The following procedure is executed once.\n   1.\
    \  Add a label that may be \"used\" or \"unused\" to each Routing Tuple,\n   \
    \    with all initial values equal to unused.  (Note that this label\n       is\
    \ only required during this algorithm.)\n   2.  If there are no unused Routing\
    \ Tuples, then this stage is\n       complete; otherwise, repeat the following\
    \ until that is the case.\n       1.  Find the unused Routing Tuple with minimum\
    \ R_metric (if more\n           than one, pick any) and denote it the \"current\
    \ Routing\n           Tuple\".\n       2.  Mark the current Routing Tuple as used.\n\
    \       3.  For each Router Topology Tuple, with\n           TR_from_orig_addr\
    \ = R_dest_addr of the current Routing Tuple:\n           1.  Define:\n      \
    \         -  new_metric := R_metric of the current Routing Tuple +\n         \
    \         TR_metric;\n               -  new_dist := R_dist of the current Routing\
    \ Tuple + 1.\n           2.  If there is no Routing Tuple with R_dest_addr =\n\
    \               TR_to_orig_addr, then create an unused Routing Tuple\n       \
    \        with:\n               -  R_dest_addr := TR_to_orig_addr;\n          \
    \     -  R_next_iface_addr := R_next_iface_addr of the current\n             \
    \     Routing Tuple;\n               -  R_local_iface_addr := R_local_iface_addr\
    \ of the\n                  current Routing Tuple;\n               -  R_metric\
    \ := new_metric;\n               -  R_dist := new_dist.\n           3.  Otherwise,\
    \ if there is an unused Routing Tuple with\n               R_dest_addr = TR_to_orig_addr,\
    \ and either new_metric <\n               R_metric or (new_metric = R_metric and\
    \ the updated\n               Routing Tuple would be preferred), then update this\n\
    \               Routing Tuple to have:\n               -  R_next_iface_addr :=\
    \ R_next_iface_addr of the current\n                  Routing Tuple;\n       \
    \        -  R_local_iface_addr := R_local_iface_addr of the\n                \
    \  current Routing Tuple;\n               -  R_metric := new_metric;\n       \
    \        -  R_dist := new_dist.\n"
- title: C.4.  Add Neighbor Addresses
  contents:
  - "C.4.  Add Neighbor Addresses\n   The following procedure is executed once.\n\
    \   1.  For each Neighbor Tuple with N_symmetric = true and N_out_metric\n   \
    \    != UNKNOWN_METRIC:\n       1.  For each network address (the \"neighbor address\"\
    ) in\n           N_neighbor_addr_list, if the neighbor address is not equal to\n\
    \           the R_dest_addr of any Routing Tuple, then add a new Routing\n   \
    \        Tuple, with:\n           +  R_dest_addr := neighbor address;\n      \
    \     +  R_next_iface_addr := selected link address for the\n              neighbor\
    \ address;\n           +  R_local_iface_addr := selected local address for the\n\
    \              neighbor address;\n           +  R_metric := N_out_metric;\n  \
    \         +  R_dist := 1.\n"
- title: C.5.  Add Remote Routable Addresses
  contents:
  - "C.5.  Add Remote Routable Addresses\n   The following procedure is executed once.\n\
    \   1.  For each Routable Address Topology Tuple, if:\n       *  TA_dest_addr\
    \ is not equal to the R_dest_addr of any Routing\n          Tuple added in an\
    \ earlier stage; AND\n       *  TA_from_orig_addr is equal to the R_dest_addr\
    \ of a Routing\n          Tuple (the \"previous Routing Tuple\"),\n       then\
    \ add a new Routing Tuple, with:\n       *  R_dest_addr := TA_dest_addr;\n   \
    \    *  R_next_iface_addr := R_next_iface_addr of the previous Routing\n     \
    \     Tuple;\n       *  R_local_iface_addr := R_local_iface_addr of the previous\n\
    \          Routing Tuple;\n       *  R_metric := R_metric of the previous Routing\
    \ Tuple +\n          TA_metric;\n       *  R_dist := R_dist of the previous Routing\
    \ Tuple + 1.\n       There may be more than one Routing Tuple that may be added\
    \ for an\n       R_dest_addr in this stage.  If so, then for each such\n     \
    \  R_dest_addr, a Routing Tuple with minimum R_metric MUST be added;\n       otherwise,\
    \ a Routing Tuple that is preferred SHOULD be added.\n"
- title: C.6.  Add Attached Networks
  contents:
  - "C.6.  Add Attached Networks\n   The following procedure is executed once.\n \
    \  1.  For each Attached Network Tuple, if:\n       *  AN_net_addr is not equal\
    \ to the R_dest_addr of any Routing\n          Tuple added in an earlier stage;\
    \ AND\n       *  AN_orig_addr is equal to the R_dest_addr of a Routing Tuple\n\
    \          (the \"previous Routing Tuple\"),\n       then add a new Routing Tuple,\
    \ with:\n       *  R_dest_addr := AN_net_addr;\n       *  R_next_iface_addr :=\
    \ R_next_iface_addr of the previous Routing\n          Tuple;\n       *  R_local_iface_addr\
    \ := R_local_iface_addr of the previous\n          Routing Tuple;\n       *  R_metric\
    \ := R_metric of the previous Routing Tuple +\n          AN_metric;\n       *\
    \  R_dist := R_dist of the previous Routing Tuple + AN_dist.\n       There may\
    \ be more than one Routing Tuple that may be added for an\n       R_dest_addr\
    \ in this stage.  If so, then for each such\n       R_dest_addr, a Routing Tuple\
    \ with minimum R_metric MUST be added;\n       otherwise, a Routing Tuple that\
    \ is preferred SHOULD be added.\n"
- title: C.7.  Add 2-Hop Neighbors
  contents:
  - "C.7.  Add 2-Hop Neighbors\n   The following procedure is OPTIONAL according to\
    \ Section 19.1 and MAY\n   be executed once.\n   1.  For each 2-Hop Tuple with\
    \ N2_out_metric != UNKNOWN_METRIC, if:\n       *  N2_2hop_addr is a routable address;\
    \ AND\n       *  N2_2hop_addr is not equal to the R_dest_addr of any Routing\n\
    \          Tuple added in an earlier stage; AND\n       *  the Routing Tuple with\
    \ R_dest_addr = N_orig_addr of the\n          corresponding Neighbor Tuple (the\
    \ \"previous Routing Tuple\")\n          has R_dist = 1,\n       then add a new\
    \ Routing Tuple, with:\n       *  R_dest_addr := N2_2hop_addr;\n       *  R_next_iface_addr\
    \ := R_next_iface_addr of the previous Routing\n          Tuple;\n       *  R_local_iface_addr\
    \ := R_local_iface_addr of the previous\n          Routing Tuple;\n       *  R_metric\
    \ := R_metric of the previous Routing Tuple +\n          N_out_metric of the corresponding\
    \ Neighbor Tuple;\n       *  R_dist := 2.\n       There may be more than one Routing\
    \ Tuple that may be added for an\n       R_dest_addr in this stage.  If so, then\
    \ for each such\n       R_dest_addr, a Routing Tuple with minimum R_metric MUST\
    \ be added;\n       otherwise, a Routing Tuple that is preferred SHOULD be added.\n"
- title: Appendix D.  TC Message Example
  contents:
  - "Appendix D.  TC Message Example\n   TC messages are instances of [RFC5444] messages.\
    \  This specification\n   requires that TC messages contain <msg-hop-limit> and\
    \ <msg-orig-addr>\n   fields.  It supports TC messages with any combination of\
    \ remaining\n   message header options and address encodings enabled by [RFC5444]\n\
    \   that convey the required information.  As a consequence, there is no\n   single\
    \ way to represent how all TC messages look.  This appendix\n   illustrates a\
    \ TC message; the exact values and content included are\n   explained in the following\
    \ text.\n   The TC message's four-bit Message Flags (MF) field has a value of\
    \ 15,\n   indicating that the message header contains originator address, hop\n\
    \   limit, hop count, and message sequence number fields.  Its four-bit\n   Message\
    \ Address Length (MAL) field has value 3, indicating addresses\n   in the message\
    \ have a length of four octets, here being IPv4\n   addresses.  The overall message\
    \ length is 75 octets.\n   The message has a Message TLV Block with a content\
    \ length of 17\n   octets containing four TLVs.  The first two TLVs are validity\
    \ and\n   interval times for the message.  The third TLV is the content\n   sequence\
    \ number TLV used to carry the 2-octet ANSN and (with default\n   type extension\
    \ zero, i.e., COMPLETE) indicates that the TC message is\n   complete.  The fourth\
    \ TLV contains forwarding and routing willingness\n   values for the originating\
    \ router (FWILL and RWILL, respectively).\n   Each TLV uses a TLV with Flags octet\
    \ (MTLVF) value 16, indicating\n   that it has a Value, but no type extension\
    \ or start and stop indexes.\n   The first two TLVs have a Value Length of 1 octet;\
    \ the last has a\n   Value Length of 2 octets.\n   The message has two Address\
    \ Blocks.  (This is not necessary.  The\n   information could be conveyed using\
    \ a single Address Block; the use\n   of two Address Blocks, which is also allowed,\
    \ is illustrative only.)\n   The first Address Block contains 3 addresses, with\
    \ Flags octet (ABF)\n   value 128, hence with a Head section (with length 2 octets)\
    \ but no\n   Tail section and with Mid sections with length two octets.  The\n\
    \   following TLV Block (content length 13 octets) contains two TLVs.\n   The\
    \ first TLV is a NBR_ADDR_TYPE TLV with Flags octet (ATLVF) value\n   16, indicating\
    \ a single Value but no indexes.  Thus, all these\n   addresses are associated\
    \ with the Value (with Value Length 1 octet)\n   ROUTABLE_ORIG, i.e., they are\
    \ originator addresses of advertised\n   neighbors that are also routable addresses.\
    \  The second TLV is a\n   LINK_METRIC TLV with Flags octet (ATLVF) value 20,\
    \ indicating a Value\n   for each address, i.e., as the total Value Length is\
    \ 6 octets, each\n   address is associated with a Value with length two octets.\
    \  These\n   Value fields are each shown as having four bits indicating that they\n\
    \   are outgoing neighbor metric values and as having twelve bits that\n   represent\
    \ the metric value (the first four bits being the exponent,\n   the remaining\
    \ eight bits the mantissa).\n   The second Address Block contains 1 address, with\
    \ Flags octet (ATLVF)\n   176, indicating that there is a Head section (with length\
    \ 2 octets),\n   that the Tail section (with length 2 octets) consists of zero\
    \ valued\n   octets (not included), and that there is a single prefix length,\n\
    \   which is 16.  The network address is thus Head.0.0/16.  The following\n  \
    \ TLV Block (content length 9 octets) includes two TLVs.  The first has\n   a\
    \ Flags octet (ATLVF) of 16, again indicating that no indexes are\n   needed,\
    \ but that a Value (with Value Length 1 octet) is present,\n   indicating the\
    \ address distance as a number of hops.  The second TLV\n   is another LINK_METRIC\
    \ TLV, as in the first Address TLV Block except\n   with a Flags octet (ATLVF)\
    \ value 16, indicating that a single Value\n   is present.\n      0          \
    \         1                   2                   3\n      0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |      TC       | MF=15 | MAL=3 |      Message Length = 75      |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \                    Originator Address                       |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |   Hop Limit   |   Hop Count   |    Message Sequence Number    |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     | Message\
    \ TLV Block Length = 17 | VALIDITY_TIME |  MTLVF = 16   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Value Len = 1 | Value (Time)  | INTERVAL_TIME |  MTLVF = 16   |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     | Value\
    \ Len = 1 | Value (Time)  | CONT_SEQ_NUM  |  MTLVF = 16   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Value Len = 2 |         Value (ANSN)          |  MPR_WILLING  |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  MTLVF\
    \ = 16   | Value Len = 1 | FWILL | RWILL | Num Addrs = 3 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |   ABF = 128   | Head Len = 2  |             Head              |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \            Mid              |              Mid              |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |              Mid              | Address TLV Block Length = 13 |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     | NBR_ADDR_TYPE\
    \ |  ATLVF = 16   | Value Len = 1 | ROUTABLE_ORIG |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |  LINK_METRIC  |  ATLVF = 20   | Value Len = 6 |0|0|0|1|Metric |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     | Metric\
    \ (cont) |0|0|0|1|        Metric         |0|0|0|1|Metric |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Metric (cont) | Num Addrs = 1 |   ABF = 176   | Head Len = 2  |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \           Head              | Tail Len = 2  | Pref Len = 16 |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Address TLV Block Length = 9  |    GATEWAY    |  ATLVF = 16   |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     | Value\
    \ Len = 1 | Value (Hops)  |  LINK_METRIC  |  ATLVF = 16   |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     | Value Len = 2 |0|0|0|1|        Metric         |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: Appendix E.  Flow and Congestion Control
  contents:
  - "Appendix E.  Flow and Congestion Control\n   Due to its proactive nature, this\
    \ protocol has a natural control over\n   the flow of its control traffic.  Routers\
    \ transmit control messages\n   at predetermined rates specified and bounded by\
    \ message intervals.\n   This protocol employs [RFC6130] for local signaling,\
    \ embedding MPR\n   selection advertisement through a simple Address Block TLV\
    \ and router\n   willingness advertisement (if any) as a single Message TLV. \
    \ Local\n   signaling, therefore, shares the characteristics and constraints of\n\
    \   [RFC6130].\n   Furthermore, the use of MPRs can greatly reduce the signaling\n\
    \   overhead from link state information dissemination in two ways,\n   attaining\
    \ both flooding reduction and topology reduction.  First,\n   using MPR flooding,\
    \ the cost of distributing link state information\n   throughout the network is\
    \ reduced, as compared to when using blind\n   flooding, since only MPRs need\
    \ to forward link state declaration\n   messages.  Second, the amount of link\
    \ state information for a router\n   to declare is reduced; it only needs to contain\
    \ that router's MPR\n   selectors.  This reduces the size of a link state declaration\
    \ as\n   compared to declaring full link state information.  In particular,\n\
    \   some routers may not need to declare any such information.  In dense\n   networks,\
    \ the reduction of control traffic can be of several orders\n   of magnitude compared\
    \ to routing protocols using blind flooding\n   [MPR].  This feature naturally\
    \ provides more bandwidth for useful\n   data traffic and further pushes the frontier\
    \ of congestion.\n   Since the control traffic is continuous and periodic, it\
    \ keeps the\n   quality of the links used in routing more stable.  However, using\n\
    \   some options, some control messages (HELLO messages or TC messages)\n   may\
    \ be intentionally sent in advance of their deadline in order to\n   increase\
    \ the responsiveness of the protocol to topology changes.\n   This may cause a\
    \ small, temporary, and local increase of control\n   traffic; however, this is\
    \ at all times bounded by the use of minimum\n   message intervals.\n   A router\
    \ that recognizes that the network is suffering from\n   congestion can increase\
    \ its message interval parameters.  If this is\n   done by most or all routers\
    \ in the network, then the overall control\n   traffic in the network will be\
    \ reduced.  When using this capability,\n   routers will have to take care not\
    \ to increase message interval\n   parameters such that they cannot cope with\
    \ network topology changes.\n   Note that routers can make such decisions independently;\
    \ it is not\n   necessary for all routers to be using the same parameter values,\
    \ nor\n   is it necessary that all routers decide to change their intervals at\n\
    \   the same time.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Thomas Heide Clausen\n   LIX, Ecole Polytechnique\n  \
    \ Phone: +33 6 6058 9349\n   EMail: T.Clausen@computer.org\n   URI:   http://www.ThomasClausen.org/\n\
    \   Christopher Dearlove\n   BAE Systems Advanced Technology Centre\n   West Hanningfield\
    \ Road\n   Great Baddow, Chelmsford\n   United Kingdom\n   Phone: +44 1245 242194\n\
    \   EMail: chris.dearlove@baesystems.com\n   URI:   http://www.baesystems.com/\n\
    \   Philippe Jacquet\n   Alcatel-Lucent Bell Labs\n   Phone: +33 6 7337 1880\n\
    \   EMail: philippe.jacquet@alcatel-lucent.com\n   Ulrich Herberg\n   Fujitsu\
    \ Laboratories of America\n   1240 E. Arques Ave.\n   Sunnyvale, CA  94085\n \
    \  USA\n   EMail: ulrich@herberg.name\n   URI:   http://www.herberg.name/\n"
