- title: __initial_text__
  contents:
  - "  Use of Static-Static Elliptic Curve Diffie-Hellman Key Agreement in\n     \
    \                 Cryptographic Message Syntax\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes how to use the 'static-static Elliptic Curve\n\
    \   Diffie-Hellman key-agreement scheme (i.e., Elliptic Curve Diffie-\n   Hellman\
    \ where both participants use static Diffie-Hellman values)\n   with the Cryptographic\
    \ Message Syntax.  In this form of key\n   agreement, the Diffie-Hellman values\
    \ of both the sender and receiver\n   are long-term values contained in certificates.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6278.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Requirements Terminology ...................................5\n  \
    \ 2. EnvelopedData Using Static-Static ECDH ..........................5\n    \
    \  2.1. Fields of the KeyAgreeRecipientInfo ........................5\n      2.2.\
    \ Actions of the Sending Agent ...............................6\n      2.3. Actions\
    \ of the Receiving Agent .............................7\n   3. AuthenticatedData\
    \ Using Static-Static ECDH ......................8\n      3.1. Fields of the KeyAgreeRecipientInfo\
    \ ........................8\n      3.2. Actions of the Sending Agent ...............................8\n\
    \      3.3. Actions of the Receiving Agent .............................9\n  \
    \ 4. AuthEnvelopedData Using Static-Static ECDH ......................9\n    \
    \  4.1. Fields of the KeyAgreeRecipientInfo ........................9\n      4.2.\
    \ Actions of the Sending Agent ...............................9\n      4.3. Actions\
    \ of the Receiving Agent .............................9\n   5. Comparison to RFC\
    \ 5753 ..........................................9\n   6. Requirements and Recommendations\
    \ ...............................10\n   7. Security Considerations ........................................12\n\
    \   8. Acknowledgements ...............................................14\n  \
    \ 9. References .....................................................14\n    \
    \  9.1. Normative References ......................................14\n      9.2.\
    \ Informative References ....................................15\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document describes how to use the static-static Elliptic\
    \ Curve\n   Diffie-Hellman key-agreement scheme (i.e., Elliptic Curve Diffie-\n\
    \   Hellman [RFC6090] where both participants use static Diffie-Hellman\n   values)\
    \ in the Cryptographic Message Syntax (CMS) [RFC5652].  The CMS\n   is a standard\
    \ notation and representation for cryptographic messages.\n   The CMS uses ASN.1\
    \ notation [X.680] [X.681] [X.682] [X.683] to define\n   a number of structures\
    \ that carry both cryptographically protected\n   information and key-management\
    \ information regarding the keys used.\n   Of particular interest here are three\
    \ structures:\n   o  EnvelopedData, which holds encrypted (but not necessarily\n\
    \      authenticated) information [RFC5652],\n   o  AuthenticatedData, which holds\
    \ authenticated (MACed) information\n      [RFC5652], and\n   o  AuthEnvelopedData,\
    \ which holds information protected by\n      authenticated encryption: a cryptographic\
    \ scheme that combines\n      encryption and authentication [RFC5083].\n   All\
    \ three of these types share the same basic structure.  First, a\n   fresh symmetric\
    \ key is generated.  This symmetric key has a different\n   name that reflects\
    \ its usage in each of the three structures.\n   EnvelopedData uses a content-encryption\
    \ key (CEK); AuthenticatedData\n   uses an authentication key; AuthEnvelopedData\
    \ uses a content-\n   authenticated-encryption key.  The originator uses the symmetric\
    \ key\n   to cryptographically protect the content.  The symmetric key is then\n\
    \   wrapped for each recipient; only the intended recipient has access to\n  \
    \ the private keying material necessary to unwrap the symmetric key.\n   Once\
    \ unwrapped, the recipient uses the symmetric key to decrypt the\n   content,\
    \ check the authenticity of the content, or both.  The CMS\n   supports several\
    \ different approaches to symmetric key wrapping,\n   including:\n   o  key transport:\
    \ the symmetric key is encrypted using the public\n      encryption key of some\
    \ recipient,\n   o  key-encryption key: the symmetric key is encrypted using a\n\
    \      previously distributed symmetric key, and\n   o  key agreement: the symmetric\
    \ key is encrypted using a key-\n      encryption key (KEK) created using a key-agreement\
    \ scheme and a\n      key-derivation function (KDF).\n   One such key-agreement\
    \ scheme is the Diffie-Hellman algorithm\n   [RFC2631], which uses group theory\
    \ to produce a value known only to\n   its two participants.  In this case, the\
    \ participants are the\n   originator and one of the recipients.  Each participant\
    \ produces a\n   private value and a public value, and each participant can produce\n\
    \   the shared secret value from their own private value and their\n   counterpart's\
    \ public value.  There are some variations on the basic\n   algorithm:\n   o \
    \ The basic algorithm typically uses the group 'Z mod p', meaning\n      the set\
    \ of integers modulo some prime p.  One can also use an\n      elliptic curve\
    \ group, which allows for shorter messages.\n   o  Over elliptic curve groups,\
    \ the standard algorithm can be extended\n      to incorporate the 'cofactor'\
    \ of the group.  This method, called\n      'cofactor Elliptic Curve Diffie-Hellman'\
    \ [SP800-56A] can prevent\n      certain attacks possible in the elliptic curve\
    \ group.\n   o  The participants can generate fresh new public/private values\n\
    \      (called ephemeral values) for each run of the algorithm, or they\n    \
    \  can re-use long-term values (called static values).  Ephemeral\n      values\
    \ add randomness to the resulting private value, while static\n      values can\
    \ be embedded in certificates.  The two participants do\n      not need to use\
    \ the same kind of value: either participant can use\n      either type.  In 'ephemeral-static'\
    \ Diffie-Hellman, for example,\n      the sender uses an ephemeral public/private\
    \ pair value while the\n      receiver uses a static pair.  In 'static-static'\
    \ Diffie-Hellman,\n      on the other hand, both participants use static pairs.\
    \  (Receivers\n      cannot use ephemeral values in this setting, and so we ignore\n\
    \      ephemeral-ephemeral and static-ephemeral Diffie-Hellman in this\n     \
    \ document.)\n   Several of these variations are already described in existing\
    \ CMS\n   standards; for example, [RFC3370] contains the conventions for using\n\
    \   ephemeral-static and static-static Diffie-Hellman over the 'basic' (Z\n  \
    \ mod p) group.  [RFC5753] contains the conventions for using\n   ephemeral-static\
    \ Diffie-Hellman over elliptic curves (both standard\n   and cofactor methods).\
    \  It does not, however, contain conventions for\n   using either method of static-static\
    \ Elliptic Curve Diffie-Hellman,\n   preferring to discuss the Elliptic Curve\
    \ Menezes-Qu-Vanstone (ECMQV)\n   algorithm instead.\n   In this document, we\
    \ specify the conventions for using static-static\n   Elliptic Curve Diffie-Hellman\
    \ (ECDH) for both standard and cofactor\n   methods.  Our motivation stems from\
    \ the fact that ECMQV has been\n   removed from the National Security Agency's\
    \ Suite B of cryptographic\n   algorithms and will therefore be unavailable to\
    \ some participants.\n   These participants can use ephemeral-static Elliptic\
    \ Curve Diffie-\n   Hellman, of course, but ephemeral-static Diffie-Hellman does\
    \ not\n   provide source authentication.  The CMS does allow the application of\n\
    \   digital signatures for source authentication, but this alternative is\n  \
    \ available only to those participants with certified signature keys.\n   By specifying\
    \ conventions for static-static Elliptic Curve Diffie-\n   Hellman in this document,\
    \ we present a third alternative for source\n   authentication, available to those\
    \ participants with certified\n   Elliptic Curve Diffie-Hellman keys.\n   We note\
    \ that like ephemeral-static ECDH, static-static ECDH creates a\n   secret key\
    \ shared by the sender and receiver.  Unlike ephemeral-\n   static ECDH, however,\
    \ static-static ECDH uses a static key pair for\n   the sender.  Each of the three\
    \ CMS structures discussed in this\n   document (EnvelopedData, AuthenticatedData,\
    \ and AuthEnvelopedData)\n   uses static-static ECDH to achieve different goals:\n\
    \   o  EnvelopedData uses static-static ECDH to provide data\n      confidentiality.\
    \  It will not necessarily, however, provide data\n      authenticity.\n   o \
    \ AuthenticatedData uses static-static ECDH to provide data\n      authenticity.\
    \  It will not provide data confidentiality.\n   o  AuthEnvelopedData uses static-static\
    \ ECDH to provide both\n      confidentiality and data authenticity.\n"
- title: 1.1.  Requirements Terminology
  contents:
  - "1.1.  Requirements Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  EnvelopedData Using Static-Static ECDH
  contents:
  - "2.  EnvelopedData Using Static-Static ECDH\n   If an implementation uses static-static\
    \ ECDH with the CMS\n   EnvelopedData, then the following techniques and formats\
    \ MUST be\n   used.  The fields of EnvelopedData are as in [RFC5652]; as static-\n\
    \   static ECDH is a key-agreement algorithm, the RecipientInfo 'kari'\n   choice\
    \ is used.  When using static-static ECDH, the EnvelopedData\n   originatorInfo\
    \ field MAY include the certificate(s) for the EC public\n   key(s) used in the\
    \ formation of the pairwise key.\n"
- title: 2.1.  Fields of the KeyAgreeRecipientInfo
  contents:
  - "2.1.  Fields of the KeyAgreeRecipientInfo\n   When using static-static ECDH with\
    \ EnvelopedData, the fields of\n   KeyAgreeRecipientInfo [RFC5652] are as follows:\n\
    \   o  version MUST be 3.\n   o  originator identifies the static EC public key\
    \ of the sender.  It\n      MUST be either issuerAndSerialNumber or subjectKeyIdentifier,\
    \ and\n      it MUST point to one of the sending agent's certificates.\n   o \
    \ ukm MAY be present or absent.  However, message originators SHOULD\n      include\
    \ the ukm and SHOULD ensure that the value of ukm is unique\n      to the message\
    \ being sent.  As specified in [RFC5652],\n      implementations MUST support\
    \ ukm message recipient processing, so\n      interoperability is not a concern\
    \ if the ukm is present or absent.\n      The use of a fresh value for ukm will\
    \ ensure that a different key\n      is generated for each message between the\
    \ same sender and\n      receiver.  The ukm, if present, is placed in the entityUInfo\
    \ field\n      of the ECC-CMS-SharedInfo structure [RFC5753] and therefore used\n\
    \      as an input to the key-derivation function.\n   o  keyEncryptionAlgorithm\
    \ MUST contain the object identifier of the\n      key-encryption algorithm, which\
    \ in this case is a key-agreement\n      algorithm (see Section 5).  The parameters\
    \ field contains\n      KeyWrapAlgorithm.  The KeyWrapAlgorithm is the algorithm\n\
    \      identifier that indicates the symmetric encryption algorithm used\n   \
    \   to encrypt the content-encryption key (CEK) with the key-\n      encryption\
    \ key (KEK) and any associated parameters (see\n      Section 5).\n   o  recipientEncryptedKeys\
    \ contains an identifier and an encrypted CEK\n      for each recipient.  The\
    \ RecipientEncryptedKey\n      KeyAgreeRecipientIdentifier MUST contain either\
    \ the\n      issuerAndSerialNumber identifying the recipient's certificate or\n\
    \      the RecipientKeyIdentifier containing the subject key identifier\n    \
    \  from the recipient's certificate.  In both cases, the recipient's\n      certificate\
    \ contains the recipient's static ECDH public key.\n      RecipientEncryptedKey\
    \ EncryptedKey MUST contain the content-\n      encryption key encrypted with\
    \ the static-static ECDH-generated\n      pairwise key-encryption key using the\
    \ algorithm specified by the\n      KeyWrapAlgorithm.\n"
- title: 2.2.  Actions of the Sending Agent
  contents:
  - "2.2.  Actions of the Sending Agent\n   When using static-static ECDH with EnvelopedData,\
    \ the sending agent\n   first obtains the EC public key(s) and domain parameters\
    \ contained in\n   the recipient's certificate.  It MUST confirm the following\
    \ at least\n   once per recipient-certificate:\n   o  that both certificates (the\
    \ recipient's certificate and its own)\n      contain public-key values with the\
    \ same curve parameters, and\n   o  that both of these public-key values are marked\
    \ as appropriate for\n      ECDH (that is, marked with algorithm identifiers id-ecPublicKey\
    \ or\n      id-ecDH [RFC5480]).\n   The sender then determines whether to use\
    \ standard or cofactor\n   Diffie-Hellman.  After doing so, the sender then determines\
    \ which\n   hash algorithms to use for the key-derivation function.  It then\n\
    \   chooses the keyEncryptionAlgorithm value that reflects these choices.\n  \
    \ It then determines:\n   o  an integer \"keydatalen\", which is the KeyWrapAlgorithm\
    \ symmetric\n      key size in bits, and\n   o  the value of ukm, if used.\n \
    \  The sender then determines a bit string \"SharedInfo\", which is the\n   DER\
    \ encoding of ECC-CMS-SharedInfo (see Section 7.2 of [RFC5753]).\n   The sending\
    \ agent then performs either the Elliptic Curve Diffie-\n   Hellman operation\
    \ of [RFC6090] (for standard Diffie-Hellman) or the\n   Elliptic Curve Cryptography\
    \ Cofactor Diffie-Hellman (ECC CDH)\n   Primitive of [SP800-56A] (for cofactor\
    \ Diffie-Hellman).  The sending\n   agent then applies the simple hash-function\
    \ construct of [X963]\n   (using the hash algorithm identified in the key-agreement\
    \ algorithm)\n   to the results of the Diffie-Hellman operation and the SharedInfo\n\
    \   string.  (This construct is also described in Section 3.6.1 of\n   [SEC1].)\
    \  As a result, the sending agent obtains a shared secret bit\n   string \"K\"\
    , which is used as the pairwise key-encryption key (KEK) to\n   wrap the CEK for\
    \ that recipient, as specified in [RFC5652].\n"
- title: 2.3.  Actions of the Receiving Agent
  contents:
  - "2.3.  Actions of the Receiving Agent\n   When using static-static ECDH with EnvelopedData,\
    \ the receiving agent\n   retrieves keyEncryptionAlgorithm to determine the key-agreement\n\
    \   algorithm chosen by the sender, which will identify:\n   o  the domain parameters\
    \ of the curve used,\n   o  whether standard or cofactor Diffie-Hellman was used,\
    \ and\n   o  which hash function was used for the KDF.\n   The receiver then retrieves\
    \ the sender's certificate identified in\n   the rid field and extracts the EC\
    \ public key(s) and domain parameters\n   contained therein.  It MUST confirm\
    \ the following at least once per\n   sender certificate:\n   o  that both certificates\
    \ (the sender's certificate and its own)\n      contain public-key values with\
    \ the same curve parameters, and\n   o  that both of these public-key values are\
    \ marked as appropriate for\n      ECDH (that is, marked with algorithm identifiers\
    \ id-ecPublicKey or\n      id-ecDH [RFC5480]).\n   The receiver then determines\
    \ whether standard or cofactor Diffie-\n   Hellman was used.  The receiver then\
    \ determines a bit string\n   \"SharedInfo\", which is the DER encoding of ECC-CMS-SharedInfo\
    \ (see\n   Section 7.2 of [RFC5753]).  The receiving agent then performs either\n\
    \   the Elliptic Curve Diffie-Hellman operation of [RFC6090] (for\n   standard\
    \ Diffie-Hellman) or the Elliptic Curve Cryptography Cofactor\n   Diffie-Hellman\
    \ (ECC CDH) Primitive of [SP800-56A] (for cofactor\n   Diffie-Hellman).  The receiving\
    \ agent then applies the simple hash-\n   function construct of [X963] (using\
    \ the hash algorithm identified in\n   the key-agreement algorithm) to the results\
    \ of the Diffie-Hellman\n   operation and the SharedInfo string.  (This construct\
    \ is also\n   described in Section 3.6.1 of [SEC1].)  As a result, the receiving\n\
    \   agent obtains a shared secret bit string \"K\", which it uses as the\n   pairwise\
    \ key-encryption key to unwrap the CEK.\n"
- title: 3.  AuthenticatedData Using Static-Static ECDH
  contents:
  - "3.  AuthenticatedData Using Static-Static ECDH\n   This section describes how\
    \ to use the static-static ECDH key-\n   agreement algorithm with AuthenticatedData.\
    \  When using static-static\n   ECDH with AuthenticatedData, the fields of AuthenticatedData\
    \ are as\n   in [RFC5652], but with the following restrictions:\n   o  macAlgorithm\
    \ MUST contain the algorithm identifier of the message\n      authentication code\
    \ (MAC) algorithm.  This algorithm SHOULD be one\n      of the following -- id-hmacWITHSHA224,\
    \ id-hmacWITHSHA256,\n      id-hmacWITHSHA384, or id-hmacWITHSHA512 -- and SHOULD\
    \ NOT be\n      hmac-SHA1.  (See Section 5.)\n   o  digestAlgorithm MUST contain\
    \ the algorithm identifier of the hash\n      algorithm.  This algorithm SHOULD\
    \ be one of the following --\n      id-sha224, id-sha256, id-sha384, or id-sha512\
    \ -- and SHOULD NOT be\n      id-sha1.  (See Section 5.)\n   As static-static\
    \ ECDH is a key-agreement algorithm, the RecipientInfo\n   kari choice is used\
    \ in the AuthenticatedData.  When using static-\n   static ECDH, the AuthenticatedData\
    \ originatorInfo field MAY include\n   the certificate(s) for the EC public key(s)\
    \ used in the formation of\n   the pairwise key.\n"
- title: 3.1.  Fields of the KeyAgreeRecipientInfo
  contents:
  - "3.1.  Fields of the KeyAgreeRecipientInfo\n   The AuthenticatedData KeyAgreeRecipientInfo\
    \ fields are used in the\n   same manner as the fields for the corresponding EnvelopedData\n\
    \   KeyAgreeRecipientInfo fields of Section 2.1 of this document.  The\n   authentication\
    \ key is wrapped in the same manner as is described\n   there for the content-encryption\
    \ key.\n"
- title: 3.2.  Actions of the Sending Agent
  contents:
  - "3.2.  Actions of the Sending Agent\n   The sending agent uses the same actions\
    \ as for EnvelopedData with\n   static-static ECDH, as specified in Section 2.2\
    \ of this document.\n"
- title: 3.3.  Actions of the Receiving Agent
  contents:
  - "3.3.  Actions of the Receiving Agent\n   The receiving agent uses the same actions\
    \ as for EnvelopedData with\n   static-static ECDH, as specified in Section 2.3\
    \ of this document.\n"
- title: 4.  AuthEnvelopedData Using Static-Static ECDH
  contents:
  - "4.  AuthEnvelopedData Using Static-Static ECDH\n   When using static-static ECDH\
    \ with AuthEnvelopedData, the fields of\n   AuthEnvelopedData are as in [RFC5083].\
    \  As static-static ECDH is a\n   key-agreement algorithm, the RecipientInfo kari\
    \ choice is used.  When\n   using static-static ECDH, the AuthEnvelopedData originatorInfo\
    \ field\n   MAY include the certificate(s) for the EC public key used in the\n\
    \   formation of the pairwise key.\n"
- title: 4.1.  Fields of the KeyAgreeRecipientInfo
  contents:
  - "4.1.  Fields of the KeyAgreeRecipientInfo\n   The AuthEnvelopedData KeyAgreeRecipientInfo\
    \ fields are used in the\n   same manner as the fields for the corresponding EnvelopedData\n\
    \   KeyAgreeRecipientInfo fields of Section 2.1 of this document.  The\n   content-authenticated-encryption\
    \ key is wrapped in the same manner as\n   is described there for the content-encryption\
    \ key.\n"
- title: 4.2.  Actions of the Sending Agent
  contents:
  - "4.2.  Actions of the Sending Agent\n   The sending agent uses the same actions\
    \ as for EnvelopedData with\n   static-static ECDH, as specified in Section 2.2\
    \ of this document.\n"
- title: 4.3.  Actions of the Receiving Agent
  contents:
  - "4.3.  Actions of the Receiving Agent\n   The receiving agent uses the same actions\
    \ as for EnvelopedData with\n   static-static ECDH, as specified in Section 2.3\
    \ of this document.\n"
- title: 5.  Comparison to RFC 5753
  contents:
  - "5.  Comparison to RFC 5753\n   This document defines the use of static-static\
    \ ECDH for\n   EnvelopedData, AuthenticatedData, and AuthEnvelopedData.  [RFC5753]\n\
    \   defines ephemeral-static ECDH for EnvelopedData only.\n   With regard to EnvelopedData,\
    \ this document and [RFC5753] greatly\n   parallel each other.  Both specify how\
    \ to apply Elliptic Curve\n   Diffie-Hellman and differ only on how the sender's\
    \ public value is to\n   be communicated to the recipient.  In [RFC5753], the\
    \ sender provides\n   the public value explicitly by including an OriginatorPublicKey\
    \ value\n   in the originator field of KeyAgreeRecipientInfo.  In this document,\n\
    \   the sender includes a reference to a (certified) public value by\n   including\
    \ either an IssuerAndSerialNumber or SubjectKeyIdentifier\n   value in the same\
    \ field.  Put another way, [RFC5753] provides an\n   interpretation of a KeyAgreeRecipientInfo\
    \ structure where:\n   o  the keyEncryptionAlgorithm value indicates Elliptic\
    \ Curve Diffie-\n      Hellman, and\n   o  the originator field contains an OriginatorPublicKey\
    \ value.\n   This document, on the other hand, provides an interpretation of a\n\
    \   KeyAgreeRecipientInfo structure where:\n   o  the keyEncryptionAlgorithm value\
    \ indicates Elliptic Curve Diffie-\n      Hellman, and\n   o  the originator field\
    \ contains either an IssuerAndSerialNumber\n      value or a SubjectKeyIdentifier\
    \ value.\n   AuthenticatedData or AuthEnvelopedData messages, on the other hand,\n\
    \   are not given any form of ECDH by [RFC5753].  This is appropriate:\n   that\
    \ document only defines ephemeral-static Diffie-Hellman, and this\n   form of\
    \ Diffie-Hellman does not (inherently) provide any form of data\n   authentication\
    \ or data-origin authentication.  This document, on the\n   other hand, requires\
    \ that the sender use a certified public value.\n   Thus, this form of key agreement\
    \ provides implicit key authentication\n   and, under some limited circumstances,\
    \ data-origin authentication.\n   (See Section 7.)\n   This document does not\
    \ define any new ASN.1 structures or algorithm\n   identifiers.  It provides new\
    \ ways to interpret structures from\n   [RFC5652] and [RFC5753], and it allows\
    \ previously defined algorithms\n   to be used under these new interpretations.\
    \  Specifically:\n   o  The ECDH key-agreement algorithm identifiers from [RFC5753]\
    \ define\n      only how Diffie-Hellman values are processed, and not where these\n\
    \      values are created.  Therefore, they can be used for static-static\n  \
    \    ECDH with no changes.\n   o  The key-wrap, MAC, and digest algorithms referenced\
    \ in [RFC5753]\n      describe how the secret key is to be used but not created.\n\
    \      Therefore, they can be used with keys from static-static ECDH\n      without\
    \ modification.\n"
- title: 6.  Requirements and Recommendations
  contents:
  - "6.  Requirements and Recommendations\n   It is RECOMMENDED that implementations\
    \ of this specification support\n   AuthenticatedData and EnvelopedData.  Support\
    \ for AuthEnvelopedData\n   is OPTIONAL.\n   Implementations that support this\
    \ specification MUST support standard\n   Elliptic Curve Diffie-Hellman, and these\
    \ implementations MAY also\n   support cofactor Elliptic Curve Diffie-Hellman.\n\
    \   In order to encourage interoperability, implementations SHOULD use\n   the\
    \ elliptic curve domain parameters specified by [RFC5480].\n   Implementations\
    \ that support standard static-static Elliptic Curve\n   Diffie-Hellman:\n   o\
    \  MUST support the dhSinglePass-stdDH-sha256kdf-scheme key-\n      agreement\
    \ algorithm;\n   o  MAY support the dhSinglePass-stdDH-sha224kdf-scheme,\n   \
    \   dhSinglePass-stdDH-sha384kdf-scheme, and\n      dhSinglePass-stdDH-sha512kdf-scheme\
    \ key-agreement algorithms; and\n   o  SHOULD NOT support the dhSinglePass-stdDH-sha1kdf-scheme\n\
    \      algorithm.\n   Other algorithms MAY also be supported.\n   Implementations\
    \ that support cofactor static-static Elliptic Curve\n   Diffie-Hellman:\n   o\
    \  MUST support the dhSinglePass-cofactorDH-sha256kdf-scheme key-\n      agreement\
    \ algorithm;\n   o  MAY support the dhSinglePass-cofactorDH-sha224kdf-scheme,\n\
    \      dhSinglePass-cofactorDH-sha384kdf-scheme, and\n      dhSinglePass-cofactorDH-sha512kdf-scheme\
    \ key-agreement algorithms;\n      and\n   o  SHOULD NOT support the dhSinglePass-cofactorDH-sha1kdf-scheme\n\
    \      algorithm.\n   In addition, all implementations:\n   o  MUST support the\
    \ id-aes128-wrap key-wrap algorithm and the\n      id-aes128-cbc content-encryption\
    \ algorithm;\n   o  MAY support:\n      *  the id-aes192-wrap and id-aes256-wrap\
    \ key-wrap algorithms;\n      *  the id-aes128-CCM, id-aes192-CCM, id-aes256-CCM,\
    \ id-aes128-GCM,\n         id-aes192-GCM, and id-aes256-GCM authenticated-encryption\n\
    \         algorithms; and\n      *  the id-aes192-cbc and id-aes256-cbc content-encryption\n\
    \         algorithms.\n   o  SHOULD NOT support the id-alg-CMS3DESwrap key-wrap\
    \ algorithm or\n      the des-ede3-cbc content-encryption algorithms.\n   (All\
    \ algorithms above are defined in [RFC3370], [RFC3565], [RFC5084],\n   and [RFC5753].)\
    \  Unless otherwise noted above, other algorithms MAY\n   also be supported.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   All security considerations in Section 9 of [RFC5753]\
    \ apply.\n   Extreme care must be used when using static-static Diffie-Hellman\n\
    \   (either standard or cofactor) without the use of some per-message\n   value\
    \ in the ukm.  As described in [RFC5753], the ukm value (if\n   present) will\
    \ be embedded in an ECC-CMS-SharedInfo structure, and the\n   DER encoding of\
    \ this structure will be used as the 'SharedInfo' input\n   to the key-derivation\
    \ function of [X963].  The purpose of this input\n   is to add a message-unique\
    \ value to the key-distribution function so\n   that two different sessions of\
    \ static-static ECDH between a given\n   pair of agents result in independent\
    \ keys.  If the ukm value is not\n   used or is re-used, on the other hand, then\
    \ the ECC-CMS-SharedInfo\n   structure (and 'SharedInfo' input) will likely not\
    \ vary from message\n   to message.  In this case, the two agents will re-use\
    \ the same keying\n   material across multiple messages.  This is considered to\
    \ be bad\n   cryptographic practice and may open the sender to attacks on Diffie-\n\
    \   Hellman (e.g., the 'small subgroup' attack [MenezesUstaoglu] or\n   other,\
    \ yet-undiscovered attacks).\n   It is for these reasons that Section 2.1 states\
    \ that message senders\n   SHOULD include the ukm and SHOULD ensure that the value\
    \ of ukm is\n   unique to the message being sent.  One way to ensure the uniqueness\n\
    \   of the ukm is for the message sender to choose a 'sufficiently long'\n   random\
    \ string for each message (where, as a rule of thumb, a\n   'sufficiently long'\
    \ string is one at least as long as the keys used\n   by the key-wrap algorithm\
    \ identified in the keyEncryptionAlgorithm\n   field of the KeyAgreeRecipientInfo\
    \ structure).  However, other\n   methods (such as a counter) are possible.  Also,\
    \ applications that\n   cannot tolerate the inclusion of per-message information\
    \ in the ukm\n   (due to bandwidth requirements, for example) SHOULD NOT use static-\n\
    \   static ECDH for a recipient without ascertaining that the recipient\n   knows\
    \ the private value associated with their certified Diffie-\n   Hellman value.\n\
    \   Static-static Diffie-Hellman, when used as described in this\n   document,\
    \ does not necessarily provide data-origin authentication.\n   Consider, for example,\
    \ the following sequence of events:\n   o  Alice sends an AuthEnvelopedData message\
    \ to both Bob and Mallory.\n      Furthermore, Alice uses a static-static DH method\
    \ to transport the\n      content-authenticated-encryption key to Bob, and some\
    \ arbitrary\n      method to transport the same key to Mallory.\n   o  Mallory\
    \ intercepts the message and prevents Bob from receiving it.\n   o  Mallory recovers\
    \ the content-authenticated-encryption key from the\n      message received from\
    \ Alice.  Mallory then creates new plaintext\n      of her choice, and encrypts\
    \ it using the same authenticated-\n      encryption algorithm and the same content-authenticated-encryption\n\
    \      key used by Alice.\n   o  Mallory then replaces the EncryptedContentInfo\
    \ and\n      MessageAuthenticationCode fields of Alice's message with the\n  \
    \    values Mallory just generated.  She may additionally remove her\n      RecipientInfo\
    \ value from Alice's message.\n   o  Mallory sends the modified message to Bob.\n\
    \   o  Bob receives the message, validates the static-static DH values,\n    \
    \  and decrypts/authenticates the message.\n   At this point, Bob has received\
    \ and validated a message that appears\n   to have been sent by Alice, but whose\
    \ content was chosen by Mallory.\n   Mallory may not even be an apparent receiver\
    \ of the modified message.\n   Thus, this use of static-static Diffie-Hellman\
    \ does not necessarily\n   provide data-origin authentication.  (We note that\
    \ this example does\n   not also contradict either confidentiality or data authentication:\n\
    \   Alice's message was not received by anyone not intended by Alice, and\n  \
    \ Mallory's message was not modified before reaching Bob.)\n   More generally,\
    \ the data origin may not be authenticated unless:\n   o  it is a priori guaranteed\
    \ that the message in question was sent to\n      exactly one recipient, or\n\
    \   o  data-origin authentication is provided by some other mechanism\n      (such\
    \ as digital signatures).\n   However, we also note that this lack of authentication\
    \ is not a\n   product of static-static ECDH per se, but is inherent in the way\
    \ key-\n   agreement schemes are used in the AuthenticatedData and\n   AuthEnvelopedData\
    \ structures of the CMS.\n   When two parties are communicating using static-static\
    \ ECDH as\n   described in this document, and either party's asymmetric keys have\n\
    \   been centrally generated, it is possible for that party's central\n   infrastructure\
    \ to decrypt the communication (for application-layer\n   network monitoring or\
    \ filtering, for example).  By way of contrast:\n   were ephemeral-static ECDH\
    \ to be used instead, such decryption by the\n   sender's infrastructure would\
    \ not be possible (though it would remain\n   possible for the infrastructure\
    \ of any recipient).\n"
- title: 8.  Acknowledgements and Disclaimer
  contents:
  - "8.  Acknowledgements and Disclaimer\n   This work is sponsored by the United\
    \ States Air Force under Air Force\n   Contract FA8721-05-C-0002.  Opinions, interpretations,\
    \ conclusions\n   and recommendations are those of the authors and are not necessarily\n\
    \   endorsed by the United States Government.\n   The authors would like to thank\
    \ Jim Schaad, Russ Housley, Sean\n   Turner, Brian Weis, Rene Struik, Brian Carpenter,\
    \ David McGrew, and\n   Stephen Farrell for their helpful comments and suggestions.\
    \  We would\n   also like to thank Jim Schaad for describing to us the attack\n\
    \   described in Section 7.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3370]  Housley, R., \"Cryptographic Message Syntax (CMS)\n   \
    \           Algorithms\", RFC 3370, August 2002.\n   [RFC3565]  Schaad, J., \"\
    Use of the Advanced Encryption Standard (AES)\n              Encryption Algorithm\
    \ in Cryptographic Message Syntax\n              (CMS)\", RFC 3565, July 2003.\n\
    \   [RFC5083]  Housley, R., \"Cryptographic Message Syntax (CMS)\n           \
    \   Authenticated-Enveloped-Data Content Type\", RFC 5083,\n              November\
    \ 2007.\n   [RFC5084]  Housley, R., \"Using AES-CCM and AES-GCM Authenticated\n\
    \              Encryption in the Cryptographic Message Syntax (CMS)\",\n     \
    \         RFC 5084, November 2007.\n   [RFC5480]  Turner, S., Brown, D., Yiu,\
    \ K., Housley, R., and T. Polk,\n              \"Elliptic Curve Cryptography Subject\
    \ Public Key\n              Information\", RFC 5480, March 2009.\n   [RFC5652]\
    \  Housley, R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n            \
    \  RFC 5652, September 2009.\n   [RFC5753]  Turner, S. and D. Brown, \"Use of\
    \ Elliptic Curve\n              Cryptography (ECC) Algorithms in Cryptographic\
    \ Message\n              Syntax (CMS)\", RFC 5753, January 2010.\n   [RFC6090]\
    \  McGrew, D., Igoe, K., and M. Salter, \"Fundamental Elliptic\n             \
    \ Curve Cryptography Algorithms\", RFC 6090, February 2011.\n   [SP800-56A]\n\
    \              Barker, E., Johnson, D., and M. Smid, \"Recommendation for\n  \
    \            Pair-Wise Key Establishment Schemes Using Discrete\n            \
    \  Logarithm Cryptography (Revised)\", NIST Special\n              Publication\
    \ (SP) 800-56A, March 2007.\n   [X963]     \"Public Key Cryptography for the Financial\
    \ Services\n              Industry, Key Agreement and Key Transport Using Elliptic\n\
    \              Curve Cryptography\", ANSI X9.63, 2001.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [MenezesUstaoglu]\n              Menezes, A.\
    \ and B. Ustaoglu, \"On Reusing Ephemeral Keys in\n              Diffie-Hellman\
    \ Key Agreement Protocols\", International\n              Journal of Applied Cryptography,\
    \ Vol. 2, No. 2, pp. 154-\n              158, 2010.\n   [RFC2631]  Rescorla, E.,\
    \ \"Diffie-Hellman Key Agreement Method\",\n              RFC 2631, June 1999.\n\
    \   [SEC1]     Standards for Efficient Cryptography Group (SECG), \"SEC 1:\n \
    \             Elliptic Curve Cryptography\", Version 2.0, May 2009.\n   [X.680]\
    \    ITU-T, \"Information Technology - Abstract Syntax Notation\n            \
    \  One: Specification of Basic Notation\",\n              Recommendation X.680,\
    \ ISO/IEC 8824-1:2002, 2002.\n   [X.681]    ITU-T, \"Information Technology -\
    \ Abstract Syntax Notation\n              One: Information Object Specification\"\
    ,\n              Recommendation X.681, ISO/IEC 8824-2:2002, 2002.\n   [X.682]\
    \    ITU-T, \"Information Technology - Abstract Syntax Notation\n            \
    \  One: Constraint Specification\", Recommendation X.682, ISO/\n             \
    \ IEC 8824-3:2002, 2002.\n   [X.683]    ITU-T, \"Information Technology - Abstract\
    \ Syntax Notation\n              One: Parameterization of ASN.1 Specifications\"\
    ,\n              Recommendation X.683, ISO/IEC 8824-4:2002, 2002.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jonathan C. Herzog\n   MIT Lincoln Laboratory\n   244\
    \ Wood St.\n   Lexington, MA  02144\n   USA\n   EMail: jherzog@ll.mit.edu\n  \
    \ Roger Khazan\n   MIT Lincoln Laboratory\n   244 Wood St.\n   Lexington, MA \
    \ 02144\n   USA\n   EMail: rkh@ll.mit.edu\n"
