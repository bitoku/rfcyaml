- title: __initial_text__
  contents:
  - "    Experiments with a Simple File Transfer Protocol for Radio Links\n      \
    \   using Enhanced Trivial File Transfer Protocol (ETFTP)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: 1. INTRODUCTION SECTION
  contents:
  - "1. INTRODUCTION SECTION\n   This document is a description of the Enhanced Trivial\
    \ File Transfer\n   Protocol (ETFTP). This protocol is an experimental implementation\
    \ of\n   the NETwork BLock Transfer Protocol (NETBLT), RFC 998 [1], as a file\n\
    \   transfer application program. It uses the User Datagram Protocol\n   (UDP),\
    \ RFC 768 [2], as its transport layer. The two protocols are\n   layered to create\
    \ the ETFTP client server application. The ETFTP\n   program is named after Trivial\
    \ File Transfer Protocol (TFTP), RFC\n   1350 [3], because the source code from\
    \ TFTP is used as the building\n   blocks for the ETFTP program. This implementation\
    \ also builds on but\n   differs from the work done by the National Imagery Transmission\n\
    \   Format Standard [4].\n   This document is published for discussion and comment\
    \ on improving\n   the throughput performance of data transfer utilities over\
    \ Internet\n   Protocol (IP) compliant, half duplex, radio networks.\n   There\
    \ are many file transfer programs available for computer\n   networks.  Many of\
    \ these programs are designed for operations through\n   high-speed, low bit error\
    \ rate (BER) cabled networks. In tactical\n   radio networks, traditional file\
    \ transfer protocols, such as File\n   Transfer Protocol (FTP) and TFTP, do not\
    \ always perform well. This is\n   primarily because tactical half duplex radio\
    \ networks typically\n   provide slow-speed, long delay, and high BER communication\
    \ links.\n   ETFTP is designed to allow a user to control transmission parameters\n\
    \   to optimize file transfer rates through half-duplex radio links.\n   The tactical\
    \ radio network used to test this application was\n   developed by the Survivable\
    \ Adaptive Systems (SAS) Advanced\n   Technology Demonstration (ATD). Part of\
    \ the SAS ATD program was to\n   address the problems associated with extending\
    \ IP networks across\n   tactical radios.  Several tactical radios, such as, SINgle\
    \ Channel\n   Ground and Airborne Radio Systems (SINCGARS), Enhanced Position\n\
    \   Location Reporting Systems (EPLRS), Motorola LST-5C, and High\n   Frequency\
    \ (HF) radios have been interfaced to the system.  This\n   document will discuss\
    \ results obtained from using ETFTP across a\n   point-to-point LST-5C tactical\
    \ SATellite COMmunications (SATCOM)\n   link. The network includes a 25 Mhz 486\
    \ Personal Computer (PC) called\n   the Army Lightweight Computer Unit (LCU),\
    \ Cisco 2500 routers,\n   Gracilis PackeTen Network switches, Motorola Sunburst\
    \ Cryptographic\n   processors, a prototype forward error correction (FEC) device,\
    \ and\n   Motorola LST-5C tactical Ultra High Frequency (UHF) satellite\n   communications\
    \ (SATC!  OM) radio. Table 1, \"Network Trans fer Rates,\"\n   describes the equipment\
    \ network connections and the bandwidth of the\n   physical media interconnecting\
    \ the devices.\n   Table 1: Network Transfer Rates\n   +-------------------------------+-------------------------------+\n\
    \   | Equipment                     | Rate (bits per second)        |\n   +-------------------------------+-------------------------------+\n\
    \   | Host Computer (486 PC)        | 10,000,000 Ethernet           |\n   +-------------------------------+-------------------------------+\n\
    \   | Cisco Router                  | 10,000,000 Ethernet to        |\n   |  \
    \                             | 19,200 Serial Line Internet   |\n   |        \
    \                       | Protocol (SLIP)               |\n   +-------------------------------+-------------------------------+\n\
    \   | Gracilis PackeTen             | 19,200 SLIP to                |\n   |  \
    \                             | 16,000 Amateur Radio (AX.25)  |\n   +-------------------------------+-------------------------------+\n\
    \   | FEC                           | half rate or quarter rate     |\n   +-------------------------------+-------------------------------+\n\
    \   | Sunburst Crypto               | 16,000                        |\n   +-------------------------------+-------------------------------+\n\
    \   | LST-5C Radio                  | 16,000                        |\n   +-------------------------------+-------------------------------+\n\
    \   During 1993, the MITRE team collected data for network configurations\n  \
    \ that were stationary and on-the-move. This network configuration did\n   not\
    \ include any Forward Error Correction (FEC) at the link layer.\n   Several commercially\
    \ available implementations of FTP were used to\n   transfer files through a 16\
    \ kbps satellite link. FTP relies upon the\n   Transmission Control Protocol (TCP)\
    \ for reliable communications.  For\n   a variety of file sizes, throughput measurements\
    \ ranged between 80\n   and 400 bps. At times, TCP connections could be opened,\
    \ however, data\n   transfers would be unsuccessful. This was most likely due\
    \ to the\n   smaller TCP connection synchronization packets, as compared to the\n\
    \   TCP data packets.  Because of the high bit error rate of the link,\n   the\
    \ smaller packets were much more likely to be received without\n   error. In most\
    \ cases, satellite channel utilization was less than 20\n   percent.  Very often\
    \ a file transfer would fail because FTP\n   implementations would curtail the\
    \ transfer due t!  o the poor\n   conditions of the commu nication link.\n   The\
    \ current focus is to increase the throughput and channel\n   utilization over\
    \ a point to point, half duplex link. Follow on\n   experiments will evaluate\
    \ ETFTP's ability to work with multiple hosts\n   in a multicast scenario. Evaluation\
    \ of the data collected helped to\n   determine that several factors limited data\
    \ throughput. A brief\n   description of those limiting factors, as well as, solutions\
    \ that can\n   reduce these networking limitations is provided below.\n"
- title: Link Quality
  contents:
  - "Link Quality\n   The channel quality of a typical narrow-band UHF satellite link\
    \ does\n   not sufficiently support data communications without the addition of\n\
    \   a forward error correction (FEC) capability.  From the data\n   collected,\
    \ it was determined that the UHF satellite link supports, on\n   average, a 10e-3\
    \ bit error rate.\n   Solution: A narrow-band UHF satellite radio FEC prototype\
    \ was\n   developed that improves data reliability, without excessively\n   increasing\
    \ synchronization requirements. The prototype FEC increased\n   synchronization\
    \ requirements by less than 50 milliseconds (ms). The\n   FEC implementation will\
    \ improve an average 10e-3 BER channel to an\n   average 10e-5 BER channel.\n"
- title: Delays
  contents:
  - "Delays\n   Including satellite propagation delays, the tactical satellite radios\n\
    \   require approximately 1.25 seconds for radio synchronization prior to\n  \
    \ transmitting any data across the communication channel.  Therefore,\n   limiting\
    \ the number of channel accesses required will permit data\n   throughput to increase.\
    \ This can be achieved by minimizing the number\n   of acknowledgments required\
    \ during the file transfer.  FTP generates\n   many acknowledgments which decreases\
    \ throughput by increasing the\n   number of satellite channel accesses required.\n\
    \   To clarify, when a FTP connection request is generated, it is sent\n   via\
    \ Ethernet to the router and then forwarded to the radio network\n   controller\
    \ (RNC).  The elapsed time is less than 30 ms. The RNC keys\n   the crypto unit\
    \ and 950 ms later modem/crypto synchronization occurs.\n   After synchronization\
    \ is achieved, the FTP connection request is\n   transmitted. The transmitting\
    \ terminal then drops the channel and the\n   modem/crypto synchronization is\
    \ lost. Assuming that the request was\n   received successfully, the receiving\
    \ host processes the request and\n   sends an acknowledgment. Again the modem/crypto\
    \ have to synchronize\n   prior to transmitting the acknowledgment. Propagation\
    \ delays over a\n   UHF satellite also adds roughly 500 ms to the total round\
    \ trip delay.\n   Solution: When compared to FTP, NETBLT significantly reduces\
    \ the\n   number of acknowledgments required to complete a file transfer.\n  \
    \ Therefore, leveraging the features available within an implementation\n   of\
    \ NETBLT will significantly improve throughput across the narrow-\n   band UHF\
    \ satellite communication link.\n   To reduce the number of channel accesses required,\
    \ a number of AX.25\n   parameters were modified.  These included the value of\
    \ p for use\n   within the p-persistence link layer protocol, the slot time, the\n\
    \   transmit tail time, and the transmit delay time.  The p-persistence\n   is\
    \ a random number threshold between 0 and 255.  The slot time is the\n   time\
    \ to wait prior to attempting to access the channel.  The transmit\n   tail increases\
    \ the amount of time the radio carrier is held on, prior\n   to dropping the channel.\
    \ Transmit delay is normally equal to the\n   value of the radio synchronization\
    \ time.  By adjusting these\n   parameters to adapt to the tactical satellite\
    \ environment, improved\n   communication performance can be achieved.\n   First,\
    \ in ETFTP, several packets within a buffer are transmitted\n   within one burst.\
    \ If the buffer is partitioned into ten packets, each\n   of 1024 bytes, then\
    \ 10,240 bytes of data is transmitted with each\n   channel access. It is possible\
    \ to configure ETFTP's burstsize to\n   equal the number of packets per buffer.\
    \ Second, the transmit tail\n   time was increased to hold the key down on the\
    \ transmitter long\n   enough to insure all of the packets within the buffer are\
    \ sent in a\n   single channel access. These two features, together, allow the\
    \ system\n   to transmit an entire file (example, 100,000 bytes) with only a\n\
    \   single channel access by adjusting buffer size. Thirdly, the ETFTP\n   protocol\
    \ only acknowledges each buffer, not each packet. Thus, a\n   single acknowledgment\
    \ is sent from the receiving terminal containing\n   a request for the missing\
    \ packets within each buffer, reducing the\n   number of acknowledgment packets\
    \ sent. Which in turn, reduced the\n   number of times the channel has to be turned\
    \ around.\n   To reduce channel access time, p-persistence was set to the maximum\n\
    \   value and slot time to a minimum value. These settings support\n   operations\
    \ for a point-to-point communication link between two users.\n   This value of\
    \ p would not be used if more users were sharing the\n   satellite channel.\n"
- title: Backoffs
  contents:
  - "Backoffs\n   TCP's slow start and backoff algorithms implemented in most TCP\n\
    \   packages assume that packet loss is due to network congestion.  When\n   operating\
    \ across a tactical half duplex communication channel\n   dedicated to two users,\
    \ packet loss is primarily due to poor channel\n   quality, not network congestion.\
    \ A linear backoff at the transport\n   layer is recommended. In a tactical radio\
    \ network there are numerous\n   cases where a single host is connected to multiple\
    \ radios. In a\n   tactical radio network, layer two will handle channel access.\n\
    \   Channel access will be adjusted through parameters like p-persistence\n  \
    \ and slot time. The aggregate effect of the exponential backoff from\n   the\
    \ transport layer added to the random backoff of the data link\n   layer, will\
    \ in most cases, cause the radio network to miss many\n   network access opportunities.\
    \ A linear backoff will reduce the number\n   missed data link network access\
    \ opportunities\n   Solution: Tunable parameters and timers have been modified\
    \ to\n   resemble those suggested by NETBLT.\n"
- title: Packet Size
  contents:
  - "Packet Size\n   In a tactical environment, channel conditions change rapidly.\n\
    \   Continuously transmitting large packets under 10e-3 BER conditions\n   reduces\
    \ effective throughput.\n   Solution: Packet sizes are dynamically adjusted based\
    \ upon the\n   success of the buffer transfers. If 99 percent of all packets within\n\
    \   a buffer are received successfully, packet size can be increased to a\n  \
    \ negotiated value.  If 50 percent or more of all packets within a\n   buffer\
    \ are not successfully delivered, the packet size can be\n   decreased to a negotiated\
    \ value.\n"
- title: 2. PROTOCOL DESCRIPTION
  contents:
  - "2. PROTOCOL DESCRIPTION\n   Throughout this document the term packet is used\
    \ to describe a\n   datagram that includes all network overhead. A block is used\
    \ to\n   describe information, without any network encapsulation.\n   The original\
    \ source files for TFTP, as downloaded from ftp.uu.net,\n   were modified to implement\
    \ the ETFTP/NETBLT protocol. These same\n   files are listed in \"UNIX Network\
    \ Programming\" [5].\n   ETFTP was implemented for operations under the Santa\
    \ Cruz Operations\n   (SCO) UNIX. In the service file, \"/etc/services\", an addition\
    \ was\n   made to support \"etftp\" at a temporary well known port of \"1818\"\
    \n   using \"UDP\" protocol. The file, \"/etc/inetd.conf\", was modified so\n\
    \   the \"inetd\" program could autostart the \"etftpd\" server when a\n   connection\
    \ request came in on the well known port.\n   As stated earlier, the transport\
    \ layer for ETFTP is UDP, which will\n   not be discussed further here. This client\
    \ server application layer\n   protocol is NETBLT, with four notable differences.\n\
    \   The first change is that this NETBLT protocol is implemented on top\n   of\
    \ the UDP layer. This allowed the NETBLT concepts to be tested\n   without modifying\
    \ the operating system's transport or network layers.\n   Table 2, \"Four Layer\
    \ Protocol Model,\" shows the protocol stack for\n   FTP, TFTP and ETFTP.\n  \
    \ Table 2: Four Layer Protocol Model\n   +---------------------------------------------------------------+\n\
    \   |                         PROTOCOL STACK                        |\n   +---------------+---------------+---------------+---------------+\n\
    \   |APPLICATION    |FTP            |TFTP           |ETFTP/NETBLT   |\n   +---------------+---------------+---------------+---------------+\n\
    \   |TRANSPORT      |TCP            |UDP            |UDP            |\n   +---------------+---------------+---------------+---------------+\n\
    \   |NETWORK        |IP                                             |\n   +---------------+---------------+---------------+---------------+\n\
    \   |LINK           |Ethernet, SLIP, AX.25                          |\n   +---------------+---------------+---------------+---------------+\n\
    \   The second change is a carryover from TFTP, which allows files to be\n   transferred\
    \ in netascii or binary modes. A new T bit flag is assigned\n   to the reserved\
    \ field of the OPEN message type.\n   The third change is to re-negotiate the\
    \ DATA packet size. This change\n   affects the OPEN, NULL-ACK, and CONTROL_OK\
    \ message types.  A new R\n   bit is assigned to the reserved field of the OPEN\
    \ message type.\n   The fourth change is the addition of two new fields to the\
    \ OPEN\n   message type. The one field is a two byte integer for radio delay in\n\
    \   seconds, and the next field is two bytes of padding.\n   The ETFTP data encapsulation\
    \ is shown in Table 3, \"ETFTP Data\n   Encapsulation,\". The Ethernet, SLIP,\
    \ and AX.25 headers are mutually\n   exclusive. They are stripped off and added\
    \ by the appropriate\n   hardware layer.\n   Table 3: ETFTP Data Encapsulation\n\
    \   +------------+------------+------------+------------+-----------+\n   |Ethernet(14)|\
    \            |            |ETFTP/      |           |\n   |SLIP(2)     |IP(20)\
    \      |UDP(8)      |NETBLT(24)  |DATA(1448) |\n   |AX.25(20)   |            |\
    \            |            |           |\n   +------------+------------+------------+------------+-----------+\n"
- title: 2.1     MESSAGE TYPES AND FORMATS
  contents:
  - "2.1     MESSAGE TYPES AND FORMATS\n   Here are the ETFTP/NETBLT message types\
    \ and formats.\n   MESSAGES        VALUES\n   OPEN    0  Client request to open\
    \ a new connection\n   RESPONSE        1  Server positive acknowledgment for OPEN\n\
    \   KEEPALIVE       2  Reset the timer\n   QUIT    3  Sender normal Close request\n\
    \   QUITACK 4  Receiver acknowledgment of QUIT\n   ABORT   5  Abnormal close\n\
    \   DATA    6  Sender packet containing data\n   LDATA   7  Sender last data block\
    \ of a buffer\n   NULL-ACK        8  Sender confirmation of CONTROL_OK changes\n\
    \   CONTROL 9  Receiver request to\n           GO      0 Start transmit of next\
    \ buffer\n           OK      1 Acknowledge complete buffer\n           RESEND\
    \  2 Retransmit request\n   REFUSED 10 Server negative acknowledgment of OPEN\n\
    \   DONE    11 Receiver acknowledgment of QUIT.\n   Packets are \"longword-aligned\"\
    , at four byte word boundaries.\n   Variable length strings are NULL terminated,\
    \ and padded to the four\n   byte boundary. Fields are listed in network byte\
    \ order. All the\n   message types share a common 12 byte header. The common fields\
    \ are:\n   Checksum        IP compliant checksum\n   Version Current version ID\n\
    \   Type    NETBLT message type\n   Length  Total byte length of packet\n   Local\
    \ Port      My port ID\n   Foreign Port    Remote port ID\n   Padding Pad as necessary\
    \ to 4 byte boundary\n   The OPEN and RESPONSE messages are similar and shown\
    \ in Table 4,\n   \"OPEN and RESPONSE Message Types,\". The client string field\
    \ is used\n   to carry the filename to be transferred.\n   Table 4: OPEN and RESPONSE\
    \ Message Types\n                      1                   2                 \
    \  3\n    1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\n  \
    \ +---------------+---------------+---------------+---------------+\n   |Checksum\
    \                       |Version        |Type           |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Length                         |Local Port                     |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Foreign Port                   |Longword Alignment Padding     |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Connection ID                                                  |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Buffer size                                                     |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Transfer size                                                   |\n   +---------------+---------------+---------------+---------------+\n\
    \   |DATA Packet size                |Burstsize                      |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Burstrate                      |Death Timer Value              |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Reserved(MBZ)          |R|T|C|M|Maximum # Outstanding Buffers  |\n   +---------------+---------------+---------------+---------------+\n\
    \   |*Radio Delay                   |*Padding                       |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Client String . . .            |Longword Alignment Padding     |\n   +---------------+---------------+---------------+---------------+\n\
    \   Connection ID   The unique connection number\n   Buffer size     Bytes per\
    \ buffer\n   Transfer size   The length of the file in bytes\n   DATA Packet size\
    \        Bytes per ETFTP block\n   Burstsize       Concatenated packets per burst\n\
    \   Burstrate       Milliseconds per burst\n   Death Timer     Seconds before\
    \ closing idle links\n   Reserved        M bit is mode: 0=read/put, 1=write/get\n\
    \           C bit is checksum: 0=header, 1=all\n           *T bit is transfer:\
    \ 0=netascii, 1=binary\n           *R bit is re-negotiate: 0=off, 1=on\n   Max\
    \ # Out Buffs Maximum allowed un-acknowledged buffers\n   Radio Delay     *Seconds\
    \ of delay from send to receive\n   Padding *Unused\n   Client String   Filename.\n\
    \   The KEEPALIVE, QUITACK, and DONE messages are identical to the common\n  \
    \ header, except for the message type values. See Table 5, \"KEEPALIVE,\n   QUITACK,\
    \ and DONE Message Types,\".\n   Table 5: KEEPALIVE, QUITACK, and DONE Message\
    \ Types\n                      1                   2                   3\n   \
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\n   +---------------+---------------+---------------+---------------+\n\
    \   |Checksum                       |Version        |Type           |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Length                         |Local Port                     |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Foreign Port                   |Longword Alignment Padding     |\n   +---------------+---------------+---------------+---------------+\n\
    \   The QUIT, ABORT, and REFUSED messages allow a string field to carry\n   the\
    \ reason for the message. See Table 6, \"QUIT, ABORT, and REFUSED\n   Message\
    \ Types,\".\n   Table 6: QUIT, ABORT, and REFUSED Message Types\n            \
    \          1                   2                   3\n    1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\n   +---------------+---------------+---------------+---------------+\n\
    \   |Checksum                       |Version        |Type           |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Length                         |Local Port                     |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Foreign Port                   |Longword Alignment Padding     |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Reason for QUIT/ABORT/REFUSED . . .                            |\n   +---------------+---------------+---------------+---------------+\n\
    \   |. . .                          |Longword Alignment Padding     |\n   +---------------+---------------+---------------+---------------+\n\
    \   The DATA and LDATA messages make up the bulk of the messages\n   transferred.\
    \ The last packet of each buffer is flagged as an LDATA\n   message. Each and\
    \ every packet of the last buffer has the reserved L\n   bit set. The highest\
    \ consecutive sequence number is used for the\n   acknowledgment of CONTROL messages.\
    \ It should contain the ID number\n   of the current CONTROL message being processed.\
    \ Table 7, \"DATA and\n   LDATA Message Types,\", shows the DATA and LDATA formats.\n\
    \   Table 7: DATA and LDATA Message Types\n                      1           \
    \        2                   3\n    1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2\n   +---------------+---------------+---------------+---------------+\n\
    \   |Checksum                       |Version        |Type           |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Length                         |Local Port                     |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Foreign Port                   |Longword Alignment Padding     |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Buffer Number                                                  |\n   +---------------+---------------+---------------+---------------+\n\
    \   |High Consecutive Seq Num Rcvd  |Packet Number                  |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Data Area Checksum Value       |Reserved (MBZ)               |L|\n   +---------------+---------------+---------------+---------------+\n\
    \   Buffer Number   The first buffer number starts at 0\n   Hi Con Seq Num  The\
    \ acknowledgment for CONTROL messages\n   Packet Number   The first packet number\
    \ starts at 0\n   Data Checksum   Checksum for data area only\n   Reserved   \
    \     L: the last buffer bit: 0=false, 1=true\n   The NULL-ACK message type is\
    \ sent as a response to a CONTROL_OK\n   message that modifies the current packet\
    \ size, burstsize, or\n   burstrate. In acknowledging the CONTROL_OK message,\
    \ the sender is\n   confirming the change request to the new packet size, burstsize,\
    \ or\n   burstrate. If no modifications are requested, a NULL-ACK message is\n\
    \   unnecessary. See Table 8, \"NULL-ACK Message Type,\" for further\n   details.\n\
    \   Table 8: NULL-ACK Message Type\n                      1                  \
    \ 2                   3\n    1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2\n   +---------------+---------------+---------------+---------------+\n\
    \   |Checksum                       |Version        |Type           |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Length                         |Local Port                     |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Foreign Port                   |Longword Alignment Padding     |\n   +---------------+---------------+---------------+---------------+\n\
    \   |High Consecutive Seq Num Rcvd  |New Burstsize                  |\n   +---------------+---------------+---------------+---------------+\n\
    \   |New Burstrate                  |*New DATA Packet size           |\n   +---------------+---------------+---------------+---------------+\n\
    \   The CONTROL messages have three subtypes: GO, OK, and RESEND as shown\n  \
    \ in Tables 9-12. The CONTROL message common header may be followed by\n   any\
    \ number of longword aligned subtype messages.\n   Table 9: CONTROL Message Common\
    \ Header\n                      1                   2                   3\n  \
    \  1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\n   +---------------+---------------+---------------+---------------+\n\
    \   |Checksum                       |Version        |Type           |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Length                         |Local Port                     |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Foreign Port                   |Longword Alignment Padding     |\n   +---------------+---------------+---------------+---------------+\n\
    \   Table 10: CONTROL_GO Message Subtype\n                      1            \
    \       2                   3\n    1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2\n   +---------------+---------------+---------------+---------------+\n\
    \   |Subtype        |Padding        |Sequence Number                |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Buffer Number                                                  |\n   +---------------+---------------+---------------+---------------+\n\
    \   Table 11: CONTROL_OK Message Subtype\n                     1             \
    \      2                   3\n    1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2\n   +---------------+---------------+---------------+---------------+\n\
    \   |Subtype        |Padding        |Sequence Number                |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Buffer Number                                                  |\n   +---------------+---------------+---------------+---------------+\n\
    \   |New Offered Burstsize          |New Offered Burstrate          |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Current Control Timer Value    |*New DATA Packet size           |\n   +---------------+---------------+---------------+---------------+\n\
    \   Table 12: CONTROL_RESEND Message Subtype\n                      1        \
    \           2                   3\n    1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2\n   +---------------+---------------+---------------+---------------+\n\
    \   |Subtype        |Padding        |Sequence Number                |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Buffer Number                                                  |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Number of Missing Packets      |Longword Alignment Padding     |\n   +---------------+---------------+---------------+---------------+\n\
    \   |Packet Number (2 bytes)        |. . .                          |\n   +---------------+---------------+---------------+---------------+\n\
    \   |. . .                          |Longword Alignment Padding     |\n   +---------------+---------------+---------------+---------------+\n"
- title: 2.2 ETFTP COMMAND SET
  contents:
  - "2.2 ETFTP COMMAND SET\n   Being built from TFTP source code, ETFTP shares a significant\
    \ portion\n   of TFTP's design. Like TFTP, ETFTP does NOT support user password\n\
    \   validation. The program does not support changing directories (i.e.\n   cd),\
    \ neither can it list directories, (i.e. ls). All filenames must\n   be given\
    \ in full paths, as relative paths are not supported. The\n   internal finite\
    \ state machine was modified to support NETBLT message\n   types.\n   The NETBLT\
    \ protocol is implemented as closely as possible to what is\n   described in RFC\
    \ 998, with a few exceptions. The client string field\n   in the OPEN message\
    \ type is used to carry the filename of the file to\n   be transferred. Netascii\
    \ or binary transfers are both supported. If\n   enabled, new packet sizes, burstsizes,\
    \ and burstrates are re-\n   negotiated downwards when half or more of the blocks\
    \ in a buffer\n   require retransmission. If 99% of the packets in a buffer is\n\
    \   successfully transferred without any retransmissions, packet size is\n   re-negotiated\
    \ upwards.\n   The interactive commands supported by the client process are similar\n\
    \   to TFTP. Here is the ETFTP command set. Optional parameters are in\n   square\
    \ brackets. Presets are in parentheses.\n   ?       help, displays command list\n\
    \   ascii   mode ascii, appends CR-LF per line\n   autoadapt       toggles backoff\
    \ function (on)\n   baudrate baud   baud rate (16000 bits/sec)\n   binary  mode\
    \ binary, image transfer\n   blocksize bytes packet size in bytes (512 bytes/block)\n\
    \   bufferblock blks        buffer size in blocks (128 blocks/buff)\n   burstsize\
    \ packets       burst size in packets (8 blocks/burst)\n   connect host [p]  \
    \      establish connection with host at port p\n   exit    ends program\n   get\
    \ rfile lfile copy remote file to local file\n   help    same as ?\n   mode choice\
    \     set transfer mode (binary)\n   multibuff num   number of buffers (2 buffers)\n\
    \   put lfile rfile copy local file to remote file\n   quit    same as exit\n\
    \   radiodelay sec  transmission delay in seconds (2 sec)\n   status  display\
    \ network parameters\n   trace   toggles debug display (off).\n"
- title: 2.3 DATA TRANSFER AND FLOW CONTROL
  contents:
  - "2.3 DATA TRANSFER AND FLOW CONTROL\n   This is the scenario between client and\
    \ server transfers:\n   Client sends OPEN for connection, blocksize, buffersize,\
    \ burstsize,\n   burstrate, transfer mode, and get or put. See M bit of reserved\n\
    \   field.\n   Server sends a RESPONSE with the agreed parameters.\n   Receiver\
    \ sends a CONTROL_GO request sending of first buffer.\n   Sender starts transfer\
    \ by reading the file into multiple memory\n   buffers. See Figure 1, \"File Segmentation,\"\
    . Each buffer is divided\n   according to the number of bytes/block. Each block\
    \ becomes a DATA\n   packet, which is concatenated according to the blocks/burst.\
    \  Bursts\n   are transmitted according to the burstrate. Last data block is\n\
    \   flagged as LDATA type.\n   +---+     +---+      +---+ +---+ +---+      +---+\
    \ +---+ +---+\n   |   |     | 0 |      | L | | 4 | | 3 | ---- | 2 | | 1 | | 0\
    \ |\n   |   |     | +---+    +---+ +---+ +---+      +---+ +---+ +---+\n   |  \
    \ |     +-|   | -->      +---+ +---+      +---+ +---+ +---+\n   |   | -->   |\
    \ 1 |          | L | | 3 | ---- | 2 | | 1 | | 0 |\n   +---+       +---+      \
    \    +---+ +---+      +---+ +---+ +---+\n   File   Multi Buffers  Blocks per Burst\n\
    \   Figure 1. File Segmentation\n   Receiver acknowledges buffer as CONTROL_OK\
    \ or CONTROL_RESEND.\n   If blocks are missing, a CONTROL_RESEND packet is transmitted.\
    \ If\n   half or more of the blocks in a buffer are missing, an adaptive\n   algorithm\
    \ is used for the next buffer transfer. If no blocks are\n   missing, a CONTROL_OK\
    \ packet is transmitted.\n   Sender re-transmits blocks until receipt of a CONTROL_OK.\
    \ If the\n   adaptive algorithm is set, then new parameters are offered, in the\n\
    \   CONTROL_OK message. The priority of the adaptive algorithm is:\n   -     \
    \  Reduce packetsize by half (MIN = 16 bytes/packet)\n   -       Reduce burstsize\
    \ by one (MIN = 1 packet/burst)\n   -       Reduce burstrate to actual tighttimer\
    \ rate\n   If new parameters are valid, the sender transmits a NULL-ACK packet,\n\
    \   to confirm the changes.\n   Receiver sends a CONTROL_GO to request sending\
    \ next buffer.\n   At end of transfer, sender sends a QUIT to close the connection.\n\
    \   Receiver acknowledges the close request with a DONE packet.\n"
- title: 2.4 TUNABLE PARAMETERS
  contents:
  - "2.4 TUNABLE PARAMETERS\n   These parameters directly affect the throughput rate\
    \ of ETFTP.\n   Packetsize      The packetsize is the number of 8 bit bytes per\n\
    \   packet. This number refers to the user data bytes in a block, (frame),\n \
    \  exclusive of any network overhead. The packet size has a valid range\n   from\
    \ 16 to 1,448 bytes. The Maximum Transfer Unit (MTU) implemented in\n   most commercial\
    \ network devices is 1,500 bytes. The de-facto industry\n   standard is 576 byte\
    \ packets.\n   Bufferblock     The bufferblock is the number of blocks per buffer.\n\
    \   Each implementation may have restrictions on available memory, so the\n  \
    \ buffersize is calculated by multiplying the packetsize times the\n   bufferblocks.\n\
    \   Baudrate        The baudrate is the bits per second transfer rate of\n   the\
    \ slowest link (i.e., the radios). The baudrate sets the speed of\n   the sending\
    \ process. The sending process cannot detect the actual\n   speed of the network,\
    \ so the user must set the correct baudrate.\n   Burstsize       The burstsize\
    \ in packets per burst sets how many\n   packets are concatenated and burst for\
    \ transmission efficiency. The\n   burstsize times the packetsize must not exceed\
    \ the available memory of\n   any intervening network devices. On the Ethernet\
    \ portion of the\n   network, all the packets are sent almost instantaneously.\
    \ It is\n   necessary to wait for the network to drain down its memory buffers,\n\
    \   before the next burst is sent. The sending process needs to regulate\n   the\
    \ rate used to place packets into the network.\n   Radiodelay      The radiodelay\
    \ is the time in seconds per burst it\n   takes to synchronize with the radio\
    \ controllers. Any additional\n   hardware delays should be set here. It is the\
    \ aggregate delay of the\n   link layer, such as transmitter key-up, FEC, crypto\
    \ synchronization,\n   and propagation delays.\n   These parameters above are\
    \ used to calculate a burstrate, which is the\n   length of time it takes to transmit\
    \ one burst. The ov is the overhead\n   of 72 bytes per packet of network encapsulation.\
    \ A byte is defined as\n   8 bits. The burstrate value is:\n     burstrate = (packetsize+ov)*burstsize*8/baudrate\n\
    \   In a effort to calculate the round trip time, when data is flowing in\n  \
    \ one direction for most of the transfer, the OPEN and RESPONSE message\n   types\
    \ are timed, and the tactical radio delays are estimated. Using\n   only one packet\
    \ in each direction to estimate the rate of the link is\n   statistically inaccurate.\
    \ It was decided that the radio delay should\n   be a constant provided by the\
    \ user interface.  However, a default\n   value of 2 seconds is used. The granularity\
    \ of this value is in\n   seconds because of two reasons. The first reason is\
    \ that the UNIX\n   supports a sleep function in seconds only. The second reason\
    \ is that\n   in certain applications, such as deep space probes, a 16-bit integer\n\
    \   maximum of 32,767 seconds would suffice.\n"
- title: 2.5 DELAYS AND TIMERS
  contents:
  - "2.5 DELAYS AND TIMERS\n   From these parameters, several timers are derived.\
    \ The control timer\n   is responsible for measuring the per buffer rate of transfer.\
    \ The\n   SENDER copy is nicknamed the loosetimer.\n     loosetimer = (burstrate+radiodelay)*bufferblock/burstsize\n\
    \   The RECEIVER copy of the timer is nicknamed the tighttimer, which\n   measures\
    \ the elapsed time between CONTROL_GO and CONTROL_OK packets.\n   The tighttimer\
    \ is returned to the SENDER to allow the protocol to\n   adjust for the speed\
    \ of the network.\n   The retransmit timer is responsible for measuring the network\
    \ receive\n   data function. It is used to set an alarm signal (SIGALRM) to\n\
    \   interrupt the network read. The retransmit timer (wait) is initially\n   set\
    \ to be the greater of twice the round trip or 4 times the\n   radiodelay, plus\
    \ a constant 5 seconds.\n      wait = MAX ( 2*roundtriptime,  4*radiodelay ) +\
    \ 5 seconds\n   and\n      alarm timeout = wait.\n   Each time the same read times\
    \ out, a five second backoff is added to\n   the next wait. The backoff is necessary\
    \ because the initial user\n   supplied radiodelay, or the initial measured round\
    \ trip time may be\n   incorrect.\n   The retransmit timer is set differently\
    \ for the RECEIVER during a\n   buffer transfer. Before the arrival of the first\
    \ DATA packet, the\n   original alarm time out is used. Once the DATA packets\
    \ start\n   arriving, and for the duration of each buffer transfer, the RECEIVER\n\
    \   alarm time out is reset to the expected arrival time of the last DATA\n  \
    \ packet (blockstogo) plus the delay (wait). As each DATA packet is\n   received,\
    \ the alarm is decremented by one packet interval. This same\n   algorithm is\
    \ used for receiving missing packets, during a RESEND.\n     alarmtimeout = blockstogo*burstrate/burstsize\
    \ + wait\n   The death timer is responsible for measuring the idle time of a\n\
    \   connection. In the ETFTP program, the death timer is set to be equal\n   to\
    \ the accumulated time of ten re-transmissions plus their associated\n   backoffs.\
    \ As such, the death timer value in the OPEN and RESPONSE\n   message types is\
    \ un-necessary. In the ETFTP program, this field could\n   be used to transfer\
    \ the radio delay value instead of creating the two\n   new fields.\n   The keepalive\
    \ timer is responsible for resetting the death timer.\n   This timer will trigger\
    \ the sending of a KEEPALIVE packet to prevent\n   the remote host from closing\
    \ a connection due to the expiration of\n   its death timer. Due to the nature\
    \ of the ETFTP server process, a\n   keepalive timer was not necessary, although\
    \ it is implemented.\n"
- title: 2.6 TEST RESULTS
  contents:
  - "2.6 TEST RESULTS\n   The NETBLT protocol has been tested on other high speed\
    \ networks\n   before, see RFC 1030 [6]. These test results in Tables 13 and 14,\n\
    \   \"ETFTP Performance,\" were gathered from files transferred across the\n \
    \  network and LST-5C TACSAT radios.  The radios were connected together\n   via\
    \ a coaxial cable to provide a \"clean\" link. A clean link is\n   defined to\
    \ a BER of 10e-5. The throughput rates are defined to be the\n   file size divided\
    \ by the elapsed time resulting in bits per second\n   (bps).  The elapsed time\
    \ is measured from the time of the \"get\" or\n   \"put\" command to the completion\
    \ of the transfer. This is an all\n   inclusive time measurement based on user\
    \ perspective. It includes the\n   connection time, transfer time, error recovery\
    \ time, and disconnect\n   time. The user concept of elapsed time is the length\
    \ of time it takes\n   to copy a file from disk to disk. These results show only\
    \ the average\n   performances, including the occasional packet re-transmissions.\
    \ The\n   network configuration was set as:\n   ETFTP Parameters:\n   Filesize\
    \                101,306 bytes\n   Radiodelay      2 seconds\n   Buffersize  \
    \    16,384-131,072 bytes\n   Packetsize      512-2048 bytes\n   Burstsize   \
    \            8-16 packets/burst\n   Gracilis PackeTen Parameters:\n   0 TX Delay\
    \      400 milliseconds\n   1 P Persist     255 [range 1-255]\n   2 Slot Time\
    \     30 milliseconds\n   3 TX Tail               300 milliseconds\n   4 Rcv Buffers\
    \   8 2048 bytes/buffer\n   5 Idle Code     Flag\n   Radio Parameters:\n   Baudrate\
    \                16,000 bps\n   Encryption      on\n   Table 13: ETFTP Performance\
    \ at 8 Packets/Burst in Bits/Second\n   +-----------+-----------+-----------+-----------+-----------+\n\
    \   |buffersize |packetsize |packetsize |packetsize |packetsize |\n   |(bytes)\
    \    |2,048 bytes|1,448 bytes|1,024 bytes|512 bytes  |\n   +-----------+-----------+-----------+-----------+-----------+\n\
    \   |    16,384 |     7,153 |     6,952 |     6,648 |     5,248 |\n   +-----------+-----------+-----------+-----------+-----------+\n\
    \   |    32,768 |     7,652 |     7,438 |     7,152 |     4,926 |\n   +-----------+-----------+-----------+-----------+-----------+\n\
    \   |    65,536 |     8,072 |     8,752 |     8,416 |     5,368 |\n   +-----------+-----------+-----------+-----------+-----------+\n\
    \   |   131,072 |     8,828 |     9,112 |     7,888 |     5,728 |\n   +-----------+-----------+-----------+-----------+-----------+\n\
    \   Table 14: ETFTP Performance at 16 Packets/Burst in Bits/Second\n   +-----------+-----------+-----------+-----------+-----------+\n\
    \   |buffersize |packetsize |packetsize |packetsize |packetsize |\n   |(bytes)\
    \    |2,048 bytes|1,448 bytes|1,024 bytes|512 bytes  |\n   +-----------+-----------+-----------+-----------+-----------+\n\
    \   |    16,384 |     5,544 |     5,045 |     4,801 |     4,570 |\n   +-----------+-----------+-----------+-----------+-----------+\n\
    \   |    32,768 |     8,861 |     8,230 |     8,016 |     7,645 |\n   +-----------+-----------+-----------+-----------+-----------+\n\
    \   |    65,536 |     9,672 |     9,424 |     9,376 |     8,920 |\n   +-----------+-----------+-----------+-----------+-----------+\n\
    \   |   131,072 |    10,432 |    10,168 |     9,578 |     9,124 |\n   +-----------+-----------+-----------+-----------+-----------+\n"
- title: 2.7 PERFORMANCE CONSIDERATIONS
  contents:
  - "2.7 PERFORMANCE CONSIDERATIONS\n   These tests were performed across a tactical\
    \ radio link with a\n   maximum data rate of 16000 bps. In testing ETFTP, it was\
    \ found that\n   the delay associated with the half duplex channel turnaround\
    \ time was\n   the biggest factor in throughput performance. Therefore, every\n\
    \   attempt was made to minimize the number of times the channel needed\n   to\
    \ be turned around. Obviously, the easiest thing to do is to use as\n   big a\
    \ buffer as necessary to read in a file, as acknowledgments\n   occurred only\
    \ at the buffer boundaries. This is not always feasible,\n   as available storage\
    \ on disk could easily exceed available memory.\n   However, the current ETFTP\
    \ buffersize is set at a maximum of 524,288\n   bytes.\n   The larger packetsizes\
    \ also improved performance. The limit on\n   packetsize is based on the 1500\
    \ byte MTU of network store and forward\n   devices. In a high BER environment,\
    \ a large packetsize could be\n   detrimental to success. By reducing the packetsize,\
    \ even though it\n   negatively impacts performance, reliability is sustained.\
    \ When used\n   in conjunction with FEC, both performance and reliability can\
    \ be\n   maintained at an acceptable level.\n   The burstsize translates into\
    \ how long the radio transmitters are\n   keyed to transmit. In ETFTP, the ideal\
    \ situation is to have the first\n   packet of a burst arrive in the radio transmit\
    \ buffer, as the last\n   packet of the previous burst is just finished being\
    \ sent. In this\n   way, the radio transmitter would never be dropped for the\
    \ duration of\n   one buffer. In a multi-user radio network, a full buffer transmission\n\
    \   would be inconsiderate, as the transmit cycle could last for several\n   minutes,\
    \ instead of seconds. In measuring voice communications,\n   typical transmit\
    \ durations are on the order of five to twenty\n   seconds.  This means that the\
    \ buffersize and burstsize could be\n   adjusted to have similar transmission\
    \ durations.\n"
- title: 3.  REFERENCE SECTION
  contents:
  - "3.  REFERENCE SECTION\n   [1] Clark, D., Lambert, M., and L. Zhang,\n       \"\
    NETBLT: A Bulk Data Transfer Protocol\", RFC 998, MIT,\n       March 1987.\n \
    \  [2] Postel, J., \"User Datagram Protocol\" STD 6, RFC 768,\n       USC/Information\
    \ Sciences Institute, August 1980.\n   [3] Sollins, K., \"Trivial File Transfer\
    \ Protocol\", STD 33,\n       RFC 1350, MIT, July 1992.\n   [4] MIL-STD-2045-44500,\
    \ 18 June 1993, \"Military Standard Tactical\n       Communications Protocol 2\
    \ (TACO 2) fot the National Imagery\n       Transmission Format Standard\", Ft.\
    \ Monmouth, New Jersey.\n   [5] Stevens, W. Richard, 1990, \"UNIX Network Programming\"\
    ,\n       Prentice-Hall Inc., Englewood, New Jersey, Chapter 12.\n   [6] Lambert,\
    \ M., \"On Testing the NETBLT Protocol over\n       Divers Networks\", RFC 1030,\
    \ MIT, November 1987.\n"
- title: 4.  SECURITY CONSIDERATIONS
  contents:
  - "4.  SECURITY CONSIDERATIONS\n   The ETFTP program is a security loophole in any\
    \ UNIX environment.\n   There is no user/password validation. All the problems\
    \ associated to\n   TFTP are repeated in ETFTP. The server program must be owned\
    \ by root\n   and setuid to root in order to work. As an experimental prototype\n\
    \   program, the security issue was overlooked. Since this protocol has\n   proven\
    \ too be a viable solution in tactical radio networks, the\n   security issues\
    \ will have to be addressed, and corrected.\n"
- title: 5.  AUTHORS' ADDRESSES
  contents:
  - "5.  AUTHORS' ADDRESSES\n   William J. Polites\n   The Mitre Corporation\n   145\
    \ Wyckoff Rd.\n   Eatontown, NJ 07724\n   Phone: (908) 544-1414\n   EMail:wpolites@mitre.org\n\
    \   William Wollman\n   The Mitre Corporation\n   145 Wyckoff Rd.\n   Eatontown,\
    \ NJ 07724\n   Phone: (908) 544-1414\n   EMail:wwollman@mitre.org\n   David Woo\n\
    \   The Mitre Corporation\n   145 Wyckoff Rd.\n   Eatontown, NJ 07724\n   Phone:\
    \ (908) 544-1414\n   EMail: dwoo@mitre.org\n   Russ Langan\n   U.S. Army Communications\
    \ Electronics Command (CECOM)\n   AMSEL-RD-ST-SP\n   ATTN: Russell Langan\n  \
    \ Fort Monmouth, NJ 07703\n   Phone: (908) 427-2064\n   Fax: (908) 427-2822\n\
    \   EMail: langanr@doim6.monmouth.army.mil\n"
- title: 6.  GLOSSARY
  contents:
  - "6.  GLOSSARY\n   ATD             Advanced Technology Demonstration\n   AX.25\
    \           Amateur Radio X.25 Protocol\n   BER             Bit Error Rate\n \
    \  EPLRS           Enhanced Position Location Reporting Systems\n   ETFTP    \
    \       Enhanced Trivial File Transfer Protocol\n   FEC             Forward Error\
    \ Correction\n   FTP             File Transfer Protocol\n   HF              High\
    \ Frequency\n   LCU             Lightweight Computer Unit\n   ms             \
    \ milliseconds\n   MTU             Maximum Transfer Unit\n   NETBLT  NETwork Block\
    \ Transfer protocol\n   NITFS           National Imagery Transmission Format Standard\n\
    \   PC              Personal Computer\n   RNC             Radio Network Controller\n\
    \   SAS             Survivable Adaptive Systems\n   SATCOM  SATellite COMmunications\n\
    \   SCO             Santa Cruz Operations\n   SINCGARS        SINgle Channel Ground\
    \ and Airborne Radio Systems\n   SLIP            Serial Line Internet Protocol\n\
    \   TACO2           Tactical Communications Protocol 2\n   TCP             Transmission\
    \ Control Protocol\n   TFTP            Trivial File Transfer Protocol\n   UDP\
    \             User Datagram Protocol\n   UHF             Ultra High Frequency\n\
    \   * Modification from NETBLT RFC 998.\n   * The new packet size is a modification\
    \ to the NETBLT RFC 998.\n   * The new packet size is a modification to the NETBLT\
    \ RFC 998.\n"
