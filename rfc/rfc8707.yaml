- title: __initial_text__
  contents:
  - '                   Resource Indicators for OAuth 2.0

    '
- title: Abstract
  contents:
  - "Abstract\n   This document specifies an extension to the OAuth 2.0 Authorization\n\
    \   Framework defining request parameters that enable a client to\n   explicitly\
    \ signal to an authorization server about the identity of\n   the protected resource(s)\
    \ to which it is requesting access.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8707.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2020 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction\n     1.1.  Requirements Notation and\
    \ Conventions\n     1.2.  Terminology\n   2.  Resource Parameter\n     2.1.  Authorization\
    \ Request\n     2.2.  Access Token Request\n   3.  Security Considerations\n \
    \  4.  Privacy Considerations\n   5.  IANA Considerations\n     5.1.  OAuth Parameters\
    \ Registration\n     5.2.  OAuth Extensions Error Registration\n   6.  References\n\
    \     6.1.  Normative References\n     6.2.  Informative References\n   Acknowledgements\n\
    \   Authors' Addresses\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Several years of deployment and implementation experience\
    \ with the\n   OAuth 2.0 Authorization Framework [RFC6749] has uncovered a need\
    \ (in\n   some circumstances, such as an authorization server servicing a\n  \
    \ significant number of diverse resources) for the client to explicitly\n   signal\
    \ to the authorization server where it intends to use the access\n   token it\
    \ is requesting.\n   Knowing the protected resource (a.k.a. resource server, application,\n\
    \   API, etc.) that will process the access token enables the\n   authorization\
    \ server to construct the token as necessary for that\n   entity.  Properly encrypting\
    \ the token (or content within the token)\n   to a particular resource, for example,\
    \ requires knowing which\n   resource will receive and decrypt the token.  Furthermore,\
    \ various\n   resources oftentimes have different requirements with respect to\
    \ the\n   data contained in (or referenced by) the token, and knowing the\n  \
    \ resource where the client intends to use the token allows the\n   authorization\
    \ server to mint the token accordingly.\n   Specific knowledge of the intended\
    \ recipient(s) of the access token\n   also helps facilitate improved security\
    \ characteristics of the token\n   itself.  Bearer tokens, currently the most\
    \ commonly utilized type of\n   OAuth access token, allow any party in possession\
    \ of a token to get\n   access to the associated resources.  To prevent misuse,\
    \ several\n   important security assumptions must hold, one of which is that an\n\
    \   access token must only be valid for use at a specific protected\n   resource\
    \ and for a specific scope of access.  Section 5.2 of\n   [RFC6750], for example,\
    \ prescribes including the token's intended\n   recipients within the token to\
    \ prevent token redirect.  When the\n   authorization server is informed of the\
    \ resource that will process\n   the access token, it can restrict the intended\
    \ audience of that token\n   to the given resource such that the token cannot\
    \ be used successfully\n   at other resources.\n   OAuth scope, from Section 3.3\
    \ of [RFC6749], is sometimes overloaded\n   to convey the location or identity\
    \ of the protected resource,\n   however, doing so isn't always feasible or desirable.\
    \  Scope is\n   typically about what access is being requested rather than where\
    \ that\n   access will be redeemed (e.g., \"email\", \"admin:org\", \"user_photos\"\
    ,\n   \"channels:read\", and \"channels:write\" are a small sample of scope\n\
    \   values in use in the wild that convey only the type of access and not\n  \
    \ the location or identity).\n   In some circumstances and for some deployments,\
    \ a means for the\n   client to signal to the authorization server where it intends\
    \ to use\n   the access token it's requesting is important and useful.  A number\n\
    \   of implementations and deployments of OAuth 2.0 have already employed\n  \
    \ proprietary parameters toward that end.  Going forward, this\n   specification\
    \ aspires to provide a standardized and interoperable\n   alternative to the proprietary\
    \ approaches.\n"
- title: 1.1.  Requirements Notation and Conventions
  contents:
  - "1.1.  Requirements Notation and Conventions\n   The key words \"MUST\", \"MUST\
    \ NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\"\
    , \"RECOMMENDED\", \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this\
    \ document are to be interpreted as described in\n   BCP 14 [RFC2119] [RFC8174]\
    \ when, and only when, they appear in all\n   capitals, as shown here.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   This specification uses the terms \"access token\", \"\
    refresh token\",\n   \"authorization server\", \"resource server\", \"authorization\
    \ endpoint\",\n   \"authorization request\", \"authorization response\", \"token\
    \ endpoint\",\n   \"grant type\", \"access token request\", \"access token response\"\
    , and\n   \"client\" defined by The OAuth 2.0 Authorization Framework [RFC6749].\n"
- title: 2.  Resource Parameter
  contents:
  - "2.  Resource Parameter\n   In requests to the authorization server, a client\
    \ MAY indicate the\n   protected resource (a.k.a. resource server, application,\
    \ API, etc.)\n   to which it is requesting access by including the following parameter\n\
    \   in the request.\n   resource\n      Indicates the target service or resource\
    \ to which access is being\n      requested.  Its value MUST be an absolute URI,\
    \ as specified by\n      Section 4.3 of [RFC3986].  The URI MUST NOT include a\
    \ fragment\n      component.  It SHOULD NOT include a query component, but it\
    \ is\n      recognized that there are cases that make a query component a\n  \
    \    useful and necessary part of the resource parameter, such as when\n     \
    \ one or more query parameters are used to scope requests to an\n      application.\
    \  The \"resource\" parameter URI value is an identifier\n      representing the\
    \ identity of the resource, which MAY be a locator\n      that corresponds to\
    \ a network-addressable location where the\n      target resource is hosted. \
    \ Multiple \"resource\" parameters MAY be\n      used to indicate that the requested\
    \ token is intended to be used\n      at multiple resources.\n   The parameter\
    \ value identifies a resource to which the client is\n   requesting access.  The\
    \ parameter can carry the location of a\n   protected resource, typically as an\
    \ https URL or a more abstract\n   identifier.  This enables the authorization\
    \ server to apply policy as\n   appropriate for the resource, such as determining\
    \ the type and\n   content of tokens to be issued, if and how tokens are encrypted,\
    \ and\n   applying appropriate audience restrictions.\n   The client SHOULD provide\
    \ the most specific URI that it can for the\n   complete API or set of resources\
    \ it intends to access.  In practice,\n   a client will know a base URI for the\
    \ application or resource that it\n   interacts with, which is appropriate to\
    \ use as the value of the\n   \"resource\" parameter.  The client SHOULD use the\
    \ base URI of the API\n   as the \"resource\" parameter value unless specific\
    \ knowledge of the\n   resource dictates otherwise.  For example, the value\n\
    \   \"https://api.example.com/\" would be used for a resource that is the\n  \
    \ exclusive application on that host; however, if the resource is one\n   of many\
    \ applications on that host, something like\n   \"https://api.example.com/app/\"\
    \ would be used as a more specific\n   value.  Another example is when an API\
    \ has multiple endpoints, e.g.,\n   when System for Cross-domain Identity Management\
    \ (SCIM) [RFC7644] has\n   endpoints such as \"https://apps.example.com/scim/Users\"\
    ,\n   \"https://apps.example.com/scim/Groups\", and\n   \"https://apps.example.com/scim/Schemas\"\
    .  The client would use\n   \"https://apps.example.com/scim/\" as the resource\
    \ so that the issued\n   access token is valid for all the endpoints of the SCIM\
    \ API.\n   The following error code is provided for an authorization server to\n\
    \   indicate problems with the requested resource(s) in response to an\n   authorization\
    \ request or access token request.  It can also be used\n   to inform the client\
    \ that it has requested an invalid combination of\n   resource and scope.\n  \
    \ invalid_target\n      The requested resource is invalid, missing, unknown, or\
    \ malformed.\n   The authorization server SHOULD audience-restrict issued access\n\
    \   tokens to the resource(s) indicated by the \"resource\" parameter.\n   Audience\
    \ restrictions can be communicated in JSON Web Tokens\n   [RFC7519] with the \"\
    aud\" claim and the top-level member of the same\n   name provides the audience\
    \ restriction information in a Token\n   Introspection [RFC7662] response.  The\
    \ authorization server may use\n   the exact \"resource\" value as the audience\
    \ or it may map from that\n   value to a more general URI or abstract identifier\
    \ for the given\n   resource.\n"
- title: 2.1.  Authorization Request
  contents:
  - "2.1.  Authorization Request\n   When the \"resource\" parameter is used in an\
    \ authorization request to\n   the authorization endpoint, it indicates the identity\
    \ of the\n   protected resource(s) to which access is being requested.  When an\n\
    \   access token will be returned directly from the authorization\n   endpoint\
    \ via the implicit flow (Section 4.2 of OAuth 2.0 [RFC6749]),\n   the requested\
    \ resource is applicable to that access token.  In the\n   code flow (Section\
    \ 4.1 of OAuth 2.0 [RFC6749]) where an intermediate\n   representation of the\
    \ authorization grant (the authorization code) is\n   returned from the authorization\
    \ endpoint, the requested resource is\n   applicable to the full authorization\
    \ grant.\n   For an authorization request sent as a JSON Web Token (JWT), such\
    \ as\n   when using the JWT Secured Authorization Request [JWT-SAR], a single\n\
    \   \"resource\" parameter value is represented as a JSON string while\n   multiple\
    \ values are represented as an array of strings.\n   If the client omits the \"\
    resource\" parameter when requesting\n   authorization, the authorization server\
    \ MAY process the request with\n   no specific resource or by using a predefined\
    \ default resource value.\n   Alternatively, the authorization server MAY require\
    \ clients to\n   specify the resource(s) they intend to access and MAY fail requests\n\
    \   that omit the parameter with an \"invalid_target\" error.  The\n   authorization\
    \ server might use this data to inform the user about the\n   resources the client\
    \ is going to access on their behalf, to apply\n   policy (e.g., refuse the request\
    \ due to unknown resources), and to\n   determine the set of resources that can\
    \ be used in subsequent access\n   token requests.\n   If the authorization server\
    \ fails to parse the provided value(s) or\n   does not consider the resource(s)\
    \ acceptable, it should reject the\n   request with an error response using the\
    \ error code \"invalid_target\"\n   as the value of the \"error\" parameter and\
    \ can provide additional\n   information regarding the reasons for the error using\
    \ the\n   \"error_description\".\n   An example of an authorization request where\
    \ the client tells the\n   authorization server that it wants an access token\
    \ for use at\n   \"https://api.example.com/app/\" is shown in Figure 1 below (extra\
    \ line\n   breaks and indentation are for display purposes only).\n     GET /as/authorization.oauth2?response_type=token\n\
    \        &client_id=example-client\n        &state=XzZaJlcwYew1u0QBrRv_Gw\n  \
    \      &redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb\n        &resource=https%3A%2F%2Fapi.example.com%2Fapp%2F\
    \ HTTP/1.1\n     Host: authorization-server.example.com\n               Figure\
    \ 1: Implicit Flow Authorization Request\n   Below in Figure 2 is an example of\
    \ an authorization request using the\n   \"code\" response type where the client\
    \ is requesting access to the\n   resource owner's contacts and calendar data\
    \ at\n   \"https://cal.example.com/\" and \"https://contacts.example.com/\" (extra\n\
    \   line breaks and indentation are for display purposes only).\n     GET /as/authorization.oauth2?response_type=code\n\
    \        &client_id=s6BhdRkqt3\n        &state=tNwzQ87pC6llebpmac_IDeeq-mCR2wLDYljHUZUAWuI\n\
    \        &redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb\n        &scope=calendar%20contacts\n\
    \        &resource=https%3A%2F%2Fcal.example.com%2F\n        &resource=https%3A%2F%2Fcontacts.example.com%2F\
    \ HTTP/1.1\n     Host: authorization-server.example.com\n                 Figure\
    \ 2: Code Flow Authorization Request\n"
- title: 2.2.  Access Token Request
  contents:
  - "2.2.  Access Token Request\n   When the \"resource\" parameter is used on an\
    \ access token request made\n   to the token endpoint, for all grant types, it\
    \ indicates the target\n   service or protected resource where the client intends\
    \ to use the\n   requested access token.\n   The resource value(s) that is acceptable\
    \ to an authorization server\n   in fulfilling an access token request is at its\
    \ sole discretion based\n   on local policy or configuration.  In the case of\
    \ a \"refresh_token\"\n   or \"authorization_code\" grant type request, such policy\
    \ may limit the\n   acceptable resources to those that were originally granted\
    \ by the\n   resource owner or a subset thereof.  In the \"authorization_code\"\
    \ case\n   where the requested resources are a subset of the set of resources\n\
    \   originally granted, the authorization server will issue an access\n   token\
    \ based on that subset of requested resources, whereas any\n   refresh token that\
    \ is returned is bound to the full original grant.\n   When requesting a token,\
    \ the client can indicate the desired target\n   service(s) where it intends to\
    \ use that token by way of the\n   \"resource\" parameter and can indicate the\
    \ desired scope of the\n   requested token using the \"scope\" parameter.  The\
    \ semantics of such a\n   request are that the client is asking for a token with\
    \ the requested\n   scope that is usable at all the requested target services.\n\
    \   Effectively, the requested access rights of the token are the\n   cartesian\
    \ product of all the scopes at all the target services.  To\n   the extent possible,\
    \ when issuing access tokens, the authorization\n   server should downscope the\
    \ scope value associated with an access\n   token to the value the respective\
    \ resource is able to process and\n   needs to know.  (Here, \"downscope\" means\
    \ give fewer permissions than\n   originally authorized by the resource owner.)\
    \  This further improves\n   privacy as a list of scope values is an indication\
    \ that the resource\n   owner uses the multiple various services listed; downscoping\
    \ a token\n   to only that which is needed for a particular service can limit\
    \ the\n   extent to which such information is revealed across different\n   services.\
    \  As specified in Section 5.1 of [RFC6749], the\n   authorization server must\
    \ indicate the access token's effective scope\n   to the client in the \"scope\"\
    \ response parameter value when it differs\n   from the scope requested by the\
    \ client.\n   Following from the code flow authorization request shown in Figure\
    \ 2,\n   the below examples show an \"authorization_code\" grant type access\n\
    \   token request (Figure 3) and response (Figure 4) where the client\n   tells\
    \ the authorization server that it wants the access token for use\n   at \"https://cal.example.com/\"\
    \ (extra line breaks and indentation are\n   for display purposes only).\n   \
    \  POST /as/token.oauth2 HTTP/1.1\n     Host: authorization-server.example.com\n\
    \     Authorization: Basic czZCaGRSa3F0Mzpoc3FFelFsVW9IQUU5cHg0RlNyNHlJ\n    \
    \ Content-Type: application/x-www-form-urlencoded\n     grant_type=authorization_code\n\
    \     &redirect_uri=https%3A%2F%2Fclient.example.org%2Fcb\n     &code=10esc29BWC2qZB0acc9v8zAv9ltc2pko105tQauZ\n\
    \     &resource=https%3A%2F%2Fcal.example.com%2F\n                       Figure\
    \ 3: Access Token Request\n      HTTP/1.1 200 OK\n      Content-Type: application/json\n\
    \      Cache-Control: no-cache, no-store\n      {\n         \"access_token\":\"\
    eyJhbGciOiJFUzI1NiIsImtpZCI6Ijc3In0.eyJpc3MiOi\n          JodHRwOi8vYXV0aG9yaXphdGlvbi1zZXJ2ZXIuZXhhbXBsZS5jb20iLCJzdWI\n\
    \          iOiJfX2JfYyIsImV4cCI6MTU4ODQyMDgwMCwic2NvcGUiOiJjYWxlbmRhciIs\n   \
    \       ImF1ZCI6Imh0dHBzOi8vY2FsLmV4YW1wbGUuY29tLyJ9.nNWJ2dXSxaDRdMUK\n      \
    \    lzs-cYIj8MDoM6Gy7pf_sKrLGsAFf1C2bDhB60DQfW1DZL5npdko1_Mmk5sUf\n         \
    \ zkiQNVpYw\",\n         \"token_type\":\"Bearer\",\n         \"expires_in\":3600,\n\
    \         \"refresh_token\":\"4LTC8lb0acc6Oy4esc1Nk9BWC0imAwH7kic16BDC2\",\n \
    \        \"scope\":\"calendar\"\n      }\n                      Figure 4: Access\
    \ Token Response\n   A subsequent access token request, using the refresh token,\
    \ where the\n   client tells the authorization server that it wants an access\
    \ token\n   for use at \"https://contacts.example.com/\" is shown in Figure 5\
    \ below\n   with the response shown in Figure 6 (extra line breaks and\n   indentation\
    \ are for display purposes only).\n     POST /as/token.oauth2 HTTP/1.1\n     Host:\
    \ authorization-server.example.com\n     Authorization: Basic czZCaGRSa3F0Mzpoc3FFelFsVW9IQUU5cHg0RlNyNHlJ\n\
    \     Content-Type: application/x-www-form-urlencoded\n     grant_type=refresh_token\n\
    \     &refresh_token=4LTC8lb0acc6Oy4esc1Nk9BWC0imAwH7kic16BDC2\n     &resource=https%3A%2F%2Fcontacts.example.com%2F\n\
    \                       Figure 5: Access Token Request\n      HTTP/1.1 200 OK\n\
    \      Content-Type: application/json\n      Cache-Control: no-cache, no-store\n\
    \      {\n         \"access_token\":\"eyJhbGciOiJFUzI1NiIsImtpZCI6Ijc3In0.eyJpc3MiOi\n\
    \          JodHRwOi8vYXV0aG9yaXphdGlvbi1zZXJ2ZXIuZXhhbXBsZS5jb20iLCJzdWI\n   \
    \       iOiJfX2JfYyIsImV4cCI6MTU4ODQyMDgyNiwic2NvcGUiOiJjb250YWN0cyIs\n      \
    \    ImF1ZCI6Imh0dHBzOi8vY29udGFjdHMuZXhhbXBsZS5jb20vIn0.5f4yhqazc\n         \
    \ OSlJw4y94KPeWNEFQqj2cfeO8x4hr3YbHtIl3nQXnBMw5wREY5O1YbZED-GfH\n          UowfmtNaA5EikYAw\"\
    ,\n         \"token_type\":\"Bearer\",\n         \"expires_in\":3600,\n      \
    \   \"scope\":\"contacts\"\n      }\n                      Figure 6: Access Token\
    \ Response\n"
- title: 3.  Security Considerations
  contents:
  - "3.  Security Considerations\n   An audience-restricted access token that is legitimately\
    \ presented to\n   a resource cannot then be taken by that resource and presented\n\
    \   elsewhere for illegitimate access to other resources.  The \"resource\"\n\
    \   parameter enables a client to indicate the protected resources where\n   the\
    \ requested access token will be used, which in turn enables the\n   authorization\
    \ server to apply the appropriate audience restrictions\n   to the token.\n  \
    \ Some servers may host user content or be multi-tenant.  In order to\n   avoid\
    \ attacks where one tenant uses an access token to illegitimately\n   access resources\
    \ owned by a different tenant, it is important to use\n   a specific resource\
    \ URI including any portion of the URI that\n   identifies the tenant, such as\
    \ a path component.  This will allow\n   access tokens to be audience-restricted\
    \ in a way that identifies the\n   tenant and prevents their use, due to an invalid\
    \ audience, at\n   resources owned by a different tenant.\n   Although multiple\
    \ occurrences of the \"resource\" parameter may be\n   included in a token request,\
    \ using only a single \"resource\" parameter\n   is encouraged.  If a bearer token\
    \ has multiple intended recipients\n   (audiences), then the token is valid at\
    \ more than one protected\n   resource and can be used by any one of those resources\
    \ to access any\n   of the others.  Thus, a high degree of trust between the involved\n\
    \   parties is needed when using access tokens with multiple audiences.\n   Furthermore,\
    \ an authorization server may be unwilling or unable to\n   fulfill a token request\
    \ with multiple resources.\n   Whenever feasible, the \"resource\" parameter should\
    \ correspond to the\n   network-addressable location of the protected resource.\
    \  This makes\n   it possible for the client to validate that the resource being\n\
    \   requested controls the corresponding network location, reducing the\n   risk\
    \ of malicious endpoints obtaining tokens meant for other\n   resources.  If the\
    \ \"resource\" parameter contains an abstract\n   identifier, it is the client's\
    \ responsibility to validate out of band\n   that any network endpoint to which\
    \ tokens are sent are the intended\n   audience for that identifier.\n"
- title: 4.  Privacy Considerations
  contents:
  - "4.  Privacy Considerations\n   In typical OAuth deployments the authorization\
    \ sever is in a position\n   to observe and track a significant amount of user\
    \ and client\n   behavior.  It is largely just inherent to the nature of OAuth,\
    \ and\n   this document does little to affect that.  In some cases, however,\n\
    \   such as when access token introspection is not being used, use of the\n  \
    \ resource parameter defined herein may allow for tracking behavior at\n   a somewhat\
    \ more granular and specific level than would otherwise be\n   possible in its\
    \ absence.\n"
- title: 5.  IANA Considerations
  contents:
  - '5.  IANA Considerations

    '
- title: 5.1.  OAuth Parameters Registration
  contents:
  - "5.1.  OAuth Parameters Registration\n   This specification updates the following\
    \ value in the IANA \"OAuth\n   Parameters\" registry [IANA.OAuth.Parameters]\
    \ established by\n   [RFC6749].\n   Parameter name:  resource\n   Parameter usage\
    \ location:  authorization request, token request\n   Change controller:  IESG\n\
    \   Specification document(s):  RFC 8707\n"
- title: 5.2.  OAuth Extensions Error Registration
  contents:
  - "5.2.  OAuth Extensions Error Registration\n   This specification updates the\
    \ following error in the IANA \"OAuth\n   Extensions Error Registry\" [IANA.OAuth.Parameters]\
    \ established by\n   [RFC6749].\n   Error name:  invalid_target\n   Error usage\
    \ location:  implicit grant error response, token error\n      response\n   Related\
    \ protocol extension:  resource parameter\n   Change controller:  IESG\n   Specification\
    \ document(s):  RFC 8707\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [IANA.OAuth.Parameters]\n              IANA, \"\
    OAuth Parameters\",\n              <https://www.iana.org/assignments/oauth-parameters>.\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119,\
    \ March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC3986]\
    \  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n              Resource\
    \ Identifier (URI): Generic Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986,\
    \ January 2005,\n              <https://www.rfc-editor.org/info/rfc3986>.\n  \
    \ [RFC6749]  Hardt, D., Ed., \"The OAuth 2.0 Authorization Framework\",\n    \
    \          RFC 6749, DOI 10.17487/RFC6749, October 2012,\n              <https://www.rfc-editor.org/info/rfc6749>.\n\
    \   [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n     \
    \         2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n        \
    \      May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [JWT-SAR]  Sakimura, N. and J. Bradley, \"The\
    \ OAuth 2.0 Authorization\n              Framework: JWT Secured Authorization\
    \ Request (JAR)\", Work\n              in Progress, Internet-Draft, draft-ietf-oauth-jwsreq-20,\n\
    \              21 October 2019,\n              <https://tools.ietf.org/html/draft-ietf-oauth-jwsreq-20>.\n\
    \   [RFC6750]  Jones, M. and D. Hardt, \"The OAuth 2.0 Authorization\n       \
    \       Framework: Bearer Token Usage\", RFC 6750,\n              DOI 10.17487/RFC6750,\
    \ October 2012,\n              <https://www.rfc-editor.org/info/rfc6750>.\n  \
    \ [RFC7519]  Jones, M., Bradley, J., and N. Sakimura, \"JSON Web Token\n     \
    \         (JWT)\", RFC 7519, DOI 10.17487/RFC7519, May 2015,\n              <https://www.rfc-editor.org/info/rfc7519>.\n\
    \   [RFC7644]  Hunt, P., Ed., Grizzle, K., Ansari, M., Wahlstroem, E.,\n     \
    \         and C. Mortimore, \"System for Cross-domain Identity\n             \
    \ Management: Protocol\", RFC 7644, DOI 10.17487/RFC7644,\n              September\
    \ 2015, <https://www.rfc-editor.org/info/rfc7644>.\n   [RFC7662]  Richer, J.,\
    \ Ed., \"OAuth 2.0 Token Introspection\",\n              RFC 7662, DOI 10.17487/RFC7662,\
    \ October 2015,\n              <https://www.rfc-editor.org/info/rfc7662>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This specification was developed within the OAuth Working\
    \ Group under\n   the chairmanship of Hannes Tschofenig and Rifaat Shekh-Yusef\
    \ with\n   Eric Rescorla, Benjamin Kaduk, and Roman Danyliw serving as Security\n\
    \   Area Directors.  Additionally, the following individuals contributed\n   ideas,\
    \ feedback, and wording that helped shape this specification:\n   Vittorio Bertocci,\
    \ Sergey Beryozkin, Roman Danyliw, William Denniss,\n   Vladimir Dzhuvinov, George\
    \ Fletcher, Dick Hardt, Phil Hunt, Michael\n   Jones, Benjamin Kaduk, Barry Leiba,\
    \ Torsten Lodderstedt, Anthony\n   Nadalin, Justin Richer, Adam Roach, Nat Sakimura,\
    \ Rifaat Shekh-Yusef,\n   Filip Skokan, \xC9ric Vyncke, and Hans Zandbelt.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Brian Campbell\n   Ping Identity\n   Email: brian.d.campbell@gmail.com\n\
    \   John Bradley\n   Yubico\n   Email: ve7jtb@ve7jtb.com\n   Hannes Tschofenig\n"
