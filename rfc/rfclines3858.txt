Abstract Watchers are defined as entities that request (i.e., subscribe to) information about a resource.
There is fairly complex state associated with these subscriptions.
The union of the state for all subscriptions to a particular resource is called the watcher information for that resource.
This state is dynamic, changing as subscribers come and go.
As a result, it is possible, and indeed useful, to subscribe to the watcher information for a particular resource.
In order to enable this, a format is needed to describe the state of watchers on a resource.
This specification describes an Extensible Markup Language (XML) document format for such state.
Introduction Watchers are defined as entities that request (i.e., subscribe to) information about a resource, using the SIP event framework, RFC 3265 [1].
There is fairly complex state associated with these subscriptions.
This state includes the identity of the subscriber, the state of the subscription, and so on.
The union of the state for all subscriptions to a particular resource is called the watcher information for that resource.
This state is dynamic, changing as subscribers come and go.
As a result, it is possible, and indeed useful, to subscribe to the watcher information for a particular resource.
An important application of this is the ability for a user to find out the set of subscribers to their presentity [11].
This would allow the user to provide an authorization decision for the subscription.
To support subscriptions to watcher information, two components are needed.
The first is the definition of a SIP event template package for watcher information.
The other is the definition of a data format to represent watcher information.
The former is specified in [2], and the latter is specified here.
In this document, the key words "MUST", "
MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "
SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" are to be interpreted as described in BCP 14, RFC 2119 [3] and indicate requirement levels for compliant implementations.
This document also uses the terms subscriber, watcher, subscription, notification, watcherinfo subscription, watcherinfo subscriber, and watcherinfo notification with the meanings described in [2].
Watcher information is an XML document [4] that MUST be well formed and SHOULD be valid.
Watcher information documents MUST be based on XML 1.0 and MUST be encoded using UTF 8.
This specification makes use of XML namespaces for identifying watcherinfo documents and document fragments.
The namespace URI for elements defined by this specification is a URN [5], using the namespace identifier 'ietf' defined by [6] and extended by [7].
watcherinfo A watcher information document begins with the root element tag "watcherinfo".
It consists of any number of "watcher list" sub  elements, each of which is a list of watchers for a particular resource.
Other elements from different namespaces MAY be present for the purposes of extensibility; elements or attributes from unknown namespaces MUST be ignored.
There are two attributes associated with the "watcherinfo" element, both of which MUST be present: version: This attribute allows the recipient of watcherinfo documents to properly order them.
Versions start at 0, and increment by one for each new document sent to a watcherinfo subscriber.
Versions are scoped within a watcherinfo subscription.
Versions MUST be representable using a 32 bit integer.
However, versions do not wrap.
This attribute indicates whether the document contains the full watcherinfo state, or whether it contains only information on those watchers which have changed since the previous document (partial).
Each "watcher list" element contains a list of "watcher" elements, each of which describes a watcher on a particular resource.
Other elements from different namespaces MAY be present for the purposes of extensibility; elements or attributes from unknown namespaces MUST be ignored.
There are two attributes associated with the "watcher list" element, both of which MUST be present: resource: This attribute contains a URI for the resource being watched by that list of watchers.
package: This attribute contains a token indicating the event package for which watcher information on that resource is being provided.
The "watcher" element describes a watcher in the watcher list.
The value of the "watcher" element is a URI for the watcher.
This URI SHOULD be the authenticated identity of the watcher as determined by the server processing the subscription.
As such, this URI will usually be an address of record (for example, sip:joe@example.com) as opposed to a device address (for example, sip:joe@192.0.2.3).
There are three mandatory attributes which MUST be present: id:
A unique identifier for the subscription described by the watcher element.
The id MUST be representable using the grammar for token as specified by RFC 3261 [8].
It MUST be unique across all other watchers reported in documents sent in notifications for a particular watcherinfo subscription.
The status of the subscription.
The meaning of the various statuses are defined in the watcher information event package [2].
The event which caused the transition to the current status.
The events are defined in the watcher information event package [2].
There are also some optional, informative attributes of the watcher element.
These are: display name: A textual representation of the name of the subscriber.
The amount of time, in seconds from the current time, that the subscription will expire.
duration subscribed: The amount of time, expressed in seconds, between the time the SUBSCRIBE which created the subscription was received, and the current time.
lang attribute MAY be used with the "watcher" element to specify the language of the "display name".
The number of watchers present for each resource, and the set of resources listed, depends on the type of data being provided, and to whom.
For example, consider a presence system using watcher information.
In one scenario, a user, A, subscribes to the presence of another user,
B.  A would like to find out about the status of their subscription.
To do so, A subscribes to the watcher information for B's presence.
A does not have authorization to learn the status of all watchers for B's presence.
As a result, the watcher information sent to A will contain only one watcher A themself.
In another scenario, a user, B, wishes to learn the set of people who have subscribed to B's presence.
To do this, B subscribes to the watcher information for B's presence.
Here, B is authorized to see all the watchers of B's presence.
As a result, the watcher information sent to B will contain all watchers of B's presence.
In the case where an administrator wishes to learn the current status in the system, the watcher information could contain all watchers for all resources.
Computing Watcher Lists from the Document
Typically, the watcherinfo NOTIFY will only contain information about those watchers whose state has changed.
To construct a coherent view of the total state of all watchers, a watcherinfo subscriber will need to combine NOTIFYs received over time.
The watcherinfo subscriber maintains a table for each watcher list it receives information about.
Each watcher list is uniquely identified by the URI in the "resource" attribute of the "watcher list" element.
Each table contains a row for each watcher in that watcher list.
Each row is indexed by the unique ID for that watcher.
It is conveyed in the "id" attribute of the "watcher" element.
The contents of each row contain the state of that watcher as conveyed in the "watcher" element.
The tables are also associated with a version number.
The version number MUST be initialized with the value of the "version" attribute from the "watcherinfo" element in the first document received.
Each time a new document is received, the value of the local version number, and the "version" attribute in the new document, are compared.
If the value in the new document is one higher than the local version number, the local version number is increased by one, and the document is processed.
If the value in the document is more than one higher than the local version number, the local version number is set to the value in the new document, the document is processed, and the watcherinfo subscriber SHOULD generate a refresh request to trigger a full state notification.
If the value in the document is less than the local version, the document is discarded without processing.
The processing of the watcherinfo document depends on whether it contains full or partial state.
If it contains full state, indicated by the value of the "state" attribute in the "watcherinfo" element, the contents of all tables associated with this watcherinfo subscription are flushed.
They are re populated from the document.
A new table is created for each "watcher list" element, and a new row in each table is created for each "watcher" element.
If the watcherinfo contains partial state, as indicated by the value of the "state" attribute in the "watcherinfo" element, the document is used to update the existing tables.
For each "watcher list" element, the watcherinfo subscriber checks to see if a table exists for that list.
This check is done by comparing the URI in the "resource" attribute of the "watcher list" element with the URI associated with the table.
If a table doesn't exist for that list, one is created.
For each "watcher" element in the list, the watcherinfo subscriber checks to see whether a row exists for that watcher.
This check is done by comparing the ID in the "id" attribute of the "watcher" element with the ID associated with the row.
If the watcher doesn't exist in the table, a row is added, and its state is set to the information from that "watcher" element.
If the watcher does exist, its state is updated to be the information from that "watcher" element.
If a row is updated or created, such that its state is now terminated, that entry MAY be removed from the table at any time.
The following is an example of watcher information for a presentity, who is a professor.
There are two watchers, userA and userB. <?
<watcherinfo xmlns "urn:ietf:params:xml:ns:watcherinfo" version "0" state "full"
> <watcher list resource "sip:professor@example.net" package "presence"> <watcher status "active" id "8ajksjda7s" duration subscribed "509" event "approved" >
sip:userA@example.net</watcher> <watcher status "pending" id "hh8juja87s997 ass7" display name "Mr. Subscriber" event "
The following is the schema definition of the watcherinfo document format:
This import brings in the XML language attribute xml:
import namespace "http://www.w3.org/XML/1998/namespace" schemaLocation "http://www.w3.org/2001/03/xml.xsd" /
element ref "tns:watcher list" minOccurs "0" maxOccurs "
> <xs:any namespace "##other" processContents "lax" minOccurs "0" maxOccurs "
<xs:attribute name "version" type "xs:nonNegativeInteger" use "required"/
<xs:attribute name "state" use "required"> <xs:simpleType>
restriction base "xs:string"> <xs:enumeration value "full"/>
complexType> </xs:element> <xs:element name "watcher list"> <xs:
element ref "tns:watcher" minOccurs "0
<xs:attribute name "resource" type "xs:anyURI" use "required"/
complexType> </xs:element> <xs:element name "watcher">
attribute name "display name" type "xs:
<xs:attribute name "status" use "required"> <xs:simpleType>
restriction base "xs:string"> <xs:enumeration value "pending"/
attribute name "event" use "required"
attribute name "expiration" type "xs:unsignedLong"/>
attribute name "id" type "xs:string" use "required"/
<xs:attribute name "duration subscribed" type "xs:
Watcher information is sensitive information.
The protocol used to distribute it SHOULD ensure privacy, message integrity, and authentication.
Furthermore, the protocol should provide access controls which restrict who can see who elses watcher information.
This document registers a new MIME type, application/watcherinfo xml, and registers a new XML namespace.
application/watcherinfo xml MIME Registration MIME media type name:
none Optional parameters: Same as charset parameter application/xml as specified in RFC 3023
Encoding considerations: Same as encoding considerations of application/xml as specified in RFC 3023
: See Section 10 of RFC 3023 [9] and Section 7 of this specification.
Applications which use this media type: This document type has been used to support subscriber authorization functions for SIP based presence [10] [2].
"TEXT" Personal and email address for further information: Jonathan Rosenberg,
URN Sub Namespace Registration for urn:ietf:
This section registers a new XML namespace, as per the guidelines in [7].
The URI for this namespace is urn:ietf:params:xml:ns:watcherinfo.
Registrant Contact: IETF, SIMPLE working group,
" "http://www.w3.org/TR/xhtml basic/xhtml basic10.dtd"> <html xmlns "http://www.w3.org/1999/xhtml"> <head> <meta http equiv
"ftp://ftp.rfc editor.org/in notes/rfc3858.txt"> RFC3858</a>.</p> </body
The following people were part of the original design team that developed the first version of this specification: Dean Willis dynamicsoft 5100
: rsparks@dynamicsoft.com Ben Campbell EMail: ben@nostrum.com Henning Schulzrinne Columbia University M/S 0401 1214
New York, NY 10027 7003
Jonathan Lennox Columbia University M/S 0401 1214
New York, NY 10027 7003
lennox@cs.columbia.edu Christian Huitema Microsoft Corporation
One Microsoft Way Redmond, WA 98052 6399 EMail: bernarda@microsoft.com
David Gurle Reuters Corporation EMail:
David.Gurle@reuters.com Jonathan Lennox contributed the text for the DTD and its usage that were part of earlier versions of this specification.
