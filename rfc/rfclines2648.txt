Abstract A system for Uniform Resource Names (URNs) must be capable of supporting new naming systems.
As an example of proposing a new namespace, this document proposes the "ietf" namespace.
This namespace consists of the RFC family of documents (RFCs, STDs, FYIs, and BCPs) developed by the IETF and published by the RFC Editor, the minutes of working groups (WG) and birds of a feather (BOF) meetings that occur during IETF conferences, and the Internet Drafts published by the Internet Drafts Editor.
Both the current URN framework and URN syntax support
This document proposes the "ietf" namespace, which consists of the RFC family of documents (RFCs, STDs, FYIs, and BCPs) developed by the IETF and published by the RFC editor and the minutes of working groups (WG) and birds of a feather (BOF) meetings that occur during IETF conferences.
The namespace specification is for a formal namespace.
Registration version number: 1 Registration date: 1999 04 22
Declared registrant of the namespace:
Ryan Moats jayhawk@att.com AT&T 15621
Drexel Circle Omaha, NE 68135 2358 Declaration of structure: The identifier has the following ABNF [2] specification:
NSS   rfc nss / fyi nss / std nss / bcp nss / draft nss / mtg nss / other nss rfc nss
"rfc:" 1 DIGIT fyi nss
"fyi:" 1 DIGIT std nss
"std:" 1 DIGIT bcp nss
"bcp:" 1 DIGIT draft nss
"mtg:" string other nss   string ; beginning with a prefix other than one of those ; above for future expansion string   1
If the IESG (or it successor) adds a new document series, this ABNF specification will need to be updated.
Further, if a working group or BOF is created that used characters outside the range of this ABNF specification, this specification will need to be updated.
Any system intended to resolve names for this namespace should be written with the awareness that this could occur at any time.
Relevant documentation is in RFC 2648.
Identifier uniqueness considerations: Because the rfc editor assigns the RFC number uniquely these URNs are unique.
Since the mapping between RFCs and other rfc editor document series (STDs, FYIs or BCPs) is not necessarily one to one, uniqueness of STDs, FYIs and BCPs are defined based on the document mappings maintained by the RFC Editor
(the index files "rfc index.txt", "fyi  index.txt", "bcp index.txt", "std index.txt") are defined to be the definitive statement of the assignment of RFC Family URNs in this namespace.
The meeting minutes portion of the namespace is guaranteed unique because the URN includes the sequence number of the IETF conference.
The document mapping maintained by the Internet Drafts editor ("1id  abstracts.txt") is defined as the definitive statement of the assignment of URNs for the internet draft portion of this namespace.
Persistence of the URNs of this namespace is independent of the mutability of the underlying documents.
A URN once assigned will never be reassigned to a different resource; the assignment is persistent and immutable.
Immutability of RFCs, STDs, FYIs and BCPs is at the discretion of the RFC Editor.
They may be composites of one or more RFCs and the set of RFCs that includes them may change with time.
It is important to note that this mutability of some resources is independent of the immutability of URN assignment to a resource.
Assignment of URNs from this namespace occurs in three ways.
The first is through publication of a new RFC, FYI, STD or BCP is by the RFC Editor.
This new document will have a new series number and will therefore define a new URN.
The document mappings maintained by the RFC Editor (the index files "rfc index.txt", "fyi index.txt", "bcp index.txt" and "std index.txt") are defined to be the definitive statement of the assignment of RFC Family URNs in this namespace.
The second way a URN is assigned is through the filing of meeting minutes by a working group or birds of a feather as part of an IETF conference.
The list of minutes maintained by the IETF for each working group and conference in the subtree pointed at by the URL ftp://ietf.org/ietf/ is considered the definitive assignment of URNs for working group or birds of a feather minutes.
The third way a URN is assigned is through the publication of a new internet draft by the Internet Draft Editor.
This draft will have a distinct name (and version number) and therefore defined a new URN.
The document mapping maintained by the Internet Drafts editor ("1id  abstracts.txt") is defined as the definitive statement of the assignment of URNs for this portion of the namespace.
Process of identifier resolution: A mirrored copy of the underlying documentation is required to resolve these URNs.
Resolution via HTTP is done by a set of simple Perl cgi bin scripts presented in Appendix A. Rules for Lexical Equivalence:
The entire URN is case insensitive.
Conformance with URN Syntax: There are no additional characters reserved.
None additional to resolution specified Scope:
The following are examples of URNs that a resolver for this namespace can resolve:
Security Considerations Because this namespace defines no additional reserved characters, it does not add any security considerations beyond those inherent from the existence of the reserved characters from [1].
Further, none of the reserved characters from [1] are used in the definition of the NSS.
This means that resolvers for this namespace may be considered "secure" in the sense that any escaping of characters in the NSS MUST result in the resolver indicating that the URN has incorrect syntax.
The following scripts are examples that can be used for resolving URNs in this namespace.
# # this is a URN 2 URC resolver for the ietf
"$wgpath/$sesnam/$sesnam minutes $date.txt"; if ( f $link) { print "
Status:  200 OK\r\n"; print "Content type: text/html\r\n\r\n"; print "<HTML>\n<TITLE
; return $inarg . "
~ s/^[0 9] \s /<B>/; for ($i 0; $i< $#bib; $i  1) { last if ($bib[$i]
std rfc bcp)([0 9] )
>Citation for $urn</TITLE>\n"; print "<BODY>\n"; $link &make link("$scheme$value"); print "<H1><A HREF \"$link\">$scheme$value</A>:</H1>\n"; foreach
{ $k $bib[$i]; while ($k
>Citation for $urn</TITLE>\n"; print "<BODY>\n"; $link &make link("$scheme$value"); print "<H1><A HREF \"$link\">$scheme$value</A>:</H1>\n"; foreach
print "Status:  $code"; print "Content type: text/html\n\n<HTML>\n"; print "<head><title>
{ print "Status:  200 OK\r\n"; print "Content type: text/html\r\n\r\n"; print "<HTML>\n<TITLE
>Citation for $urn</TITLE>\n"; print "<BODY>\n"; print "<a href \"http://blackhole.vip.att.net/internet drafts/$l\">$l</a>:\n"; print "<pre>\n"; foreach
# # this is a URN 2 URL resolver for the ietf
"$wgpath/$sesnam/$sesnam minutes $date.txt"; if ( f $link) { print "
; return $inarg . "
"; MIME SWITCH: { if ($accept
{ print "Status:  302 Moved temporarily\n"; print "Location: http://$host/$pathbase{$scheme}$value.ps\n\n"; last MIME SWITCH; }
&&  f $htmltry) { print "Status:  302 Moved temporarily0; print "Location: http://$host/$pathbase{$scheme}$value.html\n\n"; last MIME SWITCH; } if ($accept
print "Status:  $code"; print "Content type: text/html\n\n<HTML>\n"; print "<head><title>
URN Resolution: I2L $code</title></head>\n"; print "<BODY>\n"; print "<h1>URN to URL resolution failed for the URN:</h1>\n"; print "<hr><h3>$urn</h3>\n"; print "</body>\n"; print "</html>\n"; exit; } sub resolveid { my($flag,@bib,$i,$k,$j,$done,@ref); my($l,$link); my($scheme)
"; MIME SWITCH: { if ($accept
{ print "Status:  302 Moved temporarily\n"; print "Location: http://$host/$pathbase{$scheme}$value.ps\n\n"; last MIME SWITCH; }
&&  f $htmltry) { print "Status:  302 Moved temporarily\n"; print "Location: http://$host/$pathbase{$scheme}$value.html\n\n"; last MIME SWITCH; } if ($accept
# # this is a URN 2 URLs resolver for the ietf namespace # my(@urls);
(\w )/i); &urn error("400 Bad Request\n"); sub resolve2 { my($ietfnum, $sesnam)
&urn error("404 Not Found\n") if (!defined $number2date{$ietfnum}); my($date)
{ print "Status: 200 OK\n"; print "Content type: text/html\n\n<HTML>\n"; print "<head><title>
URN Resolution: I2Ls</title></head>\n"; print "<BODY>\n"; print "<h1>
{ print "Status: 200 OK\n"; print "Content type: text/html\n\n<HTML>\n"; print "<head><title>
URN Resolution: I2Ls</title></head>\n"; print "<BODY>\n"; print "<h1>
#look for text/uri list, otherwise text/html print "Status: 200 OK\n"; print "Content type: text/uri list\n\n\n"; print "#$urn\n"; foreach
{ print "Status: 200 OK\n"; print "Content type: text/html\n\n<HTML>\n"; print "<head><title>
URN Resolution: I2Ls</title></head>\n"; print "<BODY>\n"; print "<h1>
print "Status: $code"; print "Content type: text/html\n\n<HTML>\n"; print "<head><title>
URN Resolution: I2L $code</title></head>\n"; print "<BODY>\n"; print "<h1>URN to URL resolution failed for the URN:</h1>\n"; print "<hr><h3>$urn</h3>\n"; print "</body>\n"; print "</html>\n"; exit; } sub resolveid { my($flag,@bib,$i,$k,$j,$done,@ref); my($l,$link); my($value)
/A Z/a z/; &urn error("404
#look for text/uri list, otherwise text/html print "Status: 200 OK\n"; print "Content type: text/uri list\n\n\n"; print "#$urn\n"; foreach
{ print "Status: 200 OK\n"; print "Content type: text/html\n\n<HTML>\n"; print "<head><title>
URN Resolution: I2Ls</title></head>\n"; print "<BODY>\n"; print "<h1>
# # this is a URN 2 URNs resolver for the ietf
(\w )/i); &urn error("400 Bad Request\n"); sub resolve2 { my($ietfnum, $sesnam)
&urn error("404 Not Found\n") if (!defined $number2date{$ietfnum}); my($date)
"$wgpath/$sesnam/$sesnam minutes $date.txt"; if ( f $link)
{ print "Status: 200 OK\n"; print "Content type: text/uri list\n\n\n"; print "#$urn\n"; return; }
{ print "Status: 200 OK\n"; print "Content type: text/html\n\n<HTML>\n"; print "<head><title>
URN Resolution: I2Ns</title></head>\n"; print "<BODY>\n"; print "<h1>
{ print "Status: 200 OK\n"; print "Content type: text/uri list\n\n\n"; print "#$urn\n"; return; }
{ print "Status: 200 OK\n"; print "Content type: text/html\n\n<HTML>\n"; print "<head><title>
URN Resolution: I2Ns</title></head>\n"; print "<BODY>\n"; print "<h1>
(fyi std rfc bcp)\s ([0 9] )
{ print "Status: 200 OK\n"; print "Content type: text/html\n\n<HTML>\n"; print "<head><title>
URN Resolution: I2Ns</title></head>\n"; print "<BODY>\n"; print "<h1>
URN $urn resolves to the following URNs:</h1>\n"; print "<hr><ul>\n"; foreach $i (@ref) { print "<li>$i:
Click to resolve using\n"; print "<a href \"http://$host:$port/uri res/I2C?$i\">I2C</a>,\n"; print "<a href \"http://$host:$port/uri res/I2L?$i\">I2L</a>,\n"; print "<a href \"http://$host:$port/uri res/I2Ls?$i\">I2Ls</a>,\n"
# # this is a URN 2 resource resolver for the ietf
(\w )/i); &urn error("400 Bad Request\n"); sub resolve2 { my($ietfnum, $sesnam)
&urn error("404 Not Found\n") if (!defined $number2date{$ietfnum}); my($date)
"$wgpath/$sesnam/$sesnam minutes $date.txt"; if ( f $link) { print "
Status:  200 OK\n"; print "Content type: text/plain\n\n"; open(FILE, "$link"); while (<FILE>)
{ print "Status:  200 OK\n"; print "Content type: text/plain\n\n"; open(FILE, "$link"); while (<FILE>)
; } sub end { my($inarg) @
; return $inarg . "
"; MIME SWITCH: { if ($accept
{ print "Status:  200 OK\n"; print "Content type: application/postscript\n\n"; open(FILE, "$pstry"); while (<FILE>)
&&  f $htmltry) { print "Status:  200 OK\n"; print "Content type: text/html\n\n"; open(FILE, "$htmltry"); while (<FILE>)
{ print "Status:  200 OK\n"; print "Content type: text/plain\n\n"; open(FILE, "$txttry"); while (<FILE>)
"; MIME SWITCH: { if ($accept
{ print "Status:  200 OK\n"; print "Content type: application/postscript\n\n"; open(FILE, "$pstry"); while (<FILE>)
&&  f $htmltry) { print "Status:  200 OK\n"; print "Content type: text/html\n\n"; open(FILE, "$htmltry"); while (<FILE>)
{ print "Status:  200 OK\n"; print "Content type: text/plain\n\n"; open(FILE, "$txttry"); while (<FILE>)
print "Status:  $code"; print "Content type: text/html\n\n<HTML>\n"; print "<head><title>
URN Resolution: I2R $code</title></head>\n"; print "<BODY>\n"; print "<h1>URN to URL resolution failed for the URN:</h1>\n"; print "<hr><h3>$urn</h3>\n"; print "</body>\n"; print "</html>\n"; exit; } A.6 I2Rs #!
# # this is a URN 2 resources resolver for the ietf
(\w )/i); &urn error("400 Bad Request\n"); sub resolve2 { my($ietfnum, $sesnam)
; &urn error("404 Not Found\n")
"$wgpath/$sesnam/$sesnam minutes $date.txt"; if ( f $link) { push(@vers,$link)
print "Status: $code"; print "Content type: text/html\n\n<HTML>\n"; print "<head><title>
URN Resolution: I2Rs $code</title></head>\n"; print "<BODY>\n"; print "<h1>URN to URL resolution failed for the URN:</h1>\n"; print "<hr><h3>$urn</h3>\n"; print "</body>\n"; print "</html>\n"; exit; }
