- title: __initial_text__
  contents:
  - '                  The text/enriched MIME Content-type

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard.  Distribution of this memo is\n\
    \   unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   MIME [RFC-1341, RFC-1521] defines a format and general framework\
    \ for\n   the representation of a wide variety of data types in Internet mail.\n\
    \   This document defines one particular type of MIME data, the\n   text/enriched\
    \ type, a refinement of the \"text/richtext\" type defined\n   in RFC 1341.  The\
    \ text/enriched MIME type is intended to facilitate\n   the wider interoperation\
    \ of simple enriched text across a wide\n   variety of hardware and software platforms.\n"
- title: The Text/enriched MIME type
  contents:
  - "The Text/enriched MIME type\n   In order to promote the wider interoperability\
    \ of simple formatted\n   text, this document defines an extremely simple subtype\
    \ of the MIME\n   content-type \"text\", the \"text/enriched\" subtype.  This\
    \ subtype was\n   designed to meet the following criteria:\n         1.  The syntax\
    \ must be extremely simple to parse, so that even\n         teletype-oriented\
    \ mail systems can easily strip away the\n         formatting information and\
    \ leave only the readable text.\n         2.  The syntax must be extensible to\
    \ allow for new formatting\n         commands that are deemed essential for some\
    \ application.\n         3.  If the character set in use is ASCII or an 8- bit\
    \ ASCII\n         superset, then the raw form of the data must be readable enough\n\
    \         to be largely unobjectionable in the event that it is displayed\n  \
    \       on the screen of the user of a non-MIME-conformant mail reader.\n    \
    \     4.  The capabilities must be extremely limited, to ensure that\n       \
    \  it can represent no more than is likely to be representable by\n         the\
    \ user's primary word processor.  While this limits what can\n         be sent,\
    \ it increases the likelihood that what is sent can be\n         properly displayed.\n\
    \   This document defines a new MIME content-type, \"text/enriched\".  The\n \
    \  content-type line for this type may have one optional parameter, the\n   \"\
    charset\" parameter, with the same values permitted for the\n   \"text/plain\"\
    \ MIME content-type.\n   The syntax of \"text/enriched\" is very simple.  It represents\
    \ text in\n   a single character set -- US-ASCII by default, although a different\n\
    \   character set can be specified by the use of the \"charset\" parameter.\n\
    \   (The semantics of text/enriched in non-ASCII character sets are\n   discussed\
    \ later in this document.)  All characters represent\n   themselves, with the\
    \ exception of the \"<\" character (ASCII 60), which\n   is used to mark the beginning\
    \ of a formatting command.  Formatting\n   instructions consist of formatting\
    \ commands surrounded by angle\n   brackets (\"<>\", ASCII 60 and 62).  Each formatting\
    \ command may be no\n   more than 60 characters in length, all in US-ASCII, restricted\
    \ to the\n   alphanumeric and hyphen (\"-\") characters.  Formatting commands\
    \ may be\n   preceded by a solidus (\"/\", ASCII 47), making them negations, and\n\
    \   such negations must always exist to balance the initial opening\n   commands.\
    \  Thus, if the formatting command \"<bold>\" appears at some\n   point, there\
    \ must later be a \"</bold>\" to balance it.  (NOTE: The 60\n   character limit\
    \ on formatting commands does NOT include the \"<\", \">\",\n   or \"/\" characters\
    \ that might be attached to such commands.)\n   Formatting commands are always\
    \ case-insensitive.  That is, \"bold\" and\n   \"BoLd\" are equivalent in effect,\
    \ if not in good taste.\n   Beyond tokens delimited by \"<\" and \">\", there\
    \ are two other special\n   processing rules.  First, a literal less-than sign\
    \ (\"<\") can be\n   represented by a sequence of two such characters, \"<<\"\
    .  Second, line\n   breaks (CRLF pairs in standard network representation) are\
    \ handled\n   specially.  In particular, isolated CRLF pairs are translated into\
    \ a\n   single SPACE character.  Sequences of N consecutive CRLF pairs,\n   however,\
    \ are translated into N-1 actual line breaks.  This permits\n   long lines of\
    \ data to be represented in a natural- looking manner\n   despite the frequency\
    \ of line-wrapping in Internet mailers.  When\n   preparing the data for mail\
    \ transport, isolated line breaks should be\n   inserted wherever necessary to\
    \ keep each line shorter than 80\n   characters.  When preparing such data for\
    \ presentation to the user,\n   isolated line breaks should be replaced by a single\
    \ SPACE character,\n   and N consecutive CRLF pairs should be presented to the\
    \ user as N-1\n   line breaks.\n   Thus text/enriched data that looks like this:\n\
    \                    This is\n                    a single\n                 \
    \   line\n                    This is the\n                    next line.\n  \
    \                  This is the\n                    next paragraph.\n   should\
    \ be displayed by a text/enriched interpreter as follows:\n                  \
    \  This is a single line\n                    This is the next line.\n       \
    \             This is the next paragraph.\n   The formatting commands, not all\
    \ of which will be implemented by all\n   implementations, are described in the\
    \ following sections.\n   Formatting Commands\n   The text/enriched formatting\
    \ commands all begin with <commandname>\n   and end with </commandname>, affecting\
    \ the formatting of the text\n   between those two tokens.  The commands are described\
    \ here, grouped\n   according to type.\n   Font-Alteration Commands\n   The following\
    \ formatting commands are intended to alter the font in\n   which text is displayed,\
    \ but not to alter the indentation or\n   justification state of the text:\n \
    \        Bold -- causes the affected text to be in a bold font.  Nested\n    \
    \          bold commands have the same effect as a single bold\n             \
    \ command.\n         Italic -- causes the affected text to be in an italic font.\n\
    \              Nested italic commands have the same effect as a single\n     \
    \         italic command.\n         Fixed -- causes the affected text to be in\
    \ a fixed width font.\n              Nested fixed commands have the same effect\
    \ as a single\n              fixed command.\n         Smaller -- causes the affected\
    \ text to be in a smaller font.\n              It is recommended that the font\
    \ size be changed by two\n              points, but other amounts may be more\
    \ appropriate in some\n              environments.  Nested smaller commands produce\
    \ ever-\n              smaller fonts, to the limits of the implementation's\n\
    \              capacity to reasonably display them, after which further\n    \
    \          smaller commands have no incremental effect.\n         Bigger -- causes\
    \ the affected text to be in a bigger font.  It\n              is recommended\
    \ that the font size be changed by two\n              points, but other amounts\
    \ may be more appropriate in some\n              environments.  Nested bigger\
    \ commands produce ever-bigger\n              fonts, to the limits of the implementation's\
    \ capacity to\n              reasonably display them, after which further bigger\n\
    \              commands have no incremental effect.\n         Underline -- causes\
    \ the affected text to be underlined.  Nested\n              underline commands\
    \ have the same effect as a single\n              underline command.\n   While\
    \ the \"bigger\" and \"smaller\" operators are effectively inverses,\n   it is\
    \ not recommended, for example, that \"<smaller>\" be used to end\n   the effect\
    \ of \"<bigger>\".  This is properly done with \"</bigger>\".\n   Justification\
    \ Commands\n   Initially, text/enriched text is intended to be displayed fully-\n\
    \   justified with appropriate fill, kerning, and letter-tracking as\n   suits\
    \ the capabilities of the receiving user agent software.  Actual\n   line width\
    \ is left to the discretion of the receiver, which is\n   expected to fold lines\
    \ intelligently (preferring soft line breaks) to\n   the best of its ability.\n\
    \   The following commands alter that state.  Each of these commands\n   force\
    \ a line break before and after the formatting command if there\n   is not otherwise\
    \ a line break.  For example, if one of these commands\n   occurs anywhere other\
    \ than the beginning of a line of text as\n   presented, a new line is begun.\n\
    \      Center -- causes the affected text to be centered.\n      FlushLeft --\
    \ causes the affected text to be left-justified with a\n           ragged right\
    \ margin.\n      FlushRight -- causes the affected text to be right-justified\
    \ with\n           a ragged left margin.\n   The center, flushleft, and flushright\
    \ commands are mutually\n   exclusive, and, when nested, the inner command takes\
    \ precedence.\n   Note that for some non-ASCII character sets, full justification\
    \ may\n   be inappropriate. In these cases, a user agent may choose not to\n \
    \  justify such data.\n   Indentation Commands\n   Initially, text/enriched text\
    \ is displayed using the maximum\n   available margins.  Two formatting commands\
    \ may be used to affect the\n   margins.\n         Indent -- causes the running\
    \ left margin to be moved to the\n              right.  The recommended indentation\
    \ change is the width of\n              four characters, but this may differ among\n\
    \              implementations.\n         IndentRight -- causes the running right\
    \ margin to be moved to\n              the left.  The recommended indentation\
    \ change is the width\n              of four characters, but this may differ among\n\
    \              implementations.\n   A line break is NOT forced by a change of\
    \ the margin, to permit the\n   description of \"hanging\" text.  Thus for example\
    \ the following text:\n   Now <indent> is the time for all good horses to come\
    \ to the aid of\n   their stable, assuming that </indent> any stable is really\
    \ stable.\n   would be displayed in a 40-character-wide window as follows:\n \
    \  Now is the time for all good horses to\n       come to the aid of their stable,\n\
    \       assuming that any stable is\n   really stable.\n   Miscellaneous Commands\n\
    \         Excerpt -- causes the affected text to be interpreted as a\n       \
    \       textual excerpt from another source, probably a message\n            \
    \  being responded to.  Typically this will be displayed\n              using\
    \ indentation and an alternate font, or by indenting\n              lines and\
    \ preceding them with \"> \", but such decisions are\n              up to the\
    \ implementation.  (Note that this is the only\n              truly declarative\
    \ markup construct in text/enriched, and\n              as such doesn't fit very\
    \ well with the other facilities,\n              but it describes a type of markup\
    \ that is very commonly\n              used in email and has no procedural analogue.)\
    \  Note that\n              as with the justification commands, the excerpt command\n\
    \              implicitly begins and ends with a line break if one is not\n  \
    \            already there.\n         Verbatim -- causes the affected text to\
    \ be displayed without\n              filling, justification, any interpretation\
    \ of embedded\n              formatting commands, or the usual special rules for\
    \ CRLF\n              handling.  Note, however, that the end token </verbatim>\n\
    \              must still be recognized.\n         Nofill -- causes the affected\
    \ text to be displayed without\n              filling or justification, and hence\
    \ without any special\n              handling of CRLFs, but with all remaining\
    \ text/enriched\n              features continuing to apply.\n         Param --\
    \ Marks the affected text as command parameters, to be\n              interpreted\
    \ or ignored by the text/enriched interpreter,\n              but NOT to be shown\
    \ to the reader.\n   Note that while the absence of a quoting mechanism makes\
    \ it slightly\n   challenging to include the literal string \"<verbatim>\" inside\
    \ of a\n   verbatim environment, it can be done by breaking up the verbatim\n\
    \   segment into two verbatim segments as follows:\n          <verbatim>\n   \
    \       ...slightly challenging to include the literal string\n          \"</</verbatim><verbatim>verbatim>\"\
    \ inside of a verbatim\n          environment...\n          </verbatim>\n   Note\
    \ that the above example demonstrates that it is not desirable for\n   an implementation\
    \ to break lines between tokens.  In particular,\n   there should not be a line\
    \ break inserted between the \"</verbatim>\"\n   and the \"<verbatim>\" that follows\
    \ it.\n   Balancing and Nesting of Formatting Commands\n   Pairs of formatting\
    \ commands must be properly balanced and nested.\n   Thus, a proper way to describe\
    \ text in bold italics is:\n           <bold><italic>the-text</italic></bold>\n\
    \        or, alternately,\n           <italic><bold>the-text</bold></italic>\n\
    \        but, in particular, the following is illegal\n        text/enriched:\n\
    \           <bold><italic>the-text</bold></italic>\n   The nesting requirement\
    \ for formatting commands imposes a slightly\n   higher burden upon the composers\
    \ of text/enriched bodies, but\n   potentially simplifies text/enriched displayers\
    \ by allowing them to\n   be stack-based.  The main goal of text/enriched is to\
    \ be simple\n   enough to make multifont, formatted email widely readable, so\
    \ that\n   those with the capability of sending it will be able to do so with\n\
    \   confidence.  Thus slightly increased complexity in the composing\n   software\
    \ was deemed a reasonable tradeoff for simplified reading\n   software.  Nonetheless,\
    \ implementors of text/enriched readers are\n   encouraged to follow the general\
    \ Internet guidelines of being\n   conservative in what you send and liberal in\
    \ what you accept.  Those\n   implementations that can do so are encouraged to\
    \ deal reasonably with\n   improperly nested text/enriched data.\n   Unrecognized\
    \ formatting commands\n   Implementations must regard any unrecognized formatting\
    \ command as\n   \"no-op\" commands, that is, as commands having no effect, thus\n\
    \   facilitating future extensions to \"text/enriched\".  Private\n   extensions\
    \ may be defined using formatting commands that begin with\n   \"X-\", by analogy\
    \ to Internet mail header field names.\n   In order to formally define extended\
    \ commands, a new Internet\n   document should be published.\n   \"White Space\"\
    \ in text/enriched Data\n   No special behavior is required for the SPACE or TAB\
    \ (HT) character.\n   It is recommended, however, that, at least when fixed-width\
    \ fonts are\n   in use, the common semantics of the TAB (HT) character should\
    \ be\n   observed, namely that it moves to the next column position that is a\n\
    \   multiple of 8.  (In other words, if a TAB (HT) occurs in column n,\n   where\
    \ the leftmost column is column 0, then that TAB (HT) should be\n   replaced by\
    \ 8-(n mod 8) SPACE characters.)  It should also be noted\n   that some mail gateways\
    \ are notorious for losing (or, less commonly,\n   adding) white space at the\
    \ end of lines, so reliance on SPACE or TAB\n   characters at the end of a line\
    \ is not recommended.\n"
- title: Initial State of a text/enriched interpreter
  contents:
  - "Initial State of a text/enriched interpreter\n   Text/enriched is assumed to\
    \ begin with filled, fully justified text\n   in a variable-width font in a normal\
    \ typeface and a size that is\n   average for the current display and user.  The\
    \ left and right margins\n   are assumed to be maximal, that is, at the leftmost\
    \ and rightmost\n   acceptable positions.\n   Non-ASCII character sets\n   If\
    \ the character set specified by the charset parameter on the\n   Content-type\
    \ line is anything other than \"US-ASCII\", this means that\n   the text being\
    \ described by text/enriched formatting commands is in a\n   non-ASCII character\
    \ set.  However, the commands themselves are still\n   the same ASCII commands\
    \ that are defined in this document.  This\n   creates an ambiguity only with\
    \ reference to the \"<\" character, the\n   octet with numeric value 60.  In single\
    \ byte character sets, such as\n   the ISO-8859 family, this is not a problem;\
    \ the octet 60 can be\n   quoted by including it twice, just as for ASCII.  The\
    \ problem is more\n   complicated, however, in the case of multi-byte character\
    \ sets, where\n   the octet 60 might appear at any point in the byte sequence\
    \ for any\n   of several characters.\n   In practice, however, most multibyte\
    \ character sets address this\n   problem internally. For example, the ISO-2022\
    \ family of character\n   sets can switch back into ASCII at any moment.  Therefore\
    \ it is\n   specified that, before text/enriched formatting commands, the\n  \
    \ prevailing character set should be \"switched back\" into ASCII, and\n   that\
    \ only those characters which would be interpreted as \"<\" in plain\n   text\
    \ should be interpreted as token delimiters in text/enriched.\n   The question\
    \ of what to do for hypothetical future character sets\n   that do NOT subsume\
    \ ASCII is not addressed in this memo.\n   Minimal text/enriched conformance\n\
    \   A minimal text/enriched implementation is one that simply recognizes\n   the\
    \ beginning and ending of \"verbatim\" environments and, outside of\n   them,\
    \ converts \"<<\" to \"<\", removes everything between a <param>\n   command and\
    \ the next balancing </param> command, removes all other\n   formatting commands\
    \ (all text enclosed in angle brackets), converts\n   any series of n CRLFs to\
    \ n-1 CRLFs, and converts any lone CRLF pairs\n   to SPACE.\n   Notes for Implementors\n\
    \   It is recognized that implementors of future mail systems will want\n   rich\
    \ text functionality far beyond that currently defined for\n   text/enriched.\
    \  The intent of text/enriched is to provide a common\n   format for expressing\
    \ that functionality in a form in which much of\n   it, at least, will be understood\
    \ by interoperating software.  Thus,\n   in particular, software with a richer\
    \ notion of formatted text than\n   text/enriched can still use text/enriched\
    \ as its basic\n   representation, but can extend it with new formatting commands\
    \ and by\n   hiding information specific to that software system in text/enriched\n\
    \   <param> constructs. As such systems evolve, it is expected that the\n   definition\
    \ of text/enriched will be further refined by future\n   published specifications,\
    \ but text/enriched as defined here provides\n   a platform on which evolutionary\
    \ refinements can be based.\n   An expected common way that sophisticated mail\
    \ programs will generate\n   text/enriched data is as part of a multipart/alternative\
    \ construct.\n   For example, a mail agent that can generate enriched mail in\
    \ ODA\n   format can generate that mail in a more widely interoperable form by\n\
    \   generating both text/enriched and ODA versions of the same data,\n   e.g.:\n\
    \         Content-type: multipart/alternative; boundary=foo\n         --foo\n\
    \         Content-type: text/enriched\n         [text/enriched version of data]\n\
    \         --foo\n         Content-type: application/oda\n         [ODA version\
    \ of data]\n         --foo--\n   If such a message is read using a MIME-conformant\
    \ mail reader that\n   understands ODA, the ODA version will be displayed; otherwise,\
    \ the\n   text/enriched version will be shown.\n   In some environments, it might\
    \ be impossible to combine certain\n   text/enriched formatting commands, whereas\
    \ in others they might be\n   combined easily.  For example, the combination of\
    \ <bold> and <italic>\n   might produce bold italics on systems that support such\
    \ fonts, but\n   there exist systems that can make text bold or italicized, but\
    \ not\n   both.  In such cases, the most recently issued (innermost) recognized\n\
    \   formatting command should be preferred.\n   One of the major goals in the\
    \ design of text/enriched was to make it\n   so simple that even text-only mailers\
    \ will implement enriched-to-\n   plain-text translators, thus increasing the\
    \ likelihood that enriched\n   text will become \"safe\" to use very widely. \
    \ To demonstrate this\n   simplicity, an extremely simple C program that converts\
    \ text/enriched\n   input into plain text output is included in Appendix A.\n\
    \   Extensions to text/enriched\n   It is expected that various mail system authors\
    \ will desire\n   extensions to text/enriched.  The simple syntax of text/enriched,\
    \ and\n   the specification that unrecognized formatting commands should simply\n\
    \   be ignored, are intend to promote such extensions.\n   Beyond simply defining\
    \ new formatting commands, however, it may\n   sometimes be necessary to define\
    \ formatting commands that can take\n   arguments.  This is the intended use of\
    \ the <param> construct.  In\n   particular, software that wished to extend text/enriched\
    \ to include\n   colored text might define an \"x-color\" environment which always\
    \ began\n   with a color name parameter, to indicate the desired color for the\n\
    \   affected text.\n   An Example\n   Putting all this together, the following\
    \ \"text/enriched\" body\n   fragment:\n         From: Nathaniel Borenstein <nsb@bellcore.com>\n\
    \         To: Ned Freed <ned@innosoft.com>\n         Content-type: text/enriched\n\
    \         <bold>Now</bold> is the time for\n         <italic>all</italic> good\
    \ men\n         <smaller>(and <<women>)</smaller> to\n         <ignoreme>come</ignoreme>\n\
    \         to the aid of their\n         <x-color><param>red</param>beloved</x-color>country.\n\
    \         <verbatim>\n         By the way, I think that <smaller>\n         should\n\
    \         REALLY be called\n         <tinier>\n         and that I am always right.\n\
    \         -- the end\n         </verbatim>\n   represents the following formatted\
    \ text (which will, no doubt, look\n   somewhat cryptic in the text-only version\
    \ of this document):\n         Now is the time for all good men (and <women>)\
    \  to\n         come\n         to the aid of their\n         beloved country.\n\
    \         By the way, I think that <smaller>\n         should\n         REALLY\
    \ be called\n         <tinier>\n         and that I am always right.\n       \
    \  -- the end\n   where the word \"beloved\" would be in red on a color display\
    \ if the\n   receiving software implemented the \"x-color\" extension.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo, as\
    \ the mechanism\n   raises no security issues.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   For more information, the author of this document may be\
    \ contacted\n   via Internet mail:\n   Nathaniel S. Borenstein\n   MRE 2D-296,\
    \ Bellcore\n   445 South St.\n   Morristown, NJ 07962-1910\n   Phone: +1 201 829\
    \ 4270\n   Fax:  +1 201 829 5963\n   EMail: nsb@bellcore.com\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This document reflects the input of many contributors, readers,\
    \ and\n   implementors of the original MIME specification, RFC 1341.  This memo\n\
    \   also reflects particular contributions and comments from Terry\n   Crowley\
    \ and Rhys Weatherley.\n"
- title: Appendix A -- A Simple enriched-to-plain Translator in C
  contents:
  - "Appendix A -- A Simple enriched-to-plain Translator in C\n   One of the major\
    \ goals in the design of the text/enriched subtype of\n   the text Content-Type\
    \ is to make formatted text so simple that even\n   text-only mailers will implement\
    \ enriched-to-plain-text translators,\n   thus increasing the likelihood that\
    \ multifont text will become \"safe\"\n   to use very widely.  To demonstrate\
    \ this simplicity, what follows is\n   a simple C program that converts text/enriched\
    \ input into plain text\n   output.  Note that the local newline convention (the\
    \ single character\n   represented by \"\\n\") is assumed by this program, but\
    \ that special\n   CRLF handling might be necessary on some systems.\n       \
    \          #include <stdio.h>\n                 #include <ctype.h>\n         \
    \        main() {\n                     int c, i, paramct=0, newlinect=0, verbatim=0,\n\
    \                 nofill=0;\n                     char token[62], *p;\n      \
    \               while ((c=getc(stdin)) != EOF) {\n                         if\
    \ (c == '<') {\n                             if (verbatim != 0) {\n          \
    \                       for (i=0, p=token; (*p++ = getc(stdin))\n            \
    \     != EOF\n                                     && !lc2strncmp(token, \"/verbatim>\"\
    ,\n                 i+1) && i<9; i++) {}\n                                 if\
    \ (i==9) {\n                                     verbatim = 0;\n             \
    \                    } else {\n                                     *p = '\\0';\n\
    \                                     putc('<', stdout);\n                   \
    \                  fputs(token, stdout);\n                                 }\n\
    \                                 continue;\n                             } else\
    \ {\n                                 newlinect=0;\n                         \
    \        c = getc(stdin);\n                                 if (c == '<') {\n\
    \                                     if (paramct <= 0) putc(c, stdout);\n   \
    \                              } else {\n                                    \
    \ ungetc(c, stdin);\n                                     for (i=0, p=token; (c=getc(stdin))\n\
    \                 != EOF && c != '>'; i++) {\n                               \
    \          if (i < sizeof(token)-1) *p++ =\n                 isupper(c) ? tolower(c)\
    \ : c;\n                                     }\n                             \
    \        *p = '\\0';\n                                     if (c == EOF) break;\n\
    \                                     if (strcmp(token, \"param\") == 0)\n   \
    \                                      paramct++;\n                          \
    \           else if (strcmp(token, \"verbatim\")\n                 == 0)\n   \
    \                                      verbatim = 1;\n                       \
    \              else if (strcmp(token, \"nofill\") ==\n                 0)\n  \
    \                                       nofill++;\n                          \
    \           else if (strcmp(token, \"/param\") ==\n                 0)\n     \
    \                                    paramct--;\n                            \
    \         else if (strcmp(token, \"/nofill\")\n                 == 0)\n      \
    \                                   nofill--;\n                              \
    \   }\n                             }\n                      } else {\n      \
    \                   if (paramct > 0)\n                           ; /* ignore params\
    \ */\n                            else if (c == '\\n' && verbatim == 0 &&\n  \
    \               nofill <= 0)\n                                if (++newlinect\
    \ > 1) {\n                                    putc(c, stdout);\n             \
    \                   } else {\n                                    putc(' ', stdout);\n\
    \                                }\n                            else {\n     \
    \                           newlinect = 0;\n                                putc(c,\
    \ stdout);\n                            }\n                      }\n         \
    \            }\n                     /* The following line is only needed with\
    \ line-\n                 buffering */\n                     putc('\\n', stdout);\n\
    \                     exit(0);\n                 }\n                 lc2strncmp(s1,\
    \ s2, len)\n                 char *s1, *s2;\n                 int len;\n     \
    \            {\n                     if (!s1 || !s2) return (-1);\n          \
    \           while (*s1 && *s2 && len > 0) {\n                      if (*s1 !=\
    \ *s2 && (tolower(*s1) != *s2)) return(-\n                 1);\n             \
    \         ++s1; ++s2; --len;\n                     }\n                     if\
    \ (len <= 0) return(0);\n                     return((*s1 == *s2) ? 0 : -1);\n\
    \                 }\n   It should be noted that one can do considerably better\
    \ than this in\n   displaying text/enriched data on a dumb terminal.  In particular,\
    \ one\n   can replace font information such as \"bold\" with textual emphasis\n\
    \   (like *this* or _T_H_I_S_).  One can also properly handle the\n   text/enriched\
    \ formatting commands regarding indentation,\n   justification, and others.  However,\
    \ the above program is all that is\n   necessary in order to present text/enriched\
    \ on a dumb terminal\n   without showing the user any formatting artifacts.\n"
- title: Appendix B -- Differences from RFC 1341 text/richtext
  contents:
  - "Appendix B -- Differences from RFC 1341 text/richtext\n   Text/enriched is a\
    \ clarification, simplification, and refinement of\n   the type defined as text/richtext\
    \ in RFC 1341.  For the benefit of\n   those who are already familiar with text/richtext,\
    \ or for those who\n   want to exploit the similarities to be able to display\
    \ text/richtext\n   data with their text/enriched software, the differences between\
    \ the\n   two are summarized here. Note, however, that text/enriched is\n   intended\
    \ to make text/richtext obsolete, so it is not recommended\n   that new software\
    \ generate text/richtext.\n   0.  The name \"richtext\" was changed to \"enriched\"\
    , both to\n   differentiate the two versions and because \"richtext\" created\n\
    \   widespread confusion with Microsoft's Rich Text Format (RTF).\n   1.  Clarifications.\
    \  Many things were ambiguous or unspecified in the\n   text/richtext definition,\
    \ particularly the initial state and the\n   semantics of richtext with multibyte\
    \ character sets.  However, such\n   differences are OPERATIONALLY irrelevant,\
    \ since the clarifications\n   offered in this document are at least reasonable\
    \ interpretations of\n   the text/richtext specification.\n   2.  Newline semantics\
    \ have changed.  In text/richtext, all CRLFs were\n   mapped to spaces, and line\
    \ breaks were indicated by \"<nl>\".  This has\n   been replaced by the \"n-1\"\
    \ rule for CRLFs.\n   3.  The representation of a literal \"<\" character was\
    \ \"<lt>\" in\n   text/richtext, but is \"<<\" in text/enriched.\n   4.  The \"\
    verbatim\" and \"nofill\" commands did not exist in\n   text/richtext.\n   5.\
    \  The \"param\" command did not exist in text/richtext.\n   6.  The following\
    \ commands from text/richtext have been REMOVED from\n   text/enriched: <COMMENT>,\
    \ <OUTDENT>, <OUTDENTRIGHT>, <SAMEPAGE>,\n   <SUBSCRIPT>, <SUPERSCRIPT>, <HEADING>,\
    \ <FOOTING>, <ISO-8859-[1-9]>,\n   <US-ASCII>, <PARAGRAPH>, <SIGNATURE>, <NO-OP>,\
    \ <LT>, <NL>, and <NP>.\n   7.  All claims of SGML compatibility have been dropped.\
    \  However,\n   with the possible exceptions of the new semantics for CRLF and\
    \ \"<<\"\n   can be implemented, text/enriched should be no less SGML-friendly\n\
    \   than text/richtext was.\n   8.  In text/richtext, there were three commands\
    \ (<NL>, <NP>, and\n   <LT>) that did not use balanced closing delimiters.  Since\
    \ all of\n   these have been eliminated, there are NO exceptions to the\n   nesting/balancing\
    \ rules in text/enriched.\n   9.  The limit on the size of formatting tokens has\
    \ been increased\n   from 40 to 60 characters.\n   References\n   [RFC-1341] Borenstein,\
    \ N., and N.  Freed, \"MIME (Multipurpose Internet\n   Mail Extensions): Mechanisms\
    \ for Specifying and Describing the Format\n   of Internet Message Bodies\", RFC\
    \ 1341, Bellcore, Innosoft, June 1992.\n   [RFC-1521] Borenstein, N., and N. \
    \ Freed, \"MIME (Multipurpose Internet\n   Mail Extensions) Part One: Mechanisms\
    \ for Specifying and Describing\n   the Format of Internet Message Bodies\", RFC\
    \ 1521, September 1993.\n"
