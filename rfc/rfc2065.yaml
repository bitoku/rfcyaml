- title: __initial_text__
  contents:
  - '                 Domain Name System Security Extensions

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Domain Name System (DNS) has become a critical operational part\n\
    \   of the Internet infrastructure yet it has no strong security\n   mechanisms\
    \ to assure data integrity or authentication.  Extensions to\n   the DNS are described\
    \ that provide these services to security aware\n   resolvers or applications\
    \ through the use of cryptographic digital\n   signatures.  These digital signatures\
    \ are included in secured zones\n   as resource records.  Security can still be\
    \ provided even through\n   non-security aware DNS servers in many cases.\n  \
    \ The extensions also provide for the storage of authenticated public\n   keys\
    \ in the DNS.  This storage of keys can support general public key\n   distribution\
    \ service as well as DNS security.  The stored keys enable\n   security aware\
    \ resolvers to learn the authenticating key of zones in\n   addition to those\
    \ for which they are initially configured.  Keys\n   associated with DNS names\
    \ can be retrieved to support other\n   protocols.  Provision is made for a variety\
    \ of key types and\n   algorithms.\n   In addition, the security extensions provide\
    \ for the optional\n   authentication of DNS protocol transactions.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The significant contributions of the following persons (in\
    \ alphabetic\n   order) to this document are gratefully acknowledged:\n      \
    \     Harald T. Alvestrand\n           Madelyn Badger\n           Scott Bradner\n\
    \           Matt Crawford\n           James M. Galvin\n           Olafur Gudmundsson\n\
    \           Edie Gunter\n           Sandy Murphy\n           Masataka Ohta\n \
    \          Michael A. Patton\n           Jeffrey I. Schiller\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Overview of Contents....................................3\n\
    \   2.  Overview of the DNS Extensions.........................4\n   2.1 Services\
    \ Not Provided..................................4\n   2.2 Key Distribution.......................................5\n\
    \   2.3 Data Origin Authentication and Integrity...............5\n   2.3.1 The\
    \ SIG Resource Record..............................6\n   2.3.2 Authenticating\
    \ Name and Type Non-existence...........7\n   2.3.3 Special Considerations With\
    \ Time-to-Live.............7\n   2.3.4 Special Considerations at Delegation Points..........7\n\
    \   2.3.5 Special Considerations with CNAME RRs................8\n   2.3.6 Signers\
    \ Other Than The Zone..........................8\n   2.4 DNS Transaction and Request\
    \ Authentication.............8\n   3. The KEY Resource Record.................................9\n\
    \   3.1 KEY RDATA format......................................10\n   3.2 Object\
    \ Types, DNS Names, and Keys.....................10\n   3.3 The KEY RR Flag Field.................................11\n\
    \   3.4 The Protocol Octet....................................13\n   3.5 The KEY\
    \ Algorithm Number and the MD5/RSA Algorithm....13\n   3.6 Interaction of Flags,\
    \ Algorithm, and Protocol Bytes...14\n   3.7 KEY RRs in the Construction of Responses..............15\n\
    \   3.8 File Representation of KEY RRs........................16\n   4. The SIG\
    \ Resource Record................................16\n   4.1 SIG RDATA Format......................................17\n\
    \   4.1.1 Signature Data......................................19\n   4.1.2 MD5/RSA\
    \ Algorithm Signature Calculation.............20\n   4.1.3 Zone Transfer (AXFR)\
    \ SIG............................21\n   4.1.4 Transaction and Request SIGs........................22\n\
    \   4.2 SIG RRs in the Construction of Responses..............23\n   4.3 Processing\
    \ Responses and SIG RRs......................24\n   4.4 Signature Expiration,\
    \ TTLs, and Validity..............24\n   4.5 File Representation of SIG RRs........................25\n\
    \   5. Non-existent Names and Types...........................26\n   5.1 The NXT\
    \ Resource Record...............................26\n   5.2 NXT RDATA Format......................................27\n\
    \   5.3 Example...............................................28\n   5.4 Interaction\
    \ of NXT RRs and Wildcard RRs...............28\n   5.5 Blocking NXT Pseudo-Zone\
    \ Transfers....................29\n   5.6 Special Considerations at Delegation\
    \ Points...........29\n   6. The AD and CD Bits and How to Resolve Securely.........30\n\
    \   6.1 The AD and CD Header Bits.............................30\n   6.2 Boot\
    \ File Format......................................32\n   6.3 Chaining Through\
    \ Zones................................32\n   6.4 Secure Time...........................................33\n\
    \   7. Operational Considerations.............................33\n   7.1 Key Size\
    \ Considerations...............................34\n   7.2 Key Storage...........................................34\n\
    \   7.3 Key Generation........................................35\n   7.4 Key Lifetimes.........................................35\n\
    \   7.5 Signature Lifetime....................................36\n   7.6 Root..................................................36\n\
    \   8. Conformance............................................36\n   8.1 Server\
    \ Conformance....................................36\n   8.2 Resolver Conformance..................................37\n\
    \   9. Security Considerations................................37\n   References................................................38\n\
    \   Authors' Addresses........................................39\n   Appendix:\
    \ Base 64 Encoding................................40\n"
- title: 1. Overview of Contents
  contents:
  - "1. Overview of Contents\n   This document describes extensions of the Domain\
    \ Name System (DNS)\n   protocol to support DNS security and public key distribution.\
    \  It\n   assumes that the reader is familiar with the Domain Name System,\n \
    \  particularly as described in RFCs 1033, 1034, and 1035.\n   Section 2 provides\
    \ an overview of the extensions and the key\n   distribution, data origin authentication,\
    \ and transaction and request\n   security they provide.\n   Section 3 discusses\
    \ the KEY resource record, its structure, use in\n   DNS responses, and file representation.\
    \  These resource records\n   represent the public keys of entities named in the\
    \ DNS and are used\n   for key distribution.\n   Section 4 discusses the SIG digital\
    \ signature resource record, its\n   structure, use in DNS responses, and file\
    \ representation.  These\n   resource records are used to authenticate other resource\
    \ records in\n   the DNS and optionally to authenticate DNS transactions and requests.\n\
    \   Section 5 discusses the NXT resource record and its use in DNS\n   responses.\
    \  The NXT RR permits authenticated denial in the DNS of the\n   existence of\
    \ a name or of a particular type for an existing name.\n   Section 6 discusses\
    \ how a resolver can be configured with a starting\n   key or keys and proceed\
    \ to securely resolve DNS requests.\n   Interactions between resolvers and servers\
    \ are discussed for all\n   combinations of security aware and security non-aware.\
    \  Two\n   additional query header bits are defined for signaling between\n  \
    \ resolvers and servers.\n   Section 7 reviews a variety of operational considerations\
    \ including\n   key generation, lifetime, and storage.\n   Section 8 defines levels\
    \ of conformance for resolvers and servers.\n   Section 9 provides a few paragraphs\
    \ on overall security\n   considerations.\n   An Appendix is provided that gives\
    \ details of base 64 encoding which\n   is used in the file representation of\
    \ some RR's defined in this\n   document.\n"
- title: 2.  Overview of the DNS Extensions
  contents:
  - "2.  Overview of the DNS Extensions\n   The Domain Name System (DNS) protocol\
    \ security extensions provide\n   three distinct services: key distribution as\
    \ described in Section 2.2\n   below, data origin authentication as described\
    \ in Section 2.3 below,\n   and transaction and request authentication, described\
    \ in Section 2.4\n   below.\n   Special considerations related to \"time to live\"\
    , CNAMEs, and\n   delegation points are also discussed in Section 2.3.\n"
- title: 2.1 Services Not Provided
  contents:
  - "2.1 Services Not Provided\n   It is part of the design philosophy of the DNS\
    \ that the data in it is\n   public and that the DNS gives the same answers to\
    \ all inquirers.\n   Following this philosophy, no attempt has been made to include\
    \ any\n   sort of access control lists or other means to differentiate\n   inquirers.\n\
    \   In addition, no effort has been made to provide for any\n   confidentiality\
    \ for queries or responses.  (This service may be\n   available via IPSEC [RFC\
    \ 1825].)\n"
- title: 2.2 Key Distribution
  contents:
  - "2.2 Key Distribution\n   Resource records (RRs) are defined to associate keys\
    \ with DNS names.\n   This permits the DNS to be used as a public key distribution\n\
    \   mechanism in support of the DNS data origin authentication and other\n   security\
    \ services.\n   The syntax of a KEY resource record (RR) is described in Section\
    \ 3.\n   It includes an algorithm identifier, the actual public key\n   parameters,\
    \ and a variety of flags including those indicating the\n   type of entity the\
    \ key is associated with and/or asserting that there\n   is no key associated\
    \ with that entity.\n   Under conditions described in Section 3.7, security aware\
    \ DNS servers\n   will automatically attempt to return KEY resources as additional\n\
    \   information, along with those resource records actually requested, to\n  \
    \ minimize the number of queries needed.\n"
- title: 2.3 Data Origin Authentication and Integrity
  contents:
  - "2.3 Data Origin Authentication and Integrity\n   Authentication is provided by\
    \ associating with resource records in\n   the DNS cryptographically generated\
    \ digital signatures.  Commonly,\n   there will be a single private key that signs\
    \ for an entire zone. If\n   a security aware resolver reliably learns the public\
    \ key of the zone,\n   it can verify, for signed data read from that zone, that\
    \ it was\n   properly authorized and is reasonably current.  The expected\n  \
    \ implementation is for the zone private key to be kept off-line and\n   used\
    \ to re-sign all of the records in the zone periodically.\n   This data origin\
    \ authentication key belongs to the zone and not to\n   the servers that store\
    \ copies of the data.  That means compromise of\n   a server or even all servers\
    \ for a zone will not necessarily affect\n   the degree of assurance that a resolver\
    \ has that it can determine\n   whether data is genuine.\n   A resolver can learn\
    \ the public key of a zone either by reading it\n   from DNS or by having it staticly\
    \ configured.  To reliably learn the\n   public key by reading it from DNS, the\
    \ key itself must be signed.\n   Thus, to provide a reasonable degree of security,\
    \ the resolver must\n   be configured with at least the public key of one zone\
    \ that it can\n   use to authenticate signatures.  From there, it can securely\
    \ read the\n   public keys of other zones, if the intervening zones in the DNS\
    \ tree\n   are secure and their signed keys accessible.  (It is in principle\n\
    \   more secure to have the resolver manually configured with the public\n   keys\
    \ of multiple zones, since then the compromise of a single zone\n   would not\
    \ permit the faking of information from other zones.  It is\n   also more administratively\
    \ cumbersome, however, particularly when\n   public keys change.)\n   Adding data\
    \ origin authentication and integrity requires no change to\n   the \"on-the-wire\"\
    \ DNS protocol beyond the addition of the signature\n   resource type and, as\
    \ a practical matter, the key resource type\n   needed for key distribution. This\
    \ service can be supported by\n   existing resolver and server implementations\
    \ so long as they can\n   support the additional resource types (see Section 8).\
    \ The one\n   exception is that CNAME referrals from a secure zone can not be\n\
    \   authenticated if they are from non-security aware servers (see\n   Section\
    \ 2.3.5).\n   If signatures are always separately retrieved and verified when\n\
    \   retrieving the information they authenticate, there will be more\n   trips\
    \ to the server and performance will suffer.  To avoid this,\n   security aware\
    \ servers mitigate that degradation by always attempting\n   to send the signature(s)\
    \ needed.\n"
- title: 2.3.1 The SIG Resource Record
  contents:
  - "2.3.1 The SIG Resource Record\n   The syntax of a SIG resource record (signature)\
    \ is described in\n   Section 4.  It includes the type of the RR(s) being signed,\
    \ the name\n   of the signer, the time at which the signature was created, the\
    \ time\n   it expires (when it is no longer to be believed), its original time\n\
    \   to live (which may be longer than its current time to live but cannot\n  \
    \ be shorter), the cryptographic algorithm in use, and the actual\n   signature.\n\
    \   Every name in a secured zone will have associated with it at least\n   one\
    \ SIG resource record for each resource type under that name except\n   for glue\
    \ RRs and delgation point NS RRs.  A security aware server\n   supporting the\
    \ performance enhanced version of the DNS protocol\n   security extensions will\
    \ attempt to return, with RRs retrieved, the\n   corresponding SIGs.  If a server\
    \ does not support the protocol, the\n   resolver must retrieve all the SIG records\
    \ for a name and select the\n   one or ones that sign the resource record(s) that\
    \ resolver is\n   interested in.\n"
- title: 2.3.2 Authenticating Name and Type Non-existence
  contents:
  - "2.3.2 Authenticating Name and Type Non-existence\n   The above security mechanism\
    \ provides only a way to sign existing RRs\n   in a zone.  \"Data origin\" authentication\
    \ is not obviously provided\n   for the non-existence of a domain name in a zone\
    \ or the non-existence\n   of a type for an existing name.  This gap is filled\
    \ by the NXT RR\n   which authenticatably asserts a range of non-existent names\
    \ in a zone\n   and the non-existence of types for the name just before that range.\n\
    \   Section 5 below covers the NXT RR.\n"
- title: 2.3.3 Special Considerations With Time-to-Live
  contents:
  - "2.3.3 Special Considerations With Time-to-Live\n   A digital signature will fail\
    \ to verify if any change has occurred to\n   the data between the time it was\
    \ originally signed and the time the\n   signature is verified.  This conflicts\
    \ with our desire to have the\n   time-to-live field tick down when resource records\
    \ are cached.\n   This could be avoided by leaving the time-to-live out of the\
    \ digital\n   signature, but that would allow unscrupulous servers to set\n  \
    \ arbitrarily long time to live values undetected.  Instead, we include\n   the\
    \ \"original\" time-to-live in the signature and communicate that\n   data in\
    \ addition to the current time-to-live. Unscrupulous servers\n   under this scheme\
    \ can manipulate the time to live but a security\n   aware resolver will bound\
    \ the TTL value it uses at the original\n   signed value.  Separately, signatures\
    \ include a time signed and an\n   expiration time.  A resolver that knows the\
    \ absolute time can\n   determine securely whether a signature has expired.  It\
    \ is not\n   possible to rely solely on the signature expiration as a substitute\n\
    \   for the TTL, however, since the TTL is primarily a database\n   consistency\
    \ mechanism and, in any case, non-security aware servers\n   that depend on TTL\
    \ must still be supported.\n"
- title: 2.3.4 Special Considerations at Delegation Points
  contents:
  - "2.3.4 Special Considerations at Delegation Points\n   DNS security would like\
    \ to view each zone as a unit of data\n   completely under the control of the\
    \ zone owner and signed by the\n   zone's key.  But the operational DNS views\
    \ the leaf nodes in a zone,\n   which are also the apex nodes of a subzone (i.e.,\
    \ delegation points),\n   as \"really\" belonging to the subzone.  These nodes\
    \ occur in two\n   master files and may have RRs signed by both the upper and\
    \ lower\n   zone's keys.  A retrieval could get a mixture of these RRs and SIGs,\n\
    \   especially since one server could be serving both the zone above and\n   below\
    \ a delegation point.\n   In general, there must be a zone KEY RR for the subzone\
    \ in the\n   superzone and the copy signed in the superzone is controlling.  For\n\
    \   all but one other RR type that should appearing in both the superzone\n  \
    \ and subzone, the data from the subzone is more authoritative.  To\n   avoid\
    \ conflicts, only the KEY RR in the superzone should be signed\n   and the NS\
    \ and any A (glue) RRs should only be signed in the subzone.\n   The SOA and any\
    \ other RRs that have the zone name as owner should\n   appear only in the subzone\
    \ and thus are signed there. The NXT RR type\n   is an exceptional case that will\
    \ always appear differently and\n   authoritatively in both the superzone and\
    \ subzone, if both are\n   secure, as described in Section 5.\n"
- title: 2.3.5 Special Considerations with CNAME RRs
  contents:
  - "2.3.5 Special Considerations with CNAME RRs\n   There is a significant problem\
    \ when security related RRs with the\n   same owner name as a CNAME RR are retrieved\
    \ from a non-security-aware\n   server.  In particular, an initial retrieval for\
    \ the CNAME or any\n   other type will not retrieve any associated signature,\
    \ key, or NXT\n   RR. For types other than CNAME, it will retrieve that type at\
    \ the\n   target name of the CNAME (or chain of CNAMEs) and will return the\n\
    \   CNAME as additional information.  In particular, a specific retrieval\n  \
    \ for type SIG will not get the SIG, if any, at the original CNAME\n   domain\
    \ name but rather a SIG at the target name.\n   In general, security aware servers\
    \ MUST be used to securely CNAME in\n   DNS.  Security aware servers must (1)\
    \ allow KEY, SIG, and NXT RRs\n   along with CNAME RRs, (2) suppress CNAME processing\
    \ on retrieval of\n   these types as well as on retrieval of the type CNAME, and\
    \ (3)\n   automatically return SIG RRs authenticating the CNAME or CNAMEs\n  \
    \ encountered in resolving a query.  This is a change from the previous\n   DNS\
    \ standard which prohibited any other RR type at a node where a\n   CNAME RR was\
    \ present.\n"
- title: 2.3.6 Signers Other Than The Zone
  contents:
  - "2.3.6 Signers Other Than The Zone\n   There are two cases where a SIG resource\
    \ record is signed by other\n   than the zone private key.  One is for support\
    \ of dynamic update\n   where an entity is permitted to authenticate/update its\
    \ own records.\n   The public key of the entity must be present in the DNS and\
    \ be\n   appropriately signed but the other RR(s) may be signed with the\n   entity's\
    \ key.  The other is for support of transaction and request\n   authentication\
    \ as described in Section 2.4 immediately below.\n"
- title: 2.4 DNS Transaction and Request Authentication
  contents:
  - "2.4 DNS Transaction and Request Authentication\n   The data origin authentication\
    \ service described above protects\n   retrieved resource records but provides\
    \ no protection for DNS\n   requests or for message headers.\n   If header bits\
    \ are falsely set by a server, there is little that can\n   be done.  However,\
    \ it is possible to add transaction authentication.\n   Such authentication means\
    \ that a resolver can be sure it is at least\n   getting messages from the server\
    \ it thinks it queried, that the\n   response is from the query it sent, and that\
    \ these messages have not\n   been diddled in transit.  This is accomplished by\
    \ optionally adding a\n   special SIG resource record at the end of the reply\
    \ which digitally\n   signs the concatenation of the server's response and the\
    \ resolver's\n   query.\n   Requests can also be authenticated by including a\
    \ special SIG RR at\n   the end of the request.  Authenticating requests serves\
    \ no function\n   in the current DNS and requests with a non-empty additional\n\
    \   information section are ignored by almost all current DNS servers.\n   However,\
    \ this syntax for signing requests is defined in connection\n   with authenticating\
    \ future secure dynamic update requests or the\n   like.\n   The private keys\
    \ used in transaction and request security belongs to\n   the host composing the\
    \ request or reply message, not to the zone\n   involved.  The corresponding public\
    \ key is normally stored in and\n   retrieved from the DNS.\n   Because requests\
    \ and replies are highly variable, message\n   authentication SIGs can not be\
    \ pre-calculated.  Thus it will be\n   necessary to keep the private key on-line,\
    \ for example in software or\n   in a directly connected piece of hardware.\n"
- title: 3. The KEY Resource Record
  contents:
  - "3. The KEY Resource Record\n   The KEY resource record (RR) is used to document\
    \ a key that is\n   associated with a Domain Name System (DNS) name.  It will\
    \ be a public\n   key as only public keys are stored in the DNS.  This can be\
    \ the\n   public key of a zone, a host or other end entity, or a user.  A KEY\n\
    \   RR is, like any other RR, authenticated by a SIG RR. Security aware\n   DNS\
    \ implementations MUST be designed to handle at least two\n   simultaneously valid\
    \ keys of the same type associated with a name.\n   The type number for the KEY\
    \ RR is 25.\n"
- title: 3.1 KEY RDATA format
  contents:
  - "3.1 KEY RDATA format\n   The RDATA for a KEY RR consists of flags, a protocol\
    \ octet, the\n   algorithm number, and the public key itself.  The format is as\n\
    \   follows:\n                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2\
    \ 3 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |   \
    \          flags             |    protocol   |   algorithm   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               /\n   /  \
    \                        public key                           /\n   /        \
    \                                                       /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n\
    \   The meaning of the KEY RR owner name, flags, and protocol octet are\n   described\
    \ in Sections 3.2, 3.3 and 3.4 below respectively.  The flags\n   and algorithm\
    \ must be examined before any data following the\n   algorithm octet as they control\
    \ the format and even whether there is\n   any following data.  The algorithm\
    \ and public key fields are\n   described in Section 3.5.  The format of the public\
    \ key is algorithm\n   dependent.\n"
- title: 3.2 Object Types, DNS Names, and Keys
  contents:
  - "3.2 Object Types, DNS Names, and Keys\n   The public key in a KEY RR belongs\
    \ to the object named in the owner\n   name.\n   This DNS name may refer to up\
    \ to three different categories of\n   things.  For example, dee.cybercash.com\
    \ could be (1) a zone, (2) a\n   host or other end entity , and (3) the mapping\
    \ into a DNS name of the\n   user or account dee@cybercash.com.  Thus, there are\
    \ flags, as\n   described below, in the KEY RR to indicate with which of these\
    \ roles\n   the owner name and public key are associated.  Note that an\n   appropriate\
    \ zone KEY RR MUST occur at the apex node of a secure zone\n   and at every leaf\
    \ node which is a delegation point (and thus the same\n   owner name as the apex\
    \ of a subzone) within a secure zone.\n   Although the same name can be used for\
    \ up to all three of these\n   categories, such overloading of a name is discouraged.\
    \  It is also\n   possible to use the same key for different things with the same\
    \ name\n   or even different names, but this is strongly discouraged.  In\n  \
    \ particular, the use of a zone key as a non-zone key will usually\n   require\
    \ that the corresponding private key be kept on line and\n   thereby become more\
    \ vulnerable.\n   In addition to the name type bits, there are additional flag\
    \ bits\n   including the \"type\" field, \"experimental\" bit, \"signatory\" field,\n\
    \   etc., as described below.\n"
- title: 3.3 The KEY RR Flag Field
  contents:
  - "3.3 The KEY RR Flag Field\n   In the \"flags\" field:\n        Bit 0 and 1 are\
    \ the key \"type\" field.  Bit 0 a one indicates\n   that use of the key is prohibited\
    \ for authentication.  Bit 1 a one\n   indicates that use of the key is prohibited\
    \ for confidentiality. If\n   this field is zero, then use of the key for authentication\
    \ and/or\n   confidentiality is permitted. Note that DNS security makes use of\n\
    \   keys for authentication only. Confidentiality use flagging is\n   provided\
    \ for use of keys in other protocols.  Implementations not\n   intended to support\
    \ key distribution for confidentiality MAY require\n   that the confidentiality\
    \ use prohibited bit be on for keys they\n   serve.  If both bits of this field\
    \ are one, the \"no key\" value, there\n   is no key information and the RR stops\
    \ after the algorithm octet.  By\n   the use of this \"no key\" value, a signed\
    \ KEY RR can authenticatably\n   assert that, for example, a zone is not secured.\n\
    \        Bit 2 is the \"experimental\" bit.  It is ignored if the type\n   field\
    \ indicates \"no key\" and the following description assumes that\n   type field\
    \ to be non-zero.  Keys may be associated with zones,\n   entities, or users for\
    \ experimental, trial, or optional use, in which\n   case this bit will be one.\
    \  If this bit is a zero, it means that the\n   use or availability of security\
    \ based on the key is \"mandatory\".\n   Thus, if this bit is off for a zone key,\
    \ the zone should be assumed\n   secured by SIG RRs and any responses indicating\
    \ the zone is not\n   secured should be considered bogus.  If this bit is a one\
    \ for a host\n   or end entity, it might sometimes operate in a secure mode and\
    \ at\n   other times operate without security.  The experimental bit, like all\n\
    \   other aspects of the KEY RR, is only effective if the KEY RR is\n   appropriately\
    \ signed by a SIG RR.  The experimental bit must be zero\n   for safe secure operation\
    \ and should only be a one for a minimal\n   transition period.\n        Bits\
    \ 3-4 are reserved and must be zero.\n        Bit 5 on indicates that this is\
    \ a key associated with a \"user\"\n   or \"account\" at an end entity, usually\
    \ a host.  The coding of the\n   owner name is that used for the responsible individual\
    \ mailbox in the\n   SOA and RP RRs: The owner name is the user name as the name\
    \ of a node\n   under the entity name.  For example, \"j.random_user\" on\n  \
    \ host.subdomain.domain could have a public key associated through a\n   KEY RR\
    \ with name j\\.random_user.host.subdomain.domain and the user\n   bit a one.\
    \  It could be used in an security protocol where\n   authentication of a user\
    \ was desired.  This key might be useful in IP\n   or other security for a user\
    \ level service such a telnet, ftp,\n   rlogin, etc.\n        Bit 6 on indicates\
    \ that this is a key associated with the non-\n   zone \"entity\" whose name is\
    \ the RR owner name.  This will commonly be\n   a host but could, in some parts\
    \ of the DNS tree, be some other type\n   of entity such as a telephone number\
    \ [RFC 1530].  This is the public\n   key used in connection with the optional\
    \ DNS transaction\n   authentication service if the owner name is a DNS server\
    \ host.  It\n   could also be used in an IP-security protocol where authentication\
    \ of\n   at the host, rather than user, level was desired, such as routing,\n\
    \   NTP, etc.\n        Bit 7 is the \"zone\" bit and indicates that this is a\
    \ zone key\n   for the zone whose name is the KEY RR owner name.  This is the\
    \ public\n   key used for DNS data origin authentication.\n        Bit 8 is reserved\
    \ to be the IPSEC [RFC 1825] bit and indicates\n   that this key is valid for\
    \ use in conjunction with that security\n   standard.  This key could be used\
    \ in connection with secured\n   communication on behalf of an end entity or user\
    \ whose name is the\n   owner name of the KEY RR if the entity or user bits are\
    \ on.  The\n   presence of a KEY resource with the IPSEC and entity bits on and\n\
    \   experimental and no-key bits off is an assertion that the host speaks\n  \
    \ IPSEC.\n        Bit 9 is reserved to be the \"email\" bit and indicate that\
    \ this\n   key is valid for use in conjunction with MIME security multiparts.\n\
    \   This key could be used in connection with secured communication on\n   behalf\
    \ of an end entity or user whose name is the owner name of the\n   KEY RR if the\
    \ entity or user bits are on.\n        Bits 10-11 are reserved and must be zero.\n\
    \        Bits 12-15 are the \"signatory\" field.  If non-zero, they\n   indicate\
    \ that the key can validly sign RRs or updates of the same\n   name.  If the owner\
    \ name is a wildcard, then RRs or updates with any\n   name which is in the wildcard's\
    \ scope can be signed.  Fifteen\n   different non-zero values are possible for\
    \ this field and any\n   differences in their meaning are reserved for definition\
    \ in\n   connection with DNS dynamic update or other new DNS commands.  Zone\n\
    \   keys always have authority to sign any RRs in the zone regardless of\n   the\
    \ value of this field.  The signatory field, like all other aspects\n   of the\
    \ KEY RR, is only effective if the KEY RR is appropriately\n   signed by a SIG\
    \ RR.\n"
- title: 3.4 The Protocol Octet
  contents:
  - "3.4 The Protocol Octet\n   It is anticipated that some keys stored in DNS will\
    \ be used in\n   conjunction with Internet protocols other than DNS (keys with\
    \ zone\n   bit or signatory field non-zero) and IPSEC/email (keys with IPSEC\n\
    \   and/or email bit set).  The protocol octet is provided to indicate\n   that\
    \ a key is valid for such use and, for end entity keys or the host\n   part of\
    \ user keys, that the secure version of that protocol is\n   implemented on that\
    \ entity or host.\n   Values between 1 and 191 decimal inclusive are available\
    \ for\n   assignment by IANA for such protocols.  The 63 values between 192 and\n\
    \   254 inclusive will not be assigned to a specific protocol and are\n   available\
    \ for experimental use under bilateral agreement. Value 0\n   indicates, for a\
    \ particular key, that it is not valid for any\n   particular additional protocol\
    \ beyond those indicated in the flag\n   field. And value 255 indicates that the\
    \ key is valid for all assigned\n   protocols (those in the 1 to 191 range).\n\
    \   It is intended that new uses of DNS stored keys would initially be\n   implemented,\
    \ and operational experience gained, using the\n   experimental range of the protocol\
    \ octet.  If demand for widespread\n   deployment for the indefinite future warrants,\
    \ a value in the\n   assigned range would then be designated for the protocol.\
    \  Finally,\n   (1) should the protocol become so widespread in conjunction with\n\
    \   other protocols and with which it shares key values that duplicate\n   RRs\
    \ are a serious burden and (2) should the protocol provide\n   substantial facilities\
    \ not available in any protocol for which a\n   flags field bit has been allocated,\
    \ then one of the remaining flag\n   field bits may be allocated to the protocol.\
    \ When such a bit has been\n   allocated, a key can be simultaneously indicated\
    \ as valid for that\n   protocol and the entity or host can be simultaneously\
    \ flagged as\n   implementing the secure version of that protocol, along with\
    \ other\n   protocols for which flag field bits have been assigned.\n"
- title: 3.5 The KEY Algorithm Number and the MD5/RSA Algorithm
  contents:
  - "3.5 The KEY Algorithm Number and the MD5/RSA Algorithm\n   This octet is the\
    \ key algorithm parallel to the same field for the\n   SIG resource.  The MD5/RSA\
    \ algorithm described in this document is\n   number 1. Numbers 2 through 252\
    \ are available for assignment should\n   sufficient reason arise.  However, the\
    \ designation of a new algorithm\n   could have a major impact on interoperability\
    \ and requires an IETF\n   standards action.  Number 254 is reserved for private\
    \ use and will\n   never be assigned a specific algorithm.  For number 254, the\
    \ public\n   key area shown in the packet diagram above will actually begin with\
    \ a\n   length byte followed by an Object Identifier (OID) of that length.\n \
    \  The OID indicates the private algorithm in use and the remainder of\n   the\
    \ area is whatever is required by that algorithm. Number 253 is\n   reserved as\
    \ the \"expiration date algorithm\" for use where the\n   expiration date or other\
    \ labeling fields of SIGs are desired without\n   any actual security. It is anticipated\
    \ that this algorithm will only\n   be used in connection with some modes of DNS\
    \ dynamic update.  For\n   number 253, the public key area is null. Values 0 and\
    \ 255 are\n   reserved.\n   If the type field does not have the \"no key\" value\
    \ and the algorithm\n   field is 1, indicating the MD5/RSA algorithm, the public\
    \ key field is\n   structured as follows:\n                        1 1 1 1 1 1\
    \ 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | pub exp length|        public key exponent                    /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               /\n   +- \
    \                          modulus                            /\n   |        \
    \                                                       /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-/\n\
    \   To promote interoperability, the exponent and modulus are each\n   limited\
    \ to 2552 bits in length.  The public key exponent is a\n   variable length unsigned\
    \ integer.  Its length in octets is\n   represented as one octet if it is in the\
    \ range of 1 to 255 and by a\n   zero octet followed by a two octet unsigned length\
    \ if it is longer\n   than 255 bytes.  The public key modulus field is a multiprecision\n\
    \   unsigned integer.  The length of the modulus can be determined from\n   the\
    \ RDLENGTH and the preceding RDATA fields including the exponent.\n   Leading\
    \ zero bytes are prohibited in the exponent and modulus.\n"
- title: 3.6 Interaction of Flags, Algorithm, and Protocol Bytes
  contents:
  - "3.6 Interaction of Flags, Algorithm, and Protocol Bytes\n   Various combinations\
    \ of the no-key type value, algorithm byte,\n   protocol byte, and any protocol\
    \ indicating flags (such as the\n   reserved IPSEC flag) are possible.  (Note\
    \ that the zone flag bit\n   being on or the signatory field being non-zero is\
    \ effectively a DNS\n   protocol flag on.)  The meaning of these combinations\
    \ is indicated\n   below:\n      NK = no key type value\n      AL = algorithm\
    \ byte\n      PR = protocols indicated by protocol byte or protocol flags\n  \
    \    x represents any valid non-zero value(s).\n       AL  PR   NK  Meaning\n\
    \        0   0   0   Illegal, claims key but has bad algorithm field.\n      \
    \  0   0   1   Specifies total lack of security for owner.\n        0   x   0\
    \   Illegal, claims key but has bad algorithm field.\n        0   x   1   Specified\
    \ protocols insecure, others may be secure.\n        x   0   0   Useless.  Gives\
    \ key but no protocols to use it.\n        x   0   1   Useless.  Denies key but\
    \ for no protocols.\n        x   x   0   Specifies key for protocols and asserts\
    \ that\n                      those protocols are implemented with security.\n\
    \        x   x   1   Algorithm not understood for protocol.\n      (remember,\
    \ in reference to the above table, that a protocol\n       byte of 255 means all\
    \ protocols with protocol byte values\n       assigned)\n"
- title: 3.7 KEY RRs in the Construction of Responses
  contents:
  - "3.7 KEY RRs in the Construction of Responses\n   An explicit request for KEY\
    \ RRs does not cause any special additional\n   information processing except,\
    \ of course, for the corresponding SIG\n   RR from a security aware server.\n\
    \   Security aware DNS servers MUST include KEY RRs as additional\n   information\
    \ in responses where appropriate including the following:\n   (1) On the retrieval\
    \ of NS RRs, the zone key KEY RR(s) for the zone\n   served by these name servers\
    \ MUST be included as additional\n   information if space is avilable.  There\
    \ will always be at least one\n   such KEY RR in a secure zone, even if it has\
    \ the no-key type value to\n   indicate that the subzone is insecure.  If not\
    \ all additional\n   information will fit, the KEY RR(s) have higher priority\
    \ than type A\n   or AAAA glue RRs.  If such a KEY RR does not fit on a retrieval,\
    \ the\n   retrieval must be considered truncated.\n   (2) On retrieval of type\
    \ A or AAAA RRs, the end entity KEY RR(s) MUST\n   be included if space is available.\
    \  On inclusion of A or AAAA RRs as\n   additional information, their KEY RRs\
    \ will also be included but with\n   lower priority than the relevant A or AAAA\
    \ RRs.\n"
- title: 3.8 File Representation of KEY RRs
  contents:
  - "3.8 File Representation of KEY RRs\n   KEY RRs may appear as lines in a zone\
    \ data master file.\n   The flag field, protocol, and algorithm number octets\
    \ are then\n   represented as unsigned integers.  Note that if the type field\
    \ has\n   the \"no key\" value or the algorithm specified is 253, nothing appears\n\
    \   after the algorithm octet.\n   The remaining public key portion is represented\
    \ in base 64 (see\n   Appendix) and may be divided up into any number of white\
    \ space\n   separated substrings, down to single base 64 digits, which are\n \
    \  concatenated to obtain the full signature.  These substrings can span\n   lines\
    \ using the standard parenthesis.\n   Note that the public key may have internal\
    \ sub-fields but these do\n   not appear in the master file representation.  For\
    \ example, with\n   algorithm 1 there is a public exponent size, then a public\
    \ exponent,\n   and then a modulus.  With algorithm 254, there will be an OID\
    \ size,\n   an OID, and algorithm dependent information. But in both cases only\
    \ a\n   single logical base 64 string will appear in the master file.\n"
- title: 4. The SIG Resource Record
  contents:
  - "4. The SIG Resource Record\n   The SIG or \"signature\" resource record (RR)\
    \ is the fundamental way\n   that data is authenticated in the secure Domain Name\
    \ System (DNS). As\n   such it is the heart of the security provided.\n   The\
    \ SIG RR unforgably authenticates other RRs of a particular type,\n   class, and\
    \ name and binds them to a time interval and the signer's\n   domain name.  This\
    \ is done using cryptographic techniques and the\n   signer's private key.  The\
    \ signer is frequently the owner of the zone\n   from which the RR originated.\n"
- title: 4.1 SIG RDATA Format
  contents:
  - "4.1 SIG RDATA Format\n   The RDATA portion of a SIG RR is as shown below.  The\
    \ integrity of\n   the RDATA information is protected by the signature field.\n\
    \                        1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3\n    0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |        type covered           |  algorithm    |     labels    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         original TTL                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                      signature expiration                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         time signed                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         key footprint         |                               /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \         signer's name         /\n   /                                      \
    \                         /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               /\n   +- \
    \                         signature                           /\n   /        \
    \                                                       /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The value of the SIG RR type is 24.\n   The \"type covered\" is the type of\
    \ the other RRs covered by this SIG.\n   The algorithm number is an octet specifying\
    \ the digital signature\n   algorithm used parallel to the algorithm octet for\
    \ the KEY RR.  The\n   MD5/RSA algorithm described in this document is number\
    \ 1.  Numbers 2\n   through 252 are available for assignment should sufficient\
    \ reason\n   arise to allocate them.  However, the designation of a new algorithm\n\
    \   could have a major impact on the interoperability of the global DNS\n   system\
    \ and requires an IETF standards action.  Number 254 is reserved\n   for private\
    \ use and will not be assigned a specific algorithm.  For\n   number 254, the\
    \ \"signature\" area shown above will actually begin with\n   a length byte followed\
    \ by an Object Identifier (OID) of that length.\n   The OID indicates the private\
    \ algorithm in use and the remainder of\n   the area is whatever is required by\
    \ that algorithm.  Number 253,\n   known as the \"expiration date algorithm\"\
    , is used when the expiration\n   date or other non-signature fields of the SIG\
    \ are desired without any\n   actual security.  It is anticipated that this algorithm\
    \ will only be\n   used in connection with some modes of DNS dynamic update. \
    \ For number\n   253, the signature field will be null.  Values 0 and 255 are\n\
    \   reserved.\n   The \"labels\" octet is an unsigned count of how many labels\
    \ there are\n   in the original SIG RR owner name not counting the null label\
    \ for\n   root and not counting any initial \"*\" for a wildcard.  If a secured\n\
    \   retrieval is the result of wild card substitution, it is necessary\n   for\
    \ the resolver to use the original form of the name in verifying\n   the digital\
    \ signature.  This field helps optimize the determination\n   of the original\
    \ form thus reducing the effort in authenticating\n   signed data.\n   If, on\
    \ retrieval, the RR appears to have a longer name than indicated\n   by \"labels\"\
    , the resolver can tell it is the result of wildcard\n   substitution.  If the\
    \ RR owner name appears to be shorter than the\n   labels count, the SIG RR must\
    \ be considered corrupt and ignored.  The\n   maximum number of labels allowed\
    \ in the current DNS is 127 but the\n   entire octet is reserved and would be\
    \ required should DNS names ever\n   be expanded to 255 labels.  The following\
    \ table gives some examples.\n   The value of \"labels\" is at the top, the retrieved\
    \ owner name on the\n   left, and the table entry is the name to use in signature\n\
    \   verification except that \"bad\" means the RR is corrupt.\n        labels=\
    \ |  0  |   1  |    2   |      3   |      4   |\n        --------+-----+------+--------+----------+----------+\n\
    \               .|   . | bad  |  bad   |    bad   |    bad   |\n             \
    \ d.|  *. |   d. |  bad   |    bad   |    bad   |\n            c.d.|  *. | *.d.\
    \ |   c.d. |    bad   |    bad   |\n          b.c.d.|  *. | *.d. | *.c.d. |  \
    \ b.c.d. |    bad   |\n        a.b.c.d.|  *. | *.d. | *.c.d. | *.b.c.d. | a.b.c.d.\
    \ |\n   The \"original TTL\" field is included in the RDATA portion to avoid\n\
    \   (1) authentication problems that caching servers would otherwise\n   cause\
    \ by decrementing the real TTL field and (2) security problems\n   that unscrupulous\
    \ servers could otherwise cause by manipulating the\n   real TTL field.  This\
    \ original TTL is protected by the signature\n   while the current TTL field is\
    \ not.\n   NOTE:  The \"original TTL\" must be restored into the covered RRs when\n\
    \   the signature is verified.  This implies that all RRs for a\n   particular\
    \ type, name, and class must have the same TTL to start\n   with.\n   The SIG\
    \ is valid until the \"signature expiration\" time which is an\n   unsigned number\
    \ of seconds since the start of 1 January 1970, GMT,\n   ignoring leap seconds.\
    \  (See also Section 4.4.)  SIG RRs should not\n   have a date signed significantly\
    \ in the future.  To prevent\n   misordering of network requests to update a zone\
    \ dynamically,\n   monotonically increasing \"time signed\" dates may be necessary.\n\
    \   The \"time signed\" field is an unsigned number of seconds since the\n   start\
    \ of 1 January 1970, GMT, ignoring leap seconds.\n   A SIG RR with an expiration\
    \ date before the time signed must be\n   considered corrupt and ignored.\n  \
    \ The \"key footprint\" is a 16 bit quantity that is used to help\n   efficiently\
    \ select between multiple keys which may be applicable and\n   as a quick check\
    \ that a public key about to be used for the\n   computationally expensive effort\
    \ to check the signature is possibly\n   valid.  Its exact meaning is algorithm\
    \ dependent.  For the MD5/RSA\n   algorithm, it is the next to the bottom two\
    \ octets of the public key\n   modulus needed to decode the signature field. \
    \ That is to say, the\n   most significant 16 of the lest significant 24 bits\
    \ of the modulus in\n   network order.\n   The \"signer's name\" field is the\
    \ domain name of the signer generating\n   the SIG RR.  This is the owner of the\
    \ public KEY RR that can be used\n   to verify the signature.  It is frequently\
    \ the zone which contained\n   the RR(s) being authenticated.  The signer's name\
    \ may be compressed\n   with standard DNS name compression when being transmitted\
    \ over the\n   network.\n   The structure of the \"signature\" field is described\
    \ below.\n"
- title: 4.1.1 Signature Data
  contents:
  - "4.1.1 Signature Data\n   Except for algorithm number 253 where it is null, the\
    \ actual\n   signature portion of the SIG RR binds the other RDATA fields to all\n\
    \   of the \"type covered\" RRs with that owner name and class.  These\n   covered\
    \ RRs are thereby authenticated.  To accomplish this, a data\n   sequence is constructed\
    \ as follows:\n           data = RDATA | RR(s)...\n   where \"|\" is concatenation,\
    \ RDATA is all the RDATA fields in the SIG\n   RR itself before and not including\
    \ the signature, and RR(s) are all\n   the RR(s) of the type covered with the\
    \ same owner name and class as\n   the SIG RR in canonical form and order.  How\
    \ this data sequence is\n   processed into the signature is algorithm dependent.\n\
    \   For purposes of DNS security, the canonical form for an RR is the RR\n   with\
    \ domain names (1) fully expanded (no name compression via\n   pointers), (2)\
    \ all domain name letters set to lower case, and (3) the\n   original TTL substituted\
    \ for the current TTL.\n   For purposes of DNS security, the canonical order for\
    \ RRs is to sort\n   them in ascending order by name, considering labels as a\
    \ left\n   justified unsigned octet sequence in network (transmission) order\n\
    \   where a missing octet sorts before a zero octet.  (See also ordering\n   discussion\
    \ in Section 5.1.)  Within any particular name they are\n   similarly sorted by\
    \ type and then RDATA as a left justified unsigned\n   octet sequence. EXCEPT\
    \ that the type SIG RR(s) covering any\n   particular type appear immediately\
    \ after the other RRs of that type.\n   (This special consideration for SIG RR(s)\
    \ in ordering really only\n   applies to calculating the AXFR SIG RR as explained\
    \ in section 4.1.3\n   below.)  Thus if at name a.b there are two A RRs and one\
    \ KEY RR,\n   their order with SIGs for concatenating the \"data\" to be signed\
    \ would\n   be as follows:\n           a.b.  A ....\n           a.b.  A ....\n\
    \           a.b.  SIG A ...\n           a.b.  KEY ...\n           a.b.  SIG KEY\
    \ ...\n   SIGs covering type ANY should not be included in a zone.\n"
- title: 4.1.2 MD5/RSA Algorithm Signature Calculation
  contents:
  - "4.1.2 MD5/RSA Algorithm Signature Calculation\n   For the MD5/RSA algorithm,\
    \ the signature is as follows\n      hash = MD5 ( data )\n      signature = (\
    \ 01 | FF* | 00 | prefix | hash ) ** e (mod n)\n   where MD5 is the message digest\
    \ algorithm documented in RFC 1321, \"|\"\n   is concatenation, \"e\" is the private\
    \ key exponent of the signer, and\n   \"n\" is the modulus of the signer's public\
    \ key.  01, FF, and 00 are\n   fixed octets of the corresponding hexadecimal value.\
    \ \"prefix\" is the\n   ASN.1 BER MD5 algorithm designator prefix specified in\
    \ PKCS1, that\n   is,\n           hex 3020300c06082a864886f70d020505000410 [NETSEC].\n\
    \   This prefix is included to make it easier to use RSAREF or similar\n   packages.\
    \  The FF octet is repeated the maximum number of times such\n   that the value\
    \ of the quantity being exponentiated is one octet\n   shorter than the value\
    \ of n.\n   (The above specifications are identical to the corresponding part\
    \ of\n   Public Key Cryptographic Standard #1 [PKCS1].)\n   The size of n, including\
    \ most and least significant bits (which will\n   be 1) SHALL be not less than\
    \ 512 bits and not more than 2552 bits.  n\n   and e SHOULD be chosen such that\
    \ the public exponent is small.\n   Leading zeros bytes are not permitted in the\
    \ MD5/RSA algorithm\n   signature.\n   A public exponent of 3 minimizes the effort\
    \ needed to decode a\n   signature.  Use of 3 as the public exponent may be weak\
    \ for\n   confidentiality uses since, if the same data can be collected\n   encrypted\
    \ under three different keys with an exponent of 3 then,\n   using the Chinese\
    \ Remainder Theorem, the original plain text can be\n   easily recovered.  This\
    \ weakness is not significant for DNS because\n   we seek only authentication,\
    \ not confidentiality.\n"
- title: 4.1.3 Zone Transfer (AXFR) SIG
  contents:
  - "4.1.3 Zone Transfer (AXFR) SIG\n   The above SIG mechanisms assure the authentication\
    \ of all zone signed\n   RRs of a particular name, class and type.  However, to\
    \ efficiently\n   assure the completeness and security of zone transfers, a SIG\
    \ RR\n   owned by the zone name must be created with a type covered of AXFR\n\
    \   that covers all zone signed RRs in the zone and their zone SIGs but\n   not\
    \ the SIG AXFR itself.  The RRs are ordered and concatenated for\n   hashing as\
    \ described in Section 4.1.1.  (See also ordering discussion\n   in Section 5.1.)\n\
    \   The AXFR SIG must be calculated last of all zone key signed SIGs in\n   the\
    \ zone.  In effect, when signing the zone, you order, as described\n   above,\
    \ all RRs to be signed by the zone, and all associated glue RRs\n   and delegation\
    \ point NS RRs.  You can then make one pass inserting\n   all the zone SIGs. \
    \ As you proceed you hash RRs to be signed into\n   both an RRset hash and the\
    \ zone hash.  When the name or type changes\n   you calculate and insert the RRset\
    \ zone SIG, clear the RRset hash,\n   and hash that SIG into the zone hash (note\
    \ that glue RRs and\n   delegation point NSs are not zone signed but zone apex\
    \ NSs are).\n   When you have finished processing all the starting RRs as described\n\
    \   above, you can then use the cumulative zone hash RR to calculate and\n   insert\
    \ an AXFR SIG covering the zone.  Of course any computational\n   technique producing\
    \ the same results as above is permitted.\n   The AXFR SIG really belongs to the\
    \ zone as a whole, not to the zone\n   name.  Although it should be correct for\
    \ the zone name, the labels\n   field of an AXFR SIG is otherwise meaningless.\
    \ The AXFR SIG is only\n   retrieved as part of a zone transfer.  After validation\
    \ of the AXFR\n   SIG, the zone MAY be considered valid without verification of\
    \ the\n   internal zone signed SIGs in the zone; however, any RRs authenticated\n\
    \   by SIGs signed by entity keys or the like MUST still be validated.\n   The\
    \ AXFR SIG SHOULD be transmitted first in a zone transfer so the\n   receiver\
    \ can tell immediately that they may be able to avoid\n   verifying other zone\
    \ signed SIGs.\n   RRs which are authenticated by a dynamic update key and not\
    \ by the\n   zone key (see Section 3.2) are not included in the AXFR SIG. They\
    \ may\n   originate in the network and might not, in general, be migrated to\n\
    \   the recommended off line zone signing procedure (see Section 7.2).\n   Thus,\
    \ such RRs are not directly signed by the zone, are not included\n   in the AXFR\
    \ SIG, and are protected against omission from zone\n   transfers only to the\
    \ extent that the server and communication can be\n   trusted.\n"
- title: 4.1.4 Transaction and Request SIGs
  contents:
  - "4.1.4 Transaction and Request SIGs\n   A response message from a security aware\
    \ server may optionally\n   contain a special SIG as the last item in the additional\
    \ information\n   section to authenticate the transaction.\n   This SIG has a\
    \ \"type covered\" field of zero, which is not a valid RR\n   type.  It is calculated\
    \ by using a \"data\" (see Section 4.1.2) of the\n   entire preceding DNS reply\
    \ message, including DNS header but not the\n   IP header, concatenated with the\
    \ entire DNS query message that\n   produced this response, including the query's\
    \ DNS header but not its\n   IP header.  That is\n        data = full response\
    \ (less final transaction SIG) | full query\n   Verification of the transaction\
    \ SIG (which is signed by the server\n   host key, not the zone key) by the requesting\
    \ resolver shows that the\n   query and response were not tampered with in transit,\
    \ that the\n   response corresponds to the intended query, and that the response\n\
    \   comes from the queried server.\n   A DNS request may be optionally signed\
    \ by including one or more SIGs\n   at the end of the query. Such SIGs are identified\
    \ by having a \"type\n   covered\" field of zero. They sign the preceding DNS\
    \ request message\n   including DNS header but not including the IP header or\
    \ at the\n   begining or any preceding request SIGs at the end. Such request SIGs\n\
    \   are included in the \"data\" used to form any optional response\n   transaction\
    \ SIG.\n   WARNING: Request SIGs are unnecessary for currently defined queries\n\
    \   and will cause almost all existing DNS servers to completely ignore a\n  \
    \ query.  However, such SIGs may be needed to authenticate future DNS\n   secure\
    \ dynamic update or other requests.\n"
- title: 4.2 SIG RRs in the Construction of Responses
  contents:
  - "4.2 SIG RRs in the Construction of Responses\n   Security aware DNS servers MUST,\
    \ for every authoritative RR the query\n   will return, attempt to send the available\
    \ SIG RRs which authenticate\n   the requested RR.  The following rules apply\
    \ to the inclusion of SIG\n   RRs in responses:\n   1. when an RR set is placed\
    \ in a response, its SIG RR has a higher\n      priority for inclusion than other\
    \ additional RRs that may need to\n      be included.  If space does not permit\
    \ its inclusion, the response\n      MUST be considered truncated except as provided\
    \ in 2 below.\n   2. when a SIG RR is present in the zone for an additional information\n\
    \      section RR, the response MUST NOT be considered truncated merely\n    \
    \  because space does not permit the inclusion of its SIG RR.\n   3. SIGs to authenticate\
    \ non-authoritative data (glue records and NS\n      RRs for subzones) are unnecessary\
    \ and MUST NOT be sent.  (Note\n      that KEYs for subzones are controlling in\
    \ a superzone so the\n      superzone's signature on the KEY MUST be included\
    \ (unless the KEY\n      was additional information and the SIG did not fit).)\n\
    \   4. If a SIG covers any RR that would be in the answer section of the\n   \
    \   response, its automatic inclusion MUST be the answer section.  If\n      it\
    \ covers an RR that would appear in the authority section, its\n      automatic\
    \ inclusion MUST be in the authority section.  If it\n      covers an RR that\
    \ would appear in the additional information\n      section it MUST appear in\
    \ the additional information section.\n      This is a change in the existing\
    \ standard which contemplates only\n      NS and SOA RRs in the authority section.\n\
    \   5. Optionally, DNS transactions may be authenticated by a SIG RR at\n    \
    \  the end of the response in the additional information section\n      (Section\
    \ 4.1.4).  Such SIG RRs are signed by the DNS server\n      originating the response.\
    \  Although the signer field MUST be the\n      name of the originating server\
    \ host, the owner name, class, TTL,\n      and original TTL, are meaningless.\
    \  The class and TTL fields\n      SHOULD be zero.  To conserve space, the owner\
    \ name SHOULD be root\n      (a single zero octet).  If transaction authentication\
    \ is desired,\n      that SIG RR must be considered higher priority for inclusion\
    \ than\n      any other RR in the response.\n"
- title: 4.3 Processing Responses and SIG RRs
  contents:
  - "4.3 Processing Responses and SIG RRs\n   The following rules apply to the processing\
    \ of SIG RRs included in a\n   response:\n   1. a security aware resolver that\
    \ receives a response from what it\n      believes to be a security aware server\
    \ via a secure communication\n      with the AD bit (see Section 6.1) set, MAY\
    \ choose to accept the\n      RRs as received without verifying the zone SIG RRs.\n\
    \   2. in other cases, a security aware resolver SHOULD verify the SIG\n     \
    \ RRs for the RRs of interest.  This may involve initiating\n      additional\
    \ queries for SIG or KEY RRs, especially in the case of\n      getting a response\
    \ from an insecure server.  (As explained in 4.2\n      above, it will not be\
    \ possible to secure CNAMEs being served up by\n      non-secure resolvers.)\n\
    \      NOTE: Implementers might expect the above SHOULD to be a MUST.\n      However,\
    \ local policy or the calling application may not require\n      the security\
    \ services.\n   3. If SIG RRs are received in response to a user query explicitly\n\
    \      specifying the SIG type, no special processing is required.\n   If the\
    \ message does not pass reasonable checks or the SIG does not\n   check against\
    \ the signed RRs, the SIG RR is invalid and should be\n   ignored.  If all of\
    \ the SIG RR(s) purporting to authenticate a set of\n   RRs are invalid, then\
    \ the set of RR(s) is not authenticated.\n   If the SIG RR is the last RR in a\
    \ response in the additional\n   information section and has a type covered of\
    \ zero, it is a\n   transaction signature of the response and the query that produced\
    \ the\n   response.  It MAY be optionally checked and the message rejected if\n\
    \   the checks fail.  But even if the checks succeed, such a transaction\n   authentication\
    \ SIG does NOT authenticate any RRs in the message.\n   Only a proper SIG RR signed\
    \ by the zone or a key tracing its\n   authority to the zone or to static resolver\
    \ configuration can\n   authenticate RRs.  If a resolver does not implement transaction\n\
    \   and/or request SIGs, it MUST ignore them without error.\n   If all reasonable\
    \ checks indicate that the SIG RR is valid then RRs\n   verified by it should\
    \ be considered authenticated.\n"
- title: 4.4 Signature Expiration, TTLs, and Validity
  contents:
  - "4.4 Signature Expiration, TTLs, and Validity\n   Security aware servers must\
    \ not consider SIG RRs to authenticate\n   anything after their expiration time\
    \ and not consider any RR to be\n   authenticated after its signatures have expired.\
    \  Within that\n   constraint, servers should continue to follow DNS TTL aging.\
    \  Thus\n   authoritative servers should continue to follow the zone refresh and\n\
    \   expire parameters and a non-authoritative server should count down\n   the\
    \ TTL and discard RRs when the TTL is zero.  In addition, when RRs\n   are transmitted\
    \ in a query response, the TTL should be trimmed so\n   that current time plus\
    \ the TTL does not extend beyond the signature\n   expiration time.  Thus, in\
    \ general, the TTL on an transmitted RR\n   would be\n         min(sigExpTim,max(zoneMinTTL,min(originalTTL,currentTTL)))\n"
- title: 4.5 File Representation of SIG RRs
  contents:
  - "4.5 File Representation of SIG RRs\n   A SIG RR can be represented as a single\
    \ logical line in a zone data\n   file [RFC1033] but there are some special considerations\
    \ as described\n   below.  (It does not make sense to include a transaction or\
    \ request\n   authenticating SIG RR in a file as they are a transient\n   authentication\
    \ that covers data including an ephemeral transaction\n   number and so must be\
    \ calculated in real time.)\n   There is no particular problem with the signer,\
    \ covered type, and\n   times.  The time fields appears in the form YYYYMMDDHHMMSS\
    \ where YYYY\n   is the year, the first MM is the month number (01-12), DD is\
    \ the day\n   of the month (01-31), HH is the hour in 24 hours notation (00-23),\n\
    \   the second MM is the minute (00-59), and SS is the second (00-59).\n   The\
    \ original TTL and algorithm fields appear as unsigned integers.\n   If the original\
    \ TTL, which applies to the type signed, is the same as\n   the TTL of the SIG\
    \ RR itself, it may be omitted.  The date field\n   which follows it is larger\
    \ than the maximum possible TTL so there is\n   no ambiguity.\n   The \"labels\"\
    \ field does not appear in the file representation as it\n   can be calculated\
    \ from the owner name.\n   The key footprint appears as an unsigned decimal number.\n\
    \   However, the signature itself can be very long.  It is the last data\n   field\
    \ and is represented in base 64 (see Appendix) and may be divided\n   up into\
    \ any number of white space separated substrings, down to\n   single base 64 digits,\
    \ which are concatenated to obtain the full\n   signature.  These substrings can\
    \ be split between lines using the\n   standard parenthesis.\n"
- title: 5. Non-existent Names and Types
  contents:
  - "5. Non-existent Names and Types\n   The SIG RR mechanism described in Section\
    \ 4 above provides strong\n   authentication of RRs that exist in a zone.  But\
    \ is it not clear\n   above how to authenticatably deny the existence of a name\
    \ in a zone\n   or a type for an existent name.\n   The nonexistence of a name\
    \ in a zone is indicated by the NXT (\"next\")\n   RR for a name interval containing\
    \ the nonexistent name. A NXT RR and\n   its SIG are returned in the authority\
    \ section, along with the error,\n   if the server is security aware.  The same\
    \ is true for a non-existent\n   type under an existing name.  This is a change\
    \ in the existing\n   standard which contemplates only NS and SOA RRs in the authority\n\
    \   section. NXT RRs will also be returned if an explicit query is made\n   for\
    \ the NXT type.\n   The existence of a complete set of NXT records in a zone means\
    \ that\n   any query for any name and any type to a security aware server\n  \
    \ serving the zone will always result in an reply containing at least\n   one\
    \ signed RR.\n   NXT RRs do not appear in zone master files since they can be\
    \ derived\n   from the rest of the zone.\n"
- title: 5.1 The NXT Resource Record
  contents:
  - "5.1 The NXT Resource Record\n   The NXT resource record is used to securely indicate\
    \ that RRs with an\n   owner name in a certain name interval do not exist in a\
    \ zone and to\n   indicate what zone signed RR types are present for an existing\
    \ name.\n   The owner name of the NXT RR is an existing name in the zone.  It's\n\
    \   RDATA is a \"next\" name and a type bit map. The presence of the NXT RR\n\
    \   means that generally no name between its owner name and the name in\n   its\
    \ RDATA area exists and that no other zone signed types exist under\n   its owner\
    \ name.  This implies a canonical ordering of all domain\n   names in a zone.\n\
    \   The ordering is to sort labels as unsigned left justified octet\n   strings\
    \ where the absence of a octet sorts before a zero value octet\n   and upper case\
    \ letters are treated as lower case letters.  Names are\n   then sorted by sorting\
    \ on the highest level label and then, within\n   those names with the same highest\
    \ level label by the next lower\n   label, etc. down to leaf node labels.  Since\
    \ we are talking about a\n   zone, the zone name itself always exists and all\
    \ other names are the\n   zone name with some prefix of lower level labels.  Thus\
    \ the zone name\n   itself always sorts first.\n   There is a potential problem\
    \ with the last NXT in a zone as it wants\n   to have an owner name which is the\
    \ last existing name in canonical\n   order, which is easy, but it is not obvious\
    \ what name to put in its\n   RDATA to indicate the entire remainder of the name\
    \ space.  This is\n   handled by treating the name space as circular and putting\
    \ the zone\n   name in the RDATA of the last NXT in a zone.\n   There are special\
    \ considerations due to interaction with wildcards as\n   explained below.\n \
    \  The NXT RRs for a zone SHOULD be automatically calculated and added\n   to\
    \ the zone by the same recommended off-line process that signs the\n   zone (see\
    \ Section 7.2).  The NXT RR's TTL SHOULD not exceed the zone\n   minimum TTL.\n"
- title: 5.2 NXT RDATA Format
  contents:
  - "5.2 NXT RDATA Format\n   The RDATA for an NXT RR consists simply of a domain\
    \ name followed by\n   a bit map.\n   The type number for the NXT RR is 30.\n\
    \                           1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 2 2 2 2 3 3\n    \
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |         next domain name                                      /\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                    type bit map                               /\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The NXT RR type bit map is one bit per RR type present for the owner\n   name\
    \ similar to the WKS socket bit map.  The first bit represents RR\n   type zero\
    \ (an illegal type which should not be present.) A one bit\n   indicates that\
    \ at least one RR of that type is present for the owner\n   name.  A zero indicates\
    \ that no such RR is present.  All bits not\n   specified because they are beyond\
    \ the end of the bit map are assumed\n   to be zero.  Note that bit 30, for NXT,\
    \ will always be on so the\n   minimum bit map length is actually four octets.\
    \  The NXT bit map\n   should be printed as a list of RR type mnemonics or decimal\
    \ numbers\n   similar to the WKS RR.\n   The domain name may be compressed with\
    \ standard DNS name compression\n   when being transmitted over the network. \
    \ The size of the bit map can\n   be inferred from the RDLENGTH and the length\
    \ of the next domain name.\n"
- title: 5.3 Example
  contents:
  - "5.3 Example\n   Assume zone foo.tld has entries for\n               big.foo.tld,\n\
    \               medium.foo.tld.\n               small.foo.tld.\n             \
    \  tiny.foo.tld.\n   Then a query to a security aware server for huge.foo.tld\
    \ would\n   produce an error reply with the authority section data including\n\
    \   something like the following:\n   big.foo.tld. NXT medium.foo.tld. A MX SIG\
    \ NXT\n   big.foo.tld. SIG NXT 1 3 ( ;type-cov=NXT, alg=1, labels=3\n        \
    \            19960102030405 ;signature expiration\n                    19951211100908\
    \ ;time signed\n                    21435          ;key footprint\n          \
    \          foo.tld.       ;signer\n    MxFcby9k/yvedMfQgKzhH5er0Mu/vILz45IkskceFGgiWCn/GxHhai6VAuHAoNUz4YoU\n\
    \    1tVfSCSqQYn6//11U6Nld80jEeC8aTrO+KKmCaY= ;signature (640 bits)\n        \
    \                  )\n   Note that this response implies that big.foo.tld is an\
    \ existing name\n   in the zone and thus has other RR types associated with it\
    \ than NXT.\n   However, only the NXT (and its SIG) RR appear in the response\
    \ to this\n   query for huge.foo.tld, which is a non-existent name.\n"
- title: 5.4 Interaction of NXT RRs and Wildcard RRs
  contents:
  - "5.4 Interaction of NXT RRs and Wildcard RRs\n   Since, in some sense, a wildcard\
    \ RR causes all possible names in an\n   interval to exist, there should not be\
    \ an NXT RR that would cover any\n   part of this interval.  Thus if *.X.ZONE\
    \ exists you would expect an\n   NXT RR that ends at X.ZONE and one that starts\
    \ with the last name\n   covered by *.X.ZONE.  However, this \"last name covered\"\
    \ is something\n   very ugly and long like \\255\\255\\255....X.zone.  So the\
    \ NXT for the\n   interval following is simply given the owner name *.X.ZONE and\
    \ an\n   RDATA of the next name after the wildcard.  This \"*\" type owner name\n\
    \   is not expanded when the NXT is returned as authority information in\n   connection\
    \ with a query for a non-existent name.\n   If there could be any wildcard RRs\
    \ in a zone and thus wildcard NXTs,\n   care must be taken in interpreting the\
    \ results of explicit NXT\n   retrievals as the owner name may be a wildcard expansion.\n\
    \   The existence of one or more wildcard RRs covering a name interval\n   makes\
    \ it possible for a malicious server to hide any more\n   specifically named RRs\
    \ in the internal.  The server can just falsely\n   return the wildcard match\
    \ NXT instead of the more specifically named\n   RRs.  If there is a zone wide\
    \ wildcard, there will be an NXT RR whose\n   owner name is the wild card and\
    \ whose RDATA is the zone name. In this\n   case a server could conceal the existence\
    \ of any more specific RRs in\n   the zone.  It would be possible to design a\
    \ more strict NXT feature\n   which would eliminate this possibility.  But it\
    \ would be more complex\n   and might be so constraining as to make any dynamic\
    \ update feature\n   very difficult.\n"
- title: 5.5 Blocking NXT Pseudo-Zone Transfers
  contents:
  - "5.5 Blocking NXT Pseudo-Zone Transfers\n   In a secure zone, a resolver can query\
    \ for the initial NXT associated\n   with the zone name.  Using the next domain\
    \ name RDATA field from that\n   RR, it can query for the next NXT RR.  By repeating\
    \ this, it can walk\n   through all the NXTs in the zone.  If there are no wildcards,\
    \ it can\n   use this technique to find all names in a zone. If it does type ANY\n\
    \   queries, it can incrementally get all information in the zone and\n   thus\
    \ defeat attempts to administratively block zone transfers.\n   If there are any\
    \ wildcards, this NXT walking technique will not find\n   any more specific RR\
    \ names in the part of the name space the wildcard\n   covers.  By doing explicit\
    \ retrievals for wildcard names, a resolver\n   could determine what intervals\
    \ are covered by wildcards but still\n   could not, with these techniques, find\
    \ any names inside such\n   intervals except by trying every name.\n   If it is\
    \ desired to block NXT walking, the recommended method is to\n   add a zone wide\
    \ wildcard of the KEY type with the no-key type value\n   and with no type (zone,\
    \ entity, or user) bit on.  This will cause\n   there to be one zone covering\
    \ NXT RR and leak no information about\n   what real names exist in the zone.\
    \  This protection from pseudo-zone\n   transfers is bought at the expense of\
    \ eliminating the data origin\n   authentication of the non-existence of names\
    \ that NXT RRs can\n   provide.  If an entire zone is covered by a wildcard, a\
    \ malicious\n   server can return an RR produced by matching the resulting wildcard\n\
    \   NXT and can thus hide all the real data and delegations in the zone\n   that\
    \ have more specific names.\n"
- title: 5.6 Special Considerations at Delegation Points
  contents:
  - "5.6 Special Considerations at Delegation Points\n   A name (other than root)\
    \ which is the head of a zone also appears as\n   the leaf in a superzone.  If\
    \ both are secure, there will always be\n   two different NXT RRs with the same\
    \ name.  They can be distinguished\n   by their signers and next domain name fields.\
    \  Security aware servers\n   should return the correct NXT automatically when\
    \ required to\n   authenticate the non-existence of a name and both NXTs, if available,\n\
    \   on explicit query for type NXT.\n   Insecure servers will never automatically\
    \ return an NXT and some\n   implementations may only return the NXT from the\
    \ subzone on explicit\n   queries.\n"
- title: 6. The AD and CD Bits and How to Resolve Securely
  contents:
  - "6. The AD and CD Bits and How to Resolve Securely\n   Retrieving or resolving\
    \ authentic data from the Domain Name System\n   (DNS) involves starting with\
    \ one or more trusted public keys for one\n   or more zones. With trusted keys,\
    \ a resolver willing to perform\n   cryptography can progress securely through\
    \ the secure DNS zone\n   structure to the zone of interest as described in Section\
    \ 6.3. Such\n   trusted public keys would normally be configured in a manner similar\n\
    \   to that described in Section 6.2.  However, as a practical matter, a\n   security\
    \ aware resolver would still gain some confidence in the\n   results it returns\
    \ even if it was not configured with any keys but\n   trusted what it got from\
    \ a local well known server as a starting\n   point.\n   Data stored at a security\
    \ aware server needs to be internally\n   categorized as Authenticated, Pending,\
    \ or Insecure. There is also a\n   fourth transient state of Bad which indicates\
    \ that all SIG checks\n   have explicitly failed on the data. Such Bad data is\
    \ not retained at\n   a security aware server. Authenticated means that the data\
    \ has a\n   valid SIG under a KEY traceable via a chain of zero or more SIG and\n\
    \   KEY RRs to a KEY configured at the resolver via its boot file.\n   Pending\
    \ data has no authenticated SIGs and at least one additional\n   SIG the resolver\
    \ is still trying to authenticate.  Insecure data is\n   data which it is known\
    \ can never be either Authenticated or found Bad\n   because it is in or has been\
    \ reached via a non-secured zone. Behavior\n   in terms of control of and flagging\
    \ based on such data labels is\n   described in Section 6.1.\n   The proper validation\
    \ of signatures requires a reasonably secure\n   shared opinion of the absolute\
    \ time between resolvers and servers as\n   described in Section 6.4.\n"
- title: 6.1 The AD and CD Header Bits
  contents:
  - "6.1 The AD and CD Header Bits\n   Two previously unused bits are allocated out\
    \ of the DNS\n   query/response format header. The AD (authentic data) bit indicates\n\
    \   in a response that the data included has been verified by the server\n   providing\
    \ it.  The CD (checking disabled) bit indicates in a query\n   that non-verified\
    \ data is acceptable to the resolver sending the\n   query.\n   These bits are\
    \ allocated from the must-be-zero Z field as follows:\n                      \
    \                    1  1  1  1  1  1\n            0  1  2  3  4  5  6  7  8 \
    \ 9  0  1  2  3  4  5\n          +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \          |                      ID                       |\n          +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \          |QR|   Opcode  |AA|TC|RD|RA| Z|AD|CD|   RCODE   |\n          +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \          |                    QDCOUNT                    |\n          +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \          |                    ANCOUNT                    |\n          +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \          |                    NSCOUNT                    |\n          +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \          |                    ARCOUNT                    |\n          +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+\n\
    \   These bits are zero in old servers and resolvers.  Thus the responses\n  \
    \ of old servers are not flagged as authenticated to security aware\n   resolvers\
    \ and queries from non-security aware resolvers do not assert\n   the checking\
    \ disabled bit and thus will be answered by security aware\n   servers only with\
    \ authenticated data. Aware resolvers MUST not trust\n   the AD bit unless they\
    \ trust the server they are talking to and\n   either have a secure path to it\
    \ or use DNS transaction security.\n   Any security aware resolver willing to\
    \ do cryptography SHOULD assert\n   the CD bit on all queries to reduce DNS latency\
    \ time by allowing\n   security aware servers to answer before they have resolved\
    \ the\n   validity of data.\n   Security aware servers NEVER return Bad data.\
    \  For non-security aware\n   resolvers or security aware resolvers requesting\
    \ service by having\n   the CD bit clear, security aware servers MUST return only\n\
    \   Authenticated or Insecure data with the AD bit set in the response.\n   Security\
    \ aware resolvers will know that if data is Insecure versus\n   Authentic by the\
    \ absence of SIG RRs.  Security aware servers MAY\n   return Pending data to security\
    \ aware resolvers requesting the\n   service by clearing the AD bit in the response.\
    \  The AD bit MUST NOT\n   be set on a response unless all of the RRs in the response\
    \ are either\n   Authenticated or Insecure.\n"
- title: 6.2 Boot File Format
  contents:
  - "6.2 Boot File Format\n   Two boot file directives are added as described in this\
    \ section.\n   The format for a boot file directive to configure a starting zone\
    \ key\n   is as follows:\n        pubkey name flags protocol algorithm key-data\n\
    \   for a public key.  \"name\" is the owner name (if the line is\n   translated\
    \ into a KEY RR).  Flags indicates the type of key and is\n   the same as the\
    \ flag octet in the KEY RR.  Protocol and algorithm\n   also have the same meaning\
    \ as they do in the KEY RR.  The material\n   after the algorithm is algorithm\
    \ dependent and, for private\n   algorithms (algorithm 254), starts with the algorithm's\
    \ identifying\n   OID and its length.  If the \"no key\" type value is set in\
    \ flags or\n   the algorithm is specified as 253, then the key-data after algorithm\n\
    \   is null.  When present the key-data is treated as an octet stream and\n  \
    \ encoded in base 64 (see Appendix).\n   A file of keys for cross certification\
    \ or other purposes can be\n   configured though the keyfile directive as follows:\n\
    \        keyfile filename\n   The file looks like a master file except that it\
    \ can only contain KEY\n   and SIG RRs with the SIGs signed under a key configured\
    \ with the\n   pubkey directive.\n   While it might seem logical for everyone\
    \ to start with the key for\n   the root zone, this has problems.  The logistics\
    \ of updating every\n   DNS resolver in the world when the root key changes would\
    \ be\n   excessive.  It may be some time before there even is a root key.\n  \
    \ Furthermore, many organizations will explicitly wish their \"interior\"\n  \
    \ DNS implementations to completely trust only their own zone.  Such\n   interior\
    \ resolvers can then go through the organization's zone\n   servers to access\
    \ data outsize the organization's domain and should\n   only be configured with\
    \ the key forthe organization's DNS apex.\n"
- title: 6.3 Chaining Through Zones
  contents:
  - "6.3 Chaining Through Zones\n   Starting with one or more trusted keys for a zone,\
    \ it should be\n   possible to retrieve signed keys for its subzones which have\
    \ a key\n   and, if the zone is not root, for its superzone. Every authoritative\n\
    \   secure zone server MUST also include the KEY RR for a super-zone\n   signed\
    \ by the secure zone via a keyfile directive. This makes it\n   possible to climb\
    \ the tree of zones if one starts below root.  A\n   secure sub-zone is indicated\
    \ by a KEY RR with non-null key\n   information appearing with the NS RRs for\
    \ the sub-zone.  These make\n   it possible to descend within the tree of zones.\n\
    \   A resolver should keep track of the number of successive secure zones\n  \
    \ traversed from a starting point to any secure zone it can reach.  In\n   general,\
    \ the lower such a distance number is, the greater the\n   confidence in the data.\
    \  Data configured via a boot file directive\n   should be given a distance number\
    \ of zero.  If a query encounters\n   different data for the same query with different\
    \ distance values,\n   that with a larger value should be ignored.\n   A security\
    \ conscious resolver should completely refuse to step from a\n   secure zone into\
    \ a non-secure zone unless the non-secure zone is\n   certified to be non-secure,\
    \ or only experimentally secure, by the\n   presence of an authenticated KEY RR\
    \ for the non-secure zone with the\n   no-key type value or the presence of a\
    \ KEY RR with the experimental\n   bit set.  Otherwise the resolver is getting\
    \ bogus or spoofed data.\n   If legitimate non-secure zones are encountered in\
    \ traversing the DNS\n   tree, then no zone can be trusted as secure that can\
    \ be reached only\n   via information from such non-secure zones. Since the non-secure\
    \ zone\n   data could have been spoofed, the \"secure\" zone reach via it could\
    \ be\n   counterfeit.  The \"distance\" to data in such zones or zones reached\n\
    \   via such zones could be set to 512 or more as this exceeds the\n   largest\
    \ possible distance through secure zones in the DNS.\n   Nevertheless, continuing\
    \ to apply secure checks within \"secure\" zones\n   reached via non-secure zones\
    \ is a good practice and will, as a\n   practical matter, provide some small increase\
    \ in security.\n"
- title: 6.4 Secure Time
  contents:
  - "6.4 Secure Time\n   Coordinated interpretation of the time fields in SIG RRs\
    \ requires\n   that reasonably consistent time be available to the hosts\n   implementing\
    \ the DNS security extensions.\n   A variety of time synchronization protocols\
    \ exist including the\n   Network Time Protocol (NTP, RFC1305).  If such protocols\
    \ are used,\n   they MUST be used securely so that time can not be spoofed.\n\
    \   Otherwise, for example, a host could get its clock turned back and\n   might\
    \ then believe old SIG and KEY RRs which were valid but no longer\n   are.\n"
- title: 7. Operational Considerations
  contents:
  - "7. Operational Considerations\n   This section discusses a variety of considerations\
    \ in secure\n   operation of the Domain Name System (DNS) using these protocol\n\
    \   extensions.\n"
- title: 7.1 Key Size Considerations
  contents:
  - "7.1 Key Size Considerations\n   There are a number of factors that effect public\
    \ key size choice for\n   use in the DNS security extension.  Unfortunately, these\
    \ factors\n   usually do not all point in the same direction.  Choice of zone\
    \ key\n   size should generally be made by the zone administrator depending on\n\
    \   their local conditions.\n   For most schemes, larger keys are more secure\
    \ but slower.  Given a\n   small public exponent, verification (the most common\
    \ operation) for\n   the MD5/RSA algorithm will vary roughly with the square of\
    \ the\n   modulus length, signing will vary with the cube of the modulus\n   length,\
    \ and key generation (the least common operation) will vary\n   with the fourth\
    \ power of the modulus length.  The current best\n   algorithms for factoring\
    \ a modulus and breaking RSA security vary\n   roughly with the 1.6 power of the\
    \ modulus itself.  Thus going from a\n   640 bit modulus to a 1280 bit modulus\
    \ only increases the verification\n   time by a factor of 4 but increases the\
    \ work factor of breaking the\n   key by over 2^900.  An upper bound of 2552 bits\
    \ has been established\n   for the MD5/RSA DNS security algorithm for interoperability\
    \ purposes.\n   However, larger keys increase the size of the KEY and SIG RRs.\
    \  This\n   increases the chance of DNS UDP packet overflow and the possible\n\
    \   necessity for using higher overhead TCP in responses.\n   The recommended\
    \ minimum RSA algorithm modulus size, 640 bits, is\n   believed by the authors\
    \ to be secure at this time but high level\n   zones in the DNS tree may wish\
    \ to set a higher minimum, perhaps 1000\n   bits, for security reasons.  (Since\
    \ the United States National\n   Security Agency generally permits export of encryption\
    \ systems using\n   an RSA modulus of up to 512 bits, use of that small a modulus,\
    \ i.e.\n   n, must be considered weak.)\n   For a key used only to secure data\
    \ and not to secure other keys, 640\n   bits should be adequate at this time.\n"
- title: 7.2 Key Storage
  contents:
  - "7.2 Key Storage\n   It is recommended that zone private keys and the zone file\
    \ master\n   copy be kept and used in off-line non-network connected physically\n\
    \   secure machines only.  Periodically an application can be run to add\n   authentication\
    \ to a zone by adding SIG and NXT RRs and adding no-key\n   type KEY RRs for subzones\
    \ where a real KEY RR is not provided. Then\n   the augmented file can be transferred,\
    \ perhaps by sneaker-net, to the\n   networked zone primary server machine.\n\
    \   The idea is to have a one way information flow to the network to\n   avoid\
    \ the possibility of tampering from the network.  Keeping the\n   zone master\
    \ file on-line on the network and simply cycling it through\n   an off-line signer\
    \ does not do this.  The on-line version could still\n   be tampered with if the\
    \ host it resides on is compromised.  For\n   maximum security, the master copy\
    \ of the zone file should be off net\n   and should not be updated based on an\
    \ unsecured network mediated\n   communication.\n   Note, however, that secure\
    \ resolvers must be configured with some\n   trusted on-line public key information\
    \ (or a secure path to such a\n   resolver) or they will be unable to authenticate.\n\
    \   Non-zone private keys, such as host or user keys, generally have to\n   be\
    \ kept on line to be used for real-time purposes such as DNS\n   transaction security,\
    \ IPSEC session set-up, or secure mail.\n"
- title: 7.3 Key Generation
  contents:
  - "7.3 Key Generation\n   Careful key generation is a sometimes overlooked but absolutely\n\
    \   essential element in any cryptographically secure system.  The\n   strongest\
    \ algorithms used with the longest keys are still of no use\n   if an adversary\
    \ can guess enough to lower the size of the likely key\n   space so that it can\
    \ be exhaustively searched.  Suggestions will be\n   found in RFC 1750.\n   It\
    \ is strongly recommended that key generation also occur off-line,\n   perhaps\
    \ on the machine used to sign zones (see Section 7.2).\n"
- title: 7.4 Key Lifetimes
  contents:
  - "7.4 Key Lifetimes\n   No key should be used forever.  The longer a key is in\
    \ use, the\n   greater the probability that it will have been compromised through\n\
    \   carelessness, accident, espionage, or cryptanalysis.  Furthermore, if\n  \
    \ key rollover is a rare event, there is an increased risk that, when\n   the\
    \ time does come up change the key, no one at the site will\n   remember how to\
    \ do it or other problems will have developed in the\n   procedures.\n   While\
    \ key lifetime is a matter of local policy, these considerations\n   suggest that\
    \ no zone key should have a lifetime significantly over\n   four years.  A reasonable\
    \ maximum lifetime for zone keys that are\n   kept off-line and carefully guarded\
    \ is 13 months with the intent that\n   they be replaced every year.  A reasonable\
    \ maximum lifetime for end\n   entity and useer keys that are used for IP-security\
    \ or the like and\n   are kept on line is 36 days with the intent that they be\
    \ replaced\n   monthly or more often.  In some cases, an entity key lifetime of\n\
    \   somewhat over a day may be reasonable.\n"
- title: 7.5 Signature Lifetime
  contents:
  - "7.5 Signature Lifetime\n   Signature expiration times must be set far enough\
    \ in the future that\n   it is quite certain that new signatures can be generated\
    \ before the\n   old ones expire.  However, setting expiration too far into the\
    \ future\n   could, if bad data or signatures were ever generated, mean a long\n\
    \   time to flush such badness.\n   It is recommended that signature lifetime\
    \ be a small multiple of the\n   TTL but not less than a reasonable re-signing\
    \ interval.\n"
- title: 7.6 Root
  contents:
  - "7.6 Root\n   It should be noted that in DNS the root is a zone unto itself. \
    \ Thus\n   the root zone key should only be seen signing itself or signing RRs\n\
    \   with names one level below root, such as .aq, .edu, or .arpa.\n   Implementations\
    \ MAY reject as bogus any purported root signature of\n   records with a name\
    \ more than one level below root.  The root zone\n   contains the root KEY RR\
    \ signed by a SIG RR under the root key\n   itself.\n"
- title: 8. Conformance
  contents:
  - "8. Conformance\n   Levels of server and resolver conformance are defined.\n"
- title: 8.1 Server Conformance
  contents:
  - "8.1 Server Conformance\n   Two levels of server conformance are defined as follows:\n\
    \      Minimal server compliance is the ability to store and retrieve\n      (including\
    \ zone transfer) SIG, KEY, and NXT RRs.  Any secondary,\n      caching, or other\
    \ server for a secure zone MUST be at least\n      minimally compliant and even\
    \ then some things, such as secure\n      CNAMEs, will not work without full compliance.\n\
    \   Full server compliance adds the following to basic compliance:\n      (1)\
    \ ability to read SIG, KEY, and NXT RRs in zone files and (2)\n      ability,\
    \ given a zone file and private key, to add appropriate SIG\n      and NXT RRs,\
    \ possibly via a separate application, (3) proper\n      automatic inclusion of\
    \ SIG, KEY, and NXT RRs in responses, (4)\n      suppression of CNAME following\
    \ on retrieval of the security type\n      RRs, (5) recognize the CD query header\
    \ bit and set the AD query\n      header bit, as appropriate, and (6) proper handling\
    \ of the two NXT\n      RRs at delegation points.  Primary servers for secure\
    \ zones MUST\n      be fully compliant and for completely successful secure operation,\n\
    \      all secondary, caching, and other servers handling the zone SHOULD\n  \
    \    be fully compliant as well.\n"
- title: 8.2 Resolver Conformance
  contents:
  - "8.2 Resolver Conformance\n   Two levels of resolver compliance are defined:\n\
    \      A basic compliance resolver can handle SIG, KEY, and NXT RRs when\n   \
    \   they are explicitly requested.\n      A fully compliant resolver (1) understands\
    \ KEY, SIG, and NXT RRs,\n      (2) maintains appropriate information in its local\
    \ caches and\n      database to indicate which RRs have been authenticated and\
    \ to what\n      extent they have been authenticated, (3) performs additional\n\
    \      queries as necessary to attempt to obtain KEY, SIG, or NXT RRs\n      from\
    \ non-security aware servers, (4) normally sets the CD query\n      header bit\
    \ on its queries.\n"
- title: 9. Security Considerations
  contents:
  - "9. Security Considerations\n   This document describes technical details of extensions\
    \ to the Domain\n   Name System (DNS) protocol to provide data integrity and origin\n\
    \   authentication, public key distribution, and optional transaction and\n  \
    \ request security.\n   It should be noted that, at most, these extensions guarantee\
    \ the\n   validity of resource records, including KEY resource records,\n   retrieved\
    \ from the DNS.  They do not magically solve other security\n   problems.  For\
    \ example, using secure DNS you can have high confidence\n   in the IP address\
    \ you retrieve for a host name; however, this does\n   not stop someone for substituting\
    \ an unauthorized host at that\n   address or capturing packets sent to that address\
    \ and falsely\n   responding with packets apparently from that address.  Any reasonably\n\
    \   complete security system will require the protection of many\n   additional\
    \ facets of the Internet.\n"
- title: References
  contents:
  - "References\n   [NETSEC] -  Network Security: PRIVATE Communications in a PUBLIC\n\
    \               World, Charlie Kaufman, Radia Perlman, & Mike Speciner,\n    \
    \           Prentice Hall Series in Computer Networking and\n               Distributed\
    \ Communications 1995.\n   [PKCS1] -   PKCS #1: RSA Encryption Standard, RSA Data\
    \ Security,\n               Inc., 3 June 1991, Version 1.4.\n   [RFC1032] - Stahl,\
    \ M., \"Domain Administrators Guide\", RFC 1032,\n               November 1987.\n\
    \   [RFC1033] - Lottor, M., \"Domain Administrators Operations Guide\",\n    \
    \           RRFC 1033, November 1987.\n   [RFC1034] - Mockapetris, P., \"Domain\
    \ Names - Concepts and\n               Facilities\", STD 13, RFC 1034, November\
    \ 1987.\n   [RFC1035] - Mockapetris, P., \"Domain Names - Implementation and\n\
    \               Specifications\", STD 13, RFC 1035, November 1987.\n   [RFC1305]\
    \ - Mills, D., \"Network Time Protocol (v3)\", RFC 1305, March\n             \
    \  1992.\n   [RFC1321] - Rivest, R., \"The MD5 Message-Digest Algorithm\", RFC\
    \ 1321,\n               April 1992.\n   [RFC1530] - Malamud, C., and M. Rose,\
    \ \"Principles of Operation for\n               the TPC.INT Subdomain: General\
    \ Principles and Policy\",\n               RFC 1530, October 1993.\n   [RFC1750]\
    \ - Eastlake, D., Crocker, S., and J, Schiller, \"Randomness\n               Requirements\
    \ for Security\", RFC 1750, December 1994.\n   [RFC1825] - Atkinson, R., \"Security\
    \ Architecture for the Internet\n               Protocol\", RFC 1825, August 1995.\n\
    \   [RSA FAQ] - RSADSI Frequently Asked Questions periodic posting.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Donald E. Eastlake 3rd\n   CyberCash, Inc.\n   318 Acton\
    \ Street\n   Carlisle, MA 01741 USA\n   Telephone:   +1 508-287-4877\n       \
    \         +1 508-371-7148(fax)\n                +1 703-620-4200(main office, Reston,\
    \ Virginia, USA)\n   EMail:       dee@cybercash.com\n   Charles W. Kaufman\n \
    \  Iris Associates\n   1 Technology Park Drive\n   Westford, MA 01886 USA\n  \
    \ Telephone:   +1 508-392-5276\n   EMail:       charlie_kaufman@iris.com\n"
- title: 'Appendix: Base 64 Encoding'
  contents:
  - "Appendix: Base 64 Encoding\n   The following encoding technique is taken from\
    \ RFC 1521 by N.\n   Borenstein and N. Freed.  It is reproduced here in an edited\
    \ form for\n   convenience.\n   A 65-character subset of US-ASCII is used, enabling\
    \ 6 bits to be\n   represented per printable character. (The extra 65th character,\
    \ \"=\",\n   is used to signify a special processing function.)\n   The encoding\
    \ process represents 24-bit groups of input bits as output\n   strings of 4 encoded\
    \ characters. Proceeding from left to right, a\n   24-bit input group is formed\
    \ by concatenating 3 8-bit input groups.\n   These 24 bits are then treated as\
    \ 4 concatenated 6-bit groups, each\n   of which is translated into a single digit\
    \ in the base 64 alphabet.\n   Each 6-bit group is used as an index into an array\
    \ of 64 printable\n   characters. The character referenced by the index is placed\
    \ in the\n   output string.\n                       Table 1: The Base 64 Alphabet\n\
    \      Value Encoding  Value Encoding  Value Encoding  Value Encoding\n      \
    \    0 A            17 R            34 i            51 z\n          1 B      \
    \      18 S            35 j            52 0\n          2 C            19 T   \
    \         36 k            53 1\n          3 D            20 U            37 l\
    \            54 2\n          4 E            21 V            38 m            55\
    \ 3\n          5 F            22 W            39 n            56 4\n         \
    \ 6 G            23 X            40 o            57 5\n          7 H         \
    \   24 Y            41 p            58 6\n          8 I            25 Z      \
    \      42 q            59 7\n          9 J            26 a            43 r   \
    \         60 8\n         10 K            27 b            44 s            61 9\n\
    \         11 L            28 c            45 t            62 +\n         12 M\
    \            29 d            46 u            63 /\n         13 N            30\
    \ e            47 v\n         14 O            31 f            48 w         (pad)\
    \ =\n         15 P            32 g            49 x\n         16 Q            33\
    \ h            50 y\n   Special processing is performed if fewer than 24 bits\
    \ are available\n   at the end of the data being encoded.  A full encoding quantum\
    \ is\n   always completed at the end of a quantity.  When fewer than 24 input\n\
    \   bits are available in an input group, zero bits are added (on the\n   right)\
    \ to form an integral number of 6-bit groups.  Padding at the\n   end of the data\
    \ is performed using the '=' character.  Since all base\n   64 input is an integral\
    \ number of octets, only the following cases\n   can arise: (1) the final quantum\
    \ of encoding input is an integral\n   multiple of 24 bits; here, the final unit\
    \ of encoded output will be\n   an integral multiple of 4 characters with no \"\
    =\" padding, (2) the\n   final quantum of encoding input is exactly 8 bits; here,\
    \ the final\n   unit of encoded output will be two characters followed by two\
    \ \"=\"\n   padding characters, or (3) the final quantum of encoding input is\n\
    \   exactly 16 bits; here, the final unit of encoded output will be three\n  \
    \ characters followed by one \"=\" padding character.\n"
