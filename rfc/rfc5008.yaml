- title: __initial_text__
  contents:
  - '    Suite B in Secure/Multipurpose Internet Mail Extensions (S/MIME)

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the conventions for using the United States\n\
    \   National Security Agency's Suite B algorithms in Secure/Multipurpose\n   Internet\
    \ Mail Extensions (S/MIME) as specified in RFC 3851.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document specifies the conventions for using the United\
    \ States\n   National Security Agency's Suite B algorithms [SuiteB] in\n   Secure/Multipurpose\
    \ Internet Mail Extensions (S/MIME) [MSG].  S/MIME\n   makes use of the Cryptographic\
    \ Message Syntax (CMS) [CMS].  In\n   particular, the signed-data and the enveloped-data\
    \ content types are\n   used.\n   Since many of the Suite B algorithms enjoy uses\
    \ in other environments\n   as well, the majority of the conventions needed for\
    \ the Suite B\n   algorithms are already specified in other documents.  This document\n\
    \   references the source of these conventions, and the relevant details\n   are\
    \ repeated to aid developers that choose to support Suite B.  In a\n   few cases,\
    \ additional algorithm identifiers are needed, and they are\n   provided in this\
    \ document.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"\
    SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\"\
    , and \"OPTIONAL\" in this\n   document are to be interpreted as described in\
    \ RFC 2119 [STDWORDS].\n"
- title: 1.2.  ASN.1
  contents:
  - "1.2.  ASN.1\n   CMS values are generated using ASN.1 [X.208-88], the Basic Encoding\n\
    \   Rules (BER) [X.209-88], and the Distinguished Encoding Rules (DER)\n   [X.509-88].\n"
- title: 1.3.  Suite B Security Levels
  contents:
  - "1.3.  Suite B Security Levels\n   Suite B offers two security levels: Level 1\
    \ and Level 2.  Security\n   Level 2 offers greater cryptographic strength by\
    \ using longer keys.\n   For S/MIME signed messages, Suite B follows the direction\
    \ set by RFC\n   3278 [CMSECC], but some additional algorithm identifiers are\n\
    \   assigned.  Suite B uses these algorithms:\n                            Security\
    \ Level 1   Security Level 2\n                            ----------------   ----------------\n\
    \      Message Digest:       SHA-256            SHA-384\n      Signature:    \
    \        ECDSA with P-256   ECDSA with P-384\n   For S/MIME-encrypted messages,\
    \ Suite B follows the direction set by\n   RFC 3278 [CMSECC] and follows the conventions\
    \ set by RFC 3565\n   [CMSAES].  Again, additional algorithm identifiers are assigned.\n\
    \   Suite B uses these algorithms:\n                            Security Level\
    \ 1   Security Level 2\n                            ----------------   ----------------\n\
    \      Key Agreement:        ECDH with P-256    ECDH with P-384\n      Key Derivation:\
    \       SHA-256            SHA-384\n      Key Wrap:             AES-128 Key Wrap\
    \   AES-256 Key Wrap\n      Content Encryption:   AES-128 CBC        AES-256 CBC\n"
- title: 2.  SHA-256 and SHA-256 Message Digest Algorithms
  contents:
  - "2.  SHA-256 and SHA-256 Message Digest Algorithms\n   This section specifies\
    \ the conventions employed by implementations\n   that support SHA-256 or SHA-384\
    \ [SHA2].  In Suite B, Security Level\n   1, the SHA-256 message digest algorithm\
    \ MUST be used.  In Suite B,\n   Security Level 2, SHA-384 MUST be used.\n   Within\
    \ the CMS signed-data content type, message digest algorithm\n   identifiers are\
    \ located in the SignedData digestAlgorithms field and\n   the SignerInfo digestAlgorithm\
    \ field.  Also, message digest values\n   are located in the Message Digest authenticated\
    \ attribute.  In\n   addition, message digest values are input into signature\
    \ algorithms.\n   The SHA-256 and SHA-384 message digest algorithms are defined\
    \ in FIPS\n   Pub 180-2 [SHA2, EH].  The algorithm identifier for SHA-256 is:\n\
    \      id-sha256  OBJECT IDENTIFIER  ::=  { joint-iso-itu-t(2)\n          country(16)\
    \ us(840) organization(1) gov(101) csor(3)\n          nistalgorithm(4) hashalgs(2)\
    \ 1 }\n   The algorithm identifier for SHA-384 is:\n      id-sha384  OBJECT IDENTIFIER\
    \  ::=  { joint-iso-itu-t(2)\n          country(16) us(840) organization(1) gov(101)\
    \ csor(3)\n          nistalgorithm(4) hashalgs(2) 2 }\n   There are two possible\
    \ encodings for the AlgorithmIdentifier\n   parameters field.  The two alternatives\
    \ arise from the fact that when\n   the 1988 syntax for AlgorithmIdentifier was\
    \ translated into the 1997\n   syntax, the OPTIONAL associated with the AlgorithmIdentifier\n\
    \   parameters got lost.  Later, the OPTIONAL was recovered via a defect\n   report,\
    \ but by then many people thought that algorithm parameters\n   were mandatory.\
    \  Because of this history some implementations encode\n   parameters as a NULL\
    \ element and others omit them entirely.  The\n   correct encoding for the SHA-256\
    \ and SHA-384 message digest\n   algorithms is to omit the parameters field; however,\
    \ to ensure\n   compatibility, implementations ought to also handle a SHA-256\
    \ and\n   SHA-384 AlgorithmIdentifier parameters field, which contains a NULL.\n\
    \   For both SHA-256 and SHA-384, the AlgorithmIdentifier parameters\n   field\
    \ is OPTIONAL, and if present, the parameters field MUST contain\n   a NULL. \
    \ Implementations MUST accept SHA-256 and SHA-384\n   AlgorithmIdentifiers with\
    \ absent parameters.  Implementations MUST\n   accept SHA-256 and SHA-384 AlgorithmIdentifiers\
    \ with NULL parameters.\n   Implementations SHOULD generate SHA-256 and SHA-384\n\
    \   AlgorithmIdentifiers with absent parameters.\n"
- title: 3.  ECDSA Signature Algorithm
  contents:
  - "3.  ECDSA Signature Algorithm\n   This section specifies the conventions employed\
    \ by implementations\n   that support Elliptic Curve Digital Signature Algorithm\
    \ (ECDSA).  The\n   direction set by RFC 3278 [CMSECC] is followed, but additional\n\
    \   message digest algorithms and additional elliptic curves are\n   employed.\
    \  In Suite B, Security Level 1, ECDSA MUST be used with the\n   SHA-256 message\
    \ digest algorithm and the P-256 elliptic curve.  In\n   Suite B, Security Level\
    \ 2, ECDSA MUST be used with the SHA-384\n   message digest algorithm and the\
    \ P-384 elliptic curve.  The P-256 and\n   P-384 elliptic curves are specified\
    \ in [DSS].\n   Within the CMS signed-data content type, signature algorithm\n\
    \   identifiers are located in the SignerInfo signatureAlgorithm field of\n  \
    \ SignedData.  In addition, signature algorithm identifiers are located\n   in\
    \ the SignerInfo signatureAlgorithm field of countersignature\n   attributes.\n\
    \   Within the CMS signed-data content type, signature values are located\n  \
    \ in the SignerInfo signature field of SignedData.  In addition,\n   signature\
    \ values are located in the SignerInfo signature field of\n   countersignature\
    \ attributes.\n   As specified in RFC 3279 [PKIX1ALG], ECDSA and Elliptic Curve\n\
    \   Diffie-Hellman (ECDH) use the same algorithm identifier for subject\n   public\
    \ keys in certificates, and it is repeated here:\n      id-ecPublicKey  OBJECT\
    \ IDENTIFIER  ::=  { iso(1) member-body(2)\n          us(840) ansi-x9-62(10045)\
    \ keyType(2) 1 }\n   This object identifier is used in public key certificates\
    \ for both\n   ECDSA signature keys and ECDH encryption keys.  The intended\n\
    \   application for the key may be indicated in the key usage field (see\n   RFC\
    \ 3280 [PKIX1]).  The use of separate keys for signature and\n   encryption purposes\
    \ is RECOMMENDED; however, the use of a single key\n   for both signature and\
    \ encryption purposes is not forbidden.\n   As specified in RFC 3279 [PKIX1ALG],\
    \ ECDSA and ECDH use the same\n   encoding for subject public keys in certificates,\
    \ and it is repeated\n   here:\n      ECPoint  ::=  OCTET STRING\n   The elliptic\
    \ curve public key (an OCTET STRING) is mapped to a\n   subject public key (a\
    \ BIT STRING) as follows: the most significant\n   bit of the OCTET STRING becomes\
    \ the most significant bit of the BIT\n   STRING, and the least significant bit\
    \ of the OCTET STRING becomes the\n   least significant bit of the BIT STRING.\
    \  Note that this octet string\n   may represent an elliptic curve point in compressed\
    \ or uncompressed\n   form.  Implementations that support elliptic curves according\
    \ to this\n   specification MUST support the uncompressed form and MAY support\
    \ the\n   compressed form.\n   ECDSA and ECDH require use of certain parameters\
    \ with the public key.\n   The parameters may be inherited from the certificate\
    \ issuer,\n   implicitly included through reference to a named curve, or explicitly\n\
    \   included in the certificate.  As specified in RFC 3279 [PKIX1ALG],\n   the\
    \ parameter structure is:\n      EcpkParameters  ::=  CHOICE {\n        ecParameters\
    \  ECParameters,\n        namedCurve    OBJECT IDENTIFIER,\n        implicitlyCA\
    \  NULL }\n   In Suite B, the namedCurve CHOICE MUST be used.  The object\n  \
    \ identifier for P-256 is:\n      ansip256r1  OBJECT IDENTIFIER  ::=  { iso(1)\
    \ member-body(2)\n          us(840) ansi-x9-62(10045) curves(3) prime(1) 7 }\n\
    \   The object identifier for P-384 is:\n      secp384r1  OBJECT IDENTIFIER  ::=\
    \  { iso(1)\n          identified-organization(3) certicom(132) curve(0) 34 }\n\
    \   The algorithm identifier used in CMS for ECDSA with SHA-256 signature\n  \
    \ values is:\n      ecdsa-with-SHA256  OBJECT IDENTIFIER  ::=  { iso(1) member-body(2)\n\
    \          us(840) ansi-X9-62(10045) signatures(4) ecdsa-with-sha2(3) 2 }\n  \
    \ The algorithm identifier used in CMS for ECDSA with SHA-384 signature\n   values\
    \ is:\n      ecdsa-with-SHA384  OBJECT IDENTIFIER  ::=  { iso(1) member-body(2)\n\
    \          us(840) ansi-X9-62(10045) signatures(4) ecdsa-with-sha2(3) 3 }\n  \
    \ When either the ecdsa-with-SHA256 or the ecdsa-with-SHA384 algorithm\n   identifier\
    \ is used, the AlgorithmIdentifier parameters field MUST be\n   absent.\n   When\
    \ signing, the ECDSA algorithm generates two values, commonly\n   called r and\
    \ s.  To transfer these two values as one signature, they\n   MUST be encoded\
    \ using the Ecdsa-Sig-Value type specified in RFC 3279\n   [PKIX1ALG]:\n     \
    \ Ecdsa-Sig-Value  ::=  SEQUENCE {\n        r  INTEGER,\n        s  INTEGER }\n"
- title: 4.  Key Management
  contents:
  - "4.  Key Management\n   CMS accommodates the following general key management\
    \ techniques: key\n   agreement, key transport, previously distributed symmetric\
    \ key-\n   encryption keys, and passwords.  In Suite B, ephemeral-static key\n\
    \   agreement MUST be used as described in Section 4.1.\n   When a key agreement\
    \ algorithm is used, a key-encryption algorithm is\n   also needed.  In Suite\
    \ B, the Advanced Encryption Standard (AES) Key\n   Wrap, as specified in RFC\
    \ 3394 [AESWRAP, SH], MUST be used as the\n   key-encryption algorithm.  AES Key\
    \ Wrap is discussed further in\n   Section 4.2.  The key-encryption key used with\
    \ the AES Key Wrap\n   algorithm is obtained from a key derivation function (KDF).\
    \  In Suite\n   B, there are two KDFs, one based on SHA-256 and one based on SHA-384.\n\
    \   These KDFs are discussed further in Section 4.3.\n"
- title: 4.1.  ECDH Key Agreement Algorithm
  contents:
  - "4.1.  ECDH Key Agreement Algorithm\n   This section specifies the conventions\
    \ employed by implementations\n   that support ECDH.  The direction set by RFC\
    \ 3278 [CMSECC] is\n   followed, but additional key derivation functions and key\
    \ wrap\n   algorithms are employed.  S/MIME is used in store-and-forward\n   communications,\
    \ which means that ephemeral-static ECDH is always\n   employed.  This means that\
    \ the message originator uses an ephemeral\n   ECDH key and that the message recipient\
    \ uses a static ECDH key, which\n   is obtained from an X.509 certificate.  In\
    \ Suite B, Security Level 1,\n   ephemeral-static ECDH MUST be used with the SHA-256\
    \ KDF, AES-128 Key\n   Wrap, and the P-256 elliptic curve.  In Suite B, Security\
    \ Level 2,\n   ephemeral-static ECDH MUST be used with the SHA-384 KDF, AES-256\
    \ Key\n   Wrap, and the P-384 elliptic curve.\n   Within the CMS enveloped-data\
    \ content type, key agreement algorithm\n   identifiers are located in the EnvelopedData\
    \ RecipientInfos\n   KeyAgreeRecipientInfo keyEncryptionAlgorithm field.\n   As\
    \ specified in RFC 3279 [PKIX1ALG], ECDSA and ECDH use the same\n   conventions\
    \ for carrying a subject public key in a certificate.\n   These conventions are\
    \ discussed in Section 3.\n   Ephemeral-static ECDH key agreement is defined in\
    \ [SEC1] and\n   [IEEE1363].  When using ephemeral-static ECDH, the EnvelopedData\n\
    \   RecipientInfos keyAgreeRecipientInfo field is used as follows:\n      version\
    \ MUST be 3.\n      originator MUST be the originatorKey alternative.  The\n \
    \     originatorKey algorithm field MUST contain the id-ecPublicKey\n      object\
    \ identifier (see Section 3) with NULL parameters.  The\n      originatorKey publicKey\
    \ field MUST contain the message\n      originator's ephemeral public key, which\
    \ is a DER-encoded ECPoint\n      (see Section 3).  The ECPoint SHOULD be represented\
    \ in\n      uncompressed form.\n      ukm can be present or absent.  However,\
    \ message originators SHOULD\n      include the ukm.  As specified in RFC 3852\
    \ [CMS], implementations\n      MUST support ukm message recipient processing,\
    \ so interoperability\n      is not a concern if the ukm is present or absent.\
    \  When present,\n      the ukm is used to ensure that a different key-encryption\
    \ key is\n      generated, even when the ephemeral private key is improperly used\n\
    \      more than once.  See [RANDOM] for guidance on generation of random\n  \
    \    values.\n      keyEncryptionAlgorithm MUST be one of the two algorithm\n\
    \      identifiers listed below, and the algorithm identifier parameter\n    \
    \  field MUST be present and identify the key wrap algorithm.  The\n      key\
    \ wrap algorithm denotes the symmetric encryption algorithm used\n      to encrypt\
    \ the content-encryption key with the pairwise key-\n      encryption key generated\
    \ using the ephemeral-static ECDH key\n      agreement algorithm (see Section\
    \ 4.3).  In Suite B, Security Level\n      1, the keyEncryptionAlgorithm MUST\
    \ be dhSinglePass-stdDH-\n      sha256kdf-scheme, and the keyEncryptionAlgorithm\
    \ parameter MUST be\n      a KeyWrapAlgorithm containing id-aes128-wrap (see Section\
    \ 4.2).\n      In Suite B, Security Level 2, the keyEncryptionAlgorithm MUST be\n\
    \      dhSinglePass-stdDH-sha384kdf-scheme, and the\n      keyEncryptionAlgorithm\
    \ parameter MUST be a KeyWrapAlgorithm\n      containing id-aes256-wrap (see Section\
    \ 4.2).  The algorithm\n      identifier for dhSinglePass-stdDH-sha256kdf-scheme\
    \ and\n      dhSinglePass-stdDH-sha384kdf-scheme are:\n         dhSinglePass-stdDH-sha256kdf-scheme\
    \  OBJECT IDENTIFIER  ::=\n             { iso(1) identified-organization(3) certicom(132)\n\
    \               schemes(1) 11 1 }\n         dhSinglePass-stdDH-sha384kdf-scheme\
    \  OBJECT IDENTIFIER  ::=\n             { iso(1) identified-organization(3) certicom(132)\n\
    \               schemes(1) 11 2 }\n      Both of these algorithm identifiers use\
    \ KeyWrapAlgorithm as the\n      type for their parameter:\n         KeyWrapAlgorithm\
    \  ::=  AlgorithmIdentifier\n      recipientEncryptedKeys contains an identifier\
    \ and an encrypted key\n      for each recipient.  The RecipientEncryptedKey\n\
    \      KeyAgreeRecipientIdentifier MUST contain either the\n      issuerAndSerialNumber\
    \ identifying the recipient's certificate or\n      the RecipientKeyIdentifier\
    \ containing the subject key identifier\n      from the recipient's certificate.\
    \  In both cases, the recipient's\n      certificate contains the recipient's\
    \ static ECDH public key.\n      RecipientEncryptedKey EncryptedKey MUST contain\
    \ the content-\n      encryption key encrypted with the ephemeral-static, ECDH-generated\n\
    \      pairwise key-encryption key using the algorithm specified by the\n    \
    \  KeyWrapAlgorithm (see Section 4.3).\n"
- title: 4.2.  AES Key Wrap
  contents:
  - "4.2.  AES Key Wrap\n   CMS offers support for symmetric key-encryption key management;\n\
    \   however, it is not used in Suite B.  Rather, the AES Key Wrap key-\n   encryption\
    \ algorithm, as specified in RFC 3394 [AESWRAP, SH], is used\n   to encrypt the\
    \ content-encryption key with a pairwise key-encryption\n   key that is generated\
    \ using ephemeral-static ECDH.  In Suite B,\n   Security Level 1, AES-128 Key\
    \ Wrap MUST be used as the key-encryption\n   algorithm.  In Suite B, Security\
    \ Level 2, AES-256 Key Wrap MUST be\n   used as the key-encryption algorithm.\n\
    \   Within the CMS enveloped-data content type, wrapped content-\n   encryption\
    \ keys are located in the EnvelopedData RecipientInfos\n   KeyAgreeRecipientInfo\
    \ RecipientEncryptedKeys encryptedKey field, and\n   key wrap algorithm identifiers\
    \ are located in the KeyWrapAlgorithm\n   parameters within the EnvelopedData\
    \ RecipientInfos\n   KeyAgreeRecipientInfo keyEncryptionAlgorithm field.\n   The\
    \ algorithm identifiers for AES Key Wrap are specified in RFC 3394\n   [SH], and\
    \ the ones needed for Suite B are repeated here:\n      id-aes128-wrap  OBJECT\
    \ IDENTIFIER  ::=  { joint-iso-itu-t(2)\n          country(16) us(840) organization(1)\
    \ gov(101) csor(3)\n          nistAlgorithm(4) aes(1) 5 }\n      id-aes256-wrap\
    \  OBJECT IDENTIFIER  ::=  { joint-iso-itu-t(2)\n          country(16) us(840)\
    \ organization(1) gov(101) csor(3)\n          nistAlgorithm(4) aes(1) 45 }\n"
- title: 4.3.  Key Derivation Functions
  contents:
  - "4.3.  Key Derivation Functions\n   CMS offers support for deriving symmetric\
    \ key-encryption keys from\n   passwords; however, password-based key management\
    \ is not used in\n   Suite B.  Rather, KDFs based on SHA-256 and SHA-384 are used\
    \ to\n   derive a pairwise key-encryption key from the shared secret produced\n\
    \   by ephemeral-static ECDH.  In Suite B, Security Level 1, the KDF\n   based\
    \ on SHA-256 MUST be used.  In Suite B, Security Level 2, KDF\n   based on SHA-384\
    \ MUST be used.\n   As specified in Section 8.2 of RFC 3278 [CMSECC], using ECDH\
    \ with the\n   CMS enveloped-data content type, the derivation of key-encryption\n\
    \   keys makes use of the ECC-CMS-SharedInfo type, which is repeated\n   here:\n\
    \      ECC-CMS-SharedInfo  ::=  SEQUENCE {\n        keyInfo      AlgorithmIdentifier,\n\
    \        entityUInfo  [0] EXPLICIT OCTET STRING OPTIONAL,\n        suppPubInfo\
    \  [2] EXPLICIT OCTET STRING }\n   In Suite B, the fields of ECC-CMS-SharedInfo\
    \ are used as follows:\n      keyInfo contains the object identifier of the key-encryption\n\
    \      algorithm that will be used to wrap the content-encryption key and\n  \
    \    NULL parameters.  In Suite B, Security Level 1, AES-128 Key Wrap\n      MUST\
    \ be used, resulting in {id-aes128-wrap, NULL}.  In Suite B,\n      Security Level\
    \ 2, AES-256 Key Wrap MUST be used, resulting in\n      {id-aes256-wrap, NULL}.\n\
    \      entityUInfo optionally contains a random value provided by the\n      message\
    \ originator.  If the ukm is present, then the entityUInfo\n      MUST be present,\
    \ and it MUST contain the ukm value.  If the ukm is\n      not present, then the\
    \ entityUInfo MUST be absent.\n      suppPubInfo contains the length of the generated\
    \ key-encryption\n      key, in bits, represented as a 32-bit unsigned number,\
    \ as\n      described in RFC 2631 [CMSDH].  In Suite B, Security Level 1, a\n\
    \      128-bit AES key MUST be used, resulting in 0x00000080.  In Suite\n    \
    \  B, Security Level 2, a 256-bit AES key MUST be used, resulting in\n      0x00000100.\n\
    \   ECC-CMS-SharedInfo is DER-encoded and used as input to the key\n   derivation\
    \ function, as specified in Section 3.6.1 of [SEC1].  Note\n   that ECC-CMS-SharedInfo\
    \ differs from the OtherInfo specified in\n   [CMSDH].  Here, a counter value\
    \ is not included in the keyInfo field\n   because the KDF specified in [SEC1]\
    \ ensures that sufficient keying\n   data is provided.\n   The KDF specified in\
    \ [SEC1] provides an algorithm for generating an\n   essentially arbitrary amount\
    \ of keying material from the shared\n   secret produced by ephemeral-static ECDH,\
    \ which is called Z for the\n   remainder of this discussion.  The KDF can be\
    \ summarized as:\n      KM = Hash ( Z || Counter || ECC-CMS-SharedInfo )\n   To\
    \ generate a key-encryption key, one or more KM blocks are\n   generated, incrementing\
    \ Counter appropriately, until enough material\n   has been generated.  The KM\
    \ blocks are concatenated left to right:\n      KEK = KM ( counter=1 ) || KM (\
    \ counter=2 ) ...\n   The elements of the KDF are used as follows:\n      Hash\
    \ is the one-way hash function, and it is either SHA-256 or\n      SHA-384 [SHA2].\
    \  In Suite B, Security Level 1, the SHA-256 MUST be\n      used.  In Suite B,\
    \ Security Level 2, SHA-384 MUST be used.\n      Z is the shared secret value\
    \ generated by ephemeral-static ECDH.\n      Leading zero bits MUST be preserved.\
    \  In Suite B, Security Level\n      1, Z MUST be exactly 256 bits.  In Suite\
    \ B, Security Level 2, Z\n      MUST be exactly 384 bits.\n      Counter is a\
    \ 32-bit unsigned number, represented in network byte\n      order.  Its initial\
    \ value MUST be 0x00000001 for any key\n      derivation operation.  In Suite\
    \ B, Security Level 1 and Security\n      Level 2, exactly one iteration is needed;\
    \ the Counter is not\n      incremented.\n      ECC-CMS-SharedInfo is composed\
    \ as described above.  It MUST be DER\n      encoded.\n   To generate a key-encryption\
    \ key, one KM block is generated, with a\n   Counter value of 0x00000001:\n  \
    \    KEK = KM ( 1 ) = Hash ( Z || Counter=1 || ECC-CMS-SharedInfo )\n   In Suite\
    \ B, Security Level 1, the key-encryption key MUST be the most\n   significant\
    \ 128 bits of the SHA-256 output value.  In Suite B,\n   Security Level 2, the\
    \ key-encryption key MUST be the most significant\n   256 bits of the SHA-384\
    \ output value.\n   Note that the only source of secret entropy in this computation\
    \ is Z.\n   The effective key space of the key-encryption key is limited by the\n\
    \   size of Z, in addition to any security level considerations imposed\n   by\
    \ the elliptic curve that is used.  However, if entityUInfo is\n   different for\
    \ each message, a different key-encryption key will be\n   generated for each\
    \ message.\n"
- title: 5.  AES CBC Content Encryption
  contents:
  - "5.  AES CBC Content Encryption\n   This section specifies the conventions employed\
    \ by implementations\n   that support content encryption using AES [AES] in Cipher\
    \ Block\n   Chaining (CBC) mode [MODES].  The conventions in RFC 3565 [CMSAES]\n\
    \   are followed.  In Suite B, Security Level 1, the AES-128 in CBC mode\n   MUST\
    \ be used for content encryption.  In Suite B, Security Level 2,\n   AES-256 in\
    \ CBC mode MUST be used.\n   Within the CMS enveloped-data content type, content\
    \ encryption\n   algorithm identifiers are located in the EnvelopedData\n   EncryptedContentInfo\
    \ contentEncryptionAlgorithm field.  The content\n   encryption algorithm is used\
    \ to encipher the content located in the\n   EnvelopedData EncryptedContentInfo\
    \ encryptedContent field.\n   The AES CBC content-encryption algorithm is described\
    \ in [AES] and\n   [MODES].  The algorithm identifier for AES-128 in CBC mode\
    \ is:\n      id-aes128-CBC  OBJECT IDENTIFIER  ::=  { joint-iso-itu-t(2)\n   \
    \       country(16) us(840) organization(1) gov(101) csor(3)\n          nistAlgorithm(4)\
    \ aes(1) 2 }\n   The algorithm identifier for AES-256 in CBC mode is:\n      id-aes256-CBC\
    \  OBJECT IDENTIFIER  ::=  { joint-iso-itu-t(2)\n          country(16) us(840)\
    \ organization(1) gov(101) csor(3)\n          nistAlgorithm(4) aes(1) 42 }\n \
    \  The AlgorithmIdentifier parameters field MUST be present, and the\n   parameters\
    \ field must contain AES-IV:\n      AES-IV  ::=  OCTET STRING (SIZE(16))\n   The\
    \ 16-octet initialization vector is generated at random by the\n   originator.\
    \  See [RANDOM] for guidance on generation of random\n   values.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document specifies the conventions for using\
    \ the NSA's Suite B\n   algorithms in S/MIME.  All of the algorithms have been\
    \ specified in\n   previous documents, although a few new algorithm identifiers\
    \ have\n   been assigned.\n   Two levels of security may be achieved using this\
    \ specification.\n   Users must consider their risk environment to determine which\
    \ level\n   is appropriate for their own use.\n   For signed and encrypted messages,\
    \ Suite B provides a consistent\n   level of security for confidentiality and\
    \ integrity of the message\n   content.\n   The security considerations in RFC\
    \ 3852 [CMS] discuss the CMS as a\n   method for digitally signing data and encrypting\
    \ data.\n   The security considerations in RFC 3370 [CMSALG] discuss\n   cryptographic\
    \ algorithm implementation concerns in the context of the\n   CMS.\n   The security\
    \ considerations in RFC 3278 [CMSECC] discuss the use of\n   elliptic curve cryptography\
    \ (ECC) in the CMS.\n   The security considerations in RFC 3565 [CMSAES] discuss\
    \ the use of\n   AES in the CMS.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [AES]       National Institute of Standards and\
    \ Technology, \"Advanced\n               Encryption Standard (AES)\", FIPS PUB\
    \ 197, November 2001.\n   [AESWRAP]   National Institute of Standards and Technology,\
    \ \"AES Key\n               Wrap Specification\", 17 November 2001.  [See\n  \
    \             http://csrc.nist.gov/encryption/kms/key-wrap.pdf]\n   [DSS]    \
    \   National Institute of Standards and Technology, \"Digital\n              \
    \ Signature Standard (DSS)\", FIPS PUB 186-2, January 2000.\n   [ECDSA]     American\
    \ National Standards Institute, \"Public Key\n               Cryptography For\
    \ The Financial Services Industry: The\n               Elliptic Curve Digital\
    \ Signature Algorithm (ECDSA)\", ANSI\n               X9.62-1998, 1999.\n   [CMS]\
    \       Housley, R., \"Cryptographic Message Syntax (CMS)\", RFC\n           \
    \    3852, July 2004.\n   [CMSAES]    Schaad, J., \"Use of the Advanced Encryption\
    \ Standard\n               (AES) Encryption Algorithm in Cryptographic Message\n\
    \               Syntax (CMS)\", RFC 3565, July 2003.\n   [CMSALG]    Housley,\
    \ R., \"Cryptographic Message Syntax (CMS)\n               Algorithms\", RFC 3370,\
    \ August 2002.\n   [CMSDH]     Rescorla, E., \"Diffie-Hellman Key Agreement Method\"\
    , RFC\n               2631, June 1999.\n   [CMSECC]    Blake-Wilson, S., Brown,\
    \ D., and P. Lambert, \"Use of\n               Elliptic Curve Cryptography (ECC)\
    \ Algorithms in\n               Cryptographic Message Syntax (CMS)\", RFC 3278,\
    \ April\n               2002.\n   [IEEE1363]  Institute of Electrical and Electronics\
    \ Engineers,\n               \"Standard Specifications for Public Key Cryptography\"\
    ,\n               IEEE Std 1363, 2000.\n   [MODES]     National Institute of Standards\
    \ and Technology, \"DES\n               Modes of Operation\", FIPS Pub 81, 2 December\
    \ 1980.\n   [MSG]       Ramsdell, B., \"Secure/Multipurpose Internet Mail\n  \
    \             Extensions (S/MIME) Version 3.1 Message Specification\",\n     \
    \          RFC 3851, July 2004.\n   [PKIX1]     Housley, R., Polk, W., Ford, W.,\
    \ and D. Solo, \"Internet\n               X.509 Public Key Infrastructure Certificate\
    \ and\n               Certificate Revocation List (CRL) Profile\", RFC 3280,\n\
    \               April 2002.\n   [PKIX1ALG]  Bassham, L., Polk, W., and R. Housley,\
    \ \"Algorithms and\n               Identifiers for the Internet X.509 Public Key\n\
    \               Infrastructure Certificate and Certificate Revocation\n      \
    \         List (CRL) Profile\", RFC 3279, April 2002.\n   [SEC1]      Standards\
    \ for Efficient Cryptography Group, \"Elliptic\n               Curve Cryptography\"\
    , 2000.  [See http://www.secg.org/\n               collateral/sec1.pdf.]\n   [SH]\
    \        Schaad, J., and R. Housley, \"Advanced Encryption Standard\n        \
    \       (AES) Key Wrap Algorithm\", RFC 3394, September 2002.\n   [SHA2]     \
    \ National Institute of Standards and Technology, \"Secure\n               Hash\
    \ Standard\", FIPS 180-2, 1 August 2002.\n   [STDWORDS]  S. Bradner, \"Key words\
    \ for use in RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n   [X.208-88]  CCITT.  Recommendation X.208: Specification\
    \ of Abstract\n               Syntax Notation One (ASN.1).  1988.\n   [X.209-88]\
    \  CCITT.  Recommendation X.209: Specification of Basic\n               Encoding\
    \ Rules for Abstract Syntax Notation One (ASN.1).\n               1988.\n   [X.509-88]\
    \  CCITT.  Recommendation X.509: The Directory -\n               Authentication\
    \ Framework.  1988.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [EH]        Eastlake 3rd, D. and T. Hansen,\
    \ \"US Secure Hash\n               Algorithms (SHA and HMAC-SHA)\", RFC 4634,\
    \ July 2006.\n   [RANDOM]    Eastlake, D., 3rd, Schiller, J., and S. Crocker,\n\
    \               \"Randomness Requirements for Security\", BCP 106, RFC\n     \
    \          4086, June 2005.\n   [SuiteB]    National Security Agency, \"Fact Sheet\
    \ NSA Suite B\n               Cryptography\", July 2005.  [See http://www.nsa.gov/ia/\n\
    \               industry/crypto_Suite_b.cfm?MenuID=10.2.7)\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Russell Housley\n   Vigil Security, LLC\n   918 Spring\
    \ Knoll Drive\n   Herndon, VA 20170\n   USA\n   EMail: housley@vigilsec.com\n\
    \   Jerome A. Solinas\n   National Information Assurance Laboratory\n   National\
    \ Security Agency\n   9800 Savage Road\n   Fort George G. Meade, MD 20755\n  \
    \ USA\n   EMail: jasolin@orion.ncsc.mil\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
