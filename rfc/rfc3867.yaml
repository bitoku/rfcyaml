- title: __initial_text__
  contents:
  - "       Payment Application Programmers Interface (API) for v1.0\n           \
    \      Internet Open Trading Protocol (IOTP)\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).\n"
- title: Abstract
  contents:
  - "Abstract\n   The Internet Open Trading Protocol (IOTP) provides a data exchange\n\
    \   format for trading purposes while integrating existing pure payment\n   protocols\
    \ seamlessly.  This motivates the multiple layered system\n   architecture which\
    \ consists of at least some generic IOTP application\n   core and multiple specific\
    \ payment modules.\n   This document addresses a common interface between the\
    \ IOTP\n   application core and the payment modules, enabling the\n   interoperability\
    \ between these kinds of modules.  Furthermore, such\n   an interface provides\
    \ the foundations for a plug-in-mechanism in\n   actual implementations of IOTP\
    \ application cores.\n   Such interfaces exist at the Consumers', the Merchants'\
    \ and the\n   Payment Handlers' installations connecting the IOTP application\
    \ core\n   and the payment software components/legacy systems.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n       1.1.  General payment phases . . . . . . . . . . . .\
    \ . . . . .  5\n       1.2.  Assumptions. . . . . . . . . . . . . . . . . . .\
    \ . . . .  6\n   2.  Message Flow . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . 12\n       2.1.  Authentication Documentation Exchange. . . . . . . .\
    \ . . 15\n       2.2.  Brand Compilation. . . . . . . . . . . . . . . . . . .\
    \ . 17\n       2.3.  Brand Selection. . . . . . . . . . . . . . . . . . . . .\
    \ 21\n       2.4.  Successful Payment . . . . . . . . . . . . . . . . . . . 24\n\
    \       2.5.  Payment Inquiry. . . . . . . . . . . . . . . . . . . . . 29\n  \
    \     2.6.  Abnormal Transaction Processing. . . . . . . . . . . . . 30\n    \
    \         2.6.1.  Failures and Cancellations . . . . . . . . . . . 30\n      \
    \       2.6.2.  Resumption . . . . . . . . . . . . . . . . . . . 32\n       2.7.\
    \  IOTP Wallet Initialization . . . . . . . . . . . . . . . 33\n       2.8.  Payment\
    \ Software Management. . . . . . . . . . . . . . . 34\n   3.  Mutuality. . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . 34\n       3.1.  Error Codes.\
    \ . . . . . . . . . . . . . . . . . . . . . . 38\n       3.2.  Attributes and\
    \ Elements. . . . . . . . . . . . . . . . . 48\n       3.3.  Process States .\
    \ . . . . . . . . . . . . . . . . . . . . 61\n             3.3.1.  Merchant .\
    \ . . . . . . . . . . . . . . . . . . . 61\n             3.3.2.  Consumer . .\
    \ . . . . . . . . . . . . . . . . . . 63\n             3.3.3.  Payment Handler.\
    \ . . . . . . . . . . . . . . . . 65\n   4.  Payment API Calls. . . . . . . .\
    \ . . . . . . . . . . . . . . . 66\n       4.1.  Brand Compilation Related API\
    \ Calls. . . . . . . . . . . 66\n             4.1.1.  Find Accepted Payment Brand.\
    \ . . . . . . . . . . 66\n             4.1.2.  Find Accepted Payment Protocol\
    \ . . . . . . . . . 68\n             4.1.3.  Get Payment Initialization Data.\
    \ . . . . . . . . 70\n             4.1.4.  Inquire Authentication Challenge .\
    \ . . . . . . . 72\n             4.1.5.  Authenticate . . . . . . . . . . . .\
    \ . . . . . . 73\n             4.1.6.  Check Authentication Response. . . . .\
    \ . . . . . 74\n       4.2.  Brand Selection Related API Calls. . . . . . . .\
    \ . . . . 76\n             4.2.1.  Find Payment Instrument. . . . . . . . . .\
    \ . . . 76\n             4.2.2.  Check Payment Possibility. . . . . . . . . .\
    \ . . 78\n       4.3.  Payment Transaction Related API calls. . . . . . . . .\
    \ . 80\n             4.3.1.  Start Payment Consumer . . . . . . . . . . . . .\
    \ 80\n             4.3.2.  Start Payment Payment Handler. . . . . . . . . . 82\n\
    \             4.3.3.  Resume Payment Consumer. . . . . . . . . . . . . 84\n  \
    \           4.3.4.  Resume Payment Payment Handler . . . . . . . . . 85\n    \
    \         4.3.5.  Continue Process . . . . . . . . . . . . . . . . 86\n      \
    \       4.3.6.  Change Process State . . . . . . . . . . . . . . 88\n       4.4.\
    \  General Inquiry API Calls. . . . . . . . . . . . . . . . 89\n             4.4.1.\
    \  Remove Payment Log . . . . . . . . . . . . . . . 90\n             4.4.2.  Payment\
    \ Instrument Inquiry . . . . . . . . . . . 90\n             4.4.3.  Inquire Pending\
    \ Payment. . . . . . . . . . . . . 92\n       4.5.  Payment Related Inquiry API\
    \ Calls. . . . . . . . . . . . 93\n             4.5.1.  Check Payment Receipt.\
    \ . . . . . . . . . . . . . 93\n             4.5.2.  Expand Payment Receipt .\
    \ . . . . . . . . . . . . 94\n             4.5.3.  Inquire Process State. . .\
    \ . . . . . . . . . . . 96\n             4.5.4.  Start Payment Inquiry. . . .\
    \ . . . . . . . . . . 97\n             4.5.5.  Inquire Payment Status . . . .\
    \ . . . . . . . . . 98\n       4.6.  Other API Calls. . . . . . . . . . . . .\
    \ . . . . . . . . 99\n             4.6.1.  Manage Payment Software. . . . . .\
    \ . . . . . . . 99\n   5.  Call Back Function . . . . . . . . . . . . . . . .\
    \ . . . . . .101\n   6.  Security Considerations. . . . . . . . . . . . . . .\
    \ . . . . .103\n   7.  References . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .103\n       7.1.  Normative References . . . . . . . . . . . . . . .\
    \ . . .103\n       7.2.  Informative References . . . . . . . . . . . . . . .\
    \ . .104\n   Acknowledgement. . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .105\n   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . . . .105\n\
    \   Full Copyright Statement . . . . . . . . . . . . . . . . . . . . .106\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Common network technologies are based on standardized and\
    \ established\n   Internet technologies.  The Internet technologies provide mechanisms\n\
    \   and tools for presentation, application development, network\n   infrastructure,\
    \ security, and basic data exchange.\n   Due to the presence of already installed\
    \ trading roles' systems with\n   their own interfaces (Internet shop, order management,\
    \ payment,\n   billing, and delivery management systems, or financial institute's\n\
    \   legacy systems), IOTP has been limited to the common external\n   interface\
    \ over the Internet. However, some of these internal\n   interfaces might be also\
    \ standardized for better integration of IOTP\n   aware components with of the\
    \ existing infrastructure and its cost\n   effective reuse. For more information\
    \ on IOTP, see [IOTP] and\n   [IOTPBOOK].\n   The typical Payment Handlers (i.e.,\
    \ financial institutes or near-bank\n   organizations) as well as Merchants require\
    \ an IOTP aware application\n   that easily fits into their existing financial\
    \ infrastructure.  The\n   Payment Handler might even insist on the reuse of special\
    \ in-house\n   solutions for some subtasks of the IOTP aware application, e.g.,\n\
    \   reflecting their cryptography modules, gateway interfaces, or\n   physical\
    \ environment.  Therefore, their IOTP aware implementation\n   really requires\
    \ such clear internal interfaces.\n   More important, consumers demand modularization\
    \ and clear internal\n   interfaces: Their IOTP application aims at the support\
    \ of multiple\n   payment methods.  Consumers prefer the flexible use of different\n\
    \   seamless integrating payment methods within one trading application\n   with\
    \ nearly identical behavior and user interface.  The existence of\n   a well-defined\
    \ interface enables payment software developers to bolt\n   on their components\
    \ to other developer's general IOTP Application\n   Core.\n   Initially, this\
    \ consideration leads to the two-level layered view of\n   the IOTP software for\
    \ each role, consisting of:\n   o  some generic IOTP system component, the so-called\
    \ IOTP application\n      core - providing IOTP based gateway services and generic\
    \ business\n      logic and\n   o  the trading roles' specific back-end systems\
    \ implementing the\n      specific trading transaction types' functionality.\n\
    \   In order to isolate the changes on the infrastructure, the IOTP\n   trading\
    \ application has been three-layered:\n   o  the IOTP Application Core processes\
    \ the generic parts of the IOTP\n      transaction and holds the connection to\
    \ the Internet,\n   o  the Existing Legacy System or Existing Payment Software\
    \ which\n      processes the actual transaction type, and particular payment\n\
    \      transaction, and\n   o  the IOTP Middle-ware or IOTP Payment Bridge which\
    \ glues the other\n      two possibly incompatible components.  It brokers between\
    \ the\n      specific interface of the Existing Legacy System and the\n      standardized\
    \ interfaces of the IOTP Application Core.\n   As IOTP extends payment schemes\
    \ to a trading scheme, primarily, this\n   document focuses on payment modules,\
    \ i.e., the interface between the\n   IOTP Payment Bridge and the IOTP Application\
    \ Core.  It provides a\n   standard method for exchanging payment protocol messages\
    \ between the\n   parties involved in a payment.  But, it does not specify any\n\
    \   interface for order or delivery processing.\n   Such a Payment Application\
    \ Programmers Interface (API) must suit for\n   a broad range of payment methods:\
    \ (1) software based like Credit Card\n   SET or CyberCoin, (2) chip card based\
    \ like Mondex or GeldKarte, and\n   (3) mimicries of typical and traditional payment\
    \ methods like money\n   transfer, direct debit, deposit, withdrawal, money exchange\
    \ and value\n   points.  It should support both payments with explicit consumer\n\
    \   acknowledge and automatic repeated payments, which have been consumer\n  \
    \ approved in advance.  For more information on SET, see [SET].\n   The following\
    \ discussion focuses on the Consumer's point of view and\n   uses the associated\
    \ terminology.  When switching to Merchants' or\n   Delivery Handlers' IOTP aware\
    \ applications, the payment related\n   components should be implicitly renamed\
    \ by Existing Legacy Systems to\n   the IOTP Middle-ware.\n   The next two sub-sections\
    \ describe the general payment scenario and\n   several assumptions about the\
    \ coarsely sketched software components.\n   Section 2 illustrates the payment\
    \ transaction progress and message\n   flow of different kinds of transaction\
    \ behavior.  Sections 3 to 4\n   provide the details of the API functions and\
    \ Section 5 elaborates the\n   call back interface.\n"
- title: 1.1.  General payment phases
  contents:
  - "1.1.  General payment phases\n   The following table sketches the four logical\
    \ steps of many payment\n   schemes.  The preceding agreements about the goods,\
    \ payment method,\n   purchase amount, or delivery rules are omitted.\n   Payment\
    \ State  Party             Example Behavior\n   -------------  -----         \
    \    ----------------\n   Mutual         Payment Handler   Generation of identification\n\
    \   Authentication                   request, solvency request, or\n   and   \
    \                           some nonce\n   Initialization Consumer          Responses\
    \ to the requests and\n                                    generation of own nonce\n\
    \   Authorization  Payment Handler   Generation of the authorization\n       \
    \                             request (for consumer)\n                  Consumer\
    \          Agreement to payment (by\n                                    reservation\
    \ of the Consumer's\n                                    e-money)\n          \
    \        Payment Handler   Acceptance or rejection of the\n                  \
    \                  agreement (consumer's\n                                   \
    \ authorization response),\n                                    generation of\
    \ the authorization\n                                    request (for issuer/acquirer),\n\
    \                                    and processing of its response\n   Capture\
    \                          Generation of the capture\n                       \
    \             request (for issuer/acquirer)\n                  Consumer      \
    \    Is charged\n                  Payment Handler   Acceptance or rejection of\
    \ the\n                                    e-money, close of the payment\n   \
    \                                 transaction\n   Reversal                   \
    \      On rejection (online/delayed):\n                                    generation\
    \ of the reversal data\n                  Consumer          Receipt of the refund\n\
    \   However, some payment schemes:\n   o  limit themselves to one-sided authentication,\n\
    \   o  perform off-line authorization without any referral to any\n      issuer/acquirer,\n\
    \   o  apply capture processing in batch mode, or\n   o  do not distinguish between\
    \ authorization and capture,\n   o  lack an inbound mechanism for reversals or\
    \ implement a limited\n      variant.\n   This model applies not only to payments\
    \ at the typical points of\n   sales but extends to refunds, deposits, withdrawals,\
    \ electronic\n   cheques, direct debits, and money transfers.\n"
- title: 1.2.  Assumptions
  contents:
  - "1.2.  Assumptions\n   In outline, the IOTP Payment Bridge processes some input\
    \ sequence of\n   payment protocol messages being forwarded by the IOTP Application\n\
    \   Core.  It (1) disassembles the messages, (2) maps them onto the\n   formats\
    \ of the Existing Payment Software, (3) assembles its\n   responses, and (4) returns\
    \ another sequence of payment protocol\n   messages that is mostly intended for\
    \ transparent transmission by the\n   IOTP Application Core to some IOTP aware\
    \ remote party.  Normally,\n   this process continues between the two parties\
    \ until the Payment\n   Handler's Payment API signals the payment termination.\n\
    \   Exceptionally, each system component may signal failures.\n   The relationship\
    \ between the aforementioned components is illustrated\n   in the following figure.\
    \  These components might be related to each\n   other in a flexible n-to-m-manner:\n\
    \   o  One IOTP Application Core may manage multiple IOTP Payment Bridges\n  \
    \    and the latter might be shared between multiple IOTP Application\n      Cores.\n\
    \   o  Each Payment Bridge may manage multiple Existing Payment Software\n   \
    \   modules and the latter might be shared between multiple Payment\n      Bridges.\n\
    \   o  Each Existing Payment Software may manage multiple payment schemes\n  \
    \    (e.g., SET) and the latter might be supported by multiple Existing\n    \
    \  Payment Software modules.  For more information on SET see [SET].\n   o  Each\
    \ payment scheme may support multiple payment instruments\n      (e.g., particular\
    \ card) or methods (e.g., Visa via SET) and the\n      latter might be shared\
    \ by multiple Existing Payment Software\n      Components.\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \   IOTP client (consumer)  <--------------->  IOTP server (merchant)\n   (  \
    \    contains             Internet       (      contains\n   IOTP Application\
    \ Core)                     IOTP Application Core)\n         ^               \
    \                           ^\n         | IOTP Payment                       \
    \      | IOTP Payment\n         |    API                                   | \
    \   API\n         v                                          v\n   IOTP Payment\
    \ Bridge                        IOTP Payment Bridge\n        ^               \
    \                            ^\n        | Existing Payment APIs, e.g.,       \
    \       |\n        | SET, Mondex, etc.                         |\n        v  \
    \                                         v\n   Existing Payment Software    \
    \           Existing Payment Software\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \                 Figure 1: Relationship of the Components\n   The Payment API\
    \ considers the following transaction types of Baseline\n   IOTP:\n      o  Baseline\
    \ Purchase,\n      o  Baseline Refund,\n      o  Baseline Value Exchange,\n  \
    \    o  Baseline Withdrawal, and\n      o  Baseline (Payment) Inquiry.\n   For\
    \ more information on Baseline IOTP, see [IOTP] and [IOTPBOOK].\n   First, the\
    \ authors' vision of the IOTP aware application's and its\n   main components'\
    \ capabilities are clarified: On the one hand, the\n   Payment API should be quite\
    \ powerful and flexible for sufficient\n   connection of the generic and specific\
    \ components.  On the other\n   hand, the Payment API should not be overloaded\
    \ with nice-to-haves\n   being unsupported by Existing Payment Software.\n   Despite\
    \ the strong similarities on the processing of successful\n   payments, failure\
    \ resolution and inquiry capabilities differ\n   extremely among different payment\
    \ schemes.  These aspects may even\n   vary between different payment instrument\
    \ using the same payment\n   schemes.  Additionally, the specific requirements\
    \ of Consumers,\n   Merchants and Payment Handlers add variance and complexity.\n\
    \   Therefore, it is envisioned that the IOTP Application Core provides\n   only\
    \ very basic inquiry mechanisms while complex and payment scheme\n   specific\
    \ inquiries, failure analysis, and failure resolution are\n   fully deferred to\
    \ the actual Existing Payment Software - including\n   the user interface.\n \
    \  The IOTP Application Core processes payments transparently, i.e., it\n   forwards\
    \ the wrapped payment scheme specific messages to the\n   associated IOTP Payment\
    \ Bridge/Existing Payment Software.  The\n   Existing Payment Software might even\
    \ use these messages for inbound\n   failure resolution.  It reports only the\
    \ final payment status to the\n   IOTP Application Core or some intermediate -\
    \ might be also final -\n   status on abnormal interruption.\n   The IOTP Application\
    \ Core implements the generic and payment scheme\n   independent part of the IOTP\
    \ transaction processing and provides the\n   suitable user interface.  Focusing\
    \ on payment related tasks, it\n   o  manages the registered IOTP Payment Bridges\
    \ and provides a\n      mechanism for their registration - the latter is omitted\
    \ by this\n      document.\n   o  assumes that any IOTP Payment Bridge is a passive\
    \ component, i.e.,\n      it strictly awaits input data and generates one response\
    \ to each\n      request,\n   o  supports the payment negotiation (Consumer: selection\
    \ of the\n      actual payment instrument or method; Merchant: selection of the\n\
    \      payment methods being offered to the Consumer) preceding the\n      payment\
    \ request,\n   o  requests additional payment specific support from the Existing\n\
    \      Payment Software via the selected and registered the IOTP Payment\n   \
    \   Bridge,\n   o  initializes and terminates the Existing Payment Software via\
    \ the\n      IOTP Payment Bridge,\n   o  inquires authentication data (for subsequent\
    \ request or response)\n      from the Existing Payment Software, specific authentication\n\
    \      component - omitted in this document - or Consumer (by a suitable\n   \
    \   user interface),\n   o  supervises the online transaction process and traces\
    \ its progress,\n   o  stores the transaction data being exchanged over the IOTP\
    \ wire -\n      payment scheme specific data is handled transparently,\n   o \
    \ relates each payment transaction with multiple payment parameters\n      (IOTP\
    \ Transaction Identifier, Trading Protocol Options, Payment\n      Instrument/Method,\
    \ Offer Response, IOTP Payment Bridge, and Wallet\n      Identifier, associated\
    \ remote Parties).  The relation might be\n      lowered to the party's Payment\
    \ Identifier, IOTP Payment Bridge,\n      Wallet Identifier, and the remote parties\
    \ when the actual payment\n      transaction has been successfully started.\n\
    \   o  implements a payment transaction progress indicator,\n   o  enables the\
    \ inquiry of pending and completed payment transactions,\n   o  implements generic\
    \ dialogs, e.g., brand selection, payment\n      acknowledge, payment suspension\
    \ / cancellation, receipt\n      visualization, basic transaction inquiry, balance\
    \ inquiry, or\n      receipt validation,\n   o  defers payment specific processing,\
    \ supervision, validation, and\n      error resolution to the Existing Payment\
    \ Software.  It is\n      expected, that the Existing Payment Software will try\
    \ to resolve\n      many errors first by the extended exchange of Payment Exchange\n\
    \      messages.  The most significant and visible failures arise from\n     \
    \ sudden unavailability or lapses of the local or opposing payment\n      component.\n\
    \   o  supports the invocation of any Existing Payment Software in an\n      interactive\
    \ mode, which might be used (1) for the payment scheme\n      specific post-processing\
    \ of a (set of) payment transactions, (2)\n      for the analysis of a payment\
    \ instrument, (3) for the registration\n      of a new payment instrument/scheme,\
    \ or (4) re-configuration of a\n      payment instrument/scheme.\n   o  exports\
    \ call back functions for use by the IOTP Payment Bridge or\n      Existing Payment\
    \ Software for progress indication.\n   In addition, the IOTP Application Core\n\
    \   o  manages the IOTP message components and IOTP message blocks\n      exchanged\
    \ during the transaction which may be referenced and\n      accessed during the\
    \ processing of subsequent messages, e.g., for\n      signature verification.\
    \  In particular, it stores named Packaged\n      Content elements exchanged during\
    \ payments.\n   o  manages several kinds of identifiers, i.e., transaction, message,\n\
    \      component, and block identifiers,\n   o  implements a message caching mechanism,\n\
    \   o  detects time-outs at the protocol and API level reflecting the\n      communication\
    \ with both the IOTP aware remote party and the\n      Payment API aware local\
    \ periphery, e.g., chip card (reader) may\n      raise time-outs.\n   However,\
    \ the IOTP Payment Bridge and Existing Payment Software do not\n   have to rely\
    \ on all of these IOTP Application Core's capabilities.\n   E.g., some Consumer's\
    \ Existing Payment Software may refuse the\n   disclosure of specific payment\
    \ instruments at brand selection time\n   and may delay this selection to the\
    \ \"Check Payment Possibility\"\n   invocation using its own user interface.\n\
    \   The IOTP Payment Bridge's capabilities do not only deal with actual\n   payments\
    \ between the Consumer and the Payment Handler but extend to\n   the following:\n\
    \   o  translation and (dis)assemblage of messages between the formats of\n  \
    \    the IOTP Payment API and those of the Existing Payment Software.\n      Payment\
    \ API requests and response are strictly 1-to-1 related.\n   o  Consumer's payment\
    \ instrument selection by the means of an\n      unsecured/public export of the\
    \ relationship of payment brands,\n      payment protocols, and payment instruments\
    \ (identifiers).\n      Generally, this includes not just the brand (Mondex, GeldKarte,\n\
    \      etc.) but also which specific instance of the instrument and\n      currency\
    \ to use (e.g., which specific Mondex card and which\n      currency of all those\
    \ available).\n   However, some Existing Payment Software may defer the selection\
    \ of\n   the payment instrument to the actual payment carrying-out or it may\n\
    \   even lack any management of payment instruments.  E.g., chip card\n   based\
    \ payment methods may offer - Point of Sale like - implicit\n   selection of the\
    \ payment instrument by simple insertion of the chip\n   card into the chip card\
    \ reader or it interrogates the inserted card\n   and requests an acknowledge\
    \ (or selection) of the detected payment\n   instrument(s).\n   o  payment progress\
    \ checks, e.g., is there enough funds available to\n      carry out the purchase,\
    \ or enough funds left for the refund,\n   o  IOTP Payment Receipt checks which\
    \ might be performed over its\n      Packaged Content or by other means.\n   o\
    \  recoding of payment scheme specific receipts into a format which\n      can\
    \ be displayed to the user or printed,\n   o  cancellation of payment, even though\
    \ it is not complete,\n   o  suspension and resumption of payment transactions.\
    \  Two kinds of\n      failures the Existing Payment Software might deal with\
    \ are (1) the\n      time-out of the network connection and (2) lack of funds.\
    \  For\n      resolution, the IOTP Application Core may try the suspension with\n\
    \      a view to later possible resumption.\n   o  recording the payment progress\
    \ and status on a database.  E.g.,\n      information about pending payments might\
    \ be used to assist their\n      continuation when the next payment protocol message\
    \ is received.\n   o  payment transaction status inquiry, so that the inquirer\
    \ - IOTP\n      Application Core or User - can determine the appropriate next\n\
    \      step.\n   o  balance inquiry or transaction history, e.g., consumers may\n\
    \      interrogate their chip card based payment instrument or remotely\n    \
    \  administer some account in advance of a payment transaction\n      acknowledge,\n\
    \   o  inquiry on abnormal interrupted payment transactions, which might\n   \
    \   be used by the IOTP Application Core to resolve these pending\n      transactions\
    \ at startup (after power failure).\n   o  payment progress indication.  This\
    \ could be used to inform the end\n      user of details on what is happening\
    \ with the payment.\n   o  payment method specific authentication methods.\n \
    \  Existing Payment Software may not provide full support of these\n   capabilities.\
    \  E.g., some payment schemes may not support or may even\n   prevent the explicit\
    \ transaction cancellation at arbitrary phases of\n   the payment process.  In\
    \ this case, the IOTP Payment Bridge has to\n   implement at least skeletons that\
    \ signal such lack of support by the\n   use of specific error codes (see below).\n\
    \   The Existing Payment Software's capabilities vary extremely.  It\n   o  supports\
    \ payment scheme specific processing, supervision,\n      validation, and error\
    \ resolution.  It is expected, that many\n      errors are tried to be resolved\
    \ first by the extended exchange of\n      Payment Exchange messages.\n   o  provides\
    \ hints for out-of-band failure resolution on failed\n      inbound resolution\
    \ - inbound resolution is invisible to the IOTP\n      Application Core.\n   o\
    \  may implement arbitrary transaction data management and inquiry\n      mechanisms\
    \ ranging from no transaction recording, last transaction\n      recording, chip\
    \ card deferred transaction recording, simple\n      transaction history to sophisticated\
    \ persistent data management\n      with flexible user inquiry capabilities. \
    \ The latter is required\n      by Payment Handlers for easy and cost effective\
    \ failure\n      resolution.\n   o  implements the payment scheme specific dialog\
    \ boxes.\n   Even the generic dialog boxes of the IOTP Application Core might\
    \ be\n   unsuitable: Particular (business or scheme) rules may require some\n\
    \   dedicated appearance / structure / content or the dialog boxes, may\n   prohibit\
    \ the unsecured export of payment instruments, or may\n   prescribe the pass phrase\
    \ input under its own control.\n"
- title: 2.  Message Flow
  contents:
  - "2.  Message Flow\n   The following lists all functions of the IOTP Payment API:\n\
    \      o  Brand Compilation Related API Functions\n   \"Find Accepted Payment\
    \ Brand\" identifies the accepted payment brands\n   for any indicated currency\
    \ amount.\n   \"Find Accepted Payment Protocol\" identifies the accepted payment\n\
    \   protocols for any indicated currency amount (and brand) and returns\n   payment\
    \ scheme specific packaged content for brand selection\n   purposes.\n   This\
    \ function might be used in conjunction with the aforementioned\n   function or\
    \ called without any brand identifier.\n   \"Get Payment Initialization Data\"\
    \ returns additional payment scheme\n   specific packaged content for payment\
    \ processing by the payment\n   handler.\n   \"Inquire Authentication Challenge\"\
    \ returns the payment scheme\n   specific authentication challenge value.\n  \
    \ \"Check Authentication Response\" verifies the returned payment scheme\n   specific\
    \ authentication response value.\n   \"Change Process State\" is used (here only)\
    \ for abnormal termination.\n   (cf. Payment Processing Related API Functions).\n\
    \      o  Brand Selection Related API Functions\n   \"Find Payment Instrument\"\
    \ identifies which instances of a payment\n   instrument of a particular payment\
    \ brand are available for use in a\n   payment.\n   \"Check Payment Possibility\"\
    \ checks whether a specific payment\n   instrument is able to perform a payment.\n\
    \   \"Authenticate\" forwards any payment scheme specific authentication\n   data\
    \ to the IOTP Payment Bridge for processing.\n   \"Change Process State\" is used\
    \ (here only) for abnormal termination.\n   (cf. Payment Processing Related API\
    \ Functions).\n      o  Payment Processing Related API Functions\n   \"Start or\
    \ Resume Payment Consumer/Payment Handler\" initiate or resume\n   a payment transaction.\
    \  There exist specific API functions for the\n   two trading roles Consumer and\
    \ Payment Handler.\n   \"Continue Process\" forwards payment scheme specific data\
    \ to the\n   Existing Payment Software and returns more payment scheme specific\n\
    \   data for transmission to the counter party.\n   \"Change Process State\" changes\
    \ the current status of payment\n   transactions.  Typically, this call is used\
    \ for termination or\n   suspension without success.\n      o  General Inquiry\
    \ API Functions\n   \"Remove Payment Log\" notifies the IOTP Payment Bridge that\
    \ a\n   particular entry has been removed from the Payment Log of the IOTP\n \
    \  Application Core.\n   \"Payment Instrument Inquiry\" retrieves the properties\
    \ of Payment\n   Instruments.\n   \"Inquire Pending Payment\" reports any abnormal\
    \ interrupted payment\n   transaction known by the IOTP Payment Bridge.\n   Payment\
    \ Processing Related Inquiry API Functions\n   \"Check Payment Receipt\" checks\
    \ the consistency and validity of IOTP\n   Payment Receipts, received from the\
    \ Payment Handler or returned by\n   \"Inquire Process State\" API calls.  Typically,\
    \ this function is\n   called by the Consumer during the final processing of payment\n\
    \   transactions.  Nevertheless, this check might be advantageous both\n   for\
    \ Consumers and Payment Handlers on failure resolution.\n   \"Expand Payment Receipt\"\
    \ expands the Packaged Content of IOTP Payment\n   Receipts as well as payment\
    \ scheme specific payment receipts into a\n   form which can be used for display\
    \ or printing purposes.\n   \"Inquire Process State\" responds with the payment\
    \ state and the IOTP\n   Payment Receipt Component.  Normally, this function is\
    \ called by the\n   Payment Handler for final processing of the payment transaction.\n\
    \   \"Start Payment Inquiry\" prepares the remote inquiry of the payment\n   transaction\
    \ status and responds with payment scheme specific data\n   that might be needed\
    \ by the Payment Handler for the Consumer\n   initiated inquiry processing.\n\
    \   \"Inquire Payment Status\" is called by the Payment Handler on Consumer\n\
    \   initiated inquiry requests.  This function returns the payment scheme\n  \
    \ specific content of the Inquiry Response Block.\n   \"Continue Process\" and\
    \ \"Change Process State\" (cf. Payment Processing\n   Related API Calls)\n  \
    \    o  Other API Functions\n   \"Manage Payment Software\" enables the immediate\
    \ activation of the\n   Existing Payment Software.  Further user input is under\
    \ control of\n   the Existing Payment Software.\n   \"Call Back\" provides a general\
    \ interface for the visualization of\n   transaction progress by the IOTP Application\
    \ Core.\n   The following table shows which API functions must (+), should (#),\n\
    \   or might (?) be implemented by which Trading Roles.\n   API function     \
    \             Consumer  Payment Handler  Merchant\n   ------------           \
    \       --------  ---------------  --------\n   Find Accepted Payment Brand  \
    \                               +\n   Find Accepted Payment Protocol         \
    \                     #\n   Find Payment Instrument          +\n   Get Payment\
    \ Initialization Data                             +\n   Check Payment Possibility\
    \        +\n   Start Payment Consumer           +\n   Start Payment Payment Handler\
    \                  +\n   Resume Payment Consumer          #\n   Resume Payment\
    \ Payment Handler                 #\n   Continue Process                 +   \
    \          +\n   Inquire Process State            +             +            ?\n\
    \   Change Process State             +             +            ?\n   Check Payment\
    \ Receipt            +             ?\n   Expand Payment Receipt           #  \
    \           ?\n   Remove Payment Log               ?             ?           \
    \ ?\n   Inquire Authentication Challenge                            ?\n   Authenticate\
    \                     +\n   Check Authentication Response                    \
    \           ?\n   Payment Instrument Inquiry       ?\n   Inquire Pending Payment\
    \          #             #\n   Start Payment Inquiry            ?\n   Inquire\
    \ Payment Status                         ?\n   Manage Payment Software       \
    \   #             ?            ?\n   Call Back                        #\n    \
    \    Table 1: Requirements on API Functions by the Trading Roles\n   The next\
    \ sections sketch the relationships and the dependencies\n   between the API functions.\
    \  They provide the informal description of\n   the progress alternatives and\
    \ depict the communication and\n   synchronization between the general IOTP Application\
    \ Core and the\n   payment scheme specific modules.\n"
- title: 2.1.  Authentication Documentation Exchange
  contents:
  - "2.1.  Authentication Documentation Exchange\n   This section describes how the\
    \ functions in this document are used\n   together to process authentication.\n\
    \   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n   Authenticator\
    \   Inquire Authentication Challenge(Alg1*)   -> IPB\n                   Inq.\
    \ Auth. Challenge Response(Alg1,Ch1)   <- IPB\n                   . . .\n    \
    \               Inquire Authentication Challenge(Algn*)   -> IPB\n           \
    \        Inq. Auth. Challenge Response(Algn,Chn)   <- IPB\n                  \
    \ Create and transmit Authentication Request Block\n   Authenticatee   Authenticate(Alg1,\
    \ Ch1)                   -> IPB\n                   AuthenticateResponse(...)\
    \                 <- IPB\n                   . . .\n                   Authenticate(Algm,\
    \ Chm)                   -> IPB\n                   AuthenticateResponse(Res)\
    \                 <- IPB\n                   Create and transmit Authentication\
    \ Response Block\n   Authenticator   Check Authentication Response(Algm,Chm,Res)->IPB\n\
    \                   Check Auth. Response()                     <-IPB\n       \
    \            Create and transmit Authentication Status Block\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \                  Figure 2. Authentication Message Flows\n   1. (Authenticator\
    \ Process) None, one or multiple IOTP Payment Bridges\n      (IPB) are requested\
    \ for one or multiple authentication challenge\n      values (\"Inquire Authentication\
    \ Challenge\").  Each value is\n      encapsulated in an IOTP Authentication Request\
    \ Component.  In\n      addition, the IOTP Application Core may add payment scheme\n\
    \      independent authentication methods.  All of them form the final\n     \
    \ IOTP Authentication Request Block, which describes the set of\n      authentication\
    \ methods being supported by the authenticator and\n      from which the Authenticatee\
    \ has to choose one method.\n      Note that the interface of the API function\
    \ is limited to the\n      response of exactly one algorithm per call.  If the\
    \ IOTP\n      Application Core provides a choice of algorithms for input, this\n\
    \      choice should be reduced successively by the returned algorithm\n     \
    \ ({Alg(i+1)*} is subset of {Algi*}).\n      During the registration of new Payment\
    \ Instruments, the IOTP\n      Payment Bridge notifies the IOTP Application Core\
    \ about the\n      supported authentication algorithms.\n   2. On the presence\
    \ of an IOTP Authentication Block within the\n      received IOTP message, the\
    \ Authenticatee's IOTP Application Core\n      checks whether the IOTP transaction\
    \ type in the current phase\n      actually supports the authentication process.\n\
    \      For each provided Authentication Request Component, the IOTP\n      Application\
    \ Core analyzes the algorithms' names, the transaction\n      context, and optionally\
    \ user preferences in order to determine the\n      system components which are\
    \ capable to process the authentication\n      request items.  Such system components\
    \ might be the IOTP\n      Application Core itself or any of the registered IOTP\
    \ Payment\n      Bridges.\n      Subsequently, the IOTP Application Core requests\
    \ the responses to\n      the supplied challenges from the determined system components\
    \ in\n      any order.  The authentication trials stop with the first\n      successful\
    \ response, which is included in the IOTP Authentication\n      Response Block.\n\
    \      Alternatively, the IOTP Application might ask for a user\n      selection.\
    \  This might be appropriate, if two or more\n      authentication algorithms\
    \ are received that require explicit user\n      interaction, like PIN or chip\
    \ card insertion.\n      The Authenticatee's organizational data is requested\
    \ by an IOTP\n      Authentication Request Block without any content element.\
    \  On\n      failure, the authentication (sequence) might be retried, or the\n\
    \      whole transaction might be suspended or cancelled.\n   3. (Authenticator\
    \ Process) The IOTP Application Core checks the\n      presence of the IOTP Authentication\
    \ Response Component in the\n      Authentication Response Block and forwards\
    \ its content to the\n      generator of the associated authentication challenge\
    \ for\n      verification (\"Check Authentication Response\").\n      On sole\
    \ organizational data request, its presence is checked.\n      Any verification\
    \ must succeed in order to proceed with the\n      transaction.\n"
- title: 2.2.  Brand Compilation
  contents:
  - "2.2.  Brand Compilation\n   The following shows how the API functions are used\
    \ together so that\n   the Merchant can (1) compile the Brand List Component,\
    \ (2) generate\n   the Payment Component, and (3) adjust the Order Component with\n\
    \   payment scheme specific packaged content.\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \   Merchant      For each registered IOTP Payment Bridge\n                 |\
    \  Find Accepted Payment Brand()             -> IPB\n                 |  Find\
    \ Accepted Payment Brand Response (B*) <- IPB\n                 |  Find Accepted\
    \ Payment Protocol(B1)        -> IPB\n                 |  Find Accepted Payment\
    \ Protocol Res.(P1*)  <- IPB\n                 |  . . .\n                 |  Find\
    \ Accepted Payment Protocol(Bn)        -> IPB\n                 |  Find Accepted\
    \ Payment Protocol Res.(Pn*)  <- IPB\n                 Create one Brand List Component,\
    \ ideally sharing\n                   common Brand, Protocol Amount, Currency\
    \ Amount,\n                   and Pay Protocol Elements\n                 Create\
    \ Trading Protocol Options Block\n                 On brand independent transactions\n\
    \                 |  Create Brand Selection Component, implicitly\n          \
    \       |  Get Payment Initialization Data(B1,P1)   -> IPB\n                 |\
    \  Get Payment Initialization Data Res.()   <- IPB\n                 |  Optionally\n\
    \                 |  |  Inquire Process State()               -> IPB\n       \
    \          |  |  Inquire Process State Response(State) <- IPB\n              \
    \   |  Create Offer Response Block\n                 Transmit newly created Block(s)\n\
    \   Consumer      Consumer selects Brand (Bi)/Currency/Protocol (Pj)\n       \
    \            from those that will work and generates Brand\n                 \
    \  Selection Component - at least logically\n                 On brand dependent\
    \ transaction\n                 |  Transmit Brand Selection Component\n   Merchant\
    \      On brand dependent transaction\n                 |  Get Payment Initialization\
    \ Data(Bi,Pj)   -> IPB\n                 |  Get Payment Initialization Data Res.()\
    \   <- IPB\n                 |  Optionally\n                 |  |  Inquire Process\
    \ State()               -> IPB\n                 |  |  Inquire Process State Response(State)\
    \ <- IPB\n                 |  Create Offer Response Block\n                 |\
    \  Transmit newly created Block\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \                 Figure 3. Brand Compilation Message Flows\n   1.  The Merchant's\
    \ commerce server controls the shopping dialog with\n       its own mechanisms\
    \ until the Consumer checks out the shopping\n       cart and indicates the payment\
    \ intention.  The notion shopping\n       subsumes any non-IOTP based visit of\
    \ the Merchant Trading Role's\n       (which subsumes Financial Institutes) web\
    \ site in order to\n       negotiate the content of the IOTP Order Component.\
    \  The\n       subsequent processing switches to the IOTP based form by the\n\
    \       activation of the Merchant's IOTP aware application.\n   2.  The IOTP\
    \ Application Core inquires for the IOTP level trading\n       parameters (Consumer's\
    \ shopping identifier, payment direction,\n       initial currency amounts, discount\
    \ rates, Merchant's and Delivery\n       Handler's Net Locations, Non-Payment\
    \ Handler's Organizational\n       Data, initial order information, ....).\n \
    \  3.  The registered IOTP Payment Bridges are inquired by the IOTP\n       Application\
    \ Core about the accepted payment brands (\"Find\n       Accepted Payment Brand\"\
    ).  Their responses provide most of the\n       attribute values for the compilation\
    \ of the Brand List\n       Component's Brand Elements.  The IOTP Application\
    \ Core might\n       optionally match the returned payment brands with Merchant's\n\
    \       general preferences.\n       The IOTP Application Core must provide any\
    \ wallet identifiers, if\n       they are required by the IOTP Payment Bridges\
    \ which signal their\n       need by specific error codes (see below).  Any signaled\
    \ error\n       that could not be immediately solved by the IOTP Application Core\n\
    \       should be logged - this applies also to the subsequent API calls\n   \
    \    of this section.  In this case, the IOTP Application Core creates\n     \
    \  an IOTP Error Block (hard error), transmits it to the Consumer,\n       and\
    \ terminates the current transaction.\n   4.  The IOTP Application Core interrogates\
    \ the IOTP Payment Bridges\n       for each accepted payment brand about the supported\
    \ payment\n       protocols (\"Find Accepted Payment Protocol\").  These responses\n\
    \       provide the remaining attribute values of the Brand Elements as\n    \
    \   well as all attribute values for the compilation of the Brand\n       List\
    \ Component's Protocol Amount and Pay Protocol Elements.\n       Furthermore,\
    \ the organisational data about the Payment Handler is\n       returned.  The\
    \ IOTP Application Core might optionally match the\n       returned payment brands\
    \ with Merchant's general preferences.\n       Alternatively, the IOTP Application\
    \ Core might skip the calls of\n       \"Find Accepted Payment Brands\" (cf. Step\
    \ 3) and issue the \"Find\n       Accepted Payment Protocol\" call without any\
    \ Brand given on the\n       input parameter list.  In this case, the IOTP Payment\
    \ Bridge\n       responds to the latter call with the whole set of payment schemes\n\
    \       supported w.r.t. the other input parameters.\n   5.  The steps 3 and 4\
    \ are repeated during IOTP Value Exchange\n       transactions - these steps are\
    \ omitted in the previous figure.\n   6.  The IOTP Application Core compiles the\
    \ Brand List Component(s)\n       and the IOTP Trading Protocol Options Block.\
    \  It is recommended\n       that the \"equal\" items returned by IOTP Payment\
    \ Bridge function\n       calls are shared due to the extensive linking capabilities\
    \ within\n       the Brand List Component.  However, the compilation must consider\n\
    \       several aspects in order to prevent conflicts - sharing detection\n  \
    \     might be textual matching (after normalization):\n      o  Packaged Content\
    \ Elements contained in the Brand List Component\n         (and subsequently generated\
    \ Payment and Order Components) might\n         be payment scheme specific and\
    \ might depend on each other.\n      o  Currently, IOTP lacks precise rules for\
    \ the content of the\n         Packaged Content Element.  Therefore, transaction\
    \ / brand /\n         protocol / currency amount (in)dependent data might share\
    \ the\n         same Packaged Content Element or might spread across multiple\n\
    \         Packaged Content Elements.\n      o  The Consumer's IOTP Application\
    \ Core transparently passes the\n         Packaged Content Elements to the IOTP\
    \ Payment Bridges which\n         might not be able to handle payment scheme data\
    \ of other\n         payment schemes, accurately.\n       The rules and mechanisms\
    \ of how this could be accomplished are\n       out of the scope of this document.\
    \  Furthermore, this document\n       does not define any further restriction\
    \ to the IOTP\n       specification.\n   7.  The IOTP Application Core determines\
    \ whether the IOTP message can\n       be enriched with an Offer Response Block.\
    \  This is valid under\n       the following conditions:\n      o  All payment\
    \ alternatives share the attribute values and\n         Packaged Content Elements\
    \ of the subsequently generated IOTP\n         Payment and Order Components.\n\
    \      o  The subsequently generated data does not depend on any IOTP\n      \
    \   BrandSelInfo Elements that might be reported by the consumer\n         within\
    \ the TPO Selection Block in the brand dependent variant.\n       If both conditions\
    \ are fulfilled, the IOTP Application Core might\n       request the remaining\
    \ payment scheme specific payment\n       initialization data from the IOTP Payment\
    \ Bridge (\"Get Payment\n       Initialization Data\") and compile the IOTP Offer\
    \ Response Block.\n       Optionally, the IOTP Application Core might request\
    \ the current\n       process state from the IOTP Payment Bridge and add the inferred\n\
    \       order status to the IOTP Offer Response Block.  Alternatively,\n     \
    \  IOTP Application might determine the order status on its own.\n       As in\
    \ step 6, the rules and mechanisms of how this could be\n       accomplished are\
    \ out of the scope of this document.\n   8.  The IOTP Application Core compiles\
    \ the IOTP TPO Message including\n       all compiled IOTP Blocks and transmits\
    \ the message to the\n       Consumer.  The IOTP Application Core terminates if\
    \ an IOTP Offer\n       Response Block has been created.\n   9.  The Consumer\
    \ performs the Brand Selection Steps (cf. Section 2.3)\n       and responds with\
    \ a TPO Selection Block if no IOTP Offer Response\n       Block has been received.\
    \  Otherwise, the following step is\n       skipped.\n   10. On brand dependent\
    \ transactions, the IOTP Application Core\n       requests the remaining payment\
    \ scheme specific payment\n       initialization data from the IOTP Payment Bridge\
    \ (\"Get Payment\n       Initialization Data\"), compiles the IOTP Offer Response\
    \ Block,\n       transmits it to the Consumer, and terminates.  Like Step 7, the\n\
    \       IOTP Application Core might access the current process state of\n    \
    \   the IOTP Payment Bridge for the compilation of the order status.\n   Any error\
    \ during this process raises an IOTP Error Block.\n"
- title: 2.3.  Brand Selection
  contents:
  - "2.3.  Brand Selection\n   This section describes the steps that happen mainly\
    \ after the\n   Merchant's Brand Compilation (in a brand independent transaction).\n\
    \   However, these steps might partially interlace the previous process\n   (in\
    \ a brand dependent transaction).\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \   Merchant      Merchant generates Brand List(s) containing\n              \
    \     Brands, Payment Protocols and Currency Amounts\n                 On brand\
    \ independent transactions\n                 |  Merchant generates Offer Response\
    \ Block\n   Consumer      Compile set(s) of Brands B/Protocols P\n           \
    \      for each set\n                 |  Find Payment Instrument(B, P, C)    \
    \    -> IPB\n                 |  Find Payment Instrument Response (PI*)    <-\
    \ IPB\n                 Consumer selects Brand/Currency/Payment Instrument\n \
    \                  from those that will work and generates Brand\n           \
    \        Selection Component\n                 For the Selection\n           \
    \      |  Get Payment Initialization Data(B,C,PI,P) -> IPB\n                 |\
    \  Get Payment Initialization Data Response()<- IPB\n                 On brand\
    \ dependent transaction\n                 |  Generate and transmit TPO Selection\
    \ Block\n   Merchant      On brand dependent transaction\n                 | \
    \ Merchant checks Brand Selection and generates\n                 |  and transmits\
    \ Offer Response Block\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \                  Figure 4. Brand Selection Message Flows\n   1. The Merchant's\
    \ commerce server controls the shopping dialog with\n      its own mechanisms\
    \ until the Consumer checks out the shopping cart\n      and indicates his payment\
    \ intention.  The subsequent processing\n      switches to the IOTP based form\
    \ by the activation of the\n      Merchant's IOTP aware application.\n   2. The\
    \ IOTP Application Core compiles the IOTP Trading Protocol\n      Options Block\
    \ which contains the IOTP Brand List Component(s)\n      enumerating Merchant's\
    \ accepted payment brands and payment\n      protocols and initiates the Brand\
    \ Selection process.\n   3. This first IOTP message activates the Consumer's IOTP\
    \ aware\n      application, e.g., the Web browser invokes a helper application\n\
    \      (e.g., Java applet or external application).  Its IOTP Application\n  \
    \    Core\n      o  infers the accepted payment brands, payment protocols, payment\n\
    \         direction, currencies, payment amounts, any descriptions etc.,\n   \
    \      and their relationships from the IOTP message,\n      o  determines the\
    \ registered IOTP Payment Bridges,\n      o  compiles one or multiple sets of\
    \ brand and protocol such that\n         the join of all sets describes exactly\
    \ the payment alternatives\n         being offered by the Merchant.\n      o \
    \ inquires payment (protocol) support and the known payment\n         instruments\
    \ from each registered IOTP Payment Bridge for each\n         compiled set (\"\
    Find Payment Instrument\").  However, some IOTP\n         Payment Bridges may\
    \ refuse payment instrument distinction.\n      The payment protocol support may\
    \ differ between payment\n      instruments if the IOTP Payment Bridge supports\
    \ payment instrument\n      distinction.\n      These API calls are used to infer\
    \ the payment alternatives at the\n      startup of any payment transaction (without\
    \ user unfriendly\n      explicit user interaction).\n      The IOTP Application\
    \ Core must provide wallet identifiers, if they\n      are requested by the IOTP\
    \ Payment Bridges which signal their need\n      by specific error codes (see\
    \ below).\n      It is recommended that the IOTP Application Core manages wallet\n\
    \      identifiers.  But for security reasons, it should store pass\n      phrases\
    \ in plain text only in runtime memory.  Developers of IOTP\n      Payment Bridges\
    \ and payment software modules should provide a thin\n      and fast implementation\
    \ - without lengthy initialization processes\n      - for this initial inquiry\
    \ step.\n   4. The IOTP Application Core verifies the Consumer's payment\n   \
    \   capabilities with the Merchant's accepted payment brands and\n      currencies,\n\
    \      o  displays the valid payment instruments and payment instrument\n    \
    \     independent payment brands (brand and protocol) together with\n        \
    \ their purchase parameters (payment direction, currency,\n         amount), and\n\
    \      o  requests the Consumer's choice or derives it automatically from\n  \
    \       any configured preferences.  Any selection ties one IOTP\n         Payment\
    \ Bridge with the following payment transaction.\n      The handling and resolution\
    \ of unavailable IOTP Payment Bridges\n      during the inquiry in Step 3 is up\
    \ to the IOTP Application Core.\n      It may skip these IOTP Payment Bridges\
    \ or may allow user supported\n      resolution.\n      Furthermore, it may offer\
    \ the registration of new payment\n      instruments when the Consumer is asked\
    \ for payment instrument\n      selection.\n   5. The IOTP Application Core interrogates\
    \ the fixed IOTP Payment\n      Bridge whether the payment might complete with\
    \ success (\"Check\n      Payment Possibility\").  At this step, the IOTP Payment\
    \ Bridge may\n      issue several signals, e.g.,\n      o  payment can proceed\
    \ immediately,\n      o  required peripheral inclusive of some required physical\
    \ payment\n         instrument (chip card) is unavailable,\n      o  (non-IOTP)\
    \ remote party (e.g., issuer, server wallet) is not\n         available,\n   \
    \   o  wallet identifier or pass phrase is required,\n      o  expired payment\
    \ instrument (or certificate), insufficient\n         funds, or\n      o  physical\
    \ payment instrument unreadable.\n      In any erroneous case, the user should\
    \ be notified and offered\n      accurate alternatives.  Most probably, the user\
    \ might be offered\n      o  to resolve the problem, e.g., to insert another payment\n\
    \         instrument or to verify the periphery,\n      o  to proceed (assuming\
    \ its success),\n      o  to cancel the whole transaction, or\n      o  to suspend\
    \ the transaction, e.g., initiating a nested\n         transaction for uploading\
    \ an electronic purse.\n      If the payment software implements payment instrument\
    \ selection on\n      its own, it may request the Consumer's choice at this step.\n\
    \      If the check succeeds, it returns several IOTP Brand Selection\n      Info\
    \ Elements.\n   6. The Steps 2 to 5 are repeated and possibly interlaced for the\n\
    \      selection of the second payment instrument during IOTP Value\n      Exchange\
    \ transactions - this is omitted in the figure above.\n   7. The IOTP Brand Selection\
    \ Component is generated and enriched with\n      the Brand Selection Info elements.\
    \  This component is transmitted\n      to the Merchant inside a TPO Selection\
    \ Block if the received IOTP\n      message lacks the IOTP Offer Response Block.\
    \  The Merchant will\n      then respond with an IOTP Offer Response Block (following\
    \ the\n      aforementioned compilation rules).\n"
- title: 2.4.  Successful Payment
  contents:
  - "2.4.  Successful Payment\n   An example of how the functions in this document\
    \ are used together to\n   effect a successful payment is illustrated in the Figure\
    \ 5.  In the\n   figure 5, PS0, PS1, ..., and PSn indicate the nth PayScheme Packaged\n\
    \   Content data, and [ ] indicates optional.\n   (Technically, two payments happen\
    \ during IOTP Value Exchange\n   transactions.)\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \   Consumer        Start Payment Consumer(Amount,[PS0]...)    -> IPB\n      \
    \             Start Payment Cons. Res.([PS1], CS=Cont.)  <- IPB\n            \
    \       Create and transmit Payment Request Block\n   Payment Handler Start Payment\
    \ Pay. Handler(Amount, [PS1])  -> IPB\n                   Start Payment PH Response(PS2,\
    \ CS=Cont.)   <- IPB\n                   Create and transmit Payment Exchange\
    \ Block\n   Consumer        Continue Process(PS2)                      -> IPB\n\
    \                   Continue Process Response(PS3, CS=Cont.)   <- IPB\n      \
    \      ... CONTINUE SWAPPING PAYMENT EXCHANGES UNTIL ...\n   Payment Handler Continue\
    \ Process Response([PSn], CS=End)   <- IPB\n                   Request any local\
    \ payment receipt\n                   |  Inquire Process State()             \
    \    -> IPB\n                   |  Inquire Proc. State Resp.(State, [Rcp.])<-\
    \ IPB\n                   Create and transmit Payment Response Block\n       \
    \            Terminate transaction, actively\n                   |  Change Process\
    \ State(State)             -> IPB\n                   |  Change PS Response(State=CompletedOK)\
    \   <- IPB\n   Consumer        On receipt of final payment scheme data\n     \
    \              |  Continue Process(PSn)                   -> IPB\n           \
    \        |  Continue Process Response(CS=End)       <- IPB\n                 \
    \  Check Payment Receipt(Receipt)             -> IPB\n                   Check\
    \ Payment Receipt Response()           <- IPB\n                   Request any\
    \ local payment receipt\n                   |  Inquire Process State()       \
    \          -> IPB\n                   |  Inquire Proc. State Resp.(State, [Rcp.])<-\
    \ IPB\n                   Terminate transaction, actively\n                  \
    \ |  Change Process State(State)             -> IPB\n                   |  Change\
    \ PS Response(State=CompletedOk)   <- IPB\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \                  Figure 5. Example Payment Message Flows\n   1. After Brand\
    \ Selection and receipt of the IOTP Offer Response\n      Block, the Consumer\
    \ switches from communicating with the Merchant\n      to communicating with the\
    \ Payment Handler.\n      This might be a milestone requiring the renewed Consumer's\n\
    \      agreement about the payment transaction's continuation.\n      Particularly,\
    \ this is a good moment for payment suspension (and\n      even cancellation),\
    \ which will be most probably supported by all\n      payment schemes.  Simply,\
    \ because the actual payment legacy\n      systems have not yet been involved\
    \ in the current transaction.\n      Such an agreement might be explicit per transaction\
    \ or automatic\n      based on configured preferences, e.g., early acknowledgments\
    \ for\n      specific payment limits.\n      It is assumed, that the transaction\
    \ proceeds with minimal user\n      (Consumer and Payment Handler) interaction\
    \ and that its progress\n      is controlled by the IOTP Application Core and\
    \ IOTP Payment\n      Bridge.\n   2. In order to open the actual payment transaction,\
    \ the IOTP\n      Application Core issues the \"Start Payment Consumer\" request\n\
    \      towards the IOTP Payment Bridge.  This request carries the whole\n    \
    \  initialization data of the payment transaction being referred to\n      by\
    \ the IOTP Payment Bridge for subsequent consistency checks:\n      o  payment\
    \ brand and its description from the selected Brand\n         Element of the IOTP\
    \ Brand List Component,\n      o  payment instrument from preceding inquiry step,\n\
    \      o  further payment parameters (currency, amount, direction,\n         expiration)\
    \ from the selected Currency Amount element, Brand\n         List Component, and\
    \ Payment Component of the IOTP Offer\n         Response Block,\n      o  payment\
    \ protocol from the selected IOTP Pay Protocol Element,\n      o  order details\
    \ contained in the IOTP Order Component which might\n         be payment scheme\
    \ specific,\n      o  payment scheme specific data inclusive of the payment protocol\n\
    \         descriptions from the IOTP Protocol Amount Element, and IOTP\n     \
    \    Pay Protocol Element, and\n      o  payment scheme specific data inclusive\
    \ of the payment protocol\n         descriptions, in which the name attribute\
    \ includes the prefix\n         as \"Payment:\" from the Trading Role Data Component.\n\
    \      Generally, the called API function re-does most checks of the\n      \"\
    Check Payment Possibility\" call due to lack of strong\n      dependencies between\
    \ both requests: There might be a significant\n      delay between both API requests.\n\
    \      The called API function may return further payment scheme specific\n  \
    \    data being considered as payment specific initialization data for\n     \
    \ the Payment Handler's IOTP Payment Bridge.\n      If the fixed Existing Payment\
    \ Software implements payment\n      instrument selection on its own, it may request\
    \ the Consumer's\n      choice at this step.\n      The IOTP Payment Bridge reports\
    \ lack of capability quite similarly\n      to the \"Check Payment Possibility\"\
    \ request to the IOTP Application\n      Core.  The Consumer may decide to resolve\
    \ the problem, to suspend,\n      or to cancel the transaction, but this function\
    \ call must succeed\n      in order to proceed with the transaction.\n      Developers\
    \ of payment modules may decide to omit payment\n      instrument related checks\
    \ like expiration date or refunds\n      sufficiency, if such checks are part\
    \ of the specific payment\n      protocol.\n      If the IOTP Payment Bridge requests\
    \ wallet identifiers or pass\n      phrases anywhere during the payment process,\
    \ they should be\n      requested by this API function, too.  It is recommended\
    \ that the\n      IOTP Application Core stores plain text pass phrases only in\n\
    \      runtime memory.\n      Finally, the IOTP Application Core generates the\
    \ IOTP Payment\n      Request Block, inserts any returned payment scheme data,\
    \ and\n      submits it to the Payment Handler's system.\n   3. The Payment Handler's\
    \ IOTP Application Core opens the payment\n      transaction calling the \"Start\
    \ Payment Payment Handler\" API\n      function.  The payment brand, its description,\
    \ payment protocol,\n      payment specific data, payment direction, currency\
    \ and payment\n      amount are determined quite similar to the Consumer's IOTP\n\
    \      Application Core.  Furthermore, the content of the IOTP Payment\n     \
    \ Scheme Component and the IOTP Brand Selection Info Elements are\n      passed\
    \ to this function.\n      On success, the Payment Handler's IOTP Payment Bridge\
    \ responds\n      with payment scheme specific data.  On failures, this non-\n\
    \      interactive server application has to resolve any problems on its\n   \
    \   own or to give up aborting the payment transaction.  However, the\n      Consumer\
    \ may restart the whole payment transaction.  Anyway, the\n      payment log file\
    \ should reflect any trials of payments.\n      Eventually, the Payment Handler\
    \ informs the Consumer about the\n      current IOTP Process State using the IOTP\
    \ Payment Response or IOTP\n      Error Block.\n      Note that the \"Start Payment\
    \ Payment Handler\" call might return\n      the Continuation Status \"End\" such\
    \ that payment processing\n      proceeds with Step 7.\n   4. The IOTP Application\
    \ Core verifies the presence of the Payment\n      Exchange Block in the IOTP\
    \ message and passes the contained\n      payment scheme specific data to the\
    \ fixed IOTP Payment Bridge\n      (\"Continue Process\") which returns the next\
    \ IOTP Payment Scheme\n      Component.\n      This Payment Scheme Component is\
    \ encapsulated in an IOTP Payment\n      Exchange Block and transmitted to the\
    \ Payment Handler.\n   5. The Payment Handler's IOTP Application Core verifies\
    \ the presence\n      of the Payment Exchange Block and passes the contained payment\n\
    \      scheme specific data to the fixed IOTP Payment Bridge (\"Continue\n   \
    \   Process\") which returns the next IOTP Payment Scheme Component for\n    \
    \  encapsulation and transmission to the Consumer.\n   6. The payment process\
    \ continues with IOTP Payment Exchange Block\n      exchanges, carrying the payment\
    \ scheme specific data.  Each party\n      (1) submits the embedded payment scheme\
    \ specific data\n      transparently to the appropriate IOTP Payment Bridge calling\
    \ the\n      \"Continue Process\" API function, (2) wraps the returned payment\n\
    \      scheme specific data into an IOTP Payment Exchange Block, and (3)\n   \
    \   transmits this block to the counter party.\n      However, the processing\
    \ of the payment scheme specific data may\n      fail for several reasons.  These\
    \ are signaled by specific error\n      codes which are transformed to IOTP Payment\
    \ Response Blocks\n      (generated by Payment Handler) or IOTP Error Blocks (both\
    \ parties\n      may generate them) and transmitted to the counter party.\n  \
    \ 7. Eventually, the Payment Handler's IOTP Payment Bridge recognizes\n      the\
    \ termination of the payment transaction and reports this by the\n      continuation\
    \ status \"End\" on the output parameter of \"Continue\n      Process\" (or \"\
    Start Payment Payment Handler\").  Then, the IOTP\n      Application Core issues\
    \ the \"Inquire Process State\" API call and\n      verifies whether an IOTP Payment\
    \ Receipt Component has been\n      returned.  The IOTP Application Core wraps\
    \ the payment receipt,\n      the status response, and the optional payment scheme\
    \ specific data\n      in an IOTP Payment Response Block and transmits this block\
    \ to the\n      Consumer.\n      However, any of these API calls may fail or any\
    \ response might be\n      incomplete (e.g., lack of payment receipt).  Then,\
    \ the Consumer\n      has to be notified about the failed processing by an IOTP\
    \ Error\n      Block.\n      Finally, the Payment Handler terminates the payment\
    \ transaction\n      with the \"Change Process State\" API call without awaiting\
    \ any\n      further response from the Consumer.  Further failures are not\n \
    \     reported to the Consumer.\n      Note that it might be possible that the\
    \ Consumer's IOTP Payment\n      Bridge has returned the previous payment scheme\
    \ specific data with\n      the continuation status \"End\".  Even in the absence\
    \ of this\n      knowledge - this status is not exchanged between the Consumer\
    \ and\n      the Payment Handler - the Payment Handler must not supply any\n \
    \     further payment scheme specific data.  Such data will be rejected\n    \
    \  by the Consumer's IOTP Payment Bridge.\n   8. The Consumer passes the optional\
    \ payment scheme specific data and\n      the payment receipt to the fixed IOTP\
    \ Payment Bridge by \"Continue\n      Process\" and \"Check Payment Receipt\"\
    \ API calls.\n      Afterwards, the IOTP Application Core issues the \"Inquire\
    \ Process\n      State\" API call and verifies whether extensions to the payment\n\
    \      receipt have been returned.\n      Finally, the transaction is terminated\
    \ by calling the \"Change\n      Process State\" API function which verifies and\
    \ synchronizes the\n      reported payment status with the local one and signals\
    \ any\n      inconsistencies.  Any Inconsistency and returned status text\n  \
    \    should be displayed to the Consumer.\n      At this point, the payment transaction\
    \ has already been closed by\n      the Payment Handler.  Therefore, any failure\
    \ has to be resolved\n      locally or out-of-band.\n"
- title: 2.5.  Payment Inquiry
  contents:
  - "2.5.  Payment Inquiry\n   In Baseline IOTP, Payment inquiries are initiated by\
    \ the Consumer in\n   order to verify the current payment progress and process\
    \ state at the\n   remote Payment Handler.  In the figure 6, PS1 and PS2 indicate\
    \ the\n   first and second PayScheme Packaged Content data, and [ ] indicates\n\
    \   optional.\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \   Consumer        Start Payment Inquiry()                    -> IPB\n      \
    \             Start Payment Inquiry Response([PS1])      <- IPB\n            \
    \       Create and transmit Inquiry Request Trading Block\n   Payment Handler\
    \ Inquire Payment Status([PS1])              -> IPB\n                   Inquire\
    \ Payment Status Res.(State, [PS2])  -> IPB\n                   Create and transmit\
    \ Inquiry Response Trading\n                     Block\n   Consumer        If\
    \ Payment Scheme Data present\n                   |  Continue Process(PS2)   \
    \                -> IPB\n                   |  Continue Process Response(CS=End)\
    \       <- IPB\n                   Change Process State(State)               \
    \ -> IPB\n                   Change Process State Response(State)       <- IPB\n\
    \   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n      \
    \            Figure 6. Remote Process State Inquiry\n   1. The Consumer might\
    \ initiate a payment inquiry once the payment\n      transaction has been opened\
    \ by the IOTP Application Core, i.e., at\n      any time after the initial submission\
    \ of the IOTP Payment Request\n      Block.  The IOTP Application Core requests\
    \ any additional specific\n      payment scheme data from the IOTP Payment Bridge\
    \ which has been\n      fixed during brand selection (cf. Section 2.3) using the\
    \ \"Start\n      Payment Inquiry\" API request.\n      Erroneous API responses\
    \ should be reported to the Consumer and\n      valid alternatives (typically\
    \ retry and cancellation) should be\n      presented by the IOTP Application Core.\n\
    \      This request might perform the complete initialization, e.g.,\n      availability\
    \ check of periphery or pass phrase supplement, and the\n      IOTP Payment Bridge\
    \ reports lack of capability quite similarly to\n      the \"Check Payment Possibility\"\
    \ request to the IOTP Application\n      Core.\n      If the IOTP Payment Bridge\
    \ requests wallet identifiers or pass\n      phrases anywhere during the payment\
    \ process, they should be\n      requested by this API function, too.  It is recommended\
    \ that the\n      IOTP Application Core store plain text pass phrases only in\n\
    \      runtime memory.\n      The IOTP Application Core encapsulates any Payment\
    \ Scheme\n      Component in an IOTP Inquiry Request Block and submits the block\n\
    \      to the Payment Handler.\n   2. The Payment Handler analyses the IOTP Inquire\
    \ Request Block, maps\n      the Transaction Identifier to payment related attributes\
    \ (brand,\n      consumer and payment identifiers), determines the appropriate\
    \ IOTP\n      Payment Bridge, and forwards the request to the this IOTP Payment\n\
    \      Bridge (\"Inquire Payment Status\").  The IOTP Application Core\n     \
    \ transforms the response to an IOTP Inquiry Response Block and\n      transmits\
    \ it to the Consumer.\n   3. On receipt of the respective IOTP Inquiry Response\
    \ Block the\n      Consumer's IOTP Application Core submits any encapsulated payment\n\
    \      scheme specific data to the IOTP Payment Bridge for verification\n    \
    \  (\"Continue Process\").\n   4. The IOTP Application Core passes the reported\
    \ payment status\n      (except textual descriptions) to the IOTP Payment Bridge\
    \ (\"Change\n      Process State\") for verification purposes and payment status\n\
    \      change.  The IOTP Payment Bridge reports any inconsistencies as\n     \
    \ well as the final payment status to the IOTP Application Core.\n      Any additional\
    \ information that might be of interest to the\n      Consumer has to be displayed\
    \ by the IOTP Payment Bridge or\n      Existing Payment Software on their own.\n"
- title: 2.6.  Abnormal Transaction Processing
  contents:
  - '2.6.  Abnormal Transaction Processing

    '
- title: 2.6.1.  Failures and Cancellations
  contents:
  - "2.6.1.  Failures and Cancellations\n   The IOTP specification distinguishes between\
    \ several classes of\n   failures:\n      o  Business and technical errors\n \
    \     o  Error depths of transport, message and block level\n      o  Transient\
    \ errors, warnings, and hard errors.\n   Any IOTP Payment API has to deal with\
    \ the receipt of failure\n   notifications by and failure responses.  This proposal\
    \ has borrowed\n   the basic mechanisms for error reporting between the IOTP Application\n\
    \   Core and the IOTP Payment Bridge from the actual protocol: Business\n   errors\
    \ are reported by Status Components within IOTP Response Blocks\n   while technical\
    \ errors are signaled by Error Components within IOTP\n   Error Blocks.\n   Cancellations\
    \ are mimicked as specific business errors which might be\n   initiated by each\
    \ trading party.\n   Preferring slim interfaces, this IOTP Payment API introduces\
    \ one\n   additional Error Code value for business error indication - errors\n\
    \   can be raised on every API call.  On receipt of this value, the IOTP\n   Application\
    \ Core has to infer further details by the issuance of the\n   API function call\
    \ \"Inquire Process State\".\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \   Any Party       Issue some API request                     -> IPB\n      \
    \             Error Response(Error Code)                 <- IPB\n            \
    \       On \"Business Error\" response\n                   |  Inquire Process\
    \ State()                 -> IPB\n                   |  Inquire P.S. Resp.(State,\
    \ Receipt)      <- IPB\n                   Analyze local process state and try\
    \ to resolve\n                      with optional user interaction\n         \
    \          If Process State Change needed\n                   |  Change Process\
    \ State (State)            -> IPB\n                   |  Change Process State\
    \ Response(State)    <- IPB\n                   If counter party's notification\
    \ required\n                   |  Create Error or Cancel Block (, add to next\n\
    \                   |  message, ) and transmit it to counter party\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \                    Figure 7.  Error Response from IPB\n   The specific Completion\
    \ Codes \"ConsCancelled\", \"MerchCancelled\", and\n   \"PaymCancelled\" - returned\
    \ by \"Inquire Process State\" - determine\n   that the IOTP Cancel Block has\
    \ to be created instead of an IOTP Error\n   Block.\n   The rules for determining\
    \ the required behavior of the IOTP\n   Application Core are given in the IOTP\
    \ specification.\n   Note that any payment (intermediate) termination, i.e., failures,\n\
    \   cancellations, and even successes are always reported to the IOTP\n   Payment\
    \ Bridge by the API function \"Change Process State\".  This API\n   function\
    \ does both status changes and consistency checking /\n   synchronization.  Any\
    \ suspicion of inconsistency should be reported\n   by the IOTP Payment Bridge\
    \ for display by the IOTP Application Core.\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \   Any Party       Error Block or Cancel Block Received\n                   If\
    \ Change Process State required\n                   |  Change Process State (State)\
    \            -> IPB\n                   |  Change Process State Response(State)\
    \    <- IPB\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \             Figure 8.  Error Notification from counter party\n   Not every failure\
    \ might be visible at the IOTP layer, e.g., the\n   processing of payment transactions\
    \ might temporarily be hampered by\n   intermediate failures at the payment scheme\
    \ or protocol transport\n   layer which might be resolved by the actual components.\n\
    \   However, final failures or cancellations have to be reported at the\n   IOTP\
    \ layer.  E.g., communication time-outs and heavily faulty\n   communication channels\
    \ may disable the transaction.\n   Any system component may implement time-out\
    \ recognition and use the\n   aforementioned API mechanisms for the notification\
    \ of process state\n   changes.  But, time-outs may happens while communicating\
    \ with both\n   the counter party and local system components, like chip card\
    \ readers\n   or IOTP Payment Bridges.  Anyway, the Consumer's IOTP Application\n\
    \   Core should notify the Consumer about the resolution alternatives,\n   i.e.,\
    \ retry, suspension, and cancellation.\n"
- title: 2.6.2.  Resumption
  contents:
  - "2.6.2.  Resumption\n   Payment transaction resumption may apply at different\
    \ steps of a\n   payment transaction:\n   o  The Consumer's and Payment Handler's\
    \ view of the transaction might\n      not be synchronized: Due to different time-out\
    \ values the payment\n      transaction may not have been suspended by the counter\
    \ party.\n      Any \"Resume Payment ...\" API function responds with an Error\
    \ Code\n      on non-suspended payment transaction that signals a business\n \
    \     error.  Afterwards the IOTP Application Core has to issue the\n      \"\
    Inquire Process State\" API call for further analysis of the\n      process state.\n\
    \   o  One IOTP message sent by one party might not be processed\n      successfully\
    \ or even received by the counter party.  This needs to\n      be handled by the\
    \ actual payment scheme.  It is expected that the\n      IOTP Application Core\
    \ will not recognize anything.\n   o  IOTP does not provide any specific signal\
    \ for payment resumption.\n      On receipt of every IOTP Payment Exchange Block,\
    \ the IOTP\n      Application Core has to decide whether this Block belongs to\
    \ a\n      pending transaction or to a suspended transaction that should be\n\
    \      resumed.  The IOTP Application Core might call the \"Inquire\n      Process\
    \ State\" API function to update any lack of knowledge.\n      Any \"Resume Payment\"\
    \ API function responds with an Error Code on\n      non-suspended payment transaction\
    \ that signals a business error.\n      Similar, the \"Continue Process\" API\
    \ function should report\n      business errors on non-pending payment transactions.\n\
    \   o  The payment transaction may not have been created at the Payment\n    \
    \  Handler (early suspension and failed data transmission).  In that\n      case,\
    \ the IOTP Application Core should respond with a business\n      error that signals\
    \ the repetition of the payment transaction (by\n      the Consumer).\n      Any\
    \ \"Resume Payment\", \"Continue Process\" or \"Inquire Process\n      State\"\
    \ API function should return with an Error Code\n      \"AttValIllegal\" on non-existent\
    \ payment transaction whereby the\n      further Error Attribute \"Names\" denote\
    \ the payment identifier.\n   o  The IOTP Application Core should always request\
    \ fresh payment\n      scheme specific data on resumption - for synchronization\
    \ purposes\n      with the Existing Payment Software.  Old data in the cache that\n\
    \      has not been sent to the counter party should not be accessed.\n   If the\
    \ Consumer does not reconnect within an acceptable amount of\n   time, the Payment\
    \ Handler's system may perform local failure\n   resolution in order to close\
    \ the transaction and to retain resources\n   for other transactions (\"Change\
    \ Process State\").  If the Consumer\n   reconnect afterwards, an IOTP Payment\
    \ Response or IOTP Error Block\n   could be generated.\n"
- title: 2.7.  IOTP Wallet Initialization
  contents:
  - "2.7.  IOTP Wallet Initialization\n   At startup or on explicit user request the\
    \ IOTP Application Core\n   should check its IOTP Payment Bridges' internal status\
    \ by searching\n   for pending payment transactions.\n   1. The IOTP Application\
    \ Core interrogates the registered IOTP Payment\n      Bridges about pending payment\
    \ transactions.  The IOTP Application\n      Core may store indicators for pending\
    \ transactions and use them\n      for driving any subsequent inquiry (\"Inquire\
    \ Pending Payment\").\n   2. If one or more IOTP Payment Bridges report the presence\
    \ of pending\n      transactions, the IOTP Application Core may try to suspend\n\
    \      (\"Change Process State\") or resume (only Consumer: \"Resume Payment\n\
    \      Consumer\") the pending transactions (on user request).\n   The IOTP Payment\
    \ Bridge may deny the processing of any new payment\n   transactions until the\
    \ pending transactions have been processed.\n   Such denials are signaled by the\
    \ error code \"Business Error\".\n"
- title: 2.8.  Payment Software Management
  contents:
  - "2.8.  Payment Software Management\n   The IOTP Application Core provides only\
    \ a simple and generic\n   interface for the registration of new payment methods\
    \ / instruments\n   (\"Manage Payment Software\").  It receives the initial user\
    \ request\n   and defers the actual registration to the corresponding IOTP Payment\n\
    \   Bridge.\n   The IOTP Application Core may also activate the Existing Payment\n\
    \   Software for further payment instrument and wallet administration.\n"
- title: 3.  Mutuality
  contents:
  - "3.  Mutuality\n   The Payment API is formalized using the eXtensible Markup Language\n\
    \   (XML).  It defines wrapper elements for both the input parameters and\n  \
    \ the API function's response.  In particular, the response wrapper\n   provides\
    \ common locations for Error Codes and Error Descriptions.\n   It is anticipated\
    \ that this description reflects the logical\n   structure of the API parameter\
    \ and might be used to derive\n   implementation language specific API definitions.\n\
    \   XML definition:\n   <!ELEMENT IotpPaymentApiRequest (\n     FindAcceptedPaymentBrand\
    \ |\n     FindAcceptedPaymentProtocol |\n     GetPaymentInitializationData |\n\
    \     FindPaymentInstrument |\n     CheckPaymentPossiblity |\n     StartPaymentConsumer\
    \ |\n     StartPaymentPaymentHandler |\n     ResumePaymentConsumer |\n     ResumePaymentPaymentHandler\
    \ |\n     ContinueProcess |\n     InquireProcessState |\n     ChangeProcessState\
    \ |\n     InquireAuthChallenge |\n     Authenticate |\n     CheckAuthResponse\
    \ |\n     CheckPaymentReceipt |\n     ExpandPaymentReceipt |\n     RemovePaymentLog\
    \ |\n     PaymentInstrumentInquiry |\n     InquirePendingPayment |\n     ManagePaymentSoftware\
    \ |\n     StartPaymentInquiry |\n     InquirePaymentStatus |\n     CallBack )>\n\
    \   <!ATTLIST IotpPaymentApi\n     xml:lang          NMTOKEN   #IMPLIED\n    \
    \ ContentSoftwareID CDATA     #IMPLIED\n     xmlns             CDATA     #FIXED\n\
    \                    \"http://www.iotp.org/2000/08/PaymentAPI\" >\n   <!ELEMENT\
    \ IotpPaymentApiResponse (ErrorResponse?, (\n     FindAcceptedPaymentBrandResponse\
    \ |\n     FindAcceptedPaymentProtocolResponse |\n     GetPaymentInitializationDataResponse\
    \ |\n     FindPaymentInstrumentResponse |\n     CheckPaymentPossiblityResponse\
    \ |\n     StartPaymentConsumerResponse |\n     StartPaymentPaymentHandlerResponse\
    \ |\n     ResumePaymentConsumerResponse |\n     ResumePaymentPaymentHandlerResponse\
    \ |\n     ContinueProcessResponse |\n     InquireProcessStateResponse |\n    \
    \ ChangeProcessStateResponse |\n     InquireAuthChallengeResponse |\n     AuthenticateResponse\
    \ |\n     CheckAuthResponseResponse |\n     CheckPaymentReceiptResponse |\n  \
    \   ExpandPaymentReceiptResponse |\n     RemovePaymentLogResponse |\n     PaymentInstrumentInquiryResponse\
    \ |\n     InquirePendingPaymentResponse |\n     ManagePaymentSoftwareResponse\
    \ |\n     StartPaymentInquiryResponse |\n     InquirePaymentStatusResponse |\n\
    \     CallBackResponse )?)>\n   <!ATTLIST IotpPaymentApiResponse\n     xml:lang\
    \          NMTOKEN #IMPLIED\n     ContentSoftwareID CDATA   #IMPLIED\n     xmlns\
    \             CDATA   #FIXED\n                \"http://www.iotp.org/2000/08/PaymentAPI\"\
    \ >\n   <!ELEMENT ErrorResponse (ErrorLocation+,PaySchemePackagedContent*) >\n\
    \   <!ATTLIST ErrorResponse\n     xml:lang      NMTOKEN   #IMPLIED\n     ErrorCode\
    \     NMTOKEN   #REQUIRED\n     ErrorDesc     CDATA     #REQUIRED\n     Severity(Warning\
    \ |\n       TransientError |\n              HardError)     #REQUIRED\n     MinRetrySecs\
    \  CDATA     #IMPLIED\n     SwVendorErrorRef CDATA  #IMPLIED >\n   Most of the\
    \ attribute items are intended for immediate insertion in\n   the IOTP Error Block.\
    \  The attribute values of the Error Location\n   elements attribute have to enriched\
    \ and transformed into Error\n   Location Elements of the Error Component (cf.\
    \ IOTP Specification).\n   Attributes (cf. IOTP Specification):\n   xml:lang \
    \          Defines the language used by attributes or\n                      child\
    \ elements within this component, unless\n                      overridden by\
    \ an xml:lang attribute on a child\n                      element.\n   ContentSoftwareId\
    \  Contains information which identifies the\n                      software that\
    \ generated the content of the\n                      element.  Its purpose is\
    \ to help resolve\n                      interoperability problems that might\
    \ occur as\n                      a result of incompatibilities between messages\n\
    \                      produced by different software.  It is a single\n     \
    \                 text string in the language defined by\n                   \
    \   \"xml:lang\".  It must contain, as a minimum\n                      problems\
    \ that might occur as a result of\n                      o  the name of the software\
    \ manufacturer,\n                      o  the name of the software,\n        \
    \              o  the version of the software, and\n                      o  the\
    \ build of the software.\n   ErrorCode          Contains an error code which indicates\
    \ the\n                      nature of the error in the message in error.\n  \
    \                    Valid values for the Error Code are given in\n          \
    \            the following section.  This mnemonic enables\n                 \
    \     the automatic failure resolution of the IOTP\n                      Application\
    \ Core which analyzes the error code\n                      value in order to\
    \ determine the continuation\n                      alternatives.\n   ErrorDesc\
    \          Contains a description of the error in the\n                      language\
    \ defined by xml:lang.  The content of\n                      this attribute is\
    \ defined by the\n                      vendor/developer of the software that\n\
    \                      generated the Error Response Element.\n               \
    \       It is intended for user display and provides\n                      detailed\
    \ explanations about the failure and\n                      its (out-of-band)\
    \ resolution alternatives.\n   Severity           Indicates the severity of the\
    \ error.  Valid\n                      values are:\n                      o  Warning.\
    \  This indicates that although there\n                         is a message in\
    \ error the IOTP Transaction\n                         can still continue.\n \
    \                     o  TransientError.  This indicates that the\n          \
    \               error in the message in error may be\n                       \
    \  recovered if the message in error that is\n                         referred\
    \ to by the \"Names\" attribute is\n                         resent.\n       \
    \               o  HardError.  This indicates that there is an\n             \
    \            unrecoverable error in the message in error\n                   \
    \      and the IOTP Transaction must stop.\n   MinRetrySecs       This attribute\
    \ should be present if \"Severity\"\n                      is set to \"TransientError\"\
    .  It is the minimum\n                      number of whole seconds which the\
    \ IOTP aware\n                      application which received the message\n \
    \                     reporting the error should wait before\n               \
    \       resending the message in error identified by\n                      the\
    \ \"ErrorLocation\" attribute.\n                      If Severity is not set to\n\
    \                      \"TransientError\" then the value of this\n           \
    \           attribute is ignored.\n   SwVendorErrorRef   This attribute is a reference\
    \ whose value is\n                      set by the vendor/developer of the software\n\
    \                      that generated the Error Element.  It should\n        \
    \              contain data that enables the vendor to\n                     \
    \ identify the precise location in their\n                      software and the\
    \ set of circumstances that\n                      caused the software to generate\
    \ a message\n                      reporting the error.\n   Content:\n   ErrorLocation\
    \      This identifies, where possible, the\n                      element and\
    \ attribute in the message\n                      in error that caused the Error\n\
    \                      Element to be generated.  If the\n                    \
    \  \"Severity\" of the error is not\n                      \"TransientError\"\
    , more that one\n                      \"ErrorLocation\" may be specified as\n\
    \                      appropriate depending on the nature\n                 \
    \     of the error and at the discretion of\n                      the vendor/developer\
    \ of the IOTP\n                      Payment Bridge.\n                      Its\
    \ definition coincides with the\n                      IOTP specification whereby\
    \ the\n                      attributes \"IotpMsgRef\", \"BlkRef\" and\n     \
    \                 \"CompRef\" are left blank,\n                      intentionally.\n\
    \   PaySchemePackagedContent  cf. Table 5\n"
- title: 3.1.  Error Codes
  contents:
  - "3.1.  Error Codes\n   The following table lists the valid values for the ErrorCode\n\
    \   attribute of the Error Response Element.  The first sentence of the\n   error\
    \ description contains the default text that can be used to\n   describe the error\
    \ when displayed or otherwise reported.  Individual\n   implementations may translate\
    \ this into alternative languages at\n   their discretion.  However, not every\
    \ error code may apply to every\n   API call.  An Error Code must not be more\
    \ than 14 characters long.\n   The Error Codes have been taken from the IOTP Specification\
    \ and\n   extended by some additional codes which are highlighted by a\n   preceding\
    \ asterisk.\n   Generally, if the corrupt values have been user supplied, the\
    \ IOTP\n   Application Core might prompt for their correction.  If the renewal\n\
    \   fails or if the IOTP Application Core skips any renewals and some\n   notification\
    \ has to be send to the counter-party, the error code is\n   encapsulated within\
    \ an IOTP Error Block.\n   However, the IOTP server application reports business\
    \ errors -\n   visible at the IOTP layer - in the Status Component of the respective\n\
    \   Response Block.\n   The IOTP Application Core may add the attributes (and\
    \ values) within\n   the ErrorLocation elements that are omitted by the IOTP Payment\n\
    \   Bridge.\n   The following table mentions any modification from this general\n\
    \   processing for particular error values.  Furthermore, it contains\n   hints\
    \ for developers of IOTP Application Core software components\n   about the processing\
    \ of error codes.  Conversely, developers of IOTP\n   Payment Bridges get impressions\
    \ about the expected behavior of the\n   IOTP Application Core.\n   The IOTP Payment\
    \ API assumes that the IOTP Application Core\n   implements the dialog boxes needed\
    \ for error resolution.  But it does\n   not assume, that the IOTP Payment Bridge\
    \ actually relies on them.\n   Instead, the IOTP Payment Bridge may try resolution\
    \ on its own, may\n   implement specific dialog boxes, and may signal only final\
    \ failures.\n   Note: This abstract document assumes that the API parameters are\n\
    \   exchanged XML encoded.  Therefore, several error values might\n   disappear\
    \ in lower level language specific derivations.\n   Error Value        Error Description\n\
    \   -----------        -----------------\n   Reserved           Reserved.  This\
    \ error is reserved by the\n                      vendor/developer of the software.\
    \  Contact\n                      the vendor/developer of the software for\n \
    \                     more information (see the SoftwareId\n                 \
    \     attribute of the Message Id element in the\n                      Transaction\
    \ Reference Block [IOTP]).\n   XmlNotWellFrmd     XML not well formed.  The XML\
    \ document is not\n                      well formed.  See [XML] for the meaning\
    \ of\n                      \"well formed\".\n   XmlNotValid        XML not valid.\
    \  The XML document is well\n                      formed but the document is\
    \ not valid.  See\n                      [XML] for the meaning of \"valid\".\n\
    \                      Specifically:\n                      o  the XML document\
    \ does not comply with the\n                         constraints defined in the\
    \ IOTP document\n                         type declaration, and\n            \
    \          o  the XML document does not comply with the\n                    \
    \     constraints defined in the document type\n                         declaration\
    \ of any additional [XML-NS]\n                         that are declared.\n  \
    \                    The Names attribute might refer some\n                  \
    \    attributes and elements of the input\n                      parameter list.\n\
    \   (*)ElNotValid      Element not valid.  Invalid element in terms\n        \
    \              of prescribed syntactical characteristics.\n                  \
    \    The ElementRef attributes of ErrorLocation\n                      elements\
    \ might refer to the corresponding\n                      elements (if they have\
    \ ID attributes).\n                      The IOTP Application Core has to replace\
    \ the\n                      error code with \"XmlNotValid\" before\n        \
    \              transmission to the counterparty.\n   ElUnexpected       Unexpected\
    \ element.  Although the XML\n                      document is well formed and\
    \ valid, an\n                      element is present that is not expected in\n\
    \                      the particular context according to the\n             \
    \         rules and constraints contained in this\n                      specification.\n\
    \                      The ElementRef attributes of ErrorLocation\n          \
    \            elements might refer to the corresponding\n                     \
    \ elements (if they have ID attributes).\n   ElNotSupp          Element not supported.\
    \  Although the document\n                      is well formed and valid, an element\
    \ is\n                      present that\n                      o  is consistent\
    \ with the rules and\n                         constraints contained in this\n\
    \                         specification, but\n                      o  is not\
    \ supported by the IOTP Aware\n                         Application which is processing\
    \ the IOTP\n                         Message.\n                      The ElementRef\
    \ attributes of ErrorLocation\n                      elements might refer to the\
    \ corresponding\n                      elements (if they have ID attributes).\n\
    \   ElMissing          Element missing.  Although the document is\n          \
    \            well formed and valid, an element is missing\n                  \
    \    that should have been present if the rules\n                      and constraints\
    \ contained in this\n                      specification are followed.\n     \
    \                 The ElementRef attributes of ErrorLocation\n               \
    \       elements might refer to the corresponding\n                      elements\
    \ (if they have ID attributes).\n   ElContIllegal      Element content illegal.\
    \  Although the\n                      document is well formed and valid, the\n\
    \                      element contains values which do not conform\n        \
    \              the rules and constraints contained in this\n                 \
    \     specification.\n                      The ElementRef attributes of ErrorLocation\n\
    \                      elements might refer to the corresponding\n           \
    \           element (if they have ID attributes).\n                      The IOTP\
    \ Application Core has to replace the\n                      Error Code with \"\
    ElNotSupp\" before\n                      transmission to the counter party, if\
    \ the\n                      ErrorLocation elements refer to\n               \
    \       non-PackagedContent element.\n   EncapProtErr       Encapsulated protocol\
    \ error.  Although the\n                      document is well formed and valid,\
    \ the\n                      Packaged Content of an element contains data\n  \
    \                    from an encapsulated protocol which contains\n          \
    \            errors.\n                      The ElementRef attributes of ErrorLocation\n\
    \                      elements might refer to the corresponding\n           \
    \           element (if they have ID attributes).\n   AttUnexpected      Unexpected\
    \ attribute.  Although the XML\n                      document is well formed\
    \ and valid, the\n                      presence of the attribute is not expected\
    \ in\n                      the particular context according to the\n        \
    \              rules and constraints contained in this\n                     \
    \ specification.\n                      The AttName attributes of ErrorLocation\n\
    \                      elements might refer to the corresponding\n           \
    \           attribute tags.\n   (*)AttNotValid     Attribute not valid.  Invalid\
    \ attribute value\n                      in terms of prescribed syntactical\n\
    \                      characteristics.\n                      The AttName attributes\
    \ of ErrorLocation\n                      elements might refer to the corresponding\n\
    \                      attribute tags.\n                      The IOTP Application\
    \ Core has to replace the\n                      error code with \"XmlNotValid\"\
    \ before\n                      transmission to the counter party.\n   AttNotSupp\
    \         Attribute not supported.  Although the XML\n                      document\
    \ is well formed and valid, and the\n                      presence of the attribute\
    \ in an element is\n                      consistent with the rules and constraints\n\
    \                      contained in this specification, it is not\n          \
    \            supported by the IOTP Aware Application\n                      which\
    \ is processing the IOTP Message.\n   AttMissing         Attribute missing.  Although\
    \ the document is\n                      well formed and valid, an attribute is\n\
    \                      missing that should have been present if the\n        \
    \              rules and constraints contained in this\n                     \
    \ specification are followed.\n                      The AttName attributes of\
    \ ErrorLocation\n                      elements might refer to the corresponding\n\
    \                      attribute tags.\n                      If the attribute\
    \ is required by the IOTP\n                      Document Type Declaration (#REQUIRED)\
    \ the\n                      hints for non-valid attributes should be\n      \
    \                adopted, otherwise these for illegal\n                      attribute\
    \ values.\n   AttValIllegal      Attribute value illegal.  The attribute\n   \
    \                   contains a value which does not conform to\n             \
    \         the rules and constraints contained in this\n                      specification.\n\
    \                      The AttName attributes of ErrorLocation\n             \
    \         elements might refer to the corresponding\n                      attribute\
    \ tags - valid values are:\n                      BrandId: illegal/unknown Brand\
    \ Identifier -\n                      If the brand is not recognized/known by\
    \ any\n                      IOTP Payment Bridge, the IOTP Application\n     \
    \                 Core may offer the registration of a new\n                 \
    \     Payment Instrument.\n                      PaymentInstrumentId: illegal/unknown\n\
    \                      Payment Instrument Identifier - This\n                \
    \      indicates a serious communication problem if\n                      the\
    \ attribute value has been reported by the\n                      same \"wallet\"\
    \ on a previous inquiry\n                      requests.  The IOTP Application\
    \ Core has to\n                      replace the error code with\n           \
    \           \"UnknownError\" before transmission to the\n                    \
    \  counter party.\n                      WalletId: illegal/unknown Wallet Identifier\n\
    \                      - It is assumed that the wallet identifier\n          \
    \            is checked before the pass phrase.  On\n                      invalid\
    \ wallet identifiers, the IOTP\n                      Application Core may open\
    \ the dialog in\n                      order to request the correct wallet\n \
    \                     identifier.  In addition, any pass phrase may\n        \
    \              be supplied by the user.  The dialog should\n                 \
    \     indicate the respective payment brand(s).\n                      The IOTP\
    \ Application Core has to replace the\n                      error code with \"\
    UnknownError\" before\n                      transmission to the counter party.\n\
    \                      Passphrase:   illegal/unknown Pass Phrase -\n         \
    \             The IOTP Application Core may open the\n                      dialog\
    \ in order to request the correct pass\n                      phrase.  If the\
    \ pass phrase is wallet\n                      identifier specific the dialog\
    \ should\n                      display the wallet identifier.  The IOTP\n   \
    \                   Application Core has to replace the error\n              \
    \        code with \"TransportError\" before\n                      transmission\
    \ to the counter party.\n                      Action:  illegal / unknown / unsupported\n\
    \                      Action\n                      PropertyTypeList:  lists\
    \ contains illegal /\n                      unknown / unsupported Property Types\
    \ - The\n                      IOTP Application Core tries only the local\n  \
    \                    resolution but does never transmit any IOTP\n           \
    \           Error Block to the counter party.\n                      CurrCode:\
    \ illegal/unknown/unsupported\n                      Currency Code\n         \
    \             CurrCodeType: illegal/unknown/unsupported\n                    \
    \  Currency Code Type\n                      Amount: illegal/unknown/unsupported\
    \ Payment\n                      Amount\n                      PayDirection: illegal/unknown/unsupported\n\
    \                      Payment Direction\n                      ProtocolId:  \
    \ illegal/unknown/unsupported\n                      Protocol Identifier\n   \
    \                   OkFrom: illegal/unknown/unsupported OkFrom\n             \
    \         Timestamp\n                      OkTo:   illegal/unknown/unsupported\
    \ OkTo\n                      Timestamp\n                      ConsumerPayId:\
    \ illegal/unknown Consumer\n                      Payment Identifier\n       \
    \               PaymentHandlerPayId: illegal/unknown Payment\n               \
    \       Handler Payment Identifier\n                      PayId: illegal/unknown\
    \ Payment Identifier\n   AttValNotRecog     Attribute Value Not Recognized.  The\n\
    \                      attribute contains a value which the IOTP\n           \
    \           Aware Application generating the message\n                      reporting\
    \ the error could not recognize.\n                      The AttName attributes\
    \ of ErrorLocation\n                      elements might refer to the corresponding\n\
    \                      attribute tags.\n   MsgTooLarge        Message too large.\
    \  The message is too large\n                      to be processed by the IOTP\
    \ Payment Bridge\n                      (or IOTP Application Core).\n   ElTooLarge\
    \         Element too large.  The element is too large\n                     \
    \ to be processed by the IOTP Payment Bridge\n                      (or IOTP Application\
    \ Core).\n                      The ElementRef attributes of ErrorLocation\n \
    \                     elements might refer to the corresponding\n            \
    \          elements.\n   ValueTooSmall      Value too small or early.  The value\
    \ of all\n                      or part of an element content or an\n        \
    \              attribute, although valid, is too small.\n                    \
    \  The ErrorLocation elements might refer to\n                      the corresponding\
    \ attribute tags or\n                      elements.\n   ValueTooLarge      Value\
    \ too large or in the future.  The value\n                      of all or part\
    \ of an element content or an\n                      attribute, although valid,\
    \ is too large.\n                      The ErrorLocation elements might refer\
    \ to\n                      the corresponding attribute tags or\n            \
    \          elements.\n   ElInconsistent     Element Inconsistent.  Although the\
    \ document\n                      is well formed and valid, according to the\n\
    \                      rules and constraints contained in this\n             \
    \         specification:\n                      o  the content of an element is\
    \ inconsistent\n                         with the content of other elements or\n\
    \                         their attributes, or\n                      o  the value\
    \ of an attribute is inconsistent\n                         with the value of\
    \ one or more other\n                         attributes.\n                  \
    \    The Error Description may contain further\n                      explanations.\n\
    \                      The ErrorLocation elements might refer to\n           \
    \           the corresponding attribute tags or elements\n                   \
    \   that are inconsistent.\n   TransportError     Transport Error.  This error\
    \ code is used to\n                      indicate that there is a problem with\
    \ the\n                      transport mechanism that is preventing the\n    \
    \                  message from being received.  It is typically\n           \
    \           associated with a \"Transient Error\".\n                      The\
    \ connection to some periphery or the\n                      counter party could\
    \ not be established,\n                      is erroneous, or has been lost.\n\
    \                      The Error Description may contain further\n           \
    \           narrative explanations, e.g., \"chip card\n                      does\
    \ not respond\", \"remote account manager\n                      unreachable\"\
    , \"Internet connection to xyz\n                      lost\", \"no Internet connection\
    \ available\",\n                      \"no modem connected\", or \"serial port\
    \ to\n                      modem used by another application\".  This\n     \
    \                 text should be shown to the end user.  If\n                \
    \      timeout has occurred at the Consumer this\n                      text should\
    \ be shown and the Consumer may\n                      decide how to proceed -\
    \ alternatives are\n                      retry, payment transaction suspension,\
    \ and\n                      cancellation.\n   MsgBeingProc       Message Being\
    \ Processed.  This error code is\n                      only used with a Severity\
    \ of Transient\n                      Error.  It indicates that the previous\n\
    \                      message, which may be an exchange message or\n        \
    \              a request message, is being processed and,\n                  \
    \    if no response is received by the time\n                      indicated by\
    \ the \"MinRetrySecs\" attribute,\n                      then the original message\
    \ should be resent.\n   SystemBusy         System Busy.  This error code is only\
    \ used\n                      with a Severity of Transient Error.  It\n      \
    \                indicates that the IOTP Payment Bridge or\n                 \
    \     Existing Payment Software that received the\n                      API request\
    \ is currently too busy to handle\n                      it.  If no response is\
    \ received by the time\n                      indicated by the \"MinRetrySecs\"\
    \ attribute,\n                      then the original message should be resent.\n\
    \                      The Error Description may provide further\n           \
    \           explanations, e.g., \"wallet / chip card\n                      reader\
    \ is unavailable or locked by another\n                      payment transaction\"\
    , \"payment gateway is\n                      overloaded\", \"unknown chip card\
    \ reader\", or\n                      \"unrecognized chip card inserted, change\n\
    \                      chip card\".\n                      The Consumer's IOTP\
    \ Application Core may\n                      display the error description and\
    \ ask the\n                      Consumer about the continuation -\n         \
    \             alternatives are retry, payment transaction\n                  \
    \    suspension, and cancellation.\n   UnknownError       Unknown Error.  Indicates\
    \ that the\n                      transaction cannot complete for some reason\n\
    \                      that is not covered explicitly by any of the\n        \
    \              other errors.  The Error description\n                      attribute\
    \ should be used to indicate the\n                      nature of the problem.\n\
    \                      The ErrorLocation elements might refer to\n           \
    \           the corresponding attribute tags or elements\n                   \
    \   that are inconsistent.\n   (*)SyntaxError     Syntax Error.  An (unknown)\
    \ syntax error has\n                      occurred.\n                      The\
    \ ErrorLocation elements might refer to\n                      the corresponding\
    \ attribute tags or elements\n                      that are inconsistent.\n \
    \                     The IOTP Application Core has to replace the\n         \
    \             error code with \"XmlNotValid\" or\n                      \"UnknownError\"\
    \ before transmission to the\n                      counter party.\n   (*)ReqRefused\
    \      Request refused.  The API request is\n                      (currently)\
    \ refused by the IOTP Payment\n                      Bridge.  The error description\
    \ may provide\n                      further explanations, e.g., \"wallet / chip\n\
    \                      card reader is unavailable or locked by\n             \
    \         another payment transaction\", \"payment\n                      gateway\
    \ is overloaded\", \"unknown chip card\n                      reader\", or \"\
    unrecognized chip card\n                      inserted, change chip card\".\n\
    \                      The Consumer's IOTP Application Core may\n            \
    \          display the error description and ask the\n                      Consumer\
    \ about the continuation -\n                      alternatives are retry, payment\
    \ transaction\n                      suspension, and cancellation.  Denials due\
    \ to\n                      invalid Process States should be signaled by\n   \
    \                   \"BusinessError\".  Typically, this kind of\n            \
    \          error is not passed to the counter party's\n                      IOTP\
    \ Application Core.  Otherwise, it maps to\n                      \"TransportError\"\
    \ or \"UnknownError\".\n   (*)ReqNotSupp      Request not supported.  The API\n\
    \                      function(ality) has not been implemented in\n         \
    \             the IOTP Payment Bridge.  Typically, this\n                    \
    \  kind of error is not passed to the\n                      counter party's IOTP\
    \ Application Core.\n                      Otherwise, it maps to \"TransportError\"\
    \ or\n                      \"UnknownError\".\n   (*)BusError        Business\
    \ Error.  The API request has been\n                      rejected because some\
    \ payment transaction\n                      has an illegal payment status.\n\
    \                      Particularly, this error code is used to\n            \
    \          signal any raise of payment business layered\n                    \
    \  failures.\n                      The ErrorLocation elements may refer to\n\
    \                      payment transactions using the party's\n              \
    \        Payment Identifier - it defaults to the\n                      current\
    \ transaction or might contain the\n                      current payment transaction\
    \ party's Payment\n                      Identifier - identified by the ElementRef\n\
    \                      attribute while the AttName attribute is\n            \
    \          fixed with \"PayId\".\n                      The IOTP Application Core\
    \ must inquire the\n                      IOTP Payment Bridge about the actual\
    \ Process\n                      State which actually encodes the business\n \
    \                     error (\"Inquire Process State\").\n                   \
    \   This error code must not be\n                      passed to the counter party's\
    \ IOTP\n                      Application Core.\n                        Table\
    \ 2: Common Error Codes\n   The IOTP Payment Bridge may also use the error description\
    \ in order\n   to notify the Consumer about further necessary steps for failure\n\
    \   resolution, e.g., \"Sorry, your payment transaction failed.\n   Unfortunately,\
    \ you have been charged, please contact your issuer.\"\n"
- title: 3.2.  Attributes and Elements
  contents:
  - "3.2.  Attributes and Elements\n   The following table explains the XML attributes\
    \ in alphabetical order\n   - any parenthesized number after the attribute tag\
    \ is a recommended\n   maximal length of the attribute value in characters:\n\
    \   Attribute           Description\n   ---------           -----------\n   Amount\
    \    (11)      Indicates the payment amount to be paid in\n   AmountFrom(11) \
    \     whole and fractional units of the currency.\n   AmountTo  (11)      For\
    \ example $245.35 would be expressed\n                       \"245.35\".  Note\
    \ that values smaller than the\n                       smallest denomination are\
    \ allowed.  For\n                       example one tenth of a cent would be\n\
    \                       \"0.001\".\n   AuthenticationId    An identifier specified\
    \ by the\n                       authenticator which, if returned by the\n   \
    \                    organization that receives the\n                       authentication\
    \ request, will enable the\n                       authenticator to identify which\n\
    \                       authentication is being referred to.\n   BrandId  (128)\
    \      This contains a unique identifier for the\n                       brand\
    \ (or promotional brand).  It is used to\n                       match against\
    \ a list of Payment Instruments\n                       which the Consumer holds\
    \ to determine\n                       whether or not the Consumer can pay with\
    \ the\n                       Brand.\n                       Values of BrandId\
    \ are managed under\n                       procedure being described in the IOTP\n\
    \                       protocol specification.\n   BrandLogoNetLocn    The net\
    \ location which can be used to\n                       download the logo for\
    \ the organization (cf.\n                       IOTP Specification).\n       \
    \                The content of this attribute must conform\n                \
    \       to [URL].\n   BrandName           This contains the name of the brand,\
    \ for\n                       example \"MasterCard Credit\".  This is the\n  \
    \                     description of the Brand which is displayed\n          \
    \             to the consumer in the Consumer's language\n                   \
    \    defined by \"xml:lang\".  For example it might\n                       be\
    \ \"American Airlines Advantage Visa\".  Note\n                       that this\
    \ attribute is not used for matching\n                       against the payment\
    \ instruments held by the\n                       Consumer.\n   BrandNarrative\
    \      This optional attribute is\n                       used by the Merchant\
    \ to indicate some\n                       special conditions or benefit which\
    \ would\n                       apply if the Consumer selected that brand.\n \
    \                      For example \"5% discount\", \"free shipping\n        \
    \               and handling\", \"free breakage insurance for\n              \
    \         1 year\", \"double air miles apply\", etc.\n   CallBackFunction    A\
    \ function which is called whenever there is\n                       a change\
    \ of Process State or payment\n                       progress, e.g., for display\
    \ updates.  However,\n                       the IOTP Payment Bridge may use its\
    \ own\n                       mechanisms and dialog boxes.\n   CallBackLanguageList\n\
    \                       A list of language codes which contain, in\n         \
    \              order of preference, the languages in which\n                 \
    \      the text passed to the Call Back function\n                       will\
    \ be encoded.\n   CompletionCode (14) Indicates how the process completed.\n \
    \                      It is required if ProcessState is set to\n            \
    \           \"Failed\" otherwise it is ignored.  Valid\n                     \
    \  values as well as recovery options are given\n                       in the\
    \ IOTP specification.\n                       The IOTP Payment Bridge may also\
    \ use the\n                       Status Description to notify the Consumer\n\
    \                       about further necessary steps in order to\n          \
    \             resolve some kind of business failures,\n                      \
    \ e.g.,\n                       o  \"sorry, your payment transaction failed.\n\
    \                          Unfortunately, you have been charged,\n           \
    \               please contact your issuer.\"\n                       o  \"insufficient\
    \ capacity left (on your\n                          stored value card) for refund\"\
    ,\n                       o  \"payment failed/chip card error/internal\n     \
    \                     error, please contact your payment\n                   \
    \       instrument's issuer\"\n   ConsumerDesc        A narrative description\
    \ of the Consumer.\n   ConsumerPayId (14)  An unique identifier specified by the\n\
    \                       Consumer that, if returned by the Payment\n          \
    \             Handler in another Payment Scheme Component\n                  \
    \     or by other means, enables the Consumer to\n                       identify\
    \ which payment is being referred to.\n                       This unique identifier\
    \ is generated by the\n                       IOTP Application Core and submitted\
    \ to the\n                       IOTP Payment Bridge on every API call.  It\n\
    \                       may equal the Payment Handler Payment\n              \
    \         Identifiers but need not necessarily be so.\n                      \
    \ The uniqueness extends to multiple payment\n                       instruments,\
    \ payment brands, payment\n                       protocols, wallet identifiers,\
    \ and even\n                       multiple IOTP Payment Bridges.\n   ContStatus\
    \          During payment progress, this status value\n                      \
    \ indicates whether the payment needs to be\n                       continued\
    \ with further IOTP Payment Scheme\n                       Component exchanges\
    \ with the remote party.\n                       \"End\" indicates that the reported\
    \ payment\n                       scheme data is the last data to be exchanged\n\
    \                       with the counter party.\n   ContentSoftwareId   This contains\
    \ information that identifies\n                       the software that generated\
    \ the content of\n                       the element.  Its purpose is to help\
    \ resolve\n                       interoperability problems that might occur\n\
    \                       as a result of incompatibilities between\n           \
    \            messages produced by different software.  It\n                  \
    \     is a single text string in the language\n                       defined\
    \ by xml:lang.  It must contain, as a\n                       minimum:\n     \
    \                  o  the name of the software manufacturer,\n               \
    \        o  the name of the software,\n                       o  the version of\
    \ the software, and\n                       o  the build of the software.\n  \
    \ CurrCodeType (14)   Indicates the domain of the CurrCode.  This\n          \
    \             attribute is included so that the currency\n                   \
    \    code may support nonstandard currencies\n                       such as frequent\
    \ flyer point, trading\n                       stamps, etc.  Its values may be\n\
    \                       o  ISO-4217-A, the default, indicates the\n          \
    \                currency code is the three-letter\n                         \
    \ alphabetic code that conform to ISO-4217\n                          [ISO4217].\n\
    \                       o  IOTP indicates that the values of\n               \
    \           CurrCode are managed under the procedure\n                       \
    \   described in [IOTP].\n   CurrCode  (14)      A code which identifies the currency\
    \ to be\n                       used in the payment.  The domain of valid\n  \
    \                     currency codes is defined by \"CurrCodeType\"\n   MerchantPayId\
    \  (14) An private identifier specified by the\n                       Merchant\
    \ which will enable the Merchant to\n                       identify which payment\
    \ is being referred to.\n                       It is a pure private item and\
    \ is never sent\n                       to any other party.  It is provided by\
    \ the\n                       IOTP Payment Bridge on payment preparation\n   \
    \                    during brand compilation.\n                       Cf. To\
    \ \"ConsumerPayId\" for note about\n                       uniqueness.\n   MerchantOrgId\
    \  (64) A local item that might refer to some\n                       specific\
    \ shop in a multi shop environment.\n                       This item is optional\
    \ and might enrich the\n                       Wallet Identifier which itself\
    \ can be used\n                       for the same purpose.\n   Name         \
    \       Distinguishes between multiple occurrences\n                       of\
    \ Packaged Content Elements at the same\n                       point in IOTP.\
    \  For example:\n                       <ABCD>\n                         <PackagedContent\
    \ Name='FirstPiece'>\n                           snroasdfnas934k\n           \
    \              </PackagedContent>\n                         <PackagedContent Name='SecondPiece'>\n\
    \                           dvdsjnl5poidsdsflkjnw45\n                        \
    \ </PackagedContent>\n                       </ABCD>\n                       The\
    \ \"Name\" attribute may be omitted, for\n                       example if there\
    \ is only one Packaged\n                       Content element.\n   OkFrom  (30)\
    \        The date and time in UTC Format range\n   OkTo  (30)          indicated\
    \ by the merchant in which the\n                       Payment Handler may accept\
    \ the payment.\n                       For more information, see [UTC].\n   Passphrase\
    \  (32)    Payment wallets may use pass phrase\n                       protection\
    \ for transaction data and payment\n                       instruments' data.\
    \  However, it is assumed\n                       that there exists a public and\
    \ customizable\n                       payment instrument identifier such that\n\
    \                       these identifiers together with their\n              \
    \         relationship to payment brands, payment\n                       protocols,\
    \ payment directions, and currency\n                       amounts can be queried\
    \ by the IOTP\n                       application without any pass phrase\n  \
    \                     knowledge.\n   PayDirection        Indicates the direction\
    \ in which the\n                       payment for which a Brand is being selected\n\
    \                       is to be made.  Its values may be:\n                 \
    \      o  Debit: The sender of the Payment Request\n                         \
    \ Block (e.g., the Consumer) to which this\n                          Brand List\
    \ relates will make the payment\n                          to the Payment Handler,\
    \ or\n                       o  Credit: The sender of the Payment Request\n  \
    \                        Block to which this Brand List relates\n            \
    \              will receive a payment from the Payment\n                     \
    \     Handler.\n   PayId (14)          This attribute is introduced for API\n\
    \                       simplification:\n                       o  The Consumer\
    \ has to identify PayId and\n                          ConsumerPayId.\n      \
    \                 o  The Merchant has to identify PayId and\n                \
    \          MerchantPayId.\n                       o  The Payment Handler has to\
    \ identify PayId\n                          and Payment Handler Pay Id.\n   PayInstId\
    \           This contains the unique identifier used\n                       internally\
    \ by the IOTP Payment\n                       Bridge/Existing Payment Software.\n\
    \   PayInstName         This contains the user-defined name of the\n         \
    \              payment instrument.  There exist no\n                       (technical)\
    \ constraints like uniqueness.  The\n                       \"xml:lang\" attribute\
    \ denotes the language\n                       encoding of its value.\n   PaymentHandlerDesc\
    \  A narrative description of the Payment\n                       Handler.\n \
    \  PaymentHandlerPayId An unique identifier specified by the\n     (14)      \
    \        Payment Handler that, if returned by the\n                       Consumer\
    \ in another Payment Scheme Component\n                       or by other means,\
    \ enables the Payment\n                       Handler to identify which payment\
    \ is being\n                       referred to.  It is required whenever it is\n\
    \                       known.\n                       Cf. To \"ConsumerPayId\"\
    \ for note about\n                       uniqueness.\n   PaymentInstrumentId An\
    \ identifier for a specific payment\n     (32)              instrument, e.g.,\
    \ \"credit card\", \"Mondex card\n                       for English Pounds\"\
    .  This identifier is\n                       fully customizable.  It is assumed,\
    \ that it\n                       does not contain confidential information or\n\
    \                       even an indication of it.  The payment\n             \
    \          instrument identifier is unique within each\n                     \
    \  payment brand.  It is displayed to the\n                       Consumer during\
    \ brand selection.\n   PayReceiptNameRefs  Optionally contains element references\
    \ to\n     (32)              other elements (containing payment scheme\n     \
    \                  specific data) that together make up the\n                \
    \       receipt.  Note that each payment scheme\n                       defines\
    \ in its supplement the elements that\n                       must be referenced\n\
    \                       The IOTP Application Core should save all\n          \
    \             the components referenced so that the\n                       payment\
    \ receipt can be reconstructed when\n                       required.\n   PayReqNetLocn\
    \       The Net Location indicating where an\n                       unsecured\
    \ Payment Request message should be\n                       sent if this protocol\
    \ choice is used.\n                       The content of this attribute must conform\n\
    \                       to [URL] and depends on the Transport\n              \
    \         Mechanism.\n   PercentComplete (3) A number between 0 and 100 which\
    \ indicates\n                       the progress of the payment transaction. \
    \ The\n                       values range between 0 and 99 for pending\n    \
    \                   and suspended transactions.\n   ProcessState        Contains\
    \ a Process State Code that\n                       indicates the current state\
    \ of the process\n                       being carried out.  Valid values are:\n\
    \                       o  NotYetStarted.  The Payment Request Block\n       \
    \                   has been received but processing of the\n                \
    \          Payment Request has not yet started\n                       o  InProgress.\
    \  The payment transaction is\n                          pending.  The processing\
    \ of the (Payment)\n                          Request Block has started but it\
    \ is not\n                          yet complete.\n                       o  (*)Suspended:\
    \ The payment transaction has\n                          been suspended and can\
    \ be resumed.\n                       This process state is mapped to\n      \
    \                 \"InProgress\", if it is passed to the\n                   \
    \    counter party's IOTP Application Core.\n                       o  CompletedOk.\
    \  The processing of the (Payment)\n                          Request Block and\
    \ any following Payment\n                          Exchange Blocks has completed\
    \ successfully.\n                       o  Failed.  The payment processing has\
    \ finally\n                          failed for a Business Error.\n          \
    \             o  ProcessError.  This value is only used\n                    \
    \      when the Status Component is being used in\n                          connection\
    \ with an Inquiry Request Trading\n                          Block.  It indicates\
    \ there was a Technical\n                          Error in the Request Block\
    \ which is being\n                          processed or some internal processing\n\
    \                          error.  Each party's IOTP Payment Bridge\n        \
    \                  uses this value in order to notify the\n                  \
    \        IOTP Application Core about the presence\n                          of\
    \ technical errors.\n   PropertyType  (14)  The property type defines codes used\
    \ for\n                       interrogation of specific properties about a\n \
    \                      payment instrument.  They are unique for each\n       \
    \                payment brand.  The predefined property \"all\"\n           \
    \            is used on general inquiries.  However, these\n                 \
    \      property types are not used during normal\n                       payment\
    \ processing.  E.g., they may apply to\n                       payment brand specific\
    \ transactions or\n                       out-of-band failure resolution.\n  \
    \ PropertyDesc        The property description carries the\n                 \
    \      respective human readable property (value)'s\n                       description.\n\
    \   PropertyValue       The actual property value intends automatic\n        \
    \               post processing.\n   ProtocolBrandId (64)This is an identifier\
    \ to be used with a\n                       particular payment protocol.  For\
    \ example,\n                       SET and EMV have their own well defined, yet\n\
    \                       different, values for the Brand identifier\n         \
    \              to be used with each protocol.  The valid values\n            \
    \           of this attribute are defined in the\n                       supplement\
    \ for the payment protocol\n                       identified by \"ProtocolId\"\
    \ that describes\n                       how the payment protocol works with IOTP.\n\
    \                       Identifier maps to at most one Protocol\n            \
    \           Brand Identifier.\n   ProtocolId  (64)    An identifier for a specific\
    \ payment\n                       protocol and version, e.g., \"SETv1.0\",\n \
    \                      \"ecash\".  Valid values are defined by\n             \
    \          supplements to the IOTP specification and\n                       they\
    \ are unique within each payment brand.\n   ProtocolIds         A sequence of\
    \ Protocol Identifiers\n   ProtocolName        A narrative description of the\
    \ payment\n                       protocol and its version in the language\n \
    \                      identified by \"xml:lang\".  For example\n            \
    \           \"Secure Electronic Transaction Version 1.0\".\n                 \
    \      Its purpose is to help provide information\n                       on the\
    \ payment protocol being used if\n                       problems arise.\n   SecPayReqNetLocn\
    \    The Net Location indicating where a secured\n                       Payment\
    \ Request message should be sent if\n                       this protocol choice\
    \ is used.\n                       A secured payment involves the use of a\n \
    \                      secure channel such as [TLS] in order\n               \
    \        to communicate with the Payment Handler.\n                       The\
    \ content of this attribute must conform\n                       to [URL].\n \
    \  ReceiverOrgId       The Organization Identification which\n               \
    \        receives the payment bridge processing\n                       Trading\
    \ Role Data PackagedContent.\n   StatusDesc  (256)   An optional textual description\
    \ of the\n                       current process state in the language\n     \
    \                  identified by \"xml:lang\" that should be\n               \
    \        displayed to the Consumer.  The usage of this\n                     \
    \  attribute is defined in the payment\n                       supplement for\
    \ the payment method being\n                       used.  Particularly, it provides\
    \ hints for\n                       out-of-band failure resolution.  Its length\n\
    \                       is limited to 256 characters.\n   StyleSheetNetLocn  \
    \ This contains the net location to a style\n                       sheet with\
    \ visualisation rules for XML\n                       encoded data.\n   TimeStamp\
    \  (30)     The date and time in UTC Format when the\n                       payment\
    \ transaction has been started.\n                       For more information on\
    \ UTC, see [UTC].\n   WalletId  (32)      Many existing payment wallet software\
    \ are\n                       multiple wallet capable.  The Wallet\n         \
    \              Identifier selects the actual wallet.  It is\n                \
    \       assumed, that the wallet identifier is a\n                       public\
    \ item, that might be stored by the\n                       IOTP Application Core.\n\
    \   xml:lang            Defines the language used by the Process\n           \
    \            State Description attribute (cf. IOTP\n                       Specification)\n\
    \                            Table 3: Attributes\n   The following table explains\
    \ the XML elements in alphabetical order:\n   Element             Description\n\
    \   -------             -----------\n   Algorithm           This contains information\
    \ which describes\n                       an Algorithm that may be used to generate\n\
    \                       the Authentication response.\n                       The\
    \ algorithm that may be used is\n                       identified by the Name\
    \ attribute (cf. IOTP\n                       Specification).\n   AuthReqPackagedContent\
    \   The Authentication Request Packaged\n                       Content originates\
    \ from a Authentication\n                       (Data/Response) Component's content\n\
    \                       whereby the outermost element tags are\n             \
    \          prefixed with \"AuthReq\".  Its declaration\n                     \
    \  coincides with the Packaged Content's\n                       declaration (cf.\
    \ IOTP Specification).  It\n                       encapsulates the authentication\
    \ challenge\n                       value.  The content of this information is\n\
    \                       defined in the supplement for a payment\n            \
    \           protocol.\n   AuthResPackagedContent   The Authentication Response\
    \ Packaged\n                       Content originates from a Authentication\n\
    \                       Response Component's content whereby the\n           \
    \            outermost element tags are prefixed with\n                      \
    \ \"AuthRes\".\n                       Its declaration coincides with the\n  \
    \                     Packaged Content's declaration (cf. IOTP\n             \
    \          Specification).  It encapsulates the\n                       authentication\
    \ response value.  The\n                       content of this information is\
    \ defined in\n                       the supplement for a payment protocol.\n\
    \   BrandPackagedContent     Container for further payment brand\n           \
    \            description.  Its content originates from\n                     \
    \  a Brand Element content whose outermost\n                       element tags\
    \ are prefixed with \"Brand\".\n                       Its declaration coincides\
    \ with the\n                       Packaged Content's declaration (cf. IOTP\n\
    \                       Specification).\n   BrandSelBrandInfoPackagedContent\n\
    \                       This contains any additional data that\n             \
    \          may be required by a particular payment\n                       brand.\
    \  It forms the content of the Brand\n                       Selection Brand Info\
    \ Element.\n   BrandSelProtocolAmountInfoPackagedContent\n                   \
    \    This contains any additional data that\n                       may be required\
    \ by a particular payment\n                       brand in the format.  It forms\
    \ the content\n                       of the Brand Selection Protocol Amount\n\
    \                       Info Element.\n   BrandSelCurrencyAmountInfoPackagedContent\n\
    \                       This contains any additional data that is\n          \
    \             payment brand and currency specific in\n                       the\
    \ format.  It forms the content of the\n                       Brand Selection\
    \ Currency Amount Info\n                       Element.\n   MerchantData     \
    \   Any merchant related data that might be\n                       used by the\
    \ IOTP Payment Bridge for\n                       different purposes, e.g., it\
    \ might\n                       contain IDs to access some mall data,\n      \
    \                 but not cryptographic keys.  Its Packaged\n                \
    \       declaration coincides with the Content's\n                       declaration\
    \ (cf. IOTP Specification).\n   PackagedContent     Generic Container for non-IOTP\
    \ data (cf.\n                       IOTP Specification).\n   PayProtocolPackagedContent\n\
    \                       The Pay Protocol Packaged Content\n                  \
    \     originates from a Pay Protocol\n                       Element's content\
    \ whereby the outermost\n                       element tags are prefixed with\n\
    \                       \"PayProtocol\".  It contains information\n          \
    \             about the protocol which is used by\n                       the\
    \ payment protocol.  The content of\n                       this information is\
    \ defined in the\n                       supplement for a payment protocol.  Its\n\
    \                       declaration coincides with the Packaged\n            \
    \           Content's declaration (cf. IOTP\n                       Specification).\n\
    \   PaySchemePackagedContent\n                       The PayScheme Packaged Content\
    \ originates\n                       from a Payment Scheme Component's content\n\
    \                       whereby the outermost element tags are\n             \
    \          prefixed with \"PayScheme\".  Its\n                       declaration\
    \ coincides with the Packaged\n                       Content's declaration (cf.\
    \ IOTP\n                       Specification).  It carries the payment\n     \
    \                  specific data.  The content of this\n                     \
    \  information is defined in the supplement\n                       for a payment\
    \ protocol.\n   ProtocolAmountPackagedContent\n                       The Protocol\
    \ Amount Packaged Content\n                       originates from a Protocol Amount\n\
    \                       Element's content whereby the outermost\n            \
    \           element tags are prefixed with \"Amount\".\n                     \
    \  Its declaration coincides with the\n                       Packaged Content's\
    \ declaration (cf. IOTP\n                       Specification).  It contains information\n\
    \                       about the protocol which is used by the\n            \
    \           payment protocol.  The content of this\n                       information\
    \ is defined in the supplement\n                       for a payment protocol.\n\
    \   ProtocolBrandPackagedContent\n                       The Protocol Brand Packaged\
    \ Content\n                       originates from a Protocol Brand\n         \
    \              Element's content whereby the outermost\n                     \
    \  element tags are prefixed with\n                       \"ProtocolBrand\". \
    \ Its declaration\n                       coincides with the Packaged Content's\n\
    \                       declaration (cf. IOTP Specification).  It\n          \
    \             contains information about the brand\n                       which\
    \ might be used by the payment\n                       protocol.  The content\
    \ of this information\n                       is defined in the supplement for\
    \ a\n                       payment protocol.\n   ResponsePackagedContent\n  \
    \                     Container for authentication response\n                \
    \       data.  Its content originates from a\n                       Authentication\
    \ Response Component's\n                       Packaged Content whose outermost\
    \ element\n                       tags are prefixed with \"Response\".  Its\n\
    \                       declaration coincides with the Packaged\n            \
    \           Content's declaration (cf. IOTP\n                       Specification).\n\
    \   TradingRoleDataPackagedContent\n                       The TradingRoleData\
    \ Packaged Content\n                       originates from a TradingRoleData\n\
    \                       Component's content whereby the outermost\n          \
    \             element tags are prefixed with\n                       \"TradingRoleData\"\
    .  Its declaration\n                       coincides with the Packaged Content's\n\
    \                       declaration (cf. IOTP Specification).  It\n          \
    \             contains information from Merchant to\n                       Payment\
    \ Handler via Consumer about the\n                       protocol which is used\
    \ by the payment.\n                       The content of this information is\n\
    \                       defined in the supplement for a payment\n            \
    \           protocol.  The Name attribute in this\n                       packaged\
    \ contents must include prefix as\n                       \"Payment:\" to indicate\
    \ that the payment\n                       bridge processes this, for example\n\
    \                       \"Payment:SET-OD\".  See [SET/IOTP] for\n            \
    \           more information.\n                       The element's declaration\
    \ coincides with\n                       the Packaged Content's declaration (cf.\n\
    \                       IOTP Specification).\n                             Table\
    \ 4: Elements\n   XML definition:\n   <!ENTITY % AuthReqPackagedContent      \
    \ \"PackagedContent\">\n   <!ENTITY % AuthResPackagedContent       \"PackagedContent\"\
    >\n   <!ENTITY % BrandPackagedContent         \"PackagedContent\">\n   <!ENTITY\
    \ % BrandSelInfoPackagedContent  \"PackagedContent\">\n   <!ENTITY % BrandSelProtocolAmountPackagedContent\n\
    \                                           \"PackagedContent\">\n   <!ENTITY\
    \ % BrandSelCurrencyAmountPackagedContent\n                                  \
    \         \"PackagedContent\">\n   <!ENTITY % ProtocolAmountPackagedContent\n\
    \                                           \"PackagedContent\">\n   <!ENTITY\
    \ % PayProtocolPackagedContent   \"PackagedContent\">\n   <!ENTITY % TradingRoleDataPackagedContent\
    \ \"PackagedContent\">\n   <!ENTITY % MerchantData \"PackagedContent\">\n   <!ENTITY\
    \ % PaySchemePackagedContent     \"PackagedContent\">\n"
- title: 3.3.  Process States
  contents:
  - "3.3.  Process States\n   The IOTP Payment API supports six different attribute\
    \ values that\n   encode the transaction status from the IOTP's point of view,\
    \ i.e.,\n   the appropriate point of view at the interface between the IOTP\n\
    \   Application Core and IOTP Payment Bridge.  This point of view does\n   not\
    \ completely mimic the more detailed view on the actual payment by\n   the actual\
    \ Existing Payment Software or IOTP Payment Bridge.\n   The following three tables\
    \ distinguish between the Merchant's,\n   Consumer's, and Payment Handlers' environment.\
    \  They extend the\n   aforementioned explanations towards the mapping between\
    \ IOTP process\n   states and the internal payment scheme related states of the\
    \ Existing\n   Payment Software/IOTP Payment Bridge.\n"
- title: 3.3.1.  Merchant
  contents:
  - "3.3.1.  Merchant\n   The Merchant's point of view of payment is limited to the\
    \ local\n   payment initiation being interlaced with order processing because\n\
    \   IOTP assigns the actual payment processing to the Payment Handler.\n   ProcessState\
    \        Description\n   ------------        -----------\n   NotYetStarted   \
    \    The Payment Transaction exists within the\n                       IOTP Application\
    \ Core, i.e., the\n                       Merchant's shop has already signaled\
    \ to\n                       the IOTP Application Core that an IOTP\n        \
    \               transaction has been initiated by the\n                      \
    \ Consumer.\n                       However, neither any API call has been\n \
    \                      issued to the IOTP Payment Bridge nor has\n           \
    \            the IOTP Order Request has been created.\n   InProgress         \
    \ The IOTP Application changes the process\n                       state to this\
    \ value when it issues the\n                       first API call to the Payment\
    \ Bridge\n                       during Brand List compilation.\n            \
    \           This value indicates that the Payment\n                       Bridge\
    \ might have some knowledge about\n                       the expected payment\
    \ or might have\n                       performed some preparatory tasks (even\n\
    \                       with the Payment Handler out-of-band to\n            \
    \           IOTP).\n                       However, this value does not indicate\n\
    \                       that any IOTP Order Request has been\n               \
    \        created and transmitted to the Consumer.\n   Suspended           The\
    \ IOTP transaction has been suspended\n                       before the order\
    \ request block has been\n                       transmitted to the Consumer.\n\
    \                       Implicitly, the payment is also deferred.\n   CompletedOk\
    \         The IOTP Order Request has been\n                       successfully\
    \ created and transmitted to\n                       the Consumer.  Actually,\
    \ this process\n                       state indicates only that the order\n \
    \                      processing has been finished.\n                       But\
    \ it contains no indication about the\n                       status of the actual\
    \ payment, which is\n                       accepted by the Payment Handler.\n\
    \                       However, successful order processing\n               \
    \        signals the IOTP Application Core that a\n                       payment\
    \ with some specific parameters is\n                       expected within the\
    \ near future.  And this\n                       signal might be used by the Existing\n\
    \                       Payment Software for similar purposes.\n             \
    \          This attribute might be interpreted as\n                       successful\
    \ preparation of the payment\n                       system.\n               \
    \        Particularly, it is expected that the\n                       Existing\
    \ Payment Software maps this IOTP\n                       status value to some\
    \ other internal\n                       value, e.g., \"NotYetStarted\", that\
    \ is more\n                       accurate from its point of view.\n         \
    \              As IOTP provides no communication channel\n                   \
    \    between the Merchant and Payment Handler,\n                       any change\
    \ of payment process state will\n                       be initiated out-of-band\
    \ to IOTP, e.g., by\n                       electronic statements of account or\n\
    \                       payment scheme specific mechanisms.\n   Failed       \
    \       The IOTP transaction, i.e., order\n                       processing,\
    \ has failed for some\n                       (business) reason and it is known\
    \ that no\n                       payment will occur.\n                      \
    \ This indication might be used to clear\n                       all data about\
    \ this transaction within\n                       the Existing Payment Bridge\
    \ (by\n                       \"RemovePaymentLog\" or\n                      \
    \ \"ChangeProcessState\") or to reverse any\n                       preparation\
    \ (with the Payment Handler\n                       out-of-band to IOTP).\n  \
    \                     However, the ideal point of view of IOTP\n             \
    \          suspects that the actual payment\n                       transaction\
    \ has been neither started nor\n                       initiated.\n   ProcessError\
    \        The IOTP transaction, i.e., order\n                       processing,\
    \ has failed for some\n                       (technical) reason and it is known\
    \ that\n                       no payment will occur.\n                      \
    \ This indication might be used to clear\n                       all data about\
    \ this transaction within\n                       the Existing Payment Bridge\
    \ (by\n                       \"RemovePaymentLog\" or\n                      \
    \ \"ChangeProcessState\") or to reverse any\n                       preparation\
    \ (with the Payment Handler\n                       out-of-band to IOTP).\n  \
    \                     However, the ideal point of view of IOTP\n             \
    \          suspects that the actual payment\n                       transaction\
    \ has been neither started nor\n                       initiated.\n          \
    \                   Table 5: Merchant\n"
- title: 3.3.2.  Consumer
  contents:
  - "3.3.2.  Consumer\n   The Consumer's IOTP Application Core restricts its point\
    \ of view to\n   the payment transaction.  It is assumed that the IOTP Payment\
    \ Bridge\n   handles the preceding brand selection process in a stateless manner.\n\
    \   ProcessState        Description\n   ------------        -----------\n   NotYetStarted\
    \       This encodes the initial process state of\n                       any\
    \ IOTP payment transaction.  This value\n                       is set during\
    \ brand selection but it\n                       normally will not change during\
    \ the whole brand\n                       selection process.\n   InProgress  \
    \        With the issuance of the Start Payment\n                       Consumer\
    \ API call, the IOTP Application\n                       Core changes the process\
    \ state to this\n                       value.\n   Suspended           The payment\
    \ transaction has been\n                       suspended.  Suspension may occur\
    \ anywhere\n                       during brand selection (with the\n        \
    \               Merchant) or payment processing (with the\n                  \
    \     Payment Handler).  On resumption, the IOTP\n                       Application\
    \ Core and the IOTP Payment\n                       Bridge have to use other internal\
    \ data to\n                       decide whether brand selection or actual\n \
    \                      payment processing needs to be continued,\n           \
    \            i.e., whether the process state needs to\n                      \
    \ be reset to \"NotYetStarted\" or\n                       \"InProgress\".\n \
    \                      Note that the Payment API assumes\n                   \
    \    stateless brand selection by the IOTP\n                       Payment Bridge.\
    \  Typically, any suspension\n                       during brand selection requires\
    \ the\n                       repetition of the whole process.  Hereby,\n    \
    \                   the IOTP Application Core might need to\n                \
    \       consider any already negotiated\n                       conditions in\
    \ a brand depended purchase\n                       (brand, protocol).\n   CompletedOk\
    \         The successful payment has been\n                       acknowledged\
    \ by the Payment Handler, i.e.,\n                       the successful IOTP Payment\
    \ Response has\n                       been received.\n                      \
    \ Implicitly, this implies successful order\n                       processing.\n\
    \   Failed              The IOTP transaction, i.e., order or\n               \
    \        payment processing, has failed for some\n                       (business)\
    \ reason.  In either case it is\n                       known that the payment\
    \ will not succeed.\n   ProcessError        The IOTP transaction, i.e., order\
    \ or\n                       payment processing, has failed for some\n       \
    \                (technical) reason.\n                       However, the local\
    \ process state might be\n                       different from that of Payment\
    \ Handler.\n                             Table 6: Consumer\n"
- title: 3.3.3.  Payment Handler
  contents:
  - "3.3.3.  Payment Handler\n   The Payment Handler is responsible for the actual\
    \ payment processing.\n   New payment transactions are reported by the Consumer\
    \ with the\n   transmission of new IOTP Payment Request Blocks.  IOTP Payment\n\
    \   Exchange Block are send by the Consumer for payment transaction\n   continuation\
    \ and resumption.\n   ProcessState        Description\n   ------------       \
    \ -----------\n   NotYetStarted       This encodes the initial process state of\n\
    \                       any payment transaction.  Typically, this\n          \
    \             value will last for a short amount of\n                       time.\n\
    \   InProgress          The IOTP Application Core changes the\n              \
    \         process state changes to \"InProgress\"\n                       when\
    \ the Payment Handler starts with the\n                       actual processing\
    \ of the IOTP Payment\n                       Request Block.\n               \
    \        Note that this does not assume that the\n                       \"StartPaymentPaymentHandler\"\
    \ API function\n                       has been called.\n   Suspended        \
    \   The payment transaction has been\n                       suspended.\n   CompletedOk\
    \         The payment has been processed,\n                       successfully,\
    \ i.e., the IOTP Payment\n                       Response Block was created and\n\
    \                       transmitted to the Consumer.\n   Failed              The\
    \ payment transaction, has finally\n                       failed for some (business)\
    \ reason.\n                       Note that this value encodes the payment\n \
    \                      state reported by the IOTP Payment Bridge\n           \
    \            on \"InquireProcessState\".  It neither\n                       reflects\
    \ whether the payment receipt has\n                       been inquired nor whether\
    \ the IOTP\n                       Payment Response Block has been created\n \
    \                      and submitted to the Consumer.\n   ProcessError       \
    \ The payment transaction, has finally\n                       failed for some\
    \ (technical) reason.\n                       Note that this value encodes the\
    \ payment\n                       state reported by the IOTP Payment\n       \
    \                Bridge.  It does not reflect whether some\n                 \
    \      IOTP Error Block has been created and\n                       submitted\
    \ to the Consumer.\n                             Table 7: Consumer\n"
- title: 4.  Payment API Calls
  contents:
  - '4.  Payment API Calls

    '
- title: 4.1.  Brand Compilation Related API Calls
  contents:
  - '4.1.  Brand Compilation Related API Calls

    '
- title: 4.1.1.  Find Accepted Payment Brand
  contents:
  - "4.1.1.  Find Accepted Payment Brand\n   This API function determines the payment\
    \ brands being accepted by the\n   Payment Handler on behalf of the Merchant.\n\
    \   Input Parameters\n   o  Payment Direction - provided by the IOTP Application\
    \ Core\n   o  Currency Code and Currency - provided by the IOTP Application\n\
    \      Core\n   o  Payment Amount - provided by the IOTP Application Core\n  \
    \ o  Merchant Payment Identifier - Merchant's unique private\n      reference\
    \ to the payment transaction\n   o  Merchant Organisation Identifier - used for\
    \ distinction between\n      multiple merchants that share the some IOTP merchant\
    \ system\n   o  Wallet Identifier - managed by the IOTP Application Core\n   o\
    \  Merchant Data - specific data used by the IOTP Payment Bridge\n      which\
    \ is managed in the IOTP Application Core.\n   XML definition:\n   <!ELEMENT FindAcceptedPaymentBrand\
    \ (MerchantData*) >\n   <!ATTLIST FindAcceptedPaymentBrand\n     PayDirection\
    \  (Debit|Credit)  #REQUIRED\n     CurrCodeType  NMTOKEN  'ISO4217-A'\n     CurrCode\
    \  CDATA  #REQUIRED\n     Amount  CDATA  #REQUIRED\n     MerchantPayId  CDATA\
    \  #REQUIRED\n     MerchantOrgId  CDATA  #IMPLIED\n     WalletID  CDATA  #IMPLIED\
    \ >\n   Output Parameters\n   o  Payment Brand Identifier - for insertion in the\
    \ Brand List\n      Component's Brand Element\n   o  Payment Brand Name and language\
    \ annotation - for insertion in\n      the Brand List Component's Brand Element\n\
    \   o  Payment Brand Logo Net Location - for insertion in the Brand\n      List\
    \ Component's Brand Element\n   o  Payment Brand Narrative Description - for insertion\
    \ in the\n      Brand List Component's Brand Element\n   o  (Brand) Packaged Content\
    \ - further payment brand description\n      for insertion in the Brand List Component's\
    \ Brand Element\n   The Existing Payment Software returns an empty list of brand\
    \ items,\n   if it does not support any payment brand/payment protocol combination\n\
    \   for the given payment parameters.\n   XML definition:\n   <!ELEMENT FindAcceptedPaymentBrandResponse\
    \ (BrandItem*) >\n   <!ELEMENT BrandItem (BrandPackagedContent*) >\n   <!ATTLIST\
    \ BrandItem\n     BrandId  CDATA  #REQUIRED\n     xml:lang  NMTOKEN  #IMPLIED\n\
    \     BrandName  CDATA  #REQUIRED\n     BrandLogoNetLocn  CDATA  #REQUIRED\n \
    \    BrandNarrative  CDATA  #IMPLIED >\n   Tables 4 and 5 explain the attributes\
    \ and elements; Table 3\n   introduces the Error Codes.\n"
- title: 4.1.2.  Find Accepted Payment Protocol
  contents:
  - "4.1.2.  Find Accepted Payment Protocol\n   This API function determines the instances\
    \ of payment protocols (and\n   optionally the payment brands) being accepted\
    \ by the Payment Handler\n   on behalf of the Merchant.  The function might be\
    \ called in two\n   variants:\n   o  With the Brand Identifier set on the input\
    \ parameter list: The\n      function responds with the payment protocols that\
    \ fits to the\n      submitted brand.\n   o  Without any Brand Identifier - that\
    \ allows the omission of the\n      \"Find Accepted Payment Brand\" API call (cf.\
    \ Section 4.1.1): This\n      function responds with both the supported brand\
    \ identifiers and\n      the payment protocols being specified by the Brand Elements.\n\
    \   Input Parameters\n   o  Brand Identifier - returned by \"Find Accepted Payment\
    \ Brand\"\n   o  Payment Direction\n   o  Currency Code and Currency\n   o  Payment\
    \ Amount\n   o  Merchant Payment Identifier - Merchant's unique private\n    \
    \  reference to the payment transaction\n   o  Merchant Organisation Identifier\
    \ - used for distinction between\n      multiple merchants that share the some\
    \ IOTP merchant system\n   o  Wallet Identifier - managed by the IOTP Application\
    \ Core\n   o  (Brand) Packaged Content - further payment brand description;\n\
    \      returned by \"Find Accepted Payment Brand\"; this elements are\n      only\
    \ provided if the Brand Identifier is set\n   o  Merchant Data - specific data\
    \ used by the IOTP Payment Bridge\n      which is managed in the IOTP Application\
    \ Core.\n   XML definition:\n   <!ELEMENT FindAcceptedPaymentProtocol (BrandPackagedContent*,\n\
    \     MerchantData?) >\n   <!ATTLIST FindAcceptedPaymentProtocol\n     BrandId\
    \  CDATA  #IMPLIED\n     PayDirection  (Debit|Credit)  #REQUIRED\n     CurrCodeType\
    \  NMTOKEN  'ISO4217-A'\n     CurrCode  CDATA  #REQUIRED\n     Amount  CDATA \
    \ #REQUIRED\n     MerchantPayId  CDATA  #REQUIRED\n     MerchantOrgId  CDATA \
    \ #IMPLIED\n     WalletID  CDATA  #IMPLIED >\n   Output Parameters\n   o  Payment\
    \ Protocol Identifier - for insertion in the Brand List\n      Component's Pay\
    \ Protocol Element\n   o  Protocol Brand Identifier - for insertion in the Protocol\
    \ Brand\n      Element of the Brand List Component's Brand Element\n   o  Payment\
    \ Protocol Name and language annotation- for insertion in\n      the Brand List\
    \ Component's Pay Protocol Element\n   o  Payment Request Net Location - for insertion\
    \ in the Brand List\n      Component's Pay Protocol Element\n   o  Secured Payment\
    \ Request Net Location - for insertion in the\n      Brand List Component's Pay\
    \ Protocol Element\n   o  Brand Item List (cf. Section 4.1.1) - there must be\
    \ at least\n      one element if no brand identifier has been provided on the\n\
    \      input parameter list.\n   o  (Protocol Amount) Packaged Content - for insertion\
    \ in the Brand\n      List Component's Protocol Amount Element\n   o  (Pay Protocol)\
    \ Packaged Content - for insertion in the Brand\n      List Component's Pay Protocol\
    \ Element\n   o  Currency Amount element - quite similar to the definition in\n\
    \      [IOTP], that contain\n      - refined Currency Code and Currency - for\
    \ insertion in the\n        Brand List Component's Currency Amount Element\n \
    \     - refined Payment Amount - for insertion in the Brand List\n      Component's\
    \ Currency Amount Element\n   o  Brand - there must be at least one element in\
    \ each Protocol\n      Item if no brand identifier has been provided on the input\n\
    \      parameter list.\n   XML definition:\n   <!ELEMENT FindAcceptedPaymentProtocolResponse\
    \ (ProtocolItem+,\n     BrandItem*) >\n   <!ELEMENT ProtocolItem (ProtocolAmountPackagedContent*,\n\
    \     PayProtocolPackagedContent*\n     CurrencyAmount+, Brand*,ProtocolBrand*)>\n\
    \   <!ATTLIST ProtocolItem\n     ProtocolId  CDATA  #REQUIRED\n     ProtocolBrandId\
    \  CDATA  #IMPLIED\n     xml:lang  NMTOKEN  #IMPLIED\n     ProtocolName  CDATA\
    \  #REQUIRED\n     PayReqNetLocn  CDATA  #IMPLIED\n     SecPayReqNetLocn  CDATA\
    \  #IMPLIED >\n   <!ELEMENT Brand EMPTY >\n   <!ATTLIST Brand\n     BrandId  CDATA\
    \  #REQUIRED >\n   <!ELEMENT CurrencyAmount EMPTY >\n   <!ATTLIST CurrencyAmount\n\
    \     CurrCodeType  NMTOKEN  'ISO4217-A'\n     CurrCode  CDATA  #IMPLIED\n   \
    \  Amount  CDATA  #IMPLIED >\n   Tables 4 and 5 explain the attributes and elements;\
    \ Table 3\n   introduces the Error Codes.\n"
- title: 4.1.3.  Get Payment Initialization Data
  contents:
  - "4.1.3.  Get Payment Initialization Data\n   This API function provides the remaining\
    \ initialization data being\n   required by the Consumer's or Payment Handler's\
    \ Existing Payment\n   Software.  This function might be called both for \"brand\
    \ dependent\"\n   and \"brand independent\" transaction types.  In either case,\
    \ this\n   function is called with one particular brand.\n   Input Parameters\n\
    \   o  Brand Identifier - returned by \"Find Accepted Payment Brand\"\n   o  Merchant\
    \ Payment Identifier - Merchant's unique private\n      reference to the payment\
    \ transaction\n   o  Payment Direction\n   o  Currency Code and Currency - from\
    \ the Brand List Component's\n      Currency Amount Element\n   o  Payment Amount\
    \ - from the Brand List Component's Currency\n      Amount Element\n   o  Payment\
    \ Protocol Identifier - from the Brand List Component's\n      Pay Protocol Element\n\
    \   o  Protocol Brand Identifier - from the Protocol Brand Element\n      which\
    \ relates to the selected Brand Element, if any\n   o  (TradingRoleData) Receiver\
    \ Organization Identifier\n   o  OkFrom, OkTo - identical to the entries of the\
    \ Order Component\n   Merchant Payment Identifier\n   o  Merchant Organisation\
    \ Identifier - used for distinction between\n      multiple merchants that share\
    \ the some IOTP merchant system\n   o  Wallet Identifier and/or Pass Phrase\n\
    \   Protocol Brand Element\n   o  (Brand) Packaged Content - further payment brand\
    \ description,\n      from the Brand List Component's Brand Element\n   o  (Protocol\
    \ Amount) Packaged Content - further payment protocol\n      description, from\
    \ the Brand List Component's Protocol Amount\n      Element\n   o  (Pay Protocol)\
    \ Packaged Content - further payment protocol\n      description, from the Brand\
    \ List Component's Pay Protocol\n      Element\n   o  (Protocol Brand) Packaged\
    \ Content - further brand information,\n      from the Protocol Brand Element\
    \ of the Brand List Component\n      which relates to the selected Brand Element,\
    \ if any\n   o  (Order) Packaged Content - further order description, from the\n\
    \      Order Element\n   o  three Brand Selection Info Packaged Content elements\
    \ - copied\n      from the Brand Selection Component on brand dependent purchases\n\
    \   o  Brand - additional data about the payment brand\n   o  Protocol Amount\
    \ - additional data about the payment protocol\n   o  Currency Amount - additional\
    \ payment brand and currency\n      specific data\n   o  Merchant Data - specific\
    \ data used by the IOTP Payment Bridge\n      which is managed in the IOTP Application\
    \ Core.\n   XML definition:\n   <!ELEMENT GetPaymentInitializationData (ProtocolBrand?\n\
    \     BrandPackagedContent*\n     ProtocolAmountPackagedContent*,\n     PayProtocolPackagedContent*,\n\
    \     OrderPackagedContent*,\n     BrandSelBrandInfoPackagedContent*,\n     BrandSelProtocolAmountInfoPackagedContent*,\n\
    \     BrandSelCurrencyAmountInfoPackagedContent*,\n     MerchantData*) >\n   <!ATTLIST\
    \ GetPaymentInitializationData\n     BrandId  CDATA  #REQUIRED\n     MerchantPayId\
    \  CDATA  #REQUIRED\n     PayDirection  (Debit|Credit)  #REQUIRED\n     CurrCodeType\
    \  NMTOKEN  'ISO4217-A'\n     CurrCode  CDATA  #REQUIRED\n     Amount  CDATA \
    \ #REQUIRED\n     ProtocolId  CDATA  #REQUIRED\n     OkFrom  CDATA  #REQUIRED\n\
    \     OkTo  CDATA  #REQUIRED\n     ReceiverOrgId  CDATA  #IMPLIED\n     MerchantOrgId\
    \  CDATA  #IMPLIED\n     WalletID  CDATA  #IMPLIED\n     Passphrase  CDATA  #IMPLIED\
    \ >\n   Output Parameters\n   o  OkFrom, OkTo - for insertion in the Payment Component\n\
    \   o  (TradingRoleData) Packaged Content - further payment protocol\n      description;\
    \ the Name Attribute of the packaged Content\n      element must include \"Payment:\"\
    \ as the prefix,\n      for example \"Payment:SET-OD\".  For more information,\
    \ see\n      [SET/IOTP].\n   o  (Order) Packaged Content - defaults to the supplied\
    \ order\n      packaged content if omitted.\n   XML definition:\n   <!ELEMENT\
    \ GetPaymentInitializationDataResponse\n   (OrderPackagedContent*,\n   TradingRoleDataPackagedContent*)\
    \ >\n   <!ATTLIST GetPaymentInitializationDataResponse\n     OkFrom  CDATA  #IMPLIED\n\
    \     OkTo  CDATA  #IMPLIED>\n   Tables 4 and 5 explain the attributes and elements;\
    \ Table 3\n   introduces the Error Codes.\n"
- title: 4.1.4.  Inquire Authentication Challenge
  contents:
  - "4.1.4.  Inquire Authentication Challenge\n   This API function inquires any payment\
    \ protocol specific\n   authentication challenge value from the IOTP Payment Bridge.\
    \  In\n   Baseline IOTP this API function is called by the Merchant (or\n   Financial\
    \ Institution).  The IOTP Application Core may propose a\n   choice of algorithms\
    \ to the IOTP Payment Bridge.  However, the IOTP\n   Payment Bridge may ignore\
    \ the proposal and select some other\n   algorithm.\n   The inquiry is assumed\
    \ to be stateless.  E.g., the IOTP Application\n   Core may check the returned\
    \ algorithm and stop transaction processing\n   without notifying the IOTP Payment\
    \ Bridge.\n   The IOTP Application Core may issue several API calls to the IOTP\n\
    \   Payment Bridge to build up the IOTP Authentication Request Block.\n   Any\
    \ subsequently submitted choice of algorithms should be constrained\n   by the\
    \ accepted algorithms from earlier API responses.\n   The IOTP Payment Bridge\
    \ responds with the Business Error Code if it\n   does not provide any (more)\
    \ authentication algorithms and challenges.\n   Input Parameters\n   o  Authentication\
    \ Identifier - the authenticator may provide its\n      payment identifier, i.e.,\
    \ Payment Handler or Merchant Payment\n      Identifier.\n   o  Wallet Identifier\
    \ and/or Pass Phrase\n   o  set of pre-selected algorithms for authentication\n\
    \   XML definition:\n   <!ELEMENT InquireAuthChallenge (Algorithm*) >\n   <!ATTLIST\
    \ InquireAuthChallenge\n     AuthenticationId  CDATA  #REQUIRED\n     WalletID\
    \  CDATA  #IMPLIED\n     Passphrase  CDATA  #IMPLIED >\n   Output Parameters\n\
    \   o  list of Authentication Challenge Packaged Contents - for\n      insertion\
    \ into the IOTP Authentication Request Component\n   o  Algorithm Element - for\
    \ insertion into the IOTP Authentication\n      Request Component\n   XML definition:\n\
    \   <!ELEMENT InquireAuthChallengeResponse (AuthReqPackagedContent*,\n     Algorithm)\
    \ >\n"
- title: 4.1.5.  Authenticate
  contents:
  - "4.1.5.  Authenticate\n   The Consumer's IOTP Application Core defers payment\
    \ protocol specific\n   authentication processing and the current challenge value\
    \ to the\n   active IOTP Payment Bridge.  Alternative authentication algorithms\n\
    \   might be tried sequentially or offered to the user for selection.\n   Note\
    \ that the IOTP Application Core has to consider both the current\n   context\
    \ and the algorithm in order to determine the responsible IOTP\n   Payment Bridge.\n\
    \   Failed authentication is reported by the Business Error Code which\n   might\
    \ trigger the inquiry of the details (\"Inquire Process State\").\n   Final failures\
    \ might be encoded by the process state \"Failed\".\n   Input Parameters\n   o\
    \  Authentication Identifier\n   o  Wallet Identifier and/or Pass Phrase\n   o\
    \  Authentication Challenge Packaged Content - copied from the\n      IOTP Authentication\
    \ Request Component\n   o  Algorithm Element - copied from the IOTP Authentication\
    \ Request\n      Component\n   XML definition:\n   <!ELEMENT Authenticate (Algorithm,\
    \ AuthReqPackagedContent*) >\n   <!ATTLIST Authenticate\n     AuthenticationId\
    \  CDATA  #REQUIRED\n     WalletID  CDATA  #IMPLIED\n     Passphrase  CDATA  #IMPLIED\
    \ >\n   Output Parameters\n   o  Authentication Response Packaged Content - for\
    \ insertion into\n      the IOTP Authentication Response Component\n   XML definition:\n\
    \   <!ELEMENT AuthenticateResponse (AuthResPackagedContent*) >\n   Tables 4 and\
    \ 5 explain the attributes and elements; Table 3\n   introduces the Error Codes.\n"
- title: 4.1.6.  Check Authentication Response
  contents:
  - "4.1.6.  Check Authentication Response\n   This API function verifies the Consumer's\
    \ payment protocol specific\n   authentication response.  In Baseline IOTP this\
    \ API function is\n   called by the Merchant (or the Financial Institution). \
    \ It is called\n   only if the counter party has responded with an IOTP Authentication\n\
    \   Response Component within the Authentication Response Block.  Of\n   course,\
    \ the IOTP Application Core traces the need of such an\n   response.\n   Due to\
    \ the authentication's statelessness, all parameters (algorithm,\n   challenge\
    \ and response) are submitted to the IOTP Payment Bridge.\n   Authentication failure\
    \ is reported by a Process State different from\n   \"CompletedOK\".\n   Input\
    \ Parameters\n   o  Authentication Identifier\n   o  Wallet Identifier and/or\
    \ Pass Phrase\n   o  Authentication Challenge Packaged Content - generated by\n\
    \      previous \"Inquire Authentication Challenge\" API call\n   o  Algorithm\
    \ Element\n   o  Authentication Response Packaged Content - copied from the\n\
    \      Authentication Response Component\n   XML definition:\n   <!ELEMENT CheckAuthResponse\
    \ (Algorithm, AuthReqPackagedContent*,\n     AuthResPackagedContent*) >\n   <!ATTLIST\
    \ CheckAuthResponse\n     AuthenticationId  CDATA  #REQUIRED\n     WalletID  CDATA\
    \  #IMPLIED\n     Passphrase  CDATA  #IMPLIED >\n   Output Parameters\n   o  Current\
    \ Process (Authentication) State\n   o  Completion Code\n   o  Status Description\
    \ and its language annotation\n   XML definition:\n   <!ELEMENT CheckAuthResponseResponse\
    \ EMPTY >\n   <!ATTLIST CheckAuthResponseResponse\n     ProcessState  (NotYetStarted\
    \ |\n      InProgress |\n      Suspended |\n      CompletedOk |\n      Failed\
    \ |\n      ProcessError)#REQUIRED\n     CompletionCode  NMTOKEN  #IMPLIED\n  \
    \    xml:lang  NMTOKEN  #IMPLIED\n      StatusDesc  CDATA  #IMPLIED >\n   Tables\
    \ 4 and 5 explain the attributes and elements; Table 3\n   introduces the Error\
    \ Codes.\n"
- title: 4.2.  Brand Selection Related API Calls
  contents:
  - '4.2.  Brand Selection Related API Calls

    '
- title: 4.2.1.  Find Payment Instrument
  contents:
  - "4.2.1.  Find Payment Instrument\n   This API function determines which instances\
    \ of a Payment Brand,\n   e.g., two Mondex cards, are present.  The same physical\
    \ card may even\n   represent multiple payment instruments.\n   The IOTP Application\
    \ Core supplies possible payment brand and payment\n   protocol to the IOTP Payment\
    \ Bridge that has to be considered when\n   the IOTP Payment Bridge searches for\
    \ appropriate payment instruments.\n   This set represents the (sub)set of payment\
    \ alternatives being\n   supported by the Merchant.  If the IOTP Application Cote\
    \ has multiple\n   possible payment brand/protocol, it can call this function\
    \ in turn.\n   The Existing Payment Software responds with PayInstrument Elements\n\
    \   with empty PayInstId attributes if it does not distinguish between\n   different\
    \ payment instruments for the particular payment\n   alternatives.\n   Note that\
    \ the Payment API assumes that the values of the attributes\n   BrandId, ProtocolId,\
    \ ProtocolBrandId and the currency amount suffice\n   for the determination of\
    \ the appropriate Packaged Content Element\n   that will be transmitted to the\
    \ Payment Handler later on.\n   Input Parameters\n   o  Brand Identifier - copied\
    \ from the Brand List Component's Brand\n      Element\n   o  Payment Protocol\
    \ Identifier and associated Protocol Brand\n      Identifier\n   o  Payment Direction\
    \ - copied from the Brand List Component\n   o  Currency Code and Currency - copied\
    \ from the Currency Amount\n      Element\n   o  Payment Amount - copied from\
    \ the Currency Amount Element\n   o  Consumer Payment Identifier - Consumer's\
    \ unique reference to\n      the current payment transaction\n   o  Wallet Identifier\
    \ - managed by the IOTP Application Core\n   o  (Brand) Packaged Content - further\
    \ payment brand description;\n      copied from the Brand List Component's Brand\
    \ Element\n   o  (Protocol Brand) Element - further information; copied from the\n\
    \      Protocol Brand Element of the Brand List Component which\n      relates\
    \ to the Consumer selected Brand Element, if any.\n   o  (Protocol Amount) Packaged\
    \ Content - further payment protocol\n      description, copied from the Brand\
    \ List Component's Protocol\n      Amount Element\n   o  Element (Protocol) Packaged\
    \ Content - further payment protocol\n      description, copied from the Brand\
    \ List Component's Pay\n      Protocol Element\n   XML definition:\n   <!ELEMENT\
    \ FindPaymentInstrument (BrandPackagedContent*,\n     ProtocolBrand?,\n     PayProtocolPackagedContent*,\n\
    \     ProtocolAmountPackagedContent*) >\n   <!ATTLIST FindPaymentInstrument\n\
    \     BrandId  CDATA  #REQUIRED\n     ProtocolId  CDATA  #REQUIRED\n     PayDirection\
    \  (Debit|Credit)  #REQUIRED\n     CurrCodeType  NMTOKEN  'ISO4217-A'\n     CurrCode\
    \  CDATA  #REQUIRED\n     Amount  CDATA  #REQUIRED\n     ConsumerPayId  CDATA\
    \  #REQUIRED\n     WalletID  CDATA  #IMPLIED >\n   Output Parameters\n   o  The\
    \ known Payment Instrument Identifiers, these are internal\n      values\n   o\
    \  The user-defined names of the payment instrument and their\n      language\
    \ encoding\n      The Existing Payment Software responds with an empty list of\n\
    \      identifiers, either if it does not distinguish between different\n    \
    \  payment instruments or if there are no registered payment\n      instruments\
    \ available despite brand support for at least one\n      (unspecified) payment\
    \ protocol.  In the latter case, the IOTP\n      Payment Bridge has to request\
    \ the registration of a suitable\n      payment instrument at a subsequent step\
    \ of the payment process.\n   XML definition:\n   <!ELEMENT FindPaymentInstrumentResponse\
    \ (PayInstrument*) >\n   <!ELEMENT PayInstrument EMPTY >\n   <!ATTLIST PayInstrument\n\
    \     Id  CDATA  #REQUIRED\n     xml:lang  NMTOKEN  #IMPLIED\n     PayInstName\
    \  CDATA  #REQUIRED >\n   Tables 4 and 5 explain the attributes and elements;\
    \ Table 3\n   introduces the Error Codes.\n"
- title: 4.2.2.  Check Payment Possibility
  contents:
  - "4.2.2.  Check Payment Possibility\n   This API function checks whether a payment\
    \ (both debit and credit)\n   can go ahead.  It can be used, for example, to check\n\
    \   o  if there are sufficient funds available in a particular currency\n    \
    \  for an electronic cash payment brand,\n   o  whether there is sufficient value\
    \ space left on the payment\n      instrument for payment refund,\n   o  whether\
    \ required system resources are available and properly\n      configured, e.g.,\
    \ serial ports or baud rate,\n   o  whether environment requirements are fulfilled,\
    \ e.g., chip card\n      reader presence or Internet connection.\n   If the payment\
    \ method is based on external components, e.g., magnetic\n   stripe or chip cards,\
    \ and the check accesses the medium, the existing\n   payment method should not\
    \ mutually exclusive lock system resources,\n   e.g., serial port or modem, that\
    \ may also be required by other\n   Existing Payment Software, e.g., multiple\
    \ payment software components\n   may share the same card reader.  If this happens\
    \ for API internal\n   request processing, the function has to unlock these components\
    \ prior\n   to return.  Otherwise, the payment may not proceed if the Consumer\n\
    \   cancels immediately and decides to use another payment instrument.\n   In\
    \ this event the previous IOTP Payment Bridge is not notified about\n   the change.\n\
    \   This function call happens immediately after the Consumer's payment\n   instrument\
    \ selection.  For example, if the payment instrument is a\n   chip card, that\
    \ is not inserted in the chip card reader, the Consumer\n   may be prompted for\
    \ its insertion.  However, the Consumer should be\n   able to hit some 'skip'\
    \ button, if the payment check is part of the\n   actual payment protocol, too.\
    \  Finally, the IOTP Payment Bridge may\n   provide only a subset of these capabilities\
    \ or may even directly\n   generate a successful response without any checks.\n\
    \   Input Parameters\n   o  Brand Identifier - user selection\n   o  Payment Instrument\
    \ Identifier - user selection\n   o  Currency Code and Currency Code Type - copied\
    \ from the selected\n      Currency Amount Element\n   o  Payment Amount - copied\
    \ from the selected Currency Amount Element\n   o  Payment Direction - copied\
    \ from the selected Trading Protocol\n      Option Block\n   o  Protocol Identifier\
    \ - copied from the selected Pay Protocol\n      Element\n   o  Protocol Brand\
    \ Identifier - copied from the selected Protocol\n      Brand Element of the Brand\
    \ List Component which relates to the\n      selected Brand Element, if any\n\
    \   o  Consumer Payment Identifier - Consumer's unique reference to the\n    \
    \  current payment transaction\n   o  Wallet Identifier and/or Pass Phrase\n \
    \  o  (Brand) Packaged Content - copied from the selected Brand Element\n   o\
    \  (Protocol Amount) Packaged Content - copied from the selected\n      Protocol\
    \ Amount Element\n   o  (Protocol) Packaged Content - copied from the selected\
    \ Pay\n      Protocol Element\n   o  (Protocol Brand) Packaged Content - copied\
    \ from the selected\n      Protocol Brand Element of the Brand List Component\
    \ which relates\n      to the selected Brand Element, if any\n   XML definition:\n\
    \   <!ELEMENT CheckPaymentPossibility (BrandPackagedContent*,\n     ProtocolBrand?\n\
    \     ProtocolAmountPackagedContent*,\n     PayProtocolPackagedContent*>\n   <!ATTLIST\
    \ CheckPaymentPossibility\n     BrandId  CDATA  #REQUIRED\n     PaymentInstrumentId\
    \  CDATA  #IMPLIED\n     PayDirection  (Debit|Credit)  #REQUIRED\n     CurrCodeType\
    \  NMTOKEN  'ISO4217-A'\n     CurrCode  CDATA  #REQUIRED\n     Amount  CDATA \
    \ #REQUIRED\n     ProtocolId  CDATA  #REQUIRED\n     ConsumerPayId  CDATA  #REQUIRED\n\
    \     WalletID  CDATA  #IMPLIED\n     Passphrase  CDATA  #IMPLIED >\n   Output\
    \ Parameters\n   o  three Brand Selection Info Packaged Content elements - for\n\
    \      insertion into the Brand Selection component\n   o  Brand - additional\
    \ data about the payment brand\n   o  Protocol Amount - additional data about\
    \ the payment protocol\n   o  Currency Amount - additional payment brand and currency\
    \ specific\n      data\n   XML definition:\n   <!ELEMENT CheckPaymentPossibilityResponse\n\
    \     (BrandSelBrandInfoPackagedContent*,\n     BrandSelProtocolAmountInfoPackagedContent*,\n\
    \     BrandSelCurrencyAmountInfoPackagedContent*) >\n   <!ATTLIST CheckPaymentPossibilityResponse\
    \ >\n   Tables 4 and 5 explain the attributes and elements; Table 3\n   introduces\
    \ the Error Codes.\n"
- title: 4.3.  Payment Transaction Related API calls
  contents:
  - "4.3.  Payment Transaction Related API calls\n   These Payment API calls may be\
    \ made either by the Consumer's or\n   Payment Handler's IOTP Application Core.\n"
- title: 4.3.1.  Start Payment Consumer
  contents:
  - "4.3.1.  Start Payment Consumer\n   This API function initiates the actual payment\
    \ transaction at the\n   Consumer side.  The IOTP Payment Bridge and the Existing\
    \ Payment\n   Software perform all necessary initialization and preparation for\n\
    \   payment transaction processing.  This includes the reservation of\n   external\
    \ periphery.  E.g., 1) the Consumer's chip card reader needs\n   to be protected\
    \ against access from other software components, 2) the\n   insertion of the chip\
    \ card may be requested, 3) the Internet\n   connection may be re-established,\
    \ or 4) the Payment Handler may open\n   a mutual exclusive session to the security\
    \ hardware.\n   The IOTP Payment Bridge monitors the payment progress and stores\
    \ the\n   current payment states such that resumption - even after power\n   failures\
    \ - remains possible.  Note that the IOTP Application Core\n   supplies only a\
    \ subset of the following input parameter to the\n   associated resumption API\
    \ function and refers to the payment\n   transaction through the party's payment\
    \ identifier.\n   Input Parameters\n   o  Brand Identifier - copied from the selected\
    \ Brand Element\n   o  Payment Instrument Identifier - the user selection\n  \
    \ o  Currency Code and Currency - copied from the selected Currency\n      Amount\
    \ Element\n   o  Payment Amount - copied from the selected Currency Amount\n \
    \     Element\n   o  Payment Direction - copied from the Brand List Component\n\
    \   o  Protocol Identifier - copied from the selected Payment Protocol\n     \
    \ Element\n   o  Protocol Brand Element - further information; copied from the\n\
    \      Protocol Brand Element of the Brand List Component which\n      relates\
    \ to the selected Brand Element, if any\n   o  OkFrom, OkTo - copied from the\
    \ Payment Component\n   o  Consumer Payment Identifier - Consumer's unique reference\
    \ to\n      the current payment transaction\n   o  Wallet Identifier and/or Pass\
    \ Phrase\n   o  Call Back Function - used for end user notification/logging\n\
    \      purposes\n   o  Call Back Language List.  This list is required if the\
    \ Call Back\n      Function is set\n   o  (Brand) Packaged Content - further payment\
    \ brand description;\n      copied from the selected Brand Element's content\n\
    \   o  (Protocol Amount) Packaged Content - further payment protocol\n      description;\
    \ copied from the selected Protocol Amount Element's\n      content\n   o  (Payment\
    \ Protocol) Packaged Content - further payment protocol\n      description; copied\
    \ from the selected Pay Protocol Element's\n      content\n   o  (Order) Packaged\
    \ Content - further order description, copied\n      from the Order Component\n\
    \   XML definition:\n   <!ELEMENT StartPaymentConsumer (BrandPackagedContent*,\n\
    \     ProtocolBrand?\n     ProtocolAmountPackagedContent*,\n     PayProtocolPackagedContent*,\n\
    \     OrderPackagedContent*) >\n   <!ATTLIST StartPaymentConsumer\n     BrandId\
    \  CDATA  #REQUIRED\n     PaymentInstrumentId  CDATA  #IMPLIED\n     CurrCodeType\
    \  NMTOKEN  'ISO4217-A'\n     CurrCode  CDATA  #REQUIRED\n     Amount  CDATA \
    \ #REQUIRED\n     PayDirection  (Debit|Credit)  #REQUIRED\n     ProtocolId  CDATA\
    \  #REQUIRED\n     ProtocolBrandId  CDATA  #IMPLIED\n     OkFrom  CDATA  #REQUIRED\n\
    \     OkTo  CDATA  #REQUIRED\n     ConsumerPayId  CDATA  #REQUIRED\n     WalletID\
    \  CDATA  #IMPLIED\n     Passphrase  CDATA  #IMPLIED\n     CallBackFunction  CDATA\
    \  #IMPLIED\n     CallBackLanguageList  NMTOKENS  #IMPLIED >\n   Output Parameters\n\
    \   o  Continuation Status\n   o  (Payment Scheme) Packaged Content - for insertion\
    \ into the\n      Payment Scheme Component of the IOTP Payment Request Block\n\
    \   The IOTP Application Core is allowed to reissue this request several\n   times\
    \ on failed analyses of the response.\n   XML definition:\n   <!ELEMENT StartPaymentConsumerResponse\n\
    \     (PaySchemePackagedContent*) >\n   <!ATTLIST StartPaymentConsumerResponse\n\
    \     ContStatus  (End|Continue)  #REQUIRED >\n   Tables 4 and 5 explain the attributes\
    \ and elements; Table 3\n   introduces the Error Codes.\n"
- title: 4.3.2.  Start Payment Payment Handler
  contents:
  - "4.3.2.  Start Payment Payment Handler\n   This API function initializes the Consumer\
    \ initiated payment\n   transaction at the Payment Handler's side.  Similar to\
    \ the Consumer's\n   system, the IOTP Payment Bridge and the Existing Payment\
    \ Software\n   perform all necessary initialization and preparation for payment\n\
    \   transaction processing.\n   Input Parameters\n   o  Brand Identifier  - copied\
    \ from the Consumer selected Brand\n      Element\n   o  Consumer Payment Identifier\
    \ - copied from the Payment Scheme\n      Component\n   o  Currency Code and Currency\
    \ - copied from the Consumer selected\n      Currency Amount Element\n   o  Payment\
    \ Amount - copied from the Consumer selected Currency\n      Amount Element\n\
    \   o  Payment Direction - copied from the Brand List Component\n   o  Protocol\
    \ Identifier  - copied from the Consumer selected\n      Payment Protocol Element\n\
    \   o  Protocol Brand Identifier - copied from the Brand Protocol\n      Element\
    \ of the Brand List Component which relates to the\n      Consumer selected Brand\
    \ Element, if any\n   o  OkFrom, OkTo - copied from the Payment Component\n  \
    \ o  Payment Handler Payment Identifier - Payment Handler's unique\n      reference\
    \ to the current payment transaction\n   o  Merchant Organisation Identifier -\
    \  copied from the Merchant's\n      Organisation Element\n   o  Wallet Identifier\
    \ - renaming to till identifier neglected -\n      and/or Pass Phrase\n   o  Call\
    \ Back Function - used for end user notification/logging\n      purposes\n   o\
    \  Call Back Language List.  This list is required if the call\n      back function\
    \ is set\n   o  (Brand) Packaged Content - further payment brand description;\n\
    \      copied from the Consumer selected Brand Element's content\n   o  (Protocol\
    \ Brand) Packaged Content - further information; copied\n      from the Protocol\
    \ Brand Element of the Brand List Component\n      which relates to the Consumer\
    \ selected Brand Element, if any.\n   o  (Protocol Amount) Packaged Content -\
    \ further payment protocol\n      description; copied from the Consumer selected\
    \ Protocol Amount\n      Element's content\n   o  (Protocol) Packaged Content\
    \ - further payment protocol\n      description; copied from the Consumer selected\
    \ Pay Protocol\n      Element's content\n   o  (TradingRoleData) Packaged Content\
    \ - further payment protocol\n      description; the Name Attribute of the packaged\
    \ contents must\n      include \"Payment:\" as the prefix, for example \"Payment:SET-OD\"\
    .\n      For more information, see [SET/IOTP].\n   o  Three Brand Selection Info\
    \ Packaged Content Elements - copied\n      from the Brand Selection Component\n\
    \   o  Brand - additional data about the payment brand\n   o  Protocol Amount\
    \ - additional data about the payment protocol\n   o  Currency Amount - additional\
    \ payment brand and currency\n      specific data\n   o  (Payment Scheme) Packaged\
    \ Content.\n   XML definition:\n   <!ELEMENT StartPaymentPaymentHandler (BrandPackagedContent*,\n\
    \     ProtocolBrand?,\n     ProtocolAmountPackagedContent*,\n     PayProtocolPackagedContent*,\n\
    \     BrandSelBrandInfoPackagedContent*,\n     BrandSelProtocolAmountInfoPackagedContent*,\n\
    \     BrandSelCurrencyAmountInfoPackagedContent*,\n     TradingRoleDataPackagedContent*,\n\
    \     PaySchemePackagedContent*) >\n   <!ATTLIST StartPaymentPaymentHandler\n\
    \     BrandId  CDATA  #REQUIRED\n     ConsumerPayId  CDATA  #IMPLIED\n     CurrCodeType\
    \  NMTOKEN  'ISO4217-A'\n     CurrCode  CDATA  #REQUIRED\n     Amount  CDATA \
    \ #REQUIRED\n     PayDirection  (Debit|Credit)  #REQUIRED\n     ProtocolId  CDATA\
    \  #REQUIRED\n     OkFrom  CDATA  #REQUIRED\n     OkTo  CDATA  #REQUIRED\n   \
    \  PaymentHandlerPayId  CDATA  #REQUIRED\n     MerchantOrgId  CDATA  #REQUIRED\n\
    \     WalletID  CDATA  #IMPLIED\n     Passphrase  CDATA  #IMPLIED\n     CallBackFunction\
    \  CDATA  #IMPLIED\n     CallBackLanguageList  NMTOKENS  #IMPLIED >\n   Output\
    \ Parameters\n   o  Continuation Status\n   o  (Payment Scheme) Packaged Content\
    \ - for insertion into the\n      Payment Scheme Component of the IOTP Payment\
    \ Exchange Block\n   The response message must contain payment schema data if\
    \ the\n   continuation status signals \"Continue\".  The IOTP Application Core\
    \ is\n   allowed to reissue this request several times on failed analyses of\n\
    \   the response.\n   XML definition:\n   <!ELEMENT StartPaymentPaymentHandlerResponse\n\
    \     (PaySchemePackagedContent*) >\n   <!ATTLIST StartPaymentPaymentHandlerResponse\n\
    \     ContStatus  (End|Continue)  #REQUIRED >\n   Tables 4 and 5 explain the attributes\
    \ and elements; Table 3\n   introduces the Error Codes.\n"
- title: 4.3.3.  Resume Payment Consumer
  contents:
  - "4.3.3.  Resume Payment Consumer\n   This API function resumes a previously suspended\
    \ payment at the\n   Consumer side.  Resumption includes the internal inquiry\
    \ of the\n   payment transaction data, e.g., payment amount, protocol identifier,\n\
    \   and the whole initialization as it has been applied on the \"Start\n   Payment\
    \ Consumer\" API request.\n   It is up to the IOTP Application Core to decide\
    \ whether an IOTP\n   Payment Request Block or a IOTP Payment Exchange Block needs\
    \ to be\n   generated.  One indicator might be the receipt of a previous IOTP\n\
    \   Payment Exchange Block from the Payment Handler, e.g., the knowledge\n   of\
    \ the Payment Handler Payment Identifier.\n   Input Parameters\n   o  Consumer\
    \ Payment Identifier\n   o  Wallet Identifier and/or Pass Phrase\n   o  Call Back\
    \ Function - used for end user notification/logging\n      purposes\n   XML definition:\n\
    \   <!ELEMENT ResumePaymentConsumer EMPTY >\n   <!ATTLIST ResumePaymentConsumer\n\
    \     ConsumerPayId  CDATA  #REQUIRED\n     WalletID  CDATA  #IMPLIED\n     Passphrase\
    \  CDATA  #IMPLIED\n     CallBackFunction  CDATA  #IMPLIED\n     CallBackLanguageList\
    \  NMTOKENS  #IMPLIED >\n   Output Parameters\n   o  Continuation Status\n   o\
    \  (Payment Scheme) Packaged Content - for insertion in the\n      Payment Scheme\
    \ Component of the next IOTP message (Payment\n      Exchange or Request Block).\n\
    \   The IOTP Application Core is allowed to reissue this request several\n   times\
    \ on failed analyses of the response.  However, the IOTP Payment\n   Bridge might\
    \ reject the resumption request by using the \"AttNotSupp\"\n   Error Code \"\
    naming\" the Consumer Payment Identifier attribute.  Then\n   the Consumer has\
    \ to apply normal error processing to the current\n   (sub-)transaction and to\
    \ issue a new Payment Request Block to the\n   Payment Handler.\n   XML definition:\n\
    \   <!ELEMENT ResumePaymentConsumerResponse\n     (PaySchemePackagedContent*)\
    \ >\n   <!ATTLIST ResumePaymentConsumerResponse\n     ContStatus  (End|Continue)\
    \  #REQUIRED >\n   Tables 4 and 5 explain the attributes and elements; Table 3\n\
    \   introduces the Error Codes.\n"
- title: 4.3.4.  Resume Payment Payment Handler
  contents:
  - "4.3.4.  Resume Payment Payment Handler\n   This API function resumes a payment\
    \ at the Payment Handler side.\n   Input Parameters\n   o  Payment Handler Payment\
    \ Identifier\n   o  Wallet Identifier - renaming to till identifier neglected\
    \ - and\n      Pass Phrase\n   o  Call Back Function - used for end user notification/logging\n\
    \      purposes\n   o  Call Back Language List.  This list is required if the\
    \ Call Back\n      Function is set\n   o  (Payment Scheme) Packaged Content -\
    \ copied from the Payment\n      Scheme Component of the received IOTP message\
    \ (Payment Exchange\n      or Request Block).\n   XML definition:\n   <!ELEMENT\
    \ ResumePaymentPaymentHandler\n     (PaySchemePackagedContent*) >\n   <!ATTLIST\
    \ ResumePaymentPaymentHandler\n     PaymentHandlerPayId  CDATA  #REQUIRED\n  \
    \   WalletID  CDATA  #IMPLIED\n     Passphrase  CDATA  #IMPLIED\n     CallBackFunction\
    \  CDATA  #IMPLIED\n     CallBackLanguageList  NMTOKENS  #IMPLIED >\n   Output\
    \ Parameters\n   o  Continuation Status\n   o  (Payment Scheme) Packaged Content\
    \ - for insertion in the\n      Payment Scheme Component of the next Payment Exchange\
    \ Block.\n   The response message contains payment schema specific data if the\n\
    \   continuation status signals \"Continue\".  The IOTP Application Core is\n\
    \   allowed to reissue this request several times on failed analyses of\n   the\
    \ response.\n   XML definition:\n   <!ELEMENT ResumePaymentPaymentHandlerResponse\n\
    \   (PaySchemePackagedContent*) >\n   <!ATTLIST ResumePaymentPaymentHandlerResponse\n\
    \     ContStatus  (End|Continue)  #REQUIRED >\n   Tables 4 and 5 explain the attributes\
    \ and elements; Table 3\n   introduces the Error Codes.\n"
- title: 4.3.5.  Continue Process
  contents:
  - "4.3.5.  Continue Process\n   This API function passes one specific IOTP Payment\
    \ Scheme Component,\n   i.e., the encapsulated Packaged Content elements, received\
    \ from the\n   counter party (e.g., Consumer) to the IOTP Payment Bridge and\n\
    \   responds with the next IOTP Payment Scheme Component for submission\n   to\
    \ the counter party.\n   Input Parameters\n   o  Payty's Payment Identifier\n\
    \   o  Process (Transaction) Type which distinguishes between Payments\n     \
    \ and Inquiries.\n   o  Wallet Identifier and/or Pass Phrase\n   o  (Payment Scheme)\
    \ Packaged Content - copied from the Payment\n      Scheme Component of the received\
    \ Payment Exchange Block or from\n      the Error Block.\n   Each party should\
    \ set the payment identifier with the local\n   identifier (Consumer: ConsumerPayId;\
    \ Merchant: MerchantPayId; Payment\n   Handler: PaymentHandlerPayId).\n   XML\
    \ definition:\n   <!ELEMENT ContinueProcess (PaySchemePackagedContent+) >\n  \
    \ <!ATTLIST ContinueProcess\n     PayId  CDATA  #REQUIRED\n     ProcessType  (Payment\
    \ | Inquiry) 'Payment'\n     WalletID  CDATA  #IMPLIED\n     Passphrase  CDATA\
    \  #IMPLIED >\n   Output Parameters\n   o  Continuation Status\n   o  (Payment\
    \ Scheme) Packaged Content - for insertion in the\n      Payment Scheme Component\
    \ of the next Payment Exchange Block or\n      final Payment Response Block\n\
    \   The response message contains payment schema data if the continuation\n  \
    \ status signals \"Continue\".  The IOTP Payment Bridge must signal\n   \"End\"\
    , if the payment scheme data was received within an IOTP Error\n   Block containing\
    \ an Error Component with severity HardError.\n   XML definition:\n   <!ELEMENT\
    \ ContinueProcessResponse (PaySchemePackagedContent*) >\n   <!ATTLIST ContinueProcessResponse\n\
    \     ContStatus  (End|Continue)  #REQUIRED >\n   Tables 4 and 5 explain the attributes\
    \ and elements; Table 3\n   introduces the Error Codes.\n"
- title: 4.3.6.  Change Process State
  contents:
  - "4.3.6.  Change Process State\n   The IOTP Application Core changes the current\
    \ payment status by this\n   request.  The IOTP Payment Bridge may be notified\
    \ about business\n   level normal termination, cancellation, suspension, and processing\n\
    \   errors.  Notification happens by requesting the intended process\n   state.\n\
    \   The IOTP Payment Bridge processes the status change and reports the\n   result.\n\
    \   The IOTP Application Core has to analyze any returned process status\n   in\
    \ order to check whether the IOTP Payment Bridge has agreed to or\n   declined\
    \ the status switch.  E.g., the submitted Process State\n   \"CompleteOk\" may\
    \ lead to the Payment Status \"Failed\" if the payment\n   transaction has already\
    \ failed.\n   Transaction Suspension is notified by the newly introduced Process\n\
    \   State \"Suspended\".  The other attribute values have been taken from\n  \
    \ the IOTP specification.\n   This API function might be called by the Consumer,\
    \ Merchant, or\n   Payment Handler for each payment transaction anytime after\
    \ the\n   issuance of \"FindPaymentInstrument\" to the IOTP Payment Bridge by\
    \ the\n   Consumer, the issuance of \"FindAcceptedPaymentBrand\" by the Merchant,\n\
    \   or the issuance of \"StartPaymentPaymentHandler\" by the Payment\n   Handler.\n\
    \   The Process States \"CompletedOk\", \"Failed\", and \"ProcessError\" are\n\
    \   final in the sense that they can not be changed on subsequent calls.\n   However,\
    \ the API function should not return with an error code if\n   such an incompatible\
    \ call has been issued.  Instead it should report\n   the old unchanged Process\
    \ State.\n   Unknown payment transactions are reported by the Error Code\n   \"\
    AttValInvalid\" pointing to the PayId attribute.\n   Input Parameters\n   o  Party's\
    \ Payment Identifier\n   o  intended Payment Status\n   o  intended Completion\
    \ Code\n   o  Process (Transaction) Type which distinguishes between Payments\n\
    \      and Inquiries.\n   o  Wallet Identifier and/or Pass Phrase\n   XML definition:\n\
    \   <!ELEMENT ChangeProcessState EMPTY >\n   <!ATTLIST ChangeProcessState\n  \
    \   PayId  CDATA  #REQUIRED\n     ProcessState  (NotYetStarted |\n      InProgress\
    \ |\n      Suspended |\n      CompletedOk |\n      Failed |\n      ProcessError)\
    \  #REQUIRED\n     CompletionCode  NMTOKEN  #IMPLIED\n     ProcessType  (Payment\
    \ | Inquiry) 'Payment'\n     WalletID  CDATA  #IMPLIED\n     Passphrase  CDATA\
    \  #IMPLIED >\n   Output Parameters\n   o  Process State and Percent Complete\n\
    \   o  Completion Code\n   o  Status Description and its language annotation\n\
    \   XML definition:\n   <!ELEMENT ChangeProcessStateResponse EMPTY >\n   <!ATTLIST\
    \ ChangeProcessStateResponse\n     ProcessState  (NotYetStarted |\n      InProgress\
    \ |\n      Suspended |\n      CompletedOk |\n      Failed |\n      ProcessError)\
    \  #REQUIRED\n     PercentComplete  CDATA  #IMPLIED\n     CompletionCode  NMTOKEN\
    \  #IMPLIED\n     xml:lang  NMTOKEN  #IMPLIED\n     StatusDesc  CDATA  #IMPLIED\
    \ >\n   Tables 4 and 5 explain the attributes and elements; Table 3\n   introduces\
    \ the Error Codes.\n"
- title: 4.4.  General Inquiry API Calls
  contents:
  - "4.4.  General Inquiry API Calls\n   The following calls are not necessarily assigned\
    \ to a payment\n   transaction and may be issued at any time.  There are no dependencies\n\
    \   on any other calls.\n"
- title: 4.4.1.  Remove Payment Log
  contents:
  - "4.4.1.  Remove Payment Log\n   The IOTP Application Core notifies the IOTP Payment\
    \ Bridge and/or the\n   corresponding Existing Payment Software via IOTP Payment\
    \ Bridge that\n   any record in the Payment Log file, that deals with the listed\n\
    \   payment transaction, might be removed.\n   Input Parameters\n   o  Party's\
    \ Payment Identifier\n   o  Wallet Identifier and/or Pass Phrase\n   XML definition:\n\
    \   <!ELEMENT RemovePaymentLog EMPTY >\n   <!ATTLIST RemovePaymentLog\n     PayId\
    \  CDATA  #REQUIRED\n     WalletID  CDATA  #IMPLIED\n     Passphrase  CDATA  #IMPLIED\
    \ >\n   Output Parameters\n   XML definition:\n   <!ELEMENT RemovePaymentLogResponse\
    \ EMPTY >\n   <!ATTLIST RemovePaymentLogResponse >\n   Tables 4 and 5 explain\
    \ the attributes and elements; Table 3\n   introduces the Error Codes.\n"
- title: 4.4.2.  Payment Instrument Inquiry
  contents:
  - "4.4.2.  Payment Instrument Inquiry\n   This API function retrieves the properties\
    \ of the Payment Instrument.\n   The Payment Instrument Identifier could be omitted\
    \ if this identifier\n   is derived by other means, e.g., by analysis of the currently\n\
    \   inserted chip card.  If the Payment instrument could not uniquely\n   determined,\
    \ the IOTP Payment Bridge may provide suitable dialogs for\n   user input.\n \
    \  E.g., this API function might be used during problem resolution with\n   the\
    \ Customer Care Provider of the issuer of the payment instrument,\n   in order\
    \ to inquire payment instrument specific values.\n   Input parameters\n   o  Brand\
    \ Identifier\n   o  Payment Instrument Identifier\n   o  Protocol Identifier\n\
    \   o  Wallet Identifier and/or Pass Phrase\n   o  Property Type List - sequence\
    \ of values whose language is\n      identified by xml:lang\n   o  (Brand) PackagedContent\
    \ Content - further payment brand\n      description\n   o  Protocol Brand Content\
    \ - further payment brand information\n   o  (Protocol Amount) PackagedContent\
    \ Content - further payment\n      protocol description\n   o  (Pay Protocol)\
    \ PackagedContent Content - further payment\n      protocol description\n   The\
    \ codes in the property type list are of two types:\n   o  generic codes which\
    \ apply to all payment methods but might be\n      unavailable\n   o  Payment\
    \ Brand specific codes.\n   Generic codes for the Property Type List are:\n  \
    \ Property Type         Meaning\n   Balance               Current balance\n  \
    \ Limit                 Maximum balance\n   PaymentLimit          Maximum payment\
    \ transaction limit\n   Expiration            Expiration date\n   Identifier \
    \           Issuer assigned identifier of the payment\n                      \
    \   instrument.  Usually, it does not match with\n                         the\
    \ API's payment instrument identifier.\n   LogEntries            Number of stored\
    \ payment transaction\n                         entries.  The entries are numbered\
    \ from 0\n                         (the most recent) to some non-negative\n  \
    \                       value for the oldest entry.\n   PayAmountn           \
    \ Payment Amount of the n-th recorded payment\n                         transaction,\
    \ n may negative\n   PayPartyn             Remote party of the n-th payment recorded\n\
    \                         transaction, n may negative\n   PayTimen           \
    \   Time of the n-th payment recorded\n                         transaction, n\
    \ may negative\n   XML definition:\n   <!ELEMENT PaymentInstrumentInquiry (BrandPackagedContent*,\n\
    \     ProtocolBrand?,\n     ProtocolAmountPackagedContent*,\n     PayProtocolPackagedContent*)\
    \ >\n   <!ATTLIST PaymentInstrumentInquiry\n     BrandId  CDATA  #REQUIRED\n \
    \    PaymentInstrumentId  CDATA  #IMPLIED\n     ProtocolId  CDATA  #REQUIRED\n\
    \     PropertyTypeList  NMTOKENS  #REQUIRED\n     xml:lang  NMTOKEN  #IMPLIED\n\
    \     WalletID  CDATA  #IMPLIED\n     Passphrase  CDATA  #IMPLIED >\n   Output\
    \ parameters\n   o  a list of zero or more unavailable property values whose\n\
    \      language are identified by xml:lang.\n   o  a list of zero or more sets\
    \ of \"Properties Types\", \"Property\n      Values\" and \"Property Descriptions\"\
    \n   XML definition:\n   <!ELEMENT PaymentInstrumentInquiryResponse\n     (PaymentInstrumentProperty*)\
    \ >\n   <!ATTLIST PaymentInstrumentInquiryResponse\n     xml:lang  NMTOKEN  #REQUIRED\n\
    \     UnavailablePropertyList NMTOKENS  #IMPLIED >\n   <!ELEMENT PaymentInstrumentProperty\
    \ EMPTY >\n   <!ATTLIST PaymentInstrumentProperty\n     PropertyType  NMTOKEN\
    \  #REQUIRED\n     PropertyValue  CDATA  #REQUIRED\n     PropertyDesc  CDATA \
    \ #REQUIRED >\n   Tables 4 and 5 explain the attributes and elements; Table 3\n\
    \   introduces the Error Codes.\n"
- title: 4.4.3.  Inquire Pending Payment
  contents:
  - "4.4.3.  Inquire Pending Payment\n   This API function reports the party's payment\
    \ identifiers of any\n   pending payment transactions that the IOTP Payment Bridge/Existing\n\
    \   Payment Software recommends be completed or suspended prior to the\n   processing\
    \ of new payment transactions.  It does not respond with\n   further transaction\
    \ details.  These have to be requested with\n   \"Inquire Process State\".\n \
    \  Note that the IOTP Payment Bridge has to respond without the benefit\n   of\
    \ any pass phrase if there exist no pending payment transaction.\n   But if there\
    \ are some pending payment transactions, the IOTP Payment\n   Bridge may refuse\
    \ the immediate response and may instead request the\n   appropriate pass phase\
    \ from the IOTP Application Core.\n   Input Parameters\n   o  Wallet Identifier\
    \ and/or Passphrase\n   XML definition:\n   <!ELEMENT InquirePendingPayment EMPTY\
    \ >\n   <!ATTLIST InquirePendingPayment\n     WalletId  CDATA  #IMPLIED\n    \
    \ Passphrase  CDATA  #IMPLIED >\n   Output Parameters\n   o  Party's Payment Identifier\n\
    \   XML definition:\n   <!ELEMENT InquirePendingPaymentResponse (PaymentId*) >\n\
    \   <!ELEMENT PaymentId EMPTY >\n   <!ATTLIST PaymentId\n     PayId  CDATA  #REQUIRED\
    \ >\n   Tables 4 and 5 explain the attributes and elements; Table 3\n   introduces\
    \ the Error Codes.\n"
- title: 4.5.  Payment Related Inquiry API Calls
  contents:
  - '4.5.  Payment Related Inquiry API Calls

    '
- title: 4.5.1.  Check Payment Receipt
  contents:
  - "4.5.1.  Check Payment Receipt\n   This function is used by the Consumer and might\
    \ be used by the\n   Payment Handler to check the consistency, validity, and integrity\
    \ of\n   IOTP payment receipts which might consist of Packaged Content\n   Elements\n\
    \   o  from the IOTP Payment Receipt Component - provided by the Payment\n   \
    \   Handler's \"Inquire Process State\" API call shortly before payment\n    \
    \  completion,\n   o  from Payment Scheme Components being exchanged during the\
    \ actual\n      payment, or\n   o  being returned by the Consumer's \"Inquire\
    \ Process State\" API call\n      shortly before payment completion\n   The IOTP\
    \ Application Core has to check the PayReceiptNameRefs\n   attribute of the IOTP\
    \ Payment Receipt Component and to supply exactly\n   the Packaged Content Elements\
    \ being referred to.\n   Failed verification is returns a business error.\n  \
    \ Note that this Payment API assumes that any payment receipt builds\n   upon\
    \ a subset of elements with reference to [IOTP].  Furthermore, the\n   Packaged\
    \ Content Element have to be distinguishable by their Name\n   attribute.\n  \
    \ Input Parameters\n   o  Party's Payment Identifier\n   o  Wallet Identifier\
    \ and/or Pass Phrase\n   o  All Packaged Content Elements in the payment receipt\n\
    \   XML definition:\n   <!ELEMENT CheckPaymentReceipt (PackagedContent*) >\n \
    \  <!ATTLIST CheckPaymentReceipt\n     PayId  CDATA  #REQUIRED\n     WalletID\
    \  CDATA  #IMPLIED\n     Passphrase  CDATA  #IMPLIED >\n   Output Parameters\n\
    \   XML definition:\n   <!ELEMENT CheckPaymentReceiptResponse EMPTY >\n   <!ATTLIST\
    \ CheckPaymentReceiptResponse >\n   Tables 4 and 5 explain the attributes and\
    \ elements; Table 3\n   introduces the Error Codes.\n"
- title: 4.5.2.  Expand Payment Receipt
  contents:
  - "4.5.2.  Expand Payment Receipt\n   This API function expands any IOTP payment\
    \ receipt into a form which\n   may be used for display or printing purposes.\
    \  \"Check Payment\n   Receipt\" should be used first if there is any question\
    \ of the payment\n   receipt containing errors.\n   The same conventions apply\
    \ to the input parameter as for \"Check\n   Payment Receipt\" (cf. Section 4.5.1).\n\
    \   Input Parameters\n   o  Party's Payment Identifier\n   o  Wallet Identifier\
    \ and/or Pass Phrase\n   o  All Packaged Content Elements that build the payment\
    \ receipt\n   XML definition:\n   <!ELEMENT ExpandPaymentReceipt (PackagedContent*)\
    \ >\n   <!ATTLIST ExpandPaymentReceipt\n     PayId  CDATA  #REQUIRED\n     WalletID\
    \  CDATA  #IMPLIED\n     Passphrase  CDATA  #IMPLIED >\n   Output Parameters\n\
    \   o  Brand Identifier\n   o  Protocol specific Brand Identifier\n   o  Payment\
    \ Instrument Identifier\n   o  Currency Code and Currency Code Type\n   o  Payment\
    \ Amount\n   o  Payment Direction\n   o  Time Stamp - issuance of the receipt\n\
    \   o  Protocol Identifier\n   o  Protocol specific Transaction Identifier - this\
    \ is an internal\n      reference number which identifies the payment\n   o  Consumer\
    \ Description, Payment Handler Description, and a\n      language annotation\n\
    \   o  Style Sheet Net Location\n   o  Payment Property List.  A list of type/value/description\
    \ triples\n      which contains additional information about the payment which\n\
    \      is not covered by any of the other output parameters; property\n      descriptions\
    \ have to consider the language annotation.\n   The Style Sheet Net Location refers\
    \ to a Style Sheet (e.g., [XSLT])\n   that contains presentation information about\
    \ the reported XML encoded\n   data.\n   XML definition:\n   <!ELEMENT ExpandPaymentReceiptResponse\
    \ (PaymentProperty*) >\n   <!ATTLIST ExpandPaymentReceiptResponse\n     BrandId\
    \  CDATA  #IMPLIED\n     PaymentInstrumentId  CDATA  #IMPLIED\n     Amount  CDATA\
    \  #IMPLIED\n     CurrCodeType  NMTOKEN  #IMPLIED\n     CurrCode  CDATA  #IMPLIED\n\
    \     PayDirection  (Debit|Credit)  #IMPLIED\n     TimeStamp  CDATA  #IMPLIED\n\
    \     ProtocolId  CDATA  #IMPLIED\n     ProtocolBrandId  CDATA  #IMPLIED\n   \
    \  ProtocolTransId  CDATA  #IMPLIED\n     xml:lang  NMTOKEN  #IMPLIED\n     ConsumerDesc\
    \  CDATA  #IMPLIED\n     PaymentHandlerDesc  CDATA  #IMPLIED\n     StyleSheetNetLocn\
    \  CDATA  #IMPLIED>\n   <!ELEMENT PaymentProperty EMPTY >\n   <!ATTLIST PaymentProperty\n\
    \     PropertyType  NMTOKEN  #REQUIRED\n     PropertyValue  CDATA  #REQUIRED\n\
    \     PropertyDesc  CDATA  #REQUIRED >\n   The Existing Payment Software should\
    \ return as many attributes as\n   possible from the supplied IOTP Payment Receipt.\
    \  The payment\n   supplement defines the attribute values for the payment properties.\n\
    \   Tables 4 and 5 explain the attributes and elements; Table 3\n   introduces\
    \ the Error Codes.\n"
- title: 4.5.3.  Inquire Process State
  contents:
  - "4.5.3.  Inquire Process State\n   This API function returns the current payment\
    \ state and optionally\n   further Packaged Content Elements that form the payment\
    \ receipt.\n   Called by the Payment Handler, the IOTP Payment Bridge might respond\n\
    \   with data intended for inclusion in the IOTP Payment Receipt\n   Component's\
    \ Packaged Content.  When the Consumer calls this function\n   shortly before\
    \ payment completion, it may respond with further items\n   of the payment receipt.\
    \  Such items might be created by a chip card.\n   Input Parameters\n   o  Party's\
    \ Payment Identifier\n   o  Wallet Identifier and/or Pass Phrase\n   XML definition:\n\
    \   <!ELEMENT InquireProcessState EMPTY >\n   <!ATTLIST InquireProcessState\n\
    \     PayId  CDATA  #REQUIRED\n     WalletID  CDATA  #IMPLIED\n     Passphrase\
    \  CDATA  #IMPLIED >\n   Output Parameters\n   o  Current Process State and Percent\
    \ Complete\n   o  Completion Code\n   o  Status Description and its language annotation\n\
    \   o  Payment Receipt Name References to all Packaged Content\n      Elements\
    \ that build the payment receipt (cf. Section 4.5.1),\n      even if they have\
    \ not been created so far (Consumer's share)\n   o  Any Packaged Content Element\
    \ being available that form the\n      payment receipt\n   The IOTP provides a\
    \ linking capability to the payment receipt\n   delivery.  Instead of encapsulating\
    \ the whole payment specific data\n   into the packaged content of the payment\
    \ receipt, other Payment\n   Scheme Components' Packaged Content might be referred\
    \ to.\n   XML definition:\n   <!ELEMENT InquireProcessStateResponse\n   (PackagedContent*)\
    \ >\n   <!ATTLIST InquireProcessStateResponse\n     ProcessState  (NotYetStarted\
    \ |\n      InProgress |\n      Suspended |\n      CompletedOk |\n      Failed\
    \ |\n      ProcessError)  #REQUIRED\n     PercentComplete  CDATA  #IMPLIED\n \
    \    CompletionCode  NMTOKEN  #IMPLIED\n     xml:lang  NMTOKEN  #IMPLIED\n   \
    \  StatusDesc  CDATA  #IMPLIED\n     PayReceiptNameRefs  NMTOKENS  #IMPLIED >\n\
    \   Tables 4 and 5 explain the attributes and elements; Table 3\n   introduces\
    \ the Error Codes.\n"
- title: 4.5.4.  Start Payment Inquiry
  contents:
  - "4.5.4.  Start Payment Inquiry\n   This API function responds with any additional\
    \ payment scheme\n   specific data that is needed by the Payment Handler for Consumer\n\
    \   initiated payment transaction inquiry processing.  Probably, the IOTP\n  \
    \ Payment Bridge (or the corresponding Existing Payment Software) has\n   to determine\
    \ the payment related items that were provided with the\n   \"Start Payment Consumer\"\
    \ API function call.\n   Input Parameters\n   o  Consumer Payment Identifier\n\
    \   o  Wallet Identifier and/or Pass Phrase\n   XML definition:\n   <!ELEMENT\
    \ StartPaymentInquiry EMPTY >\n   <!ATTLIST StartPaymentInquiry\n     ConsumerPayId\
    \  CDATA  #REQUIRED\n     WalletID  CDATA  #IMPLIED\n     Passphrase  CDATA  #IMPLIED\
    \ >\n   Output Parameters\n   o  (Payment Scheme) Packaged Content - intended\
    \ for insertion in\n      the Payment Scheme Component of  the Inquiry Request\
    \ Block\n   XML definition:\n   <!ELEMENT StartPaymentInquiryResponse\n     (PaySchemePackagedContent*)\
    \ >\n   Tables 4 and 5 explain the attributes and elements; Table 3\n   introduces\
    \ the Error Codes.\n"
- title: 4.5.5.  Inquire Payment Status
  contents:
  - "4.5.5.  Inquire Payment Status\n   The Payment Handler calls this API function\
    \ for Consumer initiated\n   inquiry processing.  It differs from the previous\
    \ \"Inquire Process\n   State\" API function by the optional inclusion of payment\
    \ scheme\n   specific data.  The response may encapsulate further details about\n\
    \   the payment transaction.\n   Input Parameters\n   o  Payment Handler Payment\
    \ Identifier\n   o  Wallet Identifier and/or Pass Phrase\n   o  (Payment Scheme)\
    \ Packaged Content - copied from the Inquiry\n      Request Block's Payment Scheme\
    \ Component\n   XML definition:\n   <!ELEMENT InquirePaymentStatus (PaySchemePackagedContent*)\
    \ >\n   <!ATTLIST InquirePaymentStatus\n     PaymentHandlerPayId  CDATA  #REQUIRED\n\
    \     WalletID  CDATA  #IMPLIED\n     Passphrase  CDATA  #IMPLIED >\n   Output\
    \ Parameters\n   o  Current Process State\n   o  Completion Code\n   o  Status\
    \ Description and its language annotation\n   o  (Payment Scheme) Packaged Content\
    \ - intended for insertion in\n      the Payment Scheme Component of the Inquiry\
    \ Response Block\n   XML definition:\n   <!ELEMENT InquirePaymentStatusResponse\n\
    \   (PaySchemePackagedContent*) >\n   <!ATTLIST InquirePaymentStatusResponse\n\
    \     PaymentHandlerPayId  CDATA  #REQUIRED\n     ProcessState  (NotYetStarted\
    \ |\n      InProgress |\n      Suspended |\n      CompletedOk |\n      Failed\
    \ |\n      ProcessError)  #REQUIRED\n     CompletionCode  NMTOKEN  #IMPLIED\n\
    \     xml:lang  NMTOKEN  #IMPLIED\n     StatusDesc  CDATA  #IMPLIED >\n   Tables\
    \ 4 and 5 explain the attributes and elements; Table 3\n   introduces the Error\
    \ Codes.\n"
- title: 4.6.  Other API Calls
  contents:
  - '4.6.  Other API Calls

    '
- title: 4.6.1.  Manage Payment Software
  contents:
  - "4.6.1.  Manage Payment Software\n   The following API function notifies the IOTP\
    \ Payment Bridge about the\n   intended registration, modification, or deletion\
    \ of a payment\n   instrument.  The actual processing is up to the IOTP Payment\
    \ Bridge.\n   This API request may also be used to activate the IOTP Payment Bridge\n\
    \   (and the corresponding Existing Payment Software) for general\n   administration\
    \ purposes.\n   Input Parameters\n   o  Brand Identifier\n   o  Protocol Identifier\n\
    \   o  Any action code:\n   o  New - add new payment method / instrument\n   o\
    \  Update - change the payment method's / instrument's data\n   o  Delete - delete\
    \ a payment method / instrument\n   o  Wallet Identifier and/or Pass Phrase\n\
    \   o  (Brand) Packaged Content - further payment brand description\n   o  (Pay\
    \ Protocol) Packaged Content - further payment protocol\n      description\n \
    \  o  (Protocol Amount) Packaged Content - further payment protocol\n      description\n\
    \   If the Action attribute is set, the Brand and Protocol Identifier\n   have\
    \ to also be set.  The IOTP Payment Bridge has to provide the\n   required user\
    \ dialogs and selection mechanisms.  E.g., updates and\n   deletions may require\
    \ the selection of the payment instrument.  A new\n   wallet might be silently\
    \ generated on the supplement of a new Wallet\n   Identifier or after an additional\
    \ end user acknowledge.  The IOTP\n   Application Core should not provide any\
    \ pass phrases for new wallets.\n   Instead, the IOTP Payment Bridge has to request\
    \ and verify them,\n   which may return their value to the IOTP Application Core\
    \ in plain\n   text.  In addition, the IOTP Payment Bridge returns the supported\n\
    \   authentication algorithms when a new brand and protocol pair has been\n  \
    \ registered.\n   If the \"Action\" attribute is omitted, the IOTP Payment Bridge\
    \ which\n   is responsible for the Existing Payment Software pops up in a general\n\
    \   interactive mode.\n   XML definition:\n   <!ELEMENT ManagePaymentSoftware\
    \ (BrandPackagedContent*,\n     ProtocolAmountPackagedContent*,\n     PayProtocolPackagedContent*)\
    \ >\n   <!ATTLIST ManagePaymentSoftware\n     BrandId  CDATA  #IMPLIED\n     ProtocolId\
    \  CDATA  #IMPLIED\n     Action  (New |\n      Update |\n      Delete)  #IMPLIED\n\
    \     WalletID  CDATA  #IMPLIED\n     Passphrase  CDATA  #IMPLIED >\n   Output\
    \ Parameters\n   o  An action code:\n   o  New - added new wallet\n   o  Update\
    \ - changed wallet's configuration\n   o  Delete - removed a wallet\n   o  Wallet\
    \ Identifier and/or Pass Phrase\n   The IOTP Payment Bridge does not return any\
    \ information about the set\n   of registered payment instruments because these\
    \ data items are\n   dynamically inferred during the brand selection process at\
    \ the\n   beginning of each IOTP transaction.  However, the IOTP Application\n\
    \   Core has to be notified about new wallets and should be notified\n   about\
    \ updated and removed wallets (identifier).  Alternatively,\n   removed wallets\
    \ can be implicitly detected during the next brand\n   selection phase.  Updated\
    \ wallets do no affect the processing of the\n   IOTP Application Core.  The IOTP\
    \ Payment Bridge should only support\n   the addition of at most one wallet because\
    \ it is not able to report\n   multiple additions at once back to the IOTP Application\
    \ Core.\n   XML definition:\n   <!ELEMENT ManagePaymentSoftwareResponse EMPTY\
    \ >\n   <!ATTLIST ManagePaymentSoftwareResponse\n     Action  (New |\n      Update\
    \ |\n      Delete)  #IMPLIED\n     WalletID  CDATA  #IMPLIED\n     Passphrase\
    \  CDATA  #IMPLIED\n     AuthNames  NMTOKENS  #REQUIRED >\n   Tables 4 and 5 explain\
    \ the attributes and elements; Table 3\n   introduces the Error Codes.\n"
- title: 5.  Call Back Function
  contents:
  - "5.  Call Back Function\n   This API function, called by the IOTP Payment Bridge,\
    \ is used to\n   provide information for Consumer or Payment Handler notification\n\
    \   about the progress of the payment transaction.\n   Its use is illustrated\
    \ in the diagram below.\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \                         IOTP Application   ----calls----\n                 \
    \        |     Core     |               |\n          display        |        \
    \      |               v\n            to  <----------  Call Back <--calls--- \
    \ Payment\n           user          |              |           Software\n    \
    \                     ----------------\n   *+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*+*\n\
    \                       Figure 9.  Call Back Function\n   Whenever this function\
    \ is called, the content of the status\n   description should be made available\
    \ to the user.  For example on a\n   status bar, a pop up window, etc.\n   A reference\
    \ to the Call Back function is passed as an input parameter\n   to the \"Start\
    \ Payment X\" and \"Resume Payment X\" API function.\n   Afterwards, this function\
    \ might be called whenever the status changes\n   or progress needs to be reported.\n\
    \   Input Parameters\n   o  the software identifier of the caller\n   o  Party's\
    \ Payment Identifier\n   o  Process State and Percent Complete\n   o  Completion\
    \ Code\n   o  Status Description and its language annotation, text which\n   \
    \   provides information about the progress of the call.  It should be\n     \
    \ displayed or made available to, for example, the Consumer.\n   Examples of Status\
    \ Description could be:\n   o  \"Paying 12.30 USD to XYZ Inc\"\n   o  \"Payment\
    \ completed\"\n   o  \"Payment aborted\"\n   The valid languages are announced\
    \ in the Call Back Language List\n   attribute in \"Start Payment X\" and \"Resume\
    \ Payment X\" API function\n   calls.\n   XML definition:\n   <!ELEMENT CallBack\
    \ EMPTY >\n   <!ATTLIST CallBack\n     ContentSoftwareID  CDATA  #IMPLIED\n  \
    \   PayId CDATA #REQUIRED\n     ProcessState  (NotYetStarted |\n      InProgress\
    \ |\n      Suspended |\n      CompletedOk |\n      Failed |\n      ProcessError)\
    \  #IMPLIED\n     PercentComplete  CDATA  #IMPLIED\n     CompletionCode  NMTOKEN\
    \  #IMPLIED\n     xml:lang  NMTOKEN  #IMPLIED\n     StatusDesc  CDATA  #IMPLIED\
    \ >\n   Output Parameters\n   XML definition:\n   <!ELEMENT CallBackResponse EMPTY\
    \ >\n   <!ATTLIST CallBackResponse <!-- see below --> >\n   Tables 4 and 5 explain\
    \ the attributes and elements; Table 3\n   introduces the Error Codes.\n   Basically,\
    \ the call back function accepts all input arguments or\n   rejects the whole\
    \ request.  It may even accept malformed requests.\n   Some payment schemes may\
    \ support or require that the Consumer might\n   be able to cancel the payment\
    \ at any time.  The Call Back function\n   can be used to facilitate this by returning\
    \ the cancellation request\n   on the next call (using the Business Error Code\
    \ and Completion Code\n   \"ConsCancelled\").\n   Vice versa the Payment Handler's\
    \ Application Core might use the\n   similar mechanism to signal its IOTP Payment\
    \ Bridges any exceptional\n   need for a fast shutdown.  These IOTP Payment Bridges\
    \ may initiate\n   the appropriate steps for terminating/cancelling all pending\
    \ payment\n   transactions.\n   Note that the \"Change Process State\" API function\
    \ provides the second\n   mechanism for such kind of notification.  Therefore,\
    \ the IOTP Payment\n   Bridge or Existing Payment Software may ignore the details\
    \ of the\n   \"Call Back\" response.\n"
- title: 6.  Security Consideration
  contents:
  - "6.  Security Consideration\n   The IOTP Payment APIs only supports security using\
    \ pass phrase to\n   access to payment Wallet.  These can be protected over TLS,\
    \ which\n   provides stronger security at the transport layer, but\n   implementations\
    \ are out the scope of this document.\n   See also security consideration section\
    \ of [IOTP].\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [IOTP]     Burdett, D., \"Internet Open Trading\
    \ Protocol - IOTP\n              version 1.0\", RFC 2801, April 2000.\n   [ISO4217]\
    \  ISO 4217: Codes for the Representation of Currencies.\n              Available\
    \ from ANSI or ISO.\n   [URL]      Berners-Lee, T., Masinter, L. and M. McCahill,\
    \ \"Uniform\n              Resource Locators (URL)\", RFC 1738, December 1994.\n\
    \   [UTC]      Universal Time Coordinated. A method of defining time\n       \
    \       absolutely relative to Greenwich Mean Time (GMT).\n              Typically\
    \ of the form: \"CCYY-MM- DDTHH:MM:SS.sssZ+n\" where\n              the \"+n\"\
    \ defines the number of hours from GMT. See ISO\n              DIS8601.\n   [XML]\
    \      Extensible Mark Up Language (XML) 1.0 (Third Edition).  A\n           \
    \   W3C recommendation. See http://www.w3.org/TR/REC-xml\n   [XML-NS]   Namespaces\
    \ in XML Recommendation. T. Bray, D. Hollander,\n              A. Layman. Janaury\
    \ 1999.  http://www.w3.org/TR/REC-xml-\n              names\n   [XSLT]     Extensible\
    \ Style Language Transformations 1.0, November\n              1999, See http://www.w3.org/TR/xslt\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [IOTPBOOK] D. Burdett, D.E. Eastlake III, and\
    \ M. Goncalves, Internet\n              Open Trading Protocol, McGraw-Hill, 2000.\
    \ ISBN 0-07-\n              135501-4.\n   [SET]      SET Secure Electronic Transaction(TM)\
    \ , Version 1.0, May\n              31, 1997\n              Book 1: Business Description\n\
    \              Book 2: Programmer's Guide\n              Book 3: Formal Protocol\
    \ Definition\n   [SET/IOTP] Kawatsura, Y., \"Secure Electronic Transaction (SET)\n\
    \              Supplement for the v1.0 Internet Open Trading Protocol\n      \
    \        (IOTP)\", RFC 3538, June 2003.\n   [TLS]      Dierks, T. and C. Allen,\
    \ \"The TLS Protocol Version 1.0\",\n              RFC 2246, January 1999.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   The contributions of Werner Hans of Atos Origin are gratefully\n\
    \   acknowledged.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Hans-Bernhard Beykirch\n   EMail: hbbeykirch@web.de\n\
    \   Yoshiaki Kawatsura\n   Hitachi, Ltd.\n   890 Kashimada Saiwai-ku Kawasaki-shi\n\
    \   Kanagawa, Japan 212-8567\n   EMail: ykawatsu@itg.hitachi.co.jp\n   Masaaki\
    \ Hiroya\n   Technoinfo Service, Inc.\n   333-2-718 Uchikoshi-machi\n   Hachioji-shi\n\
    \   Tokyo 192-0911 JAPAN\n   EMail: hiroya@st.rim.or.jp\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).  This\
    \ document is subject\n   to the rights, licenses and restrictions contained in\
    \ BCP 78, and\n   except as set forth therein, the authors retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
