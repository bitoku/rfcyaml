Extensions for Checking Mailbox Status and Accessing Mailbox Metadata Abstract This memo defines an extension to the Sieve mail filtering language (RFC 5228) for accessing mailbox and server annotations, checking for mailbox existence, and controlling mailbox creation on "fileinto" action.
This memo defines an extension to the Sieve mail filtering language [SIEVE] for accessing mailbox and server annotations.
This allows for customization of the Sieve engine behaviour based on variables set using [METADATA].
This document also defines an extension for checking for mailbox existence and for controlling mailbox creation on "fileinto" action.
Conventions Used in This Document
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "
SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [KEYWORDS].
Conventions for notations are as in [SIEVE] Section 1.1, including the use of [ABNF].
This document is written with an assumption that readers are familiar with the data model and terms defined in Section 3 of [METADATA].
"mailbox" and "mboxmetadata" Extensions 3.1.
Test "mailboxexists" Usage:  mailboxexists <mailbox names:
> The "mailboxexists" test is true if all mailboxes listed in the "mailbox names" argument exist in the mailstore, and each allows the user in whose context the Sieve script runs to "deliver" messages into it.
When the mailstore is an IMAP server, "delivery" of messages is possible if: a.
the READ WRITE response code is present for the mailbox (see Section 7.1 of [IMAP]), if IMAP Access Control List (ACL) [IMAPACL] is not supported by the server, or b.  the user has 'p' or 'i' rights for the mailbox (see Section 5.2 of [IMAPACL]).
Note that a successful "mailboxexists" test for a mailbox doesn't necessarily mean that a "fileinto" action on this mailbox would succeed.
For example, the "fileinto" action might put user over quota.
The "mailboxexists" only verifies existence of the mailbox and whether the user in whose context the Sieve script runs has permissions to execute "fileinto" on it.
The capability string for use with the require command is "mailbox".
Example: The following example assumes that the Sieve engine also supports "reject" [REJECT] and "fileinto" [SIEVE].
However, these extensions are not required in order to implement the "mailbox" extension.
":create" Argument to "fileinto" Command Usage:  fileinto [:create]
If the optional ":create" argument is specified with "fileinto", it instructs the Sieve interpreter to create the specified mailbox, if needed, before attempting to deliver the message into the specified mailbox.
If the mailbox already exists, this argument is ignored.
Failure to create the specified mailbox is considered to be an error.
The capability string for use with the ":create" parameter is "mailbox".
3.3.  Test "metadata" Usage:  metadata [MATCH TYPE]
This test retrieves the value of the mailbox annotation "annotation  name" for the mailbox "mailbox" [METADATA].
The retrieved value is compared to the "key list".
The test returns true if the annotation exists and its value matches any of the keys.
The default match type is ":is" [SIEVE].
The default comparator is "i;ascii casemap" [SIEVE].
The capability string for use with the require command is "mboxmetadata".
Annotations MUST be accessed with the permissions of the user in whose context the Sieve script runs, and annotations starting with the "/private" prefix MUST be those of the user in whose context the Sieve script runs.
Example: The following example assumes that the Sieve engine also supports the "vacation" [VACATION] extension.
However, this extension is not required in order to implement the "mboxmetadata" extension.
require ["mboxmetadata", "vacation"]; if metadata :is "INBOX" "/private/vendor/vendor.isode/auto replies" "on" { vacation text: I'm away on holidays till March 2009.
Test "metadataexists" Usage:  metadataexists <mailbox:
The "metadataexists" test is true if all of the annotations listed in the "annotation names" argument exist (i.e., have non NIL values) for the specified mailbox.
The capability string for use with the require command is "mboxmetadata".
Test "servermetadata" Usage:  servermetadata [MATCH TYPE]
This test retrieves the value of the server annotation "annotation  name" [METADATA].
The retrieved value is compared to the "key list".
The test returns true if the annotation exists and its value matches any of the keys.
The default match type is ":is".
The default comparator is "i;ascii  casemap".
The capability string for use with the require command is "servermetadata".
Annotations MUST be accessed with the permissions of the user in whose context the Sieve script runs, and annotations starting with the "/private" prefix MUST be those of the user in whose context the Sieve script runs.
Example: The following example assumes that the Sieve engine also supports "variables" [VARIABLES], "enotify" [NOTIFY], and "envelope" [SIEVE] extensions.
However, these extensions are not required in order to implement the "servermetadata" extension.
> The "servermetadataexists" test is true if all of the server annotations listed in the "annotation names" argument exist (i.e., have non NIL values).
The capability string for use with the require command is "servermetadata".
Security Considerations Extensions defined in this document
deliberately don't provide a way to modify annotations.
A failure to retrieve data due to the server storing the annotations being down or otherwise inaccessible may alter the result of Sieve processing.
So implementations SHOULD treat a temporary failure to retrieve annotations in the same manner as a temporary failure to retrieve a Sieve script.
For example, if the Sieve script is stored in the Lightweight Directory Access Protocol (LDAP) and the script can't be retrieved when a message is processed, then the agent performing Sieve processing can, for example, assume that the script doesn't exist or delay message delivery until the script can be retrieved successfully.
Annotations should be treated as if they are a part of the script itself, so a temporary failure to retrieve them should be handled in the same way as a temporary failure to retrieve the Sieve script itself.
Protocols/APIs used to retrieve annotations MUST provide at least the same level of confidentiality as protocols/APIs used to retrieve Sieve scripts.
For example, if Sieve scripts are retrieved using LDAP secured with Transport Layer Security (TLS) encryption, then the protocol used to retrieve annotations must use a comparable mechanism for providing connection confidentiality.
In particular, the protocol used to retrieve annotations must not be lacking encryption.
IANA Considerations IANA has added the following registrations to the list of Sieve extensions:
Registration of new Sieve extension Capability name: mailbox Description: adds test for checking for mailbox existence and a new optional argument to fileinto for creating a mailbox before attempting mail delivery.
The Sieve discussion list <ietf mta filters@imc.org
mboxmetadata Description: adds tests for checking for mailbox metadata item existence and for retrieving of a mailbox metadata value.
The Sieve discussion list <ietf mta filters@imc.org
servermetadata Description: adds tests for checking for server metadata item existence and for retrieving of a server metadata value.
The Sieve discussion list <ietf mta filters@imc.org>
