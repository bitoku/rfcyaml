- title: __initial_text__
  contents:
  - "               Use of the RSA-KEM Key Transport Algorithm\n               in\
    \ the Cryptographic Message Syntax (CMS)\n"
- title: Abstract
  contents:
  - "Abstract\n   The RSA-KEM Key Transport Algorithm is a one-pass (store-and-forward)\n\
    \   mechanism for transporting keying data to a recipient using the\n   recipient's\
    \ RSA public key.  (\"KEM\" stands for \"key encapsulation\n   mechanism\".) \
    \ This document specifies the conventions for using the\n   RSA-KEM Key Transport\
    \ Algorithm with the Cryptographic Message Syntax\n   (CMS).  The ASN.1 syntax\
    \ is aligned with an expected forthcoming\n   change to American National Standard\
    \ (ANS) X9.44.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5990.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Conventions Used in This Document ..........................4\n  \
    \ 2. Use in CMS ......................................................4\n    \
    \  2.1. Underlying Components ......................................4\n      2.2.\
    \ RecipientInfo Conventions ..................................5\n      2.3. Certificate\
    \ Conventions ....................................5\n      2.4. SMIMECapabilities\
    \ Attribute Conventions ....................6\n   3. Security Considerations .........................................7\n\
    \   4. IANA Considerations .............................................9\n  \
    \ 5. Acknowledgements ................................................9\n   6.\
    \ References .....................................................10\n      6.1.\
    \ Normative References ......................................10\n      6.2. Informative\
    \ References ....................................11\n   Appendix A.  RSA-KEM Key\
    \ Transport Algorithm ......................12\n      A.1.  Underlying Components\
    \ ....................................12\n      A.2.  Sender's Operations ......................................12\n\
    \      A.3.  Recipient's Operations ...................................13\n  \
    \ Appendix B.  ASN.1 Syntax .........................................15\n    \
    \  B.1.  RSA-KEM Key Transport Algorithm ..........................16\n      B.2.\
    \  Selected Underlying Components ...........................18\n         B.2.1.\
    \  Key Derivation Functions ............................18\n         B.2.2.  Symmetric\
    \ Key-Wrapping Schemes ......................19\n      B.3.  ASN.1 Module .............................................20\n\
    \      B.4.  Examples .................................................25\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The RSA-KEM Key Transport Algorithm is a one-pass (store-and-forward)\n\
    \   mechanism for transporting keying data to a recipient using the\n   recipient's\
    \ RSA public key.\n   Most previous key transport algorithms based on the RSA\
    \ public-key\n   cryptosystem (e.g., the popular PKCS #1 v1.5 algorithm [PKCS1])\
    \ have\n   the following general form:\n   1. Format or \"pad\" the keying data\
    \ to obtain an integer m.\n   2. Encrypt the integer m with the recipient's RSA\
    \ public key:\n         c = m^e mod n\n   3. Output c as the encrypted keying\
    \ data.\n   The RSA-KEM Key Transport Algorithm takes a different approach that\n\
    \   provides higher security assurance, by encrypting a _random_ integer\n   with\
    \ the recipient's public key, and using a symmetric key-wrapping\n   scheme to\
    \ encrypt the keying data.  It has the following form:\n   1. Generate a random\
    \ integer z between 0 and n-1.\n   2. Encrypt the integer z with the recipient's\
    \ RSA public key:\n         c = z^e mod n\n   3. Derive a key-encrypting key KEK\
    \ from the integer z.\n   4. Wrap the keying data using KEK to obtain wrapped\
    \ keying data WK.\n   5. Output c and WK as the encrypted keying data.\n   This\
    \ different approach provides higher security assurance because\n   (a) the input\
    \ to the underlying RSA operation is effectively a random\n   integer between\
    \ 0 and n-1, where n is the RSA modulus, so it does not\n   have any structure\
    \ that could be exploited by an adversary, and\n   (b) the input is independent\
    \ of the keying data so the result of the\n   RSA decryption operation is not\
    \ directly available to an adversary.\n   As a result, the algorithm enjoys a\
    \ \"tight\" security proof in the\n   random oracle model.  (In other padding\
    \ schemes, such as PKCS #1\n   v1.5, the input has structure and/or depends on\
    \ the keying data, and\n   the provable security assurances are not as strong.)\
    \  The approach is\n   also architecturally convenient because the public-key\
    \ operations are\n   separate from the symmetric operations on the keying data.\
    \  Another\n   benefit is that the length of the keying data is bounded only by\
    \ the\n   symmetric key-wrapping scheme, not the size of the RSA modulus.\n  \
    \ The RSA-KEM Key Transport Algorithm in various forms is being adopted\n   in\
    \ several draft standards as well as in American National Standard\n   (ANS) X9.44\
    \ [ANS-X9.44].  It has also been recommended by the New\n   European Schemes for\
    \ Signatures, Integrity, and Encryption (NESSIE)\n   project [NESSIE].  Originally,\
    \ [ANS-X9.44] specified a different\n   object identifier to identify the RSA-KEM\
    \ Key Transport Algorithm.\n   [ANS-X9.44] used id-ac-generic-hybrid, while this\
    \ document uses\n   id-rsa-kem.  These OIDs are used in the KeyTransportInfo field\
    \ to\n   indicate the key encryption algorithm, in certificates to allow\n   recipients\
    \ to restrict their public keys for use with RSA-KEM only,\n   and in SMIME Capability\
    \ attributes to allow recipients to advertise\n   their support for RSA-KEM. \
    \ Legacy implementations that wish to\n   interoperate with [ANS-X9.44] should\
    \ consult that specification for\n   more information on id-ac-generic-hybrid.\n\
    \   For completeness, a specification of the algorithm is given in\n   Appendix\
    \ A of this document; ASN.1 syntax is given in Appendix B.\n      NOTE: The term\
    \ \"KEM\" stands for \"key encapsulation mechanism\" and\n      refers to the\
    \ first three steps of the process above.  The\n      formalization of key transport\
    \ algorithms (or more generally,\n      asymmetric encryption schemes) in terms\
    \ of key encapsulation\n      mechanisms is described further in research by Victor\
    \ Shoup\n      leading to the development of the ISO/IEC 18033-2 standard\n  \
    \    [SHOUP].\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    ,  \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [STDWORDS].\n"
- title: 2.  Use in CMS
  contents:
  - "2.  Use in CMS\n   The RSA-KEM Key Transport Algorithm MAY be employed for one\
    \ or more\n   recipients in the CMS enveloped-data content type (Section 6 of\n\
    \   [CMS]), where the keying data processed by the algorithm is the CMS\n   content-encryption\
    \ key.\n"
- title: 2.1.  Underlying Components
  contents:
  - "2.1.  Underlying Components\n   A CMS implementation that supports the RSA-KEM\
    \ Key Transport\n   Algorithm MUST support at least the following underlying components:\n\
    \   o  For the key derivation function, KDF3 (see [ANS-X9.44]) based on\n    \
    \  SHA-256 (see [FIPS-180-3]).  KDF3 is an instantiation of the\n      Concatenation\
    \ Key Derivation Function defined in [NIST-SP800-56A].\n   o  For the key-wrapping\
    \ scheme, AES-Wrap-128, i.e., the AES Key Wrap\n      with a 128-bit key-encrypting\
    \ key (see [AES-WRAP]).\n   An implementation SHOULD also support KDF2 (see [ANS-X9.44])\
    \ based on\n   SHA-1 (this function is also specified as the key derivation function\n\
    \   in [ANS-X9.63]).  The Camellia key wrap algorithm (see [CAMELLIA])\n   SHOULD\
    \ be supported if Camellia is supported as a content-encryption\n   cipher.  The\
    \ Triple-DES Key Wrap (see [3DES-WRAP]) SHOULD also be\n   supported if Triple-DES\
    \ is supported as a content-encryption cipher.\n   It MAY support other underlying\
    \ components.  When AES or Camellia is\n   used, the data block size is 128 bits\
    \ and the key size can be 128,\n   192, or 256 bits, while Triple-DES requires\
    \ a data block size of\n   64 bits and a key size of 112 or 168 bits.\n"
- title: 2.2.  RecipientInfo Conventions
  contents:
  - "2.2.  RecipientInfo Conventions\n   When the RSA-KEM Key Transport Algorithm\
    \ is employed for a recipient,\n   the RecipientInfo alternative for that recipient\
    \ MUST be\n   KeyTransRecipientInfo.  The algorithm-specific fields of the\n \
    \  KeyTransRecipientInfo value MUST have the following values:\n   o  keyEncryptionAlgorithm.algorithm\
    \ MUST be id-rsa-kem (see\n      Appendix B);\n   o  keyEncryptionAlgorithm.parameters\
    \ MUST be a value of type\n      GenericHybridParameters, identifying the RSA-KEM\
    \ key encapsulation\n      mechanism (see Appendix B);\n   o  encryptedKey MUST\
    \ be the encrypted keying data output by the\n      algorithm, where the keying\
    \ data is the content-encryption key\n      (see Appendix A).\n"
- title: 2.3.  Certificate Conventions
  contents:
  - "2.3.  Certificate Conventions\n   The conventions specified in this section augment\
    \ RFC 5280 [PROFILE].\n   A recipient who employs the RSA-KEM Key Transport Algorithm\
    \ MAY\n   identify the public key in a certificate by the same\n   AlgorithmIdentifier\
    \ as for the PKCS #1 v1.5 algorithm, i.e., using\n   the rsaEncryption object\
    \ identifier [PKCS1].  The fact that the user\n   will accept RSA-KEM with this\
    \ public key is not indicated by the use\n   of this identifier.  This MAY be\
    \ signaled by the use of the\n   appropriate SMIME Capabilities either in a message\
    \ or in the\n   certificate.\n   If the recipient wishes only to employ the RSA-KEM\
    \ Key Transport\n   Algorithm with a given public key, the recipient MUST identify\
    \ the\n   public key in the certificate using the id-rsa-kem object identifier\n\
    \   (see Appendix B).  When the id-rsa-kem algorithm identifier appears\n   in\
    \ the SubjectPublicKeyInfo algorithm field, the encoding SHALL omit\n   the parameters\
    \ field from AlgorithmIdentifier.  That is, the\n   AlgorithmIdentifier SHALL\
    \ be a SEQUENCE of one component, the object\n   identifier id-rsa-kem.\n   Regardless\
    \ of the AlgorithmIdentifier used, the RSA public key is\n   encoded in the same\
    \ manner in the subject public key information.\n   The RSA public key MUST be\
    \ encoded using the type RSAPublicKey type:\n      RSAPublicKey ::= SEQUENCE {\n\
    \         modulus            INTEGER, -- n\n         publicExponent     INTEGER\
    \  -- e\n      }\n   Here, the modulus is the modulus n, and publicExponent is\
    \ the public\n   exponent e.  The Distinguished Encoding Rules (DER)-encoded\n\
    \   RSAPublicKey is carried in the subjectPublicKey BIT STRING within the\n  \
    \ subject public key information.\n   The intended application for the key MAY\
    \ be indicated in the key\n   usage certificate extension (see [PROFILE], Section\
    \ 4.2.1.3).  If the\n   keyUsage extension is present in a certificate that conveys\
    \ an RSA\n   public key with the id-rsa-kem object identifier as discussed above,\n\
    \   then the key usage extension MUST contain the following value:\n       keyEncipherment\n\
    \   dataEncipherment SHOULD NOT be present.  That is, a key intended to\n   be\
    \ employed only with the RSA-KEM Key Transport Algorithm SHOULD NOT\n   also be\
    \ employed for data encryption or for authentication such as in\n   signatures.\
    \  Good cryptographic practice employs a given RSA key pair\n   in only one scheme.\
    \  This practice avoids the risk that vulnerability\n   in one scheme may compromise\
    \ the security of the other, and may be\n   essential to maintain provable security.\n"
- title: 2.4.  SMIMECapabilities Attribute Conventions
  contents:
  - "2.4.  SMIMECapabilities Attribute Conventions\n   RFC 3851 [MSG], Section 2.5.2\
    \ defines the SMIMECapabilities signed\n   attribute (defined as a SEQUENCE of\
    \ SMIMECapability SEQUENCEs) to be\n   used to specify a partial list of algorithms\
    \ that the software\n   announcing the SMIMECapabilities can support.  When constructing\
    \ a\n   signedData object, compliant software MAY include the\n   SMIMECapabilities\
    \ signed attribute announcing that it supports the\n   RSA-KEM Key Transport Algorithm.\n\
    \   The SMIMECapability SEQUENCE representing the RSA-KEM Key Transport\n   Algorithm\
    \ MUST include the id-rsa-kem object identifier (see\n   Appendix B) in the capabilityID\
    \ field and MUST include a\n   GenericHybridParameters value in the parameters\
    \ field identifying the\n   components with which the algorithm is to be employed.\n\
    \   The DER encoding of a SMIMECapability SEQUENCE is the same as the DER\n  \
    \ encoding of an AlgorithmIdentifier.  Example DER encodings for\n   typical sets\
    \ of components are given in Appendix B.4.\n"
- title: 3.  Security Considerations
  contents:
  - "3.  Security Considerations\n   The RSA-KEM Key Transport Algorithm should be\
    \ considered for new CMS-\n   based applications as a replacement for the widely\
    \ implemented RSA\n   encryption algorithm specified originally in PKCS #1 v1.5\
    \ (see\n   [PKCS1] and Section 4.2.1 of [CMSALGS]), which is vulnerable to\n \
    \  chosen-ciphertext attacks.  The RSA Encryption Scheme - Optimal\n   Asymmetric\
    \ Encryption Padding (RSAES-OAEP) Key Transport Algorithm\n   has also been proposed\
    \ as a replacement (see [PKCS1] and [CMS-OAEP]).\n   RSA-KEM has the advantage\
    \ over RSAES-OAEP of a tighter security\n   proof, but the disadvantage of slightly\
    \ longer encrypted keying data.\n   The security of the RSA-KEM Key Transport\
    \ Algorithm described in this\n   document can be shown to be tightly related\
    \ to the difficulty of\n   either solving the RSA problem or breaking the underlying\
    \ symmetric\n   key-wrapping scheme, if the underlying key derivation function\
    \ is\n   modeled as a random oracle, and assuming that the symmetric key-\n  \
    \ wrapping scheme satisfies the properties of a data encapsulation\n   mechanism\
    \ [SHOUP].  While in practice a random-oracle result does not\n   provide an actual\
    \ security proof for any particular key derivation\n   function, the result does\
    \ provide assurance that the general\n   construction is reasonable; a key derivation\
    \ function would need to\n   be particularly weak to lead to an attack that is\
    \ not possible in the\n   random oracle model.\n   The RSA key size and the underlying\
    \ components should be selected\n   consistent with the desired symmetric security\
    \ level for an\n   application.  Several security levels have been identified\
    \ in the\n   NIST FIPS PUB 800-57 [NIST-GUIDELINE].  For brevity, the first three\n\
    \   levels are mentioned here:\n   o  80-bit security.  The RSA key size SHOULD\
    \ be at least 1024 bits,\n      the hash function underlying the KDF SHOULD be\
    \ SHA-1 or above, and\n      the symmetric key-wrapping scheme SHOULD be AES Key\
    \ Wrap, Triple-\n      DES Key Wrap, or Camellia Key Wrap.\n   o  112-bit security.\
    \  The RSA key size SHOULD be at least 2048 bits,\n      the hash function underlying\
    \ the KDF SHOULD be SHA-224 or above,\n      and the symmetric key-wrapping scheme\
    \ SHOULD be AES Key Wrap,\n      Triple-DES Key Wrap, or Camellia Key Wrap.\n\
    \   o  128-bit security.  The RSA key size SHOULD be at least 3072 bits,\n   \
    \   the hash function underlying the KDF SHOULD be SHA-256 or above,\n      and\
    \ the symmetric key-wrapping scheme SHOULD be AES Key Wrap or\n      Camellia\
    \ Key Wrap.\n   Note that the AES Key Wrap or Camellia Key Wrap MAY be used at\
    \ all\n   three of these levels; the use of AES or Camellia does not require a\n\
    \   128-bit security level for other components.\n   Implementations MUST protect\
    \ the RSA private key and the content-\n   encryption key.  Compromise of the\
    \ RSA private key may result in the\n   disclosure of all messages protected with\
    \ that key.  Compromise of\n   the content-encryption key may result in disclosure\
    \ of the associated\n   encrypted content.\n   Additional considerations related\
    \ to key management may be found in\n   [NIST-GUIDELINE].\n   The security of\
    \ the algorithm also depends on the strength of the\n   random number generator,\
    \ which SHOULD have a comparable security\n   level.  For further discussion on\
    \ random number generation, please\n   see [RANDOM].\n   Implementations SHOULD\
    \ NOT reveal information about intermediate\n   values or calculations, whether\
    \ by timing or other \"side channels\",\n   or otherwise an opponent may be able\
    \ to determine information about\n   the keying data and/or the recipient's private\
    \ key.  Although not all\n   intermediate information may be useful to an opponent,\
    \ it is\n   preferable to conceal as much information as is practical, unless\n\
    \   analysis specifically indicates that the information would not be\n   useful.\n\
    \   Generally, good cryptographic practice employs a given RSA key pair\n   in\
    \ only one scheme.  This practice avoids the risk that vulnerability\n   in one\
    \ scheme may compromise the security of the other, and may be\n   essential to\
    \ maintain provable security.  While RSA public keys have\n   often been employed\
    \ for multiple purposes such as key transport and\n   digital signature without\
    \ any known bad interactions, for increased\n   security assurance, such combined\
    \ use of an RSA key pair is NOT\n   RECOMMENDED in the future (unless the different\
    \ schemes are\n   specifically designed to be used together).\n   Accordingly,\
    \ an RSA key pair used for the RSA-KEM Key Transport\n   Algorithm SHOULD NOT\
    \ also be used for digital signatures.  (Indeed,\n   the Accredited Standards\
    \ Committee X9 (ASC X9) requires such a\n   separation between key establishment\
    \ key pairs and digital signature\n   key pairs.)  Continuing this principle of\
    \ key separation, a key pair\n   used for the RSA-KEM Key Transport Algorithm\
    \ SHOULD NOT be used with\n   other key establishment schemes, or for data encryption,\
    \ or with more\n   than one set of underlying algorithm components.\n   Parties\
    \ MAY formalize the assurance that one another's\n   implementations are correct\
    \ through implementation validation, e.g.,\n   NIST's Cryptographic Module Validation\
    \ Program (CMVP).\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   Within the CMS, algorithms are identified by object\
    \ identifiers\n   (OIDs).  With one exception, all of the OIDs used in this document\n\
    \   were assigned in other IETF documents, in ISO/IEC standards\n   documents,\
    \ by the National Institute of Standards and Technology\n   (NIST), and in Public-Key\
    \ Cryptography Standards (PKCS) documents.\n   The two exceptions are the ASN.1\
    \ module's identifier (see Appendix\n   B.3) and id-rsa-kem that are both assigned\
    \ in this document.  The\n   module object identifiers are defined in an arc delegated\
    \ by the\n   former company RSA Data Security Inc. to the S/MIME Working Group.\n\
    \   When the S/MIME Working Group closes, this arc and its registration\n   procedures\
    \ will be transferred to IANA.\n"
- title: 5.  Acknowledgements
  contents:
  - "5.  Acknowledgements\n   This document is one part of a strategy to align algorithm\
    \ standards\n   produced by ASC X9, ISO/IEC JTC1 SC27, NIST, and the IETF.  We\
    \ would\n   like to thank the members of the ASC X9F1 working group for their\n\
    \   contributions to drafts of ANS X9.44, which led to this\n   specification.\n\
    \   Our thanks to Russ Housley as well for his guidance and\n   encouragement.\
    \  We also appreciate the helpful direction we've\n   received from Blake Ramsdell\
    \ and Jim Schaad in bringing this document\n   to fruition.  A special thanks\
    \ to Magnus Nystrom for his assistance\n   on Appendix B.  Thanks also to Bob\
    \ Griffin and John Linn for both\n   editorial direction and procedural guidance.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [3DES-WRAP]       Housley, R., \"Triple-DES and\
    \ RC2 Key Wrapping\",\n                     RFC 3217, December 2001.\n   [AES-WRAP]\
    \        Schaad, J. and R. Housley, \"Advanced Encryption\n                  \
    \   Standard (AES) Key Wrap Algorithm\", RFC 3394,\n                     September\
    \ 2002.\n   [ANS-X9.44]       ASC X9F1 Working Group.  American National Standard\n\
    \                     X9.44: Public Key Cryptography for the Financial\n     \
    \                Services Industry -- Key Establishment Using\n              \
    \       Integer Factorization Cryptography.  2007.\n   [ANS-X9.63]       American\
    \ National Standard X9.63-2002: Public Key\n                     Cryptography\
    \ for the Financial Services Industry:\n                     Key Agreement and\
    \ Key Transport Using Elliptic\n                     Curve Cryptography.\n   [CAMELLIA]\
    \        Moriai, S. and A. Kato, \"Use of the Camellia\n                     Encryption\
    \ Algorithm in Cryptographic Message\n                     Syntax (CMS)\", RFC\
    \ 3657, January 2004.\n   [CMS]             Housley, R., \"Cryptographic Message\
    \ Syntax (CMS)\",\n                     RFC 5652, September 2009.\n   [CMSALGS]\
    \         Housley, R., \"Cryptographic Message Syntax (CMS)\n                \
    \     Algorithms\", RFC 3370, August 2002.\n   [FIPS-180-3]      National Institute\
    \ of Standards and Technology\n                     (NIST).  FIPS 180-3: Secure\
    \ Hash Standard.  October\n                     2008.\n   [MSG]             Ramsdell,\
    \ B. and S. Turner, \"Secure/Multipurpose\n                     Internet Mail\
    \ Extensions (S/MIME) Version 3.2\n                     Message Specification\"\
    , RFC 5751, January 2010.\n   [PROFILE]         Cooper, D., Santesson, S., Farrell,\
    \ S., Boeyen, S.,\n                     Housley, R., and W. Polk, \"Internet X.509\
    \ Public\n                     Key Infrastructure Certificate and Certificate\n\
    \                     Revocation List (CRL) Profile\", RFC 5280, May 2008.\n \
    \  [STDWORDS]        Bradner, S., \"Key words for use in RFCs to Indicate\n  \
    \                   Requirement Levels\", BCP 14, RFC 2119, March 1997.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [AES-WRAP-PAD]    Housley, R. and M. Dworkin,\
    \ \"Advanced Encryption\n                     Standard (AES) Key Wrap with Padding\
    \ Algorithm\",\n                     RFC 5649, September 2009.\n   [CMS-OAEP]\
    \        Housley, R., \"Use of the RSAES-OAEP Key Transport\n                \
    \     Algorithm in Cryptographic Message Syntax (CMS)\",\n                   \
    \  RFC 3560, July 2003.\n   [NESSIE]          NESSIE Consortium.  Portfolio of\
    \ Recommended\n                     Cryptographic Primitives.  February 2003.\n\
    \                     http://www.cryptonessie.org/.\n   [NIST-GUIDELINE]  National\
    \ Institute of Standards and Technology.\n                     Special Publication\
    \ 800-57: Recommendation for Key\n                     Management - Part 1: General\
    \ (Revised).  March\n                     2007.\n                     http://csrc.nist.gov/publications/index.html.\n\
    \   [NIST-SP800-56A]  National Institute of Standards and Technology.\n      \
    \               Special Publication 800-56A: Recommendation for\n            \
    \         Pair-Wise Key Establishment Schemes Using Discrete\n               \
    \      Logarithm Cryptography (Revised).  March 2007.\n                     http://csrc.nist.gov/publications/index.html.\n\
    \   [PKCS1]           Jonsson, J. and B. Kaliski, \"Public-Key\n             \
    \        Cryptography Standards (PKCS) #1: RSA Cryptography\n                \
    \     Specifications Version 2.1\", RFC 3447, February\n                     2003.\n\
    \   [RANDOM]          Eastlake 3rd, D., Schiller, J., and S. Crocker,\n      \
    \               \"Randomness Requirements for Security\", BCP 106,\n         \
    \            RFC 4086, June 2005.\n   [SHOUP]           Shoup, V.  A Proposal\
    \ for an ISO Standard for\n                     Public Key Encryption.  Version\
    \ 2.1, December 20,\n                     2001.  http://eprint.iacr.org/2001/112.\n"
- title: Appendix A.  RSA-KEM Key Transport Algorithm
  contents:
  - "Appendix A.  RSA-KEM Key Transport Algorithm\n   The RSA-KEM Key Transport Algorithm\
    \ is a one-pass (store-and-forward)\n   mechanism for transporting keying data\
    \ to a recipient using the\n   recipient's RSA public key.\n   With this type\
    \ of algorithm, a sender encrypts the keying data using\n   the recipient's public\
    \ key to obtain encrypted keying data.  The\n   recipient decrypts the encrypted\
    \ keying data using the recipient's\n   private key to recover the keying data.\n"
- title: A.1.  Underlying Components
  contents:
  - "A.1.  Underlying Components\n   The algorithm has the following underlying components:\n\
    \   o  KDF, a key derivation function, which derives keying data of a\n      specified\
    \ length from a shared secret value;\n   o  Wrap, a symmetric key-wrapping scheme,\
    \ which encrypts keying Data\n      using a key-encrypting key.\n   In the following,\
    \ kekLen denotes the length in bytes of the key-\n   encrypting key for the underlying\
    \ symmetric key-wrapping scheme.\n   In this scheme, the length of the keying\
    \ data to be transported MUST\n   be among the lengths supported by the underlying\
    \ symmetric key-\n   wrapping scheme.  (Both the AES and Camellia Key Wraps, for\
    \ instance,\n   require the length of the keying data to be a multiple of 8 bytes,\n\
    \   and at least 16 bytes.)  Usage and formatting of the keying data\n   (e.g.,\
    \ parity adjustment for Triple-DES keys) is outside the scope of\n   this algorithm.\
    \  With some key derivation functions, it is possible\n   to include other information\
    \ besides the shared secret value in the\n   input to the function.  Also, with\
    \ some symmetric key-wrapping\n   schemes, it is possible to associate a label\
    \ with the keying data.\n   Such uses are outside the scope of this document,\
    \ as they are not\n   directly supported by CMS.\n"
- title: A.2.  Sender's Operations
  contents:
  - "A.2.  Sender's Operations\n   Let (n,e) be the recipient's RSA public key (see\
    \ [PKCS1] for\n   details), and let K be the keying data to be transported.\n\
    \   Let nLen denote the length in bytes of the modulus n, i.e., the least\n  \
    \ integer such that 2^{8*nLen} > n.\n   The sender performs the following operations:\n\
    \   1. Generate a random integer z between 0 and n-1 (see note), and\n      convert\
    \ z to a byte string Z of length nLen, most significant byte\n      first:\n \
    \        z = RandomInteger (0, n-1)\n         Z = IntegerToString (z, nLen)\n\
    \   2. Encrypt the random integer z using the recipient's public key\n      (n,e),\
    \ and convert the resulting integer c to a ciphertext C, a\n      byte string\
    \ of length nLen:\n         c = z^e mod n\n         C = IntegerToString (c, nLen)\n\
    \   3. Derive a key-encrypting key KEK of length kekLen bytes from the\n     \
    \ byte string Z using the underlying key derivation function:\n         KEK =\
    \ KDF (Z, kekLen)\n   4. Wrap the keying data K with the key-encrypting key KEK\
    \ using the\n      underlying key-wrapping scheme to obtain wrapped keying data\
    \ WK:\n         WK = Wrap (KEK, K)\n   5. Concatenate the ciphertext C and the\
    \ wrapped keying data WK to\n      obtain the encrypted keying data EK:\n    \
    \     EK = C || WK\n   6. Output the encrypted keying data EK.\n   NOTE: The random\
    \ integer z MUST be generated independently at random\n   for different encryption\
    \ operations, whether for the same or\n   different recipients.\n"
- title: A.3.  Recipient's Operations
  contents:
  - "A.3.  Recipient's Operations\n   Let (n,d) be the recipient's RSA private key\
    \ (see [PKCS1]; other\n   private key formats are allowed), and let EK be the\
    \ encrypted keying\n   data.\n   Let nLen denote the length in bytes of the modulus\
    \ n.\n   The recipient performs the following operations:\n   1. Separate the\
    \ encrypted keying data EK into a ciphertext C of\n      length nLen bytes and\
    \ wrapped keying data WK:\n         C || WK = EK\n      If the length of the encrypted\
    \ keying data is less than nLen\n      bytes, output \"decryption error\", and\
    \ stop.\n   2. Convert the ciphertext C to an integer c, most significant byte\n\
    \      first.  Decrypt the integer c using the recipient's private key\n     \
    \ (n,d) to recover an integer z (see note):\n         c = StringToInteger (C)\n\
    \         z = c^d mod n\n      If the integer c is not between 0 and n-1, output\
    \ \"decryption\n      error\", and stop.\n   3. Convert the integer z to a byte\
    \ string Z of length nLen, most\n      significant byte first (see note):\n  \
    \       Z = IntegerToString (z, nLen)\n   4. Derive a key-encrypting key KEK of\
    \ length kekLen bytes from the\n      byte string Z using the underlying key derivation\
    \ function (see\n      note):\n         KEK = KDF (Z, kekLen)\n   5. Unwrap the\
    \ wrapped keying data WK with the key-encrypting key KEK\n      using the underlying\
    \ key-wrapping scheme to recover the keying\n      data K:\n         K = Unwrap\
    \ (KEK, WK)\n      If the unwrapping operation outputs an error, output \"decryption\n\
    \      error\", and stop.\n   6. Output the keying data K.\n   NOTE: Implementations\
    \ SHOULD NOT reveal information about the\n   integer z and the string Z, nor\
    \ about the calculation of the\n   exponentiation in Step 2, the conversion in\
    \ Step 3, or the key\n   derivation in Step 4, whether by timing or other \"side\
    \ channels\".\n   The observable behavior of the implementation SHOULD be the\
    \ same at\n   these steps for all ciphertexts C that are in range.  (For example,\n\
    \   IntegerToString conversion should take the same amount of time\n   regardless\
    \ of the actual value of the integer z.)  The integer z, the\n   string Z, and\
    \ other intermediate results MUST be securely deleted\n   when they are no longer\
    \ needed.\n"
- title: Appendix B.  ASN.1 Syntax
  contents:
  - "Appendix B.  ASN.1 Syntax\n   The ASN.1 syntax for identifying the RSA-KEM Key\
    \ Transport Algorithm\n   is an extension of the syntax for the \"generic hybrid\
    \ cipher\" in\n   ANS X9.44 [ANS-X9.44].  The syntax for the scheme is given in\n\
    \   Appendix B.1.  The syntax for selected underlying components\n   including\
    \ those mentioned above is given in Appendix B.2.\n   The following object identifier\
    \ prefixes are used in the definitions\n   below:\n      is18033-2 OID ::= { iso(1)\
    \ standard(0) is18033(18033) part2(2) }\n      nistAlgorithm OID ::= {\n     \
    \    joint-iso-itu-t(2) country(16) us(840) organization(1)\n         gov(101)\
    \ csor(3) nistAlgorithm(4)\n      }\n      pkcs-1 OID ::= {\n         iso(1) member-body(2)\
    \ us(840) rsadsi(113549) pkcs(1) pkcs-1(1)\n      }\n      x9-44 OID ::= { iso(1)\
    \ identified-organization(3) tc68(133)\n        country(16) x9(840) x9Standards(9)\
    \ x9-44(44) }\n      x9-44-components OID ::= { x9-44 components(1) }\n   NullParms\
    \ is a more descriptive synonym for NULL when an algorithm\n   identifier has\
    \ null parameters:\n      NullParms ::= NULL\n   The material in this Appendix\
    \ is based on ANS X9.44.\n"
- title: B.1.  RSA-KEM Key Transport Algorithm
  contents:
  - "B.1.  RSA-KEM Key Transport Algorithm\n   The object identifier for the RSA-KEM\
    \ Key Transport Algorithm is\n   id-rsa-kem, which is defined in this document\
    \ as:\n      id-rsa-kem OID ::= {\n         iso(1) member-body(2) us(840) rsadsi(113549)\
    \ pkcs(1)\n         pkcs-9(9) smime(16) alg(3) 14\n      }\n   When id-rsa-kem\
    \ is used in an AlgorithmIdentifier, the parameters\n   MUST employ the GenericHybridParameters\
    \ syntax.  The parameters MUST\n   be absent when used in the SubjectPublicKeyInfo\
    \ field.  The syntax\n   for GenericHybridParameters is as follows:\n      GenericHybridParameters\
    \ ::= {\n         kem  KeyEncapsulationMechanism,\n         dem  DataEncapsulationMechanism\n\
    \      }\n   The fields of type GenericHybridParameters have the following\n \
    \  meanings:\n      o  kem identifies the underlying key encapsulation mechanism,\n\
    \         which in this case is also denoted as RSA-KEM.\n         The object\
    \ identifier for RSA-KEM (as a key encapsulation\n         mechanism) is id-kem-rsa\
    \ as:\n            id-kem-rsa OID ::= {\n               is18033-2 key-encapsulation-mechanism(2)\
    \ rsa(4)\n            }\n         The associated parameters for id-kem-rsa have\
    \ type\n         RsaKemParameters:\n            RsaKemParameters ::= {\n     \
    \          keyDerivationFunction  KeyDerivationFunction,\n               keyLength\
    \              KeyLength\n            }\n         The fields of type RsaKemParameters\
    \ have the following\n         meanings:\n         *  keyDerivationFunction identifies\
    \ the underlying key\n            derivation function.  For alignment with ANS\
    \ X9.44, it MUST\n            be KDF2 or KDF3.  However, other key derivation\
    \ functions\n            MAY be used with CMS.  Please see Appendix B.2.1 for\
    \ the\n            syntax for KDF2 and KDF3.\n               KeyDerivationFunction\
    \ ::=\n                  AlgorithmIdentifier {{KDFAlgorithms}}\n             \
    \  KDFAlgorithms ALGORITHM ::= {\n                  kdf2 | kdf3,\n           \
    \       ...  -- implementations may define other methods\n               }\n \
    \        *  keyLength is the length in bytes of the key-encrypting key,\n    \
    \        which depends on the underlying symmetric key-wrapping\n            scheme.\n\
    \               KeyLength ::= INTEGER (1..MAX)\n      o  dem identifies the underlying\
    \ data encapsulation mechanism.\n         For alignment with ANS X9.44, it MUST\
    \ be an X9-approved\n         symmetric key-wrapping scheme.  However, other symmetric\
    \ key-\n         wrapping schemes MAY be used with CMS.  Please see Appendix\n\
    \         B.2.2 for the syntax for the AES, Triple-DES, and Camellia Key\n   \
    \      Wraps.\n            DataEncapsulationMechanism ::=\n               AlgorithmIdentifier\
    \ {{DEMAlgorithms}}\n            DEMAlgorithms ALGORITHM ::= {\n             \
    \  X9-SymmetricKeyWrappingSchemes,\n               Camellia-KeyWrappingSchemes,\n\
    \               ...  -- implementations may define other methods\n           \
    \ }\n            X9-SymmetricKeyWrappingSchemes ALGORITHM ::= {\n            \
    \   aes128-Wrap | aes192-Wrap | aes256-Wrap | tdes-Wrap,\n               ... \
    \ -- allows for future expansion\n            }\n            Camellia-KeyWrappingSchemes\
    \ ALGORITHM ::= {\n               Camellia128-Wrap | Camellia192-Wrap | Camellia256-Wrap\n\
    \            }\n"
- title: B.2.  Selected Underlying Components
  contents:
  - 'B.2.  Selected Underlying Components

    '
- title: B.2.1.  Key Derivation Functions
  contents:
  - "B.2.1.  Key Derivation Functions\n   The object identifier for KDF2 (see [ANS-X9.44])\
    \ is:\n      id-kdf-kdf2 OID ::= { x9-44-components kdf2(1) }\n   The associated\
    \ parameters identify the underlying hash function.  For\n   alignment with ANS\
    \ X9.44, the hash function MUST be an ASC\n   X9-approved hash function.  However,\
    \ other hash functions MAY be used\n   with CMS.\n      kdf2 ALGORITHM ::= { OID\
    \ id-kdf-kdf2  PARMS KDF2-HashFunction }\n      KDF2-HashFunction ::= AlgorithmIdentifier\
    \ {{KDF2-HashFunctions}}\n      KDF2-HashFunctions ALGORITHM ::= {\n         X9-HashFunctions,\n\
    \         ...  -- implementations may define other methods\n      }\n      X9-HashFunctions\
    \ ALGORITHM ::= {\n         sha1 | sha224 | sha256 | sha384 | sha512,\n      \
    \   ...  -- allows for future expansion\n      }\n   The object identifier for\
    \ SHA-1 is:\n      id-sha1 OID ::= {\n         iso(1) identified-organization(3)\
    \ oiw(14) secsig(3)\n         algorithms(2) sha1(26)\n      }\n   The object identifiers\
    \ for SHA-224, SHA-256, SHA-384, and SHA-512 are\n      id-sha224 OID ::= { nistAlgorithm\
    \ hashAlgs(2) sha224(4) }\n      id-sha256 OID ::= { nistAlgorithm hashAlgs(2)\
    \ sha256(1) }\n      id-sha384 OID ::= { nistAlgorithm hashAlgs(2) sha384(2) }\n\
    \      id-sha512 OID ::= { nistAlgorithm hashAlgs(2) sha512(3) }\n   There has\
    \ been some confusion over whether the various SHA object\n   identifiers have\
    \ a NULL parameter, or no associated parameters.  As\n   also discussed in [PKCS1],\
    \ implementations SHOULD generate algorithm\n   identifiers without parameters\
    \ and MUST accept algorithm identifiers\n   either without parameters, or with\
    \ NULL parameters.\n      sha1   ALGORITHM ::= { OID id-sha1   } -- NULLParms\
    \ MUST be\n      sha224 ALGORITHM ::= { OID id-sha224 } -- accepted for these\n\
    \      sha256 ALGORITHM ::= { OID id-sha256 } -- OIDs\n      sha384 ALGORITHM\
    \ ::= { OID id-sha384 } -- \"\"\n      sha512 ALGORITHM ::= { OID id-sha512 }\
    \ -- \"\"\n   The object identifier for KDF3 (see [ANS-X9.44]) is:\n      id-kdf-kdf3\
    \ OID ::= { x9-44-components kdf3(2) }\n   The associated parameters identify\
    \ the underlying hash function.  For\n   alignment with the draft ANS X9.44, the\
    \ hash function MUST be an ASC\n   X9-approved hash function.  However, other\
    \ hash functions MAY be used\n   with CMS.\n      kdf3 ALGORITHM ::= { OID id-kdf-kdf3\
    \  PARMS KDF3-HashFunction }\n      KDF3-HashFunction ::= AlgorithmIdentifier\
    \ { KDF3-HashFunctions }\n      KDF3-HashFunctions ALGORITHM ::= {\n         X9-HashFunctions,\n\
    \         ...  -- implementations may define other methods\n      }\n"
- title: B.2.2.  Symmetric Key-Wrapping Schemes
  contents:
  - "B.2.2.  Symmetric Key-Wrapping Schemes\n   The object identifiers for the AES\
    \ Key Wrap depend on the size of the\n   key-encrypting key.  There are three\
    \ object identifiers (see\n   [AES-WRAP]):\n      id-aes128-Wrap OID ::= { nistAlgorithm\
    \ aes(1) aes128-Wrap(5) }\n      id-aes192-Wrap OID ::= { nistAlgorithm aes(1)\
    \ aes192-Wrap(25) }\n      id-aes256-Wrap OID ::= { nistAlgorithm aes(1) aes256-Wrap(45)\
    \ }\n   These object identifiers have no associated parameters.\n      aes128-Wrap\
    \ ALGORITHM ::= { OID id-aes128-Wrap }\n      aes192-Wrap ALGORITHM ::= { OID\
    \ id-aes192-Wrap }\n      aes256-Wrap ALGORITHM ::= { OID id-aes256-Wrap }\n \
    \  The object identifier for the Triple-DES Key Wrap (see\n   [3DES-WRAP]) is:\n\
    \      id-alg-CMS3DESwrap OBJECT IDENTIFIER ::= {\n         iso(1) member-body(2)\
    \ us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n         smime(16) alg(3) 6\n    \
    \  }\n   This object identifier has a NULL parameter.\n      tdes-Wrap ALGORITHM\
    \ ::=\n         { OID id-alg-CMS3DESwrap  PARMS NullParms }\n   NOTE: ASC X9 has\
    \ not yet incorporated AES Key Wrap with Padding\n   [AES-WRAP-PAD] into ANS X9.44.\
    \  When ASC X9.44 adds AES Key Wrap with\n   Padding, this document will also\
    \ be updated.\n   The object identifiers for the Camellia Key Wrap depend on the\
    \ size\n   of the key-encrypting key.  There are three object identifiers:\n \
    \     id-camellia128-Wrap OBJECT IDENTIFIER ::=\n         { iso(1) member-body(2)\
    \ 392 200011 61 security(1)\n           algorithm(1) key-wrap-algorithm(3)\n \
    \          camellia128-wrap(2) }\n      id-camellia192-Wrap OBJECT IDENTIFIER\
    \ ::=\n         { iso(1) member-body(2) 392 200011 61 security(1)\n          \
    \ algorithm(1) key-wrap-algorithm(3)\n           camellia192-wrap(3) }\n     \
    \ id-camellia256-Wrap OBJECT IDENTIFIER ::=\n         { iso(1) member-body(2)\
    \ 392 200011 61 security(1)\n           algorithm(1) key-wrap-algorithm(3)\n \
    \          camellia256-wrap(4) }\n   These object identifiers have no associated\
    \ parameters.\n      camellia128-Wrap ALGORITHM ::= { OID id-camellia128-Wrap\
    \ }\n      camellia192-Wrap ALGORITHM ::= { OID id-camellia192-Wrap }\n      camellia256-Wrap\
    \ ALGORITHM ::= { OID id-camellia256-Wrap }\n"
- title: B.3.  ASN.1 Module
  contents:
  - "B.3.  ASN.1 Module\n   CMS-RSA-KEM\n      { iso(1) member-body(2) us(840) rsadsi(113549)\
    \ pkcs(1)\n        pkcs-9(9) smime(16) modules(0) cms-rsa-kem(21) }\n   DEFINITIONS\
    \ ::=\n   BEGIN\n   -- EXPORTS ALL\n   -- IMPORTS None\n   -- Useful types and\
    \ definitions\n   OID ::= OBJECT IDENTIFIER  -- alias\n   -- Unless otherwise\
    \ stated, if an object identifier has associated\n   -- parameters (i.e., the\
    \ PARMS element is specified), the\n   -- parameters field shall be included in\
    \ algorithm identifier\n   -- values.  The parameters field shall be omitted if\
    \ and only if\n   -- the object identifier does not have associated parameters\n\
    \   -- (i.e., the PARMS element is omitted), unless otherwise stated.\n   ALGORITHM\
    \ ::= CLASS {\n      &id    OBJECT IDENTIFIER  UNIQUE,\n      &Type  OPTIONAL\n\
    \   }\n   WITH SYNTAX { OID &id [PARMS &Type] }\n   AlgorithmIdentifier { ALGORITHM:IOSet\
    \ } ::= SEQUENCE {\n      algorithm   ALGORITHM.&id( {IOSet} ),\n      parameters\
    \  ALGORITHM.&Type( {IOSet}{@algorithm} ) OPTIONAL\n   }\n   NullParms ::= NULL\n\
    \   -- ISO/IEC 18033-2 arc\n   is18033-2 OID ::= { iso(1) standard(0) is18033(18033)\
    \ part2(2) }\n   -- NIST algorithm arc\n   nistAlgorithm OID ::= {\n      joint-iso-itu-t(2)\
    \ country(16) us(840) organization(1)\n      gov(101) csor(3) nistAlgorithm(4)\n\
    \   }\n   -- PKCS #1 arc\n   pkcs-1 OID ::= {\n      iso(1) member-body(2) us(840)\
    \ rsadsi(113549) pkcs(1) pkcs-1(1)\n   }\n   -- RSA-KEM Key Transport Algorithm\n\
    \   id-rsa-kem OID ::= {\n      iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)\n\
    \      pkcs-9(9) smime(16) alg(3) 14\n   }\n   GenericHybridParameters ::= SEQUENCE\
    \ {\n      kem  KeyEncapsulationMechanism,\n      dem  DataEncapsulationMechanism\n\
    \   }\n   KeyEncapsulationMechanism ::= AlgorithmIdentifier {{KEMAlgorithms}}\n\
    \   KEMAlgorithms ALGORITHM ::= { kem-rsa, ... }\n   kem-rsa ALGORITHM ::= { OID\
    \ id-kem-rsa PARMS RsaKemParameters }\n   id-kem-rsa OID ::= {\n      is18033-2\
    \ key-encapsulation-mechanism(2) rsa(4)\n   }\n   RsaKemParameters ::= SEQUENCE\
    \ {\n      keyDerivationFunction  KeyDerivationFunction,\n      keyLength    \
    \          KeyLength\n   }\n   KeyDerivationFunction ::= AlgorithmIdentifier {{KDFAlgorithms}}\n\
    \   KDFAlgorithms ALGORITHM ::= {\n      kdf2 | kdf3,\n      ...  -- implementations\
    \ may define other methods\n   }\n   KeyLength ::= INTEGER (1..MAX)\n   DataEncapsulationMechanism\
    \ ::= AlgorithmIdentifier {{DEMAlgorithms}}\n   DEMAlgorithms ALGORITHM ::= {\n\
    \      X9-SymmetricKeyWrappingSchemes |\n      Camellia-KeyWrappingSchemes,\n\
    \      ...  -- implementations may define other methods\n   }\n   X9-SymmetricKeyWrappingSchemes\
    \ ALGORITHM ::= {\n      aes128-Wrap | aes192-Wrap | aes256-Wrap | tdes-Wrap,\n\
    \      ...  -- allows for future expansion\n   }\n   X9-SymmetricKeyWrappingScheme\
    \ ::=\n               AlgorithmIdentifier {{ X9-SymmetricKeyWrappingSchemes }}\n\
    \   Camellia-KeyWrappingSchemes ALGORITHM ::= {\n      camellia128-Wrap | camellia192-Wrap\
    \ | camellia256-Wrap,\n      ... -- allows for future expansion\n   }\n   Camellia-KeyWrappingScheme\
    \ ::=\n                  AlgorithmIdentifier {{ Camellia-KeyWrappingSchemes }}\n\
    \   -- Key Derivation Functions\n   id-kdf-kdf2 OID ::= { x9-44-components kdf2(1)\
    \ }\n   -- Base arc\n   x9-44 OID ::= {\n      iso(1) identified-organization(3)\
    \ tc68(133) country(16) x9(840)\n      x9Standards(9) x9-44(44)\n   }\n   x9-44-components\
    \ OID ::= { x9-44 components(1) }\n   kdf2 ALGORITHM ::= { OID id-kdf-kdf2  PARMS\
    \ KDF2-HashFunction }\n   KDF2-HashFunction ::= AlgorithmIdentifier {{ KDF2-HashFunctions\
    \ }}\n   KDF2-HashFunctions ALGORITHM ::= {\n      X9-HashFunctions,\n      ...\
    \  -- implementations may define other methods\n   }\n   id-kdf-kdf3 OID ::= {\
    \ x9-44-components kdf3(2) }\n   kdf3 ALGORITHM ::= { OID id-kdf-kdf3  PARMS KDF3-HashFunction\
    \ }\n   KDF3-HashFunction  ::= AlgorithmIdentifier {{ KDF3-HashFunctions }}\n\
    \   KDF3-HashFunctions ALGORITHM ::= {\n      X9-HashFunctions,\n      ...  --\
    \ implementations may define other methods\n   }\n   -- Hash Functions\n   X9-HashFunctions\
    \ ALGORITHM ::= {\n      sha1 | sha224 | sha256 | sha384 | sha512,\n      ...\
    \  -- allows for future expansion\n   }\n   id-sha1 OID ::= {\n      iso(1) identified-organization(3)\
    \ oiw(14) secsig(3)\n      algorithms(2) sha1(26)\n   }\n   id-sha224 OID ::=\
    \ { nistAlgorithm hashAlgs(2) sha224(4) }\n   id-sha256 OID ::= { nistAlgorithm\
    \ hashAlgs(2) sha256(1) }\n   id-sha384 OID ::= { nistAlgorithm hashAlgs(2) sha384(2)\
    \ }\n   id-sha512 OID ::= { nistAlgorithm hashAlgs(2) sha512(3) }\n   sha1   ALGORITHM\
    \ ::= { OID id-sha1    } -- NullParms MUST be\n   sha224 ALGORITHM ::= { OID id-sha224\
    \  } -- accepted for these\n   sha256 ALGORITHM ::= { OID id-sha256  } -- OIDs\n\
    \   sha384 ALGORITHM ::= { OID id-sha384  } -- \"\"\n   sha512 ALGORITHM ::= {\
    \ OID id-sha512  } -- \"\"\n   -- Symmetric Key-Wrapping Schemes\n   id-aes128-Wrap\
    \ OID ::= { nistAlgorithm aes(1) aes128-Wrap(5)  }\n   id-aes192-Wrap OID ::=\
    \ { nistAlgorithm aes(1) aes192-Wrap(25) }\n   id-aes256-Wrap OID ::= { nistAlgorithm\
    \ aes(1) aes256-Wrap(45) }\n   aes128-Wrap ALGORITHM ::= { OID id-aes128-Wrap\
    \ }\n   aes192-Wrap ALGORITHM ::= { OID id-aes192-Wrap }\n   aes256-Wrap ALGORITHM\
    \ ::= { OID id-aes256-Wrap }\n   id-alg-CMS3DESwrap OBJECT IDENTIFIER ::= {\n\
    \      iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)\n      smime(16)\
    \ alg(3) 6\n   }\n   tdes-Wrap ALGORITHM ::= { OID id-alg-CMS3DESwrap  PARMS NullParms\
    \ }\n   id-camellia128-Wrap OBJECT IDENTIFIER ::=\n      { iso(1) member-body(2)\
    \ 392 200011 61 security(1)\n        algorithm(1) key-wrap-algorithm(3)\n    \
    \    camellia128-wrap(2) }\n   id-camellia192-Wrap OBJECT IDENTIFIER ::=\n   \
    \   { iso(1) member-body(2) 392 200011 61 security(1)\n        algorithm(1) key-wrap-algorithm(3)\n\
    \        camellia192-wrap(3) }\n   id-camellia256-Wrap OBJECT IDENTIFIER ::=\n\
    \      { iso(1) member-body(2) 392 200011 61 security(1)\n        algorithm(1)\
    \ key-wrap-algorithm(3)\n        camellia256-wrap(4) }\n   camellia128-Wrap ALGORITHM\
    \ ::= { OID id-camellia128-Wrap }\n   camellia192-Wrap ALGORITHM ::= { OID id-camellia192-Wrap\
    \ }\n   camellia256-Wrap ALGORITHM ::= { OID id-camellia256-Wrap }\n   END\n"
- title: B.4.  Examples
  contents:
  - "B.4.  Examples\n   As an example, if the key derivation function is KDF3 based\
    \ on\n   SHA-256 and the symmetric key-wrapping scheme is the AES Key Wrap\n \
    \  with a 128-bit KEK, the AlgorithmIdentifier for the RSA-KEM Key\n   Transport\
    \ Algorithm will have the following value:\n   SEQUENCE {\n      id-rsa-kem, \
    \                                  -- RSA-KEM cipher\n      SEQUENCE {       \
    \                    -- GenericHybridParameters\n         SEQUENCE {         \
    \           -- key encapsulation mechanism\n            id-kem-rsa,          \
    \                          -- RSA-KEM\n            SEQUENCE {                \
    \            -- RsaKemParameters\n               SEQUENCE {                  --\
    \ key derivation function\n                  id-kdf-kdf3,                    \
    \            -- KDF3\n                  SEQUENCE {                     -- KDF3-HashFunction\n\
    \                     id-sha256  -- SHA-256; no parameters (preferred)\n     \
    \             },\n               16                              -- KEK length\
    \ in bytes\n               },\n         SEQUENCE {                   -- data encapsulation\
    \ mechanism\n            id-aes128-Wrap             -- AES-128 Wrap; no parameters\n\
    \         }\n      }\n   }\n   This AlgorithmIdentifier value has the following\
    \ DER encoding:\n   30 47\n     06 0b 2a 86 48 86 f7 0d 01 09 10 03 0e       \
    \    -- id-rsa-kem\n     30 38\n        30 29\n           06 07 28 81 8c 71 02\
    \ 02 04                 -- id-kem-rsa\n           30 1e\n              30 19\n\
    \                 06 0a 2b 81 05 10 86 48 09 2c 01 02  -- id-kdf-kdf3\n      \
    \           30 0b\n                    06 09 60 86 48 01 65 03 04 02 01  -- id-sha256\n\
    \                    02 01 10                          -- 16 bytes\n         30\
    \ 0b\n            06 09 60 86 48 01 65 03 04 01 05         -- id-aes128-Wrap\n\
    \   The DER encodings for other typical sets of underlying components are\n  \
    \ as follows:\n   o  KDF3 based on SHA-384, AES Key Wrap with a 192-bit KEK\n\
    \         30 47 06 0b 2a 86 48 86 f7 0d 01 09 10 03 0e 30\n         38 30 29 06\
    \ 07 28 81 8c 71 02 02 04 30 1e 30 19\n         06 0a 2b 81 05 10 86 48 09 2c\
    \ 01 02 30 0b 06 09\n         60 86 48 01 65 03 04 02 02 02 01 18 30 0b 06 09\n\
    \         60 86 48 01 65 03 04 01 19\n   o  KDF3 based on SHA-512, AES Key Wrap\
    \ with a 256-bit KEK\n         30 47 06 0b 2a 86 48 86 f7 0d 01 09 10 03 0e 30\n\
    \         38 30 29 06 07 28 81 8c 71 02 02 04 30 1e 30 19\n         06 0a 2b 81\
    \ 05 10 86 48 09 2c 01 02 30 0b 06 09\n         60 86 48 01 65 03 04 02 03 02\
    \ 01 20 30 0b 06 09\n         60 86 48 01 65 03 04 01 2d\n   o  KDF2 based on\
    \ SHA-1, Triple-DES Key Wrap with a 128-bit KEK (two-\n      key Triple-DES)\n\
    \         30 45 06 0b 2a 86 48 86 f7 0d 01 09 10 03 0e 30\n         36 30 25 06\
    \ 07 28 81 8c 71 02 02 04 30 1a 30 15\n         06 0a 2b 81 05 10 86 48 09 2c\
    \ 01 01 30 07 06 05\n         2b 0e 03 02 1a 02 01 10 30 0d 06 0b 2a 86 48 86\n\
    \         f7 0d 01 09 10 03 06\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   James Randall\n   Randall Consulting\n   55 Sandpiper\
    \ Drive\n   Dover, NH  03820\n   USA\n   EMail: jdrandall@comcast.net\n   Burt\
    \ Kaliski\n   EMC\n   176 South Street\n   Hopkinton, MA  01748\n   USA\n   EMail:\
    \ burt.kaliski@emc.com\n   John Brainard\n   RSA, The Security Division of EMC\n\
    \   174 Middlesex Turnpike\n   Bedford, MA  01730\n   USA\n   EMail: jbrainard@rsa.com\n\
    \   Sean Turner\n   IECA, Inc.\n   3057 Nutley Street, Suite 106\n   Fairfax,\
    \ VA  22031\n   USA\n   EMail: turners@ieca.com\n"
