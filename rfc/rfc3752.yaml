- title: __initial_text__
  contents:
  - "                  Open Pluggable Edge Services (OPES)\n                   Use\
    \ Cases and Deployment Scenarios\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo provides a discussion of use cases and deployment scenarios\n\
    \   for Open Pluggable Edge Services (OPES).  The work examines services\n   that\
    \ could be performed to requests and/or responses.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Types of OPES services . . . . . . . . . . . . . . .\
    \ . . . . .  3\n       2.1.  Services performed on requests . . . . . . . . .\
    \ . . . .  3\n             2.1.1.  Services intending to modify requests  . .\
    \ . . .  3\n             2.1.2.  Services *not* intending to modify requests \
    \ . .  4\n       2.2.  Services performed on responses. . . . . . . . . . . .\
    \ .  4\n             2.2.1.  Services intending to modify responses . . . . .\
    \  4\n             2.2.2.  Services *not* intending to modify responses . .  5\n\
    \       2.3.  Services creating responses. . . . . . . . . . . . . . .  5\n  \
    \ 3.  OPES deployment scenarios  . . . . . . . . . . . . . . . . . .  5\n    \
    \   3.1.  Surrogate Overlays . . . . . . . . . . . . . . . . . . .  6\n      \
    \ 3.2.  Delegate Overlays  . . . . . . . . . . . . . . . . . . .  7\n       3.3.\
    \  Enterprise environment . . . . . . . . . . . . . . . . .  8\n       3.4.  Callout\
    \ Servers  . . . . . . . . . . . . . . . . . . . .  9\n       3.5.  Chaining of\
    \ OPES data filters and callout servers  . . .  9\n             3.5.1.  Chaining\
    \ along the content path. . . . . . . . .  9\n             3.5.2.  Chaining along\
    \ the callout path. . . . . . . . .  9\n   4.  Failure cases and service notification\
    \ . . . . . . . . . . . . 10\n   5.  Security Considerations. . . . . . . . .\
    \ . . . . . . . . . . . 11\n   6.  Informative References . . . . . . . . . .\
    \ . . . . . . . . . . 11\n   7.  Acknowledgements . . . . . . . . . . . . . .\
    \ . . . . . . . . . 12\n   8.  Authors' Addresses . . . . . . . . . . . . . .\
    \ . . . . . . . . 12\n   9.  Full Copyright Statement . . . . . . . . . . . .\
    \ . . . . . . . 14\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Open Pluggable Edge Services (OPES) [1] architecture\
    \ enables\n   cooperative application services (OPES services) between a data\n\
    \   provider, a data consumer, and zero or more OPES processors.  The\n   application\
    \ services under consideration analyze and possibly\n   transform application-level\
    \ messages exchanged between the data\n   provider and the data consumer.  The\
    \ execution of such services is\n   governed by a set of filtering rules installed\
    \ on the OPES processor.\n   The rules enforcement can trigger the execution of\
    \ service\n   applications local to the OPES processor.  Alternatively, the OPES\n\
    \   processor can distribute the responsibility of service execution by\n   communicating\
    \ and collaborating with one or more remote callout [6]\n   servers.\n   The document\
    \ presents examples of services in which Open Pluggable\n   Edge Services (OPES)\
    \ would be useful.  There are different types of\n   OPES services: services that\
    \ modify requests, services that modify\n   responses, and a special case of the\
    \ latter, services that create\n   responses.\n   The work also examines various\
    \ deployment scenarios of OPES services.\n   The two main deployment scenarios,\
    \ as described by the OPES\n   architecture [1], are surrogate overlays and delegate\
    \ overlays.\n   Surrogate overlays act on behalf of data provider applications,\
    \ while\n   delegate overlays act on behalf of data consumer applications.  The\n\
    \   document also describes combined surrogate and delegate overlays, as\n   one\
    \ might find within an enterprise deployment.\n   The document is organized as\
    \ follows: Section 2 discusses the various\n   types of OPES services.  Section\
    \ 3 introduces OPES deployment\n   scenarios.  Section 4 discusses failure cases\
    \ and service\n   notification.  Section 5 discusses security considerations.\n\
    \   The IAB has expressed architectural and policy concerns [2] about\n   OPES.\
    \  Other OPES documents that may be relevant are, \"OPES Service\n   Authorization\
    \ and Enforcement Requirements\" [5].  See references [3,\n   4] for recommended\
    \ background reading.\n"
- title: 2.  Types of OPES services
  contents:
  - "2.  Types of OPES services\n   OPES scenarios involve services that can be performed\
    \ on requests for\n   data and/or responses.  OPES services can be classified\
    \ into three\n   categories: services performed on requests, services performed\
    \ on\n   responses, and services creating responses.  In Figure 1, the four\n\
    \   service activation points for an OPES processor are depicted.  The\n   data\
    \ dispatcher examines OPES rules, enforces policies, and invokes\n   service applications\
    \ (if applicable) at each service activation\n   point.\n              +------------------------------------------------+\n\
    \              |         +-------------+-------------+          |\n          \
    \    |         |   Service Application     |          |\n              |     \
    \    +---------------------------+          |\n         Responses      |     \
    \  Data Dispatcher     |     Responses\n       <============4== +---------------------------+\
    \ <=3===========\n         Requests       |           HTTP            |      Requests\n\
    \       =============1=> +---------------------------+ ==2==========>\n      \
    \        |                  OPES Processor                |\n              +------------------------------------------------+\n\
    \                  Figure 1: Service Activation Points\n"
- title: 2.1.  Services performed on requests
  contents:
  - "2.1.  Services performed on requests\n   An OPES service performed on HTTP requests\
    \ may occur when a request\n   arrives at an OPES processor (point 1) or when\
    \ it is about to leave\n   the OPES processor (point 2).\n   The services performed\
    \ on requests can further be divided into two\n   cases: those that intend to\
    \ modify requests and those that do not.\n"
- title: 2.1.1.  Services intending to modify requests
  contents:
  - "2.1.1.  Services intending to modify requests\n   An OPES processor may modify\
    \ a service request on behalf of the data\n   consumer for various reasons, such\
    \ as:\n   o  Owner of a Web access device might need control over what kind of\n\
    \      Web content can be accessed with the device, parental control for\n   \
    \   example.\n   o  Organization may restrict or redirect access to certain web\n\
    \      services based on various criteria such as time of the day or the\n   \
    \   employee access privileges.\n   o  Hiding the data consumer's identity, user\
    \ agent, or referrer.\n   o  Adding user preferences or device profile to the\
    \ service request\n      to get personalized or adapted services.\n   o  Blocking\
    \ or redirecting a service request due to a corporate\n      policy.\n   An OPES\
    \ processor may also modify a service request on behalf of the\n   data provider\
    \ in several ways, such as:\n   o  Redirecting the request to a different server\
    \ to reduce the server\n      work load.\n   o  Redirecting image requests to\
    \ improve access time.\n"
- title: 2.1.2.  Services *not* intending to modify requests
  contents:
  - "2.1.2.  Services *not* intending to modify requests\n   An OPES processor may\
    \ invoke useful service applications that do not\n   modify the user requests.\
    \  Examples include:\n   o  Administrative functions for the data provider, such\
    \ as service\n      monitoring or usage tracking for billing purposes.\n   o \
    \ Useful services for the data consumer, such as user profiling\n      (with the\
    \ user's consent) for service adaptation later on.\n"
- title: 2.2.  Services performed on responses
  contents:
  - "2.2.  Services performed on responses\n   An OPES service performed on HTTP responses\
    \ may occur when a response\n   arrives at an OPES processor (point 3) or when\
    \ it is about to leave\n   the OPES processor (point 4).   In the case of a caching\
    \ proxy, the\n   former service may be an encoding operation before the content\
    \ is\n   stored in the cache, while the latter may be a decoding operation\n \
    \  before the content is returned to the data consumer.\n   The services performed\
    \ on responses can further be divided into two\n   cases: those that intend to\
    \ modify responses and those that do not.\n"
- title: 2.2.1.  Services intending to modify responses
  contents:
  - "2.2.1.  Services intending to modify responses\n   There are several reasons\
    \ why responses from the data providers might\n   be modified before delivery\
    \ to the data consumer:\n   o  Content adaptation:  the data provider may not\
    \ have all the device\n      profiles and templates necessary to transcode the\
    \ original content\n      into a format appropriate for mobile devices of limited\
    \ screen\n      size and display capabilities.\n   o  Language translation:  the\
    \ data provider may not have all the\n      translation capabilities needed to\
    \ deliver the same content in\n      multiple languages to various areas around\
    \ the world.  An OPES\n      processor may perform the language translation or\
    \ it may invoke\n      different callout servers to perform different language\n\
    \      translation tasks.\n"
- title: 2.2.2.  Services *not* intending to modify responses
  contents:
  - "2.2.2.  Services *not* intending to modify responses\n   An OPES service may\
    \ be performed on the responses without modifying\n   them.  Examples include:\n\
    \   o  Logging/Monitoring: Each response may be examined and recorded for\n  \
    \    monitoring or debugging purposes.\n   o  Accounting: An OPES processor may\
    \ record the usage data (time and\n      space) of each service request for billing\
    \ purposes.\n"
- title: 2.3.  Services creating responses
  contents:
  - "2.3.  Services creating responses\n   Services creating responses may include\
    \ OPES services that\n   dynamically assemble web pages based on the context of\
    \ the data\n   consumer application.\n   Consider a content provider offering\
    \ web pages that include a local\n   weather forecast based on the requestor's\
    \ preferences.  The OPES\n   service could analyze received requests, identify\
    \ associated user\n   preferences, select appropriate templates, insert the corresponding\n\
    \   local weather forecasts, and would then deliver the content to the\n   requestor.\
    \  Note that the OPES processor may perform the tasks with\n   or without direct\
    \ access to the weather data.  For example, the\n   service could use locally\
    \ cached weather data or it could simply\n   embed a URL pointing to another server\
    \ that holds the latest local\n   weather forecast information.\n"
- title: 3.  OPES deployment scenarios
  contents:
  - "3.  OPES deployment scenarios\n   OPES entities can be deployed over an overlay\
    \ network that supports\n   the provisioning of data services in a distributed\
    \ manner.  Overlay\n   networks are an abstraction that creates a virtual network\
    \ of\n   connected devices layered on an existing underlying IP networks in\n\
    \   order to perform application level services.\n   The use of overlay networks\
    \ creates virtual networks that via OPES\n   entities enables the necessary network\
    \ infrastructure to provide\n   better services for data consumer and provider\
    \ applications.  At the\n   application level, the resulting overlay networks\
    \ are termed OPES\n   Services Networks.\n   There are two parties that are interested\
    \ in the services that are\n   offered by OPES entities, the delegate and the\
    \ surrogate.  Delegates\n   are authorized agents that act on behalf of data consumers.\n\
    \   Surrogates are authorized agents that act on behalf of data\n   providers.\n\
    \   All parties that are involved in enforcing policies must communicate\n   the\
    \ policies to the parties that are involved.  These parties are\n   trusted to\
    \ adhere to the communicated policies.\n   In order to delegate fine-grained trust,\
    \ the parties must convey\n   policy information by implicit contract, by a setup\
    \ protocol, by a\n   dynamic negotiation protocol, or in-line with application\
    \ data\n   headers.\n"
- title: 3.1.  Surrogate Overlays
  contents:
  - "3.1.  Surrogate Overlays\n   A surrogate overlay is a specific type of OPES service\
    \ network, which\n   is delegated the authority to provide data services on behalf\
    \ of one\n   or more origin servers.  Such services include, but are not limited\n\
    \   to, dynamic assembling of web pages, watermarking, and content\n   adaptation.\n\
    \   The elements of surrogate overlays act on behalf of origin severs and\n  \
    \ logically belong to the authoritative domain of the respective origin\n   servers.\
    \  The scenario is depicted in Figure 2.\n              *********************************************\n\
    \              *                                           *\n              *\
    \    +--------+             Authoritative   *\n              *    | Origin | \
    \                   Domain   *\n              *    | Server |                \
    \             *\n              *    +--------+       +------------+        *\n\
    \              *         |           | OPES Admin |        *\n              *\
    \         |           |   Server   |        *\n              *         |     \
    \      +------------+        *\n              *         |         /          \
    \             *\n              *         |       /                         *\n\
    \              * +--------------+      +-----------------+ *\n              *\
    \ |     OPES     |----- | Remote Call-out | *\n              * |   Processor \
    \ |      |     Server      | *\n              * +--------------+      +-----------------+\
    \ *\n              *         |                                 *\n           \
    \   *********************************************\n                        |\n\
    \                        |\n                        |\n                   +---------------------------+\n\
    \                   | Data consumer application |\n                   +---------------------------+\n\
    \         Figure 2: Authoritative Domains for Surrogate Overlays\n"
- title: 3.2.  Delegate Overlays
  contents:
  - "3.2.  Delegate Overlays\n   A delegate overlay is a specific type of OPES service\
    \ network, which\n   is delegated the authority to provide data services on behalf\
    \ of one\n   or more data consumer applications.\n   Delegate overlays provide\
    \ services that would otherwise be performed\n   by the data consumer applications.\
    \  Such services include, but are\n   not limited to, virus scanning and content\
    \ filtering.\n   The elements of delegate overlays logically belong to the\n \
    \  authoritative domain of the respective data consumer application.\n   The situation\
    \ is illustrated in Figure 3.\n                   +--------+\n               \
    \    | Origin |\n                   | Server |\n                   +--------+\n\
    \                        |\n                        |\n                      \
    \  |\n              *********************************************\n          \
    \    *         |                                 *\n              * +--------------+\
    \      +-----------------+ *\n              * |     OPES     |----- | Remote Call-out\
    \ | *\n              * |    Processor |      |     Server      | *\n         \
    \     * +--------------+      +-----------------+ *\n              *         |\
    \       \\                         *\n              *         |         +------------+\
    \          *\n              *         |         | OPES Admin |          *\n  \
    \            *         |         |   Server   |          *\n              *  \
    \       |         +------------+          *\n              *    +---------------------+\
    \                *\n              *    | Data consumer Appl. | Authoritative \
    \ *\n              *    +---------------------+        Domain  *\n           \
    \   *                                           *\n              *********************************************\n\
    \         Figure 3: Authoritative Domains for Delegate Overlays\n"
- title: 3.3.  Enterprise environment
  contents:
  - "3.3.  Enterprise environment\n   Deployment of OPES services in an enterprise\
    \ environment is unique in\n   several ways:\n   o  Both data providers and data\
    \ consumers are in the same\n      administrative domain and trust domain.  This\
    \ implies that the\n      logical OPES administrator has the authority to enforce\
    \ corporate\n      policies on all data providers, data consumers, and OPES entities.\n\
    \   o  In the case when a callout server outside the corporate firewall\n    \
    \  is invoked for services (such as language translation) that cannot\n      be\
    \ performed inside the corporation, care must be taken to\n      guarantee a secure\
    \ communication channel between the callout\n      server and corporate OPES entities.\
    \  The callout server must also\n      adhere to all corporate security policies\
    \ for the services\n      authorized.\n"
- title: 3.4.  Callout Servers
  contents:
  - "3.4.  Callout Servers\n   In some cases the deployment of OPES services can benefit\
    \ from the\n   use of callout servers that could distribute the workload of OPES\n\
    \   processors or to contract specialized services from other OPES\n   providers.\n\
    \   In general, operations such as virus scanning that operate on large\n   objects\
    \ are better handled through the use of a dedicated callout\n   server that is\
    \ better designed to perform the memory intensive task\n   than what an OPES processor\
    \ could handle.\n"
- title: 3.5.  Chaining of OPES data filters and callout servers
  contents:
  - "3.5.  Chaining of OPES data filters and callout servers\n   OPES data processors\
    \ can be \"chained\" in two dimensions: along the\n   content path or along the\
    \ callout path.  In the latter case, the\n   callout servers can themselves be\
    \ organized in series for handling\n   requests.  Any content that is touched\
    \ by more than one data\n   processor or more than one callout server has been\
    \ handled by a\n   \"chain\".\n   NOTE: Chaining of callout servers is deferred\
    \ from version 1 of the\n   Protocol.  The discussion of chaining is included\
    \ here for\n   completeness.\n"
- title: 3.5.1.  Chaining along the content path
  contents:
  - "3.5.1.  Chaining along the content path\n   An OPES provider may have assigned\
    \ OPES services to a set of\n   processors arranged in series.  All content might\
    \ move through the\n   series, and if the content matches the rules for a processor,\
    \ it is\n   subjected to the service.  In this way, the content can be enhanced\n\
    \   by several services.  This kind of chaining can be successful if the\n   services\
    \ are relatively independent.  For example, the content might\n   be assembled\
    \ by a service early in the chain and then further\n   decorated by a later service.\n"
- title: 3.5.2.  Chaining along the callout path
  contents:
  - "3.5.2.  Chaining along the callout path\n   Alternatively, an OPES data processor\
    \ might act as a content-level\n   switch in a cluster of other data processors\
    \ and callout servers.\n   The first stage might develop a processing schedule\
    \ for the content\n   and direct it to other OPES data processors and/or callout\
    \ servers.\n   For example, OPES processor A might handle all services assembling\n\
    \   content, OPES processor B might handle all services involving URL\n   translation,\
    \ and OPES processor C might handle all content security\n   services.  The first\
    \ processor would determine that processors A and\n   C were needed for a particular\
    \ content object, and it would direct\n   the content to those processors.  In\
    \ turn, the processors might use\n   several callout servers to accomplish the\
    \ task.\n"
- title: 4.  Failure cases and service notification
  contents:
  - "4.  Failure cases and service notification\n   These are illustrative cases where\
    \ information about OPES processing\n   can help endpoint users determine where\
    \ and why content modifications\n   are being performed.\n   o  Content provider\
    \ uses an OPES data processor to enhance content\n      based only on context\
    \ local to the provider.  The local context\n      might be time of day, local\
    \ URL, or available advertising, for\n      example.  The content provider might\
    \ find OPES logging to be\n      sufficient for debugging any problems in this\
    \ case.  However, the\n      content provider might also try direct probing by\
    \ issuing a\n      request for the content and examining headers related to tracing.\n\
    \      If unexpected parameters show up in the trace headers, the content\n  \
    \    provider's administrator can use these to correct the OPES rules\n      or\
    \ detect the presence of an unexpected OPES processor in the\n      content path.\n\
    \   o  Content provider uses an OPES data processor to enhance content\n     \
    \ based on context related to the requestor.  The requestor may\n      notice\
    \ that his requests do not elicit the same response as\n      another requestor.\
    \  He may, for example, get an error message.  If\n      he believes there is\
    \ a configuration error on the OPES data\n      processor, he will need to provide\
    \ information to the\n      administrator of it.  If the information includes\
    \ \"OPES service\n      access control, action: blocked\", for example, he can\
    \ inquire\n      about the circumstances that will allow him to be added to the\n\
    \      access control list.  In another example, if he sees a picture\n      unrelated\
    \ to the surrounding text, and if the tracing shows \"OPES\n      service choose\
    \ picture, action: insert 640x480 weather.gif\", he\n      might complain that\
    \ the OPES service does not properly recognize\n      his geographic location\
    \ and inserts the wrong weather map.  In any\n      case, if the information is\
    \ forwarded to the content provider, the\n      problem may be fixed.\n   o  End\
    \ user has OPES processor available as part of his network\n      access environment.\
    \  The end user may have selected \"translate\n      English to Spanish\" as an\
    \ OPES service.  If he sees \"OPES service\n      language translation, action:\
    \ destination language not supported,\n      no action\", then he may inquire\
    \ of the OPES service provider about\n      what languages are supported by the\
    \ package.  If the end user\n      feels that the source language is not properly\
    \ represented by the\n      provider, resulting in inability for the service to\
    \ operate, he\n      (or the language service provider) can contact the content\n\
    \      provider.\n   o  If the content provider gets complaints from users about\
    \ the\n      translation service and feels that the problem is not in the\n  \
    \    content but in the service, he may recommend that the service not\n     \
    \ be applied to his pages.  He can do that through content headers,\n      for\
    \ example, with the notation \"No OPES service #8D3298EB\" or \"No\n      OPES\
    \ class language translation\".\n   o  End user's ISP or enterprise uses OPES\
    \ to control user access\n      based on user profiles.  The end user can see\
    \ that the OPES\n      services are being applied by his ISP, but he cannot control\
    \ them.\n      If he feels that the transformations bowdlerize the content he\
    \ can\n      complain to the provider organization.\n   o  The content provider\
    \ or end user relies on a content distribution\n      network and OPES is used\
    \ within that network.  OPES may be\n      authorized by either the content provider,\
    \ end user, or both.  The\n      content provider may suspect that his access\
    \ control rules are not\n      being applied properly, for example.  He may ask\
    \ for notification\n      on all accesses to his content through a log.  This\
    \ request and\n      the logfile are outside the OPES architecture; there are\
    \ security\n      implications for the request, the response, and the resources\
    \ used\n      by the logfile.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   The document presents usage scenarios and deployment\
    \ cases.  Issues\n   related to the overall security of OPES entities are given\
    \ in [1].\n"
- title: 6.  Informative References
  contents:
  - "6.  Informative References\n   [1]  A. Barbir et al., \"An Architecture for Open\
    \ Pluggable Edge\n        Services (OPES)\", Work in Progress, July 2002.\n  \
    \ [2]  Floyd, S. and L. Daigle, \"IAB Architectural and Policy\n        Considerations\
    \ for Open Pluggable Edge Services\", RFC 3238,\n        January 2002.\n   [3]\
    \  Westerinen, A., Schnizlein, J., Strassner, J., Scherling, M.,\n        Quinn,\
    \ B., Herzog, S., Huynh, A., Carlson, M., Perry, J. and S.\n        Waldbusser,\
    \ \"Terminology for Policy-Based Management\", RFC 3198,\n        November 2001.\n\
    \   [4]  Fielding, R., Gettys, J., Mogul, J., Nielsen, H., Masinter, L.,\n   \
    \     Leach, P. and T. Berners-Lee, \"Hypertext Transfer Protocol --\n       \
    \ HTTP/1.1\", RFC 2616, June 1999.\n   [5]  OPES Working Group, \"OPES Service\
    \ Authorization and Enforcement\n        Requirements\", Work in Progress, May\
    \ 2002.\n   [6]  Beck, A., et al., \"Requirements for OPES Callout Protocols\"\
    ,\n        Work in Progress, July 2002.\n"
- title: 7.  Acknowledgements
  contents:
  - "7.  Acknowledgements\n   The authors would like to thank the participants of\
    \ the OPES WG for\n   their comments on this document.\n"
- title: 8.  Authors' Addresses
  contents:
  - "8.  Authors' Addresses\n   Abbie Barbir\n   Nortel Networks\n   3500 Carling\
    \ Avenue\n   Nepean, Ontario  K2H 8E9\n   Canada\n   Phone: +1 613 763 5229\n\
    \   EMail: abbieb@nortelnetworks.com\n   Eric W. Burger\n   Brooktrout Technology,\
    \ Inc.\n   18 Keewaydin Dr.\n   Salem, NH  03079\n   EMail: e.burger@ieee.org\n\
    \   Yih-Farn Robin Chen\n   AT&T Labs - Research\n   180 Park Avenue\n   Florham\
    \ Park, NJ  07932\n   US\n   Phone: +1 973 360 8653\n   EMail: chen@research.att.com\n\
    \   Stephen McHenry\n   305 Vineyard Town Center, #251\n   Morgan Hill, CA  95037\n\
    \   US\n   Phone: +1 408 683 2700\n   EMail: stephen@mchenry.net\n   Hilarie Orman\n\
    \   Purple Streak Development\n   EMail: ho@alum.mit.edu\n   Reinaldo Penno\n\
    \   Nortel Networks\n   600 Technology Park Drive\n   Billerica, MA  01803\n \
    \  US\n   EMail: rpenno@nortelnetworks.com\n"
- title: 9.  Full Copyright Statement
  contents:
  - "9.  Full Copyright Statement\n   Copyright (C) The Internet Society (2004). \
    \ This document is subject\n   to the rights, licenses and restrictions contained\
    \ in BCP 78 and\n   except as set forth therein, the authors retain all their\
    \ rights.\n   This document and the information contained herein are provided\
    \ on an\n   \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n\
    \   OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
