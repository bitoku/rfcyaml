- contents:
  - '                Binding Protocols for ONC RPC Version 2

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "ABSTRACT\n   This document describes the binding protocols used in conjunction\n
    \  with the ONC Remote Procedure Call (ONC RPC Version 2) protocols.\n"
  title: ABSTRACT
- contents:
  - "TABLE OF CONTENTS\n   1. Introduction                                               1\n
    \  2. RPCBIND Program Protocol                                   2\n   2.1 RPCBIND
    Protocol Specification (in RPC Language)          3\n   2.2 RPCBIND Operation
    \                                        9\n   2.2.1 RPCBIND Version 3                                       9\n
    \  2.2.2 RPCBIND, Version 4                                     10\n   3. Port
    Mapper Program Protocol                              11\n   3.1 Port Mapper Protocol
    Specification (in RPC Language)     11\n   3.2 Port Mapper Operation                                    13\n
    \  References                                                   14\n   Security
    Considerations                                      14\n   Author's Address                                             14\n"
  title: TABLE OF CONTENTS
- contents:
  - "1. Introduction\n   This document specifies the binding protocols used in conjunction\n
    \  with ONC RPC Version 2.  As a prerequisite, the reader is expected to\n   be
    familiar with [1] and [2] which describe the ONC RPC Version 2 and\n   XDR (eXternal
    Data Representation) protocols.\n   An RPC service is identified by its RPC program
    number, version\n   number, and the transport address where it may be reached.
    \ The\n   transport address, in turn, consists of a network address and a\n   transport
    selector.  In the case of a service available over TCP/IP\n   or UDP/IP, the network
    address will be an IP address, and the\n   transport selector will be a TCP or
    UDP port number.\n   A client program needs to know the RPC program number, version\n
    \  number, and the transport address corresponding to a service in order\n   to
    utilize the service.  Of these, the RPC program number and version\n   number
    are usually built into the client program, as part of the\n   service definition.
    \ The network address component of the transport\n   address is usually available
    in a name service, or is given as a\n   parameter to the client program.  The
    transport selector (ie., the\n   TCP or UDP port) is usually determined dynamically,
    and varies with\n   each invocation of the service.  Server programs allocate
    a transport\n   address, and register it with a well-known lookup service (well-known\n
    \  because it uses a fixed transport selector, and resides at the same\n   network
    address as the server).  Client programs consult the lookup\n   service in order
    to obtain the server's transport address.\n   Such a lookup service is very desirable
    because the range of well-\n   known transport selectors is very small for some
    transports and the\n   number of services is potentially very large.  By running
    only the\n   lookup service on a well-known transport selector, the transport\n
    \  addresses of other remote programs can be ascertained by querying the\n   lookup
    service.\n   This document describes three versions of a lookup service, all of\n
    \  which use the same RPC program number (100000).  They all use port\n   111
    over TCP and UDP transports.  Versions 3 and 4 are described in\n   Section 2
    (\"RPCBIND Program Protocol\").  Version 2 is described in\n   Section 3 (\"Port
    Mapper Program Protocol\").\n   The distinguishing characteristic of RPCBIND (versions
    3 and 4) is\n   that this protocol uses a transport-independent format for the\n
    \  transport address, known as the universal address format.  An address\n   in
    universal address format is an ASCII string representation of the\n   transport
    dependent address.  String representation of addresses\n   corresponding to a
    transport are defined by the addressing authority\n   for the transport.  The
    RPCBIND protocol can be used for binding ONC\n   RPC clients and servers over
    any transport.\n   The Port Mapper (version 2), on the other hand, is an older
    protocol\n   that is specific to TCP and UDP.  It handles TCP and UDP ports\n
    \  directly.\n"
  title: 1. Introduction
- contents:
  - "2. RPCBIND Program Protocol\n   The RPCBIND program maps RPC program and version
    numbers to universal\n   addresses, thus making dynamic binding of remote programs
    possible.\n   The RPCBIND program is bound to a well-known address of each\n   supported
    transport, and other programs register their dynamically\n   allocated transport
    address with it.  The RPCBIND program then makes\n   those addresses publicly
    available.\n   The RPCBIND program also aids in broadcast RPC.  A given RPC program\n
    \  will usually have different transport address bindings on different\n   machines,
    so there is no way to directly broadcast to all of these\n   programs. The RPCBIND
    program, however, does have a well-known\n   address.  So, to broadcast to a given
    program, the client actually\n   sends its message to the RPCBIND program located
    at the broadcast\n   address. Each instance of the RPCBIND program that picks
    up the\n   broadcast then calls the local service specified by the client.  When\n
    \  the RPCBIND program gets the reply from the local service, it sends\n   the
    reply back to the client.\n"
  title: 2. RPCBIND Program Protocol
- contents:
  - '2.1 RPCBIND Protocol Specification (in RPC Language)

    '
  title: 2.1 RPCBIND Protocol Specification (in RPC Language)
- contents:
  - "/*\n * rpcb_prot.x\n * rpcbind protocol, versions 3 and 4, in RPC Language\n
    */\n"
  title: /*
- contents:
  - "/*\n * rpcbind address for TCP/UDP\n */\n"
  title: /*
- contents:
  - 'const RPCB_PORT = 111;

    '
  title: const RPCB_PORT = 111;
- contents:
  - "/*\n * A mapping of (program, version, network ID) to address\n *\n * The network
    identifier  (r_netid):\n * This is a string that represents a local identification
    for a\n * network. This is defined by a system administrator based on local\n
    * conventions, and cannot be depended on to have the same value on\n * every system.\n
    */\n"
  title: /*
- contents:
  - "struct rpcb {\n unsigned long r_prog;    /* program number */\n unsigned long
    r_vers;    /* version number */\n string r_netid<>;        /* network id */\n
    string r_addr<>;         /* universal address */\n string r_owner<>;        /*
    owner of this service */\n"
  title: struct rpcb {
- contents:
  - '};

    '
  title: '};'
- contents:
  - "struct rp__list {\n rpcb rpcb_map;\n struct rp__list *rpcb_next;\n"
  title: struct rp__list {
- contents:
  - '};

    '
  title: '};'
- contents:
  - 'typedef rp__list *rpcblist_ptr;        /* results of RPCBPROC_DUMP */

    '
  title: typedef rp__list *rpcblist_ptr;        /* results of RPCBPROC_DUMP */
- contents:
  - "/*\n * Arguments of remote calls\n */\n"
  title: /*
- contents:
  - "struct rpcb_rmtcallargs {\n unsigned long prog;        /* program number */\n
    unsigned long vers;        /* version number */\n unsigned long proc;        /*
    procedure number */\n opaque args<>;             /* argument */\n"
  title: struct rpcb_rmtcallargs {
- contents:
  - '};

    '
  title: '};'
- contents:
  - "/*\n * Results of the remote call\n */\n"
  title: /*
- contents:
  - "struct rpcb_rmtcallres {\n string addr<>;            /* remote universal address
    */\n opaque results<>;         /* result */\n"
  title: struct rpcb_rmtcallres {
- contents:
  - '};

    '
  title: '};'
- contents:
  - "/*\n * rpcb_entry contains a merged address of a service on a particular\n *
    transport, plus associated netconfig information.  A list of\n * rpcb_entry items
    is returned by RPCBPROC_GETADDRLIST.  The meanings\n * and values used for the
    r_nc_* fields are given below.\n *\n * The network identifier  (r_nc_netid):\n
    *   This is a string that represents a local identification for a\n *   network.
    \ This is defined by a system administrator based on\n *   local conventions,
    and cannot be depended on to have the same\n *   value on every system.\n *\n
    * Transport semantics (r_nc_semantics):\n *  This represents the type of transport,
    and has the following values:\n *     NC_TPI_CLTS     (1)      Connectionless\n
    *     NC_TPI_COTS     (2)      Connection oriented\n *     NC_TPI_COTS_ORD (3)
    \     Connection oriented with graceful close\n *     NC_TPI_RAW      (4)      Raw
    transport\n *\n * Protocol family (r_nc_protofmly):\n *   This identifies the
    family to which the protocol belongs.  The\n *   following values are defined:\n
    *     NC_NOPROTOFMLY   \"-\"\n *     NC_LOOPBACK      \"loopback\"\n *     NC_INET
    \         \"inet\"\n *     NC_IMPLINK       \"implink\"\n *     NC_PUP           \"pup\"\n
    *     NC_CHAOS         \"chaos\"\n *     NC_NS            \"ns\"\n *     NC_NBS
    \          \"nbs\"\n *     NC_ECMA          \"ecma\"\n *     NC_DATAKIT       \"datakit\"\n
    *     NC_CCITT         \"ccitt\"\n *     NC_SNA           \"sna\"\n *     NC_DECNET
    \       \"decnet\"\n *     NC_DLI           \"dli\"\n *     NC_LAT           \"lat\"\n
    *     NC_HYLINK        \"hylink\"\n *     NC_APPLETALK     \"appletalk\"\n *     NC_NIT
    \          \"nit\"\n *     NC_IEEE802       \"ieee802\"\n *     NC_OSI           \"osi\"\n
    *     NC_X25           \"x25\"\n *     NC_OSINET        \"osinet\"\n *     NC_GOSIP
    \        \"gosip\"\n *\n * Protocol name (r_nc_proto):\n *   This identifies a
    protocol within a family.  The following are\n *   currently defined:\n *      NC_NOPROTO
    \     \"-\"\n *      NC_TCP          \"tcp\"\n *      NC_UDP          \"udp\"\n
    *      NC_ICMP         \"icmp\"\n */\n"
  title: /*
- contents:
  - "struct rpcb_entry {\n string          r_maddr<>;            /* merged address
    of service */\n string          r_nc_netid<>;         /* netid field */\n unsigned
    long   r_nc_semantics;       /* semantics of transport */\n string          r_nc_protofmly<>;
    \    /* protocol family */\n string          r_nc_proto<>;         /* protocol
    name */\n"
  title: struct rpcb_entry {
- contents:
  - '};

    '
  title: '};'
- contents:
  - "/*\n * A list of addresses supported by a service.\n */\n"
  title: /*
- contents:
  - "struct rpcb_entry_list {\n rpcb_entry rpcb_entry_map;\n struct rpcb_entry_list
    *rpcb_entry_next;\n"
  title: struct rpcb_entry_list {
- contents:
  - '};

    '
  title: '};'
- contents:
  - 'typedef rpcb_entry_list *rpcb_entry_list_ptr;

    '
  title: typedef rpcb_entry_list *rpcb_entry_list_ptr;
- contents:
  - "/*\n * rpcbind statistics\n */\n"
  title: /*
- contents:
  - 'const rpcb_highproc_2 = RPCBPROC_CALLIT;

    '
  title: const rpcb_highproc_2 = RPCBPROC_CALLIT;
- contents:
  - 'const rpcb_highproc_3 = RPCBPROC_TADDR2UADDR;

    '
  title: const rpcb_highproc_3 = RPCBPROC_TADDR2UADDR;
- contents:
  - 'const rpcb_highproc_4 = RPCBPROC_GETSTAT;

    '
  title: const rpcb_highproc_4 = RPCBPROC_GETSTAT;
- contents:
  - 'const RPCBSTAT_HIGHPROC = 13; /* # of procs in rpcbind V4 plus one */

    '
  title: 'const RPCBSTAT_HIGHPROC = 13; /* # of procs in rpcbind V4 plus one */'
- contents:
  - 'const RPCBVERS_STAT     = 3; /* provide only for rpcbind V2, V3 and V4 */

    '
  title: const RPCBVERS_STAT     = 3; /* provide only for rpcbind V2, V3 and V4 */
- contents:
  - 'const RPCBVERS_4_STAT   = 2;

    '
  title: const RPCBVERS_4_STAT   = 2;
- contents:
  - 'const RPCBVERS_3_STAT   = 1;

    '
  title: const RPCBVERS_3_STAT   = 1;
- contents:
  - 'const RPCBVERS_2_STAT   = 0;

    '
  title: const RPCBVERS_2_STAT   = 0;
- contents:
  - '/* Link list of all the stats about getport and getaddr */

    '
  title: /* Link list of all the stats about getport and getaddr */
- contents:
  - "struct rpcbs_addrlist {\n unsigned long prog;\n unsigned long vers;\n int success;\n
    int failure;\n string netid<>;\n struct rpcbs_addrlist *next;\n"
  title: struct rpcbs_addrlist {
- contents:
  - '};

    '
  title: '};'
- contents:
  - '/* Link list of all the stats about rmtcall */

    '
  title: /* Link list of all the stats about rmtcall */
- contents:
  - "struct rpcbs_rmtcalllist {\n unsigned long prog;\n unsigned long vers;\n unsigned
    long proc;\n int success;\n int failure;\n int indirect;    /* whether callit
    or indirect */\n string netid<>;\n struct rpcbs_rmtcalllist *next;\n"
  title: struct rpcbs_rmtcalllist {
- contents:
  - '};

    '
  title: '};'
- contents:
  - 'typedef int rpcbs_proc[RPCBSTAT_HIGHPROC];

    '
  title: typedef int rpcbs_proc[RPCBSTAT_HIGHPROC];
- contents:
  - 'typedef rpcbs_addrlist *rpcbs_addrlist_ptr;

    '
  title: typedef rpcbs_addrlist *rpcbs_addrlist_ptr;
- contents:
  - 'typedef rpcbs_rmtcalllist *rpcbs_rmtcalllist_ptr;

    '
  title: typedef rpcbs_rmtcalllist *rpcbs_rmtcalllist_ptr;
- contents:
  - "struct rpcb_stat {\n rpcbs_proc              info;\n int                     setinfo;\n
    int                     unsetinfo;\n rpcbs_addrlist_ptr      addrinfo;\n rpcbs_rmtcalllist_ptr
    \  rmtinfo;\n"
  title: struct rpcb_stat {
- contents:
  - '};

    '
  title: '};'
- contents:
  - "/*\n * One rpcb_stat structure is returned for each version of rpcbind\n * being
    monitored.\n */\n"
  title: /*
- contents:
  - 'typedef rpcb_stat rpcb_stat_byvers[RPCBVERS_STAT];

    '
  title: typedef rpcb_stat rpcb_stat_byvers[RPCBVERS_STAT];
- contents:
  - "/*\n * netbuf structure, used to store the transport specific form of\n * a universal
    transport address.\n */\n"
  title: /*
- contents:
  - "struct netbuf {\n unsigned int maxlen;\n opaque buf<>;\n"
  title: struct netbuf {
- contents:
  - '};

    '
  title: '};'
- contents:
  - "/*\n * rpcbind procedures\n */\n"
  title: /*
- contents:
  - "program RPCBPROG {\n version RPCBVERS {\n     bool\n     RPCBPROC_SET(rpcb) =
    1;\n     bool\n     RPCBPROC_UNSET(rpcb) = 2;\n     string\n     RPCBPROC_GETADDR(rpcb)
    = 3;\n     rpcblist_ptr\n     RPCBPROC_DUMP(void) = 4;\n     rpcb_rmtcallres\n
    \    RPCBPROC_CALLIT(rpcb_rmtcallargs) = 5;\n     unsigned int\n     RPCBPROC_GETTIME(void)
    = 6;\n     netbuf\n     RPCBPROC_UADDR2TADDR(string) = 7;\n     string\n     RPCBPROC_TADDR2UADDR(netbuf)
    = 8;\n } = 3;\n version RPCBVERS4 {\n     bool\n     RPCBPROC_SET(rpcb) = 1;\n
    \    bool\n     RPCBPROC_UNSET(rpcb) = 2;\n     string\n     RPCBPROC_GETADDR(rpcb)
    = 3;\n     rpcblist_ptr\n     RPCBPROC_DUMP(void) = 4;\n     /*\n      * NOTE:
    RPCBPROC_BCAST has the same functionality as CALLIT;\n      * the new name is
    intended to indicate that this\n      * procedure should be used for broadcast
    RPC, and\n      * RPCBPROC_INDIRECT should be used for indirect calls.\n      */\n
    \    rpcb_rmtcallres\n     RPCBPROC_BCAST(rpcb_rmtcallargs) = RPCBPROC_CALLIT;\n
    \    unsigned int\n     RPCBPROC_GETTIME(void) = 6;\n     netbuf\n     RPCBPROC_UADDR2TADDR(string)
    = 7;\n     string\n     RPCBPROC_TADDR2UADDR(netbuf) = 8;\n     string\n     RPCBPROC_GETVERSADDR(rpcb)
    = 9;\n     rpcb_rmtcallres\n     RPCBPROC_INDIRECT(rpcb_rmtcallargs) = 10;\n     rpcb_entry_list_ptr\n
    \    RPCBPROC_GETADDRLIST(rpcb) = 11;\n     rpcb_stat_byvers\n     RPCBPROC_GETSTAT(void)
    = 12;\n } = 4;\n"
  title: program RPCBPROG {
- contents:
  - '} = 100000;

    '
  title: '} = 100000;'
- contents:
  - "2.2 RPCBIND Operation\n   RPCBIND is contacted by way of an assigned address
    specific to the\n   transport being used.  For TCP/IP and UDP/IP, for example,
    it is port\n   number 111.  Each transport has such an assigned, well-known address.\n
    \  The following is a description of each of the procedures supported by\n   RPCBIND.\n"
  title: 2.2 RPCBIND Operation
- contents:
  - "2.2.1 RPCBIND Version 3\n   RPCBPROC_SET:\n   When a program first becomes available
    on a machine, it registers\n   itself with RPCBIND running on the same machine.
    \ The program passes\n   its program number \"r_prog\", version number \"r_vers\",
    network\n   identifier \"r_netid\", universal address \"r_addr\", and the owner
    of\n   the service \"r_owner\".  The procedure returns a boolean response\n   whose
    value is TRUE if the procedure successfully established the\n   mapping and FALSE
    otherwise.  The procedure refuses to establish a\n   mapping if one already exists
    for the ordered set (\"r_prog\",\n   \"r_vers\", \"r_netid\").  Note that neither
    \"r_netid\" nor \"r_addr\" can\n   be NULL, and that \"r_netid\" should be a valid
    network identifier on\n   the machine making the call.\n   RPCBPROC_UNSET:\n   When
    a program becomes unavailable, it should unregister itself with\n   the RPCBIND
    program on the same machine.  The parameters and results\n   have meanings identical
    to those of RPCBPROC_SET.  The mapping of the\n   (\"r_prog\", \"r_vers\", \"r_netid\")
    tuple with \"r_addr\" is deleted.  If\n   \"r_netid\" is NULL, all mappings specified
    by the ordered set\n   (\"r_prog\", \"r_vers\", *) and the corresponding universal
    addresses are\n   deleted.  Only the owner of the service or the super-user is
    allowed\n   to unset a service.\n   RPCBPROC_GETADDR:\n   Given a program number
    \"r_prog\", version number \"r_vers\", and network\n   identifier  \"r_netid\",
    this procedure returns the universal address\n   on which the program is awaiting
    call requests.  The \"r_netid\" field\n   of the argument is ignored and the \"r_netid\"
    is inferred from the\n   network identifier of the transport on which the request
    came in.\n   RPCBPROC_DUMP:\n   This procedure lists all entries in RPCBIND's
    database.  The\n   procedure takes no parameters and returns a list of program,
    version,\n   network identifier, and universal addresses.\n   RPCBPROC_CALLIT:\n
    \  This procedure allows a caller to call another remote procedure on\n   the
    same machine without knowing the remote procedure's universal\n   address.  It
    is intended for supporting broadcasts to arbitrary\n   remote programs via RPCBIND's
    universal address.  The parameters\n   \"prog\", \"vers\", \"proc\", and args
    are the program number, version\n   number, procedure number, and parameters of
    the remote procedure.\n   Note - This procedure only sends a response if the procedure
    was\n   successfully executed and is silent (no response) otherwise.\n   The procedure
    returns the remote program's universal address, and the\n   results of the remote
    procedure.\n   RPCBPROC_GETTIME:\n   This procedure returns the local time on
    its own machine in seconds\n   since the midnight of the First day of January,
    1970.\n   RPCBPROC_UADDR2TADDR:\n   This procedure converts universal addresses
    to transport specific\n   addresses.\n   RPCBPROC_TADDR2UADDR:\n   This procedure
    converts transport specific addresses to universal\n   addresses.\n"
  title: 2.2.1 RPCBIND Version 3
- contents:
  - "2.2.2 RPCBIND, Version 4\n   Version 4 of the RPCBIND protocol includes all of
    the above\n   procedures, and adds several additional ones.\n   RPCBPROC_BCAST:\n
    \  This procedure is identical to the version 3 RPCBPROC_CALLIT\n   procedure.
    \ The new name indicates that the procedure should be used\n   for broadcast RPCs
    only.  RPCBPROC_INDIRECT, defined below, should be\n   used for indirect RPC calls.\n
    \  RPCBPROC_GETVERSADDR:\n   This procedure is similar to RPCBPROC_GETADDR.  The
    difference is the\n   \"r_vers\" field of the rpcb structure can be used to specify
    the\n   version of interest.  If that version is not registered, no address\n
    \  is returned.\n   RPCBPROC_INDIRECT:\n   Similar to RPCBPROC_CALLIT.  Instead
    of being silent about errors\n   (such as the program not being registered on
    the system), this\n   procedure returns an indication of the error.  This procedure
    should\n   not be used for broadcast RPC. It is intended to be used with\n   indirect
    RPC calls only.\n   RPCBPROC_GETADDRLIST:\n   This procedure returns a list of
    addresses for the given rpcb entry.\n   The client may be able use the results
    to determine alternate\n   transports that it can use to communicate with the
    server.\n   RPCBPROC_GETSTAT:\n   This procedure returns statistics on the activity
    of the RPCBIND\n   server.  The information lists the number and kind of requests
    the\n   server has received.\n   Note - All procedures except RPCBPROC_SET and
    RPCBPROC_UNSET can be\n   called by clients running on a machine other than a
    machine on which\n   RPCBIND is running.  RPCBIND only accepts RPCBPROC_SET and\n
    \  RPCBPROC_UNSET requests by clients running on the same machine as the\n   RPCBIND
    program.\n"
  title: 2.2.2 RPCBIND, Version 4
- contents:
  - "3. Port Mapper Program Protocol\n   The port mapper program maps RPC program
    and version numbers to\n   transport- specific port numbers.  This program makes
    dynamic binding\n   of remote programs possible.  The port mapper protocol differs
    from\n   the newer RPCBIND protocols in that it is transport specific in its\n
    \  address handling.\n"
  title: 3. Port Mapper Program Protocol
- contents:
  - "3.1 Port Mapper Protocol Specification (in RPC Language)\n      const PMAP_PORT
    = 111;      /* portmapper port number */\n   A mapping of (program, version, protocol)
    to port number:\n      struct mapping {\n         unsigned int prog;\n         unsigned
    int vers;\n         unsigned int prot;\n         unsigned int port;\n      };\n
    \  Supported values for the \"prot\" field:\n      const IPPROTO_TCP = 6;      /*
    protocol number for TCP/IP */\n      const IPPROTO_UDP = 17;     /* protocol number
    for UDP/IP */\n   A list of mappings:\n      struct *pmaplist {\n         mapping
    map;\n         pmaplist next;\n      };\n   Arguments to callit:\n      struct
    call_args {\n         unsigned int prog;\n         unsigned int vers;\n         unsigned
    int proc;\n         opaque args<>;\n      };\n   Results of callit:\n      struct
    call_result {\n         unsigned int port;\n         opaque res<>;\n      };\n
    \  Port mapper procedures:\n      program PMAP_PROG {\n         version PMAP_VERS
    {\n            void\n            PMAPPROC_NULL(void)         = 0;\n            bool\n
    \           PMAPPROC_SET(mapping)       = 1;\n            bool\n            PMAPPROC_UNSET(mapping)
    \    = 2;\n            unsigned int\n            PMAPPROC_GETPORT(mapping)   =
    3;\n            pmaplist\n            PMAPPROC_DUMP(void)         = 4;\n            call_result\n
    \           PMAPPROC_CALLIT(call_args)  = 5;\n         } = 2;\n      } = 100000;\n"
  title: 3.1 Port Mapper Protocol Specification (in RPC Language)
- contents:
  - "3.2 Port Mapper Operation\n   The portmapper program currently supports two protocols
    (UDP and\n   TCP).  The portmapper is contacted by talking to it on assigned port\n
    \  number 111 (SUNRPC) on either of these protocols.\n   The following is a description
    of each of the portmapper procedures:\n   PMAPPROC_NULL:\n   This procedure does
    no work.  By convention, procedure zero of any\n   protocol takes no parameters
    and returns no results.\n   PMAPPROC_SET:\n   When a program first becomes available
    on a machine, it registers\n   itself with the port mapper program on the same
    machine.  The program\n   passes its program number \"prog\", version number \"vers\",
    transport\n   protocol number \"prot\", and the port \"port\" on which it awaits\n
    \  service request.  The procedure returns a boolean reply whose value\n   is
    \"TRUE\" if the procedure successfully established the mapping and\n   \"FALSE\"
    otherwise.  The procedure refuses to establish a mapping if\n   one already exists
    for the tuple \"(prog, vers, prot)\".\n   PMAPPROC_UNSET:\n   When a program becomes
    unavailable, it should unregister itself with\n   the port mapper program on the
    same machine.  The parameters and\n   results have meanings identical to those
    of \"PMAPPROC_SET\".  The\n   protocol and port number fields of the argument
    are ignored.\n   PMAPPROC_GETPORT:\n   Given a program number \"prog\", version
    number \"vers\", and transport\n   protocol number \"prot\", this procedure returns
    the port number on\n   which the program is awaiting call requests.  A port value
    of zeros\n   means the program has not been registered.  The \"port\" field of
    the\n   argument is ignored.\n   PMAPPROC_DUMP:\n   This procedure enumerates
    all entries in the port mapper's database.\n   The procedure takes no parameters
    and returns a list of program,\n   version, protocol, and port values.\n   PMAPPROC_CALLIT:\n
    \  This procedure allows a client to call another remote procedure on\n   the
    same machine without knowing the remote procedure's port number.\n   It is intended
    for supporting broadcasts to arbitrary remote programs\n   via the well-known
    port mapper's port.  The parameters \"prog\",\n   \"vers\", \"proc\", and the
    bytes of \"args\" are the program number,\n   version number, procedure number,
    and parameters of the remote\n   procedure.  Note:\n      (1) This procedure only
    sends a reply if the procedure was\n      successfully executed and is silent
    (no reply) otherwise.\n      (2) The port mapper communicates with the remote
    program using UDP\n      only.\n   The procedure returns the remote program's
    port number, and the reply\n   is the reply of the remote procedure.\n"
  title: 3.2 Port Mapper Operation
- contents:
  - "References\n   [1]  Srinivasan, R., \"Remote Procedure Call Protocol Version
    2\",\n        RFC 1831, Sun Microsystems, Inc., August 1995.\n   [2]  Srinivasan,
    R., \"XDR: External Data Representation Standard\",\n        RFC 1832, Sun Microsystems,
    Inc., August 1995.\n"
  title: References
- contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
  title: Security Considerations
- contents:
  - "Author's Address\n   Raj Srinivasan\n   Sun Microsystems, Inc.\n   ONC Technologies\n
    \  2550 Garcia Avenue\n   M/S MTV-5-40\n   Mountain View, CA  94043\n   USA\n
    \  Phone: 415-336-2478\n   Fax:   415-336-6015\n   EMail: raj@eng.sun.com\n"
  title: Author's Address
