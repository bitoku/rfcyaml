- title: __initial_text__
  contents:
  - '                           SNMP Applications

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999). All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes five types of SNMP applications which make use\
    \ of\n   an SNMP engine as described in [RFC2571].  The types of application\n\
    \   described are Command Generators, Command Responders, Notification\n   Originators,\
    \ Notification Receivers, and Proxy Forwarders.\n   This memo also defines MIB\
    \ modules for specifying targets of\n   management operations, for notification\
    \ filtering, and for proxy\n   forwarding.\n"
- title: Table Of Contents
  contents:
  - "Table Of Contents\n   1 Overview .....................................................\
    \    2\n   1.1 Command Generator Applications .............................  \
    \  3\n   1.2 Command Responder Applications .............................    3\n\
    \   1.3 Notification Originator Applications .......................    3\n  \
    \ 1.4 Notification Receiver Applications .........................    3\n   1.5\
    \ Proxy Forwarder Applications ...............................    4\n   2 Management\
    \ Targets ...........................................    5\n   3 Elements Of Procedure\
    \ ........................................    6\n   3.1 Command Generator Applications\
    \ .............................    6\n   3.2 Command Responder Applications .............................\
    \    9\n   3.3 Notification Originator Applications .......................  \
    \ 14\n   3.4 Notification Receiver Applications .........................   17\n\
    \   3.5 Proxy Forwarder Applications ...............................   19\n  \
    \ 3.5.1 Request Forwarding .......................................   20\n   3.5.1.1\
    \ Processing an Incoming Request .........................   20\n   3.5.1.2 Processing\
    \ an Incoming Response ........................   23\n   3.5.1.3 Processing an\
    \ Incoming Internal-Class PDU ..............   24\n   3.5.2 Notification Forwarding\
    \ ..................................   25\n   4 The Structure of the MIB Modules\
    \ .............................   28\n   4.1 The Management Target MIB Module\
    \ ...........................   28\n   4.1.1 Tag Lists ................................................\
    \   29\n   4.1.2 Definitions ..............................................  \
    \ 30\n   4.2 The Notification MIB Module ................................   43\n\
    \   4.2.1 Definitions ..............................................   43\n  \
    \ 4.3 The Proxy MIB Module .......................................   55\n   4.3.1\
    \ Definitions ..............................................   55\n   5 Identification\
    \ of Management Targets in Notification\n        Originators ...............................................\
    \   61\n   6 Notification Filtering .......................................  \
    \ 62\n   7 Management Target Translation in Proxy  Forwarder  Applica-\n     \
    \   tions .....................................................   63\n   7.1 Management\
    \ Target Translation for Request Forwarding .......   63\n   7.2 Management Target\
    \ Translation for Notification Forwarding\n        ...........................................................\
    \   64\n   8 Intellectual Property ........................................  \
    \ 65\n   9 Acknowledgments ..............................................   66\n\
    \   10 Security Considerations .....................................   67\n  \
    \ 11 References ..................................................   67\n   12\
    \ Editors' Addresses...........................................   69\n   A. Trap\
    \ Configuration Example ..................................   70\n   B. Full Copyright\
    \ Statement ....................................   72\n"
- title: 1.  Overview
  contents:
  - "1.  Overview\n   This document describes five types of SNMP applications:\n \
    \    - Applications which initiate SNMP Read-Class, and/or Write-Class\n     \
    \  requests, called 'command generators.'\n     - Applications which respond to\
    \ SNMP Read-Class, and/or Write-Class\n       requests, called 'command responders.'\n\
    \     - Applications which generate SNMP Notification-Class PDUs, called\n   \
    \    'notification originators.'\n     - Applications which receive SNMP Notification-Class\
    \ PDUs, called\n       'notification receivers.'\n     - Applications which forward\
    \ SNMP messages, called 'proxy\n       forwarders.'\n   Note that there are no\
    \ restrictions on which types of applications\n   may be associated with a particular\
    \ SNMP engine.  For example, a\n   single SNMP engine may, in fact, be associated\
    \ with both command\n   generator and command responder applications.\n   The\
    \ key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n\
    \   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",  \"MAY\", and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 1.1.  Command Generator Applications
  contents:
  - "1.1.  Command Generator Applications\n   A command generator application initiates\
    \ SNMP Read-Class and/or\n   Write-Class requests, as well as processing the response\
    \ to a request\n   which it generated.\n"
- title: 1.2.  Command Responder Applications
  contents:
  - "1.2.  Command Responder Applications\n   A command responder application receives\
    \ SNMP Read-Class and/or\n   Write-Class requests destined for the local system\
    \ as indicated by\n   the fact that the contextEngineID in the received request\
    \ is equal to\n   that of the local engine through which the request was received.\
    \  The\n   command responder application will perform the appropriate protocol\n\
    \   operation, using access control, and will generate a response message\n  \
    \ to be sent to the request's originator.\n"
- title: 1.3.  Notification Originator Applications
  contents:
  - "1.3.  Notification Originator Applications\n   A notification originator application\
    \ conceptually monitors a system\n   for particular events or conditions, and\
    \ generates Notification-Class\n   messages based on these events or conditions.\
    \  A notification\n   originator must have a mechanism for determining where to\
    \ send\n   messages, and what SNMP version and security parameters to use when\n\
    \   sending messages.  A mechanism and MIB module for this purpose is\n   provided\
    \ in this document.  Note that Notification-Class PDUs\n   generated by a notification\
    \ originator may be either Confirmed-Class\n   or Unconfirmed-Class PDU types.\n"
- title: 1.4.  Notification Receiver Applications
  contents:
  - "1.4.  Notification Receiver Applications\n   A notification receiver application\
    \ listens for notification\n   messages, and generates response messages when\
    \ a message containing a\n   Confirmed-Class PDU is received.\n"
- title: 1.5.  Proxy Forwarder Applications
  contents:
  - "1.5.  Proxy Forwarder Applications\n   A proxy forwarder application forwards\
    \ SNMP messages.  Note that\n   implementation of a proxy forwarder application\
    \ is optional.  The\n   sections describing proxy (4.5, 5.3, and 8) may be skipped\
    \ for\n   implementations that do not include a proxy forwarder application.\n\
    \   The term \"proxy\" has historically been used very loosely, with\n   multiple\
    \ different meanings.  These different meanings include (among\n   others):\n\
    \   (1)  the forwarding of SNMP requests to other SNMP entities without\n    \
    \    regard for what managed object types are being accessed; for\n        example,\
    \ in order to forward an SNMP request from one transport\n        domain to another,\
    \ or to translate SNMP requests of one version\n        into SNMP requests of\
    \ another version;\n   (2)  the translation of SNMP requests into operations of\
    \ some non-\n        SNMP management protocol; and\n   (3)  support for aggregated\
    \ managed objects where the value of one\n        managed object instance depends\
    \ upon the values of multiple\n        other (remote) items of management information.\n\
    \   Each of these scenarios can be advantageous; for example, support for\n  \
    \ aggregation of management information can significantly reduce the\n   bandwidth\
    \ requirements of large-scale management activities.\n   However, using a single\
    \ term to cover multiple different scenarios\n   causes confusion.\n   To avoid\
    \ such confusion, this document uses the term \"proxy\" with a\n   much more tightly\
    \ defined meaning.  The term \"proxy\" is used in this\n   document to refer to\
    \ a proxy forwarder application which forwards\n   either SNMP messages without\
    \ regard for what managed objects are\n   contained within those messages.  This\
    \ definition is most closely\n   related to the first definition above.  Note,\
    \ however, that in the\n   SNMP architecture [RFC2571], a proxy forwarder is actually\
    \ an\n   application, and need not be associated with what is traditionally\n\
    \   thought of as an SNMP agent.\n   Specifically, the distinction between a traditional\
    \ SNMP agent and a\n   proxy forwarder application is simple:\n     -  a proxy\
    \ forwarder application forwards SNMP messages to other\n        SNMP engines\
    \ according to the context, and irrespective of the\n        specific managed\
    \ object types being accessed, and forwards the\n        response to such previously\
    \ forwarded messages back to the SNMP\n        engine from which the original\
    \ message was received;\n     -  in contrast, the command responder application\
    \ that is part of\n        what is traditionally thought of as an SNMP agent,\
    \ and which\n        processes SNMP requests according to the (names of the)\n\
    \        individual managed object types and instances being accessed, is\n  \
    \      NOT a proxy forwarder application from the perspective of this\n      \
    \  document.\n   Thus, when a proxy forwarder application forwards a request or\n\
    \   notification for a particular contextEngineID / contextName pair, not\n  \
    \ only is the information on how to forward the request specifically\n   associated\
    \ with that context, but the proxy forwarder application has\n   no need of a\
    \ detailed definition of a MIB view (since the proxy\n   forwarder application\
    \ forwards the request irrespective of the\n   managed object types).\n   In contrast,\
    \ a command responder application must have the detailed\n   definition of the\
    \ MIB view, and even if it needs to issue requests to\n   other entities, via\
    \ SNMP or otherwise, that need is dependent on the\n   individual managed object\
    \ instances being accessed (i.e., not only on\n   the context).\n   Note that\
    \ it is a design goal of a proxy forwarder application to act\n   as an intermediary\
    \ between the endpoints of a transaction.  In\n   particular, when forwarding\
    \ Confirmed Notification-Class messages,\n   the associated response is forwarded\
    \ when it is received from the\n   target to which the Notification-Class message\
    \ was forwarded, rather\n   than generating a response immediately when the Notification-Class\n\
    \   message is received.\n"
- title: 2.  Management Targets
  contents:
  - "2.  Management Targets\n   Some types of applications (notification generators\
    \ and proxy\n   forwarders in particular) require a mechanism for determining\
    \ where\n   and how to send generated messages.  This document provides a\n  \
    \ mechanism and MIB module for this purpose.  The set of information\n   that\
    \ describes where and how to send a message is called a '\n   Management Target',\
    \ and consists of two kinds of information:\n     -  Destination information,\
    \ consisting of a transport domain and a\n        transport address.  This is\
    \ also termed a transport endpoint.\n     -  SNMP parameters, consisting of message\
    \ processing model,\n        security model, security level, and security name\
    \ information.\n   The SNMP-TARGET-MIB module described later in this document\
    \ contains\n   one table for each of these types of information.  There can be\
    \ a\n   many-to-many relationship in the MIB between these two types of\n   information.\
    \  That is, there may be multiple transport endpoints\n   associated with a particular\
    \ set of SNMP parameters, or a particular\n   transport endpoint may be associated\
    \ with several sets of SNMP\n   parameters.\n"
- title: 3.  Elements Of Procedure
  contents:
  - "3.  Elements Of Procedure\n   The following sections describe the procedures\
    \ followed by each type\n   of application when generating messages for transmission\
    \ or when\n   processing received messages.  Applications communicate with the\n\
    \   Dispatcher using the abstract service interfaces defined in\n   [RFC2571].\n"
- title: 3.1.  Command Generator Applications
  contents:
  - "3.1.  Command Generator Applications\n   A command generator initiates an SNMP\
    \ request by calling the\n   Dispatcher using the following abstract service interface:\n\
    \       statusInformation =              -- sendPduHandle if success\n       \
    \                                 -- errorIndication if failure\n         sendPdu(\n\
    \         IN   transportDomain           -- transport domain to be used\n    \
    \     IN   transportAddress          -- destination network address\n        \
    \ IN   messageProcessingModel    -- typically, SNMP version\n         IN   securityModel\
    \             -- Security Model to use\n         IN   securityName           \
    \   -- on behalf of this principal\n         IN   securityLevel             --\
    \ Level of Security requested\n         IN   contextEngineID           -- data\
    \ from/at this entity\n         IN   contextName               -- data from/in\
    \ this context\n         IN   pduVersion                -- the version of the\
    \ PDU\n         IN   PDU                       -- SNMP Protocol Data Unit\n  \
    \       IN   expectResponse            -- TRUE or FALSE\n              )\n   Where:\n\
    \     -  The transportDomain is that of the destination of the message.\n    \
    \ -  The transportAddress is that of the destination of the message.\n     - \
    \ The messageProcessingModel indicates which Message Processing\n        Model\
    \ the application wishes to use.\n     -  The securityModel is the security model\
    \ that the application\n        wishes to use.\n     -  The securityName is the\
    \ security model independent name for the\n        principal on whose behalf the\
    \ application wishes the message is\n        to be generated.\n     -  The securityLevel\
    \ is the security level that the application\n        wishes to use.\n     - \
    \ The contextEngineID is provided by the command generator if it\n        wishes\
    \ to explicitly specify the location of the management\n        information it\
    \ is requesting.\n     -  The contextName is provided by the command generator\
    \ if it\n        wishes to explicitly specify the local context name for the\n\
    \        management information it is requesting.\n     -  The pduVersion indicates\
    \ the version of the PDU to be sent.\n     -  The PDU is a value constructed by\
    \ the command generator\n        containing the management operation that the\
    \ command generator\n        wishes to perform.\n     -  The expectResponse argument\
    \ indicates that a response is\n        expected.\n   The result of the sendPdu\
    \ interface indicates whether the PDU was\n   successfully sent.  If it was successfully\
    \ sent, the returned value\n   will be a sendPduHandle.  The command generator\
    \ should store the\n   sendPduHandle so that it can correlate a response to the\
    \ original\n   request.\n   The Dispatcher is responsible for delivering the response\
    \ to a\n   particular request to the correct command generator application.  The\n\
    \   abstract service interface used is:\n       processResponsePdu(          \
    \    -- process Response PDU\n         IN   messageProcessingModel    -- typically,\
    \ SNMP version\n         IN   securityModel             -- Security Model in use\n\
    \         IN   securityName              -- on behalf of this principal\n    \
    \     IN   securityLevel             -- Level of Security\n         IN   contextEngineID\
    \           -- data from/at this SNMP entity\n         IN   contextName      \
    \         -- data from/in this context\n         IN   pduVersion             \
    \   -- the version of the PDU\n         IN   PDU                       -- SNMP\
    \ Protocol Data Unit\n         IN   statusInformation         -- success or errorIndication\n\
    \         IN   sendPduHandle             -- handle from sendPdu\n            \
    \  )\n   Where:\n     -  The messageProcessingModel is the value from the received\n\
    \        response.\n     -  The securityModel is the value from the received response.\n\
    \     -  The securityName is the value from the received response.\n     -  The\
    \ securityLevel is the value from the received response.\n     -  The contextEngineID\
    \ is the value from the received response.\n     -  The contextName is the value\
    \ from the received response.\n     -  The pduVersion indicates the version of\
    \ the PDU in the received\n        response.\n     -  The PDU is the value from\
    \ the received response.\n     -  The statusInformation indicates success or failure\
    \ in receiving\n        the response.\n     -  The sendPduHandle is the value\
    \ returned by the sendPdu call\n        which generated the original request to\
    \ which this is a\n        response.\n   The procedure when a command generator\
    \ receives a message is as\n   follows:\n   (1)  If the received values of messageProcessingModel,\
    \ securityModel,\n        securityName, contextEngineID, contextName, and pduVersion\
    \ are\n        not all equal to the values used in the original request, the\n\
    \        response is discarded.\n   (2)  The operation type, request-id, error-status,\
    \ error-index, and\n        variable-bindings are extracted from the PDU and saved.\
    \  If the\n        request-id is not equal to the value used in the original\n\
    \        request, the response is discarded.\n   (3)  At this point, it is up\
    \ to the application to take an\n        appropriate action.  The specific action\
    \ is implementation\n        dependent.  If the statusInformation indicates that\
    \ the request\n        failed, an appropriate action might be to attempt to transmit\n\
    \        the request again, or to notify the person operating the\n        application\
    \ that a failure occurred.\n"
- title: 3.2.  Command Responder Applications
  contents:
  - "3.2.  Command Responder Applications\n   Before a command responder application\
    \ can process messages, it must\n   first associate itself with an SNMP engine.\
    \  The abstract service\n   interface used for this purpose is:\n       statusInformation\
    \ =        -- success or errorIndication\n         registerContextEngineID(\n\
    \         IN   contextEngineID     -- take responsibility for this one\n     \
    \    IN   pduType             -- the pduType(s) to be registered\n           \
    \   )\n   Where:\n     -  The statusInformation indicates success or failure of\
    \ the\n        registration attempt.\n     -  The contextEngineID is equal to\
    \ the snmpEngineID of the SNMP\n        engine with which the command responder\
    \ is registering.\n     -  The pduType indicates a Read-Class and/or Write-Class\
    \ PDU.\n   Note that if another command responder application is already\n   registered\
    \ with an SNMP engine, any further attempts to register with\n   the same contextEngineID\
    \ and pduType will be denied.  This implies\n   that separate command responder\
    \ applications could register\n   separately for the various pdu types.  However,\
    \ in practice this is\n   undesirable, and only a single command responder application\
    \ should\n   be registered with an SNMP engine at any given time.\n   A command\
    \ responder application can disassociate with an SNMP engine\n   using the following\
    \ abstract service interface:\n       unregisterContextEngineID(\n         IN\
    \   contextEngineID     -- give up responsibility for this one\n         IN  \
    \ pduType             -- the pduType(s) to be unregistered\n              )\n\
    \   Where:\n     -  The contextEngineID is equal to the snmpEngineID of the SNMP\n\
    \        engine with which the command responder is cancelling the\n        registration.\n\
    \     -  The pduType indicates a Read-Class and/or Write-Class PDU.\n   Once the\
    \ command responder has registered with the SNMP engine, it\n   waits to receive\
    \ SNMP messages.  The abstract service interface used\n   for receiving messages\
    \ is:\n   processPdu(                     -- process Request/Notification PDU\n\
    \     IN   messageProcessingModel   -- typically, SNMP version\n     IN   securityModel\
    \            -- Security Model in use\n     IN   securityName             -- on\
    \ behalf of this principal\n     IN   securityLevel            -- Level of Security\n\
    \     IN   contextEngineID          -- data from/at this SNMP entity\n     IN\
    \   contextName              -- data from/in this context\n     IN   pduVersion\
    \               -- the version of the PDU\n     IN   PDU                     \
    \ -- SNMP Protocol Data Unit\n     IN   maxSizeResponseScopedPDU -- maximum size\
    \ of the Response PDU\n     IN   stateReference           -- reference to state\
    \ information\n          )                        -- needed when sending a response\n\
    \   Where:\n     -  The messageProcessingModel indicates which Message Processing\n\
    \        Model received and processed the message.\n     -  The securityModel\
    \ is the value from the received message.\n     -  The securityName is the value\
    \ from the received message.\n     -  The securityLevel is the value from the\
    \ received message.\n     -  The contextEngineID is the value from the received\
    \ message.\n     -  The contextName is the value from the received message.\n\
    \     -  The pduVersion indicates the version of the PDU in the received\n   \
    \     message.\n     -  The PDU is the value from the received message.\n    \
    \ -  The maxSizeResponseScopedPDU is the maximum allowable size of a\n       \
    \ ScopedPDU containing a Response PDU (based on the maximum\n        message size\
    \ that the originator of the message can accept).\n     -  The stateReference\
    \ is a value which references cached\n        information about each received\
    \ request message.  This value\n        must be returned to the Dispatcher in\
    \ order to generate a\n        response.\n   The procedure when a message is received\
    \ is as follows.\n   (1)  The operation type is determined from the ASN.1 tag\
    \ value\n        associated with the PDU parameter.  The operation type should\n\
    \        always be one of the types previously registered by the\n        application.\n\
    \   (2)  The request-id is extracted from the PDU and saved.\n   (3)  Any PDU\
    \ type specific parameters are extracted from the PDU and\n        saved (for\
    \ example, if the PDU type is an SNMPv2 GetBulk PDU,\n        the non-repeaters\
    \ and max-repetitions values are extracted).\n   (4)  The variable-bindings are\
    \ extracted from the PDU and saved.\n   (5)  The management operation represented\
    \ by the PDU type is\n        performed with respect to the relevant MIB view\
    \ within the\n        context named by the contextName (for an SNMPv2 PDU type,\
    \ the\n        operation is performed according to the procedures set forth in\n\
    \        [RFC1905]).  The relevant MIB view is determined by the\n        securityLevel,\
    \ securityModel, contextName, securityName, and the\n        class of the PDU\
    \ type.  To determine whether a particular object\n        instance is within\
    \ the relevant MIB view, the following abstract\n        service interface is\
    \ called:\n       statusInformation =      -- success or errorIndication\n   \
    \      isAccessAllowed(\n         IN   securityModel     -- Security Model in\
    \ use\n         IN   securityName      -- principal who wants to access\n    \
    \     IN   securityLevel     -- Level of Security\n         IN   viewType    \
    \      -- read, write, or notify view\n         IN   contextName       -- context\
    \ containing variableName\n         IN   variableName      -- OID for the managed\
    \ object\n              )\n   Where:\n     -  The securityModel is the value from\
    \ the received message.\n     -  The securityName is the value from the received\
    \ message.\n     -  The securityLevel is the value from the received message.\n\
    \     -  The viewType indicates whether the PDU type is a Read-Class or\n    \
    \    Write-Class operation.\n     -  The contextName is the value from the received\
    \ message.\n     -  The variableName is the object instance of the variable for\n\
    \        which access rights are to be checked.\n   Normally, the result of the\
    \ management operation will be a new PDU\n   value, and processing will continue\
    \ in step (6) below.  However, at\n   any time during the processing of the management\
    \ operation:\n     -  If the isAccessAllowed ASI returns a noSuchView, noAccessEntry,\n\
    \        or noGroupName error, processing of the management operation is\n   \
    \     halted, a PDU value is constructed using the values from the\n        originally\
    \ received PDU, but replacing the error_status with an\n        authorizationError\
    \ code, and error_index value of 0, and control\n        is passed to step (6)\
    \ below.\n     -  If the isAccessAllowed ASI returns an otherError, processing\
    \ of\n        the management operation is halted, a different PDU value is\n \
    \       constructed using the values from the originally received PDU,\n     \
    \   but replacing the error_status with a genError code, and control\n       \
    \ is passed to step (6) below.\n     -  If the isAccessAllowed ASI returns a noSuchContext\
    \ error,\n        processing of the management operation is halted, no result\
    \ PDU\n        is generated, the snmpUnknownContexts counter is incremented,\n\
    \        and control is passed to step (6) below.\n     -  If the context named\
    \ by the contextName parameter is\n        unavailable, processing of the management\
    \ operation is halted,\n        no result PDU is generated, the snmpUnavailableContexts\
    \ counter\n        is incremented, and control is passed to step (6) below.\n\
    \   (6)  The Dispatcher is called to generate a response or report\n        message.\
    \  The abstract service interface is:\n   returnResponsePdu(\n     IN   messageProcessingModel\
    \   -- typically, SNMP version\n     IN   securityModel            -- Security\
    \ Model in use\n     IN   securityName             -- on behalf of this principal\n\
    \     IN   securityLevel            -- same as on incoming request\n     IN  \
    \ contextEngineID          -- data from/at this SNMP entity\n     IN   contextName\
    \              -- data from/in this context\n     IN   pduVersion            \
    \   -- the version of the PDU\n     IN   PDU                      -- SNMP Protocol\
    \ Data Unit\n     IN   maxSizeResponseScopedPDU -- maximum size of the Response\
    \ PDU\n     IN   stateReference           -- reference to state information\n\
    \                                   -- as presented with the request\n     IN\
    \   statusInformation        -- success or errorIndication\n          )      \
    \                  -- error counter OID/value if error\n   Where:\n     -  The\
    \ messageProcessingModel is the value from the processPdu\n        call.\n   \
    \  -  The securityModel is the value from the processPdu call.\n     -  The securityName\
    \ is the value from the processPdu call.\n     -  The securityLevel is the value\
    \ from the processPdu call.\n     -  The contextEngineID is the value from the\
    \ processPdu call.\n     -  The contextName is the value from the processPdu call.\n\
    \     -  The pduVersion indicates the version of the PDU to be returned.\n   \
    \     If no result PDU was generated, the pduVersion is an undefined\n       \
    \ value.\n     -  The PDU is the result generated in step (5) above.  If no result\n\
    \        PDU was generated, the PDU is an undefined value.\n     -  The maxSizeResponseScopedPDU\
    \ is a local value indicating the\n        maximum size of a ScopedPDU that the\
    \ application can accept.\n     -  The stateReference is the value from the processPdu\
    \ call.\n     -  The statusInformation either contains an indication that no\n\
    \        error occurred and that a response should be generated, or\n        contains\
    \ an indication that an error occurred along with the OID\n        and counter\
    \ value of the appropriate error counter object.\n   Note that a command responder\
    \ application should always call the\n   returnResponsePdu abstract service interface,\
    \ even in the event of an\n   error such as a resource allocation error.  In the\
    \ event of such an\n   error, the PDU value passed to returnResponsePdu should\
    \ contain\n   appropriate values for errorStatus and errorIndex.\n   Note that\
    \ the text above describes situations where the\n   snmpUnknownContexts counter\
    \ is incremented, and where the\n   snmpUnavailableContexts counter is incremented.\
    \  The difference\n   between these is that the snmpUnknownContexts counter is\
    \ incremented\n   when a request is received for a context which unknown to the\
    \ SNMP\n   entity.  The snmpUnavailableContexts counter is incremented when a\n\
    \   request is received for a context which is known to the SNMP entity,\n   but\
    \ is currently unavailable.  Determining when a context is\n   unavailable is\
    \ implementation specific, and some implementations may\n   never encounter this\
    \ situation, and so may never increment the\n   snmpUnavailableContexts counter.\n"
- title: 3.3.  Notification Originator Applications
  contents:
  - "3.3.  Notification Originator Applications\n   A notification originator application\
    \ generates SNMP messages\n   containing Notification-Class PDUs (for example,\
    \ SNMPv2-Trap PDUs or\n   Inform PDUs).  There is no requirement as to what specific\
    \ types of\n   Notification-Class PDUs a particular implementation must be capable\n\
    \   of generating.\n   Notification originator applications require a mechanism\
    \ for\n   identifying the management targets to which notifications should be\n\
    \   sent.  The particular mechanism used is implementation dependent.\n   However,\
    \ if an implementation makes the configuration of management\n   targets SNMP\
    \ manageable, it MUST use the SNMP-TARGET-MIB module\n   described in this document.\n\
    \   When a notification originator wishes to generate a notification, it\n   must\
    \ first determine in which context the information to be conveyed\n   in the notification\
    \ exists, i.e., it must determine the\n   contextEngineID and contextName.  It\
    \ must then determine the set of\n   management targets to which the notification\
    \ should be sent.  The\n   application must also determine, for each management\
    \ target, what\n   specific PDU type the notification message should contain,\
    \ and if it\n   is to contain a Confirmed-Class PDU, the number of retries and\n\
    \   retransmission algorithm.\n   The mechanism by which a notification originator\
    \ determines this\n   information is implementation dependent.  Once the application\
    \ has\n   determined this information, the following procedure is performed for\n\
    \   each management target:\n   (1)  Any appropriate filtering mechanisms are\
    \ applied to determine\n        whether the notification should be sent to the\
    \ management\n        target.  If such filtering mechanisms determine that the\n\
    \        notification should not be sent, processing continues with the\n    \
    \    next management target.  Otherwise,\n   (2)  The appropriate set of variable-bindings\
    \ is retrieved from local\n        MIB instrumentation within the relevant MIB\
    \ view.  The relevant\n        MIB view is determined by the securityLevel, securityModel,\n\
    \        contextName, and securityName of the management target.  To\n       \
    \ determine whether a particular object instance is within the\n        relevant\
    \ MIB view, the isAccessAllowed abstract service\n        interface is used, in\
    \ the same manner as described in the\n        preceding section.  If the statusInformation\
    \ returned by\n        isAccessAllowed does not indicate accessAllowed, the\n\
    \        notification is not sent to the management target.\n   (3)  The NOTIFICATION-TYPE\
    \ OBJECT IDENTIFIER of the notification\n        (this is the value of the element\
    \ of the variable bindings whose\n        name is snmpTrapOID.0, i.e., the second\
    \ variable binding) is\n        checked using the isAccessAllowed abstract service\
    \ interface,\n        using the same parameters used in the preceding step.  If\
    \ the\n        statusInformation returned by isAccessAllowed does not indicate\n\
    \        accessAllowed, the notification is not sent to the management\n     \
    \   target.\n   (4)  A PDU is constructed using a locally unique request-id value,\
    \ a\n        PDU type as determined by the implementation, an error-status\n \
    \       and error-index value of 0, and the variable-bindings supplied\n     \
    \   previously in step (2).\n   (5)  If the notification contains an Unconfirmed-Class\
    \ PDU, the\n        Dispatcher is called using the following abstract service\n\
    \        interface:\n       statusInformation =              -- sendPduHandle\
    \ if success\n                                        -- errorIndication if failure\n\
    \         sendPdu(\n         IN   transportDomain           -- transport domain\
    \ to be used\n         IN   transportAddress          -- destination network address\n\
    \         IN   messageProcessingModel    -- typically, SNMP version\n        \
    \ IN   securityModel             -- Security Model to use\n         IN   securityName\
    \              -- on behalf of this principal\n         IN   securityLevel   \
    \          -- Level of Security requested\n         IN   contextEngineID     \
    \      -- data from/at this entity\n         IN   contextName               --\
    \ data from/in this context\n         IN   pduVersion                -- the version\
    \ of the PDU\n         IN   PDU                       -- SNMP Protocol Data Unit\n\
    \         IN   expectResponse            -- TRUE or FALSE\n              )\n \
    \  Where:\n     -  The transportDomain is that of the management target.\n   \
    \  -  The transportAddress is that of the management target.\n     -  The messageProcessingModel\
    \ is that of the management target.\n     -  The securityModel is that of the\
    \ management target.\n     -  The securityName is that of the management target.\n\
    \     -  The securityLevel is that of the management target.\n     -  The contextEngineID\
    \ is the value originally determined for the\n        notification.\n     -  The\
    \ contextName is the value originally determined for the\n        notification.\n\
    \     -  The pduVersion is the version of the PDU to be sent.\n     -  The PDU\
    \ is the value constructed in step (3) above.\n     -  The expectResponse argument\
    \ indicates that no response is\n        expected.\n   Otherwise,\n   (6)  If\
    \ the notification contains a Confirmed-Class PDU, then:\n        a)  The Dispatcher\
    \ is called using the sendPdu abstract service\n            interface as described\
    \ in step (4) above, except that the\n            expectResponse argument indicates\
    \ that a response is\n            expected.\n        b)  The application caches\
    \ information about the management\n            target.\n        c)  If a response\
    \ is received within an appropriate time\n            interval from the transport\
    \ endpoint of the management\n            target, the notification is considered\
    \ acknowledged and the\n            cached information is deleted.  Otherwise,\n\
    \        d)  If a response is not received within an appropriate time\n      \
    \      period, or if a report indication is received, information\n          \
    \  about the management target is retrieved from the cache, and\n            steps\
    \ a) through d) are repeated.  The number of times these\n            steps are\
    \ repeated is equal to the previously determined\n            retry count.  If\
    \ this retry count is exceeded, the\n            acknowledgement of the notification\
    \ is considered to have\n            failed, and processing of the notification\
    \ for this\n            management target is halted.  Note that some report\n\
    \            indications might be considered a failure.  Such report\n       \
    \     indications should be interpreted to mean that the\n            acknowledgement\
    \ of the notification has failed.\n   Responses to Confirmed-Class PDU notifications\
    \ will be received via\n   the processResponsePdu abstract service interface.\n\
    \   To summarize, the steps that a notification originator follows when\n   determining\
    \ where to send a notification are:\n     -  Determine the targets to which the\
    \ notification should be sent.\n     -  Apply any required filtering to the list\
    \ of targets.\n     -  Determine which targets are authorized to receive the\n\
    \        notification.\n"
- title: 3.4.  Notification Receiver Applications
  contents:
  - "3.4.  Notification Receiver Applications\n   Notification receiver applications\
    \ receive SNMP Notification messages\n   from the Dispatcher.  Before any messages\
    \ can be received, the\n   notification receiver must register with the Dispatcher\
    \ using the\n   registerContextEngineID abstract service interface.  The parameters\n\
    \   used are:\n     -  The contextEngineID is an undefined 'wildcard' value.\n\
    \        Notifications are delivered to a registered notification\n        receiver\
    \ regardless of the contextEngineID contained in the\n        notification message.\n\
    \     -  The pduType indicates the type of notifications that the\n        application\
    \ wishes to receive (for example, SNMPv2-Trap PDUs or\n        Inform PDUs).\n\
    \   Once the notification receiver has registered with the Dispatcher,\n   messages\
    \ are received using the processPdu abstract service\n   interface.  Parameters\
    \ are:\n     -  The messageProcessingModel indicates which Message Processing\n\
    \        Model received and processed the message.\n     -  The securityModel\
    \ is the value from the received message.\n     -  The securityName is the value\
    \ from the received message.\n     -  The securityLevel is the value from the\
    \ received message.\n     -  The contextEngineID is the value from the received\
    \ message.\n     -  The contextName is the value from the received message.\n\
    \     -  The pduVersion indicates the version of the PDU in the received\n   \
    \     message.\n     -  The PDU is the value from the received message.\n    \
    \ -  The maxSizeResponseScopedPDU is the maximum allowable size of a\n       \
    \ ScopedPDU containing a Response PDU (based on the maximum\n        message size\
    \ that the originator of the message can accept).\n     -  If the message contains\
    \ an Unconfirmed-Class PDU, the\n        stateReference is undefined and unused.\
    \  Otherwise, the\n        stateReference is a value which references cached information\n\
    \        about the notification.  This value must be returned to the\n       \
    \ Dispatcher in order to generate a response.\n   When an Unconfirmed-Class PDU\
    \ is delivered to a notification receiver\n   application, it first extracts the\
    \ SNMP operation type, request-id,\n   error-status, error-index, and variable-bindings\
    \ from the PDU.  After\n   this, processing depends on the particular implementation.\n\
    \   When a Confirmed-Class PDU is received, the notification receiver\n   application\
    \ follows the following procedure:\n   (1)  The PDU type, request-id, error-status,\
    \ error-index, and\n        variable-bindings are extracted from the PDU.\n  \
    \ (2)  A Response-Class PDU is constructed using the extracted\n        request-id\
    \ and variable-bindings, and with error-status and\n        error-index both set\
    \ to 0.\n   (3)  The Dispatcher is called to generate a response message using\n\
    \        the returnResponsePdu abstract service interface.  Parameters\n     \
    \   are:\n     -  The messageProcessingModel is the value from the processPdu\n\
    \        call.\n     -  The securityModel is the value from the processPdu call.\n\
    \     -  The securityName is the value from the processPdu call.\n     -  The\
    \ securityLevel is the value from the processPdu call.\n     -  The contextEngineID\
    \ is the value from the processPdu call.\n     -  The contextName is the value\
    \ from the processPdu call.\n     -  The pduVersion indicates the version of the\
    \ PDU to be returned.\n     -  The PDU is the result generated in step (2) above.\n\
    \     -  The maxSizeResponseScopedPDU is a local value indicating the\n      \
    \  maximum size of a ScopedPDU that the application can accept.\n     -  The stateReference\
    \ is the value from the processPdu call.\n     -  The statusInformation indicates\
    \ that no error occurred and that\n        a response should be generated.\n"
- title: 3.5.  Proxy Forwarder Applications
  contents:
  - "3.5.  Proxy Forwarder Applications\n   A proxy forwarder application deals with\
    \ forwarding SNMP messages.\n   There are four basic types of messages which a\
    \ proxy forwarder\n   application may need to forward.  These are grouped according\
    \ to the\n   class of PDU type contained in a message.  The four basic types of\n\
    \   messages are:\n     -  Those containing Read-Class or Write-Class PDU types\
    \ (for\n        example, Get, GetNext, GetBulk, and Set PDU types).  These deal\n\
    \        with requesting or modifying information located within a\n        particular\
    \ context.\n     -  Those containing Notification-Class PDU types (for example,\n\
    \        SNMPv2-Trap and Inform PDU types).  These deal with\n        notifications\
    \ concerning information located within a particular\n        context.\n     -\
    \  Those containing a Response-Class PDU type.  Forwarding of\n        Response\
    \ PDUs always occurs as a result of receiving a response\n        to a previously\
    \ forwarded message.\n     -  Those containing Internal-Class PDU types (for example,\
    \ a Report\n        PDU).  Forwarding of Internal-Class PDU types always occurs\
    \ as a\n        result of receiving an Internal-Class PDU in response to a\n \
    \       previously forwarded message.\n   For the first type, the proxy forwarder's\
    \ role is to deliver a\n   request for management information to an SNMP engine\
    \ which is\n   \"closer\" or \"downstream in the path\" to the SNMP engine which\
    \ has\n   access to that information, and to deliver the response containing\n\
    \   the information back to the SNMP engine from which the request was\n   received.\
    \  The context information in a request is used to determine\n   which SNMP engine\
    \ has access to the requested information, and this\n   is used to determine where\
    \ and how to forward the request.\n   For the second type, the proxy forwarder's\
    \ role is to determine which\n   SNMP engines should receive notifications about\
    \ management\n   information from a particular location.  The context information\
    \ in a\n   notification message determines the location to which the information\n\
    \   contained in the notification applies.  This is used to determine\n   which\
    \ SNMP engines should receive notification about this\n   information.\n   For\
    \ the third type, the proxy forwarder's role is to determine which\n   previously\
    \ forwarded request or notification (if any) the response\n   matches, and to\
    \ forward the response back to the initiator of the\n   request or notification.\n\
    \   For the fourth type, the proxy forwarder's role is to determine which\n  \
    \ previously forwarded request or notification (if any) the Internal-\n   Class\
    \ PDU matches, and to forward the Internal-Class PDU back to the\n   initiator\
    \ of the request or notification.\n   When forwarding messages, a proxy forwarder\
    \ application must perform\n   a translation of incoming management target information\
    \ into outgoing\n   management target information.  How this translation is performed\
    \ is\n   implementation specific.  In many cases, this will be driven by a\n \
    \  preconfigured translation table.  If a proxy forwarder application\n   makes\
    \ the contents of this table SNMP manageable, it MUST use the\n   SNMP-PROXY-MIB\
    \ module defined in this document.\n"
- title: 3.5.1.  Request Forwarding
  contents:
  - "3.5.1.  Request Forwarding\n   There are two phases for request forwarding. \
    \ First, the incoming\n   request needs to be passed through the proxy application.\
    \  Then, the\n   resulting response needs to be passed back.  These phases are\n\
    \   described in the following two sections.\n"
- title: 3.5.1.1.  Processing an Incoming Request
  contents:
  - "3.5.1.1.  Processing an Incoming Request\n   A proxy forwarder application that\
    \ wishes to forward request messages\n   must first register with the Dispatcher\
    \ using the\n   registerContextEngineID abstract service interface.  The proxy\n\
    \   forwarder must register each contextEngineID for which it wishes to\n   forward\
    \ messages, as well as for each pduType.  Note that as the\n   configuration of\
    \ a proxy forwarder is changed, the particular\n   contextEngineID values for\
    \ which it is forwarding may change.  The\n   proxy forwarder should call the\
    \ registerContextEngineID and\n   unregisterContextEngineID abstract service interfaces\
    \ as needed to\n   reflect its current configuration.\n   A proxy forwarder application\
    \ should never attempt to register a\n   value of contextEngineID which is equal\
    \ to the snmpEngineID of the\n   SNMP engine to which the proxy forwarder is associated.\n\
    \   Once the proxy forwarder has registered for the appropriate\n   contextEngineID\
    \ values, it can start processing messages.  The\n   following procedure is used:\n\
    \   (1)  A message is received using the processPdu abstract service\n       \
    \ interface.  The incoming management target information received\n        from\
    \ the processPdu interface is translated into outgoing\n        management target\
    \ information.  Note that this translation may\n        vary for different values\
    \ of contextEngineID and/or contextName.\n        The translation should result\
    \ in a single management target.\n   (2)  If appropriate outgoing management target\
    \ information cannot be\n        found, the proxy forwarder increments the snmpProxyDrops\
    \ counter\n        [RFC1907], and then calls the Dispatcher using the\n      \
    \  returnResponsePdu abstract service interface.  Parameters are:\n     -  The\
    \ messageProcessingModel is the value from the processPdu\n        call.\n   \
    \  -  The securityModel is the value from the processPdu call.\n     -  The securityName\
    \ is the value from the processPdu call.\n     -  The securityLevel is the value\
    \ from the processPdu call.\n     -  The contextEngineID is the value from the\
    \ processPdu call.\n     -  The contextName is the value from the processPdu call.\n\
    \     -  The pduVersion is the value from the processPdu call.\n     -  The PDU\
    \ is an undefined value.\n     -  The maxSizeResponseScopedPDU is a local value\
    \ indicating the\n        maximum size of a ScopedPDU that the application can\
    \ accept.\n     -  The stateReference is the value from the processPdu call.\n\
    \     -  The statusInformation indicates that an error occurred and\n        includes\
    \ the OID and value of the snmpProxyDrops object.\n        Processing of the message\
    \ stops at this point.  Otherwise,\n   (3)  A new PDU is constructed.  A unique\
    \ value of request-id should\n        be used in the new PDU (this value will\
    \ enable a subsequent\n        response message to be correlated with this request).\
    \  The\n        remainder of the new PDU is identical to the received PDU,\n \
    \       unless the incoming SNMP version and the outgoing SNMP version\n     \
    \   support different PDU versions, in which case the proxy\n        forwarder\
    \ may need to perform a translation on the PDU (A method\n        for performing\
    \ such a translation is described in [COEX].)\n   (4)  The proxy forwarder calls\
    \ the Dispatcher to generate the\n        forwarded message, using the sendPdu\
    \ abstract service interface.\n        The parameters are:\n     -  The transportDomain\
    \ is that of the outgoing management target.\n     -  The transportAddress is\
    \ that of the outgoing management target.\n     -  The messageProcessingModel\
    \ is that of the outgoing management\n        target.\n     -  The securityModel\
    \ is that of the outgoing management target.\n     -  The securityName is that\
    \ of the outgoing management target.\n     -  The securityLevel is that of the\
    \ outgoing management target.\n     -  The contextEngineID is the value originally\
    \ received.\n     -  The contextName is the value originally received.\n     -\
    \  The pduVersion is the version of the PDU to be sent.\n     -  The PDU is the\
    \ value constructed in step (3) above.\n     -  The expectResponse argument indicates\
    \ that a response is\n        expected.  If the sendPdu call is unsuccessful,\
    \ the proxy\n        forwarder performs the steps described in (2) above.  Otherwise:\n\
    \   (5)  The proxy forwarder caches the following information in order to\n  \
    \      match an incoming response to the forwarded request:\n     -  The sendPduHandle\
    \ returned from the call to sendPdu,\n     -  The request-id from the received\
    \ PDU.\n     -  the contextEngineID,\n     -  the contextName,\n     -  the stateReference,\n\
    \     -  the incoming management target information,\n     -  the outgoing management\
    \ information,\n     -  any other information needed to match an incoming response\
    \ to\n        the forwarded request.\n        If this information cannot be cached\
    \ (possibly due to a lack of\n        resources), the proxy forwarder performs\
    \ the steps described in\n        (2) above.  Otherwise:\n   (6)  Processing of\
    \ the request stops until a response to the\n        forwarded request is received,\
    \ or until an appropriate time\n        interval has expired.  If this time interval\
    \ expires before a\n        response has been received, the cached information\
    \ about this\n        request is removed.\n"
- title: 3.5.1.2.  Processing an Incoming Response
  contents:
  - "3.5.1.2.  Processing an Incoming Response\n   A proxy forwarder follows the following\
    \ procedure when an incoming\n   response is received:\n   (1)  The incoming response\
    \ is received using the processResponsePdu\n        interface.  The proxy forwarder\
    \ uses the received parameters to\n        locate an entry in its cache of pending\
    \ forwarded requests.\n        This is done by matching the received parameters\
    \ with the cached\n        values of sendPduHandle, contextEngineID, contextName,\
    \ outgoing\n        management target information, and the request-id contained\
    \ in\n        the received PDU (the proxy forwarder must extract the request-\n\
    \        id for this purpose).  If an appropriate cache entry cannot be\n    \
    \    found, processing of the response is halted.  Otherwise:\n   (2)  The cache\
    \ information is extracted, and removed from the cache.\n   (3)  A new Response-Class\
    \ PDU is constructed, using the request-id\n        value from the original forwarded\
    \ request (as extracted from the\n        cache).  All other values are identical\
    \ to those in the received\n        Response-Class PDU, unless the incoming SNMP\
    \ version and the\n        outgoing SNMP version support different PDU versions,\
    \ in which\n        case the proxy forwarder may need to perform a translation\
    \ on\n        the PDU.  (A method for performing such a translation is\n     \
    \   described in [COEX].)\n   (4)  The proxy forwarder calls the Dispatcher using\
    \ the\n        returnResponsePdu abstract service interface.  Parameters are:\n\
    \     -  The messageProcessingModel indicates the Message Processing\n       \
    \ Model by which the original incoming message was processed.\n     -  The securityModel\
    \ is that of the original incoming management\n        target extracted from the\
    \ cache.\n     -  The securityName is that of the original incoming management\n\
    \        target extracted from the cache.\n     -  The securityLevel is that of\
    \ the original incoming management\n        target extracted from the cache.\n\
    \     -  The contextEngineID is the value extracted from the cache.\n     -  The\
    \ contextName is the value extracted from the cache.\n     -  The pduVersion indicates\
    \ the version of the PDU to be returned.\n     -  The PDU is the (possibly translated)\
    \ Response PDU.\n     -  The maxSizeResponseScopedPDU is a local value indicating\
    \ the\n        maximum size of a ScopedPDU that the application can accept.\n\
    \     -  The stateReference is the value extracted from the cache.\n     -  The\
    \ statusInformation indicates that no error occurred and that\n        a Response\
    \ PDU message should be generated.\n"
- title: 3.5.1.3.  Processing an Incoming Internal-Class PDU
  contents:
  - "3.5.1.3.  Processing an Incoming Internal-Class PDU\n   A proxy forwarder follows\
    \ the following procedure when an incoming\n   Internal-Class PDU is received:\n\
    \   (1)  The incoming Internal-Class PDU is received using the\n        processResponsePdu\
    \ interface.  The proxy forwarder uses the\n        received parameters to locate\
    \ an entry in its cache of pending\n        forwarded requests.  This is done\
    \ by matching the received\n        parameters with the cached values of sendPduHandle.\
    \  If an\n        appropriate cache entry cannot be found, processing of the\n\
    \        Internal-Class PDU is halted.  Otherwise:\n   (2)  The cache information\
    \ is extracted, and removed from the cache.\n   (3)  If the original incoming\
    \ management target information indicates\n        an SNMP version which does\
    \ not support Report PDUs, processing\n        of the Internal-Class PDU is halted.\n\
    \   (4)  The proxy forwarder calls the Dispatcher using the\n        returnResponsePdu\
    \ abstract service interface.  Parameters are:\n     -  The messageProcessingModel\
    \ indicates the Message Processing\n        Model by which the original incoming\
    \ message was processed.\n     -  The securityModel is that of the original incoming\
    \ management\n        target extracted from the cache.\n     -  The securityName\
    \ is that of the original incoming management\n        target extracted from the\
    \ cache.\n     -  The securityLevel is that of the original incoming management\n\
    \        target extracted from the cache.\n     -  The contextEngineID is the\
    \ value extracted from the cache.\n     -  The contextName is the value extracted\
    \ from the cache.\n     -  The pduVersion indicates the version of the PDU to\
    \ be returned.\n     -  The PDU is unused.\n     -  The maxSizeResponseScopedPDU\
    \ is a local value indicating the\n        maximum size of a ScopedPDU that the\
    \ application can accept.\n     -  The stateReference is the value extracted from\
    \ the cache.\n     -  The statusInformation contains values specific to the Internal-\n\
    \        Class PDU type (for example, for a Report PDU, the\n        statusInformation\
    \ contains the contextEngineID, contextName,\n        counter OID, and counter\
    \ value received in the incoming Report\n        PDU).\n"
- title: 3.5.2.  Notification Forwarding
  contents:
  - "3.5.2.  Notification Forwarding\n   A proxy forwarder receives notifications\
    \ in the same manner as a\n   notification receiver application, using the processPdu\
    \ abstract\n   service interface.  The following procedure is used when a\n  \
    \ notification is received:\n   (1)  The incoming management target information\
    \ received from the\n        processPdu interface is translated into outgoing\
    \ management\n        target information.  Note that this translation may vary\
    \ for\n        different values of contextEngineID and/or contextName.  The\n\
    \        translation may result in multiple management targets.\n   (2)  If appropriate\
    \ outgoing management target information cannot be\n        found and the notification\
    \ was an Unconfirmed-Class PDU,\n        processing of the notification is halted.\
    \  If appropriate\n        outgoing management target information cannot be found\
    \ and the\n        notification was a Confirmed-Class PDU, the proxy forwarder\n\
    \        increments the snmpProxyDrops object, and calls the Dispatcher\n    \
    \    using the returnResponsePdu abstract service interface.  The\n        parameters\
    \ are:\n     -  The messageProcessingModel is the received value.\n     -  The\
    \ securityModel is the received value.\n     -  The securityName is the received\
    \ value.\n     -  The securityLevel is the received value.\n     -  The contextEngineID\
    \ is the received value.\n     -  The contextName is the received value.\n   \
    \  -  The pduVersion is the received value.\n     -  The PDU is an undefined and\
    \ unused value.\n     -  The maxSizeResponseScopedPDU is a local value indicating\
    \ the\n        maximum size of a ScopedPDU that the application can accept.\n\
    \     -  The stateReference is the received value.\n     -  The statusInformation\
    \ indicates that an error occurred and that\n        a Report message should be\
    \ generated.\n   Processing of the message stops at this point.  Otherwise,\n\
    \   (3)  The proxy forwarder generates a notification using the\n        procedures\
    \ described in the preceding section on Notification\n        Originators, with\
    \ the following exceptions:\n     -  The contextEngineID and contextName values\
    \ from the original\n        received notification are used.\n     -  The outgoing\
    \ management targets previously determined are used.\n     -  No filtering mechanisms\
    \ are applied.\n     -  The variable-bindings from the original received notification\n\
    \        are used, rather than retrieving variable-bindings from local\n     \
    \   MIB instrumentation.  In particular, no access-control is\n        applied\
    \ to these variable-bindings.\n     -  If the original notification contains a\
    \ Confirmed-Class PDU,\n        then any outgoing management targets, for which\
    \ the outgoing\n        SNMP version does not support and PDU types which are\
    \ both\n        Notification-Class and Confirmed-Class PDUs, will not be used\n\
    \        when generating the forwarded notifications.\n     -  If, for any of\
    \ the outgoing management targets, the incoming\n        SNMP version and the\
    \ outgoing SNMP version support different PDU\n        versions, the proxy forwarder\
    \ may need to perform a translation\n        on the PDU.  (A method for performing\
    \ such a translation is\n        described in [COEX].)\n   (4)  If the original\
    \ received notification contains an Unconfirmed-\n        Class PDU, processing\
    \ of the notification is now completed.\n        Otherwise, the original received\
    \ notification must contain a\n        Confirmed-Class PDU, and processing continues.\n\
    \   (5)  If the forwarded notifications included any Confirmed-Class\n       \
    \ PDUs, processing continues when the procedures described in the\n        section\
    \ for Notification Originators determine that either:\n     -  None of the generated\
    \ notifications containing Confirmed-Class\n        PDUs have been successfully\
    \ acknowledged within the longest of\n        the time intervals, in which case\
    \ processing of the original\n        notification is halted, or,\n     -  At\
    \ least one of the generated notifications containing\n        Confirmed-Class\
    \ PDUs is successfully acknowledged, in which case\n        a response to the\
    \ original received notification containing an\n        Confirmed-Class PDU is\
    \ generated as described in the following\n        steps.\n   (6)  A Response-Class\
    \ PDU is constructed, using the values of\n        request-id and variable-bindings\
    \ from the original received\n        Notification-Class PDU, and error-status\
    \ and error-index values\n        of 0.\n   (7)  The Dispatcher is called using\
    \ the returnResponsePdu abstract\n        service interface.  Parameters are:\n\
    \     -  The messageProcessingModel is the originally received value.\n     -\
    \  The securityModel is the originally received value.\n     -  The securityName\
    \ is the originally received value.\n     -  The securityLevel is the originally\
    \ received value.\n     -  The contextEngineID is the originally received value.\n\
    \     -  The contextName is the originally received value.\n     -  The pduVersion\
    \ indicates the version of the PDU constructed in\n        step (6) above.\n \
    \    -  The PDU is the value constructed in step (6) above.\n     -  The maxSizeResponseScopedPDU\
    \ is a local value indicating the\n        maximum size of a ScopedPDU that the\
    \ application can accept.\n     -  The stateReference is the originally received\
    \ value.\n     -  The statusInformation indicates that no error occurred and that\n\
    \        a Response-Class PDU message should be generated.\n"
- title: 4.  The Structure of the MIB Modules
  contents:
  - "4.  The Structure of the MIB Modules\n   There are three separate MIB modules\
    \ described in this document, the\n   management target MIB, the notification\
    \ MIB, and the proxy MIB.  The\n   following sections describe the structure of\
    \ these three MIB modules.\n   The use of these MIBs by particular types of applications\
    \ is\n   described later in this document:\n     -  The use of the management\
    \ target MIB and the notification MIB in\n        notification originator applications\
    \ is described in section 6.\n     -  The use of the notification MIB for filtering\
    \ notifications in\n        notification originator applications is described\
    \ in section 7.\n     -  The use of the management target MIB and the proxy MIB\
    \ in proxy\n        forwarding applications is described in section 8.\n"
- title: 4.1.  The Management Target MIB Module
  contents:
  - "4.1.  The Management Target MIB Module\n   The SNMP-TARGET-MIB module contains\
    \ objects for defining management\n   targets.  It consists of two tables and\
    \ conformance/compliance\n   statements.\n   The first table, the snmpTargetAddrTable,\
    \ contains information about\n   transport domains and addresses.  It also contains\
    \ an object,\n   snmpTargetAddrTagList, which provides a mechanism for grouping\n\
    \   entries.\n   The second table, the snmpTargetParamsTable, contains information\n\
    \   about SNMP version and security information to be used when sending\n   messages\
    \ to particular transport domains and addresses.\n   The Management Target MIB\
    \ is intended to provide a general-purpose\n   mechanism for specifying transport\
    \ address, and for specifying\n   parameters of SNMP messages generated by an\
    \ SNMP entity.  It is used\n   within this document for generation of notifications\
    \ and for proxy\n   forwarding.  However, it may be used for other purposes. \
    \ If another\n   document makes use of this MIB, that document is responsible\
    \ for\n   specifying how it is used.  For example, [COEX] uses this MIB for\n\
    \   source address validation of SNMPv1 messages.\n"
- title: 4.1.1.  Tag Lists
  contents:
  - "4.1.1.  Tag Lists\n   The snmpTargetAddrTagList object is used for grouping entries\
    \ in the\n   snmpTargetAddrTable.  The value of this object contains a list of\
    \ tag\n   values which are used to select target addresses to be used for a\n\
    \   particular operation.\n   A tag value, which may also be used in MIB objects\
    \ other than\n   snmpTargetAddrTagList, is an arbitrary string of octets, but\
    \ may not\n   contain a delimiter character.  Delimiter characters are defined\
    \ to\n   be one of the following characters:\n     -  An ASCII space character\
    \ (0x20).\n     -  An ASCII TAB character (0x09).\n     -  An ASCII carriage return\
    \ (CR) character (0x0D).\n     -  An ASCII line feed (LF) character (0x0B).\n\
    \   In addition, a tag value may not have a zero length.  Generally, a\n   particular\
    \ MIB object may contain either\n     -  a single tag value, in which case the\
    \ value of the MIB object\n        may not contain a delimiter character, or:\n\
    \     -  a MIB object may contain a list of tag values, separated by\n       \
    \ single delimiter characters.\n   For a list of tag values, these constraints\
    \ imply certain\n   restrictions on the value of a MIB object:\n     -  There\
    \ cannot be a leading or trailing delimiter character.\n     -  There cannot be\
    \ multiple adjacent delimiter characters.\n"
- title: 4.1.2.  Definitions
  contents:
  - "4.1.2.  Definitions\n   SNMP-TARGET-MIB DEFINITIONS ::= BEGIN\n   IMPORTS\n \
    \      MODULE-IDENTITY,\n       OBJECT-TYPE,\n       snmpModules,\n       Counter32,\n\
    \       Integer32\n           FROM SNMPv2-SMI\n       TEXTUAL-CONVENTION,\n  \
    \     TDomain,\n       TAddress,\n       TimeInterval,\n       RowStatus,\n  \
    \     StorageType,\n       TestAndIncr\n           FROM SNMPv2-TC\n       SnmpSecurityModel,\n\
    \       SnmpMessageProcessingModel,\n       SnmpSecurityLevel,\n       SnmpAdminString\n\
    \           FROM SNMP-FRAMEWORK-MIB\n       MODULE-COMPLIANCE,\n       OBJECT-GROUP\n\
    \           FROM SNMPv2-CONF;\n   snmpTargetMIB MODULE-IDENTITY\n       LAST-UPDATED\
    \ \"9808040000Z\"\n       ORGANIZATION \"IETF SNMPv3 Working Group\"\n       CONTACT-INFO\n\
    \           \"WG-email:   snmpv3@lists.tislabs.com\n            Subscribe:  majordomo@lists.tislabs.com\n\
    \                        In message body:  subscribe snmpv3\n            Chair:\
    \      Russ Mundy\n                        Trusted Information Systems\n     \
    \       Postal:     3060 Washington Rd\n                        Glenwood MD 21738\n\
    \                        USA\n            EMail:      mundy@tislabs.com\n    \
    \        Phone:      +1-301-854-6889\n            Co-editor:  David B. Levi\n\
    \                        SNMP Research, Inc.\n            Postal:     3001 Kimberlin\
    \ Heights Road\n                        Knoxville, TN 37920-9716\n           \
    \ EMail:      levi@snmp.com\n            Phone:      +1 423 573 1434\n       \
    \     Co-editor:  Paul Meyer\n                        Secure Computing Corporation\n\
    \            Postal:     2675 Long Lake Road\n                        Roseville,\
    \ MN 55113\n            EMail:      paul_meyer@securecomputing.com\n         \
    \   Phone:      +1 651 628 1592\n            Co-editor:  Bob Stewart\n       \
    \                 Cisco Systems, Inc.\n            Postal:     170 West Tasman\
    \ Drive\n                        San Jose, CA 95134-1706\n            EMail: \
    \     bstewart@cisco.com\n            Phone:      +1 603 654 2686\"\n       DESCRIPTION\n\
    \           \"This MIB module defines MIB objects which provide\n            mechanisms\
    \ to remotely configure the parameters used\n            by an SNMP entity for\
    \ the generation of SNMP messages.\"\n       REVISION    \"9808040000Z\"\n   \
    \    DESCRIPTION \"Clarifications, published as\n                    RFC2573.\"\
    \n       REVISION    \"9707140000Z\"\n       DESCRIPTION \"The initial revision,\
    \ published as RFC2273.\"\n       ::= { snmpModules 12 }\n   snmpTargetObjects\
    \       OBJECT IDENTIFIER ::= { snmpTargetMIB 1 }\n   snmpTargetConformance  \
    \ OBJECT IDENTIFIER ::= { snmpTargetMIB 3 }\n   SnmpTagValue ::= TEXTUAL-CONVENTION\n\
    \       DISPLAY-HINT \"255a\"\n       STATUS       current\n       DESCRIPTION\n\
    \           \"An octet string containing a tag value.\n            Tag values\
    \ are preferably in human-readable form.\n            To facilitate internationalization,\
    \ this information\n            is represented using the ISO/IEC IS 10646-1 character\n\
    \            set, encoded as an octet string using the UTF-8\n            character\
    \ encoding scheme described in RFC 2279.\n            Since additional code points\
    \ are added by amendments\n            to the 10646 standard from time to time,\n\
    \            implementations must be prepared to encounter any code\n        \
    \    point from 0x00000000 to 0x7fffffff.\n            The use of control codes\
    \ should be avoided, and certain\n            control codes are not allowed as\
    \ described below.\n            For code points not directly supported by user\n\
    \            interface hardware or software, an alternative means\n          \
    \  of entry and display, such as hexadecimal, may be\n            provided.\n\
    \            For information encoded in 7-bit US-ASCII, the UTF-8\n          \
    \  representation is identical to the US-ASCII encoding.\n            Note that\
    \ when this TC is used for an object that\n            is used or envisioned to\
    \ be used as an index, then a\n            SIZE restriction must be specified\
    \ so that the number\n            of sub-identifiers for any object instance does\
    \ not\n            exceed the limit of 128, as defined by [RFC1905].\n       \
    \     An object of this type contains a single tag value\n            which is\
    \ used to select a set of entries in a table.\n            A tag value is an arbitrary\
    \ string of octets, but\n            may not contain a delimiter character.  Delimiter\n\
    \            characters are defined to be one of the following:\n            \
    \    -  An ASCII space character (0x20).\n                -  An ASCII TAB character\
    \ (0x09).\n                -  An ASCII carriage return (CR) character (0x0D).\n\
    \                -  An ASCII line feed (LF) character (0x0B).\n            Delimiter\
    \ characters are used to separate tag values\n            in a tag list.  An object\
    \ of this type may only\n            contain a single tag value, and so delimiter\n\
    \            characters are not allowed in a value of this type.\n           \
    \ Some examples of valid tag values are:\n                - 'acme'\n         \
    \       - 'router'\n                - 'host'\n            The use of a tag value\
    \ to select table entries is\n            application and MIB specific.\"\n  \
    \     SYNTAX       OCTET STRING (SIZE (0..255))\n   SnmpTagList ::= TEXTUAL-CONVENTION\n\
    \       DISPLAY-HINT \"255a\"\n       STATUS       current\n       DESCRIPTION\n\
    \           \"An octet string containing a list of tag values.\n            Tag\
    \ values are preferably in human-readable form.\n            To facilitate internationalization,\
    \ this information\n            is represented using the ISO/IEC IS 10646-1 character\n\
    \            set, encoded as an octet string using the UTF-8\n            character\
    \ encoding scheme described in RFC 2279.\n            Since additional code points\
    \ are added by amendments\n            to the 10646 standard from time to time,\n\
    \            implementations must be prepared to encounter any code\n        \
    \    point from 0x00000000 to 0x7fffffff.\n            The use of control codes\
    \ should be avoided, except as\n            described below.\n            For\
    \ code points not directly supported by user\n            interface hardware or\
    \ software, an alternative means\n            of entry and display, such as hexadecimal,\
    \ may be\n            provided.\n            For information encoded in 7-bit\
    \ US-ASCII, the UTF-8\n            representation is identical to the US-ASCII\
    \ encoding.\n            An object of this type contains a list of tag values\n\
    \            which are used to select a set of entries in a table.\n         \
    \   A tag value is an arbitrary string of octets, but\n            may not contain\
    \ a delimiter character.  Delimiter\n            characters are defined to be\
    \ one of the following:\n                -  An ASCII space character (0x20).\n\
    \                -  An ASCII TAB character (0x09).\n                -  An ASCII\
    \ carriage return (CR) character (0x0D).\n                -  An ASCII line feed\
    \ (LF) character (0x0B).\n            Delimiter characters are used to separate\
    \ tag values\n            in a tag list.  Only a single delimiter character may\n\
    \            occur between two tag values.  A tag value may not\n            have\
    \ a zero length.  These constraints imply certain\n            restrictions on\
    \ the contents of this object:\n                - There cannot be a leading or\
    \ trailing delimiter\n                  character.\n                - There cannot\
    \ be multiple adjacent delimiter\n                  characters.\n            Some\
    \ examples of valid tag lists are:\n                - An empty string\n      \
    \          - 'acme router'\n                - 'host managerStation'\n        \
    \    Note that although a tag value may not have a length of\n            zero,\
    \ an empty string is still valid.  This indicates\n            an empty list (i.e.\
    \ there are no tag values in the list).\n            The use of the tag list to\
    \ select table entries is\n            application and MIB specific.  Typically,\
    \ an application\n            will provide one or more tag values, and any entry\n\
    \            which contains some combination of these tag values\n           \
    \ will be selected.\"\n       SYNTAX       OCTET STRING (SIZE (0..255))\n   --\n\
    \   --\n   -- The snmpTargetObjects group\n   --\n   --\n   snmpTargetSpinLock\
    \ OBJECT-TYPE\n       SYNTAX      TestAndIncr\n       MAX-ACCESS  read-write\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This object is used\
    \ to facilitate modification of table\n            entries in the SNMP-TARGET-MIB\
    \ module by multiple\n            managers.  In particular, it is useful when\
    \ modifying\n            the value of the snmpTargetAddrTagList object.\n    \
    \        The procedure for modifying the snmpTargetAddrTagList\n            object\
    \ is as follows:\n                1.  Retrieve the value of snmpTargetSpinLock\
    \ and\n                    of snmpTargetAddrTagList.\n                2.  Generate\
    \ a new value for snmpTargetAddrTagList.\n                3.  Set the value of\
    \ snmpTargetSpinLock to the\n                    retrieved value, and the value\
    \ of\n                    snmpTargetAddrTagList to the new value.  If\n      \
    \              the set fails for the snmpTargetSpinLock\n                    object,\
    \ go back to step 1.\"\n       ::= { snmpTargetObjects 1 }\n   snmpTargetAddrTable\
    \ OBJECT-TYPE\n       SYNTAX      SEQUENCE OF SnmpTargetAddrEntry\n       MAX-ACCESS\
    \  not-accessible\n       STATUS      current\n       DESCRIPTION\n          \
    \ \"A table of transport addresses to be used in the generation\n            of\
    \ SNMP messages.\"\n       ::= { snmpTargetObjects 2 }\n   snmpTargetAddrEntry\
    \ OBJECT-TYPE\n       SYNTAX      SnmpTargetAddrEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"A transport address\
    \ to be used in the generation\n            of SNMP operations.\n            Entries\
    \ in the snmpTargetAddrTable are created and\n            deleted using the snmpTargetAddrRowStatus\
    \ object.\"\n       INDEX { IMPLIED snmpTargetAddrName }\n       ::= { snmpTargetAddrTable\
    \ 1 }\n   SnmpTargetAddrEntry ::= SEQUENCE {\n       snmpTargetAddrName      \
    \   SnmpAdminString,\n       snmpTargetAddrTDomain      TDomain,\n       snmpTargetAddrTAddress\
    \     TAddress,\n       snmpTargetAddrTimeout      TimeInterval,\n       snmpTargetAddrRetryCount\
    \   Integer32,\n       snmpTargetAddrTagList      SnmpTagList,\n       snmpTargetAddrParams\
    \       SnmpAdminString,\n       snmpTargetAddrStorageType  StorageType,\n   \
    \    snmpTargetAddrRowStatus    RowStatus\n   }\n   snmpTargetAddrName OBJECT-TYPE\n\
    \       SYNTAX      SnmpAdminString (SIZE(1..32))\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The locally arbitrary,\
    \ but unique identifier associated\n            with this snmpTargetAddrEntry.\"\
    \n       ::= { snmpTargetAddrEntry 1 }\n   snmpTargetAddrTDomain OBJECT-TYPE\n\
    \       SYNTAX      TDomain\n       MAX-ACCESS  read-create\n       STATUS   \
    \   current\n       DESCRIPTION\n           \"This object indicates the transport\
    \ type of the address\n            contained in the snmpTargetAddrTAddress object.\"\
    \n       ::= { snmpTargetAddrEntry 2 }\n   snmpTargetAddrTAddress OBJECT-TYPE\n\
    \       SYNTAX      TAddress\n       MAX-ACCESS  read-create\n       STATUS  \
    \    current\n       DESCRIPTION\n           \"This object contains a transport\
    \ address.  The format of\n            this address depends on the value of the\n\
    \            snmpTargetAddrTDomain object.\"\n       ::= { snmpTargetAddrEntry\
    \ 3 }\n   snmpTargetAddrTimeout OBJECT-TYPE\n       SYNTAX      TimeInterval\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"This object should reflect the expected maximum round\n        \
    \    trip time for communicating with the transport address\n            defined\
    \ by this row.  When a message is sent to this\n            address, and a response\
    \ (if one is expected) is not\n            received within this time period, an\
    \ implementation\n            may assume that the response will not be delivered.\n\
    \            Note that the time interval that an application waits\n         \
    \   for a response may actually be derived from the value\n            of this\
    \ object.  The method for deriving the actual time\n            interval is implementation\
    \ dependent.  One such method\n            is to derive the expected round trip\
    \ time based on a\n            particular retransmission algorithm and on the\
    \ number\n            of timeouts which have occurred.  The type of message may\n\
    \            also be considered when deriving expected round trip\n          \
    \  times for retransmissions.  For example, if a message is\n            being\
    \ sent with a securityLevel that indicates both\n            authentication and\
    \ privacy, the derived value may be\n            increased to compensate for extra\
    \ processing time spent\n            during authentication and encryption processing.\"\
    \n       DEFVAL { 1500 }\n       ::= { snmpTargetAddrEntry 4 }\n   snmpTargetAddrRetryCount\
    \ OBJECT-TYPE\n       SYNTAX      Integer32 (0..255)\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This object specifies\
    \ a default number of retries to be\n            attempted when a response is\
    \ not received for a generated\n            message.  An application may provide\
    \ its own retry count,\n            in which case the value of this object is\
    \ ignored.\"\n       DEFVAL { 3 }\n       ::= { snmpTargetAddrEntry 5 }\n   snmpTargetAddrTagList\
    \ OBJECT-TYPE\n       SYNTAX      SnmpTagList\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This object contains\
    \ a list of tag values which are\n            used to select target addresses\
    \ for a particular\n            operation.\"\n       DEFVAL { \"\" }\n       ::=\
    \ { snmpTargetAddrEntry 6 }\n   snmpTargetAddrParams OBJECT-TYPE\n       SYNTAX\
    \      SnmpAdminString (SIZE(1..32))\n       MAX-ACCESS  read-create\n       STATUS\
    \      current\n       DESCRIPTION\n           \"The value of this object identifies\
    \ an entry in the\n            snmpTargetParamsTable.  The identified entry\n\
    \            contains SNMP parameters to be used when generating\n           \
    \ messages to be sent to this transport address.\"\n       ::= { snmpTargetAddrEntry\
    \ 7 }\n   snmpTargetAddrStorageType OBJECT-TYPE\n       SYNTAX      StorageType\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The storage type for this conceptual row.\"\n       DEFVAL { nonVolatile\
    \ }\n       ::= { snmpTargetAddrEntry 8 }\n   snmpTargetAddrRowStatus OBJECT-TYPE\n\
    \       SYNTAX      RowStatus\n       MAX-ACCESS  read-create\n       STATUS \
    \     current\n       DESCRIPTION\n           \"The status of this conceptual\
    \ row.\n            To create a row in this table, a manager must\n          \
    \  set this object to either createAndGo(4) or\n            createAndWait(5).\n\
    \            Until instances of all corresponding columns are\n            appropriately\
    \ configured, the value of the\n            corresponding instance of the snmpTargetAddrRowStatus\n\
    \            column is 'notReady'.\n            In particular, a newly created\
    \ row cannot be made\n            active until the corresponding instances of\n\
    \            snmpTargetAddrTDomain, snmpTargetAddrTAddress, and\n            snmpTargetAddrParams\
    \ have all been set.\n            The following objects may not be modified while\
    \ the\n            value of this object is active(1):\n                - snmpTargetAddrTDomain\n\
    \                - snmpTargetAddrTAddress\n            An attempt to set these\
    \ objects while the value of\n            snmpTargetAddrRowStatus is active(1)\
    \ will result in\n            an inconsistentValue error.\"\n       ::= { snmpTargetAddrEntry\
    \ 9 }\n   snmpTargetParamsTable OBJECT-TYPE\n       SYNTAX      SEQUENCE OF SnmpTargetParamsEntry\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"A table of SNMP target information to be used\n            in the\
    \ generation of SNMP messages.\"\n       ::= { snmpTargetObjects 3 }\n   snmpTargetParamsEntry\
    \ OBJECT-TYPE\n       SYNTAX      SnmpTargetParamsEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"A set of SNMP target\
    \ information.\n            Entries in the snmpTargetParamsTable are created and\n\
    \            deleted using the snmpTargetParamsRowStatus object.\"\n       INDEX\
    \ { IMPLIED snmpTargetParamsName }\n       ::= { snmpTargetParamsTable 1 }\n \
    \  SnmpTargetParamsEntry ::= SEQUENCE {\n       snmpTargetParamsName         \
    \  SnmpAdminString,\n       snmpTargetParamsMPModel        SnmpMessageProcessingModel,\n\
    \       snmpTargetParamsSecurityModel  SnmpSecurityModel,\n       snmpTargetParamsSecurityName\
    \   SnmpAdminString,\n       snmpTargetParamsSecurityLevel  SnmpSecurityLevel,\n\
    \       snmpTargetParamsStorageType    StorageType,\n       snmpTargetParamsRowStatus\
    \      RowStatus\n   }\n   snmpTargetParamsName OBJECT-TYPE\n       SYNTAX   \
    \   SnmpAdminString (SIZE(1..32))\n       MAX-ACCESS  not-accessible\n       STATUS\
    \      current\n       DESCRIPTION\n           \"The locally arbitrary, but unique\
    \ identifier associated\n            with this snmpTargetParamsEntry.\"\n    \
    \   ::= { snmpTargetParamsEntry 1 }\n   snmpTargetParamsMPModel OBJECT-TYPE\n\
    \       SYNTAX      SnmpMessageProcessingModel\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The Message Processing\
    \ Model to be used when generating\n            SNMP messages using this entry.\"\
    \n       ::= { snmpTargetParamsEntry 2 }\n   snmpTargetParamsSecurityModel OBJECT-TYPE\n\
    \       SYNTAX      SnmpSecurityModel (1..2147483647)\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The Security Model\
    \ to be used when generating SNMP\n             messages using this entry.  An\
    \ implementation may\n             choose to return an inconsistentValue error\
    \ if an\n             attempt is made to set this variable to a value\n      \
    \       for a security model which the implementation does\n             not support.\"\
    \n       ::= { snmpTargetParamsEntry 3 }\n   snmpTargetParamsSecurityName OBJECT-TYPE\n\
    \       SYNTAX      SnmpAdminString\n       MAX-ACCESS  read-create\n       STATUS\
    \      current\n       DESCRIPTION\n           \"The securityName which identifies\
    \ the Principal on\n            whose behalf SNMP messages will be generated using\n\
    \            this entry.\"\n       ::= { snmpTargetParamsEntry 4 }\n   snmpTargetParamsSecurityLevel\
    \ OBJECT-TYPE\n       SYNTAX      SnmpSecurityLevel\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The Level of Security\
    \ to be used when generating\n            SNMP messages using this entry.\"\n\
    \       ::= { snmpTargetParamsEntry 5 }\n   snmpTargetParamsStorageType OBJECT-TYPE\n\
    \       SYNTAX      StorageType\n       MAX-ACCESS  read-create\n       STATUS\
    \      current\n       DESCRIPTION\n           \"The storage type for this conceptual\
    \ row.\"\n       DEFVAL { nonVolatile }\n       ::= { snmpTargetParamsEntry 6\
    \ }\n   snmpTargetParamsRowStatus OBJECT-TYPE\n       SYNTAX      RowStatus\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The status of this conceptual row.\n            To create a row\
    \ in this table, a manager must\n            set this object to either createAndGo(4)\
    \ or\n            createAndWait(5).\n            Until instances of all corresponding\
    \ columns are\n            appropriately configured, the value of the\n      \
    \      corresponding instance of the snmpTargetParamsRowStatus\n            column\
    \ is 'notReady'.\n            In particular, a newly created row cannot be made\n\
    \            active until the corresponding\n            snmpTargetParamsMPModel,\n\
    \            snmpTargetParamsSecurityModel,\n            snmpTargetParamsSecurityName,\n\
    \            and snmpTargetParamsSecurityLevel have all been set.\n          \
    \  The following objects may not be modified while the\n            value of this\
    \ object is active(1):\n                - snmpTargetParamsMPModel\n          \
    \      - snmpTargetParamsSecurityModel\n                - snmpTargetParamsSecurityName\n\
    \                - snmpTargetParamsSecurityLevel\n            An attempt to set\
    \ these objects while the value of\n            snmpTargetParamsRowStatus is active(1)\
    \ will result in\n            an inconsistentValue error.\"\n       ::= { snmpTargetParamsEntry\
    \ 7 }\n   snmpUnavailableContexts OBJECT-TYPE\n       SYNTAX       Counter32\n\
    \       MAX-ACCESS   read-only\n       STATUS       current\n       DESCRIPTION\n\
    \           \"The total number of packets received by the SNMP\n            engine\
    \ which were dropped because the context\n            contained in the message\
    \ was unavailable.\"\n       ::= { snmpTargetObjects 4 }\n   snmpUnknownContexts\
    \ OBJECT-TYPE\n       SYNTAX       Counter32\n       MAX-ACCESS   read-only\n\
    \       STATUS       current\n       DESCRIPTION\n           \"The total number\
    \ of packets received by the SNMP\n            engine which were dropped because\
    \ the context\n            contained in the message was unknown.\"\n       ::=\
    \ { snmpTargetObjects 5 }\n   --\n   --\n   -- Conformance information\n   --\n\
    \   --\n   snmpTargetCompliances OBJECT IDENTIFIER ::=\n                     \
    \                      { snmpTargetConformance 1 }\n   snmpTargetGroups      OBJECT\
    \ IDENTIFIER ::=\n                                           { snmpTargetConformance\
    \ 2 }\n   --\n   --\n   -- Compliance statements\n   --\n   --\n   snmpTargetCommandResponderCompliance\
    \ MODULE-COMPLIANCE\n       STATUS      current\n       DESCRIPTION\n        \
    \   \"The compliance statement for SNMP entities which include\n            a\
    \ command responder application.\"\n       MODULE -- This Module\n           MANDATORY-GROUPS\
    \ { snmpTargetCommandResponderGroup }\n       ::= { snmpTargetCompliances 1 }\n\
    \   snmpTargetBasicGroup OBJECT-GROUP\n       OBJECTS {\n           snmpTargetSpinLock,\n\
    \           snmpTargetAddrTDomain,\n           snmpTargetAddrTAddress,\n     \
    \      snmpTargetAddrTagList,\n           snmpTargetAddrParams,\n           snmpTargetAddrStorageType,\n\
    \           snmpTargetAddrRowStatus,\n           snmpTargetParamsMPModel,\n  \
    \         snmpTargetParamsSecurityModel,\n           snmpTargetParamsSecurityName,\n\
    \           snmpTargetParamsSecurityLevel,\n           snmpTargetParamsStorageType,\n\
    \           snmpTargetParamsRowStatus\n       }\n       STATUS      current\n\
    \       DESCRIPTION\n           \"A collection of objects providing basic remote\n\
    \            configuration of management targets.\"\n       ::= { snmpTargetGroups\
    \ 1 }\n   snmpTargetResponseGroup OBJECT-GROUP\n       OBJECTS {\n           snmpTargetAddrTimeout,\n\
    \           snmpTargetAddrRetryCount\n       }\n       STATUS      current\n \
    \      DESCRIPTION\n           \"A collection of objects providing remote configuration\n\
    \            of management targets for applications which generate\n         \
    \   SNMP messages for which a response message would be\n            expected.\"\
    \n       ::= { snmpTargetGroups 2 }\n   snmpTargetCommandResponderGroup OBJECT-GROUP\n\
    \       OBJECTS {\n           snmpUnavailableContexts,\n           snmpUnknownContexts\n\
    \       }\n       STATUS      current\n       DESCRIPTION\n           \"A collection\
    \ of objects required for command responder\n            applications, used for\
    \ counting error conditions.\"\n       ::= { snmpTargetGroups 3 }\n   END\n"
- title: 4.2.  The Notification MIB Module
  contents:
  - "4.2.  The Notification MIB Module\n   The SNMP-NOTIFICATION-MIB module contains\
    \ objects for the remote\n   configuration of the parameters used by an SNMP entity\
    \ for the\n   generation of notifications.  It consists of three tables and\n\
    \   conformance/compliance statements.  The first table, the\n   snmpNotifyTable,\
    \ contains entries which select which entries in the\n   snmpTargetAddrTable should\
    \ be used for generating notifications, and\n   the type of notifications to be\
    \ generated.\n   The second table sparsely augments the snmpTargetAddrTable with\
    \ an\n   object which is used to associate a set of filters with a particular\n\
    \   management target.\n   The third table defines filters which are used to limit\
    \ the number of\n   notifications which are generated using particular management\n\
    \   targets.\n"
- title: 4.2.1.  Definitions
  contents:
  - "4.2.1.  Definitions\n   SNMP-NOTIFICATION-MIB DEFINITIONS ::= BEGIN\n   IMPORTS\n\
    \       MODULE-IDENTITY,\n       OBJECT-TYPE,\n       snmpModules\n          \
    \ FROM SNMPv2-SMI\n       RowStatus,\n       StorageType\n           FROM SNMPv2-TC\n\
    \       SnmpAdminString\n           FROM SNMP-FRAMEWORK-MIB\n       SnmpTagValue,\n\
    \       snmpTargetParamsName\n           FROM SNMP-TARGET-MIB\n       MODULE-COMPLIANCE,\n\
    \       OBJECT-GROUP\n           FROM SNMPv2-CONF;\n   snmpNotificationMIB MODULE-IDENTITY\n\
    \       LAST-UPDATED \"9808040000Z\"\n       ORGANIZATION \"IETF SNMPv3 Working\
    \ Group\"\n       CONTACT-INFO\n           \"WG-email:   snmpv3@lists.tislabs.com\n\
    \            Subscribe:  majordomo@lists.tislabs.com\n                       \
    \ In message body:  subscribe snmpv3\n            Chair:      Russ Mundy\n   \
    \                     Trusted Information Systems\n            Postal:     3060\
    \ Washington Rd\n                        Glenwood MD 21738\n                 \
    \       USA\n            EMail:      mundy@tislabs.com\n            Phone:   \
    \   +1-301-854-6889\n            Co-editor:  David B. Levi\n                 \
    \       SNMP Research, Inc.\n            Postal:     3001 Kimberlin Heights Road\n\
    \                        Knoxville, TN 37920-9716\n            EMail:      levi@snmp.com\n\
    \            Phone:      +1 423 573 1434\n            Co-editor:  Paul Meyer\n\
    \                        Secure Computing Corporation\n            Postal:   \
    \  2675 Long Lake Road\n                        Roseville, MN 55113\n        \
    \    EMail:      paul_meyer@securecomputing.com\n            Phone:      +1 651\
    \ 628 1592\n            Co-editor:  Bob Stewart\n                        Cisco\
    \ Systems, Inc.\n            Postal:     170 West Tasman Drive\n             \
    \           San Jose, CA 95134-1706\n            EMail:      bstewart@cisco.com\n\
    \            Phone:      +1 603 654 2686\"\n       DESCRIPTION\n           \"\
    This MIB module defines MIB objects which provide\n            mechanisms to remotely\
    \ configure the parameters\n            used by an SNMP entity for the generation\
    \ of\n            notifications.\"\n       REVISION    \"9808040000Z\"\n     \
    \  DESCRIPTION \"Clarifications, published as\n                    RFC2573\"\n\
    \       REVISION    \"9707140000Z\"\n       DESCRIPTION \"The initial revision,\
    \ published as RFC2273.\"\n       ::= { snmpModules 13 }\n   snmpNotifyObjects\
    \       OBJECT IDENTIFIER ::=\n                                             {\
    \ snmpNotificationMIB 1 }\n   snmpNotifyConformance   OBJECT IDENTIFIER ::=\n\
    \                                             { snmpNotificationMIB 3 }\n   --\n\
    \   --\n   -- The snmpNotifyObjects group\n   --\n   --\n   snmpNotifyTable OBJECT-TYPE\n\
    \       SYNTAX      SEQUENCE OF SnmpNotifyEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This table is used\
    \ to select management targets which should\n            receive notifications,\
    \ as well as the type of notification\n            which should be sent to each\
    \ selected management target.\"\n       ::= { snmpNotifyObjects 1 }\n   snmpNotifyEntry\
    \ OBJECT-TYPE\n       SYNTAX      SnmpNotifyEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"An entry in this\
    \ table selects a set of management targets\n            which should receive\
    \ notifications, as well as the type of\n            notification which should\
    \ be sent to each selected\n            management target.\n            Entries\
    \ in the snmpNotifyTable are created and\n            deleted using the snmpNotifyRowStatus\
    \ object.\"\n       INDEX { IMPLIED snmpNotifyName }\n       ::= { snmpNotifyTable\
    \ 1 }\n   SnmpNotifyEntry ::= SEQUENCE {\n       snmpNotifyName         SnmpAdminString,\n\
    \       snmpNotifyTag          SnmpTagValue,\n       snmpNotifyType         INTEGER,\n\
    \       snmpNotifyStorageType  StorageType,\n       snmpNotifyRowStatus    RowStatus\n\
    \   }\n   snmpNotifyName OBJECT-TYPE\n       SYNTAX      SnmpAdminString (SIZE(1..32))\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The locally arbitrary, but unique identifier associated\n      \
    \      with this snmpNotifyEntry.\"\n       ::= { snmpNotifyEntry 1 }\n   snmpNotifyTag\
    \ OBJECT-TYPE\n       SYNTAX      SnmpTagValue\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This object contains\
    \ a single tag value which is used\n            to select entries in the snmpTargetAddrTable.\
    \  Any entry\n            in the snmpTargetAddrTable which contains a tag value\n\
    \            which is equal to the value of an instance of this\n            object\
    \ is selected.  If this object contains a value\n            of zero length, no\
    \ entries are selected.\"\n       DEFVAL { \"\" }\n       ::= { snmpNotifyEntry\
    \ 2 }\n   snmpNotifyType OBJECT-TYPE\n       SYNTAX      INTEGER {\n         \
    \              trap(1),\n                       inform(2)\n                  \
    \ }\n       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"This object determines the type of notification to\n           \
    \ be generated for entries in the snmpTargetAddrTable\n            selected by\
    \ the corresponding instance of\n            snmpNotifyTag.  This value is only\
    \ used when\n            generating notifications, and is ignored when\n     \
    \       using the snmpTargetAddrTable for other purposes.\n            If the\
    \ value of this object is trap(1), then any\n            messages generated for\
    \ selected rows will contain\n            Unconfirmed-Class PDUs.\n          \
    \  If the value of this object is inform(2), then any\n            messages generated\
    \ for selected rows will contain\n            Confirmed-Class PDUs.\n        \
    \    Note that if an SNMP entity only supports\n            generation of Unconfirmed-Class\
    \ PDUs (and not\n            Confirmed-Class PDUs), then this object may be\n\
    \            read-only.\"\n       DEFVAL { trap }\n       ::= { snmpNotifyEntry\
    \ 3 }\n   snmpNotifyStorageType OBJECT-TYPE\n       SYNTAX      StorageType\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The storage type for this conceptual row.\"\n       DEFVAL { nonVolatile\
    \ }\n       ::= { snmpNotifyEntry 4 }\n   snmpNotifyRowStatus OBJECT-TYPE\n  \
    \     SYNTAX      RowStatus\n       MAX-ACCESS  read-create\n       STATUS   \
    \   current\n       DESCRIPTION\n           \"The status of this conceptual row.\n\
    \            To create a row in this table, a manager must\n            set this\
    \ object to either createAndGo(4) or\n            createAndWait(5).\"\n      \
    \ ::= { snmpNotifyEntry 5 }\n   snmpNotifyFilterProfileTable OBJECT-TYPE\n   \
    \    SYNTAX      SEQUENCE OF SnmpNotifyFilterProfileEntry\n       MAX-ACCESS \
    \ not-accessible\n       STATUS      current\n       DESCRIPTION\n           \"\
    This table is used to associate a notification filter\n            profile with\
    \ a particular set of target parameters.\"\n       ::= { snmpNotifyObjects 2 }\n\
    \   snmpNotifyFilterProfileEntry OBJECT-TYPE\n       SYNTAX      SnmpNotifyFilterProfileEntry\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"An entry in this table indicates the name of the filter\n      \
    \      profile to be used when generating notifications using\n            the\
    \ corresponding entry in the snmpTargetParamsTable.\n            Entries in the\
    \ snmpNotifyFilterProfileTable are created\n            and deleted using the\
    \ snmpNotifyFilterProfileRowStatus\n            object.\"\n       INDEX { IMPLIED\
    \ snmpTargetParamsName }\n       ::= { snmpNotifyFilterProfileTable 1 }\n   SnmpNotifyFilterProfileEntry\
    \ ::= SEQUENCE {\n       snmpNotifyFilterProfileName         SnmpAdminString,\n\
    \       snmpNotifyFilterProfileStorType     StorageType,\n       snmpNotifyFilterProfileRowStatus\
    \    RowStatus\n   }\n   snmpNotifyFilterProfileName OBJECT-TYPE\n       SYNTAX\
    \      SnmpAdminString (SIZE(1..32))\n       MAX-ACCESS  read-create\n       STATUS\
    \      current\n       DESCRIPTION\n           \"The name of the filter profile\
    \ to be used when generating\n            notifications using the corresponding\
    \ entry in the\n            snmpTargetAddrTable.\"\n       ::= { snmpNotifyFilterProfileEntry\
    \ 1 }\n   snmpNotifyFilterProfileStorType OBJECT-TYPE\n       SYNTAX      StorageType\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The storage type of this conceptual row.\"\n       DEFVAL { nonVolatile\
    \ }\n       ::= { snmpNotifyFilterProfileEntry 2 }\n   snmpNotifyFilterProfileRowStatus\
    \ OBJECT-TYPE\n       SYNTAX      RowStatus\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The status of this\
    \ conceptual row.\n            To create a row in this table, a manager must\n\
    \            set this object to either createAndGo(4) or\n            createAndWait(5).\n\
    \            Until instances of all corresponding columns are\n            appropriately\
    \ configured, the value of the\n            corresponding instance of the\n  \
    \          snmpNotifyFilterProfileRowStatus column is 'notReady'.\n          \
    \  In particular, a newly created row cannot be made\n            active until\
    \ the corresponding instance of\n            snmpNotifyFilterProfileName has been\
    \ set.\"\n       ::= { snmpNotifyFilterProfileEntry 3 }\n   snmpNotifyFilterTable\
    \ OBJECT-TYPE\n       SYNTAX      SEQUENCE OF SnmpNotifyFilterEntry\n       MAX-ACCESS\
    \  not-accessible\n       STATUS      current\n       DESCRIPTION\n          \
    \ \"The table of filter profiles.  Filter profiles are used\n            to determine\
    \ whether particular management targets should\n            receive particular\
    \ notifications.\n            When a notification is generated, it must be compared\n\
    \            with the filters associated with each management target\n       \
    \     which is configured to receive notifications, in order to\n            determine\
    \ whether it may be sent to each such management\n            target.\n      \
    \      A more complete discussion of notification filtering\n            can be\
    \ found in section 6. of [RFC2573].\"\n       ::= { snmpNotifyObjects 3 }\n  \
    \ snmpNotifyFilterEntry OBJECT-TYPE\n       SYNTAX      SnmpNotifyFilterEntry\n\
    \       MAX-ACCESS  not-accessible\n       STATUS      current\n       DESCRIPTION\n\
    \           \"An element of a filter profile.\n            Entries in the snmpNotifyFilterTable\
    \ are created and\n            deleted using the snmpNotifyFilterRowStatus object.\"\
    \n       INDEX {         snmpNotifyFilterProfileName,\n               IMPLIED\
    \ snmpNotifyFilterSubtree }\n       ::= { snmpNotifyFilterTable 1 }\n   SnmpNotifyFilterEntry\
    \ ::= SEQUENCE {\n       snmpNotifyFilterSubtree           OBJECT IDENTIFIER,\n\
    \       snmpNotifyFilterMask              OCTET STRING,\n       snmpNotifyFilterType\
    \              INTEGER,\n       snmpNotifyFilterStorageType       StorageType,\n\
    \       snmpNotifyFilterRowStatus         RowStatus\n   }\n   snmpNotifyFilterSubtree\
    \ OBJECT-TYPE\n       SYNTAX      OBJECT IDENTIFIER\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The MIB subtree\
    \ which, when combined with the corresponding\n            instance of snmpNotifyFilterMask,\
    \ defines a family of\n            subtrees which are included in or excluded\
    \ from the\n            filter profile.\"\n       ::= { snmpNotifyFilterEntry\
    \ 1 }\n   snmpNotifyFilterMask OBJECT-TYPE\n       SYNTAX      OCTET STRING (SIZE(0..16))\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The bit mask which, in combination with the corresponding\n    \
    \        instance of snmpNotifyFilterSubtree, defines a family of\n          \
    \  subtrees which are included in or excluded from the\n            filter profile.\n\
    \            Each bit of this bit mask corresponds to a\n            sub-identifier\
    \ of snmpNotifyFilterSubtree, with the\n            most significant bit of the\
    \ i-th octet of this octet\n            string value (extended if necessary, see\
    \ below)\n            corresponding to the (8*i - 7)-th sub-identifier, and\n\
    \            the least significant bit of the i-th octet of this\n           \
    \ octet string corresponding to the (8*i)-th\n            sub-identifier, where\
    \ i is in the range 1 through 16.\n            Each bit of this bit mask specifies\
    \ whether or not\n            the corresponding sub-identifiers must match when\n\
    \            determining if an OBJECT IDENTIFIER matches this\n            family\
    \ of filter subtrees; a '1' indicates that an\n            exact match must occur;\
    \ a '0' indicates 'wild card',\n            i.e., any sub-identifier value matches.\n\
    \            Thus, the OBJECT IDENTIFIER X of an object instance\n           \
    \ is contained in a family of filter subtrees if, for\n            each sub-identifier\
    \ of the value of\n            snmpNotifyFilterSubtree, either:\n            \
    \  the i-th bit of snmpNotifyFilterMask is 0, or\n              the i-th sub-identifier\
    \ of X is equal to the i-th\n              sub-identifier of the value of\n  \
    \            snmpNotifyFilterSubtree.\n            If the value of this bit mask\
    \ is M bits long and\n            there are more than M sub-identifiers in the\n\
    \            corresponding instance of snmpNotifyFilterSubtree,\n            then\
    \ the bit mask is extended with 1's to be the\n            required length.\n\
    \            Note that when the value of this object is the\n            zero-length\
    \ string, this extension rule results in\n            a mask of all-1's being\
    \ used (i.e., no 'wild card'),\n            and the family of filter subtrees\
    \ is the one\n            subtree uniquely identified by the corresponding\n \
    \           instance of snmpNotifyFilterSubtree.\"\n       DEFVAL { ''H }\n  \
    \     ::= { snmpNotifyFilterEntry 2 }\n   snmpNotifyFilterType OBJECT-TYPE\n \
    \      SYNTAX      INTEGER {\n                       included(1),\n          \
    \             excluded(2)\n                   }\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This object indicates\
    \ whether the family of filter subtrees\n            defined by this entry are\
    \ included in or excluded from a\n            filter.  A more detailed discussion\
    \ of the use of this\n            object can be found in section 6. of [RFC2573].\"\
    \n       DEFVAL { included }\n       ::= { snmpNotifyFilterEntry 3 }\n   snmpNotifyFilterStorageType\
    \ OBJECT-TYPE\n       SYNTAX      StorageType\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The storage type\
    \ of this conceptual row.\"\n       DEFVAL { nonVolatile }\n       ::= { snmpNotifyFilterEntry\
    \ 4 }\n   snmpNotifyFilterRowStatus OBJECT-TYPE\n       SYNTAX      RowStatus\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The status of this conceptual row.\n            To create a row\
    \ in this table, a manager must\n            set this object to either createAndGo(4)\
    \ or\n            createAndWait(5).\"\n       ::= { snmpNotifyFilterEntry 5 }\n\
    \   --\n   --\n   -- Conformance information\n   --\n   --\n   snmpNotifyCompliances\
    \ OBJECT IDENTIFIER ::=\n                                           { snmpNotifyConformance\
    \ 1 }\n   snmpNotifyGroups      OBJECT IDENTIFIER ::=\n                      \
    \                     { snmpNotifyConformance 2 }\n   --\n   --\n   -- Compliance\
    \ statements\n   --\n   --\n   snmpNotifyBasicCompliance MODULE-COMPLIANCE\n \
    \      STATUS      current\n       DESCRIPTION\n           \"The compliance statement\
    \ for minimal SNMP entities which\n            implement only SNMP Unconfirmed-Class\
    \ notifications and\n            read-create operations on only the snmpTargetAddrTable.\"\
    \n       MODULE SNMP-TARGET-MIB\n           MANDATORY-GROUPS { snmpTargetBasicGroup\
    \ }\n           OBJECT snmpTargetParamsMPModel\n           MIN-ACCESS    read-only\n\
    \           DESCRIPTION\n               \"Create/delete/modify access is not required.\"\
    \n           OBJECT snmpTargetParamsSecurityModel\n           MIN-ACCESS    read-only\n\
    \           DESCRIPTION\n               \"Create/delete/modify access is not required.\"\
    \n           OBJECT snmpTargetParamsSecurityName\n           MIN-ACCESS    read-only\n\
    \           DESCRIPTION\n               \"Create/delete/modify access is not required.\"\
    \n           OBJECT snmpTargetParamsSecurityLevel\n           MIN-ACCESS    read-only\n\
    \           DESCRIPTION\n               \"Create/delete/modify access is not required.\"\
    \n           OBJECT snmpTargetParamsStorageType\n           SYNTAX INTEGER {\n\
    \               readOnly(5)\n           }\n           MIN-ACCESS    read-only\n\
    \           DESCRIPTION\n               \"Create/delete/modify access is not required.\n\
    \                Support of the values other(1), volatile(2),\n              \
    \  nonVolatile(3), and permanent(4) is not required.\"\n           OBJECT snmpTargetParamsRowStatus\n\
    \           SYNTAX INTEGER {\n               active(1)\n           }\n       \
    \    MIN-ACCESS    read-only\n           DESCRIPTION\n               \"Create/delete/modify\
    \ access to the\n                snmpTargetParamsTable is not required.\n    \
    \            Support of the values notInService(2), notReady(3),\n           \
    \     createAndGo(4), createAndWait(5), and destroy(6) is\n                not\
    \ required.\"\n       MODULE -- This Module\n           MANDATORY-GROUPS { snmpNotifyGroup\
    \ }\n           OBJECT snmpNotifyTag\n           MIN-ACCESS    read-only\n   \
    \        DESCRIPTION\n               \"Create/delete/modify access is not required.\"\
    \n           OBJECT snmpNotifyType\n           SYNTAX INTEGER {\n            \
    \   trap(1)\n           }\n           MIN-ACCESS    read-only\n           DESCRIPTION\n\
    \               \"Create/delete/modify access is not required.\n             \
    \   Support of the value notify(2) is not required.\"\n           OBJECT snmpNotifyStorageType\n\
    \           SYNTAX INTEGER {\n               readOnly(5)\n           }\n     \
    \      MIN-ACCESS    read-only\n           DESCRIPTION\n               \"Create/delete/modify\
    \ access is not required.\n                Support of the values other(1), volatile(2),\n\
    \                nonVolatile(3), and permanent(4) is not required.\"\n       \
    \    OBJECT snmpNotifyRowStatus\n           SYNTAX INTEGER {\n               active(1)\n\
    \           }\n           MIN-ACCESS    read-only\n           DESCRIPTION\n  \
    \             \"Create/delete/modify access to the\n                snmpNotifyTable\
    \ is not required.\n                Support of the values notInService(2), notReady(3),\n\
    \                createAndGo(4), createAndWait(5), and destroy(6) is\n       \
    \         not required.\"\n       ::= { snmpNotifyCompliances 1 }\n   snmpNotifyBasicFiltersCompliance\
    \ MODULE-COMPLIANCE\n       STATUS      current\n       DESCRIPTION\n        \
    \   \"The compliance statement for SNMP entities which implement\n           \
    \ SNMP Unconfirmed-Class notifications with filtering, and\n            read-create\
    \ operations on all related tables.\"\n       MODULE SNMP-TARGET-MIB\n       \
    \    MANDATORY-GROUPS { snmpTargetBasicGroup }\n       MODULE -- This Module\n\
    \           MANDATORY-GROUPS { snmpNotifyGroup,\n                            \
    \  snmpNotifyFilterGroup }\n       ::= { snmpNotifyCompliances 2 }\n   snmpNotifyFullCompliance\
    \ MODULE-COMPLIANCE\n       STATUS      current\n       DESCRIPTION\n        \
    \   \"The compliance statement for SNMP entities which either\n            implement\
    \ only SNMP Confirmed-Class notifications, or both\n            SNMP Unconfirmed-Class\
    \ and Confirmed-Class notifications,\n            plus filtering and read-create\
    \ operations on all related\n            tables.\"\n       MODULE SNMP-TARGET-MIB\n\
    \           MANDATORY-GROUPS { snmpTargetBasicGroup,\n                       \
    \       snmpTargetResponseGroup }\n       MODULE -- This Module\n           MANDATORY-GROUPS\
    \ { snmpNotifyGroup,\n                              snmpNotifyFilterGroup }\n\
    \       ::= { snmpNotifyCompliances 3 }\n   snmpNotifyGroup OBJECT-GROUP\n   \
    \    OBJECTS {\n           snmpNotifyTag,\n           snmpNotifyType,\n      \
    \     snmpNotifyStorageType,\n           snmpNotifyRowStatus\n       }\n     \
    \  STATUS      current\n       DESCRIPTION\n           \"A collection of objects\
    \ for selecting which management\n            targets are used for generating\
    \ notifications, and the\n            type of notification to be generated for\
    \ each selected\n            management target.\"\n       ::= { snmpNotifyGroups\
    \ 1 }\n   snmpNotifyFilterGroup OBJECT-GROUP\n       OBJECTS {\n           snmpNotifyFilterProfileName,\n\
    \           snmpNotifyFilterProfileStorType,\n           snmpNotifyFilterProfileRowStatus,\n\
    \           snmpNotifyFilterMask,\n           snmpNotifyFilterType,\n        \
    \   snmpNotifyFilterStorageType,\n           snmpNotifyFilterRowStatus\n     \
    \  }\n       STATUS      current\n       DESCRIPTION\n           \"A collection\
    \ of objects providing remote configuration\n            of notification filters.\"\
    \n       ::= { snmpNotifyGroups 2 }\n   END\n"
- title: 4.3.  The Proxy MIB Module
  contents:
  - "4.3.  The Proxy MIB Module\n   The SNMP-PROXY-MIB module, which defines MIB objects\
    \ that provide\n   mechanisms to remotely configure the parameters used by an\
    \ SNMP\n   entity for proxy forwarding operations, contains a single table.\n\
    \   This table, snmpProxyTable, is used to define translations between\n   management\
    \ targets for use when forwarding messages.\n"
- title: 4.3.1.  Definitions
  contents:
  - "4.3.1.  Definitions\n   SNMP-PROXY-MIB DEFINITIONS ::= BEGIN\n   IMPORTS\n  \
    \     MODULE-IDENTITY,\n       OBJECT-TYPE,\n       snmpModules\n           FROM\
    \ SNMPv2-SMI\n       RowStatus,\n       StorageType\n           FROM SNMPv2-TC\n\
    \       SnmpEngineID,\n       SnmpAdminString\n           FROM SNMP-FRAMEWORK-MIB\n\
    \       SnmpTagValue\n           FROM SNMP-TARGET-MIB\n       MODULE-COMPLIANCE,\n\
    \       OBJECT-GROUP\n           FROM SNMPv2-CONF;\n   snmpProxyMIB MODULE-IDENTITY\n\
    \       LAST-UPDATED \"9808040000Z\"\n       ORGANIZATION \"IETF SNMPv3 Working\
    \ Group\"\n       CONTACT-INFO\n           \"WG-email:   snmpv3@lists.tislabs.com\n\
    \            Subscribe:  majordomo@lists.tislabs.com\n                       \
    \ In message body:  subscribe snmpv3\n            Chair:      Russ Mundy\n   \
    \                     Trusted Information Systems\n            Postal:     3060\
    \ Washington Rd\n                        Glenwood MD 21738\n                 \
    \       USA\n            EMail:      mundy@tislabs.com\n            Phone:   \
    \   +1-301-854-6889\n            Co-editor:  David B. Levi\n                 \
    \       SNMP Research, Inc.\n            Postal:     3001 Kimberlin Heights Road\n\
    \                        Knoxville, TN 37920-9716\n            EMail:      levi@snmp.com\n\
    \            Phone:      +1 423 573 1434\n            Co-editor:  Paul Meyer\n\
    \                        Secure Computing Corporation\n            Postal:   \
    \  2675 Long Lake Road\n                        Roseville, MN 55113\n        \
    \    EMail:      paul_meyer@securecomputing.com\n            Phone:      +1 651\
    \ 628 1592\n            Co-editor:  Bob Stewart\n                        Cisco\
    \ Systems, Inc.\n            Postal:     170 West Tasman Drive\n             \
    \           San Jose, CA 95134-1706\n            EMail:      bstewart@cisco.com\n\
    \            Phone:      +1 603 654 2686\"\n       DESCRIPTION\n           \"\
    This MIB module defines MIB objects which provide\n            mechanisms to remotely\
    \ configure the parameters\n            used by a proxy forwarding application.\"\
    \n       REVISION    \"9808040000Z\"\n       DESCRIPTION \"Clarifications, published\
    \ as\n                    RFC2573.\"\n       REVISION    \"9707140000Z\"\n   \
    \    DESCRIPTION \"The initial revision, published as RFC2273.\"\n       ::= {\
    \ snmpModules 14 }\n   snmpProxyObjects        OBJECT IDENTIFIER ::= { snmpProxyMIB\
    \ 1 }\n   snmpProxyConformance    OBJECT IDENTIFIER ::= { snmpProxyMIB 3 }\n \
    \  --\n   --\n   -- The snmpProxyObjects group\n   --\n   --\n   snmpProxyTable\
    \ OBJECT-TYPE\n       SYNTAX      SEQUENCE OF SnmpProxyEntry\n       MAX-ACCESS\
    \  not-accessible\n       STATUS      current\n       DESCRIPTION\n          \
    \ \"The table of translation parameters used by proxy forwarder\n            applications\
    \ for forwarding SNMP messages.\"\n       ::= { snmpProxyObjects 2 }\n   snmpProxyEntry\
    \ OBJECT-TYPE\n       SYNTAX      SnmpProxyEntry\n       MAX-ACCESS  not-accessible\n\
    \       STATUS      current\n       DESCRIPTION\n           \"A set of translation\
    \ parameters used by a proxy forwarder\n            application for forwarding\
    \ SNMP messages.\n            Entries in the snmpProxyTable are created and deleted\n\
    \            using the snmpProxyRowStatus object.\"\n       INDEX { IMPLIED snmpProxyName\
    \ }\n       ::= { snmpProxyTable 1 }\n   SnmpProxyEntry ::= SEQUENCE {\n     \
    \  snmpProxyName               SnmpAdminString,\n       snmpProxyType        \
    \       INTEGER,\n       snmpProxyContextEngineID    SnmpEngineID,\n       snmpProxyContextName\
    \        SnmpAdminString,\n       snmpProxyTargetParamsIn     SnmpAdminString,\n\
    \       snmpProxySingleTargetOut    SnmpAdminString,\n       snmpProxyMultipleTargetOut\
    \  SnmpTagValue,\n       snmpProxyStorageType        StorageType,\n       snmpProxyRowStatus\
    \          RowStatus\n   }\n   snmpProxyName OBJECT-TYPE\n       SYNTAX      SnmpAdminString\
    \ (SIZE(1..32))\n       MAX-ACCESS  not-accessible\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The locally arbitrary, but unique identifier\
    \ associated\n            with this snmpProxyEntry.\"\n       ::= { snmpProxyEntry\
    \ 1 }\n   snmpProxyType OBJECT-TYPE\n       SYNTAX      INTEGER {\n          \
    \             read(1),\n                       write(2),\n                   \
    \    trap(3),\n                       inform(4)\n                   }\n      \
    \ MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n  \
    \         \"The type of message that may be forwarded using\n            the translation\
    \ parameters defined by this entry.\"\n       ::= { snmpProxyEntry 2 }\n   snmpProxyContextEngineID\
    \ OBJECT-TYPE\n       SYNTAX      SnmpEngineID\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The contextEngineID\
    \ contained in messages that\n            may be forwarded using the translation\
    \ parameters\n            defined by this entry.\"\n       ::= { snmpProxyEntry\
    \ 3 }\n   snmpProxyContextName OBJECT-TYPE\n       SYNTAX      SnmpAdminString\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"The contextName contained in messages that may be\n            forwarded\
    \ using the translation parameters defined\n            by this entry.\n     \
    \       This object is optional, and if not supported, the\n            contextName\
    \ contained in a message is ignored when\n            selecting an entry in the\
    \ snmpProxyTable.\"\n       ::= { snmpProxyEntry 4 }\n   snmpProxyTargetParamsIn\
    \ OBJECT-TYPE\n       SYNTAX      SnmpAdminString\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This object selects\
    \ an entry in the snmpTargetParamsTable.\n            The selected entry is used\
    \ to determine which row of the\n            snmpProxyTable to use for forwarding\
    \ received messages.\"\n       ::= { snmpProxyEntry 5 }\n   snmpProxySingleTargetOut\
    \ OBJECT-TYPE\n       SYNTAX      SnmpAdminString\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"This object selects\
    \ a management target defined in the\n            snmpTargetAddrTable (in the\
    \ SNMP-TARGET-MIB).  The\n            selected target is defined by an entry in\
    \ the\n            snmpTargetAddrTable whose index value (snmpTargetAddrName)\n\
    \            is equal to this object.\n            This object is only used when\
    \ selection of a single\n            target is required (i.e. when forwarding\
    \ an incoming\n            read or write request).\"\n       ::= { snmpProxyEntry\
    \ 6 }\n   snmpProxyMultipleTargetOut OBJECT-TYPE\n       SYNTAX      SnmpTagValue\n\
    \       MAX-ACCESS  read-create\n       STATUS      current\n       DESCRIPTION\n\
    \           \"This object selects a set of management targets defined\n      \
    \      in the snmpTargetAddrTable (in the SNMP-TARGET-MIB).\n            This\
    \ object is only used when selection of multiple\n            targets is required\
    \ (i.e. when forwarding an incoming\n            notification).\"\n       ::=\
    \ { snmpProxyEntry 7 }\n   snmpProxyStorageType OBJECT-TYPE\n       SYNTAX   \
    \   StorageType\n       MAX-ACCESS  read-create\n       STATUS      current\n\
    \       DESCRIPTION\n           \"The storage type of this conceptual row.\"\n\
    \       DEFVAL { nonVolatile }\n       ::= { snmpProxyEntry 8 }\n   snmpProxyRowStatus\
    \ OBJECT-TYPE\n       SYNTAX      RowStatus\n       MAX-ACCESS  read-create\n\
    \       STATUS      current\n       DESCRIPTION\n           \"The status of this\
    \ conceptual row.\n            To create a row in this table, a manager must\n\
    \            set this object to either createAndGo(4) or\n            createAndWait(5).\n\
    \            The following objects may not be modified while the\n           \
    \ value of this object is active(1):\n                - snmpProxyType\n      \
    \          - snmpProxyContextEngineID\n                - snmpProxyContextName\n\
    \                - snmpProxyTargetParamsIn\n                - snmpProxySingleTargetOut\n\
    \                - snmpProxyMultipleTargetOut\"\n       ::= { snmpProxyEntry 9\
    \ }\n   --\n   --\n   -- Conformance information\n   --\n   --\n   snmpProxyCompliances\
    \ OBJECT IDENTIFIER ::=\n                                            { snmpProxyConformance\
    \ 1 }\n   snmpProxyGroups      OBJECT IDENTIFIER ::=\n                       \
    \                     { snmpProxyConformance 2 }\n   --\n   --\n   -- Compliance\
    \ statements\n   --\n   --\n   snmpProxyCompliance MODULE-COMPLIANCE\n       STATUS\
    \      current\n       DESCRIPTION\n           \"The compliance statement for\
    \ SNMP entities which include\n            a proxy forwarding application.\"\n\
    \       MODULE SNMP-TARGET-MIB\n           MANDATORY-GROUPS { snmpTargetBasicGroup,\n\
    \                              snmpTargetResponseGroup }\n       MODULE -- This\
    \ Module\n           MANDATORY-GROUPS { snmpProxyGroup }\n       ::= { snmpProxyCompliances\
    \ 1 }\n   snmpProxyGroup OBJECT-GROUP\n       OBJECTS {\n           snmpProxyType,\n\
    \           snmpProxyContextEngineID,\n           snmpProxyContextName,\n    \
    \       snmpProxyTargetParamsIn,\n           snmpProxySingleTargetOut,\n     \
    \      snmpProxyMultipleTargetOut,\n           snmpProxyStorageType,\n       \
    \    snmpProxyRowStatus\n       }\n       STATUS      current\n       DESCRIPTION\n\
    \           \"A collection of objects providing remote configuration of\n    \
    \        management target translation parameters for use by\n            proxy\
    \ forwarder applications.\"\n       ::= { snmpProxyGroups 3 }\n   END\n"
- title: 5.  Identification of Management Targets in Notification Originators
  contents:
  - "5.  Identification of Management Targets in Notification Originators\n   This\
    \ section describes the mechanisms used by a notification\n   originator application\
    \ when using the MIB module described in this\n   document to determine the set\
    \ of management targets to be used when\n   generating a notification.\n   A notification\
    \ originator uses each entry in the snmpNotifyTable to\n   find the management\
    \ targets to be used for generating notifications.\n   Each active entry in this\
    \ table identifies zero or more entries in\n   the snmpTargetAddrTable.  Any entry\
    \ in the snmpTargetAddrTable whose\n   snmpTargetAddrTagList object contains a\
    \ tag value which is equal to a\n   value of snmpNotifyTag is selected by the\
    \ snmpNotifyEntry which\n   contains that instance of snmpNotifyTag.  Note that\
    \ a particular\n   snmpTargetAddrEntry may be selected by multiple entries in\
    \ the\n   snmpNotifyTable, resulting in multiple notifications being generated\n\
    \   using that snmpTargetAddrEntry.\n   Each snmpTargetAddrEntry contains a pointer\
    \ to the\n   snmpTargetParamsTable (snmpTargetAddrParams).  This pointer selects\
    \ a\n   set of SNMP parameters to be used for generating notifications.  If\n\
    \   the selected entry in the snmpTargetParamsTable does not exist, the\n   management\
    \ target is not used to generate notifications.\n   The decision as to whether\
    \ a notification should contain an\n   Unconfirmed-Class or a Confirmed-Class\
    \ PDU is determined by the value\n   of the snmpNotifyType object.  If the value\
    \ of this object is\n   trap(1), the notification should contain an Unconfirmed-Class\
    \ PDU.\n   If the value of this object is inform(2), then the notification\n \
    \  should contain a Confirmed-Class PDU, and the timeout time and number\n   of\
    \ retries for the notification are the value of\n   snmpTargetAddrTimeout and\
    \ snmpTargetAddrRetryCount.  Note that the\n   exception to these rules is when\
    \ the snmpTargetParamsMPModel object\n   indicates an SNMP version which supports\
    \ a different PDU version.  In\n   this case, the notification may be sent using\
    \ a different PDU type\n   ([COEX] defines the PDU type in the case where the\
    \ outgoing SNMP\n   version is SNMPv1).\n"
- title: 6.  Notification Filtering
  contents:
  - "6.  Notification Filtering\n   This section describes the mechanisms used by\
    \ a notification\n   originator application when using the MIB module described\
    \ in this\n   document to filter generation of notifications.\n   A notification\
    \ originator uses the snmpNotifyFilterTable to filter\n   notifications.  A notification\
    \ filter profile may be associated with\n   a particular entry in the snmpTargetParamsTable.\
    \  The associated\n   filter profile is identified by an entry in the\n   snmpNotifyFilterProfileTable\
    \ whose index is equal to the index of the\n   entry in the snmpTargetParamsTable.\
    \  If no such entry exists in the\n   snmpNotifyFilterProfileTable, no filtering\
    \ is performed for that\n   management target.\n   If such an entry does exist,\
    \ the value of snmpNotifyFilterProfileName\n   of the entry is compared with the\
    \ corresponding portion of the index\n   of all active entries in the snmpNotifyFilterTable.\
    \  All such entries\n   for which this comparison results in an exact match are\
    \ used for\n   filtering a notification generated using the associated\n   snmpTargetParamsEntry.\
    \  If no such entries exist, no filtering is\n   performed, and a notification\
    \ may be sent to the management target.\n   Otherwise, if matching entries do\
    \ exist, a notification may be sent\n   if the NOTIFICATION-TYPE OBJECT IDENTIFIER\
    \ of the notification (this\n   is the value of the element of the variable bindings\
    \ whose name is\n   snmpTrapOID.0, i.e., the second variable binding) is specifically\n\
    \   included, and none of the object instances to be included in the\n   variable-bindings\
    \ of the notification are specifically excluded by\n   the matching entries.\n\
    \   Each set of snmpNotifyFilterTable entries is divided into two\n   collections\
    \ of filter subtrees:  the included filter subtrees, and\n   the excluded filter\
    \ subtrees.  The snmpNotifyFilterType object\n   defines the collection to which\
    \ each matching entry belongs.\n   To determine whether a particular notification\
    \ name or object\n   instance is excluded by the set of matching entries, compare\
    \ the\n   notification name's or object instance's OBJECT IDENTIFIER with each\n\
    \   of the matching entries.  For a notification name, if none match,\n   then\
    \ the notification name is considered excluded, and the\n   notification should\
    \ not be sent to this management target.  For an\n   object instance, if none\
    \ match, the object instance is considered\n   included, and the notification\
    \ may be sent to this management target.\n   If one or more match, then the notification\
    \ name or object instance\n   is included or excluded, according to the value\
    \ of\n   snmpNotifyFilterType in the entry whose value of\n   snmpNotifyFilterSubtree\
    \ has the most sub-identifiers.  If multiple\n   entries match and have the same\
    \ number of sub-identifiers, then the\n   lexicographically greatest instance\
    \ of snmpNotifyFilterType among\n   those which match determines the inclusion\
    \ or exclusion.\n   A notification name or object instance's OBJECT IDENTIFIER\
    \ X matches\n   an entry in the snmpNotifyFilterTable when the number of sub-\n\
    \   identifiers in X is at least as many as in the value of\n   snmpNotifyFilterSubtree\
    \ for the entry, and each sub-identifier in the\n   value of snmpNotifyFilterSubtree\
    \ matches its corresponding sub-\n   identifier in X.  Two sub-identifiers match\
    \ either if the\n   corresponding bit of snmpNotifyFilterMask is zero (the 'wild\
    \ card'\n   value), or if the two sub-identifiers are equal.\n"
- title: 7.  Management Target Translation in Proxy Forwarder Applications
  contents:
  - "7.  Management Target Translation in Proxy Forwarder Applications\n   This section\
    \ describes the mechanisms used by a proxy forwarder\n   application when using\
    \ the MIB module described in this document to\n   translate incoming management\
    \ target information into outgoing\n   management target information for the purpose\
    \ of forwarding messages.\n   There are actually two mechanisms a proxy forwarder\
    \ may use, one for\n   forwarding request messages, and one for forwarding notification\n\
    \   messages.\n"
- title: 7.1.  Management Target Translation for Request Forwarding
  contents:
  - "7.1.  Management Target Translation for Request Forwarding\n   When forwarding\
    \ request messages, the proxy forwarder will select a\n   single entry in the\
    \ snmpProxyTable.  To select this entry, it will\n   perform the following comparisons:\n\
    \     -  The snmpProxyType must be read(1) if the request is a Read-\n       \
    \ Class PDU.  The snmpProxyType must be write(2) if the request is\n        a\
    \ Write-Class PDU.\n     -  The contextEngineID must equal the snmpProxyContextEngineID\n\
    \        object.\n     -  If the snmpProxyContextName object is supported, it\
    \ must equal\n        the contextName.\n     -  The snmpProxyTargetParamsIn object\
    \ identifies an entry in the\n        snmpTargetParamsTable.  The messageProcessingModel,\n\
    \        securityLevel, security model, and securityName must match the\n    \
    \    values of snmpTargetParamsMPModel,\n        snmpTargetParamsSecurityModel,\
    \ snmpTargetParamsSecurityName, and\n        snmpTargetParamsSecurityLevel of\
    \ the identified entry in the\n        snmpTargetParamsTable.\n   There may be\
    \ multiple entries in the snmpProxyTable for which these\n   comparisons succeed.\
    \  The entry whose snmpProxyName has the\n   lexicographically smallest value\
    \ and for which the comparisons\n   succeed will be selected by the proxy forwarder.\n\
    \   The outgoing management target information is identified by the value\n  \
    \ of the snmpProxySingleTargetOut object of the selected entry.  This\n   object\
    \ identifies an entry in the snmpTargetAddrTable.  The\n   identified entry in\
    \ the snmpTargetAddrTable also contains a reference\n   to the snmpTargetParamsTable\
    \ (snmpTargetAddrParams).  If either the\n   identified entry in the snmpTargetAddrTable\
    \ does not exist, or the\n   identified entry in the snmpTargetParamsTable does\
    \ not exist, then\n   this snmpProxyEntry does not identify valid forwarding information,\n\
    \   and the proxy forwarder should attempt to identify another row.\n   If there\
    \ is no entry in the snmpProxyTable for which all of the\n   conditions above\
    \ may be met, then there is no appropriate forwarding\n   information, and the\
    \ proxy forwarder should take appropriate actions.\n   Otherwise, The snmpTargetAddrTDomain,\
    \ snmpTargetAddrTAddress,\n   snmpTargetAddrTimeout, and snmpTargetRetryCount\
    \ of the identified\n   snmpTargetAddrEntry, and the snmpTargetParamsMPModel,\n\
    \   snmpTargetParamsSecurityModel, snmpTargetParamsSecurityName, and\n   snmpTargetParamsSecurityLevel\
    \ of the identified snmpTargetParamsEntry\n   are used as the destination management\
    \ target.\n"
- title: 7.2.  Management Target Translation for Notification Forwarding
  contents:
  - "7.2.  Management Target Translation for Notification Forwarding\n   When forwarding\
    \ notification messages, the proxy forwarder will\n   select multiple entries\
    \ in the snmpProxyTable.  To select these\n   entries, it will perform the following\
    \ comparisons:\n     -  The snmpProxyType must be trap(3) if the notification\
    \ is an\n        Unconfirmed-Class PDU.  The snmpProxyType must be inform(4) if\n\
    \        the request is a Confirmed-Class PDU.\n     -  The contextEngineID must\
    \ equal the snmpProxyContextEngineID\n        object.\n     -  If the snmpProxyContextName\
    \ object is supported, it must equal\n        the contextName.\n     -  The snmpProxyTargetParamsIn\
    \ object identifies an entry in the\n        snmpTargetParamsTable.  The messageProcessingModel,\n\
    \        securityLevel, security model, and securityName must match the\n    \
    \    values of snmpTargetParamsMPModel,\n        snmpTargetParamsSecurityModel,\
    \ snmpTargetParamsSecurityName, and\n        snmpTargetParamsSecurityLevel of\
    \ the identified entry in the\n        snmpTargetParamsTable.\n   All entries\
    \ for which these conditions are met are selected.  The\n   snmpProxyMultipleTargetOut\
    \ object of each such entry is used to\n   select a set of entries in the snmpTargetAddrTable.\
    \  Any\n   snmpTargetAddrEntry whose snmpTargetAddrTagList object contains a tag\n\
    \   value equal to the value of snmpProxyMultipleTargetOut, and whose\n   snmpTargetAddrParams\
    \ object references an existing entry in the\n   snmpTargetParamsTable, is selected\
    \ as a destination for the forwarded\n   notification.\n"
- title: 8.  Intellectual Property
  contents:
  - "8.  Intellectual Property\n   The IETF takes no position regarding the validity\
    \ or scope of any\n   intellectual property or other rights that might be claimed\
    \ to\n   pertain to the implementation or use of the technology described in\n\
    \   this document or the extent to which any license under such rights\n   might\
    \ or might not be available; neither does it represent that it\n   has made any\
    \ effort to identify any such rights.  Information on the\n   IETF's procedures\
    \ with respect to rights in standards-track and\n   standards-related documentation\
    \ can be found in BCP-11.  Copies of\n   claims of rights made available for publication\
    \ and any assurances of\n   licenses to be made available, or the result of an\
    \ attempt made to\n   obtain a general license or permission for the use of such\n\
    \   proprietary rights by implementors or users of this specification can\n  \
    \ be obtained from the IETF Secretariat.\n   The IETF invites any interested party\
    \ to bring to its attention any\n   copyrights, patents or patent applications,\
    \ or other proprietary\n   rights which may cover technology that may be required\
    \ to practice\n   this standard.  Please address the information to the IETF Executive\n\
    \   Director.\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   This document is the result of the efforts of the SNMPv3\
    \ Working\n   Group.  Some special thanks are in order to the following SNMPv3\
    \ WG\n   members:\n     Harald Tveit Alvestrand (Maxware)\n     Dave Battle (SNMP\
    \ Research, Inc.)\n     Alan Beard (Disney Worldwide Services)\n     Paul Berrevoets\
    \ (SWI Systemware/Halcyon Inc.)\n     Martin Bjorklund (Ericsson)\n     Uri Blumenthal\
    \ (IBM T.J. Watson Research Center)\n     Jeff Case (SNMP Research, Inc.)\n  \
    \   John Curran (BBN)\n     Mike Daniele (Compaq Computer Corporation)\n     T.\
    \ Max Devlin (Eltrax Systems)\n     John Flick (Hewlett Packard)\n     Rob Frye\
    \ (MCI)\n     Wes Hardaker (U.C.Davis, Information Technology - D.C.A.S.)\n  \
    \   David Harrington (Cabletron Systems Inc.)\n     Lauren Heintz (BMC Software,\
    \ Inc.)\n     N.C. Hien (IBM T.J. Watson Research Center)\n     Michael Kirkham\
    \ (InterWorking Labs, Inc.)\n     Dave Levi (SNMP Research, Inc.)\n     Louis\
    \ A Mamakos (UUNET Technologies Inc.)\n     Joe Marzot (Nortel Networks)\n   \
    \  Paul Meyer (Secure Computing Corporation)\n     Keith McCloghrie (Cisco Systems)\n\
    \     Bob Moore (IBM)\n     Russ Mundy (TIS Labs at Network Associates)\n    \
    \ Bob Natale (ACE*COMM Corporation)\n     Mike O'Dell (UUNET Technologies Inc.)\n\
    \     Dave Perkins (DeskTalk)\n     Peter Polkinghorne (Brunel University)\n \
    \    Randy Presuhn (BMC Software, Inc.)\n     David Reeder (TIS Labs at Network\
    \ Associates)\n     David Reid (SNMP Research, Inc.)\n     Aleksey Romanov (Quality\
    \ Quorum)\n     Shawn Routhier (Epilogue)\n     Juergen Schoenwaelder (TU Braunschweig)\n\
    \     Bob Stewart (Cisco Systems)\n     Mike Thatcher (Independent Consultant)\n\
    \     Bert Wijnen (IBM T.J. Watson Research Center)\n   The document is based\
    \ on recommendations of the IETF Security and\n   Administrative Framework Evolution\
    \ for SNMP Advisory Team. Members of\n   that Advisory Team were:\n     David\
    \ Harrington (Cabletron Systems Inc.)\n     Jeff Johnson (Cisco Systems)\n   \
    \  David Levi (SNMP Research Inc.)\n     John Linn (Openvision)\n     Russ Mundy\
    \ (Trusted Information Systems) chair\n     Shawn Routhier (Epilogue)\n     Glenn\
    \ Waters (Nortel)\n     Bert Wijnen (IBM T. J. Watson Research Center)\n   As\
    \ recommended by the Advisory Team and the SNMPv3 Working Group\n   Charter, the\
    \ design incorporates as much as practical from previous\n   RFCs and drafts.\
    \ As a result, special thanks are due to the authors\n   of previous designs known\
    \ as SNMPv2u and SNMPv2*:\n     Jeff Case (SNMP Research, Inc.)\n     David Harrington\
    \ (Cabletron Systems Inc.)\n     David Levi (SNMP Research, Inc.)\n     Keith\
    \ McCloghrie (Cisco Systems)\n     Brian O'Keefe (Hewlett Packard)\n     Marshall\
    \ T. Rose (Dover Beach Consulting)\n     Jon Saperia (BGS Systems Inc.)\n    \
    \ Steve Waldbusser (International Network Services)\n     Glenn W. Waters (Bell-Northern\
    \ Research Ltd.)\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   The SNMP applications described in this document\
    \ typically have\n   direct access to MIB instrumentation.  Thus, it is very important\n\
    \   that these applications be strict in their application of access\n   control\
    \ as described in this document.\n   In addition, there may be some types of notification\
    \ generator\n   applications which, rather than accessing MIB instrumentation\
    \ using\n   access control, will obtain MIB information through other means (such\n\
    \   as from a command line).  The implementors and users of such\n   applications\
    \ must be responsible for not divulging MIB information\n   that normally would\
    \ be inaccessible due to access control.\n   Finally, the MIBs described in this\
    \ document contain potentially\n   sensitive information.  A security administrator\
    \ may wish to limit\n   access to these MIBs.\n"
- title: 11.  References
  contents:
  - "11.  References\n   [COEX]      The SNMPv3 Working Group, Frye, R.,Levi, D.,\
    \ Wijnen, B.,\n               \"Coexistence between Version 1, Version 2, and\
    \ Version 3\n               of the Internet-standard Network Management Framework\"\
    ,\n               Work in Progress.\n   [RFC1157]   Case, J., Fedor, M., Schoffstall,\
    \ M. and J. Davin,\n               \"Simple Network Management Protocol\", STD\
    \ 15, RFC 1157,\n               May 1990.\n   [RFC1213]   McCloghrie, K. and M.\
    \ Rose, Editors, \"Management\n               Information Base for Network Management\
    \ of TCP/IP-based\n               internets: MIB-II\", STD 17, RFC 1213, March\
    \ 1991.\n   [RFC2578]   McCloghrie, K., Perkins, D. and J. Schoenwaelder,\n  \
    \             \"Structure of Management Information Version 2 (SMIv2)\",\n   \
    \            STD 58, RFC 2578, April 1999.\n   [RFC2579]   McCloghrie, K., Perkins,\
    \ D. and J.  Schoenwaelder,\n               \"Textual Conventions for SMIv2\"\
    , STD 58, RFC 2579, April\n               1999.\n   [RFC1905]   SNMPv2 Working\
    \ Group, Case, J., McCloghrie, K., Rose, M.\n               and S.  Waldbusser,\
    \ \"Protocol Operations for Version 2 of\n               the Simple Network Management\
    \ Protocol (SNMPv2)\",\n               RFC1905, January 1996.\n   [RFC1907]  \
    \ SNMPv2 Working Group, Case, J., McCloghrie, K., Rose, M.\n               and\
    \ S.  Waldbusser, \"Management Information Base for\n               Version 2\
    \ of the Simple Network Management Protocol\n               (SNMPv2)\", RFC1905,\
    \ January 1996.\n   [RFC1908]   SNMPv2 Working Group, Case, J., McCloghrie, K.,\
    \ Rose, M.\n               and S.  Waldbusser, \"Coexistence between Version 1\
    \ and\n               Version 2 of the Internet-standard Network Management\n\
    \               Framework\", RFC1905, January 1996.\n   [RFC2119]   Bradner, S.,\
    \ \"Key words for use in RFCs to Indicate\n               Requirement Levels\"\
    , BCP 14, RFC2119, March 1997.\n   [RFC2571] Harrington, D., Presuhn, R. and B.\
    \ Wijnen, \"An Architecture\n               for Describing SNMP Management Frameworks\"\
    , RFC 2571,\n               April 1999.\n   [RFC2572]   Case, J., Harrington,\
    \ D., Presuhn, R. and B. Wijnen,\n               \"Message Processing and Dispatching\
    \ for the Simple\n               Network Management Protocol (SNMP)\", RFC 2572,\
    \ April\n               1999.\n   [RFC2575]  Wijnen, B., Presuhn, R. and K. McCloghrie,\
    \ \"View-based\n               Access Control Model for the Simple Network Management\n\
    \               Protocol (SNMP)\", RFC 2575, April 1999.\n   [RFC2573] Levi, D.\
    \ B., Meyer, P. and B. Stewart, \"SNMP Applications\",\n               RFC 2573,\
    \ April 1999.\n"
- title: 12.  Editors' Addresses
  contents:
  - "12.  Editors' Addresses\n   David B. Levi\n   SNMP Research, Inc.\n   3001 Kimberlin\
    \ Heights Road\n   Knoxville, TN 37920-9716\n   U.S.A.\n   Phone: +1 423 573 1434\n\
    \   EMail: levi@snmp.com\n   Paul Meyer\n   Secure Computing Corporation\n   2675\
    \ Long Lake Road\n   Roseville, MN 55113\n   U.S.A.\n   Phone: +1 651 628 1592\n\
    \   EMail: paul_meyer@securecomputing.com\n   Bob Stewart\n   Cisco Systems, Inc.\n\
    \   170 West Tasman Drive\n   San Jose, CA 95134-1706\n   U.S.A.\n   Phone: +1\
    \ 603 654 2686\n   EMail: bstewart@cisco.com\n"
- title: APPENDIX A - Trap Configuration Example
  contents:
  - "APPENDIX A - Trap Configuration Example\n   This section describes an example\
    \ configuration for a Notification\n   Generator application which implements\
    \ the snmpNotifyBasicCompliance\n   level.  The example configuration specifies\
    \ that the Notification\n   Generator should send notifications to 3 separate\
    \ managers, using\n   authentication and no privacy for the first 2 managers,\
    \ and using\n   both authentication and privacy for the third manager.\n   The\
    \ configuration consists of three rows in the snmpTargetAddrTable,\n   and two\
    \ rows in the snmpTargetTable.\n          snmpTargetAddrName         SnmpAdminString,\n\
    \          snmpTargetAddrTDomain      TDomain,\n          snmpTargetAddrTAddress\
    \     TAddress,\n          snmpTargetAddrTimeout      TimeInterval,\n        \
    \  snmpTargetAddrRetryCount   Integer32,\n          snmpTargetAddrTagList    \
    \  SnmpAdminString,\n          snmpTargetAddrParams       SnmpAdminString,\n \
    \         snmpTargetAddrStorageType  StorageType,\n          snmpTargetAddrRowStatus\
    \    RowStatus\n        * snmpTargetAddrName        = \"addr1\"\n          snmpTargetAddrTDomain\
    \     = snmpUDPDomain\n          snmpTargetAddrTAddress    = 128.1.2.3/162\n \
    \         snmpTargetAddrTagList     = \"group1\"\n          snmpTargetAddrParams\
    \      = \"AuthNoPriv-joe\"\n          snmpTargetAddrStorageType = readOnly(5)\n\
    \          snmpTargetAddrRowStatus   = active(1)\n        * snmpTargetAddrName\
    \        = \"addr2\"\n          snmpTargetAddrTDomain     = snmpUDPDomain\n  \
    \        snmpTargetAddrTAddress    = 128.2.4.6/162\n          snmpTargetAddrTagList\
    \     = \"group1\"\n          snmpTargetAddrParams      = \"AuthNoPriv-joe\"\n\
    \          snmpTargetAddrStorageType = readOnly(5)\n          snmpTargetAddrRowStatus\
    \   = active(1)\n        * snmpTargetAddrName        = \"addr3\"\n          snmpTargetAddrTDomain\
    \     = snmpUDPDomain\n          snmpTargetAddrTAddress    = 128.1.2.3/162\n \
    \         snmpTargetAddrTagList     = \"group2\"\n          snmpTargetAddrParams\
    \      = \"AuthPriv-bob\"\n          snmpTargetAddrStorageType = readOnly(5)\n\
    \          snmpTargetAddrRowStatus   = active(1)\n        * snmpTargetParamsName\
    \                   = \"AuthNoPriv-joe\"\n          snmpTargetParamsMPModel  \
    \              = 3m\n          snmpTargetParamsSecurityModel          = 3 (USM)\n\
    \          snmpTargetParamsSecurityName           = \"joe\"\n          snmpTargetParamsSecurityLevel\
    \          = authNoPriv(2)\n          snmpTargetParamsStorageType            =\
    \ readOnly(5)\n          snmpTargetParamsRowStatus              = active(1)\n\
    \        * snmpTargetParamsName                   = \"AuthPriv-bob\"\n       \
    \   snmpTargetParamsMPModel                = 3\n          snmpTargetParamsSecurityModel\
    \          = 3 (USM)\n          snmpTargetParamsSecurityName           = \"bob\"\
    \n          snmpTargetParamsSecurityLevel          = authPriv(3)\n          snmpTargetParamsStorageType\
    \            = readOnly(5)\n          snmpTargetParamsRowStatus              =\
    \ active(1)\n        * snmpNotifyName         = \"group1\"\n          snmpNotifyTag\
    \          = \"group1\"\n          snmpNotifyType         = trap(1)\n        \
    \  snmpNotifyStorageType  = readOnly(5)\n          snmpNotifyRowStatus    = active(1)\n\
    \        * snmpNotifyName         = \"group2\"\n          snmpNotifyTag      \
    \    = \"group2\"\n          snmpNotifyType         = trap(1)\n          snmpNotifyStorageType\
    \  = readOnly(5)\n          snmpNotifyRowStatus    = active(1)\n   These entries\
    \ define two groups of management targets.  The first\n   group contains two management\
    \ targets:\n                                first target      second target\n\
    \                                ------------      -------------\n       messageProcessingModel\
    \   SNMPv3            SNMPv3\n                securityModel   3 (USM)        \
    \   3 (USM)\n                 securityName   \"joe\"             \"joe\"\n   \
    \             securityLevel   authNoPriv(2)     authNoPriv(2)\n              transportDomain\
    \   snmpUDPDomain     snmpUDPDomain\n             transportAddress   128.1.2.3/162\
    \     128.2.4.6/162\n   And the second group contains a single management target:\n\
    \       messageProcessingModel   SNMPv3\n                securityLevel   authPriv(3)\n\
    \                securityModel   3 (USM)\n                 securityName   \"bob\"\
    \n              transportDomain   snmpUDPDomain\n             transportAddress\
    \   128.1.5.9/162\n"
- title: Appendix B.  Full Copyright Statement
  contents:
  - "Appendix B.  Full Copyright Statement\n   Copyright (C) The Internet Society\
    \ (1999).  All Rights Reserved.\n   This document and translations of it may be\
    \ copied and furnished to\n   others, and derivative works that comment on or\
    \ otherwise explain it\n   or assist in its implementation may be prepared, copied,\
    \ published\n   and distributed, in whole or in part, without restriction of any\n\
    \   kind, provided that the above copyright notice and this paragraph are\n  \
    \ included on all such copies and derivative works.  However, this\n   document\
    \ itself may not be modified in any way, such as by removing\n   the copyright\
    \ notice or references to the Internet Society or other\n   Internet organizations,\
    \ except as needed for the purpose of\n   developing Internet standards in which\
    \ case the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by\n   the Internet Society.\n"
