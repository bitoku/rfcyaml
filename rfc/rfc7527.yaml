- title: __initial_text__
  contents:
  - '                  Enhanced Duplicate Address Detection

    '
- title: Abstract
  contents:
  - "Abstract\n   IPv6 Loopback Suppression and Duplicate Address Detection (DAD)\
    \ are\n   discussed in Appendix A of RFC 4862.  That specification mentions a\n\
    \   hardware-assisted mechanism to detect looped back DAD messages.  If\n   hardware\
    \ cannot suppress looped back DAD messages, a software\n   solution is required.\
    \  Several service provider communities have\n   expressed a need for automated\
    \ detection of looped back Neighbor\n   Discovery (ND) messages used by DAD. \
    \ This document includes\n   mitigation techniques and outlines the Enhanced DAD\
    \ algorithm to\n   automate the detection of looped back IPv6 ND messages used\
    \ by DAD.\n   For network loopback tests, the Enhanced DAD algorithm allows IPv6\
    \ to\n   self-heal after a loopback is placed and removed.  Further, for\n   certain\
    \ access networks, this document automates resolving a specific\n   duplicate\
    \ address conflict.  This document updates RFCs 4429, 4861,\n   and 4862.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7527.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   2\n     1.1.  Requirements Language . . . . . . . . . . . . . .\
    \ . . . .   3\n     1.2.  Terminology . . . . . . . . . . . . . . . . . . . .\
    \ . . .   3\n   2.  Problem Statement . . . . . . . . . . . . . . . . . . . .\
    \ . .   4\n   3.  Operational Mitigation Options  . . . . . . . . . . . . . .\
    \ .   4\n     3.1.  Disable DAD on an Interface . . . . . . . . . . . . . . .\
    \   4\n     3.2.  Dynamic Disable/Enable of DAD Using Layer 2 Protocol  . .  \
    \ 5\n     3.3.  Operational Considerations  . . . . . . . . . . . . . . .   5\n\
    \   4.  The Enhanced DAD Algorithm  . . . . . . . . . . . . . . . . .   6\n  \
    \   4.1.  Processing Rules for Senders  . . . . . . . . . . . . . .   6\n    \
    \ 4.2.  Processing Rules for Receivers  . . . . . . . . . . . . .   7\n     4.3.\
    \  Changes to RFC 4861 . . . . . . . . . . . . . . . . . . .   7\n   5.  Action\
    \ to Perform on Detecting a Genuine Duplicate  . . . . .   7\n   6.  Security\
    \ Considerations . . . . . . . . . . . . . . . . . . .   8\n   7.  Normative References\
    \  . . . . . . . . . . . . . . . . . . . .   8\n   Acknowledgements  . . . . .\
    \ . . . . . . . . . . . . . . . . . . .   9\n   Authors' Addresses  . . . . .\
    \ . . . . . . . . . . . . . . . . . .  10\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   IPv6 Loopback Suppression and Duplicate Address Detection\
    \ (DAD) are\n   discussed in Appendix A of [RFC4862].  That specification mentions\
    \ a\n   hardware-assisted mechanism to detect looped back DAD messages.  If\n\
    \   hardware cannot suppress looped back DAD messages, a software\n   solution\
    \ is required.  One specific DAD message is the Neighbor\n   Solicitation (NS),\
    \ specified in [RFC4861].  The NS is issued by the\n   network interface of an\
    \ IPv6 node for DAD.  Another message involved\n   in DAD is the Neighbor Advertisement\
    \ (NA).  The Enhanced DAD\n   algorithm specified in this document focuses on\
    \ detecting an NS\n   looped back to the transmitting interface during the DAD\
    \ operation.\n   Detecting a looped back NA does not solve the looped back DAD\n\
    \   problem.  Detection of any other looped back ND messages during the\n   DAD\
    \ operation is outside the scope of this document.  This document\n   also includes\
    \ a section on mitigation that discusses means already\n   available to mitigate\
    \ the DAD loopback problem.  This document\n   updates RFCs 4429, 4861, and 4862.\
    \  It updates RFCs 4429 and 4862 to\n   use the Enhanced DAD algorithm to detect\
    \ looped back DAD probes, and\n   it updates RFC 4861 as described in Section\
    \ 4.3 below.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   o  DAD-failed state - Duplication Address Detection failure\
    \ as\n      specified in [RFC4862].  Note even Optimistic DAD as specified in\n\
    \      [RFC4429] can fail due to a looped back DAD probe.  This document\n   \
    \   covers looped back detection for Optimistic DAD as well.\n   o  Looped back\
    \ message - also referred to as a reflected message.\n      The message sent by\
    \ the sender is received by the sender due to\n      the network or an upper-layer\
    \ protocol on the sender looping the\n      message back.\n   o  Loopback - A\
    \ function in which the router's Layer 3 interface (or\n      the circuit to which\
    \ the router's interface is connected) is\n      looped back or connected to itself.\
    \  Loopback causes packets sent\n      by the interface to be received by the\
    \ interface and results in\n      interface unavailability for regular data traffic\
    \ forwarding.  See\n      more details in Section 9.1 of [RFC2328].  The Loopback\
    \ function\n      is commonly used in an interface context to gain information\
    \ on\n      the quality of the interface, by employing mechanisms such as\n  \
    \    ICMPv6 pings and bit-error tests.  In a circuit context, this\n      function\
    \ is used in wide-area environments including optical Dense\n      Wavelength\
    \ Division Multiplexing (DWDM) and Synchronous Optical\n      Network / Synchronous\
    \ Digital Hierarchy (SONET/SDH) for fault\n      isolation (e.g., by placing a\
    \ loopback at different geographic\n      locations along the path of a wide-area\
    \ circuit to help locate a\n      circuit fault).  The Loopback function may be\
    \ employed locally or\n      remotely.\n   o  NS(DAD) - shorthand notation to\
    \ denote a Neighbor Solicitation\n      (NS) (as specified in [RFC4861]) that\
    \ has an unspecified IPv6\n      source address and was issued during DAD.\n"
- title: 2.  Problem Statement
  contents:
  - "2.  Problem Statement\n   Service providers have reported a problem with DAD\
    \ that arises in a\n   few scenarios.  In the first scenario, loopback testing\
    \ for\n   troubleshooting purposes is underway on a circuit connected to an\n\
    \   IPv6-enabled interface on a router.  The interface issues an NS for\n   the\
    \ IPv6 link-local address DAD.  The NS is reflected back to the\n   router interface\
    \ due to the loopback condition of the circuit, and\n   the router interface enters\
    \ a DAD-failed state.  After the loopback\n   condition is removed, IPv4 will\
    \ return to operation without further\n   manual intervention.  However, IPv6\
    \ will remain in DAD-failed state\n   until manual intervention on the router\
    \ restores IPv6 to operation.\n   In the second scenario, two broadband modems\
    \ are served by the same\n   service provider and terminate to the same Layer\
    \ 3 interface on an\n   IPv6-enabled access concentrator.  In this case, the two\
    \ modems'\n   Ethernet interfaces are also connected to a common local network\n\
    \   (collision domain).  The access concentrator serving the modems is\n   the\
    \ first-hop IPv6 router for the modems and issues a NS(DAD) message\n   for the\
    \ IPv6 link-local address of its Layer 3 interface.  The NS\n   message reaches\
    \ one modem first, and this modem sends the message to\n   the local network,\
    \ where the second modem receives the message and\n   then forwards it back to\
    \ the access concentrator.  The looped back NS\n   message causes the network\
    \ interface on the access concentrator to be\n   in a DAD-failed state.  Such\
    \ a network interface typically serves\n   thousands of broadband modems, and\
    \ all would have their IPv6\n   connectivity affected until the DAD-failed state\
    \ is cleared.\n   Additionally, it may be difficult for the user of the access\n\
    \   concentrator to determine the source of the looped back DAD message.\n   Thus,\
    \ in order to avoid IPv6 outages that can potentially affect\n   multiple users,\
    \ there is a need for automated detection of looped\n   back NS messages during\
    \ DAD operations by a node.\n   Note: In both examples above, the IPv6 link-local\
    \ address DAD\n   operation fails due to a looped back DAD probe.  However, the\
    \ problem\n   of a looped back DAD probe exists for any IPv6 address type including\n\
    \   global addresses.\n"
- title: 3.  Operational Mitigation Options
  contents:
  - "3.  Operational Mitigation Options\n   Two mitigation options are described below\
    \ that do not require any\n   change to existing implementations.\n"
- title: 3.1.  Disable DAD on an Interface
  contents:
  - "3.1.  Disable DAD on an Interface\n   One can disable DAD on an interface so\
    \ that there are no NS(DAD)\n   messages issued.  While this mitigation may be\
    \ the simplest, the\n   mitigation has three drawbacks: 1) care is needed when\
    \ making such\n   configuration changes on point-to-point interfaces, 2) this\
    \ is a one-\n   time manual configuration on each interface, and 3) genuine\n\
    \   duplicates on the link will not be detected.\n   A service provider router,\
    \ such as an access concentrator, or network\n   core router, SHOULD support the\
    \ DAD deactivation per interface.\n"
- title: 3.2.  Dynamic Disable/Enable of DAD Using Layer 2 Protocol
  contents:
  - "3.2.  Dynamic Disable/Enable of DAD Using Layer 2 Protocol\n   Some Layer 2 protocols\
    \ include provisions to detect the existence of\n   a loopback on an interface\
    \ circuit, usually by comparing protocol\n   data sent and received.  For example,\
    \ the Point-to-Point Protocol\n   (PPP) uses a magic number (Section 6.4 of [RFC1661])\
    \ to detect a\n   loopback on an interface.\n   When a Layer 2 protocol detects\
    \ that a loopback is present on an\n   interface circuit, the device MUST temporarily\
    \ disable DAD on the\n   interface.  When the protocol detects that a loopback\
    \ is no longer\n   present (or the interface state has changed), the device MUST\n\
    \   (re-)enable DAD on that interface.\n   This mitigation has several benefits.\
    \  It leverages the Layer 2\n   protocol's built-in hardware loopback detection\
    \ capability, if\n   available.  Being a hardware solution, it scales better than\
    \ the\n   software solution proposed in this document.  This mitigation also\n\
    \   scales better since it relies on an event-driven model that requires\n   no\
    \ additional state or timer.  This may be significant on devices\n   with hundreds\
    \ or thousands of interfaces that may be in loopback for\n   long periods of time\
    \ (e.g., awaiting turn-up).\n   Detecting looped back DAD messages using a Layer\
    \ 2 protocol SHOULD be\n   enabled by default, and it MUST be a configurable option\
    \ if the Layer\n   2 technology provides means for detecting loopback messages\
    \ on an\n   interface circuit.\n"
- title: 3.3.  Operational Considerations
  contents:
  - "3.3.  Operational Considerations\n   The mitigation options discussed above do\
    \ not require the devices on\n   both ends of the circuit to support the mitigation\
    \ functionality\n   simultaneously and do not propose any capability negotiation.\
    \  They\n   are effective for unidirectional circuit or interface loopback (i.e.\n\
    \   the loopback is placed in one direction on the circuit, rendering the\n  \
    \ other direction nonoperational), but they may not be effective for a\n   bidirectional\
    \ loopback (i.e., the loopback is placed in both\n   directions of the circuit\
    \ interface, so as to identify the faulty\n   segment).  This is because, unless\
    \ both ends followed a mitigation\n   option specified in this document, the noncompliant\
    \ device would\n   follow current behavior and disable IPv6 on that interface\
    \ due to DAD\n   until manual intervention restores it.\n"
- title: 4.  The Enhanced DAD Algorithm
  contents:
  - "4.  The Enhanced DAD Algorithm\n   The Enhanced DAD algorithm covers detection\
    \ of a looped back NS(DAD)\n   message.  This document proposes use of a random\
    \ number in the Nonce\n   Option specified in SEcure Neighbor Discovery (SEND)\
    \ [RFC3971].  Note\n   [RFC3971] does not provide a recommendation for pseudorandom\n\
    \   functions.  Pseudorandom functions are covered in [RFC4086].  Since a\n  \
    \ nonce is used only once, the NS(DAD) for each IPv6 address of an\n   interface\
    \ uses a different nonce.  Additional details of the\n   algorithm are included\
    \ in Section 4.1.\n   If there is a collision because two nodes used the same\
    \ Target\n   Address in their NS(DAD) and generated the same random nonce, then\n\
    \   the algorithm will incorrectly detect a looped back NS(DAD) when a\n   genuine\
    \ address collision has occurred.  Since each looped back\n   NS(DAD) event is\
    \ logged to system management, the administrator of\n   the network will have\
    \ access to the information necessary to\n   intervene manually.  Also, because\
    \ the nodes will have detected what\n   appear to be looped back NS(DAD) messages,\
    \ they will continue to\n   probe, and it is unlikely that they will choose the\
    \ same nonce the\n   second time (assuming quality random number generators).\n\
    \   The algorithm is capable of detecting any ND solicitation (NS and\n   Router\
    \ Solicitation) or advertisement (NA and Router Advertisement)\n   that is looped\
    \ back.  However, there may be increased implementation\n   complexity and memory\
    \ usage for the sender node to store a nonce and\n   nonce-related state for all\
    \ ND messages.  Therefore, this document\n   does not recommend using the algorithm\
    \ outside of the DAD operation\n   by an interface on a node.\n"
- title: 4.1.  Processing Rules for Senders
  contents:
  - "4.1.  Processing Rules for Senders\n   If a node has been configured to use the\
    \ Enhanced DAD algorithm, when\n   sending an NS(DAD) for a tentative or optimistic\
    \ interface address,\n   the sender MUST generate a random nonce associated with\
    \ the interface\n   address, MUST store the nonce internally, and MUST include\
    \ the nonce\n   in the Nonce option included in the NS(DAD).  If the interface\
    \ does\n   not receive any DAD failure indications within RetransTimer\n   milliseconds\
    \ (see [RFC4861]) after having sent DupAddrDetectTransmits\n   Neighbor Solicitations,\
    \ the interface moves the Target Address to the\n   assigned state.\n   If any\
    \ probe is looped back within RetransTimer milliseconds after\n   having sent\
    \ DupAddrDetectTransmits NS(DAD) messages, the interface\n   continues with another\
    \ MAX_MULTICAST_SOLICIT number of NS(DAD)\n   messages transmitted RetransTimer\
    \ milliseconds apart.  Section 2 of\n   [RFC3971] defines a single-use nonce,\
    \ so each Enhanced DAD probe uses\n   a different nonce.  If no probe is looped\
    \ back within RetransTimer\n   milliseconds after MAX_MULTICAST_SOLICIT NS(DAD)\
    \ messages are sent,\n   the probing stops.  The probing MAY be stopped via manual\n\
    \   intervention.  When probing is stopped, the interface moves the\n   Target\
    \ Address to the assigned state.\n"
- title: 4.2.  Processing Rules for Receivers
  contents:
  - "4.2.  Processing Rules for Receivers\n   If the node has been configured to use\
    \ the Enhanced DAD algorithm and\n   an interface on the node receives any NS(DAD)\
    \ message where the\n   Target Address matches the interface address (in tentative\
    \ or\n   optimistic state), the receiver compares the nonce included in the\n\
    \   message, with any stored nonce on the receiving interface.  If a\n   match\
    \ is found, the node SHOULD log a system management message,\n   SHOULD update\
    \ any statistics counter, and MUST drop the received\n   message.  If the received\
    \ NS(DAD) message includes a nonce and no\n   match is found with any stored nonce,\
    \ the node SHOULD log a system\n   management message for a DAD-failed state and\
    \ SHOULD update any\n   statistics counter.\n"
- title: 4.3.  Changes to RFC 4861
  contents:
  - "4.3.  Changes to RFC 4861\n   The following text is appended to the Source Address\
    \ definition in\n   Section 4.3 of [RFC4861]:\n   If a node has been configured\
    \ to use the Enhanced DAD algorithm, an\n   NS with an unspecified source address\
    \ adds the Nonce option to the\n   message and implements the state machine of\
    \ the Enhanced DAD\n   algorithm.\n   The following text is appended to the RetransTimer\
    \ variable\n   description in Section 6.3.2 of [RFC4861]:\n   The RetransTimer\
    \ MAY be overridden by a link-specific document if a\n   node supports the Enhanced\
    \ DAD algorithm.\n"
- title: 5.  Action to Perform on Detecting a Genuine Duplicate
  contents:
  - "5.  Action to Perform on Detecting a Genuine Duplicate\n   As described in the\
    \ paragraphs above, the nonce can also serve to\n   detect genuine duplicates\
    \ even when the network has potential for\n   looping back ND messages.  When\
    \ a genuine duplicate is detected, the\n   node follows the manual intervention\
    \ specified in Section 5.4.5 of\n   [RFC4862].  However, in certain cases, if\
    \ the genuine duplicate\n   matches the tentative or optimistic IPv6 address of\
    \ a network\n   interface of the access concentrator, additional automated action\
    \ is\n   recommended.\n   Some networks follow a trust model where a trusted router\
    \ serves\n   untrusted IPv6 host nodes.  Operators of such networks have a desire\n\
    \   to take automated action if a network interface of the trusted router\n  \
    \ has a tentative or optimistic address duplicated by a host.  One\n   example\
    \ of a type of access network is cable broadband deployment\n   where the access\
    \ concentrator is the first-hop IPv6 router to\n   multiple broadband modems and\
    \ supports proxying of DAD messages.  The\n   network interface on the access\
    \ concentrator initiates DAD for an\n   IPv6 address and detects a genuine duplicate\
    \ due to receiving an\n   NS(DAD) or an NA message.  On detecting such a duplicate,\
    \ the access\n   concentrator SHOULD log a system management message, drop the\n\
    \   received ND message, and block the modem on whose Layer 2 service\n   identifier\
    \ the duplicate NS(DAD) or NA message was received.  Any\n   other network that\
    \ follows the same trust model MAY use the automated\n   action proposed in this\
    \ section.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document does not improve or reduce the\
    \ security posture of\n   [RFC4862].  The nonce can be exploited by a rogue deliberately\n\
    \   changing the nonce to fail the looped back detection specified by the\n  \
    \ Enhanced DAD algorithm.  SEND is recommended to circumvent this\n   exploit.\
    \  Additionally, the nonce does not protect against the DoS\n   caused by a rogue\
    \ node replying by a fake NA to all DAD probes.  SEND\n   is recommended to circumvent\
    \ this exploit also.  Disabling DAD has an\n   obvious security issue before a\
    \ remote node on the link can issue\n   reflected NS(DAD) messages.  Again, SEND\
    \ is recommended for this\n   exploit.  Source Address Validation Improvement\
    \ (SAVI) [RFC6620] also\n   protects against various attacks by on-link rogues.\n"
- title: 7.  Normative References
  contents:
  - "7.  Normative References\n   [RFC1661]  Simpson, W., Ed., \"The Point-to-Point\
    \ Protocol (PPP)\", STD\n              51, RFC 1661, July 1994,\n            \
    \  <http://www.rfc-editor.org/info/rfc1661>.\n   [RFC2119]  Bradner, S., \"Key\
    \ words for use in RFCs to Indicate\n              Requirement Levels\", BCP 14,\
    \ RFC 2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC2328]  Moy, J., \"OSPF Version 2\", STD 54, RFC 2328, April 1998,\n  \
    \            <http://www.rfc-editor.org/info/rfc2328>.\n   [RFC3971]  Arkko, J.,\
    \ Ed., Kempf, J., Zill, B., and P. Nikander,\n              \"SEcure Neighbor\
    \ Discovery (SEND)\", RFC 3971, March 2005,\n              <http://www.rfc-editor.org/info/rfc3971>.\n\
    \   [RFC4086]  Eastlake 3rd, D., Schiller, J., and S. Crocker,\n             \
    \ \"Randomness Requirements for Security\", BCP 106, RFC 4086,\n             \
    \ June 2005, <http://www.rfc-editor.org/info/rfc4086>.\n   [RFC4429]  Moore, N.,\
    \ \"Optimistic Duplicate Address Detection (DAD)\n              for IPv6\", RFC\
    \ 4429, April 2006,\n              <http://www.rfc-editor.org/info/rfc4429>.\n\
    \   [RFC4861]  Narten, T., Nordmark, E., Simpson, W., and H. Soliman,\n      \
    \        \"Neighbor Discovery for IP version 6 (IPv6)\", RFC 4861,\n         \
    \     September 2007, <http://www.rfc-editor.org/info/rfc4861>.\n   [RFC4862]\
    \  Thomson, S., Narten, T., and T. Jinmei, \"IPv6 Stateless\n              Address\
    \ Autoconfiguration\", RFC 4862, September 2007,\n              <http://www.rfc-editor.org/info/rfc4862>.\n\
    \   [RFC6620]  Nordmark, E., Bagnulo, M., and E. Levy-Abegnoli, \"FCFS\n     \
    \         SAVI: First-Come, First-Served Source Address Validation\n         \
    \     Improvement for Locally Assigned IPv6 Addresses\", RFC\n              6620,\
    \ May 2012, <http://www.rfc-editor.org/info/rfc6620>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks (in alphabetical order by first name) to Adrian Farrel,\
    \ Benoit\n   Claise, Bernie Volz, Brian Haberman, Dmitry Anipko, Eric Levy-\n\
    \   Abegnoli, Eric Vyncke, Erik Nordmark, Fred Templin, Hilarie Orman,\n   Jouni\
    \ Korhonen, Michael Sinatra, Ole Troan, Pascal Thubert, Ray\n   Hunter, Suresh\
    \ Krishnan, Tassos Chatzithomaoglou, and Tim Chown for\n   their guidance and\
    \ review of the document.  Thanks to Thomas Narten\n   for encouraging this work.\
    \  Thanks to Steinar Haug and Scott Beuker\n   for describing some of the use\
    \ cases.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Rajiv Asati\n   Cisco Systems, Inc.\n   7025 Kit Creek\
    \ road\n   Research Triangle Park, NC  27709-4987\n   United States\n   EMail:\
    \ rajiva@cisco.com\n   URI:   http://www.cisco.com/\n   Hemant Singh\n   Cisco\
    \ Systems, Inc.\n   1414 Massachusetts Ave.\n   Boxborough, MA  01719\n   United\
    \ States\n   Phone: +1 978 936 1622\n   EMail: shemant@cisco.com\n   URI:   http://www.cisco.com/\n\
    \   Wes Beebee\n   Cisco Systems, Inc.\n   1414 Massachusetts Ave.\n   Boxborough,\
    \ MA  01719\n   United States\n   Phone: +1 978 936 2030\n   EMail: wbeebee@cisco.com\n\
    \   URI:   http://www.cisco.com/\n   Carlos Pignataro\n   Cisco Systems, Inc.\n\
    \   7200-12 Kit Creek Road\n   Research Triangle Park, NC  27709\n   United States\n\
    \   EMail: cpignata@cisco.com\n   URI:   http://www.cisco.com/\n   Eli Dart\n\
    \   Lawrence Berkeley National Laboratory\n   1 Cyclotron Road, Berkeley, CA 94720\n\
    \   United States\n   EMail: dart@es.net\n   URI:   http://www.es.net/\n   Wesley\
    \ George\n   Time Warner Cable\n   13820 Sunrise Valley Drive\n   Herndon, VA\
    \  20171\n   United States\n   EMail: wesley.george@twcable.com\n"
