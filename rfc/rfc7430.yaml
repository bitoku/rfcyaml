- title: __initial_text__
  contents:
  - "          Analysis of Residual Threats and Possible Fixes for\n             \
    \            Multipath TCP (MPTCP)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document analyzes the residual threats for Multipath TCP (MPTCP)\n\
    \   and explores possible solutions to address them.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7430.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  ADD_ADDR Attack . . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n     2.1.  Possible Security Enhancements to Prevent This Attack\
    \ . .  10\n   3.  DoS Attack on MP_JOIN . . . . . . . . . . . . . . . . . . .\
    \ .  11\n     3.1.  Possible Security Enhancements to Prevent This Attack . .\
    \  12\n   4.  SYN Flooding Amplification  . . . . . . . . . . . . . . . . .  12\n\
    \     4.1.  Possible Security Enhancements to Prevent This Attack . .  13\n  \
    \ 5.  Eavesdropper in the Initial Handshake . . . . . . . . . . . .  13\n    \
    \ 5.1.  Possible Security Enhancements to Prevent This Attack . .  14\n   6. \
    \ SYN/JOIN Attack . . . . . . . . . . . . . . . . . . . . . . .  14\n     6.1.\
    \  Possible Security Enhancements to Prevent This Attack . .  14\n   7.  Recommendations\
    \ . . . . . . . . . . . . . . . . . . . . . . .  15\n     7.1.  MPTCP Security\
    \ Improvements for a Standards Track\n           Specification . . . . . . . .\
    \ . . . . . . . . . . . . . .  15\n     7.2.  Security Enhancements for MPTCP\
    \ . . . . . . . . . . . . .  16\n   8.  Security Considerations . . . . . . .\
    \ . . . . . . . . . . . .  16\n   9.  References  . . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  16\n     9.1.  Normative References  . . . . . . . .\
    \ . . . . . . . . . .  16\n     9.2.  Informative References  . . . . . . . .\
    \ . . . . . . . . .  17\n   Acknowledgements  . . . . . . . . . . . . . . . .\
    \ . . . . . . . .  18\n   Authors' Addresses  . . . . . . . . . . . . . . . .\
    \ . . . . . . .  19\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document provides a complement to the threat analysis\
    \ for\n   Multipath TCP (MPTCP) [RFC6824] documented in RFC 6181 [RFC6181].\n\
    \   RFC 6181 provided a threat analysis for the general solution space of\n  \
    \ extending TCP to operate with multiple IP addresses per connection.\n   Its\
    \ main goal was to leverage previous experience acquired during the\n   design\
    \ of other multi-address protocols, notably Shim6 [RFC5533], the\n   Stream Control\
    \ Transmission Protocol (SCTP) [RFC4960], and Mobile\n   IPv6 (MIP6) [RFC6275]\
    \ for designing MPTCP.  Thus, RFC 6181 was\n   produced before the actual MPTCP\
    \ specification (RFC 6824) was\n   completed and documented a set of recommendations\
    \ that were\n   considered during the production of that specification.\n   This\
    \ document complements RFC 6181 with a vulnerability analysis of\n   the mechanisms\
    \ specified in RFC 6824.  The motivation for this\n   analysis is to identify\
    \ possible security issues with MPTCP as\n   currently specified and propose security\
    \ enhancements to address\n   these identified security issues.\n   The goal of\
    \ the security mechanisms defined in RFC 6824 was to make\n   MPTCP no worse than\
    \ currently available single-path TCP.  We believe\n   that this goal is still\
    \ valid, so we will perform our analysis on the\n   same grounds.  This document\
    \ describes all the threats identified\n   that are specific to MPTCP (as defined\
    \ in RFC 6824) that are not\n   possible with single-path TCP.  This means that\
    \ threats that are\n   common to TCP and MPTCP are not covered in this document.\n\
    \   For each attack considered in this document, we identify the type of\n   attacker.\
    \  We can classify the attackers based on their location as\n   follows:\n   o\
    \  Off-path attacker.  This is an attacker that does not need to be\n      located\
    \ in any of the paths of the MPTCP session at any point in\n      time during\
    \ the lifetime of the MPTCP session.  This means that\n      the off-path attacker\
    \ cannot eavesdrop any of the packets of the\n      MPTCP session.\n   o  Partial-time\
    \ on-path attacker.  This is an attacker that needs to\n      be in at least one\
    \ of the paths during part of the lifetime of the\n      MPTCP session (but not\
    \ the entire lifetime).  The attacker can be\n      in the forward and/or backward\
    \ directions for the initial subflow\n      and/or other subflows.  The specific\
    \ needs of the attacker will be\n      made explicit in the attack description.\n\
    \   o  On-path attacker.  This attacker needs to be on at least one of\n     \
    \ the paths during the whole duration of the MPTCP session.  The\n      attacker\
    \ can be in the forward and/or backward directions for the\n      initial subflow\
    \ and/or other subflows.  The specific needs of the\n      attacker will be made\
    \ explicit in the attack description.\n   We can also classify the attackers based\
    \ on their actions as follows:\n   o  Eavesdropper.  The attacker is able to capture\
    \ some of the packets\n      of the MPTCP session to perform the attack, but it\
    \ is not capable\n      of changing, discarding, or delaying any packet of the\
    \ MPTCP\n      session.  The attacker can be in the forward and/or backward\n\
    \      directions for the initial subflow and/or other subflows.  The\n      specific\
    \ needs of the attacker will be made explicit in the attack\n      description.\n\
    \   o  Active attacker.  The attacker is able to change, discard, or\n      delay\
    \ some of the packets of the MPTCP session.  The attacker can\n      be in the\
    \ forward and/or backward directions for the initial\n      subflow and/or other\
    \ subflows.  The specific needs of the attacker\n      will be made explicit in\
    \ the attack description.\n   In this document, we consider the following possible\
    \ combinations of\n   attackers:\n   o  an on-path eavesdropper\n   o  an on-path\
    \ active attacker\n   o  an off-path active attacker\n   o  a partial-time on-path\
    \ eavesdropper\n   o  a partial-time on-path active attacker\n   In the rest of\
    \ the document, we describe different attacks that are\n   possible against the\
    \ MPTCP protocol specified in RFC 6824 and propose\n   possible security enhancements\
    \ to address them.\n"
- title: 2.  ADD_ADDR Attack
  contents:
  - "2.  ADD_ADDR Attack\n   Summary of the attack:\n      Type of attack: MPTCP session\
    \ hijack enabling a man-in-the-middle\n      (MitM) attack\n      Type of attacker:\
    \ off-path active attacker\n   Description:\n   In this attack, the attacker uses\
    \ the ADD_ADDR option defined in RFC\n   6824 to hijack an ongoing MPTCP session\
    \ and enable himself to perform\n   a man-in-the-middle attack on the MPTCP session.\n\
    \   Consider the following scenario.  Host A with address IPA has one\n   MPTCP\
    \ session with Host B with address IPB.  The MPTCP subflow\n   between IPA and\
    \ IPB is using port PA on Host A and port PB on Host B.\n   The tokens for the\
    \ MPTCP session are TA and TB for Host A and Host B,\n   respectively.  Host C\
    \ is the attacker.  It owns address IPC.  The\n   attack is executed as follows:\n\
    \   1.  Host C sends a forged packet with source address IPA, destination\n  \
    \     address IPB, source port PA, and destination port PB.  The packet\n    \
    \   has the ACK flag set.  The TCP sequence number for the segment is\n      \
    \ i, and the ACK sequence number is j.  We will assume all these\n       are valid;\
    \ later, we discuss what the attacker needs to figure\n       them out.  The packet\
    \ contains the ADD_ADDR option.  The ADD_ADDR\n       option announces IPC as\
    \ an alternative address for the\n       connection.  It also contains an 8-bit\
    \ address identifier that\n       does not provide any strong security benefit.\n\
    \   2.  Host B receives the ADD_ADDR message and replies by sending a TCP\n  \
    \     SYN packet.\n          Note: The MPTCP specification [RFC6824] states that\
    \ the host\n          receiving the ADD_ADDR option may initiate a new subflow.\
    \  If\n          the host is configured so that it does not initiate a new\n \
    \         subflow, the attack will not succeed.  For example, on the\n       \
    \   current Linux implementation, the server does not create\n          subflows.\
    \  Only the client does so.\n       The source address for the packet is IPB;\
    \ the destination address\n       for the packet is IPC; the source port is PB';\
    \ and the\n       destination port is PA' (it is not required that PA=PA' nor\
    \ that\n       PB=PB').  The sequence number for this packet is the new initial\n\
    \       sequence number for this subflow.  The ACK sequence number is not\n  \
    \     relevant as the ACK flag is not set.  The packet carries an\n       MP_JOIN\
    \ option and the token TA.  It also carries a random nonce\n       generated by\
    \ Host B called RB.\n   3.  Host C receives the SYN+MP_JOIN packet from Host B\
    \ and alters it\n       in the following way.  It changes the source address to\
    \ IPC and\n       the destination address to IPA.  It sends the modified packet\
    \ to\n       Host A, impersonating Host B.\n   4.  Host A receives the SYN+MP_JOIN\
    \ message and replies with a\n       SYN/ACK+MP_JOIN message.  The packet has\
    \ source address IPA and\n       destination address IPC, as well as all the other\
    \ needed\n       parameters.  In particular, Host A computes a valid Hashed\n\
    \       Message Authentication Code (HMAC) and places it in the MP_JOIN\n    \
    \   option.\n   5.  Host C receives the SYN/ACK+MP_JOIN message and changes the\n\
    \       source address to IPC and the destination address to IPB.  It\n      \
    \ sends the modified packet to IPB, impersonating Host A.\n   6.  Host B receives\
    \ the SYN/ACK+MP_JOIN message.  Host B verifies the\n       HMAC of the MP_JOIN\
    \ option and confirms its validity.  It replies\n       with an ACK+MP_JOIN packet.\
    \  The packet has source address IPB\n       and destination address IPC, as well\
    \ as all the other needed\n       parameters.  The returned MP_JOIN option contains\
    \ a valid HMAC\n       computed by Host B.\n   7.  Host C receives the ACK+MP_JOIN\
    \ message from B and alters it in\n       the following way.  It changes the source\
    \ address to IPC and the\n       destination address to IPA.  It sends the modified\
    \ packet to Host\n       A, impersonating Host B.\n   8.  Host A receives the\
    \ ACK+MP_JOIN message and creates the new\n       subflow.  At this point, the\
    \ attacker has managed to place itself\n       as a MitM for one subflow for the\
    \ existing MPTCP session.  It\n       should be noted that the subflow between\
    \ addresses IPA and IPB\n       that does not flow through the attacker still\
    \ exists, so the\n       attacker has not completely intercepted all the packets\
    \ in the\n       communication (yet).  If the attacker wishes to completely\n\
    \       intercept the MPTCP session, it can do the following additional\n    \
    \   step.\n   9.  Host C sends two TCP RST messages.  One TCP RST packet is sent\
    \ to\n       Host B, with source address IPA, destination address IPB, and\n \
    \      source and destination ports PA and PB, respectively.  The other\n    \
    \   TCP RST message is sent to Host A, with source address IPB,\n       destination\
    \ address IPA, and source and destination ports PB and\n       PA, respectively.\
    \  Both RST messages must contain a valid\n       sequence number.  Note that\
    \ figuring the sequence numbers to be\n       used here for subflow A is the same\
    \ difficulty as being able to\n       send the initial ADD_ADDR option with valid\
    \ sequence number and\n       ACK value.  If there are more subflows, then the\
    \ attacker needs\n       to find the sequence number and ACK for each subflow.\
    \  At this\n       point, the attacker has managed to fully hijack the MPTCP\n\
    \       session.\n   Information required by the attacker to perform the described\
    \ attack:\n   In order to perform this attack the attacker needs to guess or know\n\
    \   the following pieces of information.  The attacker needs this\n   information\
    \ for one of the subflows belonging to the MPTCP session.\n   o  the four-tuple\
    \ {Client-side IP Address, Client-side Port, Server-\n      side Address, Server-side\
    \ Port} that identifies the target TCP\n      connection\n   o  a valid sequence\
    \ number for the subflow\n   o  a valid ACK sequence number for the subflow\n\
    \   o  a valid address identifier for IPC\n   TCP connections are uniquely identified\
    \ by the four-tuple {Source\n   Address, Source Port, Destination Address, Destination\
    \ Port}.  Thus,\n   in order to attack a TCP connection, an attacker needs to\
    \ know or be\n   able to guess each of the values in that four-tuple.  Assuming\
    \ the\n   two peers of the target TCP connection are known, the Source Address\n\
    \   and the Destination Address can be assumed to be known.\n      Note: In order\
    \ to be able to successfully perform this attack, the\n      attacker needs to\
    \ be able to send packets with a forged source\n      address.  This means that\
    \ the attacker cannot be located in a\n      network where techniques like ingress\
    \ filtering [RFC2827]  or\n      source address validation [RFC7039] are deployed.\
    \  However,\n      ingress filtering is not as widely implemented as one would\
    \ expect\n      and hence cannot be relied upon as a mitigation for this kind\
    \ of\n      attack.\n   Assuming the attacker knows the application protocol for\
    \ which the\n   TCP connection is being employed, the server-side port can also\
    \ be\n   assumed to be known.  Finally, the client-side port will generally\n\
    \   not be known and will need to be guessed by the attacker.  The\n   chances\
    \ of an attacker guessing the client-side port will depend on\n   the ephemeral\
    \ port range employed by the client and whether or not\n   the client implements\
    \ port randomization [RFC6056].\n   Assuming TCP sequence number randomization\
    \ is in place (see e.g.,\n   [RFC6528]), an attacker would have to blindly guess\
    \ a valid TCP\n   sequence number.  That is,\n      RCV.NXT =< SEG.SEQ < RCV.NXT+RCV.WND\
    \ or RCV.NXT =<\n      SEG.SEQ+SEG.LEN-1 < RCV.NXT+RCV.WND\n   As a result, the\
    \ chances of an attacker succeeding will depend on the\n   TCP receive window\
    \ size at the target TCP peer.\n      Note: Automatic TCP buffer tuning mechanisms\
    \ have become common\n      for popular TCP implementations; hence, very large\
    \ TCP window\n      sizes of values up to 2 MB could end up being employed by\
    \ such TCP\n      implementations.\n   According to [RFC793], the acknowledgement\
    \ number is considered valid\n   as long as it does not acknowledge the receipt\
    \ of data that has not\n   yet been sent.  That is, the following expression must\
    \ be true:\n      SEG.ACK <= SND.NXT\n   However, for implementations that support\
    \ [RFC5961], the following\n   (stricter) validation check is enforced:\n    \
    \  SND.UNA - MAX.SND.WND <= SEG.ACK <= SND.NXT\n   Finally, in order for the address\
    \ identifier to be valid, the only\n   requirement is that it needs to be different\
    \ from the ones already\n   being used by Host A in that MPTCP session, so a random\
    \ identifier is\n   likely to work.\n   Given that a large number of factors affect\
    \ the chances of an\n   attacker successfully performing the aforementioned off-path\
    \ attacks,\n   we provide two general expressions for the expected number of packets\n\
    \   the attacker needs to send to succeed in the attack: one for MPTCP\n   implementations\
    \ that support [RFC5961] and another for MPTCP\n   implementations that do not.\n\
    \   Implementations that do not support RFC 5961:\n   Packets = (2^32/(RCV_WND))\
    \ * 2 * EPH_PORT_SIZE/2 * 1/MSS\n   Where the new parameters are:\n   Packets:\n\
    \      Maximum number of packets required to successfully perform an off-\n  \
    \    path (blind) attack.\n   RCV_WND:\n      TCP receive window size (RCV.WND)\
    \ at the target node.\n   EPH_PORT_SIZE:\n      Number of ports comprising the\
    \ ephemeral port range at the\n      \"client\" system.\n   MSS:\n      Maximum\
    \ Segment Size, assuming the attacker will send full\n      segments to maximize\
    \ the chances of getting a hit.\n   Notes:\n      The value \"2^32\" represents\
    \ the size of the TCP sequence number\n      space.\n      The value \"2\" accounts\
    \ for two different ACK numbers (separated by\n      2^31) that should be employed\
    \ to make sure the ACK number is\n      valid.\n   The following table contains\
    \ some sample results for the number of\n   required packets, based on different\
    \ values of RCV_WND and\n   EPH_PORT_SIZE for an MSS of 1500 bytes.\n        \
    \  +-------------+---------+---------+--------+---------+\n          | Ports \\\
    \ Win |  16 KB  |  128 KB | 256 KB | 2048 KB |\n          +-------------+---------+---------+--------+---------+\n\
    \          |     4000    |  699050 |  87381  | 43690  |   5461  |\n          +-------------+---------+---------+--------+---------+\n\
    \          |    10000    | 1747626 |  218453 | 109226 |  13653  |\n          +-------------+---------+---------+--------+---------+\n\
    \          |    50000    | 8738133 | 1092266 | 546133 |  68266  |\n          +-------------+---------+---------+--------+---------+\n\
    \         Table 1: Maximum Number of Packets for Successful Attack\n   Implementations\
    \ that do support RFC 5961:\n   Packets = (2^32/(RCV_WND)) * (2^32/(2 * SND_MAX_WND))\
    \ *\n   EPH_PORT_SIZE/2 * 1/MSS\n   Where:\n   Packets:\n      Maximum number\
    \ of packets required to successfully perform an off-\n      path (blind) attack.\n\
    \   RCV_WND:\n      TCP receive window size (RCV.WND) at the target MPTCP endpoint.\n\
    \   SND_MAX_WND:\n      Maximum TCP send window size ever employed by the target\
    \ MPTCP\n      endpoint (MAX.SND.WND).\n   EPH_PORT_SIZE:\n      Number of ports\
    \ comprising the ephemeral port range at the\n      \"client\" system.\n   Notes:\n\
    \      The value \"2^32\" represents the size of the TCP sequence number\n   \
    \   space.\n      The parameter \"MAX.SND.WND\" is specified in [RFC5961].\n \
    \     The value \"2 * SND_MAX_WND\" results from the expression \"SND.NXT -\n\
    \      SND.UNA - MAX.SND.WND\", assuming that, for connections that\n      perform\
    \ bulk data transfers, \"SND.NXT - SND.UNA == MAX.SND.WND\".\n      If an attacker\
    \ targets a TCP endpoint that is not actively\n      transferring data, \"2 *\
    \ SND_MAX_WND\" would become \"SND_MAX_WND\"\n      (and hence a successful attack\
    \ would typically require more\n      packets).\n   The following table contains\
    \ some sample results for the number of\n   required packets, based on different\
    \ values of RCV_WND, SND_MAX_WND,\n   and EPH_PORT_SIZE.  For these implementations,\
    \ only a limited number\n   of sample results are provided (as an indication of\
    \ how [RFC5961]\n   increases the difficulty of performing these attacks).\n \
    \     +-------------+-------------+-----------+-----------+---------+\n      |\
    \ Ports \\ Win |    16 KB    |   128 KB  |   256 KB  | 2048 KB |\n      +-------------+-------------+-----------+-----------+---------+\n\
    \      |     4000    | 45812984490 | 715827882 | 178956970 | 2796202 |\n     \
    \ +-------------+-------------+-----------+-----------+---------+\n         Table\
    \ 2: Maximum Number of Packets for Successful Attack\n   Note:\n      In the aforementioned\
    \ table, all values are computed with RCV_WND\n      equal to SND_MAX_WND.\n"
- title: 2.1.  Possible Security Enhancements to Prevent This Attack
  contents:
  - "2.1.  Possible Security Enhancements to Prevent This Attack\n   1.  To include\
    \ the token of the connection in the ADD_ADDR option.\n       This would make\
    \ it harder for the attacker to launch the attack,\n       since the attacker\
    \ needs to either eavesdrop the token (so this\n       can no longer be a blind\
    \ attack) or to guess it, but a random\n       32-bit number is not easy to guess.\
    \  However, this would imply\n       that any eavesdropper that is able to see\
    \ the token would be able\n       to launch this attack.  This solution then increases\
    \ the\n       vulnerability window against eavesdroppers from the initial 3-way\n\
    \       handshake for the MPTCP session to any exchange of the ADD_ADDR\n    \
    \   messages.\n   2.  To include the HMAC of the address contained in the ADD_ADDR\n\
    \       option.  The key used for the HMAC is the concatenation of the\n     \
    \  key of the receiver and the key of the sender (in the same way\n       they\
    \ are used for generating the HMAC of the MP_JOIN message).\n       This makes\
    \ it much more secure, since it requires the attacker to\n       have both keys\
    \ (either by eavesdropping it in the first exchange\n       or by guessing it).\
    \  Because this solution relies on the key used\n       in the MPTCP session,\
    \ the protection of this solution would\n       increase if new key generation\
    \ methods are defined for MPTCP\n       (e.g., using Secure Socket Layer (SSL)\
    \ keys as has been\n       proposed).\n   3.  To include the destination address\
    \ of the SYN packet in the HMAC\n       of the MP_JOIN message.  As the attacker\
    \ requires changing the\n       destination address to perform the described attack,\
    \ protecting\n       it would prevent the attack.  It wouldn't allow hosts behind\
    \ NATs\n       to be reached by an address in the ADD_ADDR option, even with\n\
    \       static NAT bindings (like a web server at home).\n   Of the options described\
    \ above, option 2 is recommended as it\n   achieves a higher security level while\
    \ preserving the required\n   functionality (i.e., NAT compatibility).\n"
- title: 3.  DoS Attack on MP_JOIN
  contents:
  - "3.  DoS Attack on MP_JOIN\n   Summary of the attack:\n      Type of attack: MPTCP\
    \ denial-of-service attack, preventing the\n      hosts from creating new subflows\n\
    \      Type of attacker: off-path active attacker\n   Description:\n   As currently\
    \ specified, the initial SYN+MP_JOIN message of the 3-way\n   handshake for additional\
    \ subflows creates state in the host receiving\n   the message.  This is because\
    \ the SYN+MP_JOIN contains the 32-bit\n   token that allows the receiver to identify\
    \ the MPTCP session and the\n   32-bit random nonce used in the HMAC calculation.\
    \  As this\n   information is not re-sent in the third ACK of the 3-way handshake,\
    \ a\n   host must create state upon reception of a SYN+MP_JOIN.\n   Assume that\
    \ an MPTCP session exists between Host A and Host B, with\n   tokens TA and TB.\
    \  An attacker, sending a SYN+MP_JOIN to Host B, with\n   the valid token TB,\
    \ will trigger the creation of state on Host B.\n   The number of these half-open\
    \ connections a host can store per MPTCP\n   session is limited by a certain number\
    \ and is implementation-\n   dependent.  The attacker can simply exhaust this\
    \ limit by sending\n   multiple SYN+MP_JOINs with different 5-tuples.  The (possibly\
    \ forged)\n   source address of the attack packets will typically correspond to\
    \ an\n   address that is not in use, or else, the SYN/ACK sent by Host B would\n\
    \   elicit a RST from the impersonated node, thus removing the\n   corresponding\
    \ state at Host B.  Further discussion of traditional SYN\n   flooding attacks\
    \ and common mitigations can be found in [RFC4987].\n   This effectively prevents\
    \ Host A from sending any more SYN+MP_JOINs\n   to Host B, as the number of acceptable\
    \ half-open connections per\n   MPTCP session on Host B has been exhausted.\n\
    \   The attacker needs to know the token TB in order to perform the\n   described\
    \ attack.  This can be achieved if it is a partial-time on-\n   path eavesdropper\
    \ observing the 3-way handshake of the establishment\n   of an additional subflow\
    \ between Host A and Host B.  If the attacker\n   is never on-path, it has to\
    \ guess the 32-bit token.\n"
- title: 3.1.  Possible Security Enhancements to Prevent This Attack
  contents:
  - "3.1.  Possible Security Enhancements to Prevent This Attack\n   The third packet\
    \ of the 3-way handshake could be extended to also\n   contain the 32-bit token\
    \ and the random nonce that has been sent in\n   the SYN+MP_JOIN.  Further, Host\
    \ B will have to generate its own\n   random nonce in a reproducible fashion (e.g.,\
    \ a hash of the 5-tuple +\n   initial sequence number + local secret).  This will\
    \ allow Host B to\n   reply to a SYN+MP_JOIN without having to create state. \
    \ Upon the\n   reception of the third ACK, Host B can then verify the correctness\
    \ of\n   the HMAC and create the state.\n"
- title: 4.  SYN Flooding Amplification
  contents:
  - "4.  SYN Flooding Amplification\n   Summary of the attack:\n      Type of attack:\
    \ The attacker uses SYN+MP_JOIN messages to amplify\n      the SYN flooding attack.\n\
    \      Type of attacker: off-path active attacker\n   Description:\n   SYN flooding\
    \ attacks [RFC4987] use SYN messages to exhaust the\n   server's resources and\
    \ prevent new TCP connections.  A common\n   mitigation is the use of SYN cookies\
    \ [RFC4987] that allow stateless\n   processing of the initial SYN message.\n\
    \   With MPTCP, the initial SYN can be processed in a stateless fashion\n   using\
    \ the aforementioned SYN cookies.  However, as described in the\n   previous section,\
    \ as currently specified, SYN+MP_JOIN messages are\n   not processed in a stateless\
    \ manner.  This opens a new attack vector.\n   The attacker can now open an MPTCP\
    \ session by sending a regular SYN\n   and creating the associated state but then\
    \ sending as many\n   SYN+MP_JOIN messages as supported by the server with different\n\
    \   combinations of source address and source port, consuming the\n   server's\
    \ resources without having to create state in the attacker.\n   This is an amplification\
    \ attack, where the cost on the attacker side\n   is only the cost of the state\
    \ associated with the initial SYN while\n   the cost on the server side is the\
    \ state for the initial SYN plus all\n   the state associated with all the following\
    \ SYN+MP_JOINs.\n"
- title: 4.1.  Possible Security Enhancements to Prevent This Attack
  contents:
  - "4.1.  Possible Security Enhancements to Prevent This Attack\n   1.  The solution\
    \ described for the previous DoS attack on MP_JOIN\n       would also prevent\
    \ this attack.\n   2.  Limiting the number of half-open subflows to a low number\
    \ (e.g.,\n       three subflows) would also limit the impact of this attack.\n"
- title: 5.  Eavesdropper in the Initial Handshake
  contents:
  - "5.  Eavesdropper in the Initial Handshake\n   Summary of the attack:\n      Type\
    \ of attack: An eavesdropper present in the initial handshake\n      where the\
    \ keys are exchanged can hijack the MPTCP session at any\n      time in the future.\n\
    \      Type of attacker: partial-time on-path eavesdropper\n   Description:\n\
    \   In this case, the attacker is present along the path when the initial\n  \
    \ 3-way handshake takes place and therefore is able to learn the keys\n   used\
    \ in the MPTCP session.  This allows the attacker to move away\n   from the MPTCP\
    \ session path and still be able to hijack the MPTCP\n   session in the future.\
    \  This vulnerability was readily identified\n   when designing the MPTCP security\
    \ solution [RFC6181], and the threat\n   was considered acceptable.\n"
- title: 5.1.  Possible Security Enhancements to Prevent This Attack
  contents:
  - "5.1.  Possible Security Enhancements to Prevent This Attack\n   There are many\
    \ techniques that can be used to prevent this attack,\n   and each of them represents\
    \ different trade-offs.  At this point, we\n   limit ourselves to enumerate them\
    \ and provide useful pointers.\n   1.  Use of hash chains.  The use of hash chains\
    \ for MPTCP has been\n       explored in [HASH-CHAINS].\n   2.  Use of SSL keys\
    \ for MPTCP security as described in [MPTCP-SSL].\n   3.  Use of Cryptographically\
    \ Generated Addresses (CGAs) for MPTCP\n       security.  CGAs [RFC3972] have\
    \ been used in the past to secure\n       multi-addressed protocols like Shim6\
    \ [RFC5533].\n   4.  Use of tcpcrypt [TCPCRYPT].\n   5.  Use of DNSSEC.  DNSSEC\
    \ has been proposed to secure the Mobile IP\n       protocol [DNSSEC].\n"
- title: 6.  SYN/JOIN Attack
  contents:
  - "6.  SYN/JOIN Attack\n   Summary of the attack:\n      Type of attack: An attacker\
    \ that can intercept the SYN/JOIN\n      message can alter the source address\
    \ being added.\n      Type of attacker: partial-time on-path eavesdropper\n  \
    \ Description:\n   The attacker is present along the path when the SYN/JOIN exchange\n\
    \   takes place.  This allows the attacker to add any new address it\n   wants\
    \ to by simply substituting the source address of the SYN/JOIN\n   packet for\
    \ one it chooses.  This vulnerability was readily identified\n   when designing\
    \ the MPTCP security solution [RFC6181], and the threat\n   was considered acceptable.\n"
- title: 6.1.  Possible Security Enhancements to Prevent This Attack
  contents:
  - "6.1.  Possible Security Enhancements to Prevent This Attack\n   It should be\
    \ noted that this vulnerability is fundamental due to the\n   NAT support requirement.\
    \  In other words, MPTCP must work through\n   NATs in order to be deployable\
    \ in the current Internet.  NAT behavior\n   is unfortunately indistinguishable\
    \ from this attack.  It is\n   impossible to secure the source address, since\
    \ doing so would prevent\n   MPTCP from working through NATs.  This basically\
    \ implies that the\n   solution cannot rely on securing the address.  A more promising\n\
    \   approach would be to look into securing the payload exchanged and\n   thus\
    \ limiting the impact that the attack would have in the\n   communication (e.g.,\
    \ tcpcrypt [TCPCRYPT] or similar).\n"
- title: 7.  Recommendations
  contents:
  - "7.  Recommendations\n   The current MPTCP specification [RFC6824] is Experimental.\
    \  There is\n   an ongoing effort to move it to Standards Track.  We believe that\
    \ the\n   work on MPTCP security should follow two threads:\n   o  The work on\
    \ improving MPTCP security so that the MPTCP\n      specification [RFC6824] can\
    \ become a Standards Track document.\n   o  The work on analyzing possible additional\
    \ security enhancements to\n      provide a more secure version of MPTCP.\n  \
    \ We expand on these in the following subsections.\n"
- title: 7.1.  MPTCP Security Improvements for a Standards Track Specification
  contents:
  - "7.1.  MPTCP Security Improvements for a Standards Track Specification\n   We\
    \ believe that in order for MPTCP to progress to Standards Track,\n   the ADD_ADDR\
    \ attack must be addressed.  We believe that the solution\n   that should be adopted\
    \ in order to deal with this attack is to\n   include an HMAC to the ADD_ADDR\
    \ message (with the address being added\n   used as input to the HMAC as well\
    \ as the key).  This would make the\n   ADD_ADDR message as secure as the JOIN\
    \ message.  In addition, this\n   implies that if we implement a more secure way\
    \ to create the key used\n   in the MPTCP connection, then the security of both\
    \ the MP_JOIN and\n   the ADD_ADDR messages is automatically improved (since both\
    \ use the\n   same key in the HMAC).\n   We believe that this is enough for MPTCP\
    \ to progress as a Standards\n   Track document because the security level is\
    \ similar to single-path\n   TCP per our previous analysis.  Moreover, the security\
    \ level achieved\n   with these changes is exactly the same as other Standards\
    \ Track\n   documents.  In particular, this would be the same security level as\n\
    \   SCTP with dynamic addresses as defined in [RFC5061].  The Security\n   Considerations\
    \ section of RFC 5061 (which is a Standards Track\n   document) reads:\n     \
    \ The addition and or deletion of an IP address to an existing\n      association\
    \ does provide an additional mechanism by which existing\n      associations can\
    \ be hijacked.  Therefore, this document requires\n      the use of the authentication\
    \ mechanism defined in [RFC4895] to\n      limit the ability of an attacker to\
    \ hijack an association.\n      Hijacking an association by using the addition\
    \ and deletion of an\n      IP address is only possible for an attacker who is\
    \ able to\n      intercept the initial two packets of the association setup when\n\
    \      the SCTP-AUTH extension is used without pre-shared keys.  If such\n   \
    \   a threat is considered a possibility, then the [RFC4895] extension\n     \
    \ MUST be used with a preconfigured shared endpoint pair key to\n      mitigate\
    \ this threat.\n   This is the same security level that would be achieved by MPTCP\
    \ with\n   the addition of the ADD_ADDR security measure recommended in this\n\
    \   document.\n"
- title: 7.2.  Security Enhancements for MPTCP
  contents:
  - "7.2.  Security Enhancements for MPTCP\n   We also believe that is worthwhile\
    \ to explore alternatives to secure\n   MPTCP.  As we identified earlier, the\
    \ problem of securing JOIN\n   messages is fundamentally incompatible with NAT\
    \ support, so it is\n   likely that a solution to this problem involves the protection\
    \ of the\n   data itself.  Exploring the integration of MPTCP and approaches like\n\
    \   tcpcrypt [TCPCRYPT] and exploring integration with SSL seem\n   promising.\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   This whole document is about security considerations\
    \ for MPTCP.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [RFC793]   Postel, J., \"Transmission Control\
    \ Protocol\", STD 7,\n              RFC 793, DOI 10.17487/RFC0793, September 1981,\n\
    \              <http://www.rfc-editor.org/info/rfc793>.\n   [RFC3972]  Aura, T.,\
    \ \"Cryptographically Generated Addresses (CGA)\",\n              RFC 3972, DOI\
    \ 10.17487/RFC3972, March 2005,\n              <http://www.rfc-editor.org/info/rfc3972>.\n\
    \   [RFC4895]  Tuexen, M., Stewart, R., Lei, P., and E. Rescorla,\n          \
    \    \"Authenticated Chunks for the Stream Control Transmission\n            \
    \  Protocol (SCTP)\", RFC 4895, DOI 10.17487/RFC4895, August\n              2007,\
    \ <http://www.rfc-editor.org/info/rfc4895>.\n   [RFC5061]  Stewart, R., Xie, Q.,\
    \ Tuexen, M., Maruyama, S., and M.\n              Kozuka, \"Stream Control Transmission\
    \ Protocol (SCTP)\n              Dynamic Address Reconfiguration\", RFC 5061,\n\
    \              DOI 10.17487/RFC5061, September 2007,\n              <http://www.rfc-editor.org/info/rfc5061>.\n\
    \   [RFC5961]  Ramaiah, A., Stewart, R., and M. Dalal, \"Improving TCP's\n   \
    \           Robustness to Blind In-Window Attacks\", RFC 5961,\n             \
    \ DOI 10.17487/RFC5961, August 2010,\n              <http://www.rfc-editor.org/info/rfc5961>.\n\
    \   [RFC6056]  Larsen, M. and F. Gont, \"Recommendations for Transport-\n    \
    \          Protocol Port Randomization\", BCP 156, RFC 6056,\n              DOI\
    \ 10.17487/RFC6056, January 2011,\n              <http://www.rfc-editor.org/info/rfc6056>.\n\
    \   [RFC6528]  Gont, F. and S. Bellovin, \"Defending against Sequence\n      \
    \        Number Attacks\", RFC 6528, DOI 10.17487/RFC6528, February\n        \
    \      2012, <http://www.rfc-editor.org/info/rfc6528>.\n   [RFC6824]  Ford, A.,\
    \ Raiciu, C., Handley, M., and O. Bonaventure,\n              \"TCP Extensions\
    \ for Multipath Operation with Multiple\n              Addresses\", RFC 6824,\
    \ DOI 10.17487/RFC6824, January 2013,\n              <http://www.rfc-editor.org/info/rfc6824>.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [DNSSEC]   Kukec, A., Bagnulo, M., Ayaz, S.,\
    \ Bauer, C., and W. Eddy,\n              \"ROAM-DNSSEC: Route Optimization for\
    \ Aeronautical Mobility\n              using DNSSEC\", 4th ACM International Workshop\
    \ on Mobility\n              in the Evolving Internet Architecture (MobiArch),\
    \ 2009.\n   [HASH-CHAINS]\n              Diez, J., Bagnulo, M., Valera, F., and\
    \ I. Vidal, \"Security\n              for multipath TCP: a constructive approach\"\
    , International\n              Journal of Internet Protocol Technology, Vol. 6,\
    \ No. 3,\n              2011.\n   [MPTCP-SSL]\n              Paasch, C. and O.\
    \ Bonaventure, \"Securing the MultiPath TCP\n              handshake with external\
    \ keys\", Work in Progress,\n              draft-paasch-mptcp-ssl-00, October\
    \ 2012.\n   [RFC2827]  Ferguson, P. and D. Senie, \"Network Ingress Filtering:\n\
    \              Defeating Denial of Service Attacks which employ IP Source\n  \
    \            Address Spoofing\", BCP 38, RFC 2827, DOI 10.17487/RFC2827,\n   \
    \           May 2000, <http://www.rfc-editor.org/info/rfc2827>.\n   [RFC4960]\
    \  Stewart, R., Ed., \"Stream Control Transmission Protocol\",\n             \
    \ RFC 4960, DOI 10.17487/RFC4960, September 2007,\n              <http://www.rfc-editor.org/info/rfc4960>.\n\
    \   [RFC4987]  Eddy, W., \"TCP SYN Flooding Attacks and Common\n             \
    \ Mitigations\", RFC 4987, DOI 10.17487/RFC4987, August 2007,\n              <http://www.rfc-editor.org/info/rfc4987>.\n\
    \   [RFC5533]  Nordmark, E. and M. Bagnulo, \"Shim6: Level 3 Multihoming\n   \
    \           Shim Protocol for IPv6\", RFC 5533, DOI 10.17487/RFC5533,\n      \
    \        June 2009, <http://www.rfc-editor.org/info/rfc5533>.\n   [RFC6181]  Bagnulo,\
    \ M., \"Threat Analysis for TCP Extensions for\n              Multipath Operation\
    \ with Multiple Addresses\", RFC 6181,\n              DOI 10.17487/RFC6181, March\
    \ 2011,\n              <http://www.rfc-editor.org/info/rfc6181>.\n   [RFC6275]\
    \  Perkins, C., Ed., Johnson, D., and J. Arkko, \"Mobility\n              Support\
    \ in IPv6\", RFC 6275, DOI 10.17487/RFC6275, July\n              2011, <http://www.rfc-editor.org/info/rfc6275>.\n\
    \   [RFC7039]  Wu, J., Bi, J., Bagnulo, M., Baker, F., and C. Vogt, Ed.,\n   \
    \           \"Source Address Validation Improvement (SAVI) Framework\",\n    \
    \          RFC 7039, DOI 10.17487/RFC7039, October 2013,\n              <http://www.rfc-editor.org/info/rfc7039>.\n\
    \   [TCPCRYPT] Bittau, A., Boneh, D., Hamburg, M., Handley, M., Mazieres,\n  \
    \            D., and Q. Slack, \"Cryptographic protection of TCP Streams\n   \
    \           (tcpcrypt)\", Work in Progress, draft-bittau-tcp-crypt-04,\n     \
    \         February 2014.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   We would like to thank Mark Handley for his comments on\
    \ the attacks\n   and countermeasures discussed in this document.  We would also\
    \ like\n   to thank to Alissa Cooper, Phil Eardley, Yoshifumi Nishida, Barry\n\
    \   Leiba, Stephen Farrell, and Stefan Winter for their comments and\n   reviews.\n\
    \   Marcelo Bagnulo, Christoph Paasch, Oliver Bonaventure, and Costin\n   Raiciu\
    \ are partially funded by the EU Trilogy 2 project.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Marcelo Bagnulo\n   Universidad Carlos III de Madrid\n\
    \   Av. Universidad 30\n   Leganes, Madrid  28911\n   Spain\n   Phone: 34 91 6249500\n\
    \   Email: marcelo@it.uc3m.es\n   URI:   http://www.it.uc3m.es\n   Christoph Paasch\n\
    \   UCLouvain\n   Email: christoph.paasch@gmail.com\n   Fernando Gont\n   SI6\
    \ Networks / UTN-FRH\n   Evaristo Carriego 2644\n   Haedo, Provincia de Buenos\
    \ Aires  1706\n   Argentina\n   Phone: +54 11 4650 8472\n   Email: fgont@si6networks.com\n\
    \   URI:   http://www.si6networks.com\n   Olivier Bonaventure\n   UCLouvain\n\
    \   Place Sainte Barbe, 2\n   Louvain-la-Neuve,   1348\n   Belgium\n   Email:\
    \ olivier.bonaventure@uclouvain.be\n   Costin Raiciu\n   Universitatea Politehnica\
    \ Bucuresti\n   Splaiul Independentei 313a\n   Bucuresti\n   Romania\n   Email:\
    \ costin.raiciu@cs.pub.ro\n"
