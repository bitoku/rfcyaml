- contents:
  - '                        Using Early Data in HTTP

    '
  title: __initial_text__
- contents:
  - "Abstract\n   Using TLS early data creates an exposure to the possibility of a\n
    \  replay attack.  This document defines mechanisms that allow clients\n   to
    communicate with servers about HTTP requests that are sent in\n   early data.
    \ Techniques are described that use these mechanisms to\n   mitigate the risk
    of replay.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8470.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2018 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (https://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n     1.1.  Conventions and Definitions . . . . . . . . . . . .
    . . .   3\n   2.  Early Data in HTTP  . . . . . . . . . . . . . . . . . . . .
    .   3\n   3.  Supporting Early Data in HTTP Servers . . . . . . . . . . . .   3\n
    \  4.  Using Early Data in HTTP Clients  . . . . . . . . . . . . . .   5\n   5.
    \ Extensions for Early Data in HTTP . . . . . . . . . . . . . .   6\n     5.1.
    \ The Early-Data Header Field . . . . . . . . . . . . . . .   7\n     5.2.  The
    425 (Too Early) Status Code . . . . . . . . . . . . .   8\n   6.  Security Considerations
    . . . . . . . . . . . . . . . . . . .   8\n     6.1.  Gateways and Early Data
    . . . . . . . . . . . . . . . . .   8\n     6.2.  Consistent Handling of Early
    Data . . . . . . . . . . . .   9\n     6.3.  Denial of Service . . . . . . . .
    . . . . . . . . . . . .   9\n     6.4.  Out-of-Order Delivery . . . . . . . .
    . . . . . . . . . .   9\n   7.  IANA Considerations . . . . . . . . . . . . .
    . . . . . . . .  10\n   8.  References  . . . . . . . . . . . . . . . . . . .
    . . . . . .  10\n     8.1.  Normative References  . . . . . . . . . . . . . .
    . . . .  10\n     8.2.  Informative References  . . . . . . . . . . . . . . .
    . .  11\n   Acknowledgments . . . . . . . . . . . . . . . . . . . . . . . . .
    \ 11\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  12\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   TLS 1.3 [TLS13] introduces the concept of early data (also
    known as\n   zero round-trip time (0-RTT) data).  If the client has spoken to
    the\n   same server recently, early data allows a client to send data to a\n   server
    in the first round trip of a connection, without waiting for\n   the TLS handshake
    to complete.\n   When used with HTTP [HTTP], early data allows clients to send\n
    \  requests immediately, thus avoiding the one or two round-trip delays\n   needed
    for the TLS handshake.  This is a significant performance\n   enhancement; however,
    it has significant limitations.\n   The primary risk of using early data is that
    an attacker might\n   capture and replay the request(s) it contains.  TLS [TLS13]
    describes\n   techniques that can be used to reduce the likelihood that an attacker\n
    \  can successfully replay a request, but these techniques can be\n   difficult
    to deploy and still leave some possibility of a successful\n   attack.\n   Note
    that this is different from automated or user-initiated retries;\n   replays are
    initiated by an attacker without the awareness of the\n   client.\n   To help
    mitigate the risk of replays in HTTP, this document gives an\n   overview of techniques
    for controlling these risks in servers and\n   defines requirements for clients
    when sending requests in early data.\n   The advice in this document also applies
    to use of 0-RTT in HTTP over\n   QUIC [HQ].\n"
  - contents:
    - "1.1.  Conventions and Definitions\n   The key words \"MUST\", \"MUST NOT\",
      \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
      \"NOT RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be
      interpreted as described in BCP\n   14 [RFC2119] [RFC8174] when, and only when,
      they appear in all\n   capitals, as shown here.\n"
    title: 1.1.  Conventions and Definitions
  title: 1.  Introduction
- contents:
  - "2.  Early Data in HTTP\n   Conceptually, early data is concatenated with other
    application data\n   to form a single stream.  This can mean that requests are
    entirely\n   contained within early data or that only part of a request is early.\n
    \  In a multiplexed protocol, like HTTP/2 [RFC7540] or HTTP/QUIC [HQ],\n   multiple
    requests might be partially delivered in early data.\n   The model that this document
    assumes is that once the TLS handshake\n   completes, the early data received
    on that TLS connection is known to\n   not be a replayed copy of that data.  However,
    it is important to\n   note that this does not mean that early data will not be
    or has not\n   been replayed on another connection.\n"
  title: 2.  Early Data in HTTP
- contents:
  - "3.  Supporting Early Data in HTTP Servers\n   A server decides whether or not
    to offer a client the ability to send\n   early data on future connections when
    sending the TLS session ticket.\n   TLS [TLS13] mandates the use of replay detection
    strategies that\n   reduce the ability of an attacker to successfully replay early
    data.\n   These anti-replay techniques reduce but don't completely eliminate\n
    \  the chance of data being replayed and ensure a fixed upper limit to\n   the
    number of replays.\n   When a server enables early data, there are a number of
    techniques it\n   can use to mitigate the risks of replay:\n   1.  The server
    can reject early data at the TLS layer.  A server\n       cannot selectively reject
    early data, so this results in all\n       requests sent in early data being discarded.\n
    \  2.  The server can choose to delay processing of early data until\n       after
    the TLS handshake completes.  By deferring processing, it\n       can ensure that
    only a successfully completed connection is used\n       for the request(s) therein.
    \ This provides the server with some\n       assurance that the early data was
    not replayed.  If the server\n       receives multiple requests in early data,
    it can determine\n       whether to defer HTTP processing on a per-request basis.\n
    \  3.  The server can cause a client to retry individual requests and\n       not
    use early data by responding with the 425 (Too Early) status\n       code (Section
    5.2) in cases where the risk of replay is judged\n       too great.\n   All of
    these techniques are equally effective; a server can use the\n   method that best
    suits it.\n   For a given request, the level of tolerance to replay risk is\n
    \  specific to the resource it operates upon (and therefore only known\n   to
    the origin server).  The primary risk associated with using early\n   data is
    in the actions a server takes when processing a request;\n   processing a duplicated
    request might result in duplicated effects\n   and side effects.  Appendix E.5
    of [TLS13] also describes other\n   effects produced by processing duplicated
    requests.\n   The request method's safety ([RFC7231], Section 4.2.1) is one way
    to\n   determine this.  However, some resources produce side effects with\n   safe
    methods, so this cannot be universally relied upon.\n   It is RECOMMENDED that
    origin servers allow resources to explicitly\n   configure whether early data
    is appropriate in requests.  Absent such\n   explicit information, origin servers
    MUST either reject early data or\n   implement the techniques described in this
    document for ensuring that\n   requests are not processed prior to TLS handshake
    completion.\n   A request might be sent partially in early data with the remainder
    of\n   the request being sent after the handshake completes.  This does not\n
    \  necessarily affect handling of that request; what matters is when the\n   server
    starts acting upon the contents of a request.  Any time any\n   server instance
    might initiate processing prior to completion of the\n   handshake, all server
    instances need to account for the possibility\n   of replay of early data and
    how that could affect that processing\n   (see also Section 6.2).\n   A server
    can partially process requests that are incomplete.  Parsing\n   header fields
    -- without acting on the values -- and determining\n   request routing is likely
    to be safe from side effects but other\n   actions might not be.\n   Intermediary
    servers do not have sufficient information to decide\n   whether early data can
    be processed, so Section 5.2 describes a way\n   for the origin to signal to them
    that a particular request isn't\n   appropriate for early data.  Intermediaries
    that accept early data\n   MUST implement that mechanism.\n   Note that a server
    cannot choose to selectively reject early data at\n   the TLS layer.  TLS only
    permits a server to either accept all early\n   data or none of it.  Once a server
    has decided to accept early data,\n   it MUST process all requests in early data,
    even if the server\n   rejects the request by sending a 425 (Too Early) response.\n
    \  A server can limit the amount of early data with the\n   \"max_early_data_size\"
    field of the \"early_data\" TLS extension.  This\n   can be used to avoid committing
    an arbitrary amount of memory for\n   requests that it might defer until the handshake
    completes.\n"
  title: 3.  Supporting Early Data in HTTP Servers
- contents:
  - "4.  Using Early Data in HTTP Clients\n   A client that wishes to use early data
    commences by sending HTTP\n   requests immediately after sending the TLS ClientHello.\n
    \  By their nature, clients have control over whether a given request is\n   sent
    in early data, thereby giving the client control over risk of\n   replay.  Absent
    other information, clients MAY send requests with\n   safe HTTP methods ([RFC7231],
    Section 4.2.1) in early data when it is\n   available and MUST NOT send unsafe
    methods (or methods whose safety\n   is not known) in early data.\n   If the server
    rejects early data at the TLS layer, a client MUST\n   start sending again as
    though the connection were new.  This could\n   entail using a different negotiated
    protocol [ALPN] than the one\n   optimistically used for the early data.  Any
    requests sent in early\n   data will need to be sent again, unless the client
    decides to abandon\n   those requests.\n   Automatic retry creates the potential
    for a replay attack.  An\n   attacker intercepts a connection that uses early
    data and copies the\n   early data to another server instance.  The second server
    instance\n   accepts and processes the early data, even though it will not\n   complete
    the TLS handshake.  The attacker then allows the original\n   connection to complete.
    \ Even if the early data is detected as a\n   duplicate and rejected, the first
    server instance might allow the\n   connection to complete.  If the client then
    retries requests that\n   were sent in early data, the request will be processed
    twice.\n   Replays are also possible if there are multiple server instances that\n
    \  will accept early data or if the same server accepts early data\n   multiple
    times (though the latter would be in violation of\n   requirements in Section
    8 of [TLS13]).\n   Clients that use early data MUST retry requests upon receipt
    of a 425\n   (Too Early) status code; see Section 5.2.\n   An intermediary MUST
    NOT use early data when forwarding a request\n   unless early data was used on
    a previous hop, or it knows that the\n   request can be retried safely without
    consequences (typically, using\n   out-of-band configuration).  Absent better
    information, that means\n   that an intermediary can only use early data if the
    request either\n   arrived in early data or arrived with the Early-Data header
    field set\n   to \"1\" (see Section 5.1).\n"
  title: 4.  Using Early Data in HTTP Clients
- contents:
  - "5.  Extensions for Early Data in HTTP\n   Because HTTP requests can span multiple
    \"hops\", it is necessary to\n   explicitly communicate whether a request has
    been sent in early data\n   on a previous hop.  Likewise, it is necessary to have
    some means of\n   explicitly triggering a retry when early data is not desired.\n
    \  Finally, it is necessary to know whether the client will actually\n   perform
    such a retry.\n   To meet these needs, two signaling mechanisms are defined:\n
    \  o  The Early-Data header field is included in requests that might\n      have
    been forwarded by an intermediary prior to the completion of\n      the TLS handshake
    with its client.\n   o  The 425 (Too Early) status code is defined for a server
    to\n      indicate that a request could not be processed due to the\n      consequences
    of a possible replay attack.\n   They are designed to enable better coordination
    of the use of early\n   data between the user agent and origin server, and also
    when a\n   gateway (also \"reverse proxy\", \"Content Delivery Network\", or\n
    \  \"surrogate\") is present.\n   Gateways typically don't have specific information
    about whether a\n   given request can be processed safely when it is sent in early
    data.\n   In many cases, only the origin server has the necessary information\n
    \  to decide whether the risk of replay is acceptable.  These extensions\n   allow
    coordination between a gateway and its origin server.\n"
  - contents:
    - "5.1.  The Early-Data Header Field\n   The Early-Data request header field indicates
      that the request has\n   been conveyed in early data and that a client understands
      the 425\n   (Too Early) status code.\n   It has just one valid value: \"1\".
      \ Its syntax is defined by the\n   following ABNF [ABNF]:\n   Early-Data = \"1\"\n
      \  For example:\n   GET /resource HTTP/1.0\n   Host: example.com\n   Early-Data:
      1\n   An intermediary that forwards a request prior to the completion of\n   the
      TLS handshake with its client MUST send it with the Early-Data\n   header field
      set to \"1\" (i.e., it adds it if not present in the\n   request).  An intermediary
      MUST use the Early-Data header field if\n   the request might have been subject
      to a replay and might already\n   have been forwarded by it or another instance
      (see Section 6.2).\n   An intermediary MUST NOT remove this header field if
      it is present in\n   a request.  Early-Data MUST NOT appear in a Connection
      header field.\n   The Early-Data header field is not intended for use by user
      agents\n   (that is, the original initiator of a request).  Sending a request
      in\n   early data implies that the client understands this specification and\n
      \  is willing to retry a request in response to a 425 (Too Early) status\n   code.
      \ A user agent that sends a request in early data does not need\n   to include
      the Early-Data header field.\n   A server cannot make a request that contains
      the Early-Data header\n   field safe for processing by waiting for the handshake
      to complete.\n   A request that is marked with Early-Data was sent in early
      data on a\n   previous hop.  Requests that contain the Early-Data header field
      and\n   cannot be safely processed MUST be rejected using the 425 (Too Early)\n
      \  status code.\n   The Early-Data header field carries a single bit of information,
      and\n   clients MUST include at most one instance.  Multiple or invalid\n   instances
      of the header field MUST be treated as equivalent to a\n   single instance with
      a value of 1 by a server.\n   An Early-Data header field MUST NOT be included
      in responses or\n   request trailers.\n"
    title: 5.1.  The Early-Data Header Field
  - contents:
    - "5.2.  The 425 (Too Early) Status Code\n   A 425 (Too Early) status code indicates
      that the server is unwilling\n   to risk processing a request that might be
      replayed.\n   User agents that send a request in early data are expected to
      retry\n   the request when receiving a 425 (Too Early) response status code.
      \ A\n   user agent SHOULD retry automatically, but any retries MUST NOT be\n
      \  sent in early data.\n   In all cases, an intermediary can forward a 425 (Too
      Early) status\n   code.  Intermediaries MUST forward a 425 (Too Early) status
      code if\n   the request that it received and forwarded contained an Early-Data\n
      \  header field.  Otherwise, an intermediary that receives a request in\n   early
      data MAY automatically retry that request in response to a 425\n   (Too Early)
      status code, but it MUST wait for the TLS handshake to\n   complete on the connection
      where it received the request.\n   The server cannot assume that a client is
      able to retry a request\n   unless the request is received in early data or
      the Early-Data header\n   field is set to \"1\".  A server SHOULD NOT emit the
      425 status code\n   unless one of these conditions is met.\n   The 425 (Too
      Early) status code is not cacheable by default.  Its\n   payload is not the
      representation of any identified resource.\n"
    title: 5.2.  The 425 (Too Early) Status Code
  title: 5.  Extensions for Early Data in HTTP
- contents:
  - "6.  Security Considerations\n   Using early data exposes a client to the risk
    that their request is\n   replayed.  A retried or replayed request can produce
    different side\n   effects on the server.  In addition to those side effects,
    replays\n   and retries might be used for traffic analysis to recover information\n
    \  about requests or the resources those requests target.  In\n   particular,
    a request that is replayed might result in a different\n   response, which might
    be observable from the length of protected data\n   even if the content remains
    confidential.\n"
  - contents:
    - "6.1.  Gateways and Early Data\n   A gateway MUST NOT forward requests that
      were received in early data\n   unless it knows that the origin server it will
      forward to understands\n   the Early-Data header field and will correctly generate
      a 425 (Too\n   Early) status code.  A gateway that is uncertain about origin
      server\n   support for a given request SHOULD either delay forwarding the\n
      \  request until the TLS handshake with its client completes or send a\n   425
      (Too Early) status code in response.\n   A gateway without at least one potential
      origin server that supports\n   the Early-Data header field expends significant
      effort for what can\n   at best be a modest performance benefit from enabling
      early data.  If\n   no origin server supports early data, it is more efficient
      to disable\n   early data entirely.\n"
    title: 6.1.  Gateways and Early Data
  - contents:
    - "6.2.  Consistent Handling of Early Data\n   Consistent treatment of a request
      that arrives in, or partially in,\n   early data is critical to avoiding inappropriate
      processing of\n   replayed requests.  If a request is not safe to process before
      the\n   TLS handshake completes, then all instances of the server (including\n
      \  gateways) need to agree and either reject the request or delay\n   processing.\n
      \  Disabling early data, delaying requests, or rejecting requests with\n   the
      425 (Too Early) status code are all equally good measures for\n   mitigating
      replay attacks on requests that might be vulnerable to\n   replay.  Server instances
      can implement any of these measures and be\n   considered consistent, even if
      different instances use different\n   methods.  Critically, this means that
      it is possible to employ\n   different mitigations in reaction to other conditions,
      such as server\n   load.\n   A server MUST NOT act on early data before the
      handshake completes if\n   it and any other server instance could make a different
      decision\n   about how to handle the same data.\n"
    title: 6.2.  Consistent Handling of Early Data
  - contents:
    - "6.3.  Denial of Service\n   Accepting early data exposes a server to potential
      denial of service\n   through the replay of requests that are expensive to handle.
      \ A\n   server that is under load SHOULD prefer rejecting TLS early data as
      a\n   whole rather than accepting early data and selectively processing\n   requests.
      \ Generating a 503 (Service Unavailable) or 425 (Too Early)\n   status code
      often leads to clients retrying requests, which could\n   result in increased
      load.\n"
    title: 6.3.  Denial of Service
  - contents:
    - "6.4.  Out-of-Order Delivery\n   In protocols that deliver data out of order
      (such as QUIC [HQ]),\n   early data can arrive after the handshake completes.
      \ A server MAY\n   process requests received in early data after handshake completion\n
      \  only if it can rely on other instances correctly handling replays of\n   the
      same requests.\n"
    title: 6.4.  Out-of-Order Delivery
  title: 6.  Security Considerations
- contents:
  - "7.  IANA Considerations\n   This document registers the Early-Data header field
    in the \"Permanent\n   Message Header Field Names\" registry located at\n   <https://www.iana.org/assignments/message-headers>.\n
    \  Header field name:  Early-Data\n   Applicable protocol:  http\n   Status:  standard\n
    \  Author/Change controller:  IETF\n   Specification document(s):  This document\n
    \  Related information:  (empty)\n   This document registers the 425 (Too Early)
    status code in the \"HTTP\n   Status Codes\" registry located at <https://www.iana.org/assignments/\n
    \  http-status-codes>.\n   Value:  425\n   Description:  Too Early\n   Reference:
    \ This document\n"
  title: 7.  IANA Considerations
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [ABNF]     Crocker, D., Ed. and P. Overell,
      \"Augmented BNF for Syntax\n              Specifications: ABNF\", STD 68, RFC
      5234,\n              DOI 10.17487/RFC5234, January 2008,\n              <https://www.rfc-editor.org/info/rfc5234>.\n
      \  [HTTP]     Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n
      \             Protocol (HTTP/1.1): Message Syntax and Routing\",\n              RFC
      7230, DOI 10.17487/RFC7230, June 2014,\n              <https://www.rfc-editor.org/info/rfc7230>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <https://www.rfc-editor.org/info/rfc2119>.\n   [RFC7231]  Fielding,
      R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1):
      Semantics and Content\", RFC 7231,\n              DOI 10.17487/RFC7231, June
      2014,\n              <https://www.rfc-editor.org/info/rfc7231>.\n   [RFC8174]
      \ Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n              2119
      Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n              May 2017,
      <https://www.rfc-editor.org/info/rfc8174>.\n   [TLS13]    Rescorla, E., \"The
      Transport Layer Security (TLS) Protocol\n              Version 1.3\", RFC 8446,
      DOI 10.17487/RFC8446, August 2018,\n              <https://www.rfc-editor.org/info/rfc8446>.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [ALPN]     Friedl, S., Popov, A., Langley,
      A., and E. Stephan,\n              \"Transport Layer Security (TLS) Application-Layer
      Protocol\n              Negotiation Extension\", RFC 7301, DOI 10.17487/RFC7301,\n
      \             July 2014, <https://www.rfc-editor.org/info/rfc7301>.\n   [HQ]
      \      Bishop, M., \"Hypertext Transfer Protocol (HTTP) over\n              QUIC\",
      Work in Progress, draft-ietf-quic-http-14, August\n              2018.\n   [RFC7540]
      \ Belshe, M., Peon, R., and M. Thomson, Ed., \"Hypertext\n              Transfer
      Protocol Version 2 (HTTP/2)\", RFC 7540,\n              DOI 10.17487/RFC7540,
      May 2015,\n              <https://www.rfc-editor.org/info/rfc7540>.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Acknowledgments\n   This document was not easy to produce.  The following people
    made\n   substantial contributions to the quality and completeness of the\n   document:
    David Benjamin, Subodh Iyengar, Benjamin Kaduk, Ilari\n   Liusavaara, Kazuho Oku,
    Eric Rescorla, Kyle Rose, and Victor\n   Vasiliev.\n"
  title: Acknowledgments
- contents:
  - "Authors' Addresses\n   Martin Thomson\n   Mozilla\n   Email: martin.thomson@gmail.com\n
    \  Mark Nottingham\n   Fastly\n   Email: mnot@mnot.net\n   Willy Tarreau\n   HAProxy
    Technologies\n   Email: willy@haproxy.org\n"
  title: Authors' Addresses
