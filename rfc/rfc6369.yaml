- title: __initial_text__
  contents:
  - "           Forwarding and Control Element Separation (ForCES)\n             \
    \          Implementation Experience\n"
- title: Abstract
  contents:
  - "Abstract\n   The Forwarding and Control Element Separation (ForCES) protocol\n\
    \   defines a standard communication and control mechanism through which\n   a\
    \ Control Element (CE) can control the behavior of a Forwarding\n   Element (FE).\
    \  This document captures the experience of implementing\n   the ForCES protocol\
    \ and model.  Its aim is to help others by\n   providing examples and possible\
    \ strategies for implementing the\n   ForCES protocol.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6369.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n     1.1.  Document Goal  . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   2.  Terminology and Conventions  . . . . . . . . . . . . .\
    \ . . . .  3\n   3.  ForCES Architecture  . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n     3.1.  Pre-Association Setup - Initial Configuration  . . . .\
    \ . .  5\n     3.2.  TML  . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .  5\n     3.3.  Model  . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \  6\n       3.3.1.  Components . . . . . . . . . . . . . . . . . . . . . .  6\n\
    \       3.3.2.  LFBs . . . . . . . . . . . . . . . . . . . . . . . . .  9\n  \
    \   3.4.  Protocol . . . . . . . . . . . . . . . . . . . . . . . . . 10\n    \
    \   3.4.1.  TLVs . . . . . . . . . . . . . . . . . . . . . . . . . 10\n      \
    \ 3.4.2.  Message Deserialization  . . . . . . . . . . . . . . . 13\n       3.4.3.\
    \  Message Serialization  . . . . . . . . . . . . . . . . 15\n   4.  Development\
    \ Platforms  . . . . . . . . . . . . . . . . . . . . 15\n   5.  Acknowledgements\
    \ . . . . . . . . . . . . . . . . . . . . . . . 16\n   6.  Security Considerations\
    \  . . . . . . . . . . . . . . . . . . . 16\n   7.  References . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . 17\n     7.1.  Normative References . .\
    \ . . . . . . . . . . . . . . . . . 17\n     7.2.  Informative References . .\
    \ . . . . . . . . . . . . . . . . 17\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Forwarding and Control Element Separation (ForCES) defines\
    \ an\n   architectural framework and associated protocols to standardize\n   information\
    \ exchange between the control plane and the forwarding\n   plane in a ForCES\
    \ Network Element (ForCES NE).  [RFC3654] defines the\n   ForCES requirements,\
    \ and [RFC3746] defines the ForCES framework.\n   The ForCES protocol works in\
    \ a master-slave mode in which Forwarding\n   Elements (FEs) are slaves and Control\
    \ Elements (CEs) are masters.\n   The protocol includes commands for transport\
    \ of Logical Functional\n   Block (LFB) configuration information, association\
    \ setup, status, and\n   event notifications, etc.  The reader is encouraged to\
    \ read the\n   Forwarding and Control Element Separation Protocol [RFC5810] for\n\
    \   further information.\n   [RFC5812] presents a formal way to define FE LFBs\
    \ using XML.  LFB\n   configuration components, capabilities, and associated events\
    \ are\n   defined when LFBs are formally created.  The LFBs within the\n   Forwarding\
    \ Element (FE) are accordingly controlled in a standardized\n   way by the ForCES\
    \ protocol.\n   The Transport Mapping Layer (TML) transports the protocol messages.\n\
    \   The TML is where the issues of how to achieve transport-level\n   reliability,\
    \ congestion control, multicast, ordering, etc., are\n   handled.  It is expected\
    \ that more than one TML will be standardized.\n   The various possible TMLs could\
    \ vary their implementations based on\n   the capabilities of underlying media\
    \ and transport.  However, since\n   each TML is standardized, interoperability\
    \ is guaranteed as long as\n   both endpoints support the same TML.  All ForCES\
    \ protocol layer\n   implementations must be portable across all TMLs.  Although\
    \ more than\n   one TML may be standardized for the ForCES protocol, all ForCES\n\
    \   implementations must implement the Stream Control Transmission\n   Protocol\
    \ (SCTP) TML [RFC5811].\n   The Forwarding and Control Element Separation Applicability\
    \ Statement\n   [RFC6041] captures the applicable areas in which ForCES can be\
    \ used.\n"
- title: 1.1.  Document Goal
  contents:
  - "1.1.  Document Goal\n   This document captures the experience of implementing\
    \ the ForCES\n   protocol and model, and its main goal is to provide alternatives,\n\
    \   ideas, and proposals as how it can be implemented, not to tell others\n  \
    \ how to implement it.\n   Also, this document mentions possible problems and\
    \ potential choices\n   that can be made, in an attempt to help implementors develop\
    \ their\n   own products.\n   Additionally, this document assumes that the reader\
    \ has become\n   familiar with the three main ForCES RFCs: the Forwarding and\
    \ Control\n   Element Separation Protocol [RFC5810], the Forwarding and Control\n\
    \   Element Separation Forwarding Element Model [RFC5812], and the SCTP-\n   Based\
    \ Transport Mapping Layer (TML) for the Forwarding and Control\n   Element Separation\
    \ Protocol [RFC5811].\n"
- title: 2.  Terminology and Conventions
  contents:
  - "2.  Terminology and Conventions\n   The terminology used in this document is\
    \ the same as in the\n   Forwarding and Control Element Separation Protocol [RFC5810];\
    \ some of\n   the definitions below are copied from that document.\n   Control\
    \ Element (CE): A logical entity that implements the ForCES\n   protocol and uses\
    \ it to instruct one or more FEs on how to process\n   packets.  CEs handle functionality\
    \ such as the execution of control\n   and signaling protocols.\n   Forwarding\
    \ Element (FE): A logical entity that implements the ForCES\n   protocol.  FEs\
    \ use the underlying hardware to provide per-packet\n   processing and handling\
    \ as directed/controlled by one or more CEs via\n   the ForCES protocol.\n   LFB\
    \ (Logical Functional Block): The basic building block that is\n   operated on\
    \ by the ForCES protocol.  The LFB is a well-defined,\n   logically separable\
    \ functional block that resides in an FE and is\n   controlled by the CE via the\
    \ ForCES protocol.  The LFB may reside at\n   the FE's data path and process packets\
    \ or may be purely an FE control\n   or configuration entity that is operated\
    \ on by the CE.  Note that the\n   LFB is a functionally accurate abstraction\
    \ of the FE's processing\n   capabilities but not a hardware-accurate representation\
    \ of the FE\n   implementation.\n   LFB Class and LFB Instance: LFBs are categorized\
    \ by LFB classes.  An\n   LFB instance represents an LFB class (or type) existence.\
    \  There may\n   be multiple instances of the same LFB class (or type) in an FE.\
    \  An\n   LFB class is represented by an LFB class ID, and an LFB instance is\n\
    \   represented by an LFB instance ID.  As a result, an LFB class ID\n   associated\
    \ with an LFB instance ID uniquely specifies an LFB\n   existence.\n   LFB Component:\
    \ Operational parameters of the LFBs that must be\n   visible to the CEs are conceptualized\
    \ in the FE model as the LFB\n   components.  The LFB components include, for\
    \ example, flags, single\n   parameter arguments, complex arguments, and tables\
    \ that the CE can\n   read and/or write via the ForCES protocol.\n   ForCES Protocol:\
    \ While there may be multiple protocols used within\n   the overall ForCES architecture,\
    \ the terms \"ForCES protocol\" and\n   \"protocol\" refer to the Fp reference\
    \ points in the ForCES framework\n   [RFC3746].  This protocol does not apply\
    \ to CE-to-CE communication,\n   FE-to-FE communication, or communication between\
    \ FE and CE Managers.\n   Basically, the ForCES protocol works in a master-slave\
    \ mode in which\n   FEs are slaves and CEs are masters.  This document defines\
    \ the\n   specifications for this ForCES protocol.\n"
- title: 3.  ForCES Architecture
  contents:
  - "3.  ForCES Architecture\n   ForCES has undergone two successful interoperability\
    \ tests, where\n   very few issues were caught and resolved.\n   This section\
    \ discusses the ForCES architecture, implementation\n   challenges, and ways to\
    \ overcome these challenges.\n"
- title: 3.1.  Pre-Association Setup - Initial Configuration
  contents:
  - "3.1.  Pre-Association Setup - Initial Configuration\n   The initial configuration\
    \ of the FE and the CE is done by the FE\n   Manager and the CE Manager, respectively.\
    \  These entities have not as\n   yet been standardized.\n   The simplest solution\
    \ is static configuration files, which play the\n   role of the Managers and are\
    \ read by FEs and CEs.\n   For more dynamic solutions, however, it is expected\
    \ that the Managers\n   will be entities that will talk to each other and exchange\
    \ details\n   regarding the associations.  Any developer can create any Manager,\n\
    \   but they should at least be able to exchange the details below.\n   From the\
    \ FE Manager side:\n   1.  FE Identifiers (FEIDs).\n   2.  FE IP addresses, if\
    \ the FEs and CEs will be communicating via\n       network.\n   3.  TML.  The\
    \ TML that will be used.  If this is omitted, then SCTP\n       must be chosen\
    \ as default.\n   4.  TML priority ports.  If this is omitted as well, then the\
    \ CE must\n       use the default values from the respective TML RFC.\n   From\
    \ the CE Manager side:\n   1.  CE Identifiers (CEIDs).\n   2.  CE IP addresses,\
    \ if the FEs and CEs will be communicating via\n       network.\n   3.  TML. \
    \ The TML that will be used.  If this is omitted, then SCTP\n       must be chosen\
    \ as default.\n   4.  TML priority ports.  If this is omitted as well, then the\
    \ FE must\n       use the default values from the respective TML RFC.\n"
- title: 3.2.  TML
  contents:
  - "3.2.  TML\n   All ForCES implementations must support the SCTP TML.  Even if\n\
    \   another TML will be chosen by the developer, SCTP is mandatory and\n   must\
    \ be supported.\n   There are several issues that should concern a developer for\
    \ the TML:\n   1.  Security.  TML must be secure according to the respective RFC.\n\
    \       For SCTP, you have to use IPsec.\n   2.  Remote connection.  While ForCES\
    \ is meant to be used locally,\n       both interoperability tests have proven\
    \ that ForCES can be\n       deployed everywhere that SCTP/IP is available.  In\
    \ both\n       interoperability tests, there were connections between Greece and\n\
    \       China, and the performance was very satisfactory.  However, in\n     \
    \  order for the FE and CE to work in a non-local environment, an\n       implementor\
    \ must ensure that the SCTP-TML ports are forwarded to\n       the CE and/or FE\
    \ if they are behind NATs; if there is a firewall,\n       it will allow the SCTP\
    \ ports through.  These were identified\n       during the first ForCES interoperability\
    \ test and documented in\n       the Implementation Report for Forwarding and\
    \ Control Element\n       Separation [RFC6053].\n"
- title: 3.3.  Model
  contents:
  - "3.3.  Model\n   The ForCES model is inherently very dynamic.  Using the basic\
    \ atomic\n   data types that are specified in the model, new atomic (single\n\
    \   valued) and/or compound (structures and arrays) datatypes can be\n   built.\
    \  Thus, developers are free to create their own LFBs.  One\n   other advantage\
    \ that the ForCES model provides is inheritance.  New\n   versions of existing\
    \ LFBs can be created to suit any extra developer\n   requirements.\n   The difficulty\
    \ for a developer is to create an architecture that is\n   completely scalable\
    \ so there is no need to write the same code for\n   new LFBs, new components,\
    \ etc.  Developers can just create code for\n   the defined atomic values, and\
    \ new components can then be built based\n   on already written code, thus reusing\
    \ it.\n   The model itself provides the key, which is inheritance.\n"
- title: 3.3.1.  Components
  contents:
  - "3.3.1.  Components\n   First, a basic component needs to be created as the mother\
    \ of all the\n   components that has the basic parameters of all the components:\n\
    \   o  The ID of the component.\n   o  The access rights of the component.\n \
    \  o  If it is an optional component.\n   o  If it is of variable size.\n   o\
    \  Minimum data size.\n   o  Maximum data size.\n   If the data size of the component\
    \ is not variable, then the size is\n   either the minimum or the maximum size,\
    \ as both should have the same\n   value.\n   Next, some basic functions are in\
    \ order:\n   o  A common constructor.\n   o  A common destructor.\n   o  Retrieve\
    \ Component ID.\n   o  Retrieve access right property.\n   o  Query if it is an\
    \ optional component.\n   o  Get Full Data.\n   o  Set Full Data.\n   o  Get Sparse\
    \ Data.\n   o  Set Sparse Data.\n   o  Del Full Data.\n   o  Del Sparse Data.\n\
    \   o  Get Property.\n   o  Set Property.\n   o  Get Value.\n   o  Set Value.\n\
    \   o  Del Value.\n   o  Get Data.\n   o  Clone component.\n   The Get/Set/Del\
    \ Full Data, Get/Set/Del Sparse Data, and Get/Set\n   Property functions handle\
    \ the respective ForCES commands and return\n   the respective TLV, for example,\
    \ Set Full Data should return a\n   RESULT-TLV.  The Get Value, Set Value, and\
    \ Del Value functions are\n   called from Get Full/Sparse Data, Set Full/Sparse\
    \ Data, and Del Full/\n   Sparse Data respectively and provide the interface to\
    \ the actual\n   values in the hardware, separating the forces handling logic\
    \ from the\n   interface to the actual values.\n   The Get Data function should\
    \ return the value of the data only, not\n   in TLV format.\n   The Clone function\
    \ seems out of place.  This function must return a\n   new component that has\
    \ the exact same values and attributes.  This\n   function is useful in array\
    \ components as described further below.\n   The only requirement is to implement\
    \ the base atomic data types.  Any\n   new atomic datatype can be built as a child\
    \ of a base data type,\n   which will inherit all the functions and, if necessary,\
    \ override\n   them.\n   The struct component can then be built.  A struct component\
    \ is a\n   component by itself but consists of a number of atomic components.\n\
    \   These atomic components create a static array within the struct.  The\n  \
    \ ID of each atomic component is the array's index.  For a struct\n   component,\
    \ the Clone function must create and return an exact copy of\n   the struct component\
    \ with the same static array.\n   The most difficult component to be built is\
    \ the array.  The\n   difficulty lies in the actual benefit of the model: you\
    \ have absolute\n   freedom over what you build.  An array is an array of components.\
    \  In\n   all rows, you have the exact same type of component, either a single\n\
    \   component or a struct.  The struct can have multiple single\n   components\
    \ or a combination of single components, structs, arrays,\n   and so on.  So,\
    \ the difficulty lies in how to create a new row, a new\n   component by itself.\
    \  This is where the Clone function is very\n   useful.  For the array, a mother\
    \ component that can spawn new\n   components exactly like itself is needed. \
    \ Once a Set command is\n   received, the mother component can spawn a new component\
    \ if the\n   targeted row does not exist and add it into the array; with the Set\n\
    \   Full Data function, the value is set in the recently spawned\n   component,\
    \ as the spawned component knows how the data is created.\n   In order to distinguish\
    \ these spawned components from each other and\n   their functionality, some kind\
    \ of index is required that will also\n   reflect how the actual data of the specific\
    \ component is stored on\n   the hardware.\n   Once the basic constructors of\
    \ all possible components are created,\n   then a developer only has to create\
    \ LFB components or datatypes as a\n   child of one of the already-created components,\
    \ and the only thing\n   the developer really needs to add is the three functions\
    \ of Get\n   Value, Set Value, and Del Value of each component, which is platform\n\
    \   dependent.  The rest stays the same.\n"
- title: 3.3.2.  LFBs
  contents:
  - "3.3.2.  LFBs\n   The same architecture in the components can be used for the\
    \ LFBs,\n   allowing a developer to write LFB handling code only once.  The\n\
    \   parent LFB has some basic attributes:\n   o  The LFB Class ID.\n   o  The\
    \ LFB Instance ID.\n   o  An Array of Components.\n   o  An Array of Capabilities.\n\
    \   o  An Array of Events.\n   Following are some common functions:\n   o  Handle\
    \ Configuration Command.\n   o  Handle Query Command.\n   o  Get Class ID.\n \
    \  o  Get Instance ID.\n   Once these are created, each LFB can inherit all these\
    \ from the\n   parent, and the only thing it has to do is add the components that\n\
    \   have already been created.\n   An example can be seen in Figure 1.  The following\
    \ code creates a\n   part of FEProtocolLFB:\n   //FEID\n   cui = new Component_uInt(FEPO_FEID,\
    \ ACCESS_READ_ONLY, FE_id);\n   Components[cui->get_ComponentId()]=cui; //Add\
    \ component to array list\n   //Current FEHB Policy Value\n   cub = new Component_uByte(FEPO_FEHBPolicy,\
    \ ACCESS_READ_WRITE, 0);\n   Components[cub->get_ComponentId()]=cub; //Add component\
    \ to array list\n   //FEIDs for BackupCEs Array\n   cui = new Component_uInt(0,\
    \ ACCESS_READ_WRITE, 0);\n   ca = new Component_Array(FEPO_BackupCEs, ACCESS_READ_WRITE);\n\
    \   ca->AddRow(cui, 1);\n   ca->AddMotherComponent(cui);\n   Components[ca->get_ComponentId()]=ca;\
    \ //Add component to array list\n         Figure 1: Example Code for Creating\
    \ Part of FEProtocolLFB\n   The same concept can be applied to handling LFBs as\
    \ one FE.  An FE is\n   a collection of LFBs.  Thus, all LFBs can be stored in\
    \ an array based\n   on the LFB's class id, version, and instance.  Then, what\
    \ is required\n   is an LFBHandler that will handle the array of LFBs.  A specific\
    \ LFB,\n   for example, can be addressed using the following scheme:\n   LFBs[ClassID][Version][InstanceID]\n\
    \   Note: While an array can be used in components, capabilities, and\n   events,\
    \ a hash table or a similar concept is better suited for\n   storing LFBs using\
    \ the component ID as the hash key with linked lists\n   for collision handling,\
    \ as the created array can have large gaps if\n   the values of LFB Class ID vary\
    \ greatly.\n"
- title: 3.4.  Protocol
  contents:
  - '3.4.  Protocol

    '
- title: 3.4.1.  TLVs
  contents:
  - "3.4.1.  TLVs\n   The goal for protocol handling is to create a general and scalable\n\
    \   architecture that handles all protocol messages instead of something\n   implementation\
    \ specific.  There are certain difficulties that have to\n   be overcome first.\n\
    \   Since the model allows a developer to define any LFB required, the\n   protocol\
    \ has been thus created to give the user the freedom to\n   configure and query\
    \ any component, whatever the underlying model.\n   While this is a strong point\
    \ for the protocol itself, one difficulty\n   lies with the unknown underlying\
    \ model and the unlimited number of\n   types of messages that can be created,\
    \ making creating generic code a\n   daunting task.\n   Additionally, the protocol\
    \ also allows two different path approaches\n   to LFB components, and the CE\
    \ or FE must handle both or even a mix of\n   them, making a generic decoding\
    \ of the protocol message difficult.\n   Another difficulty also arises from the\
    \ batching capabilities of the\n   protocol.  You can have multiple Operations\
    \ within a message; you can\n   select more than one LFB to command and more than\
    \ one component to\n   manipulate.\n   A possible solution is again provided by\
    \ inheritance.  There are two\n   basic components in a protocol message:\n  \
    \ 1.  The common header.\n   2.  The rest of the message.\n   The rest of the\
    \ message is divided in Type-Length-Value (TLV) units\n   and, in one case, Index-Length-Value\
    \ (ILV) units.\n   The TLV hierarchy can be seen in Figure 2:\n              \
    \        Common Header\n                            |\n            +---------------+---------------+---------------+\n\
    \            |               |               |               |\n         REDIRECT-TLV\
    \  LFBselect-TLV   ASResult-TLV   ASTreason-TLV\n                            |\n\
    \                            |\n                        OPER-TLV\n           \
    \                 |\n                            |\n                      PATH-DATA-TLV\
    \  ---> Optional KEYINFO-TLV\n                            |\n              +-------------+-------------+-------------+\n\
    \              |             |             |             |\n          SPARSEDATA-TLV\
    \  RESULT-TLV  FULLDATA-TLV  PATH-DATA-TLV\n                      Figure 2: ForCES\
    \ TLV Hierarchy\n   The above figure shows only the basic hierarchical level of\
    \ TLVs and\n   does not show batching.  Also, this figure does not show the\n\
    \   recursion that can occur at the last level of the hierarchy.  The\n   figure\
    \ shows one kind of recursion with a PATH-DATA-TLV within a\n   PATH-DATA-TLV.\
    \  A FULLDATA-TLV can be within a FULLDATA-TLV and a\n   SPARSEDATA-TLV.  The\
    \ possible combination of TLVs are described in\n   detail in the Forwarding and\
    \ Control Element Separation Protocol\n   [RFC5810] as well as the data-packing\
    \ rules.\n   A TLV's main attributes are:\n   o  Type.\n   o  Length.\n   o  Data.\n\
    \   o  An array of TLVs.\n   The array of TLVs is the next hierarchical level\
    \ of TLVs nested in\n   this TLV.\n   A TLV's common function could be:\n   o\
    \  A basic constructor.\n   o  A constructor using data from the wire.\n   o \
    \ Add a new TLV for next level.\n   o  Get the next TLV of next level.\n   o \
    \ Get a specific TLV of next level.\n   o  Replace a TLV of next level.\n   o\
    \  Get the Data.\n   o  Get the Length.\n   o  Set the Data.\n   o  Set the Length.\n\
    \   o  Set the Type.\n   o  Serialize the header.\n   o  Serialize the TLV to\
    \ be written on the wire.\n   All TLVs inherit these functions and attributes\
    \ and either override\n   them or create new where it is required.\n"
- title: 3.4.2.  Message Deserialization
  contents:
  - "3.4.2.  Message Deserialization\n   Following is an algorithm for deserializing\
    \ any protocol message:\n   1.  Get the message header.\n   2.  Read the length.\n\
    \   3.  Check the message type to understand what kind of message this\n     \
    \  is.\n   4.  If the length is larger than the message header, then there is\n\
    \       data for this message.\n   5.  A check can be made here regarding the\
    \ message type and the\n       length of the message.\n   If the message is a\
    \ Query or Config type, then there are LFBselect-\n   TLVs for this level:\n \
    \  1.  Read the next 2 shorts(type-length).  If the type is an\n       LFBselect-TLV,\
    \ then the message is valid.\n   2.  Read the necessary length for this LFBselect-TLV,\
    \ and create the\n       LFBselect-TLV from the data of the wire.\n   3.  Add\
    \ this LFBselect-TLV to the main header array of LFBselect-\n       TLVs.\n  \
    \ 4.  Repeat all above steps until the rest of the message has\n       finished.\n\
    \   The next level of TLVs is OPER-TLVs.\n   1.  Read the next 2 shorts(type-length).\
    \  If the type is an OPER-TLV,\n       then the message is valid.\n   2.  Read\
    \ the necessary length for this OPER-TLV, and create the OPER-\n       TLV from\
    \ the data of the wire.\n   3.  Add this OPER-TLV to the LFBselect-TLV array of\
    \ TLVs.\n   4.  Do this until the rest of the LFBselect-TLV has finished.\n  \
    \ The next level of TLVs is PATH-DATA-TLVs.\n   1.  Read the next 2 shorts(type-length).\
    \  If the type is a PATH-DATA-\n       TLV, then the message is valid.\n   2.\
    \  Read the necessary length for this PATH-DATA-TLV, and create the\n       PATH-DATA-TLV\
    \ from the data of the wire.\n   3.  Add this PATH-DATA-TLV to the OPER-TLV's\
    \ array of TLVs.\n   4.  Do this until the rest of the OPER-TLV is finished.\n\
    \   Here it gets interesting, as the next level of PATH-DATA-TLVs can be\n   one\
    \ of the following:\n   o  PATH-DATA-TLVs.\n   o  FULLDATA-TLV.\n   o  SPARSEDATA-TLV.\n\
    \   o  RESULT-TLV.\n   The solution to this difficulty is recursion.  If the next\
    \ TLV is a\n   PATH-DATA-TLV, then the PATH-DATA-TLV that is created uses the\
    \ same\n   kind of deserialization until it reaches a FULLDATA-TLV or\n   SPARSEDATA-TLV.\
    \  There can be only one FULLDATA-TLV or SPARSEDATA-TLV\n   within a PATH-DATA-TLV.\n\
    \   1.  Read the next 2 shorts(type-length).\n   2.  If the Type is a PATH-DATA-TLV,\
    \ then repeat the previous\n       algorithm but add the PATH-DATA-TLV to this\
    \ PATH-DATA-TLV's array\n       of TLVs.\n   3.  Do this until the rest of the\
    \ PATH-DATA-TLV is finished.\n   4.  If the Type is a FULLDATA-TLV, then create\
    \ the FULLDATA-TLV from\n       the message and add this to the PATH-DATA-TLV's\
    \ array of TLVs.\n   5.  If the Type is a SPARSEDATA-TLV, then create the SPARSEDATA-TLV\n\
    \       from the message and add this to the PATH-DATA-TLV's array of\n      \
    \ TLVs.\n   6.  If the Type is a RESULT-TLV, then create the RESULT-TLV from the\n\
    \       message and add this to the PATH-DATA-TLV's array of TLVs.\n   If the\
    \ message is a Query, it must not have any kind of data inside\n   the PATH-DATA-TLV.\n\
    \   If the message is a Query Response, then it must have either a\n   RESULT-TLV\
    \ or a FULLDATA-TLV.\n   If the message is a Config, it must contain either a\
    \ FULLDATA-TLV or\n   a SPARSEDATA-TLV.\n   If the message is a Config Response,\
    \ it must contain a RESULT-TLV.\n   More details regarding message validation\
    \ can be read in Section 7 of\n   the Forwarding and Control Element Separation\
    \ Protocol [RFC5810].\n   Note: When deserializing, implementors must take care\
    \ to ignore\n   padding of TLVs as all must be 32-bit aligned.  The length value\
    \ in\n   TLVs includes the Type and Length (4 bytes) but does not include\n  \
    \ padding.\n"
- title: 3.4.3.  Message Serialization
  contents:
  - "3.4.3.  Message Serialization\n   The same concept can be applied in the message\
    \ creation process.\n   Having the TLVs ready, a developer can go bottom up. \
    \ All that is\n   required is the serialization function that will transform the\
    \ TLV\n   into bytes ready to be transferred on the network.\n   For example,\
    \ for the creation of a simple query from the CE to the\n   FE, all the PATH-DATA-TLVs\
    \ are created.  Then they will be serialized\n   and inserted into an OPER-TLV,\
    \ which in turn will be serialized and\n   inserted into an LFBselect-TLV.  The\
    \ LFBselect-TLV will then be\n   serialized and entered into the Common Header,\
    \ which will be passed\n   to the TML to be transported to the FE.\n   Having\
    \ an array of TLVs inside a TLV that is next in the TLV\n   hierarchy allows the\
    \ developer to insert any number of next-level\n   TLVs, thus creating any kind\
    \ of message.\n   Note: When the TLV is serialized to be written on the wire,\n\
    \   implementors must take care to include padding to TLVs as all must be\n  \
    \ 32-bit aligned.\n"
- title: 4.  Development Platforms
  contents:
  - "4.  Development Platforms\n   Any development platform that can support the SCTP\
    \ TML and the TML of\n   the developer's choosing is available for use.\n   Figure\
    \ 3 provides an initial survey of SCTP support for C/C++ and\n   Java at the present\
    \ time.\n         /-------------+-------------+-------------+-------------\\\n\
    \         |\\ Platform   |             |             |             |\n       \
    \  | ----------\\ |   Windows   |    Linux    |   Solaris   |\n         |  Language\
    \  \\|             |             |             |\n         +-------------+-------------+-------------+-------------+\n\
    \         |             |             |             |             |\n        \
    \ |    C/C++    |  Supported  |  Supported  |  Supported  |\n         |      \
    \       |             |             |             |\n         +-------------+-------------+-------------+-------------+\n\
    \         |             |   Limited   |             |             |\n        \
    \ |    Java     | Third Party |  Supported  |  Supported  |\n         |      \
    \       | Not from SUN|             |             |\n         \\-------------+-------------+-------------+-------------/\n\
    \                Figure 3: SCTP Support on Operating Systems\n   A developer should\
    \ be aware of some limitations regarding Java\n   implementations.\n   Java inherently\
    \ does not support unsigned types.  A workaround can be\n   found in the creation\
    \ of classes that do the translation of unsigned\n   types to Java types.  The\
    \ problem is that the unsigned long cannot be\n   used as-is in the Java platform.\
    \  The proposed set of classes can be\n   found in [JavaUnsignedTypes].\n"
- title: 5.  Acknowledgements
  contents:
  - "5.  Acknowledgements\n   The authors would like to thank Adrian Farrel for sponsoring\
    \ this\n   document and Jamal Hadi Salim for discussions that made this document\n\
    \   better.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   Developers of ForCES FEs and CEs must take the\
    \ Security\n   Considerations of the Forwarding and Control Element Separation\n\
    \   Framework [RFC3746] and the Forwarding and Control Element Separation\n  \
    \ Protocol [RFC5810] into account.\n   Also, as specified in the Security Considerations\
    \ section of the\n   SCTP-Based Transport Mapping Layer (TML) for the Forwarding\
    \ and\n   Control Element Separation Protocol [RFC5811], transport-level\n   security\
    \ has to be ensured by IPsec.\n"
- title: 7.  References
  contents:
  - '7.  References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [RFC5810]  Doria, A., Hadi Salim, J., Haas, R.,\
    \ Khosravi, H., Wang,\n              W., Dong, L., Gopal, R., and J. Halpern,\
    \ \"Forwarding and\n              Control Element Separation (ForCES) Protocol\n\
    \              Specification\", RFC 5810, March 2010.\n   [RFC5811]  Hadi Salim,\
    \ J. and K. Ogawa, \"SCTP-Based Transport Mapping\n              Layer (TML) for\
    \ the Forwarding and Control Element\n              Separation (ForCES) Protocol\"\
    , RFC 5811, March 2010.\n   [RFC5812]  Halpern, J. and J. Hadi Salim, \"Forwarding\
    \ and Control\n              Element Separation (ForCES) Forwarding Element Model\"\
    ,\n              RFC 5812, March 2010.\n   [RFC6041]  Crouch, A., Khosravi, H.,\
    \ Doria, A., Wang, X., and K.\n              Ogawa, \"Forwarding and Control Element\
    \ Separation (ForCES)\n              Applicability Statement\", RFC 6041, October\
    \ 2010.\n   [RFC6053]  Haleplidis, E., Ogawa, K., Wang, W., and J. Hadi Salim,\n\
    \              \"Implementation Report for Forwarding and Control Element\n  \
    \            Separation (ForCES)\", RFC 6053, November 2010.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [JavaUnsignedTypes]\n              \"Java Unsigned\
    \ Types\",\n              <http://nam.ece.upatras.gr/index.php?q=node/44>.\n \
    \  [RFC3654]  Khosravi, H. and T. Anderson, \"Requirements for Separation\n  \
    \            of IP Control and Forwarding\", RFC 3654, November 2003.\n   [RFC3746]\
    \  Yang, L., Dantu, R., Anderson, T., and R. Gopal,\n              \"Forwarding\
    \ and Control Element Separation (ForCES)\n              Framework\", RFC 3746,\
    \ April 2004.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Evangelos Haleplidis\n   University of Patras\n   Department\
    \ of Electrical & Computer Engineering\n   Patras  26500\n   Greece\n   EMail:\
    \ ehalep@ece.upatras.gr\n   Odysseas Koufopavlou\n   University of Patras\n  \
    \ Department of Electrical & Computer Engineering\n   Patras  26500\n   Greece\n\
    \   EMail: odysseas@ece.upatras.gr\n   Spyros Denazis\n   University of Patras\n\
    \   Department of Electrical & Computer Engineering\n   Patras  26500\n   Greece\n\
    \   EMail: sdena@upatras.gr\n"
