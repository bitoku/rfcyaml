- title: __initial_text__
  contents:
  - '            Ad hoc On-Demand Distance Vector (AODV) Routing

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  It does not specify an Internet standard of any kind.\n   Discussion\
    \ and suggestions for improvement are requested.\n   Distribution of this memo\
    \ is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The Ad hoc On-Demand Distance Vector (AODV) routing protocol is\n\
    \   intended for use by mobile nodes in an ad hoc network.  It offers\n   quick\
    \ adaptation to dynamic link conditions, low processing and\n   memory overhead,\
    \ low network utilization, and determines unicast\n   routes to destinations within\
    \ the ad hoc network.  It uses\n   destination sequence numbers to ensure loop\
    \ freedom at all times\n   (even in the face of anomalous delivery of routing\
    \ control messages),\n   avoiding problems (such as \"counting to infinity\")\
    \ associated with\n   classical distance vector protocols.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n       5.4. Route Reply Acknowledgment (RREP-ACK) Message\
    \ Format .. 11\n       6.3. Generating Route Requests .............................\
    \ 14\n       6.4. Controlling Dissemination of Route Request Messages ... 15\n\
    \       6.5. Processing and Forwarding Route Requests .............. 16\n    \
    \   6.6. Generating Route Replies .............................. 18\n        \
    \    6.6.1. Route Reply Generation by the Destination ...... 18\n            6.6.2.\
    \ Route Reply Generation by an Intermediate\n                   Node ...........................................\
    \ 19\n            6.6.3. Generating Gratuitous RREPs .................... 19\n\
    \       6.7. Receiving and Forwarding Route Replies ................ 20\n    \
    \   6.8. Operation over Unidirectional Links ................... 21\n       6.9.\
    \ Hello Messages ........................................ 22\n       6.10 Maintaining\
    \ Local Connectivity ........................ 23\n       6.11 Route Error (RERR)\
    \ Messages, Route Expiry and Route\n            Deletion ..............................................\
    \ 24\n       6.12 Local Repair .......................................... 26\n\
    \       6.13 Actions After Reboot  ................................. 27\n    \
    \   6.14 Interfaces ............................................ 28\n   7.  AODV\
    \ and Aggregated Networks ............................... 28\n   8.  Using AODV\
    \ with Other Networks ............................. 29\n   9.  Extensions .................................................\
    \ 30\n       9.1. Hello Interval Extension Format ....................... 30\n\
    \   10. Configuration Parameters ................................... 31\n   11.\
    \ Security Considerations .................................... 33\n   12. IANA\
    \ Considerations ........................................ 34\n   13. IPv6 Considerations\
    \ ........................................ 34\n   14. Acknowledgments ............................................\
    \ 34\n   15. Normative References ....................................... 35\n\
    \   16. Informative References ..................................... 35\n   17.\
    \ Authors' Addresses ......................................... 36\n   18. Full\
    \ Copyright Statement ................................... 37\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The Ad hoc On-Demand Distance Vector (AODV) algorithm enables\n\
    \   dynamic, self-starting, multihop routing between participating mobile\n  \
    \ nodes wishing to establish and maintain an ad hoc network.  AODV\n   allows\
    \ mobile nodes to obtain routes quickly for new destinations,\n   and does not\
    \ require nodes to maintain routes to destinations that\n   are not in active\
    \ communication.  AODV allows mobile nodes to respond\n   to link breakages and\
    \ changes in network topology in a timely manner.\n   The operation of AODV is\
    \ loop-free, and by avoiding the Bellman-Ford\n   \"counting to infinity\" problem\
    \ offers quick convergence when the ad\n   hoc network topology changes (typically,\
    \ when a node moves in the\n   network).  When links break, AODV causes the affected\
    \ set of nodes to\n   be notified so that they are able to invalidate the routes\
    \ using the\n   lost link.\n   One distinguishing feature of AODV is its use of\
    \ a destination\n   sequence number for each route entry.  The destination sequence\n\
    \   number is created by the destination to be included along with any\n   route\
    \ information it sends to requesting nodes.  Using destination\n   sequence numbers\
    \ ensures loop freedom and is simple to program.\n   Given the choice between\
    \ two routes to a destination, a requesting\n   node is required to select the\
    \ one with the greatest sequence number.\n"
- title: 2. Overview
  contents:
  - "2. Overview\n   Route Requests (RREQs), Route Replies (RREPs), and Route Errors\n\
    \   (RERRs) are the message types defined by AODV.  These message types\n   are\
    \ received via UDP, and normal IP header processing applies. So,\n   for instance,\
    \ the requesting node is expected to use its IP address\n   as the Originator\
    \ IP address for the messages.  For broadcast\n   messages, the IP limited broadcast\
    \ address (255.255.255.255) is used.\n   This means that such messages are not\
    \ blindly forwarded.  However,\n   AODV operation does require certain messages\
    \ (e.g., RREQ) to be\n   disseminated widely, perhaps throughout the ad hoc network.\
    \  The\n   range of dissemination of such RREQs is indicated by the TTL in the\n\
    \   IP header.  Fragmentation is typically not required.\n   As long as the endpoints\
    \ of a communication connection have valid\n   routes to each other, AODV does\
    \ not play any role.  When a route to a\n   new destination is needed, the node\
    \ broadcasts a RREQ to find a route\n   to the destination.  A route can be determined\
    \ when the RREQ reaches\n   either the destination itself, or an intermediate\
    \ node with a 'fresh\n   enough' route to the destination.  A 'fresh enough' route\
    \ is a valid\n   route entry for the destination whose associated sequence number\
    \ is\n   at least as great as that contained in the RREQ.  The route is made\n\
    \   available by unicasting a RREP back to the origination of the RREQ.\n   Each\
    \ node receiving the request caches a route back to the originator\n   of the\
    \ request, so that the RREP can be unicast from the destination\n   along a path\
    \ to that originator, or likewise from any intermediate\n   node that is able\
    \ to satisfy the request.\n   Nodes monitor the link status of next hops in active\
    \ routes.  When a\n   link break in an active route is detected, a RERR message\
    \ is used to\n   notify other nodes that the loss of that link has occurred. \
    \ The RERR\n   message indicates those destinations (possibly subnets) which are\
    \ no\n   longer reachable by way of the broken link.  In order to enable this\n\
    \   reporting mechanism, each node keeps a \"precursor list\", containing\n  \
    \ the IP address for each its neighbors that are likely to use it as a\n   next\
    \ hop towards each destination.  The information in the precursor\n   lists is\
    \ most easily acquired during the processing for generation of\n   a RREP message,\
    \ which by definition has to be sent to a node in a\n   precursor list (see section\
    \ 6.6).  If the RREP has a nonzero prefix\n   length, then the originator of the\
    \ RREQ which solicited the RREP\n   information is included among the precursors\
    \ for the subnet route\n   (not specifically for the particular destination).\n\
    \   A RREQ may also be received for a multicast IP address.  In this\n   document,\
    \ full processing for such messages is not specified.  For\n   example, the originator\
    \ of such a RREQ for a multicast IP address may\n   have to follow special rules.\
    \  However, it is important to enable\n   correct multicast operation by intermediate\
    \ nodes that are not\n   enabled as originating or destination nodes for IP multicast\n\
    \   addresses, and likewise are not equipped for any special multicast\n   protocol\
    \ processing.  For such multicast-unaware nodes, processing\n   for a multicast\
    \ IP address as a destination IP address MUST be\n   carried out in the same way\
    \ as for any other destination IP address.\n   AODV is a routing protocol, and\
    \ it deals with route table management.\n   Route table information must be kept\
    \ even for short-lived routes,\n   such as are created to temporarily store reverse\
    \ paths towards nodes\n   originating RREQs.  AODV uses the following fields with\
    \ each route\n   table entry:\n   -  Destination IP Address\n   -  Destination\
    \ Sequence Number\n   -  Valid Destination Sequence Number flag\n   -  Other state\
    \ and routing flags (e.g., valid, invalid, repairable,\n      being repaired)\n\
    \   -  Network Interface\n   -  Hop Count (number of hops needed to reach destination)\n\
    \   -  Next Hop\n   -  List of Precursors (described in Section 6.2)\n   -  Lifetime\
    \ (expiration or deletion time of the route)\n   Managing the sequence number\
    \ is crucial to avoiding routing loops,\n   even when links break and a node is\
    \ no longer reachable to supply its\n   own information about its sequence number.\
    \  A destination becomes\n   unreachable when a link breaks or is deactivated.\
    \  When these\n   conditions occur, the route is invalidated by operations involving\n\
    \   the sequence number and marking the route table entry state as\n   invalid.\
    \  See section 6.1 for details.\n"
- title: 3. AODV Terminology
  contents:
  - "3. AODV Terminology\n   This protocol specification uses conventional meanings\
    \ [1] for\n   capitalized words such as MUST, SHOULD, etc., to indicate requirement\n\
    \   levels for various protocol features.  This section defines other\n   terminology\
    \ used with AODV that is not already defined in [3].\n      active route\n   \
    \      A route towards a destination that has a routing table entry\n        \
    \ that is marked as valid.  Only active routes can be used to\n         forward\
    \ data packets.\n      broadcast\n         Broadcasting means transmitting to\
    \ the IP Limited Broadcast\n         address, 255.255.255.255.  A broadcast packet\
    \ may not be\n         blindly forwarded, but broadcasting is useful to enable\n\
    \         dissemination of AODV messages throughout the ad hoc network.\n    \
    \  destination\n         An IP address to which data packets are to be transmitted.\n\
    \         Same as \"destination node\".  A node knows it is the destination\n\
    \         node for a typical data packet when its address appears in the\n   \
    \      appropriate field of the IP header.  Routes for destination\n         nodes\
    \ are supplied by action of the AODV protocol, which\n         carries the IP\
    \ address of the desired destination node in route\n         discovery messages.\n\
    \      forwarding node\n         A node that agrees to forward packets destined\
    \ for another\n         node, by retransmitting them to a next hop that is closer\
    \ to\n         the unicast destination along a path that has been set up using\n\
    \         routing control messages.\n      forward route\n         A route set\
    \ up to send data packets from a node originating a\n         Route Discovery\
    \ operation towards its desired destination.\n      invalid route\n         A\
    \ route that has expired, denoted by a state of invalid in the\n         routing\
    \ table entry.  An invalid route is used to store\n         previously valid route\
    \ information for an extended period of\n         time.  An invalid route cannot\
    \ be used to forward data packets,\n         but it can provide information useful\
    \ for route repairs, and\n         also for future RREQ messages.\n      originating\
    \ node\n         A node that initiates an AODV route discovery message to be\n\
    \         processed and possibly retransmitted by other nodes in the ad\n    \
    \     hoc network.  For instance, the node initiating a Route\n         Discovery\
    \ process and broadcasting the RREQ message is called\n         the originating\
    \ node of the RREQ message.\n      reverse route\n         A route set up to forward\
    \ a reply (RREP) packet back to the\n         originator from the destination\
    \ or from an intermediate node\n         having a route to the destination.\n\
    \      sequence number\n         A monotonically increasing number maintained\
    \ by each\n         originating node.  In AODV routing protocol messages, it is\n\
    \         used by other nodes to determine the freshness of the\n         information\
    \ contained from the originating node.\n      valid route\n         See active\
    \ route.\n"
- title: 4. Applicability Statement
  contents:
  - "4. Applicability Statement\n   The AODV routing protocol is designed for mobile\
    \ ad hoc networks with\n   populations of tens to thousands of mobile nodes. \
    \ AODV can handle\n   low, moderate, and relatively high mobility rates, as well\
    \ as a\n   variety of data traffic levels.  AODV is designed for use in networks\n\
    \   where the nodes can all trust each other, either by use of\n   preconfigured\
    \ keys, or because it is known that there are no\n   malicious intruder nodes.\
    \  AODV has been designed to reduce the\n   dissemination of control traffic and\
    \ eliminate overhead on data\n   traffic, in order to improve scalability and\
    \ performance.\n"
- title: 5. Message Formats
  contents:
  - '5. Message Formats

    '
- title: 5.1. Route Request (RREQ) Message Format
  contents:
  - "5.1. Route Request (RREQ) Message Format\n    0                   1         \
    \          2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |J|R|G|D|U|   Reserved          |   Hop Count   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                            RREQ ID                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Destination IP Address                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Destination Sequence Number                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Originator IP Address                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Originator Sequence Number                   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The format of the Route Request message is illustrated above, and\n   contains\
    \ the following fields:\n      Type           1\n      J              Join flag;\
    \ reserved for multicast.\n      R              Repair flag; reserved for multicast.\n\
    \      G              Gratuitous RREP flag; indicates whether a\n            \
    \         gratuitous RREP should be unicast to the node\n                    \
    \ specified in the Destination IP Address field (see\n                     sections\
    \ 6.3, 6.6.3).\n      D              Destination only flag; indicates only the\n\
    \                     destination may respond to this RREQ (see\n            \
    \         section 6.5).\n      U              Unknown sequence number; indicates\
    \ the destination\n                     sequence number is unknown (see section\
    \ 6.3).\n      Reserved       Sent as 0; ignored on reception.\n      Hop Count\
    \      The number of hops from the Originator IP Address\n                   \
    \  to the node handling the request.\n      RREQ ID        A sequence number uniquely\
    \ identifying the\n                     particular RREQ when taken in conjunction\
    \ with the\n                     originating node's IP address.\n      Destination\
    \ IP Address\n                     The IP address of the destination for which\
    \ a route\n                     is desired.\n      Destination Sequence Number\n\
    \                     The latest sequence number received in the past\n      \
    \               by the originator for any route towards the\n                \
    \     destination.\n      Originator IP Address\n                     The IP address\
    \ of the node which originated the\n                     Route Request.\n    \
    \  Originator Sequence Number\n                     The current sequence number\
    \ to be used in the route\n                     entry pointing towards the originator\
    \ of the route\n                     request.\n"
- title: 5.2. Route Reply (RREP) Message Format
  contents:
  - "5.2. Route Reply (RREP) Message Format\n    0                   1           \
    \        2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |R|A|    Reserved     |Prefix Sz|   Hop Count   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                     Destination IP address                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                  Destination Sequence Number                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                    Originator IP address                      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                           Lifetime                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The format of the Route Reply message is illustrated above, and\n   contains\
    \ the following fields:\n      Type          2\n      R             Repair flag;\
    \ used for multicast.\n      A             Acknowledgment required; see sections\
    \ 5.4 and 6.7.\n      Reserved      Sent as 0; ignored on reception.\n      Prefix\
    \ Size   If nonzero, the 5-bit Prefix Size specifies that the\n              \
    \      indicated next hop may be used for any nodes with\n                   \
    \ the same routing prefix (as defined by the Prefix\n                    Size)\
    \ as the requested destination.\n      Hop Count     The number of hops from the\
    \ Originator IP Address\n                    to the Destination IP Address.  For\
    \ multicast route\n                    requests this indicates the number of hops\
    \ to the\n                    multicast tree member sending the RREP.\n      Destination\
    \ IP Address\n                    The IP address of the destination for which\
    \ a route\n                    is supplied.\n      Destination Sequence Number\n\
    \                    The destination sequence number associated to the\n     \
    \               route.\n      Originator IP Address\n                    The IP\
    \ address of the node which originated the RREQ\n                    for which\
    \ the route is supplied.\n      Lifetime      The time in milliseconds for which\
    \ nodes receiving\n                    the RREP consider the route to be valid.\n\
    \   Note that the Prefix Size allows a subnet router to supply a route\n   for\
    \ every host in the subnet defined by the routing prefix, which is\n   determined\
    \ by the IP address of the subnet router and the Prefix\n   Size.  In order to\
    \ make use of this feature, the subnet router has to\n   guarantee reachability\
    \ to all the hosts sharing the indicated subnet\n   prefix.  See section 7 for\
    \ details.  When the prefix size is nonzero,\n   any routing information (and\
    \ precursor data) MUST be kept with\n   respect to the subnet route, not the individual\
    \ destination IP\n   address on that subnet.\n   The 'A' bit is used when the\
    \ link over which the RREP message is sent\n   may be unreliable or unidirectional.\
    \  When the RREP message contains\n   the 'A' bit set, the receiver of the RREP\
    \ is expected to return a\n   RREP-ACK message.  See section 6.8.\n"
- title: 5.3. Route Error (RERR) Message Format
  contents:
  - "5.3. Route Error (RERR) Message Format\n    0                   1           \
    \        2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |N|          Reserved           |   DestCount   |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |            Unreachable Destination IP Address (1)             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |         Unreachable Destination Sequence Number (1)           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n\
    \   |  Additional Unreachable Destination IP Addresses (if needed)  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |Additional Unreachable Destination Sequence Numbers (if needed)|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The format of the Route Error message is illustrated above, and\n   contains\
    \ the following fields:\n      Type        3\n      N           No delete flag;\
    \ set when a node has performed a local\n                  repair of a link, and\
    \ upstream nodes should not delete\n                  the route.\n      Reserved\
    \    Sent as 0; ignored on reception.\n      DestCount   The number of unreachable\
    \ destinations included in the\n                  message; MUST be at least 1.\n\
    \      Unreachable Destination IP Address\n                  The IP address of\
    \ the destination that has become\n                  unreachable due to a link\
    \ break.\n      Unreachable Destination Sequence Number\n                  The\
    \ sequence number in the route table entry for\n                  the destination\
    \ listed in the previous Unreachable\n                  Destination IP Address\
    \ field.\n   The RERR message is sent whenever a link break causes one or more\n\
    \   destinations to become unreachable from some of the node's neighbors.\n  \
    \ See section 6.2 for information about how to maintain the appropriate\n   records\
    \ for this determination, and section 6.11 for specification\n   about how to\
    \ create the list of destinations.\n"
- title: 5.4. Route Reply Acknowledgment (RREP-ACK) Message Format
  contents:
  - "5.4. Route Reply Acknowledgment (RREP-ACK) Message Format\n   The Route Reply\
    \ Acknowledgment (RREP-ACK) message MUST be sent in\n   response to a RREP message\
    \ with the 'A' bit set (see section 5.2).\n   This is typically done when there\
    \ is danger of unidirectional links\n   preventing the completion of a Route Discovery\
    \ cycle (see section\n   6.8).\n    0                   1\n    0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |     Type      |\
    \   Reserved    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      Type        4\n\
    \      Reserved    Sent as 0; ignored on reception.\n"
- title: 6. AODV Operation
  contents:
  - "6. AODV Operation\n   This section describes the scenarios under which nodes\
    \ generate Route\n   Request (RREQ), Route Reply (RREP) and Route Error (RERR)\
    \ messages\n   for unicast communication towards a destination, and how the message\n\
    \   data are handled.  In order to process the messages correctly,\n   certain\
    \ state information has to be maintained in the route table\n   entries for the\
    \ destinations of interest.\n   All AODV messages are sent to port 654 using UDP.\n"
- title: 6.1. Maintaining Sequence Numbers
  contents:
  - "6.1. Maintaining Sequence Numbers\n   Every route table entry at every node MUST\
    \ include the latest\n   information available about the sequence number for the\
    \ IP address of\n   the destination node for which the route table entry is maintained.\n\
    \   This sequence number is called the \"destination sequence number\".  It\n\
    \   is updated whenever a node receives new (i.e., not stale) information\n  \
    \ about the sequence number from RREQ, RREP, or RERR messages that may\n   be\
    \ received related to that destination.  AODV depends on each node\n   in the\
    \ network to own and maintain its destination sequence number to\n   guarantee\
    \ the loop-freedom of all routes towards that node.  A\n   destination node increments\
    \ its own sequence number in two\n   circumstances:\n   -  Immediately before\
    \ a node originates a route discovery, it MUST\n      increment its own sequence\
    \ number.  This prevents conflicts with\n      previously established reverse\
    \ routes towards the originator of a\n      RREQ.\n   -  Immediately before a\
    \ destination node originates a RREP in\n      response to a RREQ, it MUST update\
    \ its own sequence number to the\n      maximum of its current sequence number\
    \ and the destination\n      sequence number in the RREQ packet.\n   When the\
    \ destination increments its sequence number, it MUST do so by\n   treating the\
    \ sequence number value as if it were an unsigned number.\n   To accomplish sequence\
    \ number rollover, if the sequence number has\n   already been assigned to be\
    \ the largest possible number representable\n   as a 32-bit unsigned integer (i.e.,\
    \ 4294967295), then when it is\n   incremented it will then have a value of zero\
    \ (0).  On the other\n   hand, if the sequence number currently has the value\
    \ 2147483647,\n   which is the largest possible positive integer if 2's complement\n\
    \   arithmetic is in use with 32-bit integers, the next value will be\n   2147483648,\
    \ which is the most negative possible integer in the same\n   numbering system.\
    \  The representation of negative numbers is not\n   relevant to the increment\
    \ of AODV sequence numbers.  This is in\n   contrast to the manner in which the\
    \ result of comparing two AODV\n   sequence numbers is to be treated (see below).\n\
    \   In order to ascertain that information about a destination is not\n   stale,\
    \ the node compares its current numerical value for the sequence\n   number with\
    \ that obtained from the incoming AODV message.  This\n   comparison MUST be done\
    \ using signed 32-bit arithmetic, this is\n   necessary to accomplish sequence\
    \ number rollover.  If the result of\n   subtracting the currently stored sequence\
    \ number from the value of\n   the incoming sequence number is less than zero,\
    \ then the information\n   related to that destination in the AODV message MUST\
    \ be discarded,\n   since that information is stale compared to the node's currently\n\
    \   stored information.\n   The only other circumstance in which a node may change\
    \ the\n   destination sequence number in one of its route table entries is in\n\
    \   response to a lost or expired link to the next hop towards that\n   destination.\
    \  The node determines which destinations use a particular\n   next hop by consulting\
    \ its routing table.  In this case, for each\n   destination that uses the next\
    \ hop, the node increments the sequence\n   number and marks the route as invalid\
    \ (see also sections 6.11, 6.12).\n   Whenever any fresh enough (i.e., containing\
    \ a sequence number at\n   least equal to the recorded sequence number) routing\
    \ information for\n   an affected destination is received by a node that has marked\
    \ that\n   route table entry as invalid, the node SHOULD update its route table\n\
    \   information according to the information contained in the update.\n   A node\
    \ may change the sequence number in the routing table entry of a\n   destination\
    \ only if:\n   -  it is itself the destination node, and offers a new route to\n\
    \      itself, or\n   -  it receives an AODV message with new information about\
    \ the\n      sequence number for a destination node, or\n   -  the path towards\
    \ the destination node expires or breaks.\n"
- title: 6.2. Route Table Entries and Precursor Lists
  contents:
  - "6.2. Route Table Entries and Precursor Lists\n   When a node receives an AODV\
    \ control packet from a neighbor, or\n   creates or updates a route for a particular\
    \ destination or subnet, it\n   checks its route table for an entry for the destination.\
    \  In the\n   event that there is no corresponding entry for that destination,\
    \ an\n   entry is created.  The sequence number is either determined from the\n\
    \   information contained in the control packet, or else the valid\n   sequence\
    \ number field is set to false.  The route is only updated if\n   the new sequence\
    \ number is either\n   (i)       higher than the destination sequence number in\
    \ the route\n             table, or\n   (ii)      the sequence numbers are equal,\
    \ but the hop count (of the\n             new information) plus one, is smaller\
    \ than the existing hop\n             count in the routing table, or\n   (iii)\
    \     the sequence number is unknown.\n   The Lifetime field of the routing table\
    \ entry is either determined\n   from the control packet, or it is initialized\
    \ to\n   ACTIVE_ROUTE_TIMEOUT.  This route may now be used to send any queued\n\
    \   data packets and fulfills any outstanding route requests.\n   Each time a\
    \ route is used to forward a data packet, its Active Route\n   Lifetime field\
    \ of the source, destination and the next hop on the\n   path to the destination\
    \ is updated to be no less than the current\n   time plus ACTIVE_ROUTE_TIMEOUT.\
    \  Since the route between each\n   originator and destination pair is expected\
    \ to be symmetric, the\n   Active Route Lifetime for the previous hop, along the\
    \ reverse path\n   back to the IP source, is also updated to be no less than the\
    \ current\n   time plus ACTIVE_ROUTE_TIMEOUT.  The lifetime for an Active Route\
    \ is\n   updated each time the route is used regardless of whether the\n   destination\
    \ is a single node or a subnet.\n   For each valid route maintained by a node\
    \ as a routing table entry,\n   the node also maintains a list of precursors that\
    \ may be forwarding\n   packets on this route.  These precursors will receive\
    \ notifications\n   from the node in the event of detection of the loss of the\
    \ next hop\n   link.  The list of precursors in a routing table entry contains\
    \ those\n   neighboring nodes to which a route reply was generated or forwarded.\n"
- title: 6.3. Generating Route Requests
  contents:
  - "6.3. Generating Route Requests\n   A node disseminates a RREQ when it determines\
    \ that it needs a route\n   to a destination and does not have one available.\
    \  This can happen if\n   the destination is previously unknown to the node, or\
    \ if a previously\n   valid route to the destination expires or is marked as invalid.\
    \  The\n   Destination Sequence Number field in the RREQ message is the last\n\
    \   known destination sequence number for this destination and is copied\n   from\
    \ the Destination Sequence Number field in the routing table.  If\n   no sequence\
    \ number is known, the unknown sequence number flag MUST be\n   set.  The Originator\
    \ Sequence Number in the RREQ message is the\n   node's own sequence number, which\
    \ is incremented prior to insertion\n   in a RREQ.  The RREQ ID field is incremented\
    \ by one from the last\n   RREQ ID used by the current node.  Each node maintains\
    \ only one RREQ\n   ID.  The Hop Count field is set to zero.\n   Before broadcasting\
    \ the RREQ, the originating node buffers the RREQ\n   ID and the Originator IP\
    \ address (its own address) of the RREQ for\n   PATH_DISCOVERY_TIME.  In this\
    \ way, when the node receives the packet\n   again from its neighbors, it will\
    \ not reprocess and re-forward the\n   packet.\n   An originating node often expects\
    \ to have bidirectional\n   communications with a destination node.  In such cases,\
    \ it is not\n   sufficient for the originating node to have a route to the\n \
    \  destination node; the destination must also have a route back to the\n   originating\
    \ node.  In order for this to happen as efficiently as\n   possible, any generation\
    \ of a RREP by an intermediate node (as in\n   section 6.6) for delivery to the\
    \ originating node SHOULD be\n   accompanied by some action that notifies the\
    \ destination about a\n   route back to the originating node.  The originating\
    \ node selects\n   this mode of operation in the intermediate nodes by setting\
    \ the 'G'\n   flag.  See section 6.6.3 for details about actions taken by the\n\
    \   intermediate node in response to a RREQ with the 'G' flag set.\n   A node\
    \ SHOULD NOT originate more than RREQ_RATELIMIT RREQ messages\n   per second.\
    \  After broadcasting a RREQ, a node waits for a RREP (or\n   other control message\
    \ with current information regarding a route to\n   the appropriate destination).\
    \  If a route is not received within\n   NET_TRAVERSAL_TIME milliseconds, the\
    \ node MAY try again to discover a\n   route by broadcasting another RREQ, up\
    \ to a maximum of RREQ_RETRIES\n   times at the maximum TTL value.  Each new attempt\
    \ MUST increment and\n   update the RREQ ID.  For each attempt, the TTL field\
    \ of the IP header\n   is set according to the mechanism specified in section\
    \ 6.4, in order\n   to enable control over how far the RREQ is disseminated for\
    \ the each\n   retry.\n   Data packets waiting for a route (i.e., waiting for\
    \ a RREP after a\n   RREQ has been sent) SHOULD be buffered.  The buffering SHOULD\
    \ be\n   \"first-in, first-out\" (FIFO).  If a route discovery has been\n   attempted\
    \ RREQ_RETRIES times at the maximum TTL without receiving any\n   RREP, all data\
    \ packets destined for the corresponding destination\n   SHOULD be dropped from\
    \ the buffer and a Destination Unreachable\n   message SHOULD be delivered to\
    \ the application.\n   To reduce congestion in a network, repeated attempts by\
    \ a source node\n   at route discovery for a single destination MUST utilize a\
    \ binary\n   exponential backoff.  The first time a source node broadcasts a RREQ,\n\
    \   it waits NET_TRAVERSAL_TIME milliseconds for the reception of a RREP.\n  \
    \ If a RREP is not received within that time, the source node sends a\n   new\
    \ RREQ.  When calculating the time to wait for the RREP after\n   sending the\
    \ second RREQ, the source node MUST use a binary\n   exponential backoff.  Hence,\
    \ the waiting time for the RREP\n   corresponding to the second RREQ is 2 * NET_TRAVERSAL_TIME\n\
    \   milliseconds.  If a RREP is not received within this time period,\n   another\
    \ RREQ may be sent, up to RREQ_RETRIES additional attempts\n   after the first\
    \ RREQ.  For each additional attempt, the waiting time\n   for the RREP is multiplied\
    \ by 2, so that the time conforms to a\n   binary exponential backoff.\n"
- title: 6.4. Controlling Dissemination of Route Request Messages
  contents:
  - "6.4. Controlling Dissemination of Route Request Messages\n   To prevent unnecessary\
    \ network-wide dissemination of RREQs, the\n   originating node SHOULD use an\
    \ expanding ring search technique.  In\n   an expanding ring search, the originating\
    \ node initially uses a TTL =\n   TTL_START in the RREQ packet IP header and sets\
    \ the timeout for\n   receiving a RREP to RING_TRAVERSAL_TIME milliseconds.\n\
    \   RING_TRAVERSAL_TIME is calculated as described in section 10.  The\n   TTL_VALUE\
    \ used in calculating RING_TRAVERSAL_TIME is set equal to the\n   value of the\
    \ TTL field in the IP header.  If the RREQ times out\n   without a corresponding\
    \ RREP, the originator broadcasts the RREQ\n   again with the TTL incremented\
    \ by TTL_INCREMENT.  This continues\n   until the TTL set in the RREQ reaches\
    \ TTL_THRESHOLD, beyond which a\n   TTL = NET_DIAMETER is used for each attempt.\
    \  Each time, the timeout\n   for receiving a RREP is RING_TRAVERSAL_TIME.  When\
    \ it is desired to\n   have all retries traverse the entire ad hoc network, this\
    \ can be\n   achieved by configuring TTL_START and TTL_INCREMENT both to be the\n\
    \   same value as NET_DIAMETER.\n   The Hop Count stored in an invalid routing\
    \ table entry indicates the\n   last known hop count to that destination in the\
    \ routing table.  When\n   a new route to the same destination is required at\
    \ a later time\n   (e.g., upon route loss), the TTL in the RREQ IP header is initially\n\
    \   set to the Hop Count plus TTL_INCREMENT.  Thereafter, following each\n   timeout\
    \ the TTL is incremented by TTL_INCREMENT until TTL =\n   TTL_THRESHOLD is reached.\
    \  Beyond this TTL = NET_DIAMETER is used.\n   Once TTL = NET_DIAMETER, the timeout\
    \ for waiting for the RREP is set\n   to NET_TRAVERSAL_TIME, as specified in section\
    \ 6.3.\n   An expired routing table entry SHOULD NOT be expunged before\n   (current_time\
    \ + DELETE_PERIOD) (see section 6.11).  Otherwise, the\n   soft state corresponding\
    \ to the route (e.g., last known hop count)\n   will be lost.  Furthermore, a\
    \ longer routing table entry expunge time\n   MAY be configured.  Any routing\
    \ table entry waiting for a RREP SHOULD\n   NOT be expunged before (current_time\
    \ + 2 * NET_TRAVERSAL_TIME).\n"
- title: 6.5. Processing and Forwarding Route Requests
  contents:
  - "6.5. Processing and Forwarding Route Requests\n   When a node receives a RREQ,\
    \ it first creates or updates a route to\n   the previous hop without a valid\
    \ sequence number (see section 6.2)\n   then checks to determine whether it has\
    \ received a RREQ with the same\n   Originator IP Address and RREQ ID within at\
    \ least the last\n   PATH_DISCOVERY_TIME.  If such a RREQ has been received, the\
    \ node\n   silently discards the newly received RREQ.  The rest of this\n   subsection\
    \ describes actions taken for RREQs that are not discarded.\n   First, it first\
    \ increments the hop count value in the RREQ by one, to\n   account for the new\
    \ hop through the intermediate node.  Then the node\n   searches for a reverse\
    \ route to the Originator IP Address (see\n   section 6.2), using longest-prefix\
    \ matching.  If need be, the route\n   is created, or updated using the Originator\
    \ Sequence Number from the\n   RREQ in its routing table.  This reverse route\
    \ will be needed if the\n   node receives a RREP back to the node that originated\
    \ the RREQ\n   (identified by the Originator IP Address).  When the reverse route\
    \ is\n   created or updated, the following actions on the route are also\n   carried\
    \ out:\n   1. the Originator Sequence Number from the RREQ is compared to the\n\
    \      corresponding destination sequence number in the route table entry\n  \
    \    and copied if greater than the existing value there\n   2. the valid sequence\
    \ number field is set to true;\n   3. the next hop in the routing table becomes\
    \ the node from which the\n      RREQ was received (it is obtained from the source\
    \ IP address in\n      the IP header and is often not equal to the Originator\
    \ IP Address\n      field in the RREQ message);\n   4. the hop count is copied\
    \ from the Hop Count in the RREQ message;\n   Whenever a RREQ message is received,\
    \ the Lifetime of the reverse\n   route entry for the Originator IP address is\
    \ set to be the maximum of\n   (ExistingLifetime, MinimalLifetime), where\n  \
    \    MinimalLifetime =    (current time + 2*NET_TRAVERSAL_TIME -\n           \
    \                2*HopCount*NODE_TRAVERSAL_TIME).\n   The current node can use\
    \ the reverse route to forward data packets in\n   the same way as for any other\
    \ route in the routing table.\n   If a node does not generate a RREP (following\
    \ the processing rules in\n   section 6.6), and if the incoming IP header has\
    \ TTL larger than 1,\n   the node updates and broadcasts the RREQ to address 255.255.255.255\n\
    \   on each of its configured interfaces (see section 6.14).  To update\n   the\
    \ RREQ, the TTL or hop limit field in the outgoing IP header is\n   decreased\
    \ by one, and the Hop Count field in the RREQ message is\n   incremented by one,\
    \ to account for the new hop through the\n   intermediate node.  Lastly, the Destination\
    \ Sequence number for the\n   requested destination is set to the maximum of the\
    \ corresponding\n   value received in the RREQ message, and the destination sequence\n\
    \   value currently maintained by the node for the requested destination.\n  \
    \ However, the forwarding node MUST NOT modify its maintained value for\n   the\
    \ destination sequence number, even if the value received in the\n   incoming\
    \ RREQ is larger than the value currently maintained by the\n   forwarding node.\n\
    \   Otherwise, if a node does generate a RREP, then the node discards the\n  \
    \ RREQ.  Notice that, if intermediate nodes reply to every transmission\n   of\
    \ RREQs for a particular destination, it might turn out that the\n   destination\
    \ does not receive any of the discovery messages.  In this\n   situation, the\
    \ destination does not learn of a route to the\n   originating node from the RREQ\
    \ messages.  This could cause the\n   destination to initiate a route discovery\
    \ (for example, if the\n   originator is attempting to establish a TCP session).\
    \  In order that\n   the destination learn of routes to the originating node,\
    \ the\n   originating node SHOULD set the \"gratuitous RREP\" ('G') flag in the\n\
    \   RREQ if for any reason the destination is likely to need a route to\n   the\
    \ originating node.  If, in response to a RREQ with the 'G' flag\n   set, an intermediate\
    \ node returns a RREP, it MUST also unicast a\n   gratuitous RREP to the destination\
    \ node (see section 6.6.3).\n"
- title: 6.6. Generating Route Replies
  contents:
  - "6.6. Generating Route Replies\n   A node generates a RREP if either:\n   (i)\
    \       it is itself the destination, or\n   (ii)      it has an active route\
    \ to the destination, the destination\n             sequence number in the node's\
    \ existing route table entry\n             for the destination is valid and greater\
    \ than or equal to\n             the Destination Sequence Number of the RREQ (comparison\n\
    \             using signed 32-bit arithmetic), and the \"destination only\"\n\
    \             ('D') flag is NOT set.\n   When generating a RREP message, a node\
    \ copies the Destination IP\n   Address and the Originator Sequence Number from\
    \ the RREQ message into\n   the corresponding fields in the RREP message.  Processing\
    \ is slightly\n   different, depending on whether the node is itself the requested\n\
    \   destination (see section 6.6.1), or instead if it is an intermediate\n   node\
    \ with an fresh enough route to the destination (see section\n   6.6.2).\n   Once\
    \ created, the RREP is unicast to the next hop toward the\n   originator of the\
    \ RREQ, as indicated by the route table entry for\n   that originator.  As the\
    \ RREP is forwarded back towards the node\n   which originated the RREQ message,\
    \ the Hop Count field is incremented\n   by one at each hop.  Thus, when the RREP\
    \ reaches the originator, the\n   Hop Count represents the distance, in hops,\
    \ of the destination from\n   the originator.\n"
- title: 6.6.1. Route Reply Generation by the Destination
  contents:
  - "6.6.1. Route Reply Generation by the Destination\n   If the generating node is\
    \ the destination itself, it MUST increment\n   its own sequence number by one\
    \ if the sequence number in the RREQ\n   packet is equal to that incremented value.\
    \  Otherwise, the\n   destination does not change its sequence number before generating\
    \ the\n   RREP message.  The destination node places its (perhaps newly\n   incremented)\
    \ sequence number into the Destination Sequence Number\n   field of the RREP,\
    \ and enters the value zero in the Hop Count field\n   of the RREP.\n   The destination\
    \ node copies the value MY_ROUTE_TIMEOUT (see section\n   10) into the Lifetime\
    \ field of the RREP.  Each node MAY reconfigure\n   its value for MY_ROUTE_TIMEOUT,\
    \ within mild constraints (see section\n   10).\n"
- title: 6.6.2. Route Reply Generation by an Intermediate Node
  contents:
  - "6.6.2. Route Reply Generation by an Intermediate Node\n   If the node generating\
    \ the RREP is not the destination node, but\n   instead is an intermediate hop\
    \ along the path from the originator to\n   the destination, it copies its known\
    \ sequence number for the\n   destination into the Destination Sequence Number\
    \ field in the RREP\n   message.\n   The intermediate node updates the forward\
    \ route entry by placing the\n   last hop node (from which it received the RREQ,\
    \ as indicated by the\n   source IP address field in the IP header) into the precursor\
    \ list for\n   the forward route entry -- i.e., the entry for the Destination\
    \ IP\n   Address.  The intermediate node also updates its route table entry\n\
    \   for the node originating the RREQ by placing the next hop towards the\n  \
    \ destination in the precursor list for the reverse route entry --\n   i.e., the\
    \ entry for the Originator IP Address field of the RREQ\n   message data.\n  \
    \ The intermediate node places its distance in hops from the\n   destination (indicated\
    \ by the hop count in the routing table) Count\n   field in the RREP.  The Lifetime\
    \ field of the RREP is calculated by\n   subtracting the current time from the\
    \ expiration time in its route\n   table entry.\n"
- title: 6.6.3. Generating Gratuitous RREPs
  contents:
  - "6.6.3. Generating Gratuitous RREPs\n   After a node receives a RREQ and responds\
    \ with a RREP, it discards\n   the RREQ.  If the RREQ has the 'G' flag set, and\
    \ the intermediate\n   node returns a RREP to the originating node, it MUST also\
    \ unicast a\n   gratuitous RREP to the destination node.  The gratuitous RREP\
    \ that is\n   to be sent to the desired destination contains the following values\n\
    \   in the RREP message fields:\n   Hop Count                        The Hop Count\
    \ as indicated in the\n                                    node's route table\
    \ entry for the\n                                    originator\n   Destination\
    \ IP Address           The IP address of the node that\n                     \
    \               originated the RREQ\n   Destination Sequence Number      The Originator\
    \ Sequence Number from\n                                    the RREQ\n   Originator\
    \ IP Address            The IP address of the Destination\n                  \
    \                  node in the RREQ\n   Lifetime                         The remaining\
    \ lifetime of the route\n                                    towards the originator\
    \ of the RREQ,\n                                    as known by the intermediate\
    \ node.\n   The gratuitous RREP is then sent to the next hop along the path to\n\
    \   the destination node, just as if the destination node had already\n   issued\
    \ a RREQ for the originating node and this RREP was produced in\n   response to\
    \ that (fictitious) RREQ.  The RREP that is sent to the\n   originator of the\
    \ RREQ is the same whether or not the 'G' bit is set.\n"
- title: 6.7. Receiving and Forwarding Route Replies
  contents:
  - "6.7. Receiving and Forwarding Route Replies\n   When a node receives a RREP message,\
    \ it searches (using longest-\n   prefix matching) for a route to the previous\
    \ hop.  If needed, a route\n   is created for the previous hop, but without a\
    \ valid sequence number\n   (see section 6.2).  Next, the node then increments\
    \ the hop count\n   value in the RREP by one, to account for the new hop through\
    \ the\n   intermediate node.  Call this incremented value the \"New Hop Count\"\
    .\n   Then the forward route for this destination is created if it does not\n\
    \   already exist.  Otherwise, the node compares the Destination Sequence\n  \
    \ Number in the message with its own stored destination sequence number\n   for\
    \ the Destination IP Address in the RREP message.  Upon comparison,\n   the existing\
    \ entry is updated only in the following circumstances:\n   (i)       the sequence\
    \ number in the routing table is marked as\n             invalid in route table\
    \ entry.\n   (ii)      the Destination Sequence Number in the RREP is greater\
    \ than\n             the node's copy of the destination sequence number and the\n\
    \             known value is valid, or\n   (iii)     the sequence numbers are\
    \ the same, but the route is is\n             marked as inactive, or\n   (iv)\
    \      the sequence numbers are the same, and the New Hop Count is\n         \
    \    smaller than the hop count in route table entry.\n   If the route table entry\
    \ to the destination is created or updated,\n   then the following actions occur:\n\
    \   -  the route is marked as active,\n   -  the destination sequence number is\
    \ marked as valid,\n   -  the next hop in the route entry is assigned to be the\
    \ node from\n      which the RREP is received, which is indicated by the source\
    \ IP\n      address field in the IP header,\n   -  the hop count is set to the\
    \ value of the New Hop Count,\n   -  the expiry time is set to the current time\
    \ plus the value of the\n      Lifetime in the RREP message,\n   -  and the destination\
    \ sequence number is the Destination Sequence\n      Number in the RREP message.\n\
    \   The current node can subsequently use this route to forward data\n   packets\
    \ to the destination.\n   If the current node is not the node indicated by the\
    \ Originator IP\n   Address in the RREP message AND a forward route has been created\
    \ or\n   updated as described above, the node consults its route table entry\n\
    \   for the originating node to determine the next hop for the RREP\n   packet,\
    \ and then forwards the RREP towards the originator using the\n   information\
    \ in that route table entry.  If a node forwards a RREP\n   over a link that is\
    \ likely to have errors or be unidirectional, the\n   node SHOULD set the 'A'\
    \ flag to require that the recipient of the\n   RREP acknowledge receipt of the\
    \ RREP by sending a RREP-ACK message\n   back (see section 6.8).\n   When any\
    \ node transmits a RREP, the precursor list for the\n   corresponding destination\
    \ node is updated by adding to it the next\n   hop node to which the RREP is forwarded.\
    \  Also, at each node the\n   (reverse) route used to forward a RREP has its lifetime\
    \ changed to be\n   the maximum of (existing-lifetime, (current time +\n   ACTIVE_ROUTE_TIMEOUT).\
    \  Finally, the precursor list for the next hop\n   towards the destination is\
    \ updated to contain the next hop towards\n   the source.\n"
- title: 6.8. Operation over Unidirectional Links
  contents:
  - "6.8. Operation over Unidirectional Links\n   It is possible that a RREP transmission\
    \ may fail, especially if the\n   RREQ transmission triggering the RREP occurs\
    \ over a unidirectional\n   link.  If no other RREP generated from the same route\
    \ discovery\n   attempt reaches the node which originated the RREQ message, the\n\
    \   originator will reattempt route discovery after a timeout (see\n   section\
    \ 6.3).  However, the same scenario might well be repeated\n   without any improvement,\
    \ and no route would be discovered even after\n   repeated retries.  Unless corrective\
    \ action is taken, this can happen\n   even when bidirectional routes between\
    \ originator and destination do\n   exist.  Link layers using broadcast transmissions\
    \ for the RREQ will\n   not be able to detect the presence of such unidirectional\
    \ links.  In\n   AODV, any node acts on only the first RREQ with the same RREQ\
    \ ID and\n   ignores any subsequent RREQs.  Suppose, for example, that the first\n\
    \   RREQ arrives along a path that has one or more unidirectional\n   link(s).\
    \  A subsequent RREQ may arrive via a bidirectional path\n   (assuming such paths\
    \ exist), but it will be ignored.\n   To prevent this problem, when a node detects\
    \ that its transmission of\n   a RREP message has failed, it remembers the next-hop\
    \ of the failed\n   RREP in a \"blacklist\" set.  Such failures can be detected\
    \ via the\n   absence of a link-layer or network-layer acknowledgment (e.g., RREP-\n\
    \   ACK).  A node ignores all RREQs received from any node in its\n   blacklist\
    \ set.  Nodes are removed from the blacklist set after a\n   BLACKLIST_TIMEOUT\
    \ period (see section 10).  This period should be set\n   to the upper bound of\
    \ the time it takes to perform the allowed number\n   of route request retry attempts\
    \ as described in section 6.3.\n   Note that the RREP-ACK packet does not contain\
    \ any information about\n   which RREP it is acknowledging.  The time at which\
    \ the RREP-ACK is\n   received will likely come just after the time when the RREP\
    \ was sent\n   with the 'A' bit.  This information is expected to be sufficient\
    \ to\n   provide assurance to the sender of the RREP that the link is\n   currently\
    \ bidirectional, without any real dependence on the\n   particular RREP message\
    \ being acknowledged.  However, that assurance\n   typically cannot be expected\
    \ to remain in force permanently.\n"
- title: 6.9. Hello Messages
  contents:
  - "6.9. Hello Messages\n   A node MAY offer connectivity information by broadcasting\
    \ local Hello\n   messages.  A node SHOULD only use hello messages if it is part\
    \ of an\n   active route.  Every HELLO_INTERVAL milliseconds, the node checks\n\
    \   whether it has sent a broadcast (e.g., a RREQ or an appropriate layer\n  \
    \ 2 message) within the last HELLO_INTERVAL.  If it has not, it MAY\n   broadcast\
    \ a RREP with TTL = 1, called a Hello message, with the RREP\n   message fields\
    \ set as follows:\n      Destination IP Address         The node's IP address.\n\
    \      Destination Sequence Number    The node's latest sequence number.\n   \
    \   Hop Count                      0\n      Lifetime                       ALLOWED_HELLO_LOSS\
    \ * HELLO_INTERVAL\n   A node MAY determine connectivity by listening for packets\
    \ from its\n   set of neighbors.  If, within the past DELETE_PERIOD, it has received\n\
    \   a Hello message from a neighbor, and then for that neighbor does not\n   receive\
    \ any packets (Hello messages or otherwise) for more than\n   ALLOWED_HELLO_LOSS\
    \ * HELLO_INTERVAL milliseconds, the node SHOULD\n   assume that the link to this\
    \ neighbor is currently lost.  When this\n   happens, the node SHOULD proceed\
    \ as in Section 6.11.\n   Whenever a node receives a Hello message from a neighbor,\
    \ the node\n   SHOULD make sure that it has an active route to the neighbor, and\n\
    \   create one if necessary.  If a route already exists, then the\n   Lifetime\
    \ for the route should be increased, if necessary, to be at\n   least ALLOWED_HELLO_LOSS\
    \ * HELLO_INTERVAL.  The route to the\n   neighbor, if it exists, MUST subsequently\
    \ contain the latest\n   Destination Sequence Number from the Hello message. \
    \ The current node\n   can now begin using this route to forward data packets.\
    \  Routes that\n   are created by hello messages and not used by any other active\
    \ routes\n   will have empty precursor lists and would not trigger a RERR message\n\
    \   if the neighbor moves away and a neighbor timeout occurs.\n"
- title: 6.10. Maintaining Local Connectivity
  contents:
  - "6.10. Maintaining Local Connectivity\n   Each forwarding node SHOULD keep track\
    \ of its continued connectivity\n   to its active next hops (i.e., which next\
    \ hops or precursors have\n   forwarded packets to or from the forwarding node\
    \ during the last\n   ACTIVE_ROUTE_TIMEOUT), as well as neighbors that have transmitted\n\
    \   Hello messages during the last (ALLOWED_HELLO_LOSS * HELLO_INTERVAL).\n  \
    \ A node can maintain accurate information about its continued\n   connectivity\
    \ to these active next hops, using one or more of the\n   available link or network\
    \ layer mechanisms, as described below.\n   -  Any suitable link layer notification,\
    \ such as those provided by\n      IEEE 802.11, can be used to determine connectivity,\
    \ each time a\n      packet is transmitted to an active next hop.  For example,\
    \ absence\n      of a link layer ACK or failure to get a CTS after sending RTS,\n\
    \      even after the maximum number of retransmission attempts,\n      indicates\
    \ loss of the link to this active next hop.\n   -  If layer-2 notification is\
    \ not available, passive acknowledgment\n      SHOULD be used when the next hop\
    \ is expected to forward the\n      packet, by listening to the channel for a\
    \ transmission attempt\n      made by the next hop.  If transmission is not detected\
    \ within\n      NEXT_HOP_WAIT milliseconds or the next hop is the destination\
    \ (and\n      thus is not supposed to forward the packet) one of the following\n\
    \      methods SHOULD be used to determine connectivity:\n      *  Receiving any\
    \ packet (including a Hello message) from the next\n         hop.\n      *  A\
    \ RREQ unicast to the next hop, asking for a route to the next\n         hop.\n\
    \      *  An ICMP Echo Request message unicast to the next hop.\n   If a link\
    \ to the next hop cannot be detected by any of these methods,\n   the forwarding\
    \ node SHOULD assume that the link is lost, and take\n   corrective action by\
    \ following the methods specified in Section 6.11.\n"
- title: 6.11. Route Error (RERR) Messages, Route Expiry and Route Deletion
  contents:
  - "6.11. Route Error (RERR) Messages, Route Expiry and Route Deletion\n   Generally,\
    \ route error and link breakage processing requires the\n   following steps:\n\
    \   -  Invalidating existing routes\n   -  Listing affected destinations\n   -\
    \  Determining which, if any, neighbors may be affected\n   -  Delivering an appropriate\
    \ RERR to such neighbors\n   A Route Error (RERR) message MAY be either broadcast\
    \ (if there are\n   many precursors), unicast (if there is only 1 precursor),\
    \ or\n   iteratively unicast to all precursors (if broadcast is\n   inappropriate).\
    \  Even when the RERR message is iteratively unicast to\n   several precursors,\
    \ it is considered to be a single control message\n   for the purposes of the\
    \ description in the text that follows.  With\n   that understanding, a node SHOULD\
    \ NOT generate more than\n   RERR_RATELIMIT RERR messages per second.\n   A node\
    \ initiates processing for a RERR message in three situations:\n   (i)       if\
    \ it detects a link break for the next hop of an active\n             route in\
    \ its routing table while transmitting data (and\n             route repair, if\
    \ attempted, was unsuccessful), or\n   (ii)      if it gets a data packet destined\
    \ to a node for which it\n             does not have an active route and is not\
    \ repairing (if\n             using local repair), or\n   (iii)     if it receives\
    \ a RERR from a neighbor for one or more\n             active routes.\n   For\
    \ case (i), the node first makes a list of unreachable destinations\n   consisting\
    \ of the unreachable neighbor and any additional\n   destinations (or subnets,\
    \ see section 7) in the local routing table\n   that use the unreachable neighbor\
    \ as the next hop.  In this case, if\n   a subnet route is found to be newly unreachable,\
    \ an IP destination\n   address for the subnet is constructed by appending zeroes\
    \ to the\n   subnet prefix as shown in the route table entry.  This is\n   unambiguous,\
    \ since the precursor is known to have route table\n   information with a compatible\
    \ prefix length for that subnet.\n   For case (ii), there is only one unreachable\
    \ destination, which is\n   the destination of the data packet that cannot be\
    \ delivered.  For\n   case (iii), the list should consist of those destinations\
    \ in the RERR\n   for which there exists a corresponding entry in the local routing\n\
    \   table that has the transmitter of the received RERR as the next hop.\n   Some\
    \ of the unreachable destinations in the list could be used by\n   neighboring\
    \ nodes, and it may therefore be necessary to send a (new)\n   RERR.  The RERR\
    \ should contain those destinations that are part of\n   the created list of unreachable\
    \ destinations and have a non-empty\n   precursor list.\n   The neighboring node(s)\
    \ that should receive the RERR are all those\n   that belong to a precursor list\
    \ of at least one of the unreachable\n   destination(s) in the newly created RERR.\
    \  In case there is only one\n   unique neighbor that needs to receive the RERR,\
    \ the RERR SHOULD be\n   unicast toward that neighbor.  Otherwise the RERR is\
    \ typically sent\n   to the local broadcast address (Destination IP == 255.255.255.255,\n\
    \   TTL == 1) with the unreachable destinations, and their corresponding\n   destination\
    \ sequence numbers, included in the packet.  The DestCount\n   field of the RERR\
    \ packet indicates the number of unreachable\n   destinations included in the\
    \ packet.\n   Just before transmitting the RERR, certain updates are made on the\n\
    \   routing table that may affect the destination sequence numbers for\n   the\
    \ unreachable destinations.  For each one of these destinations,\n   the corresponding\
    \ routing table entry is updated as follows:\n   1. The destination sequence number\
    \ of this routing entry, if it\n      exists and is valid, is incremented for\
    \ cases (i) and (ii) above,\n      and copied from the incoming RERR in case (iii)\
    \ above.\n   2. The entry is invalidated by marking the route entry as invalid\n\
    \   3. The Lifetime field is updated to current time plus DELETE_PERIOD.\n   \
    \   Before this time, the entry SHOULD NOT be deleted.\n   Note that the Lifetime\
    \ field in the routing table plays dual role --\n   for an active route it is\
    \ the expiry time, and for an invalid route\n   it is the deletion time.  If a\
    \ data packet is received for an invalid\n   route, the Lifetime field is updated\
    \ to current time plus\n   DELETE_PERIOD.  The determination of DELETE_PERIOD\
    \ is discussed in\n   Section 10.\n"
- title: 6.12. Local Repair
  contents:
  - "6.12. Local Repair\n   When a link break in an active route occurs, the node\
    \ upstream of\n   that break MAY choose to repair the link locally if the destination\n\
    \   was no farther than MAX_REPAIR_TTL hops away.  To repair the link\n   break,\
    \ the node increments the sequence number for the destination\n   and then broadcasts\
    \ a RREQ for that destination.  The TTL of the RREQ\n   should initially be set\
    \ to the following value:\n      max(MIN_REPAIR_TTL, 0.5 * #hops) + LOCAL_ADD_TTL,\n\
    \   where #hops is the number of hops to the sender (originator) of the\n   currently\
    \ undeliverable packet.  Thus, local repair attempts will\n   often be invisible\
    \ to the originating node, and will always have TTL\n   >= MIN_REPAIR_TTL + LOCAL_ADD_TTL.\
    \  The node initiating the repair\n   then waits the discovery period to receive\
    \ RREPs in response to the\n   RREQ.  During local repair data packets SHOULD\
    \ be buffered.  If, at\n   the end of the discovery period, the repairing node\
    \ has not received\n   a RREP (or other control message creating or updating the\
    \ route) for\n   that destination, it proceeds as described in Section 6.11 by\n\
    \   transmitting a RERR message for that destination.\n   On the other hand, if\
    \ the node receives one or more RREPs (or other\n   control message creating or\
    \ updating the route to the desired\n   destination) during the discovery period,\
    \ it first compares the hop\n   count of the new route with the value in the hop\
    \ count field of the\n   invalid route table entry for that destination.  If the\
    \ hop count of\n   the newly determined route to the destination is greater than\
    \ the hop\n   count of the previously known route the node SHOULD issue a RERR\n\
    \   message for the destination, with the 'N' bit set.  Then it proceeds\n   as\
    \ described in Section 6.7, updating its route table entry for that\n   destination.\n\
    \   A node that receives a RERR message with the 'N' flag set MUST NOT\n   delete\
    \ the route to that destination.  The only action taken should\n   be the retransmission\
    \ of the message, if the RERR arrived from the\n   next hop along that route,\
    \ and if there are one or more precursor\n   nodes for that route to the destination.\
    \  When the originating node\n   receives a RERR message with the 'N' flag set,\
    \ if this message came\n   from its next hop along its route to the destination\
    \ then the\n   originating node MAY choose to reinitiate route discovery, as\n\
    \   described in Section 6.3.\n   Local repair of link breaks in routes sometimes\
    \ results in increased\n   path lengths to those destinations.  Repairing the\
    \ link locally is\n   likely to increase the number of data packets that are able\
    \ to be\n   delivered to the destinations, since data packets will not be dropped\n\
    \   as the RERR travels to the originating node.  Sending a RERR to the\n   originating\
    \ node after locally repairing the link break may allow the\n   originator to\
    \ find a fresh route to the destination that is better,\n   based on current node\
    \ positions.  However, it does not require the\n   originating node to rebuild\
    \ the route, as the originator may be done,\n   or nearly done, with the data\
    \ session.\n   When a link breaks along an active route, there are often multiple\n\
    \   destinations that become unreachable.  The node that is upstream of\n   the\
    \ lost link tries an immediate local repair for only the one\n   destination towards\
    \ which the data packet was traveling.  Other\n   routes using the same link MUST\
    \ be marked as invalid, but the node\n   handling the local repair MAY flag each\
    \ such newly lost route as\n   locally repairable; this local repair flag in the\
    \ route table MUST be\n   reset when the route times out (e.g., after the route\
    \ has been not\n   been active for ACTIVE_ROUTE_TIMEOUT).  Before the timeout\
    \ occurs,\n   these other routes will be repaired as needed when packets arrive\
    \ for\n   the other destinations.  Hence, these routes are repaired as needed;\n\
    \   if a data packet does not arrive for the route, then that route will\n   not\
    \ be repaired.  Alternatively, depending upon local congestion, the\n   node MAY\
    \ begin the process of establishing local repairs for the\n   other routes, without\
    \ waiting for new packets to arrive.  By\n   proactively repairing the routes\
    \ that have broken due to the loss of\n   the link, incoming data packets for\
    \ those routes will not be subject\n   to the delay of repairing the route and\
    \ can be immediately forwarded.\n   However, repairing the route before a data\
    \ packet is received for it\n   runs the risk of repairing routes that are no\
    \ longer in use.\n   Therefore, depending upon the local traffic in the network\
    \ and\n   whether congestion is being experienced, the node MAY elect to\n   proactively\
    \ repair the routes before a data packet is received;\n   otherwise, it can wait\
    \ until a data is received, and then commence\n   the repair of the route.\n"
- title: 6.13. Actions After Reboot
  contents:
  - "6.13. Actions After Reboot\n   A node participating in the ad hoc network must\
    \ take certain actions\n   after reboot as it might lose all sequence number records\
    \ for all\n   destinations, including its own sequence number.  However, there\
    \ may\n   be neighboring nodes that are using this node as an active next hop.\n\
    \   This can potentially create routing loops.  To prevent this\n   possibility,\
    \ each node on reboot waits for DELETE_PERIOD before\n   transmitting any route\
    \ discovery messages.  If the node receives a\n   RREQ, RREP, or RERR control\
    \ packet, it SHOULD create route entries as\n   appropriate given the sequence\
    \ number information in the control\n   packets, but MUST not forward any control\
    \ packets.  If the node\n   receives a data packet for some other destination,\
    \ it SHOULD\n   broadcast a RERR as described in subsection 6.11 and MUST reset\
    \ the\n   waiting timer to expire after current time plus DELETE_PERIOD.\n   It\
    \ can be shown [4] that by the time the rebooted node comes out of\n   the waiting\
    \ phase and becomes an active router again, none of its\n   neighbors will be\
    \ using it as an active next hop any more.  Its own\n   sequence number gets updated\
    \ once it receives a RREQ from any other\n   node, as the RREQ always carries\
    \ the maximum destination sequence\n   number seen en route.  If no such RREQ\
    \ arrives, the node MUST\n   initialize its own sequence number to zero.\n"
- title: 6.14. Interfaces
  contents:
  - "6.14. Interfaces\n   Because AODV should operate smoothly over wired, as well\
    \ as wireless,\n   networks, and because it is likely that AODV will also be used\
    \ with\n   multiple wireless devices, the particular interface over which\n  \
    \ packets arrive must be known to AODV whenever a packet is received.\n   This\
    \ includes the reception of RREQ, RREP, and RERR messages.\n   Whenever a packet\
    \ is received from a new neighbor, the interface on\n   which that packet was\
    \ received is recorded into the route table entry\n   for that neighbor, along\
    \ with all the other appropriate routing\n   information.  Similarly, whenever\
    \ a route to a new destination is\n   learned, the interface through which the\
    \ destination can be reached\n   is also recorded into the destination's route\
    \ table entry.\n   When multiple interfaces are available, a node retransmitting\
    \ a RREQ\n   message rebroadcasts that message on all interfaces that have been\n\
    \   configured for operation in the ad-hoc network, except those on which\n  \
    \ it is known that all of the nodes neighbors have already received the\n   RREQ\
    \ For instance, for some broadcast media (e.g., Ethernet) it may\n   be presumed\
    \ that all nodes on the same link receive a broadcast\n   message at the same\
    \ time.  When a node needs to transmit a RERR, it\n   SHOULD only transmit it\
    \ on those interfaces that have neighboring\n   precursor nodes for that route.\n"
- title: 7. AODV and Aggregated Networks
  contents:
  - "7. AODV and Aggregated Networks\n   AODV has been designed for use by mobile\
    \ nodes with IP addresses that\n   are not necessarily related to each other,\
    \ to create an ad hoc\n   network.  However, in some cases a collection of mobile\
    \ nodes MAY\n   operate in a fixed relationship to each other and share a common\n\
    \   subnet prefix, moving together within an area where an ad hoc network\n  \
    \ has formed.  Call such a collection of nodes a \"subnet\".  In this\n   case,\
    \ it is possible for a single node within the subnet to advertise\n   reachability\
    \ for all other nodes on the subnet, by responding with a\n   RREP message to\
    \ any RREQ message requesting a route to any node with\n   the subnet routing\
    \ prefix.  Call the single node the \"subnet router\".\n   In order for a subnet\
    \ router to operate the AODV protocol for the\n   whole subnet, it has to maintain\
    \ a destination sequence number for\n   the entire subnet.  In any such RREP message\
    \ sent by the subnet\n   router, the Prefix Size field of the RREP message MUST\
    \ be set to the\n   length of the subnet prefix.  Other nodes sharing the subnet\
    \ prefix\n   SHOULD NOT issue RREP messages, and SHOULD forward RREQ messages\
    \ to\n   the subnet router.\n   The processing for RREPs that give routes to subnets\
    \ (i.e., have\n   nonzero prefix length) is the same as processing for host-specific\n\
    \   RREP messages.  Every node that receives the RREP with prefix size\n   information\
    \ SHOULD create or update the route table entry for the\n   subnet, including\
    \ the sequence number supplied by the subnet router,\n   and including the appropriate\
    \ precursor information.  Then, in the\n   future the node can use the information\
    \ to avoid sending future RREQs\n   for other nodes on the same subnet.\n   When\
    \ a node uses a subnet route it may be that a packet is routed to\n   an IP address\
    \ on the subnet that is not assigned to any existing node\n   in the ad hoc network.\
    \  When that happens, the subnet router MUST\n   return ICMP Host Unreachable\
    \ message to the sending node.  Upstream\n   nodes receiving such an ICMP message\
    \ SHOULD record the information\n   that the particular IP address is unreachable,\
    \ but MUST NOT\n   invalidate the route entry for any matching subnet prefix.\n\
    \   If several nodes in the subnet advertise reachability to the subnet\n   defined\
    \ by the subnet prefix, the node with the lowest IP address is\n   elected to\
    \ be the subnet router, and all other nodes MUST stop\n   advertising reachability.\n\
    \   The behavior of default routes (i.e., routes with routing prefix\n   length\
    \ 0) is not defined in this specification.  Selection of routes\n   sharing prefix\
    \ bits should be according to longest match first.\n"
- title: 8. Using AODV with Other Networks
  contents:
  - "8. Using AODV with Other Networks\n   In some configurations, an ad hoc network\
    \ may be able to provide\n   connectivity between external routing domains that\
    \ do not use AODV.\n   If the points of contact to the other networks can act\
    \ as subnet\n   routers (see Section 7) for any relevant networks within the external\n\
    \   routing domains, then the ad hoc network can maintain connectivity to\n  \
    \ the external routing domains.  Indeed, the external routing networks\n   can\
    \ use the ad hoc network defined by AODV as a transit network.\n   In order to\
    \ provide this feature, a point of contact to an external\n   network (call it\
    \ an Infrastructure Router) has to act as the subnet\n   router for every subnet\
    \ of interest within the external network for\n   which the Infrastructure Router\
    \ can provide reachability.  This\n   includes the need for maintaining a destination\
    \ sequence number for\n   that external subnet.\n   If multiple Infrastructure\
    \ Routers offer reachability to the same\n   external subnet, those Infrastructure\
    \ Routers have to cooperate (by\n   means outside the scope of this specification)\
    \ to provide consistent\n   AODV semantics for ad hoc access to those subnets.\n"
- title: 9. Extensions
  contents:
  - "9. Extensions\n   In this section, the format of extensions to the RREQ and RREP\n\
    \   messages is specified.  All such extensions appear after the message\n   data,\
    \ and have the following format:\n    0                   1                  \
    \ 2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |     type-specific data ...\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   where:\n   Type     1-255\n   Length   The length of the type-specific data,\
    \ not including the Type\n            and Length fields of the extension in bytes.\n\
    \   Extensions with types between 128 and 255 may NOT be skipped.  The\n   rules\
    \ for extensions will be spelled out more fully, and conform to\n   the rules\
    \ for handling IPv6 options.\n"
- title: 9.1. Hello Interval Extension Format
  contents:
  - "9.1. Hello Interval Extension Format\n    0                   1             \
    \      2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Type      |    Length     |       Hello Interval ...      |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | ... Hello Interval, continued |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Type     1\n   Length   4\n   Hello Interval\n            The number of milliseconds\
    \ between successive transmissions\n            of a Hello message.\n   The Hello\
    \ Interval extension MAY be appended to a RREP message with\n   TTL == 1, to be\
    \ used by a neighboring receiver in determine how long\n   to wait for subsequent\
    \ such RREP messages (i.e., Hello messages; see\n   section 6.9).\n"
- title: 10. Configuration Parameters
  contents:
  - "10. Configuration Parameters\n   This section gives default values for some important\
    \ parameters\n   associated with AODV protocol operations.  A particular mobile\
    \ node\n   may wish to change certain of the parameters, in particular the\n \
    \  NET_DIAMETER, MY_ROUTE_TIMEOUT, ALLOWED_HELLO_LOSS, RREQ_RETRIES, and\n   possibly\
    \ the HELLO_INTERVAL.  In the latter case, the node should\n   advertise the HELLO_INTERVAL\
    \ in its Hello messages, by appending a\n   Hello Interval Extension to the RREP\
    \ message.  Choice of these\n   parameters may affect the performance of the protocol.\
    \  Changing\n   NODE_TRAVERSAL_TIME also changes the node's estimate of the\n\
    \   NET_TRAVERSAL_TIME, and so can only be done with suitable knowledge\n   about\
    \ the behavior of other nodes in the ad hoc network.  The\n   configured value\
    \ for MY_ROUTE_TIMEOUT MUST be at least 2 *\n   PATH_DISCOVERY_TIME.\n   Parameter\
    \ Name           Value\n   ----------------------   -----\n   ACTIVE_ROUTE_TIMEOUT\
    \     3,000 Milliseconds\n   ALLOWED_HELLO_LOSS       2\n   BLACKLIST_TIMEOUT\
    \        RREQ_RETRIES * NET_TRAVERSAL_TIME\n   DELETE_PERIOD            see note\
    \ below\n   HELLO_INTERVAL           1,000 Milliseconds\n   LOCAL_ADD_TTL    \
    \        2\n   MAX_REPAIR_TTL           0.3 * NET_DIAMETER\n   MIN_REPAIR_TTL\
    \           see note below\n   MY_ROUTE_TIMEOUT         2 * ACTIVE_ROUTE_TIMEOUT\n\
    \   NET_DIAMETER             35\n   NET_TRAVERSAL_TIME       2 * NODE_TRAVERSAL_TIME\
    \ * NET_DIAMETER\n   NEXT_HOP_WAIT            NODE_TRAVERSAL_TIME + 10\n   NODE_TRAVERSAL_TIME\
    \      40 milliseconds\n   PATH_DISCOVERY_TIME      2 * NET_TRAVERSAL_TIME\n \
    \  RERR_RATELIMIT           10\n   RING_TRAVERSAL_TIME      2 * NODE_TRAVERSAL_TIME\
    \ *\n                            (TTL_VALUE + TIMEOUT_BUFFER)\n   RREQ_RETRIES\
    \             2\n   RREQ_RATELIMIT           10\n   TIMEOUT_BUFFER           2\n\
    \   TTL_START                1\n   TTL_INCREMENT            2\n   TTL_THRESHOLD\
    \            7\n   TTL_VALUE                see note below\n   The MIN_REPAIR_TTL\
    \ should be the last known hop count to the\n   destination.  If Hello messages\
    \ are used, then the\n   ACTIVE_ROUTE_TIMEOUT parameter value MUST be more than\
    \ the value\n   (ALLOWED_HELLO_LOSS * HELLO_INTERVAL).  For a given\n   ACTIVE_ROUTE_TIMEOUT\
    \ value, this may require some adjustment to the\n   value of the HELLO_INTERVAL,\
    \ and consequently use of the Hello\n   Interval Extension in the Hello messages.\n\
    \   TTL_VALUE is the value of the TTL field in the IP header while the\n   expanding\
    \ ring search is being performed.  This is described further\n   in section 6.4.\
    \  The TIMEOUT_BUFFER is configurable.  Its purpose is\n   to provide a buffer\
    \ for the timeout so that if the RREP is delayed\n   due to congestion, a timeout\
    \ is less likely to occur while the RREP\n   is still en route back to the source.\
    \  To omit this buffer, set\n   TIMEOUT_BUFFER = 0.\n   DELETE_PERIOD is intended\
    \ to provide an upper bound on the time for\n   which an upstream node A can have\
    \ a neighbor B as an active next hop\n   for destination D, while B has invalidated\
    \ the route to D.  Beyond\n   this time B can delete the (already invalidated)\
    \ route to D.  The\n   determination of the upper bound depends somewhat on the\n\
    \   characteristics of the underlying link layer.  If Hello messages are\n   used\
    \ to determine the continued availability of links to next hop\n   nodes, DELETE_PERIOD\
    \ must be at least ALLOWED_HELLO_LOSS *\n   HELLO_INTERVAL.  If the link layer\
    \ feedback is used to detect loss of\n   link, DELETE_PERIOD must be at least\
    \ ACTIVE_ROUTE_TIMEOUT.  If hello\n   messages are received from a neighbor but\
    \ data packets to that\n   neighbor are lost (e.g., due to temporary link asymmetry),\
    \ we have to\n   make more concrete assumptions about the underlying link layer.\
    \ We\n   assume that such asymmetry cannot persist beyond a certain time, say,\n\
    \   a multiple K of HELLO_INTERVAL.  In other words, a node will\n   invariably\
    \ receive at least one out of K subsequent Hello messages\n   from a neighbor\
    \ if the link is working and the neighbor is sending no\n   other traffic.  Covering\
    \ all possibilities,\n      DELETE_PERIOD = K * max (ACTIVE_ROUTE_TIMEOUT, HELLO_INTERVAL)\n\
    \                         (K = 5 is recommended).\n   NET_DIAMETER measures the\
    \ maximum possible number of hops between two\n   nodes in the network.  NODE_TRAVERSAL_TIME\
    \ is a conservative estimate\n   of the average one hop traversal time for packets\
    \ and should include\n   queuing delays, interrupt processing times and transfer\
    \ times.\n   ACTIVE_ROUTE_TIMEOUT SHOULD be set to a longer value (at least 10,000\n\
    \   milliseconds) if link-layer indications are used to detect link\n   breakages\
    \ such as in IEEE 802.11 [5] standard.  TTL_START should be\n   set to at least\
    \ 2 if Hello messages are used for local connectivity\n   information.  Performance\
    \ of the AODV protocol is sensitive to the\n   chosen values of these constants,\
    \ which often depend on the\n   characteristics of the underlying link layer protocol,\
    \ radio\n   technologies etc.  BLACKLIST_TIMEOUT should be suitably increased\
    \ if\n   an expanding ring search is used.  In such cases, it should be\n   {[(TTL_THRESHOLD\
    \ - TTL_START)/TTL_INCREMENT] + 1 + RREQ_RETRIES} *\n   NET_TRAVERSAL_TIME.  This\
    \ is to account for possible additional route\n   discovery attempts.\n"
- title: 11. Security Considerations
  contents:
  - "11. Security Considerations\n   Currently, AODV does not specify any special\
    \ security measures. Route\n   protocols, however, are prime targets for impersonation\
    \ attacks.  In\n   networks where the node membership is not known, it is difficult\
    \ to\n   determine the occurrence of impersonation attacks, and security\n   prevention\
    \ techniques are difficult at best.  However, when the\n   network membership\
    \ is known and there is a danger of such attacks,\n   AODV control messages must\
    \ be protected by use of authentication\n   techniques, such as those involving\
    \ generation of unforgeable and\n   cryptographically strong message digests or\
    \ digital signatures.\n   While AODV does not place restrictions on the authentication\n\
    \   mechanism used for this purpose, IPsec AH is an appropriate choice\n   for\
    \ cases where the nodes share an appropriate security association\n   that enables\
    \ the use of AH.\n   In particular, RREP messages SHOULD be authenticated to avoid\n\
    \   creation of spurious routes to a desired destination.  Otherwise, an\n   attacker\
    \ could masquerade as the desired destination, and maliciously\n   deny service\
    \ to the destination and/or maliciously inspect and\n   consume traffic intended\
    \ for delivery to the destination.  RERR\n   messages, while less dangerous, SHOULD\
    \ be authenticated in order to\n   prevent malicious nodes from disrupting valid\
    \ routes between nodes\n   that are communication partners.\n   AODV does not\
    \ make any assumption about the method by which addresses\n   are assigned to\
    \ the mobile nodes, except that they are presumed to\n   have unique IP addresses.\
    \  Therefore, no special consideration, other\n   than what is natural because\
    \ of the general protocol specifications,\n   can be made about the applicability\
    \ of IPsec authentication headers\n   or key exchange mechanisms.  However, if\
    \ the mobile nodes in the ad\n   hoc network have pre-established security associations,\
    \ it is\n   presumed that the purposes for which the security associations are\n\
    \   created include that of authorizing the processing of AODV control\n   messages.\
    \  Given this understanding, the mobile nodes should be able\n   to use the same\
    \ authentication mechanisms based on their IP addresses\n   as they would have\
    \ used otherwise.\n"
- title: 12. IANA Considerations
  contents:
  - "12. IANA Considerations\n   AODV defines a \"Type\" field for messages sent to\
    \ port 654.  A new\n   registry has been created for the values for this Type\
    \ field, and the\n   following values have been assigned:\n      Message Type\
    \                    Value\n      ---------------------------     -----\n    \
    \  Route Request (RREQ)            1\n      Route Reply (RREP)              2\n\
    \      Route Error (RERR)              3\n      Route-Reply Ack (RREP-ACK)   \
    \   4\n   AODV control messages can have extensions.  Currently, only one\n  \
    \ extension is defined.  A new registry has been created for the Type\n   field\
    \ of the extensions:\n      Extension Type                  Value\n      ---------------------------\
    \     -----\n      Hello Interval                  1\n   Future values of the\
    \ Message Type or Extension Type can be allocated\n   using standards action [2].\n"
- title: 13. IPv6 Considerations
  contents:
  - "13. IPv6 Considerations\n   See [6] for detailed operation for IPv6.  The only\
    \ changes to the\n   protocol are that the address fields are enlarged.\n"
- title: 14. Acknowledgments
  contents:
  - "14. Acknowledgments\n   Special thanks to Ian Chakeres, UCSB, for his extensive\
    \ suggestions\n   and contributions to recent revisions.\n   We acknowledge with\
    \ gratitude the work done at University of\n   Pennsylvania within Carl Gunter's\
    \ group, as well as at Stanford and\n   CMU, to determine some conditions (especially\
    \ involving reboots and\n   lost RERRs) under which previous versions of AODV\
    \ could suffer from\n   routing loops.  Contributors to those efforts include\
    \ Karthikeyan\n   Bhargavan, Joshua Broch, Dave Maltz, Madanlal Musuvathi, and\
    \ Davor\n   Obradovic.  The idea of a DELETE_PERIOD, for which expired routes\n\
    \   (and, in particular, the sequence numbers) to a particular\n   destination\
    \ must be maintained, was also suggested by them.\n   We also acknowledge the\
    \ comments and improvements suggested by Sung-\n   Ju Lee (especially regarding\
    \ local repair), Mahesh Marina, Erik\n   Nordstrom (who provided text for section\
    \ 6.11), Yves Prelot, Marc\n   Mosko, Manel Guerrero Zapata, Philippe Jacquet,\
    \ and Fred Baker.\n"
- title: 15. Normative References
  contents:
  - "15. Normative References\n   [1]  Bradner, S. \"Key words for use in RFCs to\
    \ Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n   [2]\
    \  Narten, T. and H. Alvestrand, \"Guidelines for Writing an IANA\n        Considerations\
    \ Section in RFCs\", BCP 26, RFC 2434, October 1998.\n"
- title: 16. Informative References
  contents:
  - "16. Informative References\n   [3]  Manner, J., et al., \"Mobility Related Terminology\"\
    , Work in\n        Progress, July 2001.\n   [4]  Karthikeyan Bhargavan, Carl A.\
    \ Gunter, and Davor Obradovic.\n        Fault Origin Adjudication.  In Proceedings\
    \ of the Workshop on\n        Formal Methods in Software Practice, Portland, OR,\
    \ August 2000.\n   [5]  IEEE 802.11 Committee, AlphaGraphics #35, 10201 N.35th\
    \ Avenue,\n        Phoenix AZ 85051.  Wireless LAN Medium Access Control MAC and\n\
    \        Physical Layer PHY Specifications, June 1997.  IEEE Standard\n      \
    \  802.11-97.\n   [6]  Perkins, C., Royer, E. and S. Das, \"Ad hoc on demand distance\n\
    \        vector (AODV) routing for ip version 6\", Work in Progress.\n"
- title: 17. Authors' Addresses
  contents:
  - "17. Authors' Addresses\n   Charles E. Perkins\n   Communications Systems Laboratory\n\
    \   Nokia Research Center\n   313 Fairchild Drive\n   Mountain View, CA 94303\n\
    \   USA\n   Phone: +1 650 625 2986\n   Fax: +1 650 691 2170 (fax)\n   EMail: Charles.Perkins@nokia.com\n\
    \   Elizabeth M. Belding-Royer\n   Department of Computer Science\n   University\
    \ of California, Santa Barbara\n   Santa Barbara, CA 93106\n   Phone: +1 805 893\
    \ 3411\n   Fax: +1 805 893 8553\n   EMail: ebelding@cs.ucsb.edu\n   Samir R. Das\n\
    \   Department of Electrical and Computer Engineering\n   & Computer Science\n\
    \   University of Cincinnati\n   Cincinnati, OH 45221-0030\n   Phone: +1 513 556\
    \ 2594\n   Fax: +1 513 556 7326\n   EMail: sdas@ececs.uc.edu\n"
- title: 18. Full Copyright Statement
  contents:
  - "18. Full Copyright Statement\n   Copyright (C) The Internet Society (2003). \
    \ All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
