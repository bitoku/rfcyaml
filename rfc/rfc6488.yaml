- contents:
  - "                       Signed Object Template for\n             the Resource
    Public Key Infrastructure (RPKI)\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This document defines a generic profile for signed objects used
    in\n   the Resource Public Key Infrastructure (RPKI).  These RPKI signed\n   objects
    make use of Cryptographic Message Syntax (CMS) as a standard\n   encapsulation
    format.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by\n   the Internet Engineering Steering Group (IESG).
    \ Further\n   information on Internet Standards is available in Section 2 of\n
    \  RFC 5741.\n   Information about the current status of this document, any\n
    \  errata, and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6488.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n
    \     1.1. Terminology ................................................3\n      1.2.
    Note on Algorithms .........................................3\n   2. Signed Object
    Syntax ............................................3\n      2.1. Signed-Data Content
    Type ...................................4\n           2.1.1. version .............................................4\n
    \          2.1.2. digestAlgorithms ....................................4\n           2.1.3.
    encapContentInfo ....................................4\n                  2.1.3.1.
    eContentType ...............................5\n                  2.1.3.2. eContent
    ...................................5\n           2.1.4. certificates ........................................5\n
    \          2.1.5. crls ................................................5\n           2.1.6.
    signerInfos .........................................5\n                  2.1.6.1.
    version ....................................6\n                  2.1.6.2. sid
    ........................................6\n                  2.1.6.3. digestAlgorithm
    ............................6\n                  2.1.6.4. signedAttrs ................................6\n
    \                          2.1.6.4.1. Content-Type Attribute ..........7\n                           2.1.6.4.2.
    Message-Digest Attribute ........7\n                           2.1.6.4.3. Signing-Time
    Attribute ..........7\n                           2.1.6.4.4. Binary-Signing-Time
    Attribute ...8\n                  2.1.6.5. signatureAlgorithm .........................8\n
    \                 2.1.6.6. signatureValue .............................8\n                  2.1.6.7.
    unsigneAttrs ...............................8\n   3. Signed Object Validation
    ........................................8\n   4. Definition of Specific Signed
    Objects ..........................10\n   5. Security Considerations ........................................10\n
    \  6. IANA Considerations ............................................11\n   7.
    Acknowledgements ...............................................11\n   8. Normative
    References ...........................................11\n   9. Informative References
    .........................................12\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The purpose of the Resource Public Key Infrastructure (RPKI)
    is to\n   support assertions by current resource holders of IP (v4 and v6)\n   address
    space and AS numbers, based on the records of organizations\n   that act as Certification
    Authorities (CAs).  IP address and AS\n   number resource information is carried
    in X.509 certificates via RFC\n   3779 extensions [RFC6487].  Other information
    assertions about\n   resources are expressed via digitally signed, non-X.509 data\n
    \  structures that are referred to as \"signed objects\" in the RPKI\n   context
    [RFC6480].  This document standardizes a template for\n   specifying signed objects
    that can be validated using the RPKI.\n   RPKI signed objects make use of Cryptographic
    Message Syntax (CMS)\n   [RFC5652] as a standard encapsulation format.  CMS was
    chosen to take\n   advantage of existing open source software available for processing\n
    \  messages in this format.  RPKI signed objects adhere to a profile\n   (specified
    in Section 2) of the CMS signed-data object.\n   The template defined in this
    document for RPKI signed objects is not\n   a complete specification for any particular
    type of signed object,\n   and instead includes only the items that are common
    to all RPKI\n   signed objects.  That is, fully specifying a particular type of\n
    \  signed object requires an additional document that specifies the\n   details
    specific to a particular type of signed object.  Such details\n   include Abstract
    Syntax Notation One (ASN.1) [X.208-88] for the\n   object's payload and any additional
    steps required to validate the\n   particular type of signed object.  Section
    4 describes in more detail\n   the additional pieces that must be specified in
    order to define a new\n   type of RPKI signed object that uses this template.
    \ Additionally,\n   see [RFC6482] for an example of a document that uses this
    template to\n   specify a particular type of signed object, the Route Origination\n
    \  Authorization (ROA).\n"
  - contents:
    - "1.1.  Terminology\n   It is assumed that the reader is familiar with the terms
      and concepts\n   described in \"Internet X.509 Public Key Infrastructure Certificate\n
      \  and Certificate Revocation List (CRL) Profile\" [RFC5280], \"X.509\n   Extensions
      for IP Addresses and AS Identifiers\" [RFC3779], and\n   \"Cryptographic Message
      Syntax (CMS)\" [RFC5652].\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      [RFC2119].\n"
    title: 1.1.  Terminology
  - contents:
    - "1.2.  Note on Algorithms\n   CMS is a general format capable of accommodating
      a wide variety of\n   signature and digest algorithms.  The algorithms used
      in the RPKI\n   (and associated key sizes) are specified in [RFC6485].\n"
    title: 1.2.  Note on Algorithms
  title: 1.  Introduction
- contents:
  - "2.  Signed Object Syntax\n   The RPKI signed object is a profile of the CMS [RFC5652]
    signed-data\n   object, with the restriction that RPKI signed objects MUST be
    encoded\n   using the ASN.1 Distinguished Encoding Rules (DER) [X.509-88].\n   The
    general format of a CMS object is:\n      ContentInfo ::= SEQUENCE {\n        contentType
    ContentType,\n        content [0] EXPLICIT ANY DEFINED BY contentType }\n      ContentType
    ::= OBJECT IDENTIFIER\n   The content-type is the signed-data type of id-data,
    namely the\n   id-signedData OID [RFC5652], 1.2.840.113549.1.7.2.\n"
  - contents:
    - "2.1.  Signed-Data Content Type\n   According to the CMS standard, the signed-data
      content type is the\n   ASN.1 type SignedData:\n      SignedData ::= SEQUENCE
      {\n        version CMSVersion,\n        digestAlgorithms DigestAlgorithmIdentifiers,\n
      \       encapContentInfo EncapsulatedContentInfo,\n        certificates [0]
      IMPLICIT CertificateSet OPTIONAL,\n        crls [1] IMPLICIT RevocationInfoChoices
      OPTIONAL,\n        signerInfos SignerInfos }\n      DigestAlgorithmIdentifiers
      ::= SET OF DigestAlgorithmIdentifier\n      SignerInfos ::= SET OF SignerInfo\n
      \  Additionally, the SignerInfos set MUST contain only a single\n   SignerInfo
      object.\n"
    - contents:
      - "2.1.1.  version\n   The version is the syntax version number.  It MUST be
        3,\n   corresponding to the signerInfo structure having version number 3.\n"
      title: 2.1.1.  version
    - contents:
      - "2.1.2.  digestAlgorithms\n   The digestAlgorithms set contains the OIDs of
        the digest algorithm(s)\n   used in signing the encapsulated content.  This
        set MUST contain\n   exactly one digest algorithm OID, and the OID MUST be
        selected from\n   those specified in [RFC6485].\n"
      title: 2.1.2.  digestAlgorithms
    - contents:
      - "2.1.3.  encapContentInfo\n   encapContentInfo is the signed content, consisting
        of a content type\n   identifier and the content itself.  The encapContentInfo
        represents\n   the payload of the RPKI signed object.\n        EncapsulatedContentInfo
        ::= SEQUENCE {\n          eContentType ContentType,\n          eContent [0]
        EXPLICIT OCTET STRING OPTIONAL }\n        ContentType ::= OBJECT IDENTIFIER\n"
      - contents:
        - "2.1.3.1.  eContentType\n   This field is left undefined by this profile.
          \ The eContentType is an\n   OID specifying the type of payload in this
          signed object and MUST be\n   specified by the Internet Standards Track
          document that defines the\n   object.\n"
        title: 2.1.3.1.  eContentType
      - contents:
        - "2.1.3.2.  eContent\n   This field is left undefined by this profile.  The
          eContent is the\n   payload of the signed object and MUST be specified by
          the Internet\n   Standards Track document that defines the RPKI object.\n
          \  Note that the signed object profile does not provide version numbers\n
          \  for signed objects.  Therefore, in order to facilitate transition to\n
          \  new versions of the signed objects over time, it is RECOMMENDED that\n
          \  each type of signed object defined using this profile include a\n   version
          number within its eContent.\n"
        title: 2.1.3.2.  eContent
      title: 2.1.3.  encapContentInfo
    - contents:
      - "2.1.4.  certificates\n   The certificates field MUST be included, and MUST
        contain exactly one\n   certificate, the RPKI end-entity (EE) certificate
        needed to validate\n   this signed object.\n"
      title: 2.1.4.  certificates
    - contents:
      - "2.1.5.  crls\n   The crls field MUST be omitted.\n"
      title: 2.1.5.  crls
    - contents:
      - "2.1.6.  signerInfos\n   SignerInfo is defined in CMS as:\n         SignerInfo
        ::= SEQUENCE {\n           version CMSVersion,\n           sid SignerIdentifier,\n
        \          digestAlgorithm DigestAlgorithmIdentifier,\n           signedAttrs
        [0] IMPLICIT SignedAttributes OPTIONAL,\n           signatureAlgorithm SignatureAlgorithmIdentifier,\n
        \          signature SignatureValue,\n           unsignedAttrs [1] IMPLICIT
        UnsignedAttributes OPTIONAL }\n"
      - contents:
        - "2.1.6.1.  version\n   The version number MUST be 3, corresponding with
          the choice of\n   SubjectKeyIdentifier for the sid.\n"
        title: 2.1.6.1.  version
      - contents:
        - "2.1.6.2.  sid\n   The sid is defined as:\n         SignerIdentifier ::=
          CHOICE {\n           issuerAndSerialNumber IssuerAndSerialNumber,\n           subjectKeyIdentifier
          [0] SubjectKeyIdentifier }\n   For RPKI signed objects, the sid MUST be
          the SubjectKeyIdentifier\n   that appears in the EE certificate carried
          in the CMS certificates\n   field.\n"
        title: 2.1.6.2.  sid
      - contents:
        - "2.1.6.3.  digestAlgorithm\n   The digestAlgorithm MUST consist of the OID
          of a digest algorithm\n   that conforms to the RPKI Algorithms and Key Size
          Profile\n   specification [RFC6485].\n"
        title: 2.1.6.3.  digestAlgorithm
      - contents:
        - "2.1.6.4.  signedAttrs\n   The signedAttrs is defined as:\n         SignedAttributes
          ::= SET SIZE (1..MAX) OF Attribute\n         Attribute ::= SEQUENCE {\n
          \          attrType OBJECT IDENTIFIER,\n           attrValues SET OF AttributeValue
          }\n         AttributeValue ::= ANY\n   The signedAttrs element MUST be present
          and MUST include the content-\n   type and message-digest attributes [RFC5652].
          \ The signer MAY also\n   include the signing-time attribute [RFC5652],
          the binary-signing-time\n   attribute [RFC6019], or both attributes.  Other
          signed attributes\n   MUST NOT be included.\n   The signedAttrs element
          MUST include only a single instance of any\n   particular attribute.  Additionally,
          even though the syntax allows\n   for a SET OF AttributeValue, in an RPKI
          signed object, the attrValues\n   MUST consist of only a single AttributeValue.\n"
        - contents:
          - "2.1.6.4.1.  Content-Type Attribute\n   The content-type attribute MUST
            be present.  The attrType OID for the\n   content-type attribute is 1.2.840.113549.1.9.3.\n
            \  The attrValues for the content-type attribute MUST match the\n   eContentType
            in the EncapsulatedContentInfo.  Thus, attrValues MUST\n   contain the
            OID that specifies the payload type of the specific RPKI\n   signed object
            carried in the CMS signed data structure.\n"
          title: 2.1.6.4.1.  Content-Type Attribute
        - contents:
          - "2.1.6.4.2.  Message-Digest Attribute\n   The message-digest attribute
            MUST be present.  The attrType OID for\n   the message-digest attribute
            is 1.2.840.113549.1.9.4.\n   The attrValues for the message-digest attribute
            contains the output\n   of the digest algorithm applied to the content
            being signed, as\n   specified in Section 5.4 of [RFC5652].\n"
          title: 2.1.6.4.2.  Message-Digest Attribute
        - contents:
          - "2.1.6.4.3.  Signing-Time Attribute\n   The signing-time attribute MAY
            be present.  Note that the presence or\n   absence of the signing-time
            attribute MUST NOT affect the validity of\n   the signed object (as specified
            in Section 3).  The attrType OID for\n   the signing-time attribute is
            1.2.840.113549.1.9.5.\n         id-signingTime OBJECT IDENTIFIER ::= {
            iso(1) member-body(2)\n             us(840) rsadsi(113549) pkcs(1) pkcs9(9)
            5 }\n   The attrValues for the signing-time attribute is defined as:\n
            \        SigningTime ::= Time\n         Time ::= CHOICE {\n           utcTime
            UTCTime,\n           generalizedTime GeneralizedTime }\n   The Time element
            specifies the time, based on the local system clock,\n   at which the
            digital signature was applied to the content.\n   The definition of Time
            matches the one specified in the 1997 version\n   of X.509.  Additional
            information regarding the use of UTCTime and\n   GeneralizedTime can be
            found in [RFC5652].\n"
          title: 2.1.6.4.3.  Signing-Time Attribute
        - contents:
          - "2.1.6.4.4.  Binary-Signing-Time Attribute\n   The binary-signing-time
            attribute MAY be present.  Note that the\n   presence or absence of the
            binary-signing-time attribute MUST NOT\n   affect the validity of the
            signed object (as specified in Section 3).\n   The attrType OID for the
            binary-signing-time attribute is\n   1.2.840.113549.1.9.16.2.46.\n         id-aa-binarySigningTime
            OBJECT IDENTIFIER ::= { iso(1)\n             member-body(2) us(840) rsadsi(113549)
            pkcs(1) pkcs9(9)\n             smime(16) aa(2) 46 }\n   The attrValues
            for the signing-time attribute is defined as:\n         BinarySigningTime
            ::= BinaryTime\n         BinaryTime ::= INTEGER (0..MAX)\n   The BinaryTime
            element specifies the time, based on the local system\n   clock, at which
            the digital signature was applied to the content.\n   The precise definition
            of the BinaryTime element can be found in\n   [RFC6019].\n"
          title: 2.1.6.4.4.  Binary-Signing-Time Attribute
        title: 2.1.6.4.  signedAttrs
      - contents:
        - "2.1.6.5.  signatureAlgorithm\n   The signatureAlgorithm MUST conform to
          the RPKI Algorithms and Key\n   Size Profile specification [RFC6485].\n"
        title: 2.1.6.5.  signatureAlgorithm
      - contents:
        - "2.1.6.6.  signature\n   The signature value is defined as:\n         SignatureValue
          ::= OCTET STRING\n   The signature characteristics are defined by the digest
          and signature\n   algorithms.\n"
        title: 2.1.6.6.  signature
      - contents:
        - "2.1.6.7.  unsignedAttrs\n   unsignedAttrs MUST be omitted.\n"
        title: 2.1.6.7.  unsignedAttrs
      title: 2.1.6.  signerInfos
    title: 2.1.  Signed-Data Content Type
  title: 2.  Signed Object Syntax
- contents:
  - "3.  Signed Object Validation\n   Before a relying party can use a signed object,
    the relying party\n   MUST validate the signed object by verifying that all of
    the\n   following conditions hold.  A relying party may perform these checks\n
    \  in any order.  Note that these checks are necessary, but not\n   sufficient.
    \ In general, further validation MUST be performed based\n   on the specific type
    of signed object.\n   1.  The signed object syntax complies with this specification.
    \ In\n       particular, each of the following is true:\n      a.  The content-type
    of the CMS object is SignedData (OID\n          1.2.840.113549.1.7.2)\n      b.
    \ The version of the SignedData object is 3.\n      c.  The certificates field
    in the SignedData object is present and\n          contains one EE certificate,
    the SubjectKeyIdentifier field of\n          which matches the sid field of the
    SignerInfo object.\n      d.  The crls field in the SignedData object is omitted.\n
    \     e.  The version of the SignerInfo is 3.\n      f.  The signedAttrs field
    in the SignerInfo object is present and\n          contains both the content-type
    attribute (OID\n          1.2.840.113549.1.9.3) and the message-digest attribute
    (OID\n          1.2.840.113549.1.9.4).\n      g.  The signedAttrs field in the
    SignerInfo object does not\n          contain any attributes other than the following
    four: the\n          content-type attribute (OID 1.2.840.113549.1.9.3), the\n
    \         message-digest attribute (OID 1.2.840.113549.1.9.4), the\n          signing-time
    attribute (OID 1.2.840.113549.1.9.5), and the\n          binary-signing-time attribute
    (OID\n          1.2.840.113549.1.9.16.2.46).  Note that the signing-time and\n
    \         binary-signing-time attributes MAY be present, but they are\n          not
    required.\n      h.  The eContentType in the EncapsulatedContentInfo is an OID
    that\n          matches the attrValues in the content-type attribute.\n      i.
    \ The unsignedAttrs field in the SignerInfo object is omitted.\n      j.  The
    digestAlgorithm in the SignedData and SignerInfo objects\n          conforms to
    the RPKI Algorithms and Key Size Profile\n          specification [RFC6485].\n
    \     k.  The signatureAlgorithm in the SignerInfo object conforms to\n          the
    RPKI Algorithms and Key Size Profile specification\n          [RFC6485].\n      l.
    \ The signed object is DER encoded.\n   2.  The public key of the EE certificate
    (contained within the CMS\n       signed-data object) can be used to successfully
    verify the\n       signature on the signed object.\n   3.  The EE certificate
    (contained within the CMS signed-data object)\n       is a valid EE certificate
    in the RPKI as specified by [RFC6487].\n       In particular, a valid certification
    path from a trust anchor to\n       this EE certificate exists.\n   If the above
    procedure indicates that the signed object is invalid,\n   then the signed object
    MUST be discarded and treated as though no\n   signed object were present.  If
    all of the conditions above are true,\n   then the signed object may be valid.
    \ The relying party MUST then\n   perform any additional validation steps required
    for the particular\n   type of signed object.\n   Note that a previously valid
    signed object will cease to be valid\n   when the associated EE certificate ceases
    to be valid (for example,\n   when the end of the certificate's validity period
    is reached, or when\n   the certificate is revoked by the authority that issued
    it).  See\n   [RFC6487] for a complete specification of resource certificate\n
    \  validity.\n"
  title: 3.  Signed Object Validation
- contents:
  - "4.  Definition of Specific Signed Objects\n   Each RPKI signed object MUST be
    defined in an Internet Standards\n   Track document based on this profile, by
    specifying the following\n   data elements and validation procedure:\n   1.  eContentType:
    \ A single OID to be used for both the eContentType\n       field and the content-type
    attribute.  This OID uniquely\n       identifies the type of signed object.\n
    \  2.  eContent:  Define the syntax for the eContent field in\n       encapContentInfo.
    \ This is the payload that contains the data\n       specific to a given type
    of signed object.\n   3.  Additional Validation:  Define a set of additional validation\n
    \      steps for the specific signed object.  Before using this specific\n       signed
    object, a relying party MUST perform both the generic\n       validation steps
    in Section 3 above, as well as these additional\n       steps.\n"
  title: 4.  Definition of Specific Signed Objects
- contents:
  - "5.  Security Considerations\n   There is no assumption of confidentiality for
    the data in an RPKI\n   signed object.  The integrity and authenticity of each
    signed object\n   is based on the verification of the object's digital signature,
    and\n   the validation of the EE certificate used to perform that\n   verification.
    \ It is anticipated that signed objects will be stored\n   in repositories that
    will be publicly accessible.\n   Since RPKI signed objects make use of CMS as
    an encapsulation format,\n   the security considerations for CMS apply [RFC5652].\n"
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   IANA has created a registry of \"RPKI Signed Objects\"
    types that\n   utilize the template defined in this document.  This registry\n
    \  contains three fields: an informal name for the signed object, the\n   OID
    for the eContentType of the signed object, and a specification\n   pointer that
    references the RFC in which the signed object is\n   specified.  The entries in
    this registry are managed by IETF\n   Standards Action.\n   The registry has been
    initially populated with the following two\n   entries.\n   Name      |    OID
    \                     | Specification\n   ----------------------------------------------------------------\n
    \  ROA       | 1.2.840.113549.1.9.16.1.24  | RFC 6482\n   Manifest  | 1.2.840.113549.1.9.16.1.26
    \ | RFC 6486\n"
  title: 6.  IANA Considerations
- contents:
  - "7.  Acknowledgements\n   The authors wish to thank Charles Gardiner, Russ Housley,
    and Derek\n   Kong for their help and contributions.  Additionally, the authors\n
    \  would like to thank Rob Austein, Roque Gagliano, Danny McPherson,\n   Sean
    Turner, and Sam Weiler for their careful reviews and helpful\n   comments.\n"
  title: 7.  Acknowledgements
- contents:
  - "8.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs
    to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n
    \  [RFC3779]  Lynn, C., Kent, S., and K. Seo, \"X.509 Extensions for IP\n              Addresses
    and AS Identifiers\", RFC 3779, June 2004.\n   [RFC5280]  Cooper, D., Santesson,
    S., Farrell, S., Boeyen, S.,\n              Housley, R., and W. Polk, \"Internet
    X.509 Public Key\n              Infrastructure Certificate and Certificate Revocation
    List\n              (CRL) Profile\", RFC 5280, May 2008.\n   [RFC5652]  Housley,
    R., \"Cryptographic Message Syntax (CMS)\", STD 70,\n              RFC 5652, September
    2009.\n   [RFC6485]  Huston, G., \"The Profile for Algorithms and Key Sizes for\n
    \             Use in the Resource Public Key Infrastructure (RPKI)\", RFC\n              6485,
    February 2012.\n   [RFC6487]  Huston, G., Michaelson, G., and R. Loomans, \"A
    Profile for\n              X.509 PKIX Resource Certificates\", RFC 6487, February\n
    \             2012.\n   [X.208-88] CCITT.  Recommendation X.208: Specification
    of Abstract\n              Syntax Notation One (ASN.1), 1988.\n   [X.509-88] CCITT.
    \ Recommendation X.509: The Directory Authentication\n              Framework,
    1988.\n"
  title: 8.  Normative References
- contents:
  - "9.  Informative References\n   [RFC6019]  Housley, R., \"BinaryTime: An Alternate
    Format for\n              Representing Date and Time in ASN.1\", RFC 6019, September\n
    \             2010.\n   [RFC6480]  Lepinski, M. and S. Kent, \"An Infrastructure
    to Support\n              Secure Internet Routing\", RFC 6480, February 2012.\n
    \  [RFC6482]  Lepinski, M., Kent, S., and D. Kong, \"A Profile for Route\n              Origin
    Authorizations (ROAs)\", RFC 6482, February 2012.\n"
  title: 9.  Informative References
- contents:
  - "Authors' Addresses\n   Matt Lepinski\n   BBN Technologies\n   10 Moulton Street\n
    \  Cambridge MA 02138\n   EMail: mlepinski@bbn.com\n   Andrew Chi\n   BBN Technologies\n
    \  10 Moulton Street\n   Cambridge MA 02138\n   EMail: achi@bbn.com\n   Stephen
    Kent\n   BBN Technologies\n   10 Moulton Street\n   Cambridge MA 02138\n   EMail:
    kent@bbn.com\n"
  title: Authors' Addresses
