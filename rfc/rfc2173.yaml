- title: __initial_text__
  contents:
  - '           A MAPOS version 1 Extension - Node Switch Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a MAPOS extension, Node Switch Protocol,\
    \ for\n   automatic node address assignment. MAPOS is a multiple access\n   protocol\
    \ for transmission of network-protocol datagrams, encapsulated\n   in High-Level\
    \ Data Link Control (HDLC) frames, over SONET/SDH. NSP\n   automates the HDLC\
    \ address configuration of each node. Using NSP, a\n   node retrieves its HDLC\
    \ address from the switch to which it is\n   connected.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   MAPOS[1], Multiple Access Protocol over SONET(Synchronous\
    \ Optical\n   Network)/SDH(Synchronous Digital Hierarchy)[2][3][4][5], is a\n\
    \   protocol for transmission of HDLC frames over SONET/SDH. A SONET\n   switch\
    \ provides multiple access capability to each node. In MAPOS,\n   each node has\
    \ a unique HDLC address within a switch. The address is\n   equivalent to the\
    \ port number of the switch to which the node is\n   connected.  This document\
    \ describes an extension to MAPOS, Node\n   Switch Protocol, which enable automatic\
    \ HDLC address assignment.\n   First, it explains the addressing of MAPOS. Then,\
    \ it describes the\n   NSP protocol for automatic HDLC node address assignment.\n"
- title: 2. Node Address Format
  contents:
  - "2. Node Address Format\n   This section describes MAPOS Version 1 address format\
    \ in single and\n   multiple switch environment.\n"
- title: 2.1 Address Format
  contents:
  - "2.1 Address Format\n   In MAPOS network, each end node has a unique HDLC address.\
    \ As shown\n   in Figure 1, the address length is 8 bits. The LSB is always 1\
    \ which\n   indicates the end of the field.  When a SONET switch receives an HDLC\n\
    \   frame, it forwards the frame based on the address in the frame\n   header.\n\
    \   In unicast, MSB is 0 and the rest of the bits are the port number to\n   which\
    \ a node is connected. Since the LSB is always 1, the minimum and\n   maximum\
    \ addresses are 0x01 and 0x7F, respectively.  Address 0x01 is\n   reserved and\
    \ is assigned to the control processor in a SONET switch.\n   In broadcast, MSB\
    \ is 1 and the rest of the bits are all 1s. In\n   multicast, MSB is 1 and the\
    \ rest of the bits, except for the LSB,\n   indicate the group address.\n    \
    \       +-------------+-+\n           | | | | | | | | |\n           | |port number|1|\n\
    \           +-+-----------+-+\n            ^             ^\n            |    \
    \         |\n            |             +------- EA bit (always 1)\n          \
    \  |\n            1 : broadcast, multicast\n            0 : unicast\n        \
    \                      Figure 1 Address format\n"
- title: 2.2 Address in multi-switch environment
  contents:
  - "2.2 Address in multi-switch environment\n   In a multi-switch environment, variable-length\
    \ subnet addressing is\n   used. Each switch has a switch number that is unique\
    \ within the\n   system. Subnetted node addresses consist of the switch number\
    \ and the\n   port number to which a node is connected. The address format is\
    \ \"0\n   <switch number> <node number> 1\" for a unicast address, \"all 1\" for\n\
    \   the broadcast address, and \"1 <group address> 1\" for a multicast\n   address.\n\
    \   The address 0x01 is reserved and is assigned to the control processor\n  \
    \ in the \"local\" switch. That is, it indicates the switch itself to\n   which\
    \ the node is connected. The addresses of the form \"0 <switch\n   number> <all\
    \ 0> 1\" are reserved, and indicates the control processor\n   of the switch designated\
    \ by the switch number.\n   In Figure 2, the switch numbers are two bits long.\
    \ Node N1 is\n   connected to port 0x3 of switch S1 numbered 0x1 (01 in binary).\
    \ Thus,\n   the node address is 0 + 01 + 00011, that is, 00100011(0x23). Node\
    \ N3\n   has an address 01001001(0x49), since the switch number of S2 is 0x2\n\
    \   (10 in binary) and the port number is 0x09. Note that all the port\n   numbers\
    \ are odd because the LSBs are always 1.\n                           +------+\n\
    \                           | node |\n                           |  N1  |\n  \
    \                         +------+\n                               | 00100011(0x23)\n\
    \                               |\n                               |0x3       \
    \      |0x3\n               +------+    +---+----+       +---+----+     +------+\n\
    \               | node +----+ SONET  +-------+ SONET  +-----+ node |\n       \
    \        |  N2  | 0x5| Switch |0x9 0x5| Switch |0x9  |  N3  |\n              \
    \ +------+    |   S1   |       |   S2   |     +------+\n           00100101(0x25)\
    \  |  0x1   |       |  0x2   |   01001001(0x49)\n                           +---+----+\
    \       +---+----+\n                               |0x7             |0x7\n   \
    \       Figure 2  Addressing in Multiple Switch Environment\n"
- title: 4 NSP(Node-Switch Protocol)
  contents:
  - "4 NSP(Node-Switch Protocol)\n   This section describes the NSP protocol used\
    \ for automatic node\n   address assignment.\n"
- title: 4.1 NSP protocol
  contents:
  - "4.1 NSP protocol\n   NSP is introduced to provide an automatic node address assignment\n\
    \   function in MAPOS version 1. It reduces the administrative overhead\n   of\
    \ node address configuration for each node and prevents troubles\n   such as address\
    \ inconsistency and collision. When a node is connected\n   to a switch and receives\
    \ SONET signal correctly, the node sends an\n   address request packet to the\
    \ control processor in the local switch.\n   The destination address of this packet\
    \ is 00000001(0x01). When the\n   control processor receives the packet, it replies\
    \ with an address\n   assignment packet. The destination is the assigned node\
    \ address. If\n   the node does not receive the address assignment packet within\
    \ 5\n   seconds, it retransmits the address request packet. The\n   retransmission\
    \ continues until the node successfully receives the\n   address assignment packet.\n\
    \   Whenever a node detects a transmission error such as carrier loss or\n   out-of-synchronization,\
    \ it SHOULD send an address request packet to\n   the control processor and verify\
    \ its current address. In addition, a\n   node MUST verify its address by sending\
    \ address request packets every\n   30 seconds. The switch regards them as keep-alive\
    \ packets and\n   utilizes them to detect the node's status. If it has not received\
    \ a\n   request packet for more than 90 seconds, it assumes that the node\n  \
    \ went down.  In addition, it also assumes the node went down when a\n   switch\
    \ detects a SONET signal failure.\n"
- title: 4.2 Packet Format
  contents:
  - "4.2 Packet Format\n   The HDLC protocol field of a NSP frame contains 0xFE03\
    \ (hexadecimal)\n   as defined by the \"MAPOS Version 1 Assigned Numbers\" [6].\
    \ The\n   information field contains the NSP packet as shown in Figure 3.\n  \
    \         +-----------+------------+\n           I  command  I  address   I\n\
    \           +-----------+------------+\n           I<- 32bit ->I<- 32 bit ->I\n\
    \                      Figure 3  NSP packet format\n   The command field is 32\
    \ bits long and has the following values (in\n   decimal);\n           1     \
    \  address request\n           2       address assignment\n           3      \
    \ reject(error)\n   The length of the address field is 32bits. In address request\n\
    \   packets, the NSP address field SHOULD be filled with zeroes, although\n  \
    \ the switch ignores it. In address assignment packets, the assigned\n   address\
    \ is placed in the least significant byte of the field. The\n   rest of the field\
    \ is padded with zeroes. When the switch can not\n   assign the address for some\
    \ reason, the switch replies with a reject\n   command (the values is 3). The\
    \ value of the address field is\n   undefined.\n"
- title: 4.3 Consideration for special cases
  contents:
  - "4.3 Consideration for special cases\n   There are two special cases to consider.\
    \ One is a point-to-point\n   connection without a switch. The other is loop-back,\
    \ that is, direct\n   connection between the input and the output of the same\
    \ port.\n"
- title: 4.3.1 point-to-point
  contents:
  - "4.3.1 point-to-point\n   In the case of a point-to-point connection shown in\
    \ Figure 4, a node\n   sends an address request packet to the other node. The\
    \ destination\n   address is 00000001(0x01), that is usually a control processor\
    \ in a\n   switch. When a node receives the address request, it detects the\n\
    \   point-to-point connection by examining both the destination address\n   and\
    \ the command contained.  Then, it MUST reply with an address\n   assignment packet.\
    \ The assigned address MUST be 00000011(0x03). Since\n   both nodes send an address\
    \ request to each other, both of them get\n   address 00000011(0x03). Since any\
    \ address can be used in point-to-\n   point environment, there is no problem\
    \ even if both of the nodes have\n   the same address.\n                   ----\
    \ address request ----> 0x01\n                      0x03 <---- address assignment\
    \ ----\n           +------+                                +------+\n        \
    \   | node +--------------------------------+ node |\n           +------+    \
    \                            +------+\n                      0x01 <---- address\
    \ request ----\n                   ---- address assignment ----> 0x03\n      \
    \             Figure 4 Point-to-point connection\n"
- title: 4.3.2 loop-back
  contents:
  - "4.3.2 loop-back\n   Another special case is loop-back where the output port of\
    \ a node is\n   simply connected to its input port as shown in Figure 5. In this\n\
    \   case, the same mechanism as that for point-to-point can be applied\n   without\
    \ modification.  A node sends an address request packet\n   destined to 00000001(0x01).\
    \ The node then receives the same packet.\n   Since the destination is 00000001(0x01),\
    \ it replies with an address\n   assignment packet, containing the assigned address\
    \ 00000011(0x03), to\n   the address 0000 0011(0x03).  Thus, the node obtains\
    \ the address\n   00000011(0x03).\n                     ---- address request ---->\
    \ 0x01\n           +------+  --- address assignment --> 0x03\n           |   \
    \   +-------------->-----------------+\n           | node +                  \
    \              |\n           |      +--------------<-----------------+\n     \
    \      +------+\n                    Figure 5 Loop-back Configuration\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: References
  contents:
  - "References\n   [1]   Murakami, K. and M. Maruyama, \"MAPOS - Multiple Access\
    \ Protocol\n         over SONET/SDH, Version 1,\" RFC-2171, June 1997.\n   [2]\
    \   CCITT Recommendation G.707: Synchronous Digital Hierarchy Bit\n         Rates\
    \ (1990).\n   [3]   CCITT Recommendation G.708: Network Node Interface for\n \
    \        Synchronous Digital Hierarchy (1990).\n   [4]   CCITT Recommendation\
    \ G.709: Synchronous Multiplexing Structure\n         (1990).\n   [5]   American\
    \ National Standard for Telecommunications - Digital\n         Hierarchy - Optical\
    \ Interface Rates and Formats Specification,\n         ANSI T1.105-1991.\n   [6]\
    \   Maruyama, M. and K. Murakami, \"MAPOS Version 1 Assigned\n         Numbers,\"\
    \ RFC-2172, June, 1997.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to acknowledge the contributions\
    \ and\n   thoughtful suggestions of John P. Mullaney, Clark Bremer, Masayuki\n\
    \   Kobayashi, Paul Francis, Toshiaki Yoshida, and Takahiro Sajima.\n"
- title: Authors' Address
  contents:
  - "Authors' Address\n     Ken Murakami\n     NTT Software Laboratories\n     3-9-11,\
    \ Midori-cho\n     Musashino-shi\n     Tokyo 180, Japan\n     E-mail: murakami@ntt-20.ecl.net\n\
    \     Mitsuru Maruyama\n     NTT Software Laboratories\n     3-9-11, Midori-cho\n\
    \     Musashino-shi\n     Tokyo 180, Japan\n     E-mail: mitsuru@ntt-20.ecl.net\n"
