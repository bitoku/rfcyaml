- title: __initial_text__
  contents:
  - "                   RObust Header Compression (ROHC):\n             Profiles for\
    \ User Datagram Protocol (UDP) Lite\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2005).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines Robust Header Compression (ROHC) profiles\
    \ for\n   compression of Real-Time Transport Protocol, User Datagram Protocol-\n\
    \   Lite, and Internet Protocol (RTP/UDP-Lite/IP) packets and UDP-\n   Lite/IP.\
    \  These profiles are defined based on their differences with\n   the profiles\
    \ for UDP as specified in RFC 3095.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction..................................................\
    \  2\n   2.  Terminology...................................................  3\n\
    \   3.  Background....................................................  3\n  \
    \     3.1.  Overview of the UDP-Lite Protocol.......................  3\n    \
    \   3.2.  Expected Behaviours of UDP-Lite Flows...................  5\n      \
    \       3.2.1.  Per-Packet Behavior.............................  5\n        \
    \     3.2.2.  Inter-Packet Behavior...........................  5\n          \
    \   3.2.3.  Per-Flow Behavior...............................  5\n       3.3. \
    \ Header Field Classification.............................  5\n   4.  Rationale\
    \ behind the Design of ROHC Profiles for UDP-Lite.....  6\n       4.1.  Design\
    \ Motivations......................................  6\n       4.2.  ROHC Considerations.....................................\
    \  6\n   5.  ROHC Profiles for UDP-Lite....................................  6\n\
    \       5.1.  Context Parameters......................................  7\n  \
    \     5.2.  Initialization..........................................  8\n    \
    \         5.2.1.  Initialization of the UDP-Lite Header [1].......  8\n      \
    \       5.2.2.  Compressor and Decompressor Logic...............  9\n       5.3.\
    \  Packet Formats..........................................  9\n             5.3.1.\
    \  General Packet Format...........................  9\n             5.3.2.  Packet\
    \ Type CCE: CCE(), CCE(ON), and CCE(OFF)... 10\n                     5.3.2.1.\
    \  Properties of CCE():.................. 11\n                     5.3.2.2.  Properties\
    \ of CCE(ON):................ 11\n                     5.3.2.3.  Properties of\
    \ CCE(OFF):............... 12\n       5.4.  Compressor Logic........................................\
    \ 12\n       5.5.  Decompressor Logic...................................... 12\n\
    \       5.6.  Additional Mode Transition Logic........................ 13\n  \
    \     5.7.  The CONTEXT_MEMORY Feedback Option...................... 13\n    \
    \   5.8.  Constant IP-ID.......................................... 13\n   6. \
    \ Security Considerations....................................... 14\n   7.  IANA\
    \ Considerations........................................... 14\n   8.  Acknowledgments...............................................\
    \ 15\n   9.  References.................................................... 15\n\
    \       9.1.  Normative References.................................... 15\n  \
    \     9.2.  Informative References.................................. 15\n   Appendix\
    \ A.  Detailed Classification of Header Fields............. 17\n   Appendix B.\
    \  Detailed Format of the CCE Packet Type............... 20\n   Author's Address..................................................\
    \ 22\n   Full Copyright Statement.......................................... 23\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The ROHC WG has developed a header compression framework\
    \ on top of\n   which various profiles can be defined for different protocol sets\
    \ or\n   compression strategies.  Due to the demands of the cellular industry\n\
    \   for an efficient way to transport voice over IP over wireless, ROHC\n   [2]\
    \ has mainly focused on compression of IP/UDP/RTP headers, which\n   are generous\
    \ in size, especially compared to the payloads often\n   carried by packets with\
    \ these headers.\n   ROHC RTP has become a very efficient, robust, and capable\
    \ compression\n   scheme, able to compress the headers down to a total size of\
    \ one\n   octet only.  Also, transparency is guaranteed to an extremely high\n\
    \   extent, even when residual bit errors are present in compressed\n   headers\
    \ delivered to the decompressor.\n   UDP-Lite [4] is a transport protocol similar\
    \ to the UDP protocol [7].\n   UDP-Lite is useful for applications designed with\
    \ the capability to\n   tolerate errors in the payload, for which receiving damaged\
    \ data is\n   better than dealing with the loss of entire packets.  This may be\n\
    \   particularly suitable when packets are transported over link\n   technologies\
    \ in which data can be partially damaged, such as wireless\n   links.\n   Although\
    \ these transport protocols are very similar, ROHC profiles\n   must be defined\
    \ separately for robust compression of UDP-Lite headers\n   because UDP-Lite does\
    \ not share the same protocol identifier with\n   UDP.  Also, the UDP-Lite Checksum\
    \ Coverage field does not share the\n   semantics of the corresponding UDP Length\
    \ field, and as a consequence\n   it cannot always be inferred anymore.\n   This\
    \ document defines two ROHC profiles for efficient compression of\n   UDP-Lite\
    \ headers.  The objective of this document is to provide\n   simple modifications\
    \ to the corresponding ROHC profiles for UDP,\n   specified in RFC 3095 [2]. \
    \ In addition, the ROHC profiles for UDP-\n   Lite support some of the mechanisms\
    \ defined in the profile for\n   compression of IP headers [3] (ROHC IP-Only).\
    \  This specification\n   includes support for compression of multiple IP headers\
    \ and for\n   compressing IP-ID fields with constant behavior, as well as improved\n\
    \   mode transition logic and a feedback option for decompressors with\n   limited\
    \ memory resources.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   In this document, the key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\",\n   \"SHALL\", \"SHALL NOT\", \"SHOULD, \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\",\n   and \"OPTIONAL\" are to be interpreted as described in RFC 2119\
    \ [1].\n   ROHC RTP         : RTP/UDP/IP profile 0x0001 defined in RFC 3095 [2].\n\
    \   ROHC UDP         : UDP/IP profile 0x0002 defined in RFC 3095 [2].\n   ROHC\
    \ UDP-Lite    : UDP-Lite/IP profile defined in this document.\n   ROHC RTP/UDP-Lite:\
    \ RTP/UDP-Lite/IP profile defined in this document.\n"
- title: 3.  Background
  contents:
  - '3.  Background

    '
- title: 3.1.  Overview of the UDP-Lite Protocol
  contents:
  - "3.1.  Overview of the UDP-Lite Protocol\n   UDP-Lite is a transport protocol\
    \ defined as an independent variant of\n   the UDP transport protocol.  UDP-Lite\
    \ is very similar to UDP, and it\n   allows applications that can tolerate errors\
    \ in the payload to use a\n   checksum with an optional partial coverage.  This\
    \ is particularly\n   useful with IPv6 [6], in which the use of the transport-layer\n\
    \   checksum is mandatory.\n   UDP-Lite replaces the Length field of the UDP header\
    \ with a Checksum\n   Coverage field.  This field indicates the number of octets\
    \ covered by\n   the 16-bit checksum, which is applied on a per-packet basis.\
    \  The\n   coverage area always includes the UDP-Lite header and may cover the\n\
    \   entire packet, in which case UDP-Lite becomes semantically identical\n   to\
    \ UDP.  UDP-Lite and UDP do not share the same protocol identifier.\n   The UDP-Lite\
    \ header format:\n        0              15 16             31\n       +--------+--------+--------+--------+\n\
    \       |     Source      |   Destination   |\n       |      Port       |    \
    \  Port       |\n       +--------+--------+--------+--------+\n       |    Checksum\
    \     |                 |\n       |    Coverage     |    Checksum     |\n    \
    \   +--------+--------+--------+--------+\n       |                          \
    \         |\n       :              Payload              :\n       |          \
    \                         |\n       +-----------------------------------+\n  \
    \ Like the UDP checksum, the UDP-Lite checksum is an end-to-end\n   mechanism\
    \ against erroneous delivery of error sensitive data.  This\n   checksum is mandatory\
    \ with IPv6 [5] for both protocols.  However,\n   unlike its UDP counterpart,\
    \ the UDP-Lite checksum may not be\n   transmitted as all zeroes and cannot be\
    \ disabled for IPv4 [5].  For\n   UDP, if the checksum is disabled (IPv4 only),\
    \ the Checksum field\n   maintains a constant value and is normally not sent by\
    \ the header\n   compression scheme.  If the UDP checksum is enabled (mandatory\
    \ for\n   IPv6), such an unpredictable field cannot be compressed and is sent\n\
    \   uncompressed.  The UDP Length field, however, is always redundant and\n  \
    \ can be provided by the IP module.  Header compression schemes do not\n   normally\
    \ transmit any bits of information for this field, as its\n   value can be inferred\
    \ from the link layer.\n   For UDP-Lite, the checksum also has unpredictable values,\
    \ and this\n   field must always be included as-is in the compressed header for\
    \ both\n   IPv4 and IPv6.  Furthermore, as the UDP Length field is redefined as\n\
    \   the Checksum Coverage field by UDP-Lite, this leads to different\n   properties\
    \ for this field from a header-compression perspective.\n   The following summarizes\
    \ the relationship between UDP and UDP-Lite:\n   - UDP-Lite and UDP have different\
    \ protocol identifiers.\n   - The UDP-Lite checksum cannot be disabled for IPv4.\n\
    \   - UDP-Lite redefines the UDP Length field as the Checksum Coverage\n     field,\
    \ with different semantics.\n   - UDP-Lite is semantically equivalent to UDP when\
    \ the Checksum\n     Coverage field indicates the total length of the packet.\n\
    \   The next section provides a more detailed discussion of the behavior\n   of\
    \ the Checksum Coverage field of UDP-Lite in relation to header\n   compression.\n"
- title: 3.2.  Expected Behaviours of UDP-Lite Flows
  contents:
  - '3.2.  Expected Behaviours of UDP-Lite Flows

    '
- title: 3.2.1.  Per-Packet Behavior
  contents:
  - "3.2.1.  Per-Packet Behavior\n   As mentioned in the previous section, the checksum\
    \ coverage value is\n   applied independently of other packets that may belong\
    \ to the same\n   flow.  Specifically, the value of the checksum coverage may\
    \ indicate\n   that the UDP-Lite packet is either entirely covered by the checksum\n\
    \   or covered up to some boundary less than the packet size but\n   including\
    \ the UDP-Lite header.\n"
- title: 3.2.2.  Inter-Packet Behavior
  contents:
  - "3.2.2.  Inter-Packet Behavior\n   In relation to each other, UDP-Lite packets\
    \ may exhibit one of three\n   possible change patterns, where within a sequence\
    \ of packets the\n   value of the Checksum Coverage field is\n   1. changing,\
    \ while covering the entire packet;\n   2. unchanging, covering up to a fixed\
    \ boundary within the packet; or\n   3. changing, but it does not follow any specific\
    \ pattern.\n   The first pattern above corresponds to the semantics of UDP, when\
    \ the\n   UDP checksum is enabled.  For this case, the checksum coverage field\n\
    \   varies according to the packet length and may be inferred from the IP\n  \
    \ header, as is the UDP Length field value.\n   The second pattern corresponds\
    \ to the case where the coverage is the\n   same from one packet to another within\
    \ a particular sequence.  For\n   this case, the Checksum Coverage field may be\
    \ a static value defined\n   in the context, and it does not have to be sent in\
    \ the compressed\n   header.  For the third case, no useful change pattern can\
    \ be\n   identified from packet to packet for the value of the checksum\n   coverage\
    \ field, and it must be included in the compressed header.\n"
- title: 3.2.3.  Per-Flow behavior
  contents:
  - "3.2.3.  Per-Flow behavior\n   It can be expected that any one of the above change\
    \ patterns for\n   sequences of packets may be predominant at any time during\
    \ the\n   lifetime of the UDP-Lite flow.  A flow that predominantly follows the\n\
    \   first two change patterns described above may provide opportunities\n   for\
    \ compressing the Checksum Coverage field for most of the packets.\n"
- title: 3.3.  Header Field Classification
  contents:
  - "3.3.  Header Field Classification\n   In relation to the header field classification\
    \ of RFC 3095 [2], the\n   first two patterns represent the case where the value\
    \ of the Checksum\n   Coverage field behavior is fixed and may be either INFERRED\
    \ (pattern\n   1) or STATIC (pattern 2).  Pattern 3 is for the case where the\
    \ value\n   varies unpredictably, the field is CHANGING, and the value must be\n\
    \   sent along with every packet.\n   Additional information regarding the analysis\
    \ of the behavior of the\n   UDP-Lite fields may be found in Appendix A.\n"
- title: 4.  Rationale behind the Design of ROHC Profiles for UDP-Lite
  contents:
  - '4.  Rationale behind the Design of ROHC Profiles for UDP-Lite

    '
- title: 4.1.  Design Motivations
  contents:
  - "4.1.  Design Motivations\n   Simplicity is a strong motivation for the design\
    \ of the UDP-Lite\n   header compression profiles.  The profiles defined for UDP-Lite\n\
    \   should entail only a few simple modifications to the corresponding\n   profiles\
    \ defined for UDP in RFC 3095 [2].  In addition, it is\n   desirable to include\
    \ some of the improvements found in the ROHC IP-\n   Only profile [3].  Finally,\
    \ whenever UDP-Lite is used in a manner\n   that is semantically identical to\
    \ UDP, the compression efficiency\n   should be similar.\n"
- title: 4.2.  ROHC Considerations
  contents:
  - "4.2.  ROHC Considerations\n   The simplest approach to the definition of ROHC\
    \ profiles for UDP-Lite\n   is to treat the Checksum Coverage field as an irregular\
    \ value, and to\n   send it uncompressed for every packet.  This may be achieved\
    \ simply\n   by adding the field to the definition of the general packet format\n\
    \   [2].  However, then the compression efficiency would always be less\n   than\
    \ for UDP.\n   Some care should be given to achieve compression efficiency for\
    \ UDP-\n   Lite similar to that for UDP when the Checksum Coverage field behaves\n\
    \   like the UDP Length field.  This requires the possibility to infer\n   the\
    \ Checksum Coverage field when it is equal to the length of the\n   packet.  Otherwise,\
    \ this would put the UDP-Lite protocol at a\n   disadvantage over links where\
    \ header compression is used, when its\n   behavior is made similar to the semantics\
    \ of UDP.\n   A mechanism to detect the presence of the Checksum Coverage field\
    \ in\n   compressed headers is thus needed.  This is achieved by defining a\n\
    \   new packet type with the identifiers left unused in RFC 3095 [2].\n"
- title: 5.  ROHC Profiles for UDP-Lite
  contents:
  - "5.  ROHC Profiles for UDP-Lite\n   This section defines two ROHC profiles:\n\
    \      - RTP/UDP-Lite/IP compression (profile 0x0007)\n      - UDP-Lite/IP compression\
    \     (profile 0x0008)\n   These profiles build on the specifications found in\
    \ RFC 3095 [2],\n   with as little modification as possible.  Unless it is explicitly\n\
    \   stated otherwise, the profiles defined herein follow the\n   specifications\
    \ of ROHC UDP and ROHC RTP, respectively.\n   Note also that this document reuses\
    \ the notation found in [2].\n"
- title: 5.1.  Context Parameters
  contents:
  - "5.1.  Context Parameters\n   As described in [2], information about previous\
    \ packets is maintained\n   in a context.  This includes information describing\
    \ the packet stream\n   and compression parameters.  Although the UDP and UDP-Lite\
    \ protocols\n   share many commonalities, the differences in semantics as described\n\
    \   earlier render the following parameter inapplicable:\n   The parameter context(UDP\
    \ Checksum)\n     The UDP-Lite checksum cannot be disabled, as opposed to UDP.\
    \  The\n     parameter context(UDP Checksum) defined in [2] (section 5.7) is\n\
    \     therefore not used for compression of UDP-Lite.\n   In addition, the UDP-Lite\
    \ checksum is always sent as-is in every\n   compressed packet.  However, the\
    \ Checksum Coverage field may not\n   always be sent in each compressed packet,\
    \ and the following context\n   parameter is used to indicate whether the field\
    \ is sent:\n   The parameter context(UDP-Lite Coverage Field Present)\n     Whether\
    \ the UDP-Lite Checksum Coverage field is present or not in\n     the general\
    \ packet format (see section 5.3.1) is controlled by the\n     value of the Coverage\
    \ Field Present (CFP) flag in the context.\n     If context(CFP) is nonzero, the\
    \ Checksum Coverage field is not\n     compressed, and it is present within compressed\
    \ packets.  If\n     context(CFP) is zero, the Checksum Coverage field is compressed,\n\
    \     and it is not sent.  This is the case when the value of the\n     Checksum\
    \ Coverage field follows a stable inter-packet change\n     pattern; the field\
    \ has either a constant value or it has a value\n     equal to the packet length\
    \ for most packets in a sequence (see\n     section 3.2).\n   Finally, the following\
    \ context parameter is needed to indicate\n   whether the field should be inferred\
    \ or taken from a value previously\n   saved in the context:\n   The parameter\
    \ context(UDP-Lite Coverage Field Inferred)\n     When the UDP-Lite Checksum Coverage\
    \ field is not present in the\n     compressed header (CFP=0), whether it is inferred\
    \ is controlled by\n     the value of the Coverage Field Inferred (CFI) flag in\
    \ the context.\n     If context(CFI) is nonzero, the Checksum Coverage field is\
    \ inferred\n     from the packet length, similarly as for the UDP Length field\
    \ in\n     ROHC RTP.  If context(CFI) is zero, the Checksum Coverage field is\n\
    \     decompressed by using context(UDP-Lite Checksum Coverage).\n     Therefore,\
    \ when context(CFI) is updated to a nonzero value, the\n     value of the Checksum\
    \ Coverage field stored in the context must\n     also be updated.\n"
- title: 5.2.  Initialization
  contents:
  - "5.2.  Initialization\n   Unless it is stated otherwise, the mechanisms of ROHC\
    \ RTP and ROHC\n   UDP found in [2] are used also for the ROHC RTP/UDP-Lite and\
    \ the ROHC\n   UDP-Lite profiles, respectively.\n   In particular, the considerations\
    \ of ROHC UDP regarding the UDP SN\n   taking the role of the RTP Sequence Number\
    \ apply to ROHC UDP-Lite.\n   Also, the static context for ROHC UDP-Lite may be\
    \ initialized by\n   reusing an existing context belonging to a stream compressed\
    \ by using\n   ROHC RTP/UDP-Lite (profile 0x0007), similarly as for ROHC UDP.\n"
- title: 5.2.1.  Initialization of the UDP-Lite Header [1]
  contents:
  - "5.2.1.  Initialization of the UDP-Lite Header [1]\n   The structure of the IR\
    \ and IR-DYN packets and the initialization\n   procedures are the same as for\
    \ the ROHC profiles for UDP [2], with\n   the exception of the dynamic part as\
    \ specified for UDP.  A 2-octet\n   field containing the checksum coverage is\
    \ added before the Checksum\n   field.  This affects the format of dynamic chains\
    \ in both IR and IR-\n   DYN packets.\n   Dynamic part:\n      +---+---+---+---+---+---+---+---+\n\
    \      /       Checksum Coverage       /   2 octets\n      +---+---+---+---+---+---+---+---+\n\
    \      /           Checksum            /   2 octets\n      +---+---+---+---+---+---+---+---+\n\
    \   CRC-DYNAMIC: Checksum Coverage field, Checksum field (octets 5 - 8).\n   CRC-STATIC:\
    \ All other fields (octets 1 - 4).\n"
- title: 5.2.2.  Compressor and Decompressor Logic
  contents:
  - "5.2.2.  Compressor and Decompressor Logic\n   The following logic must be used\
    \ by both the compressor and the\n   decompressor for assigning values to the\
    \ parameters context(CFP) and\n   context(CFI) during initialization:\n   Context(CFP)\n\
    \     During context initialization, the value of context(CFP) MUST be\n     set\
    \ to a nonzero value if the Checksum Coverage field differs from\n     the length\
    \ of the UDP-Lite packet, for any one IR or IR-DYN packet\n     sent (compressor)\
    \ or received (decompressor); otherwise, the value\n     MUST be set to zero.\n\
    \   Context(CFI)\n     During context initialization, the value of context(CFI)\
    \ MUST be\n     set to a nonzero value if the Checksum Coverage field is equal\
    \ to\n     the length of the UDP-Lite packet within an IR or an IR-DYN packet\n\
    \     sent (compressor) or received (decompressor); otherwise, the value\n   \
    \  MUST be set to zero.\n"
- title: 5.3.  Packet Formats
  contents:
  - "5.3.  Packet Formats\n   The general packet format, as defined in RFC 3095 [2],\
    \ is modified to\n   include an additional field for the UDP-Lite checksum coverage.\
    \  A\n   packet type is also defined to handle the specific semantics and\n  \
    \ characteristics of this field.\n"
- title: 5.3.1.  General Packet Format
  contents:
  - "5.3.1.  General Packet Format\n   The general packet format of a compressed ROHC\
    \ UDP-Lite header is\n   similar to the compressed ROHC RTP header ([2], section\
    \ 5.7), with\n   modifications to the Checksum field, as well as additional fields\
    \ for\n   handling multiple IP headers and for the UDP-Lite checksum coverage:\n\
    \      --- --- --- --- --- --- --- ---\n     :            List of            :\
    \  variable, given by static chain\n     /        dynamic chains         /  (does\
    \ not include SN)\n     :   for additional IP headers   :  see also [3], section\
    \ 3.2.\n      --- --- --- --- --- --- --- ---\n     :                        \
    \       :  2 octets,\n     +  UDP-Lite Checksum Coverage   +  if context(CFP)\
    \ = 1 or\n     :                               :  if packet type = CCE (see 5.3.2)\n\
    \      --- --- --- --- --- --- --- ---\n     :                               :\n\
    \     +      UDP-Lite Checksum        +  2 octets\n     :                    \
    \           :\n      --- --- --- --- --- --- --- ---\n   The list of dynamic header\
    \ chains carries the dynamic header part for\n   each IP header in excess of the\
    \ initial two, if there is any (as\n   indicated by the presence of corresponding\
    \ header parts in the static\n   chain).  Note that there is no sequence number\
    \ at the end of the\n   chain, as SN is present within compressed base headers.\n\
    \   The order of the fields following the optional extension of the\n   general\
    \ ROHC packet format is the same as the order between the\n   fields in the uncompressed\
    \ header.\n   When the CRC is calculated, the Checksum Coverage field is CRC-\n\
    \   DYNAMIC.\n"
- title: '5.3.2.  Packet Type CCE: CCE(), CCE(ON), and CCE(OFF)'
  contents:
  - "5.3.2.  Packet Type CCE: CCE(), CCE(ON), and CCE(OFF)\n   The ROHC profiles for\
    \ UDP-Lite define a packet type to handle the\n   various possible change patterns\
    \ of the checksum coverage.  This\n   packet type may be used to manipulate the\
    \ context values that control\n   the presence of the Checksum Coverage field\
    \ within the general packet\n   format (i.e., context(CFP)) and how the field\
    \ is decompressed (i.e.,\n   context(CFI)).  The 2-octet Checksum Coverage field\
    \ is always present\n   within the format of this packet (see section 5.3.1).\n\
    \   This type of packet is named Checksum Coverage Extension, or CCE, and\n  \
    \ its updating properties depend on the final two bits of the packet\n   type\
    \ octet (see format below).  A naming scheme of the form\n   CCE(<some_property>)\
    \ is used to uniquely identify the properties of a\n   particular CCE packet.\n\
    \   Although this packet type defines its own format, it may be\n   considered\
    \ as an extension mechanism for packets of type 2, 1, or 0\n   [2].  This is achieved\
    \ by substitution of the packet type identifier\n   of the first octet of the\
    \ base header (the \"outer\" identifier) with\n   one of the unused packet types\
    \ from RFC 3095 [2].  The substituted\n   identifier is then moved to the first\
    \ octet of the remainder of the\n   base header (the \"inner\" identifier).\n\
    \   The format of the ROHC UDP-Lite CCE packet type is as follows:\n     0   1\
    \   2   3   4   5   6   7\n   +---+---+---+---+---+---+---+---+\n   | 1   1  \
    \ 1   1   1   0   F | K |  Outer packet type identifier\n   +===+===+===+===+===+===+===+===+\n\
    \   :                               :  (with inner type identifier)\n   /    \
    \   Inner Base header       /  variable number of bits, given by\n   :       \
    \                        :  the inner packet type identifier\n   +---+---+---+---+---+---+---+---+\n\
    \     F,K: F,K = 00 is reserved at framework level (IR-DYN);\n          F,K =\
    \ 01 indicates CCE();\n          F,K = 10 indicates CCE(ON);\n          F,K =\
    \ 11 indicates CCE(OFF).\n     Updating properties: The updating properties of\
    \ the inner packet\n          type carried within any of the CCE packets are always\n\
    \          maintained.  CCE(ON) and CCE(OFF) MUST NOT be used to extend\n    \
    \      R-0 and R-1* headers.  In addition, CCE(ON) always updates\n          context(CFP);\
    \ CCE(OFF) always updates context(CFP),\n          context(CFI), and context(UDP-Lite\
    \ Checksum Coverage).\n   Appendix B provides an expanded view of the resulting\
    \ format of the\n   CCE packet type.\n"
- title: 5.3.2.1.  Properties of CCE()
  contents:
  - "5.3.2.1.  Properties of CCE()\n   Aside from the updating properties of the inner\
    \ packet type carried\n   within CCE(), this packet does not update any other\
    \ context values.\n   CCE() thus is mode-agnostic; e.g., it can extend any of\
    \ packet types\n   2, 1, and 0, regardless of the current mode of operation [2].\n\
    \   CCE() may be used when the checksum coverage deviates from the change\n  \
    \ pattern assumed by the compressor, where the field could previously\n   be compressed.\
    \  This packet is useful if the occurrence of such\n   deviations is rare.\n"
- title: 5.3.2.2.  Properties of CCE(ON)
  contents:
  - "5.3.2.2.  Properties of CCE(ON)\n   In addition to the updating properties of\
    \ the inner packet type,\n   CCE(ON) updates context(CFP) to a nonzero value;\
    \ i.e., it effectively\n   turns on the presence of the Checksum Coverage field\
    \ within the\n   general packet format.  This is useful when the predominant change\n\
    \   pattern of the checksum coverage precludes its compression.\n   CCE(ON) can\
    \ extend any of the context-updating packets of type 2, 1,\n   and 0; that is,\
    \ packets with a compressed header containing a CRC\n   [2].  Specifically, R-0\
    \ and R-1* headers MUST NOT be extended by\n   using CCE(ON).\n"
- title: 5.3.2.3.  Properties of CCE(OFF)
  contents:
  - "5.3.2.3.  Properties of CCE(OFF)\n   In addition to the updating properties of\
    \ the inner packet type,\n   CCE(OFF) updates context(CFP) to a value of zero;\
    \ i.e., it\n   effectively turns off the presence of the Checksum Coverage field\n\
    \   within the general packet format.  This is useful when the change\n   pattern\
    \ of the checksum coverage seldom deviates from the pattern\n   assumed by the\
    \ compressor.\n   CCE(OFF) also updates context(CFI) to a nonzero value, if field(UDP-\n\
    \   Lite Checksum Coverage) is equal to the packet length; otherwise, it\n   must\
    \ be set to zero.  Note that when context(CFI) is updated by using\n   packet\
    \ type CCE(OFF), a match of field(Checksum Coverage) with the\n   packet length\
    \ always has precedence over a match with\n   context(Checksum Coverage).  Finally,\
    \ context(UDP-Lite Checksum\n   Coverage) is also updated by CCE(OFF).\n   Similarly\
    \ to CCE(ON), CCE(OFF) can extend any of the context updating\n   packets of type\
    \ 2, 1, and 0 [2].\n"
- title: 5.4.  Compressor Logic
  contents:
  - "5.4.  Compressor Logic\n   If hdr(UDP-Lite Checksum Coverage) is different from\
    \ context(UDP-Lite\n   Checksum Coverage) and different from the packet length\
    \ when\n   context(CFP) is zero, the Checksum Coverage field cannot be\n   compressed.\
    \  In addition, if hdr(UDP-Lite Checksum Coverage) is\n   different from the packet\
    \ length when context(CFP) is zero and\n   context(CFI) is nonzero, the Checksum\
    \ Coverage field cannot be\n   compressed by either.  For both cases, the field\
    \ must be sent\n   uncompressed using a CCE packet, or the context must be reinitialized\n\
    \   by using an IR packet.\n"
- title: 5.5.  Decompressor Logic
  contents:
  - "5.5.  Decompressor Logic\n   For packet types other than IR, IR-DYN, and CCE\
    \ that are received\n   when the value of context(CFP) is zero, the Checksum Coverage\
    \ field\n   must be decompressed by using the value stored in the context if the\n\
    \   value of context(CFI) is zero; otherwise, the field is inferred from\n   the\
    \ length of the UDP-Lite packet derived from the IP module.\n"
- title: 5.6.  Additional Mode Transition Logic
  contents:
  - "5.6.  Additional Mode Transition Logic\n   The profiles defined in this document\
    \ allow the compressor to decline\n   a mode transition requested by the decompressor.\
    \  This is achieved by\n   redefining the Mode parameter for the value mode =\
    \ 0 (in packet types\n   UOR-2, IR, and IR-DYN) as follows (see also [3], section\
    \ 3.4):\n           Mode: Compression mode.  0 = (C)ancel Mode Transition\n  \
    \ Upon receiving the Mode parameter set to 0, the decompressor MUST\n   stay in\
    \ its current mode of operation and SHOULD refrain from sending\n   further mode\
    \ transition requests for the declined mode.\n"
- title: 5.7.  The CONTEXT_MEMORY Feedback Option
  contents:
  - "5.7.  The CONTEXT_MEMORY Feedback Option\n   This feedback option informs the\
    \ compressor that the decompressor\n   does not have sufficient memory resources\
    \ to handle the context of\n   the packet stream required by the current compressed\
    \ structure.\n        0   1   2   3   4   5   6   7\n      +---+---+---+---+---+---+---+---+\n\
    \      |  Opt Type = 9 |  Opt Len = 0  |\n      +---+---+---+---+---+---+---+---+\n\
    \   When receiving a CONTEXT_MEMORY option, the compressor SHOULD take\n   actions\
    \ to compress the packet stream in a way that requiring less\n   decompressor\
    \ memory resources or stop compressing the packet stream.\n"
- title: 5.8.  Constant IP-ID
  contents:
  - "5.8.  Constant IP-ID\n   The profiles for UDP-Lite support compression of the\
    \ IP-ID field with\n   constant behavior, with the addition of the Static IP Identifier\n\
    \   (SID) flag within the dynamic part of the chain used to initialize\n   the\
    \ IPv4 header, as follows (see also [3], section 3.3):\n   Dynamic part:\n   \
    \   +---+---+---+---+---+---+---+---+\n      |        Type of Service        |\n\
    \      +---+---+---+---+---+---+---+---+\n      |         Time to Live       \
    \   |\n      +---+---+---+---+---+---+---+---+\n      /        Identification\
    \         /   2 octets\n      +---+---+---+---+---+---+---+---+\n      | DF|RND|NBO|SID|\
    \       0       |\n      +---+---+---+---+---+---+---+---+\n      / Generic extension\
    \ header list /  variable length\n      +---+---+---+---+---+---+---+---+\n  \
    \ SID: Static IP Identifier.\n      For IR and IR-DYN packets:\n         The logic\
    \ is the same as that for the respective ROHC\n         profiles for UDP, with\
    \ the addition that field (SID)\n         must be kept in the context.\n     \
    \ For compressed headers other than IR and IR-DYN:\n         If value(RND) = 0\
    \ and context(SID) = 0, hdr(IP-ID) is\n         compressed by using Offset IP-ID\
    \ encoding (see [2], section\n         4.5.5) using p = 0 and default-slope(IP-ID\
    \ offset) = 0.\n         If value(RND) = 0 and context(SID) = 1, hdr(IP-ID) is\
    \ constant\n         and compressed away; hdr(IP-ID) is the value of context(IP-ID).\n\
    \         If value(RND) = 1, IP-ID is the uncompressed hdr(IP-ID).  IP-ID\n  \
    \       is then passed as additional octets at the end of the\n         compressed\
    \ header, after any extensions.\n   Note: Only IR and IR-DYN packets can update\
    \ context(SID).\n   Note: All other fields are the same as for the respective\
    \ ROHC\n   profiles for UDP [2].\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The security considerations of RFC 3095 [2] apply\
    \ integrally to this\n   document, without modification.\n"
- title: 7.  IANA Considerations
  contents:
  - "7.  IANA Considerations\n   ROHC profile identifiers 0x0007 (ROHC RTP/UDP-Lite)\
    \ and 0x0008 (ROHC\n   UDP-Lite) have been reserved by the IANA for the profiles\
    \ defined in\n   this document (RFC 4019).\n   Two ROHC profile identifiers must\
    \ be reserved by the IANA for the\n   profiles defined in this document.  Since\
    \ profile number 0x0006 is\n   being saved for the TCP/IP (ROHC-TCP) profile,\
    \ profile numbers 0x0007\n   and 0x0008 are the most suitable unused identifiers\
    \ available, and\n   should thus be used.  As for previous ROHC profiles, profile\
    \ numbers\n   0xnn07 and 0xnn08 must also be reserved for future variants of these\n\
    \   profiles.  The registration suggested for the \"RObust Header\n   Compression\
    \ (ROHC) Profile Identifiers\" name space:\n      OLD:   0x0006-0xnn7F     To\
    \ be Assigned by IANA\n      NEW:   0xnn06            To be Assigned by IANA\n\
    \             0x0007            ROHC RTP/UDP-Lite        [RFC4019]\n         \
    \    0xnn07            Reserved\n             0x0008            ROHC UDP-Lite\
    \            [RFC4019]\n             0xnn08            Reserved\n            \
    \ 0x0009-0xnn7F     To be Assigned by IANA\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   The author would like to thank Lars-Erik Jonsson, Kristofer\
    \ Sandlund,\n   Mark West, Richard Price, Gorry Fairhurst, Fredrik Linstroem and\
    \ Mats\n   Nordberg for useful reviews and discussions around this document.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [1]  Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n \
    \  [2]  Bormann, C., Burmeister, C., Degermark, M., Fukushima, H.,\n        Hannu,\
    \ H., Jonsson, L-E., Hakenberg, R., Koren, T., Le, K., Liu,\n        Z., Martensson,\
    \ A., Miyazaki, A., Svanbro, K., Wiebke, T.,\n        Yoshimura, T., and H. Zheng,\
    \ \"RObust Header Compression (ROHC):\n        Framework and four profiles: RTP,\
    \ UDP, ESP, and uncompressed\",\n        RFC 3095, July 2001.\n   [3]  Jonsson,\
    \ L-E. and G. Pelletier, \"RObust Header Compression\n        (ROHC): A Compression\
    \ Profile for IP\", RFC 3843, June 2004.\n   [4]  Larzon, L-A., Degermark, M.,\
    \ Pink, S., Jonsson, L-E., and G.\n        Fairhurst, \"The Lightweight User Datagram\
    \ Protocol (UDP-Lite)\",\n        RFC 3828, July 2004.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [5]  Postel, J., \"Internet Protocol\", STD\
    \ 5, RFC 791, September 1981.\n   [6]  Deering, S. and R. Hinden, \"Internet Protocol,\
    \ Version 6 (IPv6)\n        Specification\", RFC 2460, December 1998.\n   [7]\
    \  Postel, J., \"User Datagram Protocol\", STD 6, RFC 768, August\n        1980.\n\
    \   [8]  Schulzrinne, H.,  Casner, S., Frederick, R., and V. Jacobson,\n     \
    \   \"RTP: A Transport Protocol for Real-Time Applications\", STD 64,\n      \
    \  RFC 3550, July 2003.\n"
- title: Appendix A.  Detailed Classification of Header Fields
  contents:
  - "Appendix A.  Detailed Classification of Header Fields\n   This section summarizes\
    \ the difference from the classification found\n   in the corresponding appendix\
    \ in RFC 3095 [2] and similarly provides\n   conclusions about how the various\
    \ header fields should be handled by\n   the header compression scheme to optimize\
    \ compression and\n   functionality.  These conclusions are separated based on\
    \ the behavior\n   of the UDP-Lite Checksum Coverage field and use the expected\
    \ change\n   patterns described in section 3.2 of this document.\n"
- title: A.1.  UDP-Lite Header Fields
  contents:
  - "A.1.  UDP-Lite Header Fields\n   The following table summarizes a possible classification\
    \ for the UDP-\n   Lite header fields in comparison with the classification for\
    \ UDP,\n   using the same classes as in RFC 3095 [2].\n   Header fields of UDP-Lite\
    \ and UDP:\n                                  +-------------------+-------------+\n\
    \                                  |      UDP-Lite     |     UDP     |\n     +-------------------+--------+-------------------+-------------+\n\
    \     |       Header      |  Size  |       Class       |    Class    |\n     |\
    \       Field       | (bits) |                   |             |\n     +-------------------+--------+-------------------+-------------+\n\
    \     |    Source Port    |   16   |     STATIC-DEF    | STATIC-DEF  |\n     |\
    \ Destination Port  |   16   |     STATIC-DEF    | STATIC-DEF  |\n     | Checksum\
    \ Coverage |   16   |      INFERRED     |             |\n     |              \
    \     |        |       STATIC      |             |\n     |                   |\
    \        |      CHANGING     |             |\n     |      Length       |   16\
    \   |                   |  INFERRED   |\n     |     Checksum      |   16   | \
    \     CHANGING     |  CHANGING   |\n     +-------------------+--------+-------------------+-------------+\n\
    \   Source and Destination Port\n     Same as for UDP.  Specifically, these fields\
    \ are part of the\n     definition of a stream and must thus be constant for all\
    \ packets in\n     the stream.  The fields are therefore classified as STATIC-DEF.\n\
    \   Checksum Coverage\n     This field specifies which part of the UDP-Lite datagram\
    \ is covered\n     by the checksum.  It may have a value of zero or be equal to\
    \ the\n     datagram length if the checksum covers the entire datagram, or it\n\
    \     may have any value between eight octets and the length of the\n     datagram\
    \ to specify the number of octets protected by the checksum,\n     calculated\
    \ from the first octet of the UDP-Lite header.  The value\n     of this field\
    \ may vary for each packet, and this makes the value\n     unpredictable from\
    \ a header-compression perspective.\n   Checksum\n     The information used for\
    \ the calculation of the UDP-Lite checksum\n     is governed by the value of the\
    \ checksum coverage and minimally\n     includes the UDP-Lite header.  The checksum\
    \ is a changing field\n     that must always be sent as-is.\n   The total size\
    \ of the fields in each class, for each expected change\n   pattern (see section\
    \ 3.2), is summarized in the tables below:\n   Pattern 1:\n     +------------+---------------+\n\
    \     |   Class    | Size (octets) |\n     +------------+---------------+\n  \
    \   | INFERRED   |       2       |  Checksum Coverage\n     | STATIC-DEF |   \
    \    4       |  Source Port / Destination Port\n     | CHANGING   |       2  \
    \     |  Checksum\n     +------------+---------------+\n   Pattern 2:\n     +------------+---------------+\n\
    \     |   Class    | Size (octets) |\n     +------------+---------------+\n  \
    \   | STATIC-DEF |       4       |  Source Port / Destination Port\n     | STATIC\
    \     |       2       |  Checksum Coverage\n     | CHANGING   |       2      \
    \ |  Checksum\n     +------------+---------------+\n   Pattern 3:\n     +------------+---------------+\n\
    \     |   Class    | Size (octets) |\n     +------------+---------------+\n  \
    \   | STATIC-DEF |       4       |  Source Port / Destination Port\n     | CHANGING\
    \   |       4       |  Checksum Coverage / Checksum\n     +------------+---------------+\n"
- title: A.2.  Header Compression Strategies for UDP-Lite
  contents:
  - "A.2.  Header Compression Strategies for UDP-Lite\n   The following table revisits\
    \ the corresponding table (table A.1) for\n   UDP from [2] (section A.2) and classifies\
    \ the changing fields based\n   on the change patterns previously identified in\
    \ section 3.2.\n   Header compression strategies for UDP-Lite:\n   +----------+---------+-------------+-----------+-----------+\n\
    \   |  Field   | Pattern | Value/Delta |   Class   | Knowledge |\n   +==========+=========+=============+===========+===========+\n\
    \   |          |    #1   |    Value    | CHANGING  | INFERRED  |\n   | Checksum\
    \ |---------+-------------+-----------+-----------+\n   | Coverage |    #2   |\
    \    Value    |    RC     |  UNKNOWN  |\n   |          |---------+-------------+-----------+-----------+\n\
    \   |          |    #3   |    Value    | IRREGULAR |  UNKNOWN  |\n   +----------+---------+-------------+-----------+-----------+\n\
    \   | Checksum |   All   |    Value    | IRREGULAR |  UNKNOWN  |\n   +----------+---------+-------------+-----------+-----------+\n"
- title: A.2.1.  Transmit initially but be prepared to update
  contents:
  - "A.2.1.  Transmit initially but be prepared to update\n   UDP-Lite Checksum Coverage\
    \ (Patterns #1 and #2)\n"
- title: A.2.2.  Transmit as-is in all packets
  contents:
  - "A.2.2.  Transmit as-is in all packets\n   UDP-Lite Checksum\n   UDP-Lite Checksum\
    \ Coverage (Pattern #3)\n"
- title: Appendix B.  Detailed Format of the CCE Packet Type
  contents:
  - "Appendix B.  Detailed Format of the CCE Packet Type\n   This section provides\
    \ an expanded view of the format of the CCE\n   packet, based on the general ROHC\
    \ RTP compressed header [2] and the\n   general format of a compressed header\
    \ of the ROHC IP-Only profile\n   [3].  The modifications necessary to carry the\
    \ base header of a\n   packet of type 2, 1 or 0 [2] within the CCE packet format,\
    \ along with\n   the additional fields to properly handle compression of multiple\
    \ IP\n   headers, result in the following structure for the CCE packet type:\n\
    \      0   1   2   3   4   5   6   7\n     --- --- --- --- --- --- --- ---\n \
    \   :         Add-CID octet         :  If for small CIDs and CID 1 - 15\n    +---+---+---+---+---+---+---+---+\n\
    \    | 1   1   1   1   1   0   F | K |  Outer packet type identifier\n    +---+---+---+---+---+---+---+---+\n\
    \    :                               :\n    /   0, 1, or 2 octets of CID    /\
    \  1 - 2 octets if large CIDs\n    :                               :\n    +---+---+---+---+---+---+---+---+\n\
    \    |   First octet of base header  |  (with \"inner\" type indication)\n   \
    \ +---+---+---+---+---+---+---+---+\n    /    Remainder of base header   /  Variable\
    \ number of bits\n    +---+---+---+---+---+---+---+---+\n      0   1   2   3 \
    \  4   5   6   7\n     --- --- --- --- --- --- --- ---\n    :                \
    \               :\n    /          Extension            /  See RFC 3095 [2], section\
    \ 5.7.\n    :                               :\n     --- --- --- --- --- --- ---\
    \ ---\n    :                               :\n    +   IP-ID of outer IPv4 header\
    \  +  See RFC 3095 [2], section 5.7.\n    :                               :\n\
    \     --- --- --- --- --- --- --- ---\n    /    AH data for outer list     / \
    \ See RFC 3095 [2], section 5.7.\n     --- --- --- --- --- --- --- ---\n    :\
    \                               :\n    +         GRE checksum          +  See\
    \ RFC 3095 [2], section 5.7.\n    :                               :\n     ---\
    \ --- --- --- --- --- --- ---\n    :                               :\n    +  \
    \ IP-ID of inner IPv4 header  +  See RFC 3095 [2], section 5.7.\n    :       \
    \                        :\n     --- --- --- --- --- --- --- ---\n    /    AH\
    \ data for inner list     /  See RFC 3095 [2], section 5.7.\n     --- --- ---\
    \ --- --- --- --- ---\n    :                               :\n    +         GRE\
    \ checksum          +  See RFC 3095 [2], section 5.7.\n    :                 \
    \              :\n     --- --- --- --- --- --- --- ---\n    :            List\
    \ of            :  Variable, given by static chain\n    /        dynamic chains\
    \         /  (includes no SN).\n    :   for additional IP headers   :  See [3],\
    \ section 3.2.\n     --- --- --- --- --- --- --- ---\n    :                  \
    \             :\n    +  UDP-Lite Checksum Coverage   +  2 octets\n    :      \
    \                         :\n    +---+---+---+---+---+---+---+---+\n    :    \
    \                           :\n    +      UDP-Lite Checksum        +  2 octets\n\
    \    :                               :\n    +---+---+---+---+---+---+---+---+\n\
    \    F,K: F,K = 00 is reserved at framework level (IR-DYN);\n         F,K = 01\
    \ indicates CCE();\n         F,K = 10 indicates CCE(ON);\n         F,K = 11 indicates\
    \ CCE(OFF).\n   Note that this document does not define (F,K) = 00, as this would\n\
    \   collide with the IR-DYN packet type already reserved at the ROHC\n   framework\
    \ level.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Ghyslain Pelletier\n   Ericsson AB\n   Box 920\n   SE-971\
    \ 28 Lulea, Sweden\n   Phone: +46 840 429 43\n   Fax  : +46 920 996 21\n   EMail:\
    \ ghyslain.pelletier@ericsson.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2005).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
