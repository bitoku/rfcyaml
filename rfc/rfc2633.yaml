- title: __initial_text__
  contents:
  - '                 S/MIME Version 3 Message Specification

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   S/MIME (Secure/Multipurpose Internet Mail Extensions) provides\
    \ a\n   consistent way to send and receive secure MIME data. Based on the\n  \
    \ popular Internet MIME standard, S/MIME provides the following\n   cryptographic\
    \ security services for electronic messaging\n   applications:  authentication,\
    \ message integrity and non-repudiation\n   of origin (using digital signatures)\
    \ and privacy and data security\n   (using encryption).\n   S/MIME can be used\
    \ by traditional mail user agents (MUAs) to add\n   cryptographic security services\
    \ to mail that is sent, and to\n   interpret cryptographic security services in\
    \ mail that is received.\n   However, S/MIME is not restricted to mail; it can\
    \ be used with any\n   transport mechanism that transports MIME data, such as\
    \ HTTP. As such,\n   S/MIME takes advantage of the object-based features of MIME\
    \ and\n   allows secure messages to be exchanged in mixed-transport systems.\n\
    \   Further, S/MIME can be used in automated message transfer agents that\n  \
    \ use cryptographic security services that do not require any human\n   intervention,\
    \ such as the signing of software-generated documents and\n   the encryption of\
    \ FAX messages sent over the Internet.\n"
- title: 1.1 Specification Overview
  contents:
  - "1.1 Specification Overview\n   This document describes a protocol for adding\
    \ cryptographic signature\n   and encryption services to MIME data. The MIME standard\
    \ [MIME-SPEC]\n   provides a general structure for the content type of Internet\n\
    \   messages and allows extensions for new content type applications.\n   This\
    \ memo defines how to create a MIME body part that has been\n   cryptographically\
    \ enhanced according to CMS [CMS], which is derived\n   from PKCS #7 [PKCS-7].\
    \ This memo also defines the application/pkcs7-\n   mime MIME type that can be\
    \ used to transport those body parts.\n   This memo also discusses how to use\
    \ the multipart/signed MIME type\n   defined in [MIME-SECURE] to transport S/MIME\
    \ signed messages. This\n   memo also defines the application/pkcs7-signature\
    \ MIME type, which is\n   also used to transport S/MIME signed messages.\n   In\
    \ order to create S/MIME messages, an S/MIME agent has to follow\n   specifications\
    \ in this memo, as well as the specifications listed in\n   the Cryptographic\
    \ Message Syntax [CMS].\n   Throughout this memo, there are requirements and recommendations\
    \ made\n   for how receiving agents handle incoming messages. There are separate\n\
    \   requirements and recommendations for how sending agents create\n   outgoing\
    \ messages. In general, the best strategy is to \"be liberal in\n   what you receive\
    \ and conservative in what you send\". Most of the\n   requirements are placed\
    \ on the handling of incoming messages while\n   the recommendations are mostly\
    \ on the creation of outgoing messages.\n   The separation for requirements on\
    \ receiving agents and sending\n   agents also derives from the likelihood that\
    \ there will be S/MIME\n   systems that involve software other than traditional\
    \ Internet mail\n   clients.  S/MIME can be used with any system that transports\
    \ MIME\n   data. An automated process that sends an encrypted message might not\n\
    \   be able to receive an encrypted message at all, for example. Thus,\n   the\
    \ requirements and recommendations for the two types of agents are\n   listed\
    \ separately when appropriate.\n"
- title: 1.2 Terminology
  contents:
  - "1.2 Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [MUSTSHOULD].\n"
- title: 1.3 Definitions
  contents:
  - "1.3 Definitions\n   For the purposes of this memo, the following definitions\
    \ apply.\n   ASN.1: Abstract Syntax Notation One, as defined in CCITT X.208.\n\
    \   BER: Basic Encoding Rules for ASN.1, as defined in CCITT X.209.\n   Certificate:\
    \ A type that binds an entity's distinguished name to a\n   public key with a\
    \ digital signature.\n   DER: Distinguished Encoding Rules for ASN.1, as defined\
    \ in CCITT\n   X.509.\n   7-bit data: Text data with lines less than 998 characters\
    \ long, where\n   none of the characters have the 8th bit set, and there are no\
    \ NULL\n   characters. <CR> and <LF> occur only as part of a <CR><LF> end of\n\
    \   line delimiter.\n   8-bit data: Text data with lines less than 998 characters,\
    \ and where\n   none of the characters are NULL characters. <CR> and <LF> occur\
    \ only\n   as part of a <CR><LF> end of line delimiter.\n   Binary data: Arbitrary\
    \ data.\n   Transfer Encoding: A reversible transformation made on data so 8-bit\n\
    \   or binary data may be sent via a channel that only transmits 7-bit\n   data.\n\
    \   Receiving agent: software that interprets and processes S/MIME CMS\n   objects,\
    \ MIME body parts that contain CMS objects, or both.\n   Sending agent: software\
    \ that creates S/MIME CMS objects, MIME body\n   parts that contain CMS objects,\
    \ or both.\n   S/MIME agent: user software that is a receiving agent, a sending\n\
    \   agent, or both.\n"
- title: 1.4 Compatibility with Prior Practice of S/MIME
  contents:
  - "1.4 Compatibility with Prior Practice of S/MIME\n   S/MIME version 3 agents should\
    \ attempt to have the greatest\n   interoperability possible with S/MIME version\
    \ 2 agents. S/MIME\n   version 2 is described in RFC 2311 through RFC 2315, inclusive.\
    \ RFC\n   2311 also has historical information about the development of S/MIME.\n"
- title: 2. CMS Options
  contents:
  - "2. CMS Options\n   CMS allows for a wide variety of options in content and algorithm\n\
    \   support. This section puts forth a number of support requirements and\n  \
    \ recommendations in order to achieve a base level of interoperability\n   among\
    \ all S/MIME implementations. [CMS] provides additional details\n   regarding\
    \ the use of the cryptographic algorithms.\n"
- title: 2.1 DigestAlgorithmIdentifier
  contents:
  - "2.1 DigestAlgorithmIdentifier\n   Sending and receiving agents MUST support SHA-1\
    \ [SHA1].  Receiving\n   agents SHOULD support MD5 [MD5] for the purpose of providing\
    \ backward\n   compatibility with MD5-digested S/MIME v2 SignedData objects.\n"
- title: 2.2 SignatureAlgorithmIdentifier
  contents:
  - "2.2 SignatureAlgorithmIdentifier\n   Sending and receiving agents MUST support\
    \ id-dsa defined in [DSS].\n   The algorithm parameters MUST be absent (not encoded\
    \ as NULL).\n   Receiving agents SHOULD support rsaEncryption, defined in [PKCS-1].\n\
    \   Sending agents SHOULD support rsaEncryption. Outgoing messages are\n   signed\
    \ with a user's private key. The size of the private key is\n   determined during\
    \ key generation.\n   Note that S/MIME v2 clients are only capable of verifying\
    \ digital\n   signatures using the rsaEncryption algorithm.\n"
- title: 2.3 KeyEncryptionAlgorithmIdentifier
  contents:
  - "2.3 KeyEncryptionAlgorithmIdentifier\n   Sending and receiving agents MUST support\
    \ Diffie-Hellman defined in\n   [DH].\n   Receiving agents SHOULD support rsaEncryption.\
    \ Incoming encrypted\n   messages contain symmetric keys which are to be decrypted\
    \ with a\n   user's private key. The size of the private key is determined during\n\
    \   key generation.\n   Sending agents SHOULD support rsaEncryption.\n   Note\
    \ that S/MIME v2 clients are only capable of decrypting content\n   encryption\
    \ keys using the rsaEncryption algorithm.\n"
- title: 2.4 General Syntax
  contents:
  - "2.4 General Syntax\n   CMS defines multiple content types.  Of these, only the\
    \ Data,\n   SignedData, and EnvelopedData content types are currently used for\n\
    \   S/MIME.\n"
- title: 2.4.1 Data Content Type
  contents:
  - "2.4.1 Data Content Type\n   Sending agents MUST use the id-data content type\
    \ identifier to\n   indicate the message content which has had security services\
    \ applied\n   to it. For example, when applying a digital signature to MIME data,\n\
    \   the CMS signedData encapContentInfo eContentType MUST include the\n   id-data\
    \ object identifier and the MIME content MUST be stored in the\n   SignedData\
    \ encapContentInfo eContent OCTET STRING (unless the sending\n   agent is using\
    \ multipart/signed, in which case the eContent is\n   absent, per section 3.4.3\
    \ of this document).  As another example,\n   when applying encryption to MIME\
    \ data, the CMS EnvelopedData\n   encryptedContentInfo ContentType MUST include\
    \ the id-data object\n   identifier and the encrypted MIME content MUST be stored\
    \ in the\n   envelopedData encryptedContentInfo encryptedContent OCTET STRING.\n"
- title: 2.4.2 SignedData Content Type
  contents:
  - "2.4.2 SignedData Content Type\n   Sending agents MUST use the signedData content\
    \ type to apply a\n   digital signature to a message or, in a degenerate case\
    \ where there\n   is no signature information, to convey certificates.\n"
- title: 2.4.3 EnvelopedData Content Type
  contents:
  - "2.4.3 EnvelopedData Content Type\n   This content type is used to apply privacy\
    \ protection to a message. A\n   sender needs to have access to a public key for\
    \ each intended message\n   recipient to use this service. This content type does\
    \ not provide\n   authentication.\n"
- title: 2.5 Attribute SignerInfo Type
  contents:
  - "2.5 Attribute SignerInfo Type\n   The SignerInfo type allows the inclusion of\
    \ unsigned and signed\n   attributes to be included along with a signature.\n\
    \   Receiving agents MUST be able to handle zero or one instance of each\n   of\
    \ the signed attributes listed here. Sending agents SHOULD generate\n   one instance\
    \ of each of the following signed attributes in each\n   S/MIME message:\n   -\
    \ signingTime (section 2.5.1 in this document)\n   - sMIMECapabilities (section\
    \ 2.5.2 in this document)\n   - sMIMEEncryptionKeyPreference (section 2.5.3 in\
    \ this document)\n   Further, receiving agents SHOULD be able to handle zero or\
    \ one\n   instance in the signed attributes of the signingCertificate attribute\n\
    \   (section 5 in [ESS]).\n   Sending agents SHOULD generate one instance of the\
    \ signingCertificate\n   signed attribute in each S/MIME message.\n   Additional\
    \ attributes and values for these attributes may be defined\n   in the future.\
    \ Receiving agents SHOULD handle attributes or values\n   that it does not recognize\
    \ in a graceful manner.\n   Sending agents that include signed attributes that\
    \ are not listed\n   here SHOULD display those attributes to the user, so that\
    \ the user is\n   aware of all of the data being signed.\n"
- title: 2.5.1 Signing-Time Attribute
  contents:
  - "2.5.1 Signing-Time Attribute\n   The signing-time attribute is used to convey\
    \ the time that a message\n   was signed. Until there are trusted timestamping\
    \ services, the time\n   of signing will most likely be created by a message originator\
    \ and\n   therefore is only as trustworthy as the originator.\n   Sending agents\
    \ MUST encode signing time through the year 2049 as\n   UTCTime; signing times\
    \ in 2050 or later MUST be encoded as\n   GeneralizedTime. When the UTCTime CHOICE\
    \ is used, S/MIME agents MUST\n   interpret the year field (YY) as follows:\n\
    \   if YY is greater than or equal to 50, the year is interpreted as\n   19YY;\
    \ if YY is less than 50, the year is interpreted as 20YY.\n"
- title: 2.5.2 SMIMECapabilities Attribute
  contents:
  - "2.5.2 SMIMECapabilities Attribute\n   The SMIMECapabilities attribute includes\
    \ signature algorithms (such\n   as \"sha1WithRSAEncryption\"), symmetric algorithms\
    \ (such as \"DES-\n   EDE3-CBC\"), and key encipherment algorithms (such as\n\
    \   \"rsaEncryption\"). It also includes a non-algorithm capability which\n  \
    \ is the preference for signedData. The SMIMECapabilities were designed\n   to\
    \ be flexible and extensible so that, in the future, a means of\n   identifying\
    \ other capabilities and preferences such as certificates\n   can be added in\
    \ a way that will not cause current clients to break.\n   If present, the SMIMECapabilities\
    \ attribute MUST be a\n   SignedAttribute; it MUST NOT be an UnsignedAttribute.\
    \ CMS defines\n   SignedAttributes as a SET OF Attribute. The SignedAttributes\
    \ in a\n   signerInfo MUST NOT include multiple instances of the\n   SMIMECapabilities\
    \ attribute. CMS defines the ASN.1 syntax for\n   Attribute to include attrValues\
    \ SET OF AttributeValue. A\n   SMIMECapabilities attribute MUST only include a\
    \ single instance of\n   AttributeValue.  There MUST NOT be zero or multiple instances\
    \ of\n   AttributeValue present in the attrValues SET OF AttributeValue.\n   The\
    \ semantics of the SMIMECapabilites attribute specify a partial\n   list as to\
    \ what the client announcing the SMIMECapabilites can\n   support. A client does\
    \ not have to list every capability it supports,\n   and probably should not list\
    \ all its capabilities so that the\n   capabilities list doesn't get too long.\
    \ In an SMIMECapabilities\n   attribute, the OIDs are listed in order of their\
    \ preference, but\n   SHOULD be logically separated along the lines of their categories\n\
    \   (signature algorithms, symmetric algorithms, key encipherment\n   algorithms,\
    \ etc.)\n   The structure of the SMIMECapabilities attribute is to facilitate\n\
    \   simple table lookups and binary comparisons in order to determine\n   matches.\
    \ For instance, the DER-encoding for the SMIMECapability for\n   DES EDE3 CBC\
    \ MUST be identically encoded regardless of the\n   implementation.\n   In the\
    \ case of symmetric algorithms, the associated parameters for\n   the OID MUST\
    \ specify all of the parameters necessary to differentiate\n   between two instances\
    \ of the same algorithm. For instance, the number\n   of rounds and block size\
    \ for RC5 must be specified in addition to the\n   key length.\n   There is a\
    \ list of OIDs (OIDs Used with S/MIME) that is centrally\n   maintained and is\
    \ separate from this memo. The list of OIDs is\n   maintained by the Internet\
    \ Mail Consortium at\n   <http://www.imc.org/ietf-smime/oids.html>. Note that\
    \ all OIDs\n   associated with the MUST and SHOULD implement algorithms are included\n\
    \   in section A of this document.\n   The OIDs that correspond to algorithms\
    \ SHOULD use the same OID as the\n   actual algorithm, except in the case where\
    \ the algorithm usage is\n   ambiguous from the OID. For instance, in an earlier\
    \ draft,\n   rsaEncryption was ambiguous because it could refer to either a\n\
    \   signature algorithm or a key encipherment algorithm. In the event\n   that\
    \ an OID is ambiguous, it needs to be arbitrated by the maintainer\n   of the\
    \ registered SMIMECapabilities list as to which type of\n   algorithm will use\
    \ the OID, and a new OID MUST be allocated under the\n   smimeCapabilities OID\
    \ to satisfy the other use of the OID.\n   The registered SMIMECapabilities list\
    \ specifies the parameters for\n   OIDs that need them, most notably key lengths\
    \ in the case of\n   variable-length symmetric ciphers. In the event that there\
    \ are no\n   differentiating parameters for a particular OID, the parameters MUST\n\
    \   be omitted, and MUST NOT be encoded as NULL.\n   Additional values for the\
    \ SMIMECapabilities attribute may be defined\n   in the future. Receiving agents\
    \ MUST handle a SMIMECapabilities\n   object that has values that it does not\
    \ recognize in a graceful\n   manner.\n"
- title: 2.5.3 Encryption Key Preference Attribute
  contents:
  - "2.5.3 Encryption Key Preference Attribute\n   The encryption key preference attribute\
    \ allows the signer to\n   unambiguously describe which of the signer's certificates\
    \ has the\n   signer's preferred encryption key. This attribute is designed to\n\
    \   enhance behavior for interoperating with those clients which use\n   separate\
    \ keys for encryption and signing. This attribute is used to\n   convey to anyone\
    \ viewing the attribute which of the listed\n   certificates should be used for\
    \ encrypting a session key for future\n   encrypted messages.\n   If present,\
    \ the SMIMEEncryptionKeyPreference attribute MUST be a\n   SignedAttribute; it\
    \ MUST NOT be an UnsignedAttribute. CMS defines\n   SignedAttributes as a SET\
    \ OF Attribute. The SignedAttributes in a\n   signerInfo MUST NOT include multiple\
    \ instances of the\n   SMIMEEncryptionKeyPreference attribute.  CMS defines the\
    \ ASN.1 syntax\n   for Attribute to include attrValues SET OF AttributeValue.\
    \ A\n   SMIMEEncryptionKeyPreference attribute MUST only include a single\n  \
    \ instance of AttributeValue.  There MUST NOT be zero or multiple\n   instances\
    \ of AttributeValue present in the attrValues SET OF\n   AttributeValue.\n   The\
    \ sending agent SHOULD include the referenced certificate in the\n   set of certificates\
    \ included in the signed message if this attribute\n   is used.  The certificate\
    \ may be omitted if it has been previously\n   made available to the receiving\
    \ agent.  Sending agents SHOULD use\n   this attribute if the commonly used or\
    \ preferred encryption\n   certificate is not the same as the certificate used\
    \ to sign the\n   message.\n   Receiving agents SHOULD store the preference data\
    \ if the signature on\n   the message is valid and the signing time is greater\
    \ than the\n   currently stored value.  (As with the SMIMECapabilities, the clock\n\
    \   skew should be checked and the data not used if the skew is too\n   great.)\
    \  Receiving agents SHOULD respect the sender's encryption key\n   preference\
    \ attribute if possible.  This however represents only a\n   preference and the\
    \ receiving agent may use any certificate in\n   replying to the sender that is\
    \ valid.\n"
- title: 2.5.3.1 Selection of Recipient Key Management Certificate
  contents:
  - "2.5.3.1 Selection of Recipient Key Management Certificate\n   In order to determine\
    \ the key management certificate to be used when\n   sending a future CMS envelopedData\
    \ message for a particular\n   recipient, the following steps SHOULD be followed:\n\
    \    - If an SMIMEEncryptionKeyPreference attribute is found in a\n   signedData\
    \ object received from the desired recipient, this\n   identifies the X.509 certificate\
    \ that should be used as the X.509\n   key management certificate for the recipient.\n\
    \   - If an SMIMEEncryptionKeyPreference attribute is not found in a\n   signedData\
    \ object received from the desired recipient, the set of\n   X.509 certificates\
    \ should be searched for a X.509 certificate with\n   the same subject name as\
    \ the signing X.509 certificate which can\n   be used for key management.\n  \
    \ - Or use some other method of determining the user's key management\n   key.\
    \ If a X.509 key management certificate is not found, then\n   encryption cannot\
    \ be done with the signer of the message. If multiple\n   X.509 key management\
    \ certificates are found, the S/MIME agent can\n   make an arbitrary choice between\
    \ them.\n"
- title: 2.6 SignerIdentifier SignerInfo Type
  contents:
  - "2.6 SignerIdentifier SignerInfo Type\n   S/MIME v3 requires the use of SignerInfo\
    \ version 1, that is the\n   issuerAndSerialNumber CHOICE MUST be used for SignerIdentifier.\n"
- title: 2.7 ContentEncryptionAlgorithmIdentifier
  contents:
  - "2.7 ContentEncryptionAlgorithmIdentifier\n   Sending and receiving agents MUST\
    \ support encryption and decryption\n   with DES EDE3 CBC, hereinafter called\
    \ \"tripleDES\" [3DES] [DES].\n   Receiving agents SHOULD support encryption and\
    \ decryption using the\n   RC2 [RC2] or a compatible algorithm at a key size of\
    \ 40 bits,\n   hereinafter called \"RC2/40\".\n"
- title: 2.7.1 Deciding Which Encryption Method To Use
  contents:
  - "2.7.1 Deciding Which Encryption Method To Use\n   When a sending agent creates\
    \ an encrypted message, it has to decide\n   which type of encryption to use.\
    \ The decision process involves using\n   information garnered from the capabilities\
    \ lists included in messages\n   received from the recipient, as well as out-of-band\
    \ information such\n   as private agreements, user preferences, legal restrictions,\
    \ and so\n   on.\n   Section 2.5 defines a method by which a sending agent can\
    \ optionally\n   announce, among other things, its decrypting capabilities in\
    \ its\n   order of preference. The following method for processing and\n   remembering\
    \ the encryption capabilities attribute in incoming signed\n   messages SHOULD\
    \ be used.\n   -  If the receiving agent has not yet created a list of capabilities\n\
    \      for the sender's public key, then, after verifying the signature\n    \
    \  on the incoming message and checking the timestamp, the receiving\n      agent\
    \ SHOULD create a new list containing at least the signing\n      time and the\
    \ symmetric capabilities.\n    - If such a list already exists, the receiving\
    \ agent SHOULD verify\n      that the signing time in the incoming message is\
    \ greater than\n      the signing time stored in the list and that the signature\
    \ is\n      valid. If so, the receiving agent SHOULD update both the signing\n\
    \      time and capabilities in the list. Values of the signing time that\n  \
    \    lie far in the future (that is, a greater discrepancy than any\n      reasonable\
    \ clock skew), or a capabilities list in messages whose\n      signature could\
    \ not be verified, MUST NOT be accepted.\n   The list of capabilities SHOULD be\
    \ stored for future use in creating\n   messages.\n   Before sending a message,\
    \ the sending agent MUST decide whether it is\n   willing to use weak encryption\
    \ for the particular data in the\n   message.  If the sending agent decides that\
    \ weak encryption is\n   unacceptable for this data, then the sending agent MUST\
    \ NOT use a\n   weak algorithm such as RC2/40.  The decision to use or not use\
    \ weak\n   encryption overrides any other decision in this section about which\n\
    \   encryption algorithm to use.\n   Sections 2.7.2.1 through 2.7.2.4 describe\
    \ the decisions a sending\n   agent SHOULD use in deciding which type of encryption\
    \ should be\n   applied to a message.  These rules are ordered, so the sending\
    \ agent\n   SHOULD make its decision in the order given.\n"
- title: '2.7.1.1 Rule 1: Known Capabilities'
  contents:
  - "2.7.1.1 Rule 1: Known Capabilities\n   If the sending agent has received a set\
    \ of capabilities from the\n   recipient for the message the agent is about to\
    \ encrypt, then the\n   sending agent SHOULD use that information by selecting\
    \ the first\n   capability in the list (that is, the capability most preferred\
    \ by the\n   intended recipient) for which the sending agent knows how to encrypt.\n\
    \   The sending agent SHOULD use one of the capabilities in the list if\n   the\
    \ agent reasonably expects the recipient to be able to decrypt the\n   message.\n"
- title: '2.7.1.2 Rule 2: Unknown Capabilities, Known Use of Encryption'
  contents:
  - "2.7.1.2 Rule 2: Unknown Capabilities, Known Use of Encryption\n   If:\n    -\
    \ the sending agent has no knowledge of the encryption capabilities\n      of\
    \ the recipient,\n    - and the sending agent has received at least one message\
    \ from the\n      recipient,\n    - and the last encrypted message received from\
    \ the recipient had a\n      trusted signature on it,\n   then the outgoing message\
    \ SHOULD use the same encryption algorithm as\n   was used on the last signed\
    \ and encrypted message received from the\n   recipient.\n"
- title: '2.7.1.3 Rule 3: Unknown Capabilities, Unknown Version of S/MIME'
  contents:
  - "2.7.1.3 Rule 3: Unknown Capabilities, Unknown Version of S/MIME\n   If:\n   \
    \ - the sending agent has no knowledge of the encryption capabilities\n      of\
    \ the recipient,\n    - and the sending agent has no knowledge of the version\
    \ of S/MIME\n      of the recipient,\n   then the sending agent SHOULD use tripleDES\
    \ because it is a stronger\n   algorithm and is required by S/MIME v3. If the\
    \ sending agent chooses\n   not to use tripleDES in this step, it SHOULD use RC2/40.\n"
- title: 2.7.2 Choosing Weak Encryption
  contents:
  - "2.7.2 Choosing Weak Encryption\n   Like all algorithms that use 40 bit keys,\
    \ RC2/40 is considered by\n   many to be weak encryption. A sending agent that\
    \ is controlled by a\n   human SHOULD allow a human sender to determine the risks\
    \ of sending\n   data using RC2/40 or a similarly weak encryption algorithm before\n\
    \   sending the data, and possibly allow the human to use a stronger\n   encryption\
    \ method such as tripleDES.\n"
- title: 2.7.3 Multiple Recipients
  contents:
  - "2.7.3 Multiple Recipients\n   If a sending agent is composing an encrypted message\
    \ to a group of\n   recipients where the encryption capabilities of some of the\n\
    \   recipients do not overlap, the sending agent is forced to send more\n   than\
    \ one message. It should be noted that if the sending agent\n   chooses to send\
    \ a message encrypted with a strong algorithm, and then\n   send the same message\
    \ encrypted with a weak algorithm, someone\n   watching the communications channel\
    \ may be able to learn the contents\n   of the strongly-encrypted message simply\
    \ by decrypting the weakly-\n   encrypted message.\n"
- title: 3. Creating S/MIME Messages
  contents:
  - "3. Creating S/MIME Messages\n   This section describes the S/MIME message formats\
    \ and how they are\n   created. S/MIME messages are a combination of MIME bodies\
    \ and CMS\n   objects. Several MIME types as well as several CMS objects are used.\n\
    \   The data to be secured is always a canonical MIME entity. The MIME\n   entity\
    \ and other data, such as certificates and algorithm\n   identifiers, are given\
    \ to CMS processing facilities which produces a\n   CMS object.  The CMS object\
    \ is then finally wrapped in MIME. The\n   Enhanced Security Services for S/MIME\
    \ [ESS] document provides\n   examples of how nested, secured S/MIME messages\
    \ are formatted.  ESS\n   provides an example of how a triple-wrapped S/MIME message\
    \ is\n   formatted using multipart/signed and application/pkcs7-mime for the\n\
    \   signatures.\n   S/MIME provides one format for enveloped-only data, several\
    \ formats\n   for signed-only data, and several formats for signed and enveloped\n\
    \   data. Several formats are required to accommodate several\n   environments,\
    \ in particular for signed messages. The criteria for\n   choosing among these\
    \ formats are also described.\n   The reader of this section is expected to understand\
    \ MIME as\n   described in [MIME-SPEC] and [MIME-SECURE].\n"
- title: 3.1 Preparing the MIME Entity for Signing or Enveloping
  contents:
  - "3.1 Preparing the MIME Entity for Signing or Enveloping\n   S/MIME is used to\
    \ secure MIME entities. A MIME entity may be a sub-\n   part, sub-parts of a message,\
    \ or the whole message with all its sub-\n   parts. A MIME entity that is the\
    \ whole message includes only the MIME\n   headers and MIME body, and does not\
    \ include the RFC-822 headers.\n   Note that S/MIME can also be used to secure\
    \ MIME entities used in\n   applications other than Internet mail.\n   The MIME\
    \ entity that is secured and described in this section can be\n   thought of as\
    \ the \"inside\" MIME entity. That is, it is the\n   \"innermost\" object in what\
    \ is possibly a larger MIME message.\n   Processing \"outside\" MIME entities\
    \ into CMS objects is described in\n   Section 3.2, 3.4 and elsewhere.\n   The\
    \ procedure for preparing a MIME entity is given in [MIME-SPEC].\n   The same\
    \ procedure is used here with some additional restrictions\n   when signing. Description\
    \ of the procedures from [MIME-SPEC] are\n   repeated here, but the reader should\
    \ refer to that document for the\n   exact procedure. This section also describes\
    \ additional requirements.\n   A single procedure is used for creating MIME entities\
    \ that are to be\n   signed, enveloped, or both signed and enveloped. Some additional\n\
    \   steps are recommended to defend against known corruptions that can\n   occur\
    \ during mail transport that are of particular importance for\n   clear- signing\
    \ using the multipart/signed format. It is recommended\n   that these additional\
    \ steps be performed on enveloped messages, or\n   signed and enveloped messages\
    \ in order that the message can be\n   forwarded to any environment without modification.\n\
    \   These steps are descriptive rather than prescriptive. The implementor\n  \
    \ is free to use any procedure as long as the result is the same.\n   Step 1.\
    \ The MIME entity is prepared according to the local\n   conventions\n   Step\
    \ 2. The leaf parts of the MIME entity are converted to canonical\n   form\n \
    \  Step 3. Appropriate transfer encoding is applied to the leaves of the\n   MIME\
    \ entity\n   When an S/MIME message is received, the security services on the\n\
    \   message are processed, and the result is the MIME entity. That MIME\n   entity\
    \ is typically passed to a MIME-capable user agent where, it is\n   further decoded\
    \ and presented to the user or receiving application.\n"
- title: 3.1.1 Canonicalization
  contents:
  - "3.1.1 Canonicalization\n   Each MIME entity MUST be converted to a canonical\
    \ form that is\n   uniquely and unambiguously representable in the environment\
    \ where the\n   signature is created and the environment where the signature will\
    \ be\n   verified.  MIME entities MUST be canonicalized for enveloping as well\n\
    \   as signing.\n   The exact details of canonicalization depend on the actual\
    \ MIME type\n   and subtype of an entity, and are not described here. Instead,\
    \ the\n   standard for the particular MIME type should be consulted. For\n   example,\
    \ canonicalization of type text/plain is different from\n   canonicalization of\
    \ audio/basic. Other than text types, most types\n   have only one representation\
    \ regardless of computing platform or\n   environment which can be considered\
    \ their canonical representation.\n   In general, canonicalization will be performed\
    \ by the non-security\n   part of the sending agent rather than the S/MIME implementation.\n\
    \   The most common and important canonicalization is for text, which is\n   often\
    \ represented differently in different environments. MIME\n   entities of major\
    \ type \"text\" must have both their line endings and\n   character set canonicalized.\
    \ The line ending must be the pair of\n   characters <CR><LF>, and the charset\
    \ should be a registered charset\n   [CHARSETS].  The details of the canonicalization\
    \ are specified in\n   [MIME-SPEC]. The chosen charset SHOULD be named in the\
    \ charset\n   parameter so that the receiving agent can unambiguously determine\
    \ the\n   charset used.\n   Note that some charsets such as ISO-2022 have multiple\n\
    \   representations for the same characters. When preparing such text for\n  \
    \ signing, the canonical representation specified for the charset MUST\n   be\
    \ used.\n"
- title: 3.1.2 Transfer Encoding
  contents:
  - "3.1.2 Transfer Encoding\n   When generating any of the secured MIME entities\
    \ below, except the\n   signing using the multipart/signed format, no transfer\
    \ encoding at\n   all is required.  S/MIME implementations MUST be able to deal\
    \ with\n   binary MIME objects. If no Content-Transfer-Encoding header is\n  \
    \ present, the transfer encoding should be considered 7BIT.\n   S/MIME implementations\
    \ SHOULD however use transfer encoding described\n   in section 3.1.3 for all\
    \ MIME entities they secure. The reason for\n   securing only 7-bit MIME entities,\
    \ even for enveloped data that are\n   not exposed to the transport, is that it\
    \ allows the MIME entity to be\n   handled in any environment without changing\
    \ it. For example, a\n   trusted gateway might remove the envelope, but not the\
    \ signature, of\n   a message, and then forward the signed message on to the end\n\
    \   recipient so that they can verify the signatures directly. If the\n   transport\
    \ internal to the site is not 8-bit clean, such as on a\n   wide-area network\
    \ with a single mail gateway, verifying the signature\n   will not be possible\
    \ unless the original MIME entity was only 7-bit\n   data.\n"
- title: 3.1.3 Transfer Encoding for Signing Using multipart/signed
  contents:
  - "3.1.3 Transfer Encoding for Signing Using multipart/signed\n   If a multipart/signed\
    \ entity is EVER to be transmitted over the\n   standard Internet SMTP infrastructure\
    \ or other transport that is\n   constrained to 7-bit text, it MUST have transfer\
    \ encoding applied so\n   that it is represented as 7-bit text. MIME entities\
    \ that are 7-bit\n   data already need no transfer encoding. Entities such as\
    \ 8-bit text\n   and binary data can be encoded with quoted-printable or base-64\n\
    \   transfer encoding.\n   The primary reason for the 7-bit requirement is that\
    \ the Internet\n   mail transport infrastructure cannot guarantee transport of\
    \ 8-bit or\n   binary data. Even though many segments of the transport\n   infrastructure\
    \ now handle 8-bit and even binary data, it is sometimes\n   not possible to know\
    \ whether the transport path is 8-bit clear. If a\n   mail message with 8-bit\
    \ data were to encounter a message transfer\n   agent that can not transmit 8-bit\
    \ or binary data, the agent has three\n   options, none of which are acceptable\
    \ for a clear-signed message:\n   - The agent could change the transfer encoding;\
    \ this would invalidate\n     the signature.\n   - The agent could transmit the\
    \ data anyway, which would most likely\n     result in the 8th bit being corrupted;\
    \ this too would invalidate the\n     signature.\n   - The agent could return\
    \ the message to the sender.\n   [MIME-SECURE] prohibits an agent from changing\
    \ the transfer encoding\n   of the first part of a multipart/signed message. If\
    \ a compliant agent\n   that can not transmit 8-bit or binary data encounters\
    \ a\n   multipart/signed message with 8-bit or binary data in the first part,\n\
    \   it would have to return the message to the sender as undeliverable.\n"
- title: 3.1.4 Sample Canonical MIME Entity
  contents:
  - "3.1.4 Sample Canonical MIME Entity\n   This example shows a multipart/mixed message\
    \ with full transfer\n   encoding. This message contains a text part and an attachment.\
    \ The\n   sample message text includes characters that are not US-ASCII and\n\
    \   thus must be transfer encoded. Though not shown here, the end of each\n  \
    \ line is <CR><LF>. The line ending of the MIME headers, the text, and\n   transfer\
    \ encoded parts, all must be <CR><LF>.\n   Note that this example is not of an\
    \ S/MIME message.\n     Content-Type: multipart/mixed; boundary=bar\n     --bar\n\
    \     Content-Type: text/plain; charset=iso-8859-1\n     Content-Transfer-Encoding:\
    \ quoted-printable\n     =A1Hola Michael!\n     How do you like the new S/MIME\
    \ specification?\n     I agree. It's generally a good idea to encode lines that\
    \ begin with\n     From=20 because some mail transport agents will insert a\n\
    \     greater-than (>) sign, thus invalidating the signature.\n     Also, in some\
    \ cases it might be desirable to encode any  =20\n     trailing whitespace that\
    \ occurs on lines in order to ensure  =20\n     that the message signature is\
    \ not invalidated when passing  =20\n     a gateway that modifies such whitespace\
    \ (like BITNET).  =20\n     --bar\n     Content-Type: image/jpeg\n     Content-Transfer-Encoding:\
    \ base64\n     iQCVAwUBMJrRF2N9oWBghPDJAQE9UQQAtl7LuRVndBjrk4EqYBIb3h5QXIX/LC//\n\
    \     jJV5bNvkZIGPIcEmI5iFd9boEgvpirHtIREEqLQRkYNoBActFBZmh9GC3C041WGq\n     uMbrbxc+nIs1TIKlA08rVi9ig/2Yh7LFrK5Ein57U/W72vgSxLhe/zhdfolT9Brn\n\
    \     HOxEa44b+EI=\n     --bar--\n"
- title: 3.2 The application/pkcs7-mime Type
  contents:
  - "3.2 The application/pkcs7-mime Type\n   The application/pkcs7-mime type is used\
    \ to carry CMS objects of\n   several types including envelopedData and signedData.\
    \ The details of\n   constructing these entities is described in subsequent sections.\
    \ This\n   section describes the general characteristics of the\n   application/pkcs7-mime\
    \ type.\n   The carried CMS object always contains a MIME entity that is prepared\n\
    \   as described in section 3.1 if the eContentType is id-data. Other\n   contents\
    \ may be carried when the eContentType contains different\n   values. See [ESS]\
    \ for an example of this with signed receipts.\n   Since CMS objects are binary\
    \ data, in most cases base-64 transfer\n   encoding is appropriate, in particular\
    \ when used with SMTP transport.\n   The transfer encoding used depends on the\
    \ transport through which the\n   object is to be sent, and is not a characteristic\
    \ of the MIME type.\n   Note that this discussion refers to the transfer encoding\
    \ of the CMS\n   object or \"outside\" MIME entity. It is completely distinct\
    \ from, and\n   unrelated to, the transfer encoding of the MIME entity secured\
    \ by the\n   CMS object, the \"inside\" object, which is described in section\
    \ 3.1.\n   Because there are several types of application/pkcs7-mime objects,\
    \ a\n   sending agent SHOULD do as much as possible to help a receiving agent\n\
    \   know about the contents of the object without forcing the receiving\n   agent\
    \ to decode the ASN.1 for the object. The MIME headers of all\n   application/pkcs7-mime\
    \ objects SHOULD include the optional \"smime-\n   type\" parameter, as described\
    \ in the following sections.\n"
- title: 3.2.1 The name and filename Parameters
  contents:
  - "3.2.1 The name and filename Parameters\n   For the application/pkcs7-mime, sending\
    \ agents SHOULD emit the\n   optional \"name\" parameter to the Content-Type field\
    \ for compatibility\n   with older systems. Sending agents SHOULD also emit the\
    \ optional\n   Content-Disposition field [CONTDISP] with the \"filename\" parameter.\n\
    \   If a sending agent emits the above parameters, the value of the\n   parameters\
    \ SHOULD be a file name with the appropriate extension:\n   MIME Type        \
    \                        File Extension\n   Application/pkcs7-mime (signedData,\
    \      .p7m\n   envelopedData)\n   Application/pkcs7-mime (degenerate       .p7c\n\
    \   signedData \"certs-only\" message)\n   Application/pkcs7-signature       \
    \       .p7s\n   In addition, the file name SHOULD be limited to eight characters\n\
    \   followed by a three letter extension. The eight character filename\n   base\
    \ can be any distinct name; the use of the filename base \"smime\"\n   SHOULD\
    \ be used to indicate that the MIME entity is associated with\n   S/MIME.\n  \
    \ Including a file name serves two purposes. It facilitates easier use\n   of\
    \ S/MIME objects as files on disk. It also can convey type\n   information across\
    \ gateways. When a MIME entity of type\n   application/pkcs7-mime (for example)\
    \ arrives at a gateway that has no\n   special knowledge of S/MIME, it will default\
    \ the entity's MIME type\n   to application/octet-stream and treat it as a generic\
    \ attachment,\n   thus losing the type information. However, the suggested filename\
    \ for\n   an attachment is often carried across a gateway. This often allows\n\
    \   the receiving systems to determine the appropriate application to\n   hand\
    \ the attachment off to, in this case a stand-alone S/MIME\n   processing application.\
    \ Note that this mechanism is provided as a\n   convenience for implementations\
    \ in certain environments. A proper\n   S/MIME implementation MUST use the MIME\
    \ types and MUST NOT rely on\n   the file extensions.\n"
- title: 3.2.2 The smime-type parameter
  contents:
  - "3.2.2 The smime-type parameter\n   The application/pkcs7-mime content type defines\
    \ the optional \"smime-\n   type\" parameter. The intent of this parameter is\
    \ to convey details\n   about the security applied (signed or enveloped) along\
    \ with\n   infomation about the contained content. This memo defines the\n   following\
    \ smime-types.\n   Name                   Security                Inner Content\n\
    \   enveloped-data         EnvelopedData           id-data\n   signed-data   \
    \         SignedData              id-data\n   certs-only             SignedData\
    \              none\n   In order that consistency can be obtained with future,\
    \ the following\n   guidelines should be followed when assigning a new smime-type\n\
    \   parameter.\n   1. If both signing and encryption can be applied to the content,\
    \ then\n   two values for smime-type SHOULD be assigned \"signed-*\" and\n   \"\
    encrypted-*\".  If one operation can be assigned then this may be\n   omitted.\
    \ Thus since \"certs-only\" can only be signed, \"signed-\" is\n   omitted.\n\
    \   2. A common string for a content oid should be assigned. We use\n   \"data\"\
    \ for the id-data content OID when MIME is the inner content.\n   3. If no common\
    \ string is assigned.  Then the common string of\n   \"OID.<oid>\" is recommended\
    \ (for example, \"OID.1.3.6.1.5.5.7.6.1\"\n   would be DES40).\n"
- title: 3.3 Creating an Enveloped-only Message
  contents:
  - "3.3 Creating an Enveloped-only Message\n   This section describes the format\
    \ for enveloping a MIME entity\n   without signing it. It is important to note\
    \ that sending enveloped\n   but not signed messages does not provide for data\
    \ integrity. It is\n   possible to replace ciphertext in such a way that the processed\n\
    \   message will still be valid, but the meaning may be altered.\n   Step 1. The\
    \ MIME entity to be enveloped is prepared according to\n   section 3.1.\n   Step\
    \ 2. The MIME entity and other required data is processed into a\n   CMS object\
    \ of type envelopedData. In addition to encrypting a copy of\n   the content-encryption\
    \ key for each recipient, a copy of the content\n   encryption key SHOULD be encrypted\
    \ for the originator and included in\n   the envelopedData (see CMS Section 6).\n\
    \   Step 3. The CMS object is inserted into an application/pkcs7-mime\n   MIME\
    \ entity.\n   The smime-type parameter for enveloped-only messages is \"enveloped-\n\
    \   data\". The file extension for this type of message is \".p7m\".\n   A sample\
    \ message would be:\n       Content-Type: application/pkcs7-mime; smime-type=enveloped-data;\n\
    \            name=smime.p7m\n       Content-Transfer-Encoding: base64\n      \
    \ Content-Disposition: attachment; filename=smime.p7m\n       rfvbnj756tbBghyHhHUujhJhjH77n8HHGT9HG4VQpfyF467GhIGfHfYT6\n\
    \       7n8HHGghyHhHUujhJh4VQpfyF467GhIGfHfYGTrfvbnjT6jH7756tbB9H\n       f8HHGTrfvhJhjH776tbB9HG4VQbnj7567GhIGfHfYT6ghyHhHUujpfyF4\n\
    \       0GhIGfHfQbnj756YT64V\n"
- title: 3.4 Creating a Signed-only Message
  contents:
  - "3.4 Creating a Signed-only Message\n   There are two formats for signed messages\
    \ defined for S/MIME:\n   application/pkcs7-mime with SignedData, and multipart/signed.\
    \ In\n   general, the multipart/signed form is preferred for sending, and\n  \
    \ receiving agents SHOULD be able to handle both.\n"
- title: 3.4.1 Choosing a Format for Signed-only Messages
  contents:
  - "3.4.1 Choosing a Format for Signed-only Messages\n   There are no hard-and-fast\
    \ rules when a particular signed-only format\n   should be chosen because it depends\
    \ on the capabilities of all the\n   receivers and the relative importance of\
    \ receivers with S/MIME\n   facilities being able to verify the signature versus\
    \ the importance\n   of receivers without S/MIME software being able to view the\
    \ message.\n   Messages signed using the multipart/signed format can always be\n\
    \   viewed by the receiver whether they have S/MIME software or not. They\n  \
    \ can also be viewed whether they are using a MIME-native user agent or\n   they\
    \ have messages translated by a gateway. In this context, \"be\n   viewed\" means\
    \ the ability to process the message essentially as if it\n   were not a signed\
    \ message, including any other MIME structure the\n   message might have.\n  \
    \ Messages signed using the signedData format cannot be viewed by a\n   recipient\
    \ unless they have S/MIME facilities. However, if they have\n   S/MIME facilities,\
    \ these messages can always be verified if they were\n   not changed in transit.\n"
- title: 3.4.2 Signing Using application/pkcs7-mime with SignedData
  contents:
  - "3.4.2 Signing Using application/pkcs7-mime with SignedData\n   This signing format\
    \ uses the application/pkcs7-mime MIME type. The\n   steps to create this format\
    \ are:\n   Step 1. The MIME entity is prepared according to section 3.1\n   Step\
    \ 2. The MIME entity and other required data is processed into a\n   CMS object\
    \ of type signedData\n   Step 3. The CMS object is inserted into an application/pkcs7-mime\n\
    \   MIME entity\n   The smime-type parameter for messages using application/pkcs7-mime\n\
    \   with SignedData is \"signed-data\". The file extension for this type of\n\
    \   message is \".p7m\".\n   A sample message would be:\n       Content-Type:\
    \ application/pkcs7-mime; smime-type=signed-data;\n            name=smime.p7m\n\
    \       Content-Transfer-Encoding: base64\n       Content-Disposition: attachment;\
    \ filename=smime.p7m\n       567GhIGfHfYT6ghyHhHUujpfyF4f8HHGTrfvhJhjH776tbB9HG4VQbnj7\n\
    \       77n8HHGT9HG4VQpfyF467GhIGfHfYT6rfvbnj756tbBghyHhHUujhJhjH\n       HUujhJh4VQpfyF467GhIGfHfYGTrfvbnjT6jH7756tbB9H7n8HHGghyHh\n\
    \       6YT64V0GhIGfHfQbnj75\n"
- title: 3.4.3 Signing Using the multipart/signed Format
  contents:
  - "3.4.3 Signing Using the multipart/signed Format\n   This format is a clear-signing\
    \ format. Recipients without any S/MIME\n   or CMS processing facilities are able\
    \ to view the message. It makes\n   use of the multipart/signed MIME type described\
    \ in [MIME-SECURE]. The\n   multipart/signed MIME type has two parts. The first\
    \ part contains the\n   MIME entity that is signed; the second part contains the\
    \ \"detached\n   signature\" CMS SignedData object in which the encapContentInfo\n\
    \   eContent field is absent.\n"
- title: 3.4.3.1 The application/pkcs7-signature MIME Type
  contents:
  - "3.4.3.1 The application/pkcs7-signature MIME Type\n   This MIME type always contains\
    \ a single CMS object of type\n   signedData.  The signedData encapContentInfo\
    \ eContent field MUST be\n   absent. The signerInfos field contains the signatures\
    \ for the MIME\n   entity.\n   The file extension for signed-only messages using\
    \ application/pkcs7-\n   signature is \".p7s\".\n"
- title: 3.4.3.2 Creating a multipart/signed Message
  contents:
  - "3.4.3.2 Creating a multipart/signed Message\n   Step 1. The MIME entity to be\
    \ signed is prepared according to section\n   3.1, taking special care for clear-signing.\n\
    \   Step 2. The MIME entity is presented to CMS processing in order to\n   obtain\
    \ an object of type signedData in which the encapContentInfo\n   eContent field\
    \ is absent.\n   Step 3. The MIME entity is inserted into the first part of a\n\
    \   multipart/signed message with no processing other than that described\n  \
    \ in section 3.1.\n   Step 4. Transfer encoding is applied to the \"detached signature\"\
    \ CMS\n   SignedData object and it is inserted into a MIME entity of type\n  \
    \ application/pkcs7-signature.\n   Step 5. The MIME entity of the application/pkcs7-signature\
    \ is\n   inserted into the second part of the multipart/signed entity.\n   The\
    \ multipart/signed Content type has two required parameters: the\n   protocol\
    \ parameter and the micalg parameter.\n   The protocol parameter MUST be \"application/pkcs7-signature\"\
    . Note\n   that quotation marks are required around the protocol parameter\n \
    \  because MIME requires that the \"/\" character in the parameter value\n   MUST\
    \ be quoted.\n   The micalg parameter allows for one-pass processing when the\n\
    \   signature is being verified. The value of the micalg parameter is\n   dependent\
    \ on the message digest algorithm(s) used in the calculation\n   of the Message\
    \ Integrity Check. If multiple message digest algorithms\n   are used they MUST\
    \ be separated by commas per [MIME-SECURE]. The\n   values to be placed in the\
    \ micalg parameter SHOULD be from the\n   following:\n   Algorithm   Value\n \
    \  used\n   MD5         md5\n   SHA-1       sha1\n   Any other   unknown\n   (Historical\
    \ note: some early implementations of S/MIME emitted and\n   expected \"rsa-md5\"\
    \ and \"rsa-sha1\" for the micalg parameter.)\n   Receiving agents SHOULD be able\
    \ to recover gracefully from a micalg\n   parameter value that they do not recognize.\n"
- title: 3.4.3.3 Sample multipart/signed Message
  contents:
  - "3.4.3.3 Sample multipart/signed Message\n       Content-Type: multipart/signed;\n\
    \          protocol=\"application/pkcs7-signature\";\n          micalg=sha1; boundary=boundary42\n\
    \       --boundary42\n       Content-Type: text/plain\n       This is a clear-signed\
    \ message.\n       --boundary42\n       Content-Type: application/pkcs7-signature;\
    \ name=smime.p7s\n       Content-Transfer-Encoding: base64\n       Content-Disposition:\
    \ attachment; filename=smime.p7s\n       ghyHhHUujhJhjH77n8HHGTrfvbnj756tbB9HG4VQpfyF467GhIGfHfYT6\n\
    \       4VQpfyF467GhIGfHfYT6jH77n8HHGghyHhHUujhJh756tbB9HGTrfvbnj\n       n8HHGTrfvhJhjH776tbB9HG4VQbnj7567GhIGfHfYT6ghyHhHUujpfyF4\n\
    \       7GhIGfHfYT64VQbnj756\n       --boundary42--\n"
- title: 3.5 Signing and Encrypting
  contents:
  - "3.5 Signing and Encrypting\n   To achieve signing and enveloping, any of the\
    \ signed-only and\n   encrypted-only formats may be nested. This is allowed because\
    \ the\n   above formats are all MIME entities, and because they all secure MIME\n\
    \   entities.\n   An S/MIME implementation MUST be able to receive and process\n\
    \   arbitrarily nested S/MIME within reasonable resource limits of the\n   recipient\
    \ computer.\n   It is possible to either sign a message first, or to envelope\
    \ the\n   message first. It is up to the implementor and the user to choose.\n\
    \   When signing first, the signatories are then securely obscured by the\n  \
    \ enveloping. When enveloping first the signatories are exposed, but it\n   is\
    \ possible to verify signatures without removing the enveloping.\n   This may\
    \ be useful in an environment were automatic signature\n   verification is desired,\
    \ as no private key material is required to\n   verify a signature.\n   There\
    \ are security ramifications to choosing whether to sign first or\n   encrypt\
    \ first. A recipient of a message that is encrypted and then\n   signed can validate\
    \ that the encrypted block was unaltered, but\n   cannot determine any relationship\
    \ between the signer and the\n   unencrypted contents of the message. A recipient\
    \ of a message that is\n   signed-then-encrypted can assume that the signed message\
    \ itself has\n   not been altered, but that a careful attacker may have changed\
    \ the\n   unauthenticated portions of the encrypted message.\n"
- title: 3.6 Creating a Certificates-only Message
  contents:
  - "3.6 Creating a Certificates-only Message\n   The certificates only message or\
    \ MIME entity is used to transport\n   certificates, such as in response to a\
    \ registration request. This\n   format can also be used to convey CRLs.\n   Step\
    \ 1. The certificates are made available to the CMS generating\n   process which\
    \ creates a CMS object of type signedData. The signedData\n   encapContentInfo\
    \ eContent field MUST be absent and signerInfos field\n   MUST be empty.\n   Step\
    \ 2. The CMS signedData object is enclosed in an\n   application/pkcs7-mime MIME\
    \ entity\n   The smime-type parameter for a certs-only message is \"certs-only\"\
    .\n   The file extension for this type of message is \".p7c\".\n"
- title: 3.7 Registration Requests
  contents:
  - "3.7 Registration Requests\n   A sending agent that signs messages MUST have a\
    \ certificate for the\n   signature so that a receiving agent can verify the signature.\
    \ There\n   are many ways of getting certificates, such as through an exchange\n\
    \   with a certificate authority, through a hardware token or diskette,\n   and\
    \ so on.\n   S/MIME v2 [SMIMEV2] specified a method for \"registering\" public\
    \ keys\n   with certificate authorities using an application/pkcs10 body part.\n\
    \   The IETF's PKIX Working Group is preparing another method for\n   requesting\
    \ certificates; however, that work was not finished at the\n   time of this memo.\
    \ S/MIME v3 does not specify how to request a\n   certificate, but instead mandates\
    \ that every sending agent already\n   has a certificate. Standardization of certificate\
    \ management is being\n   pursued separately in the IETF.\n"
- title: 3.8 Identifying an S/MIME Message
  contents:
  - "3.8 Identifying an S/MIME Message\n   Because S/MIME takes into account interoperation\
    \ in non-MIME\n   environments, several different mechanisms are employed to carry\
    \ the\n   type information, and it becomes a bit difficult to identify S/MIME\n\
    \   messages. The following table lists criteria for determining whether\n   or\
    \ not a message is an S/MIME message. A message is considered an\n   S/MIME message\
    \ if it matches any below.\n   The file suffix in the table below comes from the\
    \ \"name\" parameter in\n   the content-type header, or the \"filename\" parameter\
    \ on the content-\n   disposition header. These parameters that give the file\
    \ suffix are\n   not listed below as part of the parameter section.\n   MIME type:\
    \   application/pkcs7-mime\n   parameters:  any\n   file suffix: any\n   MIME\
    \ type:   multipart/signed\n   parameters:  protocol=\"application/pkcs7-signature\"\
    \n   file suffix: any\n   MIME type:   application/octet-stream\n   parameters:\
    \  any\n   file suffix: p7m, p7s, p7c\n"
- title: 4. Certificate Processing
  contents:
  - "4. Certificate Processing\n   A receiving agent MUST provide some certificate\
    \ retrieval mechanism\n   in order to gain access to certificates for recipients\
    \ of digital\n   envelopes. This memo does not cover how S/MIME agents handle\n\
    \   certificates, only what they do after a certificate has been\n   validated\
    \ or rejected. S/MIME certification issues are covered in\n   [CERT3].\n   At\
    \ a minimum, for initial S/MIME deployment, a user agent could\n   automatically\
    \ generate a message to an intended recipient requesting\n   that recipient's\
    \ certificate in a signed return message. Receiving\n   and sending agents SHOULD\
    \ also provide a mechanism to allow a user to\n   \"store and protect\" certificates\
    \ for correspondents in such a way so\n   as to guarantee their later retrieval.\n"
- title: 4.1 Key Pair Generation
  contents:
  - "4.1 Key Pair Generation\n   If an S/MIME agent needs to generate a key pair,\
    \ then the S/MIME\n   agent or some related administrative utility or function\
    \ MUST be\n   capable of generating separate DH and DSS public/private key pairs\
    \ on\n   behalf of the user. Each key pair MUST be generated from a good\n   source\
    \ of non-deterministic random input [RANDOM] and the private key\n   MUST be protected\
    \ in a secure fashion.\n   If an S/MIME agent needs to generate a key pair, then\
    \ the S/MIME\n   agent or some related administrative utility or function SHOULD\n\
    \   generate RSA key pairs.\n   A user agent SHOULD generate RSA key pairs at\
    \ a minimum key size of\n   768 bits. A user agent MUST NOT generate RSA key pairs\
    \ less than 512\n   bits long. Creating keys longer than 1024 bits may cause some\
    \ older\n   S/MIME receiving agents to not be able to verify signatures, but\n\
    \   gives better security and is therefore valuable. A receiving agent\n   SHOULD\
    \ be able to verify signatures with keys of any size over 512\n   bits. Some agents\
    \ created in the United States have chosen to create\n   512 bit keys in order\
    \ to get more advantageous export licenses.\n   However, 512 bit keys are considered\
    \ by many to be cryptographically\n   insecure.  Implementors should be aware\
    \ that multiple (active) key\n   pairs may be associated with a single individual.\
    \ For example, one\n   key pair may be used to support confidentiality, while\
    \ a different\n   key pair may be used for authentication.\n"
- title: 5. Security
  contents:
  - "5. Security\n   This entire memo discusses security. Security issues not covered\
    \ in\n   other parts of the memo include:\n   40-bit encryption is considered\
    \ weak by most cryptographers. Using\n   weak cryptography in S/MIME offers little\
    \ actual security over\n   sending plaintext. However, other features of S/MIME,\
    \ such as the\n   specification of tripleDES and the ability to announce stronger\n\
    \   cryptographic capabilities to parties with whom you communicate,\n   allow\
    \ senders to create messages that use strong encryption. Using\n   weak cryptography\
    \ is never recommended unless the only alternative is\n   no cryptography. When\
    \ feasible, sending and receiving agents should\n   inform senders and recipients\
    \ the relative cryptographic strength of\n   messages.\n   It is impossible for\
    \ most software or people to estimate the value of\n   a message. Further, it\
    \ is impossible for most software or people to\n   estimate the actual cost of\
    \ decrypting a message that is encrypted\n   with a key of a particular size.\
    \ Further, it is quite difficult to\n   determine the cost of a failed decryption\
    \ if a recipient cannot\n   decode a message. Thus, choosing between different\
    \ key sizes (or\n   choosing whether to just use plaintext) is also impossible.\
    \ However,\n   decisions based on these criteria are made all the time, and\n\
    \   therefore this memo gives a framework for using those estimates in\n   choosing\
    \ algorithms.\n   If a sending agent is sending the same message using different\n\
    \   strengths of cryptography, an attacker watching the communications\n   channel\
    \ may be able to determine the contents of the strongly-\n   encrypted message\
    \ by decrypting the weakly-encrypted version.  In\n   other words, a sender should\
    \ not send a copy of a message using\n   weaker cryptography than they would use\
    \ for the original of the\n   message.\n   Modification of the ciphertext can\
    \ go undetected if authentication is\n   not also used, which is the case when\
    \ sending EnvelopedData without\n   wrapping it in SignedData or enclosing SignedData\
    \ within it.\n"
- title: A. ASN.1 Module
  contents:
  - 'A. ASN.1 Module

    '
- title: SecureMimeMessageV3
  contents:
  - "SecureMimeMessageV3\n  { iso(1) member-body(2) us(840) rsadsi(113549)\n     \
    \    pkcs(1) pkcs-9(9) smime(16) modules(0) smime(4) }\n"
- title: DEFINITIONS IMPLICIT TAGS ::=
  contents:
  - 'DEFINITIONS IMPLICIT TAGS ::=

    '
- title: BEGIN
  contents:
  - 'BEGIN

    '
- title: IMPORTS
  contents:
  - 'IMPORTS

    '
- title: -- Cryptographic Message Syntax
  contents:
  - "-- Cryptographic Message Syntax\n    SubjectKeyIdentifier, IssuerAndSerialNumber,\n"
- title: RecipientKeyIdentifier
  contents:
  - "RecipientKeyIdentifier\n        FROM    CryptographicMessageSyntax\n        \
    \       { iso(1) member-body(2) us(840) rsadsi(113549)\n                 pkcs(1)\
    \ pkcs-9(9) smime(16) modules(0) cms(1) };\n"
- title: --  id-aa is the arc with all new authenticated and unauthenticated
  contents:
  - '--  id-aa is the arc with all new authenticated and unauthenticated

    '
- title: --  attributes produced the by S/MIME Working Group
  contents:
  - '--  attributes produced the by S/MIME Working Group

    '
- title: id-aa OBJECT IDENTIFIER ::= {iso(1) member-body(2) usa(840)
  contents:
  - 'id-aa OBJECT IDENTIFIER ::= {iso(1) member-body(2) usa(840)

    '
- title: rsadsi(113549)
  contents:
  - "rsadsi(113549)\n        pkcs(1) pkcs-9(9) smime(16) attributes(2)}\n"
- title: -- S/MIME Capabilities provides a method of broadcasting the symetric
  contents:
  - '-- S/MIME Capabilities provides a method of broadcasting the symetric

    '
- title: -- capabilities understood.  Algorithms should be ordered by preference
  contents:
  - '-- capabilities understood.  Algorithms should be ordered by preference

    '
- title: -- and grouped by type
  contents:
  - '-- and grouped by type

    '
- title: smimeCapabilities OBJECT IDENTIFIER ::=
  contents:
  - "smimeCapabilities OBJECT IDENTIFIER ::=\n   {iso(1) member-body(2) us(840) rsadsi(113549)\
    \ pkcs(1) pkcs-9(9) 15}\n"
- title: SMIMECapability ::= SEQUENCE {
  contents:
  - "SMIMECapability ::= SEQUENCE {\n   capabilityID OBJECT IDENTIFIER,\n   parameters\
    \ ANY DEFINED BY capabilityID OPTIONAL }\n"
- title: SMIMECapabilities ::= SEQUENCE OF SMIMECapability
  contents:
  - 'SMIMECapabilities ::= SEQUENCE OF SMIMECapability

    '
- title: -- Encryption Key Preference provides a method of broadcasting the
  contents:
  - '-- Encryption Key Preference provides a method of broadcasting the

    '
- title: -- preferred encryption certificate.
  contents:
  - '-- preferred encryption certificate.

    '
- title: id-aa-encrypKeyPref OBJECT IDENTIFIER ::= {id-aa 11}
  contents:
  - 'id-aa-encrypKeyPref OBJECT IDENTIFIER ::= {id-aa 11}

    '
- title: SMIMEEncryptionKeyPreference ::= CHOICE {
  contents:
  - "SMIMEEncryptionKeyPreference ::= CHOICE {\n   issuerAndSerialNumber   [0] IssuerAndSerialNumber,\n\
    \   receipentKeyId          [1] RecipientKeyIdentifier,\n   subjectAltKeyIdentifier\
    \ [2] SubjectKeyIdentifier\n"
- title: '}'
  contents:
  - '}

    '
- title: '-- The Content Encryption Algorithms defined for SMIME are:'
  contents:
  - '-- The Content Encryption Algorithms defined for SMIME are:

    '
- title: -- Triple-DES is the manditory algorithm with CBCParameter being the
  contents:
  - '-- Triple-DES is the manditory algorithm with CBCParameter being the

    '
- title: -- parameters
  contents:
  - '-- parameters

    '
- title: dES-EDE3-CBC OBJECT IDENTIFIER ::=
  contents:
  - "dES-EDE3-CBC OBJECT IDENTIFIER ::=\n   {iso(1) member-body(2) us(840) rsadsi(113549)\n"
- title: encryptionAlgorithm(3) 7}
  contents:
  - 'encryptionAlgorithm(3) 7}

    '
- title: CBCParameter ::= IV
  contents:
  - 'CBCParameter ::= IV

    '
- title: IV ::= OCTET STRING (SIZE (8..8))
  contents:
  - 'IV ::= OCTET STRING (SIZE (8..8))

    '
- title: --  RC2 (or compatable) is an optional algorithm w/ RC2-CBC-paramter
  contents:
  - '--  RC2 (or compatable) is an optional algorithm w/ RC2-CBC-paramter

    '
- title: --  as the parameter
  contents:
  - '--  as the parameter

    '
- title: rC2-CBC OBJECT IDENTIFIER ::=
  contents:
  - "rC2-CBC OBJECT IDENTIFIER ::=\n   {iso(1) member-body(2) us(840) rsadsi(113549)\n"
- title: encryptionAlgorithm(3) 2}
  contents:
  - 'encryptionAlgorithm(3) 2}

    '
- title: -- For the effective-key-bits (key size) greater than 32 and less than
  contents:
  - '-- For the effective-key-bits (key size) greater than 32 and less than

    '
- title: '-- 256, the RC2-CBC algorithm parameters are encoded as:'
  contents:
  - '-- 256, the RC2-CBC algorithm parameters are encoded as:

    '
- title: RC2-CBC-parameter ::=  SEQUENCE {
  contents:
  - "RC2-CBC-parameter ::=  SEQUENCE {\n   rc2ParameterVersion  INTEGER,\n   iv  \
    \                 IV}\n"
- title: -- For the effective-key-bits of 40, 64, and 128, the
  contents:
  - '-- For the effective-key-bits of 40, 64, and 128, the

    '
- title: -- rc2ParameterVersion values are 160, 120, 58 respectively.
  contents:
  - '-- rc2ParameterVersion values are 160, 120, 58 respectively.

    '
- title: -- The following list the OIDs to be used with S/MIME V3
  contents:
  - '-- The following list the OIDs to be used with S/MIME V3

    '
- title: '-- Digest Algorithms:'
  contents:
  - '-- Digest Algorithms:

    '
- title: -- md5 OBJECT IDENTIFIER ::=
  contents:
  - '-- md5 OBJECT IDENTIFIER ::=

    '
- title: --    {iso(1) member-body(2) us(840) rsadsi(113549)
  contents:
  - '--    {iso(1) member-body(2) us(840) rsadsi(113549)

    '
- title: -- digestAlgorithm(2) 5}
  contents:
  - '-- digestAlgorithm(2) 5}

    '
- title: -- sha-1 OBJECT IDENTIFIER ::=
  contents:
  - '-- sha-1 OBJECT IDENTIFIER ::=

    '
- title: --    {iso(1) identified-organization(3) oiw(14) secsig(3)
  contents:
  - '--    {iso(1) identified-organization(3) oiw(14) secsig(3)

    '
- title: -- algorithm(2) 26}
  contents:
  - '-- algorithm(2) 26}

    '
- title: -- Asymmetric Encryption Algorithms
  contents:
  - '-- Asymmetric Encryption Algorithms

    '
- title: --
  contents:
  - '--

    '
- title: -- rsaEncryption OBJECT IDENTIFIER ::=
  contents:
  - '-- rsaEncryption OBJECT IDENTIFIER ::=

    '
- title: --    {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1)
  contents:
  - '--    {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1)

    '
- title: -- 1}
  contents:
  - '-- 1}

    '
- title: --
  contents:
  - '--

    '
- title: -- rsa OBJECT IDENTIFIER ::=
  contents:
  - '-- rsa OBJECT IDENTIFIER ::=

    '
- title: --    {joint-iso-ccitt(2) ds(5) algorithm(8) encryptionAlgorithm(1) 1}
  contents:
  - '--    {joint-iso-ccitt(2) ds(5) algorithm(8) encryptionAlgorithm(1) 1}

    '
- title: --
  contents:
  - '--

    '
- title: -- id-dsa OBJECT IDENTIFIER ::=
  contents:
  - '-- id-dsa OBJECT IDENTIFIER ::=

    '
- title: --    {iso(1) member-body(2) us(840) x9-57(10040) x9cm(4) 1 }
  contents:
  - '--    {iso(1) member-body(2) us(840) x9-57(10040) x9cm(4) 1 }

    '
- title: -- Signature Algorithms
  contents:
  - '-- Signature Algorithms

    '
- title: --
  contents:
  - '--

    '
- title: -- md2WithRSAEncryption OBJECT IDENTIFIER ::=
  contents:
  - '-- md2WithRSAEncryption OBJECT IDENTIFIER ::=

    '
- title: --    {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1)
  contents:
  - '--    {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1)

    '
- title: -- 2}
  contents:
  - '-- 2}

    '
- title: --
  contents:
  - '--

    '
- title: -- md5WithRSAEncryption OBJECT IDENTIFIER ::=
  contents:
  - '-- md5WithRSAEncryption OBJECT IDENTIFIER ::=

    '
- title: --    {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1)
  contents:
  - '--    {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1)

    '
- title: -- 4}
  contents:
  - '-- 4}

    '
- title: --
  contents:
  - '--

    '
- title: -- sha-1WithRSAEncryption OBJECT IDENTIFIER ::=
  contents:
  - '-- sha-1WithRSAEncryption OBJECT IDENTIFIER ::=

    '
- title: --    {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1)
  contents:
  - '--    {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-1(1)

    '
- title: -- 5}
  contents:
  - '-- 5}

    '
- title: --
  contents:
  - '--

    '
- title: -- id-dsa-with-sha1 OBJECT IDENTIFIER ::=
  contents:
  - '-- id-dsa-with-sha1 OBJECT IDENTIFIER ::=

    '
- title: --    {iso(1) member-body(2) us(840) x9-57(10040) x9cm(4) 3}
  contents:
  - '--    {iso(1) member-body(2) us(840) x9-57(10040) x9cm(4) 3}

    '
- title: -- Other Signed Attributes
  contents:
  - '-- Other Signed Attributes

    '
- title: --
  contents:
  - '--

    '
- title: -- signingTime OBJECT IDENTIFIER ::=
  contents:
  - '-- signingTime OBJECT IDENTIFIER ::=

    '
- title: --    {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)
  contents:
  - '--    {iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1) pkcs-9(9)

    '
- title: -- 5}
  contents:
  - '-- 5}

    '
- title: --    See [CMS] for a description of how to encode the attribute
  contents:
  - '--    See [CMS] for a description of how to encode the attribute

    '
- title: --    value.
  contents:
  - '--    value.

    '
- title: END
  contents:
  - 'END

    '
- title: B. References
  contents:
  - "B. References\n   [3DES]         ANSI X9.52-1998, \"Triple Data Encryption Algorithm\n\
    \                  Modes of Operation\", American National Standards\n       \
    \           Institute, 1998.\n   [CERT3]        Ramsdell, B., Editor, \"S/MIME\
    \ Version 3 Certificate\n                  Handling\", RFC 2632, June 1999.\n\
    \   [CHARSETS]     Character sets assigned by IANA. See\n                  <ftp://ftp.isi.edu/in-\n\
    \                  notes/iana/assignments/character-sets>.\n   [CMS]         \
    \ Housley, R., \"Cryptographic Message Syntax\", RFC 2630,\n                 \
    \ June 1999.\n   [CONTDISP]     Troost, R., Dorner, S. and K. Moore, \"Communicating\n\
    \                  Presentation Information in Internet Messages: The\n      \
    \            Content-Disposition Header Field\", RFC 2183, August\n          \
    \        1997.\n   [DES]          ANSI X3.106, \"American National Standard for\n\
    \                  Information Systems- Data Link Encryption,\" American\n   \
    \               National Standards Institute, 1983.\n   [DH]           Rescorla,\
    \ E., \"Diffie-Hellman Key Agreement Method\",\n                  RFC 2631, June\
    \ 1999.\n   [DSS]          NIST FIPS PUB 186, \"Digital Signature Standard\",\
    \ 18\n                  May 1994.\n   [ESS]          Hoffman, P., Editor \"Enhanced\
    \ Security Services for\n                  S/MIME\", RFC 2634, June 1999.\n  \
    \ [MD5]          Rivest, R., \"The MD5 Message Digest Algorithm\", RFC\n     \
    \             1321, April 1992.\n   [MIME-SPEC]    The primary definition of MIME.\
    \ \"MIME Part 1: Format\n                  of Internet Message Bodies\", RFC 2045;\
    \ \"MIME Part 2:\n                  Media Types\", RFC 2046; \"MIME Part 3: Message\
    \ Header\n                  Extensions for Non-ASCII Text\", RFC 2047; \"MIME\
    \ Part\n                  4: Registration Procedures\", RFC 2048; \"MIME Part\
    \ 5:\n                  Conformance Criteria and Examples\", RFC 2049,\n     \
    \             September 1993.\n   [MIME-SECURE]  Galvin, J., Murphy, S., Crocker,\
    \ S. and N. Freed,\n                  \"Security Multiparts for MIME: Multipart/Signed\
    \ and\n                  Multipart/Encrypted\", RFC 1847, October 1995.\n   [MUSTSHOULD]\
    \   Bradner, S., \"Key words for use in RFCs to Indicate\n                  Requirement\
    \ Levels\", BCP14, RFC 2119, March 1997.\n   [PKCS-1]       Kaliski, B., \"PKCS\
    \ #1: RSA Encryption Version 2.0\",\n                  RFC 2437, October 1998.\n\
    \   [PKCS-7]       Kaliski, B., \"PKCS #7: Cryptographic Message Syntax\n    \
    \              Version 1.5\", RFC 2315, March 1998.\n   [RANDOM]       Eastlake,\
    \ 3rd, D., Crocker, S. and J. Schiller,\n                  \"Randomness Recommendations\
    \ for Security\", RFC 1750,\n                  December 1994.\n   [RC2]      \
    \    Rivest, R., \"A Description of the RC2 (r) Encryption\n                 \
    \ Algorithm\", RFC 2268, January 1998.\n   [SHA1]         NIST FIPS PUB 180-1,\
    \ \"Secure Hash Standard,\" National\n                  Institute of Standards\
    \ and Technology, U.S. Department\n                  of Commerce, DRAFT, 31May\
    \ 1994.\n   [SMIMEV2]      Dusse, S., Hoffman, P., Ramsdell, B., Lundblade, L.\n\
    \                  and L.  Repka, \"S/MIME Version 2 Message\n               \
    \   Specification\", RFC 2311, March 1998.\n"
- title: C. Acknowledgements
  contents:
  - "C. Acknowledgements\n   Many thanks go out to the other authors of the S/MIME\
    \ Version 2\n   Message Specification RFC:  Steve Dusse, Paul Hoffman, Laurence\n\
    \   Lundblade and Lisa Repka. Without v2, there wouldn't be a v3.\n   A number\
    \ of the members of the S/MIME Working Group have also worked\n   very hard and\
    \ contributed to this document. Any list of people is\n   doomed to omission,\
    \ and for that I apologize. In alphabetical order,\n   the following people stand\
    \ out in my mind due to the fact that they\n   made direct contributions to this\
    \ document.\n   Dave Crocker\n   Bill Flanigan\n   Paul Hoffman\n   Russ Housley\n\
    \   John Pawling\n   Jim Schaad\n"
- title: Editor's Address
  contents:
  - "Editor's Address\n   Blake Ramsdell\n   Worldtalk\n   17720 NE 65th St Ste 201\n\
    \   Redmond, WA 98052\n   Phone: +1 425 376 0225\n   EMail: blaker@deming.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
