- title: __initial_text__
  contents:
  - '      Push Notification with the Session Initiation Protocol (SIP)

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes how a Push Notification Service (PNS) can\
    \ be\n   used to wake a suspended Session Initiation Protocol (SIP) User Agent\n\
    \   (UA) with push notifications, and it also describes how the UA can\n   send\
    \ binding-refresh REGISTER requests and receive incoming SIP\n   requests in an\
    \ environment in which the UA may be suspended.  The\n   document defines new\
    \ SIP URI parameters to exchange PNS information\n   between the UA and the SIP\
    \ entity that will then request that push\n   notifications be sent to the UA.\
    \  It also defines the parameters to\n   trigger such push notification requests.\
    \  The document also defines\n   new feature-capability indicators that can be\
    \ used to indicate\n   support of this mechanism.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   https://www.rfc-editor.org/info/rfc8599.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2019 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (https://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   4\n   2.  Conventions . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   8\n   3.  Push Resource ID (PRID) . . . . . . . . . . . . . . . .\
    \ . . .   8\n   4.  SIP User Agent (UA) Behavior  . . . . . . . . . . . . . .\
    \ . .   9\n     4.1.  REGISTER  . . . . . . . . . . . . . . . . . . . . . . .\
    \ .   9\n       4.1.1.  Request Push Notifications  . . . . . . . . . . . . .\
    \   9\n       4.1.2.  Disable Push Notifications  . . . . . . . . . . . . .  11\n\
    \       4.1.3.  Receive Push Notifications  . . . . . . . . . . . . .  11\n  \
    \     4.1.4.  Sending Binding-Refresh Requests Using Non-push\n              \
    \ Mechanism . . . . . . . . . . . . . . . . . . . . . .  11\n       4.1.5.  Query\
    \ Network PNS Capabilities  . . . . . . . . . . .  13\n   5.  SIP Proxy Behavior\
    \  . . . . . . . . . . . . . . . . . . . . .  14\n     5.1.  PNS Provider  . .\
    \ . . . . . . . . . . . . . . . . . . . .  14\n     5.2.  SIP Request Push Bucket\
    \ . . . . . . . . . . . . . . . . .  15\n     5.3.  SIP URI Comparison Rules \
    \ . . . . . . . . . . . . . . . .  15\n     5.4.  Indicate Support of Type of\
    \ PNS . . . . . . . . . . . . .  15\n     5.5.  Trigger Periodic Binding Refresh\
    \  . . . . . . . . . . . .  16\n     5.6.  SIP Requests  . . . . . . . . . . .\
    \ . . . . . . . . . . .  17\n       5.6.1.  REGISTER  . . . . . . . . . . . .\
    \ . . . . . . . . . .  17\n       5.6.2.  Initial Request for Dialog or Standalone\
    \ Request  . .  20\n   6.  Support of Long-Lived SIP Dialogs . . . . . . . . .\
    \ . . . . .  23\n     6.1.  SIP UA Behavior . . . . . . . . . . . . . . . . .\
    \ . . . .  25\n       6.1.1.  Initial Request for Dialog  . . . . . . . . . .\
    \ . . .  25\n     6.2.  SIP Proxy Behavior  . . . . . . . . . . . . . . . . .\
    \ . .  25\n       6.2.1.  REGISTER  . . . . . . . . . . . . . . . . . . . . .\
    \ .  25\n       6.2.2.  Initial Request for Dialog  . . . . . . . . . . . . .\
    \  26\n       6.2.3.  Mid-dialog Request  . . . . . . . . . . . . . . . . .  26\n\
    \   7.  Support of SIP Replaces . . . . . . . . . . . . . . . . . . .  27\n  \
    \ 8.  Grammar . . . . . . . . . . . . . . . . . . . . . . . . . . .  28\n    \
    \ 8.1.  555 (Push Notification Service Not Supported) Response\n           Code\
    \  . . . . . . . . . . . . . . . . . . . . . . . . . .  28\n     8.2.  'sip.pns'\
    \ Feature-Capability Indicator  . . . . . . . . .  28\n     8.3.  'sip.vapid'\
    \ Feature-Capability Indicator  . . . . . . . .  28\n     8.4.  'sip.pnsreg' Feature-Capability\
    \ Indicator . . . . . . . .  28\n     8.5.  'sip.pnsreg' Media Feature Tag  .\
    \ . . . . . . . . . . . .  29\n     8.6.  'sip.pnspurr' Feature-Capability Indicator\
    \  . . . . . . .  29\n     8.7.  SIP URI Parameters  . . . . . . . . . . . . .\
    \ . . . . . .  29\n   9.  PNS Registration Requirements . . . . . . . . . . .\
    \ . . . . .  30\n   10. 'pn-provider', 'pn-param', and 'pn-prid' URI Parameters\
    \ for\n       Apple Push Notification service . . . . . . . . . . . . . . .  30\n\
    \   11. 'pn-provider', 'pn-param', and 'pn-prid' URI Parameters for\n       Google\
    \ Firebase Cloud Messaging (FCM) Push Notification\n       Service . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . .  31\n   12. 'pn-provider', 'pn-param',\
    \ and 'pn-prid' URI Parameters for\n       RFC 8030 (Generic Event Delivery Using\
    \ HTTP Push) . . . . . .  31\n   13. Security Considerations . . . . . . . . .\
    \ . . . . . . . . . .  32\n   14. IANA Considerations . . . . . . . . . . . .\
    \ . . . . . . . . .  33\n     14.1.  SIP URI Parameters . . . . . . . . . . .\
    \ . . . . . . . .  33\n       14.1.1.  pn-provider  . . . . . . . . . . . . .\
    \ . . . . . . .  33\n       14.1.2.  pn-param . . . . . . . . . . . . . . . .\
    \ . . . . . .  33\n       14.1.3.  pn-prid  . . . . . . . . . . . . . . . . .\
    \ . . . . .  33\n       14.1.4.  pn-purr  . . . . . . . . . . . . . . . . . .\
    \ . . . .  33\n     14.2.  SIP Response Codes . . . . . . . . . . . . . . . .\
    \ . . .  34\n       14.2.1.  555 (Push Notification Service Not Supported)  .\
    \ . .  34\n     14.3.  SIP Global Feature-Capability Indicator  . . . . . . .\
    \ .  34\n       14.3.1.  sip.pns  . . . . . . . . . . . . . . . . . . . . . .\
    \  34\n       14.3.2.  sip.vapid  . . . . . . . . . . . . . . . . . . . . .  34\n\
    \       14.3.3.  sip.pnsreg . . . . . . . . . . . . . . . . . . . . .  35\n  \
    \     14.3.4.  sip.pnspurr  . . . . . . . . . . . . . . . . . . . .  35\n    \
    \ 14.4.  SIP Media Feature Tag  . . . . . . . . . . . . . . . . .  36\n      \
    \ 14.4.1.  sip.pnsreg . . . . . . . . . . . . . . . . . . . . .  36\n     14.5.\
    \  PNS Subregistry Establishment  . . . . . . . . . . . . .  36\n   15. References\
    \  . . . . . . . . . . . . . . . . . . . . . . . . .  37\n     15.1.  Normative\
    \ References . . . . . . . . . . . . . . . . . .  37\n     15.2.  Informative\
    \ References . . . . . . . . . . . . . . . . .  39\n   Acknowledgements  . . .\
    \ . . . . . . . . . . . . . . . . . . . . .  40\n   Authors' Addresses  . . .\
    \ . . . . . . . . . . . . . . . . . . . .  40\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   In order to save resources such as battery life, some devices\n\
    \   (especially mobile devices) and operating systems will suspend an\n   application\
    \ that is not in use.  A suspended application might not be\n   able to wake itself\
    \ with internal timers and might not be awakened by\n   incoming network traffic.\
    \  In such an environment, a Push\n   Notification Service (PNS) is used to wake\
    \ the application.  A PNS is\n   a service that sends messages requested by other\
    \ applications to a\n   user application in order to wake the user application.\
    \  These\n   messages are called push notifications.  Push notifications might\n\
    \   contain payload data, depending on the application.  An application\n   can\
    \ request that a push notification be sent to a single user\n   application or\
    \ to multiple user applications.\n   Typically, each operating system uses a dedicated\
    \ PNS.  Different\n   PNSs exist today.  Some are based on the standardized mechanism\n\
    \   defined in [RFC8030], while others are proprietary.  For example,\n   Apple\
    \ iOS devices use the Apple Push Notification service (APNs)\n   while Android\
    \ devices use the Firebase Cloud Messaging (FCM) service.\n   Each PNS uses PNS-specific\
    \ terminology and function names.  The\n   terminology in this document is meant\
    \ to be PNS-independent.  If the\n   PNS is based on [RFC8030], the SIP proxy\
    \ takes the role of the\n   application server.\n   When a Session Initiation\
    \ Protocol (SIP) User Agent (UA)[RFC3261] is\n   suspended in such an environment,\
    \ it is unable to send binding-\n   refresh SIP REGISTER requests, unable to receive\
    \ incoming SIP\n   requests, and might not be able to use internal timers to wake\n\
    \   itself.  A suspended UA will not be able to maintain connections,\n   e.g.,\
    \ using the SIP Outbound Mechanism [RFC5626], because it cannot\n   send periodic\
    \ keep-alive messages.  A PNS is needed to wake the SIP\n   UA so that the UA\
    \ can perform these functions.\n   This document describes how a PNS can be used\
    \ to wake a suspended UA\n   using push notifications, so that the UA can send\
    \ binding-refresh\n   REGISTER requests and receive incoming SIP requests.  The\
    \ document\n   defines new SIP URI parameters and new feature-capability indicators\n\
    \   [RFC6809] that can be used in SIP messages to indicate support of the\n  \
    \ mechanism defined in this document; be used to exchange PNS\n   information\
    \ between the UA and the SIP entity (realized as a SIP\n   proxy in this document)\
    \ that will request that push notifications are\n   sent to the UA; and be used\
    \ to request such push notification\n   requests.\n   NOTE: Even if a UA is able\
    \ to be awakened by means other than\n   receiving push notifications (e.g., by\
    \ using internal timers) in\n   order to send periodic binding-refresh REGISTER\
    \ requests, it might\n   still be useful to suspend the UA between the sending\
    \ of binding-\n   refresh requests (as it will save battery life) and use push\n\
    \   notifications to wake the UA when an incoming SIP request UA arrives.\n  \
    \ When a UA registers with a PNS (Figure 1), it will receive a unique\n   Push\
    \ Resource ID (PRID) associated with the push notification\n   registration. \
    \ The UA will use a REGISTER request to provide the PRID\n   to the SIP proxy,\
    \ which will then request that push notifications are\n   sent to the UA.\n  \
    \ When the SIP proxy receives a SIP request for a new dialog or a\n   standalone\
    \ SIP request addressed towards a UA, or when the SIP proxy\n   determines that\
    \ the UA needs to send a binding-refresh REGISTER\n   request, the SIP proxy will\
    \ send a push request containing the PRID\n   of the UA to the PNS, which will\
    \ then send a push notification to the\n   UA.  Once the UA receives the push\
    \ notification, it will be able to\n   send a binding-refresh REGISTER request.\
    \  The proxy receives the\n   REGISTER request from the UA and forwards it to\
    \ the SIP registrar\n   [RFC3261].  After accepting the REGISTER request, the\
    \ SIP registrar\n   sends a 2xx response to the proxy, which forwards the response\
    \ to the\n   UA.  If the push notification request was triggered by a SIP request\n\
    \   addressed towards the UA, the proxy can then forward the SIP request\n   to\
    \ the UA using normal SIP routing procedures.  In some cases, the\n   proxy can\
    \ forward the SIP request without waiting for the SIP 2xx\n   response to the\
    \ REGISTER request from the SIP registrar.  Note that\n   this mechanism necessarily\
    \ adds delay to responding to requests\n   requiring push notification.  The consequences\
    \ of that delay are\n   discussed in Section 5.6.2.\n   If there are Network Address\
    \ Translators (NATs) between the UA and\n   the proxy, the REGISTER request sent\
    \ by the UA will create NAT\n   bindings that will allow the incoming SIP request\
    \ that triggered the\n   push notification to reach the UA.\n   NOTE: The lifetime\
    \ of any NAT binding created by the REGISTER request\n   only needs to be long\
    \ enough for the SIP request that triggered the\n   push notification to reach\
    \ the UA.\n   Figure 1 shows the generic push notification architecture supported\n\
    \   by the mechanism in this document.\n   The SIP proxy MUST be in the signaling\
    \ path of REGISTER requests sent\n   by the UA towards the registrar, and of SIP\
    \ requests (for a new\n   dialog or a standalone) forwarded by the proxy responsible\
    \ for the\n   UA's domain (sometimes referred to as home proxy, Serving Call\n\
    \   Session Control Function (S-CSCF), etc.) towards the UA.  The proxy\n   can\
    \ also be co-located with the proxy responsible for the UA's\n   domain.  This\
    \ will also ensure that the Request-URI of SIP requests\n   (for a new dialog\
    \ or a standalone) can be matched against contacts in\n   REGISTER requests.\n\
    \     +--------+      +---------+        +-----------+    +-------------+\n  \
    \   |        |      |         |        |           |    | SIP         |\n    \
    \ | SIP UA |      | Push    |        | SIP Proxy |    | Registrar / |\n     |\
    \        |      | Service |        |           |    | Home Proxy  |\n     +--------+\
    \      +---------+        +-----------+    +-------------+\n         |       \
    \          |                  |                   |\n         | Subscribe    \
    \   |                  |                   |\n         |---------------->|   \
    \               |                   |\n         |                 |          \
    \        |                   |\n         | PRID            |                 \
    \ |                   |\n         |<----------------|                  |     \
    \              |\n         |                 |                  |            \
    \       |\n         | SIP REGISTER (PRID)                |                   |\n\
    \         |===================================>|                   |\n       \
    \  |                 |                  |SIP REGISTER (PRID)|\n         |    \
    \             |                  |==================>|\n         |           \
    \      |                  |                   |\n         |                 |\
    \                  | SIP 200 OK        |\n         |                 |       \
    \           |<==================|\n         | SIP 200 OK      |              \
    \    |                   |\n         |<===================================|  \
    \                 |\n         |                 |                  |         \
    \          |\n         |                 |                  | SIP INVITE (PRID)\
    \ |\n         |                 |                  |<==================|\n   \
    \      |                 |                  |                   |\n         |\
    \                 |Push Request (PRID)                   |\n         |       \
    \          |<-----------------|                   |\n         |Push Message (PRID)\
    \                 |                   |\n         |<----------------|        \
    \          |                   |\n         |                 |               \
    \   |                   |\n         | SIP REGISTER (PRID)                |   \
    \                |\n         |===================================>|          \
    \         |\n         |                 |                  |SIP REGISTER (PRID)|\n\
    \         |                 |                  |==================>|\n       \
    \  |                 |                  |                   |\n         |    \
    \             |                  | SIP 200 OK        |\n         |           \
    \      |                  |<==================|\n         | SIP 200 OK      |\
    \                  |                   |\n         |<===================================|\
    \                   |\n         |                 |                  |       \
    \            |\n         | SIP INVITE      |                  |              \
    \     |\n         |<===================================|                   |\n\
    \         |                 |                  |                   |\n       \
    \  ------- Push Notification API\n         ======= SIP\n                    Figure\
    \ 1: SIP Push Information Flow\n     Example of a SIP REGISTER request in the\
    \ flow above:\n     REGISTER sip:alice@example.com SIP/2.0\n     Via: SIP/2.0/TCP\
    \ alicemobile.example.com:5060;branch=z9hG4bKnashds7\n     Max-Forwards: 70\n\
    \     To: Alice <sip:alice@example.com>\n     From: Alice <sip:alice@example.com>;tag=456248\n\
    \     Call-ID: 843817637684230@998sdasdh09\n     CSeq: 1826 REGISTER\n     Contact:\
    \ <sip:alice@alicemobile.example.com;\n       pn-provider=acme;\n       pn-param=acme-param;\n\
    \       pn-prid=ZTY4ZDJlMzODE1NmUgKi0K>\n     Expires: 7200\n     Content-Length:\
    \ 0\n                      Figure 2: SIP REGISTER Example\n"
- title: 2.  Conventions
  contents:
  - "2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT RECOMMENDED\"\
    , \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted as described\
    \ in\n   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all\n\
    \   capitals, as shown here.\n"
- title: 3.  Push Resource ID (PRID)
  contents:
  - "3.  Push Resource ID (PRID)\n   When a SIP UA registers with a PNS it receives\
    \ a unique Push Resource\n   ID (PRID), which is a value associated with the registration\
    \ that can\n   be used to generate push notifications.\n   The format of the PRID\
    \ varies depending on the PNS.\n   The details regarding discovery of the PNS,\
    \ and the procedures\n   regarding the push notification registration and maintenance,\
    \ are\n   outside the scope of this document.  The information needed to\n   contact\
    \ the PNS is typically preconfigured in the operating system of\n   the device.\n"
- title: 4.  SIP User Agent (UA) Behavior
  contents:
  - '4.  SIP User Agent (UA) Behavior

    '
- title: 4.1.  REGISTER
  contents:
  - "4.1.  REGISTER\n   This section describes how a SIP UA sends SIP REGISTER requests\n\
    \   (either an initial REGISTER request for a binding or a binding-\n   refresh\
    \ REGISTER request) in order to request and disable push\n   notifications from\
    \ a SIP network, and to query the types of PNSs\n   supported by the SIP network.\n\
    \   Unless specified otherwise, the normal SIP UA registration procedures\n  \
    \ [RFC3261] apply.  The additional procedures described in this section\n   apply\
    \ when the REGISTER request contains a 'pn-provider' SIP URI\n   parameter in\
    \ the Contact header field URI (Figure 2).\n   The procedures in this section\
    \ apply to individual bindings\n   [RFC3261].  If a UA creates multiple bindings\
    \ (e.g., one for IPv4 and\n   one for IPv6), the UA needs to perform the procedures\
    \ for each\n   binding.\n   NOTE: Since a push notification will trigger the UA\
    \ to refresh all\n   bindings, if a SIP UA has created multiple bindings, it is\
    \ preferable\n   if one can ensure that all bindings expire at the same time to\
    \ help\n   prevent some bindings from being refreshed earlier than needed.\n \
    \  For privacy and security reasons, a UA MUST NOT insert the SIP URI\n   parameters\
    \ (except for the 'pn-purr' parameter) defined in this\n   specification in non-REGISTER\
    \ requests in order to prevent the PNS\n   information associated with the UA\
    \ from reaching the remote peer.\n   For example, the UA MUST NOT insert the 'pn-prid'\
    \ SIP URI parameter\n   in the Contact header field URI of an INVITE request.\
    \  REGISTER\n   requests will not reach the remote peer, as they will be terminated\n\
    \   by the registrar of the UA.  However, the registrar MUST still ensure\n  \
    \ that the parameters are not sent to other users, e.g., using the\n   mechanism\
    \ defined by the SIP event package for registrations\n   [RFC3680].  See Section\
    \ 13 for more information.\n"
- title: 4.1.1.  Request Push Notifications
  contents:
  - "4.1.1.  Request Push Notifications\n   This section describes the procedures\
    \ that a SIP UA follows to\n   request push notifications from the SIP network.\
    \  The procedures\n   assume that the UA has retrieved a PRID from a PNS.  The\
    \ procedures\n   for retrieving the PRID from the PNS are PNS-specific and outside\
    \ the\n   scope of this specification.  See PNS-specific documentation for more\n\
    \   details.\n   This specification does not define a mechanism to explicitly\
    \ request\n   push notifications from the SIP network for usages other than\n\
    \   triggering binding-refresh REGISTER requests (e.g., for sending\n   periodic\
    \ subscription-refresh SUBSCRIBE requests [RFC6665]), nor does\n   it describe\
    \ how to distinguish push notifications associated with\n   such usages from the\
    \ push notifications used to trigger binding-\n   refresh REGISTER requests. \
    \ If a SIP UA wants to use push\n   notifications for other usages, the UA can\
    \ perform actions associated\n   with such usages (in addition to sending a binding-refresh\
    \ REGISTER\n   request) whenever it receives a push notification by using the\
    \ same\n   refresh interval that is used for the binding refreshes.\n   To request\
    \ push notifications from the SIP network, the UA MUST\n   insert the following\
    \ SIP URI parameters in the SIP Contact header\n   field URI of the REGISTER request:\
    \ 'pn-provider', 'pn-prid', and\n   'pn-param' (if required for the specific PNS).\
    \  The 'pn-provider' URI\n   parameter indicates the type of PNS to be used for\
    \ the push\n   notifications.\n   If the UA receives a 2xx response to the REGISTER\
    \ request that\n   contains a Feature-Caps header field [RFC6809] with a 'sip.pns'\n\
    \   feature-capability indicator, with an indicator value identifying the\n  \
    \ same type of PNS that was identified by the 'pn-provider' URI\n   parameter\
    \ in the REGISTER request, it indicates that another SIP\n   Proxy in the SIP\
    \ network will request that push notifications are\n   sent to the UA.  In addition,\
    \ if the same Feature-Caps header field\n   contains a 'sip.vapid' feature-capability\
    \ indicator, it indicates\n   that the proxy supports use of the Voluntary Application\
    \ Server\n   Identification (VAPID) mechanism [RFC8292] to restrict push\n   notifications\
    \ to the UA.\n   NOTE: The VAPID-specific procedures of the SIP UA are outside\
    \ the\n   scope of this document.\n   If the UA receives a non-2xx response to\
    \ the REGISTER, or if the UA\n   receives a 2xx response that does not contain\
    \ a Feature-Caps header\n   field [RFC6809] with a 'sip.pns' feature-capability\
    \ indicator, the UA\n   MUST NOT assume the proxy will request that push notifications\
    \ are\n   sent to the UA.  The actions taken by the UA in such cases are\n   outside\
    \ the scope of this document.\n   If the PRID is only valid for a limited time,\
    \ then the UA is\n   responsible for retrieving a new PRID from the PNS and sending\
    \ a\n   binding-refresh REGISTER request with the updated 'pn-*' parameters.\n\
    \   If a PRID is no longer valid, and the UA is not able to retrieve a\n   new\
    \ PRID, the UA MUST disable the push notifications associated with\n   the PRID\
    \ (Section 4.1.2).\n"
- title: 4.1.2.  Disable Push Notifications
  contents:
  - "4.1.2.  Disable Push Notifications\n   When a UA wants to disable previously\
    \ requested push notifications,\n   the UA SHOULD remove the binding [RFC3261],\
    \ unless the UA is no\n   longer able to perform SIP procedures (e.g., due to\
    \ a forced shutdown\n   of the UA), in which case the registrar will remove the\
    \ binding once\n   it expires.  When the UA sends the REGISTER request for removing\
    \ the\n   binding, the UA MUST NOT insert the 'pn-prid' SIP URI parameter in\n\
    \   the Contact header field URI of the REGISTER request.  The lack of\n   the\
    \ parameter informs the SIP network that the UA no longer wants to\n   receive\
    \ push notifications associated with the PRID.\n"
- title: 4.1.3.  Receive Push Notifications
  contents:
  - "4.1.3.  Receive Push Notifications\n   When a UA receives a push notification,\
    \ the UA MUST send a binding-\n   refresh REGISTER request.  The UA MUST insert\
    \ the same set of 'pn-*'\n   SIP URI parameters in the SIP Contact header field\
    \ URI of the\n   REGISTER request that it inserted when it requested push\n  \
    \ notifications (Section 4.1.1).  Note that, in some cases, the PNS\n   might\
    \ update the PRID value, in which case the UA will insert the new\n   value in\
    \ the 'pn-prid' SIP URI parameter of the binding-refresh\n   REGISTER request.\n\
    \   Once the UA has received a 2xx response to the REGISTER request, the\n   UA\
    \ might receive a SIP request for a new dialog (e.g., a SIP INVITE)\n   or a standalone\
    \ SIP request (e.g., a SIP MESSAGE) if such a SIP\n   request triggered the proxy\
    \ to request that the push notification was\n   sent to the UA.  Note that, depending\
    \ on which transport protocol is\n   used, the SIP request might reach the UA\
    \ before the REGISTER\n   response.\n   If the SIP UA has created multiple bindings,\
    \ the UA MUST send a\n   binding-refresh REGISTER request for each of those bindings\
    \ when it\n   receives a push notification.\n   This specification does not define\
    \ any usage of push-notification\n   payload.  If a SIP UA receives a push notification\
    \ that contains a\n   payload, the UA can discard the payload but will still send\
    \ a\n   binding-refresh REGISTER request.\n"
- title: 4.1.4.  Sending Binding-Refresh Requests Using Non-push Mechanism
  contents:
  - "4.1.4.  Sending Binding-Refresh Requests Using Non-push Mechanism\n   If a UA\
    \ is able to send binding-refresh REGISTER requests using a\n   non-push mechanism\
    \ (e.g., using an internal timer that periodically\n   wakes the UA), the UA MUST\
    \ insert a 'sip.pnsreg' media feature tag\n   [RFC3840] in the Contact header\
    \ field of each REGISTER request.\n   If the UA receives a 2xx response to the\
    \ REGISTER request that\n   contains a Feature-Caps header field with a 'sip.pnsreq'\
    \ feature-\n   capability indicator, the UA MUST send a binding-refresh REGISTER\n\
    \   request prior to binding expiration.  The indicator value indicates\n   the\
    \ minimum time (given in seconds), prior to the binding expiration\n   when the\
    \ UA needs to send the REGISTER request.\n   If the UA receives a 2xx response\
    \ to the REGISTER request that does\n   not contain a Feature-Caps header field\
    \ with a 'sip.pnsreq' feature-\n   capability indicator, the UA SHOULD only send\
    \ a binding-refresh\n   REGISTER request when it receives a push notification\
    \ (even if the UA\n   is able to use a non-push mechanism for sending binding-refresh\n\
    \   REGISTER requests) or when there are circumstances that require an\n   immediate\
    \ REGISTER request to be sent (e.g., if the UA is assigned\n   new contact parameters\
    \ due to a network configuration change).\n   Even if the UA is able to send binding-refresh\
    \ REGISTER requests\n   using a non-push mechanism, the UA MUST still send a binding-refresh\n\
    \   REGISTER request whenever it receives a push notification\n   (Section 4.1.3).\n\
    \   NOTE: If the UA uses a non-push mechanism to wake and send binding-\n   refresh\
    \ REGISTER requests, such REGISTER requests will update the\n   binding expiration\
    \ timer, and the proxy does not need to request that\n   a push notification be\
    \ sent to the UA in order to wake the UA.  The\n   proxy will still request that\
    \ a push notification be sent to the UA\n   when the proxy receives a SIP request\
    \ addressed towards the UA\n   (Section 5.6.2).  This allows the UA to, e.g.,\
    \ use timers for sending\n   binding-refresh REGISTER requests but be suspended\
    \ (in order to save\n   battery resources, etc.) between sending the REGISTER\
    \ requests and\n   using push notifications to wake the UA to process incoming\
    \ calls.\n     Example of a SIP REGISTER request including a 'sip.pnsreg'\n  \
    \   media feature tag:\n     REGISTER sip:alice@example.com SIP/2.0\n     Via:\
    \ SIP/2.0/TCP alicemobile.example.com:5060;branch=z9hG4bKnashds7\n     Max-Forwards:\
    \ 70\n     To: Alice <sip:alice@example.com>\n     From: Alice <sip:alice@example.com>;tag=456248\n\
    \     Call-ID: 843817637684230@998sdasdh09\n     CSeq: 1826 REGISTER\n     Contact:\
    \ <sip:alice@alicemobile.example.com;\n       pn-provider=acme;\n       pn-param=acme-param;\n\
    \       pn-prid=ZTY4ZDJlMzODE1NmUgKi0K>;\n       +sip.pnsreg\n     Expires: 7200\n\
    \     Content-Length: 0\n     Example of a SIP REGISTER response including a 'sip.pnsreg'\n\
    \     media feature tag and a 'sip.pnsreq' feature-capability indicator:\n   \
    \  SIP/2.0 200 OK\n     Via: SIP/2.0/TCP alicemobile.example.com:5060;branch=z9hG4bKnashds7\n\
    \     To: Alice <sip:alice@example.com>;tag=123987\n     From: Alice <sip:alice@example.com>;tag=456248\n\
    \     Call-ID: 843817637684230@998sdasdh09\n     CSeq: 1826 REGISTER\n     Contact:\
    \ <sip:alice@alicemobile.example.com;\n       pn-provider=acme;\n       pn-param=acme-param;\n\
    \       pn-prid=ZTY4ZDJlMzODE1NmUgKi0K>;\n       +sip.pnsreg\n     Feature-Caps:\
    \ *;+sip.pns=\"acme\";+sip.pnsreg=\"121\"\n     Expires: 7200\n     Content-Length:\
    \ 0\n       Figure 3: SIP REGISTER When Using Non-push Mechanism Example\n"
- title: 4.1.5.  Query Network PNS Capabilities
  contents:
  - "4.1.5.  Query Network PNS Capabilities\n   This section describes how a SIP UA\
    \ can query the types of PNSs\n   supported by a SIP network, and PNS-related\
    \ capabilities (e.g.,\n   support of the VAPID mechanism).  When a UA performs\
    \ a query, it does\n   not request push notifications from the SIP network.  Therefore,\
    \ the\n   UA can perform the query before it has registered to a PNS and\n   received\
    \ a PRID.\n   In order to perform a query, the UA MUST insert a 'pn-provider'\
    \ SIP\n   URI parameter in the Contact header field URI of the REGISTER\n   request:\n\
    \   o  If the UA inserts a 'pn-provider' parameter value, indicating\n      support\
    \ of a type of PNS, the SIP network will only inform the UA\n      whether that\
    \ type of PNS is supported.\n   o  If the UA does not insert a 'pn-provider' parameter\
    \ value (i.e.,\n      it inserts an \"empty\" 'pn-provider' parameter), the SIP\
    \ network\n      will inform the UA about all types of PNSs supported by the\n\
    \      network.  This is useful, e.g., if the UA supports more than one\n    \
    \  type of PNS.  Note that it is not possible to insert multiple\n      parameter\
    \ values in the 'pn-provider' parameter.\n   The UA MUST NOT insert a 'pn-prid'\
    \ SIP URI parameter in the Contact\n   header field URI of the REGISTER request.\n\
    \   If the UA receives a 2xx response to the REGISTER request, the\n   response\
    \ will contain one or more Feature-Caps header fields with a\n   'sip.pns' feature-capability\
    \ indicator, indicating the types of PNSs\n   supported by the SIP network.  If\
    \ the UA inserted a 'pn-provider' SIP\n   URI parameter value in the REGISTER\
    \ request, the response will only\n   indicate whether the SIP network supports\
    \ the type of PNS supported\n   by the UA.\n   If the UA receives a 555 (Push\
    \ Notification Service Not Supported)\n   response to the REGISTER request, and\
    \ if the UA inserted a\n   'pn-provider' SIP URI parameter in the REGISTER request,\
    \ the response\n   indicates that the network does not support the type of PNS\
    \ that the\n   UA indicated support of.  If the UA did not insert a 'pn-provider'\n\
    \   parameter in the REGISTER request, the response indicates that the\n   network\
    \ does not support any type of PNS while still supporting the\n   555 (Push Notification\
    \ Service Not Supported) response.\n   NOTE: It is optional for a UA to perform\
    \ a query before it requests\n   push notifications from the SIP network.\n"
- title: 5.  SIP Proxy Behavior
  contents:
  - '5.  SIP Proxy Behavior

    '
- title: 5.1.  PNS Provider
  contents:
  - "5.1.  PNS Provider\n   The type of PNS is identified by the 'pn-provider' SIP\
    \ URI parameter.\n   In some cases, there might only be one PNS provider for a\
    \ given type\n   of PNS, while in other cases there might be multiple providers.\
    \  The\n   'pn-param' SIP URI parameter will provide more details associated\n\
    \   with the actual PNS provider to be used.\n   The protocol and format used\
    \ for the push notification requests are\n   PNS-specific, and the details for\
    \ constructing and sending a push\n   notification request are outside the scope\
    \ of this specification.\n"
- title: 5.2.  SIP Request Push Bucket
  contents:
  - "5.2.  SIP Request Push Bucket\n   When a SIP proxy receives a SIP request addressed\
    \ towards a UA, that\n   will trigger the proxy to request that a push notification\
    \ be sent to\n   the UA.  The proxy will place the request in storage (referred\
    \ to as\n   the SIP Request Push Bucket) and the proxy will start a timer\n  \
    \ (referred to as the Bucket Timer) associated with the transaction.  A\n   SIP\
    \ request is removed from the bucket when one of the following has\n   occurred:\
    \ the proxy forwards the request towards the UA, the proxy\n   sends an error\
    \ response to the request, or the Bucket Timer times\n   out.  The detailed procedures\
    \ are described in the sections below.\n   Exactly how the SIP Request Push Bucket\
    \ is implemented is outside the\n   scope of this document.  One option is to\
    \ use the PRID as a key to\n   search for SIP requests in the bucket.  Note that\
    \ mid-dialog requests\n   (Section 6) do not carry the PRID in the SIP request\
    \ itself.\n"
- title: 5.3.  SIP URI Comparison Rules
  contents:
  - "5.3.  SIP URI Comparison Rules\n   By default, a SIP proxy uses the URI comparison\
    \ rules defined in\n   [RFC3261].  However, when a SIP proxy compares the Contact\
    \ header\n   field URI of a 2xx response to a REGISTER request with a Request-URI\n\
    \   of a SIP request in the SIP Request Push Bucket (Section 5.2), the\n   proxy\
    \ uses the URI comparison rules with the following additions: the\n   'pn-prid',\
    \ 'pn-provider', and 'pn-param' SIP URI parameters MUST also\n   match.  If a\
    \ 'pn-*' parameter is present in one of the compared URIs\n   but not in the other\
    \ URI, there is no match.\n   If only the 'pn-*' SIP URI parameters listed above\
    \ match, but other\n   parts of the compared URIs do not match, a proxy MAY still\
    \ consider\n   the comparison successful based on local policy.  This can occur\
    \ in a\n   race condition when the proxy compares the Contact header field URI\n\
    \   of a 2xx response to a REGISTER request with a Request-URI of a SIP\n   request\
    \ in the SIP Request Push Bucket (Section 5.2) if the UA had\n   modified some\
    \ parts of the Contact header field URI in the REGISTER\n   request but the Request-URI\
    \ of the SIP request in the SIP Request\n   Push Bucket still contains the old\
    \ parts.\n"
- title: 5.4.  Indicate Support of Type of PNS
  contents:
  - "5.4.  Indicate Support of Type of PNS\n   A SIP proxy uses feature-capability\
    \ indicators [RFC6809] to indicate\n   support of types of PNSs and additional\
    \ features (e.g., VAPID)\n   associated with the type of PNS.  A proxy MUST use\
    \ a separate\n   Feature-Cap header field for each supported type of PNS.  A feature-\n\
    \   capability indicator that indicates support of an additional feature\n   associated\
    \ with a given type of PNS MUST be inserted in the same\n   Feature-Caps header\
    \ field that is used to indicate support of the\n   type of PNS.\n   This specification\
    \ defines the following feature-capability\n   indicators that a proxy can use\
    \ to indicate support of additional\n   features associated with a given type\
    \ of PNS: 'sip.vapid',\n   'sip.pnsreg', and 'sip.pnspurr'.  These feature-capability\
    \ indicators\n   MUST only be inserted in a Feature-Caps header field that also\n\
    \   contains a 'sip.pns' feature-capability indicator.\n"
- title: 5.5.  Trigger Periodic Binding Refresh
  contents:
  - "5.5.  Trigger Periodic Binding Refresh\n   In order to request that a push notification\
    \ be sent to a SIP UA, a\n   SIP proxy needs to have information about when a\
    \ binding will expire.\n   The proxy needs to be able to retrieve the information\
    \ from the\n   registrar using some mechanism or run its own registration timers.\n\
    \   Such mechanisms are outside the scope of this document but could be\n   implemented,\
    \ e.g., by using the SIP event package for registrations\n   mechanism [RFC3680].\n\
    \   When the proxy receives an indication that the UA needs to send a\n   binding-refresh\
    \ REGISTER request, the proxy will request that a push\n   notification be sent\
    \ to the UA.\n   Note that the push notification needs to be requested early enough\n\
    \   for the associated binding-refresh REGISTER request to reach the\n   registrar\
    \ before the binding expires.  It is RECOMMENDED that the\n   proxy requests the\
    \ push notification at least 120 seconds before the\n   binding expires.\n   If\
    \ the UA has indicated, using the 'sip.pnsreg' media feature tag,\n   that it\
    \ is able to wake itself using a non-push mechanism in order to\n   send binding-refresh\
    \ REGISTER requests, and if the proxy does not\n   receive a REGISTER request\
    \ prior to 120 seconds before the binding\n   expires, the proxy MAY request that\
    \ a push notification be sent to\n   the UA to trigger the UA to send a binding-refresh\
    \ REGISTER request.\n   NOTE: As described in Section 4.1.5, a UA might send a\
    \ REGISTER\n   request without including a 'pn-prid' SIP URI parameter in order\
    \ to\n   retrieve push notification capabilities from the network before the\n\
    \   UA expects to receive push notifications from the network.  A proxy\n   will\
    \ not request that push notifications are sent to a UA that has\n   not provided\
    \ a 'pn-prid' SIP URI parameter (Section 5.6.2).\n   If the proxy receives information\
    \ that a binding associated with a\n   PRID has expired, or that a binding has\
    \ been removed, the proxy MUST\n   NOT request that further push notifications\
    \ are sent to the UA using\n   that PRID.\n"
- title: 5.6.  SIP Requests
  contents:
  - '5.6.  SIP Requests

    '
- title: 5.6.1.  REGISTER
  contents:
  - "5.6.1.  REGISTER\n   This section describes how a SIP proxy processes SIP REGISTER\n\
    \   requests (initial REGISTER request for a binding or a binding-refresh\n  \
    \ REGISTER request).\n   The procedures in this section apply when the REGISTER\
    \ request\n   contains a 'pn-provider' SIP URI parameter in the Contact header\n\
    \   field URI.  In other cases, the proxy MUST skip the procedures in\n   this\
    \ section and process the REGISTER request using normal SIP\n   procedures.\n"
- title: 5.6.1.1.  Request Push Notifications
  contents:
  - "5.6.1.1.  Request Push Notifications\n   This section describes the SIP proxy\
    \ procedures when a SIP UA\n   requests push notifications from the SIP network.\n\
    \   The procedures in this section apply when the SIP REGISTER request\n   contains,\
    \ in addition to the 'pn-provider' SIP URI parameter, a\n   'pn-prid' SIP URI\
    \ parameter in the Contact header field URI of the\n   request.\n   When a proxy\
    \ receives a REGISTER request that contains a Feature-Caps\n   header field with\
    \ a 'sip.pns' feature-capability indicator, it\n   indicates that another proxy\
    \ between this proxy and the UA supports\n   the type of PNS supported by the\
    \ UA, and will request that push\n   notifications are sent to the UA.  In such\
    \ case, the proxy MUST skip\n   the rest of the procedures in this section and\
    \ process the REGISTER\n   request using normal SIP procedures.\n   When a proxy\
    \ receives a REGISTER request that does not contain a\n   Feature-Caps header\
    \ field with a 'sip.pns' feature-capability\n   indicator, the proxy processes\
    \ the request according to the\n   procedures below:\n   o  If the proxy does\
    \ not support the type of PNS supported by the UA,\n      or if the REGISTER request\
    \ does not contain all information\n      required for the type of PNS, the proxy\
    \ SHOULD forward the request\n      towards the registrar and skip the rest of\
    \ the procedures in this\n      section.  If the proxy knows (by means of local\
    \ configuration)\n      that no other proxies between itself and the registrar\
    \ support the\n      type of PNS supported by the UA, the proxy MAY send a SIP\
    \ 555\n      (Push Notification Service Not Supported) response instead of\n \
    \     forwarding the request.\n   o  If the proxy supports the type of PNS supported\
    \ by the UA, but\n      considers the requested binding expiration interval [RFC3261]\
    \ to\n      be too short (see below), the proxy MUST either send a 423\n     \
    \ (Interval Too Brief) response to the REGISTER request or forward\n      the\
    \ request towards the registrar and skip the rest of the\n      procedures in\
    \ this section.\n   o  If the proxy supports the type of PNS supported by the\
    \ UA, the\n      proxy MUST indicate support of that type of PNS (Section 5.4)\
    \ in\n      the REGISTER request before it forwards the request towards the\n\
    \      registrar.  This will inform proxies between the proxy and the\n      registrar\
    \ that the proxy supports the type of PNS supported by the\n      UA, and that\
    \ the proxy will request that push notifications are\n      sent to the UA.\n\
    \   A binding expiration interval MUST be considered too short if the\n   binding\
    \ would expire before the proxy can request that a push\n   notification be sent\
    \ to the UA to trigger the UA to send a binding-\n   refresh REGISTER request.\
    \  The proxy MAY consider the interval too\n   short based on its own policy so\
    \ as to reduce load on the system.\n   When a proxy receives a 2xx response to\
    \ the REGISTER request, if the\n   proxy indicated support of a type of PNS in\
    \ the REGISTER request (see\n   above), the proxy performs the following actions:\n\
    \   o  If the proxy considers the binding expiration interval indicated\n    \
    \  by the registrar too short (see above), the proxy forwards the\n      response\
    \ towards the UA and MUST skip the rest of the procedures\n      in this section.\n\
    \   o  The proxy MUST indicate support of the same type of PNS in the\n      REGISTER\
    \ response.  In addition:\n      *  If the proxy supports the VAPID mechanism\
    \ [RFC8292], the proxy\n         MUST indicate support of the mechanism, using\
    \ the 'sip.vapid'\n         feature-capability indicator, in the REGISTER response.\
    \  The\n         indicator value contains the public key identifying the proxy.\n\
    \         The proxy MUST determine whether the PNS provider supports the\n   \
    \      VAPID mechanism before it indicates support of it.\n      *  If the proxy\
    \ received a 'sip.pnsreg' media feature tag in the\n         REGISTER request,\
    \ the proxy SHOULD insert a 'sip.pnsreg'\n         feature-capability indicator\
    \ with an indicator value bigger\n         than 120 in the response, unless the\
    \ proxy always wants to\n         request that push notifications are sent to\
    \ the UA in order to\n         trigger the UA to send a binding-refresh REGISTER\
    \ request.\n"
- title: 5.6.1.2.  Query Network PNS Capabilities
  contents:
  - "5.6.1.2.  Query Network PNS Capabilities\n   This section describes the SIP proxy\
    \ procedures when a SIP UA queries\n   about the push-notification support in\
    \ the SIP network\n   (Section 4.1.5).\n   The procedures in this section apply\
    \ when the REGISTER request\n   contains a 'pn-provider' SIP URI parameter, but\
    \ does not contain a\n   'pn-prid' SIP URI parameter in the Contact header field\
    \ URI of the\n   REGISTER request.\n   When a proxy receives a REGISTER request\
    \ that contains a\n   'pn-provider' SIP URI parameter indicating the type of PNS\
    \ supported\n   by the UA, the proxy MUST perform the following actions:\n   o\
    \  If the proxy supports the type of PNS supported by the UA, the\n      proxy\
    \ MUST indicate support of that type of PNS (Section 5.4) in\n      the REGISTER\
    \ request before it forwards the request towards the\n      registrar.  This will\
    \ inform any other proxies between the proxy\n      and the registrar that the\
    \ proxy supports the type of PNS\n      supported by the UA.\n   o  If the proxy\
    \ does not support the type of PNS supported by the UA,\n      and if the REGISTER\
    \ request contains Feature-Caps header fields\n      indicating support of one\
    \ or more types of PNSs, the proxy\n      forwards the request towards the registrar.\n\
    \   o  If the proxy does not support the type of PNS supported by the UA,\n  \
    \    and if the REGISTER request does not contain Feature-Caps header\n      fields\
    \ indicating support of one or more types of PNSs, the proxy\n      MUST either\
    \ forward the request towards the registrar or send a\n      SIP 555 (Push Notification\
    \ Service Not Supported) response towards\n      the UA.  The proxy MUST NOT send\
    \ a SIP 555 (Push Notification\n      Service Not Supported) response unless it\
    \ knows (by means of local\n      configuration) that no other proxy supports\
    \ any of the types of\n      PNSs supported by the UA.\n   When a proxy receives\
    \ a REGISTER request, and the 'pn-provider' SIP\n   URI parameter does not contain\
    \ a parameter value, the proxy MUST\n   indicate support of each type of PNS supported\
    \ by the proxy before it\n   forwards the request towards the registrar.\n   When\
    \ a proxy receives a 2xx response to the REGISTER request, if the\n   proxy had\
    \ indicated support of one or more types of PNSs in the\n   REGISTER request (see\
    \ above), the proxy MUST indicate support of the\n   same set of types of PNSs\
    \ in the response.  In addition, if the proxy\n   supports the VAPID mechanism\
    \ for one or more types of PNSs, the proxy\n   MUST indicate support of the mechanism\
    \ for those PNSs in the\n   response.\n"
- title: 5.6.2.  Initial Request for Dialog or Standalone Request
  contents:
  - "5.6.2.  Initial Request for Dialog or Standalone Request\n   The procedures in\
    \ this section apply when a SIP proxy has indicated\n   that it will request that\
    \ push notifications are sent to the SIP UA.\n   When the proxy receives a SIP\
    \ request for a new dialog (e.g., a SIP\n   INVITE request) or a standalone SIP\
    \ request (e.g., a SIP MESSAGE\n   request) addressed towards a SIP UA, if the\
    \ Request-URI of the\n   request contains a 'pn-provider', a 'pn-prid', and a\
    \ 'pn-param' (if\n   required for the specific PNS provider) SIP URI parameter,\
    \ the proxy\n   requests that a push notification be sent to the UA using the\n\
    \   information in the 'pn-*' SIP URI parameters.  The proxy then places\n   the\
    \ SIP request in the SIP Request Push Bucket.  The push\n   notification will\
    \ trigger the UA to send a binding-refresh REGISTER\n   request that the proxy\
    \ will process as described in Section 5.6.1.\n   In addition, the proxy MUST\
    \ store the Contact URI of the REGISTER\n   request during the lifetime of the\
    \ REGISTER transaction.\n   NOTE: If the proxy receives a SIP request that does\
    \ not contain the\n   'pn-*' SIP URI parameters listed above, the proxy processing\
    \ of the\n   request is based on local policy.  If the proxy also serves requests\n\
    \   for UAs that do not use the SIP push mechanism, the proxy can forward\n  \
    \ the request towards the UA.  Otherwise, the proxy can reject the\n   request.\n\
    \   When the proxy receives a 2xx response to the REGISTER request, the\n   proxy\
    \ performs the following actions:\n   o  The proxy processes the REGISTER response\
    \ as described in\n      Section 5.6.1.\n   o  The proxy checks whether the SIP\
    \ Request Push Bucket contains a\n      SIP request associated with the REGISTER\
    \ transaction by comparing\n      (Section 5.3) the Contact header field URI in\
    \ the REGISTER\n      response with the Request-URIs of the SIP requests in the\
    \ bucket.\n      If there is a match, the proxy MUST remove the SIP request from\n\
    \      the bucket and forward it towards the UA.\n   The reason the proxy needs\
    \ to wait for the REGISTER response before\n   forwarding a SIP request towards\
    \ a UA is to make sure that the\n   REGISTER request has been accepted by the\
    \ registrar, and that the UA\n   that initiated the REGISTER request is authorized\
    \ to receive messages\n   for the Request-URI.\n   If the proxy receives a non-2xx\
    \ response to the REGISTER request, the\n   proxy compares the Contact URI stored\
    \ from the REGISTER request (see\n   above) with the Request-URIs of the SIP requests\
    \ in the SIP Request\n   Push Bucket.  If there is a match, the proxy SHOULD remove\
    \ the\n   associated request from the bucket and send an error response to the\n\
    \   request.  It is RECOMMENDED that the proxy sends either a 404 (Not\n   Found)\
    \ response or a 480 (Temporarily Unavailable) response to the\n   SIP request,\
    \ but other response codes can be used as well.  However,\n   if the REGISTER\
    \ response is expected to trigger a new REGISTER\n   request from the UA (e.g.,\
    \ if the registrar is requesting the UA to\n   perform authentication), the proxy\
    \ MAY keep the SIP request in the\n   bucket.\n   If the push notification request\
    \ fails (see PNS-specific\n   documentation for details), the proxy MUST remove\
    \ the SIP request\n   from the bucket and send an error response to the SIP request.\
    \  It is\n   RECOMMENDED that the proxy sends either a 404 (Not Found) response\
    \ or\n   a 480 (Temporarily Unavailable) response, but other response codes\n\
    \   can be used as well.\n   After the proxy has requested that a push notification\
    \ be sent to a\n   UA, if the proxy does not receive a REGISTER response with\
    \ a Contact\n   URI that matches the Request-URI of the SIP request before the\
    \ Bucket\n   Timer (Section 5.2) associated with the SIP request times out, the\n\
    \   proxy MUST remove the SIP request from the SIP Request Push Bucket\n   (Section\
    \ 5.2) and send a 480 (Temporarily Unavailable) response.  The\n   Bucket Timer\
    \ time-out value is set based on local policy, taking the\n   guidelines below\
    \ into consideration.\n   As discussed in [RFC4320] and [RFC4321], non-INVITE\
    \ transactions must\n   complete immediately or risk losing a race, which results\
    \ in stress\n   on intermediaries and state misalignment at the endpoints.  The\n\
    \   mechanism defined in this document inherently delays the final\n   response\
    \ to any non-INVITE request that requires a push notification.\n   In particular,\
    \ if the proxy forwards the SIP request towards the SIP\n   UA, the SIP UA accepts\
    \ the request, but the transaction times out at\n   the sender before it receives\
    \ the successful response, this will\n   cause state misalignment between the\
    \ endpoints (the sender considers\n   the transaction a failure, while the receiver\
    \ considers the\n   transaction a success).  The SIP proxy needs to take this\
    \ into\n   account when it sets the value of the Bucket Timer associated with\n\
    \   the transaction, to make sure that the error response (triggered by a\n  \
    \ Bucket Timer time out) reaches the sender before the transaction\n   times out.\
    \  If the accumulated delay of this mechanism combined with\n   any other mechanisms\
    \ in the path of processing the non-INVITE\n   transaction cannot be kept short,\
    \ this mechanism should not be used.\n   For networks encountering such conditions,\
    \ an alternative (left for\n   possible future work) would be for the proxy to\
    \ immediately return a\n   new error code meaning \"wait at least the number of\
    \ seconds specified\n   in this response and retry your request\" before initiating\
    \ the push\n   notification.\n   NOTE: While the work on this document was ongoing,\
    \ implementation\n   test results showed that the time it takes for a proxy to\
    \ receive the\n   REGISTER request, from when the proxy has requested a push\n\
    \   notification, is typically around 2 seconds.  However, the time might\n  \
    \ vary depending on the characteristics and load of the SIP network and\n   the\
    \ PNS.\n   In addition to the procedures described above, there are two cases\n\
    \   where a proxy, as an optimization, can forward a SIP request towards\n   a\
    \ UA without either waiting for a 2xx response to a REGISTER request\n   or requesting\
    \ that a push notification be sent to the UA:\n   o  If the proxy is able to authenticate\
    \ the sender of the REGISTER\n      request and verify that it is allowed by authorization\
    \ policy, the\n      proxy does not need to wait for the 2xx response before it\n\
    \      forwards the SIP request towards the UA.  In such cases, the proxy\n  \
    \    will use the Contact URI of the REGISTER request when comparing it\n    \
    \  against the Request-URIs of the SIP requests in the SIP Request\n      Push\
    \ Bucket.\n   o  If the proxy has knowledge that the UA is awake, and that the\
    \ UA\n      is able to receive the SIP request without first sending a\n     \
    \ binding-refresh REGISTER request, the proxy does not need to\n      request\
    \ that a push notification be sent to the UA (the UA will\n      not send a binding-refresh\
    \ REGISTER request) before it forwards\n      the SIP request towards the UA.\
    \  The mechanisms for getting such\n      knowledge might be dependent on implementation\
    \ or deployment\n      architecture, and are outside the scope of this document.\n\
    \   Some PNS providers allow payload in the push notifications.  This\n   specification\
    \ does not define usage of such payload (in addition to\n   any payload that might\
    \ be required by the PNS itself).\n"
- title: 6.  Support of Long-Lived SIP Dialogs
  contents:
  - "6.  Support of Long-Lived SIP Dialogs\n   Some SIP dialogs might have a long\
    \ lifetime with little activity.\n   For example, when the SIP event notification\
    \ mechanism [RFC6665] is\n   used, there might be a long period between the sending\
    \ of mid-dialog\n   requests.  Because of this, a SIP UA may be suspended and\
    \ may need to\n   be awakened in order to be able to receive mid-dialog requests.\n\
    \   SIP requests for a new dialog and standalone SIP requests addressed\n   towards\
    \ a UA with 'pn-*' SIP URI parameters allow the proxy to\n   request that a push\
    \ notification be sent to the UA (Section 5.6.2).\n   However, 'pn-*' SIP URI\
    \ parameters will not be present in mid-dialog\n   requests addressed towards\
    \ the UA.  Instead, the proxy needs to\n   support a mechanism to store the information\
    \ needed to request that a\n   push notification be sent to the UA, and to be\
    \ able to retrieve that\n   information when it receives a mid-dialog request\
    \ addressed towards\n   the UA.  This section defines such a mechanism.  The SIP\
    \ UA and SIP\n   proxy procedures in this section are applied in addition to the\n\
    \   generic procedures defined in this specification.\n     +--------+      +---------+\
    \        +-----------+    +-------------+\n     |        |      |         |  \
    \      |           |    | SIP         |\n     | SIP UA |      | Push    |    \
    \    | SIP Proxy |    | Registrar / |\n     |        |      | Service |      \
    \  |           |    | Home Proxy  |\n     +--------+      +---------+        +-----------+\
    \    +-------------+\n         |                 |                  |        \
    \           |\n         | PNS Register    |                  |               \
    \    |\n         |---------------->|                  |                   |\n\
    \         |                 |                  |                   |\n       \
    \  | PRID            |                  |                   |\n         |<----------------|\
    \                  |                   |\n         |                 |       \
    \           |                   |\n         | SIP REGISTER (PRID)            \
    \    |                   |\n         |===================================>|  \
    \                 |\n         |                 |                  |SIP REGISTER\
    \ (PRID)|\n         |                 |                  |==================>|\n\
    \         |                 |                  |                   |\n       \
    \  |                 |      +-----------------------+       |\n         |    \
    \             |      | Store PRID (key=PURR) |       |\n         |           \
    \      |      +-----------------------+       |\n         |                 |\
    \                  |                   |\n         |                 |       \
    \           | SIP 200 OK        |\n         |                 |              \
    \    |<==================|\n         | SIP 200 OK (PURR)                  |  \
    \                 |\n         |<===================================|         \
    \          |\n         |                 |                  |                \
    \   |\n         |                 |                  |                   |\n \
    \        | SIP INVITE (PURR)                  |                   |\n        \
    \ |===================================>|                   |\n         |     \
    \            |                  |SIP INVITE (PURR)  |\n         |            \
    \     |                  |==================>|\n         |                 | \
    \                 |                   |\n         |                 |        \
    \          | SIP 200 OK        |\n         |                 |               \
    \   |<==================|\n         | SIP 200 OK      |                  |   \
    \                |\n         |<===================================|          \
    \         |\n         |                 |                  |                 \
    \  |\n         |                 |                  |                   |\n  \
    \       |                 |                  |                   |\n         |\
    \                 |                  |SIP UPDATE (PURR)  |\n         |       \
    \          |                  |<==================|\n         |              \
    \   |                  |                   |\n         |                 |   \
    \   +-----------------------+       |\n         |                 |      | Fetch\
    \ PRID (key=PURR) |       |\n         |                 |      +-----------------------+\
    \       |\n         |                 |                  |                   |\n\
    \         |                 |Push Request (PRID)                   |\n       \
    \  |                 |<-----------------|                   |\n         |Push\
    \ Message (PRID)                 |                   |\n         |<----------------|\
    \                  |                   |\n         |                 |       \
    \           |                   |\n         | SIP REGISTER (PRID)            \
    \    |                   |\n         |===================================>|  \
    \                 |\n         |                 |                  |SIP REGISTER\
    \ (PRID)|\n         |                 |                  |==================>|\n\
    \         |                 |                  |                   |\n       \
    \  |                 |                  | SIP 200 OK        |\n         |    \
    \             |                  |<==================|\n         | SIP 200 OK\
    \ (PURR)                  |                   |\n         |<===================================|\
    \                   |\n         |                 |                  |       \
    \            |\n         | SIP UPDATE      |                  |              \
    \     |\n         |<===================================|                   |\n\
    \         |                 |                  |                   |\n       \
    \  ------- Push Notification API\n         ======= SIP\n                 Figure\
    \ 4: SIP Push Long-Lived Dialog Flow\n"
- title: 6.1.  SIP UA Behavior
  contents:
  - '6.1.  SIP UA Behavior

    '
- title: 6.1.1.  Initial Request for Dialog
  contents:
  - "6.1.1.  Initial Request for Dialog\n   If the UA is willing to receive push notifications\
    \ when a proxy\n   receives a mid-dialog request addressed towards the UA, the\
    \ UA MUST\n   insert a 'pn-purr' SIP URI parameter (Section 6.2.1) in the Contact\n\
    \   header field URI of the initial request for a dialog or the 2xx\n   response\
    \ to such requests.  The UA MUST insert a parameter value\n   identical to the\
    \ last 'sip.pnspurr' feature-capability indicator\n   (Section 6.2.1) that it\
    \ received in a REGISTER response.  If the UA\n   has not received a 'sip.pnspurr'\
    \ feature-capability indicator, the UA\n   MUST NOT insert a 'pn-purr' SIP URI\
    \ parameter in a request or\n   response.\n   The UA makes the decision to receive\
    \ push notifications triggered by\n   incoming mid-dialog requests based on local\
    \ policy.  Such policy\n   might be based on the type of SIP dialog, the type\
    \ of media (if any)\n   negotiated for the dialog [RFC3264], etc.\n   NOTE: As\
    \ the 'pn-purr' SIP URI parameter only applies to a given\n   dialog, the UA needs\
    \ to insert a 'pn-purr' parameter in the Contact\n   header field URI of the request\
    \ or response for each dialog in which\n   the UA is willing to receive push notifications\
    \ triggered by incoming\n   mid-dialog requests.\n"
- title: 6.2.  SIP Proxy Behavior
  contents:
  - '6.2.  SIP Proxy Behavior

    '
- title: 6.2.1.  REGISTER
  contents:
  - "6.2.1.  REGISTER\n   If the proxy supports requesting push notifications triggered\
    \ by mid-\n   dialog requests being sent to the registered UA, the proxy MUST\
    \ store\n   the information (the 'pn-*' SIP URI parameters) needed to request\n\
    \   that push notifications are sent to the UA when a proxy receives an\n   initial\
    \ REGISTER request for a binding from the UA.  In addition, the\n   proxy MUST\
    \ generate a unique (within the context of the proxy) value,\n   referred to as\
    \ the PURR (Proxy Unique Registration Reference), that\n   can be used as a key\
    \ to retrieve the information.\n   In order to prevent client fingerprinting,\
    \ the proxy MUST\n   periodically generate a new PURR value (even if 'pn-*'parameters\
    \ did\n   not change).  However, as long as there are ongoing dialogs\n   associated\
    \ with the old value, the proxy MUST store it so that it can\n   request that\
    \ push notifications are sent to the UA when it receives a\n   mid-dialog request\
    \ addressed towards the UA.  In addition, the PURR\n   value MUST be generated\
    \ in such a way so that it is unforgeable,\n   anonymous, and unlinkable to entities\
    \ other than the proxy.  It must\n   not be possible for an attacker to generate\
    \ a valid PURR, to\n   associate a PURR with a specific user, or to determine\
    \ when two PURRs\n   correspond to the same user.  It can be generated, e.g.,\
    \ by utilizing\n   a cryptographically secure random function with an appropriately\n\
    \   large output size.\n   Whenever the proxy receives a 2xx response to a REGISTER\
    \ request, the\n   proxy MUST insert a 'sip.pnspurr' feature-capability indicator\
    \ with\n   the latest PURR value (see above) in the response.\n"
- title: 6.2.2.  Initial Request for Dialog
  contents:
  - "6.2.2.  Initial Request for Dialog\n   When a proxy receives an initial request\
    \ for a dialog from a UA that\n   contains a 'pn-purr' SIP URI parameter in the\
    \ Contact header field\n   URI with a PURR value that the proxy has generated\
    \ (Section 6.2.1),\n   the proxy MUST add a Record-Route header to the request\
    \ to insert\n   itself in the dialog route [RFC3261] before forwarding the request.\n\
    \   When the proxy receives an initial request for a dialog addressed\n   towards\
    \ the UA, and the proxy has generated a PURR value associated\n   with the 'pn-*'\
    \ parameters inserted in the SIP URI of the request\n   (Section 6.2.2), the proxy\
    \ MUST add a Record-Route header to the\n   request to insert itself in the dialog\
    \ route [RFC3261] before\n   forwarding the request.\n"
- title: 6.2.3.  Mid-dialog Request
  contents:
  - "6.2.3.  Mid-dialog Request\n   When the proxy receives a mid-dialog SIP request\
    \ addressed towards\n   the UA that contains a 'pn-purr' SIP URI parameter, and\
    \ the proxy is\n   able to retrieve the stored information needed to request that\
    \ a push\n   notification be sent to the UA (Section 6.2.1), the proxy MUST place\n\
    \   the SIP request in the SIP Request Push Bucket and request that a\n   push\
    \ notification be sent to the UA.\n   NOTE: The 'pn-purr' SIP URI parameter will\
    \ either be carried in the\n   Request-URI or in a Route header field [RFC3261]\
    \ of the SIP request\n   depending on how the route set [RFC3261] of the mid-dialog\
    \ SIP\n   request has been constructed.\n   When the proxy receives a 2xx response\
    \ to a REGISTER request, the\n   proxy checks whether the SIP Request Push Bucket\
    \ contains a mid-\n   dialog SIP request associated with the REGISTER transaction.\
    \  If the\n   bucket contains such a request, the proxy MUST remove the SIP request\n\
    \   from the SIP Request Push Bucket and forward it towards the UA.\n   Note that\
    \ the proxy does not perform a URI comparison (Section 5.3)\n   when processing\
    \ mid-dialog requests, as a mid-dialog request will not\n   contain the 'pn-prid',\
    \ 'pn-provider', and 'pn-param' SIP URI\n   parameters.  The proxy only checks\
    \ for a mid-dialog request that\n   contains the PURR value associated with the\
    \ REGISTER 2xx response.\n   As described in Section 5.6.2, while waiting for\
    \ the push\n   notification request to succeed, and then for the associated REGISTER\n\
    \   request and 2xx response, the proxy needs to take into consideration\n   that\
    \ the transaction associated with the mid-dialog request will\n   eventually time\
    \ out at the sender of the request (User Agent Client),\n   and the sender will\
    \ consider the transaction a failure.\n   When a proxy sends an error response\
    \ to a mid-dialog request (e.g.,\n   due to a transaction time out), the proxy\
    \ SHOULD select a response\n   code that only impacts the transaction associated\
    \ with the request\n   [RFC5079].\n"
- title: 7.  Support of SIP Replaces
  contents:
  - "7.  Support of SIP Replaces\n   [RFC3891] defines a mechanism that allows a SIP\
    \ UA to replace a\n   dialog with another dialog.  A UA that wants to replace\
    \ a dialog with\n   another one will send an initial request for the new dialog.\
    \  The\n   Request-URI of the request will contain the Contact header field URI\n\
    \   of the peer.\n   If a SIP proxy wants to be able to request that a push notification\n\
    \   be sent to a UA when it receives an initial request for a dialog that\n  \
    \ replaces an existing dialog, using the mechanism in [RFC3891], the\n   proxy\
    \ and the UA MUST perform the following actions:\n   o  The proxy MUST provide\
    \ a PURR to the UA during registration\n      (Section 6.2.1).\n   o  The UA MUST\
    \ insert a 'pn-purr' SIP URI parameter in the Contact\n      header field URI\
    \ of either the initial request for a dialog or a\n      2xx response to such\
    \ requests (Section 6.1.1).  This includes\n      dialogs replacing other dialogs,\
    \ as those dialogs might also get\n      replaced.\n   o  The proxy MUST apply\
    \ the mechanism defined in Section 6.2.3 to\n      place and retrieve the request\
    \ from the SIP Request Push Bucket.\n   In addition, the operator needs to make\
    \ sure that the initial request\n   for dialogs, addressed towards the UA using\
    \ the contact of the\n   replaced dialog, will be routed to the SIP proxy (in\
    \ order to request\n   that a push notification be sent to the UA).  The procedures\
    \ for\n   doing that are operator-specific and are outside the scope of this\n\
    \   specification.\n"
- title: 8.  Grammar
  contents:
  - '8.  Grammar

    '
- title: 8.1.  555 (Push Notification Service Not Supported) Response Code
  contents:
  - "8.1.  555 (Push Notification Service Not Supported) Response Code\n   The 555\
    \ response code is added to the \"Server-Error\" Status-Code\n   definition. 555\
    \ (Push Notification Service Not Supported) is used to\n   indicate that the server\
    \ does not support the push notification\n   service identified in a 'pn-provider'\
    \ SIP URI parameter.\n   The use of the SIP 555 response code is only defined\
    \ for SIP REGISTER\n   responses.\n"
- title: 8.2.  'sip.pns' Feature-Capability Indicator
  contents:
  - "8.2.  'sip.pns' Feature-Capability Indicator\n   The sip.pns feature-capability\
    \ indicator, when inserted in a Feature-\n   Caps header field of a SIP REGISTER\
    \ request or a SIP 2xx response to\n   a REGISTER request, indicates that the\
    \ entity associated with the\n   indicator supports the SIP push mechanism and\
    \ the type of push\n   notification service indicated by the indicator value.\
    \  The values\n   defined for the 'pn-provider' SIP URI parameter are used as\
    \ indicator\n   values.\n     pns-fc          = \"+sip.pns\" EQUAL LDQUOT pns\
    \ RDQUOT\n     pns             = tag-value\n     tag-value = <tag-value defined\
    \ in [RFC3840]>\n"
- title: 8.3.  'sip.vapid' Feature-Capability Indicator
  contents:
  - "8.3.  'sip.vapid' Feature-Capability Indicator\n   The sip.vapid feature-capability\
    \ indicator, when inserted in a SIP\n   2xx response to a SIP REGISTER request,\
    \ denotes that the entity\n   associated with the indicator supports the Voluntary\
    \ Application\n   Server Identification (VAPID) [RFC8292] mechanism when the entity\n\
    \   requests that a push notification be sent to a SIP UA.  The indicator\n  \
    \ value is a public key identifying the entity that can be used by a\n   SIP UA\
    \ to restrict subscriptions to that entity.\n     vapid-fc          = \"+sip.vapid\"\
    \ EQUAL LDQUOT vapid RDQUOT\n     vapid             = tag-value\n     tag-value\
    \ = <tag-value defined in [RFC3840]>\n"
- title: 8.4.  'sip.pnsreg' Feature-Capability Indicator
  contents:
  - "8.4.  'sip.pnsreg' Feature-Capability Indicator\n   The sip.pnsreg feature-capability\
    \ indicator, when inserted in a SIP\n   2xx response to a SIP REGISTER request,\
    \ denotes that the entity\n   associated with the indicator expects to receive\
    \ binding-refresh\n   REGISTER requests from the SIP UA associated with the binding\
    \ before\n   the binding expires, even if the entity does not request that a push\n\
    \   notification be sent to the SIP UA in order to trigger the binding-\n   refresh\
    \ REGISTER requests.  The indicator value conveys the minimum\n   time (given\
    \ in seconds) prior to the binding expiration when the UA\n   MUST send the REGISTER\
    \ request.\n     pns-fc          = \"+sip.pnsreg\" EQUAL LDQUOT reg RDQUOT\n \
    \    reg             = 1*DIGIT\n     DIGIT = <DIGIT defined in [RFC3261]>\n"
- title: 8.5.  'sip.pnsreg' Media Feature Tag
  contents:
  - "8.5.  'sip.pnsreg' Media Feature Tag\n   The sip.pnsreg media feature tag, when\
    \ inserted in the Contact header\n   field of a SIP REGISTER request, indicates\
    \ that the SIP UA associated\n   with the tag is able to send binding-refresh\
    \ REGISTER requests for\n   the associated binding without being awakened by push\
    \ notifications.\n   The media feature tag has no values.\n     pnsreg-mt    \
    \      = \"+sip.pnsreg\"\n"
- title: 8.6.  'sip.pnspurr' Feature-Capability Indicator
  contents:
  - "8.6.  'sip.pnspurr' Feature-Capability Indicator\n   The sip.pnspurr feature-capability\
    \ indicator, when inserted in a SIP\n   2xx response to a SIP REGISTER request,\
    \ denotes that the entity\n   associated with the indicator will store information\
    \ that can be used\n   to associate a mid-dialog SIP request with the binding\
    \ information in\n   the REGISTER request.\n     pnspurr-fc        = \"+sip.pnspurr\"\
    \ EQUAL LDQUOT pnspurr RDQUOT\n     pnspurr           = tag-value\n     tag-value\
    \ = <tag-value defined in [RFC3840]>\n"
- title: 8.7.  SIP URI Parameters
  contents:
  - "8.7.  SIP URI Parameters\n   This section defines new SIP URI parameters by extending\
    \ the grammar\n   for \"uri-parameter\" as defined in [RFC3261].  The ABNF [RFC5234]\
    \ is\n   as follows:\n     uri-parameter   =/ pn-provider / pn-param / pn-prid\
    \ / pn-purr\n     pn-provider     = \"pn-provider\" [EQUAL pvalue]\n     pn-param\
    \        = \"pn-param\" EQUAL pvalue\n     pn-prid         = \"pn-prid\" EQUAL\
    \ pvalue\n     pn-purr         = \"pn-purr\" EQUAL pvalue\n     pvalue = <pvalue\
    \ defined in [RFC3261]>\n     EQUAL = <EQUAL defined in [RFC3261]>\n   The format\
    \ and semantics of pn-prid and pn-param are specific to the\n   pn-provider value.\n\
    \   Parameter value characters that are not part of pvalue need to be\n   escaped,\
    \ as defined in RFC 3261.\n"
- title: 9.  PNS Registration Requirements
  contents:
  - "9.  PNS Registration Requirements\n   When a new value is registered to the PNS\
    \ subregistry, a reference to\n   a specification that describes the usage of\
    \ the PNS associated with\n   the value is provided.  That specification MUST\
    \ contain the following\n   information:\n   o  The value of the 'pn-provider'\
    \ SIP URI parameter.\n   o  How the 'pn-prid' SIP URI parameter value is retrieved\
    \ and set by\n      the SIP UA.\n   o  How the 'pn-param' SIP URI parameter (if\
    \ required for the specific\n      PNS provider) value is retrieved and set by\
    \ the SIP UA.\n"
- title: 10.  'pn-provider', 'pn-param', and 'pn-prid' URI Parameters for Apple
  contents:
  - "10.  'pn-provider', 'pn-param', and 'pn-prid' URI Parameters for Apple\n    \
    \ Push Notification service\n   When the Apple Push Notification service (APNs)\
    \ is used, the\n   PNS-related SIP URI parameters are set as described below.\n\
    \   For detailed information about the parameter values, see\n   <https://developer.apple.com/library/archive/documentation/\n\
    \   NetworkingInternet/Conceptual/RemoteNotificationsPG/\n   CommunicatingwithAPNs.html>\
    \ [pns-apns].\n   The value of the 'pn-provider' URI parameter is \"apns\".\n\
    \   Example: pn-provider=apns\n   The value of the 'pn-param' URI parameter is\
    \ a string that is\n   composed of two values separated by a period (.): Team\
    \ ID and Topic.\n   The Team ID is provided by Apple and is unique to a development\
    \ team.\n   The Topic consists of the Bundle ID, which uniquely identifies an\n\
    \   application, and a service value that identifies a service associated\n  \
    \ with the application, separated by a period (.).  For Voice over IP\n   (VoIP)\
    \ applications, the service value is \"voip\".\n   Example: pn-param=DEF123GHIJ.com.example.yourexampleapp.voip\n\
    \   NOTE: The Bundle ID might contain one or more periods (.).  Hence,\n   within\
    \ the 'pn-param' value, the first period will be separating the\n   Team ID from\
    \ the Topic, and within the Topic, the last period will be\n   separating the\
    \ Bundle ID from the service.\n   The value of the 'pn-prid' URI parameter is\
    \ the device token, which\n   is a unique identifier assigned by Apple to a specific\
    \ app on a\n   specific device.\n   Example: pn-prid=00fc13adff78512\n"
- title: 11.  'pn-provider', 'pn-param', and 'pn-prid' URI Parameters for Google
  contents:
  - "11.  'pn-provider', 'pn-param', and 'pn-prid' URI Parameters for Google\n   \
    \  Firebase Cloud Messaging (FCM) Push Notification Service\n   When Firebase\
    \ Cloud Messaging (FCM) is used, the PNS-related URI\n   parameters are set as\
    \ described below.\n   For detailed information about the parameter values, see\n\
    \   <https://firebase.google.com/docs/cloud-messaging/concept-options>\n   [pns-fcm].\n\
    \   The value of the 'pn-provider' URI parameter is \"fcm\".\n   The value of\
    \ the 'pn-param' URI parameter is the Project ID.\n   The value of the 'pn-prid'\
    \ URI parameter is the Registration token,\n   which is generated by the FCM SDK\
    \ for each client app instance.\n"
- title: 12.  'pn-provider', 'pn-param', and 'pn-prid' URI Parameters for RFC
  contents:
  - "12.  'pn-provider', 'pn-param', and 'pn-prid' URI Parameters for RFC\n     8030\
    \ (Generic Event Delivery Using HTTP Push)\n   When Generic Event Delivery Using\
    \ HTTP Push is used, the PNS-related\n   URI parameters are set as described below.\n\
    \   The value of the 'pn-provider' URI parameter is \"webpush\".\n   The value\
    \ of the 'pn-param' URI parameter MUST NOT be used.\n   The value of the 'pn-prid'\
    \ URI parameter is the push subscription\n   URI.\n   See RFC 8030 [RFC8030] for\
    \ more details.\n   Note that encryption for web push [RFC8291] is not used; therefore,\n\
    \   parameters for message encryption are not defined in this\n   specification.\
    \  Web push permits the sending of a push message\n   without a payload without\
    \ encryption.\n"
- title: 13.  Security Considerations
  contents:
  - "13.  Security Considerations\n   The security considerations for the use and\
    \ operation of any\n   particular PNS (e.g., how users and devices are authenticated\
    \ and\n   authorized) are out of scope for this document.  [RFC8030] documents\n\
    \   the security considerations for the PNS defined in that\n   specification.\
    \  Security considerations for other PNSs are left to\n   their respective specifications.\n\
    \   Typically, the PNS requires the SIP proxy requesting push\n   notifications\
    \ to be authenticated and authorized by the PNS.  In some\n   cases, the PNS also\
    \ requires the SIP application (or the SIP\n   application developer) to be identified\
    \ in order for the application\n   to request push notifications.  Unless the\
    \ PNS authenticates and\n   authorizes the PNS, a malicious endpoint or network\
    \ entity that\n   managed to get access to the parameters transported in the SIP\n\
    \   signaling might be able to request that push notifications are sent\n   to\
    \ a UA.  Such push notifications will impact the battery life of the\n   UA and\
    \ trigger unnecessary SIP traffic.\n   [RFC8292] defines a mechanism that allows\
    \ a proxy to identify itself\n   to a PNS by signing a JSON Web Token (JWT) sent\
    \ to the PNS using a\n   key pair.  The public key serves as an identifier of\
    \ the proxy and\n   can be used by devices to restrict push notifications to the\
    \ proxy\n   associated with the key.\n   Operators MUST ensure that the SIP signaling\
    \ is properly secured,\n   e.g., using encryption, from malicious network entities.\
    \  TLS MUST be\n   used unless the operators know that the signaling is secured\
    \ using\n   some other mechanism that provides strong crypto properties.\n   In\
    \ addition to the information that needs to be exchanged between a\n   device\
    \ and the PNS in order to establish a push notification\n   subscription, the\
    \ mechanism defined in this document does not require\n   any additional information\
    \ to be exchanged between the device and the\n   PNS.\n   The mechanism defined\
    \ in this document does not require a proxy to\n   insert any payload (in addition\
    \ to possible payload used for the PNS\n   itself) when requesting push notifications.\n\
    \   Operators MUST ensure that the PNS-related SIP URI parameters\n   conveyed\
    \ by a user in the Contact URI of a REGISTER request are not\n   sent to other\
    \ users or to non-trusted network entities.  One way to\n   convey contact information\
    \ is by using the SIP event package for\n   registrations mechanism [RFC3680].\
    \  [RFC3680] defines generic\n   security considerations for the SIP event package\
    \ for registrations.\n   As the PNS-related SIP URI parameters conveyed in the\
    \ REGISTER\n   request contain sensitive information, operators that support the\n\
    \   event package MUST ensure that event package subscriptions are\n   properly\
    \ authenticated and authorized, and that the SIP URI\n   parameters are not inserted\
    \ in event notifications sent to other\n   users or to non-trusted network entities.\n"
- title: 14.  IANA Considerations
  contents:
  - '14.  IANA Considerations

    '
- title: 14.1.  SIP URI Parameters
  contents:
  - "14.1.  SIP URI Parameters\n   This section defines new SIP URI Parameters that\
    \ extend the \"SIP/SIPS\n   URI Parameters\" subregistry [RFC3969] under the SIP\
    \ Parameters\n   registry (https://www.iana.org/assignments/sip-parameters).\n"
- title: 14.1.1.  pn-provider
  contents:
  - "14.1.1.  pn-provider\n     Parameter Name: pn-provider\n     Predefined Values:\
    \  No\n     Reference:  RFC 8599\n"
- title: 14.1.2.  pn-param
  contents:
  - "14.1.2.  pn-param\n     Parameter Name: pn-param\n     Predefined Values:  No\n\
    \     Reference:  RFC 8599\n"
- title: 14.1.3.  pn-prid
  contents:
  - "14.1.3.  pn-prid\n     Parameter Name: pn-prid\n     Predefined Values:  No\n\
    \     Reference:  RFC 8599\n"
- title: 14.1.4.  pn-purr
  contents:
  - "14.1.4.  pn-purr\n     Parameter Name: pn-purr\n     Predefined Values:  No\n\
    \     Reference:  RFC 8599\n"
- title: 14.2.  SIP Response Codes
  contents:
  - '14.2.  SIP Response Codes

    '
- title: 14.2.1.  555 (Push Notification Service Not Supported)
  contents:
  - "14.2.1.  555 (Push Notification Service Not Supported)\n   This section defines\
    \ a new SIP response code that extends the\n   \"Response Codes\" subregistry\
    \ [RFC3261] under the SIP Parameters\n   registry (https://www.iana.org/assignments/sip-parameters).\n\
    \      Response Code Number:   555\n      Default Reason Phrase:  Push Notification\
    \ Service Not Supported\n"
- title: 14.3.  SIP Global Feature-Capability Indicator
  contents:
  - '14.3.  SIP Global Feature-Capability Indicator

    '
- title: 14.3.1.  sip.pns
  contents:
  - "14.3.1.  sip.pns\n   This section defines a new feature-capability indicator\
    \ that extends\n   the \"SIP Feature-Capability Indicator Registration Tree\"\
    \ subregistry\n   [RFC6809] under the SIP Parameters registry\n   (https://www.iana.org/assignments/sip-parameters).\n\
    \    Name: sip.pns\n    Description: This feature-capability indicator, when inserted\
    \ in a\n        Feature-Caps header field of a SIP REGISTER request or a SIP 2xx\n\
    \        response to a REGISTER request, denotes that the entity\n        associated\
    \ with the indicator supports the SIP push mechanism\n        and the type of\
    \ push notification service conveyed by the\n        indicator value.\n    Reference:\
    \ RFC 8599\n    Contact: IESG (iesg@ietf.org)\n"
- title: 14.3.2.  sip.vapid
  contents:
  - "14.3.2.  sip.vapid\n   This section defines a new feature-capability indicator\
    \ that extends\n   the \"SIP Feature-Capability Indicator Registration Tree\"\
    \ subregistry\n   [RFC6809] under the SIP Parameters registry\n   (https://www.iana.org/assignments/sip-parameters).\n\
    \     Name: sip.vapid\n     Description: This feature-capability indicator, when\
    \ inserted in a\n          SIP 2xx response to a SIP REGISTER request, denotes\
    \ that the\n          entity associated with the indicator supports the Voluntary\n\
    \          Application Server Identification (VAPID) mechanism when the\n    \
    \      entity requests that a push notification be sent to a SIP UA.\n       \
    \   The indicator value is a public key identifying the entity,\n          which\
    \ can be used by a SIP UA to restrict subscriptions to\n          that entity.\n\
    \     Reference: RFC 8599\n     Contact: IESG (iesg@ietf.org)\n"
- title: 14.3.3.  sip.pnsreg
  contents:
  - "14.3.3.  sip.pnsreg\n   This section defines a new feature-capability indicator\
    \ that extends\n   the \"SIP Feature-Capability Indicator Registration Tree\"\
    \ subregistry\n   [RFC6809] under the SIP Parameters registry\n   (https://www.iana.org/assignments/sip-parameters).\n\
    \    Name: sip.pnsreg\n    Description: This feature-capability indicator, when\
    \ inserted in a\n         SIP 2xx response to a SIP REGISTER request, denotes\
    \ that the\n         entity associated with the indicator expects to receive\n\
    \         binding-refresh REGISTER requests for the binding from the SIP\n   \
    \      UA associated with the binding before the binding expires, even\n     \
    \    if the entity does not request that a push notification be sent\n       \
    \  to the SIP UA in order to trigger the binding-refresh REGISTER\n         requests.\
    \  The indicator value conveys the minimum time\n         (given in seconds) prior\
    \ to the binding expiration when the UA\n         MUST send the REGISTER request.\n\
    \    Reference: RFC 8599\n    Contact: IESG (iesg@ietf.org)\n"
- title: 14.3.4.  sip.pnspurr
  contents:
  - "14.3.4.  sip.pnspurr\n   This section defines a new feature-capability indicator\
    \ that extends\n   the \"SIP Feature-Capability Indicator Registration Tree\"\
    \ subregistry\n   [RFC6809] under the SIP Parameters registry\n   (https://www.iana.org/assignments/sip-parameters).\n\
    \    Name: sip.pnspurr\n    Description: This feature-capability indicator, when\
    \ inserted in a\n         SIP 2xx response to a SIP REGISTER request, conveys\
    \ that\n         the entity associated with the indicator will store information\n\
    \         that can be used to associate a mid-dialog SIP request with the\n  \
    \       binding information in the REGISTER request.  The indicator\n        \
    \ value is an identifier that can be used as a key to retrieve\n         the binding\
    \ information.\n    Reference: RFC 8599\n    Contact: IESG (iesg@ietf.org)\n"
- title: 14.4.  SIP Media Feature Tag
  contents:
  - '14.4.  SIP Media Feature Tag

    '
- title: 14.4.1.  sip.pnsreg
  contents:
  - "14.4.1.  sip.pnsreg\n   This section defines a new media feature tag that extends\
    \ the \"SIP\n   Media Feature Tag Registration Tree\" subregistry [RFC3840] under\
    \ the\n   \"Media Feature Tags\" registry (https://www.iana.org/assignments/\n\
    \   media-feature-tags).\n     Media feature tag name: sip.pnsreg\n     Summary\
    \ of the media feature indicated by this feature tag: This\n          media feature\
    \ tag, when inserted in the Contact header field\n          of a SIP REGISTER\
    \ request, conveys that the SIP UA\n          associated with the tag is able\
    \ to send binding-refresh\n          REGISTER requests associated with the registration\
    \ without\n          being awakened by push notifications.\n     Values appropriate\
    \ for use with this feature tag: none\n     Related standards or documents: RFC\
    \ 8599\n     Security considerations: This media feature tag does not introduce\n\
    \        new security considerations, as it simply indicates support for\n   \
    \     a basic SIP feature.  If an attacker manages to remove the media\n     \
    \   feature tag, push notifications will not be requested to be sent\n       \
    \ to the client.\n     Contact: IESG (iesg@ietf.org)\n"
- title: 14.5.  PNS Subregistry Establishment
  contents:
  - "14.5.  PNS Subregistry Establishment\n   This section creates a new subregistry,\
    \ \"PNS\", under the SIP\n   Parameters registry (https://www.iana.org/assignments/\n\
    \   sip-parameters).\n   The purpose of the subregistry is to register SIP URI\
    \ 'pn-provider'\n   values.\n   When a SIP URI 'pn-provider' value is registered\
    \ in the subregistry,\n   it needs to meet the \"Specification Required\" policies\
    \ defined in\n   [RFC8126].\n   This subregistry is defined as a table that contains\
    \ the following\n   three columns:\n     Value:        The token under registration\n\
    \     Description:  The name of the Push Notification Service (PNS)\n     Document:\
    \     A reference to the document defining the registration\n   This specification\
    \ registers the following values:\n     Value         Description            \
    \                 Document\n     -------       --------------------------------------\
    \  ----------\n     apns          Apple Push Notification service         RFC\
    \ 8599\n     fcm           Firebase Cloud Messaging                RFC 8599\n\
    \     webpush       Generic Event Delivery Using HTTP Push  RFC 8599\n"
- title: 15.  References
  contents:
  - '15.  References

    '
- title: 15.1.  Normative References
  contents:
  - "15.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <https://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n    \
    \          A., Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler,\
    \ \"SIP: Session Initiation Protocol\", RFC 3261,\n              DOI 10.17487/RFC3261,\
    \ June 2002,\n              <https://www.rfc-editor.org/info/rfc3261>.\n   [RFC3840]\
    \  Rosenberg, J., Schulzrinne, H., and P. Kyzivat,\n              \"Indicating\
    \ User Agent Capabilities in the Session\n              Initiation Protocol (SIP)\"\
    , RFC 3840,\n              DOI 10.17487/RFC3840, August 2004,\n              <https://www.rfc-editor.org/info/rfc3840>.\n\
    \   [RFC3891]  Mahy, R., Biggs, B., and R. Dean, \"The Session Initiation\n  \
    \            Protocol (SIP) \"Replaces\" Header\", RFC 3891,\n              DOI\
    \ 10.17487/RFC3891, September 2004,\n              <https://www.rfc-editor.org/info/rfc3891>.\n\
    \   [RFC3969]  Camarillo, G., \"The Internet Assigned Number Authority\n     \
    \         (IANA) Uniform Resource Identifier (URI) Parameter\n              Registry\
    \ for the Session Initiation Protocol (SIP)\",\n              BCP 99, RFC 3969,\
    \ DOI 10.17487/RFC3969, December 2004,\n              <https://www.rfc-editor.org/info/rfc3969>.\n\
    \   [RFC5079]  Rosenberg, J., \"Rejecting Anonymous Requests in the\n        \
    \      Session Initiation Protocol (SIP)\", RFC 5079,\n              DOI 10.17487/RFC5079,\
    \ December 2007,\n              <https://www.rfc-editor.org/info/rfc5079>.\n \
    \  [RFC5234]  Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n  \
    \            Specifications: ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234,\
    \ January 2008,\n              <https://www.rfc-editor.org/info/rfc5234>.\n  \
    \ [RFC6809]  Holmberg, C., Sedlacek, I., and H. Kaplan, \"Mechanism to\n     \
    \         Indicate Support of Features and Capabilities in the\n             \
    \ Session Initiation Protocol (SIP)\", RFC 6809,\n              DOI 10.17487/RFC6809,\
    \ November 2012,\n              <https://www.rfc-editor.org/info/rfc6809>.\n \
    \  [RFC8030]  Thomson, M., Damaggio, E., and B. Raymor, Ed., \"Generic\n     \
    \         Event Delivery Using HTTP Push\", RFC 8030,\n              DOI 10.17487/RFC8030,\
    \ December 2016,\n              <https://www.rfc-editor.org/info/rfc8030>.\n \
    \  [RFC8174]  Leiba, B., \"Ambiguity of Uppercase vs Lowercase in RFC\n      \
    \        2119 Key Words\", BCP 14, RFC 8174, DOI 10.17487/RFC8174,\n         \
    \     May 2017, <https://www.rfc-editor.org/info/rfc8174>.\n   [RFC8292]  Thomson,\
    \ M. and P. Beverloo, \"Voluntary Application Server\n              Identification\
    \ (VAPID) for Web Push\", RFC 8292,\n              DOI 10.17487/RFC8292, November\
    \ 2017,\n              <https://www.rfc-editor.org/info/rfc8292>.\n   [pns-apns]\
    \ Apple Inc., \"Local and Remote Notification Programming\n              Guide:\
    \ Communicating with APNs\", <https://developer.apple.\n              com/library/archive/documentation/NetworkingInternet/Conce\n\
    \              ptual/RemoteNotificationsPG/CommunicatingwithAPNs.html>.\n   [pns-fcm]\
    \  Google Inc., \"Firebase Cloud Messaging\",\n              <https://firebase.google.com/docs/cloud-messaging/\n\
    \              concept-options>.\n"
- title: 15.2.  Informative References
  contents:
  - "15.2.  Informative References\n   [RFC3264]  Rosenberg, J. and H. Schulzrinne,\
    \ \"An Offer/Answer Model\n              with Session Description Protocol (SDP)\"\
    , RFC 3264,\n              DOI 10.17487/RFC3264, June 2002,\n              <https://www.rfc-editor.org/info/rfc3264>.\n\
    \   [RFC3680]  Rosenberg, J., \"A Session Initiation Protocol (SIP) Event\n  \
    \            Package for Registrations\", RFC 3680,\n              DOI 10.17487/RFC3680,\
    \ March 2004,\n              <https://www.rfc-editor.org/info/rfc3680>.\n   [RFC4320]\
    \  Sparks, R., \"Actions Addressing Identified Issues with the\n             \
    \ Session Initiation Protocol's (SIP) Non-INVITE\n              Transaction\"\
    , RFC 4320, DOI 10.17487/RFC4320, January\n              2006, <https://www.rfc-editor.org/info/rfc4320>.\n\
    \   [RFC4321]  Sparks, R., \"Problems Identified Associated with the\n       \
    \       Session Initiation Protocol's (SIP) Non-INVITE\n              Transaction\"\
    , RFC 4321, DOI 10.17487/RFC4321, January\n              2006, <https://www.rfc-editor.org/info/rfc4321>.\n\
    \   [RFC5626]  Jennings, C., Ed., Mahy, R., Ed., and F. Audet, Ed.,\n        \
    \      \"Managing Client-Initiated Connections in the Session\n              Initiation\
    \ Protocol (SIP)\", RFC 5626,\n              DOI 10.17487/RFC5626, October 2009,\n\
    \              <https://www.rfc-editor.org/info/rfc5626>.\n   [RFC6665]  Roach,\
    \ A., \"SIP-Specific Event Notification\", RFC 6665,\n              DOI 10.17487/RFC6665,\
    \ July 2012,\n              <https://www.rfc-editor.org/info/rfc6665>.\n   [RFC8126]\
    \  Cotton, M., Leiba, B., and T. Narten, \"Guidelines for\n              Writing\
    \ an IANA Considerations Section in RFCs\", BCP 26,\n              RFC 8126, DOI\
    \ 10.17487/RFC8126, June 2017,\n              <https://www.rfc-editor.org/info/rfc8126>.\n\
    \   [RFC8291]  Thomson, M., \"Message Encryption for Web Push\", RFC 8291,\n \
    \             DOI 10.17487/RFC8291, November 2017,\n              <https://www.rfc-editor.org/info/rfc8291>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Thanks to Paul Kyzivat, Dale Worley, Ranjit Avasarala, Martin\n\
    \   Thomson, Mikael Klein, Susanna Sjoholm, Kari-Pekka Perttula, Liviu\n   Chircu,\
    \ Roman Shpount, Yehoshua Gev, and Jean Mahoney for reading the\n   text and providing\
    \ useful feedback.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Christer Holmberg\n   Ericsson\n   Hirsalantie 11\n  \
    \ Jorvas  02420\n   Finland\n   Email: christer.holmberg@ericsson.com\n   Michael\
    \ Arnold\n   Metaswitch Networks\n   100 Church Street\n   Enfield  EN2 6BQ\n\
    \   United Kingdom\n   Email: Michael.Arnold@metaswitch.com\n"
