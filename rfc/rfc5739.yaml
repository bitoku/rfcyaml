- title: __initial_text__
  contents:
  - ' IPv6 Configuration in Internet Key Exchange Protocol Version 2 (IKEv2)

    '
- title: Abstract
  contents:
  - "Abstract\n   When Internet Key Exchange Protocol version 2 (IKEv2) is used for\n\
    \   remote VPN access (client to VPN gateway), the gateway assigns the\n   client\
    \ an IP address from the internal network using IKEv2\n   configuration payloads.\
    \  The configuration payloads specified in RFC\n   4306 work well for IPv4 but\
    \ make it difficult to use certain features\n   of IPv6.  This document specifies\
    \ new configuration attributes for\n   IKEv2 that allows the VPN gateway to assign\
    \ IPv6 prefixes to clients,\n   enabling all features of IPv6 to be used with\
    \ the client-gateway\n   \"virtual link\".\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc5739.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction and Problem Statement ..............................4\n\
    \   2. Terminology .....................................................5\n  \
    \ 3. Current Limitations and Goals ...................................6\n    \
    \  3.1. Multiple Prefixes ..........................................6\n      3.2.\
    \ Link-Local Addresses .......................................6\n      3.3. Interface\
    \ Identifier Selection .............................7\n      3.4. Sharing VPN\
    \ Access .........................................7\n      3.5. General Goals\
    \ ..............................................8\n      3.6. Non-Goals ..................................................8\n\
    \      3.7. Additional Information .....................................9\n  \
    \ 4. Solution Details ................................................9\n    \
    \  4.1. Initial Exchanges ..........................................9\n      4.2.\
    \ Reauthentication ..........................................11\n      4.3. Creating\
    \ CHILD_SAs ........................................11\n      4.4. Relationship\
    \ to Neighbor Discovery ........................12\n      4.5. Relationship to\
    \ Existing IKEv2 Payloads ...................13\n   5. Payload Formats ................................................13\n\
    \      5.1. INTERNAL_IP6_LINK Configuration Attribute .................13\n  \
    \    5.2. INTERNAL_IP6_PREFIX Configuration Attribute ...............14\n    \
    \  5.3. LINK_ID Notify Payload ....................................14\n   6. IANA\
    \ Considerations ............................................15\n   7. Security\
    \ Considerations ........................................15\n   8. Acknowledgments\
    \ ................................................15\n   9. References .....................................................16\n\
    \      9.1. Normative References ......................................16\n  \
    \    9.2. Informative References ....................................16\n   Appendix\
    \ A.  Design Rationale (Non-Normative) ...................19\n     A.1.  Link\
    \ Model ................................................20\n     A.2.  Distributing\
    \ Prefix Information ...........................20\n     A.3.  Unique Address\
    \ Allocation .................................21\n     A.4.  Layer 3 Access Control\
    \ ....................................21\n     A.5.  Other Considerations ......................................22\n\
    \     A.6.  Alternative Solution Sketches .............................24\n  \
    \     A.6.1.  Version -00 Sketch ..................................24\n      \
    \ A.6.2.  Router Aggregation Sketch #1 ..........................25\n       A.6.3.\
    \  Router Aggregation Sketch #2 ..........................27\n       A.6.4.  IPv4-Like\
    \ Sketch ....................................28\n       A.6.5.  Sketch Based on\
    \ RFC 3456 ..............................30\n   Appendix B.  Evaluation (Non-Normative)\
    \ .........................31\n"
- title: 1.  Introduction and Problem Statement
  contents:
  - "1.  Introduction and Problem Statement\n   In typical remote access VPN use (client\
    \ to VPN gateway), the client\n   needs an IP address in the network protected\
    \ by the security gateway.\n   IKEv2 includes a feature called \"configuration\
    \ payloads\" that allows\n   the gateway to dynamically assign a temporary address\
    \ to the client\n   [IKEv2].\n   For IPv4, the message exchange would look as\
    \ follows:\n      Client      Gateway\n     --------    ---------\n      HDR(IKE_SA_INIT),\
    \ SAi1, KEi, Ni  -->\n               <--  HDR(IKE_SA_INIT), SAr1, KEr, Nr, [CERTREQ]\n\
    \      HDR(IKE_AUTH),\n      SK { IDi, CERT, [CERTREQ], AUTH, [IDr],\n       \
    \    CP(CFG_REQUEST) =\n              { INTERNAL_IP4_ADDRESS(),\n            \
    \    INTERNAL_IP4_DNS() }, SAi2,\n           TSi = (0, 0-65535, 0.0.0.0-255.255.255.255),\n\
    \           TSr = (0, 0-65535, 0.0.0.0-255.255.255.255) }  -->\n             <--\
    \  HDR(IKE_AUTH),\n                  SK { IDr, CERT, AUTH,\n                 \
    \      CP(CFG_REPLY) =\n                          { INTERNAL_IP4_ADDRESS(192.0.2.234),\n\
    \                            INTERNAL_IP4_DNS(198.51.100.33) },\n            \
    \           SAr2,\n                       TSi = (0, 0-65535, 192.0.2.234-192.0.2.234),\n\
    \                       TSr = (0, 0-65535, 0.0.0.0-255.255.255.255) }\n      \
    \                 Figure 1: IPv4 Configuration\n   The IPv4 case has been implemented\
    \ by various vendors and, in\n   general, works well.  IKEv2 also defines almost\
    \ identical\n   configuration payloads for IPv6:\n      Client      Gateway\n\
    \     --------    ---------\n      HDR(IKE_AUTH),\n      SK { IDi, CERT, [CERTREQ],\
    \ AUTH, [IDr],\n           CP(CFG_REQUEST) =\n              { INTERNAL_IP6_ADDRESS(),\n\
    \                INTERNAL_IP6_DNS() }, SAi2,\n           TSi = (0, 0-65535,\n\
    \                  0:0:0:0:0:0:0:0 -\n                  FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF),\n\
    \           TSr = (0,\n                  0-65535, 0:0:0:0:0:0:0:0 -\n        \
    \          FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF) }  -->\n             <-- \
    \ HDR(IKE_AUTH),\n                  SK { IDr, CERT, AUTH,\n                  \
    \     CP(CFG_REPLY) =\n                          { INTERNAL_IP6_ADDRESS(2001:DB8:0:1:2:3:4:5,\n\
    \                                                 64),\n                     \
    \       INTERNAL_IP6_DNS(2001:DB8:9:8:7:6:5:4) },\n                       SAr2,\n\
    \                       TSi = (0, 0-65535,\n                              2001:DB8:0:1:2:3:4:5\
    \ -\n                              2001:DB8:0:1:2:3:4:5),\n                  \
    \     TSr = (0, 0-65535,\n                              0:0:0:0:0:0:0:0 -\n  \
    \                            FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF) }\n    \
    \                   Figure 2: IPv6 Configuration\n   In other words, IPv6 is basically\
    \ treated as IPv4 with larger\n   addresses.  As noted in [RFC4718], this does\
    \ not fully follow the\n   \"normal IPv6 way of doing things\", and it complicates\
    \ or prevents\n   using certain features of IPv6.  Section 3 describes the limitations\n\
    \   in detail.\n   This document specifies new configuration attributes for IKEv2\
    \ that\n   allows the VPN gateway to assign IPv6 prefixes to clients, enabling\n\
    \   all features of IPv6 to be used with the client-gateway \"virtual\n   link\"\
    .\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [KEYWORDS].\n\
    \   When messages containing IKEv2 payloads are described, optional\n   payloads\
    \ are shown in brackets (for instance, \"[FOO]\"); a plus sign\n   indicates that\
    \ a payload can be repeated one or more times (for\n   instance, \"FOO+\").\n\
    \   This document uses the term \"virtual interface\" when describing how\n  \
    \ the client uses the IPv6 address(es) assigned by the gateway.  While\n   existing\
    \ IPsec documents do not use this term, it is not a new\n   concept.  In order\
    \ to use the address assigned by the VPN gateway,\n   current VPN clients already\
    \ create a local \"virtual interface\", as\n   only addresses assigned to interfaces\
    \ can be used, e.g., as source\n   addresses for TCP connections.  Note that this\
    \ definition of\n   \"interface\" is not necessarily identical with what some\
    \ particular\n   implementations call \"interface\".\n"
- title: 3.  Current Limitations and Goals
  contents:
  - "3.  Current Limitations and Goals\n   This section describes the limitations\
    \ of the current IPv6\n   configuration mechanism and requirements for the new\
    \ solution.\n"
- title: 3.1.  Multiple Prefixes
  contents:
  - "3.1.  Multiple Prefixes\n   In Figure 2, only a single IPv6 address (from a single\
    \ prefix) is\n   assigned.  The specification does allow the client to include\n\
    \   multiple INTERNAL_IP6_ADDRESS attributes in its request, but the\n   gateway\
    \ cannot assign more addresses than the client requested.\n   Multiple prefixes\
    \ are useful for site renumbering, host-based site\n   multihoming [SHIM6], and\
    \ unique local IPv6 addresses [RFC4193].  In\n   all of these cases, the gateway\
    \ has better information on how many\n   different addresses (from different prefixes)\
    \ the client should be\n   assigned.\n   The solution should support assigning\
    \ addresses from multiple\n   prefixes, without requiring the client to know beforehand\
    \ how many\n   prefixes are needed.\n"
- title: 3.2.  Link-Local Addresses
  contents:
  - "3.2.  Link-Local Addresses\n   The IPv6 addressing architecture [IPv6Addr] specifies\
    \ that \"IPv6\n   addresses of all types are assigned to interfaces, not nodes.\
    \ [..]\n   All interfaces are required to have at least one Link-Local unicast\n\
    \   address\".\n   Currently, the virtual interface created by IKEv2 configuration\n\
    \   payloads does not have link-local addresses.  This violates the\n   requirements\
    \ in [IPv6Addr] and prevents the use of protocols that\n   require link-local\
    \ addresses, such as [MLDv2] and [DHCPv6].\n   The solution should assign link-local\
    \ addresses to the virtual\n   interfaces and allow them to be used for protocols\
    \ between the VPN\n   client and gateway.\n"
- title: 3.3.  Interface Identifier Selection
  contents:
  - "3.3.  Interface Identifier Selection\n   In the message exchange shown in Figure\
    \ 2, the gateway chooses the\n   interface ID used by the client.  It is also\
    \ possible for the client\n   to request a specific interface ID; the gateway\
    \ then chooses the\n   prefix part.\n   This approach complicates the use of Cryptographically\
    \ Generated\n   Addresses (CGAs) [CGA].  With CGAs, the interface ID cannot be\n\
    \   calculated before the prefix is known.  The client could first obtain\n  \
    \ a non-CGA address to determine the prefix and then send a separate\n   CFG_REQUEST\
    \ to obtain a CGA address with the same prefix.  However,\n   this approach requires\
    \ that the IKEv2 software component provide an\n   interface to the component\
    \ managing CGAs; an ugly implementation\n   dependency that would be best avoided.\n\
    \   Similar concerns apply to other cases where the client has some\n   interest\
    \ in what interface ID is being used, such as Hash-Based\n   Addresses [HBA] and\
    \ privacy addresses [RFC4941].\n   Without CGAs and HBAs, VPN clients are not\
    \ able to fully use IPv6\n   features such as [SHIM6] or enhanced Mobile IPv6\
    \ route optimization\n   [RFC4866].\n   The solution should allow the VPN client\
    \ to easily obtain several\n   addresses from a given prefix, where the interface\
    \ IDs are selected\n   by the client and may depend on the prefix.\n"
- title: 3.4.  Sharing VPN Access
  contents:
  - "3.4.  Sharing VPN Access\n   Some VPN clients may want to share the VPN connection\
    \ with other\n   devices (e.g., from a cell phone to a laptop or vice versa) via\
    \ some\n   local area network connection (such as Wireless LAN or Bluetooth),\
    \ if\n   allowed by the security policy.\n   Quite obviously, sharing of VPN access\
    \ requires more than one address\n   (unless NAT is used).  However, the current\
    \ model where each address\n   is requested separately is probably complex to\
    \ integrate with a local\n   area network that uses stateless address autoconfiguration\n\
    \   [AUTOCONF].  Thus, obtaining a whole prefix for the VPN client and\n   advertising\
    \ that to the local link (something resembling [NDProxy])\n   would be preferable.\
    \  With DHCPv6 prefix delegation [RFC3633], even\n   [NDProxy] and associated\
    \ multi-link subnet issues would be avoided.\n   The solution should support sharing\
    \ the VPN access over a local area\n   network connection when the other hosts\
    \ are using stateless address\n   autoconfiguration.\n"
- title: 3.5.  General Goals
  contents:
  - "3.5.  General Goals\n   o  The solution should avoid periodic messages over the\
    \ VPN tunnel.\n   o  Reauthentication should work, where the client can start\
    \ a new IKE\n      Security Association (SA) and continue using the same addresses\
    \ as\n      before.\n   o  There should be compatibility with other IPsec uses.\
    \  Configuring\n      a virtual IPv6 link (with addresses assigned in IKEv2) should\
    \ not\n      prevent the same peers from using IPsec/IKEv2 for other uses (with\n\
    \      other addresses).  In particular, the peers may have Security\n      Policy\
    \ Database (SPD) entries and Peer Authorization Database\n      (PAD) Child SA\
    \ Authorization Data entries that are not related to\n      the virtual link;\
    \ when a CHILD_SA is created, it should be\n      unambiguous which entries are\
    \ used.\n   o  There should be compatibility with current IPv6 configuration.\n\
    \      Although the current IPv6 mechanism is not widely implemented, new\n  \
    \    solutions should not preclude its use (e.g., by defining\n      incompatible\
    \ semantics for the existing payloads).\n   o  The solution should have clean\
    \ implementation dependencies.  In\n      particular, it should not require significant\
    \ modifications to the\n      core IPv6 stack (typically part of the operating\
    \ system) or\n      require the IKEv2 implementor to re-implement parts of the\
    \ IPv6\n      stack (e.g., to have access or control to functionality that is\n\
    \      currently not exposed by interfaces of the IPv6 stack).\n   o  Re-use existing\
    \ mechanisms as much as possible, as described in\n      [IPConfig].  Appendix\
    \ A describes the rationale of why this\n      document nevertheless uses IKEv2\
    \ configuration payloads for\n      configuring the addresses.  However, Section\
    \ 4.1 recommends using\n      a DHCPv6 Information-Request message for obtaining\
    \ other\n      configuration information (such as DNS server addresses).\n"
- title: 3.6.  Non-Goals
  contents:
  - "3.6.  Non-Goals\n   Mobile IPv6 already defines how it interacts with IPsec/IKEv2\n\
    \   [RFC4877], and the intent of this document is not to change that\n   interaction\
    \ in any way.\n"
- title: 3.7.  Additional Information
  contents:
  - "3.7.  Additional Information\n   If the VPN client is assigned IPv6 address(es)\
    \ from prefix(es) that\n   are shared with other VPN clients, this results in\
    \ some kind of\n   multi-link subnet.  [Multilink] describes issues associated\
    \ with\n   multi-link subnets and recommends that they be avoided.\n   The original\
    \ 3GPP specifications for IPv6 assigned a single IPv6\n   address to each mobile\
    \ phone, resembling current IKEv2 payloads.\n   [RFC3314] describes the problems\
    \ with this approach and caused 3GPP\n   to change the specifications to assign\
    \ unique /64 prefix(es) for each\n   phone.\n   Due to similar concerns, the IEEE\
    \ 802.16 IPv6 Convergence Sublayer\n   [RFC5121] and Proxy Mobile IPv6 [RFC5213]\
    \ also assign unique\n   prefixes.\n"
- title: 4.  Solution Details
  contents:
  - '4.  Solution Details

    '
- title: 4.1.  Initial Exchanges
  contents:
  - "4.1.  Initial Exchanges\n   During IKE_AUTH, the client sends a new configuration\
    \ attribute,\n   INTERNAL_IP6_LINK, which requests a virtual link to be configured.\n\
    \   The attribute contains the client's interface ID for the link-local\n   address\
    \ (other addresses may use other interface IDs).  Typically,\n   the client would\
    \ also ask for the DHCPv6 server address; this is used\n   only for configuration\
    \ (such as DNS server addresses), not address\n   assignment.\n       CP(CFG_REQUEST)\
    \ =\n          { INTERNAL_IP6_LINK(Client's Link-Local Interface ID)\n       \
    \     INTERNAL_IP6_DHCP() }\n       TSi = (0, 0-65535, 0:0:0:0:0:0:0:0 -\n   \
    \           FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)\n       TSr = (0, 0-65535,\
    \ 0:0:0:0:0:0:0:0 -\n              FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)  -->\n\
    \   If the client has sent the INTERNAL_IP6_LINK configuration attribute,\n  \
    \ the VPN gateway SHOULD ignore any INTERNAL_IP6_ADDRESS configuration\n   attribute\
    \ present in the request.\n   The VPN gateway MUST choose for itself a link-local\
    \ interface\n   identifier different than the client's, i.e., accept the link-local\n\
    \   interface identifier proposed by the client.  In case the VPN gateway\n  \
    \ cannot accept the link-local interface identifier the client\n   proposed, the\
    \ VPN gateway MUST fail the IPv6 address assignment by\n   including a NOTIFY\
    \ payload with the INTERNAL_ADDRESS_FAILURE message.\n   The VPN gateway then\
    \ replies with an INTERNAL_IP6_LINK configuration\n   attribute that contains\
    \ the IKEv2 Link ID (an identifier selected by\n   the VPN gateway, treated as\
    \ an opaque octet string by the client --\n   this will be used for reauthentication\
    \ and CREATE_CHILD_SA messages),\n   the gateway's link-local interface identifier,\
    \ and zero or more\n   INTERNAL_IP6_PREFIX attributes.  The traffic selectors\
    \ proposed by\n   the initiator are also narrowed to contain only the assigned\
    \ prefixes\n   and the client link-local address (FE80::<Client's Interface ID>)\n\
    \   identifier.\n       CP(CFG_REPLY) =\n          { INTERNAL_IP6_LINK(Gateway's\
    \ Link-Local Interface ID,\n                              IKEv2 Link ID)\n   \
    \         INTERNAL_IP6_PREFIX(Prefix1/64),\n            [INTERNAL_IP6_PREFIX(Prefix2/64),...],\n\
    \            INTERNAL_IP6_DHCP(Address) }\n       TSi = ((0, 0-65535,\n      \
    \         FE80::<Client's Interface ID> -\n               FE80::<Client's Interface\
    \ ID>)\n              (0, 0-65535,\n               Prefix1::0 -\n            \
    \   Prefix1::FFFF:FFFF:FFFF:FFFF),\n              [(0, 0-65535,\n            \
    \    Prefix2::0 -\n                Prefix2::FFFF:FFFF:FFFF:FFFF), ...])\n    \
    \   TSr = (0, 0-65535,\n              0:0:0:0:0:0:0:0 -\n              FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)\n\
    \   At this point, the client can configure its link-local address\n   (FE80::<Client's\
    \ Interface ID>) and other non-link-local unicast\n   addresses from the assigned\
    \ prefixes (with any proper interface\n   identifier [IPv6Addr]).  The VPN gateway\
    \ MUST NOT simultaneously\n   assign the same prefixes to any other client and\
    \ MUST NOT itself\n   configure addresses from these prefixes.  Thus, the client\
    \ does not\n   have to perform Duplicate Address Detection (DAD).  (This approach\
    \ is\n   based on [IPv6PPP].)\n   The prefixes remain valid through the lifetime\
    \ of the IKE SA (and its\n   continuations via rekeying).  If the VPN gateway\
    \ needs to remove a\n   prefix it has previously assigned, or assign a new prefix,\
    \ it can do\n   so with reauthentication (either starting reauthentication itself\
    \ or\n   requesting the client to reauthenticate using [RFC4478]).\n   The client\
    \ also contacts the DHCPv6 server.  This is the RECOMMENDED\n   way to obtain\
    \ additional configuration parameters (such as DNS server\n   addresses), as it\
    \ allows easier extensibility and more options (such\n   as the domain search\
    \ list for DNS).\n"
- title: 4.2.  Reauthentication
  contents:
  - "4.2.  Reauthentication\n   When the client performs reauthentication (and wants\
    \ to continue\n   using the same \"virtual link\"), it includes the IKEv2 Link\
    \ ID given\n   by the gateway in the INTERNAL_IP6_LINK attribute.\n      CP(CFG_REQUEST)\
    \ =\n         { INTERNAL_IP6_LINK(Client's Link Local Interface ID,\n        \
    \                     IKEv2 Link ID)\n           INTERNAL_IP6_DHCP() }\n     \
    \ TSi = (0, 0-65535, 0:0:0:0:0:0:0:0 -\n             FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)\n\
    \      TSr = (0, 0-65535, 0:0:0:0:0:0:0:0 -\n             FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)\
    \  -->\n   At this point, the gateway MUST verify that the client is indeed\n\
    \   allowed to use the link identified by the IKEv2 Link ID.  The same\n   situation\
    \ occurs in [IKEv2] when the client wants to continue using\n   the same IPv4\
    \ address with the INTERNAL_IP4_ADDRESS configuration\n   attribute.  Typically,\
    \ the gateway would use the Link ID to look up\n   relevant local state and compare\
    \ the authenticated peer identity of\n   the IKE_SA with the local state.\n  \
    \ If the client is allowed to continue using this link, the gateway\n   replies\
    \ (see Section 4.1) with the same gateway's link-local\n   interface ID and IKEv2\
    \ Link ID as used earlier and sends the IPv6\n   prefix(es) associated with this\
    \ link.  Usually, the IPv6 prefix(es)\n   will also be the same as earlier, but\
    \ this is not required.\n   If the client is not allowed to continue using this\
    \ link, the gateway\n   treats it as a request for a new virtual link, selects\
    \ a different\n   IKEv2 Link ID value, and replies as in Section 4.1.\n"
- title: 4.3.  Creating CHILD_SAs
  contents:
  - "4.3.  Creating CHILD_SAs\n   When a CHILD_SA is created, the peers need to determine\
    \ which SPD\n   entries and PAD Child SA Authorization Data entries are used for\
    \ this\n   CHILD_SA.  In the basic client-to-VPN-gateway uses, the situation is\n\
    \   simple: all the matching SPD entries and Child SA Authorization Data\n   entries\
    \ are related to the \"virtual link\" between the VPN client and\n   the VPN gateway.\
    \  However, if the same peers are also using IPsec/\n   IKEv2 for other uses (with\
    \ addresses not assigned inside IKEv2), they\n   would also have SPD entries and\
    \ PAD Child SA Authorization Data that\n   is not related to the virtual link.\n\
    \   If one of the peers requests a CHILD_SA and proposes traffic\n   selectors\
    \ covering everything (like in Figure 2), should those be\n   narrowed to the\
    \ prefixes configured with INTERNAL_IP6_PREFIX or to\n   the other SPD/PAD entries?\
    \  While some kind of heuristics are\n   possible (see Appendix A for discussion),\
    \ this document specifies an\n   explicit solution:\n   The peers MUST include\
    \ a LINK_ID notification, containing the IKEv2\n   Link ID, in all CREATE_CHILD_SA\
    \ requests (including rekeys) that are\n   related to the virtual link.  The LINK_ID\
    \ notification is not\n   included in the CREATE_CHILD_SA response or when doing\
    \ IKE_SA\n   rekeying.\n"
- title: 4.4.  Relationship to Neighbor Discovery
  contents:
  - "4.4.  Relationship to Neighbor Discovery\n   Neighbor Discovery [IPv6ND] specifies\
    \ the following mechanisms:\n   Router Discovery, Prefix Discovery, Parameter\
    \ Discovery, and address\n   autoconfiguration are not used, as the necessary\
    \ functionality is\n   implemented in IKEv2.\n   Address Resolution, Next-hop\
    \ Determination, and Redirect are not\n   used, as the virtual link does not have\
    \ link-layer addresses and is a\n   point-to-point link.\n   Neighbor Unreachability\
    \ Detection could be used but is a bit\n   redundant given IKEv2 Dead Peer Detection.\n\
    \   Duplicate Address Detection is not needed because this is a point-to-\n  \
    \ point link, where the VPN gateway does not assign any addresses from\n   the\
    \ global unicast prefixes, and the link-local interface identifier\n   is negotiated\
    \ separately.\n   Duplicate Address Detection is not needed for global unicast\n\
    \   addresses formed from the global unicast prefix(es) configured as\n   part\
    \ of the IKEv2 exchange, because this is a point-to-point link,\n   where the\
    \ VPN gateway does not assign any addresses from the global\n   unicast prefixes.\
    \  Duplicate Address Detection may be needed for\n   link-local addresses, e.g.,\
    \ when the client configures a link-local\n   address as per [RFC4941].\n   Thus,\
    \ Duplicate Address Detection MAY be skipped for global unicast\n   addresses\
    \ formed from the global unicast prefix(es) configured as\n   part of the IKEv2\
    \ exchange.  However, Duplicate Address Detection for\n   link-local unicast addresses\
    \ MUST be performed as required per some\n   other specifications, e.g., [RFC4941].\n"
- title: 4.5.  Relationship to Existing IKEv2 Payloads
  contents:
  - "4.5.  Relationship to Existing IKEv2 Payloads\n   The mechanism described in\
    \ this document is not intended to be used\n   at the same time as the existing\
    \ INTERNAL_IP6_ADDRESS attribute.  For\n   compatibility with gateways implementing\
    \ only INTERNAL_IP6_ADDRESS,\n   the VPN client MAY include attributes for both\
    \ mechanisms in\n   CFG_REQUEST.  The capabilities and preferences of the VPN\
    \ gateway\n   will then determine which is used.\n   All other attributes except\
    \ INTERNAL_IP6_ADDRESS (and\n   INTENAL_ADDRESS_EXPIRY) from [IKEv2] remain valid,\
    \ including the\n   somewhat confusingly named INTERNAL_IP6_SUBNET (see Section\
    \ 6.3 of\n   [RFC4718] for discussion).\n"
- title: 5.  Payload Formats
  contents:
  - '5.  Payload Formats

    '
- title: 5.1.  INTERNAL_IP6_LINK Configuration Attribute
  contents:
  - "5.1.  INTERNAL_IP6_LINK Configuration Attribute\n   The INTERNAL_IP6_LINK configuration\
    \ attribute is formatted as\n   follows:\n                        1          \
    \         2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !R|         Attribute Type      !            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                          Link-Local                           |\n   |  \
    \                       Interface ID                          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                      IKEv2 Link ID                          ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   o  Reserved (1 bit) - See [IKEv2].\n   o  Attribute Type (15 bits) - INTERNAL_IP6_LINK\
    \ (17).\n   o  Length (2 octets) - Length in octets of the Value field (Link-\n\
    \      Local Interface ID and IKEv2 Link ID); 8 or more.\n   o  Link-Local Interface\
    \ ID (8 octets) - The Interface ID used for\n      link-local address (by the\
    \ party that sent this attribute).\n   o  IKEv2 Link ID (variable length) - The\
    \ Link ID (may be empty when\n      the client does not yet know the Link ID).\
    \  The Link ID is\n      selected by the VPN gateway and is treated as an opaque\
    \ octet\n      string by the client.\n"
- title: 5.2.  INTERNAL_IP6_PREFIX Configuration Attribute
  contents:
  - "5.2.  INTERNAL_IP6_PREFIX Configuration Attribute\n   The INTERNAL_IP6_PREFIX\
    \ configuration attribute is formatted as\n   follows:\n                     \
    \   1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   !R|         Attribute Type      !            Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \                          Prefix                             |\n   |        \
    \                                                       |\n   |              \
    \                                                 |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   | Prefix Length |\n   +-+-+-+-+-+-+-+-+\n   o  Reserved (1 bit) - See [IKEv2].\n\
    \   o  Attribute Type (15 bits) - INTERNAL_IP6_PREFIX (18).\n   o  Length (2 octets)\
    \ - Length in octets of the Value field; in this\n      case, 17.\n   o  Prefix\
    \ (16 octets) - An IPv6 prefix assigned to the virtual link.\n      The low-order\
    \ bits of the prefix field that are not part of the\n      prefix MUST be set\
    \ to zero by the sender and MUST be ignored by\n      the receiver.\n   o  Prefix\
    \ Length (1 octet) - The length of the prefix in bits;\n      usually 64.\n"
- title: 5.3.  LINK_ID Notify Payload
  contents:
  - "5.3.  LINK_ID Notify Payload\n   The LINK_ID notification is included in CREATE_CHILD_SA\
    \ requests to\n   indicate that the SA being created is related to the virtual\
    \ link.\n   If this notification is not included, the CREATE_CHILD_SA requests\n\
    \   are related to the real interface.\n   The Notify Message Type for LINK_ID\
    \ is 16414.  The Protocol ID and\n   SPI Size fields are set to zero.  The data\
    \ associated with this\n   notification is the IKEv2 Link ID returned in the INTERNAL_IP6_LINK\n\
    \   configuration attribute.\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   This document defines two new IKEv2 configuration\
    \ attributes, whose\n   values have been allocated from the \"IKEv2 Configuration\
    \ Payload\n   Attribute Types\" namespace [IKEv2]:\n                         \
    \              Multi-\n      Value    Attribute Type          Valued  Length \
    \        Reference\n      ------   ----------------------  ------  -------------\
    \  ---------\n      17       INTERNAL_IP6_LINK       NO      8 or more      [RFC5739]\n\
    \      18       INTERNAL_IP6_PREFIX     YES     17 octets      [RFC5739]\n   This\
    \ document also defines one new IKEv2 notification, whose value\n   has been allocated\
    \ from the \"IKEv2 Notify Message Types - Status\n   Types\" namespace [IKEv2]:\n\
    \      Value   Notify Messages - Status Types   Reference\n      ------  -------------------------------\
    \  ---------\n      16414   LINK_ID                          [RFC5739]\n   This\
    \ document does not create any new namespaces to be maintained by\n   IANA.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Since this document is an extension to IKEv2,\
    \ the security\n   considerations in [IKEv2] apply here as well.\n   The mechanism\
    \ described in this document assigns each client a unique\n   prefix, which makes\
    \ using randomized interface identifiers [RFC4941]\n   ineffective from a privacy\
    \ point of view: the client is still\n   uniquely identified by the prefix.  In\
    \ some environments, it may be\n   preferable to assign a VPN client the same\
    \ prefix each time a VPN\n   connection is established; other environments may\
    \ prefer assigning a\n   different prefix every time for privacy reasons.  (This\
    \ is basically\n   a similar trade-off as in Mobile IPv6 -- using the same Home\
    \ Address\n   forever is simpler than changing it often, but has privacy\n   implications.)\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   The authors would like to thank Patrick Irwin, Tero Kivinen,\
    \ Chinh\n   Nguyen, Mohan Parthasarathy, Yaron Sheffer, Hemant Singh, Dave\n \
    \  Thaler, Yinghzhe Wu, and Fan Zhao for their valuable comments.\n   Many of\
    \ the challenges associated with IPsec-protected \"virtual\n   interfaces\" have\
    \ been identified before, for example, in the context\n   of protecting IPv6-in-IPv4\
    \ tunnels with IPsec [RFC4891], Provider\n   Provisioned VPNs ([VLINK], [RFC3884]),\
    \ and Mobile IPv6 [RFC4877].\n   Some of the limitations of assigning a single\
    \ IPv6 address were\n   identified in [RFC3314].\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [IKEv2]      Kaufman, C., \"Internet Key Exchange\
    \ (IKEv2) Protocol\",\n                RFC 4306, December 2005.\n   [IPv6Addr]\
    \   Hinden, R. and S. Deering, \"IP Version 6 Addressing\n                Architecture\"\
    , RFC 4291, February 2006.\n   [KEYWORDS]   Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [AUTOCONF]   Thomson, S., Narten, T., and T.\
    \ Jinmei, \"IPv6 Stateless\n                Address Autoconfiguration\", RFC 4862,\
    \ September 2007.\n   [CGA]        Aura, T., \"Cryptographically Generated Addresses\
    \ (CGA)\",\n                RFC 3972, March 2006.\n   [DHCPv6]     Droms, R.,\
    \ Bound, J., Volz, B., Lemon, T., Perkins, C.,\n                and M. Carney,\
    \ \"Dynamic Host Configuration Protocol for\n                IPv6 (DHCPv6)\",\
    \ RFC 3315, July 2003.\n   [HBA]        Bagnulo, M., \"Hash-Based Addresses (HBA)\"\
    , RFC 5535,\n                June 2009.\n   [IPConfig]   Aboba, B., Thaler, D.,\
    \ Andersson, L., and S. Cheshire,\n                \"Principles of Internet Host\
    \ Configuration\", RFC 5505,\n                May 2009.\n   [IPv6ND]     Narten,\
    \ T., Nordmark, E., Simpson, W., and H. Soliman,\n                \"Neighbor Discovery\
    \ for IP version 6 (IPv6)\", RFC 4861,\n                September 2007.\n   [IPv6PPP]\
    \    Varada, S., Haskins, D., and E. Allen, \"IP Version 6\n                over\
    \ PPP\", RFC 5072, September 2007.\n   [MLDv2]      Vida, R. and L. Costa, \"\
    Multicast Listener Discovery\n                Version 2 (MLDv2) for IPv6\", RFC\
    \ 3810, June 2004.\n   [MOBIKE]     Eronen, P., \"IKEv2 Mobility and Multihoming\
    \ Protocol\n                (MOBIKE)\", RFC 4555, June 2006.\n   [Multilink] \
    \ Thaler, D., \"Multi-Link Subnet Issues\", RFC 4903,\n                June 2007.\n\
    \   [NDProxy]    Thaler, D., Talwar, M., and C. Patel, \"Neighbor\n          \
    \      Discovery Proxies (ND Proxy)\", RFC 4389, April 2006.\n   [RFC3314]   \
    \ Wasserman, M., \"Recommendations for IPv6 in Third\n                Generation\
    \ Partnership Project (3GPP) Standards\",\n                RFC 3314, September\
    \ 2002.\n   [RFC3456]    Patel, B., Aboba, B., Kelly, S., and V. Gupta, \"Dynamic\n\
    \                Host Configuration Protocol (DHCPv4) Configuration of\n     \
    \           IPsec Tunnel Mode\", RFC 3456, January 2003.\n   [RFC3633]    Troan,\
    \ O. and R. Droms, \"IPv6 Prefix Options for Dynamic\n                Host Configuration\
    \ Protocol (DHCP) version 6\", RFC 3633,\n                December 2003.\n   [RFC3884]\
    \    Touch, J., Eggert, L., and Y. Wang, \"Use of IPsec\n                Transport\
    \ Mode for Dynamic Routing\", RFC 3884,\n                September 2004.\n   [RFC4193]\
    \    Hinden, R. and B. Haberman, \"Unique Local IPv6 Unicast\n               \
    \ Addresses\", RFC 4193, October 2005.\n   [RFC4478]    Nir, Y., \"Repeated Authentication\
    \ in Internet Key\n                Exchange (IKEv2) Protocol\", RFC 4478, April\
    \ 2006.\n   [RFC4718]    Eronen, P. and P. Hoffman, \"IKEv2 Clarifications and\n\
    \                Implementation Guidelines\", RFC 4718, October 2006.\n   [RFC4866]\
    \    Arkko, J., Vogt, C., and W. Haddad, \"Enhanced Route\n                Optimization\
    \ for Mobile IPv6\", RFC 4866, May 2007.\n   [RFC4877]    Devarapalli, V. and\
    \ F. Dupont, \"Mobile IPv6 Operation\n                with IKEv2 and the Revised\
    \ IPsec Architecture\",\n                RFC 4877, April 2007.\n   [RFC4891] \
    \   Graveman, R., Parthasarathy, M., Savola, P., and H.\n                Tschofenig,\
    \ \"Using IPsec to Secure IPv6-in-IPv4\n                Tunnels\", RFC 4891, May\
    \ 2007.\n   [RFC4941]    Narten, T., Draves, R., and S. Krishnan, \"Privacy\n\
    \                Extensions for Stateless Address Autoconfiguration in\n     \
    \           IPv6\", RFC 4941, September 2007.\n   [RFC5121]    Patil, B., Xia,\
    \ F., Sarikaya, B., Choi, JH., and S.\n                Madanapalli, \"Transmission\
    \ of IPv6 via the IPv6\n                Convergence Sublayer over IEEE 802.16\
    \ Networks\",\n                RFC 5121, February 2008.\n   [RFC5213]    Gundavelli,\
    \ S., Leung, K., Devarapalli, V., Chowdhury,\n                K., and B. Patil,\
    \ \"Proxy Mobile IPv6\", RFC 5213,\n                August 2008.\n   [SHIM6] \
    \     Nordmark, E. and M. Bagnulo, \"Shim6: Level 3 Multihoming\n            \
    \    Shim Protocol for IPv6\", RFC 5533, June 2009.\n   [VLINK]      Duffy, M.,\
    \ \"Framework for IPsec Protected Virtual Links\n                for PPVPNs\"\
    , Work in Progress, October 2002.\n"
- title: Appendix A.  Design Rationale (Non-Normative)
  contents:
  - "Appendix A.  Design Rationale (Non-Normative)\n   This appendix describes some\
    \ of the reasons why the solution in\n   Section 4 was selected and lists some\
    \ alternative designs that were\n   considered but were ultimately rejected.\n\
    \   Assigning a new IPv6 address to the client creates a new \"virtual\n   IPv6\
    \ interface\" and \"virtual link\" between the client and the\n   gateway.  We\
    \ will assume that the virtual link has the following\n   properties:\n   o  The\
    \ link and its interfaces are created and destroyed by the IKEv2\n      process.\n\
    \   o  The link is not an IPsec SA; at any time, there can be zero or\n      more\
    \ IPsec SAs covering traffic on this link.\n   o  The link is not a single IKE\
    \ SA; to support reauthentication, it\n      must be possible to identify the\
    \ same link in another IKE SA.\n   o  Not all IPsec-protected traffic between\
    \ the peers is necessarily\n      related to the virtual link (although in the\
    \ simplest VPN client-\n      to-gateway scenario, it will be).\n   Given these\
    \ assumptions and the goals described in Section 3, it\n   seems that the most\
    \ important design choices to be made are the\n   following:\n   o  What link/subnet\
    \ model is used; in other words, how relationships\n      between VPN clients,\
    \ IPv6 subnet prefixes, and link-local traffic\n      (especially link-local multicast)\
    \ are organized.\n   o  How information about the IPv6 prefix(es) is distributed\
    \ from the\n      gateway to the clients.\n   o  How to ensure unique IPv6 addresses\
    \ for each client and keep\n      forwarding state up-to-date accordingly.\n \
    \  o  How layer 3 access control is done; in other words, where the\n      mechanisms\
    \ for preventing address spoofing by clients are placed\n      architecturally.\n\
    \   Each of these is discussed next in turn.\n"
- title: A.1.  Link Model
  contents:
  - "A.1.  Link Model\n   There are at least three main choices for how to organize\
    \ the\n   relationships between VPN clients, IPv6 subnet prefixes, and link-\n\
    \   local traffic:\n   o  Point-to-point link model: each VPN client is assigned\
    \ one or more\n      IPv6 prefixes.  These prefixes are not shared with other\
    \ clients,\n      and there is no link-local traffic between different VPN clients\n\
    \      connected to the same gateway.\n   o  Multi-access link model: multiple\
    \ VPN clients share the same IPv6\n      prefix.  Link-local multicast packets\
    \ sent by one VPN client will\n      be received by other VPN clients (VPN gateway\
    \ will forward the\n      packets, possibly with Multicast Listener Discovery\
    \ (MLD) snooping\n      to remove unnecessary packets).\n   o  \"Router aggregation\"\
    \ link model: one form of \"multi-link\" subnet\n      [Multilink] where multiple\
    \ VPN clients share the same IPv6 prefix.\n      Link-local multicast will not\
    \ be received by other VPN clients.\n   In the multi-access link model, VPN clients\
    \ who are idle (i.e., not\n   currently sending or receiving application traffic)\
    \ could receive\n   significant amounts of multicast packets from other clients\n\
    \   (depending on how many other clients are connected).  This is\n   especially\
    \ undesirable when the clients are battery-powered such as a\n   PDA that keeps\
    \ the VPN connection to corporate intranet active 24/7.\n   For this reason, using\
    \ the multi-access link model was rejected.\n   The configuration attributes specified\
    \ in Section 4 use the point-to-\n   point link model.\n"
- title: A.2.  Distributing Prefix Information
  contents:
  - "A.2.  Distributing Prefix Information\n   Some types of addresses, such as CGAs,\
    \ require knowledge about the\n   prefix before an address can be generated. \
    \ The prefix information\n   could be distributed to clients in the following\
    \ ways:\n   o  IKEv2 messages (configuration payloads)\n   o  Router Advertisement\
    \ messages (sent over the IPsec tunnel)\n   o  DHCPv6 messages (sent over the\
    \ IPsec tunnel)\n   In Section 4, the prefix information is distributed in IKEv2\n\
    \   messages.\n"
- title: A.3.  Unique Address Allocation
  contents:
  - "A.3.  Unique Address Allocation\n   In the \"multi-access\" and \"router aggregation\"\
    \ link models (where a\n   single IPv6 prefix is shared between multiple VPN clients),\n\
    \   mechanisms are needed to ensure that one VPN client does not use an\n   address\
    \ already used by some other client.  Also, the VPN gateway has\n   to know which\
    \ client is using which addresses in order to correctly\n   forward traffic.\n\
    \   The main choices seem to be the following:\n   o  Clients receive the address(es)\
    \ they are allowed to use in IKEv2\n      messages (configuration payloads). \
    \ In this case, keeping track of\n      which client is using which address is\
    \ trivial.\n   o  Clients receive the address(es) they are allowed to use in DHCPv6\n\
    \      messages sent over the IPsec tunnel.  In case the DHCPv6 server is\n  \
    \    not integrated with the VPN gateway, the gateway may need to work\n     \
    \ as a relay agent to keep track of which client is using which\n      address\
    \ (and update its forwarding state accordingly).\n   o  Clients can use stateless\
    \ address autoconfiguration to configure\n      addresses and perform Duplicate\
    \ Address Detection (DAD).  This is\n      easy to do in a multi-access link model\
    \ and can be made to work\n      with a router aggregation link model if the VPN\
    \ gateway traps\n      Neighbor Solicitation (NS) messages and spoofs Neighbor\n\
    \      Advertisement (NA) replies.  The gateway keeps track of which\n      client\
    \ is using which address (and updates its forwarding state\n      accordingly)\
    \ by trapping these NS/NA messages.\n   In the point-to-point link model, the\
    \ client can simply use any\n   address from the prefix, and the VPN gateway only\
    \ needs to know which\n   client is using which prefix in order to forward packets\
    \ correctly.\n"
- title: A.4.  Layer 3 Access Control
  contents:
  - "A.4.  Layer 3 Access Control\n   It is almost always desirable to prevent one\
    \ VPN client from sending\n   packets with a source address that is used by another\
    \ VPN client.  In\n   order to correctly forward packets destined to clients,\
    \ the VPN\n   gateway obviously has to know which client is using which address;\n\
    \   the question is therefore where, architecturally, the mechanisms for\n   ingress\
    \ filtering are placed.\n   o  Layer 3 access control could be enforced by IPsec\
    \ Security\n      Association Database (SAD) / SPD; the addresses/prefixes assigned\n\
    \      to a VPN client would be reflected in the traffic selectors used\n    \
    \  in IPsec Security Association and Security Policy Database\n      entries,\
    \ as negotiated in IKEv2.\n   o  The ingress filtering capability could be placed\
    \ outside IPsec;\n      the traffic selectors in SAD/SPD entries would cover traffic\
    \ that\n      would be dropped later by ingress filtering.\n   The former approach\
    \ is used by the current IPv4 solution and the\n   mechanism specified in Section\
    \ 4.\n"
- title: A.5.  Other Considerations
  contents:
  - "A.5.  Other Considerations\n   VPN gateway state\n      In some combinations\
    \ of design choices, the amount of state\n      information required in the VPN\
    \ gateway depends not only on the\n      number of clients but also on the number\
    \ of addresses used by one\n      client.  With privacy addresses and potentially\
    \ some uses of\n      Cryptographically Generated Addresses (CGAs), a single client\n\
    \      could have a large number of different addresses (especially if\n     \
    \ different privacy addresses are used with different destinations).\n   Virtual\
    \ link identifier\n      Reauthentication requires a way to uniquely identify\
    \ the virtual\n      link when a second IKE SA is created.  Some possible alternatives\n\
    \      are the IKE Security Parameter Indexes (SPIs) of the IKE SA where\n   \
    \   the virtual link was \"created\" (assuming we can't have multiple\n      virtual\
    \ links within the same IKE SA), a new identifier assigned\n      when the link\
    \ is created, or any unique prefix or address that\n      remains assigned to\
    \ the link for its entire lifetime.  Section 4\n      specifies that the gateway\
    \ assigns a new IKEv2 Link ID when the\n      link is created.  The client treats\
    \ the Link ID as an opaque octet\n      string; the gateway uses it to identify\
    \ relevant local state when\n      reauthentication is done.\n      Note that\
    \ the link is not uniquely identified by the IKE peer\n      identities (because\
    \ IDi is often a user identity that can be used\n      on multiple hosts at the\
    \ same time) or the outer IP addresses of\n      the peers (due to NAT Traversal\
    \ and [MOBIKE]).\n   Prefix lifetime\n      Prefixes could remain valid either\
    \ for the lifetime of the IKE SA,\n      until explicitly cancelled, or for an\
    \ explicitly specified time.\n      In Section 4, the prefixes remain valid for\
    \ the lifetime of the\n      IKE SA (and its continuations via rekeying but not\
    \ via\n      reauthentication).  If necessary, the VPN gateway can thus add or\n\
    \      remove prefixes by triggering reauthentication.  It is assumed\n      that\
    \ adding or removing prefixes is a relatively rare situation,\n      and thus\
    \ this document does not specify more complex solutions\n      (such as explicit\
    \ prefix lifetimes or use of CFG_SET/CFG_ACK).\n   Compatibility with other IPsec\
    \ uses\n      Compatibility with other IPsec uses probably requires that when\
    \ a\n      CHILD_SA is created, both peers can determine whether the CHILD_SA\n\
    \      applies to the virtual interface (at the end of the virtual link)\n   \
    \   or the real interfaces over which IKEv2 messages are being sent.\n      This\
    \ is required to select the correct SPD to be used for traffic-\n      selector\
    \ narrowing and SA authorization in general.\n      One straight-forward solution\
    \ is to add an extra payload to\n      CREATE_CHILD_SA requests, containing the\
    \ virtual link identifier.\n      Requests not containing this payload would refer\
    \ to the real link\n      (over which IKEv2 messages are being sent).\n      Another\
    \ solution is to require that the peer requesting a CHILD_SA\n      proposes traffic\
    \ selectors that identify the link.  For example,\n      if TSi includes the peer's\
    \ \"outer\" IP address, it's probably\n      related to the real interface, not\
    \ the virtual one.  Or if TSi\n      includes any of the prefixes assigned by\
    \ the gateway (or the link-\n      local or multicast prefix), it is probably\
    \ related to the virtual\n      interface.\n      These heuristics can work in\
    \ many situations but have proved\n      inadequate in the context of IPv6-in-IPv4\
    \ tunnels [RFC4891],\n      Provider Provisioned VPNs ([VLINK], [RFC3884]), and\
    \ Mobile IPv6\n      [RFC4877].  Thus, Section 4 includes the virtual link identifier\n\
    \      in all CREATE_CHILD_SA requests that apply to the virtual\n      interface.\n\
    \   Example of other IPsec uses:\n      If a VPN gateway receives a CREATE_CHILD_SA\
    \ request associated\n      with a physical Ethernet interface, requesting an\
    \ SA for\n      (TSi=FE80::something, dst=*), it would typically reject the\n\
    \      request (or, in other words, narrow it to an empty set) because it\n  \
    \    doesn't have SPD/PAD entries that would allow joe.user@example.com\n    \
    \  to request such CHILD_SAs.\n      (However, it might have SPD/PAD entries that\
    \ would allow\n      \"neighboring-router.example.com\" to create such SAs to\
    \ protect,\n      for example, some routing protocol that uses link-local\n  \
    \    addresses.)\n      However, the virtual interface created when joe.user@example.com\n\
    \      authenticated and sent INTERNAL_IP6_LINK would have a different\n     \
    \ SPD/PAD, which would allow joe.user@example.com to create this SA.\n"
- title: A.6.  Alternative Solution Sketches
  contents:
  - 'A.6.  Alternative Solution Sketches

    '
- title: A.6.1.  Version -00 Sketch
  contents:
  - "A.6.1.  Version -00 Sketch\n   The -00 version of this document contained the\
    \ following solution\n   sketch, which is basically a combination of (1) a point-to-point\
    \ link\n   model, (2) prefix information distributed in Neighbor Advertisements,\n\
    \   and (3) access control enforced outside IPsec.\n   1.  During IKE_AUTH, the\
    \ client sends a new configuration attribute,\n       INTERNAL_IP6_LINK, which\
    \ requests a virtual link to be created.\n       The attribute contains the client's\
    \ interface ID for the link-\n       local address (other addresses may use other\
    \ interface IDs).\n       CP(CFG_REQUEST) =\n          { INTERNAL_IP6_LINK(Link-Local\
    \ Interface ID) }\n       TSi = (0, 0-65535, 0:0:0:0:0:0:0:0 -\n             \
    \ FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)\n       TSr = (0, 0-65535, 0:0:0:0:0:0:0:0\
    \ -\n              FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)  -->\n   The VPN gateway\
    \ replies with its own link-local interface ID (which\n   has to be different\
    \ from the client's) and an IKEv2 Link ID (which\n   will be used for reauthentication).\n\
    \       CP(CFG_REPLY) =\n         { INTERNAL_IP6_LINK(Link-Local Interface ID,\
    \ IKEv2 Link ID) }\n       TSi = (0, 0-65535, 0:0:0:0:0:0:0:0 -\n            \
    \  FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)\n       TSr = (0, 0-65535, 0:0:0:0:0:0:0:0\
    \ -\n              FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)\n   At this point,\
    \ both peers configure the virtual interface with the\n   link-local addresses.\n\
    \   2.  The next step is IPv6 stateless address autoconfiguration, that\n    \
    \   is, Router Solicitation and Router Advertisement messages sent\n       over\
    \ the IPsec SA.\n       ESP(Router Solicitation:\n           src=::,\n       \
    \    dst=FF02:0:0:0:0:0:0:2)  -->\n       <-- ESP(Router Advertisement:\n    \
    \           src=FE80::<Gateway's Interface ID>\n               dst=FF02:0:0:0:0:0:0:1,\n\
    \               Prefix1, [Prefix2...])\n   After receiving the Router Advertisement,\
    \ the client can configure\n   unicast addresses from the advertised prefixes,\
    \ using any proper\n   interface ID.  The VPN gateway does not simultaneously\
    \ assign the\n   same prefixes to any other client and does not itself configure\n\
    \   addresses from these prefixes.  Thus, the client does not have to\n   perform\
    \ Duplicate Address Detection (DAD).\n   3.  Reauthentication works basically\
    \ the same way as in Section 4;\n       the client includes the IKEv2 Link ID\
    \ in the INTERNAL_IP6_LINK\n       attribute.\n   4.  Creating and rekeying IPsec\
    \ SAs works basically the same way as\n       in Section 4.3; the client includes\
    \ the IKEv2 Link ID in those\n       CHILD_SA requests that are related to the\
    \ virtual link.\n   Comments: This was changed in the -01 version of this document\
    \ based\n   on feedback from VPN vendors; while the solution looks nice on paper,\n\
    \   it is claimed to be unnecessarily complex to implement when the IKE\n   implementation\
    \ and IPv6 stack are from different companies.\n   Furthermore, enforcing access\
    \ control outside IPsec is a significant\n   architectural change compared to\
    \ current IPv4 solutions.\n"
- title: 'A.6.2.  Router Aggregation Sketch #1'
  contents:
  - "A.6.2.  Router Aggregation Sketch #1\n   Hemant Singh helped sketch the following\
    \ solution during the IETF 70\n   meeting in Vancouver.  It combines (1) the router\
    \ aggregation link\n   model, (2) prefix information distributed in IKEv2 messages,\
    \ (3)\n   unique address allocation with stateless address autoconfiguration\n\
    \   (with VPN gateway trapping NS messages and spoofing NA replies), and\n   (4)\
    \ access control enforced (partly) outside IPsec.\n   1.  During IKE_AUTH, the\
    \ client sends a new configuration attribute,\n       INTERNAL_IP6_LINK, which\
    \ requests a virtual link to be created.\n       The attribute contains the client's\
    \ interface ID for the link-\n       local address (other addresses may use other\
    \ interface IDs).\n       CP(CFG_REQUEST) =\n          { INTERNAL_IP6_LINK(Link-Local\
    \ Interface ID) }\n       TSi = (0, 0-65535, 0:0:0:0:0:0:0:0 -\n             \
    \ FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)\n       TSr = (0, 0-65535, 0:0:0:0:0:0:0:0\
    \ -\n              FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)  -->\n   The VPN gateway\
    \ replies with its own Link-Local Interface ID (which\n   has to be different\
    \ from the client's), an IKEv2 Link ID (which will\n   be used for reauthentication\
    \ and CREATE_CHILD_SA messages), and zero\n   or more INTERNAL_IP6_PREFIX attributes.\
    \  The traffic selectors\n   proposed by the initiator are also narrowed to contain\
    \ only the\n   assigned prefixes (and the link-local prefix).\n       CP(CFG_REPLY)\
    \ =\n          { INTERNAL_IP6_LINK(Link-Local Interface ID, IKEv2 Link ID),\n\
    \            INTERNAL_IP6_PREFIX(Prefix1/64),\n            [INTERNAL_IP6_PREFIX(Prefix2/64),...]\
    \ }\n       TSi = ((0, 0-65535,\n               FE80::<Client's Interface ID>\
    \ -\n               FE80::<Client's Interface ID>)\n              (0, 0-65535,\n\
    \               Prefix1::0 -\n               Prefix1::FFFF:FFFF:FFFF:FFFF),\n\
    \              [(0, 0-65535,\n                Prefix2::0 -\n                Prefix2::FFFF:FFFF:FFFF:FFFF),\
    \ ...])\n       TSr = (0, 0-65535,\n              0:0:0:0:0:0:0:0 -\n        \
    \      FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)\n   2.  The client now configures\
    \ tentative unicast addresses from the\n       prefixes given by the gateway,\
    \ and performs Duplicate Address\n       Detection (DAD) for them.\n       The\
    \ Neighbor Solicitation messages are processed by the VPN\n       gateway; if\
    \ the target address is already in use by some other\n       VPN client, the gateway\
    \ replies with a Neighbor Advertisement.\n       If the target address is not\
    \ already in use, the VPN gateway\n       notes that it is now being used by this\
    \ client and updates its\n       forwarding state accordingly.\n   Comments: The\
    \ main disadvantages of this solution are non-standard\n   processing of NS messages\
    \ (which are used to update the gateway's\n   forwarding state), and performing\
    \ access control partly outside\n   IPsec.\n"
- title: 'A.6.3.  Router Aggregation Sketch #2'
  contents:
  - "A.6.3.  Router Aggregation Sketch #2\n   This is basically similar to the version\
    \ -00 sketch described above\n   but uses the router aggregation link model. \
    \ In other words, it\n   combines (1) the router aggregation link model, (2) prefix\n\
    \   information distributed in Neighbor Advertisements, (3) unique\n   address\
    \ allocation with stateless address autoconfiguration (with the\n   VPN gateway\
    \ trapping NS messages and spoofing NA replies), and (4)\n   access control enforced\
    \ outside IPsec.\n   1.  During IKE_AUTH, the client sends a new configuration\
    \ attribute,\n       INTERNAL_IP6_LINK, which requests a virtual link to be created.\n\
    \       The attribute contains the client's interface ID for the link-\n     \
    \  local address (other addresses may use other interface IDs).\n       CP(CFG_REQUEST)\
    \ =\n          { INTERNAL_IP6_LINK(Link-Local Interface ID) }\n       TSi = (0,\
    \ 0-65535, 0:0:0:0:0:0:0:0 -\n              FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)\n\
    \       TSr = (0, 0-65535, 0:0:0:0:0:0:0:0 -\n              FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)\
    \  -->\n   The VPN gateway replies with its own Link-Local Interface ID (which\n\
    \   has to be different from the client's) and an IKEv2 Link ID (which\n   will\
    \ be used for reauthentication).\n       CP(CFG_REPLY) =\n         { INTERNAL_IP6_LINK(Link-Local\
    \ Interface ID, IKEv2 Link ID) }\n       TSi = (0, 0-65535, 0:0:0:0:0:0:0:0 -\n\
    \              FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)\n       TSr = (0, 0-65535,\
    \ 0:0:0:0:0:0:0:0 -\n              FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)\n\
    \   At this point, both peers configure the virtual interface with the\n   link-local\
    \ addresses.\n   2.  The next step is IPv6 stateless address autoconfiguration,\
    \ that\n       is, Router Solicitation and Router Advertisement messages sent\n\
    \       over the IPsec SA.\n       ESP(Router Solicitation:\n           src=::,\n\
    \           dst=FF02:0:0:0:0:0:0:2)  -->\n       <-- ESP(Router Advertisement:\n\
    \               src=FE80::<Gateway's Interface ID>\n               dst=FF02:0:0:0:0:0:0:1,\n\
    \               Prefix1, [Prefix2...])\n   3.  The client now configures tentative\
    \ unicast addresses from the\n       prefixes given by the gateway and performs\
    \ Duplicate Address\n       Detection (DAD) for them.\n       The Neighbor Solicitation\
    \ messages are processed by the VPN\n       gateway; if the target address is\
    \ already in use by some other\n       VPN client, the gateway replies with a\
    \ Neighbor Advertisement.\n       If the target address is not already in use,\
    \ the VPN gateway\n       notes that it is now being used by this client and updates\
    \ its\n       forwarding state accordingly.\n   Comments: The main disadvantages\
    \ of this solution are non-standard\n   processing of NS messages (which are used\
    \ to update the gateway's\n   forwarding state) and performing access control\
    \ outside IPsec.\n"
- title: A.6.4.  IPv4-Like Sketch
  contents:
  - "A.6.4.  IPv4-Like Sketch\n   This sketch resembles the current IPv4 configuration\
    \ payloads and\n   combines (1) the router aggregation link model, (2) prefix\n\
    \   information distributed in IKEv2 messages, (3) unique address\n   allocation\
    \ with IKEv2 messages, and (4) access control enforced by\n   IPsec SAD/SPD.\n\
    \   1.  During IKE_AUTH, the client sends a new configuration attribute,\n   \
    \    INTERNAL_IP6_LINK, which requests a virtual link to be created.\n       The\
    \ attribute contains the client's interface ID for the link-\n       local address\
    \ (other addresses may use other interface IDs).\n       CP(CFG_REQUEST) =\n \
    \         { INTERNAL_IP6_LINK(Link-Local Interface ID) }\n       TSi = (0, 0-65535,\n\
    \              0:0:0:0:0:0:0:0 -\n              FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)\n\
    \       TSr = (0, 0-65535,\n              0:0:0:0:0:0:0:0 -\n              FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)\
    \  -->\n   The VPN gateway replies with its own Link-Local Interface ID (which\n\
    \   has to be different from the client's), an IKEv2 Link ID (which will\n   be\
    \ used for reauthentication and CREATE_CHILD_SA messages), and zero\n   or more\
    \ INTERNAL_IP6_ADDRESS2 attributes.  Each attribute contains\n   one address from\
    \ a particular prefix.\n       CP(CFG_REPLY) =\n          { INTERNAL_IP6_LINK(Link-Local\
    \ Interface ID, IKEv2 Link ID),\n            INTERNAL_IP6_ADDRESS2(Prefix1+Client's\
    \ Interface ID1),\n            [INTERNAL_IP6_ADDRESS2(Prefix2+Client's Interface\
    \ ID2),...],\n       TSi = ((0, 0-65535,\n               FE80::<Client's Link-Local\
    \ Interface ID> -\n               FE80::<Client's Link-Local Interface ID>)\n\
    \              (0, 0-65535,\n               Prefix1::<Client's Interface ID1>\
    \ -\n               Prefix1::<Client's Interface ID1>),\n              [(0, 0-65535,\n\
    \                Prefix2::<Client's Interface ID2> -\n                Prefix2::<Client's\
    \ Interface ID2>), ...])\n       TSr = (0, 0-65535,\n              0:0:0:0:0:0:0:0\
    \ -\n              FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)\n   Since the VPN\
    \ gateway keeps track of address uniqueness, there is no\n   need to perform Duplicate\
    \ Address Detection.\n   2.  If the client wants additional addresses later (for\
    \ example, with\n       a specific interface ID), it requests them in a separate\n\
    \       CREATE_CHILD_SA exchange.  For example:\n       CP(CFG_REQUEST) =\n  \
    \        { INTERNAL_IP6_ADDRESS2(Prefix1+Client's Interface ID3) }\n       TSi\
    \ = (0, 0-65535,\n              Prefix1::0 -\n              Prefix1::FFFF:FFFF:FFFF:FFFF>),\n\
    \       TSr = (0, 0-65535,\n              0:0:0:0:0:0:0:0 -\n              FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)\
    \  -->\n   If the requested address is not currently in use by some other\n  \
    \ client, the VPN gateway simply returns the same address and the\n   appropriately\
    \ narrowed traffic selectors.\n       CP(CFG_REQUEST) =\n          { INTERNAL_IP6_ADDRESS2(Prefix1+Client's\
    \ Interface ID3) }\n       TSi = ((0, 0-65535,\n               Prefix1::<Client's\
    \ Interface ID3> -\n               Prefix1::<Client's Interface ID3>),\n     \
    \  TSr = (0, 0-65535,\n              0:0:0:0:0:0:0:0 -\n              FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF:FFFF)\n\
    \   Comments: The main advantage of this solution is that it's quite\n   close\
    \ to the current IPv4 way of doing things.  By adding explicit\n   link creation\
    \ (with Link ID for reauthentication/SPD selection and\n   link-local addresses)\
    \ and slightly changing the semantics (and also\n   name) of the INTERNAL_IP6_ADDRESS\
    \ attribute (which can return more\n   attributes than was asked), we get much\
    \ of the needed functionality.\n   The biggest disadvantages are probably potentially\
    \ complex\n   implementation dependency for interface ID selection (see\n   Section\
    \ 3.3) and the multi-link subnet model.\n"
- title: A.6.5.  Sketch Based on RFC 3456
  contents:
  - "A.6.5.  Sketch Based on RFC 3456\n   For completeness: a solution modeled after\
    \ [RFC3456] would combine\n   (1) the router aggregation link model, (2) prefix\
    \ information\n   distribution and unique address allocation with DHCPv6, and\
    \ (3)\n   access control enforced by IPsec SAD/SPD.\n"
- title: Appendix B.  Evaluation (Non-Normative)
  contents:
  - "Appendix B.  Evaluation (Non-Normative)\n   Section 3 describes the goals and\
    \ requirements for IPv6 configuration\n   in IKEv2.  This appendix briefly summarizes\
    \ how the solution\n   specified in Sections 4 and 5 meets these goals.\n   o\
    \  (3.1) Assigning addresses from multiple prefixes is supported,\n      without\
    \ requiring the client to know beforehand how many prefixes\n      are needed.\n\
    \   o  (3.2) Link-local addresses are assigned and can be used for\n      protocols\
    \ between the VPN client and gateway.\n   o  (3.3) The entire prefix is assigned\
    \ to a single client, so the\n      client can freely select any number of interface\
    \ IDs (which may\n      depend on the prefix).\n   o  (3.4) This document does\
    \ not specify how the VPN client would\n      share the VPN connection with other\
    \ devices.  However, since the\n      entire prefix is assigned to a single client,\
    \ the client could\n      further assign addresses from it without requiring coordination\n\
    \      with the VPN gateway.\n   o  (3.5) The solution does not add any new periodic\
    \ messages over the\n      VPN tunnel.\n   o  (3.5) Reauthentication works (see\
    \ Section 4.2).\n   o  (3.5) The solution is compatible with other IPsec uses\
    \ since the\n      LINK_ID notification makes it unambiguous which CHILD_SAs are\n\
    \      related to the virtual link and which are not (see Sections 4.3\n     \
    \ and 5.3).\n   o  (3.5) The new mechanisms do not prevent the VPN client and/or\n\
    \      gateway from implementing the INTERNAL_IP6_ADDRESS configuration\n    \
    \  attribute as well; however, the two mechanisms are not intended to\n      be\
    \ used simultaneously (see Section 4.5).\n   o  (3.5) Implementation dependencies\
    \ are, obviously, implementation\n      dependent (and their cleanliness somewhat\
    \ subjective).  Possible\n      drawbacks of some alternative solutions are discussed\
    \ in\n      Appendix A.6.\n   o  (3.5) The mechanism for configuring the prefixes\
    \ (configuration\n      payloads) is specific to IKEv2, for reasons described\
    \ in\n      Appendix A.  However, Section 4.1 recommends using DHCPv6\n      Information-Request\
    \ message for obtaining other configuration\n      information (such as DNS server\
    \ addresses).\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Pasi Eronen\n   Nokia Research Center\n   P.O. Box 407\n\
    \   FIN-00045 Nokia Group\n   Finland\n   EMail: pasi.eronen@nokia.com\n   Julien\
    \ Laganier\n   QUALCOMM Incorporated\n   5775 Morehouse Drive\n   San Diego, CA\
    \  92121\n   USA\n   Phone: +1 858 658 3538\n   EMail: julienl@qualcomm.com\n\
    \   Cheryl Madson\n   Cisco Systems, Inc.\n   510 MacCarthy Drive\n   Milpitas,\
    \ CA\n   USA\n   EMail: cmadson@cisco.com\n"
