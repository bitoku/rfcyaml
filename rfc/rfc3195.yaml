- contents:
  - '                      Reliable Delivery for syslog

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2001).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   The BSD Syslog Protocol describes a number of service options related\n
    \  to propagating event messages.  This memo describes two mappings of\n   the
    syslog protocol to TCP connections, both useful for reliable\n   delivery of event
    messages.  The first provides a trivial mapping\n   maximizing backward compatibility.
    \ The second provides a more\n   complete mapping.  Both provide a degree of robustness
    and security\n   in message delivery that is unavailable to the usual UDP-based
    syslog\n   protocol, by providing encryption and authentication over a\n   connection-oriented
    protocol.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.    Introduction . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n   2.    The Model  . . . . . . . . . . . . . . . . . . . . .
    . . . .  4\n   3.    The RAW Profile  . . . . . . . . . . . . . . . . . . . .
    . .  7\n   3.1   RAW Profile Overview . . . . . . . . . . . . . . . . . . . .
    \ 7\n   3.2   RAW Profile Identification and Initialization  . . . . . . .  9\n
    \  3.3   RAW Profile Message Syntax . . . . . . . . . . . . . . . . . 10\n   3.4
    \  RAW Profile Message Semantics  . . . . . . . . . . . . . . . 10\n   4.    The
    COOKED Profile . . . . . . . . . . . . . . . . . . . . . 11\n   4.1   COOKED Profile
    Overview  . . . . . . . . . . . . . . . . . . 11\n   4.2   COOKED Profile Identification
    and Initialization . . . . . . 11\n   4.3   COOKED Profile Message Syntax  . .
    . . . . . . . . . . . . . 11\n   4.4   COOKED Profile Message Semantics . . .
    . . . . . . . . . . . 12\n   4.4.1 The IAM Element  . . . . . . . . . . . . .
    . . . . . . . . . 12\n   4.4.2 The ENTRY Element  . . . . . . . . . . . . . .
    . . . . . . . 14\n   4.4.3 The PATH Element . . . . . . . . . . . . . . . . .
    . . . . . 19\n   5.    Additional Provisioning  . . . . . . . . . . . . . . .
    . . . 25\n   5.1   Message Authenticity . . . . . . . . . . . . . . . . . . .
    . 25\n   5.2   Message Replay . . . . . . . . . . . . . . . . . . . . . . . 25\n
    \  5.3   Message Integrity  . . . . . . . . . . . . . . . . . . . . . 25\n   5.4
    \  Message Observation  . . . . . . . . . . . . . . . . . . . . 26\n   5.5   Summary
    of Recommended Practices . . . . . . . . . . . . . . 26\n   6.    Initial Registrations
    \ . . . . . . . . . . . . . . . . . . . 27\n   6.1   Registration: The RAW Profile
    \ . . . . . . . . . . . . . . . 27\n   6.2   Registration: The COOKED Profile
    . . . . . . . . . . . . . . 27\n   7.    The syslog DTD . . . . . . . . . . .
    . . . . . . . . . . . . 28\n   8.    Reply Codes  . . . . . . . . . . . . . .
    . . . . . . . . . . 32\n   9.    IANA Considerations  . . . . . . . . . . . .
    . . . . . . . . 33\n   9.1   Registration: BEEP Profiles  . . . . . . . . . .
    . . . . . . 33\n   9.2   Registration: The System (Well-Known) TCP port number
    for\n            syslog-conn . . . . . . . . . . . . . . . . . . . . . . . 33\n
    \  10.   Security Considerations  . . . . . . . . . . . . . . . . . . 34\n   11.
    \  Acknowledgements . . . . . . . . . . . . . . . . . . . . . . 34\n   12.   References
    . . . . . . . . . . . . . . . . . . . . . . . . . 34\n   Authors' Addresses .
    . . . . . . . . . . . . . . . . . . . . . . . 35\n   Full Copyright Statement
    . . . . . . . . . . . . . . . . . . . . . 36\n"
  title: Table of Contents
- contents:
  - "1. Introduction\n   The syslog protocol [1] presents a spectrum of service options
    for\n   provisioning an event-based logging service over a network.  Each\n   option
    has associated benefits and costs.  Accordingly, the choice as\n   to what combination
    of options is provisioned is both an engineering\n   and administrative decision.
    \ This memo describes how to realize the\n   syslog protocol when reliable delivery
    is selected as a required\n   service.  It is beyond the scope of this memo to
    argue for, or\n   against, the use of reliable delivery for the syslog protocol.\n
    \  The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n
    \  \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n
    \  document are to be interpreted as described in RFC 2119 [2].\n"
  title: 1. Introduction
- contents:
  - "2. The Model\n   The syslog service supports three roles of operation: device,
    relay,\n   and collector.\n   Devices and collectors act as sources and sinks,
    respectively, of\n   syslog entries.  In the simplest case, only a device and
    collector\n   are present.  E.g.,\n     +--------+        +-----------+\n     |
    Device | -----> | Collector |\n     +--------+        +-----------+\n   The relationship
    between devices and collectors is potentially many-\n   to-many.  I.e., a device
    might communicate with many collectors;\n   similarly, a collector might communicate
    with many devices.\n   A relay operates in both modes, accepting syslog entries
    from devices\n   and other relays and forwarding those entries to collectors and
    other\n   relays.\n   For example,\n     +--------+      +-------+        +-------+
    \     +-----------+\n     | Device | ---> | Relay | -...-> | Relay | ---> | Collector
    |\n     +--------+      +-------+        +-------+      +-----------+\n   As shown,
    more than one relay may be present between any particular\n   device and collector.\n
    \  A relay may be necessary for administrative reasons.  For example, a\n   relay
    might run as an application proxy on a firewall.  Also, there\n   might be one
    relay per company department, which authenticates all\n   the devices in the department,
    and which in turn authenticates itself\n   to a company-wide collector.\n   A
    relay can also serve to filter messages.  For example, one relay\n   may collect
    the syslog information from an entire web server farm,\n   summarizing hit counts
    for report generation, forwarding \"page not\n   found\" messages (indicating
    a possible broken link) to a collector\n   that presents it to the webmaster,
    and sending more urgent messages\n   (such as hardware failure reports) to a collector
    that gateways them\n   to a pager.  A relay may also be used to convert formats
    from a\n   device's output to a collector's input.\n   It should be noted that
    a role of device, relay, or collector is\n   relevant only to a particular BEEP
    channel (q.v., below).  A single\n   server can serve as a device, a relay, and
    a collector, all at once,\n   if so configured.  It can even serve as a relay
    and a collector to\n   the same device at the same time using different BEEP channels
    over\n   the same connection-oriented session; this might be useful to collect\n
    \  status yet relay urgent error messages.\n   To provide reliable delivery when
    realizing the syslog protocol, this\n   memo defines two BEEP profiles.  BEEP
    [3] is a generic application\n   protocol framework for connection-oriented, asynchronous\n
    \  interactions.  Within BEEP, features such as authentication, privacy,\n   and
    reliability through retransmission are provided.  There are two\n   profiles defined
    in this memo:\n   o  The RAW profile is designed to provide a high-performance,
    low-\n      impact footprint, using essentially the same format as the\n      existing
    UDP-based syslog service.\n   o  The COOKED profile is designed to provide a structured
    entry\n      format, in which individual entries are acknowledged (either\n      positively
    or negatively).\n   Note that both profiles run over BEEP.  BEEP defines \"transport\n
    \  mappings,\" specifying how BEEP messages are carried over the\n   underlying
    transport technologies.  At the time of this writing, only\n   one such transport
    is defined, in [4], which specifies BEEP over TCP.\n   All transport mappings
    are required to support enough reliability and\n   sequencing to allow all BEEP
    messages on a given channel to be\n   delivered reliably and in order.  Hence,
    both the RAW and COOKED\n   profile provide reliable delivery of their messages.\n
    \  The choice of profile is independent of the operational roles\n   discussed
    above.\n   For example, in\n     +--------+        +-------+        +-----------+\n
    \    | Device | -----> | Relay | -----> | Collector |\n     +--------+        +-------+
    \       +-----------+\n   the device-to-relay link could be configured to use
    the RAW profile,\n   while the relay-to-collector link could be configured to
    use the\n   COOKED profile.  (For example, the relay may be parsing the RAW\n
    \  syslog messages from the device, knowing the details of their\n   formats,
    before passing them to a more generic collector.) Indeed,\n   the same device
    may use different profiles, depending on the\n   collector to which it is sending
    entries.\n   Devices and relays MAY discover relays and collectors via the DNS
    SRV\n   algorithm [5].  If so configured, the service used is \"syslog\" and\n
    \  the protocol used is \"tcp\".  This allows for central administration\n   of
    addressing, fallback for failed relays and collectors, and static\n   load balancing.
    \ Security policies and hardware configurations may be\n   such that device configuration
    is more secure than the DNS server.\n   Hardware devices may be of such limited
    resources that DNS SRV access\n   is inappropriate.  Firewalls and other restrictive
    routing mechanisms\n   may need to be dealt with before a reliable syslog connection
    can be\n   established.  In these cases, DNS might not be the most appropriate\n
    \  configuration mechanism.\n"
  title: 2. The Model
- contents:
  - '3. The RAW Profile

    '
  - contents:
    - "3.1 RAW Profile Overview\n   The RAW profile is designed for minimal implementation
      effort, high\n   efficiency, and backwards compatibility.  It is appropriate\n
      \  especially in cases where legacy syslog processing will be applied.\n   It
      should be noted that even though the RAW profile uses the same\n   format for
      message payloads as the UDP version of syslog uses,\n   delivery is reliable.
      \ The RAW syslog profile is a profile of BEEP\n   [3], and BEEP guarantees ordered
      reliable delivery of messages within\n   each individual channel.\n   When the
      profile is started, no piggyback data is supplied.  All BEEP\n   messages in
      the RAW profile are specified as having a MIME Content-\n   Type [6] of application/octet-stream.
      \ Once the channel is open, the\n   listener (not the initiator) sends a MSG
      message indicating it is\n   ready to act as a syslog sink.  (Refer to [3]'s
      Section 2.1 for a\n   discussion of roles that a BEEP peer may perform, including\n
      \  definitions of the terms \"listener\", \"initiator\", \"client\", and\n   \"server\".)\n
      \  The initiator uses ANS replies to supply one or more syslog entries\n   in
      the current UDP format, as specified in [1]'s Section 3.  When the\n   initiator
      has no more entries to send, it finishes with a NUL reply\n   and closes the
      channel.\n   An example might appear as follows:\n      L: <wait for incoming
      connection>\n      I: <establish connection>\n      L: RPY 0 0 . 0 201\n      L:
      Content-type: application/beep+xml\n      L:\n      L: <greeting>\n      L:
      \  <profile\n      L:     uri='http://xml.resource.org/profiles/syslog/COOKED'
      />\n      L:   <profile uri='http://xml.resource.org/profiles/syslog/RAW' />\n
      \     L: </greeting>\n      L: END\n      I: RPY 0 0 . 0 52\n      I: Content-type:
      application/beep+xml\n      I:\n      I: <greeting />\n      I: END\n      I:
      MSG 0 1 . 52 133\n      I: Content-type: application/beep+xml\n      I:\n      I:
      <start number='1'>\n      I:   <profile uri='http://xml.resource.org/profiles/syslog/RAW'
      />\n      I: </start>\n      I: END\n      L: RPY 0 1 . 201 100\n      L: Content-type:
      application/beep+xml\n      L:\n      L: <profile uri='http://xml.resource.org/profiles/syslog/RAW'
      />\n      L: END\n      L: MSG 1 0 . 0 50\n      L:\n      L: Central Services.
      This has not been a recording.\n      L: END\n      I: ANS 1 0 . 0 61 0\n      I:\n
      \     I: <29>Oct 27 13:21:08 ductwork imxpd[141]: Heating emergency.END\n      I:
      ANS 1 0 . 61 58 1\n      I:\n      I: <29>Oct 27 13:22:15 ductwork imxpd[141]:
      Contact Tuttle.END\n      I: NUL 1 0 . 119 0\n      I: END\n      L: MSG 0 3
      . 301 70\n      L: Content-Type: application/beep+xml\n      L:\n      L: <close
      number='1' code='200' />\n      L: END\n      I: RPY 0 3 . 185 46\n      I:
      Content-Type: application/beep+xml\n      I:\n      I: <ok />\n      I: END\n
      \     I: MSG 0 4 . 231 72\n      I: Content-Type: application/beep+xml\n      I:\n
      \     I: <close number='0' code='200' />\n      I: END\n      L: RPY 0 4 . 371
      46\n      L: Content-type: application/beep+xml\n      L:\n      L: <ok />\n
      \     L: END\n      L: <closes connection>\n      I: <closes connection>\n      L:
      <awaits next connection>\n   Here we see a BEEP session established, followed
      by the use of the\n   RAW profile.  The initiator is a device, while the listener
      is a\n   collector.  The initiator opens the channel, but the listener sends\n
      \  the first MSG.  This allows the initiator to send any number of ANS\n   replies
      carrying syslog event messages.  The initiator sends a NUL\n   reply to indicate
      it is finished.  Upon receiving the NUL, the\n   listener closes the RAW channel.
      \ The initiator has the choice of\n   closing the entire BEEP session or opening
      a new syslog channel (RAW\n   or COOKED) for more transfers.  In this example,
      the initiator\n   chooses to close the entire BEEP session.\n   The overhead
      for one ANS frame is about thirty octets, once the\n   initial handshakes have
      been exchanged.  If this overhead is too\n   high, then messages are likely
      being generated at a high rate.  In\n   this case, multiple syslog messages
      can be aggregated into a single\n   ANS frame, each separated by a CRLF sequence
      from the preceding.  The\n   final message still MUST NOT end with a CRLF.\n
      \  For example,\n      L: MSG 1 0 . 0 50\n      L:\n      L: Central Services.
      This has not been a recording.\n      L: END\n      I: ANS 1 0 . 0 119 0\n      I:\n
      \     I: <29>Oct 27 13:21:08 ductwork imxpd[141]: Heating emergency.\n      I:
      <29>Oct 27 13:21:09 ductwork imxpd[141]: Contact Tuttle.END\n      I: NUL 1
      0 . 119 0\n      I: END\n"
    title: 3.1 RAW Profile Overview
  - contents:
    - "3.2 RAW Profile Identification and Initialization\n   The RAW syslog profile
      is identified as\n           http://xml.resource.org/profiles/syslog/RAW\n   in
      the BEEP \"profile\" element during channel creation.\n   No data is piggybacked
      during channel creation.\n"
    title: 3.2 RAW Profile Identification and Initialization
  - contents:
    - "3.3 RAW Profile Message Syntax\n   All BEEP messages in this profile have a
      MIME content-type of\n   application/octet-stream.  The listener's first BEEP
      message is\n   ignored and indeed may be empty except for headers; hence, any
      syntax\n   is acceptable.\n   The ANS replies the initiator sends in response
      MUST be formatted\n   according to Section 4 of [1].  In particular, If the
      receiver is\n   acting as a relay, then it MUST follow the rules as laid out
      in\n   Section 4.2.2 of [1].\n   If multiple syslog messages are included in
      a single ANS reply, each\n   is separated from the preceding with a CRLF.  There
      is no ending\n   delimiter, but each syslog event message body length MUST be
      1024\n   bytes or less, excluding BEEP framing overhead.  Note that there MUST\n
      \  NOT be a CRLF between the text of the final syslog event message and\n   the
      \"END\" marking the trailer of the BEEP frame.\n"
    title: 3.3 RAW Profile Message Syntax
  - contents:
    - "3.4 RAW Profile Message Semantics\n   The listener's opening BEEP MSG message
      has no semantics.  (It is a\n   good place to put in an identifying greeting.)
      The initiator's ANS\n   replies MUST specify a facility, severity, and textual
      message, as\n   described in [1].\n"
    title: 3.4 RAW Profile Message Semantics
  title: 3. The RAW Profile
- contents:
  - '4. The COOKED Profile

    '
  - contents:
    - "4.1 COOKED Profile Overview\n   The COOKED profile is designed for new implementations
      of syslog\n   protocol handlers.  It provides a much finer grain of information\n
      \  tagging, allowing a better degree of automation in processing.\n   Naturally,
      it includes more overhead as well in support of this.\n   The COOKED profile
      supports three elements of interest:\n   o  The \"iam\" element identifies the
      sender to the receiver, allowing\n      each peer to name itself for the other,
      and specifying the roles\n      (device, relay, or collector) each is taking
      on.\n   o  The \"entry\" element provides a parsed version of the syslog entry,\n
      \     with the various fields of interest broken out.\n   o  The \"path\" element
      identifies a list of relays through which a\n      tagged collection of \"entry\"
      elements has passed, along with a set\n      of flags indicating what assurances
      of security have been in\n      effect throughout its delivery.\n"
    title: 4.1 COOKED Profile Overview
  - contents:
    - "4.2 COOKED Profile Identification and Initialization\n   The COOKED syslog
      profile is identified as\n       http://xml.resource.org/profiles/syslog/COOKED\n
      \  in the BEEP \"profile\" element during channel creation.\n   During channel
      creation, the corresponding \"profile\" element in the\n   BEEP \"start\" element
      may contain an \"iam\" element.  If channel\n   creation is successful, then
      before sending the corresponding reply,\n   the BEEP peer processes the \"iam\"
      element and includes the resulting\n   response in the reply.  This response
      will be an \"ok\" element or an\n   \"error\" element.  The choice of which
      element is returned is\n   dependent on local provisioning of the recipient.
      \ Including an \"iam\"\n   in the initial \"start\" element has exactly the
      same semantics as\n   passing it as the first MSG message on the channel.\n"
    title: 4.2 COOKED Profile Identification and Initialization
  - contents:
    - "4.3 COOKED Profile Message Syntax\n   All BEEP messages in this profile have
      a MIME Content-Type [6] of\n   application/beep+xml.  The syntax of the individual
      elements is\n   specified in Section 7.\n"
    title: 4.3 COOKED Profile Message Syntax
  - contents:
    - "4.4 COOKED Profile Message Semantics\n   Initiators issue two elements: \"iam\"
      and \"entry\", each using a \"MSG\"\n   message.  The listener issues \"ok\"
      in \"RPY\" messages and \"error\" in\n   \"ERR\" messages.  (See [3]'s Section
      2.3.1 for the definitions of the\n   \"error\" and \"ok\" elements.)\n"
    - contents:
      - "4.4.1 The IAM Element\n   The \"iam\" element serves to identify a device,
        relay, or collector at\n   one end of the BEEP channel to the device, relay,
        or collector at the\n   other end of the channel.  The \"iam\" element includes
        the type of\n   peer (device, relay, or collector), the fully qualified domain
        name\n   of the peer, and an IP address of the peer.  (The IP address chosen\n
        \  SHOULD be the IP address associated with the underlying transport\n   protocol
        carrying the channel.)  The character data of the element is\n   free-form
        human-readable text.  It may be used to further identify\n   the peer, such
        as by describing the physical location of the machine.\n   An \"iam\" element
        may be sent by the initiator of the channel at any\n   time.  The listener
        responds to an \"iam\" element with an \"ok\"\n   (indicating acceptance),
        or an \"error\" (indicating rejection).  The\n   identity and role in effect
        is specified by the most recent \"iam\"\n   answered with an \"ok\".\n   An
        \"iam\" could be rejected (with an \"error\" element) by the listener\n   if
        the privacy or authentication that has been negotiated is\n   inadequate or
        if the authenticated user does not have authorization\n   to serve in the
        specified role.  It is expected that most\n   installations will require an
        \"iam\" from the peer before accepting\n   any \"entry\" messages.\n   For
        example, a successful creation might look like this:\n      I: MSG 0 10 .
        1832 259\n      I: Content-type: application/beep+xml\n      I:\n      I:
        <start number='1'>\n      I:   <profile\n      I:       uri='http://xml.resource.org/profiles/syslog/COOKED'>\n
        \     I:     <![CDATA[ <iam fqdn='lowry.example.com' ip='10.0.0.27'\n      I:
        \      type='device'/> ]]>\n      I:   </profile>\n      I: </start>\n      L:
        END\n      L: RPY 0 10 . 704 138\n      L: Content-type: application/beep+xml\n
        \     L:\n      L: <profile uri='http://xml.resource.org/profiles/syslog/COOKED'>\n
        \     L:   <![CDATA[ <ok /> ]]>\n      L: </profile>\n      L: END\n   A creation
        with an embedded \"iam\" that fails might look like this:\n      C: MSG 0
        12 . 1832 259\n      C: Content-type: application/beep+xml\n      C:\n      C:
        <start number='1'>\n      C:   <profile\n      C:       uri='http://xml.resource.org/profiles/syslog/COOKED'>\n
        \     C:     <![CDATA[ <iam fqdn='tuttle.example.com' ip='10.0.0.29'\n      C:
        \      type='relay'/> ]]>\n      C:   </profile>\n      C: </start>\n      C:
        END\n      S: RPY 0 12 . 704 241\n      S: Content-type: application/beep+xml\n
        \     S:\n      S: <profile uri='http://xml.resource.org/profiles/syslog/COOKED'>\n
        \     S:   <![CDATA[\n      S:     <error code='535'>User 'buttle.example.com'
        not allowed\n      S:       to \"iam\" for 'tuttle.example.com'</error> ]]>\n
        \     S: </profile>\n      S: END\n   In this case, the error code indicates
        that the user\n   \"buttle.example.com\" has logged in via some SASL profile,
        but the\n   syslog COOKED profile implementation is claiming to be\n   \"tuttle.example.com\",
        a mismatch that the server is disallowing.\n"
      title: 4.4.1 The IAM Element
    - contents:
      - "4.4.2 The ENTRY Element\n   The \"entry\" element carries the details of
        a single syslog entry. The\n   attributes of an \"entry\" element include
        \"facility\", \"severity\",\n   \"timestamp\", \"hostname\", and \"tag\".
        \ \"Facility\" and \"severity\" have\n   the semantics defined in [1]'s 4.1.
        \ The other attributes have the\n   semantics as in Sections 4.2.1 and 4.2.3
        of [1].  An \"entry\" element\n   can also contain a \"pathID\" attribute,
        described below.\n   If the client is a relay, the \"entry\" SHOULD also contain
        the\n   attributes \"deviceFQDN\" and \"deviceIP\", specifying the FQDN and
        IP\n   address of the device that originally created the entry.  These\n   attributes
        may be added by either the relay or the originating\n   device.  If possible,
        the device SHOULD add these entries, referring\n   to the interface most closely
        associated with the syslog entry.\n   Before a relay forwards an entry from
        a device that does not carry\n   these attributes, it SHOULD add them based
        on the \"iam\" element it\n   has received from the device, or based on the
        underlying transport\n   connection address.  A relay MUST NOT add these fields
        if they are\n   missing and an \"iam\" element on the channel has indicated
        that\n   messages are coming from another relay.\n   The \"pathID\" attribute
        indicates the path over which this entry has\n   travelled, from device through
        relays to the final collector.\n   Syntactically, its value is a string of
        digits that must match the\n   \"pathID\" attribute of a \"path\" element
        sent earlier over the current\n   channel.  Semantically, it indicates that
        the list of relays and\n   flags indicated in that earlier \"path\" element
        apply to this \"entry\"\n   element.\n   The character data for the element
        is the unstructured syslog event\n   message being logged.  If the original
        device delivers the message\n   for the first time via the COOKED profile,
        it may have any structure\n   inside the CDATA.  However, for maximum compatibility,
        the device\n   SHOULD format the CDATA of the message in accordance with Sections\n
        \  4.2.1 through 4.2.3 of [1].\n   In the message is being relayed, \"tag\"
        SHOULD be those of the\n   original device generating the entry (unless the
        device cannot supply\n   a tag).  The \"timestamp\" SHOULD be that of the
        original entry\n   generation time, rather than the time the entry was passed
        outward\n   from the relay.  The \"hostname\" SHOULD be the host name or IP
        address\n   by which the device knows itself; this MUST follow the rules\n
        \  established in Sections 4.2.1 through 4.2.3 of [1].  The original\n   contents
        of the syslog message MUST be preserved in the CDATA of the\n   \"entry\"
        element; this includes preservation of exact content during\n   translation
        from the UDP or RAW formats.  In particular, the\n   timestamps MUST NOT be
        rewritten in the CDATA of the \"entry\" element,\n   the tag MUST NOT be removed
        from the CDATA even if presented in the\n   \"entry\" attributes as well,
        and so on.\n   To be consistent with the spirit of [1], a relay receiving
        a message\n   that does not contain a valid priority, timestamp or hostname
        will\n   follow the same general rules as described in section 4.2.2 of [1]\n
        \  while including the exact contents of the received syslog packet as\n   the
        CDATA.  The values of the facility and severity will be construed\n   to be
        8 and 6 respectively and will be placed into the appropriate\n   attributes
        of the \"entry\" element.  The hostname will be the name of\n   the device
        as it is known to the relay and will also be inserted into\n   the \"entry\"
        element's attributes.  The timestamp would be set to the\n   received time,
        inserted only into the attributes of the \"entry\"\n   element.  As an example,
        consider this message received on UDP port\n   514 and interpreted as a traditional
        syslog message, assuming the\n   underlying IP source address is that of the
        \"pipeworks\" machine:\n     <.....eeeek!\n   To be relayed, it must be modified
        as follows:\n         C: MSG 1 0 . 2079 156\n         C: Content-Type: application/beep+xml\n
        \        C:\n         C: <entry facility='8' severity='6'\n         C:   hostname='pipeworks'\n
        \        C:   timestamp='Oct 31 23:59:59'\n         C:  >&lt;.....eeeek!</entry>\n
        \        C: END\n         S: RPY 1 0 . 933 45\n         S: Content-Type: application/beep+xml\n
        \        S:\n         S: <ok/>\n         S: END\n   As another example, consider
        a message being received that does not\n   properly adhere to the conventions
        described in Section 4.2.2 of [1].\n   In particular, the timestamp has a
        year, making it a nonstandard\n   format:\n        <166> 1990 Oct 22 01:00:00
        bomb tick[0]: BOOM!\n   This would be relayed as follows:\n         C: MSG
        1 0 . 2235 242\n         C: Content-Type: application/beep+xml\n         C:\n
        \        C: <entry facility='160' severity='6'\n         C:   hostname='bomb'\n
        \        C:   deviceFQDN='bomb.terrorist.net' deviceIP='10.0.0.83'\n         C:
        \  timestamp='Oct 22 01:00:04'\n         C:  >&lt;166> 1990 Oct 22 01:00:00
        bomb tick[0]: BOOM!</entry>\n         C: END\n         S: RPY 1 0 . 978 45\n
        \        S: Content-Type: application/beep+xml\n         S:\n         S: <ok/>\n
        \        S: END\n   Note that the tag value was not readily apparent from
        the received\n   message (due to the failed parsing of the timestamp), so
        it was not\n   included in the \"entry\" element.\n   It is explicitly permitted
        for a relay to parse raw messages in a\n   more sophisticated way, but all
        implementations MUST be able to parse\n   messages presented in the format
        described in [1].  A more\n   sophisticated relay could have recognized the
        year and completely\n   parsed out the correct time, tag, and hostname, but
        such additional\n   parsing capability is OPTIONAL.\n   Consider the following
        example, in contrast:\n        <166> Oct 22 01:00:00 bomb tick[0]: BOOM!\n
        \  This conformant message would be relayed as follows:\n         C: MSG 1
        0 . 2477 248\n         C: Content-Type: application/beep+xml\n         C:\n
        \        C: <entry facility='160' severity='6'\n         C:   hostname='bomb'\n
        \        C:   deviceFQDN='bomb.terrorist.net' deviceIP='10.0.0.83'\n         C:
        \  timestamp='Oct 22 01:00:00' tag='tick'\n         C:  >&lt;166> Oct 22 01:00:00
        bomb tick[0]: BOOM!</entry>\n         C: END\n         S: RPY 1 0 . 1023 45\n
        \        S: Content-Type: application/beep+xml\n         S:\n         S: <ok/>\n
        \        S: END\n   In this case, the tag is detected and the timestamp represents
        the\n   message generation time rather than the message reception time.\n
        \  Finally, the \"entry\" element may also contain an \"xml:lang\"\n   attribute,
        indicating the language in which the CDATA content of the\n   tag is presented,
        as described in [7].\n   The \"entry\" element is answered with either an
        empty \"ok\" element if\n   everything was successful, or a standard \"error\"
        element if there was\n   a problem.  An \"entry\" element can be rejected
        if no \"iam\" element\n   has been accepted by the listener.  It can also
        be rejected if the\n   user authenticated on the BEEP session (if any) does
        not have the\n   authority to generate (as a device) or relay that entry.
        \ An error is\n   also possible if the \"pathID\" attribute refers to an unknown
        (or\n   rejected) \"path\" element.\n   A successful exchange of an \"entry\"
        element may look like this:\n      C: MSG 1 0 . 2725 173\n      C: Content-Type:
        application/beep+xml\n      C:\n      C: <entry facility='24' severity='5'\n
        \     C:   timestamp='Jan 26 15:16:17'\n      C:   hostname='pipework' tag='imxp'>\n
        \     C:     No 27B/6 available</entry>\n      C: END\n      S: RPY 1 0 .
        1068 45\n      S: Content-Type: application/beep+xml\n      S:\n      S: <ok/>\n
        \     S: END\n   Here, the device IP address and FQDN are taken from the \"iam\"\n
        \  element, if any, or from the underlying connection information.\n   An
        example where an \"entry\" element is rejected with an \"error\"\n   element:\n
        \     C: MSG 1 2 . 2898 223\n      C: Content-Type: application/beep+xml\n
        \     C:\n      C: <entry facility='24' severity='5' timestamp='Jan 02 13:22:15'\n
        \     C:   deviceFQDN='jack.example.net' deviceIP='10.0.0.83'\n      C:   tag='imxpd'>\n
        \     C:     Replacement device found in nostril.\n      C: </entry>\n      C:
        END\n      S: ERR 1 2 . 1113 111\n      S: Content-Type: application/beep+xml\n
        \     S:\n      S: <error code='554'>Not allowed to relay for\n      S:    jack.example.net</error>\n
        \     S: END\n   Here, the client attempts to relay an entry on behalf of\n
        \  jack.example.com, but the entry is refused by the collector for\n   administrative
        reasons.  This may occur, for example, if\n   lowry.example.com is in a different
        department than jack.example.com.\n"
      title: 4.4.2 The ENTRY Element
    - contents:
      - "4.4.3 The PATH Element\n   The \"path\" element serves to describe a list
        of the relays through\n   which that element has passed, along with a set
        of flags that\n   indicate the properties that all links from the device to
        the relay\n   have shared in common.  Each \"path\" element contains either
        another\n   \"path\" element or is empty.  An empty \"path\" element identifies
        a\n   device, while a \"path\" element with a nested \"path\" element\n   identifies
        a relay.  Each \"path\" element names a FQDN and IP address\n   of the interface
        that sent the element.  Each \"path\" element also\n   names a FQDN and IP
        address for the interface that received the\n   element.  Each \"path\" element
        also carries a \"linkprops\" attribute,\n   specifying the properties of the
        link it describes.\n   Each \"path\" element has a \"pathID\" attribute which
        must be unique for\n   all \"path\" elements sent on this channel since its
        inception.\n   Syntactically, the \"pathID\" attribute is a string of digits.\n
        \  Semantically, it serves to identify one \"path\" element out of many,\n
        \  and it serves to link a \"path\" element with one or more \"entry\"\n   elements.
        \ Any \"pathID\" attribute is unrelated to any \"pathID\"\n   attribute in
        nested \"path\" elements or on other channels.\n   Each \"path\" element has
        a \"fromFQDN\" attribute and an \"fromIP\"\n   attribute.  The \"fromFQDN\"
        attribute SHOULD be the fully qualified\n   domain name of the interface over
        which the \"path\" element was sent.\n   (The \"fromFQDN\" can be omitted
        if that interface has no DNS entry.)\n   Similarly, the \"fromIP\" attribute
        MUST be the IP address of the\n   interface over which the \"path\" element
        was sent.\n   Each \"path\" element has a \"toFQDN\" attribute and an \"toIP\"
        attribute.\n   The \"toFQDN\" attribute SHOULD be the fully qualified domain
        name of\n   the interface over which the \"path\" element was received.  (The\n
        \  \"toFQDN\" can be omitted if that interface has no DNS entry.)\n   Similarly,
        the \"toIP\" attribute MUST be the IP address of the\n   interface over which
        the \"path\" element was received.\n   Finally, each \"path\" element carries
        a \"linkprops\" attribute.  This\n   is syntactically a string of individual
        characters, each indicating\n   one property of the channel over which this
        \"path\" element is being\n   carried.  Note that outer \"path\" elements
        may have stronger\n   guarantees than inner \"path\" elements; care should
        be taken in the\n   interpretation of flags.  The semantics of each possible
        character in\n   this string are as follows:\n   o: When present, \"o\" (lower-case
        letter \"o\") indicates that weak\n      privacy has been negotiated over
        this link, weakly protecting from\n      observation the content of entries
        associated with this \"path\"\n      element.  (Weak privacy is encryption
        with less than 80 bits of\n      key.)\n   O: When present, \"O\" (upper-case
        letter \"O\") indicates that strong\n      privacy has been negotiated over
        this link, strongly protecting\n      from observation the content of entries
        associated with this\n      \"path\" element.  (Strong privacy is encryption
        with 80 bits or\n      more of key, or a transfer mechanism that is otherwise
        impossible\n      to eavesdrop upon.)\n   U: When present, \"U\" indicates
        that a valid user has been\n      authenticated (via SASL or TLS) and an \"iam\"
        element has been\n      accepted.\n   A: When present, \"A\" indicates that
        this link has been protected by\n      an authentication layer, authenticating
        the source of every\n      \"entry\" associated with this path.\n   R: When
        present, \"R\" indicates that this link has been protected\n      against
        message replay.\n   I: When present, \"I\" indicates that this link has been
        protected\n      against modifications of messages in passing.  (\"I\" stands
        for\n      message Integrity.)\n   L: When present, \"L\" indicates that this
        link has been protected\n      against loss of messages.  That is, this is
        a reliable delivery\n      link.\n   D: When present, \"D\" indicates that
        the \"from\" side of this link is a\n      device.  If this is not present
        on the innermost \"path\" element,\n      \"entry\" elements associated with
        this path have not been carried\n      by the COOKED profile for their entire
        lifetime.\n   Upon receiving a \"path\" element, the peer MUST perform the
        following\n   checks:\n   o  The \"fromFQDN\" and \"fromIP\" must match the
        underlying transport\n      connection.\n   o  The flags in the \"linkprops\"
        attribute must match the attributes\n      of the session.\n   o  The \"toFQDN\"
        and \"toIP\" must match the underlying transport\n      connection.\n   o
        \ The \"pathID\" attribute must be unique with respect to all other\n      \"path\"
        elements received on this channel.\n   If all these checks pass, the \"path\"
        element is accepted with an \"ok\"\n   element.  Otherwise, an \"error\" element
        is generated with an\n   appropriate code.  In addition, if any of the nested
        \"path\" elements\n   refer to the machine receiving the element, it may indicate
        a routing\n   loop in the configuration for the so-identified path, and appropriate\n
        \  measures should be taken.\n   If the peer receiving an \"entry\" element
        is receiving it directly\n   from a device via either syslog-conn profile,
        and the device has not\n   generated a \"path\" element, the receiver may
        itself generate an\n   appropriate \"path\" element, either to be recorded
        in the logs (if\n   this peer is a collector) or passed to the next peer (if
        this peer is\n   a relay).  If a peer receives a syslog message via UDP, it
        may\n   optionally generate an appropriate \"peer\" element based on any\n
        \  cryptographic information provided in the message itself.\n   When a peer
        receives a \"path\" element, it remembers it for future\n   use.  A collector
        will store it in the log for later reference.  A\n   relay will remember it.
        \ When an \"entry\" arrives referencing the\n   received \"path\" element,
        and that entry needs to be forwarded to\n   another relay or collector, and
        no appropriate \"path\" element has\n   already been generated, an appropriate
        \"path\" element is generated\n   and sent over the outbound channel before
        the entry is forwarded.  An\n   appropriate \"path\" element is created by
        taking the received \"path\"\n   element, wrapping it in a new \"path\" element
        with the appropriate\n   attributes, and assigning it a new \"pathID\" attribute.
        \ When future\n   \"entry\" elements arrive with the same incoming \"pathID\"
        attribute,\n   and they need to be forwarded to a channel over which an appropriate\n
        \  \"pathID\" attribute has already been sent, only the \"pathID\" attribute\n
        \  of the \"entry\" element needs to be rewritten to refer to the \"path\"\n
        \  element on the outgoing channel.\n   It should be noted that the majority
        of the complexity in managing\n   \"path\" elements arises only in relays.
        \ In particular, devices never\n   need to generate \"path\" elements and
        collectors need only verify\n   them, log them, and possibly use them in displays
        and reports.\n   Collectors do not need to generate \"path\" elements or rewrite
        \"entry\"\n   elements.  Hence, only in complex configurations (where they
        are most\n   useful) do complex \"path\" configurations occur.\n   For example,
        here is a path element sent from\n   lowry.records.example.com to kurtzman.records.example.com.
        \ It\n   indicates that entries from lowry to kurtzman tagged with\n   pathID='173'
        originated from screen.lowry.records.example.com.  It\n   indicates that screen.lowry.records.example.com
        is believed by\n   lowry.records.example.com to be the originating device,
        and that\n   entries over this path are delivered without loss and without\n
        \  modification, although messages might be replayed or observed.  The\n   link
        between lowry and kurtzman, however, avoids replay attacks, lost\n   messages,
        and modifications to messages.  While\n   screen.lowry.records.example.com
        has not authenticated itself to\n   lowry.records.example.com, lowry claims
        to have authenticated itself\n   to kurtzman.\n      C: MSG 2 1 . 3121 426\n
        \     C: Content-type: application/beep+xml\n      C:\n      C: <path fromFQDN='lowry.records.example.com'\n
        \     C:       fromIP='10.0.0.50'\n      C:       toFQDN='kurtzman.records.example.com'\n
        \     C:       toIP='10.0.0.51'\n      C:       linkprops='ULRI'\n      C:
        \      pathID='173'>\n      C: <path fromFQDN='screen.lowry.records.example.com'\n
        \     C:       fromIP='10.0.0.47'\n      C:       toFQDN='lowry.records.example.com'\n
        \     C:       toIP='10.0.0.50'\n      C:       linkprops='DLI'\n      C:
        \      pathID='24'>\n      C: </path>\n      C: </path>\n      C: END\n      S:
        ERR 2 1 . 1224 114\n      S: Content-type: application/beep+xml\n      S:\n
        \     S: <error code='530'>linkprops includes 'U'\n      S:   but no 'iam'
        received</error>\n      S: END\n   However, kurtzman.records.example.com rejects
        the \"path\" element,\n   since the \"linkprops\" attribute claims that lowry
        has authenticated\n   itself, but kurtzman disagrees, not having received
        an \"iam\" element.\n   In a second example, this \"path\" element informs\n
        \  collector.example.com that the records department's firewall will be\n
        \  forwarding \"entry\" elements with a \"pathID\" attribute whose value is\n
        \  \"17\".  These \"entry\" elements will be coming in on the \"10.0.0.2\"\n
        \  interface of the firewall, to be forwarded out the \"134.130.74.56\"\n
        \  interface of the firewall.  The final hop has all possible\n   guarantees,
        although the entries transferred within the records\n   department (behind
        the firewall) may have been observed in passing.\n      C: MSG 2 2 . 3547
        813\n      C: Content-type: application/beep+xml\n      C:\n      C: <path
        fromFQDN='fwall.records.example.com'\n      C:       fromIP='134.130.74.56'\n
        \     C:       toFQDN='collector.example.com'\n      C:       toIP='134.130.74.12'\n
        \     C:       linkprops='OUARIL'\n      C:       pathID='17'>\n      C: <path
        fromFQDN='kurtzman.records.example.com'\n      C:       fromIP='10.0.0.50'\n
        \     C:       toFQDN='fwall.records.example.com'\n      C:       toIP='10.0.0.2'\n
        \     C:       linkprops='ULRI'\n      C:       pathID='120'>\n      C: <path
        fromFQDN='lowry.records.example.com'\n      C:       fromIP='10.0.0.50'\n
        \     C:       toFQDN='kurtzman.records.example.com'\n      C:       toIP='10.0.0.51'\n
        \     C:       linkprops='ULRI'\n      C:       pathID='173'>\n      C: <path
        fromFQDN='screen.lowry.records.example.com'\n      C:       fromIP='10.0.0.47'\n
        \     C:       toFQDN='lowry.records.example.com'\n      C:       toIP='10.0.0.50'\n
        \     C:       linkprops='DLI'\n      C:       pathID='24'>\n      C: </path></path></path></path>\n
        \     C: END\n      S: RPY 2 2 . 1338 45\n      S: Content-type: application/beep+xml\n
        \     S:\n      S: <ok/>\n      S: END\n   As a final example, an \"entry\"
        element from Lowry's screen arrives at\n   the firewall.  The \"path\" attribute
        is rewritten, and it is forwarded\n   on to the collector.\n      The entry
        arrives on the 10.0.0.2 interface:\n      C: MSG 2 3 . 4360 250\n      C:
        Content-Type: application/beep+xml\n      C:\n      C: <entry facility='24'
        severity='5'\n      C:   timestamp='Oct 27 13:24:12'\n      C:   deviceFQDN='screen.lowry.records.example.com'\n
        \     C:   deviceIP='10.0.0.47'\n      C:   pathID='173'\n      C:   tag='dvd'>\n
        \     C:     Job paused - Boss watching.\n      C: </entry>\n      C: END\n
        \     S: RPY 2 3 . 1383 45\n      S: Content-Type: application/beep+xml\n
        \     S:\n      S: <ok/>\n      S: END\n      It is forwarded out the 134.130.74.56
        interface:\n      C: MSG 7 9 . 9375 276\n      C: Content-Type: application/beep+xml\n
        \     C:\n      C: <entry facility='24' severity='5'\n      C:   timestamp='Oct
        27 13:24:12'\n      C:   deviceFQDN='screen.lowry.records.example.com'\n      C:
        \  deviceIP='10.0.0.47'\n      C:   pathID='17'\n      C:   tag='dvd'>\n      C:
        \    Job paused - Boss watching.\n      C: </entry>\n      C: END\n      S:
        RPY 7 9 . 338 45\n      S: Content-Type: application/beep+xml\n      S:\n
        \     S: <ok/>\n      S: END\n   A discussion of the wisdom of configuring
        Lowry's machine to forward\n   such messages via Kurtzman's machine is beyond
        the scope of this\n   document.\n"
      title: 4.4.3 The PATH Element
    title: 4.4 COOKED Profile Message Semantics
  title: 4. The COOKED Profile
- contents:
  - "5. Additional Provisioning\n   In more advanced configurations, syslog devices,
    relays, and\n   collectors can be configured to support various delivery priorities.\n
    \  Multiple channels running the same profile can be opened between two\n   peers,
    with higher priority syslog messages routed to a channel that\n   is given more
    bandwidth.  Such provisioning is a local matter.\n   syslog [1] discusses a number
    of reasons why privacy and\n   authentication of syslog entry messages may be
    important in a\n   networked computing environment.  The nature of BEEP allows
    for\n   convenient layering of authentication and privacy over any BEEP\n   channel.\n"
  - contents:
    - "5.1 Message Authenticity\n   Section 6.2 of [1] discusses the dangers of unauthenticated
      syslog\n   entries.  To prevent inauthentic syslog event messages from being\n
      \  accepted, configure syslog peers to require the use of a strong\n   authentication
      technology for the BEEP session.\n   If provisioned for message authentication,
      implementations SHOULD use\n   SASL mechanism DIGEST-MD5 [8] to provision this
      service.\n"
    title: 5.1 Message Authenticity
  - contents:
    - "5.2 Message Replay\n   Section 6.3.4 of [1] discusses the dangers of syslog
      message replay.\n   To prevent syslog event messages from being replayed, configure\n
      \  syslog peers to require the use of a strong authentication technology\n   for
      the BEEP session.\n   If provisioned to detect message replay, implementations
      SHOULD use\n   SASL mechanism DIGEST-MD5 [8] to provision this service.\n"
    title: 5.2 Message Replay
  - contents:
    - "5.3 Message Integrity\n   Section 6.5 of [1] discusses the dangers of syslog
      event messages\n   being maliciously altered by an attacker.  To prevent messages
      from\n   being altered, configure syslog peers to require the use of a strong\n
      \  authentication technology for the BEEP session.\n   If provisioned to protect
      message integrity, implementations SHOULD\n   use SASL mechanism DIGEST-MD5
      [8] to provision this service.\n"
    title: 5.3 Message Integrity
  - contents:
    - "5.4 Message Observation\n   Section 6.6 of [1] discusses the dangers (and benefits)
      of syslog\n   messages being visible at intermediate points along the transmission\n
      \  path between device and collector.  To prevent messages from being\n   viewed
      by an attacker, configure syslog peers to require the use of a\n   transport
      security profile for the BEEP session.  (However, other\n   traffic characteristics,
      e.g., volume and timing of transmissions,\n   remain observable.)\n   If provisioned
      to secure messages against unauthorized observation,\n   implementations SHOULD
      use the TLS profile [3] to provision this\n   service.  The cipher algorithm
      used SHOULD be\n   TLS_RSA_WITH_3DES_EDE_CBC_SHA.\n"
    title: 5.4 Message Observation
  - contents:
    - "5.5 Summary of Recommended Practices\n   For the indicated protections, implementations
      SHOULD be configured\n   to use the indicated mechanisms:\n    Desired Protection
      \ SHOULD tune using\n    ------------------  -----------------\n    Authentication
      \     http://iana.org/beep/SASL/DIGEST-MD5\n      + Replay          http://iana.org/beep/SASL/DIGEST-MD5\n
      \       + Integrity     http://iana.org/beep/SASL/DIGEST-MD5\n          + Observation
      http://iana.org/beep/TLS\n   BEEP peer identities used for authentication SHOULD
      correspond to the\n   FQDN of the initiating peer.  That is, a relay running
      on\n   relay.example.com should use a \"user ID\" of \"relay.example.com\"\n
      \  within the SASL authentication profiles, as well as in the FQDN of\n   the
      \"iam\" element.\n"
    title: 5.5 Summary of Recommended Practices
  title: 5. Additional Provisioning
- contents:
  - '6. Initial Registrations

    '
  - contents:
    - "6.1 Registration: The RAW Profile\n   Profile Identification: http://xml.resource.org/profiles/syslog/RAW\n
      \  Messages exchanged during Channel Creation: None\n   Messages starting one-to-one
      exchanges: Anything\n   Messages in positive replies: None\n   Messages in negative
      replies: None\n   Messages in one-to-many exchanges: Anything\n   Message Syntax:
      See Section 3.3\n   Message Semantics: See Section 3.4\n   Contact Information:
      See the \"Authors' Addresses\" section of this\n      memo\n"
    title: '6.1 Registration: The RAW Profile'
  - contents:
    - "6.2 Registration: The COOKED Profile\n   Profile Identification:\n      http://xml.resource.org/profiles/syslog/COOKED\n
      \  Messages exchanged during Channel Creation: iam\n   Messages starting one-to-one
      exchanges: iam, entry, path\n   Messages in positive replies: ok\n   Messages
      in negative replies: error\n   Messages in one-to-many exchanges: None\n   Message
      Syntax: See Section 4.3\n   Message Semantics: See Section 4.4\n   Contact Information:
      See the \"Authors' Addresses\" section of this\n      memo\n"
    title: '6.2 Registration: The COOKED Profile'
  title: 6. Initial Registrations
- contents:
  - "7. The syslog DTD\n   The following is the DTD defining the valid elements for
    the syslog\n   over BEEP mapping.\n   <!--\n     DTD for syslog over BEEP, as
    of 2000-10-10\n     Refer to this DTD as:\n       <!ENTITY % SYSLOG PUBLIC \"-//Blocks//DTD
    SYSLOGRELIABLE//EN\" \"\">\n       %SYSLOG;\n     -->\n   <!--\n     Contents\n
    \      Overview\n       Includes\n       Profile Summaries\n       Entity Definitions\n
    \      Operations\n           iam\n           entry\n           path\n     -->\n
    \  <!--\n     Overview\n       Syslog packets delivered via BEEP\n     -->\n   <!--
    Includes -->\n          <!ENTITY % BEEP PUBLIC \"-//Blocks//DTD BEEP//EN\"\n                     \"\">\n
    \         %BEEP;\n   <!--\n     Profile summaries\n       BEEP profile SYSLOG-RAW\n
    \      role        MSG        ANS        ERR\n       ====        ===        ===
    \       ===\n        L          text       text       text\n       BEEP profile
    SYSLOG-COOKED\n       role        MSG        RPY        ERR\n       ====        ===
    \       ===        ===\n       I or L      iam        ok         error\n       I
    or L      entry      ok         error\n       I or L      path       ok         error\n
    \  -->\n   <!--\n     Entity Definitions\n           entity        syntax/reference
    \    example\n           ======        ================     =======\n       a
    fully qualified domain name\n           FQDN          See [RFC-1034]       www.example.com\n
    \      a dotted-quad IP address\n           IP            1*3DIGIT \".\" 1*3DIGIT
    \".\"\n                          1*3DIGIT \".\" 1*3DIGIT\n                                              10.0.0.27\n
    \      a syslog facility\n           FACILITY      See [1]\n                         1*3DIGIT
    \            80\n       a syslog severity\n           SEVERITY      See [1]\n
    \                        DIGIT                 4\n       a timestamp       See
    [1]               Jan 03 18:43:12\n           TIMESTAMP\n       an identifying
    integer\n           IDINT         1*DIGIT               1027\n   -->\n   <!ENTITY
    % FQDN         \"CDATA\">\n   <!ENTITY % IP           \"CDATA\">\n   <!ENTITY
    % FACILITY     \"CDATA\">\n   <!ENTITY % SEVERITY     \"CDATA\">\n   <!ENTITY
    % TIMESTAMP    \"CDATA\">\n   <!ENTITY % IDINT        \"CDATA\">\n   <!--\n     The
    iam element declares the role and identity of the peer\n     issuing it. The contents
    of the element may include human-readable\n     informative text, such as the
    physical location of the computer\n     issuing the \"iam\".\n     -->\n   <!ELEMENT
    iam         (#PCDATA)>\n   <!ATTLIST iam\n             fqdn        %FQDN;                   #REQUIRED\n
    \            ip          %IP;                     #REQUIRED\n             type
    \       (device|relay|collector) #REQUIRED>\n   <!--\n     The entry element conveys
    a single syslog message.\n     -->\n   <!ELEMENT entry       (#PCDATA)>\n   <!ATTLIST
    entry\n             xml:lang    %LANG;                   \"i-default\"\n             facility
    \   %FACILITY;                #REQUIRED\n             severity    %SEVERITY;                #REQUIRED\n
    \            timestamp   %TIMESTAMP;               #IMPLIED\n             tag
    \        %ATEXT;                   #IMPLIED\n             deviceFQDN  %FQDN;                    #IMPLIED\n
    \            deviceIP    %IP;                      #IMPLIED\n             pathID
    \     %IDINT;                   #IMPLIED>\n   <!--\n     The path element conveys
    a list of relays through which\n     entries have passed.\n     -->\n   <!ELEMENT
    path        (path?)>\n   <!ATTLIST path\n             pathID      %IDINT;                   #REQUIRED\n
    \            fromFQDN    %FQDN;                    #IMPLIED\n             fromIP
    \     %IP;                      #REQUIRED\n             toFQDN      %FQDN;                    #IMPLIED\n
    \            toIP        %IP;                      #REQUIRED\n             linkprops
    \  %ATEXT;                   #REQUIRED>\n   <!-- End of DTD -->\n"
  title: 7. The syslog DTD
- contents:
  - "8. Reply Codes\n   The following error codes are used in the protocol:\n   code
    \   meaning\n   ====    =======\n   200     success\n   421     service not available\n
    \  451     requested action aborted\n           (e.g., local error in processing)\n
    \  454     temporary authentication failure\n   500     general syntax error\n
    \          (e.g., poorly-formed XML)\n   501     syntax error in parameters\n
    \          (e.g., non-valid XML)\n   504     parameter not implemented\n   530
    \    authentication required\n   534     authentication mechanism insufficient\n
    \          (e.g., too weak, sequence exhausted, etc.)\n   535     authentication
    failure\n   537     action not authorized for user\n   538     authentication
    mechanism requires encryption\n   550     requested action not taken\n           (e.g.,
    no requested profiles are acceptable)\n   553     parameter invalid\n   554     transaction
    failed\n           (e.g., policy violation)\n"
  title: 8. Reply Codes
- contents:
  - '9. IANA Considerations

    '
  - contents:
    - "9.1 Registration: BEEP Profiles\n   The IANA registers the profiles specified
      in Section 6, and selects\n   IANA-specific URIs \"http://iana.org/beep/SYSLOG/RAW\"
      and\n   \"http://iana.org/beep/SYSLOG/COOKED\".\n"
    title: '9.1 Registration: BEEP Profiles'
  - contents:
    - "9.2 Registration: The System (Well-Known) TCP port number for syslog-\n    conn\n
      \  A single well-known port (601) is allocated to syslog-conn.  In-band\n   negotiation
      determines whether COOKED or RAW syslog-conn is in use.\n   Protocol Number:
      TCP\n   Message Formats, Types, Opcodes, and Sequences: See Section 3.3 and\n
      \     Section 4.4.\n   Functions: See Section 3.4 and Section 4.4.\n   Use of
      Broadcast/Multicast: none\n   Proposed Name: Reliable syslog service\n   Short
      name: syslog-conn\n   Contact Information: See the \"Authors' Addresses\" section
      of this\n      memo\n"
    title: '9.2 Registration: The System (Well-Known) TCP port number for syslog-'
  title: 9. IANA Considerations
- contents:
  - "10. Security Considerations\n   Consult Section 6 of [1] for a discussion of
    security issues for the\n   syslog service.  In addition, since the RAW and COOKED
    profiles are\n   defined using the BEEP framework, consult [3]'s Section 8 for
    a\n   discussion of BEEP-specific security issues.\n   BEEP is used to provide
    communication security but not object\n   integrity.  In other words, the messages
    \"on the wire\" can be\n   protected, but a compromised device may undetectably
    generate\n   incorrect messages, and relays and collectors can modify, insert,
    or\n   delete messages undetectably.  Other techniques must be used to\n   assure
    that such compromises are detectable.\n"
  title: 10. Security Considerations
- contents:
  - "11. Acknowledgements\n   The authors gratefully acknowledge the contributions
    of Christopher\n   Calabrese, Keith McCloghrie, Balazs Scheidler, and David Waitzman.\n"
  title: 11. Acknowledgements
- contents:
  - "12. References\n   [1]  Lonvick, C., \"The BSD Syslog Protocol\", RFC 3164, August
    2001.\n   [2]  Bradner, S., \"Key words for use in RFCs to Indicate Requirement\n
    \       Levels\", BCP 14, RFC 2119, March 1997.\n   [3]  Rose, M., \"The Blocks
    Extensible Exchange Protocol Core\", RFC\n        3080, March 2001.\n   [4]  Rose,
    M., \"Mapping the BEEP Core onto TCP\", RFC 3081, March\n        2001.\n   [5]
    \ Gulbrandsen, A., Vixie, P. and L. Esibov, \"A DNS RR for\n        specifying
    the location of services (DNS SRV)\", RFC 2782,\n        February 2000.\n   [6]
    \ Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n        Extensions
    (MIME) Part Two: Media Types\", RFC 2046, November\n        1996.\n   [7]  Alvestrand,
    H., \"Tags for the Identification of Languages\", BCP\n        47, RFC 3066, January
    2001.\n   [8]  Leach, P. and C. Newman, \"Using Digest Authentication as a SASL\n
    \       Mechanism\", RFC 2831, May 2000.\n"
  title: 12. References
- contents:
  - "Authors' Addresses\n   Darren New\n   5390 Caminito Exquisito\n   San Diego,
    CA  92130\n   US\n   Phone: +1 858 350 9733\n   EMail: dnew@san.rr.com\n   Marshall
    T. Rose\n   Dover Beach Consulting, Inc.\n   POB 255268\n   Sacramento, CA  95865-5268\n
    \  US\n   Phone: +1 916 483 8878\n   EMail: mrose@dbc.mtview.ca.us\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2001).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
