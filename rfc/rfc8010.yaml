- contents:
  - '         Internet Printing Protocol/1.1: Encoding and Transport

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The Internet Printing Protocol (IPP) is an application-level protocol\n
    \  for distributed printing using Internet tools and technologies.  This\n   document
    defines the rules for encoding IPP operations, attributes,\n   and values into
    the Internet MIME media type called\n   \"application/ipp\".  It also defines
    the rules for transporting a\n   message body whose Content-Type is \"application/ipp\"
    over HTTP and/or\n   HTTPS.  The IPP data model and operation semantics are described
    in\n   \"Internet Printing Protocol/1.1: Model and Semantics\" (RFC 8011).\n   This
    document obsoletes RFCs 2910 and 3382.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    7841.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc8010.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2017 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   4\n   2.  Conventions Used in This Document . . . . . . . . . . .
    . . .   5\n     2.1.  Requirements Language . . . . . . . . . . . . . . . . .
    .   5\n     2.2.  Printing Terminology  . . . . . . . . . . . . . . . . . .   5\n
    \    2.3.  Abbreviations . . . . . . . . . . . . . . . . . . . . . .   6\n   3.
    \ Encoding of the Operation Layer . . . . . . . . . . . . . . .   6\n     3.1.
    \ Picture of the Encoding . . . . . . . . . . . . . . . . .   8\n       3.1.1.
    \ Request and Response  . . . . . . . . . . . . . . . .   8\n       3.1.2.  Attribute
    Group . . . . . . . . . . . . . . . . . . .   9\n       3.1.3.  Attribute . .
    . . . . . . . . . . . . . . . . . . . .   9\n       3.1.4.  Attribute-with-one-value
    \ . . . . . . . . . . . . . .  10\n       3.1.5.  Additional-value  . . . . .
    . . . . . . . . . . . . .  11\n       3.1.6.  Collection Attribute  . . . . .
    . . . . . . . . . . .  12\n       3.1.7.  Member Attributes . . . . . . . . .
    . . . . . . . . .  13\n       3.1.8.  Alternative Picture of the Encoding of a
    Request or a\n               Response  . . . . . . . . . . . . . . . . . . . .
    . .  14\n     3.2.  Syntax of Encoding  . . . . . . . . . . . . . . . . . . .
    \ 15\n     3.3.  Attribute-group . . . . . . . . . . . . . . . . . . . . .  16\n
    \    3.4.  Required Parameters . . . . . . . . . . . . . . . . . . .  18\n       3.4.1.
    \ \"version-number\"  . . . . . . . . . . . . . . . . . .  18\n       3.4.2.  \"operation-id\"
    \ . . . . . . . . . . . . . . . . . . .  18\n       3.4.3.  \"status-code\" .
    . . . . . . . . . . . . . . . . . . .  19\n       3.4.4.  \"request-id\"  . .
    . . . . . . . . . . . . . . . . . .  19\n     3.5.  Tags  . . . . . . . . . .
    . . . . . . . . . . . . . . . .  19\n       3.5.1.  \"delimiter-tag\" Values  .
    . . . . . . . . . . . . . .  19\n       3.5.2.  \"value-tag\" Values  . . . .
    . . . . . . . . . . . . .  20\n     3.6.  \"name-length\" . . . . . . . . . .
    . . . . . . . . . . . .  23\n     3.7.  (Attribute) \"name\"  . . . . . . . .
    . . . . . . . . . . .  23\n     3.8.  \"value-length\"  . . . . . . . . . . .
    . . . . . . . . . .  23\n     3.9.  (Attribute) \"value\" . . . . . . . . . .
    . . . . . . . . .  24\n     3.10. Data  . . . . . . . . . . . . . . . . . . .
    . . . . . . .  25\n   4.  Encoding of Transport Layer . . . . . . . . . . . .
    . . . . .  26\n     4.1.  Printer URI, Job URI, and Job ID  . . . . . . . . .
    . . .  26\n   5.  IPP URI Schemes . . . . . . . . . . . . . . . . . . . . . .
    .  28\n   6.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  29\n
    \  7.  Internationalization Considerations . . . . . . . . . . . . .  31\n   8.
    \ Security Considerations . . . . . . . . . . . . . . . . . . .  31\n     8.1.
    \ Security Conformance Requirements . . . . . . . . . . . .  31\n       8.1.1.
    \ Digest Authentication . . . . . . . . . . . . . . . .  32\n       8.1.2.  Transport
    Layer Security (TLS)  . . . . . . . . . . .  32\n     8.2.  Using IPP with TLS
    \ . . . . . . . . . . . . . . . . . . .  33\n   9.  Interoperability with Other
    IPP Versions  . . . . . . . . . .  33\n     9.1.  The \"version-number\" Parameter
    \ . . . . . . . . . . . . .  34\n     9.2.  Security and URI Schemes  . . . .
    . . . . . . . . . . . .  34\n   10. Changes since RFC 2910  . . . . . . . . .
    . . . . . . . . . .  35\n   11. References  . . . . . . . . . . . . . . . . .
    . . . . . . . .  36\n     11.1.  Normative References . . . . . . . . . . . .
    . . . . . .  36\n     11.2.  Informative References . . . . . . . . . . . . .
    . . . .  38\n   Appendix A.  Protocol Examples  . . . . . . . . . . . . . . .
    . .  40\n     A.1.  Print-Job Request . . . . . . . . . . . . . . . . . . . .
    \ 40\n     A.2.  Print-Job Response (Successful) . . . . . . . . . . . . .  41\n
    \    A.3.  Print-Job Response (Failure)  . . . . . . . . . . . . . .  42\n     A.4.
    \ Print-Job Response (Success with Attributes Ignored)  . .  43\n     A.5.  Print-URI
    Request . . . . . . . . . . . . . . . . . . . .  45\n     A.6.  Create-Job Request
    \ . . . . . . . . . . . . . . . . . . .  46\n     A.7.  Create-Job Request with
    Collection Attributes . . . . . .  46\n     A.8.  Get-Jobs Request  . . . . .
    . . . . . . . . . . . . . . .  48\n     A.9.  Get-Jobs Response . . . . . . .
    . . . . . . . . . . . . .  49\n   Acknowledgements  . . . . . . . . . . . . .
    . . . . . . . . . . .  51\n   Authors' Addresses  . . . . . . . . . . . . . .
    . . . . . . . . .  51\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document contains the rules for encoding IPP operations
    and\n   describes two layers: the transport layer and the operation layer.\n   The
    transport layer consists of an HTTP request and response.  All\n   IPP implementations
    support HTTP/1.1, the relevant parts of which are\n   described in the following
    RFCs:\n   o  Hypertext Transfer Protocol (HTTP/1.1): Message Syntax and Routing\n
    \     [RFC7230]\n   o  Hypertext Transfer Protocol (HTTP/1.1): Semantics and Content\n
    \     [RFC7231]\n   o  Hypertext Transfer Protocol (HTTP/1.1): Conditional Requests\n
    \     [RFC7232]\n   o  Hypertext Transfer Protocol (HTTP/1.1): Caching [RFC7234]\n
    \  o  Hypertext Transfer Protocol (HTTP/1.1): Authentication [RFC7235]\n   o  The
    'Basic' HTTP Authentication Scheme [RFC7617]\n   o  HTTP Digest Access Authentication
    [RFC7616]\n   IPP implementations can support HTTP/2, which is described in the\n
    \  following RFCs:\n   o  Hypertext Transfer Protocol Version 2 (HTTP/2) [RFC7540]\n
    \  o  HPACK - Header Compression for HTTP/2 [RFC7541]\n   This document specifies
    the HTTP headers that an IPP implementation\n   supports.\n   The operation layer
    consists of a message body in an HTTP request or\n   response.  The \"Internet
    Printing Protocol/1.1: Model and Semantics\"\n   document [RFC8011] and subsequent
    extensions (collectively known as\n   the IPP Model) define the semantics of such
    a message body and the\n   supported values.  This document specifies the encoding
    of an IPP\n   request and response message.\n"
  title: 1.  Introduction
- contents:
  - '2.  Conventions Used in This Document

    '
  - contents:
    - "2.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
      and \"OPTIONAL\" in this\n   document are to be interpreted as described in
      [RFC2119].\n"
    title: 2.1.  Requirements Language
  - contents:
    - "2.2.  Printing Terminology\n   Client: Initiator of outgoing IPP session requests
      and sender of\n   outgoing IPP operation requests (Hypertext Transfer Protocol
      --\n   HTTP/1.1 [RFC7230] User Agent).\n   Document: An object created and managed
      by a Printer that contains\n   description, processing, and status information.
      \ A Document object\n   may have attached data and is bound to a single Job.\n
      \  'ipp' URI: An IPP URI as defined in [RFC3510].\n   'ipps' URI: An IPPS URI
      as defined in [RFC7472].\n   Job: An object created and managed by a Printer
      that contains\n   description, processing, and status information.  The Job
      also\n   contains zero or more Document objects.\n   Logical Device: A print
      server, software service, or gateway that\n   processes Jobs and either forwards
      or stores the processed Job or\n   uses one or more Physical Devices to render
      output.\n   Model: The semantics of operations, attributes, values, and status-\n
      \  codes used in the Internet Printing Protocol as defined in the\n   Internet
      Printing Protocol/1.1: Model and Semantics document\n   [RFC8011] and subsequent
      extensions.\n   Output Device: A single Logical or Physical Device.\n   Physical
      Device: A hardware implementation of an endpoint device,\n   e.g., a marking
      engine, a fax modem, etc.\n   Printer: Listener for incoming IPP session requests
      and receiver of\n   incoming IPP operation requests (Hypertext Transfer Protocol
      --\n   HTTP/1.1 [RFC7230] Server) that represents one or more Physical\n   Devices
      or a Logical Device.\n"
    title: 2.2.  Printing Terminology
  - contents:
    - "2.3.  Abbreviations\n   ABNF: Augmented Backus-Naur Form [RFC5234]\n   ASCII:
      American Standard Code for Information Interchange [RFC20]\n   HTTP: Hypertext
      Transfer Protocol [RFC7230]\n   HTTPS: HTTP over TLS [RFC2818]\n   IANA: Internet
      Assigned Numbers Authority\n   IEEE: Institute of Electrical and Electronics
      Engineers\n   IESG: Internet Engineering Steering Group\n   IPP: Internet Printing
      Protocol (this document and [PWG5100.12])\n   ISTO: IEEE Industry Standards
      and Technology Organization\n   LPD: Line Printer Daemon Protocol [RFC1179]\n
      \  PWG: IEEE-ISTO Printer Working Group\n   RFC: Request for Comments\n   TCP:
      Transmission Control Protocol [RFC793]\n   TLS: Transport Layer Security [RFC5246]\n
      \  URI: Uniform Resource Identifier [RFC3986]\n   URL: Uniform Resource Locator
      [RFC3986]\n   UTF-8: Unicode Transformation Format - 8-bit [RFC3629]\n"
    title: 2.3.  Abbreviations
  title: 2.  Conventions Used in This Document
- contents:
  - "3.  Encoding of the Operation Layer\n   The operation layer is the message body
    part of the HTTP request or\n   response and it MUST contain a single IPP operation
    request or IPP\n   operation response.  Each request or response consists of a
    sequence\n   of values and attribute groups.  Attribute groups consist of a\n
    \  sequence of attributes each of which is a name and value.  Names and\n   values
    are ultimately sequences of octets.\n   The encoding consists of octets as the
    most primitive type.  There\n   are several types built from octets, but three
    important types are\n   integers, character strings, and octet strings, on which
    most other\n   data types are built.  Every character string in this encoding
    MUST\n   be a sequence of characters where the characters are associated with\n
    \  some charset [RFC2978] and some natural language.  A character string\n   MUST
    be in \"reading order\" with the first character in the value\n   (according to
    reading order) being the first character in the\n   encoding.  A character string
    whose associated charset is US-ASCII\n   and whose associated natural language
    is US English is henceforth\n   called a US-ASCII-STRING.  A character string
    whose associated\n   charset and natural language are specified in a request or
    response\n   as described in the Model is henceforth called a LOCALIZED-STRING.\n
    \  An octet string MUST be in \"Model order\" with the first octet in the\n   value
    (according to the Model order) being the first octet in the\n   encoding.  Every
    integer in this encoding MUST be encoded as a signed\n   integer using two's-complement
    binary encoding with big-endian format\n   (also known as \"network order\" and
    \"most significant byte first\").\n   The number of octets for an integer MUST
    be 1, 2, or 4, depending on\n   usage in the protocol.  A one-octet integer, henceforth
    called a\n   SIGNED-BYTE, is used for the version-number and tag fields.  A two-\n
    \  byte integer, henceforth called a SIGNED-SHORT, is used for the\n   operation-id,
    status-code, and length fields.  A four-byte integer,\n   henceforth called a
    SIGNED-INTEGER, is used for value fields and the\n   request-id.\n   The following
    two sections present the encoding of the operation\n   layer in two ways:\n   o
    \ informally through pictures and description\n   o  formally through Augmented
    Backus-Naur Form (ABNF), as specified\n      by RFC 5234 [RFC5234]\n   An operation
    request or response MUST use the encoding described in\n   these two sections.\n"
  - contents:
    - '3.1.  Picture of the Encoding

      '
    - contents:
      - "3.1.1.  Request and Response\n   An operation request or response is encoded
        as follows:\n   -----------------------------------------------\n   |                  version-number
        \            |   2 bytes  - required\n   -----------------------------------------------\n
        \  |               operation-id (request)        |\n   |                      or
        \                    |   2 bytes  - required\n   |               status-code
        (response)        |\n   -----------------------------------------------\n
        \  |                   request-id                |   4 bytes  - required\n
        \  -----------------------------------------------\n   |                 attribute-group
        \            |   n bytes - 0 or more\n   -----------------------------------------------\n
        \  |              end-of-attributes-tag          |   1 byte   - required\n
        \  -----------------------------------------------\n   |                     data
        \                   |   q bytes  - optional\n   -----------------------------------------------\n
        \                      Figure 1: IPP Message Format\n   The first three fields
        in the above diagram contain the value of\n   attributes described in Section
        4.1.1 of the Model and Semantics\n   document [RFC8011].\n   The fourth field
        is the \"attribute-group\" field, and it occurs 0 or\n   more times.  Each
        \"attribute-group\" field represents a single group\n   of attributes, such
        as an Operation Attributes group or a Job\n   Attributes group (see the Model).
        \ The Model specifies the required\n   attribute groups and their order for
        each operation request and\n   response.\n   The \"end-of-attributes-tag\"
        field is always present, even when the\n   \"data\" is not present.  The Model
        specifies whether the \"data\" field\n   is present for each operation request
        and response.\n"
      title: 3.1.1.  Request and Response
    - contents:
      - "3.1.2.  Attribute Group\n   Each \"attribute-group\" field is encoded as
        follows:\n   -----------------------------------------------\n   |           begin-attribute-group-tag
        \        |  1 byte\n   ----------------------------------------------------------\n
        \  |                   attribute                 |  p bytes |- 0 or more\n
        \  ----------------------------------------------------------\n                    Figure
        2: Attribute Group Encoding\n   An \"attribute-group\" field contains zero
        or more \"attribute\" fields.\n   Note that the values of the \"begin-attribute-group-tag\"
        field and the\n   \"end-of-attributes-tag\" field are called \"delimiter-tags\".\n"
      title: 3.1.2.  Attribute Group
    - contents:
      - "3.1.3.  Attribute\n   An \"attribute\" field is encoded as follows:\n   -----------------------------------------------\n
        \  |          attribute-with-one-value           |  q bytes\n   ----------------------------------------------------------\n
        \  |             additional-value                |  r bytes |- 0 or more\n
        \  ----------------------------------------------------------\n                       Figure
        3: Attribute Encoding\n   When an attribute is single valued (e.g., \"copies\"
        with a value of\n   10) or multi-valued with one value (e.g., \"sides-supported\"
        with just\n   the value 'one-sided'), it is encoded with just an \"attribute-with-\n
        \  one-value\" field.  When an attribute is multi-valued with n values\n   (e.g.,
        \"sides-supported\" with the values 'one-sided' and 'two-sided-\n   long-edge'),
        it is encoded with an \"attribute-with-one-value\" field\n   followed by n-1
        \"additional-value\" fields.\n"
      title: 3.1.3.  Attribute
    - contents:
      - "3.1.4.  Attribute-with-one-value\n   Each \"attribute-with-one-value\" field
        is encoded as follows:\n   -----------------------------------------------\n
        \  |                   value-tag                 |   1 byte\n   -----------------------------------------------\n
        \  |               name-length  (value is u)     |   2 bytes\n   -----------------------------------------------\n
        \  |                     name                    |   u bytes\n   -----------------------------------------------\n
        \  |              value-length  (value is v)     |   2 bytes\n   -----------------------------------------------\n
        \  |                     value                   |   v bytes\n   -----------------------------------------------\n
        \                Figure 4: Single Value Attribute Encoding\n   An \"attribute-with-one-value\"
        field is encoded with five subfields:\n   o  The \"value-tag\" field specifies
        the attribute syntax, e.g., 0x44\n      for the attribute syntax 'keyword'.\n
        \  o  The \"name-length\" field specifies the length of the \"name\" field\n
        \     in bytes, e.g., u in the above diagram or 15 for the name \"sides-\n
        \     supported\".\n   o  The \"name\" field contains the textual name of
        the attribute, e.g.,\n      \"sides-supported\".\n   o  The \"value-length\"
        field specifies the length of the \"value\" field\n      in bytes, e.g., v
        in the above diagram or 9 for the (keyword)\n      value 'one-sided'.\n   o
        \ The \"value\" field contains the value of the attribute, e.g., the\n      textual
        value 'one-sided'.\n"
      title: 3.1.4.  Attribute-with-one-value
    - contents:
      - "3.1.5.  Additional-value\n   Each \"additional-value\" field is encoded as
        follows:\n   -----------------------------------------------\n   |                   value-tag
        \                |   1 byte\n   -----------------------------------------------\n
        \  |            name-length  (value is 0x0000)   |   2 bytes\n   -----------------------------------------------\n
        \  |              value-length (value is w)      |   2 bytes\n   -----------------------------------------------\n
        \  |                     value                   |   w bytes\n   -----------------------------------------------\n
        \              Figure 5: Additional Attribute Value Encoding\n   An \"additional-value\"
        is encoded with four subfields:\n   o  The \"value-tag\" field specifies the
        attribute syntax, e.g., 0x44\n      for the attribute syntax 'keyword'.\n
        \  o  The \"name-length\" field has the value of 0 in order to signify\n      that
        it is an \"additional-value\".  The value of the \"name-length\"\n      field
        distinguishes an \"additional-value\" field (\"name-length\" is\n      0)
        from an \"attribute-with-one-value\" field (\"name-length\" is not\n      0).\n
        \  o  The \"value-length\" field specifies the length of the \"value\" field\n
        \     in bytes, e.g., w in the above diagram or 19 for the (keyword)\n      value
        'two-sided-long-edge'.\n   o  The \"value\" field contains the value of the
        attribute, e.g., the\n      textual value 'two-sided-long-edge'.\n"
      title: 3.1.5.  Additional-value
    - contents:
      - "3.1.6.  Collection Attribute\n   Collection attributes create a named group
        containing related\n   \"member\" attributes.  The \"attribute-with-one-value\"
        field for a\n   collection attribute is encoded as follows:\n   -----------------------------------------------\n
        \  |          value-tag (value is 0x34)          |   1 byte\n   -----------------------------------------------\n
        \  |          name-length (value is u)           |   2 bytes\n   -----------------------------------------------\n
        \  |                     name                    |   u bytes\n   -----------------------------------------------\n
        \  |        value-length (value is 0x0000)       |   2 bytes\n   -----------------------------------------------------------\n
        \  |               member-attribute              |   q bytes |-0 or more\n
        \  -----------------------------------------------------------\n   |        end-value-tag
        (value is 0x37)        |   1 byte\n   -----------------------------------------------\n
        \  |      end-name-length (value is 0x0000)      |   2 bytes\n   -----------------------------------------------\n
        \  |      end-value-length (value is 0x0000)     |   2 bytes\n   -----------------------------------------------\n
        \                 Figure 6: Collection Attribute Encoding\n   Collection attribute
        is encoded with eight subfields:\n   o  The \"value-tag\" field specifies
        the start attribute syntax: 0x34\n      for the attribute syntax 'begCollection'.\n
        \  o  The \"name-length\" field specifies the length of the \"name\" field\n
        \     in bytes, e.g., u in the above diagram or 9 for the name \"media-\n
        \     col\".  Additional collection attribute values use a name length of\n
        \     0x0000.\n   o  The \"name\" field contains the textual name of the attribute,
        e.g.,\n      \"media-col\".\n   o  The \"value-length\" field specifies a
        length of 0x0000.\n   o  The \"member-attribute\" field contains member attributes
        encoded as\n      defined in Section 3.1.7.\n   o  The \"end-value-tag\" field
        specifies the end attribute syntax: 0x37\n      for the attribute syntax 'endCollection'.\n
        \  o  The \"end-name-length\" field specifies a length of 0x0000.\n   o  The
        \"end-value-length\" field specifies a length of 0x0000.\n"
      title: 3.1.6.  Collection Attribute
    - contents:
      - "3.1.7.  Member Attributes\n   Each \"member-attribute\" field is encoded
        as follows:\n   -----------------------------------------------\n   |          value-tag
        (value is 0x4a)          |   1 byte\n   -----------------------------------------------\n
        \  |        name-length (value is 0x0000)        |   2 bytes\n   -----------------------------------------------\n
        \  |          value-length (value is w)          |   2 bytes\n   -----------------------------------------------\n
        \  |             value (member-name)             |   w bytes\n   -----------------------------------------------\n
        \  |               member-value-tag              |   1 byte\n   -----------------------------------------------\n
        \  |        name-length (value is 0x0000)        |   2 bytes\n   -----------------------------------------------\n
        \  |      member-value-length (value is x)       |   2 bytes\n   -----------------------------------------------\n
        \  |                member-value                 |   x bytes\n   -----------------------------------------------\n
        \                   Figure 7: Member Attribute Encoding\n   A \"member-attribute\"
        is encoded with eight subfields:\n   o  The \"value-tag\" field specifies
        0x4a for the attribute syntax\n      'memberAttrName'.\n   o  The \"name-length\"
        field has the value of 0 in order to signify\n      that it is a \"member-attribute\"
        contained in the collection.\n   o  The \"value-length\" field specifies the
        length of the \"value\" field\n      in bytes, e.g., w in the above diagram
        or 10 for the member\n      attribute name 'media-type'.  Additional member
        attribute values\n      are specified using a value length of 0.\n   o  The
        \"value\" field contains the name of the member attribute, e.g.,\n      the
        textual value 'media-type'.\n   o  The \"member-value-tag\" field specifies
        the attribute syntax for\n      the member attribute, e.g., 0x44 for the attribute
        syntax\n      'keyword'.\n   o  The second \"name-length\" field has the value
        of 0 in order to\n      signify that it is a \"member-attribute\" contained
        in the\n      collection.\n   o  The \"member-value-length\" field specifies
        the length of the member\n      attribute value, e.g., x in the above diagram
        or 10 for the value\n      'stationery'.\n   o  The \"member-value\" field
        contains the value of the attribute,\n      e.g., the textual value 'stationery'.\n"
      title: 3.1.7.  Member Attributes
    - contents:
      - "3.1.8.  Alternative Picture of the Encoding of a Request or a Response\n
        \  From the standpoint of a parser that performs an action based on a\n   \"tag\"
        value, the encoding consists of:\n   -----------------------------------------------\n
        \  |                  version-number             |   2 bytes  - required\n
        \  -----------------------------------------------\n   |               operation-id
        (request)        |\n   |                      or                     |   2
        bytes  - required\n   |               status-code (response)        |\n   -----------------------------------------------\n
        \  |                   request-id                |   4 bytes  - required\n
        \  -----------------------------------------------------------\n   |        tag
        (delimiter-tag or value-tag)     |   1 byte  |\n   -----------------------------------------------
        \          |-0 or more\n   |           empty or rest of attribute        |
        \  x bytes |\n   -----------------------------------------------------------\n
        \  |              end-of-attributes-tag          |   1 byte   - required\n
        \  -----------------------------------------------\n   |                     data
        \                   |   y bytes  - optional\n   -----------------------------------------------\n
        \                 Figure 8: Encoding Based on Value Tags\n   The following
        shows what fields the parser would expect after each\n   type of \"tag\":\n
        \  o  \"begin-attribute-group-tag\": expect zero or more \"attribute\"\n      fields\n
        \  o  \"value-tag\": expect the remainder of an \"attribute-with-one-value\"\n
        \     or an \"additional-value\"\n   o  \"end-of-attributes-tag\": expect
        that \"attribute\" fields are\n      complete and there is optional \"data\"\n"
      title: 3.1.8.  Alternative Picture of the Encoding of a Request or a Response
    title: 3.1.  Picture of the Encoding
  - contents:
    - "3.2.  Syntax of Encoding\n   The ABNF [RFC5234] syntax for an IPP message is
      shown in Figure 9.\n   ipp-message  = ipp-request / ipp-response\n   ipp-request
      \ = version-number operation-id request-id\n                  *attribute-group
      end-of-attributes-tag data\n   ipp-response = version-number status-code request-id\n
      \                 *attribute-group end-of-attributes-tag  data\n   version-number
      \      = major-version-number minor-version-number\n   major-version-number
      = SIGNED-BYTE\n   minor-version-number = SIGNED-BYTE\n   operation-id = SIGNED-SHORT
      \    ; mapping from model\n   status-code  = SIGNED-SHORT     ; mapping from
      model\n   request-id   = SIGNED-INTEGER   ; whose value is > 0\n   attribute-group
      \         = begin-attribute-group-tag *attribute\n   attribute                =
      attribute-with-one-value *additional-value\n   attribute-with-one-value = value-tag
      name-length name\n                              value-length value\n   additional-value
      \        = value-tag zero-name-length\n                              value-length
      value\n   name-length  = SIGNED-SHORT     ; number of octets of 'name'\n   name
      \        = LALPHA *( LALPHA / DIGIT / \"-\" / \"_\" / \".\" )\n   value-length
      = SIGNED-SHORT     ; number of octets of 'value'\n   value        = OCTET-STRING\n
      \  data         = OCTET-STRING\n   zero-name-length          = %x00.00           ;
      name-length of 0\n   value-tag                 = %x10-ff           ; see Section
      3.5.2\n   begin-attribute-group-tag = %x00-02 / %x04-0f ; see Section 3.5.1\n
      \  end-of-attributes-tag     = %x03              ; tag of 3\n                                                 ;
      see Section 3.5.1\n   SIGNED-BYTE    = BYTE\n   SIGNED-SHORT   = 2BYTE\n   SIGNED-INTEGER
      = 4BYTE\n   DIGIT          = %x30-39        ; \"0\" to \"9\"\n   LALPHA         =
      %x61-7A        ; \"a\" to \"z\"\n   BYTE           = %x00-ff\n   OCTET-STRING
      \  = *BYTE\n                   Figure 9: ABNF of IPP Message Format\n   Figure
      10 defines additional terms that are referenced in this\n   document and provides
      an alternate grouping of the delimiter tags.\n   delimiter-tag = begin-attribute-group-tag
      /   ; see Section 3.5.1\n             end-of-attributes-tag\n   begin-attribute-group-tag
      = %x00 / operation-attributes-tag /\n      job-attributes-tag / printer-attributes-tag
      /\n      unsupported-attributes-tag / future-group-tags\n   operation-attributes-tag
      \  = %x01             ; tag of 1\n   job-attributes-tag         = %x02             ;
      tag of 2\n   end-of-attributes-tag      = %x03             ; tag of 3\n   printer-attributes-tag
      \    = %x04             ; tag of 4\n   unsupported-attributes-tag = %x05             ;
      tag of 5\n   future-group-tags          = %x06-0f          ; future extensions\n
      \                Figure 10: ABNF for Attribute Group Tags\n"
    title: 3.2.  Syntax of Encoding
  - contents:
    - "3.3.  Attribute-group\n   Each \"attribute-group\" field MUST be encoded with
      the \"begin-\n   attribute-group-tag\" field followed by zero or more \"attribute\"
      sub-\n   fields.\n   Table 1 maps the Model group name to value of the \"begin-attribute-\n
      \  group-tag\" field:\n   +----------------+--------------------------------------------------+\n
      \  | Model Document | \"begin-attribute-group-tag\" field values         |\n
      \  | Group          |                                                  |\n   +----------------+--------------------------------------------------+\n
      \  | Operation      | \"operations-attributes-tag\"                      |\n
      \  | Attributes     |                                                  |\n   +----------------+--------------------------------------------------+\n
      \  | Job Template   | \"job-attributes-tag\"                             |\n
      \  | Attributes     |                                                  |\n   +----------------+--------------------------------------------------+\n
      \  | Job Object     | \"job-attributes-tag\"                             |\n
      \  | Attributes     |                                                  |\n   +----------------+--------------------------------------------------+\n
      \  | Unsupported    | \"unsupported-attributes-tag\"                     |\n
      \  | Attributes     |                                                  |\n   +----------------+--------------------------------------------------+\n
      \  | Requested      | (Get-Job-Attributes) \"job-attributes-tag\"        |\n
      \  | Attributes     |                                                  |\n   +----------------+--------------------------------------------------+\n
      \  | Requested      | (Get-Printer-Attributes)\"printer-attributes-tag\" |\n
      \  | Attributes     |                                                  |\n   +----------------+--------------------------------------------------+\n
      \  | Document       | in a special position at the end of the message  |\n   |
      Content        | as described in Section 3.1.1.                   |\n   +----------------+--------------------------------------------------+\n
      \                          Table 1: Group Values\n   For each operation request
      and response, the Model prescribes the\n   required and optional attribute groups,
      along with their order.\n   Within each attribute group, the Model prescribes
      the required and\n   optional attributes, along with their order.\n   When the
      Model requires an attribute group in a request or response\n   and the attribute
      group contains zero attributes, a request or\n   response SHOULD encode the
      attribute group with the \"begin-attribute-\n   group-tag\" field followed by
      zero \"attribute\" fields.  For example,\n   if the Client requests a single
      unsupported attribute with the Get-\n   Printer-Attributes operation, the Printer
      MUST return no \"attribute\"\n   fields, and it SHOULD return a \"begin-attribute-group-tag\"
      field for\n   the Printer Attributes group.  The Unsupported Attributes group
      is\n   not such an example.  According to the Model, the Unsupported\n   Attributes
      group SHOULD be present only if the Unsupported Attributes\n   group contains
      at least one attribute.\n   A receiver of a request MUST be able to process
      the following as\n   equivalent empty attribute groups:\n   a.  A \"begin-attribute-group-tag\"
      field with zero following\n       \"attribute\" fields.\n   b.  A missing, but
      expected, \"begin-attribute-group-tag\" field.\n   When the Model requires a
      sequence of an unknown number of attribute\n   groups, each of the same type,
      the encoding MUST contain one \"begin-\n   attribute-group-tag\" field for each
      attribute group, even when an\n   \"attribute-group\" field contains zero \"attribute\"
      sub-fields.  For\n   example, the Get-Jobs operation may return zero attributes
      for some\n   Jobs and not others.  The \"begin-attribute-group-tag\" field followed\n
      \  by zero \"attribute\" fields tells the recipient that there is a Job in\n
      \  queue for which no information is available except that it is in the\n   queue.\n"
    title: 3.3.  Attribute-group
  - contents:
    - "3.4.  Required Parameters\n   Some operation elements are called parameters
      in the Model.  They\n   MUST be encoded in a special position and they MUST
      NOT appear as\n   operation attributes.  These parameters are described in the\n
      \  subsections below.\n"
    - contents:
      - "3.4.1.  \"version-number\"\n   The \"version-number\" field consists of a
        major and minor version-\n   number, each of which is represented by a SIGNED-BYTE.
        \ The major\n   version-number is the first byte of the encoding and the minor\n
        \  version-number is the second byte of the encoding.  The protocol\n   described
        in [RFC8011] has a major version-number of 1 (0x01) and a\n   minor version-number
        of 1 (0x01).  The ABNF for these two bytes is\n   %x01.01.\n   Note: See Section
        9 for more information on the \"version-number\"\n   field and IPP version
        numbers.\n"
      title: 3.4.1.  "version-number"
    - contents:
      - "3.4.2.  \"operation-id\"\n   The \"operation-id\" field contains an operation-id
        value as defined in\n   the Model.  The value is encoded as a SIGNED-SHORT
        and is located in\n   the third and fourth bytes of the encoding of an operation
        request.\n"
      title: 3.4.2.  "operation-id"
    - contents:
      - "3.4.3.  \"status-code\"\n   The \"status-code\" field contains a status-code
        value as defined in\n   the Model.  The value is encoded as a SIGNED-SHORT
        and is located in\n   the third and fourth bytes of the encoding of an operation
        response.\n   If an IPP status-code is returned, then the HTTP status-code
        MUST be\n   200 (OK).  With any other HTTP status-code value, the HTTP response\n
        \  MUST NOT contain an IPP message body, and thus no IPP status-code is\n
        \  returned.\n"
      title: 3.4.3.  "status-code"
    - contents:
      - "3.4.4.  \"request-id\"\n   The \"request-id\" field contains the request-id
        value as defined in\n   the Model.  The value is encoded as a SIGNED-INTEGER
        and is located\n   in the fifth through eighth bytes of the encoding.\n"
      title: 3.4.4.  "request-id"
    title: 3.4.  Required Parameters
  - contents:
    - "3.5.  Tags\n   There are two kinds of tags:\n   o  delimiter tags: delimit
      major sections of the protocol, namely\n      attribute groups and data\n   o
      \ value tags: specify the type of each attribute value\n   Tags are part of
      the IANA IPP registry [IANA-IPP]\n"
    - contents:
      - "3.5.1.  \"delimiter-tag\" Values\n   Table 2 specifies the values for the
        delimiter tags defined in this\n   document.  These tags are registered, along
        with tags defined in\n   other documents, in the \"Attribute Group Tags\"
        registry.\n            +-----------------+------------------------------+\n
        \           | Tag Value (Hex) | Meaning                      |\n            +-----------------+------------------------------+\n
        \           | 0x00            | Reserved                     |\n            |
        0x01            | \"operation-attributes-tag\"   |\n            | 0x02            |
        \"job-attributes-tag\"         |\n            | 0x03            | \"end-of-attributes-tag\"
        \     |\n            | 0x04            | \"printer-attributes-tag\"     |\n
        \           | 0x05            | \"unsupported-attributes-tag\" |\n            +-----------------+------------------------------+\n
        \                     Table 2: \"delimiter-tag\" Values\n   When a \"begin-attribute-group-tag\"
        field occurs in the protocol, it\n   means that zero or more following attributes
        up to the next group tag\n   are attributes belonging to the attribute group
        specified by the\n   value of the \"begin-attribute-group-tag\".  For example,
        if the value\n   of \"begin-attribute-group-tag\" is 0x01, the following attributes
        are\n   members of the Operations Attributes group.\n   The \"end-of-attributes-tag\"
        (value 0x03) MUST occur exactly once in\n   an operation and MUST be the last
        \"delimiter-tag\".  If the operation\n   has a document-data group, the Document
        data in that group follows\n   the \"end-of-attributes-tag\".\n   The order
        and presence of \"attribute-group\" fields (whose beginning\n   is marked
        by the \"begin-attribute-group-tag\" subfield) for each\n   operation request
        and each operation response MUST be that defined in\n   the Model.\n   A Printer
        MUST treat a \"delimiter-tag\" (values from 0x00 through\n   0x0f) differently
        from a \"value-tag\" (values from 0x10 through 0xff)\n   so that the Printer
        knows there is an entire attribute group as\n   opposed to a single value.\n"
      title: 3.5.1.  "delimiter-tag" Values
    - contents:
      - "3.5.2.  \"value-tag\" Values\n   The remaining tables show values for the
        \"value-tag\" field, which is\n   the first octet of an attribute.  The \"value-tag\"
        field specifies the\n   type of the value of the attribute.\n   Table 3 specifies
        the \"out-of-band\" values for the \"value-tag\" field\n   defined in this
        document.  These tags are registered, along with tags\n   defined in other
        documents, in the \"Out-of-Band Attribute Value Tags\"\n   registry.\n                     +-----------------+-------------+\n
        \                    | Tag Value (Hex) | Meaning     |\n                     +-----------------+-------------+\n
        \                    | 0x10            | unsupported |\n                     |
        0x12            | unknown     |\n                     | 0x13            |
        no-value    |\n                     +-----------------+-------------+\n                        Table
        3: Out-of-Band Values\n   Table 4 specifies the integer values defined in
        this document for the\n   \"value-tag\" field; they are registered in the
        \"Attribute Syntaxes\"\n   registry.\n   +----------------+--------------------------------------------------+\n
        \  | Tag Value      | Meaning                                          |\n
        \  | (Hex)          |                                                  |\n
        \  +----------------+--------------------------------------------------+\n
        \  | 0x20           | Unassigned integer data type (see IANA IPP       |\n
        \  |                | registry)                                        |\n
        \  | 0x21           | integer                                          |\n
        \  | 0x22           | boolean                                          |\n
        \  | 0x23           | enum                                             |\n
        \  | 0x24-0x2f      | Unassigned integer data types (see IANA IPP      |\n
        \  |                | registry)                                        |\n
        \  +----------------+--------------------------------------------------+\n
        \                          Table 4: Integer Tags\n   Table 5 specifies the
        octetString values defined in this document for\n   the \"value-tag\" field;
        they are registered in the \"Attribute\n   Syntaxes\" registry.\n   +---------------+---------------------------------------------------+\n
        \  | Tag Value     | Meaning                                           |\n
        \  | (Hex)         |                                                   |\n
        \  +---------------+---------------------------------------------------+\n
        \  | 0x30          | octetString with an unspecified format            |\n
        \  | 0x31          | dateTime                                          |\n
        \  | 0x32          | resolution                                        |\n
        \  | 0x33          | rangeOfInteger                                    |\n
        \  | 0x34          | begCollection                                     |\n
        \  | 0x35          | textWithLanguage                                  |\n
        \  | 0x36          | nameWithLanguage                                  |\n
        \  | 0x37          | endCollection                                     |\n
        \  | 0x38-0x3f     | Unassigned octetString data types (see IANA IPP   |\n
        \  |               | registry)                                         |\n
        \  +---------------+---------------------------------------------------+\n
        \                        Table 5: octetString Tags\n   Table 6 specifies the
        character-string values defined in this\n   document for the \"value-tag\"
        field; they are registered in the\n   \"Attribute Syntaxes\" registry.\n   +---------------+---------------------------------------------------+\n
        \  | Tag Value     | Meaning                                           |\n
        \  | (Hex)         |                                                   |\n
        \  +---------------+---------------------------------------------------+\n
        \  | 0x40          | Unassigned character-string data type (see IANA   |\n
        \  |               | IPP registry)                                     |\n
        \  | 0x41          | textWithoutLanguage                               |\n
        \  | 0x42          | nameWithoutLanguage                               |\n
        \  | 0x43          | Unassigned character-string data type (see IANA   |\n
        \  |               | IPP registry)                                     |\n
        \  | 0x44          | keyword                                           |\n
        \  | 0x45          | uri                                               |\n
        \  | 0x46          | uriScheme                                         |\n
        \  | 0x47          | charset                                           |\n
        \  | 0x48          | naturalLanguage                                   |\n
        \  | 0x49          | mimeMediaType                                     |\n
        \  | 0x4a          | memberAttrName                                    |\n
        \  | 0x4b-0x5f     | Unassigned character-string data types (see IANA  |\n
        \  |               | IPP registry)                                     |\n
        \  +---------------+---------------------------------------------------+\n
        \                          Table 6: String Tags\n   Note: An attribute value
        always has a type, which is explicitly\n   specified by its tag; one such
        tag value is \"nameWithoutLanguage\".\n   An attribute's name has an implicit
        type, which is keyword.\n   The values 0x60-0xff are reserved for future type
        definitions in\n   Standards Track documents.\n   The tag 0x7f is reserved
        for extending types beyond the 255 values\n   available with a single byte.
        \ A tag value of 0x7f MUST signify that\n   the first four bytes of the value
        field are interpreted as the tag\n   value.  Note this future extension doesn't
        affect parsers that are\n   unaware of this special tag.  The tag is like
        any other unknown tag,\n   and the value length specifies the length of a
        value, which contains\n   a value that the parser treats atomically.  Values
        from 0x00000000 to\n   0x3fffffff are reserved for definition in future Standards
        Track\n   documents.  The values 0x40000000 to 0x7fffffff are reserved for\n
        \  vendor extensions.\n"
      title: 3.5.2.  "value-tag" Values
    title: 3.5.  Tags
  - contents:
    - "3.6.  \"name-length\"\n   The \"name-length\" field consists of a SIGNED-SHORT
      and specifies the\n   number of octets in the immediately following \"name\"
      field.  The\n   value of this field excludes the two bytes of the \"name-length\"\n
      \  field.  For example, if the \"name\" field contains 'sides', the value\n
      \  of this field is 5.\n   If a \"name-length\" field has a value of zero, the
      following \"name\"\n   field is empty and the following value is treated as
      an additional\n   value for the attribute encoded in the nearest preceding \"attribute-\n
      \  with-one-value\" field.  Within an attribute group, if two or more\n   attributes
      have the same name, the attribute group is malformed (see\n   [RFC8011]).  The
      zero-length name is the only mechanism for multi-\n   valued attributes.\n"
    title: 3.6.  "name-length"
  - contents:
    - "3.7.  (Attribute) \"name\"\n   The \"name\" field contains the name of an attribute.
      \ The Model\n   specifies such names.\n"
    title: 3.7.  (Attribute) "name"
  - contents:
    - "3.8.  \"value-length\"\n   The \"value-length\" field consists of a SIGNED-SHORT,
      which specifies\n   the number of octets in the immediately following \"value\"
      field.  The\n   value of this field excludes the two bytes of the \"value-length\"\n
      \  field.  For example, if the \"value\" field contains the keyword\n   (string)
      value 'one-sided', the value of this field is 9.\n   For any of the types represented
      by binary signed integers, the\n   sender MUST encode the value in exactly four
      octets.\n   For any of the types represented by binary signed bytes, e.g., the\n
      \  boolean type, the sender MUST encode the value in exactly one octet.\n   For
      any of the types represented by character strings, the sender\n   MUST encode
      the value with all the characters of the string and\n   without any padding
      characters.\n   For \"out-of-band\" values for the \"value-tag\" field defined
      in this\n   document, such as 'unsupported', the \"value-length\" MUST be 0
      and the\n   \"value\" empty; the \"value\" has no meaning when the \"value-tag\"
      has\n   one of these \"out-of-band\" values.  For future \"out-of-band\" \"value-\n
      \  tag\" fields, the same rule holds unless the definition explicitly\n   states
      that the \"value-length\" MAY be non-zero and the \"value\" non-\n   empty\n"
    title: 3.8.  "value-length"
  - contents:
    - "3.9.  (Attribute) \"value\"\n   The syntax types (specified by the \"value-tag\"
      field) and most of the\n   details of the representation of attribute values
      are defined in the\n   Model.  Table 7 augments the information in the Model
      and defines the\n   syntax types from the Model in terms of the five basic types
      defined\n   in Section 3.  The five types are US-ASCII-STRING, LOCALIZED-STRING,\n
      \  SIGNED-INTEGER, SIGNED-SHORT, SIGNED-BYTE, and OCTET-STRING.\n   +----------------------+--------------------------------------------+\n
      \  | Syntax of Attribute  | Encoding                                   |\n   |
      Value                |                                            |\n   +----------------------+--------------------------------------------+\n
      \  | textWithoutLanguage, | LOCALIZED-STRING                           |\n   |
      nameWithoutLanguage  |                                            |\n   +----------------------+--------------------------------------------+\n
      \  | textWithLanguage     | OCTET-STRING consisting of four fields: a  |\n   |
      \                     | SIGNED-SHORT, which is the number of       |\n   |                      |
      octets in the following field; a value of  |\n   |                      | type
      natural-language; a SIGNED-SHORT,     |\n   |                      | which is
      the number of octets in the       |\n   |                      | following field;
      and a value of type       |\n   |                      | textWithoutLanguage.
      \ The length of a      |\n   |                      | textWithLanguage value
      MUST be 4 + the     |\n   |                      | value of field a + the value
      of field c.   |\n   +----------------------+--------------------------------------------+\n
      \  | nameWithLanguage     | OCTET-STRING consisting of four fields: a  |\n   |
      \                     | SIGNED-SHORT, which is the number of       |\n   |                      |
      octets in the following field; a value of  |\n   |                      | type
      natural-language; a SIGNED-SHORT,     |\n   |                      | which is
      the number of octets in the       |\n   |                      | following field;
      and a value of type       |\n   |                      | nameWithoutLanguage.
      \ The length of a      |\n   |                      | nameWithLanguage value
      MUST be 4 + the     |\n   |                      | value of field a + the value
      of field c.   |\n   +----------------------+--------------------------------------------+\n
      \  | charset,             | US-ASCII-STRING                            |\n   |
      naturalLanguage,     |                                            |\n   | mimeMediaType,
      \      |                                            |\n   | keyword, uri, and
      \   |                                            |\n   | uriScheme            |
      \                                           |\n   +----------------------+--------------------------------------------+\n
      \  | boolean              | SIGNED-BYTE where 0x00 is 'false' and 0x01 |\n   |
      \                     | is 'true'                                  |\n   +----------------------+--------------------------------------------+\n
      \  | integer and enum     | a SIGNED-INTEGER                           |\n   +----------------------+--------------------------------------------+\n
      \  | dateTime             | OCTET-STRING consisting of eleven octets   |\n   |
      \                     | whose contents are defined by              |\n   |                      |
      \"DateAndTime\" in RFC 2579 [RFC2579]        |\n   +----------------------+--------------------------------------------+\n
      \  | resolution           | OCTET-STRING consisting of nine octets of  |\n   |
      \                     | two SIGNED-INTEGERs followed by a SIGNED-  |\n   |                      |
      BYTE.  The first SIGNED-INTEGER contains   |\n   |                      | the
      value of cross-feed direction          |\n   |                      | resolution.
      \ The second SIGNED-INTEGER     |\n   |                      | contains the
      value of feed direction       |\n   |                      | resolution.  The
      SIGNED-BYTE contains the  |\n   |                      | units value.                               |\n
      \  +----------------------+--------------------------------------------+\n   |
      rangeOfInteger       | Eight octets consisting of two SIGNED-     |\n   |                      |
      INTEGERs.  The first SIGNED-INTEGER        |\n   |                      | contains
      the lower bound and the second    |\n   |                      | SIGNED-INTEGER
      contains the upper bound.   |\n   +----------------------+--------------------------------------------+\n
      \  | 1setOf X             | Encoding according to the rules for an     |\n   |
      \                     | attribute with more than one value.  Each  |\n   |                      |
      value X is encoded according to the rules  |\n   |                      | for
      encoding its type.                     |\n   +----------------------+--------------------------------------------+\n
      \  | octetString          | OCTET-STRING                               |\n   +----------------------+--------------------------------------------+\n
      \  | collection           | Encoding as defined in Section 3.1.6.      |\n   +----------------------+--------------------------------------------+\n
      \                    Table 7: Attribute Value Encoding\n   The attribute syntax
      type of the value determines its encoding and\n   the value of its \"value-tag\".\n"
    title: 3.9.  (Attribute) "value"
  - contents:
    - "3.10.  Data\n   The \"data\" field MUST include any data required by the operation.\n"
    title: 3.10.  Data
  title: 3.  Encoding of the Operation Layer
- contents:
  - "4.  Encoding of Transport Layer\n   HTTP/1.1 [RFC7230] is the REQUIRED transport
    layer for this protocol.\n   HTTP/2 [RFC7540] is an OPTIONAL transport layer for
    this protocol.\n   The operation layer has been designed with the assumption that
    the\n   transport layer contains the following information:\n   o  the target
    URI for the operation; and\n   o  the total length of the data in the operation
    layer, either as a\n      single length or as a sequence of chunks each with a
    length.\n   Printer implementations MUST support HTTP over the IANA-assigned\n
    \  well-known port 631 (the IPP default port), although a Printer\n   implementation
    can support HTTP over some other port as well.\n   Each HTTP operation MUST use
    the POST method where the request-target\n   is the object target of the operation
    and where the \"Content-Type\" of\n   the message body in each request and response
    MUST be \"application/\n   ipp\".  The message body MUST contain the operation
    layer and MUST\n   have the syntax described in Section 3.2, \"Syntax of Encoding\".
    \ A\n   Client implementation MUST adhere to the rules for a Client described\n
    \  for HTTP [RFC7230].  A Printer (server) implementation MUST adhere to\n   the
    rules for an origin server described for HTTP [RFC7230].\n   An IPP server sends
    a response for each request that it receives.  If\n   an IPP server detects an
    error, it MAY send a response before it has\n   read the entire request.  If the
    HTTP layer of the IPP server\n   completes processing the HTTP headers successfully,
    it MAY send an\n   intermediate response, such as \"100 Continue\", with no IPP
    data\n   before sending the IPP response.  A Client MUST expect such a variety\n
    \  of responses from an IPP server.  For further information on HTTP,\n   consult
    the HTTP documents [RFC7230].\n   An HTTP/1.1 server MUST support chunking for
    IPP requests, and an IPP\n   Client MUST support chunking for IPP responses according
    to HTTP/1.1\n   [RFC7230].\n"
  - contents:
    - "4.1.  Printer URI, Job URI, and Job ID\n   All Printer and Job objects are
      identified by a Uniform Resource\n   Identifier (URI) [RFC3986] so that they
      can be persistently and\n   unambiguously referenced.  Jobs can also be identified
      by a\n   combination of Printer URI and Job ID.\n   Some operation elements
      are encoded twice, once as the request-target\n   on the HTTP request-line and
      a second time as a REQUIRED operation\n   attribute in the application/ipp entity.
      \ These attributes are the\n   target for the operation and are called \"printer-uri\"
      and \"job-uri\".\n   Note: The target URI is included twice in an operation
      referencing\n   the same IPP object, but the two URIs can be different.  For
      example,\n   the HTTP request-target can be relative while the IPP request URI
      is\n   absolute.\n   HTTP allows Clients to generate and send a relative URI
      rather than\n   an absolute URI.  A relative URI identifies a resource with
      the scope\n   of the HTTP server but does not include scheme, host, or port.
      \ The\n   following statements characterize how URIs are used in the mapping
      of\n   IPP onto HTTP:\n   1.  Although potentially redundant, a Client MUST
      supply the target\n       of the operation both as an operation attribute and
      as a URI at\n       the HTTP layer.  The rationale for this decision is to maintain
      a\n       consistent set of rules for mapping \"application/ipp\" to possibly\n
      \      many communication layers, even where URIs are not used as the\n       addressing
      mechanism in the transport layer.\n   2.  Even though these two URIs might not
      be literally identical (one\n       being relative and the other being absolute),
      they MUST both\n       reference the same IPP object.\n   3.  The URI in the
      HTTP layer is either relative or absolute and is\n       used by the HTTP server
      to route the HTTP request to the correct\n       resource relative to that HTTP
      server.\n   4.  Once the HTTP server resource begins to process the HTTP request,\n
      \      it can get the reference to the appropriate IPP Printer object\n       from
      either the HTTP URI (using to the context of the HTTP server\n       for relative
      URIs) or from the URI within the operation request;\n       the choice is up
      to the implementation.\n   5.  HTTP URIs can be relative or absolute, but the
      target URI in the\n       IPP operation attribute MUST be an absolute URI.\n"
    title: 4.1.  Printer URI, Job URI, and Job ID
  title: 4.  Encoding of Transport Layer
- contents:
  - "5.  IPP URI Schemes\n   The IPP URI schemes are 'ipp' [RFC3510] and 'ipps' [RFC7472].\n
    \  Clients and Printers MUST support the ipp-URI value in the following\n   IPP
    attributes:\n   o  Job attributes:\n      *  job-uri\n      *  job-printer-uri\n
    \  o  Printer attributes:\n      *  printer-uri-supported\n   o  Operation attributes:\n
    \     *  job-uri\n      *  printer-uri\n   Each of the above attributes identifies
    a Printer or Job.  The\n   ipp-URI and ipps-URI are intended as the value of the
    attributes in\n   this list.  All of these attributes have a syntax type of 'uri',
    but\n   there are attributes with a syntax type of 'uri' that do not use the\n
    \  'ipp' scheme, e.g., \"job-more-info\".\n   If a Printer registers its URI with
    a directory service, the Printer\n   MUST register an ipp-URI or ipps-URI.\n   When
    a Client sends a request, it MUST convert a target ipp-URI to a\n   target http-URL
    (or ipps-URI to a target https-URI) for the HTTP\n   layer according to the following
    steps:\n   1.  change the 'ipp' scheme to 'http' or 'ipps' scheme to 'https';\n
    \      and\n   2.  add an explicit port 631 if the ipp-URL or ipps-URL does not\n
    \      contain an explicit port.  Note that port 631 is the IANA-\n       assigned
    well-known port for the 'ipp' and 'ipps' schemes.\n   The Client MUST use the
    target http-URL or https-URL in both the HTTP\n   request-line and HTTP headers,
    as specified by HTTP [RFC7230].\n   However, the Client MUST use the target ipp-URI
    or ipps-URI for the\n   value of the \"printer-uri\" or \"job-uri\" operation
    attribute within\n   the application/ipp body of the request.  The server MUST
    use the\n   ipp-URI or ipps-URI for the value of the \"printer-uri\", \"job-uri\",
    or\n   \"printer-uri-supported\" attributes within the application/ipp body of\n
    \  the response.\n   For example, when an IPP Client sends a request directly,
    i.e., no\n   proxy, to an ipp-URI \"ipp://printer.example.com/ipp/print/myqueue\",\n
    \  it opens a TCP connection to port 631 (the IPP implicit port) on the\n   host
    \"printer.example.com\" and sends the following data:\n     POST /ipp/print/myqueue
    HTTP/1.1\n     Host: printer.example.com:631\n     Content-type: application/ipp\n
    \    Transfer-Encoding: chunked\n     ...\n     \"printer-uri\" 'ipp://printer.example.com/ipp/print/myqueue'\n
    \           (encoded in application/ipp message body)\n     ...\n                       Figure
    11: Direct IPP Request\n   As another example, when an IPP Client sends the same
    request as\n   above via a proxy \"myproxy.example.com\", it opens a TCP connection
    to\n   the proxy port 8080 on the proxy host \"myproxy.example.com\" and sends\n
    \  the following data:\n     POST http://printer.example.com:631/ipp/print/myqueue
    HTTP/1.1\n     Host: printer.example.com:631\n     Content-type: application/ipp\n
    \    Transfer-Encoding: chunked\n     ...\n     \"printer-uri\" 'ipp://printer.example.com/ipp/print/myqueue'\n
    \           (encoded in application/ipp message body)\n     ...\n                      Figure
    12: Proxied IPP Request\n   The proxy then connects to the IPP origin server with
    headers that\n   are the same as the \"no-proxy\" example above.\n"
  title: 5.  IPP URI Schemes
- contents:
  - "6.  IANA Considerations\n   The IANA-PRINTER-MIB [RFC3805] has been updated to
    reference this\n   document; the current version is available from\n   <http://www.iana.org>.\n
    \  See the IANA Considerations in the document \"Internet Printing\n   Protocol/1.1:
    Model and Semantics\" [RFC8011] for information on IANA\n   considerations for
    IPP extensions.  IANA has updated the existing\n   'application/ipp' media type
    registration (whose contents are defined\n   in Section 3 \"Encoding of the Operation
    Layer\") with the following\n   information.\n   Type name: application\n   Subtype
    name: ipp\n   Required parameters: N/A\n   Optional parameters: N/A\n   Encoding
    considerations: IPP requests/responses MAY contain long\n   lines and ALWAYS contain
    binary data (for example, attribute value\n   lengths).\n   Security considerations:
    IPP requests/responses do not introduce any\n   security risks not already inherent
    in the underlying transport\n   protocols.  Protocol mixed-version interworking
    rules in [RFC8011] as\n   well as protocol-encoding rules in this document are
    complete and\n   unambiguous.  See also the security considerations in this document\n
    \  and [RFC8011].\n   Interoperability considerations: IPP requests (generated
    by Clients)\n   and responses (generated by servers) MUST comply with all conformance\n
    \  requirements imposed by the normative specifications [RFC8011] and\n   this
    document.  Protocol-encoding rules specified in RFC 8010 are\n   comprehensive
    so that interoperability between conforming\n   implementations is guaranteed
    (although support for specific optional\n   features is not ensured).  Both the
    \"charset\" and \"natural-language\"\n   of all IPP attribute values that are
    a LOCALIZED-STRING are explicit\n   within IPP requests/responses (without recourse
    to any external\n   information in HTTP, SMTP, or other message transport headers).\n
    \  Published specifications: RFCs 8010 and 8011\n   Applications that use this
    media type: Internet Printing Protocol\n   (IPP) print clients and print servers
    that communicate using HTTP/\n   HTTPS or other transport protocols.  Messages
    of type \"application/\n   ipp\" are self-contained and transport independent,
    including\n   \"charset\" and \"natural-language\" context for any LOCALIZED-STRING\n
    \  value.\n   Fragment identifier considerations: N/A\n   Additional information:\n
    \     Deprecated alias names for this type: N/A\n      Magic number(s): N/A\n
    \     File extension(s): N/A\n      Macintosh file type code(s): N/A\n   Person
    & email address to contact for further information:\n      ISTO PWG IPP Workgroup
    <ipp@pwg.org>\n   Intended usage: COMMON\n   Restrictions on usage: N/A\n   Author:
    ISTO PWG IPP Workgroup <ipp@pwg.org>\n   Change controller: ISTO PWG IPP Workgroup
    <ipp@pwg.org>\n   Provisional registration? (standards tree only): No\n"
  title: 6.  IANA Considerations
- contents:
  - "7.  Internationalization Considerations\n   See the section on \"Internationalization
    Considerations\" in the\n   document \"Internet Printing Protocol/1.1: Model and
    Semantics\"\n   [RFC8011] for information on internationalization.  This document\n
    \  adds no additional issues.\n"
  title: 7.  Internationalization Considerations
- contents:
  - "8.  Security Considerations\n   The IPP Model and Semantics document [RFC8011]
    discusses high-level\n   security requirements (Client Authentication, Server
    Authentication,\n   and Operation Privacy).  Client Authentication is the mechanism
    by\n   which the Client proves its identity to the server in a secure\n   manner.
    \ Server Authentication is the mechanism by which the server\n   proves its identity
    to the Client in a secure manner.  Operation\n   Privacy is defined as a mechanism
    for protecting operations from\n   eavesdropping.\n   Message Integrity is addressed
    in the document \"Internet Printing\n   Protocol (IPP) over HTTPS Transport Binding
    and the 'ipps' URI\n   Scheme\" [RFC7472].\n"
  - contents:
    - "8.1.  Security Conformance Requirements\n   This section defines the security
      requirements for IPP Clients and\n   IPP objects.\n"
    - contents:
      - "8.1.1.  Digest Authentication\n   IPP Clients and Printers SHOULD support
        Digest Authentication\n   [RFC7616].  Use of the Message Integrity feature
        (qop=\"auth-int\") is\n   OPTIONAL.\n   Note: Previous versions of this specification
        required support for\n   the MD5 algorithms; however, [RFC7616] makes SHA2-256
        mandatory to\n   implement and deprecates MD5, only allowing its use for backwards\n
        \  compatibility reasons.  IPP implementations that support Digest\n   Authentication
        MUST support SHA2-256 and SHOULD support MD5 for\n   backwards compatibility.\n
        \  Note: The reason that IPP Clients and Printers SHOULD (rather than\n   MUST)
        support Digest Authentication is that there is a certain class\n   of Output
        Devices where it does not make sense.  Specifically, a low-\n   end device
        with limited ROM space and low paper throughput may not\n   need Client Authentication.
        \ This class of device typically requires\n   firmware designers to make trade-offs
        between protocols and\n   functionality to arrive at the lowest-cost solution
        possible.\n   Factored into the designer's decisions is not just the size
        of the\n   code, but also the testing, maintenance, usefulness, and time-to-\n
        \  market impact for each feature delivered to the customer.  Forcing\n   such
        low-end devices to provide security in order to claim IPP/1.1\n   conformance
        would not make business sense.  Print devices that have\n   high-volume throughput
        and have available ROM space will typically\n   provide support for Client
        Authentication that safeguards the device\n   from unauthorized access because
        these devices are prone to a high\n   loss of consumables and paper if unauthorized
        access occurs.\n"
      title: 8.1.1.  Digest Authentication
    - contents:
      - "8.1.2.  Transport Layer Security (TLS)\n   IPP Clients and Printers SHOULD
        support Transport Layer Security\n   (TLS) [RFC5246] [RFC7525] for Server
        Authentication and Operation\n   Privacy.  IPP Printers MAY also support TLS
        for Client\n   Authentication.  IPP Clients and Printers MAY support Basic\n
        \  Authentication [RFC7617] for User Authentication if the channel is\n   secure,
        e.g., IPP over HTTPS [RFC7472].  IPP Clients and Printers\n   SHOULD NOT support
        Basic Authentication over insecure channels.\n   The IPP Model and Semantics
        document [RFC8011] defines two Printer\n   attributes (\"uri-authentication-supported\"
        and \"uri-security-\n   supported\") that the Client can use to discover the
        security policy\n   of a Printer.  That document also outlines IPP-specific
        security\n   considerations and is the primary reference for security implications\n
        \  with regard to the IPP itself.\n   Note: Because previous versions of this
        specification did not require\n   TLS support, this version cannot require
        it for IPP/1.1.  However,\n   since printing often involves a great deal of
        sensitive or private\n   information (medical reports, performance reviews,
        banking\n   information, etc.) and network monitoring is pervasive ([RFC7258]),\n
        \  implementors are strongly encouraged to include TLS support.\n   Note:
        Because IPP Printers typically use self-signed X.509\n   certificates, IPP
        Clients SHOULD support Trust On First Use (defined\n   in [RFC7435]) in addition
        to traditional X.509 certificate\n   validation.\n"
      title: 8.1.2.  Transport Layer Security (TLS)
    title: 8.1.  Security Conformance Requirements
  - contents:
    - "8.2.  Using IPP with TLS\n   IPP uses the \"Upgrading to TLS Within HTTP/1.1\"
      mechanism [RFC2817]\n   for 'ipp' URIs.  The Client requests a secure TLS connection
      by using\n   the HTTP \"Upgrade\" header while the server agrees in the HTTP\n
      \  response.  The switch to TLS occurs either because the server grants\n   the
      Client's request to upgrade to TLS or a server asks to switch to\n   TLS in
      its response.  Secure communication begins with a server's\n   response to switch
      to TLS.\n   IPP uses the \"HTTPS: HTTP over TLS\" mechanism [RFC2818] for 'ipps'\n
      \  URIs.  The Client and server negotiate a secure TLS connection\n   immediately
      and unconditionally.\n"
    title: 8.2.  Using IPP with TLS
  title: 8.  Security Considerations
- contents:
  - "9.  Interoperability with Other IPP Versions\n   It is beyond the scope of this
    specification to mandate conformance\n   with versions of IPP other than 1.1.
    \ IPP was deliberately designed,\n   however, to make supporting other versions
    easy.  IPP objects\n   (Printers, Jobs, etc.) SHOULD:\n   o  understand any valid
    request whose major \"version-number\" is\n      greater than 0; and\n   o  respond
    appropriately with a response containing the same\n      \"version-number\" parameter
    value used by the Client in the request\n      (if the Client-supplied \"version-number\"
    is supported) or the\n      highest \"version-number\" supported by the Printer
    (if the Client-\n      supplied \"version-number\" is not supported).\n   IPP
    Clients SHOULD:\n   o  understand any valid response whose major \"version-number\"
    is\n      greater than 0.\n"
  - contents:
    - "9.1.  The \"version-number\" Parameter\n   The following are rules regarding
      the \"version-number\" parameter (see\n   Section 3.3):\n   1.  Clients MUST
      send requests containing a \"version-number\"\n       parameter with the highest
      supported value, e.g., '1.1', '2.0',\n       etc., and SHOULD try supplying
      alternate version numbers if they\n       receive a 'server-error-version-not-supported'
      error return in a\n       response.  For example, if a Client sends an IPP/2.0
      request that\n       is rejected with the 'server-error-version-not-supported'
      error\n       and an IPP/1.1 \"version-number\", it SHOULD retry by sending
      an\n       IPP/1.1 request.\n   2.  IPP objects (Printers, Jobs, etc.)  MUST
      accept requests\n       containing a \"version-number\" parameter with a '1.1'
      value (or\n       reject the request for reasons other than 'server-error-version-\n
      \      not-supported').\n   3.  IPP objects SHOULD either accept requests whose
      major version is\n       greater than 0 or reject such requests with the 'server-error-\n
      \      version-not-supported' status-code.  See Section 4.1.8 of\n       [RFC8011].\n
      \  4.  In any case, security MUST NOT be compromised when a Client\n       supplies
      a lower \"version-number\" parameter in a request.  For\n       example, if
      an IPP/2.0 conforming Printer accepts version '1.1'\n       requests and is
      configured to enforce Digest Authentication, it\n       MUST do the same for
      a version '1.1' request.\n"
    title: 9.1.  The "version-number" Parameter
  - contents:
    - "9.2.  Security and URI Schemes\n   The following are rules regarding security,
      the \"version-number\"\n   parameter, and the URI scheme supplied in target
      attributes and\n   responses:\n   1.  When a Client supplies a request, the
      \"printer-uri\" or \"job-uri\"\n       target operation attribute MUST have
      the same scheme as that\n       indicated in one of the values of the \"printer-uri-supported\"\n
      \      Printer attribute.\n   2.  When the Printer returns the \"job-printer-uri\"
      or \"job-uri\" Job\n       Description attributes, it SHOULD return the same
      scheme ('ipp',\n       'ipps', etc.) that the Client supplied in the \"printer-uri\"
      or\n       \"job-uri\" target operation attributes in the Get-Job-Attributes\n
      \      or Get-Jobs request, rather than the scheme used when the Job was\n       created.
      \ However, when a Client requests Job attributes using\n       the Get-Job-Attributes
      or Get-Jobs operations, the Jobs and Job\n       attributes that the Printer
      returns depends on: (1) the security\n       in effect when the Job was created,
      (2) the security in effect in\n       the query request, and (3) the security
      policy in force.\n   3.  The Printer MUST enforce its security and privacy policies
      based\n       on the owner of the IPP object and the URI scheme and/or\n       credentials
      supplied by the Client in the current request.\n"
    title: 9.2.  Security and URI Schemes
  title: 9.  Interoperability with Other IPP Versions
- contents:
  - "10.  Changes since RFC 2910\n   The following changes have been made since the
    publication of\n   RFC 2910:\n   o  Added references to current IPP extension
    specifications.\n   o  Added optional support for HTTP/2.\n   o  Added collection
    attribute syntax from RFC 3382.\n   o  Fixed typographical errors.\n   o  Now
    reference TLS/1.2 and no longer mandate the TLS/1.0 MTI\n      ciphersuites.\n
    \  o  Updated all references.\n   o  Updated document organization to follow current
    style.\n   o  Updated example ipp: URIs to follow guidelines in RFC 7472.\n   o
    \ Updated version compatibility for all versions of IPP.\n   o  Updated HTTP Digest
    Authentication to optional for Clients.\n   o  Removed references to (Experimental)
    IPP/1.0 and usage of\n      http:/https: URLs.\n"
  title: 10.  Changes since RFC 2910
- contents:
  - '11.  References

    '
  - contents:
    - "11.1.  Normative References\n   [PWG5100.12]\n              Sweet, M. and I.
      McDonald, \"IPP Version 2.0, 2.1, and\n              2.2\", October 2015, <http://ftp.pwg.org/pub/pwg/standards/\n
      \             std-ipp20-20151030-5100.12.pdf>.\n   [RFC20]    Cerf, V., \"ASCII
      format for network interchange\", STD 80,\n              RFC 20, DOI 10.17487/RFC0020,
      October 1969,\n              <http://www.rfc-editor.org/info/rfc20>.\n   [RFC793]
      \  Postel, J., \"Transmission Control Protocol\", STD 7,\n              RFC
      793, DOI 10.17487/RFC0793, September 1981,\n              <http://www.rfc-editor.org/info/rfc793>.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC2579]  McCloghrie,
      K., Ed., Perkins, D., Ed., and J.\n              Schoenwaelder, Ed., \"Textual
      Conventions for SMIv2\",\n              STD 58, RFC 2579, DOI 10.17487/RFC2579,
      April 1999,\n              <http://www.rfc-editor.org/info/rfc2579>.\n   [RFC2817]
      \ Khare, R. and S. Lawrence, \"Upgrading to TLS Within\n              HTTP/1.1\",
      RFC 2817, DOI 10.17487/RFC2817, May 2000,\n              <http://www.rfc-editor.org/info/rfc2817>.\n
      \  [RFC2818]  Rescorla, E., \"HTTP Over TLS\", RFC 2818,\n              DOI
      10.17487/RFC2818, May 2000,\n              <http://www.rfc-editor.org/info/rfc2818>.\n
      \  [RFC2978]  Freed, N. and J. Postel, \"IANA Charset Registration\n              Procedures\",
      BCP 19, RFC 2978, DOI 10.17487/RFC2978,\n              October 2000, <http://www.rfc-editor.org/info/rfc2978>.\n
      \  [RFC3510]  Herriot, R. and I. McDonald, \"Internet Printing\n              Protocol/1.1:
      IPP URL Scheme\", RFC 3510,\n              DOI 10.17487/RFC3510, April 2003,\n
      \             <http://www.rfc-editor.org/info/rfc3510>.\n   [RFC3629]  Yergeau,
      F., \"UTF-8, a transformation format of ISO\n              10646\", STD 63,
      RFC 3629, DOI 10.17487/RFC3629, November\n              2003, <http://www.rfc-editor.org/info/rfc3629>.\n
      \  [RFC3986]  Berners-Lee, T., Fielding, R., and L. Masinter, \"Uniform\n              Resource
      Identifier (URI): Generic Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986,
      January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n   [RFC5234]
      \ Crocker, D., Ed. and P. Overell, \"Augmented BNF for Syntax\n              Specifications:
      ABNF\", STD 68, RFC 5234,\n              DOI 10.17487/RFC5234, January 2008,\n
      \             <http://www.rfc-editor.org/info/rfc5234>.\n   [RFC5246]  Dierks,
      T. and E. Rescorla, \"The Transport Layer Security\n              (TLS) Protocol
      Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246, August 2008,\n
      \             <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC7230]  Fielding,
      R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol (HTTP/1.1):
      Message Syntax and Routing\",\n              RFC 7230, DOI 10.17487/RFC7230,
      June 2014,\n              <http://www.rfc-editor.org/info/rfc7230>.\n   [RFC7231]
      \ Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol
      (HTTP/1.1): Semantics and Content\", RFC 7231,\n              DOI 10.17487/RFC7231,
      June 2014,\n              <http://www.rfc-editor.org/info/rfc7231>.\n   [RFC7232]
      \ Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n              Protocol
      (HTTP/1.1): Conditional Requests\", RFC 7232,\n              DOI 10.17487/RFC7232,
      June 2014,\n              <http://www.rfc-editor.org/info/rfc7232>.\n   [RFC7234]
      \ Fielding, R., Ed., Nottingham, M., Ed., and J. Reschke,\n              Ed.,
      \"Hypertext Transfer Protocol (HTTP/1.1): Caching\",\n              RFC 7234,
      DOI 10.17487/RFC7234, June 2014,\n              <http://www.rfc-editor.org/info/rfc7234>.\n
      \  [RFC7235]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n
      \             Protocol (HTTP/1.1): Authentication\", RFC 7235,\n              DOI
      10.17487/RFC7235, June 2014,\n              <http://www.rfc-editor.org/info/rfc7235>.\n
      \  [RFC7472]  McDonald, I. and M. Sweet, \"Internet Printing Protocol\n              (IPP)
      over HTTPS Transport Binding and the 'ipps' URI\n              Scheme\", RFC
      7472, DOI 10.17487/RFC7472, March 2015,\n              <http://www.rfc-editor.org/info/rfc7472>.\n
      \  [RFC7540]  Belshe, M., Peon, R., and M. Thomson, Ed., \"Hypertext\n              Transfer
      Protocol Version 2 (HTTP/2)\", RFC 7540,\n              DOI 10.17487/RFC7540,
      May 2015,\n              <http://www.rfc-editor.org/info/rfc7540>.\n   [RFC7541]
      \ Peon, R. and H. Ruellan, \"HPACK: Header Compression for\n              HTTP/2\",
      RFC 7541, DOI 10.17487/RFC7541, May 2015,\n              <http://www.rfc-editor.org/info/rfc7541>.\n
      \  [RFC7616]  Shekh-Yusef, R., Ed., Ahrens, D., and S. Bremer, \"HTTP\n              Digest
      Access Authentication\", RFC 7616,\n              DOI 10.17487/RFC7616, September
      2015,\n              <http://www.rfc-editor.org/info/rfc7616>.\n   [RFC7617]
      \ Reschke, J., \"The 'Basic' HTTP Authentication Scheme\",\n              RFC
      7617, DOI 10.17487/RFC7617, September 2015,\n              <http://www.rfc-editor.org/info/rfc7617>.\n
      \  [RFC8011]  Sweet, M. and I. McDonald, \"Internet Printing\n              Protocol/1.1:
      Model and Semantics\", RFC 8011,\n              DOI 10.17487/RFC8011, January
      2017,\n              <http://www.rfc-editor.org/info/rfc8011>.\n"
    title: 11.1.  Normative References
  - contents:
    - "11.2.  Informative References\n   [IANA-IPP] IANA, \"Internet Printing Protocol
      (IPP) Registry\",\n              <http://www.iana.org/assignments/ipp-registrations/>.\n
      \  [PWG5100.3]\n              Ocke, K. and T. Hastings, \"Internet Printing
      Protocol\n              (IPP): Production Printing Attributes - Set1\", Candidate\n
      \             Standard 5100.3-2001, February 2001,\n              <http://ftp.pwg.org/pub/pwg/candidates/\n
      \             cs-ippprodprint10-20010212-5100.3.pdf>.\n   [RFC1179]  McLaughlin,
      L., \"Line printer daemon protocol\", RFC 1179,\n              DOI 10.17487/RFC1179,
      August 1990,\n              <http://www.rfc-editor.org/info/rfc1179>.\n   [RFC7258]
      \ Farrell, S. and H. Tschofenig, \"Pervasive Monitoring Is an\n              Attack\",
      BCP 188, RFC 7258, DOI 10.17487/RFC7258, May\n              2014, <http://www.rfc-editor.org/info/rfc7258>.\n
      \  [RFC7435]  Dukhovni, V., \"Opportunistic Security: Some Protection\n              Most
      of the Time\", RFC 7435, DOI 10.17487/RFC7435,\n              December 2014,
      <http://www.rfc-editor.org/info/rfc7435>.\n   [RFC7525]  Sheffer, Y., Holz,
      R., and P. Saint-Andre,\n              \"Recommendations for Secure Use of Transport
      Layer\n              Security (TLS) and Datagram Transport Layer Security\n
      \             (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525, May\n              2015,
      <http://www.rfc-editor.org/info/rfc7525>.\n"
    title: 11.2.  Informative References
  title: 11.  References
- contents:
  - 'Appendix A.  Protocol Examples

    '
  - contents:
    - "A.1.  Print-Job Request\n   The following is an example of a Print-Job request
      with \"job-name\",\n   \"copies\", and \"sides\" specified.  The \"ipp-attribute-fidelity\"\n
      \  attribute is set to 'true' so that the print request will fail if the\n   \"copies\"
      or the \"sides\" attribute is not supported or their values\n   are not supported.\n
      \   Octets                         Symbolic Value       Protocol field\n    0x0101
      \                        1.1                  version-number\n    0x0002                         Print-Job
      \           operation-id\n    0x00000001                     1                    request-id\n
      \   0x01                           start operation-     operation-\n                                   attributes
      \          attributes-tag\n    0x47                           charset type         value-tag\n
      \   0x0012                                              name-length\n    attributes-charset
      \            attributes-charset   name\n    0x0005                                              value-length\n
      \   utf-8                          UTF-8                value\n    0x48                           natural-language
      \    value-tag\n                                   type\n    0x001b                                              name-length\n
      \   attributes-natural-language    attributes-natural-  name\n                                   language\n
      \   0x0005                                              value-length\n    en-us
      \                         en-US                value\n    0x45                           uri
      type             value-tag\n    0x000b                                              name-length\n
      \   printer-uri                    printer-uri          name\n    0x002c                                              value-length\n
      \   ipp://printer.example.com/ipp/ printer pinetree     value\n    print/pinetree\n
      \   0x42                           nameWithoutLanguage  value-tag\n                                   type\n
      \   0x0008                                              name-length\n    job-name
      \                      job-name             name\n    0x0006                                              value-length\n
      \   foobar                         foobar               value\n    0x22                           boolean
      type         value-tag\n    0x0016                                              name-length\n
      \   ipp-attribute-fidelity         ipp-attribute-       name\n                                   fidelity\n
      \   0x0001                                              value-length\n    0x01
      \                          true                 value\n    0x02                           start
      job-attributes job-attributes-\n                                                        tag\n
      \   0x21                           integer type         value-tag\n    0x0006
      \                                             name-length\n    copies                         copies
      \              name\n    0x0004                                              value-length\n
      \   0x00000014                     20                   value\n    0x44                           keyword
      type         value-tag\n    0x0005                                              name-length\n
      \   sides                          sides                name\n    0x0013                                              value-length\n
      \   two-sided-long-edge            two-sided-long-edge  value\n    0x03                           end-of-attributes
      \   end-of-\n                                                        attributes-tag\n
      \   %!PDF...                       <PDF Document>       data\n"
    title: A.1.  Print-Job Request
  - contents:
    - "A.2.  Print-Job Response (Successful)\n   Here is an example of a successful
      Print-Job response to the previous\n   Print-Job request.  The Printer supported
      the \"copies\" and \"sides\"\n   attributes and their supplied values.  The
      status-code returned is\n   'successful-ok'.\n    Octets                           Symbolic
      Value     Protocol field\n    0x0101                           1.1                version-number\n
      \   0x0000                           successful-ok      status-code\n    0x00000001
      \                      1                  request-id\n    0x01                             start
      operation-   operation-\n                                     attributes         attributes-tag\n
      \   0x47                             charset type       value-tag\n    0x0012
      \                                             name-length\n    attributes-charset
      \              attributes-charset name\n    0x0005                                              value-length\n
      \   utf-8                            UTF-8              value\n    0x48                             natural-language
      \  value-tag\n                                     type\n    0x001b                                              name-length\n
      \   attributes-natural-language      attributes-        name\n                                     natural-language\n
      \   0x0005                                              value-length\n    en-us
      \                           en-US              value\n    0x41                             textWithoutLanguag
      value-tag\n                                     e type\n    0x000e                                              name-length\n
      \   status-message                   status-message     name\n    0x000d                                              value-length\n
      \   successful-ok                    successful-ok      value\n    0x02                             start
      job-         job-attributes-\n                                     attributes
      \        tag\n    0x21                             integer            value-tag\n
      \   0x0006                                              name-length\n    job-id
      \                          job-id             name\n    0x0004                                              value-length\n
      \   147                              147                value\n    0x45                             uri
      type           value-tag\n    0x0007                                              name-length\n
      \   job-uri                          job-uri            name\n    0x0030                                              value-length\n
      \   ipp://printer.example.com/ipp/pr job 147 on         value\n    int/pinetree/147
      \                pinetree\n    0x23                             enum type          value-tag\n
      \   0x0009                                              name-length\n    job-state
      \                       job-state          name\n    0x0004                                              value-length\n
      \   0x0003                           pending            value\n    0x03                             end-of-attributes
      \ end-of-\n                                                        attributes-tag\n"
    title: A.2.  Print-Job Response (Successful)
  - contents:
    - "A.3.  Print-Job Response (Failure)\n   Here is an example of an unsuccessful
      Print-Job response to the\n   previous Print-Job request.  It fails because,
      in this case, the\n   Printer does not support the \"sides\" attribute and because
      the value\n   '20' for the \"copies\" attribute is not supported.  Therefore,
      no Job\n   is created, and neither a \"job-id\" nor a \"job-uri\" operation\n
      \  attribute is returned.  The error code returned is 'client-error-\n   attributes-or-values-not-supported'
      (0x040b).\n   Octets                      Symbolic Value              Protocol\n
      \                                                          field\n   0x0101
      \                     1.1                         version-\n                                                           number\n
      \  0x040b                      client-error-attributes-or- status-code\n                               values-not-supported\n
      \  0x00000001                  1                           request-id\n   0x01
      \                       start operation-attributes  operation-\n                                                           attributes\n
      \                                                          tag\n   0x47                        charset
      type                value-tag\n   0x0012                                                  name-length\n
      \  attributes-charset          attributes-charset          name\n   0x0005                                                  value-length\n
      \  utf-8                       UTF-8                       value\n   0x48                        natural-language
      type       value-tag\n   0x001b                                                  name-length\n
      \  attributes-natural-language attributes-natural-language name\n   0x0005                                                  value-length\n
      \  en-us                       en-US                       value\n   0x41                        textWithoutLanguage
      type    value-tag\n   0x000e                                                  name-length\n
      \  status-message              status-message              name\n   0x002f                                                  value-length\n
      \  client-error-attributes-or- client-error-attributes-or- value\n   values-not-supported
      \       values-not-supported\n   0x05                        start unsupported-
      \         unsupported-\n                               attributes                  attributes\n
      \                                                          tag\n   0x21                        integer
      type                value-tag\n   0x0006                                                  name-length\n
      \  copies                      copies                      name\n   0x0004                                                  value-length\n
      \  0x00000014                  20                          value\n   0x10                        unsupported
      (type)          value-tag\n   0x0005                                                  name-length\n
      \  sides                       sides                       name\n   0x0000                                                  value-length\n
      \  0x03                        end-of-attributes           end-of-\n                                                           attributes-\n
      \                                                          tag\n"
    title: A.3.  Print-Job Response (Failure)
  - contents:
    - "A.4.  Print-Job Response (Success with Attributes Ignored)\n   Here is an example
      of a successful Print-Job response to a Print-Job\n   request like the previous
      Print-Job request, except that the value of\n   \"ipp-attribute-fidelity\" is
      'false'.  The print request succeeds,\n   even though, in this case, the Printer
      supports neither the \"sides\"\n   attribute nor the value '20' for the \"copies\"
      attribute.  Therefore,\n   a Job is created and both a \"job-id\" and a \"job-uri\"
      operation\n   attribute are returned.  The unsupported attributes are also returned\n
      \  in an Unsupported Attributes group.  The error code returned is\n   'successful-ok-ignored-or-substituted-attributes'
      (0x0001).\n   Octets                     Symbolic Value              Protocol
      field\n   0x0101                     1.1                         version-number\n
      \  0x0001                     successful-ok-ignored-or-   status-code\n                              substituted-attributes\n
      \  0x00000001                 1                           request-id\n   0x01
      \                      start operation-attributes  operation-\n                                                          attributes-tag\n
      \  0x47                       charset type                value-tag\n   0x0012
      \                                                name-length\n   attributes-charset
      \        attributes-charset          name\n   0x0005                                                 value-length\n
      \  utf-8                      UTF-8                       value\n   0x48                       natural-language
      type       value-tag\n   0x001b                                                 name-length\n
      \  attributes-natural-        attributes-natural-language name\n   language\n
      \  0x0005                                                 value-length\n   en-us
      \                     en-US                       value\n   0x41                       textWithoutLanguage
      type    value-tag\n   0x000e                                                 name-length\n
      \  status-message             status-message              name\n   0x002f                                                 value-length\n
      \  successful-ok-ignored-or-  successful-ok-ignored-or-   value\n   substituted-attributes
      \    substituted-attributes\n   0x05                       start unsupported-
      \         unsupported-\n                              attributes                  attributes
      tag\n   0x21                       integer type                value-tag\n   0x0006
      \                                                name-length\n   copies                     copies
      \                     name\n   0x0004                                                 value-length\n
      \  0x00000014                 20                          value\n   0x10                       unsupported
      \ (type)         value-tag\n   0x0005                                                 name-length\n
      \  sides                      sides                       name\n   0x0000                                                 value-length\n
      \  0x02                       start job-attributes        job-\n                                                          attributes-tag\n
      \  0x21                       integer                     value-tag\n   0x0006
      \                                                name-length\n   job-id                     job-id
      \                     name\n   0x0004                                                 value-length\n
      \  147                        147                         value\n   0x45                       uri
      type                    value-tag\n   0x0007                                                 name-length\n
      \  job-uri                    job-uri                     name\n   0x0030                                                 value-length\n
      \  ipp://printer.example.com/ job 147 on pinetree         value\n   ipp/print/pinetree/147\n
      \  0x23                       enum  type                  value-tag\n   0x0009
      \                                                name-length\n   job-state                  job-state
      \                  name\n   0x0004                                                 value-length\n
      \  0x0003                     pending                     value\n   0x03                       end-of-attributes
      \          end-of-\n                                                          attributes-tag\n"
    title: A.4.  Print-Job Response (Success with Attributes Ignored)
  - contents:
    - "A.5.  Print-URI Request\n   The following is an example of Print-URI request
      with \"copies\" and\n   \"job-name\" parameters:\n    Octets                         Symbolic
      Value       Protocol field\n    0x0101                         1.1                  version-number\n
      \   0x0003                         Print-URI            operation-id\n    0x00000001
      \                    1                    request-id\n    0x01                           start
      operation-     operation-\n                                   attributes           attributes-tag\n
      \   0x47                           charset type         value-tag\n    0x0012
      \                                             name-length\n    attributes-charset
      \            attributes-charset   name\n    0x0005                                              value-length\n
      \   utf-8                          UTF-8                value\n    0x48                           natural-language
      \    value-tag\n                                   type\n    0x001b                                              name-length\n
      \   attributes-natural-language    attributes-natural-  name\n                                   language\n
      \   0x0005                                              value-length\n    en-us
      \                         en-US                value\n    0x45                           uri
      type             value-tag\n    0x000b                                              name-length\n
      \   printer-uri                    printer-uri          name\n    0x002c                                              value-length\n
      \   ipp://printer.example.com/ipp/ printer pinetree     value\n    print/pinetree\n
      \   0x45                           uri type             value-tag\n    0x000c
      \                                             name-length\n    document-uri
      \                  document-uri         name\n    0x0019                                              value-length\n
      \   ftp://foo.example.com/foo      ftp://foo.example.co value\n                                   m/foo\n
      \   0x42                           nameWithoutLanguage  value-tag\n                                   type\n
      \   0x0008                                              name-length\n    job-name
      \                      job-name             name\n    0x0006                                              value-length\n
      \   foobar                         foobar               value\n    0x02                           start
      job-attributes job-attributes-\n                                                        tag\n
      \   0x21                           integer type         value-tag\n    0x0006
      \                                             name-length\n    copies                         copies
      \              name\n    0x0004                                              value-length\n
      \   0x00000001                     1                    value\n    0x03                           end-of-attributes
      \   end-of-\n                                                        attributes-tag\n"
    title: A.5.  Print-URI Request
  - contents:
    - "A.6.  Create-Job Request\n   The following is an example of Create-Job request
      with no parameters\n   and no attributes:\n    Octets                         Symbolic
      Value       Protocol field\n    0x0101                         1.1                  version-number\n
      \   0x0005                         Create-Job           operation-id\n    0x00000001
      \                    1                    request-id\n    0x01                           start
      operation-     operation-\n                                   attributes           attributes-tag\n
      \   0x47                           charset type         value-tag\n    0x0012
      \                                             name-length\n    attributes-charset
      \            attributes-charset   name\n    0x0005                                              value-length\n
      \   utf-8                          UTF-8                value\n    0x48                           natural-language
      \    value-tag\n                                   type\n    0x001b                                              name-length\n
      \   attributes-natural-language    attributes-natural-  name\n                                   language\n
      \   0x0005                                              value-length\n    en-us
      \                         en-US                value\n    0x45                           uri
      type             value-tag\n    0x000b                                              name-length\n
      \   printer-uri                    printer-uri          name\n    0x002c                                              value-length\n
      \   ipp://printer.example.com/ipp/ printer pinetree     value\n    print/pinetree\n
      \   0x03                           end-of-attributes    end-of-\n                                                        attributes-tag\n"
    title: A.6.  Create-Job Request
  - contents:
    - "A.7.  Create-Job Request with Collection Attributes\n   The following is an
      example of Create-Job request with the \"media-\n   col\" collection attribute
      [PWG5100.3] with the value \"media-\n   size={x-dimension=21000 y-dimension=29700}
      media-type='stationery'\":\n   Octets                         Symbolic Value
      \      Protocol field\n   0x0101                         1.1                  version-number\n
      \  0x0005                         Create-Job           operation-id\n   0x00000001
      \                    1                    request-id\n   0x01                           start
      operation-     operation-\n                                  attributes           attributes-tag\n
      \  0x47                           charset type         value-tag\n   0x0012
      \                                             name-length\n   attributes-charset
      \            attributes-charset   name\n   0x0005                                              value-length\n
      \  utf-8                          UTF-8                value\n   0x48                           natural-language
      \    value-tag\n                                  type\n   0x001b                                              name-length\n
      \  attributes-natural-language    attributes-natural-  name\n                                  language\n
      \  0x0005                                              value-length\n   en-us
      \                         en-US                value\n   0x45                           uri
      type             value-tag\n   0x000b                                              name-length\n
      \  printer-uri                    printer-uri          name\n   0x002c                                              value-length\n
      \  ipp://printer.example.com/ipp/ printer pinetree     value\n   print/pinetree\n
      \  0x34                           begCollection        value-tag\n   0x0009
      \                        9                    name-length\n   media-col                      media-col
      \           name\n   0x0000                         0                    value-length\n
      \  0x4a                           memberAttrName       value-tag\n   0x0000
      \                        0                    name-length\n   0x000a                         10
      \                  value-length\n   media-size                     media-size
      \          value (member-\n                                                       name)\n
      \  0x34                           begCollection        member-value-tag\n   0x0000
      \                        0                    name-length\n   0x0000                         0
      \                   member-value-\n                                                       length\n
      \  0x4a                           memberAttrName       value-tag\n   0x0000
      \                        0                    name-length\n   0x000b                         11
      \                  value-length\n   x-dimension                    x-dimension
      \         value (member-\n                                                       name)\n
      \  0x21                           integer              member-value-tag\n   0x0000
      \                        0                    name-length\n   0x0004                         4
      \                   member-value-\n                                                       length\n
      \  0x00005208                     21000                member-value\n   0x4a
      \                          memberAttrName       value-tag\n   0x0000                         0
      \                   name-length\n   0x000b                         11                   value-length\n
      \  y-dimension                    y-dimension          value (member-\n                                                       name)\n
      \  0x21                           integer              member-value-tag\n   0x0000
      \                        0                    name-length\n   0x0004                         4
      \                   member-value-\n                                                       length\n
      \  0x00007404                     29700                member-value\n   0x37
      \                          endCollection        end-value-tag\n   0x0000                         0
      \                   end-name-length\n   0x0000                         0                    end-value-length\n
      \  0x4a                           memberAttrName       value-tag\n   0x0000
      \                        0                    name-length\n   0x000a                         10
      \                  value-length\n   media-type                     media-type
      \          value (member-\n                                                       name)\n
      \  0x44                           keyword              member-value-tag\n   0x0000
      \                        0                    name-length\n   0x000a                         10
      \                  member-value-\n                                                       length\n
      \  stationery                     stationery           member-value\n   0x37
      \                          endCollection        end-value-tag\n   0x0000                         0
      \                   end-name-length\n   0x0000                         0                    end-value-length\n
      \  0x03                           end-of-attributes    end-of-\n                                                       attributes-tag\n"
    title: A.7.  Create-Job Request with Collection Attributes
  - contents:
    - "A.8.  Get-Jobs Request\n   The following is an example of Get-Jobs request
      with parameters but\n   no attributes:\n    Octets                         Symbolic
      Value       Protocol field\n    0x0101                         1.1                  version-number\n
      \   0x000a                         Get-Jobs             operation-id\n    0x0000007b
      \                    123                  request-id\n    0x01                           start
      operation-     operation-\n                                   attributes           attributes-tag\n
      \   0x47                           charset type         value-tag\n    0x0012
      \                                             name-length\n    attributes-charset
      \            attributes-charset   name\n    0x0005                                              value-length\n
      \   utf-8                          UTF-8                value\n    0x48                           natural-language
      \    value-tag\n                                   type\n    0x001b                                              name-length\n
      \   attributes-natural-language    attributes-natural-  name\n                                   language\n
      \   0x0005                                              value-length\n    en-us
      \                         en-US                value\n    0x45                           uri
      type             value-tag\n    0x000b                                              name-length\n
      \   printer-uri                    printer-uri          name\n    0x002c                                              value-length\n
      \   ipp://printer.example.com/ipp/ printer pinetree     value\n    print/pinetree\n
      \   0x21                           integer type         value-tag\n    0x0005
      \                                             name-length\n    limit                          limit
      \               name\n    0x0004                                              value-length\n
      \   0x00000032                     50                   value\n    0x44                           keyword
      type         value-tag\n    0x0014                                              name-length\n
      \   requested-attributes           requested-attributes name\n    0x0006                                              value-length\n
      \   job-id                         job-id               value\n    0x44                           keyword
      type         value-tag\n    0x0000                         additional value
      \    name-length\n    0x0008                                              value-length\n
      \   job-name                       job-name             value\n    0x44                           keyword
      type         value-tag\n    0x0000                         additional value
      \    name-length\n    0x000f                                              value-length\n
      \   document-format                document-format      value\n    0x03                           end-of-attributes
      \   end-of-\n                                                        attributes-tag\n"
    title: A.8.  Get-Jobs Request
  - contents:
    - "A.9.  Get-Jobs Response\n   The following is an example of a Get-Jobs response
      from a previous\n   request with three Jobs.  The Printer returns no information
      about\n   the second Job (because of security reasons):\n   Octets                  Symbolic
      Value          Protocol field\n   0x0101                  1.1                     version-number\n
      \  0x0000                  successful-ok           status-code\n   0x0000007b
      \             123                     request-id (echoed\n                                                   back)\n
      \  0x01                    start operation-        operation-attributes-\n                           attributes
      \             tag\n   0x47                    charset type            value-tag\n
      \  0x0012                                          name-length\n   attributes-charset
      \     attributes-charset      name\n   0x0005                                          value-length\n
      \  utf-8                   UTF-8                   value\n   0x48                    natural-language
      type   value-tag\n   0x001b                                          name-length\n
      \  attributes-natural-     attributes-natural-     name\n   language                language\n
      \  0x0005                                          value-length\n   en-us                   en-US
      \                  value\n   0x41                    textWithoutLanguage     value-tag\n
      \                          type\n   0x000e                                          name-length\n
      \  status-message          status-message          name\n   0x000d                                          value-length\n
      \  successful-ok           successful-ok           value\n   0x02                    start
      job-attributes    job-attributes-tag\n                           (1st  object)\n
      \  0x21                    integer type            value-tag\n   0x0006                                          name-length\n
      \  job-id                  job-id                  name\n   0x0004                                          value-length\n
      \  147                     147                     value\n   0x36                    nameWithLanguage
      \       value-tag\n   0x0008                                          name-length\n
      \  job-name                job-name                name\n   0x000c                                          value-length\n
      \  0x0005                                          sub-value-length\n   fr-ca
      \                  fr-CA                   value\n   0x0003                                          sub-value-length\n
      \  fou                     fou                     name\n   0x02                    start
      job-attributes    job-attributes-tag\n                           (2nd object)\n
      \  0x02                    start job-attributes    job-attributes-tag\n                           (3rd
      object)\n   0x21                    integer type            value-tag\n   0x0006
      \                                         name-length\n   job-id                  job-id
      \                 name\n   0x0004                                          value-length\n
      \  148                     149                     value\n   0x36                    nameWithLanguage
      \       value-tag\n   0x0008                                          name-length\n
      \  job-name                job-name                name\n   0x0012                                          value-length\n
      \  0x0005                                          sub-value-length\n   de-CH
      \                  de-CH                   value\n   0x0009                                          sub-value-length\n
      \  isch guet               isch guet               name\n   0x03                    end-of-attributes
      \      end-of-attributes-tag\n"
    title: A.9.  Get-Jobs Response
  title: Appendix A.  Protocol Examples
- contents:
  - "Acknowledgements\n   The authors would like to acknowledge the following individuals
    for\n   their contributions to the original IPP/1.1 specifications:\n   Sylvan
    Butler, Roger deBry, Tom Hastings, Robert Herriot (the\n   original editor of
    RFC 2910), Paul Moore, Kirk Ocke, Randy Turner,\n   John Wenn, and Peter Zehler.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Michael Sweet\n   Apple Inc.\n   1 Infinite Loop\n   MS
    111-HOMC\n   Cupertino, CA  95014\n   United States of America\n   Email: msweet@apple.com\n
    \  Ira McDonald\n   High North, Inc.\n   PO Box 221\n   Grand Marais, MI  49839\n
    \  United States of America\n   Phone: +1 906-494-2434\n   Email: blueroofmusic@gmail.com\n"
  title: Authors' Addresses
