Abstract Secure shell (SSH) is a secure remote login protocol.
SSH provides for algorithms that provide authentication, key agreement, confidentiality, and data integrity services.
The purpose of this document is to show how the AES Galois Counter Mode can be used to provide both confidentiality and data integrity to the SSH Transport Layer Protocol.
Introduction Galois Counter Mode (GCM) is a block cipher mode of operation that provides both confidentiality and data integrity services.
GCM uses counter mode to encrypt the data, an operation that can be efficiently pipelined.
Further, GCM authentication uses operations that are particularly well suited to efficient implementation in hardware, making it especially appealing for high speed implementations or for implementations in an efficient and compact circuit.
The purpose of this document is to show how GCM with either AES 128 or AES 256 can be integrated into the Secure Shell Transport Layer Protocol [RFC4253].
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
Applicability Statement Using AES GCM to provide both confidentiality and data integrity is generally more efficient than using two separate algorithms to provide these security services.
Properties of Galois Counter Mode Galois Counter Mode (GCM) is a mode of operation for block ciphers that provides both confidentiality and data integrity.
National Institute of Standards and Technology (NIST)
Special Publication SP 800 38D [GCM] gives an excellent explanation of Galois Counter Mode.
In this document, we shall focus on AES GCM, the use of the Advanced Encryption Algorithm (AES) in Galois Counter Mode.
AES GCM is an example of an "algorithm for authenticated encryption with associated data" (AEAD algorithm) as described in [RFC5116].
An invocation of AES GCM to perform an authenticated encryption has the following inputs and outputs: GCM Authenticated Encryption Inputs:
Plain Text, to be both //
in [RFC5116], the IV is called the nonce.
For a given block cipher key BK, it is critical that no IV be used more than once.
Section 7.1 addresses how this goal is to be achieved in secure shell.
An invocation of AES GCM to perform an authenticated decryption has the following inputs and outputs:
Cipher text, to be both //
Returned if the authentication tag //
Plain Text, returned if and only if //
the authentication tag is valid AES GCM is prohibited from returning any portion of the plaintext until the authentication tag has been validated.
Though this feature greatly simplifies the security analysis of any system using AES GCM, this creates an incompatibility with the requirements of secure shell, as we shall see in Section 7.3.
The goal of secure shell is to establish two secure tunnels between a client and a server, one tunnel carrying client to server communications and the other carrying server to client communications.
Each tunnel is encrypted, and a message authentication code is used to ensure data integrity.
These tunnels are initialized using the secure shell key exchange protocol as described in Section 7 of [RFC4253].
This protocol negotiates a mutually acceptable set of cryptographic algorithms and produces a secret value K and an exchange hash H that are shared by the client and server.
The initial value of H is saved for use as the session id.
If AES GCM is selected as the encryption algorithm for a given tunnel, AES GCM MUST also be selected as the Message Authentication Code (MAC) algorithm.
Conversely, if AES GCM is selected as the MAC algorithm, it MUST also be selected as the encryption algorithm.
As described in Section 7.2 of [RFC4253], a hash based key derivation function (KDF) is applied to the shared secret value K to generate the required symmetric keys.
Each tunnel gets a distinct set of symmetric keys.
The keys are generated as shown in Figure 1.
The sizes of these keys varies depending upon which cryptographic algorithms are being used.
Initial IV Client to Server
Encryption Key Client to Server
( K    H   "C"   session id)
Integrity Key Client to Server
( K    H   "F"   session
Key Derivation in Secure Shell
As we shall see below, SSH AES GCM requires a 12 octet Initial IV and an encryption key of either 16 or 32 octets.
Because an AEAD algorithm such as AES GCM uses the encryption key to provide both confidentiality and data integrity, the integrity key is not used with AES GCM.
Either the server or client may at any time request that the secure shell session be rekeyed.
The shared secret value K, the exchange hash H, and all the above symmetric keys will be updated.
Only the session id will remain unchanged.
Upon completion of the key exchange protocol, all further secure shell traffic is parsed into a data structure known as a secure shell binary packet as shown below in Figure 2 (see also Section 6 of [RFC4253]).
n1   packet length padding length 1 byte[n2]  random padding; //
// m    mac length Figure 2: Structure of a Secure Shell Binary Packet
The authentication tag produced by AES GCM authenticated encryption will be placed in the MAC field at the end of the secure shell binary packet.
AES GCM Algorithms for Secure Shell 6.1.
128 GCM AEAD AES 128 GCM is specified in Section 5.1 of [RFC5116].
Due to the format of secure shell binary packets, the buffer sizes needed to implement AEAD AES
128 GCM are smaller than those required in [RFC5116].
Using the notation defined in [RFC5116], the input and output lengths for AEAD AES 128 GCM in secure shell are as follows:
AEAD AES 256 GCM AEAD AES
256 GCM is specified in Section 5.2 of [RFC5116].
Due to the format of secure shell binary packets, the buffer sizes needed to implement AEAD AES 256 GCM are smaller than those required in [RFC5116].
Using the notation defined in [RFC5116], the input and output lengths for AEAD AES 256 GCM in secure shell are as follows:
Size of the Authentication Tag
Both AEAD AES 128 GCM and AEAD AES 256 GCM produce a 16 octet Authentication Tag ([RFC5116]
calls this a "Message Authentication Code").
Some applications allow use of a truncated version of this tag.
This is not allowed in AES GCM secure shell.
All implementations of AES GCM secure shell MUST use the full 16 octet Authentication Tag.
Processing Binary Packets in AES GCM Secure Shell 7.1.
IV and Counter Management With AES GCM, the 12 octet IV is broken into two fields: a 4 octet fixed field and an 8 octet invocation counter field.
The invocation field is treated as a 64 bit integer and is incremented after each invocation of AES GCM to process a binary packet.
Structure of an SSH AES GCM Nonce AES GCM produces a keystream in blocks of 16 octets that is used to encrypt the plaintext.
This keystream is produced by encrypting the following 16 octet data structure:
Structure of an AES Input for SSH AES GCM
The block counter is initially set to one (1) and incremented as each block of key is produced.
The reader is reminded that SSH requires that the data to be encrypted MUST be padded out to a multiple of the block size (16 octets for AES GCM).
Formation of the Binary Packet
In AES GCM secure shell, the inputs to the authenticated encryption are:
n1   packet length padding length 1 byte[n2]  random padding; //
<  packet length < 2^32 IV (Initialization Vector)
As described in section 7.1.
The appropriate Encryption Key formed during the Key Exchange.
As required in [RFC4253], the random padding MUST be at least 4 octets in length
but no more than 255 octets.
The total length of the PT MUST be a multiple of 16 octets (the block size of AES).
The binary packet is the concatenation of the 4 octet packet length, the cipher text (CT), and the 16 octet authentication tag (AT).
Treatment of the Packet Length Field Section 6.3 of [RFC4253] requires that the packet length, padding length, payload, and padding fields of each binary packet be encrypted.
This presents a problem for SSH AES GCM because: 1)
The tag cannot be verified until we parse the binary packet.
The packet cannot be parsed until the packet length has been decrypted.
The packet length cannot be decrypted until the tag has been verified.
When using AES GCM with secure shell, the packet length field is to be treated as additional authenticated data, not as plaintext.
This violates the requirements of [RFC4253].
The repercussions of this decision are discussed in the following Security Considerations section.
The security considerations in [RFC4251] apply.
Use of the Packet Sequence Number in the AT [RFC4253] requires that the formation of the AT involve the packet sequence number, a 32 bit value that counts the number of binary packets that have been sent on a given SSH tunnel.
Since the sequence number is, up to an additive constant, just the low 32 bits of the invocation counter, the presence of the invocation counter field in the IV ensures that the sequence number is indeed involved in the formation of the integrity tag, though this involvement differs slightly from the requirements in Section 6.4 of [RFC4253].
Non Encryption of Packet Length
As discussed in Section 7.3, there is an incompatibility between GCM's requirement that no plaintext be returned until the authentication tag has been verified, secure shell's requirement that the packet length be encrypted, and the necessity of decrypting the packet length field to locate the authentication tag.
This document addresses this dilemma by requiring that, in AES GCM, the packet length field will not be encrypted but will instead be processed as additional authenticated data.
In theory, one could argue that encryption of the entire binary packet means that the secure shell dataflow becomes a featureless octet stream.
But in practice, the secure shell dataflow will come in bursts, with the length of each burst strongly correlated to the length of the underlying binary packets.
Encryption of the packet length does little in and of itself to disguise the length of the underlying binary packets.
Secure shell provides two other mechanisms, random padding and SSH MSG IGNORE messages, that are far more effective than encrypting the packet length in masking any structure in the underlying plaintext stream that might be revealed by the length of the binary packets.
IANA Considerations IANA added the following two entries to the secure shell Encryption Algorithm Names registry described in [RFC4250]:
