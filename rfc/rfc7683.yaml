- title: __initial_text__
  contents:
  - '                Diameter Overload Indication Conveyance

    '
- title: Abstract
  contents:
  - "Abstract\n   This specification defines a base solution for Diameter overload\n\
    \   control, referred to as Diameter Overload Indication Conveyance\n   (DOIC).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7683.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Terminology and Abbreviations . . . . . . . . . . . .\
    \ . . . .   3\n   3.  Conventions Used in This Document . . . . . . . . . . .\
    \ . . .   5\n   4.  Solution Overview . . . . . . . . . . . . . . . . . . . .\
    \ . .   5\n     4.1.  Piggybacking  . . . . . . . . . . . . . . . . . . . . .\
    \ .   6\n     4.2.  DOIC Capability Announcement  . . . . . . . . . . . . . .\
    \   7\n     4.3.  DOIC Overload Condition Reporting . . . . . . . . . . . .  \
    \ 9\n     4.4.  DOIC Extensibility  . . . . . . . . . . . . . . . . . . .  11\n\
    \     4.5.  Simplified Example Architecture . . . . . . . . . . . . .  12\n  \
    \ 5.  Solution Procedures . . . . . . . . . . . . . . . . . . . . .  12\n    \
    \ 5.1.  Capability Announcement . . . . . . . . . . . . . . . . .  12\n      \
    \ 5.1.1.  Reacting Node Behavior  . . . . . . . . . . . . . . .  13\n       5.1.2.\
    \  Reporting Node Behavior . . . . . . . . . . . . . . .  13\n       5.1.3.  Agent\
    \ Behavior  . . . . . . . . . . . . . . . . . . .  14\n     5.2.  Overload Report\
    \ Processing  . . . . . . . . . . . . . . .  15\n       5.2.1.  Overload Control\
    \ State  . . . . . . . . . . . . . . .  15\n       5.2.2.  Reacting Node Behavior\
    \  . . . . . . . . . . . . . . .  19\n       5.2.3.  Reporting Node Behavior .\
    \ . . . . . . . . . . . . . .  20\n     5.3.  Protocol Extensibility  . . . .\
    \ . . . . . . . . . . . . .  22\n   6.  Loss Algorithm  . . . . . . . . . . .\
    \ . . . . . . . . . . . .  23\n     6.1.  Overview  . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  23\n     6.2.  Reporting Node Behavior . . . . . . .\
    \ . . . . . . . . . .  24\n     6.3.  Reacting Node Behavior  . . . . . . . .\
    \ . . . . . . . . .  24\n   7.  Attribute Value Pairs . . . . . . . . . . . .\
    \ . . . . . . . .  25\n     7.1.  OC-Supported-Features AVP . . . . . . . . .\
    \ . . . . . . .  25\n     7.2.  OC-Feature-Vector AVP . . . . . . . . . . . .\
    \ . . . . . .  25\n     7.3.  OC-OLR AVP  . . . . . . . . . . . . . . . . . .\
    \ . . . . .  26\n     7.4.  OC-Sequence-Number AVP  . . . . . . . . . . . . .\
    \ . . . .  26\n     7.5.  OC-Validity-Duration AVP  . . . . . . . . . . . . .\
    \ . . .  26\n     7.6.  OC-Report-Type AVP  . . . . . . . . . . . . . . . . .\
    \ . .  27\n     7.7.  OC-Reduction-Percentage AVP . . . . . . . . . . . . . .\
    \ .  27\n     7.8.  AVP Flag Rules  . . . . . . . . . . . . . . . . . . . . .\
    \  28\n   8.  Error Response Codes  . . . . . . . . . . . . . . . . . . . .  28\n\
    \   9.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .  29\n  \
    \   9.1.  AVP Codes . . . . . . . . . . . . . . . . . . . . . . . .  29\n    \
    \ 9.2.  New Registries  . . . . . . . . . . . . . . . . . . . . .  29\n   10.\
    \ Security Considerations . . . . . . . . . . . . . . . . . . .  30\n     10.1.\
    \  Potential Threat Modes . . . . . . . . . . . . . . . . .  30\n     10.2.  Denial-of-Service\
    \ Attacks  . . . . . . . . . . . . . . .  31\n     10.3.  Noncompliant Nodes .\
    \ . . . . . . . . . . . . . . . . . .  32\n     10.4.  End-to-End Security Issues\
    \ . . . . . . . . . . . . . . .  32\n   11. References  . . . . . . . . . . .\
    \ . . . . . . . . . . . . . .  34\n     11.1.  Normative References . . . . .\
    \ . . . . . . . . . . . . .  34\n     11.2.  Informative References . . . . .\
    \ . . . . . . . . . . . .  34\n   Appendix A.  Issues Left for Future Specifications\
    \  . . . . . . .  35\n     A.1.  Additional Traffic Abatement Algorithms . . .\
    \ . . . . . .  35\n     A.2.  Agent Overload  . . . . . . . . . . . . . . . .\
    \ . . . . .  35\n     A.3.  New Error Diagnostic AVP  . . . . . . . . . . . .\
    \ . . . .  35\n   Appendix B.  Deployment Considerations  . . . . . . . . . .\
    \ . . .  35\n   Appendix C.  Considerations for Applications Integrating the DOIC\n\
    \                Solution . . . . . . . . . . . . . . . . . . . . . .  36\n  \
    \   C.1.  Application Classification  . . . . . . . . . . . . . . .  36\n    \
    \ C.2.  Implications of Application Type Overload . . . . . . . .  37\n     C.3.\
    \  Request Transaction Classification  . . . . . . . . . . .  38\n     C.4.  Request\
    \ Type Overload Implications  . . . . . . . . . . .  39\n   Contributors  . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . .  41\n   Authors' Addresses \
    \ . . . . . . . . . . . . . . . . . . . . . . .  42\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This specification defines a base solution for Diameter\
    \ overload\n   control, referred to as Diameter Overload Indication Conveyance\n\
    \   (DOIC), based on the requirements identified in [RFC7068].\n   This specification\
    \ addresses Diameter overload control between\n   Diameter nodes that support\
    \ the DOIC solution.  The solution, which\n   is designed to apply to existing\
    \ and future Diameter applications,\n   requires no changes to the Diameter base\
    \ protocol [RFC6733] and is\n   deployable in environments where some Diameter\
    \ nodes do not implement\n   the Diameter overload control solution defined in\
    \ this specification.\n   A new application specification can incorporate the\
    \ overload control\n   mechanism specified in this document by making it mandatory\
    \ to\n   implement for the application and referencing this specification\n  \
    \ normatively.  It is the responsibility of the Diameter application\n   designers\
    \ to define how overload control mechanisms work on that\n   application.\n  \
    \ Note that the overload control solution defined in this specification\n   does\
    \ not address all the requirements listed in [RFC7068].  A number\n   of features\
    \ related to overload control are left for future\n   specifications.  See Appendix\
    \ A for a list of extensions that are\n   currently being considered.\n"
- title: 2.  Terminology and Abbreviations
  contents:
  - "2.  Terminology and Abbreviations\n   Abatement\n      Reaction to receipt of\
    \ an overload report resulting in a reduction\n      in traffic sent to the reporting\
    \ node.  Abatement actions include\n      diversion and throttling.\n   Abatement\
    \ Algorithm\n      An extensible method requested by reporting nodes and used\
    \ by\n      reacting nodes to reduce the amount of traffic sent during an\n  \
    \    occurrence of overload control.\n   Diversion\n      An overload abatement\
    \ treatment where the reacting node selects\n      alternate destinations or paths\
    \ for requests.\n   Host-Routed Requests\n      Requests that a reacting node\
    \ knows will be served by a particular\n      host, either due to the presence\
    \ of a Destination-Host Attribute\n      Value Pair (AVP) or by some other local\
    \ knowledge on the part of\n      the reacting node.\n   Overload Control State\
    \ (OCS)\n      Internal state maintained by a reporting or reacting node\n   \
    \   describing occurrences of overload control.\n   Overload Report (OLR)\n  \
    \    Overload control information for a particular overload occurrence\n     \
    \ sent by a reporting node.\n   Reacting Node\n      A Diameter node that acts\
    \ upon an overload report.\n   Realm-Routed Requests\n      Requests sent by a\
    \ reacting node where the reacting node does not\n      know to which host the\
    \ request will be routed.\n   Reporting Node\n      A Diameter node that generates\
    \ an overload report.  (This may or\n      may not be the overloaded node.)\n\
    \   Throttling\n      An abatement treatment that limits the number of requests\
    \ sent by\n      the reacting node.  Throttling can include a Diameter Client\n\
    \      choosing to not send requests, or a Diameter Agent or Server\n      rejecting\
    \ requests with appropriate error responses.  In both\n      cases, the result\
    \ of the throttling is a permanent rejection of\n      the transaction.\n"
- title: 3.  Conventions Used in This Document
  contents:
  - "3.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n   The interpretation from RFC 2119 [RFC2119] does not\
    \ apply for the\n   above listed words when they are not used in all caps.\n"
- title: 4.  Solution Overview
  contents:
  - "4.  Solution Overview\n   The Diameter Overload Information Conveyance (DOIC)\
    \ solution allows\n   Diameter nodes to request that other Diameter nodes perform\
    \ overload\n   abatement actions, that is, actions to reduce the load offered\
    \ to the\n   overloaded node or realm.\n   A Diameter node that supports DOIC\
    \ is known as a \"DOIC node\".  Any\n   Diameter node can act as a DOIC node,\
    \ including Diameter Clients,\n   Diameter Servers, and Diameter Agents.  DOIC\
    \ nodes are further\n   divided into \"Reporting Nodes\" and \"Reacting Nodes.\"\
    \  A reporting\n   node requests overload abatement by sending Overload Reports\
    \ (OLRs).\n   A reacting node acts upon OLRs and performs whatever actions are\n\
    \   needed to fulfill the abatement requests included in the OLRs.  A\n   reporting\
    \ node may report overload on its own behalf or on behalf of\n   other nodes.\
    \  Likewise, a reacting node may perform overload\n   abatement on its own behalf\
    \ or on behalf of other nodes.\n   A Diameter node's role as a DOIC node is independent\
    \ of its Diameter\n   role.  For example, Diameter Agents may act as DOIC nodes,\
    \ even\n   though they are not endpoints in the Diameter sense.  Since Diameter\n\
    \   enables bidirectional applications, where Diameter Servers can send\n   requests\
    \ towards Diameter Clients, a given Diameter node can\n   simultaneously act as\
    \ both a reporting node and a reacting node.\n   Likewise, a Diameter Agent may\
    \ act as a reacting node from the\n   perspective of upstream nodes, and a reporting\
    \ node from the\n   perspective of downstream nodes.\n   DOIC nodes do not generate\
    \ new messages to carry DOIC-related\n   information.  Rather, they \"piggyback\"\
    \ DOIC information over existing\n   Diameter messages by inserting new AVPs into\
    \ existing Diameter\n   requests and responses.  Nodes indicate support for DOIC,\
    \ and any\n   needed DOIC parameters, by inserting an OC-Supported-Features AVP\n\
    \   (Section 7.1) into existing requests and responses.  Reporting nodes\n   send\
    \ OLRs by inserting OC-OLR AVPs (Section 7.3).\n   A given OLR applies to the\
    \ Diameter realm and application of the\n   Diameter message that carries it.\
    \  If a reporting node supports more\n   than one realm and/or application, it\
    \ reports independently for each\n   combination of realm and application.  Similarly,\
    \ the OC-Supported-\n   Features AVP applies to the realm and application of the\
    \ enclosing\n   message.  This implies that a node may support DOIC for one\n\
    \   application and/or realm, but not another, and may indicate different\n  \
    \ DOIC parameters for each application and realm for which it supports\n   DOIC.\n\
    \   Reacting nodes perform overload abatement according to an agreed-upon\n  \
    \ abatement algorithm.  An abatement algorithm defines the meaning of\n   some\
    \ of the parameters of an OLR and the procedures required for\n   overload abatement.\
    \  An overload abatement algorithm separates\n   Diameter requests into two sets.\
    \  The first set contains the requests\n   that are to undergo overload abatement\
    \ treatment of either throttling\n   or diversion.  The second set contains the\
    \ requests that are to be\n   given normal routing treatment.  This document specifies\
    \ a single\n   \"must-support\" algorithm, namely, the \"loss\" algorithm (Section\
    \ 6).\n   Future specifications may introduce new algorithms.\n   Overload conditions\
    \ may vary in scope.  For example, a single\n   Diameter node may be overloaded,\
    \ in which case, reacting nodes may\n   attempt to send requests to other destinations.\
    \  On the other hand,\n   an entire Diameter realm may be overloaded, in which\
    \ case, such\n   attempts would do harm.  DOIC OLRs have a concept of \"report\
    \ type\"\n   (Section 7.6), where the type defines such behaviors.  Report types\n\
    \   are extensible.  This document defines report types for overload of a\n  \
    \ specific host and for overload of an entire realm.\n   DOIC works through non-supporting\
    \ Diameter Agents that properly pass\n   unknown AVPs unchanged.\n"
- title: 4.1.  Piggybacking
  contents:
  - "4.1.  Piggybacking\n   There is no new Diameter application defined to carry\
    \ overload-\n   related AVPs.  The overload control AVPs defined in this\n   specification\
    \ have been designed to be piggybacked on top of existing\n   application messages.\
    \  This is made possible by adding the optional\n   overload control AVPs OC-OLR\
    \ and OC-Supported-Features into existing\n   commands.\n   Reacting nodes indicate\
    \ support for DOIC by including the\n   OC-Supported-Features AVP in all request\
    \ messages originated or\n   relayed by the reacting node.\n   Reporting nodes\
    \ indicate support for DOIC by including the\n   OC-Supported-Features AVP in\
    \ all answer messages that are originated\n   or relayed by the reporting node\
    \ and that are in response to a\n   request that contained the OC-Supported-Features\
    \ AVP.  Reporting\n   nodes may include overload reports using the OC-OLR AVP\
    \ in answer\n   messages.\n   Note that the overload control solution does not\
    \ have fixed server\n   and client roles.  The DOIC node role is determined based\
    \ on the\n   message type: whether the message is a request (i.e., sent by a\n\
    \   \"reacting node\") or an answer (i.e., sent by a \"reporting node\").\n  \
    \ Therefore, in a typical client-server deployment, the Diameter Client\n   may\
    \ report its overload condition to the Diameter Server for any\n   Diameter-Server-initiated\
    \ message exchange.  An example of such is\n   the Diameter Server requesting\
    \ a re-authentication from a Diameter\n   Client.\n"
- title: 4.2.  DOIC Capability Announcement
  contents:
  - "4.2.  DOIC Capability Announcement\n   The DOIC solution supports the ability\
    \ for Diameter nodes to\n   determine if other nodes in the path of a request\
    \ support the\n   solution.  This capability is referred to as DOIC Capability\n\
    \   Announcement (DCA) and is separate from the Diameter Capability\n   Exchange.\n\
    \   The DCA mechanism uses the OC-Supported-Features AVPs to indicate the\n  \
    \ Diameter overload features supported.\n   The first node in the path of a Diameter\
    \ request that supports the\n   DOIC solution inserts the OC-Supported-Features\
    \ AVP in the request\n   message.\n   The individual features supported by the\
    \ DOIC nodes are indicated in\n   the OC-Feature-Vector AVP.  Any semantics associated\
    \ with the\n   features will be defined in extension specifications that introduce\n\
    \   the features.\n      Note: As discussed elsewhere in the document, agents\
    \ in the path\n      of the request can modify the OC-Supported-Features AVP.\n\
    \      Note: The DOIC solution must support deployments where Diameter\n     \
    \ Clients and/or Diameter Servers do not support the DOIC solution.\n      In\
    \ this scenario, Diameter Agents that support the DOIC solution\n      may handle\
    \ overload abatement for the non-supporting Diameter\n      nodes.  In this case,\
    \ the DOIC agent will insert the OC-Supported-\n      Features AVP in requests\
    \ that do not already contain one, telling\n      the reporting node that there\
    \ is a DOIC node that will handle\n      overload abatement.  For transactions\
    \ where there was an\n      OC-Supporting-Features AVP in the request, the agent\
    \ will insert\n      the OC-Supported-Features AVP in answers, telling the reacting\n\
    \      node that there is a reporting node.\n   The OC-Feature-Vector AVP will\
    \ always contain an indication of\n   support for the loss overload abatement\
    \ algorithm defined in this\n   specification (see Section 6).  This ensures that\
    \ a reporting node\n   always supports at least one of the advertised abatement\
    \ algorithms\n   received in a request messages.\n   The reporting node inserts\
    \ the OC-Supported-Features AVP in all\n   answer messages to requests that contained\
    \ the OC-Supported-Features\n   AVP.  The contents of the reporting node's OC-Supported-Features\
    \ AVP\n   indicate the set of Diameter overload features supported by the\n  \
    \ reporting node.  This specification defines one exception -- the\n   reporting\
    \ node only includes an indication of support for one\n   overload abatement algorithm,\
    \ independent of the number of overload\n   abatement algorithms actually supported\
    \ by the reacting node.  The\n   overload abatement algorithm indicated is the\
    \ algorithm that the\n   reporting node intends to use should it enter an overload\
    \ condition.\n   Reacting nodes can use the indicated overload abatement algorithm\
    \ to\n   prepare for possible overload reports and must use the indicated\n  \
    \ overload abatement algorithm if traffic reduction is actually\n   requested.\n\
    \      Note that the loss algorithm defined in this document is a\n      stateless\
    \ abatement algorithm.  As a result, it does not require\n      any actions by\
    \ reacting nodes prior to the receipt of an overload\n      report.  Stateful\
    \ abatement algorithms that base the abatement\n      logic on a history of request\
    \ messages sent might require reacting\n      nodes to maintain state in advance\
    \ of receiving an overload report\n      to ensure that the overload reports can\
    \ be properly handled.\n   While it should only be done in exceptional circumstances\
    \ and not\n   during an active occurrence of overload, a reacting node that wishes\n\
    \   to transition to a different abatement algorithm can stop advertising\n  \
    \ support for the algorithm indicated by the reporting node, as long as\n   support\
    \ for the loss algorithm is always advertised.\n   The DCA mechanism must also\
    \ allow the scenario where the set of\n   features supported by the sender of\
    \ a request and by agents in the\n   path of a request differ.  In this case,\
    \ the agent can update the\n   OC-Supported-Features AVP to reflect the mixture\
    \ of the two sets of\n   supported features.\n      Note: The logic to determine\
    \ if the content of the OC-Supported-\n      Features AVP should be changed is\
    \ out of scope for this document,\n      as is the logic to determine the content\
    \ of a modified\n      OC-Supported-Features AVP.  These are left to implementation\n\
    \      decisions.  Care must be taken not to introduce interoperability\n    \
    \  issues for downstream or upstream DOIC nodes.  As such, the agent\n      must\
    \ act as a fully compliant reporting node to the downstream\n      reacting node\
    \ and as a fully compliant reacting node to the\n      upstream reporting node.\n"
- title: 4.3.  DOIC Overload Condition Reporting
  contents:
  - "4.3.  DOIC Overload Condition Reporting\n   As with DOIC capability announcement,\
    \ overload condition reporting\n   uses new AVPs (Section 7.3) to indicate an\
    \ overload condition.\n   The OC-OLR AVP is referred to as an overload report.\
    \  The OC-OLR AVP\n   includes the type of report, a sequence number, the length\
    \ of time\n   that the report is valid, and AVPs specific to the abatement\n \
    \  algorithm.\n   Two types of overload reports are defined in this document:\
    \ host\n   reports and realm reports.\n   A report of type \"HOST_REPORT\" is\
    \ sent to indicate the overload of a\n   specific host, identified by the Origin-Host\
    \ AVP of the message\n   containing the OLR, for the Application-ID indicated\
    \ in the\n   transaction.  When receiving an OLR of type \"HOST_REPORT\", a reacting\n\
    \   node applies overload abatement treatment to the host-routed requests\n  \
    \ identified by the overload abatement algorithm (as defined in\n   Section 2)\
    \ sent for this application to the overloaded host.\n   A report of type \"REALM_REPORT\"\
    \ is sent to indicate the overload of a\n   realm for the Application-ID indicated\
    \ in the transaction.  The\n   overloaded realm is identified by the Destination-Realm\
    \ AVP of the\n   message containing the OLR.  When receiving an OLR of type\n\
    \   \"REALM_REPORT\", a reacting node applies overload abatement treatment\n \
    \  to realm-routed requests identified by the overload abatement\n   algorithm\
    \ (as defined in Section 2) sent for this application to the\n   overloaded realm.\n\
    \   This document assumes that there is a single source for realm reports\n  \
    \ for a given realm, or that if multiple nodes can send realm reports,\n   that\
    \ each such node has full knowledge of the overload state of the\n   entire realm.\
    \  A reacting node cannot distinguish between receiving\n   realm reports from\
    \ a single node or from multiple nodes.\n      Note: Known issues exist if there\
    \ are multiple sources for\n      overload reports that apply to the same Diameter\
    \ entity.  Reacting\n      nodes have no way of determining the source and, as\
    \ such, will\n      treat them as coming from a single source.  Variance in sequence\n\
    \      numbers between the two sources can then cause incorrect overload\n   \
    \   abatement treatment to be applied for indeterminate periods of\n      time.\n\
    \   Reporting nodes are responsible for determining the need for a\n   reduction\
    \ of traffic.  The method for making this determination is\n   implementation\
    \ specific and depends on the type of overload report\n   being generated.  A\
    \ host report might be generated by tracking use of\n   resources required by\
    \ the host to handle transactions for the\n   Diameter application.  A realm report\
    \ generally impacts the traffic\n   sent to multiple hosts and, as such, requires\
    \ tracking the capacity\n   of all servers able to handle realm-routed requests\
    \ for the\n   application and realm.\n   Once a reporting node determines the\
    \ need for a reduction in traffic,\n   it uses the DOIC-defined AVPs to report\
    \ on the condition.  These AVPs\n   are included in answer messages sent or relayed\
    \ by the reporting\n   node.  The reporting node indicates the overload abatement\
    \ algorithm\n   that is to be used to handle the traffic reduction in the\n  \
    \ OC-Supported-Features AVP.  The OC-OLR AVP is used to communicate\n   information\
    \ about the requested reduction.\n   Reacting nodes, upon receipt of an overload\
    \ report, apply the\n   overload abatement algorithm to traffic impacted by the\
    \ overload\n   report.  The method used to determine the requests that are to\n\
    \   receive overload abatement treatment is dependent on the abatement\n   algorithm.\
    \  The loss abatement algorithm is defined in this document\n   (Section 6). \
    \ Other abatement algorithms can be defined in extensions\n   to the DOIC solution.\n\
    \   Two types of overload abatement treatment are defined, diversion and\n   throttling.\
    \  Reacting nodes are responsible for determining which\n   treatment is appropriate\
    \ for individual requests.\n   As the conditions that lead to the generation of\
    \ the overload report\n   change, the reporting node can send new overload reports\
    \ requesting\n   greater reduction if the condition gets worse or less reduction\
    \ if\n   the condition improves.  The reporting node sends an overload report\n\
    \   with a duration of zero to indicate that the overload condition has\n   ended\
    \ and abatement is no longer needed.\n   The reacting node also determines when\
    \ the overload report expires\n   based on the OC-Validity-Duration AVP in the\
    \ overload report and\n   stops applying the abatement algorithm when the report\
    \ expires.\n   Note that erroneous overload reports can be used for DoS attacks.\n\
    \   This includes the ability to indicate that a significant reduction in\n  \
    \ traffic, up to and including a request for no traffic, should be sent\n   to\
    \ a reporting node.  As such, care should be taken to verify the\n   sender of\
    \ overload reports.\n"
- title: 4.4.  DOIC Extensibility
  contents:
  - "4.4.  DOIC Extensibility\n   The DOIC solution is designed to be extensible.\
    \  This extensibility\n   is based on existing Diameter-based extensibility mechanisms,\
    \ along\n   with the DOIC capability announcement mechanism.\n   There are multiple\
    \ categories of extensions that are expected.  This\n   includes the definition\
    \ of new overload abatement algorithms, the\n   definition of new report types,\
    \ and the definition of new scopes of\n   messages impacted by an overload report.\n\
    \   A DOIC node communicates supported features by including them in the\n   OC-Feature-Vector\
    \ AVP, as a sub-AVP of OC-Supported-Features.  Any\n   non-backwards-compatible\
    \ DOIC extensions define new values for the\n   OC-Feature-Vector AVP.  DOIC extensions\
    \ also have the ability to add\n   new AVPs to the OC-Supported-Features AVP,\
    \ if additional information\n   about the new feature is required.\n   Overload\
    \ reports can also be extended by adding new sub-AVPs to the\n   OC-OLR AVP, allowing\
    \ reporting nodes to communicate additional\n   information about handling an\
    \ overload condition.\n   If necessary, new extensions can also define new AVPs\
    \ that are not\n   part of the OC-Supported-Features and OC-OLR group AVPs.  It\
    \ is,\n   however, recommended that DOIC extensions use the OC-Supported-\n  \
    \ Features AVP and OC-OLR AVP to carry all DOIC-related AVPs.\n"
- title: 4.5.  Simplified Example Architecture
  contents:
  - "4.5.  Simplified Example Architecture\n   Figure 1 illustrates the simplified\
    \ architecture for Diameter\n   overload information conveyance.\n    Realm X\
    \                                  Same or other Realms\n   <-------------------------------------->\
    \ <---------------------->\n      +--------+                 : (optional) :\n\
    \      |Diameter|                 :            :\n      |Server A|--+     .--.\
    \     : +--------+ :     .--.\n      +--------+  |   _(    `.   : |Diameter| :\
    \   _(    `.   +--------+\n                  +--(        )--:-|  Agent |-:--(\
    \        )--|Diameter|\n      +--------+  | ( `  .  )  ) : +--------+ : ( `  .\
    \  )  ) | Client |\n      |Diameter|--+  `--(___.-'  :            :  `--(___.-'\
    \  +--------+\n      |Server B|                 :            :\n      +--------+\
    \                 :            :\n                          End-to-end Overload\
    \ Indication\n             1)  <----------------------------------------------->\n\
    \                             Diameter Application Y\n                  Overload\
    \ Indication A    Overload Indication A'\n             2)  <---------------------->\
    \ <---------------------->\n                 Diameter Application Y   Diameter\
    \ Application Y\n     Figure 1: Simplified Architecture Choices for Overload Indication\n\
    \                                 Delivery\n   In Figure 1, the Diameter overload\
    \ indication can be conveyed (1)\n   end-to-end between servers and clients or\
    \ (2) between servers and the\n   Diameter Agent inside the realm and then between\
    \ the Diameter Agent\n   and the clients.\n"
- title: 5.  Solution Procedures
  contents:
  - "5.  Solution Procedures\n   This section outlines the normative behavior for\
    \ the DOIC solution.\n"
- title: 5.1.  Capability Announcement
  contents:
  - "5.1.  Capability Announcement\n   This section defines DOIC Capability Announcement\
    \ (DCA) behavior.\n      Note: This specification assumes that changes in DOIC\
    \ node\n      capabilities are relatively rare events that occur as a result of\n\
    \      administrative action.  Reacting nodes ought to minimize changes\n    \
    \  that force the reporting node to change the features being used,\n      especially\
    \ during active overload conditions.  But even if\n      reacting nodes avoid\
    \ such changes, reporting nodes still have to\n      be prepared for them to occur.\
    \  For example, differing\n      capabilities between multiple reacting nodes\
    \ may still force a\n      reporting node to select different features on a per-transaction\n\
    \      basis.\n"
- title: 5.1.1.  Reacting Node Behavior
  contents:
  - "5.1.1.  Reacting Node Behavior\n   A reacting node MUST include the OC-Supported-Features\
    \ AVP in all\n   requests.  It MAY include the OC-Feature-Vector AVP, as a sub-AVP\
    \ of\n   OC-Supported-Features.  If it does so, it MUST indicate support for\n\
    \   the \"loss\" algorithm.  If the reacting node is configured to support\n \
    \  features (including other algorithms) in addition to the loss\n   algorithm,\
    \ it MUST indicate such support in an OC-Feature-Vector AVP.\n   An OC-Supported-Features\
    \ AVP in answer messages indicates there is a\n   reporting node for the transaction.\
    \  The reacting node MAY take\n   action, for example, creating state for some\
    \ stateful abatement\n   algorithm, based on the features indicated in the OC-Feature-Vector\n\
    \   AVP.\n      Note: The loss abatement algorithm does not require stateful\n\
    \      behavior when there is no active overload report.\n   Reacting nodes need\
    \ to be prepared for the reporting node to change\n   selected algorithms.  This\
    \ can happen at any time, including when the\n   reporting node has sent an active\
    \ overload report.  The reacting node\n   can minimize the potential for changes\
    \ by modifying the advertised\n   abatement algorithms sent to an overloaded reporting\
    \ node to the\n   currently selected algorithm and loss (or just loss if it is\
    \ the\n   currently selected algorithm).  This has the effect of limiting the\n\
    \   potential change in abatement algorithm from the currently selected\n   algorithm\
    \ to loss, avoiding changes to more complex abatement\n   algorithms that require\
    \ state to operate properly.\n"
- title: 5.1.2.  Reporting Node Behavior
  contents:
  - "5.1.2.  Reporting Node Behavior\n   Upon receipt of a request message, a reporting\
    \ node determines if\n   there is a reacting node for the transaction based on\
    \ the presence of\n   the OC-Supported-Features AVP in the request message.\n\
    \   If the request message contains an OC-Supported-Features AVP, then a\n   reporting\
    \ node MUST include the OC-Supported-Features AVP in the\n   answer message for\
    \ that transaction.\n      Note: Capability announcement is done on a per-transaction\
    \ basis.\n      The reporting node cannot assume that the capabilities announced\n\
    \      by a reacting node will be the same between transactions.\n   A reporting\
    \ node MUST NOT include the OC-Supported-Features AVP,\n   OC-OLR AVP, or any\
    \ other overload control AVPs defined in extension\n   documents in response messages\
    \ for transactions where the request\n   message does not include the OC-Supported-Features\
    \ AVP.  Lack of the\n   OC-Supported-Features AVP in the request message indicates\
    \ that there\n   is no reacting node for the transaction.\n   A reporting node\
    \ knows what overload control functionality is\n   supported by the reacting node\
    \ based on the content or absence of the\n   OC-Feature-Vector AVP within the\
    \ OC-Supported-Features AVP in the\n   request message.\n   A reporting node MUST\
    \ select a single abatement algorithm in the\n   OC-Feature-Vector AVP.  The abatement\
    \ algorithm selected MUST\n   indicate the abatement algorithm the reporting node\
    \ wants the\n   reacting node to use when the reporting node enters an overload\n\
    \   condition.\n   The abatement algorithm selected MUST be from the set of abatement\n\
    \   algorithms contained in the request message's OC-Feature-Vector AVP.\n   A\
    \ reporting node that selects the loss algorithm may do so by\n   including the\
    \ OC-Feature-Vector AVP with an explicit indication of\n   the loss algorithm,\
    \ or it MAY omit the OC-Feature-Vector AVP.  If it\n   selects a different algorithm,\
    \ it MUST include the OC-Feature-Vector\n   AVP with an explicit indication of\
    \ the selected algorithm.\n   The reporting node SHOULD indicate support for other\
    \ DOIC features\n   defined in extension documents that it supports and that apply\
    \ to the\n   transaction.  It does so using the OC-Feature-Vector AVP.\n     \
    \ Note: Not all DOIC features will apply to all Diameter\n      applications or\
    \ deployment scenarios.  The features included in\n      the OC-Feature-Vector\
    \ AVP are based on local policy of the\n      reporting node.\n"
- title: 5.1.3.  Agent Behavior
  contents:
  - "5.1.3.  Agent Behavior\n   Diameter Agents that support DOIC can ensure that\
    \ all messages\n   relayed by the agent contain the OC-Supported-Features AVP.\n\
    \   A Diameter Agent MAY take on reacting node behavior for Diameter\n   endpoints\
    \ that do not support the DOIC solution.  A Diameter Agent\n   detects that a\
    \ Diameter endpoint does not support DOIC reacting node\n   behavior when there\
    \ is no OC-Supported-Features AVP in a request\n   message.\n   For a Diameter\
    \ Agent to be a reacting node for a non-supporting\n   Diameter endpoint, the\
    \ Diameter Agent MUST include the OC-Supported-\n   Features AVP in request messages\
    \ it relays that do not contain the\n   OC-Supported-Features AVP.\n   A Diameter\
    \ Agent MAY take on reporting node behavior for Diameter\n   endpoints that do\
    \ not support the DOIC solution.  The Diameter Agent\n   MUST have visibility\
    \ to all traffic destined for the non-supporting\n   host in order to become the\
    \ reporting node for the Diameter endpoint.\n   A Diameter Agent detects that\
    \ a Diameter endpoint does not support\n   DOIC reporting node behavior when there\
    \ is no OC-Supported-Features\n   AVP in an answer message for a transaction that\
    \ contained the\n   OC-Supported-Features AVP in the request message.\n   If a\
    \ request already has the OC-Supported-Features AVP, a Diameter\n   Agent MAY\
    \ modify it to reflect the features appropriate for the\n   transaction.  Otherwise,\
    \ the agent relays the OC-Supported-Features\n   AVP without change.\n      Example:\
    \ If the agent supports a superset of the features reported\n      by the reacting\
    \ node, then the agent might choose, based on local\n      policy, to advertise\
    \ that superset of features to the reporting\n      node.\n   If the Diameter\
    \ Agent changes the OC-Supported-Features AVP in a\n   request message, then it\
    \ is likely it will also need to modify the\n   OC-Supported-Features AVP in the\
    \ answer message for the transaction.\n   A Diameter Agent MAY modify the OC-Supported-Features\
    \ AVP carried in\n   answer messages.\n   When making changes to the OC-Supported-Features\
    \ or OC-OLR AVPs, the\n   Diameter Agent needs to ensure consistency in its behavior\
    \ with both\n   upstream and downstream DOIC nodes.\n"
- title: 5.2.  Overload Report Processing
  contents:
  - '5.2.  Overload Report Processing

    '
- title: 5.2.1.  Overload Control State
  contents:
  - "5.2.1.  Overload Control State\n   Both reacting and reporting nodes maintain\
    \ Overload Control State\n   (OCS) for active overload conditions.  The following\
    \ sections define\n   behavior associated with that OCS.\n   The contents of the\
    \ OCS in the reporting node and in the reacting\n   node represent logical constructs.\
    \  The actual internal physical\n   structure of the state included in the OCS\
    \ is an implementation\n   decision.\n"
- title: 5.2.1.1.  Overload Control State for Reacting Nodes
  contents:
  - "5.2.1.1.  Overload Control State for Reacting Nodes\n   A reacting node maintains\
    \ the following OCS per supported Diameter\n   application:\n   o  a host-type\
    \ OCS entry for each Destination-Host to which it sends\n      host-type requests\
    \ and\n   o  a realm-type OCS entry for each Destination-Realm to which it\n \
    \     sends realm-type requests.\n   A host-type OCS entry is identified by the\
    \ pair of Application-ID and\n   the node's DiameterIdentity.\n   A realm-type\
    \ OCS entry is identified by the pair of Application-ID\n   and realm.\n   The\
    \ host-type and realm-type OCS entries include the following\n   information (the\
    \ actual information stored is an implementation\n   decision):\n   o  Sequence\
    \ number (as received in OC-OLR; see Section 7.3)\n   o  Time of expiry (derived\
    \ from OC-Validity-Duration AVP received in\n      the OC-OLR AVP and time of\
    \ reception of the message carrying\n      OC-OLR AVP)\n   o  Selected abatement\
    \ algorithm (as received in the OC-Supported-\n      Features AVP)\n   o  Input\
    \ data that is abatement algorithm specific (as received in\n      the OC-OLR\
    \ AVP -- for example, OC-Reduction-Percentage for the\n      loss abatement algorithm)\n"
- title: 5.2.1.2.  Overload Control State for Reporting Nodes
  contents:
  - "5.2.1.2.  Overload Control State for Reporting Nodes\n   A reporting node maintains\
    \ OCS entries per supported Diameter\n   application, per supported (and eventually\
    \ selected) abatement\n   algorithm, and per report type.\n   An OCS entry is\
    \ identified by the tuple of Application-ID, report\n   type, and abatement algorithm,\
    \ and it includes the following\n   information (the actual information stored\
    \ is an implementation\n   decision):\n   o  Sequence number\n   o  Validity duration\n\
    \   o  Expiration time\n   o  Input data that is algorithm specific (for example,\
    \ the reduction\n      percentage for the loss abatement algorithm)\n"
- title: 5.2.1.3.  Reacting Node's Maintenance of Overload Control State
  contents:
  - "5.2.1.3.  Reacting Node's Maintenance of Overload Control State\n   When a reacting\
    \ node receives an OC-OLR AVP, it MUST determine if it\n   is for an existing\
    \ or new overload condition.\n      Note: For the remainder of this section, the\
    \ term \"OLR\" refers to\n      the combination of the contents of the received\
    \ OC-OLR AVP and the\n      abatement algorithm indicated in the received OC-Supported-\n\
    \      Features AVP.\n   When receiving an answer message with multiple OLRs of\
    \ different\n   supported report types, a reacting node MUST process each received\n\
    \   OLR.\n   The OLR is for an existing overload condition if a reacting node\
    \ has\n   an OCS that matches the received OLR.\n   For a host report, this means\
    \ it matches the Application-ID and the\n   host's DiameterIdentity in an existing\
    \ host OCS entry.\n   For a realm report, this means it matches the Application-ID\
    \ and the\n   realm in an existing realm OCS entry.\n   If the OLR is for an existing\
    \ overload condition, then a reacting\n   node MUST determine if the OLR is a\
    \ retransmission or an update to\n   the existing OLR.\n   If the sequence number\
    \ for the received OLR is greater than the\n   sequence number stored in the matching\
    \ OCS entry, then a reacting\n   node MUST update the matching OCS entry.\n  \
    \ If the sequence number for the received OLR is less than or equal to\n   the\
    \ sequence number in the matching OCS entry, then a reacting node\n   MUST silently\
    \ ignore the received OLR.  The matching OCS MUST NOT be\n   updated in this case.\n\
    \   If the reacting node determines that the sequence number has rolled\n   over,\
    \ then the reacting node MUST update the matching OCS entry.\n   This can be determined\
    \ by recognizing that the number has changed\n   from a value within 1% of the\
    \ maximum value in the OC-Sequence-Number\n   AVP to a value within 1% of the\
    \ minimum value in the OC-Sequence-\n   Number AVP.\n   If the received OLR is\
    \ for a new overload condition, then a reacting\n   node MUST generate a new OCS\
    \ entry for the overload condition.\n   For a host report, this means a reacting\
    \ node creates an OCS entry\n   with the Application-ID in the received message\
    \ and DiameterIdentity\n   of the Origin-Host in the received message.\n     \
    \ Note: This solution assumes that the Origin-Host AVP in the answer\n      message\
    \ included by the reporting node is not changed along the\n      path to the reacting\
    \ node.\n   For a realm report, this means a reacting node creates an OCS entry\n\
    \   with the Application-ID in the received message and realm of the\n   Origin-Realm\
    \ in the received message.\n   If the received OLR contains a validity duration\
    \ of zero (\"0\"), then\n   a reacting node MUST update the OCS entry as being\
    \ expired.\n      Note: It is not necessarily appropriate to delete the OCS entry,\n\
    \      as the recommended behavior is that the reacting node slowly\n      returns\
    \ to full traffic when ending an overload abatement period.\n   The reacting node\
    \ does not delete an OCS when receiving an answer\n   message that does not contain\
    \ an OC-OLR AVP (i.e., absence of OLR\n   means \"no change\").\n"
- title: 5.2.1.4.  Reporting Node's Maintenance of Overload Control State
  contents:
  - "5.2.1.4.  Reporting Node's Maintenance of Overload Control State\n   A reporting\
    \ node SHOULD create a new OCS entry when entering an\n   overload condition.\n\
    \      Note: If a reporting node knows through absence of the\n      OC-Supported-Features\
    \ AVP in received messages that there are no\n      reacting nodes supporting\
    \ DOIC, then the reporting node can choose\n      to not create OCS entries.\n\
    \   When generating a new OCS entry, the sequence number SHOULD be set to\n  \
    \ zero (\"0\").\n   When generating sequence numbers for new overload conditions,\
    \ the new\n   sequence number MUST be greater than any sequence number in an active\n\
    \   (unexpired) overload report for the same application and report type\n   previously\
    \ sent by the reporting node.  This property MUST hold over\n   a reboot of the\
    \ reporting node.\n      Note: One way of addressing this over a reboot of a reporting\
    \ node\n      is to use a timestamp for the first overload condition that occurs\n\
    \      after the report and to start using sequences beginning with zero\n   \
    \   for subsequent overload conditions.\n   A reporting node MUST update an OCS\
    \ entry when it needs to adjust the\n   validity duration of the overload condition\
    \ at reacting nodes.\n      Example: If a reporting node wishes to instruct reacting\
    \ nodes to\n      continue overload abatement for a longer period of time than\n\
    \      originally communicated.  This also applies if the reporting node\n   \
    \   wishes to shorten the period of time that overload abatement is to\n     \
    \ continue.\n   A reporting node MUST update an OCS entry when it wishes to adjust\n\
    \   any parameters specific to the abatement algorithm, including, for\n   example,\
    \ the reduction percentage used for the loss abatement\n   algorithm.\n      Example:\
    \ If a reporting node wishes to change the reduction\n      percentage either\
    \ higher (if the overload condition has worsened)\n      or lower (if the overload\
    \ condition has improved), then the\n      reporting node would update the appropriate\
    \ OCS entry.\n   A reporting node MUST increment the sequence number associated\
    \ with\n   the OCS entry anytime the contents of the OCS entry are changed.\n\
    \   This will result in a new sequence number being sent to reacting\n   nodes,\
    \ instructing them to process the OC-OLR AVP.\n   A reporting node SHOULD update\
    \ an OCS entry with a validity duration\n   of zero (\"0\") when the overload\
    \ condition ends.\n      Note: If a reporting node knows that the OCS entries\
    \ in the\n      reacting nodes are near expiration, then the reporting node might\n\
    \      decide not to send an OLR with a validity duration of zero.\n   A reporting\
    \ node MUST keep an OCS entry with a validity duration of\n   zero (\"0\") for\
    \ a period of time long enough to ensure that any\n   unexpired reacting node's\
    \ OCS entry created as a result of the\n   overload condition in the reporting\
    \ node is deleted.\n"
- title: 5.2.2.  Reacting Node Behavior
  contents:
  - "5.2.2.  Reacting Node Behavior\n   When a reacting node sends a request, it MUST\
    \ determine if that\n   request matches an active OCS.\n   If the request matches\
    \ an active OCS, then the reacting node MUST use\n   the overload abatement algorithm\
    \ indicated in the OCS to determine if\n   the request is to receive overload\
    \ abatement treatment.\n   For the loss abatement algorithm defined in this specification,\
    \ see\n   Section 6 for the overload abatement algorithm logic applied.\n   If\
    \ the overload abatement algorithm selects the request for overload\n   abatement\
    \ treatment, then the reacting node MUST apply overload\n   abatement treatment\
    \ on the request.  The abatement treatment applied\n   depends on the context\
    \ of the request.\n   If diversion abatement treatment is possible (i.e., a different\
    \ path\n   for the request can be selected where the overloaded node is not part\n\
    \   of the different path), then the reacting node SHOULD apply diversion\n  \
    \ abatement treatment to the request.  The reacting node MUST apply\n   throttling\
    \ abatement treatment to requests identified for abatement\n   treatment when\
    \ diversion treatment is not possible or was not\n   applied.\n      Note: This\
    \ only addresses the case where there are two defined\n      abatement treatments,\
    \ diversion and throttling.  Any extension\n      that defines a new abatement\
    \ treatment must also define its\n      interaction with existing treatments.\n\
    \   If the overload abatement treatment results in throttling of the\n   request\
    \ and if the reacting node is an agent, then the agent MUST\n   send an appropriate\
    \ error as defined in Section 8.\n   Diameter endpoints that throttle requests\
    \ need to do so according to\n   the rules of the client application.  Those rules\
    \ will vary by\n   application and are beyond the scope of this document.\n  \
    \ In the case that the OCS entry indicated no traffic was to be sent to\n   the\
    \ overloaded entity and the validity duration expires, then\n   overload abatement\
    \ associated with the overload report MUST be ended\n   in a controlled fashion.\n"
- title: 5.2.3.  Reporting Node Behavior
  contents:
  - "5.2.3.  Reporting Node Behavior\n   If there is an active OCS entry, then a reporting\
    \ node SHOULD include\n   the OC-OLR AVP in all answers to requests that contain\
    \ the\n   OC-Supported-Features AVP and that match the active OCS entry.\n   \
    \   Note: A request matches 1) if the Application-ID in the request\n      matches\
    \ the Application-ID in any active OCS entry and 2) if the\n      report type\
    \ in the OCS entry matches a report type supported by\n      the reporting node\
    \ as indicated in the OC-Supported-Features AVP.\n   The contents of the OC-OLR\
    \ AVP depend on the selected algorithm.\n   A reporting node MAY choose to not\
    \ resend an overload report to a\n   reacting node if it can guarantee that this\
    \ overload report is\n   already active in the reacting node.\n      Note: In\
    \ some cases (e.g., when there are one or more agents in\n      the path between\
    \ reporting and reacting nodes, or when overload\n      reports are discarded\
    \ by reacting nodes), a reporting node may not\n      be able to guarantee that\
    \ the reacting node has received the\n      report.\n   A reporting node MUST\
    \ NOT send overload reports of a type that has\n   not been advertised as supported\
    \ by the reacting node.\n      Note: A reacting node implicitly advertises support\
    \ for the host\n      and realm report types by including the OC-Supported-Features\
    \ AVP\n      in the request.  Support for other report types will be explicitly\n\
    \      indicated by new feature bits in the OC-Feature-Vector AVP.\n   A reporting\
    \ node SHOULD explicitly indicate the end of an overload\n   occurrence by sending\
    \ a new OLR with OC-Validity-Duration set to a\n   value of zero (\"0\").  The\
    \ reporting node SHOULD ensure that all\n   reacting nodes receive the updated\
    \ overload report.\n   A reporting node MAY rely on the OC-Validity-Duration AVP\
    \ values for\n   the implicit cleanup of overload control state on the reacting\
    \ node.\n      Note: All OLRs sent have an expiration time calculated by adding\n\
    \      the validity duration contained in the OLR to the time the message\n  \
    \    was sent.  Transit time for the OLR can be safely ignored.  The\n      reporting\
    \ node can ensure that all reacting nodes have received\n      the OLR by continuing\
    \ to send it in answer messages until the\n      expiration time for all OLRs\
    \ sent for that overload condition have\n      expired.\n   When a reporting node\
    \ sends an OLR, it effectively delegates any\n   necessary throttling to downstream\
    \ nodes.  If the reporting node also\n   locally throttles the same set of messages,\
    \ the overall number of\n   throttled requests may be higher than intended.  Therefore,\
    \ before\n   applying local message throttling, a reporting node needs to check\
    \ if\n   these messages match existing OCS entries, indicating that these\n  \
    \ messages have survived throttling applied by downstream nodes that\n   have\
    \ received the related OLR.\n   However, even if the set of messages match existing\
    \ OCS entries, the\n   reporting node can still apply other abatement methods\
    \ such as\n   diversion.  The reporting node might also need to throttle requests\n\
    \   for reasons other than overload.  For example, an agent or server\n   might\
    \ have a configured rate limit for each client and might throttle\n   requests\
    \ that exceed that limit, even if such requests had already\n   been candidates\
    \ for throttling by downstream nodes.  The reporting\n   node also has the option\
    \ to send new OLRs requesting greater\n   reductions in traffic, reducing the\
    \ need for local throttling.\n   A reporting node SHOULD decrease requested overload\
    \ abatement\n   treatment in a controlled fashion to avoid oscillations in traffic.\n\
    \      Example: A reporting node might wait some period of time after\n      overload\
    \ ends before terminating the OLR, or it might send a\n      series of OLRs indicating\
    \ progressively less overload severity.\n"
- title: 5.3.  Protocol Extensibility
  contents:
  - "5.3.  Protocol Extensibility\n   The DOIC solution can be extended.  Types of\
    \ potential extensions\n   include new traffic abatement algorithms, new report\
    \ types, or other\n   new functionality.\n   When defining a new extension that\
    \ requires new normative behavior,\n   the specification must define a new feature\
    \ for the OC-Feature-Vector\n   AVP.  This feature bit is used to communicate\
    \ support for the new\n   feature.\n   The extension may define new AVPs for use\
    \ in the DOIC Capability\n   Announcement and for use in DOIC overload reporting.\
    \  These new AVPs\n   SHOULD be defined to be extensions to the OC-Supported-Features\
    \ or\n   OC-OLR AVPs defined in this document.\n   The Grouped AVP extension mechanisms\
    \ defined in [RFC6733] apply.\n   This allows, for example, defining a new feature\
    \ that is mandatory to\n   be understood even when piggybacked on an existing\
    \ application.\n   When defining new report type values, the corresponding specification\n\
    \   must define the semantics of the new report types and how they affect\n  \
    \ the OC-OLR AVP handling.\n   The OC-Supported-Feature and OC-OLR AVPs can be\
    \ expanded with\n   optional sub-AVPs only if a legacy DOIC implementation can\
    \ safely\n   ignore them without breaking backward compatibility for the given\n\
    \   OC-Report-Type AVP value.  Any new sub-AVPs must not require that the\n  \
    \ M-bit be set.\n   Documents that introduce new report types must describe any\n\
    \   limitations on their use across non-supporting agents.\n   As with any Diameter\
    \ specification, RFC 6733 requires all new AVPs to\n   be registered with IANA.\
    \  See Section 9 for the required procedures.\n   New features (feature bits in\
    \ the OC-Feature-Vector AVP) and report\n   types (in the OC-Report-Type AVP)\
    \ MUST be registered with IANA.\n"
- title: 6.  Loss Algorithm
  contents:
  - "6.  Loss Algorithm\n   This section documents the Diameter overload loss abatement\n\
    \   algorithm.\n"
- title: 6.1.  Overview
  contents:
  - "6.1.  Overview\n   The DOIC specification supports the ability for multiple overload\n\
    \   abatement algorithms to be specified.  The abatement algorithm used\n   for\
    \ any instance of overload is determined by the DOIC Capability\n   Announcement\
    \ process documented in Section 5.1.\n   The loss algorithm described in this\
    \ section is the default algorithm\n   that must be supported by all Diameter\
    \ nodes that support DOIC.\n   The loss algorithm is designed to be a straightforward\
    \ and stateless\n   overload abatement algorithm.  It is used by reporting nodes\
    \ to\n   request a percentage reduction in the amount of traffic sent.  The\n\
    \   traffic impacted by the requested reduction depends on the type of\n   overload\
    \ report.\n   Reporting nodes request the stateless reduction of the number of\n\
    \   requests by an indicated percentage.  This percentage reduction is in\n  \
    \ comparison to the number of messages the node otherwise would send,\n   regardless\
    \ of how many requests the node might have sent in the past.\n   From a conceptual\
    \ level, the logic at the reacting node could be\n   outlined as follows.\n  \
    \ 1.  An overload report is received, and the associated OCS is either\n     \
    \  saved or updated (if required) by the reacting node.\n   2.  A new Diameter\
    \ request is generated by the application running on\n       the reacting node.\n\
    \   3.  The reacting node determines that an active overload report\n       applies\
    \ to the request, as indicated by the corresponding OCS\n       entry.\n   4.\
    \  The reacting node determines if overload abatement treatment\n       should\
    \ be applied to the request.  One approach that could be\n       taken for each\
    \ request is to select a uniformly selected random\n       number between 1 and\
    \ 100.  If the random number is less than or\n       equal to the indicated reduction\
    \ percentage, then the request is\n       given abatement treatment; otherwise,\
    \ the request is given normal\n       routing treatment.\n"
- title: 6.2.  Reporting Node Behavior
  contents:
  - "6.2.  Reporting Node Behavior\n   The method a reporting node uses to determine\
    \ the amount of traffic\n   reduction required to address an overload condition\
    \ is an\n   implementation decision.\n   When a reporting node that has selected\
    \ the loss abatement algorithm\n   determines the need to request a reduction\
    \ in traffic, it includes an\n   OC-OLR AVP in answer messages as described in\
    \ Section 5.2.3.\n   When sending the OC-OLR AVP, the reporting node MUST indicate\
    \ a\n   percentage reduction in the OC-Reduction-Percentage AVP.\n   The reporting\
    \ node MAY change the reduction percentage in subsequent\n   overload reports.\
    \  When doing so, the reporting node must conform to\n   overload report handling\
    \ specified in Section 5.2.3.\n"
- title: 6.3.  Reacting Node Behavior
  contents:
  - "6.3.  Reacting Node Behavior\n   The method a reacting node uses to determine\
    \ which request messages\n   are given abatement treatment is an implementation\
    \ decision.\n   When receiving an OC-OLR in an answer message where the algorithm\n\
    \   indicated in the OC-Supported-Features AVP is the loss algorithm, the\n  \
    \ reacting node MUST apply abatement treatment to the requested\n   percentage\
    \ of request messages sent.\n      Note: The loss algorithm is a stateless algorithm.\
    \  As a result,\n      the reacting node does not guarantee that there will be\
    \ an\n      absolute reduction in traffic sent.  Rather, it guarantees that\n\
    \      the requested percentage of new requests will be given abatement\n    \
    \  treatment.\n   If the reacting node comes out of the 100% traffic reduction\n\
    \   (meaning, it has received an OLR indicating that no traffic should be\n  \
    \ sent, as a result of the overload report timing out), the reacting\n   node\
    \ sending the traffic SHOULD be conservative and, for example,\n   first send\
    \ \"probe\" messages to learn the overload condition of the\n   overloaded node\
    \ before converging to any traffic amount/rate decided\n   by the sender.  Similar\
    \ concerns apply in all cases when the overload\n   report times out, unless the\
    \ previous overload report stated 0%\n   reduction.\n      Note: The goal of this\
    \ behavior is to reduce the probability of\n      overload condition thrashing\
    \ where an immediate transition from\n      100% reduction to 0% reduction results\
    \ in the reporting node\n      moving quickly back into an overload condition.\n"
- title: 7.  Attribute Value Pairs
  contents:
  - "7.  Attribute Value Pairs\n   This section describes the encoding and semantics\
    \ of the Diameter\n   Overload Indication Attribute Value Pairs (AVPs) defined\
    \ in this\n   document.\n   Refer to Section 4 of [RFC6733] for more information\
    \ on AVPs and AVP\n   data types.\n"
- title: 7.1.  OC-Supported-Features AVP
  contents:
  - "7.1.  OC-Supported-Features AVP\n   The OC-Supported-Features AVP (AVP Code 621)\
    \ is of type Grouped and\n   serves two purposes.  First, it announces a node's\
    \ support for the\n   DOIC solution in general.  Second, it contains the description\
    \ of the\n   supported DOIC features of the sending node.  The OC-Supported-\n\
    \   Features AVP MUST be included in every Diameter request message a\n   DOIC\
    \ supporting node sends.\n      OC-Supported-Features ::= < AVP Header: 621 >\n\
    \                                [ OC-Feature-Vector ]\n                     \
    \         * [ AVP ]\n"
- title: 7.2.  OC-Feature-Vector AVP
  contents:
  - "7.2.  OC-Feature-Vector AVP\n   The OC-Feature-Vector AVP (AVP Code 622) is of\
    \ type Unsigned64 and\n   contains a 64-bit flags field of announced capabilities\
    \ of a DOIC\n   node.  The value of zero (0) is reserved.\n   The OC-Feature-Vector\
    \ sub-AVP is used to announce the DOIC features\n   supported by the DOIC node,\
    \ in the form of a flag-bits field in which\n   each bit announces one feature\
    \ or capability supported by the node.\n   The absence of the OC-Feature-Vector\
    \ AVP in request messages\n   indicates that only the default traffic abatement\
    \ algorithm described\n   in this specification is supported.  The absence of\
    \ the OC-Feature-\n   Vector AVP in answer messages indicates that the default\
    \ traffic\n   abatement algorithm described in this specification is selected\n\
    \   (while other traffic abatement algorithms may be supported), and no\n   features\
    \ other than abatement algorithms are supported.\n   The following capability\
    \ is defined in this document:\n   OLR_DEFAULT_ALGO (0x0000000000000001)\n   \
    \   When this flag is set by the a DOIC reacting node, it means that\n      the\
    \ default traffic abatement (loss) algorithm is supported.  When\n      this flag\
    \ is set by a DOIC reporting node, it means that the loss\n      algorithm will\
    \ be used for requested overload abatement.\n"
- title: 7.3.  OC-OLR AVP
  contents:
  - "7.3.  OC-OLR AVP\n   The OC-OLR AVP (AVP Code 623) is of type Grouped and contains\
    \ the\n   information necessary to convey an overload report on an overload\n\
    \   condition at the reporting node.  The application the OC-OLR AVP\n   applies\
    \ to is identified by the Application-ID found in the Diameter\n   message header.\
    \  The host or realm the OC-OLR AVP concerns is\n   determined from the Origin-Host\
    \ AVP and/or Origin-Realm AVP found in\n   the encapsulating Diameter command.\
    \  The OC-OLR AVP is intended to be\n   sent only by a reporting node.\n     \
    \ OC-OLR ::= < AVP Header: 623 >\n                 < OC-Sequence-Number >\n  \
    \               < OC-Report-Type >\n                 [ OC-Reduction-Percentage\
    \ ]\n                 [ OC-Validity-Duration ]\n               * [ AVP ]\n"
- title: 7.4.  OC-Sequence-Number AVP
  contents:
  - "7.4.  OC-Sequence-Number AVP\n   The OC-Sequence-Number AVP (AVP Code 624) is\
    \ of type Unsigned64.  Its\n   usage in the context of overload control is described\
    \ in Section 5.2.\n   From the functionality point of view, the OC-Sequence-Number\
    \ AVP is\n   used as a nonvolatile increasing counter for a sequence of overload\n\
    \   reports between two DOIC nodes for the same overload occurrence.\n   Sequence\
    \ numbers are treated in a unidirectional manner, i.e., two\n   sequence numbers\
    \ in each direction between two DOIC nodes are not\n   related or correlated.\n"
- title: 7.5.  OC-Validity-Duration AVP
  contents:
  - "7.5.  OC-Validity-Duration AVP\n   The OC-Validity-Duration AVP (AVP Code 625)\
    \ is of type Unsigned32 and\n   indicates in seconds the validity time of the\
    \ overload report.  The\n   number of seconds is measured after reception of the\
    \ first OC-OLR AVP\n   with a given value of OC-Sequence-Number AVP.  The default\
    \ value for\n   the OC-Validity-Duration AVP is 30 seconds.  When the OC-Validity-\n\
    \   Duration AVP is not present in the OC-OLR AVP, the default value\n   applies.\
    \  The maximum value for the OC-Validity-Duration AVP is\n   86,400 seconds (24\
    \ hours).  If the value received in the OC-Validity-\n   Duration is greater than\
    \ the maximum value, then the default value\n   applies.\n"
- title: 7.6.  OC-Report-Type AVP
  contents:
  - "7.6.  OC-Report-Type AVP\n   The OC-Report-Type AVP (AVP Code 626) is of type\
    \ Enumerated.  The\n   value of the AVP describes what the overload report concerns.\
    \  The\n   following values are initially defined:\n   HOST_REPORT 0\n      The\
    \ overload report is for a host.  Overload abatement treatment\n      applies\
    \ to host-routed requests.\n   REALM_REPORT 1\n      The overload report is for\
    \ a realm.  Overload abatement treatment\n      applies to realm-routed requests.\n\
    \   The values 2-4294967295 are unassigned.\n"
- title: 7.7.  OC-Reduction-Percentage AVP
  contents:
  - "7.7.  OC-Reduction-Percentage AVP\n   The OC-Reduction-Percentage AVP (AVP Code\
    \ 627) is of type Unsigned32\n   and describes the percentage of the traffic that\
    \ the sender is\n   requested to reduce, compared to what it otherwise would send.\
    \  The\n   OC-Reduction-Percentage AVP applies to the default (loss) algorithm\n\
    \   specified in this specification.  However, the AVP can be reused for\n   future\
    \ abatement algorithms, if its semantics fit into the new\n   algorithm.\n   The\
    \ value of the Reduction-Percentage AVP is between zero (0) and one\n   hundred\
    \ (100).  Values greater than 100 are ignored.  The value of\n   100 means that\
    \ all traffic is to be throttled, i.e., the reporting\n   node is under a severe\
    \ load and ceases to process any new messages.\n   The value of 0 means that the\
    \ reporting node is in a stable state and\n   has no need for the reacting node\
    \ to apply any traffic abatement.\n"
- title: 7.8.  AVP Flag Rules
  contents:
  - "7.8.  AVP Flag Rules\n                                                      \
    \   +---------+\n                                                         |AVP\
    \ flag |\n                                                         |rules    |\n\
    \                                                         +----+----+\n      \
    \                        AVP   Section              |    |MUST|\n       Attribute\
    \ Name         Code  Defined  Value Type  |MUST| NOT|\n      +--------------------------------------------------+----+----+\n\
    \      |OC-Supported-Features  621   7.1      Grouped     |    | V  |\n      +--------------------------------------------------+----+----+\n\
    \      |OC-Feature-Vector      622   7.2      Unsigned64  |    | V  |\n      +--------------------------------------------------+----+----+\n\
    \      |OC-OLR                 623   7.3      Grouped     |    | V  |\n      +--------------------------------------------------+----+----+\n\
    \      |OC-Sequence-Number     624   7.4      Unsigned64  |    | V  |\n      +--------------------------------------------------+----+----+\n\
    \      |OC-Validity-Duration   625   7.5      Unsigned32  |    | V  |\n      +--------------------------------------------------+----+----+\n\
    \      |OC-Report-Type         626   7.6      Enumerated  |    | V  |\n      +--------------------------------------------------+----+----+\n\
    \      |OC-Reduction                                      |    |    |\n      |\
    \  -Percentage          627   7.7      Unsigned32  |    | V  |\n      +--------------------------------------------------+----+----+\n\
    \   As described in the Diameter base protocol [RFC6733], the M-bit usage\n  \
    \ for a given AVP in a given command may be defined by the application.\n"
- title: 8.  Error Response Codes
  contents:
  - "8.  Error Response Codes\n   When a DOIC node rejects a Diameter request due\
    \ to overload, the DOIC\n   node MUST select an appropriate error response code.\
    \  This\n   determination is made based on the probability of the request\n  \
    \ succeeding if retried on a different path.\n      Note: This only applies for\
    \ DOIC nodes that are not the originator\n      of the request.\n   A reporting\
    \ node rejecting a Diameter request due to an overload\n   condition SHOULD send\
    \ a DIAMETER_TOO_BUSY error response, if it can\n   assume that the same request\
    \ may succeed on a different path.\n   If a reporting node knows or assumes that\
    \ the same request will not\n   succeed on a different path, the DIAMETER_UNABLE_TO_COMPLY\
    \ error\n   response SHOULD be used.  Retrying would consume valuable resources\n\
    \   during an occurrence of overload.\n      For instance, if the request arrived\
    \ at the reporting node without\n      a Destination-Host AVP, then the reporting\
    \ node might determine\n      that there is an alternative Diameter node that\
    \ could successfully\n      process the request and that retrying the transaction\
    \ would not\n      negatively impact the reporting node.  DIAMETER_TOO_BUSY would\
    \ be\n      sent in this case.\n      If the request arrived at the reporting\
    \ node with a Destination-\n      Host AVP populated with its own Diameter identity,\
    \ then the\n      reporting node can assume that retrying the request would result\n\
    \      in it coming to the same reporting node.\n      DIAMETER_UNABLE_TO_COMPLY\
    \ would be sent in this case.\n      A second example is when an agent that supports\
    \ the DOIC solution\n      is performing the role of a reacting node for a non-supporting\n\
    \      client.  Requests that are rejected as a result of DOIC throttling\n  \
    \    by the agent in this scenario would generally be rejected with a\n      DIAMETER_UNABLE_TO_COMPLY\
    \ response code.\n"
- title: 9.  IANA Considerations
  contents:
  - '9.  IANA Considerations

    '
- title: 9.1.  AVP Codes
  contents:
  - "9.1.  AVP Codes\n   New AVPs defined by this specification are listed in Section\
    \ 7.  All\n   AVP codes are allocated from the \"AVP Codes\" sub-registry under\
    \ the\n   \"Authentication, Authorization, and Accounting (AAA) Parameters\"\n\
    \   registry.\n"
- title: 9.2.  New Registries
  contents:
  - "9.2.  New Registries\n   Two new registries have been created in the \"AVP Specific\
    \ Values\"\n   sub-registry under the \"Authentication, Authorization, and Accounting\n\
    \   (AAA) Parameters\" registry.\n   A new \"OC-Feature-Vector AVP Values (code\
    \ 622)\" registry has been\n   created.  This registry contains the following:\n\
    \      Feature Vector Value Name\n      Feature Vector Value\n      Specification\
    \ defining the new value\n   See Section 7.2 for the initial Feature Vector Value\
    \ in the registry.\n   This specification defines the value.  New values can be\
    \ added to the\n   registry using the Specification Required policy [RFC5226].\n\
    \   A new \"OC-Report-Type AVP Values (code 626)\" registry has been\n   created.\
    \  This registry contains the following:\n      Report Type Value Name\n     \
    \ Report Type Value\n      Specification defining the new value\n   See Section\
    \ 7.6 for the initial assignment in the registry.  New\n   types can be added\
    \ using the Specification Required policy [RFC5226].\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   DOIC gives Diameter nodes the ability to request\
    \ that downstream\n   nodes send fewer Diameter requests.  Nodes do this by exchanging\n\
    \   overload reports that directly effect this reduction.  This exchange\n   is\
    \ potentially subject to multiple methods of attack and has the\n   potential\
    \ to be used as a denial-of-service (DoS) attack vector.  For\n   instance, a\
    \ series of injected realm OLRs with a requested reduction\n   percentage of 100%\
    \ could be used to completely eliminate any traffic\n   from being sent to that\
    \ realm.\n   Overload reports may contain information about the topology and\n\
    \   current status of a Diameter network.  This information is\n   potentially\
    \ sensitive.  Network operators may wish to control\n   disclosure of overload\
    \ reports to unauthorized parties to avoid their\n   use for competitive intelligence\
    \ or to target attacks.\n   Diameter does not include features to provide end-to-end\n\
    \   authentication, integrity protection, or confidentiality.  This may\n   cause\
    \ complications when sending overload reports between non-\n   adjacent nodes.\n"
- title: 10.1.  Potential Threat Modes
  contents:
  - "10.1.  Potential Threat Modes\n   The Diameter protocol involves transactions\
    \ in the form of requests\n   and answers exchanged between clients and servers.\
    \  These clients and\n   servers may be peers, that is, they may share a direct\
    \ transport\n   (e.g., TCP or SCTP) connection, or the messages may traverse one\
    \ or\n   more intermediaries, known as Diameter Agents.  Diameter nodes use\n\
    \   TLS, DTLS, or IPsec to authenticate peers and to provide\n   confidentiality\
    \ and integrity protection of traffic between peers.\n   Nodes can make authorization\
    \ decisions based on the peer identities\n   authenticated at the transport layer.\n\
    \   When agents are involved, this presents an effectively transitive\n   trust\
    \ model.  That is, a Diameter client or server can authorize an\n   agent for\
    \ certain actions, but it must trust that agent to make\n   appropriate authorization\
    \ decisions about its peers, and so on.\n   Since confidentiality and integrity\
    \ protection occur at the transport\n   layer, agents can read, and perhaps modify,\
    \ any part of a Diameter\n   message, including an overload report.\n   There\
    \ are several ways an attacker might attempt to exploit the\n   overload control\
    \ mechanism.  An unauthorized third party might inject\n   an overload report\
    \ into the network.  If this third party is upstream\n   of an agent, and that\
    \ agent fails to apply proper authorization\n   policies, downstream nodes may\
    \ mistakenly trust the report.  This\n   attack is at least partially mitigated\
    \ by the assumption that nodes\n   include overload reports in Diameter answers\
    \ but not in requests.\n   This requires an attacker to have knowledge of the\
    \ original request\n   in order to construct an answer.  Such an answer would\
    \ also need to\n   arrive at a Diameter node via a protected transport connection.\n\
    \   Therefore, implementations MUST validate that an answer containing an\n  \
    \ overload report is a properly constructed response to a pending\n   request\
    \ prior to acting on the overload report, and that the answer\n   was received\
    \ via an appropriate transport connection.\n   A similar attack involves a compromised\
    \ but otherwise authorized node\n   that sends an inappropriate overload report.\
    \  For example, a server\n   for the realm \"example.com\" might send an overload\
    \ report indicating\n   that a competitor's realm \"example.net\" is overloaded.\
    \  If other\n   nodes act on the report, they may falsely believe that \"example.net\"\
    \n   is overloaded, effectively reducing that realm's capacity.\n   Therefore,\
    \ it's critical that nodes validate that an overload report\n   received from\
    \ a peer actually falls within that peer's responsibility\n   before acting on\
    \ the report or forwarding the report to other peers.\n   For example, an overload\
    \ report from a peer that applies to a realm\n   not handled by that peer is suspect.\
    \  This may require out-of-band,\n   non-Diameter agreements and/or mechanisms.\n\
    \      This attack is partially mitigated by the fact that the\n      application,\
    \ as well as host and realm, for a given OLR is\n      determined implicitly by\
    \ respective AVPs in the enclosing answer.\n      If a reporting node modifies\
    \ any of those AVPs, the enclosing\n      transaction will also be affected.\n"
- title: 10.2.  Denial-of-Service Attacks
  contents:
  - "10.2.  Denial-of-Service Attacks\n   Diameter overload reports, especially realm\
    \ reports, can cause a node\n   to cease sending some or all Diameter requests\
    \ for an extended\n   period.  This makes them a tempting vector for DoS attacks.\n\
    \   Furthermore, since Diameter is almost always used in support of other\n  \
    \ protocols, a DoS attack on Diameter is likely to impact those\n   protocols\
    \ as well.  In the worst case, where the Diameter application\n   is being used\
    \ for access control into an IP network, a coordinated\n   DoS attack could result\
    \ in the blockage of all traffic into that\n   network.  Therefore, Diameter nodes\
    \ MUST NOT honor or forward OLRs\n   received from peers that are not trusted\
    \ to send them.\n   An attacker might use the information in an OLR to assist\
    \ in DoS\n   attacks.  For example, an attacker could use information about\n\
    \   current overload conditions to time an attack for maximum effect, or\n   use\
    \ subsequent overload reports as a feedback mechanism to learn the\n   results\
    \ of a previous or ongoing attack.  Operators need the ability\n   to ensure that\
    \ OLRs are not leaked to untrusted parties.\n"
- title: 10.3.  Noncompliant Nodes
  contents:
  - "10.3.  Noncompliant Nodes\n   In the absence of an overload control mechanism,\
    \ Diameter nodes need\n   to implement strategies to protect themselves from floods\
    \ of\n   requests, and to make sure that a disproportionate load from one\n  \
    \ source does not prevent other sources from receiving service.  For\n   example,\
    \ a Diameter server might throttle a certain percentage of\n   requests from sources\
    \ that exceed certain limits.  Overload control\n   can be thought of as an optimization\
    \ for such strategies, where\n   downstream nodes never send the excess requests\
    \ in the first place.\n   However, the presence of an overload control mechanism\
    \ does not\n   remove the need for these other protection strategies.\n   When\
    \ a Diameter node sends an overload report, it cannot assume that\n   all nodes\
    \ will comply, even if they indicate support for DOIC.  A\n   noncompliant node\
    \ might continue to send requests with no reduction\n   in load.  Such noncompliance\
    \ could be done accidentally or\n   maliciously to gain an unfair advantage over\
    \ compliant nodes.\n   Requirement 28 in [RFC7068] indicates that the overload\
    \ control\n   solution cannot assume that all Diameter nodes in a network are\n\
    \   trusted.  It also requires that malicious nodes not be allowed to\n   take\
    \ advantage of the overload control mechanism to get more than\n   their fair\
    \ share of service.\n"
- title: 10.4.  End-to-End Security Issues
  contents:
  - "10.4.  End-to-End Security Issues\n   The lack of end-to-end integrity features\
    \ makes it difficult to\n   establish trust in overload reports received from\
    \ non-adjacent nodes.\n   Any agents in the message path may insert or modify\
    \ overload reports.\n   Nodes must trust that their adjacent peers perform proper\
    \ checks on\n   overload reports from their peers, and so on, creating a transitive-\n\
    \   trust requirement extending for potentially long chains of nodes.\n   Network\
    \ operators must determine if this transitive trust requirement\n   is acceptable\
    \ for their deployments.  Nodes supporting Diameter\n   overload control MUST\
    \ give operators the ability to select which\n   peers are trusted to deliver\
    \ overload reports and whether they are\n   trusted to forward overload reports\
    \ from non-adjacent nodes.  DOIC\n   nodes MUST strip DOIC AVPs from messages\
    \ received from peers that are\n   not trusted for DOIC purposes.\n   The lack\
    \ of end-to-end confidentiality protection means that any\n   Diameter Agent in\
    \ the path of an overload report can view the\n   contents of that report.  In\
    \ addition to the requirement to select\n   which peers are trusted to send overload\
    \ reports, operators MUST be\n   able to select which peers are authorized to\
    \ receive reports.  A node\n   MUST NOT send an overload report to a peer not\
    \ authorized to receive\n   it.  Furthermore, an agent MUST remove any overload\
    \ reports that\n   might have been inserted by other nodes before forwarding a\
    \ Diameter\n   message to a peer that is not authorized to receive overload reports.\n\
    \      A DOIC node cannot always automatically detect that a peer also\n     \
    \ supports DOIC.  For example, a node might have a peer that is a\n      non-supporting\
    \ agent.  If nodes on the other side of that agent\n      send OC-Supported-Features\
    \ AVPs, the agent is likely to forward\n      them as unknown AVPs.  Messages\
    \ received across the non-supporting\n      agent may be indistinguishable from\
    \ messages received across a\n      DOIC supporting agent, giving the false impression\
    \ that the non-\n      supporting agent actually supports DOIC.  This complicates\
    \ the\n      transitive-trust nature of DOIC.  Operators need to be careful to\n\
    \      avoid situations where a non-supporting agent is mistakenly\n      trusted\
    \ to enforce DOIC-related authorization policies.\n   It is expected that work\
    \ on end-to-end Diameter security might make\n   it easier to establish trust\
    \ in non-adjacent nodes for overload\n   control purposes.  Readers should be\
    \ reminded, however, that the\n   overload control mechanism allows Diameter Agents\
    \ to modify AVPs in,\n   or insert additional AVPs into, existing messages that\
    \ are originated\n   by other nodes.  If end-to-end security is enabled, there\
    \ is a risk\n   that such modification could violate integrity protection.  The\n\
    \   details of using any future Diameter end-to-end security mechanism\n   with\
    \ overload control will require careful consideration, and are\n   beyond the\
    \ scope of this document.\n"
- title: 11.  References
  contents:
  - '11.  References

    '
- title: 11.1.  Normative References
  contents:
  - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC5226]  Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n   \
    \           IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n       \
    \       DOI 10.17487/RFC5226, May 2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n\
    \   [RFC6733]  Fajardo, V., Ed., Arkko, J., Loughney, J., and G. Zorn,\n     \
    \         Ed., \"Diameter Base Protocol\", RFC 6733,\n              DOI 10.17487/RFC6733,\
    \ October 2012,\n              <http://www.rfc-editor.org/info/rfc6733>.\n"
- title: 11.2.  Informative References
  contents:
  - "11.2.  Informative References\n   [Cx]       3GPP, \"Cx and Dx interfaces based\
    \ on the Diameter\n              protocol; Protocol details\", 3GPP TS 29.229\
    \ 12.7.0,\n              September 2015.\n   [PCC]      3GPP, \"Policy and charging\
    \ control architecture\", 3GPP\n              TS 23.203 12.10.0, September 2015.\n\
    \   [RFC4006]  Hakala, H., Mattila, L., Koskinen, J-P., Stura, M., and J.\n  \
    \            Loughney, \"Diameter Credit-Control Application\", RFC 4006,\n  \
    \            DOI 10.17487/RFC4006, August 2005,\n              <http://www.rfc-editor.org/info/rfc4006>.\n\
    \   [RFC7068]  McMurry, E. and B. Campbell, \"Diameter Overload Control\n    \
    \          Requirements\", RFC 7068, DOI 10.17487/RFC7068, November\n        \
    \      2013, <http://www.rfc-editor.org/info/rfc7068>.\n   [S13]      3GPP, \"\
    Evolved Packet System (EPS); Mobility Management\n              Entity (MME) and\
    \ Serving GPRS Support Node (SGSN) related\n              interfaces based on\
    \ Diameter protocol\", 3GPP TS 29.272\n              12.8.0, September 2015.\n"
- title: Appendix A.  Issues Left for Future Specifications
  contents:
  - "Appendix A.  Issues Left for Future Specifications\n   The base solution for\
    \ overload control does not cover all possible\n   use cases.  A number of solution\
    \ aspects were intentionally left for\n   future specification and protocol work.\
    \  The following subsections\n   define some of the potential extensions to the\
    \ DOIC solution.\n"
- title: A.1.  Additional Traffic Abatement Algorithms
  contents:
  - "A.1.  Additional Traffic Abatement Algorithms\n   This specification describes\
    \ only means for a simple loss-based\n   algorithm.  Future algorithms can be\
    \ added using the designed\n   solution extension mechanism.  The new algorithms\
    \ need to be\n   registered with IANA.  See Sections 7.2 and 9 for the required\
    \ IANA\n   steps.\n"
- title: A.2.  Agent Overload
  contents:
  - "A.2.  Agent Overload\n   This specification focuses on Diameter endpoint (server\
    \ or client)\n   overload.  A separate extension will be required to outline the\n\
    \   handling of the case of agent overload.\n"
- title: A.3.  New Error Diagnostic AVP
  contents:
  - "A.3.  New Error Diagnostic AVP\n   This specification indicates the use of existing\
    \ error messages when\n   nodes reject requests due to overload.  There is an\
    \ expectation that\n   additional error codes or AVPs will be defined in a separate\n\
    \   specification to indicate that overload was the reason for the\n   rejection\
    \ of the message.\n"
- title: Appendix B.  Deployment Considerations
  contents:
  - "Appendix B.  Deployment Considerations\n   Non-supporting Agents\n      Due to\
    \ the way that realm-routed requests are handled in Diameter\n      networks with\
    \ the server selection for the request done by an\n      agent, network operators\
    \ should enable DOIC at agents that perform\n      server selection first.\n \
    \  Topology-Hiding Interactions\n      There exist proxies that implement what\
    \ is referred to as Topology\n      Hiding.  This can include cases where the\
    \ agent modifies the\n      Origin-Host in answer messages.  The behavior of the\
    \ DOIC solution\n      is not well understood when this happens.  As such, the\
    \ DOIC\n      solution does not address this scenario.\n   Inter-Realm/Administrative\
    \ Domain Considerations\n      There are likely to be special considerations for\
    \ handling DOIC\n      signaling across administrative boundaries.  This includes\n\
    \      considerations for whether or not information included in the DOIC\n  \
    \    signaling should be sent across those boundaries.  In addition,\n      consideration\
    \ should be taken as to whether or not a reacting node\n      in one realm can\
    \ be trusted to implement the requested overload\n      abatement handling for\
    \ overload reports received from a separately\n      administered realm.\n"
- title: Appendix C.  Considerations for Applications Integrating the DOIC
  contents:
  - "Appendix C.  Considerations for Applications Integrating the DOIC\n         \
    \    Solution\n   This section outlines considerations to be taken into account\
    \ when\n   integrating the DOIC solution into Diameter applications.\n"
- title: C.1.  Application Classification
  contents:
  - "C.1.  Application Classification\n   The following is a classification of Diameter\
    \ applications and\n   request types.  This discussion is meant to document factors\
    \ that\n   play into decisions made by the Diameter entity responsible for\n \
    \  handling overload reports.\n   Section 8.1 of [RFC6733] defines two state machines\
    \ that imply two\n   types of applications, session-less and session-based applications.\n\
    \   The primary difference between these types of applications is the\n   lifetime\
    \ of Session-Ids.\n   For session-based applications, the Session-Id is used to\
    \ tie\n   multiple requests into a single session.\n   The Credit-Control application\
    \ defined in [RFC4006] is an example of\n   a Diameter session-based application.\n\
    \   In session-less applications, the lifetime of the Session-Id is a\n   single\
    \ Diameter transaction, i.e., the session is implicitly\n   terminated after a\
    \ single Diameter transaction and a new Session-Id\n   is generated for each Diameter\
    \ request.\n   For the purposes of this discussion, session-less applications\
    \ are\n   further divided into two types of applications:\n   Stateless Applications:\n\
    \      Requests within a stateless application have no relationship to\n     \
    \ each other.  The 3GPP-defined S13 application is an example of a\n      stateless\
    \ application [S13], where only a Diameter command is\n      defined between a\
    \ client and a server and no state is maintained\n      between two consecutive\
    \ transactions.\n   Pseudo-Session Applications:\n      Applications that do not\
    \ rely on the Session-Id AVP for\n      correlation of application messages related\
    \ to the same session\n      but use other session-related information in the\
    \ Diameter requests\n      for this purpose.  The 3GPP-defined Cx application\
    \ [Cx] is an\n      example of a pseudo-session application.\n   The handling\
    \ of overload reports must take the type of application\n   into consideration,\
    \ as discussed in Appendix C.2.\n"
- title: C.2.  Implications of Application Type Overload
  contents:
  - "C.2.  Implications of Application Type Overload\n   This section discusses considerations\
    \ for mitigating overload\n   reported by a Diameter entity.  This discussion\
    \ focuses on the type\n   of application.  Appendix C.3 discusses considerations\
    \ for handling\n   various request types when the target server is known to be\
    \ in an\n   overloaded state.\n   These discussions assume that the strategy for\
    \ mitigating the\n   reported overload is to reduce the overall workload sent\
    \ to the\n   overloaded entity.  The concept of applying overload treatment to\n\
    \   requests targeted for an overloaded Diameter entity is inherent to\n   this\
    \ discussion.  The method used to reduce offered load is not\n   specified here,\
    \ but it could include routing requests to another\n   Diameter entity known to\
    \ be able to handle them, or it could mean\n   rejecting certain requests.  For\
    \ a Diameter Agent, rejecting requests\n   will usually mean generating appropriate\
    \ Diameter error responses.\n   For a Diameter client, rejecting requests will\
    \ depend upon the\n   application.  For example, it could mean giving an indication\
    \ to the\n   entity requesting the Diameter service that the network is busy and\n\
    \   to try again later.\n   Stateless Applications:\n      By definition, there\
    \ is no relationship between individual\n      requests in a stateless application.\
    \  As a result, when a request\n      is sent or relayed to an overloaded Diameter\
    \ entity -- either a\n      Diameter Server or a Diameter Agent -- the sending\
    \ or relaying\n      entity can choose to apply the overload treatment to any\
    \ request\n      targeted for the overloaded entity.\n   Pseudo-session Applications:\n\
    \      For pseudo-session applications, there is an implied ordering of\n    \
    \  requests.  As a result, decisions about which requests towards an\n      overloaded\
    \ entity to reject could take the command code of the\n      request into consideration.\
    \  This generally means that\n      transactions later in the sequence of transactions\
    \ should be given\n      more favorable treatment than messages earlier in the\
    \ sequence.\n      This is because more work has already been done by the Diameter\n\
    \      network for those transactions that occur later in the sequence.\n    \
    \  Rejecting them could result in increasing the load on the network\n      as\
    \ the transactions earlier in the sequence might also need to be\n      repeated.\n\
    \   Session-Based Applications:\n      Overload handling for session-based applications\
    \ must take into\n      consideration the work load associated with setting up\
    \ and\n      maintaining a session.  As such, the entity sending requests\n  \
    \    towards an overloaded Diameter entity for a session-based\n      application\
    \ might tend to reject new session requests prior to\n      rejecting intra-session\
    \ requests.  In addition, session-ending\n      requests might be given a lower\
    \ probability of being rejected, as\n      rejecting session-ending requests could\
    \ result in session status\n      being out of sync between the Diameter clients\
    \ and servers.\n      Application designers that would decide to reject mid-session\n\
    \      requests will need to consider whether the rejection invalidates\n    \
    \  the session and any resulting session cleanup procedures.\n"
- title: C.3.  Request Transaction Classification
  contents:
  - "C.3.  Request Transaction Classification\n   Independent Request:\n      An independent\
    \ request is not correlated to any other requests,\n      and, as such, the lifetime\
    \ of the Session-Id is constrained to an\n      individual transaction.\n   Session-Initiating\
    \ Request:\n      A session-initiating request is the initial message that\n \
    \     establishes a Diameter session.  The ACR message defined in\n      [RFC6733]\
    \ is an example of a session-initiating request.\n   Correlated Session-Initiating\
    \ Request:\n      There are cases when multiple session-initiated requests must\
    \ be\n      correlated and managed by the same Diameter server.  It is notably\n\
    \      the case in the 3GPP Policy and Charging Control (PCC)\n      architecture\
    \ [PCC], where multiple apparently independent Diameter\n      application sessions\
    \ are actually correlated and must be handled\n      by the same Diameter server.\n\
    \   Intra-session Request:\n      An intra-session request is a request that uses\
    \ the same Session-\n      Id as the one used in a previous request.  An intra-session\n\
    \      request generally needs to be delivered to the server that handled\n  \
    \    the session-creating request for the session.  The STR message\n      defined\
    \ in [RFC6733] is an example of an intra-session request.\n   Pseudo-session Requests:\n\
    \      Pseudo-session requests are independent requests and do not use\n     \
    \ the same Session-Id but are correlated by other session-related\n      information\
    \ contained in the request.  There exist Diameter\n      applications that define\
    \ an expected ordering of transactions.\n      This sequencing of independent\
    \ transactions results in a pseudo-\n      session.  The AIR, MAR, and SAR requests\
    \ in the 3GPP-defined Cx\n      [Cx] application are examples of pseudo-session\
    \ requests.\n"
- title: C.4.  Request Type Overload Implications
  contents:
  - "C.4.  Request Type Overload Implications\n   The request classes identified in\
    \ Appendix C.3 have implications on\n   decisions about which requests should\
    \ be throttled first.  The\n   following list of request treatments regarding\
    \ throttling is provided\n   as guidelines for application designers when implementing\
    \ the\n   Diameter overload control mechanism described in this document.  The\n\
    \   exact behavior regarding throttling is a matter of local policy,\n   unless\
    \ specifically defined for the application.\n   Independent Requests:\n      Independent\
    \ requests can generally be given equal treatment when\n      making throttling\
    \ decisions, unless otherwise indicated by\n      application requirements or\
    \ local policy.\n   Session-Initiating Requests:\n      Session-initiating requests\
    \ often represent more work than\n      independent or intra-session requests.\
    \  Moreover, session-\n      initiating requests are typically followed by other\
    \ session-\n      related requests.  Since the main objective of overload control\
    \ is\n      to reduce the total number of requests sent to the overloaded\n  \
    \    entity, throttling decisions might favor allowing intra-session\n      requests\
    \ over session-initiating requests.  In the absence of\n      local policies or\
    \ application-specific requirements to the\n      contrary, individual session-initiating\
    \ requests can be given\n      equal treatment when making throttling decisions.\n\
    \   Correlated Session-Initiating Requests:\n      A request that results in a\
    \ new binding; where the binding is used\n      for routing of subsequent session-initiating\
    \ requests to the same\n      server, it represents more work load than other\
    \ requests.  As\n      such, these requests might be throttled more frequently\
    \ than other\n      request types.\n   Pseudo-session Requests:\n      Throttling\
    \ decisions for pseudo-session requests can take into\n      consideration where\
    \ individual requests fit into the overall\n      sequence of requests within\
    \ the pseudo-session.  Requests that are\n      earlier in the sequence might\
    \ be throttled more aggressively than\n      requests that occur later in the\
    \ sequence.\n   Intra-session Requests:\n      There are two types of intra-sessions\
    \ requests, requests that\n      terminate a session and the remainder of intra-session\
    \ requests.\n      Implementers and operators may choose to throttle session-\n\
    \      terminating requests less aggressively in order to gracefully\n      terminate\
    \ sessions, allow cleanup of the related resources (e.g.,\n      session state),\
    \ and avoid the need for additional intra-session\n      requests.  Favoring session\
    \ termination requests may reduce the\n      session management impact on the\
    \ overloaded entity.  The default\n      handling of other intra-session requests\
    \ might be to treat them\n      equally when making throttling decisions.  There\
    \ might also be\n      application-level considerations whether some request types\
    \ are\n      favored over others.\n"
- title: Contributors
  contents:
  - "Contributors\n   The following people contributed substantial ideas, feedback,\
    \ and\n   discussion to this document:\n   o  Eric McMurry\n   o  Hannes Tschofenig\n\
    \   o  Ulrich Wiehe\n   o  Jean-Jacques Trottin\n   o  Maria Cruz Bartolome\n\
    \   o  Martin Dolly\n   o  Nirav Salot\n   o  Susan Shishufeng\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jouni Korhonen (editor)\n   Broadcom Corporation\n   3151\
    \ Zanker Road\n   San Jose, CA  95134\n   United States\n   Email: jouni.nospam@gmail.com\n\
    \   Steve Donovan (editor)\n   Oracle\n   7460 Warren Parkway\n   Frisco, Texas\
    \  75034\n   United States\n   Email: srdonovan@usdonovans.com\n   Ben Campbell\n\
    \   Oracle\n   7460 Warren Parkway\n   Frisco, Texas  75034\n   United States\n\
    \   Email: ben@nostrum.com\n   Lionel Morand\n   Orange Labs\n   38/40 rue du\
    \ General Leclerc\n   Issy-Les-Moulineaux Cedex 9  92794\n   France\n   Phone:\
    \ +33145296257\n   Email: lionel.morand@orange.com\n"
