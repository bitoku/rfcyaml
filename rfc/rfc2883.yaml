- title: __initial_text__
  contents:
  - '  An Extension to the Selective Acknowledgement (SACK) Option for TCP

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This note defines an extension of the Selective Acknowledgement\n\
    \   (SACK) Option [RFC2018] for TCP.  RFC 2018 specified the use of the\n   SACK\
    \ option for acknowledging out-of-sequence data not covered by\n   TCP's cumulative\
    \ acknowledgement field.  This note extends RFC 2018\n   by specifying the use\
    \ of the SACK option for acknowledging duplicate\n   packets.  This note suggests\
    \ that when duplicate packets are\n   received, the first block of the SACK option\
    \ field can be used to\n   report the sequence numbers of the packet that triggered\
    \ the\n   acknowledgement.  This extension to the SACK option allows the TCP\n\
    \   sender to infer the order of packets received at the receiver,\n   allowing\
    \ the sender to infer when it has unnecessarily retransmitted\n   a packet.  A\
    \ TCP sender could then use this information for more\n   robust operation in\
    \ an environment of reordered packets [BPS99], ACK\n   loss, packet replication,\
    \ and/or early retransmit timeouts.\n"
- title: 1.  Conventions and Acronyms
  contents:
  - "1.  Conventions and Acronyms\n   The keywords MUST, MUST NOT, REQUIRED, SHALL,\
    \ SHALL NOT, SHOULD,\n   SHOULD NOT, RECOMMENDED, MAY, and OPTIONAL, when they\
    \ appear in this\n   document, are to be interpreted as described in [B97].\n"
- title: 2. Introduction
  contents:
  - "2. Introduction\n   The Selective Acknowledgement (SACK) option defined in RFC\
    \ 2018 is\n   used by the TCP data receiver to acknowledge non-contiguous blocks\
    \ of\n   data not covered by the Cumulative Acknowledgement field.  However,\n\
    \   RFC 2018 does not specify the use of the SACK option when duplicate\n   segments\
    \ are received.  This note specifies the use of the SACK\n   option when acknowledging\
    \ the receipt of a duplicate packet [F99].\n   We use the term D-SACK (for duplicate-SACK)\
    \ to refer to a SACK block\n   that reports a duplicate segment.\n   This document\
    \ does not make any changes to TCP's use of the\n   cumulative acknowledgement\
    \ field, or to the TCP receiver's decision\n   of *when* to send an acknowledgement\
    \ packet.  This document only\n   concerns the contents of the SACK option when\
    \ an acknowledgement is\n   sent.\n   This extension is compatible with current\
    \ implementations of the SACK\n   option in TCP.  That is, if one of the TCP end-nodes\
    \ does not\n   implement this D-SACK extension and the other TCP end-node does,\
    \ we\n   believe that this use of the D-SACK extension by one of the end nodes\n\
    \   will not introduce problems.\n   The use of D-SACK does not require separate\
    \ negotiation between a TCP\n   sender and receiver that have already negotiated\
    \ SACK capability.\n   The absence of separate negotiation for D-SACK means that\
    \ the TCP\n   receiver could send D-SACK blocks when the TCP sender does not\n\
    \   understand this extension to SACK.  In this case, the TCP sender will\n  \
    \ simply discard any D-SACK blocks, and process the other SACK blocks\n   in the\
    \ SACK option field as it normally would.\n"
- title: 3. The Sack Option Format as defined in RFC 2018
  contents:
  - "3. The Sack Option Format as defined in RFC 2018\n   The SACK option as defined\
    \ in RFC 2018 is as follows:\n                            +--------+--------+\n\
    \                            | Kind=5 | Length |\n          +--------+--------+--------+--------+\n\
    \          |      Left Edge of 1st Block       |\n          +--------+--------+--------+--------+\n\
    \          |      Right Edge of 1st Block      |\n          +--------+--------+--------+--------+\n\
    \          |                                   |\n          /            . . .\
    \                  /\n          |                                   |\n      \
    \    +--------+--------+--------+--------+\n          |      Left Edge of nth\
    \ Block       |\n          +--------+--------+--------+--------+\n          |\
    \      Right Edge of nth Block      |\n          +--------+--------+--------+--------+\n\
    \   The Selective Acknowledgement (SACK) option in the TCP header\n   contains\
    \ a number of SACK blocks, where each block specifies the left\n   and right edge\
    \ of a block of data received at the TCP receiver.  In\n   particular, a block\
    \ represents a contiguous sequence space of data\n   received and queued at the\
    \ receiver, where the \"left edge\" of the\n   block is the first sequence number\
    \ of the block, and the \"right edge\"\n   is the sequence number immediately\
    \ following the last sequence number\n   of the block.\n   RFC 2018 implies that\
    \ the first SACK block specify the segment that\n   triggered the acknowledgement.\
    \  From RFC 2018, when the data receiver\n   chooses to send a SACK option, \"\
    the first SACK block ... MUST specify\n   the contiguous block of data containing\
    \ the segment which triggered\n   this ACK, unless that segment advanced the Acknowledgment\
    \ Number\n   field in the header.\"\n   However, RFC 2018 does not address the\
    \ use of the SACK option when\n   acknowledging a duplicate segment.  For example,\
    \ RFC 2018 specifies\n   that \"each block represents received bytes of data that\
    \ are\n   contiguous and isolated\".  RFC 2018 further specifies that \"if sent\n\
    \   at all, SACK options SHOULD be included in all ACKs which do not ACK\n   the\
    \ highest sequence number in the data receiver's queue.\"  RFC 2018\n   does not\
    \ specify the use of the SACK option when a duplicate segment\n   is received,\
    \ and the cumulative acknowledgement field in the ACK\n   acknowledges all of\
    \ the data in the data receiver's queue.\n"
- title: 4. Use of the SACK option for reporting a duplicate segment
  contents:
  - "4. Use of the SACK option for reporting a duplicate segment\n   This section\
    \ specifies the use of SACK blocks when the SACK option is\n   used in reporting\
    \ a duplicate segment.  When D-SACK is used, the\n   first block of the SACK option\
    \ should be a D-SACK block specifying\n   the sequence numbers for the duplicate\
    \ segment that triggers the\n   acknowledgement.  If the duplicate segment is\
    \ part of a larger block\n   of non-contiguous data in the receiver's data queue,\
    \ then the\n   following SACK block should be used to specify this larger block.\n\
    \   Additional SACK blocks can be used to specify additional non-\n   contiguous\
    \ blocks of data, as specified in RFC 2018.\n   The guidelines for reporting duplicate\
    \ segments are summarized below:\n   (1) A D-SACK block is only used to report\
    \ a duplicate contiguous\n   sequence of data received by the receiver in the\
    \ most recent packet.\n   (2) Each duplicate contiguous sequence of data received\
    \ is reported\n   in at most one D-SACK block.  (I.e., the receiver sends two\
    \ identical\n   D-SACK blocks in subsequent packets only if the receiver receives\
    \ two\n   duplicate segments.)\n   (3) The left edge of the D-SACK block specifies\
    \ the first sequence\n   number of the duplicate contiguous sequence, and the\
    \ right edge of\n   the D-SACK block specifies the sequence number immediately\
    \ following\n   the last sequence in the duplicate contiguous sequence.\n   (4)\
    \ If the D-SACK block reports a duplicate contiguous sequence from\n   a (possibly\
    \ larger) block of data in the receiver's data queue above\n   the cumulative\
    \ acknowledgement, then the second SACK block in that\n   SACK option should specify\
    \ that (possibly larger) block of data.\n   (5) Following the SACK blocks described\
    \ above for reporting duplicate\n   segments, additional SACK blocks can be used\
    \ for reporting additional\n   blocks of data, as specified in RFC 2018.\n   Note\
    \ that because each duplicate segment is reported in only one ACK\n   packet,\
    \ information about that duplicate segment will be lost if that\n   ACK packet\
    \ is dropped in the network.\n"
- title: 4.1  Reporting Full Duplicate Segments
  contents:
  - "4.1  Reporting Full Duplicate Segments\n   We illustrate these guidelines with\
    \ three examples.  In each example,\n   we assume that the data receiver has first\
    \ received eight segments of\n   500 bytes each, and has sent an acknowledgement\
    \ with the cumulative\n   acknowledgement field set to 4000 (assuming the first\
    \ sequence number\n   is zero).  The D-SACK block is underlined in each example.\n"
- title: '4.1.1.  Example 1: Reporting a duplicate segment.'
  contents:
  - "4.1.1.  Example 1: Reporting a duplicate segment.\n   Because several ACK packets\
    \ are lost, the data sender retransmits\n   packet 3000-3499, and the data receiver\
    \ subsequently receives a\n   duplicate segment with sequence numbers 3000-3499.\
    \  The receiver\n   sends an acknowledgement with the cumulative acknowledgement\
    \ field\n   set to 4000, and the first, D-SACK block specifying sequence numbers\n\
    \   3000-3500.\n        Transmitted    Received    ACK Sent\n        Segment \
    \       Segment     (Including SACK Blocks)\n        3000-3499      3000-3499\
    \   3500 (ACK dropped)\n        3500-3999      3500-3999   4000 (ACK dropped)\n\
    \        3000-3499      3000-3499   4000, SACK=3000-3500\n                   \
    \                           ---------\n"
- title: '4.1.2.  Example 2:  Reporting an out-of-order segment and a duplicate'
  contents:
  - "4.1.2.  Example 2:  Reporting an out-of-order segment and a duplicate\n     \
    \   segment.\n   Following a lost data packet, the receiver receives an out-of-order\n\
    \   data segment, which triggers the SACK option as specified in  RFC\n   2018.\
    \  Because of several lost ACK packets, the sender then\n   retransmits a data\
    \ packet.  The receiver receives the duplicate\n   packet, and reports it in the\
    \ first, D-SACK block:\n        Transmitted    Received    ACK Sent\n        Segment\
    \        Segment     (Including SACK Blocks)\n        3000-3499      3000-3499\
    \   3500 (ACK dropped)\n        3500-3999      3500-3999   4000 (ACK dropped)\n\
    \        4000-4499      (data packet dropped)\n        4500-4999      4500-4999\
    \   4000, SACK=4500-5000 (ACK dropped)\n        3000-3499      3000-3499   4000,\
    \ SACK=3000-3500, 4500-5000\n                                                \
    \ ---------\n"
- title: '4.1.3.  Example 3:  Reporting a duplicate of an out-of-order segment.'
  contents:
  - "4.1.3.  Example 3:  Reporting a duplicate of an out-of-order segment.\n   Because\
    \ of a lost data packet, the receiver receives two out-of-order\n   segments.\
    \  The receiver next receives a duplicate segment for one of\n   these out-of-order\
    \ segments:\n        Transmitted    Received    ACK Sent\n        Segment    \
    \    Segment     (Including SACK Blocks)\n        3500-3999      3500-3999   4000\n\
    \        4000-4499      (data packet dropped)\n        4500-4999      4500-4999\
    \   4000, SACK=4500-5000\n        5000-5499      5000-5499   4000, SACK=4500-5500\n\
    \                       (duplicated packet)\n                       5000-5499\
    \   4000, SACK=5000-5500, 4500-5500\n                                        \
    \      ---------\n"
- title: 4.2.  Reporting Partial Duplicate Segments
  contents:
  - "4.2.  Reporting Partial Duplicate Segments\n   It may be possible that a sender\
    \ transmits a packet that includes one\n   or more duplicate sub-segments--that\
    \ is, only part but not all of the\n   transmitted packet has already arrived\
    \ at the receiver.  This can\n   occur when the size of the sender's transmitted\
    \ segments increases,\n   which can occur when the PMTU increases in the middle\
    \ of a TCP\n   session, for example.  The guidelines in Section 4 above apply\
    \ to\n   reporting partial as well as full duplicate segments.  This section\n\
    \   gives examples of these guidelines when reporting partial duplicate\n   segments.\n\
    \   When the SACK option is used for reporting partial duplicate\n   segments,\
    \ the first D-SACK block reports the first duplicate sub-\n   segment.  If the\
    \ data packet being acknowledged contains multiple\n   partial duplicate sub-segments,\
    \ then only the first such duplicate\n   sub-segment is reported in the SACK option.\
    \  We illustrate this with\n   the examples below.\n"
- title: '4.2.1.  Example 4:  Reporting a single duplicate subsegment.'
  contents:
  - "4.2.1.  Example 4:  Reporting a single duplicate subsegment.\n   The sender increases\
    \ the packet size from 500 bytes to 1000 bytes.\n   The receiver subsequently\
    \ receives a 1000-byte packet containing one\n   500-byte subsegment that has\
    \ already been received and one which has\n   not.  The receiver reports only\
    \ the already received subsegment using\n   a single D-SACK block.\n        Transmitted\
    \    Received    ACK Sent\n        Segment        Segment     (Including SACK\
    \ Blocks)\n        500-999        500-999     1000\n        1000-1499      (delayed)\n\
    \        1500-1999      (data packet dropped)\n        2000-2499      2000-2499\
    \   1000, SACK=2000-2500\n        1000-2000      1000-1499   1500, SACK=2000-2500\n\
    \                       1000-2000   2500, SACK=1000-1500\n                   \
    \                           ---------\n"
- title: '4.2.2.  Example 5:  Two non-contiguous duplicate subsegments covered by'
  contents:
  - "4.2.2.  Example 5:  Two non-contiguous duplicate subsegments covered by\n   \
    \     the cumulative acknowledgement.\n   After the sender increases its packet\
    \ size from 500 bytes to 1500\n   bytes, the receiver receives a packet containing\
    \ two non-contiguous\n   duplicate 500-byte subsegments which are less than the\
    \ cumulative\n   acknowledgement field.  The receiver reports the first such duplicate\n\
    \   segment in a single D-SACK block.\n         Transmitted    Received    ACK\
    \ Sent\n         Segment        Segment     (Including SACK Blocks)\n        \
    \ 500-999        500-999     1000\n         1000-1499      (delayed)\n       \
    \  1500-1999      (data packet dropped)\n         2000-2499      (delayed)\n \
    \        2500-2999      (data packet dropped)\n         3000-3499      3000-3499\
    \   1000, SACK=3000-3500\n         1000-2499      1000-1499   1500, SACK=3000-3500\n\
    \                        2000-2499   1500, SACK=2000-2500, 3000-3500\n       \
    \                 1000-2499   2500, SACK=1000-1500, 3000-3500\n              \
    \                                 ---------\n"
- title: '4.2.3.  Example 6:  Two non-contiguous duplicate subsegments not covered'
  contents:
  - "4.2.3.  Example 6:  Two non-contiguous duplicate subsegments not covered\n  \
    \      by the cumulative acknowledgement.\n   This example is similar to Example\
    \ 5, except that after the sender\n   increases the packet size, the receiver\
    \ receives a packet containing\n   two non-contiguous duplicate subsegments which\
    \ are above the\n   cumulative acknowledgement field, rather than below.  The\
    \ first, D-\n   SACK block reports the first duplicate subsegment, and the second,\n\
    \   SACK block reports the larger block of non-contiguous data that it\n   belongs\
    \ to.\n         Transmitted    Received    ACK Sent\n         Segment        Segment\
    \     (Including SACK Blocks)\n         500-999        500-999     1000\n    \
    \     1000-1499      (data packet dropped)\n         1500-1999      (delayed)\n\
    \         2000-2499      (data packet dropped)\n         2500-2999      (delayed)\n\
    \         3000-3499      (data packet dropped)\n         3500-3999      3500-3999\
    \   1000, SACK=3500-4000\n         1000-1499      (data packet dropped)\n    \
    \     1500-2999      1500-1999   1000, SACK=1500-2000, 3500-4000\n           \
    \             2000-2499   1000, SACK=2000-2500, 1500-2000,\n                 \
    \                           3500-4000\n                        1500-2999   1000,\
    \ SACK=1500-2000, 1500-3000,\n                                               ---------\n\
    \                                            3500-4000\n"
- title: 4.3.  Interaction Between D-SACK and PAWS
  contents:
  - "4.3.  Interaction Between D-SACK and PAWS\n   RFC 1323 [RFC1323] specifies an\
    \ algorithm for Protection Against\n   Wrapped Sequence Numbers (PAWS).  PAWS\
    \ gives a method for\n   distinguishing between sequence numbers for new data,\
    \ and sequence\n   numbers from a previous cycle through the sequence number space.\n\
    \   Duplicate segments might be detected by PAWS as belonging to a\n   previous\
    \ cycle through the sequence number space.\n   RFC 1323 specifies that for such\
    \ packets, the receiver should do the\n   following:\n      Send an acknowledgement\
    \ in reply as specified in RFC 793 page 69,\n      and drop the segment.\n   Since\
    \ PAWS still requires sending an ACK, there is no harmful\n   interaction between\
    \ PAWS and the use of D-SACK.  The D-SACK block can\n   be included in the SACK\
    \ option of the ACK, as outlined in Section 4,\n   independently of the use of\
    \ PAWS by the TCP receiver, and\n   independently of the determination by PAWS\
    \ of the validity or\n   invalidity of the data segment.\n   TCP senders receiving\
    \ D-SACK blocks should be aware that a segment\n   reported as a duplicate segment\
    \ could possibly have been from a prior\n   cycle through the sequence number\
    \ space.  This is independent of the\n   use of PAWS by the TCP data receiver.\
    \  We do not anticipate that this\n   will present significant problems for senders\
    \ using D-SACK\n   information.\n"
- title: 5. Detection of Duplicate Packets
  contents:
  - "5. Detection of Duplicate Packets\n   This extension to the SACK option enables\
    \ the receiver to accurately\n   report the reception of duplicate data.  Because\
    \ each receipt of a\n   duplicate packet is reported in only one ACK packet, the\
    \ loss of a\n   single ACK can prevent this information from reaching the sender.\
    \  In\n   addition, we note that the sender can not necessarily trust the\n  \
    \ receiver to send it accurate information [SCWA99].\n   In order for the sender\
    \ to check that the first (D)SACK block of an\n   acknowledgement in fact acknowledges\
    \ duplicate data, the sender\n   should compare the sequence space in the first\
    \ SACK block to the\n   cumulative ACK which is carried IN THE SAME PACKET.  If\
    \ the SACK\n   sequence space is less than this cumulative ACK, it is an indication\n\
    \   that the segment identified by the SACK block has been received more\n   than\
    \ once by the receiver.  An implementation MUST NOT compare the\n   sequence space\
    \ in the SACK block to the TCP state variable snd.una\n   (which carries the total\
    \ cumulative ACK), as this may result in the\n   wrong conclusion if ACK packets\
    \ are reordered.\n   If the sequence space in the first SACK block is greater\
    \ than the\n   cumulative ACK, then the sender next compares the sequence space\
    \ in\n   the first SACK block with the sequence space in the second SACK\n   block,\
    \ if there is one.  This comparison can determine if the first\n   SACK block\
    \ is reporting duplicate data that lies above the cumulative\n   ACK.\n   TCP\
    \ implementations which follow RFC 2581 [RFC2581] could see\n   duplicate packets\
    \ in each of the following four situations.  This\n   document does not specify\
    \ what action a TCP implementation should\n   take in these cases.  The extension\
    \ to the SACK option simply enables\n   the sender to detect each of these cases.\
    \  Note that these four\n   conditions are not an exhaustive list of possible\
    \ cases for duplicate\n   packets, but are representative of the most common/likely\
    \ cases.\n   Subsequent documents will describe experimental proposals for sender\n\
    \   responses to the detection of unnecessary retransmits due to\n   reordering,\
    \ lost ACKS, or early retransmit timeouts.\n"
- title: 5.1.  Replication by the network
  contents:
  - "5.1.  Replication by the network\n   If a packet is replicated in the network,\
    \ this extension to the SACK\n   option can identify this.  For example:\n   \
    \          Transmitted    Received    ACK Sent\n             Segment        Segment\
    \     (Including SACK Blocks)\n             500-999        500-999     1000\n\
    \             1000-1499      1000-1499   1500\n                            (replicated)\n\
    \                            1000-1499   1500, SACK=1000-1500\n              \
    \                                     ---------\n   In this case, the second packet\
    \ was replicated in the network.  An\n   ACK containing a D-SACK block which is\
    \ lower than its ACK field and\n   is not identical to a previously retransmitted\
    \ segment is indicative\n   of a replication by the network.\n   WITHOUT D-SACK:\n\
    \   If D-SACK was not used and the last ACK was piggybacked on a data\n   packet,\
    \ the sender would not know that a packet had been replicated\n   in the network.\
    \  If D-SACK was not used and neither of the last two\n   ACKs was piggybacked\
    \ on a data packet, then the sender could\n   reasonably infer that either some\
    \ data packet *or* the final ACK\n   packet had been replicated in the network.\
    \  The receipt of the D-SACK\n   packet gives the sender positive knowledge that\
    \ this data packet was\n   replicated in the network (assuming that the receiver\
    \ is not lying).\n   RESEARCH ISSUES:\n   The current SACK option already allows\
    \ the sender to identify\n   duplicate ACKs that do not acknowledge new data,\
    \ but the D-SACK\n   option gives the sender a stronger basis for inferring that\
    \ a\n   duplicate ACK does not acknowledge new data.  The knowledge that a\n \
    \  duplicate ACK does not acknowledge new data allows the sender to\n   refrain\
    \ from using that duplicate ACKs to infer packet loss (e.g.,\n   Fast Retransmit)\
    \ or to send more data (e.g., Fast Recovery).\n"
- title: 5.2.  False retransmit due to reordering
  contents:
  - "5.2.  False retransmit due to reordering\n   If packets are reordered in the\
    \ network such that a segment arrives\n   more than 3 packets out of order, TCP's\
    \ Fast Retransmit algorithm\n   will retransmit the out-of-order packet.  An example\
    \ of this is shown\n   below:\n             Transmitted    Received    ACK Sent\n\
    \             Segment        Segment     (Including SACK Blocks)\n           \
    \  500-999        500-999     1000\n             1000-1499      (delayed)\n  \
    \           1500-1999      1500-1999   1000, SACK=1500-2000\n             2000-2499\
    \      2000-2499   1000, SACK=1500-2500\n             2500-2999      2500-2999\
    \   1000, SACK=1500-3000\n             1000-1499      1000-1499   3000\n     \
    \                       1000-1499   3000, SACK=1000-1500\n                   \
    \                                ---------\n   In this case, an ACK containing\
    \ a SACK block which is lower than its\n   ACK field and identical to a previously\
    \ retransmitted segment is\n   indicative of a significant reordering followed\
    \ by a false\n   (unnecessary) retransmission.\n   WITHOUT D-SACK:\n   With the\
    \ use of D-SACK illustrated above, the sender knows that\n   either the first\
    \ transmission of segment 1000-1499 was delayed in the\n   network, or the first\
    \ transmission of segment 1000-1499 was dropped\n   and the second transmission\
    \ of segment 1000-1499 was duplicated.\n   Given that no other segments have been\
    \ duplicated in the network,\n   this second option can be considered unlikely.\n\
    \   Without the use of D-SACK, the sender would only know that either the\n  \
    \ first transmission of segment 1000-1499 was delayed in the network,\n   or that\
    \ either one of the data segments or the final ACK was\n   duplicated in the network.\
    \  Thus, the use of D-SACK allows the sender\n   to more reliably infer that the\
    \ first transmission of segment\n   1000-1499 was not dropped.\n   [AP99], [L99],\
    \ and [LK00] note that the sender could unambiguously\n   detect an unnecessary\
    \ retransmit with the use of the timestamp\n   option.  [LK00] proposes a timestamp-based\
    \ algorithm that minimizes\n   the penalty for an unnecessary retransmit.  [AP99]\
    \ proposes a\n   heuristic for detecting an unnecessary retransmit in an environment\n\
    \   with neither timestamps nor SACK.  [L99] also proposes a two-bit\n   field\
    \ as an alternate to the timestamp option for unambiguously\n   marking the first\
    \ three retransmissions of a packet.  A similar idea\n   was proposed in [ISO8073].\n\
    \   RESEARCH ISSUES:\n   The use of D-SACK allows the sender to detect some cases\
    \ (e.g., when\n   no ACK packets have been lost) when a a Fast Retransmit was\
    \ due to\n   packet reordering instead of packet loss.  This allows the TCP sender\n\
    \   to adjust the duplicate acknowledgment threshold, to prevent such\n   unnecessary\
    \ Fast Retransmits in the future.  Coupled with this, when\n   the sender determines,\
    \ after the fact, that it has made an\n   unnecessary window reduction, the sender\
    \ has the option of \"undoing\"\n   that reduction in the congestion window by\
    \ resetting ssthresh to the\n   value of the old congestion window, and slow-starting\
    \ until the\n   congestion window has reached that point.\n   Any proposal for\
    \ \"undoing\" a reduction in the congestion window would\n   have to address the\
    \ possibility that the TCP receiver could be lying\n   in its reports of received\
    \ packets [SCWA99].\n"
- title: 5.3.  Retransmit Timeout Due to ACK Loss
  contents:
  - "5.3.  Retransmit Timeout Due to ACK Loss\n   If an entire window of ACKs is lost,\
    \ a timeout will result.  An\n   example of this is given below:\n           \
    \  Transmitted    Received    ACK Sent\n             Segment        Segment  \
    \   (Including SACK Blocks)\n             500-999        500-999     1000 (ACK\
    \ dropped)\n             1000-1499      1000-1499   1500 (ACK dropped)\n     \
    \        1500-1999      1500-1999   2000 (ACK dropped)\n             2000-2499\
    \      2000-2499   2500 (ACK dropped)\n             (timeout)\n             500-999\
    \        500-999     2500, SACK=500-1000\n                                   \
    \                --------\n   In this case, all of the ACKs are dropped, resulting\
    \ in a timeout.\n   This condition can be identified because the first ACK received\n\
    \   following the timeout carries a D-SACK block indicating duplicate\n   data\
    \ was received.\n   WITHOUT D-SACK:\n   Without the use of D-SACK, the sender\
    \ in this case would be unable to\n   decide that no data packets has been dropped.\n\
    \   RESEARCH ISSUES:\n   For a TCP that implements some form of ACK congestion\
    \ control\n   [BPK97], this ability to distinguish between dropped data packets\
    \ and\n   dropped ACK packets would be particularly useful.  In this case, the\n\
    \   connection could implement congestion control for the return (ACK)\n   path\
    \ independently from the congestion control on the forward (data)\n   path.\n"
- title: 5.4.  Early Retransmit Timeout
  contents:
  - "5.4.  Early Retransmit Timeout\n   If the sender's RTO is too short, an early\
    \ retransmission timeout can\n   occur when no packets have in fact been dropped\
    \ in the network.  An\n   example of this is given below:\n             Transmitted\
    \    Received    ACK Sent\n             Segment        Segment     (Including\
    \ SACK Blocks)\n             500-999        (delayed)\n             1000-1499\
    \      (delayed)\n             1500-1999      (delayed)\n             2000-2499\
    \      (delayed)\n             (timeout)\n             500-999        (delayed)\n\
    \                            500-999     1000\n             1000-1499      (delayed)\n\
    \                            1000-1499   1500\n             ...\n            \
    \                1500-1999   2000\n                            2000-2499   2500\n\
    \                            500-999     2500, SACK=500-1000\n               \
    \                                    --------\n                            1000-1499\
    \   2500, SACK=1000-1500\n                                                   ---------\n\
    \                            ...\n   In this case, the first packet is retransmitted\
    \ following the\n   timeout.  Subsequently, the original window of packets arrives\
    \ at the\n   receiver, resulting in ACKs for these segments.  Following this,\
    \ the\n   retransmissions of these segments arrive, resulting in ACKs carrying\n\
    \   SACK blocks which identify the duplicate segments.\n   This can be identified\
    \ as an early retransmission timeout because the\n   ACK for byte 1000 is received\
    \ after the timeout with no SACK\n   information, followed by an ACK which carries\
    \ SACK information (500-\n   999) indicating that the retransmitted segment had\
    \ already been\n   received.\n   WITHOUT D-SACK:\n   If D-SACK was not used and\
    \ one of the duplicate ACKs was piggybacked\n   on a data packet, the sender would\
    \ not know how many duplicate\n   packets had been received.  If D-SACK was not\
    \ used and none of the\n   duplicate ACKs were piggybacked on a data packet, then\
    \ the sender\n   would have sent N duplicate packets, for some N, and received\
    \ N\n   duplicate ACKs.  In this case, the sender could reasonably infer that\n\
    \   some data or ACK packet had been replicated in the network, or that\n   an\
    \ early retransmission timeout had occurred (or that the receiver is\n   lying).\n\
    \   RESEARCH ISSUES:\n   After the sender determines that an unnecessary (i.e.,\
    \ early)\n   retransmit timeout has occurred, the sender could adjust parameters\n\
    \   for setting the RTO, to prevent more unnecessary retransmit timeouts.\n  \
    \ Coupled with this, when the sender determines, after the fact, that\n   it has\
    \ made an unnecessary window reduction, the sender has the\n   option of \"undoing\"\
    \ that reduction in the congestion window.\n"
- title: 6. Security Considerations
  contents:
  - "6. Security Considerations\n   This document neither strengthens nor weakens\
    \ TCP's current security\n   properties.\n"
- title: 7. Acknowledgements
  contents:
  - "7. Acknowledgements\n   We would like to thank Mark Handley, Reiner Ludwig, and\
    \ Venkat\n   Padmanabhan for conversations on these issues, and to thank Mark\n\
    \   Allman for helpful feedback on this document.\n"
- title: 8. References
  contents:
  - "8. References\n   [AP99]    Mark Allman and Vern Paxson, On Estimating End-to-End\n\
    \             Network Path Properties, SIGCOMM 99, August 1999.  URL\n       \
    \      \"http://www.acm.org/sigcomm/sigcomm99/papers/session7-\n             3.html\"\
    .\n   [BPS99]   J.C.R. Bennett, C. Partridge, and N. Shectman, Packet\n      \
    \       Reordering is Not Pathological Network Behavior, IEEE/ACM\n          \
    \   Transactions on Networking, Vol. 7, No. 6, December 1999,\n             pp.\
    \ 789-798.\n   [BPK97]   Hari Balakrishnan, Venkata Padmanabhan, and Randy H.\
    \ Katz,\n             The Effects of Asymmetry on TCP Performance, Third ACM/IEEE\n\
    \             Mobicom Conference, Budapest, Hungary, Sep 1997.  URL\n        \
    \     \"http://www.cs.berkeley.edu/~padmanab/\n             index.html#Publications\"\
    .\n   [F99]     Floyd, S., Re: TCP and out-of-order delivery, Message ID\n   \
    \          <199902030027.QAA06775@owl.ee.lbl.gov> to the end-to-end-\n       \
    \      interest mailing list, February 1999.  URL\n             \"http://www.aciri.org/floyd/notes/TCP_Feb99.email\"\
    .\n   [ISO8073] ISO/IEC, Information-processing systems - Open Systems\n     \
    \        Interconnection - Connection Oriented Transport Protocol\n          \
    \   Specification, Internation Standard ISO/IEC 8073, December\n             1988.\n\
    \   [L99]     Reiner Ludwig, A Case for Flow Adaptive Wireless links,\n      \
    \       Technical Report UCB//CSD-99-1053, May 1999.  URL\n             \"http://iceberg.cs.berkeley.edu/papers/Ludwig-\n\
    \             FlowAdaptive/\".\n   [LK00]    Reiner Ludwig and Randy H. Katz,\
    \ The Eifel Algorithm:\n             Making TCP Robust Against Spurious Retransmissions,\
    \ SIGCOMM\n             Computer Communication Review, V. 30, N. 1, January 2000.\n\
    \             URL \"http://www.acm.org/sigcomm/ccr/archive/ccr-toc/ccr-\n    \
    \         toc-2000.html\".\n   [RFC1323] Jacobson, V., Braden, R. and D. Borman,\
    \ \"TCP Extensions for\n             High Performance\", RFC 1323, May 1992.\n\
    \   [RFC2018] Mathis, M., Mahdavi, J., Floyd, S. and  A. Romanow, \"TCP\n    \
    \         Selective Acknowledgement Options\", RFC 2018, April 1996.\n   [RFC2581]\
    \ Allman, M., Paxson,V. and W. Stevens, \"TCP Congestion\n             Control\"\
    , RFC 2581, April 1999.\n   [SCWA99]  Stefan Savage, Neal Cardwell, David Wetherall,\
    \ Tom\n             Anderson, TCP Congestion Control with a Misbehaving\n    \
    \         Receiver, ACM Computer Communications Review, pp. 71-78, V.\n      \
    \       29, N. 5, October, 1999.  URL\n             \"http://www.acm.org/sigcomm/ccr/archive/ccr-toc/ccr-toc-\n\
    \             99.html\".\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Sally Floyd\n   AT&T Center for Internet Research at ICSI\
    \ (ACIRI)\n   Phone: +1 510-666-6989\n   EMail: floyd@aciri.org\n   URL:  http://www.aciri.org/floyd/\n\
    \   Jamshid Mahdavi\n   Novell\n   Phone: 1-408-967-3806\n   EMail: mahdavi@novell.com\n\
    \   Matt Mathis\n   Pittsburgh Supercomputing Center\n   Phone: 412 268-3319\n\
    \   EMail: mathis@psc.edu\n   URL: http://www.psc.edu/~mathis/\n   Matthew Podolsky\n\
    \   UC Berkeley Electrical Engineering & Computer Science Dept.\n   Phone: 510-649-8914\n\
    \   EMail: podolsky@eecs.berkeley.edu\n   URL: http://www.eecs.berkeley.edu/~podolsky\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
