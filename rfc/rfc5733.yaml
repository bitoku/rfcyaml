- contents:
  - '         Extensible Provisioning Protocol (EPP) Contact Mapping

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document describes an Extensible Provisioning Protocol (EPP)\n
    \  mapping for the provisioning and management of individual or\n   organizational
    social information identifiers (known as \"contacts\")\n   stored in a shared
    central repository.  Specified in Extensible\n   Markup Language (XML), the mapping
    defines EPP command syntax and\n   semantics as applied to contacts.  This document
    obsoletes RFC 4933.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents
    in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n
    \  Please review these documents carefully, as they describe your rights\n   and
    restrictions with respect to this document.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Conventions Used in This Document ..........................3\n   2.
    Object Attributes ...............................................3\n      2.1.
    Contact and Client Identifiers .............................3\n      2.2. Status
    Values ..............................................4\n      2.3. Individual
    and Organizational Names ........................5\n      2.4. Address ....................................................6\n
    \          2.4.1. Street, City, and State or Province .................6\n           2.4.2.
    Postal Code .........................................6\n           2.4.3. Country
    .............................................6\n      2.5. Telephone Numbers ..........................................6\n
    \     2.6. Email Addresses ............................................6\n      2.7.
    Dates and Times ............................................6\n      2.8. Authorization
    Information ..................................7\n      2.9. Disclosure of Data
    Elements and Attributes .................7\n   3. EPP Command Mapping .............................................8\n
    \     3.1. EPP Query Commands .........................................8\n           3.1.1.
    EPP <check> Command .................................9\n           3.1.2. EPP
    <info> Command .................................11\n           3.1.3. EPP <transfer>
    Query Command .......................14\n      3.2. EPP Transform Commands ....................................16\n
    \          3.2.1. EPP <create> Command ...............................17\n           3.2.2.
    EPP <delete> Command ...............................20\n           3.2.3. EPP
    <renew> Command ................................21\n           3.2.4. EPP <transfer>
    Command .............................21\n           3.2.5. EPP <update> Command
    ...............................23\n      3.3. Offline Review of Requested Actions
    .......................26\n   4. Formal Syntax ..................................................28\n
    \  5. Internationalization Considerations ............................37\n   6.
    IANA Considerations ............................................37\n   7. Security
    Considerations ........................................38\n   8. Acknowledgements
    ...............................................38\n   9. References .....................................................39\n
    \     9.1. Normative References ......................................39\n      9.2.
    Informative References ....................................40\n   Appendix A.
    \ Changes from RFC 4933 . . . . . . . . . . . . . . . . 42\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document describes a personal and organizational identifier\n
    \  mapping for version 1.0 of the Extensible Provisioning Protocol\n   (EPP).
    \ This mapping is specified using the Extensible Markup\n   Language (XML) 1.0
    as described in [W3C.REC-xml-20040204] and XML\n   Schema notation as described
    in [W3C.REC-xmlschema-1-20041028] and\n   [W3C.REC-xmlschema-2-20041028].  This
    document obsoletes RFC 4933\n   [RFC4933].\n   [RFC5730] provides a complete description
    of EPP command and response\n   structures.  A thorough understanding of the base
    protocol\n   specification is necessary to understand the mapping described in\n
    \  this document.\n   XML is case sensitive.  Unless stated otherwise, XML specifications\n
    \  and examples provided in this document MUST be interpreted in the\n   character
    case presented to develop a conforming implementation.\n"
  - contents:
    - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST
      NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\",
      \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted
      as described in [RFC2119].\n   In examples, \"C:\" represents lines sent by
      a protocol client and \"S:\"\n   represents lines returned by a protocol server.
      \ Indentation and\n   white space in examples are provided only to illustrate
      element\n   relationships and are not a REQUIRED feature of this protocol.\n"
    title: 1.1.  Conventions Used in This Document
  title: 1.  Introduction
- contents:
  - "2.  Object Attributes\n   An EPP contact object has attributes and associated
    values that can\n   be viewed and modified by the sponsoring client or the server.
    \ This\n   section describes each attribute type in detail.  The formal syntax\n
    \  for the attribute values described here can be found in the \"Formal\n   Syntax\"
    section of this document and in the appropriate normative\n   references.\n"
  - contents:
    - "2.1.  Contact and Client Identifiers\n   All EPP contacts are identified by
      a server-unique identifier.\n   Contact identifiers are character strings with
      a specified minimum\n   length, a specified maximum length, and a specified
      format.  Contact\n   identifiers use the \"clIDType\" client identifier syntax
      described in\n   [RFC5730].\n"
    title: 2.1.  Contact and Client Identifiers
  - contents:
    - "2.2.  Status Values\n   A contact object MUST always have at least one associated
      status\n   value.  Status values can be set only by the client that sponsors
      a\n   contact object and by the server on which the object resides.  A\n   client
      can change the status of a contact object using the EPP\n   <update> command.
      \ Each status value MAY be accompanied by a string\n   of human-readable text
      that describes the rationale for the status\n   applied to the object.\n   A
      client MUST NOT alter status values set by the server.  A server\n   MAY alter
      or override status values set by a client, subject to local\n   server policies.
      \ The status of an object MAY change as a result of\n   either a client-initiated
      transform command or an action performed by\n   a server operator.\n   Status
      values that can be added or removed by a client are prefixed\n   with \"client\".
      \ Corresponding status values that can be added or\n   removed by a server are
      prefixed with \"server\".  Status values that\n   do not begin with either \"client\"
      or \"server\" are server-managed.\n   Status Value Descriptions:\n   -  clientDeleteProhibited,
      serverDeleteProhibited\n      Requests to delete the object MUST be rejected.\n
      \  -  clientTransferProhibited, serverTransferProhibited\n      Requests to
      transfer the object MUST be rejected.\n   -  clientUpdateProhibited, serverUpdateProhibited\n
      \     Requests to update the object (other than to remove this status)\n      MUST
      be rejected.\n   -  linked\n      The contact object has at least one active
      association with\n      another object, such as a domain object.  Servers SHOULD
      provide\n      services to determine existing object associations.\n   -  ok\n
      \     This is the normal status value for an object that has no pending\n      operations
      or prohibitions.  This value is set and removed by the\n      server as other
      status values are added or removed.\n   -  pendingCreate, pendingDelete, pendingTransfer,
      pendingUpdate\n      A transform command has been processed for the object,
      but the\n      action has not been completed by the server.  Server operators
      can\n      delay action completion for a variety of reasons, such as to allow\n
      \     for human review or third-party action.  A transform command that\n      is
      processed, but whose requested action is pending, is noted with\n      response
      code 1001.\n   When the requested action has been completed, the pendingCreate,\n
      \  pendingDelete, pendingTransfer, or pendingUpdate status value MUST be\n   removed.
      \ All clients involved in the transaction MUST be notified\n   using a service
      message that the action has been completed and that\n   the status of the object
      has changed.\n   \"ok\" status MAY only be combined with \"linked\" status.\n
      \  \"linked\" status MAY be combined with any status.\n   \"pendingDelete\"
      status MUST NOT be combined with either\n   \"clientDeleteProhibited\" or \"serverDeleteProhibited\"
      status.\n   \"pendingTransfer\" status MUST NOT be combined with either\n   \"clientTransferProhibited\"
      or \"serverTransferProhibited\" status.\n   \"pendingUpdate\" status MUST NOT
      be combined with either\n   \"clientUpdateProhibited\" or \"serverUpdateProhibited\"
      status.\n   The pendingCreate, pendingDelete, pendingTransfer, and pendingUpdate\n
      \  status values MUST NOT be combined with each other.\n   Other status combinations
      not expressly prohibited MAY be used.\n"
    title: 2.2.  Status Values
  - contents:
    - "2.3.  Individual and Organizational Names\n   Individual and organizational
      names associated with a contact are\n   represented using character strings.
      \ These strings have a specified\n   minimum length and a specified maximum
      length.  Individual and\n   organizational names MAY be provided in either UTF-8
      [RFC3629] or a\n   subset of UTF-8 that can be represented in 7-bit ASCII, depending
      on\n   local needs.\n"
    title: 2.3.  Individual and Organizational Names
  - contents:
    - "2.4.  Address\n   Every contact has associated postal-address information.
      \ A postal\n   address contains OPTIONAL street information, city information,\n
      \  OPTIONAL state/province information, an OPTIONAL postal code, and a\n   country
      identifier.  Address information MAY be provided in either\n   UTF-8 or a subset
      of UTF-8 that can be represented in 7-bit ASCII,\n   depending on local needs.\n"
    - contents:
      - "2.4.1.  Street, City, and State or Province\n   Contact street, city, and
        state or province information is\n   represented using character strings.
        \ These strings have a specified\n   minimum length and a specified maximum
        length.\n"
      title: 2.4.1.  Street, City, and State or Province
    - contents:
      - "2.4.2.  Postal Code\n   Contact postal codes are represented using character
        strings.  These\n   strings have a specified minimum length and a specified
        maximum\n   length.\n"
      title: 2.4.2.  Postal Code
    - contents:
      - "2.4.3.  Country\n   Contact country identifiers are represented using two-character\n
        \  identifiers specified in [ISO3166-1].\n"
      title: 2.4.3.  Country
    title: 2.4.  Address
  - contents:
    - "2.5.  Telephone Numbers\n   Contact telephone number structure is derived from
      structures defined\n   in [ITU.E164.2005].  Telephone numbers described in this
      mapping are\n   character strings that MUST begin with a plus sign (\"+\", ASCII
      value\n   0x002B), followed by a country code defined in [ITU.E164.2005],\n
      \  followed by a dot (\".\", ASCII value 0x002E), followed by a sequence\n   of
      digits representing the telephone number.  An optional \"x\"\n   attribute is
      provided to note telephone extension information.\n"
    title: 2.5.  Telephone Numbers
  - contents:
    - "2.6.  Email Addresses\n   Email address syntax is defined in [RFC5322].  This
      mapping does not\n   prescribe minimum or maximum lengths for character strings
      used to\n   represent email addresses.\n"
    title: 2.6.  Email Addresses
  - contents:
    - "2.7.  Dates and Times\n   Date and time attribute values MUST be represented
      in Universal\n   Coordinated Time (UTC) using the Gregorian calendar.  The extended\n
      \  date-time form using upper case \"T\" and \"Z\" characters defined in\n   [W3C.REC-xmlschema-2-20041028]
      MUST be used to represent date-time\n   values, as XML Schema does not support
      truncated date-time forms or\n   lower case \"T\" and \"Z\" characters.\n"
    title: 2.7.  Dates and Times
  - contents:
    - "2.8.  Authorization Information\n   Authorization information is associated
      with contact objects to\n   facilitate transfer operations.  Authorization information
      is\n   assigned when a contact object is created, and it might be updated in\n
      \  the future.  This specification describes password-based\n   authorization
      information, though other mechanisms are possible.\n"
    title: 2.8.  Authorization Information
  - contents:
    - "2.9.  Disclosure of Data Elements and Attributes\n   The EPP core protocol
      requires a server operator to announce data-\n   collection policies to clients;
      see Section 2.4 of [RFC5730].  In\n   conjunction with this disclosure requirement,
      this mapping includes\n   data elements that allow a client to identify elements
      that require\n   exceptional server-operator handling to allow or restrict disclosure\n
      \  to third parties.\n   A server operator announces a default disclosure policy
      when\n   establishing a session with a client.  When an object is created or\n
      \  updated, the client can specify contact attributes that require\n   exceptional
      disclosure handling using an OPTIONAL <contact:disclose>\n   element.  Once
      set, disclosure preferences can be reviewed using a\n   contact-information
      query.  A server operator MUST reject any\n   transaction that requests disclosure
      practices that do not conform to\n   the announced data-collection policy with
      a 2308 error response code.\n   If present, the <contact:disclose> element MUST
      contain a \"flag\"\n   attribute.  The \"flag\" attribute contains an XML Schema
      boolean\n   value.  A value of \"true\" or \"1\" (one) notes a client preference
      to\n   allow disclosure of the specified elements as an exception to the\n   stated
      data-collection policy.  A value of \"false\" or \"0\" (zero)\n   notes a client
      preference to not allow disclosure of the specified\n   elements as an exception
      to the stated data-collection policy.\n   The <contact:disclose> element MUST
      contain at least one of the\n   following child elements:\n   <contact:name
      type=\"int\"/>\n   <contact:name type=\"loc\"/>\n   <contact:org type=\"int\"/>\n
      \  <contact:org type=\"loc\"/>\n   <contact:addr type=\"int\"/>\n   <contact:addr
      type=\"loc\"/>\n   <contact:voice/>\n   <contact:fax/>\n   <contact:email/>\n
      \  Example <contact:disclose> element, flag=\"0\":\n   <contact:disclose flag=\"0\">\n
      \   <contact:email/>\n    <contact:voice/>\n   </contact:disclose>\n   In this
      example, the contact email address and voice telephone number\n   cannot be
      disclosed.  All other elements are subject to disclosure in\n   accordance with
      the server's data-collection policy.\n   Example <contact:disclose> element,
      flag=\"1\":\n   <contact:disclose flag=\"1\">\n    <contact:name type=\"int\"/>\n
      \   <contact:org type=\"int\"/>\n    <contact:addr type=\"int\"/>\n   </contact:disclose>\n
      \  In this example, the internationalized contact name, organization,\n   and
      address information can be disclosed.  All other elements are\n   subject to
      disclosure in accordance with the server's data-collection\n   policy.\n   Client-identification
      features provided by the EPP <login> command\n   and contact-authorization information
      are used to determine if a\n   client is authorized to perform contact-information
      query commands.\n   These features also determine if a client is authorized
      to receive\n   data that is otherwise marked for non-disclosure in a query response.\n"
    title: 2.9.  Disclosure of Data Elements and Attributes
  title: 2.  Object Attributes
- contents:
  - "3.  EPP Command Mapping\n   A detailed description of the EPP syntax and semantics
    can be found\n   in [RFC5730].  The command mappings described here are specifically\n
    \  for use in provisioning and managing contact objects via EPP.\n"
  - contents:
    - "3.1.  EPP Query Commands\n   EPP provides three commands to retrieve contact
      information: <check>\n   to determine if a contact object can be provisioned
      within a\n   repository, <info> to retrieve detailed information associated
      with a\n   contact object, and <transfer> to retrieve information regarding
      the\n   transfer status of the contact object.\n"
    - contents:
      - "3.1.1.  EPP <check> Command\n   The EPP <check> command is used to determine
        if an object can be\n   provisioned within a repository.  It provides a hint
        that allows a\n   client to anticipate the success or failure of provisioning
        an object\n   using the <create> command, as object-provisioning requirements
        are\n   ultimately a matter of server policy.\n   In addition to the standard
        EPP command elements, the <check> command\n   MUST contain a <contact:check>
        element that identifies the contact\n   namespace.  The <contact:check> element
        contains the following child\n   elements:\n   -  One or more <contact:id>
        elements that contain the server-unique\n      identifier of the contact objects
        to be queried.\n   Example <check> command:\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\"
        standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  C:  <command>\n   C:    <check>\n   C:      <contact:check\n   C:       xmlns:contact=\"urn:ietf:params:xml:ns:contact-1.0\">\n
        \  C:        <contact:id>sh8013</contact:id>\n   C:        <contact:id>sah8013</contact:id>\n
        \  C:        <contact:id>8013sah</contact:id>\n   C:      </contact:check>\n
        \  C:    </check>\n   C:    <clTRID>ABC-12345</clTRID>\n   C:  </command>\n
        \  C:</epp>\n   When a <check> command has been processed successfully, the
        EPP\n   <resData> element MUST contain a child <contact:chkData> element that\n
        \  identifies the contact namespace.  The <contact:chkData> element\n   contains
        one or more <contact:cd> elements that contain the following\n   child elements:\n
        \  -  A <contact:id> element that identifies the queried object.  This\n      element
        MUST contain an \"avail\" attribute whose value indicates\n      object availability
        (can it be provisioned or not) at the moment\n      the <check> command was
        completed.  A value of \"1\" or \"true\" means\n      that the object can
        be provisioned.  A value of \"0\" or \"false\"\n      means that the object
        cannot be provisioned.\n   -  An OPTIONAL <contact:reason> element that MAY
        be provided when an\n      object cannot be provisioned.  If present, this
        element contains\n      server-specific text to help explain why the object
        cannot be\n      provisioned.  This text MUST be represented in the response\n
        \     language previously negotiated with the client; an OPTIONAL \"lang\"\n
        \     attribute MAY be present to identify the language if the\n      negotiated
        value is something other than the default value of \"en\"\n      (English).\n
        \  Example <check> response:\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\"
        standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  S:  <response>\n   S:    <result code=\"1000\">\n   S:      <msg>Command
        completed successfully</msg>\n   S:    </result>\n   S:    <resData>\n   S:
        \     <contact:chkData\n   S:       xmlns:contact=\"urn:ietf:params:xml:ns:contact-1.0\">\n
        \  S:        <contact:cd>\n   S:          <contact:id avail=\"1\">sh8013</contact:id>\n
        \  S:        </contact:cd>\n   S:        <contact:cd>\n   S:          <contact:id
        avail=\"0\">sah8013</contact:id>\n   S:          <contact:reason>In use</contact:reason>\n
        \  S:        </contact:cd>\n   S:        <contact:cd>\n   S:          <contact:id
        avail=\"1\">8013sah</contact:id>\n   S:        </contact:cd>\n   S:      </contact:chkData>\n
        \  S:    </resData>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n
        \  S:      <svTRID>54322-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n
        \  S:</epp>\n   An EPP error response MUST be returned if a <check> command
        cannot be\n   processed for any reason.\n"
      title: 3.1.1.  EPP <check> Command
    - contents:
      - "3.1.2.  EPP <info> Command\n   The EPP <info> command is used to retrieve
        information associated\n   with a contact object.  In addition to the standard
        EPP command\n   elements, the <info> command MUST contain a <contact:info>
        element\n   that identifies the contact namespace.  The <contact:info> element\n
        \  contains the following child elements:\n   -  A <contact:id> element that
        contains the server-unique identifier\n      of the contact object to be queried.\n
        \  -  An OPTIONAL <contact:authInfo> element that contains authorization\n
        \     information associated with the contact object.  If this element\n      is
        not provided or if the authorization information is invalid,\n      server
        policy determines if the command is rejected or if response\n      information
        will be returned to the client.\n   Example <info> command:\n   C:<?xml version=\"1.0\"
        encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  C:  <command>\n   C:    <info>\n   C:      <contact:info\n   C:       xmlns:contact=\"urn:ietf:params:xml:ns:contact-1.0\">\n
        \  C:        <contact:id>sh8013</contact:id>\n   C:        <contact:authInfo>\n
        \  C:          <contact:pw>2fooBAR</contact:pw>\n   C:        </contact:authInfo>\n
        \  C:      </contact:info>\n   C:    </info>\n   C:    <clTRID>ABC-12345</clTRID>\n
        \  C:  </command>\n   C:</epp>\n   When an <info> command has been processed
        successfully, the EPP\n   <resData> element MUST contain a child <contact:infData>
        element that\n   identifies the contact namespace.  The <contact:infData>
        element\n   contains the following child elements:\n   -  A <contact:id> element
        that contains the server-unique identifier\n      of the contact object.\n
        \  -  A <contact:roid> element that contains the Repository Object\n      IDentifier
        assigned to the contact object when the object was\n      created.\n   -  One
        or more <contact:status> elements that describe the status of\n      the contact
        object.\n   -  One or two <contact:postalInfo> elements that contain postal-\n
        \     address information.  Two elements are provided so that address\n      information
        can be provided in both internationalized and\n      localized forms; a \"type\"
        attribute is used to identify the two\n      forms.  If an internationalized
        form (type=\"int\") is provided,\n      element content MUST be represented
        in a subset of UTF-8 that can\n      be represented in the 7-bit US-ASCII
        character set.  If a\n      localized form (type=\"loc\") is provided, element
        content MAY be\n      represented in unrestricted UTF-8.  The <contact:postalInfo>\n
        \     element contains the following child elements:\n      -  A <contact:name>
        element that contains the name of the\n         individual or role represented
        by the contact.\n      -  An OPTIONAL <contact:org> element that contains
        the name of the\n         organization with which the contact is affiliated.\n
        \     -  A <contact:addr> element that contains address information\n         associated
        with the contact.  A <contact:addr> element contains\n         the following
        child elements:\n         -  One, two, or three OPTIONAL <contact:street>
        elements that\n            contain the contact's street address.\n         -
        \ A <contact:city> element that contains the contact's city.\n         -  An
        OPTIONAL <contact:sp> element that contains the contact's\n            state
        or province.\n         -  An OPTIONAL <contact:pc> element that contains the
        contact's\n            postal code.\n         -  A <contact:cc> element that
        contains the contact's country\n            code.\n   -  An OPTIONAL <contact:voice>
        element that contains the contact's\n      voice telephone number.\n   -  An
        OPTIONAL <contact:fax> element that contains the contact's\n      facsimile
        telephone number.\n   -  A <contact:email> element that contains the contact's
        email\n      address.\n   -  A <contact:clID> element that contains the identifier
        of the\n      sponsoring client.\n   -  A <contact:crID> element that contains
        the identifier of the\n      client that created the contact object.\n   -
        \ A <contact:crDate> element that contains the date and time of\n      contact-object
        creation.\n   -  A <contact:upID> element that contains the identifier of
        the\n      client that last updated the contact object.  This element MUST\n
        \     NOT be present if the contact has never been modified.\n   -  A <contact:upDate>
        element that contains the date and time of the\n      most recent contact-object
        modification.  This element MUST NOT be\n      present if the contact object
        has never been modified.\n   -  A <contact:trDate> element that contains the
        date and time of the\n      most recent successful contact-object transfer.
        \ This element MUST\n      NOT be provided if the contact object has never
        been transferred.\n   -  A <contact:authInfo> element that contains authorization\n
        \     information associated with the contact object.  This element MUST\n
        \     NOT be provided if the querying client is not the current\n      sponsoring
        client.\n   -  An OPTIONAL <contact:disclose> element that identifies elements\n
        \     that require exceptional server-operator handling to allow or\n      restrict
        disclosure to third parties.  See Section 2.9 for a\n      description of
        the child elements contained within the <contact:\n      disclose> element.\n
        \  Example <info> response for an authorized client:\n   S:<?xml version=\"1.0\"
        encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  S:  <response>\n   S:    <result code=\"1000\">\n   S:      <msg>Command
        completed successfully</msg>\n   S:    </result>\n   S:    <resData>\n   S:
        \     <contact:infData\n   S:       xmlns:contact=\"urn:ietf:params:xml:ns:contact-1.0\">\n
        \  S:        <contact:id>sh8013</contact:id>\n   S:        <contact:roid>SH8013-REP</contact:roid>\n
        \  S:        <contact:status s=\"linked\"/>\n   S:        <contact:status
        s=\"clientDeleteProhibited\"/>\n   S:        <contact:postalInfo type=\"int\">\n
        \  S:          <contact:name>John Doe</contact:name>\n   S:          <contact:org>Example
        Inc.</contact:org>\n   S:          <contact:addr>\n   S:            <contact:street>123
        Example Dr.</contact:street>\n   S:            <contact:street>Suite 100</contact:street>\n
        \  S:            <contact:city>Dulles</contact:city>\n   S:            <contact:sp>VA</contact:sp>\n
        \  S:            <contact:pc>20166-6503</contact:pc>\n   S:            <contact:cc>US</contact:cc>\n
        \  S:          </contact:addr>\n   S:        </contact:postalInfo>\n   S:
        \       <contact:voice x=\"1234\">+1.7035555555</contact:voice>\n   S:        <contact:fax>+1.7035555556</contact:fax>\n
        \  S:        <contact:email>jdoe@example.com</contact:email>\n   S:        <contact:clID>ClientY</contact:clID>\n
        \  S:        <contact:crID>ClientX</contact:crID>\n   S:        <contact:crDate>1999-04-03T22:00:00.0Z</contact:crDate>\n
        \  S:        <contact:upID>ClientX</contact:upID>\n   S:        <contact:upDate>1999-12-03T09:00:00.0Z</contact:upDate>\n
        \  S:        <contact:trDate>2000-04-08T09:00:00.0Z</contact:trDate>\n   S:
        \       <contact:authInfo>\n   S:          <contact:pw>2fooBAR</contact:pw>\n
        \  S:        </contact:authInfo>\n   S:        <contact:disclose flag=\"0\">\n
        \  S:          <contact:voice/>\n   S:          <contact:email/>\n   S:        </contact:disclose>\n
        \  S:      </contact:infData>\n   S:    </resData>\n   S:    <trID>\n   S:
        \     <clTRID>ABC-12345</clTRID>\n   S:      <svTRID>54322-XYZ</svTRID>\n
        \  S:    </trID>\n   S:  </response>\n   S:</epp>\n   An EPP error response
        MUST be returned if an <info> command cannot be\n   processed for any reason.\n"
      title: 3.1.2.  EPP <info> Command
    - contents:
      - "3.1.3.  EPP <transfer> Query Command\n   The EPP <transfer> command provides
        a query operation that allows a\n   client to determine the real-time status
        of pending and completed\n   transfer requests.  In addition to the standard
        EPP command elements,\n   the <transfer> command MUST contain an \"op\" attribute
        with value\n   \"query\", and a <contact:transfer> element that identifies
        the contact\n   namespace.  The <contact:transfer> element MUST contain the
        following\n   child elements:\n   -  A <contact:id> element that contains
        the server-unique identifier\n      of the contact object to be queried.\n
        \  -  An OPTIONAL <contact:authInfo> element that contains authorization\n
        \     information associated with the contact object.  If this element\n      is
        not provided or if the authorization information is invalid,\n      server
        policy determines if the command is rejected or if response\n      information
        will be returned to the client.\n   Example <transfer> query command:\n   C:<?xml
        version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  C:  <command>\n   C:    <transfer op=\"query\">\n   C:      <contact:transfer\n
        \  C:       xmlns:contact=\"urn:ietf:params:xml:ns:contact-1.0\">\n   C:        <contact:id>sh8013</contact:id>\n
        \  C:        <contact:authInfo>\n   C:          <contact:pw>2fooBAR</contact:pw>\n
        \  C:        </contact:authInfo>\n   C:      </contact:transfer>\n   C:    </transfer>\n
        \  C:    <clTRID>ABC-12345</clTRID>\n   C:  </command>\n   C:</epp>\n   When
        a <transfer> query command has been processed successfully, the\n   EPP <resData>
        element MUST contain a child <contact:trnData> element\n   that identifies
        the contact namespace.  The <contact:trnData> element\n   contains the following
        child elements:\n   -  A <contact:id> element that contains the server-unique
        identifier\n      for the queried contact.\n   -  A <contact:trStatus> element
        that contains the state of the most\n      recent transfer request.\n   -
        \ A <contact:reID> element that contains the identifier of the\n      client
        that requested the object transfer.\n   -  A <contact:reDate> element that
        contains the date and time that\n      the transfer was requested.\n   -  A
        <contact:acID> element that contains the identifier of the\n      client that
        SHOULD act upon a PENDING transfer request.  For all\n      other status types,
        the value identifies the client that took the\n      indicated action.\n   -
        \ A <contact:acDate> element that contains the date and time of a\n      required
        or completed response.  For a pending request, the value\n      identifies
        the date and time by which a response is required\n      before an automated
        response action SHOULD be taken by the server.\n      For all other status
        types, the value identifies the date and time\n      when the request was
        completed.\n   Example <transfer> query response:\n   S:<?xml version=\"1.0\"
        encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  S:  <response>\n   S:    <result code=\"1000\">\n   S:      <msg>Command
        completed successfully</msg>\n   S:    </result>\n   S:    <resData>\n   S:
        \     <contact:trnData\n   S:       xmlns:contact=\"urn:ietf:params:xml:ns:contact-1.0\">\n
        \  S:        <contact:id>sh8013</contact:id>\n   S:        <contact:trStatus>pending</contact:trStatus>\n
        \  S:        <contact:reID>ClientX</contact:reID>\n   S:        <contact:reDate>2000-06-06T22:00:00.0Z</contact:reDate>\n
        \  S:        <contact:acID>ClientY</contact:acID>\n   S:        <contact:acDate>2000-06-11T22:00:00.0Z</contact:acDate>\n
        \  S:      </contact:trnData>\n   S:    </resData>\n   S:    <trID>\n   S:
        \     <clTRID>ABC-12345</clTRID>\n   S:      <svTRID>54322-XYZ</svTRID>\n
        \  S:    </trID>\n   S:  </response>\n   S:</epp>\n   An EPP error response
        MUST be returned if a <transfer> query command\n   cannot be processed for
        any reason.\n"
      title: 3.1.3.  EPP <transfer> Query Command
    title: 3.1.  EPP Query Commands
  - contents:
    - "3.2.  EPP Transform Commands\n   EPP provides four commands to transform contact-object
      information:\n   <create> to create an instance of a contact object, <delete>
      to\n   delete an instance of a contact object, <transfer> to manage contact-\n
      \  object sponsorship changes, and <update> to change information\n   associated
      with a contact object.  This document does not define a\n   mapping for the
      EPP <renew> command.\n   Transform commands are typically processed and completed
      in real\n   time.  Server operators MAY receive and process transform commands\n
      \  but defer completing the requested action if human or third-party\n   review
      is required before the requested action can be completed.  In\n   such situations,
      the server MUST return a 1001 response code to the\n   client to note that the
      command has been received and processed but\n   that the requested action is
      pending.  The server MUST also manage\n   the status of the object that is the
      subject of the command to\n   reflect the initiation and completion of the requested
      action.  Once\n   the action has been completed, all clients involved in the\n
      \  transaction MUST be notified using a service message that the action\n   has
      been completed and that the status of the object has changed.\n   Other notification
      methods MAY be used in addition to the required\n   service message.\n   Server
      operators SHOULD confirm that a client is authorized to\n   perform a transform
      command on a given object.  Any attempt to\n   transform an object by an unauthorized
      client MUST be rejected, and\n   the server MUST return a 2201 response code
      to the client to note\n   that the client lacks privileges to execute the requested
      command.\n"
    - contents:
      - "3.2.1.  EPP <create> Command\n   The EPP <create> command provides a transform
        operation that allows a\n   client to create a contact object.  In addition
        to the standard EPP\n   command elements, the <create> command MUST contain
        a <contact:\n   create> element that identifies the contact namespace.  The
        <contact:\n   create> element contains the following child elements:\n   -
        \ A <contact:id> element that contains the desired server-unique\n      identifier
        for the contact to be created.\n   -  One or two <contact:postalInfo> elements
        that contain postal-\n      address information.  Two elements are provided
        so that address\n      information can be provided in both internationalized
        and\n      localized forms; a \"type\" attribute is used to identify the two\n
        \     forms.  If an internationalized form (type=\"int\") is provided,\n      element
        content MUST be represented in a subset of UTF-8 that can\n      be represented
        in the 7-bit US-ASCII character set.  If a\n      localized form (type=\"loc\")
        is provided, element content MAY be\n      represented in unrestricted UTF-8.
        \ The <contact:postalInfo>\n      element contains the following child elements:\n
        \     o  A <contact:name> element that contains the name of the\n         individual
        or role represented by the contact.\n      o  An OPTIONAL <contact:org> element
        that contains the name of the\n         organization with which the contact
        is affiliated.\n      o  A <contact:addr> element that contains address information\n
        \        associated with the contact.  A <contact:addr> element contains\n
        \        the following child elements:\n         *  One, two, or three OPTIONAL
        <contact:street> elements that\n            contain the contact's street address.\n
        \        *  A <contact:city> element that contains the contact's city.\n         *
        \ An OPTIONAL <contact:sp> element that contains the contact's\n            state
        or province.\n         *  An OPTIONAL <contact:pc> element that contains the
        contact's\n            postal code.\n         *  A <contact:cc> element that
        contains the contact's country\n            code.\n   -  An OPTIONAL <contact:voice>
        element that contains the contact's\n      voice telephone number.\n   -  An
        OPTIONAL <contact:fax> element that contains the contact's\n      facsimile
        telephone number.\n   -  A <contact:email> element that contains the contact's
        email\n      address.\n   -  A <contact:authInfo> element that contains authorization\n
        \     information to be associated with the contact object.  This\n      mapping
        includes a password-based authentication mechanism, but\n      the schema
        allows new mechanisms to be defined in new schemas.\n   -  An OPTIONAL <contact:disclose>
        element that allows a client to\n      identify elements that require exceptional
        server-operator\n      handling to allow or restrict disclosure to third parties.
        \ See\n      Section 2.9 for a description of the child elements contained\n
        \     within the <contact:disclose> element.\n   Example <create> command:\n
        \  C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp
        xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n   C:    <create>\n
        \  C:      <contact:create\n   C:       xmlns:contact=\"urn:ietf:params:xml:ns:contact-1.0\">\n
        \  C:        <contact:id>sh8013</contact:id>\n   C:        <contact:postalInfo
        type=\"int\">\n   C:          <contact:name>John Doe</contact:name>\n   C:
        \         <contact:org>Example Inc.</contact:org>\n   C:          <contact:addr>\n
        \  C:            <contact:street>123 Example Dr.</contact:street>\n   C:            <contact:street>Suite
        100</contact:street>\n   C:            <contact:city>Dulles</contact:city>\n
        \  C:            <contact:sp>VA</contact:sp>\n   C:            <contact:pc>20166-6503</contact:pc>\n
        \  C:            <contact:cc>US</contact:cc>\n   C:          </contact:addr>\n
        \  C:        </contact:postalInfo>\n   C:        <contact:voice x=\"1234\">+1.7035555555</contact:voice>\n
        \  C:        <contact:fax>+1.7035555556</contact:fax>\n   C:        <contact:email>jdoe@example.com</contact:email>\n
        \  C:        <contact:authInfo>\n   C:          <contact:pw>2fooBAR</contact:pw>\n
        \  C:        </contact:authInfo>\n   C:        <contact:disclose flag=\"0\">\n
        \  C:          <contact:voice/>\n   C:          <contact:email/>\n   C:        </contact:disclose>\n
        \  C:      </contact:create>\n   C:    </create>\n   C:    <clTRID>ABC-12345</clTRID>\n
        \  C:  </command>\n   C:</epp>\n   When a <create> command has been processed
        successfully, the EPP\n   <resData> element MUST contain a child <contact:creData>
        element that\n   identifies the contact namespace.  The <contact:creData>
        element\n   contains the following child elements:\n   -  A <contact:id> element
        that contains the server-unique identifier\n      for the created contact.\n
        \  -  A <contact:crDate> element that contains the date and time of\n      contact-object
        creation.\n   Example <create> response:\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\"
        standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  S:  <response>\n   S:    <result code=\"1000\">\n   S:      <msg>Command
        completed successfully</msg>\n   S:    </result>\n   S:    <resData>\n   S:
        \     <contact:creData\n   S:       xmlns:contact=\"urn:ietf:params:xml:ns:contact-1.0\">\n
        \  S:        <contact:id>sh8013</contact:id>\n   S:        <contact:crDate>1999-04-03T22:00:00.0Z</contact:crDate>\n
        \  S:      </contact:creData>\n   S:    </resData>\n   S:    <trID>\n   S:
        \     <clTRID>ABC-12345</clTRID>\n   S:      <svTRID>54321-XYZ</svTRID>\n
        \  S:    </trID>\n   S:  </response>\n   S:</epp>\n   An EPP error response
        MUST be returned if a <create> command cannot\n   be processed for any reason.\n"
      title: 3.2.1.  EPP <create> Command
    - contents:
      - "3.2.2.  EPP <delete> Command\n   The EPP <delete> command provides a transform
        operation that allows a\n   client to delete a contact object.  In addition
        to the standard EPP\n   command elements, the <delete> command MUST contain
        a <contact:\n   delete> element that identifies the contact namespace.  The
        <contact:\n   delete> element MUST contain the following child element:\n
        \  -  A <contact:id> element that contains the server-unique identifier\n
        \     of the contact object to be deleted.\n   A contact object SHOULD NOT
        be deleted if it is associated with other\n   known objects.  An associated
        contact SHOULD NOT be deleted until\n   associations with other known objects
        have been broken.  A server\n   SHOULD notify clients that object relationships
        exist by sending a\n   2305 error response code when a <delete> command is
        attempted and\n   fails due to existing object relationships.\n   Example
        <delete> command:\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n
        \  C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n   C:
        \   <delete>\n   C:      <contact:delete\n   C:       xmlns:contact=\"urn:ietf:params:xml:ns:contact-1.0\">\n
        \  C:        <contact:id>sh8013</contact:id>\n   C:      </contact:delete>\n
        \  C:    </delete>\n   C:    <clTRID>ABC-12345</clTRID>\n   C:  </command>\n
        \  C:</epp>\n   When a <delete> command has been processed successfully, a
        server\n   MUST respond with an EPP response with no <resData> element.\n
        \  Example <delete> response:\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\"
        standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  S:  <response>\n   S:    <result code=\"1000\">\n   S:      <msg>Command
        completed successfully</msg>\n   S:    </result>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n
        \  S:      <svTRID>54321-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n
        \  S:</epp>\n   An EPP error response MUST be returned if a <delete> command
        cannot\n   be processed for any reason.\n"
      title: 3.2.2.  EPP <delete> Command
    - contents:
      - "3.2.3.  EPP <renew> Command\n   Renewal semantics do not apply to contact
        objects, so there is no\n   mapping defined for the EPP <renew> command.\n"
      title: 3.2.3.  EPP <renew> Command
    - contents:
      - "3.2.4.  EPP <transfer> Command\n   The EPP <transfer> command provides a
        transform operation that allows\n   a client to manage requests to transfer
        the sponsorship of a contact\n   object.  In addition to the standard EPP
        command elements, the\n   <transfer> command MUST contain a <contact:transfer>
        element that\n   identifies the contact namespace.  The <contact:transfer>
        element\n   contains the following child elements:\n   -  A <contact:id> element
        that contains the server-unique identifier\n      of the contact object for
        which a transfer request is to be\n      created, approved, rejected, or cancelled.\n
        \  -  A <contact:authInfo> element that contains authorization\n      information
        associated with the contact object.\n   Every EPP <transfer> command MUST
        contain an \"op\" attribute that\n   identifies the transfer operation to
        be performed, as defined in\n   [RFC5730].\n   Example <transfer> request
        command:\n   C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n
        \  C:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n   C:
        \   <transfer op=\"request\">\n   C:      <contact:transfer\n   C:       xmlns:contact=\"urn:ietf:params:xml:ns:contact-1.0\">\n
        \  C:        <contact:id>sh8013</contact:id>\n   C:        <contact:authInfo>\n
        \  C:          <contact:pw>2fooBAR</contact:pw>\n   C:        </contact:authInfo>\n
        \  C:      </contact:transfer>\n   C:    </transfer>\n   C:    <clTRID>ABC-12345</clTRID>\n
        \  C:  </command>\n   C:</epp>\n   When a <transfer> command has been processed
        successfully, the EPP\n   <resData> element MUST contain a child <contact:trnData>
        element that\n   identifies the contact namespace.  The <contact:trnData>
        element\n   contains the same child elements defined for a <transfer> query\n
        \  response.\n   Example <transfer> response:\n   S:<?xml version=\"1.0\"
        encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  S:  <response>\n   S:    <result code=\"1001\">\n   S:      <msg>Command
        completed successfully; action pending</msg>\n   S:    </result>\n   S:    <resData>\n
        \  S:      <contact:trnData\n   S:       xmlns:contact=\"urn:ietf:params:xml:ns:contact-1.0\">\n
        \  S:        <contact:id>sh8013</contact:id>\n   S:        <contact:trStatus>pending</contact:trStatus>\n
        \  S:        <contact:reID>ClientX</contact:reID>\n   S:        <contact:reDate>2000-06-08T22:00:00.0Z</contact:reDate>\n
        \  S:        <contact:acID>ClientY</contact:acID>\n   S:        <contact:acDate>2000-06-13T22:00:00.0Z</contact:acDate>\n
        \  S:      </contact:trnData>\n   S:    </resData>\n   S:    <trID>\n   S:
        \     <clTRID>ABC-12345</clTRID>\n   S:      <svTRID>54322-XYZ</svTRID>\n
        \  S:    </trID>\n   S:  </response>\n   S:</epp>\n   An EPP error response
        MUST be returned if a <transfer> command cannot\n   be processed for any reason.\n"
      title: 3.2.4.  EPP <transfer> Command
    - contents:
      - "3.2.5.  EPP <update> Command\n   The EPP <update> command provides a transform
        operation that allows a\n   client to modify the attributes of a contact object.
        \ In addition to\n   the standard EPP command elements, the <update> command
        MUST contain\n   a <contact:update> element that identifies the contact namespace.\n
        \  The <contact:update> element contains the following child elements:\n   -
        \ A <contact:id> element that contains the server-unique identifier\n      of
        the contact object to be updated.\n   -  An OPTIONAL <contact:add> element
        that contains attribute values\n      to be added to the object.\n   -  An
        OPTIONAL <contact:rem> element that contains attribute values\n      to be
        removed from the object.\n   -  An OPTIONAL <contact:chg> element that contains
        object attribute\n      values to be changed.\n   At least one <contact:add>,
        <contact:rem>, or <contact:chg> element\n   MUST be provided if the command
        is not being extended.  All of these\n   elements MAY be omitted if an <update>
        extension is present.  The\n   <contact:add> and <contact:rem> elements contain
        the following child\n   elements:\n   -  One or more <contact:status> elements
        that contain status values\n      to be associated with or removed from the
        object.  When specifying\n      a value to be removed, only the attribute
        value is significant;\n      element text is not required to match a value
        for removal.\n   A <contact:chg> element contains the following OPTIONAL child\n
        \  elements.  At least one child element MUST be present:\n   -  One or two
        <contact:postalInfo> elements that contain postal-\n      address information.
        \ Two elements are provided so that address\n      information can be provided
        in both internationalized and\n      localized forms; a \"type\" attribute
        is used to identify the two\n      forms.  If an internationalized form (type=\"int\")
        is provided,\n      element content MUST be represented in a subset of UTF-8
        that can\n      be represented in the 7-bit US-ASCII character set.  If a\n
        \     localized form (type=\"loc\") is provided, element content MAY be\n
        \     represented in unrestricted UTF-8.  The <contact:postalInfo>\n      element
        contains the following OPTIONAL child elements:\n      o  A <contact:name>
        element that contains the name of the\n         individual or role represented
        by the contact.\n      o  A <contact:org> element that contains the name of
        the\n         organization with which the contact is affiliated.\n      o
        \ A <contact:addr> element that contains address information\n         associated
        with the contact.  A <contact:addr> element contains\n         the following
        child elements:\n         *  One, two, or three OPTIONAL <contact:street>
        elements that\n            contain the contact's street address.\n         *
        \ A <contact:city> element that contains the contact's city.\n         *  An
        OPTIONAL <contact:sp> element that contains the contact's\n            state
        or province.\n         *  An OPTIONAL <contact:pc> element that contains the
        contact's\n            postal code.\n         *  A <contact:cc> element that
        contains the contact's country\n            code.\n   -  A <contact:voice>
        element that contains the contact's voice\n      telephone number.\n   -  A
        <contact:fax> element that contains the contact's facsimile\n      telephone
        number.\n   -  A <contact:email> element that contains the contact's email\n
        \     address.\n   -  A <contact:authInfo> element that contains authorization\n
        \     information associated with the contact object.  This mapping\n      includes
        a password-based authentication mechanism, but the schema\n      allows new
        mechanisms to be defined in new schemas.\n   -  A <contact:disclose> element
        that allows a client to identify\n      elements that require exceptional
        server-operator handling to\n      allow or restrict disclosure to third parties.
        \ See Section 2.9\n      for a description of the child elements contained
        within the\n      <contact:disclose> element.\n   Example <update> command:\n
        \  C:<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n   C:<epp
        xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n   C:  <command>\n   C:    <update>\n
        \  C:      <contact:update\n   C:       xmlns:contact=\"urn:ietf:params:xml:ns:contact-1.0\">\n
        \  C:        <contact:id>sh8013</contact:id>\n   C:        <contact:add>\n
        \  C:          <contact:status s=\"clientDeleteProhibited\"/>\n   C:        </contact:add>\n
        \  C:        <contact:chg>\n   C:          <contact:postalInfo type=\"int\">\n
        \  C:            <contact:org/>\n   C:            <contact:addr>\n   C:              <contact:street>124
        Example Dr.</contact:street>\n   C:              <contact:street>Suite 200</contact:street>\n
        \  C:              <contact:city>Dulles</contact:city>\n   C:              <contact:sp>VA</contact:sp>\n
        \  C:              <contact:pc>20166-6503</contact:pc>\n   C:              <contact:cc>US</contact:cc>\n
        \  C:            </contact:addr>\n   C:          </contact:postalInfo>\n   C:
        \         <contact:voice>+1.7034444444</contact:voice>\n   C:          <contact:fax/>\n
        \  C:          <contact:authInfo>\n   C:            <contact:pw>2fooBAR</contact:pw>\n
        \  C:          </contact:authInfo>\n   C:          <contact:disclose flag=\"1\">\n
        \  C:            <contact:voice/>\n   C:            <contact:email/>\n   C:
        \         </contact:disclose>\n   C:        </contact:chg>\n   C:      </contact:update>\n
        \  C:    </update>\n   C:    <clTRID>ABC-12345</clTRID>\n   C:  </command>\n
        \  C:</epp>\n   When an <update> command has been processed successfully,
        a server\n   MUST respond with an EPP response with no <resData> element.\n
        \  Example <update> response:\n   S:<?xml version=\"1.0\" encoding=\"UTF-8\"
        standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
        \  S:  <response>\n   S:    <result code=\"1000\">\n   S:      <msg>Command
        completed successfully</msg>\n   S:    </result>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n
        \  S:      <svTRID>54321-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n
        \  S:</epp>\n   An EPP error response MUST be returned if an <update> command
        cannot\n   be processed for any reason.\n"
      title: 3.2.5.  EPP <update> Command
    title: 3.2.  EPP Transform Commands
  - contents:
    - "3.3.  Offline Review of Requested Actions\n   Commands are processed by a server
      in the order they are received\n   from a client.  Though an immediate response
      confirming receipt and\n   processing of the command is produced by the server,
      a server\n   operator MAY perform an offline review of requested transform\n
      \  commands before completing the requested action.  In such situations,\n   the
      response from the server MUST clearly note that the transform\n   command has
      been received and processed but that the requested action\n   is pending.  The
      status of the corresponding object MUST clearly\n   reflect processing of the
      pending action.  The server MUST notify the\n   client when offline processing
      of the action has been completed.\n   Examples describing a <create> command
      that requires offline review\n   are included here.  Note the result code and
      message returned in\n   response to the <create> command.\n   S:<?xml version=\"1.0\"
      encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
      \  S:  <response>\n   S:    <result code=\"1001\">\n   S:      <msg>Command
      completed successfully; action pending</msg>\n   S:    </result>\n   S:    <resData>\n
      \  S:      <contact:creData\n   S:       xmlns:contact=\"urn:ietf:params:xml:ns:contact-1.0\">\n
      \  S:        <contact:id>sh8013</contact:id>\n   S:        <contact:crDate>1999-04-03T22:00:00.0Z</contact:crDate>\n
      \  S:      </contact:creData>\n   S:    </resData>\n   S:    <trID>\n   S:      <clTRID>ABC-12345</clTRID>\n
      \  S:      <svTRID>54321-XYZ</svTRID>\n   S:    </trID>\n   S:  </response>\n
      \  S:</epp>\n   The status of the contact object after returning this response
      MUST\n   include \"pendingCreate\".  The server operator reviews the request\n
      \  offline and informs the client of the outcome of the review either by\n   queuing
      a service message for retrieval via the <poll> command or by\n   using an out-of-band
      mechanism to inform the client of the request.\n   The service message MUST
      contain text that describes the notification\n   in the child <msg> element
      of the response <msgQ> element.  In\n   addition, the EPP <resData> element
      MUST contain a child <contact:\n   panData> element that identifies the contact
      namespace.  The\n   <contact:panData> element contains the following child elements:\n
      \  -  A <contact:id> element that contains the server-unique identifier\n      of
      the contact object.  The <contact:id> element contains a\n      REQUIRED \"paResult\"
      attribute.  A positive boolean value indicates\n      that the request has been
      approved and completed.  A negative\n      boolean value indicates that the
      request has been denied and the\n      requested action has not been taken.\n
      \  -  A <contact:paTRID> element that contains the client transaction\n      identifier
      and server transaction identifier returned with the\n      original response
      to process the command.  The client transaction\n      identifier is OPTIONAL
      and will only be returned if the client\n      provided an identifier with the
      original <create> command.\n   -  A <contact:paDate> element that contains the
      date and time\n      describing when review of the requested action was completed.\n
      \  Example \"review completed\" service message:\n   S:<?xml version=\"1.0\"
      encoding=\"UTF-8\" standalone=\"no\"?>\n   S:<epp xmlns=\"urn:ietf:params:xml:ns:epp-1.0\">\n
      \  S:  <response>\n   S:    <result code=\"1301\">\n   S:      <msg>Command
      completed successfully; ack to dequeue</msg>\n   S:    </result>\n   S:    <msgQ
      count=\"5\" id=\"12345\">\n   S:      <qDate>1999-04-04T22:01:00.0Z</qDate>\n
      \  S:      <msg>Pending action completed successfully.</msg>\n   S:    </msgQ>\n
      \  S:    <resData>\n   S:      <contact:panData\n   S:       xmlns:contact=\"urn:ietf:params:xml:ns:contact-1.0\">\n
      \  S:        <contact:id paResult=\"1\">sh8013</contact:id>\n   S:        <contact:paTRID>\n
      \  S:          <clTRID>ABC-12345</clTRID>\n   S:          <svTRID>54321-XYZ</svTRID>\n
      \  S:        </contact:paTRID>\n   S:        <contact:paDate>1999-04-04T22:00:00.0Z</contact:paDate>\n
      \  S:      </contact:panData>\n   S:    </resData>\n   S:    <trID>\n   S:      <clTRID>BCD-23456</clTRID>\n
      \  S:      <svTRID>65432-WXY</svTRID>\n   S:    </trID>\n   S:  </response>\n
      \  S:</epp>\n"
    title: 3.3.  Offline Review of Requested Actions
  title: 3.  EPP Command Mapping
- contents:
  - "4.  Formal Syntax\n   An EPP object mapping is specified in XML Schema notation.
    \ The\n   formal syntax presented here is a complete schema representation of\n
    \  the object mapping suitable for automated validation of EPP XML\n   instances.
    \ The BEGIN and END tags are not part of the schema; they\n   are used to note
    the beginning and ending of the schema for URI\n   registration purposes.\n   Copyright
    (c) 2009 IETF Trust and the persons identified as authors\n   of the code.  All
    rights reserved.\n   Redistribution and use in source and binary forms, with or
    without\n   modification, are permitted provided that the following conditions\n
    \  are met:\n   o  Redistributions of source code must retain the above copyright\n
    \     notice, this list of conditions and the following disclaimer.\n   o  Redistributions
    in binary form must reproduce the above copyright\n      notice, this list of
    conditions and the following disclaimer in\n      the documentation and/or other
    materials provided with the\n      distribution.\n   o  Neither the name of Internet
    Society, IETF or IETF Trust, nor the\n      names of specific contributors, may
    be used to endorse or promote\n      products derived from this software without
    specific prior written\n      permission.\n   THIS SOFTWARE IS PROVIDED BY THE
    COPYRIGHT HOLDERS AND CONTRIBUTORS\n   \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    INCLUDING, BUT NOT\n   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND
    FITNESS FOR\n   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT\n
    \  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n   SPECIAL,
    EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n   LIMITED TO, PROCUREMENT
    OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n   DATA, OR PROFITS; OR BUSINESS
    INTERRUPTION) HOWEVER CAUSED AND ON ANY\n   THEORY OF LIABILITY, WHETHER IN CONTRACT,
    STRICT LIABILITY, OR TORT\n   (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY
    WAY OUT OF THE USE\n   OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
    SUCH DAMAGE.\n   BEGIN\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <schema
    targetNamespace=\"urn:ietf:params:xml:ns:contact-1.0\"\n          xmlns:contact=\"urn:ietf:params:xml:ns:contact-1.0\"\n
    \         xmlns:epp=\"urn:ietf:params:xml:ns:epp-1.0\"\n          xmlns:eppcom=\"urn:ietf:params:xml:ns:eppcom-1.0\"\n
    \         xmlns=\"http://www.w3.org/2001/XMLSchema\"\n          elementFormDefault=\"qualified\">\n
    \  <!--\n   Import common element types.\n   -->\n    <import namespace=\"urn:ietf:params:xml:ns:eppcom-1.0\"/>\n
    \   <import namespace=\"urn:ietf:params:xml:ns:epp-1.0\"/>\n    <annotation>\n
    \     <documentation>\n        Extensible Provisioning Protocol v1.0\n        contact
    provisioning schema.\n      </documentation>\n    </annotation>\n   <!--\n   Child
    elements found in EPP commands.\n   -->\n    <element name=\"check\" type=\"contact:mIDType\"/>\n
    \   <element name=\"create\" type=\"contact:createType\"/>\n    <element name=\"delete\"
    type=\"contact:sIDType\"/>\n    <element name=\"info\" type=\"contact:authIDType\"/>\n
    \   <element name=\"transfer\" type=\"contact:authIDType\"/>\n    <element name=\"update\"
    type=\"contact:updateType\"/>\n   <!--\n   Utility types.\n   -->\n    <simpleType
    name=\"ccType\">\n      <restriction base=\"token\">\n        <length value=\"2\"/>\n
    \     </restriction>\n    </simpleType>\n    <complexType name=\"e164Type\">\n
    \     <simpleContent>\n        <extension base=\"contact:e164StringType\">\n          <attribute
    name=\"x\" type=\"token\"/>\n        </extension>\n      </simpleContent>\n    </complexType>\n
    \   <simpleType name=\"e164StringType\">\n      <restriction base=\"token\">\n
    \       <pattern value=\"(\\+[0-9]{1,3}\\.[0-9]{1,14})?\"/>\n        <maxLength
    value=\"17\"/>\n      </restriction>\n    </simpleType>\n    <simpleType name=\"pcType\">\n
    \     <restriction base=\"token\">\n        <maxLength value=\"16\"/>\n      </restriction>\n
    \   </simpleType>\n    <simpleType name=\"postalLineType\">\n       <restriction
    base=\"normalizedString\">\n         <minLength value=\"1\"/>\n         <maxLength
    value=\"255\"/>\n       </restriction>\n    </simpleType>\n    <simpleType name=\"optPostalLineType\">\n
    \      <restriction base=\"normalizedString\">\n         <maxLength value=\"255\"/>\n
    \      </restriction>\n    </simpleType>\n   <!--\n   Child elements of the <create>
    command.\n   -->\n    <complexType name=\"createType\">\n      <sequence>\n        <element
    name=\"id\" type=\"eppcom:clIDType\"/>\n        <element name=\"postalInfo\" type=\"contact:postalInfoType\"\n
    \        maxOccurs=\"2\"/>\n        <element name=\"voice\" type=\"contact:e164Type\"\n
    \        minOccurs=\"0\"/>\n        <element name=\"fax\" type=\"contact:e164Type\"\n
    \        minOccurs=\"0\"/>\n        <element name=\"email\" type=\"eppcom:minTokenType\"/>\n
    \       <element name=\"authInfo\" type=\"contact:authInfoType\"/>\n        <element
    name=\"disclose\" type=\"contact:discloseType\"\n         minOccurs=\"0\"/>\n
    \     </sequence>\n    </complexType>\n    <complexType name=\"postalInfoType\">\n
    \     <sequence>\n        <element name=\"name\" type=\"contact:postalLineType\"/>\n
    \       <element name=\"org\" type=\"contact:optPostalLineType\"\n         minOccurs=\"0\"/>\n
    \       <element name=\"addr\" type=\"contact:addrType\"/>\n      </sequence>\n
    \     <attribute name=\"type\" type=\"contact:postalInfoEnumType\"\n       use=\"required\"/>\n
    \   </complexType>\n    <simpleType name=\"postalInfoEnumType\">\n      <restriction
    base=\"token\">\n        <enumeration value=\"loc\"/>\n        <enumeration value=\"int\"/>\n
    \     </restriction>\n    </simpleType>\n    <complexType name=\"addrType\">\n
    \     <sequence>\n        <element name=\"street\" type=\"contact:optPostalLineType\"\n
    \        minOccurs=\"0\" maxOccurs=\"3\"/>\n        <element name=\"city\" type=\"contact:postalLineType\"/>\n
    \       <element name=\"sp\" type=\"contact:optPostalLineType\"\n         minOccurs=\"0\"/>\n
    \       <element name=\"pc\" type=\"contact:pcType\"\n         minOccurs=\"0\"/>\n
    \       <element name=\"cc\" type=\"contact:ccType\"/>\n      </sequence>\n    </complexType>\n
    \   <complexType name=\"authInfoType\">\n      <choice>\n        <element name=\"pw\"
    type=\"eppcom:pwAuthInfoType\"/>\n        <element name=\"ext\" type=\"eppcom:extAuthInfoType\"/>\n
    \     </choice>\n    </complexType>\n    <complexType name=\"discloseType\">\n
    \     <sequence>\n        <element name=\"name\" type=\"contact:intLocType\"\n
    \        minOccurs=\"0\" maxOccurs=\"2\"/>\n        <element name=\"org\" type=\"contact:intLocType\"\n
    \        minOccurs=\"0\" maxOccurs=\"2\"/>\n        <element name=\"addr\" type=\"contact:intLocType\"\n
    \        minOccurs=\"0\" maxOccurs=\"2\"/>\n        <element name=\"voice\" minOccurs=\"0\"/>\n
    \       <element name=\"fax\" minOccurs=\"0\"/>\n        <element name=\"email\"
    minOccurs=\"0\"/>\n      </sequence>\n      <attribute name=\"flag\" type=\"boolean\"
    use=\"required\"/>\n    </complexType>\n    <complexType name=\"intLocType\">\n
    \     <attribute name=\"type\" type=\"contact:postalInfoEnumType\"\n       use=\"required\"/>\n
    \   </complexType>\n   <!--\n   Child element of commands that require only an
    identifier.\n   -->\n    <complexType name=\"sIDType\">\n      <sequence>\n        <element
    name=\"id\" type=\"eppcom:clIDType\"/>\n      </sequence>\n    </complexType>\n
    \  <!--\n   Child element of commands that accept multiple identifiers.\n   -->\n
    \   <complexType name=\"mIDType\">\n      <sequence>\n        <element name=\"id\"
    type=\"eppcom:clIDType\"\n         maxOccurs=\"unbounded\"/>\n      </sequence>\n
    \   </complexType>\n   <!--\n   Child elements of the <info> and <transfer> commands.\n
    \  -->\n    <complexType name=\"authIDType\">\n      <sequence>\n        <element
    name=\"id\" type=\"eppcom:clIDType\"/>\n        <element name=\"authInfo\" type=\"contact:authInfoType\"\n
    \        minOccurs=\"0\"/>\n      </sequence>\n    </complexType>\n   <!--\n   Child
    elements of the <update> command.\n   -->\n    <complexType name=\"updateType\">\n
    \     <sequence>\n        <element name=\"id\" type=\"eppcom:clIDType\"/>\n        <element
    name=\"add\" type=\"contact:addRemType\"\n         minOccurs=\"0\"/>\n        <element
    name=\"rem\" type=\"contact:addRemType\"\n         minOccurs=\"0\"/>\n        <element
    name=\"chg\" type=\"contact:chgType\"\n         minOccurs=\"0\"/>\n      </sequence>\n
    \   </complexType>\n   <!--\n   Data elements that can be added or removed.\n
    \  -->\n    <complexType name=\"addRemType\">\n      <sequence>\n        <element
    name=\"status\" type=\"contact:statusType\"\n         maxOccurs=\"7\"/>\n      </sequence>\n
    \   </complexType>\n   <!--\n   Data elements that can be changed.\n   -->\n    <complexType
    name=\"chgType\">\n      <sequence>\n        <element name=\"postalInfo\" type=\"contact:chgPostalInfoType\"\n
    \        minOccurs=\"0\" maxOccurs=\"2\"/>\n        <element name=\"voice\" type=\"contact:e164Type\"\n
    \        minOccurs=\"0\"/>\n        <element name=\"fax\" type=\"contact:e164Type\"\n
    \        minOccurs=\"0\"/>\n        <element name=\"email\" type=\"eppcom:minTokenType\"\n
    \        minOccurs=\"0\"/>\n        <element name=\"authInfo\" type=\"contact:authInfoType\"\n
    \        minOccurs=\"0\"/>\n        <element name=\"disclose\" type=\"contact:discloseType\"\n
    \        minOccurs=\"0\"/>\n      </sequence>\n    </complexType>\n    <complexType
    name=\"chgPostalInfoType\">\n      <sequence>\n        <element name=\"name\"
    type=\"contact:postalLineType\"\n         minOccurs=\"0\"/>\n        <element
    name=\"org\" type=\"contact:optPostalLineType\"\n         minOccurs=\"0\"/>\n
    \       <element name=\"addr\" type=\"contact:addrType\"\n         minOccurs=\"0\"/>\n
    \     </sequence>\n      <attribute name=\"type\" type=\"contact:postalInfoEnumType\"\n
    \      use=\"required\"/>\n    </complexType>\n   <!--\n   Child response elements.\n
    \  -->\n    <element name=\"chkData\" type=\"contact:chkDataType\"/>\n    <element
    name=\"creData\" type=\"contact:creDataType\"/>\n    <element name=\"infData\"
    type=\"contact:infDataType\"/>\n    <element name=\"panData\" type=\"contact:panDataType\"/>\n
    \   <element name=\"trnData\" type=\"contact:trnDataType\"/>\n   <!--\n   <check>
    response elements.\n   -->\n    <complexType name=\"chkDataType\">\n      <sequence>\n
    \       <element name=\"cd\" type=\"contact:checkType\"\n         maxOccurs=\"unbounded\"/>\n
    \     </sequence>\n    </complexType>\n    <complexType name=\"checkType\">\n
    \     <sequence>\n        <element name=\"id\" type=\"contact:checkIDType\"/>\n
    \       <element name=\"reason\" type=\"eppcom:reasonType\"\n         minOccurs=\"0\"/>\n
    \     </sequence>\n    </complexType>\n    <complexType name=\"checkIDType\">\n
    \     <simpleContent>\n        <extension base=\"eppcom:clIDType\">\n          <attribute
    name=\"avail\" type=\"boolean\"\n           use=\"required\"/>\n        </extension>\n
    \     </simpleContent>\n    </complexType>\n   <!--\n   <create> response elements.\n
    \  -->\n    <complexType name=\"creDataType\">\n      <sequence>\n        <element
    name=\"id\" type=\"eppcom:clIDType\"/>\n        <element name=\"crDate\" type=\"dateTime\"/>\n
    \     </sequence>\n    </complexType>\n   <!--\n   <info> response elements.\n
    \  -->\n    <complexType name=\"infDataType\">\n      <sequence>\n        <element
    name=\"id\" type=\"eppcom:clIDType\"/>\n        <element name=\"roid\" type=\"eppcom:roidType\"/>\n
    \       <element name=\"status\" type=\"contact:statusType\"\n         maxOccurs=\"7\"/>\n
    \       <element name=\"postalInfo\" type=\"contact:postalInfoType\"\n         maxOccurs=\"2\"/>\n
    \       <element name=\"voice\" type=\"contact:e164Type\"\n         minOccurs=\"0\"/>\n
    \       <element name=\"fax\" type=\"contact:e164Type\"\n         minOccurs=\"0\"/>\n
    \       <element name=\"email\" type=\"eppcom:minTokenType\"/>\n        <element
    name=\"clID\" type=\"eppcom:clIDType\"/>\n        <element name=\"crID\" type=\"eppcom:clIDType\"/>\n
    \       <element name=\"crDate\" type=\"dateTime\"/>\n        <element name=\"upID\"
    type=\"eppcom:clIDType\"\n         minOccurs=\"0\"/>\n        <element name=\"upDate\"
    type=\"dateTime\"\n         minOccurs=\"0\"/>\n        <element name=\"trDate\"
    type=\"dateTime\"\n         minOccurs=\"0\"/>\n        <element name=\"authInfo\"
    type=\"contact:authInfoType\"\n         minOccurs=\"0\"/>\n        <element name=\"disclose\"
    type=\"contact:discloseType\"\n         minOccurs=\"0\"/>\n      </sequence>\n
    \   </complexType>\n   <!--\n   Status is a combination of attributes and an optional
    human-readable\n   message that may be expressed in languages other than English.\n
    \  -->\n    <complexType name=\"statusType\">\n      <simpleContent>\n        <extension
    base=\"normalizedString\">\n          <attribute name=\"s\" type=\"contact:statusValueType\"\n
    \          use=\"required\"/>\n          <attribute name=\"lang\" type=\"language\"\n
    \          default=\"en\"/>\n        </extension>\n      </simpleContent>\n    </complexType>\n
    \   <simpleType name=\"statusValueType\">\n      <restriction base=\"token\">\n
    \       <enumeration value=\"clientDeleteProhibited\"/>\n        <enumeration
    value=\"clientTransferProhibited\"/>\n        <enumeration value=\"clientUpdateProhibited\"/>\n
    \       <enumeration value=\"linked\"/>\n        <enumeration value=\"ok\"/>\n
    \       <enumeration value=\"pendingCreate\"/>\n        <enumeration value=\"pendingDelete\"/>\n
    \       <enumeration value=\"pendingTransfer\"/>\n        <enumeration value=\"pendingUpdate\"/>\n
    \       <enumeration value=\"serverDeleteProhibited\"/>\n        <enumeration
    value=\"serverTransferProhibited\"/>\n        <enumeration value=\"serverUpdateProhibited\"/>\n
    \     </restriction>\n    </simpleType>\n   <!--\n   Pending action notification
    response elements.\n   -->\n    <complexType name=\"panDataType\">\n      <sequence>\n
    \       <element name=\"id\" type=\"contact:paCLIDType\"/>\n        <element name=\"paTRID\"
    type=\"epp:trIDType\"/>\n        <element name=\"paDate\" type=\"dateTime\"/>\n
    \     </sequence>\n    </complexType>\n    <complexType name=\"paCLIDType\">\n
    \     <simpleContent>\n        <extension base=\"eppcom:clIDType\">\n          <attribute
    name=\"paResult\" type=\"boolean\"\n           use=\"required\"/>\n        </extension>\n
    \     </simpleContent>\n    </complexType>\n   <!--\n   <transfer> response elements.\n
    \  -->\n    <complexType name=\"trnDataType\">\n      <sequence>\n        <element
    name=\"id\" type=\"eppcom:clIDType\"/>\n        <element name=\"trStatus\" type=\"eppcom:trStatusType\"/>\n
    \       <element name=\"reID\" type=\"eppcom:clIDType\"/>\n        <element name=\"reDate\"
    type=\"dateTime\"/>\n        <element name=\"acID\" type=\"eppcom:clIDType\"/>\n
    \       <element name=\"acDate\" type=\"dateTime\"/>\n      </sequence>\n    </complexType>\n
    \  <!--\n   End of schema.\n   -->\n   </schema>\n   END\n"
  title: 4.  Formal Syntax
- contents:
  - "5.  Internationalization Considerations\n   EPP is represented in XML, which
    provides native support for encoding\n   information using the Unicode character
    set and its more compact\n   representations including UTF-8.  Conformant XML
    processors recognize\n   both UTF-8 and UTF-16 [RFC2781].  Though XML includes
    provisions to\n   identify and use other character encodings through use of an\n
    \  \"encoding\" attribute in an <?xml?> declaration, use of UTF-8 is\n   RECOMMENDED
    in environments where parser encoding support\n   incompatibility exists.\n   All
    date-time values presented via EPP MUST be expressed in Universal\n   Coordinated
    Time using the Gregorian calendar.  The XML Schema allows\n   use of time zone
    identifiers to indicate offsets from the zero\n   meridian, but this option MUST
    NOT be used with EPP.  The extended\n   date-time form using upper case \"T\"
    and \"Z\" characters defined in\n   [W3C.REC-xmlschema-2-20041028] MUST be used
    to represent date-time\n   values, as the XML Schema does not support truncated
    date-time forms\n   or lower case \"T\" and \"Z\" characters.\n   Humans, organizations,
    and other entities often need to represent\n   social information in both a commonly
    understood character set and a\n   locally optimized character set.  This specification
    provides\n   features allowing representation of social information in both a\n
    \  subset of UTF-8 for broad readability and unrestricted UTF-8 for\n   local
    optimization.\n"
  title: 5.  Internationalization Considerations
- contents:
  - "6.  IANA Considerations\n   This document uses URNs to describe XML namespaces
    and XML schemas\n   conforming to a registry mechanism described in [RFC3688].
    \ Two URI\n   assignments have been registered by the IANA.\n   Registration request
    for the contact namespace:\n      URI: urn:ietf:params:xml:ns:contact-1.0\n      Registrant
    Contact: See the \"Author's Address\" section of this\n      document.\n      XML:
    None.  Namespace URIs do not represent an XML specification.\n   Registration
    request for the contact XML schema:\n      URI: urn:ietf:params:xml:schema:contact-1.0\n
    \     Registrant Contact: See the \"Author's Address\" section of this\n      document.\n
    \     XML: See the \"Formal Syntax\" section of this document.\n"
  title: 6.  IANA Considerations
- contents:
  - "7.  Security Considerations\n   Authorization information as described in Section
    2.8 is REQUIRED to\n   create a contact object.  This information is used in some
    query and\n   transfer operations as an additional means of determining client\n
    \  authorization to perform the command.  Failure to protect\n   authorization
    information from inadvertent disclosure can result in\n   unauthorized transfer
    operations and unauthorized information\n   release.  Both client and server MUST
    ensure that authorization\n   information is stored and exchanged with high-grade
    encryption\n   mechanisms to provide privacy services.\n   The object mapping
    described in this document does not provide any\n   other security services or
    introduce any additional considerations\n   beyond those described by [RFC5730]
    or those caused by the protocol\n   layers used by EPP.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  Acknowledgements\n   RFC 3733 is a product of the PROVREG working group,
    which suggested\n   improvements and provided many invaluable comments.  The author\n
    \  wishes to acknowledge the efforts of WG chairs Edward Lewis and Jaap\n   Akkerhuis
    for their process and editorial contributions.  RFC 4933\n   and this document
    are individual submissions, based on the work done\n   in RFC 3733.\n   Specific
    suggestions that have been incorporated into this document\n   were provided by
    Chris Bason, Eric Brunner-Williams, Jordyn Buchanan,\n   Robert Burbidge, Dave
    Crocker, Ayesha Damaraju, Anthony Eden, Sheer\n   El-Showk, Dipankar Ghosh, Klaus
    Malorny, Dan Manley, Michael\n   Mealling, Patrick Mevzek, Asbjorn Steira, and
    Rick Wesson.\n"
  title: 8.  Acknowledgements
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [ISO3166-1]\n              International Organization
      for Standardization, \"Codes for\n              the representation of names
      of countries and their\n              subdivisions -- Part 1: Country codes\",
      ISO Standard 3166,\n              November 2006.\n   [ITU.E164.2005]\n              International
      Telecommunication Union, \"The international\n              public telecommunication
      numbering plan\", ITU-\n              T Recommendation E.164, February 2005.\n
      \  [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC3629]  Yergeau, F., \"UTF-8,
      a transformation format of ISO\n              10646\", STD 63, RFC 3629, November
      2003.\n   [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n
      \             January 2004.\n   [RFC5322]  Resnick, P., Ed., \"Internet Message
      Format\", RFC 5322,\n              October 2008.\n   [RFC5730]  Hollenbeck,
      S., \"Extensible Provisioning Protocol (EPP)\",\n              STD 69, RFC 5730,
      August 2009.\n   [W3C.REC-xml-20040204]\n              Sperberg-McQueen, C.,
      Maler, E., Yergeau, F., Paoli, J.,\n              and T. Bray, \"Extensible
      Markup Language (XML) 1.0 (Third\n              Edition)\", World Wide Web Consortium
      FirstEdition REC-xml-\n              20040204, February 2004,\n              <http://www.w3.org/TR/2004/REC-xml-20040204>.\n
      \  [W3C.REC-xmlschema-1-20041028]\n              Maloney, M., Thompson, H.,
      Mendelsohn, N., and D. Beech,\n              \"XML Schema Part 1: Structures
      Second Edition\", World Wide\n              Web Consortium Recommendation REC-xmlschema-1-20041028,\n
      \             October 2004,\n              <http://www.w3.org/TR/2004/REC-xmlschema-1-20041028>.\n
      \  [W3C.REC-xmlschema-2-20041028]\n              Malhotra, A. and P. Biron,
      \"XML Schema Part 2: Datatypes\n              Second Edition\", World Wide Web
      Consortium\n              Recommendation REC-xmlschema-2-20041028, October 2004,\n
      \             <http://www.w3.org/TR/2004/REC-xmlschema-2-20041028>.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [RFC2781]  Hoffman, P. and F. Yergeau, \"UTF-16,
      an encoding of ISO\n              10646\", RFC 2781, February 2000.\n   [RFC4933]
      \ Hollenbeck, S., \"Extensible Provisioning Protocol (EPP)\n              Contact
      Mapping\", RFC 4933, May 2007.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Appendix A.  Changes from RFC 4933\n   1.   Changed \"This document obsoletes
    RFC 3733\" to \"This document\n        obsoletes RFC 4933\".\n   2.   Replaced
    references to RFC 0822 with references to 5322.\n   3.   Replaced references to
    RFC 3733 with references to 4933.\n   4.   Replaced references to RFC 4930 with
    references to 5730.\n   5.   Updated reference to ISO 3166-1.\n   6.   Removed
    pendingRenew status from Section 2.2 because this\n        document does not define
    a mapping for the EPP <renew> command.\n   7.   Modified text in Section 3.2.2
    to include 2305 response code.\n   8.   Updated Section 5.\n   9.   Added \"Other
    notification methods MAY be used in addition to the\n        required service
    message\" in Section 3.2.\n   10.  Added 2201 response code text in Section 3.2.\n
    \  11.  Added BSD license text to XML schema section.\n"
  title: Appendix A.  Changes from RFC 4933
- contents:
  - "Author's Address\n   Scott Hollenbeck\n   VeriSign, Inc.\n   21345 Ridgetop Circle\n
    \  Dulles, VA  20166-6503\n   US\n   EMail: shollenbeck@verisign.com\n"
  title: Author's Address
