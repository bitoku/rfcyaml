- title: __initial_text__
  contents:
  - '                Additional Master Secret Inputs for TLS

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes a mechanism for using additional master\n\
    \   secret inputs with Transport Layer Security (TLS) and Datagram TLS\n   (DTLS).\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for examination, experimental implementation, and\n   evaluation.\n\
    \   This document defines an Experimental Protocol for the Internet\n   community.\
    \  This document is a product of the Internet Engineering\n   Task Force (IETF).\
    \  It represents the consensus of the IETF\n   community.  It has received public\
    \ review and has been approved for\n   publication by the Internet Engineering\
    \ Steering Group (IESG).  Not\n   all documents approved by the IESG are a candidate\
    \ for any level of\n   Internet Standard; see Section 2 of RFC 5741.\n   Information\
    \ about the current status of this document, any errata,\n   and how to provide\
    \ feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6358.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Some TLS 1.2 [RFC5246] and DTLS 1.2 [RFC6347] extensions\
    \ want to mix\n   particular data into the calculation of the master secret. \
    \ This\n   mixing creates a cryptographic binding of the added material directly\n\
    \   into the secret that is used to protect the TLS session.  For\n   example,\
    \ some systems want to be sure that there is sufficient\n   randomness in the\
    \ TLS master secret, and this can be accomplished by\n   adding it directly to\
    \ the master secret calculations.\n   This document describes a framework for\
    \ TLS and DTLS extensions to\n   meet these requirements.  In an extension that\
    \ uses this framework, a\n   client and server provide data in the handshake using\
    \ normal TLS\n   extensions, and then this data is combined with the ClientHello\
    \ and\n   ServerHello random values during the derivation of the master_secret.\n\
    \   Extensions that specify data to be added to the master secret are\n   called\
    \ \"extensions with master secret input\".  An extension with\n   master secret\
    \ input must specify the additional input that comes from\n   the client and/or\
    \ the server.  Note that the term \"and/or\" is used\n   here because the definition\
    \ of the extension might cause input to the\n   master secret to come from only\
    \ one of the participants.\n   Note that extensions that do not specify that they\
    \ are extensions\n   with master secret input cannot be extensions with master\
    \ secret\n   input.  That is, every extension that does not call itself an\n \
    \  extension with master secret input is treated just like a normal\n   extension.\
    \  Also note that this document only describes a framework;\n   if an extension\
    \ uses this framework, and a client and server both\n   implement the extension,\
    \ no signaling about the use of master secret\n   input is needed: that comes\
    \ as part of the extension definition\n   itself.\n   Use of one or more of these\
    \ extensions changes the way that the\n   master secret is calculated in TLS and\
    \ DTLS.  That is, if the\n   handshake has no extensions, or only extensions that\
    \ are not\n   extensions with master secret input, the master secret calculation\
    \ is\n   unchanged.\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Master Secret Calculation Modifications for TLS and DTLS
  contents:
  - "2.  Master Secret Calculation Modifications for TLS and DTLS\n   When an extension\
    \ with master secret input is present in the\n   handshake, the additional master\
    \ secret input values MUST be mixed\n   into the pseudorandom function (PRF) calculation\
    \ along with the\n   client and server random values during the computation of\
    \ the master\n   secret.  For the calculation of the master secret, the extensions\n\
    \   MUST be sorted by extension type order.  Note that TLS 1.2 specifies\n   that\
    \ there can only be one extension per type, and the extensions can\n   appear\
    \ in mixed order.\n   Each extension with master secret input adds its own specified\
    \ input,\n   called \"additional_ms_input_1\" for the extension with master secret\n\
    \   input that has the lowest type number, \"additional_ms_input_2\" for\n   the\
    \ extension with master secret input with the second lowest type\n   number, and\
    \ so on.\n   The calculation of the master secret becomes:\n      master_secret\
    \ = PRF(pre_master_secret, \"master secret\",\n                          ClientHello.random\
    \ +\n                          ClientHello.additional_ms_input_1 +\n         \
    \                 ClientHello.additional_ms_input_2 +\n                      \
    \    . . .\n                          ClientHello.additional_ms_input_N +\n  \
    \                        ServerHello.random +\n                          ServerHello.additional_ms_input_1\
    \ +\n                          ServerHello.additional_ms_input_2 +\n         \
    \                 . . .\n                          ServerHello.additional_ms_input_N\
    \ +\n                          )[0..47];\n   Using the specified order of the\
    \ additional_ms_input_n fields in the\n   master_secret is required for interoperability.\
    \  Otherwise, a server\n   and a client would not know how to unambiguously calculate\
    \ the same\n   master_secret.\n"
- title: 3.  Security Considerations
  contents:
  - "3.  Security Considerations\n   This modification to TLS and DTLS increases the\
    \ amount of data that\n   an attacker can inject into the master secret calculation.\
    \  This\n   potentially would allow an attacker who had partially compromised\
    \ the\n   inputs to the master secret calculation greater scope for influencing\n\
    \   the output.  Hash-based PRFs like the one used in TLS master secret\n   calculations\
    \ are designed to be fairly indifferent to the input size.\n   The additional\
    \ master secret input may have no entropy; in fact, it\n   might be completely\
    \ predictable to an attacker.  TLS is designed to\n   function correctly even\
    \ when the PRF used in the master secret\n   calculation has a great deal of predictable\
    \ material because the PRF\n   is used to generate distinct keying material for\
    \ each connection.\n   Thus, even in the face of completely predictable additional\
    \ master\n   secret input values, no harm is done to the resulting PRF output.\n\
    \   When there is entropy in these values, that entropy is reflected in\n   the\
    \ PRF output.\n"
- title: 4.  Acknowledgments
  contents:
  - "4.  Acknowledgments\n   Much of the text in this document is derived from text\
    \ written by\n   Eric Rescorla, Margaret Salter, and Jerry Solinas.\n"
- title: 5.  Normative References
  contents:
  - "5.  Normative References\n   [RFC2119]   Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC5246]   Dierks, T. and E. Rescorla, \"The Transport Layer Security\n\
    \               (TLS) Protocol Version 1.2\", RFC 5246, August 2008.\n   [RFC6347]\
    \   Rescorla, E. and N. Modadugu, \"Datagram Transport Layer\n               Security\
    \ version 1.2\", RFC 6347, January 2012.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Paul Hoffman\n   VPN Consortium\n   EMail: paul.hoffman@vpnc.org\n"
