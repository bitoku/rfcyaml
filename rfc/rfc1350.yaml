- contents:
  - '                     THE TFTP PROTOCOL (REVISION 2)

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This RFC specifies an IAB standards track protocol for
    the Internet\n   community, and requests discussion and suggestions for improvements.\n
    \  Please refer to the current edition of the \"IAB Official Protocol\n   Standards\"
    for the standardization state and status of this protocol.\n   Distribution of
    this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Summary\n   TFTP is a very simple protocol used to transfer files.  It is from\n
    \  this that its name comes, Trivial File Transfer Protocol or TFTP.\n   Each
    nonterminal packet is acknowledged separately.  This document\n   describes the
    protocol and its types of packets.  The document also\n   explains the reasons
    behind some of the design decisions.\n"
  title: Summary
- contents:
  - "Acknowlegements\n   The protocol was originally designed by Noel Chiappa, and
    was\n   redesigned by him, Bob Baldwin and Dave Clark, with comments from\n   Steve
    Szymanski.  The current revision of the document includes\n   modifications stemming
    from discussions with and suggestions from\n   Larry Allen, Noel Chiappa, Dave
    Clark, Geoff Cooper, Mike Greenwald,\n   Liza Martin, David Reed, Craig Milo Rogers
    (of USC-ISI), Kathy\n   Yellick, and the author.  The acknowledgement and retransmission\n
    \  scheme was inspired by TCP, and the error mechanism was suggested by\n   PARC's
    EFTP abort message.\n   The May, 1992 revision to fix the \"Sorcerer's Apprentice\"
    protocol\n   bug [4] and other minor document problems was done by Noel Chiappa.\n
    \  This research was supported by the Advanced Research Projects Agency\n   of
    the Department of Defense and was monitored by the Office of Naval\n   Research
    under contract number N00014-75-C-0661.\n"
  title: Acknowlegements
- contents:
  - "1. Purpose\n   TFTP is a simple protocol to transfer files, and therefore was
    named\n   the Trivial File Transfer Protocol or TFTP.  It has been implemented\n
    \  on top of the Internet User Datagram protocol (UDP or Datagram) [2]\n   so
    it may be used to move files between machines on different\n   networks implementing
    UDP.  (This should not exclude the possibility\n   of implementing TFTP on top
    of other datagram protocols.)  It is\n   designed to be small and easy to implement.
    \ Therefore, it lacks most\n   of the features of a regular FTP.  The only thing
    it can do is read\n   and write files (or mail) from/to a remote server.  It cannot
    list\n   directories, and currently has no provisions for user authentication.\n
    \  In common with other Internet protocols, it passes 8 bit bytes of\n   data.\n
    \  Three modes of transfer are currently supported: netascii (This is\n   ascii
    as defined in \"USA Standard Code for Information Interchange\"\n   [1] with the
    modifications specified in \"Telnet Protocol\n   Specification\" [3].)  Note that
    it is 8 bit ascii.  The term\n   \"netascii\" will be used throughout this document
    to mean this\n   particular version of ascii.); octet (This replaces the \"binary\"
    mode\n   of previous versions of this document.) raw 8 bit bytes; mail,\n   netascii
    characters sent to a user rather than a file.  (The mail\n   mode is obsolete
    and should not be implemented or used.)  Additional\n   modes can be defined by
    pairs of cooperating hosts.\n   Reference [4] (section 4.2) should be consulted
    for further valuable\n   directives and suggestions on TFTP.\n"
  title: 1. Purpose
- contents:
  - "2. Overview of the Protocol\n   Any transfer begins with a request to read or
    write a file, which\n   also serves to request a connection.  If the server grants
    the\n   request, the connection is opened and the file is sent in fixed\n   length
    blocks of 512 bytes.  Each data packet contains one block of\n   data, and must
    be acknowledged by an acknowledgment packet before the\n   next packet can be
    sent.  A data packet of less than 512 bytes\n   signals termination of a transfer.
    \ If a packet gets lost in the\n   network, the intended recipient will timeout
    and may retransmit his\n   last packet (which may be data or an acknowledgment),
    thus causing\n   the sender of the lost packet to retransmit that lost packet.
    \ The\n   sender has to keep just one packet on hand for retransmission, since\n
    \  the lock step acknowledgment guarantees that all older packets have\n   been
    received.  Notice that both machines involved in a transfer are\n   considered
    senders and receivers.  One sends data and receives\n   acknowledgments, the other
    sends acknowledgments and receives data.\n   Most errors cause termination of
    the connection.  An error is\n   signalled by sending an error packet.  This packet
    is not\n   acknowledged, and not retransmitted (i.e., a TFTP server or user may\n
    \  terminate after sending an error message), so the other end of the\n   connection
    may not get it.  Therefore timeouts are used to detect\n   such a termination
    when the error packet has been lost.  Errors are\n   caused by three types of
    events: not being able to satisfy the\n   request (e.g., file not found, access
    violation, or no such user),\n   receiving a packet which cannot be explained
    by a delay or\n   duplication in the network (e.g., an incorrectly formed packet),
    and\n   losing access to a necessary resource (e.g., disk full or access\n   denied
    during a transfer).\n   TFTP recognizes only one error condition that does not
    cause\n   termination, the source port of a received packet being incorrect.\n
    \  In this case, an error packet is sent to the originating host.\n   This protocol
    is very restrictive, in order to simplify\n   implementation.  For example, the
    fixed length blocks make allocation\n   straight forward, and the lock step acknowledgement
    provides flow\n   control and eliminates the need to reorder incoming data packets.\n"
  title: 2. Overview of the Protocol
- contents:
  - "3. Relation to other Protocols\n   As mentioned TFTP is designed to be implemented
    on top of the\n   Datagram protocol (UDP).  Since Datagram is implemented on the\n
    \  Internet protocol, packets will have an Internet header, a Datagram\n   header,
    and a TFTP header.  Additionally, the packets may have a\n   header (LNI, ARPA
    header, etc.)  to allow them through the local\n   transport medium.  As shown
    in Figure 3-1, the order of the contents\n   of a packet will be: local medium
    header, if used, Internet header,\n   Datagram header, TFTP header, followed by
    the remainder of the TFTP\n   packet.  (This may or may not be data depending
    on the type of packet\n   as specified in the TFTP header.)  TFTP does not specify
    any of the\n   values in the Internet header.  On the other hand, the source and\n
    \  destination port fields of the Datagram header (its format is given\n   in
    the appendix) are used by TFTP and the length field reflects the\n   size of the
    TFTP packet.  The transfer identifiers (TID's) used by\n   TFTP are passed to
    the Datagram layer to be used as ports; therefore\n   they must be between 0 and
    65,535.  The initialization of TID's is\n   discussed in the section on initial
    connection protocol.\n   The  TFTP header consists of a 2 byte opcode field which
    indicates\n   the packet's type (e.g., DATA, ERROR, etc.)  These opcodes and  the\n
    \  formats of  the various types of packets are discussed further in the\n   section
    on TFTP packets.\n          ---------------------------------------------------\n
    \        |  Local Medium  |  Internet  |  Datagram  |  TFTP  |\n          ---------------------------------------------------\n
    \                     Figure 3-1: Order of Headers\n"
  title: 3. Relation to other Protocols
- contents:
  - "4. Initial Connection Protocol\n   A transfer is established by sending a request
    (WRQ to write onto a\n   foreign file system, or RRQ to read from it), and receiving
    a\n   positive reply, an acknowledgment packet for write, or the first data\n
    \  packet for read.  In general an acknowledgment packet will contain\n   the
    block number of the data packet being acknowledged.  Each data\n   packet has
    associated with it a block number; block numbers are\n   consecutive and begin
    with one.  Since the positive response to a\n   write request is an acknowledgment
    packet, in this special case the\n   block number will be zero.  (Normally, since
    an acknowledgment packet\n   is acknowledging a data packet, the acknowledgment
    packet will\n   contain the block number of the data packet being acknowledged.)
    \ If\n   the reply is an error packet, then the request has been denied.\n   In
    order to create a connection, each end of the connection chooses a\n   TID for
    itself, to be used for the duration of that connection.  The\n   TID's chosen
    for a connection should be randomly chosen, so that the\n   probability that the
    same number is chosen twice in immediate\n   succession is very low.  Every packet
    has associated with it the two\n   TID's of the ends of the connection, the source
    TID and the\n   destination TID.  These TID's are handed to the supporting UDP
    (or\n   other datagram protocol) as the source and destination ports.  A\n   requesting
    host chooses its source TID as described above, and sends\n   its initial request
    to the known TID 69 decimal (105 octal) on the\n   serving host.  The response
    to the request, under normal operation,\n   uses a TID chosen by the server as
    its source TID and the TID chosen\n   for the previous message by the requestor
    as its destination TID.\n   The two chosen TID's are then used for the remainder
    of the transfer.\n   As an example, the following shows the steps used to establish
    a\n   connection to write a file.  Note that WRQ, ACK, and DATA are the\n   names
    of the write request, acknowledgment, and data types of packets\n   respectively.
    \ The appendix contains a similar example for reading a\n   file.\n      1. Host
    A sends  a  \"WRQ\"  to  host  B  with  source=  A's  TID,\n         destination=
    69.\n      2. Host  B  sends  a \"ACK\" (with block number= 0) to host A with\n
    \        source= B's TID, destination= A's TID.\n   At this point the connection
    has been established and the first data\n   packet can be sent by Host A with
    a sequence number of 1.  In the\n   next step, and in all succeeding steps, the
    hosts should make sure\n   that the source TID matches the value that was agreed
    on in steps 1\n   and 2.  If a source TID does not match, the packet should be\n
    \  discarded as erroneously sent from somewhere else.  An error packet\n   should
    be sent to the source of the incorrect packet, while not\n   disturbing the transfer.
    \ This can be done only if the TFTP in fact\n   receives a packet with an incorrect
    TID.  If the supporting protocols\n   do not allow it, this particular error condition
    will not arise.\n   The following example demonstrates a correct operation of
    the\n   protocol in which the above situation can occur.  Host A sends a\n   request
    to host B. Somewhere in the network, the request packet is\n   duplicated, and
    as a result two acknowledgments are returned to host\n   A, with different TID's
    chosen on host B in response to the two\n   requests.  When the first response
    arrives, host A continues the\n   connection.  When the second response to the
    request arrives, it\n   should be rejected, but there is no reason to terminate
    the first\n   connection.  Therefore, if different TID's are chosen for the two\n
    \  connections on host B and host A checks the source TID's of the\n   messages
    it receives, the first connection can be maintained while\n   the second is rejected
    by returning an error packet.\n"
  title: 4. Initial Connection Protocol
- contents:
  - "5. TFTP Packets\n   TFTP supports five types of packets, all of which have been
    mentioned\n   above:\n          opcode  operation\n            1     Read request
    (RRQ)\n            2     Write request (WRQ)\n            3     Data (DATA)\n
    \           4     Acknowledgment (ACK)\n            5     Error (ERROR)\n   The
    TFTP header of a packet contains the  opcode  associated  with\n   that packet.\n
    \           2 bytes     string    1 byte     string   1 byte\n            ------------------------------------------------\n
    \          | Opcode |  Filename  |   0  |    Mode    |   0  |\n            ------------------------------------------------\n
    \                      Figure 5-1: RRQ/WRQ packet\n   RRQ and WRQ packets (opcodes
    1 and 2 respectively) have the format\n   shown in Figure 5-1.  The file name
    is a sequence of bytes in\n   netascii terminated by a zero byte.  The mode field
    contains the\n   string \"netascii\", \"octet\", or \"mail\" (or any combination
    of upper\n   and lower case, such as \"NETASCII\", NetAscii\", etc.) in netascii\n
    \  indicating the three modes defined in the protocol.  A host which\n   receives
    netascii mode data must translate the data to its own\n   format.  Octet mode
    is used to transfer a file that is in the 8-bit\n   format of the machine from
    which the file is being transferred.  It\n   is assumed that each type of machine
    has a single 8-bit format that\n   is more common, and that that format is chosen.
    \ For example, on a\n   DEC-20, a 36 bit machine, this is four 8-bit bytes to
    a word with\n   four bits of breakage.  If a host receives a octet file and then\n
    \  returns it, the returned file must be identical to the original.\n   Mail mode
    uses the name of a mail recipient in place of a file and\n   must begin with a
    WRQ.  Otherwise it is identical to netascii mode.\n   The mail recipient string
    should be of the form \"username\" or\n   \"username@hostname\".  If the second
    form is used, it allows the\n   option of mail forwarding by a relay computer.\n
    \  The discussion above assumes that both the sender and recipient are\n   operating
    in the same mode, but there is no reason that this has to\n   be the case.  For
    example, one might build a storage server.  There\n   is no reason that such a
    machine needs to translate netascii into its\n   own form of text.  Rather, the
    sender might send files in netascii,\n   but the storage server might simply store
    them without translation in\n   8-bit format.  Another such situation is a problem
    that currently\n   exists on DEC-20 systems.  Neither netascii nor octet accesses
    all\n   the bits in a word.  One might create a special mode for such a\n   machine
    which read all the bits in a word, but in which the receiver\n   stored the information
    in 8-bit format.  When such a file is\n   retrieved from the storage site, it
    must be restored to its original\n   form to be useful, so the reverse mode must
    also be implemented.  The\n   user site will have to remember some information
    to achieve this.  In\n   both of these examples, the request packets would specify
    octet mode\n   to the foreign host, but the local host would be in some other
    mode.\n   No such machine or application specific modes have been specified in\n
    \  TFTP, but one would be compatible with this specification.\n   It is also possible
    to define other modes for cooperating pairs of\n   hosts, although this must be
    done with care.  There is no requirement\n   that any other hosts implement these.
    \ There is no central authority\n   that will define these modes or assign them
    names.\n                   2 bytes     2 bytes      n bytes\n                   ----------------------------------\n
    \                 | Opcode |   Block #  |   Data     |\n                   ----------------------------------\n
    \                       Figure 5-2: DATA packet\n   Data is actually transferred
    in DATA packets depicted in Figure 5-2.\n   DATA packets (opcode = 3) have a block
    number and data field.  The\n   block numbers on data packets begin with one and
    increase by one for\n   each new block of data.  This restriction allows the program
    to use a\n   single number to discriminate between new packets and duplicates.\n
    \  The data field is from zero to 512 bytes long.  If it is 512 bytes\n   long,
    the block is not the last block of data; if it is from zero to\n   511 bytes long,
    it signals the end of the transfer.  (See the section\n   on Normal Termination
    for details.)\n   All  packets other than duplicate ACK's and those used for\n
    \  termination are acknowledged unless a timeout occurs [4].  Sending a\n   DATA
    packet is an acknowledgment for the first ACK packet of the\n   previous DATA
    packet. The WRQ and DATA packets are acknowledged by\n   ACK or ERROR packets,
    while RRQ\n                         2 bytes     2 bytes\n                         ---------------------\n
    \                       | Opcode |   Block #  |\n                         ---------------------\n
    \                        Figure 5-3: ACK packet\n   and ACK packets are acknowledged
    by  DATA  or ERROR packets.  Figure\n   5-3 depicts an ACK packet; the opcode
    is 4.  The  block  number  in\n   an  ACK echoes the block number of the DATA
    packet being\n   acknowledged.  A WRQ is acknowledged with an ACK packet having
    a\n   block number of zero.\n               2 bytes     2 bytes      string    1
    byte\n               -----------------------------------------\n              |
    Opcode |  ErrorCode |   ErrMsg   |   0  |\n               -----------------------------------------\n
    \                       Figure 5-4: ERROR packet\n   An ERROR packet (opcode 5)
    takes the form depicted in Figure 5-4.  An\n   ERROR packet can be the acknowledgment
    of any other type of packet.\n   The error code is an integer indicating the nature
    of the error.  A\n   table of values and meanings is given in the appendix.  (Note
    that\n   several error codes have been added to this version of this\n   document.)
    The error message is intended for human consumption, and\n   should be in netascii.
    \ Like all other strings, it is terminated with\n   a zero byte.\n"
  title: 5. TFTP Packets
- contents:
  - "6. Normal Termination\n   The end of a transfer is marked by a DATA packet that
    contains\n   between 0 and 511 bytes of data (i.e., Datagram length < 516).  This\n
    \  packet is acknowledged by an ACK packet like all other DATA packets.\n   The
    host acknowledging the final DATA packet may terminate its side\n   of the connection
    on sending the final ACK.  On the other hand,\n   dallying is encouraged.  This
    means that the host sending the final\n   ACK will wait for a while before terminating
    in order to retransmit\n   the final ACK if it has been lost.  The acknowledger
    will know that\n   the ACK has been lost if it receives the final DATA packet
    again.\n   The host sending the last DATA must retransmit it until the packet
    is\n   acknowledged or the sending host times out.  If the response is an\n   ACK,
    the transmission was completed successfully.  If the sender of\n   the data times
    out and is not prepared to retransmit any more, the\n   transfer may still have
    been completed successfully, after which the\n   acknowledger or network may have
    experienced a problem.  It is also\n   possible in this case that the transfer
    was unsuccessful.  In any\n   case, the connection has been closed.\n"
  title: 6. Normal Termination
- contents:
  - "7. Premature Termination\n   If a request can not be granted, or some error occurs
    during the\n   transfer, then an ERROR packet (opcode 5) is sent.  This is only
    a\n   courtesy since it will not be retransmitted or acknowledged, so it\n   may
    never be received.  Timeouts must also be used to detect errors.\n"
  title: 7. Premature Termination
- contents:
  - 'I. Appendix

    '
  title: I. Appendix
- contents:
  - "Order of Headers\n                                                  2 bytes\n
    \   ----------------------------------------------------------\n   |  Local Medium
    \ |  Internet  |  Datagram  |  TFTP Opcode  |\n    ----------------------------------------------------------\n"
  title: Order of Headers
- contents:
  - "TFTP Formats\n   Type   Op #     Format without header\n          2 bytes    string
    \  1 byte     string   1 byte\n          -----------------------------------------------\n
    \  RRQ/  | 01/02 |  Filename  |   0  |    Mode    |   0  |\n   WRQ    -----------------------------------------------\n
    \         2 bytes    2 bytes       n bytes\n          ---------------------------------\n
    \  DATA  | 03    |   Block #  |    Data    |\n          ---------------------------------\n
    \         2 bytes    2 bytes\n          -------------------\n   ACK   | 04    |
    \  Block #  |\n          --------------------\n          2 bytes  2 bytes        string
    \   1 byte\n          ----------------------------------------\n   ERROR | 05
    \   |  ErrorCode |   ErrMsg   |   0  |\n          ----------------------------------------\n"
  title: TFTP Formats
- contents:
  - "Initial Connection Protocol for reading a file\n   1. Host  A  sends  a  \"RRQ\"
    \ to  host  B  with  source= A's TID,\n      destination= 69.\n   2. Host B sends
    a \"DATA\" (with block number= 1) to host  A  with\n      source= B's TID, destination=
    A's TID.\n"
  title: Initial Connection Protocol for reading a file
- contents:
  - "Error Codes\n   Value     Meaning\n   0         Not defined, see error message
    (if any).\n   1         File not found.\n   2         Access violation.\n   3
    \        Disk full or allocation exceeded.\n   4         Illegal TFTP operation.\n
    \  5         Unknown transfer ID.\n   6         File already exists.\n   7         No
    such user.\n"
  title: Error Codes
- contents:
  - "Internet User Datagram Header [2]\n   (This has been included only for convenience.
    \ TFTP need not be\n   implemented on top of the Internet User Datagram Protocol.)\n
    \    Format\n    0                   1                   2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |          Source Port          |       Destination Port        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |            Length             |           Checksum            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  Values of Fields\n   Source Port     Picked by originator of packet.\n   Dest.
    Port      Picked by destination machine (69 for RRQ or WRQ).\n   Length          Number
    of bytes in UDP packet, including UDP header.\n   Checksum        Reference 2
    describes rules for computing checksum.\n                   (The implementor of
    this should be sure that the\n                   correct algorithm is used here.)\n
    \                  Field contains zero if unused.\n   Note: TFTP passes transfer
    identifiers (TID's) to the Internet User\n   Datagram protocol to be used as the
    source and destination ports.\n"
  title: Internet User Datagram Header [2]
- contents:
  - "References\n   [1]  USA Standard Code for Information Interchange, USASI X3.4-1968.\n
    \  [2]  Postel, J., \"User Datagram  Protocol,\" RFC 768, USC/Information\n        Sciences
    Institute, 28 August 1980.\n   [3]  Postel, J., \"Telnet Protocol Specification,\"
    RFC 764,\n        USC/Information Sciences Institute, June, 1980.\n   [4]  Braden,
    R., Editor, \"Requirements for Internet Hosts --\n        Application and Support\",
    RFC 1123, USC/Information Sciences\n        Institute, October 1989.\n"
  title: References
- contents:
  - "Security Considerations\n   Since TFTP includes no login or access control mechanisms,
    care must\n   be taken in the rights granted to a TFTP server process so as not
    to\n   violate the security of the server hosts file system.  TFTP is often\n
    \  installed with controls such that only files that have public read\n   access
    are available via TFTP and writing files via TFTP is\n   disallowed.\n"
  title: Security Considerations
- contents:
  - "Author's Address\n   Karen R. Sollins\n   Massachusetts Institute of Technology\n
    \  Laboratory for Computer Science\n   545 Technology Square\n   Cambridge, MA
    02139-1986\n   Phone: (617) 253-6006\n   EMail: SOLLINS@LCS.MIT.EDU\n"
  title: Author's Address
