- contents:
  - '       Crankback Signaling Extensions for MPLS and GMPLS RSVP-TE

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The IETF Trust (2007).\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   In a distributed, constraint-based routing environment, the\n   information
    used to compute a path may be out of date.  This means\n   that Multiprotocol
    Label Switching (MPLS) and Generalized MPLS\n   (GMPLS) Traffic Engineered (TE)
    Label Switched Path (LSP) setup\n   requests may be blocked by links or nodes
    without sufficient\n   resources.  Crankback is a scheme whereby setup failure
    information\n   is returned from the point of failure to allow new setup attempts
    to\n   be made avoiding the blocked resources.  Crankback can also be\n   applied
    to LSP recovery to indicate the location of the failed link\n   or node.\n   This
    document specifies crankback signaling extensions for use in\n   MPLS signaling
    using RSVP-TE as defined in \"RSVP-TE: Extensions to\n   RSVP for LSP Tunnels\",
    RFC 3209, and GMPLS signaling as defined in\n   \"Generalized Multi-Protocol Label
    Switching (GMPLS) Signaling\n   Functional Description\", RFC 3473.  These extensions
    mean that the\n   LSP setup request can be retried on an alternate path that detours\n
    \  around blocked links or nodes.  This offers significant improvements\n   in
    the successful setup and recovery ratios for LSPs, especially in\n   situations
    where a large number of setup requests are triggered at\n   the same time.\n"
  title: Abstract
- contents:
  - 'Table of Contents

    '
  - 'Section A: Problem Statement

    '
  - "1. Introduction and Framework ......................................4\n   1.1.
    Background .................................................4\n   1.2. Control
    Plane and Data Plane Separation ....................5\n   1.3. Repair and Recovery
    ........................................5\n   1.4. Interaction with TE Flooding
    Mechanisms ....................6\n   1.5. Terminology ................................................7\n"
  - '2. Discussion: Explicit versus Implicit Re-Routing Indications .....7

    '
  - "3. Required Operation ..............................................8\n   3.1.
    Resource Failure or Unavailability .........................8\n   3.2. Computation
    of an Alternate Path ...........................8\n        3.2.1. Information
    Required for Re-Routing .................9\n        3.2.2. Signaling a New Route
    ...............................9\n   3.3. Persistence of Error Information ..........................10\n
    \  3.4. Handling Re-Route Failure .................................11\n   3.5.
    Limiting Re-Routing Attempts ..............................11\n"
  - "4. Existing Protocol Support for Crankback Re-Routing .............11\n   4.1.
    RSVP-TE ...................................................12\n   4.2. GMPLS-RSVP-TE
    .............................................13\n"
  - 'Section B: Solution

    '
  - "5. Control of Crankback Operation .................................13\n   5.1.
    Requesting Crankback and Controlling In-Network\n        Re-Routing ................................................13\n
    \  5.2. Action on Detecting a Failure .............................14\n   5.3.
    Limiting Re-Routing Attempts ..............................14\n        5.3.1.
    New Status Codes for Re-Routing ....................15\n   5.4. Protocol Control
    of Re-Routing Behavior ...................15\n"
  - "6. Reporting Crankback Information ................................15\n   6.1.
    Required Information ......................................15\n   6.2. Protocol
    Extensions .......................................16\n   6.3. Guidance for Use
    of IF_ID ERROR_SPEC TLVs .................20\n        6.3.1. General Principles
    .................................20\n        6.3.2. Error Report TLVs ..................................21\n
    \       6.3.3. Fundamental Crankback TLVs .........................21\n        6.3.4.
    Additional Crankback TLVs ..........................22\n        6.3.5. Grouping
    TLVs by Failure Location ..................23\n        6.3.6. Alternate Path Identification
    ......................24\n   6.4. Action on Receiving Crankback Information .................25\n
    \       6.4.1. Re-Route Attempts ..................................25\n        6.4.2.
    Location Identifiers of Blocked Links or Nodes .....25\n        6.4.3. Locating
    Errors within Loose or Abstract Nodes .....26\n        6.4.4. When Re-Routing
    Fails ..............................26\n        6.4.5. Aggregation of Crankback
    Information ...............26\n   6.5. Notification of Errors ....................................27\n
    \       6.5.1. ResvErr Processing .................................27\n        6.5.2.
    Notify Message Processing ..........................28\n   6.6. Error Values ..............................................28\n
    \  6.7. Backward Compatibility ....................................28\n"
  - "7. LSP Recovery Considerations ....................................29\n   7.1.
    Upstream of the Fault .....................................29\n   7.2. Downstream
    of the Fault ...................................30\n"
  - "8. IANA Considerations ............................................30\n   8.1.
    Error Codes ...............................................30\n   8.2. IF_ID_ERROR_SPEC
    TLVs .....................................31\n   8.3. LSP_ATTRIBUTES Object .....................................31\n"
  - '9. Security Considerations ........................................31

    '
  - '10. Acknowledgments ...............................................32

    '
  - "11. References ....................................................33\n   11.1.
    Normative References .....................................33\n   11.2. Informative
    References ...................................33\n"
  - 'Appendix A.........................................................35

    '
  title: Table of Contents
- contents:
  - 'Section A : Problem Statement

    '
  title: 'Section A : Problem Statement'
- contents:
  - '1.  Introduction and Framework

    '
  title: 1.  Introduction and Framework
- contents:
  - "1.1.  Background\n   RSVP-TE (RSVP Extensions for LSP Tunnels) [RFC3209] can
    be used for\n   establishing explicitly routed LSPs in an MPLS network.  Using
    RSVP-\n   TE, resources can also be reserved along a path to guarantee and/or\n
    \  control QoS for traffic carried on the LSP.  To designate an explicit\n   path
    that satisfies Quality of Service (QoS) guarantees, it is\n   necessary to discern
    the resources available to each link or node in\n   the network.  For the collection
    of such resource information,\n   routing protocols, such as OSPF and Intermediate
    System to\n   Intermediate System (IS-IS), can be extended to distribute additional\n
    \  state information [RFC2702].\n   Explicit paths can be computed based on the
    distributed information\n   at the LSR (ingress) initiating an LSP and signaled
    as Explicit\n   Routes during LSP establishment.  Explicit Routes may contain
    'loose\n   hops' and 'abstract nodes' that convey routing through a collection\n
    \  of nodes.  This mechanism may be used to devolve parts of the path\n   computation
    to intermediate nodes such as area border LSRs.\n   In a distributed routing environment,
    however, the resource\n   information used to compute a constraint-based path
    may be out of\n   date.  This means that a setup request may be blocked, for example,\n
    \  because a link or node along the selected path has insufficient\n   resources.\n
    \  In RSVP-TE, a blocked LSP setup may result in a PathErr message sent\n   to
    the ingress, or a ResvErr sent to the egress (terminator).  These\n   messages
    may result in the LSP setup being abandoned.  In Generalized\n   MPLS [RFC3473]
    the Notify message may additionally be used to\n   expedite notification of failures
    of existing LSPs to ingress and\n   egress LSRs, or to a specific \"repair point\"
    -- an LSR responsible\n   for performing protection or restoration.\n   These
    existing mechanisms provide a certain amount of information\n   about the path
    of the failed LSP.\n   Generalized MPLS [RFC3471] and [RFC3473] extends MPLS into
    networks\n   that manage Layer 2, TDM and lambda resources as well as packet\n
    \  resources.  Thus, crankback routing is also useful in GMPLS networks.\n   In
    a network without wavelength converters, setup requests are likely\n   to be blocked
    more often than in a conventional MPLS environment\n   because the same wavelength
    must be allocated at each Optical Cross-\n   Connect on an end-to-end explicit
    path.  This makes crankback routing\n   all the more important in certain GMPLS
    networks.\n"
  title: 1.1.  Background
- contents:
  - "1.2.  Control Plane and Data Plane Separation\n   Throughout this document, the
    processes and techniques are described\n   as though the control plane and data
    plane elements that comprise a\n   Label Switching Router (LSR) coreside and are
    related in a one-to-one\n   manner.  This is for the convenience of documentation
    only.\n   It should be noted that GMPLS LSRs may be decomposed such that the\n
    \  control plane components are not physically collocated.  Furthermore,\n   one
    presence in the control plane may control more than one LSR in\n   the data plane.
    \ These points have several consequences with respect\n   to this document:\n
    \  o  The nodes, links, and resources that are reported as errors, are\n      data
    plane entities.\n   o  The nodes, areas, and Autonomous Systems (ASs) that report
    that\n      they have attempted re-routing are control plane entities.\n   o  Where
    a single control plane entity is responsible for more than\n      one data plane
    LSR, crankback signaling may be implicit in just\n      the same way as LSP establishment
    signaling may be.\n   The above points may be considered self-evident, but are
    stated here\n   for absolute clarity.\n   The stylistic convenience of referring
    to both the control plane\n   element responsible for a single LSR and the data
    plane component of\n   that LSR simply as \"the LSR\" should not be taken to mean
    that this\n   document is applicable only to a collocated one-to-one relationship.\n
    \  Furthermore, in the majority of cases, the control plane and data\n   plane
    components are related in a 1:1 ratio and are usually\n   collocated.\n"
  title: 1.2.  Control Plane and Data Plane Separation
- contents:
  - "1.3.  Repair and Recovery\n   If the ingress LSR or intermediate area border
    LSR knows the location\n   of the blocked link or node, it can designate an alternate
    path and\n   then reissue the setup request.  Determination of the identity of
    the\n   blocked link or node can be achieved by the mechanism known as\n   crankback
    routing [PNNI, ASH1].  In RSVP-TE, crankback signaling\n   requires notifying
    the upstream LSR of the location of the blocked\n   link or node.  In some cases,
    this requires more information than is\n   currently available in the signaling
    protocols.\n   On the other hand, various recovery schemes for link or node failures\n
    \  have been proposed in [RFC3469] and include fast re-routing.  These\n   schemes
    rely on the existence of a protecting LSP to protect the\n   working LSP, but
    if both the working and protecting paths fail, it is\n   necessary to re-establish
    the LSP on an end-to-end basis, avoiding\n   the known failures.  Similarly, fast
    re-routing by establishing a\n   recovery path on demand after failure requires
    computation of a new\n   LSP that avoids the known failures.  End-to-end recovery
    for\n   alternate routing requires the location of the failed link or node.\n
    \  Crankback routing schemes could be used to notify the upstream LSRs\n   of
    the location of the failure.\n   Furthermore, in situations where many link or
    node failures occur at\n   the same time, the difference between the distributed
    routing\n   information and the real-time network state becomes much greater than\n
    \  in normal LSP setups.  LSP recovery might, therefore, be performed\n   with
    inaccurate information, which is likely to cause setup blocking.\n   Crankback
    routing could improve failure recovery in these situations.\n   The requirement
    for end-to-end allocation of lambda resources in\n   GMPLS networks without wavelength
    converters means that end-to-end\n   recovery may be the only way to recover from
    LSP failures.  This is\n   because segment protection may be much harder to achieve
    in networks\n   of photonic cross-connects where a particular lambda may already
    be\n   in use on other links: End-to-end protection offers the choice of use\n
    \  of another lambda, but this choice is not available in segment\n   protection.\n
    \  This requirement makes crankback re-routing particularly useful in a\n   GMPLS
    network, particularly in dynamic LSP re-routing cases (i.e.,\n   when there is
    no pre-establishment of the protecting LSP).\n"
  title: 1.3.  Repair and Recovery
- contents:
  - "1.4.  Interaction with TE Flooding Mechanisms\n   GMPLS uses Interior Gateway
    Protocols (IGPs) (OSPF and IS-IS) to\n   flood traffic engineering (TE) information
    that is used to construct\n   a traffic engineering database (TED) which acts
    as a data source for\n   path computation.\n   Crankback signaling is not intended
    to supplement or replace the\n   normal operation of the TE flooding mechanism,
    since these mechanisms\n   are independent of each other.  That is, information
    gathered from\n   crankback signaling may be applied to compute an alternate path
    for\n   the LSP for which the information was signaled, but the information\n
    \  is not intended to be used to influence the computation of the paths\n   of
    other LSPs.\n   Any requirement to rapidly flood updates about resource availability\n
    \  so that they may be applied as deltas to the TED and utilized in\n   future
    path computations are out of the scope of this document.\n"
  title: 1.4.  Interaction with TE Flooding Mechanisms
- contents:
  - "1.5.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in [RFC2119].\n"
  title: 1.5.  Terminology
- contents:
  - "2.  Discussion: Explicit versus Implicit Re-Routing Indications\n   There have
    been problems in service provider networks when\n   \"inferring\" from indirect
    information that re-routing is allowed.\n   This document proposes the use of
    an explicit re-routing indication\n   that authorizes re-routing, and contrasts
    it with the inferred or\n   implicit re-routing indication that has previously
    been used.\n   Various existing protocol options and exchanges, including the
    error\n   values of PathErr message [RFC2205, RFC3209] and the Notify message\n
    \  [RFC3473], allow an implementation to infer a situation where re-\n   routing
    can be performed.  This allows for recovery from network\n   errors or resource
    contention.\n   However, such inference of recovery signaling is not always desirable\n
    \  since it may be doomed to failure.  For example, experience of using\n   release
    messages in TDM-based networks, for analogous implicit and\n   explicit re-routing
    indications purposes provides some guidance.\n   This background information is
    given in Appendix A.\n   It is certainly the case that with topology information
    distribution,\n   as performed with routing protocols such as OSPF, the ingress
    LSR\n   could infer the re-routing condition.  However, convergence of\n   topology
    information using routing protocols is typically slower than\n   the expected
    LSP setup times.  One of the reasons for crankback is to\n   avoid the overhead
    of available-link-bandwidth flooding, and to more\n   efficiently use local state
    information to direct alternate routing\n   to the path computation point.\n   [ASH1]
    shows how event-dependent-routing can just use crankback, and\n   not available-link-bandwidth
    flooding, to decide on the re-route path\n   in the network through \"learning
    models\".  Reducing this flooding\n   reduces overhead and can lead to the ability
    to support much larger\n   AS sizes.\n   Therefore, the use of alternate routing
    should be based on an\n   explicit indication, and it is best to know the following
    information\n   separately:\n   - where blockage/congestion occurred.\n   - whether
    alternate routing \"should\" be attempted.\n"
  title: '2.  Discussion: Explicit versus Implicit Re-Routing Indications'
- contents:
  - "3.  Required Operation\n   Section 1 identifies some of the circumstances under
    which crankback\n   may be useful.  Crankback routing is performed as described
    in the\n   following procedures, when an LSP setup request is blocked along the\n
    \  path or when an existing LSP fails.\n"
  title: 3.  Required Operation
- contents:
  - "3.1.  Resource Failure or Unavailability\n   When an LSP setup request is blocked
    due to unavailable resources, an\n   error message response with the location
    identifier of the blockage\n   should be returned to the LSR initiating the LSP
    setup (ingress LSR),\n   the area border LSR, the AS border LSR, or some other
    repair point.\n   This error message carries an error specification according
    to\n   [RFC3209] -- this indicates the cause of the error and the node/link\n
    \  on which the error occurred.  Crankback operation may require further\n   information
    as detailed in Sections 3.2.1 and 6.\n   A repair point (for example, an ingress
    LSR) that receives crankback\n   information resulting from the failure of an
    established LSP may\n   apply local policy to govern how it attempts repair of
    the LSP.  For\n   example, it may prioritize repair attempts between multiple
    LSPs that\n   have failed, and it may consider LSPs that have been locally repaired\n
    \  ([RFC4090]) to be less urgent candidates for end-to-end repair.\n   Furthermore,
    there is a likelihood that other LSRs are also\n   attempting LSP repair for LSPs
    affected by the same fault which may\n   give rise to resource contention within
    the network, so an LSR may\n   stagger its repair attempts in order to reduce
    the chance of resource\n   contention.\n"
  title: 3.1.  Resource Failure or Unavailability
- contents:
  - "3.2. Computation of an Alternate Path\n   In a flat network without partitioning
    of the routing topology, when\n   the ingress LSR receives the error message,
    it computes an alternate\n   path around the blocked link or node to satisfy QoS
    guarantees using\n   link state information about the network.  If an alternate
    path is\n   found, a new LSP setup request is sent over this path.\n   On the
    other hand, in a network partitioned into areas such as with\n   OSPF, the area
    border LSR may intercept and terminate the error\n   response, and perform alternate
    (re-)routing within the downstream\n   area.\n   In a third scenario, any node
    within an area may act as a repair\n   point.  In this case, each LSR behaves
    much like an area border LSR\n   as described above.  It can intercept and terminate
    the error\n   response and perform alternate routing.  This may be particularly\n
    \  useful where domains of computation are applied within the\n   (partitioned)
    network, where such domains are not coincident on the\n   routing partition boundaries.
    \ However if, all nodes in the network\n   perform re-routing it is possible to
    spend excessive network and CPU\n   resources on re-routing attempts that would
    be better made only at\n   designated re-routing nodes.  This scenario is somewhat
    like 'MPLS\n   fast re-route' [RFC4090], in which any node in the MPLS domain
    can\n   establish 'local repair' LSPs upon failure notification.\n"
  title: 3.2. Computation of an Alternate Path
- contents:
  - "3.2.1.  Information Required for Re-Routing\n   In order to correctly compute
    a route that avoids the blocking\n   problem, a repair point LSR must gather as
    much crankback information\n   as possible.  Ideally, the repair node will be
    given the node, link,\n   and reason for the failure.\n   The reason for the failure
    may provide an important discriminator to\n   help decide what action should be
    taken.  For example, a failure that\n   indicates \"No Route to Destination\"
    is likely to give rise to a new\n   path computation excluding the reporting LSR,
    but the reason\n   \"Temporary Control Plane Congestion\" might lead to a simple
    retry\n   after a suitable pause.\n   However, even this information may not be
    enough to help with re-\n   computation.  Consider for instance an explicit route
    that contains a\n   non-explicit abstract node or a loose hop.  In this case,
    the failed\n   node and link are not necessarily enough to tell the repair point\n
    \  which hop in the explicit route has failed.  The crankback\n   information
    needs to indicate where, within the explicit route, the\n   problem has occurred.\n"
  title: 3.2.1.  Information Required for Re-Routing
- contents:
  - "3.2.2.  Signaling a New Route\n   If the crankback information can be used to
    compute a new route\n   avoiding the failed/blocking network resource, the route
    can be\n   signaled as an Explicit Route.\n   However, it may be that the repair
    point does not have sufficient\n   topology information to compute an Explicit
    Route that is guaranteed\n   to avoid the failed link or node.  In this case,
    Route Exclusions\n   [RFC4874] may be particularly helpful.  To achieve this,
    [RFC4874]\n   allows the crankback information to be presented as route exclusions\n
    \  to force avoidance of the failed node, link, or resource.\n"
  title: 3.2.2.  Signaling a New Route
- contents:
  - "3.3.  Persistence of Error Information\n   The repair point LSR that computes
    the alternate path should store\n   the location identifiers of the blockages
    indicated in the error\n   message until the LSP is successfully established by
    downstream LSRs\n   or until the repair point LSR abandons re-routing attempts.
    \ Since\n   crankback signaling information may be returned to the same repair\n
    \  point LSR more than once while establishing a specific LSP, the\n   repair
    point LSR SHOULD maintain a history table of all experienced\n   blockages for
    this LSP (at least until the routing protocol updates\n   the state of this information)
    so that the resulting path\n   computation(s) can detour all blockages.\n   If
    a second error response is received by a repair point (while it is\n   performing
    crankback re-routing) it should update the history table\n   that lists all experienced
    blockages, and use the entire gathered\n   information when making a further re-routing
    attempt.\n   Note that the purpose of this history table is to correlate\n   information
    when repeated retry attempts are made by the same LSR.\n   For example, suppose
    that an attempt is made to route from A through\n   B, and B returns a failure
    with crankback information, an attempt may\n   be made to route from A through
    C, and this may also fail with the\n   return of crankback information.  The next
    attempt SHOULD NOT be to\n   route from A through B, and this may be achieved
    by use of the\n   history table.\n   The history table can be discarded by the
    signaling controller for A\n   if the LSP is successfully established through
    A.  The history table\n   MAY be retained after the signaling controller for A
    sends an error\n   upstream, however the value this provides is questionable since
    a\n   future retry as a result of crankback re-routing should not attempt\n   to
    route through A.  If the history information is retained for a\n   longer period
    it SHOULD be discarded after a local timeout has\n   expired.  This timer is required
    so that the repair point does not\n   apply the history table to an attempt by
    the ingress to re-establish\n   a failed LSP, but to allow the history table to
    be available for use\n   in re-routing attempts before the ingress declares the
    LSP as failed.\n   It is RECOMMENDED that the repair point LSR discard the history
    table\n   using a timer no larger than the LSP retry timer configured on the\n
    \  ingress LSR.  The correlation of the timers between the ingress and\n   repair
    point LSRs is typically by manual configuration of timers\n   local to each LSR,
    and is outside the scope of this document.\n   The information in the history
    table is not intended to supplement\n   the TED for the computation of paths of
    other LSPs.\n"
  title: 3.3.  Persistence of Error Information
- contents:
  - "3.4.  Handling Re-Route Failure\n   Multiple blockages (for the same LSP) may
    occur, and successive setup\n   retry attempts may fail.  Retaining error information
    from previous\n   attempts ensures that there is no thrashing of setup attempts,
    and\n   knowledge of the blockages increases with each attempt.\n   It may be
    that after several retries, a given repair point is unable\n   to compute a path
    to the destination (that is, the egress of the LSP)\n   that avoids all of the
    blockages.  In this case, it must pass an\n   error indication message upstream.
    \ It is most useful to the upstream\n   nodes (and in particular to the ingress
    LSR) that may repair points\n   for the LSP setup, if the error indication message
    identifies all of\n   the downstream blockages and also the repair point that
    was unable to\n   compute an alternate path.\n"
  title: 3.4.  Handling Re-Route Failure
- contents:
  - "3.5.  Limiting Re-Routing Attempts\n   It is important to prevent endless repetition
    of LSP setup attempts\n   using crankback routing information after error conditions
    are\n   signaled, or during periods of high congestion.  It may also be\n   useful
    to reduce the number of retries, since failed retries will\n   increase setup
    latency and degrade performance by increasing the\n   amount of signaling processing
    and message exchanges within the\n   network.\n   The maximum number of crankback
    re-routing attempts that are allowed\n   may be limited in a variety of ways.
    \ This document allows an LSR to\n   limit the retries per LSP, and assumes that
    such a limit will be\n   applied either as a per-node configuration for those
    LSRs that are\n   capable of re-routing, or as a network-wide configuration value.\n
    \  When the number of retries at a particular LSR is exceeded, the LSR\n   will
    report the failure in an upstream direction until it reaches the\n   next repair
    point where further re-routing attempts may be attempted,\n   or it reaches the
    ingress which may act as a repair point or declare\n   the LSP as failed.  It
    is important that the crankback information\n   this is provided indicates that
    routing back through this node will\n   not succeed; this situation is similar
    to that in Section 3.4.\n"
  title: 3.5.  Limiting Re-Routing Attempts
- contents:
  - "4.  Existing Protocol Support for Crankback Re-Routing\n   Crankback re-routing
    is appropriate for use with RSVP-TE.\n   1) LSP establishment may fail because
    of an inability to route,\n      perhaps because links are down.  In this case
    a PathErr message is\n      returned to the ingress.\n   2) LSP establishment
    may fail because resources are unavailable.\n      This is particularly relevant
    in GMPLS where explicit label\n      control may be in use.  Again, a PathErr
    message is returned to\n      the ingress.\n   3) Resource reservation may fail
    during LSP establishment, as the\n      Resv is processed.  If resources are not
    available on the required\n      link or at a specific node, a ResvErr message
    is returned to the\n      egress node indicating \"Admission Control failure\"
    [RFC2205].  The\n      egress is allowed to change the FLOWSPEC and try again,
    but in the\n      event that this is not practical or not supported (particularly
    in\n      the non-PSC context), the egress LSR may choose to take any one of\n
    \     the following actions.\n      - Ignore the situation and allow recovery
    to happen through Path\n        refresh message and refresh timeout [RFC2205].\n
    \     - Send a PathErr message towards the ingress indicating \"Admission\n        Control
    failure\".\n      Note that in multi-area/AS networks, the ResvErr might be\n
    \     intercepted and acted on at an area/AS border router.\n   4) It is also
    possible to make resource reservations on the forward\n      path as the Path
    message is processed.  This choice is compatible\n      with LSP setup in GMPLS
    networks [RFC3471], [RFC3473].  In this\n      case, if resources are not available,
    a PathErr message is\n      returned to ingress indicating \"Admission Control
    failure\".\n   Crankback information would be useful to an upstream node (such
    as\n   the ingress) if it is supplied on a PathErr or a Notify message that\n
    \  is sent upstream.\n"
  title: 4.  Existing Protocol Support for Crankback Re-Routing
- contents:
  - "4.1.  RSVP-TE\n   In RSVP-TE, a failed LSP setup attempt results in a PathErr
    message\n   returned upstream.  The PathErr message carries an ERROR_SPEC object,\n
    \  which indicates the node or interface reporting the error and the\n   reason
    for the failure.\n   Crankback re-routing can be performed explicitly avoiding
    the node or\n   interface reported.\n"
  title: 4.1.  RSVP-TE
- contents:
  - "4.2.  GMPLS-RSVP-TE\n   GMPLS extends the error reporting described above by
    allowing LSRs to\n   report the interface that is in error in addition to the
    identity of\n   the node reporting the error.  This further enhances the ability
    of a\n   re-computing node to route around the error.\n   GMPLS introduces a targeted
    Notify message that may be used to report\n   LSP failures direct to a selected
    node.  This message carries the\n   same error reporting facilities as described
    above.  The Notify\n   message may be used to expedite the propagation of error\n
    \  notifications, but in a network that offers crankback routing at\n   multiple
    nodes there would need to be some agreement between LSRs as\n   to whether PathErr
    or Notify provides the stimulus for crankback\n   operation.  This agreement is
    constrained by the re-routing behavior\n   selection (as listed in Section 5.4).
    \ Otherwise, multiple nodes\n   might attempt to repair the LSP at the same time,
    because:\n   1) these messages can flow through different paths before reaching\n
    \     the ingress LSR, and\n   2) the destination of the Notify message might
    not be the ingress\n      LSR.\n"
  title: 4.2.  GMPLS-RSVP-TE
- contents:
  - 'Section B : Solution

    '
  title: 'Section B : Solution'
- contents:
  - '5.  Control of Crankback Operation

    '
  title: 5.  Control of Crankback Operation
- contents:
  - "5.1.  Requesting Crankback and Controlling In-Network Re-Routing\n   When a request
    is made to set up an LSP tunnel, the ingress LSR\n   should specify whether it
    wants crankback information to be collected\n   in the event of a failure, and
    whether it requests re-routing\n   attempts by any or specific intermediate nodes.
    \ For this purpose, a\n   Re-routing Flag field is added to the protocol setup
    request\n   messages.  The corresponding values are mutually exclusive.\n   No
    Re-routing             The ingress node MAY attempt re-routing\n                             after
    failure.  Intermediate nodes SHOULD\n                             NOT attempt
    re-routing after failure.\n                             Nodes detecting failures
    MUST report an\n                             error and MAY supply crankback information.\n
    \                            This is the default and backwards\n                             compatible
    option.\n   End-to-end Re-routing     The ingress node MAY attempt re-routing\n
    \                            after failure.  Intermediate nodes SHOULD\n                             NOT
    attempt re-routing after failure.\n                             Nodes detecting
    failures MUST report an\n                             error and SHOULD supply
    crankback\n                             information.\n   Boundary Re-routing       Intermediate
    nodes MAY attempt re-routing\n                             after failure only
    if they are Area Border\n                             Routers or AS Border Routers
    (ABRs/ASBRs).\n                             The boundary (ABR/ASBR) can either
    decide\n                             to forward the error message upstream to\n
    \                            the ingress LSR or try to select another\n                             egress
    boundary LSR.  Other intermediate\n                             nodes SHOULD NOT
    attempt re-routing.  Nodes\n                             detecting failures MUST
    report an error and\n                             SHOULD supply crankback information.\n
    \  Segment-based Re-routing  Any node MAY attempt re-routing after it\n                             receives
    an error report and before it\n                             passes the error report
    further upstream.\n                             Nodes detecting failures MUST
    report an\n                             error and SHOULD supply full crankback\n
    \                            information.\n"
  title: 5.1.  Requesting Crankback and Controlling In-Network Re-Routing
- contents:
  - "5.2.  Action on Detecting a Failure\n   A node that detects the failure to setup
    an LSP or the failure of an\n   established LSP SHOULD act according to the Re-routing
    Flag passed on\n   the LSP setup request.\n   If Segment-based Re-routing is allowed,
    or if Boundary Re-routing is\n   allowed and the detecting node is an ABR or ASBR,
    the detecting node\n   MAY immediately attempt to re-route.\n   If End-to-end
    Re-routing is indicated, or if Segment-based or\n   Boundary Re-routing is allowed
    and the detecting node chooses not to\n   make re-routing attempts (or has exhausted
    all possible re-routing\n   attempts), the detecting node MUST return a protocol
    error indication\n   and SHOULD include full crankback information.\n"
  title: 5.2.  Action on Detecting a Failure
- contents:
  - "5.3.  Limiting Re-Routing Attempts\n   Each repair point SHOULD apply a locally
    configurable limit to the\n   number of attempts it makes to re-route an LSP.
    \ This helps to\n   prevent excessive network usage in the event of significant
    faults,\n   and allows back-off to other repair points which may have a better\n
    \  chance of routing around the problem.\n"
  title: 5.3.  Limiting Re-Routing Attempts
- contents:
  - "5.3.1.  New Status Codes for Re-Routing\n   An error code/value of \"Routing
    Problem\"/\"Re-routing limit exceeded\"\n   (24/22) is used to identify that a
    node has abandoned crankback re-\n   routing because it has reached a threshold
    for retry attempts.\n   A node receiving an error response with this status code
    MAY also\n   attempt crankback re-routing, but it is RECOMMENDED that such\n   attempts
    be limited to the ingress LSR.\n"
  title: 5.3.1.  New Status Codes for Re-Routing
- contents:
  - "5.4.  Protocol Control of Re-Routing Behavior\n   The LSP_ATTRIBUTES object defined
    in [RFC4420] is used on Path\n   messages to convey the Re-Routing Flag described
    in Section 4.1.\n   Three bits are defined for inclusion in the LSP Attributes
    TLV as\n   follows.  The bit numbers below have been assigned by IANA.\n   Bit
    \    Name and Usage\n   Number\n      1    End-to-end re-routing desired.\n           This
    flag indicates the end-to-end re-routing behavior for an\n           LSP under
    establishment.  This MAY also be used for\n           specifying the behavior
    of end-to-end LSP recovery for\n           established LSPs.\n      2    Boundary
    re-routing desired.\n           This flag indicates the boundary re-routing behavior
    for an\n           LSP under establishment.  This MAY also be used for\n           specifying
    the segment-based LSP recovery through nested\n           crankback for established
    LSPs.  The boundary ABR/ASBR can\n           either decide to forward the PathErr
    message upstream to an\n           upstream boundary ABR/ASBR or to the ingress
    LSR.\n           Alternatively, it can try to select another egress boundary\n
    \          LSR.\n      3    Segment-based re-routing desired.\n           This
    flag indicates the segment-based re-routing behavior for\n           an LSP under
    establishment.  This MAY also be used to specify\n           the segment-based
    LSP recovery for established LSPs.\n"
  title: 5.4.  Protocol Control of Re-Routing Behavior
- contents:
  - '6.  Reporting Crankback Information

    '
  title: 6.  Reporting Crankback Information
- contents:
  - "6.1.  Required Information\n   As described above, full crankback information
    SHOULD indicate the\n   node, link, and other resources, which have been attempted
    but have\n   failed because of allocation issues or network failure.\n   The default
    crankback information SHOULD include the interface and\n   the node address.\n
    \  Any address reported in such crankback information SHOULD be an\n   address
    that was distributed by the routing protocols (OSPF and IS-\n   IS) in their TE
    link state advertisements.  However, some additional\n   information such as component
    link identifiers is additional to this.\n"
  title: 6.1.  Required Information
- contents:
  - "6.2.  Protocol Extensions\n   [RFC3473] defines an IF_ID ERROR_SPEC object that
    can be used on\n   PathErr, ResvErr and Notify messages to convey the information\n
    \  carried in the Error Spec Object defined in [RFC3209].  Additionally,\n   the
    IF_ID ERROR_SPEC Object has the scope for carrying TLVs that\n   identify the
    link associated with the error.\n   The TLVs for use with this object are defined
    in [RFC3471], and are\n   listed below.  They are used in two places.  In the
    IF_ID RSVP_HOP\n   object they are used to identify links.  In the IF_ID ERROR_SPEC\n
    \  object they are used to identify the failed resource which is usually\n   the
    downstream resource from the reporting node.\n   Type Length Format     Description\n
    \  --------------------------------------------------------------------\n    1
    \     8   IPv4 Addr. IPv4                    (Interface address)\n    2     20
    \  IPv6 Addr. IPv6                    (Interface address)\n    3     12   Compound
    \  IF_INDEX                (Interface index)\n    4     12   Compound   COMPONENT_IF_DOWNSTREAM
    (Component interface)\n    5     12   Compound   COMPONENT_IF_UPSTREAM   (Component
    interface)\n   Note that TLVs 4 and 5 are obsoleted by [RFC4201] and SHOULD NOT
    be\n   used to identify component interfaces in IF_ID ERROR_SPEC objects.\n   In
    order to facilitate reporting of crankback information, the\n   following additional
    TLVs are defined.\n   Type Length Format     Description\n   --------------------------------------------------------------------\n
    \   6    var   See below  DOWNSTREAM_LABEL        (GMPLS label)\n    7    var
    \  See below  UPSTREAM_LABEL          (GMPLS label)\n    8      8   See below
    \ NODE_ID                 (TE Router ID)\n    9      x   See below  OSPF_AREA
    \              (Area ID)\n   10      x   See below  ISIS_AREA               (Area
    ID)\n   11      8   See below  AUTONOMOUS_SYSTEM       (Autonomous system)\n   12
    \   var   See below  ERO_CONTEXT             (ERO subobject)\n   13    var   See
    below  ERO_NEXT_CONTEXT        (ERO subobjects)\n   14      8   IPv4 Addr. PREVIOUS_HOP_IPv4
    \      (Node address)\n   15     20   IPv6 Addr. PREVIOUS_HOP_IPv6       (Node
    address)\n   16      8   IPv4 Addr. INCOMING_IPv4           (Interface address)\n
    \  17     20   IPv6 Addr. INCOMING_IPv6           (Interface address)\n   18     12
    \  Compound   INCOMING_IF_INDEX       (Interface index)\n   19    var   See below
    \ INCOMING_DOWN_LABEL     (GMPLS label)\n   20    var   See below  INCOMING_UP_LABEL
    \      (GMPLS label)\n   21      8   See below  REPORTING_NODE_ID       (Router
    ID)\n   22      x   See below  REPORTING_OSPF_AREA     (Area ID)\n   23      x
    \  See below  REPORTING_ISIS_AREA     (Area ID)\n   24      8   See below  REPORTING_AS
    \           (Autonomous system)\n   25    var   See below  PROPOSED_ERO            (ERO
    subobjects)\n   26    var   See below  NODE_EXCLUSIONS         (List of nodes)\n
    \  27    var   See below  LINK_EXCLUSIONS         (List of interfaces)\n   For
    types 1, 2, and 3 the format of the Value field is already\n   defined in [RFC3471].\n
    \  For types 14 and 16, the format of the Value field is the same as for\n   type
    1.\n   For types 15 and 17, the format of the Value field is the same as for\n
    \  type 2.\n   For type 18, the format of the Value field is the same as for type
    3.\n   For types 6, 7, 19, and 20, the length field is variable and the\n   Value
    field is a label as defined in [RFC3471].  As with all uses of\n   labels, it
    is assumed that any node that can process the label\n   information knows the
    syntax and semantics of the label from the\n   context.  Note that all TLVs are
    zero-padded to a multiple of four\n   octets so that if a label is not itself
    a multiple of four octets, it\n   must be disambiguated from the trailing zero
    pads by knowledge\n   derived from the context.\n   For types 8 and 21, the Value
    field has the format:\n       0                   1                   2                   3\n
    \      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |                         Router ID                             |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      Router ID: 32 bits\n          The TE Router ID (TLV type 8) or the Router
    ID (TLV type 21)\n          used to identify the node within the IGP.\n   For
    types 9 and 22, the Value field has the format:\n       0                   1
    \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
    5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |                     OSPF Area Identifier                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      OSPF Area Identifier\n          The 4-octet area identifier for the node.
    \ This identifies the\n          area where the failure has occurred.\n   For
    types 10 and 23, the Value field has the format:\n       0                   1
    \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
    5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |   Length      |     IS-IS Area Identifier                     |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     ~                     IS-IS Area Identifier (continued)         ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      Length\n          Length of the actual (non-padded) IS-IS Area Identifier
    in\n          octets.  Valid values are from 2 to 11 inclusive.\n       IS-IS
    Area Identifier\n          The variable-length IS-IS area identifier.  Padded
    with\n          trailing zeroes to a four-octet boundary.\n   For types 11 and
    24, the Value field has the format:\n       0                   1                   2
    \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
    5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |                  Autonomous System Number                     |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \      Autonomous System Number: 32 bits\n          The AS Number of the associated
    Autonomous System.  Note that\n          if 16-bit AS numbers are in use, the
    low order bits (16\n          through 31) should be used and the high order bits
    (0 through\n          15) should be set to zero.\n   For types 12, 13, and 25,
    the Value field has the format:\n       0                   1                   2
    \                  3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
    5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |                                                               |\n      ~
    \                      ERO Subobjects                          ~\n      |                                                               |\n
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       ERO
    Subobjects:\n          A sequence of Explicit Route Object (ERO) subobjects.  Any
    ERO\n          subobjects are allowed whether defined in [RFC3209],\n          [RFC3473],
    or other documents.  Note that ERO subobjects\n          contain their own types
    and lengths.\n   For type 26, the Value field has the format:\n       0                   1
    \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
    5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |                                                               |\n      ~
    \                      Node Identifiers                        ~\n      |                                                               |\n
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       Node
    Identifiers:\n          A sequence of TLVs as defined here of types 1, 2, or 8
    that\n          indicates downstream nodes that have already participated in\n
    \         crankback attempts and have been declared unusable for the\n          current
    LSP setup attempt.  Note that an interface identifier\n          may be used to
    identify a node.\n   For type 27, the Value field has the format:\n       0                   1
    \                  2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
    5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \     |                                                               |\n      ~
    \                      Link Identifiers                        ~\n      |                                                               |\n
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       Link
    Identifiers:\n          A sequence of TLVs as defined here of the same format
    as type\n          1, 2 or 3 TLVs that indicate incoming interfaces at downstream\n
    \         nodes that have already participated in crankback attempts and\n          have
    been declared unusable for the current LSP setup attempt.\n"
  title: 6.2.  Protocol Extensions
- contents:
  - '6.3.  Guidance for Use of IF_ID ERROR_SPEC TLVs

    '
  title: 6.3.  Guidance for Use of IF_ID ERROR_SPEC TLVs
- contents:
  - "6.3.1.  General Principles\n   If crankback is not being used, inclusion of an
    IF_ID ERROR_SPEC\n   object in PathErr, ResvErr, and Notify messages follows the\n
    \  processing rules defined in [RFC3473] and [RFC4201].  A sender MAY\n   include
    additional TLVs of types 6 through 27 to report crankback\n   information for
    informational/monitoring purposes.\n   If crankback is being used, the sender
    of a PathErr, ResvErr, or\n   Notify message MUST use the IF_ID ERROR_SPEC object
    and MUST include\n   at least one of the TLVs in the range 1 through 3 as described
    in\n   [RFC3473], [RFC4201], and the previous paragraph.  Additional TLVs\n   SHOULD
    also be included to report further information.  The following\n   section gives
    advice on which TLVs should be used under different\n   circumstances, and which
    TLVs must be supported by LSRs.\n   Note that all such additional TLVs are optional
    and MAY be omitted.\n   Inclusion of the optional TLVs SHOULD be performed where
    doing so\n   helps to facilitate error reporting and crankback.  The TLVs fall\n
    \  into three categories: those that are essential to report the error,\n   those
    that provide additional information that is or may be\n   fundamental to the utility
    of crankback, and those that provide\n   additional information that may be useful
    for crankback in some\n   circumstances.\n   Note that all LSRs MUST be prepared
    to receive and forward any TLV as\n   per [RFC3473].  This includes TLVs of type
    4 or 5 as defined in\n   [RFC3473] and obsoleted by [RFC4201].  There is, however,
    no\n   requirement for an LSR to actively process any but the TLVs defined\n   in
    [RFC3473].  An LSR that proposes to perform crankback re-routing\n   SHOULD support
    receipt and processing of all of the fundamental\n   crankback TLVs, and is RECOMMENDED
    to support the receipt and\n   processing of the additional crankback TLVs.\n
    \  It should be noted, however, that some assumptions about the TLVs\n   that
    will be used MAY be made based on the deployment scenarios.  For\n   example,
    a router that is deployed in a single-area network does not\n   need to support
    the receipt and processing of TLV types 22 and 23.\n   Those TLVs might be inserted
    in an IF_ID ERROR_SPEC object, but would\n   not need to be processed by the receiver
    of a PathErr message.\n"
  title: 6.3.1.  General Principles
- contents:
  - "6.3.2.  Error Report TLVs\n   Error Report TLVs are those in the range 1 through
    3.  (Note that the\n   obsoleted TLVs 4 and 5 may be considered in this category,
    but SHOULD\n   NOT be used.)\n   As stated above, when crankback information is
    reported, the IF_ID\n   ERROR_SPEC object MUST be used.  When the IF_ID ERROR_SPEC
    object is\n   used, at least one of the TLVs in the range 1 through 3 MUST be\n
    \  present.  The choice of which TLV to use will be dependent on the\n   circumstance
    of the error and device capabilities.  For example, a\n   device that does not
    support IPv6 will not need the ability to create\n   a TLV of type 2.  Note, however,
    that such a device MUST still be\n   prepared to receive and process all error
    report TLVs.\n"
  title: 6.3.2.  Error Report TLVs
- contents:
  - "6.3.3.  Fundamental Crankback TLVs\n   Many of the TLVs report the specific resource
    that has failed.  For\n   example, TLV type 1 can be used to report that the setup
    attempt was\n   blocked by some form of resource failure on a specific interface\n
    \  identified by the IP address supplied.  TLVs in this category are 1\n   through
    11, although TLVs 4 and 5 may be considered to be excluded\n   from this category
    by dint of having been obsoleted.\n   These TLVs SHOULD be supplied whenever the
    node detecting and\n   reporting the failure with crankback information has the
    information\n   available.  (Note that some of these TLVs MUST be included as\n
    \  described in the previous two sections.)\n   The TLVs of type 8, 9, 10, and
    11 MAY, however, be omitted according\n   to local policy and relevance of the
    information.\n"
  title: 6.3.3.  Fundamental Crankback TLVs
- contents:
  - "6.3.4.  Additional Crankback TLVs\n   Some TLVs help to locate the fault within
    the context of the path of\n   the LSP that was being set up.  TLVs of types 12,
    13, 14, and 15 help\n   to set the context of the error within the scope of an
    explicit path\n   that has loose hops or non-precise abstract nodes.  The ERO
    context\n   information is not always a requirement, but a node may notice that\n
    \  it is a member of the next hop in the ERO (such as a loose or non-\n   specific
    abstract node) and deduce that its upstream neighbor may\n   have selected the
    path using next hop routing.  In this case,\n   providing the ERO context will
    be useful to the upstream node that\n   performs re-routing.\n   Note the distinction
    between TLVs 12 and 13 is the distinction\n   between \"this is the hop I was
    trying to satisfy when I failed\" and\n   \"this is the next hop I was trying
    to reach when I failed\".\n   Reporting nodes SHOULD also supply TLVs from the
    range 12 through 20\n   as appropriate for reporting the error.  The reporting
    nodes MAY also\n   supply TLVs from the range 21 through 27.\n   Note that in
    deciding whether a TLV in the range 12 through 20 \"is\n   appropriate\", the
    reporting node should consider amongst other\n   things, whether the information
    is pertinent to the cause of the\n   failure.  For example, when a cross-connection
    fails, it may be that\n   the outgoing interface is faulted, in which case only
    the interface\n   (for example, TLV type 1) needs to be reported, but if the problem
    is\n   that the incoming interface cannot be connected to the outgoing\n   interface
    because of temporary or permanent cross-connect\n   limitations, the node should
    also include reference to the incoming\n   interface (for example, TLV type 16).\n
    \  Four TLVs (21, 22, 23, and 24) allow the location of the reporting\n   node
    to be expanded upon.  These TLVs would not be included if the\n   information
    is not of use within the local system, but might be added\n   by ABRs relaying
    the error.  Note that the Reporting Node ID (TLV 21)\n   need not be included
    if the IP address of the reporting node as\n   indicated in the ERROR_SPEC itself,
    is sufficient to fully identify\n   the node.\n   The last three TLVs (25, 26,
    and 27) provide additional information\n   for recomputation points.  The reporting
    node (or a node forwarding\n   the error) MAY make suggestions about how the error
    could have been\n   avoided, for example, by supplying a partial ERO that would
    cause the\n   LSP to be successfully set up if it were used.  As the error\n   propagates
    back upstream and as crankback routing is attempted and\n   fails, it is beneficial
    to collect lists of failed nodes and links so\n   that they will not be included
    in further computations performed at\n   upstream nodes.  These lists may also
    be factored into route\n   exclusions [RFC4874].\n   Note that there is no ordering
    requirement on any of the TLVs within\n   the IF_ID Error Spec, and no implication
    should be drawn from the\n   ordering of the TLVs in a received IF_ID Error Spec.\n
    \  The decision of precisely which TLV types a reporting node includes\n   is
    dependent on the specific capabilities of the node, and is outside\n   the scope
    of this document.\n"
  title: 6.3.4.  Additional Crankback TLVs
- contents:
  - "6.3.5.  Grouping TLVs by Failure Location\n   Further guidance as to the inclusion
    of crankback TLVs can be given\n   by grouping the TLVs according to the location
    of the failure and the\n   context within which it is reported.  For example,
    a TLV that reports\n   an area identifier would only need to be included as the
    crankback\n   error report transits an area boundary.\n   Resource Failure\n            6
    \     DOWNSTREAM_LABEL\n            7      UPSTREAM_LABEL\n   Interface Failures\n
    \           1      IPv4\n            2      IPv6\n            3      IF_INDEX\n
    \           4      COMPONENT_IF_DOWNSTREAM (obsoleted)\n            5      COMPONENT_IF_UPSTREAM
    \  (obsoleted)\n           12      ERO_CONTEXT\n           13      ERO_NEXT_CONTEXT\n
    \          14      PREVIOUS_HOP_IPv4\n           15      PREVIOUS_HOP_IPv6\n           16
    \     INCOMING_IPv4\n           17      INCOMING_IPv6\n           18      INCOMING_IF_INDEX\n
    \          19      INCOMING_DOWN_LABEL\n           20      INCOMING_UP_LABEL\n
    \  Node Failures\n            8      NODE_ID\n           21      REPORTING_NODE_ID\n
    \  Area Failures\n            9      OSPF_AREA\n           10      ISIS_AREA\n
    \          22      REPORTING_OSPF_AREA\n           23      REPORTING_ISIS_AREA\n
    \          25      PROPOSED_ERO\n           26      NODE_EXCLUSIONS\n           27
    \     LINK_EXCLUSIONS\n   AS Failures\n           11      AUTONOMOUS_SYSTEM\n
    \          24      REPORTING_AS\n   Although discussion of aggregation of crankback
    information is out of\n   the scope of this document, it should be noted that
    this topic is\n   closely aligned to the information presented here.  Aggregation
    is\n   discussed further in Section 6.4.5.\n"
  title: 6.3.5.  Grouping TLVs by Failure Location
- contents:
  - "6.3.6.  Alternate Path Identification\n   No new object is used to distinguish
    between Path/Resv messages for\n   an alternate LSP.  Thus, the alternate LSP
    uses the same SESSION and\n   SENDER_TEMPLATE/FILTER_SPEC objects as the ones
    used for the initial\n   LSP under re-routing.\n"
  title: 6.3.6.  Alternate Path Identification
- contents:
  - '6.4.  Action on Receiving Crankback Information

    '
  title: 6.4.  Action on Receiving Crankback Information
- contents:
  - "6.4.1.  Re-Route Attempts\n   As described in Section 2, a node receiving crankback
    information in\n   a PathErr must first check to see whether it is allowed to
    perform\n   re-routing.  This is indicated by the Re-routing Flags in the\n   LSP_ATTRIBUTES
    object during an LSP setup request.\n   If a node is not allowed to perform re-routing
    it should forward the\n   PathErr message, or if it is the ingress report the
    LSP as having\n   failed.\n   If re-routing is allowed, the node should attempt
    to compute a path\n   to the destination using the original (received) explicit
    path and\n   excluding the failed/blocked node/link.  The new path should be added\n
    \  to an LSP setup request as an explicit route and signaled.\n   LSRs performing
    crankback re-routing should store all received\n   crankback information for an
    LSP until the LSP is successfully\n   established or until the node abandons its
    attempts to re-route the\n   LSP.  On the next crankback re-routing path computation
    attempt, the\n   LSR should exclude all the failed nodes, links and resources
    reported\n   from previous attempts.\n   It is an implementation decision whether
    the crankback information is\n   discarded immediately upon a successful LSP establishment
    or retained\n   for a period in case the LSP fails.\n"
  title: 6.4.1.  Re-Route Attempts
- contents:
  - "6.4.2.  Location Identifiers of Blocked Links or Nodes\n   In order to compute
    an alternate path by crankback re-routing, it is\n   necessary to identify the
    blocked links or nodes and their locations.\n   The common identifier of each
    link or node in an MPLS network should\n   be specified.  Both protocol-independent
    and protocol-dependent\n   identifiers may be specified.  Although a general identifier
    that is\n   independent of other protocols is preferable, there are a couple of\n
    \  restrictions on its use as described in the following subsection.\n   In link
    state protocols such as OSPF and IS-IS, each link and node in\n   a network can
    be uniquely identified, for example, by the context of\n   a TE Router ID and
    the Link ID.  If the topology and resource\n   information obtained by OSPF advertisements
    is used to compute a\n   constraint-based path, the location of a blockage can
    be represented\n   by such identifiers.\n   Note that when the routing-protocol-specific
    link identifiers are\n   used, the Re-routing Flag on the LSP setup request must
    have been set\n   to show support for boundary or segment-based re-routing.\n
    \  In this document, we specify routing protocol specific link and node\n   identifiers
    for OSPFv2, OSPFv3, and IS-IS for IPv4 and IPv6.  These\n   identifiers may only
    be used if segment-based re-routing is\n   supported, as indicated by the Routing
    Behavior flag on the LSP setup\n   request.\n"
  title: 6.4.2.  Location Identifiers of Blocked Links or Nodes
- contents:
  - "6.4.3.  Locating Errors within Loose or Abstract Nodes\n   The explicit route
    on the original LSP setup request may contain a\n   loose or an Abstract Node.
    \ In these cases, the crankback information\n   may refer to links or nodes that
    were not in the original explicit\n   route.\n   In order to compute a new path,
    the repair point may need to identify\n   the pair of hops (or nodes) in the explicit
    route between which the\n   error/blockage occurred.\n   To assist this, the crankback
    information reports the top two hops of\n   the explicit route as received at
    the reporting node.  The first hop\n   will likely identify the node or the link,
    the second hop will\n   identify a 'next' hop from the original explicit route.\n"
  title: 6.4.3.  Locating Errors within Loose or Abstract Nodes
- contents:
  - "6.4.4.  When Re-Routing Fails\n   When a node cannot or chooses not to perform
    crankback re-routing, it\n   must forward the PathErr message further upstream.\n
    \  However, when a node was responsible for expanding or replacing the\n   explicit
    route as the LSP setup was processed, it MUST update the\n   crankback information
    with regard to the explicit route that it\n   received.  Only if this is done
    will the upstream nodes stand a\n   chance of successfully routing around the
    problem.\n"
  title: 6.4.4.  When Re-Routing Fails
- contents:
  - "6.4.5.  Aggregation of Crankback Information\n   When a setup blocking error
    or an error in an established LSP occurs\n   and crankback information is sent
    in an error notification message,\n   an upstream node may choose to attempt crankback
    re-routing.  If that\n   node's attempts at re-routing fail, the node will accumulate
    a set of\n   failure information.  When the node gives up, it MUST propagate the\n
    \  failure message further upstream and include crankback information\n   when
    it does so.\n   Including a full list of all failures that have occurred due to\n
    \  multiple crankback failures by multiple repair point LSRs downstream\n   could
    lead to too much signaled information using the protocol\n   extensions described
    in this document.  A compression mechanism for\n   such information is available
    using TLVs 26 and 27.  These TLVs allow\n   for a more concise accumulation of
    failure information as crankback\n   failures are propagated upstream.\n   Aggregation
    may involve reporting all links from a node as unusable\n   by flagging the node
    as unusable, flagging an ABR as unusable when\n   there is no downstream path
    available, or including a TLV of type 9\n   which results in the exclusion of
    the entire area, and so on.  The\n   precise details of how aggregation of crankback
    information is\n   performed are beyond the scope of this document.\n"
  title: 6.4.5.  Aggregation of Crankback Information
- contents:
  - '6.5.  Notification of Errors

    '
  title: 6.5.  Notification of Errors
- contents:
  - "6.5.1.  ResvErr Processing\n   As described above, the resource allocation failure
    for RSVP-TE may\n   occur on the reverse path when the Resv message is being processed.\n
    \  In this case, it is still useful to return the received crankback\n   information
    to the ingress LSR.  However, when the egress LSR\n   receives the ResvErr message,
    per [RFC2205] it still has the option\n   of re-issuing the Resv with different
    resource requirements (although\n   not on an alternate path).\n   When a ResvErr
    carrying crankback information is received at an\n   egress LSR, the egress LSR
    MAY ignore this object and perform the\n   same actions that it would perform
    for any other ResvErr.  However,\n   if the egress LSR supports the crankback
    extensions defined in this\n   document, and after all local recovery procedures
    have failed, it\n   SHOULD generate a PathErr message carrying the crankback information\n
    \  and send it to the ingress LSR.\n   If a ResvErr reports on more than one FILTER_SPEC
    (because the Resv\n   carried more than one FILTER_SPEC) then only one set of
    crankback\n   information should be present in the ResvErr and it should apply
    to\n   all FILTER_SPEC carried.  In this case, it may be necessary per\n   [RFC2205]
    to generate more than one PathErr.\n"
  title: 6.5.1.  ResvErr Processing
- contents:
  - "6.5.2.  Notify Message Processing\n   [RFC3473] defines the Notify message to
    enhance error reporting in\n   RSVP-TE networks.  This message is not intended
    to replace the\n   PathErr and ResvErr messages.  The Notify message is sent to\n
    \  addresses requested on the Path and Resv messages.  These addresses\n   could
    (but need not) identify the ingress and egress LSRs,\n   respectively.\n   When
    a network error occurs, such as the failure of link hardware,\n   the LSRs that
    detect the error MAY send Notify messages to the\n   requested addresses.  The
    type of error that causes a Notify message\n   to be sent is an implementation
    detail.\n   In the event of a failure, an LSR that supports [RFC3473] and the\n
    \  crankback extensions defined in this document MAY choose to send a\n   Notify
    message carrying crankback information.  This would ensure a\n   speedier report
    of the error to the ingress and/or egress LSRs.\n"
  title: 6.5.2.  Notify Message Processing
- contents:
  - "6.6.  Error Values\n   Error values for the Error Code \"Admission Control Failure\"
    are\n   defined in [RFC2205].  Error values for the error code \"Routing\n   Problem\"
    are defined in [RFC3209] and [RFC3473].\n   A new error value is defined for the
    error code \"Routing Problem\".\n   \"Re-routing limit exceeded\" indicates that
    re-routing has failed\n   because the number of crankback re-routing attempts
    has gone beyond\n   the predetermined threshold at an individual LSR.\n"
  title: 6.6.  Error Values
- contents:
  - "6.7.  Backward Compatibility\n   It is recognized that not all nodes in an RSVP-TE
    network will\n   support the extensions defined in this document.  It is important\n
    \  that an LSR that does not support these extensions can continue to\n   process
    a PathErr, ResvErr, or Notify message even if it carries the\n   newly defined
    IF_ID ERROR_SPEC information (TLVs).\n   This document does not introduce any
    backward compatibility issues\n   provided that existing implementations conform
    to the TLV processing\n   rules defined in [RFC3471] and [RFC3473].\n"
  title: 6.7.  Backward Compatibility
- contents:
  - "7.  LSP Recovery Considerations\n   LSP recovery is performed to recover an established
    LSP when a\n   failure occurs along the path.  In the case of LSP recovery, the\n
    \  extensions for crankback re-routing explained above can be applied\n   for
    improving performance.  This section gives an example of applying\n   the above
    extensions to LSP recovery.  The goal of this example is to\n   give a general
    overview of how this might work, and not to give a\n   detailed procedure for
    LSP recovery.\n   Although there are several techniques for LSP recovery, this
    section\n   explains the case of on-demand LSP recovery, which attempts to set
    up\n   a new LSP on demand after detecting an LSP failure.\n"
  title: 7.  LSP Recovery Considerations
- contents:
  - "7.1.  Upstream of the Fault\n   When an LSR detects a fault on an adjacent downstream
    link or node, a\n   PathErr message is sent upstream.  In GMPLS, the ERROR_SPEC
    object\n   may carry a Path_State_Remove_Flag indication.  Each LSR receiving\n
    \  the message then releases the corresponding LSP.  (Note that if the\n   state
    removal indication is not present on the PathErr message, the\n   ingress node
    MUST issue a PathTear message to cause the resources to\n   be released.) If the
    failed LSP has to be recovered at an upstream\n   LSR, the IF_ID ERROR SPEC that
    includes the location information of\n   the failed link or node is included in
    the PathErr message.  The\n   ingress, intermediate area border LSR, or indeed
    any repair point\n   permitted by the Re-routing Flags, that receives the PathErr
    message\n   can terminate the message and then perform alternate routing.\n   In
    a flat network, when the ingress LSR receives the PathErr message\n   with the
    IF_ID ERROR_SPEC TLVs, it computes an alternate path around\n   the blocked link
    or node satisfying the QoS guarantees.  If an\n   alternate path is found, a new
    Path message is sent over this path\n   toward the egress LSR.\n   In a network
    segmented into areas, the following procedures can be\n   used.  As explained
    in Section 5.4, the LSP recovery behavior is\n   indicated in the Flags field
    of the LSP_ATTRIBUTES object of the Path\n   message.  If the Flags indicate \"End-to-end
    re-routing\", the PathErr\n   message is returned all the way back to the ingress
    LSR, which may\n   then issue a new Path message along another path, which is
    the same\n   procedure as in the flat network case above.\n   If the Flags field
    indicates Boundary re-routing, the ingress area\n   border LSR MAY terminate the
    PathErr message and then perform\n   alternate routing within the area for which
    the area border LSR is\n   the ingress LSR.\n   If the Flags field indicates segment-based
    re-routing, any node MAY\n   apply the procedures described above for Boundary
    re-routing.\n"
  title: 7.1.  Upstream of the Fault
- contents:
  - "7.2.  Downstream of the Fault\n   This section only applies to errors that occur
    after an LSP has been\n   established.  Note that an LSR that generates a PathErr
    with\n   Path_State_Remove Flag SHOULD also send a PathTear downstream to\n   clean
    up the LSP.\n   A node that detects a fault and is downstream of the fault MAY
    send a\n   PathErr and/or Notify message containing an IF_ID ERROR SPEC that\n
    \  includes the location information of the failed link or node, and MAY\n   send
    a PathTear to clean up the LSP at all other downstream nodes.\n   However, if
    the reservation style for the LSP is Shared Explicit (SE)\n   the detecting LSR
    MAY choose not to send a PathTear -- this leaves\n   the downstream LSP state
    in place and facilitates make-before-break\n   repair of the LSP re-utilizing
    downstream resources.  Note that if\n   the detecting node does not send a PathTear
    immediately, then the\n   unused state will timeout according to the normal rules
    of [RFC2205].\n   At a well-known merge point, an ABR or an ASBR, a similar decision\n
    \  might also be made so as to better facilitate make-before-break\n   repair.
    \ In this case, a received PathTear might be 'absorbed' and\n   not propagated
    further downstream for an LSP that has an SE\n   reservation style.  Note, however,
    that this is a divergence from the\n   protocol and might severely impact normal
    tear-down of LSPs.\n"
  title: 7.2.  Downstream of the Fault
- contents:
  - '8.  IANA Considerations

    '
  title: 8.  IANA Considerations
- contents:
  - "8.1.  Error Codes\n   IANA maintains a registry called \"RSVP Parameters\" with
    a subregistry\n   called \"Error Codes and Globally-Defined Error Value Sub-Codes\".\n
    \  This subregistry includes the RSVP-TE \"Routing Problem\" error code\n   that
    is defined in [RFC3209].\n   IANA has assigned a new error value for the \"Routing
    Problem\" error\n   code as follows:\n      22     Re-routing limit exceeded.\n"
  title: 8.1.  Error Codes
- contents:
  - "8.2.  IF_ID_ERROR_SPEC TLVs\n   The IF_ID_ERROR_SPEC TLV type values defined
    in [RFC3471] are\n   maintained by IANA in the \"Interface_ID Types\" subregistry
    of the\n   \"GMPLS Signaling Parameters\" registry.\n   IANA has made new assignments
    from this subregistry for the new TLV\n   types defined in Section 6.2 of this
    document.\n"
  title: 8.2.  IF_ID_ERROR_SPEC TLVs
- contents:
  - "8.3.  LSP_ATTRIBUTES Object\n   IANA maintains an \"RSVP TE Parameters\" registry
    with an \"Attributes\n   Flags\" subregistry.  IANA has made three new allocations
    from this\n   registry as listed in Section 5.4.\n   These bits are defined for
    inclusion in the LSP Attributes TLV of the\n   LSP_ATTRIBUTES.  The values shown
    have been assigned by IANA.\n"
  title: 8.3.  LSP_ATTRIBUTES Object
- contents:
  - "9.  Security Considerations\n   The RSVP-TE trust model assumes that RSVP-TE
    neighbors and peers\n   trust each other to exchange legitimate and non-malicious
    messages.\n   This assumption is necessary in order that the signaling protocol
    can\n   function.\n   Note that this trust model is assumed to cascade.  That
    is, if an LSR\n   trusts its neighbors, it extends this trust to all LSRs that
    its\n   neighbor trusts.  This means that the trust model is usually applied\n
    \  across the whole network to create a trust domain.\n   Authentication of neighbor
    identity is already a standard provision\n   of RSVP-TE, as is the protection
    of messages against tampering and\n   spoofing.  Refer to [RFC2205], [RFC3209],
    and [RFC3473] for a\n   description of applicable security considerations.  These\n
    \  considerations and mechanisms are applicable to hop-by-hop message\n   exchanges
    (such as used for crankback propagation on PathErr\n   messages) and directed
    message exchanges (such as used for crankback\n   propagation on Notify messages).\n
    \  Key management may also be used with RSVP-TE to help to protect\n   against
    impersonation and message content falsification.  This\n   requires the maintenance,
    exchange, and configuration of keys on each\n   LSR.  Note that such maintenance
    may be especially onerous to\n   operators, hence it is important to limit the
    number of keys while\n   ensuring the required level of security.\n   This document
    does not introduce any protocol elements or message\n   exchanges that change
    the operation of RSVP-TE security.\n   However, it should be noted that crankback
    is envisaged as an inter-\n   domain mechanism, and as such it is likely that
    crankback information\n   is exchanged over trust domain borders.  In these cases,
    it is\n   expected that the information from within a neighboring domain would\n
    \  be of little or no value to the node performing crankback re-routing\n   and
    would be ignored.  In any case, it is highly likely that the\n   reporting domain
    will have applied some form of information\n   aggregation in order to preserve
    the confidentiality of its network\n   topology.\n   The issue of a direct attack
    by one domain upon another domain is\n   possible and domain administrators should
    apply policies to protect\n   their domains against the results of another domain
    attempting to\n   thrash LSPs by allowing them to set up before reporting them
    as\n   failed.  On the whole, it is expected that commercial contracts\n   between
    trust domains will provide a degree of protection.\n   A more serious threat might
    arise if a domain reports that neither it\n   nor its downstream neighbor can
    provide a path to the destination.\n   Such a report could be bogus in that the
    reporting domain might not\n   have allowed the downstream domain the chance to
    attempt to provide a\n   path.  Note that the same problem does not arise for
    nodes within a\n   domain because of the trust model.  This type of malicious
    behavior\n   is hard to overcome, but may be detected by use of indirect path\n
    \  computation requests sent direct to the falsely reported domain using\n   mechanisms
    such as the Path Computation Element [RFC4655].\n   Note that a separate document
    describing inter-domain MPLS and GMPLS\n   security considerations will be produced.\n
    \  Finally, it should be noted that while the extensions in this\n   document
    introduce no new security holes in the protocols, should a\n   malicious user
    gain protocol access to the network, the crankback\n   information might be used
    to prevent establishment of valid LSPs.\n   Thus, the existing security features
    available in RSVP-TE should be\n   carefully considered by all deployers and SHOULD
    be made available by\n   all implementations that offer crankback.  Note that
    the\n   implementation of re-routing attempt thresholds are also particularly\n
    \  useful in this context.\n"
  title: 9.  Security Considerations
- contents:
  - "10.  Acknowledgments\n   We would like to thank Juha Heinanen and Srinivas Makam
    for their\n   review and comments, and Zhi-Wei Lin for his considered opinions.\n
    \  Thanks, too, to John Drake for encouraging us to resurrect this\n   document
    and consider the use of the IF_ID ERROR SPEC object.  Thanks\n   for a welcome
    and very thorough review by Dimitri Papadimitriou.\n   Stephen Shew made useful
    comments for clarification through the ITU-T\n   liaison process.\n   Simon Marshall-Unitt
    made contributions to this document.\n   SecDir review was provided by Tero Kivinen.
    \ Thanks to Ross Callon\n   for useful discussions of prioritization of crankback
    re-routing\n   attempts.\n"
  title: 10.  Acknowledgments
- contents:
  - '11.  References

    '
  title: 11.  References
- contents:
  - "11.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in
    RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
    1997.\n   [RFC2205]  Braden, R., Ed., Zhang, L., Berson, S., Herzog, S., and S.\n
    \             Jamin, \"Resource ReSerVation Protocol (RSVP) -- Version 1\n              Functional
    Specification\", RFC 2205, September 1997.\n   [RFC3209]  Awduche, D., Berger,
    L., Gan, D., Li, T., Srinivasan, V.,\n              and G. Swallow, \"RSVP-TE:
    Extensions to RSVP for LSP\n              Tunnels\", RFC 3209, December 2001.\n
    \  [RFC3471]  Berger, L., Ed., \"Generalized Multi-Protocol Label\n              Switching
    (GMPLS) Signaling Functional Description\", RFC\n              3471, January 2003.\n
    \  [RFC3473]  Berger, L., Ed., \"Generalized Multi-Protocol Label\n              Switching
    (GMPLS) Signaling Resource ReserVation\n              Protocol-Traffic Engineering
    (RSVP-TE) Extensions\", RFC\n              3473, January 2003.\n   [RFC4420]  Farrel,
    A., Ed., Papadimitriou, D., Vasseur, J.-P., and A.\n              Ayyangar, \"Encoding
    of Attributes for Multiprotocol Label\n              Switching (MPLS) Label Switched
    Path (LSP) Establishment\n              Using Resource ReserVation Protocol-Traffic
    Engineering\n              (RSVP-TE)\", RFC 4420, February 2006.\n"
  title: 11.1.  Normative References
- contents:
  - "11.2.  Informative References\n   [ASH1]     G. Ash, ITU-T Recommendations E.360.1
    --> E.360.7, \"QoS\n              Routing & Related Traffic Engineering Methods
    for IP-,\n              ATM-, & TDM-Based Multiservice Networks\", May, 2002.\n
    \  [RFC2702]  Awduche, D., Malcolm, J., Agogbua, J., O'Dell, M., and J.\n              McManus,
    \"Requirements for Traffic Engineering Over MPLS\",\n              RFC 2702, September
    1999.\n   [RFC3469]  Sharma, V., Ed., and F. Hellstrand, Ed., \"Framework for\n
    \             Multi-Protocol Label Switching (MPLS)-based Recovery\", RFC\n              3469,
    February 2003.\n   [RFC4090]  Pan, P., Ed., Swallow, G., Ed., and A. Atlas, Ed.,
    \"Fast\n              Reroute Extensions to RSVP-TE for LSP Tunnels\", RFC 4090,\n
    \             May 2005.\n   [RFC4201]  Kompella, K., Rekhter, Y., and L. Berger,
    \"Link Bundling\n              in MPLS Traffic Engineering (TE)\", RFC 4201, October
    2005.\n   [RFC4655]  Farrel, A., Vasseur, J.-P., and J. Ash, \"A Path\n              Computation
    Element (PCE)-Based Architecture\", RFC 4655,\n              August 2006.\n   [RFC4874]
    \ Lee, CY., Farrel, A., and S. De Cnodder, \"Exclude Routes -\n              Extension
    to Resource ReserVation Protocol-Traffic\n              Engineering (RSVP-TE)\",
    RFC 4874, April 2007.\n   [PNNI]     ATM Forum, \"Private Network-Network Interface\n
    \             Specification Version 1.0 (PNNI 1.0)\", <af-pnni-0055.000>,\n              May
    1996.\n"
  title: 11.2.  Informative References
- contents:
  - "Appendix A.  Experience of Crankback in TDM-Based Networks\n   Experience of
    using release messages in TDM-based networks for\n   analogous repair and re-routing
    purposes provides some guidance.\n   One can use the receipt of a release message
    with a Cause Value (CV)\n   indicating \"link congestion\" to trigger a re-routing
    attempt at the\n   originating node.  However, this sometimes leads to problems.\n
    \      *--------------------*  *-----------------*\n       |                    |
    \ |                 |\n       |  N2 ----------- N3-|--|----- AT--- EO2  |\n       |
    \ |              | \\|  |    / |          |\n       |  |              |  |--|-
    \ /  |          |\n       |  |              |  |  | \\/   |          |\n       |
    \ |              |  |  | /\\   |          |\n       |  |              |  |--|-
    \ \\  |          |\n       |  |              | /|  |    \\ |          |\n       |
    \ N1 ----------- N4-|--|----- EO1        |\n       |                    |  |                 |\n
    \      *--------------------*  *-----------------*\n                A-1                  A-2\n
    \          Figure 1.  Example of network topology\n   Figure 1 illustrates four
    examples based on service-provider\n   experiences with respect to crankback (i.e.,
    explicit indication)\n   versus implicit indication through a release with CV.
    \ In this\n   example, N1, N2,N3, and N4 are located in one area (A-1), and AT,\n
    \  EO1, and EO2 are in another area (A-2).\n   Note that two distinct areas are
    used in this example to clearly\n   expose the issues.  In fact, the issues are
    not limited to multi-area\n   networks, but arise whenever path computation is
    distributed\n   throughout the network, for example, where loose routes, AS routes,\n
    \  or path computation domains are used.\n   1. A connection request from node
    N1 to EO1 may route to N4 and then\n      find \"all circuits busy\".  N4 returns
    a release message to N1 with\n      CV34 indicating all circuits busy.  Normally,
    a node such as N1 is\n      programmed to block a connection request when receiving
    CV34,\n      although there is good reason to try to alternately route the\n      connection
    request via N2 and N3.\n      Some service providers have implemented a technique
    called Route\n      Advance (RA), where if a node that is RA capable receives
    a\n      release message with CV34, it will use this as an implicit re-\n      route
    indication and try to find an alternate route for the\n      connection request
    if possible.  In this example, alternate route\n      N1-N2-N3-EO1 can be tried
    and may well succeed.\n   2. Suppose a connection request goes from N2 to N3 to
    AT while trying\n      to reach EO2 and is blocked at link AT-EO2.  Node AT returns
    a\n      CV34 and with RA, N2 may try to re-route N2-N1-N4-AT-EO2, but of\n      course
    this fails again.  The problem is that N2 does not realize\n      where this blocking
    occurred based on the CV34, and in this case\n      there is no point in further
    alternate routing.\n   3. However, in another case of a connection request from
    N2 to E02,\n      suppose that link N3-AT is blocked.  In this case N3 should
    return\n      crankback information (and not CV34) so that N2 can alternate\n
    \     route to N1-N4-AT-EO2, which may well be successful.\n   4. In a final example,
    for a connection request from EO1 to N2, EO1\n      first tries to route the connection
    request directly to N3.\n      However, node N3 may reject the connection request
    even if there\n      is bandwidth available on link N3-EO1 (perhaps for priority\n
    \     routing considerations, e.g., reserving bandwidth for high\n      priority
    connection requests).  However, when N3 returns CV34 in\n      the release message,
    EO1 blocks the connection request (a normal\n      response to CV34 especially
    if E01-N4 is already known to be\n      blocked) rather than trying to alternate
    route through AT-N3-N2,\n      which might be successful.  If N3 returns crankback
    information,\n      EO1 could respond by trying the alternate route.\n      It
    is certainly the case that with topology exchange, such as\n      OSPF, the ingress
    LSR could infer the re-routing condition.\n      However, convergence of routing
    information is typically slower\n      than the expected LSP setup times.  One
    of the reasons for\n      crankback is to avoid the overhead of available-link-bandwidth\n
    \     flooding, and to more efficiently use local state information to\n      direct
    alternate routing at the ingress-LSR.\n   [ASH1] shows how event-dependent-routing
    can just use crankback, and\n   not available-link-bandwidth flooding, to decide
    on the re-route path\n   in the network through \"learning models\".  Reducing
    this flooding\n   reduces overhead and can lead to the ability to support much
    larger\n   AS sizes.\n   Therefore, the alternate routing should be indicated
    based on an\n   explicit indication (as in examples 3 and 4), and it is best to
    know\n   the following information separately:\n      a) where blockage/congestion
    occurred (as in examples 1-2)\n         and\n      b) whether alternate routing
    \"should\" be attempted even if there\n         is no \"blockage\" (as in example
    4).\n"
  title: Appendix A.  Experience of Crankback in TDM-Based Networks
- contents:
  - "Authors' Addresses\n   Adrian Farrel (Editor)\n   Old Dog Consulting\n   Phone:
    \ +44 (0) 1978 860944\n   EMail:  adrian@olddog.co.uk\n   Arun Satyanarayana\n
    \  Cisco Systems, Inc.\n   170 West Tasman Dr.\n   San Jose, CA 95134\n   Phone:
    \ +1 408 853-3206\n   EMail:  asatyana@cisco.com\n   Atsushi Iwata\n   NEC Corporation\n
    \  System Platforms Research Laboratories\n   1753 Shimonumabe Nakahara-ku,\n
    \  Kawasaki, Kanagawa, 211-8666, JAPAN\n   Phone: +81-(44)-396-2744\n   Fax:   +81-(44)-431-7612\n
    \  EMail: a-iwata@ah.jp.nec.com\n   Norihito Fujita\n   NEC Corporation\n   System
    Platforms Research Laboratories\n   1753 Shimonumabe Nakahara-ku,\n   Kawasaki,
    Kanagawa, 211-8666, JAPAN\n   Phone: +81-(44)-396-2091\n   Fax:   +81-(44)-431-7644\n
    \  EMail: n-fujita@bk.jp.nec.com\n   Gerald R. Ash\n   AT&T\n   EMail: gash5107@yahoo.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
