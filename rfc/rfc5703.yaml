- title: __initial_text__
  contents:
  - "     Sieve Email Filtering: MIME Part Tests, Iteration, Extraction,\n       \
    \                Replacement, and Enclosure\n"
- title: Abstract
  contents:
  - "Abstract\n   This document defines extensions to the Sieve email filtering\n\
    \   language to permit analysis and manipulation of the MIME body parts\n   of\
    \ an email message.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the BSD License.\n   This document may\
    \ contain material from IETF Documents or IETF\n   Contributions published or\
    \ made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Conventions Used in This Document ...............................3\n  \
    \ 3. Sieve Loops: Actions \"foreverypart\" and \"break\" .................3\n\
    \   4. Changes to Sieve Tests ..........................................4\n  \
    \    4.1. Test \"header\" ..............................................4\n  \
    \    4.2. Test \"address\" .............................................7\n  \
    \    4.3. Test \"exists\" ..............................................8\n  \
    \ 5. Action \"replace\" ................................................8\n  \
    \ 6. Action \"enclose\" ...............................................10\n  \
    \ 7. Action \"extracttext\" ...........................................11\n  \
    \ 8. Sieve Capability Strings .......................................11\n   9.\
    \ Examples .......................................................12\n      9.1.\
    \ Example 1 .................................................12\n      9.2. Example\
    \ 2 .................................................12\n      9.3. Example 3\
    \ .................................................13\n   10. Acknowledgements\
    \ ..............................................13\n   11. Security Considerations\
    \ .......................................14\n   12. IANA Considerations ...........................................14\n\
    \      12.1. foreverypart capability ..................................15\n  \
    \    12.2. mime capability ..........................................15\n    \
    \  12.3. replace capability .......................................15\n      12.4.\
    \ enclose capability .......................................16\n      12.5. extracttext\
    \ capability ...................................16\n   13. References ....................................................16\n\
    \      13.1. Normative References .....................................16\n  \
    \    13.2. Informative References ...................................17\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   MIME messages ([RFC2045]) are often complex objects, consisting\
    \ of\n   many parts and sub-parts.  This Sieve ([RFC5228]) extension defines\n\
    \   mechanisms for performing tests on MIME body parts, looping through\n   the\
    \ MIME body parts, extracting information from a MIME body part,\n   changing\
    \ the contents of a MIME body part, and enclosing the entire\n   message within\
    \ a wrapper.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   Conventions for notations are as in\
    \ [RFC5228], Section 1.1.\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: '3.  Sieve Loops: Actions "foreverypart" and "break"'
  contents:
  - "3.  Sieve Loops: Actions \"foreverypart\" and \"break\"\n   The base Sieve language\
    \ has no looping mechanism.  Given that\n   messages may contain multiple parts,\
    \ in order to support filters that\n   apply to any and all parts, we introduce\
    \ a new control command:\n   \"foreverypart\", which is an iterator that walks\
    \ though every MIME\n   part of a message, including nested parts, depth first,\
    \ and applies\n   the commands in the specified block to each of them.  The iterator\n\
    \   will start with the first MIME part (as its current context) and will\n  \
    \ execute a command block (Sieve commands enclosed by {...}).  Upon\n   completion\
    \ of this command block, the iterator advances to the next\n   MIME part (as its\
    \ current context) and executes the same command\n   block again.\n   The iterator\
    \ can be terminated prematurely by a new Sieve control\n   command, \"break\"\
    .\n   Usage:  foreverypart [\":name\" string] block\n   Usage:  break [\":name\"\
    \ string];\n   \"foreverypart\" commands can be nested inside other \"foreverypart\"\
    \n   commands.  When this occurs, the nested \"foreverypart\" iterates over\n\
    \   the MIME parts contained within the MIME part currently being\n   targeted\
    \ by the nearest enclosing \"foreverypart\" command.  (That is,\n   the inner\
    \ loop only operates on children of the bodypart currently\n   accessed by the\
    \ outer loop.)  If that MIME part is a terminal MIME\n   part (i.e., does not\
    \ contain other MIME parts), then the nested\n   \"foreverypart\" loop is simply\
    \ ignored.\n   Sieve implementations MAY limit the number of nested loops that\
    \ occur\n   within one another; however, they MUST support at least one nested\n\
    \   loop inside another loop.\n   If a name is given to a \"break\" command, it\
    \ terminates the closest\n   enclosing loop with the identical matching name.\
    \  (If a nested\n   \"foreverypart\" name is the same as a \"foreverypart\" name\
    \ in an outer\n   level, the outer level name is hidden.)  It is an error if there\
    \ is\n   no enclosing loop with that name.\n   If no name is given in a \"break\"\
    \ command (i.e., the \":name\" parameter\n   is omitted), the break command terminates\
    \ the closest enclosing loop.\n"
- title: 4.  Changes to Sieve Tests
  contents:
  - "4.  Changes to Sieve Tests\n   This specification extends the base Sieve \"header\"\
    , \"address\", and\n   \"exists\" tests to support targeting those tests at a\
    \ specific MIME\n   part or at all MIME parts in the enclosing scope.\n"
- title: 4.1.  Test "header"
  contents:
  - "4.1.  Test \"header\"\n   The \"header\" test is extended with the addition of\
    \ new \":mime\" and\n   \":anychild\" tagged arguments and their associated options.\n\
    \   Usage:  header [\":mime\"] [\":anychild\"] [MIMEOPTS]\n      [COMPARATOR]\
    \ [MATCH-TYPE]\n      <header-names: string-list> <key-list: string-list>\n  \
    \    The definition of [MIMEOPTS] is:\n   Syntax:  \":type\" / \":subtype\" /\
    \ \":contenttype\" /\n      \":param\" <param-list: string-list>\n   When the\
    \ \":mime\" tagged argument is present in the \"header\" test, it\n   will parse\
    \ the MIME header lines in the message so that tests can be\n   performed on specific\
    \ elements.  The \":anychild\" tagged argument may\n   only appear when the \"\
    :mime\" tagged argument is present, and only\n   modifies the semantics of the\
    \ \":mime\" tagged argument.  That is,\n   presence of the \":anychild\" in absence\
    \ of \":mime\" is an error.\n   When used outside the context of a \"foreverypart\"\
    \ iterator, and\n   without an \":anychild\" tagged argument, the \"header\" test\
    \ will\n   examine only the outer top-level [RFC5322] headers of the message.\n\
    \   When used inside the context of a \"foreverypart\" iterator, and\n   without\
    \ an \":anychild\" tagged argument, the \"header\" test will\n   examine the headers\
    \ associated with the current MIME part context\n   from the loop.\n   When used\
    \ outside the context of a \"foreverypart\" iterator, and with\n   an \":anychild\"\
    \ tagged argument, the \"header\" test will examine all\n   MIME body parts and\
    \ return true if any of them satisfies the test.\n   When used inside the context\
    \ of a \"foreverypart\" iterator, and with\n   an \":anychild\" tagged argument,\
    \ the \"header\" test will examine the\n   current MIME part context and all its\
    \ nested MIME body parts,\n   returning true if any of them satisfies the test.\n\
    \   The \"header\" test with the \":mime\" tagged argument can test various\n\
    \   aspects of certain structured MIME headers.  Implementations SHOULD\n   support\
    \ desegmentation, decoding, and charset translation of\n   parameter values encoded\
    \ according to [RFC2231] as part of this test.\n   Additionally, [RFC2047] describes\
    \ a process whereby [RFC5322] headers\n   can be encoded in various ways.  That\
    \ encoding is not strictly\n   allowed in MIME parameters; however, in practice,\
    \ it has been used in\n   many email implementations.  So, Sieve implementations\
    \ MAY decode\n   [RFC2047]-encoded words in parameter values as part of this test.\n\
    \   These options are available:\n   :type          for a \"Content-Type\" MIME\
    \ header field, parses and\n                  tests the value of the MIME type\
    \ specified in the\n                  header; for a \"Content-Disposition\" MIME\
    \ header field,\n                  parses and tests the value of the disposition\n\
    \                  specified in the header; for other MIME headers, uses\n   \
    \               a blank string for the test.\n   :subtype       for a \"Content-Type\"\
    \ MIME header field, parses and\n                  tests the value of the MIME\
    \ subtype specified in the\n                  header; for a \"Content-Disposition\"\
    \ MIME header field,\n                  uses a blank string for the test; for\
    \ other MIME\n                  headers, uses a blank string for the test.\n \
    \  :contenttype   for a \"Content-Type\" MIME header field, parses and\n     \
    \             tests the combined value of the MIME type and subtype\n        \
    \          specified in the header; for a \"Content-Disposition\"\n          \
    \        MIME header field, behaves the same as the \":type\"\n              \
    \    option; for other MIME headers, uses a blank string\n                  for\
    \ the test.\n   :param         parses the header looking for MIME parameters in\
    \ the\n                  header.  The supplied string-list lists the names of\n\
    \                  any parameters to be tested.  If any one named\n          \
    \        parameter value matches any of the test string values,\n            \
    \      the test will return true.\n   When the \":count\" option from [RFC5231]\
    \ is used, the following\n   applies:\n   a.  for \":type\", \":subtype\", or\
    \ \":contenttype\", return a count of the\n       number of headers that parsed\
    \ successfully\n   b.  for \":param\", return a count of the number of parameters\
    \ with the\n       given name that were found\n   Example:\n   require [\"mime\"\
    , \"fileinto\"];\n   if header :mime :type \"Content-Type\" \"image\"\n   {\n\
    \       fileinto \"INBOX.images\";\n   }\n   In this example, any message that\
    \ contains a MIME image type part at\n   the top-level is saved to the mailbox\
    \ \"INBOX.images\".\n   Example:\n   require [\"mime\", \"fileinto\"];\n   if\
    \ header :mime :anychild :contenttype\n             \"Content-Type\" \"text/html\"\
    \n   {\n       fileinto \"INBOX.html\";\n   }\n   In this example, any message\
    \ that contains any MIME part with a\n   content-type of \"text/html\" is saved\
    \ to the mailbox \"INBOX.html\".\n   Example:\n   require [\"mime\", \"foreverypart\"\
    , \"fileinto\"];\n   foreverypart\n   {\n       if allof (\n         header :mime\
    \ :param \"filename\" :contains\n            \"Content-Disposition\" \"important\"\
    ,\n         header :mime :subtype \"Content-Type\" \"pdf\",\n         size :over\
    \ \"100K\")\n       {\n           fileinto \"INBOX.important\";\n           break;\n\
    \       }\n   }\n   In this example, any message that contains a MIME part that\
    \ has a\n   content-disposition with a filename parameter containing the text\n\
    \   \"important\", has a content-subtype of \"pdf\" and is bigger than 100 Kb\n\
    \   is saved to the mailbox \"INBOX.important\".\n"
- title: 4.2.  Test "address"
  contents:
  - "4.2.  Test \"address\"\n   The \"address\" test is extended with the addition\
    \ of new \":mime\" and\n   \":anychild\" tagged arguments and their associated\
    \ options.\n   Usage:  address [\":mime\"] [\":anychild\"] [COMPARATOR]\n    \
    \  [ADDRESS-PART] [MATCH-TYPE]\n      <header-list: string-list> <key-list: string-list>\n\
    \   When the \":mime\" tagged argument is present in the \"address\" test, it\n\
    \   will parse the MIME header lines as if they were standard address\n   header\
    \ lines in a message so that tests can be performed on specific\n   elements.\n\
    \   The behavior of the \":anychild\" tagged argument and the interaction\n  \
    \ with the \"foreverypart\" iterator is the same as for the extended\n   \"header\"\
    \ test in Section 4.1.\n   That is,\n      the use of \"address\" when both the\
    \ \":mime\" and \":anychild\" tagged\n      arguments are omitted is the test\
    \ defined in [RFC5228], i.e., it\n      will *only* operate on top-level header\
    \ fields, whether or not it\n      is inside \"foreverypart\".\n      the use\
    \ of \"address\" with \":mime\" and no \":anychild\" operates on\n      the current\
    \ MIME part only (or on the top-level header fields, if\n      outside \"foreverypart\"\
    ).\n      the use of \"address\" with \":mime\" and \":anychild\" operates on\
    \ the\n      current MIME part and all of its descendants.\n   Example:\n   require\
    \ [\"mime\", \"fileinto\"];\n   if address :mime :is :all \"content-from\" \"\
    tim@example.com\"\n   {\n       fileinto \"INBOX.part-from-tim\";\n   }\n   In\
    \ this example, any message that contains a MIME Content-From header\n   at the\
    \ top-level matching the text \"tim@example.com\" is saved to the\n   mailbox\
    \ \"INBOX.part-from-tim\".\n"
- title: 4.3.  Test "exists"
  contents:
  - "4.3.  Test \"exists\"\n   The \"exists\" test is extended with the addition of\
    \ the new \":mime\"\n   and \":anychild\" tagged arguments and their associated\
    \ options.\n   Usage:  exists [\":mime\"] [\":anychild\"] <header-names: string-list>\n\
    \   When the \":mime\" tagged argument is present in the \"exists\" test, the\n\
    \   test is extended to check for the existence of MIME headers in MIME\n   parts.\n\
    \   The behavior of the \":anychild\" tagged argument and the interaction\n  \
    \ with the \"foreverypart\" iterator is the same as for the extended\n   \"header\"\
    \ test Section 4.1.\n   That is,\n      the use of \"exists\" when both the \"\
    :mime\" and \":anychild\" tagged\n      arguments are omitted is the test defined\
    \ in [RFC5228], i.e., it\n      will *only* operate on top-level header fields,\
    \ whether or not it\n      is inside \"foreverypart\".\n      the use of \"exists\"\
    \ with \":mime\" and no \":anychild\" operates on\n      the current MIME part\
    \ only (or on the top-level header fields, if\n      outside \"foreverypart\"\
    ).\n      the use of \"exists\" with \":mime\" and \":anychild\" operates on the\n\
    \      current MIME part and all of its descendants.\n   Example:\n   require\
    \ [\"mime\", \"fileinto\"];\n   if exists :mime :anychild \"content-md5\"\n  \
    \ {\n       fileinto \"INBOX.md5\";\n   }\n   In this example, any message that\
    \ contains a MIME Content-MD5 header\n   in any MIME part is saved to the mailbox\
    \ \"INBOX.md5\".\n"
- title: 5.  Action "replace"
  contents:
  - "5.  Action \"replace\"\n   Usage:  replace [\":mime\"] [\":subject\" string]\
    \ [\":from\" string]\n      <replacement: string>\n   The \"replace\" command\
    \ is defined to allow a MIME part to be replaced\n   with the text supplied in\
    \ the command.\n   When used in the context of a \"foreverypart\" iterator, the\
    \ MIME part\n   to be replaced is the \"current\" MIME part.  If the current MIME\n\
    \   context is a multipart MIME part, the entire multipart MIME part is\n   replaced,\
    \ which would alter the MIME structure of the message by\n   eliminating all of\
    \ the children of the multipart part.  (Replacing a\n   non-multipart MIME part\
    \ within a \"foreverypart\" loop context does not\n   alter the overall message\
    \ structure.)  If the MIME structure is\n   altered, the change takes effect immediately:\
    \ the \"foreverypart\"\n   iterator that is executing does not go into the no-longer\
    \ existing\n   body parts, and subsequent \"foreverypart\" iterators would use\
    \ the new\n   message structure.\n   When used outside the context of a \"foreverypart\"\
    \ loop, the MIME part\n   to be replaced is the entire message.\n   If the \"\
    :mime\" parameter is not specified, the replacement string is\n   a text/plain\
    \ part in UTF-8 [RFC3629].\n   If the \":mime\" parameter is specified, then the\
    \ replacement string\n   is, in fact, a MIME entity as defined in [RFC2045], Section\
    \ 2.4,\n   including both MIME headers and content.\n   If the entire message\
    \ is being replaced, the optional \":subject\"\n   parameter specifies a subject\
    \ line to attach to the message that is\n   generated.  UTF-8 characters can be\
    \ used in the string argument;\n   implementations MUST convert the string to\
    \ [RFC2047]-encoded words if\n   and only if non-ASCII characters are present.\
    \  If the \":subject\"\n   parameter is used, implementations MUST preserve any\
    \ previous Subject\n   header as an Original-Subject header.  Implementations\
    \ MUST preserve\n   all other header fields from the original message with the\
    \ exception\n   of those relating to the MIME structure that is being replaced.\n\
    \   If the entire message is being replaced, as an indication that the\n   message\
    \ is no longer as created by the original author of the\n   message, the optional\
    \ \":from\" parameter may be used to specify an\n   alternate address to use in\
    \ the From field of the message that is\n   generated.  The string must specify\
    \ a valid [RFC5322] mailbox-list.\n   Implementations SHOULD check the syntax\
    \ and generate an error when a\n   syntactically invalid \":from\" parameter is\
    \ specified.\n   Implementations MAY also impose restrictions on what addresses\
    \ can be\n   specified in a \":from\" parameter; it is suggested that values that\n\
    \   fail such a validity check simply be ignored rather than causing the\n   \"\
    replace\" action to fail.  If the From header is changed,\n   implementations\
    \ MUST preserve the previous From header as an\n   Original-From header.\n   Implementations\
    \ that support the \"editheader\" extension [RFC5293]\n   MUST ensure that any\
    \ Original-Subject or Original-From headers added\n   by the system cannot be\
    \ modified or removed.  Implementations MAY\n   prevent the addition of Original-Subject\
    \ and Orignal-From headers via\n   the \"editheader\" extension.\n   If \":mime\"\
    \ is specified and either \":subject\" or \":from\" is\n   specified, the \":subject:\"\
    \ or \":from\" parameter MUST be ignored.\n   This SHOULD be flagged as a compilation\
    \ error.\n"
- title: 6.  Action "enclose"
  contents:
  - "6.  Action \"enclose\"\n   Usage:  enclose <:subject string> <:headers string-list>\
    \ string\n   A new Sieve action command is defined to allow an entire message\
    \ to\n   be enclosed as an attachment to a new message.  After enclosure,\n  \
    \ subsequent actions affecting the message header or content, as well\n   as tests\
    \ operating on the MIME structure or accessing MIME header\n   fields, use the\
    \ newly created message instead of the original\n   message; this means that any\
    \ use of a \"replace\" action or other\n   similar actions should be executed\
    \ before the \"enclose\" action.\n   If multiple \"enclose\" actions are executed\
    \ by a script, the message\n   is enclosed multiple times.  (If a Sieve script\
    \ desires to choose\n   between different enclosures, or wants to delay the enclosure\
    \ to the\n   end of the script, it can use variables with appropriate tests\n\
    \   [RFC5229].)\n   This action does not affect messages that are forwarded via\
    \ a\n   \"redirect\" action.\n   Specifically, the original message becomes a\
    \ multipart/mixed message\n   with two parts: a text/plain portion with the string\
    \ argument as its\n   body, and a message/rfc822 portion with the original message\n\
    \   enclosed.  The Content-Type: header field becomes multipart/mixed.\n   The\
    \ optional Subject: header is specified by the \":subject\" argument;\n   if not\
    \ present, the subject will be taken from the enclosed message.\n   Any headers\
    \ specified by \":headers\" are copied from the old message\n   into the new message.\
    \  If not specified by \":headers\", Date: and\n   From: headers should be synthesized\
    \ to reflect the current date and\n   the user running the Sieve action.\n"
- title: 7.  Action "extracttext"
  contents:
  - "7.  Action \"extracttext\"\n   Usage:  extracttext [MODIFIER] [\":first\" number]\
    \ <varname: string>\n   The \"extracttext\" action may be used within the context\
    \ of a\n   \"foreverypart\" loop and is used to store text into a variable as\n\
    \   defined by [RFC5229].  Servers MUST support transcoding of any\n   textual\
    \ body part into UTF-8 for use with this action.  This requires\n   decoding any\
    \ transfer encoding as well as transcoding from the\n   indicated character set\
    \ into UTF-8.  It stores at most \":first\"\n   characters of the transcoded content\
    \ of the current MIME body part in\n   the variable identified by varname.  If\
    \ the \":first\" parameter is not\n   present, the whole content of the current\
    \ MIME body part is stored.\n   In either case, the actually stored data MAY be\
    \ truncated to conform\n   to implementation specific limit on variable length\
    \ and/or on MIME\n   body part length.  If the transfer encoding or character\
    \ set is\n   unrecognized by the implementation or recognized but invalid, an\n\
    \   empty string will result.\n   If \"extracttext\" is used outside the context\
    \ of a \"foreverypart\"\n   loop, the action will set the variable identified\
    \ by varname to the\n   empty string.  This SHOULD be flagged as a compilation\
    \ error.\n   Modifiers are applied on the extracted text before it is stored in\n\
    \   the variable.\n"
- title: 8.  Sieve Capability Strings
  contents:
  - "8.  Sieve Capability Strings\n   A Sieve implementation that defines the \"foreverypart\"\
    \ and \"break\"\n   actions will advertise the capability string \"foreverypart\"\
    .\n   A Sieve implementation that defines the \":mime\" and \":anychild\"\n  \
    \ tagged arguments to the \"header\", \"address\", and \"exists\" commands\n \
    \  will advertise the capability string \"mime\".\n   A Sieve implementation that\
    \ defines the \"replace\" action will\n   advertise the capability string \"replace\"\
    .\n   A Sieve implementation that defines the \"enclose\" action will\n   advertise\
    \ the capability string \"enclose\".\n   A Sieve implementation that defines the\
    \ \"extracttext\" action will\n   advertise the capability string \"extracttext\"\
    .  Note that to be\n   useful, the \"extracttext\" action also requires the \"\
    variables\"\n   [RFC5229] and \"foreverypart\" capabilities.\n"
- title: 9.  Examples
  contents:
  - '9.  Examples

    '
- title: 9.1.  Example 1
  contents:
  - "9.1.  Example 1\n   Consider a Sieve script to replace some of the Windows executable\n\
    \   attachments in a message.  (The actual list of executable types and\n   extensions\
    \ is considerably longer and constantly changing.  The tests\n   shown here are\
    \ an example only.)  Such a script might look like this:\n   require [ \"foreverypart\"\
    , \"mime\", \"replace\" ];\n   foreverypart\n   {\n     if anyof (\n         \
    \   header :mime :contenttype :is\n              \"Content-Type\" \"application/exe\"\
    ,\n            header :mime :param \"filename\"\n              :matches [\"Content-Type\"\
    , \"Content-Disposition\"] \"*.com\" )\n     {\n       replace \"Executable attachment\
    \ removed by user filter\";\n     }\n   }\n"
- title: 9.2.  Example 2
  contents:
  - "9.2.  Example 2\n   Consider a Sieve script to warn the user about some of the\
    \ executable\n   attachment types.  (The actual list of executable types and\n\
    \   extensions is considerably longer and constantly changing.  The tests\n  \
    \ shown here are an example only.)  Such a script might look like this:\n   require\
    \ [ \"foreverypart\", \"mime\", \"enclose\" ];\n   foreverypart\n   {\n     if\
    \ header :mime :param \"filename\"\n        :matches [\"Content-Type\", \"Content-Disposition\"\
    ]\n          [\"*.com\", \"*.exe\", \"*.vbs\", \"*.scr\",\n           \"*.pif\"\
    , \"*.hta\", \"*.bat\", \"*.zip\" ]\n     {\n       # these attachment types are\
    \ executable\n       enclose :subject \"Warning\" :text\n   WARNING! The enclosed\
    \ message contains executable attachments.\n   These attachment types may contain\
    \ a computer virus program\n   that can infect your computer and potentially damage\
    \ your data.\n   Before clicking on these message attachments, you should verify\n\
    \   with the sender that this message was sent by them and not a\n   computer\
    \ virus.\n   .\n   ;\n       break;\n     }\n   }\n"
- title: 9.3.  Example 3
  contents:
  - "9.3.  Example 3\n   A Sieve script to extract subject and text out of messages\
    \ from the\n   boss might look like this:\n   require [\"mime\", \"variables\"\
    , \"extracttext\"];\n   if header :contains \"from\" \"boss@example.org\"\n  \
    \ {\n     # :matches is used to get the value of the Subject header\n     if header\
    \ :matches \"Subject\" \"*\"\n     {\n       set \"subject\" \"${1}\";\n     }\n\
    \     # extract the first 100 characters of the first text/* part\n     foreverypart\n\
    \     {\n       if header :mime :type :is \"Content-Type\" \"text\"\n       {\n\
    \         extracttext :first 100 \"msgcontent\";\n         break;\n       }\n\
    \     }\n     # if it's not a 'for your information' message\n     if not header\
    \ :contains \"subject\" \"FYI:\"\n     {\n       # do something using ${subject}\
    \ and ${msgcontent}\n       # such as sending a notification using a\n       #\
    \ notification extension\n     }\n   }\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   Comments from members of the MTA Filters Working Group,\
    \ in particular\n   Ned Freed, Kjetil Torgrim Homme, Mark Mallett, Alexey Melnikov,\
    \ Aaron\n   Stone, and Nigel Swinson are gratefully acknowledged.\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   The \"enclose\" action creates an entirely new\
    \ message, as compared to\n   just redirecting or forwarding the existing message.\
    \  Therefore, any\n   site policies applicable to message submission should be\
    \ enforced.\n   The looping specification specified here provides easier access\
    \ to\n   information about the message contents, which may also be achieved\n\
    \   through other sieve tests.  This is not believed to raise any\n   additional\
    \ security issues beyond those for the Sieve \"envelope\" and\n   \"body\" [RFC5173]\
    \ tests.\n   Any change in message content may interfere with digital signature\n\
    \   mechanisms that include that content in the signed material.  In\n   particular,\
    \ using \"replace\" makes direct changes to the body content\n   and will affect\
    \ the body hash included in Domain Keys Identified Mail\n   (DKIM) signatures\
    \ [RFC4871], or the message signature used for Secure\n   MIME (S/MIME) [RFC3851],\
    \ Pretty Good Privacy (PGP) [RFC1991] or\n   OpenPGP [RFC4880].\n   It is not\
    \ possible to examine the MIME structure of decrypted content\n   in a multipart/encrypted\
    \ MIME part.\n   When \"enclose\" is used on a message containing a multipart/signed\n\
    \   MIME part, the Sieve implementation MUST ensure that the original\n   message\
    \ is copied octet-for-octet to maintain the validity of the\n   digital signature.\n\
    \   The system MUST be sized and restricted in such a manner that even\n   malicious\
    \ use of MIME part matching does not deny service to other\n   users of the host\
    \ system.\n   All of the security considerations given in the base Sieve\n   specification\
    \ also apply to these extensions.\n"
- title: 12.  IANA Considerations
  contents:
  - "12.  IANA Considerations\n   The Original-Subject and Original-From headers have\
    \ been registered\n   in the Permanent Message Header Fields registry.\n   The\
    \ following templates specify the IANA registrations of the Sieve\n   extensions\
    \ specified in this document.  This information has been\n   added to the IANA\
    \ registry of Sieve Extensions (currently found at\n   http://www.iana.org).\n"
- title: 12.1.  foreverypart capability
  contents:
  - "12.1.  foreverypart capability\n   To: iana@iana.org\n   Subject: Registration\
    \ of new Sieve extension\n   Capability name: foreverypart\n   Description: adds\
    \ the \"foreverypart\" and \"break\" actions for\n   iterating through MIME parts\
    \ of a message.\n   RFC number: RFC 5703\n   Contact address: The Sieve discussion\
    \ list\n   <ietf-mta-filters@imc.org>.\n"
- title: 12.2.  mime capability
  contents:
  - "12.2.  mime capability\n   To: iana@iana.org\n   Subject: Registration of new\
    \ Sieve extension\n   Capability name: mime\n   Description: adds the \":mime\"\
    \ and \":anychild\" tagged arguments to the\n   \"header\", \"address\", and \"\
    exists\" tests.  Adds the \":type\",\n   \":subtype\", \":contenttype\", and \"\
    :param\" options when \":mime\" is used\n   with the \"header\" test.\n   RFC\
    \ number: RFC 5703\n   Contact address: The Sieve discussion list\n   <ietf-mta-filters@imc.org>.\n"
- title: 12.3.  replace capability
  contents:
  - "12.3.  replace capability\n   To: iana@iana.org\n   Subject: Registration of\
    \ new Sieve extension\n   Capability name: replace\n   Description: adds the \"\
    replace\" action for replacing a MIME body part\n   of a message.\n   RFC number:\
    \ RFC 5703\n   Contact address: The Sieve discussion list\n   <ietf-mta-filters@imc.org>.\n"
- title: 12.4.  enclose capability
  contents:
  - "12.4.  enclose capability\n   To: iana@iana.org\n   Subject: Registration of\
    \ new Sieve extension\n   Capability name: enclose\n   Description: adds the \"\
    enclose\" action for enclosing a message with a\n   wrapper.\n   RFC number: RFC\
    \ 5703\n   Contact address: The Sieve discussion list\n   <ietf-mta-filters@imc.org>.\n"
- title: 12.5.  extracttext capability
  contents:
  - "12.5.  extracttext capability\n   To: iana@iana.org\n   Subject: Registration\
    \ of new Sieve extension\n   Capability name: extracttext\n   Description: adds\
    \ the \"extracttext\" action for extracting text from a\n   MIME body part.\n\
    \   RFC number: RFC 5703\n   Contact address: The Sieve discussion list\n   <ietf-mta-filters@imc.org>.\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [RFC2045]  Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n              Extensions (MIME) Part One: Format of Internet\
    \ Message\n              Bodies\", RFC 2045, November 1996.\n   [RFC2047]  Moore,\
    \ K., \"MIME (Multipurpose Internet Mail Extensions)\n              Part Three:\
    \ Message Header Extensions for Non-ASCII Text\",\n              RFC 2047, November\
    \ 1996.\n   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n\
    \              Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC2231]\
    \  Freed, N. and K. Moore, \"MIME Parameter Value and Encoded\n              Word\
    \ Extensions:\n              Character Sets, Languages, and Continuations\", RFC\
    \ 2231,\n              November 1997.\n   [RFC3629]  Yergeau, F., \"UTF-8, a transformation\
    \ format of ISO\n              10646\", STD 63, RFC 3629, November 2003.\n   [RFC5173]\
    \  Degener, J. and P. Guenther, \"Sieve Email Filtering: Body\n              Extension\"\
    , RFC 5173, April 2008.\n   [RFC5228]  Guenther, P. and T. Showalter, \"Sieve:\
    \ An Email Filtering\n              Language\", RFC 5228, January 2008.\n   [RFC5229]\
    \  Homme, K., \"Sieve Email Filtering: Variables Extension\",\n              RFC\
    \ 5229, January 2008.\n   [RFC5231]  Segmuller, W. and B. Leiba, \"Sieve Email\
    \ Filtering:\n              Relational Extension\", RFC 5231, January 2008.\n\
    \   [RFC5293]  Degener, J. and P. Guenther, \"Sieve Email Filtering:\n       \
    \       Editheader Extension\", RFC 5293, August 2008.\n   [RFC5322]  Resnick,\
    \ P., Ed., \"Internet Message Format\", RFC 5322,\n              October 2008.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [RFC1991]  Atkins, D., Stallings, W., and P.\
    \ Zimmermann, \"PGP Message\n              Exchange Formats\", RFC 1991, August\
    \ 1996.\n   [RFC3851]  Ramsdell, B., \"Secure/Multipurpose Internet Mail\n   \
    \           Extensions (S/MIME) Version 3.1 Message Specification\",\n       \
    \       RFC 3851, July 2004.\n   [RFC4871]  Allman, E., Callas, J., Delany, M.,\
    \ Libbey, M., Fenton,\n              J., and M. Thomas, \"DomainKeys Identified\
    \ Mail (DKIM)\n              Signatures\", RFC 4871, May 2007.\n   [RFC4880] \
    \ Callas, J., Donnerhacke, L., Finney, H., Shaw, D., and R.\n              Thayer,\
    \ \"OpenPGP Message Format\", RFC 4880, November 2007.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Tony Hansen\n   AT&T Laboratories\n   200 Laurel Ave.\n\
    \   Middletown, NJ  07748\n   USA\n   EMail: tony+sieveloop@maillennium.att.com\n\
    \   Cyrus Daboo\n   Apple Inc.\n   1 Infinite Loop\n   Cupertino, CA  95014\n\
    \   USA\n   EMail: cyrus@daboo.name\n   URI:   http://www.apple.com/\n"
