- contents:
  - '                          JSON Web Token (JWT)

    '
  title: __initial_text__
- contents:
  - "Abstract\n   JSON Web Token (JWT) is a compact, URL-safe means of representing\n
    \  claims to be transferred between two parties.  The claims in a JWT\n   are
    encoded as a JSON object that is used as the payload of a JSON\n   Web Signature
    (JWS) structure or as the plaintext of a JSON Web\n   Encryption (JWE) structure,
    enabling the claims to be digitally\n   signed or integrity protected with a Message
    Authentication Code\n   (MAC) and/or encrypted.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7519.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .
    . . . . .   4\n     1.1.  Notational Conventions  . . . . . . . . . . . . . .
    . . .   4\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . . . . .
    .   4\n   3.  JSON Web Token (JWT) Overview . . . . . . . . . . . . . . . .   6\n
    \    3.1.  Example JWT . . . . . . . . . . . . . . . . . . . . . . .   7\n   4.
    \ JWT Claims  . . . . . . . . . . . . . . . . . . . . . . . . .   8\n     4.1.
    \ Registered Claim Names  . . . . . . . . . . . . . . . . .   9\n       4.1.1.
    \ \"iss\" (Issuer) Claim  . . . . . . . . . . . . . . . .   9\n       4.1.2.  \"sub\"
    (Subject) Claim . . . . . . . . . . . . . . . .   9\n       4.1.3.  \"aud\" (Audience)
    Claim  . . . . . . . . . . . . . . .   9\n       4.1.4.  \"exp\" (Expiration Time)
    Claim . . . . . . . . . . . .   9\n       4.1.5.  \"nbf\" (Not Before) Claim  .
    . . . . . . . . . . . . .  10\n       4.1.6.  \"iat\" (Issued At) Claim . . .
    . . . . . . . . . . . .  10\n       4.1.7.  \"jti\" (JWT ID) Claim  . . . . .
    . . . . . . . . . . .  10\n     4.2.  Public Claim Names  . . . . . . . . . .
    . . . . . . . . .  10\n     4.3.  Private Claim Names . . . . . . . . . . . .
    . . . . . . .  10\n   5.  JOSE Header . . . . . . . . . . . . . . . . . . . .
    . . . . .  11\n     5.1.  \"typ\" (Type) Header Parameter . . . . . . . . . .
    . . . .  11\n     5.2.  \"cty\" (Content Type) Header Parameter . . . . . . .
    . . .  11\n     5.3.  Replicating Claims as Header Parameters . . . . . . . .
    .  12\n   6.  Unsecured JWTs  . . . . . . . . . . . . . . . . . . . . . . .  12\n
    \    6.1.  Example Unsecured JWT . . . . . . . . . . . . . . . . . .  12\n   7.
    \ Creating and Validating JWTs  . . . . . . . . . . . . . . . .  13\n     7.1.
    \ Creating a JWT  . . . . . . . . . . . . . . . . . . . . .  13\n     7.2.  Validating
    a JWT  . . . . . . . . . . . . . . . . . . . .  14\n     7.3.  String Comparison
    Rules . . . . . . . . . . . . . . . . .  15\n   8.  Implementation Requirements
    . . . . . . . . . . . . . . . . .  16\n   9.  URI for Declaring that Content is
    a JWT . . . . . . . . . . .  17\n   10. IANA Considerations . . . . . . . . .
    . . . . . . . . . . . .  17\n     10.1.  JSON Web Token Claims Registry . . .
    . . . . . . . . . .  17\n       10.1.1.  Registration Template  . . . . . . .
    . . . . . . . .  18\n       10.1.2.  Initial Registry Contents  . . . . . . .
    . . . . . .  18\n     10.2.  Sub-Namespace Registration of\n            urn:ietf:params:oauth:token-type:jwt
    . . . . . . . . . .  19\n       10.2.1.  Registry Contents  . . . . . . . . .
    . . . . . . . .  19\n     10.3.  Media Type Registration  . . . . . . . . . .
    . . . . . .  20\n       10.3.1.  Registry Contents  . . . . . . . . . . . . .
    . . . .  20\n     10.4.  Header Parameter Names Registration  . . . . . . . .
    . .  20\n       10.4.1.  Registry Contents  . . . . . . . . . . . . . . . . .
    \ 21\n   11. Security Considerations . . . . . . . . . . . . . . . . . . .  21\n
    \    11.1.  Trust Decisions  . . . . . . . . . . . . . . . . . . . .  21\n     11.2.
    \ Signing and Encryption Order . . . . . . . . . . . . . .  21\n   12. Privacy
    Considerations  . . . . . . . . . . . . . . . . . . .  22\n   13. References  .
    . . . . . . . . . . . . . . . . . . . . . . . .  22\n     13.1.  Normative References
    . . . . . . . . . . . . . . . . . .  22\n     13.2.  Informative References .
    . . . . . . . . . . . . . . . .  23\n   Appendix A.  JWT Examples . . . . . .
    . . . . . . . . . . . . . .  26\n     A.1.  Example Encrypted JWT . . . . . .
    . . . . . . . . . . . .  26\n     A.2.  Example Nested JWT  . . . . . . . . .
    . . . . . . . . . .  26\n   Appendix B.  Relationship of JWTs to SAML Assertions
    \ . . . . . .  28\n   Appendix C.  Relationship of JWTs to Simple Web Tokens (SWTs)
    . .  28\n   Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . . .
    \ 28\n   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .  29\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   JSON Web Token (JWT) is a compact claims representation
    format\n   intended for space constrained environments such as HTTP\n   Authorization
    headers and URI query parameters.  JWTs encode claims\n   to be transmitted as
    a JSON [RFC7159] object that is used as the\n   payload of a JSON Web Signature
    (JWS) [JWS] structure or as the\n   plaintext of a JSON Web Encryption (JWE) [JWE]
    structure, enabling\n   the claims to be digitally signed or integrity protected
    with a\n   Message Authentication Code (MAC) and/or encrypted.  JWTs are always\n
    \  represented using the JWS Compact Serialization or the JWE Compact\n   Serialization.\n
    \  The suggested pronunciation of JWT is the same as the English word\n   \"jot\".\n"
  - contents:
    - "1.1.  Notational Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
      \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"NOT
      RECOMMENDED\", \"MAY\", and\n   \"OPTIONAL\" in this document are to be interpreted
      as described in\n   \"Key words for use in RFCs to Indicate Requirement Levels\"
      [RFC2119].\n   The interpretation should only be applied when the terms appear
      in\n   all capital letters.\n"
    title: 1.1.  Notational Conventions
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The terms \"JSON Web Signature (JWS)\", \"Base64url Encoding\",
    \"Header\n   Parameter\", \"JOSE Header\", \"JWS Compact Serialization\", \"JWS\n
    \  Payload\", \"JWS Signature\", and \"Unsecured JWS\" are defined by the JWS\n
    \  specification [JWS].\n   The terms \"JSON Web Encryption (JWE)\", \"Content
    Encryption Key\n   (CEK)\", \"JWE Compact Serialization\", \"JWE Encrypted Key\",
    and \"JWE\n   Initialization Vector\" are defined by the JWE specification [JWE].\n
    \  The terms \"Ciphertext\", \"Digital Signature\", \"Message Authentication\n
    \  Code (MAC)\", and \"Plaintext\" are defined by the \"Internet Security\n   Glossary,
    Version 2\" [RFC4949].\n   These terms are defined by this specification:\n   JSON
    Web Token (JWT)\n      A string representing a set of claims as a JSON object
    that is\n      encoded in a JWS or JWE, enabling the claims to be digitally\n
    \     signed or MACed and/or encrypted.\n   JWT Claims Set\n      A JSON object
    that contains the claims conveyed by the JWT.\n   Claim\n      A piece of information
    asserted about a subject.  A claim is\n      represented as a name/value pair
    consisting of a Claim Name and a\n      Claim Value.\n   Claim Name\n      The
    name portion of a claim representation.  A Claim Name is\n      always a string.\n
    \  Claim Value\n      The value portion of a claim representation.  A Claim Value
    can be\n      any JSON value.\n   Nested JWT\n      A JWT in which nested signing
    and/or encryption are employed.  In\n      Nested JWTs, a JWT is used as the payload
    or plaintext value of an\n      enclosing JWS or JWE structure, respectively.\n
    \  Unsecured JWT\n      A JWT whose claims are not integrity protected or encrypted.\n
    \  Collision-Resistant Name\n      A name in a namespace that enables names to
    be allocated in a\n      manner such that they are highly unlikely to collide
    with other\n      names.  Examples of collision-resistant namespaces include:
    Domain\n      Names, Object Identifiers (OIDs) as defined in the ITU-T X.660 and\n
    \     X.670 Recommendation series, and Universally Unique IDentifiers\n      (UUIDs)
    [RFC4122].  When using an administratively delegated\n      namespace, the definer
    of a name needs to take reasonable\n      precautions to ensure they are in control
    of the portion of the\n      namespace they use to define the name.\n   StringOrURI\n
    \     A JSON string value, with the additional requirement that while\n      arbitrary
    string values MAY be used, any value containing a \":\"\n      character MUST
    be a URI [RFC3986].  StringOrURI values are\n      compared as case-sensitive
    strings with no transformations or\n      canonicalizations applied.\n   NumericDate\n
    \     A JSON numeric value representing the number of seconds from\n      1970-01-01T00:00:00Z
    UTC until the specified UTC date/time,\n      ignoring leap seconds.  This is
    equivalent to the IEEE Std 1003.1,\n      2013 Edition [POSIX.1] definition \"Seconds
    Since the Epoch\", in\n      which each day is accounted for by exactly 86400
    seconds, other\n      than that non-integer values can be represented.  See RFC
    3339\n      [RFC3339] for details regarding date/times in general and UTC in\n
    \     particular.\n"
  title: 2.  Terminology
- contents:
  - "3.  JSON Web Token (JWT) Overview\n   JWTs represent a set of claims as a JSON
    object that is encoded in a\n   JWS and/or JWE structure.  This JSON object is
    the JWT Claims Set.\n   As per Section 4 of RFC 7159 [RFC7159], the JSON object
    consists of\n   zero or more name/value pairs (or members), where the names are\n
    \  strings and the values are arbitrary JSON values.  These members are\n   the
    claims represented by the JWT.  This JSON object MAY contain\n   whitespace and/or
    line breaks before or after any JSON values or\n   structural characters, in accordance
    with Section 2 of RFC 7159\n   [RFC7159].\n   The member names within the JWT
    Claims Set are referred to as Claim\n   Names.  The corresponding values are referred
    to as Claim Values.\n   The contents of the JOSE Header describe the cryptographic
    operations\n   applied to the JWT Claims Set.  If the JOSE Header is for a JWS,
    the\n   JWT is represented as a JWS and the claims are digitally signed or\n   MACed,
    with the JWT Claims Set being the JWS Payload.  If the JOSE\n   Header is for
    a JWE, the JWT is represented as a JWE and the claims\n   are encrypted, with
    the JWT Claims Set being the plaintext encrypted\n   by the JWE.  A JWT may be
    enclosed in another JWE or JWS structure to\n   create a Nested JWT, enabling
    nested signing and encryption to be\n   performed.\n   A JWT is represented as
    a sequence of URL-safe parts separated by\n   period ('.') characters.  Each part
    contains a base64url-encoded\n   value.  The number of parts in the JWT is dependent
    upon the\n   representation of the resulting JWS using the JWS Compact\n   Serialization
    or JWE using the JWE Compact Serialization.\n"
  - contents:
    - "3.1.  Example JWT\n   The following example JOSE Header declares that the encoded
      object is\n   a JWT, and the JWT is a JWS that is MACed using the HMAC SHA-256\n
      \  algorithm:\n     {\"typ\":\"JWT\",\n      \"alg\":\"HS256\"}\n   To remove
      potential ambiguities in the representation of the JSON\n   object above, the
      octet sequence for the actual UTF-8 representation\n   used in this example
      for the JOSE Header above is also included\n   below.  (Note that ambiguities
      can arise due to differing platform\n   representations of line breaks (CRLF
      versus LF), differing spacing at\n   the beginning and ends of lines, whether
      the last line has a\n   terminating line break or not, and other causes.  In
      the\n   representation used in this example, the first line has no leading or\n
      \  trailing spaces, a CRLF line break (13, 10) occurs between the first\n   and
      second lines, the second line has one leading space (32) and no\n   trailing
      spaces, and the last line does not have a terminating line\n   break.)  The
      octets representing the UTF-8 representation of the JOSE\n   Header in this
      example (using JSON array notation) are:\n   [123, 34, 116, 121, 112, 34, 58,
      34, 74, 87, 84, 34, 44, 13, 10, 32,\n   34, 97, 108, 103, 34, 58, 34, 72, 83,
      50, 53, 54, 34, 125]\n   Base64url encoding the octets of the UTF-8 representation
      of the JOSE\n   Header yields this encoded JOSE Header value:\n     eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9\n
      \  The following is an example of a JWT Claims Set:\n     {\"iss\":\"joe\",\n
      \     \"exp\":1300819380,\n      \"http://example.com/is_root\":true}\n   The
      following octet sequence, which is the UTF-8 representation used\n   in this
      example for the JWT Claims Set above, is the JWS Payload:\n   [123, 34, 105,
      115, 115, 34, 58, 34, 106, 111, 101, 34, 44, 13, 10,\n   32, 34, 101, 120, 112,
      34, 58, 49, 51, 48, 48, 56, 49, 57, 51, 56,\n   48, 44, 13, 10, 32, 34, 104,
      116, 116, 112, 58, 47, 47, 101, 120, 97,\n   109, 112, 108, 101, 46, 99, 111,
      109, 47, 105, 115, 95, 114, 111,\n   111, 116, 34, 58, 116, 114, 117, 101, 125]\n
      \  Base64url encoding the JWS Payload yields this encoded JWS Payload\n   (with
      line breaks for display purposes only):\n     eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly\n
      \    9leGFtcGxlLmNvbS9pc19yb290Ijp0cnVlfQ\n   Computing the MAC of the encoded
      JOSE Header and encoded JWS Payload\n   with the HMAC SHA-256 algorithm and
      base64url encoding the HMAC value\n   in the manner specified in [JWS] yields
      this encoded JWS Signature:\n     dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk\n
      \  Concatenating these encoded parts in this order with period ('.')\n   characters
      between the parts yields this complete JWT (with line\n   breaks for display
      purposes only):\n     eyJ0eXAiOiJKV1QiLA0KICJhbGciOiJIUzI1NiJ9\n     .\n     eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt\n
      \    cGxlLmNvbS9pc19yb290Ijp0cnVlfQ\n     .\n     dBjftJeZ4CVP-mB92K27uhbUJU1p1r_wW1gFWFOEjXk\n
      \  This computation is illustrated in more detail in Appendix A.1 of\n   [JWS].
      \ See Appendix A.1 for an example of an encrypted JWT.\n"
    title: 3.1.  Example JWT
  title: 3.  JSON Web Token (JWT) Overview
- contents:
  - "4.  JWT Claims\n   The JWT Claims Set represents a JSON object whose members
    are the\n   claims conveyed by the JWT.  The Claim Names within a JWT Claims Set\n
    \  MUST be unique; JWT parsers MUST either reject JWTs with duplicate\n   Claim
    Names or use a JSON parser that returns only the lexically last\n   duplicate
    member name, as specified in Section 15.12 (\"The JSON\n   Object\") of ECMAScript
    5.1 [ECMAScript].\n   The set of claims that a JWT must contain to be considered
    valid is\n   context dependent and is outside the scope of this specification.\n
    \  Specific applications of JWTs will require implementations to\n   understand
    and process some claims in particular ways.  However, in\n   the absence of such
    requirements, all claims that are not understood\n   by implementations MUST be
    ignored.\n   There are three classes of JWT Claim Names: Registered Claim Names,\n
    \  Public Claim Names, and Private Claim Names.\n"
  - contents:
    - "4.1.  Registered Claim Names\n   The following Claim Names are registered in
      the IANA \"JSON Web Token\n   Claims\" registry established by Section 10.1.
      \ None of the claims\n   defined below are intended to be mandatory to use or
      implement in all\n   cases, but rather they provide a starting point for a set
      of useful,\n   interoperable claims.  Applications using JWTs should define
      which\n   specific claims they use and when they are required or optional.  All\n
      \  the names are short because a core goal of JWTs is for the\n   representation
      to be compact.\n"
    - contents:
      - "4.1.1.  \"iss\" (Issuer) Claim\n   The \"iss\" (issuer) claim identifies
        the principal that issued the\n   JWT.  The processing of this claim is generally
        application specific.\n   The \"iss\" value is a case-sensitive string containing
        a StringOrURI\n   value.  Use of this claim is OPTIONAL.\n"
      title: 4.1.1.  "iss" (Issuer) Claim
    - contents:
      - "4.1.2.  \"sub\" (Subject) Claim\n   The \"sub\" (subject) claim identifies
        the principal that is the\n   subject of the JWT.  The claims in a JWT are
        normally statements\n   about the subject.  The subject value MUST either
        be scoped to be\n   locally unique in the context of the issuer or be globally
        unique.\n   The processing of this claim is generally application specific.
        \ The\n   \"sub\" value is a case-sensitive string containing a StringOrURI\n
        \  value.  Use of this claim is OPTIONAL.\n"
      title: 4.1.2.  "sub" (Subject) Claim
    - contents:
      - "4.1.3.  \"aud\" (Audience) Claim\n   The \"aud\" (audience) claim identifies
        the recipients that the JWT is\n   intended for.  Each principal intended
        to process the JWT MUST\n   identify itself with a value in the audience claim.
        \ If the principal\n   processing the claim does not identify itself with
        a value in the\n   \"aud\" claim when this claim is present, then the JWT
        MUST be\n   rejected.  In the general case, the \"aud\" value is an array
        of case-\n   sensitive strings, each containing a StringOrURI value.  In the\n
        \  special case when the JWT has one audience, the \"aud\" value MAY be a\n
        \  single case-sensitive string containing a StringOrURI value.  The\n   interpretation
        of audience values is generally application specific.\n   Use of this claim
        is OPTIONAL.\n"
      title: 4.1.3.  "aud" (Audience) Claim
    - contents:
      - "4.1.4.  \"exp\" (Expiration Time) Claim\n   The \"exp\" (expiration time)
        claim identifies the expiration time on\n   or after which the JWT MUST NOT
        be accepted for processing.  The\n   processing of the \"exp\" claim requires
        that the current date/time\n   MUST be before the expiration date/time listed
        in the \"exp\" claim.\n   Implementers MAY provide for some small leeway,
        usually no more than\n   a few minutes, to account for clock skew.  Its value
        MUST be a number\n   containing a NumericDate value.  Use of this claim is
        OPTIONAL.\n"
      title: 4.1.4.  "exp" (Expiration Time) Claim
    - contents:
      - "4.1.5.  \"nbf\" (Not Before) Claim\n   The \"nbf\" (not before) claim identifies
        the time before which the JWT\n   MUST NOT be accepted for processing.  The
        processing of the \"nbf\"\n   claim requires that the current date/time MUST
        be after or equal to\n   the not-before date/time listed in the \"nbf\" claim.
        \ Implementers MAY\n   provide for some small leeway, usually no more than
        a few minutes, to\n   account for clock skew.  Its value MUST be a number
        containing a\n   NumericDate value.  Use of this claim is OPTIONAL.\n"
      title: 4.1.5.  "nbf" (Not Before) Claim
    - contents:
      - "4.1.6.  \"iat\" (Issued At) Claim\n   The \"iat\" (issued at) claim identifies
        the time at which the JWT was\n   issued.  This claim can be used to determine
        the age of the JWT.  Its\n   value MUST be a number containing a NumericDate
        value.  Use of this\n   claim is OPTIONAL.\n"
      title: 4.1.6.  "iat" (Issued At) Claim
    - contents:
      - "4.1.7.  \"jti\" (JWT ID) Claim\n   The \"jti\" (JWT ID) claim provides a
        unique identifier for the JWT.\n   The identifier value MUST be assigned in
        a manner that ensures that\n   there is a negligible probability that the
        same value will be\n   accidentally assigned to a different data object; if
        the application\n   uses multiple issuers, collisions MUST be prevented among
        values\n   produced by different issuers as well.  The \"jti\" claim can be
        used\n   to prevent the JWT from being replayed.  The \"jti\" value is a case-\n
        \  sensitive string.  Use of this claim is OPTIONAL.\n"
      title: 4.1.7.  "jti" (JWT ID) Claim
    title: 4.1.  Registered Claim Names
  - contents:
    - "4.2.  Public Claim Names\n   Claim Names can be defined at will by those using
      JWTs.  However, in\n   order to prevent collisions, any new Claim Name should
      either be\n   registered in the IANA \"JSON Web Token Claims\" registry established\n
      \  by Section 10.1 or be a Public Name: a value that contains a\n   Collision-Resistant
      Name.  In each case, the definer of the name or\n   value needs to take reasonable
      precautions to make sure they are in\n   control of the part of the namespace
      they use to define the Claim\n   Name.\n"
    title: 4.2.  Public Claim Names
  - contents:
    - "4.3.  Private Claim Names\n   A producer and consumer of a JWT MAY agree to
      use Claim Names that\n   are Private Names: names that are not Registered Claim
      Names\n   (Section 4.1) or Public Claim Names (Section 4.2).  Unlike Public\n
      \  Claim Names, Private Claim Names are subject to collision and should\n   be
      used with caution.\n"
    title: 4.3.  Private Claim Names
  title: 4.  JWT Claims
- contents:
  - "5.  JOSE Header\n   For a JWT object, the members of the JSON object represented
    by the\n   JOSE Header describe the cryptographic operations applied to the JWT\n
    \  and optionally, additional properties of the JWT.  Depending upon\n   whether
    the JWT is a JWS or JWE, the corresponding rules for the JOSE\n   Header values
    apply.\n   This specification further specifies the use of the following Header\n
    \  Parameters in both the cases where the JWT is a JWS and where it is a\n   JWE.\n"
  - contents:
    - "5.1.  \"typ\" (Type) Header Parameter\n   The \"typ\" (type) Header Parameter
      defined by [JWS] and [JWE] is used\n   by JWT applications to declare the media
      type [IANA.MediaTypes] of\n   this complete JWT.  This is intended for use by
      the JWT application\n   when values that are not JWTs could also be present
      in an application\n   data structure that can contain a JWT object; the application
      can use\n   this value to disambiguate among the different kinds of objects
      that\n   might be present.  It will typically not be used by applications when\n
      \  it is already known that the object is a JWT.  This parameter is\n   ignored
      by JWT implementations; any processing of this parameter is\n   performed by
      the JWT application.  If present, it is RECOMMENDED that\n   its value be \"JWT\"
      to indicate that this object is a JWT.  While\n   media type names are not case
      sensitive, it is RECOMMENDED that \"JWT\"\n   always be spelled using uppercase
      characters for compatibility with\n   legacy implementations.  Use of this Header
      Parameter is OPTIONAL.\n"
    title: 5.1.  "typ" (Type) Header Parameter
  - contents:
    - "5.2.  \"cty\" (Content Type) Header Parameter\n   The \"cty\" (content type)
      Header Parameter defined by [JWS] and [JWE]\n   is used by this specification
      to convey structural information about\n   the JWT.\n   In the normal case in
      which nested signing or encryption operations\n   are not employed, the use
      of this Header Parameter is NOT\n   RECOMMENDED.  In the case that nested signing
      or encryption is\n   employed, this Header Parameter MUST be present; in this
      case, the\n   value MUST be \"JWT\", to indicate that a Nested JWT is carried
      in this\n   JWT.  While media type names are not case sensitive, it is\n   RECOMMENDED
      that \"JWT\" always be spelled using uppercase characters\n   for compatibility
      with legacy implementations.  See Appendix A.2 for\n   an example of a Nested
      JWT.\n"
    title: 5.2.  "cty" (Content Type) Header Parameter
  - contents:
    - "5.3.  Replicating Claims as Header Parameters\n   In some applications using
      encrypted JWTs, it is useful to have an\n   unencrypted representation of some
      claims.  This might be used, for\n   instance, in application processing rules
      to determine whether and\n   how to process the JWT before it is decrypted.\n
      \  This specification allows claims present in the JWT Claims Set to be\n   replicated
      as Header Parameters in a JWT that is a JWE, as needed by\n   the application.
      \ If such replicated claims are present, the\n   application receiving them
      SHOULD verify that their values are\n   identical, unless the application defines
      other specific processing\n   rules for these claims.  It is the responsibility
      of the application\n   to ensure that only claims that are safe to be transmitted
      in an\n   unencrypted manner are replicated as Header Parameter values in the\n
      \  JWT.\n   Section 10.4.1 of this specification registers the \"iss\" (issuer),\n
      \  \"sub\" (subject), and \"aud\" (audience) Header Parameter names for the\n
      \  purpose of providing unencrypted replicas of these claims in\n   encrypted
      JWTs for applications that need them.  Other specifications\n   MAY similarly
      register other names that are registered Claim Names as\n   Header Parameter
      names, as needed.\n"
    title: 5.3.  Replicating Claims as Header Parameters
  title: 5.  JOSE Header
- contents:
  - "6.  Unsecured JWTs\n   To support use cases in which the JWT content is secured
    by a means\n   other than a signature and/or encryption contained within the JWT\n
    \  (such as a signature on a data structure containing the JWT), JWTs\n   MAY
    also be created without a signature or encryption.  An Unsecured\n   JWT is a
    JWS using the \"alg\" Header Parameter value \"none\" and with\n   the empty string
    for its JWS Signature value, as defined in the JWA\n   specification [JWA]; it
    is an Unsecured JWS with the JWT Claims Set\n   as its JWS Payload.\n"
  - contents:
    - "6.1.  Example Unsecured JWT\n   The following example JOSE Header declares
      that the encoded object is\n   an Unsecured JWT:\n     {\"alg\":\"none\"}\n
      \  Base64url encoding the octets of the UTF-8 representation of the JOSE\n   Header
      yields this encoded JOSE Header value:\n     eyJhbGciOiJub25lIn0\n   The following
      is an example of a JWT Claims Set:\n     {\"iss\":\"joe\",\n      \"exp\":1300819380,\n
      \     \"http://example.com/is_root\":true}\n   Base64url encoding the octets
      of the UTF-8 representation of the JWT\n   Claims Set yields this encoded JWS
      Payload (with line breaks for\n   display purposes only):\n     eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt\n
      \    cGxlLmNvbS9pc19yb290Ijp0cnVlfQ\n   The encoded JWS Signature is the empty
      string.\n   Concatenating these encoded parts in this order with period ('.')\n
      \  characters between the parts yields this complete JWT (with line\n   breaks
      for display purposes only):\n     eyJhbGciOiJub25lIn0\n     .\n     eyJpc3MiOiJqb2UiLA0KICJleHAiOjEzMDA4MTkzODAsDQogImh0dHA6Ly9leGFt\n
      \    cGxlLmNvbS9pc19yb290Ijp0cnVlfQ\n     .\n"
    title: 6.1.  Example Unsecured JWT
  title: 6.  Unsecured JWTs
- contents:
  - '7.  Creating and Validating JWTs

    '
  - contents:
    - "7.1.  Creating a JWT\n   To create a JWT, the following steps are performed.
      \ The order of the\n   steps is not significant in cases where there are no
      dependencies\n   between the inputs and outputs of the steps.\n   1.  Create
      a JWT Claims Set containing the desired claims.  Note that\n       whitespace
      is explicitly allowed in the representation and no\n       canonicalization
      need be performed before encoding.\n   2.  Let the Message be the octets of
      the UTF-8 representation of the\n       JWT Claims Set.\n   3.  Create a JOSE
      Header containing the desired set of Header\n       Parameters.  The JWT MUST
      conform to either the [JWS] or [JWE]\n       specification.  Note that whitespace
      is explicitly allowed in the\n       representation and no canonicalization
      need be performed before\n       encoding.\n   4.  Depending upon whether the
      JWT is a JWS or JWE, there are two\n       cases:\n       *  If the JWT is a
      JWS, create a JWS using the Message as the JWS\n          Payload; all steps
      specified in [JWS] for creating a JWS MUST\n          be followed.\n       *
      \ Else, if the JWT is a JWE, create a JWE using the Message as\n          the
      plaintext for the JWE; all steps specified in [JWE] for\n          creating
      a JWE MUST be followed.\n   5.  If a nested signing or encryption operation
      will be performed,\n       let the Message be the JWS or JWE, and return to
      Step 3, using a\n       \"cty\" (content type) value of \"JWT\" in the new JOSE
      Header\n       created in that step.\n   6.  Otherwise, let the resulting JWT
      be the JWS or JWE.\n"
    title: 7.1.  Creating a JWT
  - contents:
    - "7.2.  Validating a JWT\n   When validating a JWT, the following steps are performed.
      \ The order\n   of the steps is not significant in cases where there are no\n
      \  dependencies between the inputs and outputs of the steps.  If any of\n   the
      listed steps fail, then the JWT MUST be rejected -- that is,\n   treated by
      the application as an invalid input.\n   1.   Verify that the JWT contains at
      least one period ('.')\n        character.\n   2.   Let the Encoded JOSE Header
      be the portion of the JWT before the\n        first period ('.') character.\n
      \  3.   Base64url decode the Encoded JOSE Header following the\n        restriction
      that no line breaks, whitespace, or other additional\n        characters have
      been used.\n   4.   Verify that the resulting octet sequence is a UTF-8-encoded\n
      \       representation of a completely valid JSON object conforming to\n        RFC
      7159 [RFC7159]; let the JOSE Header be this JSON object.\n   5.   Verify that
      the resulting JOSE Header includes only parameters\n        and values whose
      syntax and semantics are both understood and\n        supported or that are
      specified as being ignored when not\n        understood.\n   6.   Determine
      whether the JWT is a JWS or a JWE using any of the\n        methods described
      in Section 9 of [JWE].\n   7.   Depending upon whether the JWT is a JWS or JWE,
      there are two\n        cases:\n        *  If the JWT is a JWS, follow the steps
      specified in [JWS] for\n           validating a JWS.  Let the Message be the
      result of base64url\n           decoding the JWS Payload.\n        *  Else,
      if the JWT is a JWE, follow the steps specified in\n           [JWE] for validating
      a JWE.  Let the Message be the resulting\n           plaintext.\n   8.   If
      the JOSE Header contains a \"cty\" (content type) value of\n        \"JWT\",
      then the Message is a JWT that was the subject of nested\n        signing or
      encryption operations.  In this case, return to Step\n        1, using the Message
      as the JWT.\n   9.   Otherwise, base64url decode the Message following the\n
      \       restriction that no line breaks, whitespace, or other additional\n        characters
      have been used.\n   10.  Verify that the resulting octet sequence is a UTF-8-encoded\n
      \       representation of a completely valid JSON object conforming to\n        RFC
      7159 [RFC7159]; let the JWT Claims Set be this JSON object.\n   Finally, note
      that it is an application decision which algorithms may\n   be used in a given
      context.  Even if a JWT can be successfully\n   validated, unless the algorithms
      used in the JWT are acceptable to\n   the application, it SHOULD reject the
      JWT.\n"
    title: 7.2.  Validating a JWT
  - contents:
    - "7.3.  String Comparison Rules\n   Processing a JWT inevitably requires comparing
      known strings to\n   members and values in JSON objects.  For example, in checking
      what\n   the algorithm is, the Unicode [UNICODE] string encoding \"alg\" will
      be\n   checked against the member names in the JOSE Header to see if there\n
      \  is a matching Header Parameter name.\n   The JSON rules for doing member
      name comparison are described in\n   Section 8.3 of RFC 7159 [RFC7159].  Since
      the only string comparison\n   operations that are performed are equality and
      inequality, the same\n   rules can be used for comparing both member names and
      member values\n   against known strings.\n   These comparison rules MUST be
      used for all JSON string comparisons\n   except in cases where the definition
      of the member explicitly calls\n   out that a different comparison rule is to
      be used for that member\n   value.  In this specification, only the \"typ\"
      and \"cty\" member values\n   do not use these comparison rules.\n   Some applications
      may include case-insensitive information in a case-\n   sensitive value, such
      as including a DNS name as part of the \"iss\"\n   (issuer) claim value.  In
      those cases, the application may need to\n   define a convention for the canonical
      case to use for representing\n   the case-insensitive portions, such as lowercasing
      them, if more than\n   one party might need to produce the same value so that
      they can be\n   compared.  (However, if all other parties consume whatever value
      the\n   producing party emitted verbatim without attempting to compare it to\n
      \  an independently produced value, then the case used by the producer\n   will
      not matter.)\n"
    title: 7.3.  String Comparison Rules
  title: 7.  Creating and Validating JWTs
- contents:
  - "8.  Implementation Requirements\n   This section defines which algorithms and
    features of this\n   specification are mandatory to implement.  Applications using
    this\n   specification can impose additional requirements upon implementations\n
    \  that they use.  For instance, one application might require support\n   for
    encrypted JWTs and Nested JWTs, while another might require\n   support for signing
    JWTs with the Elliptic Curve Digital Signature\n   Algorithm (ECDSA) using the
    P-256 curve and the SHA-256 hash\n   algorithm (\"ES256\").\n   Of the signature
    and MAC algorithms specified in JSON Web Algorithms\n   [JWA], only HMAC SHA-256
    (\"HS256\") and \"none\" MUST be implemented by\n   conforming JWT implementations.
    \ It is RECOMMENDED that\n   implementations also support RSASSA-PKCS1-v1_5 with
    the SHA-256 hash\n   algorithm (\"RS256\") and ECDSA using the P-256 curve and
    the SHA-256\n   hash algorithm (\"ES256\").  Support for other algorithms and
    key sizes\n   is OPTIONAL.\n   Support for encrypted JWTs is OPTIONAL.  If an
    implementation\n   provides encryption capabilities, of the encryption algorithms\n
    \  specified in [JWA], only RSAES-PKCS1-v1_5 with 2048-bit keys\n   (\"RSA1_5\"),
    AES Key Wrap with 128- and 256-bit keys (\"A128KW\" and\n   \"A256KW\"), and the
    composite authenticated encryption algorithm using\n   AES-CBC and HMAC SHA-2
    (\"A128CBC-HS256\" and \"A256CBC-HS512\") MUST be\n   implemented by conforming
    implementations.  It is RECOMMENDED that\n   implementations also support using
    Elliptic Curve Diffie-Hellman\n   Ephemeral Static (ECDH-ES) to agree upon a key
    used to wrap the\n   Content Encryption Key (\"ECDH-ES+A128KW\" and \"ECDH-ES+A256KW\")
    and\n   AES in Galois/Counter Mode (GCM) with 128- and 256-bit keys\n   (\"A128GCM\"
    and \"A256GCM\").  Support for other algorithms and key\n   sizes is OPTIONAL.\n
    \  Support for Nested JWTs is OPTIONAL.\n"
  title: 8.  Implementation Requirements
- contents:
  - "9.  URI for Declaring that Content is a JWT\n   This specification registers
    the URN\n   \"urn:ietf:params:oauth:token-type:jwt\" for use by applications that\n
    \  declare content types using URIs (rather than, for instance, media\n   types)
    to indicate that the content referred to is a JWT.\n"
  title: 9.  URI for Declaring that Content is a JWT
- contents:
  - '10.  IANA Considerations

    '
  - contents:
    - "10.1.  JSON Web Token Claims Registry\n   This section establishes the IANA
      \"JSON Web Token Claims\" registry\n   for JWT Claim Names.  The registry records
      the Claim Name and a\n   reference to the specification that defines it.  This
      section\n   registers the Claim Names defined in Section 4.1.\n   Values are
      registered on a Specification Required [RFC5226] basis\n   after a three-week
      review period on the jwt-reg-review@ietf.org\n   mailing list, on the advice
      of one or more Designated Experts.\n   However, to allow for the allocation
      of values prior to publication,\n   the Designated Experts may approve registration
      once they are\n   satisfied that such a specification will be published.\n   Registration
      requests sent to the mailing list for review should use\n   an appropriate subject
      (e.g., \"Request to register claim: example\").\n   Within the review period,
      the Designated Experts will either approve\n   or deny the registration request,
      communicating this decision to the\n   review list and IANA.  Denials should
      include an explanation and, if\n   applicable, suggestions as to how to make
      the request successful.\n   Registration requests that are undetermined for
      a period longer than\n   21 days can be brought to the IESG's attention (using
      the\n   iesg@ietf.org mailing list) for resolution.\n   Criteria that should
      be applied by the Designated Experts includes\n   determining whether the proposed
      registration duplicates existing\n   functionality, whether it is likely to
      be of general applicability or\n   whether it is useful only for a single application,
      and whether the\n   registration description is clear.\n   IANA must only accept
      registry updates from the Designated Experts\n   and should direct all requests
      for registration to the review mailing\n   list.\n   It is suggested that multiple
      Designated Experts be appointed who are\n   able to represent the perspectives
      of different applications using\n   this specification, in order to enable broadly
      informed review of\n   registration decisions.  In cases where a registration
      decision could\n   be perceived as creating a conflict of interest for a particular\n
      \  Expert, that Expert should defer to the judgment of the other\n   Experts.\n"
    - contents:
      - "10.1.1.  Registration Template\n   Claim Name:\n      The name requested
        (e.g., \"iss\").  Because a core goal of this\n      specification is for
        the resulting representations to be compact,\n      it is RECOMMENDED that
        the name be short -- that is, not to exceed\n      8 characters without a
        compelling reason to do so.  This name is\n      case sensitive.  Names may
        not match other registered names in a\n      case-insensitive manner unless
        the Designated Experts state that\n      there is a compelling reason to allow
        an exception.\n   Claim Description:\n      Brief description of the claim
        (e.g., \"Issuer\").\n   Change Controller:\n      For Standards Track RFCs,
        list the \"IESG\".  For others, give the\n      name of the responsible party.
        \ Other details (e.g., postal\n      address, email address, home page URI)
        may also be included.\n   Specification Document(s):\n      Reference to the
        document or documents that specify the parameter,\n      preferably including
        URIs that can be used to retrieve copies of\n      the documents.  An indication
        of the relevant sections may also be\n      included but is not required.\n"
      title: 10.1.1.  Registration Template
    - contents:
      - "10.1.2.  Initial Registry Contents\n   o  Claim Name: \"iss\"\n   o  Claim
        Description: Issuer\n   o  Change Controller: IESG\n   o  Specification Document(s):
        Section 4.1.1 of RFC 7519\n   o  Claim Name: \"sub\"\n   o  Claim Description:
        Subject\n   o  Change Controller: IESG\n   o  Specification Document(s): Section
        4.1.2 of RFC 7519\n   o  Claim Name: \"aud\"\n   o  Claim Description: Audience\n
        \  o  Change Controller: IESG\n   o  Specification Document(s): Section 4.1.3
        of RFC 7519\n   o  Claim Name: \"exp\"\n   o  Claim Description: Expiration
        Time\n   o  Change Controller: IESG\n   o  Specification Document(s): Section
        4.1.4 of RFC 7519\n   o  Claim Name: \"nbf\"\n   o  Claim Description: Not
        Before\n   o  Change Controller: IESG\n   o  Specification Document(s): Section
        4.1.5 of RFC 7519\n   o  Claim Name: \"iat\"\n   o  Claim Description: Issued
        At\n   o  Change Controller: IESG\n   o  Specification Document(s): Section
        4.1.6 of RFC 7519\n   o  Claim Name: \"jti\"\n   o  Claim Description: JWT
        ID\n   o  Change Controller: IESG\n   o  Specification Document(s): Section
        4.1.7 of RFC 7519\n"
      title: 10.1.2.  Initial Registry Contents
    title: 10.1.  JSON Web Token Claims Registry
  - contents:
    - "10.2.  Sub-Namespace Registration of\n       urn:ietf:params:oauth:token-type:jwt\n"
    - contents:
      - "10.2.1.  Registry Contents\n   This section registers the value \"token-type:jwt\"
        in the IANA \"OAuth\n   URI\" registry established by \"An IETF URN Sub-Namespace
        for OAuth\"\n   [RFC6755], which can be used to indicate that the content
        is a JWT.\n   o  URN: urn:ietf:params:oauth:token-type:jwt\n   o  Common Name:
        JSON Web Token (JWT) Token Type\n   o  Change Controller: IESG\n   o  Specification
        Document(s): RFC 7519\n"
      title: 10.2.1.  Registry Contents
    title: 10.2.  Sub-Namespace Registration of
  - contents:
    - '10.3.  Media Type Registration

      '
    - contents:
      - "10.3.1.  Registry Contents\n   This section registers the \"application/jwt\"
        media type [RFC2046] in\n   the \"Media Types\" registry [IANA.MediaTypes]
        in the manner described\n   in RFC 6838 [RFC6838], which can be used to indicate
        that the content\n   is a JWT.\n   o  Type name: application\n   o  Subtype
        name: jwt\n   o  Required parameters: n/a\n   o  Optional parameters: n/a\n
        \  o  Encoding considerations: 8bit; JWT values are encoded as a series\n
        \     of base64url-encoded values (some of which may be the empty\n      string)
        separated by period ('.') characters.\n   o  Security considerations: See
        the Security Considerations section\n      of RFC 7519\n   o  Interoperability
        considerations: n/a\n   o  Published specification: RFC 7519\n   o  Applications
        that use this media type: OpenID Connect, Mozilla\n      Persona, Salesforce,
        Google, Android, Windows Azure, Amazon Web\n      Services, and numerous others\n
        \  o  Fragment identifier considerations: n/a\n   o  Additional information:\n
        \        Magic number(s): n/a\n         File extension(s): n/a\n         Macintosh
        file type code(s): n/a\n   o  Person & email address to contact for further
        information:\n      Michael B. Jones, mbj@microsoft.com\n   o  Intended usage:
        COMMON\n   o  Restrictions on usage: none\n   o  Author: Michael B. Jones,
        mbj@microsoft.com\n   o  Change controller: IESG\n   o  Provisional registration?
        \ No\n"
      title: 10.3.1.  Registry Contents
    title: 10.3.  Media Type Registration
  - contents:
    - "10.4.  Header Parameter Names Registration\n   This section registers specific
      Claim Names defined in Section 4.1 in\n   the IANA \"JSON Web Signature and
      Encryption Header Parameters\"\n   registry established by [JWS] for use by
      claims replicated as Header\n   Parameters in JWEs, per Section 5.3.\n"
    - contents:
      - "10.4.1.  Registry Contents\n   o  Header Parameter Name: \"iss\"\n   o  Header
        Parameter Description: Issuer\n   o  Header Parameter Usage Location(s): JWE\n
        \  o  Change Controller: IESG\n   o  Specification Document(s): Section 4.1.1
        of RFC 7519\n   o  Header Parameter Name: \"sub\"\n   o  Header Parameter
        Description: Subject\n   o  Header Parameter Usage Location(s): JWE\n   o
        \ Change Controller: IESG\n   o  Specification Document(s): Section 4.1.2
        of RFC 7519\n   o  Header Parameter Name: \"aud\"\n   o  Header Parameter
        Description: Audience\n   o  Header Parameter Usage Location(s): JWE\n   o
        \ Change Controller: IESG\n   o  Specification Document(s): Section 4.1.3
        of RFC 7519\n"
      title: 10.4.1.  Registry Contents
    title: 10.4.  Header Parameter Names Registration
  title: 10.  IANA Considerations
- contents:
  - "11.  Security Considerations\n   All of the security issues that are pertinent
    to any cryptographic\n   application must be addressed by JWT/JWS/JWE/JWK agents.
    \ Among these\n   issues are protecting the user's asymmetric private and symmetric\n
    \  secret keys and employing countermeasures to various attacks.\n   All the security
    considerations in the JWS specification also apply\n   to JWT, as do the JWE security
    considerations when encryption is\n   employed.  In particular, Sections 10.12
    (\"JSON Security\n   Considerations\") and 10.13 (\"Unicode Comparison Security\n
    \  Considerations\") of [JWS] apply equally to the JWT Claims Set in the\n   same
    manner that they do to the JOSE Header.\n"
  - contents:
    - "11.1.  Trust Decisions\n   The contents of a JWT cannot be relied upon in a
      trust decision\n   unless its contents have been cryptographically secured and
      bound to\n   the context necessary for the trust decision.  In particular, the\n
      \  key(s) used to sign and/or encrypt the JWT will typically need to\n   verifiably
      be under the control of the party identified as the issuer\n   of the JWT.\n"
    title: 11.1.  Trust Decisions
  - contents:
    - "11.2.  Signing and Encryption Order\n   While syntactically the signing and
      encryption operations for Nested\n   JWTs may be applied in any order, if both
      signing and encryption are\n   necessary, normally producers should sign the
      message and then\n   encrypt the result (thus encrypting the signature).  This
      prevents\n   attacks in which the signature is stripped, leaving just an encrypted\n
      \  message, as well as providing privacy for the signer.  Furthermore,\n   signatures
      over encrypted text are not considered valid in many\n   jurisdictions.\n   Note
      that potential concerns about security issues related to the\n   order of signing
      and encryption operations are already addressed by\n   the underlying JWS and
      JWE specifications; in particular, because JWE\n   only supports the use of
      authenticated encryption algorithms,\n   cryptographic concerns about the potential
      need to sign after\n   encryption that apply in many contexts do not apply to
      this\n   specification.\n"
    title: 11.2.  Signing and Encryption Order
  title: 11.  Security Considerations
- contents:
  - "12.  Privacy Considerations\n   A JWT may contain privacy-sensitive information.
    \ When this is the\n   case, measures MUST be taken to prevent disclosure of this\n
    \  information to unintended parties.  One way to achieve this is to use\n   an
    encrypted JWT and authenticate the recipient.  Another way is to\n   ensure that
    JWTs containing unencrypted privacy-sensitive information\n   are only transmitted
    using protocols utilizing encryption that\n   support endpoint authentication,
    such as Transport Layer Security\n   (TLS).  Omitting privacy-sensitive information
    from a JWT is the\n   simplest way of minimizing privacy issues.\n"
  title: 12.  Privacy Considerations
- contents:
  - '13.  References

    '
  - contents:
    - "13.1.  Normative References\n   [ECMAScript]\n              Ecma International,
      \"ECMAScript Language Specification,\n              5.1 Edition\", ECMA Standard
      262, June 2011,\n              <http://www.ecma-international.org/ecma-262/5.1/\n
      \             ECMA-262.pdf>.\n   [IANA.MediaTypes]\n              IANA, \"Media
      Types\",\n              <http://www.iana.org/assignments/media-types>.\n   [JWA]
      \     Jones, M., \"JSON Web Algorithms (JWA)\", RFC 7518,\n              DOI
      10.17487/RFC7518, May 2015,\n              <http://www.rfc-editor.org/info/rfc7518>.\n
      \  [JWE]      Jones, M. and J. Hildebrand, \"JSON Web Encryption (JWE)\",\n
      \             RFC 7516,  DOI 10.17487/RFC7516, May 2015,\n              <http://www.rfc-editor.org/info/rfc7516>.\n
      \  [JWS]      Jones, M., Bradley, J., and N. Sakimura, \"JSON Web\n              Signature
      (JWS)\", RFC 7515, DOI 10.17487/RFC, May 2015,\n              <http://www.rfc-editor.org/info/rfc7515>.\n
      \  [RFC20]    Cerf, V., \"ASCII format for Network Interchange\", STD 80,\n
      \             RFC 20,  DOI 10.17487/RFC0020, October 1969,\n              <http://www.rfc-editor.org/info/rfc20>.\n
      \  [RFC2046]  Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n              Extensions
      (MIME) Part Two: Media Types\", RFC 2046,\n              DOI 10.17487/RFC2046,
      November 1996,\n              <http://www.rfc-editor.org/info/rfc2046>.\n   [RFC2119]
      \ Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement
      Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n
      \             <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC3986]  Berners-Lee,
      T., Fielding, R., and L. Masinter, \"Uniform\n              Resource Identifier
      (URI): Generic Syntax\", STD 66,\n              RFC 3986, DOI 10.17487/RFC3986,
      January 2005,\n              <http://www.rfc-editor.org/info/rfc3986>.\n   [RFC4949]
      \ Shirey, R., \"Internet Security Glossary, Version 2\",\n              FYI
      36, RFC 4949, DOI 10.17487/RFC4949, August 2007,\n              <http://www.rfc-editor.org/info/rfc4949>.\n
      \  [RFC7159]  Bray, T., Ed., \"The JavaScript Object Notation (JSON) Data\n
      \             Interchange Format\", RFC 7159, DOI 10.17487/RFC7159, March\n
      \             2014, <http://www.rfc-editor.org/info/rfc7159>.\n   [UNICODE]
      \ The Unicode Consortium, \"The Unicode Standard\",\n              <http://www.unicode.org/versions/latest/>.\n"
    title: 13.1.  Normative References
  - contents:
    - "13.2.  Informative References\n   [CanvasApp]\n              Facebook, \"Canvas
      Applications\", 2010,\n              <http://developers.facebook.com/docs/authentication/\n
      \             canvas>.\n   [JSS]      Bradley, J. and N. Sakimura (editor),
      \"JSON Simple Sign\",\n              September 2010, <http://jsonenc.info/jss/1.0/>.\n
      \  [MagicSignatures]\n              Panzer, J., Ed., Laurie, B., and D. Balfanz,
      \"Magic\n              Signatures\", January 2011,\n              <http://salmon-protocol.googlecode.com/svn/\n
      \             trunk/draft-panzer-magicsig-01.html>.\n   [OASIS.saml-core-2.0-os]\n
      \             Cantor, S., Kemp, J., Philpott, R., and E. Maler,\n              \"Assertions
      and Protocols for the OASIS Security Assertion\n              Markup Language
      (SAML) V2.0\", OASIS Standard\n              saml-core-2.0-os, March 2005,\n
      \             <http://docs.oasis-open.org/security/saml/v2.0/\n              saml-core-2.0-os.pdf>.\n
      \  [POSIX.1]  IEEE, \"The Open Group Base Specifications Issue 7\", IEEE\n              Std
      1003.1, 2013 Edition, 2013,\n              <http://pubs.opengroup.org/onlinepubs/9699919799/\n
      \             basedefs/V1_chap04.html#tag_04_15>.\n   [RFC3275]  Eastlake 3rd,
      D., Reagle, J., and D. Solo, \"(Extensible\n              Markup Language) XML-Signature
      Syntax and Processing\",\n              RFC 3275, DOI 10.17487/RFC3275, March
      2002,\n              <http://www.rfc-editor.org/info/rfc3275>.\n   [RFC3339]
      \ Klyne, G. and C. Newman, \"Date and Time on the Internet:\n              Timestamps\",
      RFC 3339, DOI 10.17487/RFC3339, July 2002,\n              <http://www.rfc-editor.org/info/rfc3339>.\n
      \  [RFC4122]  Leach, P., Mealling, M., and R. Salz, \"A Universally\n              Unique
      IDentifier (UUID) URN Namespace\", RFC 4122,\n              DOI 10.17487/RFC4122,
      July 2005,\n              <http://www.rfc-editor.org/info/rfc4122>.\n   [RFC5226]
      \ Narten, T. and H. Alvestrand, \"Guidelines for Writing an\n              IANA
      Considerations Section in RFCs\", BCP 26, RFC 5226,\n              DOI 10.17487/RFC5226,
      May 2008,\n              <http://www.rfc-editor.org/info/rfc5226>.\n   [RFC6755]
      \ Campbell, B. and H. Tschofenig, \"An IETF URN Sub-Namespace\n              for
      OAuth\", RFC 6755, DOI 10.17487/RFC6755, October 2012,\n              <http://www.rfc-editor.org/info/rfc6755>.\n
      \  [RFC6838]  Freed, N., Klensin, J., and T. Hansen, \"Media Type\n              Specifications
      and Registration Procedures\", BCP 13,\n              RFC 6838, DOI 10.17487/RFC6838,
      January 2013,\n              <http://www.rfc-editor.org/info/rfc6838>.\n   [SWT]
      \     Hardt, D. and Y. Goland, \"Simple Web Token (SWT)\", Version\n              0.9.5.1,
      November 2009, <http://msdn.microsoft.com/en-us/\n              library/windowsazure/hh781551.aspx>.\n
      \  [W3C.CR-xml11-20060816]\n              Cowan, J., \"Extensible Markup Language
      (XML) 1.1 (Second\n              Edition)\", World Wide Web Consortium Recommendation\n
      \             REC-xml11-20060816, August 2006,\n              <http://www.w3.org/TR/2006/REC-xml11-20060816>.\n
      \  [W3C.REC-xml-c14n-20010315]\n              Boyer, J., \"Canonical XML Version
      1.0\", World Wide Web\n              Consortium Recommendation REC-xml-c14n-20010315,
      March\n              2001, <http://www.w3.org/TR/2001/REC-xml-c14n-20010315>.\n"
    title: 13.2.  Informative References
  title: 13.  References
- contents:
  - "Appendix A.  JWT Examples\n   This section contains examples of JWTs.  For other
    example JWTs, see\n   Section 6.1 of this document and Appendices A.1 - A.3 of
    [JWS].\n"
  - contents:
    - "A.1.  Example Encrypted JWT\n   This example encrypts the same claims as used
      in Section 3.1 to the\n   recipient using RSAES-PKCS1-v1_5 and AES_128_CBC_HMAC_SHA_256.\n
      \  The following example JOSE Header declares that:\n   o  The Content Encryption
      Key is encrypted to the recipient using the\n      RSAES-PKCS1-v1_5 algorithm
      to produce the JWE Encrypted Key.\n   o  Authenticated encryption is performed
      on the plaintext using the\n      AES_128_CBC_HMAC_SHA_256 algorithm to produce
      the JWE Ciphertext\n      and the JWE Authentication Tag.\n     {\"alg\":\"RSA1_5\",\"enc\":\"A128CBC-HS256\"}\n
      \  Other than using the octets of the UTF-8 representation of the JWT\n   Claims
      Set from Section 3.1 as the plaintext value, the computation\n   of this JWT
      is identical to the computation of the JWE in\n   Appendix A.2 of [JWE], including
      the keys used.\n   The final result in this example (with line breaks for display\n
      \  purposes only) is:\n     eyJhbGciOiJSU0ExXzUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2In0.\n
      \    QR1Owv2ug2WyPBnbQrRARTeEk9kDO2w8qDcjiHnSJflSdv1iNqhWXaKH4MqAkQtM\n     oNfABIPJaZm0HaA415sv3aeuBWnD8J-Ui7Ah6cWafs3ZwwFKDFUUsWHSK-IPKxLG\n
      \    TkND09XyjORj_CHAgOPJ-Sd8ONQRnJvWn_hXV1BNMHzUjPyYwEsRhDhzjAD26ima\n     sOTsgruobpYGoQcXUwFDn7moXPRfDE8-NoQX7N7ZYMmpUDkR-Cx9obNGwJQ3nM52\n
      \    YCitxoQVPzjbl7WBuB7AohdBoZOdZ24WlN1lVIeh8v1K4krB8xgKvRU8kgFrEn_a\n     1rZgN5TiysnmzTROF869lQ.\n
      \    AxY8DCtDaGlsbGljb3RoZQ.\n     MKOle7UQrG6nSxTLX6Mqwt0orbHvAKeWnDYvpIAeZ72deHxz3roJDXQyhxx0wKaM\n
      \    HDjUEOKIwrtkHthpqEanSBNYHZgmNOV7sln1Eu9g3J8.\n     fiK51VwhsxJ-siBMR-YFiA\n"
    title: A.1.  Example Encrypted JWT
  - contents:
    - "A.2.  Example Nested JWT\n   This example shows how a JWT can be used as the
      payload of a JWE or\n   JWS to create a Nested JWT.  In this case, the JWT Claims
      Set is\n   first signed, and then encrypted.\n   The inner signed JWT is identical
      to the example in Appendix A.2 of\n   [JWS].  Therefore, its computation is
      not repeated here.  This\n   example then encrypts this inner JWT to the recipient
      using\n   RSAES-PKCS1-v1_5 and AES_128_CBC_HMAC_SHA_256.\n   The following example
      JOSE Header declares that:\n   o  The Content Encryption Key is encrypted to
      the recipient using the\n      RSAES-PKCS1-v1_5 algorithm to produce the JWE
      Encrypted Key.\n   o  Authenticated encryption is performed on the plaintext
      using the\n      AES_128_CBC_HMAC_SHA_256 algorithm to produce the JWE Ciphertext\n
      \     and the JWE Authentication Tag.\n   o  The plaintext is itself a JWT.\n
      \    {\"alg\":\"RSA1_5\",\"enc\":\"A128CBC-HS256\",\"cty\":\"JWT\"}\n   Base64url
      encoding the octets of the UTF-8 representation of the JOSE\n   Header yields
      this encoded JOSE Header value:\n     eyJhbGciOiJSU0ExXzUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiY3R5IjoiSldUIn0\n
      \  The computation of this JWT is identical to the computation of the\n   JWE
      in Appendix A.2 of [JWE], other than that different JOSE Header,\n   plaintext,
      JWE Initialization Vector, and Content Encryption Key\n   values are used.  (The
      RSA key used is the same.)\n   The plaintext used is the octets of the ASCII
      [RFC20] representation\n   of the JWT at the end of Appendix A.2.1 of [JWS]
      (with all whitespace\n   and line breaks removed), which is a sequence of 458
      octets.\n   The JWE Initialization Vector value used (using JSON array notation)\n
      \  is:\n   [82, 101, 100, 109, 111, 110, 100, 32, 87, 65, 32, 57, 56, 48, 53,\n
      \  50]\n   This example uses the Content Encryption Key represented by the\n
      \  base64url-encoded value below:\n     GawgguFyGrWKav7AX4VKUg\n   The final
      result for this Nested JWT (with line breaks for display\n   purposes only)
      is:\n     eyJhbGciOiJSU0ExXzUiLCJlbmMiOiJBMTI4Q0JDLUhTMjU2IiwiY3R5IjoiSldU\n
      \    In0.\n     g_hEwksO1Ax8Qn7HoN-BVeBoa8FXe0kpyk_XdcSmxvcM5_P296JXXtoHISr_DD_M\n
      \    qewaQSH4dZOQHoUgKLeFly-9RI11TG-_Ge1bZFazBPwKC5lJ6OLANLMd0QSL4fYE\n     b9ERe-epKYE3xb2jfY1AltHqBO-PM6j23Guj2yDKnFv6WO72tteVzm_2n17SBFvh\n
      \    DuR9a2nHTE67pe0XGBUS_TK7ecA-iVq5COeVdJR4U4VZGGlxRGPLRHvolVLEHx6D\n     YyLpw30Ay9R6d68YCLi9FYTq3hIXPK_-dmPlOUlKvPr1GgJzRoeC9G5qCvdcHWsq\n
      \    JGTO_z3Wfo5zsqwkxruxwA.\n     UmVkbW9uZCBXQSA5ODA1Mg.\n     VwHERHPvCNcHHpTjkoigx3_ExK0Qc71RMEParpatm0X_qpg-w8kozSjfNIPPXiTB\n
      \    BLXR65CIPkFqz4l1Ae9w_uowKiwyi9acgVztAi-pSL8GQSXnaamh9kX1mdh3M_TT\n     -FZGQFQsFhu0Z72gJKGdfGE-OE7hS1zuBD5oEUfk0Dmb0VzWEzpxxiSSBbBAzP10\n
      \    l56pPfAtrjEYw-7ygeMkwBl6Z_mLS6w6xUgKlvW6ULmkV-uLC4FUiyKECK4e3WZY\n     Kw1bpgIqGYsw2v_grHjszJZ-_I5uM-9RA8ycX9KqPRp9gc6pXmoU_-27ATs9XCvr\n
      \    ZXUtK2902AUzqpeEUJYjWWxSNsS-r1TJ1I-FMJ4XyAiGrfmo9hQPcNBYxPz3GQb2\n     8Y5CLSQfNgKSGt0A4isp1hBUXBHAndgtcslt7ZoQJaKe_nNJgNliWtWpJ_ebuOpE\n
      \    l8jdhehdccnRMIwAmU1n7SPkmhIl1HlSOpvcvDfhUN5wuqU955vOBvfkBOh5A11U\n     zBuo2WlgZ6hYi9-e3w29bR0C2-pp3jbqxEDw3iWaf2dc5b-LnR0FEYXvI_tYk5rd\n
      \    _J9N0mg0tQ6RbpxNEMNoA9QWk5lgdPvbh9BaO195abQ.\n     AVO9iT5AV4CzvDJCdhSFlQ\n"
    title: A.2.  Example Nested JWT
  title: Appendix A.  JWT Examples
- contents:
  - "Appendix B.  Relationship of JWTs to SAML Assertions\n   Security Assertion Markup
    Language (SAML) 2.0\n   [OASIS.saml-core-2.0-os] provides a standard for creating
    security\n   tokens with greater expressivity and more security options than\n
    \  supported by JWTs.  However, the cost of this flexibility and\n   expressiveness
    is both size and complexity.  SAML's use of XML\n   [W3C.CR-xml11-20060816] and
    XML Digital Signature (DSIG) [RFC3275]\n   contributes to the size of SAML Assertions;
    its use of XML and\n   especially XML Canonicalization [W3C.REC-xml-c14n-20010315]\n
    \  contributes to their complexity.\n   JWTs are intended to provide a simple
    security token format that is\n   small enough to fit into HTTP headers and query
    arguments in URIs.\n   It does this by supporting a much simpler token model than
    SAML and\n   using the JSON [RFC7159] object encoding syntax.  It also supports\n
    \  securing tokens using Message Authentication Codes (MACs) and digital\n   signatures
    using a smaller (and less flexible) format than XML DSIG.\n   Therefore, while
    JWTs can do some of the things SAML Assertions do,\n   JWTs are not intended as
    a full replacement for SAML Assertions, but\n   rather as a token format to be
    used when ease of implementation or\n   compactness are considerations.\n   SAML
    Assertions are always statements made by an entity about a\n   subject.  JWTs
    are often used in the same manner, with the entity\n   making the statements being
    represented by the \"iss\" (issuer) claim,\n   and the subject being represented
    by the \"sub\" (subject) claim.\n   However, with these claims being optional,
    other uses of the JWT\n   format are also permitted.\n"
  title: Appendix B.  Relationship of JWTs to SAML Assertions
- contents:
  - "Appendix C.  Relationship of JWTs to Simple Web Tokens (SWTs)\n   Both JWTs and
    SWTs [SWT], at their core, enable sets of claims to be\n   communicated between
    applications.  For SWTs, both the claim names\n   and claim values are strings.
    \ For JWTs, while claim names are\n   strings, claim values can be any JSON type.
    \ Both token types offer\n   cryptographic protection of their content: SWTs with
    HMAC SHA-256 and\n   JWTs with a choice of algorithms, including signature, MAC,
    and\n   encryption algorithms.\n"
  title: Appendix C.  Relationship of JWTs to Simple Web Tokens (SWTs)
- contents:
  - "Acknowledgements\n   The authors acknowledge that the design of JWTs was intentionally\n
    \  influenced by the design and simplicity of SWTs [SWT] and ideas for\n   JSON
    tokens that Dick Hardt discussed within the OpenID community.\n   Solutions for
    signing JSON content were previously explored by Magic\n   Signatures [MagicSignatures],
    JSON Simple Sign [JSS], and Canvas\n   Applications [CanvasApp], all of which
    influenced this document.\n   This specification is the work of the OAuth working
    group, which\n   includes dozens of active and dedicated participants.  In particular,\n
    \  the following individuals contributed ideas, feedback, and wording\n   that
    influenced this specification:\n   Dirk Balfanz, Richard Barnes, Brian Campbell,
    Alissa Cooper, Breno de\n   Medeiros, Stephen Farrell, Yaron Y. Goland, Dick Hardt,
    Joe\n   Hildebrand, Jeff Hodges, Edmund Jay, Warren Kumari, Ben Laurie, Barry\n
    \  Leiba, Ted Lemon, James Manger, Prateek Mishra, Kathleen Moriarty,\n   Tony
    Nadalin, Axel Nennker, John Panzer, Emmanuel Raviart, David\n   Recordon, Eric
    Rescorla, Jim Schaad, Paul Tarjan, Hannes Tschofenig,\n   Sean Turner, and Tom
    Yu.\n   Hannes Tschofenig and Derek Atkins chaired the OAuth working group\n   and
    Sean Turner, Stephen Farrell, and Kathleen Moriarty served as\n   Security Area
    Directors during the creation of this specification.\n"
  title: Acknowledgements
- contents:
  - "Authors' Addresses\n   Michael B. Jones\n   Microsoft\n   EMail: mbj@microsoft.com\n
    \  URI:   http://self-issued.info/\n   John Bradley\n   Ping Identity\n   EMail:
    ve7jtb@ve7jtb.com\n   URI:   http://www.thread-safe.com/\n   Nat Sakimura\n   Nomura
    Research Institute\n   EMail: n-sakimura@nri.co.jp\n   URI:   http://nat.sakimura.org/\n"
  title: Authors' Addresses
