- title: __initial_text__
  contents:
  - '                         Pip Header Processing

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Preamble
  contents:
  - "Preamble\n   During 1992 and 1993, the Pip internet protocol, developed at\n\
    \   Bellcore, was one of the candidate replacments for IP.  In mid 1993,\n   Pip\
    \ was merged with another candidate, the Simple Internet Protocol\n   (SIP), creating\
    \ SIPP (SIP Plus).  While the major aspects of Pip--\n   particularly its distinction\
    \ of identifier from address, and its use\n   of the source route mechanism to\
    \ achieve rich routing capabilities--\n   were preserved, many of the ideas in\
    \ Pip were not.  The purpose of\n   this RFC and the companion RFC \"Pip Near-term\
    \ Architecture\" are to\n   record the ideas (good and bad) of Pip.\n   The remainder\
    \ of this document is taken verbatem from the Pip draft\n   memo of the same title\
    \ that existed when the Pip project ended.  As\n   such, any text that indicates\
    \ that Pip is an intended replacement for\n   IP should be ignored.\n"
- title: Abstract
  contents:
  - "Abstract\n   Pip is an internet protocol intended as the replacement for IP\n\
    \   version 4.  Pip is a general purpose internet protocol, designed to\n   handle\
    \ all forseeable internet protocol requirements.  This\n   specification defines\
    \ the Pip header processing for Routers and\n   Hosts.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   I want to individually acknowledge Rob Coltun, Steve Deering,\
    \ Ramesh\n   Govindan, Joel Halpern, John Ioannidis, Chris Petrilli, Bob Smart,\n\
    \   and Zheng Wang.  I want also to acknowledge the many people from the\n   Pip\
    \ working group who have participated in developing Pip.  Finally,\n   I want\
    \ to acknowledge the SIP protocol (or, more accurately, the\n   people behind\
    \ the SIP protocol) for providing certain good ideas.\n"
- title: Conventions
  contents:
  - "Conventions\n   All functions in this specification are mandatory.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Pip is an internet protocol intended as the replacement\
    \ for IP\n   version 4.  Pip is a general purpose internet protocol, designed\
    \ to\n   handle all forseeable internet protocol requirements.  This\n   specification\
    \ defines the Pip header processing for Routers and\n   Hosts.\n   The design\
    \ of Pip is fundamentally different from that of previous\n   internetwork protocols.\
    \  Pip is designed to be as general as\n   possible, but without significantly\
    \ compromising performance.\n   Because of Pip's generality, it can handle forseeable\
    \ routing and\n   addressing requirements.  It is hoped that it will be able to\
    \ handle\n   most if not all future routing and addressing requirements.\n   There\
    \ are many detailed aspects of Pip that provide this generality\n   that are not\
    \ discussed here.  It is useful, however, to mention one\n   general aspect. \
    \ That is, Pip strives to remove as much \"functional\n   semantics\" from the\
    \ base specification as possible.  Pip defines a\n   packet header and forwarding\
    \ rules that can include many different\n   functional semantics (that is, routing,\
    \ addressing, and flow\n   paradigms).  Therefore, the reader may often find him\
    \ or herself\n   asking \"But how do you do foo with Pip?\" The answer to this\
    \ sort of\n   question belongs in companion documents to the basic Pip spec.\n\
    \   Pip can be thought of as a mechanism for triggering actions in hosts\n   and\
    \ routers, just as a machine language can be thought of as a\n   mechanism for\
    \ triggering actions in CPUs.  The machine language has\n   no functional semantics\
    \ outside of the specific actions it triggers\n   (move this register, write that\
    \ memory location, etc.).  But, the\n   machine language is a very powerful tool\
    \ upon which functional\n   semantics are built.  Likewise, Pip is a powerful\
    \ tool upon which\n   routing, addressing, and flow functions can be built.\n"
- title: 2.  Pip Specification
  contents:
  - "2.  Pip Specification\n   The Pip header is partitioned into three parts, the\
    \ Initial Part, the\n   Transit Part, and the Options Part.\n           +===========================+\n\
    \           |       Initial Part        |\n           +===========================+\n\
    \           |       Transit Part        |\n           +===========================+\n\
    \           |       Options Part        |\n           +===========================+\n\
    \           |                           |\n           |         Payload      \
    \     |\n           |                           |\n   Each part falls on a 32-bit\
    \ boundary (as indicated by the double\n   lines shown), and the Transit Part\
    \ falls on a 64 bit boundary.\n   The concept of tunneling in an integral part\
    \ of Pip.  Pip achieves\n   tunneling by encapsulating the Transit Part of the\
    \ Pip header in\n   another Transit Part.  Therefore, when tunneling, there is\
    \ one\n   Transit Part for each (nested) tunnel:\n           +===========================+\n\
    \           |       Initial Part        |\n           +===========================+\n\
    \           |       Transit Part        |\n           +===========================+\n\
    \           |       Transit Part        |\n           +===========================+\n\
    \                       .\n                       .\n                       .\n\
    \           +===========================+\n           |       Transit Part   \
    \     |\n           +===========================+\n           |       Options\
    \ Part        |\n           +===========================+\n   Because each Transit\
    \ Part has only what is necessary for router\n   forwarding and handling, this\
    \ method of tunneling is reasonably\n   efficient in terms of packet size.\n"
- title: 2.1  Initial Part
  contents:
  - "2.1  Initial Part\n   The Initial Part is formatted as shown in Figure 1.\n \
    \                                        length, in bits\n           +===========================+\n\
    \           |    Version Number = 8     |     4\n           +---------------------------+\n\
    \           |       Sub-Version         |     4\n           +---------------------------+\n\
    \           |      Options Offset       |     8\n           +---------------------------+\n\
    \           |     Options Contents      |     8\n           +---------------------------+\n\
    \           |     Options Present       |     8\n           +===========================+\n\
    \           |       Packet SubID        |     16\n           +---------------------------+\n\
    \           |         Protocol          |     16\n           +===========================+\n\
    \           |         Dest ID           |     64\n           +===========================+\n\
    \           |        Source ID          |     64\n           +===========================+\n\
    \           |      Payload Length       |     32\n           +===========================+\n\
    \           |       Host Version        |     8\n           +---------------------------+\n\
    \           |      Payload Offset       |     8\n           +---------------------------+\n\
    \           |        Hop Count          |     16\n           +===========================+\n\
    \                          Figure 1:  Initial Part\n   An explanation of each\
    \ field follows.\n   2.1.1  Version Numbers\n   The first octet is divided into\
    \ two 4-bit fields, the Version and the\n   Sub-Version.  The Version field is\
    \ set to be 8, and is meant to be\n   version 8 of IP.  (As of this writing, this\
    \ is an experimental number\n   assigned for development of Pip.) Thus, all encapsulation\
    \ schemes\n   defined for IP can work for Pip as well.\n   As long as the Version\
    \ field is 8, the Initial Part and Options Part\n   of the Pip Header is as specified\
    \ in this standard.  (In other words,\n   the Sub-Version field refers only to\
    \ the Transit Part.)\n   By doing this, we allow the Transit Part of the Pip Header\
    \ to change\n   completely without necessarily requiring a host to understand\
    \ the new\n   Transit Part.  If a host receives a Pip header with a Version number\n\
    \   of 8 and an unknown Sub-version number, the host does not try to\n   parse\
    \ the Transit Part at all, rather it processes only the Initial\n   Part and the\
    \ Options Part.  (By using the Pip Header Protocol to\n   format Pip Headers,\
    \ a host can be made to formulate the right Transit\n   Part, even though the\
    \ host doesn't understand the semantics of the\n   Transit Part.  This allows\
    \ radical migration of the Transit Part\n   while potentially not requiring changes\
    \ to hosts.)\n   If a host or a router receives a packet with an unknown Version\n\
    \   number, the packet is silently discarded.\n   The Sub-Version field is set\
    \ to the value 0 for the version of Pip\n   defined in this specification.  As\
    \ long as the Sub-Version number is\n   0, the Transit Part is as specified in\
    \ this standard.  Any packet\n   received by a router with a Version number of\
    \ 8 and an unknown Sub-\n   Version number is silently discarded.\n   2.1.2  Options\
    \ Offset\n   The Options Offset indicates the position of the Options Part.  The\n\
    \   unit of measure of the Options Offset is 32-bit words, counting the\n   first\
    \ word of the Pip Header as word 0.\n   2.1.3  Options Contents\n   This field\
    \ indicates how the Options Present field should be\n   interpreted.  Each bit\
    \ of the Options field indicates if each of up\n   to eight options is present\
    \ in the Options Part.  The Options\n   Contents field indirectly indicates which\
    \ option each bit of the\n   Options Present field refers to.  We say indirectly\
    \ because the\n   mapping referred to by the Options Contents field is stored\
    \ locally.\n   In other words, without additional information (the mapping), it\
    \ is\n   not possible to examine the Options Contents field and know what\n  \
    \ option each bit of the Options Present field refers to.\n   Any of 256 possible\
    \ Options Contents values can be active at a given\n   time.  (Note that the means\
    \ by which the meaning of the Options\n   Contents values are assigned and conveyed\
    \ to routers and hosts is\n   outside the scope of this specification.)\n   2.1.4\
    \  Options Present\n   This field indicates which of the Options indicated by\
    \ the Options\n   Contents field are actually present in the Options Part.  Each\
    \ bit of\n   this field refers to a single option type.  The mapping of each bit\n\
    \   to its' option type is determined by the Options Contents field.\n   For instance,\
    \ assume that the Options Contents field indicates that\n   bit 0 of the Options\
    \ Present field refers to the PDN Address option,\n   that bit 1 of the Options\
    \ Present field refers to the foo option, and\n   that bit 2 of the Options Present\
    \ field refers to the Fragmentation\n   option.  (As of this writing, there is\
    \ only one option.  Until there\n   are more than eight options, there is no need\
    \ to define more than one\n   Options Contents values.)\n   In this case, a value\
    \ of 101 in the Options Present field indicates\n   that the PDN Address and Fragmentation\
    \ options are present in the\n   Options Part, and that the foo option is not\
    \ present.\n   Note that an Options Present value of 0 indicates that there are\
    \ no\n   options present, regardless of the value of the Options Contents\n  \
    \ field.  Note also that no more than 8 options, not including the\n   default\
    \ first option (the Options Descriptor), can be present in any\n   Options Part.\n\
    \   The Options Contents/Options Present method of processing options\n   allows\
    \ for efficient processing of options.  First, a router can\n   ignore any options\
    \ that may be present but that do not impact it (for\n   instance, a router not\
    \ attached to a PDN need not consider the PDN\n   Address option).  Second, the\
    \ desired option can be very quickly\n   retrieved, because the first option,\
    \ the Options Descriptor option,\n   contains the offset of each of the up to\
    \ eight options indicated by\n   the Options Present field.\n   2.1.5  Packet\
    \ SubID\n   This field is used by Pip hosts to correctly associate received PCMP\n\
    \   messages with local control blocks.  This is necessary because the\n   semantics\
    \ of the Transit Part can change while a packet is in\n   transit.  Therefore,\
    \ a router sending a PCMP message cannot\n   necessarily provide all of the information\
    \ needed by the Pip host to\n   correctly identify the context of the received\
    \ message (that is,\n   which \"packet flow\" it is identified with).\n   A PCMP\
    \ message uses the Protocol, Source ID, Dest ID, and Packet\n   SubID to define\
    \ the PCMP messages context.  It is not sufficient to\n   use just Protocol, Source\
    \ ID, and Dest ID, because two hosts running\n   the same protocol between them\
    \ may have multiple \"flows\", for\n   instance, a data flow, a video flow, and\
    \ an audio flow in the case of\n   multi-media.  Each flow may have a different\
    \ Transit Part, and take\n   different paths.  Therefore, the Packet SubID field\
    \ is needed to\n   further differentiate.\n   2.1.6  Protocol\n   Indicates the\
    \ protocol header found in the payload.  The values for\n   this field are the\
    \ same as those used for IPv4.\n   2.1.7  Dest ID\n   The Dest ID field indicates\
    \ the Pip ID of the final recipient of the\n   Pip packet.  This field is examined\
    \ by both hosts and routers.\n   When a Pip System processes the Routing Directive\
    \ (RD), it may\n   determine that it needs to examine the Dest ID for further\n\
    \   processing.  This may happen both when a host or router receives a\n   Pip\
    \ packet destined for itself, or when a router receives a packet\n   that should\
    \ be forwarded based on Dest ID (as indicated by the RD).\n   When a Pip system\
    \ determines at forwarding time that a packet is\n   destined for itself, it checks\
    \ the Dest ID to verify if that packet\n   is destined for it.  If the complete\
    \ Dest ID matches one of its own\n   Pip IDs, then the packet is for it, and is\
    \ passed to the layer\n   indicated by the Protocol field (in the Host Part).\
    \  (The Pip system\n   may of course wish to check a security option before passing\
    \ a packet\n   to an upper layer.)\n   If the complete Dest ID field does not\
    \ match one of its own IDs, then\n   an ID/RD Mismatch PCMP message is sent to\
    \ the source of the packet,\n   as indicated by the Source ID and potentially\
    \ source information in\n   the RD.  The purpose of this message is to flush the\
    \ ID to RD binding\n   in the source Pip host.\n   2.1.8  Source ID\n   This is\
    \ the Pip ID of the source of the packet.  It is passed to\n   upper layers for\
    \ the purposes of identifying the context for the\n   packet.\n   2.1.9  Payload\
    \ Length\n   The Payload Length gives the length of the Pip packet payload in\n\
    \   units of 8 bits.  The Payload Length does not include the length of\n   the\
    \ Pip header.\n   2.1.10  Host Version\n   The Host Version field indicates what\
    \ \"version\" of Pip software the\n   sending host has implemented.  This is to\
    \ allow a host to inform a\n   router which ancillary protocols/messages the host\
    \ is able to accept.\n   It is envisioned that over time, new host functions will\
    \ be\n   developed.  Different hosts will install these new functions at\n   different\
    \ times.  This field allows routers to know what functions\n   the host can and\
    \ cannot handle.\n   2.1.11  Payload Offset\n   The Payload Offset indicates the\
    \ position of the Payload Part.  The\n   unit of measure of the Payload Offset\
    \ is 32-bit words, counting the\n   first word of the Pip Header as word 0.\n\
    \   If a Pip system encapsulates a Transit Part in another Transit Part,\n   then\
    \ the Payload Offset is increased by the length of the new Transit\n   Part.\n\
    \   2.1.12  Hop Count\n   The Hop Count is decremented by every router that forwards\
    \ the Pip\n   packet.  If a system receives a Pip header with a Hop Count equal\
    \ to\n   0, and is not the recipient of the packet, then the packet is\n   discarded\
    \ and a PCMP Destination Unreachable is routed to the system\n   indicated by\
    \ the Routing Directive.  (In other words, a host can\n   legally receive a Transit\
    \ Part with a Hop Count of 0, and indeed a\n   host doesn't look at the Hop Count\
    \ field upon reception.)\n"
- title: 2.2  Transit Part
  contents:
  - "2.2  Transit Part\n   The Transit Part is formatted as shown in Figure 2.\n \
    \                                        length, in bits\n                   +===========================+\n\
    \                   |         Reserved          |     16\n                   +---------------------------+\n\
    \                   |    Transit Part Offset    |     8\n                   +---------------------------+\n\
    \                   |        HD Contents        |     8\n                   +===========================+\n\
    \                   |  Handling Directive (HD)  |     32\n    ---------------+===========================+\n\
    \        ^          |        FTIF Offset        |     8\n        |          +---------------------------+\n\
    \        |          |        RC Contents        |     8\n        |          +---------------------------+\n\
    \        |          |   Routing Context (RC)    |     16\n     Routing       +===========================+\n\
    \                   |         FTIF 1            |     16\n     Directive     +---------------------------+\n\
    \        |          |         FTIF 2            |     16\n        |          +---------------------------+\n\
    \        |                       .\n        |                       .\n      \
    \  |                       .\n        |          +---------------------------+\n\
    \        |          |         FTIF N            |     16\n        |          +---------------------------+\n\
    \        v          |         Padding           |     Variable\n    ---------------+===========================+\n\
    \                          Figure 2: Transit Part\n   An explanation of each field\
    \ follows.\n   2.2.1  Transit Part Offset\n   This field gives the position of\
    \ the first word of the next Transit\n   Part.  The unit of measure of the Transit\
    \ Part Offset is 32-bit\n   words, counting the first word of the current Transit\
    \ Part as word 0.\n   If there is no next Transit Part, then this field is written\
    \ as all\n   0's.\n   2.2.2  HD Contents\n   The HD Contents field indicates how\
    \ the Handling Directive (HD) field\n   should be interpreted.  The HD field is\
    \ divided into multiple fields,\n   each representing a different handling function.\
    \  Each individual\n   field in the HD is called an HD Unit (HDU).  The Options\
    \ Contents\n   field indirectly indicates which HDUs are in the HD field, and\
    \ where\n   they are.  We say indirectly because the mapping referred to by the\n\
    \   HD Contents field is stored locally. In other words, without\n   additional\
    \ information (the mapping), it is not possible to examine\n   the HD Contents\
    \ field and know what the HDU locations are.\n   Any of 256 possible HD Contents\
    \ values can be active at a given time.\n   (Note that the means by which the\
    \ meaning of the HD Contents values\n   are assigned and conveyed to routers and\
    \ hosts is outside the scope\n   of this specification.)\n   2.2.3  Handling Directive\
    \ (HD)\n   The HD is a general purpose field used for the purpose of triggering\n\
    \   special packet handling by a Pip system.  The HD field does not\n   influence\
    \ a Pip router's next hop choice for a Pip packet, nor does\n   it influence a\
    \ Pip host's determination as to whether the Pip packet\n   is destined for it.\
    \  Examples of special packet handling would be\n   \"low priority queueing\"\
    , or \"high priority discard\", etc.  (Note that\n   the Transit Options also\
    \ influence \"handling\", in the sense that\n   handling is essentially defined\
    \ here to mean \"anything that is not\n   routing.  The HD field, though, is intended\
    \ for the most common types\n   of handling--handling that is expected to be in\
    \ a significant\n   percentage of packets.)\n   Both hosts and routers use the\
    \ HD field.  (Hosts may make use of the\n   HD field for packet handling for both\
    \ incoming and outgoing packets.)\n   There is a complete distinction between\
    \ the syntax and the semantics\n   of the HD field.  (This can be contrasted with,\
    \ for instance, IP,\n   which couples the semantics and syntax of the TOS bits.\
    \  That is, the\n   IP specification itself determines, to a first degree, how\
    \ the TOS\n   bits are interpreted.) Each Pip system can modify the semantic\n\
    \   meaning of the HD, for instance, by increasing or decreasing the\n   queueing\
    \ priority of a packet.  This is called packet tagging.\n   From an abstract modeling\
    \ perspective, the HD is handled as follows:\n   1.  Extract the semantic meaning(s)\
    \ (the handling instructions\n       associated with the HDUs) from the HD field.\
    \  Transmitting Pip\n       hosts determine the semantic meaning by some other\
    \ means, such as\n       the upper layer protocol.  If the receiving system decapsulates\n\
    \       multiple Pip headers, then the HD semantics are extracted from the\n \
    \      lowest Pip header for which it is not the target (see example on\n    \
    \   tunneling below).\n   2.  Handle the Pip packet according to those instructions.\
    \  In some\n       cases, it is possible that the Pip system does not understand\
    \ the\n       semantics of one or more HDUs of the HD field.  For each HDU whose\n\
    \       semantics are not understood, however, the pip system at least\n     \
    \  knows whether to 1) pass the HDU on untouched, 2) set it to all\n       0s,\
    \ 3) set it to all 1s, 4) discard the packet silently, or 5)\n       discard the\
    \ packet with a PCMP HDU Not Understood packet.\n   3.  Modify the semantic meaning\
    \ if necessary.  Note also that if the\n       Pip packet is replicated for multicast,\
    \ each packet has its HD\n       semantics modified individually.  .LP .in 3 2.2.4\
    \ Tunneling .LP\n       Consider two Pip systems, X and Y, separated by one or\n\
    \       intermediate Pip systems.  X wishes to tunnel a Transit Part to Y.\n \
    \      Y is therefore the target system of the tunnel.  A Transit Part He\n  \
    \     arrives at X.  In order to forward the Transit Part to Y, X\n       encapsulates\
    \ He in another Transit Part, Hy.  Y is the target\n       system for Transit\
    \ Part Hy.  X sets the HD of He to what it would\n       have been if Y was directly\
    \ connected to X (that is, there were no\n       intermediate Pip systems between\
    \ X and Y).  Further, it is\n       intended that Y will derive its HD semantics\
    \ from the HD of\n       Transit Part He, not Transit Part Hy.  .sp .KS\n    \
    \    ----0-----o-----o-----o-----o-----0----\n            X     I     J     K\
    \     L     Y\n   Now consider the operation of Pip system L (the previous hop\
    \ system\n   to Y).  When L forwards the packet to Y, it may either decapsulate\n\
    \   the packet (in the knowledge that Y is the target for Hy), or not\n   decapsulate\
    \ the packet.  Either way, L derives its HD semantics from\n   the HD of Transit\
    \ Part Hy.\n   If L does not decapsulate the Transit Part, then it is as though\
    \ I,\n   J, K, and L are a \"subnetwork\" (albeit a Pip subnetwork), and Y is\n\
    \   stripping the \"subnetwork\" header (Hy) off before processing the true\n\
    \   Transit Part (He).  If L does decapsulate the Transit Part, then,\n   from\
    \ Y's perspective, it is essentially as though Y were directly\n   connected to\
    \ X.\n   2.2.5  Routing Directive (RD)\n   The RD consists of the Routing Context\
    \ (RC), the RC Contents, the\n   FTIF Offset, and a series of zero or more FTIFs\
    \ (Forwarding Table\n   Index Fields).  This series of FTIFs is called the FTIF\
    \ Chain.  The\n   sole purpose of the RD is to determine how to forward the Pip\n\
    \   packet--the RD does not influence handling in any way.\n   Figure 3 illustrates\
    \ the decision process for forwarding the Pip\n   packet.\n                 +---------+(next\
    \ level RC)\n    (decapsulate)|         |\n                 |         v\n    \
    \             |<--------RC----------------->FIB\n                 |        / \
    \             |       |    IF Offset)\n                 |       |     |\n    \
    \             |       |     v\n                 |<------|---FTIF------------->FIB\n\
    \                 |       |  /  :\n                 |       |<-   :(repeatedly...)\n\
    \                 |       |     :\n                 |       |     v\n        \
    \         |<------|---FTIF------------->FIB\n                         |  /  |\n\
    \                         |<-   |\n                         v     v\n        \
    \                  DestID-------------->FIB\n                       Figure 3:\
    \  Forwarding Process\n   Figure 3 is interpreted as follows.  The FIB is the\
    \ Forwarding\n   Information Block.  The FIB contains all the information needed\
    \ to\n   forward a packet, and may contain multiple next hop (for multicast).\n\
    \   This information includes 1) the outgoing interface, 2) how to\n   encapsulate\
    \ the packet, including lower-layer address(es) (the\n   lower-layer address(es)\
    \ along with the outgoing interface determine\n   the next hop Pip system), 3)\
    \ whether and how to tunnel, 4) how to\n   modify the semantics of the HD and\
    \ RC, and how to modify the FTIF\n   Offset.  The goal of the forwarding algorithm\
    \ is to reach the\n   appropriate FIB.\n   The directed lines in Figure 3 start\
    \ at the RC and, through various\n   possible paths, reach a FIB.  These lines\
    \ represent the various\n   information that can influence the forwarding decision\
    \ (that is, the\n   FIB chosen).  For instance, there is no way to reach a FIB\
    \ without\n   first examining the information in the RC.  However, it is possible\n\
    \   to identify a FIB by considering only the information in the RC (as\n   indicated\
    \ by the directed line leading directly right from the RC).\n   Based on the information\
    \ in the RC, it is also possible to determine\n   that the Transit Part must be\
    \ decapsulated, and 1) the RC of the next\n   Transit Part be processed (the line\
    \ leading directly left), 2) the\n   FTIF indicated by the FTIF Offset is processed\
    \ (the line leading down\n   and right), or 3) the Dest ID is processed (the line\
    \ leading down and\n   lest).\n   Likewise, when considering the value of an FTIF\
    \ (in addition to all\n   information already considered), the resulting action\
    \ may be that 1)\n   a FIB is identified, 2) the Transit Part is decapsulated,\
    \ 3) the\n   subsequent FTIF is processed, or 4) the Dest ID is processed.\n \
    \  The RC is handled similarly to the HD.  The RC Contents field\n   indicates\
    \ how the RC should be interpreted.  While the RC is\n   constructed similarly\
    \ to the HD in the sense that it consists of\n   multiple fields, the RC can be\
    \ interpreted as a flat field in-so-far\n   as forwarding a Pip packet is concerned,\
    \ whereas the HD cannot.\n   Thus, in a mechanical sense, the RC Contents can\
    \ be viewed as an\n   index into a table that returns a pointer to another table\
    \ (an\n   rcTable), which is indexed by the RC itself.  (Or, the combined RC\n\
    \   Contents/RC can be viewed as a single large index into a single\n   table,\
    \ etc.)\n   The FTIF Offset field indicates which FTIF is active.  The active\n\
    \   FTIF is the one that is used to index the forwarding table indicated\n   by\
    \ the RC Contents/RC.  An FTIF Offset value of 0 means that the\n   first FTIF\
    \ is active, an FTIF Offset value of 1 means that the second\n   FTIF is active,\
    \ and so on.  If there are no FTIFs, then the FTIF\n   Offset has no meaning,\
    \ and can be any value.  In this case, the RC\n   field itself will indicate how\
    \ to forward the packet.\n   The FTIF Chain is padded out to a 32-bit boundary.\
    \  Note that there\n   can be more than 16 bits of padding (for instance, if it\
    \ is desirable\n   to pad out to a 64-bit boundary).  The padding is ignored upon\n\
    \   receipt, and can be transmitted as any value (that is, it does not\n   have\
    \ to be any specific pattern of 0's or 1's).\n   Note that a single \"number\"\
    \ in the FTIF chain may in fact be more\n   than 16 bits in length.  In this case,\
    \ the number can be encoded as\n   multiple FTIFs with no loss of generality.\
    \  It is only required that\n   in all cases a multiple FTIF number be distinguishable\
    \ from a single\n   FTIF number.\n   2.2.6  Router RD Forwarding Algorithm\n \
    \  This section describes the forwarding algorithm for a Pip router.\n   1.  Using\
    \ the value of the RC field as an index, retrieve one of the\n       following\
    \ instructions (steps 2 - 5) from the rcTable determined\n       by the RC Contents.\n\
    \   2.  If the instruction is decapsulate, then decapsulate the Transit\n    \
    \   Part and re-execute step 1 using the next Transit Part.\n   3.  If the instruction\
    \ is forward, then retrieve the associated\n       Forwarding Information Block\
    \ (FIB), and go to step 12.\n   4.  If the instruction is to examine the Dest\
    \ ID, then retrieve the\n       FIB associated with the Dest ID, and go to step\
    \ 12.\n   5.  If the instruction is to examine the FTIF Chain, then retrieve the\n\
    \       forwardingTable indicated by the rcTable entry, and continue on to\n \
    \      step 6.\n   6.  Using the value of the currently active FTIF (this is the\
    \ FTIF\n       indicated by the FTIF Offset if this is the first FTIF examined)\n\
    \       as an index, retrieve one or more of the following instructions\n    \
    \   (steps 7 - 10) from the forwardingTable identified in step 5 or\n       step\
    \ 10.\n   7.  If the instruction is decapsulate, then decapsulate the Pip header\n\
    \       and re-execute step 1 using the new header (this is the same as\n    \
    \   step 2).\n   8.  If the instruction is forward, then (possibly additionally)\n\
    \       retrieve the associated FIB, and go to step 12 (this is the same\n   \
    \    as step 3).\n   9.  If the instruction is to examine the Dest ID, then retrieve\
    \ the\n       FIB associated with the Dest ID and go to step 12 (this is the\n\
    \       same as step 4).\n   10.  If the instruction is to examine the next FTIF,\
    \ then, according\n        to the information in the current forwardingTable entry,\
    \ modify\n        the current FTIF and choose a new forwardingTable.\n   11. \
    \ Make the next FTIF the current FTIF and go to step 6.\n   12.  The FIB contains\
    \ a set of potential recipients for the Pip\n        packet, including next hop\
    \ Pip systems (both directly connected\n        and at the end of Pip tunnels)\
    \ and the upper layer of the local\n        system.  Taking into consideration\
    \ 1) the incoming interface, 2)\n        the previous hop Pip system if known\
    \ (as determined by the\n        lower-layer source address and incoming interface),\
    \ and 3)\n        potentially other local information (such as congestion on\n\
    \        outgoing queues), prune the set of potential recipients.  (This\n   \
    \     may result in no pruning having taken place or in every potential\n    \
    \    next hop having been pruned.)\n   13.  For each remaining next hop, format\
    \ a Pip header by modifying a)\n        the RC, b) the current FTIF, c) the FTIF\
    \ Offset (to point to 1)\n        the FTIF pointed to in the received RD, 2) the\
    \ current FTIF, 3)\n        the Nth FTIF counting from the 0th FTIF, or 4) the\
    \ Nth FTIF\n        counting forwards or backwards from the current FTIF) and\
    \ d) any\n        Pip header encapsulations, according to the information in the\n\
    \        FIB, and transmit the packet to the recipient (either a next hop\n  \
    \      or upper layer).\n   2.3  Options Part\n   The Option Part is formatted\
    \ as shown in Figure 4.\n           +===========================+\n          \
    \ |    Options Descriptor     |     64\n           +===========================+\n\
    \           |        Option 2           |     Variable\n           +===========================+\n\
    \           |        Option 3           |     Variable\n           +===========================+\n\
    \                       .\n                       .\n                       .\n\
    \           +===========================+\n           |        Option N      \
    \     |     Variable\n           +===========================+\n             \
    \             Figure 4: Options Part\n   Every Option is at least one 32-bit word\
    \ in length, and ends on a\n   32-bit word boundary.  Because the type of each\
    \ option is known from\n   the Options Contents field, there is no need to indicate\
    \ the option\n   type in the options field themselves.  Thus, there is no common\n\
    \   format among the options--each option has its own format.  The\n   individual\
    \ options are defined in another specification.\n   2.3.1  Options Descriptor\n\
    \   The Options Descriptor option gives the offset of each option in the\n   Options\
    \ Part.  The Options Descriptor consists of eight eight-bit\n   Option Position\
    \ fields, each of which gives the position of up to\n   eight options (there can\
    \ be no more than 8 Options Part).  Each of\n   the Option Position fields correspond\
    \ to one of the bits in the\n   Options Present field.  The unit of measure of\
    \ each Option Position\n   is 32-bit words, counting the first word of the Options\
    \ Part as word\n   0.  The high order Option Position field corresponds to the\
    \ high\n   order bit in the Options Present field.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Paul Francis\n   NTT Software Lab\n   3-9-11 Midori-cho\
    \ Musashino-shi\n   Tokyo 180 Japan\n   Phone: +81-422-59-3843\n   Fax +81-422-59-3765\n\
    \   EMail: francis@cactus.ntt.jp\n"
