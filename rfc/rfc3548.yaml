- title: __initial_text__
  contents:
  - '             The Base16, Base32, and Base64 Data Encodings

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the commonly used base 64, base 32, and\
    \ base\n   16 encoding schemes.  It also discusses the use of line-feeds in\n\
    \   encoded data, use of padding in encoded data, use of non-alphabet\n   characters\
    \ in encoded data, and use of different encoding alphabets.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n   2.  Implementation discrepancies . . . . . . . . . . . .\
    \ . . . . .  2\n       2.1.  Line feeds in encoded data . . . . . . . . . . .\
    \ . . . .  2\n       2.2.  Padding of encoded data  . . . . . . . . . . . . .\
    \ . . .  3\n       2.3.  Interpretation of non-alphabet characters in encoded\n\
    \             data . . . . . . . . . . . . . . . . . . . . . . . . . .  3\n  \
    \     2.4.  Choosing the alphabet  . . . . . . . . . . . . . . . . .  3\n   3.\
    \  Base 64 Encoding . . . . . . . . . . . . . . . . . . . . . . .  4\n   4.  Base\
    \ 64 Encoding with URL and Filename Safe Alphabet . . . . .  6\n   5.  Base 32\
    \ Encoding . . . . . . . . . . . . . . . . . . . . . . .  6\n   6.  Base 16 Encoding\
    \ . . . . . . . . . . . . . . . . . . . . . . .  8\n   7.  Illustrations and examples\
    \ . . . . . . . . . . . . . . . . . .  9\n   8.  Security Considerations  . .\
    \ . . . . . . . . . . . . . . . . . 10\n   9.  References . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . 11\n       9.1.  Normative References . . .\
    \ . . . . . . . . . . . . . . . 11\n       9.2.  Informative References . . .\
    \ . . . . . . . . . . . . . . 11\n   10. Acknowledgements . . . . . . . . . .\
    \ . . . . . . . . . . . . . 11\n   11. Editor's Address . . . . . . . . . . .\
    \ . . . . . . . . . . . . 12\n   12. Full Copyright Statement . . . . . . . .\
    \ . . . . . . . . . . . 13\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Base encoding of data is used in many situations to store\
    \ or transfer\n   data in environments that, perhaps for legacy reasons, are restricted\n\
    \   to only US-ASCII [9] data.  Base encoding can also be used in new\n   applications\
    \ that do not have legacy restrictions, simply because it\n   makes it possible\
    \ to manipulate objects with text editors.\n   In the past, different applications\
    \ have had different requirements\n   and thus sometimes implemented base encodings\
    \ in slightly different\n   ways.  Today, protocol specifications sometimes use\
    \ base encodings in\n   general, and \"base64\" in particular, without a precise\
    \ description or\n   reference.  MIME [3] is often used as a reference for base64\
    \ without\n   considering the consequences for line-wrapping or non-alphabet\n\
    \   characters.  The purpose of this specification is to establish common\n  \
    \ alphabet and encoding considerations.  This will hopefully reduce\n   ambiguity\
    \ in other documents, leading to better interoperability.\n   The key words \"\
    MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\",\
    \ \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document\
    \ are to be interpreted as described in RFC 2119 [1].\n"
- title: 2.  Implementation discrepancies
  contents:
  - "2.  Implementation discrepancies\n   Here we discuss the discrepancies between\
    \ base encoding\n   implementations in the past, and where appropriate, mandate\
    \ a\n   specific recommended behavior for the future.\n"
- title: 2.1.  Line feeds in encoded data
  contents:
  - "2.1.  Line feeds in encoded data\n   MIME [3] is often used as a reference for\
    \ base 64 encoding.  However,\n   MIME does not define \"base 64\" per se, but\
    \ rather a \"base 64\n   Content-Transfer-Encoding\" for use within MIME.  As\
    \ such, MIME\n   enforces a limit on line length of base 64 encoded data to 76\n\
    \   characters.  MIME inherits the encoding from PEM [2] stating it is\n   \"\
    virtually identical\", however PEM uses a line length of 64\n   characters.  The\
    \ MIME and PEM limits are both due to limits within\n   SMTP.\n   Implementations\
    \ MUST NOT not add line feeds to base encoded data\n   unless the specification\
    \ referring to this document explicitly\n   directs base encoders to add line\
    \ feeds after a specific number of\n   characters.\n"
- title: 2.2.  Padding of encoded data
  contents:
  - "2.2.  Padding of encoded data\n   In some circumstances, the use of padding (\"\
    =\") in base encoded data\n   is not required nor used.  In the general case,\
    \ when assumptions on\n   size of transported data cannot be made, padding is\
    \ required to yield\n   correct decoded data.\n   Implementations MUST include\
    \ appropriate pad characters at the end of\n   encoded data unless the specification\
    \ referring to this document\n   explicitly states otherwise.\n"
- title: 2.3.  Interpretation of non-alphabet characters in encoded data
  contents:
  - "2.3.  Interpretation of non-alphabet characters in encoded data\n   Base encodings\
    \ use a specific, reduced, alphabet to encode binary\n   data.  Non alphabet characters\
    \ could exist within base encoded data,\n   caused by data corruption or by design.\
    \  Non alphabet characters may\n   be exploited as a \"covert channel\", where\
    \ non-protocol data can be\n   sent for nefarious purposes.  Non alphabet characters\
    \ might also be\n   sent in order to exploit implementation errors leading to,\
    \ e.g.,\n   buffer overflow attacks.\n   Implementations MUST reject the encoding\
    \ if it contains characters\n   outside the base alphabet when interpreting base\
    \ encoded data, unless\n   the specification referring to this document explicitly\
    \ states\n   otherwise.  Such specifications may, as MIME does, instead state\
    \ that\n   characters outside the base encoding alphabet should simply be\n  \
    \ ignored when interpreting data (\"be liberal in what you accept\").\n   Note\
    \ that this means that any CRLF constitute \"non alphabet\n   characters\" and\
    \ are ignored.  Furthermore, such specifications may\n   consider the pad character,\
    \ \"=\", as not part of the base alphabet\n   until the end of the string.  If\
    \ more than the allowed number of pad\n   characters are found at the end of the\
    \ string, e.g., a base 64 string\n   terminated with \"===\", the excess pad characters\
    \ could be ignored.\n"
- title: 2.4.  Choosing the alphabet
  contents:
  - "2.4.  Choosing the alphabet\n   Different applications have different requirements\
    \ on the characters\n   in the alphabet.  Here are a few requirements that determine\
    \ which\n   alphabet should be used:\n   o   Handled by humans.  Characters \"\
    0\", \"O\" are easily interchanged,\n       as well \"1\", \"l\" and \"I\".  In\
    \ the base32 alphabet below, where 0\n       (zero) and 1 (one) is not present,\
    \ a decoder may interpret 0 as\n       O, and 1 as I or L depending on case. \
    \ (However, by default it\n       should not, see previous section.)\n   o   Encoded\
    \ into structures that place other requirements.  For base\n       16 and base\
    \ 32, this determines the use of upper- or lowercase\n       alphabets.  For base\
    \ 64, the non-alphanumeric characters (in\n       particular \"/\") may be problematic\
    \ in file names and URLs.\n   o   Used as identifiers.  Certain characters, notably\
    \ \"+\" and \"/\" in\n       the base 64 alphabet, are treated as word-breaks\
    \ by legacy text\n       search/index tools.\n   There is no universally accepted\
    \ alphabet that fulfills all the\n   requirements.  In this document, we document\
    \ and name some currently\n   used alphabets.\n"
- title: 3.  Base 64 Encoding
  contents:
  - "3.  Base 64 Encoding\n   The following description of base 64 is due to [2],\
    \ [3], [4] and [5].\n   The Base 64 encoding is designed to represent arbitrary\
    \ sequences of\n   octets in a form that requires case sensitivity but need not\
    \ be\n   humanly readable.\n   A 65-character subset of US-ASCII is used, enabling\
    \ 6 bits to be\n   represented per printable character.  (The extra 65th character,\
    \ \"=\",\n   is used to signify a special processing function.)\n   The encoding\
    \ process represents 24-bit groups of input bits as output\n   strings of 4 encoded\
    \ characters.  Proceeding from left to right, a\n   24-bit input group is formed\
    \ by concatenating 3 8-bit input groups.\n   These 24 bits are then treated as\
    \ 4 concatenated 6-bit groups, each\n   of which is translated into a single digit\
    \ in the base 64 alphabet.\n   Each 6-bit group is used as an index into an array\
    \ of 64 printable\n   characters.  The character referenced by the index is placed\
    \ in the\n   output string.\n                   Table 1: The Base 64 Alphabet\n\
    \      Value Encoding  Value Encoding  Value Encoding  Value Encoding\n      \
    \    0 A            17 R            34 i            51 z\n          1 B      \
    \      18 S            35 j            52 0\n          2 C            19 T   \
    \         36 k            53 1\n          3 D            20 U            37 l\
    \            54 2\n          4 E            21 V            38 m            55\
    \ 3\n          5 F            22 W            39 n            56 4\n         \
    \ 6 G            23 X            40 o            57 5\n          7 H         \
    \   24 Y            41 p            58 6\n          8 I            25 Z      \
    \      42 q            59 7\n          9 J            26 a            43 r   \
    \         60 8\n         10 K            27 b            44 s            61 9\n\
    \         11 L            28 c            45 t            62 +\n         12 M\
    \            29 d            46 u            63 /\n         13 N            30\
    \ e            47 v\n         14 O            31 f            48 w         (pad)\
    \ =\n         15 P            32 g            49 x\n         16 Q            33\
    \ h            50 y\n   Special processing is performed if fewer than 24 bits\
    \ are available\n   at the end of the data being encoded.  A full encoding quantum\
    \ is\n   always completed at the end of a quantity.  When fewer than 24 input\n\
    \   bits are available in an input group, zero bits are added (on the\n   right)\
    \ to form an integral number of 6-bit groups.  Padding at the\n   end of the data\
    \ is performed using the '=' character.  Since all base\n   64 input is an integral\
    \ number of octets, only the following cases\n   can arise:\n   (1) the final\
    \ quantum of encoding input is an integral multiple of 24\n   bits; here, the\
    \ final unit of encoded output will be an integral\n   multiple of 4 characters\
    \ with no \"=\" padding,\n   (2) the final quantum of encoding input is exactly\
    \ 8 bits; here, the\n   final unit of encoded output will be two characters followed\
    \ by two\n   \"=\" padding characters, or\n   (3) the final quantum of encoding\
    \ input is exactly 16 bits; here, the\n   final unit of encoded output will be\
    \ three characters followed by one\n   \"=\" padding character.\n"
- title: 4.  Base 64 Encoding with URL and Filename Safe Alphabet
  contents:
  - "4.  Base 64 Encoding with URL and Filename Safe Alphabet\n   The Base 64 encoding\
    \ with an URL and filename safe alphabet has been\n   used in [8].\n   An alternative\
    \ alphabet has been suggested that used \"~\" as the 63rd\n   character.  Since\
    \ the \"~\" character has special meaning in some file\n   system environments,\
    \ the encoding described in this section is\n   recommended instead.\n   This\
    \ encoding should not be regarded as the same as the \"base64\"\n   encoding,\
    \ and should not be referred to as only \"base64\".  Unless\n   made clear, \"\
    base64\" refer to the base 64 in the previous section.\n   This encoding is technically\
    \ identical to the previous one, except\n   for the 62:nd and 63:rd alphabet character,\
    \ as indicated in table 2.\n         Table 2: The \"URL and Filename safe\" Base\
    \ 64 Alphabet\n    Value Encoding  Value Encoding  Value Encoding  Value Encoding\n\
    \       0 A            17 R            34 i            51 z\n       1 B      \
    \      18 S            35 j            52 0\n       2 C            19 T      \
    \      36 k            53 1\n       3 D            20 U            37 l      \
    \      54 2\n       4 E            21 V            38 m            55 3\n    \
    \   5 F            22 W            39 n            56 4\n       6 G          \
    \  23 X            40 o            57 5\n       7 H            24 Y          \
    \  41 p            58 6\n       8 I            25 Z            42 q          \
    \  59 7\n       9 J            26 a            43 r            60 8\n      10\
    \ K            27 b            44 s            61 9\n      11 L            28\
    \ c            45 t            62 - (minus)\n      12 M            29 d      \
    \      46 u            63 _ (understrike)\n      13 N            30 e        \
    \    47 v\n      14 O            31 f            48 w         (pad) =\n      15\
    \ P            32 g            49 x\n      16 Q            33 h            50\
    \ y\n"
- title: 5.  Base 32 Encoding
  contents:
  - "5.  Base 32 Encoding\n   The following description of base 32 is due to [7] (with\n\
    \   corrections).\n   The Base 32 encoding is designed to represent arbitrary\
    \ sequences of\n   octets in a form that needs to be case insensitive but need\
    \ not be\n   humanly readable.\n   A 33-character subset of US-ASCII is used,\
    \ enabling 5 bits to be\n   represented per printable character.  (The extra 33rd\
    \ character, \"=\",\n   is used to signify a special processing function.)\n \
    \  The encoding process represents 40-bit groups of input bits as output\n   strings\
    \ of 8 encoded characters.  Proceeding from left to right, a\n   40-bit input\
    \ group is formed by concatenating 5 8bit input groups.\n   These 40 bits are\
    \ then treated as 8 concatenated 5-bit groups, each\n   of which is translated\
    \ into a single digit in the base 32 alphabet.\n   When encoding a bit stream\
    \ via the base 32 encoding, the bit stream\n   must be presumed to be ordered\
    \ with the most-significant-bit first.\n   That is, the first bit in the stream\
    \ will be the high-order bit in\n   the first 8bit byte, and the eighth bit will\
    \ be the low-order bit in\n   the first 8bit byte, and so on.\n   Each 5-bit group\
    \ is used as an index into an array of 32 printable\n   characters.  The character\
    \ referenced by the index is placed in the\n   output string.  These characters,\
    \ identified in Table 2, below, are\n   selected from US-ASCII digits and uppercase\
    \ letters.\n                   Table 3: The Base 32 Alphabet\n        Value Encoding\
    \  Value Encoding  Value Encoding  Value Encoding\n            0 A           \
    \  9 J            18 S            27 3\n            1 B            10 K      \
    \      19 T            28 4\n            2 C            11 L            20 U \
    \           29 5\n            3 D            12 M            21 V            30\
    \ 6\n            4 E            13 N            22 W            31 7\n       \
    \     5 F            14 O            23 X\n            6 G            15 P   \
    \         24 Y         (pad) =\n            7 H            16 Q            25\
    \ Z\n            8 I            17 R            26 2\n   Special processing is\
    \ performed if fewer than 40 bits are available\n   at the end of the data being\
    \ encoded.  A full encoding quantum is\n   always completed at the end of a body.\
    \  When fewer than 40 input bits\n   are available in an input group, zero bits\
    \ are added (on the right)\n   to form an integral number of 5-bit groups.  Padding\
    \ at the end of\n   the data is performed using the \"=\" character.  Since all\
    \ base 32\n   input is an integral number of octets, only the following cases\
    \ can\n   arise:\n   (1) the final quantum of encoding input is an integral multiple\
    \ of 40\n   bits; here, the final unit of encoded output will be an integral\n\
    \   multiple of 8 characters with no \"=\" padding,\n   (2) the final quantum\
    \ of encoding input is exactly 8 bits; here, the\n   final unit of encoded output\
    \ will be two characters followed by six\n   \"=\" padding characters,\n   (3)\
    \ the final quantum of encoding input is exactly 16 bits; here, the\n   final\
    \ unit of encoded output will be four characters followed by four\n   \"=\" padding\
    \ characters,\n   (4) the final quantum of encoding input is exactly 24 bits;\
    \ here, the\n   final unit of encoded output will be five characters followed\
    \ by\n   three \"=\" padding characters, or\n   (5) the final quantum of encoding\
    \ input is exactly 32 bits; here, the\n   final unit of encoded output will be\
    \ seven characters followed by one\n   \"=\" padding character.\n"
- title: 6.  Base 16 Encoding
  contents:
  - "6.  Base 16 Encoding\n   The following description is original but analogous\
    \ to previous\n   descriptions.  Essentially, Base 16 encoding is the standard\
    \ standard\n   case insensitive hex encoding, and may be referred to as \"base16\"\
    \ or\n   \"hex\".\n   A 16-character subset of US-ASCII is used, enabling 4 bits\
    \ to be\n   represented per printable character.\n   The encoding process represents\
    \ 8-bit groups (octets) of input bits\n   as output strings of 2 encoded characters.\
    \  Proceeding from left to\n   right, a 8-bit input is taken from the input data.\
    \  These 8 bits are\n   then treated as 2 concatenated 4-bit groups, each of which\
    \ is\n   translated into a single digit in the base 16 alphabet.\n   Each 4-bit\
    \ group is used as an index into an array of 16 printable\n   characters.  The\
    \ character referenced by the index is placed in the\n   output string.\n    \
    \               Table 5: The Base 16 Alphabet\n      Value Encoding  Value Encoding\
    \  Value Encoding  Value Encoding\n          0 0             4 4             8\
    \ 8            12 C\n          1 1             5 5             9 9           \
    \ 13 D\n          2 2             6 6            10 A            14 E\n      \
    \    3 3             7 7            11 B            15 F\n   Unlike base 32 and\
    \ base 64, no special padding is necessary since a\n   full code word is always\
    \ available.\n"
- title: 7.  Illustrations and examples
  contents:
  - "7.  Illustrations and examples\n   To translate between binary and a base encoding,\
    \ the input is stored\n   in a structure and the output is extracted.  The case\
    \ for base 64 is\n   displayed in the following figure, borrowed from [4].\n \
    \        +--first octet--+-second octet--+--third octet--+\n         |7 6 5 4\
    \ 3 2 1 0|7 6 5 4 3 2 1 0|7 6 5 4 3 2 1 0|\n         +-----------+---+-------+-------+---+-----------+\n\
    \         |5 4 3 2 1 0|5 4 3 2 1 0|5 4 3 2 1 0|5 4 3 2 1 0|\n         +--1.index--+--2.index--+--3.index--+--4.index--+\n\
    \   The case for base 32 is shown in the following figure, borrowed from\n   [6].\
    \  Each successive character in a base-32 value represents 5\n   successive bits\
    \ of the underlying octet sequence.  Thus, each group\n   of 8 characters represents\
    \ a sequence of 5 octets (40 bits).\n                        1          2    \
    \      3\n          01234567 89012345 67890123 45678901 23456789\n         +--------+--------+--------+--------+--------+\n\
    \         |< 1 >< 2| >< 3 ><|.4 >< 5.|>< 6 ><.|7 >< 8 >|\n         +--------+--------+--------+--------+--------+\n\
    \                                                 <===> 8th character\n      \
    \                                     <====> 7th character\n                 \
    \                     <===> 6th character\n                                <====>\
    \ 5th character\n                          <====> 4th character\n            \
    \         <===> 3rd character\n               <====> 2nd character\n         \
    \ <===> 1st character\n   The following example of Base64 data is from [4].\n\
    \       Input data:  0x14fb9c03d97e\n       Hex:     1   4    f   b    9   c \
    \    | 0   3    d   9    7   e\n       8-bit:   00010100 11111011 10011100  |\
    \ 00000011 11011001\n       11111110\n       6-bit:   000101 001111 101110 011100\
    \ | 000000 111101 100111\n       111110\n       Decimal: 5      15     46    \
    \ 28       0      61     37     62\n       Output:  F      P      u      c   \
    \     A      9      l      +\n       Input data:  0x14fb9c03d9\n       Hex:  \
    \   1   4    f   b    9   c     | 0   3    d   9\n       8-bit:   00010100 11111011\
    \ 10011100  | 00000011 11011001\n                                            \
    \           pad with 00\n       6-bit:   000101 001111 101110 011100 | 000000\
    \ 111101 100100\n       Decimal: 5      15     46     28       0      61     36\n\
    \                                                          pad with =\n      \
    \ Output:  F      P      u      c        A      9      k      =\n       Input\
    \ data:  0x14fb9c03\n       Hex:     1   4    f   b    9   c     | 0   3\n   \
    \    8-bit:   00010100 11111011 10011100  | 00000011\n                       \
    \                       pad with 0000\n       6-bit:   000101 001111 101110 011100\
    \ | 000000 110000\n       Decimal: 5      15     46     28       0      48\n \
    \                                                  pad with =      =\n       Output:\
    \  F      P      u      c        A      w      =      =\n"
- title: 8.  Security Considerations
  contents:
  - "8.  Security Considerations\n   When implementing Base encoding and decoding,\
    \ care should be taken\n   not to introduce vulnerabilities to buffer overflow\
    \ attacks, or other\n   attacks on the implementation.  A decoder should not break\
    \ on invalid\n   input including, e.g., embedded NUL characters (ASCII 0).\n \
    \  If non-alphabet characters are ignored, instead of causing rejection\n   of\
    \ the entire encoding (as recommended), a covert channel that can be\n   used\
    \ to \"leak\" information is made possible.  The implications of\n   this should\
    \ be understood in applications that do not follow the\n   recommended practice.\
    \  Similarly, when the base 16 and base 32\n   alphabets are handled case insensitively,\
    \ alteration of case can be\n   used to leak information.\n   Base encoding visually\
    \ hides otherwise easily recognized information,\n   such as passwords, but does\
    \ not provide any computational\n   confidentiality.  This has been known to cause\
    \ security incidents\n   when, e.g., a user reports details of a network protocol\
    \ exchange\n   (perhaps to illustrate some other problem) and accidentally reveals\n\
    \   the password because she is unaware that the base encoding does not\n   protect\
    \ the password.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [1] Bradner, S., \"Key words for use in RFCs to\
    \ Indicate Requirement\n       Levels\", BCP 14, RFC 2119, March 1997.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [2] Linn, J., \"Privacy Enhancement for Internet\
    \ Electronic Mail:\n       Part I: Message Encryption and Authentication Procedures\"\
    , RFC\n       1421, February 1993.\n   [3] Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n       Extensions (MIME) Part One: Format of Internet Message\
    \ Bodies\",\n       RFC 2045, November 1996.\n   [4] Callas, J., Donnerhacke,\
    \ L., Finney, H. and R. Thayer, \"OpenPGP\n       Message Format\", RFC 2440,\
    \ November 1998.\n   [5] Eastlake, D., \"Domain Name System Security Extensions\"\
    , RFC 2535,\n       March 1999.\n   [6] Klyne, G. and L. Masinter, \"Identifying\
    \ Composite Media\n       Features\", RFC 2938, September 2000.\n   [7] Myers,\
    \ J., \"SASL GSSAPI mechanisms\", Work in Progress.\n   [8] Wilcox-O'Hearn, B.,\
    \ \"Post to P2P-hackers mailing list\", World\n       Wide Web http://zgp.org/pipermail/p2p-hackers/2001-\n\
    \       September/000315.html, September 2001.\n   [9] Cerf, V., \"ASCII format\
    \ for Network Interchange\", RFC 20, October\n       1969.\n"
- title: 10.  Acknowledgements
  contents:
  - "10.  Acknowledgements\n   Several people offered comments and suggestions, including\
    \ Tony\n   Hansen, Gordon Mohr, John Myers, Chris Newman, and Andrew Sieber.\n\
    \   Text used in this document is based on earlier RFCs describing\n   specific\
    \ uses of various base encodings.  The author acknowledges the\n   RSA Laboratories\
    \ for supporting the work that led to this document.\n"
- title: 11.  Editor's Address
  contents:
  - "11.  Editor's Address\n   Simon Josefsson\n   EMail: simon@josefsson.org\n"
- title: 12.  Full Copyright Statement
  contents:
  - "12.  Full Copyright Statement\n   Copyright (C) The Internet Society (2003).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assignees.\n\
    \   This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
