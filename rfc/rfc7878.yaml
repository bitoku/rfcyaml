- title: __initial_text__
  contents:
  - '         Session Peering Provisioning (SPP) Protocol over SOAP

    '
- title: Abstract
  contents:
  - "Abstract\n   The Session Peering Provisioning Framework (SPPF) specifies the\
    \ data\n   model and the overall structure to provision Session Establishment\n\
    \   Data (SED) into Session Data Registries and SIP Service Provider data\n  \
    \ stores.  To utilize this framework, one needs a substrate protocol.\n   Given\
    \ that the Simple Object Access Protocol (SOAP) is currently\n   widely used for\
    \ messaging between elements of such provisioning\n   systems, this document specifies\
    \ the usage of SOAP (via HTTPS) as the\n   substrate protocol for SPPF.  The benefits\
    \ include leveraging\n   prevalent expertise and a higher probability that existing\n\
    \   provisioning systems will be able to easily migrate to using an SPPF-\n  \
    \ based protocol.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 7841.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7878.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2016 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n   2.  Terminology . . . . . . . . . . . . . . . . . . . . .\
    \ . . . .   4\n   3.  SOAP Features and Protocol Layering . . . . . . . . . .\
    \ . . .   4\n   4.  HTTP(S) Features and SPPP over SOAP . . . . . . . . . . .\
    \ . .   7\n   5.  Authentication, Integrity, and Confidentiality  . . . . . .\
    \ .   7\n   6.  Language Identification . . . . . . . . . . . . . . . . . . .\
    \   7\n   7.  SPPP SOAP Data Structures . . . . . . . . . . . . . . . . . .  \
    \ 7\n     7.1.  Concrete Object Key Types . . . . . . . . . . . . . . . .   8\n\
    \       7.1.1.  Generic Object Key  . . . . . . . . . . . . . . . . .   8\n  \
    \     7.1.2.  Public Identifier Object Key  . . . . . . . . . . . .   9\n    \
    \   7.1.3.  SED Group Offer Key . . . . . . . . . . . . . . . . .  10\n     7.2.\
    \  Operation Request and Response Structures . . . . . . . .  10\n       7.2.1.\
    \  Add Operation Structure . . . . . . . . . . . . . . .  10\n       7.2.2.  Delete\
    \ Operation Structure  . . . . . . . . . . . . .  13\n       7.2.3.  Accept Operation\
    \ Structure  . . . . . . . . . . . . .  16\n       7.2.4.  Reject Operation Structure\
    \  . . . . . . . . . . . . .  19\n       7.2.5.  Batch Operation Structure . .\
    \ . . . . . . . . . . . .  22\n       7.2.6.  Get Operation Structure . . . .\
    \ . . . . . . . . . . .  25\n       7.2.7.  Get SED Group Offers Operation Structure\
    \  . . . . . .  26\n       7.2.8.  Generic Query Response  . . . . . . . . . .\
    \ . . . . .  28\n       7.2.9.  Get Server Details Operation Structure  . . .\
    \ . . . .  29\n     7.3.  Response Codes and Messages . . . . . . . . . . . .\
    \ . . .  30\n     7.4.  Minor Version Identifier  . . . . . . . . . . . . . .\
    \ . .  32\n   8.  Protocol Operations . . . . . . . . . . . . . . . . . . . .\
    \ .  32\n   9.  SPPP over SOAP WSDL Definition  . . . . . . . . . . . . . . .\
    \  32\n   10. SPPP over SOAP Examples . . . . . . . . . . . . . . . . . . .  44\n\
    \     10.1.  Add Destination Group  . . . . . . . . . . . . . . . . .  44\n  \
    \   10.2.  Add SED Records  . . . . . . . . . . . . . . . . . . . .  46\n    \
    \ 10.3.  Add SED Records -- URIType . . . . . . . . . . . . . . .  47\n     10.4.\
    \  Add SED Group  . . . . . . . . . . . . . . . . . . . . .  49\n     10.5.  Add\
    \ Public Identifier -- Successful COR Claim  . . . . .  50\n     10.6.  Add LRN\
    \  . . . . . . . . . . . . . . . . . . . . . . . .  52\n     10.7.  Add TN Range\
    \ . . . . . . . . . . . . . . . . . . . . . .  53\n     10.8.  Add TN Prefix \
    \ . . . . . . . . . . . . . . . . . . . . .  54\n     10.9.  Enable Peering --\
    \ SED Group Offer  . . . . . . . . . . .  56\n     10.10. Enable Peering -- SED\
    \ Group Offer Accept . . . . . . . .  58\n     10.11. Add Egress Route . . . .\
    \ . . . . . . . . . . . . . . . .  60\n     10.12. Remove Peering -- SED Group\
    \ Offer Reject . . . . . . . .  61\n     10.13. Get Destination Group  . . . .\
    \ . . . . . . . . . . . . .  62\n     10.14. Get Public Identifier  . . . . .\
    \ . . . . . . . . . . . .  64\n     10.15. Get SED Group Request  . . . . . .\
    \ . . . . . . . . . . .  66\n     10.16. Get SED Group Offers Request . . . .\
    \ . . . . . . . . . .  68\n     10.17. Get Egress Route . . . . . . . . . . .\
    \ . . . . . . . . .  70\n     10.18. Delete Destination Group . . . . . . . .\
    \ . . . . . . . .  72\n     10.19. Delete Public Identifier . . . . . . . . .\
    \ . . . . . . .  73\n     10.20. Delete SED Group Request . . . . . . . . . .\
    \ . . . . . .  74\n     10.21. Delete SED Group Offers Request  . . . . . . .\
    \ . . . . .  75\n     10.22. Delete Egress Route  . . . . . . . . . . . . . .\
    \ . . . .  76\n     10.23. Batch Request  . . . . . . . . . . . . . . . . . .\
    \ . . .  77\n   11. Security Considerations . . . . . . . . . . . . . . . . .\
    \ . .  80\n     11.1.  Vulnerabilities  . . . . . . . . . . . . . . . . . . .\
    \ .  80\n   12. IANA Considerations . . . . . . . . . . . . . . . . . . . . .\
    \  81\n   13. References  . . . . . . . . . . . . . . . . . . . . . . . . .  81\n\
    \     13.1.  Normative References . . . . . . . . . . . . . . . . . .  81\n  \
    \   13.2.  Informative References . . . . . . . . . . . . . . . . .  82\n   Acknowledgements\
    \  . . . . . . . . . . . . . . . . . . . . . . . .  82\n   Authors' Addresses\
    \  . . . . . . . . . . . . . . . . . . . . . . .  83\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   SPPF, defined in [RFC7877], is best supported by a transport\
    \ and\n   messaging infrastructure that is connection oriented, is request-\n\
    \   response oriented, is easily secured, supports propagation through\n   firewalls\
    \ in a standard fashion, and is easily integrated into back-\n   office systems.\
    \  This is due to the fact that the client side of SPPF\n   is likely to be integrated\
    \ with organizations' operational support\n   systems that facilitate transactional\
    \ provisioning of user addresses\n   and their associated SED.  The server side\
    \ of SPPF is likely to\n   reside in a separate organization's network, resulting\
    \ in the SPPF\n   provisioning transactions traversing the Internet as they are\n\
    \   propagated from the SPPF client to the SPPF server.  Given the\n   current\
    \ state of industry practice and technologies, SOAP and HTTP(S)\n   are well suited\
    \ for this type of environment.  This document\n   describes the specification\
    \ for transporting SPPF XML structures,\n   using SOAP and HTTP(S) as substrates.\n\
    \   The specification in this document for transporting SPPF XML\n   structures\
    \ over SOAP and HTTP(S) is primarily comprised of five\n   subjects: (1) a description\
    \ of any applicable SOAP features, (2) any\n   applicable HTTP features, (3) security\
    \ considerations, (4) (perhaps\n   most importantly) the Web Services Description\
    \ Language (WSDL)\n   definition for the SPP Protocol over SOAP, and (5) XML Schema\n\
    \   Definition (XSD) types that are \"substrate\" specific.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 3.  SOAP Features and Protocol Layering
  contents:
  - "3.  SOAP Features and Protocol Layering\n   The list of SOAP features that are\
    \ explicitly used and required for\n   SPPP over SOAP are limited.  Most SOAP\
    \ features are not necessary for\n   SPPF.  SPPP over SOAP primarily uses SOAP\
    \ simply as a standard\n   message-envelope technology.  The SOAP message envelope\
    \ is comprised\n   of the SOAP header and body.  As described in the SOAP specification\n\
    \   [SOAPREF], the SOAP header can contain optional, application-\n   specific,\
    \ information about the message.  The SOAP body contains the\n   SPPF message\
    \ itself, whose structure is defined by the combination of\n   one of the WSDL\
    \ operations defined in this document and the SPPF XML\n   data structures defined\
    \ in this document and the SPPF document.  SPPF\n   does not rely on any data\
    \ elements in the SOAP header.  All relevant\n   data elements are defined in\
    \ the SPPF XML Schema described in\n   [RFC7877] and the SPPF WSDL types specification\
    \ described in\n   Section 9 of this document.\n   WSDL is a widely standardized\
    \ and adopted technology for defining the\n   top-level structures of the messages\
    \ that are transported within the\n   body of a SOAP message.  The WSDL definition\
    \ for the SPPF SOAP\n   messages is defined later in this document, which imports\
    \ by\n   reference the XML data types contained in the SPPF schema.  The IANA\n\
    \   registry where the SPPF schema resides is described in \"The IETF XML\n  \
    \ Registry\" [RFC3688].\n   There are multiple structural styles that WSDL allows.\
    \  The best\n   practice for this type of application is what is sometimes referred\n\
    \   to as the \"document/literal wrapped style\".  This style is generally\n \
    \  regarded as an optimal approach that enhances maintainability,\n   comprehension,\
    \ portability, and, to a certain extent, performance.\n   It is characterized\
    \ by setting the soapAction binding style as\n   \"document\", the soapAction\
    \ encoding style as \"literal\", and then\n   defining the SOAP messages to simply\
    \ contain a single data element\n   that \"wraps\" a data structure containing\
    \ all the required input or\n   output data elements.  The figure below illustrates\
    \ this high-level\n   technical structure as conceptual layers 3 through 6.\n\
    \                                 +-------------+\n                          \
    \   (1) |  Transport  |Example:\n                                 |  Protocol\
    \   |  TCP, TLS, BEEP, etc.\n                                 +-------------+\n\
    \                                        |\n                                 \
    \       V\n                                 +-------------+\n                \
    \             (2) |   Message   |Example:\n                                 |\
    \   Envelope  | HTTP, SOAP, None, etc.\n                                 +-------------+\n\
    \                                        |\n                                 \
    \       V\n                                +--------------+\n                \
    \           +----|    SOAP      |---+\n                           |(3) |  Operation\
    \   |   |\n                  Contains |    +--------------+   | Contains\n   \
    \                        |        Example:       |\n                         \
    \  V      submitAddRqst    V\n                  +--------------+           +-------------+\n\
    \                  | SOAP Request |           |SOAP Response|\n       Example:\
    \   |   Message    |  (4)      |   Message   | Example:\n       spppAdd    | \
    \ (Operation  |           |  (Operation | spppAdd\n       RequestMsg |   Input)\
    \     |           |   Output)   | ResponseMsg\n                  +--------------+\
    \           +-------------+\n                           |                    \
    \   |\n                  Contains |                       | Contains\n       \
    \                    |                       |\n                           V \
    \                      V\n                  +--------------+          +---------------+\n\
    \       Example:   |   Wrapped    |  (5)     |    Wrapped    | Example:\n    \
    \   spppAdd    |Request Object|          |Response Object| spppAdd\n       Request\
    \    +--------------+          +---------------+ Response\n                  \
    \         |                       |\n                  Contains |            \
    \           | Contains\n                           |                       |\n\
    \                           V                       V\n                  +--------------+\
    \          +---------------+\n                  |    SPPF      |          |  \
    \   SPPF      |\n                  |  XML Types   |  (6)     |   XML Types   |\n\
    \                  +--------------+          +---------------+\n   Legend:\n \
    \  BEEP = Blocks Extensible Exchange Protocol\n   TLS = Transport Layer Security\n\
    \   Figure 1: Layering and Technical Structure of SPPP over SOAP Messages\n  \
    \ The operations supported by SPPP over SOAP are normatively defined\n   later\
    \ in this document.  Each SOAP operation defines a request/input\n   message and\
    \ a response/output message.  Each such request and\n   response message then\
    \ contains a single object that wraps the SPPF\n   XML data types that comprise\
    \ the inputs and the outputs,\n   respectively, of the SOAP operation.\n   SOAP\
    \ faults are not used by the SPPP over SOAP.  All success and\n   error responses\
    \ are specified in Section 7.3 of this document.\n   However, if a SOAP fault\
    \ were to occur, perhaps due to failures in\n   the SOAP message handling layer\
    \ of a SOAP library, the client\n   application should capture and handle the\
    \ fault.  Specifics on how to\n   handle such SOAP faults, if they should occur,\
    \ will be specific to\n   the chosen SOAP implementation.\n   Implementations\
    \ MUST use SOAP 1.2 [SOAPREF] or higher and MUST\n   support SOAP 1.2.  Implementations\
    \ SHOULD use WSDL 1.1 [WSDLREF] and\n   MUST NOT use earlier versions.  Use of\
    \ WSDL versions greater than 1.1\n   may introduce interoperability problems with\
    \ implementations that use\n   1.1.\n   SPPF is a request/reply framework that\
    \ allows a client application to\n   submit provisioning data and query requests\
    \ to a server.  The SPPF\n   data structures are designed to be protocol agnostic.\
    \  Concerns\n   regarding encryption, non-repudiation, and authentication are\
    \ beyond\n   the scope of this document.  For more details, please refer to\n\
    \   Section 4 (\"Transport Substrate Protocol Requirements\") of [RFC7877].\n\
    \   As illustrated in the previous diagram, SPPF can be viewed as a set\n   of\
    \ layers that collectively define the structure of an SPPF request\n   and response.\
    \  Layers 1 and 2 represent the transport, envelope, and\n   authentication technologies.\
    \  This document defines layers 3, 4, 5,\n   and 6 for SPPP over SOAP.\n   1.\
    \  Layer 1: The transport protocol layer represents the\n       communication\
    \ mechanism between the client and server.  SPPF can\n       be layered over any\
    \ substrate protocol that provides a set of\n       basic requirements defined\
    \ in Section 4 of [RFC7877].\n   2.  Layer 2: The message-envelope layer is optional\
    \ but can provide\n       features that are above the transport technology layer\
    \ but below\n       the application messaging layer.  Technologies such as HTTP\
    \ and\n       SOAP are examples of message-envelope technologies.\n   3.  Layers\
    \ 3, 4, 5, and 6: The operation and message layers provide\n       an envelope-independent\
    \ and substrate-independent wrapper for the\n       SPPF data model objects that\
    \ are being acted on (created,\n       modified, and queried).\n"
- title: 4.  HTTP(S) Features and SPPP over SOAP
  contents:
  - "4.  HTTP(S) Features and SPPP over SOAP\n   While SOAP is not tied to HTTP(S),\
    \ for reasons described in the\n   Introduction, HTTP(S) is a good choice as the\
    \ substrate protocol for\n   the SPP Protocol SOAP messages.  HTTP 1.1 includes\
    \ the \"persistent\n   connection\" feature, which allows multiple HTTP request/response\n\
    \   pairs to be transported across a single HTTP connection.  This is an\n   important\
    \ performance optimization feature, particularly when the\n   connection is an\
    \ HTTPS connection where the relatively time-consuming\n   TLS handshake has occurred.\n\
    \   Implementations compliant with this document MUST use HTTP 1.1\n   [RFC7230]\
    \ or higher.  Also, implementations SHOULD use persistent\n   connections.\n"
- title: 5.  Authentication, Integrity, and Confidentiality
  contents:
  - "5.  Authentication, Integrity, and Confidentiality\n   To accomplish authentication,\
    \ conforming SPPP over SOAP clients and\n   servers MUST use HTTP Digest Authentication\
    \ as defined in [RFC7235].\n   To achieve integrity and privacy, conforming SPPP\
    \ over SOAP clients\n   and servers MUST support TLS as defined in [RFC5246] as\
    \ the secure\n   transport mechanism.  Use of TLS MUST follow the recommendations\n\
    \   contained in [RFC7525]\n"
- title: 6.  Language Identification
  contents:
  - "6.  Language Identification\n   Section 9 of [RFC7877] requires protocols to\
    \ provide a mechanism to\n   transmit language tags together with human-readable\
    \ messages.  When\n   conforming SPPP SOAP servers use such tagging, the XML \"\
    lang\"\n   attribute ([W3C.REC-xml-20081126], Section 2.12) MUST be used.\n  \
    \ Clients MAY use the HTTP \"Accept-Language\" header field (see\n   Section 5.3.5\
    \ of [RFC7231]) in order to indicate their language\n   preference.\n"
- title: 7.  SPPP SOAP Data Structures
  contents:
  - "7.  SPPP SOAP Data Structures\n   SPPP over SOAP uses a set of XML-based data\
    \ structures for all the\n   supported operations and any parameters to which\
    \ those operations are\n   applied.  As also mentioned earlier in this document,\
    \ these XML\n   structures are envelope independent and substrate independent.\
    \  Refer\n   to \"Protocol Operations\" (Section 8) of this document for a\n \
    \  description of all the operations that MUST be supported.\n   The following\
    \ sections describe the definitions of all the XML data\n   structures.\n"
- title: 7.1.  Concrete Object Key Types
  contents:
  - "7.1.  Concrete Object Key Types\n   Certain operations in SPPF require an object\
    \ key that uniquely\n   identifies the object(s) on which a given operation needs\
    \ to be\n   performed.  SPPF defines the XML structure of any such object key\
    \ in\n   an abstract manner and delegates the concrete representation to any\n\
    \   conforming substrate protocol.  The following subsections define the\n   various\
    \ types of concrete object key types used in various operations\n   in SPPP over\
    \ SOAP.\n"
- title: 7.1.1.  Generic Object Key
  contents:
  - "7.1.1.  Generic Object Key\n   Most objects in SPPP over SOAP are uniquely identified\
    \ by the\n   attributes in the generic object key (Refer to \"Generic Object Key\n\
    \   Type\", Section 5.2.1 of [RFC7877], for details).  The concrete XML\n   representation\
    \ of ObjKeyType is as below:\n      <complexType name=\"ObjKeyType\">\n      \
    \ <complexContent>\n        <extension base=\"sppfb:ObjKeyType\">\n         <sequence>\n\
    \          <element name=\"rant\" type=\"sppfb:OrgIdType\"/>\n          <element\
    \ name=\"name\" type=\"sppfb:ObjNameType\"/>\n          <element name=\"type\"\
    \ type=\"sppfs:ObjKeyTypeEnum\"/>\n         </sequence>\n        </extension>\n\
    \       </complexContent>\n      </complexType>\n   The ObjKeyType has the data\
    \ elements as described below:\n   o  rant: The identifier of the Registrant organization\
    \ that owns the\n      object.\n   o  name: The character string that contains\
    \ the name of the object.\n   o  type: The enumeration value that represents the\
    \ type of SPPF\n      object.  For example, both a Destination Group and a SED\
    \ Group can\n      have the same name \"TestObj\" and be associated with the same\n\
    \      Registrant ID.  Hence, to uniquely identify the object that\n      represents\
    \ a Destination Group with the name \"TestObj\", the type\n      \"DestGrp\" must\
    \ be specified when using this concrete ObjKeyType\n      structure to identify\
    \ the Destination Group \"TestObj\".\n   The object types in SPPP over SOAP MUST\
    \ adhere to the above\n   definition of generic object key and are defined as\
    \ an enumeration in\n   the XML data structure as follows:\n    <simpleType name=\"\
    ObjKeyTypeEnum\">\n      <restriction base=\"token\">\n        <enumeration value=\"\
    SedGrp\"/>\n        <enumeration value=\"DestGrp\"/>\n        <enumeration value=\"\
    SedRec\"/>\n        <enumeration value=\"EgrRte\"/>\n      </restriction>\n  \
    \  </simpleType>\n"
- title: 7.1.2.  Public Identifier Object Key
  contents:
  - "7.1.2.  Public Identifier Object Key\n   Public Identifier type objects can further\
    \ be of various sub-types\n   like a Telephone Number (TN), Routing Number (RN),\
    \ TN Prefix, URI, or\n   TN Range and cannot be cleanly identified with the attributes\
    \ in the\n   generic ObjKeyType.  The definition of PubIdKeyType is as below:\n\
    \      <complexType name=\"PubIdKeyType\">\n       <complexContent>\n        <extension\
    \ base=\"sppfb:PubIdKeyType\">\n         <sequence>\n          <element name=\"\
    rant\" type=\"sppfb:OrgIdType\"/>\n          <choice>\n           <element name=\"\
    number\"\n           type=\"sppfb:NumberType\"/>\n           <element name=\"\
    range\"\n            type=\"sppfb:NumberRangeType\"/>\n           <element name=\"\
    uri\"\n            type=\"anyURI\"/>\n          </choice>\n         </sequence>\n\
    \        </extension>\n       </complexContent>\n      </complexType>\n   The\
    \ PubIdKeyType has data elements, as described below:\n   o  rant: The identifier\
    \ of the Registrant organization that owns the\n      object.\n   o  number: An\
    \ element of type NumberType (refer to Section 12 of\n      [RFC7877]) that contains\
    \ the value and type of a number.\n   o  range: An element of type NumberRangeType\
    \ (refer to Section 12 of\n      [RFC7877]) that contains a range of numbers.\n\
    \   o  uri: A value that represents a Public Identifier.\n   Any instance of PubIdKeyType\
    \ MUST contain exactly one element from\n   the following set of elements: \"\
    number\", \"range\", \"uri\".\n"
- title: 7.1.3.  SED Group Offer Key
  contents:
  - "7.1.3.  SED Group Offer Key\n   In addition to the attributes in the generic\
    \ ObjKeyType, a SED Group\n   Offer object is uniquely identified by the organization\
    \ ID of the\n   organization to whom a SED Group has been offered.  The definition\
    \ of\n   SedGrpOfferKeyType is as below:\n      <complexType name=\"SedGrpOfferKeyType\"\
    >\n       <complexContent>\n        <extension base=\"sppfb:SedGrpOfferKeyType\"\
    >\n         <sequence>\n          <element name=\"sedGrpKey\" type=\"sppfs:ObjKeyType\"\
    />\n          <element name=\"offeredTo\" type=\"sppfb:OrgIdType\"/>\n       \
    \  </sequence>\n        </extension>\n       </complexContent>\n      </complexType>\n\
    \   The SedGrpOfferKeyType has the data elements as described below:\n   o  sedGrpKey:\
    \ Identifies the SED Group that was offered.\n   o  offeredTo: The organization\
    \ ID of the organization that was\n      offered the SED Group object identified\
    \ by the sedGrpKey.\n"
- title: 7.2.  Operation Request and Response Structures
  contents:
  - "7.2.  Operation Request and Response Structures\n   An SPPF client interacts\
    \ with an SPPF server by sending one or more\n   requests to the server and by\
    \ receiving corresponding responses from\n   the server.  The basic set of operations\
    \ that an SPPF client can\n   submit to an SPPF server and the semantics of those\
    \ operations are\n   defined in \"Framework Operations\", Section 7 of [RFC7877].\
    \  The\n   following subsections describe the XML data structures that are used\n\
    \   for each of those types of operations for an SPPP over SOAP\n   implementation.\n"
- title: 7.2.1.  Add Operation Structure
  contents:
  - "7.2.1.  Add Operation Structure\n   In order to add (or modify) an object in\
    \ the Registry, an authorized\n   entity can send the spppAddRequest to the Registry.\n\
    \   An SPPP over SOAP Add request is wrapped within the <spppAddRequest>\n   element\
    \ while an SPPP over SOAP Add response is wrapped within an\n   <spppAddResponse>\
    \ element.  The following sub-sections describe the\n   <spppAddRequest> and <spppAddResponse>\
    \ elements.  Refer to Section 10\n   for an example of an Add operation on each\
    \ type of SPPF object.\n"
- title: 7.2.1.1.  Add Request
  contents:
  - "7.2.1.1.  Add Request\n   An SPPP over SOAP Add request definition is contained\
    \ within the\n   generic <spppAddRequest> element.\n      <element name=\"spppAddRequest\"\
    >\n       <complexType>\n        <sequence>\n         <element name=\"clientTransId\"\
    \n          type=\"sppfb:TransIdType\" minOccurs=\"0\"/>\n         <element name=\"\
    minorVer\"\n          type=\"sppfb:MinorVerType\" minOccurs=\"0\"/>\n        \
    \ <element name=\"obj\" type=\"sppfb:BasicObjType\"\n         maxOccurs=\"unbounded\"\
    />\n        </sequence>\n       </complexType>\n      </element>\n   The data\
    \ elements within the <spppAddRequest> element are described\n   as follows:\n\
    \   o  clientTransId: Zero or one client-generated transaction ID that,\n    \
    \  within the context of the SPPF client, identifies this request.\n      This\
    \ value can be used at the discretion of the SPPF client to\n      track, log,\
    \ or correlate requests and their responses.  The SPPF\n      server MUST echo\
    \ back this value to the client in the\n      corresponding response to the incoming\
    \ request.  The SPPF server\n      will not check this value for uniqueness.\n\
    \   o  minorVer: Zero or one minor version identifier, as defined in\n      Section\
    \ 7.4.\n   o  obj: One or more elements of abstract type BasicObjType (defined\n\
    \      in [RFC7877]).  Each element contains all the attributes of an\n      SPPF\
    \ object that the client is requesting the SPPF server to add.\n      Refer to\
    \ Section 3.1 of [RFC7877] for the XML structure of all\n      concrete types,\
    \ for various SPPF objects, that extend from\n      abstract BasicObjType and\
    \ hence are eligible to be passed into\n      this element.  The elements are\
    \ processed by the SPPF server in\n      the order in which they are included\
    \ in the request.  With respect\n      to the handling of error conditions, conforming\
    \ SPPP SOAP servers\n      MUST stop processing BasicObjType elements in the request\
    \ at the\n      first error and roll back any BasicObjType elements that had\n\
    \      already been processed for that add request (\"stop and roll\n      back\"\
    ).\n"
- title: 7.2.1.2.  Add Response
  contents:
  - "7.2.1.2.  Add Response\n   An SPPP over SOAP add response object is contained\
    \ within the generic\n   <spppAddResponse> element.  This response structure is\
    \ used for all\n   types of SPPF objects that are provisioned by the SPPF client.\n\
    \     <element name=\"spppAddResponse\">\n       <complexType>\n         <sequence>\n\
    \           <element name=\"clientTransId\" type=\"sppfb:TransIdType\"\n     \
    \       minOccurs=\"0\"/>\n           <element name=\"serverTransId\" type=\"\
    sppfb:TransIdType\"/>\n           <element name=\"overallResult\" type=\"sppfs:ResultCodeType\"\
    />\n           <element name=\"detailResult\" type=\"sppfs:ObjResultCodeType\"\
    \n           minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n         </sequence>\n\
    \       </complexType>\n     </element>\n     <complexType name=\"ResultCodeType\"\
    >\n       <sequence>\n          <element name=\"code\" type=\"int\"/>\n      \
    \    <element name=\"msg\" type=\"string\"/>\n       </sequence>\n     </complexType>\n\
    \      <complexType name=\"ObjResultCodeType\">\n       <complexContent>\n   \
    \     <extension base=\"sppfs:ResultCodeType\">\n         <sequence>\n       \
    \   <element name=\"obj\" type=\"sppfb:BasicObjType\"/>\n         </sequence>\n\
    \        </extension>\n       </complexContent>\n      </complexType>\n   An <spppAddResponse>\
    \ contains the elements necessary for the SPPF\n   client to precisely determine\
    \ the overall result of the request, and\n   if an error occurs, it provides information\
    \ about the specific\n   object(s) that caused the error.\n   The data elements\
    \ within the SPPP over SOAP Add response are\n   described as follows:\n   o \
    \ clientTransId: Zero or one client transaction ID.  This value is\n      simply\
    \ an echo of the client transaction ID that the SPPF client\n      passed into\
    \ the SPPF update request.  When included in the\n      request, the SPPF server\
    \ MUST return it in the corresponding\n      response message.\n   o  serverTransId:\
    \ Exactly one server transaction ID that identifies\n      this request for tracking\
    \ purposes.  This value MUST be unique for\n      a given SPPF server.\n   o \
    \ overallResult: Exactly one response code and message pair that\n      explicitly\
    \ identifies the result of the request.  See Section 7.3\n      for further details.\n\
    \   o  detailResult: An optional response code, response message, and\n      BasicObjType\
    \ (as defined in [RFC7877]) triplet.  This element will\n      be present only\
    \ if an object-level error has occurred.  It\n      indicates the error condition\
    \ and the exact request object that\n      contributed to the error.  The response\
    \ code will reflect the\n      exact error.  See Section 7.3 for further details.\n"
- title: 7.2.2.  Delete Operation Structure
  contents:
  - "7.2.2.  Delete Operation Structure\n   In order to remove an object from the\
    \ Registry, an authorized entity\n   can send the spppDelRequest into the Registry.\
    \  An SPPP over SOAP\n   Delete request is wrapped within the <spppDelRequest>\
    \ element while\n   an SPPP over SOAP Delete response is wrapped within the generic\n\
    \   <spppDelResponse> element.  The following subsections describe the\n   <spppDelRequest>\
    \ and <spppDelResponse> elements.  Refer to Section 10\n   for an example of the\
    \ Delete operation on each type of SPPF object.\n"
- title: 7.2.2.1.  Delete Request
  contents:
  - "7.2.2.1.  Delete Request\n   An SPPP over SOAP Delete request definition is contained\
    \ within the\n   generic <spppDelRequest> element.\n      <element name=\"spppDelRequest\"\
    >\n       <complexType>\n        <sequence>\n         <element name=\"clientTransId\"\
    \n         type=\"sppfb:TransIdType\" minOccurs=\"0\"/>\n         <element name=\"\
    minorVer\"\n         type=\"sppfb:MinorVerType\" minOccurs=\"0\"/>\n        <element\
    \ name=\"objKey\" type=\"sppfb:ObjKeyType\"\n         maxOccurs=\"unbounded\"\
    />\n        </sequence>\n       </complexType>\n      </element>\n   The data\
    \ elements within the <spppDelRequest> element are described\n   as follows:\n\
    \   o  clientTransId: Zero or one client-generated transaction ID that,\n    \
    \  within the context of the SPPF client, identifies this request.\n      This\
    \ value can be used at the discretion of the SPPF client to\n      track, log,\
    \ or correlate requests and their responses.  The SPPF\n      server MUST echo\
    \ back this value to the client in the\n      corresponding response to the incoming\
    \ request.  SPPF server will\n      not check this value for uniqueness.\n   o\
    \  minorVer: Zero or one minor version identifier, as defined in\n      Section\
    \ 7.4.\n   o  objKey: One or more elements of abstract type ObjKeyType (as\n \
    \     defined in [RFC7877]).  Each element contains attributes that\n      uniquely\
    \ identify the object that the client is requesting the\n      server to delete.\
    \  Refer to Section 7.1 for a description of all\n      concrete object key types,\
    \ for various SPPF objects, which are\n      eligible to be passed into this element.\
    \  The elements are\n      processed by the SPPF server in the order in which\
    \ they are\n      included in the request.  With respect to the handling of error\n\
    \      conditions, conforming SPPP SOAP servers MUST stop processing\n      ObjKeyType\
    \ elements in the request at the first error and roll\n      back any ObjKeyType\
    \ elements that had already been processed for\n      that Delete request (\"\
    stop and roll back\").\n"
- title: 7.2.2.2.  Delete Response
  contents:
  - "7.2.2.2.  Delete Response\n   An SPPP over SOAP delete response object is contained\
    \ within the\n   generic <sppDeleteResponse> element.  This response structure\
    \ is used\n   for a Delete request on all types of SPPF objects that are\n   provisioned\
    \ by the SPPF client.\n   <element name=\"spppDelResponse\">\n    <complexType>\n\
    \     <sequence>\n      <element name=\"clientTransId\" type=\"sppfb:TransIdType\"\
    \n               minOccurs=\"0\"/>\n      <element name=\"serverTransId\" type=\"\
    sppfb:TransIdType\"/>\n      <element name=\"overallResult\" type=\"sppfs:ResultCodeType\"\
    />\n      <element name=\"detailResult\" type=\"sppfs:ObjKeyResultCodeType\"\n\
    \               minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n     </sequence>\n\
    \    </complexType>\n   </element>\n   <complexType name=\"ResultCodeType\">\n\
    \    <sequence>\n     <element name=\"code\" type=\"int\"/>\n     <element name=\"\
    msg\" type=\"string\"/>\n    </sequence>\n   </complexType>\n   <complexType name=\"\
    ObjKeyResultCodeType\">\n    <complexContent>\n     <extension base=\"sppfs:ResultCodeType\"\
    >\n      <sequence>\n       <element name=\"objKey\" type=\"sppfb:ObjKeyType\"\
    />\n      </sequence>\n     </extension>\n    </complexContent>\n   </complexType>\n\
    \   An <spppDelResponse> contains the elements necessary for the SPPF\n   client\
    \ to precisely determine the overall result of the request, and\n   if an error\
    \ occurs, it provides information about the specific object\n   key(s) that caused\
    \ the error.\n   The data elements within the SPPP over SOAP Delete response are\n\
    \   described as follows:\n   o  clientTransId: Zero or one client transaction\
    \ ID.  This value is\n      simply an echo of the client transaction ID that the\
    \ SPPF client\n      passed into the SPPF update request.  When included in the\n\
    \      request, the SPPF server MUST return it in the corresponding\n      response\
    \ message.\n   o  serverTransId: Exactly one server transaction ID that identifies\n\
    \      this request for tracking purposes.  This value MUST be unique for\n  \
    \    a given SPPF server.\n   o  overallResult: Exactly one response code and\
    \ message pair that\n      explicitly identifies the result of the request.  See\
    \ Section 7.3\n      for further details.\n   o  detailResult: An optional response\
    \ code, response message, and\n      ObjKeyType (as defined in [RFC7877]) triplet.\
    \  This element will\n      be present only if a specific object key level error\
    \ has occurred.\n      It indicates the error condition and the exact request\
    \ object key\n      that contributed to the error.  The response code will reflect\
    \ the\n      exact error.  See Section 7.3 for further details.\n"
- title: 7.2.3.  Accept Operation Structure
  contents:
  - "7.2.3.  Accept Operation Structure\n   In SPPF, a SED Group Offer can be accepted\
    \ or rejected by, or on\n   behalf of, the Registrant to whom the SED Group has\
    \ been offered\n   (refer to Section 3.1 of [RFC7877] for a description of the\
    \ SED Group\n   Offer object).  The Accept operation is used to accept such SED\
    \ Group\n   Offers by, or on behalf of, the Registrant.  The request structure\n\
    \   for an SPPP over SOAP Accept operation is wrapped within the\n   <spppAcceptRequest>\
    \ element while an SPPP over SOAP Accept response\n   is wrapped within the generic\
    \ <spppAcceptResponse> element.  The\n   following subsections describe the <spppAcceptRequest>\
    \ and\n   <spppAcceptResponse> elements.  Refer to Section 10 for an example of\n\
    \   the Accept operation on a SED Group Offer.\n"
- title: 7.2.3.1.  Accept Request Structure
  contents:
  - "7.2.3.1.  Accept Request Structure\n   An SPPP over SOAP Accept request definition\
    \ is contained within the\n   generic <sppAcceptRequest> element.\n      <element\
    \ name=\"spppAcceptRequest\">\n       <complexType>\n        <sequence>\n    \
    \     <element name=\"clientTransId\"\n         type=\"sppfb:TransIdType\" minOccurs=\"\
    0\"/>\n         <element name=\"minorVer\"\n         type=\"sppfb:MinorVerType\"\
    \ minOccurs=\"0\"/>\n         <element name=\"sedGrpOfferKey\"\n         type=\"\
    sppfs:SedGrpOfferKeyType\"\n         maxOccurs=\"unbounded\"/>\n        </sequence>\n\
    \       </complexType>\n      </element>\n   The data elements within the <spppAcceptRequest>\
    \ element are\n   described as follows:\n   o  clientTransId: Zero or one client-generated\
    \ transaction ID that,\n      within the context of the SPPF client, identifies\
    \ this request.\n      This value can be used at the discretion of the SPPF client\
    \ to\n      track, log, or correlate requests and their responses.  The SPPF\n\
    \      server MUST echo back this value to the client in the\n      corresponding\
    \ response to the incoming request.  The SPPF server\n      will not check this\
    \ value for uniqueness.\n   o  minorVer: Zero or one minor version identifier,\
    \ as defined in\n      Section 7.4.\n   o  sedGrpOfferKey: One or more elements\
    \ of type SedGrpOfferKeyType\n      (as defined in this document).  Each element\
    \ contains attributes\n      that uniquely identify a SED Group Offer that the\
    \ client is\n      requesting the server to accept.  The elements are processed\
    \ by\n      the SPPF server in the order in which they are included in the\n \
    \     request.  With respect to the handling of error conditions,\n      conforming\
    \ SPPP SOAP servers MUST stop processing\n      SedGrpOfferKeyType elements in\
    \ the request at the first error and\n      roll back any SedGrpOfferKeyType elements\
    \ that had already been\n      processed for that Accept request (\"stop and roll\
    \ back\").\n"
- title: 7.2.3.2.  Accept Response
  contents:
  - "7.2.3.2.  Accept Response\n   An SPPP over SOAP accept response structure is\
    \ contained within the\n   generic <sppAcceptResponse> element.  This response\
    \ structure is used\n   for an Accept request on a SED Group Offer.\n   <element\
    \ name=\"spppAcceptResponse\">\n    <complexType>\n     <sequence>\n      <element\
    \ name=\"clientTransId\" type=\"sppfb:TransIdType\"\n               minOccurs=\"\
    0\"/>\n      <element name=\"serverTransId\" type=\"sppfb:TransIdType\"/>\n  \
    \    <element name=\"overallResult\" type=\"sppfs:ResultCodeType\"/>\n      <element\
    \ name=\"detailResult\"\n               type=\"sppfs:SedGrpOfferKeyResultCodeType\"\
    \n               minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n     </sequence>\n\
    \    </complexType>\n   </element>\n   <complexType name=\"ResultCodeType\">\n\
    \    <sequence>\n     <element name=\"code\" type=\"int\"/>\n     <element name=\"\
    msg\" type=\"string\"/>\n    </sequence>\n   </complexType>\n   <complexType name=\"\
    SedGrpOfferKeyResultCodeType\">\n    <complexContent>\n     <extension base=\"\
    sppfs:ResultCodeType\">\n      <sequence>\n       <element name=\"sedGrpOfferKey\"\
    \ type=\"sppfs:SedGrpOfferKeyType\"/>\n      </sequence>\n     </extension>\n\
    \    </complexContent>\n   </complexType>\n   An <spppAcceptResponse> contains\
    \ the elements necessary for the SPPF\n   client to precisely determine the overall\
    \ result of the request, and\n   if an error occurs, it provides information about\
    \ the specific SED\n   Group Offer key(s) that caused the error.\n   The data\
    \ elements within the SPPP over SOAP Accept response are\n   described as follows:\n\
    \   o  clientTransId: Zero or one client transaction ID.  This value is\n    \
    \  simply an echo of the client transaction ID that the SPPF client\n      passed\
    \ into the SPPF update request.  When included in the\n      request, the SPPF\
    \ server MUST return it in the corresponding\n      response message.\n   o  serverTransId:\
    \ Exactly one server transaction ID that identifies\n      this request for tracking\
    \ purposes.  This value MUST be unique for\n      a given SPPF server.\n   o \
    \ overallResult: Exactly one response code and message pair that\n      explicitly\
    \ identifies the result of the request.  See Section 7.3\n      for further details.\n\
    \   o  detailResult: An optional response code, response message, and\n      SedGrpOfferKeyType\
    \ (as defined in this document) triplet.  This\n      element will be present\
    \ only if any specific SED Group Offer key\n      level error has occurred.  It\
    \ indicates the error condition and\n      the exact request SED Group Offer key\
    \ that contributed to the\n      error.  The response code will reflect the exact\
    \ error.  See\n      Section 7.3 for further details.\n"
- title: 7.2.4.  Reject Operation Structure
  contents:
  - "7.2.4.  Reject Operation Structure\n   In SPPF, a SED Group Offer can be accepted\
    \ or rejected by, or on\n   behalf of, the Registrant to whom the SED Group has\
    \ been offered\n   (refer to \"Framework Data Model Objects\", Section 6 of [RFC7877]\
    \ for\n   a description of the SED Group Offer object).  The Reject operation\n\
    \   is used to reject such SED Group Offers by, or on behalf of, the\n   Registrant.\
    \  The request structure for an SPPP over SOAP Reject\n   operation is wrapped\
    \ within the <spppRejectRequest> element while an\n   SPPP over SOAP Reject response\
    \ is wrapped within the generic\n   <spppRejecResponse> element.  The following\
    \ subsections describe the\n   <spppRejectRequest> and <spppRejecResponse> elements.\
    \  Refer to\n   Section 10 for an example of the Reject operation on a SED Group\n\
    \   Offer.\n"
- title: 7.2.4.1.  Reject Request
  contents:
  - "7.2.4.1.  Reject Request\n   An SPPP over SOAP Reject request definition is contained\
    \ within the\n   generic <spppRejectRequest> element.\n      <element name=\"\
    spppRejectRequest\">\n       <complexType>\n        <sequence>\n         <element\
    \ name=\"clientTransId\"\n         type=\"sppfb:TransIdType\" minOccurs=\"0\"\
    />\n         <element name=\"minorVer\"\n         type=\"sppfb:MinorVerType\"\
    \ minOccurs=\"0\"/>\n         <element name=\"sedGrpOfferKey\"\n         type=\"\
    sppfs:SedGrpOfferKeyType\"\n         maxOccurs=\"unbounded\"/>\n        </sequence>\n\
    \       </complexType>\n      </element>\n   The data elements within the <spppRejectRequest>\
    \ element are\n   described as follows:\n   o  clientTransId: Zero or one client-generated\
    \ transaction ID that,\n      within the context of the SPPF client, identifies\
    \ this request.\n      This value can be used at the discretion of the SPPF client\
    \ to\n      track, log, or correlate requests and their responses.  The SPPF\n\
    \      server MUST echo back this value to the client in the\n      corresponding\
    \ response to the incoming request.  The SPPF server\n      will not check this\
    \ value for uniqueness.\n   o  minorVer: Zero or one minor version identifier,\
    \ as defined in\n      Section 7.4.\n   o  sedGrpOfferKey: One or more elements\
    \ of type SedGrpOfferKeyType\n      (as defined in this document).  Each element\
    \ contains attributes\n      that uniquely identify a SED Group Offer that the\
    \ client is\n      requesting the server to reject.  The elements are processed\
    \ by\n      the SPPF server in the order in which they are included in the\n \
    \     request.  With respect to the handling of error conditions,\n      conforming\
    \ SPPF servers MUST stop processing SedGrpOfferKeyType\n      elements in the\
    \ request at the first error and roll back any\n      SedGrpOfferKeyType elements\
    \ that had already been processed for\n      that Reject request (\"stop and roll\
    \ back\").\n"
- title: 7.2.4.2.  Reject Response
  contents:
  - "7.2.4.2.  Reject Response\n   An SPPP over SOAP reject response structure is\
    \ contained within the\n   generic <sppRejectResponse> element.  This response\
    \ structure is used\n   for a Reject request on a SED Group Offer.\n   <element\
    \ name=\"spppRejectResponse\">\n    <complexType>\n     <sequence>\n      <element\
    \ name=\"clientTransId\" type=\"sppfb:TransIdType\"\n               minOccurs=\"\
    0\"/>\n      <element name=\"serverTransId\" type=\"sppfb:TransIdType\"/>\n  \
    \    <element name=\"overallResult\" type=\"sppfs:ResultCodeType\"/>\n      <element\
    \ name=\"detailResult\"\n               type=\"sppfs:SedGrpOfferKeyResultCodeType\"\
    \n               minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n     </sequence>\n\
    \    </complexType>\n   </element>\n   <complexType name=\"ResultCodeType\">\n\
    \    <sequence>\n     <element name=\"code\" type=\"int\"/>\n     <element name=\"\
    msg\" type=\"string\"/>\n    </sequence>\n   </complexType>\n   <complexType name=\"\
    SedGrpOfferKeyResultCodeType\">\n    <complexContent>\n     <extension base=\"\
    sppfs:ResultCodeType\">\n      <sequence>\n       <element name=\"sedGrpOfferKey\"\
    \ type=\"sppfs:SedGrpOfferKeyType\"/>\n      </sequence>\n     </extension>\n\
    \    </complexContent>\n   </complexType>\n   An <spppRejectResponse> contains\
    \ the elements necessary for the SPPF\n   client to precisely determine the overall\
    \ result of the request, and\n   if an error occurs, it provides information about\
    \ the specific SED\n   Group Offer key(s) that caused the error.\n   The data\
    \ elements within the SPPP over SOAP Reject response are\n   described as follows:\n\
    \   o  clientTransId: Zero or one client transaction ID.  This value is\n    \
    \  simply an echo of the client transaction ID that the SPPF client\n      passed\
    \ into the SPPF update request.  When included in the\n      request, the SPPF\
    \ server MUST return it in the corresponding\n      response message.\n   o  serverTransId:\
    \ Exactly one server transaction ID that identifies\n      this request for tracking\
    \ purposes.  This value MUST be unique for\n      a given SPPF server.\n   o \
    \ overallResult: Exactly one response code and message pair that\n      explicitly\
    \ identifies the result of the request.  See Section 7.3\n      for further details.\n\
    \   o  detailResult: An optional response code, response message, and\n      SedGrpOfferKeyType\
    \ (as defined in this document) triplet.  This\n      element will be present\
    \ only if any specific SED Group Offer key\n      level error has occurred.  It\
    \ indicates the error condition and\n      the exact request SED Group Offer key\
    \ that contributed to the\n      error.  The response code will reflect the exact\
    \ error.  See\n      Section 7.3 for further details.\n"
- title: 7.2.5.  Batch Operation Structure
  contents:
  - "7.2.5.  Batch Operation Structure\n   An SPPP over SOAP Batch request XML structure\
    \ allows the SPPF client\n   to send any of the Add, Del, Accept, or Reject operations\
    \ together in\n   one single request.  This gives an SPPF client the flexibility\
    \ to use\n   one single request structure to perform more than operations (verbs).\n\
    \   The batch request structure is wrapped within the <spppBatchRequest>\n   element\
    \ while an SPPF Batch response is wrapped within the\n   <spppBatchResponse> element.\
    \  The following subsections describe the\n   <spppBatchRequest> and <spppBatchResponse>\
    \ elements.  Refer to\n   Section 10 for an example of a Batch operation.\n"
- title: 7.2.5.1.  Batch Request Structure
  contents:
  - "7.2.5.1.  Batch Request Structure\n   An SPPP over SOAP Batch request definition\
    \ is contained within the\n   generic <spppBatchRequest> element.\n       <element\
    \ name=\"spppBatchRequest\">\n       <complexType>\n        <sequence>\n     \
    \    <element name=\"clientTransId\"\n         type=\"sppfb:TransIdType\" minOccurs=\"\
    0\"/>\n         <element name=\"minorVer\"\n         type=\"sppfb:MinorVerType\"\
    \ minOccurs=\"0\"/>\n          <choice minOccurs=\"1\" maxOccurs=\"unbounded\"\
    >\n           <element name=\"addObj\" type=\"sppfb:BasicObjType\"/>\n       \
    \    <element name=\"delObj\" type=\"sppfb:ObjKeyType\"/>\n           <element\
    \ name=\"acceptSedGrpOffer\"\n           type=\"sppfs:SedGrpOfferKeyType\"/>\n\
    \           <element name=\"rejectSedGrpOffer\"\n           type=\"sppfs:SedGrpOfferKeyType\"\
    />\n          </choice>\n        </sequence>\n       </complexType>\n      </element>\n\
    \   The data elements within the <sppBatchRequest> element are described\n   as\
    \ follows:\n   o  clientTransId: Zero or one client-generated transaction ID that,\n\
    \      within the context of the SPPF client, identifies this request.\n     \
    \ This value can be used at the discretion of the SPPF client to\n      track,\
    \ log, or correlate requests and their responses.  The SPPF\n      server MUST\
    \ echo back this value to the client in the\n      corresponding response to the\
    \ incoming request.  The SPPF server\n      will not check this value for uniqueness.\n\
    \   o  minorVer: Zero or one minor version identifier, as defined in\n      Section\
    \ 7.4.\n   o  addObj: One or more elements of abstract type BasicObjType where\n\
    \      each element identifies an object that needs to be added.\n   o  delObj:\
    \ One or more elements of abstract type ObjKeyType where\n      each element identifies\
    \ a key for the object that needs to be\n      deleted .\n   o  acceptSedGrpOffer:\
    \ One or more elements of type SedGrpOfferKeyType\n      where each element identifies\
    \ a SED Group Offer that needs to be\n      accepted.\n   o  rejectSedGrpOffer:\
    \ One or more elements of type SedGrpOfferKeyType\n      where each element identifies\
    \ a SED Group Offer that needs to be\n      rejected.\n   With respect to the\
    \ handling of error conditions, conforming SPPP\n   SOAP servers MUST stop processing\
    \ elements in the request at the\n   first error and roll back any elements that\
    \ had already been\n   processed for that Batch request (\"stop and roll back\"\
    ).\n"
- title: 7.2.5.2.  Batch Response
  contents:
  - "7.2.5.2.  Batch Response\n   An SPPP over SOAP batch response structure is contained\
    \ within the\n   generic <sppBatchResponse> element.  This response structure\
    \ is used\n   for a Batch request that contains many different types of SPPF\n\
    \   operations.\n     <element name=\"spppBatchResponse\">\n       <complexType>\n\
    \         <sequence>\n           <element name=\"clientTransId\" type=\"sppfb:TransIdType\"\
    \n            minOccurs=\"0\"/>\n           <element name=\"serverTransId\" type=\"\
    sppfb:TransIdType\"/>\n           <element name=\"overallResult\" type=\"sppfs:ResultCodeType\"\
    />\n           <choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n            \
    \  <element name=\"addResult\"\n              type=\"sppfs:ObjResultCodeType\"\
    />\n              <element name=\"delResult\"\n              type=\"sppfs:ObjKeyResultCodeType\"\
    />\n              <element name=\"acceptResult\"\n              type=\"sppfs:SedGrpOfferKeyResultCodeType\"\
    />\n              <element name=\"rejectResult\"\n              type=\"sppfs:SedGrpOfferKeyResultCodeType\"\
    />\n            </choice>\n         </sequence>\n       </complexType>\n     </element>\n\
    \   An <spppBatchResponse> contains the elements necessary for an SPPF\n   client\
    \ to precisely determine the overall result of various\n   operations in the request,\
    \ and if an error occurs, it provides\n   information about the specific objects\
    \ or keys in the request that\n   caused the error.\n   The data elements within\
    \ the SPPP over SOAP Batch response are\n   described as follows:\n   o  clientTransId:\
    \ Zero or one client transaction ID.  This value is\n      simply an echo of the\
    \ client transaction ID that the SPPF client\n      passed into the SPPF update\
    \ request.  When included in the\n      request, the SPPF server MUST return it\
    \ in the corresponding\n      response message.\n   o  serverTransId: Exactly\
    \ one server transaction ID that identifies\n      this request for tracking purposes.\
    \  This value MUST be unique for\n      a given SPPF server.\n   o  overallResult:\
    \ Exactly one response code and message pair that\n      explicitly identifies\
    \ the result of the request.  See Section 7.3\n      for further details.\n  \
    \ o  addResult: One or more elements of type ObjResultCodeType where\n      each\
    \ element identifies the result code, result message, and the\n      specific\
    \ object to which the result relates.\n   o  delResult: One or more elements of\
    \ type ObjKeyResultCodeType where\n      each element identifies the result code,\
    \ result message, and the\n      specific object key to which the result relates.\n\
    \   o  acceptResult: One or more elements of type\n      SedGrpOfferKeyResultCodeType\
    \ where each element identifies the\n      result code, result message, and the\
    \ specific SED Group Offer key\n      to which the result relates.\n   o  rejectResult:\
    \ One or more elements of type\n      SedGrpOfferKeyResultCodeType where each\
    \ element identifies the\n      result code, result message, and the specific\
    \ SED Group Offer key\n      to which the result relates.\n"
- title: 7.2.6.  Get Operation Structure
  contents:
  - "7.2.6.  Get Operation Structure\n   In order to query the details of an object\
    \ from the Registry, an\n   authorized entity can send the spppGetRequest to the\
    \ Registry with a\n   GetRqstType XML data structure containing one or more object\
    \ keys\n   that uniquely identify the object whose details are being queried.\n\
    \   The following subsections describe the <spppGetRequest> and\n   <spppGetResponse>\
    \ elements.  Refer to Section 10 for an example of\n   the SPPP over SOAP Get\
    \ operation on each type of SPPF object.\n"
- title: 7.2.6.1.  Get Request
  contents:
  - "7.2.6.1.  Get Request\n   The request structure for an SPPP over SOAP Get operation\
    \ is\n   contained within the generic <spppGetRequest> element:\n      <element\
    \ name=\"spppGetRequest\">\n       <complexType>\n        <sequence>\n       \
    \  <element name=\"minorVer\"\n         type=\"sppfb:MinorVerType\" minOccurs=\"\
    0\"/>\n         <element name=\"objKey\"\n         type=\"sppfb:ObjKeyType\"\n\
    \         maxOccurs=\"unbounded\"/>\n        </sequence>\n       </complexType>\n\
    \      </element>\n   The data elements within the <spppGetRequest> element are\
    \ described\n   as follows:\n   o  minorVer: Zero or one minor version identifier,\
    \ as defined in\n      Section 7.4.\n   o  objKey: One or more elements of abstract\
    \ type ObjKeyType (as\n      defined in [RFC7877]).  Each element contains attributes\
    \ that\n      uniquely identify the object that the client is requesting the\n\
    \      server to query.  Refer to Section 7.1 of this document for a\n      description\
    \ of all concrete object key types, for various SPPF\n      objects, which are\
    \ eligible to be passed into this element.\n"
- title: 7.2.6.2.  Get Response
  contents:
  - "7.2.6.2.  Get Response\n   The SPPP over SOAP Get response is wrapped within\
    \ the generic\n   <spppGetResponse> element, as described in Section 7.2.8.\n"
- title: 7.2.7.  Get SED Group Offers Operation Structure
  contents:
  - "7.2.7.  Get SED Group Offers Operation Structure\n   In addition to the ability\
    \ to query the details of one or more SED\n   Group Offers using a SED Group Offer\
    \ key in the spppGetRequest, this\n   operation also provides an additional, more\
    \ flexible, structure to\n   query for SED Group Offer objects.  This additional\
    \ structure is\n   contained within the <getSedGrpOffersRequest> element while\
    \ the\n   response is wrapped within the generic <spppGetResponse> element.\n\
    \   The following subsections describe the <getSedGrpOffersRequest> and\n   <spppGetResponse>\
    \ elements.\n"
- title: 7.2.7.1.  Get SED Group Offers Request
  contents:
  - "7.2.7.1.  Get SED Group Offers Request\n   Using the details passed into this\
    \ structure, the server will attempt\n   to find SED Group Offer objects that\
    \ satisfy all the criteria passed\n   into the request.  If no criteria are passed\
    \ in, then the SPPF server\n   will return the list of SED Group Offer objects\
    \ that belong to the\n   Registrant.  If there are no matching SED Group Offers\
    \ found, then an\n   empty result set will be returned.\n       <element name=\"\
    getSedGrpOffersRequest\">\n       <complexType>\n        <sequence>\n        \
    \ <element name=\"minorVer\" type=\"sppfb:MinorVerType\"\n         minOccurs=\"\
    0\"/>\n        <element name=\"offeredBy\" type=\"sppfb:OrgIdType\"\n        minOccurs=\"\
    0\" maxOccurs=\"unbounded\"/>\n        <element name=\"offeredTo\" type=\"sppfb:OrgIdType\"\
    \n        minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n        <element name=\"\
    status\" type=\"sppfb:SedGrpOfferStatusType\"\n         minOccurs=\"0\"/>\n  \
    \      <element name=\"sedGrpOfferKey\" type=\"sppfs:SedGrpOfferKeyType\"\n  \
    \      minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n        </sequence>\n      \
    \ </complexType>\n      </element>\n   The data elements within the <getSedGrpOffersRequest>\
    \ element are\n   described as follows:\n   o  minorVer: Zero or one minor version\
    \ identifier, as defined in\n      Section 7.4.\n   o  offeredBy: Zero or more\
    \ organization IDs.  Only offers that are\n      offered to the organization IDs\
    \ in this list should be included in\n      the result set.  The result set is\
    \ also subject to other query\n      criteria in the request.\n   o  offeredTo:\
    \ Zero or more organization IDs.  Only offers that are\n      offered by the organization\
    \ IDs in this list should be included in\n      the result set.  The result set\
    \ is also subject to other query\n      criteria in the request.\n   o  status:\
    \ The status of the offer, offered or accepted.  Only offers\n      in the specified\
    \ status should be included in the result set.  If\n      this element is not\
    \ present, then the status of the offer should\n      not be considered in the\
    \ query.  The result set is also subject to\n      other query criteria in the\
    \ request.\n   o  sedGrpOfferKey: Zero or more SED Group Offer keys.  Only offers\n\
    \      having one of these keys should be included in the result set.\n      The\
    \ result set is also subject to other query criteria in the\n      request.\n"
- title: 7.2.7.2.  Get SED Group Offers Response
  contents:
  - "7.2.7.2.  Get SED Group Offers Response\n   The spppGetResponse element is described\
    \ in Section 7.2.8.\n"
- title: 7.2.8.  Generic Query Response
  contents:
  - "7.2.8.  Generic Query Response\n   An SPPP over SOAP query response object is\
    \ contained within the\n   generic <spppGetResponse> element.\n      <element\
    \ name=\"spppGetResponse\">\n       <complexType>\n        <sequence>\n      \
    \   <element name=\"overallResult\"\n         type=\"sppfs:ResultCodeType\"/>\n\
    \         <element name=\"resultObj\"\n         type=\"sppfb:BasicObjType\"\n\
    \         minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n        </sequence>\n   \
    \    </complexType>\n      </element>\n   An <spppGetResponse> contains the elements\
    \ necessary for the SPPF\n   client to precisely determine the overall result\
    \ of the query and\n   details of any SPPF objects that matched the criteria in\
    \ the request.\n   The data elements within the SPPP over SOAP query response\
    \ are\n   described as follows:\n   o  overallResult: Exactly one response code\
    \ and message pair that\n      explicitly identifies the result of the request.\
    \  See Section 7.3\n      for further details.\n   o  resultObj: The set of zero\
    \ or more objects that matched the query\n      criteria.  If no objects matched\
    \ the query criteria, then the\n      result object(s) MUST be empty and the overallResult\
    \ value MUST\n      indicate success (if no matches are found for the query criteria,\n\
    \      the response is considered a success).\n"
- title: 7.2.9.  Get Server Details Operation Structure
  contents:
  - "7.2.9.  Get Server Details Operation Structure\n   In order to query certain\
    \ details of the SPPF server, such as the\n   SPPF server's status and the major/minor\
    \ version supported by the\n   server, the Server Details operation structure\
    \ SHOULD be used.  This\n   structure is contained within the <spppServerStatusRequest>\
    \ element\n   whereas an SPPF server status response is wrapped within the\n \
    \  <spppServerStatusResponse> element.  The following subsections\n   describe\
    \ the <spppServerStatusRequest> and <spppServerStatusResponse>\n   elements.\n"
- title: 7.2.9.1.  Get Server Details Request
  contents:
  - "7.2.9.1.  Get Server Details Request\n   An SPPP over SOAP server details request\
    \ structure is represented in\n   the <spppServerStatusRequest> element as follows:\n\
    \      <element name=\"spppServerStatusRequest\">\n       <complexType>\n    \
    \    <sequence>\n         <element name=\"minorVer\"\n         type=\"sppfb:MinorVerType\"\
    \ minOccurs=\"0\"/>\n        </sequence>\n       </complexType>\n      </element>\n\
    \   The data elements within the <spppServerStatusRequest> element are\n   described\
    \ as follows:\n   o  minorVer: Zero or one minor version identifier, as defined\
    \ in\n      Section 7.4.\n"
- title: 7.2.9.2.  Get Server Details Response
  contents:
  - "7.2.9.2.  Get Server Details Response\n   An SPPP over SOAP server details response\
    \ structure is contained\n   within the generic <spppServerStatusResponse> element.\n\
    \      <element name=\"spppServerStatusResponse\">\n       <complexType>\n   \
    \     <sequence>\n         <element name=\"overallResult\" type=\"sppfs:ResultCodeType\"\
    />\n         <element name=\"svcMenu\" type=\"sppfb:SvcMenuType\"/>\n        </sequence>\n\
    \       </complexType>\n      </element>\n   The data elements within the <spppServerStatusResponse>\
    \ element are\n   described as follows:\n   o  overallResult: Exactly one response\
    \ code and message pair that\n      explicitly identifies the result of the request.\
    \  See Section 7.3\n      for further details.\n   o  svcMenu: Exactly one element\
    \ of type SvcMenuType that, in turn,\n      contains the elements to return the\
    \ server status, the major and\n      minor versions of SPPP over SOAP supported\
    \ by the SPPF server\n      (refer to Section 12 of [RFC7877] for the definition\
    \ of\n      SvcMenuType).\n"
- title: 7.3.  Response Codes and Messages
  contents:
  - "7.3.  Response Codes and Messages\n   This section contains the listing of response\
    \ codes and their\n   corresponding human-readable text.  These response codes\
    \ are in\n   conformance with the response types defined in Section 5.3 of\n \
    \  [RFC7877].\n   The response code numbering scheme generally adheres to the\
    \ theory\n   formalized in Section 4.2.1 of [RFC5321]:\n   o  The first digit\
    \ of the response code can only be 1 or 2: 1 = a\n      positive result, and 2\
    \ = a negative result.\n   o  The second digit of the response code indicates\
    \ the category: 0 =\n      Protocol Syntax, 1 = Implementation Specific Business\
    \ Rule, 2 =\n      Security, and 3 = Server System.\n   o  The third and fourth\
    \ digits of the response code indicate the\n      individual message event within\
    \ the category defined by the first\n      two digits.\n   The response codes\
    \ are also categorized as to whether they are\n   overall response codes that\
    \ may only be returned in the overallResult\n   data element in SPPF responses\
    \ or object-level response codes that\n   may only be returned in the detailResult\
    \ element of the SPPF\n   responses.\n   +--------+--------------------------+-------------------------------+\n\
    \   | Result | Result Message           | Overall or Object Level       |\n  \
    \ | Code   |                          |                               |\n   +--------+--------------------------+-------------------------------+\n\
    \   | 1000   | Request succeeded        | Overall Response Code         |\n  \
    \ | 2000   | Request syntax invalid   | Overall Response Code         |\n   |\
    \ 2001   | Request too large        | Overall Response Code         |\n   |  \
    \      | MaxSupported:[Maximum    |                               |\n   |    \
    \    | requests supported]      |                               |\n   | 2002 \
    \  | Version not supported    | Overall Response Code         |\n   | 2100   |\
    \ Command invalid          | Overall Response Code         |\n   | 2300   | System\
    \ temporarily       | Overall Response Code         |\n   |        | unavailable\
    \              |                               |\n   | 2301   | Unexpected internal\
    \      | Overall Response Code         |\n   |        | system or server error\
    \   |                               |\n   | 2101   | Attribute value invalid \
    \ | Object-Level Response Code    |\n   |        | AttrName:[AttributeName] |\
    \                               |\n   |        | AttrVal:[AttributeValue] |  \
    \                             |\n   | 2102   | Object does not exist    | Object-Level\
    \ Response Code    |\n   |        | AttrName:[AttributeName] |               \
    \                |\n   |        | AttrVal:[AttributeValue] |                 \
    \              |\n   | 2103   | Object status or         | Object-Level Response\
    \ Code    |\n   |        | ownership does not allow |                        \
    \       |\n   |        | for operation            |                          \
    \     |\n   |        | AttrName:[AttributeName] |                            \
    \   |\n   |        | AttrVal:[AttributeValue] |                              \
    \ |\n   +--------+--------------------------+-------------------------------+\n\
    \           Table 1: Response Code Numbering Scheme and Messages\n   The response\
    \ message for response code 2001 is \"parameterized\" with\n   the following parameter:\
    \ \"[Maximum requests supported]\".  When the\n   request is too large, this parameter\
    \ MUST be used to indicate the\n   maximum number of requests supported by the\
    \ server in a single\n   protocol operation.\n   Response code 2000 SHOULD be\
    \ used when the XML Schema validation of\n   requests fails.\n   Each of the object-level\
    \ response messages are \"parameterized\" with\n   the following parameters: \"\
    AttributeName\" and \"AttributeValue\".\n   For example, if an SPPF client sends\
    \ a request to delete a\n   Destination Group with a name \"TestDG\", and it does\
    \ not already\n   exist, then the error message returned should be: \"Attribute\
    \ value\n   invalid.  AttrName:dgName AttrVal:TestDG\".\n   The use of these parameters\
    \ MUST adhere to the rules defined in\n   Section 5.3 of [RFC7877].\n"
- title: 7.4.  Minor Version Identifier
  contents:
  - "7.4.  Minor Version Identifier\n   The minor version identifier element is defined\
    \ as follows:\n   o  minorVer: Zero or one minor version identifier, indicating\
    \ the\n      minor version of the SPPP over SOAP API that the client is\n    \
    \  attempting to use.  This is used in conjunction with the major\n      version\
    \ identifier in the XML Namespace to identify the version of\n      SPPP over\
    \ SOAP that the client is using.  If the element is not\n      present, the server\
    \ assumes that the client is using the latest\n      minor version of SPPP over\
    \ SOAP supported by the SPPF server for\n      the given major version.  The versions\
    \ of SPPP over SOAP supported\n      by a given SPPF server can be retrieved by\
    \ the client using this\n      same spppServerStatusRequest without passing in\
    \ the minorVer\n      element.\n"
- title: 8.  Protocol Operations
  contents:
  - "8.  Protocol Operations\n   Refer to Section 7 of [RFC7877] for a description\
    \ of all SPPF\n   operations and any necessary semantics that MUST be adhered\
    \ to in\n   order to conform with SPPF.\n"
- title: 9.  SPPP over SOAP WSDL Definition
  contents:
  - "9.  SPPP over SOAP WSDL Definition\n   The SPPP over SOAP WSDL and data types\
    \ are defined below.  The WSDL\n   design approach is commonly referred to as\
    \ \"Generic WSDL\".  It is\n   generic in the sense that there is not a specific\
    \ WSDL operation\n   defined for each object type that is supported by the SPPF\
    \ protocol.\n   There is a single WSDL structure for each type of SPPF operation.\n\
    \   Each such WSDL structure contains exactly one input structure and one\n  \
    \ output structure that wraps any data elements that are part of the\n   incoming\
    \ request and the outgoing response, respectively.  The\n   spppSOAPBinding in\
    \ the WSDL defines the binding style as \"document\"\n   and the encoding as \"\
    literal\".  It is this combination of \"wrapped\"\n   input and output data structures,\
    \ \"document\" binding style, and\n   \"literal\" encoding that characterize the\
    \ Document Literal Wrapped\n   style of WSDL specifications.\n   Notes: The following\
    \ WSDL has been formatted (e.g., tabs, spaces) to\n   meet IETF requirements.\
    \  Deployments MUST replace\n   \"REPLACE_WITH_ACTUAL_URL\" in the WSDL below\
    \ with the URI of the SPPF\n   server instance.\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <wsdl:definitions xmlns:wsdl=\"http://schemas.xmlsoap.org/wsdl/\"\
    \n   xmlns:soap=\"http://schemas.xmlsoap.org/wsdl/soap/\"\n   xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\
    \n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n   xmlns:sppfb=\"\
    urn:ietf:params:xml:ns:sppf:base:1\"\n   xmlns:sppfs=\"urn:ietf:params:xml:ns:sppf:soap:1\"\
    \n   targetNamespace=\"urn:ietf:params:xml:ns:sppf:soap:1\">\n    <wsdl:types>\n\
    \     <xsd:schema xmlns=\"http://www.w3.org/2001/XMLSchema\"\n     xmlns:sppfs=\"\
    urn:ietf:params:xml:ns:sppf:soap:1\"\n     targetNamespace=\"urn:ietf:params:xml:ns:sppf:soap:1\"\
    >\n      <annotation>\n       <documentation>\n        ---- Import base schema\
    \ ----\n       </documentation>\n      </annotation>\n      <import namespace=\"\
    urn:ietf:params:xml:ns:sppf:base:1\"\n      schemaLocation=\"sppfbase.xsd\"/>\n\
    \      <annotation>\n       <documentation>\n        ---- Key type(s) extended\n\
    \        from base schema. ----\n       </documentation>\n      </annotation>\n\
    \      <complexType name=\"ObjKeyType\">\n       <complexContent>\n        <extension\
    \ base=\"sppfb:ObjKeyType\">\n         <sequence>\n          <element name=\"\
    rant\" type=\"sppfb:OrgIdType\"/>\n          <element name=\"name\" type=\"sppfb:ObjNameType\"\
    />\n          <element name=\"type\" type=\"sppfs:ObjKeyTypeEnum\"/>\n       \
    \  </sequence>\n        </extension>\n       </complexContent>\n      </complexType>\n\
    \    <simpleType name=\"ObjKeyTypeEnum\">\n      <restriction base=\"token\">\n\
    \        <enumeration value=\"SedGrp\"/>\n        <enumeration value=\"DestGrp\"\
    />\n        <enumeration value=\"SedRec\"/>\n        <enumeration value=\"EgrRte\"\
    />\n      </restriction>\n    </simpleType>\n      <complexType name=\"SedGrpOfferKeyType\"\
    >\n       <complexContent>\n        <extension base=\"sppfb:SedGrpOfferKeyType\"\
    >\n         <sequence>\n          <element name=\"sedGrpKey\"\n          type=\"\
    sppfs:ObjKeyType\"/>\n          <element name=\"offeredTo\"\n          type=\"\
    sppfb:OrgIdType\"/>\n         </sequence>\n        </extension>\n       </complexContent>\n\
    \      </complexType>\n      <complexType name=\"PubIdKeyType\">\n       <complexContent>\n\
    \        <extension base=\"sppfb:PubIdKeyType\">\n         <sequence>\n      \
    \    <element name=\"rant\" type=\"sppfb:OrgIdType\"/>\n          <choice>\n \
    \          <element name=\"number\"\n           type=\"sppfb:NumberType\"/>\n\
    \           <element name=\"range\"\n           type=\"sppfb:NumberRangeType\"\
    />\n          </choice>\n         </sequence>\n        </extension>\n       </complexContent>\n\
    \      </complexType>\n      <annotation>\n       <documentation>\n        ----\
    \ Generic Request and\n        Response Definitions ----\n       </documentation>\n\
    \      </annotation>\n      <element name=\"spppAddRequest\">\n       <complexType>\n\
    \        <sequence>\n         <element name=\"clientTransId\"\n         type=\"\
    sppfb:TransIdType\" minOccurs=\"0\"/>\n         <element name=\"minorVer\"\n \
    \        type=\"sppfb:MinorVerType\" minOccurs=\"0\"/>\n         <element name=\"\
    obj\" type=\"sppfb:BasicObjType\"\n         maxOccurs=\"unbounded\"/>\n      \
    \  </sequence>\n       </complexType>\n      </element>\n      <element name=\"\
    spppDelRequest\">\n       <complexType>\n        <sequence>\n         <element\
    \ name=\"clientTransId\"\n         type=\"sppfb:TransIdType\" minOccurs=\"0\"\
    />\n         <element name=\"minorVer\"\n         type=\"sppfb:MinorVerType\"\
    \ minOccurs=\"0\"/>\n         <element name=\"objKey\"\n         type=\"sppfb:ObjKeyType\"\
    \ maxOccurs=\"unbounded\"/>\n        </sequence>\n       </complexType>\n    \
    \  </element>\n      <element name=\"spppAcceptRequest\">\n       <complexType>\n\
    \        <sequence>\n         <element name=\"clientTransId\"\n         type=\"\
    sppfb:TransIdType\" minOccurs=\"0\"/>\n         <element name=\"minorVer\"\n \
    \        type=\"sppfb:MinorVerType\" minOccurs=\"0\"/>\n         <element name=\"\
    sedGrpOfferKey\"\n         type=\"sppfs:SedGrpOfferKeyType\"\n         maxOccurs=\"\
    unbounded\"/>\n        </sequence>\n       </complexType>\n      </element>\n\
    \      <element name=\"spppRejectRequest\">\n       <complexType>\n        <sequence>\n\
    \         <element name=\"clientTransId\"\n         type=\"sppfb:TransIdType\"\
    \ minOccurs=\"0\"/>\n         <element name=\"minorVer\"\n         type=\"sppfb:MinorVerType\"\
    \ minOccurs=\"0\"/>\n         <element name=\"sedGrpOfferKey\"\n         type=\"\
    sppfs:SedGrpOfferKeyType\"\n         maxOccurs=\"unbounded\"/>\n        </sequence>\n\
    \       </complexType>\n      </element>\n      <element name=\"spppGetRequest\"\
    >\n       <complexType>\n        <sequence>\n         <element name=\"minorVer\"\
    \n         type=\"sppfb:MinorVerType\" minOccurs=\"0\"/>\n         <element name=\"\
    objKey\"\n         type=\"sppfb:ObjKeyType\"\n         maxOccurs=\"unbounded\"\
    />\n        </sequence>\n       </complexType>\n      </element>\n      <element\
    \ name=\"spppBatchRequest\">\n       <complexType>\n        <sequence>\n     \
    \    <element name=\"clientTransId\"\n         type=\"sppfb:TransIdType\" minOccurs=\"\
    0\"/>\n         <element name=\"minorVer\"\n         type=\"sppfb:MinorVerType\"\
    \ minOccurs=\"0\"/>\n          <choice minOccurs=\"1\" maxOccurs=\"unbounded\"\
    >\n           <element name=\"addObj\" type=\"sppfb:BasicObjType\"/>\n       \
    \    <element name=\"delObj\" type=\"sppfb:ObjKeyType\"/>\n           <element\
    \ name=\"acceptSedGrpOffer\"\n           type=\"sppfs:SedGrpOfferKeyType\"/>\n\
    \           <element name=\"rejectSedGrpOffer\"\n           type=\"sppfs:SedGrpOfferKeyType\"\
    />\n          </choice>\n        </sequence>\n       </complexType>\n      </element>\n\
    \      <element name=\"spppServerStatusRequest\">\n       <complexType>\n    \
    \    <sequence>\n         <element name=\"minorVer\"\n         type=\"sppfb:MinorVerType\"\
    \ minOccurs=\"0\"/>\n        </sequence>\n       </complexType>\n      </element>\n\
    \      <element name=\"getSedGrpOffersRequest\">\n       <complexType>\n     \
    \   <sequence>\n         <element name=\"minorVer\"\n         type=\"sppfb:MinorVerType\"\
    \ minOccurs=\"0\"/>\n        <element name=\"offeredBy\"\n        type=\"sppfb:OrgIdType\"\
    \ minOccurs=\"0\"\n        maxOccurs=\"unbounded\"/>\n        <element name=\"\
    offeredTo\" type=\"sppfb:OrgIdType\"\n        minOccurs=\"0\" maxOccurs=\"unbounded\"\
    />\n        <element name=\"status\"\n        type=\"sppfb:SedGrpOfferStatusType\"\
    \ minOccurs=\"0\"/>\n        <element name=\"sedGrpOfferKey\"\n        type=\"\
    sppfs:SedGrpOfferKeyType\"\n        minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n\
    \        </sequence>\n       </complexType>\n      </element>\n      <element\
    \ name=\"spppAddResponse\">\n       <complexType>\n        <sequence>\n      \
    \   <element name=\"clientTransId\"\n         type=\"sppfb:TransIdType\" minOccurs=\"\
    0\"/>\n         <element name=\"serverTransId\"\n         type=\"sppfb:TransIdType\"\
    />\n         <element name=\"overallResult\"\n         type=\"sppfs:ResultCodeType\"\
    />\n         <element name=\"detailResult\"\n         type=\"sppfs:ObjResultCodeType\"\
    \n         minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n        </sequence>\n  \
    \     </complexType>\n      </element>\n      <element name=\"spppDelResponse\"\
    >\n       <complexType>\n        <sequence>\n         <element name=\"clientTransId\"\
    \n         type=\"sppfb:TransIdType\" minOccurs=\"0\"/>\n         <element name=\"\
    serverTransId\"\n         type=\"sppfb:TransIdType\"/>\n         <element name=\"\
    overallResult\"\n         type=\"sppfs:ResultCodeType\"/>\n         <element name=\"\
    detailResult\"\n         type=\"sppfs:ObjKeyResultCodeType\"\n         minOccurs=\"\
    0\" maxOccurs=\"unbounded\"/>\n        </sequence>\n       </complexType>\n  \
    \    </element>\n      <element name=\"spppAcceptResponse\">\n       <complexType>\n\
    \        <sequence>\n         <element name=\"clientTransId\"\n         type=\"\
    sppfb:TransIdType\" minOccurs=\"0\"/>\n         <element name=\"serverTransId\"\
    \n         type=\"sppfb:TransIdType\"/>\n         <element name=\"overallResult\"\
    \n         type=\"sppfs:ResultCodeType\"/>\n         <element name=\"detailResult\"\
    \n         type=\"sppfs:SedGrpOfferKeyResultCodeType\"\n         minOccurs=\"\
    0\" maxOccurs=\"unbounded\"/>\n        </sequence>\n       </complexType>\n  \
    \    </element>\n      <element name=\"spppRejectResponse\">\n       <complexType>\n\
    \        <sequence>\n         <element name=\"clientTransId\"\n         type=\"\
    sppfb:TransIdType\" minOccurs=\"0\"/>\n         <element name=\"serverTransId\"\
    \n         type=\"sppfb:TransIdType\"/>\n         <element name=\"overallResult\"\
    \n         type=\"sppfs:ResultCodeType\"/>\n         <element name=\"detailResult\"\
    \n         type=\"sppfs:SedGrpOfferKeyResultCodeType\"\n         minOccurs=\"\
    0\" maxOccurs=\"unbounded\"/>\n        </sequence>\n       </complexType>\n  \
    \    </element>\n       <element name=\"spppBatchResponse\">\n       <complexType>\n\
    \        <sequence>\n         <element name=\"clientTransId\"\n         type=\"\
    sppfb:TransIdType\" minOccurs=\"0\"/>\n         <element name=\"serverTransId\"\
    \n         type=\"sppfb:TransIdType\"/>\n         <element name=\"overallResult\"\
    \n         type=\"sppfs:ResultCodeType\"/>\n          <choice minOccurs=\"0\"\
    \ maxOccurs=\"unbounded\">\n           <element name=\"addResult\"\n         \
    \           type=\"sppfs:ObjResultCodeType\"/>\n           <element name=\"delResult\"\
    \n                    type=\"sppfs:ObjKeyResultCodeType\"/>\n           <element\
    \ name=\"acceptResult\"\n                    type=\"sppfs:SedGrpOfferKeyResultCodeType\"\
    />\n           <element name=\"rejectResult\"\n                  type=\"sppfs:SedGrpOfferKeyResultCodeType\"\
    />\n          </choice>\n        </sequence>\n       </complexType>\n      </element>\n\
    \      <element name=\"spppGetResponse\">\n       <complexType>\n        <sequence>\n\
    \         <element name=\"overallResult\"\n         type=\"sppfs:ResultCodeType\"\
    />\n         <element name=\"resultObj\"\n         type=\"sppfb:BasicObjType\"\
    \n         minOccurs=\"0\" maxOccurs=\"unbounded\"/>\n        </sequence>\n  \
    \     </complexType>\n      </element>\n      <element name=\"spppServerStatusResponse\"\
    >\n       <complexType>\n        <sequence>\n         <element name=\"overallResult\"\
    \n         type=\"sppfs:ResultCodeType\"/>\n         <element name=\"svcMenu\"\
    \n         type=\"sppfb:SvcMenuType\"/>\n        </sequence>\n       </complexType>\n\
    \      </element>\n      <annotation>\n       <documentation>\n        ---- Operation\
    \ Result Type\n        Definitions ----\n       </documentation>\n      </annotation>\n\
    \      <complexType name=\"ResultCodeType\">\n       <sequence>\n        <element\
    \ name=\"code\" type=\"sppfs:ResultCodeValType\"/>\n        <element name=\"msg\"\
    \ type=\"sppfs:MsgType\"/>\n       </sequence>\n      </complexType>\n      <simpleType\
    \ name=\"ResultCodeValType\">\n        <restriction base=\"unsignedShort\">\n\
    \          <enumeration value=\"1000\"/>\n          <enumeration value=\"2000\"\
    />\n          <enumeration value=\"2001\"/>\n          <enumeration value=\"2002\"\
    />\n          <enumeration value=\"2100\"/>\n          <enumeration value=\"2101\"\
    />\n          <enumeration value=\"2102\"/>\n          <enumeration value=\"2103\"\
    />\n          <enumeration value=\"2300\"/>\n          <enumeration value=\"2301\"\
    />\n        </restriction>\n      </simpleType>\n      <simpleType name=\"MsgType\"\
    >\n        <restriction base=\"token\">\n         <minLength value=\"3\"/>\n \
    \        <maxLength value=\"255\"/>\n        </restriction>\n       </simpleType>\n\
    \      <complexType name=\"ObjResultCodeType\">\n       <complexContent>\n   \
    \     <extension base=\"sppfs:ResultCodeType\">\n         <sequence>\n       \
    \   <element name=\"obj\" type=\"sppfb:BasicObjType\"/>\n         </sequence>\n\
    \        </extension>\n       </complexContent>\n      </complexType>\n      <complexType\
    \ name=\"ObjKeyResultCodeType\">\n       <complexContent>\n        <extension\
    \ base=\"sppfs:ResultCodeType\">\n         <sequence>\n          <element name=\"\
    objKey\" type=\"sppfb:ObjKeyType\"/>\n         </sequence>\n        </extension>\n\
    \       </complexContent>\n      </complexType>\n         <complexType name=\"\
    SedGrpOfferKeyResultCodeType\">\n       <complexContent>\n        <extension base=\"\
    sppfs:ResultCodeType\">\n         <sequence>\n          <element name=\"sedGrpOfferKey\"\
    \n          type=\"sppfs:SedGrpOfferKeyType\"/>\n         </sequence>\n      \
    \  </extension>\n       </complexContent>\n       </complexType>\n     </xsd:schema>\n\
    \    </wsdl:types>\n    <wsdl:message name=\"spppAddRequestMsg\">\n     <wsdl:part\
    \ name=\"rqst\" element=\"sppfs:spppAddRequest\"/>\n    </wsdl:message>\n    <wsdl:message\
    \ name=\"spppDelRequestMsg\">\n     <wsdl:part name=\"rqst\" element=\"sppfs:spppDelRequest\"\
    />\n    </wsdl:message>\n    <wsdl:message name=\"spppAcceptRequestMsg\">\n  \
    \   <wsdl:part name=\"rqst\" element=\"sppfs:spppAcceptRequest\"/>\n    </wsdl:message>\n\
    \    <wsdl:message name=\"spppRejectRequestMsg\">\n     <wsdl:part name=\"rqst\"\
    \ element=\"sppfs:spppRejectRequest\"/>\n    </wsdl:message>\n    <wsdl:message\
    \ name=\"spppBatchRequestMsg\">\n     <wsdl:part name=\"rqst\" element=\"sppfs:spppBatchRequest\"\
    />\n    </wsdl:message>\n    <wsdl:message name=\"spppGetRequestMsg\">\n     <wsdl:part\
    \ name=\"rqst\" element=\"sppfs:spppGetRequest\"/>\n    </wsdl:message>\n    <wsdl:message\
    \ name=\"spppGetSedGrpOffersRequestMsg\">\n     <wsdl:part name=\"rqst\" element=\"\
    sppfs:getSedGrpOffersRequest\"/>\n    </wsdl:message>\n    <wsdl:message name=\"\
    spppAddResponseMsg\">\n     <wsdl:part name=\"rspns\" element=\"sppfs:spppAddResponse\"\
    />\n    </wsdl:message>\n     <wsdl:message name=\"spppDelResponseMsg\">\n   \
    \  <wsdl:part name=\"rspns\" element=\"sppfs:spppDelResponse\"/>\n    </wsdl:message>\n\
    \     <wsdl:message name=\"spppAcceptResponseMsg\">\n     <wsdl:part name=\"rspns\"\
    \ element=\"sppfs:spppAcceptResponse\"/>\n    </wsdl:message>\n     <wsdl:message\
    \ name=\"spppRejectResponseMsg\">\n     <wsdl:part name=\"rspns\" element=\"sppfs:spppRejectResponse\"\
    />\n    </wsdl:message>\n     <wsdl:message name=\"spppBatchResponseMsg\">\n \
    \    <wsdl:part name=\"rspns\" element=\"sppfs:spppBatchResponse\"/>\n    </wsdl:message>\n\
    \    <wsdl:message name=\"spppGetResponseMsg\">\n     <wsdl:part name=\"rspns\"\
    \ element=\"sppfs:spppGetResponse\"/>\n    </wsdl:message>\n    <wsdl:message\
    \ name=\"spppServerStatusRequestMsg\">\n     <wsdl:part name=\"rqst\" element=\"\
    sppfs:spppServerStatusRequest\"/>\n    </wsdl:message>\n    <wsdl:message name=\"\
    spppServerStatusResponseMsg\">\n     <wsdl:part name=\"rspns\" element=\"sppfs:spppServerStatusResponse\"\
    />\n    </wsdl:message>\n    <wsdl:portType name=\"spppPortType\">\n     <wsdl:operation\
    \ name=\"submitAddRqst\">\n      <wsdl:input message=\"sppfs:spppAddRequestMsg\"\
    />\n      <wsdl:output message=\"sppfs:spppAddResponseMsg\"/>\n     </wsdl:operation>\n\
    \     <wsdl:operation name=\"submitDelRqst\">\n      <wsdl:input message=\"sppfs:spppDelRequestMsg\"\
    />\n      <wsdl:output message=\"sppfs:spppDelResponseMsg\"/>\n     </wsdl:operation>\n\
    \     <wsdl:operation name=\"submitAcceptRqst\">\n      <wsdl:input message=\"\
    sppfs:spppAcceptRequestMsg\"/>\n      <wsdl:output message=\"sppfs:spppAcceptResponseMsg\"\
    />\n     </wsdl:operation>\n     <wsdl:operation name=\"submitRejectRqst\">\n\
    \      <wsdl:input message=\"sppfs:spppRejectRequestMsg\"/>\n      <wsdl:output\
    \ message=\"sppfs:spppRejectResponseMsg\"/>\n     </wsdl:operation>\n     <wsdl:operation\
    \ name=\"submitBatchRqst\">\n      <wsdl:input message=\"sppfs:spppBatchRequestMsg\"\
    />\n      <wsdl:output message=\"sppfs:spppBatchResponseMsg\"/>\n     </wsdl:operation>\n\
    \     <wsdl:operation name=\"submitGetRqst\">\n      <wsdl:input message=\"sppfs:spppGetRequestMsg\"\
    />\n      <wsdl:output message=\"sppfs:spppGetResponseMsg\"/>\n     </wsdl:operation>\n\
    \     <wsdl:operation name=\"submitGetSedGrpOffersRqst\">\n      <wsdl:input message=\"\
    sppfs:spppGetSedGrpOffersRequestMsg\"/>\n      <wsdl:output message=\"sppfs:spppGetResponseMsg\"\
    />\n     </wsdl:operation>\n     <wsdl:operation name=\"submitServerStatusRqst\"\
    >\n      <wsdl:input message=\"sppfs:spppServerStatusRequestMsg\"/>\n      <wsdl:output\
    \ message=\"sppfs:spppServerStatusResponseMsg\"/>\n     </wsdl:operation>\n  \
    \  </wsdl:portType>\n    <wsdl:binding name=\"spppSoapBinding\" type=\"sppfs:spppPortType\"\
    >\n     <soap:binding style=\"document\"\n     transport=\"http://schemas.xmlsoap.org/soap/http\"\
    />\n     <wsdl:operation name=\"submitAddRqst\">\n      <soap:operation soapAction=\"\
    submitAddRqst\" style=\"document\"/>\n      <wsdl:input>\n       <soap:body use=\"\
    literal\"/>\n      </wsdl:input>\n      <wsdl:output>\n       <soap:body use=\"\
    literal\"/>\n      </wsdl:output>\n     </wsdl:operation>\n     <wsdl:operation\
    \ name=\"submitDelRqst\">\n      <soap:operation soapAction=\"submitDelRqst\"\
    \ style=\"document\"/>\n      <wsdl:input>\n       <soap:body use=\"literal\"\
    />\n      </wsdl:input>\n      <wsdl:output>\n       <soap:body use=\"literal\"\
    />\n      </wsdl:output>\n     </wsdl:operation>\n     <wsdl:operation name=\"\
    submitAcceptRqst\">\n      <soap:operation soapAction=\"submitAcceptRqst\" style=\"\
    document\"/>\n      <wsdl:input>\n       <soap:body use=\"literal\"/>\n      </wsdl:input>\n\
    \      <wsdl:output>\n       <soap:body use=\"literal\"/>\n      </wsdl:output>\n\
    \     </wsdl:operation>\n     <wsdl:operation name=\"submitRejectRqst\">\n   \
    \   <soap:operation soapAction=\"submitRejectRqst\" style=\"document\"/>\n   \
    \   <wsdl:input>\n       <soap:body use=\"literal\"/>\n      </wsdl:input>\n \
    \     <wsdl:output>\n       <soap:body use=\"literal\"/>\n      </wsdl:output>\n\
    \     </wsdl:operation>\n     <wsdl:operation name=\"submitBatchRqst\">\n    \
    \  <soap:operation soapAction=\"submitBatchRqst\" style=\"document\"/>\n     \
    \ <wsdl:input>\n       <soap:body use=\"literal\"/>\n      </wsdl:input>\n   \
    \   <wsdl:output>\n       <soap:body use=\"literal\"/>\n      </wsdl:output>\n\
    \     </wsdl:operation>\n     <wsdl:operation name=\"submitGetRqst\">\n      <soap:operation\
    \ soapAction=\"submitGetRqst\" style=\"document\"/>\n      <wsdl:input>\n    \
    \   <soap:body use=\"literal\"/>\n      </wsdl:input>\n      <wsdl:output>\n \
    \      <soap:body use=\"literal\"/>\n      </wsdl:output>\n     </wsdl:operation>\n\
    \     <wsdl:operation name=\"submitGetSedGrpOffersRqst\">\n      <soap:operation\
    \ soapAction=\"submitGetSedGrpOffersRqst\"\n      style=\"document\"/>\n     \
    \ <wsdl:input>\n       <soap:body use=\"literal\"/>\n      </wsdl:input>\n   \
    \   <wsdl:output>\n       <soap:body use=\"literal\"/>\n      </wsdl:output>\n\
    \     </wsdl:operation>\n     <wsdl:operation name=\"submitServerStatusRqst\"\
    >\n      <soap:operation soapAction=\"submitServerStatusRqst\"\n      style=\"\
    document\"/>\n      <wsdl:input>\n       <soap:body use=\"literal\"/>\n      </wsdl:input>\n\
    \      <wsdl:output>\n       <soap:body use=\"literal\"/>\n      </wsdl:output>\n\
    \     </wsdl:operation>\n    </wsdl:binding>\n    <wsdl:service name=\"spppService\"\
    >\n     <wsdl:port name=\"spppPort\" binding=\"sppfs:spppSoapBinding\">\n    \
    \  <soap:address location=\"REPLACE_WITH_ACTUAL_URL\"/>\n     </wsdl:port>\n \
    \   </wsdl:service>\n   </wsdl:definitions>\n                              Figure\
    \ 2: WSDL\n"
- title: 10.  SPPP over SOAP Examples
  contents:
  - "10.  SPPP over SOAP Examples\n   This section shows an XML message exchange between\
    \ two SIP Service\n   Providers (SSPs) and a Registry.  The messages in this section\
    \ are\n   valid XML instances that conform to the SPPP over SOAP schema version\n\
    \   within this document.  This section also relies on the XML data\n   structures\
    \ defined in the SPPF specification [RFC7877], which should\n   also be referenced\
    \ to understand XML object types embedded in these\n   example messages.\n   In\
    \ this sample use-case scenario, SSP1 and SSP2 provision resource\n   data in\
    \ the Registry and use SPPF constructs to selectively share the\n   SED Groups.\
    \  In the figure below, SSP2 has two ingress Signaling Path\n   Border Element\
    \ (SBE) instances that are associated with the Public\n   Identities with which\
    \ SSP2 has the retail relationship.  Also, the\n   two SBE instances for SSP1\
    \ are used to show how to use SPPF to\n   associate route preferences for the\
    \ destination Ingress Routes and\n   exercise greater control on outbound traffic\
    \ to the peer's ingress\n   SBEs.\n      ---------------+                    \
    \  +------------------\n                     |                      |\n      \
    \           +------+               +------+\n                 | sbe1 |       \
    \        | sbe2 |\n                 +------+               +------+\n       SSP1\
    \          |                      |           SSP2\n                 +------+\
    \               +------+\n                 | sbe3 |               | sbe4 |\n \
    \                +------+               +------+\n      iana-en:111    |     \
    \                 |     iana-en:222\n      ---------------+                  \
    \    +------------------\n              |                                    \
    \ |\n              |                                     |\n              | SPPF\
    \   +------------------+   SPPF  |\n              +------->|     Registry    \
    \ |<--------+\n                       +------------------+\n                 \
    \     Example Use-Case Infrastructure\n"
- title: 10.1.  Add Destination Group
  contents:
  - "10.1.  Add Destination Group\n   SSP2 adds a Destination Group to the Registry\
    \ for later use.  The\n   SSP2 SPPF client sets a unique transaction identifier\
    \ \"txn_1479\" for\n   tracking purposes.  The name of the Destination Group is\
    \ set to\n   DEST_GRP_SSP2_1.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\
    \   <soapenv:Envelope\n   xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\
    \n   xmlns:urn=\"urn:ietf:params:xml:ns:sppf:soap:1\"\n   xmlns:urn1=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <soapenv:Header/>\n\
    \    <soapenv:Body>\n     <urn:spppAddRequest>\n      <!--Optional:-->\n     \
    \ <clientTransId>txn_1479</clientTransId>\n       <!--1 or more repetitions:-->\n\
    \      <obj xsi:type=\"urn1:DestGrpType\">\n       <urn1:rant>iana-en:222</urn1:rant>\n\
    \       <urn1:rar>iana-en:223</urn1:rar>\n       <urn1:dgName>DEST_GRP_SSP2_1</urn1:dgName>\n\
    \      </obj>\n     </urn:spppAddRequest>\n    </soapenv:Body>\n   </soapenv:Envelope>\n\
    \   The Registry processes the request and returns a favorable response\n   confirming\
    \ successful creation of the named Destination Group.  In\n   addition to returning\
    \ a unique server transaction identifier, the\n   Registry returns the matching\
    \ client transaction identifier from the\n   request message back to the SPPF\
    \ client.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <S:Envelope\n   xmlns:S=\"\
    http://schemas.xmlsoap.org/soap/envelope/\">\n    <S:Body>\n     <ns3:spppAddResponse\n\
    \      xmlns:ns2=\"urn:ietf:params:xml:ns:sppf:base:1\"\n      xmlns:ns3=\"urn:ietf:params:xml:ns:sppf:soap:1\"\
    >\n      <clientTransId>txn_1479</clientTransId>\n      <serverTransId>tx_12345</serverTransId>\n\
    \      <overallResult>\n       <code>1000</code>\n       <msg>Request Succeeded.</msg>\n\
    \      </overallResult>\n     </ns3:spppAddResponse>\n    </S:Body>\n   </S:Envelope>\n"
- title: 10.2.  Add SED Records
  contents:
  - "10.2.  Add SED Records\n   SSP2 adds SED Records in the form of Ingress Routes\
    \ to the Registry.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <soapenv:Envelope\n\
    \   xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\n   xmlns:urn=\"\
    urn:ietf:params:xml:ns:sppf:soap:1\"\n   xmlns:urn1=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <soapenv:Header/>\n\
    \    <soapenv:Body>\n     <urn:spppAddRequest>\n      <!--Optional:-->\n     \
    \ <clientTransId>txn_1479</clientTransId>\n      <!--1 or more repetitions:-->\n\
    \      <obj xsi:type=\"urn1:NAPTRType\">\n       <urn1:rant>iana-en:222</urn1:rant>\n\
    \       <urn1:rar>iana-en:223</urn1:rar>\n       <urn1:sedName>SED_SSP2_SBE2</urn1:sedName>\n\
    \       <urn1:isInSvc>true</urn1:isInSvc>\n       <urn1:order>10</urn1:order>\n\
    \       <urn1:flags>u</urn1:flags>\n       <urn1:svcs>E2U+sip</urn1:svcs>\n  \
    \     <urn1:regx>\n        <urn1:ere>^(.*)$</urn1:ere>\n        <urn1:repl>sip:\\\
    1@sbe2.ssp2.example.com</urn1:repl>\n       </urn1:regx>\n      </obj>\n     </urn:spppAddRequest>\n\
    \    </soapenv:Body>\n   </soapenv:Envelope>\n   The Registry returns a success\
    \ response.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <S:Envelope\n \
    \  xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <S:Body>\n    \
    \ <ns3:spppAddResponse\n      xmlns:ns2=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n      xmlns:ns3=\"urn:ietf:params:xml:ns:sppf:soap:1\">\n      <clientTransId>txn_1479</clientTransId>\n\
    \      <serverTransId>tx_12345</serverTransId>\n      <overallResult>\n      \
    \ <code>1000</code>\n       <msg>Request Succeeded.</msg>\n      </overallResult>\n\
    \     </ns3:spppAddResponse>\n    </S:Body>\n   </S:Envelope>\n"
- title: 10.3.  Add SED Records -- URIType
  contents:
  - "10.3.  Add SED Records -- URIType\n   SSP2 adds another SED Record to the Registry\
    \ and makes use of\n   URIType.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\
    \   <soapenv:Envelope\n   xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\
    \n   xmlns:urn=\"urn:ietf:params:xml:ns:sppf:soap:1\"\n   xmlns:urn1=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <soapenv:Header/>\n\
    \    <soapenv:Body>\n     <urn:spppAddRequest>\n      <clientTransId>txn_1479</clientTransId>\n\
    \       <!--1 or more repetitions:-->\n      <obj xsi:type=\"urn1:URIType\">\n\
    \       <urn1:rant>iana-en:222</urn1:rant>\n       <urn1:rar>iana-en:223</urn1:rar>\n\
    \       <urn1:sedName>SED_SSP2_SBE4</urn1:sedName>\n       <urn1:isInSvc>true</urn1:isInSvc>\n\
    \       <urn1:ere>^(.*)$</urn1:ere>\n       <urn1:uri>sip:\\1;npdi@sbe4.ssp2.example.com</urn1:uri>\n\
    \      </obj>\n     </urn:spppAddRequest>\n    </soapenv:Body>\n   </soapenv:Envelope>\n\
    \   The Registry returns a success response.\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <S:Envelope xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\"\
    >\n    <S:Body>\n     <ns3:spppAddResponse\n      xmlns:ns2=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n      xmlns:ns3=\"urn:ietf:params:xml:ns:sppf:soap:1\">\n      <clientTransId>txn_1479</clientTransId>\n\
    \      <serverTransId>tx_12345</serverTransId>\n      <overallResult>\n      \
    \ <code>1000</code>\n       <msg>Request Succeeded.</msg>\n      </overallResult>\n\
    \     </ns3:spppAddResponse>\n    </S:Body>\n   </S:Envelope>\n"
- title: 10.4.  Add SED Group
  contents:
  - "10.4.  Add SED Group\n   SSP2 creates the grouping of SED Records (e.g., Ingress\
    \ Routes) and\n   chooses a higher precedence for SED_SSP2_SBE2 by setting a lower\n\
    \   number for the \"priority\" attribute, a protocol agnostic precedence\n  \
    \ indicator.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <soapenv:Envelope\n\
    \    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:urn=\"\
    urn:ietf:params:xml:ns:sppf:soap:1\"\n    xmlns:urn1=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <soapenv:Header/>\n\
    \    <soapenv:Body>\n     <urn:spppAddRequest>\n      <clientTransId>txn_1479</clientTransId>\n\
    \       <!--1 or more repetitions:-->\n      <obj xsi:type=\"urn1:SedGrpType\"\
    >\n       <urn1:rant>iana-en:222</urn1:rant>\n       <urn1:rar>iana-en:223</urn1:rar>\n\
    \       <urn1:sedGrpName>SED_GRP_SSP2_1</urn1:sedGrpName>\n       <urn1:sedRecRef>\n\
    \        <urn1:sedKey xsi:type=\"urn:ObjKeyType\">\n         <rant>iana-en:222</rant>\n\
    \         <name>SED_SSP2_SBE2</name>\n         <type>SedRec</type>\n        </urn1:sedKey>\n\
    \        <urn1:priority>100</urn1:priority>\n       </urn1:sedRecRef>\n      \
    \ <urn1:dgName>DEST_GRP_SSP2_1</urn1:dgName>\n       <urn1:isInSvc>true</urn1:isInSvc>\n\
    \       <urn1:priority>10</urn1:priority>\n      </obj>\n     </urn:spppAddRequest>\n\
    \    </soapenv:Body>\n   </soapenv:Envelope>\n   To confirm successful processing\
    \ of this request, the Registry\n   returns a well-known result code \"1000\"\
    \ to the SSP2 client.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <S:Envelope\
    \ xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <S:Body>\n     <ns3:spppAddResponse\n\
    \      xmlns:ns2=\"urn:ietf:params:xml:ns:sppf:base:1\"\n      xmlns:ns3=\"urn:ietf:params:xml:ns:sppf:soap:1\"\
    >\n      <clientTransId>txn_1479</clientTransId>\n      <serverTransId>tx_12345</serverTransId>\n\
    \      <overallResult>\n       <code>1000</code>\n       <msg>Request Succeeded.</msg>\n\
    \      </overallResult>\n     </ns3:spppAddResponse>\n    </S:Body>\n   </S:Envelope>\n"
- title: 10.5.  Add Public Identifier -- Successful COR Claim
  contents:
  - "10.5.  Add Public Identifier -- Successful COR Claim\n   SSP2 activates a TN\
    \ Public Identifier by associating it with a valid\n   Destination Group.  Further,\
    \ SSP2 puts forth a claim that it is the\n   carrier-of-record (COR) for the TN.\n\
    \   <soapenv:Envelope\n   xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\
    \n   xmlns:urn=\"urn:ietf:params:xml:ns:sppf:soap:1\"\n   xmlns:urn1=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n   xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <soapenv:Header/>\n\
    \    <soapenv:Body>\n     <urn:spppAddRequest>\n      <clientTransId>txn_1479</clientTransId>\n\
    \       <!--1 or more repetitions:-->\n      <obj xsi:type=\"urn1:TNType\">\n\
    \       <urn1:rant>iana-en:222</urn1:rant>\n       <urn1:rar>iana-en:223</urn1:rar>\n\
    \       <urn1:dgName>DEST_GRP_SSP2_1</urn1:dgName>\n       <urn1:tn>+12025556666</urn1:tn>\n\
    \       <urn1:corInfo>\n        <urn1:corClaim>true</urn1:corClaim>\n       </urn1:corInfo>\n\
    \      </obj>\n     </urn:spppAddRequest>\n    </soapenv:Body>\n   </soapenv:Envelope>\n\
    \   Assuming that the Registry has access to TN authority data and it\n   performs\
    \ the required checks to verify that SSP2 is in fact the SP of\n   record for\
    \ the given TN, the request is processed successfully.  In\n   the response message,\
    \ the Registry sets the value of <cor> to \"true\"\n   in order to confirm the\
    \ SSP2 claim as the carrier-of-record, and the\n   <corDate> reflects the time\
    \ when the carrier-of-record claim is\n   processed.\n   <?xml version=\"1.0\"\
    \ encoding=\"UTF-8\"?>\n   <S:Envelope\n    xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\"\
    \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <S:Body>\n\
    \     <ns3:spppAddResponse\n      xmlns:ns2=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n      xmlns:ns3=\"urn:ietf:params:xml:ns:sppf:soap:1\">\n      <clientTransId>txn_1479</clientTransId>\n\
    \      <serverTransId>tx_12345</serverTransId>\n      <overallResult>\n      \
    \ <code>1000</code>\n       <msg>Request Succeeded.</msg>\n      </overallResult>\n\
    \      <detailResult>\n       <code>1000</code>\n       <msg>Request Succeeded.</msg>\n\
    \       <obj xsi:type=\"ns2:TNType\">\n        <ns2:rant>iana-en:222</ns2:rant>\n\
    \        <ns2:rar>iana-en:223</ns2:rar>\n        <ns2:cDate>2010-05-30T09:30:10Z</ns2:cDate>\n\
    \        <ns2:dgName>DEST_GRP_SSP2_1</ns2:dgName>\n        <ns2:tn>+12025556666</ns2:tn>\n\
    \        <ns2:corInfo>\n         <ns2:corClaim>true</ns2:corClaim>\n         <ns2:cor>true</ns2:cor>\n\
    \         <ns2:corDate>2010-05-30T09:30:11Z</ns2:corDate>\n        </ns2:corInfo>\n\
    \       </obj>\n      </detailResult>\n     </ns3:spppAddResponse>\n    </S:Body>\n\
    \   </S:Envelope>\n"
- title: 10.6.  Add LRN
  contents:
  - "10.6.  Add LRN\n   If another entity that SSP2 shares SED (e.g., routes) with\
    \ has access\n   to Number Portability data, it may choose to perform route lookups\
    \ by\n   RN.  Therefore, SSP2 associates an RN to a Destination Group in order\n\
    \   to facilitate Ingress Route discovery.\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <soapenv:Envelope\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\
    \n    xmlns:urn=\"urn:ietf:params:xml:ns:sppf:soap:1\"\n    xmlns:urn1=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <soapenv:Header/>\n\
    \    <soapenv:Body>\n     <urn:spppAddRequest>\n      <clientTransId>txn_1479</clientTransId>\n\
    \       <!--1 or more repetitions:-->\n      <obj xsi:type=\"urn1:RNType\">\n\
    \       <urn1:rant>iana-en:222</urn1:rant>\n       <urn1:rar>iana-en:223</urn1:rar>\n\
    \       <urn1:dgName>DEST_GRP_SSP2_1</urn1:dgName>\n       <urn1:rn>2025550000</urn1:rn>\n\
    \      </obj>\n     </urn:spppAddRequest>\n    </soapenv:Body>\n   </soapenv:Envelope>\n\
    \   The Registry completes the request successfully and returns a\n   favorable\
    \ response to the SPPF client.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\
    \   <S:Envelope\n    xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\">\n\
    \    <S:Body>\n     <ns3:spppAddResponse\n      xmlns:ns2=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n      xmlns:ns3=\"urn:ietf:params:xml:ns:sppf:soap:1\">\n      <clientTransId>txn_1479</clientTransId>\n\
    \      <serverTransId>tx_12345</serverTransId>\n      <overallResult>\n      \
    \ <code>1000</code>\n       <msg>Request Succeeded.</msg>\n      </overallResult>\n\
    \     </ns3:spppAddResponse>\n    </S:Body>\n   </S:Envelope>\n"
- title: 10.7.  Add TN Range
  contents:
  - "10.7.  Add TN Range\n   Next, SSP2 activates a block of ten thousand TNs and\
    \ associates it to\n   a Destination Group.\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <soapenv:Envelope\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\
    \n    xmlns:urn=\"urn:ietf:params:xml:ns:sppf:soap:1\"\n    xmlns:urn1=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <soapenv:Header/>\n\
    \    <soapenv:Body>\n     <urn:spppAddRequest>\n      <clientTransId>txn_1479</clientTransId>\n\
    \       <!--1 or more repetitions:-->\n      <obj xsi:type=\"urn1:TNRType\">\n\
    \       <urn1:rant>iana-en:222</urn1:rant>\n       <urn1:rar>iana-en:223</urn1:rar>\n\
    \       <urn1:dgName>DEST_GRP_SSP2_1</urn1:dgName>\n       <urn1:range>\n    \
    \    <urn1:startTn>+12026660000</urn1:startTn>\n        <urn1:endTn>+12026669999</urn1:endTn>\n\
    \       </urn1:range>\n      </obj>\n     </urn:spppAddRequest>\n    </soapenv:Body>\n\
    \   </soapenv:Envelope>\n   The Registry completes the request successfully and\
    \ returns a\n   favorable response.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <S:Envelope\n    xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\"\
    >\n    <S:Body>\n     <ns3:spppAddResponse\n      xmlns:ns2=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n      xmlns:ns3=\"urn:ietf:params:xml:ns:sppf:soap:1\">\n      <clientTransId>txn_1479</clientTransId>\n\
    \      <serverTransId>tx_12345</serverTransId>\n      <overallResult>\n      \
    \ <code>1000</code>\n       <msg>Request Succeeded.</msg>\n      </overallResult>\n\
    \     </ns3:spppAddResponse>\n    </S:Body>\n   </S:Envelope>\n"
- title: 10.8.  Add TN Prefix
  contents:
  - "10.8.  Add TN Prefix\n   Next, SSP2 activates a block of ten thousand TNs by\
    \ using the TNPType\n   structure and identifying a TN prefix.\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <soapenv:Envelope\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\
    \n    xmlns:urn=\"urn:ietf:params:xml:ns:sppf:soap:1\"\n    xmlns:urn1=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <soapenv:Header/>\n\
    \    <soapenv:Body>\n     <urn:spppAddRequest>\n      <clientTransId>txn_1479</clientTransId>\n\
    \       <!--1 or more repetitions:-->\n      <obj xsi:type=\"urn1:TNPType\">\n\
    \       <urn1:rant>iana-en:222</urn1:rant>\n       <urn1:rar>iana-en:223</urn1:rar>\n\
    \       <urn1:dgName>DEST_GRP_SSP2_1</urn1:dgName>\n       <urn1:tnPrefix>+1202777</urn1:tnPrefix>\n\
    \      </obj>\n     </urn:spppAddRequest>\n    </soapenv:Body>\n   </soapenv:Envelope>\n\
    \   The Registry completes the request successfully and returns a\n   favorable\
    \ response.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <S:Envelope\n \
    \   xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <S:Body>\n   \
    \  <ns3:spppAddResponse\n      xmlns:ns2=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n      xmlns:ns3=\"urn:ietf:params:xml:ns:sppf:soap:1\">\n      <clientTransId>txn_1479</clientTransId>\n\
    \      <serverTransId>tx_12345</serverTransId>\n      <overallResult>\n      \
    \ <code>1000</code>\n       <msg>Request Succeeded.</msg>\n      </overallResult>\n\
    \     </ns3:spppAddResponse>\n    </S:Body>\n   </S:Envelope>\n"
- title: 10.9.  Enable Peering -- SED Group Offer
  contents:
  - "10.9.  Enable Peering -- SED Group Offer\n   In order for SSP1 to complete session\
    \ establishment for a destination\n   TN where the target subscriber has a retail\
    \ relationship with SSP2,\n   it first requires an asynchronous bidirectional\
    \ handshake to show\n   mutual consent.  To start the process, SSP2 initiates\
    \ the peering\n   handshake by offering SSP1 access to its SED Group.\n   <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\"?>\n   <soapenv:Envelope\n    xmlns:soapenv=\"\
    http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:urn=\"urn:ietf:params:xml:ns:sppf:soap:1\"\
    \n    xmlns:urn1=\"urn:ietf:params:xml:ns:sppf:base:1\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    >\n    <soapenv:Header/>\n    <soapenv:Body>\n     <urn:spppAddRequest>\n    \
    \  <clientTransId>txn_1479</clientTransId>\n       <!--1 or more repetitions:-->\n\
    \      <obj xsi:type=\"urn1:SedGrpOfferType\">\n       <urn1:rant>iana-en:222</urn1:rant>\n\
    \       <urn1:rar>iana-en:223</urn1:rar>\n       <urn1:sedGrpOfferKey xsi:type=\"\
    urn:SedGrpOfferKeyType\">\n        <sedGrpKey xsi:type=\"urn:ObjKeyType\">\n \
    \        <rant>iana-en:222</rant>\n         <name>SED_GRP_SSP2_1</name>\n    \
    \     <type>SedGrp</type>\n        </sedGrpKey>\n        <offeredTo>iana-en:111</offeredTo>\n\
    \       </urn1:sedGrpOfferKey>\n       <urn1:status>offered</urn1:status>\n  \
    \     <urn1:offerDateTime>\n         2006-05-04T18:13:51.0Z\n       </urn1:offerDateTime>\n\
    \      </obj>\n     </urn:spppAddRequest>\n    </soapenv:Body>\n   </soapenv:Envelope>\n\
    \   The Registry completes the request successfully and confirms that the\n  \
    \ SSP1 will now have the opportunity to weigh in on the offer and\n   either accept\
    \ or reject it.  The Registry may employ out-of-band\n   notification mechanisms\
    \ for quicker updates to SSP1 so they can act\n   faster, though this topic is\
    \ beyond the scope of this document.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <S:Envelope\n    xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\"\
    >\n    <S:Body>\n     <ns3:spppAddResponse\n      xmlns:ns2=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n      xmlns:ns3=\"urn:ietf:params:xml:ns:sppf:soap:1\">\n      <clientTransId>txn_1479</clientTransId>\n\
    \      <serverTransId>tx_12345</serverTransId>\n      <overallResult>\n      \
    \ <code>1000</code>\n       <msg>Request Succeeded.</msg>\n      </overallResult>\n\
    \     </ns3:spppAddResponse>\n    </S:Body>\n   </S:Envelope>\n"
- title: 10.10.  Enable Peering -- SED Group Offer Accept
  contents:
  - "10.10.  Enable Peering -- SED Group Offer Accept\n   SSP1 responds to the offer\
    \ from SSP2 and agrees to have visibility to\n   SSP2 SED (e.g., Ingress Routes).\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <soapenv:Envelope\n    xmlns:soapenv=\"\
    http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:urn=\"urn:ietf:params:xml:ns:sppf:soap:1\"\
    >\n    <soapenv:Header/>\n    <soapenv:Body>\n     <urn:spppAcceptRequest>\n \
    \     <!--Optional:-->\n      <clientTransId>txn_1479</clientTransId>\n      \
    \ <!--1 or more repetitions:-->\n      <sedGrpOfferKey>\n       <sedGrpKey>\n\
    \        <rant>iana-en:222</rant>\n        <name>SED_GRP_SSP2_1</name>\n     \
    \   <type>SedGrp</type>\n       </sedGrpKey>\n       <offeredTo>iana-en:111</offeredTo>\n\
    \      </sedGrpOfferKey>\n     </urn:spppAcceptRequest>\n    </soapenv:Body>\n\
    \   </soapenv:Envelope>\n   The Registry confirms that the request has been processed\n\
    \   successfully.  From this point forward, if SSP1 looks up a Public\n   Identifier\
    \ through the query resolution server, where the Public\n   Identifier is part\
    \ of the Destination Group by way of\n   \"SED_GRP_SSP2_1\" SED association, SSP2\
    \ ingress SBE information will\n   be shared with SSP1.\n   <?xml version=\"1.0\"\
    \ encoding=\"UTF-8\"?>\n   <S:Envelope\n    xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\"\
    >\n    <S:Body>\n     <ns3:spppAcceptResponse\n      xmlns:ns2=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n      xmlns:ns3=\"urn:ietf:params:xml:ns:sppf:soap:1\">\n      <clientTransId>txn_1479</clientTransId>\n\
    \      <serverTransId>tx_12350</serverTransId>\n      <overallResult>\n      \
    \ <code>1000</code>\n       <msg>Request Succeeded.</msg>\n      </overallResult>\n\
    \     </ns3:spppAcceptResponse>\n    </S:Body>\n   </S:Envelope>\n"
- title: 10.11.  Add Egress Route
  contents:
  - "10.11.  Add Egress Route\n   SSP1 wants to prioritize all outbound traffic to\
    \ the Ingress Route\n   associated with the \"SED_GRP_SSP2_1\" SED Group record,\
    \ through\n   \"sbe1.ssp1.example.com\".\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <soapenv:Envelope\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\
    \n    xmlns:urn=\"urn:ietf:params:xml:ns:sppf:soap:1\"\n    xmlns:urn1=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <soapenv:Header/>\n\
    \    <soapenv:Body>\n     <urn:spppAddRequest>\n      <clientTransId>txn_1479</clientTransId>\n\
    \       <!--1 or more repetitions:-->\n      <obj xsi:type=\"urn1:EgrRteType\"\
    >\n       <urn1:rant>iana-en:222</urn1:rant>\n       <urn1:rar>iana-en:223</urn1:rar>\n\
    \       <urn1:egrRteName>EGR_RTE_01</urn1:egrRteName>\n       <urn1:pref>50</urn1:pref>\n\
    \       <urn1:regxRewriteRule>\n        <urn1:ere>^(.*@)(.*)$</urn1:ere>\n   \
    \     <urn1:repl>\\1\\2?route=sbe1.ssp1.example.com</urn1:repl>\n       </urn1:regxRewriteRule>\n\
    \       <urn1:ingrSedGrp xsi:type=\"urn:ObjKeyType\">\n        <rant>iana-en:222</rant>\n\
    \        <name>SED_GRP_SSP2_1</name>\n        <type>SedGrp</type>\n       </urn1:ingrSedGrp>\n\
    \      </obj>\n     </urn:spppAddRequest>\n    </soapenv:Body>\n   </soapenv:Envelope>\n\
    \   Since peering has already been established, the request to add the\n   Egress\
    \ Route has been successfully completed.\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <S:Envelope\n    xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\"\
    >\n    <S:Body>\n     <ns3:spppAddResponse\n      xmlns:ns2=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n      xmlns:ns3=\"urn:ietf:params:xml:ns:sppf:soap:1\">\n      <clientTransId>txn_1479</clientTransId>\n\
    \      <serverTransId>tx_12345</serverTransId>\n      <overallResult>\n      \
    \ <code>1000</code>\n       <msg>Request Succeeded.</msg>\n      </overallResult>\n\
    \     </ns3:spppAddResponse>\n    </S:Body>\n   </S:Envelope>\n"
- title: 10.12.  Remove Peering -- SED Group Offer Reject
  contents:
  - "10.12.  Remove Peering -- SED Group Offer Reject\n   Earlier, SSP1 had accepted\
    \ having visibility to SSP2 SED.  SSP1 now\n   decides to no longer maintain this\
    \ visibility; hence, it rejects the\n   SED Group Offer.\n   <?xml version=\"\
    1.0\" encoding=\"UTF-8\"?>\n   <soapenv:Envelope\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\
    \n    xmlns:urn=\"urn:ietf:params:xml:ns:sppf:soap:1\">\n    <soapenv:Header/>\n\
    \    <soapenv:Body>\n     <urn:spppRejectRequest>\n      <!--Optional:-->\n  \
    \    <clientTransId>txn_1479</clientTransId>\n       <!--1 or more repetitions:-->\n\
    \      <sedGrpOfferKey>\n       <sedGrpKey>\n        <rant>iana-en:222</rant>\n\
    \        <name>SED_GRP_SSP2_1</name>\n        <type>SedGrp</type>\n       </sedGrpKey>\n\
    \       <offeredTo>iana-en:111</offeredTo>\n      </sedGrpOfferKey>\n     </urn:spppRejectRequest>\n\
    \    </soapenv:Body>\n   </soapenv:Envelope>\n   The Registry confirms that the\
    \ request has been processed\n   successfully.  From this point forward, if SSP1\
    \ looks up a Public\n   Identifier through the query resolution server, where\
    \ the Public\n   Identifier is part of the Destination Group by way of\n   \"\
    SED_GRP_SSP2_1\" SED association, SSP2 ingress SBE information will\n   not be\
    \ shared with SSP1; hence, an SSP2 ingress SBE will not be\n   returned in the\
    \ query response.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <S:Envelope\n\
    \    xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <S:Body>\n  \
    \   <ns3:spppRejectResponse\n      xmlns:ns2=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n      xmlns:ns3=\"urn:ietf:params:xml:ns:sppf:soap:1\">\n      <clientTransId>txn_1479</clientTransId>\n\
    \      <serverTransId>tx_12350</serverTransId>\n      <overallResult>\n      \
    \ <code>1000</code>\n       <msg>Request Succeeded.</msg>\n      </overallResult>\n\
    \     </ns3:spppRejectResponse>\n    </S:Body>\n   </S:Envelope>\n"
- title: 10.13.  Get Destination Group
  contents:
  - "10.13.  Get Destination Group\n   SSP2 uses the spppGetRequest operation to tally\
    \ the last provisioned\n   record for Destination Group DEST_GRP_SSP2_1.\n   <?xml\
    \ version=\"1.0\" encoding=\"UTF-8\"?>\n   <soapenv:Envelope\n    xmlns:soapenv=\"\
    http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:urn=\"urn:ietf:params:xml:ns:sppf:soap:1\"\
    \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <soapenv:Header/>\n\
    \    <soapenv:Body>\n     <urn:spppGetRequest>\n      <!--1 or more repetitions:-->\n\
    \      <objKey xsi:type=\"urn:ObjKeyType\">\n       <rant>iana-en:222</rant>\n\
    \       <name>DEST_GRP_SSP2_1</name>\n       <type>DestGrp</type>\n      </objKey>\n\
    \     </urn:spppGetRequest>\n    </soapenv:Body>\n   </soapenv:Envelope>\n   The\
    \ Registry completes the request successfully and returns a\n   favorable response.\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <S:Envelope\n    xmlns:S=\"\
    http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    >\n    <S:Body>\n     <ns3:spppGetResponse\n      xmlns:ns2=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n      xmlns:ns3=\"urn:ietf:params:xml:ns:sppf:soap:1\">\n      <overallResult>\n\
    \       <code>1000</code>\n       <msg>success</msg>\n      </overallResult>\n\
    \      <resultObj xsi:type=\"ns2:DestGrpType\">\n       <ns2:rant>iana-en:222</ns2:rant>\n\
    \       <ns2:rar>iana-en:223</ns2:rar>\n       <ns2:cDate>2012-10-22T09:30:10Z</ns2:cDate>\n\
    \       <ns2:dgName>DEST_GRP_SSP2_1</ns2:dgName>\n      </resultObj>\n     </ns3:spppGetResponse>\n\
    \    </S:Body>\n   </S:Envelope>\n"
- title: 10.14.  Get Public Identifier
  contents:
  - "10.14.  Get Public Identifier\n   SSP2 obtains the last provisioned record associated\
    \ with a given TN.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <soapenv:Envelope\n\
    \    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:urn=\"\
    urn:ietf:params:xml:ns:sppf:soap:1\"\n    xmlns:urn1=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <soapenv:Header/>\n\
    \    <soapenv:Body>\n     <urn:spppGetRequest>\n      <!--1 or more repetitions:-->\n\
    \      <objKey xsi:type=\"urn:PubIdKeyType\">\n       <rant>iana-en:222</rant>\n\
    \       <number>\n        <urn1:value>+12025556666</urn1:value>\n        <urn1:type>TN</urn1:type>\n\
    \       </number>\n      </objKey>\n     </urn:spppGetRequest>\n    </soapenv:Body>\n\
    \   </soapenv:Envelope>\n   The Registry completes the request successfully and\
    \ returns a\n   favorable response.\n   <S:Envelope\n    xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\"\
    \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <S:Body>\n\
    \     <ns3:spppGetResponse\n      xmlns:ns2=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n      xmlns:ns3=\"urn:ietf:params:xml:ns:sppf:soap:1\">\n      <overallResult>\n\
    \       <code>1000</code>\n       <msg>success</msg>\n      </overallResult>\n\
    \      <resultObj xsi:type=\"ns2:TNType\">\n       <ns2:rant>iana-en:222</ns2:rant>\n\
    \       <ns2:rar>iana-en:223</ns2:rar>\n       <ns2:cDate>2012-10-22T09:30:10Z</ns2:cDate>\n\
    \       <ns2:dgName>DEST_GRP_SSP2_1</ns2:dgName>\n       <ns2:tn>+12025556666</ns2:tn>\n\
    \       <ns2:corInfo>\n        <ns2:corClaim>true</ns2:corClaim>\n        <ns2:cor>true</ns2:cor>\n\
    \        <ns2:corDate>2010-05-30T09:30:10Z</ns2:corDate>\n       </ns2:corInfo>\n\
    \      </resultObj>\n     </ns3:spppGetResponse>\n    </S:Body>\n   </S:Envelope>\n"
- title: 10.15.  Get SED Group Request
  contents:
  - "10.15.  Get SED Group Request\n   SSP2 obtains the last provisioned record for\
    \ the SED Group\n   SED_GRP_SSP2_1.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <soapenv:Envelope\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\
    \n    xmlns:urn=\"urn:ietf:params:xml:ns:sppf:soap:1\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    >\n    <soapenv:Header/>\n    <soapenv:Body>\n     <urn:spppGetRequest>\n    \
    \  <!--1 or more repetitions:-->\n      <objKey xsi:type=\"urn:ObjKeyType\">\n\
    \       <rant>iana-en:222</rant>\n       <name>SED_GRP_SSP2_1</name>\n       <type>SedGrp</type>\n\
    \      </objKey>\n     </urn:spppGetRequest>\n    </soapenv:Body>\n   </soapenv:Envelope>\n\
    \   The Registry completes the request successfully and returns a\n   favorable\
    \ response.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <S:Envelope\n \
    \   xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    >\n    <S:Body>\n     <ns3:spppGetResponse\n      xmlns:ns2=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n      xmlns:ns3=\"urn:ietf:params:xml:ns:sppf:soap:1\">\n      <overallResult>\n\
    \       <code>1000</code>\n       <msg>success</msg>\n      </overallResult>\n\
    \      <resultObj xsi:type=\"ns2:SedGrpType\">\n       <ns2:rant>iana-en:222</ns2:rant>\n\
    \       <ns2:rar>iana-en:223</ns2:rar>\n       <ns2:cDate>2012-10-22T09:30:10Z</ns2:cDate>\n\
    \       <ns2:sedGrpName>SED_GRP_SSP2_1</ns2:sedGrpName>\n       <ns2:sedRecRef>\n\
    \        <ns2:sedKey xsi:type=\"ns3:ObjKeyType\">\n         <rant>iana-en:222</rant>\n\
    \         <name>SED_SSP2_SBE2</name>\n         <type>SedRec</type>\n        </ns2:sedKey>\n\
    \        <ns2:priority>100</ns2:priority>\n       </ns2:sedRecRef>\n       <ns2:sedRecRef>\n\
    \        <ns2:sedKey xsi:type=\"ns3:ObjKeyType\">\n         <rant>iana-en:222</rant>\n\
    \         <name>SED_SSP2_SBE4</name>\n         <type>SedRec</type>\n        </ns2:sedKey>\n\
    \        <ns2:priority>101</ns2:priority>\n       </ns2:sedRecRef>\n       <ns2:dgName>DEST_GRP_SSP2_1</ns2:dgName>\n\
    \       <ns2:isInSvc>true</ns2:isInSvc>\n       <ns2:priority>10</ns2:priority>\n\
    \      </resultObj>\n     </ns3:spppGetResponse>\n    </S:Body>\n   </S:Envelope>\n"
- title: 10.16.  Get SED Group Offers Request
  contents:
  - "10.16.  Get SED Group Offers Request\n   SSP2 fetches the last provisioned SED\
    \ Group Offer to the <peeringOrg>\n   SSP1.\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <soapenv:Envelope\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\
    \n    xmlns:urn=\"urn:ietf:params:xml:ns:sppf:soap:1\">\n    <soapenv:Header/>\n\
    \    <soapenv:Body>\n     <urn:getSedGrpOffersRequest>\n      <offeredTo>iana-en:111</offeredTo>\n\
    \     </urn:getSedGrpOffersRequest>\n    </soapenv:Body>\n   </soapenv:Envelope>\n\
    \   The Registry processes the request successfully and returns a\n   favorable\
    \ response.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <S:Envelope\n \
    \   xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    >\n    <S:Body>\n     <ns3:spppGetResponse\n      xmlns:ns2=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n      xmlns:ns3=\"urn:ietf:params:xml:ns:sppf:soap:1\">\n      <overallResult>\n\
    \       <code>1000</code>\n       <msg>success</msg>\n      </overallResult>\n\
    \      <resultObj xsi:type=\"ns2:SedGrpOfferType\">\n       <ns2:rant>iana-en:222</ns2:rant>\n\
    \       <ns2:rar>iana-en:223</ns2:rar>\n       <ns2:cDate>2012-10-22T09:30:10Z</ns2:cDate>\n\
    \       <ns2:sedGrpOfferKey\n        xsi:type=\"ns3:SedGrpOfferKeyType\">\n  \
    \      <sedGrpKey>\n         <rant>iana-en:222</rant>\n         <name>SED_GRP_SSP2_1</name>\n\
    \         <type>SedGrp</type>\n        </sedGrpKey>\n        <offeredTo>iana-en:111</offeredTo>\n\
    \       </ns2:sedGrpOfferKey>\n       <ns2:status>offered</ns2:status>\n     \
    \  <ns2:offerDateTime>\n        2006-05-04T18:13:51.0Z\n       </ns2:offerDateTime>\n\
    \      </resultObj>\n     </ns3:spppGetResponse>\n    </S:Body>\n   </S:Envelope>\n"
- title: 10.17.  Get Egress Route
  contents:
  - "10.17.  Get Egress Route\n   SSP1 wants to verify the last provisioned record\
    \ for the Egress Route\n   called EGR_RTE_01.\n   <?xml version=\"1.0\" encoding=\"\
    UTF-8\"?>\n   <soapenv:Envelope\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\
    \n    xmlns:urn=\"urn:ietf:params:xml:ns:sppf:soap:1\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    >\n    <soapenv:Header/>\n    <soapenv:Body>\n     <urn:spppGetRequest>\n    \
    \  <!--1 or more repetitions:-->\n      <objKey xsi:type=\"urn:ObjKeyType\">\n\
    \       <rant>iana-en:111</rant>\n       <name>EGR_RTE_01</name>\n       <type>EgrRte</type>\n\
    \      </objKey>\n     </urn:spppGetRequest>\n    </soapenv:Body>\n   </soapenv:Envelope>\n\
    \   The Registry completes the request successfully and returns a\n   favorable\
    \ response.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <S:Envelope\n \
    \   xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    >\n    <S:Body>\n     <ns3:spppGetResponse\n      xmlns:ns2=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n      xmlns:ns3=\"urn:ietf:params:xml:ns:sppf:soap:1\">\n      <overallResult>\n\
    \       <code>1000</code>\n       <msg>success</msg>\n      </overallResult>\n\
    \      <resultObj xsi:type=\"ns2:EgrRteType\">\n       <ns2:rant>iana-en:222</ns2:rant>\n\
    \       <ns2:rar>iana-en:223</ns2:rar>\n       <ns2:cDate>2012-10-22T09:30:10Z</ns2:cDate>\n\
    \       <ns2:egrRteName>EGR_RTE_01</ns2:egrRteName>\n       <ns2:pref>50</ns2:pref>\n\
    \       <ns2:regxRewriteRule>\n        <ns2:ere>^(.*)$</ns2:ere>\n        <ns2:repl>sip:\\\
    1@sbe1.ssp1.example.com</ns2:repl>\n       </ns2:regxRewriteRule>\n       <ns2:ingrSedGrp\
    \ xsi:type=\"ns3:ObjKeyType\">\n        <rant>iana-en:222</rant>\n        <name>SED_GRP_SSP2_1</name>\n\
    \        <type>SedRec</type>\n       </ns2:ingrSedGrp>\n      </resultObj>\n \
    \    </ns3:spppGetResponse>\n    </S:Body>\n   </S:Envelope>\n"
- title: 10.18.  Delete Destination Group
  contents:
  - "10.18.  Delete Destination Group\n   SSP2 initiates a request to delete the Destination\
    \ Group\n   DEST_GRP_SSP2_1.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\
    \   <soapenv:Envelope\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\
    \n    xmlns:urn=\"urn:ietf:params:xml:ns:sppf:soap:1\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    >\n    <soapenv:Header/>\n    <soapenv:Body>\n     <urn:spppDelRequest>\n    \
    \   <!--1 or more repetitions:-->\n      <objKey xsi:type=\"urn:ObjKeyType\">\n\
    \       <rant>iana-en:222</rant>\n       <name>DEST_GRP_SSP2_1</name>\n      \
    \ <type>DestGrp</type>\n      </objKey>\n     </urn:spppDelRequest>\n    </soapenv:Body>\n\
    \   </soapenv:Envelope>\n   The Registry completes the request successfully and\
    \ returns a\n   favorable response.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <S:Envelope\n    xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\"\
    >\n    <S:Body>\n     <ns3:spppDelResponse\n      xmlns:ns2=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n      xmlns:ns3=\"urn:ietf:params:xml:ns:sppf:soap:1\">\n      <serverTransId>tx_12354</serverTransId>\n\
    \      <overallResult>\n       <code>1000</code>\n       <msg>Request Succeeded.</msg>\n\
    \      </overallResult>\n     </ns3:spppDelResponse>\n    </S:Body>\n   </S:Envelope>\n"
- title: 10.19.  Delete Public Identifier
  contents:
  - "10.19.  Delete Public Identifier\n   SSP2 chooses to deactivate the TN and remove\
    \ it from the Registry.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <soapenv:Envelope\n\
    \    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:urn=\"\
    urn:ietf:params:xml:ns:sppf:soap:1\"\n    xmlns:urn1=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <soapenv:Header/>\n\
    \    <soapenv:Body>\n     <urn:spppDelRequest>\n      <!--1 or more repetitions:-->\n\
    \      <objKey xsi:type=\"urn:PubIdKeyType\">\n       <rant>iana-en:222</rant>\n\
    \       <number>\n        <urn1:value>+12025556666</urn1:value>\n        <urn1:type>TN</urn1:type>\n\
    \       </number>\n      </objKey>\n     </urn:spppDelRequest>\n    </soapenv:Body>\n\
    \   </soapenv:Envelope>\n   The Registry completes the request successfully and\
    \ returns a\n   favorable response.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <S:Envelope\n    xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\"\
    >\n    <S:Body>\n     <ns3:spppDelResponse\n      xmlns:ns2=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n      xmlns:ns3=\"urn:ietf:params:xml:ns:sppf:soap:1\">\n      <serverTransId>tx_12354</serverTransId>\n\
    \      <overallResult>\n       <code>1000</code>\n       <msg>Request Succeeded.</msg>\n\
    \      </overallResult>\n     </ns3:spppDelResponse>\n    </S:Body>\n   </S:Envelope>\n"
- title: 10.20.  Delete SED Group Request
  contents:
  - "10.20.  Delete SED Group Request\n   SSP2 removes the SED Group called SED_GRP_SSP2_1.\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <soapenv:Envelope\n    xmlns:soapenv=\"\
    http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:urn=\"urn:ietf:params:xml:ns:sppf:soap:1\"\
    \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <soapenv:Header/>\n\
    \    <soapenv:Body>\n     <urn:spppDelRequest>\n       <!--1 or more repetitions:-->\n\
    \      <objKey xsi:type=\"urn:ObjKeyType\">\n       <rant>iana-en:222</rant>\n\
    \       <name>SED_GRP_SSP2_1</name>\n       <type>SedGrp</type>\n      </objKey>\n\
    \     </urn:spppDelRequest>\n    </soapenv:Body>\n   </soapenv:Envelope>\n   The\
    \ Registry completes the request successfully and returns a\n   favorable response.\n\
    \   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <S:Envelope\n    xmlns:S=\"\
    http://schemas.xmlsoap.org/soap/envelope/\">\n    <S:Body>\n     <ns3:spppDelResponse\n\
    \      xmlns:ns2=\"urn:ietf:params:xml:ns:sppf:base:1\"\n      xmlns:ns3=\"urn:ietf:params:xml:ns:sppf:soap:1\"\
    >\n      <serverTransId>tx_12354</serverTransId>\n      <overallResult>\n    \
    \   <code>1000</code>\n       <msg>Request Succeeded.</msg>\n      </overallResult>\n\
    \     </ns3:spppDelResponse>\n    </S:Body>\n   </S:Envelope>\n"
- title: 10.21.  Delete SED Group Offers Request
  contents:
  - "10.21.  Delete SED Group Offers Request\n   SSP2 no longer wants to share SED\
    \ Group SED_GRP_SSP2_1 with SSP1.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <soapenv:Envelope\n    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\
    \n    xmlns:urn=\"urn:ietf:params:xml:ns:sppf:soap:1\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    >\n    <soapenv:Header/>\n    <soapenv:Body>\n     <urn:spppDelRequest>\n    \
    \   <!--1 or more repetitions:-->\n      <objKey xsi:type=\"urn:SedGrpOfferKeyType\"\
    >\n       <sedGrpKey>\n        <rant>iana-en:222</rant>\n        <name>SED_GRP_SSP2_1</name>\n\
    \        <type>SedGrp</type>\n       </sedGrpKey>\n       <offeredTo>iana-en:111</offeredTo>\n\
    \      </objKey>\n     </urn:spppDelRequest>\n    </soapenv:Body>\n   </soapenv:Envelope>\n\
    \   The Registry completes the request successfully and returns a\n   favorable\
    \ response.  Restoring this resource sharing will require a\n   new SED Group\
    \ Offer from SSP2 to SSP1 followed by a successful SED\n   Group Accept request\
    \ from SSP1.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <S:Envelope\n\
    \    xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <S:Body>\n  \
    \   <ns3:spppDelResponse\n      xmlns:ns2=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n      xmlns:ns3=\"urn:ietf:params:xml:ns:sppf:soap:1\">\n      <serverTransId>tx_12354</serverTransId>\n\
    \      <overallResult>\n       <code>1000</code>\n       <msg>Request Succeeded.</msg>\n\
    \      </overallResult>\n     </ns3:spppDelResponse>\n    </S:Body>\n   </S:Envelope>\n"
- title: 10.22.  Delete Egress Route
  contents:
  - "10.22.  Delete Egress Route\n   SSP1 decides to remove the Egress Route with\
    \ the label EGR_RTE_01.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <soapenv:Envelope\n\
    \    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:urn=\"\
    urn:ietf:params:xml:ns:sppf:soap:1\"\n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\
    >\n    <soapenv:Header/>\n    <soapenv:Body>\n     <urn:spppDelRequest>\n    \
    \  <!--1 or more repetitions:-->\n      <objKey xsi:type=\"urn:ObjKeyType\">\n\
    \       <rant>iana-en:111</rant>\n       <name>EGR_RTE_01</name>\n       <type>EgrRte</type>\n\
    \      </objKey>\n     </urn:spppDelRequest>\n    </soapenv:Body>\n   </soapenv:Envelope>\n\
    \   The Registry completes the request successfully and returns a\n   favorable\
    \ response.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <S:Envelope\n \
    \   xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\">\n    <S:Body>\n   \
    \  <ns3:spppDelResponse\n      xmlns:ns2=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n      xmlns:ns3=\"urn:ietf:params:xml:ns:sppf:soap:1\">\n      <serverTransId>tx_12354</serverTransId>\n\
    \      <overallResult>\n       <code>1000</code>\n       <msg>Request Succeeded.</msg>\n\
    \      </overallResult>\n     </ns3:spppDelResponse>\n    </S:Body>\n   </S:Envelope>\n"
- title: 10.23.  Batch Request
  contents:
  - "10.23.  Batch Request\n   Following is an example of how some of the operations\
    \ mentioned in\n   previous sections MAY be performed by an SPPF client as a batch\
    \ in\n   one single SPPP over SOAP request.\n   In the sample request below, SSP1\
    \ wants to accept a SED Group Offer\n   from SSP3, add a Destination Group, add\
    \ a Naming Authority Pointer\n   (NAPTR) SED Record, add a SED Group, add a SED\
    \ Group Offer, delete a\n   previously provisioned TN type Public Identifier,\
    \ delete a previously\n   provisioned SED Group, and reject a SED Group Offer\
    \ from SSP4.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n   <soapenv:Envelope\n\
    \    xmlns:soapenv=\"http://schemas.xmlsoap.org/soap/envelope/\"\n    xmlns:urn=\"\
    urn:ietf:params:xml:ns:sppf:soap:1\"\n    xmlns:urn1=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n    xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n    <soapenv:Header/>\n\
    \    <soapenv:Body>\n     <urn:spppBatchRequest>\n      <clientTransId>txn_1467</clientTransId>\n\
    \      <minorVer>1</minorVer>\n      <acceptSedGrpOffer>\n       <sedGrpKey>\n\
    \        <rant>iana-en:225</rant>\n        <name>SED_SSP3_SBE1_Offered</name>\n\
    \        <type>SedGrp</type>\n       </sedGrpKey>\n       <offeredTo>iana-en:222</offeredTo>\n\
    \      </acceptSedGrpOffer>\n      <addObj xsi:type=\"urn1:DestGrpType\">\n  \
    \     <urn1:rant>iana-en:222</urn1:rant>\n       <urn1:rar>iana-en:223</urn1:rar>\n\
    \       <urn1:dgName>DEST_GRP_SSP2_1</urn1:dgName>\n      </addObj>\n      <addObj\
    \ xsi:type=\"urn1:NAPTRType\">\n       <urn1:rant>iana-en:222</urn1:rant>\n  \
    \     <urn1:rar>iana-en:223</urn1:rar>\n       <urn1:sedName>SED_SSP2_SBE2</urn1:sedName>\n\
    \       <urn1:order>10</urn1:order>\n       <urn1:flags>u</urn1:flags>\n     \
    \  <urn1:svcs>E2U+sip</urn1:svcs>\n       <urn1:regx>\n        <urn1:ere>^(.*)$</urn1:ere>\n\
    \        <urn1:repl>sip:\\1@sbe2.ssp2.example.com</urn1:repl>\n       </urn1:regx>\n\
    \      </addObj>\n      <addObj xsi:type=\"urn1:SedGrpType\">\n       <urn1:rant>iana-en:222</urn1:rant>\n\
    \       <urn1:rar>iana-en:223</urn1:rar>\n       <urn1:sedGrpName>SED_GRP_SSP2_1</urn1:sedGrpName>\n\
    \       <urn1:sedRecRef>\n        <urn1:sedKey xsi:type=\"urn:ObjKeyType\">\n\
    \         <rant>iana-en:222</rant>\n         <name>SED_SSP2_SBE2</name>\n    \
    \     <type>SedRec</type>\n        </urn1:sedKey>\n       <urn1:priority>100</urn1:priority>\n\
    \       </urn1:sedRecRef>\n        <urn1:dgName>DEST_GRP_SSP2_1</urn1:dgName>\n\
    \        <urn1:isInSvc>true</urn1:isInSvc>\n        <urn1:priority>10</urn1:priority>\n\
    \      </addObj>\n      <addObj xsi:type=\"urn1:SedGrpOfferType\">\n       <urn1:rant>iana-en:222</urn1:rant>\n\
    \       <urn1:rar>iana-en:223</urn1:rar>\n       <urn1:sedGrpOfferKey xsi:type=\"\
    urn:SedGrpOfferKeyType\">\n        <sedGrpKey xsi:type=\"urn:ObjKeyType\">\n \
    \        <rant>iana-en:222</rant>\n         <name>SED_GRP_SSP2_1</name>\n    \
    \     <type>SedGrp</type>\n        </sedGrpKey>\n        <offeredTo>iana-en:111</offeredTo>\n\
    \       </urn1:sedGrpOfferKey>\n       <urn1:status>offered</urn1:status>\n  \
    \     <urn1:offerDateTime>\n        2006-05-04T18:13:51.0Z\n       </urn1:offerDateTime>\n\
    \      </addObj>\n      <delObj xsi:type=\"urn:PubIdKeyType\">\n       <rant>iana-en:222</rant>\n\
    \       <number>\n        <urn1:value>+12025556666</urn1:value>\n        <urn1:type>TN</urn1:type>\n\
    \       </number>\n      </delObj>\n      <delObj xsi:type=\"urn:ObjKeyType\"\
    >\n       <rant>iana-en:222</rant>\n       <name>SED_GRP_SSP2_Previous</name>\n\
    \       <type>SedGrp</type>\n      </delObj>\n      <rejectSedGrpOffer>\n    \
    \   <sedGrpKey>\n        <rant>iana-en:226</rant>\n        <name>SED_SSP4_SBE1_Offered</name>\n\
    \        <type>SedGrp</type>\n       </sedGrpKey>\n       <offeredTo>iana-en:222</offeredTo>\n\
    \      </rejectSedGrpOffer>\n     </urn:spppBatchRequest>\n    </soapenv:Body>\n\
    \   </soapenv:Envelope>\n   The Registry completes the request successfully and\
    \ returns a\n   favorable response.\n   <?xml version=\"1.0\" encoding=\"UTF-8\"\
    ?>\n   <S:Envelope\n    xmlns:S=\"http://schemas.xmlsoap.org/soap/envelope/\"\
    >\n    <S:Body>\n     <ns3:spppBatchResponse\n      xmlns:ns2=\"urn:ietf:params:xml:ns:sppf:base:1\"\
    \n      xmlns:ns3=\"urn:ietf:params:xml:ns:sppf:soap:1\">\n      <serverTransId>tx_12354</serverTransId>\n\
    \      <overallResult>\n       <code>1000</code>\n       <msg>Request Succeeded.</msg>\n\
    \      </overallResult>\n     </ns3:spppBatchResponse>\n    </S:Body>\n   </S:Envelope>\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   The base security considerations of SPPP outlined\
    \ in Section 9 of\n   [RFC7877] also apply to SPPP over SOAP implementations.\n\
    \   Additionally, the following must be considered:\n   SPPP over SOAP is used\
    \ to query and update session peering data and\n   addresses, so the ability to\
    \ access this protocol should be limited\n   to users and systems that are authorized\
    \ to query and update this\n   data.  Because this data is sent in both directions,\
    \ it may not be\n   sufficient for just the client or user to be authenticated\
    \ with the\n   server.  The identity of the server should also be authenticated\
    \ by\n   the client, which is often accomplished using the TLS certificate\n \
    \  exchange and validation described in [RFC2818].\n"
- title: 11.1.  Vulnerabilities
  contents:
  - "11.1.  Vulnerabilities\n   Section 5 describes the use of HTTP and TLS as the\
    \ underlying\n   substrate protocols for SPPP over SOAP.  These underlying protocols\n\
    \   may have various vulnerabilities, and these may be inherited by SPPP\n   over\
    \ SOAP.  SPPP over SOAP itself may have vulnerabilities because an\n   authorization\
    \ model is not explicitly specified in this document.\n   During a TLS handshake,\
    \ TLS servers can optionally request a\n   certificate from a TLS client; that\
    \ option is not a requirement for\n   this protocol.  This presents a denial-of-service\
    \ risk in which\n   unauthenticated clients can consume server CPU resources by\
    \ creating\n   TLS sessions.  The risk is increased if the server supports client-\n\
    \   initiated renegotiation.  This risk can be mitigated by disabling\n   client-initiated\
    \ renegotiation on the server and by ensuring that\n   other means (such as firewall\
    \ access control lists) are used to\n   restrict unauthenticated client access\
    \ to servers.\n   In conjunction with the above, it is important that SPPP over\
    \ SOAP\n   implementations implement an authorization model that considers the\n\
    \   source of each query or update request and determines whether it is\n   reasonable\
    \ to authorize that source to perform that specific query or\n   update.\n"
- title: 12.  IANA Considerations
  contents:
  - "12.  IANA Considerations\n   This document uses URNs to describe XML Namespaces\
    \ and XML Schemas.\n   According to [RFC3688], IANA has performed the following\
    \ URN\n   assignment:\n      URN: urn:ietf:params:xml:ns:sppf:soap:1\n      Registrant\
    \ Contact: IESG\n      XML: See Section 9 of [RFC7878]\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119,\n  \
    \            DOI 10.17487/RFC2119, March 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n\
    \   [RFC3688]  Mealling, M., \"The IETF XML Registry\", BCP 81, RFC 3688,\n  \
    \            DOI 10.17487/RFC3688, January 2004,\n              <http://www.rfc-editor.org/info/rfc3688>.\n\
    \   [RFC5246]  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n  \
    \            (TLS) Protocol Version 1.2\", RFC 5246,\n              DOI 10.17487/RFC5246,\
    \ August 2008,\n              <http://www.rfc-editor.org/info/rfc5246>.\n   [RFC7230]\
    \  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n             \
    \ Protocol (HTTP/1.1): Message Syntax and Routing\",\n              RFC 7230,\
    \ DOI 10.17487/RFC7230, June 2014,\n              <http://www.rfc-editor.org/info/rfc7230>.\n\
    \   [RFC7231]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Semantics and Content\", RFC 7231,\n      \
    \        DOI 10.17487/RFC7231, June 2014,\n              <http://www.rfc-editor.org/info/rfc7231>.\n\
    \   [RFC7235]  Fielding, R., Ed. and J. Reschke, Ed., \"Hypertext Transfer\n \
    \             Protocol (HTTP/1.1): Authentication\", RFC 7235,\n             \
    \ DOI 10.17487/RFC7235, June 2014,\n              <http://www.rfc-editor.org/info/rfc7235>.\n\
    \   [RFC7525]  Sheffer, Y., Holz, R., and P. Saint-Andre,\n              \"Recommendations\
    \ for Secure Use of Transport Layer\n              Security (TLS) and Datagram\
    \ Transport Layer Security\n              (DTLS)\", BCP 195, RFC 7525, DOI 10.17487/RFC7525,\
    \ May\n              2015, <http://www.rfc-editor.org/info/rfc7525>.\n   [RFC7877]\
    \  Cartwright, K., Bhatia, V., Ali, S., and D. Schwartz,\n              \"Session\
    \ Peering Provisioning Framework (SPPF)\", RFC 7877,\n              DOI 10.17487/RFC7877,\
    \ August 2016,\n              <http://www.rfc-editor.org/info/rfc7877>.\n   [SOAPREF]\
    \  Gudgin, M., Hadley, M., Moreau, J., and H. Nielsen, \"SOAP\n              Version\
    \ 1.2 Part 1: Messaging Framework (Second Edition)\",\n              W3C Recommendation\
    \ REC-SOAP12-part1-20070427, April 2007,\n              <http://www.w3.org/TR/soap12-part1/>.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [RFC2818]  Rescorla, E., \"HTTP Over TLS\"\
    , RFC 2818,\n              DOI 10.17487/RFC2818, May 2000,\n              <http://www.rfc-editor.org/info/rfc2818>.\n\
    \   [RFC5321]  Klensin, J., \"Simple Mail Transfer Protocol\", RFC 5321,\n   \
    \           DOI 10.17487/RFC5321, October 2008,\n              <http://www.rfc-editor.org/info/rfc5321>.\n\
    \   [W3C.REC-xml-20081126]\n              Sperberg-McQueen, C., Yergeau, F., Bray,\
    \ T., Maler, E.,\n              and J. Paoli, \"Extensible Markup Language (XML)\
    \ 1.0 (Fifth\n              Edition)\", W3C Recommendation REC-xml-20081126, November\n\
    \              2008, <http://www.w3.org/TR/2008/REC-xml-20081126>.\n   [WSDLREF]\
    \  Christensen, E., Curbera, F., Meredith, G., and S.\n              Weerawarana,\
    \ \"Web Services Description Language (WSDL)\n              1.1\", W3C Note NOTE-wsdl-20010315,\
    \ March 2001,\n              <http://www.w3.org/TR/2001/NOTE-wsdl-20010315>.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   This document is a result of various discussions held with\
    \ the IETF\n   DRINKS working group, specifically the protocol design team, with\n\
    \   contributions from the following individuals, in alphabetical order:\n   Syed\
    \ Ali, Vikas Bhatia, Kenneth Cartwright, Sumanth Channabasappa,\n   Lisa Dusseault,\
    \ Deborah A.  Guyton, Scott Hollenbeck, Otmar Lendl,\n   Manjul Maharishi, Mickael\
    \ Marrache, Alexander Mayrhofer, Samuel\n   Melloul, Jean-Francois Mule, Peter\
    \ Saint-Andre, David Schwartz, and\n   Richard Shockey.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Kenneth Cartwright\n   TNS\n   10740 Parkridge Boulevard\n\
    \   Reston, VA  20191\n   United States\n   Email: kcartwright@tnsi.com\n   Vikas\
    \ Bhatia\n   TNS\n   10740 Parkridge Boulevard\n   Reston, VA  20191\n   United\
    \ States\n   Email: vbhatia@tnsi.com\n   Jean-Francois Mule\n   Apple Inc.\n \
    \  1 Infinite Loop\n   Cupertino, CA  95014\n   United States\n   Email: jfmule@apple.com\n\
    \   Alexander Mayrhofer\n   nic.at GmbH\n   Karlsplatz 1/2/9\n   Wien  A-1010\n\
    \   Austria\n   Email: alexander.mayrhofer@nic.at\n"
