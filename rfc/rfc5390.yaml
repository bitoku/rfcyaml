- title: __initial_text__
  contents:
  - "             Requirements for Management of Overload in the\n               \
    \       Session Initiation Protocol\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2008 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ (http://trustee.ietf.org/\n   license-info) in effect on the date of publication\
    \ of this document.\n   Please review these documents carefully, as they describe\
    \ your rights\n   and restrictions with respect to this document.\n"
- title: Abstract
  contents:
  - "Abstract\n   Overload occurs in Session Initiation Protocol (SIP) networks when\n\
    \   proxies and user agents have insufficient resources to complete the\n   processing\
    \ of a request.  SIP provides limited support for overload\n   handling through\
    \ its 503 response code, which tells an upstream\n   element that it is overloaded.\
    \  However, numerous problems have been\n   identified with this mechanism.  This\
    \ document summarizes the\n   problems with the existing 503 mechanism, and provides\
    \ some\n   requirements for a solution.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Causes of Overload ..............................................2\n  \
    \ 3. Terminology .....................................................4\n   4.\
    \ Current SIP Mechanisms ..........................................4\n   5. Problems\
    \ with the Mechanism .....................................5\n      5.1. Load Amplification\
    \ .........................................5\n      5.2. Underutilization ...........................................9\n\
    \      5.3. The Off/On Retry-After Problem .............................9\n  \
    \    5.4. Ambiguous Usages ..........................................10\n   6.\
    \ Solution Requirements ..........................................10\n   7. Security\
    \ Considerations ........................................13\n   8. Acknowledgements\
    \ ...............................................13\n   9. References .....................................................14\n\
    \      9.1. Normative Reference .......................................14\n  \
    \    9.2. Informative References ....................................14\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Overload occurs in Session Initiation Protocol (SIP) [RFC3261]\n\
    \   networks when proxies and user agents have insufficient resources to\n   complete\
    \ the processing of a request or a response.  SIP provides\n   limited support\
    \ for overload handling through its 503 response code.\n   This code allows a\
    \ server to tell an upstream element that it is\n   overloaded.  However, numerous\
    \ problems have been identified with\n   this mechanism.\n   This document describes\
    \ the general problem of SIP overload and\n   reviews the current SIP mechanisms\
    \ for dealing with overload.  It\n   then explains some of the problems with these\
    \ mechanisms.  Finally,\n   the document provides a set of requirements for fixing\
    \ these\n   problems.\n"
- title: 2.  Causes of Overload
  contents:
  - "2.  Causes of Overload\n   Overload occurs when an element, such as a SIP user\
    \ agent or proxy,\n   has insufficient resources to successfully process all of\
    \ the traffic\n   it is receiving.  Resources include all of the capabilities\
    \ of the\n   element used to process a request, including CPU processing, memory,\n\
    \   I/O, or disk resources.  It can also include external resources such\n   as\
    \ a database or DNS server, in which case the CPU, processing,\n   memory, I/O,\
    \ and disk resources of those servers are effectively part\n   of the logical\
    \ element processing the request.  Overload can occur\n   for many reasons, including:\n\
    \   Poor Capacity Planning:  SIP networks need to be designed with\n      sufficient\
    \ numbers of servers, hardware, disks, and so on, in\n      order to meet the\
    \ needs of the subscribers they are expected to\n      serve.  Capacity planning\
    \ is the process of determining these\n      needs.  It is based on the number\
    \ of expected subscribers and the\n      types of flows they are expected to use.\
    \  If this work is not done\n      properly, the network may have insufficient\
    \ capacity to handle\n      predictable usages, including regular usages and predictably\
    \ high\n      ones (such as high voice calling volumes on Mother's Day).\n   Dependency\
    \ Failures:  A SIP element can become overloaded because a\n      resource on\
    \ which it is dependent has failed or become overloaded,\n      greatly reducing\
    \ the logical capacity of the element.  In these\n      cases, even minimal traffic\
    \ might cause the server to go into\n      overload.  Examples of such dependency\
    \ overloads include DNS\n      servers, databases, disks, and network interfaces.\n\
    \   Component Failures:  A SIP element can become overloaded when it is a\n  \
    \    member of a cluster of servers that each share the load of\n      traffic,\
    \ and one or more of the other members in the cluster fail.\n      In this case,\
    \ the remaining elements take over the work of the\n      failed elements.  Normally,\
    \ capacity planning takes such failures\n      into account, and servers are typically\
    \ run with enough spare\n      capacity to handle failure of another element.\
    \  However, unusual\n      failure conditions can cause many elements to fail\
    \ at once.  This\n      is often the case with software failures, where a bad\
    \ packet or\n      bad database entry hits the same bug in a set of elements in\
    \ a\n      cluster.\n   Avalanche Restart:  One of the most troubling sources\
    \ of overload is\n      avalanche restart.  This happens when a large number of\
    \ clients\n      all simultaneously attempt to connect to the network with a SIP\n\
    \      registration.  Avalanche restart can be caused by several events.\n   \
    \   One is the \"Manhattan Reboots\" scenario, where there is a power\n      failure\
    \ in a large metropolitan area, such as Manhattan.  When\n      power is restored,\
    \ all of the SIP phones, whether in PCs or\n      standalone devices, simultaneously\
    \ power on and begin booting.\n      They will all then connect to the network\
    \ and register, causing a\n      flood of SIP REGISTER messages.  Another cause\
    \ of avalanche\n      restart is failure of a large network connection, for example,\
    \ the\n      access router for an enterprise.  When it fails, SIP clients will\n\
    \      detect the failure rapidly using the mechanisms in [OUTBOUND].\n      When\
    \ connectivity is restored, this is detected, and clients re-\n      REGISTER,\
    \ all within a short time period.  Another source of\n      avalanche restart\
    \ is failure of a proxy server.  If clients had\n      all connected to the server\
    \ with TCP, its failure will be\n      detected, followed by re-connection and\
    \ re-registration to another\n      server.  Note that [OUTBOUND] does provide\
    \ some remedies to this\n      case.\n   Flash Crowds:  A flash crowd occurs when\
    \ an extremely large number of\n      users all attempt to simultaneously make\
    \ a call.  One example of\n      how this can happen is a television commercial\
    \ that advertises a\n      number to call to receive a free gift.  If the gift\
    \ is compelling\n      and many people see the ad, many calls can be simultaneously\
    \ made\n      to the same number.  This can send the system into overload.\n \
    \  Denial of Service (DoS) Attacks:  An attacker, wishing to disrupt\n      service\
    \ in the network, can cause a large amount of traffic to be\n      launched at\
    \ a target server.  This can be done from a central\n      source of traffic or\
    \ through a distributed DoS attack.  In all\n      cases, the volume of traffic\
    \ well exceeds the capacity of the\n      server, sending the system into overload.\n\
    \   Unfortunately, the overload problem tends to compound itself.  When a\n  \
    \ network goes into overload, this can frequently cause failures of the\n   elements\
    \ that are trying to process the traffic.  This causes even\n   more load on the\
    \ remaining elements.  Furthermore, during overload,\n   the overall capacity\
    \ of functional elements goes down, since much of\n   their resources are spent\
    \ just rejecting or treating load that they\n   cannot actually process.  In addition,\
    \ overload tends to cause SIP\n   messages to be delayed or lost, which causes\
    \ retransmissions to be\n   sent, further increasing the amount of work in the\
    \ network.  This\n   compounding factor can produce substantial multipliers on\
    \ the load in\n   the system.  Indeed, in the case of UDP, with as many as seven\n\
    \   retransmits of an INVITE request prior to timeout, overload can\n   multiply\
    \ the already-heavy message volume by as much as seven!\n"
- title: 3.  Terminology
  contents:
  - "3.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n"
- title: 4.  Current SIP Mechanisms
  contents:
  - "4.  Current SIP Mechanisms\n   SIP provides very basic support for overload.\
    \  It defines the 503\n   response code, which is sent by an element that is overloaded.\
    \  RFC\n   3261 defines it thus:\n        The server is temporarily unable to\
    \ process the request due to\n        a temporary overloading or maintenance of\
    \ the server.  The\n        server MAY indicate when the client should retry the\
    \ request in\n        a Retry-After header field.  If no Retry-After is given,\
    \ the\n        client MUST act as if it had received a 500 (Server Internal\n\
    \        Error) response.\n        A client (proxy or UAC) receiving a 503 (Service\
    \ Unavailable)\n        SHOULD attempt to forward the request to an alternate\
    \ server.\n        It SHOULD NOT forward any other requests to that server for\
    \ the\n        duration specified in the Retry-After header field, if present.\n\
    \        Servers MAY refuse the connection or drop the request instead of\n  \
    \      responding with 503 (Service Unavailable).\n   The objective is to provide\
    \ a mechanism to move the work of the\n   overloaded server to another server\
    \ so that the request can be\n   processed.  The Retry-After header field, when\
    \ present, is meant to\n   allow a server to tell an upstream element to back\
    \ off for a period\n   of time, so that the overloaded server can work through\
    \ its backlog\n   of work.\n   RFC 3261 also instructs proxies to not forward\
    \ 503 responses\n   upstream, at SHOULD NOT strength.  This is to avoid the upstream\n\
    \   server of mistakingly concluding that the proxy is overloaded when,\n   in\
    \ fact, the problem was an element further downstream.\n"
- title: 5.  Problems with the Mechanism
  contents:
  - "5.  Problems with the Mechanism\n   At the surface, the 503 mechanism seems workable.\
    \  Unfortunately,\n   this mechanism has had numerous problems in actual deployment.\
    \  These\n   problems are described here.\n"
- title: 5.1.  Load Amplification
  contents:
  - "5.1.  Load Amplification\n   The principal problem with the 503 mechanism is\
    \ that it tends to\n   substantially amplify the load in the network when the\
    \ network is\n   overloaded, causing further escalation of the problem and introducing\n\
    \   the very real possibility of congestive collapse.  Consider the\n   topology\
    \ in Figure 1.\n                                         +------+\n          \
    \                             > |      |\n                                   \
    \   /  |  S1  |\n                                     /   |      |\n         \
    \                           /    +------+\n                                  \
    \ /\n                                  /\n                                 /\n\
    \                                /\n                      +------+ /         +------+\n\
    \            --------> |      |/          |      |\n                      |  P1\
    \  |---------> |  S2  |\n            --------> |      |\\          |      |\n\
    \                      +------+ \\         +------+\n                        \
    \        \\\n                                 \\\n                           \
    \       \\\n                                   \\\n                          \
    \          \\\n                                     \\   +------+\n          \
    \                            \\  |      |\n                                  \
    \     > |  S3  |\n                                         |      |\n        \
    \                                 +------+\n                                 Figure\
    \ 1\n   Proxy P1 receives SIP requests from many sources and acts solely as a\n\
    \   load balancer, proxying the requests to servers S1, S2, and S3 for\n   processing.\
    \  The input load increases to the point where all three\n   servers become overloaded.\
    \  Server S1, when it receives its next\n   request, generates a 503.  However,\
    \ because the server is loaded, it\n   might take some time to generate the 503.\
    \  If SIP is being run over\n   UDP, this may result in request retransmissions,\
    \ which further\n   increase the work on S1.  Even in the case of TCP, if the\
    \ server is\n   loaded and the kernel cannot send TCP acknowledgements fast enough,\n\
    \   TCP retransmits may occur.  When the 503 is received by P1, it\n   retries\
    \ the request on S2.  S2 is also overloaded and eventually\n   generates a 503,\
    \ but in the interim may also be hit with retransmits.\n   P1 once again tries\
    \ another server, this time S3, which also\n   eventually rejects it with a 503.\n\
    \   Thus, the processing of this request, which ultimately failed,\n   involved\
    \ four SIP transactions (client to P1, P1 to S1, P1 to S2, P1\n   to S3), each\
    \ of which may have involved many retransmissions -- up to\n   seven in the case\
    \ of UDP.  Thus, under unloaded conditions, a single\n   request from a client\
    \ would generate one request (to S1, S2, or S3)\n   and two responses (from S1\
    \ to P1, then P1 to the client).  When the\n   network is overloaded, a single\
    \ request from the client, before\n   timing out, could generate as many as 18\
    \ requests and as many\n   responses when UDP is used!  The situation is better\
    \ with TCP (or any\n   reliable transport in general), but even if there was never\
    \ a TCP\n   segment retransmitted, a single request from the client can generate\n\
    \   three requests and four responses.  Each server had to expend\n   resources\
    \ to process these messages.  Thus, more messages and more\n   work were sent\
    \ into the network at the point at which the elements\n   became overloaded. \
    \ The 503 mechanism works well when a single\n   element is overloaded.  But when\
    \ the problem is overall network load,\n   the 503 mechanism actually generates\
    \ more messages and more work for\n   all servers, ultimately resulting in the\
    \ rejection of the request\n   anyway.\n   The problem becomes amplified further\
    \ if one considers proxies\n   upstream from P1, as shown in Figure 2.\n     \
    \                           +------+\n                              > |      |\
    \ <\n                             /  |  S1  |  \\\\\n                        \
    \    /   |      |    \\\\\n                           /    +------+      \\\\\n\
    \                          /                     \\\n                        \
    \ /                       \\\\\n                        /                    \
    \      \\\\\n                       /                             \\\n       \
    \     +------+  /         +------+           +------+\n            |      | /\
    \          |      |           |      |\n            |  P1  | ---------> |  S2\
    \  |<----------|  P2  |\n            |      | \\          |      |           |\
    \      |\n            +------+  \\         +------+           +------+\n     \
    \           ^      \\                             / ^\n                 \\   \
    \   \\                          // /\n                  \\      \\           \
    \            //  /\n                   \\      \\                    //   /\n\
    \                    \\      \\                  /    /\n                    \
    \ \\      \\   +------+    //    /\n                      \\      \\  |      |\
    \  //     /\n                       \\      > |  S3  | <      /\n            \
    \            \\       |      |       /\n                         \\      +------+\
    \      /\n                          \\                  /\n                  \
    \         \\                /\n                            \\              /\n\
    \                             \\            /\n                              \\\
    \          /\n                               \\        /\n                   \
    \             \\      /\n                                 \\    /\n          \
    \                      +------+\n                                |      |\n  \
    \                              |  PA  |\n                                |   \
    \   |\n                                +------+\n                            \
    \     ^   ^\n                                 |   |\n                        \
    \         |   |\n                                 Figure 2\n   Here, proxy PA\
    \ receives requests and sends these to proxies P1 or P2.\n   P1 and P2 both load\
    \ balance across S1 through S3.  Assuming again S1\n   through S3 are all overloaded,\
    \ a request arrives at PA, which tries\n   P1 first.  P1 tries S1, S2, and then\
    \ S3, and each transaction results\n   in many request retransmits if UDP is used.\
    \  Since P1 is unable to\n   eventually process the request, it rejects it.  However,\
    \ since all of\n   its downstream dependencies are busy, it decides to send a\
    \ 503.  This\n   propagates to PA, which tries P2, which tries S1 through S3 again,\n\
    \   resulting in a 503 once more.  Thus, in this case, we have doubled\n   the\
    \ number of SIP transactions and overall work in the network\n   compared to the\
    \ previous case.  The problem here is that the fact\n   that S1 through S3 were\
    \ overloaded was known to P1, but this\n   information was not passed back to\
    \ PA and through to P2, so that P2\n   retries S1 through S3 again.\n"
- title: 5.2.  Underutilization
  contents:
  - "5.2.  Underutilization\n   Interestingly, there are also examples of deployments\
    \ where the\n   network capacity was greatly reduced as a consequence of the overload\n\
    \   mechanism.  Consider again Figure 1.  Unfortunately, RFC 3261 is\n   unclear\
    \ on the scope of a 503.  When it is received by P1, does the\n   proxy cease\
    \ sending requests to that IP address?  To the hostname?\n   To the URI?  Some\
    \ implementations have chosen the hostname as the\n   scope.  When the hostname\
    \ for a URI points to an SRV record in the\n   DNS, which, in turn, maps to a\
    \ cluster of downstream servers (S1, S2,\n   and S3 in the example), a 503 response\
    \ from a single one of them will\n   make the proxy believe that the entire cluster\
    \ is overloaded.\n   Consequently, proxy P1 will cease sending any traffic to\
    \ any element\n   in the cluster, even though there are elements in the cluster\
    \ that\n   are underutilized.\n"
- title: 5.3.  The Off/On Retry-After Problem
  contents:
  - "5.3.  The Off/On Retry-After Problem\n   The Retry-After mechanism allows a server\
    \ to tell an upstream element\n   to stop sending traffic for a period of time.\
    \  The work that would\n   have otherwise been sent to that server is instead\
    \ sent to another\n   server.  The mechanism is an all-or-nothing technique. \
    \ A server can\n   turn off all traffic towards it, or none.  There is nothing\
    \ in\n   between.  This tends to cause highly oscillatory behavior under even\n\
    \   mild overload.  Consider a proxy P1 that is balancing requests\n   between\
    \ two servers S1 and S2.  The input load just reaches the point\n   where both\
    \ S1 and S2 are at 100% capacity.  A request arrives at P1\n   and is sent to\
    \ S1.  S1 rejects this request with a 503, and decides\n   to use Retry-After\
    \ to clear its backlog.  P1 stops sending all\n   traffic to S1.  Now, S2 gets\
    \ traffic, but it is seriously overloaded\n   -- at 200% capacity!  It decides\
    \ to reject a request with a 503 and a\n   Retry-After, which now forces P1 to\
    \ reject all traffic until S1's\n   Retry-After timer expires.  At that point,\
    \ all load is shunted back\n   to S1, which reaches overload, and the cycle repeats.\n\
    \   It's important to observe that this problem is only observed for\n   servers\
    \ where there are a small number of upstream elements sending\n   it traffic,\
    \ as is the case in these examples.  If a proxy is accessed\n   by a large number\
    \ of clients, each of which sends a small amount of\n   traffic, the 503 mechanism\
    \ with Retry-After is quite effective when\n   utilized with a subset of the clients.\
    \  This is because spreading the\n   503 out amongst the clients has the effect\
    \ of providing the proxy\n   more fine-grained controls on the amount of work\
    \ it receives.\n"
- title: 5.4.  Ambiguous Usages
  contents:
  - "5.4.  Ambiguous Usages\n   Unfortunately, the specific instances under which\
    \ a server is to send\n   a 503 are ambiguous.  The result is that implementations\
    \ generate 503\n   for many reasons, only some of which are related to actual\
    \ overload.\n   For example, RFC 3398 [RFC3398], which specifies interworking\
    \ from\n   SIP to ISDN User Part (ISUP), defines the usage of 503 when the\n \
    \  gateway receives certain ISUP cause codes from downstream switches.\n   In\
    \ these cases, the gateway has ample capacity; it's just that this\n   specific\
    \ request could not be processed because of a downstream\n   problem.  All subsequent\
    \ requests might succeed if they take a\n   different route in the Public Switched\
    \ Telephone Network (PSTN).\n   This causes two problems.  First, during periods\
    \ of overload, it\n   exacerbates the problems above because it causes additional\
    \ 503 to be\n   fed into the system, causing further work to be generated in\n\
    \   conditions of overload.  Second, it becomes hard for an upstream\n   element\
    \ to know whether to retry when a 503 is received.  There are\n   classes of failures\
    \ where trying on another server won't help, since\n   the reason for the failure\
    \ was that a common downstream resource is\n   unavailable.  For example, if servers\
    \ S1 and S2 share a database and\n   the database fails, a request sent to S1\
    \ will result in a 503, but\n   retrying on S2 won't help since the same database\
    \ is unavailable.\n"
- title: 6.  Solution Requirements
  contents:
  - "6.  Solution Requirements\n   In this section, we propose requirements for an\
    \ overload control\n   mechanism for SIP that addresses these problems.\n   REQ\
    \ 1:  The overload mechanism shall strive to maintain the overall\n      useful\
    \ throughput (taking into consideration the quality-of-\n      service needs of\
    \ the using applications) of a SIP server at\n      reasonable levels, even when\
    \ the incoming load on the network is\n      far in excess of its capacity.  The\
    \ overall throughput under load\n      is the ultimate measure of the value of\
    \ an overload control\n      mechanism.\n   REQ 2:  When a single network element\
    \ fails, goes into overload, or\n      suffers from reduced processing capacity,\
    \ the mechanism should\n      strive to limit the impact of this on other elements\
    \ in the\n      network.  This helps to prevent a small-scale failure from\n \
    \     becoming a widespread outage.\n   REQ 3:  The mechanism should seek to minimize\
    \ the amount of\n      configuration required in order to work.  For example,\
    \ it is\n      better to avoid needing to configure a server with its SIP message\n\
    \      throughput, as these kinds of quantities are hard to determine.\n   REQ\
    \ 4:  The mechanism must be capable of dealing with elements that\n      do not\
    \ support it, so that a network can consist of a mix of\n      elements that do\
    \ and don't support it.  In other words, the\n      mechanism should not work\
    \ only in environments where all elements\n      support it.  It is reasonable\
    \ to assume that it works better in\n      such environments, of course.  Ideally,\
    \ there should be\n      incremental improvements in overall network throughput\
    \ as\n      increasing numbers of elements in the network support the\n      mechanism.\n\
    \   REQ 5:  The mechanism should not assume that it will only be deployed\n  \
    \    in environments with completely trusted elements.  It should seek\n     \
    \ to operate as effectively as possible in environments where other\n      elements\
    \ are malicious; this includes preventing malicious\n      elements from obtaining\
    \ more than a fair share of service.\n   REQ 6:  When overload is signaled by\
    \ means of a specific message, the\n      message must clearly indicate that it\
    \ is being sent because of\n      overload, as opposed to other, non overload-based\
    \ failure\n      conditions.  This requirement is meant to avoid some of the\n\
    \      problems that have arisen from the reuse of the 503 response code\n   \
    \   for multiple purposes.  Of course, overload is also signaled by\n      lack\
    \ of response to requests.  This requirement applies only to\n      explicit overload\
    \ signals.\n   REQ 7:  The mechanism shall provide a way for an element to throttle\n\
    \      the amount of traffic it receives from an upstream element.  This\n   \
    \   throttling shall be graded so that it is not all-or-nothing as\n      with\
    \ the current 503 mechanism.  This recognizes the fact that\n      \"overload\"\
    \ is not a binary state and that there are degrees of\n      overload.\n   REQ\
    \ 8:  The mechanism shall ensure that, when a request was not\n      processed\
    \ successfully due to overload (or failure) of a\n      downstream element, the\
    \ request will not be retried on another\n      element that is also overloaded\
    \ or whose status is unknown.  This\n      requirement derives from REQ 1.\n \
    \  REQ 9:  That a request has been rejected from an overloaded element\n     \
    \ shall not unduly restrict the ability of that request to be\n      submitted\
    \ to and processed by an element that is not overloaded.\n      This requirement\
    \ derives from REQ 1.\n   REQ 10:  The mechanism should support servers that receive\
    \ requests\n      from a large number of different upstream elements, where the\
    \ set\n      of upstream elements is not enumerable.\n   REQ 11:  The mechanism\
    \ should support servers that receive requests\n      from a finite set of upstream\
    \ elements, where the set of upstream\n      elements is enumerable.\n   REQ 12:\
    \  The mechanism should work between servers in different\n      domains.\n  \
    \ REQ 13:  The mechanism must not dictate a specific algorithm for\n      prioritizing\
    \ the processing of work within a proxy during times of\n      overload.  It must\
    \ permit a proxy to prioritize requests based on\n      any local policy, so that\
    \ certain ones (such as a call for\n      emergency services or a call with a\
    \ specific value of the\n      Resource-Priority header field [RFC4412]) are given\
    \ preferential\n      treatment, such as not being dropped, being given additional\n\
    \      retransmission, or being processed ahead of others.\n   REQ 14:  The mechanism\
    \ should provide unambiguous directions to\n      clients on when they should\
    \ retry a request and when they should\n      not.  This especially applies to\
    \ TCP connection establishment and\n      SIP registrations, in order to mitigate\
    \ against avalanche restart.\n   REQ 15:  In cases where a network element fails,\
    \ is so overloaded\n      that it cannot process messages, or cannot communicate\
    \ due to a\n      network failure or network partition, it will not be able to\n\
    \      provide explicit indications of the nature of the failure or its\n    \
    \  levels of congestion.  The mechanism must properly function in\n      these\
    \ cases.\n   REQ 16:  The mechanism should attempt to minimize the overhead of\
    \ the\n      overload control messaging.\n   REQ 17:  The overload mechanism must\
    \ not provide an avenue for\n      malicious attack, including DoS and DDoS attacks.\n\
    \   REQ 18:  The overload mechanism should be unambiguous about whether a\n  \
    \    load indication applies to a specific IP address, host, or URI, so\n    \
    \  that an upstream element can determine the load of the entity to\n      which\
    \ a request is to be sent.\n   REQ 19:  The specification for the overload mechanism\
    \ should give\n      guidance on which message types might be desirable to process\
    \ over\n      others during times of overload, based on SIP-specific\n      considerations.\
    \  For example, it may be more beneficial to process\n      a SUBSCRIBE refresh\
    \ with Expires of zero than a SUBSCRIBE refresh\n      with a non-zero expiration\
    \ (since the former reduces the overall\n      amount of load on the element),\
    \ or to process re-INVITEs over new\n      INVITEs.\n   REQ 20:  In a mixed environment\
    \ of elements that do and do not\n      implement the overload mechanism, no disproportionate\
    \ benefit\n      shall accrue to the users or operators of the elements that do\
    \ not\n      implement the mechanism.\n   REQ 21:  The overload mechanism should\
    \ ensure that the system remains\n      stable.  When the offered load drops from\
    \ above the overall\n      capacity of the network to below the overall capacity,\
    \ the\n      throughput should stabilize and become equal to the offered load.\n\
    \   REQ 22:  It must be possible to disable the reporting of load\n      information\
    \ towards upstream targets based on the identity of\n      those targets.  This\
    \ allows a domain administrator who considers\n      the load of their elements\
    \ to be sensitive information, to\n      restrict access to that information.\
    \  Of course, in such cases,\n      there is no expectation that the overload\
    \ mechanism itself will\n      help prevent overload from that upstream target.\n\
    \   REQ 23:  It must be possible for the overload mechanism to work in\n     \
    \ cases where there is a load balancer in front of a farm of\n      proxies.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Like all protocol mechanisms, a solution for\
    \ overload handling must\n   prevent against malicious inside and outside attacks.\
    \  This document\n   includes requirements for such security functions.\n   Any\
    \ mechanism that improves the behavior of SIP elements under load\n   will result\
    \ in more predictable performance in the face of\n   application-layer denial-of-service\
    \ attacks.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   The author would like to thank Steve Mayer, Mouli Chandramouli,\n\
    \   Robert Whent, Mark Perkins, Joe Stone, Vijay Gurbani, Steve Norreys,\n   Volker\
    \ Hilt, Spencer Dawkins, Matt Mathis, Juergen Schoenwaelder, and\n   Dale Worley\
    \ for their contributions to this document.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative Reference
  contents:
  - "9.1.  Normative Reference\n   [RFC2119]   Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n               Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [OUTBOUND]  Jennings, C. and R. Mahy, \"Managing\
    \ Client Initiated\n               Connections in the Session Initiation Protocol\
    \ (SIP)\",\n               Work in Progress, October 2008.\n   [RFC3261]   Rosenberg,\
    \ J., Schulzrinne, H., Camarillo, G., Johnston,\n               A., Peterson,\
    \ J., Sparks, R., Handley, M., and E.\n               Schooler, \"SIP: Session\
    \ Initiation Protocol\", RFC 3261,\n               June 2002.\n   [RFC3398]  \
    \ Camarillo, G., Roach, A., Peterson, J., and L. Ong,\n               \"Integrated\
    \ Services Digital Network (ISDN) User Part\n               (ISUP) to Session\
    \ Initiation Protocol (SIP) Mapping\",\n               RFC 3398, December 2002.\n\
    \   [RFC4412]   Schulzrinne, H. and J. Polk, \"Communications Resource\n     \
    \          Priority for the Session Initiation Protocol (SIP)\",\n           \
    \    RFC 4412, February 2006.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Jonathan Rosenberg\n   Cisco\n   Edison, NJ\n   US\n   EMail:\
    \ jdrosen@cisco.com\n   URI:   http://www.jdrosen.net\n"
