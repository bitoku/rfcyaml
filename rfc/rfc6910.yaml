- contents:
  - '     Completion of Calls for the Session Initiation Protocol (SIP)

    '
  title: __initial_text__
- contents:
  - "Abstract\n   The \"completion of calls\" feature defined in this specification\n
    \  allows the caller of a failed call to be notified when the callee\n   becomes
    available to receive a call.\n   For the realization of a basic solution without
    queuing, this\n   document references the usage of the dialog event package (RFC
    4235)\n   that is described as 'Automatic Redial' in \"Session Initiation\n   Protocol
    Service Examples\" (RFC 5359).\n   For the realization of a more comprehensive
    solution with queuing,\n   this document introduces an architecture for implementing
    these\n   features in the Session Initiation Protocol where \"completion of\n
    \  calls\" implementations associated with the caller's and callee's\n   endpoints
    cooperate to place the caller's request for completion of\n   calls into a queue
    at the callee's endpoint; when a caller's request\n   is ready to be serviced,
    re-attempt of the original, failed call is\n   then made.\n   The architecture
    is designed to interoperate well with existing\n   completion of calls solutions
    in other networks.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6910.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Requirements Terminology ........................................4\n   3.
    Terminology .....................................................4\n   4. Solution
    ........................................................6\n      4.1. CC Architecture
    ............................................6\n      4.2. CC Procedures ..............................................8\n
    \     4.3. Automatic Redial as a Fallback ............................11\n      4.4.
    Differences from SS7 ......................................11\n   5. CC Queue
    Model .................................................12\n   6. Caller's Agent
    Behavior ........................................13\n      6.1. Receiving the
    CC Possible Indication ......................13\n      6.2. Subscribing to CC
    .........................................13\n      6.3. Receiving a CC Recall
    Notification ........................14\n      6.4. Initiating a CC Call ......................................15\n
    \     6.5. Suspending CC .............................................15\n      6.6.
    Resuming CC ...............................................15\n   7. Callee's
    Monitor Behavior ......................................16\n      7.1. Sending
    the CC Possible Indication ........................16\n      7.2. Receiving a
    CC Subscription ...............................17\n      7.3. Sending a CC Notification
    .................................18\n      7.4. Receiving a CC Call .......................................19\n
    \     7.5. Receiving a CC Suspension .................................19\n      7.6.
    Receiving a CC Resumption .................................20\n   8. Examples
    .......................................................20\n   9. 'call-completion'
    Event Package ................................24\n      9.1. Event Package Name
    ........................................24\n      9.2. Event Package Parameters
    ..................................24\n      9.3. SUBSCRIBE Bodies ..........................................25\n
    \     9.4. Subscribe Duration ........................................25\n      9.5.
    NOTIFY Bodies .............................................26\n      9.6. Subscriber
    Generation of SUBSCRIBE Requests ...............26\n      9.7. Notifier Processing
    of SUBSCRIBE Requests .................26\n      9.8. Notifier Generation of NOTIFY
    Requests ....................27\n      9.9. Subscriber Processing of NOTIFY Requests
    ..................27\n      9.10. Handling of Forked Requests ..............................28\n
    \     9.11. Rate of Notifications ....................................28\n      9.12.
    State Agents .............................................28\n   10. CC Information
    Format .........................................28\n      10.1. CC Status ................................................29\n
    \     10.2. CC Service-Retention Indication ..........................29\n      10.3.
    CC URI ...................................................29\n   11. Security
    Considerations .......................................29\n   12. IANA Considerations
    ...........................................31\n      12.1. SIP Event Package Registration
    for CC ....................31\n      12.2. MIME Registration for application/call-completion
    ........31\n      12.3. SIP/SIPS URI Parameter 'm' ...............................32\n
    \     12.4. The 'purpose' Parameter Value 'call-completion' ..........33\n      12.5.
    'm' Header Parameter for Call-Info .......................33\n   13. Acknowledgements
    ..............................................33\n   14. References ....................................................34\n
    \     14.1. Normative References .....................................34\n      14.2.
    Informative References ...................................35\n   Appendix A. Example
    Caller's Agent ................................36\n   Appendix B. Example Callee's
    Monitor ..............................36\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Completion of Calls (CC) feature allows the caller of
    a failed\n   call to have the call completed without having to make a new call\n
    \  attempt while guessing when the callee becomes available.  When the\n   caller
    requests the use of the CC feature, the callee will be\n   monitored for its availability.
    \ When the callee becomes available,\n   the callee will be given a certain time
    frame for initiating a call.\n   If the callee does not initiate a new call within
    this time frame,\n   then the caller will be recalled.  When the caller accepts
    the CC\n   recall, then a CC call to the callee will automatically start.  If\n
    \  several callers have requested the CC feature on the same callee,\n   they
    will be recalled in a predefined order, which is usually the\n   order in which
    they have requested the CC feature.\n   This document defines the following CC
    features:\n   Completion of Calls to Busy Subscriber (CCBS):  The callee is busy.\n
    \     The caller is recalled after the callee is no longer busy.\n   Completion
    of Calls on No Reply (CCNR):  The callee does not answer\n      the call.  The
    caller is recalled after the callee has completed a\n      new call.\n   Completion
    of Calls on Not Logged-in (CCNL):  The callee is not\n      registered.  The caller
    is recalled after the callee has\n      registered again.\n"
  title: 1.  Introduction
- contents:
  - "2.  Requirements Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\",
    \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\",
    and \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n
    \  This document uses terms from [RFC3261].\n"
  title: 2.  Requirements Terminology
- contents:
  - "3.  Terminology\n   For the purpose of this service, we provide the following\n
    \  terminology:\n   Callee:  a destination of the original call, and a target
    of the CC\n      call.\n   Caller:  the initiator of the original call and the
    CC request.  The\n      user on whose behalf the CC call is made.\n   Callee's
    monitor:  a logical component that implements the CC queue\n      for destination
    user(s)/UA(s) (User Agent(s)) and performs the\n      associated tasks, including
    sending CC recall events, analogous to\n      the destination local exchange's
    role in Signaling System 7\n      (SS7) CC.\n   Caller's agent:  a logical component
    that makes CC requests and\n      responds to CC recall events on behalf of originating\n
    \     user(s)/UA(s), analogous to the originating local exchange's role\n      in
    SS7 CC.\n   CC, or Completion of Calls:  a service that allows a caller who\n
    \     failed to reach a desired callee to be notified when the callee\n      becomes
    available to receive a call.\n   CC activation:  the indication by the caller
    to the caller's agent\n      that the caller desires CC for a failed original
    call; this\n      implies an indication transmitted from the caller's agent to
    the\n      callee's monitor of the desire for CC processing.\n   CCBS, or Completion
    of Calls to Busy Subscriber:  a CC service\n      provided when the initial failure
    was that the destination UA was\n      busy.\n   CCNR, or Completion of Calls
    on No Reply:  a CC service provided when\n      the initial failure was that the
    destination UA did not answer.\n   CCNL, or Completion of Calls on Not Logged-in:
    \ a CC service provided\n      when the initial failure was that the destination
    UA was not\n      registered.\n   CC call:  a call from the caller to the callee,
    triggered by the CC\n      service when it has determined that the callee is available.\n
    \  CC indicator:  an indication in the CC call INVITE used to prioritize\n      the
    call at the destination.\n   CC possible indication:  the data in responses to
    the INVITE of the\n      original call that indicate that CC is available for
    the call.\n   CC recall:  the action of the callee's monitor selecting a particular\n
    \     CC request for initiation of a CC call, resulting in an indication\n      from
    the caller's agent to the caller that it is now possible to\n      initiate a
    CC call.\n   CC recall events:  event notifications of event package\n      \"call-completion\",
    sent by the callee's monitor to the caller's\n      agent to inform it of the
    status of its CC request.\n   CC recall timer:  maximum time the callee's monitor
    will wait for the\n      caller's response to a CC recall.\n   CC request:  the
    entry in the callee's monitor queue representing the\n      caller's request for
    CC processing, that is, the caller's CC\n      subscription.\n   CC service duration
    timer:  maximum time a CC request may remain\n      active within the network.\n
    \  CC queue:  a buffer at the callee's monitor that stores incoming\n      calls
    that are targets for CC.  Note: This buffer may or may not\n      be organized
    as a queue.  The use of the term \"queue\" is analogous\n      to SS7 usage.\n
    \  CCE, or CC Entity:  the representation of a CC request, or,\n      equivalently,
    an existing CC subscription within the queue of a\n      callee's monitor.\n   Failed
    call:  a call that does not reach a desired callee, from the\n      caller's point
    of view.  Note that a failed call may be successful\n      from the SIP point
    of view; e.g., if the call reached the callee's\n      voicemail but the caller
    desired to speak to the callee in real\n      time, the INVITE receives a 200
    response, but the caller considers\n      the call to have failed.\n   Notifier:
    \ the UA that generates NOTIFY requests for the purpose of\n      notifying subscribers
    of the callee's availability; for the CC\n      service, this is the task of the
    callee's monitor.\n   Original call:  the initial call that failed to reach a
    desired\n      destination.\n   Retain option:  a characteristic of the CC service;
    if supported, CC\n      calls that again encounter a busy callee will not be queued
    again,\n      but the position of the caller's entry in the queue is retained.\n
    \     Note that SIP CC always operates with the retain option active; a\n      failed
    CC call does not cause the CC request to lose its position\n      in the queue.\n
    \  Signaling System 7, or SS7:  the signaling protocol of the public\n      switched
    telephone network, defined by ITU-T Recommendations Q.700\n      through Q.849.\n
    \  Subscriber:  the UA that receives NOTIFY requests with information of\n      the
    callee's availability; for the CC service, this is the task of\n      the caller's
    agent.\n   Suspended CC request:  a CC request that is temporarily not to be\n
    \     selected for CC recall.\n"
  title: 3.  Terminology
- contents:
  - '4.  Solution

    '
  - contents:
    - "4.1.  CC Architecture\n   The CC architecture augments each caller's UA (or
      User Agent Client\n   (UAC)) wishing to use the CC features with a \"CC agent\"
      (also written\n   as \"caller's agent\").\n   It augments each callee's UA (or
      User Agent Server (UAS)) wishing to\n   be the target of the CC features with
      a \"CC monitor\" (also written as\n   \"callee's monitor\").\n   The caller's
      agent and callee's monitor functions can be integrated\n   into the respective
      UAs, be independent end-systems, or be provided\n   by centralized application
      servers.  The two functions, though\n   associated with the two UAs (caller
      and callee), also may be provided\n   as services by the endpoints' home proxies
      or by other network\n   elements.  Though it is expected that a UA that implements
      CC will\n   have both functions so that it can participate in CC as both caller\n
      \  and callee, the two functions are independent of each other.\n   A caller's
      agent may service more than one UA as a collective group\n   if a caller or
      population of users will be shared between the UAs,\n   and especially if the
      UAs share an address of record (AOR).\n   The caller's agent monitors calls
      made from the caller's UA(s) in\n   order to determine their destinations and
      (potentially) their final\n   response statuses, and the Call-Info header fields
      of provisional and\n   final responses to invoke the CC feature.\n   A callee's
      monitor may service more than one UA as a collective group\n   if a callee or
      population of users will be shared between the UAs,\n   and especially if the
      UAs share an AOR.  The callee's monitor may\n   supply the callee's UAS(s) with
      Call-Info header field values for\n   provisional and final responses.\n   The
      callee's monitor also instantiates a presence server used to\n   monitor the
      caller's availability for CC recall.\n   The callees using the UA(s) may be
      able to indicate to the callee's\n   monitor when they wish to receive CC calls.\n
      \  In order to allow flexibility and innovation, most of the interaction\n   between
      the caller's agent, the caller(s) (user(s)), and the caller's\n   UA(s) is out
      of the scope of this document.  Similarly, most of the\n   interaction between
      the callee's monitor, the callee(s), and the\n   callee's UA(s) is out of the
      scope of this document, as is the policy\n   by which the callee's monitor arbitrates
      between multiple CC\n   requests.\n   The caller's agent must be capable of
      performing a number of\n   functions relative to the UA(s).  The method by which
      it does so is\n   outside the scope of this document, but an example method
      is\n   described in Appendix A.  The callee's monitor must be capable of\n   performing
      a number of functions relative to the UA(s).  The method\n   by which it does
      so is outside the scope of this document, but an\n   example method is described
      in Appendix B.\n   As a proof of concept, simple caller's agents and callee's
      monitors\n   can be devised that interact with users and UAs entirely through\n
      \  standard SIP mechanisms [RFC6665] [RFC4235] [RFC3515], as described\n   in
      the Appendices.\n   The callers using the UA(s) can indicate to the caller's
      agent when\n   they wish to avail themselves of CC for a recently made call
      that the\n   callers determined to be unsuccessful.  The caller's agent monitors\n
      \  the status of the caller's UA(s) to determine when they are available\n   to
      be used for a CC recall.  The caller's agent can communicate to\n   the caller's
      UA(s) that a CC recall is in progress and inquire if the\n   relevant caller
      is available for the CC recall.\n   The callee's monitor may utilize several
      methods to monitor the\n   status of the callee's UA(s) and/or their users for
      availability to\n   receive a CC call.  This can be achieved through monitoring
      calls\n   made to the callee's UA(s) to determine the callee's status, the\n
      \  identity of callers, and the final responses for incoming calls.  And\n   in
      a system with rich presence information, the presence information\n   may directly
      provide this status.  In a more restricted system, this\n   determination can
      depend on the mode of the CC call in question,\n   which is provided by the
      URI 'm' parameter.  For example, a UA is\n   considered available for CCBS (\"m=BS\")
      when it is not busy, but a UA\n   is considered available for CCNR (\"m=NR\")
      when it becomes not busy\n   after being busy with an established call.\n   The
      callee's monitor maintains information about the set of INVITEs\n   received
      by the callee's UA(s) considered unsuccessful by the caller.\n   In practice,
      the callee's monitor may remove knowledge about an\n   incoming dialog from
      its set if local policy at the callee's monitor\n   establishes that the dialog
      is no longer eligible for CC activations.\n"
    title: 4.1.  CC Architecture
  - contents:
    - "4.2.  CC Procedures\n   The caller's UA sends an INVITE to a request-URI.  One
      or more forks\n   of this request reach one or more of the callee's UAs.  If
      the CC\n   feature is available, the callee's monitor (note there can be a\n
      \  monitor for each of the callee's UAs) inserts a Call-Info header\n   field
      with its URI and with \"purpose=call-completion\" in appropriate\n   non-100
      provisional or final responses to the initial INVITE and\n   forwards them to
      the caller.  The provisional response SHOULD be sent\n   reliably if the INVITE
      contained a Supported header field with the\n   option tag 100rel.  On receipt
      of a non-100 provisional or a final\n   response with the indication that the
      CC feature is available, the\n   calling user can invoke the CC feature.\n   The
      caller indicates to the caller's agent that he wishes to invoke\n   CC services
      on the recent call.  Note that from the SIP point of\n   view, the INVITE may
      have been successful, but from the user's point\n   of view, the call may have
      been unsuccessful.  For example, the call\n   may have connected to the callee's
      voicemail, which would return a\n   200 status to the INVITE but from the caller's
      point of view is \"no\n   reply\".\n   In order to receive information necessary
      for the caller to complete\n   the call at the callee, the caller's agent subscribes
      to the\n   call-completion event package at the callee's monitor.\n   The possibility
      of the caller completing the call at the callee is\n   also known as the CC
      state (cc-state) of the caller.  The cc-states\n   comprehend the values \"queued\"
      and \"ready\" (for CC).\n   In order to receive information from all destinations
      where the\n   callee will be reachable, the caller's agent sends a SUBSCRIBE\n
      \  request for the call-completion event package to the original\n   destination
      URI of the call and to all known URIs of the callees'\n   monitors (which are
      provided by Call-Info header fields in\n   provisional and final responses to
      the INVITE).  Each callee's\n   monitor uses the subscription as an indication
      that the caller is\n   interested in using the CC feature with regard to the
      particular\n   callee.\n   Each callee's monitor keeps a list or queue of subscriptions
      from\n   callers' agents, representing the requests from the callers' agents\n
      \  to the callee's monitor for CC services.  These subscriptions are\n   created,
      refreshed, and terminated according to the procedures of\n   [RFC6665].\n   Upon
      receiving a SUBSCRIBE request from the caller's agent, the\n   callee's monitor
      instantiates a presence state for the caller's UA\n   that can be modified by
      the caller's UA to indicate its availability\n   for the CC call.  Upon instantiation,
      the caller's presence status at\n   the callee's monitor is \"open\".\n   When
      the callee's monitor determines that the callee and/or callee's\n   UA is available
      for a CC call, it selects a caller to execute the CC\n   call and sends a CC
      event update (\"cc-state: ready\") via a NOTIFY\n   request to the selected
      subscription of the caller's agent, telling\n   it to begin the CC call to the
      callee's UA.\n   When the caller's agent receives this update, it initiates
      a CC\n   recall by calling the caller's UA and then starts the CC call to the\n
      \  callee's UA, using third-party call control procedures in accordance\n   with
      [RFC3725].  The caller's agent can also check by other means\n   whether the
      caller is available to initiate the CC call to the\n   callee's UA.  If the
      caller is available, the caller's agent directs\n   the caller's UA to initiate
      the CC call to the callee's UA.\n   The caller's agent marks the CC call as
      such by adding a specific SIP\n   URI parameter to the Request-URI, so it can
      be given precedence by\n   the callee's monitor in reaching the callee's UA.\n
      \  If the caller is not available on receipt of the \"ready for recall\"\n   notification,
      the caller's agent suspends the CC request at the\n   callee's monitor by sending
      a PUBLISH request containing presence\n   information to the presence server
      of the callee's monitor, informing\n   the server that the presence status is
      \"closed\".  Once the caller\n   becomes available for a CC call again, the
      caller's agent resumes the\n   CC request by sending another PUBLISH request
      to the callee's\n   monitor, informing the monitor that the presence status
      is \"open\".\n   On receipt of the suspension request, the callee's monitor
      performs\n   the monitoring for the next non-suspended CC request in the queue.\n
      \  On receipt of the resume from the previously suspended caller's agent\n   that
      was at the top of the queue, the callee's monitor performs the\n   callee monitoring
      for this caller's agent.\n   When the CC call fails, there are two possible
      options: the CC\n   feature has to be activated again by the caller's agent
      subscribing\n   to the callee's monitor, or CC remains activated and the original
      CC\n   request retains its position in the queue if the retain option is\n   supported.\n
      \  The retain option (see Section 3) determines the behavior of the\n   callee's
      monitor when a CC call fails.  If the retain option is\n   supported, CC remains
      activated, and the original CC request\n   retains its position in the queue.
      \ Otherwise, the CC feature is\n   deactivated, and the caller's agent would
      have to subscribe again to\n   reactivate it.\n   A monitor that supports the
      retain option provides the\n   cc-service-retention header in its CC events.
      \ A caller's agent that\n   also supports the retain option uses the presence
      of this header to\n   know not to generate a new CC request after a failed CC
      call.\n   Monitors not supporting the retain option do not provide the\n   cc-service-retention
      header.  A failed CC call causes the CC request\n   to be deleted from the queue,
      and these monitors will terminate the\n   corresponding subscription of the
      caller's agent to inform that agent\n   that its CC request is no longer in
      the queue.  A caller's agent that\n   does not support the retain option can
      also terminate its\n   subscription when a CC call fails, so it is possible
      that both the\n   caller's agent and the callee's monitor may be signaling the\n
      \  termination of the subscription concurrently.  This is a normal SIP\n   events
      [RFC6665] scenario.  After the subscription is terminated, the\n   caller's
      agent may create a new subscription (as described in\n   Section 6.2) to reactivate
      the CC feature for the original call.\n"
    title: 4.2.  CC Procedures
  - contents:
    - "4.3.  Automatic Redial as a Fallback\n   Automatic Redial is a simple end-to-end
      design.  An Automatic Redial\n   scenario is described in [RFC5359], Section
      2.17.  This solution is\n   based on the usage of the dialog event package.
      \ If the callee is\n   busy when the call arrives, then the caller subscribes
      to the\n   callee's call state.  The callee's UA sends a notification when the\n
      \  callee's call state changes.  This means the caller is also notified\n   when
      the callee's call state changes to 'terminated'.  The caller is\n   alerted,
      then the caller's UA starts a call establishment to the\n   callee again.  If
      several callers have subscribed to a busy callee's\n   call state, they will
      be notified at the same time that the call\n   state has changed to 'terminated'.
      \ The problem with this solution is\n   that it might happen that several recalls
      are started at the same\n   time.  This means it is a heuristic approach with
      no guarantee of\n   success.\n   There is no interaction between CC and Automatic
      Redial, as there is\n   a difference in the behavior of the callee's monitor
      and the caller\n   when using the dialog event package for receiving dialog
      information\n   or for aggregating a CC state.\n"
    title: 4.3.  Automatic Redial as a Fallback
  - contents:
    - "4.4.  Differences from SS7\n   SIP CC differs in some ways from the CCBS and
      CCNR features of SS7\n   (which is used in the Public Switched Telephone Network
      (PSTN)).  For\n   ease of understanding, we enumerate some of the differences
      here.\n   As there is no equivalent to the forking mechanism in SS7, in the\n
      \  PSTN, calls can be clearly differentiated as successful or\n   unsuccessful.
      \ Due to the complex forking situations that are\n   possible in SIP, a call
      may fail from the point of view of the user\n   and yet have a success response
      from SIP's point of view.  (This can\n   happen even in simple situations: e.g.,
      a call to a busy user that\n   fails over to his voicemail receives a SIP success
      response, even\n   though the caller may consider it \"busy subscriber\".)  Thus,
      the\n   caller must be able to invoke CC even when the original call appeared\n
      \  to succeed.  To support this, the caller's agent must record\n   successful
      calls as well as unsuccessful calls.\n   In SIP, only the caller's UA or service
      system on the originating\n   side and the callee's UA or service system on
      the terminating side\n   need to support CC for CC to work successfully between
      the UAs.\n   Intermediate SIP systems (proxies or back-to-back user agents\n
      \  (B2BUAs)) do not need to implement CC; they only need to be\n   transparent
      to the usual range of SIP messages.  In the PSTN,\n   additionally, intermediate
      nodes like media gateway controllers have\n   to implement the CC service.\n"
    title: 4.4.  Differences from SS7
  title: 4.  Solution
- contents:
  - "5.  CC Queue Model\n   The callee's monitor manages CC for a single URI.  This
    URI is likely\n   to be a published AOR, or more likely \"non-voicemail AOR\",
    but it may\n   be as narrowly scoped as a single UA's contact URI.  The callee's\n
    \  monitor manages a dynamic set of CC entities (called \"CCEs\"), which\n   represent
    CC requests, or equivalently, the existing incoming CC\n   subscriptions.  This
    set is also called a queue, because a queue data\n   structure often aids in implementing
    the policies of the callee's\n   monitor for selecting CCEs for CC recall.\n   Each
    CCE has an availability state, determined through the caller's\n   presence status
    at the callee's monitor.  A presence status of \"open\"\n   represents a CCE's
    availability state of \"available\", and a presence\n   status of \"closed\" represents
    a CCE's availability state of\n   \"unavailable\".\n   Each CCE has a recall state
    that is visible via subscriptions.  The\n   recall state is either \"queued\"
    or \"ready\".\n   Each CCE carries the From URI of the SUBSCRIBE request that
    caused\n   its creation.\n   CC subscriptions arrive at the callee's monitor by
    addressing the\n   URIs the callee's monitor returns in Call-Info header fields.
    \ The\n   request-URI of the SUBSCRIBE request determines the queue to which\n
    \  the resulting CCE is added.  The resulting subscription reports the\n   status
    of the queue.  The base event data is the status of all the\n   CCEs in the queue,
    but the data returned by each subscription is\n   filtered to report only the
    status of that subscription's CCE.\n   (Further standardization may define means
    for obtaining more\n   comprehensive information about a queue.)\n   When a CCE
    is created, it is given the availability state \"available\"\n   and recall state
    \"queued\".\n   When the callee's monitor receives Presence Information Data Format\n
    \  (PIDF) bodies [RFC3863] via PUBLISH requests [RFC3903], these PUBLISH\n   requests
    are expected to be sent by subscribers to indirectly suspend\n   and resume their
    CC requests by modifying its CCE availability state.\n   A CCE is identified by
    the request-URI (if it was taken from a CC\n   event notification that identifies
    the CCE) or the From URI of the\n   request (matching the From URI recorded in
    the CCE).  Receipt of a\n   PUBLISH with status \"open\" sets the availability
    state of the CCE to\n   \"available\" (resume); status \"closed\" sets the availability
    state of\n   the CCE to \"unavailable\" (suspend).\n   A CC request is eligible
    for recall only when its CCE's availability\n   state is \"available\" and the
    \"m\" value of the CCE also indicates an\n   available state.  The callee's monitor
    MUST NOT select for recall any\n   CC requests that fail to meet those criteria.
    \ Within that\n   constraint, the selections made by the callee's monitor are\n
    \  determined by its local policy.  Often, a callee's monitor will\n   choose
    the acceptable CCE that has been in the queue the longest.\n   When the callee's
    monitor has selected a CCE for recall, it changes\n   the CCE's recall state from
    \"queued\" to \"ready\", which triggers a\n   notification on the CCE's subscription.\n
    \  If a selected subscriber then suspends its request by sending a\n   PUBLISH
    with the presence status \"closed\", the CCE becomes\n   \"unavailable\", and
    the callee's monitor changes the CCE's recall\n   state to \"queued\".  This may
    cause another CCE (e.g., a CCE that has\n   been in the queue for less time) to
    be selected for recall.\n   The caller's presence status at the callee's monitor
    is terminated\n   when the caller completes its CC call or when the subscription
    of the\n   caller's agent at the callee's monitor is terminated.\n"
  title: 5.  CC Queue Model
- contents:
  - '6.  Caller''s Agent Behavior

    '
  - contents:
    - "6.1.  Receiving the CC Possible Indication\n   The caller's agent MUST record
      the From URI and SHOULD record the\n   final request status that the caller's
      UA received along with the\n   contents of Call-Info header fields of provisional
      and final\n   responses.\n   Note that receiving a CC possible indication also
      depends on the\n   aggregation of final responses by proxies; in the case of
      4xx\n   responses, some 4xx responses are more likely to be sent to the\n   caller.\n"
    title: 6.1.  Receiving the CC Possible Indication
  - contents:
    - "6.2.  Subscribing to CC\n   For CC activation, the caller's agent MUST send
      a SUBSCRIBE to all\n   known callee's monitor URIs.  A callee's monitor URI
      may be provided\n   in the Call-Info header field in provisional and final responses
      to\n   the INVITE sent back by the callee's monitor(s).  Additionally, the\n
      \  caller's agent SHOULD include the original request-URI that it sent\n   the
      original INVITE to, in its set of callee's monitor URIs, when it\n   is unclear
      if the call has forked to additional callees whose\n   responses the caller
      has not seen.  A SUBSCRIBE to the original\n   request-URI alone is used in
      cases where the caller's agent has not\n   received or does not remember any
      callee's monitor URI.  The caller's\n   agent SHOULD add an 'm' parameter to
      these URIs in order to indicate\n   to the callee's monitor the desired CC mode.
      \ The 'm' parameter\n   SHOULD have the value of the 'm' parameter received
      in the Call-Info\n   header field of the responses to the original INVITE.\n
      \  To minimize redundant subscriptions, these SUBSCRIBEs SHOULD be\n   presented
      as forks of the same transaction, as defined by\n   Section 8.2.2.2 of [RFC3261],
      if the caller's agent is capable of\n   doing so.\n   The agent MUST NOT maintain
      more than one CC request for a single\n   caller and directed to a single original
      destination URI.  If a\n   caller requests CC a second time for the same destination
      URI, the\n   agent MUST consolidate the new request with the existing CC request\n
      \  by either reusing the existing CC subscriptions or terminating and\n   then
      recreating them.  For this purpose, equality of callers is\n   determined by
      comparing callers' AORs and equality of destination\n   URIs is determined by
      comparing them per [RFC3261] Section 19.1.4.\n   When generating these SUBSCRIBEs,
      the From URI MUST be the caller's\n   AOR.  The To URI SHOULD be the destination
      URI of the original call\n   (if the agent knows that and can insert it into
      the To header) and\n   otherwise MUST be the request-URI of the SUBSCRIBE.\n
      \  The SUBSCRIBE SHOULD have header fields to optimize its routing.  In\n   particular,
      it SHOULD contain \"Request-Disposition: parallel\" and an\n   Accept-Contact
      header field to eliminate callee UAs that are not\n   acceptable to the caller.\n
      \  The caller's agent MUST be prepared to receive multiple responses for\n   multiple
      forks of the SUBSCRIBE and to have multiple subscriptions\n   established.  The
      caller's agent must also be prepared to have the\n   SUBSCRIBE fail; in which
      case, CC cannot be invoked for this original\n   call.\n   If the caller's agent
      no longer wants to initiate the CC call (e.g.,\n   because the caller has deactivated
      CC), the caller's agent terminates\n   the subscription in accordance with [RFC6665]
      or suspends the\n   subscription(s) as specified in Section 6.5.\n"
    title: 6.2.  Subscribing to CC
  - contents:
    - "6.3.  Receiving a CC Recall Notification\n   When receiving a NOTIFY with the
      cc-state set to \"ready\", the\n   caller's agent SHOULD suspend all other subscriptions
      to CC, by\n   following the step in Section 6.5, in order to prevent any other
      CC\n   requests from this caller from receiving CC recalls.  The caller's\n
      \  agent starts the CC recall to the caller by confirming that the\n   caller
      would be able to initiate a CC call, e.g., by calling the\n   caller's UA(s).\n"
    title: 6.3.  Receiving a CC Recall Notification
  - contents:
    - "6.4.  Initiating a CC Call\n   If the caller is available for the CC call and
      willing to initiate\n   the CC call, the caller's agent causes the caller's
      UA to generate a\n   new INVITE towards the callee.  The caller's UA MAY add
      an 'm' URI\n   parameter with the value of the 'm' parameter received in the\n
      \  Call-Info header in the response to the original INVITE, in order to\n   specify
      his preferences in CC processing and to prioritize the CC\n   call.  The INVITE
      SHOULD be addressed to the URI specified in the\n   cc-URI of the NOTIFY, or,
      if that's not available, it SHOULD use the\n   URI in the Call-Info header field
      of the response to the original\n   INVITE; if that's not available, it MAY
      use the request-URI of the\n   original INVITE, if this URI was recorded.  Note
      that the latter\n   choice may not provide ideal routing, but, in simple cases,
      it is\n   likely to reach the desired callee or callee's monitor.\n"
    title: 6.4.  Initiating a CC Call
  - contents:
    - "6.5.  Suspending CC\n   If the caller is not available for the CC recall, the
      CC request\n   SHALL be suspended by the caller's agent until the caller becomes\n
      \  available again or if the conditions relevant to the local suspension\n   policy
      of the caller's agent have changed.  To suspend the CC\n   request, the caller's
      agent SHALL publish the caller's presence state\n   by sending a PUBLISH request
      to each callee's monitor where the\n   presence server for CC resides in accordance
      with the procedures\n   described in [RFC3903], giving the PIDF state \"closed\"
      for the\n   caller's identity as presentity.  The PUBLISH request SHOULD contain\n
      \  an Expires header field with a value that corresponds to the current\n   value
      of the remaining CC subscription duration.\n   Each PUBLISH SHOULD be sent to
      the CC URI as received in the NOTIFY,\n   or within the corresponding SUBSCRIBE
      dialog, or if that is not\n   possible, to the corresponding callee's monitor
      URI received in the\n   Call-Info header field of the NOTIFY, or if one is not
      available, the\n   Contact address of the subscription.\n"
    title: 6.5.  Suspending CC
  - contents:
    - "6.6.  Resuming CC\n   When the caller is no longer busy, or if the conditions
      relevant to\n   the suspension policy of the caller's agent have changed, then
      the CC\n   request SHALL be resumed by the caller's agent.  To resume a CC\n
      \  request, the caller's agent SHALL publish the caller's presence state\n   by
      sending a PUBLISH request to each callee's monitor in accordance\n   with the
      procedures described in [RFC3903], informing each monitor\n   that the PIDF
      state is \"open\"; this request will otherwise be\n   constructed in the same
      way as the suspend PUBLISH request.\n   In the case where the caller's agent
      has sent several CC suspension\n   requests to different callee's monitors and
      the caller becomes\n   available again, as determined by the local resumption
      policy of the\n   caller's agent, the caller's agent MAY send a PUBLISH to resume
      a CC\n   request to each callee's monitor for which there is a suspended CC\n
      \  request.  Note that the resumption policy of the caller's agent may\n   prescribe
      a manual resumption; thus, a suspended CC request should\n   not be automatically
      resumed.\n"
    title: 6.6.  Resuming CC
  title: 6.  Caller's Agent Behavior
- contents:
  - '7.  Callee''s Monitor Behavior

    '
  - contents:
    - "7.1.  Sending the CC Possible Indication\n   The callee's monitor MUST record
      the From URI and MAY record the\n   final request status(es) returned by the
      callee's UA(s).\n   If the callee's monitor wants to enable the caller to make
      use of the\n   CC service, it MUST insert a Call-Info header field with\n   \"purpose=call-completion\"
      in the final response message (e.g., in a\n   486 to enable CC due to busy subscriber)
      and at least one non-100\n   provisional response message (e.g., in a 180 due
      to no response) to\n   the initial INVITE when forwarding it to the caller.
      \ The non-100\n   provisional response message SHOULD be sent reliably if the
      INVITE\n   contained a Supported header field with the option tag 100rel.  The\n
      \  Call-Info header field values defined in this specification\n   positively
      indicate that CC is available for the failed fork of the\n   call.\n   The callee's
      monitor SHOULD insert a URI in the Call-Info header\n   field where the caller's
      agent should subscribe for CC.  Ideally, it\n   is a globally routable URI [RFC5627]
      for the callee's monitor.  In\n   practice, it may be the callee's AOR, and
      the SUBSCRIBE will be\n   routed to the callee's monitor only because it specifies
      \"Event:\n   call-completion\".\n   In order to enable CC, the Call-Info header
      field MUST be set up\n   according to the following scheme:\n   Call-Info: monitor-URI;purpose=call-completion;m=XX\n
      \  The 'm' parameter defines the \"mode\" of CC.  The \"m=NR\" parameter\n   indicates
      that it failed due to lack of response, the \"m=BS\"\n   parameter indicates
      that it failed due to busy subscriber, and the\n   \"m=NL\" parameter indicates
      that it failed due to non-registered\n   subscriber (no devices are registered
      for the AOR contacted).  The\n   'm' parameter is useful for PSTN interworking
      and assessing presence\n   information in the callee's monitor.  It is possible
      that other\n   values will be defined in future.  It is also permissible to
      omit the\n   'm' parameter entirely.  Implementations MUST accept CC operations
      in\n   which the 'm' parameter is missing or has an unknown value, and\n   execute
      them as best they can in their environment (which is likely\n   to be a degraded
      service, especially when interoperating with SS7).\n"
    title: 7.1.  Sending the CC Possible Indication
  - contents:
    - "7.2.  Receiving a CC Subscription\n   The callee's monitor MUST be prepared
      to receive SUBSCRIBEs for the\n   call-completion event package directed to
      the URIs of UA(s) that it\n   is servicing and any URIs that the callee's monitor
      provides in\n   Call-Info header fields.  The SUBSCRIBEs MUST be processed in\n
      \  accordance with the procedures defined in [RFC6665], establishing\n   subscriptions.
      \ These subscriptions represent the request from the\n   caller's agent for
      CC services.\n   If the monitor receives two or more SUBSCRIBEs that have the
      same\n   Call-Id header field value and the monitor considers the request-URIs\n
      \  of the received SUBSCRIBEs to request the status of the same set of\n   UAs,
      then they are redundant forks of one SUBSCRIBE request, and the\n   monitor
      SHOULD reject all but one of the requests with 482 (Merged\n   Request) responses.\n
      \  The monitor MAY determine that an incoming CC SUBSCRIBE is a\n   duplicate
      of an existing CC subscription if (1) the Call-Id header\n   field values are
      different, (2) the From URIs (i.e., the caller's\n   AORs) are the same (per
      [RFC3261] Section 19.1.4), (3) the To URIs\n   (which should be the request-URI
      of the original call) have the same\n   user and hostport components, and (4)
      the monitor considers the\n   request-URIs of the received SUBSCRIBEs to request
      the status of the\n   same set of UAs.\n   If the monitor determines that a
      new subscription is a duplicate of\n   an existing subscription, it MAY terminate
      the existing subscription\n   in accordance with the procedures defined in [RFC6665].
      \ In any case,\n   it MUST establish the new subscription.\n   The callee's
      monitor may apply restrictions as to which caller's\n   agents may subscribe.\n
      \  The continuation of the subscription of the caller's agent indicates\n   to
      the callee's monitor that the caller's agent is prepared to\n   initiate the
      CC call if it is selected for the \"ready\" state.  If the\n   callee's monitor
      becomes aware of a subscription that cannot be\n   selected for a CC recall,
      it SHOULD terminate the subscription in\n   accordance with [RFC6665].\n"
    title: 7.2.  Receiving a CC Subscription
  - contents:
    - "7.3.  Sending a CC Notification\n   The call-completion event package returns
      various points of\n   information to the caller's agent, but the vital datum
      it contains is\n   the cc-state of the CC request of the caller's agent as stored
      in the\n   CC queue; in the beginning, this cc-state is \"queued\".  When the\n
      \  cc-state of the agent's request changes, the callee's monitor MUST\n   send
      a NOTIFY for a CC event to the caller's agent.  The notification\n   SHOULD
      also contain a URI that can be used for suspension requests.\n   Ideally, it
      is a globally routable URI [RFC5627] for the callee's\n   monitor.  In practice,
      it may be the callee's AOR, and the SUBSCRIBE\n   will be routed to the callee's
      monitor only because it specifies\n   \"Event: call-completion\".\n   The call-completion
      event package provides limited information about\n   the policy of the callee's
      monitor.  In particular, as in the PSTN,\n   the \"cc-service-retention\" datum
      gives an indication of the \"service\n   retention\" attribute, which indicates
      whether the CC request can be\n   continued to a later time if the CC call fails
      due to the callee's\n   UA(s) being busy.  If the callee's monitor supports
      the\n   service-retention option, the callee's monitor SHOULD include the\n
      \  cc-service-retention parameter.\n   The callee's monitor has a policy regarding
      when and how it selects\n   CC requests for the recall.  This policy may take
      into account the\n   type of the requests (e.g., CCNR vs. CCBS), the state of
      the callee's\n   UA(s), the order in which the CC requests arrived, the length
      of time\n   the CC requests have been active, and any previous attempts of CC\n
      \  activations for the same original call.  The callee's monitor will\n   usually
      choose only one CC request for the recall at a time, but if\n   the callee's
      UA(s) can support multiple calls, it may choose more\n   than one.  The callee's
      monitor will usually choose the oldest active\n   request.\n   When the callee's
      monitor changes the state datum for the chosen\n   subscription from \"queued\"
      to \"ready\", the callee's monitor MUST send\n   a NOTIFY for the subscription
      of the caller's agent with the cc-state\n   set to \"ready\" (recall notification).
      \ The NOTIFY SHOULD also contain\n   in the cc-URI a URI to be used in the CC
      call.  In practice, this may\n   be the AOR of the callee.\n   Upon sending
      the recall notification, the callee's monitor MUST start\n   a recall timer.
      \ It is RECOMMENDED to use a value between 10 and\n   20 seconds, which corresponds
      to the recommendation for the CC\n   services in the ETSI [ETS300.356-18] and
      ITU-T [ITU-T.Q.733]\n   documents.\n"
    title: 7.3.  Sending a CC Notification
  - contents:
    - "7.4.  Receiving a CC Call\n   The callee's UA(s) and the callee's monitor may
      give the CC call\n   precedence over non-CC calls by evaluating the presence
      of the 'm'\n   URI parameter and the From header of the INVITE request.  The\n
      \  callee's monitor supervises the receiving of the CC call.  Upon\n   arrival
      of the CC call, the recall timer MUST be stopped.  If the CC\n   call does not
      arrive at the callee's UA(s) before the expiry of the\n   recall timer, the
      callee's monitor SHOULD stop processing the recall\n   and change the value
      of the cc-state datum to \"queued\" if it supports\n   the retain option, and
      terminate the subscription if it doesn't\n   support the retain option.  Similarly,
      if the CC call is not\n   accepted, the callee's monitor will stop the CC recall
      processing.\n   Depending on its policy, the same original call may be selected
      again\n   for a CC recall at a later time.  If the CC call succeeds, the\n   callee's
      monitor MUST terminate the relevant subscription in\n   accordance with [RFC6665]
      and MUST remove any associated presence\n   event state used for suspend and
      resume for the caller of the CC\n   call.\n   Once the CC call has been terminated,
      successfully or unsuccessfully,\n   the policy of the callee's monitor MAY specify
      that another CC\n   request for a recall be selected.  Note also that according
      to the\n   policy of the callee's monitor several recalls may be processed at\n
      \  the same time.\n"
    title: 7.4.  Receiving a CC Call
  - contents:
    - "7.5.  Receiving a CC Suspension\n   The monitor may receive PUBLISH requests
      to suspend CC requests from\n   the caller's agent as described in Section 6.5.
      \ The PUBLISH requests\n   may be received via the URI it manages, any URI that
      it inserts into\n   a Call-Info header, any contact URI it uses as a notifier
      for\n   \"call-completion\" events, or any URI it returns as the \"URI\" line
      of\n   the call-completion event packages.\n   The receipt of the PUBLISH request
      initiates a presence event state\n   for the caller's identity at the presence
      server of the callee's\n   monitor as specified in [RFC3903], together with
      a logical presence\n   server if this has not been done before for another call.\n
      \  Note: The presence server may initiate a presence event state for the\n   caller's
      identity on receipt of a SUBSCRIBE request as well,\n   dependent on the implementation.\n
      \  The monitor SHOULD identify the addressed CCE by the request-URI of\n   the
      PUBLISH request, or if that is not possible, by the From URI.\n   If the processing
      of a CC request results in suspending that CC\n   request by receiving a PUBLISH
      request from the caller's agent as\n   described in Section 6.5, the callee's
      monitor MUST stop the recall\n   timer and MUST ensure that the request is set
      to a \"queued\" state,\n   and then the callee's monitor MUST attempt to process
      another CC\n   request in the queue according to its local policy.\n"
    title: 7.5.  Receiving a CC Suspension
  - contents:
    - "7.6.  Receiving a CC Resumption\n   When a CC request has been resumed after
      the callee's monitor has\n   received a PUBLISH request from the caller's agent
      as described in\n   Section 6.6, the presence event state for the caller's identity
      at\n   the presence server of the CC monitor MUST be modified as described\n
      \  in [RFC3903].  If the callee is not busy and there is no entry in the\n   CC
      queue that is currently being processed, the callee's monitor MUST\n   process
      the queue as described in Section 7.3 above.\n"
    title: 7.6.  Receiving a CC Resumption
  title: 7.  Callee's Monitor Behavior
- contents:
  - "8.  Examples\n   A basic call flow, with only the most significant messages of
    a CC\n   activation and invocation shown, is as follows (please note that this\n
    \  is an example, and there may be variations in the failure responses):\n       Caller
    \                    Callee\n       sip:123@a.com              sip:456@b.com\n
    \        |                          |\n         | INVITE sip:456@b.com     |         [original
    call]\n         | From: sip:123@a.com      |\n         |------------------------->|\n
    \        |                          |\n         | 487                      |\n
    \        | Call-Info:<sip:456@z.b.com>;purpose=call-completion;m=NR\n         |<-------------------------|\n
    \        |                          |\n         | SUBSCRIBE sip:456@z.b.com;m=NR
    \    [initial SUBSCRIBE]\n         | From: sip:123@a.com      |\n         | Contact:
    sip:123@y.a.com |\n         | Request-Disposition: parallel\n         | Call-Id:
    abcd-efgh       |\n         | Event: call-completion   |\n         |------------------------->|\n
    \        |                          |\n         | 200                      |\n
    \        |<-------------------------|\n         |                          |\n
    \        | NOTIFY sip:123@y.a.com   |         [initial NOTIFY]\n         | Body:
    cc-state: queued   |\n         |<-------------------------|\n         |                          |\n
    \        | SUBSCRIBE sip:456@b.com;m=NR       [another init. SUB.]\n         |
    From: sip:foo@example.com|\n         | Request-Disposition: parallel\n         |
    Call-Id: abcd-efgh       |\n         | Event: call-completion   |\n         |------------------------->|\n
    \        |                          |\n         | 482                      |         [duplicate
    SUB. rej.]\n         |<-------------------------|\n         |                          |\n
    \        | NOTIFY sip:123@y.a.com   |         [CC invoked]\n         | Body: cc-state:
    ready    |\n         |        URI: sip:recall@z.b.com\n         |<-------------------------|\n
    \        |                          |\n         | INVITE sip:recall@z.b.com;m=NR
    \    [CC call]\n         | From: sip:foo@example.com|\n         |------------------------->|\n
    \        |                          |\n         | NOTIFY sip:123@y.a.com   |         [CC
    terminated]\n         | Expires = 0              |\n         |<-------------------------|\n
    \  The original call is an ordinary INVITE.  It fails due to no-response\n   (ring-no-answer).
    \ In this case, the callee's governing proxy\n   generates a 487 response because
    the proxy canceled the INVITE to the\n   UA when it rang too long without an answer.
    \ The 487 response carries\n   a Call-Info header field with \"purpose=call-completion\".
    \ The\n   Call-Info header field positively indicates that CC is available for\n
    \  this failed fork of the call.  The \"m=NR\" parameter indicates that it\n   failed
    due to no-response, which is useful for PSTN interworking and\n   assessing presence
    information in the callee's monitor.\n   The URI in the Call-Info header field
    (<sip:456@z.b.com>) is where\n   the caller's agent should subscribe for CC processing.
    \ Ideally, it\n   is a globally routable URI for the callee's monitor.  In practice,
    it\n   may be the callee's AOR, and the SUBSCRIBE will be routed to the\n   callee's
    monitor only because it specifies \"Event: call-completion\".\n   CC is activated
    by sending a SUBSCRIBE to all known callee's monitor\n   URIs.  These can be provided
    by the Call-Info header field in the\n   response to the INVITE.\n   Additionally,
    the caller's agent needs to include the original\n   request-URI in its set of
    callee's monitor URIs, because the call may\n   have forked to additional callees
    whose responses the caller has not\n   seen.  (A SUBSCRIBE to the request-URI
    alone is used in cases where\n   the caller's agent has not received or cannot
    remember any callee's\n   monitor URI.)\n   The caller's agent adds to these URIs
    an 'm' parameter (if possible).\n   In this case, the caller's agent forks the
    SUBSCRIBE to two\n   destinations as defined by Section 8.2.2.2 of [RFC3261],
    with\n   appropriate Request-Disposition.  The first SUBSCRIBE is to the URI\n
    \  from Call-Info.\n   The second SUBSCRIBE is to the original request-URI and
    reaches the\n   same callee's monitor.  Because it has the same Call-Id as the\n
    \  SUBSCRIBE that has already reached the callee's monitor, the callee's\n   monitor
    rejects it with a 482, thus avoiding redundant subscriptions.\n   The initial
    NOTIFY for the successful SUBSCRIBE has \"cc-state:\n   queued\" in its body.
    \ Eventually, this caller is selected for CC and\n   is informed of this via a
    NOTIFY containing \"cc-state: ready\".  This\n   NOTIFY carries a URI to which
    the INVITE for the CC call should be\n   sent.  In practice, this may be the AOR
    of the callee.\n   The caller generates a new INVITE to the URI specified in the
    NOTIFY,\n   or if there was no such URI or if the caller's agent cannot remember\n
    \  it, it may use the original request-URI.  The caller adds the 'm'\n   parameters
    (if possible), to specify CC processing.\n   Finally, the subscription for the
    CC request is terminated by the\n   callee's monitor.\n   Another flow, with only
    the most significant messages of CC\n   suspension and resumption shown, is as
    follows:\n       Caller                     Callee\n       sip:123@a.com              sip:456@b.com\n
    \        |                          |\n         | NOTIFY sip:123@y.a.com   |      [CC
    notification, caller not\n         | Body: cc-state: ready    |      available
    for CC recall]\n         |        URI: sip:recall@z.b.com\n         |<-------------------------|\n
    \        |                          |\n         | 200                      |\n
    \        |------------------------->|\n         |                          |\n
    \        | PUBLISH sip:456@z.b.com  |      [non-availability for recall\n         |
    From: sip:123@a.com      |       is published]\n         | Contact: sip:123@y.a.com
    |\n         | Event: presence          |\n         | Content-Type: 'app/pidf'
    |\n         | Body: status=closed      |\n         |------------------------->|\n
    \        |                          |\n         | 200                      |\n
    \        |<-------------------------|\n         |                          |\n
    \        |                          |      [caller becomes available\n         |
    \                         |       again]\n         |                          |\n
    \        | PUBLISH sip:456@z.b.com  |      [availability for recall\n         |
    From: sip:123@a.com      |       is published]\n         | Contact: sip:123@y.a.com
    |\n         | Event: presence          |\n         | Content-Type: 'app/pidf'
    |\n         | Body: status=open        |\n         |------------------------->|\n
    \        |                          |\n         | 200                      |\n
    \        |<-------------------------|\n         |                          |\n
    \  The caller is selected for CC and is informed of this via a NOTIFY\n   request
    containing \"cc-state: ready\".  At this time, the caller is\n   not available
    for the CC recall.\n   For updating its presence event state at the callee's presence\n
    \  server, the caller sends a PUBLISH request informing the presence\n   server
    that the PIDF state is \"closed\".  The PUBLISH request is sent\n   (in order
    of preference) as follows: (1) out-of-dialog to the CC URI\n   as received in
    the NOTIFY, (2) within the corresponding SUBSCRIBE\n   dialog, (3) out-of-dialog
    to the corresponding callee's monitor URI\n   received in the Call-Info header
    field of the NOTIFY, or (4) out-of-\n   dialog to the remote Contact address of
    the corresponding SUBSCRIBE\n   dialog.\n   When the caller is again available
    for the CC recall, the caller\n   updates his presence event state at the callee's
    presence server by\n   generating a PUBLISH request informing the server that
    the PIDF state\n   is \"open\"; this request will otherwise be constructed in
    the same way\n   as the suspend PUBLISH request.\n"
  title: 8.  Examples
- contents:
  - "9.  'call-completion' Event Package\n   This section specifies the call-completion
    event package, in\n   accordance with Section 5.4 of [RFC6665].  The call-completion
    event\n   package has the media type \"application/call-completion\".\n   Note
    that if the callee has a caller-queuing facility, the callee's\n   monitor may
    want to treat the CC queue as part of the queuing\n   facility and include in
    the event package information regarding the\n   state of the queue.  How this
    information is conveyed is left for\n   further standardization.\n"
  - contents:
    - "9.1.  Event Package Name\n   The SIP events specification [RFC6665] requires
      package definitions\n   to specify the name of their package or template-package.
      \ The name\n   of this package is \"call-completion\".  This value appears in
      the\n   Event and Allow-Events header fields.\n"
    title: 9.1.  Event Package Name
  - contents:
    - "9.2.  Event Package Parameters\n   No package-specific Event header field parameters
      are defined for\n   this event package.\n"
    title: 9.2.  Event Package Parameters
  - contents:
    - "9.3.  SUBSCRIBE Bodies\n   [RFC6665] requires package definitions to define
      the usage, if any,\n   of bodies in SUBSCRIBE requests.\n   The SUBSCRIBE request
      MAY contain an Accept header field.  If no\n   such header field is present,
      it has a default value of\n   \"application/call-completion\".  If the header
      field is present, it\n   MUST include \"application/call-completion\".\n   A
      SUBSCRIBE request for a CC package MAY contain a body.  This body\n   defines
      a filter to be applied to the subscription.  Filter documents\n   are not specified
      in this document and may be the subject of future\n   standardization activity.\n
      \  A SUBSCRIBE request requests CC information regarding calls recently\n   made
      from the same caller to the callee UA(s) serviced by the\n   notifier.  Calls
      are defined to be \"from the same caller\" if the\n   URI-part of the From header
      field value in the INVITE is the same as\n   the URI-part of the From header
      field value in the SUBSCRIBE.\n"
    title: 9.3.  SUBSCRIBE Bodies
  - contents:
    - "9.4.  Subscribe Duration\n   [RFC6665] requires package definitions to define
      a default value for\n   subscription durations and to discuss reasonable choices
      for\n   durations when they are explicitly specified.\n   If a SUBSCRIBE does
      not explicitly request a duration, the default\n   requested duration is 3600
      seconds, as that is the highest service\n   duration timer value recommended
      for the CC services in the ETSI\n   [ETS300.356-18] and ITU-T [ITU-T.Q.733]
      documents.  Because the\n   subscription duration means that no explicit timer
      is needed, and the\n   subscription duration can be seen as an equivalent to
      the SS7 service\n   duration timer, this specification refers to the subscription\n
      \  duration also as the service duration timer.  It is RECOMMENDED that\n   subscribers
      request, and that notifiers grant, a subscription time of\n   at least 3600
      seconds.\n   If a notifier can determine that, according to its policy, after
      a\n   certain duration the requested subscription can no longer proceed to\n
      \  the \"ready\" state, it SHOULD reduce the granted subscription time to\n
      \  that duration.  If a notifier can determine that, according to its\n   policy,
      the requested subscription can never proceed to the \"ready\"\n   state, it
      should refuse the subscription.\n"
    title: 9.4.  Subscribe Duration
  - contents:
    - "9.5.  NOTIFY Bodies\n   [RFC6665] requires package definitions to describe
      the allowed set of\n   body types in NOTIFY requests and to specify the default
      value to be\n   used when there is no Accept header field in the SUBSCRIBE request.\n
      \  A NOTIFY for a call-completion event package MUST contain a body that\n   describes
      the CC states.\n   As described in [RFC6665], the NOTIFY message will contain
      bodies\n   that describe the state of the subscribed resource.  This body is
      in\n   a format listed in the Accept header field of the SUBSCRIBE, or in a\n
      \  package-specific default format if the Accept header field was\n   omitted
      from the SUBSCRIBE.\n   In this event package, the body of the notification
      contains a CC\n   document.  All subscribers and notifiers MUST support the\n
      \  \"application/call-completion\" data format described in Section 10.\n   The
      SUBSCRIBE request MAY contain an Accept header field.  If no\n   such header
      field is present, it has a default value of\n   \"application/call-completion\".
      \ If the header field is present, it\n   MUST include \"application/call-completion\".
      \ Of course, the\n   notifications generated by the server MUST be in one of
      the formats\n   specified in the Accept header field in the SUBSCRIBE request.\n"
    title: 9.5.  NOTIFY Bodies
  - contents:
    - "9.6.  Subscriber Generation of SUBSCRIBE Requests\n   Subscribers MUST generate
      SUBSCRIBE requests when they want to\n   subscribe to the call-completion event
      package at the terminating\n   side in order to receive CC notifications.  The
      generation of\n   SUBSCRIBE requests can imply the usage of a CC service-specific
      timer\n   as described in Section 9.4.\n"
    title: 9.6.  Subscriber Generation of SUBSCRIBE Requests
  - contents:
    - "9.7.  Notifier Processing of SUBSCRIBE Requests\n   Upon receiving a subscription
      refresh, the notifier MUST set the\n   \"expires\" parameter of the Subscription-State
      header field to a value\n   not higher than the current remaining duration of
      the subscription,\n   regardless of the value received in the Expires header
      field (if\n   present) of the subscription refresh.\n   If a subscription is
      not successful because the CC queue has reached\n   the maximum allowed number
      of entries (short-term denial), the\n   notifier MUST send a 480 Temporarily
      Unavailable response to the\n   subscriber, possibly with a retry-after parameter
      in accordance with\n   the notifier's policy.  If a subscription is not successful
      because a\n   condition has occurred that prevents and will continue to prevent
      the\n   CC service (long-term denial), the notifier MUST send a 403 Forbidden\n
      \  response to the subscriber.\n   A notifier MAY receive multiple forks of
      the same SUBSCRIBE, as\n   defined by Section 8.2.2.2 of [RFC3261].  In such
      a case, the\n   notifier MUST reject all but one of the SUBSCRIBEs with a 482
      Merged\n   Request response, unless some other failure response applies.\n   The
      CC information can be sensitive.  Therefore, all subscriptions\n   SHOULD be
      handled with consideration of the security considerations\n   discussed in Section
      11, in particular for verifying the identity of\n   the subscriber.\n"
    title: 9.7.  Notifier Processing of SUBSCRIBE Requests
  - contents:
    - "9.8.  Notifier Generation of NOTIFY Requests\n   Notifiers MUST generate NOTIFY
      requests when the CC request's state\n   changes to \"queued\" or to \"ready
      (for CC)\".  A NOTIFY that is sent\n   with non-zero expiration MUST contain
      the \"cc-state\" parameter.  The\n   parameter's value MUST be \"queued\" if
      the CC request represented by\n   the subscription is not at this time selected
      by the callee's monitor\n   for CC recall, and the parameter's value MUST be
      \"ready\" if the\n   request is at this time selected by the callee's monitor
      for CC\n   recall.\n   A NOTIFY sent with a zero expiration (e.g., as a confirmation
      of a\n   request to unsubscribe) MAY contain the \"cc-state\" parameter.\n   When
      the callee's monitor withdraws the selection of the request for\n   the CC recall
      (e.g., because the caller's agent has not initiated the\n   CC recall INVITE
      before the CC recall timer expires, or because the\n   agent has suspended the
      request from being considered for CC recall),\n   the notifier MUST send a NOTIFY
      to the subscription of the selected\n   request.  This NOTIFY MUST contain the
      \"cc-state\" parameter set to\n   \"queued\".\n   If the CC subscription was
      successful and the retain option is\n   supported at the callee, the NOTIFY
      MUST contain the\n   \"cc-service-retention\" parameter.\n"
    title: 9.8.  Notifier Generation of NOTIFY Requests
  - contents:
    - "9.9.  Subscriber Processing of NOTIFY Requests\n   When receiving a NOTIFY
      request with the cc-state set to \"ready\",\n   subscribers SHOULD suspend all
      other CC subscriptions for the\n   original call at other notifiers.  The receipt
      of a NOTIFY request\n   with the cc-state set to \"ready\" by the subscriber
      will also cause an\n   interaction with the instances at the subscriber's side
      that are\n   responsible for starting the CC recall.\n"
    title: 9.9.  Subscriber Processing of NOTIFY Requests
  - contents:
    - "9.10.  Handling of Forked Requests\n   Forked requests are expected to be common
      for the CC event type.  The\n   subscriber MUST be prepared to process NOTIFY
      requests from multiple\n   notifiers and to coordinate its processing of the
      information\n   obtained from them in accordance with the procedures in this\n
      \  document.\n"
    title: 9.10.  Handling of Forked Requests
  - contents:
    - "9.11.  Rate of Notifications\n   The CC service typically involves a single
      notification, per notifier\n   and per subscription, regarding the change to
      \"ready\" (for CC) but\n   MAY involve several notifications about the change
      to the \"ready\"\n   state, separated by a CC call that failed due to a busy
      callee.\n   Typically, notifications will be separated by at least tens of\n
      \  seconds.  Notifiers SHOULD NOT generate more than three notifications\n   for
      one subscription in any ten-second interval.  Since it is\n   important to avoid
      useless recalls, a notifier SHOULD send state\n   changes to \"queued\" from
      \"ready\" promptly.  Thus, a notifier SHOULD\n   NOT send a state change to
      \"ready\" as the third notification in a\n   ten-second interval, as that would
      make it impossible to promptly\n   send a further state change to \"queued\".\n"
    title: 9.11.  Rate of Notifications
  - contents:
    - "9.12.  State Agents\n   State agents have no defined role in the handling of
      the\n   call-completion event package.\n"
    title: 9.12.  State Agents
  title: 9.  'call-completion' Event Package
- contents:
  - "10.  CC Information Format\n   The following syntax specification uses the Augmented
    Backus-Naur\n   Form (ABNF) as described in [RFC5234].  The formal syntax for
    the\n   application/call-completion MIME type is described below.  In\n   general,
    the CC body is to be interpreted in the same way as SIP\n   headers: (1) the names
    of the lines are case-insensitive, (2) the\n   lines can be continued over line
    boundaries if the succeeding lines\n   start with horizontal white space, and
    (3) lines with unknown names\n   are to be ignored.  The header lines defined
    in this document can\n   occur at most once in any given CC information format
    document.\n   call-completion = 1*(cc-header CRLF)\n   cc-header = cc-state /
    cc-service-retention / cc-URI /\n               extension-header\n   The above
    rules whose names start with \"cc-\" are described below.\n   Other rules are
    described in [RFC3261].\n"
  - contents:
    - "10.1.  CC Status\n   The cc-state line indicates the CC status of a particular
      user with\n   an entry in a CC queue.  It MUST be present, unless the expiration\n
      \  time indicated in the NOTIFY is zero.\n   cc-state = \"cc-state\" HCOLON
      ( \"queued\" / \"ready\" )\n   The value \"queued\" indicates that a subscriber's
      entry in the CC\n   queue is not selected for CC recall.  The value \"ready\"
      indicates\n   that a user's entry in the CC queue has been selected for CC recall.\n"
    title: 10.1.  CC Status
  - contents:
    - "10.2.  CC Service-Retention Indication\n   The service-retention line indicates
      the support of the retain\n   option.  The retain option, if supported at the
      callee, will maintain\n   the entry in the CC queue, if a CC call has failed
      due to a callee\n   busy condition.  If present, this parameter indicates that
      the retain\n   option is supported; otherwise, it is not supported.  This parameter\n
      \  MAY be present in NOTIFY requests.\n   cc-service-retention = \"cc-service-retention\"
      HCOLON \"true\"\n"
    title: 10.2.  CC Service-Retention Indication
  - contents:
    - "10.3.  CC URI\n   The cc-URI line provides a URI that the agent SHOULD use
      as the\n   request-URI of the CC recall INVITE and the suspend/resume PUBLISH.\n
      \  It SHOULD be provided in all NOTIFYs.  The URI SHOULD be globally\n   routable
      and SHOULD uniquely identify the CCE in question.  The\n   syntax provides for
      generic-params in the value, but this document\n   defines no such parameters.
      \ Parameters that are not understood by\n   the subscriber MUST be retained
      with the URI.\n   cc-URI = \"cc-URI\" HCOLON addr-spec\n"
    title: 10.3.  CC URI
  title: 10.  CC Information Format
- contents:
  - "11.  Security Considerations\n   The CC facility allows the caller's agent to
    determine some status\n   information regarding the callee.  This information
    intrinsically\n   diminishes the privacy of the callee; in order to protect\n
    \  sufficiently the privacy of the callee, the overall amount of\n   disclosure
    must be limited, and the amount of disclosure to any\n   single caller must be
    limited.\n   Of course, if a caller is not permitted to call the callee, that\n
    \  caller should not be allowed to establish a CC subscription.  Callers\n   that
    are particularly sensitive about their privacy may reject all CC\n   subscriptions.
    \ But in the ordinary case, the optimal protection is\n   to permit any caller
    to subscribe but prevent any caller from\n   subscribing for too long, or too
    often, or in a pattern that does not\n   reveal to the callee (through CC calls)
    that the subscriptions are\n   taking place.\n   In legitimate use, CC event subscriptions
    will be made in stereotyped\n   ways that limit the disclosure of status information:\n
    \  1.  When a subscriber is selected for CC, a call should arrive\n       promptly
    for the callee, or the subscription should be\n       terminated.  This expectation
    may be violated by a race condition\n       between selection of the subscription
    for CC and the caller\n       becoming unavailable, but it should be rare that
    a single\n       subscription will exhibit the race condition more than once.\n
    \  2.  Subscriptions should not remain suspended for longer than the\n       expected
    duration of a call (a call by the caller to a third\n       party).\n   3.  Subscriptions
    should be initiated only shortly after failed\n       incoming calls.\n   4.  Most
    of the time, a callee should have no queued subscriptions.\n   Violations of these
    expectations should be detected by the callee's\n   monitor and reported as possible
    attempts at privacy violation.\n   The CC facility may enhance the effectiveness
    of Spam over Internet\n   Telephony (SPIT) via the following technique: the caller
    makes calls\n   to a group of callees.  The caller then requests CC for the calls\n
    \  that do not connect to the callees.  The resultant CC calls are\n   probably
    more likely to reach the callees than original calls to a\n   further group of
    targets.\n   In order to prevent senders of SUBSCRIBE and PUBLISH requests from\n
    \  causing Denial-of-Service (DoS) attacks and suspending other CC\n   entries
    than their own, a mechanism to correlate the identity of the\n   original caller
    and the sender of SUBSCRIBE and PUBLISH requests is\n   needed.  The RECOMMENDED
    mechanism to authenticate the identity of\n   the originator of requests relevant
    to CC is the SIP Identity\n   mechanism [RFC4474].  Alternatively, CC agents and
    monitors within an\n   administrative domain or federation of domains MAY use
    the mechanism\n   described in [RFC3325] to authenticate their identities with
    a\n   P-Asserted-Identity header field.\n   Furthermore, the use of the presence
    server to suspend or resume\n   SHOULD be limited to a caller that has an active
    queue in the\n   callee's monitor.  This can be achieved first by monitoring and\n
    \  logging incoming calls to the callee and the destination where CC\n   indication
    was sent, then to ensure that subscription to the\n   call-completion event package
    is permitted only within a short time\n   frame after the initial call failed
    and to only accept PUBLISH\n   requests to the presence server if there is an
    active queue for the\n   caller in question.\n   Note that regarding authentication/authorization/billing
    logic\n   subject to operator policy, CC calls or subscriptions do not differ\n
    \  from other basic calls or event subscriptions.\n"
  title: 11.  Security Considerations
- contents:
  - '12.  IANA Considerations

    '
  - contents:
    - "12.1.  SIP Event Package Registration for CC\n   This specification registers
      an event package, based on the\n   registration procedures defined in [RFC6665].
      \ The following\n   information is required for such a registration:\n   Package
      name: call-completion\n   Is this registration for a Template-Package: No.\n
      \  Published specification: RFC 6910.\n   Person & email address to contact
      for further information: Martin\n   Huelsemann, martin.huelsemann@telekom.de\n"
    title: 12.1.  SIP Event Package Registration for CC
  - contents:
    - "12.2.  MIME Registration for application/call-completion\n   MIME media type
      name: application\n   MIME subtype name: call-completion\n   Required parameters:
      none.\n   Optional parameters: none.\n   Encoding considerations: Consists of
      lines of UTF-8-encoded\n   characters, ended with CRLF.\n   Security considerations:
      There are no security considerations\n   internal to the media type.  Its typical
      usage involves the security\n   considerations described in RFC 6910.\n   Interoperability
      considerations: See RFC 6910.\n   Published specification: RFC 6910.\n   Applications
      that use this media type: The implementations of the CC\n   features of the
      Session Initiation Protocol.\n   Additional information:\n      Magic number(s):
      none\n      File extension(s): Not expected to be stored in files.\n      Macintosh
      file type code(s): Not expected to be stored in files.\n   Person & email address
      to contact for further information:\n   Martin Huelsemann, martin.huelsemann@telekom.de\n
      \  Intended usage: LIMITED USE\n   Restrictions on usage: none\n   Author/Change
      controller: The IETF\n"
    title: 12.2.  MIME Registration for application/call-completion
  - contents:
    - "12.3.  SIP/SIPS URI Parameter 'm'\n   This specification defines one new SIP/SIPS
      URI parameter 'm' as per\n   the registry created by [RFC3969].  It is used
      to identify that an\n   INVITE request is a CC call, or to further identify
      that a SUBSCRIBE\n   request is for the call-completion event package.  The
      parameter may\n   have a value that describes the type of the CC operation,
      as\n   described in this specification.\n   Name of the parameter: m\n   Predefined
      values: yes\n   Reference: [RFC6910]\n"
    title: 12.3.  SIP/SIPS URI Parameter 'm'
  - contents:
    - "12.4.  The 'purpose' Parameter Value 'call-completion'\n   This specification
      adds a new predefined value \"call-completion\" for\n   the 'purpose' header
      field parameter of the Call-Info header field.\n   This modifies the registry
      header field parameters and parameter\n   values by adding this RFC as a reference
      to the line for header field\n   \"Call-Info\" and parameter name 'purpose':\n
      \  Header field: Call-Info\n   Parameter name: purpose\n   Predefined values:
      yes\n   Reference: [RFC3261] [RFC5367] [RFC6910]\n"
    title: 12.4.  The 'purpose' Parameter Value 'call-completion'
  - contents:
    - "12.5.  'm' Header Parameter for Call-Info\n   This specification extends [RFC3261]
      to add a new header field\n   parameter 'm' to the Call-Info header field.  This
      adds a row to the\n   registry header field parameters and parameter values:\n
      \  Header field: Call-Info\n   Parameter name: m\n   Predefined values: yes\n
      \  Reference: [RFC6910]\n   The predefined values are 'BS', 'NR', and 'NL'.\n"
    title: 12.5.  'm' Header Parameter for Call-Info
  title: 12.  IANA Considerations
- contents:
  - "13.  Acknowledgements\n   Thanks to Paul Kyzivat, John Elwell, Keith Drage, Andrew
    Hutton,\n   Thomas Stach, Dennis Luebbers, and Christer Holmberg, who provided\n
    \  helpful comments, feedback, and suggestions.\n"
  title: 13.  Acknowledgements
- contents:
  - '14.  References

    '
  - contents:
    - "14.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n
      \             A., Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler,
      \"SIP: Session Initiation Protocol\", RFC 3261,\n              June 2002.\n
      \  [RFC3515]  Sparks, R., \"The Session Initiation Protocol (SIP) Refer\n              Method\",
      RFC 3515, April 2003.\n   [RFC3863]  Sugano, H., Fujimoto, S., Klyne, G., Bateman,
      A., Carr,\n              W., and J. Peterson, \"Presence Information Data Format\n
      \             (PIDF)\", RFC 3863, August 2004.\n   [RFC3903]  Niemi, A., \"Session
      Initiation Protocol (SIP) Extension\n              for Event State Publication\",
      RFC 3903, October 2004.\n   [RFC3969]  Camarillo, G., \"The Internet Assigned
      Number Authority\n              (IANA) Uniform Resource Identifier (URI) Parameter\n
      \             Registry for the Session Initiation Protocol (SIP)\",\n              BCP
      99, RFC 3969, December 2004.\n   [RFC4235]  Rosenberg, J., Schulzrinne, H.,
      and R. Mahy, \"An INVITE-\n              Initiated Dialog Event Package for
      the Session Initiation\n              Protocol (SIP)\", RFC 4235, November 2005.\n
      \  [RFC4474]  Peterson, J. and C. Jennings, \"Enhancements for\n              Authenticated
      Identity Management in the Session\n              Initiation Protocol (SIP)\",
      RFC 4474, August 2006.\n   [RFC5234]  Crocker, D. and P. Overell, \"Augmented
      BNF for Syntax\n              Specifications: ABNF\", STD 68, RFC 5234, January
      2008.\n   [RFC5367]  Camarillo, G., Roach, A.B., and O. Levin, \"Subscriptions\n
      \             to Request-Contained Resource Lists in the Session\n              Initiation
      Protocol (SIP)\", RFC 5367, October 2008.\n   [RFC5627]  Rosenberg, J., \"Obtaining
      and Using Globally Routable User\n              Agent URIs (GRUUs) in the Session
      Initiation Protocol\n              (SIP)\", RFC 5627, October 2009.\n   [RFC6665]
      \ Roach, A.B., \"SIP-Specific Event Notification\", RFC 6665,\n              July
      2012.\n"
    title: 14.1.  Normative References
  - contents:
    - "14.2.  Informative References\n   [ETS300.356-18]\n              European Telecommunications
      Standards Institute,\n              \"Completion of Calls to Busy Subscriber
      (CCBS)\n              supplementary service\", February 1995.\n   [ITU-T.Q.733]\n
      \             International Telecommunication Union, \"Description for\n              Call
      Completion Supplementary Services Using SS No. 7\",\n              February
      1995.\n   [RFC3325]  Jennings, C., Peterson, J., and M. Watson, \"Private\n
      \             Extensions to the Session Initiation Protocol (SIP) for\n              Asserted
      Identity within Trusted Networks\", RFC 3325,\n              November 2002.\n
      \  [RFC3725]  Rosenberg, J., Peterson, J., Schulzrinne, H., and G.\n              Camarillo,
      \"Best Current Practices for Third Party Call\n              Control (3pcc)
      in the Session Initiation Protocol (SIP)\",\n              BCP 85, RFC 3725,
      April 2004.\n   [RFC5359]  Johnston, A., Sparks, R., Cunningham, C., Donovan,
      S., and\n              K. Summers, \"Session Initiation Protocol Service\n              Examples\",
      BCP 144, RFC 5359, October 2008.\n"
    title: 14.2.  Informative References
  title: 14.  References
- contents:
  - "Appendix A.  Example Caller's Agent\n   This section outlines how an autonomous
    caller's agent can operate\n   using only standard SIP features to interact with
    the caller's UA.\n   This example is suitable only as a learning aid, as its performance\n
    \  is poor.\n   The agent monitors calls made from the UA(s) by subscribing to
    the\n   dialog event package of the UA(s).\n   The UA(s) or their proxy routes
    calls made with either of two special\n   dial sequences to the agent, which interprets
    the INVITEs as\n   indications to make a CC request with BS or NR or NL mode for
    the\n   latest call made by the UA.\n   The agent monitors the status of the UA(s)
    for availability to be\n   used for a CC call by examining the dialog events.\n
    \  The agent indicates to the UA(s) that CC recall is in progress by\n   making
    call to the UA(s).  If the UA is answered, the agent assumes\n   that the caller
    is available and plays pre-recorded audio to indicate\n   that CC recall is in
    progress.\n   After playing the pre-recorded audio, the caller's agent uses REFER\n
    \  to order the UA to make the CC call to the callee.\n"
  title: Appendix A.  Example Caller's Agent
- contents:
  - "Appendix B.  Example Callee's Monitor\n   This section outlines how an autonomous
    callee's monitor can operate\n   using only standard SIP features to interact
    with the callee's UA.\n   This example is suitable only as a learning aid, as
    its performance\n   is poor.\n   The callee's monitor monitors calls made to the
    UA(s) by subscribing\n   to the dialog events of the UA(s).  This enables it to
    determine\n   their Call-Ids and their final response statuses.\n   The proxy
    for the UA(s) routes to the callee's monitor any SUBSCRIBEs\n   for the call-completion
    event package directed to the URIs serviced\n   by the UA(s).\n   The callee's
    monitor monitors the status of the UA(s) to determine\n   when they are in a suitable
    state to receive a CC call by watching\n   the busy/not-busy status of the UA(s):
    for example, a UA is available\n   for CCBS when it is not busy, but a UA is available
    for CCNR when it\n   becomes not busy after being busy with an established call.\n"
  title: Appendix B.  Example Callee's Monitor
- contents:
  - "Authors' Addresses\n   Dale R. Worley\n   Ariadne Internet Services, Inc.\n   738
    Main St.\n   Waltham, MA  02451\n   US\n   Phone: +1 781 647 9199\n   EMail: worley@ariadne.com\n
    \  Martin Huelsemann\n   Deutsche Telekom\n   Heinrich-Hertz-Strasse 3-7\n   Darmstadt
    \ 64307\n   Germany\n   Phone: +4961515812765\n   EMail: martin.huelsemann@telekom.de\n
    \  URI:   http://www.telekom.de\n   Roland Jesske\n   Deutsche Telekom\n   Heinrich-Hertz-Strasse
    3-7\n   Darmstadt  64307\n   Germany\n   Phone: +4961515812766\n   EMail: r.jesske@telekom.de\n
    \  URI:   http://www.telekom.de\n   Denis Alexeitsev\n   TeleFLASH\n   Mainzer
    Landstrasse 47\n   Frankfurt  60329\n   Germany\n   Phone: +49-69-257-378-230\n
    \  EMail: alexeitsev@teleflash.com\n   URI:   http://www.teleflash.com\n"
  title: Authors' Addresses
