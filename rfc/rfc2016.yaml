- title: __initial_text__
  contents:
  - '                     Uniform Resource Agents (URAs)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo defines an Experimental Protocol for the Internet\n\
    \   community.  This memo does not specify an Internet standard of any\n   kind.\
    \  Discussion and suggestions for improvement are requested.\n   Distribution\
    \ of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This paper presents an experimental architecture for an agent system\n\
    \   that provides sophisticated Internet information access and\n   management.\
    \  Not a generalized architecture for active objects that\n   roam the Internet,\
    \ these agents are modeled as extensions of existing\n   pieces of the Internet\
    \ information infrastructure.  This experimental\n   agent technology focuses\
    \ on the necessary information structures to\n   encapsulate Internet activities\
    \ into objects that can be activated,\n   transformed, and combined into larger\
    \ structured activities.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   Several people have shared thoughts and viewpoints that\
    \ have helped\n   shape the thinking behind this work over the past few years.\
    \  We'd\n   like to thank, in particular, Chris Weider, Patrik Faltstrom, Michael\n\
    \   Mealling, Alan Emtage, and the participants in the IETF URI Working\n   Group\
    \ for many thought-provoking discussions.\n   Sima Newell provided insightful\
    \ comments on the document -- thanks to\n   her it is much more readable!\n"
- title: Introduction
  contents:
  - "Introduction\n   This document outlines an experimental agent system architecture\
    \ that\n   was designed for the purpose of addressing high-level Internet\n  \
    \ activities through encapsulation of protocol-specific actions.\n   Originally\
    \ presented to the Uniform Resource Identifier (URI) working\n   group at the\
    \ IETF, this technology was seen as taking a step beyond\n   resource location\
    \ and resource naming.  By providing a structured\n   mechanism for abstracting\
    \ characteristics of desired information and\n   distancing the necessary access\
    \ incantations from the client, the\n   notion of a Uniform Resource Agent (URA)\
    \ was created.\n   The evolution of Internet information systems has been characterized\n\
    \   by building upon successive layers of encapsulated technologies.\n   Machine\
    \ address numbers were devised, and then encapsulated in\n   advertised machine\
    \ names, which has allowed the evolution of the\n   Domain Name System (DNS) [RFC1034,\
    \ RFC1035].  Protocols were\n   developed for accessing Internet resources of\
    \ various descriptions,\n   and then uniform mechanisms for specifying resource\
    \ locations,\n   standardized across protocol types, were developed (URLs) [RFC1738].\n\
    \   Each layer of Internet information primitives has served as the\n   building\
    \ blocks for the next level of abstraction and sophistication\n   of information\
    \ access, location, discovery and management.\n   The work described in this paper\
    \ is an experimental system designed\n   to take another step in encapsulation.\
    \  While TCP/IP protocols for\n   routing, addressing, etc, have permitted the\
    \ connection and\n   accessibility of a plethora of information services on the\
    \ Internet,\n   these must yet be considered a diverse collection of heterogeneous\n\
    \   resources.  The World Wide Web effort is the most successful to date\n   in\
    \ attempting to knit these resources into a cohesive whole.\n   However, the activity\
    \ best-supported by this structure is (human)\n   browsing of these resources\
    \ as documents.  The URA initiative\n   explores the possibility of specifying\
    \ an activity with the same kind\n   of precision accorded to resource naming\
    \ and identification.  By\n   focusing on activities, and not actions, URAs encapsulate\
    \ resource\n   access mechanisms based on commonality of information content,\
    \ not\n   protocol similarity.\n   An invoker -- human or otherwise -- may delegate\
    \ an entire set of\n   tasks to a fully-instantiated URA.  The nature of the tasks\
    \ is\n   completely specified by the agent, because it encapsulates knowledge\n\
    \   about relevant Internet resources and the information required in\n   order\
    \ to access them.  In this way, URAs insulate invokers from the\n   details of\
    \ Internet protocols while allowing them to carry out high-\n   level Internet\
    \ activities (such as searching a set of web pages and\n   news groups relevant\
    \ to a given topic).  Also, by formally specifying\n   a high-level Internet activity\
    \ in an agent, the same activity can be\n   repeated at a later date by the same\
    \ invoker, someone else or even\n   another agent. Moreover, the agent object\
    \ may easily be modified to\n   carry out another related task.\n   More detail\
    \ describing the underlying philosophy of this particular\n   approach can be\
    \ found in [IIAW95].\n"
- title: Examples
  contents:
  - "Examples\n   As a very simple example, consider the client task of subscribing\
    \ to\n   a mailing list.  There are many mechanisms for providing users with\n\
    \   information necessary to complete a subscription.  Currently, all\n   applications\
    \ which provide the ability to subscribe to mailing lists\n   must contain protocol-aware\
    \ code to carry out the task once the\n   requisite personal data has been solicited\
    \ from the user.\n   Furthermore, any application program that embeds the ability\
    \ to\n   subscribe in its code necessarily limits the set of mailing lists to\n\
    \   which a client can subscribe (i.e, to those types foreseen by the\n   software's\
    \ creators).  If, instead, there is an agent to which this\n   task can be delegated,\
    \ all applications can make use of the agent,\n   and that agent becomes responsible\
    \ for carrying out the necessary\n   interactions to complete the subscription.\
    \  Furthermore, that agent\n   may be a client to other agents which can supply\
    \ particular\n   information about how to subscribe to new types of mail servers,\
    \ etc.\n   URAs have been explored as an agent technology to address just these\n\
    \   types of issues.\n"
- title: Relationship to Other Internet Agents
  contents:
  - "Relationship to Other Internet Agents\n   A number of Internet-aware agent and\
    \ transportable code systems have\n   become popular -- Java [JAVA], TCL [TCL]\
    \ and Safe-TCL, Telescript\n   [TELE], and the TACOMA system [TACOMA], to name\
    \ a few of them.  To\n   understand the scope of the problem that URAs tackle,\
    \ it is helpful\n   to understand how these systems differ from the URA approach.\
    \  Some\n   of these agent systems, like Java, focus on providing mechanisms for\n\
    \   creating and distributing (inter)active documents in the World Wide\n   Web.\
    \  Others, like TACOMA, have more general intentions of providing\n   environments\
    \ for mobile, interacting processes.\n   While each of these systems makes its\
    \ individual contribution to\n   solving the transportation, communication, and\
    \ security issues\n   normally associated with agent systems, they yield more\
    \ objects that\n   exist within the Internet information space.  That is, while\
    \ they may\n   permit individual users to have a more sophisticated interaction\
    \ with\n   a particular information resource, they do not address the more\n \
    \  general Internet problems of naming, identifying, locating resources,\n   and\
    \ locating the same or similar resources again at a later date. It\n   is this\
    \ set of problems that URAs specifically set out to address.\n   In order to create\
    \ these URA objects that encapsulate a set of\n   Internet activities, it is necessary\
    \ to specify their operating\n   environment and design structure.  Together,\
    \ these form an\n   experimental architecture for URAs, which can be evaluated\
    \ in a\n   preliminary way through a prototype implementation. The remainder of\n\
    \   this paper describes such an experimental architecture, and outlines\n   a\
    \ prototype application built to test the concepts involved in the\n   creation\
    \ and execution of URAs.\n"
- title: The Experimental Architecture
  contents:
  - "The Experimental Architecture\n   The main goal in designing the URA architecture\
    \ was to provide a\n   mechanism for separating client need descriptions from\
    \ the\n   specifications of mechanisms for satisfying those needs.  For\n   example,\
    \ from the client's perspective, the need to find MIDI music\n   files is quite\
    \ distinct from the particular Internet resource actions\n   that might be necessary\
    \ to find them at a given point in time.  This\n   one need might be best met\
    \ by integrating information from several\n   very different sources.  Also, the\
    \ client may have the same need on a\n   different day, but there may be new or\
    \ different resources to call on\n   to satisfy it.\n   A further goal was to\
    \ provide very structured specifications of the\n   Internet actions carried out\
    \ by a particular URA.  By making the\n   structure of an action explicit, it\
    \ becomes possible to operate on\n   portions of an agent structure without requiring\
    \ an understanding of\n   the complete semantics of its activity.\n   At the centre\
    \ of the URA architecture is the concept of a\n   (persistent) specification of\
    \ an activity.  For purposes that should\n   become clear as the expected usage\
    \ of URAs is described in more\n   detail, we choose to support this concept with\
    \ the following\n   requirements of the architecture:\n   - there is a formalized\
    \ environment in which these specifications\n     are examined and executed and\
    \ otherwise manipulated.  This is\n     referred to as a URAgency.\n   - the activity\
    \ specifications are modular, and independent of a\n     given URAgency environment.\
    \  Thus, they exist as object constructs\n     that can be shared amongst URAgencies.\
    \  There is a standardized\n     _virtual_ structure of these URA objects, although\
    \ different\n     types may exist, with different underlying implementations.\n"
- title: Basic URAgency Requirements
  contents:
  - "Basic URAgency Requirements\n   In the most abstract sense, a URAgency is a software\
    \ system that\n   manipulates URA objects.  In the terminology of objects, a URAgency\n\
    \   identifies the types of URAs it handles, and is responsible for\n   applying\
    \ methods to objects of those types.  For the purposes of this\n   experimental\
    \ work, the only methods it is required to support are\n   those to get information\
    \ about a given URA, and to execute a URA.\n   The expected result of applying\
    \ the \"get information\" method to a URA\n   is a description of some or all\
    \ of the URA following the standardized\n   virtual structure of a URA object,\
    \ outlined below.\n   The appropriate way to \"execute\" a URA is to supply information\
    \ for\n   the individual URA data segments (in effect, to permit the creation\n\
    \   of an instance of a virtual object), or to identify a URA instance.\n   Again,\
    \ the information is to be supplied in accordance with the\n   virtual structure\
    \ below.\n   A URAgency claiming to handle a particular type of URA must have\
    \ the\n   ability to map the implementation structure of that type of URA into\n\
    \   and out of the standard virtual URA structure. The URAgency must also\n  \
    \ know how to activate the URA, and it must satisfy any runtime\n   dependencies\
    \ for that type of URA.\n   For example, a URA type may consist of a Pascal program\
    \ binary which,\n   when run with particular command line arguments, yields information\n\
    \   in the standard URA object structure.  Activating this type of URA\n   might\
    \ consist of executing the Pascal binary with an input file\n   containing all\
    \ the necessary data segments.  A URAgency claiming to\n   handle this sort of\
    \ URA type must first be able to provide an\n   environment to execute the Pascal\
    \ binary (for whatever platform it\n   was compiled), and also be able to interact\
    \ with the Pascal binary\n   according to these conventions to get information\
    \ about the URA, or\n   execute it.\n   As an alternative example, a URA type\
    \ may consist of a script in some\n   interpreted language, with the URA object\
    \ structure embedded as data\n   structures within the script.  A URAgency handling\
    \ this type of URA\n   might have to be able to parse the script to pull out the\
    \ standard\n   URA object structure, and provide the script language interpreter\
    \ for\n   the purposes of executing the URA.\n"
- title: URA Object Structure
  contents:
  - "URA Object Structure\n   In order to capture the necessary information for carrying\
    \ out the\n   type of Internet activity described in the introductory paragraphs\
    \ of\n   this document, six basic (virtual) components of a URA object have\n\
    \   been identified.  Any implementation of a URA type is expected to be\n   able\
    \ to conform to this structure within the context of a URAgency.\n   The six basic\
    \ components of a URA object are:\n"
- title: 'URA HEADER:'
  contents:
  - "URA HEADER:\n        Identification of the URA object, including a URA name,\
    \ type\n        and abstract, creator name, and the resources required by the\n\
    \        URA.\n"
- title: 'ACTIVATION DATA:'
  contents:
  - "ACTIVATION DATA:\n        Specification of the data elements required to carry\
    \ out the\n        URA activity.  For example, in the case of an Internet search\n\
    \        for \"people\", this could include specification of fields for\n    \
    \    person name, organization, e-mail address.\n"
- title: 'TARGETS:'
  contents:
  - "TARGETS:\n        Specification of the URL/URN's to be accessed to carry out\
    \ the\n        activity.  Note that, until URN's are in common use, the\n    \
    \    ability to adjust URLs will be necessary.  A key issue for\n        URAs\
    \ is the ability to transport them and activate them far\n        from the creator's\
    \ originating site.  This may have\n        implications in terms of accessibility\
    \ of resource sites.  For\n        example, a software search created in Canada\
    \ will likely\n        access a Canadian Archie server, and North American ftp\
    \ sites.\n        However, an invoker in Australia should not be obliged to edit\n\
    \        the URA object in order to render it relevant in Australia.\n       \
    \ The creator, then, can use this section to specify the\n        expected type\
    \ of service, with variables for the parts\n        that can be modified in context\
    \ (e.g., the host name for an\n        Archie server, or a mirror ftp site).\n"
- title: 'EXPERIENCE INFORMATION:'
  contents:
  - "EXPERIENCE INFORMATION:\n        Specification of data elements that are not\
    \ strictly involved\n        in conversing with the targets in order to carry\
    \ out the\n        agent's activity.  This space can be used to store information\n\
    \        from one invocation of a URA instance to the next.\n        This kind\
    \ of information could include date of last\n        execution, or URLs of resources\
    \ located on a previous\n        invocation of the agent.\n"
- title: 'ACTIVITY:'
  contents:
  - "ACTIVITY:\n        If URAs were strictly data objects, specifying required data\n\
    \        and URL/URN's would suffice to capture the essence of the\n        composite\
    \ net interaction.  However, the variability of\n        Internet resource accesses\
    \ and the scope of what URAs could\n        accomplish in the net environment\
    \ seem to suggest the need to\n        give the creator some means of organizing\
    \ the instantiation of\n        the component URL/URN's.  Thus, the body of the\
    \ URA should\n        contain a scripting mechanism that minimally allows\n  \
    \      conditional instantiation of individual URL/URN's.  These\n        conditions\
    \ could be based on which (content) data elements the\n        user provided,\
    \ or accessibility of one URL/URN, etc.  It also\n        provides a mechanism\
    \ for suggesting scheduling of URL/URN\n        instantiation.\n        The activity\
    \ is specified by a script or program in a language\n        specified by the\
    \ URA type, or by the URA header information.\n        All the required activation\
    \ data, targets, and experience\n        information are referenced by their specification\
    \ names.\n"
- title: 'RESPONSE FILTER:'
  contents:
  - "RESPONSE FILTER:\n        The main purpose of the ACTIVITY module is to specify\
    \ the\n        steps necessary to take the ACTIVATION DATA, contact the\n    \
    \    TARGETS, and collect responses from those services.  The\n        purpose\
    \ of the RESPONSE FILTER module is to transform those\n        responses into\
    \ the result of the URA invocation.  This\n        transformation may be along\
    \ the lines of reformatting\n        some text, or it may be a more elaborate\
    \ interpretation\n        such as a relevance rating for a retrieved HTML page.\n\
    \        The response filter is specified by a script or program in a\n      \
    \  language specified by the URA type, or by the URA header\n        information.\
    \  All the required activation data, targets, and\n        experience information\
    \ are referenced by their specification\n        names.\n   See Appendix 1 for\
    \ a more detailed description of the components of a\n   URA.  Appendix 2 contains\
    \ a sample virtual URA structure.\n"
- title: The Architecture in Action
  contents:
  - "The Architecture in Action\n   Having introduced the required capabilities of\
    \ the URAgency and\n   virtual structure of URA objects, it is now time to elaborate\
    \ on the\n   tasks and interactions that are best supported by URAs.\n   URAs\
    \ are constructed by identifying net-based resources of interest\n   (targets)\
    \ to carry out a particular task.  The activation data\n   component of a URA\
    \ is the author's mechanism for specifying (to the\n   invoker) the elements of\
    \ information that are required for successful\n   execution .  An invoker creates\
    \ an instance of a URA object by\n   providing data that is consistent with, or\
    \ fills in, this template.\n   Such an instance encapsulates everything that the\
    \ agent \"needs to\n   know\" in order to contact the specified target(s), make\
    \ a request of\n   the resource (\"get\", \"search\", etc.) and return a result\
    \ to the\n   invoker.  This encapsulation is a sophisticated identification of\
    \ the\n   task results.\n   For example, in the case of a mailing list subscription\
    \ URA, the\n   creator will identify the target URL for a resource that handles\
    \ list\n   subscription (e.g., an HTML form), and specify the data required by\n\
    \   that resource (such as user name, user mail address, and mailing list\n  \
    \ identifier).  When an invoker provides that information and\n   instantiates\
    \ the URA, the resulting object completely encapsulates\n   all that is needed\
    \ in order to subscribe the user -- the subscription\n   result is identified.\n\
    \   URAs are manipulated through the application of methods.  This, in\n   turn\
    \ , is governed by the URAgency with which the invoker is\n   interacting.  However,\
    \ because the virtual structure of URAs is\n   represented consistently across\
    \ URA types and URAgencies, a URAgency\n   can act as one of the targets of a\
    \ URA.  Since methods can be applied\n   to URAs remotely, URAs can act as invokers\
    \ of URAs.  This can yield a\n   complex structure of task modules.\n   For example,\
    \ a URA designed to carry out a generalized search of\n   book-selling resources\
    \ might make use of individual URAs tailored to\n   each resource.  Thus, the\
    \ top-level URA becomes the orchestrating URA\n   for access to a number of disparate\
    \ resources, while being insulated\n   from the minute details of accessing those\
    \ resources.\n"
- title: A Prototype Implementation
  contents:
  - "A Prototype Implementation\n   The experimental work with URAs includes a prototype\
    \ implementation\n   of URA objects.  These are written in the Tcl scripting language.\
    \  A\n   sample prototype Tcl URA can be found in Appendix 3.\n   The URAgency\
    \ that was created to handle these URAs is part of the\n   Silk Desktop Internet\
    \ Resource Discovery tool. Silk provides a\n   graphical user interface environment\
    \ that allows the user to access\n   and search for Internet information without\
    \ having to know where to\n   look or how to look. Silk presents a list of the\
    \ available URAs to\n   carry out these activities (e.g., \"search for tech reports\"\
    \ or\n   \"hotlist\").  For each activity, the user is prompted for the\n   activation\
    \ data, and Silk's URAgency executes the URA.  The Silk\n   software also supports\
    \ the creation and maintenance of URA object\n   instances.  Users can add new\
    \ URAs by creating new Tcl scripts (per\n   the guidelines in the \"URA Writer's\
    \ Guide\", available with the Silk\n   software.  See [SILK]).  The Silk graphical\
    \ interface hides some of\n   the mechanics of the underlying URAgency.  A more\
    \ directly-accessible\n   version of this URAgency will become available.\n"
- title: Conclusions
  contents:
  - "Conclusions\n   This work was originally conceived as an extension to the family\
    \ of\n   Uniform Resource Identifiers (URIs): Uniform Resource Locators\n   (URLs),\
    \ Uniform Resource Characteristics (URCs), and the proposed\n   Uniform Resource\
    \ Names (URNs).  The approach of formalizing the\n   characteristics of an information\
    \ task in a standardized object\n   structure is seen as a means of identifying\
    \ a class of resources, and\n   contributes to the level of abstraction with which\
    \ users can refer to\n   Internet resources.\n   Although still in its experimental\
    \ stages, this work has already\n   evoked interest and shown promise in the area\
    \ of providing mechanisms\n   for building more advanced tools to interact with\
    \ the Internet at a\n   more sophisticated level than just browsing web pages.\n\
    \   One of the major difficulties that has been faced in developing a\n   collection\
    \ of URAs is the brittleness induced by interacting with\n   services that are\
    \ primarily geared towards human-users.  Small\n   changes in output formats that\
    \ are easily discernible by the human\n   eye can be entirely disruptive to a\
    \ software client that must apply a\n   parsing and interpretation mechanism based\
    \ on placement of cues in\n   the text.  This problem is certainly not unique\
    \ to URAs -- any\n   software acting upon results from such a service is affected.\n\
    \   Perhaps there is the need for an evolution of \"service entrances\" to\n \
    \  information servers on the Internet -- mechanisms for getting \"just\n   the\
    \ facts\" from an information server.  Of course, one way to provide\n   such\
    \ access is for the service provider to develop and distribute a\n   URA that\
    \ interacts with the service.  When the service's interface\n   changes, the service\
    \ provider will be moved to update the URA that\n   was built to access it reliably.\n\
    \   Work will continue to develop new types of URAs, as well as other\n   URAgencies.\
    \  This will necessitate the creation of URAgency\n   interaction standards --\
    \ the \"common virtual URA object structure\" is\n   the first step towards defining\
    \ a lingua franca among URAs of\n   disparate types and intention.\n"
- title: References
  contents:
  - 'References

    '
- title: '[IIAW95] Leslie L. Daigle, Peter Deutsch, "Agents for Internet'
  contents:
  - "[IIAW95] Leslie L. Daigle, Peter Deutsch, \"Agents for Internet\n   Information\
    \ Clients\", CIKM'95 Intelligent Information Agents\n   Workshop, December 1995.\n\
    \   Available from\n     <http://www.bunyip.com/products/silk/silktree/uratree/iiaw95.ps>\n"
- title: '[JAVA] "The Java Language: A White Paper" Available from'
  contents:
  - "[JAVA] \"The Java Language: A White Paper\" Available from\n     <http://java.sun.com/1.0alpha2/doc/overview/java/index.html>\n"
- title: '[RFC1034] Mockapetris, P., "Domain Names - Concepts and Facilities",'
  contents:
  - "[RFC1034] Mockapetris, P., \"Domain Names - Concepts and Facilities\",\n   STD\
    \ 13, RFC 1034, November 1987.\n"
- title: '[RFC1035] Mockapetris, P., "Domain Names - Implementation and'
  contents:
  - "[RFC1035] Mockapetris, P., \"Domain Names - Implementation and\n   Specification\"\
    , STD 13, RFC 1035, November 1987.\n"
- title: '[RFC1738] T. Berners-Lee, L. Masinter, M. McCahill, "Uniform Resource'
  contents:
  - "[RFC1738] T. Berners-Lee, L. Masinter, M. McCahill, \"Uniform Resource\n   Locators\
    \ (URL)\", RFC 1738, December 1994.\n"
- title: '[SILK] Bunyip''s Silk project homepage:'
  contents:
  - "[SILK] Bunyip's Silk project homepage:\n     <http://www.bunyip.com/products/silk/>\n"
- title: '[SILKURA] Silk URA information:'
  contents:
  - "[SILKURA] Silk URA information:\n     <http://www.bunyip.com/products/silk/silktree/uraintro.html>\n"
- title: '[TACOMA] Johansen, D. van Renesse, R. Schneider, F. B., "An'
  contents:
  - "[TACOMA] Johansen, D. van Renesse, R. Schneider, F. B., \"An\n   Introduction\
    \ to the TACOMA Distributed System\", Technical Report\n   95-23, Department of\
    \ Computer Science, University of Tromso,\n   Norway, June 1995.\n"
- title: '[TCL] Ousterhout, J. K. "Tcl and the Tk Toolkit", Addison Wesley,'
  contents:
  - "[TCL] Ousterhout, J. K. \"Tcl and the Tk Toolkit\", Addison Wesley,\n   1994.\n"
- title: '[TELE] White, J. E., "Telescript Technology: The Foundation for the'
  contents:
  - "[TELE] White, J. E., \"Telescript Technology: The Foundation for the\n   Electronic\
    \ Marketplace\", General Magic White Paper, General Magic\n   Inc., 1994.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Leslie Daigle\n   Peter Deutsch\n   Bill Heelan\n   Chris\
    \ Alpaugh\n   Mary Maclachlan\n   Bunyip Information Systems, Inc.\n   310 St.\
    \ Catherine St. West\n   Suite 300\n   Montreal, Quebec, CANADA\n   H2X 2A1\n\
    \   Phone:  (514) 875-8611\n   EMail: ura-bunyip@bunyip.com\n"
- title: Appendix 1 -- Virtual URA Structure
  contents:
  - "Appendix 1 -- Virtual URA Structure\n   This appendix contains a BNF-style description\
    \ of the expected\n   virtual structure of a URA object.  This \"virtual structure\"\
    \ acts as\n   the canonical representation of the information encapsulated in\
    \ a\n   given URA.  It is expected that more information may optionally be\n \
    \  contained in the elements of the components --  the elements listed\n   here\
    \ are offered as the \"minimum\" or \"standard\" set.\n   N.B.:\n           []-delimited\
    \ items are optional\n           %% denotes a comment\n           \\0 represents\
    \ the empty string\n           |  is \"or\"\n           {} are literal characters\n\
    \   This form is used for convenience and clarity of expression --\n   whitespace\
    \ and ordering of individual elements are not considered\n   significant.\n"
- title: <VIRTUAL_URA> := {<virtual-ura-structure>}
  contents:
  - '<VIRTUAL_URA> := {<virtual-ura-structure>}

    '
- title: <virtual-ura-structure> := { URAHDR <ura-header> }
  contents:
  - "<virtual-ura-structure> := { URAHDR <ura-header> }\n                        \
    \   { ACTDATA <activation-data> }\n                           { TARG <targets>\
    \ }\n                           { EXPINFO <experience information> }\n       \
    \                    { ACTSPEC <activity> }\n                           { RESPFILT\
    \ <response filter> }\n"
- title: <ura-header> := { name <ura-name> }
  contents:
  - "<ura-header> := { name <ura-name> }\n                { author <ura-author> }\n\
    \                { version <ura-version> }\n                [ { lang <lang-dependencies>\
    \ } ]\n                [ { parent <parent-of-instance> } ]\n"
- title: <activation-data> := <act-data-element><activation-data> | \0
  contents:
  - '<activation-data> := <act-data-element><activation-data> | \0

    '
- title: <act-data-element> := {
  contents:
  - "<act-data-element> := {\n                       { name <data-elt-name> }\n  \
    \                     { response <data-elt-value> }\n                       {\
    \ prompt <data-elt-prompt> }\n                       [ { required <boolean> }\
    \ ]\n                       [ { default <data-default-val> } ]\n             \
    \         }\n"
- title: <targets> := <target-service><targets> | \0
  contents:
  - '<targets> := <target-service><targets> | \0

    '
- title: <target-service> := {
  contents:
  - "<target-service> := {\n                     { name <targ-url> }\n           \
    \          { protocol <url-protocol> }\n                     { url <url-spec>\
    \ }\n                     [ { <url-type-specific-data> } ]\n                 \
    \   }\n"
- title: <url-spec> :=  <complete-url> | <url-constructor>
  contents:
  - '<url-spec> :=  <complete-url> | <url-constructor>

    '
- title: <complete-url> := %% a complete, valid URL string
  contents:
  - "<complete-url> := %% a complete, valid URL string\n                     (e.g.,\
    \ http://www.bunyip.com/)\n"
- title: <url-constructor> := {
  contents:
  - "<url-constructor> := {\n                      { scheme <url-scheme-spec> }\n\
    \                      { host <url-host-spec> }\n                      [ { port\
    \ <url-port-spec> } ]\n                      { selector <url-selector-spec> }\n\
    \                     }\n"
- title: <url-scheme-spec> := {
  contents:
  - "<url-scheme-spec> := {\n                      { name <scheme-name> }\n      \
    \                { response <scheme-value> }\n                      { prompt <scheme-prompt>\
    \ }\n                     }\n"
- title: <url-host-spec> := {
  contents:
  - "<url-host-spec> := {\n                      { name <host-name> }\n          \
    \            { response <host-value> }\n                      { prompt <host-prompt>\
    \ }\n                   }\n"
- title: <url-port-spec> := {
  contents:
  - "<url-port-spec> := {\n                      { name <port-name> }\n          \
    \            { response <port-value> }\n                      { prompt <port-prompt>\
    \ }\n                   }\n"
- title: <url-selector-spec> := {
  contents:
  - "<url-selector-spec> := {\n                      { name <selector-name> }\n  \
    \                    { response <selector-value> }\n                      { prompt\
    \ <selector-prompt> }\n                       }\n"
- title: <experience information> := {
  contents:
  - "<experience information> := {\n                             { name <data-elt-name>\
    \ }\n                             { response <data-elt-value> }\n            \
    \                }\n"
- title: <activity> :=  <compound-string>
  contents:
  - '<activity> :=  <compound-string>

    '
- title: <response filter> := <compound-string>
  contents:
  - '<response filter> := <compound-string>

    '
- title: '%% Without requiring more detail...'
  contents:
  - '%% Without requiring more detail...

    '
- title: <compound-string> := <string>\n<compound-string> | \0
  contents:
  - '<compound-string> := <string>\n<compound-string> | \0

    '
- title: <boolean> := 0 | 1
  contents:
  - '<boolean> := 0 | 1

    '
- title: <ura-name> := <string>
  contents:
  - '<ura-name> := <string>

    '
- title: <ura-author> := <string>
  contents:
  - '<ura-author> := <string>

    '
- title: <ura-version> := <string>
  contents:
  - '<ura-version> := <string>

    '
- title: <lang-dependencies> := <string>
  contents:
  - '<lang-dependencies> := <string>

    '
- title: <parent-of-instance> := <string>
  contents:
  - '<parent-of-instance> := <string>

    '
- title: <data-elt-name> := <string>
  contents:
  - '<data-elt-name> := <string>

    '
- title: <data-elt-value> := <string>
  contents:
  - '<data-elt-value> := <string>

    '
- title: <data-elt-prompt> := <string>
  contents:
  - '<data-elt-prompt> := <string>

    '
- title: <data-elt-default> := <string>
  contents:
  - '<data-elt-default> := <string>

    '
- title: <data-default-val> := <string>
  contents:
  - '<data-default-val> := <string>

    '
- title: <targ-url> := <string>
  contents:
  - '<targ-url> := <string>

    '
- title: <url-protocol> := http-get | http-post | ...
  contents:
  - '<url-protocol> := http-get | http-post | ...

    '
- title: <url-type-specific-data> := <string>
  contents:
  - '<url-type-specific-data> := <string>

    '
- title: <scheme-name> := <string>
  contents:
  - '<scheme-name> := <string>

    '
- title: <scheme-value> := <string>
  contents:
  - '<scheme-value> := <string>

    '
- title: <scheme-prompt> := <string>
  contents:
  - '<scheme-prompt> := <string>

    '
- title: <host-name> := <string>
  contents:
  - '<host-name> := <string>

    '
- title: <host-value> := <string>
  contents:
  - '<host-value> := <string>

    '
- title: <host-prompt> := <string>
  contents:
  - '<host-prompt> := <string>

    '
- title: <port-name> := <string>
  contents:
  - '<port-name> := <string>

    '
- title: <port-value> := <string>
  contents:
  - '<port-value> := <string>

    '
- title: <port-prompt> := <string>
  contents:
  - '<port-prompt> := <string>

    '
- title: <url-selector-name> := <string>
  contents:
  - '<url-selector-name> := <string>

    '
- title: <url-selector-value> := <string>
  contents:
  - '<url-selector-value> := <string>

    '
- title: <url-selector-prompt> := <string>
  contents:
  - '<url-selector-prompt> := <string>

    '
- title: Appendix 2  -- Sample Virtual URA
  contents:
  - "Appendix 2  -- Sample Virtual URA\n               Representation\n   A valid\
    \ virtual representation of a Silk Tcl URA is presented below.\n   The actual\
    \ URA from which it was drawn is given in Appendix 3.\n"
- title: '{'
  contents:
  - "{\n   {URAHDR\n      {name {DejaNews Search}}\n      {author {Leslie Daigle}}\n\
    \      {version  {1.0}}\n   }\n   {ACTDATA\n      {name        {Topic Keywords}}\n\
    \      {prompt      {Topic Keywords}}\n      {response    {}}\n   }\n   {EXPINFO\n\
    \      {name        {Comments}}\n      {prompt      {Comments}}\n      {response\
    \    {}}\n   }\n   {ACTSPEC\n       {proc mapResponsesToDejanews {} {\n      \
    \     set resp \"\"\n           if {[uraAreResponsesSet {Topic Keywords}]} {\n\
    \             lappend resp [list query [uraGetSpecResponse {\n             Topic\
    \ Keywords}]]\n           }\n           return $resp\n         }\n      proc uraRun\
    \ {} {\n        global errorInfo\n        foreach serv [uraListOfServices] {\n\
    \          set u [uraGetServiceURL $serv]\n          switch -- $serv {\n     \
    \       dejanews {\n              if [catch {\n                set query [mapResponsesToDejanews]\n\
    \                if {$query != {}} {\n                    set result [uraHTTPPostSearch\
    \ $u $query]\n                    if {$result != \"\"} {\n                   \
    \   set list [dejanews_uraHTTPPostCanonicalize\n                      $result]\n\
    \                      puts $list\n                    }\n                  }\n\
    \              }] {\n                puts stderr $errorInfo\n              }\n\
    \            }\n            default {\n              # can't handle other searches,\
    \ yet.\n            } } } }\n      }\n   }\n   {RESPFILT\n      {\n       proc\
    \ dejanews_uraHTTPPostCanonicalize {htmlRes} {\n         set result {}\n     \
    \    set lines {}\n         set clause {}\n         set garb1 \"\"\n         set\
    \ garb2 \"\"\n         # Get the body of the result page -- throw away leading\
    \ and\n         # trailing URLs\n         regexp {([^<PRE>]*)<PRE>(.*)</PRE>.*}\n\
    \                 $htmlRes garb1 garb2 mainres\n         set lines [split $mainres\
    \ \"\\n\"]\n         foreach clause $lines {\n           if [regexp\n        \
    \   {<DT>.*(..\\/..).*<A HREF=\"([^\"]*)\">([^<]*)</A>.*<B>([^<]*).*}\n      \
    \          $clause garb1 dt relurl desc grp] {\n             lappend r [list HEADLINE\
    \ [format \"%s    (%s, %s)\"\n                        [string trim $desc] \\\n\
    \                 [string trim  $grp] $dt]]\n             lappend r [list URL\
    \ [format\n                        \"http://www.dejanews.com/cgi-bin/%s\" $relurl]]\n\
    \             lappend r [list TYPE \"text/plain\"]\n             lappend result\
    \ $r\n           }\n         }\n         return $result\n       }\n      }\n \
    \  }\n"
- title: '}'
  contents:
  - '}

    '
- title: Appendix 3  -- Sample Silk Tcl URA
  contents:
  - "Appendix 3  -- Sample Silk Tcl URA\n   The following is a valid Silk Tcl URA.\
    \  For more information on the\n   implementation and structure of Silk-specific\
    \ URAs, see the \"URA\n   Writers Guide\" that accompanies the distribution of\
    \ the Silk software\n   (available from <http://www.bunyip.com/products/silk>).\n"
- title: '# ----------------------------------------------------------------------'
  contents:
  - '# ----------------------------------------------------------------------

    '
- title: '#'
  contents:
  - '#

    '
- title: '#                             URA initialization'
  contents:
  - '#                             URA initialization

    '
- title: '#'
  contents:
  - '#

    '
- title: '# ----------------------------------------------------------------------'
  contents:
  - '# ----------------------------------------------------------------------

    '
- title: '#'
  contents:
  - '#

    '
- title: '# Initialize the URA, its search specs and searchable services.'
  contents:
  - '# Initialize the URA, its search specs and searchable services.

    '
- title: '#'
  contents:
  - '#

    '
- title: '# URA init.'
  contents:
  - '# URA init.

    '
- title: set uraDebug 1
  contents:
  - 'set uraDebug 1

    '
- title: uraInit {
  contents:
  - "uraInit {\n  {name {DejaNews Search}}\n  {author {Leslie Daigle}}\n  {version\
    \ {1.0}}\n  {description \"This URA will search for UseNet News articles.\"}\n\
    \  {help \"This is help on UseNet News search script.\"}\n"
- title: '}'
  contents:
  - '}

    '
- title: '#'
  contents:
  - '#

    '
- title: '# bug: handling of choices/labels is kind of gross.'
  contents:
  - '# bug: handling of choices/labels is kind of gross.

    '
- title: '#'
  contents:
  - '#

    '
- title: '# Search spec. init.'
  contents:
  - '# Search spec. init.

    '
- title: foreach item {
  contents:
  - "foreach item {\n  {\n    {name        {Topic Keywords}}\n    {field       Topic}\n\
    \    {tag         STRING}\n    {description {Keywords to search for in news articles}}\n\
    \    {prompt      {Topic Keywords}}\n    {help        {Symbols to look up, separated\
    \ by spaces.}}\n    {type        STRING}\n    {subtype     {}}\n    {allowed \
    \    .*}\n    {numvals     1}\n    {required    0}\n    {response    {}}\n   \
    \ {respset     0}\n  }\n"
- title: '} {'
  contents:
  - "} {\n  uraSearchSpecInit $item\n"
- title: '}'
  contents:
  - '}

    '
- title: uraAnnotationInit {
  contents:
  - "uraAnnotationInit {\n  {help        {Enter comments to store with an instance}}\n\
    \  {numvals     1}\n  {subtype     {}}\n  {response    {}}\n  {name        Comments}\n\
    \  {required    0}\n  {class       ANNOTATION}\n  {type        TEXT}\n  {description\
    \ {General comments about this URA.}}\n  {respset     1}\n  {prompt      Comments}\n\
    \  {field       {}}\n  {allowed     .*}\n"
- title: '}'
  contents:
  - '}

    '
- title: uraResultInit {
  contents:
  - "uraResultInit {\n  {name {Related Pages}}\n  {contents { {\n    {HEADLINE {The\
    \ DejaNews UseNet search service}}\n    {TYPE text/plain}\n    {URL http://www.dejanews.com}\n"
- title: '} }}'
  contents:
  - '} }}

    '
- title: '}'
  contents:
  - '}

    '
- title: foreach item {
  contents:
  - "foreach item {\n  {\n    {name dejanews}\n    {protocol http-post}\n    {url\
    \ http://marge.dejanews.com/cgi-bin/nph-dnquery}\n  }\n"
- title: '} {'
  contents:
  - "} {\n  uraServicesInit $item\n"
- title: '}'
  contents:
  - '}

    '
- title: proc dejanews_uraHTTPPostCanonicalize {htmlRes} {
  contents:
  - "proc dejanews_uraHTTPPostCanonicalize {htmlRes} {\n  set result {}\n  set lines\
    \ {}\n  set clause {}\n  set garb1 \"\"\n  set garb2 \"\"\n  # Get the body of\
    \ the result page\n  # -- throw away leading and trailing URLs\n  regexp {([^<PRE>]*)<PRE>(.*)</PRE>.*}\
    \ $htmlRes garb1 garb2 mainres\n  set lines [split $mainres \"\\n\"]\n  foreach\
    \ clause $lines {\n    uraDebugPuts stderr [format \"Line: %s\" $clause]\n   \
    \ if [regexp\n    {<DT>.*(..\\/..).*<A HREF=\"([^\"]*)\">([^<]*)</A>.*<B>([^<]*).*}\
    \ \\\n         $clause garb1 dt relurl desc grp] {\n      uraDebugPuts stderr\
    \ [format\n                           \"Date: %s Rel URL: %s Desc: %s Group: %s\"\
    \n                           $dt $relurl $desc $grp]\n      lappend r [list HEADLINE\
    \ [format \"%s    (%s, %s)\"\n                 [string trim $desc] \\\n      \
    \    [string trim  $grp] $dt]]\n      lappend r [list URL [format\n          \
    \       \"http://www.dejanews.com/cgi-bin/%s\" $relurl]]\n      lappend r [list\
    \ TYPE \"text/plain\"]\n      lappend result $r\n    }\n  }\n  return $result\n"
- title: '}'
  contents:
  - '}

    '
- title: '# ----------------------------------------------------------------------'
  contents:
  - '# ----------------------------------------------------------------------

    '
- title: '#'
  contents:
  - '#

    '
- title: '#                             Mapping procedures'
  contents:
  - '#                             Mapping procedures

    '
- title: '#'
  contents:
  - '#

    '
- title: '# ----------------------------------------------------------------------'
  contents:
  - '# ----------------------------------------------------------------------

    '
- title: '#'
  contents:
  - '#

    '
- title: '# There is one procedure, for each searchable service, to map the search'
  contents:
  - '# There is one procedure, for each searchable service, to map the search

    '
- title: '# spec responses to a form suitable for inclusion into a search URL (or'
  contents:
  - '# spec responses to a form suitable for inclusion into a search URL (or

    '
- title: '# whatever form the particular query procedure accepts).'
  contents:
  - '# whatever form the particular query procedure accepts).

    '
- title: '#'
  contents:
  - '#

    '
- title: '#'
  contents:
  - '#

    '
- title: '#'
  contents:
  - '#

    '
- title: proc mapResponsesToDejanews {} {
  contents:
  - "proc mapResponsesToDejanews {} {\n  set resp \"\"\n  if {[uraAreResponsesSet\
    \ {Topic Keywords}]} {\n    lappend resp [list query [uraGetSpecResponse {Topic\
    \ Keywords}]]\n  }\n  return $resp\n"
- title: '}'
  contents:
  - '}

    '
- title: '#'
  contents:
  - '#

    '
- title: '# bug: need better error reporting'
  contents:
  - '# bug: need better error reporting

    '
- title: '# (i.e. which searches didn''t work and why, etc.)'
  contents:
  - '# (i.e. which searches didn''t work and why, etc.)

    '
- title: '#'
  contents:
  - '#

    '
- title: proc uraRun {} {
  contents:
  - "proc uraRun {} {\n  global errorInfo\n  foreach serv [uraListOfServices] {\n\
    \    set u [uraGetServiceURL $serv]\n    switch -- $serv {\n      dejanews {\n\
    \        if [catch {\n          set query [mapResponsesToDejanews]\n         \
    \ uraDebugPuts stderr [format \"%s: query is `%s'.\"\n          $serv $query]\n\
    \          if {$query != {}} {\n              set result [uraHTTPPostSearch $u\
    \ $query]\n              if {$result != \"\"} {\n                uraDebugPuts\
    \ stderr [format \"%s: result is `%s'.\"\n                $serv $result]\n   \
    \             set list [dejanews_uraHTTPPostCanonicalize $result]\n          \
    \      uraDebugPuts stderr [format \"%s: list is `%s'.\"\n                $serv\
    \ $list]\n                puts $list\n              }\n            }\n       \
    \ }] {\n          puts stderr $errorInfo\n        }\n      }\n      default {\n\
    \        # can't handle other searches, yet.\n      }\n    }\n  }\n"
- title: '}'
  contents:
  - '}

    '
