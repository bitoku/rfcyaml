Abstract This document describes a method for making random selections in such a way that the unbiased nature of the choice is publicly verifiable.
As an example, the selection of the voting members of the IETF Nominations Committee (NomCom) from the pool of eligible volunteers is used.
Similar techniques would be applicable to other cases.
Introduction Under the IETF rules, each year ten people are randomly selected from among eligible volunteers to be the voting members of the IETF nominations committee (NomCom).
The NomCom nominates members of the Internet Engineering Steering Group (IESG) and the Internet Architecture Board (IAB) as described in [RFC 3777].
The number of eligible volunteers in recent years has been around 100.
It is highly desirable that the random selection of the voting NomCom be done in an unimpeachable fashion so that no reasonable charges of bias or favoritism can be brought.
This is as much for the protection of the selection administrator (currently, the appointed non voting NomCom chair) from suspicion of bias as it is for the protection of the IETF.
A method such that public information will enable any person to verify the randomness of the selection meets this criterion.
This document gives an example of such a method.
The method, in the form it appears in RFC 2777, was also used by IANA in February 2003 to determine the ACE prefix for Internationalized Domain Names [RFC 3490] so as to avoid claim jumping.
General Flow of a Publicly Verifiable Process
A selection of NomCom members publicly verifiable as unbiased or similar selection could follow the three steps given below.
Determination of the Pool First, determine the pool from which the selection is to be made as provided in [RFC 3777] or its successor.
Volunteers are solicited by the selection administrator.
Their names are then passed through the IETF Secretariat to check eligibility.
(Current eligibility criteria relate to IETF meeting attendance, records of which are maintained by the Secretariat.)
The full list of eligible volunteers is made public early enough that a reasonable time can be given to resolve any disputes as to who should be in the pool.
The exact algorithm to be used, including the public future sources of randomness, is made public.
For example, the members of the final list of eligible volunteers are ordered by publicly numbering them, some public future sources of randomness such as government run lotteries are specified, and an exact algorithm is specified whereby eligible volunteers are selected based on a strong hash function [RFC 1750] of these future sources of randomness.
When the pre specified sources of randomness produce their output, those values plus a summary of the execution of the algorithm for selection should be announced so that anyone can verify that the correct randomness source values were used and the algorithm properly executed.
The algorithm can be run to select, in an ordered fashion, a larger number than are actually necessary so that if any of those selected need to be passed over or replaced for any reason, an ordered set of additional alternate selections will be available.
A cut off time for any complaint that the algorithm was run with the wrong inputs or not faithfully executed must be specified to finalize the output and provide a stable selection.
The crux of the unbiased nature of the selection is that it is based in an exact, predetermined fashion on random information which will be revealed in the future and thus can not be known to the person specifying the algorithm.
That random information will be used to control the selection.
The random information must be such that it will be publicly and unambiguously revealed in a timely fashion.
The random sources must not include anything that any reasonable person would believe to be under the control or influence of the IETF or its components, such as IETF meeting attendance statistics, numbers of documents issued, or the like.
Sources of Randomness Examples of good information to use are winning lottery numbers for specified runnings of specified public lotteries.
Particularly for government run lotteries, great care is taken to see that they occur on time and produce random quantities.
Even in the unlikely case one were to have been rigged, it would almost certainly be in connection with winning money in the lottery, not in connection with IETF use.
Other possibilities are such things as the daily balance in the US Treasury on a specified day, the volume of trading on the New York Stock exchange on a specified day, etc.
(However, the reference code given below will not handle integers that are too large.)
Sporting events can also be used.
(Experience has indicated that stock prices and/or volumes are a poor source of unambiguous data due trading suspensions, company mergers, delistings, splits, multiple markets, etc.)
In all cases, great care must be taken to specify exactly what quantities are being presumed random and what will be done if their issuance is cancelled, delayed, or advanced.
It is important that the last source of randomness, chronologically, produce a substantial amount of the entropy needed.
If most of the randomness has come from the earlier of the specified sources, and someone has even limited influence on the final source, they might do an exhaustive analysis and exert such influence so as to bias the selection in the direction they wanted.
Thus it is best for the last source to be an especially strong and unbiased source of a large amount of randomness such as a government run lottery.
It is best not to use too many different sources.
Every additional source increases the probability that one or more sources might be delayed, cancelled, or just plain screwed up somehow, calling into play contingency provisions or, worst of all, creating a situation that was not anticipated.
This would either require arbitrary judgment by the selection administrator, defeating the randomness of the selection, or a re run with a new set of sources, causing much delay.
Three or four would be a good number of sources.
Skew Some of the sources of randomness produce data that is not uniformly distributed.
This is certainly true of volumes, prices, and horse race results, for example.
However, use of a strong mixing function [RFC 1750] will extract the available entropy and produce a hash value whose bits, remainder modulo a small divisor, etc., deviate from a uniform distribution only by an insignificant amount.
Entropy Needed What we are doing
is selecting N items without replacement from a population of P items.
To do this in a completely random fashion requires as many random bits as the logarithm base 2 of that quantity.
Some sample calculated approximate number of random bits for the completely random selection of 10 NomCom members from various pool sizes is given below: Random Selection of Ten Items From Pool Pool size
Using an inadequate number of bits means that not all of the possible sets of ten selected items would be available.
For a substantially inadequate amount of entropy, there could be a significant correlation between the selection of two different members of the pool, for example.
However, as a practical matter, for pool sizes likely to be encountered in IETF NomCom membership selection, 40 bits of entropy should always be adequate.
Even if there is a large pool and more bits are needed for perfect randomness, 40 bits of entropy will assure only an insignificant deviation from completely random selection for the difference in probability of selection of different pool members, the correlation between the selection of any pair of pool members, etc.
An MD5 [RFC 1321] hash has 128 bits and therefore can produce no more than that number of bits of entropy.
However, this is more than three times what is likely to ever be needed for IETF NomCom membership selection.
A even stronger hash, such as SHA 1 [RFC 3174], can be used if desired.
It is important that a precise algorithm be given for mixing the random sources specified and making the selection based thereon.
Sources suggested above produce either a single positive number (i.e., NY Stock Exchange volume in thousands of shares) or a small set of positive numbers (many lotteries provide 6 numbers in the range of 1 through 40 or the like, a sporting event could produce the scores of two teams, etc.).
A suggested precise algorithm is as follows:
For each source producing multiple numeric values, represent each as a decimal number terminated by a period (or with a period separating the whole from the fractional part), without leading zeroes (except for a single leading zero if the integer part is zero), and without trailing zeroes after the period.
(This sorting is necessary because the same lottery results, for example, are sometimes reported in the order numbers were drawn and sometimes in numeric order and such things as the scores of two sports teams that play a game has no inherent order.)
You then produce a sequence of random values derived from a strong mixing of these sources by calculating the MD5 hash [RFC 1321] of this string prefixed and suffixed with an all zeros two byte sequence for the first value, the string prefixed and suffixed by 0x0001
for the second value, etc.
, treating the two bytes as a big endian counter.
Treat each of these derived "random" MD5 output values as a positive 128 bit multiprecision big endian integer.
Then totally order the pool of listed volunteers as follows: If there are P volunteers, select the first by dividing the first derived random value by P and using the remainder plus one as the position of the selectee in the published list.
Select the second by dividing the second derived random value by P 1 and using the remainder plus one as the position in the list with the first selected person eliminated.
It is STRONGLY recommended that alphanumeric random sources be avoided due to the much greater difficulty in canonicalizing them in an independently repeatable fashion; however, if you choose to ignore this advice and use an ASCII or similar Roman alphabet source or sources, all white space, punctuation, accents, and special characters should be removed and all letters set to upper case.
If you choose to not just ignore but flagrantly flout this advice and try to use even more complex and harder to canonicalize internationalized text, such as UNICODE, you are on your own.
In the real world, problems can arise in following the steps and flow outlined in Sections 2 through 4 above.
Some problems that have actually arisen are described below with recommendations for handling them.
Uncertainty as to the Pool Every reasonable effort should be made to see that the published pool from which selection is made is of certain and eligible persons.
However, especially with compressed schedules or perhaps someone whose claim that they volunteered and are eligible has not been resolved by the deadline, or a determination that someone is not eligible which occurs after the publication of the pool, it may be that there are still uncertainties.
The best way to handle this is to maintain the announced schedule, INCLUDE in the published pool all those whose eligibility is uncertain and to keep the published pool list numbering IMMUTABLE after its publication.
If someone in the pool is later selected by the algorithm and random input but it has been determined they are ineligible, they can be skipped and the algorithm run further to make an additional selection.
Thus the uncertainty only effects one selection and in general no more than a maximum of U selections where there are U uncertain pool members.
Other courses of action are far worse.
Actual insertion or deletion of entries in the pool after its publication changes the length of the list and totally scrambles who is selected, possibly changing every selection.
Even if done before the random numbers are known, such dinking with the list after its publication just smells bad.
There should be clear fixed public deadlines and someone who challenges their absence from the pool after the published deadline should have their challenge automatically denied for tardiness.
The best good faith efforts have been made to specify precise and unambiguous sources of randomness.
These sources have been made public in advance and there has not been objection to them.
However, it has happened that when the time comes to actually get and use this randomness, the real world has thrown a curve ball and it isn't quite clear what data to use.
Problems have particularly arisen in connection with stock prices, volumes, and financial exchange rates or indices.
If volumes that were published in thousands are published in hundreds, you have a rounding problem.
Prices that were quoted in fractions or decimals can change to the other.
If you take care of every contingency that has come up in the past, you can be hit with a new one.
When this sort of thing happens, it is generally too late to announce new sources, an action which could raise suspicions of its own.
About the only course of action is to make a reasonable choice within the ambiguity and depend on confidence in the good faith of the selection administrator.
With care, such cases should be extremely rare.
Based on these experiences, it is again recommended that public lottery numbers or the like be used as the random inputs and stock prices and volumes avoided.
Fully Worked Example Assume the following ordered list of 25 eligible volunteers is published in advance of selection:
Smith Assume the following (fake example) ordered list of randomness sources: 1.
The Kingdom of Alphaland State Lottery daily number for 1 November 2004 treated as a single four digit integer.
Numbers of the winning horses at Hialeia for all races for the first day on or after 13 October 2004 on which at least two races are run.
The People's Democratic Republic of Betastani State Lottery six winning numbers (ignoring the seventh "extra" number) for 1 November 2004.
Hypothetical randomness publicly produced: Source 1:  9319 Source 2:  2, 5, 12, 8, 10 Source 3:  9, 18, 26, 34, 41, 45 Resulting key string: 9319./2.5.8.10.12./9.18.26.34.41.45./ The table below gives the hex of the MD5 of the above key string bracketed with a two byte string that is successively 0x0000, 0x0001, 0x0002, through 0x0010
The divisor for the number size of the remaining pool at each stage is given and the index of the selectee as per the original number of those in the pool.
Resulting first ten selected, in order selected: 1.
Should one of the above turn out to be ineligible or decline to serve, the next would be Sloth, number 22.
Careful choice of should be made of randomness inputs so that there is no reasonable suspicion that they are under the control of the administrator.
Guidelines given above to use a small number of inputs with a substantial amount of entropy from the last should be followed.
And equal care needs to be given that the algorithm selected is faithfully executed with the designated inputs values.
Publication of the results and a week or so window for the community of interest to duplicate the calculations should give a reasonable assurance against implementation tampering.
This code makes use of the MD5 reference code from [RFC 1321] ("RSA Data Security,
Inc.  MD5 Message Digest Algorithm").
The portion of the code dealing with multiple floating point numbers was written by Matt Crawford.
The original code in RFC 2777 could only handle pools of up to 255 members and was extended to 2  16 1 by Erik Nordmark.
This code has been extracted from this document, compiled, and tested.
While no flaws have been found, it is possible that when used with some compiler on some system some flaw will manifest itself.
> #include <math.h> #include <stdio.h
(unsigned short  ) malloc ( (size t)pool );
so the user may be able to tell if truncation or other glitches occur.
/ j   sscanf ( buffer, "float %ld.%[0
, sarray[0], &array[1], sarray[1], &array[2], sarray[2], &array[3], sarray[3], &array[4], sarray[4], &array[5], sarray[5], &array[6], sarray[6], &array[7]
, sarray[7], &array[8], sarray[8], &array[9]
, sarray[9], &array[10], sarray[10], &array[11], sarray[11], &array[12], sarray[12], &array[13], sarray[13], &array[14], sarray[14], &array[15], sarray[15] )
(unsigned short)pool; usel < selection;  usel,  remaining ) {
selecting all of pool or more?
/ Appendix A: History of NomCom Member Selection For reference purposes, here is a list of the IETF Nominations Committee member selection techniques and chairs so far:
Clergy   Names were written on pieces of paper, placed in a receptacle, and a member of the clergy picked the NomCom members.
Spouse   Same as Clergy except chair's spouse made the selection.
Algorithm   Algorithmic selection based on similar concepts to those documented in RFC 2777 and herein.
Algorithmic selection using the algorithm and reference code provided in RFC 2777 (but not the fake example sources of randomness).
This document differs from [RFC 2777], the previous version, in three primary ways as follows: (1) Section 5, on problems actually encountered with using these recommendations for selecting an IETF NomCom and on how to handle them, has been added.
The selection algorithm code has been modified to handle pools of up to 2  16 1 elements and the counter based prefix and suffix concatenated with the key string before hashing has been extended to two bytes.
(3) Mention has been added that the algorithm documented herein was used by IANA to select the Internationalized Domain Name ACE prefix and some minor wording changes made.
(4) References have been divided into Informative and Normative.
The list in Appendix A has been brought up to date.
