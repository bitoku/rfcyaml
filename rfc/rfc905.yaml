- title: __initial_text__
  contents:
  - "     Network Working Group                                         ISO\n    \
    \ Request for Comments:  905                             April 1984\n        \
    \           ISO Transport Protocol Specification\n   Status of this Memo:    \
    \   \n     This document is distributed as an RFC for information only.   It\n\
    \     does not specify a standard for the ARPA-Internet.\n   Notes:\n     1) \
    \ RFC 892 is an older version of  the  ISO  Transport  Protocol\n         Specification.\
    \   Therefore  this  RFC  should  be  assumed to\n         supercede RFC 892.\n\
    \     2)  This document has been  prepared  by  retyping  the  text  of\n    \
    \     ISO/TC97/SC16/N1576  and  then  applying  proposed  editorial\n        \
    \ corrections  contained  in  ISO/TC97/SC16/N1695.   These  two\n         documents,\
    \  taken  together, are undergoing voting within ISO\n         as a Draft International\
    \ Standard (DIS).\n     3)  Although this RFC has been  reviewed  after  typing,\
    \  and  is\n         believed  to  be  substantially  correct, it is possible\
    \ that\n         typographic errors not present in the ISO documents have been\n\
    \         overlooked.\n         Alex McKenzie\n         BBN\n                \
    \             Table of Contents\n     1   SCOPE AND FIELD OF APPLICATION........................\
    \ 3\n     1.1   This International Standard specifies:.............. 3\n     1.2\
    \   The procedures are defined in terms of:............. 4\n     1.3   ....................................................\
    \ 4\n     1.4   .................................................... 5\n     2\
    \   REFERENCES............................................ 5\n     3   DEFINITIONS...........................................\
    \ 6\n     3.1   .................................................... 6\n     3.2\
    \   .................................................... 6\n     3.2.1   equipment:........................................\
    \ 7\n     3.2.2   transport service user:........................... 7\n     3.2.3\
    \   network service provider:......................... 7\n     3.2.4   local matter:.....................................\
    \ 7\n     3.2.5   initiator:........................................ 7\n     3.2.6\
    \   responder:........................................ 8\n     3.2.7   sending\
    \ transport entity:......................... 8\n     3.2.8   receiving transport\
    \ entity:....................... 8\n     3.2.9   preferred class:..................................\
    \ 8\n     3.2.10   alternative class:............................... 8\n     3.2.11\
    \   proposed class:.................................. 9\n     3.2.12   selected\
    \ class:.................................. 9\n     3.2.13   proposed parameter:..............................\
    \ 9\n     3.2.14   selected parameter:.............................. 9\n     3.2.15\
    \   error indication:................................ 9\n     3.2.16   invalid\
    \ TPDU:................................... 10\n     3.2.17   protocol error:.................................\
    \ 10\n     3.2.18   sequence number:................................ 10\n    \
    \ 3.2.19   transmit window:................................ 10\n     3.2.20  \
    \ lower window edge:.............................. 11\n     3.2.21   upper window\
    \ edge:.............................. 11\n     3.2.22   upper window edge allocated\
    \ to  the  peer\n       entity:\n          ....................................................\
    \ 11\n     3.2.23   closed window:.................................. 11\n    \
    \ 3.2.24   window information:............................. 11\n     3.2.25  \
    \ frozen reference:............................... 12\n     3.2.26   unassigned\
    \ reference:........................... 12\n     3.2.27   transparent (data):.............................\
    \ 12\n     3.2.28   owner (of a network connection):................ 12\n    \
    \ 3.2.29   retained TPDU:.................................. 12\n     4   SYMBOLS\
    \ AND ABBREVIATIONS............................ 13\n     4.1   Data units.........................................\
    \ 13\n     4.2   Types of transport protocol data units............. 13\n    \
    \ 4.3   TPDU fields........................................ 13\n     4.4   Times\
    \ and associated variables..................... 14\n     4.5   Miscellaneous......................................\
    \ 14\n     5   OVERVIEW OF THE TRANSPORT PROTOCOL................... 15\n    \
    \ 5.1   Service provided by the transport layer............ 15\n     5.2   Service\
    \ assumed from the network layer............. 16\n     5.3   Functions of the\
    \ Transport Layer................... 18\n     5.3.1   Overview of functions............................\
    \ 18\n     5.3.1.1   Functions used at all times.................... 19\n    \
    \ 5.3.1.2   Connection Establishment....................... 19\n     5.3.1.3 \
    \  Data Transfer.................................. 20\n     5.3.1.4   Release........................................\
    \ 21\n     5.4   Classes and options................................ 21\n    \
    \ 5.4.1   General.......................................... 21\n     5.4.2   Negotiation......................................\
    \ 22\n     5.4.3   Choice of network connection..................... 22\n    \
    \ 5.4.4   Characteristics of Class 0....................... 23\n     5.4.5   Characteristics\
    \ of Class 1....................... 23\n     5.4.6   Characteristics of Class\
    \ 2....................... 24\n     5.4.6.1   General........................................\
    \ 24\n     5.4.6.2   Use of explicit flow control................... 24\n    \
    \ 5.4.6.3   Non-use of explicit flow control............... 24\n     5.4.7   Characteristics\
    \ of Class 3....................... 24\n     5.4.8   Characteristics of Class\
    \ 4....................... 25\n     5.5   Model of the transport layer.......................\
    \ 25\n     6   ELEMENTS OF PROCEDURE................................ 27\n    \
    \ 6.1   Assignment to network connection................... 27\n     6.1.1   Purpose..........................................\
    \ 27\n     6.1.2   Network service primitives....................... 27\n    \
    \ 6.1.3   Procedure........................................ 28\n     6.2   Transport\
    \ protocol data unit (TPDU) transfer....... 29\n     6.2.1   Purpose..........................................\
    \ 29\n     6.2.2   Network Service Primitives....................... 30\n    \
    \ 6.2.3   Procedure........................................ 30\n     6.3   Segmenting\
    \ and reassembling........................ 30\n     6.3.1   Purpose..........................................\
    \ 30\n     6.3.2   TPDUs and parameter used......................... 31\n    \
    \ 6.3.3   Procedure........................................ 31\n     6.4   Concatenation\
    \ and separation....................... 31\n     6.4.1   Purpose..........................................\
    \ 31\n     6.4.2   Procedure........................................ 32\n    \
    \ 6.5   Connection establishment........................... 32\n     6.5.1   Purpose..........................................\
    \ 32\n     6.5.2   Network service primitives....................... 33\n    \
    \ 6.5.3   TPDUs and parameters used........................ 33\n     6.5.4   Procedure........................................\
    \ 34\n     6.6   Connection refusal................................. 40\n    \
    \ 6.6.1   Purpose.......................................... 40\n     6.6.2   TPDUs\
    \ and parameters used........................ 40\n     6.6.3   Procedure........................................\
    \ 41\n     6.7   Normal release..................................... 41\n    \
    \ 6.7.1   Purpose.......................................... 41\n     6.7.2   Network\
    \ service primitives....................... 42\n     6.7.3   TPDUs and parameters\
    \ used........................ 42\n     6.7.4   Procedure for implicit variant...................\
    \ 43\n     6.7.5   Procedure for explicit variant................... 43\n    \
    \ 6.8   Error Release...................................... 44\n     6.8.1   Purpose..........................................\
    \ 45\n     6.8.2   Network service primitives....................... 45\n    \
    \ 6.8.3   Procedure........................................ 45\n     6.9    Association\
    \   of   TPDUs   with   transport\n       connections\n          ....................................................\
    \ 45\n     6.9.1   Purpose.......................................... 45\n    \
    \ 6.9.2   Network service primitives....................... 46\n     6.9.3   TPDUs\
    \ and parameters uses........................ 46\n     6.9.4   Procedures.......................................\
    \ 46\n     6.9.4.1   Identification of TPDUs........................ 46\n    \
    \ 6.9.4.2   Association of individual TPDUs................ 47\n     6.10   Data\
    \ TPDU numbering............................... 49\n     6.10.1   Purpose.........................................\
    \ 49\n     6.10.2   TPDUs and parameters used....................... 49\n    \
    \ 6.10.3   Procedure....................................... 50\n     6.11   Expedited\
    \ data transfer........................... 50\n     6.11.1   Purpose.........................................\
    \ 50\n     6.11.2   Network service primitives...................... 50\n    \
    \ 6.11.3   TPDUs and parameter used........................ 51\n     6.11.4  \
    \ Procedures...................................... 51\n     6.12   Reassignment\
    \ after failure........................ 52\n     6.12.1   Purpose.........................................\
    \ 52\n     6.12.2   Network service primitives...................... 52\n    \
    \ 6.12.3   Procedure....................................... 52\n     6.12.4  \
    \ Timers.......................................... 54\n     6.13   Retention until\
    \ acknowledgement of TPDUs.......... 56\n     6.13.1   Purpose.........................................\
    \ 56\n     6.13.2   Network service primitives...................... 56\n    \
    \ 6.13.3   TPDUs and parameters used....................... 56\n     6.13.4  \
    \ Procedures...................................... 57\n     6.14   Resynchronization.................................\
    \ 60\n     6.14.1   Purpose......................................... 60\n    \
    \ 6.14.2   Network service primitives...................... 60\n     6.14.3  \
    \ TPDUs and parameters used....................... 60\n     6.14.4   Procedure.......................................\
    \ 61\n     6.14.4.1   Active resynchronization procedures........... 61\n    \
    \ 6.14.4.2   Passive resynchronization procedures.......... 62\n     6.14.4.3\
    \   Data Resynchronization Procedures............. 63\n     6.15   Multiplexing\
    \ and demultiplexing................... 64\n     6.15.1   Purpose.........................................\
    \ 64\n     6.15.2   TPDUs and parameters used....................... 64\n    \
    \ 6.15.3   Procedure....................................... 65\n     6.16   Explicit\
    \ Flow Control............................. 65\n     6.16.1   Purpose.........................................\
    \ 65\n     6.16.2   TPDUs and parameters used....................... 65\n    \
    \ 6.16.3   Procedure....................................... 66\n     6.17   Checksum..........................................\
    \ 66\n     6.17.1   Purpose......................................... 66\n    \
    \ 6.17.2   TPDUs and parameters used....................... 66\n     6.17.3  \
    \ Procedure....................................... 67\n     6.18   Frozen references.................................\
    \ 68\n     6.18.1   Purpose......................................... 68\n    \
    \ 6.18.2   Procedure....................................... 68\n     6.18.2.1\
    \   Procedure for classes 0 and 2................. 68\n     6.18.2.2   Procedure\
    \ for classes 1 and 3................. 69\n     6.18.2.3   Procedure for classes\
    \ 4....................... 70\n     6.19   Retransmission on time-out........................\
    \ 70\n     6.19.1   Purpose......................................... 70\n    \
    \ 6.19.2   TPDUs used...................................... 70\n     6.19.3  \
    \ Procedure....................................... 70\n     6.20   Resequencing......................................\
    \ 70\n     6.20.1   Purpose......................................... 71\n    \
    \ 6.20.2   TPDUs and parameters used....................... 71\n     6.20.3  \
    \ Procedure....................................... 71\n     6.21   Inactivity\
    \ control................................ 71\n     6.21.1   Purpose.........................................\
    \ 71\n     6.21.2   Procedure....................................... 72\n    \
    \ 6.22   Treatment of protocol errors...................... 72\n     6.22.1  \
    \ Purpose......................................... 72\n     6.22.2   TPDUs and\
    \ parameters used....................... 72\n     6.22.3   Procedure.......................................\
    \ 72\n     6.23   Splitting and recombining......................... 74\n    \
    \ 6.23.1   Purpose......................................... 74\n     6.23.2  \
    \ Procedure....................................... 74\n     7   Protocol Classes.....................................\
    \ 76\n     8   SPECIFICATION FOR CLASS 0. SIMPLE CLASS.............. 79\n    \
    \ 8.1   Functions of class 0............................... 79\n     8.2   Procedures\
    \ for class 0............................. 79\n     8.2.1   Procedures applicable\
    \ at all times............... 79\n     8.2.2   Connection establishment.........................\
    \ 79\n     8.2.3   Data transfer.................................... 80\n    \
    \ 8.2.4   Release.......................................... 80\n     9    SPECIFICATION\
    \  FOR  CLASS  1:   BASIC   ERROR\n       RECOVERY CLASS\n          ....................................................\
    \ 81\n     9.1   Functions of Class 1............................... 81\n    \
    \ 9.2   Procedures for Class 1............................. 81\n     9.2.1   Procedures\
    \ applicable at all times............... 81\n     9.2.2   Connection establishment.........................\
    \ 82\n     9.2.3   Data Transfer.................................... 82\n    \
    \ 9.2.3.1   General........................................ 82\n     9.2.3.2 \
    \  Expedited Data................................. 83\n     9.2.4   Release..........................................\
    \ 84\n     10   SPECIFICATION  FOR  CLASS  2  -  MULTIPLEXING\n       CLASS\n\
    \          .................................................... 85\n     10.1\
    \   Functions of class 2.............................. 85\n     10.2   Procedures\
    \ for class 2............................ 85\n     10.2.1   Procedures applicable\
    \ at all times.............. 85\n     10.2.2   Connection establishment........................\
    \ 86\n     10.2.3   Data transfer when non  use  of  explicit\n       flow control\n\
    \          .................................................... 86\n     10.2.4\
    \   Data transfer when use of  explicit  flow\n       control\n          ....................................................\
    \ 86\n     10.2.4.1   General....................................... 86\n    \
    \ 10.2.4.2   Flow control.................................. 87\n     10.2.4.3\
    \   Expedited data................................ 88\n     10.2.5   Release.........................................\
    \ 89\n     11   SPECIFICATION FOR CLASS 3: ERROR RECOVERY AND\n       MULTIPLEXING\
    \ CLASS\n          .................................................... 90\n \
    \    11.1   Functions of Class 3.............................. 90\n     11.2 \
    \  Procedures for Class 3............................ 90\n     11.2.1   Procedures\
    \ applicable at all times.............. 90\n     11.2.2   Connection Establishment........................\
    \ 91\n     11.2.3   Data Transfer................................... 91\n    \
    \ 11.2.3.1   General....................................... 91\n     11.2.3.2\
    \   Use of RJ TPDU................................ 92\n     11.2.3.3   Flow Control..................................\
    \ 93\n     11.2.3.4   Expedited data................................ 93\n    \
    \ 11.2.4   Release......................................... 94\n     12   SPECIFICATION\
    \ FOR CLASS  4:  ERROR  DETECTION\n       AND RECOVERY CLASS\n          ....................................................\
    \ 95\n     12.1   Functions of Class 4.............................. 95\n    \
    \ 12.2   Procedures for Class 4............................ 95\n     12.2.1  \
    \ Procedures available at all times............... 95\n     12.2.1.1   Timers\
    \ used at all times...................... 95\n     12.2.1.1.1   NSDU lifetime\
    \ (MLR, MRL).................... 98\n     12.2.1.1.2   Expected maximum transit\
    \ delay  (ELR,\n       ERL)\n          ....................................................\
    \ 98\n     12.2.1.1.3   Acknowledge Time (AR, AL)................... 99\n    \
    \ 12.2.1.1.4   Local retransmission time (T1).............. 99\n     12.2.1.1.5\
    \   Persistence Time (R)........................ 99\n     12.2.1.1.6    Bound\
    \  on  References  and  Sequence\n       Numbers (L)\n          ...................................................\
    \ 100\n     12.2.1.2   General Procedures........................... 100\n   \
    \  12.2.2   Procedures for Connection Establishment........ 102\n     12.2.2.1\
    \   Timers used in Connection Establishment...... 102\n     12.2.2.2   General\
    \ Procedures........................... 103\n     12.2.3   Procedures for Data\
    \ Transfer................... 104\n     12.2.3.1   Timers used in Data Transfer.................\
    \ 104\n     12.2.3.2   General Procedures for data transfer......... 104\n   \
    \  12.2.3.3   Inactivity Control........................... 105\n     12.2.3.4\
    \   Expedited Data............................... 105\n     12.2.3.5   Resequencing.................................\
    \ 106\n     12.2.3.6   Explicit Flow Control........................ 107\n   \
    \  12.2.3.7   Sequencing of received AK TPDUs.............. 108\n     12.2.3.8\
    \   Procedure for transmission of AK TPDUs....... 109\n     12.2.3.8.1   Retransmission\
    \ of AK TPDUs for window\n       synchronization\n          ...................................................\
    \ 109\n     12.2.3.8.2   Sequence control for transmission  of\n       AK TPDUs\n\
    \          ................................................... 109\n     12.2.3.8.3\
    \   Retransmission of AK TPDUs after  CDT\n       set to zero\n          ...................................................\
    \ 110\n     12.2.3.8.4   Retransmission  procedures  following\n       reduction\
    \ of the\n          ................................................... 111\n\
    \     12.2.3.9    Use  of  Flow   Control   Confirmation\n       parameter\n \
    \         ................................................... 112\n     12.2.4\
    \   Procedures for Release......................... 113\n     12.2.4.1   Timers\
    \ used for Release...................... 113\n     12.2.4.2   General Procedures\
    \ for Release............... 113\n     13   STRUCTURE AND ENCODING OF TPDUs....................\
    \ 114\n     13.1   Validity......................................... 114\n   \
    \  13.2   Structure........................................ 116\n     13.2.1 \
    \  Length indicator field......................... 117\n     13.2.2   Fixed part.....................................\
    \ 117\n     13.2.2.1   General...................................... 117\n   \
    \  13.2.2.2   TPDU code.................................... 117\n     13.2.3 \
    \  Variable part.................................. 118\n     13.2.3.1   Checksum\
    \ Parameter (Class 4 only)............ 120\n     13.2.4   Data Field.....................................\
    \ 120\n     13.3   Connection Request (CR) TPDU..................... 120\n   \
    \  13.3.1   Structure...................................... 120\n     13.3.2 \
    \  LI............................................. 121\n     13.3.3   Fixed Part\
    \ (Octets 2 to 7)..................... 121\n     13.3.4   Variable Part (Octets\
    \ 8 to p).................. 122\n     13.3.5   User Data (Octets p+1 to the end)..............\
    \ 127\n     13.4   Connection Confirm (CC) TPDU..................... 128\n   \
    \  13.4.1   Structure...................................... 128\n     13.4.2 \
    \  LI............................................. 128\n     13.4.3   Fixed Part\
    \ (Octets 2 to 7)..................... 128\n     13.4.4   Variable Part (Octet\
    \ 8 to p)................... 129\n     13.4.5   User Data (Octets p+1 to the end)..............\
    \ 129\n     13.5   Disonnect Request (DR) TPDU...................... 129\n   \
    \  13.5.1   Structure...................................... 129\n     13.5.2 \
    \  LI............................................. 129\n     13.5.3   Fixed Part\
    \ (Octets 2 to 7...................... 130\n     13.5.4   Variable Part (Octets\
    \ 8 to p).................. 131\n     13.5.5   User Data (Octets p+1 to the end)..............\
    \ 131\n     13.6   Disconnect Confirm (DC) TPDU..................... 132\n   \
    \  13.6.1   Structure...................................... 132\n     13.6.2 \
    \  LI............................................. 132\n     13.6.3   Fixed Part\
    \ (Octets 2 to 6)..................... 132\n     13.6.4   Variable Part..................................\
    \ 133\n     13.7   Data (DT) TPDU................................... 133\n   \
    \  13.7.1   Structure...................................... 133\n     13.7.2 \
    \  LI............................................. 134\n     13.7.3   Fixed Part.....................................\
    \ 134\n     13.7.4   Variable Part.................................. 135\n   \
    \  13.7.5   User Data Field................................ 135\n     13.8   Expedited\
    \ Data (ED) TPDU......................... 135\n     13.8.1   Structure......................................\
    \ 135\n     13.8.2   LI............................................. 136\n   \
    \  13.8.3   Fixed Part..................................... 136\n     13.8.4 \
    \  Variable Part.................................. 137\n     13.8.5   User Data\
    \ Field................................ 137\n     13.9   Data Acknowledgement\
    \ (AK) TPDU................... 137\n     13.9.1   Structure......................................\
    \ 137\n     13.9.2   LI............................................. 138\n   \
    \  13.9.3   Fixed Part..................................... 138\n     13.9.4 \
    \  Variable Part.................................. 139\n     13.10   Expedited\
    \ Data Acknowledgement (EA) TPDU........ 140\n     13.10.1   Structure.....................................\
    \ 140\n     13.10.2   LI............................................ 141\n   \
    \  13.10.3   Fixed Part.................................... 141\n     13.10.4\
    \   Variable Part................................. 141\n     13.11   Reject (RJ)\
    \ TPDU................................ 141\n     13.11.1   Structure.....................................\
    \ 142\n     13.11.2   LI............................................ 142\n   \
    \  13.11.3   Fixed Part.................................... 142\n     13.11.4\
    \   Variable Part................................. 143\n     13.12   TPDU Error\
    \ (ER) TPDU............................ 143\n     13.12.1   Structure.....................................\
    \ 143\n     13.12.2   LI............................................ 143\n   \
    \  13.12.3   Fixed Part.................................... 144\n     13.12.4\
    \   Variable Part................................. 144\n     14   CONFORMANCE........................................\
    \ 145\n     14.1   ................................................. 145\n   \
    \  14.2   ................................................. 145\n     14.3   .................................................\
    \ 145\n     14.4   ................................................. 145\n   \
    \  14.5   ................................................. 146\n     14.6   Claims\
    \ of Conformance Shall State................ 146\n     INTRODUCTION\n     The\
    \ Transport Protocol Standard is one of a set of  International\n     Standards\
    \  produced to facilitate the interconnection of computer\n     systems.  The\
    \ set of standards covers the services and  protocols\n     required to achieve\
    \ such interconnection.\n     The Transport Protocol Standard is  positioned \
    \ with  respect  to\n     other  related  standards  by the layers defined in\
    \ the Reference\n     Model for Open Systems Interconnection (ISO 7498).   It\
    \  is  most\n     closely  related  to, and lies within the field of application\
    \ of\n     the Transport Service Standard (DP 8072).  It also uses and makes\n\
    \     reference  to  the  Network  Service  Standard  (DP  8348), whose\n    \
    \ provisions it  assumes  in  order  to  accomplish  the  transport\n     protocol's\
    \  aims.   The  interelationship  of  these standards is\n     depicted in figure\
    \ 1.\n     -------------------------TRANSPORT SERVICE DEFINITION------------\n\
    \     Transport     | --- Reference to aims --------------\n     Protocol    \
    \  |\n     Specification | --- Reference to assumptions -------\n     -------------------------NETWORK\
    \ SERVICE DEFINITION--------------\n      Relationaship between Transport Protocol\
    \ and adjacent services\n                                Figure 1 .\n     The\
    \ International Standard specifies  a  common  encoding  and  a\n     number \
    \ of  classes  of  transport protocol procedures to be used\n     with different\
    \ network qualities of service.\n     It is intended that the Transport Protocol\
    \ should be  simple  but\n     general  enough  to  cater for the total range\
    \ of Network Service\n     qualities possible, without restricting future extensions.\n\
    \     The protocol is structured to give rise to  classes  of  protocol\n    \
    \ which  are  designed  to  minimize possible incompatibilities and\n     implementation\
    \ costs.\n     The classes are selectable with  respect  to  the  Transport  and\n\
    \     Network Services in providing the required quality of service for\n    \
    \ the interconnection of two session entities (note that each class\n     provides\
    \  a different set of functions for enhancement of service\n     qualities).\n\
    \     This protocol standard defines mechanisms that  can  be  used  to\n    \
    \ optimize  network  tariffs and enhance the following qualities of\n     service:\n\
    \        a)  different throughput rates;\n        b)  different error rates;\n\
    \        c)  integrity of data requirements;\n        d)  reliability requirements.\n\
    \     It does not  require  an  implementation  to  use  all  of  these\n    \
    \ mechanisms,  nor  does  it  define methods for measuring achieved\n     quality\
    \ of service or  criteria  for  deciding  when  to  release\n     transport connections\
    \ following quality of service degradation.\n     The primary aim of this International\
    \ Standard is  to  provide  a\n     set  of  rules  for  communication  expressed\
    \  in  terms  of  the\n     procedures to be carried out by peer  entities  at\
    \  the  time  of\n     communication.   These  rules  for  communication are intended\
    \ to\n     provide a sound basis for development in order to serve a variety\n\
    \     of purposes:\n        a)  as a guide for implementors and designers;\n \
    \       b)  for use in the testing and procurement of equipment;\n        c) \
    \ as part of an agreement for the admittance of systems into\n            the\
    \ open systems environment;\n        d)  as a refinement of the understanding\
    \ of OSI.\n     It is expected  that  the  initial  users  of  the  International\n\
    \     Standard  will be designers and implementors of equipment and the\n    \
    \ International Standard contains, in notes or in annexes, guidance\n     on the\
    \ implementation of the procedures defined in the standard.\n     It should  be\
    \  noted  that,  as  the  number  of  valid  protocol\n     sequences  is  very\
    \  large,  it  is  not  possible  with  current\n     technology to verify that\
    \  an  implementation  will  operate  the\n     protocol  defined  in this International\
    \ Standard correctly under\n     all circumstances.   It  is  possible  by  means\
    \  of  testing  to\n     establish  confidence  that  an implementation correctly\
    \ operates\n     the protocol in a representative sample of circumstances.  It\
    \ is,\n     however, intended that this International Standard can be used in\n\
    \     circumstances where two implementations fail  to  communicate  in\n    \
    \ order to determine whether one or both have failed to operate the\n     protocol\
    \ correctly.\n     This International Standard contains a section on conformance\
    \  of\n     equipment   claiming   to   implement   the  procedures  in  this\n\
    \     International Standard.  Attention is drawn to the fact that  the\n    \
    \ standard   does   not  contain  any  tests  to  demonstrate  this\n     conformance.\n\
    \     The variations and options available  within  this  International\n    \
    \ Standard  are  essential  to  enable  a  Transport  Service to be\n     provided\
    \ for a wide variety of applications  over  a  variety  of\n     network  qualities.\
    \   Thus, a minimally conforming implementation\n     will not be suitable for\
    \ use in all possible  circumstances.   It\n     is  important,  therefore,  to\
    \  qualify  all  references  to this\n     International Standard with statements\
    \ of the options provided or\n     required  or with statements of the intended\
    \ purpose of provision\n     or use.\n     1  SCOPE AND FIELD OF APPLICATION\n\
    \     1.1  This International Standard specifies:\n        a)  five classes of\
    \ procedures:\n            1) Class 0.  Simple class;\n            2) Class 1.\
    \  Basic error recovery class;\n            3) Class 2.  Multiplexing class;\n\
    \            4) Class 3.  Error recovery and multiplexing class;\n           \
    \ 5) Class 4.  Error detection and recovery class,\n            for the connection\
    \ oriented transfer of data  and  control\n            information  from one transport\
    \ entity to a peer transport\n            entity;\n        b)  the means of negotiating\
    \ the class  of  procedures  to  be\n            used by the transport entities;\n\
    \        c)  the structure and encoding of the transport protocol  data\n    \
    \        units   used   for   the  transfer  of  data  and  control\n        \
    \    information;\n     1.2  The procedures are defined in terms of:\n       \
    \ a)  the interactions between peer transport  entities  through\n           \
    \ the exchange of transport protocol data units;\n        b)  the  interactions\
    \  between  a  transport  entity  and  the\n            transport  service  user\
    \  in  the  same system through the\n            exchange of transport service\
    \ primitives;\n        c)  the  interactions  between  a  transport  entity  and\
    \  the\n            network  service  provider through the exchange of network\n\
    \            service primitives.\n     These procedures are defined in the main\
    \  text  of  the  standard\n     supplemented by state tables in annex A.\n  \
    \   1.3\n     These procedures are applicable  to  instances  of  communication\n\
    \     between  systems  which  support  the  Transport Layer of the OSI\n    \
    \ Reference Model and which wish to interconnect in an open systems\n     environment.\n\
    \     1.4\n     This   International   Standard   also   specifies    conformance\n\
    \     requirements  for systems implementing these procedures.  It does\n    \
    \ not  contain  tests  which  can  be  used  to  demonstrate   this\n     conformance.\n\
    \     2  REFERENCES\n     ISO 7498  Information   processing   systems   -   Open\
    \   systems\n               interconnection - Basic Reference Model\n     DP 8072\
    \   Information   processing   systems   -   Open   systems\n               interconnection\
    \ - Transport service definition\n     DP 8348   Information   processing   systems\
    \   -   Open   systems\n               interconnection  -  Connection-oriented\
    \ network service\n               definition.\n     SECTION ONE.  GENERAL\n  \
    \   3  DEFINITIONS\n     NOTE - The definitions contained  in  this  clause  make\
    \  use  of\n     abbreviations defined in clause 4.\n     3.1\n     This International\
    \ Standard is based on the concepts developed in\n     the  Reference  Model for\
    \ Open Systems Interconnection (DIS 7498)\n     and makes use of the following\
    \ terms defined in that standard:\n        a)  concatenation and separation;\n\
    \        b)  segmenting and reassembling;\n        c)  multiplexing and demultiplexing;\n\
    \        d)  splitting and recombining;\n        e)  flow control.\n     3.2\n\
    \     For the purpose of this  International  Standard,  the  following\n    \
    \ definitions apply:\n     3.2.1  equipment:\n     Hardware or software or a combination\
    \ of both;  it  need  not  be\n     physically distinct within a computer system.\n\
    \     3.2.2  transport service user:\n     An abstract representation of  the\
    \  totality  of  those  entities\n     within a single system that make use of\
    \ the transport service.\n     3.2.3  network service provider:\n     An abstract\
    \ machine that models  the  totality  of  the  entities\n     providing the network\
    \ service, as viewed by a transport entity.\n     3.2.4  local matter:\n     A\
    \ decision made by  a  system  concerning  its  behavior  in  the\n     Transport\
    \  Layer  that is not subject to the requirements of this\n     protocol.\n  \
    \   3.2.5  initiator:\n     A transport entity that initiates a CR TPDU.\n   \
    \  3.2.6  responder:\n     A transport entity with whom an initiator wishes to\
    \  establish  a\n     transport connection.\n     NOTE - Initiator and responder\
    \ are  defined  with  respect  to  a\n     single  transport  connection.  A transport\
    \ entity can be both an\n     initiator and responder simultaneously.\n     3.2.7\
    \  sending transport entity:\n     A transport entity that sends a given TPDU.\n\
    \     3.2.8  receiving transport entity:\n     A transport entity that receives\
    \ a given TPDU.\n     3.2.9  preferred class:\n     The protocol class that the\
    \ initiator indicates in a CR  TPDU  as\n     its first choice for use over the\
    \ transport connection.\n     3.2.10  alternative class:\n     A protocol class\
    \ that the initiator indicates in a CR TPDU as  an\n     alternative choice for\
    \ use over the transport connection.\n     3.2.11  proposed class:\n     A preferred\
    \ class or an alternative class.\n     3.2.12  selected class:\n     The protocol\
    \ class that the responder indicates in a CC TPDU that\n     it has chosen for\
    \ use over the transport connection.\n     3.2.13  proposed parameter:\n     The\
    \ value for a parameter that the initiator indicates  in  a  CR\n     TPDU that\
    \ it wishes to use over the transport connection.\n     3.2.14  selected parameter:\n\
    \     The value for a parameter that the responder indicates  in  a  CC\n    \
    \ TPDU that it has chosen for use over the transport connection.\n     3.2.15\
    \  error indication:\n     An N-RESET indication,  or  an  N-DISCONNECT  indication\
    \  with  a\n     reason code indicating an error, that a transport entity receives\n\
    \     from the NS-provider.\n     3.2.16  invalid TPDU:\n     A TPDU that  does\
    \  not  comply  with  the  requirements  of  this\n     International Standard\
    \ for structure and encoding.\n     3.2.17  protocol error:\n     A TPDU whose\
    \ use does not comply  with  the  procedures  for  the\n     class.\n     3.2.18\
    \  sequence number:\n        a)  The number  in  the  TPDU-NR  field  of  a  DT\
    \  TPDU  that\n            indicates  the  order in which the DT TPDU was transmitted\n\
    \            by a transport entity.\n        b)  The number in the YR-TU-NR field\
    \ of an AK or RJ TPDU  that\n            indicates the sequence number of the\
    \ next DT TPDU expected\n            to be received by a transport entity.\n \
    \    3.2.19  transmit window:\n     The set of consecutive sequence numbers which\
    \ a transport  entity\n     has been authorized by its peer entity to send at\
    \ a given time on\n     a given transport connection.\n     3.2.20  lower window\
    \ edge:\n     The lowest sequence number in a transmit window.\n     3.2.21  upper\
    \ window edge:\n     The sequence  number  which  is  one  greater  than  the\
    \  highest\n     sequence number in the transmit window.\n     3.2.22  upper window\
    \ edge allocated to the peer entity:\n     The value that a transport entity communicates\
    \ to its peer entity\n     to be interpreted as its new upper window edge.\n \
    \    3.2.23  closed window:\n     A transmit window that contains no sequence\
    \ number.\n     3.2.24  window information:\n     Information contained in a TPDU\
    \ relating to  the  upper  and  the\n     lower window edges.\n     3.2.25  frozen\
    \ reference:\n     A reference that is not available for assignment to a  connection\n\
    \     because of the requirements of 6.18.\n     3.2.26  unassigned reference:\n\
    \     A reference that is neither currently in use  for  identifying  a\n    \
    \ transport connection or which is in a frozen state.\n     3.2.27  transparent\
    \ (data):\n     TS-user  data  that  is  transferred  intact  between   transport\n\
    \     entities  and  which  is  unavailable  for  use  by the transport\n    \
    \ entities.\n     3.2.28  owner (of a network connection):\n     The transport\
    \ entity that issued the N-CONNECT request leading to\n     the creation of that\
    \ network connection.\n     3.2.29  retained TPDU:\n     A TPDU  that  is  subject\
    \  to  the  retransmission  procedure  or\n     retention  until  acknowledgement\
    \  procedure and is available for\n     possible retransmission.\n     4  SYMBOLS\
    \ AND ABBREVIATIONS\n     4.1  Data units\n        TPDU          Transport protocol\
    \ data unit\n        TSDU          Transport service data unit\n        NSDU \
    \         Network service data unit\n     4.2  Types of transport protocol data\
    \ units\n        CR TPDU          Connection request TPDU\n        CC TPDU   \
    \       Connection confirm TPDU\n        DR TPDU          Disconnect request TPDU\n\
    \        DC TPDU          Disconnect confirm TPDU\n        DT TPDU          Data\
    \ TPDU\n        ED TPDU          Expedited data TPDU\n        AK TPDU        \
    \  Data acknowledge TPDU\n        EA TPDU          Expedited acknowledge TPDU\n\
    \        RJ TPDU          Reject TPDU\n        ER TPDU          Error TPDU\n \
    \    4.3  TPDU fields\n        LI               Length indicator (field)\n   \
    \     CDT              Credit (field)\n        TSAP-ID          Transport service\
    \ access point\n                         identifier (field)\n        DST-REF \
    \         Destination reference (field)\n        SRC-REF          Source reference\
    \ (field)\n        EOT              End of TSDU mark\n        TPDU-NR        \
    \  DT TPDU number (field)\n        ED-TPDU-NR       ED TPDU number (field)\n \
    \       YR-TU-NR         Sequence number response (field)\n        YR-EDTU-NR\
    \       ED TPDU number response (field)\n     4.4  Times and associated variables\n\
    \        T1               Elapsed time between retransmissions\n        N    \
    \            The maximum number of transmissions\n        L                Bound\
    \ on reference\n        I                Inactivity time\n        W          \
    \      Window time\n        TTR              Time to try reassignment/resynchronization\n\
    \        TWR              Time to wait for\n                            reassignment/resynchronization\n\
    \        TS1              Supervisory timer 1\n        TS2              Supervisory\
    \ time 2\n        MLR              NSDU lifetime  local-to-remote\n        MRL\
    \              NSDU lifetime  remote-to-local\n        ELR              Expected\
    \ maximum transit delay\n                            local-to-remote\n       \
    \ ERL              Expected maximum transit delay\n                          \
    \  remote-to-local\n        R                Persistence time\n        AL    \
    \           Local acknowledgement time\n        AR               Remote acknowledgement\
    \ time\n     4.5  Miscellaneous\n        TS-user          Transport service user\n\
    \        TSAP             Transport service access point\n        NS-provider\
    \      Network service provider\n        NSAP             Network service access\
    \ point\n        QOS              Quality of service\n     5  OVERVIEW OF THE\
    \ TRANSPORT PROTOCOL\n     NOTE - This overview is not exhaustive and has been\
    \ provided  for\n     guidance to the reader of this International Standard.\n\
    \     5.1  Service provided by the transport layer\n     The protocol specified\
    \ in this  International  Standard  supports\n     the transport service defined\
    \ in DP 8072.\n     Information is  transferred  to  and  from  the  TS-user \
    \ in  the\n     transport service primitives listed in table 1.\n     +-------------------------------------------------------------+\n\
    \     |           Primitive            |        Parameter           |\n     |--------------------------------|----------------------------|\n\
    \     |T-CONNECT         request       |   Called Address,          |\n     |\
    \                  indication    |   Calling Address,         |\n     |      \
    \                          |   Expedited Data option,   |\n     |            \
    \                    |   Quality of Service,      |\n     |                  \
    \              |   TS User-Data.            |\n     |--------------------------------|----------------------------|\n\
    \     |T-CONNECT         response      |   Responding Address,      |\n     |\
    \                  confirm       |   Quality of Service,      |\n     |      \
    \                          |   Expedited Data option,   |\n     |            \
    \                    |   TS User-Data.            |\n     |--------------------------------|----------------------------|\n\
    \     |T-DATA            request       |   TS User-Data.            |\n     |\
    \                  indication    |                            |\n     |--------------------------------|----------------------------|\n\
    \     |T-EXPEDITED DATA  request       |   TS User-Data.            |\n     |\
    \                  indication    |                            |\n     |--------------------------------|----------------------------|\n\
    \     |T-DISCONNECT      request       |   TS User-Data.            |\n     |--------------------------------|----------------------------|\n\
    \     |T-DISCONNECT      indication    |   Disconnect reason,       |\n     |\
    \                                |   TS User-Data.            |\n     +--------------------------------|----------------------------+\n\
    \                   Table 1. Transport service primitives\n     5.2  Service assumed\
    \ from the network layer\n     The protocol specified in this International Standard\
    \ assumes the\n     use of the network service defined in DP 8348.\n     Information\
    \ is transferred to and from  the  NS-provider  in  the\n     network service\
    \ primitives listed in table 2.\n     +---------------------------------------------------------------+\n\
    \     |        Primitives          |X/Y|       Parameters       |X/Y/Z|\n    \
    \ |----------------------------|---|------------------------|-----|\n     |N-CONNECT\
    \       request     | X | Called Address,        |  X  |\n     |             \
    \   indication  | X | Calling Address,       |  X  |\n     |                response\
    \    | X | NS User-Data,          |  Z  |\n     |                confirm     |\
    \ X | QOS parameter set,     |  X  |\n     |                            |   |\
    \ Responding address,    |  Z  |\n     |                            |   | Receipt\
    \ confirmation   |  Y  |\n     |                            |   | selection. \
    \            |     |\n     |----------------------------|---|------------------------|-----|\n\
    \     |N-DATA          request     | X | NS User-Data,          |  X  |\n    \
    \ |                indication  | X | Confirmation request   |  Y  |\n     |----------------------------|---|------------------------|-----|\n\
    \     |N-DATA ACKNOWLEDGE          |   |                        |     |\n    \
    \ |                request     | Y |                        |     |\n     |  \
    \              indication  | Y |                        |     |\n     |----------------------------|---|------------------------|-----|\n\
    \     |N-EXPEDITED DATA            |   |                        |     |\n    \
    \ |                request     | Y | NS User-Data.          |  Y  |\n     |  \
    \              indication  | Y |                        |     |\n     |----------------------------|---|------------------------|-----|\n\
    \     |N-RESET         request     | X | Originator,            |  Z  |\n    \
    \ |                indication  | X | Reason.                |  Z  |\n     |  \
    \              response    | X |                        |     |\n     |      \
    \          confirm     | X |                        |     |\n     |----------------------------|---|------------------------|-----|\n\
    \     |N-DISCONNECT    request     | X | NS User-Data.          |  Z  |\n    \
    \ |                indication  | X | Originator,            |  Z  |\n     |  \
    \                          |   | Reason.                |  Z  |\n     +---------------------------------------------------------------+\n\
    \                    Table 2. Network service primitives\n     Key:\n        X\
    \ - The Transport  Protocol  assumes  that  this  facility  is\n            provided\
    \ in all networks.\n        Y - The Transport  Protocol  assumes  that  this \
    \ facility  is\n            provided  in  some networks and a mechanism is provided\
    \ to\n            optionally use the facility.\n        Z - The Transport Protocol\
    \ does not use this parameter.\n     NOTES:\n        1 - The parameters listed\
    \ in  this  table  are  those  in  the\n            current network service (first\
    \ DP 8348).\n        2 - The way the parameters are exchanged between the transport\n\
    \            entity and the NS-provider is a local matter.\n     5.3  Functions\
    \ of the Transport Layer\n     5.3.1  Overview of functions\n     The functions\
    \ in the  Transport  Layer  are  those  necessary  to\n     bridge  the  gap \
    \ between the services available from the Network\n     Layer and those to be\
    \ offered to the TS-users.\n     The functions in the  Transport  Layer  are \
    \ concerned  with  the\n     enhancement  of  quality  of  service,  including\
    \ aspects of cost\n     optimization.\n     These functions are grouped below\
    \ into those used  at  all  times\n     during a transport connection and those\
    \ concerned with connection\n     establishment, data transfer and release.\n\
    \     NOTE - This International Standard does not include the following\n    \
    \ functions  which  are under consideration for inclusion in future\n     editions\
    \ of this standard:\n        a)  encryption;\n        b)  accounting mechanisms;\n\
    \        c)  status exchanges and monitoring of QOS;\n        d)  blocking;\n\
    \        e)  temporary release of network connections;\n        f)  alternative\
    \ checksum algorithm.\n     5.3.1.1  Functions used at all times\n     The following\
    \ functions, depending upon the  selected  class  and\n     options, are used\
    \ at all times during a transport connection:\n        a)  transmission of TPDUs\
    \ (see 6.2 and 6.9);\n        b)  multiplexing and demultiplexing  (see  6.15),\
    \  a  function\n            used  to  share a single network connection between\
    \ two or\n            more transport connections;\n        c)  error detection\
    \ (see 6.10, 6.13 and 6.17), a function used\n            to  detect  the loss,\
    \ corruption, duplication, misordering\n            or misdelivery of TPDUs;\n\
    \        d)  error recovery (see 6.12, 6.14, 6.18, 6.19, 6.20, 6.21 and\n    \
    \        6.22),  a  function  used  to  recover  from  detected and\n        \
    \    signalled errors.\n     5.3.1.2  Connection Establishment\n     The  purpose\
    \  of  connection  establishment  is  to  establish  a\n     transport   connection\
    \   between  two  TS-users.   The  following\n     functions of the transport\
    \ layer during this phase must match the\n     TS-users'  requested quality of\
    \ service with the services offered\n     by the network layer:\n        a)  select\
    \ network service which best matches the  requirement\n            of  the  TS-user\
    \  taking  into account charges for various\n            services (see 6.5);\n\
    \        b)  decide whether to multiplex multiple transport connections\n    \
    \        onto a single network connection (see 6.5);\n        c)  establish the\
    \ optimum TPDU size (see 6.5);\n        d)  select  the  functions  that  will\
    \  be  operational   upon\n            entering the data transfer phase (see 6.5);\n\
    \        e)  map transport addresses onto network addresses;\n        f)  provide\
    \ a  means  to  distinguish  between  two  different\n            transport connections\
    \ (see 6.5);\n        g)  transport of TS-user data (see 6.5).\n     5.3.1.3 \
    \ Data Transfer\n     The purpose of data transfer is to permit duplex transmission\
    \  of\n     TSDUs  between  the  two  TS-users  connected  by  the  transport\n\
    \     connection.   This  purpose  is  achieved  by  means  of  two-way\n    \
    \ simultaneous  communication  and by the following functions, some\n     of which\
    \ are used or not used in accordance with  the  result  of\n     the selection\
    \ performed in connection establishment:\n        a)  concatenation and separation\
    \ (see 6.4), a function used to\n            collect  several  TPDUs  into a single\
    \ NSDU at the sending\n            transport  entity  and  to  separate  the \
    \ TPDUs  at   the\n            receiving transport entity;\n        b)  segmenting\
    \ and reassembling (see 6.3), a function used  to\n            segment  a  single\
    \  data  TSDU  into multiple TPDUs at the\n            sending transport entity\
    \ and to reassemble them into their\n            original format at the receiving\
    \ transport entity;\n        c)  splitting and recombining (see 6.23), a function\
    \  allowing\n            the simultaneous use of two or more network connections\
    \ to\n            support the same transport connection;\n        d)  flow control\
    \ (see 6.16), a function used to  regulate  the\n            flow  of  TPDUs \
    \ between  two  transport  entities  on one\n            transport connection;\n\
    \        e)  transport connection identification, a means  to  uniquely\n    \
    \        identify  a  transport  connection  between  the  pair  of\n        \
    \    transport entities supporting the  connection  during  the\n            lifetime\
    \ of the transport connection;\n        f)  expedited data (see 6.11), a function\
    \ used to  bypass  the\n            flow  control  of  normal  data TPDU.  Expedited\
    \ data TPDU\n            flow is controlled by separate flow control;\n      \
    \  g)  TSDU delimiting (see 6.3), a function  used  to  determine\n          \
    \  the beginning and ending of a TSDU.\n     5.3.1.4  Release\n     The  purpose\
    \  of  release  (see  6.7  and  6.8)  is  to   provide\n     disconnection  of\
    \  the  transport  connection,  regardless of the\n     current activity.\n  \
    \   5.4  Classes and options\n     5.4.1  General\n     The functions of the Transport\
    \ Layer  have  been  organized  into\n     classes and options.\n     A class\
    \  defines  a  set  of  functions.   Options  define  those\n     functions within\
    \ a class which may or may not be used.\n     This International Standard defines\
    \ five classes of protocol:\n        a)  Class 0:  Simple Class;\n        b) \
    \ Class 1:  Basic Error recovery Class;\n        c)  Class 2:  Multiplexing Class;\n\
    \        d)  Class 3:  Error Recovery and Multiplexing Class;\n        e)  Class\
    \ 4:  Error Detection and Recovery Class.\n     NOTE - Transport connections \
    \ of  classes  2,  3  and  4  may  be\n     multiplexed together onto the same\
    \ network connection.\n     5.4.2  Negotiation\n     The use of classes and options\
    \ is  negotiated  during  connection\n     establishment.   The  choice  made\
    \ by the transport entities will\n     depend upon:\n        a)  the TS-users'\
    \ requirements expressed via T-CONNECT service\n            primitives;\n    \
    \    b)  the quality of the available network services;\n        c)  the user\
    \ required service versus cost ratio acceptable  to\n            the TS-user.\n\
    \     5.4.3  Choice of network connection\n     The following  list  classifies\
    \  network  services  in  terms  of\n     quality  with  respect  to  error  behavior\
    \  in  relation to user\n     requirements; its main purpose is to  provide  a\
    \  basis  for  the\n     decision  regarding  which  class of transport protocol\
    \ should be\n     used in conjunction with given network connection:\n       \
    \ a)  Type A.  Network connection with acceptable residual error\n           \
    \ rate  (for  example  not signalled by disconnect or reset)\n            and\
    \ acceptable rate of signalled errors.\n        b)  Type B.   Network  connections\
    \  with  acceptable  residual\n            error  rate  (for  example  not signalled\
    \ by disconnect or\n            reset) but unacceptable rate of signalled errors.\n\
    \        c)  Type C.  Network connections  with  unacceptable  residual\n    \
    \        error rate.\n     It is assumed that each transport entity is aware of\
    \ the  quality\n     of service provided by particular network connections.\n\
    \     5.4.4  Characteristics of Class 0\n     Class 0 provides the simplest type\
    \ of transport connection and is\n     fully  compatible  with the CCITT recommendation\
    \ S.70 for teletex\n     terminals.\n     Class 0 has  been  designed  to  be\
    \  used  with  type  A  network\n     connections.\n     5.4.5  Characteristics\
    \ of Class 1\n     Class 1  provides  a  basic  transport  connection  with  minimal\n\
    \     overheads.\n     The main  purpose  of  the  class  is  to  recover  from\
    \  network\n     disconnect or reset.\n     Selection of this class is usually\
    \ based on reliability criteria.\n     Class  1  has  been  designed  to  be \
    \ used  with  type B network\n     connections.\n     5.4.6  Characteristics of\
    \ Class 2\n     5.4.6.1  General\n     Class 2 provides a way to multiplex several\
    \ transport connections\n     onto  a  single network connection.  This class\
    \ has been designed\n     to be used with type A network connections.\n     5.4.6.2\
    \  Use of explicit flow control\n     The objective is to provide flow control\
    \ to help avoid congestion\n     at transport-connection-end-points and on the\
    \ network connection.\n     Typical use is when traffic is  heavy  and  continuous,\
    \  or  when\n     there  is  intensive  multiplexing.   Use  of  flow  control\
    \  can\n     optimize response times and resource utilization.\n     5.4.6.3 \
    \ Non-use of explicit flow control\n     The objective is to provide a  basic\
    \  transport  connection  with\n     minimal  overheads  suitable  when  explicit\
    \ disconnection of the\n     transport connection is desirable.  The option would\
    \ typically be\n     used for unsophisticated terminals, and when no multiplexing\
    \ onto\n     network  connections  is  required.   Expedited  data  is   never\n\
    \     available.\n     5.4.7  Characteristics of Class 3\n     Class 3 provides\
    \ the characteristics of Class 2 plus the  ability\n     to  recover  from network\
    \ disconnect or reset.  Selection of this\n     class is usually based upon reliability\
    \ criteria.   Class  3  has\n     been designed to be used with type B network\
    \ connections.\n     5.4.8  Characteristics of Class 4\n     Class 4  provides\
    \  the  characteristics  of  Class  3,  plus  the\n     capability  to  detect\
    \  and  recover from errors which occur as a\n     result of the  low  grade \
    \ of  service  available  from  the  NS-\n     provider.   The  kinds  of  errors\
    \  to be detected include:  TPDU\n     loss, TPDU delivery out of sequence, TPDU\
    \  duplication  and  TPDU\n     corruption.   These  errors  may  affect control\
    \ TPDUs as well as\n     data TPDUs.\n     This class also provides for increased\
    \ throughput capability  and\n     additional  resilience  against network failure.\
    \ Class 4 has been\n     designed to be used with type C network connections.\n\
    \     5.5  Model of the transport layer\n     A transport entity communicates\
    \ with its TS-users through one  or\n     more  TSAPs  by means of the service\
    \ primitives as defined by the\n     transport service definition DP 8072.   Service\
    \  primitives  will\n     cause  or be the result of transport protocol data unit\
    \ exchanges\n     between  the  peer  transport  entities  supporting  a  transport\n\
    \     connection.   These  protocol  exchanges  are  effected using the\n    \
    \ services of the Network Layer as defined by the  Network  Service\n     Definition\
    \ DP 8348 through one or more NSAPs.\n     Transport connection endpoints are\
    \ identified in end  systems  by\n     an  internal, implementation dependent,\
    \ mechanism so that the TS-\n     user and  the  transport  entity  can  refer\
    \  to  each  transport\n     connection.\n               +------+            \
    \            +------+\n     ----------| TSAP |------------------------| TSAP |----------\n\
    \               +------+                        +------+\n                   |\
    \                               |\n            +---------------+             \
    \  +---------------+\n            | Transport     |               | Transport\
    \     |\n            |       entity  |               |       entity  |\n     \
    \       +---------------+               +---------------+\n                  \
    \ |                               |\n                   |                    \
    \           |\n               +------+                        +------+\n     ----------|\
    \ NSAP |------------------------| NSAP |----------\n               +------+  \
    \                      +------+\n                   |                        \
    \       |\n                   +-------------------------------+\n            \
    \      Figure 2 . Model of the transport layer\n     NOTE - For purpose of illustration,\
    \ this figure  shows  only  one\n     TSAP  and  one  NSAP  for  each  transport\
    \  entity.   In  certain\n     instances, more than one TSAP and/or more than\
    \ one  NSAP  may  be\n     associated with a particular transport entity.\n  \
    \   SECTION TWO.  TRANSPORT PROTOCOL SPECIFICATION\n     6  ELEMENTS OF PROCEDURE\n\
    \     This clause contains elements of procedure which are used in  the\n    \
    \ specification  of  protocol  classes  in  clauses 7 to 12.  These\n     elements\
    \ are not meaningful on their own.\n     The procedures define the transfer of\
    \ TPDUs whose  structure  and\n     coding  is  specified  in  clause  13.   Transport\
    \ entities shall\n     accept and respond to any TPDU received in a valid NSDU\
    \  and  may\n     issue  TPDUs  initiating specific elements of procedure specified\n\
    \     in this clause.\n     NOTE - Where network service primitives and TPDUs\
    \ and  parameters\n     used  are  not significant for a particular element of\
    \ procedure,\n     they have not been included in the specification.\n     6.1\
    \  Assignment to network connection\n     6.1.1  Purpose\n     The  procedure\
    \  is  used  in  all  classes  to  assign  transport\n     connections to network\
    \ connections.\n     6.1.2  Network service primitives\n     The  procedure  makes\
    \  use  of  the  following  network   service\n     primitives:\n        a)  N-CONNECT;\n\
    \        b)  N-DISCONNECT.\n     6.1.3  Procedure\n     Each  transport  connection\
    \  shall  be  assigned  to  a   network\n     connection.  The initiator may assign\
    \ the transport connection to\n     an existing network connection of which it\
    \ is the owner or  to  a\n     new  network  connection  (see  Note 1) which it\
    \ creates for this\n     purpose.\n     The  initiator  shall  not  assign  or\
    \  reassign  the   transport\n     connection  to  an  existing  network  connection\
    \ if the protocol\n     class(es)  proposed  or  the  class  in  use  for  the\
    \  transport\n     connection are incompatible with the current usage of the network\n\
    \     connection with respect to multiplexing (see Note 2).\n     During the resynchronization\
    \ (see 6.14)  and  reassignment  after\n     failure  (see 6.12) procedures, a\
    \ transport entity may reassign a\n     transport connection to another network\
    \  connection  joining  the\n     same  NSAPs,  provided  that  it  is  the  owner\
    \  of  the network\n     connection and that the transport connection is assigned\
    \ to  only\n     one network connection at any given time.\n     During the splitting\
    \ procedure (see 6.23), a transport entity may\n     assign   a   transport  \
    \ connection  to  any  additional  network\n     connection joining the same NSAPs,\
    \ provided that it is the  owner\n     of  the  network  connection and that multiplexing\
    \ is possible on\n     the network connection.\n     The responder becomes aware\
    \ of the assignment when it receives\n        a)  a CR TPDU during the  connection\
    \  establishment  procedure\n            (see 6.5); or\n        b)  an RJ TPDU\
    \ or a retransmitted CR or  DR  TPDU  during  the\n            resynchronization\
    \   (see   6.14)  and  reassignment  after\n            failure (see 6.12) procedures;\
    \ or\n        c)  any TPDU when splitting (see 6.23) is used.\n     NOTES\n  \
    \      1.  When a new network connection is created, the  quality  of\n      \
    \      service  requested  is  a  local  matter, although it will\n          \
    \  normally be  related  to  the  requirements  of  transport\n            connection(s)\
    \ expected to be assigned to it.\n        2.  An existing network connection may\
    \ also  not  be  suitable\n            if,  for example, the quality of service\
    \ requested for the\n            transport  connection  cannot  be  attained \
    \ by  using  or\n            enhancing the network connection.\n        3.  A\
    \  network  connection  with  no  transport  connection(s)\n            assigned\
    \   to   it,   may   be   available  after  initial\n            establishment,\
    \ or because all of the transport connections\n            previously  assigned\
    \  to  it  have  been  released.  It is\n            recommended  that  only \
    \ the  owner  of  such  a   network\n            connection   should   release\
    \   it.   Furthermore,  it  is\n            recommended that it not be released\
    \ immediately after  the\n            transmission of the final TPDU of a transport\
    \ connection -\n            either a DR TPDU in response to CR TPDU or a  DC \
    \ TPDU  in\n            response  to DR TPDU.  An appropriate delay will allow\
    \ the\n            TPDU  concerned  to  reach  the  other  transport   entity\n\
    \            allowing  the freeing of any resources associated with the\n    \
    \        transport connection concerned.\n        4.  After the  failure  of \
    \ a  network  connection,  transport\n            connections which were previously\
    \ multiplexed together may\n            be assigned to different  network  connections,\
    \  and  vice\n            versa.\n     6.2  Transport protocol data unit (TPDU)\
    \ transfer\n     6.2.1  Purpose\n     The TPDU transfer procedure is used  in\
    \  all  classes  to  convey\n     transport  protocol  data  units  in  user data\
    \ fields of network\n     service primitives.\n     6.2.2  Network Service Primitives\n\
    \     The procedure uses the following network service primitives:\n        a)\
    \  N-DATA;\n        b)  N-EXPEDITED DATA\n     6.2.3  Procedure\n     The  transport\
    \  protocol  data  units  (TPDUs)  defined  for  the\n     protocol are listed\
    \ in 4.2.\n     When the network expedited variant has been selected for class\
    \ 1,\n     the transport entities shall transmit and receive ED and EA TPDUs\n\
    \     as NS-user data parameters of N-EXPEDITED DATA primitives.\n     In all\
    \ other cases, transport entities shall transmit and receive\n     TPDUs as NS-user\
    \ data parameters of N-DATA primitives.\n     When  a  TPDU  is  put  into  an\
    \  NS-user  data  parameter,   the\n     significance  of the bits within an octet\
    \ and the order of octets\n     within a TPDU shall be as defined in 13.2.\n \
    \    NOTE - TPDUs may be concatenated (see 6.4).\n     6.3  Segmenting and reassembling\n\
    \     6.3.1  Purpose\n     The segmenting and reassembling procedure is used in\
    \ all  classes\n     to map TSDUs onto TPDUs.\n     6.3.2  TPDUs and parameter\
    \ used\n     The procedure makes use of the following TPDU and parameter:\n  \
    \      DT TPDUs;\n           - End of TSDU.\n     6.3.3  Procedure\n     A transport\
    \ entity shall map a TSDU on to an ordered sequence  of\n     one  or more DT\
    \ TPDUs.  This sequence shall not be interrupted by\n     other DT TPDUs on the\
    \ same transport connection.\n     All DT TPDUs except the last DT TPDU in a sequence\
    \  greater  than\n     one shall have a length of data greater than zero.\n  \
    \   NOTES\n        1.  The EOT parameter of a DT TPDU indicates  whether  or \
    \ not\n            there are subsequent DT TPDUs in the sequence.\n        2.\
    \  There is no requirement that the DT TPDUs shall be of  the\n            maximum\
    \ length selected during connection establishment.\n     6.4  Concatenation and\
    \ separation\n     6.4.1  Purpose\n     The procedure for concatenation and separation\
    \ is used in classes\n     1, 2, 3 and 4 to convey multiple TPDUs in one NSDU.\n\
    \     6.4.2  Procedure\n     A transport  entity  may  concatenate  TPDUs  from\
    \  the  same  or\n     different transport connections.\n     The set of concatenated\
    \ TPDUs may contain:\n        a)  any number of TPDUs from the following list:\
    \  AK, EA,  RJ,\n            ER,   DC  TPDUs,  provided  that  these  TPDUs  come\
    \  from\n            different transport connections;\n        b)  no more than\
    \ one TPDU from the following  list:   CR,  DR,\n            CC,  DT,  ED  TPDUs;\
    \  if this TPDU is present, it shall be\n            placed last in the set of\
    \ concatenated TPDUs.\n     NOTES\n        1.  The TPDUs within a concatenated\
    \ set may  be  distinguished\n            by means of the length indicator parameter.\n\
    \        2.  The end of a TPDU containing  data  is  indicated  by  the\n    \
    \        termination of the NSDU.\n        3.  The number of concatenated TPDUs\
    \ referred to in 6.4.2.a is\n            bounded  by  the  maximum  number of\
    \ transport connections\n            which are multiplexed together except during\
    \ assignment or\n            reassignment.\n     6.5  Connection establishment\n\
    \     6.5.1  Purpose\n     The procedure for connection establishment is used\
    \ in all classes\n     to create a new transport connection.\n     6.5.2  Network\
    \ service primitives\n     The procedure uses the following network service primitive:\n\
    \     N-DATA\n     6.5.3  TPDUs and parameters used\n     The procedure uses the\
    \ following TPDUs and parameters:\n        a)  CR TPDU;\n            - CDT;\n\
    \            - DST-REF (set to zero);\n            - SRC-REF\n            - CLASS\
    \ and OPTIONS (i.e. preferred class, use of extended\n              format, non-use\
    \ of explicit flow control in class 2);\n            - calling TSAP-ID;\n    \
    \        - called TSAP-ID;\n            - TPDU size (proposed);\n            -\
    \ version number;\n            - security parameter;\n            - checksum;\n\
    \            - additional  option  selection  (i.e.  use   of   network\n    \
    \          expedited  in  class  1,  use of receipt confirmation in\n        \
    \      class  1,  non-use  of  checksum  in  class  4,  use  of\n            \
    \  transport expedited data transfer service);\n            - alternative protocol\
    \ class(es);\n            - acknowledge time;\n            - throughput (proposed);\n\
    \            - residual error rate (proposed);\n            - priority (proposed);\n\
    \            - transit delay (proposed);\n            - reassignment time;\n \
    \           - user data.\n        b)  CC TPDU;\n            - CDT;\n         \
    \   - DST-REF;\n            - SRC-REF;\n            - CLASS and OPTIONS (selected);\n\
    \            - calling TSAP-ID;\n            - called TSAP-ID;\n            -\
    \ TPDU size (selected);\n            - security parameter;\n            - checksum;\n\
    \            - additional option selection (selected);\n            - acknowledge\
    \ time;\n            - throughput (selected);\n            - residual error rate\
    \ (selected);\n            - priority (selected);\n            - transit delay\
    \ (selected);\n            - user data.\n          NOTE - The  transport  service\
    \  defines  transit  delay   as\n          requiring  a  previously stated average\
    \ TSDU size as a basis\n          for any  specification.   This  protocol,  as\
    \  specified  in\n          13.3.4(n),  uses  a  value of 128 octets.  Conversion\
    \ to and\n          from specifications based upon some other value is  a  local\n\
    \          matter.\n     6.5.4  Procedure\n     A transport connection is established\
    \ by means of  one  transport\n     entity  (the  initiator)  transmitting  a\
    \  CR  TPDU  to the other\n     transport entity (the responder), which replies\
    \ with a CC TPDU.\n     Before sending the CR TPDU, the initiator assigns  the\
    \  transport\n     connection  being  created  to  one  (or  more  if  the splitting\n\
    \     procedure is being use) network connection(s).  It is this set of\n    \
    \ network  connections  over which the TPDUs are sent.  During this\n     exchange,\
    \ all information and parameters needed for the transport\n     entities to operate\
    \ shall be exchanged or negotiated.\n          NOTE - Except  in  class  4,  it\
    \  is  recommended  that  the\n          initiator  starts  an  optional timer\
    \ TS1 at the time the CR\n          TPDU is  sent.   This  timer  should  be \
    \ stopped  when  the\n          connection   is   considered   as  accepted  or\
    \  refused  or\n          unsuccessful.  If the timer expires,  the  initiator\
    \  should\n          reset or disconnect the network connection and, in classes\
    \ 1\n          and 3 freeze  the  reference  (see  6.18).   For  all  other\n\
    \          transport  connection(s)  multiplexed  on  the  same network\n    \
    \      connection  the  procedures  for  reset  or  disconnect   as\n        \
    \  appropriate should be followed.\n     After receiving the CC  TPDU  for  a\
    \  class  which  includes  the\n     procedure  for  retention  until  acknowledgement\
    \  of  TPDUs  the\n     initiator shall acknowledge the CC TPDU as  defined  in\
    \  table  5\n     (see 6.13).\n     When the network expedited variant of the\
    \ expedited data transfer\n     (see  6.11)  has  been  agreed  (possible  in\
    \  class 1 only), the\n     responder shall not send  an  ED  TPDU  before  the\
    \  CC  TPDU  is\n     acknowledged.\n     The following information is exchanged:\n\
    \        a)  references.  Each transport  entity  chooses  a  reference\n    \
    \        which is to be used by the peer entity is 16 bits long and\n        \
    \    which is arbitrary except for the following restrictions:\n            1)\
    \  it shall not already be in use or frozen (see 6.18),\n            2)  it shall\
    \ not be zero.\n            This mechanism is symmetrical and provides  identification\n\
    \            of  the  transport  connection  independent of the network\n    \
    \        connection.  The range of references  used  for  transport\n        \
    \    connections,  in  a  given  transport  entity,  is a local\n            matter.\n\
    \        b)  addresses (optional).  Indicate  the  calling  and  called\n    \
    \        transport  service  access  points.   When  either network\n        \
    \    address unambiguously defines the transport  address  this\n            information\
    \ may be omitted.\n        c)  initial credit.  Only relevant for classes  which\
    \  include\n            the explicit flow control function.\n        d)  user\
    \ data.  Not available if  Class  0  is  the  preferred\n            class (see\
    \ note).  Up to 32 octets in other classes.\n            NOTE - If class 0 is\
    \ a valid response according  to  table\n            3,  inclusion  of  user \
    \ data in the CR TPDU may cause the\n            responding entity to refuse the\
    \  connection  (e.g.  if  it\n            only supports class 0).\n        e)\
    \  acknowledgement time.  Only in class 4.\n        f)  checksum parameter.  Only\
    \ in class 4.\n        g)  security parameter.  This parameter and its semantics\
    \  are\n            user defined.\n     The following negotiations take place:\n\
    \        h)  protocol class.  The initiator shall propose  a  preferred\n    \
    \        class  and  may  propose  any  number of alternative class\n        \
    \    which permit a valid response as defined in table 3.   The\n            initiator\
    \ should assume when it sends the CR TPDU that its\n            preferred class\
    \  will  be  agreed  to,  and  commence  the\n            procedures  associated\
    \  with  that  class,  except that if\n            class 0 or class 1 is an alternative\
    \  class,  multiplexing\n            shall  not  commence  until a CC TPDU selecting\
    \ the use of\n            classes 2, 3 or 4 has been received.\n            NOTE\
    \ - This means, for example, that  when  the  preferred\n            class   \
    \ includes   resynchronization   (see   6.14)   the\n            resynchronization\
    \ will  occur  if  a  reset  is  signalled\n            during connection establishment.\n\
    \     The responder shall select one class defined  in  table  3  as  a\n    \
    \ valid  response  corresponding  to the preferred class and to the\n     class(es),\
    \ if any, contained in the alternative  class  parameter\n     of  the  CR TPDU.\
    \  It shall indicate the selected class in the CC\n     TPDU and shall follow\
    \ the procedures for the selected class.\n     If the preferred class is not selected,\
    \ then on receipt of the CC\n     TPDU  the  initiator  shall  adjust  its  operation\
    \ according the\n     procedures of the selected class.\n     +------------------------------------------------------------+\n\
    \     | Pre-  |                Alternative class                   |\n     |ferred\
    \ |----------------------------------------------------|\n     |class  |   0 \
    \   |   1    |   2    |   3    |   4    | none  |\n     |-------|--------|--------|--------|--------|--------|-------|\n\
    \     |   0   |not     |not     |not     |not     |not     |class  |\n     | \
    \      |valid   |valid   |valid   |valid   |valid   |  0    |\n     |-------|--------|--------|--------|--------|--------|-------|\n\
    \     |   1   |class   |class   |not     |not     |not     |class  |\n     | \
    \      |1 or 0  |1 or 0  |valid   |valid   |valid   |1 or 0 |\n     |-------|--------|--------|--------|--------|--------|-------|\n\
    \     |   2   |class   |not     |class   |not     |not     |class  |\n     | \
    \      |2 or 0  |valid   |2       |valid   |valid   |  2    |\n     |-------|--------|--------|--------|--------|--------|-------|\n\
    \     |   3   |class   |class 3,|class   |class   |not     |class  |\n     | \
    \      |3,2 or 0|2,1 or 0|3 or 2  |3 or 2  |valid   |3 or 2 |\n     |-------|--------|--------|--------|--------|--------|-------|\n\
    \     |   4   |class   |class 4,|class   |class   |class   |class  |\n     | \
    \      |4,2 or 0|2,1 or 0|4 or 2  |4,3 or 2|4 or 2  |4 or 2 |\n     +------------------------------------------------------------+\n\
    \                                 Table 3.\n     Valid responses corresponding\
    \ to  the  preferred  class  and  any\n     alternative class proposed in the\
    \ CR TPDU\n     NOTES:\n        1.  The valid responses indicated in table 3 result\
    \ from  both\n            explicit negotiation, whereby each of the classes proposed\n\
    \            is a valid response, and implicit negotiation whereby:\n        \
    \    a)  if class 3 or 4 is proposed then class 2  is  a  valid\n            \
    \    response;\n            b)  if class 1  is  proposed  then  class  0  is \
    \ a  valid\n                response.\n        2.  Negotiation from class 2 to\
    \ class 1 and from any class  to\n            an higher-numbered class is not\
    \ valid.\n        3.  Redundant combinations are not a protocol error.\n     \
    \   j)  TPDU size.  The initiator may propose a maximum  size  for\n         \
    \   TPDUs,  and the responder may accept this value or respond\n            with\
    \ any value between 128 and the proposed value  in  the\n            set of values\
    \ available (see 13.3.4.b).\n            NOTE - The length of the  CR  TPDU  does\
    \  not  exceed  128\n            octets (see 13.3).\n        k)  normal or extended\
    \ format.  Either normal or  extended  is\n            available.   When  extended\
    \  is  used this applies to CDT,\n            TPDU-NR, ED-TPDU-NR, YR-TU-NR and\
    \ YR-EDTU-NR parameters.\n        m)  checksum selection.  This defines whether\
    \ or not TPDUs  of\n            the connection are to include a checksum.\n  \
    \      n)  quality  of  service   parameters.    This   defines   the\n      \
    \      throughput,  transit  delay,  priority  and residual error\n          \
    \  rate.\n        p)  the non-use of explicit flow control in class 2.\n     \
    \   q)  the  use  of  network  receipt  confirmation  and  network\n         \
    \   expedited when class 1 is to be used.\n        r)  use of expedited data transfer\
    \ service.  This allows  both\n            TS-users  to negotiate the use or non-use\
    \ of the expedited\n            data transport service as defined in the transport\
    \ service\n            (ISO 8072).\n     The following information is sent only\
    \ in the CR TPDU:\n        s)  version number.  This defines the version of the\
    \ transport\n            protocol standard used for this connection.\n       \
    \ t)  reassignment time parameter.  This indicates the time  for\n           \
    \ which   the   initiator  will  persist  in  following  the\n            reassignment\
    \ after failure procedure.\n     The negotiation rules for the options are such\
    \ that the initiator\n     may  propose  either  to  use  or  not  to  use  the\
    \ option.  The\n     responder may either accept the  proposed  choice  or  select\
    \  an\n     alternative choice as defined in table 4.\n     In class 2, whenever\
    \ a transport entity requests or agrees to the\n     transport  expedited  data\
    \  transfer  service  or  to  the use of\n     extended formats, it shall also\
    \ request or  agree  (respectively)\n     to the use of explicit flow control.\n\
    \     +-------------------------------------------------------------+\n     |\
    \        Option         |  Proposal Made   | Valid Selection  |\n     |      \
    \                 | by the Initiator | by the Responder |\n     |-----------------------|------------------|------------------|\n\
    \     |Transport expedited    |       Yes        |    Yes or No     |\n     |data\
    \ transfer service  |       No         |        No        |\n     |(Classes 1,2,3,4\
    \ only) |                  |                  |\n     |-----------------------|------------------|------------------|\n\
    \     |Use of receipt confir- |       Yes        |    Yes or No     |\n     |mation\
    \ (Class 1 only)  |       No         |        No        |\n     |-----------------------|------------------|------------------|\n\
    \     |Use of the network     |       Yes        |    Yes or No     |\n     |expedited\
    \ variant      |       No         |        No        |\n     |(Class 1 only) \
    \        |                  |                  |\n     |-----------------------|------------------|------------------|\n\
    \     |Non-use of checksum    |       Yes        |    Yes or No     |\n     |(Class\
    \ 4 only)         |       No         |        No        |\n     |-----------------------|------------------|------------------|\n\
    \     |Non-use of explicit    |       Yes        |    Yes or No     |\n     |flow\
    \ control           |       No         |        No        |\n     |(Class 2 only)\
    \         |                  |                  |\n     |-----------------------|------------------|------------------|\n\
    \     |Use of extended format |       Yes        |    Yes or No     |\n     |(Classes\
    \ 2,3,4 only)   |       No         |        No        |\n     +-------------------------------------------------------------+\n\
    \      Table 4. Negotiation of options during connection establishment\n     NOTE\
    \ - Table 4 defines the procedures for negotiation of options.\n     This  negotiation\
    \  has  been  designed such that if the initiator\n     proposes the mandatory\
    \ implementation option specified in  clause\n     14,  the  responder  has  to\
    \  accept  use of this option over the\n     transport  connection  except  for\
    \  the  use  of  the   transport\n     expedited  data transfer service which\
    \ may be rejected by the TS-\n     user.  If the initiator proposes a  non-mandatory\
    \  implementation\n     option,  the responder is entitled to select use of the\
    \ mandatory\n     implementation option for use over the transport connection.\n\
    \     6.6  Connection refusal\n     6.6.1  Purpose\n     The connection refusal\
    \ procedure is used in all  classes  when  a\n     transport  entity refuses a\
    \ transport connection in response to a\n     CR TPDU.\n     6.6.2  TPDUs and\
    \ parameters used\n     The procedure makes use of the following TPDUs and parameters:\n\
    \        a)  DR TPDU;\n            - SRC-REF;\n            - reason;\n       \
    \     - user data.\n        b)  ER TPDU;\n            - reject code;\n       \
    \     - rejected TPDU parameter.\n     6.6.3  Procedure\n     If a transport connection\
    \ cannot be accepted, the responder shall\n     respond to the CR TPDU with a\
    \ DR TPDU.  The reason shall indicate\n     why the connection was not accepted.\
    \  The source reference  field\n     in  the  DR  TPDU  shall be set to zero to\
    \ indicate an unassigned\n     reference.\n     If  a  DR  TPDU  is  received\
    \  the  initiator  shall  regard  the\n     connection as released.\n     The\
    \ responder shall respond to an invalid CR TPDU by  sending  an\n     ER  or \
    \ DR  TPDU.   If an ER TPDU is received in response to a CR\n     TPDU, the initiator\
    \ shall regard the connection as released.\n     NOTES\n     1.  When the invalid\
    \ CR TPDU can be identified as having class  0\n         as  the preferred class,\
    \ it is recommended to respond with an\n         ER TPDU.  For all other invalid\
    \ CR TPDUs either an ER TPDU or\n         DR TPDU may be sent.\n     2.  If the\
    \ optimal supervisory timer TS1 has been  set  for  this\n         connection\
    \  then  the entity should stop the timer on receipt\n         of the DR or ER\
    \ TPDU.\n     6.7  Normal release\n     6.7.1  Purpose\n     The release procedure\
    \ is used by a transport entity in  order  to\n     terminate  a  transport connection.\
    \  The implicit variant is used\n     only in class 0.  The explicit variant is\
    \ used in  classes  1,2,3\n     and 4.\n     NOTES\n     1.  When the implicit\
    \ variant is used  (i.e.  in  class  0),  the\n         lifetime  of  the transport\
    \ connection is directly correlated\n         with the lifetime of the network\
    \ connection.\n     2.  The use of the explicit  variant  of  the  release  procedure\n\
    \         enables the transport connection to be released independently\n    \
    \     of the underlying network connection.\n     6.7.2  Network service primitives\n\
    \     The  procedure  makes  use  of  the  following  network   service\n    \
    \ primitives:\n        a)  N-DISCONNECT (implicit variant only),\n        b) \
    \ N-DATA\n     6.7.3  TPDUs and parameters used\n     The procedure makes use\
    \ of the following TPDUs and parameters:\n        a)  DR TPDU;\n            -\
    \ clearing reason;\n            - user data;\n            - SRC-REF;\n       \
    \     - DST-REF.\n        b)  DC TPDU.\n     6.7.4  Procedure for implicit variant\n\
    \     In the implicit variant either  transport  entity  disconnects  a\n    \
    \ transport  connection  by disconnecting the network connection to\n     which\
    \ it is assigned.  When a transport  entity  receives  an  N-\n     DISCONNECT\
    \  this  should  be  considered  as  the  release of the\n     transport connection.\n\
    \     6.7.5  Procedure for explicit variant\n     When the release of a transport\
    \ connection is to be  initiated  a\n     transport entity\n        a)  if it\
    \ has previously sent or received a CC TPDU (see  note\n            1),   shall\
    \   send   a  DR  TPDU.   It  shall  ignore  all\n            subsequently received\
    \ TPDUs other than a DR  or  DC  TPDU.\n            On  receipt  of  a  DR  or\
    \  DC  TPDU it shall consider the\n            transport connection released;\n\
    \        b)  in other cases it shall:\n            1)  For  classes  other  than\
    \  class  4   wait   for   the\n                acknowledgement  of  the  outstanding\
    \  CR  TPDU; if it\n                receives a CC TPDU, it shall follow the procedures\
    \  in\n                6.7.5.a.\n            2)  For class 4 either send a DR\
    \ TPDU with a zero value in\n                the   DST-REF   field   or  follow\
    \  the  procedure  in\n                6.7.5.b.1.\n        A transport entity\
    \ that receives a DR TPDU shall\n        c)  if it has previously sent a DR TPDU\
    \ for the same transport\n            connection, consider the transport connection\
    \ released;\n        d)  if it has previously sent a CR  TPDU  that  has  not\
    \  been\n            acknowledged by a CC TPDU, consider the connection refused\n\
    \            (see 6.6).\n        e)  in other cases, send a DC TPDU and consider\
    \ the  transport\n            connection released.\n        NOTES\n        1)\
    \  This requirement ensures  that  the  transport  entity  is\n            aware\
    \   of   the   remote   reference  for  the  transport\n            connection.\n\
    \        2)  When the transport connection is  considered  as  released\n    \
    \        the  local  reference is either available for re-use or is\n        \
    \    frozen (see 6.18).\n        3)  After the release of a transport  connection\
    \  the  network\n            connection  can  be released or retained to enable\
    \ its re-\n            use for the assignment of other transport connections (see\n\
    \            6.1.).\n        4)  Except in class 4, it is recommended that, if\
    \ a  transport\n            entity  does  not  receive  acknowledgement  of  a\
    \ DR TPDU\n            within time TS2, it should either reset or disconnect \
    \ the\n            network   connection,   and   freeze  the  reference  when\n\
    \            appropriate  (see  6.18).    For   all   other   transport\n    \
    \        connection(s)  multiplexed  on this network connection the\n        \
    \    procedures for reset or disconnect as  appropriate  should\n            be\
    \ followed.\n        5)  When a transport entity is waiting for a  CC  TPDU  before\n\
    \            sending  a  DR TPDU and the network connection is reset or\n    \
    \        released, it  should  consider  the  transport  connection\n        \
    \    released  and,  in  classes  other  than  classes 0 and 2,\n            freeze\
    \ the reference (see 6.18).\n     6.8  Error Release\n     6.8.1  Purpose\n  \
    \   This procedure is used only in classes  0  and  2  to  release  a\n     transport\
    \ connection on the receipt of an N-DISCONNECT or N-RESET\n     indication.\n\
    \     6.8.2  Network service primitives\n     The procedure makes use of the following\
    \ service primitives:\n        a)  N-DISCONNECT indication;\n        b)  N-RESET\
    \ indication.\n     6.8.3  Procedure\n     When, on the network connection to\
    \ which a  transport  connection\n     is  assigned,  an N-DISCONNECT or N-RESET\
    \ indication is received,\n     both  transport  entities  shall  consider  that\
    \  the   transport\n     connection is released and so inform the TS-users.\n\
    \     NOTE - In other  classes,  since  error  recovery  is  used,  the\n    \
    \ receipt  of an N-RESET indication or N-DISCONNECT indication will\n     result\
    \ in the invocation of the error recovery procedure.\n     6.9  Association of\
    \ TPDUs with transport connections\n     6.9.1  Purpose\n     This procedure is\
    \ used in all classes  to  interpret  a  received\n     NSDU  as  TPDU(s)  and,\
    \  if possible, to associate each such TPDU\n     with a transport connection.\n\
    \     6.9.2  Network service primitives\n     This  procedure  makes  use  of\
    \  the  following  network  service\n     primitives:\n        a)  N-DATA indication;\n\
    \        b)  N-EXPEDITED DATA indication.\n     6.9.3  TPDUs and parameters uses\n\
    \     This procedure makes use of the following TPDUs and parameters:\n      \
    \  a)  any TPDU except CR TPDU, DT TPDU in classes 0 or 1 and  AK\n          \
    \  TPDU in class 1;\n            - DST-REF\n        b)  CR, CC, DR and DC TPDUs;\n\
    \            - SCR-REF.\n        c)  DT TPDU in classes 0 or 1 and AK TPDU in\
    \ class 1.\n     6.9.4  Procedures\n     6.9.4.1  Identification of TPDUs\n  \
    \   If the received NSDU or Expedited NSDU cannot  be  decoded  (i.e.\n     does\
    \ not contain one or more correct TPDUs) or is corrupted (i.e.\n     contains\
    \ a TPDU with a wrong checksum) then the transport  entity\n     shall:\n    \
    \    a)  if the network connection on which the error  is  detected\n        \
    \    has  a class 0 or class 1 transport connection assigned to\n            it,\
    \ then treat as a protocol error  (see  6.22)  for  that\n            transport\
    \ connection;\n        b)  otherwise\n            1)  if the NSDU can  be  decoded\
    \  but  contains  corrupted\n                TPDUs,  ignore the TPDUs (class 4\
    \ only) and optionally\n                apply 6.9.4.b.2.\n            2)  if the\
    \ NSDU cannot be decoded issue an N-RESET  or  N-\n                DISCONNECT\
    \  request for the network connection and for\n                all the transport\
    \ connections assigned to this network\n                connection  (if any),\
    \ apply the procedures defined for\n                handling of network signalled\
    \ reset or disconnect.\n            If the NSDU can be  decoded  and  is  not\
    \  corrupted,  the\n            transport entity shall:\n        c)  if the network\
    \ connection on which the NSDU  was  received\n            has  a  class  0 transport\
    \ connection assigned to it, then\n            consider the NSDU as forming TPDU\
    \ and associate  the  TPDU\n            with the transport connection (see 6.9.4.2).\n\
    \        d)  otherwise, invoke the separation procedures and  for  each\n    \
    \        of  the individual TPDUs in the order in which they appear\n        \
    \    in the NSDU apply the procedure defined in 6.9.4.2.\n     6.9.4.2  Association\
    \ of individual TPDUs\n     If the received TPDU is a CR TPDU then, if it is a\
    \ duplicate,  as\n     recognized  by using the NSAPs of the network connection,\
    \ and the\n     SRC-REF parameter, then  it  is  associated  with  the  transport\n\
    \     connection  created  by  the  original  value  of  the  CR  TPDU;\n    \
    \ otherwise it is processed as requesting the  creation  of  a  new\n     transport\
    \ connection.\n     If the received TPDU is a DT TPDU and the network connection\
    \  has\n     a class 0 or 1 transport connection assigned to it, or an AK TPDU\n\
    \     where a class 1 transport connection is assigned, then  the  TPDU\n    \
    \ is associated with the transport connection.\n     Otherwise, the DST-REF parameter\
    \ of the TPDU is used to  identify\n     the transport connection.  The following\
    \ cases are distinguished:\n        a)  if the DST-REF is not allocated to a transport\
    \ connection,\n            the  transport  entity  shall  respond on the same\
    \ network\n            connection with a DR TPDU if the TPDU is a CC TPDU, with\
    \ a\n            DC TPDU if the TPDU is a DR TPDU and shall ignore the TPDU\n\
    \            if neither a DR TPDU nor CC TPDU.  No association  with  a\n    \
    \        transport connection is made.\n        b)  if the DST-REF is allocated\
    \ to a connection, but the  TPDU\n            is   received   on  a  network \
    \ connection  to  which  the\n            connection has not been  assigned  then\
    \  there  are  three\n            cases:\n            1)  if the transport connection\
    \ is of class 4 and  if  the\n                TPDU is received on a network connection\
    \ with the same\n                pair of NSAPs as that of the CR TPDU then the\
    \ TPDU  is\n                considered as performing assignment,\n           \
    \ 2)  if the transport connection is  not  assigned  to  any\n               \
    \ network  connection  (waiting  for  reassignment after\n                failure)\
    \ and if the TPDU  is  received  on  a  network\n                connection  with\
    \ the same pair of NSAPs as that of the\n                CR TPDU  then  the  association\
    \  with  that  transport\n                connection is made.\n            3)\
    \  Otherwise, the TPDU is considered as having a  DST-REF\n                not\
    \ allocated to a transport connection (case a).\n        c)  If the TPDU is a\
    \ DC TPDU then it is  associated  with  the\n            transport  connection\
    \  to  which the DST-REF is allocated,\n            unless the SRC-REF is not\
    \ the expected one, in which  case\n            the DC TPDU is ignored.\n    \
    \    d)  If the TPDU is a DR TPDU then there are three cases:\n            1)\
    \  if the SRC-REF is not as expected then a DC TPDU  with\n                DST-REF\
    \  equal  to the SRC-REF of the received DR TPDU\n                is sent back\
    \ and no association is made;\n            2)  if a CR TPDU is unacknowledged\
    \ then  the  DR  TPDU  is\n                associated  with  the transport connection,\
    \ regardless\n                of the value of its SRC-REF parameter;\n       \
    \     3)  otherwise,  the  DR  TPDU  is  associated   with   the\n           \
    \     transport   connection   identified   by  the  DST-REF\n               \
    \ parameter.\n        e)  if  the  TPDU  is  a  CC  TPDU  whose  DST-REF   parameter\n\
    \            identifies an open connection (one for which a CC TPDU has\n    \
    \        been previously received), and the SRC-REF in the CC  TPDU\n        \
    \    does  not  match  the  remote reference, then a DR TPDU is\n            sent\
    \ back  with  DST-REF  equal  to  the  SRC-REF  of  the\n            received\
    \ CC TPDU and no association is made.\n        f)  if none  of  the  above  cases\
    \  apply  then  the  TPDU  is\n            associated with the transport connection\
    \ identified by the\n            DST-REF parameter.\n     6.10  Data TPDU numbering\n\
    \     6.10.1  Purpose\n     Data TPDU numbering is used in classes  1,  2  (except\
    \  when  the\n     non-use  of  explicit  flow control option is selected), 3\
    \ and 4.\n     Its purpose is to enable the use of recovery,  flow  control  and\n\
    \     re-sequencing functions.\n     6.10.2  TPDUs and parameters used\n     The\
    \ procedure makes use of the following TPDU and parameter:\n        DT TPDU;\n\
    \        - TPDU-NR.\n     6.10.3  Procedure\n     A Transport entity shall allocate\
    \ the sequence number zero to the\n     TPDU-NR  of  the first DT TPDU which it\
    \ transmits for a transport\n     connection.  For subsequent DT TPDUs sent on\
    \ the  same  transport\n     connection, the transport entity shall allocate a\
    \ sequence number\n     one greater than the previous one.\n     When a DT TPDU\
    \ is retransmitted, the TPDU-NR parameter shall have\n     the same value as in\
    \ the first transmission of that DT TPDU.\n     Modulo 2**7 arithmetic shall be\
    \ used  when  normal  formats  have\n     been  selected  and  modulo  2**31 \
    \ arithmetic shall be used when\n     extended formats  have  been  selected.\
    \   In  this  International\n     Standard  the  relationships 'greater than'\
    \ and 'less than' apply\n     to a set of contiguous TPDU numbers whose range\
    \ is less than  the\n     modulus  and whose starting and finishing numbers are\
    \ known.  The\n     term 'less than' means 'occurring sooner in the window  sequence'\n\
    \     and  the term 'greater than' means 'occurring later in the window\n    \
    \ sequence'.\n     6.11  Expedited data transfer\n     6.11.1  Purpose\n     Expedited\
    \ data transfer procedures are selected during connection\n     establishment.\
    \   The  network  normal data variant may be used in\n     classes 1, 2, 3 and\
    \ 4.  The network  expedited  variant  is  only\n     used in class 1.\n     6.11.2\
    \  Network service primitives\n     The  procedure  makes  use  of  the  following\
    \  network   service\n     primitives:\n        a)  N-DATA;\n        b)  N-EXPEDITED\
    \ DATA.\n     6.11.3  TPDUs and parameter used\n     The procedure makes use of\
    \ the following TPDUs and parameters:\n        a)  ED TPDU;\n            - ED\
    \ TPDU-NR.\n        b)  EA TPDU;\n            - YR-EDTU-NR.\n     6.11.4  Procedures\n\
    \     The TS-user data parameter of each T-EXPEDITED DATA request shall\n    \
    \ be conveyed as the data field of an Expedited Data (ED) TPDU.\n     Each ED\
    \ TPDU received  shall  be  acknowledged  by  an  Expedited\n     Acknowledge\
    \ (EA) TPDU.\n     No more than one ED TPDU shall remain unacknowledged at any\
    \  time\n     for each direction of a transport connection.\n     An ED TPDU with\
    \ a zero length data field is a protocol error.\n     NOTES\n        1.  The network\
    \ normal data variant is used, except  when  the\n            network expedited\
    \ variant (available in Class 1 only), has\n            been agreed, in which\
    \ case ED and EA TPDUs are conveyed in\n            the  data  fields  of  N-EXPEDITED\
    \  DATA  primitives  (see\n            6.2.3).\n        2.  No TPDUs can be transmitted\
    \ using network expedited  until\n            the  CC  TPDU becomes acknowledged,\
    \ to prevent the network\n            expedited from overtaking the CC TPDU.\n\
    \     6.12  Reassignment after failure\n     6.12.1  Purpose\n     The reassignment\
    \ after failure procedure is used in Classes 1 and\n     3 to commence recovery\
    \ from an NS-provider signalled disconnect.\n     6.12.2  Network service primitives\n\
    \     The procedure uses the following network service primitive:\n          N-DISCONNECT\
    \ indication\n     6.12.3  Procedure\n     When an N-DISCONNECT indication  is\
    \  received  from  the  network\n     connection  to  which  a  transport  connection\
    \  is assigned, the\n     initiator shall apply one of the following alternatives:\n\
    \        a)  if the TTR timer has not already run out and no DR TPDU is\n    \
    \        retained then:\n            1)  assign the transport connection to a\
    \ different network\n                connection  (see  6.1)  and start its TTR\
    \ timer if not\n                already started.\n            2)  while waiting\
    \ for the completion of assignment if:\n                - an N-DISCONNECT indication\
    \ is received,  repeat  the\n                  procedure from 6.12.3.a,\n    \
    \            - the TTR timer expires, begin procedure 6.12.3.b.\n            3)\
    \  when     reassignment     is     completed,      begin\n                resynchronization\
    \ (see 6.14) and:\n                - if a valid TPDU is received as  the  result\
    \  of  the\n                  resynchronization, stop the TTR timer, or\n    \
    \            - if TTR runs out, wait for the next event, or\n                -\
    \ if an  N-DISCONNECT  indication  is  received,  then\n                  begin\
    \   either   procedure   6.12.3.a   or  6.12.3.b\n                  depending\
    \ on the TTR timer.\n            NOTE - After the TTR timer expires and while\
    \  waiting  for\n            the  next  event,  it  is  recommended  that the\
    \ initiator\n            starts the TWR timer.  If the TWR timer expires before\
    \ the\n            next  event  the  initiator  should begin the procedure in\n\
    \            6.12.3.b.\n        b)  if the TTR timer  has  run  out,  consider\
    \  the  transport\n            connection  as  released  and  freeze  the  reference\
    \ (see\n            6.18).\n        c)   if a DR TPDU is retained and the TTR\
    \ timer  has  not  run\n            out,  then  follow  the  actions  in  either\
    \  6.12.3.a  or\n            6.12.3.b.\n     The responder shall start its TWR\
    \ timer if not  already  started.\n     The arrival of the first TPDU related\
    \ to the transport connection\n     (because of resynchronization by  the  initiator)\
    \  completes  the\n     reassignment  after  failure procedure.  The TWR timer\
    \ is stopped\n     and the responder  shall  continue  with  resynchronization\
    \  (see\n     6.14).  If reassignment does not take place within this time, the\n\
    \     transport connection is considered released and the reference  is\n    \
    \ frozen (see 6.18).\n     6.12.4  Timers\n     The reassignment after failure\
    \ procedure uses two timers:\n        a)  TTR, the time to try reassignment/resynchronization\
    \ timer;\n        b)  TWR, the time to wait  for  reassignment/resynchronization\n\
    \            timer.\n     The TTR timer is used by the  initiator.   Its  value\
    \  shall  not\n     exceed  two  minutes  minus  the  sum  of  the maximum disconnect\n\
    \     propagation  delay  and  the  transit  delay   of   the   network\n    \
    \ connections  (see  note  1).   The value for the TTR timer may be\n     indicated\
    \ in the CR TPDU.\n     The TWR timer is used by the responder.  If the reassignment\
    \ time\n     parameter is present in the CR TPDU, the TWR timer value shall be\n\
    \     greater than the sum of the TTR timer plus the maximum disconnect\n    \
    \ propagation   delay   plus  the  transit  delay  of  the  network\n     connections.\n\
    \     If the reassignment time parameter is not present in the CR TPDU,\n    \
    \ a default value of 2 minutes shall be used for the TWR timer.\n     NOTES\n\
    \     1.  Provided that the required quality of service is met, TTR may\n    \
    \     be  set  to zero (i.e. no assignment).  This may be done, for\n        \
    \ example, if the rate of NS-provider generated disconnects  is\n         very\
    \ low.\n     2.  Inclusion of the reassignment time parameter in the  CR  TPDU\n\
    \         allows  the  responder  to  use  a  TWR  value of less than 2\n    \
    \     minutes.\n     3.  If  the  optional  TS1  and  TS2  timers  are  used,\
    \  it   is\n         recommended:\n            a)  to stop TS1 or TS2 if  running\
    \  when  TTR  or  TWR  is\n                started;\n            b)  to  restart\
    \  TS1  or  TS2  if   necessary   when   the\n                corresponding TPDU\
    \ (CR TPDU or DR TPDU respectively is\n                repeated);\n          \
    \  c)  to select for TS1 and TS2 values greater than TTR.\n     6.13  Retention\
    \ until acknowledgement of TPDUs\n     6.13.1  Purpose\n     The retention until\
    \ acknowledgement of TPDUs procedure is used in\n     classes  1,  3  and 4 to\
    \ enable and minimize retransmission after\n     possible loss of TPDUs.\n   \
    \  The confirmation of receipt variant is used only in Class 1  when\n     it\
    \ has been agreed during connection establishment (see note).\n     The AK variant\
    \ is used in classes 3 and 4 and  also  in  Class  1\n     when  the  confirmation\
    \  of  receipt  variant has not been agreed\n     during connection establishment.\n\
    \     NOTE - Use of confirmation of  receipt  variant  depends  on  the\n    \
    \ availability  of  the  network layer receipt confirmation service\n     and\
    \ the expected cost reduction.\n     6.13.2  Network service primitives\n    \
    \ The procedure uses the following network service primitives:\n        a)  N-DATA;\n\
    \        b)  N-DATA ACKNOWLEDGE.\n     6.13.3  TPDUs and parameters used\n   \
    \  The procedure uses the following TPDUs and parameters:\n        a)  CR, CC,\
    \ DR and DC TPDUs;\n        b)  RJ and AK TPDUs;\n            - YR-TU-NR.\n  \
    \      c)  DT TPDU;\n            - TPDU-NR.\n        d)  ED TPDU;\n          \
    \  - ED-TPDU-NR.\n        e)  EA TPDU;\n            - YR-EDTU-NR.\n     6.13.4\
    \  Procedures\n     Copies of the following TPDUs shall be retained upon transmission\n\
    \     to permit their later retransmission:\n        CR, CC, DR, DT and ED TPDUs\n\
    \     except that if a DR is sent in response to a CR TPDU there is  no\n    \
    \ need to retain a copy of the DR TPDU.\n     In the confirmation of receipt variant,\
    \ applicable only in  Class\n     1,  transport  entities receiving N-DATA indications\
    \ which convey\n     DT TPDUs and have the confirmation request field set shall\
    \  issue\n     an N-DATA ACKNOWLEDGE request (see notes 1 and 2).\n     After\
    \ each TPDU is acknowledged, as shown in table  5,  the  copy\n     need  not\
    \  be  retained.   Copies  may also be discarded when the\n     transport connection\
    \ is released.\n     NOTES\n        1.  It is a local matter for each transport\
    \ entity  to  decide\n            which N-DATA requests should have the confirmation\
    \ request\n            parameter set.  This decision will normally be related\
    \  to\n            the amount of storage available for retained copies of the\n\
    \            DT TPDUs.\n        2.  Use of the confirmation request parameter\
    \ may  affect  the\n            quality of network service.\n     +-------------------------------------------------------------+\n\
    \     |RETAINED|              |                                     |\n     |\
    \  TPDU  |   VARIANT    |    RETAINED UNTIL ACKNOWLEDGED BY   |\n     |--------|--------------|-------------------------------------|\n\
    \     |   CR   | both         |CC, DR or ER TPDU.                   |\n     |\
    \        |              |                                     |\n     |   DR \
    \  | both         |DC or DR (in case of collision) TPDU.|\n     |        |   \
    \           |                                     |\n     |   CC   | confirmation\
    \ |N-DATA Acknowledge indication, RJ,   |\n     |        | of receipt   |DT, EA\
    \ or ED TPDU.                   |\n     |        | variant      |            \
    \                         |\n     |        |              |                  \
    \                   |\n     |   CC   | AK variant   |RJ, DT, AK, ED or EA TPDU.\
    \           |\n     |        |              |                                \
    \     |\n     |   DT   | confirmation |N-DATA ACKNOWLEDGE indication cor-   |\n\
    \     |        | of receipt   |responding to an N-DATA request which|\n     |\
    \        | variant      |conveyed, or came after, the DT TPDU.|\n     |      \
    \  |              |                                     |\n     |   DT   | AK\
    \ variant   |AK or RJ TPDU for which the YR-TU-NR |\n     |        |         \
    \     |is greater than TPDU-NR in the DT    |\n     |        |              |TPDU.\
    \                                |\n     |        |              |           \
    \                          |\n     |   ED   | both         |EA TPDU for which\
    \ the YR-EDTU-NR is  |\n     |        |              |equal to the ED-TPDU-NR\
    \ in the       |\n     |        |              |ED TPDU.                     \
    \        |\n     +-------------------------------------------------------------+\n\
    \                     Table 5. Acknowledgement of TPDUs\n     6.14  Resynchronization\n\
    \     6.14.1  Purpose\n     The resynchronization procedures are used in Classes\
    \ 1 and  3  to\n     restore  the  transport  connection  to  normal  after a\
    \ reset or\n     during reassignment after failure according to 6.12.\n     6.14.2\
    \  Network service primitives\n     The  procedure  makes  use  of  the  following\
    \  network   service\n     primitive:\n          N-RESET indication.\n     6.14.3\
    \  TPDUs and parameters used\n     The procedure uses the following TPDUs and\
    \ parameters:\n        a)  CR, DR, CC and DC TPDUs\n        b)  RJ TPDUs;\n  \
    \          - YR-TU-NR.\n        c)  DT TPDU;\n            - TPDU-NR\n        d)\
    \  ED TPDU;\n            - ED TPDU-NR.\n        e)  EA TPDU;\n            - YR-EDTU-NR.\n\
    \     6.14.4  Procedure\n     A transport entity which is notified of the occurence\
    \  of  an  N-\n     RESET   or  which  is  performing  'reassignment  after  failure'\n\
    \     according to 6.12 shall carry out  the  active  resynchronization\n    \
    \ procedure (see 6.14.4.1) unless any of the following hold:\n        a)  the\
    \ transport entity is the responder (see note).  In this\n            case  the\
    \  passive  resynchronization procedure is carried\n            out (see 6.14.4.2).\n\
    \        b)  the transport entity has  elected  not  to  reassign  (see\n    \
    \        6.12.3.c).  In this case no resynchronization takes place.\n     6.14.4.1\
    \  Active resynchronization procedures\n     The Transport  entity  shall  carry\
    \  out  one  of  the  following\n     actions:\n        a)  if the TTR timer has\
    \ been previously started and  has  run\n            out  (i.e. no valid TPDU\
    \ has been received), the transport\n            connection is considered as released\
    \ and the reference  is\n            frozen (see 6.18).\n        b)  otherwise,\
    \ the TTR timer shall be started  (unless  it  is\n            already running)\
    \ and the first applicable of the following\n            actions shall be taken:\n\
    \            1)  if a CR TPDU is  unacknowledged,  then  the  transport\n    \
    \            entity shall retransmit it;\n            2)  if a DR TPDU is  unacknowledged,\
    \  then  the  transport\n                entity shall retransmit it;\n       \
    \     3)  otherwise, the transport entity shall  carry  out  the\n           \
    \     data resynchronization procedures (6.14.4.3).\n            The TTR timer\
    \ is stopped when a valid TPDU is received.\n     6.14.4.2  Passive resynchronization\
    \ procedures\n     The transport entity shall not send any TPDUs until  a  TPDU\
    \  has\n     been received.  The transport entity shall start its TWR timer if\n\
    \     it was not already started (due to a previous N-DISCONNECT or  N-\n    \
    \ RESET indication).  If the timer runs out prior to the receipt of\n     a valid\
    \ TPDU which commence resynchronization (i.e. CR or  DR  or\n     RJ  TPDU)  the\
    \ transport connection is considered as released and\n     the reference is released\
    \ (see 6.18).\n     When a valid TPDU is received the transport entity shall stop\
    \ its\n     TWR  timer  and  carry  out  the appropriate one of the following\n\
    \     actions, depending on the TPDU:\n        a)  if it is a DR TPDU, then the\
    \ transport entity shall send a\n            DC TPDU;\n        b)  if it is  a\
    \  repeated  CR  TPDU  (see  note  1)  then  the\n            transport  entity\
    \  shall  carry out the appropriate action\n            from the following:\n\
    \            1)  if a CC TPDU has already been sent, and  acknowledged:\n    \
    \            treat as a protocol error;\n            2)  if a DR TPDU is unacknowledged\
    \ (whether or  not  a  CC\n                TPDU  is  unacknowledged): retransmit\
    \ the DR TPDU, but\n                setting the source reference to zero;\n  \
    \          3)  if the T-CONNECT response has not  yet  been  received\n      \
    \          from the user:  take no action;\n            4)  otherwise; retransmit\
    \  the  CC  TPDU  followed  by  an\n                unacknowledged ED TPDU (see\
    \ note 2) and any DT TPDU;\n         NOTES\n            1.  A repeated CR TPDU\
    \ can be identified  by  being  on  a\n                network   connection  \
    \ with  the  appropriate  network\n                addresses and having a correct\
    \ source reference.\n            2.  The transport entity should not use network\
    \  expedited\n                until  the  CC  TPDU  is acknowledged (see 6.5).\
    \  This\n                rule prevents the network  expedited  from  overtaking\n\
    \                the CC TPDU.\n        c)  if it is an RJ or  ED  TPDU  then \
    \ one  of  the  following\n            actions shall be taken:\n            1)\
    \  if a DR TPDU is  unacknowledged,  then  the  transport\n                entity\
    \ shall retransmit it;\n            2)  otherwise, the transport entity shall\
    \  carry  out  the\n                data resynchronization procedures (6.14.4.3).\n\
    \            3)  If a CC TPDU was unacknowledge,  the  RJ  or  ED  TPDU\n    \
    \            should  then  be  considered  as  acknowledging the CC\n        \
    \        TPDU.  If a CC TPDU was never sent, the RJ TPDU should\n            \
    \    then be considered as a protocol error.\n     6.14.4.3  Data Resynchronization\
    \ Procedures\n     The transport entity shall carry out the following actions\
    \ in the\n     following order:\n        a)  (re)transmit any ED TPDU which is\
    \ unacknowledged,\n        b)  transmit an RJ TPDU with YR-TU-NR field set to\
    \ the TPDU-NR\n            of the next expected DT TPDU;\n        c)  wait for\
    \ the next TPDU from the  other  transport  entity,\n            unless an RJ\
    \ or DR TPDU has already been received; if a DR\n            TPDU is received\
    \ the transport entity  shall  send  a  DC,\n            freeze   the   reference,\
    \   inform   the  TS-user  of  the\n            disconnection and take no further\
    \ action  (i.e.  it  shall\n            not  follow  the procedures in 6.14.4.3.d).\
    \  If an RJ TPDU\n            is  received,  the  procedure  of  6.14.4.3.d  \
    \ shall   be\n            followed.   If  an  ED  TPDU is received the procedures\
    \ as\n            described  in  6.11  shall  be  followed.   If  it  is   a\n\
    \            duplicated  ED-TPDU the transport entity shall acknowledge\n    \
    \        it, with an EA TPDU, discard the duplicated  ED  TPDU  and\n        \
    \    wait again for the next TPDU.\n        d)  (re)transmit  any  DT  TPDUs \
    \ which  are   unacknowledged,\n            subject  to  any  applicable  flow\
    \ control procedures (see\n            note);\n            NOTE - The RJ TPDU\
    \ may have reduced the credit.\n     6.15  Multiplexing and demultiplexing\n \
    \    6.15.1  Purpose\n     The  multiplexing  and  demultiplexing  procedures\
    \  are  used  in\n     Classes  2,  3  and  4  to allow several transport connections\
    \ to\n     share a network connection at the same time.\n     6.15.2  TPDUs and\
    \ parameters used\n     The procedure makes use of the following TPDUs and parameters:\n\
    \        CC, DR, DC, DT, AK, ED, EA, RJ and ER TPDUs\n        - DST-REF\n    \
    \ 6.15.3  Procedure\n     The transport entities shall be able to send and receive\
    \  on  the\n     same  network  connection  TPDUs belonging to different transport\n\
    \     connections.\n     NOTES\n        1.  When performing demultiplexing the\
    \ transport connection to\n            which  the  TPDUs  apply  is  determined\
    \ by the procedures\n            defined in 6.9.\n        2.  Multiplexing allows\
    \ the concatenation of  TPDUs  belonging\n            to  different  transport\
    \  connections to be transferred in\n            the same N-DATA primitive (see\
    \ 6.4).\n     6.16  Explicit Flow Control\n     6.16.1  Purpose\n     The explicit\
    \ flow control procedure is used in Classes 2, 3 and 4\n     to  regulate  the\
    \  flow  of  DT  TPDUs  independently of the flow\n     control in the other layers.\n\
    \     6.16.2  TPDUs and parameters used\n     The procedure makes use of the following\
    \ TPDUs and parameters:\n        a)  CR, CC, AK and RJ TPDUs\n            - CDT.\n\
    \        b)  DT TPDU\n            - TPDU-NR.\n        c)  AK TPDU\n          \
    \  - YR-TU-NR;\n            - subsequence number;\n            - flow control\
    \ confirmation.\n        d)  RJ TPDU\n            - YR-TU-NR.\n     6.16.3  Procedure\n\
    \     The procedures differ in different classes.  They are defined  in\n    \
    \ the clauses specifying the separate classes.\n     6.17  Checksum\n     6.17.1\
    \  Purpose\n     The checksum procedure is used to detect corruption of  TPDUs\
    \  by\n     the NS-provider.\n     NOTE - Although a checksum algorithm has to\
    \  be  adapted  to  the\n     type  of  errors  expected  on the network connection,\
    \ at present\n     only one algorithm is defined.\n     6.17.2  TPDUs and parameters\
    \ used\n     The procedure uses the following TPDUs and parameters:\n        All\
    \ TPDUs\n         - checksum\n     6.17.3  Procedure\n     The checksum is used\
    \ only in Class 4.  It is always used for  the\n     CR TPDU, and is used for\
    \ all other TPDUs except if the non-use of\n     the procedure was agreed during\
    \ connection establishment.\n     The sending  transport  entity  shall  transmit\
    \  TPDUs  with  the\n     checksum  parameter  set  such  that  the  following\
    \ formulas are\n     satisfied:\n        SUM(from i=1 to i=L) OF a[i] EQUALS <zero>\
    \ (module 255)\n        SUM(from i=1 to i=L) OF i*a[i] EQUALS <zero> (module 255)\n\
    \     where\n        i    = number (i.e. position) of an octet within the TPDU\n\
    \               (see 13.2);\n        a[i] = value of octet in position 1;\n  \
    \      L    = length of TPDU in octets.\n     A  transport  entity  which  receives\
    \  a  TPDU  for  a  transport\n     connection  for  which  the  use  of checksum\
    \ has been agreed and\n     which does not satisfy the above formulas shall discard\
    \ the  TPDU\n     (see also note 2).\n     NOTES\n        1.  An  efficient  algorithm\
    \  for  determining  the   checksum\n            parameters is given in annex\
    \ B.\n        2.  If the checksum is incorrect, it is not possible  to  know\n\
    \            with  certainty  to which transport connection the TPDU is\n    \
    \        related; further action may be taken for all the transport\n        \
    \    connections assigned to the network connection (see 6.9).\n        3.  The\
    \ checksum proposed is easy to calculate and so will not\n            impose \
    \ a  heavy  burden  on implementations.  However, it\n            will not detect\
    \ insertion or loss of leading  or  trailing\n            zeros and will not detect\
    \ some octets misordering.\n     6.18  Frozen references\n     6.18.1  Purpose\n\
    \     This procedure is used in order to prevent re-use of a  reference\n    \
    \ while  TPDUs  associated  with  the  old use of the reference may\n     still\
    \ exist.\n     6.18.2  Procedure\n     When a transport entity determines that\
    \ a  particular  connection\n     is  released  it shall place the reference which\
    \ it has allocated\n     to the connection in a frozen state according to  the\
    \  procedures\n     of the class.  While frozen, the reference shall not be re-used.\n\
    \     NOTE - The  frozen  reference  procedure  is  necessary   because\n    \
    \ retransmission or misordering can cause TPDUs bearing a reference\n     to arrive\
    \ at an entity after it has released the  connection  for\n     which  it  allocated\
    \ the reference.  Retransmission, for example,\n     can arise when the class\
    \ includes either  resynchronization  (see\n     6.14) or retransmission on time\
    \ out (see 6.19).\n     6.18.2.1  Procedure for classes 0 and 2\n     The frozen\
    \ reference procedure is never used for these classes.\n     NOTE - However for\
    \ consistency with the  other  classes  freezing\n     the references may be done\
    \ as a local decision.\n     6.18.2.2  Procedure for classes 1 and 3\n     The\
    \ frozen reference procedure is used except  in  the  following\n     cases (see\
    \ note 1):\n        a)  when the transport entity receives a DC TPDU  in  response\n\
    \            to a DR TPDU which it has sent (see note 2);\n        b)  when the\
    \ transport  entity  sends  a  DR  or  ER  TPDU  in\n            response to a\
    \ CR TPDU which it has received (see note 3);\n        c)  when the transport\
    \ entity has considered the connection to\n            be  released  after  the\
    \  expiration of the TWR timer (see\n            note 4);\n        d)  when the\
    \ transport entity receives a  DR  or  ER  TPDU  in\n            response to a\
    \ CR TPDU which it has sent.\n     The period of time for which the reference\
    \ remains  frozen  shall\n     be greater than the TWR time.\n     NOTES\n   \
    \     1.  However, even in these cases, for consistency freezing the\n       \
    \     reference may be done as a local decision.\n        2.  When the DC TPDU\
    \ is received it is certain that the  other\n            transport entity considers\
    \ the connection released.\n        3.  When the DR or ER TPDU is sent the peer\
    \  transport  entity\n            has not been informed of any reference assignment\
    \ and thus\n            cannot possibly make use of a reference (this includes\
    \ the\n            case where a CC TPDU was sent, but was lost).\n        4. \
    \ In 6.18.2.c the transport entity has  already  effectively\n            frozen\
    \ the reference for an adequate period.\n     6.18.2.3  Procedure for classes\
    \ 4\n     The frozen reference procedure is always used in  class  4.   The\n\
    \     period  for  which the reference remains frozen should be greater\n    \
    \ than L (see 12.2.1.1.6).\n     6.19  Retransmission on time-out\n     6.19.1\
    \  Purpose\n     The procedure is used in Class 4 to cope with unsignalled loss\
    \ of\n     TPDUs by the NS-provider.\n     6.19.2  TPDUs used\n     The procedure\
    \ makes use of the following TPDUs:\n        CR, CC, DR, DT, ED, AK TPDUs.\n \
    \    6.19.3  Procedure\n     The procedure is specified in the procedures  for\
    \  Class  4  (see\n     12.2.1.2.j).\n     6.20  Resequencing\n     6.20.1  Purpose\n\
    \     The resequencing procedure is  used  in  Class  4  to  cope  with\n    \
    \ misordering of TPDUs by the network service provider.\n     6.20.2  TPDUs and\
    \ parameters used\n     The procedure uses the following TPDUs and parameters:\n\
    \        a)  DT TPDU;\n            - TPDU-NR.\n        b)  ED TPDU\n         \
    \   - ED TPDU-NR\n     6.20.3  Procedure\n     The procedure is specified in the\
    \ procedures  for  Class  4  (see\n     12.2.3.5).\n     6.21  Inactivity control\n\
    \     6.21.1  Purpose\n     The inactivity control procedure is used in Class\
    \ 4 to cope  with\n     unsignalled termination of a network connection.\n   \
    \  6.21.2  Procedure\n     The procedure is specified in the procedures  for \
    \ Class  4  (see\n     12.2.3.3).\n     6.22  Treatment of protocol errors\n \
    \    6.22.1  Purpose\n     The procedure for treatment of protocol errors  is\
    \  used  in  all\n     classes to deal with invalid TPDUs.\n     6.22.2  TPDUs\
    \ and parameters used\n     The procedure uses the following TPDUs and parameters:\n\
    \        a)  ER TPDU;\n            - reject cause;\n            - TPDU in error.\n\
    \        b)  DR TPDU;\n            - reason code.\n     6.22.3  Procedure\n  \
    \   A transport entity that receives a TPDU that can be associated to\n     a\
    \  transport  connection and is invalid or constitutes a protocol\n     error\
    \ (see 3.2.16 and 3.2.17) shall take  one  of  the  following\n     actions  so\
    \  as not to jeopardize any other transport connections\n     not assigned to\
    \ that network connection:\n        a)  ignoring the TPDU;\n        b)  transmitting\
    \ an ER TPDU;\n        c)  resetting or closing the network connection; or\n \
    \       d)  invoking the release procedures appropriate to the class.\n     If\
    \ an ER TPDU is sent in Class 0 it shall contain the  octets  of\n     the  invalid\
    \  TPDU  up to and including the octet where the error\n     was detected (see\
    \ notes 3, 4 and 5).\n     If the TPDU  cannot  be  associated  to  a  particular\
    \  transport\n     connection then see 6.9.\n     NOTES\n        1.  In  general,\
    \  no  further  action  is  specified  for  the\n            receiver  of  the\
    \  ER  TPDU  but it is recommended that it\n            initiates the release\
    \ procedure appropriate to the  class.\n            If the ER TPDU has been received\
    \ as an answer to a CR TPDU\n            then the connection is regarded as released\
    \ (see 6.6).\n        2.  Care should be  taken  by  a  transport  entity  receiving\n\
    \            several  invalid TPDUs or ER TPDUs to avoid looping if the\n    \
    \        error is generated repeatedly.\n        3.  If the invalid received TPDU\
    \ is greater than the  selected\n            maximum  TPDU  size  it  is  possible\
    \  that  it  cannot be\n            included in the invalid TPDU parameter of\
    \ the ER TPDU.\n        4.  It is recommended that the sender of the ER TPDU starts\
    \ an\n            optional   timer   TS2   to  ensure  the  release  of  the\n\
    \            connection.  If the timer expires,  the  transport  entity\n    \
    \        shall  initiate  the release procedures appropriate to the\n        \
    \    class.  The timer should be stopped when a DR TPDU  or  an\n            N-DISCONNECT\
    \ indication is received.\n        5.  In classes other  than  0,  it  is  recommended\
    \  that  the\n            invalid TPDU be also included in the ER TPDU.\n    \
    \ 6.23  Splitting and recombining\n     6.23.1  Purpose\n     This procedure is\
    \ used only in  class  4  to  allow  a  transport\n     connection to make use\
    \ of multiple network connections to provide\n     additional  resilience  against\
    \  network  failure,  to   increase\n     throughput, or for other reasons.\n\
    \     6.23.2  Procedure\n     When this procedure is being used, a transport connection\
    \ may  be\n     assigned  (see 6.1) to multiple network connections (see note\
    \ 1).\n     TPDUs for the connection  may  be  sent  over  any  such  network\n\
    \     connection.\n     If the use of Class 4 is not accepted  by  the  remote\
    \  transport\n     entity   following   the   negotiation  rules,  then  no  network\n\
    \     connection except that over which the CR TPDU was sent  may  have\n    \
    \ this transport connection assigned to it.\n     NOTES\n        1.  The resequencing\
    \ function of Class 4 (see 6.20) is used to\n            ensure that TPDUs are\
    \ processed in the correct sequence.\n        2.  Either transport  entity  may\
    \  assign  the  connection  to\n            further  network  connections  of\
    \ which it is the owner at\n            any time during the life of the transport\
    \ connection.\n        3.  In order to enable the detection  of  unsignalled \
    \ network\n            connection   failures,   a   transport  entity  performing\n\
    \            splitting should ensure that TPDUs are sent  at  intervals\n    \
    \        on  each  supporting  network  connection, for example, by\n        \
    \    sending   successive   TPDUs   on    successive    network\n            connections,\
    \  where the set of network connections is used\n            cyclically.  By \
    \ monitoring  each  network  connection,  a\n            transport entity may\
    \ detect unsignalled network connection\n            failures, following the inactivity\
    \ procedures  defined  in\n            12.2.3.3.   Thus,  for each network connection\
    \ no period I\n            (see 12.2.3.1) may elapse without the receipt of some\
    \ TPDU\n            for some transport connection.\n     7  Protocol Classes\n\
    \     Table 6 gives an overview of  which  elements  of  procedure  are\n    \
    \ included  in  each  class.   In  certain  cases  the  elements of\n     procedure\
    \ within different classes are  not  identical  and,  for\n     this  reason,\
    \  table  6  cannot  be  considered  as  part  of the\n     definitive specification\
    \ of the protocol.\n     KEY TO TABLE 6\n     +---|---------------------------------------------------------+\n\
    \     | * |Procedure always included in class                       |\n     |---|---------------------------------------------------------|\n\
    \     |   |Not applicable                                           |\n     |---|---------------------------------------------------------|\n\
    \     | m |Negotiable procedure whose implementation in equipment is|\n     |\
    \   |mandatory                                                |\n     |---|---------------------------------------------------------|\n\
    \     | o |Negotiable procedure whose implementation in equipment is|\n     |\
    \   |optional                                                 |\n     |---|---------------------------------------------------------|\n\
    \     | ao|Negotiable procedure whose implementation in equipment is|\n     |\
    \   |optional and where use depends on availability within the|\n     |   |network\
    \ service                                          |\n     |---|---------------------------------------------------------|\n\
    \     |(1)|Not applicable in class 2 when non-use of explicit flow  |\n     |\
    \   |control is selected                                      |\n     |---|---------------------------------------------------------|\n\
    \     |(2)|When non use of explicit flow control has been selected, |\n     |\
    \   |multiplexing may lead to degradation of quality of       |\n     |   |service\
    \                                                  |\n     |---|---------------------------------------------------------|\n\
    \     |(3)|This function is provided in class 4 using procedures    |\n     |\
    \   |other than those in the cross reference.                 |\n     +-------------------------------------------------------------+\n\
    \     +----------------------------------------------------------------+\n   \
    \  |                             |Cross |            |  |  |  |  |  |\n     |\
    \     Protocol Mechanism      |refe- |   Variant  | 0| 1| 2| 3| 4|\n     |   \
    \                          |rence |            |  |  |  |  |  |\n     |-----------------------------|------|------------|--|--|--|--|--|\n\
    \     | Assignment to network Conn. | 6.1  |            | *| *| *| *| *|\n   \
    \  |-----------------------------|------|------------|--|--|--|--|--|\n     |\
    \ TPDU Transfer               | 6.2  |            | *| *| *| *| *|\n     |-----------------------------|------|------------|--|--|--|--|--|\n\
    \     | Segmenting and Reassembling | 6.3  |            | *| *| *| *| *|\n   \
    \  |-----------------------------|------|------------|--|--|--|--|--|\n     |\
    \ Concatenation and Separation| 6.4  |            |  | *| *| *| *|\n     |-----------------------------|------|------------|--|--|--|--|--|\n\
    \     | Connection Establishment    | 6.5  |            | *| *| *| *| *|\n   \
    \  |-----------------------------|------|------------|--|--|--|--|--|\n     |\
    \ Connection Refusal          | 6.6  |            | *| *| *| *| *|\n     |-----------------------------|------|------------|--|--|--|--|--|\n\
    \     | Normal Release              | 6.7  | implicit   | *|  |  |  |  |\n   \
    \  |                             |      | explicit   |  | *| *| *| *|\n     |-----------------------------|------|------------|--|--|--|--|--|\n\
    \     | Error Release               | 6.8  |            | *|  | *|  |  |\n   \
    \  |-----------------------------|------|------------|--|--|--|--|--|\n     |\
    \ Association of TPDUs with   |      |            |  |  |  |  |  |\n     | Transport\
    \ Connection        | 6.9  |            | *| *| *| *| *|\n     |-----------------------------|------|------------|--|--|--|--|--|\n\
    \     | DT TPDU Numbering           | 6.10 | normal     |  | *|m(1)m| m|\n   \
    \  |                             |      | extended   |  |  |o(1)o| o|\n     |-----------------------------|------|------------|--|--|--|--|--|\n\
    \     | Expedited Data Transfer     | 6.11 | network    |  |  | *|  |  |\n   \
    \  |                             |      | normal     |  | m|(1) *| *|\n     |\
    \                             |      | network    |  |  |  |  |  |\n     |   \
    \                          |      | expedited  |  |ao|  |  |  |\n     |-----------------------------|------|------------|--|--|--|--|--|\n\
    \     | Reassignment after failure  | 6.12 |            |  | *|  | *|(3)\n   \
    \  +----------------------------------------------------------------+\n    Table\
    \ 6. (First of 2 pages) Allocation of procedures within classes\n     +----------------------------------------------------------------+\n\
    \     | Retention until Acknowledge-|      |Conf.Receipt|  |ao|  |  |  |\n   \
    \  | ment of TPDUs               | 6.13 |AK          |  | m|  |  | *|\n     |-----------------------------|------|------------|--|--|--|--|--|\n\
    \     | Resynchronisation           | 6.14 |            |  | *|  | *|(3)\n   \
    \  |-----------------------------|------|------------|--|--|--|--|--|\n     |\
    \ Multiplexing and            |      |            |  |  |(2)  |  |\n     | Demultiplexing\
    \              | 6.15 |            |  |  | *| *| *|\n     |-----------------------------|------|------------|--|--|--|--|--|\n\
    \     | Explicit Flow Control With  | 6.16 |            |  |  | m| *| *|\n   \
    \  |                    Without  |      |            | *| *| o|  |  |\n     |-----------------------------|------|------------|--|--|--|--|--|\n\
    \     | Checksum (use of)           | 6.17 |            |  |  |  |  | m|\n   \
    \  |          (non-use of)       |      |            | *| *| *| *| o|\n     |-----------------------------|------|------------|--|--|--|--|--|\n\
    \     | Frozen References           | 6.18 |            |  | *|  | *| *|\n   \
    \  |------------------------------------|------------|--|--|--|--|--|\n     |\
    \ Retransmission on Timeout   | 6.19 |            |  |  |  |  | *|\n     |-----------------------------|------|------------|--|--|--|--|--|\n\
    \     | Resequencing                | 6.20 |            |  |  |  |  | *|\n   \
    \  |-----------------------------|------|------------|--|--|--|--|--|\n     |\
    \ Inactivity Control          | 6.21 |            |  |  |  |  | *|\n     |-----------------------------|------|------------|--|--|--|--|--|\n\
    \     | Treatment of Protocol Errors| 6.22 |            | *| *| *| *| *|\n   \
    \  |-----------------------------|------|------------|--|--|--|--|--|\n     |\
    \ Splitting and Recombining   | 6.23 |            |  |  |  |  | *|\n     +----------------------------------------------------------------+\n\
    \     Table 6. (2nd of 2 pages) Allocation of procedures within classes\n    \
    \ 8  SPECIFICATION FOR CLASS 0. SIMPLE CLASS\n     8.1  Functions of class 0\n\
    \     Class 0 is designed to have minimum functionality.   It  provides\n    \
    \ only  the  functions  needed  for  connection establishment  with\n     negotiation,\
    \ data transfer with  segmenting  and  protocol  error\n     reporting.\n    \
    \ Class 0 provides transport connections with flow control based on\n     the\
    \  network  service  provided  flow  control, and disconnection\n     based on\
    \ the network service disconnection.\n     8.2  Procedures for class 0\n     8.2.1\
    \  Procedures applicable at all times\n     The transport entities shall use the\
    \ following procedures:\n        a)  TPDU transfer (see 6.2);\n        b)  association\
    \ of TPDUs with transport connections (see 6.9);\n        c)  treatment of protocol\
    \ errors (see 6.22);\n        d)  error release (see 6.8).\n     8.2.2  Connection\
    \ establishment\n     The transport entities shall use the following procedures:\n\
    \        a)  assignment to network connection (see 6.1); then\n        b)  connection\
    \ establishment (see 6.5)  and,  if  appropriate,\n            connection refusal\
    \ (see 6.6);\n        subject to the following constraints:\n        c)  the CR\
    \ and CC TPDUs shall contain no parameter field other\n            than those\
    \ for TSAP-ID and maximum TPDU size;\n        d)  the CR and CC TPDUs shall not\
    \ contain a data field.\n     8.2.3  Data transfer\n     The transport entities\
    \ shall use the segmenting and  reassembling\n     procedure (see 6.3).\n    \
    \ 8.2.4  Release\n     The transport entities shall use  the  implicit  variant\
    \  of  the\n     normal release procedure (see 6.7).\n     NOTE - the lifetime\
    \  of  the  transport  connection  is  directly\n     correlated with the lifetime\
    \ of the network connection.\n     9  SPECIFICATION FOR CLASS 1: BASIC ERROR RECOVERY\
    \ CLASS\n     9.1  Functions of Class 1\n     Class 1 provides transport connections\
    \ with flow control based on\n     the  network  service  provided  flow  control,\
    \  error  recovery,\n     expedited data transfer, disconnection, and also the\
    \  ability  to\n     support   consecutive   transport   connections   on   a\
    \  network\n     connection.\n     This class provides the functionality of Class\
    \ 0 plus the ability\n     to  recover  after  a  failure  signalled by the Network\
    \ Service,\n     without involving the TS-user.\n     9.2  Procedures for Class\
    \ 1\n     9.2.1  Procedures applicable at all times\n     The transport entities\
    \ shall use the following procedures:\n        a)  TPDU transfer (see 6.2);\n\
    \        b)  association of TPDU with transport connections (see 6.9);\n     \
    \   c)  treatment of protocol errors (see 6.22);\n        d)  reassignment after\
    \ failure (see 6.12);\n        e)  resynchronization  (see  6.14),  or   reassignment\
    \   after\n            failure  (see  6.12)  together with resynchronization (see\n\
    \            6.14);\n        f)  concatenation and separation (see 6.4);\n   \
    \     g)  retention until acknowledgement of TPDU  (see  6.13);  the\n       \
    \     variant  used,  AK or confirmation of receipt, shall be as\n           \
    \ selected during connection establishment (see notes);\n        h)  frozen references\
    \ (see 6.18).\n     NOTES\n        1.  The  negotiation  of  the  variant  of\
    \   retention   until\n            acknowledgement  of  TPDUs  procedure  to be\
    \ used over the\n            transport connection has been designed such  that\
    \  if  the\n            initiator  proposes  the  use  of the AK variant (i.e.\
    \ the\n            mandatory implementation option),  the  responder  has  to\n\
    \            accept  use  of  this option and if the initiator proposes\n    \
    \        use of the confirmation of receipt variant  the  responder\n        \
    \    is entitled to select use of the AK variant.\n        2.  The AK variant\
    \ makes use of AK TPDUs to release copies  of\n            retained DT TPDUs.\
    \  The CDT parameter of AK TPDUs in class\n            1 is not significant, and\
    \ is set to 1111.\n        3.  The confirmation of receipt variant is restricted\
    \ to  this\n            class  and  its  use  depends  on  the availability of\
    \ the\n            network  layer  receipt  confirmation  service,  and   the\n\
    \            expected cost reduction.\n     9.2.2  Connection establishment\n\
    \     The transport entities shall use the following procedures:\n        a) \
    \ assignment to network connection (see 6.1); then\n        b)  connection establishment\
    \ (see 6.5)  and,  if  appropriate,\n            connection refusal (see 6.6).\n\
    \     9.2.3  Data Transfer\n     9.2.3.1  General\n     The sending transport\
    \ entity shall use the following procedures;\n        a)  segmenting (see 6.3);\
    \ then\n        b)  the normal format variant of DT TPDU numbering (see 6.10).\n\
    \        The  receiving  transport  entity  shall  use  the   following\n    \
    \    procedures;\n        c)  the normal variant of DT TPDU numbering (see 6.10,;\
    \ then\n        d)  reassembling (see 6.3).\n     NOTES\n        1.  The use of\
    \ RJ TPDU during resynchronization (see 6.14) can\n            lead  to  retransmission.\
    \  Thus the receipt of a duplicate\n            DT TPDU is possible; such a DT\
    \ TPDU is discarded.\n        2.  It is possible to decide on a local basis to\
    \ issue  an  N-\n            RESET request in order to force the remote entity\
    \ to carry\n            out the resynchronization (see 6.14).\n     9.2.3.2  Expedited\
    \ Data\n     The transport entities shall use either the network  normal  data\n\
    \     or  the network expedited variants of the expedited data transfer\n    \
    \ procedure (see 6.11)  if  their  use  has  been  selected  during\n     connection\
    \ establishment (see note 1).\n     The sending transport entity shall  not  allocate\
    \  the  same  ED-\n     TPDU-NR to successive ED TPDUs (see notes 2 and 3).\n\
    \     When acknowledging  an  ED  TPDU  by  sending  and  EA  TPDU  the\n    \
    \ transport  entity  shall put into the YR-EDTU-NR parameter of the\n     EA TPDU\
    \ the value received in the ED-TPDU-NR parameter of the  ED\n     TPDU.\n    \
    \ NOTES\n        1.  The negotiation of the variant of expedited data  transfer\n\
    \            procedure  to  be  used  over the transport connection has\n    \
    \        been designed such that if the initiator proposes the  use\n        \
    \    of  the  network  normal  data variant (i.e. the mandatory\n            implementation\
    \ option), the responder has to accept use of\n            this  option  and \
    \ if  the  initiator  proposes use of the\n            network expedited variant,\
    \ the responder  is  entitled  to\n            select use of the network normal\
    \ data variant.\n        2.  This numbering enables the receiving transport  entity\
    \  to\n            discard  repeated  ED  TPDUs  when  resynchronization (see\n\
    \            6.14) has taken place.\n        3.  No other  significance  is  attached\
    \  to  the  ED  TPDU-NR\n            parameter.  It is recommended, but not essential,\
    \ that the\n            values used be consecutive modulo 128.\n     9.2.4  Release\n\
    \     The transport entities shall use  the  explicit  variant  of  the\n    \
    \ release procedure (see 6.7).\n     10  SPECIFICATION FOR CLASS 2 - MULTIPLEXING\
    \ CLASS\n     10.1  Functions of class 2\n     Class 2 provides transport connections\
    \ with or without individual\n     flow control; no error detection or error recovery\
    \ is provided.\n     If the network connection resets or  disconnects,  the  transport\n\
    \     connection  is terminated without the transport release procedure\n    \
    \ and the TS-user is informed.\n     When explicit flow control is used, a credit\
    \ mechanism is defined\n     allowing the receiver to inform the sender of the\
    \ exact amount of\n     data he is willing to receive  and  expedited  data  transfer\
    \  is\n     available.\n     10.2  Procedures for class 2\n     10.2.1  Procedures\
    \ applicable at all times\n     The transport entities shall use the following\
    \ procedures\n        a)  association of TPDUs with transport connection (see\
    \ 6.9);\n        b)  TPDU transfer (see 6.2);\n        c)  treatment of protocol\
    \ errors (see 6.22);\n        d)  concatenation and separation (see 6.4);\n  \
    \      e)  error release (see 6.8).\n        Additionally the transport  entities\
    \  may  use  the  following\n        procedure:\n        f)  multiplexing and\
    \ demultiplexing (see 6.15).\n     10.2.2  Connection establishment\n     The\
    \ transport entities shall use the following procedures:\n        a)  assignment\
    \ to network connection (see 6.1); then\n        b)  connection establishment\
    \  (see  6.5)  and,  if  applicable\n            connection refusal (see 6.6).\n\
    \     10.2.3  Data transfer when non use of explicit flow control\n          \
    \   has been selected\n     If this option has been selected as a result  of \
    \ the  connection\n     establishment,  the  transport  entities shall use the\
    \ segmenting\n     procedure (see 6.3).\n     The TPDU-NR field of DT TPDUs is\
    \ not significant and may take any\n     value.\n     NOTE- -Expedited data transfer\
    \ is not applicable (see 6.5).\n     10.2.4  Data transfer when use of explicit\
    \ flow control\n             has been selected\n     10.2.4.1  General\n     The\
    \ sending transport entity shall use the following procedures:\n        a)  segmenting\
    \ (see 6.3); then\n        b)  DT TPDU numbering (see 6.10);\n        The  receiving\
    \  transport  entity  shall  use  the   following\n        procedures:\n     \
    \   c)  DT TPDU numbering (see 6.10); if a  DT  TPDU  is  received\n         \
    \   which is out of sequence it shall be treated as a protocol\n            error;\
    \ then\n        d)  reassembling (see 6.3).\n        The variant of the DT TPDU\
    \ numbering which  is  used  by  both\n        transport   entities   shall  be\
    \  that  which  was  agreed  at\n        connection establishment.\n     10.2.4.2\
    \  Flow control\n     The transport entities shall send an initial credit (which\
    \ may be\n     zero)  in  the  CDT  field  of  the  CR  or CC TPDU.  This credit\n\
    \     represents the initial value of the upper window  edge  allocated\n    \
    \ to the peer entity.\n     The transport entity that receives the CR or the \
    \ CC  TPDU  shall\n     consider its lower window edge as zero, and its upper\
    \ window edge\n     as the value of the CDT field in the received TPDU.\n    \
    \ In order to authorize the transmission of DT TPDUs, by its  peer,\n     a  transport\
    \  entity may transmit an AK TPDU at any time, subject\n     to the following\
    \ constraints:\n        a)  the YR-TU-NR parameter shall be at most one  greater\
    \  than\n            the TPDU-NR field of the last received DT TPDU or shall be\n\
    \            zero if no DT TPDU has been received;\n        b)  if an AK TPDU\
    \ has previously been sent the  value  of  the\n            YR-TU-NR  parameter\
    \  shall  not  be lower than that in the\n            previously sent AK TPDU.\n\
    \        c)  the sum of the YR-TU-NR and CDT fields shall not  be  less\n    \
    \        than  the upper window edge allocated to the remote entity\n        \
    \    (see note 1).\n     A transport entity which receives an AK TPDU shall  consider\
    \  the\n     YR-TU-NR  field  as its new lower window edge, and the sum of YR-\n\
    \     TU-NR and CDT as its new upper window edge.  If either  of  these\n    \
    \ have  been  reduced  or  if the lower window edge has become more\n     than\
    \ one greater than the TPDU-NR  of  the  last  transmitted  DT\n     TPDU, this\
    \ shall be treated as a protocol error (see 6.22).\n     A transport entity shall\
    \ not  send  a  DT  TPDU  with  a  TPDU-NR\n     outside of the transmit window\
    \ (see notes 2 and 3).\n     NOTES\n        1.  This means that credit reduction\
    \ is not applicable.\n        2.  This means that a transport entity  is  required\
    \  to  stop\n            sending  if  the  TPDU-NR  field of the next DT TPDU\
    \ which\n            would be sent would be the upper window edge.  Sending  of\n\
    \            DT  TPDU  may  be  resumed if an AK TPDU is received which\n    \
    \        increases the upper window edge.\n        3.  The rate at which a transport\
    \ entity progresses the  upper\n            window  edge  allocated  to its peer\
    \ entity constrains the\n            throughput attainable on the transport connection.\n\
    \     10.2.4.3  Expedited data\n     The transport entities shall follow the network\
    \ normal variant of\n     the expedited data transfer procedure in 6.11 if its\
    \ use has been\n     agreed  during  connection  establishment.   ED  and   EA\
    \   TPDUs\n     respectively  are  not  subject to the flow control procedures\
    \ in\n     10.2.4.2.  The ED-TPDU-NR and YR-ETDU-NR  fields  of  ED  and  EA\n\
    \     TPDUs respectively are not significant and may take any value.\n     10.2.5\
    \  Release\n     The transport entities shall use  the  explicit  variant  of\
    \  the\n     release procedure in 6.7.\n     11  SPECIFICATION FOR CLASS 3: ERROR\
    \  RECOVERY  AND  MULTIPLEXING\n     CLASS\n     11.1  Functions of Class 3\n\
    \     Class 3 provides the  functionality  of  Class  2  (with  use  of\n    \
    \ explicit  flow  control)  plus  the  ability  to  recover after a\n     failure\
    \ signalled by the Network Layer without involving the user\n     of the transport\
    \ service.\n     The mechanisms used to achieve this functionality also allow\
    \  the\n     implementation of more flexible flow control.\n     11.2  Procedures\
    \ for Class 3\n     11.2.1  Procedures applicable at all times\n     The transport\
    \ entities shall use the following procedures:\n        a)  association of TPDUs\
    \ with transport connections (see 6.9);\n        b)  TPDU   transfer   (see  \
    \ 6.2)    and    retention    until\n            acknowledgement of TPDUs (AK\
    \ variant only) (see 6.13);\n        c)  treatment of protocol errors (see 6.22);\n\
    \        d)  concatenation and separation (see 6.4);\n        e)  reassignment\
    \  after  failure  (see  6.12),  together  with\n            resynchronization\
    \ (see 6.14);\n        f)  frozen references (see 6.18).\n     Additionally, \
    \ the  transport  entities  may  use  the  following\n     procedure:\n      \
    \  g)  multiplexing and demultiplexing (see 6.15);\n     11.2.2  Connection Establishment\n\
    \     The transport entities shall use the following procedures;\n        a) \
    \ assignment to network connections (see 6.1); then\n        b)  connection establishment\
    \ (see 6.5)  and,  if  appropriate,\n            together with connection refusal\
    \ (see 6.6).\n     11.2.3  Data Transfer\n     11.2.3.1  General\n     The sending\
    \ transport entity shall use the following procedures:\n        a)  segmenting\
    \ (see 6.3), then\n        b)  DT TPDU numbering (see 6.10); after receipt of\
    \ an RJ  TPDU\n            (see  11.2.3.2)  the  next  DT  TPDU to be sent may\
    \ have a\n            value which is not the previous value of TPDU-NR plus one.\n\
    \     The  receiving  transport  entity   shall   use   the   following\n    \
    \ procedures:\n        c)  DT TPDU numbering (see 6.10); the TPDU-NR  field  of\
    \  each\n            received  DT  TPDU shall be treated as a protocol error if\n\
    \            it exceeds the greatest such value received in a  previous\n    \
    \        DT TPDU by more than one (see note); then\n        d)  reassembling \
    \ (see  6.3);  duplicated   TPDUs   shall   be\n            eliminated before\
    \ reassembling is performed.\n     NOTE - The  use  of  RJ  TPDUs  (see  11.2.3.2)\
    \   can   lead   to\n     retransmission and reduction of credit.  Thus the receipt\
    \ of a DT\n     TPDU which is a duplicate, or which is greater than or  equal\
    \  to\n     the  upper  window edge allocated to the peer entity, is possible\n\
    \     and is therefore not treated as a protocol error.\n     11.2.3.2  Use of\
    \ RJ TPDU\n     A transport entity may send an RJ TPDU at any time  in  order\
    \  to\n     invite   retransmission  or  to  reduce  the  upper  window  edge\n\
    \     allocated to the peer entity (see note 1).\n     When an RJ TPDU is  sent,\
    \  the  following  constraints  shall  be\n     respected:\n        a)  the YR-TU-NR\
    \ parameter shall be at most one  greater  than\n            the greatest such\
    \ value received in a previous DT TPDU, or\n            shall be zero if no DT\
    \ TPDU has  yet  been  received  (see\n            note 2);\n        b)  if an\
    \ AK or RJ TPDU has previously been sent the  YR-TU-NR\n            parameter\
    \  shall  not be lower than that in the previously\n            sent AK or RJ\
    \ TPDU or lower than zero if no AK or RJ TPDU.\n     When a transport entity receives\
    \ an RJ TPDU (see note 3):\n        c)  the next DT TPDU  to  be  transmitted,\
    \  or  retransmitted,\n            shall be that for which the value of the TPDU-NR\
    \ parameter\n            is equal to the value of the YR-TU-NR parameter of the\
    \  RJ\n            TPDU;\n        d)   the sum of the values of the YR-TU-NR and\
    \ CDT  parameters\n            of the RJ TPDU becomes the new upper window edge\
    \ (see note\n            4).\n     NOTES\n        1.  An  RJ  TPDU  can  also\
    \   be   sent   as   part   of   the\n            resynchronization   (see   6.14)\
    \  and  reassignment  after\n            failure (see 6.12) procedures.\n    \
    \    2.  It is recommended that the YR-TU-NR parameter be equal  to\n        \
    \    the TPDU-NR parameter of the next expected DT TPDU.\n        3.  These rules\
    \ are a subset of those specified for when an RJ\n            TPDU  is  received\
    \ during resynchronization (see 6.14) and\n            reassignment after failure\
    \ (see 6.12).\n        4.  This means that RJ TPDU can be used to  reduce  the\
    \  upper\n            window   edge   allocated   to  the  peer  entity  (credit\n\
    \            reduction).\n     11.2.3.3  Flow Control\n     The procedures shall\
    \ be as defined in 10.2.4.2, except that:\n        a)  a credit reduction may\
    \ lead to the reception of a DT  TPDU\n            with  a  TPDU-NR  parameter\
    \  whose value is not, but would\n            have been less than the upper window\
    \ edge allocated to the\n            remote  entity  prior to the credit reduction.\
    \  This shall\n            not be treated as a protocol error;\n        b)  receipt\
    \ of an AK TPDU which sets  the  lower  window  edge\n            more  than \
    \ one  greater  than  the  TPDU-NR  of  the last\n            transmitted DT TPDU\
    \ shall not be  treated  as  a  protocol\n            error,  provided  that all\
    \ acknowledged DT TPDUs have been\n            previously transmitted (see notes\
    \ 1 and 2).\n     NOTES\n        1.  This  can  only  occur  during  retransmission\
    \   following\n            receipt of an RJ TPDU.\n        2.  The transport entity\
    \ may either continue retransmission as\n            before or retransmit only\
    \ those DT TPDUs, not acknowledged\n            by  the  AK  TPDU.   In  either\
    \  case,   copies   of   the\n            acknowledged DT TPDUs, need not be retained\
    \ further.\n     11.2.3.4  Expedited data\n     The transport entities  shall\
    \  follow  the  network  normal  data\n     variant  of  expedited data transfer\
    \ procedure in 6.11 if its use\n     has been agreed during connection establishment.\n\
    \     The sending transport entity shall  not  allocate  the  same  ED-\n    \
    \ TPDU-NR to successive ED TPDUs.\n     The receiving transport entity shall transmit\
    \ an EA TPDU with the\n     same  value  in  its YR-EDTU-NR parameter.  If, and\
    \ only if, this\n     number is different from that of the previously received\
    \ ED  TPDU\n     shall  it  generate  a  T-EXPEDITED DATA indication to convey\
    \ the\n     data to the TS-user (see note 2).\n     NOTES\n        1.  No  other\
    \  significance  is  attached  to  the  ED-TPDU-NR\n            parameter.  It\
    \ is recommended, but not essential, that the\n            values be consecutive\
    \ modulo 2**n, where n is  the  number\n            of bits of the parameter.\n\
    \        2.  This procedure ensures that the TS-user does  not  receive\n    \
    \        data corresponding to the same ED TPDU more than once.\n     11.2.4 \
    \ Release\n     The transport entities shall use  the  explicit  variant  of \
    \ the\n     release procedure in 6.7.\n     12  SPECIFICATION FOR CLASS 4: ERROR\
    \ DETECTION AND RECOVERY CLASS\n     12.1  Functions of Class 4\n     Class 4\
    \ provides the functionality of Class 3, plus  the  ability\n     to  detect \
    \ and recover from lost, duplicated, or out of sequence\n     TPDUs without involving\
    \ the TS-user.\n     This detection of errors is made by extended use of the \
    \ DT  TPDU\n     numbering  of Class 2 and Class 3, by time-out mechanisms, and\
    \ by\n     additional procedures.\n     This class additionally detects and recovers\
    \ from  damaged  TPDUs\n     by using a checksum mechanism.  The use of the checksum\
    \ mechanism\n     must be available but its  use  or  its  non-use  is  subject\
    \  to\n     negotiation.\n     Further on this  class  provides  additional  resilience\
    \  against\n     network failure and increased throughput capability by allowing\
    \ a\n     transport connection to make use of multiple network connections.\n\
    \     12.2  Procedures for Class 4\n     12.2.1  Procedures available at all times\n\
    \     12.2.1.1  Timers used at all times\n     This subclause defines timers that\
    \ apply at all times in class 4.\n     These timers are listed in table 7.\n \
    \    This International Standard does not define specific  values  for\n     the\
    \  timers,  and the derivations described in this subclause are\n     not mandatory.\
    \  The values should be chosen so that the  required\n     quality   of   service\
    \   can   be   provided,   given  the  known\n     characteristics of the network.\n\
    \     Timers that apply only to specific procedures are  defined  under\n    \
    \ the appropriate procedure.\n     +---------------------------|------------------------------------+\n\
    \     |Symbol|        Name        |            Definition              |\n   \
    \  |------|--------------------|------------------------------------|\n     |\
    \ MLR  |NSDU lifetime       | A bound for the maximum time which |\n     |   \
    \   |local-to-remote     | may elapse between the transmis-   |\n     |      |\
    \                    | sion of an NSDU by a local trans-  |\n     |      |   \
    \                 | port entity and the receipt of any |\n     |      |      \
    \              | copy of it by a remote peer entity.|\n     |      |         \
    \           |                                    |\n     | MRL  |NSDU lifetime\
    \       | A bound for the maximum time which |\n     |      |remote-to-local \
    \    | may elapse between the transmission|\n     |      |                   \
    \ | of an SNDU from a remote transport |\n     |      |                    | entity\
    \ to a remote peer entity.    |\n     |      |                    |          \
    \                          |\n     | ELR  |Expected maximum    | A bound for the\
    \ maximum delay suf- |\n     |      |transit delay       | fered by all but a\
    \ small proportion|\n     |      |local-to-remote     | of NSDUs transferred from\
    \ the local|\n     |      |                    | transport entity to a remote\
    \ peer  |\n     |      |                    | entity.                        \
    \    |\n     |      |                    |                                   \
    \ |\n     | ERL  |Expected maximum    | A bound for the maximum delay suf- |\n\
    \     |      |transit delay       | fered by all but a small proportion|\n   \
    \  |      |remote-to-local     | of NSDUs transferred from a remote |\n     |\
    \      |                    | transport entity to the local peer |\n     |   \
    \   |                    | entity.                            |\n     |      |\
    \                    |                                    |\n     |  AL  |Local\
    \ acknowledge   | A bound for the maximum time which |\n     |      |time    \
    \            | can elapse between the receipt of  |\n     |      |           \
    \         | a TPDU by the local transport en-  |\n     |      |              \
    \      | tity from the network layer and    |\n     |      |                 \
    \   | the transmission of the corres-    |\n     |      |                    |\
    \ ponding acknowledgement.           |\n     |      |                    |   \
    \                                 |\n     |  AR  |Remote acknow-      | As AL,\
    \ but for the remote entity.  |\n     |      |ledgement time      |          \
    \                          |\n     +----------------------------------------------------------------+\n\
    \      Table 7. (First of 2 pages) Time Parameters related to class 4\n     +----------------------------------------------------------------+\n\
    \     |  T1  |Local retrans-      | A bound for the maximum time that  |\n   \
    \  |      |mission time        | the local transport entity will    |\n     |\
    \      |                    | wait for acknowledgement before re-|\n     |   \
    \   |                    | transmitting a TPDU.               |\n     |      |\
    \                    |                                    |\n     |  R   |Persistence\
    \ time    | A bound for the maximum time the   |\n     |      |              \
    \      | the local transport entity will    |\n     |      |                 \
    \   | continue to transmit a TPDU that   |\n     |      |                    |\
    \ requires acknowledgement.          |\n     |      |                    |   \
    \                                 |\n     |  N   |Maximum number of   | A bound\
    \ for the maximum number of  |\n     |      |transmissions       | times which\
    \ the local transport    |\n     |      |                    | entity will continue\
    \ to transmit a |\n     |      |                    | TPDU that requires acknowledgement.|\n\
    \     |      |                    |                                    |\n   \
    \  |  L   |Bound on references | A bound for the maximum time       |\n     |\
    \      |and sequence        | between the transmission of a TPDU |\n     |   \
    \   |numbers             | and the receipt of any acknow-     |\n     |      |\
    \                    | ledgement relating to it.          |\n     |      |   \
    \                 |                                    |\n     |  I   |Inactivity\
    \ time     | A bound for the time after which   |\n     |      |             \
    \       | a transport entity will, if it     |\n     |      |                \
    \    | does not receive a TPDU, initiate  |\n     |      |                   \
    \ | the release procedure to terminate |\n     |      |                    | the\
    \ transport connection.          |\n     |      |                    |       \
    \                             |\n     |      |                    | NOTE - This\
    \ parameter is required  |\n     |      |                    | for protection\
    \ against unsignalled |\n     |      |                    | breaks in the network\
    \ connection.  |\n     |      |                    |                         \
    \           |\n     |  W   |Window time         | A bound for the maximum time\
    \ a     |\n     |      |                    | transport entity will wait before\
    \  |\n     |      |                    | retransmitting up to date window   |\n\
    \     |      |                    | information.                       |\n   \
    \  +----------------------------------------------------------------+\n      Table\
    \ 7. (Second of 2 pages) Time Parameters related to class 4\n     12.2.1.1.1 \
    \ NSDU lifetime (MLR, MRL)\n     The network layer is assumed to provide,  as\
    \  an  aspect  of  its\n     grade of service, for a bound on the maximum lifetime\
    \ of NSDUs in\n     the network.  This value may be different in  each  direction\
    \  of\n     transfer  through  a network between two transport entities.  The\n\
    \     values, for both directions of transfer, are assumed to be  Known\n    \
    \ by  the  transport entities.  The maximum NSDU lifetime local-to-\n     remote\
    \ (MLR) is the maximum time which  may  elapse  between  the\n     transmission\
    \  of  an  NSDU from the local transport entity to the\n     network and receipt\
    \ of any copy of the NSDU from the  network  at\n     the  remote  transport entity.\
    \  The maximum NSDU lifetime remote-\n     to-local (MRL) is the maximum time\
    \ which may elapse  between  the\n     transmission  of  an NSDU from the remote\
    \ transport entity to the\n     network and receipt of any copy of the NSDU from\
    \ the  network  at\n     the local transport entity.\n     12.2.1.1.2  Expected\
    \ maximum transit delay (ELR, ERL)\n     The network layer is assumed to provide,\
    \  as  an  aspect  of  its\n     grade  of service, an expected maximum transit\
    \ delay for NSDUs in\n     the network.  This value may be different in  each\
    \  direction  of\n     transfer  through  a network between two transport entities.\
    \  The\n     values, for both directions of transfer, are assumed to be  Known\n\
    \     by  the  transport  entities.  The expected maximum transit delay\n    \
    \ local-to-remote (ELR) is the maximum delay suffered by all but  a\n     small\
    \  proportion  of  NSDUs transferred through the network from\n     the local\
    \ transport entity to the remote transport  entity.   The\n     expected  maximum\
    \  transit  delay  remote-to-local  (ERL)  is the\n     maximum delay suffered\
    \ by all but a  small  proportion  of  NSDUs\n     transfer  through the network\
    \ from the remove transport entity to\n     the local transport entity.\n    \
    \ 12.2.1.1.3  Acknowledge Time (AR, AL)\n     Any transport entity is  assumed\
    \  to  provide  a  bound  for  the\n     maximum  time which can elapse between\
    \ its receipt of a TPDU from\n     the Network Layer  and  its  transmission \
    \ of  the  corresponding\n     response.   This  value  is referred to as AL.\
    \  The corresponding\n     time given by the remote transport entity is referred\
    \ to as AR.\n     12.2.1.1.4  Local retransmission time (T1)\n     The local transport\
    \ entity is assumed to maintain a bound on  the\n     time  it  will  wait for\
    \ an acknowledgement before retransmitting\n     the TPDU.  Its value is given\
    \ by:\n        T1 = ELR + ERL + AR + X\n     where:\n        ELR = Expected maximum\
    \ transit delay local-to-remote,\n        ERL = Expected maximum transit delay\
    \ remote-to-local,\n        AR  = Remote acknowledge time, and\n        X   =\
    \ local processing time for a TPDU.\n     12.2.1.1.5  Persistence Time (R)\n \
    \    The local transport entity is assumed to provide a bound for  the\n     maximum\
    \  time  for  which  it  may  continue to retransmit a TPDU\n     requiring positive\
    \ acknowledgement.  This value is referred to as\n     R.\n     The  value  is\
    \  clearly  related  to  the  time  elapsed  between\n     retransmission,  T1,\
    \  and the maximum number of transmissions, N.\n     It is not less than T1 *\
    \ N + X, where X is a  small  quantity  to\n     allow  for  additional  internal\
    \  delays,  the granularity of the\n     mechanism used to implement T1 and so\
    \ on.  Because R is a  bound,\n     the  exact value of X is unimportant as long\
    \ as it is bounded and\n     the value of a bound is known.\n     12.2.1.1.6 \
    \ Bound on References and Sequence Numbers (L)\n     A bound for the maximum time\
    \ between the decision to  transmit  a\n     TPDU  and the receipt of any response\
    \ relating to it (L) is given\n     by:\n        L = MLR + MRL + R + AR\n    \
    \ where:\n        MLR = NSDU lifetime local-to-remote,\n        MRL = NSDU lifetime\
    \ remote-to-local,\n        R   = Persistence time, and\n        AR  = Remote\
    \ acknowledgement time.\n     It is necessary to  wait  for  a  period  L  before\
    \  reusing  any\n     reference  of  sequence number, to avoid confusion in case\
    \ a TPDU\n     referring to it may be duplicated or delayed.\n     NOTES\n   \
    \     1.  In practice, the value of L may be unacceptably large.  It\n       \
    \     may  also  be  only  a  statistical  figure  at  a certain\n           \
    \ confidence level.  A smaller value may therefore  be  used\n            where\
    \ this still allows the required quality of service to\n            be provided.\n\
    \        2.  The  relationships  between  times  discussed  above   are\n    \
    \        illustrated in figures 3 and 4.\n            [Figures 3 and 4 are omitted\
    \ from this copy.]\n     12.2.1.2  General Procedures\n     The transport entity\
    \ shall use the following procedures:\n        a)  TPDU transfer (see 6.2);\n\
    \        b)  association of TPDUs with transport connections (see 6.9);\n    \
    \    c)  treatment of protocol errors (see 6.22);\n        d)  checksum (see 6.17);\n\
    \        e)  splitting and recombining (see 6.23);\n        f)  multiplexing and\
    \ demultiplexing (see 6.15);\n        g)  retention until acknowledgement of TPDUs\
    \ (see 6.13);\n        h)  frozen references (see 6.18).\n        j)  retransmission\
    \ procedures; when  a  transport  entity  has\n            some  outstanding \
    \ TPDUs  that require acknowledgement, it\n            will check that no T1 interval\
    \ elapses without the arrival\n            of   a   TPDU  that  acknowledges \
    \ at  least  one  of  the\n            outstanding TPDUs.\n            If  the\
    \  timer  expires,  except  if  the   TPDU   to   be\n            retransmitted\
    \  is a DT TPDU and it is outside the transmit\n            window  due  credit\
    \   reduction,   the   first   TPDU   is\n            retransmitted   and  the\
    \  timer  is  restarted.   After  N\n            transmissions (i.e. N-1  retransmissions)\
    \  it  is  assumed\n            that  useful  two-way  communication is no longer\
    \ possible\n            and the release procedure is  used,  and  the  TS-user\
    \  is\n            informed.\n        NOTES\n        1)  This procedure may be\
    \ implemented by different means.  For\n            example:\n            a) \
    \ one interval is associated with  each  TPDU.   If  the\n                timer\
    \  expires the associated TPDU will be transmitted\n                and the timer\
    \ T1 will be restarted for all  subsequent\n                TPDUs; or\n      \
    \      b)  one  interval  is  associated  with   each   transport\n          \
    \      connection:\n                1)  if the transport entity transmits a TPDU\
    \ requiring\n                    acknowledgement, it starts timer T1;\n      \
    \          2)  if the  transport  entity  receives  a  TPDU  that\n          \
    \          acknowledges  one of the TPDUs to be acknowledged,\n              \
    \      it restarts timer T1 unless the received  TPDU  is\n                  \
    \  an AK which explicitly closes the transmit window.\n                3)  if\
    \ the  transport  entity  receives  a  TPDU  that\n                    acknowledges\
    \  the last TPDU to be acknowledged, it\n                    stops timer T1.\n\
    \            For a decision whether  the  retransmission  timer  T1  is\n    \
    \        maintained  on a per TPDU or on a per transport connection\n        \
    \    basis, throughput considerations have  to  be  taken  into\n            account.\n\
    \        2.  For DT TPDUs it is a local  choice  to  retransmit  either\n    \
    \        only  the  first  DT  TPDU  or  all  TPDUs  waiting for an\n        \
    \    acknowledgement up to the upper window edge.\n        3.  It is recommended\
    \ that after N transmissions of a DT TPDU,\n            the  transport  entity\
    \  waits  T1 + W + MRL  to  provide a\n            higher possibility of receiving\
    \ an acknowledgement  before\n            entering  the  release  phase.  For\
    \ other TPDU types which\n            may be retransmitted,  it  is  recommended\
    \  that  after  N\n            transmissions  the  transport  entity  waits  T1\
    \ + MRL  to\n            provide a higher possibility  of  receiving  the  expected\n\
    \            reply.\n     12.2.2  Procedures for Connection Establishment\n  \
    \   12.2.2.1  Timers used in Connection Establishment\n     There are no timers\
    \ specific to connection establishment.\n     12.2.2.2  General Procedures\n \
    \    The transport entities shall use the following procedures:\n        a)  assignment\
    \ to network connection (see 6.1);\n        b)  connection establishment  (see\
    \  6.5)  and  if  appropriate\n            connection  refusal (see 6.6) together\
    \ with the additional\n            procedures:\n            1)  a connection is\
    \ not considered established  until  the\n                successful  completion\
    \  of a 3-way TPDU exchange.  The\n                sender of a CR TPDU shall respond\
    \ to the corresponding\n                CC  TPDU  by  immediately  sending  a\
    \ DT, ED, DR or AK\n                TPDU;\n            2)  as a result of duplication\
    \  or  retransmission,  a  CR\n                TPDU  may  be  received  specifying\
    \ a source reference\n                which is already in use  with  the  sending\
    \  transport\n                entity.   If  the receiving transport entity is\
    \ in the\n                data transfer phase, having completed the  3-way  TPDU\n\
    \                exchange  procedure,  or  is waiting for the T-CONNECT\n    \
    \            response from the  TS-user,  the  receiving  transport\n        \
    \        entity  shall ignore such a TPDU.  Otherwise a CC TPDU\n            \
    \    shall be transmitted;\n            3)  as a result of duplication  or  retransmission,\
    \  a  CC\n                TPDU  may  be  received  specifying a paired reference\n\
    \                which is already  in  use.   The  receiving  transport\n    \
    \            entity  shall  only  acknowledge the duplicate CC TPDU\n        \
    \        according to the procedure in 12.2.2.2.b.1.\n            4)  a CC TPDU\
    \ may be received specifying a reference which\n                is  in  the frozen\
    \ state.  The response to such a TPDU\n                shall be a DR TPDU;\n \
    \           5)  the retransmission procedures (see 12.2.1.2) are  used\n     \
    \           for both the CR TPDU and CC TPDU.\n     12.2.3  Procedures for Data\
    \ Transfer\n     12.2.3.1  Timers used in Data Transfer\n     The data transfer\
    \ procedures use two additional timers:\n        a)  Inactivity Time (I)\n   \
    \     To  protect  against  unsignalled  breaks   in   the   network\n       \
    \ connection  or failure of the peer transport entity (half-open\n        connections),\
    \ each transport entity  maintains  an  inactivity\n        interval.  The interval\
    \ must be greater than E.\n        NOTE - A suitable value for I is given by\n\
    \        2 * (N * maximum of (T1, W))\n        unless local needs indicate another\
    \ more appropriate value.\n        b)  Window Time (W)\n        A transport entity\
    \ maintains a timer interval to  ensure  that\n        there  is  a  bound  on\
    \  the  maximum  interval between window\n        updates.\n     12.2.3.2  General\
    \ Procedures for data transfer\n     The transport entities shall use the following\
    \ procedures:\n        a)  inactivity control    (see 6.21);\n        b)  expedited\
    \ data        (see 6.11);\n        c)  explicit flow control (see 6.16).\n   \
    \  The sending transport entity shall use the  following  procedures\n     in\
    \ the following order:\n        d)  segmenting            (see 6.3);\n       \
    \ e)  DT TPDU numbering     (see 6.10).\n     The receiving transport entity shall\
    \ use the following procedures\n     in the following order:\n        f)  DT TPDU\
    \ numbering     (see 6.10);\n        g)  resequencing          (see 6.20);\n \
    \       h)  reassembling          (see 6.3).\n     12.2.3.3  Inactivity Control\n\
    \     If the interval of the inactivity timer I expires without receipt\n    \
    \ of  some  TPDU,  the  transport entity shall initiate the release\n     procedures.\
    \   To  prevent  expiration  of  the  remote  transport\n     entity's  inactivity\
    \  timer when no data is being sent, the local\n     transport entity must send\
    \ AK TPDUs at suitable intervals in  the\n     absence  of  data, having regard\
    \ to the probability of TPDU loss.\n     The window synchronization procedures\
    \ (see 12.2.3.8) ensure  that\n     this requirement is met.\n     NOTE - It is\
    \ likely that the release procedure initiated  due  to\n     the  expiration \
    \ of  the  inactivity  timer  will  fail,  as such\n     expiration indicates\
    \ probable failure of the  supporting  network\n     connection or of the remote\
    \ transport entity.\n     12.2.3.4  Expedited Data\n     The transport entities\
    \  shall  follow  the  network  normal  data\n     variant  of the expedited data\
    \ transfer procedures (see 6.11), if\n     the use of transport expedited service\
    \  option  has  been  agreed\n     during connection establishment.\n     The\
    \ ED TPDU shall have  a  TPDU-NR  which  is  allocated  from  a\n     separate\
    \ sequence space from that of the DT TPDUs.\n     A transport entity shall allocate\
    \ the sequence number zero to the\n     ED  TPDU-NR  of  the  first  ED  TPDU\
    \  which  it  transmits for a\n     transport connection.  For subsequent ED TPDU\
    \ sent  on  the  same\n     transport  connection,  the  transport  entity  shall\
    \  allocate a\n     sequence number one greater than the previous one.\n     Modulo\
    \ 2**7 arithmetic shall be used  when  normal  formats  have\n     been  selected\
    \  and  modulo  2**31  arithmetic shall be used when\n     extended formats have\
    \ been selected.\n     The receiving transport entity shall transmit an EA TPDU\
    \ with the\n     same  sequence number in its YR-ETDU-NR field.  If this number\
    \ is\n     one greater than in the previously in sequence received ED  TPDU,\n\
    \     the  receiving transport entity shall transfer the data in the ED\n    \
    \ TPDU to the TS-user.\n     If  a  transport  entity  does  not  receive  an\
    \   EA   TPDU   in\n     acknowledgement  to an ED TPDU it shall follow the retransmission\n\
    \     procedures (see note and 12.2.1.2).\n     The sender of an ED TPDU shall\
    \ not send  any  new  DT  TPDU  with\n     higher TPDU-NR until it receives the\
    \ EA TPDU.\n     NOTE - This procedure ensures that ED TPDUs are delivered to\
    \  the\n     TS-user  in  sequence  and that the TS-user does not receive data\n\
    \     corresponding to the same  ED  TPDU  more  than  once.   Also  it\n    \
    \ guarantees  the  arrival  of  the ED TPDU before any subsequently\n     sent\
    \ DT TPDU.\n     12.2.3.5  Resequencing\n     The receiving transport entity shall\
    \ deliver all DT TPDUs to  the\n     TS-user in the order specified by the sequence\
    \ number field.\n     DT TPDUs received out-of-sequence but within the transmit\
    \  window\n     shall not be delivered to the TS-user until all in-sequence TPDUs\n\
    \     have been received.  DT TPDU received out-of-sequence and outside\n    \
    \ the transmit window shall be discarded.\n     Duplicate TPDUs can  be  detected\
    \  because  the  sequence  number\n     matches  that  of  preciously  received\
    \  TPDUs.  Sequence numbers\n     shall not be reused for the period L after \
    \ their  previous  use.\n     Otherwise,  a new, valid TPDU could be confused\
    \ with a duplicated\n     TPDU which had previously been received and acknowledged.\n\
    \     Duplicated DT TPDUs shall be acknowledged, since  the  duplicated\n    \
    \ TPDU  may  be  the  result of a retransmission resulting from the\n     loss\
    \ of an AK TPDU.\n     The data contained in a duplicated DT TPDU shall be ignored.\n\
    \     12.2.3.6  Explicit Flow Control\n     The transport entities shall send\
    \ an initial  credit  (which  may\n     take  the  value  0)  in the CDT field\
    \ of the CR TPDU or CC TPDU.\n     This credit represents the initial value of\
    \ the upper window edge\n     of the peer entity.\n     The transport entity which\
    \ receives the CR TPDU or CC TPDU  shall\n     consider  its lower window edge\
    \ as zero and its upper window edge\n     as the value in the CDT field in the\
    \ received TPDU.\n     In order to authorize the transmission of DT TPDUs by its\
    \ peer, a\n     transport entity may transmit an AK TPDU at any time.\n     The\
    \ sequence number of an AK TPDU shall not exceed  the  sequence\n     number of\
    \ the next expected DT TPDU, i.e. it shall not be greater\n     than the highest\
    \ sequence number of a received DT TPDU, plus one.\n     A transport entity may\
    \ send a duplicate AK  TPDU  containing  the\n     same  sequence  number,  CDT,\
    \ and subsequence number field at any\n     time.\n     A transport entity which\
    \ receives an AK TPDU shall  consider  the\n     value of the YR-TU-NR field as\
    \ its new lower window edge if it is\n     greater than any previously received\
    \ in a YR-TU-NR field, and the\n     sum  of  YR-TU-NR and CDT as its new upper\
    \ window edge subject to\n     the  procedures  for  sequencing  AK  TPDUs  (see\
    \  12.2.3.8).   A\n     transport  entity shall not transmit or retransmit a DT\
    \ TPDU with\n     a sequence number outside the transmit window.\n     12.2.3.7\
    \  Sequencing of received AK TPDUs\n     To allow a receiving transport  entity\
    \  to  properly  sequence  a\n     series  of AK TPDUs that all contain the same\
    \ sequence number and\n     thereby use the  correct  CDT  value,  AK  TPDUs \
    \ may  contain  a\n     subsequence  parameter.   For  the  purpose  of  determining\
    \  the\n     correct sequence of AK TPDUs,  the  absence  of  the  subsequence\n\
    \     parameter  shall  be equivalent to the value of the parameter set\n    \
    \ to zero.\n     An AK TPDU is defined to be in sequence if:\n        a)  the\
    \ sequence number is  greater  than  in  any  previously\n            received\
    \ AK TPDU, or\n        b)  the sequence  number  is  equal  to  the  highest \
    \ in  any\n            previously received AK TPDU, and the subsequence parameter\n\
    \            is greater than in any previously received AK TPDU  having\n    \
    \        the same value for YR-TU-NR field, or\n        c)  the sequence number\
    \ and  subsequence  parameter  are  both\n            equal  to  the  highest\
    \ in any previously received AK TPDU\n            and the credit field is greater\
    \ than or equal to  that  in\n            any  previously  received AK TPDU having\
    \ the same YR-TU-NR\n            field.\n     A transport entity is not required\
    \  to  include  the  subsequence\n     number  in  its  AK  TPDUs.   It  may \
    \ also choose not to use the\n     subsequence parameter in sequencing  received\
    \  AK  TPDUs.   If  a\n     transport   entity  chooses  not  to  recognize  the\
    \  subsequence\n     parameter it shall still sequence received AK TPDUs according\
    \  to\n     12.2.3.7.a.\n     When the receiving transport entity recognizes an\
    \ out of sequence\n     AK TPDU it shall ignore it.\n     12.2.3.8  Procedure\
    \ for transmission of AK TPDUs\n     12.2.3.8.1  Retransmission of AK TPDUs for\
    \ window synchronization\n     A transport entity shall not allow an interval\
    \ W to pass  without\n     the  transmission  of an AK TPDU.  if the transport\
    \ entity is not\n     using  the  procedure  following  setting  CDT   to   zero\
    \   (see\n     12.2.3.8.3)   or   reduction   of  the  upper  window  edge  (see\n\
    \     12.2.3.8.4), and does not have to acknowledge receipt of  any  DT\n    \
    \ TPDU,  then  it  shall achieve this by retransmission of the most\n     recent\
    \ AK TPDU, with up-to-date window information.\n     NOTE - The use  of  the \
    \ procedures  defined  in  12.2.3.8.3  and\n     12.2.3.8.4  are  optional for\
    \ any transport entity.  The protocol\n     operates correctly either with or\
    \ without these procedures  which\n     are defined to enhance the efficiency\
    \ of its operation.  However,\n     if these procedures are not used then W must\
    \  be  set  to  ensure\n     enough  retransmissions  of  the AK TPDU so that\
    \ release of TC is\n     avoided.    The   value   of   W    should    be    approximately\n\
    \     W = (T1 * N)/(N-1) when the procedures are not used.\n     12.2.3.8.2  Sequence\
    \ control for transmission of AK TPDUs\n     To allow the receiving transport\
    \ entity to process  AK  TPDUs  in\n     the  correct  sequence, as described\
    \ in 12.2.3.7, the subsequence\n     parameter may be included following reduction\
    \  of  CDT.   If  the\n     value  of  the subsequence number to be transmitted\
    \ is zero, then\n     the parameter should be omitted.\n     The value of the\
    \ subsequence parameter, if used,  shall  be  zero\n     (either  explicitly \
    \ or  by  absence  of  the  parameter)  if the\n     sequence number is greater\
    \ than the field in previous  AK  TPDUs,\n     sent by the transport entity.\n\
    \     If the sequence number is the same as the previous AK  TPDU  sent\n    \
    \ and  the  CDT  field is equal to or greater than the CDT field in\n     the\
    \ previous AK TPDU sent  then  the  subsequence  parameter,  if\n     used, shall\
    \ be equal to that in the previously sent AK TPDU.\n     If the sequence number\
    \ is the same as the previous AK  TPDU  sent\n     and  the CDT field is less\
    \ than the value of the CDT field in the\n     previous AK TPDU sent than the\
    \ subsequence  parameter,  if  used,\n     shall be one greater than the value\
    \ in the previous AK TPDU..\n     12.2.3.8.3  Retransmission of AK TPDUs after\
    \ CDT set to zero\n     Due to the possibility of loss of AK TPDUs, the upper\
    \ window edge\n     as  perceived by the transport entity transmitting an AK TPDU\
    \ may\n     differ from that perceived by the intended recipient.   To  avoid\n\
    \     the possibility of extra delay, the retransmission procedure (see\n    \
    \ 12.2.1.2) should be followed for an AK  TPDU,  if  it  opens  the\n     transmit\
    \ window which has previously been closed by sending an AK\n     TPDU with CDT\
    \ field set to zero.\n     The  retransmission  procedure,  if  used,  terminates\
    \  and   the\n     procedure in 12.2.3.8.1 is used when:\n        a)  an  AK \
    \ TPDU  is  received  containing  the  flow  control\n            confirmation\
    \  parameter,  whose lower window edge and your\n            subsequence fields\
    \ are equal to the  sequence  number  and\n            subsequence  number  in\
    \  the  retained  AK  TPDU and whose\n            credit field is not zero.\n\
    \        b)  an AK TPDU is transmitted with a  sequence  number  higher\n    \
    \        than  that  in the retained AK TPDU, due to reception of a\n        \
    \    DT TPDU whose sequence number is equal to the lower window\n            edge;\n\
    \        c)  N transmissions of the retained AK TPDU have taken  place.\n    \
    \        In  this  case  the  transport  entity  shall  continue to\n        \
    \    transmit the AK TPDU at an interval of W.\n     An AK TPDU which is subject\
    \ to the retransmission procedure shall\n     not  contain  the  flow control\
    \ confirmation parameter.  If it is\n     required to transmit this parameter\
    \ concurrently,  an  additional\n     AK  TPDU  shall  be  transmitted  having\
    \  the  same values in the\n     sequence, subsequence (if applicable) and credit\
    \ fields.\n     12.2.3.8.4  Retransmission procedures following reduction of the\n\
    \                 upper window edge\n     This subclause specifies the procedure\
    \ for retransmission  of  AK\n     TPDUs  after a transport entity has reduced\
    \ the upper window edge\n     (see 12.2.3.6) or for an AK TPDU with the  credit\
    \  field  set  to\n     zero.  This procedure is used until the lower window edge\
    \ exceeds\n     the highest value of the upper window edge ever transmitted (i.e.\n\
    \     the  value  existing  at  the  time of credit reduction, unless a\n    \
    \ higher value is retained from a previous credit reduction).\n     This retransmission\
    \ procedure should be followed for any AK  TPDU\n     which increases the upper\
    \ window edge, unless an AK TPDU has been\n     received containing a flow control\
    \ confirmation parameter,  which\n     corresponds to an AK TPDU transmitted following\
    \ credit reduction,\n     for which the sum of the credit  and  lower  window\
    \  edge  fields\n     (i.e.  the  upper  window  edge  value) is greater than\
    \ the lower\n     window edge (YR-TU-NR field) of the transmitted AK TPDU.\n \
    \    This retransmission procedure for any particular  AK  TPDU  shall\n     terminate\
    \ when:\n        a)  an  AK  TPDU  is  received  containing  the  flow  control\n\
    \            confirmation  parameter,  whose lower window edge and your\n    \
    \        subsequence fields are equal to the lower window edge  and\n        \
    \    subsequence number in the retained AK TPDU; or\n        b)  N transmissions\
    \ of the retained AK TPDU have taken  place.\n            In  this  case  the\
    \  transport  entity  shall  continue to\n            transmit the AK TPDU at\
    \ an interval of W.\n     An AK TPDU which is subject to the retransmission procedure\
    \ shall\n     not  contain  the  flow control confirmation parameter.  If it is\n\
    \     required to transmit this parameter concurrently,  an  additional\n    \
    \ AK  TPDU  shall  be  transmitted  having  the  same values in the\n     sequence,\
    \ subsequence (if applicable) and credit fields.\n        NOTE - Retransmission\
    \ of AK TPDUs is normally  not  necessary,\n        except   following   explicit\
    \  closing  of  the  window  (i.e.\n        transmission of an AK TPDU with CDT\
    \ field set  to  zero).   If\n        data  is  available  to  be  transmitted,\
    \  the  retransmission\n        procedure for DT TPDUs will ensure that an AK\
    \ TPDU is received\n        granting  further  credit  where this is available.\
    \  Following\n        credit  reduction,  this  may  no  longer   be   so,   because\n\
    \        retransmission  may be inhibited by the credit reduction.  The\n    \
    \    rules described in this clause avoid extra delay.\n     The rules for determining\
    \ whether  to  apply  the  retransmission\n     procedure  to  an  AK  TPDU  may\
    \  be  expressed  alternatively as\n     follows.  Let:\n          LWE  = lower\
    \ window edge\n          UWE  = upper window edge\n          KUWE = lower bound\
    \ on upper window edge\n                 held by remote transport entity\n   \
    \  The retransmission procedure is to be used whenever:\n          (UWE>LWE) and\
    \ (KUWE = LWE)\n     i.e. when the window is opened and it  is  not  known  definitely\n\
    \     that the remote transport entity is aware of this.\n     KUWE is maintained\
    \ as follows.  When credit is reduced,  KUWE  is\n     set to LWE.  Subsequently,\
    \ it is increased only upon receipt of a\n     valid flow control  confirmation\
    \  (i.e.  one  which  matches  the\n     retained  lower  window edge and subsequence).\
    \  In this case KUWE\n     is set to the implied upper  window  edge  of  the\
    \  flow  control\n     confirmation,  i.e.  the  sum  of  its lower window edge\
    \ and your\n     credit fields.  By this means, it can be  ensured  that  KUWE\
    \  is\n     always  less than or equal to the actual upper window edge in use\n\
    \     by the transmitter of DT TPDUs.\n     12.2.3.9  Use of Flow Control Confirmation\
    \ parameter\n     At any time, an AK TPDU may  be  transmitted  containing  a\
    \  flow\n     control  confirmation  parameter.   The  lower  window edge, your\n\
    \     subsequence and your credit fields  shall  be  set  to  the  same\n    \
    \ values  as the corresponding fields in the most recently received\n     in sequence\
    \ AK TPDU.\n     An AK TPDU  containing  a  flow  control  confirmation  parameter\n\
    \     should be transmitted whenever:\n        a)  a duplicate AK TPDU is received,\
    \ with the value of  YR-TU-\n            NR, CDT, and subsequence fields equal\
    \ to the most recently\n            received AK TPDU,  but  not  itself  containing\
    \  the  flow\n            control confirmation parameter;\n        b)  an AK TPDU\
    \ is received which increases  the  upper  window\n            edge  but  not\
    \ the lower window edge, and the upper window\n            edge was formerly equal\
    \ to the lower window edge; or\n        c)  an AK TPDU is received which increases\
    \  the  upper  window\n            edge  but  not the lower window edge, and the\
    \ lower window\n            edge is lower than the highest value of the  upper\
    \  window\n            edge  received  and  subsequently  reduced (i.e. following\n\
    \            credit reduction).\n     12.2.4  Procedures for Release\n     12.2.4.1\
    \  Timers used for Release\n     There are no timers used only for release.\n\
    \     12.2.4.2  General Procedures for Release\n     The transport entity shall\
    \ use the  explicit  variant  of  normal\n     release (see 6.7).\n     13  STRUCTURE\
    \ AND ENCODING OF TPDUs\n     13.1  Validity\n     Table 8 specifies those TPDUs\
    \ which are valid for each class  and\n     the code for each TPDU.\n        KEY:\
    \  xxxx (bits 4-1):  used to signal the CDT (set to 0000\n                   \
    \             in classes 0 and 1)\n              zzzz (bits 4-1):  used to signal\
    \ CDT in classes 2, 3,\n                                4 set to 1111 in class\
    \ 1\n              NF:               Not available when the non explicit\n   \
    \                             flow control option is selected.\n             \
    \ NRC:              Not available when the receipt\n                         \
    \       confirmation option is selected.\n     NOTE  - These codes are  already\
    \  in  use  in  related  protocols\n     defined by standards oganizations other\
    \ than CCITT/ISO.\n     +-------------------------------------------------------------+\n\
    \     |                       | Validity within   |       |         |\n     |\
    \                       |     classes       |  see  |  Code   |\n     |      \
    \                 |-------------------| Clause|         |\n     |            \
    \           | 0 | 1 | 2 | 3 | 4 |       |         |\n     |-----------------------|-------------------|-------|---------|\n\
    \     |CR Connection Request  | x | x | x | x | x | 13.3  |1110 xxxx|\n     |-----------------------|---|---|---|---|---|-------|---------|\n\
    \     |CC Connection Confirm  | x | x | x | x | x | 13.4  |1101 xxxx|\n     |-----------------------|---|---|---|---|---|-------|---------|\n\
    \     |DR Disconnect Request  | x | x | x | x | x | 13.5  |1000 0000|\n     |-----------------------|---|---|---|---|---|-------|---------|\n\
    \     |DC Disconnect Confirm  |   | x | x | x | x | 13.6  |1100 0000|\n     |-----------------------|---|---|---|---|---|-------|---------|\n\
    \     |DT Data                | x | x | x | x | x | 13.7  |1111 0000|\n     |-----------------------|---|---|---|---|---|-------|---------|\n\
    \     |ED Expedited Data      |   | x | NF| x | x | 13.8  |0001 0000|\n     |-----------------------|---|---|---|---|---|-------|---------|\n\
    \     |AK Data Acknowledgement|   |NRC| NF| x | x | 13.9  |0110 zzzz|\n     |-----------------------|---|---|---|---|---|-------|---------|\n\
    \     |EA Expedited Data      |   | x | NF| x | x | 13.10 |0010 0000|\n     |Acknowledgement\
    \        |   |   |   |   |   |       |         |\n     |-----------------------|---|---|---|---|---|-------|---------|\n\
    \     |RJ Reject              |   | x |   | x |   | 13.11 |0101 zzzz|\n     |-----------------------|---|---|---|---|---|-------|---------|\n\
    \     |ER TPDU Error          | x | x | x | x | x | 13.12 |0111 0000|\n     |-----------------------|---|---|---|---|---|-------|---------|\n\
    \     |                       |   |   |   |   |   |   -   |0000 0000|\n     |\
    \                       |---|---|---|---|---|-------|---------|\n     |not available\
    \          |   |   |   |   |   |   -   |0011 0000|\n     | (see note)        \
    \    |---|---|---|---|---|-------|---------|\n     |                       | \
    \  |   |   |   |   |   -   |1001 xxxx|\n     |                       |---|---|---|---|---|-------|---------|\n\
    \     |                       |   |   |   |   |   |   -   |1010 xxxx|\n     +-------------------------------------------------------------+\n\
    \                            Table 8. TPDU code\n     13.2  Structure\n     All\
    \ the transport protocol data units (TPDUs)  shall  contain  an\n     integral\
    \  number  of  octets.   The octets in a TPDU are numbered\n     starting from\
    \ 1 and increasing in the order they are put into  an\n     NSDU.  The bits in\
    \ an octet are numbered from 1 to 8, where bit 1\n     is the low-ordered bit.\n\
    \     When consecutive octets are used to represent  a  binary  number,\n    \
    \ the lower octet number has the least significant value.\n     NOTE -  When the\
    \ encoding  of  a  TPDU  is  represented  using  a\n     diagram in this clause,\
    \ the following representation is used:\n        a)  octets are shown with the\
    \ lowest  numbered  octet  to  the\n            left, higher numbered octets being\
    \ further to the right;\n        b)  within an octet, bits are shown with bit\
    \ 8 to the left and\n            bit 1 to the right.\n     TPDUs shall contain,\
    \ in the following order:\n        a)  the header, comprising:\n            1)\
    \  the length indicator (LI) field;\n            2)  the fixed part;\n       \
    \     3)  the variable part, if present;\n        b)  the data field, if present.\n\
    \     This structure is illustrated below:\n          octet    1   2 3 4 ... n\
    \   n+1  ...    p  p+1 ...end\n                 +---+-------------+--------------+-----------+\n\
    \                 | LI| fixed part  | variable part| data field|\n           \
    \      +---+-------------+--------------+-----------+\n                 <---------------\
    \   header ------>\n     13.2.1  Length indicator field\n     This field is contained\
    \ in the first octet  of  the  TPDUs.   The\n     length  is  indicated by a binary\
    \ number, with a maximum value of\n     254 (1111 1110).  The length indicated\
    \ shall be the header length\n     in   octets   including  parameters,  but \
    \ excluding  the  length\n     indicator field and user data, if any.  The value\
    \ 255 (1111 1111)\n     is  reserved  for  possible  extensions.  If the length\
    \ indicated\n     exceeds the size of the NS-user data which is present, this\
    \ is  a\n     protocol error.\n     13.2.2  Fixed part\n     13.2.2.1  General\n\
    \     The fixed part contains frequently occurring parameters including\n    \
    \ the  code of the TPDU.  The length and the structure of the fixed\n     part\
    \ are defined by the TPDU code and in  certain  cases  by  the\n     protocol\
    \  class  and the formats in use (normal or extended).  If\n     any of the parameters\
    \ of the fixed part have an invalid value, or\n     if the fixed part cannot be\
    \ contained with the header (as defined\n     by LI) this is a protocol error.\n\
    \     NOTE - In  general,  the  TPDU  code  defines  the   fixed   part\n    \
    \ unambiguously.   However,  different  variants  may exist for the\n     same\
    \ TPDU code (see normal and extended formats).\n     13.2.2.2  TPDU code\n   \
    \  This field contains the TPDU code and is contained in octet 2  of\n     the\
    \  header.  It is used to define the structure of the remaining\n     header.\
    \  This field is a  full  octet  except  in  the  following\n     cases:\n   \
    \        1110 xxxx     Connection Request\n           1101 xxxx     Connection\
    \ Confirm\n           0101 xxxx     Reject\n           0110 xxxx     Data Acknowledgement\n\
    \     where xxxx (bits 4-1) is used to signal the CDT.\n     Only those codes\
    \ defined in 13.1 are valid.\n     13.2.3  Variable part\n     The  variable \
    \ part  is  used  to  define  less  frequently  used\n     parameters.   If  the\
    \  variable part is present, it shall contain\n     one or more parameters.\n\
    \     NOTE - The number of parameters that  may  be  contained  in  the\n    \
    \ variable  part  is  indicated  by the length of the variable part\n     which\
    \ is LI minus the length of the fixed part.\n     Each parameter contained within\
    \ the variable part  is  structured\n     as follows:\n                    Bits\
    \   8    7    6    5    4    3    2    1\n          Octets          +------------------------------------+\n\
    \           n+1            |          Parameter Code            |\n          \
    \                |------------------------------------|\n           n+2      \
    \      |          Parameter Length          |\n                          |   \
    \       Indication (e.g. m)       |\n                          |------------------------------------|\n\
    \           n+3            |                                    |\n          \
    \                |          Parameter Value           |\n           n+2+m    \
    \      |                                    |\n                          +------------------------------------|\n\
    \     - The parameter code field is coded in binary;\n       NOTE - Without extensions,\
    \ it provides a maximum number of  255\n       different  parameters.   However,\
    \  as noted below, bits 8 and 7\n       cannot take every possible  value,  so\
    \  the  practical  maximum\n       number  of  different  parameters is less.\
    \  Parameter code 1111\n       1111 is reserved for possible extensions of the\
    \ parameter code.\n     - The  parameter  length  indication  indicates  the \
    \ length,  in\n       octets, of the parameter value field.\n       NOTE - The\
    \ length is indicated by a binary number,  m,  with  a\n       theoretical  maximum\
    \ value of 255.  The practical maximum value\n       of m is lower.  For example,\
    \ in the case of a single  parameter\n       contained within the variable part,\
    \ two octets are required for\n       the parameter code and the parameter length\
    \ indication  itself.\n       Thus, the value of m is limited to 248.  For larger\
    \ fixed parts\n       of the header and for each succeeding  parameter,  the \
    \ maximum\n       value of m decreases.\n     - The parameter value field contains\
    \ the value of  the  parameter\n       identified in the parameter code field.\n\
    \     - No parameter codes use bits 8 and 7 with the value 00.\n     - The parameters\
    \ defined in the  variable  part  may  be  in  any\n       order.   If  any  parameter\
    \  is duplicated then the later value\n       shall be used.  A parameter not\
    \ defined in  this  International\n       Standard  shall  be treated as a protocol\
    \ error in any received\n       TPDU except a CR TPDU; in a CR TPDU it shall \
    \ be  ignored.   If\n       the  responding  transport  entity  selects a class\
    \ for which a\n       parameter of the CR TPDU is not defined,  it  may  ignore\
    \  this\n       parameter,   except  the  class  and  option,  and  alternative\n\
    \       protocol class parameters which shall always be interpreted.  A\n    \
    \   parameter  defined in this International Standard but having an\n       invalid\
    \ value shall be treated  as  a  protocol  error  in  any\n       received  TPDU\
    \  except  a  CR  TPDU.   In a CR TPDU it shall be\n       treated as a protocol\
    \ error if  it  is  either  the  class  and\n       option  parameter  or  the\
    \  alternative  class parameter or the\n       additional option  parameter; \
    \ otherwise  it  shall  be  either\n       ignored or treated as a protocol error.\n\
    \     13.2.3.1  Checksum Parameter (Class 4 only)\n     All TPDU types may contain\
    \ a 16-bit checksum parameter  in  their\n     variable  part.  This parameter\
    \ shall be present in a CR TPDU and\n     shall be present in all other TPDUs\
    \ except when the  non  use  of\n     checksum option is selected.\n     Parameter\
    \ Code:    1100 0011\n     Parameter Length:  2\n     Parameter Value:   Result\
    \ of checksum algorithm.  This algorithm\n                        is specified\
    \ in 6.17.\n     13.2.4  Data Field\n     This field contains transparent user\
    \ data.  Restrictions  on  its\n     size are noted for each TPDU.\n     13.3\
    \  Connection Request (CR) TPDU\n     The length of the CR TPDU shall not exceed\
    \ 128 octets.\n     13.3.1  Structure\n     The structure of the CR TPDU shall\
    \ be as follows:\n      1    2        3        4       5   6    7    8    p  p+1...end\n\
    \     +--+------+---------+---------+---+---+------+-------+---------+\n     |LI|CR\
    \ CDT|     DST - REF     |SRC-REF|CLASS |VARIAB.|USER     |\n     |  |1110  |0000\
    \ 0000|0000 0000|   |   |OPTION|PART   |DATA     |\n     +--+------+---------+---------+---+---+------+-------+---------+\n\
    \     13.3.2  LI\n     See 13.2.1\n     13.3.3  Fixed Part (Octets 2 to 7)\n \
    \    The structure of this part shall contain:\n        a)  CR       :  Connection\
    \ Request Code:  1110.  Bits  8-5  of\n                        octet 2;\n    \
    \    b)  CDT      :  Initial Credit  Allocation  (set  to  0000  in\n        \
    \                Classes  0  and  1 when specified as preferred\n            \
    \            class).  Bits 4-1 of octet 2;\n        c)  DST-REF  :  Set to zero;\n\
    \        d)  SRC-REF  :  Reference selected  by  the  transport  entity\n    \
    \                    initiating   the   CR  TPDU  to  identify  the\n        \
    \                requested transport connection;\n        e)  CLASS and   Bits\
    \ 8-5 of octet 7 defines the preferred\n            OPTION:     transport protocol\
    \ class to be  operated  over\n                        the   requested  transport\
    \  connection.   This\n                        field shall take one of the following\
    \ values:\n                        0000  Class 0\n                        0001\
    \  Class 1\n                        0010  Class 2\n                        0011\
    \  Class 3\n                        0100  Class 4\n     The CR TPDU contains the\
    \ first choice of class in the fixed part.\n     Second  and subsequent choices\
    \ are listed in the variable part if\n     required.\n     Bits 4-1 of octet 7\
    \ define options to be used  on  the  requested\n     transport connection as\
    \ follows:\n     +-----|-----------------------------------------------+\n   \
    \  | BIT |                  OPTION                       |\n     |-----|-----------------------------------------------|\n\
    \     |  4  |  0   always                                   |\n     |     |  \
    \                                             |\n     |  3  |  0   always    \
    \                               |\n     |     |                              \
    \                 |\n     |  2  | =0   use of normal formats in all classes  \
    \   |\n     |     | =1   use of extended formats in Classes 2,3,4 |\n     |  \
    \   |                                               |\n     |  1  | =0   use of\
    \ explicit flow control in Class 2  |\n     |     | =1   no use of explicit flow\
    \ control in       |\n     |     |      Class 2                              \
    \    |\n     +-----------------------------------------------------+\n     NOTES\n\
    \     1.  The connection establishment procedure  (see  6.5)  does  not\n    \
    \     permit  a given CR TPDU to request use of transport expedited\n        \
    \ data transfer service (additional option  parameter)  and  no\n         use\
    \ of explicit flow control in Class 2 (bit 1 = 1).\n     2.  Bits 4 to 1 are always\
    \ zero in Class 0 and have no meaning.\n     13.3.4  Variable Part (Octets 8 to\
    \ p)\n     The following parameters are permitted in the variable part:\n    \
    \    a)  Transport Service Access Point Identifier (TSAP-ID)\n            Parameter\
    \ code:    1100 0001 for  the  identifier  of  the\n                         \
    \      Calling TSAP.\n                               1100 0010 for  the  identifier\
    \  of  the\n                               Called TSAP\n            Parameter\
    \ length:  not defined in this standard\n            Parameter value:   identifier\
    \ of  the  calling  or  called\n                               TSAP respectively.\n\
    \            If a TSAP-ID is given in the request it may be returned in\n    \
    \        the confirmation.\n        b)  TPDU size\n            This parameter\
    \ defines the proposed maximum TPDU size  (in\n            octets including the\
    \ header) to be used over the requested\n            transport connection.  The\
    \ coding of this parameter is:\n            Parameter code:    1100 0000\n   \
    \         Parameter Length:  1 octet\n            Parameter value:\n         \
    \   0000 1101  8192 octets (not allowed in Class 0)\n            0000 1100  4096\
    \ octets (not allowed in Class 0)\n            0000 1011  2048 octets\n      \
    \      0000 1010  1024 octets\n            0000 1001   512 octets\n          \
    \  0000 1000   256 octets\n            0000 0111   128 octets\n            Default\
    \ value is 0000 0111 (128 octets)\n        c)  Version Number (not used  if  Class\
    \  0  is  the  preferred\n            class)\n            Parameter code:    \
    \     1100 0100\n            Parameter length:       1 octet\n            Parameter\
    \ value field:  0000 0001\n            Default value is 0000 0001 (not used in\
    \ Class 0)\n        d)  Security Parameters (not used if Class 0 is the  preferred\n\
    \            class)\n            This parameter is user defined.\n           \
    \ Parameter code:    1100 0101\n            Parameter length:  user defined\n\
    \            Parameter value:   user defined\n        e)  Checksum (used only\
    \ if class 4  is  the  preferred  class)\n            (see 13.2.3.1)\n       \
    \     This parameter shall  always  be  present  in  a  CR  TPDU\n           \
    \ requesting   Class  4,  even  if  the  checksum  selection\n            parameter\
    \ is used  to  request  non-use  of  the  checksum\n            facility.\n  \
    \      f)  Additional Option Selection (not used if Class  0  is  the\n      \
    \      preferred class)\n            This parameter defines the selection  to\
    \  be  made  as  to\n            whether or not additional options are to be used.\n\
    \            Parameter code:    1100 0110\n            Parameter length:  1\n\
    \            Parameter value:\n            +------------------------------------------------------+\n\
    \            |BIT|                   OPTION                         |\n      \
    \      |---|--------------------------------------------------|\n            |\
    \ 4 | 1=  Use of network expedited in Class 1          |\n            |   | 0=\
    \  Non use of network expedited in Class 1      |\n            |   |         \
    \                                         |\n            | 3 | 1=  Use of receipt\
    \ confirmation in Class 1       |\n            |   | 0=  Use of explicit AK variant\
    \ in Class 1        |\n            |   |                                     \
    \             |\n            | 2 | 0=  16-bit checksum defined in 6.17 is to be\
    \ used|\n            |   |     in Class 4                                   |\n\
    \            |   | 1=  16-bit checksum defined in 6.17 is not to be |\n      \
    \      |   |     used on Class 4                              |\n            |\
    \   |                                                  |\n            | 1 | 1=\
    \  Use of transport expedited data transfer     |\n            |   |     service\
    \                                      |\n            |   | 0=  No use of transport\
    \ expedited data transfer  |\n            |   |     service                  \
    \                    |\n            +------------------------------------------------------+\n\
    \            Default value is 000 0001\n            Bits related to options particular\
    \  to  a  class  are  not\n            meaningful  if that class is not proposed\
    \ and may take any\n            value.\n        g)  Alternative protocol class(es)\
    \ (not used if Class 0 is the\n            preferred class)\n            Parameter\
    \ code:    1100 0111\n            Parameter length:  n\n            Parameter\
    \ value encoded as a sequence  of  single  octets.\n            Each octet is\
    \ encoded as for octet 7 but with bits 4-1 set\n            to zero (i.e. no alternative\
    \ option selections permitted).\n        h)  Acknowledge Time (used only if class\
    \ 4  is  the  preferred\n            class)\n            This parameter conveys\
    \ the maximum acknowledge time AL  to\n            the  remote  transport  entity.\
    \  It is an indication only,\n            and is not subject to negotiation (see\
    \ 12.2.1.1.3)\n            Parameter code:    1000 0101\n            Parameter\
    \ length:  2\n            Parameter value:   n, a binary number where n is the\n\
    \                               maximum acknowledge time, expressed\n        \
    \                       in milliseconds.\n        j)  Throughput (not used if\
    \ class 0 is the preferred class)\n            Parameter code:    1000 1001\n\
    \            Parameter length:  12 or 24\n            Parameter value:\n     \
    \       1st 12 Octets:     maximum throughput, as follows:\n            1st 3\
    \ octets:      Target   value,   calling-called   user\n                     \
    \          direction\n            2nd 3 octets:      Min.  acceptable,  calling-called\
    \  user\n                               direction\n            3rd 3 octets: \
    \     Target   value,   called-calling   user\n                              \
    \ direction\n            4th 3 octets:      Min.  acceptable,  called-calling\
    \  user\n                               direction\n            2nd 12 octets (optional):\
    \  average throughput, as follows:\n            5th 3 octets:      Target   value,\
    \   calling-called   user\n                               direction\n        \
    \    6th 3 octets:      Min.  acceptable,  calling-called  user\n            \
    \                   direction\n            7th 3 octets:      Target   value,\
    \   called-calling   user\n                               direction\n        \
    \    8th 3 octets:      Min.  acceptable,  called-calling  user\n            \
    \                   direction\n            Where the average throughput is omitted,\
    \ it is  considered\n            to have the same value as the maximum throughput.\n\
    \            Values are expressed in octets per second.\n        k)  Residual\
    \ error rate (not used if class 0 is the  preferred\n            class)\n    \
    \        Parameter code:    1000 1001\n            Parameter length:  12\n   \
    \         1st 3 octets:      Target   value,   calling-called   user\n       \
    \                        direction\n            2nd 3 octets:      Min.  acceptable,\
    \  calling-called  user\n                               direction\n          \
    \  3rd 3 octets:      Target   value,   called-calling   user\n              \
    \                 direction\n            4th 3 octets:      Min.  acceptable,\
    \  called-calling  user\n                               direction\n        l)\
    \  Residual error rate (not used if class 0 is the  preferred\n            class)\n\
    \            Parameter code:    1000 0110\n            Parameter length:  3\n\
    \            Parameter value:\n            1st octet:         Target value, power\
    \ of 10\n            2nd octet:         Min. acceptable, power of 10\n       \
    \     3rd octet:         TSDU size of interest, expressed  as  a\n           \
    \                    power of 2\n        m)  Priority (not used if class 0 is\
    \ the preferred class)\n            Parameter code:    1000 0111\n           \
    \ Parameter length:  2\n            Parameter value:   Integer (0 is the highest\
    \ priority)\n        n)  Transit delay (not used if class 0 is the preferred class)\n\
    \            Parameter code:    1000 1000\n            Parameter length:  8\n\
    \            Parameter value:\n            1st 2 octets:      Target   value,\
    \   calling-called   user\n                               direction\n        \
    \    2nd 2 octets:      Max.  acceptable,  calling-called  user\n            \
    \                   direction\n            3rd 2 octets:      Target   value,\
    \   called-calling   user\n                               direction\n        \
    \    4th 2 octets:      Max.  acceptable,  called-calling  user\n            \
    \                   direction\n            Values are expressed in milliseconds,\
    \ and are based upon a\n            TSDU size of 128 octets.\n        p)  assignment\
    \ time (not used if class 0, 2 or class 4 is  the\n            preferred class)\n\
    \            This parameter conveys the Time to Try Reassignment  (TTR)\n    \
    \        which  will  be  used  when  following  the  procedure for\n        \
    \    Reassignment after Failure (see 6.12).\n            Parameter code:    1000\
    \ 1011\n            Parameter length:  2\n            Parameter value:   n, a\
    \ binary number where n is  the  TTR\n                               value expressed\
    \ in seconds.\n     13.3.5  User Data (Octets p+1 to the end)\n     No user data\
    \ are permitted in Class 0, and are  optional  in  the\n     other classes.  Where\
    \ permitted, it may not exceed 32 octets.\n     13.4  Connection Confirm (CC)\
    \ TPDU\n     13.4.1  Structure\n     The structure of the CC TPDU shall be as\
    \ follows:\n       1      2     3   4   5   6     7     8     p   p+1 ...end\n\
    \     +---+----+---+---+---+---+---+-------+--------+-------------+\n     |LI\
    \ | CC  CDT|DST-REF|SRC-REF| CLASS |VARIABLE| USER        |\n     |   |1101| \
    \  |   |   |   |   | OPTION|  PART  | DATA        |\n     +---+----+---+---+---+---+---+-------+--------+-------------+\n\
    \     13.4.2  LI\n     See 13.2.1\n     13.4.3  Fixed Part (Octets 2 to 7)\n \
    \    The fixed part shall contain:\n        a)  CC:  Connection Confirm Code:\
    \  1101.  Bits 8-5 of octet 2;\n        b)  CDT:  Initial Credit Allocation (set\
    \ to 0000 in Classes  0\n            and 1).  Bits 4-1 of octet 2;\n        c)\
    \  DST-REF:  Reference identifying  the  requested  transport\n            connection\
    \ at the remote transport entity;\n        d)  SRC-REF:  Reference identifying\
    \  the  requested  transport\n            connection at the remote transport entity.\n\
    \        e)  Class and Option:  Defines the selected transport protocol\n    \
    \        class   and  option  to  be  operated  over  the  accepted\n        \
    \    transport connection according to  the  negotiation  rules\n            specified\
    \ in 6.5;\n     13.4.4  Variable Part (Octet 8 to p)\n     The parameters are\
    \ defined in  13.3.4  and  are  subject  to  the\n     constraints states in 6.5\
    \ (connection establishment).  Parameters\n     ruled out by selection of an alternative\
    \ class and  option  shall\n     not be present.\n     13.4.5  User Data (Octets\
    \ p+1 to the end)\n     No user data are permitted in class 0, and are  optional\
    \  in  the\n     other  classes.   Where  permitted,  it may not exceed 32 octets.\n\
    \     The user data are subject to the constraints of  the  negotiation\n    \
    \ rules (see 6.5).\n     13.5  Disonnect Request (DR) TPDU\n     13.5.1  Structure\n\
    \     The structure of the DR TPDU shall be as follows:\n       1     2      3\
    \     4    5     6     7    8     p   p+1 ...end\n     +--+---------+----+-----+----+-----+------+--------+----------+\n\
    \     |LI|    DR   | DST-REF. | SRC-REF. |REASON|VARIABLE| USER     |\n     |\
    \  |1000 0001|    |     |    |     |      |  PART  | DATA     |\n     +--+---------+----+-----+----+-----+------+--------+----------+\n\
    \     13.5.2  LI\n     See Section 13.2.1\n     13.5.3  Fixed Part (Octets 2 to\
    \ 7\n     The fixed part shall contain:\n        a)  DR:  Disconnect Request Code:\
    \  1000 0000;\n        b)  DST-REF:  Reference identifying the  transport  connection\n\
    \            at the remote transport entity;\n        c)  SRC-REF:  Reference\
    \ identifying the  transport  connection\n            at  the  transport entity\
    \ initiating the TPDU.  Value zero\n            when reference is unassigned;\n\
    \        d)  REASON:   Defines  the  reason   for   disconnecting   the\n    \
    \        transport  connection.   This  field shall take one of the\n        \
    \    following values:\n            The following values may be used for Classes\
    \ 1 to 4:\n            1)  128 + 0 - Normal  disconnect  initiated   by   session\n\
    \                   entity\n            2)  128 + 1 - Remote  transport   entity\
    \   congestion   at\n                   connect request time\n            3) *128\
    \ + 2 - Connection negotiation failed (i.e. proposed\n                   class(es)\
    \ not supported)\n            4)  128 + 3 - Duplicate source reference detected\
    \ for  the\n                   same pair of NSAPS.\n            5)  128 + 4 -\
    \ Mismatched references\n            6)  128 + 5 - Protocol error\n          \
    \  7)  128 + 6 - Not used\n            8)  128 + 7 - Reference overflow\n    \
    \        9)  128 + 8 - Connection request refused on  this  network\n        \
    \           connection\n            10) 128 + 9 - Not used\n            11) 128\
    \ + 10- Header or parameter length invalid\n        The following values can be\
    \ used for all classes:\n            12)       0 - Reason not specified\n    \
    \        13)       1 - Congestion at TSAP\n            14)      *2 - Session entity\
    \ not attached to TSAP\n            15)      *3 - Address unknown\n        NOTE\
    \ - Reasons marked with an asterisk (*) may be reported  to\n        the TS-user\
    \ as persistent, other reasons as transient.\n     13.5.4  Variable Part (Octets\
    \ 8 to p)\n     The variable part may contain\n        a)  A parameter allowing\
    \ additional information related to the\n            clearing of the connection.\n\
    \            Parameter code:    1110 0000\n            Parameter length:  Any\
    \ value provided that the  length  of\n                               the DR TPDU\
    \ does not exceed the maximum\n                               agreed TPDU size\
    \ or  128  when  the  DR\n                               TPDU  is  used  during\
    \  the  connection\n                               refusal procedure\n       \
    \     Parameter value:   Additional information.  The content of\n           \
    \                    this field is user defined.\n        b)  Checksum (see 13.2.3.1)\n\
    \     13.5.5  User Data (Octets p+1 to the end)\n     This field shall not exceed\
    \ 64 octets and is used  to  carry  TS-\n     user   data.   The  successful \
    \ transfer  of  this  data  is  not\n     guaranteed by the transport protocol.\
    \  When a DR TPDU is used  in\n     Class 0 it shall not contain this field.\n\
    \     13.6  Disconnect Confirm (DC) TPDU\n     This TPDU shall not be used in\
    \ Class 0.\n     13.6.1  Structure\n     The structure of DC TPDU shall be as\
    \ follows:\n       1       2         3     4     5     6    7        p\n     +----+-----------+-----+-----+-----+-----+-------+--------+\n\
    \     | LI |    DC     |  DST REF  |  SRC REF  | Variable Part  |\n     |    |\
    \ 1100 0000 |     |     |     |     |       |        |\n     +----+-----------+-----+-----+-----+-----+-------+--------+\n\
    \     13.6.2  LI\n     See 13.2.1\n     13.6.3  Fixed Part (Octets 2 to 6)\n \
    \    The fixed part shall contain:\n        a)  DC:  Disconnect Confirm Code:\
    \  1100 0000;\n        b)  DST-REF:  See 13.4.3;\n        c)  SRC-REF:  See 13.4.3.\n\
    \     13.6.4  Variable Part\n     The variable part shall contain the  checksum\
    \  parameter  if  the\n     condition in (see 13.2.3.1) applies.\n     13.7  Data\
    \ (DT) TPDU\n     13.7.1  Structure\n     Depending on the class and the option\
    \ the DT TPDU shall have  one\n     of the following structures.\n        a) \
    \ Normal format for Classes 0 and 1\n       1       2         3          4   \
    \    5             ... end\n     +----+-----------+-----------+------------ -\
    \ - - - - -------+\n     | LI |    DT     |  TPDU-NR  | User Data            \
    \        |\n     |    | 1111 0000 |  and EOT  |                              |\n\
    \     +----+-----------+-----------+------------ - - - - - -------+\n        b)\
    \  Normal format for Classes 2, 3 and 4\n       1      2       3   4     5   \
    \  6       p    p+1       ... end\n     +----+---------+---+---+-------+-----+-------+-----------\
    \ - - -+\n     | LI |   DT    |DST-REF|TPDU-NR|Variable Part|User Data       \
    \ |\n     |    |1111 0000|   |   |and EOT|     |       |                 |\n \
    \    +----+---------+---+---+-------+-----+-------+----------- - - -+\n      \
    \  c)  Extended Format for  use  in  Classes  2,  3  and  4  when\n          \
    \  selected during connection establishment.\n       1      2       3   4   5,6\
    \ 7,8  9     p  p+1      ... end\n     +----+---------+---+---+---------+--------+----------\
    \ - - -+\n     | LI |   DT    |DST-REF| TPDU-NR |Variable|User Data       |\n\
    \     |    |1111 0000|   |   | and EOT |  Part  |                |\n     +----+---------+---+---+---------+--------+----------\
    \ - - -+\n     13.7.2  LI\n     See 13.2.1\n     13.7.3  Fixed Part\n     The\
    \ fixed part shall contain:\n        a)  DT:       Data Transfer Code:  1111 0000;\n\
    \        b)  DST-REF:  See 13.4.3;\n        c)  EOT:      When set to ONE, indicates\
    \ that the  current  DT\n                      TPDU is the last data unit of a\
    \ complete DT TPDU\n                      sequence (End of TSDU).  EOT is bit\
    \ 8 of octet 3\n                      in  class  0  and 1, bit 8 of octet 5 for\
    \ normal\n                      formats for classes 2, 3 and  4  and  bit  8 \
    \ of\n                      octet 8 for extended formats;\n        d)  TPDU-NR:\
    \  TPDU send Sequence Number  (zero  in  Class  0).\n                      May\
    \  take  any value in Class 2 without explicit\n                      flow control.\
    \  TPDU-NR is bits 7-1  of  octet  3\n                      for  classes  0  and\
    \  1, bits 7-1 of octet 5 for\n                      normal formats in classes\
    \ 2, 3 and 4, octets  5,\n                      6  and  7  together with bits\
    \ 7-1 of octet 8 for\n                      extended formats.\n        NOTE -\
    \ Depending on the class, the fixed part of the  DT  TPDU\n        uses the following\
    \ octets:\n             Classes 0 and 1:                Octets 2 to 3;\n     \
    \        Classes 2,3,4 normal format:    Octets 2 to 5;\n             Classes\
    \ 2,3,4 extended format:  Octets 2 to 8.\n     13.7.4  Variable Part\n     The\
    \ variable part shall contain the  checksum  parameter  if  the\n     condition\
    \ in see 13.2.3.1 applies.\n     13.7.5  User Data Field\n     This field contains\
    \ data of the TSDU being transmitted.\n     NOTE - The length of this field is\
    \ limited to the negotiated TPDU\n     size  for  this  transport connection minus\
    \ 3 octets in Classes 0\n     and 1, and minus 5 octets (normal  header  format)\
    \  or  8  octets\n     (extended  header  format)  in  the  other classes.  The\
    \ variable\n     part, if present, may further reduce the size of  the  user \
    \ data\n     field.\n     13.8  Expedited Data (ED) TPDU\n     The ED TPDU shall\
    \ not be used in Class 0 or in Class 2  when  the\n     no explicit flow control\
    \ option is selected or when the expedited\n     data transfer service has not\
    \ been selected for the connection.\n     13.8.1  Structure\n     Depending on\
    \ the format negotiated  at  connection  establishment\n     the ED TPDU shall\
    \ have one of the following structures:\n        a)  Normal Format (classes 1,\
    \ 2, 3, 4)\n      1     2       3   4      5     6        p    p+1     ... end\n\
    \     +--+---------+---+---+---------+-----+-------+---------------+\n     |LI|\
    \   ED    |DST-REF|EDTPDU-NR|Variable Part|User Data      |\n     |  |0001 0000|\
    \   |   |and EOT  |     |       |               |\n     +--+---------+---+---+---------+-----+-------+---------------+\n\
    \        b)  Extended Format (for use in classes 2, 3, 4 when  selected\n    \
    \        during connection establishment).\n      1     2       3   4   5,6,7,8\
    \  9        p    p+1     ... end\n     +--+---------+---+---+---------+-----+-------+---------------+\n\
    \     |LI|   ED    |DST-REF|EDTPDU-NR|Variable Part|User Data      |\n     | \
    \ |0001 0000|   |   |and EOT  |     |       |               |\n     +--+---------+---+---+---------+-----+-------+---------------+\n\
    \     13.8.2  LI\n     See 13.2.1\n     13.8.3  Fixed Part\n     The fixed part\
    \ shall contain:\n        a)  ED:          Expedited Data code:  0001 0000;\n\
    \        b)  DST-REF:     see 13.4.3;\n        c)  ED-TPDU-NR:  Expedited TPDU\
    \  identification  number.   ED-\n                         TPDU-NR is used in\
    \ classes 1, 3 and 4 and may\n                         take any value in Class\
    \ 2.  Bits 7-1 of octet\n                         5  for  normal  formats and\
    \ octets 5, 6 and 7\n                         together  with  bits  7-1  of  octet\
    \  8   for\n                         extended formats;\n        d)  EOT:     \
    \    end of TSDU always set to 1 (bit 8 of octet 5\n                         for\
    \  normal  formats and bit 8 of octet 8 for\n                         extended\
    \ formats).\n        NOTE - Depending on the format the fixed part shall be  either\n\
    \        octets 2 to 5 or 2 to 8.\n     13.8.4  Variable Part\n     The variable\
    \ part shall contain the  checksum  parameter  if  the\n     condition defined\
    \ in 13.2.3.1 applies.\n     13.8.5  User Data Field\n     This field contains\
    \ an expedited TSDU (1 to 16 octets).\n     13.9  Data Acknowledgement (AK) TPDU\n\
    \     This TPDU shall not be used for Class 0 and Class 2 when the  \"no\n   \
    \  explicit  flow  control\" option is selected, and for Class 1 when\n     the\
    \ network receipt confirmation option is selected.\n     13.9.1  Structure\n \
    \    Depending on the class and option agreed the AK TPDU  shall  have\n     one\
    \ of the following structures:\n        a)  Normal Format (classes 1, 2, 3, 4)\n\
    \      1     2      3     4        5        6        p\n     +--+--------+----------+------------+---------------+\n\
    \     |LI| AK CDT | DST-REF  |  YR-TU-NR  | Variable Part |\n     |  | 0110  \
    \ |          |            |               |\n     +--+--------+----------+------------+---------------+\n\
    \        b)  Extended Format (for use in classes 2, 3, 4 when  selected\n    \
    \        during connection establishment).\n      1      2      3     4    5,6,7,8\
    \   9,10 11    p\n     +--+---------+---------+----------+-----+--------+\n  \
    \   |LI|    AK   | DST-REF | YR-TU-NR | CDT |Variable|\n     |  |0110 0000|  \
    \       |          |     |  Part  |\n     +--+---------+---------+----------+-----+--------+\n\
    \     13.9.2  LI\n     See 13.2.1\n     13.9.3  Fixed Part\n     The fixed part\
    \ shall contain (in octet 2 to 5 when normal  format\n     is used, 2 to 10 otherwise)\
    \ the following parameters:\n        a)  AK:        Acknowledgement code:  0110;\n\
    \        b)  CDT:       Credit Value (set to 1111 in  class  1).   Bits\n    \
    \                   4-1  of octet 2 for normal formats and octets 9\n        \
    \               and 10 for extended formats;\n        c)  DST-REF:   See 13.4.3;\n\
    \        d)  YR-TU-NR:  Sequence number indicating the next expected DT\n    \
    \                   TPDU  number.   For normal formats, bits 7-1 of\n        \
    \               octet 5; bit 8 of octet 5  is  not  significant\n            \
    \           and  shall  take  the  value  0.   For extended\n                \
    \       formats, octets 5, 6 and 7 together  with  bits\n                    \
    \   7-1  of  octet  8;  bit  8  of  octet  8 is not\n                       significant\
    \ and shall take the value 0.\n     13.9.4  Variable Part\n     The variable part\
    \ contains the following parameters:\n        a)  Checksum  See  13.2.3.1  if\
    \  the  condition  in   13.2.3.1\n            applies;\n        b)  Subsequence\
    \  number  when  optionally   used   under   the\n            conditions  defined\
    \ in class 4.  This parameter is used to\n            ensure  that  AK  TPDUs\
    \  are  processed  in  the   correct\n            sequence.    If  it  is  absent,\
    \  this  is  equivalent  to\n            transmitting the parameter with a value\
    \ of zero.\n            Parameter code:    1000 1010\n            Parameter length:\
    \  2\n            Parameter value:   16-bit sub-sequence number;\n        c) \
    \ Flow Control Confirmation Class  4  when  optionally  used\n            under\
    \  the  conditions defined in class 4.  This parameter\n            contains a\
    \ copy of the information received in an AK TPDU,\n            to  allow  the\
    \ transmitter of the AK TPDU to be certain of\n            the  state  of  the\
    \  receiving   transport   entity   (see\n            12.2.3.10).\n          \
    \  Parameter code:    1000 1011\n            Parameter length:  8\n          \
    \  Parameter value:   defined as follows\n            1.  Lower Window Edge (32\
    \ bits)\n                Bit 8 of  octet  4  is  set  to  zero,  the  remainder\n\
    \                contains  the  YR-TU-NR value of the received AK TPDU.\n    \
    \            When normal format has been selected, only  the  least\n        \
    \        significant  seven  bits  (bits  1 to 7 of octet 1) of\n            \
    \    this field are significant.\n            2.  Your Sub-Sequence (16 bits)\n\
    \                Contains the value of the  sub-sequence  parameter  of\n    \
    \            the  received  AK  TPDU, or zero if this parameter was\n        \
    \        not present.\n            3.  Your Credit (16 bits)\n               \
    \ Contains the value of the CDT field of the received AK\n                TPDU.\
    \   When normal format has been selected, only the\n                least significant\
    \ four bits (bits 1 to 4 of  octet  1)\n                of this field are significant.\n\
    \     13.10  Expedited Data Acknowledgement (EA) TPDU\n     This TPDU shall not\
    \ be used for Class 0 and Class 2 when  the  no\n     explicit flow control option\
    \ is selected.\n     13.10.1  Structure\n     Depending on the option (normal\
    \  or  extended  format)  the  TPDU\n     structure shall be:\n        a)  Normal\
    \ Format (classes 1,2,3,4)\n             1      2      3     4      5      6 \
    \       p\n            +--+---------+---------+----------+------+------+\n   \
    \         |LI|   EA    | DST-REF | YR-TU-NR |Variable Part|\n            |  |0010\
    \ 0000|         |          |      |      |\n            +--+---------+---------+----------+------+------+\n\
    \        b)  Extended Format (for use in classes 2, 3,  4  if  selected\n    \
    \        during connection establishment)\n             1      2      3     4\
    \    5,6,7,8  9        p\n            +--+---------+---------+----------+------+------+\n\
    \            |LI|   EA    | DST-REF | YR-TU-NR |Variable Part|\n            |\
    \  |0010 0000|         |          |      |      |\n            +--+---------+---------+----------+------+------+\n\
    \     13.10.2  LI\n     See 13.2.1\n     13.10.3  Fixed Part\n     The fixed part\
    \ shall contain (in octets 2 to 5 when normal format\n     is used, in octets\
    \ 2 to 8 otherwise):\n        a)  EA:          Expedited Acknowledgement code:\
    \  0010 0000;\n        b)  DST-REF:     See 13.4.3;\n        c)  YR-EDTU-NR: \
    \ Identification   of   the   ED   TPDU   being\n                         acknowledged.\
    \  May take any value in Class 2;\n                         For normal formats\
    \ bits 7-1 of octet 5; bit 8\n                         of  octet 5 is not significant\
    \ and shall take\n                         the value 0.  For  extended  formats,\
    \  octets\n                         5,6  and 7 together with bits 7-1 of octet\
    \ 8;\n                         bit 8 of octet 8 is not significant and shall\n\
    \                         take the value 0.\n     13.10.4  Variable Part\n   \
    \  The  variable  part  may  contain  the  checksum  parameter  (see\n     13.2.3.1).\n\
    \     13.11  Reject (RJ) TPDU\n     The RJ TPDU shall not be used in Classes 0,\
    \ 2 and 4.\n     13.11.1  Structure\n     The RJ TPDU shall have one of the following\
    \ formats:\n        a)  Normal Format (classes 1 and 3)\n              1     \
    \ 2        3     4       5\n            +----+----------+----+----+------------+\n\
    \            | LI |  RJ CDT  | DST-REF |  YR-TU-NR  |\n            |    | 0101\
    \     |    |    |            |\n            +----+----------+----+----+------------+\n\
    \        b)  Extended Format (for use in classes 3 if  selected  during\n    \
    \        connection establishment).\n             1       2       3     4   5,6,7,8\
    \   9,10\n            +--+-----------+----+----+----------+-----+\n          \
    \  |LI|     RJ    | DST-REF | YR-TU-NR | CDT |\n            |  | 0101 0000 | \
    \   |    |          |     |\n            +--+-----------+----+----+----------+-----+\n\
    \     13.11.2  LI\n     See 13.2.1.\n     13.11.3  Fixed Part\n     The fixed\
    \ part shall contain (in octets 2 to 5 when normal format\n     is used, in octets\
    \ 2 to 10 otherwise):\n        a)  RJ:        Reject Code:  0101.  Bits 8-5 of\
    \ octet 2;\n        b)  CDT:       Credit Value (set to 1111 in  class  1).  \
    \ Bits\n                       4-1  of octet 2 for normal formats and octets 9\n\
    \                       and 10 for extended formats;\n        c)  DST-REF:   See\
    \ 13.4.3;\n        d)  YR-TU-NR:  Sequence number indicating  the  next  expected\n\
    \                       TPDU from which retransmission should occur.\n       \
    \                For normal formats, bits 7-1 of octet 5; bit  8\n           \
    \            of  octet  5  is not significant and shall take\n               \
    \        the value 0.  For extended formats, octets  5,6\n                   \
    \    and  7 together with bits 7-1 of octet 8; bit 8\n                       of\
    \ octet 8 is not significant  and  shall  take\n                       the value\
    \ 0.\n     13.11.4  Variable Part\n     There is no variable part for this TPDU\
    \ type.\n     13.12  TPDU Error (ER) TPDU\n     13.12.1  Structure\n       1 \
    \       2       3     4     5         6   P\n     +----+-----------+----+----+--------+----------+\n\
    \     | LI |    ER     | DST-REF | Reject | Variable |\n     |    | 0111 0000\
    \ |    |    | Cause  |   Part   |\n     +----+-----------+----+----+--------+----------+\n\
    \     13.12.2  LI\n     See 13.2.1\n     13.12.3  Fixed Part\n     The fixed part\
    \ shall contain:\n        a)  ER:            TPDU Error Code:  0111 0000;\n  \
    \      b)  DST-REF:       See 13.4.3;\n        c)  REJECT CAUSE:  0000 0000  Reason\
    \ not specified\n                           0000 0001  Invalid parameter code\n\
    \                           0000 0010  Invalid TPDU type\n                   \
    \        0000 0011  Invalid parameter value.\n     13.12.4  Variable Part\n  \
    \   The variable part may contain the following parameters:\n        a)  Invalid\
    \ TPDU\n            Parameter code:    1100 0001\n            Parameter length:\
    \  number of octets of the value field\n            Parameter Value:  Contains\
    \ the bit pattern of the rejected\n                               TPDU  up  to\
    \  and  including  the octet\n                               which  caused  the\
    \   rejection.    This\n                               parameter is mandatory\
    \ in Class 0.\n        b)  Checksum\n            This parameter  shall  be  present\
    \  if  the  condition  in\n            13.2.3.1 applies.\n     SECTION THREE.\
    \  CONFORMANCE\n     14  CONFORMANCE\n     14.1\n     A system claiming to implement\
    \ the procedures specified  in  this\n     standard shall comply with the requirements\
    \ in 14.2 - 14.5.\n     14.2\n     The system shall implement Class 0 or Class\
    \ 2 or both.\n     14.3\n     If the system implements Class  3  or  Class  4,\
    \  it  shall  also\n     implement Class 2.\n     14.4\n     If the system implements\
    \ Class 1, it shall also  implement  Class\n     0.\n     14.5\n     For each\
    \ class which the system claims to implement,  the  system\n     shall be capable\
    \ of:\n        a)  initiating CR TPDUs or responding  to  CR  TPDUs  with  CC\n\
    \            TPDUs or both;\n        b)  responding to any other TPDU and operating\
    \ network service\n            in accordance with the procedures for the class;\n\
    \        c)  operating all the  procedures  for  the  class  listed  as\n    \
    \        mandatory in table 9;\n        d)  operating  those  procedures  for\
    \  the  class  listed   as\n            optional in table 9 for which conformance\
    \ is claimed;\n        e)  handling all TPDUs of lengths up to the lesser value\
    \ of:\n            1)  the maximum length for the class;\n            2)  the\
    \ maximum for which conformance is claimed.\n            NOTE - This requirement\
    \ indicates that TPDU sizes  of  128\n            octets are always implemented.\n\
    \     14.6  Claims of Conformance Shall State\n        a)  which class or classes\
    \ of protocol are implemented;\n        b)  whether the system is capable of initiating\
    \ or  responding\n            to CR TPDUs or both;\n        c)  which of the procedures\
    \ listed as optional in table 9  are\n            implemented;\n        d)  the\
    \ maximum size of TPDU implemented; the value  shall  be\n            chosen \
    \ from the following list and all values in the list\n            which are less\
    \ than this maximum shall be implemented:\n            128, 256, 512, 1024, 2048,\
    \ 4096 or 8192 octets.\n     +------------------------------------------------------------+\n\
    \     |       PROCEDURE          |    CLASS 0     |    CLASS 1     |\n     |--------------------------|----------------|----------------|\n\
    \     |                          |                |                |\n     |TPDU\
    \ with checksum        | NA             | NA             |\n     |TPDU wihout\
    \ checksum      | mandatory      | mandatory      |\n     |                  \
    \        |                |                |\n     |--------------------------|----------------|----------------|\n\
    \     |Expedited data transfer   | NA             | mandatory      |\n     |No\
    \ expedited data transfer| mandatory      | mandatory      |\n     |         \
    \                 |                |                |\n     |--------------------------|----------------|----------------|\n\
    \     |Flow control in Class 2   | NA             | NA             |\n     |No\
    \ flow control in Class 2| NA             | NA             |\n     |         \
    \                 |                |                |\n     |--------------------------|----------------|----------------|\n\
    \     |Normal formats            | mandatory      | mandatory      |\n     |Extended\
    \ formats          | NA             | NA             |\n     |               \
    \           |                |                |\n     |--------------------------|----------------|----------------|\n\
    \     |Use of receipt confirma-  |                |                |\n     |tion\
    \ in Class 1           | NA             | optional       |\n     |No use of receipt\
    \ con-    |                |                |\n     |firmation in Class 1    \
    \  | NA             | mandatory      |\n     |                          |    \
    \            |                |\n     |--------------------------|----------------|----------------|\n\
    \     |Use of network expedited  |                |                |\n     |in\
    \ Class 1                | NA             | optional       |\n     |No use of\
    \ network expedi- |                |                |\n     |ted in Class 1  \
    \          | NA             | mandatory      |\n     |                       \
    \   |                |                |\n     +------------------------------------------------------------+\n\
    \     NA indicates the procedure is not applicable.\n             Table 9. (First\
    \ of 2 pages) Provision of options\n     +------------------------------------------------------------+\n\
    \     |       PROCEDURE          | CLASS 2  | CLASS 3  |  CLASS 4  |\n     |--------------------------|----------|----------|-----------|\n\
    \     |                          |          |          |           |\n     |TPDU\
    \ with checksum        |NA        |NA        |mandatory  |\n     |TPDU wihout\
    \ checksum      |mandatory |mandatory |optional   |\n     |                  \
    \        |          |          |           |\n     |--------------------------|----------|----------|-----------|\n\
    \     |Expedited data transfer   |mandatory |mandatory |mandatory  |\n     |No\
    \ expedited data transfer|mandatory |mandatory |mandatory  |\n     |         \
    \                 |          |          |           |\n     |--------------------------|----------|----------|-----------|\n\
    \     |Flow control in Class 2   |mandatory |NA        |NA         |\n     |No\
    \ flow control in Class 2|optional  |NA        |NA         |\n     |         \
    \                 |          |          |           |\n     |--------------------------|----------|----------|-----------|\n\
    \     |Normal formats            |mandatory |mandatory |mandatory  |\n     |Extended\
    \ formats          |optional  |optional  |optional   |\n     |               \
    \           |          |          |           |\n     |--------------------------|----------|----------|-----------|\n\
    \     |Use of receipt confirma-  |          |          |           |\n     |tion\
    \ in Class 1           |NA        |NA        |NA         |\n     |No use of receipt\
    \ con-    |          |          |           |\n     |firmation in Class 1    \
    \  |NA        |NA        |NA         |\n     |                          |    \
    \      |          |           |\n     |--------------------------|----------|----------|-----------|\n\
    \     |Use of network expedited  |          |          |           |\n     |in\
    \ Class 1                |NA        |NA        |NA         |\n     |No use of\
    \ network expedi- |          |          |           |\n     |ted in Class 1  \
    \          |NA        |NA        |NA         |\n     |                       \
    \   |          |          |           |\n     +------------------------------------------------------------+\n\
    \     NA indicates the procedure is not applicable\n            Table 9. (Second\
    \ of 2 pages) Provision of options\n     ANNEX A - STATE TABLES\n     This annex\
    \ is an integral part of the body of this  International\n     Standard.\n   \
    \  This Annex provides a more precise description of  the  protocol.\n     In\
    \  the  event  of a discrepancy between the description in these\n     tables\
    \ and that contained in the text, the text takes precedence.\n     The state table\
    \ also  define  the  mapping  between  service  and\n     protocol events that\
    \ TS-users can expect.\n     This annex describes the transport protocol  in \
    \ terms  of  state\n     tables.    The  state  tables  show  the  state  of \
    \ a  transport\n     connection, the events that occur in the  protocol,  the\
    \  actions\n     taken and the resultant state.\n     [The state tables have been\
    \ omitted from this copy.]\n     ANNEX B - CHECKSUM ALGORITHMS\n     (This annex\
    \ is provided for information for implementors  and  is\n     not an integral\
    \ part of the body of the standard.)\n     B.1  SYMBOLS\n     The following symbols\
    \ are used:\n        C0  variables used in the algorithms\n        C1\n      \
    \  i   number (i.e. position) of an octet within  the  TPDU  (see\n          \
    \  12.1)\n        n   number (i.e. position) of the first octet of the  checksum\n\
    \            parameter\n        L   length of the complete TPDU\n        X   value\
    \ of the first octet of the checksum parameter\n        Y   value of the second\
    \ octet of the checksum parameter.\n     B.2  ARITHMETIC CONVENTIONS\n     Addition\
    \ is performed in one of the two following modes:\n        a)  modulo 255 arithmetic;\n\
    \        b)  one's  complement  arithmetic  in  which  if  any  of  the\n    \
    \        variables  has the value minus zero (i.e. 255) it shall be\n        \
    \    regarded as though it was plus zero (i.e. 0).\n     B.3  ALGORITHM FOR GENERATING\
    \ CHECKSUM PARAMETERS\n     B.3.1  Set up the complete TPDU with the value  of\
    \  the  checksum\n     parameter field set to zero.\n     B.3.2  Initialize C0\
    \ and C1 to zero.\n     B.3.3  Process each octet sequentially from i = 1 to L\
    \ by:\n        a)  adding the value of the octet to C0; then\n        b)  adding\
    \ the value of C0 to C1.\n     B.3.4  Calculate X and Y such that\n        X =\
    \ -C1 + (L-n).CO\n        Y =  C1 - (L-n+1).C0\n     B.3.5  Place the values \
    \ X  and  Y  in  octets  n  and  (n  +  1)\n     respectively.\n     [A Note describing\
    \ the above algorithm in  mathematical  notation\n     has been omitted from this\
    \ copy.]\n     B.4  ALGORITHM FOR CHECKING CHECKSUM PARAMETERS\n     B.4.1  Initialize\
    \ C0 and C1 to zero.\n     B.4.2  Process each octet of the TPDU sequentially\
    \ from i = 1  to\n     L by:\n        a)  adding the value of the octet to C0;\
    \ then\n        b)  adding the value of C0 to C1.\n     B.4.3  If, when all the\
    \ octets have  been  processed,  either  or\n     both  of  C0  and  C1  does\
    \ not have the value zero, the checksum\n     formulas in 6.17 have not been satisfied.\n\
    \     NOTE - The nature of  the  algorithm  is  such  that  it  is  not\n    \
    \ necessary to compare explicitly the stored checksum bytes.\n     Explanatory\
    \ Report\n     The Transport Layer Services and Protocols have been under  study\n\
    \     within  TC97/SC16  since  1979.   It  was  agreed  by SC16 at its\n    \
    \ meeting in Berlin, November 1980, that the Service  and  Protocol\n     documents\
    \ would be progressed concurrently.\n     At the SC16 meeting in Tokyo, June 1982,\
    \ authorization was  given\n     (Resolutions  10  and  11,  SC16  N  1233)  to\
    \  register both the\n     Transport  Service  Definition   and   the   Transport\
    \   Protocol\n     Specification  as Draft Proposals and to circulate them for\
    \ a 90-\n     day ballot.\n     Following the close of the letter ballot  an \
    \ Editing  Group  was\n     convened to integrate editorial comments and make\
    \ recommendations\n     regarding proposed technical  changes.   The  revised\
    \  texts  and\n     proposed recommendations were reviewed by SC16/WG6 at its\
    \ meeting\n     in Vienna, March 1983.  The revised text of the Transport Service\n\
    \     Definition  (SC16  N  1435) was accepted as presented whereas the\n    \
    \ revised  text  of  the  Transport  Protocol  (SC16  N  1433)  was\n     subjected\
    \  to  an  additional 60-day ballot.  Consistent with the\n     SC16 decision\
    \ regarding the parallel progression of both DPs, the\n     Transport   Service\
    \  Definition  was  held  in  abeyance  pending\n     acceptance by SC16 of the\
    \ revised Transport Protocol  (Second  DP\n     8073).\n     A second Editing\
    \ Group was  convened  in  Paris,  July  1983,  to\n     review  comments  submitted\
    \  on  Second DP 8073.  The Minutes and\n     Report of this meeting are documented\
    \ in SC16 N1575  and  N  1574\n     respectively.   The  two  negative votes (DIN\
    \ and NNI) were given\n     full consideration.  The NNI concerns have been fully\
    \ covered  in\n     the revised text prepared by the Editing Group.  The DIN concerns\n\
    \     have been taken into account  and  incorporated  in  their  large\n    \
    \ majority.\n     Upon the recommendation of the Editing Group, DP 8072 and DP\
    \ 8073\n     are  forwarded  for registration as Draft International Standards\n\
    \     and letter ballot of ISO Member Bodies.\n"
