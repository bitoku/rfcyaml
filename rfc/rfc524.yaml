- title: __initial_text__
  contents:
  - '                         A Proposed Mail Protocol

    '
- title: AUTHOR'S INTENT
  contents:
  - "AUTHOR'S INTENT\n   This is the document I offered in (15146,) to write.  It's\
    \ a proposed\n   specification for handling mail in the Network -- a Mail Protocol.\n\
    \   Main handling is currently implemented as two FTP commands, MAIL and\n   MLFL,\
    \ which permit an FTP user process to deliver a file or string of\n   text to\
    \ an FTP server process, designating it as mail to be made\n   available to a\
    \ user, identified by a local name, in its host.  The\n   protocol proposed here\
    \ is much richer than that, both in terms of the\n   functions it supports, and\
    \ in terms of the flexibility it provides.\n   Although one can (I think) and\
    \ might, implement software on the basis\n   of this document, this REALLY IS\
    \ a Request for Comments.  Comments,\n   questions, position papers are solicited.\
    \  There are, I'm sure, bugs\n   in the protocol specified here, and I hope that\
    \ readers will point\n   them out via RFC as they discover them.\n   Various members\
    \ of the Network community have, during the last few\n   months, pointed out to\
    \ me specific inadequacies in the existing mail\n   commands and asked me to be\
    \ conscious of them in designing a new\n   protocol.  I've tried to do that. \
    \ If anyone feels that his concern\n   wasn't properly dealt with here, or that\
    \ it slipped through the\n   cracks entirely (for which I apologize in advance),\
    \ I would\n   appreciate it if he would prod me once more.\n"
- title: INTRODUCTION
  contents:
  - "INTRODUCTION\n   THE MAIL PROTOCOL ENVIRONMENT\n      The Mail Protocol (MP)\
    \ is implemented by Mail user and server\n      processes, in keeping with the\
    \ model for previous high-level\n      protocols.  The Mail user and server processes\
    \ are further\n      specified to be also FTP user and server processes, respectively.\n\
    \      That is, MP is implemented as a set of commands accessible from\n     \
    \ within the FTP command space.\n      The MP command set is defined to lie conceptually\
    \ within a\n      subsystem, invoked from the FTP command space with the command\n\
    \      MAIL <CFLF>.\n         NOTE:  Since a command called 'MAIL' already exists\
    \ within the\n         FTP command space, the command name 'XMAIL' might substitute\n\
    \         for 'MAIL' while the current mail commands are being phased\n      \
    \   out.\n      The MP command set may or may not (according to the implementation\n\
    \      of a particular server) be implemented by a process distinct from\n   \
    \   that which implements FTP proper.\n      The following are implications of\
    \ the 'subsystem' concept, of\n      which the reader (and implementer) must be\
    \ aware:\n         (1) Names of MP commands are known only within the MP\n   \
    \      subsystem.  MP commands must (and should naturally) be rejected\n     \
    \    by the server if the user process presents them outside of the\n        \
    \ subsystem.\n         (2) Exit from the Mail subsystem (to the FTP command space)\
    \ is\n         effected with and only with the command EXIT <CRLF>.  FTP\n   \
    \      commands must be rejected by the server if the user presents\n        \
    \ them while inside the subsystem (i.e., before EXIT is issued).\n         (3)\
    \ The same command name may be assigned without ambiguity to\n         two entirely\
    \ different commands, provided that one lies within\n         the FTP command\
    \ space and the other within MP, the two being\n         distinguishable by their\
    \ contexts.  MP and FTP therefore do not\n         compete for command names,\
    \ and MP command names may be chosen\n         without regard for the environment\
    \ in which the subsystem\n         resides.\n         NOTE:  It so happens that\
    \ there are commands DEFINED within MP\n         which duplicate the functions\
    \ of FTP commands and bear the same\n         names.  The effective result is\
    \ that some commands are\n         explicitly allowed within MP.  The reader will\
    \ understand that\n         this fact is consistent with the conventions described\
    \ in 1-3\n         above, and that no ambiguities result.\n      The subsystem\
    \ concept (if not the name 'subsystem') is taken from\n      Mike Padlipsky's\
    \ Unified User Level Protocol (UULP), which the\n      author of the present document\
    \ strongly supports.  The fact that\n      MP is accessed from FTP, rather than\
    \ both FTP and MP being\n      accessed independently from a more general executive\
    \ program, is\n      simply a concession to the fact that FTP is widely implemented\
    \ and\n      UULP isn't.  The author hopes that protocol development will, in\n\
    \      the near future, begin to proceed along the lines exemplified by\n    \
    \  UULP.\n      MP conforms to FTP in general syntax.  In particular, commands\
    \ and\n      their responses are strings of NVT characters; command names are\n\
    \      limited to four or fewer, upper- or lower-case, alphameric\n      characters,\
    \ and are terminated by the character SP; commands are\n      generally terminated\
    \ with the TELNET New Line sequence (CR LF);\n      command responses contain\
    \ both numeric (process readable) and text\n      (human readable) portions. \
    \ Both reader and implementer are\n      referred to the FTP protocol document\
    \ for a detailed description\n      of such matters; no attempt has been made\
    \ to duplicate the\n      discussion in the present document.\n      The FTP protocol\
    \ document assigns those replies whose second digit\n      is '6' to RJE functions.\
    \  In like manner MP appropriates those\n      reply codes whose second digit\
    \ is '7' for reporting results\n      peculiar to its functions.  It is, however,\
    \ the author's position\n      that FTP, MP, and the RJE protocol are all best\
    \ implemented as\n      subsystems under a common UULP executive, in which case\
    \ a single\n      subset of the reply space could be used unambiguously by all\
    \ three\n      protocols (and any yet to be defined), since every reply would\n\
    \      implicitly be qualified by the name of the subsystem from which it\n  \
    \    emanates.\n   THE MAIL MODEL\n      MP defines mail to be text communicated\
    \ between users (both human\n      and processes) in less that (but ideally approaching)\
    \ real time.\n      The definition excludes so-called console-to-console\n   \
    \   communication, where users exchange information at the character\n      or\
    \ line level.\n      Pieces of mail are characterized by such attributes as title,\n\
    \      content, author, and recipient.  A piece of mail may be a one- or\n   \
    \   two-line message sent from one individual to another, a draft of a\n     \
    \ document sent by one individual to a design group for review, a\n      polished,\
    \ formal document sent from one group to another, a\n      message sent to a human\
    \ user by a process (e.g., an RJE server\n      process might notify a user by\
    \ Network Mail when his job has\n      completed), etc.  All such forms of communication\
    \ are mail and are\n      supported by MP.\n      Pieces of mail can be forwarded\
    \ from one location to another\n      Pieces of mail can be replied to.\n    \
    \  The identity of the author of a piece of mail can be verified,\n      avoiding\
    \ forgery and misrepresentation.\n      Pieces of mail can be permanently recorded,\
    \ assigned a long-term\n      identifier by which they can be forever be retrieved\
    \ for\n      reference, and entered in catalogs.  And access to such recorded\n\
    \      mail can be restricted to a specified subset of the user\n      community.\n\
    \      Some hosts accept mail whose recipients reside elsewhere in the\n     \
    \ Network, and assume responsibility for delivering the mail to them\n      (worrying\
    \ about retrying delivery when hosts are down, etc.), and\n      acknowledging\
    \ its delivery to the sender.\n      The picture being painted for the reader\
    \ is one in which processes\n      cooperate in various ways to flexibly move\
    \ and manage Network\n      mail.  The author claims (without proof, of course)\
    \ that the\n      picture will in the future get yet more complicated, but that\
    \ the\n      proposal specified here can be conveniently enlarged to handle\n\
    \      that picture too.\n"
- title: ORGANIZATION OF THIS DOCUMENT
  contents:
  - "ORGANIZATION OF THIS DOCUMENT\n   The rest of this document consists of the following\
    \ components:\n      GLOSSARY\n         The concepts introduced briefly in the\
    \ section above are more\n         formally defined, and their manner of representation\
    \ in the\n         protocol specified.\n      MP FUNCTIONS\n         The command\
    \ sequence is defined by which a user process\n         initiates each of the\
    \ logical functions (e.g., Distribution,\n         Recording, Delivery) which\
    \ can be performed by a Mail server\n         process.\n      EXAMPLE\n      \
    \   An example of the command-response exchange between a user and\n         server\
    \ is given.\n      COMMAND SUMMARY\n         A summary of MP commands is given.\n\
    \      COMMAND REPLIES\n         Reply code assignments are given and briefly\
    \ explained.\n      FORMAL SYNTAX\n         The formal syntax of the command language\
    \ is specified.\n   In all sections but the last (i.e., the formal syntax presentation),\n\
    \   verbose keyword forms are employed, in the interests of clarity.\n   These\
    \ verbose forms have no existence anywhere but in this document;\n   in implementing\
    \ a Mail user or server process, the terse keyword\n   forms which appear in the\
    \ formal syntax presentation are to be\n   employed\n"
- title: GLOSSARY
  contents:
  - "GLOSSARY\n   Terms are listed here in alphabetical order.  Words or phrases which\n\
    \   appear in the definitions with initial letters capitalized are\n   themselves\
    \ formally defined elsewhere in the glossary.\n   ACCESS LIST (for a piece of\
    \ Recorded Mail)\n      That set of individuals with access to a piece of Recorded\
    \ Mail,\n      and for each such individual, the type(s) of access granted to\n\
    \      him.\n      An Access List is represented in the Protocol as a series of\n\
    \      command pairs (juxtaposed in the command stream), each pair\n      consisting\
    \ of an ACCESS command followed immediately (and\n      optionally) by an ACCESSTYPES\
    \ command.  Each pair of commands\n      corresponds to one individual in the\
    \ set.\n         ACCESS <individual> <CA>\n         ACCESSTYPE <accesstypes> <CA>\n\
    \            Command arguments identify the Individual to whom access is\n   \
    \         granted, and specify the kind(s) of access allowed him.\n          \
    \  Either Read Access, Controlling Access, or both may be\n            granted.\n\
    \            If no Individual is specified, All is implied.  In the\n        \
    \    absence of an explicit ACCESSTYPES command, one with only\n            Read\
    \ Access specified is to be assumed.\n         In the absence of an explicit Access\
    \ List, one granting Read\n         Access to All and Controlling Access to the\
    \ Author(s) and the\n         Clerk is to be assumed.\n   ACKNOWLEDGMENT (for\
    \ a piece of Mail)\n      A form of Unrecorded Mail, generated by a Distribution\
    \ Agent,\n      whose Recipient is the Monitor for a previous piece of Mail, which\n\
    \      acknowledges Delivery -- successful or otherwise -- to the\n      Recipient(s)\
    \ of that first piece of Mail.\n      An Acknowledgment bears the Serial Number\
    \ of the Mail it\n      acknowledges, as the Reference Serial Number.\n   ACKNOWLEDGMENT\
    \ CONDITION (for Acknowledgments)\n      The attribute of an Acknowledgment which\
    \ determines the\n      circumstances under which it will be generated by the\
    \ Distribution\n      Agent.\n      The following Acknowledgment Conditions are\
    \ defined:\n         ALWAYS\n            Acknowledgment is given when all Deliveries\
    \ are complete,\n            regardless of whether or not they are all completed\n\
    \            successfully.\n         FAILURE\n            Acknowledgment is given\
    \ when all Deliveries are complete if\n            and only if Delivery to one\
    \ or more Recipient(s) fails.\n         NEVER\n            An Acknowledgment is\
    \ never made.\n      An Acknowledgment Condition is represented in the Protocol\
    \ by the\n      command:\n   ACKCONDITION <ackcondition> <CA>\n      In the absence\
    \ of an explicit ACKCONDITION command, one with an\n      argument of FAILURE\
    \ is to be assumed.\n   ACKNOWLEDGMENT TYPE (for Acknowledgments and Progress\
    \ Reports)\n      The attribute of an Acknowledgment or Progress Report which\n\
    \      determines the nature of its Content.\n      The following Acknowledgment\
    \ Types are defined:\n         TERSE\n            The Content of a TERSE Acknowledgment\
    \ or Progress Report is\n            specified by the Protocol to be an unembellished\
    \ list of the\n            Mail's Recipient(s), and the current Delivery Status\
    \ for\n            each (except that those Recipient(s) whose Delivery Status\n\
    \            is SUCCESSFUL shall not be included in the list).\n            The\
    \ Content of a TERSE Acknowledgment is one or more\n            instances of the\
    \ following:\n               <deliverystatus> <individual> <CRLF>\n          \
    \  TERSE Acknowledgments and Progress Reports are intended to\n            be\
    \ process-readable.\n         VERBOSE\n            The Content of a VERBOSE Acknowledgment\
    \ or Progress Report\n            is not specified by the Protocol, but might\
    \ include a list\n            of those Recipient(s) to whom the Mail could not\
    \ be\n            delivered and why, the times at which Delivery was made to\n\
    \            others, etc.\n            VERBOSE Acknowledgments and Progress Reports\
    \ are intended to\n            be human-readable.\n      An Acknowledgment Type\
    \ is represented in the Protocol by the\n      command:\n         ACKTYPE <acktype>\
    \ <CA>\n      In the absence of an explicit ACKTYPE command, one with an\n   \
    \   argument of TERSE is to be assumed.\n   ALL\n      Every conceivable Individual.\n\
    \   AUTHOR (of a piece of Mail)\n      An Individual (there may be more than one)\
    \ given formal\n      recognition for having authored a piece of Mail.\n   AUTHOR\
    \ LIST (for a piece of Mail)\n      That set of Individuals who are Author(s)\
    \ of a piece of Mail.\n      An Author List is represented in the Protocol as\
    \ an Individual\n      List of type AUTHOR.\n   CATALOG (of Recorded Mail)\n \
    \     A named data base containing the Citation for each member of a set\n   \
    \   of logically related pieces of Recorded Mail.\n   CATALOG LIST (for a Piece\
    \ of Recorded Mail)\n      That set of Catalogs which each contain the Citation\
    \ for a piece\n      of Recorded Mail\n      A Catalog List is represented in\
    \ the Protocol as a series of\n      instances (juxtaposed in the command stream)\
    \ of the following\n      command.  Each instance corresponds to one Catalog in\
    \ the set.\n         CATALOG <catalog> <CA>\n   CITATION (for a piece of Recorded\
    \ Mail)\n      The Static and Dynamic Attributes of a piece of Recorded Mail.\n\
    \   CITATION COMPONENT\n      Any one of the Static or Dynamic Attributes which\
    \ comprise a\n      Citation.\n   CITATION RETRIEVAL (for a piece of Recorded\
    \ Mail)\n      The act of retrieving selected Citation Component(s).\n   CITATION\
    \ TEMPLATE\n      A specified subset of the Citation Component(s) for a piece\
    \ of\n      Recorded Mail.\n      A Citation Template is represented in the Protocol\
    \ by the command:\n         CITATIONTEMPLATE <citationtemp> <CA>\n      The argument\
    \ is a list of Citation Component(s).  In the absence\n      of an explicit CITATIONTEMPLATE\
    \ command (or if the argument is\n      null), one specifying Content only is\
    \ to be assumed.\n   CLERK\n      That Individual who prepares a piece of Mail\
    \ for Recording,\n      Distribution, or Delivery.  Conceptually, the Individual\
    \ with\n      proof-reading responsibility for the piece of Mail.\n      A Clerk\
    \ is represented in the Protocol as an Individual List of\n      type CLERK and\
    \ length 1.\n   COMMENTS (for a piece of Mail)\n      An informal, perhaps verbose\
    \ description of the Content of a piece\n      of Mail, or any other information\
    \ the Author(s) wish to have made\n      accessible to the Recipient(s) of the\
    \ Mail.\n      Comments are represented in the Protocol by the command:\n    \
    \     COMMENTS <comments> <CA2>\n      In the absence of an explicit COMMENTS\
    \ command, one with a null\n      argument is to be assumed.\n   CONTENT (of a\
    \ piece of Mail)\n      It's text.\n      Content is represented in the protocol\
    \ by either of the two\n      commands below:\n         FILE <CA>\n          \
    \  The FILE command implies that the Content of the Mail will\n            be\
    \ transmitted (immediately) as a file using the FTP data\n            transfer\
    \ commands (e.g., BYTE, SOCK, TYPE) currently in\n            effect.  FILE is\
    \ exactly equivalent in use to an FTP STOR\n            command (in its use of\
    \ data transfer commands, in its\n            establishment of the data connection,\
    \ etc.), except that no\n            pathname is required, and the server, rather\
    \ than depositing\n            the transmitted file in his file system, disposes\
    \ of it in a\n            manner appropriate for Mail.\n         TEXT <string>\
    \ <CA2>\n            The TEXT command implies that the Content of the Mail\n \
    \           follows on the TELNET connection as a series of lines, each\n    \
    \        delimited from the preceding one by CR LF, and terminated\n         \
    \   finally by a CA2.\n   CONTROLLING ACCESS (to a piece of Recorded Mail)\n \
    \     The right of an Individual to modify a Dynamic Attribute of a\n      piece\
    \ of Recorded Mail.\n      Recording Agents permit an Individual to modify a Dynamic\n\
    \      Attribute of a piece of Recorded Mail if and only if he can\n      properly\
    \ identify himself as someone having Controlling Access to\n      that Mail.\n\
    \   CREATION DATE (of a piece of Mail)\n      The date and time at which the final\
    \ draft of a piece of Mail is\n      completed by the Clerk before he releases\
    \ it to a Delivery,\n      Distribution, or Recording Agent for further processing.\
    \  A single\n      Creation Date is associated with each piece of Mail.  In general,\n\
    \      this date is different from the Delivery or Recording Date, since\n   \
    \   Mail often must be queued (for another host to come up) within the\n     \
    \ Delivery, Distribution, or Recording Agent's host before Delivery\n      of\
    \ Recording can occur.\n      A Creation Date is represented in the Protocol by\
    \ the command:\n         CREATIONDATE <datetime> <CA>\n   CUTOFF INTERVAL (for\
    \ Distribution of a piece of Mail)\n      That period of time, measured from the\
    \ Distribution Date, after\n      which the Distribution Agent is to abandon Delivery\
    \ attempts for\n      those Recipient(s) to whom Delivery has not yet been effected.\n\
    \      A Cutoff Interval is represented in the Protocol by the command:\n    \
    \     CUTOFF <interval> <CA>\n      In the absence of an explicit CUTOFF command,\
    \ one specifying an\n      Interval of 7 days is to be assumed.\n   DELIVERY (of\
    \ a piece of Mail)\n      The act of transmitting a piece of Mail to the host\
    \ of one of it's\n      Recipient(s).\n   DELIVERY AGENT\n      A process which\
    \ effects Delivery of a piece of Mail.  A\n      Distribution Agent is by nature\
    \ also a Delivery Agent.\n   DELIVERY DATE (of a piece of Mail to one of its Recipient(s))\n\
    \      The date and time at which a piece of Mail is Delivered by the\n      Delivery\
    \ Agent to a Recipient's system.  A multitude of Delivery\n      Dates, one for\
    \ each Recipient, are associated with each piece of\n      Mail.\n   DELIVERY\
    \ STATUS (for a piece of Mail with respect to a Recipient)\n      A measure of\
    \ the extent to which a Delivery Agent has been\n      successful, at a given\
    \ point in time, in Delivering a piece of\n      Mail to one of its Recipient(s).\
    \  A multitude of Delivery Status',\n      one for each Recipient, are associated\
    \ with each piece of Mail.\n      The following Delivery Status' are defined:\n\
    \         FAILED\n            Delivery was rejected by the Recipient's system\
    \ (e.g., the\n            connection request was rejected, the Mail server process\n\
    \            doesn't support Delivery, the Recipient was not recognized\n    \
    \        by the server).\n         SUCCESSFUL\n            Delivery was accomplished\
    \ successfully.\n         TIMED OUT\n            Either the Recipient's host was\
    \ disconnected from the Net at\n            every Delivery attempt, or no Mail\
    \ server process has ever\n            responded to the connection attempt.  Hope\
    \ of Delivery has\n            been abandoned.\n         WAITING\n           \
    \ Either the Recipient's host has been disconnected from the\n            Net\
    \ at every Delivery attempt, or no Mail server process has\n            yet responded\
    \ to the connection attempt.  Delivery attempts\n            are continuing periodically.\n\
    \         UNATTEMPTED\n            No delivery attempt has yet been made.\n  \
    \ DELIVERY TYPE (for a Delivery)\n      The nature of the piece of Mail being\
    \ delivered.\n      The following Delivery Types are defined:\n         FORWARD\n\
    \            A Delivery of type FORWARD represents a piece of Recorded or\n  \
    \          Unrecorded Mail which is being Forwarded.\n         MAIL\n        \
    \    A Delivery of type MAIL represents a piece of Recorded or\n            Unrecorded\
    \ Mail whose ultimate source is an Individual.\n            This is the \"normal\"\
    \ Delivery type.\n         NEGATIVE ACKNOWLEDGMENT\n            A Delivery of\
    \ type NEGATIVE ACKNOWLEDGMENT represents a\n            piece of Unrecorded Mail\
    \ generated by a Distribution Agent\n            and acknowledging unsuccessful\
    \ or partially unsuccessful\n            Delivery of a previous piece of Mail\
    \ (identified by\n            Reference Serial Number) to it's Recipient(s). \
    \ The\n            Recipient for this piece of \"system\" Mail is the Monitor\
    \ for\n            the previous piece of Mail.\n         POSITIVE ACKNOWLEDGMENT\n\
    \            A Delivery of type POSITIVE ACKNOWLEDGMENT represents a\n       \
    \     piece of Unrecorded Mail generated by a Distribution Agent\n           \
    \ and acknowledging successful Delivery of a previous piece of\n            Mail\
    \ (identified by Reference Serial Number) to it's\n            Recipient(s). \
    \ The Recipient for this piece of \"system\" Mail\n            is the Monitor\
    \ for the previous piece of Mail.\n         PROGRESS REPORT\n            A Delivery\
    \ of type PROGRESS REPORT represents a piece of\n            Unrecorded Mail generated\
    \ by a Distribution Agent and\n            reporting the Delivery of a previous\
    \ piece of Mail\n            (identified by Reference Serial Number) to it's\n\
    \            recipient(s).  The Recipient for this piece of \"system\" Mail\n\
    \            is the Monitor for the previous piece of Mail.\n         REPLY\n\
    \            A Delivery of type REPLY represents a piece of Recorded or\n    \
    \        Unrecorded Mail generated in reply (or pertaining) to a\n           \
    \ previous piece of Mail (identified by Reference Serial\n            Number).\n\
    \      Delivery Type is represented in the Protocol by the command:\n        \
    \ DELIVERYTYPE <deliverytype> <CA>\n      In the absence of an explicit DELIVERYTYPE\
    \ command, one with\n      argument of MAIL is to be assumed.\n   DISTRIBUTE DATE\
    \ (for a piece of Mail)\n      The date and time at which a piece of Mail is presented\
    \ to a\n      Distribution Agent for Distribution.\n   DISTRIBUTION (of a piece\
    \ of Mail)\n      The act of Delivering a piece of Mail to its Recipient(s).\n\
    \      Distribution can be effected by either the Clerk's Delivery Agent,\n  \
    \    or by a Distribution Agent acting on his behalf.\n   DISTRIBUTION AGENT\n\
    \      A Mail server process which acts as intermediary in the delivery\n    \
    \  process by accepting Mail for Recipient(s) in hosts other than its\n      own,\
    \ and then assuming responsibility for Delivering the Mail to\n      them and\
    \ returning Acknowledgment to the appointed Monitor.\n   DISTRIBUTION LIST\n \
    \     In the Delivery or Distribution of a piece of Mail, that set of\n      Individuals\
    \ who are to receive Delivery of the Mail.\n      In the Recording of Mail, that\
    \ set of Individuals who have\n      received formal and authorized Delivery of\
    \ a piece of Mail.  The\n      list is kept current by Distribution Agents.  Of\
    \ course, any\n      Individual with Read Access to the Mail can himself Deliver\
    \ it\n      informally to anyone he chooses without that fact's being\n      reflected\
    \ in the Distribution list.\n      A Distribution List is represented in the Protocol\
    \ as a series of\n      command quintuplets (juxtaposed in the command stream),\
    \ each\n      quintuplet consisting of a RECIPIENT command, followed immediately\n\
    \      (and optionally) by any or all of the following in the order\n      given:\
    \ a GENERALDELIVERY, a GREETING, a SIGNATURE, and a\n      DISPOSITION command.\n\
    \      Each quintuplet corresponds to one individual in the set.\n         RECIPIENT\
    \ <individual> <CA>\n         GENERALDELIVERY <CA>\n            This command is\
    \ appropriate only in the context of the\n            Delivery function.  If the\
    \ previous RECIPIENT command\n            illicits the reply:\n              \
    \ 474 Recipient unrecognized: is General Delivery\n            OK?\n         \
    \   the issuance of the GENERALDELIVERY command constitutes\n            consent\
    \ to proceed with General Delivery to that Recipient.\n            If no such\
    \ consent is given, the RECIPIENT command stands\n            rejected.  Unsolicited\
    \ (i.e., unprompted for) GENERAL\n            DELIVERY commands in the Distribution\
    \ List are treated by\n            the server as NOPs.\n         GREETING <greeting>\
    \ <CA>\n            The GREETING command specifies the Greeting to be seen by\n\
    \            the Recipient.\n            If the first quintuplet in the list contains\
    \ no GREETING\n            command, one with a null argument is assumed.  Thereafter,\n\
    \            in the absence of an explicit GREETING command, one\n           \
    \ identical to that for the previous quintuplet is assumed.\n         SIGNATURE\
    \ <signature> <CA>\n            The SIGNATURE command specifies the Signature\
    \ to be seen by\n            the Recipient.\n            If the first quintuplet\
    \ in the list contains no SIGNATURE\n            command, one with a null argument\
    \ is assumed.  Thereafter,\n            in the absence of an explicit SIGNATURE\
    \ command, one\n            identical to that for the previous quintuplet is assumed.\n\
    \         DISPOSITION <disposition> <CA>\n            The DISPOSITION command\
    \ identifies the intent with which the\n            Mail is Delivered to the Recipient\
    \ by the Author(s), and may\n            take any, all, or none of the following\
    \ as arguments:\n               RSVP\n                  The Author(s) request\
    \ a Reply from the Recipient.\n               ACTION\n                  The Author(s)\
    \ expect some action on the part of the\n                  Recipient.  If ACTION\
    \ doesn't appear, then the Mail is\n                  intended for the Recipient's\
    \ information only.\n               INTERRUPT\n                  The Author(s)\
    \ declare that examination of the Mail by\n                  the Recipient is\
    \ urgent.  In such cases, the\n                  Recipient's Mail server process\
    \ may, upon Delivery,\n                  choose to interrupt the Recipient if\
    \ he happens to be\n                  logged in at a terminal.\n            No\
    \ specific action in response to the presence of any of\n            these arguments\
    \ is required; the server is free if he likes\n            to treat DISPOSITION\
    \ commands as NOPs.\n            The absence of a DISPOSITION command implies\
    \ one with no\n            arguments (i.e., for the Recipient's information only,\
    \ no\n            Reply required, and not urgent).\n   DYNAMIC ATTRIBUTES (of\
    \ a piece of Recorded Mail)\n      Those attributes of a piece of Recorded Mail\
    \ -- Distribution List,\n      Access List, and Catalog List -- which, though\
    \ given initial\n      values at Recording Time, can always be modified by an\
    \ Individual\n      with Controlling Access to the piece of Mail.\n   FORWARDING\
    \ (of Mail received for an Individual)\n      The act of transferring that set\
    \ of Mail which has been previously\n      Delivered to but not Read by an Individual,\
    \ to another Individual.\n      Users who are known at more than one host can\
    \ cause their unRead\n      Mailto be gathered in to a central location by performing\
    \ the\n      Forwarding function at each such host (both Individuals being, in\n\
    \      this case, instances of the same User).  Mail which has been\n      Forwarded\
    \ is considered to have been Read at its source.\n   FORWARDEE\n      That Individual\
    \ whose Delivered but UnRead Mail is to be\n      Forwarded.\n      A Forwardee\
    \ is represented in the Protocol as an Individual List\n      of type FORWARDEE\
    \ and length 1.\n   GENERAL DELIVERY (of a piece of Mail to an unrecognized Recipient)\n\
    \      The act on the part of a server of accepting Delivery of a piece\n    \
    \  of Mail on behalf of an intended Recipient whose name the server\n      doesn't\
    \ recognize.  The server retains the Recipient's name, and\n      makes it and\
    \ the other information provided by the user process\n      available to some\
    \ competent person, who attempts to make sense of\n      the Recipient's name.\
    \  If the Recipient is recognized, the Mail is\n      'hand' delivered to the\
    \ appropriate Individual.\n      General Delivery of a piece of Mail to one of\
    \ its intended\n      Recipient(s) is performed only after the server informs\
    \ the user\n      process of its intent and receives the user process' consent.\
    \  If\n      that consent is not given, or if the server doesn't implement\n \
    \     General Delivery, the server rejects the Delivery attempt for that\n   \
    \   Recipient.\n      Consent for General Delivery is represented in the Protocol\
    \ by the\n      command\n         GENERALDELIVERY <CA>\n   GREETING (for the Delivery\
    \ of a piece of Mail to a Recipient)\n      A short greeting to a Recipient of\
    \ a piece of Mail. 'Dear Dave' is\n      a valid and perhaps typical Greeting.\n\
    \      A Greeting is represented in the Protocol by the command:\n         GREETING\
    \ <greeting> <CA>\n   ID (for an Individual)\n      The password which an Individual\
    \ may have to present to a Mail\n      server process, to prove his identity.\n\
    \      An Id is represented in the Protocol by the command:\n         ID <id>\
    \ <CA>\n      Ids have nothing to do with accounting, and when required by a\n\
    \      server, they're required only to protect that server from forgery\n   \
    \   or misrepresentation.\n   INDIVIDUAL\n      An instance of a User, identified\
    \ by NIC Ident, or by the\n      combination of host and Mailbox Name.\n   INDIVIDUAL\
    \ LIST (of type \"t\" and length \"n\")\n      A set of Individuals.\n      An\
    \ Individual List is represented in the Protocol as a series of\n      \"n\" command\
    \ pairs (juxtaposed in the command stream), each pair\n      consisting of a \"\
    t\" command, followed immediately by an ID\n      command.  Each pair corresponds\
    \ to one Individual in the set.\n      The ID command is given by the Mail user\
    \ process at the option of\n      the Mail server process; and whenever the server\
    \ requires it, he\n      must prompt for it with an appropriate reply to the preceding\
    \ \"t\"\n      command.  If no such prompt is given, the user process is not\n\
    \      obliged to provide the ID command, but may if it chooses, in which\n  \
    \    case the server is obliged to treat it as if it had been prompted\n     \
    \ for and found correct.\n      The ID command is a mechanism by which the server\
    \ can assure\n      himself that the user process is not acting without proper\n\
    \      authorization from the Individual(s) involved, i.e., a mechanism\n    \
    \  by which a server can protect himself against forgery,\n      misrepresentation,\
    \ etc.\n         \"t\" <individual> <CA>\n         ID <id> <CA>\n   MAIL\n   \
    \   A body of text communicated from one set of Individual(s) to\n      another,\
    \ in less than (but ideally approaching) real time.\n   MAILBOX NAME\n      The\
    \ name a User employs at a host to send and receive Mail.\n   MONITOR (for a piece\
    \ of Mail)\n      The Individual who is the recipient for Acknowledgments and\n\
    \      Progress Reports.\n      A Monitor is represented in the Protocol as an\
    \ Individual List of\n      type MONITOR and length 1.\n      Monitor defaults\
    \ to the Clerk if not explicitly specified.\n   PROGRESS REPORT (for a piece of\
    \ Mail)\n      A form of Unrecorded Mail, generated periodically during the\n\
    \      distribution process by a Distribution Agent, whose Recipient is\n    \
    \  the Monitor for a previous piece of Mail, and whose Content is a\n      list\
    \ of the Recipient(s) and the current Delivery Status for each.\n      A Progress\
    \ Report bears the Serial Number of the Mail whose status\n      it reports, as\
    \ the Reference Serial Number.\n   PROTOCOL\n      The Mail Protocol (MP).\n \
    \  READ (a piece of previously-Delivered Mail)\n      The act, on the part of\
    \ the User, of examining a piece of\n      Delivered Mail.\n   READ ACCESS (to\
    \ a piece of Recorded Mail)\n      The right of an Individual to retrieve the\
    \ Content of a piece of\n      Recorded Mail.\n      Recording Agents permit an\
    \ Individual to retrieve the Content of a\n      piece of Recorded Mail if and\
    \ only if he can properly identify\n      himself as someone having Read Access\
    \ to that Mail.  An Individual\n      can retrieve the Citation (except Content)\
    \ from the Recording\n      Agent independently of whether or not he has Read\
    \ Access to the\n      Mail.\n   READ DATE (of a piece of Mail for one of its\
    \ Recipient(s))\n      The date and time, necessarily following Delivery, at which\
    \ a\n      piece of Mail is Read by a Recipient.  A multitude of Read Dates,\n\
    \      one for each Recipient, are associated with each piece of Mail.\n   RECIPIENT\
    \ (of a piece of Mail)\n      An Individual who has or is to receive Delivery\
    \ of a piece of\n      Mail.\n   RECORDED MAIL\n      A piece of Mail whose Citation\
    \ is available on a long-term\n      (indefinite) basis from a Recording Agent.\n\
    \   RECORDING\n      The service provided by a Recording Agent.\n   RECORDING\
    \ AGENT\n      A Mail server process which accepts Mail, permanently Records its\n\
    \      Citation, and assigns a pathname by which that information can at\n   \
    \   any time be retrieved by an Individual with appropriate access.\n   RECORDING\
    \ DATE\n      The date and time at which a piece of Mail is presented to a\n \
    \     Recording Agent for Recording.  A single Recording Date is\n      associated\
    \ with each piece of Recorded Mail.\n   REFERENCE SERIAL NUMBER (for an Acknowledgment,\
    \ Progress Report, or\n      Reply)\n      The Serial Number of the piece of Mail\
    \ to which an Acknowledgment,\n      Progress Report, or Reply refers.\n     \
    \ A Reference Serial Number is represented in the protocol by the\n      command:\n\
    \         REFERENCESERIAL <serialnumber> <CA>\n      In the absence of an explicit\
    \ REFERENCESERIAL command, no Serial\n      Number is to be assumed.\n   REPLY\
    \ (to a previous piece of Mail)\n      A piece of Recorded or Unrecorded Mail\
    \ whose Author(s) are\n      Recipient(s) of a previous piece of Mail, and which\
    \ replies or\n      pertains to that same piece of Mail and bears its Serial Number,\n\
    \      as the Reference Serial Number.\n   REPORT INTERVAL (for a Progress Report)\n\
    \      The interval between Progress Reports.\n      A Report Interval is represented\
    \ in the Protocol by the command:\n         REPORTINTERVAL <interval> <CA>\n \
    \     In the absence of an explicit REPORTINTERVAL command, one with an\n    \
    \  argument whose value is effectively infinite is to be assumed\n      (i.e.,\
    \ no Progress Reports are to be made).\n   REQUESTOR\n      The Individual on\
    \ whose behalf a Mail user process connects to and\n      interacts with a Mail\
    \ server process.\n      A Requestor is represented in the Protocol as an Individual\
    \ List\n      of type REQUESTOR and length 1.\n   SERIAL NUMBER (for a piece of\
    \ Mail)\n      A short-term identifier, assigned to a piece of Mail by the Clerk\n\
    \      (or his system), which accompanies Acknowledgments, Progress\n      Reports,\
    \ and Replies, and is used to correlate the latter with the\n      former.  The\
    \ lifetime of a Serial Number is conceptually from its\n      assignment by the\
    \ Clerk until the Delivery of the Recipient(s)\n      Reply(s) to the Author(s)\
    \ (or until their decision to send no\n      reply).\n      A serial Number is\
    \ represented in the Protocol by the command:\n         SERIAL <serialnumber>\
    \ <CA>\n      In the absence of an explicit SERIAL command, no Serial Number is\n\
    \      to be assumed.\n   SIGNATURE (for the delivery of a piece of Mail to a\
    \ Recipient)\n      A human-readable indication of the Author(s) of a piece of\
    \ Mail.\n      The string 'Jim and Dick' is a valid Signature.\n      A Signature\
    \ is represented in the Protocol by the command:\n         SIGNATURE <signature>\
    \ <CA>\n   STATIC ATTRIBUTES (of a piece of Recorded Mail)\n      Those attributes\
    \ of a piece of Recorded Mail -- Content, Title,\n      Comments, Author(s), Clerk,\
    \ and Creation Date -- which are forever\n      fixed at Recording Time, and hence\
    \ can never be modified.\n      Static Attributes can be independently specified\
    \ with commands\n      described elsewhere, or specified collectively by reference\
    \ to an\n      existing piece of Recorded Mail.  The command which follows\n \
    \     assigns to the current piece of Mail the Static Attributes of the\n    \
    \  piece of Recorded Mail it references, and is exactly equivalent to\n      an\
    \ appropriate set of TITLE, COMMENTS, etc.  commands.\n         LOCATION <fileaddr>\
    \ <CA>\n   TITLE (of a piece of Mail)\n      A concise description of the Content\
    \ of a piece of Mail.\n      A Title is represented in the Protocol by the command:\n\
    \         TITLE <title> <CA>\n      In the absence of an explicit TITLE command,\
    \ one with a null\n      argument is to be assumed.\n   UNRECORDED MAIL\n    \
    \  Mail which is never presented to a Recording Agent for permanent\n      storage\
    \ and cataloging, but which is simply Delivered to its\n      Recipient(s) by\
    \ a Delivery Agent.\n   UPDATE REQUEST (to a Recording Agent for a piece of Recorded\
    \ Mail)\n      A request made of a Recording Agent to add, replace, or delete\
    \ an\n      Individual from the Access or Distribution List for a piece of\n \
    \     Mail; or to add or delete a Catalog from the Catalog List.\n      An Update\
    \ Request is represented in the Protocol by the command:\n         UPDATETYPE\
    \ <updatetype> <CA>\n      followed immediately in the command stream by an Access,\n\
    \      Distribution or Catalog List.\n   USER\n      A process or human who sends\
    \ and/or receives Mail.\n   USER VERIFICATION\n      The act of verifying an ID\
    \ as that of a specified Individual.\n   USER VERIFICATION AGENT\n      A Mail\
    \ server process which performs User Verification\n"
- title: MP FUNCTIONS
  contents:
  - "MP FUNCTIONS\n   A MP function is the request by a Mail user process and the\n\
    \   subsequent performance by a server, of a major task related to the\n   management\
    \ of Mail.  The following functions are defined:\n      RECORDING\n      DELIVERY\n\
    \      DISTRIBUTION\n      FORWARDING\n      CITATION RETRIEVAL\n      UPDATE\
    \ CITATION\n      USER VERIFICATION\n   One might expect that within the Network\
    \ there would be just a few\n   Recording Agents (who implement the Recording,\
    \ Citation Retrieval,\n   and Update Citation functions); a few Distribution Agents\
    \ (who\n   implement the Distribution function); one or two User Verification\n\
    \   Agents (who implement the User Verification Function); and many hosts\n  \
    \ who implement the Delivery and Forwarding functions.\n   In general, a host\
    \ is free to implement any, all, or none of the\n   functions defined by the Protocol;\
    \ and a host is free to require a\n   login (for purposes of accounting) before\
    \ permitting a user process\n   access to any of the function(s) it has implemented.\n\
    \   An FTP server process who chooses to not implement MP or a particular\n  \
    \ MP function simply rejects the command that requests the\n   unimplemented server\
    \ with the reply:\n      400 Function not implemented.\n   A server who chooses\
    \ to require login before allowing access to the\n   MP subsystem or to an MP\
    \ function, simply rejects the command that\n   requests the charged-for service\
    \ with the reply:\n      332 Login first, please.\n   The functions defined in\
    \ MP are:\n      RECORDING\n         The Recording function is invoked with the\
    \ command:\n            RECORD <CA>\n         Once this command is given, the\
    \ user process shall provide the\n         following (in any order that suits\
    \ it):\n            (1)   Any Static Attributes desired.\n               Content\
    \ and Clerk are required.  Defaults for other\n               Static Attributes\
    \ (applied by the server if the\n               appropriate commands don't appear)\
    \ are as follows:\n                  Title or Comments as specified in the glossary.\n\
    \                  Author to the Clerk.\n                  Creation Date to the\
    \ Recording Date.\n            (2)   Initial values for any Dynamic Attributes\
    \ desired.\n               Defaults (applied by the server if the appropriate\n\
    \               commands don't appear) are as follows:\n                  Distribution\
    \ and Catalog Lists to null.\n                  Access List as specified in the\
    \ glossary.\n         The Recording function is terminated with either of the\n\
    \         commands:\n            EXIT <CA>    or    ABORT <CA>\n         EXIT\
    \ represents normal termination, and causes the server to\n         perform the\
    \ Recording function for which parameters have just\n         been given.  ABORT\
    \ represents abnormal termination and effects\n         exit from the function\
    \ with no action having been taken by the\n         server; the whole command\
    \ exchange, beginning with RECORD, is\n         therefore a NOP.\n      DELIVERY\n\
    \         The Delivery function is invoked with the command:\n            DELIVER\
    \ <CA>\n         Once this command is given, the user process shall provide the\n\
    \         following (in any order that suits it):\n            (1)   Any Static\
    \ Attributes desired.\n               Content is required.  Defaults for other\
    \ Static\n               Attributes (applied by the server if the appropriate\n\
    \               commands don't appear) are as follows:\n                  Title\
    \ or Comments as specified in the glossary.\n                  Clerk to null\n\
    \                  Author to the Clerk.\n                  Creation Date to the\
    \ Delivery Date.\n            (2)    Any Dynamic Attributes desired.\n       \
    \        Distribution List is required.  Defaults (applied by the\n          \
    \     server if the appropriate commands don't appear) are as\n              \
    \ follows:\n                  Catalog List to null\n                  Access List\
    \ as specified in the glossary.\n                     Both of these attributes\
    \ are for the Recipient's\n                     information only when presented\
    \ in the context of\n                     Delivery, so defaulting them to null\
    \ simply implies\n                     that the Clerk doesn't desire that they\
    \ be\n                     communicated to the Recipient.\n            (3)   Any\
    \ or all of the following optional parameters:\n               (a) Delivery Type\n\
    \               (b) Acknowledgment Type\n                  The specification of\
    \ this parameter is appropriate if\n                  and only if the Delivery\
    \ Type is POSITIVE or NEGATIVE\n                  ACKNOWLEDGMENT or PROGRESS REPORT.\
    \  In this context,\n                  Acknowledgment Type tells the server how\
    \ to interpret\n                  the Content of the Acknowledgment.\n       \
    \        (c) Serial Number\n                  The Serial Number assigned to the\
    \ piece of Mail being\n                  Delivered.  This parameter is inappropriate\
    \ unless the\n                  Delivery type is FORWARD (in which case the Serial\n\
    \                  Number is the one preserved from the previous\n           \
    \       Delivery), MAIL, or REPLY.\n               (d) Reference Serial Number\n\
    \                  The Serial Number assigned to the piece of Mail to\n      \
    \            which the current piece of Mail is either an\n                  Acknowledgment,\
    \ Progress Report, or Reply.  The\n                  specification of this parameter\
    \ is therefore\n                  inappropriate if the Delivery Type is MAIL.\n\
    \         The Delivery function is terminated with either of the\n         commands:\n\
    \            EXIT <CA>    or    ABORT <CA>\n         EXIT represents normal termination,\
    \ and causes the server to\n         perform the Delivery function for which parameters\
    \ have just\n         been given.  ABORT represents abnormal termination and effects\n\
    \         exit from the function with no action having been taken by the\n   \
    \      server; the whole command exchange, beginning with DELIVER, is\n      \
    \   therefore a NOP.\n      DISTRIBUTION\n         The Distribution function is\
    \ invoked with the command:\n            DISTRIBUTE <CA>\n         Once this command\
    \ is given, the user process shall provide the\n         following (in any order\
    \ that suits it):\n            (1) Any Static Attributes desired.\n          \
    \     Content is required.  Defaults for other Static\n               Attributes\
    \ (applied by the server if the appropriate\n               commands don't appear)\
    \ are as follows:\n                  Title or Comments as specified in the glossary.\n\
    \                  Clerk to null\n                  Author to the Clerk.\n   \
    \               Creation Date to the Delivery Date.\n            (2) Any Dynamic\
    \ Attributes desired.\n               Distribution List is required.  Defaults\
    \ (applied by the\n               server if the appropriate commands don't appear)\
    \ are as\n               follows:\n                  Catalog List to null\n  \
    \                Access List as specified in the glossary.\n                 \
    \    Both of these attributes are for the Recipient(s)\n                     information\
    \ only when presented in the context of\n                     Distribution, so\
    \ defaulting them to null simply\n                     implies that the Clerk\
    \ doesn't desire that they be\n                     communicated to the Recipient(s).\n\
    \            (3) Any or all of the following optional parameters:\n          \
    \        (a) Delivery Type\n                     MAIL, FORWARD, or REPLY only.\n\
    \                  (b) Serial Number\n                     The Serial Number of\
    \ the Mail being Distributed.\n                     The Distribution Agent will\
    \ relay this Serial\n                     Number to each Recipient at Delivery.\n\
    \                  (c) Reference Serial Number\n                     The Serial\
    \ Number of the piece of Mail to which the\n                     current piece\
    \ of Mail is a Reply.  The Distribution\n                     Agent will relay\
    \ this Serial Number to each\n                     Recipient at Delivery.  The\
    \ specification of this\n                     parameter is appropriate if and\
    \ only if the\n                     Delivery Type is REPLY.\n                \
    \  (d) Acknowledgment Condition\n                     An Acknowledgment is requested\
    \ from the\n                     Distribution Agent if and only if the\n     \
    \                Acknowledgment Condition is other than NEVER.\n             \
    \     (e) Acknowledgment Type\n                  (f) Cutoff Interval\n       \
    \           (g) Report Interval\n                     Progress Reports are requested\
    \ from the\n                     Distribution Agent if and only if this parameter\
    \ is\n                     specified explicitly.\n                  (h) Monitor\n\
    \                     This parameter is ignored unless either an\n           \
    \          Acknowledgment or Progress Reports (or both) are\n                \
    \     requested.\n            The Distribution function is terminated with either\
    \ of the\n            commands:\n               EXIT <CA>    or    ABORT <CA>\n\
    \            EXIT represents normal termination, and causes the server to\n  \
    \          perform the Distribution function for which parameters have\n     \
    \       just been given.  ABORT represents abnormal termination and\n        \
    \    effects exit from the function with no action having been\n            taken\
    \ by the server; the whole command exchange, beginning\n            with DISTRIBUTE,\
    \ is therefore a NOP.\n      FORWARDING\n         The Forwarding function is invoked\
    \ with the command:\n            FORWARD <CA>\n         Once this command is given,\
    \ the user process shall provide the\n         following (in any order that suits\
    \ it):\n            (1) Forwardee\n            (2) Distribution list\n       \
    \        This is the set of Individual(s) to whom the Mail is to\n           \
    \    be Forwarded.\n         The Forwarding function is terminated with either\
    \ of the\n         commands:\n            EXIT <CA>    or    ABORT <CA>\n    \
    \     EXIT represents normal termination, and causes the server to\n         perform\
    \ the Forwarding function for which parameters have just\n         been given.\
    \  ABORT represents abnormal termination and effects\n         exit from the function\
    \ with no action having been taken by the\n         server; the whole command\
    \ exchange, beginning with FORWARD, is\n         therefore a NOP.\n      CITATION\
    \ RETRIEVAL\n         The Citation Retrieval function is invoked with the command:\n\
    \            RETRIEVE <CA>\n         Once this command is given, the user process\
    \ shall provide the\n         following (in any order that suits it):\n      \
    \      (1) The pathname of the piece of Mail whose Citation is to\n          \
    \     be retrieved:\n               PATHNAME <pathname> <CA>\n            (2)\
    \ Any or all of the following optional parameters:\n               (a) Citation\
    \ Template\n               (b) Requestor\n                  This parameter is\
    \ required if and only if Content is\n                  requested and Read Access\
    \ happens not to be granted to\n                  All, in which case the server\
    \ verifies that the\n                  Requestor has Read Access to the piece\
    \ of Mail.\n               (c) FILE <CA>\n                  This command is appropriate\
    \ if and only if Content is\n                  requested.  The presence of this\
    \ command implies that\n                  the Content of the Mail is to be returned\
    \ to the user\n                  process (following the return on the TELNET connection\n\
    \                  of any other Citation Component(s) requested) as a\n      \
    \            file using the FTP data transfer commands (e.g., BYTE,\n        \
    \          SOCK, TYPE) currently in effect.  FILE is exactly\n               \
    \   equivalent in effect to an FTP RETR command (in its\n                  use\
    \ of data transfer commands, in its establishment of\n                  the data\
    \ connection etc.) except that no pathname is\n                  required.\n \
    \                 In the absence of a FILE command, Content is returned\n    \
    \              on the TELNET connection like any other Citation\n            \
    \      Component.\n                  The server returns the Citation Components\
    \ in the\n                  order requested by the user process (except that\n\
    \                  Content, if requested as a file, is always returned\n     \
    \             after the 'end of citation' indication), each as a\n           \
    \       reply whose numeric code is 172 and whose text is\n                  exactly\
    \ the command normally used to communicate that\n                  same parameter\
    \ to the server.  A reply whose numeric\n                  code is 173 terminates\
    \ the reply list.\n                  Title and Content, which (in general) may\
    \ each contain\n                  the TELNET New Line sequence (CR LF), are represented\n\
    \                  as continued replies, using the FTP reply continuation\n  \
    \                convention (see the FTP protocol document).  The first\n    \
    \              four characters of each reply line except the first\n         \
    \         and last are blanks inserted by the server which must\n            \
    \      be deleted by the user process to correctly recover\n                 \
    \ the value of the Title or Content.\n         The Citation Retrieval function\
    \ is terminated with either of\n         the commands:\n            EXIT <CA>\
    \    or    ABORT <CA>\n         EXIT represents normal termination, and causes\
    \ the server to\n         perform the Citation Retrieval function for which parameters\n\
    \         have just been given.  ABORT represents abnormal termination\n     \
    \    and effects exit from the function with no action having been\n         taken\
    \ by the server; the whole command exchange, beginning with\n         RETRIEVE,\
    \ is therefore a NOP.\n      UPDATE CITATION\n         The Update Citation function\
    \ is invoked with the command:\n            UPDATE <CA>\n         Once this command\
    \ is given, the user process shall provide the\n         following (in any order\
    \ that suits it):\n            (1) Requestor\n               This parameter is\
    \ required unless Controlling Access has\n               been granted to All,\
    \ in which case it is treated as a NOP\n               if given.  The server verifies\
    \ that the Requestor has\n               Controlling Access to the piece of Mail.\n\
    \            (2) One or more Update Requests\n         The Update Citation function\
    \ is terminated with either of the\n         commands:\n            EXIT <CA>\
    \    or    ABORT <CA>\n         EXIT represents normal termination, and causes\
    \ the server to\n         perform the Update Citation function for which parameters\
    \ have\n         just been given.  ABORT represents abnormal termination and\n\
    \         effects exit from the function with no action having been taken\n  \
    \       by the server; the whole command exchange, beginning with\n         UPDATE,\
    \ is therefore a NOP.\n      USER VERIFICATION\n            The User Verification\
    \ function is invoked with the command:\n               VERIFY <CA>\n        \
    \    Once this command is given, the user process shall specify\n            any\
    \ number of Requestors.\n            The server prompts for the Id for each, the\
    \ user process\n            provides it, and the server returns a reply whose\
    \ numeric\n            code is 272 is the Id is correct or 472 otherwise.\n  \
    \       The User Verification function is terminated with either of the\n    \
    \     commands:\n            EXIT <CA>    or    ABORT <CA>\n"
- title: EXAMPLE
  contents:
  - "EXAMPLE\n   In the example below, a short message is recorded for public access,\n\
    \   and distributed to a single recipient.  The user process is assumed\n   already\
    \ connected to the server.\n      Note: This would be the implementation of NIC\
    \ Journal Submission,\n      where the NIC is understood to be both a Recording\
    \ and\n      Distribution Agent.\n   Replies from the server are in brackets.\n\
    \      MAIL <CA>\n         The Mail system is invoked.\n         [261 RE DE DI\
    \ FW CI UP UV -- supported.]\n      REC <CA>\n         The Recording function\
    \ is invoked.\n         [200 OK.]\n      TITL SMFS Runs on TENEX 1.31 at the NIC\
    \ <CA>\n         A Title is given\n         [200 OK.]\n      TEXT The NIC came\
    \ up on TENEX 1.31 on 1-APR. <CRLF> I tried SMFS\n      here on the new monitor\
    \ and it <CRLF> works fine.  I don't\n      understand why I had <CRLF> problems\
    \ running your copy of the code\n      at <CRLF> BBN-TENEX.  Are you still unable\
    \ to reference <CRLF> the\n      same archived file from two different <CRLF>\
    \ TENEXs? <CA2>\n         The Content of the message is entered.\n         [200\
    \ OK.]\n      CLER WHITE@SRI-ARC <CR>\n         The Clerk is identified as White\
    \ at SRI-ARC.\n         [330 OK.  Now Id, please]\n      ID id <CA>\n        \
    \ His Id is supplied.\n         [200 OK.]\n      EXIT <CA>\n         Exit from\
    \ the Recording function is effected, and the pathname\n         '15490' is returned\
    \ by the Recording Agent for the now Recorded\n         Mail.\n         [270 15490\
    \ -- is assigned as the pathname.]\n      DIST <CA>\n         The Distribution\
    \ function is invoked.\n         [200 OK.]\n      LOC SRI-ARC 15490 <CA>\n   \
    \      The message just recorded is specified for Distribution.\n         [200\
    \ OK.]\n      RECI * DHC <CA>\n         The Recipient is specified via NIC Ident\
    \ to be Dave Crocker at\n         UCLA-NMC.\n         [200 OK.]\n      GREE Dave\
    \ <CA>\n         A Greeting is given.\n         [200 OK.]\n      DISP R\n    \
    \     A reply is requested.\n         [200 OK.]\n      SIGN Jim\n         The\
    \ message is signed.\n         [200 OK.]\n      ACKC A <CA>\n         Acknowledgment\
    \ of the Mail's Delivery is requested whether\n         Delivery succeeds or fails..\n\
    \         [200 OK.]\n      ACKT T <CA>\n         The Acknowledgment is to be terse.\n\
    \         [200 OK.]\n      CUT 1 D <CA>\n         If Delivery hasn't been effected\
    \ within 24 hours, the attempt\n         is to be abandoned (and an Acknowledgment\
    \ of failure returned).\n         The Monitor (to whom the Acknowledgment is sent)\
    \ is allowed to\n         default to the Clerk.\n         [200 OK.]\n      SERI\
    \ serial <CA>\n         A Serial Number is assigned for purposes of coordinating\n\
    \         Acknowledgment and Reply.  A desirable implementation of the\n     \
    \    sender's user and server processes is one in which the Serial\n         Number\
    \ is assigned by the user process, rather than by the\n         human user himself\
    \ in such a way that his server process can\n         automatically make the association\
    \ between original Mail, and\n         subsequent Acknowledgment and Reply.\n\
    \         [200 OK.]\n      EXIT <CA>\n         Exit from the Distribution function\
    \ is effected.\n         [200 OK.]\n      EXIT <CA>\n         Exit from the Mail\
    \ subsystem is effected.\n         [200 OK.]\n"
- title: COMMAND SUMMARY
  contents:
  - "COMMAND SUMMARY\n   Every command requires at least one reply from the server.\n\
    \   THOSE SPECIFIC TO MP\n      ABORT <CA>\n      ACCESS <individual> <CA>\n \
    \     ACCESSTYPES <accesstypes> <CA>\n      ACKCONDITION <ackcondition> <CA>\n\
    \      ACKTYPE <acktype> <CA>\n      AUTHOR <individual> <CA>\n      CATALOG <catalog>\
    \ <CA>\n      CITATIONTEMPLATE <citationtemp> <CA>\n      CLERK <individual> <CA>\n\
    \      COMMENTS <comments> <CA>\n      CREATIONDATE <datetime> <CA>\n      CUTOFF\
    \ <interval> <CA>\n      DELIVER <CA>\n      DELIVERYTYPE <deliverytype> <CA>\n\
    \      DISPOSITION <disposition> <CA>\n      DISTRIBUTE <CA>\n      EXIT <CA>\n\
    \      FILE <CA>\n      FORWARD <CA>\n      FORWARDEE <individual> <CA>\n    \
    \  GENERALDELIVERY <CA>\n      GREETING <greeting> <CA>\n      ID <id> <CA>\n\
    \      LOCATION <fileaddr> <CA>\n      MAIL <CA>\n      MONITOR <individual> <CA>\n\
    \      PATHNAME <pathname> <CA>\n      RECIPIENT <individual> <CA>\n      RECORD\
    \ <CA>\n      REFERENCESERIAL <serialnumber> <CA>\n      REPORTINTERVAL <interval>\
    \ <CA>\n      REQUESTOR <individual> <CA>\n      RETRIEVE <CA>\n      SERIAL <serialnumber>\
    \ <CA>\n      SIGNATURE <signature> <CA>\n      TEXT <string> <CA2>\n      TITLE\
    \ <title> <CA>\n      UPDATE <CA>\n      UPDATETYPE <updatetype> <CA>\n      VERIFY\
    \ <CA>\n   THOSE BORROWED FROM FTP\n      The following commands borrowed from\
    \ FTP are defined (also) as MP\n      commands to support the transfer of the\
    \ Content of a piece of Mail\n      in 'file' form.  The reader is referred to\
    \ the FTP protocol\n      document for a description of their use and syntax.\
    \  The borrowed\n      commands are:\n         BYTE, SOCK, PASV, TYPE, STRU, MODE,\
    \ REST, and SITE.\n      The following commands borrowed from FTP are defined\
    \ (also) as MP\n      commands to permit changes of accounting parameters within\
    \ the MP\n      subsystem.  The accounting parameters in force when the subsystem\n\
    \      is entered apply (if necessary) within the subsystem until\n      changed.\
    \  Values to which the parameters may have been changed\n      while in the subsystem\
    \ continue in effect upon return to the FTP\n      command space.  The borrowed\
    \ commands are:\n         USER, PASS, and ACCT.\n      The following miscellaneous\
    \ commands borrowed from FTP are defined\n      also as MP commands:\n       \
    \  HELP and NOOP.\n"
- title: COMMAND REPLIES
  contents:
  - "COMMAND REPLIES\n   This list is undoubtedly incomplete; some crucial reply code\n\
    \   assignments may be missing despite the author's attempt to foresee\n   the\
    \ kinds of interaction that might arise between user and server and\n   the responses\
    \ from the server that they would require.\n      172 <A Citation Component>\n\
    \          In response to the EXIT command which terminates the Citation\n   \
    \       Retrieval function.\n      173 End of citation.\n          Following a\
    \ list of 172 replies.\n      200 OK.\n          This is the standard, positive\
    \ acknowledgment used throughout\n          the Protocol.\n      270 <pathname>\
    \ -- is assigned as the pathname.\n          In response to the EXIT command which\
    \ terminates the Record\n          function.\n      271 <functionlist> -- supported.\n\
    \          In response to the MAIL command by which the user process\n       \
    \   gains entry to the Mail subsystem.  This response is\n          mandatory,\
    \ and from it the user process can quickly determine\n          what function(s)\
    \ are supported by the server.\n      272 Requestor is who he says he is.\n  \
    \        In response to an ID command in the User Verification\n          function.\
    \  This reply informs the user process that the Id\n          given is in fact\
    \ that of the Individual specified.\n      330 OK.  Now Id, please.\n        \
    \  In response to the first command in each pair of commands in\n          an\
    \ Individual List.  This reply requires the next command from\n          the user\
    \ process to be ID.\n      332 Login first, please.\n          In response to\
    \ any command which  invokes a Mail function\n          (e.g., RECORD, DISTRIBUTE,\
    \ DELIVER), or to the MAIL command\n          itself.  This reply implies that\
    \ the requested function is\n          supported by the server, but that the user\
    \ is required to\n          login before invoking it.\n      400 Function not\
    \ implemented.\n          In response to any command which invokes a Mail function\n\
    \          (e.g., RECORD, DISTRIBUTE, DELIVER), or to the MAIL command\n     \
    \     itself.  This reply implies that the requested function is not\n       \
    \   supported by the server.\n      431 Incorrect Id.\n          In response to\
    \ the ID command in an Individual List command\n          pair.  This reply implies\
    \ that the Id specified was incorrect.\n      440 <Error relayed from Recording\
    \ Agent>\n          In response to the LOCATION command.  This reply implies that\n\
    \          the server attempted to retrieve the specified piece of Mail\n    \
    \      from an FTP server but failed because it returned the error\n         \
    \ reply whose text is duplicated in the current reply.\n      470 No such pathname.\n\
    \          In response to the PATHNAME command (in the Citation Retrieval\n  \
    \        function).  This reply implies that the specified pathname is\n     \
    \     not recognized by the server.\n      471 No unRead Mail to Forward.\n  \
    \        In response to the EXIT command which terminates the\n          Forwarding\
    \ Function.\n      472 Requestor is NOT who he says he is.\n          In response\
    \ to an ID command in the User Verification\n          function.  This reply informs\
    \ the user process that the Id\n          given is NOT that of the Individual\
    \ specified.\n      473 You don't have Read Access to the Mail.\n          In\
    \ response to the LOCATION command, or to the PATHNAME\n          command in a\
    \ Citation Retrieval function.  This reply implies\n          that the Requestor\
    \ doesn't have Read Access to the piece of\n          Mail.\n      474 Recipient\
    \ unrecognized; is General Delivery OK?\n          In response to an instance\
    \ of the RECIPIENT command in a\n          Distribution List (in the context of\
    \ the Delivery function).\n          This response implies that the Recipient\
    \ in unrecognized, but\n          that the server will attempt General Delivery\
    \ to him if the\n          user process responds with a GENERALDELIVERY command;\n\
    \          otherwise the Recipient is rejected.\n      475 That Individual is\
    \ not at this host.\n      570 No such NIC Ident or Mailbox Name.\n          In\
    \ response to any command in which a NIC Ident or Mailbox\n          Name appears\
    \ as an argument.  This reply implies that the\n          Individual specified\
    \ does not exist.\n      571 Invalid host.\n          In response to any command\
    \ in which a host address or standard\n          host name appears as an argument.\
    \  This reply implies that no\n          such host exists.\n      572 No such\
    \ catalog.\n          In response to the CATALOG command.  This reply implies\
    \ that\n          no such Catalog exists.\n      Any '500' reply.\n   Any of the\
    \ error replies associated with FTP RETR/STOR commands.\n"
- title: FORMAL SYNTAX
  contents:
  - "FORMAL SYNTAX\n   The terse keyword forms to be employed in actually implementing\
    \ a\n   Mail user or server process are generated by deleting character(s)\n \
    \  from the corresponding verbose forms.  Those deleted characters are\n   included\
    \ but enclosed in brackets throughout the description which\n   follows.  Spaces\
    \ can be used freely between terminal elements of the\n   syntax, and in some\
    \ cases, at least one space must separate two\n   elements whose boundary could\
    \ not otherwise be distinguished.\n   <CA2>            ::= TELNET Go Ahead character\n\
    \   <CA>             ::= TELNET new line (CR LF)\n   <CRLF>           ::= CR LF\n\
    \   <accesstypes>    ::= <readaccess> <controlaccess>\n   <ackcondition>   ::=\
    \ A[LWAYS] | F[AILURE] | N[EVER]\n   <acktype>        ::= T[ERSE] | V[ERBOSE]\n\
    \   <action>         ::= A[CTION] | null\n   <catalog>        ::= <string>\n \
    \  <citationcomp>   ::= D[ISTRIBUTION]L[IST] | A[CESS]L[IST] |\n             \
    \           C[ATALOG]L[IST] | C[ON]T[ENT] |  T[ITLE] |\n                     \
    \   C[OM]M[ENTS] | AU[THOR] | CL[ERK] |\n                        C[REATION]D[ATE]\n\
    \   <citationtemp>   ::= <citationcomp> | <citationcomp>\n                   \
    \     <citationtemp>\n   <command>        ::= <shortbody> <CA> | <longbody> <CA2>\n\
    \   <comments>       ::= <string>\n   <controlaccess>  ::= C[ONTROLLING] | null\n\
    \   <count>          ::= decimal integer\n   <date>           ::= <dayofmonth>\
    \ / <month> / <year>\n   <datetime>       ::= <date> <time>\n   <dayofmonth> \
    \    ::= decimal integer, 1-31\n   <days>           ::= <count> D[AYS]\n   <deliverystatus>\
    \ ::= F[AILED] | S[UCCESSFUL] | T[IMED OUT] |\n                        W[AITING]\
    \ | U[NATTEMPTED]\n   <deliverytype>   ::= F[ORWARD] | M[AIL] | N[EGATIVE\n  \
    \                      ACKNOWLEDGMENT] | P[OSITIVE\n                        ACKNOWLEDGMENT]\
    \ | P[ROGRESS]R[EPORT]\n                        | R[EPLY]\n   <disposition>  \
    \  ::= <rsvp> <action> <interrupt>\n   <fileaddr>       ::= <host> <pathname>\n\
    \   <functionlist>   ::= <functiontype> | <functiontype>\n                   \
    \     <functionlist>\n   <functiontype>   ::= RE[CORDING] | DE[LIVERY] | DI[STRIBUTION]\
    \ |\n                        F[OR]W[ARDING] | CI[TATION RETEiEVAL] |\n       \
    \                 UP[DATE] | U[SER]V[ERIFICATION]\n   <globalname>     ::= * <nicident>\n\
    \   <greeting>       ::= <string>\n   <host>           ::= <hostname> | <hostaddress>\n\
    \   <hostaddress>    ::= decimal integer, 0-255\n   <hostname>       ::= standard\
    \ host name\n   <hour>           ::= decimal integer, 0-23\n   <hours>       \
    \   ::= <count> H[OURS]\n   <individual>     ::= <localname> | <globalname>\n\
    \   <interrupt>      ::= I[NTERRUPT] | null\n   <interval>       ::= <days> |\
    \ <hours> | <days> <hours>\n   <localname>      ::= <mailbox> @ <host> | <mailbox>\
    \ @\n      NOTE: Host defaults to that of the server\n   <longbody>       ::=\
    \ COM[MENTS] <comments> |\n                        TEXT <string>\n   <mailbox>\
    \        ::= <string>\n   <minute>         ::= decimal integer, 0-59\n   <month>\
    \          ::= decimal integer, 1-12\n   <nicident>       ::= <string>\n   <id>\
    \             ::= <string>\n   <pathname>       ::= <string>\n   <readaccess>\
    \     ::= R[EAD] | null\n   <rsvp>           ::= R[SVP] | null\n   <serialnumber>\
    \   ::= <string>\n   <shortbody>      ::= ABOR[T] |\n                        ACC[ESS]\
    \ <individual> |\n                        ACKC[ONDITION] <ackcondition> |\n  \
    \                      ACKT[YPE] <acktype> |\n                        AC[CESS]TY[PES]\
    \ <accesstypes> |\n                        AUTH[OR] <individual> |\n         \
    \               CAT[ALOG] <catalog> |\n                        CLER[K] <individual>\
    \ |\n                        CR[EATION]DA[TE] <datetime> |\n                 \
    \       CUT[OFF] <interval> |\n                        C[ITATION]TEM[PLATE] <citationtemp>\
    \ |\n                        DELI[VER] |\n                        DE[LIVERY]TY[PE]\
    \ <delivverytype> |\n                        DISP[OSITION] <disposition> |\n \
    \                       DIST[RIBUTE] |\n                        EXIT |\n     \
    \                   FILE |\n                        FOR[WARDE]E <individual> |\n\
    \                        FOR[WARD] |\n                        GEN[ERAL]D[ELIVERY]\
    \ |\n                        GREE[TING] <greeting> |\n                       \
    \ ID <ID> |\n                        LOC[ATION] <fileaddr> |\n               \
    \         MAIL |\n                        MON[ITOR] <individual> |\n         \
    \               PATH[NAME] <pathname> |\n                        RECI[PIENT] <individual>\
    \ |\n                        REC[ORD] |\n                        REQ[UESTO]R <individual>\
    \ |\n                        R[EFERENCE]SER[IAL] <serialnumber> |\n          \
    \              R[EPORT]INT[ERVAL] <interval> |\n                        SERI[AL]\
    \ <serialnumber> |\n                        SIGN[ATURE] <signature> |\n      \
    \                  TITL[E] <title> |\n                        UPDA[TE] |\n   \
    \                     UP[DATE]TY[PE] <updatetype> |\n                        VER[IFY]\n\
    \   <signature>      ::= <string>\n   <string>         ::= any non-zero number\
    \ of visible characters\n                        (in particular, CA and CA2 are\
    \ excluded)\n   <time>           ::= <hour> : <minute> <timezone>\n   <timezone>\
    \       ::= EST | EDT | CST | CDT | MST | MDT | PST |\n                      \
    \  PDT | GMT\n   <title>          ::= <string>\n   <updatetype>     ::= A[DD]\
    \ | R[EPLACE] | D[ELETE]\n   <year>           ::= full year in decimal (e.g.,\
    \ 1973)\n         [ This RFC was put into machine readable form for entry ]\n\
    \               [ into the online RFC archives by Root 2/98 ]\n"
