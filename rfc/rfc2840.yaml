- title: __initial_text__
  contents:
  - '                          TELNET KERMIT OPTION

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n\
    \   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\"\
    ,\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in\
    \ this\n   document are to be interpreted as described in RFC 2119.\n"
- title: ABSTRACT
  contents:
  - "ABSTRACT\n   This document describes an extension to the Telnet protocol to allow\n\
    \   the negotiation, coordination, and use of the Kermit file transfer\n   and\
    \ management protocol over an existing Telnet protocol connection.\n"
- title: CONTENTS
  contents:
  - "CONTENTS\n   1. MOTIVATION . . . . . . . . . . . . . . . . . . . . . . . .  2\n\
    \   2. DEFINITIONS. . . . . . . . . . . . . . . . . . . . . . . .  2\n   3. COMMANDS\
    \ AND CODES . . . . . . . . . . . . . . . . . . . .  3\n   4. COMMAND MEANINGS\
    \ . . . . . . . . . . . . . . . . . . . . .  3\n   5. KERMIT PROTOCOL IMPLICATIONS\
    \ . . . . . . . . . . . . . . .  5\n   6. EXAMPLES . . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  6\n   6.1. EXAMPLE 1. . . . . . . . . . . . . . . . .\
    \ . . . . . . .  6\n   6.2. EXAMPLE 2. . . . . . . . . . . . . . . . . . . . .\
    \ . . .  7\n   6.3. EXAMPLE 3. . . . . . . . . . . . . . . . . . . . . . . . \
    \ 8\n   6.4. EXAMPLE 4. . . . . . . . . . . . . . . . . . . . . . . .  9\n   6.5.\
    \ EXAMPLE 5. . . . . . . . . . . . . . . . . . . . . . . . 10\n   7. SECURITY\
    \ CONSIDERATIONS. . . . . . . . . . . . . . . . . . 11\n   8. REFERENCES . . .\
    \ . . . . . . . . . . . . . . . . . . . . . 11\n   9. AUTHORS' ADDRESSES . . .\
    \ . . . . . . . . . . . . . . . . . 11\n   10. FULL COPYRIGHT STATEMENT. . . .\
    \ . . . . . . . . . . . . . 12\n"
- title: 1. MOTIVATION
  contents:
  - "1. MOTIVATION\n   The Kermit protocol [KER] performs error-corrected file transfer\
    \ and\n   management over many types of connections, including terminal\n   connections,\
    \ among diverse hardware and software platforms.  It is\n   supported by a large\
    \ number of Telnet clients and is also widely\n   available on the Internet hosts\
    \ to which Telnet connections are made.\n   Traditionally, the Kermit protocol\
    \ connection is started manually by\n   a user, or perhaps by an automated script.\
    \  It is the user's\n   responsibility to start the Kermit server on one end of\
    \ the\n   connection and the Kermit client on the other, or to start a Kermit\n\
    \   \"send\" operation on one end and a Kermit \"receive\" on the other.\n   This\
    \ procedure grew out of necessity on ordinary direct-dial\n   connections, and\
    \ serves its purpose within the limitations of that\n   context.  But it introduces\
    \ timing and dexterity problems, and lacks\n   an effective way for each Kermit\
    \ program to determine the \"mode\" of\n   the other, or even its very presence,\
    \ and therefore to know with\n   certainty which operations and procedures are\
    \ legal on the connection\n   at any given time.\n   When Kermit services are\
    \ offered on the Internet, however, a strong\n   coupling can be established between\
    \ the two end applications by\n   having the Telnet protocol [TEL] serve as a\
    \ supervisor for Kermit\n   sessions, ensuring that a valid and known relationship\
    \ is always\n   obtained.  Kermit sessions are, in effect, embedded within Telnet\n\
    \   sessions, with Telnet providing the mechanism for starting and\n   stopping\
    \ them and defining which end is the Kermit client and which\n   is the Kermit\
    \ server, possibly changing the relationship in response\n   to user actions.\n"
- title: 2. DEFINITIONS
  contents:
  - "2. DEFINITIONS\n   Kermit server\n      A software program that is ready to accept\
    \ and act upon commands\n      in the form of well-defined Kermit packets [KER].\n\
    \   Kermit client\n      A software program that receives requests through its\
    \ user\n      interface from a human agent (or a script or other source) and\n\
    \      translates them to command packets, which it sends to a Kermit\n      server,\
    \ thus initiating a Kermit protocol transaction such as the\n      transfer of\
    \ one or more files.\n   Availability of Kermit server\n      For the purposes\
    \ of this document, a Kermit server is said to be\n      available if, through\
    \ the negotiations described herein, its\n      Telnet partner knows that it is\
    \ a Kermit server.\n"
- title: 3. COMMANDS AND CODES
  contents:
  - "3. COMMANDS AND CODES\n   Support for a Kermit server is negotiated separately\
    \ in each\n   direction, allowing Kermit service to be embedded in the Telnet\n\
    \   client, the Telnet server, or in both.  The proposed Telnet\n   extensions\
    \ are, therefore, symmetrical.\n   When the connection is first opened, Kermit\
    \ service is unavailable in\n   both directions.\n   The availability of Kermit\
    \ service is negotiated using the following\n   Telnet option:\n     KERMIT  \
    \         47 (assigned by IANA)\n   The state of the connection is controlled\
    \ by the following Telnet\n   subnegotiation function codes:\n     START-SERVER\
    \      0\n     STOP-SERVER       1\n     REQ-START-SERVER  2\n     REQ-STOP-SERVER\
    \   3\n     SOP               4\n     RESP-START-SERVER 8\n     RESP-STOP-SERVER\
    \  9\n"
- title: 4. COMMAND MEANINGS
  contents:
  - "4. COMMAND MEANINGS\n   The KERMIT OPTION is negotiated using the standard Telnet\
    \ mechanisms:\n   IAC WILL KERMIT\n      The sender of this command incorporates\
    \ a Kermit server and is\n      willing to negotiate its use.\n   IAC WONT KERMIT\n\
    \      The sender of this command does not incorporate a Kermit server or\n  \
    \    refuses to negotiate its use.\n   IAC DO KERMIT\n      The sender of this\
    \ command requests that the receiver negotiate\n      use of a Kermit server.\n\
    \   IAC DONT KERMIT\n      The sender of this command refuses to negotiate the\
    \ use of a\n      Kermit server.\n   Once WILL KERMIT is negotiated in a particular\
    \ direction,\n   subnegotiations are used to indicate or request a change in state\
    \ of\n   the connection, or to convey other information.  Subnegotiations may\n\
    \   be sent at any time.\n   IAC SB KERMIT START-SERVER\n      This command is\
    \ sent by the WILL side to indicate that the Kermit\n      server is now active;\
    \ that is, that client-initiated Kermit\n      packets will be accepted.\n   IAC\
    \ SB KERMIT STOP-SERVER\n      This command is sent by the WILL side to indicate\
    \ that the Kermit\n      server is no longer active, and therefore that it is\
    \ not ready to\n      accept Kermit packets.\n   IAC SB KERMIT REQ-START-SERVER\n\
    \      This command is sent by the DO side to request that the Kermit\n      server\
    \ be started.  It must be responded to with either RESP-\n      START-SERVER or\
    \ RESP-STOP-SERVER depending upon whether the\n      request was accepted.\n \
    \  IAC SB KERMIT REQ-STOP-SERVER\n      This command is sent by the DO side to\
    \ request that the Kermit\n      server be stopped.  It must be responded to with\
    \ either RESP-\n      START-SERVER or RESP-STOP-SERVER depending upon whether\
    \ the\n      request was accepted.\n   IAC SB KERMIT RESP-START-SERVER\n     \
    \ This command is sent by the WILL side in response to REQ-START-\n      SERVER\
    \ or REQ-STOP-SERVER to indicate that the Kermit server is\n      active after\
    \ the request was accepted or denied.\n   IAC SB KERMIT RESP-STOP-SERVER\n   \
    \   This command is sent by the WILL side in response to REQ-START-\n      SERVER\
    \ or REQ-STOP-SERVER to indicate that the Kermit server is\n      not active after\
    \ the request was accepted or denied.\n   IAC SB KERMIT SOP <octet>\n      Kermit\
    \ Start Of Packet.  The sender of this command specifies the\n      octet it will\
    \ use to mark the beginning of the Kermit packets it\n      sends.  This command\
    \ must be sent by each connection partner upon\n      the first WILL/DO pair to\
    \ allow unambiguous identification of\n      Kermit packets in the data stream.\
    \  This subnegotiation must be\n      sent whenever the Start of Packet character\
    \ changes.  The values\n      are restricted to ASCII C0 control characters other\
    \ than Carriage\n      Return and NUL.  The normal value is 1 (ASCII SOH).  The\
    \ two\n      Kermit partners normally use the same SOP, but may use distinct\n\
    \      ones if desired.\n   IAC SB KERMIT SOP is necessary to allow each Telnet\
    \ partner to\n   recognize subsequent incoming Kermit packets.  Data following\
    \ the SOP\n   is processed by the Kermit packet analyzer.  All other Kermit\n\
    \   protocol parameters are automatically negotiated within the Kermit\n   protocol\
    \ upon the initial exchange of Kermit packets [KER].\n   START-SERVER and STOP-SERVER\
    \ commands must be sent by the WILL side\n   whenever the state of the Kermit\
    \ server changes.  When WILL is\n   successfully negotiated the state of the WILL\
    \ side is assumed to be\n   STOP-SERVER.  If the server is active, the WILL side\
    \ must send a\n   START-SERVER to indicate the change in state.\n   The receiver\
    \ of a REQ-START-SERVER or REQ-STOP-SERVER is not required\n   to agree to the\
    \ request to change state.  The receiver must respond\n   with either RESP-START-SERVER\
    \ or RESP-STOP-SERVER to indicate the\n   state of the Kermit Server subsequent\
    \ to the request.  RESP-xxx-\n   SERVER is sent instead of xxx-SERVER to enable\
    \ the sender of REQ-\n   xxx-SERVER to distinguish between the WILL side's spontaneous\
    \ change\n   in state and the response to the DO side's request.\n   If the Kermit\
    \ server receives a Kermit packet commanding it to cease\n   Kermit service (such\
    \ as a FINISH, REMOTE EXIT or BYE packet [KER]),\n   it must send IAC SB KERMIT\
    \ STOP-SERVER if the command is accepted.\n   These rules ensure that the Telnet\
    \ client's user interface always\n   knows whether (and on which end) a Kermit\
    \ server is available, and\n   can therefore present the user only with valid\
    \ choices, and that\n   changes in state of one Telnet partner automatically switch\
    \ the other\n   to a complementary and valid state.\n   While it is possible for\
    \ a traditional telnet service (port 23) to\n   implement this option while at\
    \ the same time supporting the existing\n   remote shell access functionality,\
    \ it is not expected that this\n   option will be used in that manner.  Instead,\
    \ this option is\n   primarily meant for use with dedicated Kermit services such\
    \ as the\n   Internet Kermit Service (port 1649) [IKS].\n"
- title: 5. KERMIT PROTOCOL IMPLICATIONS
  contents:
  - "5. KERMIT PROTOCOL IMPLICATIONS\n   The Kermit protocol is described elsewhere\
    \ [KER].  It is an\n   extensible and self-configuring protocol, like Telnet,\
    \ and thus any\n   two proper Kermit implementations should interoperate automatically.\n\
    \   In Kermit, as in Telnet, one particular octet is distinguished.  In\n   Telnet's\
    \ case, it is IAC (decimal 255); in Kermit's it is the\n   character specified\
    \ by the IAC SB KERMIT SOP negotiation, normally\n   SOH (decimal 1, Ctrl-A).\
    \  All Kermit packets must begin with the SOP\n   and should not contain the SOP\
    \ character in an unquoted form.\n   Telnet protocol takes precedence over Kermit\
    \ protocol; whenever an\n   IAC is detected, it is processed as the beginning\
    \ of a Telnet command\n   unless quoted by another IAC.  Telnet commands can contain\
    \ any\n   characters at all, including the SOP octet, transparently to the\n \
    \  Kermit protocol, and in fact Telnet commands are not seen by the\n   Kermit\
    \ protocol at all.\n   Kermit protocol must follow Telnet NVT rules in each direction\
    \ when\n   Telnet binary mode is not negotiated for that direction.\n   If 8-bit\
    \ transparency is desired, Telnet binary mode may be\n   negotiated upon entry\
    \ to Kermit protocol in the appropriate\n   direction, and the previous mode (NVT\
    \ or binary) restored upon exit\n   from Kermit protocol.  Telnet binary mode\
    \ can result in more\n   efficient transfers, but is not required for data transfer,\
    \ since\n   Kermit protocol does not require a transparent path.\n"
- title: 6. EXAMPLES
  contents:
  - '6. EXAMPLES

    '
- title: 6.1. EXAMPLE 1
  contents:
  - "6.1. EXAMPLE 1\n   The Telnet server contains a Kermit server.  The Telnet client\n\
    \   includes Kermit protocol but does not implement the Telnet KERMIT\n   Option.\n\
    \   Telnet Server                   Telnet Client\n   -----------------------------\
    \   -----------------------------\n   <starts negotiations>\n   WILL KERMIT\n\
    \   DO KERMIT\n                                   <responds to negotiations>\n\
    \                                   DONT KERMIT\n                            \
    \       WONT KERMIT\n   From this point, no subnegotiations take place, and the\
    \ Kermit\n   client/server relationship is under manual control of the user of\
    \ the\n   Telnet client.\n"
- title: 6.2. EXAMPLE 2
  contents:
  - "6.2. EXAMPLE 2\n   The Telnet server contains a Kermit server and starts a Kermit\
    \ server\n   immediately after a connection is made.  The Telnet client does not\n\
    \   offer a Kermit server.\n   Telnet Server                   Telnet Client\n\
    \   -----------------------------   -----------------------------\n   <starts\
    \ negotiations>\n   WILL KERMIT\n   DO KERMIT\n                              \
    \     <responds to negotiations>\n                                   DO KERMIT\n\
    \                                   SB KERMIT SOP <0x01>\n                   \
    \                WONT KERMIT\n   SB KERMIT SOP <0x01>\n   <starts Kermit Server>\n\
    \   SB KERMIT START-SERVER\n   At this point the Telnet client knows that a Kermit\
    \ server is on the\n   other end of the connection, and so may customize its command\
    \ set or\n   menus to allow only those commands that are valid as a client of\
    \ a\n   Kermit server.\n"
- title: 6.3. EXAMPLE 3
  contents:
  - "6.3. EXAMPLE 3\n   Telnet server and Telnet client both contain a Kermit server.\
    \  Telnet\n   client Kermit server is active whenever its terminal emulator is\n\
    \   active, and not active at other times.  The Telnet server is used for\n  \
    \ shell access and does not start a Kermit Server unless requested.\n   Telnet\
    \ Server                 Telnet Client\n   ---------------------------   -----------------------------\n\
    \   <starts negotiations>\n   WILL KERMIT\n   DO KERMIT\n                    \
    \             <responds to negotiations>\n                                 DO\
    \ KERMIT\n                                 SB KERMIT SOP <0x01>\n            \
    \                     WILL KERMIT\n   SB KERMIT SOP <0x01>\n                 \
    \                <telnet client enters terminal emulator>\n                  \
    \               SB KERMIT START-SERVER\n                                 <client\
    \ leaves terminal emulator>\n                                 SB KERMIT STOP-SERVER\n\
    \                                 <client requests Kermit service>\n         \
    \                        SB KERMIT REQ-START-SERVER\n   <starts Kermit server>\n\
    \   SB KERMIT RESP-START-SERVER\n                                 <client sends\
    \ Kermit FINISH packet>\n   <stops Kermit server>\n   SB KERMIT STOP-SERVER\n\
    \                                 <client returns to terminal emulator>\n    \
    \                             SB KERMIT START-SERVER\n"
- title: 6.4. EXAMPLE 4
  contents:
  - "6.4. EXAMPLE 4\n   Telnet server and Telnet client both contain a Kermit server.\
    \  Telnet\n   client's Kermit server is active whenever the terminal emulator\
    \ is\n   active.  Telnet server is used solely for Kermit protocol and\n   automatically\
    \ starts a Kermit Server upon accepting the connection.\n   Telnet Server    \
    \             Telnet Client\n   ---------------------------   -----------------------------\n\
    \   <starts negotiations>\n   WILL KERMIT\n   DO KERMIT\n                    \
    \             <responds to negotiations>\n                                 DO\
    \ KERMIT\n                                 SB KERMIT SOP <0x01>\n            \
    \                     WILL KERMIT\n   SB KERMIT SOP <0x01>\n                 \
    \                <client enters terminal emulator>\n                         \
    \        SB KERMIT START-SERVER\n   <in response to DO>\n   SB KERMIT SOP <0x01>\n\
    \   SB KERMIT START-SERVER\n                                 <client restricts\
    \ command set to\n                                  Kermit protocol commands>\n\
    \                                 SB KERMIT STOP-SERVER\n                    \
    \             <client performs Kermit protocol\n                             \
    \     operations>\n                                 <client want to enter terminal\
    \ mode>\n                                 SB KERMIT REQ-STOP-SERVER\n   <Kermit\
    \ Server refuses>\n   SB KERMIT RESP-START-SERVER\n"
- title: 6.5. EXAMPLE 5
  contents:
  - "6.5. EXAMPLE 5\n   This is an example of something that should not be allowed\
    \ to happen.\n   Some Telnet clients that implement file transfer capabilities\
    \ are\n   designed to accept incoming connections.  In this situation the\n  \
    \ Telnet Client acts as a pseudo Telnet Server but without the ability\n   to\
    \ provide shell access or many of the other functions associated\n   with Telnet.\
    \  If both Telnet clients support this option and contain\n   a Kermit server\
    \ that is active during terminal emulation there is the\n   potential for a deadlock\
    \ situation if scripting is also supported.\n   This is because Telnet clients\
    \ that support a script language do not\n   process input while waiting for the\
    \ next command to be issued.\n   Telnet Client One             Telnet Client Two\n\
    \   ---------------------------   -----------------------------\n   <starts negotiations>\n\
    \   WILL KERMIT\n   DO KERMIT\n                                 <responds to WILL>\n\
    \                                 DO KERMIT\n                                \
    \ SB KERMIT SOP <0x01>\n   <in response to DO>\n   SB KERMIT SOP <0x01>\n   SB\
    \ KERMIT START-SERVER\n                                 <responds to DO>\n   \
    \                              WILL KERMIT\n                                 SB\
    \ KERMIT START-SERVER\n   <client one restricts command\n    set to Kermit protocol\
    \ and\n    disables Kermit Server>\n   SB KERMIT STOP-SERVER\n               \
    \                  <client two restricts command\n                           \
    \       set to Kermit protocol and\n                                  disables\
    \ Kermit Server>\n                                 SB KERMIT STOP-SERVER\n   At\
    \ this point both clients have restricted their command set to\n   Kermit Protocol\
    \ commands.  However, in both cases neither side is\n   processing input.  Therefore\
    \ the following restriction MUST be\n   enforced: A Telnet partner may not restrict\
    \ the command set if it\n   accepted the incoming connection.\n"
- title: 7. SECURITY
  contents:
  - "7. SECURITY\n   Implementors of this Telnet Option must enforce appropriate user\n\
    \   authentication and file system access restrictions in conjunction\n   with\
    \ their implementation of the Kermit file transfer protocol.\n   These issues\
    \ are beyond the scope of this document.\n"
- title: 8. REFERENCES
  contents:
  - "8. REFERENCES\n   [BCP] Bradner, S.,  \"Key words for use in RFCs to Indicate\n\
    \         Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [KER] da Cruz,\
    \ Frank, \"Kermit, A File Transfer Protocol\", Digital\n         Press/ Butterworth\
    \ Heinemann, Newton, MA, ISBN 0-932376-88-6\n         (1987).\n   [IKS] da Cruz,\
    \ F. and J. Altman, \"Internet Kermit Service\", RFC 2839,\n         May 2000.\n\
    \   [TEL] Postel, J. and J. Reynolds, \"Telnet Protocol Specification\",\n   \
    \      STD 8, RFC 854, May 1983.\n   [TEL] Postel, J. and J. Reynolds, \"Telnet\
    \ Option Specification\", STD\n         8, RFC 855, May 1983.\n"
- title: 9. AUTHORS' ADDRESSES
  contents:
  - "9. AUTHORS' ADDRESSES\n   Jeffrey E. Altman\n   EMail:jaltman@columbia.edu\n\
    \   Frank da Cruz\n   EMail: fdc@columbia.edu\n   The Kermit Project\n   Columbia\
    \ University\n   612 West 115th Street\n   New York NY 10025-7799\n   USA\n  \
    \ http://www.columbia.edu/kermit/\n   http://www.kermit-project.org/\n"
- title: 10.  Full Copyright Statement
  contents:
  - "10.  Full Copyright Statement\n   Copyright (C) The Internet Society (2000).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
