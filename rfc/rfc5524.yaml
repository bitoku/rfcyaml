- title: __initial_text__
  contents:
  - '            Extended URLFETCH for Binary and Converted Parts

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n"
- title: Abstract
  contents:
  - "Abstract\n   The URLFETCH command defined as part of URLAUTH provides a mechanism\n\
    \   for third parties to gain access to data held within messages in a\n   user's\
    \ private store; however, this data is sent verbatim, which is\n   not suitable\
    \ for a number of applications.  This memo specifies a\n   method for obtaining\
    \ data in forms suitable for non-mail\n   applications.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Conventions Used in This Document ...............................2\n  \
    \ 3. Extended URLFETCH ...............................................2\n    \
    \  3.1. Command Parameters .........................................3\n      3.2.\
    \ Response Metadata ..........................................3\n   4. Example\
    \ Exchanges ...............................................4\n   5. Formal Syntax\
    \ ...................................................6\n   6. IANA Considerations\
    \ .............................................7\n   7. Security Considerations\
    \ .........................................7\n   8. Acknowledgements ................................................7\n\
    \   9. References ......................................................8\n  \
    \    9.1. Normative References .......................................8\n    \
    \  9.2. Informative References .....................................8\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Although [URLAUTH] provides a URLFETCH command that can\
    \ be used to\n   dereference a URL and return the body-part data, it does so by\n\
    \   returning the encoded form, without sufficient metadata to decode.\n   This\
    \ is suitable for use in mail applications such as [BURL], where\n   the encoded\
    \ form is suitable, but not where access to the actual\n   content is required,\
    \ such as in [STREAMING].\n   This memo specifies a mechanism that returns additional\
    \ metadata\n   about the part, such as its [MEDIATYPE] type, as well as removes\
    \ any\n   content transfer encoding that was used on the body part.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [KEYWORDS].\n   Protocol examples are line-wrapped for clarity.\
    \  Protocol strings are\n   prefixed with C: and S: for client and server respectively,\
    \ and\n   elided data is represented by [...].  Implementors should note these\n\
    \   notations are for editorial clarity only.\n"
- title: 3.  Extended URLFETCH
  contents:
  - "3.  Extended URLFETCH\n   This extension is available in any IMAP server implementation\
    \ that\n   includes URLAUTH=BINARY within its capability string.\n   Such servers\
    \ accept additional, per-URL parameters to the URLFETCH\n   command and will provide,\
    \ upon request, specific data for each URL\n   dereferenced.\n"
- title: 3.1.  Command Parameters
  contents:
  - "3.1.  Command Parameters\n   The URLFETCH command is extended by the provision\
    \ of optional\n   parameters.  The extended URLFETCH command is distinct by enclosing\n\
    \   each URL and associated parameters in a parenthesized list.  Cases\n   where\
    \ there is an absence of any parameters or where the URL is sent\n   unenclosed\
    \ cause the command to behave precisely as specified in\n   [URLAUTH].\n   Similarly,\
    \ if the URL is invalid, the command will behave precisely\n   as specified in\
    \ [URLAUTH] and return a simple NIL.\n   Available parameters are:\n   BODYPARTSTRUCTURE\n\
    \      Provide a BODYPARTSTRUCTURE.\n      BODYPARTSTRUCTURE is defined in [CONVERT]\
    \ and provides metadata\n      useful for processing applications, such as the\
    \ type of data.\n   BINARY\n      Provide the data without any Content-Transfer-Encoding.\n\
    \      In particular, this means that the data MAY contain NUL octets and\n  \
    \    not be formed from textual lines.  Data containing NUL octets MUST\n    \
    \  be transferred using the literal8 syntax defined in [BINARY].\n   BODY\n  \
    \    Provide the data as-is.\n      This will provide the same data as the unextended\
    \ [URLAUTH] as a\n      metadata item.\n   Metadata items MUST NOT appear more\
    \ than once per URL requested, and\n   clients MUST NOT request both BINARY and\
    \ BODY.\n"
- title: 3.2.  Response Metadata
  contents:
  - "3.2.  Response Metadata\n   In order to carry any requested metadata and provide\
    \ additional\n   information to the consumer, the URLFETCH response is similarly\n\
    \   extended.\n   Following the URL itself, servers will include a series of\n\
    \   parenthesized metadata elements.  Defined metadata elements are as\n   follows:\n\
    \   BODYPARTSTRUCTURE\n      The BODYPARTSTRUCTURE provides information about\
    \ the data\n      contained in the response, as it has been returned.  It will\n\
    \      reflect any conversions or decoding that have taken place.  In\n      particular,\
    \ this will show an identity encoding if BINARY is also\n      requested.\n  \
    \ BINARY\n      The BINARY item provides the content, without any content transfer\n\
    \      encoding applied.  If this is not possible (for example, the\n      content\
    \ transfer encoding is unknown to the server), then this MAY\n      contain NIL.\
    \  Servers MUST understand all identity content\n      transfer encodings defined\
    \ in [MIME], as well as the\n      transformation encodings \"Base64\" [BASE64]\
    \ and \"Quoted-Printable\"\n      [MIME].\n   BODY\n      The BODY item provides\
    \ the content as found in the message, with\n      any content transfer encoding\
    \ still applied.  Requesting only the\n      BODY will provide equivalent functionality\
    \ to the unextended\n      [URLAUTH], however, using the extended syntax described\
    \ herein.\n   Note that unlike [CONVERT], BODYPARTSTRUCTURE is not appended with\n\
    \   the part specifier, as this is implicit in the URL.\n"
- title: 4.  Example Exchanges
  contents:
  - "4.  Example Exchanges\n   A client requests the data with no content transfer\
    \ encoding.\n      C: A001 URLFETCH  (\"imap://joe@example.com/INBOX/;uid=20/;\n\
    \         section=1.2;urlauth=anonymous:internal:\n         91354a473744909de610943775f92038\"\
    \ BINARY)\n      S: * URLFETCH \"imap://joe@example.com/INBOX/;uid=20/;\n    \
    \     section=1.2;urlauth=anonymous:internal:\n         91354a473744909de610943775f92038\"\
    \ (BINARY {28}\n      S: Si vis pacem, para bellum.\n      S:\n      S: )\n  \
    \    S: A001 OK URLFETCH completed\n   Note that the data here does not contain\
    \ a NUL octet; therefore, a\n   literal -- not literal8 -- syntax has been used.\n\
    \   A client again requests data with no content transfer encoding, but\n   this\
    \ time requests the body structure.\n      C: A001 URLFETCH  (\"imap://joe@example.com/INBOX/;uid=20/;\n\
    \         section=1.3;urlauth=anonymous:internal:\n         ae354a473744909de610943775f92038\"\
    \ BINARY BODYPARTSTRUCTURE)\n      S: * URLFETCH \"imap://joe@example.com/INBOX/;uid=20/;\n\
    \         section=1.3;urlauth=anonymous:internal:\n         ae354a473744909de610943775f92038\"\
    \ (BODYPARTSTRUCTURE\n         (\"IMAGE\" \"PNG\" () NIL NIL \"BINARY\" 123))\
    \ (BINARY ~{123}\n      S: [123 octets of data, some of which is NUL])\n     \
    \ S: A001 OK URLFETCH completed\n   A client requests only the body structure.\n\
    \      C: A001 URLFETCH  (\"imap://joe@example.com/INBOX/;uid=20/;\n         section=1.3;urlauth=anonymous:internal:\n\
    \         ae354a473744909de610943775f92038\" BODYPARTSTRUCTURE)\n      S: * URLFETCH\
    \ \"imap://joe@example.com/INBOX/;uid=20/;\n         section=1.3;urlauth=anonymous:internal:\n\
    \         ae354a473744909de610943775f92038\" (BODYPARTSTRUCTURE\n         (\"\
    IMAGE\" \"PNG\" () NIL NIL \"BASE64\" 164))\n      S: A001 OK URLFETCH completed\n\
    \   A client requests the body structure and the original content.\n      C: A001\
    \ URLFETCH  (\"imap://joe@example.com/INBOX/;uid=20/;\n         section=1.3;urlauth=anonymous:internal:\n\
    \         ae354a473744909de610943775f92038\" BODYPARTSTRUCTURE BODY)\n      S:\
    \ * URLFETCH \"imap://joe@example.com/INBOX/;uid=20/;\n         section=1.3;urlauth=anonymous:internal:\n\
    \         ae354a473744909de610943775f92038\" (BODYPARTSTRUCTURE\n         (\"\
    IMAGE\" \"PNG\" () NIL NIL \"BASE64\" 164)) (BODY {164}\n      S: [164 octets\
    \ of base64 encoded data])\n      S: A001 OK URLFETCH completed\n   Some parts\
    \ cannot be decoded, so the server will provide the\n   BODYPARTSTRUCTURE of the\
    \ part as is and provide NIL for the binary\n   content:\n      C: A001 URLFETCH\
    \ (\"imap://joe@example.com/INBOX/;uid=20/;\n         section=1.4;urlauth=anonymous:internal:\n\
    \         87ecbd02095b815e699503fc20d869c8\" BODYPARTSTRUCTURE BINARY)\n     \
    \ S: * URLFETCH \"imap://joe@example.com/INBOX/;uid=20/;\n         section=1.4;urlauth=anonymous:internal:\n\
    \         87ecbd02095b815e699503fc20d869c8\" (BODYPARTSTRUCTURE\n         (\"\
    IMAGE\" \"PNG\" () NIL NIL \"X-BLURDYBLOOP\" 123))\n         (BINARY NIL)\n  \
    \    S: A001 OK URLFETCH completed\n   If a part simply doesn't exist, however,\
    \ or the URI is invalid for\n   some other reason, then NIL is returned instead\
    \ of metadata:\n      C: A001 URLFETCH (\"imap://joe@example.com/INBOX/;uid=20/;\n\
    \         section=200;urlauth=anonymous:internal:\n         88066d37e2e5410e1a6486350a8836ee\"\
    \ BODYPARTSTRUCTURE BODY)\n      S: * URLFETCH \"imap://joe@example.com/INBOX/;uid=20/;\n\
    \         section=200;urlauth=anonymous:internal:\n         88066d37e2e5410e1a6486350a8836ee\"\
    \ NIL\n      S: A001 OK URLFETCH completed\n"
- title: 5.  Formal Syntax
  contents:
  - "5.  Formal Syntax\n   This formal syntax uses ABNF as specified in [ABNF], and\
    \ includes\n   productions defined in [URLAUTH], [BINARY], and [IMAP].\n   capability\
    \       =/ \"URLAUTH=BINARY\"\n      ; Command parameters; see Section 3.1\n \
    \  urlfetch         =  \"URLFETCH\" 1*(SP url-fetch-arg)\n   url-fetch-arg   \
    \ =  url-fetch-simple / url-fetch-ext\n   url-fetch-simple =  url-full\n     \
    \ ; Unextended URLFETCH.\n   url-fetch-ext    =  \"(\" url-full *(SP url-fetch-param)\
    \ \")\"\n      ; If no url-fetch-param present, as unextended.\n   url-fetch-param\
    \  =  \"BODY\" / \"BINARY\" / \"BODYPARTSTRUCTURE\" / atom\n      ; Response;\
    \ see Section 3.2\n   urlfetch-data    =  \"*\" SP \"URLFETCH\"\n            \
    \           1*(SP (urldata-simple / urldata-ext /\n                          \
    \    urldata-error))\n   urldata-error    =  SP url-full SP nil\n   urldata-simple\
    \   =  SP url-full SP nstring\n      ; If client issues url-fetch-simple, server\
    \ MUST respond with\n      ; urldata-simple.\n   urldata-ext      =  SP url-full\
    \ url-metadata\n   url-metadata     =  1*(SP \"(\" url-metadata-el \")\")\n  \
    \ url-metadata-el  =  url-meta-bodystruct / url-meta-body /\n                \
    \       url-meta-binary\n   url-meta-bodystruct   =  \"BODYPARTSTRUCTURE\" SP\
    \ body\n   url-meta-binary       =  \"BINARY\" SP ( nstring / literal8 )\n   \
    \   ; If content contains a NUL octet, literal8 MUST be used.\n      ; Otherwise,\
    \ content SHOULD use nstring.\n      ; On decoding error, NIL should be used.\n\
    \   url-meta-body         =  \"BODY\" SP nstring\n"
- title: 6.  IANA Considerations
  contents:
  - "6.  IANA Considerations\n   IMAP4 capabilities are registered by publishing a\
    \ Standards Track or\n   IESG-approved Experimental RFC.\n   This document defines\
    \ the URLFETCH=BINARY IMAP capability.  IANA has\n   added it to the registry\
    \ accordingly.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   Implementors are directed to the security considerations\
    \ within\n   [IMAP], [URLAUTH], and [BINARY].\n   The ability of the holder of\
    \ a URL to be able to fetch metadata about\n   the content pointed to by the URL\
    \ as well as the content itself\n   allows a potential attacker to discover more\
    \ about the content than\n   was previously possible, including its original filename\
    \ and user-\n   supplied description.\n   The additional value of this information\
    \ to an attacker is marginal,\n   and applies only to those URLs for which the\
    \ attacker does not have\n   direct access, such as those produced by [URLAUTH].\
    \  Implementors are\n   therefore directed to the security considerations present\
    \ in\n   [URLAUTH].\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   Comments were received on this idea and/or document\
    \ from Neil Cook,\n   Philip Guenther, Alexey Melnikov, Ken Murchison, and others.\
    \  Whether\n   in agreement or dissent, the comments have refined and otherwise\n\
    \   influenced this document.\n"
- title: 9.  References
  contents:
  - '9.  References

    '
- title: 9.1.  Normative References
  contents:
  - "9.1.  Normative References\n   [ABNF]       Crocker, D. and P. Overell, \"Augmented\
    \ BNF for Syntax\n                Specifications: ABNF\", STD 68, RFC 5234, January\
    \ 2008.\n   [BASE64]     Josefsson, S., \"The Base16, Base32, and Base64 Data\n\
    \                Encodings\", RFC 4648, October 2006.\n   [BINARY]     Nerenberg,\
    \ L., \"IMAP4 Binary Content Extension\",\n                RFC 3516, April 2003.\n\
    \   [CONVERT]    Melnikov, A. and P. Coates, \"Internet Message Access\n     \
    \           Protocol - CONVERT Extension\", RFC 5259, July 2008.\n   [IMAP]  \
    \     Crispin, M., \"INTERNET MESSAGE ACCESS PROTOCOL - VERSION\n            \
    \    4rev1\", RFC 3501, March 2003.\n   [KEYWORDS]   Bradner, S., \"Key words\
    \ for use in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n   [MIME]       Freed, N. and N. Borenstein, \"Multipurpose\
    \ Internet Mail\n                Extensions (MIME) Part One: Format of Internet\
    \ Message\n                Bodies\", RFC 2045, November 1996.\n   [URLAUTH]  \
    \  Crispin, M., \"Internet Message Access Protocol (IMAP) -\n                URLAUTH\
    \ Extension\", RFC 4467, May 2006.\n"
- title: 9.2.  Informative References
  contents:
  - "9.2.  Informative References\n   [BURL]       Newman, C., \"Message Submission\
    \ BURL Extension\",\n                RFC 4468, May 2006.\n   [MEDIATYPE]  Freed,\
    \ N. and N. Borenstein, \"Multipurpose Internet Mail\n                Extensions\
    \ (MIME) Part Two: Media Types\", RFC 2046,\n                November 1996.\n\
    \   [STREAMING]  Cook, N., \"Streaming Internet Messaging Attachments\",\n   \
    \             Work in Progress, March 2009.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Dave Cridland\n   Isode Limited\n   5 Castle Business Village\n\
    \   36, Station Road\n   Hampton, Middlesex  TW12 2BX\n   GB\n   EMail: dave.cridland@isode.com\n"
