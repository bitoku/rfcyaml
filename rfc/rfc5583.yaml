- contents:
  - "                Signaling Media Decoding Dependency in\n                 the
    Session Description Protocol (SDP)\n"
  title: __initial_text__
- contents:
  - "Abstract\n   This memo defines semantics that allow for signaling the decoding\n
    \  dependency of different media descriptions with the same media type\n   in
    the Session Description Protocol (SDP).  This is required, for\n   example, if
    media data is separated and transported in different\n   network streams as a
    result of the use of a layered or multiple\n   descriptive media coding process.\n
    \  A new grouping type \"DDP\" -- decoding dependency -- is defined, to be\n   used
    in conjunction with RFC 3388 entitled \"Grouping of Media Lines\n   in the Session
    Description Protocol\".  In addition, an attribute is\n   specified describing
    the relationship of the media streams in a \"DDP\"\n   group indicated by media
    identification attribute(s) and media format\n   description(s).\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents
    in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n
    \  Please review these documents carefully, as they describe your rights\n   and
    restrictions with respect to this document.\n   This document may contain material
    from IETF Documents or IETF\n   Contributions published or made publicly available
    before November\n   10, 2008.  The person(s) controlling the copyright in some
    of this\n   material may not have granted the IETF Trust the right to allow\n
    \  modifications of such material outside the IETF Standards Process.\n   Without
    obtaining an adequate license from the person(s) controlling\n   the copyright
    in such materials, this document may not be modified\n   outside the IETF Standards
    Process, and derivative works of it may\n   not be created outside the IETF Standards
    Process, except to format\n   it for publication as an RFC or to translate it
    into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Terminology .....................................................4\n   3.
    Definitions .....................................................4\n   4. Motivation,
    Use Cases, and Architecture .........................5\n      4.1. Motivation
    .................................................5\n      4.2. Use Cases ..................................................7\n
    \  5. Signaling Media Dependencies ....................................7\n      5.1.
    Design Principles ..........................................7\n      5.2. Semantics
    ..................................................8\n           5.2.1. SDP Grouping
    Semantics for Decoding Dependency ......8\n           5.2.2. \"depend\" Attribute
    for Dependency Signaling\n                  per Media-Stream ....................................8\n
    \  6. Usage of New Semantics in SDP ..................................10\n      6.1.
    Usage with the SDP Offer/Answer Model .....................10\n      6.2. Declarative
    usage .........................................12\n      6.3. Usage with AVP and
    SAVP RTP Profiles ......................12\n      6.4. Usage with Capability Negotiation
    .........................12\n      6.5. Examples ..................................................12\n
    \  7. Security Considerations ........................................15\n   8.
    IANA Considerations ............................................15\n   9. Informative
    Note on \"The SDP (Session Description Protocol)\n      Grouping Framework\" ............................................16\n
    \  10. References ....................................................16\n      10.1.
    Normative References .....................................16\n      10.2. Informative
    References ...................................17\n   Appendix A.  Acknowledgements
    .....................................18\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   An SDP session description may contain one or more media\n
    \  descriptions, each identifying a single media stream.  A media\n   description
    is identified by one \"m=\" line.  Today, if more than one\n   \"m=\" lines exist
    indicating the same media type, a receiver cannot\n   identify a specific relationship
    between those media.\n   A Multiple Description Coding (MDC) or layered Media
    Bitstream\n   contains, by definition, one or more Media Partitions that are\n
    \  conveyed in their own media stream.  The cases we are interested in\n   are
    layered and MDC Bitstreams with two or more Media Partitions.\n   Carrying more
    than one Media Partition in its own session is one of\n   the key use cases for
    employing layered or MDC-coded media.  Senders,\n   network elements, or receivers
    can suppress\n   sending/forwarding/subscribing/decoding individual Media Partitions\n
    \  and still preserve perhaps suboptimal, but still useful, media\n   quality.\n
    \  One property of all Media Bitstreams relevant to this memo is that\n   their
    Media Partitions have a well-defined usage relationship.  For\n   example, in
    layered coding, \"higher\" Media Partitions are useless\n   without \"lower\"
    ones.  In MDC coding, Media Partitions are\n   complementary -- the more Media
    Partitions one receives, the better a\n   reproduced quality may be.  This document
    defines an SDP extension to\n   indicate such a decoding dependency.\n   The trigger
    for the present memo has been the standardization process\n   of the RTP payload
    format for the Scalable Video Coding (SVC)\n   extension to ITU-T Rec. H.264 /
    MPEG-4 AVC [AVT-RTP-SVC].  When\n   drafting [AVT-RTP-SVC], it was observed that
    the aforementioned lack\n   in signaling support is one that is not specific to
    SVC, but applies\n   to all layered or MDC codecs.  Therefore, this memo presents
    a\n   generic solution.  Likely, the second technology utilizing the\n   mechanisms
    of this memo will be Multi-View video coding.  In Multi-\n   View Coding (MVC)
    [AVT-RTP-MVC], layered dependencies between views\n   are used to increase the
    coding efficiency, and, therefore, the\n   properties of MVC with respect to the
    SDP signaling are comparable to\n   those of SVC.\n   The mechanisms defined herein
    are media transport protocol dependent,\n   and applicable only in conjunction
    with the use of RTP [RFC3550].\n   The SDP grouping of Media Lines of different
    media types is out of\n   scope of this memo.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in BCP 14, RFC 2119\n
    \  [RFC2119].\n"
  title: 2.  Terminology
- contents:
  - "3.  Definitions\n   Media stream:\n   As per [RFC4566].\n   Media Bitstream:\n
    \  A valid, decodable stream, containing all Media Partitions generated\n   by
    the encoder.  A Media Bitstream normally conforms to a media\n   coding standard.\n
    \  Media Partition:\n   A subset of a Media Bitstream intended for independent\n
    \  transportation.  An integer number of Media Partitions forms a Media\n   Bitstream.
    \ In layered coding, a Media Partition represents one or\n   more layers that
    are handled as a unit.  In MDC coding, a Media\n   Partition represents one or
    more descriptions that are handled as a\n   unit.\n   Decoding dependency:\n   The
    class of relationships Media Partitions have to each other.  At\n   present, this
    memo defines two decoding dependencies: layered coding\n   and Multiple Description
    Coding.\n   Layered coding dependency:\n   Each Media Partition is only useful
    (i.e., can be decoded) when all\n   of the Media Partitions it depends on are
    available.  The\n   dependencies between the Media Partitions therefore create
    a directed\n   graph.  Note: normally, in layered coding, the more Media Partitions\n
    \  are employed (following the rule above), the better a reproduced\n   quality
    is possible.\n   Multiple Description Coding (MDC) dependency:\n   N of M Media
    Partitions are required to form a Media Bitstream, but\n   there is no hierarchy
    between these Media Partitions.  Most MDC\n   schemes aim at an increase of reproduced
    media quality when more\n   media partitions are decoded.  Some MDC schemes require
    more than one\n   Media Partition to form an Operation Point.\n   Operation Point:\n
    \  In layered coding, a subset of a layered Media Bitstream that\n   includes
    all Media Partitions required for reconstruction at a\n   certain point of quality,
    error resilience, or another property, and\n   that does not include any other
    Media Partitions.  In MDC coding, a\n   subset of an MDC Media Bitstream that
    is compliant with the MDC\n   coding standard in question.\n"
  title: 3.  Definitions
- contents:
  - '4.  Motivation, Use Cases, and Architecture

    '
  - contents:
    - "4.1.  Motivation\n   This memo is concerned with two types of decoding dependencies:\n
      \  layered and multi-description.  The transport of layered and Multiple\n   Description
      Coding share as key motivators the desire for media\n   adaptation to network
      conditions, i.e., related to bandwidth, error\n   rates, connectivity of endpoints
      in multicast or broadcast scenarios,\n   and the like.\n   o Layered decoding
      dependency:\n      In layered coding, the partitions of a Media Bitstream are
      known\n      as media layers or simply layers.  One or more layers may be\n
      \     transported in different media streams in the sense of [RFC4566].\n      A
      classic use case is known as receiver-driven layered multicast,\n      in which
      a receiver selects a combination of media streams in\n      response to quality
      or bit-rate requirements.\n      Back in the mid 1990s, the then-available layered
      media formats\n      and codecs envisioned primarily (or even exclusively) a
      one-\n      dimensional hierarchy of layers.  That is, each so-called\n      enhancement
      layer referred to exactly one layer \"below\".  The\n      single exception
      has been the base layer, which is self-contained.\n      Therefore, the identification
      of one enhancement layer fully\n      specifies the Operation Point of a layered
      coding scheme,\n      including knowledge about all the other layers that need
      to be\n      decoded.\n      SDP [RFC4566] contains rudimentary support for
      exactly this use\n      case and media formats, in that it allows for signaling
      a range of\n      transport addresses in a certain media description.  By\n
      \     definition, a higher transport address identifies a higher layer\n      in
      the one-dimensional hierarchy.  A receiver needs only to decode\n      data
      conveyed over this transport address and lower transport\n      addresses to
      decode this Operation Point.\n      Newer media formats depart from this simple
      one-dimensional\n      hierarchy, in that highly complex (at least tree-shaped)\n
      \     dependency hierarchies can be implemented.  Compelling use cases\n      for
      these complex hierarchies have been identified by industry.\n      Support for
      it is therefore desirable.  However, SDP, in its\n      current form, does not
      allow for the signaling of these complex\n      relationships.  Therefore, receivers
      cannot make an informed\n      decision on which layers to subscribe (in case
      of layered\n      multicast).\n      Layered decoding dependencies may also
      exist in a Multi-View\n      Coding environment.  Views may be coded using inter-view\n
      \     dependencies to increase coding efficiency.  This results in Media\n      Bitstreams,
      that logically may be separated into Media Partitions\n      representing different
      views of the reconstructed video signal.\n      These Media Partitions cannot
      be decoded independently, and,\n      therefore, other Media Partitions are
      required for reconstruction.\n      To express this relationship, the signaling
      needs to express the\n      dependencies of the views, which in turn are Media
      Partitions in\n      the sense of this document.\n   o Multiple descriptive
      decoding dependency:\n      In the most basic form of MDC, each Media Partition
      forms an\n      independent representation of the media.  That is, decoding
      of any\n      of the Media Partitions yields useful reproduced media data.  When\n
      \     more than one Media Partition is available, then a decoder can\n      process
      them jointly, and the resulting media quality increases.\n      The highest
      reproduced quality is available if all original Media\n      Partitions are
      available for decoding.\n      More complex forms of Multiple Description Coding
      can also be\n      envisioned, i.e., where, as a minimum, N-out-of-M total Media\n
      \     Partitions need to be available to allow meaningful decoding.\n      MDC
      has not yet been embraced heavily by the media standardization\n      community,
      though it is the subject of a lot of academic research.\n      As an example,
      we refer to [MDC].\n      In this memo, we cover MDC because we a) envision
      that MDC media\n      formats will come into practical use within the lifetime
      of this\n      memo, and b) the solution for its signaling is very similar to
      the\n      one of layered coding.\n   o Other decoding dependency relationships:\n
      \     At the time of writing, no decoding dependency relationships\n      beyond
      the two mentioned above have been identified that would\n      warrant standardization.
      \ However, the mechanisms of this memo\n      could be extended by introducing
      new codepoints for new decoding\n      dependency types.  If such an extension
      becomes necessary, as\n      formally required in Section 5.2.2, the new decoding
      dependency\n      type MUST be documented in an IETF Standards-Track document.\n"
    title: 4.1.  Motivation
  - contents:
    - "4.2.  Use Cases\n   o Receiver-driven layered multicast:\n      This technology
      is discussed in [RFC3550] and references therein.\n      We refrain from elaborating
      further; the subject is well known and\n      understood.\n   o Multiple end-to-end
      transmission with different properties:\n      Assume a unicast and point-to-point
      topology, wherein one endpoint\n      sends media to another.  Assume further
      that different forms of\n      media transmission are available.  The difference
      may lie in the\n      cost of the transmission (free, charged), in the available\n
      \     protection (unprotected/secure), in the quality of service (QoS)\n      (guaranteed
      quality / best effort), or other factors.\n      Layered and MDC coding allows
      matching of the media\n      characteristics to the available transmission path(s).
      \ For\n      example, in layered coding, it makes sense to convey the base\n
      \     layer over high QoS.  Enhancement layers, on the other hand, can\n      be
      conveyed over best effort, as they are \"optional\" in their\n      characteristic
      -- nice to have, but non-essential for media\n      consumption.  In a different
      scenario, the base layer may be\n      offered in a non-encrypted session as
      a free preview.  An\n      encrypted enhancement layer references this base
      layer and allows\n      optimal quality play-back; however, it is only accessible
      to users\n      who have the key, which may have been distributed by a conditional\n
      \     access mechanism.\n"
    title: 4.2.  Use Cases
  title: 4.  Motivation, Use Cases, and Architecture
- contents:
  - '5.  Signaling Media Dependencies

    '
  - contents:
    - "5.1.  Design Principles\n   The dependency signaling is only feasible between
      media descriptions\n   described with an \"m=\"-line and with an assigned media
      identification\n   attribute (\"mid\"), as defined in [RFC3388].  All media
      descriptions\n   grouped according to this specification MUST have the same
      media\n   type.  Other dependencies relations expressed by SDP grouping have
      to\n   be addressed in other specifications.  A media description MUST NOT\n
      \  be part of more than one group of the grouping type defined in this\n   specification.\n"
    title: 5.1.  Design Principles
  - contents:
    - '5.2.  Semantics

      '
    - contents:
      - "5.2.1.  SDP Grouping Semantics for Decoding Dependency\n   This specification
        defines a new grouping semantic Decoding\n   Dependency \"DDP\":\n   DDP associates
        a media stream, identified by its mid attribute, with\n   a DDP group.  Each
        media stream MUST be composed of an integer number\n   of Media Partitions.
        \ A media stream is identified by a session-\n   unique media format description
        (RTP payload type number) within a\n   media description.  In a DDP group,
        all media streams MUST have the\n   same type of decoding dependency (as signaled
        by the attribute\n   defined in Section 5.2.2).  All media streams MUST contain
        at least\n   one Operation Point.  The DDP group type informs a receiver about
        the\n   requirement for handling the media streams of the group according
        to\n   the new media level attribute \"depend\", as defined in Section 5.2.2.\n
        \  When using multiple codecs, e.g., for the Offer/Answer model, the\n   media
        streams MUST have the same dependency structure, regardless of\n   which media
        format description (RTP payload type number) is used.\n"
      title: 5.2.1.  SDP Grouping Semantics for Decoding Dependency
    - contents:
      - "5.2.2.  \"depend\" Attribute for Dependency Signaling per Media-Stream\n
        \  This memo defines a new media-level attribute, \"depend\", with the\n   following
        ABNF [RFC5234].  The identification-tag is defined in\n   [RFC3388].  In the
        following ABNF, fmt, token, SP, and CRLF are used\n   as defined in [RFC4566].\n
        \  <CODE BEGINS>\n   Copyright (c) 2009 IETF Trust and the persons identified
        as authors\n   of the code.  All rights reserved.\n   Redistribution and use
        in source and binary forms, with or without\n   modification, are permitted
        provided that the following conditions\n   are met:\n   - Redistributions
        of source code must retain the above copyright\n     notice, this list of
        conditions and the following disclaimer.\n   - Redistributions in binary form
        must reproduce the above copyright\n     notice, this list of conditions and
        the following disclaimer in the\n     documentation and/or other materials
        provided with the\n     distribution.\n   - Neither the name of Internet Society,
        IETF or IETF Trust, nor the\n     names of specific contributors, may be used
        to endorse or promote\n     products derived from this software without specific
        prior written\n     permission.\n   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT
        HOLDERS AND CONTRIBUTORS\n   LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY
        AND FITNESS FOR\n   A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL
        THE COPYRIGHT\n   OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
        INCIDENTAL,\n   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
        NOT\n   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n
        \  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n
        \  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n   (INCLUDING
        NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n   OF THIS SOFTWARE,
        EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n   depend-attribute =\n
        \          \"a=depend:\" dependent-fmt SP dependency-tag\n              *(\";\"
        SP dependent-fmt SP dependency-tag) CRLF\n   dependency-tag   =\n           dependency-type
        *1( SP identification-tag \":\"\n           fmt-dependency *(\",\" fmt-dependency
        ))\n   dependency-type  = \"lay\"\n                    / \"mdc\"\n                    /
        token\n   dependent-fmt = fmt\n   fmt-dependency = fmt\n   <CODE ENDS>\n   dependency-tag
        indicates one or more dependencies of one dependent-\n   fmt in the media
        description.  These dependencies are signaled as\n   fmt-dependency values,
        which indicate fmt values of other media\n   descriptions.  These other media
        descriptions are identified by their\n   identification-tag values in the
        depend-attribute.  There MUST be\n   exactly one dependency-tag indicated
        per dependent-fmt.\n   dependent-fmt indicates the media format description,
        as defined in\n   [RFC4566], that depends on one or more media format descriptions
        in\n   the media description indicated by the value of the identification-\n
        \  tag within the dependency-tag.\n   fmt-dependency indicates the media format
        description in the media\n   description identified by the identification-tag
        within the\n   dependency-tag, on which the dependent-fmt of the dependent
        media\n   description depends.  In case a list of fmt-dependency values is\n
        \  given, any element of the list is sufficient to satisfy the\n   dependency,
        at the choice of the decoding entity.\n   The depend-attribute describes the
        decoding dependency.  The depend-\n   attribute MUST be followed by a sequence
        of dependent-fmt and the\n   corresponding dependency-tag fields, which identify
        all related media\n   format descriptions in all related media descriptions
        of the\n   dependent-fmt.  The attribute MAY be used with multicast as well
        as\n   with unicast transport addresses.  The following dependency-type\n
        \  values are defined in this memo:\n   o lay:  Layered decoding dependency
        -- identifies the described media\n           stream as one or more Media
        Partitions of a layered Media\n           Bitstream.  When \"lay\" is used,
        all media streams required\n           for decoding the Operation Point MUST
        be identified by\n           identification-tag and fmt-dependency following
        the \"lay\"\n           string.\n   o mdc:  Multi-descriptive decoding dependency
        -- signals that the\n           described media stream is part of a set of
        a MDC Media\n           Bitstream.  By definition, at least N-out-of-M media
        streams\n           of the group need to be available to from an Operation
        Point.\n           The values of N and M depend on the properties of the Media\n
        \          Bitstream and are not signaled within this context.  When\n           \"mdc\"
        is used, all required media streams for the Operation\n           Point MUST
        be identified by identification-tag and fmt-\n           dependency following
        the \"mdc\" string.\n   Further, dependency types MUST be defined in a Standards-Track\n
        \  document.\n"
      title: 5.2.2.  "depend" Attribute for Dependency Signaling per Media-Stream
    title: 5.2.  Semantics
  title: 5.  Signaling Media Dependencies
- contents:
  - '6.  Usage of New Semantics in SDP

    '
  - contents:
    - "6.1.  Usage with the SDP Offer/Answer Model\n   The backward compatibility
      in Offer/Answer is generally handled as\n   specified in Section 8.4 of [RFC3388],
      as summarized below.\n   Depending on the implementation, a node that does not
      understand DDP\n   grouping (either does not understand line grouping at all,
      or just\n   does not understand the DDP semantics) SHOULD respond to an offer\n
      \  containing DDP grouping either (1) with an answer that ignores the\n   grouping
      attribute or (2) with a refusal to the request (e.g., 488\n   Not acceptable
      here or 606 Not acceptable in SIP).\n   In case (1), if the original sender
      of the offer still wishes to\n   establish communications, it SHOULD generate
      a new offer with a\n   single media stream that represents an Operation Point.
      \ Note: in\n   most cases, this will be the base layer of a layered Media Bitstream,\n
      \  equally possible are Operation Points containing a set of enhancement\n   layers
      as long as all are part of a single media stream.  In case\n   (2), if the sender
      of the original offer has identified that the\n   refusal to the request is
      caused by the use of DDP grouping, and if\n   the sender of the offer still
      wishes to establish the session, it\n   SHOULD retry the request with an offer
      including only a single media\n   stream.\n   If the answerer understands the
      DDP semantics, it is necessary to\n   take the \"depend\" attribute into consideration
      in the Offer/Answer\n   procedure.  The main rule for the \"depend\" attribute
      is that the\n   offerer decides the number of media streams and the dependency\n
      \  between them.  The answerer cannot change the dependency relations.\n   For
      unicast sessions where the answerer receives media, i.e., for\n   offers including
      media streams that have a directionality indicated\n   by \"sendonly\", \"sendrecv\",
      or have no directionality indicated, the\n   answerer MAY remove media Operation
      Points.  The answerer MUST use\n   the dependency relations provided in the
      offer when sending media.\n   The answerer MAY send according to all of the
      Operation Points\n   present in the offer, even if the answerer has removed
      some of those\n   Operation Points.  Thus, an answerer can limit the number
      of\n   Operation Points being delivered to the answerer while the answerer\n
      \  can still send media to the offerer using all of the Operation Points\n   indicated
      in the offer.\n   For multicast sessions, the answerer MUST accept all Operation
      Points\n   and their related decoding dependencies or MUST remove non-accepted\n
      \  Operation Points completely.  Due to the nature of multicast, the\n   receiver
      can select which Operation Points it actually receives and\n   processes.  For
      multicast sessions that allow the answerer to also\n   send data, the answerer
      MAY send all of the offered Operation Points.\n   In any case, if the answerer
      cannot accept one or more offered\n   Operation Points and/or the media stream's
      dependencies, the answerer\n   MAY re-invite with an offer including acceptable
      Operation Points\n   and/or dependencies.\n   Note: Applications may limit the
      possibility of performing a re-\n   invite.  The previous offer is also a good
      hint to the capabilities\n   of the other agent.\n"
    title: 6.1.  Usage with the SDP Offer/Answer Model
  - contents:
    - "6.2.  Declarative usage\n   If a Real Time Streaming Protocol (RTSP) receiver
      understands\n   signaling according to this memo, it SHALL set up all media
      streams\n   that are required to decode the Operation Point of its choice.\n
      \  If an RTSP receiver does not understand the signaling defined within\n   this
      memo, it falls back to normal SDP processing.  Two likely cases\n   have to
      be distinguished: (1) if at least one of the media types\n   included in the
      SDP is within the receiver's capabilities, it selects\n   among those candidates
      according to implementation specific criteria\n   for setup, as usual.  (2)
      If none of the media types included in the\n   SDP can be processed, then obviously
      no setup can occur.\n"
    title: 6.2.  Declarative usage
  - contents:
    - "6.3.  Usage with AVP and SAVP RTP Profiles\n   The signaling mechanisms defined
      in this document MUST NOT be used to\n   negotiate between using the attribute-value
      pair (AVP) [RFC3551] and\n   SAVP [RFC3711] profile for RTP.  However, both
      profiles MAY be used\n   separately or jointly with the signaling mechanism
      defined in this\n   document.\n"
    title: 6.3.  Usage with AVP and SAVP RTP Profiles
  - contents:
    - "6.4.  Usage with Capability Negotiation\n   This memo does not cover the interaction
      with Capability Negotiation\n   [MMUSIC].  This issue is for further study and
      will be addressed in a\n   different memo.\n"
    title: 6.4.  Usage with Capability Negotiation
  - contents:
    - "6.5.  Examples\n   a.)  Example for signaling layered decoding dependency:\n
      \     The example below shows a session description with three media\n      descriptions,
      all of type video and with layered decoding\n      dependency (\"lay\").  Each
      of the media descriptions includes two\n      possible media format descriptions
      with different encoding\n      parameters as, e.g., \"packetization-mode\" (not
      shown in the\n      example) for the media subtypes \"H264\" and \"H264-SVC\"
      given by the\n      \"a=rtpmap:\"-line.  The first media description includes
      two H264\n      payload types as media format descriptions, \"96\" and \"97\",
      as\n      defined in [RFC3984] and represents the base layer Operation Point\n
      \     (identified by \"mid:L1\").  The two other media descriptions\n      (identified
      by \"mid:L2\" and \"mid:L3\") include H264-SVC payload\n      types as defined
      in [AVT-RTP-SVC], which contain enhancements to\n      the base layer Operation
      Point or the first enhancement layer\n      Operation Point (media description
      identified by \"mid:L2\").\n      The example shows the dependencies of the
      media format\n      descriptions of the different media descriptions indicated
      by\n      \"DDP\" grouping, \"mid\", and \"depend\" attributes.  The \"depend\"\n
      \     attribute is used with the decoding dependency type \"lay\"\n      indicating
      layered decoding dependency.  For example, the third\n      media description
      (\"m=video 40004...\")  identified by \"mid:L3\" has\n      different dependencies
      on the media format descriptions of the two\n      other media descriptions:
      Media format description \"100\" depends\n      on media format description
      \"96\" or \"97\" of the media description\n      indentified by \"mid:L1\".
      \ This is an exclusive-OR, i.e., payload\n      type \"100\" may be used with
      payload type \"96\" or with \"97\", but\n      one of the two combinations is
      required for decoding payload type\n      \"100\".\n      For media format description
      \"101\", it is different.  This one\n      depends on two of the other media
      descriptions at the same time,\n      i.e., it depends on media format description
      \"97\" of the media\n      description indentified by \"mid:L1\" and it also
      depends on media\n      format description \"99\" of the media description indentified
      by\n      \"mid:L2\".  For decoding media format description \"101\", both media\n
      \     format description \"97\" and media format description \"99\" are\n      required
      by definition.\n         v=0\n         o=svcsrv 289083124 289083124 IN IP4 host.example.com\n
      \        s=LAYERED VIDEO SIGNALING Seminar\n         t=0 0\n         c=IN IP4
      192.0.2.1/127\n         a=group:DDP L1 L2 L3\n         m=video 40000 RTP/AVP
      96 97\n         b=AS:90\n         a=framerate:15\n         a=rtpmap:96 H264/90000\n
      \        a=rtpmap:97 H264/90000\n         a=mid:L1\n         m=video 40002 RTP/AVP
      98 99\n         b=AS:64\n         a=framerate:15\n         a=rtpmap:98 H264-SVC/90000\n
      \        a=rtpmap:99 H264-SVC/90000\n         a=mid:L2\n         a=depend:98
      lay L1:96,97; 99 lay L1:97\n         m=video 40004 RTP/AVP 100 101\n         b=AS:128\n
      \        a=framerate:30\n         a=rtpmap:100 H264-SVC/90000\n         a=rtpmap:101
      H264-SVC/90000\n         a=mid:L3\n         a=depend:100 lay L1:96,97; 101 lay
      L1:97 L2:99\n   b.)  Example for signaling of multi-descriptive decoding dependency:\n
      \     The example shows a session description with three media\n      descriptions,
      all of type video and with multi-descriptive\n      decoding dependency.  Each
      of the media descriptions includes one\n      media format description.  The
      example shows the dependencies of\n      the media format descriptions of the
      different media descriptions\n      indicated by \"DDP\" grouping, \"mid\",
      and \"depend\" attributes.  The\n      \"depend\" attribute is used with the
      decoding dependency type \"mdc\"\n      indicating layered decoding dependency.
      \ For example, media format\n      description \"104\" in the media description
      (\"m=video 40000...\")\n      with \"mid:M1\" depends on the two other media
      descriptions.  It\n      depends on media format description \"105\" of media
      description\n      with \"mid:M2\", and it also depends on media format description\n
      \     \"106\" of media description with \"mid:M3\".  In case of the multi-\n
      \     descriptive decoding dependency, media format description \"105\"\n      and
      \"106\" can be used by definition to enhance the decoding\n      process of
      media format description \"104\", but they are not\n      required for decoding.\n
      \        v=0\n         o=mdcsrv 289083124 289083124 IN IP4 host.example.com\n
      \        s=MULTI DESCRIPTION VIDEO SIGNALING Seminar\n         t=0 0\n         c=IN
      IP4 192.0.2.1/127\n         a=group:DDP M1 M2 M3\n         m=video 40000 RTP/AVP
      104\n         a=mid:M1\n         a=depend:104 mdc M2:105 M3:106\n         m=video
      40002 RTP/AVP 105\n         a=mid:M2\n         a=depend:105 mdc M1:104 M3:106\n
      \        m=video 40004 RTP/AVP 106\n         a=mid:M3\n         a=depend:106
      mdc M1:104 M2:105\n"
    title: 6.5.  Examples
  title: 6.  Usage of New Semantics in SDP
- contents:
  - "7.  Security Considerations\n   All security implications of SDP apply.\n   There
    may be a risk of manipulation of the dependency signaling of a\n   session description
    by an attacker.  This may mislead a receiver or\n   middle box, e.g., a receiver
    may try to compose a Media Bitstream out\n   of several RTP packet streams that
    does not form an Operation Point,\n   although the signaling made it believe it
    would form a valid\n   Operation Point, with potential fatal consequences for
    the media\n   decoding process.  It is recommended that the receiver SHOULD perform\n
    \  an integrity check on SDP and follow the security considerations of\n   SDP
    to only trust SDP from trusted sources.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  IANA Considerations\n   The following contact information shall be used for
    all registrations\n   included here:\n   Contact:      Thomas Schierl\n                 email:
    ts@thomas-schierl.de\n                 tel: +49-30-31002-227\n   The following
    semantics have been registered by IANA in Semantics for\n   the \"group\" SDP
    Attribute under SDP Parameters.\n   Semantics              Token     Reference\n
    \  -------------------    -----     ---------\n   Decoding Dependency    DDP       RFC
    5583\n   The SDP media-level attribute \"depend\" has been registered by IANA
    in\n   Semantics for \"att-field (media level only)\".  The registration\n   procedure
    in Section 8.2.4 of [RFC4566] applies.\n   SDP Attribute (\"att-field (media level
    only)\"):\n   Attribute name:     depend\n   Long form:          decoding dependency\n
    \  Type of name:       att-field\n   Type of attribute:  media level only\n   Subject
    to charset: no\n   Purpose:            RFC 5583\n   Reference:          RFC 5583\n
    \  Values:             see this document and registrations below.\n   The following
    semantics have been registered by IANA in Semantics for\n   the \"depend\" SDP
    Attribute under SDP Parameters:\n   Semantics of the \"depend\" SDP attribute:\n
    \  Semantics                                Token     Reference\n   ----------------------------
    \            -----     ---------\n   Layered decoding dependency              lay
    \      RFC 5583\n   Multi-descriptive decoding dependency    mdc       RFC 5583\n
    \  New registrations for semantics of the \"depend\" SDP attribute are\n   added
    by the \"Specification Required\" policy as defined in [RFC5226].\n"
  title: 8.  IANA Considerations
- contents:
  - "9.  Informative Note on \"The SDP (Session Description Protocol)\n    Grouping
    Framework\"\n   Currently, there is ongoing work on [RFC3388bis].  In [RFC3388bis],\n
    \  the grouping mechanism is extended in a way that a media description\n   can
    be part of more than one group of the same grouping type in the\n   same session
    description.  However, media descriptions grouped by\n   this document must be
    at most part of one group of the type \"DDP\" in\n   the same session description.\n"
  title: 9.  Informative Note on "The SDP (Session Description Protocol)
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [RFC2119]     Bradner, S., \"Key words for
      use in RFCs to Indicate\n                 Requirement Levels\", BCP 14, RFC
      2119, March 1997.\n   [RFC3388]     Camarillo, G., Eriksson, G., Holler, J.,
      and H.\n                 Schulzrinne, \"Grouping of Media Lines in the Session\n
      \                Description Protocol (SDP)\", RFC 3388, December 2002.\n   [RFC3550]
      \    Schulzrinne, H., Casner, S., Frederick, R., and V.\n                 Jacobson,
      \"RTP: A Transport Protocol for Real-Time\n                 Applications\",
      STD 64, RFC 3550, July 2003.\n   [RFC3551]     Schulzrinne, H. and S. Casner,
      \"RTP Profile for Audio\n                 and Video Conferences with Minimal
      Control\", STD 65,\n                 RFC 3551, July 2003.\n   [RFC3711]     Baugher,
      M., McGrew, D., Naslund, M., Carrara, E., and\n                 K. Norrman,
      \"The Secure Real-time Transport Protocol\n                 (SRTP)\", RFC 3711,
      March 2004.\n   [RFC4566]     Handley, M., Jacobson, V., and C. Perkins, \"SDP:\n
      \                Session Description Protocol\", RFC 4566, July 2006.\n   [RFC5226]
      \    Narten, T. and H. Alvestrand, \"Guidelines for Writing\n                 an
      IANA Considerations Section in RFCs\", BCP 26, RFC\n                 5226, May
      2008.\n   [RFC5234]     Crocker, D., Ed., and P. Overell, \"Augmented BNF for\n
      \                Syntax Specifications: ABNF\", STD 68, RFC 5234, January\n
      \                2008.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [AVT-RTP-SVC] Wenger, S., Wang Y.-K., Schierl,
      T. and A.\n                 Eleftheriadis, \"RTP Payload Format for SVC Video\",
      Work\n                 in Progress, March 2009.\n   [RFC3388bis]  Camarillo,
      G \"The SDP (Session Description Protocol)\n                 Grouping Framework\",
      Work in Progress, January 2009.\n   [MMUSIC]      Andreasen, F., \"SDP Capability
      Negotiation\", Work in\n                 Progress, May 2009.\n   [AVT-RTP-MVC]
      Wang, Y.-K. and T. Schierl, \"RTP Payload Format for MVC\n                 Video\",
      Work in Progress, February 2009.\n   [MDC]         Vitali, A., Borneo, A., Fumagalli,
      M., and R. Rinaldo,\n                 \"Video over IP using Standard-Compatible
      Multiple\n                 Description Coding:  an IETF proposal\", Packet Video\n
      \                Workshop, April 2006, Hangzhou, China.\n   [RFC3984]     Wenger,
      S., Hannuksela, M., Stockhammer, T.,\n                 Westerlund, M., and D.
      Singer, \"RTP Payload Format for\n                 H.264 Video\", RFC 3984,
      February 2005.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Appendix A.  Acknowledgements\n   The author Thomas Schierl of Fraunhofer HHI
    is sponsored by the\n   European Commission under the contract number FP7-ICT-214063,
    project\n   SEA.\n   We want to also thank Magnus Westerlund, Joerg Ott, Ali Begen,
    Dan\n   Wing, Helmut Burklin, and Jean-Francois Mule for their valuable and\n
    \  constructive comments to this memo.\n"
  title: Appendix A.  Acknowledgements
- contents:
  - "Authors' Addresses\n   Thomas Schierl\n   Fraunhofer HHI\n   Einsteinufer 37\n
    \  D-10587 Berlin\n   Germany\n   Phone: +49-30-31002-227\n   EMail: ts@thomas-schierl.de\n
    \  Stephan Wenger\n   2400 Skyfarm Dr.\n   Hillsborough, CA 94010\n   USA\n   Phone:
    +1-415-713-5473\n   EMail: stewe@stewe.org\n"
  title: Authors' Addresses
