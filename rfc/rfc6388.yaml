- title: __initial_text__
  contents:
  - "               Label Distribution Protocol Extensions for\n Point-to-Multipoint\
    \ and Multipoint-to-Multipoint Label Switched Paths\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes extensions to the Label Distribution Protocol\n\
    \   (LDP) for the setup of point-to-multipoint (P2MP) and multipoint-to-\n   multipoint\
    \ (MP2MP) Label Switched Paths (LSPs) in MPLS networks.\n   These extensions are\
    \ also referred to as multipoint LDP.  Multipoint\n   LDP constructs the P2MP\
    \ or MP2MP LSPs without interacting with or\n   relying upon any other multicast\
    \ tree construction protocol.\n   Protocol elements and procedures for this solution\
    \ are described for\n   building such LSPs in a receiver-initiated manner.  There\
    \ can be\n   various applications for multipoint LSPs, for example IP multicast\
    \ or\n   support for multicast in BGP/MPLS Layer 3 Virtual Private Networks\n\
    \   (L3VPNs).  Specification of how such applications can use an LDP\n   signaled\
    \ multipoint LSP is outside the scope of this document.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6388.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n   This document\
    \ may contain material from IETF Documents or IETF\n   Contributions published\
    \ or made publicly available before November\n   10, 2008.  The person(s) controlling\
    \ the copyright in some of this\n   material may not have granted the IETF Trust\
    \ the right to allow\n   modifications of such material outside the IETF Standards\
    \ Process.\n   Without obtaining an adequate license from the person(s) controlling\n\
    \   the copyright in such materials, this document may not be modified\n   outside\
    \ the IETF Standards Process, and derivative works of it may\n   not be created\
    \ outside the IETF Standards Process, except to format\n   it for publication\
    \ as an RFC or to translate it into languages other\n   than English.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Conventions Used in This Document ..........................4\n  \
    \    1.2. Terminology ................................................4\n    \
    \  1.3. Manageability ..............................................5\n   2. Setting\
    \ Up P2MP LSPs with LDP ...................................6\n      2.1. Support\
    \ for P2MP LSP Setup with LDP ........................6\n      2.2. The P2MP FEC\
    \ Element .......................................6\n      2.3. The LDP MP Opaque\
    \ Value Element ............................8\n           2.3.1. The Generic LSP\
    \ Identifier ..........................9\n      2.4. Using the P2MP FEC Element\
    \ .................................9\n           2.4.1. Label Mapping ......................................10\n\
    \           2.4.2. Label Withdraw .....................................12\n  \
    \         2.4.3. Upstream LSR Change ................................13\n   3.\
    \ Setting up MP2MP LSPs with LDP .................................14\n      3.1.\
    \ Support for MP2MP LSP Setup with LDP ......................14\n      3.2. The\
    \ MP2MP Downstream and Upstream FEC Elements ............15\n      3.3. Using\
    \ the MP2MP FEC Elements ..............................15\n           3.3.1. MP2MP\
    \ Label Mapping ................................17\n           3.3.2. MP2MP Label\
    \ Withdraw ...............................20\n           3.3.3. MP2MP Upstream\
    \ LSR Change ..........................21\n   4. Micro-Loops in MP LSPs .........................................21\n\
    \   5. The LDP MP Status TLV ..........................................21\n  \
    \    5.1. The LDP MP Status Value Element ...........................22\n    \
    \  5.2. LDP Messages Containing LDP MP Status Messages ............22\n      \
    \     5.2.1. LDP MP Status Sent in LDP Notification Messages ....23\n        \
    \   5.2.2. LDP MP Status TLV in Label Mapping Message .........24\n   6. Upstream\
    \ Label Allocation on a LAN .............................24\n      6.1. LDP Multipoint-to-Multipoint\
    \ on a LAN .....................24\n           6.1.1. MP2MP Downstream Forwarding\
    \ ........................25\n           6.1.2. MP2MP Upstream Forwarding ..........................25\n\
    \   7. Root Node Redundancy ...........................................25\n  \
    \    7.1. Root Node Redundancy - Procedures for P2MP LSPs ...........26\n    \
    \  7.2. Root Node Redundancy - Procedures for MP2MP LSPs ..........26\n   8. Make\
    \ Before Break (MBB) ........................................27\n      8.1.  MBB\
    \ Overview .............................................27\n      8.2. The MBB\
    \ Status Code .......................................28\n      8.3. The MBB Capability\
    \ ........................................29\n      8.4. The MBB Procedures ........................................29\n\
    \           8.4.1. Terminology ........................................29\n  \
    \         8.4.2. Accepting Elements .................................30\n    \
    \       8.4.3. Procedures for Upstream LSR Change .................30\n      \
    \     8.4.4. Receiving a Label Mapping with MBB Status Code .....31\n        \
    \   8.4.5. Receiving a Notification with MBB Status Code ......31\n          \
    \ 8.4.6. Node Operation for MP2MP LSPs ......................32\n   9. Typed Wildcard\
    \ for mLDP FEC Element ............................32\n   10. Security Considerations\
    \ .......................................32\n   11. IANA Considerations ...........................................33\n\
    \   12. Acknowledgments ...............................................34\n  \
    \ 13. Contributing Authors ..........................................35\n   14.\
    \ References ....................................................37\n      14.1.\
    \ Normative References .....................................37\n      14.2. Informative\
    \ References ...................................37\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The LDP protocol is described in [RFC5036].  It defines\
    \ mechanisms\n   for setting up point-to-point (P2P) and multipoint-to-point (MP2P)\n\
    \   LSPs in the network.  This document describes extensions to LDP for\n   setting\
    \ up point-to-multipoint (P2MP) and multipoint-to-multipoint\n   (MP2MP) LSPs.\
    \  These are collectively referred to as multipoint LSPs\n   (MP LSPs).  A P2MP\
    \ LSP allows traffic from a single root (or ingress)\n   node to be delivered\
    \ to a number of leaf (or egress) nodes.  An MP2MP\n   LSP allows traffic from\
    \ multiple ingress nodes to be delivered to\n   multiple egress nodes.  Only a\
    \ single copy of the packet will be sent\n   to an LDP neighbor traversed by the\
    \ MP LSP.  This is accomplished\n   without the use of a multicast protocol in\
    \ the network.  There can be\n   several MP LSPs rooted at a given ingress node,\
    \ each with its own\n   identifier.\n   The solution assumes that the leaf nodes\
    \ of the MP LSP know the root\n   node and identifier of the MP LSP to which they\
    \ belong.  The\n   mechanisms for the distribution of this information are outside\
    \ the\n   scope of this document.  The specification of how an application can\n\
    \   use an MP LSP signaled by LDP is also outside the scope of this\n   document.\n\
    \   Related documents that may be of interest include [RFC6348],\n   [L3VPN-MCAST],\
    \ and [RFC4875].\n"
- title: 1.1.  Conventions Used in This Document
  contents:
  - "1.1.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n   All new fields shown as \"reserved\" in this document\
    \ MUST be set to\n   zero on transmission and MUST be ignored on receipt.\n"
- title: 1.2.  Terminology
  contents:
  - "1.2.  Terminology\n   Some of the following terminology is taken from [RFC6348].\n\
    \   mLDP:  Multipoint extensions for LDP.\n   P2P LSP:  An LSP that has one Ingress\
    \ LSR and one Egress LSR.\n   P2MP LSP:  An LSP that has one Ingress LSR and one\
    \ or more Egress\n      LSRs.\n   MP2P LSP:  An LSP that has one or more Ingress\
    \ LSRs and one unique\n      Egress LSR.\n   MP2MP LSP:  An LSP with a distinguished\
    \ root node that connects a set\n      of nodes, such that traffic sent by any\
    \ node in the LSP is\n      delivered to all others.\n   MP LSP:  A multipoint\
    \ LSP, either a P2MP or an MP2MP LSP.\n   Ingress LSR:  An Ingress LSR for a particular\
    \ LSP is an LSR that can\n      send a data packet along the LSP.  MP2MP LSPs\
    \ can have multiple\n      Ingress LSRs, P2MP LSPs have just one, and that node\
    \ is often\n      referred to as the \"root node\".\n   Egress LSR:  An Egress\
    \ LSR for a particular LSP is an LSR that can\n      remove a data packet from\
    \ that LSP for further processing.  P2P\n      and MP2P LSPs have only a single\
    \ egress node, but P2MP and MP2MP\n      LSPs can have multiple egress nodes.\n\
    \   Transit LSR:  An LSR that has reachability to the root of the MP LSP\n   \
    \   via a directly connected upstream LSR and one or more directly\n      connected\
    \ downstream LSRs.\n   Bud LSR:  An LSR that is an egress but also has one or\
    \ more directly\n      connected downstream LSRs.\n   Leaf node:  A leaf node\
    \ can be either an Egress or Bud LSR when\n      referred to in the context of\
    \ a P2MP LSP.  In the context of an\n      MP2MP LSP, a leaf is both Ingress and\
    \ Egress for the same MP2MP\n      LSP and can also be a Bud LSR.\n   CRC32: \
    \ This contains a Cyclic Redundancy Check value of the\n      uncompressed data\
    \ in network byte order computed according to\n      CRC-32 algorithm used in\
    \ the ISO 3309 standard [ISO3309] and in\n      Section 8.1.1.6.2 of ITU-T recommendation\
    \ V.42 [ITU.V42.1994].\n   FEC:    Forwarding Equivalence Class\n"
- title: 1.3.  Manageability
  contents:
  - "1.3.  Manageability\n   MPLS LSRs can be modeled and managed using the MIB module\
    \ defined in\n   [RFC3813].  That MIB module is fully capable of handling the\
    \ one-to-\n   many in-segment to out-segment relationships needed to support P2MP\n\
    \   LSPs, and no further changes are required.\n   [RFC3815] defines managed objects\
    \ for LDP.  The MIB module allows the\n   modeling and management of LDP and LDP\
    \ speakers for the protocol as\n   defined in [RFC5036].  The protocol extensions\
    \ defined in this\n   document to support P2MP in LDP may require an additional\
    \ MIB module\n   or extensions to the modules defined in [RFC3815].  This is for\n\
    \   future study, and at the time of this writing, no interest has been\n   expressed\
    \ in this work.\n   Future manageability work should pay attention to the protocol\n\
    \   extensions defined in this document, and specifically the\n   configurable\
    \ and variable elements, along with reporting the new\n   protocol fields that\
    \ identify individual P2MP LSPs.\n"
- title: 2.  Setting Up P2MP LSPs with LDP
  contents:
  - "2.  Setting Up P2MP LSPs with LDP\n   A P2MP LSP consists of a single root node,\
    \ zero or more transit\n   nodes, and one or more leaf nodes.  Leaf nodes initiate\
    \ P2MP LSP\n   setup and tear-down.  Leaf nodes also install forwarding state\
    \ to\n   deliver the traffic received on a P2MP LSP to wherever it needs to\n\
    \   go; how this is done is outside the scope of this document.  Transit\n   nodes\
    \ install MPLS forwarding state and propagate the P2MP LSP setup\n   (and tear-down)\
    \ toward the root.  The root node installs forwarding\n   state to map traffic\
    \ into the P2MP LSP; how the root node determines\n   which traffic should go\
    \ over the P2MP LSP is outside the scope of\n   this document.\n"
- title: 2.1.  Support for P2MP LSP Setup with LDP
  contents:
  - "2.1.  Support for P2MP LSP Setup with LDP\n   Support for the setup of P2MP LSPs\
    \ is advertised using LDP\n   capabilities as defined in [RFC5561].  An implementation\
    \ supporting\n   the P2MP procedures specified in this document MUST implement\
    \ the\n   procedures for Capability Parameters in Initialization messages.\n \
    \  A new Capability Parameter TLV is defined, the P2MP Capability.\n   Following\
    \ is the format of the P2MP Capability Parameter.\n       0                  \
    \ 1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |1|0| P2MP Capability (0x0508)  |      Length (= 1)             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |S|\
    \ Reserved    |\n      +-+-+-+-+-+-+-+-+\n   S: As specified in [RFC5561]\n  \
    \ The P2MP Capability TLV MUST be advertised in the LDP Initialization\n   message.\
    \  Advertisement of the P2MP Capability indicates support of\n   the procedures\
    \ for P2MP LSP setup detailed in this document.  If the\n   peer has not advertised\
    \ the corresponding capability, then label\n   messages using the P2MP FEC Element\
    \ SHOULD NOT be sent to the peer.\n"
- title: 2.2.  The P2MP FEC Element
  contents:
  - "2.2.  The P2MP FEC Element\n   For the setup of a P2MP LSP with LDP, we define\
    \ one new protocol\n   entity, the P2MP FEC Element, to be used as a FEC Element\
    \ in the FEC\n   TLV.  Note that the P2MP FEC Element does not necessarily identify\n\
    \   the traffic that must be mapped to the LSP, so from that point of\n   view,\
    \ the use of the term FEC is a misnomer.  The description of the\n   P2MP FEC\
    \ Element follows.\n   The P2MP FEC Element consists of the address of the root\
    \ of the P2MP\n   LSP and an opaque value.  The opaque value consists of one or\
    \ more\n   LDP MP opaque value elements.  The opaque value is unique within the\n\
    \   context of the root node.  The combination of (Root Node Address\n   type,\
    \ Root Node Address, Opaque Value) uniquely identifies a P2MP LSP\n   within the\
    \ MPLS network.\n   The P2MP FEC Element is encoded as follows:\n       0    \
    \               1                   2                   3\n       0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |P2MP Type(0x06)|        Address Family         | Address Length|\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ~\
    \                       Root Node Address                       ~\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |    Opaque Length              |    Opaque Value ...           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+                               +\n      ~\
    \                                                               ~\n      |   \
    \                                                            |\n      |      \
    \                         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |         \
    \                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Type:  The\
    \ type of the P2MP FEC Element is 0x06.\n   Address Family:  Two octet quantity\
    \ containing a value from IANA's\n      \"Address Family Numbers\" registry that\
    \ encodes the address family\n      for the Root LSR Address.\n   Address Length:\
    \  Length of the Root LSR Address in octets.\n   Root Node Address:  A host address\
    \ encoded according to the Address\n      Family field.\n   Opaque Length:  The\
    \ length of the opaque value, in octets.\n   Opaque Value:  One or more MP opaque\
    \ value elements, uniquely\n      identifying the P2MP LSP in the context of the\
    \ root node.  This is\n      described in the next section.\n   If the Address\
    \ Family is IPv4, the Address Length MUST be 4; if the\n   Address Family is IPv6,\
    \ the Address Length MUST be 16.  No other\n   Address Lengths are defined at\
    \ present.\n   If the Address Length doesn't match the defined length for the\n\
    \   Address Family, the receiver SHOULD abort processing the message\n   containing\
    \ the FEC Element, and send an \"Unknown FEC\" Notification\n   message to its\
    \ LDP peer signaling an error.\n   If a FEC TLV contains a P2MP FEC Element, the\
    \ P2MP FEC Element MUST\n   be the only FEC Element in the FEC TLV.\n"
- title: 2.3.  The LDP MP Opaque Value Element
  contents:
  - "2.3.  The LDP MP Opaque Value Element\n   The LDP MP opaque value element is\
    \ used in the P2MP and MP2MP FEC\n   Elements defined in subsequent sections.\
    \  It carries information that\n   is meaningful to Ingress LSRs and Leaf LSRs,\
    \ but need not be\n   interpreted by Transit LSRs.\n   The LDP MP opaque value\
    \ element basic type is encoded as follows:\n       0                   1    \
    \               2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Type < 255    | Length                        | Value ...     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+               |\n      ~\
    \                                                               ~\n      |   \
    \                                                            |\n      |      \
    \                         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |         \
    \                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Type:  The\
    \ Type of the LDP MP opaque value element.  IANA maintains a\n      registry of\
    \ basic types (see Section 11).\n   Length:  The length of the Value field, in\
    \ octets.\n   Value:  String of Length octets, to be interpreted as specified\
    \ by\n      the Type field.\n   The LDP MP opaque value element extended type\
    \ is encoded as follows:\n       0                   1                   2   \
    \                3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Type = 255    |        Extended Type          | Length (high) |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-|\n      |\
    \ Length (low)  |                Value                          |\n      +-+-+-+-+-+-+-+-+\
    \                                               |\n      ~                   \
    \                                            ~\n      |                      \
    \                                         |\n      |                         \
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |                            \
    \   |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Type:  Type = 255.\n   Extended\
    \ Type:  The Extended Type of the LDP MP opaque value element.\n      IANA maintains\
    \ a registry of extended types (see Section 11).\n   Length:  The length of the\
    \ Value field, in octets.\n   Value:  String of Length octets, to be interpreted\
    \ as specified by\n      the Type field.\n"
- title: 2.3.1.  The Generic LSP Identifier
  contents:
  - "2.3.1.  The Generic LSP Identifier\n   The generic LSP identifier is a type of\
    \ opaque value element basic\n   type encoded as follows:\n   Type:  1\n   Length:\
    \  4\n   Value:  A 32-bit integer, unique in the context of the root, as\n   \
    \   identified by the root's address.\n   This type of opaque value element is\
    \ recommended when mapping of\n   traffic to LSPs is non-algorithmic and is done\
    \ by means outside LDP.\n"
- title: 2.4.  Using the P2MP FEC Element
  contents:
  - "2.4.  Using the P2MP FEC Element\n   This section defines the rules for the processing\
    \ and propagation of\n   the P2MP FEC Element.  The following notation is used\
    \ in the\n   processing rules:\n   1. P2MP FEC Element <X, Y>: a FEC Element with\
    \ root node address X\n      and opaque value Y.\n   2. P2MP Label Mapping <X,\
    \ Y, L>: a Label Mapping message with a FEC\n      TLV with a single P2MP FEC\
    \ Element <X, Y> and Label TLV with label\n      L.  Label L MUST be allocated\
    \ from the per-platform label space\n      (see [RFC3031], Section 3.14) of the\
    \ LSR sending the Label Mapping\n      message.  The use of the interface label\
    \ space is outside the\n      scope of this document.\n   3. P2MP Label Withdraw\
    \ <X, Y, L>: a Label Withdraw message with a FEC\n      TLV with a single P2MP\
    \ FEC Element <X, Y> and Label TLV with label\n      L.\n   4. P2MP LSP <X, Y>\
    \ (or simply <X, Y>): a P2MP LSP with root node\n      address X and opaque value\
    \ Y.\n   5. The notation L' -> {<I1, L1> <I2, L2> ..., <In, Ln>} on LSR X\n  \
    \    means that on receiving a packet with label L', X makes n copies\n      of\
    \ the packet.  For copy i of the packet, X swaps L' with Li and\n      sends it\
    \ out over interface Ii.\n   The procedures below are organized by the role that\
    \ the node plays in\n   the P2MP LSP.  Node Z knows that it is a leaf node by\
    \ a discovery\n   process that is outside the scope of this document.  During\
    \ the\n   course of protocol operation, the root node recognizes its role\n  \
    \ because it owns the root node address.  A transit node is any node\n   (other\
    \ than the root node) that receives a P2MP Label Mapping message\n   (i.e., one\
    \ that has leaf nodes downstream of it).\n   Note that a transit node (and indeed\
    \ the root node) may also be a\n   leaf node.\n"
- title: 2.4.1.  Label Mapping
  contents:
  - "2.4.1.  Label Mapping\n   The remainder of this section specifies the procedures\
    \ for\n   originating P2MP Label Mapping messages and for processing received\n\
    \   P2MP Label Mapping messages for a particular LSP.  The procedures for\n  \
    \ a particular LSR depend upon the role that LSR plays in the LSP\n   (Ingress,\
    \ Transit, or Egress).\n   All labels discussed here are downstream-assigned [RFC5332]\
    \ except\n   those that are assigned using the procedures of Section 6.\n"
- title: 2.4.1.1.  Determining One's 'upstream LSR'
  contents:
  - "2.4.1.1.  Determining One's 'upstream LSR'\n   Each node that is either an Leaf\
    \ or Transit LSR of MP LSP needs to\n   use the procedures below to select an\
    \ upstream LSR.  A node Z that\n   wants to join an MP LSP <X, Y> determines the\
    \ LDP peer U that is Z's\n   next-hop on the best path from Z to the root node\
    \ X.  If there is\n   more than one such LDP peer, only one of them is picked.\
    \  U is Z's\n   \"upstream LSR\" for <X, Y>.\n   When there are several candidate\
    \ upstream LSRs, the LSR MUST select\n   one upstream LSR.  The algorithm used\
    \ for the LSR selection is a\n   local matter.  If the LSR selection is done over\
    \ a LAN interface and\n   the Section 6 procedures are applied, the following\
    \ procedure SHOULD\n   be applied to ensure that the same upstream LSR is elected\
    \ among a\n   set of candidate receivers on that LAN.\n   1. The candidate upstream\
    \ LSRs are numbered from lower to higher IP\n      address.\n   2. The following\
    \ hash is performed: H = (CRC32(Opaque Value)) modulo\n      N, where N is the\
    \ number of upstream LSRs.  The 'Opaque Value' is\n      the field identified\
    \ in the FEC Element right after 'Opaque\n      Length'.  The 'Opaque Length'\
    \ indicates the size of the opaque\n      value used in this calculation.\n  \
    \ 3. The selected upstream LSR U is the LSR that has the number H.\n   This procedure\
    \ will ensure that there is a single forwarder over the\n   LAN for a particular\
    \ LSP.\n"
- title: 2.4.1.2.  Determining the Forwarding Interface to an LSR
  contents:
  - "2.4.1.2.  Determining the Forwarding Interface to an LSR\n   Suppose LSR U receives\
    \ an MP Label Mapping message from a downstream\n   LSR D, specifying label L.\
    \  Suppose further that U is connected to D\n   over several LDP enabled interfaces\
    \ or RSVP-TE Tunnel interfaces.  If\n   U needs to transmit to D a data packet\
    \ whose top label is L, U is\n   free to transmit the packet on any of those interfaces.\
    \  The\n   algorithm it uses to choose a particular interface and next-hop for\
    \ a\n   particular such packet is a local matter.  For completeness, the\n   following\
    \ procedure MAY be used.  LSR U may do a lookup in the\n   unicast routing table\
    \ to find the best interface and next-hop to\n   reach LSR D. If the next-hop\
    \ and interface are also advertised by LSR\n   D via the LDP session, it can be\
    \ used to transmit the packet to LSR\n   D.\n"
- title: 2.4.1.3.  Leaf Operation
  contents:
  - "2.4.1.3.  Leaf Operation\n   A leaf node Z of P2MP LSP <X, Y> determines its\
    \ upstream LSR U for\n   <X, Y> as per Section 2.4.1.1, allocates a label L, and\
    \ sends a P2MP\n   Label Mapping <X, Y, L> to U.\n"
- title: 2.4.1.4.  Transit Node Operation
  contents:
  - "2.4.1.4.  Transit Node Operation\n   Suppose a transit node Z receives a P2MP\
    \ Label Mapping <X, Y, L> from\n   LSR T.  Z checks whether it already has state\
    \ for <X, Y>.  If not, Z\n   determines its upstream LSR U for <X, Y> as per Section\
    \ 2.4.1.1.\n   Using this Label Mapping to update the label forwarding table MUST\n\
    \   NOT be done as long as LSR T is equal to LSR U.  If LSR U is\n   different\
    \ from LSR T, Z will allocate a label L', and install state\n   to swap L' with\
    \ L over interface I associated with LSR T and send a\n   P2MP Label Mapping <X,\
    \ Y, L'> to LSR U.  Interface I is determined\n   via the procedures in Section\
    \ 2.4.1.2.\n   If Z already has state for <X, Y>, then Z does not send a Label\n\
    \   Mapping message for P2MP LSP <X, Y>.  If LSR T is not equal to the\n   upstream\
    \ LSR of <X, Y> and <I, L> does not already exist as\n   forwarding state, the\
    \ forwarding state is updated.  Assuming its old\n   forwarding state was L'->\
    \ {<I1, L1> <I2, L2> ..., <In, Ln>}, its new\n   forwarding state becomes L'->\
    \ {<I1, L1> <I2, L2> ..., <In, Ln>, <I,\n   L>}.  If LSR T is equal to the installed\
    \ upstream LSR, the Label\n   Mapping from LSR T MUST be retained and MUST NOT\
    \ update the label\n   forwarding table.\n"
- title: 2.4.1.5.  Root Node Operation
  contents:
  - "2.4.1.5.  Root Node Operation\n   Suppose the root node Z receives a P2MP Label\
    \ Mapping <X, Y, L> from\n   LSR T.  Z checks whether it already has forwarding\
    \ state for <X, Y>.\n   If not, Z creates forwarding state to push label L onto\
    \ the traffic\n   that Z wants to forward over the P2MP LSP (how this traffic\
    \ is\n   determined is outside the scope of this document).\n   If Z already has\
    \ forwarding state for <X, Y>, then Z adds \"push label\n   L, send over interface\
    \ I\" to the next hop, where I is the interface\n   associated with LSR T and\
    \ determined via the procedures in Section\n   2.4.1.2.\n"
- title: 2.4.2.  Label Withdraw
  contents:
  - "2.4.2.  Label Withdraw\n   The following section lists procedures for generating\
    \ and processing\n   P2MP Label Withdraw messages for nodes that participate in\
    \ a P2MP\n   LSP.  An LSR should apply those procedures that apply to it, based\
    \ on\n   its role in the P2MP LSP.\n"
- title: 2.4.2.1.  Leaf Operation
  contents:
  - "2.4.2.1.  Leaf Operation\n   If a leaf node Z discovers that it has no downstream\
    \ neighbors in\n   that LSP, and that it has no need to be an Egress LSR for that\
    \ LSP\n   (by means outside the scope of this document), then it SHOULD send a\n\
    \   Label Withdraw <X, Y, L> to its upstream LSR U for <X, Y>, where L is\n  \
    \ the label it had previously advertised to U for <X, Y>.\n"
- title: 2.4.2.2.  Transit Node Operation
  contents:
  - "2.4.2.2.  Transit Node Operation\n   If a transit node Z receives a Label Withdraw\
    \ message <X, Y, L> from\n   a node W, it deletes label L from its forwarding\
    \ state and sends a\n   Label Release message with label L to W.\n   If deleting\
    \ L from Z's forwarding state for P2MP LSP <X, Y> results\n   in no state remaining\
    \ for <X, Y>, then Z propagates the Label\n   Withdraw for <X, Y> to its upstream\
    \ T, by sending a Label Withdraw\n   <X, Y, L1> where L1 is the label Z had previously\
    \ advertised to T for\n   <X, Y>.\n"
- title: 2.4.2.3.  Root Node Operation
  contents:
  - "2.4.2.3.  Root Node Operation\n   When the root node of a P2MP LSP receives a\
    \ Label Withdraw message,\n   the procedures are the same as those for transit\
    \ nodes, except that\n   it would not propagate the Label Withdraw upstream (as\
    \ it has no\n   upstream).\n"
- title: 2.4.3.  Upstream LSR Change
  contents:
  - "2.4.3.  Upstream LSR Change\n   Suppose that for a given node Z participating\
    \ in a P2MP LSP <X, Y>,\n   the upstream LSR changes from U to U' as per Section\
    \ 2.4.1.1.  Z MUST\n   update its forwarding state as follows.  It allocates a\
    \ new label,\n   L', for <X, Y>.  The forwarding state for L' is copied from the\n\
    \   forwarding state for L, with one exception: if U' was present in the\n   forwarding\
    \ state of L, it MUST NOT be installed in the forwarding\n   state of L'.  Then\
    \ the forwarding state for L is deleted and the\n   forwarding state for L' is\
    \ installed.  In addition, Z MUST send a\n   Label Mapping <X, Y, L'> to U' and\
    \ send a Label Withdraw <X, Y, L> to\n   U.  Note, if there was a downstream mapping\
    \ from U that was not\n   installed in the forwarding due to the procedures defined\
    \ in Section\n   2.4.1.4, it can now be installed.\n   While changing the upstream\
    \ LSR, the following must be taken into\n   consideration.  If L' is added before\
    \ L is removed, there is a\n   potential risk of packet duplication and/or the\
    \ creation of a\n   transient data-plane forwarding loop.  If L is removed before\
    \ L' is\n   added, packet loss may result.  Ideally the change from L to L' is\n\
    \   done atomically such that no packet loss or duplication occurs.  If\n   that\
    \ is not possible, the RECOMMENDED default behavior is to remove L\n   before\
    \ adding L'.\n"
- title: 3.  Setting up MP2MP LSPs with LDP
  contents:
  - "3.  Setting up MP2MP LSPs with LDP\n   An MP2MP LSP is much like a P2MP LSP in\
    \ that it consists of a single\n   root node, zero or more transit nodes, and\
    \ one or more Leaf LSRs\n   acting equally an as Ingress or Egress LSR.  A leaf\
    \ node participates\n   in the setup of an MP2MP LSP by establishing both a downstream\
    \ LSP,\n   which is much like a P2MP LSP from the root, and an upstream LSP,\n\
    \   which is used to send traffic toward the root and other leaf nodes.\n   Transit\
    \ nodes support the setup by propagating the upstream and\n   downstream LSP setup\
    \ toward the root and installing the necessary\n   MPLS forwarding state.  The\
    \ transmission of packets from the root\n   node of an MP2MP LSP to the receivers\
    \ is identical to that for a P2MP\n   LSP.  Traffic from a downstream node follows\
    \ the upstream LSP toward\n   the root node and branches downward along the downstream\
    \ LSP as\n   required to reach other leaf nodes.  A packet that is received from\
    \ a\n   downstream node MUST never be forwarded back out to that same node.\n\
    \   Mapping traffic to the MP2MP LSP may happen at any leaf node.  How\n   that\
    \ mapping is established is outside the scope of this document.\n   Due to how\
    \ an MP2MP LSP is built, a Leaf LSR that is sending packets\n   on the MP2MP LSP\
    \ does not receive its own packets.  There is also no\n   additional mechanism\
    \ needed on the root or Transit LSR to match\n   upstream traffic to the downstream\
    \ forwarding state.  Packets that\n   are forwarded over an MP2MP LSP will not\
    \ traverse a link more than\n   once, with the possible exception of LAN links\
    \ (see Section 3.3.1),\n   if the procedures of [RFC5331] are not provided.\n"
- title: 3.1.  Support for MP2MP LSP Setup with LDP
  contents:
  - "3.1.  Support for MP2MP LSP Setup with LDP\n   Support for the setup of MP2MP\
    \ LSPs is advertised using LDP\n   capabilities as defined in [RFC5561].  An implementation\
    \ supporting\n   the MP2MP procedures specified in this document MUST implement\
    \ the\n   procedures for Capability Parameters in Initialization messages.\n \
    \  A new Capability Parameter TLV is defined, the MP2MP Capability.\n   Following\
    \ is the format of the MP2MP Capability Parameter.\n       0                 \
    \  1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |1|0| MP2MP Capability (0x0509) |      Length (= 1)             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |S|\
    \ Reserved    |\n      +-+-+-+-+-+-+-+-+\n   S: As specified in [RFC5561]\n  \
    \ The MP2MP Capability TLV MUST be advertised in the LDP Initialization\n   message.\
    \  Advertisement of the MP2MP Capability indicates support of\n   the procedures\
    \ for MP2MP LSP setup detailed in this document.  If the\n   peer has not advertised\
    \ the corresponding capability, then label\n   messages using the MP2MP upstream\
    \ and downstream FEC Elements SHOULD\n   NOT be sent to the peer.\n"
- title: 3.2.  The MP2MP Downstream and Upstream FEC Elements
  contents:
  - "3.2.  The MP2MP Downstream and Upstream FEC Elements\n   For the setup of an\
    \ MP2MP LSP with LDP, we define 2 new protocol\n   entities, the MP2MP downstream\
    \ FEC and upstream FEC Element.  Both\n   elements will be used as FEC Elements\
    \ in the FEC TLV.  Note that the\n   MP2MP FEC Elements do not necessarily identify\
    \ the traffic that must\n   be mapped to the LSP, so from that point of view,\
    \ the use of the term\n   FEC is a misnomer.  The description of the MP2MP FEC\
    \ Elements follow.\n   The structure, encoding, and error handling for the MP2MP\
    \ downstream\n   and upstream FEC Elements are the same as for the P2MP FEC Element\n\
    \   described in Section 2.2.  The difference is that two new FEC types\n   are\
    \ used: MP2MP downstream type (0x08) and MP2MP upstream type\n   (0x07).\n   If\
    \ a FEC TLV contains an MP2MP FEC Element, the MP2MP FEC Element\n   MUST be the\
    \ only FEC Element in the FEC TLV.\n   Note, except when using the procedures\
    \ of [RFC5331], the MPLS labels\n   used are \"downstream-assigned\" [RFC5332],\
    \ even if they are bound to\n   the \"upstream FEC Element\".\n"
- title: 3.3.  Using the MP2MP FEC Elements
  contents:
  - "3.3.  Using the MP2MP FEC Elements\n   This section defines the rules for the\
    \ processing and propagation of\n   the MP2MP FEC Elements.  The following notation\
    \ is used in the\n   processing rules:\n   1.  MP2MP downstream LSP <X, Y> (or\
    \ simply downstream <X, Y>): an\n       MP2MP LSP downstream path with root node\
    \ address X and opaque\n       value Y.\n   2.  MP2MP upstream LSP <X, Y, D> (or\
    \ simply upstream <X, Y, D>): an\n       MP2MP LSP upstream path for downstream\
    \ node D with root node\n       address X and opaque value Y.\n   3.  MP2MP downstream\
    \ FEC Element <X, Y>: a FEC Element with root node\n       address X and opaque\
    \ value Y used for a downstream MP2MP LSP.\n   4.  MP2MP upstream FEC Element\
    \ <X, Y>: a FEC Element with root node\n       address X and opaque value Y used\
    \ for an upstream MP2MP LSP.\n   5.  MP2MP-D Label Mapping <X, Y, L>: a Label\
    \ Mapping message with a\n       FEC TLV with a single MP2MP downstream FEC Element\
    \ <X, Y> and\n       label TLV with label L.  Label L MUST be allocated from the\
    \ per-\n       platform label space (see [RFC3031], Section 3.14) of the LSR\n\
    \       sending the Label Mapping message.  The use of the interface\n       label\
    \ space is outside the scope of this document.\n   6.  MP2MP-U Label Mapping <X,\
    \ Y, Lu>: a Label Mapping message with a\n       FEC TLV with a single MP2MP upstream\
    \ FEC Element <X, Y> and label\n       TLV with label Lu.  Label Lu MUST be allocated\
    \ from the per-\n       platform label space (see [RFC3031], Section 3.14) of\
    \ the LSR\n       sending the Label Mapping message.  The use of the interface\n\
    \       label space is outside the scope of this document.\n   7.  MP2MP-D Label\
    \ Withdraw <X, Y, L>: a Label Withdraw message with a\n       FEC TLV with a single\
    \ MP2MP downstream FEC Element <X, Y> and\n       label TLV with label L.\n  \
    \ 8.  MP2MP-U Label Withdraw <X, Y, Lu>: a Label Withdraw message with\n     \
    \  a FEC TLV with a single MP2MP upstream FEC Element <X, Y> and\n       label\
    \ TLV with label Lu.\n   9.  MP2MP-D Label Release <X, Y, L>: a Label Release\
    \ message with a\n       FEC TLV with a single MP2MP downstream FEC Element <X,\
    \ Y> and\n       Label TLV with label L.\n   10. MP2MP-U Label Release <X, Y,\
    \ Lu>: a Label Release message with a\n       FEC TLV with a single MP2MP upstream\
    \ FEC Element <X, Y> and label\n       TLV with label Lu.\n   The procedures below\
    \ are organized by the role which the node plays\n   in the MP2MP LSP.  Node Z\
    \ knows that it is a leaf node by a discovery\n   process that is outside the\
    \ scope of this document.  During the\n   course of the protocol operation, the\
    \ root node recognizes its role\n   because it owns the root node address.  A\
    \ transit node is any node\n   (other then the root node) that receives an MP2MP\
    \ Label Mapping\n   message (i.e., one that has leaf nodes downstream of it).\n\
    \   Note that a transit node (and indeed the root node) may also be a\n   leaf\
    \ node and the root node does not have to be an Ingress LSR or a\n   leaf of the\
    \ MP2MP LSP.\n"
- title: 3.3.1.  MP2MP Label Mapping
  contents:
  - "3.3.1.  MP2MP Label Mapping\n   The remainder of this section specifies the procedures\
    \ for\n   originating MP2MP Label Mapping messages and for processing received\n\
    \   MP2MP Label Mapping messages for a particular LSP.  The procedures\n   for\
    \ a particular LSR depend upon the role that the LSR plays in the\n   LSP (Ingress,\
    \ Transit, or Egress).\n   All labels discussed here are downstream-assigned [RFC5332]\
    \ except\n   those that are assigned using the procedures of Section 6.\n"
- title: 3.3.1.1.  Determining one's upstream MP2MP LSR
  contents:
  - "3.3.1.1.  Determining one's upstream MP2MP LSR\n   Determining the upstream LDP\
    \ peer U for an MP2MP LSP <X, Y> follows\n   the procedure for a P2MP LSP described\
    \ in Section 2.4.1.1.\n"
- title: 3.3.1.2.  Determining One's Downstream MP2MP LSR
  contents:
  - "3.3.1.2.  Determining One's Downstream MP2MP LSR\n   An LDP peer U that receives\
    \ an MP2MP-D Label Mapping from an LDP peer\n   D will treat D as downstream MP2MP\
    \ LSR.\n"
- title: 3.3.1.3.  Installing the Upstream Path of an MP2MP LSP
  contents:
  - "3.3.1.3.  Installing the Upstream Path of an MP2MP LSP\n   There are two methods\
    \ for installing the upstream path of an MP2MP\n   LSP to a downstream neighbor.\n\
    \   1. We can install the upstream MP2MP path (to a downstream neighbor)\n   \
    \   based on receiving an MP2MP-D Label Mapping from the downstream\n      neighbor.\
    \  This will install the upstream path on a hop-by-hop\n      basis.\n   2. We\
    \ install the upstream MP2MP path (to a downstream neighbor)\n      based on receiving\
    \ an MP2MP-U Label Mapping from the upstream\n      neighbor.  An LSR does not\
    \ need to wait for the MP2MP-U Label\n      Mapping if it is the root of the MP2MP\
    \ LSP or if it already\n      received an MP2MP-U Label Mapping from the upstream\
    \ neighbor.  We\n      call this method ordered mode.  The typical result of this\
    \ mode is\n      that the downstream path of the MP2MP is built hop by hop towards\n\
    \      the root.  Once the root is reached, the root node will trigger an\n  \
    \    MP2MP-U Label Mapping to the downstream neighbor(s).\n   For setting up the\
    \ upstream path of an MP2MP LSP, ordered mode SHOULD\n   be used.  Due to ordered\
    \ mode, the upstream path of the MP2MP LSP is\n   installed at the leaf node once\
    \ the path to the root has completed.\n   The advantage is that when a leaf starts\
    \ sending immediately after\n   the upstream path is installed, packets are able\
    \ to reach the root\n   node without being dropped due to an incomplete LSP. \
    \ Method 1 is not\n   able to guarantee that the upstream path has completed before\
    \ the\n   leaf starts sending.\n"
- title: 3.3.1.4.  MP2MP Leaf Node Operation
  contents:
  - "3.3.1.4.  MP2MP Leaf Node Operation\n   A leaf node Z of an MP2MP LSP <X, Y>\
    \ determines its upstream LSR U\n   for <X, Y> as per Section 3.3.1.1, allocates\
    \ a label L, and sends an\n   MP2MP-D Label Mapping <X, Y, L> to U.\n   Leaf node\
    \ Z expects an MP2MP-U Label Mapping <X, Y, Lu> from node U\n   in response to\
    \ the MP2MP-D Label Mapping it sent to node U.  Z checks\n   whether it already\
    \ has forwarding state for upstream <X, Y>.  If not,\n   Z creates forwarding\
    \ state to push label Lu onto the traffic that Z\n   wants to forward over the\
    \ MP2MP LSP.  How it determines what traffic\n   to forward on this MP2MP LSP\
    \ is outside the scope of this document.\n"
- title: 3.3.1.5.  MP2MP Transit Node Operation
  contents:
  - "3.3.1.5.  MP2MP Transit Node Operation\n   Suppose node Z receives an MP2MP-D\
    \ Label Mapping <X, Y, L> from LSR\n   D.  Z checks whether it has forwarding\
    \ state for downstream <X, Y>.\n   If not, Z determines its upstream LSR U for\
    \ <X, Y> as per Section\n   3.3.1.1.  Using this Label Mapping to update the label\
    \ forwarding\n   table MUST NOT be done as long as LSR D is equal to LSR U.  If\
    \ LSR U\n   is different from LSR D, Z will allocate a label L' and install\n\
    \   downstream forwarding state to swap label L' with label L over\n   interface\
    \ I associated with LSR D and send an MP2MP-D Label Mapping\n   <X, Y, L'> to\
    \ U.  Interface I is determined via the procedures in\n   Section 2.4.1.2.\n \
    \  If Z already has forwarding state for downstream <X, Y>, all that Z\n   needs\
    \ to do in this case is check that LSR D is not equal to the\n   upstream LSR\
    \ of <X, Y> and update its forwarding state.  Assuming its\n   old forwarding\
    \ state was L'-> {<I1, L1> <I2, L2> ..., <In, Ln>}, its\n   new forwarding state\
    \ becomes L'-> {<I1, L1> <I2, L2> ..., <In, Ln>,\n   <I, L>}.  If the LSR D is\
    \ equal to the installed upstream LSR, the\n   Label Mapping from LSR D MUST be\
    \ retained and MUST NOT update the\n   label forwarding table.\n   Node Z checks\
    \ if upstream LSR U already assigned a label Lu to\n   <X, Y>.  If not, transit\
    \ node Z waits until it receives an MP2MP-U\n   Label Mapping <X, Y, Lu> from\
    \ LSR U (see Section 3.3.1.3).  Once the\n   MP2MP-U Label Mapping is received\
    \ from LSR U, node Z checks whether\n   it already has forwarding state upstream\
    \ <X, Y, D>.  If it does, then\n   no further action needs to happen.  If it does\
    \ not, it allocates a\n   label Lu' and creates a new label swap for Lu' with\
    \ label Lu over\n   interface Iu.  Interface Iu is determined via the procedures\
    \ in\n   Section 2.4.1.2.  In addition, it also adds the label swap(s) from\n\
    \   the forwarding state downstream <X, Y>, omitting the swap on\n   interface\
    \ I for node D.  The swap on interface I for node D is\n   omitted to prevent\
    \ a packet originated by D to be forwarded back to\n   D.\n   Node Z determines\
    \ the downstream MP2MP LSR as per Section 3.3.1.2,\n   and sends an MP2MP-U Label\
    \ Mapping <X, Y, Lu'> to node D.\n"
- title: 3.3.1.6.  MP2MP Root Node Operation
  contents:
  - '3.3.1.6.  MP2MP Root Node Operation

    '
- title: 3.3.1.6.1.  Root Node Is Also a Leaf
  contents:
  - "3.3.1.6.1.  Root Node Is Also a Leaf\n   Suppose root/leaf node Z receives an\
    \ MP2MP-D Label Mapping <X, Y, L>\n   from node D.  Z checks whether it already\
    \ has forwarding state\n   downstream <X, Y>.  If not, Z creates downstream forwarding\
    \ state to\n   push label L on traffic that Z wants to forward down the MP2MP\
    \ LSP.\n   How it determines what traffic to forward on this MP2MP LSP is\n  \
    \ outside the scope of this document.  If Z already has forwarding\n   state for\
    \ downstream <X, Y>, then Z will add the label push for L\n   over interface I\
    \ to it.  Interface I is determined via the procedures\n   in Section 2.4.1.2.\n\
    \   Node Z checks if it has forwarding state for upstream <X, Y, D>.  If\n   not,\
    \ Z allocates a label Lu' and creates upstream forwarding state to\n   swap Lu'\
    \ with the label swap(s) from the forwarding state downstream\n   <X, Y>, except\
    \ the swap on interface I for node D.  This allows\n   upstream traffic to go\
    \ down the MP2MP to other node(s), except the\n   node from which the traffic\
    \ was received.  Node Z determines the\n   downstream MP2MP LSR as per section\
    \ Section 3.3.1.2, and sends an\n   MP2MP-U Label Mapping <X, Y, Lu'> to node\
    \ D.  Since Z is the root of\n   the tree, Z will not send an MP2MP-D Label Mapping\
    \ and will not\n   receive an MP2MP-U Label Mapping.\n"
- title: 3.3.1.6.2.  Root Node is Not a Leaf
  contents:
  - "3.3.1.6.2.  Root Node is Not a Leaf\n   Suppose the root node Z receives an MP2MP-D\
    \ Label Mapping <X, Y, L>\n   from node D.  Z checks whether it already has forwarding\
    \ state for\n   downstream <X, Y>.  If not, Z creates downstream forwarding state\
    \ and\n   installs a outgoing label L over interface I.  Interface I is\n   determined\
    \ via the procedures in Section 2.4.1.2.  If Z already has\n   forwarding state\
    \ for downstream <X, Y>, then Z will add label L over\n   interface I to the existing\
    \ state.\n   Node Z checks if it has forwarding state for upstream <X, Y, D>.\
    \  If\n   not, Z allocates a label Lu' and creates forwarding state to swap Lu'\n\
    \   with the label swap(s) from the forwarding state downstream <X, Y>,\n   except\
    \ the swap for node D.  This allows upstream traffic to go down\n   the MP2MP\
    \ to other node(s), except the node from which it was\n   received.  Root node\
    \ Z determines the downstream MP2MP LSR D as per\n   Section 3.3.1.2, and sends\
    \ an MP2MP-U Label Mapping <X, Y, Lu'> to\n   it.  Since Z is the root of the\
    \ tree, Z will not send an MP2MP-D\n   Label Mapping and will not receive an MP2MP-U\
    \ Label Mapping.\n"
- title: 3.3.2.  MP2MP Label Withdraw
  contents:
  - "3.3.2.  MP2MP Label Withdraw\n   The following section lists procedures for generating\
    \ and processing\n   MP2MP Label Withdraw messages for nodes that participate\
    \ in an MP2MP\n   LSP.  An LSR should apply those procedures that apply to it,\
    \ based on\n   its role in the MP2MP LSP.\n"
- title: 3.3.2.1.  MP2MP Leaf Operation
  contents:
  - "3.3.2.1.  MP2MP Leaf Operation\n   If a leaf node Z discovers (by means outside\
    \ the scope of this\n   document) that it has no downstream neighbors in that\
    \ LSP and that it\n   has no need to be an Egress LSR for that LSP (by means outside\
    \ the\n   scope of this document), then it SHOULD send an MP2MP-D Label\n   Withdraw\
    \ <X, Y, L> to its upstream LSR U for <X, Y>, where L is the\n   label it had\
    \ previously advertised to U for <X,Y>.  Leaf node Z will\n   also send an unsolicited\
    \ label release <X, Y, Lu> to U to indicate\n   that the upstream path is no longer\
    \ used and that label Lu can be\n   removed.\n   Leaf node Z expects the upstream\
    \ router U to respond by sending a\n   downstream label release for L.\n"
- title: 3.3.2.2.  MP2MP Transit Node Operation
  contents:
  - "3.3.2.2.  MP2MP Transit Node Operation\n   If a transit node Z receives an MP2MP-D\
    \ Label Withdraw message\n   <X, Y, L> from node D, it deletes label L from its\
    \ forwarding state\n   downstream <X, Y> and from all its upstream states for\
    \ <X, Y>.  Node\n   Z sends an MP2MP-D Label Release message with label L to D.\
    \  Since\n   node D is no longer part of the downstream forwarding state, Z cleans\n\
    \   up the forwarding state upstream <X, Y, D>.  There is no need to send\n  \
    \ an MP2MP-U Label Withdraw <X, Y, Lu> to D because node D already\n   removed\
    \ Lu and sent a label release for Lu to Z.\n   If deleting L from Z's forwarding\
    \ state for downstream <X, Y> results\n   in no state remaining for <X, Y>, then\
    \ Z propagates the MP2MP-D Label\n   Withdraw <X, Y, L> to its upstream node U\
    \ for <X, Y> and will also\n   send an unsolicited MP2MP-U Label Release <X, Y,\
    \ Lu> to U to indicate\n   that the upstream path is no longer used and that label\
    \ Lu can be\n   removed.\n"
- title: 3.3.2.3.  MP2MP Root Node Operation
  contents:
  - "3.3.2.3.  MP2MP Root Node Operation\n   When the root node of an MP2MP LSP receives\
    \ an MP2MP-D Label Withdraw\n   message, the procedure is the same as that for\
    \ transit nodes, except\n   that the root node will not propagate the Label Withdraw\
    \ upstream (as\n   it has no upstream).\n"
- title: 3.3.3.  MP2MP Upstream LSR Change
  contents:
  - "3.3.3.  MP2MP Upstream LSR Change\n   The procedure for changing the upstream\
    \ LSR is the same as documented\n   in Section 2.4.3, except it is applied to\
    \ MP2MP FECs, using the\n   procedures described in Section 3.3.1 through Section\
    \ 3.3.2.3.\n"
- title: 4.  Micro-Loops in MP LSPs
  contents:
  - "4.  Micro-Loops in MP LSPs\n   Micro-loops created by the unicast routing protocol\
    \ during\n   convergence may also effect mLDP MP LSPs.  Since the tree building\n\
    \   logic in mLDP is based on unicast routing, a unicast routing loop may\n  \
    \ also result in a micro-loop in the MP LSPs.  Micro-loops that involve\n   2\
    \ directly connected routers don't create a loop in mLDP.  mLDP is\n   able to\
    \ prevent this inconsistency by never allowing an upstream LDP\n   neighbor to\
    \ be added as a downstream LDP neighbor into the Label\n   Forwarding Table (LFT)\
    \ for the same FEC.  Micro-loops that involve\n   more than 2 LSRs are not prevented.\n\
    \   Micro-loops that involve more than 2 LSRs may create a micro-loop in\n   the\
    \ downstream path of either an MP2MP LSP or P2MP LSP and the\n   upstream path\
    \ of the MP2MP LSP.  The loops are transient and will\n   disappear as soon as\
    \ the unicast routing protocol converges and mLDP\n   has updated the forwarding\
    \ state accordingly.  Micro-loops that occur\n   in the upstream path of an MP2MP\
    \ LSP may be detected by including LDP\n   path vector in the MP2MP-U Label Mapping\
    \ messages.  These procedures\n   are currently under investigation and are subjected\
    \ to further study.\n"
- title: 5.  The LDP MP Status TLV
  contents:
  - "5.  The LDP MP Status TLV\n   An LDP MP capable router MAY use an LDP MP Status\
    \ TLV to indicate\n   additional status for an MP LSP to its remote peers.  This\
    \ includes\n   signaling to peers that are either upstream or downstream of the\
    \ LDP\n   MP capable router.  The value of the LDP MP Status TLV will remain\n\
    \   opaque to LDP and MAY encode one or more status elements.\n   The LDP MP Status\
    \ TLV is encoded as follows:\n       0                   1                   2\
    \                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |1|0| LDP MP Status Type(0x096F)|            Length             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                           Value                               |\n      ~   \
    \                                                            ~\n      |      \
    \                         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |         \
    \                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   LDP MP Status\
    \ Type:  The LDP MP Status (0x096F).\n   Length:  Length of the LDP MP Status\
    \ Value in octets.\n   Value:  One or more LDP MP Status Value elements.\n"
- title: 5.1.  The LDP MP Status Value Element
  contents:
  - "5.1.  The LDP MP Status Value Element\n   The LDP MP Status Value Element that\
    \ is included in the LDP MP Status\n   TLV Value has the following encoding.\n\
    \       0                   1                   2                   3\n      \
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Type          | Length                        | Value ...     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+               |\n      ~\
    \                                                               ~\n      |   \
    \                                                            |\n      |      \
    \                         +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |         \
    \                      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Type:  The\
    \ type of the LDP MP Status Value Element.  IANA maintains a\n      registry of\
    \ status value types (see Section 11).\n   Length:  The length of the Value field,\
    \ in octets.\n   Value:  String of Length octets, to be interpreted as specified\
    \ by\n      the Type field.\n"
- title: 5.2.  LDP Messages Containing LDP MP Status Messages
  contents:
  - "5.2.  LDP Messages Containing LDP MP Status Messages\n   The LDP MP Status TLV\
    \ may appear either in a Label Mapping message or\n   an LDP Notification message.\n"
- title: 5.2.1.  LDP MP Status Sent in LDP Notification Messages
  contents:
  - "5.2.1.  LDP MP Status Sent in LDP Notification Messages\n   An LDP MP Status\
    \ TLV sent in a notification message must be\n   accompanied with a Status TLV,\
    \ as described in [RFC5036].  The\n   general format of the Notification message\
    \ with an LDP MP Status TLV\n   is:\n       0                   1            \
    \       2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |0|   Notification (0x0001)     |      Message Length           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                       Message ID                              |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                       Status TLV                              |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                   LDP MP Status TLV                           |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                 Optional LDP MP FEC TLV                       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                 Optional Label TLV                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The Status TLV status code is used to indicate that LDP MP Status TLV\n  \
    \ and any additional information follows in the Notification message's\n   \"\
    optional parameter\" section.  Depending on the actual contents of\n   the LDP\
    \ MP Status TLV, an LDP P2MP or MP2MP FEC TLV and a Label TLV\n   may also be\
    \ present to provide context to the LDP MP Status TLV.\n   Since the notification\
    \ does not refer to any particular message, the\n   Message ID and Message Type\
    \ fields are set to 0.\n"
- title: 5.2.2.  LDP MP Status TLV in Label Mapping Message
  contents:
  - "5.2.2.  LDP MP Status TLV in Label Mapping Message\n   An example of the Label\
    \ Mapping message defined in [RFC5036] is shown\n   below to illustrate the message\
    \ with an Optional LDP MP Status TLV\n   present.\n       0                  \
    \ 1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |0|   Label Mapping (0x0400)    |      Message Length           |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                     Message ID                                |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                     FEC TLV                                   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                     Label TLV                                 |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                     Optional LDP MP Status TLV                |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                     Additional Optional Parameters            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"
- title: 6.  Upstream Label Allocation on a LAN
  contents:
  - "6.  Upstream Label Allocation on a LAN\n   On a LAN, the procedures so far discussed\
    \ would require the upstream\n   LSR to send a copy of the packet to each receiver\
    \ individually.  If\n   there is more than one receiver on the LAN, we don't take\
    \ full\n   benefit of the multi-access capability of the network.  We may\n  \
    \ optimize the bandwidth consumption on the LAN and replication\n   overhead on\
    \ the upstream LSR by using upstream label allocation\n   [RFC5331].  Procedures\
    \ on how to distribute upstream labels using LDP\n   is documented in [RFC6389].\n"
- title: 6.1.  LDP Multipoint-to-Multipoint on a LAN
  contents:
  - "6.1.  LDP Multipoint-to-Multipoint on a LAN\n   The procedure to allocate a context\
    \ label on a LAN is defined in\n   [RFC5331].  That procedure results in each\
    \ LSR on a given LAN having\n   a context label which, on that LAN, can be used\
    \ to identify itself\n   uniquely.  Each LSR advertises its context label as an\
    \ upstream-\n   assigned label, following the procedures of [RFC6389].  Any LSR\
    \ for\n   which the LAN is a downstream link on some P2MP or MP2MP LSP will\n\
    \   allocate an upstream-assigned label identifying that LSP.  When the\n   LSR\
    \ forwards a packet downstream on one of those LSPs, the packet's\n   top label\
    \ must be the LSR's context label, and the packet's second\n   label is the label\
    \ identifying the LSP.  We will call the top label\n   the \"upstream LSR label\"\
    \ and the second label the \"LSP label\".\n"
- title: 6.1.1.  MP2MP Downstream Forwarding
  contents:
  - "6.1.1.  MP2MP Downstream Forwarding\n   The downstream path of an MP2MP LSP is\
    \ much like a normal P2MP LSP,\n   so we will use the same procedures as those\
    \ defined in [RFC6389].  A\n   label request for an LSP label is sent to the upstream\
    \ LSR.  The\n   Label Mapping that is received from the upstream LSR contains\
    \ the LSP\n   label for the MP2MP FEC and the upstream LSR context label.  The\n\
    \   MP2MP downstream path (corresponding to the LSP label) will be\n   installed\
    \ in the context-specific forwarding table corresponding to\n   the upstream LSR\
    \ label.  Packets sent by the upstream router can be\n   forwarded downstream\
    \ using this forwarding state based on a two-label\n   lookup.\n"
- title: 6.1.2.  MP2MP Upstream Forwarding
  contents:
  - "6.1.2.  MP2MP Upstream Forwarding\n   An MP2MP LSP also has an upstream forwarding\
    \ path.  Upstream packets\n   need to be forwarded in the direction of the root\
    \ and downstream on\n   any node on the LAN that has a downstream interface for\
    \ the LSP.  For\n   a given MP2MP LSP on a given LAN, exactly one LSR is considered\
    \ to be\n   the upstream LSR.  If an LSR on the LAN receives a packet from one\
    \ of\n   its downstream interfaces for the LSP, and if it needs to forward the\n\
    \   packet onto the LAN, it ensures that the packet's top label is the\n   context\
    \ label of the upstream LSR, and that its second label is the\n   LSP label that\
    \ was assigned by the upstream LSR.\n   Other LSRs receiving the packet will not\
    \ be able to tell whether the\n   packet really came from the upstream router,\
    \ but that makes no\n   difference in the processing of the packet.  The upstream\
    \ LSR will\n   see its own upstream LSR in the label, and this will enable it\
    \ to\n   determine that the packet is traveling upstream.\n"
- title: 7.  Root Node Redundancy
  contents:
  - "7.  Root Node Redundancy\n   The root node is a single point of failure for an\
    \ MP LSP, whether the\n   MP LSP is P2MP or MP2MP.  The problem is particularly\
    \ severe for\n   MP2MP LSPs.  In the case of MP2MP LSPs, all leaf nodes must use\
    \ the\n   same root node to set up the MP2MP LSP, because otherwise the traffic\n\
    \   sourced by some leafs is not received by others.  Because the root\n   node\
    \ is the single point of failure for an MP LSP, we need a fast and\n   efficient\
    \ mechanism to recover from a root node failure.\n   An MP LSP is uniquely identified\
    \ in the network by the opaque value\n   and the root node address.  It is likely\
    \ that the root node for an MP\n   LSP will be defined statically.  The root node\
    \ address may be\n   configured on each leaf statically or learned using a dynamic\n\
    \   protocol.  How leafs learn about the root node is out of the scope of\n  \
    \ this document.\n   Suppose that for the same opaque value we define two (or\
    \ more) root\n   node addresses, and we build a tree to each root using the same\n\
    \   opaque value.  Effectively these will be treated as different MP LSPs\n  \
    \ in the network.  Once the trees are built, the procedures differ for\n   P2MP\
    \ and MP2MP LSPs.  The different procedures are explained in the\n   sections\
    \ below.\n"
- title: 7.1.  Root Node Redundancy - Procedures for P2MP LSPs
  contents:
  - "7.1.  Root Node Redundancy - Procedures for P2MP LSPs\n   Since all leafs have\
    \ set up P2MP LSPs to all the roots, they are\n   prepared to receive packets\
    \ on either one of these LSPs.  However,\n   only one of the roots should be forwarding\
    \ traffic at any given time,\n   for the following reasons: 1) to achieve bandwidth\
    \ savings in the\n   network and 2) to ensure that the receiving leafs don't receive\n\
    \   duplicate packets (since one cannot assume that the receiving leafs\n   are\
    \ able to discard duplicates).  How the roots determine which one\n   is the active\
    \ sender is outside the scope of this document.\n"
- title: 7.2.  Root Node Redundancy - Procedures for MP2MP LSPs
  contents:
  - "7.2.  Root Node Redundancy - Procedures for MP2MP LSPs\n   Since all leafs have\
    \ set up an MP2MP LSP to each one of the root\n   nodes for this opaque value,\
    \ a sending leaf may pick either of the\n   two (or more) MP2MP LSPs to forward\
    \ a packet on.  The leaf nodes\n   receive the packet on one of the MP2MP LSPs.\
    \  The client of the MP2MP\n   LSP does not care on which MP2MP LSP the packet\
    \ is received, as long\n   as they are for the same opaque value.  The sending\
    \ leaf MUST only\n   forward a packet on one MP2MP LSP at a given point in time.\
    \  The\n   receiving leafs are unable to discard duplicate packets because they\n\
    \   accept on all LSPs.  Using all the available MP2MP LSPs, we can\n   implement\
    \ redundancy using the following procedures.\n   A sending leaf selects a single\
    \ root node out of the available roots\n   for a given opaque value.  A good strategy\
    \ MAY be to look at the\n   unicast routing table and select a root that is closest\
    \ in terms of\n   the unicast metric.  As soon as the root address of the active\
    \ root\n   disappears from the unicast routing table (or becomes less\n   attractive)\
    \ due to root node or link failure, the leaf can select a\n   new best root address\
    \ and start forwarding to it directly.  If\n   multiple root nodes have the same\
    \ unicast metric, the highest root\n   node addresses MAY be selected, or per\
    \ session load balancing MAY be\n   done over the root nodes.\n   All leafs participating\
    \ in an MP2MP LSP MUST join all the available\n   root nodes for a given opaque\
    \ value.  Since the sending leaf may pick\n   any MP2MP LSP, it must be prepared\
    \ to receive on it.\n   The advantage of pre-building multiple MP2MP LSPs for\
    \ a single opaque\n   value is that convergence from a root node failure happens\
    \ as fast as\n   the unicast routing protocol is able to notify.  There is no\
    \ need for\n   an additional protocol to advertise to the leaf nodes which root\
    \ node\n   is the active root.  The root selection is a local leaf policy that\n\
    \   does not need to be coordinated with other leafs.  The disadvantage\n   of\
    \ pre-building multiple MP2MP LSPs is that more label resources are\n   used,\
    \ depending on how many root nodes are defined.\n"
- title: 8.  Make Before Break (MBB)
  contents:
  - "8.  Make Before Break (MBB)\n   An LSR selects the LSR that is its next hop to\
    \ the root of the LSP as\n   its upstream LSR for an MP LSP.  When the best path\
    \ to reach the root\n   changes, the LSR must choose a new upstream LSR.  Sections\
    \ 2.4.3 and\n   3.3.3 describe these procedures.\n   When the best path to the\
    \ root changes, the LSP may be broken\n   temporarily resulting in packet loss\
    \ until the LSP \"reconverges\" to a\n   new upstream LSR.  The goal of MBB when\
    \ this happens is to keep the\n   duration of packet loss as short as possible.\
    \  In addition, there are\n   scenarios where the best path from the LSR to the\
    \ root changes but\n   the LSP continues to forward packets to the previous next\
    \ hop to the\n   root.  That may occur when a link comes up or routing metrics\
    \ change.\n   In such a case, a new LSP should be established before the old LSP\
    \ is\n   removed to limit the duration of packet loss.  The procedures\n   described\
    \ below deal with both scenarios in a way that an LSR does\n   not need to know\
    \ which of the events described above caused its\n   upstream router for an MBB\
    \ LSP to change.\n   The MBB procedures are an optional extension to the MP LSP\
    \ building\n   procedures described in this document.  The procedures in this\n\
    \   section offer a make-before-break behavior, except in cases where the\n  \
    \ new path is part of a transient routing loop involving more than 2\n   LSRs\
    \ (also see Section 4).\n"
- title: 8.1.  MBB Overview
  contents:
  - "8.1.  MBB Overview\n   The MBB procedures use additional LDP signaling.\n   Suppose\
    \ some event causes a downstream LSR-D to select a new upstream\n   LSR-U for\
    \ FEC-A.  The new LSR-U may already be forwarding packets for\n   FEC-A; that\
    \ is, to downstream LSRs other than LSR-D.  After LSR-U\n   receives a label for\
    \ FEC-A from LSR-D, it will notify LSR-D when it\n   knows that the LSP for FEC-A\
    \ has been established from the root to\n   itself.  When LSR-D receives this\
    \ MBB notification, it will change\n   its next hop for the LSP root to LSR-U.\n\
    \   The assumption is that if LSR-U has received an MBB notification from\n  \
    \ its upstream router for the FEC-A LSP and has installed forwarding\n   state,\
    \ the LSR is capable of forwarding packets on the LSP.  At that\n   point LSR-U\
    \ should signal LSR-D by means of an MBB notification that\n   it has become part\
    \ of the tree identified by FEC-A and that LSR-D\n   should initiate its switchover\
    \ to the LSP.\n   At LSR-U, the LSP for FEC-A may be in 1 of 3 states.\n   1.\
    \ There is no state for FEC-A.\n   2. State for FEC-A exists and LSR-U is waiting\
    \ for MBB notification\n      that the LSP from the root to it exists.\n   3.\
    \ State for FEC-A exists and the MBB notification has been received\n      or\
    \ it is the root node for FEC-A.\n   After LSR-U receives LSR-D's Label Mapping\
    \ message for FEC-A, LSR-U\n   MUST NOT reply with an MBB notification to LSR-D\
    \ until its state for\n   the LSP is state #3 above.  If the state of the LSP\
    \ at LSR-U is state\n   #1 or #2, LSR-U should remember receipt of the Label Mapping\
    \ message\n   from LSR-D while waiting for an MBB notification from its upstream\n\
    \   LSR for the LSP.  When LSR-U receives the MBB notification from LSR-\n   U,\
    \ it transitions to LSP state #3 and sends an MBB notification to\n   LSR-D.\n"
- title: 8.2.  The MBB Status Code
  contents:
  - "8.2.  The MBB Status Code\n   As noted in Section 8.1, the procedures for establishing\
    \ an MBB MP\n   LSP are different from those for establishing normal MP LSPs.\n\
    \   When a downstream LSR sends a Label Mapping message for MP LSP to its\n  \
    \ upstream LSR, it MAY include an LDP MP Status TLV that carries an MBB\n   Status\
    \ Code to indicate that MBB procedures apply to the LSP.  This\n   new MBB Status\
    \ Code MAY also appear in an LDP Notification message\n   used by an upstream\
    \ LSR to signal LSP state #3 to the downstream LSR;\n   that is, that the upstream\
    \ LSRs state for the LSP exists and that it\n   has received notification from\
    \ its upstream LSR that the LSP is in\n   state #3.\n   The MBB Status is a type\
    \ of the LDP MP Status Value Element as\n   described in Section 5.1.  It is encoded\
    \ as follows:\n       0                   1                   2              \
    \     3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | MBB Type = 1  |      Length = 1               | Status Code   |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      MBB\
    \ Type:  Type 1\n      Length:  1\n      Status Code:  1 = MBB request\n     \
    \               2 = MBB ack\n"
- title: 8.3.  The MBB Capability
  contents:
  - "8.3.  The MBB Capability\n   An LSR MAY advertise that it is capable of handling\
    \ MBB LSPs using\n   the capability advertisement as defined in [RFC5561].  The\
    \ LDP MP MBB\n   capability has the following format:\n       0              \
    \     1                   2                   3\n       0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |1|0| LDP MP MBB Capability     |           Length = 1          |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |S|\
    \ Reserved    |\n      +-+-+-+-+-+-+-+-+\n   LDP MP MBB Capability: The MBB Capability\
    \ Parameter (0x050A)\n   S: As specified in [RFC5561]\n   If an LSR has not advertised\
    \ that it is MBB capable, its LDP peers\n   MUST NOT send it messages that include\
    \ MBB parameters.  If an LSR\n   receives a Label Mapping message with an MBB\
    \ parameter from\n   downstream LSR-D and its upstream LSR-U has not advertised\
    \ that it is\n   MBB capable, the LSR MUST send an MBB notification immediately\
    \ to\n   LSR-U (see Section 8.4).  If this happens, an MBB MP LSP will not be\n\
    \   established, but a normal MP LSP will be the result.\n"
- title: 8.4.  The MBB Procedures
  contents:
  - '8.4.  The MBB Procedures

    '
- title: 8.4.1.  Terminology
  contents:
  - "8.4.1.  Terminology\n   1. MBB LSP <X, Y>: A P2MP or MP2MP Make Before Break\
    \ (MBB) LSP entry\n      with root node address X and opaque value Y.\n   2. A(N,\
    \ L): An accepting element that consists of an upstream\n      neighbor N and\
    \ Local label L.  This LSR assigned label L to\n      neighbor N for a specific\
    \ MBB LSP.  For an active element, the\n      corresponding label is stored in\
    \ the label forwarding database.\n   3. iA(N, L): An inactive accepting element\
    \ that consists of an\n      upstream neighbor N and local label L.  This LSR\
    \ assigned label L\n      to neighbor N for a specific MBB LSP.  For an inactive\
    \ element,\n      the corresponding label is not stored in the label forwarding\n\
    \      database.\n   4. F(N, L): A Forwarding state that consists of downstream\
    \ neighbor N\n      and label L.  This LSR is sending label packets with label\
    \ L to\n      neighbor N for a specific FEC.\n   5. F'(N, L): A Forwarding state\
    \ that has been marked for sending an\n      MBB Notification message to neighbor\
    \ N with label L.\n   6. MBB Notification <X, Y, L>: An LDP notification message\
    \ with an MP\n      LSP <X, Y>, label L, and MBB Status code 2.\n   7. MBB Label\
    \ Mapping <X, Y, L>: A P2MP Label Mapping or MP2MP Label\n      Mapping downstream\
    \ with a FEC element <X, Y>, label L, and MBB\n      Status code 1.\n"
- title: 8.4.2.  Accepting Elements
  contents:
  - "8.4.2.  Accepting Elements\n   An accepting element represents a specific label\
    \ value L that has\n   been advertised to a neighbor N for an MBB LSP <X, Y> and\
    \ is a\n   candidate for accepting labels switched packets on.  An LSR can have\n\
    \   two accepting elements for a specific MBB LSP <X, Y> LSP, only one of\n  \
    \ them MUST be active.  An active element is the element for which the\n   label\
    \ value has been installed in the label forwarding database.  An\n   inactive\
    \ accepting element is created after a new upstream LSR is\n   chosen and replacement\
    \ the active element in the label forwarding\n   database is pending.  Inactive\
    \ elements only exist temporarily while\n   switching to a new upstream LSR. \
    \ Once the switch has been completed,\n   only one active element remains.  During\
    \ network convergence, it is\n   possible that an inactive accepting element is\
    \ created while another\n   inactive accepting element is pending.  If that happens,\
    \ the older\n   inactive accepting element MUST be replaced with a newer inactive\n\
    \   element.  If an accepting element is removed, a Label Withdraw has to\n  \
    \ be sent for label L to neighbor N for <X, Y>.\n"
- title: 8.4.3.  Procedures for Upstream LSR Change
  contents:
  - "8.4.3.  Procedures for Upstream LSR Change\n   Suppose a node Z has an MBB LSP\
    \ <X, Y> with an active accepting\n   element A(N1, L1).  Due to a routing change,\
    \ it detects a new best\n   path for root X and selects a new upstream LSR N2.\
    \  Node Z allocates\n   a new local label L2 and creates an inactive accepting\
    \ element iA(N2,\n   L2).  Node Z sends MBB Label Mapping <X, Y, L2> to N2 and\
    \ waits for\n   the new upstream LSR N2 to respond with an MBB Notification for\
    \ <X,\n   Y, L2>.  During this transition phase, there are two accepting\n   elements,\
    \ the element A(N1, L1) still accepting packets from N1 over\n   label L1 and\
    \ the new inactive element iA(N2, L2).\n   While waiting for the MBB Notification\
    \ from upstream LSR N2, it is\n   possible that another transition occurs due\
    \ to a routing change.\n   Suppose the new upstream LSR is N3.  An inactive element\
    \ iA(N3, L3)\n   is created and the old inactive element iA(N2, L2) MUST be removed.\n\
    \   A Label Withdraw MUST be sent to N2 for <X, Y, L2>.  The MBB\n   Notification\
    \ for <X, Y, L2> from N2 will be ignored because the\n   inactive element is removed.\n\
    \   It is possible that the MBB Notification from upstream LSR is never\n   received\
    \ due to link or node failure.  To prevent waiting\n   indefinitely for the MBB\
    \ Notification, a timeout SHOULD be applied.\n   As soon as the timer expires,\
    \ the procedures in Section 8.4.5 are\n   applied as if an MBB Notification was\
    \ received for the inactive\n   element.  If a downstream LSR detects that the\
    \ old upstream LSR went\n   down while waiting for the MBB Notification from the\
    \ new upstream\n   LSR, the downstream LSR can immediately proceed without waiting\
    \ for\n   the timer to expire.\n"
- title: 8.4.4.  Receiving a Label Mapping with MBB Status Code
  contents:
  - "8.4.4.  Receiving a Label Mapping with MBB Status Code\n   Suppose node Z has\
    \ state for an MBB LSP <X, Y> and receives an MBB\n   Label Mapping <X, Y, L2>\
    \ from N2.  A new forwarding state F(N2, L2)\n   will be added to the MP LSP if\
    \ it did not already exist.  If this MBB\n   LSP has an active accepting element\
    \ or if node Z is the root of the\n   MBB LSP, an MBB notification <X, Y, L2)>\
    \ is sent to node N2.  If node\n   Z has an inactive accepting element, it marks\
    \ the Forwarding state as\n   <X, Y, F'(N2, L2)>.  If the router Z upstream LSR\
    \ for <X, Y> happens\n   to be N2, then Z MUST NOT send an MBB notification to\
    \ N2 at once.\n   Sending the MBB notification to N2 must be done only after Z\
    \ upstream\n   for <X, Y> stops being N2.\n"
- title: 8.4.5.  Receiving a Notification with MBB Status Code
  contents:
  - "8.4.5.  Receiving a Notification with MBB Status Code\n   Suppose node Z receives\
    \ an MBB Notification <X, Y, L> from N.  If\n   node Z has state for MBB LSP <X,\
    \ Y> and an inactive accepting element\n   iA(N, L) that matches with N and L,\
    \ we activate this accepting\n   element and install label L in the label-forwarding\
    \ database.  If\n   another active accepting element was present, it will be removed\
    \ from\n   the label-forwarding database.\n   If this MBB LSP <X, Y> also has\
    \ Forwarding states marked for sending\n   MBB Notifications, like <X, Y, F'(N2,\
    \ L2)>, MBB Notifications are\n   sent to these downstream LSRs.  If node Z receives\
    \ an MBB\n   Notification for an accepting element that is not inactive or does\n\
    \   not match the label value and neighbor address, the MBB notification\n   is\
    \ ignored.\n"
- title: 8.4.6.  Node Operation for MP2MP LSPs
  contents:
  - "8.4.6.  Node Operation for MP2MP LSPs\n   The procedures described above apply\
    \ to the downstream path of an\n   MP2MP LSP.  The upstream path of the MP2MP\
    \ is set up as normal\n   without including an MBB Status code.  If the MBB procedures\
    \ apply to\n   an MP2MP downstream FEC element, the upstream path to a node N\
    \ is\n   only installed in the label-forwarding database if node N is part of\n\
    \   the active accepting element.  If node N is part of an inactive\n   accepting\
    \ element, the upstream path is installed when this inactive\n   accepting element\
    \ is activated.\n"
- title: 9.  Typed Wildcard for mLDP FEC Element
  contents:
  - "9.  Typed Wildcard for mLDP FEC Element\n   The format of the mLDP FEC Typed\
    \ Wildcard FEC is as follows:\n       0                   1                  \
    \ 2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | Typed Wcard   |     Type      |   Len = 2     |      AFI      ~\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      ~\
    \               |\n      +-+-+-+-+-+-+-+-+\n   Typed Wcard:  As specified in [RFC5918]\n\
    \   Type:  The type of FEC Element Type.  Either the P2MP FEC Element or\n   \
    \   the MP2MP FEC Element using the values defined for those FEC\n      Elements\
    \ when carried in the FEC TLV as defined in this document.\n   Len:  Len FEC Type\
    \ Info, two octets (=0x02).\n   AFI:  Address Family, two-octet quantity containing\
    \ a value from\n      IANA's \"Address Family Numbers\" registry.\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   The same security considerations apply as those\
    \ for the base LDP\n   specification, as described in [RFC5036].\n   The protocol\
    \ specified in this document does not provide any\n   authorization mechanism\
    \ for controlling the set of LSRs that may join\n   a given MP LSP.  If such authorization\
    \ is desirable, additional\n   mechanisms, outside the scope of this document,\
    \ are needed.  Note\n   that authorization policies cannot be implemented and/or\
    \ configured\n   solely at the root node of the LSP, because the root node does\
    \ not\n   learn the identities of all the leaf nodes.\n"
- title: 11.  IANA Considerations
  contents:
  - "11.  IANA Considerations\n   Per this document, IANA has created 3 new registries.\n\
    \   1. \"LDP MP Opaque Value Element basic type\"\n      The range is 0-255, with\
    \ the following values allocated in this\n      document:\n         0: Reserved\n\
    \         1: Generic LSP identifier\n         255: Extended Type field is present\
    \ in the following two bytes\n      The allocation policy for this space is 'Standards\
    \ Action with\n      Early Allocation'.\n   2. \"LDP MP Opaque Value Element extended\
    \ type\"\n      The range is 0-65535, with the following allocation policies:\n\
    \         0-32767: Standards Action with Early Allocation\n         32768-65535:\
    \ First Come, First Served\n   3. \"LDP MP Status Value Element type\"\n     \
    \ The range is 0-255, with the following values allocated in this\n      document:\n\
    \         0: Reserved\n         1: MBB Status\n      The allocation policy for\
    \ this space is 'Standards Action with\n      Early Allocation'.\n   The code\
    \ point values listed below have been allocated by IANA\n   through early allocation.\n\
    \   IANA allocated three new code points from the LDP registry\n   \"Forwarding\
    \ Equivalence Class (FEC) Type Name Space\".  The values\n   are:\n      P2MP\
    \ FEC type - requested value 0x06\n      MP2MP-up FEC type - requested value 0x07\n\
    \      MP2MP-down FEC type - requested value 0x08\n   IANA assigned three new\
    \ code points for new Capability Parameter TLVs\n   from the LDP registry \"TLV\
    \ Type Name Space\", corresponding to the\n   advertisement of the P2MP, MP2MP,\
    \ and MBB capabilities.  The values\n   are:\n      P2MP Capability Parameter\
    \ - 0x0508\n      MP2MP Capability Parameter - 0x0509\n      MBB Capability Parameter\
    \ - 0x050A\n   IANA assigned an LDP Status Code to indicate that an LDP MP Status\n\
    \   TLV is following in the Notification message.  The value assigned in\n   the\
    \ LDP registry \"LDP Status Code Name Space\" is:\n      LDP MP status - requested\
    \ value 0x00000040\n   IANA assigned a new code point for an LDP MP Status TLV.\
    \  The value\n   assigned in the LDP registry \"LDP TLV Type Name Space\" is:\n\
    \      LDP MP Status TLV Type - requested value 0x096F\n"
- title: 12.  Acknowledgments
  contents:
  - "12.  Acknowledgments\n   The authors would like to thank the following individuals\
    \ for their\n   review and contribution: Nischal Sheth, Yakov Rekhter, Rahul\n\
    \   Aggarwal, Arjen Boers, Eric Rosen, Nidhi Bhaskar, Toerless Eckert,\n   George\
    \ Swallow, Jin Lizhong, Vanson Lim, Adrian Farrel, Thomas Morin\n   and Ben Niven-Jenkins.\n"
- title: 13.  Contributing Authors
  contents:
  - "13.  Contributing Authors\n   Below is a list of the contributing authors in\
    \ alphabetical order:\n   Shane Amante\n   Level 3 Communications, LLC\n   1025\
    \ Eldorado Blvd\n   Broomfield, CO 80021\n   US\n   EMail: Shane.Amante@Level3.com\n\
    \   Luyuan Fang\n   Cisco Systems\n   300 Beaver Brook Road\n   Boxborough, MA\
    \ 01719\n   US\n   EMail: lufang@cisco.com\n   Hitoshi Fukuda\n   NTT Communications\
    \ Corporation\n   1-1-6, Uchisaiwai-cho, Chiyoda-ku\n   Tokyo 100-8019,\n   Japan\n\
    \   EMail: hitoshi.fukuda@ntt.com\n   Yuji Kamite\n   NTT Communications Corporation\n\
    \   Tokyo Opera City Tower\n   3-20-2 Nishi Shinjuku, Shinjuku-ku,\n   Tokyo 163-1421,\n\
    \   Japan\n   EMail: y.kamite@ntt.com\n   Kireeti Kompella\n   Juniper Networks\n\
    \   1194 N. Mathilda Ave.\n   Sunnyvale, CA 94089\n   US\n   EMail: kireeti@juniper.net\n\
    \   Jean-Louis Le Roux\n   France Telecom\n   2, avenue Pierre-Marzin\n   Lannion,\
    \ Cedex 22307\n   France\n   EMail: jeanlouis.leroux@francetelecom.com\n   Ina\
    \ Minei\n   Juniper Networks\n   1194 N. Mathilda Ave.\n   Sunnyvale, CA  94089\n\
    \   US\n   EMail: ina@juniper.net\n   Bob Thomas\n   Cisco Systems, Inc.\n   300\
    \ Beaver Brook Road\n   Boxborough, MA, 01719\n   EMail: bobthomas@alum.mit.edu\n\
    \   Lei Wang\n   Telenor\n   Snaroyveien 30\n   Fornebu 1331\n   Norway\n   EMail:\
    \ lei.wang@telenor.com\n   IJsbrand Wijnands\n   Cisco Systems, Inc.\n   De kleetlaan\
    \ 6a\n   1831 Diegem\n   Belgium\n   EMail: ice@cisco.com\n"
- title: 14.  References
  contents:
  - '14.  References

    '
- title: 14.1.  Normative References
  contents:
  - "14.1.  Normative References\n   [ITU.V42.1994]\n              International Telecommunications\
    \ Union, \"Error-correcting\n              Procedures for DCEs Using Asynchronous-to-Synchronous\n\
    \              Conversion\", ITU-T Recommendation V.42, 1994.\n              http://www.itu.int/rec/T-REC-V.42-200203-I\n\
    \   [RFC2119]  Bradner, S., \"Key words for use in RFCs to Indicate\n        \
    \      Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC3031]  Rosen,\
    \ E., Viswanathan, A., and R. Callon, \"Multiprotocol\n              Label Switching\
    \ Architecture\", RFC 3031, January 2001.\n   [RFC5036]  Andersson, L., Ed., Minei,\
    \ I., Ed., and B. Thomas, Ed.,\n              \"LDP Specification\", RFC 5036,\
    \ October 2007.\n   [RFC5331]  Aggarwal, R., Rekhter, Y., and E. Rosen, \"MPLS\
    \ Upstream\n              Label Assignment and Context-Specific Label Space\"\
    , RFC\n              5331, August 2008.\n   [RFC5561]  Thomas, B., Raza, K., Aggarwal,\
    \ S., Aggarwal, R., and JL.\n              Le Roux, \"LDP Capabilities\", RFC\
    \ 5561, July 2009.\n   [RFC5918]  Asati, R., Minei, I., and B. Thomas, \"Label\
    \ Distribution\n              Protocol (LDP) 'Typed Wildcard' Forward Equivalence\
    \ Class\n              (FEC)\", RFC 5918, August 2010.\n   [RFC6389]  Aggarwal,\
    \ R. and JL. Le Roux, \"MPLS Upstream Label\n              Assignment for LDP\"\
    , RFC 6389, September 2011.\n"
- title: 14.2.  Informative References
  contents:
  - "14.2.  Informative References\n   [ISO3309]  International Organization for Standardization,\
    \ \"ISO\n              Information Processing Systems - Data Communication -\n\
    \              High-Level Data Link Control Procedure - Frame Structure\",\n \
    \             ISO 3309, 3rd Edition, October 1984.\n   [L3VPN-MCAST]\n       \
    \       Rosen, E., Ed., and R. Aggarwal, Ed., \"Multicast in\n              MPLS/BGP\
    \ IP VPNs\", Work in Progress, January 2010.\n   [RFC3813]  Srinivasan, C., Viswanathan,\
    \ A., and T. Nadeau,\n              \"Multiprotocol Label Switching (MPLS) Label\
    \ Switching\n              Router (LSR) Management Information Base (MIB)\", RFC\
    \ 3813,\n              June 2004.\n   [RFC3815]  Cucchiara, J., Sjostrand, H.,\
    \ and J. Luciani, \"Definitions\n              of Managed Objects for the Multiprotocol\
    \ Label Switching\n              (MPLS), Label Distribution Protocol (LDP)\",\
    \ RFC 3815, June\n              2004.\n   [RFC4875]  Aggarwal, R., Ed., Papadimitriou,\
    \ D., Ed., and S.\n              Yasukawa, Ed., \"Extensions to Resource Reservation\n\
    \              Protocol - Traffic Engineering (RSVP-TE) for Point-to-\n      \
    \        Multipoint TE Label Switched Paths (LSPs)\", RFC 4875, May\n        \
    \      2007.\n   [RFC5332]  Eckert, T., Rosen, E., Ed., Aggarwal, R., and Y. Rekhter,\n\
    \              \"MPLS Multicast Encapsulations\", RFC 5332, August 2008.\n   [RFC6348]\
    \  Le Roux, J., Ed., and T. Morin, Ed., \"Requirements for\n              Point-to-Multipoint\
    \ Extensions to the Label Distribution\n              Protocol\", RFC 6348, September\
    \ 2011.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   IJsbrand Wijnands (editor)\n   Cisco Systems, Inc.\n \
    \  De kleetlaan 6a\n   Diegem  1831\n   Belgium\n   EMail: ice@cisco.com\n   Ina\
    \ Minei (editor)\n   Juniper Networks\n   1194 N. Mathilda Ave.\n   Sunnyvale,\
    \ CA  94089\n   US\n   EMail: ina@juniper.net\n   Kireeti Kompella\n   Juniper\
    \ Networks\n   1194 N. Mathilda Ave.\n   Sunnyvale, CA  94089\n   US\n   EMail:\
    \ kireeti@juniper.net\n   Bob Thomas\n   300 Beaver Brook Road\n   Boxborough\
    \  01719\n   US\n   EMail: bobthomas@alum.mit.edu\n"
