- title: __initial_text__
  contents:
  - '                Sieve Email Filtering: Include Extension

    '
- title: Abstract
  contents:
  - "Abstract\n   The Sieve Email Filtering \"include\" extension permits users to\n\
    \   include one Sieve script inside another.  This can make managing\n   large\
    \ scripts or multiple sets of scripts much easier, and allows a\n   site and its\
    \ users to build up libraries of scripts.  Users are able\n   to include their\
    \ own personal scripts or site-wide scripts.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6609.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction and Overview .......................................2\n\
    \   2. Conventions Used in This Document ...............................2\n  \
    \ 3. Include Extension ...............................................3\n    \
    \  3.1. General Considerations .....................................3\n      3.2.\
    \ Control Structure \"include\" ................................4\n      3.3.\
    \ Control Structure \"return\" .................................7\n      3.4.\
    \ Interaction with the \"variables\" Extension .................8\n          \
    \ 3.4.1. Control Structure \"global\" ..........................8\n          \
    \ 3.4.2. Variables Namespace global .........................10\n      3.5. Interaction\
    \ with Other Extensions .........................11\n   4. Security Considerations\
    \ ........................................12\n   5. IANA Considerations ............................................12\n\
    \   6. References .....................................................13\n  \
    \    6.1. Normative References ......................................13\n    \
    \  6.2. Informative References ....................................13\n   Appendix\
    \ A. Acknowledgments .......................................14\n"
- title: 1.  Introduction and Overview
  contents:
  - "1.  Introduction and Overview\n   It's convenient to be able to break Sieve [RFC5228]\
    \ scripts down into\n   smaller components that can be reused in a variety of\
    \ different\n   circumstances.  For example, users may want to have a default\
    \ script\n   and a special 'vacation' script, the latter being activated when\
    \ the\n   user goes on vacation.  In that case, the default actions should\n \
    \  continue to be run, but a vacation command should be executed first.\n   One\
    \ option is to edit the default script to add or remove the\n   vacation command\
    \ as needed.  Another is to have a vacation script\n   that simply has a vacation\
    \ command and then includes the default\n   script.\n   This document defines\
    \ the Sieve Email Filtering \"include\" extension,\n   which permits users to\
    \ include one Sieve script inside another.\n"
- title: 2.  Conventions Used in This Document
  contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\"\
    , \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n   Conventions for notations are as in Sieve [RFC5228], Section\
    \ 1.1.\n   The following key phrases are used to describe scripts and script\n\
    \   execution:\n   script\n      a valid Sieve script.\n   script execution\n\
    \      an instance of a Sieve interpreter invoked for a given message\n      delivery,\
    \ starting with the user's active script and continuing\n      through any included\
    \ scripts until the final disposition of the\n      message (e.g., delivered,\
    \ forwarded, discarded, rejected, etc.).\n   immediate script\n      the individual\
    \ Sieve script file being executed.\n   including script\n      the individual\
    \ Sieve script file that had an include statement\n      that included the immediate\
    \ script.\n"
- title: 3.  Include Extension
  contents:
  - '3.  Include Extension

    '
- title: 3.1.  General Considerations
  contents:
  - "3.1.  General Considerations\n   Sieve implementations that implement the \"\
    include\", \"return\", and\n   \"global\" commands described below have an identifier\
    \ of \"include\" for\n   use with the capability mechanism.  If any of the \"\
    include\",\n   \"return\", or \"global\" commands are used in a script, the \"\
    include\"\n   capability MUST be listed in the \"require\" statement in that script.\n\
    \   Sieve implementations need to track the use of actions in included\n   scripts\
    \ so that implicit \"keep\" behavior can be properly determined\n   based on whether\
    \ any actions have executed in any script.\n   Sieve implementations are allowed\
    \ to limit the total number of nested\n   included scripts, but MUST provide for\
    \ a total of at least three\n   levels of nested scripts including the top-level\
    \ script.  An error\n   MUST be generated either when the script is uploaded to\
    \ the Sieve\n   repository, or when the script is executed, if any nesting limit\
    \ is\n   exceeded.  If such an error is detected whilst processing a Sieve\n \
    \  script, an implicit \"keep\" action MUST be executed to prevent loss of\n \
    \  any messages.\n   Sieve implementations MUST NOT allow recursive script inclusion.\n\
    \   Both direct recursion, where script A includes script A (itself), and\n  \
    \ indirect recursion, where script A includes script B which includes\n   script\
    \ A once again, are prohibited.\n   Sieve implementations MUST generate an error\
    \ at execution time if an\n   included script is a recursive inclusion.  Implementations\
    \ MUST NOT\n   generate errors for recursive includes at upload time, as this\
    \ would\n   force an upload ordering requirement upon script authors and\n   generators.\n\
    \   Sieve implementations MUST generate an error at execution time if an\n   included\
    \ script does not exist, except when the \":optional\" parameter\n   is specified.\
    \  Implementations MUST NOT generate errors for scripts\n   missing at upload\
    \ time, as this would force an upload ordering\n   requirement upon script authors\
    \ and generators.\n   If the Sieve \"variables\" extension [RFC5229] is present,\
    \ an issue\n   arises with the \"scope\" of variables defined in scripts that\
    \ may\n   include each other.  For example, if a script defines the variable\n\
    \   \"${status}\" with one particular meaning or usage, and another defines\n\
    \   \"${status}\" with a different meaning, then if one script includes the\n\
    \   other there is an issue as to which \"${status}\" is being referenced.\n \
    \  To solve this problem, Sieve implementations MUST follow the scoping\n   rules\
    \ defined in Section 3.4 and support the \"global\" command defined\n   there.\n"
- title: 3.2.  Control Structure "include"
  contents:
  - "3.2.  Control Structure \"include\"\n      Usage:  include [LOCATION] [\":once\"\
    ] [\":optional\"] <value: string>\n              LOCATION = \":personal\" / \"\
    :global\"\n   The \"include\" command takes an optional \"location\" parameter,\
    \ an\n   optional \":once\" parameter, an optional \":optional\" parameter, and\
    \ a\n   single string argument representing the name of the script to include\n\
    \   for processing at that point.  Implementations MUST restrict script\n   names\
    \ according to ManageSieve [RFC5804], Section 1.6.  The script\n   name argument\
    \ MUST be a constant string as defined in [RFC5229],\n   Section 3; implementations\
    \ MUST NOT expand variables in the script\n   name argument.\n   The \"location\"\
    \ parameter MUST default to \":personal\" if not\n   specified.  The \"location\"\
    \ parameter MUST NOT be specified more than\n   once.  The \"location\" has the\
    \ following meanings:\n   :personal\n      Indicates that the named script is\
    \ stored in the user's own\n      personal (private) Sieve repository.\n   :global\n\
    \      Indicates that the named script is stored in a site-wide Sieve\n      repository,\
    \ accessible to all users of the Sieve system.\n   The \":once\" parameter tells\
    \ the interpreter only to include the named\n   script if it has not already been\
    \ included at any other point during\n   script execution.  If the script has\
    \ already been included,\n   processing continues immediately following the \"\
    include\" command.\n   Implementations MUST NOT generate an error if an \"include\
    \ :once\"\n   command names a script whose inclusion would be recursive; in this\n\
    \   case, the script MUST be considered previously included, and\n   therefore\
    \ \"include :once\" will not include it again.\n   Note: It is RECOMMENDED that\
    \ script authors and generators use the\n   \":once\" parameter only when including\
    \ a script that performs general\n   duties such as declaring global variables\
    \ and making sanity checks of\n   the environment.\n   The \":optional\" parameter\
    \ indicates that the script may be missing.\n   Ordinarily, an implementation\
    \ MUST generate an error during execution\n   if an \"include\" command specifies\
    \ a script that does not exist.  When\n   \":optional\" is specified, implementations\
    \ MUST NOT generate an error\n   for a missing script, and MUST continue as if\
    \ the \"include\" command\n   had not been present.\n   The included script MUST\
    \ be a valid Sieve script.  Implementations\n   MUST validate that each script\
    \ has its own \"require\" statements for\n   all optional capabilities used by\
    \ that script.  The scope of a\n   \"require\" statement is the script in which\
    \ it immediately appears,\n   and neither inherits nor passes on capabilities\
    \ to other scripts\n   during the course of execution.\n   A \"stop\" command\
    \ in an included script MUST stop all script\n   processing, including the processing\
    \ of the scripts that include the\n   immediate one.  The \"return\" command (described\
    \ below) stops\n   processing of the immediate script only, and allows the scripts\
    \ that\n   include it to continue.\n   The \"include\" command MAY appear anywhere\
    \ in a script where a control\n   structure is legal, and MAY be used within another\
    \ control structure,\n   e.g., an \"if\" block.\n   Examples:\n   The user has\
    \ four scripts stored in their personal repository:\n   \"default\"\n      This\
    \ is the default active script that includes several others.\n      require [\"\
    include\"];\n      include :personal \"always_allow\";\n      include :global\
    \ \"spam_tests\";\n      include :personal \"spam_tests\";\n      include :personal\
    \ \"mailing_lists\";\n   Personal script \"always_allow\"\n      This script special-cases\
    \ some correspondent email addresses and\n      makes sure any message containing\
    \ those addresses is always kept.\n      if address :is \"from\" \"boss@example.com\"\
    \n      {\n          keep;\n      }\n      elsif address :is \"from\" \"ceo@example.com\"\
    \n      {\n          keep;\n      }\n   Personal script \"spam_tests\" (uses \"\
    reject\" [RFC5429])\n      This script does some user-specific spam tests to catch\
    \ spam\n      messages not caught by the site-wide spam tests.\n      require\
    \ [\"reject\"];\n      if header :contains \"Subject\" \"XXXX\"\n      {\n   \
    \       reject \"Subject XXXX is unacceptable.\";\n      }\n      elsif address\
    \ :is \"from\" \"money@example.com\"\n      {\n          reject \"Mail from this\
    \ sender is unwelcome.\";\n      }\n   Personal script \"mailing_lists\"\n   \
    \   This script looks for messages from different mailing lists and\n      files\
    \ each into a mailbox specific to the mailing list.\n      require [\"fileinto\"\
    ];\n      if header :is \"List-ID\" \"sieve.ietf.org\"\n      {\n          fileinto\
    \ \"lists.sieve\";\n      }\n      elsif header :is \"List-ID\" \"ietf-imapext.imc.org\"\
    \n      {\n          fileinto \"lists.imapext\";\n      }\n   There is one script\
    \ stored in the global repository:\n   Site script \"spam_tests\" (uses \"reject\"\
    \ [RFC5429])\n      This script does some site-wide spam tests that any user at\
    \ the\n      site can include in their own scripts at a suitable point.  The\n\
    \      script content is kept up to date by the site administrator.\n      require\
    \ [\"reject\"];\n      if anyof (header :contains \"Subject\" \"$$\",\n      \
    \          header :contains \"Subject\" \"Make money\")\n      {\n          reject\
    \ \"No thank you.\";\n      }\n"
- title: 3.3.  Control Structure "return"
  contents:
  - "3.3.  Control Structure \"return\"\n      Usage:  return\n   The \"return\" command\
    \ stops processing of the immediately included\n   script only and returns processing\
    \ control to the script that\n   includes it.  If used in the main script (i.e.,\
    \ not in an included\n   script), it has the same effect as the \"stop\" command,\
    \ including the\n   appropriate \"keep\" action if no other actions have been\
    \ executed up\n   to that point.\n"
- title: 3.4.  Interaction with the "variables" Extension
  contents:
  - "3.4.  Interaction with the \"variables\" Extension\n   In order to avoid problems\
    \ of variables in an included script\n   \"overwriting\" those from the script\
    \ that includes it, this\n   specification requires that all variables defined\
    \ in a script MUST be\n   kept \"private\" to the immediate script by default\
    \ -- that is, they\n   are not \"visible\" to other scripts.  This ensures that\
    \ two script\n   authors cannot inadvertently cause problems by choosing the same\
    \ name\n   for a variable.\n   However, sometimes there is a need to make a variable\
    \ defined in one\n   script available to others.  This specification defines the\
    \ new\n   command \"global\" to declare that a variable is shared among scripts.\n\
    \   Effectively, two namespaces are defined: one local to the immediate\n   script,\
    \ and another shared among all scripts.  Implementations MUST\n   allow a non-global\
    \ variable to have the same name as a global\n   variable but have no interaction\
    \ between them.\n"
- title: 3.4.1.  Control Structure "global"
  contents:
  - "3.4.1.  Control Structure \"global\"\n      Usage:  global <value: string-list>\n\
    \   The \"global\" command accepts a string list argument that defines one\n \
    \  or more names of variables to be stored in the global variable space.\n   Each\
    \ name MUST be a constant string and conform to the syntax of\n   variable-name\
    \ as defined in the \"variables\" extension document\n   [RFC5229], Section 3.\
    \  Match variables cannot be specified, and\n   namespace prefixes are not allowed.\
    \  An invalid name MUST be detected\n   as a syntax error.\n   The \"global\"\
    \ command is only available when the script has both\n   \"include\" and \"variables\"\
    \ in its require line.  If the \"global\"\n   command appears when only \"include\"\
    \ or only \"variables\" has been\n   required, an error MUST be generated when\
    \ the script is uploaded.\n   If a \"global\" command is given the name of a variable\
    \ that has\n   previously been defined in the immediate script with \"set\", an\
    \ error\n   MUST be generated either when the script is uploaded or at execution\n\
    \   time.\n   If a \"global\" command lists a variable that has not been defined\
    \ in\n   the \"global\" namespace, the name of the variable is now marked as\n\
    \   global, and any subsequent \"set\" command will set the value of the\n   variable\
    \ in global scope.\n   A variable has global scope in all scripts that have declared\
    \ it with\n   the \"global\" command.  If a script uses that variable name without\n\
    \   declaring it global, the name specifies a separate, non-global\n   variable\
    \ within that script.\n   Interpretation of a string containing a variable marked\
    \ as global,\n   but without any value set, SHALL behave as any other access to\
    \ an\n   unknown variable, as specified in the \"variables\" extension document\n\
    \   [RFC5229], Section 3 (i.e., evaluates to an empty string).\n   Example:\n\
    \   The active script\n      The included script may contain repetitive code that\
    \ is\n      effectively a subroutine that can be factored out.  In this\n    \
    \  script, the test that matches last will leave its value in the\n      test_mailbox\
    \ variable, and the top-level script will file the\n      message into that mailbox.\
    \  If no tests matched, the message will\n      be implicitly kept in the INBOX.\n\
    \      require [\"fileinto\", \"include\", \"variables\", \"relational\"];\n \
    \     global \"test\";\n      global \"test_mailbox\";\n      set \"test\" \"\
    $$\";\n      include \"subject_tests\";\n      set \"test\" \"Make money\";\n\
    \      include \"subject_tests\";\n      if string :count \"eq\" \"${test_mailbox}\"\
    \ \"1\"\n      {\n          fileinto \"${test_mailbox}\";\n          stop;\n \
    \     }\n   Personal script \"subject_tests\"\n      This script performs a number\
    \ of tests against the message, sets\n      the global test_mailbox variable with\
    \ a folder to file the message\n      into, and then falls back to the top-level\
    \ script.\n      require [\"include\", \"variables\"];\n      global [\"test\"\
    , \"test_mailbox\"];\n      if header :contains \"Subject\" \"${test}\"\n    \
    \  {\n          set \"test_mailbox\" \"spam-${test}\";\n      }\n"
- title: 3.4.2.  Variables Namespace global
  contents:
  - "3.4.2.  Variables Namespace global\n   In addition to the \"global\" command,\
    \ this document defines the\n   variables namespace \"global\", in accordance\
    \ with the \"variables\"\n   extension document [RFC5229], Section 3.  The \"\
    global\" namespace has\n   no sub-namespaces (e.g., 'set \"global.data.from\"\
    \ \"me@example.com\";'\n   is not allowed).  The variable-name part MUST be a\
    \ valid identifier\n   (e.g., 'set \"global.12\" \"value\";' is not valid because\
    \ \"12\" is not a\n   valid identifier).\n   Note that the \"variables\" extension\
    \ document [RFC5229], Section 3\n   suggests that extensions should define a namespace\
    \ that is the same\n   as its capability string (in this case, \"include\" rather\
    \ than\n   \"global\").  Nevertheless, references to the \"global\" namespace\n\
    \   without a prior require statement for the \"include\" extension MUST\n   cause\
    \ an error.\n   Example:\n      require [\"variables\", \"include\"];\n      set\
    \ \"global.i_am_on_vacation\" \"1\";\n   Variables declared global and variables\
    \ accessed via the \"global\"\n   namespace MUST each be one and the same.  In\
    \ the following example\n   script, we see the variable \"i_am_on_vacation\" used\
    \ in a \"global\"\n   command, and again with the \"global\" namespace.  Consider\
    \ these as\n   two syntaxes with identical meaning.\n   Example:\n      require\
    \ [\"variables\", \"include\", \"vacation\"];\n      global \"i_am_on_vacation\"\
    ;\n      set \"global.i_am_on_vacation\" \"1\";\n      if string :is \"${i_am_on_vacation}\"\
    \ \"1\"\n      {\n          vacation \"It's true, I am on vacation.\";\n     \
    \ }\n"
- title: 3.5.  Interaction with Other Extensions
  contents:
  - "3.5.  Interaction with Other Extensions\n   When \"include\" is used with the\
    \ \"editheader\" extension [RFC5293], any\n   changes made to headers in a script\
    \ MUST be propagated both to and\n   from included scripts.  By way of example,\
    \ if a script deletes one\n   header and adds another, then includes a second\
    \ script, the included\n   script MUST NOT see the removed header, and MUST see\
    \ the added\n   header.  Likewise, if the included script adds or removes a header,\n\
    \   upon returning to the including script, subsequent actions MUST see\n   the\
    \ added headers and MUST NOT see the removed headers.\n   When \"include\" is\
    \ used with the MIME extension [RFC5703]\n   \"foreverypart\" control structure,\
    \ the included script MUST be\n   presented with the current MIME part as though\
    \ it were the entire\n   message.  A script SHALL NOT have any special control\
    \ over the\n   control structure it was included from.  The \"break\" command\
    \ in an\n   included script is not valid on its own and may not terminate a\n\
    \   \"foreverypart\" iteration in another script.  The included script can\n \
    \  use \"return\" to transfer control back to the including script.  A\n   global\
    \ variable can be used to convey results to the including\n   script.  A \"stop\"\
    \ in an included script, even within a \"foreverypart\"\n   loop, still halts\
    \ all script execution, per Section 3.2.\n   When \"include\" is used with the\
    \ \"reject\" extension [RFC5429], calling\n   \"reject\" or \"ereject\" at any\
    \ time sets the reject action on the\n   message, and continues script execution.\
    \  Apropos of the MIME\n   extension, if an included script sees only a portion\
    \ of the message\n   and calls a reject, it is the entire message and not the\
    \ single MIME\n   part that carries the rejection.\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   Sieve implementations MUST ensure adequate security\
    \ for the global\n   script repository to prevent unauthorized changes to global\
    \ scripts.\n   For example, a site policy might enable only certain users with\n\
    \   administrative privileges to modify the global scripts.  Sites are\n   advised\
    \ against allowing all users to have write access to the sites'\n   global scripts.\n\
    \   Sieve implementations MUST ensure that script names are checked for\n   validity\
    \ and proper permissions prior to inclusion, in order to\n   prevent a malicious\
    \ user from gaining access to files accessible to\n   the mail server software\
    \ that should not be accessible to the user.\n   Sieve implementations MUST ensure\
    \ that script names are safe for use\n   with their storage system.  An error\
    \ MUST be generated either when\n   the script is uploaded or at execution time\
    \ for a script including a\n   name that could be used as a vector to attack the\
    \ storage system.  By\n   way of example, the following include commands should\
    \ be considered\n   hostile: 'include \"./../..//etc/passwd\"', 'include \"foo$(`rm\n\
    \   star`)\"'.\n   Beyond these, the \"include\" extension does not raise any\
    \ security\n   considerations that are not discussed in the base Sieve [RFC5228]\n\
    \   document and the \"variables\" extension document [RFC5229].\n"
- title: 5.  IANA Considerations
  contents:
  - "5.  IANA Considerations\n   The following template specifies the IANA registration\
    \ of the Sieve\n   extension specified in this document:\n      To: iana@iana.org\n\
    \      Subject: Registration of new Sieve extension\n      Capability name: include\n\
    \      Description:     adds the \"include\" command to execute other Sieve\n\
    \                       scripts, the \"return\" action from an included\n    \
    \                   script, and the \"global\" command and \"global\"\n      \
    \                 variables namespace to access variables shared\n           \
    \            among included scripts.\n      RFC number:      this RFC\n      Contact\
    \ address: the Sieve discussion list <sieve@ietf.org>\n   This information has\
    \ been added to IANA's \"Sieve Extensions\" registry\n   (http://www.iana.org).\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC5228]  Guenther, P., Ed., and T. Showalter, Ed., \"Sieve: An Email\n\
    \              Filtering Language\", RFC 5228, January 2008.\n   [RFC5229]  Homme,\
    \ K., \"Sieve Email Filtering: Variables Extension\",\n              RFC 5229,\
    \ January 2008.\n   [RFC5804]  Melnikov, A., Ed., and T. Martin, \"A Protocol\
    \ for Remotely\n              Managing Sieve Scripts\", RFC 5804, July 2010.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [RFC5293]  Degener, J. and P. Guenther, \"Sieve\
    \ Email Filtering:\n              Editheader Extension\", RFC 5293, August 2008.\n\
    \   [RFC5429]  Stone, A., Ed., \"Sieve Email Filtering: Reject and\n         \
    \     Extended Reject Extensions\", RFC 5429, March 2009.\n   [RFC5703]  Hansen,\
    \ T. and C. Daboo, \"Sieve Email Filtering: MIME Part\n              Tests, Iteration,\
    \ Extraction, Replacement, and Enclosure\",\n              RFC 5703, October 2009.\n"
- title: Appendix A.  Acknowledgments
  contents:
  - "Appendix A.  Acknowledgments\n   Thanks to Stephan Bosch, Ned Freed, Arnt Gulbrandsen,\
    \ Tony Hansen,\n   Kjetil Torgrim Homme, Jeffrey Hutzelman, Barry Leiba, Alexey\n\
    \   Melnikov, Ken Murchison, Marc Mutz, and Rob Siemborski, for comments\n   and\
    \ corrections.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Cyrus Daboo\n   Apple Inc.\n   1 Infinite Loop\n   Cupertino,\
    \ CA  95014\n   USA\n   EMail: cyrus@daboo.name\n   URI:   http://www.apple.com/\n\
    \   Aaron Stone\n   Serendipity\n   1817 California St. #104\n   San Francisco,\
    \ CA  94109\n   USA\n   EMail: aaron@serendipity.cx\n"
