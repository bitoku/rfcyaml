- title: __initial_text__
  contents:
  - '      IP Flow Information Export (IPFIX) Implementation Guidelines

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   The IP Flow Information Export (IPFIX) protocol defines how IP Flow\n\
    \   information can be exported from routers, measurement probes, or\n   other\
    \ devices.  This document provides guidelines for the\n   implementation and use\
    \ of the IPFIX protocol.  Several sets of\n   guidelines address Template management,\
    \ transport-specific issues,\n   implementation of Exporting and Collecting Processes,\
    \ and IPFIX\n   implementation on middleboxes (such as firewalls, network address\n\
    \   translators, tunnel endpoints, packet classifiers, etc.).\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  IPFIX Documents Overview . . . . . . . . . . . .\
    \ . . . . .  3\n     1.2.  Overview of the IPFIX Protocol . . . . . . . . . .\
    \ . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n   3.  Template Management Guidelines . . . . . . . . . . . . . .\
    \ . .  4\n     3.1.  Template Management  . . . . . . . . . . . . . . . . . .\
    \ .  4\n     3.2.  Template Records versus Options Template Records . . . . .\
    \  5\n     3.3.  Using Scopes . . . . . . . . . . . . . . . . . . . . . . .  6\n\
    \     3.4.  Multiple Information Elements of the Same Type . . . . . .  6\n  \
    \   3.5.  Selecting Message Size . . . . . . . . . . . . . . . . . .  6\n   4.\
    \  Exporting Process Guidelines . . . . . . . . . . . . . . . . .  7\n     4.1.\
    \  Sets . . . . . . . . . . . . . . . . . . . . . . . . . . .  7\n     4.2.  Information\
    \ Element Coding . . . . . . . . . . . . . . . .  7\n     4.3.  Using Counters\
    \ . . . . . . . . . . . . . . . . . . . . . .  8\n     4.4.  Padding  . . . .\
    \ . . . . . . . . . . . . . . . . . . . . .  8\n       4.4.1.  Alignment of Information\
    \ Elements within a Data\n               Record . . . . . . . . . . . . . . .\
    \ . . . . . . . . .  9\n       4.4.2.  Alignment of Information Element Specifiers\
    \ within\n               a Template Record  . . . . . . . . . . . . . . . . .\
    \ .  9\n       4.4.3.  Alignment of Records within a Set  . . . . . . . . . .\
    \  9\n       4.4.4.  Alignment of Sets within an IPFIX Message  . . . . . .  9\n\
    \     4.5.  Time Issues  . . . . . . . . . . . . . . . . . . . . . . . 10\n  \
    \   4.6.  IPFIX Message Header Export Time and Data Record Time  . . 10\n    \
    \ 4.7.  Devices without an Absolute Clock  . . . . . . . . . . . . 11\n   5. \
    \ Collecting Process Guidelines  . . . . . . . . . . . . . . . . 11\n     5.1.\
    \  Information Element (De)Coding . . . . . . . . . . . . . . 11\n     5.2.  Reduced-Size\
    \ Encoding of Information Elements  . . . . . . 12\n     5.3.  Template Management\
    \  . . . . . . . . . . . . . . . . . . . 12\n   6.  Transport-Specific Guidelines\
    \  . . . . . . . . . . . . . . . . 12\n     6.1.  SCTP . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . 12\n     6.2.  UDP  . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . 15\n     6.3.  TCP  . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . 18\n   7.  Guidelines for Implementation on Middleboxes\
    \ . . . . . . . . . 18\n     7.1.  Traffic Flow Scenarios at Middleboxes  . .\
    \ . . . . . . . . 20\n     7.2.  Location of the Observation Point  . . . . .\
    \ . . . . . . . 21\n     7.3.  Reporting Flow-Related Middlebox Internals . .\
    \ . . . . . . 22\n       7.3.1.  Packet Dropping Middleboxes  . . . . . . . .\
    \ . . . . . 23\n       7.3.2.  Middleboxes Changing the DSCP  . . . . . . . .\
    \ . . . . 23\n       7.3.3.  Middleboxes Changing IP Addresses and Port Numbers\
    \ . . 24\n   8.  Security Guidelines  . . . . . . . . . . . . . . . . . . . .\
    \ . 25\n     8.1.  Introduction to TLS and DTLS for IPFIX Implementers  . . .\
    \ 25\n     8.2.  X.509-Based Identity Verification for IPFIX over TLS\n      \
    \     or DTLS  . . . . . . . . . . . . . . . . . . . . . . . . . 25\n     8.3.\
    \  Implementing IPFIX over TLS over TCP . . . . . . . . . . . 26\n     8.4.  Implementing\
    \ IPFIX over DTLS over UDP  . . . . . . . . . . 26\n     8.5.  Implementing IPFIX\
    \ over DTLS over SCTP . . . . . . . . . . 27\n   9.  Extending the Information\
    \ Model  . . . . . . . . . . . . . . . 27\n     9.1.  Adding New IETF-Specified\
    \ Information Elements . . . . . . 27\n     9.2.  Adding Enterprise-Specific Information\
    \ Elements  . . . . . 28\n   10. Common Implementation Mistakes . . . . . . .\
    \ . . . . . . . . . 28\n     10.1. IPFIX and NetFlow Version 9  . . . . . . .\
    \ . . . . . . . . 28\n     10.2. Padding of the Data Set  . . . . . . . . . .\
    \ . . . . . . . 29\n     10.3. Field ID Numbers . . . . . . . . . . . . . . .\
    \ . . . . . . 30\n     10.4. Template ID Numbers  . . . . . . . . . . . . . .\
    \ . . . . . 30\n   11. Security Considerations  . . . . . . . . . . . . . . .\
    \ . . . . 30\n   12. Acknowledgments  . . . . . . . . . . . . . . . . . . . .\
    \ . . . 31\n   13. References . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . 31\n     13.1. Normative References . . . . . . . . . . . . . . . . . .\
    \ . 31\n     13.2. Informative References . . . . . . . . . . . . . . . . . .\
    \ 31\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The IPFIX protocol [RFC5101] defines how IP Flow information\
    \ can be\n   exported from routers, measurement probes, or other devices.  In\
    \ this\n   document, we provide guidelines for its implementation.\n   The guidelines\
    \ are split into seven main sets.  These sets address\n   implementation aspects\
    \ for Template management, Exporting Process,\n   Collecting Process, transport,\
    \ implementation on middleboxes,\n   security, and extending the information model.\n\
    \   Finally, this document contains a list of common mistakes related to\n   issues\
    \ that had been misinterpreted in the first IPFIX\n   implementations and that\
    \ created (and still might create)\n   interoperability problems.\n"
- title: 1.1.  IPFIX Documents Overview
  contents:
  - "1.1.  IPFIX Documents Overview\n   The IPFIX protocol [RFC5101] provides network\
    \ administrators with\n   access to IP Flow information.  The architecture for\
    \ the export of\n   measured IP Flow information out of an IPFIX Exporting Process\
    \ to a\n   Collecting Process is defined in the IPFIX architecture [IPFIX-ARCH],\n\
    \   per the requirements defined in [RFC3917].\n   The IPFIX architecture [IPFIX-ARCH]\
    \ specifies how IPFIX Data Records\n   and Templates are carried via a congestion-aware\
    \ transport protocol\n   from IPFIX Exporting Processes to IPFIX Collecting Processes.\n\
    \   IPFIX has a formal description of IPFIX Information Elements, their\n   name,\
    \ type, and additional semantic information, as specified in the\n   IPFIX information\
    \ model [RFC5102].\n   Finally, the IPFIX applicability statement [IPFIX-AS] describes\
    \ what\n   type of applications can use the IPFIX protocol and how they can use\n\
    \   the information provided.  It furthermore shows how the IPFIX\n   framework\
    \ relates to other architectures and frameworks.\n"
- title: 1.2.  Overview of the IPFIX Protocol
  contents:
  - "1.2.  Overview of the IPFIX Protocol\n   In the IPFIX protocol, { type, length,\
    \ value } tuples are expressed\n   in Templates containing { type, length } pairs,\
    \ specifying which\n   { value } fields are present in Data Records conforming\
    \ to the\n   Template, giving great flexibility as to what data is transmitted.\n\
    \   Since Templates are sent very infrequently compared with Data\n   Records,\
    \ this results in significant bandwidth savings.\n   Different Data Records may\
    \ be transmitted simply by sending new\n   Templates specifying the { type, length\
    \ } pairs for the new data\n   format.  See [RFC5101] for more information.\n\
    \   The IPFIX information model [RFC5102] defines a large number of\n   standard\
    \ Information Elements that provide the necessary\n   { type } information for\
    \ Templates.\n   The use of standard elements enables interoperability among different\n\
    \   vendors' implementations.  The list of standard elements may be\n   extended\
    \ in the future through the process defined in Section 9,\n   below.  Additionally,\
    \ non-standard enterprise-specific elements may\n   be defined for private use.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The terminology used in this document is fully aligned with\
    \ the\n   terminology defined in [RFC5101].  Therefore, the terms defined in\n\
    \   the IPFIX terminology are capitalized in this document, as in other\n   IPFIX\
    \ documents ([RFC5101], [RFC5102], [IPFIX-ARCH]).\n   The key words \"MUST\",\
    \ \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD\
    \ NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to\
    \ be interpreted as described in [RFC2119].\n   This document is Informational.\
    \  It does not specify a protocol and\n   does not use RFC 2119 key words [RFC2119]\
    \ such as \"MUST\" and\n   \"SHOULD\", except in quotations and restatements from\
    \ the IPFIX\n   standards documents.  The normative specification of the protocol\
    \ is\n   given in the IPFIX protocol [RFC5101] and information model [RFC5102]\n\
    \   documents.\n"
- title: 3.  Template Management Guidelines
  contents:
  - '3.  Template Management Guidelines

    '
- title: 3.1.  Template Management
  contents:
  - "3.1.  Template Management\n   The Exporting Process should always endeavor to\
    \ send Template Records\n   before the related Data Records.  However, since the\
    \ Template Record\n   may not arrive before the corresponding Data Records, the\
    \ Collecting\n   Process MAY store Data Records with an unknown Template ID pending\n\
    \   the arrival of the corresponding Template (see Section 9 of\n   [RFC5101]).\
    \  If no Template becomes available, we recommend logging\n   the event and discarding\
    \ the corresponding Data Records, and for SCTP\n   and TCP we recommend resetting\
    \ the Transport Session.  The amount of\n   time the Collecting Process waits\
    \ for a Template before resetting\n   should be configurable.  We recommend a\
    \ default of 30 minutes.  Note\n   that when using UDP as the transport protocol,\
    \ this delay should be\n   bound, when possible, by the Template Retransmit and\
    \ the Template\n   Expiry times (see Section 6.2).\n   The Exporting Process must\
    \ be able to resend active Templates.\n   Templates must be resent in the case\
    \ of a Stream Control Transport\n   Protocol (SCTP) association restart, a User\
    \ Datagram Protocol (UDP)\n   template refresh, or a Transmission Control Protocol\
    \ (TCP) connection\n   restart.\n   The Exporting Process is responsible for the\
    \ management of Template\n   IDs.  Should an insufficient number of Template IDs\
    \ be available, the\n   Exporting Process must send a Template Withdrawal Message\
    \ in order to\n   free up the allocation of unused Template IDs.  Note that UDP\
    \ doesn't\n   use the Template Withdrawal Message, and the Template lifetime on\
    \ the\n   Collecting Process relies on timeout.\n"
- title: 3.2.  Template Records versus Options Template Records
  contents:
  - "3.2.  Template Records versus Options Template Records\n   The IPFIX protocol\
    \ [RFC5101] defines and specifies the use of\n   Templates and Options Templates.\
    \  Templates define the layout of Data\n   Records, which represent Flow data.\
    \  Options Templates additionally\n   specify scope Information Elements, which\
    \ can be used to define\n   scoped Data Records.  Scoped Data Records generally\
    \ export control\n   plane data (such as metadata about processes in the IPFIX\
    \ collection\n   architecture) or data otherwise applicable to multiple Flow Data\n\
    \   Records (such as common properties as in [IPFIX-REDUCING]).\n   Aside from\
    \ Section 4 of [RFC5101], which defines specific Options\n   Templates to use\
    \ for reporting Metering Process and Exporting Process\n   statistics and configuration\
    \ information, the choice to use Options\n   Templates is left up to the implementer.\
    \  Indeed, there is a trade-\n   off between bandwidth efficiency and complexity\
    \ in the use of Options\n   Templates and scoped Data Records.\n   For example,\
    \ control plane information about an Observation Point\n   could be exported with\
    \ every Flow Record measured at that Observation\n   Point, or in a single Data\
    \ Record described by an Options Template,\n   scoped to the Observation Point\
    \ identifier.  In the former case,\n   simplicity of decoding the data is gained\
    \ in exchange for redundant\n   export of the same data with every applicable\
    \ Flow Record.  The\n   latter case is more bandwidth-efficient, but at the expense\
    \ of\n   requiring the Collecting Process to maintain the relationship between\n\
    \   each applicable Flow Record and the Observation Point.\n   A generalized method\
    \ of using Options Templates to increase bandwidth\n   efficiency is fully described\
    \ in [IPFIX-REDUCING].\n"
- title: 3.3.  Using Scopes
  contents:
  - "3.3.  Using Scopes\n   The root scope for all IPFIX Messages is the Observation\
    \ Domain,\n   which appears in the Message Header.  In other words, all Data\n\
    \   Records within a message implicitly belong to the Observation Domain.\n  \
    \ All Data Records described by Options Templates (and only those) must\n   be\
    \ restricted to an additional scope within the Observation Domain,\n   as defined\
    \ by the scope Information Elements in the Options Template\n   Record.\n   In\
    \ IPFIX, any Information Element can be used for scope.  However,\n   Information\
    \ Elements such as counters, timestamps, padding elements,\n   Flow properties\
    \ like timeout, Flow end reason, duration, or Min/Max\n   Flow properties [RFC5102]\
    \ may not be appropriate.\n   Note that it is sometimes necessary to export information\
    \ about\n   entities that exist outside any Observation Domain, or within\n  \
    \ multiple Observation Domains (e.g., information about Metering\n   Processes\
    \ scoped to meteringProcessID).  Such information SHOULD be\n   exported in an\
    \ IPFIX Message with Observation Domain ID 0 (see\n   [RFC5101], Section 3.1).\n"
- title: 3.4.  Multiple Information Elements of the Same Type
  contents:
  - "3.4.  Multiple Information Elements of the Same Type\n   The Exporting Process\
    \ and Collecting Process MUST support the use of\n   multiple Information Elements\
    \ of the same type in a single Template\n   [RFC5101].  This was first required\
    \ by Packet Sampling (PSAMP)\n   [PSAMP-PROTO] for the export of multiple Selector\
    \ IDs.  Note that the\n   IPFIX protocol recommends that Metering Processes SHOULD\
    \ use packet\n   treatment order when exporting multiple Information Elements\
    \ of the\n   same type in the same record ([RFC5101] Section 8).  This implies\n\
    \   that ordering is important, and changes to the order of multiple\n   identical\
    \ Information Elements could cause information loss.\n   Therefore, we strongly\
    \ recommend preservation of the order of\n   multiple Information Elements of\
    \ the same type by Exporting and\n   Collecting Processes for correct processing\
    \ and storage.\n"
- title: 3.5.  Selecting Message Size
  contents:
  - "3.5.  Selecting Message Size\n   Section 10.3.3 of the IPFIX protocol defines\
    \ the maximum message size\n   for IPFIX Messages transported over UDP to be constrained\
    \ by the path\n   MTU, or if the path MTU is not available, 512 bytes, which is\
    \ the\n   minimum datagram size all IP implementations must support (see also\n\
    \   Section 8.4).  However, no maximum message size is imposed on other\n   transport\
    \ protocols, beyond the 65535-byte limit imposed by the 16-\n   bit Message Length\
    \ field in the IPFIX Message Header specified in\n   Section 3.1 of [RFC5101].\n\
    \   An IPFIX Exporting Process operating over SCTP or TCP may export\n   IPFIX\
    \ Messages up to this 64-kB limit, and an IPFIX Collecting\n   Process must accept\
    \ any IPFIX Message up to that size.\n"
- title: 4.  Exporting Process Guidelines
  contents:
  - '4.  Exporting Process Guidelines

    '
- title: 4.1.  Sets
  contents:
  - "4.1.  Sets\n   A Set is identified by a Set ID [RFC5101].  A Set ID has an integral\n\
    \   data type and its value is in the range of 0-65535.  The Set ID\n   values\
    \ of 0 and 1 are not used for historical reasons [RFC3954].  A\n   value of 2\
    \ identifies a Template Set.  A value of 3 identifies an\n   Options Template\
    \ Set.  Values from 4 to 255 are reserved for future\n   use.  Values above 255\
    \ are used for Data Sets.  In this case, the Set\n   ID corresponds to the Template\
    \ ID of the used Template.\n   A Data Set received with an unknown Set ID may\
    \ be stored pending the\n   arrival of the corresponding Template (see Section\
    \ 9 of [RFC5101]).\n   If no Template becomes available, we recommend logging\
    \ the event and\n   discarding the corresponding Data Records, and for SCTP and\
    \ TCP we\n   recommend resetting the Transport Session.  The amount of time the\n\
    \   Collecting Process waits for a Template before resetting should be\n   configurable.\
    \  We recommend a default of 30 minutes.  Note that when\n   using UDP as the\
    \ transport protocol, this delay should be bound, when\n   possible, by the Template\
    \ Retransmit and the Template Expiry times\n   (see Section 6.2).\n   The arrival\
    \ of a Set with a reserved Set ID should be logged, and the\n   Collector must\
    \ ignore the Set.\n"
- title: 4.2.  Information Element Coding
  contents:
  - "4.2.  Information Element Coding\n   [IPFIX-ARCH] does not specify which entities\
    \ are responsible for the\n   encoding and decoding of Information Elements transferred\
    \ via IPFIX.\n   An IPFIX device can do the encoding either within the Metering\n\
    \   Process or within the Exporting Process.  The decoding of the\n   Information\
    \ Elements can be done by the Collecting Process or by the\n   data processing\
    \ application.\n   If an IPFIX node simply relays IPFIX Records (like a proxy),\
    \ then no\n   decoding or encoding of Information Elements is needed.  In this\n\
    \   case, the Exporting Process may export unknown Information Elements,\n   i.e.,\
    \ Information Elements with an unknown Information Element\n   identifier.\n"
- title: 4.3.  Using Counters
  contents:
  - "4.3.  Using Counters\n   IPFIX offers both Delta and Total counters (e.g., octetDeltaCount,\n\
    \   octetTotalCount).  If information about a Flow is only ever exported\n   once,\
    \ then it's not important whether Delta or Total counters are\n   used.  However,\
    \ if further information about additional packets in a\n   Flow is exported after\
    \ the first export, then either:\n   o  the metering system must reset its counters\
    \ to zero after the\n      first export and report the new counter values using\
    \ Delta\n      counters, or\n   o  the metering system must carefully maintain\
    \ its counters and\n      report the running total using Total counters.\n   At\
    \ first, reporting the running total may seem to be the obvious\n   choice.  However,\
    \ this requires that the system accurately maintains\n   information about the\
    \ Flow over a long time without any loss or\n   error, because when reported to\
    \ a Collecting Process, the previous\n   total values will be replaced with the\
    \ new information.\n   Delta counters offer some advantages: information about\
    \ Flows doesn't\n   have to be permanently maintained, and any loss of information\
    \ has\n   only a small impact on the total stored at the Collecting Process.\n\
    \   Finally, Deltas may be exported in fewer bytes than Total counters\n   using\
    \ the IPFIX \"Reduced Size Encoding\" scheme [RFC5101].\n   Note that Delta counters\
    \ have an origin of zero and that a Collecting\n   Process receiving Delta counters\
    \ for a Flow that is new to the\n   Collecting Process must assume the Deltas\
    \ are from zero.\n"
- title: 4.4.  Padding
  contents:
  - "4.4.  Padding\n   The IPFIX information model defines an Information Element\
    \ for\n   padding called paddingOctets [RFC5102].  It is of type octetArray,\n\
    \   and the IPFIX protocol allows encoding it as a fixed-length array as\n   well\
    \ as a variable-length array.\n   The padding Information Element can be used\
    \ to align Information\n   Elements within Data Records, Records within Sets,\
    \ and Sets within\n   IPFIX Messages, as described below.\n"
- title: 4.4.1.  Alignment of Information Elements within a Data Record
  contents:
  - "4.4.1.  Alignment of Information Elements within a Data Record\n   The padding\
    \ Information Element gives flexible means for aligning\n   Information Elements\
    \ within a Data Record.  Aligning within a Data\n   Record can be useful, because\
    \ internal data structures can be easily\n   converted into Flow Records at the\
    \ Exporter and vice versa at the\n   Collecting Process.\n   Alignment of Information\
    \ Elements within a Data Record is achieved by\n   inserting an instance of the\
    \ paddingOctets Information Element with\n   appropriate length before each unaligned\
    \ Information Element.  This\n   insertion is explicitly specified within the\
    \ Template Record or\n   Options Template Record, respectively, that corresponds\
    \ to the Data\n   Record.\n"
- title: 4.4.2.  Alignment of Information Element Specifiers within a Template
  contents:
  - "4.4.2.  Alignment of Information Element Specifiers within a Template\n     \
    \   Record\n   There is no means for aligning Information Element specifiers within\n\
    \   Template Records.  However, there is limited need for such a method,\n   as\
    \ Information Element specifiers are always 32-bit aligned, and 32-\n   bit alignment\
    \ is generally sufficient.\n"
- title: 4.4.3.  Alignment of Records within a Set
  contents:
  - "4.4.3.  Alignment of Records within a Set\n   There is no means for aligning\
    \ Template Records within a Set.\n   However, there is limited need for such a\
    \ method, as Information\n   Element specifiers are always 32-bit aligned, and\
    \ 32-bit alignment is\n   generally sufficient.\n   Data Records can be aligned\
    \ within a Set by appending instances of\n   the paddingOctets Information Element\
    \ at the end of the Record.\n   Since all Data Records within a Set have the same\
    \ structure and size,\n   aligning one Data Record implies aligning all the Data\
    \ Records within\n   a single Set.\n"
- title: 4.4.4.  Alignment of Sets within an IPFIX Message
  contents:
  - "4.4.4.  Alignment of Sets within an IPFIX Message\n   If Records are already\
    \ aligned within a Set by using paddingOctets\n   Information Elements, then this\
    \ alignment will already be achieved.\n   But for aligning Sets within an IPFIX\
    \ Message, padding Information\n   Elements can be used at the end of the Set\
    \ so that the subsequent Set\n   starts at an aligned boundary.  This padding\
    \ mechanism is described\n   in Section 3.3.1 of [RFC5101] and can be applied\
    \ even if the Records\n   within the Set are not aligned.  However, it should\
    \ be noted that\n   this method is limited by the constraint that \"the padding\
    \ length\n   MUST be shorter than any allowable Record in the Set\", to prevent\
    \ the\n   padding from being misinterpreted as an additional Data Record.\n"
- title: 4.5.  Time Issues
  contents:
  - "4.5.  Time Issues\n   IPFIX Messages contain the export time in the Message Header.\
    \  In\n   addition, there is a series of Information Elements defined to\n   transfer\
    \ time values.  [RFC5102] defines four abstract data types to\n   transfer time\
    \ values in second, millisecond, microsecond, and\n   nanosecond resolution.\n\
    \   The accuracy and precision of these values depend on the accuracy and\n  \
    \ the precision of the Metering Process clock.  The accuracy and\n   precision\
    \ of the Exporting Process clock, and the synchronization of\n   the Metering\
    \ Process and Exporting Process clocks, are also important\n   when using the\
    \ delta timestamp Information Elements.  To ensure\n   accuracy, the clocks should\
    \ be synchronized to a UTC time source.\n   Normally, it would be sufficient to\
    \ derive the time from a remote\n   time server using the Network Time Protocol\
    \ (NTP) [RFC1305].  IPFIX\n   Devices operating with time values of microsecond\
    \ or nanosecond\n   resolution need direct access to a time source, for example,\
    \ to a GPS\n   (Global Positioning System) unit.\n   The most important consideration\
    \ in selecting timestamp Information\n   Elements is to use a precision appropriate\
    \ for the timestamps as\n   generated from the Metering Process.  Specifically,\
    \ an IPFIX Device\n   should not export timestamp Information Elements of higher\
    \ precision\n   than the timestamps used by the Metering Process (e.g., millisecond-\n\
    \   precision Flows should not be exported with flowStartMicroseconds and\n  \
    \ flowEndMicroseconds).\n"
- title: 4.6.  IPFIX Message Header Export Time and Data Record Time
  contents:
  - "4.6.  IPFIX Message Header Export Time and Data Record Time\n   Section 5 of\
    \ [RFC5101] defines a method for optimized export of time-\n   related Information\
    \ Elements based upon the Export Time field of the\n   IPFIX Message Header. \
    \ The architectural separation of the Metering\n   Process and Exporting Process\
    \ in [IPFIX-ARCH] raises some\n   difficulties with this method, of which implementers\
    \ should be aware.\n   Since the Metering Process has no information about the\
    \ export time\n   of the IPFIX Message (that is, when the message leaves the Exporting\n\
    \   Process), it cannot properly use the delta time Information Elements;\n  \
    \ it must store absolute timestamps and transmit these to the Exporting\n   Process.\
    \  The Exporting Process must then convert these to delta\n   timestamps once\
    \ the export time is known.  This increases the\n   processing burden on the Exporting\
    \ Process.  Note also that the\n   absolute timestamps require more storage than\
    \ their delta timestamp\n   counterparts.  However, this method can result in\
    \ reduced export\n   bandwidth.\n   Alternatively, the Exporting Process may simply\
    \ export absolute\n   timestamp Information Elements.  This simplifies the Exporting\n\
    \   Process' job and reduces processing burden, but increases export\n   bandwidth\
    \ requirements.\n"
- title: 4.7.  Devices without an Absolute Clock
  contents:
  - "4.7.  Devices without an Absolute Clock\n   Exporting just relative times in\
    \ a device without an absolute clock\n   is often not sufficient.  For instance,\
    \ observed traffic could be\n   retained in the device's cache for some time before\
    \ being exported\n   (e.g., if the Exporter runs once per minute), or stuck in\
    \ an Inter\n   Process Communication (IPC) queue, or stuck in the export stack,\
    \ or\n   delayed in the network between the Exporter and Collector.\n   For these\
    \ reasons, it can be difficult for the Collecting Process to\n   convert the relative\
    \ times exported using the flowStartSysUpTime and\n   flowEndSysUpTime Information\
    \ Elements to absolute times with any sort\n   of accuracy without knowing the\
    \ systemInitTimeMilliseconds.\n   Therefore, the sending of the flowStartSysUpTime\
    \ and flowEndSysUpTime\n   Information Elements without also sending the\n   systemInitTimeMilliseconds\
    \ Information Element is not recommended.\n"
- title: 5.  Collecting Process Guidelines
  contents:
  - '5.  Collecting Process Guidelines

    '
- title: 5.1.  Information Element (De)Coding
  contents:
  - "5.1.  Information Element (De)Coding\n   Section 9 of [RFC5101] specifies: \"\
    The Collecting Process MUST note\n   the Information Element identifier of any\
    \ Information Element that it\n   does not understand and MAY discard that Information\
    \ Element from the\n   Flow Record\".  The Collecting Process may accept Templates\
    \ with\n   Information Elements of unknown types.  In this case, the value\n \
    \  received for these Information Elements should be decoded as an octet\n   array.\n\
    \   Alternatively, the Collecting Process may ignore Templates and\n   subsequent\
    \ Data Sets that contain Information Elements of unknown\n   types.\n   It is\
    \ recommended that Collecting Processes provide means to flexibly\n   add types\
    \ of new Information Elements to their knowledge base.  An\n   example is a configuration\
    \ file that is read by the Collecting\n   Process and that contains a list of\
    \ Information Element identifiers\n   and their corresponding types.  Particularly\
    \ for adding enterprise-\n   specific Information Elements, such a feature can\
    \ be very useful.\n"
- title: 5.2.  Reduced-Size Encoding of Information Elements
  contents:
  - "5.2.  Reduced-Size Encoding of Information Elements\n   Since a Collector may\
    \ receive data from the same device and\n   Observation Domain in two Templates\
    \ using different reduced-size\n   encodings, it is recommended that the data\
    \ be stored using full-size\n   encoding, to ensure that the values can be stored\
    \ or even aggregated\n   together.\n"
- title: 5.3.  Template Management
  contents:
  - "5.3.  Template Management\n   Template IDs are generated dynamically by the Exporting\
    \ Process.\n   They are unique per Transport Session and Observation Domain.\n\
    \   Therefore, for each Transport Session, the Collecting Process has to\n   maintain\
    \ a list of Observation Domains.  For each Observation Domain,\n   the Collecting\
    \ Process has to maintain a list of current Template IDs\n   in order to decode\
    \ subsequent Data Records.\n   Note that a restart of the Transport Session may\
    \ lead to a Template\n   ID renumbering.\n"
- title: 6.  Transport-Specific Guidelines
  contents:
  - "6.  Transport-Specific Guidelines\n   IPFIX can use SCTP, TCP, or UDP as a transport\
    \ protocol.  IPFIX\n   implementations MUST support SCTP with partial reliability\
    \ extensions\n   (PR-SCTP), and MAY support TCP and/or UDP (see [RFC5101], Section\n\
    \   10.1).  In the IPFIX documents, the terms SCTP and PR-SCTP are often\n   used\
    \ interchangeably to mean SCTP with partial reliability\n   extensions.\n"
- title: 6.1.  SCTP
  contents:
  - "6.1.  SCTP\n   PR-SCTP is the preferred transport protocol for IPFIX because\
    \ it is\n   congestion-aware, reducing total bandwidth usage in the case of\n\
    \   congestion, but with a simpler state machine than TCP.  This saves\n   resources\
    \ on lightweight probes and router line cards.\n   SCTP, as specified in [RFC4960]\
    \ with the PR-SCTP extension defined in\n   [RFC3758], provides several features\
    \ not available in TCP or UDP.\n   The two of these most universally applicable\
    \ to IPFIX\n   implementations, and which IPFIX implementers need to know about,\
    \ are\n   multiple streams and per-message partial reliability.\n   An SCTP association\
    \ may contain multiple streams.  Streams are useful\n   for avoiding head-of-line\
    \ blocking, thereby minimizing end-to-end\n   delay from the Exporting Process\
    \ to the Collecting Process.  Example\n   applications for this feature would\
    \ be using one SCTP stream per\n   Observation Domain, one stream per type of\
    \ data (or Template ID), or\n   one stream for Flow data and one for metadata.\n\
    \   An Exporting Process may request any number of streams, and may send\n   IPFIX\
    \ Messages containing any type of Set (Data Set, Template Set,\n   etc.) on any\
    \ stream.  A Collecting Process MUST be able to process\n   any Message received\
    \ on any stream.\n   Stream negotiation is a feature of the SCTP protocol.  Note,\
    \ however,\n   that the IPFIX protocol doesn't provide any mechanism for the\n\
    \   Exporter to convey any information about which streams are in use to\n   the\
    \ Collector.  Therefore, stream configuration must be done out of\n   band.\n\
    \   One extra advantage of the PR-SCTP association is its ability to send\n  \
    \ messages with different levels of reliability, selected according to\n   the\
    \ application.  For example, billing or security applications might\n   require\
    \ reliable delivery of all their IPFIX Messages, while capacity\n   planning applications\
    \ might be more tolerant of message loss.  SCTP\n   allows IPFIX Messages for\
    \ all these applications to be transported\n   over the same association with\
    \ the appropriate level of reliability.\n   IPFIX Messages may be sent with full\
    \ or partial reliability, on a\n   per-message basis.  Fully reliable delivery\
    \ guarantees that the IPFIX\n   Message will be received at the Collecting Process\
    \ or that that SCTP\n   association will be reset, as with TCP.  Partially reliable\
    \ delivery\n   does not guarantee the receipt of the IPFIX Message at the Collecting\n\
    \   Process.  This feature may be used to allow Messages to be dropped\n   during\
    \ network congestion, i.e., while observing a Denial of Service\n   attack.\n\
    \   [RFC3758] defines the concept of a Partial Reliability policy, which\n   specifies\
    \ the interface used to control partially reliable delivery.\n   It also defines\
    \ a single example Partial Reliability policy called\n   \"timed reliability\"\
    , which uses a single parameter: lifetime.  The\n   lifetime is specified per\
    \ message in milliseconds, and after it\n   expires, no further attempt will be\
    \ made to transmit the message.\n   Longer lifetimes specify more retransmission\
    \ attempts per message and\n   therefore higher reliability; however, it should\
    \ be noted that the\n   absolute reliability provided by a given lifetime is highly\
    \ dependent\n   on network conditions, so an Exporting Process using the timed\n\
    \   reliability service should provide a mechanism for configuring the\n   lifetime\
    \ of exported IPFIX Messages.  Another possible Partial\n   Reliability policy\
    \ could be limited retransmission, which guarantees\n   a specified number of\
    \ retransmissions for each message.  It is up to\n   the implementer to decide\
    \ which Partial Reliability policy is most\n   appropriate for its application.\n\
    \   There is an additional service provided by SCTP and useful in\n   conjunction\
    \ with PR-SCTP: unordered delivery.  This also works on a\n   per-message basis\
    \ by declaring that a given message should be\n   delivered to the receiver as\
    \ soon as it is queued rather than kept in\n   sequence; however, it should be\
    \ noted that unless explicitly\n   requested by the sender, even messages sent\
    \ partially reliably will\n   still be delivered in order.  Unordered delivery\
    \ should not be used\n   when the order of IPFIX Messages may matter: e.g., a\
    \ Template or\n   Options Template.  Unordered delivery should not be used when\
    \ Total\n   counters are used, as reordering could result in the counter value\n\
    \   decreasing at the Collecting Process and even being left with a stale\n  \
    \ value if the last message processed is stale.\n   By convention, when the IPFIX\
    \ documents state a requirement for\n   reliable delivery (as, for example, the\
    \ IPFIX protocol document does\n   for Template Sets, Options Template Sets, and\
    \ Template Withdrawal\n   Messages), an IPFIX Exporting Process must not use partially\
    \ reliable\n   delivery for those Messages.  By default, and explicitly if the\
    \ IPFIX\n   documents call for \"partially reliable\" or \"unreliable\" delivery,\
    \ an\n   IPFIX Exporting Process may use partially reliable delivery if the\n\
    \   other requirements of the application allow.\n   The Collecting Process may\
    \ check whether IPFIX Messages are lost by\n   checking the Sequence Number in\
    \ the IPFIX header.  The Collecting\n   Process should use the Sequence Number\
    \ in the IPFIX Message Header to\n   determine whether any messages are lost when\
    \ sent with partial\n   reliability.  Sequence Numbers should be tracked independently\
    \ for\n   each stream.\n   The following may be done to mitigate message loss:\n\
    \   o  Increase the SCTP buffer size on the Exporter.\n   o  Increase the bandwidth\
    \ available for communicating the exported\n      Data Records.\n   o  Use sampling,\
    \ filtering, or aggregation in the Metering Process to\n      reduce the amount\
    \ of exported data (see [RFC5101], Section\n      10.4.2.3).\n   o  If partial\
    \ reliability is used, switch to fully reliable delivery\n      on the Exporting\
    \ Process or increase the level of partial\n      reliability (e.g., when using\
    \ timed reliability, by specifying a\n      longer lifetime for exported IPFIX\
    \ Messages).\n   If the SCTP association is brought down because the IFPIX Messages\n\
    \   can't be exported reliably, the options are:\n   o  Increase the SCTP buffer\
    \ size on the Exporter.\n   o  Increase the bandwidth available for communicating\
    \ the exported\n      Data Records.\n   o  Use sampling, filtering, or aggregation\
    \ in the Metering Process to\n      reduce the amount of exported data.\n   Note\
    \ that Templates must not be resent when using SCTP, without an\n   intervening\
    \ Template Withdrawal or SCTP association reset.  Note also\n   that since Template\
    \ Sets and Template Withdrawal Messages may be sent\n   on any SCTP stream, a\
    \ Template Withdrawal Message may withdraw a\n   Template sent on a different\
    \ stream, and a Template Set may reuse a\n   Template ID withdrawn by a Template\
    \ Withdrawal Message sent on a\n   different stream.  Therefore, an Exporting\
    \ Process sending Template\n   Withdrawal Messages should ensure to the extent\
    \ possible that the\n   Template Withdrawal Messages and subsequent Template Sets\
    \ reusing the\n   withdrawn Template IDs are received and processed at the Collecting\n\
    \   Process in proper order.  The Exporting Process can achieve this by\n   one\
    \ of two possible methods: 1. by sending a Template Withdrawal\n   Message reliably,\
    \ in order, and on the same stream as the subsequent\n   Template Set reusing\
    \ its ID; or 2. by waiting an appropriate amount\n   of time (on the scale of\
    \ one minute) after sending a Template\n   Withdrawal Message before attempting\
    \ to reuse the withdrawn Template\n   ID.\n"
- title: 6.2.  UDP
  contents:
  - "6.2.  UDP\n   UDP is useful in simple systems where an SCTP stack is not available,\n\
    \   and where there is insufficient memory for TCP buffering.\n   However, UDP\
    \ is not a reliable transport protocol, and IPFIX Messages\n   sent over UDP might\
    \ be lost as with partially reliable SCTP streams.\n   UDP is not the recommended\
    \ protocol for IPFIX and is intended for use\n   in cases in which IPFIX is replacing\
    \ an existing NetFlow\n   infrastructure, with the following properties:\n   o\
    \  A dedicated network,\n   o  within a single administrative domain,\n   o  where\
    \ SCTP is not available due to implementation constraints, and\n   o  the Collector\
    \ is as topologically close as possible to the\n      Exporter.\n   Note that\
    \ because UDP itself provides no congestion control\n   mechanisms, it is recommended\
    \ that UDP transport be used only on\n   managed networks, where the network path\
    \ has been explicitly\n   provisioned for IPFIX traffic through traffic engineering\
    \ mechanisms,\n   such as rate limiting or capacity reservations.\n   An important\
    \ example of an explicitly provisioned, managed network\n   for IPFIX is the use\
    \ of IPFIX to replace a functioning NetFlow\n   implementation on a dedicated\
    \ network.  In this situation, the\n   dedicated network should be provisioned\
    \ in accordance with the\n   NetFlow deployment experience that Flow export traffic\
    \ generated by\n   monitoring an interface will amount to 2-5% of the monitored\n\
    \   interface's bandwidth.\n   As recommended in [TSVWG-UDP], an application should\
    \ not send UDP\n   messages that result in IP packets that exceed the MTU of the\
    \ path to\n   the destination and should enable UDP checksums (see Sections 3.2\
    \ and\n   3.4 of [TSVWG-UDP], respectively).\n   Since IPFIX assumes reliable\
    \ transport of Templates over SCTP, this\n   necessitates some changes for IPFIX\
    \ Template management over UDP.\n   Templates sent from the Exporting Process\
    \ to the Collecting Process\n   over UDP MUST be resent at regular time intervals;\
    \ these intervals\n   MUST be configurable (see Section 10.3 of [RFC5101]).\n\
    \   We recommend a default Template-resend time of 10 minutes,\n   configurable\
    \ between 1 minute and 1 day.\n   Note that this could become an interoperability\
    \ problem; e.g., if an\n   Exporter resends Templates once per day, while a Collector\
    \ expires\n   Templates hourly, then they may both be IPFIX-compatible, but not\
    \ be\n   interoperable.\n   Retransmission time intervals that are too short waste\
    \ bandwidth on\n   unnecessary Template retransmissions.  On the other hand, time\n\
    \   intervals that are too long introduce additional costs or risk of\n   data\
    \ loss by potentially requiring the Collector to cache more data\n   without having\
    \ the Templates available to decode it.\n   To increase reliability and limit\
    \ the amount of potentially lost\n   data, the Exporting Process may resend additional\
    \ Templates using a\n   packet-based schedule.  In this case, Templates are resent\
    \ depending\n   on the number of data packets sent.  Similarly to the time interval,\n\
    \   resending a Template every few packets introduces additional\n   overhead,\
    \ while resending after a large amount of packets have\n   already been sent means\
    \ high costs due to the data caching and\n   potential data loss.\n   We recommend\
    \ a default Template-resend interval of 20 packets,\n   configurable between 1\
    \ and 1000 data packets.\n   Note that a sufficiently small resend time or packet\
    \ interval may\n   cause a system to become stuck, continually resending Templates\
    \ or\n   Options Data.  For example, if the resend packet interval is 2 (i.e.,\n\
    \   Templates or Options Data are to be sent in every other packet) but\n   more\
    \ than two packets are required to send all the information, then\n   the resend\
    \ interval will have expired by the time the information has\n   been sent, and\
    \ Templates or Options Data will be sent continuously --\n   possibly preventing\
    \ any data from being sent at all.  Therefore, the\n   resend intervals should\
    \ be considered from the last data packet, and\n   should not be tied to specific\
    \ Sequence Numbers.\n   The Collecting Process should use the Sequence Number\
    \ in the IPFIX\n   Message Header to determine whether any messages are lost.\n\
    \   The following may be done to mitigate message loss:\n   o  Move the Collector\
    \ topologically closer to the Exporter.\n   o  Increase the bandwidth of the links\
    \ through which the Data Records\n      are exported.\n   o  Use sampling, filtering,\
    \ or aggregation in the Metering Process to\n      reduce the amount of exported\
    \ data.\n   o  Increase the buffer size at the Collector and/or the Exporter.\n\
    \   Before using a Template for the first time, the Exporter may send it\n   in\
    \ several different IPFIX Messages spaced out over a period of\n   packets in\
    \ order to increase the likelihood that the Collector has\n   received the Template.\n\
    \   Template Withdrawal Messages MUST NOT be sent over UDP (per Section\n   10.3.6\
    \ of [RFC5101]).  The Exporter must rely on expiration at the\n   Collector to\
    \ expire old Templates or to reuse Template IDs.\n   We recommend that the Collector\
    \ implements a Template Expiry of three\n   times the Exporter refresh rate.\n\
    \   However, since the IPFIX protocol doesn't provide any mechanism for\n   the\
    \ Exporter to convey any information about the Template Expiry time\n   to the\
    \ Collector, configuration must be done out of band.\n   If no out-of-band configuration\
    \ is made, we recommend to initially\n   set a Template Expiry time at the Collector\
    \ of 60 minutes.  The\n   Collecting Process may estimate each Exporting Process's\
    \ resend time\n   and adapt the Expiry time for the corresponding Templates\n\
    \   accordingly.\n"
- title: 6.3.  TCP
  contents:
  - "6.3.  TCP\n   TCP can be used as a transport protocol for IPFIX if one of the\n\
    \   endpoints has no support for SCTP, but a reliable transport is needed\n  \
    \ and/or the network between the Exporter and the Collector has not\n   explicitly\
    \ been provisioned for the IPFIX traffic.  TCP is one of the\n   core protocols\
    \ of the Internet and is widely supported.\n   The Exporting Process may resend\
    \ Templates (per UDP, above), but it's\n   not required to do so, per Section\
    \ 10.4.2.2 of [RFC5101]:\n   \"A Collecting Process MUST record all Template and\
    \ Options Template\n   Records for the duration of the connection, as an Exporting\
    \ Process\n   is not required to re-export Template Records.\"\n   If the available\
    \ bandwidth between Exporter and Collector is not\n   sufficient or the Metering\
    \ Process generates more Data Records than\n   the Collector is capable of processing,\
    \ then TCP congestion control\n   may cause the Exporter to block.  Options in\
    \ this case are:\n   o  Increase the TCP buffer size on the Exporter.\n   o  Increase\
    \ the bandwidth of the links through which the Data Records\n      are exported.\n\
    \   o  Use sampling, filtering, or aggregation in the Metering Process to\n  \
    \    reduce the amount of exported data.\n"
- title: 7.  Guidelines for Implementation on Middleboxes
  contents:
  - "7.  Guidelines for Implementation on Middleboxes\n   The term middlebox is defined\
    \ in [RFC3234] as:\n   \"any intermediary device performing functions other than\
    \ the normal,\n   standard functions of an IP router on the datagram path between\
    \ a\n   source host and destination host.\"\n   The list of middleboxes discussed\
    \ in [RFC3234] contains:\n   1.   Network Address Translation (NAT),\n   2.  \
    \ NAT-Protocol Translation (NAT-PT),\n   3.   SOCKS gateway,\n   4.   IP tunnel\
    \ endpoints,\n   5.   packet classifiers, markers, schedulers,\n   6.   transport\
    \ relay,\n   7.   TCP performance enhancing proxies,\n   8.   load balancers that\
    \ divert/munge packets,\n   9.   IP firewalls,\n   10.  application firewalls,\n\
    \   11.  application-level gateways,\n   12.  gatekeepers / session control boxes,\n\
    \   13.  transcoders,\n   14.  proxies,\n   15.  caches,\n   16.  modified DNS\
    \ servers,\n   17.  content and applications distribution boxes,\n   18.  load\
    \ balancers that divert/munge URLs,\n   19.  application-level interceptors,\n\
    \   20.  application-level multicast,\n   21.  involuntary packet redirection,\n\
    \   22.  anonymizers.\n   It is likely that since the publication of RFC 3234\
    \ new kinds of\n   middleboxes have been added.\n   While the IPFIX specifications\
    \ [RFC5101] based the requirements on\n   the export protocol only (as the IPFIX\
    \ name implies), these sections\n   cover the guidelines for the implementation\
    \ of the Metering Process\n   by recommending which Information Elements to export\
    \ for the\n   different middlebox considerations.\n"
- title: 7.1.  Traffic Flow Scenarios at Middleboxes
  contents:
  - "7.1.  Traffic Flow Scenarios at Middleboxes\n   Middleboxes may delay, reorder,\
    \ drop, or multiply packets; they may\n   change packet header fields and change\
    \ the payload.  All these\n   actions have an impact on traffic Flow properties.\
    \  In general, a\n   middlebox transforms a unidirectional original traffic Flow\
    \ T that\n   arrives at the middlebox into a transformed traffic Flow T' that\n\
    \   leaves the middlebox.\n                                 +-----------+\n  \
    \                        T ---->| middlebox |----> T'\n                      \
    \           +-----------+\n       Figure 1: Unidirectional traffic Flow traversing\
    \ a middlebox\n   Note that in an extreme case, T' may be an empty traffic Flow\
    \ (a Flow\n   with no packets), for example, if the middlebox is a firewall and\n\
    \   blocks the Flow.\n   In case of a middlebox performing a multicast function,\
    \ a single\n   original traffic Flow may be transformed into more than one\n \
    \  transformed traffic Flow.\n                                           +------>\
    \ T'\n                                           |\n                         \
    \        +---------+-+\n                          T ---->| middlebox |----> T''\n\
    \                                 +---------+-+\n                            \
    \               |\n                                           +------> T'''\n\
    \     Figure 2: Unidirectional traffic Flow traversing a middlebox with\n    \
    \                        multicast function\n   For bidirectional traffic Flows,\
    \ we identify Flows on different sides\n   of the middlebox; say, T_l on the left\
    \ side and T_r on the right\n   side.\n                                 +-----------+\n\
    \                        T_l <--->| middlebox |<---> T_r\n                   \
    \              +-----------+\n    Figure 3: Bidirectional unicast traffic Flow\
    \ traversing a middlebox\n   In case of a NAT, T_l might be a traffic Flow in\
    \ a private address\n   realm and T_r the translated traffic Flow in the public\
    \ address\n   realm.  If the middlebox is a NAT-PT, then T_l may be an IPv4 traffic\n\
    \   Flow and T_r the translated IPv6 traffic Flow.\n   At tunnel endpoints, Flows\
    \ are multiplexed or demultiplexed.  In\n   general, tunnel endpoints can deal\
    \ with bidirectional traffic Flows.\n                                        \
    \   +------> T_r1\n                                           v\n            \
    \                     +---------+-+\n                        T_l <--->| middlebox\
    \ |<---> T_r2\n                                 +---------+-+\n              \
    \                             ^\n                                           +------>\
    \ T_r3\n                     Figure 4: Multiple data reduction\n   An example\
    \ is a traffic Flow T_l of a tunnel and Flows T_rx that are\n   multiplexed into\
    \ or demultiplexed out of a tunnel.  According to the\n   IPFIX definition of\
    \ traffic Flows in [RFC5101], T and T' or T_l and\n   T_rx, respectively, are\
    \ different Flows in general.\n   However, from an application point of view,\
    \ they might be considered\n   as closely related or even as the same Flow, for\
    \ example, if the\n   payloads they carry are identical.\n"
- title: 7.2.  Location of the Observation Point
  contents:
  - "7.2.  Location of the Observation Point\n   Middleboxes might be integrated with\
    \ other devices.  An example is a\n   router with a NAT or a firewall at a line\
    \ card.  If an IPFIX\n   Observation Point is located at the line card, then the\
    \ properties of\n   measured traffic Flows may depend on the side of the integrated\n\
    \   middlebox at which packets were captured for traffic Flow\n   measurement.\n\
    \   Consequently, an Exporting Process reporting traffic Flows measured\n   at\
    \ a device that hosts one or more middleboxes should clearly\n   indicate to Collecting\
    \ Processes the location of the used Observation\n   Point(s) with respect to\
    \ the middlebox(es).  This can be done by\n   using Options with Observation Point\
    \ as scope and elements like, for\n   instance, lineCardID or samplerID.  Otherwise,\
    \ processing the\n   measured Flow data could lead to wrong results.\n   At first\
    \ glance, choosing an Observation Point that covers the entire\n   middlebox looks\
    \ like an attractive choice.  But this leads to\n   ambiguities for all kinds\
    \ of middleboxes.  Within the middlebox,\n   properties of packets are modified,\
    \ and it should be clear at a\n   Collecting Process whether packets were observed\
    \ and metered before\n   or after modification.  For example, it must be clear\
    \ whether a\n   reported source IP address was observed before or after a NAT\
    \ changed\n   it or whether a reported packet count was measured before or after\
    \ a\n   firewall dropped packets.  For this reason, [RFC5102] provides\n   Information\
    \ Elements with prefix \"post\" for Flow properties that are\n   changed within\
    \ a middlebox.\n   If an Observation Point is located inside a middlebox, the\
    \ middlebox\n   must have well-defined and well-separated internal functions,\
    \ for\n   example, a combined NAT and firewall, and the Observation Point\n  \
    \ should be located on a boundary between middlebox functions rather\n   than\
    \ within one of the functions.\n"
- title: 7.3.  Reporting Flow-Related Middlebox Internals
  contents:
  - "7.3.  Reporting Flow-Related Middlebox Internals\n   While this document recommends\
    \ IPFIX implementations using\n   Observation Points outside of middlebox functions,\
    \ there are a few\n   special cases where reporting Flow-related internals of\
    \ a middlebox\n   is of interest.\n   For many applications that use traffic measurement\
    \ results, it is\n   desirable to get more information than can be derived from\
    \ just\n   observing packets on one side of a middlebox.  If, for example,\n \
    \  packets are dropped by the middlebox acting as a firewall, NAT, or\n   traffic\
    \ shaper, then information about how many observed packets are\n   dropped may\
    \ be of high interest.\n   This section gives recommendations on middlebox internal\
    \ information\n   that may be reported if the IPFIX Observation Point is co-located\n\
    \   with one or more middleboxes.  Since the internal information to be\n   reported\
    \ depends on the kind of middlebox, it is discussed per kind.\n   The recommendations\
    \ cover middleboxes that act per packet and that do\n   not modify the application-level\
    \ payload of the packet (except by\n   dropping the entire packet) and that do\
    \ not insert additional packets\n   into an application-level or transport-level\
    \ traffic stream.\n   Covered are the packet-level middleboxes of kinds 1, 2,\
    \ 3, 5, 9, 10,\n   21, and 22 (according to the enumeration given at the beginning\
    \ of\n   Section 7 of this document).  Not covered are 4, 6-8 and 11-20.  TCP\n\
    \   performance-enhancing proxies (7) are not covered because they may\n   add\
    \ ACK packets to a TCP connection.\n   Still, if possible, IPFIX implementations\
    \ co-located with uncovered\n   middleboxes (i.e., of type 7 or 11-20) should\
    \ follow the\n   recommendations given in this section if they can be applied\
    \ in a way\n   that reflects the intention of these recommendations.\n"
- title: 7.3.1.  Packet Dropping Middleboxes
  contents:
  - "7.3.1.  Packet Dropping Middleboxes\n   If an IPFIX Observation Point is co-located\
    \ with one or more\n   middleboxes that potentially drop packets, then the corresponding\n\
    \   IPFIX Exporting Process should be able to report the number of\n   packets\
    \ that were dropped per reported Flow.\n   Concerned kinds of middleboxes are\
    \ NAT (1), NAT-PT (2), SOCKS gateway\n   (3), packet schedulers (5), IP firewalls\
    \ (9) and application-level\n   firewalls (10).\n"
- title: 7.3.2.  Middleboxes Changing the DSCP
  contents:
  - "7.3.2.  Middleboxes Changing the DSCP\n   If an IPFIX Observation Point is co-located\
    \ with one or more\n   middleboxes that potentially modify the Diffserv Code Point\
    \ (DSCP,\n   see [RFC2474]) in the IP header, then the corresponding IPFIX\n \
    \  Exporting Process should be able to report both the observed incoming\n   DSCP\
    \ value and also the DSCP value on the 'other' side of the\n   middlebox (if this\
    \ is a constant value for the particular traffic\n   flow).  The related Information\
    \ Elements specified in [RFC5102] are:\n   IpClassOfService and postIpClassOfService.\n\
    \   Note that the current IPFIX information model only contains\n   Information\
    \ Elements supporting packets observed before the DSCP\n   change, i.e. ipClassOfService\
    \ and postIpClassOfService, where the\n   latter reports the value of the IP TOS\
    \ field after the DSCP change.\n   We recommend, whenever possible, to move the\
    \ Observation Point to the\n   point before the DSCP change and report the Observed\
    \ and post-\n   values.  If reporting the value of the IP TOS field before DSCP\n\
    \   change is required, \"pre\" values can be exported using enterprise-\n   specific\
    \ Information Elements.\n   Note also that a classifier may change the same DSCP\
    \ value of packets\n   from the same Flow to different values depending on the\
    \ packet or\n   other conditions.  Also, it is possible that packets of a single\n\
    \   unidirectional arriving Flow contain packets with different DSCP\n   values\
    \ that are all set to the same value by the middlebox.  In both\n   cases, there\
    \ is a constant value for the DSCP field in the IP packet\n   header to be observed\
    \ on one side of the middlebox, but on the other\n   side the value may vary.\
    \  In such a case, reliable reporting of the\n   DSCP value on the 'other' side\
    \ of the middlebox is not possible by\n   just reporting a single value.  According\
    \ to the IPFIX information\n   model [RFC5102], the first value observed for the\
    \ DSCP is reported by\n   the IPFIX protocol in that case.\n   This recommendation\
    \ applies to packet markers (5).\n"
- title: 7.3.3.  Middleboxes Changing IP Addresses and Port Numbers
  contents:
  - "7.3.3.  Middleboxes Changing IP Addresses and Port Numbers\n   If an IPFIX Observation\
    \ Point is co-located with one or more\n   middleboxes that potentially modify\
    \ the:\n   o  IP version field,\n   o  IP source address header field,\n   o \
    \ IP destination address header field,\n   o  Source transport port number, or\n\
    \   o  Destination transport port number\n   in one of the headers, then the corresponding\
    \ IPFIX Exporting Process\n   should be able to report the 'translated' value\
    \ of these fields, as\n   far as they have constant values for the particular\
    \ traffic Flow, in\n   addition to the observed values of these fields.\n   If\
    \ the changed values are not constant for the particular traffic\n   Flow but\
    \ still reporting is desired, then it is recommended that the\n   general rule\
    \ from [RFC5102] for Information Elements with changing\n   values is applied:\
    \ the reported value is the one that applies to the\n   first packet observed\
    \ for the reported Flow.\n   Note that the 'translated' value of the fields can\
    \ be the values\n   before or after the translation depending on the Flow direction\
    \ and\n   the location of the Observation Point with respect to the middlebox.\n\
    \   We always call the value that is not the one observed at the\n   Observation\
    \ Point the translated value.\n   Note also that a middlebox may change the same\
    \ port number value of\n   packets from the same Flow to different values depending\
    \ on the\n   packet or other conditions.  Also, it is possible that packets of\n\
    \   different unidirectional arriving Flows with different source/\n   destination\
    \ port number pairs may be mapped to a single Flow with a\n   single source/destination\
    \ port number pair by the middlebox.  In both\n   cases, there is a constant value\
    \ for the port number pair to be\n   observed on one side of the middlebox, but\
    \ on the other side the\n   values may vary.  In such a case, reliable reporting\
    \ of the port\n   number pairs on the 'other' side of the middlebox is not possible.\n\
    \   According to the IPFIX information model [RFC5102], the first value\n   observed\
    \ for each port number is reported by the IPFIX protocol in\n   that case.\n \
    \  This recommendation applies to NAT (1), NAT-PT (2), SOCKS gateway (3)\n   and\
    \ involuntary packet redirection (21) middleboxes.  It may also be\n   applied\
    \ to anonymizers (22), though it should be noted that this\n   carries the risk\
    \ of losing the effect of anonymization.\n"
- title: 8.  Security Guidelines
  contents:
  - '8.  Security Guidelines

    '
- title: 8.1.  Introduction to TLS and DTLS for IPFIX Implementers
  contents:
  - "8.1.  Introduction to TLS and DTLS for IPFIX Implementers\n   Transport Layer\
    \ Security (TLS) [RFC4346] and Datagram Transport Layer\n   Security (DTLS) [RFC4347]\
    \ are the REQUIRED protocols for securing\n   network traffic exported with IPFIX\
    \ (see Section 11 of [RFC5101]).\n   TLS requires a reliable transport channel\
    \ and is selected as the\n   security mechanism for TCP.  DTLS is a version of\
    \ TLS capable of\n   securing datagram traffic and is selected for UDP, SCTP,\
    \ and PR-SCTP.\n   When mapping TLS terminology used in [RFC4346] to IPFIX terminology,\n\
    \   keep in mind that the IPFIX Exporting Process, as it is the\n   connection\
    \ initiator, corresponds to the TLS client, and the IPFIX\n   Collecting Process\
    \ corresponds to the TLS server.  These terms apply\n   only to the bidirectional\
    \ TLS handshakes done at Transport Session\n   establishment and completion time;\
    \ aside from TLS connection set up\n   between the Exporting Process and the Collecting\
    \ Process, and\n   teardown at the end of the session, the unidirectional Flow\
    \ of\n   messages from Exporting Process to Collecting Process operates over\n\
    \   TLS just as over any other transport layer for IPFIX.\n"
- title: 8.2.  X.509-Based Identity Verification for IPFIX over TLS or DTLS
  contents:
  - "8.2.  X.509-Based Identity Verification for IPFIX over TLS or DTLS\n   When using\
    \ TLS or DTLS to secure an IPFIX Transport Session, the\n   Collecting Process\
    \ and Exporting Process must use strong mutual\n   authentication.  In other words,\
    \ each IPFIX endpoint must have its\n   own X.509 certificate [RFC3280] and private\
    \ key, and the Collecting\n   Process, which acts as the TLS or DTLS server, must\
    \ send a\n   Certificate Request to the Exporting Process during the TLS\n   handshake,\
    \ and fail to establish a session if the Exporting Process\n   does not present\
    \ a valid certificate.\n   Each Exporting Process and Collecting Process must\
    \ verify the\n   identity of its peer against a set of authorized peers.  This\
    \ may be\n   done by configuring a set of authorized distinguished names and\n\
    \   comparing the peer certificate's subject distinguished name against\n   each\
    \ name in the set.  However, if a private certification authority\n   (CA) is\
    \ used to sign the certificates identifying the Collecting\n   Processes and Exporting\
    \ Processes, and the set of certificates signed\n   by that private CA may be\
    \ restricted to those identifying peers\n   authorized to communicate with each\
    \ other, it is sufficient to merely\n   verify that the peer's certificate is\
    \ issued by this private CA.\n   When verifying the identity of its peer, an IPFIX\
    \ Exporting Process\n   or Collecting Process must verify that the peer certificate's\
    \ subject\n   common name or subjectAltName extension dNSName matches the fully-\n\
    \   qualified domain name (FQDN) of the peer.  This involves retrieving\n   the\
    \ expected domain name from the peer certificate and the address of\n   the peer,\
    \ then verifying that the two match via a DNS lookup.  Such\n   verification should\
    \ require both that forward lookups (FQDN to peer\n   address) and reverse lookups\
    \ (peer address to FQDN) match.  In\n   deployments without DNS infrastructure,\
    \ it is acceptable to represent\n   the FQDN as an IPv4 dotted-quad or a textual\
    \ IPv6 address as in\n   [RFC1924].\n"
- title: 8.3.  Implementing IPFIX over TLS over TCP
  contents:
  - "8.3.  Implementing IPFIX over TLS over TCP\n   Of the security solutions specified\
    \ for IPFIX, TLS over TCP is as of\n   this writing the most mature and widely\
    \ implemented.  Until stable\n   implementations of DTLS over SCTP are widely\
    \ available (see\n   Section 8.5, below), it is recommended that applications\
    \ requiring\n   secure transport for IPFIX Messages use TLS over TCP.\n   When\
    \ using TLS over TCP, IPFIX Exporting Processes and Collecting\n   Processes should\
    \ behave in all other aspects as if using TCP as the\n   transport protocol, especially\
    \ as regards the handling of Templates\n   and Template withdrawals.\n"
- title: 8.4.  Implementing IPFIX over DTLS over UDP
  contents:
  - "8.4.  Implementing IPFIX over DTLS over UDP\n   An implementation of the DTLS\
    \ protocol version 1, described in\n   [RFC4347] and required to secure IPFIX\
    \ over UDP, is available in\n   OpenSSL [OPENSSL] as of version 0.9.8.  However,\
    \ DTLS support is as\n   of this writing under active development and certain\
    \ implementations\n   might be unstable.  We recommend extensive testing of DTLS-based\n\
    \   IPFIX implementations to build confidence in the DTLS stack over\n   which\
    \ your implementation runs.\n   When using DTLS over UDP, IPFIX Exporting Processes\
    \ and Collecting\n   Processes should behave in all other aspects as if using\
    \ UDP as the\n   transport protocol, especially as regards the handling of Templates\n\
    \   and Template timeouts.\n   Note that the selection of IPFIX Message sizes\
    \ for DTLS over UDP must\n   account for overhead per packet introduced by the\
    \ DTLS layer.\n"
- title: 8.5.  Implementing IPFIX over DTLS over SCTP
  contents:
  - "8.5.  Implementing IPFIX over DTLS over SCTP\n   As of this writing, there is\
    \ no publicly available implementation of\n   DTLS over SCTP as described in [RFC4347]\
    \ and [TUEXEN].\n   When using DTLS over SCTP, IPFIX Exporting Processes and Collecting\n\
    \   Processes should behave in all other aspects as if using SCTP as the\n   transport\
    \ protocol, especially as regards the handling of Templates\n   and the use of\
    \ reliable transport for Template and scope information.\n   An implementation\
    \ of the DTLS protocol version 1, described in\n   [RFC4347] and required to secure\
    \ IPFIX over SCTP, is available in\n   OpenSSL [OPENSSL] as of version 0.9.8.\
    \  However, DTLS support is as\n   of this writing under active development and\
    \ certain implementations\n   might be unstable.  We recommend extensive testing\
    \ of DTLS-based\n   IPFIX implementations to build confidence in the DTLS stack\
    \ over\n   which your implementation runs.\n"
- title: 9.  Extending the Information Model
  contents:
  - "9.  Extending the Information Model\n   IPFIX supports two sets of Information\
    \ Elements: IANA-registered\n   Information Elements and enterprise-specific Information\
    \ Elements.\n   New Information Elements can be added to both sets as described\
    \ in\n   this section.  If an Information Element is considered of general\n \
    \  interest, it should be added to the set of IETF-specified Information\n   Elements\
    \ that is maintained by IANA.\n   Alternatively, private enterprises can define\
    \ proprietary Information\n   Elements for internal purposes.  There are several\
    \ potential reasons\n   for doing so.  For example, the Information Element might\
    \ only relate\n   to proprietary features of a device or protocol of the enterprise.\n\
    \   Also, pre-standard product delivery or commercially sensitive product\n  \
    \ features might cause the need for enterprise-specific Information\n   Elements.\n\
    \   The IPFIX information model [RFC5102] document contains an XML-based\n   specification\
    \ of Template, abstract data types, and IPFIX Information\n   Elements, which\
    \ may be used to create consistent machine-readable\n   extensions to the IPFIX\
    \ information model.  This description can be\n   used for automatically checking\
    \ syntactic correctness of the\n   specification of IPFIX Information Elements\
    \ and for generating code\n   that deals with processing IPFIX Information Elements.\n"
- title: 9.1.  Adding New IETF-Specified Information Elements
  contents:
  - "9.1.  Adding New IETF-Specified Information Elements\n   New IPFIX Information\
    \ Elements that are considered to be of general\n   interest should be added to\
    \ the set of IETF-specified Information\n   Elements that is maintained by IANA.\n\
    \   The introduction of new Information Elements in the IANA registry is\n   subject\
    \ to expert review.  As described in Section 7.1 of [RFC5102],\n   an expert review\
    \ is performed by one of a group of experts designated\n   by an IETF Operations\
    \ and Management Area Director.  The experts will\n   initially be drawn from\
    \ the Working Group Chairs and document editors\n   of the IPFIX and PSAMP Working\
    \ Groups.  The group of experts must\n   double check the Information Elements\
    \ definitions with already\n   defined Information Elements for completeness,\
    \ accuracy, redundancy,\n   and correct naming following the naming conventions\
    \ in [RFC5102],\n   Section 2.3.\n   The specification of new IPFIX Information\
    \ Elements must use the\n   Template specified in [RFC5102], Section 2.1, and\
    \ must be published\n   using a well-established and persistent publication medium.\n"
- title: 9.2.  Adding Enterprise-Specific Information Elements
  contents:
  - "9.2.  Adding Enterprise-Specific Information Elements\n   Enterprises or other\
    \ organizations holding a registered Structure of\n   Management Information (SMI)\
    \ network management private enterprise\n   code number can specify enterprise-specific\
    \ Information Elements.\n   Their identifiers can be chosen arbitrarily within\
    \ the range of\n   1-32767 and have to be coupled with a Private Enterprise Identifier\n\
    \   [PEN].  Enterprise identifiers MUST be registered as SMI network\n   management\
    \ private enterprise code numbers with IANA.  The registry\n   can be found at\
    \ http://www.iana.org/assignments/enterprise-numbers.\n"
- title: 10.  Common Implementation Mistakes
  contents:
  - "10.  Common Implementation Mistakes\n   The issues listed in this section were\
    \ identified during\n   implementation and interoperability testing.  They do\
    \ not stem from\n   insufficient clarity in the protocol, but each of these was\
    \ an actual\n   mistake made in a tested IPFIX implementation.  They are listed\
    \ here\n   for the convenience of future implementers.\n"
- title: 10.1.  IPFIX and NetFlow Version 9
  contents:
  - "10.1.  IPFIX and NetFlow Version 9\n   A large group of mistakes stems from the\
    \ fact that many implementers\n   started implementing IPFIX from an existing\
    \ version of NetFlow\n   version 9 [RFC3954].  Despite their similarity, the two\
    \ protocols\n   differ in many aspects.  We list here some of the most important\n\
    \   differences.\n   o  Transport protocol: NetFlow version 9 initially ran over\
    \ UDP,\n      while IPFIX must have a congestion-aware transport protocol.\n \
    \     IPFIX specifies PR-SCTP as its mandatory protocol, while TCP and\n     \
    \ UDP are optional.\n   o  IPFIX differentiates between IANA-registered and enterprise-\n\
    \      specific Information Elements.  Enterprise-specific Information\n     \
    \ Elements can be specified by coupling a non-IANA-registered\n      Information\
    \ Element identifier with an Enterprise ID\n      (corresponding to the vendor\
    \ that defined the Information\n      Element).\n   o  Options Templates: in IPFIX,\
    \ an Options Template must have a\n      scope, and the scope is not allowed to\
    \ be of length zero.  The\n      NetFlow version 9 specifications [RFC3954] don't\
    \ specify that the\n      scope must not be of length zero.\n   Message Header:\n\
    \   o  Set ID: Even if the packet headers are different between IPFIX and\n  \
    \    NetFlow version 9, similar fields are used in both of them.  The\n      difference\
    \ between the two protocols is in the values that these\n      fields can assume.\
    \  A typical example is the Set ID values: the\n      Set ID values of 0 and 1\
    \ are used in NetFlow version 9, while they\n      are not used in IPFIX.\n  \
    \ o  Length field: in NetFlow version 9, this field (called count)\n      contains\
    \ the number of Records.  In IPFIX, it indicates the total\n      length of the\
    \ IPFIX Message, measured in octets (including Message\n      Header and Set(s)).\n\
    \   o  Timestamp: the NetFlow version 9 header has an additional\n      timestamp:\
    \ sysUpTime.  It indicates the time in milliseconds since\n      the last reboot\
    \ of the Exporting Process.\n   o  The version number is different.  NetFlow version\
    \ 9 uses the\n      version number 9, while IPFIX uses the version number 10.\n"
- title: 10.2.  Padding of the Data Set
  contents:
  - "10.2.  Padding of the Data Set\n   [RFC5101] specifies that the Exporting Process\
    \ MAY insert some octets\n   for set padding to align Data Sets within a Message.\
    \  The padding\n   length must be shorter than any allowable Record in that set.\n\
    \   It is important to respect this limitation: if the padding length is\n   equal\
    \ to or longer than the length of the shortest Record, it will be\n   interpreted\
    \ as another Record.\n   An alternative is to use the paddingOctets Information\
    \ Element in the\n   Template definition.\n"
- title: 10.3.  Field ID Numbers
  contents:
  - "10.3.  Field ID Numbers\n   Information Element numbers in IPFIX have the range\
    \ 0-32767\n   (0-0x7FFF).  Information Element numbers outside this range (i.e.,\n\
    \   with the high bit set) are taken to be enterprise-specific\n   Information\
    \ Elements, which have an additional four-byte Private\n   Enterprise Number following\
    \ the Information Element number and\n   length.  Inadvertently setting the high\
    \ bit of the Information\n   Element number by selecting a number out of this\
    \ range will therefore\n   cause Template scanning errors.\n"
- title: 10.4.  Template ID Numbers
  contents:
  - "10.4.  Template ID Numbers\n   Template IDs are generated as required by the\
    \ Exporting Process.\n   When the same set of Information Elements is exported\
    \ at different\n   times, the corresponding Template is usually identified by\
    \ different\n   Template IDs.  Similarly, if multiple co-existing Templates are\n\
    \   composed of the same set of Information Elements, they are also\n   identified\
    \ by different Template IDs.  The Collecting Process does\n   not know in advance\
    \ which Template ID a particular Template will use.\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   This document describes the implementation guidelines\
    \ of IPFIX.  The\n   security requirements for the IPFIX target applications are\
    \ addressed\n   in the IPFIX requirements document [RFC3917].  These requirements\
    \ are\n   considered for the specification of the IPFIX protocol [RFC5101], for\n\
    \   which a Security Considerations Section exists.\n   Section 7 of this document\
    \ recommends that IPFIX Exporting Processes\n   report internals about middleboxes.\
    \  These internals may be security-\n   relevant, and the reported information\
    \ needs to be protected\n   appropriately for reasons given below.\n   Reporting\
    \ of packets dropped by firewalls and other packet-dropping\n   middleboxes carries\
    \ the risk that this information can be used by\n   attackers for analyzing the\
    \ configuration of the middlebox and for\n   developing attacks against it.  Address\
    \ translation may be used for\n   hiding the network structure behind an address\
    \ translator.  If an\n   IPFIX Exporting Process reports the translations performed\
    \ by an\n   address translator, then parts of the network structure may be\n \
    \  revealed.  If an IPFIX Exporting Process reports the translations\n   performed\
    \ by an anonymizer, the main function of the anonymizer may\n   be compromised.\n\
    \   Note that there exist vulnerabilities in DTLS over SCTP as specified\n   in\
    \ the IPFIX protocol, such that a third party could cause messages\n   to be undetectably\
    \ lost, or an SCTP association to shut down.  These\n   vulnerabilities are addressed\
    \ by [TUEXEN]; however, it is unclear\n   whether initial OpenSSL-based implementations\
    \ of DTLS over SCTP will\n   contain the required fixes.  DTLS over SCTP should\
    \ be used with\n   caution in production environments until these issues are completely\n\
    \   addressed.\n"
- title: 12.  Acknowledgments
  contents:
  - "12.  Acknowledgments\n   We would like to thank the MoMe project for organizing\
    \ two IPFIX\n   Interoperability Events in July 2005 and in March 2006, and\n\
    \   Fraunhofer Fokus for organizing the third one in November 2006.  The\n   Interoperability\
    \ Events provided us precious input for this document.\n   Thanks to Brian Trammell\
    \ for his contributions to the SCTP section\n   and the security guidelines and\
    \ for the multiple thorough reviews.\n   We would also like to thank Benoit Claise,\
    \ Carsten Schmoll, and\n   Gerhard Muenz for the technical review and feedback,\
    \ and Michael\n   Tuexen, Randall Stewart, and Peter Lei for reviewing the SCTP\n\
    \   section.\n"
- title: 13.  References
  contents:
  - '13.  References

    '
- title: 13.1.  Normative References
  contents:
  - "13.1.  Normative References\n   [RFC5101]         Claise, B., Ed., \"Specification\
    \ of the IP Flow\n                     Information Export (IPFIX) Protocol for\
    \ the\n                     Exchange of IP Traffic Flow Information\", RFC 5101,\n\
    \                     January 2008.\n   [RFC5102]         Quittek, J., Bryant,\
    \ S., Claise, B., Aitken, P.,\n                     and J. Meyer, \"Information\
    \ Model for IP Flow\n                     Information Export\", RFC 5102, January\
    \ 2008.\n   [RFC2119]         Bradner, S., \"Key words for use in RFCs to Indicate\n\
    \                     Requirement Levels\", BCP 14, RFC 2119, March 1997.\n"
- title: 13.2.  Informative References
  contents:
  - "13.2.  Informative References\n   [IPFIX-AS]        Zseby, T., Boschi, E., Brownlee,\
    \ N., and B. Claise,\n                     \"IPFIX Applicability\", Work in Progress,\
    \ July 2007.\n   [IPFIX-ARCH]      Sadasivan, G., Brownlee, N., Claise, B., and\
    \ J.\n                     Quittek, \"Architecture for IP Flow Information\n \
    \                    Export\", Work in Progress, September 2006.\n   [IPFIX-REDUCING]\
    \  Boschi, E., Mark, L., and B. Claise, \"Reducing\n                     Redundancy\
    \ in IP Flow Information Export (IPFIX)\n                     and Packet Sampling\
    \ (PSAMP) Reports\", Work\n                     in Progress, May 2007.\n   [PSAMP-PROTO]\
    \     Claise, B., Quittek, J., and A. Johnson, \"Packet\n                    \
    \ Sampling (PSAMP) Protocol Specifications\", Work\n                     in Progress,\
    \ December 2007.\n   [TUEXEN]          Tuexen, M. and E. Rescorla, \"Datagram\
    \ Transport\n                     Layer Security for Stream Control Transmission\n\
    \                     Protocol\", Work in Progress, November 2007.\n   [TSVWG-UDP]\
    \       Eggert, L. and G. Fairhurst, \"UDP Usage Guidelines\n                \
    \     for Application Designers\", Work in Progress,\n                     February\
    \ 2008.\n   [RFC1305]         Mills, D., \"Network Time Protocol (Version 3)\n\
    \                     Specification, Implementation and Analysis\",\n        \
    \             RFC 1305, March 1992.\n   [RFC1924]         Elz, R., \"A Compact\
    \ Representation of IPv6\n                     Addresses\", RFC 1924, April 1996.\n\
    \   [RFC2474]         Nichols, K., Blake, S., Baker, F., and D. Black,\n     \
    \                \"Definition of the Differentiated Services Field\n         \
    \            (DS Field) in the IPv4 and IPv6 Headers\", RFC 2474,\n          \
    \           December 1998.\n   [RFC3234]         Carpenter, B. and S. Brim, \"\
    Middleboxes: Taxonomy\n                     and Issues\", RFC 3234, February 2002.\n\
    \   [RFC3280]         Housley, R., Polk, W., Ford, W., and D. Solo,\n        \
    \             \"Internet X.509 Public Key Infrastructure\n                   \
    \  Certificate and Certificate Revocation List (CRL)\n                     Profile\"\
    , RFC 3280, April 2002.\n   [RFC3758]         Stewart, R., Ramalho, M., Xie, Q.,\
    \ Tuexen, M., and\n                     P. Conrad, \"Stream Control Transmission\
    \ Protocol\n                     (SCTP) Partial Reliability Extension\", RFC 3758,\n\
    \                     May 2004.\n   [RFC3917]         Quittek, J., Zseby, T.,\
    \ Claise, B., and S. Zander,\n                     \"Requirements for IP Flow\
    \ Information Export\n                     (IPFIX)\", RFC 3917, October 2004.\n\
    \   [RFC3954]         Claise, B., Ed., \"Cisco Systems NetFlow Services\n    \
    \                 Export Version 9\", RFC 3954, October 2004.\n   [RFC4346]  \
    \       Dierks, T. and E. Rescorla, \"The Transport Layer\n                  \
    \   Security (TLS) Protocol Version 1.1\", RFC 4346,\n                     April\
    \ 2006.\n   [RFC4347]         Rescorla, E. and N. Modadugu, \"Datagram Transport\n\
    \                     Layer Security\", RFC 4347, April 2006.\n   [RFC4960]  \
    \       Stewart, R., Ed., \"Stream Control Transmission\n                    \
    \ Protocol\", RFC 4960, September 2007.\n   [OPENSSL]         OpenSSL, \"OpenSSL:\
    \ The Open Source toolkit for SSL/\n                     TLS\", <http://www.openssl.org/>.\n\
    \   [PEN]             IANA, \"PRIVATE ENTERPRISE NUMBERS\", <http://\n       \
    \              www.iana.org/assignments/enterprise-numbers>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Elisa Boschi\n   Hitachi Europe\n   c/o ETH Zurich\n \
    \  Gloriastr. 35\n   8092 Zurich\n   Switzerland\n   Phone: +41 44 6327057\n \
    \  EMail: elisa.boschi@hitachi-eu.com\n   Lutz Mark\n   Fraunhofer FOKUS\n   Kaiserin\
    \ Augusta Allee 31\n   10589 Berlin\n   Germany\n   Phone: +49 421 2246-206\n\
    \   EMail: lutz.mark@ifam.fraunhofer.de\n   Juergen Quittek\n   NEC Europe Ltd.\n\
    \   Kurfuersten-Anlage 36\n   69115 Heidelberg\n   Germany\n   Phone: +49 6221\
    \ 4342-115\n   EMail: quittek@nw.neclab.eu\n   Martin Stiemerling\n   NEC Europe\
    \ Ltd.\n   Kurfuersten-Anlage 36\n   69115 Heidelberg\n   Germany\n   Phone: +49\
    \ 6221 4342-113\n   EMail: stiemerling@nw.neclab.eu\n   Paul Aitken\n   Cisco\
    \ Systems, Inc.\n   96 Commercial Quay\n   Edinburgh  EH6 6LX\n   Scotland\n \
    \  Phone: +44 131 561 3616\n   EMail: paitken@cisco.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2008).\n   This document\
    \ is subject to the rights, licenses and restrictions\n   contained in BCP 78,\
    \ and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE\
    \ INTERNET ENGINEERING TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED,\
    \ INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION\
    \ HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY\
    \ OR FITNESS FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
