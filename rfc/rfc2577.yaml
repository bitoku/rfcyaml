- title: __initial_text__
  contents:
  - '                      FTP Security Considerations

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The specification for the File Transfer Protocol (FTP) contains\
    \ a\n   number of mechanisms that can be used to compromise network security.\n\
    \   The FTP specification allows a client to instruct a server to\n   transfer\
    \ files to a third machine.  This third-party mechanism, known\n   as proxy FTP,\
    \ causes a well known security problem.  The FTP\n   specification also allows\
    \ an unlimited number of attempts at entering\n   a user's password.  This allows\
    \ brute force \"password guessing\"\n   attacks.  This document provides suggestions\
    \ for system\n   administrators and those implementing FTP servers that will decrease\n\
    \   the security problems associated with FTP.\n"
- title: 1   Introduction
  contents:
  - "1   Introduction\n   The File Transfer Protocol specification (FTP) [PR85] provides\
    \ a\n   mechanism that allows a client to establish an FTP control connection\n\
    \   and transfer a file between two FTP servers.  This \"proxy FTP\"\n   mechanism\
    \ can be used to decrease the amount of traffic on the\n   network; the client\
    \ instructs one server to transfer a file to\n   another server, rather than transferring\
    \ the file from the first\n   server to the client and then from the client to\
    \ the second server.\n   This is particularly useful when the client connects\
    \ to the network\n   using a slow link (e.g., a modem).  While useful, proxy FTP\
    \ provides\n   a security problem known as a \"bounce attack\" [CERT97:27].  In\n\
    \   addition to the bounce attack, FTP servers can be used by attackers\n   to\
    \ guess passwords using brute force.\n   This document does not contain a discussion\
    \ of FTP when used in\n   conjunction with strong security protocols, such as\
    \ IP Security.\n   These security concerns should be documented, however they\
    \ are out of\n   the scope of this document.\n   This paper provides information\
    \ for FTP server implementers and\n   system administrators, as follows.  Section\
    \ 2 describes the FTP\n   \"bounce attack\".  Section 3 provides suggestions for\
    \ minimizing the\n   bounce attack.  Section 4 provides suggestions for servers\
    \ which\n   limit access based on network address.  Section 5 provides\n   recommendations\
    \ for limiting brute force \"password guessing\" by\n   clients.  Next, section\
    \ 6 provides a brief discussion of mechanisms\n   to improve privacy.  Section\
    \ 7 provides a mechanism to prevent user\n   identity guessing.  Section 8 discusses\
    \ the practice of port\n   stealing.  Finally, section 9 provides an overview\
    \ of other FTP\n   security issues related to software bugs rather than protocol\
    \ issues.\n"
- title: 2   The Bounce Attack
  contents:
  - "2   The Bounce Attack\n   The version of FTP specified in the standard [PR85]\
    \ provides a method\n   for attacking well known network servers, while making\
    \ the\n   perpetrators difficult to track down.  The attack involves sending an\n\
    \   FTP \"PORT\" command to an FTP server containing the network address\n   and\
    \ the port number of the machine and service being attacked.  At\n   this point,\
    \ the original client can instruct the FTP server to send a\n   file to the service\
    \ being attacked.  Such a file would contain\n   commands relevant to the service\
    \ being attacked (SMTP, NNTP, etc.).\n   Instructing a third party to connect\
    \ to the service, rather than\n   connecting directly, makes tracking down the\
    \ perpetrator difficult\n   and can circumvent network-address-based access restrictions.\n\
    \   As an example, a client uploads a file containing SMTP commands to an\n  \
    \ FTP server.  Then, using an appropriate PORT command, the client\n   instructs\
    \ the server to open a connection to a third machine's SMTP\n   port.  Finally,\
    \ the client instructs the server to transfer the\n   uploaded file containing\
    \ SMTP commands to the third machine.  This\n   may allow the client to forge\
    \ mail on the third machine without\n   making a direct connection.  This makes\
    \ it difficult to track\n   attackers.\n"
- title: 3   Protecting Against the Bounce Attack
  contents:
  - "3   Protecting Against the Bounce Attack\n   The original FTP specification [PR85]\
    \ assumes that data connections\n   will be made using the Transmission Control\
    \ Protocol (TCP) [Pos81].\n   TCP port numbers in the range 0 - 1023 are reserved\
    \ for well known\n   services such as mail, network news and FTP control connections\n\
    \   [RP94].  The FTP specification makes no restrictions on the TCP port\n   number\
    \ used for the data connection.  Therefore, using proxy FTP,\n   clients have\
    \ the ability to tell the server to attack a well known\n   service on any machine.\n\
    \   To avoid such bounce attacks, it is suggested that servers not open\n   data\
    \ connections to TCP ports less than 1024.  If a server receives a\n   PORT command\
    \ containing a TCP port number less than 1024, the\n   suggested response is 504\
    \ (defined as \"Command not implemented for\n   that parameter\" by [PR85]). \
    \ Note that this still leaves non-well\n   known servers (those running on ports\
    \ greater than 1023) vulnerable\n   to bounce attacks.\n   Several proposals (e.g.,\
    \ [AOM98] and [Pis94]) provide a mechanism\n   that would allow data connections\
    \ to be made using a transport\n   protocol other than TCP.  Similar precautions\
    \ should be taken to\n   protect well known services when using these protocols.\n\
    \   Also note that the bounce attack generally requires that a\n   perpetrator\
    \ be able to upload a file to an FTP server and later\n   download it to the service\
    \ being attacked.  Using proper file\n   protections will prevent this behavior.\
    \  However, attackers can also\n   attack services by sending random data from\
    \ a remote FTP server which\n   may cause problems for some services.\n   Disabling\
    \ the PORT command is also an option for protecting against\n   the bounce attack.\
    \  Most file transfers can be made using only the\n   PASV command [Bel94].  The\
    \ disadvantage of disabling the PORT command\n   is that one loses the ability\
    \ to use proxy FTP, but proxy FTP may not\n   be necessary in a particular environment.\n"
- title: 4   Restricted Access
  contents:
  - "4   Restricted Access\n   For some FTP servers, it is desirable to restrict access\
    \ based on\n   network address.  For example, a server might want to restrict\
    \ access\n   to certain files from certain places (e.g., a certain file should\
    \ not\n   be transferred out of an organization).  In such a situation, the\n\
    \   server should confirm that the network address of the remote hosts on\n  \
    \ both the control connection and the data connection are within the\n   organization\
    \ before sending a restricted file.  By checking both\n   connections, a server\
    \ is protected against the case when the control\n   connection is established\
    \ with a trusted host and the data connection\n   is not.  Likewise, the client\
    \ should verify the IP address of the\n   remote host after accepting a connection\
    \ on a port opened in listen\n   mode to verify that the connection was made by\
    \ the expected server.\n   Note that restricting access based on network address\
    \ leaves the FTP\n   server vulnerable to \"spoof\" attacks.  In a spoof attack,\
    \ for\n   example, an attacking machine could assume the host address of\n   another\
    \ machine inside an organization and download files that are\n   not accessible\
    \ from outside the organization.  Whenever possible,\n   secure authentication\
    \ mechanisms should be used, such as those\n   outlined in [HL97].\n"
- title: 5   Protecting Passwords
  contents:
  - "5   Protecting Passwords\n   To minimize the risk of brute force password guessing\
    \ through the FTP\n   server, it is suggested that servers limit the number of\
    \ attempts\n   that can be made at sending a correct password.  After a small\
    \ number\n   of attempts (3-5), the server should close the control connection\n\
    \   with the client.  Before closing the control connection the server\n   must\
    \ send a return code of 421 (\"Service not available, closing\n   control connection.\"\
    \ [PR85]) to the client.  In addition, it is\n   suggested that the server impose\
    \ a 5 second delay before replying to\n   an invalid \"PASS\" command to diminish\
    \ the efficiency of a brute force\n   attack.  If available, mechanisms already\
    \ provided by the target\n   operating system should be used to implement the\
    \ above suggestions.\n   An intruder can subvert the above mechanisms by establishing\n\
    \   multiple, parallel control connections to a server.  To combat the\n   use\
    \ of multiple concurrent connections, the server could either limit\n   the total\
    \ number of control connections possible or attempt to detect\n   suspicious activity\
    \ across sessions and refuse further connections\n   from the site.  However,\
    \ both of these mechanisms open the door to\n   \"denial of service\" attacks,\
    \ in which an attacker purposely initiates\n   the attack to disable access by\
    \ a valid user.\n   Standard FTP [PR85] sends passwords in clear text using the\
    \ \"PASS\"\n   command.  It is suggested that FTP clients and servers use alternate\n\
    \   authentication mechanisms that are not subject to eavesdropping (such\n  \
    \ as the mechanisms being developed by the IETF Common Authentication\n   Technology\
    \ Working Group [HL97]).\n"
- title: 6   Privacy
  contents:
  - "6   Privacy\n   All data and control information (including passwords) is sent\
    \ across\n   the network in unencrypted form by standard FTP [PR85].  To guarantee\n\
    \   the privacy of the information FTP transmits, a strong encryption\n   scheme\
    \ should be used whenever possible.  One such mechanism is\n   defined in [HL97].\n"
- title: 7   Protecting Usernames
  contents:
  - "7   Protecting Usernames\n   Standard FTP [PR85] specifies a 530 response to\
    \ the USER command when\n   the username is rejected.  If the username is valid\
    \ and a password is\n   required FTP returns a 331 response instead.  In order\
    \ to prevent a\n   malicious client from determining valid usernames on a server,\
    \ it is\n   suggested that a server always return 331 to the USER command and\n\
    \   then reject the combination of username and password for an invalid\n   username.\n"
- title: 8   Port Stealing
  contents:
  - "8   Port Stealing\n   Many operating systems assign dynamic port numbers in increasing\n\
    \   order.  By making a legitimate transfer, an attacker can observe the\n   current\
    \ port number allocated by the server and \"guess\" the next one\n   that will\
    \ be used.  The attacker can make a connection to this port,\n   thus denying\
    \ another legitimate client the ability to make a\n   transfer.  Alternatively,\
    \ the attacker can steal a file meant for a\n   legitimate user.  In addition,\
    \ an attacker can insert a forged file\n   into a data stream thought to come\
    \ from an authenticated client.\n   This problem can be mitigated by making FTP\
    \ clients and servers use\n   random local port numbers for data connections,\
    \ either by requesting\n   random ports from the operating system or using system\
    \ dependent\n   mechanisms.\n"
- title: 9   Software-Base Security Problems
  contents:
  - "9   Software-Base Security Problems\n   The emphasis in this document is on protocol-related\
    \ security issues.\n   There are a number of documented FTP security-related problems\
    \ that\n   are due to poor implementation as well.  Although the details of\n\
    \   these types of problems are beyond the scope of this document, it\n   should\
    \ be pointed out that the following FTP features has been abused\n   in the past\
    \ and should be treated with great care by future\n   implementers:\n   Anonymous\
    \ FTP\n      Anonymous FTP refers to the ability of a client to connect to an\n\
    \      FTP server with minimal authentication and gain access to public\n    \
    \  files.  Security problems arise when such a user can read all\n      files\
    \ on the system or can create files. [CERT92:09] [CERT93:06]\n   Remote Command\
    \ Execution\n      An optional FTP extension, \"SITE EXEC\", allows clients to\
    \ execute\n      arbitrary commands on the server.  This feature should obviously\n\
    \      be implemented with great care.  There are several documented\n      cases\
    \ of the FTP \"SITE EXEC\" command being used to subvert server\n      security\
    \ [CERT94:08] [CERT95:16]\n   Debug Code\n      Several previous security compromises\
    \ related to FTP can be\n      attributed to software that was installed with\
    \ debugging features\n      enabled [CERT88:01].\n   This document recommends\
    \ that implementors of FTP servers with these\n   capabilities review all of the\
    \ CERT advisories for attacks on these\n   or similar mechanisms before releasing\
    \ their software.\n"
- title: 10  Conclusion
  contents:
  - "10  Conclusion\n   Using the above suggestions can decrease the security problems\n\
    \   associated with FTP servers without eliminating functionality.\n"
- title: 11  Security Considerations
  contents:
  - "11  Security Considerations\n   Security issues are discussed throughout this\
    \ memo.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   We would like to thank Alex Belits, Jim Bound, William Curtin,\
    \ Robert\n   Elz, Paul Hethmon, Alun Jones and Stephen Tihor for their helpful\n\
    \   comments on this paper.  Also, we thank the FTPEXT WG members who\n   gave\
    \ many useful suggestions at the Memphis IETF meeting.\n"
- title: References
  contents:
  - "References\n   [AOM98]     Allman, M., Ostermann, S. and C. Metz, \"FTP Extensions\n\
    \               for IPv6 and NATs\", RFC 2428, September 1998.\n   [Bel94]   \
    \  Bellovin. S., \"Firewall-Friendly FTP\", RFC 1579, February\n             \
    \  1994.\n   [CERT88:01] CERT Advisory CA-88:01. ftpd Vulnerability. December,\n\
    \               1988 ftp://info.cert.org/pub/cert_advisories/\n   [CERT92:09]\
    \ CERT Advisory CA-92:09. AIX Anonymous FTP Vulnerability.\n               April\
    \ 27, 1992. ftp://info.cert.org/pub/cert_advisories/\n   [CERT93:06] CERT Advisory\
    \ CA-93:06. Wuarchive ftpd Vulnerability.\n               September 19,1997\n\
    \               ftp://info.cert.org/pub/cert_advisories/\n   [CERT94:08] CERT\
    \ Advisory CA-94:08. ftpd Vulnerabilities. September\n               23, 1997.\
    \  ftp://info.cert.org/pub/cert_advisories/\n   [CERT95:16] CERT Advisory CA-95:16.\
    \ wu-ftpd Misconfiguration\n               Vulnerability.  September 23, 1997\n\
    \               ftp://info.cert.org/pub/cert_advisories/\n   [CERT97:27] CERT\
    \ Advisory CA-97.27. FTP Bounce.  January 8, 1998.\n               ftp://info.cert.org/pub/cert_advisories/\n\
    \   [HL97]      Horowitz, M. and S. Lunt, \"FTP Security Extensions\", RFC\n \
    \              2228, October 1997.\n   [Pis94]     Piscitello, D., \"FTP Operation\
    \ Over Big Address Records\n               (FOOBAR), RFC 1639, June 1994.\n  \
    \ [Pos81]     Postel, J., \"Transmission Control Protocol\", STD 7, RFC\n    \
    \           793, September 1981.\n   [PR85]      Postel, J. and J. Reynolds, \"\
    File Transfer Protocol\n               (FTP)\", STD 9, RFC 959, October 1985.\n\
    \   [RP94]      Reynolds, J. and J. Postel, \"Assigned Numbers\", STD 2,\n   \
    \            RFC 1700, October 1994.  See also:\n               http://www.iana.org/numbers.html\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mark Allman\n   NASA Glenn Research Center/Sterling Software\n\
    \   21000 Brookpark Rd.  MS 54-2\n   Cleveland, OH  44135\n   EMail: mallman@grc.nasa.gov\n\
    \   Shawn Ostermann\n   School of Electrical Engineering and Computer Science\n\
    \   Ohio University\n   416 Morton Hall\n   Athens, OH  45701\n   EMail: ostermann@cs.ohiou.edu\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (1999).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
