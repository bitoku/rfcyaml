- title: __initial_text__
  contents:
  - '                ISO Transport Services on Top of the TCP

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo describes a proposed protocol standard for\
    \ the ARPA\n   Internet community.  The intention is that hosts in the ARPA-Internet\n\
    \   that choose to implement ISO TSAP services on top of the TCP be\n   expected\
    \ to adopt and implement this standard.  Suggestions for\n   improvement are encouraged.\
    \  Distribution of this memo is unlimited.\n"
- title: 1.  Introduction and Philosophy
  contents:
  - "1.  Introduction and Philosophy\n   The ARPA Internet community has a well-developed,\
    \ mature set of\n   transport and internetwork protocols (TCP/IP), which are quite\n\
    \   successful in offering network and transport services to end-users.\n   The\
    \ CCITT and the ISO have defined various session, presentation, and\n   application\
    \ recommendations which have been adopted by the\n   international community and\
    \ numerous vendors.  To the largest extent\n   possible, it is desirable to offer\
    \ these higher level services\n   directly in the ARPA Internet, without disrupting\
    \ existing\n   facilities.  This permits users to develop expertise with ISO and\n\
    \   CCITT applications which previously were not available in the ARPA\n   Internet.\
    \  It also permits a more graceful transition strategy from\n   TCP/IP-based networks\
    \ to ISO-based networks in the medium- and\n   long-term.\n   There are two basic\
    \ approaches which can be taken when \"porting\" an\n   ISO or CCITT application\
    \ to a TCP/IP environment.  One approach is to\n   port each individual application\
    \ separately, developing local\n   protocols on top of the TCP.  Although this\
    \ is useful in the\n   short-term (since special-purpose interfaces to the TCP\
    \ can be\n   developed quickly), it lacks generality.\n   A second approach is\
    \ based on the observation that both the ARPA\n   Internet protocol suite and\
    \ the ISO protocol suite are both layered\n   systems (though the former uses\
    \ layering from a more pragmatic\n   perspective).  A key aspect of the layering\
    \ principle is that of\n   layer-independence.  Although this section is redundant\
    \ for most\n   readers, a slight bit of background material is necessary to\n\
    \   introduce this concept.\n   Externally, a layer is defined by two definitions:\n\
    \      a service-offered definition, which describes the services\n      provided\
    \ by the layer and the interfaces it provides to access\n      those services;\
    \ and,\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - "ISO Transport Services on Top of the TCP\n      a service-required definitions,\
    \ which describes the services used\n      by the layer and the interfaces it\
    \ uses to access those services.\n   Collectively, all of the entities in the\
    \ network which co-operate to\n   provide the service are known as the service-provider.\
    \ Individually,\n   each of these entities is known as a service-peer.\n   Internally,\
    \ a layer is defined by one definition:\n      a protocol definition, which describes\
    \ the rules which each\n      service-peer uses when communicating with other\
    \ service-peers.\n   Putting all this together, the service-provider uses the\
    \ protocol and\n   services from the layer below to offer the its service to the\
    \ layer\n   above.  Protocol verification, for instance, deals with proving that\n\
    \   this in fact happens (and is also a fertile field for many Ph.D.\n   dissertations\
    \ in computer science).\n   The concept of layer-independence quite simply is:\n\
    \      IF one preserves the services offered by the service-provider\n      THEN\
    \ the service-user is completely naive with respect to the\n      protocol which\
    \ the service-peers use\n   For the purposes of this memo, we will use the layer-independence\
    \ to\n   define a Transport Service Access Point (TSAP) which appears to be\n\
    \   identical to the services and interfaces offered by the ISO/CCITT\n   TSAP\
    \ (as defined in [ISO-8072]), but we will base the internals of\n   this TSAP\
    \ on TCP/IP (as defined in [RFC-793,RFC791]), not on the\n   ISO/CCITT transport\
    \ and network protocols.  Hence, ISO/CCITT higher\n   level layers (all session,\
    \ presentation, and application entities)\n   can operate fully without knowledge\
    \ of the fact that they are running\n   on a TCP/IP internetwork.\n   The authors\
    \ hope that the preceding paragraph will not come as a\n   shock to most readers.\
    \  However, an ALARMING number of people seem to\n   think that layering is just\
    \ a way of cutting up a large problem into\n   smaller ones, *simply* for the\
    \ sake of cutting it up.  Although\n   layering tends to introduce modularity\
    \ into an architecture, and\n   modularity tends to introduce sanity into implementations\
    \ (both\n   conceptual and physical implementations), modularity, per se, is not\n\
    \   the end goal.  Flexibility IS.\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - 'ISO Transport Services on Top of the TCP

    '
- title: 2.  Motivation
  contents:
  - "2.  Motivation\n   In migrating from the use of TCP/IP to the ISO protocols,\
    \ there are\n   several strategies that one might undertake.  This memo was written\n\
    \   with one particular strategy in mind.\n   The particular migration strategy\
    \ which this memo uses is based on\n   the notion of gatewaying between the TCP/IP\
    \ and ISO protocol suites\n   at the transport layer.  There are two strong arguments\
    \ for this\n   approach:\n      a.  Experience teaches us that it takes just as\
    \ long to get good\n      implementations of the lower level protocols as it takes\
    \ to get\n      good implementations of the higher level ones.  In particular,\
    \ it\n      has been observed that there is still a lot of work being done at\n\
    \      the ISO network and transport layers.  As a result,\n      implementations\
    \ of protocols above these layers are not being\n      aggressively pursued. Thus,\
    \ something must be done \"now\" to\n      provide a medium in which the higher\
    \ level protocols can be\n      developed.  Since TCP/IP is mature, and essentially\
    \ provides\n      identical functionality, it is an ideal medium to support this\n\
    \      development.\n      b.  Implementation of gateways at the IP and ISO IP\
    \ layers are\n      probably not of general use in the long term.  In effect,\
    \ this\n      would require each Internet host to support both TP4 and TCP.  As\n\
    \      such, a better strategy is to implement a graceful migration path\n   \
    \   from TCP/IP to ISO protocols for the ARPA Internet when the ISO\n      protocols\
    \ have matured sufficiently.\n   Both of these arguments indicate that gatewaying\
    \ should occur at or\n   above the transport layer service access point.  Further,\
    \ the first\n   argument suggests that the best approach is to perform the gatewaying\n\
    \   exactly AT the transport service access point to maximize the number\n   of\
    \ ISO layers which can be developed.\n      NOTE:  This memo does not intend to\
    \ act as a migration or\n      intercept document.  It is intended ONLY to meet\
    \ the needs\n      discussed above.  However, it would not be unexpected that\
    \ the\n      protocol described in this memo might form part of an overall\n \
    \     transition plan.  The description of such a plan however is\n      COMPLETELY\
    \ beyond the scope of this memo.\n   Finally, in general, building gateways between\
    \ other layers in the\n   TCP/IP and ISO protocol suites is problematic, at best.\n\
    \   To summarize: the primary motivation for the standard described in\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - "ISO Transport Services on Top of the TCP\n   this memo is to facilitate the process\
    \ of gaining experience with\n   higher-level ISO protocols (session, presentation,\
    \ and application).\n   The stability and maturity of TCP/IP are ideal for providing\
    \ solid\n   transport services independent of actual implementation.\n"
- title: 3.  The Model
  contents:
  - "3.  The Model\n   The [ISO-8072] standard describes the ISO transport service\n\
    \   definition, henceforth called TP.\n      ASIDE:  This memo references the\
    \ ISO specifications rather than\n      the CCITT recommendations.  The differences\
    \ between these parallel\n      standards are quite small, and can be ignored,\
    \ with respect to\n      this memo, without loss of generality.  To provide the\
    \ reader with\n      the relationships:\n         Transport service      [ISO-8072]\
    \      [X.214]\n         Transport protocol     [ISO-8073]      [X.224]\n    \
    \     Session protocol       [ISO-8327]      [X.225]\n   The ISO transport service\
    \ definition describes the services offered\n   by the TS-provider (transport\
    \ service) and the interfaces used to\n   access those services.  This memo focuses\
    \ on how the ARPA\n   Transmission Control Protocol (TCP) [RFC-793] can be used\
    \ to offer\n   the services and provide the interfaces.\n   +-------------+  \
    \                                    +-------------+\n   |   TS-user   |     \
    \                                 |   TS-user   |\n   +-------------+        \
    \                              +-------------+\n           |                 \
    \                                  |\n           | TSAP interface            \
    \         TSAP interface |\n           |  [ISO-8072]                         \
    \              |\n           |                                               \
    \    |\n   +------------+   ISO Transport Services on the TCP    +------------+\n\
    \   |   client   |----------------------------------------|   server   |\n   +------------+\
    \              (this memo)               +------------+\n           |        \
    \                                           |\n           | TCP interface    \
    \                   TCP interface |\n           |  [RFC-793]                 \
    \                       |\n           |                                      \
    \             |\n   For expository purposes, the following abbreviations are used:\n\
    \      TS-peer           a process which implements the protocol\n           \
    \             described by this memo\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - "ISO Transport Services on Top of the TCP\n      TS-user           a process talking\
    \ using the services of a\n                        TS-peer\n      TS-provider\
    \       the black-box entity implementing the protocol\n                     \
    \   described by this memo\n   For the purposes of this memo, which describes\
    \ version 1 of the TSAP\n   protocol, all aspects of [ISO-8072] are supported\
    \ with one exception:\n      Quality of Service parameters\n   In the spirit of\
    \ CCITT, this is left \"for further study\".  Version 2\n   of the TSAP protocol\
    \ will most likely support the QOS parameters for\n   TP by mapping these onto\
    \ various TCP parameters.\n   Since TP supports the notion of a session port (termed\
    \ a TSAP ID),\n   but the list of reserved ISO TSAP IDs is not clearly defined\
    \ at this\n   time, this memo takes the philosophy of isolating the TCP port space\n\
    \   from the TSAP ID space and uses a single TCP port.  This memo\n   reserves\
    \ TCP port 102 for this purpose.  This protocol manages its\n   own TSAP ID space\
    \ independent of the TCP.  Appendix A of this memo\n   lists reserved TSAP IDs\
    \ for version 1 of this TSAP protocol.  It is\n   expected that future editions\
    \ of the \"Assigned Numbers\" document\n   [RFC-960] will contain updates to this\
    \ list.  (Interested readers are\n   encouraged to read [ISO-8073] and try to\
    \ figure out exactly what a\n   TSAP ID is.)\n   Finally, the ISO TSAP is fundamentally\
    \ symmetric in behavior.  There\n   is no underlying client/server model.  Instead\
    \ of a server listening\n   on a well-known port, when a connection is established,\
    \ the\n   TS-provider generates an INDICATION event which, presumably the\n  \
    \ TS-user catches and acts upon.  Although this might be implemented by\n   having\
    \ a server \"listen\" by hanging on the INDICATION event, from the\n   perspective\
    \ of the ISO TSAP, all TS-users just sit around in the IDLE\n   state until they\
    \ either generate a REQUEST or accept an INDICATION.\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - 'ISO Transport Services on Top of the TCP

    '
- title: 4.  The Primitives
  contents:
  - "4.  The Primitives\n   The protocol assumes that the TCP [RFC-793] offers the\
    \ following\n   service primitives:\n   Events\n      connected       - open succeeded\
    \ (either ACTIVE or PASSIVE)\n      connect fails   - ACTIVE open failed\n   \
    \   data ready      - data can be read from the connection\n      errored    \
    \     - the connection has errored and is now closed\n      closed          -\
    \ an orderly disconnection has started\n   Actions\n      listen on port  - PASSIVE\
    \ open on the given port\n      open port       - ACTIVE open to the given port\n\
    \      read data       - data is read from the connection\n      send data   \
    \    - data is sent on the connection\n      close           - the connection\
    \ is closed (pending data is sent)\n   The protocol offers the following service\
    \ primitives, as defined in\n   [ISO-8072], to the TS-user:\n   Events\n     \
    \ T-CONNECT.INDICATION\n         - a TS-user (server) is notified that connection\
    \ establishment\n           is in progress\n      T-DISCONNECT.INDICATION\n  \
    \       - a TS-user is notified that the connection is closed\n      T-CONNECT.CONFIRMATION\n\
    \         - a TS-user (client) is notified that the connection has been\n    \
    \       established\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - "ISO Transport Services on Top of the TCP\n      T-DATA.INDICATION\n         -\
    \ a TS-user is notified that data can be read from the\n           connection\n\
    \      T-EXPEDITED DATA.INDICATION\n         - a TS-user is notified that \"expedited\"\
    \ data can be read from\n           the connection\n   Actions\n      T-CONNECT.RESPONSE\n\
    \         - a TS-user (server) indicates that it will honor the request\n    \
    \  T-DISCONNECT.REQUEST\n         - a TS-user indicates that the connection is\
    \ to be closed\n      T-CONNECT.REQUEST\n         - a TS-user (client) indicates\
    \ that it wants to establish a\n           connection\n      T-DATA.REQUEST\n\
    \         - a TS-user sends data\n      T-EXPEDITED DATA.REQUEST\n         - a\
    \ TS-user sends \"expedited\" data\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - 'ISO Transport Services on Top of the TCP

    '
- title: 5.  The Protocol
  contents:
  - "5.  The Protocol\n   It is the goal of this memo to offer a TP interface on top\
    \ of the\n   TCP.  Fortunately, the TCP does just about everything that\n   TS-provider\
    \ offers to the TS-user, so the hard parts of the transport\n   layer (e.g., three-way\
    \ handshakes, choice of ISS, windowing,\n   multiplexing, ad infinitum) are all\
    \ taken care of by the TCP.\n   Despite the symmetry of TP, it is useful to consider\
    \ the protocol\n   with the perspective of a client/server model.\n   The information\
    \ exchanged between TSAP-peers is in the form of\n   packets termed \"TPKT\"s.\
    \  The format of these packets is described in\n   the next section.  For the\
    \ purposes of the description below, a TPKT\n   has a code which is one of:\n\
    \      CR - request connection\n      CC - confirm connection\n      DR - request\
    \ disconnection\n      DT - data\n      ED - expedited data\n   A TSAP server\
    \ begins by LISTENing on TCP port 102.  When a TSAP\n   client successfully connects\
    \ to this port, the protocol begins.\n   A client decides to connect to the port\
    \ when a TS-user issues a\n   T-CONNECT.REQUEST action.  This action specifies\
    \ the TSAP ID of the\n   remote TS-user, whether expedited data is to be supported,\
    \ and\n   (optionally) some initial TS-user data.  The client consults the TSAP\n\
    \   ID given to ascertain the IP address of the server.  If the expedited\n  \
    \ data option was requested, the client opens a passive TCP port, in\n   non-blocking\
    \ mode, noting the port number.  This TCP port is termed\n   the \"expedited port\"\
    .  The client then tries to open a TCP connection\n   to the server on port 102.\
    \  If not successful, the client fires\n   T-DISCONNECT.INDICATION for the TS-user\
    \ specifying the reason for\n   failure (and, closes the expedited port, if any).\
    \  If successful, the\n   client sends a TPKT with code CR containing:\n     \
    \ - the TSAP ID of the TS-user on the client's host (the \"caller\")\n      -\
    \ the TSAP ID of the TS-user that the client wants to talk to\n        (the \"\
    called\")\n      - if the expedited data option was requested, the TSAP ID of\
    \ the\n        expedited port for the client's host\n      - any TS-user data\
    \ from the T-CONNECT.REQUEST\n   The client now awaits a response.\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - "ISO Transport Services on Top of the TCP\n   The server, upon receipt of the\
    \ TPKT, validates the contents of the\n   TPKT (checking the version number, verifying\
    \ that the code is CR, and\n   so forth).  If the packet is invalid, the server\
    \ sends a TPKT with\n   code DR specifying \"PROTOCOL ERROR\", closes the TCP\
    \ connection, and\n   goes back to the LISTEN state.\n   If the packet is valid,\
    \ the server examines the TSAP ID that the\n   remote TS-user wants to communicate\
    \ with.  If the TS-user specified\n   can be located and started (e.g., the appropriate\
    \ program which\n   implements the indicated protocol is present), then the server\
    \ starts\n   this TS-user by firing T-CONNECT.INDICATION.  Otherwise, the server\n\
    \   sends a TPKT with code DR specifying \"SESSION ENTITY NOT ATTACHED TO\n  \
    \ TSAP\" or \"REMOTE TRANSPORT ENTITY CONGESTED AT CONNECT REQUEST TIME\"\n  \
    \ as appropriate, closes the TCP connection, and goes back to the\n   LISTEN state.\n\
    \   The server now waits for a T-CONNECT.RESPONSE or T-DISCONNECT.REQUEST\n  \
    \ from the TS-user it started.  if the latter is given, the server\n   sends a\
    \ TPKT with code DR containing the reason for the disconnect as\n   supplied by\
    \ the TS-user.\n   The server then closes the TCP connection and goes back to\
    \ the LISTEN\n   state.\n   Instead, if T-CONNECT.RESPONSE is given, the server\
    \ sees if an\n   expedited port was specified in the connection request.  If so,\
    \ the\n   server opens a second TCP connection and connects to the specified\n\
    \   port.  If the connection fails, the server sends a TPKT with code DR\n   specifying\
    \ \"CONNECTION NEGOTIATION FAILED\", closes the TCP\n   connection, and goes back\
    \ to the LISTEN state.  If the connection\n   succeeded, the server notes the\
    \ local port number used to connect to\n   the expedited port.\n   If an expedited\
    \ port was not specified in the TPKT with code CR, and\n   the server's TS-user\
    \ indicates that it wants to use expedited data,\n   then the server sends a TPKT\
    \ with code DR specifying \"CONNECTION\n   NEGOTIATION FAILED\", fires T-DISCONNECT.INDICATION\
    \ with this error to\n   the TS-user, closes the TCP connection, and goes back\
    \ to the LISTEN\n   state.\n   The server now sends a TPKT with code CC containing:\n\
    \      - the TSAP ID of the TS-user responding to the connection\n        (usually\
    \ the \"called\")\n      - if an expedited port was specified in the TPKT with\
    \ code CR,\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - "ISO Transport Services on Top of the TCP\n        the TSAP ID of the port number\
    \ on the server's host that was\n        used to connect to the expedited port\n\
    \      - any TS-user data from the T-CONNECT.RESPONSE\n   After sending the TPKT,\
    \ the server enters the SYMMETRIC PEER state.\n   The client, upon receipt of\
    \ the TPKT, validates the contents of the\n   TPKT (checking the version number,\
    \ verifying that the code is CC or\n   DR, and so forth).  If the packet is invalid,\
    \ the client sends a TPKT\n   with code DR specifying \"PROTOCOL ERROR\", fires\n\
    \   T-DISCONNECT.INDICATION with this error to the TS-user, and closes\n   the\
    \ TCP connection (and the expedited port, if any).\n   If the packet's code is\
    \ DR, the client fires T-DISCONNECT.INDICATION\n   with the reason given in the\
    \ TPKT to the TS-user, and closes the TCP\n   connection (and the expedited port,\
    \ if any).\n   If the packet's code is CC, the client checks if an expedited port\n\
    \   was specified and that a connection is waiting on the expedited port.\n  \
    \ If not, a protocol error has occurred, a TPKT with code DR is\n   returned,\
    \ T-DISCONNECT.INDICATION is fired, and so on.  Otherwise,\n   the client checks\
    \ the remote address that connected to the expedited\n   port.  If it differs\
    \ from the port listed in the TPKT with code CC, a\n   protocol error has occurred.\
    \  Otherwise, all is well, two TCP\n   connections have been established, one\
    \ for all TPKTs except expedited\n   data, and the second for the exclusive use\
    \ of expedited data.\n   The client now fires T-CONNECT.CONFIRMATION, and enters\
    \ the SYMMETRIC\n   PEER state.\n   Once both sides have reached the SYMMETRIC\
    \ PEER state, the protocol\n   is completely symmetric, the notion of client/server\
    \ is lost.  Both\n   TS-peers act in the following fashion:\n   If the TCP indicates\
    \ that data can be read, the TS-peer, upon receipt\n   of the TPKT, validates\
    \ the contents.  If the packet is invalid, the\n   TS-peer sends a TPKT with code\
    \ DR specifying \"PROTOCOL ERROR\", fires\n   T-DISCONNECT.INDICATION with this\
    \ error to the TS-user, and closes\n   the TCP connection (and expedited data\
    \ connection, if any).  If the\n   TS-peer was the server, it goes back to the\
    \ LISTEN state.\n      NOTE:  If the expedited data option was requested, then\
    \ there are\n      two TCP connections that can supply data for reading.  The\n\
    \      dialogue below assumes that only ED TPKTs are read from the\n      expedited\
    \ data connection. For simplicity's sake, when reading\n      from TCP the relation\
    \ between connections and TPKTs is unimportant\n      and this memo URGES all\
    \ implementations to be very lenient in this\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - "ISO Transport Services on Top of the TCP\n      regard.  When writing to TCP,\
    \ implementations should use the\n      expedited data connection only to send\
    \ TPKTs with code ED.\n      Section 7 of this memo discusses the handling of\
    \ expedited data in\n      greater detail.\n   If the packet's code is DR, the\
    \ TS-peer fires T-DISCONNECT.INDICATION\n   with the reason given in the TPKT\
    \ to the TS-user, and closes the TCP\n   connection (and expedited data connection,\
    \ if any).  If the TS-peer\n   was the server, it goes back to the LISTEN state.\n\
    \   If the packet's code is ED or DT, the TS-peer fires T-DATA.INDICATION\n  \
    \ or T-EXPEDITED DATA.INDICATION as appropriate with the enclosed user\n   data\
    \ for the TS-user.  It then goes back to the SYMMETRIC PEER state.\n   If the\
    \ packet is invalid, the TS-peer sends a TPKT with code DR\n   specifying \"PROTOCOL\
    \ ERROR\", fires T-DISCONNECT.INDICATION with this\n   error to the TS-user, and\
    \ closes the TCP connection (and expedited\n   data connection, if any).  If the\
    \ TS-peer was the server, it goes\n   back to the LISTEN state.\n   If the TCP\
    \ indicates that an error has occurred and the connection\n   has closed, then\
    \ the TS-peer fires T-DISCONNECT.INDICATION to the\n   TS-user specifying the\
    \ reason for the failure.  If the expedited data\n   connection, if any, is still\
    \ open, it is closed.  If the TS-peer was\n   the server, it goes back to the\
    \ LISTEN state.\n   If the TS-user issues a T-DATA.REQUEST or T-EXPEDITED DATA.REQUEST\n\
    \   action, the TS-peer sends a TPKT with code DT or ED containing the\n   TS-user\
    \ data.  It then goes back to the SYMMETRIC PEER state.\n   If the TS-user issues\
    \ a T-DISCONNECT.REQUEST action, the TS-peer\n   sends a TPKT with code DR containing\
    \ the reason for the disconnect as\n   supplied by the TS-user.  The TS-peer then\
    \ closes the TCP connection,\n   (and expedited data connection, if any).  If\
    \ the TS-peer was the\n   server, it goes back to the LISTEN state.\n   In terms\
    \ of (augmented) state tables, the protocol can be explained\n   as follows. \
    \ The server starts in state S0, the client starts in\n   state C0.  \"TCP:\"\
    \  refers to an event or action from the TCP service,\n   \"SS:\"  refers to an\
    \ event or action from the TS-user (e.g., the ISO\n   session service [ISO-8327]).\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - "ISO Transport Services on Top of the TCP\n                        S E R V E R\
    \   S T A T E S\n   state        event                   action              \
    \        goto\n   -----        -----                   ------                \
    \      ----\n   S0                                   TCP: listen on port 102 \
    \    S1\n   S1           TCP: connected          TCP: read TPKT\n            \
    \                            parse, on error\n                               \
    \           TCP: send DR, close       S0\n                                   \
    \     code is CR\n                                          start session server\n\
    \                                          SS: T-CONNECT             S2\n    \
    \                                            .INDICATION\n                   \
    \                     otherwise,\n                                          TCP:\
    \ send DR, close       S0\n   S2           SS: T-CONNECT.RESPONSE  if expedited\
    \ option,\n                                          TCP: open port EXPD\n   \
    \                                     TCP: send CC                P0\n   S2  \
    \         SS: T-DISCONNECT        TCP: send DR, close         S0\n           \
    \             .REQUEST\n   Any event occuring for a state not listed above is\
    \ considered an\n   error, and handled thusly:\n   state        event        \
    \           action                      goto\n   -----        -----          \
    \         ------                      ----\n   S*           TCP: other       \
    \       if TCP is open, TCP: close  S0\n                                     \
    \   otherwise ignore            S0\n   S*           SS: other               SS:\
    \ T-DISCONNECT\n                                              .INDICATION\n  \
    \                                      if TCP is open, close       S0\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - "ISO Transport Services on Top of the TCP\n                        C L I E N T\
    \   S T A T E S\n   state        event                   action              \
    \        goto\n   -----        -----                   ------                \
    \      ----\n   C0           SS: T-CONNECT.REQUEST   if expedited option,\n  \
    \                                        TCP: non-blocking\n                 \
    \                              listen on port EXPD\n                         \
    \               TCP: open port 102          C1\n   C1           TCP: connected\
    \          TCP: send CR                C2\n   C1           TCP: connect fails\
    \      TCP: close\n                                        SS: T-DISCONNECT  \
    \          C0\n                                                 .INDICATION\n\
    \   C2           TCP: data ready         TCP: read TPKT\n                    \
    \                    parse, on error\n                                       \
    \   TCP: send DR, close\n                                          SS: T-DISCONNECT\
    \          C0\n                                                .INDICATION\n \
    \                                       code is CC\n                         \
    \                 if expedited option,\n                                     \
    \        verify port EXPD\n                                             connected\
    \ correctly,\n                                             if not, treat as error\n\
    \                                          SS: T-CONNECT             P0\n    \
    \                                            .CONFIRMATION\n                 \
    \                       code is DR\n                                         \
    \ TCP: close\n                                          SS: T-DISCONNECT     \
    \     C0\n                                                .INDICATION\n      \
    \                                  otherwise\n                               \
    \           TCP: send DR, close\n                                          SS:\
    \ T-DISCONNECT          C0\n                                                .INDICATION\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - "ISO Transport Services on Top of the TCP\n   Any event occuring for a state not\
    \ listed above is considered an\n   error, and handled thusly:\n   state     \
    \   event                   action                      goto\n   -----       \
    \ -----                   ------                      ----\n   C*           TCP:\
    \ other              if TCP is open, close       C0\n                        \
    \                otherwise ignore            C0\n   C*           SS: other   \
    \            SS: T-DISCONNECT\n                                              .INDICATION\n\
    \                                        if TCP is open, close       C0\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - "ISO Transport Services on Top of the TCP\n                          P E E R \
    \  S T A T E S\n   state        event                   action               \
    \       goto\n   -----        -----                   ------                 \
    \     ----\n   P0           TCP: data ready         TCP: read TPKT\n         \
    \                               parse, on error\n                            \
    \              TCP: send DR, close\n                                         \
    \ SS: T-DISCONNECT          end\n                                            \
    \    .INDICATION\n                                        code is DT\n       \
    \                                   SS: T-DATA.INDICATION      P0\n          \
    \                              code is ED\n                                  \
    \        SS: T-EXPEDITED DATA       P0\n                                     \
    \           .INDICATION\n                                        code is DR\n\
    \                                          TCP: close\n                      \
    \                    SS: T-DISCONNECT          end\n                         \
    \                       .INDICATION\n                                        otherwise\n\
    \                                          TCP: send DR, close\n             \
    \                             SS: T-DISCONNECT          end\n                \
    \                                .INDICATION\n   P0           TCP: other     \
    \         TCP: close\n                                        SS: T-DISCONNECT\
    \            end\n                                                  .INDICATION\n\
    \   P0           SS: T-DATA.REQUEST      TCP: send DT                 P0\n   P0\
    \           SS: T-EXPEDITED DATA    TCP: send ED                 P0\n        \
    \                .REQUEST\n   P0           SS: T-DISCONNECT        TCP: send DR,\
    \ close         end\n                        .REQUEST\n   P0           SS: other\
    \               TCP: send DR, close\n                                        SS:\
    \ T-DISCONNECT            end\n                                              \
    \  .INDICATION\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - 'ISO Transport Services on Top of the TCP

    '
- title: 6.  Packet Format
  contents:
  - "6.  Packet Format\n   Two TS-peers exchange information over a TCP connection\
    \ by\n   encapsulating information in well-defined packets.  A packet, denoted\n\
    \   as \"TPKT\" in the previous sections, is viewed as an object composed\n  \
    \ of an integral number of octets, of variable length.\n      NOTE:  For the purposes\
    \ of presentation, these objects are shown\n      as being 4 octets (32 bits wide).\
    \  This representation is an\n      artifact of the style of this memo and should\
    \ not be interpreted\n      as requiring that a TPDU be a multiple of 4 octets\
    \ in length.\n   A packet consists of two parts: a packet-header and a pseudo-TPDU.\n\
    \   The format of the header is constant regardless of the type of\n   packet.\
    \  The format of the pseudo-TPDU follows the [ISO-8073]\n   recommendation very\
    \ closely with the exceptions listed below.  As per\n   [ISO-8073], each TPDU\
    \ consists of two parts: header and data.\n   It is EXTREMELY important to observe\
    \ that TPKTs represent\n   \"indivisible\" units of data to the TS-user.  That\
    \ is, a\n   T-DATA.REQUEST initiated by the TS-user at the sending end of a\n\
    \   connection should result in exactly one T-DATA.INDICATION being\n   generated\
    \ (with exactly that data) for the TS-user at the receiving\n   end.  To ensure\
    \ this behavior, it is critical that any INDICATION\n   event resulting from a\
    \ TPKT be initiated ONLY after the entire TPKT\n   is fully received.  Furthermore,\
    \ exactly one such INDICATION event\n   should be generated by the TS-peer.  The\
    \ packet length field, as\n   described below, can accommodate on the order of\
    \ 65K octets of user\n   data.  This should be well above the requirements of\
    \ the size of any\n   SPDU (Session Protocol Data Unit) for any real implementation.\
    \  As a\n   result, version 1 of this protocol has no need to either fragment\
    \ or\n   re-assemble TS-user data.  If an application arises which requires an\n\
    \   SPDU of size greater than 65K octets, this memo will be revised.\n   The format\
    \ of the packet-header is as follows:\n       0                   1          \
    \         2                   3   \n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\
    \ 8 9 0 1 2 3 4 5 6 7 8 9 0 1 \n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |      vrsn     |    reserved   |          packet length        |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   where:\n\
    \      1.  vrsn                  8 bits\n         This field is always 1 for this\
    \ memo.\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - "ISO Transport Services on Top of the TCP\n      2.  packet length         16\
    \ bits (min=8, max=65535)\n         The length of entire packet in octets, including\
    \ packet-header.\n   The format of the TPDU (to re-phrase from [ISO-8073]) depends\
    \ on the\n   type of a TPDU.  All TPDUs start with a fixed-part header length\
    \ and\n   the code.  The information following after the code varies, depending\n\
    \   on the value of the code.  In the context of this memo, the following\n  \
    \ codes are valid:\n      CR: connect request\n      CC: connect confirm\n   \
    \   DR: disconnect request\n      DT: data\n      ED: expedited data\n   The format\
    \ of a CR or CC TPDU is:\n       0                   1                   2   \
    \                3   \n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1 \n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | header length | code  | credit|     destination reference     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \       source reference        | class |options| variable data |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |    ...        |      ...      |      ...      |      ...      |\n   \
    \   |    ...        |      ...      |      ...      |      ...      |\n      |\
    \    ...        |   user data   |      ...      |      ...      |\n      |   \
    \ ...        |      ...      |      ...      |      ...      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   where:\n      3.  header length          8 bits (min=6, max=min(254,packet\n\
    \      length-6))\n         The TPDU-header length in octets including parameters\
    \ but\n         excluding the header length field and user data (if any).\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - "ISO Transport Services on Top of the TCP\n      4.  code                   4\
    \ bits\n         The type of TPDU.  Values, in the context of this memo, are:\n\
    \            value       meaning\n            -----       -------\n          \
    \   14         CR: connection request  (binary 1110)\n             13        \
    \ CC: connection confirm  (binary 1101)\n              8         DR: disconnect\
    \ request  (binary 1000)\n             15         DT: data                (binary\
    \ 1111)\n              1         ED: expedited data      (binary 0001)\n     \
    \       all other   reserved                             \n      5.  credit  \
    \               4 bits\n         This field is always ZERO on output and ignored\
    \ on input.\n      6.  destination reference 16 bits\n         This field is always\
    \ ZERO on output and ignored on input.\n      7.  source reference      16 bits\n\
    \         This field is always ZERO on output and ignored on input.\n      8.\
    \  class                  4 bits\n         This field is always 4 (binary 0100)\
    \ on output and ignored on\n         input. It is anticipated that future versions\
    \ of this protocol\n         will make use of this field.\n      9.  options \
    \               4 bits\n         This field is always ZERO on output and ignored\
    \ on input.\n      10.  variable data        (header length - 6) octets\n    \
    \     This portion of the TPDU is of variable length.  For most\n         TPDUs,\
    \ this portion is empty (the header length field of the\n         TPDU is exactly\
    \ 6).  The contents of the variable data consist\n         of zero or more \"\
    parameters\".  Each parameter has the following\n         format:\n          \
    \  parameter code        1 octet in size\n            parameter length      1\
    \ octet in size, value is the number\n                                    of octets\
    \ in parameter value\n            parameter value       parameter data\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - "ISO Transport Services on Top of the TCP\n         Normally, the parameter length\
    \ is 1 octet.  Any implementation\n         conforming to this version of the\
    \ protocol must recognize all\n         parameter types listed in [ISO-8073].\
    \  With the exception of\n         the parameters listed below, these parameters\
    \ are simply\n         ignored.\n         o   Parameter name:       Transport\
    \ service access point\n                                   identifier (TSAP-ID)\
    \ of the client\n         TSAP\n            Parameter code:        193 (binary\
    \ 1100 0001)\n            Parameter length:      variable\n            Parameter\
    \ value:       TSAP-ID attributes\n            Each TSAP-ID consists of 1 or more\
    \ attributes.  Each\n            attribute has this format:\n               Attribute\
    \ code      1 octet in size\n               Attribute length    1 octet in size,\
    \ value is the number\n                                     of octets in attribute\
    \ value\n               Attribute value     attribute data\n            In version\
    \ 1 of this protocol, only two attributes are\n            defined. All others\
    \ are reserved.\n               Attribute name:     Internet Address\n       \
    \        Attribute code:     1\n               Attribute length:   6\n       \
    \        Attribute value:    IP address (4 octets)\n                         \
    \          session port (2 octets, unsigned\n                                \
    \   integer)\n                  This attribute is ALWAYS required.  Values for\
    \ session\n                  port can be found in Appendix A of this memo.\n \
    \              Attribute name:     Internet Address for Expedited Data\n     \
    \          Attribute code:     2\n               Attribute length:   6\n     \
    \          Attribute value:    IP address (4 octets)\n                       \
    \            TCP port (2 octets, unsigned integer)\n                  This attribute\
    \ is required ONLY if expedited data is\n                  to be exchanged.  The\
    \ attribute value is an <IP\n                  address, TCP port> pair designated\
    \ by the TS-peer for\n                  use with expedited data.\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - "ISO Transport Services on Top of the TCP\n         o   Parameter name:      \
    \ TSAP-ID of the server TSAP\n            Parameter code:        194 (binary 1100\
    \ 0010)\n            Parameter length:      variable\n            Parameter value:\
    \       TSAP-ID attributes\n         o   Parameter name:       Additional option\
    \ selection\n            Parameter code:        198 (binary 1100 0110)\n     \
    \       Parameter length:      1\n            Parameter value:       additional\
    \ flags\n            The additional flags octet consists of 8-bits of optional\n\
    \            flags.  Only one bit is of interest to this memo, the\n         \
    \   remaining bits should be ZERO on output and ignored on\n            input.\
    \  This bit indicates if the transport expedited data\n            service is\
    \ to be used.  If this bit is set (bit mask 0000\n            0001) or this parameter\
    \ does not appear in the TPDU, then\n            the expedited data service is\
    \ requested.  If this parameter\n            appears in the TPDU and the bit is\
    \ not set then the service\n            is disabled.  If the service is requested,\
    \ then the TSAP-ID\n            of the sender of the TPDU must include an attribute\n\
    \            indicating the internet address to use for expedited data.\n    \
    \     o   Parameter name:       Alternative protocol classes\n            Parameter\
    \ code:        199 (binary 1100 0111)\n            Parameter length:      variable\n\
    \            Parameter value:       64 (binary 0100 0000) in each octet\n    \
    \           This is used as a NOOP in the variable data.  Its use is\n       \
    \        HIGHLY discouraged, but for those implementors who wish\n           \
    \    to align the user data portion of the TPDU on word (or\n               page)\
    \ boundaries, use of this parameter for filling is\n               recommended.\n\
    \      11.  user data            (packet length - header length - 5)\n       \
    \                            octets\n         This portion of the TPDU is actual\
    \ user data, most probably one\n         or more SPDUs (session protocol data\
    \ units).\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - "ISO Transport Services on Top of the TCP\n   The format of a DR TPDU is:\n  \
    \     0                   1                   2                   3   \n     \
    \  0 1  2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      | header length | code  | credit|     destination reference     |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \       source reference        |     reason    | variable data |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |    ...        |      ...      |      ...      |      ...      |\n   \
    \   |    ...        |      ...      |      ...      |      ...      |\n      |\
    \      ...      |   user data   |      ...      |      ...      |\n      |   \
    \ ...        |      ...      |      ...      |      ...      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   The format of the fields is identical to those of a CR or CC TPDU,\n   with\
    \ the following exceptions:\n   where:\n      8.  reason                     \
    \   8 bits\n         This replaces the class/option fields of the CR or CC TPDU.\
    \ Any\n         value, as specified in [ISO-8073], may be used in this field.\n\
    \         This memo makes use of several:\n            value       meaning\n \
    \           -----       -------\n              1         Congestion at TSAP\n\
    \              2         Session entity not attached to TSAP\n              3\
    \         Address unknown (at TCP connect time)\n            128+0       Normal\
    \ disconnect initiated by the session\n                        entity\n      \
    \      128+1       Remote transport entity congestion at connect\n           \
    \             request time\n            128+3       Connection negotiation failed\n\
    \            128+5       Protocol Error\n            128+8       Connection request\
    \ refused on this network\n                        connection\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - "ISO Transport Services on Top of the TCP\n   The format of a DT or ED TPDU is:\n\
    \       0                   1                   2                   3   \n   \
    \    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 \n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-++-+-+-+\
    \ \n      | header length | code  | credit|         TPDU-NR and EOT       |\n\
    \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \
    \   |   user data   |      ...      |      ...      |      ...      |\n      |\
    \    ...        |      ...      |      ...      |      ...      |\n      |   \
    \ ...        |      ...      |      ...      |      ...      |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   where:\n      After the credit field (which is always ZERO on output and ignored\n\
    \      on input), there is one additional field prior to the user data:\n    \
    \  6.  TPDU-NR and EOT               16 bits\n         This field is always ZERO\
    \ on output and ignored on input.\n"
- title: 7.  Expedited Data
  contents:
  - "7.  Expedited Data\n   This memo utilizes a second TCP connection to handle expedited\
    \ data\n   and does not make use of the TCP URGENT mechanism.  The primary\n \
    \  disadvantage of this decision is that single-threaded implementations\n   of\
    \ TCP may have some difficulty in supporting two simultaneous\n   connections.\
    \  There are however several advantages to this approach:\n      a.  Use of a\
    \ single connection to implement the semantics of\n      expedited data implies\
    \ that the TSAP peer manage a set of buffers\n      independent from TCP.  The\
    \ peer would, upon indication of TCP\n      urgent information, have to buffer\
    \ all preceeding TPKTs until the\n      TCP buffer was empty.  Expedited data\
    \ would then be given to the\n      TS-user.  When the expedited data was flushed,\
    \ then the buffered\n      (non-expedited) data could be passed up to the receiving\
    \ user.\n      b.  It assumes that implementations support TCP urgency correctly.\n\
    \      This is perhaps an untrue assumption, particular in the case of\n     \
    \ TCP urgency occuring when the send window is zero-sized.  Further,\n      it\
    \ assumes that the implementations can signal this event to the\n      TCP-user\
    \ in a meaningful fashion.  In a single-threaded\n      implementation, this is\
    \ not likely.\n   Given a reasonable TCP implementation, the TS-peer need listen\
    \ on two\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - "ISO Transport Services on Top of the TCP\n   TCP sockets in either polling or\
    \ interrupt mode.  When the TS-peer is\n   given data, the TCP must indicate which\
    \ connection should be read\n   from.\n   The only tricky part of the protocol\
    \ is that the client must be able\n   to start a passive OPEN for the expedited\
    \ port, and then wait to read\n   from another connection.  In between the passive\
    \ OPEN and the other\n   connection supplying data, the server will connect to\
    \ the expedited\n   port, prior to sending data on the other connection.  To summarize\n\
    \   from Section 5, the sequence of events, with respect to TCP, is:\n      time\
    \      client                          Server\n      ----      ------        \
    \                  ------\n      0.                                        passive\
    \ OPEN of port 102\n      1.        T-CONNECT.REQUEST from user\n            \
    \    passive OPEN of expedited\n                port (non-blocking)\n      2.\
    \        active OPEN of port 102\n      3.        send CC TPKT\n      4.     \
    \                                   port 102 connected\n      5.             \
    \                           receive CC TPKT\n                                \
    \                T-CONNECT.INDICATION to\n                                   \
    \             user\n                                                T-CONNECT.RESPONSE\
    \ from\n                                                user\n      6.       \
    \                                 active OPEN to expedited\n                 \
    \                               port\n      7.        expedited port connected\n\
    \      8.                                        send CR TPKT\n      9.      \
    \  receive CR TPKT\n                verify expedited port\n                connected\
    \ correctly\n   Multi-threaded implementations of TCP should be able to support\
    \ this\n   sequence of events without any great difficulty.\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - 'ISO Transport Services on Top of the TCP

    '
- title: 8.  Conclusions
  contents:
  - "8.  Conclusions\n   There are two design decisions which should be considered.\
    \  The first\n   deals with particular packet format used.  It should be obvious\
    \ to\n   the reader that the TP packet format was adopted for use in this\n  \
    \ memo.  Although this results in a few fields being ignored (e.g.,\n   source\
    \ reference), it does not introduce an unacceptable amount of\n   overhead.  For\
    \ example, on a connection request packet (the worst\n   case) there are 6 bytes\
    \ of \"zero on output, ignore on input\" fields.\n   Considering that the packet\
    \ overhead processing is fixed, requiring\n   that implementations allocate an\
    \ additional 1.5 words is not\n   unreasonable!  Of course, it should be noted\
    \ that some of these\n   fields (i.e., class) may be used in future versions of\
    \ the protocol\n   as experience is gained.\n   The second decision deals with\
    \ how the TCP and TSAP port space is\n   administered.  It is probably a very\
    \ bad idea to take any\n   responsibility, whatsoever, for managing this addressing\
    \ space, even\n   after ISO has stabilized.  There are two issues involved.  First,\
    \ at\n   what level do the TCP and TSAP port spaces interact; second, who\n  \
    \ defines what this interaction looks like.  With respect to the first,\n   it\
    \ wholly undesirable to require that each TSAP port map to a unique\n   TCP port.\
    \  The administrative problems for the TCP \"numbers czar (and\n   czarina)\"\
    \ would be non-trivial.  Therefore, it is desirable to\n   allocate a single TCP\
    \ port, namely port 102, as the port where the\n   \"ISO Transport Services\"\
    \ live in the TCP domain. Second, the\n   interaction defined in Appendix A of\
    \ this memo is embryonic at best.\n   It will no doubt be replaced as soon as\
    \ the ISO world reaches\n   convergence on how services are addressed in ISO TP.\
    \ Therefore\n   readers (and implementors) are asked to keep in mind that this\
    \ aspect\n   of the memo is guaranteed to change.  Unfortunately, the authors\
    \ are\n   not permitted the luxury of waiting for a consensus in ISO.  As a\n\
    \   result, the minimal effort approach outlined in the appendix below\n   was\
    \ adopted.\n   A prototype implementation of the protocol described by this memo\
    \ is\n   available for 4.2BSD UNIX.  Interested parties should contact the\n \
    \  authors for a copy.  To briefly mention its implementation, a given\n   ISO\
    \ service is implemented as a separate program.  A daemon listens\n   on TCP port\
    \ 102, consults a database when a connection request packet\n   is received, and\
    \ fires the appropriate program for the ISO service\n   requested.  Of course,\
    \ given the nature of the BSD implementation of\n   TCP, as the child fires, responsibility\
    \ of that particular connection\n   is delegated to the child; the daemon returns\
    \ to listening for new\n   connection requests.  The prototype implementation\
    \ consists of both\n   the daemon program and subroutine libraries which are loaded\
    \ with\n   programs providing ISO services.\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - 'ISO Transport Services on Top of the TCP

    '
- title: 9.  References
  contents:
  - "9.  References\n   [ISO-8072]   ISO.\n                \"International Standard\
    \ 8072.  Information Processing\n                Systems -- Open Systems Interconnection:\
    \ Transport\n                Service Definition.\"\n                (June, 1984)\n\
    \   [ISO-8073]   ISO.\n                \"International Standard 8073.  Information\
    \ Processing\n                Systems -- Open Systems Interconnection: Transport\n\
    \                Protocol Specification.\"\n                (June, 1984)\n   [ISO-8327]\
    \   ISO.\n                \"International Standard 8327.  Information Processing\n\
    \                Systems -- Open Systems Interconnection: Session\n          \
    \      Protocol Specification.\"\n                (June, 1984)\n   [RFC-791] \
    \   Internet Protocol.\n                Request for Comments 791\n           \
    \     (September, 1981)\n                (See also: MIL-STD-1777)\n   [RFC-793]\
    \    Transmission Control Protocol.\n                Request for Comments 793\n\
    \                (September, 1981)\n                (See also: MIL-STD-1778)\n\
    \   [RFC-960]    Assigned Numbers.\n                Request for Comments 960\n\
    \                (December, 1985)\n   [X.214]      CCITT.\n                \"\
    Recommendation X.214.  Transport Service Definitions\n                for Open\
    \ Systems Interconnection (OSI) for CCITT\n                Applications.\"\n \
    \               (October, 1984)\n   [X.224]      CCITT.\n                \"Recommendation\
    \ X.224.  Transport Protocol Specification\n                for Open Systems Interconnection\
    \ (OSI) for CCITT\n                Applications.\"\n                (October,\
    \ 1984)\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - "ISO Transport Services on Top of the TCP\n   [X.225]      CCITT.\n          \
    \      \"Recommendation X.225.  Session Protocol Specification\n             \
    \   for Open Systems Interconnection (OSI) for CCITT\n                Applications.\"\
    \n                (October, 1984)\n   [X.410]      CCITT.\n                \"\
    Recommendation X.410.  Message Handling Systems: Remote\n                Operations\
    \ and Reliable Transfer Server.\"\n                (October, 1984)\n"
- title: 'Appendix A:  Reserved TSAP IDs'
  contents:
  - "Appendix A:  Reserved TSAP IDs\n   Version 1 of this protocol uses a relatively\
    \ simple encoding scheme\n   for TSAP IDs.  A TSAP ID is an attribute list containing\
    \ two\n   parameters, a 32-bit IP address, and a 16-bit port number.  This is\n\
    \   used to identify both the client TSAP and the server TSAP.  When it\n   appears\
    \ in a TPKT with code CR or CC, the TSAP ID is encoded in the\n   variable data\
    \ part for the client TSAP as:\n       0                   1                 \
    \  2                   3   \n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 \n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |      193      |       8       |       1       |       6       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \       a       |       b       |       c       |       d       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |              port             |                               |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      \
    \   and for the server TSAP as:\n       0                   1                \
    \   2                   3   \n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 \n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |      194      |       8       |       1       |       6       |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \       a       |       b       |       c       |       d       |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |              port             |                               |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   (Neither\
    \ of these examples include an attribute for a TCP connection\n   for expedited\
    \ data.  If one were present, the length of the TSAP ID\n   attribute would be\
    \ 16 instead of 8, and the 8 bytes following the\n   Internet address would be\
    \ \"2\" for the attribute code, \"6\" for the\n"
- title: RFC 983                                                       April 1986
  contents:
  - 'RFC 983                                                       April 1986

    '
- title: ISO Transport Services on Top of the TCP
  contents:
  - "ISO Transport Services on Top of the TCP\n   attribute length, and then 6 octets\
    \ for the Internet address to use\n   for expedited data, 4 octets for IP address,\
    \ and 2 octets for TCP\n   port.)\n   Where [a.b.c.d] is the IP address of the\
    \ host where the respective\n   TSAP peer resides, and port is a 16-bit unsigned\
    \ integer describing\n   where in the TSAP port space the TS-user lives.\n   \
    \   Port value        Designation\n      ----------        -----------\n     \
    \     0             illegal\n         1-4096         privileged\n      4097-65535\
    \        user\n   The following table contains the list of the \"official\" TSAP\
    \ ID port\n   numbers as of the first release of this memo.  It is expected that\n\
    \   future editions of the \"Assigned Numbers\" document[RFC-960] will\n   contain\
    \ updates to this list.\n      Port    name        ISO service\n      ----   \
    \ ----        -----------\n      1       echo        unofficial echo\n      2\
    \       sink        unofficial data sink\n      3       FTAM        File Transfer,\
    \ Access, and Management\n      4       VTS         ISO-8571 Virtual Terminal\
    \ Service\n      5       MHS         Message Handling System [X.411]\n       \
    \                   CCITT X.400\n      6       JTM         Job Transfer and Manipulation\n\
    \                          ISO 8831/8832\n      7       CASE        Common Application\
    \ Service Elements\n                          Kernel ISO-8650/2\n   If anyone\
    \ knows of a list of \"official\" ISO services, the authors\n   would be very\
    \ interested.\n"
