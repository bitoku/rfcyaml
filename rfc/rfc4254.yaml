- title: __initial_text__
  contents:
  - '               The Secure Shell (SSH) Connection Protocol

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   Secure Shell (SSH) is a protocol for secure remote login and other\n\
    \   secure network services over an insecure network.\n   This document describes\
    \ the SSH Connection Protocol.  It provides\n   interactive login sessions, remote\
    \ execution of commands, forwarded\n   TCP/IP connections, and forwarded X11 connections.\
    \  All of these\n   channels are multiplexed into a single encrypted tunnel.\n\
    \   The SSH Connection Protocol has been designed to run on top of the\n   SSH\
    \ transport layer and user authentication protocols.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Contributors ....................................................3\n  \
    \ 3. Conventions Used in This Document ...............................3\n   4.\
    \ Global Requests .................................................4\n   5. Channel\
    \ Mechanism ...............................................5\n      5.1. Opening\
    \ a Channel ..........................................5\n      5.2. Data Transfer\
    \ ..............................................7\n      5.3. Closing a Channel\
    \ ..........................................9\n      5.4. Channel-Specific Requests\
    \ ..................................9\n   6. Interactive Sessions ...........................................10\n\
    \      6.1. Opening a Session .........................................10\n  \
    \    6.2. Requesting a Pseudo-Terminal ..............................11\n    \
    \  6.3. X11 Forwarding ............................................11\n      \
    \     6.3.1. Requesting X11 Forwarding ..........................11\n        \
    \   6.3.2. X11 Channels .......................................12\n      6.4.\
    \ Environment Variable Passing ..............................12\n      6.5. Starting\
    \ a Shell or a Command .............................13\n      6.6. Session Data\
    \ Transfer .....................................14\n      6.7. Window Dimension\
    \ Change Message ...........................14\n      6.8. Local Flow Control\
    \ ........................................14\n      6.9. Signals ...................................................15\n\
    \      6.10. Returning Exit Status ....................................15\n  \
    \ 7. TCP/IP Port Forwarding .........................................16\n    \
    \  7.1. Requesting Port Forwarding ................................16\n      7.2.\
    \ TCP/IP Forwarding Channels ................................18\n   8. Encoding\
    \ of Terminal Modes .....................................19\n   9. Summary of\
    \ Message Numbers .....................................21\n   10. IANA Considerations\
    \ ...........................................21\n   11. Security Considerations\
    \ .......................................21\n   12. References ....................................................22\n\
    \      12.1. Normative References .....................................22\n  \
    \    12.2. Informative References ...................................22\n   Authors'\
    \ Addresses ................................................23\n   Trademark Notice\
    \ ..................................................23\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The SSH Connection Protocol has been designed to run on\
    \ top of the\n   SSH transport layer and user authentication protocols ([SSH-TRANS]\n\
    \   and [SSH-USERAUTH]).  It provides interactive login sessions, remote\n   execution\
    \ of commands, forwarded TCP/IP connections, and forwarded\n   X11 connections.\n\
    \   The 'service name' for this protocol is \"ssh-connection\".\n   This document\
    \ should be read only after reading the SSH architecture\n   document [SSH-ARCH].\
    \  This document freely uses terminology and\n   notation from the architecture\
    \ document without reference or further\n   explanation.\n"
- title: 2.  Contributors
  contents:
  - "2.  Contributors\n   The major original contributors of this set of documents\
    \ have been:\n   Tatu Ylonen, Tero Kivinen, Timo J. Rinne, Sami Lehtinen (all\
    \ of SSH\n   Communications Security Corp), and Markku-Juhani O. Saarinen\n  \
    \ (University of Jyvaskyla).  Darren Moffat was the original editor of\n   this\
    \ set of documents and also made very substantial contributions.\n   Many people\
    \ contributed to the development of this document over the\n   years.  People\
    \ who should be acknowledged include Mats Andersson, Ben\n   Harris, Bill Sommerfeld,\
    \ Brent McClure, Niels Moller, Damien Miller,\n   Derek Fawcus, Frank Cusack,\
    \ Heikki Nousiainen, Jakob Schlyter, Jeff\n   Van Dyke, Jeffrey Altman, Jeffrey\
    \ Hutzelman, Jon Bright, Joseph\n   Galbraith, Ken Hornstein, Markus Friedl, Martin\
    \ Forssen, Nicolas\n   Williams, Niels Provos, Perry Metzger, Peter Gutmann, Simon\n\
    \   Josefsson, Simon Tatham, Wei Dai, Denis Bider, der Mouse, and\n   Tadayoshi\
    \ Kohno.  Listing their names here does not mean that they\n   endorse this document,\
    \ but that they have contributed to it.\n"
- title: 3.  Conventions Used in This Document
  contents:
  - "3.  Conventions Used in This Document\n   All documents related to the SSH protocols\
    \ shall use the keywords\n   \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",\
    \ \"SHALL NOT\", \"SHOULD\",\n   \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" to describe\n   requirements.  These keywords are to be interpreted\
    \ as described in\n   [RFC2119].\n   The keywords \"PRIVATE USE\", \"HIERARCHICAL\
    \ ALLOCATION\", \"FIRST COME\n   FIRST SERVED\", \"EXPERT REVIEW\", \"SPECIFICATION\
    \ REQUIRED\", \"IESG\n   APPROVAL\", \"IETF CONSENSUS\", and \"STANDARDS ACTION\"\
    \ that appear in\n   this document when used to describe namespace allocation\
    \ are to be\n   interpreted as described in [RFC2434].\n   Protocol fields and\
    \ possible values to fill them are defined in this\n   set of documents.  Protocol\
    \ fields will be defined in the message\n   definitions.  As an example, SSH_MSG_CHANNEL_DATA\
    \ is defined as\n   follows.\n      byte      SSH_MSG_CHANNEL_DATA\n      uint32\
    \    recipient channel\n      string    data\n   Throughout these documents, when\
    \ the fields are referenced, they will\n   appear within single quotes.  When\
    \ values to fill those fields are\n   referenced, they will appear within double\
    \ quotes.  Using the above\n   example, possible values for 'data' are \"foo\"\
    \ and \"bar\".\n"
- title: 4.  Global Requests
  contents:
  - "4.  Global Requests\n   There are several kinds of requests that affect the state\
    \ of the\n   remote end globally, independent of any channels.  An example is\
    \ a\n   request to start TCP/IP forwarding for a specific port.  Note that\n \
    \  both the client and server MAY send global requests at any time, and\n   the\
    \ receiver MUST respond appropriately.  All such requests use the\n   following\
    \ format.\n      byte      SSH_MSG_GLOBAL_REQUEST\n      string    request name\
    \ in US-ASCII only\n      boolean   want reply\n      ....      request-specific\
    \ data follows\n   The value of 'request name' follows the DNS extensibility naming\n\
    \   convention outlined in [SSH-ARCH].\n   The recipient will respond to this\
    \ message with\n   SSH_MSG_REQUEST_SUCCESS or SSH_MSG_REQUEST_FAILURE if 'want\
    \ reply' is\n   TRUE.\n      byte      SSH_MSG_REQUEST_SUCCESS\n      ....   \
    \  response specific data\n   Usually, the 'response specific data' is non-existent.\n\
    \   If the recipient does not recognize or support the request, it simply\n  \
    \ responds with SSH_MSG_REQUEST_FAILURE.\n      byte      SSH_MSG_REQUEST_FAILURE\n\
    \   In general, the reply messages do not include request type\n   identifiers.\
    \  To make it possible for the originator of a request to\n   identify to which\
    \ request each reply refers, it is REQUIRED that\n   replies to SSH_MSG_GLOBAL_REQUESTS\
    \ MUST be sent in the same order as\n   the corresponding request messages.  For\
    \ channel requests, replies\n   that relate to the same channel MUST also be replied\
    \ to in the right\n   order.  However, channel requests for distinct channels\
    \ MAY be\n   replied to out-of-order.\n"
- title: 5.  Channel Mechanism
  contents:
  - "5.  Channel Mechanism\n   All terminal sessions, forwarded connections, etc.,\
    \ are channels.\n   Either side may open a channel.  Multiple channels are multiplexed\n\
    \   into a single connection.\n   Channels are identified by numbers at each end.\
    \  The number referring\n   to a channel may be different on each side.  Requests\
    \ to open a\n   channel contain the sender's channel number.  Any other channel-\n\
    \   related messages contain the recipient's channel number for the\n   channel.\n\
    \   Channels are flow-controlled.  No data may be sent to a channel until\n  \
    \ a message is received to indicate that window space is available.\n"
- title: 5.1.  Opening a Channel
  contents:
  - "5.1.  Opening a Channel\n   When either side wishes to open a new channel, it\
    \ allocates a local\n   number for the channel.  It then sends the following message\
    \ to the\n   other side, and includes the local channel number and initial window\n\
    \   size in the message.\n      byte      SSH_MSG_CHANNEL_OPEN\n      string \
    \   channel type in US-ASCII only\n      uint32    sender channel\n      uint32\
    \    initial window size\n      uint32    maximum packet size\n      ....    \
    \  channel type specific data follows\n   The 'channel type' is a name, as described\
    \ in [SSH-ARCH] and\n   [SSH-NUMBERS], with similar extension mechanisms.  The\
    \ 'sender\n   channel' is a local identifier for the channel used by the sender\
    \ of\n   this message.  The 'initial window size' specifies how many bytes of\n\
    \   channel data can be sent to the sender of this message without\n   adjusting\
    \ the window.  The 'maximum packet size' specifies the\n   maximum size of an\
    \ individual data packet that can be sent to the\n   sender.  For example, one\
    \ might want to use smaller packets for\n   interactive connections to get better\
    \ interactive response on slow\n   links.\n   The remote side then decides whether\
    \ it can open the channel, and\n   responds with either SSH_MSG_CHANNEL_OPEN_CONFIRMATION\
    \ or\n   SSH_MSG_CHANNEL_OPEN_FAILURE.\n      byte      SSH_MSG_CHANNEL_OPEN_CONFIRMATION\n\
    \      uint32    recipient channel\n      uint32    sender channel\n      uint32\
    \    initial window size\n      uint32    maximum packet size\n      ....    \
    \  channel type specific data follows\n   The 'recipient channel' is the channel\
    \ number given in the original\n   open request, and 'sender channel' is the channel\
    \ number allocated by\n   the other side.\n      byte      SSH_MSG_CHANNEL_OPEN_FAILURE\n\
    \      uint32    recipient channel\n      uint32    reason code\n      string\
    \    description in ISO-10646 UTF-8 encoding [RFC3629]\n      string    language\
    \ tag [RFC3066]\n   If the recipient of the SSH_MSG_CHANNEL_OPEN message does\
    \ not support\n   the specified 'channel type', it simply responds with\n   SSH_MSG_CHANNEL_OPEN_FAILURE.\
    \  The client MAY show the 'description'\n   string to the user.  If this is done,\
    \ the client software should take\n   the precautions discussed in [SSH-ARCH].\n\
    \   The SSH_MSG_CHANNEL_OPEN_FAILURE 'reason code' values are defined in\n   the\
    \ following table.  Note that the values for the 'reason code' are\n   given in\
    \ decimal format for readability, but they are actually uint32\n   values.\n \
    \            Symbolic name                           reason code\n           \
    \  -------------                           -----------\n            SSH_OPEN_ADMINISTRATIVELY_PROHIBITED\
    \          1\n            SSH_OPEN_CONNECT_FAILED                       2\n  \
    \          SSH_OPEN_UNKNOWN_CHANNEL_TYPE                 3\n            SSH_OPEN_RESOURCE_SHORTAGE\
    \                    4\n   Requests for assignments of new SSH_MSG_CHANNEL_OPEN\
    \ 'reason code'\n   values (and associated 'description' text) in the range of\
    \ 0x00000005\n   to 0xFDFFFFFF MUST be done through the IETF CONSENSUS method,\
    \ as\n   described in [RFC2434].  The IANA will not assign Channel Connection\n\
    \   Failure 'reason code' values in the range of 0xFE000000 to\n   0xFFFFFFFF.\
    \  Channel Connection Failure 'reason code' values in that\n   range are left\
    \ for PRIVATE USE, as described in [RFC2434].\n   While it is understood that\
    \ the IANA will have no control over the\n   range of 0xFE000000 to 0xFFFFFFFF,\
    \ this range will be split in two\n   parts and administered by the following\
    \ conventions.\n   o  The range of 0xFE000000 to 0xFEFFFFFF is to be used in conjunction\n\
    \      with locally assigned channels.  For example, if a channel is\n      proposed\
    \ with a 'channel type' of \"example_session@example.com\",\n      but fails,\
    \ then the response will contain either a 'reason code'\n      assigned by the\
    \ IANA (as listed above and in the range of\n      0x00000001 to 0xFDFFFFFF) or\
    \ a locally assigned value in the range\n      of 0xFE000000 to 0xFEFFFFFF.  Naturally,\
    \ if the server does not\n      understand the proposed 'channel type', even if\
    \ it is a locally\n      defined 'channel type', then the 'reason code' MUST be\
    \ 0x00000003,\n      as described above, if the 'reason code' is sent.  If the\
    \ server\n      does understand the 'channel type', but the channel still fails\
    \ to\n      open, then the server SHOULD respond with a locally assigned\n   \
    \   'reason code' value consistent with the proposed, local 'channel\n      type'.\
    \  It is assumed that practitioners will first attempt to use\n      the IANA\
    \ assigned 'reason code' values and then document their\n      locally assigned\
    \ 'reason code' values.\n   o  There are no restrictions or suggestions for the\
    \ range starting\n      with 0xFF.  No interoperability is expected for anything\
    \ used in\n      this range.  Essentially, it is for experimentation.\n"
- title: 5.2.  Data Transfer
  contents:
  - "5.2.  Data Transfer\n   The window size specifies how many bytes the other party\
    \ can send\n   before it must wait for the window to be adjusted.  Both parties\
    \ use\n   the following message to adjust the window.\n      byte      SSH_MSG_CHANNEL_WINDOW_ADJUST\n\
    \      uint32    recipient channel\n      uint32    bytes to add\n   After receiving\
    \ this message, the recipient MAY send the given number\n   of bytes more than\
    \ it was previously allowed to send; the window size\n   is incremented.  Implementations\
    \ MUST correctly handle window sizes\n   of up to 2^32 - 1 bytes.  The window\
    \ MUST NOT be increased above\n   2^32 - 1 bytes.\n   Data transfer is done with\
    \ messages of the following type.\n      byte      SSH_MSG_CHANNEL_DATA\n    \
    \  uint32    recipient channel\n      string    data\n   The maximum amount of\
    \ data allowed is determined by the maximum\n   packet size for the channel, and\
    \ the current window size, whichever\n   is smaller.  The window size is decremented\
    \ by the amount of data\n   sent.  Both parties MAY ignore all extra data sent\
    \ after the allowed\n   window is empty.\n   Implementations are expected to have\
    \ some limit on the SSH transport\n   layer packet size (any limit for received\
    \ packets MUST be 32768 bytes\n   or larger, as described in [SSH-TRANS]).  The\
    \ implementation of the\n   SSH connection layer\n   o  MUST NOT advertise a maximum\
    \ packet size that would result in\n      transport packets larger than its transport\
    \ layer is willing to\n      receive.\n   o  MUST NOT generate data packets larger\
    \ than its transport layer is\n      willing to send, even if the remote end would\
    \ be willing to accept\n      very large packets.\n   Additionally, some channels\
    \ can transfer several types of data.  An\n   example of this is stderr data from\
    \ interactive sessions.  Such data\n   can be passed with SSH_MSG_CHANNEL_EXTENDED_DATA\
    \ messages, where a\n   separate integer specifies the type of data.  The available\
    \ types and\n   their interpretation depend on the type of channel.\n      byte\
    \      SSH_MSG_CHANNEL_EXTENDED_DATA\n      uint32    recipient channel\n    \
    \  uint32    data_type_code\n      string    data\n   Data sent with these messages\
    \ consumes the same window as ordinary\n   data.\n   Currently, only the following\
    \ type is defined.  Note that the value\n   for the 'data_type_code' is given\
    \ in decimal format for readability,\n   but the values are actually uint32 values.\n\
    \               Symbolic name                  data_type_code\n              \
    \ -------------                  --------------\n             SSH_EXTENDED_DATA_STDERR\
    \               1\n   Extended Channel Data Transfer 'data_type_code' values MUST\
    \ be\n   assigned sequentially.  Requests for assignments of new Extended\n  \
    \ Channel Data Transfer 'data_type_code' values and their associated\n   Extended\
    \ Channel Data Transfer 'data' strings, in the range of\n   0x00000002 to 0xFDFFFFFF,\
    \ MUST be done through the IETF CONSENSUS\n   method as described in [RFC2434].\
    \  The IANA will not assign Extended\n   Channel Data Transfer 'data_type_code'\
    \ values in the range of\n   0xFE000000 to 0xFFFFFFFF.  Extended Channel Data\
    \ Transfer\n   'data_type_code' values in that range are left for PRIVATE USE,\
    \ as\n   described in [RFC2434].  As is noted, the actual instructions to the\n\
    \   IANA are in [SSH-NUMBERS].\n"
- title: 5.3.  Closing a Channel
  contents:
  - "5.3.  Closing a Channel\n   When a party will no longer send more data to a channel,\
    \ it SHOULD\n   send SSH_MSG_CHANNEL_EOF.\n      byte      SSH_MSG_CHANNEL_EOF\n\
    \      uint32    recipient channel\n   No explicit response is sent to this message.\
    \  However, the\n   application may send EOF to whatever is at the other end of\
    \ the\n   channel.  Note that the channel remains open after this message, and\n\
    \   more data may still be sent in the other direction.  This message\n   does\
    \ not consume window space and can be sent even if no window space\n   is available.\n\
    \   When either party wishes to terminate the channel, it sends\n   SSH_MSG_CHANNEL_CLOSE.\
    \  Upon receiving this message, a party MUST\n   send back an SSH_MSG_CHANNEL_CLOSE\
    \ unless it has already sent this\n   message for the channel.  The channel is\
    \ considered closed for a\n   party when it has both sent and received SSH_MSG_CHANNEL_CLOSE,\
    \ and\n   the party may then reuse the channel number.  A party MAY send\n   SSH_MSG_CHANNEL_CLOSE\
    \ without having sent or received\n   SSH_MSG_CHANNEL_EOF.\n      byte      SSH_MSG_CHANNEL_CLOSE\n\
    \      uint32    recipient channel\n   This message does not consume window space\
    \ and can be sent even if no\n   window space is available.\n   It is RECOMMENDED\
    \ that all data sent before this message be delivered\n   to the actual destination,\
    \ if possible.\n"
- title: 5.4.  Channel-Specific Requests
  contents:
  - "5.4.  Channel-Specific Requests\n   Many 'channel type' values have extensions\
    \ that are specific to that\n   particular 'channel type'.  An example is requesting\
    \ a pty (pseudo\n   terminal) for an interactive session.\n   All channel-specific\
    \ requests use the following format.\n      byte      SSH_MSG_CHANNEL_REQUEST\n\
    \      uint32    recipient channel\n      string    request type in US-ASCII characters\
    \ only\n      boolean   want reply\n      ....      type-specific data follows\n\
    \   If 'want reply' is FALSE, no response will be sent to the request.\n   Otherwise,\
    \ the recipient responds with either\n   SSH_MSG_CHANNEL_SUCCESS, SSH_MSG_CHANNEL_FAILURE,\
    \ or request-specific\n   continuation messages.  If the request is not recognized\
    \ or is not\n   supported for the channel, SSH_MSG_CHANNEL_FAILURE is returned.\n\
    \   This message does not consume window space and can be sent even if no\n  \
    \ window space is available.  The values of 'request type' are local to\n   each\
    \ channel type.\n   The client is allowed to send further messages without waiting\
    \ for\n   the response to the request.\n   'request type' names follow the DNS\
    \ extensibility naming convention\n   outlined in [SSH-ARCH] and [SSH-NUMBERS].\n\
    \      byte      SSH_MSG_CHANNEL_SUCCESS\n      uint32    recipient channel\n\
    \      byte      SSH_MSG_CHANNEL_FAILURE\n      uint32    recipient channel\n\
    \   These messages do not consume window space and can be sent even if no\n  \
    \ window space is available.\n"
- title: 6.  Interactive Sessions
  contents:
  - "6.  Interactive Sessions\n   A session is a remote execution of a program.  The\
    \ program may be a\n   shell, an application, a system command, or some built-in\
    \ subsystem.\n   It may or may not have a tty, and may or may not involve X11\n\
    \   forwarding.  Multiple sessions can be active simultaneously.\n"
- title: 6.1.  Opening a Session
  contents:
  - "6.1.  Opening a Session\n   A session is started by sending the following message.\n\
    \      byte      SSH_MSG_CHANNEL_OPEN\n      string    \"session\"\n      uint32\
    \    sender channel\n      uint32    initial window size\n      uint32    maximum\
    \ packet size\n   Client implementations SHOULD reject any session channel open\n\
    \   requests to make it more difficult for a corrupt server to attack the\n  \
    \ client.\n"
- title: 6.2.  Requesting a Pseudo-Terminal
  contents:
  - "6.2.  Requesting a Pseudo-Terminal\n   A pseudo-terminal can be allocated for\
    \ the session by sending the\n   following message.\n      byte      SSH_MSG_CHANNEL_REQUEST\n\
    \      uint32    recipient channel\n      string    \"pty-req\"\n      boolean\
    \   want_reply\n      string    TERM environment variable value (e.g., vt100)\n\
    \      uint32    terminal width, characters (e.g., 80)\n      uint32    terminal\
    \ height, rows (e.g., 24)\n      uint32    terminal width, pixels (e.g., 640)\n\
    \      uint32    terminal height, pixels (e.g., 480)\n      string    encoded\
    \ terminal modes\n   The 'encoded terminal modes' are described in Section 8.\
    \  Zero\n   dimension parameters MUST be ignored.  The character/row dimensions\n\
    \   override the pixel dimensions (when nonzero).  Pixel dimensions refer\n  \
    \ to the drawable area of the window.\n   The dimension parameters are only informational.\n\
    \   The client SHOULD ignore pty requests.\n"
- title: 6.3.  X11 Forwarding
  contents:
  - '6.3.  X11 Forwarding

    '
- title: 6.3.1.  Requesting X11 Forwarding
  contents:
  - "6.3.1.  Requesting X11 Forwarding\n   X11 forwarding may be requested for a session\
    \ by sending a\n   SSH_MSG_CHANNEL_REQUEST message.\n      byte      SSH_MSG_CHANNEL_REQUEST\n\
    \      uint32    recipient channel\n      string    \"x11-req\"\n      boolean\
    \   want reply\n      boolean   single connection\n      string    x11 authentication\
    \ protocol\n      string    x11 authentication cookie\n      uint32    x11 screen\
    \ number\n   It is RECOMMENDED that the 'x11 authentication cookie' that is sent\n\
    \   be a fake, random cookie, and that the cookie be checked and replaced\n  \
    \ by the real cookie when a connection request is received.\n   X11 connection\
    \ forwarding should stop when the session channel is\n   closed.  However, already\
    \ opened forwardings should not be\n   automatically closed when the session channel\
    \ is closed.\n   If 'single connection' is TRUE, only a single connection should\
    \ be\n   forwarded.  No more connections will be forwarded after the first, or\n\
    \   after the session channel has been closed.\n   The 'x11 authentication protocol'\
    \ is the name of the X11\n   authentication method used, e.g., \"MIT-MAGIC-COOKIE-1\"\
    .\n   The 'x11 authentication cookie' MUST be hexadecimal encoded.\n   The X Protocol\
    \ is documented in [SCHEIFLER].\n"
- title: 6.3.2.  X11 Channels
  contents:
  - "6.3.2.  X11 Channels\n   X11 channels are opened with a channel open request.\
    \  The resulting\n   channels are independent of the session, and closing the\
    \ session\n   channel does not close the forwarded X11 channels.\n      byte \
    \     SSH_MSG_CHANNEL_OPEN\n      string    \"x11\"\n      uint32    sender channel\n\
    \      uint32    initial window size\n      uint32    maximum packet size\n  \
    \    string    originator address (e.g., \"192.168.7.38\")\n      uint32    originator\
    \ port\n   The recipient should respond with SSH_MSG_CHANNEL_OPEN_CONFIRMATION\n\
    \   or SSH_MSG_CHANNEL_OPEN_FAILURE.\n   Implementations MUST reject any X11 channel\
    \ open requests if they\n   have not requested X11 forwarding.\n"
- title: 6.4.  Environment Variable Passing
  contents:
  - "6.4.  Environment Variable Passing\n   Environment variables may be passed to\
    \ the shell/command to be\n   started later.  Uncontrolled setting of environment\
    \ variables in a\n   privileged process can be a security hazard.  It is recommended\
    \ that\n   implementations either maintain a list of allowable variable names\
    \ or\n   only set environment variables after the server process has dropped\n\
    \   sufficient privileges.\n      byte      SSH_MSG_CHANNEL_REQUEST\n      uint32\
    \    recipient channel\n      string    \"env\"\n      boolean   want reply\n\
    \      string    variable name\n      string    variable value\n"
- title: 6.5.  Starting a Shell or a Command
  contents:
  - "6.5.  Starting a Shell or a Command\n   Once the session has been set up, a program\
    \ is started at the remote\n   end.  The program can be a shell, an application\
    \ program, or a\n   subsystem with a host-independent name.  Only one of these\
    \ requests\n   can succeed per channel.\n      byte      SSH_MSG_CHANNEL_REQUEST\n\
    \      uint32    recipient channel\n      string    \"shell\"\n      boolean \
    \  want reply\n   This message will request that the user's default shell (typically\n\
    \   defined in /etc/passwd in UNIX systems) be started at the other end.\n   \
    \   byte      SSH_MSG_CHANNEL_REQUEST\n      uint32    recipient channel\n   \
    \   string    \"exec\"\n      boolean   want reply\n      string    command\n\
    \   This message will request that the server start the execution of the\n   given\
    \ command.  The 'command' string may contain a path.  Normal\n   precautions MUST\
    \ be taken to prevent the execution of unauthorized\n   commands.\n      byte\
    \      SSH_MSG_CHANNEL_REQUEST\n      uint32    recipient channel\n      string\
    \    \"subsystem\"\n      boolean   want reply\n      string    subsystem name\n\
    \   This last form executes a predefined subsystem.  It is expected that\n   these\
    \ will include a general file transfer mechanism, and possibly\n   other features.\
    \  Implementations may also allow configuring more such\n   mechanisms.  As the\
    \ user's shell is usually used to execute the\n   subsystem, it is advisable for\
    \ the subsystem protocol to have a\n   \"magic cookie\" at the beginning of the\
    \ protocol transaction to\n   distinguish it from arbitrary output generated by\
    \ shell\n   initialization scripts, etc.  This spurious output from the shell\
    \ may\n   be filtered out either at the server or at the client.\n   The server\
    \ SHOULD NOT halt the execution of the protocol stack when\n   starting a shell\
    \ or a program.  All input and output from these\n   SHOULD be redirected to the\
    \ channel or to the encrypted tunnel.\n   It is RECOMMENDED that the reply to\
    \ these messages be requested and\n   checked.  The client SHOULD ignore these\
    \ messages.\n   Subsystem names follow the DNS extensibility naming convention\n\
    \   outlined in [SSH-NUMBERS].\n"
- title: 6.6.  Session Data Transfer
  contents:
  - "6.6.  Session Data Transfer\n   Data transfer for a session is done using SSH_MSG_CHANNEL_DATA\
    \ and\n   SSH_MSG_CHANNEL_EXTENDED_DATA packets and the window mechanism.  The\n\
    \   extended data type SSH_EXTENDED_DATA_STDERR has been defined for\n   stderr\
    \ data.\n"
- title: 6.7.  Window Dimension Change Message
  contents:
  - "6.7.  Window Dimension Change Message\n   When the window (terminal) size changes\
    \ on the client side, it MAY\n   send a message to the other side to inform it\
    \ of the new dimensions.\n      byte      SSH_MSG_CHANNEL_REQUEST\n      uint32\
    \    recipient channel\n      string    \"window-change\"\n      boolean   FALSE\n\
    \      uint32    terminal width, columns\n      uint32    terminal height, rows\n\
    \      uint32    terminal width, pixels\n      uint32    terminal height, pixels\n\
    \   A response SHOULD NOT be sent to this message.\n"
- title: 6.8.  Local Flow Control
  contents:
  - "6.8.  Local Flow Control\n   On many systems, it is possible to determine if\
    \ a pseudo-terminal is\n   using control-S/control-Q flow control.  When flow\
    \ control is\n   allowed, it is often desirable to do the flow control at the\
    \ client\n   end to speed up responses to user requests.  This is facilitated\
    \ by\n   the following notification.  Initially, the server is responsible for\n\
    \   flow control.  (Here, again, client means the side originating the\n   session,\
    \ and server means the other side.)\n   The message below is used by the server\
    \ to inform the client when it\n   can or cannot perform flow control (control-S/control-Q\
    \ processing).\n   If 'client can do' is TRUE, the client is allowed to do flow\
    \ control\n   using control-S and control-Q.  The client MAY ignore this message.\n\
    \      byte      SSH_MSG_CHANNEL_REQUEST\n      uint32    recipient channel\n\
    \      string    \"xon-xoff\"\n      boolean   FALSE\n      boolean   client can\
    \ do\n   No response is sent to this message.\n"
- title: 6.9.  Signals
  contents:
  - "6.9.  Signals\n   A signal can be delivered to the remote process/service using\
    \ the\n   following message.  Some systems may not implement signals, in which\n\
    \   case they SHOULD ignore this message.\n      byte      SSH_MSG_CHANNEL_REQUEST\n\
    \      uint32    recipient channel\n      string    \"signal\"\n      boolean\
    \   FALSE\n      string    signal name (without the \"SIG\" prefix)\n   'signal\
    \ name' values will be encoded as discussed in the passage\n   describing SSH_MSG_CHANNEL_REQUEST\
    \ messages using \"exit-signal\" in\n   this section.\n"
- title: 6.10.  Returning Exit Status
  contents:
  - "6.10.  Returning Exit Status\n   When the command running at the other end terminates,\
    \ the following\n   message can be sent to return the exit status of the command.\n\
    \   Returning the status is RECOMMENDED.  No acknowledgement is sent for\n   this\
    \ message.  The channel needs to be closed with\n   SSH_MSG_CHANNEL_CLOSE after\
    \ this message.\n   The client MAY ignore these messages.\n      byte      SSH_MSG_CHANNEL_REQUEST\n\
    \      uint32    recipient channel\n      string    \"exit-status\"\n      boolean\
    \   FALSE\n      uint32    exit_status\n   The remote command may also terminate\
    \ violently due to a signal.\n   Such a condition can be indicated by the following\
    \ message.  A zero\n   'exit_status' usually means that the command terminated\
    \ successfully.\n      byte      SSH_MSG_CHANNEL_REQUEST\n      uint32    recipient\
    \ channel\n      string    \"exit-signal\"\n      boolean   FALSE\n      string\
    \    signal name (without the \"SIG\" prefix)\n      boolean   core dumped\n \
    \     string    error message in ISO-10646 UTF-8 encoding\n      string    language\
    \ tag [RFC3066]\n   The 'signal name' is one of the following (these are from\
    \ [POSIX]).\n            ABRT\n            ALRM\n            FPE\n           \
    \ HUP\n            ILL\n            INT\n            KILL\n            PIPE\n\
    \            QUIT\n            SEGV\n            TERM\n            USR1\n    \
    \        USR2\n   Additional 'signal name' values MAY be sent in the format\n\
    \   \"sig-name@xyz\", where \"sig-name\" and \"xyz\" may be anything a\n   particular\
    \ implementer wants (except the \"@\" sign).  However, it is\n   suggested that\
    \ if a 'configure' script is used, any non-standard\n   'signal name' values it\
    \ finds be encoded as \"SIG@xyz.config.guess\",\n   where \"SIG\" is the 'signal\
    \ name' without the \"SIG\" prefix, and \"xyz\"\n   is the host type, as determined\
    \ by \"config.guess\".\n   The 'error message' contains an additional textual\
    \ explanation of the\n   error message.  The message may consist of multiple lines\
    \ separated\n   by CRLF (Carriage Return - Line Feed) pairs.  The client software\
    \ MAY\n   display this message to the user.  If this is done, the client\n   software\
    \ should take the precautions discussed in [SSH-ARCH].\n"
- title: 7.  TCP/IP Port Forwarding
  contents:
  - '7.  TCP/IP Port Forwarding

    '
- title: 7.1.  Requesting Port Forwarding
  contents:
  - "7.1.  Requesting Port Forwarding\n   A party need not explicitly request forwardings\
    \ from its own end to\n   the other direction.  However, if it wishes that connections\
    \ to a\n   port on the other side be forwarded to the local side, it must\n  \
    \ explicitly request this.\n      byte      SSH_MSG_GLOBAL_REQUEST\n      string\
    \    \"tcpip-forward\"\n      boolean   want reply\n      string    address to\
    \ bind (e.g., \"0.0.0.0\")\n      uint32    port number to bind\n   The 'address\
    \ to bind' and 'port number to bind' specify the IP\n   address (or domain name)\
    \ and port on which connections for forwarding\n   are to be accepted.  Some strings\
    \ used for 'address to bind' have\n   special-case semantics.\n   o  \"\" means\
    \ that connections are to be accepted on all protocol\n      families supported\
    \ by the SSH implementation.\n   o  \"0.0.0.0\" means to listen on all IPv4 addresses.\n\
    \   o  \"::\" means to listen on all IPv6 addresses.\n   o  \"localhost\" means\
    \ to listen on all protocol families supported by\n      the SSH implementation\
    \ on loopback addresses only ([RFC3330] and\n      [RFC3513]).\n   o  \"127.0.0.1\"\
    \ and \"::1\" indicate listening on the loopback\n      interfaces for IPv4 and\
    \ IPv6, respectively.\n   Note that the client can still filter connections based\
    \ on\n   information passed in the open request.\n   Implementations should only\
    \ allow forwarding privileged ports if the\n   user has been authenticated as\
    \ a privileged user.\n   Client implementations SHOULD reject these messages;\
    \ they are\n   normally only sent by the client.\n   If a client passes 0 as port\
    \ number to bind and has 'want reply' as\n   TRUE, then the server allocates the\
    \ next available unprivileged port\n   number and replies with the following message;\
    \ otherwise, there is no\n   response-specific data.\n      byte     SSH_MSG_REQUEST_SUCCESS\n\
    \      uint32   port that was bound on the server\n   A port forwarding can be\
    \ canceled with the following message.  Note\n   that channel open requests may\
    \ be received until a reply to this\n   message is received.\n      byte     \
    \ SSH_MSG_GLOBAL_REQUEST\n      string    \"cancel-tcpip-forward\"\n      boolean\
    \   want reply\n      string    address_to_bind (e.g., \"127.0.0.1\")\n      uint32\
    \    port number to bind\n   Client implementations SHOULD reject these messages;\
    \ they are\n   normally only sent by the client.\n"
- title: 7.2.  TCP/IP Forwarding Channels
  contents:
  - "7.2.  TCP/IP Forwarding Channels\n   When a connection comes to a port for which\
    \ remote forwarding has\n   been requested, a channel is opened to forward the\
    \ port to the other\n   side.\n      byte      SSH_MSG_CHANNEL_OPEN\n      string\
    \    \"forwarded-tcpip\"\n      uint32    sender channel\n      uint32    initial\
    \ window size\n      uint32    maximum packet size\n      string    address that\
    \ was connected\n      uint32    port that was connected\n      string    originator\
    \ IP address\n      uint32    originator port\n   Implementations MUST reject\
    \ these messages unless they have\n   previously requested a remote TCP/IP port\
    \ forwarding with the given\n   port number.\n   When a connection comes to a\
    \ locally forwarded TCP/IP port, the\n   following packet is sent to the other\
    \ side.  Note that these messages\n   MAY also be sent for ports for which no\
    \ forwarding has been\n   explicitly requested.  The receiving side must decide\
    \ whether to\n   allow the forwarding.\n      byte      SSH_MSG_CHANNEL_OPEN\n\
    \      string    \"direct-tcpip\"\n      uint32    sender channel\n      uint32\
    \    initial window size\n      uint32    maximum packet size\n      string  \
    \  host to connect\n      uint32    port to connect\n      string    originator\
    \ IP address\n      uint32    originator port\n   The 'host to connect' and 'port\
    \ to connect' specify the TCP/IP host\n   and port where the recipient should\
    \ connect the channel.  The 'host\n   to connect' may be either a domain name\
    \ or a numeric IP address.\n   The 'originator IP address' is the numeric IP address\
    \ of the machine\n   from where the connection request originates, and the 'originator\n\
    \   port' is the port on the host from where the connection originated.\n   Forwarded\
    \ TCP/IP channels are independent of any sessions, and\n   closing a session channel\
    \ does not in any way imply that forwarded\n   connections should be closed.\n\
    \   Client implementations SHOULD reject direct TCP/IP open requests for\n   security\
    \ reasons.\n"
- title: 8.  Encoding of Terminal Modes
  contents:
  - "8.  Encoding of Terminal Modes\n   All 'encoded terminal modes' (as passed in\
    \ a pty request) are encoded\n   into a byte stream.  It is intended that the\
    \ coding be portable\n   across different environments.  The stream consists of\
    \ opcode-\n   argument pairs wherein the opcode is a byte value.  Opcodes 1 to\
    \ 159\n   have a single uint32 argument.  Opcodes 160 to 255 are not yet\n   defined,\
    \ and cause parsing to stop (they should only be used after\n   any other data).\
    \  The stream is terminated by opcode TTY_OP_END\n   (0x00).\n   The client SHOULD\
    \ put any modes it knows about in the stream, and the\n   server MAY ignore any\
    \ modes it does not know about.  This allows some\n   degree of machine-independence,\
    \ at least between systems that use a\n   POSIX-like tty interface.  The protocol\
    \ can support other systems as\n   well, but the client may need to fill reasonable\
    \ values for a number\n   of parameters so the server pty gets set to a reasonable\
    \ mode (the\n   server leaves all unspecified mode bits in their default values,\
    \ and\n   only some combinations make sense).\n   The naming of opcode values\
    \ mostly follows the POSIX terminal mode\n   flags.  The following opcode values\
    \ have been defined.  Note that the\n   values given below are in decimal format\
    \ for readability, but they\n   are actually byte values.\n          opcode  mnemonic\
    \       description\n          ------  --------       -----------\n          0\
    \     TTY_OP_END  Indicates end of options.\n          1     VINTR       Interrupt\
    \ character; 255 if none.  Similarly\n                             for the other\
    \ characters.  Not all of these\n                             characters are supported\
    \ on all systems.\n          2     VQUIT       The quit character (sends SIGQUIT\
    \ signal on\n                             POSIX systems).\n          3     VERASE\
    \      Erase the character to left of the cursor.\n          4     VKILL     \
    \  Kill the current input line.\n          5     VEOF        End-of-file character\
    \ (sends EOF from the\n                             terminal).\n          6  \
    \   VEOL        End-of-line character in addition to\n                       \
    \      carriage return and/or linefeed.\n          7     VEOL2       Additional\
    \ end-of-line character.\n          8     VSTART      Continues paused output\
    \ (normally\n                             control-Q).\n          9     VSTOP \
    \      Pauses output (normally control-S).\n          10    VSUSP       Suspends\
    \ the current program.\n          11    VDSUSP      Another suspend character.\n\
    \          12    VREPRINT    Reprints the current input line.\n          13  \
    \  VWERASE     Erases a word left of cursor.\n          14    VLNEXT      Enter\
    \ the next character typed literally,\n                             even if it\
    \ is a special character\n          15    VFLUSH      Character to flush output.\n\
    \          16    VSWTCH      Switch to a different shell layer.\n          17\
    \    VSTATUS     Prints system status line (load, command,\n                 \
    \            pid, etc).\n          18    VDISCARD    Toggles the flushing of terminal\
    \ output.\n          30    IGNPAR      The ignore parity flag.  The parameter\n\
    \                             SHOULD be 0 if this flag is FALSE,\n           \
    \                  and 1 if it is TRUE.\n          31    PARMRK      Mark parity\
    \ and framing errors.\n          32    INPCK       Enable checking of parity errors.\n\
    \          33    ISTRIP      Strip 8th bit off characters.\n          34    INLCR\
    \       Map NL into CR on input.\n          35    IGNCR       Ignore CR on input.\n\
    \          36    ICRNL       Map CR to NL on input.\n          37    IUCLC   \
    \    Translate uppercase characters to\n                             lowercase.\n\
    \          38    IXON        Enable output flow control.\n          39    IXANY\
    \       Any char will restart after stop.\n          40    IXOFF       Enable\
    \ input flow control.\n          41    IMAXBEL     Ring bell on input queue full.\n\
    \          50    ISIG        Enable signals INTR, QUIT, [D]SUSP.\n          51\
    \    ICANON      Canonicalize input lines.\n          52    XCASE       Enable\
    \ input and output of uppercase\n                             characters by preceding\
    \ their lowercase\n                             equivalents with \"\\\".\n   \
    \       53    ECHO        Enable echoing.\n          54    ECHOE       Visually\
    \ erase chars.\n          55    ECHOK       Kill character discards current line.\n\
    \          56    ECHONL      Echo NL even if ECHO is off.\n          57    NOFLSH\
    \      Don't flush after interrupt.\n          58    TOSTOP      Stop background\
    \ jobs from output.\n          59    IEXTEN      Enable extensions.\n        \
    \  60    ECHOCTL     Echo control characters as ^(Char).\n          61    ECHOKE\
    \      Visual erase for line kill.\n          62    PENDIN      Retype pending\
    \ input.\n          70    OPOST       Enable output processing.\n          71\
    \    OLCUC       Convert lowercase to uppercase.\n          72    ONLCR      \
    \ Map NL to CR-NL.\n          73    OCRNL       Translate carriage return to newline\n\
    \                             (output).\n          74    ONOCR       Translate\
    \ newline to carriage\n                             return-newline (output).\n\
    \          75    ONLRET      Newline performs a carriage return\n            \
    \                 (output).\n          90    CS7         7 bit mode.\n       \
    \   91    CS8         8 bit mode.\n          92    PARENB      Parity enable.\n\
    \          93    PARODD      Odd parity, else even.\n          128 TTY_OP_ISPEED\
    \  Specifies the input baud rate in\n                              bits per second.\n\
    \          129 TTY_OP_OSPEED  Specifies the output baud rate in\n            \
    \                  bits per second.\n"
- title: 9.  Summary of Message Numbers
  contents:
  - "9.  Summary of Message Numbers\n   The following is a summary of messages and\
    \ their associated message\n   number.\n            SSH_MSG_GLOBAL_REQUEST   \
    \               80\n            SSH_MSG_REQUEST_SUCCESS                 81\n \
    \           SSH_MSG_REQUEST_FAILURE                 82\n            SSH_MSG_CHANNEL_OPEN\
    \                    90\n            SSH_MSG_CHANNEL_OPEN_CONFIRMATION       91\n\
    \            SSH_MSG_CHANNEL_OPEN_FAILURE            92\n            SSH_MSG_CHANNEL_WINDOW_ADJUST\
    \           93\n            SSH_MSG_CHANNEL_DATA                    94\n     \
    \       SSH_MSG_CHANNEL_EXTENDED_DATA           95\n            SSH_MSG_CHANNEL_EOF\
    \                     96\n            SSH_MSG_CHANNEL_CLOSE                  \
    \ 97\n            SSH_MSG_CHANNEL_REQUEST                 98\n            SSH_MSG_CHANNEL_SUCCESS\
    \                 99\n            SSH_MSG_CHANNEL_FAILURE                100\n"
- title: 10.  IANA Considerations
  contents:
  - "10.  IANA Considerations\n   This document is part of a set.  The IANA considerations\
    \ for the SSH\n   protocol as defined in [SSH-ARCH], [SSH-TRANS], [SSH-USERAUTH],\
    \ and\n   this document, are detailed in [SSH-NUMBERS].\n"
- title: 11.  Security Considerations
  contents:
  - "11.  Security Considerations\n   This protocol is assumed to run on top of a\
    \ secure, authenticated\n   transport.  User authentication and protection against\
    \ network-level\n   attacks are assumed to be provided by the underlying protocols.\n\
    \   Full security considerations for this protocol are provided in\n   [SSH-ARCH].\
    \  Specific to this document, it is RECOMMENDED that\n   implementations disable\
    \ all the potentially dangerous features (e.g.,\n   agent forwarding, X11 forwarding,\
    \ and TCP/IP forwarding) if the host\n   key has changed without notice or explanation.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [SSH-ARCH]     Ylonen, T. and C. Lonvick, Ed.,\
    \ \"The Secure Shell\n                  (SSH) Protocol Architecture\", RFC 4251,\
    \ January 2006.\n   [SSH-TRANS]    Ylonen, T. and C. Lonvick, Ed., \"The Secure\
    \ Shell\n                  (SSH) Transport Layer Protocol\", RFC 4253, January\n\
    \                  2006.\n   [SSH-USERAUTH] Ylonen, T. and C. Lonvick, Ed., \"\
    The Secure Shell\n                  (SSH) Authentication Protocol\", RFC 4252,\
    \ January\n                  2006.\n   [SSH-NUMBERS]  Lehtinen, S. and C. Lonvick,\
    \ Ed., \"The Secure Shell\n                  (SSH) Protocol Assigned Numbers\"\
    , RFC 4250, January\n                  2006.\n   [RFC2119]      Bradner, S., \"\
    Key words for use in RFCs to Indicate\n                  Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC2434]      Narten, T. and H. Alvestrand,\
    \ \"Guidelines for Writing\n                  an IANA Considerations Section in\
    \ RFCs\", BCP 26, RFC\n                  2434, October 1998.\n   [RFC3066]   \
    \   Alvestrand, H., \"Tags for the Identification of\n                  Languages\"\
    , BCP 47, RFC 3066, January 2001.\n   [RFC3629]      Yergeau, F., \"UTF-8, a transformation\
    \ format of ISO\n                  10646\", STD 63, RFC 3629, November 2003.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [RFC3330]      IANA, \"Special-Use IPv4 Addresses\"\
    , RFC 3330,\n                  September 2002.\n   [RFC3513]      Hinden, R. and\
    \ S. Deering, \"Internet Protocol Version\n                  6 (IPv6) Addressing\
    \ Architecture\", RFC 3513, April\n                  2003.\n   [SCHEIFLER]   \
    \ Scheifler, R., \"X Window System : The Complete\n                  Reference\
    \ to Xlib, X Protocol, Icccm, Xlfd, 3rd\n                  edition.\", Digital\
    \ Press ISBN 1555580882, February\n                  1992.\n   [POSIX]       \
    \ ISO/IEC, 9945-1., \"Information technology -- Portable\n                  Operating\
    \ System Interface  (POSIX)-Part 1: System\n                  Application Program\
    \ Interface (API) C Language\", ANSI/\n                  IEE Std 1003.1, July\
    \ 1996.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Tatu Ylonen\n   SSH Communications Security Corp\n   Valimotie\
    \ 17\n   00380 Helsinki\n   Finland\n   EMail: ylo@ssh.com\n   Chris Lonvick (editor)\n\
    \   Cisco Systems, Inc.\n   12515 Research Blvd.\n   Austin  78759\n   USA\n \
    \  EMail: clonvick@cisco.com\n"
- title: Trademark Notice
  contents:
  - "Trademark Notice\n   \"ssh\" is a registered trademark in the United States and/or\
    \ other\n   countries.\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
