Abstract This document describes a secret key cryptosystem MISTY1, which is block cipher with a 128 bit key, a 64 bit block and a variable number of rounds.
It documents the algorithm description including key scheduling part and data randomizing part.
This document describes a secret key cryptosystem MISTY1, which is block cipher with a 128 bit key, a 64 bit block and a variable number of rounds.
It is designed on the basis of the theory of provable security against differential and linear cryptanalysis, and moreover it realizes high speed encryption on hardware platforms as well as on software environments.
As the result of weighing strength and speed, 8 rounds of MISTY1 is recommended and used in most cases.
Our implementation shows that MISTY1 with eight rounds can encrypt a data stream in CBC mode at a speed of 57Mbps and 40Mbps on Pentium II/266MHz and PA 7200/120MHz, respectively.
For its hardware performance, we have produced a prototype LSI by a process of 0.8  micron CMOS gate array and confirmed a speed of 512Mbps. 2.
Algorithm Description Algorithm [1] could be divided into two parts, namely "key scheduling part" and "data randomizing part".
Key scheduling part takes a 128  bit input key and produces a 128 bit expanded key.
Data randomizing part takes a 64 bit input data and mixes it, namely encryption.
If data randomizing part is processed in reverse order, mixed data is transformed to input data, namely decryption.
Some operators are used in this document to describe the algorithm.
2.2 Key Scheduling Part Key scheduling part consists of the following operations.
EK denotes an expanded key, and each element of EK, namely EK[i], holds a 16 bit of the expanded key.
Expanded key is produced from EK[0],
Function FI is described in the following section.
2.3 Data Randomizing Part Data randomizing part uses two kinds of function, which are called function FO and function FL.
Function FO calls another function, namely FI.
The key expansion part also uses function FI.
Function FI uses two S boxes, namely S7, S9.
Each function is described as follows.
Function FO takes two parameters.
One is a 32 bit width input data, namely FO IN.
The other is an index of EK, namely k.
And FO returns a 32 bit width data, namely FO OUT.
IN, k) begin var t0, t1 as 16 bit integer;
t0   FO IN >> 16; t1   FO IN & 0xffff; t0   t0 ^ EK[k]; t0   FI(t0, EK[(k 5)%8 8]); t0   t0 ^ t1; t1   t1 ^ EK[(k 2)%8]; t1   FI(t1, EK[(k 1)%8 8]); t1   t1
t0; t0   t0 ^ EK[(k 7)%8]
; t0   FI(t0, EK[(k 3)%8 8]); t0   t0 ^ t1; t1   t1 ^ EK[(k 4)%8]; FO OUT   (t1<<16)   t0; return FO OUT; end.
Function FI takes two parameters.
One is a 16 bit width input data, namely FI IN.
The other is a part of EK, namely FI KEY, which is also 16 bit width.
And FI returns a 16 bit width data, namely FI OUT.
FI(FI IN, FI KEY) begin var d9 as 9 bit integer; var d7 as 7 bit integer; d9   FI IN >
> 7; d7   FI IN & 0x7f; d9   S9TABLE[d9] ^ d7; d7   S7TABLE[d7] ^ d9; ( d7   d7 & 0x7f; ) d7   d7
> 9); d9   d9 ^ (FI KEY & 0x1ff); d9   S9TABLE[d9] ^ d7; FI OUT
d9; return FI OUT; end.
S7TABLE and S9TABLE denote the S boxes S7 and S9 respectively in terms of look up table notation.
Here are the description of S7TABLE and S9TABLE in hexadecimal notation.
e  f 00: 1b 32 33 5a 3b 10 17 54 5b 1a 72 73
6b 2c 66 49 10:
1f 24 13 6c 37 2e 3f 4a 5d 0f 40 56 25 51 1c 04 20:
20 0d 7b 35 44 42 2b 1e
41 14 4b 79 15
09 36 74 0c 67
53 28 0a 7e 38
02 07 60 29 40:
19 12 65 2f 30 39 08 68 5f 78 2a 4c 64
45 75 3d 50: 59 48 03 57 7c 4f 62
6d 6e 63 18 77 23 05 26 76 00 31
2d 7a 7f 61 70:
50 22 11 06 47 16 52 4e 71
f 000: 1c3 0cb 153 19f 1e3
181 0b9 117 1eb 133 009 02d 0d3 010: 0c7 14a 037 07e 0eb 164
193 1d8 0a3 11e 055 02c 01d
118 020: 14b 152 1d2 00f 02b 030
1f4 01b 030: 001 09d 0f8 1a0 16d 1f3 01c
1d3 0dd 1e2 128 1e0 0ec
059 091 011 12f 026 0dc 0b0 18c 10f 1f7 050: 0e7 16c 0b6
0d8 151 101 14c 103 0b8
154 12b 1ae 017 071 00c 060: 047 058 07f 1a4 134
129 084 15d 19d 1b2 1a3
051 1ca 023 070: 13d 1a7 165 03b 042
0da 192 0ce 0c1 06b 09f
1f1 12c 184 0fa 196 080: 1e1 169 17d 031
180 10a 094 1da 186 13e 11c 060
175 1cf 067 119 090: 065 068 099
052 0a0: 109 090 19c 1c1 028 1b3 135 16a 176 0df
049 09a 1b6 069 081 125 00b 05e
0b4 0c0: 149 1c7 174 03e 13b 1b7 08e
1c6 0ae 010 095 1ef 04e 0f2
08a 156 09b 13c 107
003 1fe 0e0: 0bd 122 089 0d2 18f 012 033 06a 142 0ed 170 11b 0e2 14f 158
131 0f0: 147 05d 113 1cd
161 1a5 179 09e 1b4 0cc 022
132 01a 0e8 004 100
: 187 1ed 197 039 1bf 1d7 027
191 0fe 013 106 02f
0f5 1ec 120: 10d 076
114 1ab 075 10c 1e4
00e 1f0 077 04d 17a 086 08b 0b3
171 0bf 10e 104 097 15b 160
150: 1aa 143 17b 056 18d 166 0d4 1fb 14d
141 03c 1f9 140 02a 155 11a 1a1 198
: 072 18a 0aa 096
115 0ef 045 07b 08d
053 05f 178 0b2 02e 020
0b5 05a 182 1c8 1d4 190: 018
050 15f 1e8 121 073 17e 1b0
1a8 195 01f 041 00d
1a6 0cd 0f3 05c 102 05b 1d9
144 1f6 0ad 0a5 03a
1cb 136 17f 046 0e1 01e
137 1fa 185 08c 08f 040
1f0: 078 000 0ac 110 15e 124 002 1bc
1c2 Function FL takes two parameters.
One is a 32 bit data, namely FL IN.
The other is an index of EK, namely k.  And FL returns a 32  bit width data, namely FL OUT.
FL(FL IN, k) begin var d0, d1 as 16 bit integer; d0   FL IN >> 16; d1   FL IN & 0xffff; if (k is an even number)
; else d1   d1 ^
(d0 & EK[((k 1)/2 2)%8 8]); d0   d0
^ (d1   EK[((k 1)/2 4)%8]);
; return FL OUT; end.
When the algorithm is used for decryption, function FLINV is used instead of function FL.
IN, k) begin var d0, d1 as 16 bit integer; d0   FL IN >> 16; d1   FL IN & 0xffff; if (k is an even number)
^ (d1   EK[((k 1)/2 4)%8])
(d0 & EK[((k 1)/2 2)%8 8]); endif FL OUT   (d0<<16)   d1; return FL OUT; end.
In most cases, data randomizing part consists of 8 "rounds".
Round contains the call of function FO.
Additionally, even number round includes the calls of function FL.
After the final round, FLs are called again.
The detail description is as follows.
64 bit plaintext P is divided into the leftmost 32 bit D0 and the rightmost 32 bit D1.
D1   D1 ^ FO(D0, 4)
C   (D1<<32)   D0; When data randomizing part is used as decrypting operation, it should be executed in reverse order.
The detail description is as follows.
D0   C & 0xffffffff; D1   C >
; D0   FLINV(D0, 8); D1   FLINV(D1, 9); D0   D0 ^ FO(D1, 7); D1   D1 ^ FO(D0, 6); D0   FLINV(D0, 6); D1   FLINV(D1, 7); D0   D0 ^ FO(D1, 5); D1   D1 ^ FO(D0, 4); D0   FLINV(D0, 4); D1   FLINV(D1, 5); D0   D0 ^ FO(D1, 3); D1   D1 ^ FO(D0, 2); D0   FLINV(D0, 2); D1   FLINV(D1, 3); D0   D0 ^ FO(D1, 1); D1   D1 ^ FO(D0, 0); D0   FLINV(D0, 0); D1   FLINV(D1, 1); P   (D0<<32)   D1; 3.
Object Identifier The Object Identifier for MISTY1 in Cipher Block Chaining
(CBC) mode is as follows:
symmetric encryption algorithm(1) misty1 cbc(1)
CBC needs Initialization Vector (IV) as like as other algorithms, such as DES CBC, DES EDE3 CBC and so on.
When this Object Identifier is used, plaintext is padded before encrypt it.
At least 1 padding octet is appended at the end of the plaintext to make the length of the plaintext to the multiple of 8 octets.
The value of these octets is as same as the number of appended octets.
(e.g., If 5 octets are needed to pad, the value is 0x05.)
The algorithm, which is described in this document, is designed in consideration of the theory of provable security against differential cryptanalysis and linear cryptanalysis [2][3][4].
According to the recent result, when the algorithm consists of 8 rounds, both differential characteristic probability and liner characteristic probability are 2^ 140.
For reference, probabilities of DES are 2^  62 and 2^ 46, respectively.
The algorithm description is applied for a patent in several countries as PCT/JP96/02154.
However, the algorithm is freely available for academic (non profit) use.
Additionally, the algorithm can be used for commercial use without paying the patent fee if you contract with Mitsubishi Electric Corporation.
For more information, please contact at MISTY@isl.melco.co.jp.
Appendix A. Example Data of MISTY1
Here is an example ciphertext of MISTY1 when the key and the plaintext are set as following value.
22 33 44 55 66 77
23 45 67 89 ab cd
98 76 54 32 10
8b 1d a5 f5 6a b3 d0 7c 04
40 b1 3b e9 5d
In the above example, because the plaintext has a length of 128 bit, MISTY1 is used two times to each 64 bit, namely ECB mode.
Following example is ciphertext of MISTY1 in CBC mode.
22 33 44 55 66 77
02 03 04 05 06 07
08 Plaintext:  01 23 45 67 89 ab cd
98 76 54 32 10
Ciphertext: 46 1c 1e 87 9c 18 c2 7f b9 ad f2 d8
