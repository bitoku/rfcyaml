- contents:
  - '                           Teredo Extensions

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document specifies a set of extensions to the Teredo protocol.\n
    \  These extensions provide additional capabilities to Teredo, including\n   support
    for more types of Network Address Translations (NATs) and\n   support for more
    efficient communication.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6081.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . . .
    . . . .  3\n   3.  Overview . . . . . . . . . . . . . . . . . . . . . . . . .
    . .  6\n     3.1.  Symmetric NAT Support Extension  . . . . . . . . . . . . .
    \ 9\n     3.2.  UPnP-Enabled Symmetric NAT Extension . . . . . . . . . . . 11\n
    \    3.3.  Port-Preserving Symmetric NAT Extension  . . . . . . . . . 13\n     3.4.
    \ Sequential Port-Symmetric NAT Extension  . . . . . . . . . 14\n     3.5.  Hairpinning
    Extension  . . . . . . . . . . . . . . . . . . 15\n     3.6.  Server Load Reduction
    Extension  . . . . . . . . . . . . . 17\n   4.  Message Syntax . . . . . . . .
    . . . . . . . . . . . . . . . . 18\n     4.1.  Trailers . . . . . . . . . . .
    . . . . . . . . . . . . . . 18\n     4.2.  Nonce Trailer  . . . . . . . . . .
    . . . . . . . . . . . . 19\n     4.3.  Alternate Address Trailer  . . . . . .
    . . . . . . . . . . 19\n     4.4.  Neighbor Discovery Option Trailer  . . . .
    . . . . . . . . 20\n     4.5.  Random Port Trailer  . . . . . . . . . . . . .
    . . . . . . 21\n   5.  Protocol Details . . . . . . . . . . . . . . . . . . .
    . . . . 22\n     5.1.  Common Processing  . . . . . . . . . . . . . . . . . .
    . . 22\n       5.1.1.  Refresh Interval . . . . . . . . . . . . . . . . . . .
    22\n       5.1.2.  Trailer Processing . . . . . . . . . . . . . . . . . . 23\n
    \    5.2.  Symmetric NAT Support Extension  . . . . . . . . . . . . . 23\n       5.2.1.
    \ Abstract Data Model  . . . . . . . . . . . . . . . . . 24\n       5.2.2.  Timers
    . . . . . . . . . . . . . . . . . . . . . . . . 24\n       5.2.3.  Initialization
    . . . . . . . . . . . . . . . . . . . . 24\n       5.2.4.  Message Processing
    . . . . . . . . . . . . . . . . . . 24\n     5.3.  UPnP-Enabled Symmetric NAT
    Extension . . . . . . . . . . . 25\n       5.3.1.  Abstract Data Model  . . .
    . . . . . . . . . . . . . . 26\n       5.3.2.  Timers . . . . . . . . . . . .
    . . . . . . . . . . . . 26\n       5.3.3.  Initialization . . . . . . . . . .
    . . . . . . . . . . 27\n       5.3.4.  Message Processing . . . . . . . . . .
    . . . . . . . . 28\n       5.3.5.  Shutdown . . . . . . . . . . . . . . . . .
    . . . . . . 29\n     5.4.  Port-Preserving Symmetric NAT Extension  . . . . .
    . . . . 30\n       5.4.1.  Abstract Data Model  . . . . . . . . . . . . . . .
    . . 30\n       5.4.2.  Timers . . . . . . . . . . . . . . . . . . . . . . . .
    31\n       5.4.3.  Initialization . . . . . . . . . . . . . . . . . . . . 32\n
    \      5.4.4.  Message Processing . . . . . . . . . . . . . . . . . . 32\n     5.5.
    \ Sequential Port-Symmetric NAT Extension  . . . . . . . . . 35\n       5.5.1.
    \ Abstract Data Model  . . . . . . . . . . . . . . . . . 35\n       5.5.2.  Timers
    . . . . . . . . . . . . . . . . . . . . . . . . 36\n       5.5.3.  Initialization
    . . . . . . . . . . . . . . . . . . . . 37\n       5.5.4.  Message Processing
    . . . . . . . . . . . . . . . . . . 37\n     5.6.  Hairpinning Extension  . .
    . . . . . . . . . . . . . . . . 39\n       5.6.1.  Abstract Data Model  . . .
    . . . . . . . . . . . . . . 39\n       5.6.2.  Timers . . . . . . . . . . . .
    . . . . . . . . . . . . 39\n       5.6.3.  Initialization . . . . . . . . . .
    . . . . . . . . . . 39\n       5.6.4.  Message Processing . . . . . . . . . .
    . . . . . . . . 40\n     5.7.  Server Load Reduction Extension  . . . . . . .
    . . . . . . 41\n       5.7.1.  Abstract Data Model  . . . . . . . . . . . . .
    . . . . 41\n       5.7.2.  Timers . . . . . . . . . . . . . . . . . . . . . .
    . . 41\n       5.7.3.  Initialization . . . . . . . . . . . . . . . . . . . .
    42\n       5.7.4.  Message Processing . . . . . . . . . . . . . . . . . . 42\n
    \  6.  Protocol Examples  . . . . . . . . . . . . . . . . . . . . . . 42\n     6.1.
    \ Symmetric NAT Support Extension  . . . . . . . . . . . . . 42\n     6.2.  UPnP-Enabled
    Symmetric NAT Extension . . . . . . . . . . . 45\n     6.3.  Port-Preserving Symmetric
    NAT Extension  . . . . . . . . . 47\n     6.4.  Sequential Port-Symmetric NAT
    Extension  . . . . . . . . . 51\n     6.5.  Hairpinning Extension  . . . . . .
    . . . . . . . . . . . . 54\n     6.6.  Server Load Reduction Extension  . . .
    . . . . . . . . . . 57\n   7.  Security Considerations  . . . . . . . . . . .
    . . . . . . . . 58\n   8.  Acknowledgements . . . . . . . . . . . . . . . . .
    . . . . . . 58\n   9.  IANA Considerations  . . . . . . . . . . . . . . . . .
    . . . . 58\n   10. References . . . . . . . . . . . . . . . . . . . . . . . .
    . . 58\n     10.1. Normative References . . . . . . . . . . . . . . . . . . .
    58\n     10.2. Informative References . . . . . . . . . . . . . . . . . . 59\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document specifies extensions to the Teredo protocol,
    as\n   specified in [RFC4380].  These extensions provide additional\n   capabilities
    to Teredo, including support for more types of Network\n   Address Translations
    (NATs) and support for more efficient\n   communication.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   Because this document extends [RFC4380], it uses the following\n
    \  terminology, for consistency with [RFC4380].\n   Address-Restricted NAT: A
    restricted NAT that accepts packets from an\n   external host's IP address X and
    port Y if the internal host has sent\n   a packet that is destined to IP address
    X regardless of the\n   destination port.  In the terminology of [RFC4787], this
    is a NAT\n   with Endpoint-Independent Mapping and Address-Dependent Filtering.\n
    \  Address-Symmetric NAT: A symmetric NAT that has multiple external IP\n   addresses
    and that assigns different IP addresses and ports when\n   communicating with
    different external hosts.\n   Cone NAT: A NAT that maps all requests from the
    same internal IP\n   address and port to the same external IP address and port.\n
    \  Furthermore, any external host can send a packet to the internal host\n   by
    sending a packet to the mapped external address and port.  In the\n   terminology
    of [RFC4787], this is a NAT with Endpoint-Independent\n   Mapping and Endpoint-Independent
    Filtering.\n   Direct Bubble: A Teredo bubble that is sent directly to the IPv4
    node\n   whose Teredo address is contained in the Destination field of the\n   IPv6
    header, as specified in Section 2.8 of [RFC4380].  The IPv4\n   Destination Address
    and UDP Destination Port fields contain a mapped\n   address/port.\n   Echo Test:
    A mechanism to predict the mapped address/port a\n   sequential port-symmetric
    NAT is using for a client behind it.\n   Hairpinning: A feature that is available
    in some NATs where two or\n   more hosts are positioned behind a NAT and each
    of those hosts is\n   assigned a specific external (public) address and port by
    the NAT.\n   Hairpinning support in a NAT allows these hosts to send a packet
    to\n   the external address and port that is assigned to one of the other\n   hosts,
    and the NAT automatically routes the packet back to the\n   correct host.  The
    term hairpinning is derived from the behavior of\n   the packet, which arrives
    on, and is sent out to, the same NAT\n   interface.\n   Indirect Bubble: A Teredo
    bubble that is sent indirectly (via the\n   destination's Teredo server) to another
    Teredo client, as specified\n   in Section 5.2.4 of [RFC4380].\n   Local Address/Port:
    The IPv4 address and UDP port from which a Teredo\n   client sends Teredo packets.
    \ The local port is referred to as the\n   Teredo service port in [RFC4380].  The
    local address of a node may or\n   may not be globally routable because the node
    can be located behind\n   one or more NATs.\n   Mapped Address/Port: A global
    IPv4 address and a UDP port that\n   results from the translation of a node's
    own local address/port by\n   one or more NATs.  The node learns these values
    through the Teredo\n   protocol as specified in [RFC4380].  For symmetric NATs,
    the mapped\n   address/port can be different for every peer with which a node
    tries\n   to communicate.\n   Network Address Translation (NAT): The process of
    converting between\n   IP addresses used within an intranet or other private network
    and\n   Internet IP addresses.\n   Nonce: A time-variant random value used in
    the connection setup phase\n   to prevent message replay and other types of attacks.\n
    \  Peer: A Teredo client with which another Teredo client needs to\n   communicate.\n
    \  Port-Preserving NAT: A NAT that translates a local address/port to a\n   mapped
    address/port such that the mapped port has the same value as\n   the local port,
    as long as that same mapped address/port has not\n   already been used for a different
    local address/port.\n   Port-Restricted NAT: A restricted NAT that accepts packets
    from an\n   external host's IP address X and port Y only if the internal host
    has\n   sent a packet destined to IP address X and port Y.  In the\n   terminology
    of [RFC4787], this is a NAT with Endpoint-Independent\n   Mapping and Address
    and Port-Dependent Filtering.\n   Port-Symmetric NAT: A symmetric NAT that has
    only a single external\n   IP address and hence only assigns different ports when
    communicating\n   with different external hosts.\n   Private Address: An IPv4
    address that is not globally routable but is\n   part of the private address space
    specified in Section 3 of\n   [RFC1918].\n   Public Address: An external global
    address used by a NAT.\n   Restricted NAT: A NAT where all requests from the same
    internal IP\n   address and port are mapped to the same external IP address and
    port.\n   Unlike the cone NAT, an external host can send packets to an internal\n
    \  host (by sending a packet to the external mapped address and port)\n   only
    if the internal host has first sent a packet to the external\n   host.  There
    are two kinds of restricted NATs: address-restricted\n   NATs and port-restricted
    NATs.\n   Sequential Port-Symmetric NAT: A port-symmetric NAT that allocates\n
    \  external ports sequentially for every {internal IP address and port,\n   destination
    IP address and port} tuple.  The delta used in the\n   sequential assignment is
    typically 1 or 2 for most such NATs.\n   Symmetric NAT: A NAT where all requests
    from the same internal IP\n   address and port and to the same destination IP
    address and port are\n   mapped to the same external IP address and port.  Requests
    from the\n   same internal IP address and port to a different destination IP\n
    \  address and port may be mapped to a different external IP address and\n   port.
    \ Furthermore, a symmetric NAT accepts packets received from an\n   external host's
    IP address X and port Y only if some internal host\n   has sent packets to IP
    address X and port Y.  In the terminology of\n   [RFC4787], this is a NAT with
    a mapping behavior of either Address-\n   Dependent Mapping or Address- and Port-Dependent
    Mapping, and a\n   filtering behavior of either Address-Dependent Filtering or
    Address-\n   and Port-Dependent Filtering.\n   Teredo Bubble: A Teredo control
    message (specified in Section 2.8 of\n   [RFC4380]) that is used to create a mapping
    in a NAT.  There are two\n   types of Teredo bubbles: direct bubbles and indirect
    bubbles.\n   Teredo Client: A node that has access to the IPv4 Internet and wants\n
    \  to gain access to the IPv6 Internet using the Teredo protocol.\n   Teredo IPv6
    Address: An IPv6 address of a Teredo client, as specified\n   in Section 2.14
    of [RFC4380].\n   Teredo Secondary Server Address: A secondary IPv4 address of
    a Teredo\n   server with which a Teredo client is configured, as specified in\n
    \  Section 5.2 of [RFC4380].\n   Teredo Server: A node that has a globally routable
    address on the\n   IPv4 Internet, and is used as a helper to provide IPv6 connectivity\n
    \  to Teredo clients.\n   Teredo Server Address: A (primary) IPv4 address of a
    Teredo server\n   with which a Teredo client is configured, as specified in Section
    5.2\n   of [RFC4380].\n   UPnP-enabled NAT: A NAT that has the UPnP device control
    protocol\n   enabled, as specified in [UPNPWANIP].  (Note that today, by default,\n
    \  most UPnP-capable NATs have the UPnP device control protocol\n   disabled.)\n
    \  The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n
    \  \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n
    \  document are to be interpreted as described in RFC 2119 [RFC2119].\n"
  title: 2.  Terminology
- contents:
  - "3.  Overview\n   The Teredo protocol (as specified in [RFC4380]) enables nodes
    located\n   behind one or more IPv4 NATs to obtain IPv6 connectivity by tunneling\n
    \  packets over UDP.\n   When a node behind a NAT needs to communicate with a
    peer (i.e.,\n   another node) that is behind a NAT, there are four sets of IPv4\n
    \  address/port pairs of interest:\n   o  The node's own IPv4 address/port.\n
    \  o  The external IPv4 address/port to which the node's NAT translates.\n   o
    \ The peer's own IPv4 address/port.\n   o  The external IPv4 address/port to which
    the peer's NAT translates.\n   When the node sends a packet to a peer, the node
    needs to send it\n   from the node's own IPv4 address/port, destined to the peer's\n
    \  external IPv4 address/port.  By the time it arrives at the peer\n   (i.e.,
    after passing through both NATs), the peer will see the same\n   packet as coming
    from the node's external IPv4 address/port, destined\n   to the peer's own IPv4
    address/port.\n   In this document, the term local address/port refers to a Teredo\n
    \  client's own IPv4 address/port, and mapped address/port refers to the\n   external
    IPv4 address/port to which its NAT translates the local\n   address/port.  That
    is, the mapped address/port is what the IPv4\n   Internet sees the Teredo client
    as.\n   A Teredo client running on a node communicates with a Teredo server\n
    \  to discover its mapped address/port.  The mapped address/port, along\n   with
    the Teredo server address, is used to generate an IPv6 address\n   known as a
    Teredo IPv6 address.  This allows any peer that gets the\n   node's IPv6 address
    to easily determine the external IPv4 address/\n   port to which to send IPv6
    packets encapsulated in IPv4 UDP messages.\n   This document specifies extensions
    to the Teredo protocol.  These\n   Teredo extensions are independent of each other
    and can be\n   implemented in isolation, except that the UPnP-Symmetric NAT\n
    \  Extension and the Port-Preserving Symmetric NAT Extension both\n   require
    the Symmetric NAT Support Extension to be implemented.  An\n   implementation
    of this specification can support any combination of\n   the Teredo extensions,
    subject to the above-mentioned restriction.\n   The following matrix outlines
    the connectivity improvements of some\n   of the extensions outlined in this document.\n
    \                                Destination NAT\n          |      |      |      |
    \     |      | Port-|      |      |\n          |      |      |      | UPnP | UPnP
    | pres.| Seq. |      |\n          |      | Addr.| Port | Port | Port | Port-|
    Port-| Port-| Addr\n"
  - 'Source NAT| Cone | rest.| rest.| rest.| symm.| symm.| symm.| symm.| symm

    '
  - '----------+------+------+------+------+------+------+------+------+-----

    '
  - 'Cone      |  Yes |  Yes |  Yes |  Yes |  SNS |  SNS |  SNS |  SNS |  SNS

    '
  - '----------+------+------+------+------+------+------+------+------+-----

    '
  - 'Address   |  Yes |  Yes |  Yes |  Yes |  SNS |  SNS |  SNS |  SNS |  No

    '
  - 'restricted|      |      |      |      |      |      |      |      |

    '
  - '----------+------+------+------+------+------+------+------+------+-----

    '
  - 'Port      |  Yes |  Yes |  Yes |  Yes |  No  | SNS+ | SNS+ |  No  |  No

    '
  - 'restricted|      |      |      |      |      |  PP  |  SS  |      |

    '
  - '----------+------+------+------+------+------+------+------+------+-----

    '
  - 'UPnP Port-|  Yes |  Yes |  Yes |  Yes | SNS+ |  No  |  No  |  No  |  No

    '
  - 'restricted|      |      |      |      | UPnP |      |      |      |

    '
  - '----------+------+------+------+------+------+------+------+------+-----

    '
  - 'UPnP Port |  SNS |  SNS |  No  | SNS+ | SNS+ |  No  |  No  |  No  |  No

    '
  - 'symmetric |      |      |      | UPnP | UPnP |      |      |      |

    '
  - '----------+------+------+------+------+------+------+------+------+-----

    '
  - 'Port-     |      |      |  SNS |      |      |  SNS |  SNS |      |

    '
  - 'preserving|  SNS |  SNS |   +  |  No  |  No  |   +  |   +  |  No  |  No

    '
  - 'Port-     |      |      |  PP  |      |      |  PP  |  SS  |      |

    '
  - 'symmetric |      |      |      |      |      |      |      |      |

    '
  - '----------+------+------+------+------+------+------+------+------+-----

    '
  - 'Sequential|      |      |  SNS |      |      |      |      |      |

    '
  - 'Port-     |  SNS |  SNS |   +  |  No  |  No  |  No  |  No  |  No  |  No

    '
  - 'symmetric |      |      |  SS  |      |      |      |      |      |

    '
  - '----------+------+------+------+------+------+------+------+------+-----

    '
  - 'Port-     |  SNS |  SNS |  No  |  No  |  No  |  No  |  No  |  No  |  No

    '
  - 'symmetric |      |      |      |      |      |      |      |      |

    '
  - '----------+------+------+------+------+------+------+------+------+-----

    '
  - 'Address-  |  SNS |  No  |  No  |  No  |  No  |  No  |  No  |  No  |  No

    '
  - 'symmetric |      |      |      |      |      |      |      |      |

    '
  - "----------+------+------+------+------+------+------+------+------+-----\n     Yes
    = Supported by [RFC4380].\n     SNS = Supported with the Symmetric NAT Support
    Extension.\n"
  - "SNS+UPnP = Supported with the Symmetric NAT Support Extension and UPnP\n           Symmetric
    NAT Extension.\n  SNS+PP = Supported with the Symmetric NAT Support Extension
    and Port-\n           Preserving Symmetric NAT Extension.\n  SNS+SS = Supported
    with the Symmetric NAT Support Extension and\n           Sequential Port-Symmetric
    NAT Extension.\n      No = No connectivity.\n    Figure 1: Matrix of Connectivity
    Improvements for Teredo Extensions\n   Note that as with [RFC4380], if the qualification
    process is not\n   successful, Teredo will not be configured with an IPv6 address,
    and\n   connectivity will function as if Teredo were not present.  Similarly,\n
    \  for any combination of NAT types that are not supported by Teredo and\n   the
    extensions defined herein, the connectivity tests between a\n   client and a peer
    will fail within a finite period of time, allowing\n   the client to handle this
    case as with any other type of unreachable\n   destination address (e.g., by trying
    another address of the\n   destination such as a native IPv4 address).\n"
  title: 3.  Overview
- contents:
  - "3.1.  Symmetric NAT Support Extension\n   The qualification procedure (as specified
    in Section 5.2.1 of\n   [RFC4380]) is a process that allows a Teredo client to
    determine the\n   type of NAT that it is behind, in addition to its mapped address/port\n
    \  as seen by its Teredo server.  However, Section 5.2.1 of [RFC4380]\n   suggests
    that if the client learns it is behind a symmetric NAT, the\n   Teredo client
    should go into an \"offline state\" where it is not able\n   to use Teredo.  The
    primary reason for doing so is that it is not\n   easy for Teredo clients to connect
    to each other if either or both of\n   them are positioned behind a symmetric
    NAT.  Because of the way a\n   symmetric NAT works, a peer sees a different mapped
    address/port in\n   the IPv4/UDP headers of packets coming from a Teredo client
    than the\n   node's Teredo server sees (and hence appears in the node's Teredo\n
    \  IPv6 address).  Consequently, a symmetric NAT does not allow incoming\n   packets
    from a peer that are addressed to the mapped address/port\n   embedded in the
    node's Teredo IPv6 address.  Thus, the incoming\n   packets are dropped and communication
    with Teredo clients behind\n   symmetric NATs is not established.\n   With the
    Symmetric NAT Support Extension, Teredo clients begin to use\n   Teredo even after
    they detect that they are positioned behind a\n   symmetric NAT.\n   Consider
    the topology shown in Figure 2.  Teredo Client B uses Teredo\n   Server 2 to learn
    that its mapped address/port is 192.0.2.10:8192,\n   and constructs a Teredo IPv6
    address, as specified in Section 4 of\n   [RFC4380].  Hence, c633:6476 is the
    hexadecimal value of the address\n   of Teredo Server 2 (198.51.100.118), the
    mapped port is exclusive-\n   OR'ed with 0xffff to form dfff, and the Mapped Address
    is exclusive-\n   OR'ed with 0xffffffff to form 3fff:fdf5.\n   Teredo Client A
    uses Teredo Server 1 to learn that its mapped\n   address/port is 192.0.2.1:4096
    and, with this extension, constructs a\n   Teredo IPv6 address (as specified in
    Section 4 of [RFC4380]) even\n   though it learns that it is behind a symmetric
    NAT.  Hence, cb00:7178\n   is the hexadecimal value of the address of Teredo Server
    1\n   (203.0.113.120), the mapped port is exclusive-OR'ed with 0xffff to\n   form
    efff, and the Mapped Address is exclusive-OR'ed with 0xffffffff\n   to form 3fff:fdfe.\n
    \  The Symmetric NAT Support Extension enables a Teredo client\n   positioned
    behind a symmetric NAT to communicate with Teredo peers\n   positioned behind
    a cone or address-restricted NATs as follows,\n   depending on what side initiates
    the communication.\n               --------------------------------------------\n
    \             /                                            \\\n             <
    \              IPv6 Internet                  >\n              \\                                            /\n
    \              -|----------------------------------------|-\n                |
    \                                       |\n          +----------+                             +----------+\n
    \         |  Teredo  |                             |  Teredo  |\n          | Server
    1 |                             | Server 2 |\n          +----------+                             +----------+\n
    \  203.0.113.120|                          198.51.100.118|\n               -|----------------------------------------|-\n
    \             /                                            \\\n             <
    \              IPv4 Internet                  >\n              \\                                            /\n
    \              -|----------------------------------------|-\n       192.0.2.1|
    \                             192.0.2.10|\n   UDP port 4096|                           UDP
    port 8192|\n           +---------+                             +----------+\n
    \          |Symmetric|                             |Other type|\n           |
    \  NAT   |                             |  of NAT  |\n           +---------+                             +----------+\n
    \               |                                        |\n       +-----------------+
    \                     +-----------------+\n       | Teredo client A |                      |
    Teredo client B |\n       +-----------------+                      +-----------------+\n"
  - "2001:0:cb00:7178:0:efff:3fff:fdfe      2001:0:c633:6476:0:dfff:3fff:fdf5\n          Teredo
    Address                           Teredo Address\n                      Figure
    2: Symmetric NAT Example\n   In the first case, assume that a Teredo Client B
    (B) positioned\n   behind a cone or address-restricted NATs initiates communication
    with\n   Teredo Client A (A) positioned behind a symmetric NAT.  B sends an\n
    \  indirect bubble via A's server (Teredo Server 1) to A, and A responds\n   with
    a direct bubble.  This direct bubble reaches B, because it is\n   positioned behind
    a cone or address-restricted NAT.  However, the\n   mapped address/port in the
    IPv4/UDP headers of the direct bubble are\n   different from the mapped address/port
    embedded in A's Teredo IPv6\n   address.  B therefore remembers the mapped address/port
    of the direct\n   bubble and uses them for future communication with A, and thus\n
    \  communication is established.\n   In the second case, assume that A, positioned
    behind a symmetric NAT,\n   initiates communication with B, positioned behind
    a cone or address-\n   restricted NAT.  A sends an indirect bubble to B via B's
    server\n   (Teredo Server 2), and B responds with a direct bubble.  This direct\n
    \  bubble is dropped by A's symmetric NAT because the direct bubble is\n   addressed
    to the mapped address/port embedded in A's Teredo IPv6\n   address.  However,
    communication can be established by having B\n   respond with an indirect bubble
    via A's server (Teredo Server 1).\n   Now the scenario is similar to the first
    case and communication will\n   be established.\n"
  title: 3.1.  Symmetric NAT Support Extension
- contents:
  - "3.2.  UPnP-Enabled Symmetric NAT Extension\n   The UPnP-enabled Symmetric NAT
    Extension is dependent on the\n   Symmetric NAT Support Extension.  Only if Teredo
    clients have been\n   enabled to acquire a Teredo IPv6 address in spite of being
    behind a\n   symmetric NAT will this extension help in traversing UPnP-enabled\n
    \  Symmetric NATs.\n   The Symmetric NAT Support Extension enables communication
    between\n   Teredo clients behind symmetric NATs with Teredo clients behind cone\n
    \  NATs or address-restricted NATs.  However, clients behind symmetric\n   NATs
    can still not communicate with clients behind port-restricted\n   NATs or symmetric
    NATs.\n   Referring again to Figure 2 (see Section 3.1), assume that Teredo\n
    \  Client A is positioned behind a symmetric NAT and initiates\n   communication
    with Client B, which is positioned behind a port-\n   restricted NAT.  Client
    A sends a direct bubble and an indirect\n   bubble to Client B via Client B's
    server (Teredo Server 2).  As per\n   the characteristics of the symmetric NAT,
    the IPv4 source of the\n   direct bubble contains a different mapped address and/or
    port than\n   the one embedded in the Teredo server.  This direct bubble is dropped\n
    \  because Client B's NAT does not have state to let it pass through,\n   and
    Client B does not learn the mapped address/port used in the IPv4/\n   UDP headers.
    \ In response to the indirect bubble from Client A,\n   Client B sends a direct
    bubble destined to the mapped address/port\n   embedded in Client A's Teredo IPv6
    address.  This direct bubble is\n   dropped because Client A's NAT does not have
    state to accept packets\n   destined to that mapped address/port.  The direct
    bubble does,\n   however, cause Client B's NAT to set up outgoing state for the
    mapped\n   address/port embedded in Client A's Teredo IPv6 address.\n   As described
    in Section 3.1, Client B also sends an indirect bubble\n   that elicits a direct
    bubble from Client A.  Unlike the case in\n   Section 3.1, however, the direct
    bubble from Client A is dropped as\n   Client B's NAT does not have state for
    the mapped address/port that\n   Client A's NAT uses.  Note that Client B's NAT
    is port-restricted and\n   hence requires both the mapped address and port to
    be the same as in\n   its outgoing state, whereas in Section 3.1, Client A's NAT
    was a cone\n   or address-restricted NAT which only required the mapped address
    (but\n   not port) to be the same.  Thus, communication between Client A and\n
    \  Client B fails.  If Client B were behind a symmetric NAT, the problem\n   is
    further complicated by Client B's NAT using a different outgoing\n   mapped address/port
    than the one embedded in Client B's Teredo IPv6\n   address.\n   If a Teredo client
    is separated from the global Internet by a single\n   UPnP-enabled symmetric or
    port-restricted NAT, it can communicate\n   with other Teredo clients that are
    positioned behind a single UPnP-\n   enabled symmetric or port-restricted NAT
    as follows.\n   Teredo clients, before communicating with the Teredo server during\n
    \  the qualification procedure, use UPnP to reserve a translation from a\n   local
    address/port to a mapped-address/port.  Therefore, during the\n   qualification
    procedure, the Teredo server reflects back the reserved\n   mapped address/port,
    which then is included in the Teredo IPv6\n   address.  The mapping created by
    UPnP allows the NAT to forward\n   packets destined for the mapped address/port
    to the local address/\n   port, independent of the source of the packets.  It
    typically does\n   not, however, cause packets sourced from the local address/port
    to be\n   translated to have the mapped address/port as the external source and\n
    \  hence continues to function as a symmetric NAT in this respect.\n   Thus, a
    Teredo client, positioned behind a UPnP-enabled symmetric\n   NAT, can receive
    a direct bubble sent by any Teredo peer.  The Teredo\n   client compares the peer's
    mapped address/port as seen in the IPv4/\n   UDP headers with the mapped address/port
    in the peer's Teredo IPv6\n   address.  If the two mappings are different, the
    packet was sent by\n   another Teredo client positioned behind a symmetric NAT.
    \ The\n   Symmetric NAT Support Extension suggested that the Teredo client use\n
    \  the peer's mapped address/port seen in the IPv4/UDP headers for\n   future
    communication.  However, because symmetric NAT-to-symmetric\n   NAT communication
    would not have been possible anyway, the Teredo\n   client sends back a direct
    bubble to the mapped port/address embedded\n   in the peer's Teredo IPv6 address.
    \ If the peer is also situated\n   behind a UPnP-enabled NAT, the direct bubble
    will make it through and\n   communication will be established.\n   Even though
    communication is established between the two Teredo IPv6\n   addresses, the mappings
    will be asymmetric in the two directions of\n   data transfer.  Specifically,
    incoming packets will be destined to\n   the reserved mapped address/port that
    is embedded in the Teredo IPv6\n   address.  Outgoing packets will instead appear
    to come from a\n   different mapped address/port due to the symmetric NAT behavior.\n"
  title: 3.2.  UPnP-Enabled Symmetric NAT Extension
- contents:
  - "3.3.  Port-Preserving Symmetric NAT Extension\n   The Port-Preserving Symmetric
    NAT Extension is dependent on the\n   Symmetric NAT Support Extension (Section
    3.1).  Only if Teredo\n   clients have been enabled to acquire a Teredo IPv6 address
    in spite\n   of being behind a symmetric NAT will this extension help in\n   traversing
    port-preserving symmetric NATs.\n   The Symmetric NAT Support Extension enables
    communication between\n   Teredo clients behind symmetric NATs with Teredo clients
    behind cone\n   NATs or address-restricted NATs.  However, clients behind symmetric\n
    \  NATs can still not communicate with clients behind port-restricted or\n   symmetric
    NATs, as described in Section 3.2.  Note that the Port-\n   Preserving Symmetric
    NAT Extension described here is independent of\n   the UPnP-enabled Symmetric
    NAT Extension, described in Section 3.2.\n   If a Teredo client is positioned
    behind a port-preserving symmetric\n   NAT, the client can communicate with other
    Teredo clients positioned\n   behind a port-restricted NAT or a port-preserving
    symmetric NAT as\n   follows.\n   Teredo clients compare the mapped port learned
    during the\n   qualification procedure with their local port to determine if they\n
    \  are positioned behind a port-preserving NAT.  If both the mapped port\n   and
    the local port have the same value, the Teredo client is\n   positioned behind
    a port-preserving NAT.  At the end of the\n   qualification procedure, the Teredo
    client also knows if it is\n   positioned behind a symmetric NAT, as described
    in Section 3.1.\n   Teredo clients positioned behind port-preserving symmetric
    NATs can\n   also listen on randomly chosen local ports.  If the randomly chosen\n
    \  local port has not been used by the symmetric NAT as a mapped port in\n   a
    prior port-mapping, the NAT uses the same port number as the mapped\n   port.
    \ Thus, the challenge is to get the first direct bubble sent out\n   from the
    random port to be destined to a valid destination address\n   and port.  When
    the mapped address/port is embedded in the\n   destination's Teredo IPv6 address,
    this is easy.\n   The communication setup is more complicated when the destination\n
    \  Teredo client is also positioned behind a port-preserving symmetric\n   NAT.
    \ In such a case, both Teredo clients need to send their first\n   direct bubbles
    to the correct destination mapped address/port.  Thus,\n   the protocol messages,
    which communicate one Teredo client's random\n   port number to the other Teredo
    client, must be exchanged indirectly\n   (via Teredo servers).  When one Teredo
    client has access to the other\n   Teredo client's random port number, it can
    send a direct bubble\n   destined to the mapped address embedded in the destination's
    Teredo\n   IPv6 address, and the mapped port can be the same as the\n   destination's
    random port number.  If both NATs are port-preserving,\n   port-preserved mappings
    are created on both NATs and the second\n   direct bubble succeeds in reaching
    the destination.\n"
  title: 3.3.  Port-Preserving Symmetric NAT Extension
- contents:
  - "3.4.  Sequential Port-Symmetric NAT Extension\n   The Sequential Port-Symmetric
    NAT Extension is dependent on the\n   Symmetric NAT Support Extension (Section
    3.1).  This extension helps\n   in traversing a sequential port-symmetric NAT
    only if Teredo clients\n   are enabled to acquire a Teredo IPv6 address even when
    behind a\n   symmetric NAT.\n   When the Sequential Port-Symmetric NAT Extension
    is used, if a Teredo\n   client is positioned behind a sequential port-symmetric
    NAT, the\n   client can communicate with other Teredo clients that are positioned\n
    \  behind a port-restricted NAT as follows.\n   During qualification, if the client
    discovers it is behind a\n   symmetric NAT that is not port-preserving, the client
    assumes by\n   default that it is behind a sequential port-symmetric NAT.  This\n
    \  assumption is proactive for the following reasons:\n   o  There is no perfect
    method of discovering whether the client is\n      behind a sequential port-symmetric
    NAT.\n   o  These kinds of NATs are notorious for changing their behavior.  At\n
    \     times, they could be sequential port-symmetric and at other times\n      not.\n
    \  o  There is no other solution for symmetric NAT traversal so this is\n      a
    last resort.\n   Teredo clients positioned behind sequential port-symmetric NATs
    can\n   also listen on a randomly chosen local port when communicating with a\n
    \  peer.  To predict the external port being used for a given peer, the\n   client
    sends three packets:\n   o  Packet 1 is a router solicitation (as specified in
    Section 5.2.1\n      of [RFC4380]) sent to the Teredo server address.\n   o  Packet
    2 is a direct bubble sent to the peer.\n   o  Packet 3 is a router solicitation
    sent to the secondary Teredo\n      server address.\n   As part of the normal
    Teredo protocol, the Teredo server responds to\n   packets 1 and 3.  Based on
    the information in the responses, the\n   client now knows that Packet 1 was seen
    as coming from one external\n   port, and Packet 3 was seen as coming from another
    external port.\n   Assuming the NAT is a sequential port-symmetric NAT, the external\n
    \  port for Packet 2 is estimated (or predicted) to be midway between\n   the
    external ports for Packets 1 and 3.  Note that because other\n   applications
    might also have been using the NAT between packets 1 and\n   3, the actual port
    might not be exactly the midpoint.\n   The Teredo client then communicates the
    predicted port to its peer,\n   which sends a direct bubble to the communicated
    port.  If the\n   communicated port is indeed the external port for Packet 2,
    the\n   direct bubble will reach the Teredo client.\n"
  title: 3.4.  Sequential Port-Symmetric NAT Extension
- contents:
  - "3.5.  Hairpinning Extension\n   Hairpinning support in a NAT routes packets that
    are sent from a\n   private (local) address destined to a public (mapped) address
    of the\n   NAT, back to another private (local) destination address behind the\n
    \  same NAT.  If hairpinning support is not available in a NAT, two\n   Teredo
    clients behind the same NAT are not able to communicate with\n   each other, as
    specified in Section 8.3 of [RFC4380].\n   The Hairpinning Extension enables two
    clients behind the same NAT to\n   talk to each other when the NAT does not support
    hairpinning.  This\n   process is illustrated in the following diagram.\n               --------------------------------------------\n
    \             /                                            \\\n             <
    \              IPv6 Internet                  >\n              \\                                            /\n
    \              --------------------|-----------------------\n                                   |\n
    \                            +----------+\n                             |  Teredo
    \ |\n                             |  Server  |\n                             +----------+\n
    \                     203.0.113.120|\n               --------------------|-----------------------\n
    \             /                                            \\\n             <
    \              IPv4 Internet                  >\n              \\                                            /\n
    \              --------------------|-----------------------\n                     198.51.100.118|\n
    \                          NAT +-------+\n                       without |  NAT
    \ |\n                   hairpinning |   E   |\n                       support
    +-------+\n                                   |\n                +------------------+--------------------+\n
    \    192.168.1.0|                            192.168.1.1|\n   UDP port 4095|                          UDP
    port 4096|\n           +---------+                            +----------+\n           |
    \  NAT   |                            |    NAT   |\n           |    F    |                            |
    \    G    |\n           +---------+                            +----------+\n
    \               |                                       |\n       +-----------------+
    \                    +-----------------+\n       | Teredo client A |                     |
    Teredo client B |\n       +-----------------+                     +-----------------+\n"
  - "2001:0:cb00:7178:0:f000:39cc:9b89      2001:0:cb00:7178:0:efff:39cc:9b89\n          Teredo
    Address                          Teredo Address\n                       Figure
    3: Hairpinning Example\n   The Teredo Client A (A) includes, as part of its indirect
    bubble sent\n   to Teredo Client B (B), its local address/port.  B, upon receiving\n
    \  the indirect bubble, tries to establish communication by sending\n   direct
    bubbles to the mapped address/port of A, and also to the local\n   address/port
    of B.\n   If a Teredo client is part of a multi-NAT hierarchy and the NAT to\n
    \  which the Teredo client is connected supports the UPnP protocol (as\n   specified
    in [UPNPWANIP]), the Teredo client can use UPnP to\n   determine the mapped address/port
    assigned to it by the NAT.  This\n   information can be included along with the
    local address/port when\n   sending the indirect bubble.  The destination Teredo
    client now tries\n   to establish a connection by sending direct bubbles to the
    mapped\n   address/port in the Teredo IPv6 address, to the local address/port\n
    \  included in the bubble, and also to the mapped address/port included\n   in
    the bubble.\n   Note that UPnP support is only required if the Teredo clients
    are\n   behind different NATs in a multi-NAT hierarchy.  Without UPnP\n   support,
    the Hairpinning Extension still allows two hosts behind the\n   same non-hairpinning
    NAT to communicate using their Teredo IPv6\n   addresses.\n"
  title: 3.5.  Hairpinning Extension
- contents:
  - "3.6.  Server Load Reduction Extension\n   If communication between a Teredo client
    and a Teredo peer was\n   successfully established but at a later stage was silent
    for a while,\n   for efficiency, it is best to refresh the mapping state in the
    NATs\n   that are positioned between them.  To refresh the communication\n   between
    itself and a Teredo peer, a Teredo client needs to solicit a\n   direct bubble
    response from the Teredo peer.  An indirect bubble is\n   sent to solicit a direct
    bubble response from a Teredo peer, as\n   specified in Section 5.2.4 of [RFC4380].
    \ However, these indirect\n   bubbles increase the load on the Teredo server.\n
    \  The Server Load Reduction Extension allows Teredo clients to send\n   direct
    bubbles most of the time instead of sending indirect bubbles\n   all of the time
    in the following way:\n   1.  When a Teredo client tries to refresh its communication
    with a\n       Teredo peer, it uses a direct bubble instead of an indirect\n       bubble.
    \ However, because direct bubbles do not normally solicit\n       a response,
    the direct bubble format is extended to be able to\n       solicit a response.\n
    \  2.  When a Teredo client receives a direct bubble that is soliciting\n       a
    response, the Teredo client responds with a direct bubble.\n   3.  If attempts
    to re-establish communication with the help of direct\n       bubbles fail, the
    Teredo client starts over the process of\n       establishing communication with
    the Teredo peer, as specified in\n       Section 5.2.4 of [RFC4380].\n"
  title: 3.6.  Server Load Reduction Extension
- contents:
  - "4.  Message Syntax\n   All Teredo messages are transported over the User Datagram
    Protocol\n   (UDP), as specified in Section 3 of [RFC4380].\n   In addition, Section
    5.2.3 of [RFC4380] states:\n      An IPv6 packet is deemed valid if it conforms
    to [RFC2460]: the\n      protocol identifier should indicate an IPv6 packet and
    the payload\n      length should be consistent with the length of the UDP datagram
    in\n      which the packet is encapsulated.  In addition, the client should\n
    \     check that the IPv6 destination address correspond [sic] to its\n      own
    Teredo address.\n   This document updates the word \"consistent\" above as follows.
    \ The\n   IPv6 payload length is \"consistent\" with the length of the UDP\n   datagram
    if the IPv6 packet length (i.e., the Payload Length value in\n   the IPv6 header
    plus the IPv6 header size) is less than or equal to\n   the UDP payload length
    (i.e., the Length value in the UDP header\n   minus the UDP header size).  This
    allows the use of trailers after\n   the IPv6 packet, which are defined in the
    following sections.\n"
  title: 4.  Message Syntax
- contents:
  - "4.1.  Trailers\n   Teredo packets can carry a variable number of type-length-value
    (TLV)\n   encoded trailers, of the following format (intended to be similar to\n
    \  the use of IPv6 options defined in [RFC2460] section 4.2):\n                        1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |     Type      |    Length     |        Value (variable)       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  Type (1 byte): 8-bit identifier of the type of trailer.\n   Length (1 byte):
    8-bit unsigned integer.  Length of the Value field\n   of this trailer, in octets.\n
    \  Value (variable): Trailer-Type-specific data.\n   The trailer Type identifiers
    are internally encoded such that their\n   highest-order two bits specify the
    action that is to be taken if the\n   host does not recognize the trailer Type:\n
    \  00, 10, 11 -  skip over this trailer and continue processing the\n      packet.\n
    \  01 -  discard the packet.\n"
  title: 4.1.  Trailers
- contents:
  - "4.2.  Nonce Trailer\n   The Nonce Trailer is used by the Symmetric NAT Support
    Extension (and\n   therefore the UPnP-enabled Symmetric NAT Extension and Port-\n
    \  Preserving Symmetric NAT Extension also) and the Hairpinning\n   Extension.
    \ The Nonce Trailer can be present in both indirect and\n   direct bubbles.  The
    nonce in the Nonce Trailer helps authenticate a\n   Teredo client positioned behind
    a Symmetric NAT.\n                        1                   2                   3\n
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |     Type      |    Length     |             Nonce             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |              ...              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Type
    (1 byte): The Trailer Option type.  This field MUST be set to\n   0x01.\n   Length
    (1 byte): The length in bytes of the rest of the option.  This\n   field MUST
    be set to 0x04.\n   Nonce (4 bytes): The nonce value.\n"
  title: 4.2.  Nonce Trailer
- contents:
  - "4.3.  Alternate Address Trailer\n   The Alternate Address Trailer is used by
    the Hairpinning Extension.\n   The Alternate Address Trailer MUST NOT be present
    in any packets\n   other than indirect bubbles sent by a Teredo client.  The Alternate\n
    \  Address Trailer provides another Teredo client positioned behind the\n   same
    NAT with more address options that it can use to connect.\n                        1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |     Type      |    Length     |            Reserved           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                                                               |\n   |              Alternate
    Address/Port List (variable)           |\n   |                                                               |\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Type
    (1 byte): The Trailer Option type.  This field MUST be set to\n   0x03.\n   Length
    (1 byte): The length in bytes of the rest of the option.  The\n   value of this
    field MUST be in the range 8 to 26 (i.e., 2 bytes for\n   the Reserved field,
    and 6 bytes for each entry in the Alternate\n   Address/Port List).  This allows
    for a minimum of one address/port\n   mapping and a maximum of four address/port
    mappings to be advertised.\n   It SHOULD be at most 14 as a maximum of two address/port
    mappings can\n   be determined by Teredo: one local address/port and one obtained\n
    \  using UPnP.  Because the length of the alternate address/port is 6\n   bytes,
    the valid range of values is only 8, 14, 20, and 26.\n   Reserved (2 bytes): This
    field MUST be set to 0x0000 and ignored on\n   receipt.\n   Alternate Address/Port
    List (variable): An array of additional\n   address/port pairs that can be used
    by other Teredo clients to\n   communicate with the sender.  Each alternate address/port
    entry MUST\n   be formatted as follows:\n                        1                   2
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                      IPv4 Address                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |              Port             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   IPv4
    Address (4 bytes): An IPv4 address in network byte order.  This\n   field MUST
    contain a valid unicast address.\n   Port (2 bytes): A port number in network
    byte order.  This field MUST\n   NOT be zero.\n"
  title: 4.3.  Alternate Address Trailer
- contents:
  - "4.4.  Neighbor Discovery Option Trailer\n   The Neighbor Discovery Option Trailer
    is used by the Server Load\n   Reduction Extension because it allows direct bubbles
    to encode an\n   IPv6 Neighbor Solicitation (Section 4.3 of [RFC4861]), in addition
    to\n   an IPv6 Neighbor Advertisement (Section 4.4 of [RFC4861]).  This\n   allows
    packets to be sent without having to relay them through a\n   Teredo server.  The
    Neighbor Discovery Option Trailer allows the\n   receiver to differentiate between
    a direct bubble that is soliciting\n   a response versus a regular direct bubble.
    \ This allows Teredo\n   clients to use direct bubbles to refresh inactive connections
    instead\n   of using indirect bubbles.\n                        1                   2
    \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |      Type     |     Length    | DiscoveryType |   Reserved    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |              ...              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Type
    (1 byte): The Trailer Option type.  This field MUST be set to\n   0x04.\n   Length
    (1 byte): The length in bytes of the rest of the option.  This\n   field MUST
    be set to 0x04.\n   DiscoveryType (1 byte): This field MUST be set to one of the\n
    \  following values:\n      TeredoDiscoverySolicitation (0x00): The receiver is
    requested to\n      respond with a direct bubble of DiscoveryType\n      TeredoDiscoveryAdvertisement.\n
    \     TeredoDiscoveryAdvertisement (0x01): The direct bubble is in\n      response
    to a direct bubble or an indirect bubbles containing\n      DiscoveryType TeredoDiscoverySolicitation.\n
    \  Reserved (3 bytes): This field MUST be set to 0x000000 on\n   transmission
    and ignored on receipt.\n"
  title: 4.4.  Neighbor Discovery Option Trailer
- contents:
  - "4.5.  Random Port Trailer\n   The Random Port Trailer is used by the Port-Preserving
    Symmetric NAT\n   Extension in both indirect and direct bubbles.\n                        1
    \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5
    6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |      Type     |     Length    |          Random Port          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  Type (1 byte): The Trailer Option type.  This field MUST be set to\n   0x05.\n
    \  Length (1 byte): The length in bytes of the rest of the option.  This\n   field
    MUST be set to 0x02.\n   Random Port (2 bytes): The external port that the sender
    predicts\n   that its NAT has assigned it for communication with the destination.\n
    \  This field MUST be specified in network byte order.\n"
  title: 4.5.  Random Port Trailer
- contents:
  - '5.  Protocol Details

    '
  title: 5.  Protocol Details
- contents:
  - "5.1.  Common Processing\n   The behavior in this section applies to multiple
    extensions.\n   Packets equivalent to those sent for a peer the first time a\n
    \  connection is being established MAY be generated at other\n   implementation-specific
    times.  (For example, an implementation might\n   choose to do so when its Neighbor
    Cache Entry for the peer is in the\n   PROBE state.)\n"
  title: 5.1.  Common Processing
- contents:
  - "5.1.1.  Refresh Interval\n   Section 5.2 of [RFC4380] states:\n      The client
    must regularly perform the maintenance procedure in\n      order to guarantee
    that the Teredo service port remains usable.\n      The need to use this procedure
    or not depends on the delay since\n      the last interaction with the Teredo
    server.  The refresh\n      procedure takes as a parameter the \"Teredo refresh
    interval\".\n      This parameter is initially set to 30 seconds; it can be updated\n
    \     as a result of the optional \"interval determination procedure\".\n      The
    randomized refresh interval is set to a value randomly chosen\n      between 75%
    and 100% of the refresh interval.\n   This requirement can be problematic when
    the client is behind a NAT\n   that expires state in less than 30 seconds.  The
    optional interval\n   determination procedure (Section 5.2.7 of [RFC4380]) also
    does not\n   provide for intervals under 30 seconds.  Hence, this document refines\n
    \  the behavior by saying the initial parameter SHOULD be configurable\n   and
    the default MUST be 30 seconds.  An implementation MAY set the\n   randomized
    refresh interval to a value randomly chosen within an\n   implementation-specific
    range.  Such a range MUST fall within 50% to\n   150% of the refresh interval.\n
    \  Section 5.2.5 of [RFC4380] states that:\n      At regular intervals, the client
    MUST check the \"date and time of\n      the last interaction with the Teredo
    server\" to ensure that at\n      least one packet has been received in the last
    Randomized Teredo\n      Refresh Interval.  If this is not the case, the client
    SHOULD send\n      a router solicitation message to the server, as specified in\n
    \     Section 5.2.1;\n   This document refines the behavior as follows.  A Teredo
    client MAY\n   choose to send additional router solicitation messages to the server\n
    \  at other implementation-specific times.  (For example, an\n   implementation
    might choose to do so when its Neighbor Cache Entry\n   for the router is in the
    PROBE state.)\n"
  title: 5.1.1.  Refresh Interval
- contents:
  - "5.1.2.  Trailer Processing\n   A Teredo client MUST process the sequence of trailers
    in the same\n   order as they appear in the packet.  If the Teredo client does
    not\n   recognize the trailer Type while processing the trailers in the\n   Teredo
    packet, the client MUST discard the packet if the highest-\n   order bits of the
    trailer Type contain 01, or else the Teredo client\n   MUST skip past the trailer.
    \ A Teredo client MUST stop processing the\n   trailers as soon as a malformed
    trailer appears in the sequence of\n   trailers in the packet.  A trailer is defined
    as malformed if it has\n   any of the following properties:\n   o  The length
    in bytes of the remainder of the UDP datagram is less\n      than 2 (the size
    of the Type and Length fields of a trailer).\n   o  The length in bytes of the
    remainder of the UDP datagram is less\n      than 2 + the value of the Length
    field of the trailer.\n"
  title: 5.1.2.  Trailer Processing
- contents:
  - "5.2.  Symmetric NAT Support Extension\n   Section 5.2.1 of [RFC4380] advises
    that no Teredo IPv6 address be\n   configured if the Teredo client is positioned
    behind a symmetric NAT.\n   For Teredo clients positioned behind symmetric NATs,
    the mapped\n   address/port used by its NAT when communicating with a Teredo peer
    is\n   different from the mapped address/port embedded in the Teredo\n   client's
    Teredo IPv6 address.  The Symmetric NAT Support Extension\n   provides a solution
    to this problem.\n   In addition, Section 5.2.9 of [RFC4380] specifies a direct
    IPv6\n   connectivity test to determine that the mapped address/port in the\n
    \  Teredo IPv6 address of a peer is not spoofed.  It does this through\n   the
    use of a nonce in ICMPv6 Echo Request and Response messages\n   (which are defined
    in Section 4 of [RFC4443]).  However, the direct\n   IPv6 connectivity test is
    limited only to communication between\n   Teredo IPv6 addresses and non-Teredo
    IPv6 addresses.  In the\n   following extension, we introduce the use of a nonce
    in direct and\n   indirect bubbles and provide a mechanism to verify that the
    mapped\n   address/port are not spoofed.\n   This extension is optional; an implementation
    SHOULD support it.\n"
  title: 5.2.  Symmetric NAT Support Extension
- contents:
  - "5.2.1.  Abstract Data Model\n   This section describes a conceptual model of
    possible data\n   organization that an implementation maintains to participate
    in this\n   protocol.  The described organization is provided to facilitate the\n
    \  explanation of how the protocol behaves.  This document does not\n   mandate
    that implementations adhere to this model as long as their\n   external behavior
    is consistent with that described in this document.\n   In addition to the state
    specified in Section 5.2 of [RFC4380], the\n   following are also required.\n
    \  Peer Entry: The following additional state is required on a per-peer\n   basis:\n
    \  o  Nonce Sent: The value of the nonce sent in the last indirect\n      bubble
    sent to the Teredo peer.\n   o  Nonce Received: The value of the nonce received
    in the last\n      indirect bubble received from the Teredo peer.\n"
  title: 5.2.1.  Abstract Data Model
- contents:
  - "5.2.2.  Timers\n   No timers are necessary other than those in [RFC4380].\n"
  title: 5.2.2.  Timers
- contents:
  - "5.2.3.  Initialization\n   No initialization is necessary other than that specified
    in\n   [RFC4380].\n"
  title: 5.2.3.  Initialization
- contents:
  - "5.2.4.  Message Processing\n   Except as specified in the following sections,
    the rules for message\n   processing are as specified in [RFC4380].\n"
  title: 5.2.4.  Message Processing
- contents:
  - "5.2.4.1.  Sending an Indirect Bubble\n   The rules for when indirect bubbles
    are sent to a Teredo peer are\n   specified in Section 5.2.6 of [RFC4380].  When
    a Teredo client sends\n   an indirect bubble, it MUST generate a random 4-byte
    value and\n   include it in the Nonce field of a Nonce Trailer (Section 4.2)\n
    \  appended to the indirect bubble, and also store it in the Nonce Sent\n   field
    of its Peer Entry for that Teredo peer.\n"
  title: 5.2.4.1.  Sending an Indirect Bubble
- contents:
  - "5.2.4.2.  Sending a Direct Bubble\n   The rules for when direct bubbles are sent
    to a Teredo peer are\n   specified in Section 5.2.6 of [RFC4380].  When a Teredo
    client sends\n   a direct bubble to a peer after receiving an indirect bubble
    with a\n   Nonce Trailer, it MUST include in the direct bubble a Nonce Trailer\n
    \  with the same nonce value.\n   If the Teredo client is about to send a direct
    bubble before it has\n   received an indirect bubble from the Teredo peer, the
    Teredo client\n   MUST NOT include a Nonce Trailer.\n"
  title: 5.2.4.2.  Sending a Direct Bubble
- contents:
  - "5.2.4.3.  Receiving an Indirect Bubble\n   The rules for processing an indirect
    bubble are specified in Section\n   5.2.3 of [RFC4380].  In addition, when a Teredo
    client receives an\n   indirect bubble containing a Nonce Trailer, the Teredo
    client MUST\n   store the nonce in the Nonce Received field of its Peer Entry
    for\n   that Teredo peer.  If an indirect bubble is received without a Nonce\n
    \  Trailer, and the Nonce Received field in the Peer Entry is non-zero,\n   the
    Nonce Received field SHOULD be set to zero.\n"
  title: 5.2.4.3.  Receiving an Indirect Bubble
- contents:
  - "5.2.4.4.  Receiving a Direct Bubble\n   If the mapped address/port of the direct
    bubble matches the mapped\n   address/port embedded in the source Teredo IPv6
    address, the direct\n   bubble MUST be accepted, as specified in Section 5.2.3
    of [RFC4380].\n   In addition, if the mapped address/port does not match the embedded\n
    \  address/port but the direct bubble contains a Nonce Trailer with a\n   nonce
    that matches the Nonce Sent field of the Teredo peer, the\n   direct bubble MUST
    be accepted.\n   If neither of the above conditions is true, the direct bubble
    MUST be\n   dropped.\n   If the direct bubble is accepted, the Teredo client MUST
    record the\n   mapped address/port from which the direct bubble is received in
    the\n   mapped address/port fields of the Teredo peer, as specified in\n   Section
    5.2 of [RFC4380].\n"
  title: 5.2.4.4.  Receiving a Direct Bubble
- contents:
  - "5.3.  UPnP-Enabled Symmetric NAT Extension\n   The UPnP-enabled Symmetric NAT
    Extension is optional; an\n   implementation SHOULD support it.  This extension
    has the Symmetric\n   NAT Support Extension (Section 5.2) as a dependency.  Any
    node that\n   implements this extension MUST also implement the Symmetric NAT\n
    \  Support Extension.\n"
  title: 5.3.  UPnP-Enabled Symmetric NAT Extension
- contents:
  - "5.3.1.  Abstract Data Model\n   This section describes a conceptual model of
    possible data\n   organization that an implementation maintains to participate
    in this\n   protocol.  The described organization is provided to facilitate the\n
    \  explanation of how the protocol behaves.  This document does not\n   mandate
    that implementations adhere to this model as long as their\n   external behavior
    is consistent with that described in this document.\n   This extension extends
    the abstract data model in Section 5.2.1 by\n   adding the following additional
    fields.\n   UPnP-Enabled NAT flag: This is a Boolean value, set to TRUE if the\n
    \  NAT positioned in front of the Teredo client is UPnP enabled.  The\n   default
    value of this flag is FALSE.\n   UPnP-Mapped Address/Port: The mapped address/port
    assigned via UPnP\n   to the Teredo client by the UPnP-enabled NAT behind which
    the Teredo\n   client is positioned.  Note that this field has a valid value only
    if\n   the NAT to which the Teredo client is connected is UPnP enabled.\n   Also,
    note that if the Teredo client is positioned behind a single\n   NAT only (as
    opposed to a series of nested NATs), this value is the\n   same as the mapped
    address/port embedded in its Teredo IPv6 address.\n   Symmetric NAT flag: This
    is a Boolean value, set to TRUE if the\n   Teredo client is positioned behind
    a symmetric NAT.\n   Peer Entry: The following state needs to be added on a per-peer\n
    \  basis:\n   o  Symmetric Peer flag: This is a Boolean value and is TRUE if the\n
    \     Teredo peer is positioned behind a symmetric NAT.\n   A Teredo client SHOULD
    also maintain the following state that is\n   persisted across reboots:\n   o
    \ Persisted UPnP-Mapped Port: The mapped port assigned via UPnP to\n      the
    Teredo client by the UPnP-enabled NAT behind which the Teredo\n      client is
    positioned.  Note that this value is the same as the\n      UPnP-Mapped Port value
    when both are non-zero.  The default value\n      is all zero bytes.\n"
  title: 5.3.1.  Abstract Data Model
- contents:
  - "5.3.2.  Timers\n   No timers are necessary other than those in [RFC4380].\n"
  title: 5.3.2.  Timers
- contents:
  - "5.3.3.  Initialization\n   Prior to beginning the qualification procedure, the
    Teredo client\n   MUST first perform the uninitialization procedure specified
    in\n   Section 5.3.5.1 if the Persisted UPnP-Mapped Port is supported and\n   non-zero.\n
    \  The Teredo client MUST then invoke the AddPortMapping function, as\n   specified
    in Section 2.4.16 of [UPNPWANIP], with the following\n   parameters:\n   o  NewRemoteHost:
    \"\" (empty string)\n   o  NewExternalPort: Local Port value\n   o  NewProtocol:
    UDP\n   o  NewInternalPort: Local Port value\n   o  NewInternalClient: Local Address
    value\n   o  NewEnabled: TRUE\n   o  NewPortMappingDescription: \"TEREDO\"\n   o
    \ NewLeaseDuration: 0\n   The successful completion of the AddPortMapping function
    indicates\n   that the NAT has created a port mapping from the external port of
    the\n   NAT to the internal port of the Teredo client node.  The parameters\n
    \  are specified so that any external host should be able to send\n   packets
    to the Teredo client by sending packets to the mapped\n   address/port.  If the
    AddPortMapping function fails, the Teredo\n   client MUST continue without using
    this extension.  Otherwise, it\n   MUST proceed as follows.\n   The Teredo client
    MUST set the UPnP-Mapped Port (and Persisted UPnP-\n   Mapped Port, if supported)
    to the Local Port value specified in\n   AddPortMapping.  The Teredo client MUST
    then call the\n   GetExternalIPAddress function specified in Section 2.4.18 of\n
    \  [UPNPWANIP].  If the GetExternalIPAddress function fails, the Teredo\n   client
    SHOULD perform the uninitialization procedure specified in\n   Section 5.3.5.1
    and continue without using this extension.  If the\n   GetExternalIPAddress function
    succeeds, the Teredo client MUST\n   proceed as follows.\n   The Teredo client
    MUST set the UPnP-Mapped Address to the address\n   returned from the GetExternalIPAddress
    function, and set the UPnP-\n   Enabled NAT flag to TRUE.\n   During the qualification
    procedure (as specified in Section 5.2.1 of\n   [RFC4380]) when the Teredo client
    receives a response from the\n   secondary Teredo server, the Teredo client MUST
    compare the mapped\n   address/port learned from the secondary Teredo server with
    the mapped\n   address/port associated with the Teredo server.  If either the
    mapped\n   address or the mapped port value is different, the Symmetric NAT flag\n
    \  MUST be set to TRUE.\n   After the qualification procedure, the mapped address/port
    learned\n   from the Teredo server MUST be compared to the UPnP-Mapped Address/\n
    \  Port.  If both are the same, the Teredo client is positioned behind a\n   single
    NAT and the UPnP-Mapped Address/Port MUST be zeroed out.\n"
  title: 5.3.3.  Initialization
- contents:
  - "5.3.4.  Message Processing\n   Except as specified in the following sections,
    the rules for message\n   processing are as specified in Section 5.2.3 of [RFC4380].\n"
  title: 5.3.4.  Message Processing
- contents:
  - "5.3.4.1.  Receiving a Direct Bubble\n   Except as indicated below, the rules
    for handling a direct bubble are\n   as specified in Section 5.2.4.4.\n   A Teredo
    client positioned behind a UPnP-enabled NAT (port-restricted\n   NAT as well as
    symmetric NAT) will receive all packets sent to the\n   mapped address/port embedded
    in its Teredo IPv6 address.  Thus, when\n   a Teredo client receives a direct
    bubble, it MUST compare the mapped\n   address/port from which the packet was
    received with the mapped\n   address/port embedded in the Teredo IPv6 address
    in the source\n   address field of the IPv6 header.  If the two are not the same,
    it\n   indicates that the Teredo peer is positioned behind a symmetric NAT,\n
    \  and it MUST set the Symmetric Peer flag in its Peer Entry.\n"
  title: 5.3.4.1.  Receiving a Direct Bubble
- contents:
  - "5.3.4.2.  Sending a Direct Bubble\n   The rules for sending a direct bubble are
    specified in Section 5.2.6\n   of [RFC4380] and Section 5.2.4.2 of this document.
    \ These rules are\n   further refined as follows.\n   If the Teredo client sending
    the direct bubble meets all of the\n   following criteria:\n   o  The Symmetric
    NAT flag is set to TRUE.\n   o  The UPnP-Enabled NAT flag is set to TRUE.\n   o
    \ The UPnP-Mapped Address/Port are set to zero.\n   o  The peer's Symmetric Peer
    flag is set to TRUE.\n   then the Teredo client MUST send the direct bubble to
    the mapped\n   address/port embedded in the peer's Teredo IPv6 address.\n   This
    is because Symmetric-to-Symmetric and Port-Restricted-to-\n   Symmetric NAT communication
    between the Teredo client and the peer\n   would have failed anyway.  However,
    by taking a chance that the peer\n   might also be positioned behind a UPnP-enabled
    NAT just like the\n   Teredo client itself, the Teredo client can try sending
    the direct\n   bubble to the mapped address/port in the peer's Teredo IPv6 address.\n
    \  If the packet does go through, communication is established.\n"
  title: 5.3.4.2.  Sending a Direct Bubble
- contents:
  - "5.3.4.3.  Sending a Data Packet\n   The rules for sending a data packet are specified
    in Section 5.2.4 of\n   [RFC4380].  These rules are further refined as follows.\n
    \  If the Teredo client sending the data packet meets all of the\n   following
    criteria:\n   o  The Symmetric NAT flag is set to TRUE.\n   o  The UPnP-Enabled
    NAT flag is set to TRUE.\n   o  The UPnP-Mapped Address/Port are set to zero.\n
    \  o  The peer's Symmetric Peer flag is set to TRUE.\n   then the Teredo client
    MUST send the data packet to the mapped\n   address/port embedded in the peer's
    Teredo IPv6 address.\n"
  title: 5.3.4.3.  Sending a Data Packet
- contents:
  - "5.3.5.  Shutdown\n   When Teredo client functionality is being shut down, uninitialization\n
    \  MUST be performed as specified in Section 5.3.5.1.\n"
  title: 5.3.5.  Shutdown
- contents:
  - "5.3.5.1.  Uninitialization\n   First determine the mapped port as follows.  If
    Persisted UPnP-Mapped\n   Port is supported, use it as the mapped port.  Otherwise,
    use the\n   UPnP-Mapped Port.\n   If the mapped port is non-zero, the Teredo client
    MUST call the\n   DeletePortMapping function, as specified in Section 2.4.17 of\n
    \  [UPNPWANIP], with the following parameters:\n   o  NewRemoteHost: \"\" (empty
    string)\n   o  NewExternalPort: the mapped port\n   o  NewProtocol: UDP\n"
  title: 5.3.5.1.  Uninitialization
- contents:
  - "5.4.  Port-Preserving Symmetric NAT Extension\n   The Port-Preserving Symmetric
    NAT Extension is optional; an\n   implementation SHOULD support it.  This extension
    has the Symmetric\n   NAT Support Extension (as specified in Section 5.2) as a
    dependency.\n   Any node that implements this extension MUST also implement the\n
    \  Symmetric NAT Support Extension.\n"
  title: 5.4.  Port-Preserving Symmetric NAT Extension
- contents:
  - "5.4.1.  Abstract Data Model\n   This section describes a conceptual model of
    possible data\n   organization that an implementation maintains to participate
    in this\n   protocol.  The described organization is provided to facilitate the\n
    \  explanation of how the protocol behaves.  This document does not\n   mandate
    that implementations adhere to this model as long as their\n   external behavior
    is consistent with that described in this document.\n   The Port-Preserving Symmetric
    NAT Extension extends the abstract data\n   model in Section 5.2.1 by adding the
    following additional fields.\n   Port-Preserving NAT flag: This is a Boolean value,
    set to TRUE if the\n   Teredo client is positioned behind a port-preserving NAT.\n
    \  Symmetric NAT flag: This is a Boolean value, set to TRUE if the\n   Teredo
    client is positioned behind a symmetric NAT.\n   Peer Entry: The following fields
    need to be added on a per-peer\n   basis:\n   o  Random Port: This field contains
    the value of the external port\n      that the Teredo client predicts that its
    NAT has assigned it for\n      communication with the peer.  Set to zero by default.\n
    \  o  Peer Random Port: This field contains the value of the random port\n      that
    the peer is using for communication with this Teredo client.\n      Set to zero
    by default.\n   o  Direct Receive on Primary Port: This is a Boolean value, set
    to\n      TRUE if a packet is received from the Teredo peer on the primary\n      local
    port.  Set to FALSE by default.\n   o  Direct Receive on Random Port: This is
    a Boolean value, set to\n      TRUE if a packet is received from the Teredo peer
    on the Random\n      Port.  Set to FALSE by default.\n   o  Connection Refresh
    Count: This field contains the number of direct\n      bubbles that have been
    sent to the peer since the last time data\n      was sent to the peer.\n   o  Last
    Data Packet Sent Timestamp: This field contains the timestamp\n      of the last
    data packet sent to the peer.  This timestamp is\n      different from the field
    that stores the data and time of last\n      transmission to the peer (as specified
    in Section 5.2 of\n      [RFC4380]) because the RFC-defined field is also updated
    every\n      time a direct bubble is sent.\n"
  title: 5.4.1.  Abstract Data Model
- contents:
  - "5.4.2.  Timers\n   Other than those in [RFC4380], the Port-Preserving Symmetric
    NAT\n   Extension requires the following additional timer.\n   Peer Refresh Timer:
    A timer to refresh peer connections through the\n   random port, on which no data
    has been sent for a while.\n"
  title: 5.4.2.  Timers
- contents:
  - "5.4.2.1.  Peer Refresh Timer Expiry\n   When the Peer Refresh Timer expires,
    the Teredo client MUST go\n   through its list of peers and for each peer to which
    the Teredo\n   client is communicating through the random port, the Teredo client\n
    \  MUST check the Last Data Packet Sent Timestamp to determine if data\n   has
    been sent to the peer in the last 30 seconds, and check the\n   Connection Refresh
    Count field to determine if the count has reached\n   the maximum allowed value
    of 20.  If both checks are FALSE, the\n   Teredo client MUST send a direct bubble
    (as specified in\n   Section 5.4.4.3) to the peer and increment the Connection
    Refresh\n   Count.  This direct bubble is sent as an attempt to keep the port\n
    \  mappings on all the intermediate NATs alive while the application/\n   user
    may be temporarily inactive.  If on the other hand, data has\n   been sent to
    the peer in the last 30 seconds, the Connection Refresh\n   Count MUST be reset
    to zero.\n   The Peer Refresh Timer MUST then be rescheduled to expire in 30\n
    \  seconds.\n"
  title: 5.4.2.1.  Peer Refresh Timer Expiry
- contents:
  - "5.4.3.  Initialization\n   In addition to the behavior specified in [RFC4380],
    the Port-\n   Preserving NAT flag and Symmetric NAT flag MUST be set to FALSE
    when\n   the Teredo client is started.  The Peer Refresh Timer MUST be started\n
    \  and scheduled to expire in 30 seconds.\n   During the qualification procedure
    (as specified in Section 5.2.1 of\n   [RFC4380]), when the Teredo client receives
    a response from the\n   Teredo server address, the Teredo client MUST compare
    the Port value\n   in the origin indication, as specified in Section 5.1.1 of
    [RFC4380],\n   with the Local Port value.  If both values match, the client MUST
    set\n   the Port-Preserving NAT flag to TRUE.\n"
  title: 5.4.3.  Initialization
- contents:
  - '5.4.4.  Message Processing

    '
  title: 5.4.4.  Message Processing
- contents:
  - "5.4.4.1.  Sending a Data Packet\n   On receiving a data packet to be transmitted
    to the Teredo peer (in\n   addition to the rules specified in Section 5.2.4 of
    [RFC4380]), the\n   Teredo client MUST update the Last Data Packet Sent Timestamp
    when\n   the packet is actually sent.\n"
  title: 5.4.4.1.  Sending a Data Packet
- contents:
  - "5.4.4.2.  Sending an Indirect Bubble\n   The rules for sending an indirect bubble
    are as specified in\n   Section 5.2.4.1 of this document and Section 5.2.6 of
    [RFC4380].  In\n   addition to those rules, if the Port-Preserving NAT flag is
    TRUE, the\n   Teredo client MUST do the following:\n   o  If the Symmetric NAT
    flag is set, the Teredo peer is not marked as\n      \"trusted\" (as specified
    in Section 5.2 of [RFC4380]), and the\n      Random Port is zero, the Teredo client
    MUST first select a random\n      port number to use, and then begin listening
    on that port.  Since\n      the NAT is port-preserving, the Teredo client can
    predict that the\n      external port assigned will be equal to the random port
    chosen,\n      and hence the Teredo client MUST store the random port chosen in\n
    \     the Random Port field of the Peer Entry.\n   o  If the Random Port value
    is non-zero, the Teredo client MUST\n      append a Random Port Trailer to the
    indirect bubble.\n"
  title: 5.4.4.2.  Sending an Indirect Bubble
- contents:
  - "5.4.4.3.  Sending a Direct Bubble\n   The rules for when direct bubbles are sent
    to a Teredo peer are as\n   specified in Section 5.2.6 of [RFC4380].  In addition,\n
    \  Section 5.2.4.2 defines rules for enabling communication for clients\n   positioned
    behind a symmetric NAT.  In addition to the rules defined\n   in both the aforementioned
    sections, if the Port-Preserving NAT flag\n   is TRUE, the following rules apply
    also.\n   If the Symmetric NAT flag is set, and the Teredo peer is not marked\n
    \  as \"trusted\" (as specified in Section 5.2 of [RFC4380]) the Teredo\n   client
    MUST send a direct bubble destined to the mapped address/port\n   embedded in
    the Teredo IPv6 address of the Teredo peer.  If the peer\n   Random Port field
    is non-zero, the Teredo client MUST send another\n   direct bubble from its own
    random port, destined to the peer random\n   port.  The IPv4 destination address
    MUST be the mapped address\n   embedded in the Teredo IPv6 address.  In addition,
    the Teredo client\n   MUST include the Random Port Trailer (Section 4.5).\n"
  title: 5.4.4.3.  Sending a Direct Bubble
- contents:
  - "5.4.4.4.  Receiving an Indirect Bubble\n   The rules for processing an indirect
    bubble are as specified in\n   Section 5.2.4.3 of this document and Section 5.2.3
    of [RFC4380].  In\n   addition to these rules, if the incoming indirect bubble
    has a Random\n   Port Trailer, the following additional processing MUST be done.\n
    \  If the Peer Random Port field of the Peer Entry is zero, the Teredo\n   client
    MUST store the port from the Random Port Trailer in the Peer\n   Random Port field
    of the Peer Entry.\n   If the Peer Random Port field is non-zero and if either
    the Peer\n   Random Port field and the new advertised port have the same value,
    or\n   if active data has been exchanged between the two Teredo clients in\n   the
    last 30 seconds (that is, \"time of last transmission\" or \"time of\n   last
    reception\", as specified in Section 5.2 of [RFC4380], is set to\n   a time that
    is less than 30 seconds ago), the new advertised port\n   value MUST be ignored.\n
    \  If the Peer Random Port field is non-zero and the new advertised port\n   value
    is different from the Peer Random Port value, and it has been\n   more than 30
    seconds since the last exchange of data packets between\n   the two Teredo clients,
    (that is, \"time of last transmission\" and\n   \"time of last reception\" are
    set to a time that is more than 30\n   seconds ago), the Teredo client SHOULD
    store the new advertised port\n   value in the Peer Random Port field and, if
    the Port-Preserving NAT\n   flag is TRUE, then clear the Random Port field, and
    stop listening on\n   the old random port.  This allows communication to be re-established\n
    \  if either side changes the random port that it is using.\n"
  title: 5.4.4.4.  Receiving an Indirect Bubble
- contents:
  - "5.4.4.5.  Receiving a Direct Bubble\n   The rules for handling direct bubbles
    are specified in\n   Section 5.2.4.4 of this document and Section 5.2.3 of [RFC4380].
    \ The\n   rules for whether to accept a direct bubble are extended as follows,\n
    \  when the Port-Preserving NAT flag is TRUE:\n   o  If the direct bubble is received
    on the primary port and the\n      Teredo peer is not \"trusted\", the status
    field of the Teredo\n      client MUST be changed to \"trusted\" and the Direct
    Receive on\n      Primary Port flag MUST be set to TRUE.  The mapped address/port\n
    \     from which the direct bubble was received MUST be recorded in the\n      mapped
    address/port fields of the Teredo peer, as specified in\n      Section 5.2 of
    [RFC4380].  The Teredo client MUST then set the\n      Random Port field in the
    Peer Entry to zero and stop listening on\n      the old random port.\n   o  If
    the direct bubble is received on the primary port, the Teredo\n      peer is \"trusted\",
    and the Direct Receive on Primary flag is set\n      to TRUE, the Teredo client
    MUST compare the mapped address/port of\n      the direct bubble with the mapped
    address/port of the Peer Entry.\n      If both mappings are the same, the direct
    bubble MUST be accepted.\n      If the mappings are different and it has been
    more than 30 seconds\n      since the last packet exchange with the Teredo peer
    (that is,\n      \"time of last transmission\" and \"time of last reception\",
    as\n      defined in Section 5.2 of [RFC4380], are set to a time that is\n      more
    than 30 seconds ago), the mapping on the Teredo peer's NAT\n      has changed
    and communication needs to be re-established.  This\n      MUST be done by changing
    the status of the peer to \"not-trusted\",\n      setting the Direct Receive on
    Primary Port flag to FALSE, and\n      sending an indirect bubble to the Teredo
    peer via its Teredo\n      server.\n   o  If the direct bubble is received on
    the primary port, the Teredo\n      peer is \"trusted\", the Direct Receive on
    Primary Port flag is set\n      to FALSE, and the Direct Receive on Random Port
    flag is set to\n      TRUE, the mapped address/port from which the direct bubble
    is\n      received MUST be stored in the mapped address/port fields of the\n      Peer
    Entry.  The Direct Receive on Primary Port flag MUST be set\n      to TRUE.  The
    Teredo client MUST then set the Random Port field in\n      the Peer Entry to
    zero and stop listening on the old random port.\n      Finally, the Direct Receive
    on Random Port flag MUST be set to\n      FALSE.\n   o  If the direct bubble is
    received on the random port and the Teredo\n      peer is not \"trusted\", the
    status field of the Teredo client MUST\n      be changed to \"trusted\" and the
    Direct Receive on Random Port flag\n      MUST be set to TRUE.  The mapped address/port
    from which the\n      direct bubble was received MUST be recorded in the mapped
    address/\n      port fields of the Teredo Peer Entry, as specified in Section
    5.2\n      of [RFC4380].\n   o  If the direct bubble is received on the random
    port, the Teredo\n      peer is \"trusted\", and the Direct Receive on Primary
    Port flag is\n      FALSE, the Teredo client MUST compare the mapped address/port
    in\n      the direct bubble with the mapped address/port in the Peer Entry.\n
    \     If the two mappings are the same, the direct bubble MUST be\n      accepted.
    \ If the mappings are different, it implies that the NAT\n      had deleted the
    mapping and when it reassigned the mapping, a\n      different external port was
    chosen.  In this instance, the Teredo\n      client SHOULD set the Random Port
    field to zero, stop listening on\n      the old random port, and send an indirect
    bubble to the Teredo\n      peer as specified in Section 5.4.4.2.\n   Note that
    once the Direct Receive on Primary Port flag is TRUE, the\n   client will stop
    listening on the random port and hence a direct\n   bubble cannot be received
    on the random port.  As a result, this case\n   is intentionally omitted above.\n"
  title: 5.4.4.5.  Receiving a Direct Bubble
- contents:
  - "5.5.  Sequential Port-Symmetric NAT Extension\n   The Sequential Port-Symmetric
    NAT Extension is optional; an\n   implementation SHOULD support it.  This extension
    has the Symmetric\n   NAT Support Extension (Section 5.2) as a dependency.  Any
    node that\n   implements this extension MUST also implement the Symmetric NAT\n
    \  Support Extension, as well as the Port-Preserving NAT Extension\n   (Section
    5.4).\n"
  title: 5.5.  Sequential Port-Symmetric NAT Extension
- contents:
  - "5.5.1.  Abstract Data Model\n   This section describes a conceptual model of
    possible data\n   organization that an implementation maintains to participate
    in this\n   protocol.  The described organization is provided to facilitate the\n
    \  explanation of how the protocol behaves.  This document does not\n   mandate
    that implementations adhere to this model as long as their\n   external behavior
    is consistent with that described in this document.\n   The Sequential Port-Symmetric
    NAT Extension extends the abstract data\n   model in Section 5.4.1 by adding the
    following additional state.\n   Peer Entry: The following fields need to be added
    on a per-peer\n   basis:\n   o  EchoTestNonce1: The value of the nonce sent as
    part of the\n      authentication encapsulation, as specified in Section 5.1.1
    of\n      [RFC4380], in the router solicitation packet sent to the Teredo\n      server
    address as part of the Echo Test.\n   o  EchoTestNonce2: The value of the nonce
    sent as part of the\n      authentication encapsulation in the router solicitation
    packet\n      sent to the secondary Teredo server address as part of the Echo\n
    \     Test.\n   o  EchoTestLowerPort: The value of the external port mapping\n
    \     extracted from the origin indication of the router advertisement\n      received
    from the Teredo server address as part of the Echo Test.\n      A value of 0 indicates
    that no such router advertisement has been\n      received.\n   o  EchoTestUpperPort:
    The value of the external port mapping\n      extracted from the origin indication
    of the router advertisement\n      received from the secondary Teredo server address
    as part of the\n      Echo Test.  A value of 0 indicates that no such router\n
    \     advertisement has been received.\n   o  EchoTestRetryCounter: The number
    of times an Echo Test has been\n      attempted.\n"
  title: 5.5.1.  Abstract Data Model
- contents:
  - "5.5.2.  Timers\n   In addition to the timers specified in Section 5.4.2, the
    following\n   additional timer is required per Peer Entry.\n   Echo Test Failover
    Timer: A one-shot timer that runs whenever an Echo\n   Test is in progress.\n"
  title: 5.5.2.  Timers
- contents:
  - "5.5.2.1.  Peer Refresh Timer Expiry\n   The processing of the Peer Refresh Timer
    Expiry MUST be completed as\n   specified in Section 5.4.2.1.  In addition to
    those rules, the Teredo\n   client MUST set the EchoTestLowerPort, EchoTestUpperPort,
    and\n   EchoTestRetryCounter to zero.\n"
  title: 5.5.2.1.  Peer Refresh Timer Expiry
- contents:
  - "5.5.2.2.  Echo Test Failover Timer Expiry\n   If the Echo Test Failover Timer
    expires, the Teredo client MUST do\n   the following.\n   If the value of the
    EchoTestRetryCounter is two, then the Teredo\n   client MUST send an indirect
    bubble as specified in Section 5.2.4.1.\n   If the value of the EchoTestRetryCounter
    is one, then the Teredo\n   client MUST start another Echo Test as specified in\n
    \  Section 5.5.4.1.1.\n"
  title: 5.5.2.2.  Echo Test Failover Timer Expiry
- contents:
  - "5.5.3.  Initialization\n   No behavior changes are required beyond what is specified
    in\n   Section 5.4.3.\n"
  title: 5.5.3.  Initialization
- contents:
  - "5.5.4.  Message Processing\n   Except as specified in the following sections,
    the rules for message\n   processing are as specified in Section 5.4.4.\n"
  title: 5.5.4.  Message Processing
- contents:
  - "5.5.4.1.  Handling a Request to Send an Indirect Bubble\n   Whenever [RFC4380]
    or other extensions specified in this document\n   specify that an indirect bubble
    is to be sent, the following actions\n   apply at that time instead if the Symmetric
    NAT flag is TRUE and the\n   Port-Preserving NAT flag is FALSE.  Note that any
    behavior specified\n   by [RFC4380] or other extensions in this document still
    applies to\n   how indirect bubbles are constructed, but such behavior is done
    at a\n   later time as specified in Section 5.5.4.4.\n   If the Symmetric NAT
    flag is TRUE, and the Port-Preserving NAT flag\n   is FALSE, and the Teredo peer
    is not marked as \"trusted\" (as\n   specified in Section 5.2 of [RFC4380]), and
    the Random Port is zero,\n   then the Teredo client MUST select a random port
    number to use, begin\n   listening on that port, and start an Echo Test as specified
    below.\n"
  title: 5.5.4.1.  Handling a Request to Send an Indirect Bubble
- contents:
  - "5.5.4.1.1.  Starting an Echo Test\n   To start an Echo Test, the Teredo client
    MUST send the following\n   three packets from this port:\n   o  First, a router
    solicitation (as specified in Section 5.2.1 of\n      [RFC4380]) MUST be sent
    to the Teredo server address.  The router\n      solicitation MUST include an
    authentication encapsulation with a\n      randomly generated Nonce field, as
    specified in Section 5.1.1 of\n      [RFC4380].  The nonce included in the authentication
    encapsulation\n      MUST then be stored in the EchoTestNonce1 field of the Peer
    Entry.\n   o  Second, a direct bubble MUST be sent to the peer.\n   o  Third,
    a router solicitation MUST be sent to the secondary Teredo\n      server address.
    \ The router solicitation MUST include an\n      authentication encapsulation
    with a randomly generated Nonce\n      field, as specified in Section 5.1.1 of
    [RFC4380].  The nonce\n      included in the authentication encapsulation MUST
    then be stored\n      in the EchoTestNonce2 field of the Peer Entry.\n   The Teredo
    client MUST then increment the EchoTestRetryCounter and\n   set the Echo Test
    Failover Timer to expire in a number of seconds\n   equal to EchoTestRetryCounter.\n"
  title: 5.5.4.1.1.  Starting an Echo Test
- contents:
  - "5.5.4.2.  Sending an Indirect Bubble\n   The rules for sending an indirect bubble
    are as specified in\n   Section 5.2.4.1 of this document and Section 5.2.6 of
    [RFC4380].  In\n   addition to those rules, if the Symmetric NAT flag is TRUE,
    and the\n   Port-Preserving NAT flag is FALSE, and the Random Port value is non-\n
    \  zero, then the Teredo client MUST append a Random Port Trailer to the\n   indirect
    bubble.\n"
  title: 5.5.4.2.  Sending an Indirect Bubble
- contents:
  - "5.5.4.3.  Receiving a Direct Bubble\n   The processing of the direct bubble MUST
    be completed as specified in\n   Section 5.4.4.5, as if the Port-Preserving NAT
    flag were TRUE.  After\n   the processing is complete, if the Direct Bubble Received
    on Primary\n   flag is TRUE, and the Echo Test Failover Timer is running, then
    the\n   Echo Test Failover Timer MUST be canceled and EchoTestLowerPort,\n   EchoTestUpperPort,
    and EchoTestRetryCounter MUST be set to zero.\n"
  title: 5.5.4.3.  Receiving a Direct Bubble
- contents:
  - "5.5.4.4.  Receiving a Router Advertisement\n   The rules for processing a router
    advertisement are as specified in\n   Section 5.2.1 of [RFC4380].  In addition
    to those rules, if the\n   router advertisement contains an authentication encapsulation,
    the\n   Teredo client MUST look for a Peer Entry whose EchoTestNonce1 or\n   EchoTestNonce2
    field matches the nonce in the authentication\n   encapsulation.  If a Peer Entry
    is found, the Teredo client MUST do\n   the following.\n   If the received nonce
    is equal to EchoTestNonce1 and\n   EchoTestLowerPort is zero, then EchoTestLowerPort
    MUST be set to the\n   external port mapping extracted from the origin indication
    of this\n   router advertisement.\n   If the received nonce is equal to EchoTestNonce2
    and\n   EchoTestUpperPort is zero, then EchoTestUpperPort MUST be set to the\n
    \  external port mapping extracted from the origin indication of this\n   router
    advertisement.\n   If the EchoTestUpperPort and EchoTestLowerPort are now both
    non-zero,\n   the Teredo client MUST then set the Random Port field of the Peer\n
    \  Entry to (EchoTestUpperPort + EchoTestUpperPort)/2, rounded down, and\n   send
    an indirect bubble as specified in Section 5.5.4.2.\n"
  title: 5.5.4.4.  Receiving a Router Advertisement
- contents:
  - "5.6.  Hairpinning Extension\n   This extension is optional; an implementation
    SHOULD support it.\n"
  title: 5.6.  Hairpinning Extension
- contents:
  - "5.6.1.  Abstract Data Model\n   This section describes a conceptual model of
    possible data\n   organization that an implementation maintains to participate
    in this\n   protocol.  The described organization is provided to facilitate the\n
    \  explanation of how the protocol behaves.  This document does not\n   mandate
    that implementations adhere to this model as long as their\n   external behavior
    is consistent with that described in this document.\n   In addition to the state
    specified in Section 5.2 of [RFC4380], the\n   following are also required:\n
    \  UPnP Mapped Address/Port: The mapped address/port assigned via UPnP\n   to
    the Teredo client by the UPnP-enabled NAT behind which the Teredo\n   client is
    positioned.  This field has a valid value only if the NAT\n   to which the Teredo
    client is connected is UPnP enabled.  In\n   addition, if the Teredo client is
    positioned behind a single NAT only\n   (as opposed to a series of nested NATs),
    this value will be the same\n   as the mapped address/port embedded in its Teredo
    IPv6 address.\n   Peer Entry: Per-peer state is extended beyond what is described
    in\n   [RFC4380] by including the following:\n   o  Alternate Address/Port list:
    The list of alternate address/port\n      pairs advertised by the peer.\n"
  title: 5.6.1.  Abstract Data Model
- contents:
  - "5.6.2.  Timers\n   No timers are necessary other than those in [RFC4380].\n"
  title: 5.6.2.  Timers
- contents:
  - "5.6.3.  Initialization\n   Behavior is as specified in [RFC4380], with the following
    additions.\n   Prior to beginning the qualification procedure, the Teredo client\n
    \  MUST invoke the AddPortMapping function (as specified in Section\n   2.4.16
    of [UPNPWANIP]) with the parameters specified in\n   Section 5.3.3.  If successful,
    it indicates that the NAT has created\n   a port mapping from the external port
    of the NAT to the internal port\n   of the Teredo client node.  If the AddPortMapping
    function is\n   successful, the Teredo client MUST store the mapping assigned
    by the\n   NAT in its UPnP Mapped Address/Port state.\n   After the qualification
    procedure, the mapped address/port learned\n   from the Teredo server MUST be
    compared to the UPnP Mapped Address/\n   Port.  If both are the same, the Teredo
    client is positioned behind a\n   single NAT and the UPnP Mapped Address/Port
    MUST be zeroed out.\n"
  title: 5.6.3.  Initialization
- contents:
  - '5.6.4.  Message Processing

    '
  title: 5.6.4.  Message Processing
- contents:
  - "5.6.4.1.  Sending an Indirect Bubble\n   The rules for when indirect bubbles
    are sent to a Teredo peer are as\n   specified in Section 5.2.6 of [RFC4380].
    \ If communication between a\n   Teredo client and a Teredo peer has not been
    established, the Teredo\n   client MUST include the Alternate Address Trailer
    in the indirect\n   bubble.  The Alternate Address Trailer MUST include the node's
    local\n   address/port in the Alternate Address/Port list.  If the UPnP Mapped\n
    \  Address/Port is non-zero, the Alternate Address Trailer MUST also\n   include
    it in the list.\n   Hairpinning requires \"direct IPv6 connectivity tests\" (as
    specified\n   in Section 5.2.9 of [RFC4380]) to succeed before it can accept\n
    \  packets from an IPv4 address and port not embedded in the Teredo IPv6\n   address.
    \ Hence, the indirect bubble MUST also include a Nonce\n   Trailer.\n"
  title: 5.6.4.1.  Sending an Indirect Bubble
- contents:
  - "5.6.4.2.  Receiving an Indirect Bubble\n   The rules for processing indirect
    bubbles are as specified in Section\n   5.2.3 of [RFC4380].  In addition to those
    rules, when a Teredo client\n   receives an indirect bubble with the Alternate
    Address Trailer, it\n   SHOULD first verify that the Alternate Address Trailer
    is correctly\n   formed (as specified in Section 4.3), and drop the bubble if
    not.\n   Otherwise, it MUST set the Alternate Address/Port list in its Peer\n
    \  Entry to the list in the trailer.  The Teredo client, besides sending\n   direct
    bubbles to the mapped address/port embedded in the Teredo IPv6\n   address (as
    specified in Section 5.2.6 of [RFC4380]), MUST also send\n   a direct bubble to
    each mapped address/port advertised in the\n   Alternate Address Trailer.\n   In
    each of the direct bubbles, the Teredo client MUST include a Nonce\n   Trailer
    with the nonce value received in the indirect bubble.\n"
  title: 5.6.4.2.  Receiving an Indirect Bubble
- contents:
  - "5.6.4.3.  Receiving a Direct Bubble\n   If the mapped address/port of the direct
    bubble matches the mapped\n   address/port embedded in the source Teredo IPv6
    address, the direct\n   bubble MUST be accepted, as specified in Section 5.2.3
    of [RFC4380].\n   If the mapped address/port does not match the embedded address/port,\n
    \  but the direct bubble contains a Nonce Trailer with a nonce that\n   matches
    the Nonce Sent field of the Teredo peer, the direct bubble\n   MUST be accepted.\n
    \  If neither of the above rules match, the direct bubble MUST be\n   dropped.\n"
  title: 5.6.4.3.  Receiving a Direct Bubble
- contents:
  - "5.7.  Server Load Reduction Extension\n   This extension is optional; an implementation
    SHOULD support it.\n"
  title: 5.7.  Server Load Reduction Extension
- contents:
  - "5.7.1.  Abstract Data Model\n   This section describes a conceptual model of
    possible data\n   organization that an implementation maintains to participate
    in this\n   protocol.  The described organization is provided to facilitate the\n
    \  explanation of how the protocol behaves.  This document does not\n   mandate
    that implementations adhere to this model as long as their\n   external behavior
    is consistent with that described in this document.\n   In addition to the state
    specified in Section 5.2 of [RFC4380], the\n   following are also required.\n
    \  Peer Entry: The following state needs to be added on a per-peer\n   basis:\n
    \  o  Count of Solicitations Transmitted: The number of Solicitation\n      packets
    sent.\n"
  title: 5.7.1.  Abstract Data Model
- contents:
  - "5.7.2.  Timers\n   Retransmission Timer: A timer used to retransmit Teredo Neighbor\n
    \  Solicitation packets.\n   When the retransmission timer expires, the Teredo
    client MUST\n   retransmit a direct bubble with a Neighbor Discovery Option Trailer,\n
    \  and increment the Count of Solicitations Transmitted.  If the count\n   is
    less than three, it MUST then reset the timer to expire in two\n   seconds.  Otherwise
    (if the count is now three), it MUST send an\n   indirect bubble to the Teredo
    peer to re-establish connectivity as if\n   no communication between the Teredo
    client and the Teredo peer had\n   been established.\n"
  title: 5.7.2.  Timers
- contents:
  - "5.7.3.  Initialization\n   No initialization is necessary other than that specified
    in\n   [RFC4380].\n"
  title: 5.7.3.  Initialization
- contents:
  - "5.7.4.  Message Processing\n   Except as specified below, processing is the same
    as specified in\n   [RFC4380].\n"
  title: 5.7.4.  Message Processing
- contents:
  - "5.7.4.1.  Sending a Data Packet\n   Upon receiving a data packet to be transmitted
    to the Teredo peer,\n   the Teredo client MUST determine whether data has been
    exchanged\n   between the Teredo client and peer in either direction in the last
    30\n   seconds (using the state as specified in Section 5.2 of [RFC4380]).\n   If
    not, the Teredo client MUST send a direct bubble with a Neighbor\n   Discovery
    Option Trailer having the DiscoveryType field set to\n   TeredoDiscoverySolicitation.
    \ The Count of Solicitations Transmitted\n   field MUST be set to 1.  The retransmission
    timer MUST be set to\n   expire in two seconds.\n"
  title: 5.7.4.1.  Sending a Data Packet
- contents:
  - "5.7.4.2.  Receiving a Direct Bubble\n   The rules for processing direct bubbles
    are as specified in Section\n   5.2.3 of [RFC4380].  In addition to those rules,
    upon receiving a\n   direct bubble containing a Neighbor Discovery Option Trailer
    with\n   DiscoveryType field set to TeredoDiscoverySolicitation, the Teredo\n
    \  client MUST respond with a direct bubble with the Neighbor Discovery\n   Option
    Trailer having the DiscoveryType field set to\n   TeredoDiscoveryAdvertisement.\n"
  title: 5.7.4.2.  Receiving a Direct Bubble
- contents:
  - "6.  Protocol Examples\n   The following sections describe several operations
    as used in common\n   scenarios to illustrate the function of Teredo Extensions.\n"
  title: 6.  Protocol Examples
- contents:
  - "6.1.  Symmetric NAT Support Extension\n   The following protocol example illustrates
    the use of the Symmetric\n   NAT Support Extension.\n   In Figure 2 (Section 3.1),
    assume that Teredo Client A, which is\n   positioned behind a port-symmetric NAT,
    wants to communicate with\n   Teredo Client B, which is positioned behind an address-restricted\n
    \  NAT.\n   The qualification procedure where the Teredo client determines that\n
    \  it is positioned behind a symmetric NAT is exactly the same as that\n   specified
    in Section 5.2.1 of [RFC4380].  Because of the Symmetric\n   NAT Extension, Client
    A continues to configure a Teredo IPv6 address\n   even after determining that
    the Teredo client is positioned behind a\n   symmetric NAT.\n   Next the following
    packet exchange helps Teredo Client A (A)\n   establish communication with Teredo
    Client B (B).\n   Teredo           Client A's              Client B's           Teredo\n
    \  Client             Teredo                  Teredo             Client\n      A
    \       NAT    Server                  Server      NAT       B\n      |         |
    \       |                       |         |        |\n      |         |        |
    \ Direct Bubble to B   |         |        |\n    1 |--------------------------------------------------->|
    \       |\n      |         |        |                       |         |        |\n
    \     |Indirect Bubble to B via B's Teredo Server|         |        |\n    2 |----------------------------------------->|----------------->|\n
    \     |         |        |                       |         |        |\n      |
    \        |        |  Direct Bubble to A   |         |        |\n      |         |<--------------------------------------------------|
    3\n      |         |        |                       |         |        |\n      |
    \        |        |Indirect Bubble to A via A's Teredo Server|\n      |<-----------------|<-----------------------------------------|
    4\n      |         |        |                       |         |        |\n      |
    \        |        |  Direct Bubble to B   |         |        |\n    5 |------------------------------------------------------------>|\n
    \     |         |        |                       |         |        |\n      |Indirect
    Bubble to B via B's Teredo Server|         |        |\n    6 |----------------------------------------->|----------------->|\n
    \     |         |        |                       |         |        |\n      |
    \        |        |  Direct Bubble to A   |         |        |\n      |<------------------------------------------------------------|
    7\n      |         |        |                       |         |        |\n            Port-Symmetric
    NAT to Address-Restricted NAT Packet\n                                 Exchange\n
    \  1.   A sends a direct bubble (Packet 1) destined to the mapped\n        address/port
    embedded in B's Teredo IPv6 address.  The mapped\n        port in the source field
    of the packet assigned by Client A's\n        NAT is different from the mapped
    port embedded in A's Teredo\n        IPv6 address.  This is characteristic of
    the port-symmetric NAT\n        positioned in front of A.  The mapped address
    in the source\n        field of the packet is the same as the mapped address embedded\n
    \       in the Teredo IPv6 address of A.\n   2.   The aforementioned direct bubble
    is dropped by B's NAT because\n        it has not seen an outgoing packet destined
    to A's mapped IPv4\n        address.\n   3.   A sends an indirect bubble (Packet
    2) destined to B via Client\n        B's Teredo server.\n   4.   The above-mentioned
    indirect bubble is received by B.  B then\n        responds with the following
    packets.  The first packet sent by B\n        is a direct bubble (Packet 3) destined
    to the mapped address/\n        port embedded in A's Teredo IPv6 address.\n   5.
    \  The above-mentioned direct bubble is dropped by A's NAT because\n        the
    NAT has not seen any outgoing packet sourced from the mapped\n        address/port
    embedded in A's Teredo IPv6 address and destined to\n        the mapped address/port
    embedded in B's Teredo IPv6 address.\n   6.   B also sends an indirect bubble
    (Packet 4) destined to A via A's\n        Teredo Server.\n   7.   The aforementioned
    indirect bubble is successfully received by\n        A.  A responds to the indirect
    bubble with its own direct bubble\n        (Packet 5).  This direct bubble is
    exactly the same as the first\n        direct bubble (Packet 1) sent by A.\n   8.
    \  This time around the aforementioned direct bubble is accepted by\n        B's
    NAT because the NAT has seen an outgoing packet (Packet 3)\n        sourced from
    the mapped address/port embedded in B's Teredo IPv6\n        address and destined
    to the mapped address/port embedded in A's\n        Teredo IPv6 address.  It is
    important to remember that A's NAT\n        is port-symmetric and therefore varies
    only the mapped port\n        while the mapped address remains the same.  B's
    NAT is address-\n        restricted and cares only about prior communication with
    the\n        IPv4 address, not the specific port.  At this point,\n        communication
    in one direction is now possible (B to A, but not\n        vice versa).\n   9.
    \  After receiving the direct bubble, B remembers the new mapped\n        address/port
    that was in the source fields of the direct bubble\n        and uses those for
    future communication with A instead of the\n        mapped address/port embedded
    in A's Teredo IPv6 address.\n   10.  A then times out and resends an indirect
    bubble (Packet 6) and\n        in response, B sends a direct bubble (Packet 7).
    \ This direct\n        bubble is destined to the new learned mapped address/port
    and\n        hence A's NAT permits the direct bubble through.  Communication\n
    \       is now possible in the other direction (client A to B).\n"
  title: 6.1.  Symmetric NAT Support Extension
- contents:
  - "6.2.  UPnP-Enabled Symmetric NAT Extension\n   The following protocol example
    illustrates the use of the UPnP-\n   Enabled Symmetric NAT Extension in addition
    to the Symmetric NAT\n   Support Extension.\n   Assume that Teredo Client A, which
    is positioned behind a UPnP-\n   enabled port-symmetric NAT, wants to communicate
    with Teredo Client\n   B, which is also positioned behind a UPnP-Enabled port-symmetric
    NAT.\n   Before both clients start their qualification procedure, they use\n   UPnP
    to reserve port mappings on their respective NATs.  The UPnP\n   operations succeed
    for both the clients and the clients hence know\n   that they are positioned behind
    UPnP-enabled NATs.  After the\n   qualification procedure, both clients have valid
    Teredo IPv6\n   addresses because they both support the Symmetric NAT Support\n
    \  Extension.  Also, after the qualification procedure both clients will\n   compare
    their mapped address/port determined through UPnP with the\n   mapped address/port
    determined through the qualification procedure.\n   Because both will be the same,
    the clients will zero out their UPnP\n   mapped address/port values and conclude
    that they are each located\n   behind a single UPnP-enabled NAT.\n   The following
    packet exchange shows Teredo client A (A) establishing\n   communication with
    Teredo client B (B).\n   Teredo           Client A's              Client B's           Teredo\n
    \  Client             Teredo                  Teredo             Client\n      A
    \       NAT    Server                  Server      NAT       B\n      |         |
    \       |                       |         |        |\n      |         |        |
    \ Direct Bubble to B   |         |        |\n    1 |------------------------------------------------------------>|\n
    \     |         |        |                       |         |        |\n      |Indirect
    Bubble to B via B's Teredo Server|         |        |\n    2 |----------------------------------------->|----------------->|\n
    \     |         |        |                       |         |        |\n      |
    \        |        |  Direct Bubble to A   |         |        |\n      |<------------------------------------------------------------|
    3\n      |         |        |                       |         |        |\n                UPnP-enabled
    Symmetric NAT Packet Exchange\n   1.  A sends a direct bubble (Packet 1) to the
    mapped address/port\n       embedded in B's Teredo IPv6 address.  Because A's
    NAT is a\n       symmetric NAT, the UDP source port field in the packet assigned\n
    \      by A's NAT is different from the mapped port embedded in A's\n       Teredo
    IPv6 address, but the IPv4 source address of the packet is\n       the same as
    the mapped address embedded in A's Teredo IPv6\n       address.\n   2.  The above-mentioned
    direct bubble is received by B because it is\n       destined for the UPnP mapped
    address/port of B and hence is let\n       through by the NAT.  At this point,
    B deduces that A is\n       positioned behind a symmetric NAT because the mapped
    address/port\n       from which the direct bubble is received is different from
    the\n       mapped address/port that is embedded in A's Teredo IPv6 address.\n
    \      Hence, it remembers that the peer is positioned behind a\n       symmetric
    NAT so that data packets will be sent to the mapped\n       address/port embedded
    in A's Teredo IPv6 address, rather than the\n       mapped address/port from which
    the direct bubble was received.\n       At this point, communication in one direction
    is now possible (B\n       to A, but not vice versa).\n   3.  A also sends an
    indirect bubble (Packet 2) destined to B via B's\n       Teredo Server.\n   4.
    \ The above indirect bubble is received by B.  B then responds with\n       a
    direct bubble (Packet 3) destined to the mapped address/port\n       embedded
    in A's Teredo IPv6 address, as in step 2.\n   5.  Because A's NAT is also UPnP
    enabled, the above-mentioned direct\n       bubble is received by A.  A also notices
    that B is positioned\n       behind a Symmetric NAT because the mapped address/port
    from which\n       the packet is received is different from the mapped address/port\n
    \      embedded in B's Teredo IPv6 address.  Hence, it remembers that\n       the
    peer is positioned behind a symmetric NAT so that data\n       packets will be
    sent to the mapped address/port embedded in B's\n       Teredo IPv6 address, rather
    than the mapped address/port from\n       which the direct bubble was received.
    \ At this point,\n       communication is now possible in the other direction
    (A to B).\n"
  title: 6.2.  UPnP-Enabled Symmetric NAT Extension
- contents:
  - "6.3.  Port-Preserving Symmetric NAT Extension\n   The following protocol example
    illustrates the use of the Port-\n   Preserving Symmetric NAT Extension.\n   Assume
    that Teredo Client A (A), which is positioned behind a port-\n   preserving symmetric
    NAT, wants to communicate with Teredo Client B\n   (B), which is also positioned
    behind a port-preserving symmetric NAT.\n   The following packet exchange explains
    the configuration setup and\n   communication setup between the two clients.\n
    \  Teredo           Client A's              Client B's           Teredo\n   Client
    \            Teredo                  Teredo             Client\n      A        NAT
    \   Server                  Server      NAT       B\n      |         |        |
    \                      |         |        |\n      |         |        |  Direct
    Bubble to B   |         |        |\n    1 |--------------------------------------------------->|
    \       |\n      |         |        |                       |         |        |\n
    \     |Indirect Bubble to B via B's Teredo Server|         |        |\n    2 |----------------------------------------->|----------------->|\n
    \     |         |        |                       |         |        |\n      |
    \        |        |  Direct Bubble to A   |         |        |\n      |         |<--------------------------------------------------|
    3\n      |         |        |                       |         |        |\n      |
    \        |        |  Direct Bubble to A   |         |        |\n      |         |<--------------------------------------------------|
    4\n      |         |        |                       |         |        |\n      |
    \        |        |Indirect Bubble to A via A's Teredo Server|\n      |<-----------------|<-----------------------------------------|
    5\n      |         |        |                       |         |        |\n      |
    \        |        |  Direct Bubble to B   |         |        |\n    6 |--------------------------------------------------->|
    \       |\n      |         |        |                       |         |        |\n
    \     |         |        |  Direct Bubble to B   |         |        |\n    7 |------------------------------------------------------------>|\n
    \     |         |        |                       |         |        |\n      |Indirect
    Bubble to B via B's Teredo Server|         |        |\n    8 |----------------------------------------->|----------------->|\n
    \     |         |        |                       |         |        |\n      |
    \        |        |  Direct Bubble to A   |         |        |\n      |<------------------------------------------------------------|
    9\n      |         |        |                       |         |        |\n               Port-Preserving
    Symmetric NAT Packet Exchange\n   1.   During the qualification procedure, when
    the clients receive a\n        response from the Teredo server, they compare the
    Port value in\n        the Origin indication with the Local Port value.  If both
    values\n        match, the clients set the Port-Preserving NAT flag to TRUE.\n
    \  2.   When the response is received from the secondary Teredo server,\n        the
    mapped address/port value in the Origin indication is\n        compared with the
    mapped address/port value learned from the\n        response received from the
    primary server.  If the mappings are\n        different, the Symmetric NAT flag
    is set to TRUE.\n   3.   It is assumed that for both Clients A and B, the Port-Preserving\n
    \       NAT flag and the Symmetric NAT flag are set to TRUE at the end\n        of
    the qualification procedure.\n   4.   Before A sends packets to B, A checks to
    see if it is positioned\n        behind a port-preserving NAT and a symmetric
    NAT, which in the\n        example, it is.  A also checks to see if the peer is
    \"trusted\",\n        but it currently is not.  Next, A checks if the Random Port
    is\n        set to non-zero.  Since it is still zero, A allocates a new\n        random
    port, begins listening on it, and stores the value in the\n        Random Port
    field.\n   5.   A sends a direct bubble (Packet 1) from the primary port to the\n
    \       mapped address/port embedded in B's Teredo IPv6 address.  This\n        direct
    bubble does not have a Nonce Trailer or a Random Port\n        Trailer attached
    to the end.\n   6.   The aforementioned direct bubble is dropped by B's NAT because\n
    \       the NAT has not seen an outgoing packet destined to A's mapped\n        address.\n
    \  7.   A sends an indirect bubble (Packet 2) destined to B via client\n        B's
    Teredo server.  This indirect bubble contains two trailers:\n        the Nonce
    Trailer containing a random nonce, and the Random Port\n        Trailer containing
    the random port value from the Peer Entry.\n        The nonce used in the Nonce
    Trailer is also stored in the Nonce\n        Sent field of the Peer Entry.\n   8.
    \  The aforementioned indirect bubble is received by B.  B adds the\n        Teredo
    peer to its peer list.  B saves the nonce value from the\n        Nonce Trailer
    in the Nonce Advertised field of the Peer Entry.\n        B stores the port value
    from the Random Port Trailer in the Peer\n        Random Port field in the Peer
    Entry.\n   9.   B responds by sending the following packets.  The first packet\n
    \       sent by B is a direct bubble (Packet 3) destined to the mapped\n        address/port
    embedded in A's Teredo IPv6 address.  This packet\n        is sent from the primary
    port.  It includes the Nonce Trailer\n        with the nonce from the Nonce Advertised
    field of the Peer\n        Entry.\n   10.  The aforementioned direct bubble is
    dropped by A's NAT because\n        the NAT has not seen any outgoing packet sourced
    from the mapped\n        address/port embedded in A's Teredo IPv6 address and
    destined to\n        the mapped address/port embedded in B's Teredo IPv6 address.\n
    \  11.  B then checks if it is positioned behind a port-restricted NAT\n        or
    a symmetric NAT.  It also checks if the peer has already\n        advertised a
    random port.  In this case, B is positioned behind\n        a port-preserving
    symmetric NAT and the peer has advertised a\n        random port; hence, it needs
    to use a random port.  It checks if\n        its Random Port field is set to non-zero.
    \ Since it is still\n        zero, B allocates a new random port, begins listening
    on it, and\n        stores it in the Random Port entry of the Peer Entry.  B then\n
    \       sends a direct bubble (Packet 4) destined to the mapped address\n        embedded
    in A's Teredo IPv6 address and the port stored in the\n        Peer Random Port
    field of the Peer Entry.  The direct bubble is\n        sent from its own random
    port.\n   12.  The above direct bubble is dropped by A's NAT because the NAT\n
    \       has not seen any outgoing packet sourced from the mapped address\n        embedded
    in A's Teredo IPv6 address and random port advertised\n        by A.\n   13.  B
    also sends an indirect bubble (Packet 5) destined to A via A's\n        Teredo
    Server.  This indirect bubble includes a Nonce Trailer\n        and a Random Port
    Trailer.  The Nonce Trailer includes a new\n        randomly generated nonce that
    is also stored in the Nonce Sent\n        field of the Peer Entry.  The Random
    Port Trailer includes the\n        value in the Random Port field of the Peer
    Entry.\n   14.  The aforementioned indirect bubble is successfully received by\n
    \       A.  A parses the trailers and stores the nonce contained in the\n        Nonce
    Trailer in the Nonce Received field of the Peer Entry.  A\n        stores the
    port advertised in the Random Port Trailer in the\n        Random Port field of
    the Peer Entry.\n   15.  A responds with the following packets in response to
    the\n        indirect bubble received.  The first packet is a direct bubble\n
    \       (Packet 6) sent from the primary port and is destined to the\n        mapped
    address/port embedded in B's Teredo IPv6 address.\n   16.  The aforementioned
    direct bubble again is dropped by B's NAT\n        because the NAT has not seen
    an outgoing packet with the same\n        4-tuple as the incoming packet.\n   17.
    \ The next packet is also a direct bubble (Packet 7) and this one\n        is
    sent from A's random port.  The packet is destined to the\n        mapped address
    embedded in B's Teredo IPv6 address and the Peer\n        Random Port stored in
    the Peer Entry.\n   18.  Because both NATs are port-preserving NATs and the random
    ports\n        have not been used for any other mapping, the aforementioned\n
    \       direct bubble is received by B because B's NAT has seen an\n        outgoing
    packet (Packet 4) with the same address/port pairs.  B\n        stores the address/port
    from which the direct bubble was\n        received in the mapped address/port
    fields of the Peer Entry.\n        It changes the status of the peer to \"trusted\"
    and sets the\n        Direct Receive on Random Port field to TRUE.  At this point,\n
    \       communication in one direction is now possible (B to A, but not\n        vice
    versa).\n   19.  Because A still considers B to be \"not-trusted\", it times out\n
    \       and retransmits an indirect bubble (Packet 8).  This packet\n        contains
    a new nonce as part of the Nonce Trailer and also\n        contains the value
    of the random port as part of the Random Port\n        Trailer.\n   20.  B receives
    the aforementioned indirect bubble.  The processing\n        of this indirect
    bubble is similar to the processing of Packet\n        2.  Since B received a
    direct bubble on its random port, it does\n        not respond with a direct bubble
    from its primary port.\n        Instead, it responds with a direct bubble (Packet
    9) sent from\n        its random port, which is similar to Packet 4 mentioned
    above.\n   21.  A receives the direct bubble sent by B.  A stores the mapped\n
    \       address/port from which the direct bubble was received in mapped\n        address/port
    fields in the Peer Entry.  A changes the status of\n        B to \"trusted\" and
    sets the Direct Receive on Random Port field\n        to TRUE.  At this point,
    the communication is now possible in\n        the other direction (A to B).\n"
  title: 6.3.  Port-Preserving Symmetric NAT Extension
- contents:
  - "6.4.  Sequential Port-Symmetric NAT Extension\n   The following protocol example
    illustrates the use of the Sequential\n   Port-Symmetric NAT Extension.\n   Assume
    that Teredo Client A (A), which is positioned behind a\n   sequential port-symmetric
    NAT and implements the Sequential Port-\n   Symmetric NAT Extension, wants to
    communicate with Teredo Client B\n   (B), which is positioned behind a port-restricted
    NAT that supports\n   the Port-Preserving Port-Symmetric NAT Extension.  The following\n
    \  packet exchange explains the configuration setup and communication\n   setup
    between the two clients.\n   Teredo                 A's      A's            B's\n
    \  Client               Primary  Secondary      Teredo          Client\n      A
    \       NAT      Server    Server        Server   NAT       B\n      |         |
    \         |        |              |      |        |\n      | Direct Bubble to
    B |        |              |      |        |\n    1 |-------------------------------------------------->|
    \       |\n      |         |          |        |              |      |        |\n
    \     |Router Solicitation |        |              |      |        |\n    2 |------------------->|
    \       |              |      |        |\n      |         |          |        |
    \             |      |        |\n      |Router Advertisement|        |              |
    \     |        |\n      |<-------------------| 3      |              |      |
    \       |\n      |         |          |        |              |      |        |\n
    \   4 | Direct Bubble to B |        |              |      |        |\n      |-------------------------------------------------->|
    \       |\n      |         |          |        |              |      |        |\n
    \     |  Router Solicitation        |              |      |        |\n    5 |---------------------------->|
    \             |      |        |\n      |         |          |        |              |
    \     |        |\n      |  Router Advertisement       |              |      |
    \       |\n      |<----------------------------| 6            |      |        |\n
    \     |         |          |        |              |      |        |\n      |
    Indirect Bubble to B via B's Teredo Server |      |        |\n    7 |------------------------------------------->|-------------->|\n
    \     |         |          |        |              |      |        |\n      |
    \        |          |        |         Direct Bubble to A   |\n      |         |<-------------------------------------------------|
    8\n      |         |          |        |              |      |        |\n      |
    \        |          |        |       Indirect Bubble to A   |\n      |<-------------------|<--------------------------------------|
    9\n      |         |          |        |              |      |        |\n      |
    \        |          |        |         Direct Bubble to A   |\n      |<-----------------------------------------------------------|
    10\n      |         |          |        |              |      |        |\n      |
    \  Direct Bubble to B        |              |      |        |\n   11 |----------------------------------------------------------->|\n
    \              Sequential Port-Symmetric NAT Packet Exchange\n   1.  During the
    qualification procedure, when Client A receives a\n       response from the Teredo
    Server, it compares the Port value in\n       the Origin indication with the Local
    Port value.  Since they are\n       different, it concludes that it is not behind
    a port-preserving\n       NAT, and so assumes it is behind a sequential port-symmetric
    NAT.\n   2.  When A wants to communicate with B, A starts by sending a direct\n
    \      bubble (Packet 1) from its primary port.  This occurs because\n       Client
    A does not know Client B's NAT type, which could be a cone\n       or address
    restricted NAT or UPnP-enabled NAT.  Because Client A\n       is behind a symmetric
    NAT, the external port used by A's NAT is a\n       new port.  This direct bubble
    will be dropped by B's NAT since\n       Client B is behind a port-restricted
    NAT.\n   3.  Because Client A does not know if B is behind a port restricted\n
    \      NAT or some other kind of NAT, Client A proactively opens a new\n       random
    internal port, say, port 1100.\n   4.  Client A then performs its Echo Test as
    follows:\n       A.  Client A sends a router solicitation (Packet 2) to its Teredo\n
    \          Server address from port 1100.  The server responds with a\n           router
    advertisement (Packet 3).\n       B.  Client A sends a direct bubble (Packet 4)
    to the peer from\n           port 1100 destined to the port advertised in Client
    B's\n           Teredo address, say, port 2100.  This direct bubble is\n           dropped
    by Client B's port-restricted NAT.\n       C.  Client A sends a router solicitation
    (Packet 5) to its\n           secondary Teredo server address from port 1100.
    \ The server\n           responds with a router advertisement (Packet 6).\n       D.
    \ On receiving the corresponding router advertisements for\n           Packet
    2 and Packet 4, Client A knows that port 1100 maps to,\n           say, port 1200
    for Packet 2 and port 1202 for Packet 4.\n       E.  Client A then calculates
    its predicted port used for Packet 2\n           as the average (rounded down)
    of 1200 and 1202, i.e., 1201.\n   5.  Client A then sends out an indirect bubble
    (Packet 7).  This\n       indirect bubble contains a random port trailer that
    contains the\n       predicted port, port 1201.  This indirect bubble makes it
    to\n       Client B.\n   6.  Client B sends out the following bubbles in response
    to the\n       indirect bubble:\n       A.  The first direct bubble (Packet 8)
    is destined for the port\n           mapping embedded in Client A's Teredo Address.
    \ (It has been\n           observed that some NATs display symmetric NAT behavior
    for\n           outgoing packets but cone NAT behavior for incoming packets.\n
    \          The direct bubble described is likely to succeed if Client\n           A's
    NAT displays such a behavior.)  Since in this example,\n           A's NAT is
    a normal sequential port-symmetric NAT, this\n           packet is dropped.\n
    \      B.  The second packet is an indirect bubble (Packet 9) sent to\n           Client
    A without any trailers since Client B is behind a\n           port-restricted
    NAT.\n       C.  The next packet will be a direct bubble (Packet 10) sent to\n
    \          port 1201.  This packet will make it in to Client A since\n           Client
    A previously sent an outgoing packet (Packet 4) with\n           the same four
    tuple.  At this point, communication in one\n           direction is now possible
    (A to B, but not vice versa).\n   7.  Client A then sends a direct bubble (Packet
    11) to Client B when\n       it receives Packet 10.  This time, the bubble makes
    it through to\n       B because it previously sent an outgoing packet (Packet
    10) with\n       the same four tuple.  At this point, communication is now\n       possible
    in the other direction (B to A).\n"
  title: 6.4.  Sequential Port-Symmetric NAT Extension
- contents:
  - "6.5.  Hairpinning Extension\n   The following protocol example illustrates the
    use of the Hairpinning\n   Extension.\n   In Figure 3 (Section 3.5), Teredo Client
    A (A) and Teredo Client B\n   (B) are positioned behind different immediate NATs
    in a two-layer NAT\n   topology; that is, the outermost NAT (NAT E) is common
    to both A and\n   B but the immediate NATs that they are connected to are different
    (A\n   is connected to NAT F while B is connected to NAT G).  Further assume\n
    \  that the immediate NATs that A and B are connected to are UPnP-\n   enabled
    (NAT F and NAT G are UPnP-enabled).  We assume that NAT E\n   does not support
    hairpinning; that is, the NAT does not relay packets\n   originating from the
    private address space and destined for the\n   public address of the NAT, back
    to the private address of the NAT.\n   Before starting the qualification procedure,
    both A and B use UPnP to\n   reserve port mappings on their respective NATs.  They
    observe that\n   the UPnP operation succeeds and both clients obtain valid UPnP
    Mapped\n   Address/Port values.\n   Next, both client A and client B implement
    the qualification\n   procedure where they determine their mapped address/port
    values, as\n   specified in Section 5.2.1 of [RFC4380].\n   A and B both compare
    their UPnP Mapped Address/Port values with the\n   mapped address/port values
    obtained through the qualification\n   procedure.  Because both A and B are part
    of a two-layer NAT\n   topology, these values will be different.  Hence, both
    A and B\n   continue to hold on to their UPnP Mapped Address/Port.\n   The following
    packet exchange shows client A establishing\n   communication with client B.\n
    \  Teredo             Teredo                      Client A's  Client B's\n   Client
    \    NAT     Client        NAT      NAT    Teredo      Teredo\n      A        F
    \        B           G        E     Server      Server\n      |        |         |
    \          |        |        |           |\n      |        | Direct Bubble to
    B  |        |        |           |\n    1 |-------------------------------------->|
    \       |           |\n      |        |         |           |        |        |
    \          |\n      |       Indirect Bubble to B via B's Teredo Server           |\n
    \   2 |----------------------------------------------------------->|\n      |
    \       |         |<----------------------------------------|\n      |        |
    \        |           |        |        |           |\n      |        |         |
    Direct Bubble to A |        |           |\n    3 |        |         |------------------->|
    \       |           |\n      |        |         |           |        |        |
    \          |\n      |        |         |  Direct   |        |        |           |\n
    \     |        |         |Bubble to A|        |        |           |\n    4 |
    \       |         |---------->|        |        |           |\n      |        |
    \        |           |        |        |           |\n      |        |         |
    \ Direct   |        |        |           |\n      |        |         |Bubble to
    A|        |        |           |\n    5 |        |         |---------->|        |
    \       |           |\n      |<-----------------------------|        |        |
    \          |\n      |        |         |           |        |        |           |\n
    \     |        |         |    Indirect Bubble to A     |           |\n    6 |
    \       |         |---------------------------->|           |\n      |<-----------------------------------------------|
    \          |\n      |        |         |           |        |        |           |\n
    \     |Direct Bubble to B|           |        |        |           |\n    7 |----------------->|
    \          |        |        |           |\n      |        |         |           |
    \       |        |           |\n                     Hairpinning-Based Packet
    Exchange\n   1.   A sends a direct bubble (Packet 1) to the mapped address/port\n
    \       embedded in B's Teredo IPv6 address.\n   2.   The aforementioned direct
    bubble is dropped by NAT E, because it\n        does not support Hairpinning.\n
    \  3.   A sends out an indirect bubble (Packet 2) destined to B via B's\n        Teredo
    Server.  In this indirect bubble, A includes an Alternate\n        Address Trailer
    that includes both the local address/port and\n        the UPnP mapped address/port.\n
    \  4.   The aforementioned indirect bubble is received by B.  After\n        parsing
    the Alternate Address Trailer, B has a total of three\n        addresses to communicate
    with: two from the Alternate Address\n        Trailer and one from the mapped
    address/port embedded in A's\n        Teredo IPv6 address.  B then responds with
    the following\n        packets.  The first packet sent by B is a direct bubble
    (Packet\n        3) destined to the mapped address/port embedded in A's Teredo\n
    \       IPv6 address.\n   5.   The aforementioned direct bubble will be dropped
    by the NAT E\n        because it does not support Hairpinning.\n   6.   Because
    the local address/port was the first mapping in the\n        Alternate Address
    Trailer, the second direct bubble (Packet 4)\n        sent by B is destined to
    the local address/port.\n   7.   The aforementioned direct bubble is dropped because
    A and B are\n        positioned behind different NATs and hence have their own\n
    \       private address space.  A's local address is not reachable from\n        B.\n
    \  8.   The next direct bubble (Packet 5) is sent by B destined to A's\n        UPnP
    mapped address/port, which is the second mapping in the\n        Alternate Address
    Trailer sent by A.\n   9.   The aforementioned direct bubble is received by A
    because A's\n        UPnP-mapped address is reachable from B.  A stores the source\n
    \       address from which the direct bubble was received in the mapped\n        address/port
    fields of the Peer Entry, as defined in Section 5.2\n        of [RFC4380].  Also,
    the mapped address status field (as\n        specified in Section 5.2.3 of [RFC4380])
    is changed to\n        \"trusted\".  At this point, communication in one direction
    (A to\n        B) is now possible, but not vice versa because B has not yet\n
    \       marked A as trusted.\n   10.  B also sends an indirect bubble (Packet
    6) to A via A's Teredo\n        server.  As part of the indirect bubble, B also
    includes an\n        Alternate Address Trailer, which contains the local address/port\n
    \       and the UPnP mapped address/port of B.\n   11.  The aforementioned indirect
    bubble is received by A.  After\n        parsing the Alternate Address Trailer,
    A adds the two addresses\n        in the Alternate Address Trailer to the Alternate
    Address List\n        in the Peer Entry.  Because the peer's mapping is \"trusted\"\n
    \       (point 9), A responds with only one direct bubble (Packet 7)\n        that
    is sent to the mapped address/port stored in the Peer\n        Entry.\n   12.
    \ The aforementioned direct bubble is received by B.  B records\n        the mapped
    address/port from which the direct bubble was\n        received in the mapped
    address/port field in its Peer Entry, and\n        changes the status of the mapped
    address to \"trusted\".  At this\n        point, communication is now possible
    in the other direction (B\n        to A).\n"
  title: 6.5.  Hairpinning Extension
- contents:
  - "6.6.  Server Load Reduction Extension\n   The following protocol example illustrates
    the use of the Server Load\n   Reduction Extension.\n   Assume that Teredo Client
    A (A) has established communication with\n   Teredo Client B (B).  Also, assume
    that at some later point when no\n   data packets have been exchanged between
    both clients for more than\n   30 seconds, the communication needs to be re-established
    because A\n   wants to send a data packet to B.\n   The following packet exchange
    helps A re-establish communication with\n   B.\n   Teredo           Client A's
    \             Client B's           Teredo\n   Client             Teredo                  Teredo
    \            Client\n      A        NAT    Server                  Server      NAT
    \      B\n      |         |        |                       |         |        |\n
    \     |         |        |  Direct Bubble to B   |         |        |\n    1 |------------------------------------------------------------>|\n
    \     |         |        |                       |         |        |\n      |
    \        |        |  Direct Bubble to A   |         |        |\n      |<------------------------------------------------------------|
    2\n      |         |        |                       |         |        |\n                   Server
    Load Reduction Packet Exchange\n   1.  A sends a direct bubble (Packet 1) with
    the Neighbor Discovery\n       Option Trailer, with the DiscoveryType field set
    to\n       TeredoDiscoverySolicitation.\n   2.  If the mapping on either of the
    NATs has not expired, the direct\n       bubble is received by B.  B parses the
    Neighbor Discovery Option\n       and because the DiscoveryType was set to\n       TeredoDiscoverySolicitation,
    B responds with a direct bubble\n       (Packet 2).  B's direct bubble also contains
    the Neighbor\n       Discovery Option and the DiscoveryType is set to\n       TeredoDiscoveryAdvertisement.\n
    \  3.  The aforementioned direct bubble is received by A and at this\n       point,
    communication between the Teredo clients is re-\n       established.\n"
  title: 6.6.  Server Load Reduction Extension
- contents:
  - "7.  Security Considerations\n   Security considerations are the same as those
    specified in Section 7\n   of [RFC4380].\n   In addition, the Hairpinning Extension
    introduces the possibility of\n   an amplification attack if a malicious user
    could advertise a large\n   number of port mappings in the Alternate Address Trailer,
    resulting\n   in a large number of direct bubbles sent in response.  Because of\n
    \  this, Section 4.3 explicitly limits the number of addresses that a\n   Teredo
    client will accept.\n   Because the nonce in the Nonce Trailer is used (as specified
    in\n   Section 5.2.4.4) to prevent spoofing of bubbles that would result in\n
    \  directing traffic to the wrong place, it is important that the nonce\n   be
    random so that attackers cannot predict its value.  See [RFC4086]\n   for further
    discussion of randomness requirements.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  Acknowledgements\n   Thanks to Gurpreet Virdi and Poorna Gaddehosur for technical\n
    \  contributions to this document, and to the V6OPS WG and Jari Arkko\n   for
    their helpful reviews.\n"
  title: 8.  Acknowledgements
- contents:
  - "9.  IANA Considerations\n   IANA has created a new trailer Type registry.  Requests
    for new\n   trailer Type values are made through Specification Required\n   [RFC5226].
    \ Initial values are listed below.\n   Trailer Type  Usage                              Reference\n
    \  ------------  ---------------------------------  ---------\n      0x01       Nonce
    Trailer                      RFC 6081\n      0x02       Random Port Trailer                RFC
    6081\n      0x03       Alternate Address Trailer          RFC 6081\n      0x04
    \      Neighbor Discovery Option Trailer  RFC 6081\n"
  title: 9.  IANA Considerations
- contents:
  - '10.  References

    '
  title: 10.  References
- contents:
  - "10.1.  Normative References\n   [RFC1918]    Rekhter, Y., Moskowitz, R., Karrenberg,
    D., Groot, G.,\n                and E. Lear, \"Address Allocation for Private
    Internets\",\n                BCP 5, RFC 1918, February 1996.\n   [RFC2119]    Bradner,
    S., \"Key words for use in RFCs to Indicate\n                Requirement Levels\",
    BCP 14, RFC 2119, March 1997.\n   [RFC2460]    Deering, S. and R. Hinden, \"Internet
    Protocol, Version 6\n                (IPv6) Specification\", RFC 2460, December
    1998.\n   [RFC4380]    Huitema, C., \"Teredo: Tunneling IPv6 over UDP through\n
    \               Network Address Translations (NATs)\", RFC 4380,\n                February
    2006.\n   [RFC4861]    Narten, T., Nordmark, E., Simpson, W., and H. Soliman,\n
    \               \"Neighbor Discovery for IP version 6 (IPv6)\", RFC 4861,\n                September
    2007.\n   [RFC5226]    Narten, T. and H. Alvestrand, \"Guidelines for Writing
    an\n                IANA Considerations Section in RFCs\", BCP 26, RFC 5226,\n
    \               May 2008.\n   [UPNPWANIP]  UPnP Forum, \"WANIPConnection:1\",
    November 2001,\n                <http://www.upnp.org/standardizeddcps/documents/\n
    \               UPnP_IGD_WANIPConnection%201.0.pdf>.\n"
  title: 10.1.  Normative References
- contents:
  - "10.2.  Informative References\n   [RFC4086]    Eastlake, D., Schiller, J., and
    S. Crocker, \"Randomness\n                Requirements for Security\", BCP 106,
    RFC 4086,\n                June 2005.\n   [RFC4443]    Conta, A., Deering, S.,
    and M. Gupta, \"Internet Control\n                Message Protocol (ICMPv6) for
    the Internet Protocol\n                Version 6 (IPv6) Specification\", RFC 4443,
    March 2006.\n   [RFC4787]    Audet, F. and C. Jennings, \"Network Address Translation\n
    \               (NAT) Behavioral Requirements for Unicast UDP\", BCP 127,\n                RFC
    4787, January 2007.\n"
  title: 10.2.  Informative References
- contents:
  - "Author's Address\n   Dave Thaler\n   Microsoft Corporation\n   One Microsoft
    Way\n   Redmond, WA  98052\n   USA\n   Phone: +1 425 703 8835\n   EMail: dthaler@microsoft.com\n"
  title: Author's Address
