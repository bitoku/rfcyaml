- title: __initial_text__
  contents:
  - '       Graceful Restart Mechanism for Label Distribution Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a mechanism that helps to minimize the\n\
    \   negative effects on MPLS traffic caused by Label Switching Router's\n   (LSR's)\
    \ control plane restart, specifically by the restart of its\n   Label Distribution\
    \ Protocol (LDP) component, on LSRs that are capable\n   of preserving the MPLS\
    \ forwarding component across the restart.\n   The mechanism described in this\
    \ document is applicable to all LSRs,\n   both those with the ability to preserve\
    \ forwarding state during LDP\n   restart and those without (although the latter\
    \ needs to implement\n   only a subset of the mechanism described in this document).\n\
    \   Supporting (a subset of) the mechanism described here by the LSRs\n   that\
    \ can not preserve their MPLS forwarding state across the restart\n   would not\
    \ reduce the negative impact on MPLS traffic caused by their\n   control plane\
    \ restart, but it would minimize the impact if their\n   neighbor(s) are capable\
    \ of preserving the forwarding state across the\n   restart of their control plane\
    \ and implement the mechanism described\n   here.\n   The mechanism makes minimalistic\
    \ assumptions on what has to be\n   preserved across restart - the mechanism assumes\
    \ that only the actual\n   MPLS forwarding state has to be preserved; the mechanism\
    \ does not\n   require any of the LDP-related states to be preserved across the\n\
    \   restart.\n   The procedures described in this document apply to downstream\n\
    \   unsolicited label distribution.  Extending these procedures to\n   downstream\
    \ on demand label distribution is for further study.\n"
- title: Specification of Requirements
  contents:
  - "Specification of Requirements\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in BCP 14, RFC 2119\n   [RFC2119].\n"
- title: 1. Motivation
  contents:
  - "1. Motivation\n   For the sake of brevity in the context of this document, by\
    \ \"the\n   control plane\" we mean \"the LDP component of the control plane\"\
    .\n   For the sake of brevity in the context of this document, by \"MPLS\n   forwarding\
    \ state\" we mean either <incoming label -> (outgoing label,\n   next hop)> (non-ingress\
    \ case), or <FEC->(outgoing label, next hop)>\n   (ingress case) mapping.\n  \
    \ In the case where a Label Switching Router (LSR) could preserve its\n   MPLS\
    \ forwarding state across restart of its control plane,\n   specifically its LDP\
    \ component [LDP], it is desirable not to perturb\n   the LSPs going through that\
    \ LSR (specifically, the LSPs established\n   by LDP).  In this document, we describe\
    \ a mechanism, termed \"LDP\n   Graceful Restart\", that allows the accomplishment\
    \ of this goal.\n   The mechanism described in this document is applicable to\
    \ all LSRs,\n   both those with the ability to preserve forwarding state during\
    \ LDP\n   restart and those without (although the latter need to implement only\n\
    \   a subset of the mechanism described in this document).  Supporting (a\n  \
    \ subset of) the mechanism described here by the LSRs that can not\n   preserve\
    \ their MPLS forwarding state across the restart would not\n   reduce the negative\
    \ impact on MPLS traffic caused by their control\n   plane restart, but it would\
    \ minimize the impact if their neighbor(s)\n   are capable of preserving the forwarding\
    \ state across the restart of\n   their control plane and implement the mechanism\
    \ described here.\n   The mechanism makes minimalistic assumptions on what has\
    \ to be\n   preserved across restart - the mechanism assumes that only the actual\n\
    \   MPLS forwarding state has to be preserved.  Clearly this is the\n   minimum\
    \ amount of state that has to be preserved across the restart\n   in order not\
    \ to perturb the LSPs traversing a restarting LSR.  The\n   mechanism does not\
    \ require any of the LDP-related states to be\n   preserved across the restart.\n\
    \   In the scenario where label binding on an LSR is created/maintained\n   not\
    \ just by the LDP component of the control plane, but by other\n   protocol components\
    \ as well (e.g., BGP, RSVP-TE), and the LSR\n   supports restart of the individual\
    \ components of the control plane\n   that create/maintain label binding (e.g.,\
    \ restart of LDP, but no\n   restart of BGP), the LSR needs to preserve across\
    \ the restart the\n   information about which protocol has assigned which labels.\n\
    \   The procedures described in this document apply to downstream\n   unsolicited\
    \ label distribution.  Extending these procedures to\n   downstream on demand\
    \ label distribution is for further study.\n"
- title: 2. LDP Extension
  contents:
  - "2. LDP Extension\n   An LSR indicates that it is capable of supporting LDP Graceful\n\
    \   Restart, as defined in this document, by including the Fault Tolerant\n  \
    \ (FT) Session TLV as an Optional Parameter in the LDP Initialization\n   message.\
    \  The format of the FT Session TLV is defined in [FT-LDP].\n   The L (Learn from\
    \ Network) flag MUST be set to 1, which indicates\n   that the procedures in this\
    \ document are used.  The rest of the FT\n   flags are set to 0 by a sender and\
    \ ignored on receipt.\n   The value field of the FT Session TLV contains two components\
    \ that\n   are used by the mechanisms defined in this document: FT Reconnect\n\
    \   Timeout, and Recovery Time.\n   The FT Reconnect Timeout is the time (in milliseconds)\
    \ that the\n   sender of the TLV would like the receiver of that TLV to wait after\n\
    \   the receiver detects the failure of LDP communication with the\n   sender.\
    \  While waiting, the receiver SHOULD retain the MPLS\n   forwarding state for\
    \ the (already established) LSPs that traverse a\n   link between the sender and\
    \ the receiver.  The FT Reconnect Timeout\n   should be long enough to allow the\
    \ restart of the control plane of\n   the sender of the TLV, and specifically\
    \ its LDP component to bring it\n   to the state where the sender could exchange\
    \ LDP messages with its\n   neighbors.\n   Setting the FT Reconnect Timeout to\
    \ 0 indicates that the sender of\n   the TLV will not preserve its forwarding\
    \ state across the restart,\n   yet the sender supports the procedures, defined\
    \ in Section 3.3,\n   \"Restart of LDP communication with a neighbor LSR\" of\
    \ this document,\n   and therefore could take advantage if its neighbor to preserve\
    \ its\n   forwarding state across the restart.\n   For a restarting LSR, the Recovery\
    \ Time carries the time (in\n   milliseconds) the LSR is willing to retain its\
    \ MPLS forwarding state\n   that it preserved across the restart.  The time is\
    \ from the moment\n   the LSR sends the Initialization message that carries the\
    \ FT Session\n   TLV after restart.  Setting this time to 0 indicates that the\
    \ MPLS\n   forwarding state was not preserved across the restart (or even if it\n\
    \   was preserved, is no longer available).\n   The Recovery Time SHOULD be long\
    \ enough to allow the neighboring\n   LSR's to re-sync all the LSP's in a graceful\
    \ manner, without creating\n   congestion in the LDP control plane.\n"
- title: 3. Operations
  contents:
  - "3. Operations\n   An LSR that supports functionality described in this document\n\
    \   advertises this to its LDP neighbors by carrying the FT Session TLV\n   in\
    \ the LDP Initialization message.\n   This document assumes that in certain situations,\
    \ as specified in\n   section 3.1.2, \"Egress LSR\", in addition to the MPLS forwarding\n\
    \   state, an LSR can also preserve its IP forwarding state across the\n   restart.\
    \  Procedures for preserving an IP forwarding state across the\n   restart are\
    \ defined in [OSPF-RESTART], [ISIS-RESTART], and [BGP-\n   RESTART].\n"
- title: 3.1. Procedures for the restarting LSR
  contents:
  - "3.1. Procedures for the restarting LSR\n   After an LSR restarts its control\
    \ plane, the LSR MUST check whether\n   it was able to preserve its MPLS forwarding\
    \ state from prior to the\n   restart.  If not, then the LSR sets the Recovery\
    \ Time to 0 in the FT\n   Session TLV the LSR sends to its neighbors.\n   If the\
    \ forwarding state has been preserved, then the LSR starts its\n   internal timer,\
    \ called MPLS Forwarding State Holding timer (the value\n   of that timer SHOULD\
    \ be configurable), and marks all the MPLS\n   forwarding state entries as \"\
    stale\".  At the expiration of the timer,\n   all the entries still marked as\
    \ stale SHOULD be deleted.  The value\n   of the Recovery Time advertised in the\
    \ FT Session TLV is set to the\n   (current) value of the timer at the point in\
    \ which the Initialization\n   message carrying the FT Session TLV is sent.\n\
    \   We say that an LSR is in the process of restarting when the MPLS\n   Forwarding\
    \ State Holding timer is not expired.  Once the timer\n   expires, we say that\
    \ the LSR completed its restart.\n   The following procedures apply when an LSR\
    \ is in the process of\n   restarting.\n"
- title: 3.1.1. Non-egress LSR
  contents:
  - "3.1.1. Non-egress LSR\n   If the label carried in the newly received Mapping\
    \ message is not an\n   Implicit NULL, the LSR searches its MPLS forwarding state\
    \ for an\n   entry with the outgoing label equal to the label carried in the\n\
    \   message, and the next hop equal to one of the addresses (next hops)\n   received\
    \ in the Address message from the peer.  If such an entry is\n   found, the LSR\
    \ no longer marks the entry as stale.  In addition, if\n   the entry is of type\
    \ <incoming label, (outgoing label, next hop)>\n   (rather than <FEC, (outgoing\
    \ label, next hop)>), the LSR associates\n   the incoming label from that entry\
    \ with the FEC received in the Label\n   Mapping message, and advertises (via\
    \ LDP) <incoming label, FEC> to\n   its neighbors.  If the found entry has no\
    \ incoming label, or if no\n   entry is found, the LSR follows the normal LDP\
    \ procedures.  (Note\n   that this paragraph describes the scenario where the\
    \ restarting LSR\n   is neither the egress, nor the penultimate hop that uses\
    \ penultimate\n   hop popping for a particular LSP.  Note also that this paragraph\n\
    \   covers the case where the restarting LSR is the ingress.)\n   If the label\
    \ carried in the Mapping message is an Implicit NULL\n   label, the LSR searches\
    \ its MPLS forwarding state for an entry that\n   indicates Label pop (means no\
    \ outgoing label), and the next hop equal\n   to one of the addresses (next hops)\
    \ received in the Address message\n   from the peer.  If such an entry is found,\
    \ the LSR no longer marks\n   the entry as stale, the LSR associates the incoming\
    \ label from that\n   entry with the FEC received in the Label Mapping message\
    \ from the\n   neighbor, and advertises (via LDP) <incoming label, FEC> to its\n\
    \   neighbors.  If the found entry has no incoming label, or if no entry\n   is\
    \ found, the LSR follows the normal LDP procedures.  (Note that this\n   paragraph\
    \ describes the scenario where the restarting LSR is a\n   penultimate hop for\
    \ a particular LSP, and this LSP uses penultimate\n   hop popping.)\n   The description\
    \ in the above paragraph assumes that the restarting\n   LSR generates the same\
    \ label for all the LSPs that terminate on the\n   same LSR (different from the\
    \ restarting LSR), and for which the\n   restarting LSR is a penultimate hop.\
    \  If this is not the case, and\n   the restarting LSR generates a unique label\
    \ per each such LSP, then\n   the LSR needs to preserve across the restart, not\
    \ just the <incoming\n   label, (outgoing label, next hop)> mapping, but also\
    \ the FEC\n   associated with this mapping.  In such case, the LSR searches its\n\
    \   MPLS forwarding state for an entry that (a) indicates Label pop\n   (means\
    \ no outgoing label), (b) indicates the next hop equal to one of\n   the addresses\
    \ (next hops) received in the Address message from the\n   peer, and (c) has the\
    \ same FEC as the one received in the Label\n   Mapping message.  If such an entry\
    \ is found, the LSR no longer marks\n   the entry as stale, the LSR associates\
    \ the incoming label from that\n   entry with the FEC received in the Label Mapping\
    \ message from the\n   neighbor, and advertises (via LDP) <incoming label, FEC>\
    \ to its\n   neighbors.  If the found entry has no incoming label, or if no entry\n\
    \   is found, the LSR follows the normal LDP procedures.\n"
- title: 3.1.2. Egress LSR
  contents:
  - "3.1.2. Egress LSR\n   If an LSR determines that it is an egress for a particular\
    \ FEC, the\n   LSR is configured to generate a non-NULL label for that FEC, and\
    \ that\n   the LSR is configured to generate the same (non-NULL) label for all\n\
    \   the FECs that share the same next hop and for which the LSR is an\n   egress,\
    \ the LSR searches its MPLS forwarding state for an entry that\n   indicates Label\
    \ pop (means no outgoing label), and the next hop equal\n   to the next hop for\
    \ that FEC.  (Determining the next hop for the FEC\n   depends on the type of\
    \ the FEC.  For example, when the FEC is an IP\n   address prefix, the next hop\
    \ for that FEC is determined from the IP\n   forwarding table.)  If such an entry\
    \ is found, the LSR no longer\n   marks this entry as stale, the LSR associates\
    \ the incoming label from\n   that entry with the FEC, and advertises (via LDP)\
    \ <incoming label,\n   FEC> to its neighbors.  If the found entry has no incoming\
    \ label, or\n   if no entry is found, the LSR follows the normal LDP procedures.\n\
    \   If an LSR determines that it is an egress for a particular FEC, the\n   LSR\
    \ is configured to generate a non-NULL label for that FEC, and that\n   the LSR\
    \ is configured to generate a unique label for each such FEC,\n   then the LSR\
    \ needs to preserve across the restart, not just the\n   <incoming label, (outgoing\
    \ label, next hop)> mapping, but also the\n   FEC associated with this mapping.\
    \  In such case, the LSR would search\n   its MPLS forwarding state for an entry\
    \ that indicates Label pop\n   (means no outgoing label), and the next hop equal\
    \ to the next hop for\n   that FEC associated with the entry (Determining the\
    \ next hop for the\n   FEC depends on the type of the FEC.  For example, when\
    \ the FEC is an\n   IP address prefix, the next hop for that FEC is determined\
    \ from the\n   IP forwarding table.)  If such an entry is found, the LSR no longer\n\
    \   marks this entry as stale, the LSR associates the incoming label from\n  \
    \ that entry with the FEC, and advertises (via LDP) <incoming label,\n   FEC>\
    \ to its neighbors.  If the found entry has no incoming label, or\n   if no entry\
    \ is found, the LSR follows the normal LDP procedures.\n   If an LSR determines\
    \ that it is an egress for a particular FEC, and\n   the LSR is configured to\
    \ generate a NULL (either Explicit or\n   Implicit) label for that FEC, the LSR\
    \ just advertises (via LDP) such\n   label (together with the FEC) to its neighbors.\n"
- title: 3.2. Alternative procedures for the restarting LSR
  contents:
  - "3.2. Alternative procedures for the restarting LSR\n   In this section we describe\
    \ an alternative to the procedures\n   described in Section 3.1, \"Procedures\
    \ for the restarting LSR\".\n   The procedures described in this section assumes\
    \ that the restarting\n   LSR has (at least) as many unallocated as allocated\
    \ labels.  The\n   latter form the MPLS forwarding state that the LSR managed\
    \ to\n   preserve across the restart.\n   After an LSR restarts its control plane,\
    \ the LSR MUST check whether\n   it was able to preserve its MPLS forwarding state\
    \ from prior to the\n   restart.  If no, then the LSR sets the Recovery Time to\
    \ 0 in the FT\n   Session TLV the LSR sends to its neighbors.\n   If the forwarding\
    \ state has been preserved, then the LSR starts its\n   internal timer, called\
    \ MPLS Forwarding State Holding timer (the value\n   of that timer SHOULD be configurable),\
    \ and marks all the MPLS\n   forwarding state entries as \"stale\".  At the expiration\
    \ of the timer,\n   all the entries still marked as stale SHOULD be deleted. \
    \ The value\n   of the Recovery Time advertised in the FT Session TLV is set to\
    \ the\n   (current) value of the timer at the point when the Initialization\n\
    \   message carrying the FT Session TLV is sent.\n   We say that an LSR is in\
    \ the process of restarting when the MPLS\n   Forwarding State Holding timer is\
    \ not expired.  Once the timer\n   expires, we say that the LSR completed its\
    \ restart.\n   While an LSR is in the process of restarting, the LSR creates local\n\
    \   label binding by following the normal LDP procedures.\n   Note that while\
    \ an LSR is in the process of restarting, the LSR may\n   have not one, but two\
    \ local label bindings for a given FEC - one that\n   was retained from prior\
    \ to restart, and another that was created\n   after the restart.  Once the LSR\
    \ completes its restart, the former\n   will be deleted.  Both of these bindings\
    \ though would have the same\n   outgoing label (and the same next hop).\n"
- title: 3.3. Restart of LDP communication with a neighbor LSR
  contents:
  - "3.3. Restart of LDP communication with a neighbor LSR\n   When an LSR detects\
    \ that its LDP session with a neighbor went down,\n   and the LSR knows that the\
    \ neighbor is capable of preserving its MPLS\n   forwarding state across the restart\
    \ (as was indicated by the FT\n   Session TLV in the Initialization message received\
    \ from the\n   neighbor), the LSR retains the label-FEC bindings received via\
    \ that\n   session (rather than discarding the bindings), but marks them as\n\
    \   \"stale\".\n   After detecting that the LDP session with the neighbor went\
    \ down, the\n   LSR tries to re-establish LDP communication with the neighbor\n\
    \   following the usual LDP procedures.\n   The amount of time the LSR keeps its\
    \ stale label-FEC bindings is set\n   to the lesser of the FT Reconnect Timeout,\
    \ as was advertised by the\n   neighbor, and a local timer, called the Neighbor\
    \ Liveness Timer.  If\n   within that time the LSR still does not establish an\
    \ LDP session with\n   the neighbor, all the stale bindings SHOULD be deleted.\
    \  The Neighbor\n   Liveness Timer is started when the LSR detects that its LDP\
    \ session\n   with the neighbor went down.  The value of the Neighbor Liveness\n\
    \   timer SHOULD be configurable.\n   If the LSR re-establishes an LDP session\
    \ with the neighbor within the\n   lesser of the FT Reconnect Timeout and the\
    \ Neighbor Liveness Timer,\n   and the LSR determines that the neighbor was not\
    \ able to preserve its\n   MPLS forwarding state, the LSR SHOULD immediately delete\
    \ all the\n   stale label-FEC bindings received from that neighbor.  If the LSR\n\
    \   determines that the neighbor was able to preserve its MPLS forwarding\n  \
    \ state (as was indicated by the non-zero Recovery Time advertised by\n   the\
    \ neighbor), the LSR SHOULD further keep the stale label-FEC\n   bindings, received\
    \ from the neighbor, for as long as the lesser of\n   the Recovery Time advertised\
    \ by the neighbor, and a local\n   configurable value, called Maximum Recovery\
    \ Time, allows.\n   The LSR SHOULD try to complete the exchange of its label mapping\n\
    \   information with the neighbor within 1/2 of the Recovery Time, as\n   specified\
    \ in the FT Session TLV received from the neighbor.\n   The LSR handles the Label\
    \ Mapping messages received from the neighbor\n   by following the normal LDP\
    \ procedures, except that (a) it treats the\n   stale entries in its Label Information\
    \ Base (LIB) as if these entries\n   have been received over the (newly established)\
    \ session, (b) if the\n   label-FEC binding carried in the message is the same\
    \ as the one that\n   is present in the LIB, but is marked as stale, the LIB entry\
    \ is no\n   longer marked as stale, and (c) if for the FEC in the label-FEC\n\
    \   binding carried in the message there is already a label-FEC binding\n   in\
    \ the LIB that is marked as stale, and the label in the LIB binding\n   is different\
    \ from the label carried in the message, the LSR just\n   updates the LIB entry\
    \ with the new label.\n   An LSR, once it creates a <label, FEC> binding, SHOULD\
    \ keep the value\n   of the label in this binding for as long as the LSR has a\
    \ route to\n   the FEC in the binding.  If the route to the FEC disappears, and\
    \ then\n   re-appears again later, this may result in using a different label\n\
    \   value, as when the route re-appears, the LSR would create a new\n   <label,\
    \ FEC> binding.\n   To minimize the potential mis-routing caused by the label\
    \ change when\n   creating a new <label, FEC> binding, the LSR SHOULD pick up\
    \ the least\n   recently used label.  Once an LSR releases a label, the LSR SHOULD\n\
    \   NOT re-use this label for advertising a <label, FEC> binding to a\n   neighbor\
    \ that supports graceful restart for at least the sum of the\n   FT Reconnect\
    \ Timeout plus Recovery Time, as advertised by the\n   neighbor to the LSR.\n"
- title: 4. Security Consideration
  contents:
  - "4. Security Consideration\n   The security considerations pertaining to the original\
    \ LDP protocol\n   [RFC3036] remain relevant.\n   In addition, LSRs that implement\
    \ the mechanism described here are\n   subject to to additional denial-of-service\
    \ attacks as follows:\n      An intruder may impersonate an LDP peer in order\
    \ to force a\n      failure and reconnection of the TCP connection, but where\
    \ the\n      intruder sets the Recovery Time to 0 on reconnection.  This forces\n\
    \      all labels received from the peer to be released.\n      An intruder could\
    \ intercept the traffic between LDP peers and\n      override the setting of the\
    \ Recovery Time to be set to 0.  This\n      forces all labels received from the\
    \ peer to be released.\n   All of these attacks may be countered by use of an\
    \ authentication\n   scheme between LDP peers, such as the MD5-based scheme outlined\
    \ in\n   [LDP].\n   As with LDP, a security issue may exist if an LDP implementation\n\
    \   continues to use labels after expiration of the session that first\n   caused\
    \ them to be used.  This may arise if the upstream LSR detects\n   the session\
    \ failure after the downstream LSR has released and re-used\n   the label.  The\
    \ problem is most obvious with the platform-wide label\n   space and could result\
    \ in mis-routing data to other than intended\n   destinations, and it is conceivable\
    \ that these behaviors may be\n   deliberately exploited to either obtain services\
    \ without\n   authorization or to deny services to others.\n   In this document,\
    \ the validity of the session may be extended by the\n   Reconnect Timeout, and\
    \ the session may be re-established in this\n   period.  After the expiry of the\
    \ Reconnection Timeout, the session\n   must be considered to have failed and\
    \ the same security issue applies\n   as described above.\n   However, the downstream\
    \ LSR may declare the session as failed before\n   the expiration of its Reconnection\
    \ Timeout.  This increases the\n   period during which the downstream LSR might\
    \ reallocate the label\n   while the upstream LSR continues to transmit data using\
    \ the old usage\n   of the label.  To reduce this issue, this document requires\
    \ that\n   labels not be re-used until at least the sum of Reconnect Timeout\n\
    \   plus Recovery Time.\n"
- title: 5. Intellectual Property Considerations
  contents:
  - "5. Intellectual Property Considerations\n   This section is taken from Section\
    \ 10.4 of [RFC2026].\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   intellectual property or other rights that might be claimed\
    \ to\n   pertain to the implementation or use of the technology described in\n\
    \   this document or the extent to which any license under such rights\n   might\
    \ or might not be available; neither does it represent that it\n   has made any\
    \ effort to identify any such rights.  Information on the\n   IETF's procedures\
    \ with respect to rights in standards-track and\n   standards-related documentation\
    \ can be found in BCP-11.  Copies of\n   claims of rights made available for publication\
    \ and any assurances of\n   licenses to be made available, or the result of an\
    \ attempt made to\n   obtain a general license or permission for the use of such\n\
    \   proprietary rights by implementors or users of this specification can\n  \
    \ be obtained from the IETF Secretariat.\n   The IETF invites any interested party\
    \ to bring to its attention any\n   copyrights, patents or patent applications,\
    \ or other proprietary\n   rights which may cover technology that may be required\
    \ to practice\n   this standard.  Please address the information to the IETF Executive\n\
    \   Director.\n   The IETF has been notified of intellectual property rights claimed\
    \ in\n   regard to some or all of the specification contained in this\n   document.\
    \  For more information consult the online list of claimed\n   rights.\n"
- title: 6. Acknowledgments
  contents:
  - "6. Acknowledgments\n   We would like to thank Loa Andersson, Chaitanya Kodeboyina,\
    \ Ina\n   Minei, Nischal Sheth, Enke Chen, and Adrian Farrel for their\n   contributions\
    \ to this document.\n"
- title: 7. Normative References
  contents:
  - "7. Normative References\n   [LDP]          Andersson, L., Doolan, P., Feldman,\
    \ N., Fredette, A.\n                  and B. Thomas, \"Label Distribution Protocol\"\
    , RFC\n                  3036, January 2001.\n   [FT-LDP]       Farrel, A., \"\
    Fault Tolerance for the Label\n                  Distribution Protocol (LDP)\"\
    , RFC 3479, February 2003.\n   [RFC2119]      Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                  Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2026]      Bradner, S., \"The Internet Standards Process\
    \ --\n                  Revision 3\", BCP 9, RFC 2026, October 1996.\n"
- title: 8. Informative References
  contents:
  - "8. Informative References\n   [OSPF-RESTART] \"Hitless OSPF Restart\", Work in\
    \ Progress.\n   [ISIS-RESTART] \"Restart signaling for ISIS\", Work in Progress.\n\
    \   [BGP-RESTART]  \"Graceful Restart Mechanism for BGP\", Work in\n         \
    \         Progress.\n"
- title: 9. Authors' Addresses
  contents:
  - "9. Authors' Addresses\n   Manoj Leelanivas\n   Juniper Networks\n   1194 N. Mathilda\
    \ Ave\n   Sunnyvale, CA 94089\n   EMail: manoj@juniper.net\n   Yakov Rekhter\n\
    \   Juniper Networks\n   1194 N. Mathilda Ave\n   Sunnyvale, CA 94089\n   EMail:\
    \ yakov@juniper.net\n   Rahul Aggarwal\n   Redback Networks\n   350 Holger Way\n\
    \   San Jose, CA 95134\n   EMail: rahul@redback.com\n"
- title: 10.  Full Copyright Statement
  contents:
  - "10.  Full Copyright Statement\n   Copyright (C) The Internet Society (2003).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
