- title: __initial_text__
  contents:
  - '          An Architectural Framework for Media Server Control

    '
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\
    \ in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n\
    \   Please review these documents carefully, as they describe your rights\n  \
    \ and restrictions with respect to this document.\n   This document may contain\
    \ material from IETF Documents or IETF\n   Contributions published or made publicly\
    \ available before November\n   10, 2008.  The person(s) controlling the copyright\
    \ in some of this\n   material may not have granted the IETF Trust the right to\
    \ allow\n   modifications of such material outside the IETF Standards Process.\n\
    \   Without obtaining an adequate license from the person(s) controlling\n   the\
    \ copyright in such materials, this document may not be modified\n   outside the\
    \ IETF Standards Process, and derivative works of it may\n   not be created outside\
    \ the IETF Standards Process, except to format\n   it for publication as an RFC\
    \ or to translate it into languages other\n   than English.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes an architectural framework for Media Server\n\
    \   control.  The primary focus will be to define logical entities that\n   exist\
    \ within the context of Media Server control, and define the\n   appropriate naming\
    \ conventions and interactions between them.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. Terminology .....................................................3\n  \
    \ 3. Architecture Overview ...........................................4\n   4.\
    \ SIP Usage .......................................................7\n   5. Media\
    \ Control for IVR Services .................................10\n      5.1. Basic\
    \ IVR Services ........................................11\n      5.2. IVR Services\
    \ with Mid-Call Controls .......................11\n      5.3. Advanced IVR Services\
    \ .....................................11\n   6. Media Control for Conferencing\
    \ Services ........................12\n      6.1. Creating a New Conference .................................14\n\
    \      6.2. Adding a Participant to a Conference ......................14\n  \
    \    6.3. Media Controls ............................................15\n    \
    \  6.4. Floor Control .............................................16\n   7. Security\
    \ Considerations ........................................21\n   8. Acknowledgments\
    \ ................................................22\n   9. Contributors ...................................................22\n\
    \   10. Informative References ........................................23\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Application Servers host one or more instances of a communications\n\
    \   application.  Media Servers provide real-time media processing\n   functions.\
    \  This document presents the core architectural framework\n   to allow Application\
    \ Servers to control Media Servers.  An overview\n   of the architecture describing\
    \ the core logical entities and their\n   interactions is presented in Section\
    \ 3.  The requirements for Media\n   Server control are defined in [RFC5167].\n\
    \   The Session Initiation Protocol (SIP) [RFC3261] is used as the\n   session\
    \ establishment protocol within this architecture.  Application\n   Servers use\
    \ it both to terminate media streams on Media Servers and\n   to create and manage\
    \ control channels for Media Server control\n   between themselves and Media Servers.\
    \  The detailed model for Media\n   Server control together with a description\
    \ of SIP usage is presented\n   in Section 4.\n   Several services are described\
    \ using the framework defined in this\n   document.  Use cases for Interactive\
    \ Voice Response (IVR) services\n   are described in Section 5, and conferencing\
    \ use cases are described\n   in Section 6.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The following terms are defined for use in this document\
    \ in the\n   context of Media Server control:\n   Application Server (AS):  A\
    \ functional entity that hosts one or more\n      instances of a communication\
    \ application.  The application server\n      may include the conference policy\
    \ server, the focus, and the\n      conference notification server, as defined\
    \ in [RFC4353].  Also, it\n      may include communication applications that use\
    \ IVR or\n      announcement services.\n   Media Functions:  Functions available\
    \ on a Media Server that are used\n      to supply media services to the AS. \
    \ Some examples are Dual-Tone\n      Multi-Frequency (DTMF) detection, mixing,\
    \ transcoding, playing\n      announcement, recording, etc.\n   Media Resource\
    \ Broker (MRB):  A logical entity that is responsible\n      for both the collection\
    \ of appropriate published Media Server (MS)\n      information and supplying\
    \ of appropriate MS information to\n      consuming entities.  The MRB is an optional\
    \ entity and will be\n      discussed in a separate document.\n   Media Server\
    \ (MS):  The media server includes the mixer as defined in\n      [RFC4353]. \
    \ The media server plays announcements, it processes\n      media streams for\
    \ functions like DTMF detection and transcoding.\n      The media server may also\
    \ record media streams for supporting IVR\n      functions like announcing conference\
    \ participants.  In the\n      architecture for the 3GPP IP Multimedia Subsystem\
    \ (IMS) a Media\n      Server is referred to as a Media Resource Function (MRF).\n\
    \   Media Services:  Application service requiring media functions such\n    \
    \  as Interactive Voice Response (IVR) or media conferencing.\n   Media Session:\
    \  From the Session Description Protocol (SDP)\n      specification [RFC4566]:\
    \ \"A multimedia session is a set of\n      multimedia senders and receivers and\
    \ the data streams flowing from\n      senders to receivers.  A multimedia conference\
    \ is an example of a\n      multimedia session.\"\n   MS Control Channel:  A reliable\
    \ transport connection between the AS\n      and MS used to exchange MS Control\
    \ PDUs.  Implementations must\n      support the Transport Control Protocol (TCP)\
    \ [RFC0793] and may\n      support the Stream Control Transmission Protocol (SCTP)\
    \ [RFC4960].\n      Implementations must support TLS [RFC5246] as a transport-level\n\
    \      security mechanism although its use in deployments is optional.\n   MS\
    \ Control Dialog:  A SIP dialog that is used for establishing a\n      control\
    \ channel between the user agent (UA) and the MS.\n   MS Control Protocol:  The\
    \ protocol used for by an AS to control an\n      MS.  The MS Control Protocol\
    \ assumes a reliable underlying\n      transport protocol for the MS Control Channel.\n\
    \   MS Media Dialog:  A SIP dialog between the AS and MS that is used for\n  \
    \    establishing media sessions between a user device such as a SIP\n      phone\
    \ and the MS.\n   The definitions for AS, MS, and MRB above are taken from [RFC5167].\n"
- title: 3.  Architecture Overview
  contents:
  - "3.  Architecture Overview\n   A Media Server (MS) is a network device that processes\
    \ media streams.\n   Examples of media processing functionality may include:\n\
    \   o  Control of the Real-Time Protocol (RTP) [RFC3550] streams using\n     \
    \ the Extended RTP Profile for Real-time Transport Control Protocol\n      (RTCP)-Based\
    \ Feedback (RTP/AVPF) [RFC4585].\n   o  Mixing of incoming media streams.\n  \
    \ o  Media stream source (for multimedia announcements).\n   o  Media stream processing\
    \ (e.g., transcoding, DTMF detection).\n   o  Media stream sink (for multimedia\
    \ recordings).\n   An MS supplies one or more media processing functionalities,\
    \ which\n   may include others than those illustrated above, to an Application\n\
    \   Server (AS).  An AS is able to send a particular call to a suitable\n   MS,\
    \ either through discovery of the capabilities that a specific MS\n   provides\
    \ or through the use of a Media Resource Broker.\n   The type of processing that\
    \ a Media Server performs on media streams\n   is specified and controlled by\
    \ an Application Server.  Application\n   Servers are logical entities that are\
    \ capable of running one or more\n   instances of a communications application.\
    \  Examples of Application\n   Servers that may interact with a Media Server are\
    \ an AS acting as a\n   Conference 'Focus' as defined in [RFC4353], or an IVR\
    \ application\n   using a Media Server to play announcements and detect DTMF key\n\
    \   presses.\n   Application servers use SIP to establish control channels between\n\
    \   themselves and MSs.  An MS Control Channel implements a reliable\n   transport\
    \ protocol that is used to carry the MS Control Protocol.  A\n   SIP dialog used\
    \ to establish a control channel is referred to as an\n   MS Control Dialog.\n\
    \   Application Servers terminate SIP [RFC3261] signaling from SIP User\n   Agents\
    \ and may terminate other signaling outside the scope of this\n   document.  They\
    \ use SIP Third Party Call Control [RFC3725] (3PCC) to\n   establish, maintain,\
    \ and tear down media streams from those SIP UAs\n   to a Media Server.  A SIP\
    \ dialog used by an AS to establish a media\n   session on an MS is referred to\
    \ as an MS Media Dialog.\n   Media streams go directly between SIP User Agents\
    \ and Media Servers.\n   Media Servers support multiple types of media.  Common\
    \ supported RTP\n   media types include audio and video, but others such as text\
    \ and the\n   Binary Floor Control Protocol (BFCP) [RFC4583] are also possible.\n\
    \   This basic architecture, showing session establishment signaling\n   between\
    \ a single AS and MS is shown in Figure 1 below.\n           +-------------+ \
    \                        +--------------+\n           |             | SIP (MS\
    \ Control Dialog) |              |\n           | Application |<----------------------->|\
    \     Media    |\n           |   Server    |                         |    Server\
    \    |\n           |             |<----------------------->|              |\n\
    \           +-------------+ SIP (MS Media Dialog)   +--------------+\n       \
    \                ^                               ^\n                        \\\
    \                              | RTP/SRTP\n                         \\       \
    \                      |  audio/\n                          \\               \
    \             | video/etc)\n                           \\                    \
    \       |\n                            \\                          v\n       \
    \                      \\                 +--------------+\n                 \
    \             \\     SIP        |              |\n                           \
    \    +-------------->|      SIP     |\n                                      \
    \         |  User Agent  |\n                                               | \
    \             |\n                                               +--------------+\n\
    \                  Figure 1: Basic Signaling Architecture\n   The architecture\
    \ must support a many-to-many relationship between\n   Application Servers and\
    \ Media Servers.  In real world deployments, an\n   Application Server may interact\
    \ with multiple Media Servers and/or a\n   Media Server may be controlled by more\
    \ than one Application Server.\n   Application Servers can use the SIP URI as\
    \ described in [RFC4240] to\n   request basic functions from Media Servers.  Basic\
    \ functions are\n   characterized as requiring no mid-call interactions between\
    \ the AS\n   and MS.  Examples of these functions are simple announcement-playing\n\
    \   or basic conference-mixing where the AS does not need to explicitly\n   control\
    \ the mixing.\n   Most services however have interactions between the AS and MS\
    \ during\n   a call or conference.  The type of interactions can be generalized\
    \ as\n   follows:\n   o  commands from an AS to an MS to request the application\
    \ or\n      configuration of a function.  The request may apply to a single\n\
    \      media stream, multiple media streams associated with multiple SIP\n   \
    \   dialogs, or to properties of a conference mix.\n   o  responses from an MS\
    \ to an AS reporting on the status of\n      particular commands.\n   o  notifications\
    \ from an MS to an AS that report results from\n      commands or notify changes\
    \ to subscribed status.\n   Commands, responses, and notifications are transported\
    \ using one or\n   more dedicated control channels between the Application Server\
    \ and\n   the Media Server.  Dedicated control channels provide reliable,\n  \
    \ sequenced, peer-to-peer transport for Media Server control\n   interactions.\
    \  Implementations must support the Transport Control\n   Protocol (TCP) [RFC0793]\
    \ and may support the Stream Control\n   Transmission Protocol (SCTP) [RFC4960].\
    \  Because MS control requires\n   sequenced reliable delivery of messages, unreliable\
    \ protocols such as\n   the User Datagram Protocol (UDP) are not suitable.  Implementations\n\
    \   must support TLS [RFC5246] as a transport-level security mechanism\n   although\
    \ its use in deployments is optional.  A dedicated control\n   channel is shown\
    \ in Figure 2 below.\n             +-------------+                     +--------------+\n\
    \             |             |                     |              |\n         \
    \    | Application |   MS ctrl channel   |     Media    |\n             |   Server\
    \    |<------------------->|    Server    |\n             |             |    \
    \                 |              |\n             +-------------+             \
    \        +--------------+\n                                                  \
    \       ^ ^ ^\n                                                RTP/SRTP | | |\n\
    \                                                (audio/  | | |\n            \
    \                                  video/etc) | | |\n                        \
    \                                 | | v\n                                    \
    \                 +---|-v-------+\n                                          \
    \         +-|---v-------+ |\n                                                \
    \ +-|-----------+ | |\n                                                 |    \
    \         | | |\n                                                 |     SIP  \
    \   | | |\n                                                 | User Agent  | |-+\n\
    \                                                 |             |-+\n        \
    \                                         +-------------+\n                Figure\
    \ 2: Media Server Control Architecture\n   Both Application Servers and Media\
    \ Servers may interact with other\n   servers for specific purposes beyond the\
    \ scope of this document.  For\n   example, Application Servers will often communicate\
    \ with other\n   infrastructure components that are usually based on deployment\n\
    \   requirements with links to back-office data stores and applications.\n   Media\
    \ Servers will often retrieve announcements from external file\n   servers.  Also,\
    \ many Media Servers support IVR dialog services using\n   VoiceXML [W3C.REC-voicexml20-20040316].\
    \  In this case, the MS\n   interacts with other servers using HTTP during standard\
    \ VoiceXML\n   processing.  VoiceXML Media Servers may also interact with speech\n\
    \   engines (for example, using the Media Resource Control Protocol\n   version\
    \ 2 (MRCPv2)) for speech recognition and generation purposes.\n   Some specific\
    \ types of interactions between Application and Media\n   servers are also out\
    \ of scope for this document.  MS resource\n   reservation is one such interaction.\
    \  Also, any interactions between\n   Application Servers, or between Media Servers,\
    \ are also out of scope.\n"
- title: 4.  SIP Usage
  contents:
  - "4.  SIP Usage\n   The Session Initiation Protocol (SIP) [RFC3261] was developed\
    \ by the\n   IETF for the purposes of initiating, managing, and terminating\n\
    \   multimedia sessions.  The popularity of SIP has grown dramatically\n   since\
    \ its inception and is now the primary Voice over IP (VoIP)\n   protocol.  This\
    \ includes being selected as the basis for\n   architectures such as the IP Multimedia\
    \ Subsystem (IMS) in 3GPP and\n   included in many of the early live deployments\
    \ of VoIP-related\n   systems.  Media servers are not a new concept in IP telephony\n\
    \   networks and there have been numerous signaling protocols and\n   techniques\
    \ proposed for their control.  The most popular techniques\n   to date have used\
    \ a combination of SIP and various markup languages\n   to convey media service\
    \ requests and responses.\n   As discussed in Section 3 and illustrated in Figure\
    \ 1, the logical\n   architecture described by this document involves interactions\
    \ between\n   an Application Server (AS) and a Media Server (MS).  The SIP\n \
    \  interactions can be broken into \"MS media dialogs\" that are used\n   between\
    \ an AS and an MS to establish media sessions between an\n   endpoint and a Media\
    \ Server, and \"MS control dialogs\" that are used\n   to establish and maintain\
    \ MS control channels.\n   SIP is the primary signaling protocol for session signaling\
    \ and is\n   used for all media sessions directed towards a Media Server as\n\
    \   described in this document.  Media Servers may support other\n   signaling\
    \ protocols but this type of interaction is not considered\n   here.  Application\
    \ Servers may terminate non-SIP signaling protocols\n   but must gateway those\
    \ requests to SIP when interacting with a Media\n   Server.\n   SIP will also\
    \ be used for the creation, management, and termination\n   of the dedicated MS\
    \ control channel(s).  Control channel(s) provide\n   reliable sequenced delivery\
    \ of MS Control Protocol messages.  The\n   Application and Media Servers use\
    \ the SDP attributes defined in\n   [RFC4145] to allow SIP negotiation of the\
    \ control channel.  A control\n   channel is closed when SIP terminates the corresponding\
    \ MS control\n   dialog.  Further details and example flows are provided in the\
    \ SIP\n   Control Framework [SIP-CTRL-FW].  The SIP Control Framework also\n \
    \  includes basic control message semantics corresponding to the types\n   of\
    \ interactions identified in Section 3.  It uses the concept of\n   \"packages\"\
    \ to allow domain-specific protocols to be defined using the\n   Extensible Markup\
    \ Language (XML) [W3C.REC-xml-20060816] format.  The\n   MS Control Protocol is\
    \ made up of one or more packages for the SIP\n   Control Framework.\n   Using\
    \ SIP for both media and control dialogs provides a number of\n   inherent benefits\
    \ over other potential techniques.  These include:\n   1.  The use of SIP location\
    \ and rendezvous capabilities, as defined\n       in [RFC3263].  This provides\
    \ core mechanisms for routing a SIP\n       request based on techniques such as\
    \ DNS SRV and NAPTR records.\n       The SIP infrastructure makes heavy use of\
    \ such techniques.\n   2.  The security and identity properties of SIP; for example,\
    \ using\n       TLS for reliably and securely connecting to another SIP-based\n\
    \       entity.  The SIP protocol has a number of identity mechanisms\n      \
    \ that can be used.  [RFC3261] provides an intra-domain digest-\n       based\
    \ mechanism and [RFC4474] defines a certificate-based inter-\n       domain identity\
    \ mechanism.  SIP with S/MIME provides the ability\n       to secure payloads\
    \ using encrypted and signed certificate\n       techniques.\n   3.  SIP has extremely\
    \ powerful and dynamic media-negotiation\n       properties as defined in [RFC3261]\
    \ and [RFC3264].\n   4.  The ability to select an appropriate SIP entity based\
    \ on\n       capability sets as discussed in [RFC3840].  This provides a\n   \
    \    powerful function that allows Media Servers to convey a specific\n      \
    \ capability set.  An AS is then free to select an appropriate MS\n       based\
    \ on its requirements.\n   5.  Using SIP also provides consistency with IETF protocols\
    \ and\n       usages.  SIP was intended to be used for the creation and\n    \
    \   management of media sessions, and this provides a correct usage\n       of\
    \ the protocol.\n   As mentioned previously in this section, media services using\
    \ SIP are\n   fairly well understood.  Some previous proposals suggested using\
    \ the\n   SIP INFO [RFC2976] method as the transport vehicle between the AS and\n\
    \   MS.  Using SIP INFO in this way is not advised for a number of\n   reasons,\
    \ which include:\n   o  INFO is an opaque request with no specific semantics.\
    \  A SIP\n      endpoint that receives an INFO request does not know what to do\n\
    \      with it based on SIP signaling.\n   o  SIP INFO was not created to carry\
    \ generic session control\n      information along the signaling path, and it\
    \ should only really be\n      used for optional application information, e.g.,\
    \ carrying mid-call\n      Public Switched Telephone Network (PSTN) signaling\
    \ messages\n      between PSTN gateways.\n   o  SIP INFO traverses the signaling\
    \ path, which is an inefficient use\n      for control messages that can be routed\
    \ directly between the AS\n      and MS.\n   o  [RFC3261] contains rules when\
    \ using an unreliable protocol such as\n      UDP.  When a packet reaches a size\
    \ close to the Maximum\n      Transmission Unit (MTU), the protocol should be\
    \ changed to TCP.\n      This type of operation is not ideal when constantly dealing\
    \ with\n      large payloads such as XML-formatted MS control messages.\n"
- title: 5.  Media Control for IVR Services
  contents:
  - "5.  Media Control for IVR Services\n   One of the functions of a Media Server\
    \ is to assist an Application\n   Server that is implementing IVR services by\
    \ performing media\n   processing functions on media streams.  Although \"IVR\"\
    \ is somewhat\n   generic terminology, the scope of media functions provided by\
    \ an MS\n   addresses the needs for user interaction dialogs.  These functions\n\
    \   include media transcoding, basic announcements, user input detection\n   (via\
    \ DTMF or speech), and media recording.\n   A particular IVR or user dialog application\
    \ typically requires the\n   use of several specific media functions, as described\
    \ above.  The\n   range and complexity of IVR dialogs can vary significantly,\
    \ from a\n   simple single announcement play-back to complex voice mail\n   applications.\n\
    \   As previously discussed, an AS uses SIP [RFC3261] and SDP [RFC4566]\n   to\
    \ establish and configure media sessions to a Media Server.  An AS\n   uses the\
    \ MS control channel, established using SIP, to invoke IVR\n   requests and to\
    \ receive responses and notifications.  This topology\n   is shown in Figure 3\
    \ below.\n      +-------------+             SIP              +-------------+\n\
    \      | Application |<---------------------------->|   Media     |\n      | \
    \   Server   | (media & MS Control dialogs) |   Server    |\n      |         \
    \    |                              |             |\n      |             |  MS\
    \ Control Protocol (IVR)   |             |\n      |             |<---------------------------->|\
    \ (IVR media  |\n      | (App logic) |       (CtrlChannel)          | functions)\
    \  |\n      +-------------+                              +-------------+\n   \
    \          ^                                            ^^\n              \\ \
    \                                          ||  R\n               \\          \
    \                                ||  T\n                \\                   \
    \                      ||  P\n                 \\                            \
    \            ||  /\n                  \\                                     \
    \  ||  S\n                   \\                                      ||  R\n \
    \                   \\                                     ||  T\n           \
    \          \\                                    ||  P\n                     \
    \ \\                                   vv\n                       \\    call signaling\
    \           +-----------+\n                        ---------------------------->|\
    \   User    |\n                              (e.g., SIP)            | Equipment\
    \ |\n                                                     +-----------+\n    \
    \                      Figure 3: IVR Topology\n   The variety in complexity of\
    \ Application Server IVR services requires\n   support for different levels of\
    \ media functions from the Media Server\n   as described in the following sub-sections.\n"
- title: 5.1.  Basic IVR Services
  contents:
  - "5.1.  Basic IVR Services\n   For simple basic announcement requests, the MS control\
    \ channel, as\n   depicted in Figure 3 above, is not required.  Simple announcement\n\
    \   requests may be invoked on the Media Server using the SIP URI\n   mechanism\
    \ defined in [RFC4240].  This interface allows no digit\n   detection or collection\
    \ of user input and no mid-call dialog control.\n   However, many applications\
    \ only require basic media services, and the\n   processing burden on the Media\
    \ Server to support more complex\n   interactions with the AS would not be needed\
    \ in that case.\n"
- title: 5.2.  IVR Services with Mid-Call Controls
  contents:
  - "5.2.  IVR Services with Mid-Call Controls\n   For more complex IVR dialogs, which\
    \ require mid-call interaction and\n   control between the Application Server\
    \ and the Media Server, the MS\n   control channel (as shown in Figure 3 above)\
    \ is used to invoke\n   specific media functions on the Media Server.  These functions\n\
    \   include, but are not limited to, complex announcements with barge-in\n   facility,\
    \ user-input detection and reporting (e.g., DTMF) to an\n   Application Server,\
    \ DTMF and voice-activity controlled recordings,\n   etc.  Composite services,\
    \ such as play-collect and play-record, are\n   also addressed by this model.\n\
    \   Mid-call control also allows Application Servers to subscribe to IVR-\n  \
    \ related events and for the Media Server to notify the AS when these\n   events\
    \ occur.  Examples of such events are announcement completion\n   events, record\
    \ completion events, and reporting of collected DTMF\n   digits.\n"
- title: 5.3.  Advanced IVR Services
  contents:
  - "5.3.  Advanced IVR Services\n   Although IVR services with mid-call control,\
    \ as described above,\n   provide a comprehensive set of media functions expected\
    \ from a Media\n   Server, the advanced IVR services model allows a higher level\
    \ of\n   abstraction describing application logic, as provided by VoiceXML, to\n\
    \   be executed on the Media Server.  Invocation of VoiceXML IVR dialogs\n   may\
    \ be via the \"Prompt and Collect\" mechanism of [RFC4240].\n   Additionally,\
    \ the IVR control protocol can be extended to allow\n   VoiceXML requests to also\
    \ be invoked over the MS control channel.\n   VoiceXML IVR services invoked on\
    \ the Media Server may require an HTTP\n   interface (not shown in Figure 3) between\
    \ the Media Server and one or\n   more back-end servers that host or generate\
    \ VoiceXML documents.  The\n   back-end server(s) may or may not be physically\
    \ separate from the\n   Application Server.\n"
- title: 6.  Media Control for Conferencing Services
  contents:
  - "6.  Media Control for Conferencing Services\n   [RFC4353] describes the overall\
    \ architecture and protocol components\n   needed for multipoint conferencing\
    \ using SIP.  The framework for\n   centralized conferencing [RFC5239] extends\
    \ the framework to include a\n   protocol between the user and the conferencing\
    \ server.  [RFC4353]\n   describes the conferencing server decomposition but leaves\
    \ the\n   specifics open.\n   This section describes the decomposition and discusses\
    \ the\n   functionality of the decomposed functional units.  The conferencing\n\
    \   factory and the conference focus are part of the Application Server\n   described\
    \ in this document.\n   An Application Server uses SIP Third Party Call Control\
    \ [RFC3725] to\n   establish media sessions from SIP user agents to a Media Server.\
    \  The\n   same mechanism is used by the Application Server as described in this\n\
    \   section to add/remove participants to/from a conference, as well as\n   to\
    \ handle the involved media streams set up on a per-user basis.\n   Since the\
    \ XCON framework has been conceived as protocol-agnostic when\n   talking about\
    \ the Call Signaling Protocol used by users to join a\n   conference, an XCON-compliant\
    \ Application Server will have to take\n   care of gatewaying non-SIP signaling\
    \ negotiations.  This is in order\n   to set up and make available valid SIP media\
    \ sessions between itself\n   and the Media Server, while still keeping the non-SIP\
    \ interaction\n   with the user in a transparent way.\n                +------------+\
    \             +------------+\n                |            | SIP (2m+1c) |   \
    \         |\n                | Application|-------------|   Media    |\n     \
    \           |   Server   |             |   Server   |\n                |  (Focus)\
    \   |-------------|  (Mixer)   |\n                |            | CtrlChannel |\
    \            |\n                +------------+             +------------+\n  \
    \                  |      \\                    .. .\n                    |  \
    \     \\\\            RTP...   .\n                    |         \\\\         \
    \  ..      .\n                    |     H.323  \\\\      ...       .\n       \
    \         SIP |             \\\\ ...           .RTP\n                    |   \
    \           ..\\             .\n                    |           ...   \\\\   \
    \        .\n                    |        ...        \\\\         .\n         \
    \           |      ..             \\\\       .\n                    |   ...  \
    \               \\\\     .\n                    | ..                      \\ \
    \   .\n               +-----------+              +-----------+\n             \
    \  |Participant|              |Participant|\n               +-----------+    \
    \          +-----------+\n                       Figure 4: Conference Topology\n\
    \   To complement the functionality provided by 3PCC and by the XCON\n   control\
    \ protocol, the Application Server makes use of a dedicated\n   Media Server control\
    \ channel in order to set up and manage media\n   conferences on the Media Server.\
    \  Figure 4 shows the signaling and\n   media paths for a two-participant conference.\
    \  The three SIP dialogs\n   between the AS and MS establish one control session\
    \ (1c) and two\n   media sessions (2m) from the participants (one originally signaled\n\
    \   using H.323 and then gatewayed into SIP and one signaled directly in\n   SIP).\n\
    \   As a conference focus, the Application Server is responsible for\n   setting\
    \ up and managing a media conference on the Media Servers, in\n   order to make\
    \ sure that all the media streams provided in a\n   conference are available to\
    \ its participants.  This is achieved by\n   using the services of one or more\
    \ mixer entities (as described in RFC\n   4353), whose role as part of the Media\
    \ Server is described in this\n   section.  Services required by the Application\
    \ Server include, but\n   are not limited to, means to set up, handle, and destroy\
    \ a new media\n   conference, adding and removing participants from a conference,\n\
    \   managing media streams in a conference, controlling the layout and\n   the\
    \ mixing configuration for each involved media, allowing per-user\n   custom media\
    \ profiles, and so on.\n   As a mixer entity, in such a multimedia conferencing\
    \ scenario, the\n   Media Server receives a set of media streams of the same type\
    \ (after\n   transcoding if needed) and then takes care of combining the received\n\
    \   media in a type-specific manner, redistributing the result to each\n   authorized\
    \ participant.  The way each media stream is combined, as\n   well as the media-related\
    \ policies, is properly configured and\n   handled by the Application Server by\
    \ means of a dedicated MS control\n   channel.\n   To summarize, the AS needs\
    \ to be able to manage Media Servers at a\n   conference and participant level.\n"
- title: 6.1.  Creating a New Conference
  contents:
  - "6.1.  Creating a New Conference\n   When a new conference is created, as a result\
    \ of a previous\n   conference scheduling or of the first participant dialing\
    \ in to a\n   specified URI, the Application Server must take care of appropriately\n\
    \   creating a media conference on the Media Server.  It does so by\n   sending\
    \ an explicit request to the Media Server.  This can be by\n   means of an MS\
    \ control channel message.  This request may contain\n   detailed information\
    \ upon the desired settings and policies for the\n   conference (e.g., the media\
    \ to involve, the mixing configuration for\n   them, the relevant identifiers,\
    \ etc.).  The Media Server validates\n   such a request and takes care of allocating\
    \ the needed resources to\n   set up the media conference.\n   Application Servers\
    \ may use mechanisms other than sending requests\n   over the control channel\
    \ to establish conferences on a Media Server,\n   and then subsequently use the\
    \ control channel to control the\n   conference.  Examples of other mechanisms\
    \ to create a conference\n   include using the Request-URI mechanism of [RFC4240]\
    \ or the\n   procedures defined in [RFC4579].\n   Once done, the MS informs the\
    \ Application Server about the result of\n   the request.  Each conference will\
    \ be referred to by a specific\n   identifier, which both the Application Server\
    \ and the Media Server\n   will include in subsequent transactions related to\
    \ the same\n   conference (e.g., to modify the settings of an extant conference).\n"
- title: 6.2.  Adding a Participant to a Conference
  contents:
  - "6.2.  Adding a Participant to a Conference\n   As stated before, an Application\
    \ Server uses SIP 3PCC to establish\n   media sessions from SIP user agents to\
    \ a Media Server.  The URI that\n   the AS uses in the INVITE to the MS may be\
    \ one associated with the\n   conference on the MS.  More likely however, the\
    \ media sessions are\n   first established to the Media Server using a URI for\
    \ the Media\n   Server and then subsequently joined to the conference using the\
    \ MS\n   Control Protocol.  This allows IVR dialogs to be performed prior to\n\
    \   joining the conference.\n   The AS as a 3PCC correlates the media session\
    \ negotiation between the\n   UA and the MS, in order to appropriately establish\
    \ all the needed\n   media streams based on the conference policies.\n"
- title: 6.3.  Media Controls
  contents:
  - "6.3.  Media Controls\n   The XCON Common Data Model [XCON-DM] currently defines\
    \ some basic\n   media-related controls, which conference-aware participants can\
    \ take\n   advantage of in several ways, e.g., by means of an XCON conference\n\
    \   control protocol or IVR dialogs.  These controls include the\n   possibility\
    \ to modify the participants' own volume for audio in the\n   conference, configure\
    \ the desired layout for incoming video streams,\n   mute/unmute oneself, and\
    \ pause/unpause one's own video stream.  Such\n   controls are exploited by conference-aware\
    \ participants through the\n   use of dedicated conference control protocol requests\
    \ to the\n   Application Server.  The Application Server takes care of validating\n\
    \   such requests and translates them into the Media Server Control\n   Protocol,\
    \ before forwarding them over the MS Control Channel to the\n   MS.  According\
    \ to the directives provided by the Application Server,\n   the Media Server manipulates\
    \ the involved media streams accordingly.\n                  +------------+  \
    \                +------------+\n                  |            | 'Include audio\
    \   |            |\n                  | Application|  sent by user X  |   Media\
    \    |\n                  |   Server   |  in conf Y mix'  |   Server   |\n   \
    \               |  (Focus)   |----------------->|  (Mixer)   |\n             \
    \     |            |   (MS CtrlChn)   |            |\n                  +------^-----+\
    \                  +------------+\n                         |                \
    \          ..\n                         |                       ...\n        \
    \                 | 'Unmute me'        ... RTP\n                         |   (XCON)\
    \        ...\n                         |              ...\n                  \
    \       |           ...\n                  +-----------+   ...\n             \
    \     |Participant|...\n                  +-----------+\n          Figure 5: Conferencing\
    \ Example: Unmuting A Participant\n   The Media Server may need to inform the\
    \ AS of events like in-band\n   DTMF tones during the conference.\n"
- title: 6.4.  Floor Control
  contents:
  - "6.4.  Floor Control\n   The XCON framework introduces \"floor control\" functionality\
    \ as an\n   enhancement upon [RFC4575].  Floor control is a means to manage joint\n\
    \   or exclusive access to shared resources in a (multiparty)\n   conferencing\
    \ environment.  Floor control is not a mandatory mechanism\n   for a conferencing\
    \ system implementation, but it provides advanced\n   media input control features\
    \ for conference-aware participants.  Such\n   a mechanism allows for coordinated\
    \ and moderated access to any set of\n   resources provided by the conferencing\
    \ system.  To do so, a so-called\n   floor is associated to a set of resources,\
    \ thus representing for\n   participants the right to access and manipulate the\
    \ related resources\n   themselves.  In order to take advantage of the floor control\n\
    \   functionality, a specific protocol, the Binary Floor Control\n   Protocol,\
    \ has been specified [RFC4582].  [RFC4583] provides a way for\n   SIP UAs to set\
    \ up a BFCP connection towards the Floor Control Server\n   and exploit floor\
    \ control by means of a Connection-Oriented Media\n   (COMEDIA) [RFC4145] negotiation.\n\
    \   In the context of the AS-MS interaction, floor control constitutes a\n   further\
    \ means to control participants' media streams.  A typical\n   example is a floor\
    \ associated with the right to access the shared\n   audio channel in a conference.\
    \  A participant who is granted such a\n   floor is granted by the conferencing\
    \ system the right to talk, which\n   means that its audio frames are included\
    \ by the MS in the overall\n   audio conference mix.  Similarly, when the floor\
    \ is revoked, the\n   participant is muted in the conference, and its audio is\
    \ excluded\n   from the final mix.\n   The BFCP defines a Floor Control Server\
    \ (FCS) and the floor chair.\n   It is clear that the floor chair making decisions\
    \ about floor\n   requests is part of the application logic.  This implies that\
    \ when\n   the role of floor chair in a conference is automated, it will\n   normally\
    \ be part of the AS.\n   The example makes it clear that there can be a direct\
    \ or indirect\n   interaction between the Floor Control Server and the Media Server,\
    \ in\n   order to correctly bind each floor to its related set of media\n   resources.\
    \  Besides, a similar interaction is needed between the\n   Floor Control Server\
    \ and the Application Server as well, since the\n   latter must be aware of all\
    \ the associations between floors and\n   resources, in order to opportunely orchestrate\
    \ the related bindings\n   with the element responsible for such resources (e.g.,\
    \ the Media\n   Server when talking about audio and/or video streams) and the\n\
    \   operations upon them (e.g., mute/unmute a participant in a\n   conference).\
    \  For this reason, the Floor Control Server can be co-\n   located with either\
    \ the Media Server or the Application Server, as\n   long as both elements are\
    \ allowed to interact with the Floor Control\n   Server by means of some kind\
    \ of protocol.\n   In the following text, both the approaches will be described\
    \ in order\n   to better explain the interactions between the involved components\
    \ in\n   both the topologies.\n   When the AS and the FCS are co-located, the\
    \ scenario is quite\n   straightforward.  In fact, it can be considered as a variation\
    \ of the\n   case depicted in Figure 5.  The only relevant difference is that\
    \ in\n   this case the action the AS commands on the control channel is\n   triggered\
    \ by a change in the floor control status instead of a\n   specific control requested\
    \ by a participant himself.  The sequence\n   diagram in Figure 6 describes the\
    \ interaction between the involved\n   parties in a typical scenario.  It assumes\
    \ that a BFCP connection\n   between the UA and the FCS (which we assume is co-located\
    \ with the\n   AS) has already been negotiated and established, and that the UA\
    \ has\n   been made aware of all the relevant identifiers and floors-resources-\n\
    \   associations (e.g., by means of [RFC4583]).  It also assumes that the\n  \
    \ AS has previously configured the media mixing on the MS using the MS\n   control\
    \ channel.  Every frame the UA might be sending on the related\n   media stream\
    \ is currently being dropped by the MS, since the UA still\n   isn't authorized\
    \ to use the resource.  For a SIP UA, this state could\n   be consequent to a\
    \ 'sendonly' field associated to the media stream in\n   a re-INVITE originated\
    \ by the MS.  It is worth pointing out that the\n   AS has to make sure that no\
    \ user media control mechanisms, such as\n   mentioned in the previous sub-section,\
    \ can override the floor\n   control.\n     UA                               \
    \    AS                         MS\n     (Floor Participant)                 (FCS)\n\
    \     |                                     |                          |\n   \
    \  |<===================== One-way RTP stream ======================|\n     |\
    \                                     |                          |\n     | FloorRequest(BFCP)\
    \                  |                          |\n     |------------------------------------>|\
    \                          |\n     |                                     |   \
    \                       |\n     |   FloorRequestStatus[PENDING](BFCP) |      \
    \                    |\n     |<------------------------------------|         \
    \                 |\n     |                                     |--+ apply   \
    \              |\n     |                                     |  | policies   \
    \           |\n     |                                     |<-+ to request    \
    \        |\n     |                                     |                     \
    \     |\n     |  FloorRequestStatus[ACCEPTED](BFCP) |                        \
    \  |\n     |<------------------------------------|                          |\n\
    \     |                                     |                          |\n   \
    \  .                                     .                          .\n     .\
    \                                     .                          .\n     |   \
    \                                  |                          |\n     |   FloorRequestStatus[GRANTED](BFCP)\
    \ |                          |\n     |<------------------------------------| \
    \                         |\n     |                                     | 'Unmute\
    \ UA' (CtrlChn)    |\n     |                                     |------------------------->|\n\
    \     |                                     |                          |\n   \
    \  |<==================== Bidirectional RTP stream ================>|\n     |\
    \                                     |                          |\n     .   \
    \                                  .                          .\n     .      \
    \                               .                          .\n          Figure\
    \ 6: Conferencing Example: Floor Control Call Flow\n   A UA, which also acts as\
    \ a floor participant, sends a \"FloorRequest\"\n   to the floor control server\
    \ (FCS, which is co-located with the AS),\n   stating his will to be granted the\
    \ floor associated with the audio\n   stream in the conference.  The AS answers\
    \ the UA with a\n   \"FloorRequestStatus\" message with a PENDING status, meaning\
    \ that a\n   decision on the request has not been made yet.  The AS, according\
    \ to\n   the BFCP policies for this conference, makes a decision on the\n   request,\
    \ i.e., accepting it.  Note that this decision might be\n   relayed to another\
    \ participant in case he has previously been\n   assigned as chair of the floor.\
    \  Assuming the request has been\n   accepted, the AS notifies the UA about the\
    \ decision with a new\n   \"FloorRequestStatus\", this time with an ACCEPTED status\
    \ in it.  The\n   ACCEPTED status of course only means that the request has been\n\
    \   accepted, which doesn't mean the floor has been granted yet.  Once\n   the\
    \ queue management in the FCS, according to the specified\n   algorithms for scheduling,\
    \ states that the floor request previously\n   made by the UA can be granted,\
    \ the AS sends a new\n   \"FloorRequestStatus\" to the UA with a GRANTED status,\
    \ and takes care\n   of unmuting the participant in the conference by sending\
    \ a directive\n   to the MS through the control channel.  Once the UA receives\
    \ the\n   notification stating his request has been granted, he can start\n  \
    \ sending its media, aware of the fact that now his media stream won't\n   be\
    \ dropped by the MS.  In case the session has been previously\n   updated with\
    \ a 'sendonly' associated to the media stream, the MS must\n   originate a further\
    \ re-INVITE stating that the media stream flow is\n   now bidirectional ('sendrecv').\n\
    \   As mentioned before, this scenario envisages an automated floor chair\n  \
    \ role, where it's the AS, according to some policies, which makes\n   decisions\
    \ on floor requests.  The case of a chair role performed by a\n   real person\
    \ is exactly the same, with the difference that the\n   incoming request is not\
    \ directly handled by the AS according to its\n   policies, but it is instead\
    \ forwarded to the floor control\n   participant that the chair UA is exploiting.\
    \  The decision on the\n   request is then communicated by the chair UA to the\
    \ AS-FCS by means\n   of a 'ChairAction' message.\n   The rest of this section\
    \ will instead explore the other scenario,\n   which assumes that the interaction\
    \ between AS-FCS happens through the\n   MS control channel.  This scenario is\
    \ compliant with the H.248.19\n   document related to conferencing in 3GPP.  The\
    \ following sequence\n   diagram describes the interaction between the involved\
    \ parties in the\n   same use-case scenario that has been explored for the previous\n\
    \   topology: consequently, the diagram makes exactly the same\n   assumptions\
    \ that have been made for the previously described\n   scenario.  This means that\
    \ the scenario again assumes that a BFCP\n   connection between the UA and the\
    \ FCS has already been negotiated and\n   established, and that the UA has been\
    \ made aware of all the relevant\n   identifiers and floors-resources-associations.\
    \  It also assumes that\n   the AS has previously configured the media mixing\
    \ on the MS using the\n   MS control channel.  This time it includes identifying\
    \ the BFCP-\n   moderated resources, establishing basic policies and instructions\n\
    \   about chair identifiers for each resource, and subscribing to events\n   of\
    \ interest, because the FCS is not co-located with the AS anymore.\n   Additionally,\
    \ a BFCP session has been established between the AS\n   (which in this scenario\
    \ acts as a floor chair) and the FCS (MS).\n   Every frame the UA might be sending\
    \ on the related media stream is\n   currently being dropped by the MS, since\
    \ the UA still isn't\n   authorized to use the resource.  For a SIP UA, this state\
    \ could be\n   consequent to a 'sendonly' field associated to the media stream\
    \ in a\n   re-INVITE originated by the MS.  Again, it is worth pointing out that\n\
    \   the AS has to make sure that no user media control mechanisms, such\n   as\
    \ mentioned in the previous sub-section, can override the floor\n   control.\n\
    \     UA                          AS                                  MS\n   \
    \  (Floor Participant)   (Floor Chair)                          (FCS)\n     |\
    \                           |                                    |\n     |<=====================\
    \ One-way RTP stream ======================|\n     |                         \
    \  |                                    |\n     | FloorRequest(BFCP)        |\
    \                                    |\n     |--------------------------------------------------------------->|\n\
    \     |                           |                                    |\n   \
    \  |                           |  FloorRequestStatus[PENDING](BFCP) |\n     |<---------------------------------------------------------------|\n\
    \     |                           |  FloorRequestStatus[PENDING](BFCP) |\n   \
    \  |                           |<-----------------------------------|\n     |\
    \                           |                                    |\n     |   \
    \                        | ChairAction[ACCEPTED] (BFCP)       |\n     |      \
    \                     |----------------------------------->|\n     |         \
    \                  |       ChairActionAck (BFCP)        |\n     |            \
    \               |<-----------------------------------|\n     |               \
    \            |                                    |\n     |                  \
    \         | FloorRequestStatus[ACCEPTED](BFCP) |\n     |<---------------------------------------------------------------|\n\
    \     |                           |                                    |\n   \
    \  .                           .                                    .\n     .\
    \                           .                                    .\n     |   \
    \                        |                                    |\n     |      \
    \                     |  FloorRequestStatus[GRANTED](BFCP) |\n     |<---------------------------------------------------------------|\n\
    \     |                           | 'Floor has been granted' (CtrlChn) |\n   \
    \  |                           |<-----------------------------------|\n     |\
    \                           |                                    |\n     |<====================\
    \ Bidirectional RTP stream ================>|\n     |                        \
    \   |                                    |\n     .                           .\
    \                                    .\n     .                           .   \
    \                                 .\n          Figure 7: Conferencing Example:\
    \ Floor Control Call Flow\n   A UA, which also acts as a floor participant, sends\
    \ a \"FloorRequest\"\n   to the floor control server (FCS, which is co-located\
    \ with the MS),\n   stating his will to be granted the floor associated with the\
    \ audio\n   stream in the conference.  The MS answers the UA with a\n   \"FloorRequestStatus\"\
    \ message with a PENDING status, meaning that a\n   decision on the request has\
    \ not been made yet.  It then notifies the\n   AS, which in this example handles\
    \ the floor chair role, about the new\n   request by forwarding there the received\
    \ request.  The AS, according\n   to the BFCP policies for this conference, makes\
    \ a decision on the\n   request, i.e., accepting it.  It informs the MS about\
    \ its decision\n   through a BFCP \"ChairAction\" message.  The MS then acknowledges\
    \ the\n   'ChairAction' message and then notifies the UA about the decision\n\
    \   with a new \"FloorRequestStatus\", this time with an ACCEPTED status in\n\
    \   it.  The ACCEPTED status of course only means that the request has\n   been\
    \ accepted, which doesn't mean the floor has been granted yet.\n   Once the queue\
    \ management in the MS, according to the specified\n   algorithms for scheduling,\
    \ states that the floor request previously\n   made by the UA can be granted,\
    \ the MS sends a new\n   \"FloorRequestStatus\" to the UA with a GRANTED status,\
    \ and takes care\n   of unmuting the participant in the conference.  Once the\
    \ UA receives\n   the notification stating his request has been granted, he can\
    \ start\n   sending its media, aware of the fact that now his media stream won't\n\
    \   be dropped by the MS.  In case the session has been previously\n   updated\
    \ with a 'sendonly' associated to the media stream, the MS must\n   originate\
    \ a further re-INVITE stating that the media stream flow is\n   now bidirectional\
    \ ('sendrecv').\n   This scenario envisages an automated floor chair role, where\
    \ it's the\n   AS, according to some policies, which makes decisions on floor\n\
    \   requests.  Again, the case of a chair role performed by a real person\n  \
    \ is exactly the same, with the difference that the incoming request is\n   not\
    \ forwarded to the AS but to the floor control participant that the\n   chair\
    \ UA is exploiting.  The decision on the request is communicated\n   by means\
    \ of a 'ChairAction' message in the same way.\n   Another typical scenario is\
    \ a BFCP-moderated conference with no chair\n   to manage floor requests.  In\
    \ such a scenario, the MS has to take\n   care of incoming requests according\
    \ to some predefined policies,\n   e.g., always accepting new requests.  In this\
    \ case, no decisions are\n   required by external entities, since all are instantly\
    \ decided by\n   means of policies in the MS.\n   As stated before, the case of\
    \ the FCS co-located with the AS is much\n   simpler to understand and exploit.\
    \  When the AS has full control upon\n   the FCS, including its queue management,\
    \ the AS directly instructs\n   the MS according to the floor status changes,\
    \ e.g., by instructing\n   the MS through the control channel to unmute a participant\
    \ who has\n   been granted the floor associated to the audio media stream.\n"
- title: 7.  Security Considerations
  contents:
  - "7.  Security Considerations\n   This document describes the architectural framework\
    \ to be used for\n   Media Server control.  Its focus is the interactions between\n\
    \   Application Servers and Media Servers.  User agents interact with\n   Application\
    \ Servers by means of signaling protocols such as SIP.\n   These interactions\
    \ are beyond the scope of this document.\n   Application Servers are responsible\
    \ for utilizing the security\n   mechanisms of their signaling protocols, combined\
    \ with application-\n   specific policy, to ensure they grant service only to\
    \ authorized\n   users.  Media interactions between user agents and Media Servers\
    \ are\n   also outside the scope of this document.  Those interactions are at\n\
    \   the behest of Application Servers, which must ensure that appropriate\n  \
    \ security mechanisms are used.  For example, if the MS is acting as\n   the FCS,\
    \ then the BFCP connection between the user agent and the MS\n   is established\
    \ to the MS by the AS using SIP and the SDP mechanisms\n   described in [RFC4583].\
    \  BFCP [RFC4582] strongly imposes the use of\n   TLS for BFCP.\n   Media Servers\
    \ are valuable network resources and need to be protected\n   against unauthorized\
    \ access.  Application Servers use SIP and related\n   standards both to establish\
    \ control channels to Media Servers and to\n   establish media sessions, including\
    \ BFCP sessions, between an MS and\n   end users.  Media servers use the security\
    \ mechanisms of SIP to\n   authenticate requests from Application servers and\
    \ to ensure the\n   integrity of those requests.  Leveraging the security mechanisms\
    \ of\n   SIP ensures that only authorized Application Servers are allowed to\n\
    \   establish sessions to an MS and to access MS resources through those\n   sessions.\n\
    \   Control channels between an AS and MS carry the MS control protocol,\n   which\
    \ affects both the service seen by end users and the resources\n   used on a Media\
    \ Server.  TLS [RFC5246] must be implemented as the\n   transport-level security\
    \ mechanism for control channels to guarantee\n   the integrity of MS control\
    \ interactions.\n   The resources of an MS can be shared by more than one AS.\
    \  Media\n   Servers must prevent one AS from accessing and manipulating the\n\
    \   resources that have been assigned to another AS.  This may be\n   achieved\
    \ by an MS associating ownership of a resource to the AS that\n   originally allocates\
    \ it, and then insuring that future requests\n   involving that resource correlate\
    \ to the AS that owns and is\n   responsible for it.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   The authors would like to thank Spencer Dawkins for detailed\
    \ reviews\n   and comments, Gary Munson for suggestions, and Xiao Wang for review\n\
    \   and feedback.\n"
- title: 9.  Contributors
  contents:
  - "9.  Contributors\n   This document is a product of the Media Control Architecture\
    \ Design\n   Team.  In addition to the editor, the following individuals\n   constituted\
    \ the design team and made substantial textual\n   contributions to this document:\n\
    \      Chris Boulton: cboulton@ubiquity.net\n      Martin Dolly: mdolly@att.com\n\
    \      Roni Even: roni.even@polycom.co.il\n      Lorenzo Miniero: lorenzo.miniero@unina.it\n\
    \      Adnan Saleem: Adnan.Saleem@radisys.com\n"
- title: 10.  Informative References
  contents:
  - "10.  Informative References\n   [RFC0793]  Postel, J., \"Transmission Control\
    \ Protocol\", STD 7,\n              RFC 793, September 1981.\n   [RFC2976]  Donovan,\
    \ S., \"The SIP INFO Method\", RFC 2976,\n              October 2000.\n   [RFC3261]\
    \  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n              A.,\
    \ Peterson, J., Sparks, R., Handley, M., and E.\n              Schooler, \"SIP:\
    \ Session Initiation Protocol\", RFC 3261,\n              June 2002.\n   [RFC3263]\
    \  Rosenberg, J. and H. Schulzrinne, \"Session Initiation\n              Protocol\
    \ (SIP): Locating SIP Servers\", RFC 3263,\n              June 2002.\n   [RFC3264]\
    \  Rosenberg, J. and H. Schulzrinne, \"An Offer/Answer Model\n              with\
    \ Session Description Protocol (SDP)\", RFC 3264,\n              June 2002.\n\
    \   [RFC3550]  Schulzrinne, H., Casner, S., Frederick, R., and V.\n          \
    \    Jacobson, \"RTP: A Transport Protocol for Real-Time\n              Applications\"\
    , STD 64, RFC 3550, July 2003.\n   [RFC3725]  Rosenberg, J., Peterson, J., Schulzrinne,\
    \ H., and G.\n              Camarillo, \"Best Current Practices for Third Party\
    \ Call\n              Control (3pcc) in the Session Initiation Protocol (SIP)\"\
    ,\n              BCP 85, RFC 3725, April 2004.\n   [RFC3840]  Rosenberg, J., Schulzrinne,\
    \ H., and P. Kyzivat,\n              \"Indicating User Agent Capabilities in the\
    \ Session\n              Initiation Protocol (SIP)\", RFC 3840, August 2004.\n\
    \   [RFC4145]  Yon, D. and G. Camarillo, \"TCP-Based Media Transport in\n    \
    \          the Session Description Protocol (SDP)\", RFC 4145,\n             \
    \ September 2005.\n   [RFC4240]  Burger, E., Van Dyke, J., and A. Spitzer, \"\
    Basic Network\n              Media Services with SIP\", RFC 4240, December 2005.\n\
    \   [RFC4353]  Rosenberg, J., \"A Framework for Conferencing with the\n      \
    \        Session Initiation Protocol (SIP)\", RFC 4353,\n              February\
    \ 2006.\n   [RFC4474]  Peterson, J. and C. Jennings, \"Enhancements for\n    \
    \          Authenticated Identity Management in the Session\n              Initiation\
    \ Protocol (SIP)\", RFC 4474, August 2006.\n   [RFC4566]  Handley, M., Jacobson,\
    \ V., and C. Perkins, \"SDP: Session\n              Description Protocol\", RFC\
    \ 4566, July 2006.\n   [RFC4575]  Rosenberg, J., Schulzrinne, H., and O. Levin,\
    \ \"A Session\n              Initiation Protocol (SIP) Event Package for Conference\n\
    \              State\", RFC 4575, August 2006.\n   [RFC4579]  Johnston, A. and\
    \ O. Levin, \"Session Initiation Protocol\n              (SIP) Call Control -\
    \ Conferencing for User Agents\",\n              BCP 119, RFC 4579, August 2006.\n\
    \   [RFC4582]  Camarillo, G., Ott, J., and K. Drage, \"The Binary Floor\n    \
    \          Control Protocol (BFCP)\", RFC 4582, November 2006.\n   [RFC4583] \
    \ Camarillo, G., \"Session Description Protocol (SDP) Format\n              for\
    \ Binary Floor Control Protocol (BFCP) Streams\",\n              RFC 4583, November\
    \ 2006.\n   [RFC4585]  Ott, J., Wenger, S., Sato, N., Burmeister, C., and J. Rey,\n\
    \              \"Extended RTP Profile for Real-time Transport Control\n      \
    \        Protocol (RTCP)-Based Feedback (RTP/AVPF)\", RFC 4585,\n            \
    \  July 2006.\n   [RFC4960]  Stewart, R., \"Stream Control Transmission Protocol\"\
    ,\n              RFC 4960, September 2007.\n   [RFC5167]  Dolly, M. and R. Even,\
    \ \"Media Server Control Protocol\n              Requirements\", RFC 5167, March\
    \ 2008.\n   [RFC5239]  Barnes, M., Boulton, C., and O. Levin, \"A Framework for\n\
    \              Centralized Conferencing\", RFC 5239, June 2008.\n   [RFC5246]\
    \  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)\
    \ Protocol Version 1.2\", RFC 5246, August 2008.\n   [SIP-CTRL-FW]\n         \
    \     Boulton, C., Melanchuk, T., and S. McGlashan, \"Media\n              Control\
    \ Channel Framework\", Work in Progress,\n              February 2009.\n   [W3C.REC-voicexml20-20040316]\n\
    \              Carter, J., Tryphonas, S., Danielsen, P., Burnett, D.,\n      \
    \        Rehor, K., McGlashan, S., Ferrans, J., Porter, B., Lucas,\n         \
    \     B., and A. Hunt, \"Voice Extensible Markup Language\n              (VoiceXML)\
    \ Version 2.0\", World Wide Web Consortium\n              Recommendation REC-voicexml20-20040316,\
    \ March 2004,\n              <http://www.w3.org/TR/2004/REC-voicexml20-20040316>.\n\
    \   [W3C.REC-xml-20060816]\n              Sperberg-McQueen, C., Paoli, J., Bray,\
    \ T., Maler, E., and\n              F. Yergeau, \"Extensible Markup Language (XML)\
    \ 1.0 (Fourth\n              Edition)\", World Wide Web Consortium Recommendation\
    \ REC-\n              xml-20060816, August 2006,\n              <http://www.w3.org/TR/2006/REC-xml-20060816>.\n\
    \   [XCON-DM]  Novo, O., Camarillo, G., Morgan, D., and J. Urpalainen,\n     \
    \         \"Conference Information Data Model for Centralized\n              Conferencing\
    \ (XCON)\", Work in Progress, April 2009.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Tim Melanchuk (editor)\n   Rain Willow Communications\n\
    \   EMail: tim.melanchuk@gmail.com\n"
