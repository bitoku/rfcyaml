Abstract This document describes the multiappending extension to the Internet Message Access Protocol (IMAP) (RFC 3501).
This extension provides substantial performance improvements for IMAP clients which upload multiple messages at a time to a mailbox on the server.
A server which supports this extension indicates this with a capability name of "MULTIAPPEND".
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [KEYWORDS].
The MULTIAPPEND extension permits uploading of multiple messages with a single command.
When used in conjunction with the [LITERAL ] extension, the entire upload is accomplished in a single command/response round trip.
A MULTIAPPEND APPEND operation is atomic; either all messages are successfully appended, or no messages are appended.
In the base IMAP specification, each message must be appended in a separate command, and there is no mechanism to "unappend" messages if an error occurs while appending.
Also, some mail stores may require an expensive "open/lock   sync/unlock/close" operation as part of appending; this can be quite expensive if it must be done on a per message basis.
If the server supports both LITERAL  and pipelining but not MULTIAPPEND, it may be possible to get some of the performance advantages of MULTIAPPEND by doing a pipelined "batch" append.
However, it will not work as well as MULTIAPPEND for the following reasons
: 1) Multiple APPEND commands, even as part of a pipelined batch, are non atomic by definition.
There is no way to revert the mailbox to the state before the batch append in the event of an error.
It may not be feasible for the server to coalesce pipelined APPEND operations so as to avoid the "open/lock   sync/unlock/close" overhead described above.
In any case, such coalescing would be timing dependent and thus potentially unreliable.
In particular, with traditional UNIX mailbox files, it is assumed that a lock is held only for a single atomic operation, and many applications disregard any lock that is older than 5 minutes.
If an error occurs, depending upon the nature of the error, it is possible for additional messages to be appended after the error.
For example, the user wants to append 5 messages, but a disk quota error occurs with the third message because of its size.
However, the fourth and fifth messages have already been sent in the pipeline, so the mailbox ends up with the first, second, fourth, and fifth messages of the batch appended.
APPEND Command Arguments:  mailbox name one or more messages to upload, specified as: OPTIONAL flag parenthesized list
OPTIONAL date/time string message literal Data:
no specific responses for this command
, append cancelled BAD command unknown or arguments invalid
The APPEND command appends the literal arguments as new messages to the end of the specified destination mailbox.
This argument SHOULD be in the format of an [RFC 2822] message.
8 bit characters are permitted in the message.
A server implementation that is unable to preserve 8 bit data properly MUST be able to reversibly convert 8 bit APPEND data to 7 bit using a [MIME IMB] content transfer encoding.
Note: There MAY be exceptions, e.g., draft messages, in which required
[RFC 2822] header lines are omitted in the message literal argument to APPEND.
The full implications of doing so MUST be understood and carefully weighed.
If a flag parenthesized list is specified, the flags SHOULD be set in the resulting message; otherwise, the flag list of the resulting message is set empty by default.
If a date time is specified, the internal date SHOULD be set in the resulting message; otherwise, the internal date of the resulting message is set to the current date and time by default.
A zero length message literal argument is an error, and MUST return a NO.
This can be used to cancel the append.
If the append is unsuccessful for any reason (including being cancelled), the mailbox MUST be restored to its state before the APPEND attempt; no partial appending is permitted.
The server MAY return an error before processing all the message arguments.
If the destination mailbox does not exist, a server MUST return an error, and MUST NOT automatically create the mailbox.
Unless it is certain that the destination mailbox can not be created, the server MUST send the response code "[TRYCREATE]" as the prefix of the text of the tagged NO response.
This gives a hint to the client that it can attempt a CREATE command and retry the APPEND if the CREATE is successful.
If the mailbox is currently selected, the normal new message actions SHOULD occur.
Specifically, the server SHOULD notify the client immediately via an untagged EXISTS response.
If the server does not do so, the client MAY issue a NOOP command (or failing that, a CHECK command) after one or more APPEND commands.
A003 APPEND saved messages (\Seen)
Mon, 7 Feb 1994 21:52:25
Content Type: TEXT/PLAIN; CHARSET US ASCII C:
Hello Joe, do you think we can meet at 3:30 tomorrow?
Mon, 7 Feb 1994 22:43:04  0800
Content Type: TEXT/PLAIN; CHARSET US ASCII C:
C: 3:30 is fine with me.
S: A003 OK APPEND completed C:
{1023} S: A004 NO [TRYCREATE]
No such mailbox as bogusname C: A005 APPEND test (\Flagged)
Date: Mon, 7 Feb 2000 22:43:04  0800
The APPEND command is not used for message delivery, because it does not provide a mechanism to transfer [SMTP] envelope information.
Modification to IMAP4rev1 Base Protocol Formal Syntax
The following syntax specification uses the Augmented Backus Naur Form (ABNF) notation as specified in [ABNF].
The UIDs returned should be in the order the articles where appended.
The MULTIAPPEND extension does not raise any security considerations that are not present in the base [IMAP] protocol, and these issues are discussed in [IMAP].
Nevertheless, it is important to remember that IMAP4rev1 protocol transactions, including electronic mail data, are sent in the clear over the network unless protection from snooping is negotiated, either by the use of STARTTLS, privacy protection is negotiated in the AUTHENTICATE command, or some other protection mechanism is in effect.
