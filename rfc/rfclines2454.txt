Abstract This document is one in the series of documents that define various MIB objects for IPv6.
Specifically, this document is the MIB module which defines managed objects for implementations of the User Datagram Protocol (UDP) over IP Version 6 (IPv6).
This document also recommends a specific policy with respect to the applicability of RFC 2013 for implementations of IPv6.
Namely, that most of managed objects defined in RFC 2013 are independent of which IP versions underlie UDP, and only the UDP listener information is IP version specific.
This memo defines an experimental portion of the Management Information Base (MIB) for use with network management protocols in IPv6 based internets.
Introduction A management system contains:
several (potentially many) nodes, each with a processing entity, termed an agent, which has access to management instrumentation; at least one management station; and, a management protocol, used to convey management information between the agents and management stations.
Operations of the protocol are carried out under an administrative framework which defines authentication, authorization, access control, and privacy policies.
Management stations execute management applications which monitor and control managed elements.
Managed elements are devices such as hosts, routers, terminal servers, etc., which are monitored and controlled via access to their management information.
Management information is viewed as a collection of managed objects, residing in a virtual information store, termed the Management Information Base (MIB).
Collections of related objects are defined in MIB modules.
These modules are written using a subset of OSI's Abstract Syntax Notation One (ASN.1) [1], termed the Structure of Management Information (SMI)
This document is one in the series of documents that define various MIB objects, and statements of conformance, for IPv6.
This document defines the required instrumentation for implementations of UDP over IPv6.
Transparency of IP versions to UDP
The fact that UDP is carried over IPv6 as opposed to IPv4, is largely invisible to a UDP implementation.
A "UDPng" did not need to be defined, implementations simply need to support IPv6 addresses.
As such, the managed objects already defined in [UDP MIB] are sufficient for managing UDP in the presence of IPv6.
These objects are equally applicable whether the managed node supports IPv4 only, IPv6 only, or both IPv4 and IPv6.
For example, udpInDatagrams counts "The total number of UDP datagrams delivered to UDP users", regardless of which version of IP is used to deliver any of those datagrams.
Stated differently, UDP implementations don't need separate counters for IPv4 and for IPv6. 4.
The exception to the statements in section 3 is the udpTable.
Since IPv6 addresses cannot be represented with the IpAddress syntax, not all UDP endpoints can be represented in the udpTable defined in [UDP MIB].
This memo defines a new, separate table to represent only those UDP endpoints that utilize an IPv6 address.
UDP endpoints on IPv4 addresses continue to be represented in udpTable [UDP MIB].
A different approach would have been to define a new table to represent all UDP endpoints regardless of IP version.
This would require changes to [UDP MIB] and hence to existing (IPv4 only) UDP implementations.
The approach suggested in this memo has the advantage of leaving IPv4 only implementations intact.
It is assumed that the objects defined in this memo will eventually be defined in an update to [UDP MIB].
For this reason, the module identity is assigned under the experimental portion of the MIB.
This memo contains conformance statements to define conformance to this MIB for UDP over IPv6 implementations.
MIB Working Group" CONTACT INFO "
603 884 1423 Email:  daniele@zk3.dec.com" DESCRIPTION "
The MIB module for entities implementing UDP over IPv6."
This table contains information about this entity's   UDP/IPv6 endpoints.
Only endpoints utilizing IPv6 addresses   are contained in this table.
This entity's UDP/IPv4 endpoints   are contained in udpTable.
A table containing UDP listener information for UDP/IPv6 endpoints."
current DESCRIPTION "Information about a particular current UDP listener.
Note that conceptual rows in this table require an additional index object compared to udpTable, since IPv6 addresses are not guaranteed to be unique on the managed node.
The local IPv6 address for this UDP listener.
In the case of a UDP listener which is willing to accept datagrams for any IPv6 address associated with the managed node, the value ::0 is used."
"The local port number for this UDP listener."
This object identifies the local interface that is associated with ipv6UdpLocalAddress for this UDP listener.
If such a local interface cannot be determined, this object should take on the value 0.
(A possible example of this would be if the value of ipv6UdpLocalAddress is ::0.)
The interface identified by a particular non 0 value of this index is the same interface as identified by the same value of ipv6IfIndex.
The value of this object must remain constant during the life of this UDP endpoint."
MODULE COMPLIANCE STATUS  current DESCRIPTION
"The compliance statement for SNMPv2 entities which implement UDP over IPv6."
{   these are defined in this module
ipv6UdpIfIndex } STATUS    current DESCRIPTION "
The group of objects providing management of UDP over IPv6."
There are no management objects defined in this MIB that have a MAX  ACCESS clause of read write and/or read create.
So, if this MIB is implemented correctly, then there is no risk that an intruder can alter or create any management objects of this MIB via direct SNMP SET operations.
There are a number of managed objects in this MIB that may be considered to contain sensitive information in some environments.
For example, the MIB identifies UDP ports on which processes are listening.
Although this information might be considered sensitive in some environments (i.e., to identify ports on which to launch denial of service or other attacks), there are already other ways of obtaining similar information.
For example, sending a random UDP packet to an unused port prompts the generation of an ICMP port unreachable message.
Therefore, it may be important in some environments to control read access to these objects and possibly to even encrypt the values of these object when sending them over the network via SNMP.
Not all versions of SNMP provide features for such a secure environment.
by itself does not provide encryption or strong authentication.
It is recommended that the implementors consider the security features as provided by the SNMPv3 framework.
Specifically, the use of the User based Security Model [RFC2274] and the View based Access Control Model [RFC2275] is recommended.
It is then a customer/user responsibility to ensure that the SNMP entity giving access to an instance of this MIB, is properly configured to give access to those objects only to those principals (users) that have legitimate rights to access them.
