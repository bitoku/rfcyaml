- title: __initial_text__
  contents:
  - "                     Universal Plug and Play (UPnP)\n Internet Gateway Device\
    \ - Port Control Protocol Interworking Function\n                            \
    \ (IGD-PCP IWF)\n"
- title: Abstract
  contents:
  - "Abstract\n   This document specifies the behavior of the Universal Plug and Play\n\
    \   (UPnP) Internet Gateway Device - Port Control Protocol Interworking\n   Function\
    \ (IGD-PCP IWF).  A UPnP IGD-PCP IWF is required to be\n   embedded in Customer\
    \ Premises (CP) routers to allow for transparent\n   NAT control in environments\
    \ where a UPnP IGD is used on the LAN side\n   and PCP is used on the external\
    \ side of the CP router.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6970.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \      1.1. Requirements Language ......................................3\n  \
    \ 2. Acronyms ........................................................4\n   3.\
    \ Architecture Model ..............................................4\n   4. UPnP\
    \ IGD-PCP IWF: Overview ......................................6\n      4.1. UPnP\
    \ IGD-PCP: State Variables ..............................6\n      4.2. IGD-PCP:\
    \ Methods ...........................................7\n      4.3. UPnP IGD-PCP:\
    \ Errors .......................................8\n   5. Specification of the\
    \ IGD-PCP IWF ................................9\n      5.1. PCP Server Discovery\
    \ .......................................9\n      5.2. Control of the Firewall\
    \ ...................................10\n      5.3. Port Mapping Table ........................................10\n\
    \      5.4. Interworking Function without NAT in the IGD ..............10\n  \
    \    5.5. NAT Embedded in the IGD ...................................11\n    \
    \  5.6. Creating a Mapping ........................................12\n      \
    \     5.6.1. AddAnyPortMapping() ................................12\n        \
    \   5.6.2. AddPortMapping() ...................................13\n      5.7.\
    \ Listing One or a Set of Mappings ..........................16\n      5.8. Delete\
    \ One or a Set of Mappings: DeletePortMapping() or\n           DeletePortMappingRange()\
    \ ..................................16\n      5.9. Renewing a Mapping ........................................19\n\
    \      5.10. Rapid Recovery ...........................................20\n  \
    \ 6. Security Considerations ........................................21\n   7.\
    \ Acknowledgments ................................................21\n   8. References\
    \ .....................................................22\n      8.1. Normative\
    \ References ......................................22\n      8.2. Informative\
    \ References ....................................22\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Port Control Protocol (PCP) specification [RFC6887]\
    \ discusses the\n   implementation of NAT control features that rely upon Carrier\
    \ Grade\n   NAT devices such as a Dual-Stack Lite (DS-Lite) Address Family\n \
    \  Transition Router (AFTR) [RFC6333] or NAT64 [RFC6146].  In\n   environments\
    \ where a Universal Plug and Play Internet Gateway Device\n   (UPnP IGD) is used\
    \ in the local network, an interworking function\n   between the UPnP IGD and\
    \ PCP is required to be embedded in the IGD\n   (see the example illustrated in\
    \ Figure 1).\n                            UPnP IGD-PCP\n   UPnP Control      \
    \       Interworking\n      Point                   Function                 \
    \ PCP Server\n        |                       IGD                          |\n\
    \        |                        |                           |\n        |  (1)\
    \ AddPortMapping()  |                           |\n        |----------------------->|\
    \                           |\n        |                        |   (2) PCP MAP\
    \ Request     |\n        |                        |-------------------------->|\n\
    \        |                        |                           |\n            \
    \              Figure 1: Flow Example\n   Two configurations are considered within\
    \ this document:\n   o  No NAT function is embedded in the IGD (Section 5.4).\
    \  This is\n      required, for instance, in DS-Lite or NAT64 deployments.\n \
    \  o  The IGD embeds a NAT function (Section 5.5).\n   The UPnP IGD-PCP Interworking\
    \ Function (UPnP IGD-PCP IWF) maintains a\n   local mapping table that stores\
    \ all active mappings constructed by\n   internal IGD Control Points.  This design\
    \ choice restricts the amount\n   of PCP messages to be exchanged with the PCP\
    \ server.\n   Triggers for deactivating the UPnP IGD-PCP IWF from the IGD and\n\
    \   relying on a PCP-only mode are out of scope for this document.\n   Considerations\
    \ related to co-existence of the UPnP IGD-PCP\n   Interworking Function and a\
    \ PCP Proxy [PCP-PROXY] are out of scope.\n"
- title: 1.1.  Requirements Language
  contents:
  - "1.1.  Requirements Language\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in RFC 2119 [RFC2119].\n"
- title: 2.  Acronyms
  contents:
  - "2.  Acronyms\n   This document makes use of the following abbreviations:\n  \
    \    DS-Lite - Dual-Stack Lite\n      IGD - Internet Gateway Device\n      IGD:1\
    \ - UPnP Forum's nomenclature for version 1 of IGD [IGD1]\n      IGD:2 - UPnP\
    \ Forum's nomenclature for version 2 of IGD [IGD2]\n      IWF - Interworking Function\n\
    \      NAT - Network Address Translation\n      PCP - Port Control Protocol\n\
    \      UPnP - Universal Plug and Play\n"
- title: 3.  Architecture Model
  contents:
  - "3.  Architecture Model\n   As a reminder, Figure 2 illustrates the architecture\
    \ model as adopted\n   by the UPnP Forum [IGD2].  In Figure 2, the following UPnP\n\
    \   terminology is used:\n   o  'Client' refers to a host located in the local\
    \ network.\n   o  'IGD Control Point' is a device using UPnP to control an IGD\n\
    \      (Internet Gateway Device).\n   o  'IGD' is a router supporting a UPnP IGD.\
    \  It is typically a NAT or\n      a firewall.\n   o  'Host' is a remote peer\
    \ reachable in the Internet.\n                +-------------+\n              \
    \  | IGD Control |\n                |   Point     |-----+\n                +-------------+\
    \     |   +-----+       +------+\n                                    +---|  \
    \   |       |      |\n                                        | IGD |-------|\
    \ Host |\n                                    +---|     |       |      |\n   \
    \             +-------------+     |   +-----+       +------+\n               \
    \ |   Client    |-----+\n                +-------------+\n                   \
    \      Figure 2: UPnP IGD Model\n   This model is not valid when PCP is used to\
    \ control, for instance, a\n   Carrier Grade NAT (aka Provider NAT) while internal\
    \ hosts continue to\n   use a UPnP IGD.  In such scenarios, Figure 3 shows the\
    \ updated model.\n   +-------------+\n   | IGD Control |\n   |   Point     |----+\n\
    \   +-------------+    |   +-----+      +--------+               +------+\n  \
    \                    +---| IGD-|      |Provider|               |Remote|\n    \
    \                      | PCP |------|  NAT   |--<Internet>---| Host |\n      \
    \                +---| IWF |      |        |               |      |\n   +-------------+\
    \    |   +-----+      +--------+               +------+\n   | Local Host  |----+\n\
    \   +-------------+\n                        LAN Side  External Side\n   <======UPnP\
    \ IGD==============><=====PCP=====>\n                 Figure 3: UPnP IGD-PCP Interworking\
    \ Model\n   In the updated model depicted in Figure 3, one or two levels of NAT\n\
    \   can be encountered in the data path.  Indeed, in addition to the\n   Carrier\
    \ Grade NAT, the IGD may embed a NAT function (Figure 4).\n   +-------------+\n\
    \   | IGD Control |\n   |   Point     |----+\n   +-------------+    |   +-----+\
    \      +--------+               +------+\n                      +---| IGD-|  \
    \    |Provider|               |Remote|\n                          | PCP |------|\
    \  NAT   |--<Internet>---| Host |\n                      +---| IWF |      |  \
    \      |               |      |\n   +-------------+    |   +-----+      +--------+\
    \               +------+\n   | Local Host  |----+    NAT1           NAT2\n   +-------------+\n\
    \                      Figure 4: Cascaded NAT Scenario\n   To ensure successful\
    \ interworking between a UPnP IGD and PCP, an\n   interworking function is embedded\
    \ in the IGD.  In the model defined\n   in Figure 3, all UPnP IGD server-oriented\
    \ functions, a PCP client\n   [RFC6887], and a UPnP IGD-PCP Interworking Function\
    \ are embedded in\n   the IGD.  In the rest of the document, \"IGD-PCP IWF\" refers\
    \ to the\n   UPnP IGD-PCP Interworking Function, which includes PCP client\n \
    \  functionality.\n   Without the involvement of the IGD-PCP IWF, the IGD Control\
    \ Point\n   would retrieve an external IP address and port number that have\n\
    \   limited scope and that cannot be used to communicate with hosts\n   located\
    \ beyond NAT2 (i.e., assigned by the IGD, and not those\n   assigned by NAT2 as\
    \ depicted in Figure 4).\n   The UPnP IGD-PCP IWF is responsible for generating\
    \ a well-formed PCP\n   message from a received UPnP IGD message, and vice versa.\n"
- title: '4.  UPnP IGD-PCP IWF: Overview'
  contents:
  - "4.  UPnP IGD-PCP IWF: Overview\n   Three tables are provided to specify the correspondence\
    \ between a\n   UPnP IGD and PCP:\n   (1)  Section 4.1 provides the mapping between\
    \ WANIPConnection state\n        variables and PCP parameters;\n   (2)  Section\
    \ 4.2 focuses on the correspondence between supported\n        methods;\n   (3)\
    \  Section 4.3 lists the PCP error messages and their corresponding\n        IGD\
    \ error messages.\n   Note that some enhancements have been integrated in WANIPConnection,\n\
    \   as documented in [IGD2].\n"
- title: '4.1.  UPnP IGD-PCP: State Variables'
  contents:
  - "4.1.  UPnP IGD-PCP: State Variables\n   Below are listed only the UPnP IGD state\
    \ variables applicable to the\n   IGD-PCP IWF:\n   ExternalIPAddress:  External\
    \ IP Address\n      Read-only variable with the value from the last PCP response,\
    \ or\n      the empty string if none was received yet.  This state is stored\n\
    \      on a per-IGD-Control-Point basis.\n   PortMappingNumberOfEntries:  Managed\
    \ locally by the UPnP IGD-PCP IWF.\n   PortMappingEnabled:\n      PCP does not\
    \ support deactivating the dynamic NAT mapping, since\n      the initial goal\
    \ of PCP is to ease the traversal of Carrier Grade\n      NAT.  Supporting such\
    \ per-subscriber function may overload the\n      Carrier Grade NAT.\n      Only\
    \ \"1\" is allowed: i.e., the UPnP IGD-PCP Interworking Function\n      MUST send\
    \ back an error if a value different from 1 is signaled.\n   PortMappingLeaseDuration:\
    \  Requested Mapping Lifetime\n      In IGD:1 [IGD1], the value 0 means infinite;\
    \ in IGD:2, it is\n      remapped to the IGD maximum of 604800 seconds [IGD2].\
    \  PCP allows\n      for a maximum value of 4294967296 seconds.\n      The UPnP\
    \ IGD-PCP Interworking Function simulates long and even\n      infinite lifetimes\
    \ using renewals (see Section 5.9).  The behavior\n      of the UPnP IGD-PCP IWF\
    \ in the case of a failing renewal is\n      currently undefined (see Section\
    \ 5.9).\n      IGD:1 doesn't define the behavior in the case of state loss; IGD:2\n\
    \      doesn't require that state be kept in stable storage, i.e., to\n      allow\
    \ the state to survive resets/reboots.  The UPnP IGD-PCP\n      Interworking Function\
    \ MUST support IGD:2 behavior.\n   RemoteHost:  Remote Peer IP Address\n     \
    \ Note that IGD:2 allows a domain name, which has to be resolved to\n      an\
    \ IP address.  Mapped to the Remote Peer IP Address field of the\n      FILTER\
    \ option.\n   ExternalPort:  External Port Number\n      Mapped to the Suggested\
    \ External Port field in MAP messages.\n   InternalPort:  Internal Port Number\n\
    \      Mapped to the Internal Port field in MAP messages.\n   PortMappingProtocol:\
    \  Protocol\n      Mapped to the Protocol field in MAP messages.  Note that a\
    \ UPnP\n      IGD only supports TCP and UDP.\n   InternalClient:  Internal IP\
    \ Address\n      Note that IGD:2 allows a domain name, which has to be resolved\
    \ to\n      an IP address.  Mapped to the Internal IP Address field of the\n \
    \     THIRD_PARTY option.\n   PortMappingDescription:  Not supported in base PCP.\n\
    \      If the local PCP client supports a PCP option to convey the\n      description\
    \ (e.g., [PCP-DESCR-OPT]), this option SHOULD be used to\n      relay the mapping\
    \ description.\n   SystemUpdateID (IGD:2 only):  Managed locally by the UPnP IGD-PCP\n\
    \      IWF.\n   A_ARG_TYPE_PortListing (IGD:2 only):  Managed locally by the UPnP\n\
    \      IGD-PCP IWF.\n"
- title: '4.2.  IGD-PCP: Methods'
  contents:
  - "4.2.  IGD-PCP: Methods\n   IGD:1 and IGD:2 methods applicable to the UPnP IGD-PCP\
    \ Interworking\n   Function are both listed here.\n   GetGenericPortMappingEntry():\
    \  This request is not relayed to the PCP\n      server.\n      The IGD-PCP Interworking\
    \ Function maintains a list of active\n      mappings instantiated in the PCP\
    \ server by internal hosts.  See\n      Section 5.7 for more information.\n  \
    \ GetSpecificPortMappingEntry():  MAP with PREFER_FAILURE option.\n      This\
    \ request is relayed to the PCP server by issuing a MAP request\n      with the\
    \ PREFER_FAILURE option.  It is RECOMMENDED to use a short\n      lifetime (e.g.,\
    \ 60 seconds).\n   AddPortMapping():  MAP\n      See Section 5.6.2.\n   AddAnyPortMapping()\
    \ (IGD:2 only):  MAP\n      See Section 5.6.1.\n   DeletePortMapping():  MAP with\
    \ Requested Lifetime set to 0.\n      See Section 5.8.\n   DeletePortMappingRange()\
    \ (IGD:2 only):  MAP with Requested Lifetime\n      set to 0.\n      Individual\
    \ requests are issued by the IGD-PCP IWF.  See\n      Section 5.8 for more details.\n\
    \   GetExternalIPAddress():  MAP\n      This can be learned from any active mapping.\
    \  If there are no\n      active mappings, the IGD-PCP IWF MAY request a short-lived\
    \ mapping\n      (e.g., to the Discard service (TCP/9 or UDP/9) or some other\n\
    \      port).  However, once that mapping expires, a subsequent implicit\n   \
    \   or explicit dynamic mapping might be mapped to a different\n      external\
    \ IP address.  See Section 11.6 of [RFC6887] for more\n      discussion.\n   GetListOfPortMappings():\
    \  See Section 5.7 for more information.\n      The IGD-PCP Interworking Function\
    \ maintains a list of active\n      mappings instantiated in the PCP server. \
    \ The IGD-PCP Interworking\n      Function handles this request locally.\n"
- title: '4.3.  UPnP IGD-PCP: Errors'
  contents:
  - "4.3.  UPnP IGD-PCP: Errors\n   This section lists PCP error codes and the corresponding\
    \ UPnP IGD\n   codes.  Error codes specific to IGD:2 are tagged accordingly.\n\
    \   1 UNSUPP_VERSION:  501 \"ActionFailed\"\n   2 NOT_AUTHORIZED:  IGD:1 718 \"\
    ConflictInMappingEntry\" / IGD:2 606\n      \"Action not authorized\"\n   3 MALFORMED_REQUEST:\
    \  501 \"ActionFailed\"\n   4 UNSUPP_OPCODE:  501 \"ActionFailed\"\n      [RFC6887]\
    \ allows the PCP server to be configured to disable\n      support for the MAP\
    \ Opcode, but the IGD-PCP IWF cannot work in\n      this situation.\n   5 UNSUPP_OPTION:\
    \  501 \"ActionFailed\"\n      This error code can be received if PREFER_FAILURE\
    \ is not supported\n      on the PCP server.  Note that PREFER_FAILURE is not\
    \ mandatory to\n      support, but AddPortMapping() cannot be implemented without\
    \ it.\n   6 MALFORMED_OPTION:  501 \"ActionFailed\"\n   7 NETWORK_FAILURE:  501\
    \ \"ActionFailed\"\n   8 NO_RESOURCES:  IGD:1 501 \"ActionFailed\" / IGD:2 728\n\
    \      \"NoPortMapsAvailable\"\n      Cannot be distinguished from USER_EX_QUOTA.\n\
    \   9 UNSUPP_PROTOCOL:  501 \"ActionFailed\"\n   10 USER_EX_QUOTA:  IGD:1 501\
    \ \"ActionFailed\" / IGD:2 728\n      \"NoPortMapsAvailable\"\n      Cannot be\
    \ distinguished from NO_RESOURCES.\n   11 CANNOT_PROVIDE_EXTERNAL:  718 \"ConflictInMappingEntry\"\
    \ (see\n      Section 5.6.2) or 714 \"NoSuchEntryInArray\" (see Section 5.8).\n\
    \   12 ADDRESS_MISMATCH:  501 \"ActionFailed\"\n   13 EXCESSIVE_REMOTE_PEERS:\
    \  501 \"ActionFailed\"\n"
- title: 5.  Specification of the IGD-PCP IWF
  contents:
  - "5.  Specification of the IGD-PCP IWF\n   This section covers scenarios with or\
    \ without NAT in the IGD.\n   This specification assumes that the PCP server is\
    \ configured to\n   accept the MAP Opcode.\n   The IGD-PCP IWF handles the \"\
    Mapping Nonce\" the same way as any PCP\n   client [RFC6887].\n"
- title: 5.1.  PCP Server Discovery
  contents:
  - "5.1.  PCP Server Discovery\n   The IGD-PCP IWF implements one of the discovery\
    \ methods identified in\n   [RFC6887] (e.g., DHCP [PCP-DHCP-OPT]).  The IGD-PCP\
    \ Interworking\n   Function behaves as a PCP client when communicating with provisioned\n\
    \   PCP server(s).\n   If no IPv4 address/IPv6 prefix is assigned to the IGD or\
    \ the IGD is\n   unable to determine whether it should contact an upstream PCP\
    \ server,\n   the IGD-PCP Interworking Function MUST NOT be invoked.\n   If the\
    \ IGD determines that it should establish communication with an\n   upstream PCP\
    \ server (e.g., because of DHCP configuration or having\n   previously communicated\
    \ with a PCP server), a \"501 ActionFailed\"\n   error message is returned to\
    \ the requesting IGD Control Point if the\n   IGD-PCP IWF fails to establish communication\
    \ with that PCP server.\n   Note that the IGD-PCP IWF proceeds to PCP message\
    \ validation and\n   retransmission the same way as any PCP client [RFC6887].\n"
- title: 5.2.  Control of the Firewall
  contents:
  - "5.2.  Control of the Firewall\n   In order to configure security policies to\
    \ be applied to inbound and\n   outbound traffic, a UPnP IGD can be used to control\
    \ a local firewall\n   engine.  No IGD-PCP IWF is therefore required for that\
    \ purpose.\n   The use of the IGD-PCP IWF to control an upstream PCP-controlled\n\
    \   firewall is out of scope for this document.\n"
- title: 5.3.  Port Mapping Table
  contents:
  - "5.3.  Port Mapping Table\n   The IGD-PCP IWF MUST store locally all the mappings\
    \ instantiated by\n   internal IGD Control Points in the PCP server.  All mappings\
    \ SHOULD\n   be stored in permanent storage.\n   Upon receipt of a PCP MAP response\
    \ from the PCP server, the IGD-PCP\n   Interworking Function MUST extract the\
    \ enclosed mapping and MUST\n   store it in the local mapping table.  The local\
    \ mapping table is an\n   image of the mapping table as maintained by the PCP\
    \ server for a\n   given subscriber.\n   Each mapping entry stored in the local\
    \ mapping table is associated\n   with a lifetime as discussed in [RFC6887]. \
    \ Additional considerations\n   specific to the IGD-PCP Interworking Function\
    \ are discussed in\n   Section 5.9.\n"
- title: 5.4.  Interworking Function without NAT in the IGD
  contents:
  - "5.4.  Interworking Function without NAT in the IGD\n   When no NAT is embedded\
    \ in the IGD, the contents of received\n   WANIPConnection and PCP messages are\
    \ not altered by the IGD-PCP\n   Interworking Function (i.e., the contents of\
    \ WANIPConnection messages\n   are mapped to PCP messages (and mapped back), according\
    \ to\n   Section 4.1).\n"
- title: 5.5.  NAT Embedded in the IGD
  contents:
  - "5.5.  NAT Embedded in the IGD\n   When NAT is embedded in the IGD, the IGD-PCP\
    \ IWF updates the contents\n   of mapping messages received from the IGD Control\
    \ Point.  These\n   messages will contain an IP address and/or port number that\
    \ belong to\n   an internal host.  The IGD-PCP IWF MUST update such messages with\
    \ the\n   IP address and/or port number belonging to the external interface of\n\
    \   the IGD (i.e., after the NAT1 operation as depicted in Figure 4).\n   The\
    \ IGD-PCP IWF intercepts all WANIPConnection messages issued by the\n   IGD Control\
    \ Point.  For each such message, the IGD-PCP IWF then\n   generates one or more\
    \ corresponding requests (see Sections 4.1, 4.2,\n   and 4.3) and sends them to\
    \ the provisioned PCP server.\n   Each request sent by the IGD-PCP IWF to the\
    \ PCP server MUST reflect\n   the mapping information as enforced in the first\
    \ NAT.  Particularly,\n   the internal IP address and/or port number of the requests\
    \ are\n   replaced with the IP address and/or port number as assigned by the\n\
    \   NAT of the IGD.  For the reverse path, the IGD-PCP IWF intercepts PCP\n  \
    \ response messages and generates WANIPConnection response messages.\n   The contents\
    \ of the generated WANIPConnection response messages are\n   set as follows:\n\
    \   o  The internal IP address and/or port number as initially set by the\n  \
    \    IGD Control Point and stored in the IGD NAT are used to update the\n    \
    \  corresponding fields in received PCP responses.\n   o  The external IP address\
    \ and port number are not altered by the\n      IGD-PCP Interworking Function.\n\
    \   o  The NAT mapping entry in the IGD is updated with the result of\n      each\
    \ PCP request.\n   The lifetime of the mappings instantiated in the IGD SHOULD\
    \ be the\n   one assigned by the terminating PCP server.  In any case, the\n \
    \  lifetime MUST NOT be lower than the one assigned by the terminating\n   PCP\
    \ server.\n"
- title: 5.6.  Creating a Mapping
  contents:
  - "5.6.  Creating a Mapping\n   Two methods can be used to create a mapping: AddAnyPortMapping()\
    \ and\n   AddPortMapping().\n"
- title: 5.6.1.  AddAnyPortMapping()
  contents:
  - "5.6.1.  AddAnyPortMapping()\n   When an IGD Control Point issues an AddAnyPortMapping()\
    \ call, this\n   request is received by the IGD.  The request is then relayed\
    \ to the\n   IGD-PCP IWF, which generates a PCP MAP request (see Section 4.1 for\n\
    \   mapping between WANIPConnection and PCP parameters).\n   If the IGD-PCP IWF\
    \ fails to send the MAP request to its PCP server,\n   it follows the behavior\
    \ defined in Section 5.1.\n   Upon receipt of a PCP MAP response from the PCP\
    \ server, the\n   corresponding UPnP IGD method is returned to the requesting\
    \ IGD\n   Control Point (the contents of the messages follow the\n   recommendations\
    \ listed in Section 5.5 or Section 5.4, according to\n   the deployed scenario).\
    \  A flow example is depicted in Figure 5.\n   If a PCP error is received from\
    \ the PCP server, a corresponding\n   WANIPConnection error code (see Section\
    \ 4.3) is generated by the\n   IGD-PCP IWF and sent to the requesting IGD Control\
    \ Point.  If a\n   short-lifetime error is returned (e.g., NETWORK_FAILURE,\n\
    \   NO_RESOURCES), the PCP IWF MAY resend the same request to the PCP\n   server\
    \ after 30 seconds.  If a negative answer is received, the error\n   is then relayed\
    \ to the requesting IGD Control Point.\n      Discussion: Some applications (e.g.,\
    \ uTorrent, Vuze, eMule) wait\n      90 seconds or more for a response after sending\
    \ a UPnP request.\n      If a short-lifetime error occurs, resending the request\
    \ may lead\n      to a positive response from the PCP server.  IGD Control Points\n\
    \      are therefore not aware of transient errors.\n                        \
    \       UPnP-PCP\n   UPnP Control              Interworking\n      Point     \
    \               Function                    PCP Server\n        |            \
    \             |                             |\n        | (1) AddAnyPortMapping()\
    \ |                             |\n        |    ExternalPort=8080    |       \
    \                      |\n        |------------------------>|                \
    \             |\n        |                         |   (2) PCP MAP Request   \
    \    |\n        |                         |Suggested External Port=8080 |\n  \
    \      |                         |---------------------------->|\n        |  \
    \                       |                             |\n        |           \
    \              |   (3) PCP MAP Response      |\n        |                    \
    \     | Assigned External Port=6598 |\n        |                         |<----------------------------|\n\
    \        | (4) AddAnyPortMapping() |                             |\n        |\
    \    ReservedPort=6598    |                             |\n        |<------------------------|\
    \                             |\n                Figure 5: Flow Example: AddAnyPortMapping()\n"
- title: 5.6.2.  AddPortMapping()
  contents:
  - "5.6.2.  AddPortMapping()\n   A dedicated option called \"PREFER_FAILURE\" is\
    \ defined in [RFC6887] to\n   toggle the behavior in a PCP request message.  This\
    \ option is\n   inserted by the IGD-PCP IWF when issuing its requests to the PCP\n\
    \   server only if a specific external port is requested by the IGD\n   Control\
    \ Point.\n   Upon receipt of AddPortMapping() from an IGD Control Point, the\n\
    \   IGD-PCP IWF MUST generate a PCP MAP request with all requested\n   mapping\
    \ information as indicated by the IGD Control Point if no NAT\n   is embedded\
    \ in the IGD or updated as specified in Section 5.5.  In\n   addition, the IGD-PCP\
    \ IWF MUST insert a PREFER_FAILURE option in the\n   generated PCP request.\n\
    \   If the IGD-PCP IWF fails to send the MAP request to its PCP server,\n   it\
    \ follows the behavior defined in Section 5.1.\n   If the requested external port\
    \ is not available, the PCP server will\n   send a CANNOT_PROVIDE_EXTERNAL error\
    \ response:\n   1.  If a short-lifetime error is returned, the IGD-PCP IWF MAY\
    \ resend\n       the same request to the PCP server after 30 seconds without\n\
    \       relaying the error to the IGD Control Point.  The IGD-PCP IWF MAY\n  \
    \     repeat this process until a positive answer is received or some\n      \
    \ maximum retry limit is reached.  When the maximum retry limit is\n       reached,\
    \ the IGD-PCP IWF relays a negative message to the IGD\n       Control Point with\
    \ ConflictInMappingEntry as the error code.\n       The maximum retry limit is\
    \ implementation-specific; its default\n       value is 2.\n   2.  If a long-lifetime\
    \ error is returned, the IGD-PCP IWF relays a\n       negative message to the\
    \ IGD Control Point with\n       ConflictInMappingEntry as the error code.\n \
    \  The IGD Control Point may issue a new request with a different\n   requested\
    \ external port number.  This process is typically repeated\n   by the IGD Control\
    \ Point until a positive answer is received or some\n   maximum retry limit is\
    \ reached.\n   If the PCP server is able to create or renew a mapping with the\n\
    \   requested external port, it sends a positive response to the IGD-PCP\n   IWF.\
    \  Upon receipt of the response from the PCP server, the IGD-PCP\n   IWF stores\
    \ the returned mapping in its local mapping table and sends\n   the corresponding\
    \ positive answer to the requesting IGD Control\n   Point.  This answer terminates\
    \ the exchange.\n   Figure 6 shows an example of the flow exchange that occurs\
    \ when the\n   PCP server satisfies the request from the IGD-PCP IWF.  Figure\
    \ 7\n   shows the message exchange when the requested external port is not\n \
    \  available.\n                              UPnP-PCP\n   UPnP Control       \
    \      Interworking\n      Point                   Function                  \
    \  PCP Server\n        |                        |                            \
    \ |\n        |  (1) AddPortMapping()  |                             |\n      \
    \  |    ExternalPort=8080   |                             |\n        |----------------------->|\
    \                             |\n        |                        |   (2) PCP\
    \ MAP Request       |\n        |                        |Suggested External Port=8080\
    \ |\n        |                        |       PREFER_FAILURE        |\n      \
    \  |                        |---------------------------->|\n        |       \
    \                 |                             |\n        |                 \
    \       |   (3) PCP MAP Response      |\n        |                        | Assigned\
    \ External Port=8080 |\n        |                        |<----------------------------|\n\
    \        |  (4) AddPortMapping()  |                             |\n        | \
    \   ExternalPort=8080   |                             |\n        |<-----------------------|\
    \                             |\n                 Figure 6: Flow Example (Positive\
    \ Answer)\n                              UPnP-PCP\n   UPnP Control           \
    \  Interworking\n      Point                   Function                    PCP\
    \ Server\n        |                        |                             |\n \
    \       |  (1) AddPortMapping()  |                             |\n        |  \
    \  ExternalPort=8080   |                             |\n        |----------------------->|\
    \                             |\n        |                        |   (2) PCP\
    \ MAP Request       |\n        |                        |Suggested External Port=8080\
    \ |\n        |                        |       PREFER_FAILURE        |\n      \
    \  |                        |---------------------------->|\n        |       \
    \                 |   (3) PCP MAP Response      |\n        |                 \
    \       |   CANNOT_PROVIDE_EXTERNAL   |\n        |                        |<----------------------------|\n\
    \        |      (4) Error:        |                             |\n        | ConflictInMappingEntry\
    \ |                             |\n        |<-----------------------|        \
    \                     |\n        |  (5) AddPortMapping()  |                  \
    \           |\n        |    ExternalPort=5485   |                            \
    \ |\n        |----------------------->|                             |\n      \
    \  |                        |   (6) PCP MAP Request       |\n        |       \
    \                 |Suggested External Port=5485 |\n        |                 \
    \       |       PREFER_FAILURE        |\n        |                        |---------------------------->|\n\
    \        |                        |   (7) PCP MAP Response      |\n        | \
    \                       |   CANNOT_PROVIDE_EXTERNAL   |\n        |           \
    \             |<----------------------------|\n        |      (8) Error:     \
    \   |                             |\n        | ConflictInMappingEntry |      \
    \                       |\n        |<-----------------------|                \
    \             |\n                                 ....\n        |  (a) AddPortMapping()\
    \  |                             |\n        |    ExternalPort=6591   |       \
    \                      |\n        |----------------------->|                 \
    \            |\n        |                        |   (b) PCP MAP Request     \
    \  |\n        |                        |Suggested External Port=6591 |\n     \
    \   |                        |       PREFER_FAILURE        |\n        |      \
    \                  |---------------------------->|\n        |                \
    \        |   (c) PCP MAP Response      |\n        |                        | \
    \  CANNOT_PROVIDE_EXTERNAL   |\n        |                        |<----------------------------|\n\
    \        |      (d) Error:        |                             |\n        | ConflictInMappingEntry\
    \ |                             |\n        |<-----------------------|        \
    \                     |\n                 Figure 7: Flow Example (Negative Answer)\n\
    \      Note: According to some experiments, some UPnP 1.0 Control Point\n    \
    \  implementations, e.g., uTorrent, simply try the same external port\n      a\
    \ number of times (usually 4 times) and then fail if the port is\n      in use.\
    \  Also note that some applications use\n      GetSpecificPortMappingEntry() to\
    \ determine whether a mapping\n      exists.\n"
- title: 5.7.  Listing One or a Set of Mappings
  contents:
  - "5.7.  Listing One or a Set of Mappings\n   In order to list active mappings,\
    \ an IGD Control Point may issue\n   GetGenericPortMappingEntry(), GetSpecificPortMappingEntry(),\
    \ or\n   GetListOfPortMappings().\n   GetGenericPortMappingEntry() and GetListOfPortMappings()\
    \ methods MUST\n   NOT be proxied to the PCP server, since a local mapping is\
    \ maintained\n   by the IGD-PCP IWF.\n   Upon receipt of GetSpecificPortMappingEntry()\
    \ from an IGD Control\n   Point, the IGD-PCP IWF MUST check first to see if the\
    \ external port\n   number is used by the requesting IGD Control Point.  If the\
    \ external\n   port is already in use by the requesting IGD Control Point, the\n\
    \   IGD-PCP IWF MUST send back the mapping entry matching the request.\n   If\
    \ not, the IGD-PCP IWF MUST relay to the PCP server a MAP request,\n   with short\
    \ lifetime (e.g., 60 seconds), including a PREFER_FAILURE\n   option.  If the\
    \ IGD-PCP IWF fails to send the MAP request to its PCP\n   server, it follows\
    \ the behavior defined in Section 5.1.  If the\n   requested external port is\
    \ in use, a PCP error message will be sent\n   by the PCP server to the IGD-PCP\
    \ IWF indicating\n   CANNOT_PROVIDE_EXTERNAL as the error cause.  Then, the IGD-PCP\
    \ IWF\n   relays a negative message to the IGD Control Point.  If the port is\n\
    \   not in use, the mapping will be created by the PCP server and a\n   positive\
    \ response will be sent back to the IGD-PCP IWF.  Once\n   received by the IGD-PCP\
    \ IWF, it MUST relay a negative message to the\n   IGD Control Point indicating\
    \ NoSuchEntryInArray as the error code so\n   that the IGD Control Point knows\
    \ the queried mapping doesn't exist.\n"
- title: '5.8.  Delete One or a Set of Mappings: DeletePortMapping() or'
  contents:
  - "5.8.  Delete One or a Set of Mappings: DeletePortMapping() or\n      DeletePortMappingRange()\n\
    \   An IGD Control Point requests the deletion of one or a list of\n   mappings\
    \ by issuing DeletePortMapping() or DeletePortMappingRange().\n   In IGD:2, we\
    \ assume that the IGD applies the appropriate security\n   policies to determine\
    \ whether a Control Point has the rights to\n   delete one or a set of mappings.\
    \  When authorization fails, the \"606\n   Action Not Authorized\" error code\
    \ is returned to the requesting\n   Control Point.\n   When DeletePortMapping()\
    \ or DeletePortMappingRange() is received by\n   the IGD-PCP IWF, it first checks\
    \ if the requested mappings to be\n   removed are present in the local mapping\
    \ table.  If no mapping\n   matching the request is found in the local table,\
    \ an error code is\n   sent back to the IGD Control Point: \"714 NoSuchEntryInArray\"\
    \ for\n   DeletePortMapping() or \"730 PortMappingNotFound\" for\n   DeletePortMappingRange().\n\
    \   Figure 8 shows an example of an IGD Control Point asking to delete a\n   mapping\
    \ that is not instantiated in the local table of the IWF.\n                  \
    \             UPnP-PCP\n   UPnP Control              Interworking\n      Point\
    \                    Function                  PCP Server\n        |         \
    \                |                           |\n        | (1) DeletePortMapping()\
    \ |                           |\n        |------------------------>|         \
    \                  |\n        |                         |                    \
    \       |\n        |       (2) Error:        |                           |\n \
    \       |    NoSuchEntryInArray   |                           |\n        |<------------------------|\
    \                           |\n        |                         |           \
    \                |\n                   Figure 8: Local Delete (IGD-PCP IWF)\n\
    \   If a mapping matches in the local table, a PCP MAP delete request is\n   generated.\
    \  If no NAT is enabled in the IGD, the IGD-PCP IWF uses the\n   input arguments\
    \ as included in DeletePortMapping().  If a NAT is\n   enabled in the IGD, the\
    \ IGD-PCP IWF instead uses the corresponding IP\n   address and port number as\
    \ assigned by the local NAT.\n   If the IGD-PCP IWF fails to send the MAP request\
    \ to its PCP server,\n   it follows the behavior defined in Section 5.1.\n   When\
    \ a positive answer is received from the PCP server, the IGD-PCP\n   IWF updates\
    \ its local mapping table (i.e., removes the corresponding\n   entry) and notifies\
    \ the IGD Control Point of the result of the\n   removal operation.  Once the\
    \ PCP MAP delete request is received by\n   the PCP server, it removes the corresponding\
    \ entry.  A PCP MAP\n   SUCCESS response is sent back if the removal of the corresponding\n\
    \   entry was successful; if not, a PCP error message containing the\n   corresponding\
    \ error cause (see Section 4.3) is sent back to the\n   IGD-PCP IWF.\n   If DeletePortMappingRange()\
    \ is used, the IGD-PCP IWF does a lookup in\n   its local mapping table to retrieve\
    \ individual mappings, instantiated\n   by the requesting Control Point (i.e.,\
    \ authorization checks), that\n   match the signaled port range (i.e., the external\
    \ port is within the\n   \"StartPort\" and \"EndPort\" arguments of DeletePortMappingRange()).\
    \  If\n   no mapping is found, the \"730 PortMappingNotFound\" error code is sent\n\
    \   to the IGD Control Point (Figure 9).  If one or more mappings are\n   found,\
    \ the IGD-PCP IWF generates individual PCP MAP delete requests\n   corresponding\
    \ to these mappings (see the example shown in Figure 10).\n   The IGD-PCP IWF\
    \ MAY send a positive answer to the requesting IGD\n   Control Point without waiting\
    \ to receive all the answers from the PCP\n   server.\n                      \
    \              UPnP-PCP\n   UPnP Control                   Interworking\n    \
    \  Point                         Function                 PCP Server\n       \
    \ |                              |                          |\n        | (1) DeletePortMappingRange()\
    \ |                          |\n        |       StartPort=8596         |     \
    \                     |\n        |       EndPort  =9000         |            \
    \              |\n        |       Protocol =UDP          |                   \
    \       |\n        |----------------------------->|                          |\n\
    \        |                              |                          |\n       \
    \ |       (2) Error:             |                          |\n        |   PortMappingNotFound\
    \        |                          |\n        |<-----------------------------|\
    \                          |\n        |                              |       \
    \                   |\n         Figure 9: Flow Example: Error Encountered when\
    \ Processing\n                         DeletePortMappingRange()\n   Figure 10\
    \ illustrates the exchanges that occur when the IWF receives\n   DeletePortMappingRange().\
    \  In this example, only two mappings having\n   the external port number in the\
    \ 6000-6050 range are maintained in the\n   local table.  The IWF issues two MAP\
    \ requests to delete these\n   mappings.\n                                   \
    \ UPnP-PCP\n   UPnP Control                   Interworking\n      Point      \
    \                   Function                 PCP Server\n        |           \
    \                   |                          |\n        | (1) DeletePortMappingRange()\
    \ |                          |\n        |     StartPort=6000           |     \
    \                     |\n        |     EndPort  =6050           |            \
    \              |\n        |     Protocol =UDP            |                   \
    \       |\n        |----------------------------->|                          |\n\
    \        |                              |                          |\n       \
    \ |                              |   (2a) PCP MAP Request   |\n        |     \
    \                         |       Protocol=UDP       |\n        |            \
    \                  |   internal-ip-address    |\n        |                   \
    \           |      internal-port       |\n        |                          \
    \    |   external-ip-address    |\n        |                              |  \
    \ external-port=6030     |\n        |                              |   Requested-lifetime=0\
    \   |\n        |                              |------------------------->|\n \
    \       |                              |                          |\n        |\
    \                              |   (2b) PCP MAP Request   |\n        |       \
    \                       |       Protocol=UDP       |\n        |              \
    \                |   internal-ip-address    |\n        |                     \
    \         |      internal-port       |\n        |                            \
    \  |   external-ip-address    |\n        |                              |   external-port=6045\
    \     |\n        |                              |   Requested-lifetime=0   |\n\
    \        |                              |------------------------->|\n       \
    \ |                              |                          |\n        |     (3)\
    \ Positive answer      |                          |\n        |<-----------------------------|\
    \                          |\n        |                              |       \
    \                   |\n              Figure 10: Example of DeletePortMappingRange()\n"
- title: 5.9.  Renewing a Mapping
  contents:
  - "5.9.  Renewing a Mapping\n   Because of the incompatibility of mapping lifetimes\
    \ between a UPnP\n   IGD and PCP, the IGD-PCP IWF MUST simulate long and even\
    \ infinite\n   lifetimes.  Indeed, for requests having a requested infinite\n\
    \   PortMappingLeaseDuration, the IGD-PCP IWF MUST set the Requested\n   Lifetime\
    \ of the corresponding PCP request to 4294967296.  If\n   PortMappingLeaseDuration\
    \ is not infinite, the IGD-PCP IWF MUST set\n   the Requested Lifetime of the\
    \ corresponding PCP request to the same\n   value as PortMappingLeaseDuration.\
    \  Furthermore, the IGD-PCP\n   Interworking Function MUST maintain an additional\
    \ timer set to the\n   initial requested PortMappingLeaseDuration.  Upon receipt\
    \ of a\n   positive answer from the PCP server, the IGD-PCP IWF relays the\n \
    \  corresponding UPnP IGD response to the requesting IGD Control Point\n   with\
    \ PortMappingLeaseDuration set to the same value as that of the\n   initial request.\
    \  Then, the IGD-PCP IWF MUST periodically renew the\n   constructed PCP mapping\
    \ until the expiry of PortMappingLeaseDuration.\n   Responses received when renewing\
    \ the mapping MUST NOT be relayed to\n   the IGD Control Point.\n   If an error\
    \ is encountered during mapping renewal, the IGD-PCP\n   Interworking Function\
    \ has no means of informing the IGD Control Point\n   of the error.\n"
- title: 5.10.  Rapid Recovery
  contents:
  - "5.10.  Rapid Recovery\n   When the IGD-PCP IWF is co-located with the DHCP server,\
    \ the state\n   maintained by the IGD-PCP IWF MUST be updated using the state\
    \ in the\n   local DHCP server.  Particularly, if an IP address expires or is\n\
    \   released by an internal host, the IGD-PCP IWF MUST delete all the\n   mappings\
    \ bound to that internal IP address.\n   Upon change of the external IP address\
    \ of the IGD-PCP IWF, the\n   IGD-PCP IWF MAY renew the mappings it maintained.\
    \  This can be\n   achieved only if a full state table is maintained by the IGD-PCP\
    \ IWF.\n   If the port quota is not exceeded in the PCP server, the IGD-PCP IWF\n\
    \   will receive a new external IP address and port numbers.  The IGD-PCP\n  \
    \ IWF has no means of notifying internal IGD Control Points of the\n   change\
    \ of the external IP address and port numbers.  Stale mappings\n   will be maintained\
    \ by the PCP server until their lifetime expires.\n      Note: If an address change\
    \ occurs, protocols that are sensitive to\n      address changes (e.g., TCP) will\
    \ experience disruption.\n   [RFC6887] defines a procedure for the PCP server\
    \ to notify PCP\n   clients of changes related to the mappings it maintains. \
    \ When an\n   unsolicited ANNOUNCE is received, the IGD-PCP IWF makes one or more\n\
    \   MAP requests with the PREFER_FAILURE option to re-install its\n   mappings.\
    \  If the PCP server cannot create the requested mappings\n   (signaled with the\
    \ CANNOT_PROVIDE_EXTERNAL error response), the\n   IGD-PCP IWF has no means of\
    \ notifying internal IGD Control Points of\n   any changes of the external IP\
    \ address and port numbers.\n   Unsolicited PCP MAP responses received from a\
    \ PCP server are handled\n   as any normal MAP response.  If a response indicates\
    \ that the\n   external IP address or port has changed, the IGD-PCP IWF has no\
    \ means\n   of notifying the internal IGD Control Point of this change.\n   Further\
    \ analysis of PCP failure scenarios for the IGD-PCP\n   Interworking Function\
    \ are discussed in [PCP-FAILURE].\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   IGD:2 access control requirements and authorization\
    \ levels SHOULD be\n   applied by default [IGD2].  When IGD:2 is used, operation\
    \ on behalf\n   of a third party SHOULD be allowed only if authentication and\n\
    \   authorization are used [IGD2].  When only IGD:1 is available,\n   operation\
    \ on behalf of a third party SHOULD NOT be allowed.\n   This document defines\
    \ a procedure to create PCP mappings for third-\n   party devices belonging to\
    \ the same subscriber.  The means for\n   preventing a malicious user from creating\
    \ mappings on behalf of a\n   third party must be enabled as discussed in Section\
    \ 13.1 of\n   [RFC6887].  In particular, the THIRD_PARTY option MUST NOT be enabled\n\
    \   unless the network on which the PCP messages are to be sent is fully\n   trusted\
    \ -- for example, access control lists (ACLs) installed on the\n   PCP client,\
    \ the PCP server, and the network between them, so that\n   those ACLs allow only\
    \ communications from a trusted PCP client to the\n   PCP server.\n   An IGD Control\
    \ Point that issues AddPortMapping(),\n   AddAnyPortMapping(), or GetSpecificPortMappingEntry()\
    \ requests in a\n   shorter time frame will create a lot of mapping entries on\
    \ the PCP\n   server.  The means for avoiding the exhaustion of port resources\n\
    \   (e.g., port quota, as discussed in Section 17.2 of [RFC6887]) SHOULD\n   be\
    \ enabled.\n   The security considerations discussed in [RFC6887] and [Sec_DCP]\n\
    \   should be taken into account.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   The authors would like to thank F. Fontaine, C. Jacquenet,\
    \ X. Deng,\n   G. Montenegro, D. Thaler, R. Tirumaleswar, P. Selkirk, T. Lemon,\n\
    \   V. Gurbani, and P. Yee for their review and comments.\n   F. Dupont contributed\
    \ to previous versions of this document.  Thanks\n   go to him for his thorough\
    \ reviews and contributions.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [IGD1]     UPnP Forum, \"WANIPConnection:1 Service\
    \ Template\n              Version 1.01\", November 2001, <http://upnp.org/specs/\n\
    \              gw/UPnP-gw-WANIPConnection-v1-Service.pdf>.\n   [IGD2]     UPnP\
    \ Forum, \"WANIPConnection:2 Service\", September 2010,\n              <http://upnp.org/specs/gw/\n\
    \              UPnP-gw-WANIPConnection-v2-Service.pdf>.\n   [RFC2119]  Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n              Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC6887]  Wing, D., Cheshire, S., Boucadair,\
    \ M., Penno, R., and P.\n              Selkirk, \"Port Control Protocol (PCP)\"\
    , RFC 6887,\n              April 2013.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [PCP-DESCR-OPT]\n              Boucadair, M.,\
    \ Penno, R., and D. Wing, \"PCP Description\n              Option\", Work in Progress,\
    \ May 2013.\n   [PCP-DHCP-OPT]\n              Boucadair, M., Penno, R., and D.\
    \ Wing, \"DHCP Options for\n              the Port Control Protocol (PCP)\", Work\
    \ in Progress,\n              March 2013.\n   [PCP-FAILURE]\n              Boucadair,\
    \ M. and R. Penno, \"Analysis of Port Control\n              Protocol (PCP) Failure\
    \ Scenarios\", Work in Progress,\n              May 2013.\n   [PCP-PROXY]\n  \
    \            Boucadair, M., Penno, R., and D. Wing, \"Port Control\n         \
    \     Protocol (PCP) Proxy Function\", Work in Progress,\n              June 2013.\n\
    \   [RFC6146]  Bagnulo, M., Matthews, P., and I. van Beijnum, \"Stateful\n   \
    \           NAT64: Network Address and Protocol Translation from IPv6\n      \
    \        Clients to IPv4 Servers\", RFC 6146, April 2011.\n   [RFC6333]  Durand,\
    \ A., Droms, R., Woodyatt, J., and Y. Lee,\n              \"Dual-Stack Lite Broadband\
    \ Deployments Following IPv4\n              Exhaustion\", RFC 6333, August 2011.\n\
    \   [Sec_DCP]  UPnP Forum, \"Device Protection:1 Service\", February 2011,\n \
    \             <http://upnp.org/specs/gw/\n              UPnP-gw-DeviceProtection-v1-Service.pdf>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Mohamed Boucadair\n   France Telecom\n   Rennes  35000\n\
    \   France\n   EMail: mohamed.boucadair@orange.com\n   Reinaldo Penno\n   Cisco\
    \ Systems, Inc.\n   170 West Tasman Drive\n   San Jose, California  95134\n  \
    \ USA\n   EMail: repenno@cisco.com\n   Dan Wing\n   Cisco Systems, Inc.\n   170\
    \ West Tasman Drive\n   San Jose, California  95134\n   USA\n   EMail: dwing@cisco.com\n"
