- title: __initial_text__
  contents:
  - "            Simple Low-Density Parity Check (LDPC) Staircase\n           Forward\
    \ Error Correction (FEC) Scheme for FECFRAME\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a fully specified simple Forward Error\n\
    \   Correction (FEC) scheme for Low-Density Parity Check (LDPC) Staircase\n  \
    \ codes that can be used to protect media streams along the lines\n   defined\
    \ by FECFRAME.  These codes have many interesting properties:\n   they are systematic\
    \ codes, they perform close to ideal codes in many\n   use-cases, and they also\
    \ feature very high encoding and decoding\n   throughputs.  LDPC-Staircase codes\
    \ are therefore a good solution to\n   protect a single high bitrate source flow\
    \ or to protect globally\n   several mid-rate flows within a single FECFRAME instance.\
    \  They are\n   also a good solution whenever the processing load of a software\n\
    \   encoder or decoder must be kept to a minimum.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6816.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................4\n\
    \   2. Terminology .....................................................5\n  \
    \ 3. Definitions Notations and Abbreviations .........................5\n    \
    \  3.1. Definitions ................................................5\n      3.2.\
    \ Notations ..................................................7\n      3.3. Abbreviations\
    \ ..............................................8\n   4. Common Procedures Related\
    \ to the ADU Block and Source\n      Block Creation ..................................................8\n\
    \      4.1. Restrictions ...............................................9\n  \
    \    4.2. ADU Block Creation .........................................9\n    \
    \  4.3. Source Block Creation .....................................11\n   5. LDPC-Staircase\
    \ FEC Scheme for Arbitrary ADU Flows ..............13\n      5.1. Formats and\
    \ Codes .........................................13\n           5.1.1. FEC Framework\
    \ Configuration Information ............13\n           5.1.2. Explicit Source\
    \ FEC Payload ID .....................14\n           5.1.3. Repair FEC Payload\
    \ ID ..............................16\n      5.2. Procedures ................................................17\n\
    \      5.3. FEC Code Specification ....................................17\n  \
    \ 6. Security Considerations ........................................17\n    \
    \  6.1. Attacks against the Data Flow .............................17\n      \
    \     6.1.1. Access to Confidential Content .....................17\n        \
    \   6.1.2. Content Corruption .................................18\n      6.2.\
    \ Attacks against the FEC Parameters ........................18\n      6.3. When\
    \ Several Source Flows Are to Be Protected Together ....19\n      6.4. Baseline\
    \ Secure FEC Framework Operation ...................19\n   7. Operations and Management\
    \ Considerations .......................19\n      7.1. Operational Recommendations\
    \ ...............................19\n   8. IANA Considerations ............................................21\n\
    \   9. Acknowledgments ................................................21\n  \
    \ 10. References ....................................................21\n    \
    \  10.1. Normative References .....................................21\n      10.2.\
    \ Informative References ...................................22\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The use of Forward Error Correction (FEC) codes is a classic\
    \ solution\n   to improve the reliability of unicast, multicast, and broadcast\n\
    \   Content Delivery Protocols (CDPs) and applications [RFC3453].\n   \"Forward\
    \ Error Correction (FEC) Framework\" [RFC6363] describes a\n   generic framework\
    \ to use FEC schemes with media delivery applications\n   and, for instance, with\
    \ real-time streaming media applications based\n   on the RTP real-time protocol.\
    \  Similarly, \"Forward Error Correction\n   (FEC) Building Block\" [RFC5052]\
    \ describes a generic framework to use\n   FEC schemes with objects (e.g., files)\
    \ delivery applications based on\n   either the Asynchronous Layered Coding (ALC)\
    \ [RFC5775] or the NACK-\n   Oriented Reliable Multicast (NORM) [RFC5740] protocols.\n\
    \   More specifically, the [RFC5053] (Raptor) and [RFC5170] (LDPC-\n   Staircase\
    \ and LDPC-Triangle) FEC schemes introduce erasure codes\n   based on sparse parity\
    \ check matrices for object delivery protocols\n   like ALC and NORM.  Similarly,\
    \ \"Reed-Solomon Forward Error Correction\n   (FEC) Schemes\" [RFC5510] introduces\
    \ Reed-Solomon codes based on\n   Vandermonde matrices for the same object delivery\
    \ protocols.  All\n   these codes are systematic codes, meaning that the k source\
    \ symbols\n   are part of the n encoding symbols.  Additionally, the Reed-Solomon\n\
    \   FEC codes belong to the class of Maximum Distance Separable (MDS)\n   codes\
    \ that are optimal in terms of erasure recovery capabilities.  It\n   means that\
    \ a receiver can recover the k source symbols from any set\n   of exactly k encoding\
    \ symbols out of n.  This is not the case with\n   either Raptor or LDPC-Staircase\
    \ codes, and these codes require a\n   certain number of encoding symbols in excess\
    \ to k.  However, this\n   number is small in practice when an appropriate decoding\
    \ scheme is\n   used at the receiver [Cunche08].  Another key difference is the\
    \ high\n   encoding/decoding complexity of Reed-Solomon codecs compared to\n \
    \  Raptor or LDPC-Staircase codes.  A difference of one or more orders\n   of\
    \ magnitude in terms of encoding/decoding speed exists between the\n   Reed-Solomon\
    \ and LDPC-Staircase software codecs\n   [Cunche08][CunchePHD10].  Finally, Raptor\
    \ and LDPC-Staircase codes\n   are large block FEC codes, in the sense of [RFC3453],\
    \ since they can\n   efficiently deal with a large number of source symbols.\n\
    \   The present document focuses on LDPC-Staircase codes that belong to\n   the\
    \ well-known class of \"Low Density Parity Check\" codes.  Because of\n   their\
    \ key features, these codes are a good solution in many\n   situations, as detailed\
    \ in Section 7.\n   This document inherits from [RFC5170], Section 6 \"Full Specification\n\
    \   of the LDPC-Staircase Scheme\", the specifications of the core LDPC-\n   Staircase\
    \ codes, and from Section 5.7 \"Pseudo-Random Number\n   Generator\", the specifications\
    \ of the PRNG used by these codes.\n   Therefore, this document specifies only\
    \ the information specific to\n   the FECFRAME context and refers to [RFC5170]\
    \ for the core\n   specifications of the codes.  To that purpose, the present\
    \ document\n   introduces:\n   o  the Fully Specified FEC Scheme with FEC Encoding\
    \ ID 7 that\n      specifies a simple way of using LDPC-Staircase codes in order\
    \ to\n      protect arbitrary Application Data Unit (ADU) flows.\n   Therefore\
    \ Sections 4 and 5 (except Section 5.7, see above) of\n   [RFC5170], that define\
    \ [RFC5052] specific Formats and Procedures, are\n   not considered and are replaced\
    \ by FECFRAME specific Formats and\n   Procedures.\n   Finally, publicly available\
    \ reference implementations of these codes\n   are available [LDPC-codec] [LDPC-codec-OpenFEC].\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [RFC2119].\n"
- title: 3.  Definitions Notations and Abbreviations
  contents:
  - '3.  Definitions Notations and Abbreviations

    '
- title: 3.1.  Definitions
  contents:
  - "3.1.  Definitions\n   This document uses the following terms and definitions.\
    \  Those in the\n   list below are FEC scheme specific and are in line with [RFC5052]:\n\
    \   Source symbol:  unit of data used during the encoding process.  In\n     \
    \ this specification, there is always one source symbol per ADU.\n   Encoding\
    \ symbol:  unit of data generated by the encoding process.\n      With systematic\
    \ codes, source symbols are part of the encoding\n      symbols.\n   Repair symbol:\
    \  encoding symbol that is not a source symbol.\n   Code rate:  the k/n ratio,\
    \ i.e., the ratio between the number of\n      source symbols and the number of\
    \ encoding symbols.  By definition,\n      the code rate is such that: 0 < code\
    \ rate <= 1.  A code rate close\n      to 1 indicates that a small number of repair\
    \ symbols have been\n      produced during the encoding process.\n   Systematic\
    \ code:  FEC code in which the source symbols are part of\n      the encoding\
    \ symbols.  The LDPC-Staircase codes introduced in this\n      document are systematic.\n\
    \   Source block:  a block of k source symbols that are considered\n      together\
    \ for the encoding.\n   Packet erasure channel:  a communication path where packets\
    \ are\n      either dropped (e.g., by a congested router, or because the number\n\
    \      of transmission errors exceeds the correction capabilities of the\n   \
    \   physical layer codes) or received.  When a packet is received, it\n      is\
    \ assumed that this packet is not corrupted.\n   The following are FECFRAME specific\
    \ and are in line with [RFC6363]:\n   Application Data Unit (ADU):  the unit of\
    \ source data provided as\n      payload to the transport layer.  Depending on\
    \ the use-case, an ADU\n      may use an RTP encapsulation.\n   (Source) ADU Flow:\
    \  a sequence of ADUs associated with a transport-\n      layer flow identifier\
    \ (such as the standard 5-tuple {Source IP\n      address, source port, destination\
    \ IP address, destination port,\n      transport protocol}).  Depending on the\
    \ use-case, several ADU\n      flows may be protected together by FECFRAME.\n\
    \   ADU Block:  a set of ADUs that are considered together by the\n      FECFRAME\
    \ instance for the purpose of the FEC scheme.  Along with\n      the flow ID (F[]),\
    \ length (L[]), and padding (Pad[]) fields, they\n      form the set of source\
    \ symbols over which FEC encoding will be\n      performed.\n   ADU Information\
    \ (ADUI):  a unit of data constituted by the ADU and\n      the associated Flow\
    \ ID, Length, and Padding fields (Section 4.3).\n      This is the unit of data\
    \ that is used as source symbol.\n   FEC Framework Configuration Information (FFCI):\
    \  information that\n      controls the operation of the FEC Framework.  The FFCI\
    \ enables the\n      synchronization of the FECFRAME sender and receiver instances.\n\
    \   FEC Source Packet:  at a sender (respectively, at a receiver) a\n      payload\
    \ submitted to (respectively, received from) the transport\n      protocol containing\
    \ an ADU along with an optional Explicit Source\n      FEC Payload ID.\n   FEC\
    \ Repair Packet:  at a sender (respectively, at a receiver) a\n      payload submitted\
    \ to (respectively, received from) the transport\n      protocol containing one\
    \ repair symbol along with a Repair FEC\n      Payload ID and possibly an RTP\
    \ header.\n   The above terminology is illustrated in Figure 1 (sender's point\
    \ of\n   view):\n   +----------------------+\n   |     Application      |\n  \
    \ +----------------------+\n              |\n              | (1) Application Data\
    \ Units (ADUs)\n              |\n              v\n   +----------------------+\
    \                           +----------------+\n   |    FEC Framework     |  \
    \                         |                |\n   |                      |-------------------------->|\
    \   FEC Scheme   |\n   |(2) Construct source  |(3) Source Block           |  \
    \              |\n   |    blocks            |                           |(4) FEC\
    \ Encoding|\n   |(6) Construct FEC     |<--------------------------|         \
    \       |\n   |    source and repair |                           |           \
    \     |\n   |    packets           |(5) Explicit Source FEC    |             \
    \   |\n   +----------------------+    Payload IDs            +----------------+\n\
    \              |                Repair FEC Payload IDs\n              |      \
    \          Repair symbols\n              |\n              |(7) FEC source and\
    \ repair packets\n              v\n   +----------------------+\n   |   Transport\
    \ Layer    |\n   |     (e.g., UDP)      |\n   +----------------------+\n     \
    \      Figure 1: Terminology Used in This Document (Sender)\n"
- title: 3.2.  Notations
  contents:
  - "3.2.  Notations\n   This document uses the following notations.  Those in the\
    \ list below\n   are FEC scheme specific:\n   k      denotes the number of source\
    \ symbols in a source block.\n   max_k  denotes the maximum number of source symbols\
    \ for any source\n          block.\n   n      denotes the number of encoding symbols\
    \ generated for a source\n          block.\n   E      denotes the encoding symbol\
    \ length in bytes.\n   CR     denotes the \"code rate\", i.e., the k/n ratio.\n\
    \   N1     denotes the target number of \"1s\" per column in the left side\n \
    \         of the parity check matrix.\n   N1m3   denotes the value N1 - 3.\n \
    \  G      G denotes the number of encoding symbols per group, i.e., the\n    \
    \      number of symbols sent in the same packet.\n   a^^b   denotes a raised\
    \ to the power b.\n   The following are FECFRAME specific:\n   B      denotes\
    \ the number of ADUs per ADU block.\n   max_B  denotes the maximum number of ADUs\
    \ for any ADU block.\n"
- title: 3.3.  Abbreviations
  contents:
  - "3.3.  Abbreviations\n   This document uses the following abbreviations:\n   ADU\
    \    Application Data Unit\n   ESI    Encoding Symbol ID\n   FEC    Forward Error\
    \ (or Erasure) Correction\n   FFCI   FEC Framework Configuration Information\n\
    \   FSSI   FEC Scheme-Specific Information\n   LDPC   Low-Density Parity Check\n\
    \   MDS    Maximum Distance Separable\n   PRNG   Pseudo-Random Number Generator\n\
    \   SDP    Session Description Protocol\n"
- title: 4.  Common Procedures Related to the ADU Block and Source Block Creation
  contents:
  - "4.  Common Procedures Related to the ADU Block and Source Block Creation\n  \
    \ This section introduces the procedures that are used during the ADU\n   block\
    \ and related source block creation, for the FEC scheme\n   considered.\n"
- title: 4.1.  Restrictions
  contents:
  - "4.1.  Restrictions\n   This specification has the following restrictions:\n \
    \  o  there MUST be exactly one source symbol per ADUI, and therefore\n      per\
    \ ADU;\n   o  there MUST be exactly one repair symbol per FEC repair packet;\n\
    \   o  there MUST be exactly one source block per ADU block;\n   o  the use of\
    \ the LDPC-Staircase scheme is such that there MUST be\n      exactly one encoding\
    \ symbol per group; i.e., G MUST be equal to 1\n      [RFC5170];\n"
- title: 4.2.  ADU Block Creation
  contents:
  - "4.2.  ADU Block Creation\n   Two kinds of limitations exist that impact the ADU\
    \ block creation:\n   o  at the FEC scheme level: the FEC scheme and the FEC codec\
    \ have\n      limitations that define a maximum source block size;\n   o  at the\
    \ FECFRAME instance level: the target use-case can have real-\n      time constraints\
    \ that can/will define a maximum ADU block size;\n   Note that the use of the\
    \ terminology \"maximum source block size\" and\n   \"maximum ADU block size\"\
    \ depends on the point of view that is adopted\n   (FEC scheme versus FECFRAME\
    \ instance).  However, in this document,\n   both refer to the same value since\
    \ Section 4.1 requires there be\n   exactly one source symbol per ADU.  We now\
    \ detail each of these\n   aspects.\n   The maximum source block size in symbols,\
    \ max_k, depends on several\n   parameters: the code rate (CR) and the Encoding\
    \ Symbol ID (ESI) field\n   length in the Explicit Source/Repair FEC Payload ID\
    \ (16 bits), as\n   well as possible internal codec limitations.  More specifically,\n\
    \   max_k cannot be larger than the following values, derived from the\n   ESI\
    \ field size limitation, for a given code rate:\n      max1_k = 2^^(16 - ceil(Log2(1/CR)))\n\
    \   Some common max1_k values are:\n   o  CR == 1 (no repair symbol): max1_k =\
    \ 2^^16 = 65536 symbols\n   o  1/2 <= CR < 1: max1_k = 2^^15 = 32,768 symbols\n\
    \   o  1/4 <= CR < 1/2: max1_k = 2^^14 = 16,384 symbols\n   Additionally, a codec\
    \ can impose other limitations on the maximum\n   source block size, for instance,\
    \ because of a limited working memory\n   size.  This decision MUST be clarified\
    \ at implementation time, when\n   the target use-case is known.  This results\
    \ in a max2_k limitation.\n   Then, max_k is given by:\n      max_k = min(max1_k,\
    \ max2_k)\n   Note that this calculation is only required at the encoder (sender),\n\
    \   since the actual k parameter (k <= max_k) is communicated to the\n   decoder\
    \ (receiver) through the Explicit Source/Repair FEC Payload ID.\n   The source\
    \ ADU flows can have real-time constraints.  When there are\n   multiple flows,\
    \ with different real-time constraints, let us consider\n   the most stringent\
    \ constraints (see [RFC6363], Section 10.2, item 6,\n   for recommendations when\
    \ several flows are globally protected).  In\n   that case the maximum number\
    \ of ADUs of an ADU block must not exceed\n   a certain threshold since it directly\
    \ impacts the decoding delay.\n   The larger the ADU block size, the longer a\
    \ decoder may have to wait\n   until it has received a sufficient number of encoding\
    \ symbols for\n   decoding to succeed, and therefore the larger the decoding delay.\n\
    \   When the target use-case is known, these real-time constraints result\n  \
    \ in an upper bound to the ADU block size, max_rt.\n   For instance, if the use-case\
    \ specifies a maximum decoding latency,\n   l, and if each source ADU covers a\
    \ duration d of a continuous media\n   (we assume here the simple case of a constant\
    \ bit rate ADU flow),\n   then the ADU block size must not exceed:\n      max_rt\
    \ = floor(l / d)\n   After encoding, this block will produce a set of at most\
    \ n = max_rt /\n   CR encoding symbols.  These n encoding symbols will have to\
    \ be sent\n   at a rate of n / l packets per second.  For instance, with d = 10\
    \ ms,\n   l = 1 s, max_rt = 100 ADUs.\n   If we take into account all these constraints,\
    \ we find:\n      max_B = min(max_k, max_rt)\n   This max_B parameter is an upper\
    \ bound to the number of ADUs that can\n   constitute an ADU block.\n"
- title: 4.3.  Source Block Creation
  contents:
  - "4.3.  Source Block Creation\n   In its most general form, FECFRAME and the LDPC-Staircase\
    \ FEC Scheme\n   are meant to protect a set of independent flows.  Since the flows\n\
    \   have no relationship to one another, the ADU size of each flow can\n   potentially\
    \ vary significantly.  Even in the special case of a single\n   flow, the ADU\
    \ sizes can largely vary (e.g., the various frames of a\n   Group of Pictures\
    \ (GOP) of an H.264 flow).  This diversity must be\n   addressed since the LDPC-Staircase\
    \ FEC Scheme requires a constant\n   encoding symbol size (E parameter) per source\
    \ block.  Since this\n   specification requires that there be only one source\
    \ symbol per ADU,\n   E must be large enough to contain all the ADUs of an ADU\
    \ block along\n   with their prepended 3 bytes (see below).\n   In situations\
    \ where E is determined per source block (default,\n   specified by the FFCI/FSSI\
    \ with S = 0, Section 5.1.1.2), E is equal\n   to the size of the largest ADU\
    \ of this source block plus three (for\n   the prepended 3 bytes, see below).\
    \  In this case, upon receiving the\n   first FEC repair packet for this source\
    \ block, since this packet MUST\n   contain a single repair symbol (Section 5.1.3),\
    \ a receiver determines\n   the E parameter used for this source block.\n   In\
    \ situations where E is fixed (specified by the FFCI/FSSI with S =\n   1, Section\
    \ 5.1.1.2), then E must be greater or equal to the size of\n   the largest ADU\
    \ of this source block plus three (for the prepended 3\n   bytes, see below).\
    \  If this is not the case, an error is returned.\n   How to handle this error\
    \ is use-case specific (e.g., a larger E\n   parameter may be communicated to\
    \ the receivers in an updated FFCI\n   message, using an appropriate mechanism)\
    \ and is not considered by\n   this specification.\n   The ADU block is always\
    \ encoded as a single source block.  There are\n   a total of B <= max_B ADUs\
    \ in this ADU block.  For the ADU i, with 0\n   <= i <= B-1, 3 bytes are prepended\
    \ (Figure 2):\n   o  The first byte, F[i] (Flow ID), contains the integer identifier\n\
    \      associated to the source ADU flow to which this ADU belongs.  It\n    \
    \  is assumed that a single byte is sufficient, or said differently,\n      that\
    \ no more than 256 flows will be protected by a single instance\n      of FECFRAME.\n\
    \   o  The following two bytes, L[i] (Length), contain the length of this\n  \
    \    ADU, in network byte order (i.e., big endian).  This length is for\n    \
    \  the ADU itself and does not include the F[i], L[i], or Pad[i]\n      fields.\n\
    \   Then, zero padding is added to ADU i (if needed) in field Pad[i], for\n  \
    \ alignment purposes up to a size of exactly E bytes.  The data unit\n   resulting\
    \ from the ADU i and the F[i], L[i], and Pad[i] fields is\n   called ADU Information\
    \ (or ADUI).  Each ADUI contributes to exactly\n   one source symbol of the source\
    \ block.\n                        Encoding Symbol Length (E)\n   < --------------------------------------------------------------\
    \ >\n   +----+----+-----------------------+------------------------------+\n \
    \  |F[0]|L[0]|        ADU[0]         |            Pad[0]            |\n   +----+----+----------+------------+------------------------------+\n\
    \   |F[1]|L[1]| ADU[1]   |                         Pad[1]            |\n   +----+----+----------+-------------------------------------------+\n\
    \   |F[2]|L[2]|                    ADU[2]                            |\n   +----+----+------+-----------------------------------------------+\n\
    \   |F[3]|L[3]|ADU[3]|                             Pad[3]            |\n   +----+----+------+-----------------------------------------------+\n\
    \   \\_______________________________  _______________________________/\n    \
    \                               \\/\n                          simple FEC encoding\n\
    \   +----------------------------------------------------------------+\n   | \
    \                           Repair 4                            |\n   +----------------------------------------------------------------+\n\
    \   .                                                                .\n   . \
    \                                                               .\n   +----------------------------------------------------------------+\n\
    \   |                            Repair 7                            |\n   +----------------------------------------------------------------+\n\
    \    Figure 2: Source Block Creation, for Code Rate 1/2 (Equal Number of\n   \
    \      Source and Repair Symbols, 4 in This Example), and S = 0\n   Note that\
    \ neither the initial 3 bytes nor the optional padding are\n   sent over the network.\
    \  However, they are considered during FEC\n   encoding.  It means that a receiver\
    \ who lost a certain FEC source\n   packet (e.g., the UDP datagram containing\
    \ this FEC source packet)\n   will be able to recover the ADUI if FEC decoding\
    \ succeeds.  Thanks to\n   the initial 3 bytes, this receiver will get rid of\
    \ the padding (if\n   any) and identify the corresponding ADU flow.\n"
- title: 5.  LDPC-Staircase FEC Scheme for Arbitrary ADU Flows
  contents:
  - '5.  LDPC-Staircase FEC Scheme for Arbitrary ADU Flows

    '
- title: 5.1.  Formats and Codes
  contents:
  - '5.1.  Formats and Codes

    '
- title: 5.1.1.  FEC Framework Configuration Information
  contents:
  - "5.1.1.  FEC Framework Configuration Information\n   The FEC Framework Configuration\
    \ Information (or FFCI) includes\n   information that MUST be communicated between\
    \ the sender and\n   receiver(s).  More specifically, it enables the synchronization\
    \ of\n   the FECFRAME sender and receiver instances.  It includes both\n   mandatory\
    \ elements and scheme-specific elements, as detailed below.\n"
- title: 5.1.1.1.  Mandatory Information
  contents:
  - "5.1.1.1.  Mandatory Information\n   o  FEC Encoding ID: the value assigned to\
    \ this fully specified FEC\n      scheme MUST be 7, as assigned by IANA (Section\
    \ 8).\n   When SDP is used to communicate the FFCI, this FEC Encoding ID is\n\
    \   carried in the 'encoding-id' parameter.\n"
- title: 5.1.1.2.  FEC Scheme-Specific Information
  contents:
  - "5.1.1.2.  FEC Scheme-Specific Information\n   The FEC Scheme-Specific Information\
    \ (FSSI) includes elements that are\n   specific to the present FEC scheme.  More\
    \ precisely:\n   o  PRNG seed (seed): a non-negative 32-bit integer used as the\
    \ seed\n      of the Pseudo-Random Number Generator, as defined in [RFC5170].\n\
    \   o  Encoding symbol length (E): a non-negative integer that indicates\n   \
    \   either the length of each encoding symbol in bytes (strict mode,\n      i.e.,\
    \ if S = 1) or the maximum length of any encoding symbol\n      (i.e., if S =\
    \ 0).\n   o  Strict (S) flag: when set to 1, this flag indicates that the E\n\
    \      parameter is the actual encoding symbol length value for each\n      block\
    \ of the session (unless otherwise notified by an updated FFCI\n      if this\
    \ possibility is considered by the use-case or CDP).  When\n      set to 0, this\
    \ flag indicates that the E parameter is the maximum\n      encoding symbol length\
    \ value for each block of the session (unless\n      otherwise notified by an\
    \ updated FFCI if this possibility is\n      considered by the use-case or CDP).\n\
    \   o  N1 minus 3 (n1m3): an integer between 0 (default) and 7,\n      inclusive.\
    \  The number of \"1s\" per column in the left side of the\n      parity check\
    \ matrix, N1, is then equal to N1m3 + 3, as specified\n      in [RFC5170].\n \
    \  These elements are required both by the sender (LDPC-Staircase\n   encoder)\
    \ and the receiver(s) (LDPC-Staircase decoder).\n   When SDP is used to communicate\
    \ the FFCI, this FEC scheme-specific\n   information is carried in the 'fssi'\
    \ parameter in textual\n   representation as specified in [RFC6364].  For instance:\n\
    \   fssi=seed:1234,E:1400,S:0,n1m3:0\n   If another mechanism requires the FSSI\
    \ to be carried as an opaque\n   octet string (for instance, after a Base64 encoding),\
    \ the encoding\n   format consists of the following 7 octets:\n   o  PRNG seed\
    \ (seed): 32-bit field.\n   o  Encoding symbol length (E): 16-bit field.\n   o\
    \  Strict (S) flag: 1-bit field.\n   o  Reserved: a 4-bit field that MUST be set\
    \ to zero.\n   o  N1m3 parameter (n1m3): 3-bit field.\n    0                 \
    \  1                   2\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  \
    \                    PRNG seed (seed)                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Encoding Symbol Length (E)  |S| resvd | n1m3|\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                      Figure 3: FSSI Encoding Format\n"
- title: 5.1.2.  Explicit Source FEC Payload ID
  contents:
  - "5.1.2.  Explicit Source FEC Payload ID\n   A FEC source packet MUST contain an\
    \ Explicit Source FEC Payload ID\n   that is appended to the end of the packet\
    \ as illustrated in Figure 4.\n                  +--------------------------------+\n\
    \                  |           IP Header            |\n                  +--------------------------------+\n\
    \                  |        Transport Header        |\n                  +--------------------------------+\n\
    \                  |              ADU               |\n                  +--------------------------------+\n\
    \                  | Explicit Source FEC Payload ID |\n                  +--------------------------------+\n\
    \            Figure 4: Structure of a FEC Source Packet with the\n           \
    \           Explicit Source FEC Payload ID\n   More precisely, the Explicit Source\
    \ FEC Payload ID is composed of the\n   following fields (Figure 5):\n   o  Source\
    \ Block Number (SBN) (16-bit field): this field identifies\n      the source block\
    \ to which this FEC source packet belongs.\n   o  Encoding Symbol ID (ESI) (16-bit\
    \ field): this field identifies the\n      source symbol contained in this FEC\
    \ source packet.  This value is\n      such that 0 <= ESI <= k - 1 for source\
    \ symbols.\n   o  Source Block Length (k) (16-bit field): this field provides\
    \ the\n      number of source symbols for this source block, i.e., the k\n   \
    \   parameter.\n    0                   1                   2                \
    \   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n \
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |   Source\
    \ Block Number (SBN)   |   Encoding Symbol ID (ESI)    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Source Block Length (k)    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \              Figure 5: Source FEC Payload ID Encoding Format\n"
- title: 5.1.3.  Repair FEC Payload ID
  contents:
  - "5.1.3.  Repair FEC Payload ID\n   A FEC repair packet MUST contain a Repair FEC\
    \ Payload ID that is\n   prepended to the repair symbol(s) as illustrated in Figure\
    \ 6.  There\n   MUST be a single repair symbol per FEC repair packet.\n      \
    \            +--------------------------------+\n                  |         \
    \  IP Header            |\n                  +--------------------------------+\n\
    \                  |        Transport Header        |\n                  +--------------------------------+\n\
    \                  |     Repair FEC Payload ID      |\n                  +--------------------------------+\n\
    \                  |         Repair Symbol          |\n                  +--------------------------------+\n\
    \              Figure 6: Structure of a FEC Repair Packet with\n             \
    \              the Repair Payload ID\n   More precisely, the Repair FEC Payload\
    \ ID is composed of the\n   following fields (Figure 7):\n   o  Source Block Number\
    \ (SBN) (16-bit field): this field identifies\n      the source block to which\
    \ the FEC repair packet belongs.\n   o  Encoding Symbol ID (ESI) (16-bit field):\
    \ this field identifies the\n      repair symbol contained in this FEC repair\
    \ packet.  This value is\n      such that k <= ESI <= n - 1 for repair symbols.\n\
    \   o  Source Block Length (k) (16-bit field): this field provides the\n     \
    \ number of source symbols for this source block, i.e., the k\n      parameter.\n\
    \   o  Number of Encoding Symbols (n) (16-bit field): this field provides\n  \
    \    the number of encoding symbols for this source block, i.e., the n\n     \
    \ parameter.\n    0                   1                   2                  \
    \ 3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |   Source Block Number (SBN)   |   Encoding Symbol ID (ESI)    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |    Source Block Length (k)    |  Number Encoding Symbols (n)  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \              Figure 7: Repair FEC Payload ID Encoding Format\n"
- title: 5.2.  Procedures
  contents:
  - "5.2.  Procedures\n   The following procedures apply:\n   o  The source block\
    \ creation MUST follow the procedures specified in\n      Section 4.3.\n   o \
    \ The SBN value MUST start with value 0 for the first block of the\n      ADU\
    \ flow and MUST be incremented by 1 for each new source block.\n      Wrapping\
    \ to zero will happen for long sessions, after value 2^^16\n      - 1.\n   o \
    \ The ESI of encoding symbols MUST start with value 0 for the first\n      symbol\
    \ and MUST be managed sequentially.  The first k values (0 <=\n      ESI <= k\
    \ - 1) identify source symbols whereas the last n-k values\n      (k <= ESI <=\
    \ n - 1) identify repair symbols.\n   o  The FEC repair packet creation MUST follow\
    \ the procedures\n      specified in Section 5.1.3.\n"
- title: 5.3.  FEC Code Specification
  contents:
  - "5.3.  FEC Code Specification\n   The present document inherits from [RFC5170]\
    \ the specification of the\n   core LDPC-Staircase codes for a packet erasure\
    \ transmission channel\n   (see Section 1).\n   Because of the requirement to\
    \ have exactly one encoding symbol per\n   group, i.e., because G MUST be equal\
    \ to 1 (Section 4.1), several\n   parts of [RFC5170] are not of use.  In particular,\
    \ this is the case\n   of Section 5.6, \"Identifying the G Symbols of an Encoding\
    \ Symbol\n   Group\".\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   The FEC Framework document [RFC6363] provides\
    \ a comprehensive\n   analysis of security considerations applicable to FEC schemes.\n\
    \   Therefore, the present section follows the security considerations\n   section\
    \ of [RFC6363] and only discusses topics that are specific to\n   the use of LDPC-Staircase\
    \ codes.\n"
- title: 6.1.  Attacks against the Data Flow
  contents:
  - '6.1.  Attacks against the Data Flow

    '
- title: 6.1.1.  Access to Confidential Content
  contents:
  - "6.1.1.  Access to Confidential Content\n   The LDPC-Staircase FEC Scheme specified\
    \ in this document does not\n   change the recommendations of [RFC6363].  To summarize,\
    \ if\n   confidentiality is a concern, it is RECOMMENDED that one of the\n   solutions\
    \ mentioned in [RFC6363] be used, with special considerations\n   to the way this\
    \ solution is applied (e.g., Is encryption applied\n   before or after FEC protection?\
    \  Is it within the end-system or in a\n   middlebox?), to the operational constraints\
    \ (e.g., performing FEC\n   decoding in a protected environment may be complicated\
    \ or even\n   impossible) and to the threat model.\n"
- title: 6.1.2.  Content Corruption
  contents:
  - "6.1.2.  Content Corruption\n   The LDPC-Staircase FEC Scheme specified in this\
    \ document does not\n   change the recommendations of [RFC6363].  To summarize,\
    \ it is\n   RECOMMENDED that one of the solutions mentioned in [RFC6363] be used\n\
    \   on both the FEC source and repair packets.\n"
- title: 6.2.  Attacks against the FEC Parameters
  contents:
  - "6.2.  Attacks against the FEC Parameters\n   The FEC scheme specified in this\
    \ document defines parameters that can\n   be the basis of several attacks.  More\
    \ specifically, the following\n   parameters of the FFCI may be modified by an\
    \ attacker\n   (Section 5.1.1.2):\n   o  FEC Encoding ID: changing this parameter\
    \ leads the receiver to\n      consider a different FEC scheme, which enables\
    \ an attacker to\n      create a Denial of Service (DoS).\n   o  Encoding symbol\
    \ length (E): setting this E parameter to a value\n      smaller than the valid\
    \ one enables an attacker to create a DoS\n      since the repair symbols and\
    \ certain source symbols will be larger\n      than E, which is an incoherency\
    \ for the receiver.  Setting this E\n      parameter to a value larger than the\
    \ valid one has similar impacts\n      when S=1 since the received repair symbol\
    \ size will be smaller\n      than expected.  Contrarily, it will not lead to\
    \ any incoherency\n      when S=0 since the actual symbol length value for the\
    \ block is\n      determined by the size of any received repair symbol, as long\
    \ as\n      this value is smaller than E.  However, setting this E parameter\n\
    \      to a larger value may have impacts on receivers that pre-allocate\n   \
    \   memory space in advance to store incoming symbols.\n   o  Strict (S) flag:\
    \ flipping this S flag from 0 to 1 (i.e., E is now\n      considered as a strict\
    \ value) enables an attacker to mislead the\n      receiver if the actual symbol\
    \ size varies over different source\n      blocks.  Flipping this S flag from\
    \ 1 to 0 has no major\n      consequences unless the receiver requires to have\
    \ a fixed E value\n      (e.g., because the receiver pre-allocates memory space).\n\
    \   o  N1 minus 3 (n1m3): changing this parameter leads the receiver to\n    \
    \  consider a different code, which enables an attacker to create a\n      DoS.\n\
    \   Therefore, it is RECOMMENDED that security measures be taken to\n   guarantee\
    \ the FFCI integrity, as specified in [RFC6363].  How to\n   achieve this depends\
    \ on the way the FFCI is communicated from the\n   sender to the receiver, which\
    \ is not specified in this document.\n   Similarly, attacks are possible against\
    \ the Explicit Source FEC\n   Payload ID and Repair FEC Payload ID: by modifying\
    \ the Source Block\n   Number (SBN), or the Encoding Symbol ID (ESI), or the Source\
    \ Block\n   Length (k), or the Number Encoding Symbols (n), an attacker can\n\
    \   easily corrupt the block identified by the SBN.  Other consequences,\n   that\
    \ are use-case and/or CDP dependent, may also happen.  It is\n   therefore RECOMMENDED\
    \ that security measures be taken to guarantee\n   the FEC source and repair packets\
    \ as stated in [RFC6363].\n"
- title: 6.3.  When Several Source Flows Are to Be Protected Together
  contents:
  - "6.3.  When Several Source Flows Are to Be Protected Together\n   The LDPC-Staircase\
    \ FEC Scheme specified in this document does not\n   change the recommendations\
    \ of [RFC6363].\n"
- title: 6.4.  Baseline Secure FEC Framework Operation
  contents:
  - "6.4.  Baseline Secure FEC Framework Operation\n   The LDPC-Staircase FEC Scheme\
    \ specified in this document does not\n   change the recommendations of [RFC6363]\
    \ concerning the use of the\n   IPsec/ESP security protocol as a mandatory to\
    \ implement (but not\n   mandatory to use) security scheme.  This is well suited\
    \ to situations\n   where the only insecure domain is the one over which the FEC\n\
    \   Framework operates.\n"
- title: 7.  Operations and Management Considerations
  contents:
  - "7.  Operations and Management Considerations\n   The FEC Framework document [RFC6363]\
    \ provides a comprehensive\n   analysis of operations and management considerations\
    \ applicable to\n   FEC schemes.  Therefore, the present section only discusses\
    \ topics\n   that are specific to the use of LDPC-Staircase codes as specified\
    \ in\n   this document.\n"
- title: 7.1.  Operational Recommendations
  contents:
  - "7.1.  Operational Recommendations\n   LDPC-Staircase codes have excellent erasure\
    \ recovery capabilities\n   with large source blocks, close to ideal MDS codes.\
    \  For instance,\n   independently of FECFRAME, let us consider a source block\
    \ of size\n   k=1024 symbols, CR=2/3 (i.e., 512 repair symbols are added), N1=7,\n\
    \   G=1, a transmission scheme where all the symbols are sent in a random\n  \
    \ order, and a hybrid ITerative/Maximum Likelihood (IT/ML) decoder (see\n   below).\
    \  An ideal MDS code with code rate 2/3 can recover from\n   erasures up to a\
    \ 33.33% channel loss rate.  With LDPC-Staircase\n   codes, the average overhead\
    \ amounts to 0.237% (i.e., receiving 2.43\n   symbols in addition to k, which\
    \ corresponds to a 33.18% channel loss\n   rate, enables a successful decoding\
    \ with a probability 0.5), and an\n   overhead of 1.46% (i.e., receiving 15 symbols\
    \ in addition to k, which\n   corresponds to a 32.36% channel loss rate) is sufficient\
    \ to reduce\n   the probability that decoding fails down to 8.2*10^^-5.  This\
    \ is why\n   these codes are a good solution to protect a single high bitrate\n\
    \   source flow as in [Matsuzono10] or to protect globally several mid-\n   rate\
    \ source flows within a single FECFRAME instance: in both cases,\n   the source\
    \ block size can be assumed to be equal to a few hundred (or\n   more) source\
    \ symbols.\n   LDPC-Staircase codes are also a good solution whenever the processing\n\
    \   load at a software encoder or decoder must be kept to a minimum.\n   This\
    \ is true when the decoder uses an IT decoding algorithm, an ML\n   algorithm\
    \ (we use a Gaussian Elimination as the ML algorithm) when\n   carefully implemented,\
    \ or a mixture of both techniques, which is the\n   recommended solution [Cunche08][CunchePHD10][LDPC-codec-OpenFEC].\n\
    \   Let us consider the same conditions as above (k=1024 source symbols,\n   CR=2/3,\
    \ N1=7, G=1), with encoding symbols of size 1024 bytes.  With\n   an Intel Xeon\
    \ 5120/1.86 GHz workstation running Linux/64 bits, the\n   average decoding speed\
    \ is between 1.78 Gbps (overhead of 2 symbols in\n   addition to k, corresponding\
    \ to a very bad channel with a 33.20% loss\n   rate, close to the theoretical\
    \ decoding limit, where ML decoding is\n   required) and 3.91 Gbps (corresponding\
    \ to a good channel with a 5%\n   loss rate only, where IT decoding is sufficient).\
    \  Under the same\n   conditions, on a Samsung Galaxy SII smartphone (GT-I9100P\
    \ model,\n   featuring an ARM Cortex-A9/1.2 GHz processor and running Android\n\
    \   2.3.4), the decoding speed is between 397 Mbps (bad channel with a\n   33.20%\
    \ loss rate, close to the theoretical decoding limit) and 813\n   Mbps (good channel\
    \ with a 5% loss rate only).\n   As the source block size decreases, the erasure\
    \ recovery capabilities\n   of LDPC codes in general also decrease.  In the case\
    \ of LDPC-\n   Staircase codes, in order to limit this phenomenon, it is recommended\n\
    \   to use a value of the N1 parameter at least equal to 7 (e.g.,\n   experiments\
    \ carried out in [Matsuzono10] use N1=7 if k=170 symbols,\n   and N1=5 otherwise).\
    \  For instance, independently of FECFRAME, with a\n   source block of size k=256\
    \ symbols, CR=2/3 (i.e., 128 repair symbols\n   are added), N1=7, and G=1, the\
    \ average overhead amounts to 0.706%\n   (i.e., receiving 1.8 symbols in addition\
    \ to k enables a successful\n   decoding with a probability 0.5), and an overhead\
    \ of 5.86% (i.e.,\n   receiving 15 symbols in addition to k) is sufficient to\
    \ reduce the\n   decoding failure probability to 5.9*10^^-5.\n   The processing\
    \ load also decreases with the source block size.  For\n   instance, under these\
    \ conditions (k=256 source symbols, CR=2/3, N1=7,\n   and G=1), with encoding\
    \ symbols of size 1024 bytes, on a Samsung\n   Galaxy SII smartphone, the decoding\
    \ speed is between 518 Mbps (bad\n   channel) and 863 Mbps (good channel with\
    \ a 5% loss rate only).\n   With very small source blocks (e.g., a few tens of\
    \ symbols), using\n   for instance Reed-Solomon codes [SIMPLE_RS] or 2D parity\
    \ check codes\n   may be more appropriate.\n   The way the FEC repair packets\
    \ are transmitted is of high importance.\n   A good strategy, that works well\
    \ for any kind of channel loss model,\n   consists in sending FEC repair packets\
    \ in random order (rather than\n   in sequence) while FEC source packets are sent\
    \ first and in sequence.\n   Sending all packets in a random order is another\
    \ possibility, but it\n   requires that all repair symbols for a source block\
    \ be produced\n   first, which adds some extra delay at a sender.\n"
- title: 8.  IANA Considerations
  contents:
  - "8.  IANA Considerations\n   This document registers one value in the \"FEC Framework\
    \ (FECFRAME)\n   FEC Encoding IDs\" registry [RFC6363] as follows:\n   o  7 refers\
    \ to the Simple LDPC-Staircase FEC Scheme for Arbitrary\n      Packet Flows, as\
    \ defined in Section 5 of this document.\n"
- title: 9.  Acknowledgments
  contents:
  - "9.  Acknowledgments\n   The authors want to thank K. Matsuzono, J. Detchart,\
    \ and H. Asaeda\n   for their contributions in evaluating the use of LDPC-Staircase\
    \ codes\n   in the context of FECFRAME [Matsuzono10].\n"
- title: 10.  References
  contents:
  - '10.  References

    '
- title: 10.1.  Normative References
  contents:
  - "10.1.  Normative References\n   [RFC2119]    Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC5170]    Roca, V., Neumann, C., and D. Furodet, \"Low Density\n\
    \                Parity Check (LDPC) Staircase and Triangle Forward Error\n  \
    \              Correction (FEC) Schemes\", RFC 5170, June 2008.\n   [RFC6363]\
    \    Watson, M., Begen, A., and V. Roca, \"Forward Error\n                Correction\
    \ (FEC) Framework\", RFC 6363, October 2011.\n   [RFC6364]    Begen, A., \"Session\
    \ Description Protocol Elements for\n                the Forward Error Correction\
    \ (FEC) Framework\", RFC 6364,\n                October 2011.\n"
- title: 10.2.  Informative References
  contents:
  - "10.2.  Informative References\n   [Cunche08]   Cunche, M. and V. Roca, \"Optimizing\
    \ the Error Recovery\n                Capabilities of LDPC-Staircase Codes Featuring\
    \ a\n                Gaussian Elimination Decoding Scheme\",  10th IEEE\n    \
    \            International Workshop on Signal Processing for Space\n         \
    \       Communications (SPSC'08), October 2008.\n   [CunchePHD10]\n          \
    \      Cunche, M., \"High performances AL-FEC codes for the\n                erasure\
    \ channel : variation around LDPC codes\", PhD\n                dissertation (in\
    \ French) (http://\n                tel.archives-ouvertes.fr/tel-00451336/en/),\
    \ June 2010.\n   [LDPC-codec]\n                Cunche, M., Roca, V., Neumann,\
    \ C., and J.  Laboure,\n                \"LDPC-Staircase/LDPC-Triangle Codec Reference\n\
    \                Implementation\", INRIA Rhone-Alpes and\n                STMicroelectronics,\n\
    \                <http://planete-bcast.inrialpes.fr/>.\n   [LDPC-codec-OpenFEC]\n\
    \                \"The OpenFEC project\", <http://openfec.org/>.\n   [Matsuzono10]\n\
    \                Matsuzono, K., Detchart, J., Cunche, M., Roca, V., and\n    \
    \            H. Asaeda, \"Performance Analysis of a High-Performance\n       \
    \         Real-Time Application with Several AL-FEC Schemes\", 35th\n        \
    \        Annual IEEE Conference on Local Computer Networks (LCN\n            \
    \    2010), October 2010.\n   [RFC3453]    Luby, M., Vicisano, L., Gemmell, J.,\
    \ Rizzo, L., Handley,\n                M., and J. Crowcroft, \"The Use of Forward\
    \ Error\n                Correction (FEC) in Reliable Multicast\", RFC 3453,\n\
    \                December 2002.\n   [RFC5052]    Watson, M., Luby, M., and L.\
    \ Vicisano, \"Forward Error\n                Correction (FEC) Building Block\"\
    , RFC 5052, August 2007.\n   [RFC5053]    Luby, M., Shokrollahi, A., Watson, M.,\
    \ and T.\n                Stockhammer, \"Raptor Forward Error Correction Scheme\
    \ for\n                Object Delivery\", RFC 5053, October 2007.\n   [RFC5510]\
    \    Lacan, J., Roca, V., Peltotalo, J., and S.  Peltotalo,\n                \"\
    Reed-Solomon Forward Error Correction (FEC) Schemes\",\n                RFC 5510,\
    \ April 2009.\n   [RFC5740]    Adamson, B., Bormann, C., Handley, M., and J. \
    \ Macker,\n                \"NACK-Oriented Reliable Multicast (NORM) Transport\n\
    \                Protocol\", RFC 5740, November 2009.\n   [RFC5775]    Luby, M.,\
    \ Watson, M., and L. Vicisano, \"Asynchronous\n                Layered Coding\
    \ (ALC) Protocol Instantiation\", RFC 5775,\n                April 2010.\n   [SIMPLE_RS]\
    \  Roca, V., Cunche, M., Lacan, J., Bouabdallah, A., and K.\n                Matsuzono,\
    \ \"Simple Reed-Solomon Forward Error Correction\n                (FEC) Scheme\
    \ for FECFRAME\", Work in Progress, October\n                2012.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Vincent Roca\n   INRIA\n   655, av. de l'Europe\n   Inovallee;\
    \ Montbonnot\n   ST ISMIER cedex  38334\n   France\n   EMail: vincent.roca@inria.fr\n\
    \   URI:   http://planete.inrialpes.fr/people/roca/\n   Mathieu Cunche\n   INSA-Lyon/INRIA\n\
    \   Laboratoire CITI\n   6 av. des Arts\n   Villeurbanne cedex  69621\n   France\n\
    \   EMail: mathieu.cunche@inria.fr\n   URI:   http://mathieu.cunche.free.fr/\n\
    \   Jerome Lacan\n   ISAE, Univ. of Toulouse\n   10 av. Edouard Belin; BP 54032\n\
    \   Toulouse cedex 4  31055\n   France\n   EMail: jerome.lacan@isae.fr\n   URI:\
    \   http://personnel.isae.fr/jerome-lacan/\n"
