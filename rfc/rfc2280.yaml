- title: __initial_text__
  contents:
  - '              Routing Policy Specification Language (RPSL)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1998).  All Rights Reserved.\n\
    \   Table of Contents\n   1 Introduction                                     \
    \                2\n   2 RPSL Names, Reserved Words, and Representation      \
    \             3\n   3 Contact Information                                    \
    \          6\n     3.1 mntner Class  . . . . . . . . . . . . . . . . . . . . .\
    \ . .  6\n     3.2 person Class  . . . . . . . . . . . . . . . . . . . . . . .\
    \  8\n     3.3 role Class  . . . . . . . . . . . . . . . . . . . . . . . .  9\n\
    \   4 route Class                                                     10\n   5\
    \ Set Classes                                                     12\n     5.1\
    \ route-set Class . . . . . . . . . . . . . . . . . . . . . . 12\n     5.2 as-set\
    \ Class  . . . . . . . . . . . . . . . . . . . . . . . 14\n     5.3 Predefined\
    \ Set Objects  . . . . . . . . . . . . . . . . . . 15\n     5.4 Hierarchical Set\
    \ Names  . . . . . . . . . . . . . . . . . . 15\n   6 aut-num Class          \
    \                                         16\n     6.1 import Attribute:  Import\
    \ Policy Specification  . . . . . . 16\n       6.1.1 Peering Specification . .\
    \ . . . . . . . . . . . . . . . 17\n       6.1.2 Action Specification  . . . .\
    \ . . . . . . . . . . . . . 19\n       6.1.3 Filter Specification  . . . . . .\
    \ . . . . . . . . . . . 20\n       6.1.4 Example Policy Expressions  . . . . .\
    \ . . . . . . . . . 24\n     6.2 export Attribute:  Export Policy Specification\
    \  . . . . . . 24\n      6.3 Other Routing  Protocols, Multi-Protocol Routing\n\
    \       Protocols, and Injecting Routes Between Protocols   . . . . . 25\n   \
    \  6.4 Ambiguity Resolution  . . . . . . . . . . . . . . . . . . . 26\n     6.5\
    \ default Attribute:  Default Policy Specification  . . . . . 28\n     6.6 Structured\
    \ Policy Specification . . . . . . . . . . . . . . 29\n   7 dictionary Class \
    \                                               33\n     7.1 Initial RPSL Dictionary\
    \ and Example Policy Actions\n      and Filters  . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . 36\n   8 Advanced route Class                          \
    \                  41\n     8.1 Specifying Aggregate Routes . . . . . . . . .\
    \ . . . . . . . 41\n       8.1.1 Interaction with policies in aut-num class  .\
    \ . . . . . 45\n       8.1.2 Ambiguity resolution with overlapping aggregates\
    \  . . . 46\n     8.2 Specifying Static Routes  . . . . . . . . . . . . . . .\
    \ . . 47\n   9 inet-rtr Class                                                \
    \  48\n   10 Security Considerations                                        49\n\
    \   11 Acknowledgements                                               50\n   A\
    \ Routing Registry Sites                                          51\n   B Authors'\
    \ Addresses                                              52\n   C Full Copyright\
    \ Statement                                        53\n"
- title: 1 Introduction
  contents:
  - "1 Introduction\n   This memo is the reference document for the Routing Policy\n\
    \   Specification Language (RPSL). RPSL allows a network operator to be\n   able\
    \ to specify routing policies at various levels in the Internet\n   hierarchy;\
    \ for example at the Autonomous System (AS) level.  At the\n   same time, policies\
    \ can be specified with sufficient detail in RPSL\n   so that low level router\
    \ configurations can be generated from them.\n   RPSL is extensible; new routing\
    \ protocols and new protocol features\n   can be introduced at any time.\n   RPSL\
    \ is a replacement for the current Internet policy specification\n   language\
    \ known as RIPE-181 [4] or RFC-1786 [5].  RIPE-81 [6] was the\n   first language\
    \ deployed in the Internet for specifying routing\n   policies.  It was later\
    \ replaced by RIPE-181 [4].  Through\n   operational use of RIPE-181 it has become\
    \ apparent that certain\n   policies cannot be specified and a need for an enhanced\
    \ and more\n   generalized language is needed.  RPSL addresses RIPE-181's\n  \
    \ limitations.\n   RPSL was designed so that a view of the global routing policy\
    \ can be\n   contained in a single cooperatively maintained distributed database\n\
    \   to improve the integrity of Internet's routing.  RPSL is not designed\n  \
    \ to be a router configuration language.  RPSL is designed so that\n   router\
    \ configurations can be generated from the description of the\n   policy for one\
    \ autonomous system (aut-num class) combined with the\n   description of a router\
    \ (inet-rtr class), mainly providing router ID,\n   autonomous system number of\
    \ the router, interfaces and peers of the\n   router, and combined with a global\
    \ database mappings from AS sets to\n   ASes (as-set class), and from origin ASes\
    \ and route sets to route\n   prefixes (route and route-set classes).  The accurate\
    \ population of\n   the RPSL database can help contribute toward such goals as\
    \ router\n   configurations that protect against accidental (or malicious)\n \
    \  distribution of inaccurate routing information, verification of\n   Internet's\
    \ routing, and aggregation boundaries beyond a single AS.\n   RPSL is object oriented;\
    \ that is, objects contain pieces of policy\n   and administrative information.\
    \  These objects are registered in the\n   Internet Routing Registry (IRR) by\
    \ the authorized organizations.  The\n   registration process is beyond the scope\
    \ of this document.  Please\n   refer to [1, 15, 2] for more details on the IRR.\n\
    \   In the following sections, we present the classes that are used to\n   define\
    \ various policy and administrative objects.  The \"mntner\" class\n   defines\
    \ entities authorized to add, delete and modify a set of\n   objects.  The \"\
    person\" and \"role\" classes describes technical and\n   administrative contact\
    \ personnel.  Autonomous systems (ASes) are\n   specified using the \"aut-num\"\
    \ class.  Routes are specified using the\n   \"route\" class.  Sets of ASes and\
    \ routes can be defined using the\n   \"as-set\" and \"route-set\" classes.  The\
    \ \"dictionary\" class provides\n   the extensibility to the language.  The \"\
    inet-rtr\" class is used to\n   specify routers.  Many of these classes were originally\
    \ defined in\n   earlier documents [4, 11, 14, 10, 3] and have all been enhanced.\n\
    \   This document is self-contained.  However, the reader is encouraged\n   to\
    \ read RIPE-181 [5] and the associated documents [11, 14, 10, 3] as\n   they provide\
    \ significant background as to the motivation and\n   underlying principles behind\
    \ RIPE-181 and consequently, RPSL. For a\n   tutorial on RPSL, the reader should\
    \ read the RPSL applications\n   document [2].\n"
- title: 2 RPSL Names, Reserved Words, and Representation
  contents:
  - "2 RPSL Names, Reserved Words, and Representation\n   Each class has a set of\
    \ attributes which store a piece of information\n   about the objects of the class.\
    \  Attributes can be mandatory or\n   optional: A mandatory attribute has to be\
    \ defined for all objects of\n   the class; optional attributes can be skipped.\
    \  Attributes can also\n   be single or multiple valued.  Each object is uniquely\
    \ identified by\n   a set of attributes, referred to as the class \"key\".\n \
    \  The value of an attribute has a type.  The following types are most\n   widely\
    \ used.  Note that RPSL is case insensitive and only the\n   characters from the\
    \ ASCII character set can be used.\n   <object-name>Many objects in RPSL have\
    \ a name.  An <object-name>\n       is made up of letters, digits, the character\
    \ underscore \"_\", and\n       the character hyphen \"-\"; the first character\
    \ of a name must be a\n       letter, and the last character of a name must be\
    \ a letter or a\n       digit.  The following words are reserved by RPSL, and\
    \ they can\n       not be used as names:\n             any as-any rs-any peeras\n\
    \             and or not\n             atomic from to at action accept announce\
    \ except refine\n             networks into inbound outbound\n       Names starting\
    \ with certain prefixes are reserved for certain\n       object types.  Names\
    \ starting with \"as-\" are reserved for as set\n       names.  Names starting\
    \ with \"rs-\" are reserved for route set\n       names.\n   <as-number>An AS\
    \ number x is represented as the string \"ASx\".  That\n       is, the AS 226\
    \ is represented as AS226.\n   <ipv4-address>An IPv4 address is represented as\
    \ a sequence of four\n       integers in the range from 0 to 255 separated by\
    \ the character\n       dot \".\".  For example, 128.9.128.5 represents a valid\
    \ IPv4\n       address.  In the rest of this document, we may refer to IPv4\n\
    \       addresses as IP addresses.\n   <address-prefix>An address prefix is represented\
    \ as an IPv4\n       address followed by the character slash \"/\" followed by\
    \ an\n       integer in the range from 0 to 32.  The following are valid\n   \
    \    address prefixes: 128.9.128.5/32, 128.9.0.0/16, 0.0.0.0/0; and\n       the\
    \ following address prefixes are invalid: 0/0, 128.9/16 since 0\n       or 128.9\
    \ are not strings containing four integers.\n   <address-prefix-range>An address\
    \ prefix range is an address\n       prefix followed by one of the following range\
    \ operators:\n       ^- is the exclusive more specifics operator; it stands\n\
    \           for the more specifics of the address prefix excluding the\n     \
    \      address prefix itself.  For example, 128.9.0.0/16^- contains\n        \
    \   all the more specifics of 128.9.0.0/16 excluding\n           128.9.0.0/16.\n\
    \       ^+ is the inclusive more specifics operator; it stands\n           for\
    \ the more specifics of the address prefix including the\n           address prefix\
    \ itself.  For example, 5.0.0.0/8^+ contains all\n           the more specifics\
    \ of 5.0.0.0/8 including 5.0.0.0/8.\n       ^n where n is an integer, stands for\
    \ all the length n specifics\n           of the address prefix.  For example,\
    \ 30.0.0.0/8^16 contains\n           all the more specifics of 30.0.0.0/8 which\
    \ are of length 16\n           such as 30.9.0.0/16.\n       ^n-m where n and m\
    \ are integers, stands for all the length n to\n           length m specifics\
    \ of the address prefix.  For example,\n           30.0.0.0/8^24-32 contains all\
    \ the more specifics of\n           30.0.0.0/8 which are of length 24 to 32 such\
    \ as 30.9.9.96/28.\n       Range operators can also be applied to address prefix\
    \ sets.  In\n       this case, they distribute over the members of the set.  For\n\
    \       example, for a route-set (defined later) rs-foo, rs-foo^+\n       contains\
    \ all the inclusive more specifics of all the prefixes in\n       rs-foo.\n  \
    \ <date>A date is represented as an eight digit integer of the\n       form YYYYMMDD\
    \ where YYYY represents the year, MM represents the\n       month of the year\
    \ (01 through 12), and DD represents the day of\n       the month (01 through\
    \ 31).  For example, June 24, 1996 is\n       represented as 19960624.\n   <email-address>is\
    \ as described in RFC-822[8].\n   <dns-name>is as described in RFC-1034[16].\n\
    \   <nic-handle>is a uniquely assigned identifier[13] used by routing,\n     \
    \  address allocation, and other registries to unambiguously refer\n       to\
    \ contact information.  person and role classes map NIC handles\n       to actual\
    \ person names, and contact information.\n   <free-form>is a sequence of ASCII\
    \ characters.\n   <X-name>is a name of an object of type X. That is <mntner-name>\n\
    \       is a name of a mntner object.\n   <registry-name>is a name of an IRR registry.\
    \  The routing\n       registries are listed in Appendix A.\n   A value of an\
    \ attribute may also be a list of one of these types.  A\n   list is represented\
    \ by separating the list members by commas \",\".\n   For example, \"AS1, AS2,\
    \ AS3, AS4\" is a list of AS numbers.  Note that\n   being list valued and being\
    \ multiple valued are orthogonal.  A\n   multiple valued attribute has more than\
    \ one value, each of which may\n   or may not be a list.  On the other hand a\
    \ single valued attribute\n   may have a list value.\n   An RPSL object is textually\
    \ represented as a list of attribute-value\n   pairs.  Each attribute-value pair\
    \ is written on a separate line.  The\n   attribute name starts at column 0, followed\
    \ by character \":\" and\n   followed by the value of the attribute.  The object's\
    \ representation\n   ends when a blank line is encountered.  An attribute's value\
    \ can be\n   split over multiple lines, by starting the continuation lines with\
    \ a\n   white-space (\" \" or tab) character.  The order of attribute-value\n\
    \   pairs is significant.\n   An object's description may contain comments.  A\
    \ comment can be\n   anywhere in an object's definition, it starts at the first\
    \ \"#\"\n   character on a line and ends at the first end-of-line character.\n\
    \   White space characters can be used to improve readability.\n"
- title: 3 Contact Information
  contents:
  - "3 Contact Information\n   The mntner, person and role classes, admin-c, tech-c,\
    \ mnt-by,\n   changed, and source attributes of all classes describe contact\n\
    \   information.  The mntner class also specifies what entities can\n   create,\
    \ delete and update other objects.  These classes do not\n   specify routing policies\
    \ and each registry may have different or\n   additional requirements on them.\
    \  Here we present the common\n   denominator for completeness which is the RIPE\
    \ database\n   implementation[15].  Please consult your routing registry for the\n\
    \   latest specification of these classes and attributes.\n"
- title: 3.1 mntner Class
  contents:
  - "3.1 mntner Class\n   The mntner class defines entities that can create, delete\
    \ and update\n   RPSL objects.  A provider, before he/she can create RPSL objects,\n\
    \   first needs to create a mntner object.  The attributes of the mntner\n   class\
    \ are shown in Figure 1.  The mntner class was first described in\n   [11].\n\
    \   The mntner attribute is mandatory and is the class key attribute.\n   Its\
    \ value is an RPSL name.  The auth attribute specifies the scheme\n   that will\
    \ be used\n"
- title: Attribute Value                    Type
  contents:
  - 'Attribute Value                    Type

    '
- title: mntner    <object-name>            mandatory, single-valued, class key
  contents:
  - 'mntner    <object-name>            mandatory, single-valued, class key

    '
- title: descr     <free-form>              mandatory, single-valued
  contents:
  - 'descr     <free-form>              mandatory, single-valued

    '
- title: auth      see description in text  mandatory, multi-valued
  contents:
  - 'auth      see description in text  mandatory, multi-valued

    '
- title: upd-to    <email-address>          mandatory, multi-valued
  contents:
  - 'upd-to    <email-address>          mandatory, multi-valued

    '
- title: mnt-nfy   <email-address>          optional, multi-valued
  contents:
  - 'mnt-nfy   <email-address>          optional, multi-valued

    '
- title: tech-c    <nic-handle>             mandatory, multi-valued
  contents:
  - 'tech-c    <nic-handle>             mandatory, multi-valued

    '
- title: admin-c   <nic-handle>             mandatory, multi-valued
  contents:
  - 'admin-c   <nic-handle>             mandatory, multi-valued

    '
- title: remarks   <free-form>              optional, multi-valued
  contents:
  - 'remarks   <free-form>              optional, multi-valued

    '
- title: notify    <email-address>          optional, multi-valued
  contents:
  - 'notify    <email-address>          optional, multi-valued

    '
- title: mnt-by    list of <mntner-name>    mandatory, multi-valued
  contents:
  - 'mnt-by    list of <mntner-name>    mandatory, multi-valued

    '
- title: changed   <email-address> <date>   mandatory, multi-valued
  contents:
  - 'changed   <email-address> <date>   mandatory, multi-valued

    '
- title: source    <registry-name>          mandatory, single-valued
  contents:
  - "source    <registry-name>          mandatory, single-valued\n   to identify and\
    \ authenticate update requests from this maintainer.\n   It has the following\
    \ syntax:\n      auth: <scheme-id> <auth-info>\n      E.g.\n             auth:\
    \ NONE\n             auth: CRYPT-PW dhjsdfhruewf\n             auth: MAIL-FROM\
    \ .*@ripe\\.net\n   The <scheme-id>'s currently defined are: NONE, MAIL-FROM,\
    \ PGP and\n   CRYPT-PW.  The <auth-info> is additional information required by\
    \ a\n   particular scheme: in the case of MAIL-FROM, it is a regular\n   expression\
    \ matching valid email addresses; in the case of CRYPT-PW,\n   it is a password\
    \ in UNIX crypt format; and in the case of PGP, it is\n   a PGP public key.  If\
    \ multiple auth attributes are specified, an\n   update request satisfying any\
    \ one of them is authenticated to be from\n   the maintainer.\n   The upd-to attribute\
    \ is an email address.  On an unauthorized update\n   attempt of an object maintained\
    \ by this maintainer, an email message\n   will be sent to this address.  The\
    \ mnt-nfy attribute is an email\n   address.  A notification message will be forwarded\
    \ to this email\n   address whenever an object maintained by this maintainer is\
    \ added,\n   changed or deleted.\n   The descr attribute is a short, free-form\
    \ textual description of the\n   object.  The tech-c attribute is a technical\
    \ contact NIC handle.\n   This is someone to be contacted for technical problems\
    \ such as\n   misconfiguration.  The admin-c attribute is an administrative contact\n\
    \   NIC handle.  The remarks attribute is a free text explanation or\n   clarification.\
    \  The notify attribute is an email address to which\n   notifications of changes\
    \ to this object should be sent.  The mnt-by\n   attribute is a list of mntner\
    \ object names.  The authorization for\n   changes to this object is governed\
    \ by any of the maintainer objects\n   referenced.  The changed attribute documents\
    \ who last changed this\n   object, and when this change was made.  Its syntax\
    \ has the following\n   form:\n      changed: <email-address> <YYYYMMDD>\n   \
    \   E.g.\n      changed: johndoe@terabit-labs.nn 19900401\n   The <email-address>\
    \ identifies the person who made the last change.\n   <YYYYMMDD> is the date of\
    \ the change.  The source attribute specifies\n   the registry where the object\
    \ is registered.  Figure 2 shows an\n   example mntner object.  In the example,\
    \ UNIX crypt format password\n   authentication is used.\n      mntner:      RIPE-NCC-MNT\n\
    \      descr:       RIPE-NCC Maintainer\n      admin-c:     DK58\n      tech-c:\
    \      OPS4-RIPE\n      upd-to:      ops@ripe.net\n      mnt-nfy:     ops-fyi@ripe.net\n\
    \      auth:        CRYPT-PW lz1A7/JnfkTtI\n      mnt-by:      RIPE-NCC-MNT\n\
    \      changed:     ripe-dbm@ripe.net 19970820\n      source:      RIPE\n    \
    \                   Figure 2:  An example mntner object.\n   The descr, tech-c,\
    \ admin-c, remarks, notify, mnt-by, changed and\n   source attributes are attributes\
    \ of all RPSL classes.  Their syntax,\n   semantics, and mandatory, optional,\
    \ multi-valued, or single-valued\n   status are the same for for all RPSL classes.\
    \  We do not further\n   discuss them in other sections.\n"
- title: 3.2 person Class
  contents:
  - "3.2 person Class\n   A person class is used to describe information about people.\
    \  Even\n   though it does not describe routing policy, we still describe it here\n\
    \   briefly since many policy objects make reference to person objects.\n   The\
    \ person class was first described in [14].\n   The attributes of the person class\
    \ are shown in Figure 3.  The person\n   attribute is the full name of the person.\
    \  The phone and the fax-no\n   attributes have the following syntax:\n"
- title: Attribute  Value                    Type
  contents:
  - 'Attribute  Value                    Type

    '
- title: person     <free-form>              mandatory, single-valued
  contents:
  - 'person     <free-form>              mandatory, single-valued

    '
- title: nic-hdl    <nic-handle>             mandatory, single-valued, class key
  contents:
  - 'nic-hdl    <nic-handle>             mandatory, single-valued, class key

    '
- title: address    <free-form>              mandatory, multi-valued
  contents:
  - 'address    <free-form>              mandatory, multi-valued

    '
- title: phone      see description in text  mandatory, multi-valued
  contents:
  - 'phone      see description in text  mandatory, multi-valued

    '
- title: fax-no     same as phone            optional, multi-valued
  contents:
  - 'fax-no     same as phone            optional, multi-valued

    '
- title: e-mail     <email-address>          mandatory, multi-valued
  contents:
  - "e-mail     <email-address>          mandatory, multi-valued\n               \
    \      Figure 3:  person Class Attributes\n         phone: +<country-code> <city>\
    \ <subscriber> [ext. <extension>]\n      E.g.:\n         phone: +31 20 12334676\n\
    \         phone: +44 123 987654 ext. 4711\n   Figure 4 shows an example person\
    \ object.\n      person:      Daniel Karrenberg\n      address:     RIPE Network\
    \ Coordination Centre (NCC)\n      address:     Singel 258\n      address:   \
    \  NL-1016 AB  Amsterdam\n      address:     Netherlands\n      phone:       +31\
    \ 20 535 4444\n      fax-no:      +31 20 535 4445\n      e-mail:      Daniel.Karrenberg@ripe.net\n\
    \      nic-hdl:     DK58\n      changed:     Daniel.Karrenberg@ripe.net 19970616\n\
    \      source:      RIPE\n                       Figure 4:  An example person\
    \ object.\n"
- title: 3.3 role Class
  contents:
  - "3.3 role Class\n   The role class is similar to the person object.  However,\
    \ instead of\n   describing a human being, it describes a role performed by one\
    \ or\n   more human beings.  Examples include help desks, network monitoring\n\
    \   centers, system administrators, etc.  Role object is particularly\n   useful\
    \ since often a person performing a role may change, however the\n   role itself\
    \ remains.\n   The attributes of the role class are shown in Figure 5.  The nic-hdl\n\
    \   attributes of the person and role classes share the same name space.\n   The\n\
    \ Attribute  Value                    Type\n role       <free-form>          \
    \    mandatory, single-valued\n nic-hdl    <nic-handle>             mandatory,\
    \ single-valued, class key\n trouble    <free-form>              optional, multi-valued\n\
    \ address    <free-form>              mandatory, multi-valued\n phone      see\
    \ description in text  mandatory, multi-valued\n fax-no     same as phone    \
    \        optional, multi-valued\n e-mail     <email-address>          mandatory,\
    \ multi-valued\n                      Figure 5:  role Class Attributes\n   NIC\
    \ handle of a role object cannot be used in an admin-c field.  The\n   trouble\
    \ attribute of role object may contain additional contact\n   information to be\
    \ used when a problem arises in any object that\n   references this role object.\
    \  Figure 6 shows an example role object.\n      role:        RIPE NCC Operations\n\
    \      address:     Singel 258\n      address:     1016 AB Amsterdam\n      address:\
    \     The Netherlands\n      phone:       +31 20 535 4444\n      fax-no:     \
    \ +31 20 545 4445\n      e-mail:      ops@ripe.net\n      admin-c:     CO19-RIPE\n\
    \      tech-c:      RW488-RIPE\n      tech-c:      JLSD1-RIPE\n      nic-hdl:\
    \     OPS4-RIPE\n      notify:      ops@ripe.net\n      changed:     roderik@ripe.net\
    \ 19970926\n      source:      RIPE\n                        Figure 6:  An example\
    \ role object.\n"
- title: 4 route Class
  contents:
  - "4 route Class\n   Each interAS route (also referred to as an interdomain route)\n\
    \   originated by an AS is specified using a route object.  The\n   attributes\
    \ of the route class are shown in Figure 7.  The route\n   attribute is the address\
    \ prefix of the route and the origin attribute\n   is the AS number of the AS\
    \ that originates the route into the interAS\n   routing system.  The route and\
    \ origin attribute pair is the class\n   key.\n   Figure 8 shows examples of four\
    \ route objects (we do not include\n   contact.\n"
- title: Attribute     Value                      Type
  contents:
  - 'Attribute     Value                      Type

    '
- title: route         <address-prefix>           mandatory, single-valued,
  contents:
  - "route         <address-prefix>           mandatory, single-valued,\n        \
    \                                 class key\n"
- title: origin        <as-number>                mandatory, single-valued,
  contents:
  - "origin        <as-number>                mandatory, single-valued,\n        \
    \                                 class key\n"
- title: withdrawn     <date>                     optional, single-valued
  contents:
  - 'withdrawn     <date>                     optional, single-valued

    '
- title: member-of     list of <route-set-names>  optional, single-valued
  contents:
  - "member-of     list of <route-set-names>  optional, single-valued\n          \
    \    see Section 5\n"
- title: inject        see Section 8              optional, multi-valued
  contents:
  - 'inject        see Section 8              optional, multi-valued

    '
- title: components    see Section 8              optional, single-valued
  contents:
  - 'components    see Section 8              optional, single-valued

    '
- title: aggr-bndry    see Section 8              optional, single-valued
  contents:
  - 'aggr-bndry    see Section 8              optional, single-valued

    '
- title: aggr-mtd      see Section 8              optional, single-valued
  contents:
  - 'aggr-mtd      see Section 8              optional, single-valued

    '
- title: export-comps  see Section 8              optional, single-valued
  contents:
  - 'export-comps  see Section 8              optional, single-valued

    '
- title: holes         see Section 8              optional, single-valued
  contents:
  - "holes         see Section 8              optional, single-valued\n          \
    \           Figure 7:  route Class Attributes\n   attributes such as admin-c,\
    \ tech-c for brevity).  Note that the last\n   two route objects have the same\
    \ address prefix, namely 128.8.0.0/16.\n   However, they are different route objects\
    \ since they are originated\n   by different ASes (i.e. they have different keys).\n\
    \      route: 128.9.0.0/16\n      origin: AS226\n      route: 128.99.0.0/16\n\
    \      origin: AS226\n      route: 128.8.0.0/16\n      origin: AS1\n      route:\
    \ 128.8.0.0/16\n      origin: AS2\n      withdrawn: 19960624\n               \
    \          Figure 8:  Route Objects\n   The withdrawn attribute, if present, signifies\
    \ that the originator AS\n   no longer originates this address prefix in the Internet.\
    \  Its value\n   is a date indicating the date of withdrawal.  In Figure 8, the\
    \ last\n   route object is withdrawn (i.e. no longer originated by AS2) on June\n\
    \   24, 1996.\n"
- title: 5 Set Classes
  contents:
  - "5 Set Classes\n   To specify policies, it is often useful to define sets of objects.\n\
    \   For this purpose we define two classes: route-set and as-set.  These\n   classes\
    \ define a named set.  The members of these sets can be\n   specified by either\
    \ explicitly listing them in the set object's\n   definition, or implicitly by\
    \ having route and aut-num objects refer\n   to the set names, or a combination\
    \ of both methods.\n"
- title: 5.1 route-set Class
  contents:
  - "5.1 route-set Class\n   The attributes of the route-set class are shown in Figure\
    \ 9.  The\n   route-set attribute defines the name of the set.  It is an RPSL\
    \ name\n   that starts with \"rs-\".  The members attribute lists the members\
    \ of\n   the set.  The members attribute is a list of address prefixes or\n  \
    \ other route-set names.  Note that, the route-set class is a set of\n   route\
    \ prefixes, not of RPSL route objects.\n   Attribute    Value                \
    \          Type\n   route-set    <object-name>                  mandatory, single-valued,\n\
    \                                               class key\n   members      list\
    \ of <address-prefixes> or  optional, single-valued\n                <route-set-names>\n\
    \   mbrs-by-ref  list of <mntner-names>         optional, single-valued\n    \
    \               Figure 9:  route-set Class Attributes\n   Figure 10 presents some\
    \ example route-set objects.  The set rs-foo\n   contains two address prefixes,\
    \ namely 128.9.0.0/16 and 128.9.0.0/16.\n   The set rs-bar contains the members\
    \ of the set rs-foo and the address\n   prefix 128.7.0.0/16.  The set rs-empty\
    \ contains no members.\n      route-set: rs-foo\n      members: 128.9.0.0/16,\
    \ 128.9.0.0/24\n      route-set: rs-bar\n      members: 128.7.0.0/16, rs-foo\n\
    \      route-set: rs-empty\n                       Figure 10:  route-set Objects\n\
    \   An address prefix or a route-set name in a members attribute can be\n   optionally\
    \ followed by a range operator.  For example, the following\n   set\n      route-set:\
    \ rs-bar\n      members: 5.0.0.0/8^+, 30.0.0.0/8^24-32, rs-foo^+\n   contains\
    \ all the more specifics of 5.0.0.0/8 including 5.0.0.0/8, all\n   the more specifics\
    \ of 30.0.0.0/8 which are of length 24 to 32 such as\n   30.9.9.96/28, and all\
    \ the more specifics of address prefixes in route\n   set rs-foo.\n   The mbrs-by-ref\
    \ attribute is a list of maintainer names or the\n   keyword ANY.  If this attribute\
    \ is used, the route set also includes\n   address prefixes whose route objects\
    \ are registered by one of these\n   maintainers and whose member-of attribute\
    \ refers to the name of this\n   route set.  If the value of a mbrs-by-ref attribute\
    \ is ANY, any route\n   object referring to the route set name is a member.  If\
    \ the mbrs-by-\n   ref attribute is missing, only the address prefixes listed\
    \ in the\n   members attribute are members of the set.\n      route-set: rs-foo\n\
    \      mbrs-by-ref: MNTR-ME, MNTR-YOU\n      route-set: rs-bar\n      members:\
    \ 128.7.0.0/16\n      mbrs-by-ref: MNTR-YOU\n      route: 128.9.0.0/16\n     \
    \ origin: AS1\n      member-of: rs-foo\n      mnt-by: MNTR-ME\n      route: 128.8.0.0/16\n\
    \      origin: AS2\n      member-of: rs-foo, rs-bar\n      mnt-by: MNTR-YOU\n\
    \                      Figure 11:  route-set objects.\n   Figure 11 presents example\
    \ route-set objects that use the mbrs-by-ref\n   attribute.  The set rs-foo contains\
    \ two address prefixes, namely\n   128.8.0.0/16 and 128.9.0.0/16 since the route\
    \ objects for\n   128.8.0.0/16 and 128.9.0.0/16 refer to the set name rs-foo in\
    \ their\n   member-of attribute.  The set rs-bar contains the address prefixes\n\
    \   128.7.0.0/16 and 128.8.0.0/16.  The route 128.7.0.0/16 is explicitly\n   listed\
    \ in the members attribute of rs-bar, and the route object for\n   128.8.0.0/16\
    \ refer to the set name rs-bar in its member-of attribute.\n   Note that, if an\
    \ address prefix is listed in a members attribute of a\n   route set, it is a\
    \ member of that route set.  The route object\n   corresponding to this address\
    \ prefix does not need to contain a\n   member-of attribute referring to this\
    \ set name.  The member-of\n   attribute of the route class is an additional mechanism\
    \ for\n   specifying the members indirectly.\n"
- title: 5.2 as-set Class
  contents:
  - "5.2 as-set Class\n   The attributes of the as-set class are shown in Figure 12.\
    \  The as-\n   set attribute defines the name of the set.  It is an RPSL name\
    \ that\n   starts with \"as-\".  The members attribute lists the members of the\n\
    \   set.  The members attribute is a list of AS numbers, or other as-set\n   names.\n\
    \      Attribute    Value                    Type\n      as-set       <object-name>\
    \            mandatory, single-valued,\n                                     \
    \       class key\n      members      list of <as-numbers> or  optional, single-valued\n\
    \                   <as-set-names>\n      mbrs-by-ref  list of <mntner-names>\
    \   optional, single-valued\n                    Figure 12:  as-set Class Attributes\n\
    \   Figure 13 presents two as-set objects.  The set as-foo contains two\n   ASes,\
    \ namely AS1 and AS2.  The set as-bar contains the members of the\n   set as-foo\
    \ and AS3, that is it contains AS1, AS2, AS3.\n    as-set: as-foo            \
    \          as-set: as-bar\n    members: AS1, AS2                   members: AS3,\
    \ as-foo\n                    Figure 13:  as-set objects.\n   The mbrs-by-ref\
    \ attribute is a list of maintainer names or the\n   keyword ANY.  If this attribute\
    \ is used, the AS set also includes\n   ASes whose aut-num objects are registered\
    \ by one of these maintainers\n   and whose member-of attribute refers to the\
    \ name of this AS set.  If\n   the value of a mbrs-by-ref attribute is ANY, any\
    \ AS object referring\n   to the AS set is a member of the set.  If the mbrs-by-ref\
    \ attribute\n   is missing, only the ASes listed in the members attribute are\
    \ members\n   of the set.\n   Figure 14 presents an example as-set object that\
    \ uses the mbrs-by-ref\n   attribute.  The set as-foo contains AS1, AS2 and AS3.\
    \  AS4 is not a\n   member of the set as-foo even though the aut-num object references\n\
    \   as-foo.  This is because MNTR-OTHER is not listed in the as-foo's\n   mbrs-by-ref\
    \ attribute.\n    as-set: as-foo\n    members: AS1, AS2\n    mbrs-by-ref: MNTR-ME\n\
    \    aut-num: AS3                          aut-num: AS4\n    member-of: as-foo\
    \                     member-of: as-foo\n    mnt-by: MNTR-ME                 \
    \      mnt-by: MNTR-OTHER\n                        Figure 14:  as-set objects.\n"
- title: 5.3 Predefined Set Objects
  contents:
  - "5.3 Predefined Set Objects\n   In a context that expects a route set (e.g.  members\
    \ attribute of the\n   route-set class), an AS number ASx defines the set of routes\
    \ that are\n   originated by ASx; and an as-set AS-X defines the set of routes\
    \ that\n   are originated by the ASes in AS-X. A route p is said to be\n   originated\
    \ by ASx if there is a route object for p with ASx as the\n   value of the origin\
    \ attribute.  For example, in Figure 15, the route\n   set rs-special contains\
    \ 128.9.0.0/16, routes of AS1 and AS2, and\n   routes of the ASes in AS set AS-FOO.\n\
    \      route-set: rs-special\n      members: 128.9.0.0/16, AS1, AS2, AS-FOO\n\
    \         Figure 15:  Use of AS numbers and AS sets in route sets.\n   The set\
    \ rs-any contains all routes registered in IRR.  The set as-any\n   contains all\
    \ ASes registered in IRR.\n"
- title: 5.4 Hierarchical Set Names
  contents:
  - "5.4 Hierarchical Set Names\n   Set names can be hierarchical.  A hierarchical\
    \ set name is a sequence\n   of set names and AS numbers separated by colons \"\
    :\".  For example,\n   the following names are valid: AS1:AS-CUSTOMERS, AS1:RS-EXCEPTIONS,\n\
    \   AS1:RS-EXPORT:AS2, RS-EXCEPTIONS:RS-BOGUS. All components of an\n   hierarchical\
    \ set name which are not AS numbers should start with\n   \"as-\" or \"rs-\" for\
    \ as sets and route sets respectively.\n   A set object with name X1:...:Xn-1:Xn\
    \ can only be created by the\n   maintainer of the object with name X1:...:Xn-1.\
    \  That is, only the\n   maintainer of AS1 can create a set with name AS1:AS-FOO;\
    \ and only the\n   maintainer of AS1:AS-FOO can create a set with name AS1:AS-FOO:AS-\n\
    \   BAR.\n   The purpose of an hierarchical set name is to partition the set name\n\
    \   space so that the controllers of the set name X1 controls the whole\n   set\
    \ name space under X1, i.e.  X1:...:Xn-1.  This is important since\n   anyone\
    \ can create a set named AS-MCI-CUSTOMERS but only the people\n   created AS3561\
    \ can create AS3561:AS-CUSTOMERS. In the former, it is\n   not clear if the set\
    \ AS-MCI-CUSTOMERS has any relationship with MCI.\n   In the latter, we can guarantee\
    \ that AS3561:AS-CUSTOMERS and AS3561\n   are created by the same entity.\n"
- title: 6 aut-num Class
  contents:
  - "6 aut-num Class\n   ASes are specified using the aut-num class.  The attributes\
    \ of the\n   aut-num class are shown in Figure 16.  The value of the aut-num\n\
    \   attribute is the AS number of the AS described by this object.  The\n   as-name\
    \ attribute is a symbolic name (in RPSL name syntax) of the AS.\n   The import,\
    \ export and default routing policies of the AS are\n   specified using import,\
    \ export and default attributes respectively.\n   Attribute  Value           \
    \       Type\n   aut-num    <as-number>            mandatory, single-valued, class\
    \ key\n   as-name    <object-name>          mandatory, single-valued\n   member-of\
    \  list of <as-set-names> optional, single-valued\n   import     see Section 6.1\
    \        optional, multi valued\n   export     see Section 6.2        optional,\
    \ multi valued\n   default    see Section 6.5        optional, multi valued\n\
    \                    Figure 16:  aut-num Class Attributes\n"
- title: '6.1 import Attribute:  Import Policy Specification'
  contents:
  - "6.1 import Attribute:  Import Policy Specification\n   Figure 17 shows a typical\
    \ interconnection of ASes that we will be\n   using in our examples throughout\
    \ this section.  In this example\n   topology, there are three ASes, AS1, AS2,\
    \ and AS3; two exchange\n   points, EX1 and EX2; and six routers.  Routers connected\
    \ to the same\n   exchange point peer with each other, i.e. open a connection\
    \ for\n   exchanging routing information.  Each router would export a subset of\n\
    \   the routes it has to its peer routers.  Peer routers would import a\n   subset\
    \ of these routes.  A router while importing routes would set\n   some route attributes.\
    \  For example, AS1 can assign higher preference\n   values to the routes it imports\
    \ from AS2 so that it prefers AS2 over\n   AS3.  While exporting routes, a router\
    \ may also set some route\n   attributes in order to affect route selection by\
    \ its peers.  For\n   example, AS2 may set the MULTI-EXIT-DISCRIMINATOR BGP attribute\
    \ so\n   that AS1 prefers to use the router 9.9.9.2.  Most interAS policies\n\
    \   are specified by specifying what route subsets can be imported or\n   exported,\
    \ and how the various BGP route attributes are set and used.\n     ----------------------\
    \                   ----------------------\n     |            7.7.7.1 |-------|\
    \   |-------| 7.7.7.2            |\n     |                    |     ======== \
    \     |                    |\n     |   AS1              |      EX1  |-------|\
    \ 7.7.7.3     AS2    |\n     |                    |                   |      \
    \              |\n     |            9.9.9.1 |------       ------| 9.9.9.2    \
    \        |\n     ----------------------     |       |     ----------------------\n\
    \                               ===========\n                                \
    \   |    EX2\n     ----------------------        |\n     |            9.9.9.3\
    \ |---------\n     |                    |\n     |   AS3              |\n     ----------------------\n\
    \   Figure 17: Example topology consisting of three ASes, AS1, AS2, and\n   AS3;\
    \ two exchange points, EX1 and EX2; and six routers.\n   In RPSL, an import policy\
    \ is divided into import policy expressions.\n   Each import policy expression\
    \ is specified using an import attribute.\n   The import attribute has the following\
    \ syntax (we will extend this\n   syntax later in Sections 6.3 and 6.6):\n   \
    \    import: from <peering-1> [action <action-1>]\n               . . .\n    \
    \           from <peering-N> [action <action-N>]\n               accept <filter>\n\
    \   The action specification is optional.  The semantics of an import\n   attribute\
    \ is as follows: the set of routes that are matched by\n   <filter> are imported\
    \ from all the peers in <peerings>; while\n   importing routes at <peering-M>,\
    \ <action-M> is executed.\n     E.g.\n       aut-num: AS1\n       import: from\
    \ AS2 action pref = 1; accept { 128.9.0.0/16 }\n   This example states that the\
    \ route 128.9.0.0/16 is accepted from AS2\n   with preference 1.  In the next\
    \ few subsections, we will describe how\n   peerings, actions and filters are\
    \ specified.\n"
- title: 6.1.1 Peering Specification
  contents:
  - "6.1.1 Peering Specification\n   Our example above used an AS number to specify\
    \ peerings.  The\n   peerings can be specified at different granularities.  The\
    \ syntax of\n   a peering specification has two forms.  The first one is as follows:\n\
    \               <peer-as> [<peer-router>] [at <local-router>]\n   where <local-router>\
    \ and <peer-router> are IP addresses of routers,\n   <peer-as> is an AS number.\
    \  <peer-as> must be the AS number of\n   <peer-router>.  Both <local-router>\
    \ and <peer-router> are optional.\n   If both <local-router> and <peer-router>\
    \ are specified, this peering\n   specification identifies only the peering between\
    \ these two routers.\n   If only <local-router> is specified, this peering specification\n\
    \   identifies all the peerings between <local-router> and any of its\n   peer\
    \ routers in <peer-as>.  If only <peer-router> is specified, this\n   peering\
    \ specification identifies all the peerings between any router\n   in the local\
    \ AS and <peer-router>.  If neither <local-router> nor\n   <peer-router> is specified,\
    \ this peering specification identifies all\n   the peerings between any router\
    \ in the local AS and any router in\n   <peer-as>.\n   We next give examples.\
    \  Consider the topology of Figure 17 where\n   7.7.7.1, 7.7.7.2 and 7.7.7.3 peer\
    \ with each other; 9.9.9.1, 9.9.9.2\n   and 9.9.9.3 peer with each other.  In\
    \ the following example 7.7.7.1\n   imports 128.9.0.0/16 from 7.7.7.2.\n    (1)\
    \ aut-num: AS1\n        import: from AS2 7.7.7.2 at 7.7.7.1 accept { 128.9.0.0/16\
    \ }\n   In the following example 7.7.7.1 imports 128.9.0.0/16 from 7.7.7.2\n \
    \  and 7.7.7.3.\n    (2) aut-num: AS1\n        import: from AS2 at 7.7.7.1 accept\
    \ { 128.9.0.0/16 }\n   In the following example 7.7.7.1 imports 128.9.0.0/16 from\
    \ 7.7.7.2\n   and 7.7.7.3, and 9.9.9.1 imports 128.9.0.0/16 from 9.9.9.2.\n  \
    \  (3) aut-num: AS1\n        import: from AS2 accept { 128.9.0.0/16 }\n   The\
    \ second form of <peering> specification has the following syntax:\n        <as-expression>\
    \ [at <router-expression>]\n   where <as-expression> is an expression over AS\
    \ numbers and sets using\n   operators AND, OR, and NOT, and <router-expression>\
    \ is an expression\n   over router IP addresses and DNS names using operators\
    \ AND, OR, and\n   NOT. The DNS name can only be used if there is an inet-rtr\
    \ object for\n   that name that binds the name to IP addresses.  This form identifies\n\
    \   all the peerings between any local router in <router-expression> to\n   any\
    \ of their peer routers in the ASes in <as-expression>.  If\n   <router-expression>\
    \ is not specified, it defaults to all routers of\n   the local AS.\n   In the\
    \ following example 9.9.9.1 imports 128.9.0.0/16 from 9.9.9.2\n   and 9.9.9.3.\n\
    \    (4) as-set: AS-FOO\n        members: AS2, AS3\n        aut-num: AS1\n   \
    \     import: from AS-FOO at 9.9.9.1 accept { 128.9.0.0/16 }\n   In the following\
    \ example 9.9.9.1 imports 128.9.0.0/16 from 9.9.9.2\n   and 9.9.9.3, and 7.7.7.1\
    \ imports 128.9.0.0/16 from 7.7.7.2 and\n   7.7.7.3.\n    (5) aut-num: AS1\n \
    \       import: from AS-FOO accept { 128.9.0.0/16 }\n   In the following example\
    \ AS1 imports 128.9.0.0/16 from AS3 at router\n   9.9.9.1\n    (6) aut-num: AS1\n\
    \        import: from AS-FOO and not AS2\n                at not 7.7.7.1\n   \
    \             accept { 128.9.0.0/16 }\n   This is because  \"AS-FOO and not  AS2\"\
    \ equals AS3  and \"not 7.7.7.1\"\n   equals 9.9.9.1.\n"
- title: 6.1.2 Action Specification
  contents:
  - "6.1.2 Action Specification\n   Policy actions in RPSL either set or modify route\
    \ attributes, such as\n   assigning a preference to a route, adding a BGP community\
    \ to the BGP\n   community path attribute, or setting the MULTI-EXIT-DISCRIMINATOR\n\
    \   attribute.  Policy actions can also instruct routers to perform\n   special\
    \ operations, such as route flap damping.\n   The routing policy attributes whose\
    \ values can be modified in policy\n   actions are specified in the RPSL dictionary.\
    \  Please refer to\n   Section 7 for a list of these attributes.  Each action\
    \ in RPSL is\n   terminated by the character ';'.  It is possible to form composite\n\
    \   policy actions by listing them one after the other.  In a composite\n   policy\
    \ action, the actions are executed left to right.  For example,\n"
- title: 'aut-num: AS1'
  contents:
  - 'aut-num: AS1

    '
- title: 'import: from AS2'
  contents:
  - "import: from AS2\n        action pref = 10; med = 0; community.append(10250,\
    \ {3561,10});\n        accept { 128.9.0.0/16 }\n   sets pref to 10, med to 0,\
    \ and then appends 10250 and {3561,10} to\n   the community path attribute.\n"
- title: 6.1.3 Filter Specification
  contents:
  - "6.1.3 Filter Specification\n   A policy filter is a logical expression which\
    \ when applied to a set\n   of routes returns a subset of these routes.  We say\
    \ that the policy\n   filter matches the subset returned.  The policy filter can\
    \ match\n   routes using any path attribute, such as the destination address\n\
    \   prefix (or NLRI), AS-path, or community attributes.\n   The policy filters\
    \ can be composite by using the operators AND, OR,\n   and NOT.  The following\
    \ policy filters can be used to select a subset\n   of routes:\n   ANY The filter-keyword\
    \ ANY matches all routes.\n   Address-Prefix Set This is an explicit list of address\
    \ prefixes\n   enclosed in braces '{' and '}'.  The policy filter matches the\
    \ set of\n   routes whose destination address-prefix is in the set.  For example:\n\
    \        { 0.0.0.0/0 }\n        { 128.9.0.0/16, 128.8.0.0/16, 128.7.128.0/17,\
    \ 5.0.0.0/8 }\n        { }\n   An address prefix can be optionally followed by\
    \ a range operator\n   (i.e. '^-', '^+', '^n', or '^n-m').  For example, the set\n\
    \     { 5.0.0.0/8^+, 128.9.0.0/16^-, 30.0.0.0/8^16, 30.0.0.0/8^24-32 }\n   contains\
    \ all the more specifics of 5.0.0.0/8 including 5.0.0.0/8, all\n   the more specifics\
    \ of 128.9.0.0/16 excluding 128.9.0.0/16, all the\n   more specifics of 30.0.0.0/8\
    \ which are of length 16 such as\n   30.9.0.0/16, and all the more specifics of\
    \ 30.0.0.0/8 which are of\n   length 24 to 32 such as 30.9.9.96/28.\n   Route\
    \ Set Name A route set name matches the set of routes that are\n   members of\
    \ the set.  A route set name may be a name of a route-set\n   object, an AS number,\
    \ or a name of an as-set object (AS numbers and\n   as-set names implicitly define\
    \ route sets; please see Section 5.3).\n   For example:\n         aut-num: AS1\n\
    \         import: from AS2 action pref = 1; accept AS2\n         import: from\
    \ AS2 action pref = 1; accept AS-FOO\n         import: from AS2 action pref =\
    \ 1; accept RS-FOO\n   The keyword PeerAS can be used instead of the AS number\
    \ of the peer\n   AS.  PeerAS is particularly useful when the peering is specified\n\
    \   using an AS expression.  For example:\n         as-set: AS-FOO\n         members:\
    \ AS2, AS3\n         aut-num: AS1\n         import: from AS-FOO action pref =\
    \ 1; accept PeerAS\n   is same as:\n         aut-num: AS1\n         import: from\
    \ AS2 action pref = 1; accept AS2\n         import: from AS3 action pref = 1;\
    \ accept AS3\n   A route set name can also be followed by one of the operators\
    \ '^-',\n   '^+', '^n' or '^n-m'.  These operators are distributive over the\n\
    \   route sets.  For example, { 5.0.0.0/8, 6.0.0.0/8 }^+ equals {\n   5.0.0.0/8^+,\
    \ 6.0.0.0/8^+ }, and AS1^- equals all the exclusive more\n   specifics of routes\
    \ originated by AS1.\n   AS Path Regular Expressions An AS-path regular expression\
    \ can be used\n   as a policy filter by enclosing the expression in `<' and `>'.\
    \  An\n   AS-path policy filter matches the set of routes which traverses a\n\
    \   sequence of ASes matched by the AS-path regular expression.  A router\n  \
    \ can check this using the AS_PATH attribute in the Border Gateway\n   Protocol\
    \ [18], or the RD_PATH attribute in the Inter-Domain Routing\n   Protocol[17].\n\
    \   AS-path Regular Expressions are POSIX compliant regular expressions\n   over\
    \ the alphabet of AS numbers.  The regular expression constructs\n   are as follows:\n\
    \    ASN where ASN is an AS number.  ASN matches the AS-path\n               \
    \ that is of length 1 and contains the corresponding AS\n                number\
    \ (e.g.  AS-path regular expression AS1 matches the\n                AS-path \"\
    1\").\n                The keyword PeerAS can be used instead of the AS number\n\
    \                of the peer AS.\n    AS-set where AS-set is an AS set name. \
    \ AS-set matches the AS-paths\n                that is matched by one of the ASes\
    \ in the AS-set.\n    .        matches the AS-paths matched by any AS number.\n\
    \    [...]    is an AS number set.   It matches the AS-paths  matched by\n   \
    \             the AS numbers listed between the brackets.  The AS\n          \
    \      numbers in the set are separated by white space\n                characters.\
    \  If a `-' is used between two AS numbers in\n                this set, all AS\
    \ numbers between the two AS numbers are\n                included in the set.\
    \  If an as-set name is listed, all\n                AS numbers in the as-set\
    \ are included.\n    [^...]   is a complemented AS number set.  It matches any\
    \ AS-path\n                which is not matched by the AS numbers in the set.\n\
    \    ^        Matches the empty string at the beginning of an AS-path.\n    $\
    \        Matches the empty string at the end of an AS-path.\n   We next list the\
    \ regular expression operators in the decreasing order\n   of evaluation.  These\
    \ operators are left associative, i.e. performed\n   left to right.\n   Unary\
    \ postfix operators * + ?  {m} {m,n} {m,}\n                For a regular expression\
    \ A, A* matches zero or more\n                occurrences of A; A+ matches one\
    \ or more occurrences of\n                A; A?  matches zero or one occurrence\
    \ of A; A{m} matches\n                m occurrence of A; A{m,n} matches m to n\
    \ occurrence of\n                A; A{m,} matches m or more occurrence of A. For\
    \ example,\n                [AS1 AS2]{2} matches AS1 AS1, AS1 AS2, AS2 AS1, and\
    \ AS2\n                AS2.\n   Unary postfix operators ~* ~+ ~{m} ~{m,n} ~{m,}\n\
    \                These operators have similar functionality as the\n         \
    \       corresponding operators listed above, but all\n                occurrences\
    \ of the regular expression has to match the\n                same pattern.  For\
    \ example, [AS1 AS2]~{2} matches AS1\n                AS1 and AS2 AS2, but it\
    \ does not match AS1 AS2 and AS2\n                AS1.\n   Binary catenation operator\n\
    \                This is an implicit operator and exists between two\n       \
    \         regular expressions A and B when no other explicit\n               \
    \ operator is specified.  The resulting expression A B\n                matches\
    \ an AS-path if A matches some prefix of the AS-\n                path and B matches\
    \ the rest of the AS-path.\n   Binary alternative (or) operator |\n          \
    \      For a regular expressions A and B, A | B matches any\n                AS-path\
    \ that is matched by A or B.\n   Parenthesis can be used to override the default\
    \ order of evaluation.\n   White spaces can be used to increase readability.\n\
    \   The following are examples of AS-path filters:\n      <AS3>\n      <^AS1>\n\
    \      <AS2$>\n      <^AS1 AS2 AS3$>\n      <^AS1 .* AS2$>.\n   The first example\
    \ matches any route whose AS-path contains AS3, the\n   second matches routes\
    \ whose AS-path starts with AS1, the third\n   matches routes whose AS-path ends\
    \ with AS2, the fourth matches routes\n   whose AS-path is exactly \"1 2 3\",\
    \ and the fifth matches routes whose\n   AS-path starts with AS1 and ends in AS2\
    \ with any number of AS numbers\n   in between.\n   Composite Policy Filters The\
    \ following operators (in decreasing order\n   of evaluation) can be used to form\
    \ composite policy filters:\n   NOT Given a policy filter x, NOT x matches the\
    \ set of routes that are\n       not matched by x.  That is it is the negation\
    \ of policy filter x.\n   AND Given two policy filters x and y, x AND y matches\
    \ the\n       intersection of the routes that are matched by x and that are\n\
    \       matched by y.\n   OR Given two policy filters x and y, x OR y matches\
    \ the union of\n       the routes that are matched by x and that are matched by\
    \ y.\n   Note that an OR operator can be implicit, that is `x y' is equivalent\n\
    \   to `x OR y'.\n     E.g.\n       NOT {128.9.0.0/16, 128.8.0.0/16}\n       AS226\
    \ AS227 OR AS228\n       AS226 AND NOT {128.9.0.0/16}\n       AS226 AND {0.0.0.0/0^0-18}\n\
    \   The first example matches any route except 128.9.0.0/16 and\n   128.8.0.0/16.\
    \  The second example matches the routes of AS226, AS227\n   and AS228.  The third\
    \ example matches the routes of AS226 except\n   128.9.0.0/16.  The fourth example\
    \ matches the routes of AS226 whose\n   length are not longer than 18.\n   Routing\
    \ Policy Attributes Policy filters can also use the values of\n   other attributes\
    \ for comparison.  The attributes whose values can be\n   used in policy filters\
    \ are specified in the RPSL dictionary.  Please\n   refer to Section 7 for details.\
    \  An example using the the BGP\n   community attribute is shown below:\n    \
    \   aut-num: AS1\n       export: to AS2 announce AS1 AND NOT community.contains(NO_EXPORT)\n\
    \   Filters using the routing policy attributes defined in the dictionary\n  \
    \ are evaluated before evaluating the operators AND, OR and NOT.\n"
- title: 6.1.4 Example Policy Expressions
  contents:
  - "6.1.4 Example Policy Expressions\n    aut-num: AS1\n    import: from AS2 action\
    \ pref = 1;\n            from AS3 action pref = 2;\n            accept AS4\n \
    \  The above example states that AS4's routes are accepted from AS2 with\n   preference\
    \ 1, and from AS3 with preference 2 (routes with lower\n   integer preference\
    \ values are preferred over routes with higher\n   integer preference values).\n\
    \    aut-num: AS1\n    import: from AS2 7.7.7.2 at 7.7.7.1 action pref = 1;\n\
    \            from AS2                    action pref = 2;\n            accept\
    \ AS4\n   The above example states that AS4's routes are accepted from AS2 on\n\
    \   peering 7.7.7.1-7.7.7.2 with preference 1, and on any other peering\n   with\
    \ AS2 with preference 2.\n"
- title: '6.2 export Attribute: Export Policy Specification'
  contents:
  - "6.2 export Attribute: Export Policy Specification\n   Similarly, an export policy\
    \ expression is specified using an export\n   attribute.  The export attribute\
    \ has the following syntax:\n       export: to <peering-1> [action <action-1>]\n\
    \               . . .\n               to <peering-N> [action <action-N>]\n   \
    \            announce <filter>\n   The action specification is optional.  The\
    \ semantics of an export\n   attribute is as follows: the set of routes that are\
    \ matched by\n   <filter> are exported to all the peers specified in <peerings>;\
    \ while\n   exporting routes at <peering-M>, <action-M> is executed.\n     E.g.\n\
    \       aut-num: AS1\n       export: to AS2 action med = 5; community .= 70;\n\
    \               announce AS4\n   In this example, AS4's routes are announced to\
    \ AS2 with the med\n   attribute's value set to 5 and community 70 added to the\
    \ community\n   list.\n   Example:\n       aut-num: AS1\n       export: to AS-FOO\
    \ announce ANY\n   In this example, AS1 announces all of its routes to the ASes\
    \ in the\n   set AS-FOO.\n"
- title: 6.3 Other Routing Protocols, Multi-Protocol Routing Protocols, and
  contents:
  - "6.3 Other Routing Protocols, Multi-Protocol Routing Protocols, and\n       Injecting\
    \ Routes Between Protocols\n   The more complete syntax of the import and export\
    \ attributes are as\n   follows:\n       import: [protocol <protocol-1>] [into\
    \ <protocol-2>]\n               from <peering-1> [action <action-1>]\n       \
    \        . . .\n               from <peering-N> [action <action-N>]\n        \
    \       accept <filter>\n       export: [protocol <protocol-1>] [into <protocol-2>]\n\
    \               to <peering-1> [action <action-1>]\n               . . .\n   \
    \            to <peering-N> [action <action-N>]\n               announce <filter>\n\
    \   Where the optional protocol specifications can be used for specifying\n  \
    \ policies for other routing protocols, or for injecting routes of one\n   protocol\
    \ into another protocol, or for multi-protocol routing\n   policies.  The valid\
    \ protocol names are defined in the dictionary.\n   The <protocol-1> is the name\
    \ of the protocol whose routes are being\n   exchanged.  The <protocol-2> is the\
    \ name of the protocol which is\n   receiving these routes.  Both <protocol-1>\
    \ and <protocol-2> default\n   to the Internet Exterior Gateway Protocol, currently\
    \ BGP.\n   In the following example, all interAS routes are injected into RIP.\n\
    \    aut-num: AS1\n    import: from AS2 accept AS2\n    export: protocol BGP4\
    \ into RIP\n            to AS1 announce ANY\n   In the following example, AS1\
    \ accepts AS2's routes including any more\n   specifics of AS2's routes, but does\
    \ not inject these extra more\n   specific routes into OSPF.\n    aut-num: AS1\n\
    \    import: from AS2 accept AS2^+\n    export: protocol BGP4 into OSPF\n    \
    \        to AS1 announce AS2\n   In the following example, AS1 injects its static\
    \ routes (routes which\n   are members of the set AS1:RS-STATIC-ROUTES) to the\
    \ interAS routing\n   protocol and appends AS1 twice to their AS paths.\n    aut-num:\
    \ AS1\n    import: protocol STATIC into BGP4\n            from AS1 action aspath.prepend(AS1,\
    \ AS1);\n            accept AS1:RS-STATIC-ROUTES\n   In the following example,\
    \ AS1 imports different set of unicast routes\n   for multicast reverse path forwarding\
    \ from AS2:\n    aut-num: AS1\n    import: from AS2 accept AS2\n    import: protocol\
    \ IDMR\n            from AS2 accept AS2:RS-RPF-ROUTES\n"
- title: 6.4 Ambiguity Resolution
  contents:
  - "6.4 Ambiguity Resolution\n   It is possible that the same peering can be covered\
    \ by more that one\n   peering specification in a policy expression.  For example:\n\
    \    aut-num: AS1\n    import: from AS2 7.7.7.2 at 7.7.7.1 action pref = 2;\n\
    \            from AS2 7.7.7.2 at 7.7.7.1 action pref = 1;\n            accept\
    \ AS4\n   This is not an error, though definitely not desirable.  To break the\n\
    \   ambiguity, the action corresponding to the first peering\n   specification\
    \ is used.  That is the routes are accepted with\n   preference 2.  We call this\
    \ rule as the specification-order rule.\n   Consider the example:\n    aut-num:\
    \ AS1\n    import: from AS2                    action pref = 2;\n            from\
    \ AS2 7.7.7.2 at 7.7.7.1 action pref = 1; dpa = 5;\n            accept AS4\n \
    \  where both peering specifications cover the peering 7.7.7.1-7.7.7.2,\n   though\
    \ the second one covers it more specifically.  The specification\n   order rule\
    \ still applies, and only the action \"pref = 2\" is executed.\n   In fact, the\
    \ second peering-action pair has no use since the first\n   peering-action pair\
    \ always covers it.  If the intended policy was to\n   accept these routes with\
    \ preference 1 on this particular peering and\n   with preference 2 in all other\
    \ peerings, the user should have\n   specified:\n    aut-num: AS1\n    import:\
    \ from AS2 7.7.7.2 at 7.7.7.1 action pref = 1; dpa = 5;\n            from AS2\
    \                    action pref = 2;\n            accept AS4\n   It is also possible\
    \ that more than one policy expression can cover\n   the same set of routes for\
    \ the same peering.  For example:\n    aut-num: AS1\n    import: from AS2 action\
    \ pref = 2; accept AS4\n    import: from AS2 action pref = 1; accept AS4\n   In\
    \ this case, the specification-order rule is still used.  That is,\n   AS4's routes\
    \ are accepted from AS2 with preference 2.  If the filters\n   were overlapping\
    \ but not exactly the same:\n    aut-num: AS1\n    import: from AS2 action pref\
    \ = 2; accept AS4\n    import: from AS2 action pref = 1; accept AS4 OR AS5\n \
    \  the AS4's routes are accepted from AS2 with preference 2 and however\n   AS5's\
    \ routes are also accepted, but with preference 1.\n   We next give the general\
    \ specification order rule for the benefit of\n   the RPSL implementors.  Consider\
    \ two policy expressions:\n    aut-num: AS1\n    import: from peerings-1 action\
    \ action-1 accept filter-1\n    import: from peerings-2 action action-2 accept\
    \ filter-2\n   The above policy expressions are equivalent to the following three\n\
    \   expressions where there is no ambiguity:\n"
- title: 'aut-num: AS1'
  contents:
  - 'aut-num: AS1

    '
- title: 'import: from peerings-1 action action-1 accept filter-1'
  contents:
  - 'import: from peerings-1 action action-1 accept filter-1

    '
- title: 'import: from peerings-3 action action-2 accept filter-2 AND NOT filter-1'
  contents:
  - 'import: from peerings-3 action action-2 accept filter-2 AND NOT filter-1

    '
- title: 'import: from peerings-4 action action-2 accept filter-2'
  contents:
  - "import: from peerings-4 action action-2 accept filter-2\n   where peerings-3\
    \ are those that are covered by both peerings-1 and\n   peerings-2, and peerings-4\
    \ are those that are covered by peerings-2\n   but not by peerings-1 (\"filter-2\
    \ AND NOT filter-1\" matches the routes\n   that are matched by filter-2 but not\
    \ by filter-1).\n   Example:\n    aut-num: AS1\n    import: from AS2 7.7.7.2 at\
    \ 7.7.7.1\n            action pref = 2;\n            accept {128.9.0.0/16}\n \
    \   import: from AS2\n            action pref = 1;\n            accept {128.9.0.0/16,\
    \ 75.0.0.0/8}\n   Lets consider two peerings with AS2, 7.7.7.1-7.7.7.2 and 9.9.9.1-\n\
    \   9.9.9.2.  Both policy expressions cover 7.7.7.1-7.7.7.2.  On this\n   peering,\
    \ the route 128.9.0.0/16 is accepted with preference 2, and\n   the route 75.0.0.0/8\
    \ is accepted with preference 1.  The peering\n   9.9.9.1-9.9.9.2 is only covered\
    \ by the second policy expressions.\n   Hence, both the route 128.9.0.0/16 and\
    \ the route 75.0.0.0/8 are\n   accepted with preference 1 on peering 9.9.9.1-9.9.9.2.\n\
    \   Note that the same ambiguity resolution rules also apply to export\n   and\
    \ default policy expressions.\n"
- title: '6.5 default Attribute:  Default Policy Specification'
  contents:
  - "6.5 default Attribute:  Default Policy Specification\n   Default routing policies\
    \ are specified using the default attribute.\n   The default attribute has the\
    \ following syntax:\n       default: to <peering> [action <action>] [networks\
    \ <filter>]\n   The <action> and <filter> specifications are optional.  The semantics\n\
    \   are as follows: The <peering> specification indicates the AS (and the\n  \
    \ router if present) is being defaulted to; the <action> specification,\n   if\
    \ present, indicates various attributes of defaulting, for example a\n   relative\
    \ preference if multiple defaults are specified; and the\n   <filter> specifications,\
    \ if present, is a policy filter.  A router\n   chooses a default router from\
    \ the routes in its routing table that\n   matches this <filter>.\n   In the following\
    \ example, AS1 defaults to AS2 for routing.\n    aut-num: AS1\n    default: to\
    \ AS2\n   In the following example, router 7.7.7.1 in AS1 defaults to router\n\
    \   7.7.7.2 in AS2.\n    aut-num: AS1\n    default: to AS2 7.7.7.2 at 7.7.7.1\n\
    \   In the following example, AS1 defaults to AS2 and AS3, but prefers\n   AS2\
    \ over AS3.\n    aut-num: AS1\n    default: to AS2 action pref = 1;\n    default:\
    \ to AS3 action pref = 2;\n   In the following example, AS1 defaults to AS2 and\
    \ uses 128.9.0.0/16\n   as the default network.\n    aut-num: AS1\n    default:\
    \ to AS2 networks { 128.9.0.0/16 }\n"
- title: 6.6 Structured Policy Specification
  contents:
  - "6.6 Structured Policy Specification\n   The import and export policies can be\
    \ structured.  We only reccomend\n   structured policies to advanced RPSL users.\
    \  Please feel free to skip\n   this section.\n   The syntax for a structured\
    \ policy specification is the following:\n      <import-factor> ::= from <peering-1>\
    \ [action <action-1>]\n                          . . .\n                     \
    \     from <peering-N> [action <action-N>]\n                          accept <filter>;\n\
    \      <import-term> ::=  <import-factor> |\n                         LEFT-BRACE\n\
    \                         <import-factor>\n                         . . .\n  \
    \                       <import-factor>\n                         RIGHT-BRACE\n\
    \      <import-expression> ::= <import-term>                            |\n  \
    \                            <import-term> EXCEPT <import-expression> |\n    \
    \                          <import-term> REFINE <import-expression>\n      import:\
    \ [protocol <protocol1>] [into <protocol2>]\n              <import-expression>\n\
    \   Please note the semicolon at the end of an <import-factor>.  If the\n   policy\
    \ specification is not structured (as in all the examples in\n   other sections),\
    \ this semicolon is optional.  The syntax and\n   semantics for an <import-factor>\
    \ is already defined in Section 6.1.\n   An <import-term> is either a sequence\
    \ of <import-factor>'s enclosed\n   within matching braces (i.e. `{' and `}')\
    \ or just a single <import-\n   factor>.  The semantics of an <import-term> is\
    \ the union of <import-\n   factor>'s using the specification order rule.  An\
    \ <import-expression>\n   is either a single <import-term> or an <import-term>\
    \ followed by one\n   of the keywords \"except\" and \"refine\", followed by another\
    \ <import-\n   expression>.  Note that our definition allows nested expressions.\n\
    \   Hence there can be exceptions to exceptions, refinements to\n   refinements,\
    \ or even refinements to exceptions, and so on.\n   The semantics for the except\
    \ operator is as follows: The result of an\n   except operation is another <import-term>.\
    \  The resulting policy set\n   contains the policies of the right hand side but\
    \ their filters are\n   modified to only include the routes also matched by the\
    \ left hand\n   side.  The policies of the left hand side are included afterwards\
    \ and\n   their filters are modified to exclude the routes matched by the right\n\
    \   hand side.  Please note that the filters are modified during this\n   process\
    \ but the actions are copied verbatim.  When there are multiple\n   levels of\
    \ nesting, the operations (both except and refine) are\n   performed right to\
    \ left.\n   Consider the following example:\n    import: from AS1 action pref\
    \ = 1; accept as-foo;\n            except {\n               from AS2 action pref\
    \ = 2; accept AS226;\n               except {\n                  from AS3 action\
    \ pref = 3; accept {128.9.0.0/16};\n               }\n            }\n   where\
    \ the route 128.9.0.0/16 is originated by AS226, and AS226 is a\n   member of\
    \ the as set as-foo.  In this example, the route 128.9.0.0/16\n   is accepted\
    \ from AS3, any other route (not 128.9.0.0/16) originated\n   by AS226 is accepted\
    \ from AS2, and any other ASes' routes in as-foo\n   is accepted from AS1.\n \
    \  We can come to the same conclusion using the algebra defined above.\n   Consider\
    \ the inner exception specification:\n      from AS2 action pref = 2; accept AS226;\n\
    \      except {\n         from AS3 action pref = 3; accept {128.9.0.0/16};\n \
    \     }\n   is equivalent to\n     {\n      from AS3 action pref = 3; accept AS226\
    \ AND {128.9.0.0/16};\n      from AS2 action pref = 2; accept AS226 AND NOT {128.9.0.0/16};\n\
    \     }\n   Hence, the original expression is equivalent to:\n    import: from\
    \ AS1 action pref = 1; accept as-foo;\n            except {\n               from\
    \ AS3 action pref = 3;\n                   accept AS226 AND {128.9.0.0/16};\n\
    \               from AS2 action pref = 2;\n                   accept AS226 AND\
    \ NOT {128.9.0.0/16};\n            }\n   which is equivalent to\n    import: {\n\
    \       from AS3 action pref = 3;\n                accept as-foo AND AS226 AND\
    \ {128.9.0.0/16};\n       from AS2 action pref = 2;\n                accept as-foo\
    \ AND AS226 AND NOT {128.9.0.0/16};\n       from AS1 action pref = 1;\n      \
    \          accept as-foo AND NOT\n                  (AS226 AND NOT {128.9.0.0/16}\
    \ OR\n                   AS226 AND {128.9.0.0/16});\n       }\n   Since AS226\
    \ is in as-foo and 128.9.0.0/16 is in AS226, it simplifies to:\n    import: {\n\
    \              from AS3 action pref = 3; accept {128.9.0.0/16};\n            \
    \  from AS2 action pref = 2;\n                   accept AS226 AND NOT {128.9.0.0/16};\n\
    \              from AS1 action pref = 1; accept as-foo AND NOT AS226;\n      \
    \      }\n   In the case of the refine operator, the resulting set is constructed\n\
    \   by taking the cartasian product of the two sides as follows: for each\n  \
    \ policy l in the left hand side and for each policy r in the right\n   hand side,\
    \ the peerings of the resulting policy are the peerings\n   common to both r and\
    \ l; the filter of the resulting policy is the\n   intersection of l's filter\
    \ and r's filter; and action of the\n   resulting policy is l's action followed\
    \ by r's action.  If there are\n   no common peerings, or if the intersection\
    \ of filters is empty, a\n   resulting policy is not generated.\n   Consider the\
    \ following example:\n    import: { from AS-ANY action pref = 1;\n           \
    \        accept community.contains({3560,10});\n              from AS-ANY action\
    \ pref = 2;\n                   accept community.contains({3560,20});\n      \
    \      } refine {\n               from AS1 accept AS1;\n               from AS2\
    \ accept AS2;\n               from AS3 accept AS3;\n            }\n   Here, any\
    \ route with community {3560,10} is assigned a preference of\n   1 and any route\
    \ with community {3560,20} is assigned a preference of\n   2 regardless of whom\
    \ they are imported from.  However, only AS1's\n   routes are imported from AS1,\
    \ and only AS2's routes are imported from\n   AS2, and only AS3's routes are imported\
    \ form AS3, and no routes are\n   imported from any other AS. We can reach the\
    \ same conclusion using\n   the above algebra.  That is, our example is equivalent\
    \ to:\n    import: {\n      from AS1 action pref = 1;\n           accept community.contains({3560,10})\
    \ AND AS1;\n      from AS1 action pref = 2;\n           accept community.contains({3560,20})\
    \ AND AS1;\n      from AS2 action pref = 1;\n           accept community.contains({3560,10})\
    \ AND AS2;\n      from AS2 action pref = 2;\n           accept community.contains({3560,20})\
    \ AND AS2;\n      from AS3 action pref = 1;\n           accept community.contains({3560,10})\
    \ AND AS3;\n      from AS3 action pref = 2;\n           accept community.contains({3560,20})\
    \ AND AS3;\n    }\n   Note that the common peerings between \"from AS1\" and \"\
    from AS-ANY\"\n   are those peerings in \"from AS1\".  Even though we do not formally\n\
    \   define \"common peerings\", it is straight forward to deduce the\n   definition\
    \ from the definitions of peerings (please see Section\n   6.1.1).\n   Consider\
    \ the following example:\n    import: {\n      from AS-ANY action med = 0; accept\
    \ {0.0.0.0/0^0-18};\n      } refine {\n           from AS1 at 7.7.7.1 action pref\
    \ = 1; accept AS1;\n           from AS1            action pref = 2; accept AS1;\n\
    \        }\n   where only routes of length 0 to 18 are accepted and med's value\
    \ is\n   set to 0 to disable med's effect for all peerings; In addition, from\n\
    \   AS1 only AS1's routes are imported, and AS1's routes imported at\n   7.7.7.1\
    \ are preferred over other peerings.  This is equivalent to:\n    import: {\n\
    \      from AS1 at 7.7.7.1 action med=0; pref=1;\n           accept {0.0.0.0/0^0-18}\
    \ AND AS1;\n      from AS1 action med=0; pref=2; accept {0.0.0.0/0^0-18} AND AS1;\n\
    \   The above syntax and semantics also apply equally to structured\n   export\
    \ policies with \"from\" replaced with \"to\" and \"accept\" is\n   replaced with\
    \ \"announce\".\n"
- title: 7 dictionary Class
  contents:
  - "7 dictionary Class\n   The dictionary class provides extensibility to RPSL. \
    \ Dictionary\n   objects define routing policy attributes, types, and routing\n\
    \   protocols.  Routing policy attributes, henceforth called rp-\n   attributes,\
    \ may correspond to actual protocol attributes, such as the\n   BGP path attributes\
    \ (e.g. community, dpa, and AS-path), or they may\n   correspond to router features\
    \ (e.g. BGP route flap damping).  As new\n   protocols, new protocol attributes,\
    \ or new router features are\n   introduced, the dictionary object is updated\
    \ to include appropriate\n   rp-attribute and protocol definitions.\n   An rp-attribute\
    \ is an abstract class; that is a data representation\n   is not available.  Instead,\
    \ they are accessed through access methods.\n   For example, the rp-attribute\
    \ for the BGP AS-path attribute is called\n   aspath; and it has an access method\
    \ called prepend which stuffs extra\n   AS numbers to the AS-path attributes.\
    \  Access methods can take\n   arguments.  Arguments are strongly typed.  For\
    \ example, the method\n   prepend above takes AS numbers as argument.\n   Once\
    \ an rp-attribute is defined in the dictionary, it can be used to\n   describe\
    \ policy filters and actions.  Policy analysis tools are\n   required to fetch\
    \ the dictionary object and recognize newly defined\n   rp-attributes, types,\
    \ and protocols.  The analysis tools may\n   approximate policy analyses on rp-attributes\
    \ that they do not\n   understand: a filter method may always match, and an action\
    \ method\n   may always perform no-operation.  Analysis tools may even download\n\
    \   code to perform appropriate operations using mechanisms outside the\n   scope\
    \ of RPSL.\n   We next describe the syntax and semantics of the dictionary class.\n\
    \   This description is not essential for understanding dictionary\n   objects\
    \ (but it is essential for creating one).  Please feel free to\n   skip to the\
    \ RPSL Initial Dictionary subsection (Section 7.1).\n   The attributes of the\
    \ dictionary class are shown in Figure 18.  The\n   dictionary attribute is the\
    \ name of the dictionary object, obeying\n   the RPSL naming rules.  There can\
    \ be many dictionary objects, however\n   there is always one well-known dictionary\
    \ object \"RPSL\". All tools\n   use this dictionary by default.\n   The rp-attribute\
    \ attribute has the following syntax:\n    Attribute     Value               \
    \    Type\n    dictionary    <object-name>           mandatory, single-valued,\n\
    \                                           class key\n    rp-attribute  see description\
    \ in text optional, multi valued\n    typedef       see description in text optional,\
    \ multi valued\n    protocol      see description in text optional, multi valued\n\
    \                     Figure 18:  dictionary Class Attributes\n      rp-attribute:\
    \ <name>\n         <method-1>(<type-1-1>, ..., <type-1-N1> [, \"...\"])\n    \
    \     ...\n         <method-M>(<type-M-1>, ..., <type-M-NM> [, \"...\"])\n   where\
    \ <name> is the name of the rp-attribute; and <method-i> is the\n   name of an\
    \ access method for the rp-attribute, taking Ni arguments\n   where the j-th argument\
    \ is of type <type-i-j>.  A method name is\n   either an RPSL name or one of the\
    \ operators defined in Figure 19.\n   The operator methods with the exception\
    \ of operator() and operator[]\n   can take only one argument.\n      operator=\
    \           operator==\n      operator<<=         operator<\n      operator>>=\
    \         operator>\n      operator+=          operator>=\n      operator-=  \
    \        operator<=\n      operator*=          operator!=\n      operator/=  \
    \        operator()\n      operator.=          operator[]\n                  \
    \     Figure 19:  Operators\n   An rp-attribute can have many methods defined\
    \ for it.  Some of the\n   methods may even have the same name, in which case\
    \ their arguments\n   are of different types.  If the argument list is followed\
    \ by \"...\",\n   the method takes a variable number of arguments.  In this case,\
    \ the\n   actual arguments after the Nth argument are of type <type-N>.\n   Arguments\
    \ are strongly typed.  A type of an argument can be one of\n   the predefined\
    \ types or one of the dictionary defined types.  The\n   predefined type names\
    \ are listed in Figure 20.  The integer and the\n   real types can be followed\
    \ by a lower and an upper bound to specify\n   the set of valid values of the\
    \ argument.  The range specification is\n   optional.  We use the ANSI C language\
    \ conventions for representing\n   integer, real and string values.  The enum\
    \ type is followed by a list\n   of RPSL names which are the valid values of the\
    \ type.  The boolean\n   type can take the values true or false.  as_number, ipv4_address,\n\
    \   address_prefix and dns_name types are as in Section 2.  filter type\n   is\
    \ a policy filter as in Section 6.\n      integer[lower, upper]              as_number\n\
    \      real[lower, upper]                 ipv4_address\n      enum[name, name,\
    \ ...]              address_prefix\n      string                             address_prefix_range\n\
    \      boolean                            dns_name\n      rpsl_word          \
    \                filter\n      free_text                          as_set_name\n\
    \      email                              route_set_name\n                   \
    \  Figure 20:  Predefined Types\n   The typedef attribute specifies a dictionary\
    \ defined type.  Its\n   syntax is as follows:\n      typedef: <name> union <type-1>,\
    \ ... , <type-N>\n             | <name> list [<min_elems>:<max_elems>] of <type>\n\
    \   where <name> is the name of the type being defined and <type-M> is\n   another\
    \ type name, either predefined or dictionary defined.  In the\n   first form,\
    \ the type defined is either of the types <type-1> through\n   <type-N> (analogous\
    \ to unions in C[12]).  In the second form, the\n   type defined is a list type\
    \ where the list elements are of <type> and\n   the list contains at least <min_elems>\
    \ and at most <max_elems>\n   elements.  The size specification is optional. \
    \ In this case, there\n   is no restriction in the number of list elements.  A\
    \ value of a list\n   type is represented as a sequence of elements separated\
    \ by the\n   character \",\" and enclosed by the characters \"{\" and \"}\".\n\
    \   A protocol attribute of the dictionary class defines a protocol and a\n  \
    \ set of peering options for that protocol (which are used in inet-rtr\n   class\
    \ in Section 9).  Its syntax is as follows:\n      protocol: <name>\n        \
    \ MANDATORY | OPTIONAL <option-1>(<type-1-1>, ...,\n                         \
    \                <type-1-N1> [, \"...\"])\n         ...\n         MANDATORY |\
    \ OPTIONAL <option-M>(<type-M-1>, ...,\n                                     \
    \    <type-M-NM> [, \"...\"])\n   where <name> is the name of the protocol; MANDATORY\
    \ and OPTIONAL are\n   keywords; and <option-i> is a peering option for this protocol,\n\
    \   taking Ni many arguments.  The syntax and semantics of the arguments\n   are\
    \ as in the rp-attribute.  If the keyword MANDATORY is used the\n   option is\
    \ mandatory and needs to be specified for each peering of\n   this protocol. \
    \ If the keyword OPTIONAL is used the option can be\n   skipped.\n"
- title: 7.1 Initial RPSL Dictionary and Example Policy Actions and Filters
  contents:
  - '7.1 Initial RPSL Dictionary and Example Policy Actions and Filters

    '
- title: 'dictionary:   RPSL'
  contents:
  - 'dictionary:   RPSL

    '
- title: 'rp-attribute: # preference, smaller values represent higher preferences'
  contents:
  - "rp-attribute: # preference, smaller values represent higher preferences\n   \
    \           pref\n              operator=(integer[0, 65535])\n"
- title: 'rp-attribute: # BGP multi_exit_discriminator attribute'
  contents:
  - "rp-attribute: # BGP multi_exit_discriminator attribute\n              med\n \
    \             operator=(integer[0, 65535])\n              # to set med to the\
    \ IGP metric: med = igp_cost;\n              operator=(enum[igp_cost])\n"
- title: 'rp-attribute: # BGP destination preference attribute (dpa)'
  contents:
  - "rp-attribute: # BGP destination preference attribute (dpa)\n              dpa\n\
    \              operator=(integer[0, 65535])\n"
- title: 'rp-attribute: # BGP aspath attribute'
  contents:
  - "rp-attribute: # BGP aspath attribute\n              aspath\n              # prepends\
    \ AS numbers from last to first order\n              prepend(as_number, ...)\n"
- title: 'typedef:      # a community value in RPSL is either'
  contents:
  - "typedef:      # a community value in RPSL is either\n              #  - a 4 byte\
    \ integer\n              #  - internet, no_export, no_advertise (see RFC-1997)\n\
    \              #  - two 2-byte integers to be concatanated eg. {3561,70}\n   \
    \           community_elm union\n              integer[1, 4294967200],\n     \
    \         enum[internet, no_export, no_advertise],\n              list[2:2] of\
    \ integer[0, 65535]\n"
- title: 'typedef:      # list of community values { 40, no_export, {3561,70}}'
  contents:
  - "typedef:      # list of community values { 40, no_export, {3561,70}}\n      \
    \        community_list\n              list of community_elm\n"
- title: 'rp-attribute: # BGP community attribute'
  contents:
  - "rp-attribute: # BGP community attribute\n              community\n          \
    \    # set to a list of communities\n              operator=(community_list)\n\
    \              # order independent equality comparison\n              operator==(community_list)\n\
    \              # append community values\n              operator.=(community_elm)\n\
    \              append(community_elm, ...)\n              # delete community values\n\
    \              delete(community_elm, ...)\n              # a filter: true if one\
    \ of community values is contained\n              contains(community_elm, ...)\n\
    \              # shortcut to contains: community(no_export, {3561,70})\n     \
    \         operator()(community_elm, ...)\n"
- title: 'rp-attribute: # next hop router in a static route'
  contents:
  - "rp-attribute: # next hop router in a static route\n              next-hop\n \
    \             operator=(ipv4_address)       # a router address\n             \
    \ operator=(enum[self])         # router's own address\n"
- title: 'rp-attribute: # cost of a static route'
  contents:
  - "rp-attribute: # cost of a static route\n              cost\n              operator=(integer[0,\
    \ 65535])\n"
- title: 'protocol: BGP4'
  contents:
  - "protocol: BGP4\n          # as number of the peer router\n          MANDATORY\
    \ asno(as_number)\n          # enable flap damping\n          OPTIONAL flap_damp()\n\
    \          OPTIONAL flap_damp(integer[0,65535],# penalty per flap\n          \
    \                   integer[0,65535],\n                                # penalty\
    \ value for supression\n                             integer[0,65535],# penalty\
    \ value for reuse\n                             integer[0,65535],# halflife in\
    \ secs when up\n                             integer[0,65535],\n             \
    \                   # halflife in secs when down\n                           \
    \  integer[0,65535])# maximum penalty\n"
- title: 'protocol: OSPF'
  contents:
  - 'protocol: OSPF

    '
- title: 'protocol: RIP'
  contents:
  - 'protocol: RIP

    '
- title: 'protocol: IGRP'
  contents:
  - 'protocol: IGRP

    '
- title: 'protocol: IS-IS'
  contents:
  - 'protocol: IS-IS

    '
- title: 'protocol: STATIC'
  contents:
  - 'protocol: STATIC

    '
- title: 'protocol: RIPng'
  contents:
  - 'protocol: RIPng

    '
- title: 'protocol: DVMRP'
  contents:
  - 'protocol: DVMRP

    '
- title: 'protocol: PIM-DM'
  contents:
  - 'protocol: PIM-DM

    '
- title: 'protocol: PIM-SM'
  contents:
  - 'protocol: PIM-SM

    '
- title: 'protocol: CBT'
  contents:
  - 'protocol: CBT

    '
- title: 'protocol: MOSPF'
  contents:
  - "protocol: MOSPF\n                     Figure 21:  RPSL Dictionary\n   Figure\
    \ 21 shows the initial RPSL dictionary.  It has seven rp-\n   attributes: pref\
    \ to assign local preference to the routes accepted;\n   med to assign a value\
    \ to the MULTI_EXIT_DISCRIMINATOR BGP attribute;\n   dpa to assign a value to\
    \ the DPA BGP attribute; aspath to prepend a\n   value to the AS_PATH BGP attribute;\
    \ community to assign a value to or\n   to check the value of the community BGP\
    \ attribute; next-hop to assign\n   next hop routers to static routes; and cost\
    \ to assign a cost to\n   static routes.  The dictionary defines two types: community_elm\
    \ and\n   community_list.  community_elm type is either a 4-byte unsigned\n  \
    \ integer, or one of the keywords no_export or no_advertise (defined in\n   [7]),\
    \ or a list of two 2-byte unsigned integers in which case the two\n   integers\
    \ are concatenated to form a 4-byte integer.  (The last form\n   is often used\
    \ in the Internet to partition the community number\n   space.  A provider uses\
    \ its AS number as the first two bytes, and\n   assigns a semantics of its choice\
    \ to the last two bytes.)\n   The initial dictionary (Figure 21) defines only\
    \ options for the\n   Border Gateway Protocol: asno and flap_damp.  The mandatory\
    \ asno\n   option is the AS number of the peer router.  The optional flap_damp\n\
    \   option instructs the router to damp route flaps[19] when importing\n   routes\
    \ from the peer router.\n   It can be specified with or without parameters.  If\
    \ parameters are\n   missing, they default to:\n      flap_damp(1000, 2000, 750,\
    \ 900, 900, 20000)\n   That is, a penalty of 1000 is assigned at each route flap,\
    \ the route\n   is suppressed when penalty reaches 2000.  The penalty is reduced\
    \ in\n   half after 15 minutes (900 seconds) of stability regardless of\n   whether\
    \ the route is up or down.  A supressed route is reused when\n   the penalty falls\
    \ below 750.  The maximum penalty a route can be\n   assigned is 20,000 (i.e.\
    \ the maximum suppress time after a route\n   becomes stable is about 75 minutes).\
    \  These parameters are consistent\n   with the default flap damping parameters\
    \ in several routers.\n   Policy Actions and Filters Using RP-Attributes\n   The\
    \ syntax of a policy action or a filter using an rp-attribute x is\n   as follows:\n\
    \       x.method(arguments)\n       x \"op\" argument\n   where method is a method\
    \ and \"op\" is an operator method of the rp-\n   attribute x.  If an operator\
    \ method is used in specifying a composite\n   policy filter, it evaluates earlier\
    \ than the composite policy filter\n   operators (i.e. AND, OR, NOT, and implicit\
    \ or operator).\n   The pref rp-attribute can be assigned a positive integer as\
    \ follows:\n      pref = 10;\n   The med rp-attribute can be assigned either a\
    \ positive integer or the\n   word \"igp_cost\" as follows:\n      med = 0;\n\
    \      med = igp_cost;\n   The dpa rp-attribute can be assigned a positive integer\
    \ as follows:\n      dpa = 100;\n   The BGP community attribute is list-valued,\
    \ that is it is a list of\n   4-byte integers each representing a \"community\"\
    .  The following\n   examples demonstrate how to add communities to this rp-attribute:\n\
    \      community .= 100;\n      community .= NO_EXPORT;\n      community .= {3561,10};\n\
    \   In the last case, a 4-byte integer is constructed where the more\n   significant\
    \ two bytes equal 3561 and the less significant two bytes\n   equal 10.  The following\
    \ examples demonstrate how to delete\n   communities from the community rp-attribute:\n\
    \      community.delete(100, NO_EXPORT, {3561,10});\n   Filters that use the community\
    \ rp-attribute can be defined as\n   demonstrated by the following examples:\n\
    \      community.contains(100, NO_EXPORT, {3561,10});\n      community(100, NO_EXPORT,\
    \ {3561,10});             # shortcut\n   The community rp-attribute can be set\
    \ to a list of communities as\n   follows:\n      community = {100, NO_EXPORT,\
    \ {3561,10}, 200};\n      community = {};\n   In this first case, the community\
    \ rp-attribute contains the\n   communities 100, NO_EXPORT, {3561,10}, and 200.\
    \  In the latter case,\n   the community rp-attribute is cleared.  The community\
    \ rp-attribute\n   can be compared against a list of communities as follows:\n\
    \      community == {100, NO_EXPORT, {3561,10}, 200};   # exact match\n   To influence\
    \ the route selection, the BGP as_path rp-attribute can be\n   made longer by\
    \ prepending AS numbers to it as follows:\n      aspath.prepend(AS1);\n      aspath.prepend(AS1,\
    \ AS1, AS1);\n   The following examples are invalid:\n      med = -50;       \
    \              # -50 is not in the range\n      med = igp;                   \
    \  # igp is not one of the enum values\n      med.assign(10);                #\
    \ method assign is not defined\n      community.append({AS3561,20}); # the first\
    \ argument should be 3561\n   Figure 22 shows a more advanced example using the\
    \ rp-attribute\n   community.  In this example, AS3561 bases its route selection\n\
    \   preference on the community attribute.  Other ASes may indirectly\n   affect\
    \ AS3561's route selection by including the appropriate\n   communities in their\
    \ route announcements.\n    aut-num: AS1\n    export: to AS2 action community.={3561,90};\n\
    \            to AS3 action community.={3561,80};\n            announce AS1\n \
    \   as-set: AS3561:AS-PEERS\n    members: AS2, AS3\n    aut-num: AS3561\n    import:\
    \ from AS3561:AS-PEERS\n            action pref = 10;\n            accept community.contains({3561,90})\n\
    \    import: from AS3561:AS-PEERS\n            action pref = 20;\n           \
    \ accept community.contains({3561,80})\n    import: from AS3561:AS-PEERS\n   \
    \         action pref = 20;\n            accept community.contains({3561,70})\n\
    \    import: from AS3561:AS-PEERS\n            action pref = 0;\n            accept\
    \ ANY\n           Figure 22:  Policy example using the community rp-attribute.\n"
- title: 8 Advanced route Class
  contents:
  - '8 Advanced route Class

    '
- title: 8.1 Specifying Aggregate Routes
  contents:
  - "8.1 Specifying Aggregate Routes\n   The components, aggr-bndry, aggr-mtd, export-comps,\
    \ inject, and holes\n   attributes are used for specifying aggregate routes [9].\
    \  A route\n   object specifies an aggregate route if any of these attributes,\
    \ with\n   the exception of inject, is specified.  The origin attribute for an\n\
    \   aggregate route is the AS performing the aggregation, i.e. the\n   aggregator\
    \ AS. In this section, we used the term \"aggregate\" to refer\n   to the route\
    \ generated, the term \"component\" to refer to the routes\n   used to generate\
    \ the path attributes of the aggregate, and the term\n   \"more specifics\" to\
    \ refer to any route which is a more specific of\n   the aggregate regardless\
    \ of whether it was used to form the path\n   attributes.\n   The components attribute\
    \ defines what component routes are used to\n   form the aggregate.  Its syntax\
    \ is as follows:\n      components: [ATOMIC] [[protocol <protocol>] <filter>\n\
    \                            [protocol <protocol> <filter> ...]]\n   where <protocol>\
    \ is a routing protocol name such as BGP, OSPF or RIP\n   (valid names are defined\
    \ in the dictionary) and <filter> is a policy\n   expression.  The routes that\
    \ match one of these filters and are\n   learned from the corresponding protocol\
    \ are used to form the\n   aggregate.  If <protocol> is omitted, it defaults to\
    \ any protocol.\n   <filter> implicitly contains an \"AND\" term with the more\
    \ specifics of\n   the aggregate so that only the component routes are selected.\
    \  If the\n   keyword ATOMIC is used, the aggregation is done atomically [9].\
    \  If a\n   <filter> is not specified it defaults to more specifics.  If the\n\
    \   components attribute is missing, all more specifics without the\n   ATOMIC\
    \ keyword is used.\n      route: 128.8.0.0/15\n      origin: AS1\n      components:\
    \ <^AS2>\n      route: 128.8.0.0/15\n      origin: AS1\n      components: protocol\
    \ BGP  {128.8.0.0/16^+}\n                  protocol OSPF {128.9.0.0/16^+}\n  \
    \                   Figure 23:  Two aggregate route objects.\n   Figure 23 shows\
    \ two route objects.  In the first example, more\n   specifics of 128.8.0.0/15\
    \ with AS paths starting with AS2 are\n   aggregated.  In the second example,\
    \ some routes learned from BGP and\n   some routes learned form OSPF are aggregated.\n\
    \   The aggr-bndry attribute is an expression over AS numbers and sets\n   using\
    \ operators AND, OR, and NOT.  The result defines the set of ASes\n   which form\
    \ the aggregation boundary.  If the aggr-bndry attribute is\n   missing, the origin\
    \ AS is the sole aggregation boundary.  Outside the\n   aggregation boundary,\
    \ only the aggregate is exported and more\n   specifics are suppressed.  However,\
    \ within the boundary, the more\n   specifics are also exchanged.\n   The aggr-mtd\
    \ attribute specifies how the aggregate is generated.  Its\n   syntax is as follow:\n\
    \     aggr-mtd: inbound\n             | outbound [<as-expression>]\n   where <as-expression>\
    \ is an expression over AS numbers and sets using\n   operators AND, OR, and NOT.\
    \ If <as-expression> is missing, it\n   defaults to AS-ANY. If outbound aggregation\
    \ is specified, the more\n   specifics of the aggregate will be present within\
    \ the AS and the\n   aggregate will be formed at all inter-AS boundaries with\
    \ ASes in\n   <as-expression> before export, except for ASes that are within the\n\
    \   aggregating boundary (i.e.  aggr-bndry is enforced regardless of\n   <as-expression>).\
    \  If inbound aggregation is specified, the aggregate\n   is formed at all inter-AS\
    \ boundaries prior to importing routes into\n   the aggregator AS. Note that <as-expression>\
    \ can not be specified\n   with inbound aggregation.  If aggr-mtd attribute is\
    \ missing, it\n   defaults to \"outbound AS-ANY\".\n      route:      128.8.0.0/15\
    \            route:      128.8.0.0/15\n      origin:     AS1                 \
    \    origin:     AS2\n      components: {128.8.0.0/15^-}        components: {128.8.0.0/15^-}\n\
    \      aggr-bndry: AS1 OR AS2              aggr-bndry: AS1 OR AS2\n      aggr-mtd:\
    \   outbound AS-ANY         aggr-mtd:   outbound AS-ANY\n                Figure\
    \ 24:  Outbound multi-AS aggregation example.\n   Figure 24 shows an example of\
    \ an outbound aggregation.  In this\n   example, AS1 and AS2 are coordinating\
    \ aggregation and announcing only\n   the less specific 128.8.0.0/15 to outside\
    \ world, but exchanging more\n   specifics between each other.  This form of aggregation\
    \ is useful\n   when some of the components are within AS1 and some are within\
    \ AS2.\n   When a set of routes are aggregated, the intent is to export only the\n\
    \   aggregate route and suppress exporting of the more specifics outside\n   the\
    \ aggregation boundary.  However, to satisfy certain policy and\n   topology constraints\
    \ (e.g. a multi-homed component), it is often\n   required to export some of the\
    \ components.  The export-comps\n   attribute equals an RPSL filter that matches\
    \ the more specifics that\n   need to be exported outside the aggregation boundary.\
    \  If this\n   attribute is missing, more specifics are not exported outside the\n\
    \   aggregation boundary.  Note that, the export-comps filter contains an\n  \
    \ implicit \"AND\" term with the more specifics of the aggregate.\n   Figure 25\
    \ shows an example of an outbound aggregation.  In this\n   example, the more\
    \ specific 128.8.8.0/24 is exported outside AS1 in\n   addition to the aggregate.\
    \  This is useful, when 128.8.8.0/24 is\n   multi-homed site to AS1 with some\
    \ other AS.\n      route:      128.8.0.0/15\n      origin:     AS1\n      components:\
    \ {128.8.0.0/15^-}\n      aggr-mtd:   outbound AS-ANY\n      export-comps: {128.8.8.0/24}\n\
    \             Figure 25:  Outbound aggregation with export exception.\n   The\
    \ inject attribute specifies which routers perform the aggregation\n   and when\
    \ they perform it.  Its syntax is as follow:\n     inject: [at <router-expression>]\
    \ ...\n             [action <action>]\n             [upon <condition>]\n   where\
    \ <action> is an action specification (see Section 6.1.2),\n   <condition> is\
    \ a boolean expression described below, and<router-\n   expression> is an expression\
    \ over router IP addresses and DNS names\n   using operators AND, OR, and NOT.\
    \ The DNS name can only be used if\n   there is an inet-rtr object for that name\
    \ that binds the name to IP\n   addresses.\n   All routers in <router-expression>\
    \ and in the aggregator AS perform\n   the aggregation.  If a <router-expression>\
    \ is not specified, all\n   routers inside the aggregator AS perform the aggregation.\
    \  The\n   <action> specification may set path attributes of the aggregate, such\n\
    \   as assign a preferences to the aggregate.\n   The upon clause is a boolean\
    \ condition.  The aggregate is generated\n   if and only if this condition is\
    \ true.  <condition> is a boolean\n   expression using the logical operators AND\
    \ and OR (i.e. operator NOT\n   is not allowed) over:\n      HAVE-COMPONENTS {\
    \ list of prefixes }\n      EXCLUDE { list of prefixes }\n      STATIC\n   The\
    \ list of prefixes in HAVE-COMPONENTS can only be more specifics of\n   the aggregate.\
    \  It evaluates to true when all the prefixes listed are\n   present in the routing\
    \ table of the aggregating router.  The list can\n   also include prefix ranges\
    \ (i.e. using operators ^-, ^+, ^n, and ^n-\n   m).  In this case, at least one\
    \ prefix from each prefix range needs\n   to be present in the routing table for\
    \ the condition to be true.  The\n   list of prefixes in EXCLUDE can be arbitrary.\
    \  It evaluates to true\n   when none of the prefixes listed is present in the\
    \ routing table.\n   The list can also include prefix ranges, and no prefix in\
    \ that range\n   should be present in the routing table.  The keyword static always\n\
    \   evaluates to true.  If no upon clause is specified the aggregate is\n   generated\
    \ if an only if there is a component in the routing table\n   (i.e.  a more specific\
    \ that matches the filter in the components\n   attribute).\n      route:    \
    \  128.8.0.0/15\n      origin:     AS1\n      components: {128.8.0.0/15^-}\n \
    \     aggr-mtd:   outbound AS-ANY\n      inject:     at 1.1.1.1 action dpa = 100;\n\
    \      inject:     at 1.1.1.2 action dpa = 110;\n      route:      128.8.0.0/15\n\
    \      origin:     AS1\n      components: {128.8.0.0/15^-}\n      aggr-mtd:  \
    \ outbound AS-ANY\n      inject:     upon HAVE-COMPONENTS {128.8.0.0/16, 128.9.0.0/16}\n\
    \      holes:      128.8.8.0/24\n                         Figure 26:  Examples\
    \ of inject.\n   Figure 26 shows two examples.  In the first case, the aggregate\
    \ is\n   injected at two routers each one setting the dpa path attribute\n   differently.\
    \  In the second case, the aggregate is generated only if\n   both 128.8.0.0/16\
    \ and 128.9.0.0/16 are present in the routing table,\n   as opposed to the first\
    \ case where the presence of just one of them\n   is sufficient for injection.\n\
    \   The holes attribute lists the component address prefixes which are\n   not\
    \ reachable through the aggregate route (perhaps that part of the\n   address\
    \ space is unallocated).  The holes attribute is useful for\n   diagnosis purposes.\
    \  In Figure 26, the second example has a hole,\n   namely 128.8.8.0/24.  This\
    \ may be due to a customer changing\n   providers and taking this part of the\
    \ address space with it.\n"
- title: 8.1.1 Interaction with policies in aut-num class
  contents:
  - "8.1.1 Interaction with policies in aut-num class\n   An aggregate formed is announced\
    \ to other ASes only if the export\n   policies of the AS allows exporting the\
    \ aggregate.  When the\n   aggregate is formed, the more specifics are suppressed\
    \ from being\n   exported except to the ASes in aggr-bndry and except the components\n\
    \   in export-comps.  For such exceptions to happen, the export policies\n   of\
    \ the AS should explicitly allow exporting of these exceptions.\n   If an aggregate\
    \ is not formed (due to the upon clause), then the more\n   specifics of the aggregate\
    \ can be exported to other ASes, but only if\n   the export policies of the AS\
    \ allows it.  In other words, before a\n   route (aggregate or more specific)\
    \ is exported it is filtered twice,\n   once based on the route objects, and once\
    \ based on the export\n   policies of the AS.\n      route:        128.8.0.0/16\n\
    \      origin:       AS1\n      route:        128.9.0.0/16\n      origin:    \
    \   AS1\n      route:        128.8.0.0/15\n      origin:       AS1\n      aggr-bndry:\
    \   AS1 or AS2 or AS3\n      aggr-mtd:     outbound AS3 or AS4 or AS5\n      components:\
    \   {128.8.0.0/16, 128.9.0.0/16}\n      inject:       upon HAVE-COMPONENTS {128.9.0.0/16,\
    \ 128.8.0.0/16}\n      aut-num: AS1\n      export:  to AS2 announce AS1\n    \
    \  export:  to AS3 announce AS1 and not {128.9.0.0/16}\n      export:  to AS4\
    \ announce AS1\n      export:  to AS5 announce AS1\n      export:  to AS6 announce\
    \ AS1\n             Figure 27:  Interaction with policies in aut-num class.\n\
    \   In Figure 27 shows an interaction example.  By examining the route\n   objects,\
    \ the more specifics 128.8.0.0/16 and 128.9.0.0/16 should be\n   exchanged between\
    \ AS1, AS2 and AS3 (i.e.  the aggregation boundary).\n   Outbound aggregation\
    \ is done to AS4 and AS5 and not to AS3, since AS3\n   is in the aggregation boundary.\
    \  The aut-num object allows exporting\n   both components to AS2, but only the\
    \ component 128.8.0.0/16 to AS3.\n   The aggregate can only be formed if both\
    \ components are available.\n   In this case, only the aggregate is announced\
    \ to AS4 and AS5.\n   However, if one of the components is not available the aggregate\
    \ will\n   not be formed, and any available component or more specific will be\n\
    \   exported to AS4 and AS5.  Regardless of aggregation is performed or\n   not,\
    \ only the more specifics will be exported to AS6 (it is not\n   listed in the\
    \ aggr-mtd attribute).\n   When doing an inbound aggregation, configuration generators\
    \ may\n   eliminating the aggregation statements on routers where import policy\n\
    \   of the AS prohibits importing of any more specifics.\n"
- title: 8.1.2 Ambiguity resolution with overlapping aggregates
  contents:
  - "8.1.2 Ambiguity resolution with overlapping aggregates\n   When several aggregate\
    \ routes are specified and they overlap, i.e.\n   one is less specific of the\
    \ other, they must be evaluated more\n   specific to less specific order.  When\
    \ an aggregation is performed,\n   the aggregate and the components listed in\
    \ the export-comps attribute\n   are available for generating the next less specific\
    \ aggregate.  The\n   components that are not specified in the export-comps attribute\
    \ are\n   not available.  A route is exportable to an AS if it is the least\n\
    \   specific aggregate exportable to that AS or it is listed in the\n   export-comps\
    \ attribute of an exportable route.  Note that this is a\n   recursive definition.\n\
    \      route:        128.8.0.0/15\n      origin:       AS1\n      aggr-bndry:\
    \   AS1 or AS2\n      aggr-mtd:     outbound\n      inject:       upon HAVE-COMPONENTS\
    \ {128.8.0.0/16, 128.9.0.0/16}\n      route:        128.10.0.0/15\n      origin:\
    \       AS1\n      aggr-bndry:   AS1 or AS3\n      aggr-mtd:     outbound\n  \
    \    inject:       upon HAVE-COMPONENTS {128.10.0.0/16, 128.11.0.0/16}\n     \
    \ export-comps: {128.11.0.0/16}\n      route:        128.8.0.0/14\n      origin:\
    \       AS1\n      aggr-bndry:   AS1 or AS2 or AS3\n      aggr-mtd:     outbound\n\
    \      inject:       upon HAVE-COMPONENTS {128.8.0.0/15, 128.10.0.0/15}\n    \
    \  export-comps: {128.10.0.0/15}\n                  Figure 28:  Overlapping aggregations.\n\
    \   In Figure 28, AS1 together with AS2 aggregates 128.8.0.0/16 and\n   128.9.0.0/16\
    \ into 128.8.0.0/15.  Together with AS3, AS1 aggregates\n   128.10.0.0/16 and\
    \ 128.11.0.0/16 into 128.10.0.0/15.  But altogether\n   they aggregate these four\
    \ routes into 128.8.0.0/14.  Assuming all\n   four components are available, a\
    \ router in AS1 for an outside AS, say\n   AS4, will first generate 128.8.0.0/15\
    \ and 128.10.0.0/15.  This will\n   make 128.8.0.0/15, 128.10.0.0/15 and its exception\
    \ 128.11.0.0/16\n   available for generating 128.8.0.0/14.  The router will then\
    \ generate\n   128.8.0.0/14 from these three routes.  Hence for AS4, 128.8.0.0/14\n\
    \   and its exception 128.10.0.0/15 and its exception 128.11.0.0/16 will\n   be\
    \ exportable.\n   For AS2, a router in AS1 will only generate 128.10.0.0/15. \
    \ Hence,\n   128.10.0.0/15 and its exception 128.11.0.0/16 will be exportable.\n\
    \   Note that 128.8.0.0/16 and 128.9.0.0/16 are also exportable since\n   they\
    \ did not participate in an aggregate exportable to AS2.\n   Similarly, for AS3,\
    \ a router in AS1 will only generate 128.8.0.0/15.\n   In this case 128.8.0.0/15,\
    \ 128.10.0.0/16, 128.11.0.0/16 are\n   exportable.\n"
- title: 8.2 Specifying Static Routes
  contents:
  - "8.2 Specifying Static Routes\n   The inject attribute can be used to specify\
    \ static routes by using\n   \"upon static\" as the condition:\n     inject: [at\
    \ <router>] ...\n             [action <action>]\n             upon static\n  \
    \ In this case, the <router> executes the <action> and injects the\n   route to\
    \ the interAS routing system statically.  <action> may set\n   certain route attributes\
    \ such as a next-hop router or a cost.\n   In the following example, the router\
    \ 7.7.7.1 injects the route\n   128.7.0.0/16.  The next-hop routers (in this example,\
    \ there are two\n   next-hop routers) for this route are 7.7.7.2 and 7.7.7.3 and\
    \ the\n   route has a cost of 10 over 7.7.7.2 and 20 over 7.7.7.3.\n      route:\
    \  128.7.0.0/16\n      origin: AS1\n      inject: at 7.7.7.1 action next-hop =\
    \ 7.7.7.2; cost = 10; upon static\n      inject: at 7.7.7.1 action next-hop =\
    \ 7.7.7.3; cost = 20; upon static\n"
- title: 9 inet-rtr Class
  contents:
  - "9 inet-rtr Class\n   Routers are specified using the inet-rtr class.  The attributes\
    \ of\n   the inet-rtr class are shown in Figure 29.  The inet-rtr attribute is\n\
    \   a valid DNS name of the router described.  Each alias attribute, if\n   present,\
    \ is a canonical DNS name for the router.  The local-as\n   attribute specifies\
    \ the AS number of the AS which owns/operates this\n   router.\n     Attribute\
    \  Value                    Type\n     inet-rtr   <dns-name>               mandatory,\
    \ single-valued,\n                                           class key\n     alias\
    \      <dns-name>               optional, multi-valued\n     local-as   <as-number>\
    \              mandatory, single-valued\n     ifaddr     see description in text\
    \  mandatory, multi-valued\n     peer       see description in text  optional,\
    \ multi-valued\n                      Figure 29:  inet-rtr Class Attributes\n\
    \   The value of an ifaddr attribute has the following syntax:\n      <ipv4-address>\
    \ masklen <integer> [action <action>]\n   The IP address and the mask length are\
    \ mandatory for each interface.\n   Optionally an action can be specified to set\
    \ other parameters of this\n   interface.\n   Figure 30 presents an example inet-rtr\
    \ object.  The name of the\n   router is \"amsterdam.ripe.net\".  \"amsterdam1.ripe.net\"\
    \ is a canonical\n   name for the router.  The router is connected to 4 networks.\
    \  Its IP\n   addresses and mask lengths in those networks are specified in the\n\
    \   ifaddr attributes.\n    inet-rtr: Amsterdam.ripe.net\n    alias:    amsterdam1.ripe.net\n\
    \    local-as: AS3333\n    ifaddr:   192.87.45.190 masklen 24\n    ifaddr:   192.87.4.28\
    \   masklen 24\n    ifaddr:   193.0.0.222   masklen 27\n    ifaddr:   193.0.0.158\
    \   masklen 27\n    peer:     BGP4 192.87.45.195 asno(AS3334), flap_damp()\n \
    \                          Figure 30:  inet-rtr Objects\n   Each peer attribute,\
    \ if present, specifies a protocol peering with\n   another router.  The value\
    \ of a peer attribute has the following\n   syntax:\n      <protocol> <ipv4-address>\
    \ <options>\n   where <protocol> is a protocol name, <ipv4-address> is the IP\
    \ address\n   of the peer router, and <options> is a comma separated list of\n\
    \   peering options for <protocol>.  Possible protocol names and\n   attributes\
    \ are defined in the dictionary (please see Section 7).  In\n   the above example,\
    \ the router has a BGP peering with the router\n   192.87.45.195 in AS3334 and\
    \ turns the flap damping on when importing\n   routes from this router.\n"
- title: 10 Security Considerations
  contents:
  - "10 Security Considerations\n   This document describes RPSL, a language for expressing\
    \ routing\n   policies.  The language defines a maintainer (mntner class) object\n\
    \   which is the entity which controls or \"maintains\" the objects stored\n \
    \  in a database expressed by RPSL. Requests from maintainers can be\n   authenticated\
    \ with various techniques as defined by the \"auth\"\n   attribute of the maintainer\
    \ object.\n   The exact protocols used by IRR's to communicate RPSL objects is\n\
    \   beyond the scope of this document, but it is envisioned that several\n   techniques\
    \ may be used, ranging from interactive query/update\n   protocols to store and\
    \ forward protocols similar to or based on\n   electronic mail (or even voice\
    \ telephone calls).  Regardless of which\n   protocols are used in a given situation,\
    \ it is expected that\n   appropriate security techniques such as IPSEC, TLS or\
    \ PGP/MIME will\n   be utilized.\n"
- title: 11 Acknowledgements
  contents:
  - "11 Acknowledgements\n   We would like to thank Jessica Yu, Randy Bush, Alan Barrett,\
    \ David\n   Kessens, Bill Manning, Sue Hares, Ramesh Govindan, Kannan Varadhan,\n\
    \   Satish Kumar, Craig Labovitz, Rusty Eddy, David J. LeRoy, David\n   Whipple,\
    \ Jon Postel, Deborah Estrin, Elliot Schwartz, Joachim\n   Schmitz, Mark Prior,\
    \ Tony Przygienda, David Woodgate, and the\n   participants of the IETF RPS Working\
    \ Group for various comments and\n   suggestions.\n"
- title: References
  contents:
  - "References\n    [1] Internet Routing Registry. Procedures.\n        http://www.ra.net/RADB.tools.docs/,\n\
    \        http://www.ripe.net/db/doc.html.\n    [2] Alaettinouglu, C., Meyer, D.,\
    \ and J.  Schmitz, \"Application of\n        Routing Policy Specification Language\
    \ (RPSL) on the Internet\",\n        Work in Progress.\n    [3] T.  Bates. Specifying\
    \ an `Internet Router' in the Routing\n        Registry.  Technical Report RIPE-122,\
    \ RIPE, RIPE NCC, Amsterdam,\n        Netherlands, October 1994.\n    [4] T. \
    \ Bates, E.  Gerich, L. Joncheray, J-M. Jouanigot, D.\n        Karrenberg, M.\
    \  Terpstra, and J.  Yu.  Representation of IP\n        Routing Policies in a\
    \ Routing Registry.  Technical Report ripe-\n        181, RIPE, RIPE NCC, Amsterdam,\
    \ Netherlands, October 1994.\n    [5] Bates, T., Gerich, E., Joncheray, L., Jouanigot,\
    \ J.M.,\n        Karrenberg, D., Terpstra, M., and J.  Yu, \"Representation of\
    \ IP\n        Routing Policies in a Routing Registry,\" RFC 1786, March 1995.\n\
    \    [6] T. Bates, J-M. Jouanigot, D. Karrenberg, P. Lothberg, and\n        M.\
    \ Terpstra.  Representation of IP Routing Policies in the RIPE\n        Database.\
    \  Technical Report ripe-81, RIPE, RIPE NCC, Amsterdam,\n        Netherlands,\
    \ February 1993.\n    [7] Chandra, R., Traina, P., and T. Li, \"BGP Communities\
    \ Attribute,\"\n        RFC 1997, August 1996.\n    [8] Crocker, D., \"Standard\
    \ for the format of ARPA Internet text\n        messages, STD 11, RFC 822, August\
    \ 1982.\n    [9] V.  Fuller, T.  Li, J. Yu, and K. Varadhan.  Classless Inter-\n\
    \        Domain Routing (CIDR): an Address Assignment and Aggregation\n      \
    \  Strategy, 1993.\n    [10] D. Karrenberg and T. Bates.  Description of Inter-AS\
    \ Networks\n         in the RIPE Routing Registry.  Technical Report RIPE-104,\
    \ RIPE,\n         RIPE NCC, Amsterdam, Netherlands, December 1993.\n    [11] D.\
    \  Karrenberg and M.  Terpstra.  Authorisation and\n         Notification of Changes\
    \ in the RIPE Database. Technical Report\n         ripe-120, RIPE, RIPE NCC, Amsterdam,\
    \ Netherlands, October 1994.\n    [12] B.  W.  Kernighan and D.  M.  Ritchie.\
    \  The C Programming\n         Language. Prentice-Hall, 1978.\n    [13] Kessens,\
    \ D., Woeber, W., and D. Conrad, \"RIDE referencing\",\n         Work in Progress.\n\
    \    [14] A.  Lord and M.  Terpstra.  RIPE Database Template for\n         Networks\
    \ and Persons. Technical Report ripe-119, RIPE, RIPE\n         NCC, Amsterdam,\
    \ Netherlands, October 1994.\n    [15] A.  M. R.  Magee.  RIPE NCC Database Documentation.\
    \  Technical\n         Report RIPE-157, RIPE, RIPE NCC, Amsterdam, Netherlands,\
    \ May\n         1997.\n    [16] Mockapetris, P., \"Domain names - concepts and\
    \ facilities,\"\n         STD 13, RFC 1034, November 1987.\n    [17] Y.  Rekhter.\
    \  Inter-Domain Routing Protocol (IDRP).  Journal\n         of Internetworking\
    \ Research and Experience, 4:61--80, 1993.\n    [18] Rekhter, Y., and T. Li, \"\
    A Border Gateway Protocol 4 (BGP-4),\"\n         RFC 1771, March 1995.\n    [19]\
    \ Villamizar, C., Chandra, R., and R. Govindan, \"BGP Route\n         Flap Damping\"\
    , Work in Progress.\n"
- title: A Routing Registry Sites
  contents:
  - "A Routing Registry Sites\n   The set of routing registries as of November 1996\
    \ are RIPE, RADB,\n   CANet, MCI and ANS. You may contact one of these registries\
    \ to find\n   out the current list of registries.\n"
- title: B Authors' Addresses
  contents:
  - "B Authors' Addresses\n   Cengiz Alaettinoglu\n   USC Information Sciences Institute\n\
    \   4676 Admiralty Way, Suite 1001\n   Marina del Rey, CA  90292\n   EMail: cengiz@isi.edu\n\
    \   Tony Bates\n   Cisco Systems, Inc.\n   170 West Tasman Drive\n   San Jose,\
    \ CA 95134\n   EMail: tbates@cisco.com\n   Elise Gerich\n   At Home Network\n\
    \   385 Ravendale Drive\n   Mountain View, CA 94043\n   EMail: epg@home.net\n\
    \   Daniel Karrenberg\n   RIPE Network Coordination Centre (NCC)\n   Kruislaan\
    \ 409\n   NL-1098 SJ Amsterdam\n   Netherlands\n   EMail: dfk@ripe.net\n   David\
    \ Meyer\n   University of Oregon\n   Eugene, OR 97403\n   EMail: meyer@antc.uoregon.edu\n\
    \   Marten Terpstra\n   c/o Bay Networks, Inc.\n   2 Federal St\n   Billerica\
    \ MA 01821\n   EMail: marten@BayNetworks.com\n   Curtis Villamizar\n   ANS\n \
    \  EMail: curtis@ans.net\n"
- title: C  Full Copyright Statement
  contents:
  - "C  Full Copyright Statement\n   Copyright (C) The Internet Society (1998).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
