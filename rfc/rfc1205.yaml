- title: __initial_text__
  contents:
  - '                         5250 Telnet Interface

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This RFC is being distributed in order to document the\
    \ interface to\n   the IBM 5250 Telnet implementation.  This information is being\n\
    \   provided for hosts on the Internet that want to support the 5250 work\n  \
    \ station data stream within the Telnet protocol.  This memo provides\n   information\
    \ for the Internet community.  It does not specify any\n   standard.  Distribution\
    \ of this memo is unlimited.\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This RFC describes the interface to the IBM 5250 Telnet\n\
    \   implementation.  The purpose of this memo is to describe the details\n   of\
    \ the interface so that a person wanting to implement a client\n   Telnet which\
    \ emulates an IBM 5250 work station would be able to do\n   so.  This memo does\
    \ not describe all of the 5250 commands, aid codes,\n   and other information\
    \ specific to the 5250 data stream.  That\n   information is contained in the\
    \ IBM 5250 Information Display System,\n   Functions Reference Manual, IBM publication\
    \ number SA21-9247.\n   Corrections and additions to this manual are documented\
    \ in this RFC\n   in section 5.\n"
- title: 2.  Telnet Options
  contents:
  - "2.  Telnet Options\n   No new Telnet options are defined for 5250 mode of operation.\n\
    \   However, to enable 5250 mode, both the client and server must agree\n   to\
    \ at least support the Binary, End-Of-Record (EOR), and Terminal-\n   Type Telnet\
    \ options.  The complete list of 5250 terminal types is\n   maintained in the\
    \ Assigned Numbers RFC and includes the following:\n     IBM-5555-C01   24 x 80\
    \ Double-Byte Character Set color display\n     IBM-5555-B01   24 x 80 Double-Byte\
    \ Character Set (DBCS)\n     IBM-3477-FC    27 x 132 color display\n     IBM-3477-FG\
    \    27 x 132 monochrome display\n     IBM-3180-2     27 x 132 monochrome display\n\
    \     IBM-3179-2     24 x 80 color display\n     IBM-3196-A1    24 x 80 monochrome\
    \ display\n     IBM-5292-2     24 x 80 color display\n     IBM-5291-1     24 x\
    \ 80 monochrome display\n     IBM-5251-11    24 x 80 monochrome display\n   An\
    \ example of a typical negotiation process to establish 5250 mode of\n   operation\
    \ is shown below.  In this example, the server initiates the\n   negotiation by\
    \ sending the DO TERMINAL-TYPE request.\n    Server: IAC DO TERMINAL-TYPE\n  \
    \  Client: IAC WILL TERMINAL-TYPE\n    Server: IAC SB TERMINAL-TYPE SEND IAC SE\n\
    \    Client: IAC SB TERMINAL-TYPE IS IBM-5251-11 IAC SE\n    (The client has specified\
    \ its terminal-type is an IBM-5251-11)\n    Server: IAC DO END-OF-RECORD\n   \
    \ Client: IAC WILL END-OF-RECORD\n    Server: IAC WILL END-OF-RECORD\n    Client:\
    \ IAC DO END-OF-RECORD\n    (The server and client have both agreed to transmit\
    \ EORs)\n    Server: IAC DO TRANSMIT-BINARY\n    Client: IAC WILL TRANSMIT-BINARY\n\
    \    Server: IAC WILL TRANSMIT-BINARY\n    Client: IAC DO TRANSMIT-BINARY\n  \
    \  (The server and client have both agreed to binary transmission)\n"
- title: 3.  Data Stream Format
  contents:
  - "3.  Data Stream Format\n   The actual data stream that is exchanged between the\
    \ client and\n   server is composed of a header followed by the 5250 work station\
    \ data\n   stream.  For information about the 5250 work station data stream\n\
    \   refer to the IBM 5250 Information Display System, Functions Reference\n  \
    \ Manual (SA21-9247).  The header which prefixes the 5250 data stream\n   was\
    \ originally designed for the 5250 Display Station Pass-Through\n   (DSPT) application.\
    \  5250 DSPT is an application similar to Telnet\n   which runs on the IBM AS/400,\
    \ System/36, and System/38 over an SNA\n   network.  This header is designed to\
    \ be variable in length and is\n   composed of two parts.  The first, fixed part\
    \ is always 6 octets long\n   and has the following format:\n      0         \
    \          1                   2                   3\n      0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |     Logical Record Length     |       Record Type             |\n    \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n     |  \
    \      Reserved               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Logical\
    \ Record Length:  16 bits\n      This field indicates the length, in octets, of\
    \ this logical record\n      including the header length.  The length is calculated\
    \ BEFORE\n      doubling any IAC characters in the data stream.  The length does\n\
    \      not include the <IAC><EOR> that is appended to the end of the data\n  \
    \    stream to mark the end of this logical record.  The length is\n      specified\
    \ with the most significant octet first.  For example, a\n      length of 36 (decimal)\
    \ would be specified as '0024'X.\n   Record Type:  16 bits\n      This field indicates\
    \ the SNA record type.  It should always be set\n      to '12A0'X to indicate\
    \ the General Data Stream (GDS) record type.\n   Reserved:  16 bits\n      This\
    \ field is currently not used.\n   The second part of the header is designed to\
    \ be variable in length.\n   The length of this variable part is specified in\
    \ the first octet.\n   Currently this portion of the header will always be 4 octets\
    \ long and\n   has the following format:\n      0                   1        \
    \           2                   3\n      0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \     |               |E|A| | | |S|T|H|               |               |\n    \
    \ | Var Hdr Len   |R|T| | | |R|R|L|               |    Opcode     |\n     |  \
    \             |R|N| | | |Q|Q|P|               |               |\n     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   Var Hdr Len:  8 bits\n      The length, in octets, of the variable portion\
    \ of the header.\n      Currently this is always '04'X.\n   Flags:  16 bits\n\
    \       Bit 0:      ERR     This bit is set to indicate a data stream\n      \
    \                     output error.  The negative response code\n            \
    \               is sent as data following the opcode field.\n       Bit 1:   \
    \   ATN     This bit is set to indicate that the 5250\n                      \
    \     attention key was pressed.\n       Bits 2-4:   *       These bits are reserved\
    \ (set to zero).\n       Bit 5:      SRQ     This bit is set to indicate that\
    \ the 5250\n                           System Request key was pressed.\n     \
    \  Bit 6:      TRQ     This bit is set to indicate that the 5250\n           \
    \                Test Request key was pressed.\n       Bit 7:      HLP     This\
    \ bit is set to indicate the Help in\n                           Error State function.\
    \  The error code is\n                           sent as data following the header\
    \ and is\n                           a four digit packed decimal number.  For\n\
    \                           example, an error code of '0005'X indicates\n    \
    \                       the operator attempted to type in an area of\n       \
    \                    the display that is not enabled for input.\n       Bits 8-15:\
    \  *       These bits are reserved (set to zero).\n   Opcode:  8 bits\n      This\
    \ field contains the operation code.  It is set to indicate the\n      type of\
    \ operation requested by the sender.  The following are the\n      valid values:\n\
    \         '00'X:  No Operation\n         '01'X:  Invite Operation\n         '02'X:\
    \  Output Only\n         '03'X:  Put/Get Operation\n         '04'X:  Save Screen\
    \ Operation\n         '05'X:  Restore Screen Operation\n         '06'X:  Read\
    \ Immediate Operation\n         '07'X:  Reserved\n         '08'X:  Read Screen\
    \ Operation\n         '09'X:  Reserved\n         '0A'X:  Cancel Invite Operation\n\
    \         '0B'X:  Turn On Message Light\n         '0C'X:  Turn Off Message Light\n\
    \   The actual 5250 work station data stream will immediately follow the\n   opcode\
    \ field in the header and will be terminated by the <IAC><EOR>\n   pair.  For\
    \ some operations the header will be immediately followed by\n   an <IAC><EOR>\
    \ without any 5250 work station data stream in between.\n   For example, the following\
    \ request to turn on the message light could\n   be sent by the server:\n    \
    \    000A 12A0 0000 0400 000B FFEF\n        |    |    |    | |    |  |\n     \
    \   |    |    |    | |    |  End Of Record marker\n        |    |    |    | |\
    \    |\n        |    |    |    | |    Opcode = Turn On Message Light ('0B'X)\n\
    \        |    |    |    | |\n        |    |    |    | Flags = '0000'X\n      \
    \  |    |    |    |\n        |    |    |    Variable Header Length = '04'X\n \
    \       |    |    |\n        |    |    Reserved - Set to '0000'X\n        |  \
    \  |\n        |    Record Type = General Data Stream ('12A0'X)\n        |\n  \
    \      Logical Record Length = '000A'X for this record\n   In this example the\
    \ requested operation is indicated by the opcode\n   and there is no associated\
    \ work station data stream.\n"
- title: 4.  Data Flow Examples
  contents:
  - "4.  Data Flow Examples\n   The following examples illustrate the flow of data\
    \ between the client\n   and server for some of the more common operations.  These\
    \ examples\n   are intended to show the order in which the logical records are\
    \ sent\n   between the client and server and the content of those records.  The\n\
    \   hex representation of the records which are exchanged between the\n   client\
    \ and server is shown.  The way in which a client implements the\n   various operations\
    \ will differ between implementations and those\n   details are not discussed\
    \ here.  In these examples, when the value of\n   a field is dependent on the\
    \ length of the screen data for a\n   particular logical record, it will be represented\
    \ as 'LLLL'.\n"
- title: 4.1  Query Device Example
  contents:
  - "4.1  Query Device Example\n   A Query command may be sent by the server system\
    \ in order to\n   determine the attributes of the device it is talking to.  When\
    \ a\n   client receives a Query command, it must send the Query Reply back to\n\
    \   the server.  See section 5 for a complete description of the format\n   for\
    \ the Query command and Query Reply.\n   Server: Sends Write Structured    001112A0\
    \ 00000400 000304F3 0005D970\n           Field Query command.      00FFEF\n  \
    \ Client: Responds with a Query     004712A0 00000400 00000000 88003AD9\n    \
    \       Reply, in this case,      70800600 01030000 00000000 00000000\n      \
    \     for a 3180-2.             00000000 00000001 F3F1F8F0 F0F0F202\n        \
    \                             00000061 50000100 00000018 11000000\n          \
    \                           00000000 000000FF EF\n"
- title: 4.2  Cancel Invite Example
  contents:
  - "4.2  Cancel Invite Example\n   The server will send a Cancel Invite when it needs\
    \ to reverse the\n   normal flow direction.  When a client receives a Cancel Invite,\
    \ it\n   should reply with a Cancel Invite and not send any user data until\n\
    \   the server has once again \"invited\" the work station.  A work station\n\
    \   is said to be \"invited\" when the server has sent a read command to\n   the\
    \ client.  The Cancel Invite flow is as follows:\n   Server: Sends header with\
    \ the     000A12A0 00000400 000AFFEF\n           Opcode = Cancel Invite.\n   Client:\
    \ Sends header with the     000A12A0 00000400 000AFFEF\n           Opcode = Cancel\
    \ Invite\n           to indicate that the\n           work station is no\n   \
    \        longer invited.\n"
- title: 4.3  System Request Example
  contents:
  - "4.3  System Request Example\n   The 5250 System Request operation is invoked\
    \ when a client wants to\n   interrupt the server job to perform some function.\
    \  The typical\n   scenario would be for a user to press the system request key,\
    \ or\n   whatever key is mapped to a system request key, which would cause the\n\
    \   client Telnet to initiate the following flow:\n   Client: Sends header with\
    \ the     000A12A0 00000404 0000FFEF\n           System Request bit set.\n   Note:\
    \  It is possible for a client to include user data in this\n   record following\
    \ the header.  This data would be interpreted by the\n   server as an option to\
    \ be selected from the system request menu.  If\n   this were the case, the server\
    \ would not send the system request menu\n   and the flow would continue based\
    \ on the option selected.  For this\n   example, the client does not send any\
    \ user data and the flow would\n   continue as follows:\n   Server: Sends header\
    \ with the     000A12A0 00000400 000AFFEF\n           Opcode = Cancel Invite.\n\
    \   Client: Sends header with the     000A12A0 00000400 000AFFEF\n           Opcode\
    \ = Cancel Invite\n           to indicate that the\n           work station is\
    \ no\n           longer invited.\n   Server: Sends Save (Immediate)    000C12A0\
    \ 00000400 00040402 FFEF\n           command with\n           Opcode = Save Screen.\n\
    \   Client: Sends the screen image    LLLL12A0 00000400 00040412\n           to\
    \ be saved.              <Screen Image> FFEF\n   Server: Sends System Request\
    \      LLLL12A0 00000400 0003\n           menu with                 <System Request\
    \ Menu> FFEF\n           Opcode = Put/Get.\n   Client: Sends User Input to   \
    \    LLLL12A0 00000400 0000\n           the Sys Req menu.         <User Input>\
    \ FFEF\n   Note: What happens next will depend on the System Request option\n\
    \   selected by the user.  After any System Request processing has\n   completed,\
    \ the server will continue with the following restore\n   operation:\n   Server:\
    \ Sends the saved           LLLL12A0 00000400 00050412\n           screen to be\
    \ restored,    <Saved Screen> FFEF\n           Opcode = Restore Screen.\n   (No\
    \ reply is necessary from the client)\n   Server: Sends Read Modified       000E12A0\
    \ 00000400 00010452 0000FFEF\n           Data Tag (MDT) command,\n           opcode\
    \ = Invite.\n   At this point the client would \"invite\" the workstation and\
    \ enter the\n   state that it was in prior to the System Request key being hit.\n"
- title: 5.  5250 Data Stream Enhancements
  contents:
  - "5.  5250 Data Stream Enhancements\n   This section is intended to be used as\
    \ an addendum to the IBM 5250\n   Information Display System, Functions Reference\
    \ Manual.  Described\n   here are enhancements to the 5250 data stream which are\
    \ not yet\n   documented in the current version of that manual.  The current\n\
    \   version of that manual at the time of this writing has the IBM\n   publication\
    \ number SA21-9247-6.  Also described in this section are\n   corrections to erroneous\
    \ information contained in SA21-9247-6.\n   Listed below are the specific corrections\
    \ and enhancements, with an\n   approximate page number reference to the above\
    \ manual.\n"
- title: 5.1  Errors or Inconsistencies in SA21-9247-6
  contents:
  - "5.1  Errors or Inconsistencies in SA21-9247-6\n   The Insert Cursor (IC) order\
    \ on pages 2-136 and 2-137 is incorrectly\n   listed with a value of Hex 03; the\
    \ correct value is Hex 13.\n   On page 2-137, the listed \"Restrictions\" for\
    \ the Insert Cursor,\n   Repeat to Address, and Set Buffer Address orders should\
    \ be updated to\n   describe how Row and Column values must be valid for the current\n\
    \   display screen size (either 24 x 80 or 27 x 132).\n"
- title: 5.2  Enhancements to Existing 5250 Data Stream Commands/Orders
  contents:
  - "5.2  Enhancements to Existing 5250 Data Stream Commands/Orders\n   A new flag\
    \ is added to the second byte of the Control Character on\n   page 2-40.  This\
    \ flag is used to specify whether the cursor should be\n   moved or not moved\
    \ at the end of the Write to Display processing.\n   Bit 1 of the second byte,\
    \ which was previously reserved, will now be\n   used for this flag.  If bit 1\
    \ is a 0, the cursor continues to be\n   moved to the system IC address on a Lock-to-Unlock\
    \ keyboard\n   transition.  If bit 1 is a 1, the cursor is not moved.\n   A new\
    \ Field Control Word (FCW) will be added on page 2-65 to indicate\n   an entry\
    \ field contains transparent data.  This means the entry field\n   contents are\
    \ sent from the display screen directly to the host at\n   read time with no formatting.\
    \  Therefore, an entry field can contain\n   any values (Hex 00 to Hex FF).  A\
    \ transparent field is indicated by a\n   Hex 84xx FCW, where xx is any value.\
    \  Note: unpredictable results\n   will occur if a field is defined as both signed\
    \ numeric and a\n   transparent field.\n   The Read Immediate, Read Input Fields,\
    \ and Read MDT Fields commands\n   have been enhanced to include support for transparent\
    \ fields (page\n   2-5).  If a transparent FCW is found for an input field, the\
    \ field\n   data is not formatted (for example, nulls are not converted to\n \
    \  blanks).\n   The restriction listed for the Set Buffer Address (SBA) order\
    \ (page\n   2-138) on the column address equal to zero is no longer always the\n\
    \   case.  A reference to Start of Field (SF) row 1/column 1 field\n   support\
    \ should be made.  A note should be added in SF to describe Row\n   1/Column 1\
    \ field support.  A Row 1/Column 1 field is defined by a SBA\n   of row 1/column\
    \ 0, followed by an SF.  For a Row 1/Column 1 input\n   field, the first input-capable\
    \ position is row 1/column 1.  If the SF\n   defines an input field, the screen\
    \ attribute is not allowed to be\n   nondisplay.  Writing of the screen attribute\
    \ is suppressed for a Row\n   1/Column 1 field and the attribute discarded.\n"
- title: 5.3  New 5250 Data Stream Commands/Orders
  contents:
  - "5.3  New 5250 Data Stream Commands/Orders\n   The Read MDT Fields Alternate input\
    \ command has been added.  It is\n   the same as the Read MDT Fields command except:\n\
    \      - The command is indicated by a X'82'\n      - Leading and embedded nulls\
    \ within the field remain as nulls\n   The Read MDT Fields Immediate Alternate\
    \ input command has been added.\n   It is the same as the Read MDT Fields Alternate\
    \ command except:\n      - The command is indicated by a X'83'\n      - The command\
    \ is an immediate read command like Read Immediate;\n        therefore, no control\
    \ characters follow the command byte,\n        field data is returned immediately,\
    \ and the aid code is X'00'.\n   The Move Cursor order (MC) has been added (page\
    \ 2-137).  The MC order\n   moves the cursor to the location specified by the\
    \ two bytes following\n   the order.  Byte 1 gives the row address and byte 2\
    \ gives the column\n   address.  The MC order is useful when the cursor is to\
    \ be moved\n   without affecting the system IC address.  The MC order is unaffected\n\
    \   by the Write to Display control character values including the \"Leave\n \
    \  Cursor\" flag (CC1 bit 1).  If more than one MC or IC are found in the\n  \
    \ data stream, the cursor will move to the address specified in the\n   last MC\
    \ or IC.\n   Restrictions:\n     A parameter error will be posted when:\n    \
    \  - There are fewer then two bytes following the order.\n      - The row address\
    \ is zero or greater than the number of\n        rows on the display screen.\n\
    \      - The column address is zero or greater than the number of\n        columns\
    \ on the display screen.\n   Format:\n     Move Cursor Order  Byte 1        Byte\
    \ 2\n          X'14'       Row Address   Column Address\n   Results:\n     The\
    \ address specified by the MC order is used to move the\n     cursor when the\
    \ Write to Display is completed.\n   The Transparent Data order (TD) has been\
    \ added (page 2-137).  The TD\n   order is followed by two length bytes and transparent\
    \ data.  The\n   transparent data is written to the display screen at the current\n\
    \   display address; any values (Hex 00 to Hex FF) are allowed in the\n   transparent\
    \ data.  All length values are valid as long as the end of\n   the display screen\
    \ is not overwritten.\n   Restrictions:\n     A parameter error will be posted\
    \ when:\n      - There are fewer then two bytes following the order.\n      -\
    \ There are fewer bytes in the data stream then specified in the\n        length\
    \ field.\n      - Attempting to write beyond the end of the display screen.\n\
    \   Format:\n     TD Order   Bytes 1 and 2           Bytes 3 to ?\n       X'10'\
    \    Length of transparent   Transparent data\n                data (not counting\n\
    \                length bytes)\n   Results:\n     The transparent data is written\
    \ to the display.\n   The Query command is a new input command (page 2-5) and\
    \ is used by\n   the server to obtain information on the functional capabilities\
    \ of\n   the client 5250 display.  When the client receives a Query command,\n\
    \   the client sends a Query Reply describing its capabilities back to\n   the\
    \ server.\n   The Query command must follow an Escape ('04'X) and Write Structured\n\
    \   Field command ('F3'X).  The format of the Query command is as\n   follows:\n\
    \      Byte       Value        Description\n     ======     =======   ========================\n\
    \      0-1       X'0005'   Length of command\n       2         X'D9'    Command\
    \ Class\n       3         X'70'    Command Type - Query\n       4         X'00'\
    \    Flag Byte\n        Bit 0:   B'0'     - Query Command\n        Bit 1-7:  \
    \        - Reserved (set to zero)\n   The format of the Query Reply is as follows:\n\
    \      Byte   Value         Description\n     =====  ========  ===================================\n\
    \      0-1   X'0000'   Cursor Row/Column (set to zero)\n       2    X'88'    \
    \ Inbound Write Structured Field Aid\n      3-4   X'003A'   Length of Query Reply\n\
    \       5    X'D9'     Command Class\n       6    X'70'     Command Type - Query\n\
    \       7    X'80'     Flag Byte\n        Bit 0:   B'1'  - Query Reply\n     \
    \   Bit 1-7:       - Reserved (set to zero)\n      8-9            Controller Hardware\
    \ Class\n            X'0001'   - Local Twinax Controller\n            X'0061'\
    \   - Local ASCII Controller\n            X'0101'   - SDLC/X.21/X.25 Twinax Controller\n\
    \                            (5394 emulating a 5294)\n            X'0103'   -\
    \ SDLC/X.21/X.25 Twinax Controller (5394)\n            X'0200'   - PC DOS non-DBCS\
    \ WSF\n            X'0300'   - OS/2 non-DBCS WSF\n            X'0400'   - PC DOS\
    \ DBCS WSF\n            X'0500'   - OS/2 DBCS WSF\n            X'0600'   - Other\
    \ WSF or any other 5250 Emulator\n     10-12           Controller Code Level\n\
    \            X'010300' - For example, Version 1 Rel 3.0\n     13-28  X'00'   \
    \ Reserved (set to zero)\n      29             Device Type\n            X'01'\
    \     - 5250 Display or 5250 Emulation\n     30-33  C'cccc'  Device Type (e.g.\
    \ 3180 for 3180 Mod 2)\n     34-36  C'ccc'   Device Model (e.g. 002 for 3180 Mod\
    \ 2)\n      37             Keyboard ID\n            X'02'     - Standard Keyboard\n\
    \            X'82'     - G Keyboard\n      38    X'00'    Extended Keyboard ID\n\
    \      39    X'00'    Reserved\n     40-43  X'xxxxxxxx' Display Serial Number\n\
    \     44-45           Maximum number of input fields\n            X'0100'   -\
    \ Typically = 256 input fields\n     46-48  X'00'    Reserved (set to zero)\n\
    \     49-53           Controller/Display Capability\n       Bit 0-1: B'00' - No\
    \ Row 1/Col 1 support\n                B'01' - Row 1/Col 1 support\n       Bit\
    \ 2:   B'0'  - No Read MDT Alternate Command support\n                B'1'  -\
    \ Read MDT Alternate Command support\n       Bit 3:   B'0'  - Display does not\
    \ have PA1/PA2 support\n                B'1'  - Display does have PA1/PA2 support\n\
    \       Bit 4:   B'0'  - Display does not have PA3 support\n                B'1'\
    \  - Display does have PA3 support\n       Bit 5:   B'0'  - Display does not have\
    \ Cursor Select support\n                B'1'  - Display does have Cursor Select\
    \ support\n       Bit 6:   B'0'  - Display does not have Move Cursor Order support\n\
    \                B'1'  - Display does have Move Cursor Order support\n       Bit\
    \ 7:   B'0'  - No Read MDT Immediate Alt Command support\n                B'1'\
    \  - Read MDT Immediate Alt Command support\n     50\n       Bit 0-3: B'0001'\
    \ - 24 x 80 Screen Size\n                B'0011' - Capable of 24 x 80 and 27 x\
    \ 132\n       Bit 4:   B'0'    - No light pen support\n                B'1'  \
    \  - Light pen support\n       Bit 5:   B'0'    - No Mag Stripe Reader support\n\
    \                B'1'    - Mag Stripe Reader support\n       Bit 6-7: B'00'  \
    \ - Mono display\n                B'01'   - 5292/3179 style color, including color\
    \ PCs\n     51         X'00'   - Reserved\n     52\n       Bit 0-2: B'000'   -\
    \ No Double Byte Character Set (DBCS)\n                           capability\n\
    \                B'001'   - Presentation screen DBCS capability only\n       Bit\
    \ 3-7: B'00000' - Reserved\n     53\n       Bit 0-2: B'000'   - No graphics capability\n\
    \                B'001'   - 5292-2 style graphics\n       Bit 3-7: B'00000' -\
    \ Reserved\n     54-60      X'00'    Reserved (set to zero)\n"
- title: 6.  References
  contents:
  - "6.  References\n   1.  IBM, \"IBM 5250 Information Display System, Functions\n\
    \       Reference Manual\", SA21-9247-6, March 1987.\n   2.  Postel, J. and J.\
    \ Reynolds, \"Telnet Protocol Specification\",\n       RFC 854, USC/Information\
    \ Sciences Institute, May 1983.\n   3.  Postel, J. and J. Reynolds, \"Telnet Option\
    \ Specifications\",\n       RFC 855, USC/Information Sciences Institute, May 1983.\n\
    \   4.  Postel, J. and J. Reynolds, \"Telnet Binary Transmission\",\n       RFC\
    \ 856, USC/Information Sciences Institute, May 1983.\n   5.  VanBokkeln, J., \"\
    Telnet Terminal-Type Option\", RFC 1091,\n       FTP Software, Inc., February\
    \ 1989.\n   6.  Postel, J. and J. Reynolds, \"Telnet End of Record Option\",\n\
    \       RFC 885, USC/Information Sciences Institute, December 1983.\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Paul Chmielewski\n   IBM Corporation\n   Highway 52 and\
    \ 37 Street North West\n   Rochester, Minnesota  55901\n   Phone:  (507) 253-6315\n\
    \   EMail:  paulc@rchland.iinus1.ibm.com\n"
