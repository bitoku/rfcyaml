- contents:
  - '           On the Implementation of the TCP Urgent Mechanism

    '
  title: __initial_text__
- contents:
  - "Abstract\n   This document analyzes how current TCP implementations process TCP\n
    \  urgent indications and how the behavior of some widely deployed\n   middleboxes
    affects how end systems process urgent indications.  This\n   document updates
    the relevant specifications such that they\n   accommodate current practice in
    processing TCP urgent indications,\n   raises awareness about the reliability
    of TCP urgent indications in\n   the Internet, and recommends against the use
    of urgent indications\n   (but provides advice to applications that do).\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6093.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Specification of the TCP Urgent Mechanism .......................3\n      2.1.
    Semantics of Urgent Indications ............................3\n      2.2. Semantics
    of the Urgent Pointer ............................4\n      2.3. Allowed Length
    of \"Urgent Data\" ............................4\n   3. Current Implementation
    Practice of the TCP Urgent Mechanism .....5\n      3.1. Semantics of Urgent Indications
    ............................5\n      3.2. Semantics of the Urgent Pointer ............................5\n
    \     3.3. Allowed Length of \"Urgent Data\" ............................6\n      3.4.
    Interaction of Middleboxes with TCP Urgent Indications .....6\n   4. Updating
    RFC 793, RFC 1011, and RFC 1122 ........................6\n   5. Advice to New
    Applications Employing TCP ........................7\n   6. Advice to Applications
    That Make Use of the Urgent Mechanism ....7\n   7. Security Considerations .........................................7\n
    \  8. Acknowledgements ................................................8\n   9.
    References ......................................................8\n      9.1.
    Normative References .......................................8\n      9.2. Informative
    References .....................................8\n   Appendix A.  Survey of the
    Processing of TCP Urgent\n                Indications by Some Popular TCP Implementations
    ......10\n      A.1. FreeBSD ...................................................10\n
    \     A.2. Linux .....................................................10\n      A.3.
    NetBSD ....................................................10\n      A.4. OpenBSD
    ...................................................11\n      A.5. Cisco IOS software
    ........................................11\n      A.6. Microsoft Windows 2000,
    Service Pack 4 ....................11\n      A.7. Microsoft Windows 2008 ....................................11\n
    \     A.8. Microsoft Windows 95 ......................................11\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   This document analyzes how some current TCP implementations
    process\n   TCP urgent indications, and how the behavior of some widely deployed\n
    \  middleboxes affects the processing of urgent indications by hosts.\n   This
    document updates RFC 793 [RFC0793], RFC 1011 [RFC1011], and RFC\n   1122 [RFC1122]
    such that they accommodate current practice in\n   processing TCP urgent indications.
    \ It also provides advice to\n   applications using the urgent mechanism and raises
    awareness about\n   the reliability of TCP urgent indications in the current Internet.\n
    \  Given the above issues and potential interoperability issues with\n   respect
    to the currently common default mode operation, it is\n   strongly recommended
    that applications do not employ urgent\n   indications.  Nevertheless, urgent
    indications are still retained as\n   a mandatory part of the TCP protocol to
    support the few legacy\n   applications that employ them.  However, it is expected
    that even\n   these applications will have difficulties in environments with\n
    \  middleboxes.\n   Section 2 describes what the current IETF specifications state
    with\n   respect to TCP urgent indications.  Section 3 describes how current\n
    \  TCP implementations actually process TCP urgent indications.  Section\n   4
    updates RFC 793 [RFC0793], RFC 1011 [RFC1011], and RFC 1122\n   [RFC1122], such
    that they accommodate current practice in processing\n   TCP urgent indications.
    \ Section 5 provides advice to new\n   applications employing TCP, with respect
    to the TCP urgent mechanism.\n   Section 6 provides advice to existing applications
    that use or rely\n   on the TCP urgent mechanism.\n   The key words \"MUST\",
    \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD
    NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n   document are to
    be interpreted as described in RFC 2119 [RFC2119].\n"
  title: 1.  Introduction
- contents:
  - '2.  Specification of the TCP Urgent Mechanism

    '
  - contents:
    - "2.1.  Semantics of Urgent Indications\n   TCP implements an \"urgent mechanism\"
      that allows the sending user to\n   stimulate the receiving user to accept some
      \"urgent data\" and that\n   permits the receiving TCP to indicate to the receiving
      user when all\n   the currently known \"urgent data\" have been read.\n   The
      TCP urgent mechanism permits a point in the data stream to be\n   designated
      as the end of urgent information.  Whenever this point is\n   in advance of
      the receive sequence number (RCV.NXT) at the receiving\n   TCP, that TCP must
      tell the user to go into \"urgent mode\"; when the\n   receive sequence number
      catches up to the urgent pointer, the TCP\n   must tell user to go into \"normal
      mode\" [RFC0793].  This means, for\n   example, that data that was received
      as \"normal data\" might become\n   \"urgent data\" if an urgent indication
      is received in some successive\n   TCP segment before that data is consumed
      by the TCP user.\n   The URG control flag indicates that the \"Urgent Pointer\"
      field is\n   meaningful and must be added to the segment sequence number to
      yield\n   the urgent pointer.  The absence of this flag indicates that there
      is\n   no \"urgent data\" outstanding [RFC0793].\n   The TCP urgent mechanism
      is NOT a mechanism for sending \"out-of-band\"\n   data: the so-called \"urgent
      data\" should be delivered \"in-line\" to\n   the TCP user.\n"
    title: 2.1.  Semantics of Urgent Indications
  - contents:
    - "2.2.  Semantics of the Urgent Pointer\n   There is some ambiguity in RFC 793
      [RFC0793] with respect to the\n   semantics of the Urgent Pointer.  Section
      3.1 (page 17) of RFC 793\n   [RFC0793] states that the Urgent Pointer \"communicates
      the current\n   value of the urgent pointer as a positive offset from the sequence\n
      \  number in this segment.  The urgent pointer points to the sequence\n   number
      of the octet following the urgent data.  This field is only be\n   interpreted
      in segments with the URG control bit set\" (sic).\n   However, Section 3.9 (page
      56) of RFC 793 [RFC0793] states, when\n   describing the processing of the SEND
      call in the ESTABLISHED and\n   CLOSE-WAIT states, that \"If the urgent flag
      is set, then SND.UP <-\n   SND.NXT-1 and set the urgent pointer in the outgoing
      segments\".\n   RFC 1011 [RFC1011] clarified this ambiguity in RFC 793 stating
      that\n   \"Page 17 is wrong.  The urgent pointer points to the last octet of\n
      \  urgent data (not to the first octet of non-urgent data)\".  RFC 1122\n   [RFC1122]
      formally updated RFC 793 by stating, in Section 4.2.2.4\n   (page 84), that
      \"the urgent pointer points to the sequence number of\n   the LAST octet (not
      LAST+1) in a sequence of urgent data\".\n"
    title: 2.2.  Semantics of the Urgent Pointer
  - contents:
    - "2.3.  Allowed Length of \"Urgent Data\"\n   RFC 793 [RFC0793] allows TCP peers
      to send \"urgent data\" of any\n   length, as the TCP urgent mechanism simply
      provides a pointer to an\n   interesting point in the data stream.  In this
      respect, Section\n   4.2.2.4 (page 84) of RFC 1122 [RFC1122] explicitly states
      that \"A TCP\n   MUST support a sequence of urgent data of any length\".\n"
    title: 2.3.  Allowed Length of "Urgent Data"
  title: 2.  Specification of the TCP Urgent Mechanism
- contents:
  - '3.  Current Implementation Practice of the TCP Urgent Mechanism

    '
  - contents:
    - "3.1.  Semantics of Urgent Indications\n   As discussed in Section 2, the TCP
      urgent mechanism simply permits a\n   point in the data stream to be designated
      as the end of urgent\n   information but does NOT provide a mechanism for sending
      \"out-of-\n   band\" data.\n   Unfortunately, virtually all TCP implementations
      process TCP urgent\n   indications differently.  By default, the last byte of
      \"urgent data\"\n   is delivered \"out of band\" to the application.  That is,
      it is not\n   delivered as part of the normal data stream [UNPv1].  For example,\n
      \  the \"out-of-band\" byte is read by an application when a recv(2)\n   system
      call with the MSG_OOB flag set is issued.\n   Most implementations provide a
      socket option (SO_OOBINLINE) that\n   allows an application to override the
      (broken) default processing of\n   urgent indications, so that \"urgent data\"
      is delivered \"in line\" to\n   the application, thus providing the semantics
      intended by the IETF\n   specifications.\n"
    title: 3.1.  Semantics of Urgent Indications
  - contents:
    - "3.2.  Semantics of the Urgent Pointer\n   All the popular implementations that
      the authors of this document\n   have been able to test interpret the semantics
      of the TCP Urgent\n   Pointer as specified in Section 3.1 of RFC 793.  This
      means that even\n   when RFC 1122 formally updated RFC 793 to clarify the ambiguity
      in\n   the semantics of the Urgent Pointer, this clarification was never\n   reflected
      in actual implementations (i.e., virtually all\n   implementations default to
      the semantics of the urgent pointer\n   specified in Section 3.1 of RFC 793).\n
      \  Some operating systems provide a system-wide toggle to override this\n   behavior
      and interpret the semantics of the Urgent Pointer as\n   clarified in RFC 1122.
      \ However, this system-wide toggle has been\n   found to be inconsistent.  For
      example, Linux provides the sysctl\n   \"tcp_stdurg\" (i.e., net.ipv4.tcp_stdurg)
      that, when set, supposedly\n   changes the system behavior to interpret the
      semantics of the TCP\n   Urgent Pointer as specified in RFC 1122. However, this
      sysctl changes\n   the semantics of the Urgent Pointer only for incoming segments
      (i.e.,\n   not for outgoing segments).  This means that if this sysctl is set,\n
      \  an application might be unable to interoperate with itself if both\n   the
      TCP sender and the TCP receiver are running on the same host.\n"
    title: 3.2.  Semantics of the Urgent Pointer
  - contents:
    - "3.3.  Allowed Length of \"Urgent Data\"\n   While Section 4.2.2.4 (page 84)
      of RFC 1122 explicitly states that \"A\n   TCP MUST support a sequence of urgent
      data of any length\", in\n   practice, all those implementations that interpret
      TCP urgent\n   indications as a mechanism for sending \"out-of-band\" data keep
      a\n   buffer of a single byte for storing the \"last byte of urgent data\".\n
      \  Thus, if successive indications of \"urgent data\" are received before\n
      \  the application reads the pending \"out-of-band\" byte, that pending\n   byte
      will be discarded (i.e., overwritten by the new byte of \"urgent\n   data\").\n
      \  In order to avoid \"urgent data\" from being discarded, some\n   implementations
      queue each of the received \"urgent bytes\", so that\n   even if another urgent
      indication is received before the pending\n   \"urgent data\" are consumed by
      the application, those bytes do not\n   need to be discarded.  Some of these
      implementations have been known\n   to fail to enforce any limits on the amount
      of \"urgent data\" that\n   they queue; thus, they become vulnerable to trivial
      resource\n   exhaustion attacks [CPNI-TCP].\n   It should be reinforced that
      the aforementioned implementations are\n   broken.  The TCP urgent mechanism
      is not a mechanism for delivering\n   \"out-of-band\" data.\n"
    title: 3.3.  Allowed Length of "Urgent Data"
  - contents:
    - "3.4.  Interaction of Middleboxes with TCP Urgent Indications\n   As a result
      of the publication of Network Intrusion Detection System\n   (NIDS) evasion
      techniques based on TCP urgent indications [phrack],\n   some middleboxes clear
      the urgent indications by clearing the URG\n   flag and setting the Urgent Pointer
      to zero.  This causes the \"urgent\n   data\" to become \"in line\" (that is,
      accessible by the read(2) call or\n   the recv(2) call without the MSG_OOB flag)
      in the case of those TCP\n   implementations that interpret the TCP urgent mechanism
      as a facility\n   for delivering \"out-of-band\" data (as described in Section
      3.1).  An\n   example of such a middlebox is the Cisco PIX firewall [Cisco-PIX].\n
      \  This should discourage applications from depending on urgent\n   indications
      for their correct operation, as urgent indications may\n   not be reliable in
      the current Internet.\n"
    title: 3.4.  Interaction of Middleboxes with TCP Urgent Indications
  title: 3.  Current Implementation Practice of the TCP Urgent Mechanism
- contents:
  - "4.  Updating RFC 793, RFC 1011, and RFC 1122\n   Considering that as long as
    both the TCP sender and the TCP receiver\n   implement the same semantics for
    the Urgent Pointer there is no\n   functional difference in having the Urgent
    Pointer point to \"the\n   sequence number of the octet following the urgent data\"
    vs.  \"the\n   last octet of urgent data\", and that all known implementations\n
    \  interpret the semantics of the Urgent Pointer as pointing to \"the\n   sequence
    number of the octet following the urgent data\", we hereby\n   update RFC 793
    [RFC0793], RFC 1011 [RFC1011], and RFC 1122 [RFC1122]\n   such that \"the urgent
    pointer points to the sequence number of the\n   octet following the urgent data\"
    (in segments with the URG control\n   bit set), thus accommodating virtually all
    existing TCP\n   implementations.\n"
  title: 4.  Updating RFC 793, RFC 1011, and RFC 1122
- contents:
  - "5.  Advice to New Applications Employing TCP\n   As a result of the issues discussed
    in Section 3.2 and Section 3.4,\n   new applications SHOULD NOT employ the TCP
    urgent mechanism.\n   However, TCP implementations MUST still include support
    for the\n   urgent mechanism such that existing applications can still use it.\n"
  title: 5.  Advice to New Applications Employing TCP
- contents:
  - "6.  Advice to Applications That Make Use of the Urgent Mechanism\n   Even though
    applications SHOULD NOT employ the urgent mechanism,\n   applications that still
    decide to employ it MUST set the SO_OOBINLINE\n   socket option, such that \"urgent
    data\" is delivered in line, as\n   intended by the IETF specifications.\n   Additionally,
    applications that still decide to use the urgent\n   mechanism need to be designed
    for correct operation even when the URG\n   flag is cleared by middleboxes.\n"
  title: 6.  Advice to Applications That Make Use of the Urgent Mechanism
- contents:
  - "7.  Security Considerations\n   Multiple factors can affect the data flow that
    is actually delivered\n   to an application when the TCP urgent mechanism is employed:
    for\n   example, the two possible interpretations of the semantics of the\n   Urgent
    Pointer in current implementations (e.g., depending on the\n   value of the tcp_stdurg
    sysctl), the possible implementation of the\n   urgent mechanism as an \"out-of-band\"
    (OOB) facility (versus \"in-band\"\n   as intended by the IETF specifications),
    or middleboxes (such as\n   packet scrubbers) or the end-systems themselves that
    could cause the\n   \"urgent data\" to be processed \"in line\".  This might make
    it\n   difficult for a Network Intrusion Detection System (NIDS) to track\n   the
    application-layer data transferred to the destination system and\n   thus lead
    to false negatives or false positives in the NIDS\n   [CPNI-TCP] [phrack].\n   Probably
    the best way to avoid the security implications of TCP\n   \"urgent data\" is
    to avoid having applications use the TCP urgent\n   mechanism altogether.  Packet
    scrubbers could probably be configured\n   to clear the URG bit and set the Urgent
    Pointer to zero.  This would\n   basically cause the \"urgent data\" to be put
    \"in line\".  However, this\n   might cause interoperability problems or undesired
    behavior in those\n   applications that rely on the TCP urgent mechanism, such
    as Telnet\n   [RFC0854] and FTP [RFC0959].\n"
  title: 7.  Security Considerations
- contents:
  - "8.  Acknowledgements\n   The authors of this document would like to thank (in
    alphabetical\n   order) Jari Arkko, Ron Bonica, David Borman, Dave Cridland, Ralph\n
    \  Droms, Wesley Eddy, John Heffner, Alfred Hoenes, Alexey Melnikov,\n   Keith
    Moore, Carlos Pignataro, Tim Polk, Anantha Ramaiah, Joe Touch,\n   Michael Welzl,
    Dan Wing, and Alexander Zimmermann for providing\n   valuable feedback on earlier
    versions of this document.\n   Fernando would like to thank David Borman and Joe
    Touch for a\n   fruitful discussion about the TCP urgent mechanism at IETF 73\n
    \  (Minneapolis).\n   Fernando Gont's attendance to IETF meetings was supported
    by ISOC's\n   \"Fellowship to the IETF\" program.\n   Finally, Fernando Gont wishes
    to express deep and heartfelt gratitude\n   to Jorge Oscar Gont and Nelida Garcia
    for their precious motivation\n   and guidance.\n"
  title: 8.  Acknowledgements
- contents:
  - '9.  References

    '
  - contents:
    - "9.1.  Normative References\n   [RFC0793]     Postel, J., \"Transmission Control
      Protocol\", STD 7, RFC\n                 793, September 1981.\n   [RFC1011]
      \    Reynolds, J. and J. Postel, \"Official Internet\n                 protocols\",
      RFC 1011, May 1987.\n   [RFC1122]     Braden, R., Ed., \"Requirements for Internet
      Hosts -\n                 Communication Layers\", STD 3, RFC 1122, October 1989.\n
      \  [RFC2119]     Bradner, S., \"Key words for use in RFCs to Indicate\n                 Requirement
      Levels\", BCP 14, RFC 2119, March 1997.\n"
    title: 9.1.  Normative References
  - contents:
    - "9.2.  Informative References\n   [CPNI-TCP]    Gont, F., \"Security Assessment
      of the Transmission\n                 Control Protocol (TCP)\", \"http://www.cpni.gov.uk/\n
      \                Docs/tn-03-09-security-assessment-TCP.pdf\", 2009.\n   [Cisco-PIX]
      \  Cisco PIX, \"http://www.cisco.com/en/US/docs/security/\n                 asa/asa70/command/reference/tz.html#wp1288756\".\n
      \  [FreeBSD]     The FreeBSD project, \"http://www.freebsd.org\".\n   [Linux]
      \      The Linux Project, \"http://www.kernel.org\".\n   [NetBSD]      The NetBSD
      project, \"http://www.netbsd.org\".\n   [OpenBSD]     The OpenBSD project, \"http://www.openbsd.org\".\n
      \  [RFC0854]     Postel, J. and J. Reynolds, \"Telnet Protocol\n                 Specification\",
      STD 8, RFC 854, May 1983.\n   [RFC0959]     Postel, J. and J. Reynolds, \"File
      Transfer Protocol\",\n                 STD 9, RFC 959, October 1985.\n   [UNPv1]
      \      Stevens, W., \"UNIX Network Programming, Volume 1.\n                 Networking
      APIs: Sockets and XTI\", Prentice Hall PTR,\n                 1997.\n   [Windows2000]
      Microsoft Windows 2000, \"http://technet.microsoft.com/\n                 en-us/library/bb726981(printer).aspx\".\n
      \  [Windows95]   Microsoft Windows 95, \"ftp://ftp.demon.co.uk/pub/\n                 mirrors/win95netfaq/faq-c.html\".\n
      \  [phrack]      Ko, Y., Ko, S., and M. Ko, \"NIDS Evasion Method named\n                 \"SeolMa\"\",
      Phrack Magazine, Volume 0x0b, Issue 0x39,\n                 Phile #0x03 of 0x12
      http://www.phrack.org/\n                 issues.html?issue=57&id=3#article,
      2001.\n"
    title: 9.2.  Informative References
  title: 9.  References
- contents:
  - "Appendix A.  Survey of the Processing of TCP Urgent Indications by Some\n             Popular
    TCP Implementations\n"
  - contents:
    - "A.1.  FreeBSD\n   FreeBSD 8.0 [FreeBSD] interprets the semantics of the urgent
      pointer\n   as specified in Section 4 of this document.  It does not provide
      any\n   sysctl to override this behavior.\n   FreeBSD provides the SO_OOBINLINE
      socket option that, when set,\n   causes TCP \"urgent data\" to remain \"in
      line\".  That is, it will be\n   accessible by the read(2) call or the recv(2)
      call without the\n   MSG_OOB flag.\n   FreeBSD supports only one byte of \"urgent
      data\".  That is, only the\n   byte preceding the Urgent Pointer is considered
      \"urgent data\".\n"
    title: A.1.  FreeBSD
  - contents:
    - "A.2.  Linux\n   Linux 2.6.15-53-386 [Linux] interprets the semantics of the
      urgent\n   pointer as specified in Section 4 of this document.  It provides
      the\n   net.ipv4.tcp_stdurg sysctl to override this behavior to interpret the\n
      \  Urgent Pointer as specified in RFC 1122 [RFC1122].  However, this\n   sysctl
      only affects the processing of incoming segments (the Urgent\n   Pointer in
      outgoing segments will still be set as specified in\n   Section 4 of this document).\n
      \  Linux provides the SO_OOBINLINE socket option that, when set, causes\n   TCP
      \"urgent data\" to remain \"in line\".  That is, it will be\n   accessible by
      the read(2) call or the recv(2) call without the\n   MSG_OOB flag.\n   Linux
      supports only one byte of \"urgent data\".  That is, only the\n   byte preceding
      the Urgent Pointer is considered \"urgent data\".\n"
    title: A.2.  Linux
  - contents:
    - "A.3.  NetBSD\n   NetBSD 5.0.1 [NetBSD] interprets the semantics of the urgent
      pointer\n   as specified in Section 4 of this document.  It does not provide
      any\n   sysctl to override this behavior.\n   NetBSD provides the SO_OOBINLINE
      socket option that, when set, causes\n   TCP \"urgent data\" to remain \"in
      line\".  That is, it will be\n   accessible by the read(2) call or the recv(2)
      call without the\n   MSG_OOB flag.\n   NetBSD supports only one byte of \"urgent
      data\".  That is, only the\n   byte preceding the Urgent Pointer is considered
      \"urgent data\".\n"
    title: A.3.  NetBSD
  - contents:
    - "A.4.  OpenBSD\n   OpenBSD 4.2 [OpenBSD] interprets the semantics of the urgent
      pointer\n   as specified in Section 4 of this document.  It does not provide
      any\n   sysctl to override this behavior.\n   OpenBSD provides the SO_OOBINLINE
      socket option that, when set,\n   causes TCP \"urgent data\" to remain \"in
      line\".  That is, it will be\n   accessible by the read(2) or recv(2) calls
      without the MSG_OOB flag.\n   OpenBSD supports only one byte of \"urgent data\".
      \ That is, only the\n   byte preceding the Urgent Pointer is considered \"urgent
      data\".\n"
    title: A.4.  OpenBSD
  - contents:
    - "A.5.  Cisco IOS software\n   Cisco IOS Software Releases 12.2(18)SXF7, 12.4(15)T7
      interpret the\n   semantics of the urgent pointer as specified in Section 4
      of this\n   document.\n   The behavior is consistent with having the SO_OOBINLINE
      socket option\n   turned on, i.e., the data is processed \"in line\".\n"
    title: A.5.  Cisco IOS software
  - contents:
    - "A.6.  Microsoft Windows 2000, Service Pack 4\n   Microsoft Windows 2000 [Windows2000]
      interprets the semantics of the\n   urgent pointer as specified in Section 4
      of this document.  It\n   provides the TcpUseRFC1122UrgentPointer system-wide
      variable to\n   override this behavior, interpreting the Urgent Pointer as specified\n
      \  in RFC 1122 [RFC1122].\n   Tests performed with a sample server application
      compiled using the\n   cygwin environment has shown that the default behavior
      is to return\n   the \"urgent data\" \"in line\".\n"
    title: A.6.  Microsoft Windows 2000, Service Pack 4
  - contents:
    - "A.7.  Microsoft Windows 2008\n   Microsoft Windows 2008 interprets the semantics
      of the urgent pointer\n   as specified in Section 4 of this document.\n"
    title: A.7.  Microsoft Windows 2008
  - contents:
    - "A.8.  Microsoft Windows 95\n   Microsoft Windows 95 interprets the semantics
      of the urgent pointer\n   as specified in Section 4 of this document.  It provides
      the\n   BSDUrgent system-wide variable to override this behavior,\n   interpreting
      the Urgent Pointer as specified in RFC 1122 [RFC1122].\n   Windows 95 supports
      only one byte of \"urgent data\".  That is, only\n   the byte preceding the
      Urgent Pointer is considered \"urgent data\"\n   [Windows95].\n"
    title: A.8.  Microsoft Windows 95
  title: Appendix A.  Survey of the Processing of TCP Urgent Indications by Some
- contents:
  - "Authors' Addresses\n   Fernando Gont\n   Universidad Tecnologica Nacional / Facultad
    Regional Haedo\n   Evaristo Carriego 2644\n   Haedo, Provincia de Buenos Aires
    \ 1706\n   Argentina\n   Phone: +54 11 4650 8472\n   EMail: fernando@gont.com.ar\n
    \  URI:   http://www.gont.com.ar\n   Andrew Yourtchenko\n   Cisco\n   De Kleetlaan,
    7\n   Diegem  B-1831\n   Belgium\n   Phone: +32 2 704 5494\n   EMail: ayourtch@cisco.com\n"
  title: Authors' Addresses
