- contents:
  - '   Stream Control Transmission Protocol (SCTP) Stream Reconfiguration

    '
  title: __initial_text__
- contents:
  - "Abstract\n   Many applications that use the Stream Control Transmission Protocol\n
    \  (SCTP) want the ability to \"reset\" a stream.  The intention of\n   resetting
    a stream is to set the numbering sequence of the stream\n   back to 'zero' with
    a corresponding notification to the application\n   layer that the reset has been
    performed.  Applications requiring this\n   feature want it so that they can \"reuse\"
    streams for different\n   purposes but still utilize the stream sequence number
    so that the\n   application can track the message flows.  Thus, without this feature,\n
    \  a new use of an old stream would result in message numbers greater\n   than
    expected, unless there is a protocol mechanism to \"reset the\n   streams back
    to zero\".  This document also includes methods for\n   resetting the transmission
    sequence numbers, adding additional\n   streams, and resetting all stream sequence
    numbers.\n"
  title: Abstract
- contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This
    document is a product of the Internet Engineering Task Force\n   (IETF).  It represents
    the consensus of the IETF community.  It has\n   received public review and has
    been approved for publication by the\n   Internet Engineering Steering Group (IESG).
    \ Further information on\n   Internet Standards is available in Section 2 of RFC
    5741.\n   Information about the current status of this document, any errata,\n
    \  and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6525.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2012 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n
    \  (http://trustee.ietf.org/license-info) in effect on the date of\n   publication
    of this document.  Please review these documents\n   carefully, as they describe
    your rights and restrictions with respect\n   to this document.  Code Components
    extracted from this document must\n   include Simplified BSD License text as described
    in Section 4.e of\n   the Trust Legal Provisions and are provided without warranty
    as\n   described in the Simplified BSD License.\n"
  title: Copyright Notice
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \  2. Conventions .....................................................4\n   3.
    New Chunk Type ..................................................4\n      3.1.
    RE-CONFIG Chunk ............................................5\n   4. New Parameter
    Types .............................................6\n      4.1. Outgoing SSN
    Reset Request Parameter .......................7\n      4.2. Incoming SSN Reset
    Request Parameter .......................8\n      4.3. SSN/TSN Reset Request Parameter
    ............................9\n      4.4. Re-configuration Response Parameter
    .......................10\n      4.5. Add Outgoing Streams Request Parameter ....................12\n
    \     4.6. Add Incoming Streams Request Parameter ....................13\n   5.
    Procedures .....................................................14\n      5.1.
    Sender-Side Procedures ....................................14\n           5.1.1.
    Sender-Side Procedures for the RE-CONFIG Chunk .....14\n           5.1.2. Sender-Side
    Procedures for the Outgoing SSN\n                  Reset Request Parameter ............................15\n
    \          5.1.3. Sender-Side Procedures for the Incoming SSN\n                  Reset
    Request Parameter ............................16\n           5.1.4. Sender-Side
    Procedures for the SSN/TSN\n                  Reset Request Parameter ............................17\n
    \          5.1.5. Sender-Side Procedures for the Add Outgoing\n                  Streams
    Request Parameter ..........................17\n           5.1.6. Sender-Side
    Procedures for the Add Incoming\n                  Streams Request Parameter ..........................17\n
    \          5.1.7. Sender-Side Procedures for the\n                  Re-configuration
    Response Parameter ................18\n      5.2. Receiver-Side Procedures ..................................18\n
    \          5.2.1. Receiver-Side Procedures for the RE-CONFIG Chunk ...18\n           5.2.2.
    Receiver-Side Procedures for the Outgoing\n                  SSN Reset Request
    Parameter ........................19\n           5.2.3. Receiver-Side Procedures
    for the Incoming\n                  SSN Reset Request Parameter ........................20\n
    \          5.2.4. Receiver-Side Procedures for the SSN/TSN\n                  Reset
    Request Parameter ............................21\n           5.2.5. Receiver-Side
    Procedures for the Add\n                  Outgoing Streams Request Parameter .................21\n
    \          5.2.6. Receiver-Side Procedures for the Add\n                  Incoming
    Streams Request Parameter .................22\n           5.2.7. Receiver-Side
    Procedures for the\n                  Re-configuration Response Parameter ................22\n
    \  6. Sockets API Considerations .....................................23\n      6.1.
    Events ....................................................23\n           6.1.1.
    Stream Reset Event .................................24\n           6.1.2. Association
    Reset Event ............................25\n           6.1.3. Stream Change Event
    ................................26\n      6.2. Event Subscription ........................................27\n
    \     6.3. Socket Options ............................................27\n           6.3.1.
    Enable/Disable Stream Reset\n                  (SCTP_ENABLE_STREAM_RESET) .........................28\n
    \          6.3.2. Reset Incoming and/or Outgoing Streams\n                  (SCTP_RESET_STREAMS)
    ...............................29\n           6.3.3. Reset SSN/TSN (SCTP_RESET_ASSOC)
    ...................29\n           6.3.4. Add Incoming and/or Outgoing Streams\n
    \                 (SCTP_ADD_STREAMS) .................................30\n   7.
    Security Considerations ........................................30\n   8. IANA
    Considerations ............................................31\n      8.1. A New
    Chunk Type ..........................................31\n      8.2. Six New Chunk
    Parameter Types .............................31\n   9. Acknowledgments ................................................31\n
    \  10. References ....................................................32\n      10.1.
    Normative References .....................................32\n      10.2. Informative
    References ...................................32\n   Appendix A. Examples of the
    Reconfiguration Procedures ............33\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Many applications that use SCTP as defined in [RFC4960]
    want the\n   ability to \"reset\" a stream.  The intention of resetting a stream
    is\n   to set the Stream Sequence Numbers (SSNs) of the stream back to\n   'zero'
    with a corresponding notification to the application layer\n   that the reset
    has been performed.  Applications requiring this\n   feature want to \"reuse\"
    streams for different purposes but still\n   utilize the SSN so that the application
    can track the message flows.\n   Thus, without this feature, a new use of an old
    stream would result\n   in message numbers greater than expected, unless there
    is a protocol\n   mechanism to \"reset the streams back to zero\".  This document
    also\n   includes methods for resetting the Transmission Sequence Numbers\n   (TSNs),
    adding additional streams, and resetting all SSNs.\n   The sockets API for SCTP
    defined in [RFC6458] exposes the sequence\n   numbers used by SCTP for user message
    transfer.  Therefore, resetting\n   them can be used by application writers.  Please
    note that the\n   corresponding sequence number for TCP is not exposed via the
    sockets\n   API for TCP.\n"
  title: 1.  Introduction
- contents:
  - "2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in [RFC2119].\n"
  title: 2.  Conventions
- contents:
  - "3.  New Chunk Type\n   This section defines the new chunk type that will be used
    to\n   reconfigure streams.  Table 1 illustrates the new chunk type.\n            +------------+------------------------------------+\n
    \           | Chunk Type | Chunk Name                         |\n            +------------+------------------------------------+\n
    \           | 130        | Re-configuration Chunk (RE-CONFIG) |\n            +------------+------------------------------------+\n
    \                                 Table 1\n   It should be noted that the format
    of the RE-CONFIG chunk requires\n   that the receiver ignore the chunk if it is
    not understood and\n   continue processing all chunks that follow.  This is accomplished
    by\n   the use of the upper bits of the chunk type as described in\n   Section
    3.2 of [RFC4960].\n   All transported integer numbers are in \"network byte order\",
    a.k.a.\n   Big Endian.\n"
  - contents:
    - "3.1.  RE-CONFIG Chunk\n   This document adds one new chunk type to SCTP.  The
      chunk has the\n   following format:\n    0                   1                   2
      \                  3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  | Type = 130    |  Chunk Flags  |      Chunk Length             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  \\                                                               \\\n   /
      \                 Re-configuration Parameter                   /\n   \\                                                               \\\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   \\
      \                                                              \\\n   /             Re-configuration
      Parameter (optional)             /\n   \\                                                               \\\n
      \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   Chunk
      Type: 1 byte (unsigned integer)\n      This field holds the IANA-defined chunk
      type for the RE-CONFIG\n      chunk.  The value of this field is 130.\n   Chunk
      Flags: 1 byte (unsigned integer)\n      This field is set to 0 by the sender
      and ignored by the receiver.\n   Chunk Length: 2 bytes (unsigned integer)\n
      \     This field holds the length of the chunk in bytes, including the\n      Chunk
      Type, Chunk Flags, and Chunk Length.\n   Re-configuration Parameter\n      This
      field holds a Re-configuration Request Parameter or a\n      Re-configuration
      Response Parameter.\n   Note that each RE-CONFIG chunk holds at least one parameter
      and at\n   most two parameters.  Only the following combinations are allowed:\n
      \  1.   Outgoing SSN Reset Request Parameter.\n   2.   Incoming SSN Reset Request
      Parameter.\n   3.   Outgoing SSN Reset Request Parameter, Incoming SSN Reset
      Request\n        Parameter.\n   4.   SSN/TSN Reset Request Parameter.\n   5.
      \  Add Outgoing Streams Request Parameter.\n   6.   Add Incoming Streams Request
      Parameter.\n   7.   Add Outgoing Streams Request Parameter, Add Incoming Streams\n
      \       Request Parameter.\n   8.   Re-configuration Response Parameter.\n   9.
      \  Re-configuration Response Parameter, Outgoing SSN Reset Request\n        Parameter.\n
      \  10.  Re-configuration Response Parameter, Re-configuration Response\n        Parameter.\n
      \  If a sender transmits an unsupported combination, the receiver SHOULD\n   send
      an ERROR chunk with a Protocol Violation cause, as defined in\n   Section 3.3.10.13
      of [RFC4960]).\n"
    title: 3.1.  RE-CONFIG Chunk
  title: 3.  New Chunk Type
- contents:
  - "4.  New Parameter Types\n   This section defines the new parameter types that
    will be used in the\n   RE-CONFIG chunk.  Table 2 illustrates the new parameter
    types.\n        +----------------+----------------------------------------+\n
    \       | Parameter Type | Parameter Name                         |\n        +----------------+----------------------------------------+\n
    \       | 13             | Outgoing SSN Reset Request Parameter   |\n        |
    14             | Incoming SSN Reset Request Parameter   |\n        | 15             |
    SSN/TSN Reset Request Parameter        |\n        | 16             | Re-configuration
    Response Parameter    |\n        | 17             | Add Outgoing Streams Request
    Parameter |\n        | 18             | Add Incoming Streams Request Parameter
    |\n        +----------------+----------------------------------------+\n                                  Table
    2\n   It should be noted that the parameter format requires that the\n   receiver
    stop processing the parameter and not process any further\n   parameters within
    the chunk if the parameter type is not recognized.\n   This is accomplished by
    the use of the upper bits of the parameter\n   type as described in Section 3.2.1
    of [RFC4960].\n   All transported integer numbers are in \"network byte order\",
    a.k.a.\n   Big Endian.\n"
  - contents:
    - "4.1.  Outgoing SSN Reset Request Parameter\n   This parameter is used by the
      sender to request the reset of some or\n   all outgoing streams.\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Parameter Type = 13       | Parameter Length = 16 + 2 * N |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |           Re-configuration Request Sequence Number            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |           Re-configuration Response Sequence Number           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                Sender's Last Assigned TSN                     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  Stream Number 1 (optional)   |    Stream Number 2 (optional) |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  /                            ......                             /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  Stream Number N-1 (optional) |    Stream Number N (optional) |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Parameter Type: 2 bytes (unsigned integer)\n      This field holds the IANA-defined
      parameter type for the Outgoing\n      SSN Reset Request Parameter.  The value
      of this field is 13.\n   Parameter Length: 2 bytes (unsigned integer)\n      This
      field holds the length in bytes of the parameter; the value\n      MUST be 16
      + 2 * N, where N is the number of stream numbers\n      listed.\n   Re-configuration
      Request Sequence Number: 4 bytes (unsigned integer)\n      This field is used
      to identify the request.  It is a monotonically\n      increasing number that
      is initialized to the same value as the\n      initial TSN.  It is increased
      by 1 whenever sending a new Re-\n      configuration Request Parameter.\n   Re-configuration
      Response Sequence Number: 4 bytes (unsigned\n      integer)\n      When this
      Outgoing SSN Reset Request Parameter is sent in response\n      to an Incoming
      SSN Reset Request Parameter, this parameter is also\n      an implicit response
      to the incoming request.  This field then\n      holds the Re-configuration
      Request Sequence Number of the incoming\n      request.  In other cases, it
      holds the next expected\n      Re-configuration Request Sequence Number minus
      1.\n   Sender's Last Assigned TSN: 4 bytes (unsigned integer)\n      This value
      holds the next TSN minus 1 -- in other words, the last\n      TSN that this
      sender assigned.\n   Stream Number 1..N: 2 bytes (unsigned integer)\n      This
      optional field, if included, is used to indicate specific\n      streams that
      are to be reset.  If no streams are listed, then all\n      streams are to be
      reset.\n   This parameter can appear in a RE-CONFIG chunk.  This parameter MUST\n
      \  NOT appear in any other chunk type.\n"
    title: 4.1.  Outgoing SSN Reset Request Parameter
  - contents:
    - "4.2.  Incoming SSN Reset Request Parameter\n   This parameter is used by the
      sender to request that the peer reset\n   some or all of its outgoing streams.\n
      \   0                   1                   2                   3\n    0 1 2
      3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Parameter Type = 14       |  Parameter Length = 8 + 2 * N |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          Re-configuration Request Sequence Number             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  Stream Number 1 (optional)   |    Stream Number 2 (optional) |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  /                            ......                             /\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |  Stream Number N-1 (optional) |    Stream Number N (optional) |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Parameter Type: 2 bytes (unsigned integer)\n      This field holds the IANA-defined
      parameter type for the Incoming\n      SSN Reset Request Parameter.  The value
      of this field is 14.\n   Parameter Length: 2 bytes (unsigned integer)\n      This
      field holds the length in bytes of the parameter; the value\n      MUST be 8
      + 2 * N.\n   Re-configuration Request Sequence Number: 4 bytes (unsigned integer)\n
      \     This field is used to identify the request.  It is a monotonically\n      increasing
      number that is initialized to the same value as the\n      initial TSN.  It
      is increased by 1 whenever sending a new Re-\n      configuration Request Parameter.\n
      \  Stream Number 1..N: 2 bytes (unsigned integer)\n      This optional field,
      if included, is used to indicate specific\n      streams that are to be reset.
      \ If no streams are listed, then all\n      streams are to be reset.\n   This
      parameter can appear in a RE-CONFIG chunk.  This parameter MUST\n   NOT appear
      in any other chunk type.\n"
    title: 4.2.  Incoming SSN Reset Request Parameter
  - contents:
    - "4.3.  SSN/TSN Reset Request Parameter\n   This parameter is used by the sender
      to request a reset of the TSN\n   and SSN numbering of all incoming and outgoing
      streams.\n    0                   1                   2                   3\n
      \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Parameter Type = 15       |      Parameter Length = 8     |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |         Re-configuration Request Sequence Number              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Parameter Type: 2 bytes (unsigned integer)\n      This field holds the IANA-defined
      parameter type for the SSN/TSN\n      Reset Request Parameter.  The value of
      this field is 15.\n   Parameter Length: 2 bytes (unsigned integer)\n      This
      field holds the length in bytes of the parameter; the value\n      MUST be 8.\n
      \  Re-configuration Request Sequence Number: 4 bytes (unsigned integer)\n      This
      field is used to identify the request.  It is a monotonically\n      increasing
      number that is initialized to the same value as the\n      initial TSN.  It
      is increased by 1 whenever sending a new Re-\n      configuration Request Parameter.\n
      \  This parameter can appear in a RE-CONFIG chunk.  This parameter MUST\n   NOT
      appear in any other chunk type.\n"
    title: 4.3.  SSN/TSN Reset Request Parameter
  - contents:
    - "4.4.  Re-configuration Response Parameter\n   This parameter is used by the
      receiver of a Re-configuration Request\n   Parameter to respond to the request.\n
      \   0                   1                   2                   3\n    0 1 2
      3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Parameter Type = 16       |      Parameter Length         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |         Re-configuration Response Sequence Number             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                            Result                             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                   Sender's Next TSN (optional)                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |                  Receiver's Next TSN (optional)               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Parameter Type: 2 bytes (unsigned integer)\n      This field holds the IANA-defined
      parameter type for the\n      Re-configuration Response Parameter.  The value
      of this field\n      is 16.\n   Parameter Type Length: 2 bytes (unsigned integer)\n
      \     This field holds the length in bytes of the parameter; the value\n      MUST
      be 12 if the optional fields are not present and 20\n      otherwise.\n   Re-configuration
      Response Sequence Number: 4 bytes (unsigned\n      integer)\n      This value
      is copied from the request parameter and is used by the\n      receiver of the
      Re-configuration Response Parameter to tie the\n      response to the request.\n
      \  Result: 4 bytes (unsigned integer)\n      This value describes the result
      of the processing of the request.\n      It is encoded as indicated in Table
      3:\n             +--------+-------------------------------------+\n             |
      Result | Description                         |\n             +--------+-------------------------------------+\n
      \            | 0      | Success - Nothing to do             |\n             |
      1      | Success - Performed                 |\n             | 2      | Denied
      \                             |\n             | 3      | Error - Wrong SSN                   |\n
      \            | 4      | Error - Request already in progress |\n             |
      5      | Error - Bad Sequence Number         |\n             | 6      | In progress
      \                        |\n             +--------+-------------------------------------+\n
      \                                 Table 3\n   Sender's Next TSN: 4 bytes (unsigned
      integer)\n      This field holds the TSN that the sender of the response will
      use\n      to send the next DATA chunk.  The field is only applicable in\n      responses
      to SSN/TSN reset requests.\n   Receiver's Next TSN: 4 bytes (unsigned integer)\n
      \     This field holds the TSN that the receiver of the response must\n      use
      to send the next DATA chunk.  The field is only applicable in\n      responses
      to SSN/TSN reset requests.\n   Either both optional fields (Sender's Next TSN
      and Receiver's Next\n   TSN) MUST be present, or no field.\n   This parameter
      can appear in a RE-CONFIG chunk.  This parameter MUST\n   NOT appear in any
      other chunk type.\n"
    title: 4.4.  Re-configuration Response Parameter
  - contents:
    - "4.5.  Add Outgoing Streams Request Parameter\n   This parameter is used by
      the sender to request that an additional\n   number of outgoing streams (i.e.,
      the receiver's incoming streams) be\n   added to the association.\n    0                   1
      \                  2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Parameter Type = 17       |      Parameter Length = 12    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          Re-configuration Request Sequence Number             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |      Number of new streams    |         Reserved              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Parameter Type: 2 bytes (unsigned integer)\n      This field holds the IANA-defined
      parameter type for the Add\n      Outgoing Streams Request Parameter.  The value
      of this field\n      is 17.\n   Parameter Length: 2 bytes (unsigned integer)\n
      \     This field holds the length in bytes of the parameter; the value\n      MUST
      be 12.\n   Re-configuration Request Sequence Number: 4 bytes (unsigned integer)\n
      \     This field is used to identify the request.  It is a monotonically\n      increasing
      number that is initialized to the same value as the\n      initial TSN.  It
      is increased by 1 whenever sending a new Re-\n      configuration Request Parameter.\n
      \  Number of new streams: 2 bytes (unsigned integer)\n      This value holds
      the number of additional outgoing streams that\n      the sender requests be
      added to the association.  Streams are\n      added in order and are consecutive;
      e.g., if an association has 4\n      outgoing streams (0-3) and a request is
      made to add 3 streams,\n      then the new streams will be 4, 5, and 6.\n   Reserved:
      2 bytes (unsigned integer)\n      This field is reserved.  It SHOULD be set
      to 0 by the sender and\n      ignored by the receiver.\n   This parameter MAY
      appear in a RE-CONFIG chunk.  This parameter MUST\n   NOT appear in any other
      chunk type.\n"
    title: 4.5.  Add Outgoing Streams Request Parameter
  - contents:
    - "4.6.  Add Incoming Streams Request Parameter\n   This parameter is used by
      the sender to request that the peer add an\n   additional number of outgoing
      streams (i.e., the sender's incoming\n   streams) to the association.\n    0
      \                  1                   2                   3\n    0 1 2 3 4
      5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |     Parameter Type = 18       |      Parameter Length = 12    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |          Re-configuration Request Sequence Number             |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  |      Number of new streams    |         Reserved              |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
      \  Parameter Type: 2 bytes (unsigned integer)\n      This field holds the IANA-defined
      parameter type for the Add\n      Incoming Streams Request Parameter.  The value
      of this field\n      is 18.\n   Parameter Length: 2 bytes (unsigned integer)\n
      \     This field holds the length in bytes of the parameter; the value\n      MUST
      be 12.\n   Re-configuration Request Sequence Number: 4 bytes (unsigned integer)\n
      \     This field is used to identify the request.  It is a monotonically\n      increasing
      number that is initialized to the same value as the\n      initial TSN.  It
      is increased by 1 whenever sending a new Re-\n      configuration Request Parameter.\n
      \  Number of new streams: 2 bytes (unsigned integer)\n      This value holds
      the number of additional incoming streams that\n      the sender requests be
      added to the association.  Streams are\n      added in order and are consecutive;
      e.g., if an association has 4\n      outgoing streams (0-3) and a request is
      made to add 3 streams,\n      then the new streams will be 4, 5, and 6.\n   Reserved:
      2 bytes (unsigned integer)\n      This field is reserved.  It SHOULD be set
      to 0 by the sender and\n      ignored by the receiver.\n   This parameter MAY
      appear in a RE-CONFIG chunk.  This parameter MUST\n   NOT appear in any other
      chunk type.\n"
    title: 4.6.  Add Incoming Streams Request Parameter
  title: 4.  New Parameter Types
- contents:
  - "5.  Procedures\n   This section defines the procedures used by both the sender
    and\n   receiver of a RE-CONFIG chunk.  Various examples of re-configuration\n
    \  scenarios are given in Appendix A.\n   One important thing to remember about
    SCTP streams is that they are\n   uni-directional and there is no correspondence
    between outgoing and\n   incoming streams.  The procedures outlined in this section
    are\n   designed so that the incoming side will always reset its SSN first\n   (before
    the outgoing side), which means the re-configuration request\n   must always originate
    from the outgoing side.  These two issues have\n   important ramifications upon
    how an SCTP endpoint might request that\n   its incoming streams be reset.  In
    effect, it must ask the peer to\n   start an outgoing reset procedure and once
    that request is\n   acknowledged let the peer actually control the reset operation.\n"
  - contents:
    - "5.1.  Sender-Side Procedures\n   This section describes the procedures related
      to the sending of\n   RE-CONFIG chunks.  A RE-CONFIG chunk is composed of one
      or two Type-\n   Length-Value (TLV) parameters.\n"
    - contents:
      - "5.1.1.  Sender-Side Procedures for the RE-CONFIG Chunk\n   The SCTP protocol
        extension described in this document uses the\n   Supported Extensions Parameter
        defined in [RFC5061] for negotiating\n   the support.\n   An SCTP endpoint
        supporting this extension MUST include the chunk\n   type of the RE-CONFIG
        chunk in the Supported Extensions Parameter in\n   either the INIT or INIT-ACK.
        \ Before sending a RE-CONFIG chunk, the\n   sender MUST ensure that the peer
        advertised support for the\n   re-configuration extension.  If the chunk type
        of the RE-CONFIG chunk\n   does not appear in the supported extension's list
        of chunks, then the\n   sender MUST NOT send any re-configuration request
        to the peer, and\n   any request by the application for such service SHOULD
        be responded\n   to with an appropriate error indicating that the peer SCTP
        stack does\n   not support the re-configuration extension.\n   At any given
        time, there MUST NOT be more than one request in flight.\n   So, if the Re-configuration
        Timer is running and the RE-CONFIG chunk\n   contains at least one request
        parameter, the chunk MUST be buffered.\n   After packaging the RE-CONFIG chunk
        and sending it to the peer, the\n   sender MUST start the Re-configuration
        Timer if the RE-CONFIG chunk\n   contains at least one request parameter.
        \ If it contains no request\n   parameters, the Re-configuration Timer MUST
        NOT be started.  This\n   timer MUST use the same value as SCTP's data transmission
        timer\n   (i.e., the retransmission timeout (RTO) timer) and MUST use\n   exponential
        backoff, doubling the value at every expiration.  If the\n   timer expires,
        besides doubling the value, the sender MUST retransmit\n   the RE-CONFIG chunk,
        increment the appropriate error counts (for both\n   the association and the
        destination), and perform threshold\n   management, possibly destroying the
        association if SCTP\n   retransmission thresholds are exceeded.\n"
      title: 5.1.1.  Sender-Side Procedures for the RE-CONFIG Chunk
    - contents:
      - "5.1.2.  Sender-Side Procedures for the Outgoing SSN Reset Request\n        Parameter\n
        \  When an SCTP sender wants to reset the SSNs of some or all outgoing\n   streams,
        it can send an Outgoing SSN Reset Request Parameter,\n   provided that the
        Re-configuration Timer is not running.  The\n   following steps must be followed:\n
        \  A1:  The sender MUST stop assigning new SSNs to new user data\n        provided
        by the upper layer for the affected streams and queue\n        it.  This is
        because it is not known whether the receiver of the\n        request will
        accept or deny it; moreover, a lost request might\n        cause an out-of-sequence
        error in a stream that the receiver is\n        not yet prepared to handle.\n
        \  A2:  The sender MUST assign the next re-configuration request\n        sequence
        number and MUST put it into the Re-configuration\n        Request Sequence
        Number field of the Outgoing SSN Reset Request\n        Parameter.  The next
        re-configuration request sequence number\n        MUST then be incremented
        by 1.\n   A3:  The Sender's Last Assigned TSN MUST be set to the next TSN
        the\n        sender assigns minus 1.\n   A4:  If this Outgoing SSN Reset Request
        Parameter is sent in response\n        to an Incoming SSN Reset Request Parameter,
        the stream numbers\n        MUST be copied from the Incoming SSN Reset Request
        Parameter to\n        the Outgoing SSN Reset Request Parameter.  The Re-configuration\n
        \       Response Sequence Number of the Outgoing SSN Reset Request\n        Parameter
        MUST be the Re-configuration Request Sequence Number\n        of the Incoming
        SSN Reset Request Parameter.  If this Outgoing\n        SSN Reset Request
        Parameter is sent at the request of the upper\n        layer and the sender
        requests that all outgoing streams be\n        reset, stream numbers SHOULD
        NOT be put into the Outgoing SSN\n        Reset Request Parameter.  If the
        sender requests that only some\n        outgoing streams be reset, these stream
        numbers MUST be placed\n        in the Outgoing SSN Reset Request Parameter.
        \ The\n        Re-configuration Response Sequence Number is the next expected\n
        \       Re-configuration Request Sequence Number of the peer minus 1.\n   A5:
        \ The Outgoing SSN Reset Request Parameter MUST be put into a\n        RE-CONFIG
        Chunk.  The Outgoing SSN Reset Request Parameter MAY\n        be put together
        with either an Incoming SSN Reset Request\n        Parameter or a Re-configuration
        Response Parameter, but not with\n        both.  It MUST NOT be put together
        with any other parameter, as\n        described in Section 3.1.\n   A6:  The
        RE-CONFIG chunk MUST be sent following the rules given in\n        Section
        5.1.1.\n"
      title: 5.1.2.  Sender-Side Procedures for the Outgoing SSN Reset Request
    - contents:
      - "5.1.3.  Sender-Side Procedures for the Incoming SSN Reset Request\n        Parameter\n
        \  When an SCTP sender wants to reset the SSNs of some or all incoming\n   streams,
        it can send an Incoming SSN Reset Request Parameter,\n   provided that the
        Re-configuration Timer is not running.  The\n   following steps must be followed:\n
        \  B1:  The sender MUST assign the next re-configuration request\n        sequence
        number and MUST put it into the Re-configuration\n        Request Sequence
        Number field of the Incoming SSN Reset Request\n        Parameter.  After
        assigning it, the next re-configuration\n        request sequence number MUST
        be incremented by 1.\n   B2:  If the sender wants all incoming streams to
        be reset, stream\n        numbers SHOULD NOT be put into the Incoming SSN
        Reset Request\n        Parameter.  If the sender wants only some incoming
        streams to be\n        reset, these stream numbers MUST be filled in the Incoming
        SSN\n        Reset Request Parameter.\n   B3:  The Incoming SSN Reset Request
        Parameter MUST be put into a\n        RE-CONFIG Chunk.  It MAY be put together
        with an Outgoing SSN\n        Reset Request Parameter but MUST NOT be put
        together with any\n        other parameter.\n   B4:  The RE-CONFIG chunk MUST
        be sent following the rules given in\n        Section 5.1.1.\n   When sending
        an Incoming SSN Reset Request, there is a potential that\n   the peer has
        just reset or is in the process of resetting the same\n   streams via an Outgoing
        SSN Reset Request.  This collision scenario\n   is discussed in Section 5.2.3.\n"
      title: 5.1.3.  Sender-Side Procedures for the Incoming SSN Reset Request
    - contents:
      - "5.1.4.  Sender-Side Procedures for the SSN/TSN Reset Request Parameter\n
        \  When an SCTP sender wants to reset the SSNs and TSNs, it can send an\n
        \  SSN/TSN Reset Request Parameter, provided that the Re-configuration\n   Timer
        is not running.  The following steps must be followed:\n   C1:  The sender
        MUST assign the next re-configuration request\n        sequence number and
        put it into the Re-configuration Request\n        Sequence Number field of
        the SSN/TSN Reset Request Parameter.\n        After assigning it, the next
        re-configuration request sequence\n        number MUST be incremented by 1.\n
        \  C2:  The sender has either no outstanding TSNs or considers all\n        outstanding
        TSNs abandoned.  The sender MUST queue any user\n        data, suspending
        any new transmissions and TSN assignment until\n        the reset procedure
        is finished by the peer either acknowledging\n        or denying the request.\n
        \  C3:  The SSN/TSN Reset Request Parameter MUST be put into a RE-CONFIG\n
        \       chunk.  There MUST NOT be any other parameter in this chunk.\n   C4:
        \ The RE-CONFIG chunk MUST be sent following the rules given in\n        Section
        5.1.1.\n   Only one SSN/TSN Reset Request SHOULD be sent within 30 seconds,\n
        \  which is considered a maximum segment lifetime (the IP MSL).\n"
      title: 5.1.4.  Sender-Side Procedures for the SSN/TSN Reset Request Parameter
    - contents:
      - "5.1.5.  Sender-Side Procedures for the Add Outgoing Streams Request\n        Parameter\n
        \  When an SCTP sender wants to increase the number of outbound streams\n
        \  to which it is able to send, it may add an Add Outgoing Streams\n   Request
        Parameter to the RE-CONFIG chunk.  Upon sending the request,\n   the sender
        MUST await a positive acknowledgment (Success) before\n   using any additional
        stream added by this request.  Note that new\n   streams are added adjacent
        to the previous streams with no gaps.\n   This means that if a request is
        made to add 2 streams to an\n   association that already has 5 (0-4), then
        the new streams, upon\n   successful completion, are streams 5 and 6.  A new
        stream MUST use\n   SSN 0 for its first ordered message.\n"
      title: 5.1.5.  Sender-Side Procedures for the Add Outgoing Streams Request
    - contents:
      - "5.1.6.  Sender-Side Procedures for the Add Incoming Streams Request\n        Parameter\n
        \  When an SCTP sender wants to increase the number of inbound streams\n   to
        which the peer is able to send, it may add an Add Incoming Streams\n   Request
        Parameter to the RE-CONFIG chunk.  Note that new streams are\n   added adjacent
        to the previous streams with no gaps.  This means that\n   if a request is
        made to add 2 streams to an association that already\n   has 5 (0-4), then
        the new streams, upon successful completion, are\n   streams 5 and 6.  A new
        stream MUST use SSN 0 for its first ordered\n   message.\n"
      title: 5.1.6.  Sender-Side Procedures for the Add Incoming Streams Request
    - contents:
      - "5.1.7.  Sender-Side Procedures for the Re-configuration Response\n        Parameter\n
        \  When an implementation receives a reset request parameter, it must\n   respond
        with a Re-configuration Response Parameter in the following\n   manner:\n
        \  D1:  The Re-configuration Request Sequence number of the incoming\n        request
        MUST be copied to the Re-configuration Response Sequence\n        Number field
        of the Re-configuration Response Parameter.\n   D2:  The result of the processing
        of the incoming request according\n        to Table 3 MUST be placed in the
        Result field of the\n        Re-configuration Response Parameter.\n   D3:
        \ If the incoming request is an SSN/TSN reset request, the\n        Sender's
        Next TSN field MUST be filled with the next TSN the\n        sender of this
        Re-configuration Response Parameter will assign.\n        For other requests,
        the Sender's Next TSN field, which is\n        optional, MUST NOT be used.\n
        \  D4:  If the incoming request is an SSN/TSN reset request, the\n        Receiver's
        Next TSN field MUST be filled with a TSN such that\n        the sender of
        the Re-configuration Response Parameter can be\n        sure it can discard
        received DATA chunks with smaller TSNs.  The\n        value SHOULD be the
        smallest TSN not acknowledged by the\n        receiver of the request plus
        2^31.  For other requests, the\n        Receiver's Next TSN field, which is
        optional, MUST NOT be used.\n"
      title: 5.1.7.  Sender-Side Procedures for the Re-configuration Response
    title: 5.1.  Sender-Side Procedures
  - contents:
    - '5.2.  Receiver-Side Procedures

      '
    - contents:
      - "5.2.1.  Receiver-Side Procedures for the RE-CONFIG Chunk\n   Upon reception
        of a RE-CONFIG chunk, each parameter within it SHOULD\n   be processed.  If
        multiple parameters have to be returned, they MUST\n   be put into one RE_CONFIG
        chunk.  If the received RE-CONFIG chunk\n   contains at least one request
        parameter, a selective acknowledgment\n   (SACK) chunk SHOULD be sent back
        and MAY be bundled with the\n   RE-CONFIG chunk.  If the received RE-CONFIG
        chunk contains at least\n   one request and based on the analysis of the Re-configuration
        Request\n   Sequence Numbers this is the last received RE-CONFIG chunk (i.e.,
        a\n   retransmission), the same RE-CONFIG chunk MUST to be sent back in\n
        \  response, as it was earlier.\n   The decision to deny a re-configuration
        request is an administrative\n   decision and may be user configurable even
        after the association has\n   formed.  If for whatever reason the endpoint
        does not wish to process\n   a received request parameter, it MUST send a
        corresponding response\n   parameter as described in Section 5.1.7, with an
        appropriate Result\n   field.\n      Implementation Note: It is recommended
        that a SACK be bundled with\n      any re-configuration response so that any
        retransmission\n      processing that needs to occur can be expedited.  A
        SACK chunk is\n      not required for this feature to work, but it will in
        effect help\n      minimize the delay in completing a re-configuration operation
        in\n      the face of any data loss.\n"
      title: 5.2.1.  Receiver-Side Procedures for the RE-CONFIG Chunk
    - contents:
      - "5.2.2.  Receiver-Side Procedures for the Outgoing SSN Reset Request\n        Parameter\n
        \  In the case that the endpoint is willing to perform a stream reset,\n   the
        following steps must be followed:\n   E1:  If the Re-configuration Timer is
        running for the\n        Re-configuration Request Sequence Number indicated
        in the\n        Re-configuration Response Sequence Number field, the\n        Re-configuration
        Request Sequence Number MUST be marked as\n        acknowledged.  If all Re-configuration
        Request Sequence Numbers\n        for which the Re-configuration Timer is
        running are\n        acknowledged, the Re-configuration Timer MUST be stopped.\n
        \  E2:  If the Sender's Last Assigned TSN is greater than the cumulative\n
        \       acknowledgment point, then the endpoint MUST enter \"deferred\n        reset
        processing\".  In this mode, any data arriving with a TSN\n        larger
        than the Sender's Last Assigned TSN for the affected\n        stream(s) MUST
        be queued locally and held until the cumulative\n        acknowledgment point
        reaches the Sender's Last Assigned TSN.\n        When the cumulative acknowledgment
        point reaches the last\n        assigned TSN, then proceed to the next step.
        \ If the endpoint\n        enters \"deferred reset processing\", it MUST put
        a Re-\n        configuration Response Parameter into a RE-CONFIG chunk\n        indicating
        \"In progress\" and MUST send the RE-CONFIG chunk.\n   E3:  If no stream numbers
        are listed in the parameter, then all\n        incoming streams MUST be reset
        to 0 as the next expected SSN.\n        If specific stream numbers are listed,
        then only these specific\n        streams MUST be reset to 0, and all other
        non-listed SSNs remain\n        unchanged.\n   E4:  Any queued TSNs (queued
        at step E2) MUST now be released and\n        processed normally.\n   E5:
        \ A Re-configuration Response Parameter MUST be put into a\n        RE-CONFIG
        chunk indicating successful processing.\n   E6:  The RE-CONFIG chunk MUST
        be sent after the incoming RE-CONFIG\n        chunk is processed completely.\n"
      title: 5.2.2.  Receiver-Side Procedures for the Outgoing SSN Reset Request
    - contents:
      - "5.2.3.  Receiver-Side Procedures for the Incoming SSN Reset Request\n        Parameter\n
        \  In the case that the endpoint is willing to perform a stream reset,\n   the
        following steps must be followed:\n   F1:  An Outgoing SSN Reset Request Parameter
        MUST be put into a\n        RE-CONFIG chunk according to Section 5.1.2.\n
        \  F2:  The RE-CONFIG chunk MUST be sent after the incoming RE-CONFIG\n        chunk
        is processed completely.\n   When a peer endpoint requests an Incoming SSN
        Reset Request, it is\n   possible that the local endpoint has just sent an
        Outgoing SSN Reset\n   Request on the same association and has not yet received
        a response.\n   In such a case, the local endpoint MUST do the following:\n
        \  o  If the Outgoing SSN Reset Request Parameter that was just sent\n      completely
        overlaps the received Incoming SSN Reset Request\n      Parameter, respond
        to the peer with an acknowledgment indicating\n      that there was \"Nothing
        to do\".\n   o  Otherwise, process the Incoming SSN Reset Request Parameter\n
        \     normally, responding to the peer with an acknowledgment.  Note\n      that
        this case includes the situation where some of the streams\n      requested
        overlap with the Outgoing SSN Reset Request that was\n      just sent.  Even
        in such a situation, the Incoming SSN Reset MUST\n      be processed normally,
        even though this means that (if the\n      endpoint elects to do the stream
        reset) streams that are already\n      at SSN 0 will be reset a subsequent
        time.\n   It is also possible that the Incoming request will arrive after
        the\n   Outgoing SSN Reset Request just completed.  In such a case, all of\n
        \  the streams being requested will be already set to 0.  If so, the\n   local
        endpoint SHOULD send back a Re-configuration Response with the\n   success
        code \"Nothing to do\".\n   Note that in either race condition, the local
        endpoint could\n   optionally also perform the reset.  This would result in
        streams that\n   are already at sequence 0 being reset again to 0, which would
        cause\n   no harm to the application but will add an extra message to the\n
        \  network.\n"
      title: 5.2.3.  Receiver-Side Procedures for the Incoming SSN Reset Request
    - contents:
      - "5.2.4.  Receiver-Side Procedures for the SSN/TSN Reset Request Parameter\n
        \  In the case that the endpoint is willing to perform an SSN/TSN reset,\n
        \  the following steps must be followed:\n   G1:  Compute an appropriate value
        for the Receiver's Next TSN -- the\n        TSN that the peer should use to
        send the next DATA chunk.  The\n        value SHOULD be the smallest TSN not
        acknowledged by the\n        receiver of the request plus 2^31.\n   G2:  Compute
        an appropriate value for the local endpoint's next TSN,\n        i.e., the
        next TSN assigned by the receiver of the SSN/TSN reset\n        chunk.  The
        value SHOULD be the highest TSN sent by the receiver\n        of the request
        plus 1.\n   G3:  The same processing as though a SACK chunk with no gap report\n
        \       and a cumulative TSN ACK of the Sender's Next TSN minus 1 were\n        received
        MUST be performed.\n   G4:  The same processing as though a FWD-TSN chunk
        (as defined in\n        [RFC3758]) with all streams affected and a new cumulative
        TSN\n        ACK of the Receiver's Next TSN minus 1 were received MUST be\n
        \       performed.\n   G5:  The next expected and outgoing SSNs MUST be reset
        to 0 for all\n        incoming and outgoing streams.\n   G6:  A Re-configuration
        Response Parameter MUST be put into a\n        RE-CONFIG chunk indicating
        successful processing.\n   G7:  The RE-CONFIG chunk MUST be sent after the
        incoming RE-CONFIG\n        chunk is processed completely.\n"
      title: 5.2.4.  Receiver-Side Procedures for the SSN/TSN Reset Request Parameter
    - contents:
      - "5.2.5.  Receiver-Side Procedures for the Add Outgoing Streams Request\n        Parameter\n
        \  When an SCTP endpoint receives a re-configuration request adding\n   additional
        streams, it MUST send a response parameter either\n   acknowledging or denying
        the request.  If the response is successful,\n   the receiver MUST add the
        requested number of inbound streams to the\n   association, initializing the
        next expected SSN to 0.  The SCTP\n   endpoint SHOULD deny the request if
        the number of streams exceeds a\n   limit that should be configurable by the
        application.\n"
      title: 5.2.5.  Receiver-Side Procedures for the Add Outgoing Streams Request
    - contents:
      - "5.2.6.  Receiver-Side Procedures for the Add Incoming Streams Request\n        Parameter\n
        \  When an SCTP endpoint receives a re-configuration request adding\n   additional
        incoming streams, it MUST either send a response parameter\n   denying the
        request or send a corresponding Add Outgoing Streams\n   Request Parameter,
        following the rules given in Section 5.1.5.  The\n   SCTP endpoint SHOULD
        deny the request if the number of streams\n   exceeds a limit that should
        be configurable by the application.\n"
      title: 5.2.6.  Receiver-Side Procedures for the Add Incoming Streams Request
    - contents:
      - "5.2.7.  Receiver-Side Procedures for the Re-configuration Response\n        Parameter\n
        \  On receipt of a Re-configuration Response Parameter, the following\n   must
        be performed:\n   H1:  If the Re-configuration Timer is running for the Re-\n
        \       configuration Request Sequence Number indicated in the Re-\n        configuration
        Response Sequence Number field, the\n        Re-configuration Request Sequence
        Number MUST be marked as\n        acknowledged.  If all Re-configuration Request
        Sequence Numbers\n        for which the Re-configuration Timer is running
        are\n        acknowledged, the Re-configuration Timer MUST be stopped.  If\n
        \       the timer was not running for the Re-configuration Request\n        Sequence
        Number, the processing of the Re-configuration Response\n        Parameter
        is complete.\n   H2:  If the Result field indicates \"In progress\", the timer
        for the\n        Re-configuration Request Sequence Number is started again.
        \ If\n        the timer runs out, the RE-CONFIG chunk MUST be retransmitted\n
        \       but the corresponding error counters MUST NOT be incremented.\n   H3:
        \ If the Result field does not indicate successful processing, the\n        processing
        of this response is complete.\n   H4:  If the request was an Outgoing SSN
        Reset Request, the affected\n        streams MUST now be reset and all queued
        data should now be\n        processed.  The assigning of SSNs is allowed again.\n
        \  H5:  If the request was an SSN/TSN Reset Request, new data MUST be\n        sent
        from the Receiver's Next TSN, beginning with SSN 0 for all\n        outgoing
        streams.  All incoming streams MUST be reset to 0 as\n        the next expected
        SSN.  The peer will send DATA chunks starting\n        with the Sender's Next
        TSN.\n   H6:  If the request was to add outgoing streams, the endpoint MUST\n
        \       add the additional streams to the association.  Note that an\n        implementation
        may allocate the memory at the time of the\n        request, but it MUST NOT
        use the streams until the peer has\n        responded with a positive acknowledgment.\n"
      title: 5.2.7.  Receiver-Side Procedures for the Re-configuration Response
    title: 5.2.  Receiver-Side Procedures
  title: 5.  Procedures
- contents:
  - "6.  Sockets API Considerations\n   This section describes how the sockets API
    defined in [RFC6458] needs\n   to be extended to make the features of SCTP re-configuration\n
    \  available to the application.\n   Please note that this section is informational
    only.\n"
  - contents:
    - "6.1.  Events\n   When the SCTP_ASSOC_CHANGE notification is delivered and both
      peers\n   support the extension described in this document,\n   SCTP_ASSOC_SUPPORTS_RE_CONFIG
      should be listed in the sac_info field.\n   The union sctp_notification {} is
      extended to contain three new\n   fields: sn_strreset_event, sn_assocreset_event,
      and\n   sn_strchange_event:\n   union sctp_notification {\n     struct sctp_tlv
      {\n       uint16_t sn_type; /* Notification type. */\n       uint16_t sn_flags;\n
      \      uint32_t sn_length;\n     } sn_header;\n     ...\n     struct sctp_stream_reset_event
      sn_strreset_event;\n     struct sctp_assoc_reset_event sn_assocreset_event;\n
      \    struct sctp_stream_change_event sn_strchange_event;\n     ...\n   }\n   The
      corresponding sn_type values are given in Table 4.\n   +--------------------------+----------------------------------------+\n
      \  | sn_type                  | valid field in union sctp_notification |\n   +--------------------------+----------------------------------------+\n
      \  | SCTP_STREAM_RESET_EVENT  | sn_strreset_event                      |\n   |
      SCTP_ASSOC_RESET_EVENT   | sn_assocreset_event                    |\n   | SCTP_STREAM_CHANGE_EVENT
      | sn_strchange_event                     |\n   +--------------------------+----------------------------------------+\n
      \                                 Table 4\n   These events are delivered when
      an incoming request was processed\n   successfully or the processing of an outgoing
      request has been\n   finished.\n"
    - contents:
      - "6.1.1.  Stream Reset Event\n   The event delivered has the following structure:\n
        \  struct sctp_stream_reset_event {\n     uint16_t strreset_type;\n     uint16_t
        strreset_flags;\n     uint32_t strreset_length;\n     sctp_assoc_t strreset_assoc_id;\n
        \    uint16_t strreset_stream_list[];\n   };\n   strreset_type:  This field
        should be SCTP_STREAM_RESET_EVENT.\n   strreset_flags:  This field is formed
        from the bitwise OR of one or\n      more of the following currently defined
        flags:\n      SCTP_STREAM_RESET_INCOMING_SSN:  The stream identifiers given
        in\n         strreset_stream_list[] refer to incoming streams of the\n         endpoint.\n
        \     SCTP_STREAM_RESET_OUTGOING_SSN:  The stream identifiers given in\n         strreset_stream_list[]
        refer to outgoing streams of the\n         endpoint.\n      SCTP_STREAM_RESET_DENIED:
        \ The corresponding request was denied by\n         the peer.\n      SCTP_STREAM_RESET_FAILED:
        \ The corresponding request failed.\n      At least one of SCTP_STREAM_RESET_INCOMING_SSN
        and\n      SCTP_STREAM_RESET_OUTGOING_SSN is set.  SCTP_STREAM_RESET_DENIED\n
        \     and SCTP_STREAM_RESET_FAILED are mutually exclusive.  If the\n      request
        was successful, none of these are set.\n   strreset_length:  This field is
        the total length in bytes of the\n      delivered event, including the header.\n
        \  strreset_assoc_id:  This association id field holds the identifier\n      for
        the association.  All notifications for a given association\n      have the
        same association identifier.  For one-to-one style\n      sockets, this field
        is ignored.\n   strreset_stream_list:  This is the list of stream identifiers
        to\n      which this event refers.  An empty list identifies all streams as\n
        \     being reset.  Depending on strreset_flags, the identifiers refer\n      to
        incoming or outgoing streams, or both.\n"
      title: 6.1.1.  Stream Reset Event
    - contents:
      - "6.1.2.  Association Reset Event\n   The event delivered has the following
        structure:\n   struct sctp_assoc_reset_event {\n     uint16_t assocreset_type;\n
        \    uint16_t assocreset_flags;\n     uint32_t assocreset_length;\n     sctp_assoc_t
        assocreset_assoc_id;\n     uint32_t assocreset_local_tsn;\n     uint32_t assocreset_remote_tsn;\n
        \  };\n   assocreset_type:  This field should be SCTP_ASSOC_RESET_EVENT.\n
        \  assocreset_flags:  This field is formed from the bitwise OR of one or\n
        \     more of the following currently defined flags:\n      SCTP_ASSOC_RESET_DENIED:
        \ The corresponding outgoing request was\n         denied by the peer.\n      SCTP_ASSOC_RESET_FAILED:
        \ The corresponding outgoing request\n         failed.\n      SCTP_ASSOC_RESET_DENIED
        and SCTP_ASSOC_RESET_FAILED are mutually\n      exclusive.  If the request
        was successful, none of these are set.\n   assocreset_length:  This field
        is the total length in bytes of the\n      delivered event, including the
        header.\n   assocreset_assoc_id:  This association id field holds the identifier\n
        \     for the association.  All notifications for a given association\n      have
        the same association identifier.  For one-to-one style\n      sockets, this
        field is ignored.\n   assocreset_local_tsn:  This field is the next TSN used
        by the\n      endpoint.\n   assocreset_remote_tsn:  This field is the next
        TSN used by the peer.\n"
      title: 6.1.2.  Association Reset Event
    - contents:
      - "6.1.3.  Stream Change Event\n   The event delivered has the following structure:\n
        \  struct sctp_stream_change_event {\n     uint16_t strchange_type;\n     uint16_t
        strchange_flags;\n     uint32_t strchange_length;\n     sctp_assoc_t strchange_assoc_id;\n
        \    uint16_t strchange_instrms;\n     uint16_t strchange_outstrms;\n   };\n
        \  strchange_type:  This field should be SCTP_STREAM_CHANGE_EVENT.\n   strchange_flags:
        \ This field is formed from the bitwise OR of one or\n      more of the following
        currently defined flags:\n      SCTP_STREAM_CHANGE_DENIED:  The corresponding
        request was denied\n         by the peer.\n      SCTP_STREAM_CHANGE_FAILED:
        \ The corresponding request failed.\n      SCTP_STREAM_CHANGE_DENIED and SCTP_STREAM_CHANGE_FAILED
        are\n      mutually exclusive.  If the request was successful, none of these\n
        \     are set.\n   strchange_length:  This field is the total length in bytes
        of the\n      delivered event, including the header.\n   strchange_assoc_id:
        \ This association id field holds the identifier\n      for the association.
        \ All notifications for a given association\n      have the same association
        identifier.  For one-to-one style\n      sockets, this field is ignored.\n
        \  strchange_instrms:  The number of streams that the peer is allowed to\n
        \     use outbound.\n   strchange_outstrms:  The number of streams that the
        endpoint is\n      allowed to use outbound.\n"
      title: 6.1.3.  Stream Change Event
    title: 6.1.  Events
  - contents:
    - "6.2.  Event Subscription\n   Subscribing to events as described in [RFC6458]
      uses a setsockopt()\n   call with the SCTP_EVENT socket option.  This option
      takes the\n   following structure, which specifies the association, the event
      type\n   (using the same value found in the event type field), and an on/off\n
      \  boolean.\n   struct sctp_event {\n     sctp_assoc_t se_assoc_id;\n     uint16_t
      \    se_type;\n     uint8_t      se_on;\n   };\n   The user fills in the se_type
      field with the same value found in the\n   strreset_type field, i.e., SCTP_STREAM_RESET_EVENT.
      \ The user will\n   also fill in the se_assoc_id field with either the association
      to set\n   this event on (this field is ignored for one-to-one style sockets)
      or\n   one of the reserved constant values defined in [RFC6458].  Finally,\n
      \  the se_on field is set with a 1 to enable the event or a 0 to disable\n   the
      event.\n"
    title: 6.2.  Event Subscription
  - contents:
    - "6.3.  Socket Options\n   Table 5 describes the new socket options that make
      the\n   re-configuration features accessible to the user.  They all use\n   IPPROTO_SCTP
      as their level.\n   If a call to setsockopt() is used to issue a re-configuration
      request\n   while the Re-configuration timer is running, setsockopt() will return\n
      \  -1, and error is set to EALREADY.\n   +--------------------------+---------------------------+-----+-----+\n
      \  | option name              | data type                 | get | set |\n   +--------------------------+---------------------------+-----+-----+\n
      \  | SCTP_ENABLE_STREAM_RESET | struct sctp_assoc_value   |  X  |  X  |\n   |
      SCTP_RESET_STREAMS       | struct sctp_reset_streams |     |  X  |\n   | SCTP_RESET_ASSOC
      \        | sctp_assoc_t              |     |  X  |\n   | SCTP_ADD_STREAMS         |
      struct sctp_add_streams   |     |  X  |\n   +--------------------------+---------------------------+-----+-----+\n
      \                                 Table 5\n"
    - contents:
      - "6.3.1.  Enable/Disable Stream Reset (SCTP_ENABLE_STREAM_RESET)\n   This option
        allows a user to control whether the SCTP implementation\n   processes or
        denies incoming requests in STREAM_RESET chunks.\n   The default is to deny
        all incoming requests.\n   To set or get this option, the user fills in the
        following structure:\n   struct sctp_assoc_value {\n     sctp_assoc_t assoc_id;\n
        \    uint32_t assoc_value;\n   };\n   assoc_id:  This parameter is ignored
        for one-to-one style sockets.\n      For one-to-many style sockets, this parameter
        indicates which\n      association the user is performing an action upon.\n
        \  assoc_value:  This field is formed from the bitwise OR of one or more\n
        \     of the following currently defined flags:\n      SCTP_ENABLE_RESET_STREAM_REQ:
        \ Process received Incoming/Outgoing\n         SSN Reset Requests if this
        flag is set; deny them if not.\n      SCTP_ENABLE_RESET_ASSOC_REQ:  Process
        received SSN/TSN Reset\n         Requests if this flag is set; deny them if
        not.\n      SCTP_ENABLE_CHANGE_ASSOC_REQ:  Process received Add Outgoing\n
        \        Streams Requests if this flag is set; deny them if not.\n      The
        default value is !(SCTP_ENABLE_RESET_STREAM_REQ|\n      SCTP_ENABLE_RESET_ASSOC_REQ|SCTP_ENABLE_CHANGE_ASSOC_REQ).\n
        \  Please note that using the option does not have any impact on\n   subscribing
        to any related events.\n"
      title: 6.3.1.  Enable/Disable Stream Reset (SCTP_ENABLE_STREAM_RESET)
    - contents:
      - "6.3.2.  Reset Incoming and/or Outgoing Streams (SCTP_RESET_STREAMS)\n   This
        option allows the user to request the reset of incoming and/or\n   outgoing
        streams.\n   To set or get this option, the user fills in the following structure:\n
        \  struct sctp_reset_streams {\n     sctp_assoc_t srs_assoc_id;\n     uint16_t
        srs_flags;\n     uint16_t srs_number_streams;\n     uint16_t srs_stream_list[];\n
        \  };\n   srs_assoc_id:  This parameter is ignored for one-to-one style\n
        \     sockets.  For one-to-many style sockets, this parameter indicates\n
        \     which association the user is performing an action upon.\n   srs_flags:
        \ This parameter describes which class of streams is reset.\n      It is formed
        from the bitwise OR of one or more of the following\n      currently defined
        flags:\n      *  SCTP_STREAM_RESET_INCOMING\n      *  SCTP_STREAM_RESET_OUTGOING\n
        \  srs_number_streams:  This parameter is the number of elements in the\n
        \     srs_stream_list.  If it is zero, the operation is performed on all\n
        \     streams.\n   srs_stream_list:  This parameter contains a list of stream\n
        \     identifiers the operation is performed upon.  It contains\n      srs_number_streams
        elements.  If it is empty, the operation is\n      performed on all streams.
        \ Depending on srs_flags, the identifiers\n      refer to incoming or outgoing
        streams, or both.\n"
      title: 6.3.2.  Reset Incoming and/or Outgoing Streams (SCTP_RESET_STREAMS)
    - contents:
      - "6.3.3.  Reset SSN/TSN (SCTP_RESET_ASSOC)\n   This option allows a user to
        request the reset of the SSN/TSN.\n   To set this option, the user provides
        an option_value of type\n   sctp_assoc_t.\n   On one-to-one style sockets,
        the option_value is ignored.  For one-\n   to-many style sockets, the option_value
        is the association identifier\n   of the association the action is to be performed
        upon.\n"
      title: 6.3.3.  Reset SSN/TSN (SCTP_RESET_ASSOC)
    - contents:
      - "6.3.4.  Add Incoming and/or Outgoing Streams (SCTP_ADD_STREAMS)\n   This
        option allows a user to request the addition of a number of\n   incoming and/or
        outgoing streams.\n   To set this option, the user fills in the following
        structure:\n   struct sctp_add_streams {\n     sctp_assoc_t sas_assoc_id;\n
        \    uint16_t sas_instrms;\n     uint16_t sas_outstrms;\n   };\n   sas_assoc_id:
        \ This parameter is ignored for one-to-one style\n      sockets.  For one-to-many
        style sockets, this parameter indicates\n      which association the user
        is performing an action upon.\n   sas_instrms:  This parameter is the number
        of incoming streams\n      to add.\n   sas_outstrms:  This parameter is the
        number of outgoing streams\n      to add.\n   An endpoint can limit the number
        of incoming and outgoing streams by\n   using the sinit_max_instreams field
        in the struct sctp_initmsg{} when\n   issuing an SCTP_INIT socket option,
        as defined in [RFC6458].  An\n   incoming request asking for more streams
        than allowed will be denied.\n"
      title: 6.3.4.  Add Incoming and/or Outgoing Streams (SCTP_ADD_STREAMS)
    title: 6.3.  Socket Options
  title: 6.  Sockets API Considerations
- contents:
  - "7.  Security Considerations\n   The SCTP sockets API as described in [RFC6458]
    exposes the sequence\n   numbers of received DATA chunks to the application.  An
    application\n   might expect them to be monotonically increasing.  When using
    the\n   re-configuration extension, this might no longer be true.  Therefore,\n
    \  the applications must enable this extension explicitly before it is\n   used.
    \ In addition, applications must subscribe explicitly to\n   notifications related
    to the re-configuration extension before\n   receiving them.\n   SCTP associations
    are protected against blind attackers by using\n   verification tags.  This is
    still valid when using the\n   re-configuration extension.  Therefore, this extension
    does not add\n   any additional security risk to SCTP in relation to blind attackers.\n
    \  When both the SSN and TSN are reset, the maximum segment lifetime is\n   used
    to avoid TSN wrap-around.\n"
  title: 7.  Security Considerations
- contents:
  - "8.  IANA Considerations\n   This document (RFC 6525) is the reference for all
    registrations\n   described in this section.  The changes are described below.\n"
  - contents:
    - "8.1.  A New Chunk Type\n   A chunk type has been assigned by IANA.  The values
      given in Table 1\n   have been used.  IANA has assigned this value from the
      pool of chunks\n   with the upper two bits set to '10'.\n   This has added a
      line in the \"Chunk Types\" registry for SCTP:\n   Chunk Types\n   ID Value
      \   Chunk Type                                     Reference\n   -----       ----------
      \                                    ---------\n   130         Re-configuration
      Chunk (RE-CONFIG)             [RFC6525]\n   The registration table as defined
      in [RFC6096] for the chunk flags of\n   this chunk type is empty.\n"
    title: 8.1.  A New Chunk Type
  - contents:
    - "8.2.  Six New Chunk Parameter Types\n   Six chunk parameter types have been
      assigned by IANA.  It the values\n   given in Table 2 have been used.  IANA
      has assigned these values from\n   the pool of parameters with the upper two
      bits set to '00'.\n   Six additional lines in the \"Chunk Parameter Types\"
      registry for SCTP\n   have been added:\n   Chunk Parameter Types\n   ID Value
      \ Chunk Parameter Type                             Reference\n   --------  ------------------------------------------------
      ---------\n   13        Outgoing SSN Reset Request Parameter             [RFC6525]\n
      \  14        Incoming SSN Reset Request Parameter             [RFC6525]\n   15
      \       SSN/TSN Reset Request Parameter                  [RFC6525]\n   16        Re-configuration
      Response Parameter              [RFC6525]\n   17        Add Outgoing Streams
      Request Parameter           [RFC6525]\n   18        Add Incoming Streams Request
      Parameter           [RFC6525]\n"
    title: 8.2.  Six New Chunk Parameter Types
  title: 8.  IANA Considerations
- contents:
  - "9.  Acknowledgments\n   The authors wish to thank Paul Aitken, Gorry Fairhurst,
    Tom Petch,\n   Kacheong Poon, Irene Ruengeler, Robin Seggelmann, Gavin Shearer,
    and\n   Vlad Yasevich for their invaluable comments.\n"
  title: 9.  Acknowledgments
- contents:
  - '10.  References

    '
  - contents:
    - "10.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use
      in RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n   [RFC3758]  Stewart, R., Ramalho, M., Xie, Q., Tuexen, M., and P.\n
      \             Conrad, \"Stream Control Transmission Protocol (SCTP)\n              Partial
      Reliability Extension\", RFC 3758, May 2004.\n   [RFC4960]  Stewart, R., Ed.,
      \"Stream Control Transmission Protocol\",\n              RFC 4960, September
      2007.\n   [RFC5061]  Stewart, R., Xie, Q., Tuexen, M., Maruyama, S., and M.\n
      \             Kozuka, \"Stream Control Transmission Protocol (SCTP)\n              Dynamic
      Address Reconfiguration\", RFC 5061,\n              September 2007.\n   [RFC6096]
      \ Tuexen, M. and R. Stewart, \"Stream Control Transmission\n              Protocol
      (SCTP) Chunk Flags Registration\", RFC 6096,\n              January 2011.\n"
    title: 10.1.  Normative References
  - contents:
    - "10.2.  Informative References\n   [RFC6458]  Stewart, R., Tuexen, M., Poon,
      K., Lei, P., and V.\n              Yasevich, \"Sockets API Extensions for the
      Stream Control\n              Transmission Protocol (SCTP)\", RFC 6458, December
      2011.\n"
    title: 10.2.  Informative References
  title: 10.  References
- contents:
  - "Appendix A.  Examples of the Reconfiguration Procedures\n   Please note that
    this appendix is informational only.\n   The following message flows between Endpoints
    E-A and E-Z illustrate\n   the described procedures.  The time progresses in downward
    direction.\n   The following example illustrates E-A resetting streams 1 and 2
    for\n   just its outgoing streams.\n      E-A                                         E-Z\n
    \     ----------[RE-CONFIG(OUT-REQ:X/1,2)]---------->\n      <-------------[RE-CONFIG(RESP:X)]--------------\n
    \  The following example illustrates E-A resetting streams 1 and 2 for\n   just
    its incoming streams.\n      E-A                                         E-Z\n
    \     -----------[RE-CONFIG(IN-REQ:X/1,2)]---------->\n      <--------[RE-CONFIG(OUT-REQ:Y,X/1,2)]----------\n
    \     -------------[RE-CONFIG(RESP:Y)]-------------->\n   The following example
    illustrates E-A resetting all streams in both\n   directions.\n      E-A                                         E-Z\n
    \     -----[RE-CONFIG(OUT-REQ:X,Y-1|IN-REQ:X+1)]---->\n      <------[RE-CONFIG(RESP:X|OUT-REQ:Y,X+1)]-------\n
    \     -------------[RE-CONFIG(RESP:Y)]-------------->\n   The following example
    illustrates E-A requesting that the streams and\n   TSNs be reset.  At completion,
    E-A has the new sending TSN (selected\n   by the peer) of B, and E-Z has the new
    sending TSN of A (also\n   selected by the peer).\n      E-A                                         E-Z\n
    \     ------------[RE-CONFIG(TSN-REQ:X)]------------>\n      <-----[RE-CONFIG(RESP:X/S-TSN=A,
    R-TSN=B)]-----\n   The following example illustrates E-A requesting the addition
    of 3\n   outgoing streams.\n      E-A                                         E-Z\n
    \     --------[RE-CONFIG(ADD_OUT_STRMS:X/3)]-------->\n      <-------------[RE-CONFIG(RESP:X)]--------------\n
    \  The following example illustrates E-A requesting the addition of 3\n   incoming
    streams.\n      E-A                                         E-Z\n      ---------[RE-CONFIG(ADD_IN_STRMS:X/3)]-------->\n
    \     <----[RE-CONFIG(ADD_OUT_STRMS-REQ:Y,X/3)]------\n      -------------[RE-CONFIG(RESP:Y)]-------------->\n"
  title: Appendix A.  Examples of the Reconfiguration Procedures
- contents:
  - "Authors' Addresses\n   Randall R. Stewart\n   Adara Networks\n   Chapin, SC  29036\n
    \  USA\n   EMail: randall@lakerest.net\n   Michael Tuexen\n   Muenster University
    of Applied Sciences\n   Stegerwaldstr. 39\n   48565 Steinfurt\n   DE\n   EMail:
    tuexen@fh-muenster.de\n   Peter Lei\n   Cisco Systems, Inc.\n   9501 Technology
    Blvd.\n   West Office Center\n   Rosemont, IL  60018\n   USA\n   EMail: peterlei@cisco.com\n"
  title: Authors' Addresses
