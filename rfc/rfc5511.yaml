- contents:
  - "         Routing Backus-Naur Form (RBNF): A Syntax Used to Form\n       Encoding
    Rules in Various Routing Protocol Specifications\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents
    in effect on the date of\n   publication of this document (http://trustee.ietf.org/license-info).\n
    \  Please review these documents carefully, as they describe your rights\n   and
    restrictions with respect to this document.\n   This document may contain material
    from IETF Documents or IETF\n   Contributions published or made publicly available
    before November\n   10, 2008.  The person(s) controlling the copyright in some
    of this\n   material may not have granted the IETF Trust the right to allow\n
    \  modifications of such material outside the IETF Standards Process.\n   Without
    obtaining an adequate license from the person(s) controlling\n   the copyright
    in such materials, this document may not be modified\n   outside the IETF Standards
    Process, and derivative works of it may\n   not be created outside the IETF Standards
    Process, except to format\n   it for publication as an RFC or to translate it
    into languages other\n   than English.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   Several protocols have been specified in the Routing Area of the
    IETF\n   using a common variant of the Backus-Naur Form (BNF) of representing\n
    \  message syntax.  However, there is no formal definition of this\n   version
    of BNF.\n   There is value in using the same variant of BNF for the set of\n   protocols
    that are commonly used together.  This reduces confusion\n   and simplifies implementation.\n
    \  Updating existing documents to use some other variant of BNF that is\n   already
    formally documented would be a substantial piece of work.\n   This document provides
    a formal definition of the variant of BNF that\n   has been used (that we call
    Routing BNF) and makes it available for\n   use by new protocols.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Terminology ................................................3\n      1.2.
    Existing Uses ..............................................3\n      1.3. Applicability
    Statement ....................................4\n   2. Formal Definitions ..............................................4\n
    \     2.1. Rule Definitions ...........................................5\n           2.1.1.
    Rule Name Delimitation ..............................5\n           2.1.2. Objects
    .............................................5\n           2.1.3. Constructs ..........................................6\n
    \          2.1.4. Messages ............................................6\n      2.2.
    Operators ..................................................6\n           2.2.1.
    Assignment ..........................................6\n           2.2.2. Concatenation
    .......................................7\n           2.2.3. Optional Presence
    ...................................7\n           2.2.4. Alternatives ........................................8\n
    \          2.2.5. Repetition ..........................................9\n           2.2.6.
    Grouping ...........................................10\n      2.3. Editorial Conventions
    .....................................11\n           2.3.1. White Space ........................................11\n
    \          2.3.2. Line Breaks ........................................11\n           2.3.3.
    Ordering ...........................................11\n      2.4. Precedence
    ................................................11\n   3. Automated Validation
    ...........................................13\n   4. Security Considerations ........................................13\n
    \  5. Acknowledgments ................................................13\n   6.
    References .....................................................13\n      6.1.
    Normative References ......................................13\n      6.2. Informative
    References ....................................13\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   Backus-Naur Form (BNF) has been used to specify the message
    formats\n   of several protocols within the Routing Area of the IETF.\n   Unfortunately,
    these specifications are not based on any specific\n   formal definition of BNF,
    and they differ slightly from the\n   definitions provided in other places.\n
    \  It is clearly valuable to have a formal definition of the syntax-\n   defining
    language that is used.  It would be possible to convert all\n   existing specifications
    to use an established specification of BNF\n   (for example, Augmented BNF or
    ABNF [RFC5234]); however, this would\n   require a lot of work.  It should be
    noted that in ABNF the terminals\n   are integers (characters/bytes), while in
    the BNF form used to define\n   message formats, the terminals are \"objects\"
    (some kind of message\n   elements, but not individual bytes or characters) or
    entire\n   \"messages\".  This means that converting existing specifications to\n
    \  use an established BNF specification would also require extensions to\n   that
    BNF specification.\n   On the other hand, the variant of BNF used by the specifications
    in\n   question (which is similar to a subset of Extended BNF [EBNF]) is\n   consistent
    and has only a small number of constructs.  It makes\n   sense, therefore, to
    provide a definition of this variant of BNF to\n   allow ease of interpretation
    of existing documents and to facilitate\n   the development of new protocol specifications
    using the same variant\n   of BNF.  A specification will also facilitate automated
    verification\n   of the formal definitions used in future documents.\n   This
    document provides such a specification and names the BNF variant\n   Routing BNF
    (RBNF).\n"
  - contents:
    - "1.1.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
    title: 1.1.  Terminology
  - contents:
    - "1.2.  Existing Uses\n   The first notable use of the variant of BNF that concerns
      us is in\n   the specification of the Resource Reservation Protocol (RSVP)\n
      \  [RFC2205].  RSVP has been extended for use in Multiprotocol Label\n   Switching
      (MPLS) networks to provide signaling for Traffic\n   Engineering (TE) [RFC3209],
      and this has been developed for use as\n   the signaling protocol in Generalized
      MPLS (GMPLS) networks\n   [RFC3473].\n   Each of these three uses of RSVP has
      given rise to a large number of\n   specifications of protocol extensions to
      provide additional features\n   over and above those in the base documents.
      \ Each new feature is\n   defined in its own document using the common variant
      of BNF.\n   New protocols have also been specified using the same variant of
      BNF.\n   This has arisen partly because the developers were familiar with the\n
      \  BNF used in [RFC2205], etc., but also because of the overlap between\n   the
      protocols, especially with respect to the network objects\n   controlled and
      operated.\n   Notable among these additional protocols are the Link Management\n
      \  Protocol (LMP) [RFC4204] and the Path Computation Element Protocol\n   (PCEP)
      [RFC5440].  In both cases, further documents that specify\n   protocol extensions
      also use the same variant of BNF.\n"
    title: 1.2.  Existing Uses
  - contents:
    - "1.3.  Applicability Statement\n   RBNF as defined in this document is primarily
      applicable for the\n   protocols listed in the previous section.  The specification
      may be\n   used to facilitate the interpretation of the pre-existing RFCs that\n
      \  are referenced.  It should also be used in the specification of\n   extensions
      to those protocols.\n   RBNF could also be used for the specification of new
      protocols.  This\n   is most appropriate for the development of new protocols
      that are\n   closely related to those that already use RBNF.  For example, PCEP
      is\n   closely related to RSVP-TE, and when it was developed, the PCE\n   working
      group chose to use the same form of BNF as was already used\n   in the RSVP-TE
      specifications.\n   If a wholly new protocol is being developed and is not related
      to a\n   protocol that already uses RBNF, the working group should consider\n
      \  carefully whether to use RBNF or to use a more formally specified and\n   broader
      form of BNF such as ABNF [RFC5234].\n   The use of RBNF to specify extensions
      to protocols that do not\n   already use RBNF (i.e., that use some other form
      of BNF) is not\n   recommended.\n"
    title: 1.3.  Applicability Statement
  title: 1.  Introduction
- contents:
  - "2.  Formal Definitions\n   The basic building blocks of BNF are rules and operators.
    \ At its\n   simplest form, a rule in the context we are defining is a protocol\n
    \  object that is traditionally defined by a bit diagram in the protocol\n   specification.
    \ Further and more complex rules are constructed by\n   combining other rules
    using operators.  The most complex rule is the\n   message that is constructed
    from an organization of protocol objects\n   as specified by the operators.\n
    \  An RBNF specification consists of a sequence of rule definitions\n   using
    the operators defined in Section 2.2.  One rule may be\n   constructed from a
    set of other rules using operators.  The order of\n   definition of rules does
    not matter.  That is, the subordinate rules\n   MAY be defined first and then
    used in subsequent definitions of\n   further rules, or the top-level rules MAY
    be defined first followed\n   by a set of definitions of the subordinate rules.\n
    \  Rule definitions are read left-to-right on any line, and the lines\n   are
    read top-to-bottom on the page.  This becomes particularly\n   important when
    considering sequences of rules and operators.\n"
  - contents:
    - "2.1.  Rule Definitions\n   No semantics should be assumed from special characters
      used in rule\n   names.  For example, it would be wrong to assume that a rule
      carries\n   a decimal number because the rule name begins or ends with the letter\n
      \  \"d\".  However, individual specifications MAY choose to assign rule\n   names
      in any way that makes the human interpretation of the rule\n   easier.\n"
    - contents:
      - "2.1.1.  Rule Name Delimitation\n   All rule names are enclosed by angle brackets
        (\"<\" and \">\").  Rule\n   names MAY include any printable characters, but
        MUST NOT include tabs\n   or line feeds/breaks.\n   Example:\n     <Path Message>\n"
      title: 2.1.1.  Rule Name Delimitation
    - contents:
      - "2.1.2.  Objects\n   The most basic (indivisible) rule is termed an object.
        \ The\n   definition of an object is derived from its context.\n   Objects
        are typically named in uppercase.  They do not usually use\n   spaces within
        the name, favoring underbars (\"_\").\n   Example:\n     <SENDER_TEMPLATE>\n"
      title: 2.1.2.  Objects
    - contents:
      - "2.1.3.  Constructs\n   Rules that are constructed from other rules using
        operators are\n   termed constructs.\n   Constructs are named in lowercase,
        although capitals are commonly\n   used to indicate acronyms.  Spaces and
        hyphens are used between words\n   within names.\n   Example:\n     <sender
        descriptor>\n"
      title: 2.1.3.  Constructs
    - contents:
      - "2.1.4.  Messages\n   The final objective is the definition of messages.  These
        are rules\n   that are constructed from objects and constructs using operators.\n
        \  The only syntactic difference between a message and a construct is\n   that
        no other rule is typically constructed from a message.\n   Messages are typically
        named in title case.\n   Example:\n     <Path Message>\n"
      title: 2.1.4.  Messages
    title: 2.1.  Rule Definitions
  - contents:
    - "2.2.  Operators\n   Operators are used to build constructs and messages from
      objects and\n   constructs.\n"
    - contents:
      - "2.2.1.  Assignment\n   Assignment is used to form constructs and messages.\n
        \  Meaning:\n     The named construct or message on the left-hand side is
        defined to\n     be set equal to the right-hand side of the assignment.\n
        \  Encoding:\n     colon, colon, equal sign (\"::=\")\n   Example:\n     <WF
        flow descriptor> ::= <FLOWSPEC>\n   Note:\n     The left-hand side of the
        assignment and the assignment operator\n     MUST be present on the same line.\n"
      title: 2.2.1.  Assignment
    - contents:
      - "2.2.2.  Concatenation\n   Objects and constructs can be combined as a sequence
        to form a new\n   construct or a message.\n   Meaning:\n     The objects or
        constructs MUST be present in the order specified.\n     The order of reading
        RBNF is stated in Section 2.\n   Encoding:\n     A sequence of objects and
        constructs usually separated by spaces.\n     The objects in a sequence MAY
        be separated by line breaks.\n   Example:\n     <SE flow descriptor> ::= <FLOWSPEC>
        <filter spec list>\n   Note:\n     See Section 2.3.3 for further comments
        on the ordering of objects\n     and constructs.\n"
      title: 2.2.2.  Concatenation
    - contents:
      - "2.2.3.  Optional Presence\n   Objects and constructs can be marked as optionally
        present.\n   Meaning:\n     The optional objects or constructs MAY be present
        or absent within\n     the assignment.  Unless indicated as optional, objects
        and\n     constructs are mandatory and MUST be present.  The optional\n     operator
        can also be nested to give a hierarchical dependency of\n     presence as
        shown in the example below.\n   Encoding:\n     Contained in square brackets
        (\"[\" and \"]\").\n   Example:\n     <PathTear Message> ::= <Common Header>
        [ <INTEGRITY> ]\n                            <SESSION> <RSVP_HOP>\n                            [
        <sender descriptor> ]\n   Example of nesting:\n     The optional operator
        can be nested.  For example,\n       <construct> ::= <MAND> [ <OPT_1> [ <OPT_2>
        ] ]\n     In this construction, the object OPT_2 can only be present if OPT_1\n
        \    is also present.\n   Note:\n     The set of objects and constructs within
        the same pair of square\n     brackets is treated as a unit (an unnamed construct).
        \ This means\n     that when multiple objects and constructs are included
        within the\n     same pair of square brackets, all MUST be included when one
        is\n     included, unless nested square brackets are used as in the previous\n
        \    example.\n"
      title: 2.2.3.  Optional Presence
    - contents:
      - "2.2.4.  Alternatives\n   Choices can be indicated within assignments.\n   Meaning:\n
        \    Either one rule or the other MUST be present.\n   Encoding:\n     The
        pipe symbol (\"|\") is used between the objects or constructs\n     that are
        alternatives.\n   Example:\n     <flow descriptor list> ::= <FF flow descriptor
        list>\n                                | <SE flow descriptor>\n   Notes:\n
        \    1. Use of explicit grouping (Section 2.2.6) is RECOMMENDED to avoid\n
        \       confusion.  Implicit grouping using line breaks (Section 2.3.2)\n
        \       is often used, but gives rise to potential misinterpretation and\n
        \       SHOULD be avoided in new definitions.\n     2. Multiple members of
        alternate sets can give rise to confusion.\n        For example:\n        <flow
        descriptor list> ::=  <empty> |\n                             <flow descriptor
        list> <flow descriptor>\n        could be read to mean that an instance of
        <flow descriptor> must\n        be present or that it is optional.\n        To
        avoid this type of issue, explicit grouping (see Section\n        2.2.6),
        or an intermediary MUST be used in all new documents\n        (existing uses
        are not deprecated, and automatic parsers need to\n        handle existing
        RFCs).  See also Section 2.4 for a description\n        of precedence rules.\n
        \       Thus:\n          <construct> ::= <ALT_A> <ALT_B> | <ALT_C> <ALT_D>\n
        \       is not allowed in new documents and MUST be presented using\n        grouping
        or using an intermediary construct.  For example, and\n        depending on
        intended meaning:\n          <construct> ::= ( <ALT_A> <ALT_B> ) | ( <ALT_C>
        <ALT_D> )\n          or\n          <construct> ::= <ALT_A> ( <ALT_B> | <ALT_C>
        ) <ALT_D>\n        or\n          <intermediary X> ::= <ALT_A> <ALT_B>\n          <intermediary
        Y> ::= <ALT_C> <ALT_D>\n          <construct> ::= <intermediary X> | <intermediary
        Y>\n          or\n          <intermediary Z> ::= <ALT_B> | <ALT_C>\n          <construct>
        ::= <ALT_A> <intermediary Z> <ALT_D>\n"
      title: 2.2.4.  Alternatives
    - contents:
      - "2.2.5.  Repetition\n   It could be the case that a sequence of identical
        objects or\n   constructs is required within an assignment.\n   Meaning:\n
        \    MAY repeat the preceding object, intermediate construct, or\n     construct.\n
        \  Encoding:\n     Three dots (\"...\").\n   Example:\n     <Path Message>
        ::= <Common Header> [ <INTEGRITY> ]\n                        <SESSION> <RSVP_HOP>\n
        \                       <TIME_VALUES>\n                        [ <POLICY_DATA>
        ... ]\n                        [ <sender descriptor> ]\n   Notes:\n     1.
        A set of zero or more objects or constructs can be achieved by\n        combining
        with the Optional concept as shown in the example\n        above.\n     2.
        Sequences can also be encoded by building a recursive construct\n        using
        the Alternative operator.  For example:\n          <sequence> ::= <OBJECT>
        |\n                         ( <OBJECT> <sequence> )\n     3. Repetition can
        also be applied to a component of an assignment\n        to indicate the optional
        repetition of that component.  For\n        example, the Notify message in
        [RFC3473] is defined as follows:\n         <Notify message> ::=\n                          <Common
        Header> [<INTEGRITY>]\n                          [ [<MESSAGE_ID_ACK> | <MESSAGE_ID_NACK>]
        ... ]\n                          [ <MESSAGE_ID> ]\n                          <ERROR_SPEC>
        <notify session list>\n        In this example, there is a sequence of zero
        or more instances\n        of [<MESSAGE_ID_ACK> | <MESSAGE_ID_NACK>].  One
        could argue that\n        the use of grouping (see Section 2.2.6) or a recursive
        construct\n        (see Note 2, above) would be more clear.\n"
      title: 2.2.5.  Repetition
    - contents:
      - "2.2.6.  Grouping\n   Meaning:\n     A group of objects or constructs to be
        treated together.  This\n     notation is not mandatory but is RECOMMENDED
        for clarity.  See\n     Section 2.4 on Precedence.\n   Encoding:\n     Round
        brackets (\"(\" and \")\") enclosing a set of objects,\n     constructs, and
        operators.\n   Example:\n     <group> ::= ( <this> <that> )\n   Notes:\n     1.
        The precedence rule in Section 2.4 means that the use of\n        grouping
        is not necessary for the formal interpretation of the\n        BNF representation.
        \ However, grouping can make the BNF easier\n        to parse unambiguously.
        \ Either grouping or an intermediate\n        construct MUST be used for multi-alternates
        (Section 2.2.4).\n     2. Line breaks (Section 2.3.2) are often used to clarify
        grouping\n        as can be seen in the definition of <sequence> in Section
        2.2.5,\n        but these are open to misinterpretation, and explicit grouping\n
        \       is RECOMMENDED.\n     3. A practical alternative to grouping is the
        definition of\n        intermediate constructs as illustrated in Note 2 of
        Section\n        2.2.4.\n"
      title: 2.2.6.  Grouping
    title: 2.2.  Operators
  - contents:
    - '2.3.  Editorial Conventions

      '
    - contents:
      - "2.3.1.  White Space\n   White space (that is space characters) between operators,
        objects,\n   and constructs is ignored but SHOULD be used for readability.\n"
      title: 2.3.1.  White Space
    - contents:
      - "2.3.2.  Line Breaks\n   Line breaks within an assignment are ignored but
        SHOULD be used for\n   readability.\n   Line breaks are often used to imply
        grouping within the precedence\n   rules set out in Section 2.4, but explicit
        grouping (Section 2.2.6)\n   or intermediary constructs (Section 2.2.4) SHOULD
        be used in new\n   definitions.\n   A line break MUST NOT be present between
        the left-hand side of an\n   assignment and the assignment operator (see Section
        2.2.1).\n   New assignments (i.e., new construct or message definitions) MUST\n
        \  begin on a new line.\n"
      title: 2.3.2.  Line Breaks
    - contents:
      - "2.3.3.  Ordering\n   The ordering of objects and constructs in an assignment
        is explicit.\n   Protocol specifications MAY opt to state that ordering is
        only\n   RECOMMENDED.  In this case, elements of a list of objects and\n   constructs
        MAY be received in any order.\n"
      title: 2.3.3.  Ordering
    title: 2.3.  Editorial Conventions
  - contents:
    - "2.4.  Precedence\n   Precedence is the main opportunity for confusion in the
      use of this\n   BNF.  In particular, the use of alternatives mixed with\n   concatenations
      can give rise to different interpretations of the BNF.\n   Although precedence
      can be deduced from a \"proper\" reading of the BNF\n   using the rules defined
      above and the precedence ordering shown\n   below, authors are strongly RECOMMENDED
      to use grouping (Section\n   2.2.6) and ordering (Section 2.3.3) to avoid cases
      where the reader\n   would otherwise be required to understand the precedence
      rules.\n   Automated readers are REQUIRED to parse rules correctly with or\n
      \  without this use of grouping.\n   The various mechanisms described in the
      previous sections have the\n   following precedence, from highest (binding tightest)
      at the top, to\n   lowest (and loosest) at the bottom:\n      objects, constructs\n
      \     repetition\n      grouping, optional\n      concatenation\n      alternative\n
      \  Note:\n     Precedence is the main opportunity for confusion in the use of
      BNF.\n     Authors are strongly RECOMMENDED to use grouping (Section 2.2.6)
      in\n     all places where there is any scope for misinterpretation even when\n
      \    the meaning is obvious to the authors.\n   Example:\n     An example of
      the confusion in precedence can be found in Section\n     3.1.4 of [RFC2205]
      and is mentioned in Section 2.2.4.\n     <flow descriptor list> ::=  <empty>
      |\n                      <flow descriptor list> <flow descriptor>\n     The
      implementer MUST decide which of the following is intended:\n     a.  <flow
      descriptor list> ::= <empty> |\n                            ( <flow descriptor
      list> <flow descriptor> )\n     b.  <flow descriptor list> ::= ( <empty> | <flow
      descriptor list> )\n                                    <flow descriptor>\n
      \    The line break MAY be interpreted as implying grouping, but that is\n     not
      an explicit rule.  However, the precedence rules say that\n     concatenation
      has higher precedence than the Alternative operator.\n     Thus, the text in
      [RFC2205] SHOULD be interpreted as shown in\n     formulation a.\n     Similarly
      (from the same section of [RFC2205]):\n       <flow descriptor list> ::=\n                        <FLOWSPEC>
      \ <FILTER_SPEC>  |\n                        <flow descriptor list> <FF flow
      descriptor>\n     SHALL be interpreted as:\n       <flow descriptor list> ::=\n
      \                     ( <FLOWSPEC> <FILTER_SPEC> ) |\n                      (
      <flow descriptor list> <FF flow descriptor> )\n     The use of explicit grouping
      or intermediary constructs is strongly\n     RECOMMENDED in new text to avoid
      confusion.\n"
    title: 2.4.  Precedence
  title: 2.  Formal Definitions
- contents:
  - "3.  Automated Validation\n   RBNF would be appropriate for verification using
    automated validation\n   tools.  Validation tools need to be able to check for
    close\n   conformance to the rules expressed in this document to be useful for\n
    \  verifying new documents, but should also be able to parse RBNF as\n   used
    in existing RFCs.  No tools are known at this time.\n"
  title: 3.  Automated Validation
- contents:
  - "4.  Security Considerations\n   This document does not define any network behavior
    and does not\n   introduce or seek to solve any security issues.\n   It may be
    noted that clear and unambiguous protocol specifications\n   reduce the likelihood
    of incompatible or defective implementations\n   that might be exploited in security
    attacks.\n"
  title: 4.  Security Considerations
- contents:
  - "5.  Acknowledgments\n   Thanks to Magnus Westerlund, Nic Neate, Chris Newman,
    Alfred Hoenes,\n   Lou Berger, Julien Meuric, Stuart Venters, Tom Petch, Sam Hartman,\n
    \  and Pasi Eronen for review and useful comments.\n"
  title: 5.  Acknowledgments
- contents:
  - '6.  References

    '
  - contents:
    - "6.1.  Normative References\n   [RFC2119] Bradner, S., \"Key words for use in
      RFCs to Indicate\n             Requirement Levels\", BCP 14, RFC 2119, March
      1997.\n"
    title: 6.1.  Normative References
  - contents:
    - "6.2.  Informative References\n   [RFC2205] Braden, R., Ed., Zhang, L., Berson,
      S., Herzog, S., and S.\n             Jamin, \"Resource ReSerVation Protocol
      (RSVP) -- Version 1\n             Functional Specification\", RFC 2205, September
      1997.\n   [RFC3209] Awduche, D., Berger, L., Gan, D., Li, T., Srinivasan, V.,\n
      \            and G. Swallow, \"RSVP-TE: Extensions to RSVP for LSP\n             Tunnels\",
      RFC 3209, December 2001.\n   [RFC3473] Berger, L., Ed., \"Generalized Multi-Protocol
      Label\n             Switching (GMPLS) Signaling Resource ReserVation Protocol-\n
      \            Traffic Engineering (RSVP-TE) Extensions\", RFC 3473,\n             January
      2003.\n   [RFC4204] Lang, J., Ed., \"Link Management Protocol (LMP)\", RFC 4204,\n
      \            October 2005.\n   [RFC5234] Crocker, D., Ed., and P. Overell, \"Augmented
      BNF for Syntax\n             Specifications: ABNF\", STD 68, RFC 5234, January
      2008.\n   [RFC5440] Vasseur, JP., Ed., and JL. Le Roux, Ed., \"Path Computation\n
      \            Element (PCE) Communication Protocol (PCEP)\", RFC 5440,\n             March
      2009.\n   [EBNF]    ISO/IEC 14977, \"Information technology -- Syntactic\n             metalanguage
      -- Extended BNF\", 1996.\n"
    title: 6.2.  Informative References
  title: 6.  References
- contents:
  - "Author's Address\n   Adrian Farrel\n   Old Dog Consulting\n   EMail: adrian@olddog.co.uk\n"
  title: Author's Address
