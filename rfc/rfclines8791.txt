Abstract This document describes YANG mechanisms for defining abstract data structures with YANG.
There is a need for standard mechanisms to allow the definition of abstract data that is not intended to be implemented as configuration or operational state.
The "yang data" extension statement from RFC 8040
[RFC8040] was defined for this purpose, but it is limited in its functionality.
The intended use of the "yang data" extension was to model all or part of a protocol message, such as the "errors" definition in the YANG module "ietf restconf" [RFC8040], or the contents of a file.
However, protocols are often layered such that the header or payload portions of the message can be extended by external documents.
The YANG statements that model a protocol need to support this extensibility that is already found in that protocol.
This document defines a new YANG extension statement called "structure", which is similar to but more flexible than the "yang  data" extension from [RFC8040].
There is no assumption that a YANG data structure can only be used as a top level abstraction, and it may also be nested within some other data structure.
This document also defines a new YANG extension statement called "augment structure", which allows abstract data structures to be augmented from external modules and is similar to the existing YANG "augment" statement.
Note that "augment" cannot be used to augment a YANG data structure since a YANG compiler or other tool is not required to understand the "structure" extension.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
The following term is used within this document:
A data structure defined with the "structure" statement.
The following terms are defined in [RFC7950] and are not redefined here:
absolute schema nodeid    container    data definition statement    data node    leaf    leaf list    list 2.
Definitions A YANG data structure is defined with the "structure" extension statement, which is defined in the YANG module "ietf yang structure  ext".
The argument to the "structure" extension statement is the name of the data structure.
The data structures are considered to be in the same identifier namespace as defined in Section 6.2.1 of [RFC7950].
In particular, the seventh bullet states:
This means that data structures defined with the "structure" statement cannot have the same name as sibling nodes from regular YANG data definition statements or other "structure" statements in the same YANG module.
This does not mean a YANG data structure, once defined, has to be used as a top level protocol message or other top level data structure.
A YANG data structure is encoded in the same way as an "anydata" node.
This means that the name of the structure is encoded as a "container", with the instantiated children encoded as child nodes to this node.
YANG Data Structures in YANG Tree Diagrams
A YANG data structure can be printed in a YANG tree diagram [RFC8340].
This document updates RFC 8340 [RFC8340] by defining two new sections in the tree diagram for a module: 1.
The new sections, including spaces conventions, appear as follows:
Nodes in YANG data structures are printed according to the rules defined in Section 2.6 of [RFC8340].
The nodes in YANG data structures do not have any <flags>.
file "ietf yang structure ext@2020 06 17.yang
" module ietf yang structure ext { yang version 1.1; namespace "urn:ietf:params:xml:
yang:ietf yang structure ext"; prefix sx; organization "IETF NETMOD (
NETCONF Data Modeling Language) Working Group"; contact
This module contains conceptual YANG specifications for defining abstract data structures.
The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT', 'SHOULD', 'SHOULD NOT', 'RECOMMENDED', 'NOT RECOMMENDED', 'MAY', and 'OPTIONAL' in this document are to be interpreted as described in BCP 14 (RFC 2119)
when, and only when, they appear in all capitals, as shown here.
Copyright (c) 2020 IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 8791 (https://www.rfc editor.org/info/rfc8791); see the RFC itself for full legal notices."
It is intended to describe hierarchical data independent of protocol context or specific message encoding format.
Data definition statements within a 'structure' extension statement specify the generic syntax for the specific YANG data structure, whose name is the argument of the 'structure' extension statement.
Note that this extension does not define a media type.
A specification using this extension MUST specify the message encoding rules, including the content media type, if applicable.
The mandatory 'name' parameter value identifies the YANG data structure that is being defined.
This extension is only valid as a top level statement, i.e., given as a substatement to 'module' or 'submodule'.
The substatements of this extension MUST follow the ABNF rules below, where the rules are defined in RFC 7950:  must stmt [status stmt]
[reference stmt]  (typedef stmt / grouping stmt)
A YANG data structure defined with this extension statement is encoded in the same way as an 'anydata' node.
This means that the name of the structure is encoded as a 'container', with the instantiated child statements encoded as child nodes to this node.
The module name and namespace value for the YANG module using the extension statement are assigned to each of the data definition statements resulting from the YANG data structure.
The XPath document element is the extension statement itself, such that the child nodes of the document element are represented by the data def stmt substatements within this extension.
This conceptual document is the context for the following YANG statements: must stmt when stmt path stmt min elements stmt max elements stmt mandatory stmt unique stmt ordered by instance identifier data type
The following data def stmt substatements are constrained when used within a 'structure' extension statement.
The list stmt is not required to have a key stmt defined.
It is intended to describe hierarchical data independent of protocol context or specific message encoding format.
This statement has almost the same structure as the 'augment stmt'.
Data definition statements within this statement specify the semantics and generic syntax for the additional data to be added to the specific YANG data structure, identified by the 'path' argument.
The mandatory 'path' parameter value identifies the YANG conceptual data node that is being augmented and is represented as an absolute schema nodeid string, where the first node in the absolute schema nodeid string identifies the YANG data structure to augment, and the rest of the nodes in the string identifies the node within the YANG structure to augment.
This extension is only valid as a top level statement, i.e., given as a substatement to 'module' or 'submodule'.
The substatements of this extension MUST follow the ABNF rules below, where the rules are defined in RFC 7950: [status stmt]
(data def stmt / case stmt)
The module name and namespace value for the YANG module using the extension statement are assigned to instance document data conforming to the data definition statements within this extension.
The XPath document element is the augmented extension statement itself, such that the child nodes of the document element are represented by the data def stmt substatements within the augmented 'structure' statement.
The context node of the 'augment structure' statement is derived in the same way as the 'augment' statement, as defined in Section 6.4.1 of [RFC7950].
This conceptual node is considered the context node for the following YANG statements: must stmt when stmt path stmt min elements stmt max elements stmt mandatory stmt unique stmt ordered by instance identifier data type
The following data def stmt substatements are constrained when used within an 'augment structure' extension statement.
The list stmt is not required to have a key stmt defined.
The config stmt is ignored if present.
YANG Module Registry IANA has registered the following URI in the "ns" subregistry within the "IETF XML Registry" [RFC3688]:
yang:ietf yang structure ext Registrant Contact:  The IESG.
N/A; the requested URI is an XML namespace.
IANA has registered the following YANG module in the "YANG Module Names" subregistry [RFC6020] within the "YANG Parameters" registry:
Name:  ietf yang structure ext
yang:ietf yang structure ext Prefix:
sx Reference:  RFC 8791 6.
This document defines YANG extensions that are used to define conceptual YANG data structures.
It does not introduce any new vulnerabilities beyond those specified in YANG 1.1
This example shows a simple address book that could be stored as an artifact: module example module { yang version 1.1; namespace "urn:
Below is the tree diagram of this module: module: example module structure address book:   address
Example This example adds "county" and "zipcode" leafs to the address book:
module example module aug { yang version 1.1; namespace "urn:
example:example module aug"; prefix exma; import ietf yang structure ext { prefix sx; } import example module { prefix exm; } sx:augment structure "/exm:
module: example module aug augment structure /exm:
This example shows how an address book can be encoded in XML [W3C.REC xml 20081126]:
> <first>Charlie</first> <street>4711 Cobblestone Way</street
"structure" Example That Defines a Non top level Structure
The following example defines a data structure with error information that can be included in an <error info> element in an <rpc error>: module example error info { yang version 1.1; namespace "urn:example:example error info"; prefix exei; import ietf yang structure ext { prefix sx; } sx:
The example below shows how this structure can be used in an <rpc error
netconf:base:1.0"> <rpc error> <error type
> <error severity>error</error severity> <error info
> <my example error info xmlns "urn:example:example error info"> <error code>42</error code
> </my example error info> </error info> </rpc error> </rpc reply>
