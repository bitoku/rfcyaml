- title: __initial_text__
  contents:
  - '                               WebFinger

    '
- title: Abstract
  contents:
  - "Abstract\n   This specification defines the WebFinger protocol, which can be\
    \ used\n   to discover information about people or other entities on the\n   Internet\
    \ using standard HTTP methods.  WebFinger discovers\n   information for a URI\
    \ that might not be usable as a locator\n   otherwise, such as account or email\
    \ URIs.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7033.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2013 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Terminology .....................................................3\n  \
    \ 3. Example Uses of WebFinger .......................................4\n    \
    \  3.1. Identity Provider Discovery for OpenID Connect .............4\n      3.2.\
    \ Getting Author and Copyright Information for a Web Page ....5\n   4. WebFinger\
    \ Protocol ..............................................7\n        4.1. Constructing\
    \ the Query Component of the Request URI.......7\n        4.2. Performing a WebFinger\
    \ Query..............................8\n        4.3. The \"rel\" Parameter.......................................9\n\
    \        4.4. The JSON Resource Descriptor (JRD).......................11\n  \
    \         4.4.1. subject.............................................11\n    \
    \       4.4.2. aliases.............................................11\n      \
    \     4.4.3. properties..........................................12\n        \
    \   4.4.4. links...............................................12\n        4.5.\
    \ WebFinger and URIs.......................................14\n   5. Cross-Origin\
    \ Resource Sharing (CORS) ...........................14\n   6. Access Control\
    \ .................................................15\n   7. Hosted WebFinger\
    \ Services ......................................15\n   8. Definition of WebFinger\
    \ Applications ...........................16\n      8.1. Specification of the\
    \ URI Scheme and URI ...................17\n      8.2. Host Resolution ...........................................17\n\
    \      8.3. Specification of Properties ...............................17\n  \
    \    8.4. Specification of Links ....................................18\n    \
    \  8.5. One URI, Multiple Applications ............................18\n      8.6.\
    \ Registration of Link Relation Types and Properties ........19\n   9. Security\
    \ Considerations ........................................19\n      9.1. Transport-Related\
    \ Issues ..................................19\n      9.2. User Privacy Considerations\
    \ ...............................19\n      9.3. Abuse Potential ...........................................21\n\
    \      9.4. Information Reliability ...................................21\n  \
    \ 10. IANA Considerations ...........................................22\n    \
    \  10.1. Well-Known URI ...........................................22\n      10.2.\
    \ JSON Resource Descriptor (JRD) Media Type ................22\n      10.3. Registering\
    \ Link Relation Types ..........................24\n      10.4. Establishment\
    \ of the \"WebFinger Properties\" Registry .....24\n           10.4.1. The Registration\
    \ Template .........................24\n           10.4.2. The Registration Procedures\
    \ .......................25\n   11. Acknowledgments ...............................................26\n\
    \   12. References ....................................................26\n  \
    \    12.1. Normative References .....................................26\n    \
    \  12.2. Informative References ...................................27\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   WebFinger is used to discover information about people or\
    \ other\n   entities on the Internet that are identified by a URI [6] using\n\
    \   standard Hypertext Transfer Protocol (HTTP) [2] methods over a secure\n  \
    \ transport [12].  A WebFinger resource returns a JavaScript Object\n   Notation\
    \ (JSON) [5] object describing the entity that is queried.\n   The JSON object\
    \ is referred to as the JSON Resource Descriptor (JRD).\n   For a person, the\
    \ type of information that might be discoverable via\n   WebFinger includes a\
    \ personal profile address, identity service,\n   telephone number, or preferred\
    \ avatar.  For other entities on the\n   Internet, a WebFinger resource might\
    \ return JRDs containing link\n   relations [8] that enable a client to discover,\
    \ for example, that a\n   printer can print in color on A4 paper, the physical\
    \ location of a\n   server, or other static information.\n   Information returned\
    \ via WebFinger might be for direct human\n   consumption (e.g., looking up someone's\
    \ phone number), or it might be\n   used by systems to help carry out some operation\
    \ (e.g., facilitating,\n   with additional security mechanisms, logging into a\
    \ web site by\n   determining a user's identity service).  The information is\
    \ intended\n   to be static in nature, and, as such, WebFinger is not intended\
    \ to be\n   used to return dynamic information like the temperature of a CPU or\n\
    \   the current toner level in a laser printer.\n   The WebFinger protocol is\
    \ designed to be used across many\n   applications.  Applications that wish to\
    \ utilize WebFinger will need\n   to specify properties, titles, and link relation\
    \ types that are\n   appropriate for the application.  Further, applications will\
    \ need to\n   define the appropriate URI scheme to utilize for the query target.\n\
    \   Use of WebFinger is illustrated in the examples in Section 3 and\n   described\
    \ more formally in Section 4.  Section 8 describes how\n   applications of WebFinger\
    \ may be defined.\n"
- title: 2.  Terminology
  contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [1].\n   WebFinger makes heavy use of \"link relations\".  A link relation\
    \ is an\n   attribute-value pair in which the attribute identifies the type of\n\
    \   relationship between the linked entity or resource and the\n   information\
    \ specified in the value.  In Web Linking [4], the link\n   relation is represented\
    \ using an HTTP entity-header of \"Link\", where\n   the \"rel\" attribute specifies\
    \ the type of relationship and the \"href\"\n   attribute specifies the information\
    \ that is linked to the entity or\n   resource.  In WebFinger, the same concept\
    \ is represented using a JSON\n   array of \"links\" objects, where each member\
    \ named \"rel\" specifies the\n   type of relationship and each member named \"\
    href\" specifies the\n   information that is linked to the entity or resource.\
    \  Note that\n   WebFinger narrows the scope of a link relation beyond what is\
    \ defined\n   for Web Linking by stipulating that the value of the \"rel\" member\n\
    \   needs to be either a single IANA-registered link relation type [8] or\n  \
    \ a URI [6].\n   The use of URIs throughout this document refers to URIs following\
    \ the\n   syntax specified in Section 3 of RFC 3986 [6].  Relative URIs, having\n\
    \   syntax following that of Section 4.2 of RFC 3986, are not used with\n   WebFinger.\n"
- title: 3.  Example Uses of WebFinger
  contents:
  - "3.  Example Uses of WebFinger\n   This section shows a few sample uses of WebFinger.\
    \  Any application\n   of WebFinger would be specified outside of this document,\
    \ as\n   described in Section 8.  The examples in this section should be\n   simple\
    \ enough to understand without having seen the formal\n   specifications of the\
    \ applications.\n"
- title: 3.1.  Identity Provider Discovery for OpenID Connect
  contents:
  - "3.1.  Identity Provider Discovery for OpenID Connect\n   Suppose Carol wishes\
    \ to authenticate with a web site she visits using\n   OpenID Connect [15].  She\
    \ would provide the web site with her OpenID\n   Connect identifier, say carol@example.com.\
    \  The visited web site\n   would perform a WebFinger query looking for the OpenID\
    \ Connect\n   provider.  Since the site is interested in only one particular link\n\
    \   relation, the WebFinger resource might utilize the \"rel\" parameter as\n\
    \   described in Section 4.3:\n     GET /.well-known/webfinger?\n            resource=acct%3Acarol%40example.com&\n\
    \            rel=http%3A%2F%2Fopenid.net%2Fspecs%2Fconnect%2F1.0%2Fissuer\n  \
    \          HTTP/1.1\n     Host: example.com\n   The server might respond like\
    \ this:\n     HTTP/1.1 200 OK\n     Access-Control-Allow-Origin: *\n     Content-Type:\
    \ application/jrd+json\n     {\n       \"subject\" : \"acct:carol@example.com\"\
    ,\n       \"links\" :\n       [\n         {\n           \"rel\" : \"http://openid.net/specs/connect/1.0/issuer\"\
    ,\n           \"href\" : \"https://openid.example.com\"\n         }\n       ]\n\
    \     }\n   Since the \"rel\" parameter only serves to filter the link relations\n\
    \   returned by the resource, other name/value pairs in the response,\n   including\
    \ any aliases or properties, would be returned.  Also, since\n   support for the\
    \ \"rel\" parameter is not guaranteed, the client must\n   not assume the \"links\"\
    \ array will contain only the requested link\n   relation.\n"
- title: 3.2.  Getting Author and Copyright Information for a Web Page
  contents:
  - "3.2.  Getting Author and Copyright Information for a Web Page\n   Suppose an\
    \ application is defined to retrieve metadata information\n   about a web page\
    \ URL, such as author and copyright information.  To\n   retrieve that information,\
    \ the client can utilize WebFinger to issue\n   a query for the specific URL.\
    \  Suppose the URL of interest is\n   http://blog.example.com/article/id/314.\
    \  The client would issue a\n   query similar to the following:\n     GET /.well-known/webfinger?\n\
    \          resource=http%3A%2F%2Fblog.example.com%2Farticle%2Fid%2F314\n     \
    \     HTTP/1.1\n     Host: blog.example.com\n   The server might then reply in\
    \ this way:\n     HTTP/1.1 200 OK\n     Access-Control-Allow-Origin: *\n     Content-Type:\
    \ application/jrd+json\n     {\n       \"subject\" : \"http://blog.example.com/article/id/314\"\
    ,\n       \"aliases\" :\n       [\n         \"http://blog.example.com/cool_new_thing\"\
    ,\n         \"http://blog.example.com/steve/article/7\"\n       ],\n       \"\
    properties\" :\n       {\n         \"http://blgx.example.net/ns/version\" : \"\
    1.3\",\n         \"http://blgx.example.net/ns/ext\" : null\n       },\n      \
    \ \"links\" :\n       [\n         {\n           \"rel\" : \"copyright\",\n   \
    \        \"href\" : \"http://www.example.com/copyright\"\n         },\n      \
    \   {\n           \"rel\" : \"author\",\n           \"href\" : \"http://blog.example.com/author/steve\"\
    ,\n           \"titles\" :\n           {\n             \"en-us\" : \"The Magical\
    \ World of Steve\",\n             \"fr\" : \"Le Monde Magique de Steve\"\n   \
    \        },\n           \"properties\" :\n           {\n             \"http://example.com/role\"\
    \ : \"editor\"\n           }\n         }\n       ]\n     }\n   In the above example,\
    \ we see that the server returned a list of\n   aliases, properties, and links\
    \ related to the subject URL.  The links\n   contain references to information\
    \ for each link relation type.  For\n   the author link, the server provided a\
    \ reference to the author's\n   blog, along with a title for the blog in two languages.\
    \  The server\n   also returned a single property related to the author, indicating\
    \ the\n   author's role as editor of the blog.\n   It is worth noting that, while\
    \ the server returned just two links in\n   the \"links\" array in this example,\
    \ a server might return any number\n   of links when queried.\n"
- title: 4.  WebFinger Protocol
  contents:
  - "4.  WebFinger Protocol\n   The WebFinger protocol is used to request information\
    \ about an entity\n   identified by a query target (a URI).  The client can optionally\n\
    \   specify one or more link relation types for which it would like to\n   receive\
    \ information.\n   A WebFinger request is an HTTPS request to a WebFinger resource.\
    \  A\n   WebFinger resource is a well-known URI [3] using the HTTPS scheme\n \
    \  constructed along with the required query target and optional link\n   relation\
    \ types.  WebFinger resources MUST NOT be served with any\n   other URI scheme\
    \ (such as HTTP).\n   A WebFinger resource is always given a query target, which\
    \ is another\n   URI that identifies the entity whose information is sought. \
    \ GET\n   requests to a WebFinger resource convey the query target in the\n  \
    \ \"resource\" parameter of the WebFinger URI's query string; see Section\n  \
    \ 4.1 for details.\n   The host to which a WebFinger query is issued is significant.\
    \  If the\n   query target contains a \"host\" portion (Section 3.2.2 of RFC 3986),\n\
    \   then the host to which the WebFinger query is issued SHOULD be the\n   same\
    \ as the \"host\" portion of the query target, unless the client\n   receives\
    \ instructions through some out-of-band mechanism to send the\n   query to another\
    \ host.  If the query target does not contain a \"host\"\n   portion, then the\
    \ client chooses a host to which it directs the query\n   using additional information\
    \ it has.\n   The path component of a WebFinger URI MUST be the well-known path\n\
    \   \"/.well-known/webfinger\".  A WebFinger URI MUST contain a query\n   component\
    \ that encodes the query target and optional link relation\n   types as specified\
    \ in Section 4.1.\n   The WebFinger resource returns a JSON Resource Descriptor\
    \ (JRD) as\n   the resource representation to convey information about an entity\
    \ on\n   the Internet.  Also, the Cross-Origin Resource Sharing (CORS) [7]\n \
    \  specification is utilized to facilitate queries made via a web\n   browser.\n"
- title: 4.1.  Constructing the Query Component of the Request URI
  contents:
  - "4.1.  Constructing the Query Component of the Request URI\n   A WebFinger URI\
    \ MUST contain a query component (see Section 3.4 of\n   RFC 3986).  The query\
    \ component MUST contain a \"resource\" parameter\n   and MAY contain one or more\
    \ \"rel\" parameters.  The \"resource\"\n   parameter MUST contain the query target\
    \ (URI), and the \"rel\"\n   parameters MUST contain encoded link relation types\
    \ according to the\n   encoding described in this section.\n   To construct the\
    \ query component, the client performs the following\n   steps.  First, each parameter\
    \ value is percent-encoded, as per\n   Section 2.1 of RFC 3986.  The encoding\
    \ is done to conform to the\n   query production in Section 3.4 of that specification,\
    \ with the\n   addition that any instances of the \"=\" and \"&\" characters within\
    \ the\n   parameter values are also percent-encoded.  Next, the client\n   constructs\
    \ a string to be placed in the query component by\n   concatenating the name of\
    \ the first parameter together with an equal\n   sign (\"=\") and the percent-encoded\
    \ parameter value.  For any\n   subsequent parameters, the client appends an ampersand\
    \ (\"&\") to the\n   string, the name of the next parameter, an equal sign, and\
    \ the\n   parameter value.  The client MUST NOT insert any spaces while\n   constructing\
    \ the string.  The order in which the client places each\n   attribute-value pair\
    \ within the query component does not matter in\n   the interpretation of the\
    \ query component.\n"
- title: 4.2.  Performing a WebFinger Query
  contents:
  - "4.2.  Performing a WebFinger Query\n   A WebFinger client issues a query using\
    \ the GET method to the well-\n   known [3] resource identified by the URI whose\
    \ path component is\n   \"/.well-known/webfinger\" and whose query component MUST\
    \ include the\n   \"resource\" parameter exactly once and set to the value of\
    \ the URI for\n   which information is being sought.\n   If the \"resource\" parameter\
    \ is absent or malformed, the WebFinger\n   resource MUST indicate that the request\
    \ is bad as per Section 10.4.1\n   of RFC 2616 [2].\n   If the \"resource\" parameter\
    \ is a value for which the server has no\n   information, the server MUST indicate\
    \ that it was unable to match the\n   request as per Section 10.4.5 of RFC 2616.\n\
    \   A client MUST query the WebFinger resource using HTTPS only.  If the\n   client\
    \ determines that the resource has an invalid certificate, the\n   resource returns\
    \ a 4xx or 5xx status code, or if the HTTPS connection\n   cannot be established\
    \ for any reason, then the client MUST accept\n   that the WebFinger query has\
    \ failed and MUST NOT attempt to reissue\n   the WebFinger request using HTTP\
    \ over a non-secure connection.\n   A WebFinger resource MUST return a JRD as\
    \ the representation for the\n   resource if the client requests no other supported\
    \ format explicitly\n   via the HTTP \"Accept\" header.  The client MAY include\
    \ the \"Accept\"\n   header to indicate a desired representation; representations\
    \ other\n   than JRD might be defined in future specifications.  The WebFinger\n\
    \   resource MUST silently ignore any requested representations that it\n   does\
    \ not understand or support.  The media type used for the JSON\n   Resource Descriptor\
    \ (JRD) is \"application/jrd+json\" (see Section\n   10.2).\n   The properties,\
    \ titles, and link relation types returned by the\n   server in a JRD might be\
    \ varied and numerous.  For example, the\n   server might return information about\
    \ a person's blog, vCard [14],\n   avatar, OpenID Connect provider, RSS or ATOM\
    \ feed, and so forth in a\n   reply.  Likewise, if a server has no information\
    \ to provide, it might\n   return a JRD with an empty \"links\" array or no \"\
    links\" array.\n   A WebFinger resource MAY redirect the client; if it does, the\n\
    \   redirection MUST only be to an \"https\" URI and the client MUST\n   perform\
    \ certificate validation again when redirected.\n   A WebFinger resource can include\
    \ cache validators in a response to\n   enable conditional requests by the client\
    \ and/or expiration times as\n   per Section 13 of RFC 2616.\n"
- title: 4.3.  The "rel" Parameter
  contents:
  - "4.3.  The \"rel\" Parameter\n   When issuing a request to a WebFinger resource,\
    \ the client MAY\n   utilize the \"rel\" parameter to request only a subset of\
    \ the\n   information that would otherwise be returned without the \"rel\"\n \
    \  parameter.  When the \"rel\" parameter is used and accepted, only the\n   link\
    \ relation types that match the link relation type provided via\n   the \"rel\"\
    \ parameter are included in the array of links returned in\n   the JRD.  If there\
    \ are no matching link relation types defined for\n   the resource, the \"links\"\
    \ array in the JRD will be either absent or\n   empty.  All other information\
    \ present in a resource descriptor\n   remains present, even when \"rel\" is employed.\n\
    \   The \"rel\" parameter MAY be included multiple times in order to\n   request\
    \ multiple link relation types.\n   The purpose of the \"rel\" parameter is to\
    \ return a subset of \"link\n   relation objects\" (see Section 4.4.4) that would\
    \ otherwise be\n   returned in the resource descriptor.  Use of the parameter\
    \ might\n   reduce processing requirements on either the client or server, and\
    \ it\n   might also reduce the bandwidth required to convey the partial\n   resource\
    \ descriptor, especially if there are numerous link relation\n   values to convey\
    \ for a given \"resource\" value.  Note that if a client\n   requests a particular\
    \ link relation type for which the server has no\n   information, the server MAY\
    \ return a JRD with an empty \"links\" array\n   or no \"links\" array.\n   WebFinger\
    \ resources SHOULD support the \"rel\" parameter.  If the\n   resource does not\
    \ support the \"rel\" parameter, it MUST ignore the\n   parameter and process\
    \ the request as if no \"rel\" parameter values\n   were present.\n   The following\
    \ example uses the \"rel\" parameter to request links for\n   two link relation\
    \ types:\n    GET /.well-known/webfinger?\n        resource=acct%3Abob%40example.com&\n\
    \        rel=http%3A%2F%2Fwebfinger.example%2Frel%2Fprofile-page&\n        rel=http%3A%2F%2Fwebfinger.example%2Frel%2Fbusinesscard\
    \ HTTP/1.1\n    Host: example.com\n   In this example, the client requests the\
    \ link relations of type\n   \"http://webfinger.example/rel/profile-page\" and\n\
    \   \"http://webfinger.example/rel/businesscard\".  The server then\n   responds\
    \ with a message like this:\n     HTTP/1.1 200 OK\n     Access-Control-Allow-Origin:\
    \ *\n     Content-Type: application/jrd+json\n     {\n       \"subject\" : \"\
    acct:bob@example.com\",\n       \"aliases\" :\n       [\n         \"https://www.example.com/~bob/\"\
    \n       ],\n       \"properties\" :\n       {\n           \"http://example.com/ns/role\"\
    \ : \"employee\"\n       },\n       \"links\" :\n       [\n         {\n      \
    \     \"rel\" : \"http://webfinger.example/rel/profile-page\",\n           \"\
    href\" : \"https://www.example.com/~bob/\"\n         },\n         {\n        \
    \   \"rel\" : \"http://webfinger.example/rel/businesscard\",\n           \"href\"\
    \ : \"https://www.example.com/~bob/bob.vcf\"\n         }\n       ]\n     }\n \
    \  As you can see in the response, the resource representation contains\n   only\
    \ the links of the types requested by the client and for which the\n   server\
    \ had information, but the other parts of the JRD are still\n   present.  Note\
    \ also in the above example that the links returned in\n   the \"links\" array\
    \ all use HTTPS, which is important if the data\n   indirectly obtained via WebFinger\
    \ needs to be returned securely.\n"
- title: 4.4.  The JSON Resource Descriptor (JRD)
  contents:
  - "4.4.  The JSON Resource Descriptor (JRD)\n   The JSON Resource Descriptor (JRD),\
    \ originally introduced in RFC 6415\n   [16] and based on the Extensible Resource\
    \ Descriptor (XRD) format\n   [17], is a JSON object that comprises the following\
    \ name/value pairs:\n           o subject\n           o aliases\n           o\
    \ properties\n           o links\n   The member \"subject\" is a name/value pair\
    \ whose value is a string,\n   \"aliases\" is an array of strings, \"properties\"\
    \ is an object\n   comprising name/value pairs whose values are strings, and \"\
    links\" is\n   an array of objects that contain link relation information.\n \
    \  When processing a JRD, the client MUST ignore any unknown member and\n   not\
    \ treat the presence of an unknown member as an error.\n   Below, each of these\
    \ members of the JRD is described in more detail.\n"
- title: 4.4.1.  subject
  contents:
  - "4.4.1.  subject\n   The value of the \"subject\" member is a URI that identifies\
    \ the entity\n   that the JRD describes.\n   The \"subject\" value returned by\
    \ a WebFinger resource MAY differ from\n   the value of the \"resource\" parameter\
    \ used in the client's request.\n   This might happen, for example, when the subject's\
    \ identity changes\n   (e.g., a user moves his or her account to another service)\
    \ or when\n   the resource prefers to express URIs in canonical form.\n   The\
    \ \"subject\" member SHOULD be present in the JRD.\n"
- title: 4.4.2.  aliases
  contents:
  - "4.4.2.  aliases\n   The \"aliases\" array is an array of zero or more URI strings\
    \ that\n   identify the same entity as the \"subject\" URI.\n   The \"aliases\"\
    \ array is OPTIONAL in the JRD.\n"
- title: 4.4.3.  properties
  contents:
  - "4.4.3.  properties\n   The \"properties\" object comprises zero or more name/value\
    \ pairs whose\n   names are URIs (referred to as \"property identifiers\") and\
    \ whose\n   values are strings or null.  Properties are used to convey additional\n\
    \   information about the subject of the JRD.  As an example, consider\n   this\
    \ use of \"properties\":\n     \"properties\" : { \"http://webfinger.example/ns/name\"\
    \ : \"Bob Smith\" }\n   The \"properties\" member is OPTIONAL in the JRD.\n"
- title: 4.4.4.  links
  contents:
  - "4.4.4.  links\n   The \"links\" array has any number of member objects, each\
    \ of which\n   represents a link [4].  Each of these link objects can have the\n\
    \   following members:\n           o rel\n           o type\n           o href\n\
    \           o titles\n           o properties\n   The \"rel\" and \"href\" members\
    \ are strings representing the link's\n   relation type and the target URI, respectively.\
    \  The context of the\n   link is the \"subject\" (see Section 4.4.1).\n   The\
    \ \"type\" member is a string indicating what the media type of the\n   result\
    \ of dereferencing the link ought to be.\n   The order of elements in the \"links\"\
    \ array MAY be interpreted as\n   indicating an order of preference.  Thus, if\
    \ there are two or more\n   link relations having the same \"rel\" value, the\
    \ first link relation\n   would indicate the user's preferred link.\n   The \"\
    links\" array is OPTIONAL in the JRD.\n   Below, each of the members of the objects\
    \ found in the \"links\" array\n   is described in more detail.  Each object in\
    \ the \"links\" array,\n   referred to as a \"link relation object\", is completely\
    \ independent\n   from any other object in the array; any requirement to include\
    \ a\n   given member in the link relation object refers only to that\n   particular\
    \ object.\n"
- title: 4.4.4.1.  rel
  contents:
  - "4.4.4.1.  rel\n   The value of the \"rel\" member is a string that is either\
    \ a URI or a\n   registered relation type [8] (see RFC 5988 [4]).  The value of\
    \ the\n   \"rel\" member MUST contain exactly one URI or registered relation\n\
    \   type.  The URI or registered relation type identifies the type of the\n  \
    \ link relation.\n   The other members of the object have meaning only once the\
    \ type of\n   link relation is understood.  In some instances, the link relation\n\
    \   will have associated semantics enabling the client to query for other\n  \
    \ resources on the Internet.  In other instances, the link relation\n   will have\
    \ associated semantics enabling the client to utilize the\n   other members of\
    \ the link relation object without fetching additional\n   external resources.\n\
    \   URI link relation type values are compared using the \"Simple String\n   Comparison\"\
    \ algorithm of Section 6.2.1 of RFC 3986.\n   The \"rel\" member MUST be present\
    \ in the link relation object.\n"
- title: 4.4.4.2.  type
  contents:
  - "4.4.4.2.  type\n   The value of the \"type\" member is a string that indicates\
    \ the media\n   type [9] of the target resource (see RFC 6838 [10]).\n   The \"\
    type\" member is OPTIONAL in the link relation object.\n"
- title: 4.4.4.3.  href
  contents:
  - "4.4.4.3.  href\n   The value of the \"href\" member is a string that contains\
    \ a URI\n   pointing to the target resource.\n   The \"href\" member is OPTIONAL\
    \ in the link relation object.\n"
- title: 4.4.4.4.  titles
  contents:
  - "4.4.4.4.  titles\n   The \"titles\" object comprises zero or more name/value\
    \ pairs whose\n   names are a language tag [11] or the string \"und\".  The string\
    \ is\n   human-readable and describes the link relation.  More than one title\n\
    \   for the link relation MAY be provided for the benefit of users who\n   utilize\
    \ the link relation, and, if used, a language identifier SHOULD\n   be duly used\
    \ as the name.  If the language is unknown or unspecified,\n   then the name is\
    \ \"und\".\n   A JRD SHOULD NOT include more than one title identified with the\
    \ same\n   language tag (or \"und\") within the link relation object.  Meaning\
    \ is\n   undefined if a link relation object includes more than one title\n  \
    \ named with the same language tag (or \"und\"), though this MUST NOT be\n   treated\
    \ as an error.  A client MAY select whichever title or titles\n   it wishes to\
    \ utilize.\n   Here is an example of the \"titles\" object:\n     \"titles\" :\n\
    \     {\n       \"en-us\" : \"The Magical World of Steve\",\n       \"fr\" : \"\
    Le Monde Magique de Steve\"\n     }\n   The \"titles\" member is OPTIONAL in the\
    \ link relation object.\n"
- title: 4.4.4.5.  properties
  contents:
  - "4.4.4.5.  properties\n   The \"properties\" object within the link relation object\
    \ comprises\n   zero or more name/value pairs whose names are URIs (referred to\
    \ as\n   \"property identifiers\") and whose values are strings or null.\n   Properties\
    \ are used to convey additional information about the link\n   relation.  As an\
    \ example, consider this use of \"properties\":\n     \"properties\" : { \"http://webfinger.example/mail/port\"\
    \ : \"993\" }\n   The \"properties\" member is OPTIONAL in the link relation object.\n"
- title: 4.5.  WebFinger and URIs
  contents:
  - "4.5.  WebFinger and URIs\n   WebFinger requests include a \"resource\" parameter\
    \ (see Section 4.1)\n   specifying the query target (URI) for which the client\
    \ requests\n   information.  WebFinger is neutral regarding the scheme of such\
    \ a\n   URI: it could be an \"acct\" URI [18], an \"http\" or \"https\" URI, a\n\
    \   \"mailto\" URI [19], or some other scheme.\n"
- title: 5.  Cross-Origin Resource Sharing (CORS)
  contents:
  - "5.  Cross-Origin Resource Sharing (CORS)\n   WebFinger resources might not be\
    \ accessible from a web browser due to\n   \"Same-Origin\" policies.  The current\
    \ best practice is to make\n   resources available to browsers through Cross-Origin\
    \ Resource Sharing\n   (CORS) [7], and servers MUST include the Access-Control-Allow-Origin\n\
    \   HTTP header in responses.  Servers SHOULD support the least\n   restrictive\
    \ setting by allowing any domain access to the WebFinger\n   resource:\n     \
    \ Access-Control-Allow-Origin: *\n   There are cases where defaulting to the least\
    \ restrictive setting is\n   not appropriate.  For example, a server on an intranet\
    \ that provides\n   sensitive company information SHOULD NOT allow CORS requests\
    \ from any\n   domain, as that could allow leaking of that sensitive information.\
    \  A\n   server that wishes to restrict access to information from external\n\
    \   entities SHOULD use a more restrictive Access-Control-Allow-Origin\n   header.\n"
- title: 6.  Access Control
  contents:
  - "6.  Access Control\n   As with all web resources, access to the WebFinger resource\
    \ could\n   require authentication.  Further, failure to provide required\n  \
    \ credentials might result in the server forbidding access or providing\n   a\
    \ different response than had the client authenticated with the\n   server.\n\
    \   Likewise, a WebFinger resource MAY provide different responses to\n   different\
    \ clients based on other factors, such as whether the client\n   is inside or\
    \ outside a corporate network.  As a concrete example, a\n   query performed on\
    \ the internal corporate network might return link\n   relations to employee pictures,\
    \ whereas link relations for employee\n   pictures might not be provided to external\
    \ entities.\n   Further, link relations provided in a WebFinger resource\n   representation\
    \ might point to web resources that impose access\n   restrictions.  For example,\
    \ the aforementioned corporate server may\n   provide both internal and external\
    \ entities with URIs to employee\n   pictures, but further authentication might\
    \ be required in order for\n   the client to access the picture resources if the\
    \ request comes from\n   outside the corporate network.\n   The decisions made\
    \ with respect to what set of link relations a\n   WebFinger resource provides\
    \ to one client versus another and what\n   resources require further authentication,\
    \ as well as the specific\n   authentication mechanisms employed, are outside\
    \ the scope of this\n   document.\n"
- title: 7.  Hosted WebFinger Services
  contents:
  - "7.  Hosted WebFinger Services\n   As with most services provided on the Internet,\
    \ it is possible for a\n   domain owner to utilize \"hosted\" WebFinger services.\
    \  By way of\n   example, a domain owner might control most aspects of their domain\n\
    \   but use a third-party hosting service for email.  In the case of\n   email,\
    \ mail exchange (MX) records identify mail servers for a domain.\n   An MX record\
    \ points to the mail server to which mail for the domain\n   should be delivered.\
    \  To the sending server, it does not matter\n   whether those MX records point\
    \ to a server in the destination domain\n   or a different domain.\n   Likewise,\
    \ a domain owner might utilize the services of a third party\n   to provide WebFinger\
    \ services on behalf of its users.  Just as a\n   domain owner is required to\
    \ insert MX records into DNS to allow for\n   hosted email services, the domain\
    \ owner is required to redirect HTTP\n   queries to its domain to allow for hosted\
    \ WebFinger services.\n   When a query is issued to the WebFinger resource, the\
    \ web server MUST\n   return a response with a redirection status code that includes\
    \ a\n   Location header pointing to the location of the hosted WebFinger\n   service\
    \ URI.  This WebFinger service URI does not need to point to\n   the well-known\
    \ WebFinger location on the hosting service provider\n   server.\n   As an example,\
    \ assume that example.com's WebFinger services are\n   hosted by wf.example.net.\
    \  Suppose a client issues a query for\n   acct:alice@example.com like this:\n\
    \     GET /.well-known/webfinger?\n                   resource=acct%3Aalice%40example.com\
    \ HTTP/1.1\n     Host: example.com\n   The server might respond with this:\n \
    \    HTTP/1.1 307 Temporary Redirect\n     Access-Control-Allow-Origin: *\n  \
    \   Location: https://wf.example.net/example.com/webfinger?\n                \
    \   resource=acct%3Aalice%40example.com\n   The client can then follow the redirection,\
    \ reissuing the request to\n   the URI provided in the Location header.  Note\
    \ that the server will\n   include any required URI parameters in the Location\
    \ header value,\n   which could be different than the URI parameters the client\n\
    \   originally used.\n"
- title: 8.  Definition of WebFinger Applications
  contents:
  - "8.  Definition of WebFinger Applications\n   This specification details the protocol\
    \ syntax used to query a domain\n   for information about a URI, the syntax of\
    \ the JSON Resource\n   Descriptor (JRD) that is returned in response to that\
    \ query, security\n   requirements and considerations, hosted WebFinger services,\
    \ various\n   expected HTTP status codes, and so forth.  However, this\n   specification\
    \ does not enumerate the various possible properties or\n   link relation types\
    \ that might be used in conjunction with WebFinger\n   for a particular application,\
    \ nor does it define what properties or\n   link relation types one might expect\
    \ to see in response to querying\n   for a particular URI or URI scheme.  Nonetheless,\
    \ all of these\n   unspecified elements are important in order to implement an\n\
    \   interoperable application that utilizes the WebFinger protocol and\n   MUST\
    \ be specified in the relevant document(s) defining the particular\n   application\
    \ making use of the WebFinger protocol according to the\n   procedures described\
    \ in this section.\n"
- title: 8.1.  Specification of the URI Scheme and URI
  contents:
  - "8.1.  Specification of the URI Scheme and URI\n   Any application that uses WebFinger\
    \ MUST specify the URI scheme(s),\n   and to the extent appropriate, what forms\
    \ the URI(s) might take.  For\n   example, when querying for information about\
    \ a user's account at some\n   domain, it might make sense to specify the use\
    \ of the \"acct\" URI\n   scheme [18].  When trying to obtain the copyright information\
    \ for a\n   web page, it makes sense to specify the use of the web page URI\n\
    \   (either http or https).\n   The examples in Sections 3.1 and 3.2 illustrate\
    \ the use of different\n   URI schemes with WebFinger applications.  In the example\
    \ in Section\n   3.1, WebFinger is used to retrieve information pertinent to OpenID\n\
    \   Connect.  In the example in Section 3.2, WebFinger is used to\n   discover\
    \ metadata information about a web page, including author and\n   copyright information.\
    \  Each of these WebFinger applications needs to\n   be fully specified to ensure\
    \ interoperability.\n"
- title: 8.2.  Host Resolution
  contents:
  - "8.2.  Host Resolution\n   As explained in Section 4, the host to which a WebFinger\
    \ query is\n   issued is significant.  In general, WebFinger applications would\n\
    \   adhere to the procedures described in Section 4 in order to properly\n   direct\
    \ a WebFinger query.\n   However, some URI schemes do not have host portions and\
    \ there might\n   be some applications of WebFinger for which the host portion\
    \ of a URI\n   cannot or should not be utilized.  In such instances, the application\n\
    \   specification MUST clearly define the host resolution procedures,\n   which\
    \ might include provisioning a \"default\" host within the client\n   to which\
    \ queries are directed.\n"
- title: 8.3.  Specification of Properties
  contents:
  - "8.3.  Specification of Properties\n   WebFinger defines both subject-specific\
    \ properties (i.e., properties\n   described in Section 4.4.3 that relate to the\
    \ URI for which\n   information is queried) and link-specific properties (see\
    \ Section\n   4.4.4.5).  This section refers to subject-specific properties.\n\
    \   Applications that utilize subject-specific properties MUST define the\n  \
    \ URIs used in identifying those properties, along with valid property\n   values.\n\
    \   Consider this portion of the JRD found in the example in Section 3.2.\n  \
    \     \"properties\" :\n       {\n         \"http://blgx.example.net/ns/version\"\
    \ : \"1.3\",\n         \"http://blgx.example.net/ns/ext\" : null\n       }\n \
    \  Here, two properties are returned in the WebFinger response.  Each of\n   these\
    \ would be defined in a WebFinger application specification.\n   These two properties\
    \ might be defined in the same WebFinger\n   application specification or separately\
    \ in different specifications.\n   Since the latter is possible, it is important\
    \ that WebFinger clients\n   not assume that one property has any specific relationship\
    \ with\n   another property, unless some relationship is explicitly defined in\n\
    \   the particular WebFinger application specification.\n"
- title: 8.4.  Specification of Links
  contents:
  - "8.4.  Specification of Links\n   The links returned in a WebFinger response each\
    \ comprise several\n   pieces of information, some of which are optional (refer\
    \ to Section\n   4.4.4).  The WebFinger application specification MUST define\
    \ each\n   link and any values associated with a link, including the link\n  \
    \ relation type (\"rel\"), the expected media type (\"type\"), properties,\n \
    \  and titles.\n   The target URI to which the link refers (i.e., the \"href\"\
    ), if\n   present, would not normally be specified in an application\n   specification.\
    \  However, the URI scheme or any special\n   characteristics of the URI would\
    \ usually be specified.  If a\n   particular link does not require an external\
    \ reference, then all of\n   the semantics related to the use of that link MUST\
    \ be defined within\n   the application specification.  Such links might rely\
    \ only on\n   properties or titles in the link to convey meaning.\n"
- title: 8.5.  One URI, Multiple Applications
  contents:
  - "8.5.  One URI, Multiple Applications\n   It is important to be mindful of the\
    \ fact that different WebFinger\n   applications might specify the use of the\
    \ same URI scheme, and in\n   effect, the same URI for different purposes.  That\
    \ should not be a\n   problem, since each of property identifier (see Sections\
    \ 4.4.3 and\n   4.4.4.5) and link relation type would be uniquely defined for\
    \ a\n   specific application.\n   It should be noted that when a client requests\
    \ information about a\n   particular URI and receives a response with a number\
    \ of different\n   property identifiers or link relation types that the response\
    \ is\n   providing information about the URI without any particular semantics.\n\
    \   How the client interprets the information SHOULD be in accordance\n   with\
    \ the particular application specification or set of\n   specifications the client\
    \ implements.\n   Any syntactically valid properties or links the client receives\
    \ and\n   that are not fully understood SHOULD be ignored and SHOULD NOT cause\n\
    \   the client to report an error.\n"
- title: 8.6.  Registration of Link Relation Types and Properties
  contents:
  - "8.6.  Registration of Link Relation Types and Properties\n   Application specifications\
    \ MAY define a simple token as a link\n   relation type for a link.  In that case,\
    \ the link relation type MUST\n   be registered with IANA as specified in Sections\
    \ 10.3.\n   Further, any defined properties MUST be registered with IANA as\n\
    \   described in Section 10.4.\n"
- title: 9.  Security Considerations
  contents:
  - '9.  Security Considerations

    '
- title: 9.1.  Transport-Related Issues
  contents:
  - "9.1.  Transport-Related Issues\n   Since this specification utilizes Cross-Origin\
    \ Resource Sharing\n   (CORS) [7], all of the security considerations applicable\
    \ to CORS are\n   also applicable to this specification.\n   The use of HTTPS\
    \ is REQUIRED to ensure that information is not\n   modified during transit. \
    \ It should be acknowledged that in\n   environments where a web server is normally\
    \ available, there exists\n   the possibility that a compromised network might\
    \ have its WebFinger\n   resource operating on HTTPS replaced with one operating\
    \ only over\n   HTTP.  As such, clients MUST NOT issue queries over a non-secure\n\
    \   connection.\n   Clients MUST verify that the certificate used on an HTTPS\
    \ connection\n   is valid (as defined in [12]) and accept a response only if the\n\
    \   certificate is valid.\n"
- title: 9.2.  User Privacy Considerations
  contents:
  - "9.2.  User Privacy Considerations\n   Service providers and users should be aware\
    \ that placing information\n   on the Internet means that any user can access\
    \ that information, and\n   WebFinger can be used to make it even easier to discover\
    \ that\n   information.  While WebFinger can be an extremely useful tool for\n\
    \   discovering one's avatar, blog, or other personal data, users should\n   also\
    \ understand the risks.\n   Systems or services that expose personal data via\
    \ WebFinger MUST\n   provide an interface by which users can select which data\
    \ elements\n   are exposed through the WebFinger interface.  For example, social\n\
    \   networking sites might allow users to mark certain data as \"public\"\n  \
    \ and then utilize that marking as a means of determining what\n   information\
    \ to expose via WebFinger.  The information published via\n   WebFinger would\
    \ thus comprise only the information marked as public\n   by the user.  Further,\
    \ the user has the ability to remove information\n   from publication via WebFinger\
    \ by removing this marking.\n   WebFinger MUST NOT be used to provide any personal\
    \ data unless\n   publishing that data via WebFinger by the relevant service was\n\
    \   explicitly authorized by the person whose information is being\n   shared.\
    \  Publishing one's personal data within an access-controlled\n   or otherwise\
    \ limited environment on the Internet does not equate to\n   providing implicit\
    \ authorization of further publication of that data\n   via WebFinger.\n   The\
    \ privacy and security concerns with publishing personal data via\n   WebFinger\
    \ are worth emphasizing again with respect to personal data\n   that might reveal\
    \ a user's current context (e.g., the user's\n   location).  The power of WebFinger\
    \ comes from providing a single\n   place where others can find pointers to information\
    \ about a person,\n   but service providers and users should be mindful of the\
    \ nature of\n   that information shared and the fact that it might be available\
    \ for\n   the entire world to see.  Sharing location information, for example,\n\
    \   would potentially put a person in danger from any individual who\n   might\
    \ seek to inflict harm on that person.\n   Users should be aware of how easily\
    \ personal data that one might\n   publish can be used in unintended ways.  In\
    \ one study relevant to\n   WebFinger-like services, Balduzzi et al. [20] took\
    \ a large set of\n   leaked email addresses and demonstrated a number of potential\
    \ privacy\n   concerns, including the ability to cross-correlate the same user's\n\
    \   accounts over multiple social networks.  The authors also describe\n   potential\
    \ mitigation strategies.\n   The easy access to user information via WebFinger\
    \ was a design goal\n   of the protocol, not a limitation.  If one wishes to limit\
    \ access to\n   information available via WebFinger, such as WebFinger resources\
    \ for\n   use inside a corporate network, the network administrator needs to\n\
    \   take necessary measures to limit access from outside the network.\n   Using\
    \ standard methods for securing web resources, network\n   administrators do have\
    \ the ability to control access to resources\n   that might return sensitive information.\
    \  Further, a server can be\n   employed in such a way as to require authentication\
    \ and prevent\n   disclosure of information to unauthorized entities.\n"
- title: 9.3.  Abuse Potential
  contents:
  - "9.3.  Abuse Potential\n   Service providers should be mindful of the potential\
    \ for abuse using\n   WebFinger.\n   As one example, one might query a WebFinger\
    \ server only to discover\n   whether or not a given URI is valid.  With such\
    \ a query, the person\n   may deduce that an email identifier is valid, for example.\
    \  Such an\n   approach could help spammers maintain a current list of known email\n\
    \   addresses and to discover new ones.\n   WebFinger could be used to associate\
    \ a name or other personal data\n   with an email address, allowing spammers to\
    \ craft more convincing\n   email messages.  This might be of particular value\
    \ in phishing\n   attempts.\n   It is RECOMMENDED that implementers of WebFinger\
    \ server software take\n   steps to mitigate abuse, including malicious over-use\
    \ of the server\n   and harvesting of user information.  Although there is no\
    \ mechanism\n   that can guarantee that publicly accessible WebFinger databases\
    \ won't\n   be harvested, rate-limiting by IP address will prevent or at least\n\
    \   dramatically slow harvest by private individuals without access to\n   botnets\
    \ or other distributed systems.  The reason these mitigation\n   strategies are\
    \ not mandatory is that the correct choice of mitigation\n   strategy (if any)\
    \ depends greatly on the context.  Implementers\n   should not construe this as\
    \ meaning that they do not need to consider\n   whether to use a mitigation strategy,\
    \ and if so, what strategy to\n   use.\n   WebFinger client developers should\
    \ also be aware of potential abuse\n   by spammers or those phishing for information\
    \ about users.  As an\n   example, suppose a mail client was configured to automatically\n\
    \   perform a WebFinger query on the sender of each received mail\n   message.\
    \  If a spammer sent an email using a unique identifier in the\n   'From' header,\
    \ then when the WebFinger query was performed, the\n   spammer would be able to\
    \ associate the request with a particular\n   user's email address.  This would\
    \ provide information to the spammer,\n   including the user's IP address, the\
    \ fact the user just checked\n   email, what kind of WebFinger client the user\
    \ utilized, and so on.\n   For this reason, it is strongly advised that clients\
    \ not perform\n   WebFinger queries unless authorized by the user to do so.\n"
- title: 9.4.  Information Reliability
  contents:
  - "9.4.  Information Reliability\n   A WebFinger resource has no means of ensuring\
    \ that information\n   provided by a user is accurate.  Likewise, neither the\
    \ resource nor\n   the client can be absolutely guaranteed that information has\
    \ not been\n   manipulated either at the server or along the communication path\n\
    \   between the client and server.  Use of HTTPS helps to address some\n   concerns\
    \ with manipulation of information along the communication\n   path, but it clearly\
    \ cannot address issues where the resource\n   provided incorrect information,\
    \ either due to being provided false\n   information or due to malicious behavior\
    \ on the part of the server\n   administrator.  As with any information service\
    \ available on the\n   Internet, users should be wary of information received\
    \ from untrusted\n   sources.\n"
- title: 10.  IANA Considerations
  contents:
  - '10.  IANA Considerations

    '
- title: 10.1.  Well-Known URI
  contents:
  - "10.1.  Well-Known URI\n   This specification registers the \"webfinger\" well-known\
    \ URI in the\n   \"Well-Known URIs\" registry as defined by RFC 5785 [3].\n  \
    \ URI suffix:  webfinger\n   Change controller:  IETF\n   Specification document(s):\
    \  RFC 7033\n   Related information:  The query to the WebFinger resource will\n\
    \   include one or more parameters in the query string; see Section 4.1\n   of\
    \ RFC 7033.  Resources at this location are able to return a JSON\n   Resource\
    \ Descriptor (JRD) as described in Section 4.4 of RFC 7033.\n"
- title: 10.2.  JSON Resource Descriptor (JRD) Media Type
  contents:
  - "10.2.  JSON Resource Descriptor (JRD) Media Type\n   This specification registers\
    \ the media type application/jrd+json for\n   use with WebFinger in accordance\
    \ with media type registration\n   procedures defined in RFC 6838 [10].\n   Type\
    \ name: application\n   Subtype name: jrd+json\n   Required parameters: N/A\n\
    \   Optional parameters: N/A\n     In particular, because RFC 4627 already defines\
    \ the character\n     encoding for JSON, no \"charset\" parameter is used.\n \
    \  Encoding considerations: See RFC 6839, Section 3.1.\n   Security considerations:\n\
    \     The JSON Resource Descriptor (JRD) is a JavaScript Object Notation\n   \
    \  (JSON) object.  It is a text format that must be parsed by entities\n     that\
    \ wish to utilize the format.  Depending on the language and\n     mechanism used\
    \ to parse a JSON object, it is possible for an\n     attacker to inject behavior\
    \ into a running program.  Therefore,\n     care must be taken to properly parse\
    \ a received JRD to ensure that\n     only a valid JSON object is present and\
    \ that no JavaScript or other\n     code is injected or executed unexpectedly.\n\
    \   Interoperability considerations:\n     This media type is a JavaScript Object\
    \ Notation (JSON) object and\n     can be consumed by any software application\
    \ that can consume JSON\n     objects.\n   Published specification: RFC 7033\n\
    \   Applications that use this media type:\n     The JSON Resource Descriptor\
    \ (JRD) is used by the WebFinger\n     protocol (RFC 7033) to enable the exchange\
    \ of information between a\n     client and a WebFinger resource over HTTPS.\n\
    \   Fragment identifier considerations:\n     The syntax and semantics of fragment\
    \ identifiers SHOULD be as\n     specified for \"application/json\".  (At publication\
    \ of this\n     document, there is no fragment identification syntax defined for\n\
    \     \"application/json\".)\n   Additional information:\n     Deprecated alias\
    \ names for this type: N/A\n     Magic number(s): N/A\n     File extension(s):\
    \ jrd\n     Macintosh file type code(s): N/A\n   Person & email address to contact\
    \ for further information:\n     Paul E. Jones <paulej@packetizer.com>\n   Intended\
    \ usage: COMMON\n   Restrictions on usage: N/A\n   Author: Paul E. Jones <paulej@packetizer.com>\n\
    \   Change controller:\n   IESG has change control over this registration.\n \
    \  Provisional registration? (standards tree only): N/A\n"
- title: 10.3.  Registering Link Relation Types
  contents:
  - "10.3.  Registering Link Relation Types\n   RFC 5988 established a \"Link Relation\
    \ Types\" registry that is reused\n   by WebFinger applications.\n   Link relation\
    \ types used by WebFinger applications are registered in\n   the \"Link Relation\
    \ Types\" registry as per the procedures of Section\n   6.2.1 of RFC 5988.  The\
    \ \"Notes\" entry for the registration SHOULD\n   indicate if property values\
    \ associated with the link relation type\n   are registered in the \"WebFinger\
    \ Properties\" registry with a link to\n   the registry.\n"
- title: 10.4.  Establishment of the "WebFinger Properties" Registry
  contents:
  - "10.4.  Establishment of the \"WebFinger Properties\" Registry\n   WebFinger utilizes\
    \ URIs to identify properties of a subject or link\n   and the associated values\
    \ (see Sections 8.3 and 8.6).  This\n   specification establishes a new \"WebFinger\
    \ Properties\" registry to\n   record property identifiers.\n"
- title: 10.4.1.  The Registration Template
  contents:
  - "10.4.1.  The Registration Template\n   The registration template for WebFinger\
    \ properties is:\n          o Property Identifier:\n          o Link Type:\n \
    \         o Description:\n          o Reference:\n          o Notes: [optional]\n\
    \   The \"Property Identifier\" must be a URI that identifies the property\n \
    \  being registered.\n   The \"Link Type\" contains the name of a link relation\
    \ type with which\n   this property identifier is used.  If the property is a\
    \ subject-\n   specific property, then this field is specified as \"N/A\".\n \
    \  The \"Description\" is intended to explain the purpose of the property.\n \
    \  The \"Reference\" field points to the specification that defines the\n   registered\
    \ property.\n   The optional \"Notes\" field is for conveying any useful information\n\
    \   about the property that might be of value to implementers.\n"
- title: 10.4.2.  The Registration Procedures
  contents:
  - "10.4.2.  The Registration Procedures\n   The IETF has created a mailing list,\
    \ webfinger@ietf.org, which can be\n   used for public discussion of the WebFinger\
    \ protocol and any\n   applications that use it.  Prior to registration of a WebFinger\n\
    \   property, discussion on the mailing list is strongly encouraged.  The\n  \
    \ IESG has appointed Designated Experts [13] who will monitor the\n   webfinger@ietf.org\
    \ mailing list and review registrations.\n   A WebFinger property is registered\
    \ with a Specification Required (see\n   RFC 5226 [13]) after a review by the\
    \ Designated Experts.  The review\n   is normally expected to take on the order\
    \ of two to four weeks.\n   However, the Designated Experts may approve a registration\
    \ prior to\n   publication of a specification once the Designated Experts are\n\
    \   satisfied that such a specification will be published.  In evaluating\n  \
    \ registration requests, the Designated Experts should make an effort\n   to avoid\
    \ registering two different properties that have the same\n   meaning.  Where\
    \ a proposed property is similar to an already-defined\n   property, the Designated\
    \ Experts should insist that enough text be\n   included in the description or\
    \ notes section of the template to\n   sufficiently differentiate the new property\
    \ from an existing one.\n   The registration procedure begins with a completed\
    \ registration\n   template (as defined above) sent to webfinger@ietf.org.  Once\n\
    \   consensus is reached on the mailing list, the registration template\n   is\
    \ sent to iana@iana.org.  IANA will then contact the Designated\n   Experts and\
    \ communicate the results to the registrant.  The WebFinger\n   mailing list provides\
    \ an opportunity for community discussion and\n   input, and the Designated Experts\
    \ may use that input to inform their\n   review.  Denials should include an explanation\
    \ and, if applicable,\n   suggestions as to how to make the request successful\
    \ if resubmitted.\n   The specification registering the WebFinger property MUST\
    \ include the\n   completed registration template shown above.  Once the registration\n\
    \   procedure concludes successfully, IANA creates or modifies the\n   corresponding\
    \ record in the \"WebFinger Properties\" registry.\n"
- title: 11.  Acknowledgments
  contents:
  - "11.  Acknowledgments\n   This document has benefited from extensive discussion\
    \ and review by\n   many of the members of the APPSAWG working group.  The authors\
    \ would\n   like to especially acknowledge the invaluable input of Eran Hammer-\n\
    \   Lahav, Blaine Cook, Brad Fitzpatrick, Laurent-Walter Goix, Joe\n   Clarke,\
    \ Peter Saint-Andre, Dick Hardt, Tim Bray, James Snell, Melvin\n   Carvalho, Evan\
    \ Prodromou, Mark Nottingham, Elf Pavlik, Bjoern\n   Hoehrmann, Subramanian Moonesamy,\
    \ Joe Gregorio, John Bradley, and\n   others that we have undoubtedly, but inadvertently,\
    \ missed.\n   The authors would also like to express their gratitude to the chairs\n\
    \   of the APPSAWG working group, especially Salvatore Loreto for his\n   assistance\
    \ in shepherding this document.  We also want to thank Barry\n   Leiba and Pete\
    \ Resnick, the Applications Area Directors, for their\n   support and exhaustive\
    \ reviews.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [1]   Bradner, S., \"Key words for use in RFCs\
    \ to Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March 1997.\n\
    \   [2]   Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L.,\n  \
    \       Leach, P., and T. Berners-Lee, \"Hypertext Transfer Protocol\n       \
    \  -- HTTP/1.1\", RFC 2616, June 1999.\n   [3]   Nottingham, M. and E. Hammer-Lahav,\
    \ \"Defining Well-Known\n         Uniform Resource Identifiers (URIs)\", RFC 5785,\
    \ April 2010.\n   [4]   Nottingham, M., \"Web Linking\", RFC 5988, October 2010.\n\
    \   [5]   Crockford, D., \"The application/json Media Type for JavaScript\n  \
    \       Object Notation (JSON)\", RFC 4627, July 2006.\n   [6]   Berners-Lee,\
    \ T., Fielding, R., and L. Masinter, \"Uniform\n         Resource Identifier (URI):\
    \ Generic Syntax\", STD 66, RFC 3986,\n         January 2005.\n   [7]   Van Kesteren,\
    \ A., \"Cross-Origin Resource Sharing\", W3C CORS,\n         July 2010, <http://www.w3.org/TR/cors/>.\n\
    \   [8]   IANA, \"Link Relations\",\n         <http://www.iana.org/assignments/link-relations/>.\n\
    \   [9]   IANA, \"MIME Media Types\",\n         <http://www.iana.org/assignments/media-types>.\n\
    \   [10]  Freed, N., Klensin, J., and T. Hansen, \"Media Type\n         Specifications\
    \ and Registration Procedures\", BCP 13, RFC 6838,\n         January 2013.\n \
    \  [11]  Phillips, A., Ed., and M. Davis, Ed., \"Tags for Identifying\n      \
    \   Languages\", BCP 47, RFC 5646, September 2009.\n   [12]  Rescorla, E., \"\
    HTTP Over TLS\", RFC 2818, May 2000.\n   [13]  Narten, T. and H. Alvestrand, \"\
    Guidelines for Writing an IANA\n         Considerations Section in RFCs\", BCP\
    \ 26, RFC 5226, May 2008.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [14]  Perreault, S., \"vCard Format Specification\"\
    , RFC 6350, August\n         2011.\n   [15]  Sakimura, N., Bradley, J., Jones,\
    \ M., de Medeiros, B.,\n         Mortimore, C., and E. Jay, \"OpenID Connect Messages\
    \ 1.0\",\n         July 2013,\n         <http://openid.net/specs/openid-connect-messages-1_0.html>.\n\
    \   [16]  Hammer-Lahav, E., Ed., and B. Cook, \"Web Host Metadata\", RFC\n   \
    \      6415, October 2011.\n   [17]  Hammer-Lahav, E. and W. Norris, \"Extensible\
    \ Resource Descriptor\n         (XRD) Version 1.0\",\n         <http://docs.oasis-open.org/xri/xrd/v1.0/xrd-1.0.html>.\n\
    \   [18]  Saint-Andre, P., \"The 'acct' URI Scheme\", Work in Progress,\n    \
    \     July 2013.\n   [19]  Duerst, M., Masinter, L., and J. Zawinski, \"The 'mailto'\
    \ URI\n         Scheme\", RFC 6068, October 2010.\n   [20]  Balduzzi, M., Platzer,\
    \ C., Thorsten, H., Kirda, E., Balzarotti,\n         D., and C. Kruegel \"Abusing\
    \ Social Networks for Automated User\n         Profiling\", Recent Advances in\
    \ Intrusion Detection, Springer\n         Berlin Heidelberg, March 2010,\n   \
    \      <https://www.eurecom.fr/en/publication/3042/download/\n         rs-publi-3042_1.pdf>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Paul E. Jones\n   Cisco Systems, Inc.\n   7025 Kit Creek\
    \ Rd.\n   Research Triangle Park, NC 27709\n   USA\n   Phone: +1 919 476 2048\n\
    \   EMail: paulej@packetizer.com\n   IM: xmpp:paulej@packetizer.com\n   Gonzalo\
    \ Salgueiro\n   Cisco Systems, Inc.\n   7025 Kit Creek Rd.\n   Research Triangle\
    \ Park, NC 27709\n   USA\n   Phone: +1 919 392 3266\n   EMail: gsalguei@cisco.com\n\
    \   IM: xmpp:gsalguei@cisco.com\n   Michael B. Jones\n   Microsoft\n   EMail:\
    \ mbj@microsoft.com\n   URI: http://self-issued.info/\n   Joseph Smarr\n   Google\n\
    \   EMail: jsmarr@google.com\n   URI: http://josephsmarr.com/\n"
