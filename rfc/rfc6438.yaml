- title: __initial_text__
  contents:
  - "                     Using the IPv6 Flow Label for\n      Equal Cost Multipath\
    \ Routing and Link Aggregation in Tunnels\n"
- title: Abstract
  contents:
  - "Abstract\n   The IPv6 flow label has certain restrictions on its use.  This\n\
    \   document describes how those restrictions apply when using the flow\n   label\
    \ for load balancing by equal cost multipath routing and for link\n   aggregation,\
    \ particularly for IP-in-IPv6 tunneled traffic.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6438.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . 2\n     1.1.  Choice of IP Header Fields for Hash Input . . . .\
    \ . . . . . 3\n     1.2.  Flow Label Rules  . . . . . . . . . . . . . . . . .\
    \ . . . . 4\n   2.  Normative Notation  . . . . . . . . . . . . . . . . . . .\
    \ . . . 5\n   3.  Guidelines  . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . 6\n   4.  Security Considerations . . . . . . . . . . . . . . . . . . .\
    \ . 7\n   5.  Acknowledgements  . . . . . . . . . . . . . . . . . . . . . . .\
    \ 7\n   6.  References  . . . . . . . . . . . . . . . . . . . . . . . . . . 8\n\
    \     6.1.  Normative References  . . . . . . . . . . . . . . . . . . . 8\n  \
    \   6.2.  Informative References  . . . . . . . . . . . . . . . . . . 8\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   When several network paths between the same two nodes are\
    \ known by\n   the routing system to be equally good (in terms of capacity and\n\
    \   latency), it may be desirable to share traffic among them.  Two such\n   techniques\
    \ are known as equal cost multipath (ECMP) routing and link\n   aggregation (LAG)\
    \ [IEEE802.1AX].  There are, of course, numerous\n   possible approaches to this,\
    \ but certain goals need to be met:\n   o  Maintain roughly equal share of traffic\
    \ on each path.\n      (In some cases, the multiple paths might not all have the\
    \ same\n      capacity, and the goal might be appropriately weighted traffic\n\
    \      shares rather than equal shares.  This would affect the load-\n      sharing\
    \ algorithm but would not otherwise change the argument.)\n   o  Minimize or avoid\
    \ out-of-order delivery for individual traffic\n      flows.\n   o  Minimize idle\
    \ time on any path when queue is non-empty.\n   There is some conflict between\
    \ these goals: for example, strictly\n   avoiding idle time could cause a small\
    \ packet sent on an idle path to\n   overtake a bigger packet from the same flow,\
    \ causing out-of-order\n   delivery.\n   One lightweight approach to ECMP or LAG\
    \ is this: if there are N\n   equally good paths to choose from, then form a modulo(N)\
    \ hash\n   [RFC2991] from a defined set of fields in each packet header that are\n\
    \   certain to have the same values throughout the duration of a flow,\n   and\
    \ use the resulting output hash value to select a particular path.\n   If the\
    \ hash function is chosen so that the output values have a\n   uniform statistical\
    \ distribution, this method will share traffic\n   roughly equally between the\
    \ N paths.  If the header fields included\n   in the hash input are consistent,\
    \ all packets from a given flow will\n   generate the same hash output value,\
    \ so out-of-order delivery will\n   not occur.  Assuming a large number of unique\
    \ flows are involved, it\n   is also probable that the method will avoid idle\
    \ time, since the\n   queue for each link will remain non-empty.\n"
- title: 1.1.  Choice of IP Header Fields for Hash Input
  contents:
  - "1.1.  Choice of IP Header Fields for Hash Input\n   In the remainder of this\
    \ document, we will use the term \"flow\" to\n   represent a sequence of packets\
    \ that may be identified by either the\n   source and destination IP addresses\
    \ alone {2-tuple} or the source IP\n   address, destination IP address, protocol\
    \ number, source port number,\n   and destination port number {5-tuple}.  It should\
    \ be noted that the\n   latter is more specifically referred to as a \"microflow\"\
    \ in\n   [RFC2474], but this term is not used in connection with the flow\n  \
    \ label in [RFC3697].\n   The question, then, is which header fields are used\
    \ to identify a\n   flow and serve as input keys to a modulo(N) hash algorithm.\
    \  A common\n   choice when routing general traffic is simply to use a hash of\
    \ the\n   source and destination IP addresses, i.e., the 2-tuple.  This is\n \
    \  necessary and sufficient to avoid out-of-order delivery and, with a\n   wide\
    \ variety of sources and destinations as one finds in the core of\n   the network,\
    \ often statistically sufficient to distribute the load\n   evenly.  In practice,\
    \ many implementations use the 5-tuple {dest\n   addr, source addr, protocol,\
    \ dest port, source port} as input keys to\n   the hash function, to maximize\
    \ the probability of evenly sharing\n   traffic over the equal cost paths.  However,\
    \ including transport-\n   layer information as input keys to a hash may be a\
    \ problem for IP\n   fragments [RFC2991] or for encrypted traffic.  Including\
    \ the protocol\n   and port numbers, totaling 40 bits, in the hash input makes\
    \ the hash\n   slightly more expensive to compute but does improve the hash\n\
    \   distribution, due to the variable nature of ephemeral ports.\n   Ephemeral\
    \ port numbers are quite well distributed [Lee10] and will\n   typically contribute\
    \ 16 variable bits.  However, in the case of IPv6,\n   transport-layer information\
    \ is inconvenient to extract, due to the\n   variable placement of and variable\
    \ length of next-headers; all\n   implementations must be capable of skipping\
    \ over next-headers, even\n   if they are rarely present in actual traffic.  In\
    \ fact, [RFC2460]\n   implies that next-headers, except hop-by-hop options, are\
    \ not\n   normally inspected by intermediate nodes in the network.  This\n   situation\
    \ may be challenging for some hardware implementations,\n   raising the potential\
    \ that network equipment vendors might sacrifice\n   the length of the fields\
    \ extracted from an IPv6 header.\n   It is worth noting that the possible presence\
    \ of a Generic Routing\n   Encapsulation (GRE) header [RFC2784] and the possible\
    \ presence of a\n   GRE key within that header creates a similar challenge to\
    \ the\n   possible presence of IPv6 extension headers; anything that\n   complicates\
    \ header analysis is undesirable.\n   The situation is different in IP-in-IP tunneled\
    \ scenarios.\n   Identifying a flow inside the tunnel is more complicated,\n \
    \  particularly because nearly all hardware can only identify flows\n   based\
    \ on information contained in the outermost IP header.  Assume\n   that traffic\
    \ from many sources to many destinations is aggregated in\n   a single IP-in-IP\
    \ tunnel from tunnel endpoint (TEP) A to TEP B (see\n   figure).  Then all the\
    \ packets forming the tunnel have outer source\n   address A and outer destination\
    \ address B.  In all probability, they\n   also have the same port and protocol\
    \ numbers.  If there are multiple\n   paths between routers R1 and R2, and ECMP\
    \ or LAG is applied to choose\n   a particular path, the 2-tuple or 5-tuple (and\
    \ its hash) will be\n   constant, and no load sharing will be achieved, i.e.,\
    \ polarization\n   will occur.  If there is a high proportion of traffic from\
    \ one or a\n   small number of tunnels, traffic will not be distributed as intended\n\
    \   across the paths between R1 and R2, due to partial polarization.\n   (Related\
    \ issues arise with MPLS [MPLS-LABEL].)\n      _____           _____         \
    \      _____           _____\n     | TEP |_________| R1  |-------------| R2  |_________|\
    \ TEP |\n     |__A__|         |_____|-------------|_____|         |__B__|\n  \
    \           tunnel          ECMP or LAG         tunnel\n                     \
    \            here\n   As noted above, for IPv6, the 5-tuple is quite inconvenient\
    \ to\n   extract due to the next-header placement.  The question therefore\n \
    \  arises whether the 20-bit flow label in IPv6 packets would be\n   suitable\
    \ for use as input to an ECMP or LAG hash algorithm,\n   especially in the case\
    \ of tunnels where the inner packet header is\n   inaccessible.  If the flow label\
    \ could be used in place of the port\n   numbers and protocol number in the 5-tuple,\
    \ the implementation would\n   be simplified.\n"
- title: 1.2.  Flow Label Rules
  contents:
  - "1.2.  Flow Label Rules\n   The flow label was left Experimental by [RFC2460]\
    \ but was better\n   defined by [RFC3697].  We quote three rules from that RFC:\n\
    \   1.  \"The Flow Label value set by the source MUST be delivered\n       unchanged\
    \ to the destination node(s).\"\n   2.  \"IPv6 nodes MUST NOT assume any mathematical\
    \ or other properties\n       of the Flow Label values assigned by source nodes.\"\
    \n   3.  \"Router performance SHOULD NOT be dependent on the distribution\n  \
    \     of the Flow Label values.  Especially, the Flow Label bits alone\n     \
    \  make poor material for a hash key.\"\n   These rules, especially the last one,\
    \ have caused designers to\n   hesitate about using the flow label in support\
    \ of ECMP or LAG.  The\n   fact is that today most nodes set a zero value in the\
    \ flow label, and\n   the first rule definitely forbids the routing system from\
    \ changing\n   the flow label once a packet has left the source node.  Considering\n\
    \   normal IPv6 traffic, the fact that the flow label is typically zero\n   means\
    \ that it would add no value to an ECMP or LAG hash, but neither\n   would it\
    \ do any harm to the distribution of the hash values.\n   However, in the case\
    \ of an IP-in-IPv6 tunnel, the TEP is itself the\n   source node of the outer\
    \ packets.  Therefore, a TEP may freely set a\n   flow label in the outer IPv6\
    \ header of the packets it sends into the\n   tunnel.\n   The second two rules\
    \ quoted above need to be seen in the context of\n   [RFC3697], which assumes\
    \ that routers using the flow label in some\n   way will be involved in some sort\
    \ of method of establishing flow\n   state: \"To enable flow-specific treatment,\
    \ flow state needs to be\n   established on all or a subset of the IPv6 nodes\
    \ on the path from the\n   source to the destination(s).\"  The RFC should perhaps\
    \ have made\n   clear that a router that has participated in flow state establishment\n\
    \   can rely on properties of the resulting flow label values without\n   further\
    \ signaling.  If a router knows these properties, rule 2 is\n   irrelevant, and\
    \ it can choose to deviate from rule 3.\n   In the tunneling situation sketched\
    \ above, routers R1 and R2 can rely\n   on the flow labels set by TEP A and TEP\
    \ B being assigned by a known\n   method.  This allows an ECMP or LAG method to\
    \ be based on the flow\n   label consistently with [RFC3697], regardless of whether\
    \ the non-\n   tunnel traffic carries non-zero flow label values.\n   The IETF\
    \ has recently revised RFC 3697 [RFC6437].  That revision is\n   fully compatible\
    \ with the present document and obviates the concerns\n   resulting from the above\
    \ three rules.  Therefore, the present\n   specification applies both to RFC 3697\
    \ and to RFC 6437.\n"
- title: 2.  Normative Notation
  contents:
  - "2.  Normative Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.  Guidelines
  contents:
  - "3.  Guidelines\n   We assume that the routers supporting ECMP or LAG (R1 and\
    \ R2 in the\n   above figure) are unaware that they are handling tunneled traffic.\n\
    \   If it is desired to include the IPv6 flow label in an ECMP or LAG\n   hash\
    \ in the tunneled scenario shown above, the following guidelines\n   apply:\n\
    \   o  Inner packets MUST be encapsulated in an outer IPv6 packet whose\n    \
    \  source and destination addresses are those of the tunnel endpoints\n      (TEPs).\n\
    \   o  The flow label in the outer packet SHOULD be set by the sending\n     \
    \ TEP to a 20-bit value in accordance with [RFC6437].  The same flow\n      label\
    \ value MUST be used for all packets in a single user flow, as\n      determined\
    \ by the IP header fields of the inner packet.\n   o  To achieve this, the sending\
    \ TEP MUST classify all packets into\n      flows once it has determined that\
    \ they should enter a given tunnel\n      and then write the relevant flow label\
    \ into the outer IPv6 header.\n      A user flow could be identified by the sending\
    \ TEP most simply by\n      its {destination, source} address 2-tuple or by its\
    \ 5-tuple {dest\n      addr, source addr, protocol, dest port, source port}. \
    \ At present,\n      there would be little point in using the {dest addr, source\
    \ addr,\n      flow label} 3-tuple of the inner packet, but doing so would be\
    \ a\n      future-proof option.  The choice of n-tuple is an implementation\n\
    \      choice in the sending TEP.\n      *  As specified in [RFC6437], the flow\
    \ label values should be\n         chosen from a uniform distribution.  Such values\
    \ will be\n         suitable as input to a load-balancing hash function and will\
    \ be\n         hard for a malicious third party to predict.\n      *  The sending\
    \ TEP MAY perform stateless flow label assignment by\n         using a suitable\
    \ 20-bit hash of the inner IP header's 2-tuple\n         or 5-tuple as the flow\
    \ label value.\n      *  If the inner packet is an IPv6 packet, its flow label\
    \ value\n         could also be included in this hash.\n      *  This stateless\
    \ method creates a small probability of two\n         different user flows hashing\
    \ to the same flow label.  Since\n         [RFC6437] allows a source (the TEP\
    \ in this case) to define any\n         set of packets that it wishes as a single\
    \ flow, occasionally\n         labeling two user flows as a single flow through\
    \ the tunnel is\n         acceptable.\n   o  At intermediate routers that perform\
    \ load distribution, the hash\n      algorithm used to determine the outgoing\
    \ component-link in an ECMP\n      and/or LAG toward the next hop MUST minimally\
    \ include the 3-tuple\n      {dest addr, source addr, flow label} and MAY also\
    \ include the\n      remaining components of the 5-tuple.  This applies whether\
    \ the\n      traffic is tunneled traffic only or a mixture of normal traffic\n\
    \      and tunneled traffic.\n      *  Intermediate IPv6 router(s) will presumably\
    \ encounter a mixture\n         of tunneled traffic and normal IPv6 traffic. \
    \ Because of this,\n         the design should also include {protocol, dest port,\
    \ source\n         port} as input keys to the ECMP and/or LAG hash algorithms,\
    \ to\n         provide additional entropy for flows whose flow label is set to\n\
    \         zero, including non-tunneled traffic flows.\n   o  Individual nodes\
    \ in a network are free to implement different\n      algorithms that conform\
    \ to this specification without impacting\n      the interoperability or function\
    \ of the network.\n   o  Operations, Administration, and Maintenance (OAM) techniques\
    \ will\n      need to be adapted to manage ECMP and LAG based on the flow label.\n\
    \      The issues will be similar to those that arise for MPLS [RFC4379]\n   \
    \   and pseudowires [RFC6391].\n"
- title: 4.  Security Considerations
  contents:
  - "4.  Security Considerations\n   The flow label is not protected in any way and\
    \ can be forged by an\n   on-path attacker.  However, it is expected that tunnel\
    \ endpoints and\n   the ECMP or LAG paths will be part of a managed infrastructure\
    \ that\n   is well protected against on-path attacks (e.g., by using IPsec\n \
    \  between the two tunnel endpoints).  Off-path attackers are unlikely\n   to\
    \ guess a valid flow label if an apparently pseudo-random and\n   unpredictable\
    \ value is used.  In either case, the worst an attacker\n   could do against ECMP\
    \ or LAG is attempt to selectively overload a\n   particular path.  For further\
    \ discussion, see [RFC6437].\n"
- title: 5.  Acknowledgements
  contents:
  - "5.  Acknowledgements\n   This document was suggested by corridor discussions\
    \ at IETF 76.  Joel\n   Halpern made crucial comments on an early version.  We\
    \ are grateful\n   to Qinwen Hu for general discussion about the flow label. \
    \ Valuable\n   comments and contributions were made by Miguel Garcia, Brian\n\
    \   Haberman, Sheng Jiang, Thomas Narten, Jarno Rajahalme, Brian Weis,\n   and\
    \ others.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC2119]      Bradner, S., \"Key words for use\
    \ in RFCs to Indicate\n                  Requirement Levels\", BCP 14, RFC 2119,\
    \ March 1997.\n   [RFC2460]      Deering, S. and R. Hinden, \"Internet Protocol,\
    \ Version\n                  6 (IPv6) Specification\", RFC 2460, December 1998.\n\
    \   [RFC3697]      Rajahalme, J., Conta, A., Carpenter, B., and S.\n         \
    \         Deering, \"IPv6 Flow Label Specification\", RFC 3697,\n            \
    \      March 2004.\n   [RFC6437]      Amante, S., Carpenter, B., Jiang, S., and\
    \ J.\n                  Rajahalme, \"IPv6 Flow Label Specification\", RFC 6437,\n\
    \                  November 2011.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [IEEE802.1AX]  Institute of Electrical and Electronics\
    \ Engineers,\n                  \"Link Aggregation\", IEEE Standard 802.1AX-2008,\
    \ 2008.\n   [Lee10]        Lee, D., Carpenter, B., and N. Brownlee, \"Observations\n\
    \                  of UDP to TCP Ratio and Port Numbers\", Fifth\n           \
    \       International Conference on Internet Monitoring and\n                \
    \  Protection ICIMP 2010, May 2010.\n   [MPLS-LABEL]   Kompella, K., Drake, J.,\
    \ Amante, S., Henderickx, W.,\n                  and L. Yong, \"The Use of Entropy\
    \ Labels in MPLS\n                  Forwarding\", Work in Progress, May 2011.\n\
    \   [RFC2474]      Nichols, K., Blake, S., Baker, F., and D. Black,\n        \
    \          \"Definition of the Differentiated Services Field (DS\n           \
    \       Field) in the IPv4 and IPv6 Headers\", RFC 2474,\n                  December\
    \ 1998.\n   [RFC2784]      Farinacci, D., Li, T., Hanks, S., Meyer, D., and P.\n\
    \                  Traina, \"Generic Routing Encapsulation (GRE)\",\n        \
    \          RFC 2784, March 2000.\n   [RFC2991]      Thaler, D. and C. Hopps, \"\
    Multipath Issues in Unicast\n                  and Multicast Next-Hop Selection\"\
    , RFC 2991,\n                  November 2000.\n   [RFC4379]      Kompella, K.\
    \ and G. Swallow, \"Detecting Multi-Protocol\n                  Label Switched\
    \ (MPLS) Data Plane Failures\", RFC 4379,\n                  February 2006.\n\
    \   [RFC6391]      Bryant, S., Filsfils, C., Drafz, U., Kompella, V.,\n      \
    \            Regan, J., and S. Amante, \"Flow-Aware Transport of\n           \
    \       Pseudowires over an MPLS Packet Switched Network\",\n                \
    \  RFC 6391, November 2011.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Brian Carpenter\n   Department of Computer Science\n \
    \  University of Auckland\n   PB 92019\n   Auckland  1142\n   New Zealand\n  \
    \ EMail: brian.e.carpenter@gmail.com\n   Shane Amante\n   Level 3 Communications,\
    \ LLC\n   1025 Eldorado Blvd\n   Broomfield, CO  80021\n   USA\n   EMail: shane@level3.net\n"
