- title: __initial_text__
  contents:
  - "                   Cryptographic Message Syntax (CMS)\n               Algorithm\
    \ Identifier Protection Attribute\n"
- title: Abstract
  contents:
  - "Abstract\n   The Cryptographic Message Syntax (CMS), unlike X.509/PKIX\n   certificates,\
    \ is vulnerable to algorithm substitution attacks.  In an\n   algorithm substitution\
    \ attack, the attacker changes either the\n   algorithm being used or the parameters\
    \ of the algorithm in order to\n   change the result of a signature verification\
    \ process.  In X.509\n   certificates, the signature algorithm is protected because\
    \ it is\n   duplicated in the TBSCertificate.signature field with the proviso\n\
    \   that the validator is to compare both fields as part of the signature\n  \
    \ validation process.  This document defines a new attribute that\n   contains\
    \ a copy of the relevant algorithm identifiers so that they\n   are protected\
    \ by the signature or authentication process.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6211.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . 3\n     1.1.  Notation  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . 5\n   2.  Attribute Structure . . . . . . . . . . . . . . . . . .\
    \ . . . . 5\n   3.  Verification Process  . . . . . . . . . . . . . . . . . .\
    \ . . . 7\n     3.1.  Signed Data Verification Changes  . . . . . . . . . . .\
    \ . . 7\n     3.2.  Authenticated Data Verification Changes . . . . . . . . .\
    \ . 7\n   4.  IANA Considerations . . . . . . . . . . . . . . . . . . . . . .\
    \ 8\n   5.  Security Considerations . . . . . . . . . . . . . . . . . . . . 8\n\
    \   6.  References  . . . . . . . . . . . . . . . . . . . . . . . . . . 8\n  \
    \   6.1.  Normative References  . . . . . . . . . . . . . . . . . . . 8\n    \
    \ 6.2.  Informational References  . . . . . . . . . . . . . . . . . 9\n   Appendix\
    \ A.  2008 ASN.1 Module  . . . . . . . . . . . . . . . . .  10\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The Cryptographic Message Syntax [CMS], unlike X.509/PKIX\n\
    \   certificates [RFC5280], is vulnerable to algorithm substitution\n   attacks.\
    \  In an algorithm substitution attack, the attacker changes\n   either the algorithm\
    \ being used or the parameters of the algorithm in\n   order to change the result\
    \ of a signature verification process.  In\n   X.509 certificates, the signature\
    \ algorithm is protected because it\n   is duplicated in the TBSCertificate.signature\
    \ field with the proviso\n   that the validator is to compare both fields as part\
    \ of the signature\n   validation process.  This document defines a new attribute\
    \ that\n   contains a copy of the relevant algorithm identifiers so that they\n\
    \   are protected by the signature or authentication process.\n   In an algorithm\
    \ substitution attack, the attacker looks for a\n   different algorithm that produces\
    \ the same result as the algorithm\n   used by the signer.  As an example, if\
    \ the creator of the message\n   used SHA-1 as the digest algorithm to hash the\
    \ message content, then\n   the attacker looks for a different hash algorithm\
    \ that produces a\n   result that is of the same length, but with which it is\
    \ easier to\n   find collisions.  Examples of other algorithms that produce a\
    \ hash\n   value of the same length would be SHA-0 or RIPEMD-160.  Similar\n \
    \  attacks can be mounted against parameterized algorithm identifiers.\n   When\
    \ looking at some of the proposed randomized hashing functions,\n   such as that\
    \ in [RANDOM-HASH], the associated security proofs assume\n   that the parameters\
    \ are solely under the control of the originator\n   and not subject to selection\
    \ by the attacker.\n   Some algorithms have been internally designed to be more\
    \ resistant to\n   this type of attack.  Thus, an RSA PKCS #1 v.15 signature [RFC3447]\n\
    \   cannot have the associated hash algorithm changed because it is\n   encoded\
    \ as part of the signature.  The Digital Signature Algorithm\n   (DSA) was originally\
    \ defined so that it would only work with SHA-1 as\n   a hash algorithm; thus,\
    \ by knowing the public key from the\n   certificate, a validator can be assured\
    \ that the hash algorithm\n   cannot be changed.  There is a convention, undocumented\
    \ as far as I\n   can tell, that the same hash algorithm should be used for both\
    \ the\n   content digest and the signature digest.  There are cases, such as\n\
    \   third-party signers that are only given a content digest, where such\n   a\
    \ convention cannot be enforced.\n   As with all attacks, the attack is going\
    \ to be desirable on items\n   that are both long term and high value.  One would\
    \ expect that these\n   attacks are more likely to be made on older documents,\
    \ as the\n   algorithms being used when the message was signed would be more\n\
    \   likely to have degraded over time.  Countersigning, the classic\n   method\
    \ of protecting a signature, does not provide any additional\n   protection against\
    \ an algorithm substitution attack because\n   countersignatures sign just the\
    \ signature, but the algorithm\n   substitution attacks leave the signature value\
    \ alone while changing\n   the algorithms being used.\n   Using the SignerInfo\
    \ structure from CMS, let's take a more detailed\n   look at each of the fields\
    \ in the structure and discuss what fields\n   are and are not protected by the\
    \ signature.  I have included a copy\n   of the ASN.1 here for convenience.  A\
    \ similar analysis of the\n   AuthenticatedData structure is left to the reader,\
    \ but it can be done\n   in much the same way.\n         SignerInfo ::= SEQUENCE\
    \ {\n           version CMSVersion,\n           sid SignerIdentifier,\n      \
    \     digestAlgorithm DigestAlgorithmIdentifier,\n           signedAttrs [0] IMPLICIT\
    \ SignedAttributes OPTIONAL,\n           signatureAlgorithm SignatureAlgorithmIdentifier,\n\
    \           signature SignatureValue,\n           unsignedAttrs [1] IMPLICIT UnsignedAttributes\
    \ OPTIONAL }\n   version  is not protected by the signature.  As many implementations\n\
    \      of CMS today ignore the value of this field, that is not a\n      problem.\
    \  If the value is increased, then no changes in the\n      processing are expected.\
    \  If the value is decreased,\n      implementations that respect the structure\
    \ would fail to decode,\n      but an erroneous signature validation would not\
    \ be completed\n      successfully.\n   sid  can be protected using either version\
    \ of the signing certificate\n      authenticated attribute.  SigningCertificateV2\
    \ is defined in\n      [RFC5035].  SigningCertificate is defined in [ESS-BASE].\
    \  In\n      addition to allowing for the protection of the signer identifier,\n\
    \      the specific certificate is protected by including a hash of the\n    \
    \  certificate to be used for validation.\n   digestAlgorithm  has been implicitly\
    \ protected by the fact that CMS\n      has only defined one digest algorithm\
    \ for each hash value length.\n      (The algorithm RIPEMD-160 was never standardized.)\
    \  There is also\n      an unwritten convention that the same digest algorithm\
    \ should be\n      used both here and for the signature algorithm.  If newer digest\n\
    \      algorithms are defined so that there are multiple algorithms for a\n  \
    \    given hash length (it is expected that the SHA-3 project will do\n      so),\
    \ or that parameters are defined for a specific algorithm, much\n      of the\
    \ implicit protection will be lost.\n   signedAttributes  are directly protected\
    \ by the signature when they\n      are present.  The Distinguished Encoding Rules\
    \ (DER) encoding of\n      this value is what is hashed for the signature computation.\n\
    \   signatureAlgorithm  has been protected by implication in the past.\n     \
    \ The use of an RSA public key implied that the RSA v1.5 signature\n      algorithm\
    \ was being used.  The hash algorithm and this fact could\n      be checked by\
    \ the internal padding defined.  This is no longer\n      true with the addition\
    \ of the RSA-PSS signature algorithms.  The\n      use of a DSA public key implied\
    \ the SHA-1 hash algorithm as that\n      was the only possible hash algorithm\
    \ and the DSA was the public\n      signature algorithm.  This is still somewhat\
    \ true as there is an\n      implicit tie between the length of the DSA public\
    \ key and the\n      length of the hash algorithm to be used, but this is known\
    \ by\n      convention and there is no explicit enforcement for this.\n   signature\
    \  is not directly protected by any other value unless a\n      counter signature\
    \ is present.  However, this represents the\n      cryptographically computed\
    \ value that protects the rest of the\n      signature information.\n   unsignedAttrs\
    \  is not protected by the signature value.  The\n      SignedData structure was\
    \ explicitly designed that unsignedAttrs\n      are not protected by the signature\
    \ value.\n   As can be seen above, the digestAlgorithm and signatureAlgorithm\n\
    \   fields have been indirectly rather than explicitly protected in the\n   past.\
    \  With new algorithms that have been or are being defined, this\n   will no longer\
    \ be the case.  This document defines and describes a\n   new attribute that will\
    \ explicitly protect these fields along with\n   the macAlgorithm field of the\
    \ AuthenticatedData structure.\n"
- title: 1.1.  Notation
  contents:
  - "1.1.  Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in [RFC2119].\n"
- title: 2.  Attribute Structure
  contents:
  - "2.  Attribute Structure\n   The following defines the algorithm protection attribute:\n\
    \   The algorithm protection attribute has the ASN.1 type\n   CMSAlgorithmProtection:\n\
    \       aa-cmsAlgorithmProtection ATTRIBUTE ::= {\n           TYPE CMSAlgorithmProtection\n\
    \           IDENTIFIED BY { id-aa-CMSAlgorithmProtection }\n       }\n   The following\
    \ object identifier identifies the algorithm protection\n   attribute:\n     \
    \  id-aa-CMSAlgorithmProtection OBJECT IDENTIFIER ::= { iso(1)\n            member-body(2)\
    \ us(840) rsadsi(113549) pkcs(1) pkcs9(9) 52 }\n   The algorithm protection attribute\
    \ uses the following ASN.1 type:\n      CMSAlgorithmProtection ::= SEQUENCE {\n\
    \          digestAlgorithm         DigestAlgorithmIdentifier,\n          signatureAlgorithm\
    \  [1] SignatureAlgorithmIdentifier OPTIONAL,\n          macAlgorithm        [2]\
    \ MessageAuthenticationCodeAlgorithm\n                                       \
    \    OPTIONAL\n      }\n      (WITH COMPONENTS { signatureAlgorithm PRESENT,\n\
    \                         macAlgorithm ABSENT } |\n       WITH COMPONENTS { signatureAlgorithm\
    \ ABSENT,\n                         macAlgorithm PRESENT })\n   The fields are\
    \ defined as follows:\n   digestAlgorithm  contains a copy of the SignerInfo.digestAlgorithm\n\
    \      field or the AuthenticatedData.digestAlgorithm field including any\n  \
    \    parameters associated with it.\n   signatureAlgorithm  contains a copy of\
    \ the signature algorithm\n      identifier and any parameters associated with\
    \ it\n      (SignerInfo.signatureAlgorithm).  This field is populated only if\n\
    \      the attribute is placed in a SignerInfo.signedAttrs sequence.\n   macAlgorithm\
    \  contains a copy of the message authentication code\n      algorithm identifier\
    \ and any parameters associated with it\n      (AuthenticatedData.macAlgorithm).\
    \  This field is populated only if\n      the attribute is placed in an AuthenticatedData.authAttrs\n\
    \      sequence.\n   Exactly one of signatureAlgorithm or macAlgorithm SHALL be\
    \ present.\n   An algorithm protection attribute MUST have a single attribute\
    \ value,\n   even though the syntax is defined as a SET OF AttributeValue.  There\n\
    \   MUST NOT be zero or multiple instances of AttributeValue present.\n   The\
    \ algorithm protection attribute MUST be a signed attribute or an\n   authenticated\
    \ attribute; it MUST NOT be an unsigned attribute, an\n   unauthenticated attribute,\
    \ or an unprotected attribute.\n   The SignedAttributes and AuthAttributes syntax\
    \ are each defined as a\n   SET of Attributes.  The SignedAttributes in a signerInfo\
    \ MUST include\n   only one instance of the algorithm protection attribute.  Similarly,\n\
    \   the AuthAttributes in an AuthenticatedData MUST include only one\n   instance\
    \ of the algorithm protection attribute.\n"
- title: 3.  Verification Process
  contents:
  - "3.  Verification Process\n   While the exact verification steps depend on the\
    \ structure that is\n   being validated, there are some common rules to be followed\
    \ when\n   comparing the two algorithm structures:\n   o  A field with a default\
    \ value MUST compare as identical,\n      independently of whether the value is\
    \ defaulted or is explicitly\n      provided.  This implies that a binary compare\
    \ of the encoded bytes\n      is insufficient.\n   o  For some algorithms, such\
    \ as SHA-1, the parameter value of NULL\n      can be included in the ASN.1 encoding\
    \ by some implementations and\n      be omitted by other implementations.  It\
    \ is left to the\n      implementer of this attribute to decide the comparison\
    \ for\n      equality is satisfied in this case.  As a general rule, the same\n\
    \      implementation is expected to produce both encoded values thus\n      making\
    \ it unlikely that this corner case should exist.  This is an\n      issue because\
    \ some implementations will omit a NULL element, while\n      others will encode\
    \ a NULL element for some digest algorithms such\n      as SHA-1 (see the comments\
    \ in Section 2.1 of [RFC3370]).  The\n      issue is even worse because the NULL\
    \ is absent in some cases\n      (e.g., [RFC3370]), but is required in other cases\
    \ (e.g.,\n      [RFC4056]).\n"
- title: 3.1.  Signed Data Verification Changes
  contents:
  - "3.1.  Signed Data Verification Changes\n   If a CMS validator supports this attribute,\
    \ the following additional\n   verification steps MUST be performed:\n   1.  The\
    \ SignerInfo.digestAlgorithm field MUST be compared to the\n       digestAlgorithm\
    \ field in the attribute.  If the fields are not\n       the same (modulo encoding),\
    \ then signature validation MUST fail.\n   2.  The SignerInfo.signatureAlgorithm\
    \ field MUST be compared to the\n       signatureAlgorithm field in the attribute.\
    \  If the fields are not\n       the same (modulo encoding), then the signature\
    \ validation MUST\n       fail.\n"
- title: 3.2.  Authenticated Data Verification Changes
  contents:
  - "3.2.  Authenticated Data Verification Changes\n   If a CMS validator supports\
    \ this attribute, the following additional\n   verification steps MUST be performed:\n\
    \   1.  The AuthenticatedData.digestAlgorithm field MUST be compared to\n    \
    \   the digestAlgorithm field in the attribute.  If the fields are\n       not\
    \ same (modulo encoding), then authentication MUST fail.\n   2.  The AuthenticatedData.macAlgorithm\
    \ field MUST be compared to the\n       macAlgorithm field in the attribute. \
    \ If the fields are not the\n       same (modulo encoding), then the authentication\
    \ MUST fail.\n"
- title: 4.  IANA Considerations
  contents:
  - "4.  IANA Considerations\n   All identifiers are assigned out of the S/MIME OID\
    \ arc.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This document is designed to address the security\
    \ issue of algorithm\n   substitutions of the algorithms used by the validator.\
    \  At this time,\n   there is no known method to exploit this type of attack.\
    \  If the\n   attack could be successful, then either a weaker algorithm could\
    \ be\n   substituted for a stronger algorithm or the parameters could be\n   modified\
    \ by an attacker to change the behavior of the hashing\n   algorithm used.  (One\
    \ example would be changing the initial parameter\n   value for [RFC6210].)\n\
    \   The attribute defined in this document is to be placed in a location\n   that\
    \ is protected by the signature or message authentication code.\n   This attribute\
    \ does not provide any additional security if placed in\n   an unsigned or unauthenticated\
    \ location.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [ASN.1-2008]   ITU-T, \"ITU-T Recommendations\
    \ X.680, X.681, X.682, and\n                  X.683\", 2008.\n   [CMS]       \
    \   Housley, R., \"Cryptographic Message Syntax (CMS)\",\n                  RFC\
    \ 5652, September 2009.\n   [ESS-BASE]     Hoffman, P., \"Enhanced Security Services\
    \ for S/MIME\",\n                  RFC 2634, June 1999.\n   [RFC2119]      Bradner,\
    \ S., \"Key words for use in RFCs to Indicate\n                  Requirement Levels\"\
    , BCP 14, RFC 2119, March 1997.\n   [RFC5035]      Schaad, J., \"Enhanced Security\
    \ Services (ESS) Update:\n                  Adding CertID Algorithm Agility\"\
    , RFC 5035,\n                  August 2007.\n   [RFC5912]      Hoffman, P. and\
    \ J. Schaad, \"New ASN.1 Modules for the\n                  Public Key Infrastructure\
    \ Using X.509 (PKIX)\",\n                  RFC 5912, June 2010.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [RANDOM-HASH]  Halevi, S. and H. Krawczyk, \"\
    Strengthening Digital\n                  Signatures via Random Hashing\", January\
    \ 2007,\n                  <http://webee.technion.ac.il/~hugo/rhash/rhash.pdf>.\n\
    \   [RFC3370]      Housley, R., \"Cryptographic Message Syntax (CMS)\n       \
    \           Algorithms\", RFC 3370, August 2002.\n   [RFC3447]      Jonsson, J.\
    \ and B. Kaliski, \"Public-Key Cryptography\n                  Standards (PKCS)\
    \ #1: RSA Cryptography Specifications\n                  Version 2.1\", RFC 3447,\
    \ February 2003.\n   [RFC4056]      Schaad, J., \"Use of the RSASSA-PSS Signature\
    \ Algorithm\n                  in Cryptographic Message Syntax (CMS)\", RFC 4056,\n\
    \                  June 2005.\n   [RFC5280]      Cooper, D., Santesson, S., Farrell,\
    \ S., Boeyen, S.,\n                  Housley, R., and W. Polk, \"Internet X.509\
    \ Public Key\n                  Infrastructure Certificate and Certificate Revocation\n\
    \                  List (CRL) Profile\", RFC 5280, May 2008.\n   [RFC6210]   \
    \   Schaad, J., \"Experiment: Hash Functions with\n                  Parameters\
    \ in the Cryptographic Message Syntax (CMS)\n                  and S/MIME\", RFC\
    \ 6210, April 2011.\n"
- title: Appendix A.  2008 ASN.1 Module
  contents:
  - "Appendix A.  2008 ASN.1 Module\n   The ASN.1 module defined uses the 2008 ASN.1\
    \ definitions found in\n   [ASN.1-2008].  This module contains the ASN.1 module\
    \ that contains\n   the required definitions for the types and values defined\
    \ in this\n   document.  The module uses the ATTRIBUTE class defined in [RFC5912].\n\
    \  CMSAlgorithmProtectionAttribute\n    { iso(1) member-body(2) us(840) rsadsi(113549)\n\
    \      pkcs(1) pkcs-9(9) smime(16) modules(0)\n      id-mod-cms-algorithmProtect(52)\
    \ }\n  DEFINITIONS IMPLICIT TAGS ::=\n  BEGIN\n   IMPORTS\n     -- Cryptographic\
    \ Message Syntax (CMS) [CMS]\n     DigestAlgorithmIdentifier, MessageAuthenticationCodeAlgorithm,\n\
    \     SignatureAlgorithmIdentifier\n     FROM  CryptographicMessageSyntax-2009\n\
    \       { iso(1) member-body(2) us(840) rsadsi(113549)\n         pkcs(1) pkcs-9(9)\
    \ smime(16) modules(0) id-mod-cms-2004-02(41) }\n     -- Common PKIX structures\
    \ [RFC5912]\n     ATTRIBUTE\n     FROM PKIX-CommonTypes-2009\n       { iso(1)\
    \ identified-organization(3) dod(6) internet(1)\n         security(5) mechanisms(5)\
    \ pkix(7) id-mod(0)\n         id-mod-pkixCommon-02(57)};\n     --\n     --  The\
    \ CMS Algorithm Protection attribute is a Signed Attribute or\n     --  an Authenticated\
    \ Attribute.\n     --\n     --  Add this attribute to SignedAttributesSet in [CMS]\n\
    \     --  Add this attribute to AuthAttributeSet in [CMS]\n     --\n     aa-cmsAlgorithmProtection\
    \ ATTRIBUTE ::= {\n        TYPE CMSAlgorithmProtection\n        IDENTIFIED BY\
    \ { id-aa-cmsAlgorithmProtect }\n     }\n     id-aa-cmsAlgorithmProtect OBJECT\
    \ IDENTIFIER ::= {\n        iso(1) member-body(2) us(840) rsadsi(113549) pkcs(1)\n\
    \        pkcs9(9) 52 }\n     CMSAlgorithmProtection ::= SEQUENCE {\n        digestAlgorithm\
    \         DigestAlgorithmIdentifier,\n        signatureAlgorithm  [1] SignatureAlgorithmIdentifier\
    \ OPTIONAL,\n        macAlgorithm        [2] MessageAuthenticationCodeAlgorithm\n\
    \                                          OPTIONAL\n     }\n     (WITH COMPONENTS\
    \ { signatureAlgorithm PRESENT,\n                        macAlgorithm ABSENT }\
    \ |\n      WITH COMPONENTS { signatureAlgorithm ABSENT,\n                    \
    \    macAlgorithm PRESENT })\n  END\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Jim Schaad\n   Soaring Hawk Consulting\n   EMail: ietf@augustcellars.com\n"
