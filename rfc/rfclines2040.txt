This document defines four ciphers with enough detail to ensure interoperability between different implementations.
The first cipher is the raw RC5 block cipher.
The RC5 cipher takes a fixed size input block and produces a fixed sized output block using a transformation that depends on a key.
The second cipher, RC5 CBC, is the Cipher Block Chaining (CBC) mode for RC5.
It can process messages whose length is a multiple of the RC5 block size.
The third cipher, RC5  CBC Pad, handles plaintext of any length, though the ciphertext will be longer than the plaintext by at most the size of a single RC5 block.
The RC5 CTS cipher is the Cipher Text Stealing mode of RC5, which handles plaintext of any length and the ciphertext length matches the plaintext length.
The RC5 cipher was invented by Professor Ronald L. Rivest of the Massachusetts Institute of Technology in 1994.
It is a very fast and simple algorithm that is parameterized by the block size, the number of rounds, and key length.
These parameters can be adjusted to meet different goals for security, performance, and exportability.
RSA Data Security Incorporated has filed a patent application on the RC5 cipher and for trademark protection for RC5, RC5 CBC, RC5 CBC
Pad, RC5 CTS and assorted variations.
This memo is a restatement of existing published material.
The description of RC5 follows the notation and order of explanation found in the original RC5 paper by Professor Rivest [2].
The CBC mode appears in reference works such as the one by Bruce Schneier [6].
The CBC Pad mode is the same as in the Public Key Cryptography Standard (PKCS) number five [5].
Sample C code [8] is included for clarity only and is equivalent to the English language descriptions.
The ciphers will be explained in a bottom up object oriented fashion.
First, RC5 keys will be presented along with the key expansion algorithm.
Second, the RC5 block cipher is explained, and finally, the RC5 CBC and RC5 CBC Pad ciphers are specified.
For brevity, only the encryption process is described.
Decryption is achieved by inverting the steps of encryption.
The object oriented description found here should make it easier to implement interoperable systems, though it is not as terse as the functional descriptions found in the references.
There are two classes of objects, keys and cipher algorithms.
Both classes share operations that create and destroy these objects in a manner that ensures that secret information is not returned to the memory manager.
Keys also have a "set" operation that copies a secret key into the object.
The "set" operation for the cipher objects defines the number of rounds, and the initialization vector.
There are four operations for the cipher objects described in this memo.
There is binding a key to a cipher object, setting a new initialization vector for a cipher object without changing the key, encrypting part of a message (this would be performed multiple times for long messages), and processing the last part of a message which may add padding or check the length of the message.
In summary, the cipher will be explained in terms of these operations:
RC5 CBC Encrypt Update   Process part of a message.
RC5 CBC Encrypt Final    Process the end of a message.
The term "word" refers to a string of bits of a particular length that can be operated on as either an unsigned integer or as a bit vector.
For example a "word" might be 32 or 64 bits long depending on the desired block size for the RC5 cipher.
A 32 bit word will produce a 64 bit block size.
For best performance the RC5 word size should match the register size of the CPU.
The term "byte" refers to eight bits.
The following variables will be used throughout this memo with these meanings:
This is the word size for RC5 measured in bits.
It is half the block size.
The word sizes covered by this memo are 32 and 64.
This is the word size for RC5 measured in bytes.
This is the block size for RC5 measured in bits.
It is twice the word size.
When RC5 is used as a 64 bit block cipher, B is 64 and W is 32.
In the sample code, B, is used as a variable instead of a cipher system parameter, but this usage should be obvious from context.
This is the block size for RC5 measured in bytes.
This is the byte length of the secret key.
0 <  b < 256.
This is the number of rounds of the inner RC5 transform. 0
This is the number of words in the expanded key table.
1 < T < 513.
This is the byte length of the plaintext message.
This is the ciphertext output which is treated as a sequence of bytes indexed by: C[0], C[1]
Description of RC5 Keys Like most block ciphers, RC5 expands a small user key into a table of internal keys.
The byte length of the user key is one of the parameters of the cipher, so
the RC5 user key object must be able to hold variable length keys.
/ unsigned char    keyBytes; } rc5UserKey; The basic operations on a key are to create, destroy and set.
To avoid exposing key material to other parts of an application, the destroy operation zeros the memory allocated for the key before releasing it to the memory manager.
A general key object may support other operations such as generating a new random key and deriving a key from key agreement information.
To create a key, the memory for the key object must be allocated and initialized.
The C code below assumes that a function called "malloc" will return a block of uninitialized memory from the heap, or zero indicating an error. /
Allocate and initialize an RC5 user key.
/ rc5UserKey  RC5 Key Create
(rc5UserKey  ) malloc (sizeof( pKey));
To destroy a key, the memory must be zeroed and released to the memory manager.
The C code below assumes that a function called "free" will return a block of memory to the heap. /
Zero and free an RC5 user key.
((rc5UserKey  ) 0)) return; if (pKey keyBytes
Setting the key object makes a copy of the secret key into a block of memory allocated from the heap. /
Set the value of an RC5 user key.
Copy the key bytes so the caller can zero and   free the original.
if problems  / int RC5 Key Set (pKey, keyLength, keyBytes)
(unsigned char  ) malloc (keyLength); if (keyBytesCopy
((unsigned char  ) 0)) return (0); from   keyBytes
Description of RC5 Key Expansion
This section describes the key expansion algorithm.
To be specific, the sample code assumes that the block size is 64 bits.
Several programming parameters depend on the block size. /
Definitions for RC5 as a 64 bit block cipher.
On a DEC Alpha "unsigned long" is 64 bits, not 32.
x and s are of type RC5 WORD.
5.1 Definition of initialization constants Two constants, Pw and Qw, are defined for any word size W by the expressions: Pw   Odd((e 2) 2  W)
2 raised to the power of W, and Odd(x) is equal to x
if x is odd, or equal to x plus one if x is even.
For W equal to 16, 32, and 64, the Pw and Qw constants are the following hexadecimal values: #define
0x9e3779b97f4a7c15 #if W   16 #define
Select 16 bit word size  /
endif #if W   32 #define
Pw   P32 /  Select 32 bit word size  /
Select 64 bit word size  /
Qw   Q64 #endif 5.2 Interface definition
The key expansion routine converts the b byte secret key, K, into an expanded key, S, which is a sequence of T   2 (R 1) words.
The expansion algorithm uses two constants that are derived from the constants, e, and phi.
These are used to initialize S, which is then modified using K.  A C code procedure header for this routine
This step converts the b byte key into a sequence of words stored in the array L.
On a little endian processor this is accomplished by zeroing the L array and copying in the b bytes of K.
/ RC5 WORD    A, B
; } 5.4 Initialize the expanded key table This step fills in the S table with a fixed (key independent) pseudo random pattern using an arithmetic progression based on Pw and Qw
The element S[i] equals i
Qw   Pw modulo 2  W.
This table could be precomputed and copied as needed or computed on the fly.
In C code it can be computed by: T   2 (R 1); S[0]
First the number of iterations of the mixing function, k, is set to three times the maximum of the number of initialized elements of L, called LL, and the number of elements in S, called T.
Each iteration is similar to an interation of the encryption inner loop in that two variables
A and B are updated by the first and second halves of the iteration.
Initially A and B are zero as are the indexes into the S array, i, and the L array, j.
In the first half of the iteration, a partial result is computed by summing S[i], A and B.
The new value for A is this partial result rotated left three bits.
The A value is then placed into S[i].
The second half of the iteration computes a second partial result that is the sum of L[j], A and B.
The second partial result is then rotated left by A B bit positions and set to be the new value for B.
The new B value is then placed into L[j].
At the end of the iteration, i and j are incremented modulo the size of their respective arrays.
In C code: i   j   0; A   B   0; if (LL > T)
A   B, 3, W); S[i]
A   B, A   B, W)
End of RC5 Key Expand  / 6.
Description of RC5 Block Cipher
This section describes the RC5 block cipher by explaining the steps required to perform an encryption of a single input block.
The decryption process is the reverse of these steps so it will not be explained.
The RC5 cipher is parameterized by a version number, V, a round count, R, and a word size in bits, W.
This description corresponds to original version of RC5
(V   16 decimal) and covers any positive value for R and the values 16, 32, and 64 for W.
The inputs to this process are the expanded key table, S, the number of rounds, R, the input buffer pointer, in, and the output buffer pointer, out.
A possible C code procedure header for this would be: void RC5 Block Encrypt (S, R, in, out)
A and B are 32 bit values.
The first input byte becomes the least significant byte of A, the fourth input byte becomes the most significant byte of A, the fifth input byte becomes the least significant byte of B and the last input byte becomes the most significant byte of B.
This conversion can be very efficient for little endian processors such as the Intel family.
<< 24; 6.2 Iterating the round function This step mixes the expanded key with the input to perform the fundamental encryption operation.
The first two words of the expanded key are added to A and B respectively, and then the round function is repeated R times.
The first half of the round function computes a new value for A based on the values of A, B, and the next unused word in the expanded key table.
Specifically, A is XOR'ed with B
and then this first partial result is rotated to the left by an amount specified by B to form the second partial result.
The rotation is performed on a W bit boundary (i.e., 32 bit rotation for the version of RC5 that has a 64 bit block size).
The actual rotation amount only depends on the least significant log base 2 of W bits of B.
The next unused word of the expanded key table is then added to the second partial result and
this becomes the new value for A.
The second half of the round function is identical except the roles of A and B are switched.
Specifically, B is exclusive or'ed with A
and then this first partial result is rotated to the left by an amount specified by A to form the second partial result.
The next unused word of the expanded key table is then added to the second partial result and
this becomes the new value for B. One way to express this in C code
The final step is to convert A and B back into a sequence of bytes.
This is the inverse of the load operation.
An expression of this in C code could be: out[0]
(A >> 16) & 0xFF
(A >> 24) & 0xFF
(B >> 16) & 0xFF
Description of RC5 CBC and RC5 CBC Pad
This section describes the CBC and CBC Pad modes of the RC5 cipher.
This description is based on the RC5 key objects and RC5 block cipher described earlier.
The cipher object needs to keep track of the padding mode, the number of rounds, the expanded key, the initialization vector, the CBC chaining block, and an input buffer.
/ } rc5CBCAlg; To create a cipher algorithm object, the parameters must be checked and then space allocated for the expanded key table.
The expanded key is initialized using the method described earlier.
Finally, the state variables (padding mode, number of rounds, and the input buffer) are set to their initial values.
RC5 CBC Create (Pad, R, Version, bb, I)
(RC5 WORD  ) malloc (BB   (R   1));
Destroying cipher objects Destroying the cipher object is the inverse of creating it with care being take to zero memory before returning it to the memory manager.
Two expanded key words per round.
(pAlg S); for (count   0 ; count < BB ; count ) {
(unsigned char) 0; pAlg chainBlock[count]
Often the same key is used with many messages that each have a unique initialization vector.
To avoid the overhead of creating a new cipher object, it makes more sense to provide an operation that allows the caller to change the initialization vector for an existing cipher object.
This can be called after Final without needing to   call Init or Create again.
/ int RC5 CBC SetIV (pAlg, I)
Binding a key to a cipher object
The operation that binds a key to a cipher object performs the key expansion.
Key expansion could be an operation on keys, but that would not work correctly for ciphers that modify the expanded key as they operate.
After expanding the key, this operation must initialize the CBC chain block from the initialization vector and prepare the input buffer to receive the first character.
the encryption object with the given key.
After this routine, the caller frees the key object.
The IV for this CBC object can be changed by calling   the SetIV routine.
The only way to change the key is   to destroy the CBC object and create a new one.
/ int RC5 CBC Encrypt Init (pAlg, pKey)
The update operation can be performed on a sequence of message parts in order to incrementally produce the ciphertext.
After the last part is processed, the Final operation is called to pick up any plaintext bytes or padding that are buffered inside the cipher object.
The plaintext and ciphertext buffers can be the same.
The byte len of the ciphertext is put in  pCipherLen.
Call this multiple times passing successive   parts of a large message.
After the last part has been passed to Update,   call Final.
if problems like output buffer too small.
/ int RC5 CBC Encrypt Update (pAlg, N, P, pCipherLen, maxCipherLen, C)
/ { 7.5.1   Output buffer size check.
The first step of plaintext processing is to make sure that the output buffer is big enough hold the ciphertext.
The ciphertext will be produced in multiples of the block size and depends on the number of plaintext characters passed to this operation plus any characters that are in the cipher object's internal buffer.
The next step is to add characters to the internal buffer until a full block has been constructed.
When that happens, the buffer pointers are reset and the input buffer is exclusive or'ed
with the CBC chaining block.
The byte order of the chaining block is the same as the input block.
For example, the ninth input byte is XOR'ed with the first ciphertext byte.
The result is then passed to the RC5 block cipher which was described earlier.
To reduce data movement and byte alignment problems, the output of RC5 can be directly written into the CBC chaining block.
Finally, this output is copied to the ciphertext buffer provided by the user.
Before returning, the actual size of the ciphertext is passed back to the caller.
In C, this step can be performed by: plainIndex   cipherIndex   0; while (plainIndex < N) { if (pAlg inputBlockIndex < BB) { pAlg inputBlock[pAlg inputBlockIndex]
pAlg inputBlockIndex   0; for (j   0 ; j < BB
RC5 CBC Encrypt Update  / 7.6 Final block processing This step handles the last block of plaintext.
For RC5 CBC, this step just performs error checking to ensure that the plaintext length was indeed a multiple of the block length.
For RC5 CBC Pad, padding bytes are added to the plaintext.
The pad bytes are all the same and are set to a byte that represents the number of bytes of padding.
For example if there are eight bytes of padding, the bytes will all have the hexadecimal value 0x08.
There will be between one and BB padding bytes, inclusive.
In C code this would be: /
Produce the final block of ciphertext including any   padding, and then reset the algorithm object.
/ int RC5 CBC Encrypt Final (pAlg, pCipherLen, maxCipherLen, C)
the chain block into the plaintext block.
Reset the CBC algorithm object.
The Cipher Text Stealing (CTS) mode for block ciphers is described by Schneier on pages 195 and 196 of [6].
This mode handles any length of plaintext and produces ciphertext whose length matches the plaintext length.
The CTS mode behaves like the CBC mode for all but the last two blocks of the plaintext.
The following steps describe how to handle the last two portions of the plaintext, called Pn 1 and Pn, where the length of Pn 1 equals the block size, BB, and the length of the last block, Pn, is Ln bytes.
Notice that Ln ranges from 1 to BB, inclusive
, so Pn could in fact be a complete block.
Exclusive or Pn 1 with the previous ciphertext block, Cn 2, to create Xn 1.
Select the first Ln bytes of En 1 to create Cn.
Pad Pn with zeros at the end to create P of length BB.
Exclusive or En 1 with P to create to create Dn.
Encrypt Dn to create Cn 1 7.
The last two parts of the ciphertext are Cn 1 and Cn respectively.
To implement CTS encryption, the RC5 CTS object must hold on to (buffer) at most 2 BB bytes of plaintext and process them specially when the RC5 CTS Encrypt Final routine is called.
The following steps describe how to decrypt Cn 1 and Cn.
Decrypt Cn 1 to create Dn. 2.
Pad Cn with zeros at the end to create C of length BB.
Exclusive or Dn with C to create Xn.
Select the first Ln bytes of Xn to create Pn. 5.
Append the tail (BB minus Ln) bytes of Xn to Cn to create En. 6.
Decrypt En to create Pn 1. 7.
The last two parts of the plaintext are Pn 1 and Pn respectively.
Test Program and Vectors To help confirm the correctness of an implementation, this section gives a test program and results from a set of test vectors.
The following test program written in C reads test vectors from its input stream and writes results on its output stream.
The following subsections give a set of test vectors for inputs and the resulting outputs.
#define MAX KEY LENGTH   (64 /  bytes  /)
#define MAX PLAIN LENGTH (128 /  bytes  /)
LENGTH(MAX PLAIN LENGTH   BLOCK LENGTH)
typedef struct test vector { int padding mode; int rounds; char    keytext[2
MAX KEY LENGTH 1]; int key length; char    key[MAX KEY LENGTH]; char    ivtext[2 BLOCK LENGTH 1]; int iv length; char    iv[BLOCK LENGTH]; char
MAX PLAIN LENGTH 1]; int plain length; char    plain[MAX PLAIN LENGTH]; char    ciphertext[2 MAX CIPHER LENGTH 1]; int cipher length
Set pTo length to the byte length of the result.
Return 1 if everything went OK.
/  Ptr to next resulting byte.
/ int  byte length   0
((char)(value & 0xFF)); byte length
Return 1 if everything went OK.
/  Ptr to next resulting byte.
/ int get test vector(ptv)
test vector  ptv; { if (1 !  scanf("%d", &ptv padding mode)) return (0);
if (1 !  scanf("%d", &ptv rounds)) return (0); if ((ptv rounds < 0)
(MAX ROUNDS < ptv rounds))
if (1 !  scanf("%s", &ptv keytext)) return (0); if (1 !
hex to bytes(ptv keytext, ptv key, &ptv key length))
if (1 !  scanf("%s", &ptv ivtext)) return (0); if (1 !
bytes(ptv ivtext, ptv iv, &ptv iv length)) return (0);
ptv iv length) return (0);
if (1 !  scanf("%s", &ptv plaintext)) return (0); if (1 !
RC5 CBC Encrypt Init (pAlg, pKey); ptv cipher length   0;
RC5 CBC Encrypt Update (pAlg, ptv plain length, ptv plain, &(numBytesOut), MAX CIPHER LENGTH ptv cipher length, &
RC5 CBC Encrypt Final (pAlg, &(numBytesOut),
MAX CIPHER LENGTH ptv cipher length, &
The following text is an input file to the test program presented in the previous subsection.
The output is given in the next subsection.
1020304050607080 0 08 01020304050607081020304050607080 0102030405060708 1020304050607080
12 01020304050607081020304050607080 0102030405060708 1020304050607080 0
The following text is the output produced by the test program run on the inputs given in the previous subsection.
Each input line should contain the following test parameters separated by a single space: Padding mode flag.
Use 1 for RC5 CBC Pad, else 0.
Number of rounds for RC5.
Two characters per byte like '01'.
Must be 16 hex characters.
An end of file or format error terminates the tester.
C   7fd1a023a5bba217 RC5 CBC Pad R    8
P   ffffffffffffffff7875dbf6738c647811223344556677 C   7875dbf6738c64787cb3f1df34f948117fd1a023a5bba217 10.
The RC5 cipher is relatively new so critical reviews are still being performed.
However, the cipher's simple structure makes it easy to analyze and hopefully easier to assess its strength.
Reviews so far are very promising.
Early results [1] suggest that for RC5 with a 64 bit block size (32 bit word size), 12 rounds will suffice to resist linear and differential cyptanalysis.
The 128 bit block version has not been studied as much as the 64 bit version, but it appears that 16 rounds would be an appropriate minimum.
Block sizes less than 64 bits are academically interesting but should not be used for cryptographic security.
Greater security can be achieved by increasing the number of rounds at the cost of decreasing the throughput of the cipher.
The length of the secret key helps determine the cipher's resistance to brute force key searching attacks.
A key length of 128 bits should give adequate protection against brute force key searching by a well funded opponent for a couple decades [7].
For RC5 with 12 rounds, the key setup time and data encryption time are the same for all key lengths less than 832 bits, so there is no performance reason for choosing short keys.
For larger keys, the key expansion step will run slower because the user key table, L, will be longer than the expanded key table, S.
However, the encryption time will be unchanged since it is only a function of the number of rounds.
To comply with export regulations it may be necessary to choose keys that only have 40 unknown bits.
A poor way to do this would be to choose a simple 5 byte key.
This should be avoided because it would be easy for an opponent to pre compute key searching information.
Another common mechanism is to pick a 128 bit key and publish the first 88 bits.
This method reveals a large number of the entries in the user key table, L, and the question of whether RC5 key expansion provides adequate security in this situation has not been studied, though it may be fine.
A conservative way to conform to a 40 bit limitation is to pick a seed value of 128 bits, publish 88 bits of this seed, run the entire seed through a hash function like MD5 [4], and use the 128 bit output of the hash function as the RC5 key.
In the case of 40 unknown key bits with 88 known key bits (i.e., 88 salt bits) there should still be 12 or more rounds for the 64 bit block version of RC5, otherwise the value of adding salt bits to the key is likely to be lost.
The lifetime of the key also influences security.
For high security applications, the key to any 64 bit block cipher should be changed after encrypting 2  32 blocks (2  64 blocks for a 128 bit block cipher).
This helps to guard against linear and differential cryptanalysis.
For the case of 64 bit blocks, this rule would recommend changing the key after 2  40 (i.e. 10  12) bytes are encrypted.
[6] page 183 for further discussion.
For applications that use ASN.1 descriptions, it is necessary to define the algorithm identifier for these ciphers along with their parameter block formats.
The ASN.1 definition of an algorithm identifier already exists and is listed below for reference.
The values for the algorithm field are:
The structure of the parameters field for these algorithms is given below.
NOTE: if the iv field is not included, then the initialization vector defaults to a block of zeros whose size depends on the blockSizeInBits field.
