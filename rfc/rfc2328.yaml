- title: __initial_text__
  contents:
  - '                             OSPF Version 2

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n    This document specifies an Internet standards track\
    \ protocol for the\n    Internet community, and requests discussion and suggestions\
    \ for\n    improvements.  Please refer to the current edition of the \"Internet\n\
    \    Official Protocol Standards\" (STD 1) for the standardization state\n   \
    \ and status of this protocol.  Distribution of this memo is\n    unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n    Copyright (C) The Internet Society (1998).  All Rights\
    \ Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n    This memo documents version 2 of the OSPF protocol.  OSPF is a\n\
    \    link-state routing protocol.  It is designed to be run internal to a\n  \
    \  single Autonomous System.  Each OSPF router maintains an identical\n    database\
    \ describing the Autonomous System's topology.  From this\n    database, a routing\
    \ table is calculated by constructing a shortest-\n    path tree.\n    OSPF recalculates\
    \ routes quickly in the face of topological changes,\n    utilizing a minimum\
    \ of routing protocol traffic.  OSPF provides\n    support for equal-cost multipath.\
    \  An area routing capability is\n    provided, enabling an additional level of\
    \ routing protection and a\n    reduction in routing protocol traffic.  In addition,\
    \ all OSPF\n    routing protocol exchanges are authenticated.\n    The differences\
    \ between this memo and RFC 2178 are explained in\n    Appendix G. All differences\
    \ are backward-compatible in nature.\n    Implementations of this memo and of\
    \ RFCs 2178, 1583, and 1247 will\n    interoperate.\n    Please send comments\
    \ to ospf@gated.cornell.edu.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n    1        Introduction ...........................................\
    \ 6\n    1.1      Protocol Overview ...................................... 6\n\
    \    1.2      Definitions of commonly used terms ..................... 8\n   \
    \ 1.3      Brief history of link-state routing technology ........ 11\n    1.4\
    \      Organization of this document ......................... 12\n    1.5   \
    \   Acknowledgments ....................................... 12\n    2        The\
    \ link-state database: organization and calculations  13\n    2.1      Representation\
    \ of routers and networks ................ 13\n    2.1.1    Representation of\
    \ non-broadcast networks .............. 15\n    2.1.2    An example link-state\
    \ database ........................ 18\n    2.2      The shortest-path tree ................................\
    \ 21\n    2.3      Use of external routing information ................... 23\n\
    \    2.4      Equal-cost multipath .................................. 26\n   \
    \ 3        Splitting the AS into Areas ........................... 26\n    3.1\
    \      The backbone of the Autonomous System ................. 27\n    3.2   \
    \   Inter-area routing .................................... 27\n    3.3      Classification\
    \ of routers ............................. 28\n    3.4      A sample area configuration\
    \ ........................... 29\n    3.5      IP subnetting support .................................\
    \ 35\n    3.6      Supporting stub areas ................................. 37\n\
    \    3.7      Partitions of areas ................................... 38\n   \
    \ 4        Functional Summary .................................... 40\n    4.1\
    \      Inter-area routing .................................... 41\n    4.2   \
    \   AS external routes .................................... 41\n    4.3      Routing\
    \ protocol packets .............................. 42\n    4.4      Basic implementation\
    \ requirements ..................... 43\n    4.5      Optional OSPF capabilities\
    \ ............................ 46\n    5        Protocol data structures ..............................\
    \ 47\n    6        The Area Data Structure ............................... 49\n\
    \    7        Bringing Up Adjacencies ............................... 52\n   \
    \ 7.1      The Hello Protocol .................................... 52\n    7.2\
    \      The Synchronization of Databases ...................... 53\n    7.3   \
    \   The Designated Router ................................. 54\n    7.4      The\
    \ Backup Designated Router .......................... 56\n    7.5      The graph\
    \ of adjacencies .............................. 56\n    8        Protocol Packet\
    \ Processing ............................ 58\n    8.1      Sending protocol packets\
    \ .............................. 58\n    8.2      Receiving protocol packets ............................\
    \ 61\n    9        The Interface Data Structure .......................... 63\n\
    \    9.1      Interface states ...................................... 67\n   \
    \ 9.2      Events causing interface state changes ................ 70\n    9.3\
    \      The Interface state machine ........................... 72\n    9.4   \
    \   Electing the Designated Router ........................ 75\n    9.5      Sending\
    \ Hello packets ................................. 77\n    9.5.1    Sending Hello\
    \ packets on NBMA networks ................ 79\n    10       The Neighbor Data\
    \ Structure ........................... 80\n    10.1     Neighbor states .......................................\
    \ 83\n    10.2     Events causing neighbor state changes ................. 87\n\
    \    10.3     The Neighbor state machine ............................ 89\n   \
    \ 10.4     Whether to become adjacent ............................ 95\n    10.5\
    \     Receiving Hello Packets ............................... 96\n    10.6   \
    \  Receiving Database Description Packets ................ 99\n    10.7     Receiving\
    \ Link State Request Packets ................. 102\n    10.8     Sending Database\
    \ Description Packets ................. 103\n    10.9     Sending Link State Request\
    \ Packets ................... 104\n    10.10    An Example ...........................................\
    \ 105\n    11       The Routing Table Structure .......................... 107\n\
    \    11.1     Routing table lookup ................................. 111\n   \
    \ 11.2     Sample routing table, without areas .................. 111\n    11.3\
    \     Sample routing table, with areas ..................... 112\n    12     \
    \  Link State Advertisements (LSAs) ..................... 115\n    12.1     The\
    \ LSA Header ....................................... 116\n    12.1.1   LS age\
    \ ............................................... 116\n    12.1.2   Options ..............................................\
    \ 117\n    12.1.3   LS type .............................................. 117\n\
    \    12.1.4   Link State ID ........................................ 117\n   \
    \ 12.1.5   Advertising Router ................................... 119\n    12.1.6\
    \   LS sequence number ................................... 120\n    12.1.7   LS\
    \ checksum .......................................... 121\n    12.2     The link\
    \ state database .............................. 121\n    12.3     Representation\
    \ of TOS ................................ 122\n    12.4     Originating LSAs .....................................\
    \ 123\n    12.4.1   Router-LSAs .......................................... 126\n\
    \    12.4.1.1 Describing point-to-point interfaces ................. 130\n   \
    \ 12.4.1.2 Describing broadcast and NBMA interfaces ............. 130\n    12.4.1.3\
    \ Describing virtual links ............................. 131\n    12.4.1.4 Describing\
    \ Point-to-MultiPoint interfaces ............ 131\n    12.4.1.5 Examples of router-LSAs\
    \ .............................. 132\n    12.4.2   Network-LSAs .........................................\
    \ 133\n    12.4.2.1 Examples of network-LSAs ............................. 134\n\
    \    12.4.3   Summary-LSAs ......................................... 135\n   \
    \ 12.4.3.1 Originating summary-LSAs into stub areas ............. 137\n    12.4.3.2\
    \ Examples of summary-LSAs ............................. 138\n    12.4.4   AS-external-LSAs\
    \ ..................................... 139\n    12.4.4.1 Examples of AS-external-LSAs\
    \ ......................... 140\n    13       The Flooding Procedure ...............................\
    \ 143\n    13.1     Determining which LSA is newer ....................... 146\n\
    \    13.2     Installing LSAs in the database ...................... 147\n   \
    \ 13.3     Next step in the flooding procedure .................. 148\n    13.4\
    \     Receiving self-originated LSAs ....................... 151\n    13.5   \
    \  Sending Link State Acknowledgment packets ............ 152\n    13.6     Retransmitting\
    \ LSAs .................................. 154\n    13.7     Receiving link state\
    \ acknowledgments ................. 155\n    14       Aging The Link State Database\
    \ ........................ 156\n    14.1     Premature aging of LSAs ..............................\
    \ 157\n    15       Virtual Links ........................................ 158\n\
    \    16       Calculation of the routing table ..................... 160\n   \
    \ 16.1     Calculating the shortest-path tree for an area ....... 161\n    16.1.1\
    \   The next hop calculation ............................. 167\n    16.2     Calculating\
    \ the inter-area routes .................... 178\n    16.3     Examining transit\
    \ areas' summary-LSAs ................ 170\n    16.4     Calculating AS external\
    \ routes ....................... 173\n    16.4.1   External path preferences ............................\
    \ 175\n    16.5     Incremental updates -- summary-LSAs .................. 175\n\
    \    16.6     Incremental updates -- AS-external-LSAs .............. 177\n   \
    \ 16.7     Events generated as a result of routing table changes  177\n    16.8\
    \     Equal-cost multipath ................................. 178\n           \
    \  Footnotes ............................................ 179\n             References\
    \ ........................................... 183\n    A        OSPF data formats\
    \ .................................... 185\n    A.1      Encapsulation of OSPF\
    \ packets ........................ 185\n    A.2      The Options field ....................................\
    \ 187\n    A.3      OSPF Packet Formats .................................. 189\n\
    \    A.3.1    The OSPF packet header ............................... 190\n   \
    \ A.3.2    The Hello packet ..................................... 193\n    A.3.3\
    \    The Database Description packet ...................... 195\n    A.3.4   \
    \ The Link State Request packet ........................ 197\n    A.3.5    The\
    \ Link State Update packet ......................... 199\n    A.3.6    The Link\
    \ State Acknowledgment packet ................. 201\n    A.4      LSA formats\
    \ .......................................... 203\n    A.4.1    The LSA header\
    \ ....................................... 204\n    A.4.2    Router-LSAs ..........................................\
    \ 206\n    A.4.3    Network-LSAs ......................................... 210\n\
    \    A.4.4    Summary-LSAs ......................................... 212\n   \
    \ A.4.5    AS-external-LSAs ..................................... 214\n    B \
    \       Architectural Constants .............................. 217\n    C    \
    \    Configurable Constants ............................... 219\n    C.1     \
    \ Global parameters .................................... 219\n    C.2      Area\
    \ parameters ...................................... 220\n    C.3      Router interface\
    \ parameters .......................... 221\n    C.4      Virtual link parameters\
    \ .............................. 224\n    C.5      NBMA network parameters ..............................\
    \ 224\n    C.6      Point-to-MultiPoint network parameters ............... 225\n\
    \    C.7      Host route parameters ................................ 226\n   \
    \ D        Authentication ....................................... 227\n    D.1\
    \      Null authentication .................................. 227\n    D.2   \
    \   Simple password authentication ....................... 228\n    D.3      Cryptographic\
    \ authentication ......................... 228\n    D.4      Message generation\
    \ ................................... 231\n    D.4.1    Generating Null authentication\
    \ ....................... 231\n    D.4.2    Generating Simple password authentication\
    \ ............ 232\n    D.4.3    Generating Cryptographic authentication ..............\
    \ 232\n    D.5      Message verification ................................. 234\n\
    \    D.5.1    Verifying Null authentication ........................ 234\n   \
    \ D.5.2    Verifying Simple password authentication ............. 234\n    D.5.3\
    \    Verifying Cryptographic authentication ............... 235\n    E       \
    \ An algorithm for assigning Link State IDs ............ 236\n    F        Multiple\
    \ interfaces to the same network/subnet ....... 239\n    G        Differences\
    \ from RFC 2178 ............................ 240\n    G.1      Flooding modifications\
    \ ............................... 240\n    G.2      Changes to external path preferences\
    \ ................. 241\n    G.3      Incomplete resolution of virtual next hops\
    \ ........... 241\n    G.4      Routing table lookup .................................\
    \ 241\n             Security Considerations .............................. 243\n\
    \             Author's Address ..................................... 243\n   \
    \          Full Copyright Statement ............................. 244\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n    This document is a specification of the Open Shortest Path\
    \ First\n    (OSPF) TCP/IP internet routing protocol.  OSPF is classified as an\n\
    \    Interior Gateway Protocol (IGP).  This means that it distributes\n    routing\
    \ information between routers belonging to a single Autonomous\n    System.  The\
    \ OSPF protocol is based on link-state or SPF technology.\n    This is a departure\
    \ from the Bellman-Ford base used by traditional\n    TCP/IP internet routing\
    \ protocols.\n    The OSPF protocol was developed by the OSPF working group of\
    \ the\n    Internet Engineering Task Force.  It has been designed expressly for\n\
    \    the TCP/IP internet environment, including explicit support for CIDR\n  \
    \  and the tagging of externally-derived routing information.  OSPF\n    also\
    \ provides for the authentication of routing updates, and\n    utilizes IP multicast\
    \ when sending/receiving the updates.  In\n    addition, much work has been done\
    \ to produce a protocol that\n    responds quickly to topology changes, yet involves\
    \ small amounts of\n    routing protocol traffic.\n    1.1.  Protocol overview\n\
    \        OSPF routes IP packets based solely on the destination IP\n        address\
    \ found in the IP packet header.  IP packets are routed\n        \"as is\" --\
    \ they are not encapsulated in any further protocol\n        headers as they transit\
    \ the Autonomous System.  OSPF is a\n        dynamic routing protocol.  It quickly\
    \ detects topological\n        changes in the AS (such as router interface failures)\
    \ and\n        calculates new loop-free routes after a period of convergence.\n\
    \        This period of convergence is short and involves a minimum of\n     \
    \   routing traffic.\n        In a link-state routing protocol, each router maintains\
    \ a\n        database describing the Autonomous System's topology.  This\n   \
    \     database is referred to as the link-state database. Each\n        participating\
    \ router has an identical database.  Each individual\n        piece of this database\
    \ is a particular router's local state\n        (e.g., the router's usable interfaces\
    \ and reachable neighbors).\n        The router distributes its local state throughout\
    \ the Autonomous\n        System by flooding.\n        All routers run the exact\
    \ same algorithm, in parallel.  From the\n        link-state database, each router\
    \ constructs a tree of shortest\n        paths with itself as root.  This shortest-path\
    \ tree gives the\n        route to each destination in the Autonomous System.\
    \  Externally\n        derived routing information appears on the tree as leaves.\n\
    \        When several equal-cost routes to a destination exist, traffic\n    \
    \    is distributed equally among them.  The cost of a route is\n        described\
    \ by a single dimensionless metric.\n        OSPF allows sets of networks to be\
    \ grouped together.  Such a\n        grouping is called an area.  The topology\
    \ of an area is hidden\n        from the rest of the Autonomous System.  This\
    \ information hiding\n        enables a significant reduction in routing traffic.\
    \  Also,\n        routing within the area is determined only by the area's own\n\
    \        topology, lending the area protection from bad routing data.  An\n  \
    \      area is a generalization of an IP subnetted network.\n        OSPF enables\
    \ the flexible configuration of IP subnets.  Each\n        route distributed by\
    \ OSPF has a destination and mask.  Two\n        different subnets of the same\
    \ IP network number may have\n        different sizes (i.e., different masks).\
    \  This is commonly\n        referred to as variable length subnetting.  A packet\
    \ is routed\n        to the best (i.e., longest or most specific) match.  Host\
    \ routes\n        are considered to be subnets whose masks are \"all ones\"\n\
    \        (0xffffffff).\n        All OSPF protocol exchanges are authenticated.\
    \  This means that\n        only trusted routers can participate in the Autonomous\
    \ System's\n        routing.  A variety of authentication schemes can be used;\
    \ in\n        fact, separate authentication schemes can be configured for each\n\
    \        IP subnet.\n        Externally derived routing data (e.g., routes learned\
    \ from an\n        Exterior Gateway Protocol such as BGP; see [Ref23]) is\n  \
    \      advertised throughout the Autonomous System.  This externally\n       \
    \ derived data is kept separate from the OSPF protocol's link\n        state data.\
    \  Each external route can also be tagged by the\n        advertising router,\
    \ enabling the passing of additional\n        information between routers on the\
    \ boundary of the Autonomous\n        System.\n    1.2.  Definitions of commonly\
    \ used terms\n        This section provides definitions for terms that have a\
    \ specific\n        meaning to the OSPF protocol and that are used throughout\
    \ the\n        text.  The reader unfamiliar with the Internet Protocol Suite is\n\
    \        referred to [Ref13] for an introduction to IP.\n        Router\n    \
    \        A level three Internet Protocol packet switch.  Formerly\n          \
    \  called a gateway in much of the IP literature.\n        Autonomous System\n\
    \            A group of routers exchanging routing information via a\n       \
    \     common routing protocol.  Abbreviated as AS.\n        Interior Gateway Protocol\n\
    \            The routing protocol spoken by the routers belonging to an\n    \
    \        Autonomous system.  Abbreviated as IGP.  Each Autonomous\n          \
    \  System has a single IGP.  Separate Autonomous Systems may be\n            running\
    \ different IGPs.\n        Router ID\n            A 32-bit number assigned to\
    \ each router running the OSPF\n            protocol.  This number uniquely identifies\
    \ the router within\n            an Autonomous System.\n        Network\n    \
    \        In this memo, an IP network/subnet/supernet.  It is possible\n      \
    \      for one physical network to be assigned multiple IP\n            network/subnet\
    \ numbers.  We consider these to be separate\n            networks.  Point-to-point\
    \ physical networks are an exception\n            - they are considered a single\
    \ network no matter how many\n            (if any at all) IP network/subnet numbers\
    \ are assigned to\n            them.\n        Network mask\n            A 32-bit\
    \ number indicating the range of IP addresses\n            residing on a single\
    \ IP network/subnet/supernet.  This\n            specification displays network\
    \ masks as hexadecimal numbers.\n            For example, the network mask for\
    \ a class C IP network is\n            displayed as 0xffffff00.  Such a mask is\
    \ often displayed\n            elsewhere in the literature as 255.255.255.0.\n\
    \        Point-to-point networks\n            A network that joins a single pair\
    \ of routers.  A 56Kb\n            serial line is an example of a point-to-point\
    \ network.\n        Broadcast networks\n            Networks supporting many (more\
    \ than two) attached routers,\n            together with the capability to address\
    \ a single physical\n            message to all of the attached routers (broadcast).\n\
    \            Neighboring routers are discovered dynamically on these nets\n  \
    \          using OSPF's Hello Protocol.  The Hello Protocol itself\n         \
    \   takes advantage of the broadcast capability.  The OSPF\n            protocol\
    \ makes further use of multicast capabilities, if\n            they exist.  Each\
    \ pair of routers on a broadcast network is\n            assumed to be able to\
    \ communicate directly. An ethernet is\n            an example of a broadcast\
    \ network.\n        Non-broadcast networks\n            Networks supporting many\
    \ (more than two) routers, but having\n            no broadcast capability.  Neighboring\
    \ routers are maintained\n            on these nets using OSPF's Hello Protocol.\
    \  However, due to\n            the lack of broadcast capability, some configuration\n\
    \            information may be necessary to aid in the discovery of\n       \
    \     neighbors.  On non-broadcast networks, OSPF protocol packets\n         \
    \   that are normally multicast need to be sent to each\n            neighboring\
    \ router, in turn. An X.25 Public Data Network\n            (PDN) is an example\
    \ of a non-broadcast network.\n            OSPF runs in one of two modes over\
    \ non-broadcast networks.\n            The first mode, called non-broadcast multi-access\
    \ or NBMA,\n            simulates the operation of OSPF on a broadcast network.\
    \ The\n            second mode, called Point-to-MultiPoint, treats the non-\n\
    \            broadcast network as a collection of point-to-point links.\n    \
    \        Non-broadcast networks are referred to as NBMA networks or\n        \
    \    Point-to-MultiPoint networks, depending on OSPF's mode of\n            operation\
    \ over the network.\n        Interface\n            The connection between a router\
    \ and one of its attached\n            networks.  An interface has state information\
    \ associated\n            with it, which is obtained from the underlying lower\
    \ level\n            protocols and the routing protocol itself.  An interface\
    \ to\n            a network has associated with it a single IP address and\n \
    \           mask (unless the network is an unnumbered point-to-point\n       \
    \     network).  An interface is sometimes also referred to as a\n           \
    \ link.\n        Neighboring routers\n            Two routers that have interfaces\
    \ to a common network.\n            Neighbor relationships are maintained by,\
    \ and usually\n            dynamically discovered by, OSPF's Hello Protocol.\n\
    \        Adjacency\n            A relationship formed between selected neighboring\
    \ routers\n            for the purpose of exchanging routing information.  Not\n\
    \            every pair of neighboring routers become adjacent.\n        Link\
    \ state advertisement\n            Unit of data describing the local state of\
    \ a router or\n            network. For a router, this includes the state of the\n\
    \            router's interfaces and adjacencies.  Each link state\n         \
    \   advertisement is flooded throughout the routing domain. The\n            collected\
    \ link state advertisements of all routers and\n            networks forms the\
    \ protocol's link state database.\n            Throughout this memo, link state\
    \ advertisement is\n            abbreviated as LSA.\n        Hello Protocol\n\
    \            The part of the OSPF protocol used to establish and maintain\n  \
    \          neighbor relationships.  On broadcast networks the Hello\n        \
    \    Protocol can also dynamically discover neighboring routers.\n        Flooding\n\
    \            The part of the OSPF protocol that distributes and\n            synchronizes\
    \ the link-state database between OSPF routers.\n        Designated Router\n \
    \           Each broadcast and NBMA network that has at least two\n          \
    \  attached routers has a Designated Router.  The Designated\n            Router\
    \ generates an LSA for the network and has other\n            special responsibilities\
    \ in the running of the protocol.\n            The Designated Router is elected\
    \ by the Hello Protocol.\n            The Designated Router concept enables a\
    \ reduction in the\n            number of adjacencies required on a broadcast\
    \ or NBMA\n            network.  This in turn reduces the amount of routing\n\
    \            protocol traffic and the size of the link-state database.\n     \
    \   Lower-level protocols\n            The underlying network access protocols\
    \ that provide\n            services to the Internet Protocol and in turn the\
    \ OSPF\n            protocol.  Examples of these are the X.25 packet and frame\n\
    \            levels for X.25 PDNs, and the ethernet data link layer for\n    \
    \        ethernets.\n    1.3.  Brief history of link-state routing technology\n\
    \        OSPF is a link state routing protocol.  Such protocols are also\n   \
    \     referred to in the literature as SPF-based or distributed-\n        database\
    \ protocols.  This section gives a brief description of\n        the developments\
    \ in link-state technology that have influenced\n        the OSPF protocol.\n\
    \        The first link-state routing protocol was developed for use in\n    \
    \    the ARPANET packet switching network.  This protocol is\n        described\
    \ in [Ref3].  It has formed the starting point for all\n        other link-state\
    \ protocols.  The homogeneous ARPANET\n        environment, i.e., single-vendor\
    \ packet switches connected by\n        synchronous serial lines, simplified the\
    \ design and\n        implementation of the original protocol.\n        Modifications\
    \ to this protocol were proposed in [Ref4].  These\n        modifications dealt\
    \ with increasing the fault tolerance of the\n        routing protocol through,\
    \ among other things, adding a checksum\n        to the LSAs (thereby detecting\
    \ database corruption).  The paper\n        also included means for reducing the\
    \ routing traffic overhead in\n        a link-state protocol.  This was accomplished\
    \ by introducing\n        mechanisms which enabled the interval between LSA originations\n\
    \        to be increased by an order of magnitude.\n        A link-state algorithm\
    \ has also been proposed for use as an ISO\n        IS-IS routing protocol.  This\
    \ protocol is described in [Ref2].\n        The protocol includes methods for\
    \ data and routing traffic\n        reduction when operating over broadcast networks.\
    \  This is\n        accomplished by election of a Designated Router for each\n\
    \        broadcast network, which then originates an LSA for the network.\n  \
    \      The OSPF Working Group of the IETF has extended this work in\n        developing\
    \ the OSPF protocol.  The Designated Router concept has\n        been greatly\
    \ enhanced to further reduce the amount of routing\n        traffic required.\
    \  Multicast capabilities are utilized for\n        additional routing bandwidth\
    \ reduction.  An area routing scheme\n        has been developed enabling information\n\
    \        hiding/protection/reduction.  Finally, the algorithms have been\n   \
    \     tailored for efficient operation in TCP/IP internets.\n    1.4.  Organization\
    \ of this document\n        The first three sections of this specification give\
    \ a general\n        overview of the protocol's capabilities and functions.  Sections\n\
    \        4-16 explain the protocol's mechanisms in detail.  Packet\n        formats,\
    \ protocol constants and configuration items are\n        specified in the appendices.\n\
    \        Labels such as HelloInterval encountered in the text refer to\n     \
    \   protocol constants.  They may or may not be configurable.\n        Architectural\
    \ constants are summarized in Appendix B.\n        Configurable constants are\
    \ summarized in Appendix C.\n        The detailed specification of the protocol\
    \ is presented in terms\n        of data structures.  This is done in order to\
    \ make the\n        explanation more precise.  Implementations of the protocol\
    \ are\n        required to support the functionality described, but need not\n\
    \        use the precise data structures that appear in this memo.\n    1.5. \
    \ Acknowledgments\n        The author would like to thank Ran Atkinson, Fred Baker,\
    \ Jeffrey\n        Burgan, Rob Coltun, Dino Farinacci, Vince Fuller, Phanindra\n\
    \        Jujjavarapu, Milo Medin, Tom Pusateri, Kannan Varadhan, Zhaohui\n   \
    \     Zhang and the rest of the OSPF Working Group for the ideas and\n       \
    \ support they have given to this project.\n        The OSPF Point-to-MultiPoint\
    \ interface is based on work done by\n        Fred Baker.\n        The OSPF Cryptographic\
    \ Authentication option was developed by\n        Fred Baker and Ran Atkinson.\n"
- title: '2.  The Link-state Database: organization and calculations'
  contents:
  - "2.  The Link-state Database: organization and calculations\n    The following\
    \ subsections describe the organization of OSPF's link-\n    state database, and\
    \ the routing calculations that are performed on\n    the database in order to\
    \ produce a router's routing table.\n    2.1.  Representation of routers and networks\n\
    \        The Autonomous System's link-state database describes a directed\n  \
    \      graph.  The vertices of the graph consist of routers and\n        networks.\
    \  A graph edge connects two routers when they are\n        attached via a physical\
    \ point-to-point network.  An edge\n        connecting a router to a network indicates\
    \ that the router has\n        an interface on the network. Networks can be either\
    \ transit or\n        stub networks. Transit networks are those capable of carrying\n\
    \        data traffic that is neither locally originated nor locally\n       \
    \ destined. A transit network is represented by a graph vertex\n        having\
    \ both incoming and outgoing edges. A stub network's vertex\n        has only\
    \ incoming edges.\n        The neighborhood of each network node in the graph\
    \ depends on\n        the network's type (point-to-point, broadcast, NBMA or Point-\n\
    \        to-MultiPoint) and the number of routers having an interface to\n   \
    \     the network.  Three cases are depicted in Figure 1a.  Rectangles\n     \
    \   indicate routers.  Circles and oblongs indicate networks.\n        Router\
    \ names are prefixed with the letters RT and network names\n        with the letter\
    \ N.  Router interface names are prefixed by the\n        letter I.  Lines between\
    \ routers indicate point-to-point\n        networks.  The left side of the figure\
    \ shows networks with their\n        connected routers, with the resulting graphs\
    \ shown on the right.\n                                                  **FROM**\n\
    \                                           *      |RT1|RT2|\n               \
    \ +---+Ia    +---+           *   ------------\n                |RT1|------|RT2|\
    \           T   RT1|   | X |\n                +---+    Ib+---+           O   RT2|\
    \ X |   |\n                                           *    Ia|   | X |\n     \
    \                                      *    Ib| X |   |\n                    \
    \ Physical point-to-point networks\n                                         \
    \         **FROM**\n                      +---+                *\n           \
    \           |RT7|                *      |RT7| N3|\n                      +---+\
    \                T   ------------\n                        |                 \
    \ O   RT7|   |   |\n            +----------------------+       *    N3| X |  \
    \ |\n                       N3                  *\n                          \
    \    Stub networks\n                                                  **FROM**\n\
    \                +---+      +---+\n                |RT3|      |RT4|          \
    \    |RT3|RT4|RT5|RT6|N2 |\n                +---+      +---+        *  ------------------------\n\
    \                  |    N2    |          *  RT3|   |   |   |   | X |\n       \
    \     +----------------------+    T  RT4|   |   |   |   | X |\n              \
    \    |          |          O  RT5|   |   |   |   | X |\n                +---+\
    \      +---+        *  RT6|   |   |   |   | X |\n                |RT5|      |RT6|\
    \        *   N2| X | X | X | X |   |\n                +---+      +---+\n     \
    \                     Broadcast or NBMA networks\n                    Figure 1a:\
    \ Network map components\n             Networks and routers are represented by\
    \ vertices.\n             An edge connects Vertex A to Vertex B iff the\n    \
    \         intersection of Column A and Row B is marked with\n                \
    \                  an X.\n        The top of Figure 1a shows two routers connected\
    \ by a point-to-\n        point link. In the resulting link-state database graph,\
    \ the two\n        router vertices are directly connected by a pair of edges,\
    \ one\n        in each direction. Interfaces to point-to-point networks need\n\
    \        not be assigned IP addresses.  When interface addresses are\n       \
    \ assigned, they are modelled as stub links, with each router\n        advertising\
    \ a stub connection to the other router's interface\n        address. Optionally,\
    \ an IP subnet can be assigned to the point-\n        to-point network. In this\
    \ case, both routers advertise a stub\n        link to the IP subnet, instead\
    \ of advertising each others' IP\n        interface addresses.\n        The middle\
    \ of Figure 1a shows a network with only one attached\n        router (i.e., a\
    \ stub network). In this case, the network appears\n        on the end of a stub\
    \ connection in the link-state database's\n        graph.\n        When multiple\
    \ routers are attached to a broadcast network, the\n        link-state database\
    \ graph shows all routers bidirectionally\n        connected to the network vertex.\
    \ This is pictured at the bottom\n        of Figure 1a.\n        Each network\
    \ (stub or transit) in the graph has an IP address\n        and associated network\
    \ mask.  The mask indicates the number of\n        nodes on the network.  Hosts\
    \ attached directly to routers\n        (referred to as host routes) appear on\
    \ the graph as stub\n        networks.  The network mask for a host route is always\n\
    \        0xffffffff, which indicates the presence of a single node.\n        2.1.1.\
    \  Representation of non-broadcast networks\n            As mentioned previously,\
    \ OSPF can run over non-broadcast\n            networks in one of two modes: NBMA\
    \ or Point-to-MultiPoint.\n            The choice of mode determines the way that\
    \ the Hello\n            protocol and flooding work over the non-broadcast network,\n\
    \            and the way that the network is represented in the link-\n      \
    \      state database.\n            In NBMA mode, OSPF emulates operation over\
    \ a broadcast\n            network: a Designated Router is elected for the NBMA\n\
    \            network, and the Designated Router originates an LSA for the\n  \
    \          network. The graph representation for broadcast networks and\n    \
    \        NBMA networks is identical. This representation is pictured\n       \
    \     in the middle of Figure 1a.\n            NBMA mode is the most efficient\
    \ way to run OSPF over non-\n            broadcast networks, both in terms of\
    \ link-state database\n            size and in terms of the amount of routing\
    \ protocol traffic.\n            However, it has one significant restriction:\
    \ it requires all\n            routers attached to the NBMA network to be able\
    \ to\n            communicate directly. This restriction may be met on some\n\
    \            non-broadcast networks, such as an ATM subnet utilizing\n       \
    \     SVCs. But it is often not met on other non-broadcast\n            networks,\
    \ such as PVC-only Frame Relay networks. On non-\n            broadcast networks\
    \ where not all routers can communicate\n            directly you can break the\
    \ non-broadcast network into\n            logical subnets, with the routers on\
    \ each subnet being able\n            to communicate directly, and then run each\
    \ separate subnet\n            as an NBMA network (see [Ref15]). This however\
    \ requires\n            quite a bit of administrative overhead, and is prone to\n\
    \            misconfiguration. It is probably better to run such a non-\n    \
    \        broadcast network in Point-to-Multipoint mode.\n            In Point-to-MultiPoint\
    \ mode, OSPF treats all router-to-\n            router connections over the non-broadcast\
    \ network as if they\n            were point-to-point links. No Designated Router\
    \ is elected\n            for the network, nor is there an LSA generated for the\n\
    \            network. In fact, a vertex for the Point-to-MultiPoint\n        \
    \    network does not appear in the graph of the link-state\n            database.\n\
    \            Figure 1b illustrates the link-state database representation\n  \
    \          of a Point-to-MultiPoint network. On the left side of the\n       \
    \     figure, a Point-to-MultiPoint network is pictured. It is\n            assumed\
    \ that all routers can communicate directly, except\n            for routers RT4\
    \ and RT5. I3 though I6 indicate the routers'\n            IP interface addresses\
    \ on the Point-to-MultiPoint network.\n            In the graphical representation\
    \ of the link-state database,\n            routers that can communicate directly\
    \ over the Point-to-\n            MultiPoint network are joined by bidirectional\
    \ edges, and\n            each router also has a stub connection to its own IP\n\
    \            interface address (which is in contrast to the\n            representation\
    \ of real point-to-point links; see Figure 1a).\n            On some non-broadcast\
    \ networks, use of Point-to-MultiPoint\n            mode and data-link protocols\
    \ such as Inverse ARP (see\n            [Ref14]) will allow autodiscovery of OSPF\
    \ neighbors even\n            though broadcast support is not available.\n   \
    \                                               **FROM**\n                +---+\
    \      +---+\n                |RT3|      |RT4|              |RT3|RT4|RT5|RT6|\n\
    \                +---+      +---+        *  --------------------\n           \
    \     I3|    N2    |I4        *  RT3|   | X | X | X |\n            +----------------------+\
    \    T  RT4| X |   |   | X |\n                I5|          |I6        O  RT5|\
    \ X |   |   | X |\n                +---+      +---+        *  RT6| X | X | X |\
    \   |\n                |RT5|      |RT6|        *   I3| X |   |   |   |\n     \
    \           +---+      +---+            I4|   | X |   |   |\n                \
    \                            I5|   |   | X |   |\n                           \
    \                 I6|   |   |   | X |\n                    Figure 1b: Network\
    \ map components\n                       Point-to-MultiPoint networks\n      \
    \       All routers can communicate directly over N2, except\n               \
    \ routers RT4 and RT5. I3 through I6 indicate IP\n                           interface\
    \ addresses\n        2.1.2.  An example link-state database\n            Figure\
    \ 2 shows a sample map of an Autonomous System.  The\n            rectangle labelled\
    \ H1 indicates a host, which has a SLIP\n            connection to Router RT12.\
    \  Router RT12 is therefore\n            advertising a host route.  Lines between\
    \ routers indicate\n            physical point-to-point networks.  The only point-to-point\n\
    \            network that has been assigned interface addresses is the\n     \
    \       one joining Routers RT6 and RT10.  Routers RT5 and RT7 have\n        \
    \    BGP connections to other Autonomous Systems.  A set of BGP-\n           \
    \ learned routes have been displayed for both of these\n            routers.\n\
    \            A cost is associated with the output side of each router\n      \
    \      interface.  This cost is configurable by the system\n            administrator.\
    \  The lower the cost, the more likely the\n            interface is to be used\
    \ to forward data traffic.  Costs are\n            also associated with the externally\
    \ derived routing data\n            (e.g., the BGP-learned routes).\n        \
    \    The directed graph resulting from the map in Figure 2 is\n            depicted\
    \ in Figure 3.  Arcs are labelled with the cost of\n            the corresponding\
    \ router output interface.  Arcs having no\n            labelled cost have a cost\
    \ of 0.  Note that arcs leading from\n            networks to routers always have\
    \ cost 0; they are significant\n            nonetheless.  Note also that the externally\
    \ derived routing\n            data appears on the graph as stubs.\n         \
    \   The link-state database is pieced together from LSAs\n            generated\
    \ by the routers.  In the associated graphical\n            representation, the\
    \ neighborhood of each router or transit\n            network is represented in\
    \ a single, separate LSA.  Figure 4\n            shows these LSAs graphically.\
    \ Router RT12 has an interface\n            to two broadcast networks and a SLIP\
    \ line to a host.\n            Network N6 is a broadcast network with three attached\n\
    \            routers.  The cost of all links from Network N6 to its\n        \
    \    attached routers is 0.  Note that the LSA for Network N6 is\n           \
    \ actually generated by one of the network's attached routers:\n            the\
    \ router that has been elected Designated Router for the\n            network.\n\
    \                 +\n                 | 3+---+                     N12      N14\n\
    \               N1|--|RT1|\\ 1                    \\ N13 /\n                 |\
    \  +---+ \\                     8\\ |8/8\n                 +         \\ ____ \
    \                \\|/\n                            /    \\   1+---+8    8+---+6\n\
    \                           *  N3  *---|RT4|------|RT5|--------+\n           \
    \                 \\____/    +---+      +---+        |\n                  +  \
    \       /   |                  |7         |\n                  | 3+---+ /    |\
    \                  |          |\n                N2|--|RT2|/1    |1          \
    \       |6         |\n                  |  +---+    +---+8            6+---+ \
    \       |\n                  +           |RT3|--------------|RT6|        |\n \
    \                             +---+              +---+        |\n            \
    \                    |2               Ia|7         |\n                       \
    \         |                  |          |\n                           +---------+\
    \             |          |\n                               N4                \
    \  |          |\n                                                   |        \
    \  |\n                                                   |          |\n      \
    \                 N11                         |          |\n                 \
    \  +---------+                     |          |\n                        |   \
    \                       |          |    N12\n                        |3      \
    \                   |          |6 2/\n                      +---+            \
    \            |        +---+/\n                      |RT9|                    \
    \    |        |RT7|---N15\n                      +---+                       \
    \ |        +---+ 9\n                        |1                   +     |     \
    \     |1\n                       _|__                  |   Ib|5       __|_\n \
    \                     /    \\      1+----+2   |  3+----+1   /    \\\n        \
    \             *  N9  *------|RT11|----|---|RT10|---*  N6  *\n                \
    \      \\____/       +----+    |   +----+    \\____/\n                       \
    \ |                    |                |\n                        |1        \
    \           +                |1\n             +--+   10+----+                N8\
    \              +---+\n             |H1|-----|RT12|                           \
    \     |RT8|\n             +--+SLIP +----+                                +---+\n\
    \                        |2                                    |4\n          \
    \              |                                     |\n                   +---------+\
    \                            +--------+\n                       N10          \
    \                          N7\n                    Figure 2: A sample Autonomous\
    \ System\n                                **FROM**\n                 |RT|RT|RT|RT|RT|RT|RT|RT|RT|RT|RT|RT|\n\
    \                 |1 |2 |3 |4 |5 |6 |7 |8 |9 |10|11|12|N3|N6|N8|N9|\n        \
    \      ----- ---------------------------------------------\n              RT1|\
    \  |  |  |  |  |  |  |  |  |  |  |  |0 |  |  |  |\n              RT2|  |  |  |\
    \  |  |  |  |  |  |  |  |  |0 |  |  |  |\n              RT3|  |  |  |  |  |6 |\
    \  |  |  |  |  |  |0 |  |  |  |\n              RT4|  |  |  |  |8 |  |  |  |  |\
    \  |  |  |0 |  |  |  |\n              RT5|  |  |  |8 |  |6 |6 |  |  |  |  |  |\
    \  |  |  |  |\n              RT6|  |  |8 |  |7 |  |  |  |  |5 |  |  |  |  |  |\
    \  |\n              RT7|  |  |  |  |6 |  |  |  |  |  |  |  |  |0 |  |  |\n   \
    \       *   RT8|  |  |  |  |  |  |  |  |  |  |  |  |  |0 |  |  |\n          *\
    \   RT9|  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |0 |\n          T  RT10| \
    \ |  |  |  |  |7 |  |  |  |  |  |  |  |0 |0 |  |\n          O  RT11|  |  |  |\
    \  |  |  |  |  |  |  |  |  |  |  |0 |0 |\n          *  RT12|  |  |  |  |  |  |\
    \  |  |  |  |  |  |  |  |  |0 |\n          *    N1|3 |  |  |  |  |  |  |  |  |\
    \  |  |  |  |  |  |  |\n               N2|  |3 |  |  |  |  |  |  |  |  |  |  |\
    \  |  |  |  |\n               N3|1 |1 |1 |1 |  |  |  |  |  |  |  |  |  |  |  |\
    \  |\n               N4|  |  |2 |  |  |  |  |  |  |  |  |  |  |  |  |  |\n   \
    \            N6|  |  |  |  |  |  |1 |1 |  |1 |  |  |  |  |  |  |\n           \
    \    N7|  |  |  |  |  |  |  |4 |  |  |  |  |  |  |  |  |\n               N8| \
    \ |  |  |  |  |  |  |  |  |3 |2 |  |  |  |  |  |\n               N9|  |  |  |\
    \  |  |  |  |  |1 |  |1 |1 |  |  |  |  |\n              N10|  |  |  |  |  |  |\
    \  |  |  |  |  |2 |  |  |  |  |\n              N11|  |  |  |  |  |  |  |  |3 |\
    \  |  |  |  |  |  |  |\n              N12|  |  |  |  |8 |  |2 |  |  |  |  |  |\
    \  |  |  |  |\n              N13|  |  |  |  |8 |  |  |  |  |  |  |  |  |  |  |\
    \  |\n              N14|  |  |  |  |8 |  |  |  |  |  |  |  |  |  |  |  |\n   \
    \           N15|  |  |  |  |  |  |9 |  |  |  |  |  |  |  |  |  |\n           \
    \    H1|  |  |  |  |  |  |  |  |  |  |  |10|  |  |  |  |\n                   \
    \  Figure 3: The resulting directed graph\n                 Networks and routers\
    \ are represented by vertices.\n                 An edge of cost X connects Vertex\
    \ A to Vertex B iff\n                 the intersection of Column A and Row B is\
    \ marked\n                                     with an X.\n                  \
    \   **FROM**                       **FROM**\n                  |RT12|N9|N10|H1|\
    \                 |RT9|RT11|RT12|N9|\n           *  --------------------     \
    \     *  ----------------------\n           *  RT12|    |  |   |  |          *\
    \   RT9|   |    |    |0 |\n           T    N9|1   |  |   |  |          T  RT11|\
    \   |    |    |0 |\n           O   N10|2   |  |   |  |          O  RT12|   | \
    \   |    |0 |\n           *    H1|10  |  |   |  |          *    N9|   |    | \
    \   |  |\n           *                                *\n                RT12's\
    \ router-LSA              N9's network-LSA\n                  Figure 4: Individual\
    \ link state components\n              Networks and routers are represented by\
    \ vertices.\n              An edge of cost X connects Vertex A to Vertex B iff\n\
    \              the intersection of Column A and Row B is marked\n            \
    \                      with an X.\n    2.2.  The shortest-path tree\n        When\
    \ no OSPF areas are configured, each router in the Autonomous\n        System\
    \ has an identical link-state database, leading to an\n        identical graphical\
    \ representation.  A router generates its\n        routing table from this graph\
    \ by calculating a tree of shortest\n        paths with the router itself as root.\
    \  Obviously, the shortest-\n        path tree depends on the router doing the\
    \ calculation.  The\n        shortest-path tree for Router RT6 in our example\
    \ is depicted in\n        Figure 5.\n        The tree gives the entire path to\
    \ any destination network or\n        host.  However, only the next hop to the\
    \ destination is used in\n        the forwarding process.  Note also that the\
    \ best route to any\n        router has also been calculated.  For the processing\
    \ of external\n        data, we note the next hop and distance to any router\n\
    \        advertising external routes.  The resulting routing table for\n     \
    \   Router RT6 is pictured in Table 2.  Note that there is a\n        separate\
    \ route for each end of a numbered point-to-point network\n        (in this case,\
    \ the serial line between Routers RT6 and RT10).\n        Routes to networks belonging\
    \ to other AS'es (such as N12) appear\n        as dashed lines on the shortest\
    \ path tree in Figure 5.  Use of\n                                RT6(origin)\n\
    \                    RT5 o------------o-----------o Ib\n                     \
    \  /|\\    6      |\\     7\n                     8/8|8\\          | \\\n    \
    \                 /  |  \\        6|  \\\n                    o   |   o      \
    \  |   \\7\n                   N12  o  N14       |    \\\n                   \
    \    N13        2  |     \\\n                            N4 o-----o RT3  \\\n\
    \                                    /        \\    5\n                      \
    \            1/     RT10 o-------o Ia\n                                  /   \
    \        |\\\n                       RT4 o-----o N3        3| \\1\n          \
    \                      /|            |  \\ N6     RT7\n                      \
    \         / |         N8 o   o---------o\n                              /  | \
    \           |   |        /|\n                         RT2 o   o RT1        | \
    \  |      2/ |9\n                            /    |            |   |RT8   /  |\n\
    \                           /3    |3      RT11 o   o     o   o\n             \
    \             /      |            |   |    N12 N15\n                      N2 o\
    \       o N1        1|   |4\n                                              | \
    \  |\n                                           N9 o   o N7\n               \
    \                              /|\n                                          \
    \  / |\n                        N11      RT9       /  |RT12\n                \
    \         o--------o-------o   o--------o H1\n                             3 \
    \               |   10\n                                              |2\n   \
    \                                           |\n                              \
    \                o N10\n                     Figure 5: The SPF tree for Router\
    \ RT6\n              Edges that are not marked with a cost have a cost of\n  \
    \            of zero (these are network-to-router links). Routes\n           \
    \   to networks N12-N15 are external information that is\n                   \
    \      considered in Section 2.3\n                   Destination   Next  Hop \
    \  Distance\n                   __________________________________\n         \
    \          N1            RT3         10\n                   N2            RT3\
    \         10\n                   N3            RT3         7\n               \
    \    N4            RT3         8\n                   Ib            *         \
    \  7\n                   Ia            RT10        12\n                   N6 \
    \           RT10        8\n                   N7            RT10        12\n \
    \                  N8            RT10        10\n                   N9       \
    \     RT10        11\n                   N10           RT10        13\n      \
    \             N11           RT10        14\n                   H1            RT10\
    \        21\n                   __________________________________\n         \
    \          RT5           RT5         6\n                   RT7           RT10\
    \        8\n    Table 2: The portion of Router RT6's routing table listing local\n\
    \                             destinations.\n        this externally derived routing\
    \ information is considered in the\n        next section.\n    2.3.  Use of external\
    \ routing information\n        After the tree is created the external routing\
    \ information is\n        examined.  This external routing information may originate\
    \ from\n        another routing protocol such as BGP, or be statically\n     \
    \   configured (static routes).  Default routes can also be included\n       \
    \ as part of the Autonomous System's external routing information.\n        External\
    \ routing information is flooded unaltered throughout the\n        AS.  In our\
    \ example, all the routers in the Autonomous System\n        know that Router\
    \ RT7 has two external routes, with metrics 2 and\n        9.\n        OSPF supports\
    \ two types of external metrics.  Type 1 external\n        metrics are expressed\
    \ in the same units as OSPF interface cost\n        (i.e., in terms of the link\
    \ state metric).  Type 2 external\n        metrics are an order of magnitude larger;\
    \ any Type 2 metric is\n        considered greater than the cost of any path internal\
    \ to the AS.\n        Use of Type 2 external metrics assumes that routing between\n\
    \        AS'es is the major cost of routing a packet, and eliminates the\n   \
    \     need for conversion of external costs to internal link state\n        metrics.\n\
    \        As an example of Type 1 external metric processing, suppose that\n  \
    \      the Routers RT7 and RT5 in Figure 2 are advertising Type 1\n        external\
    \ metrics.  For each advertised external route, the total\n        cost from Router\
    \ RT6 is calculated as the sum of the external\n        route's advertised cost\
    \ and the distance from Router RT6 to the\n        advertising router.  When two\
    \ routers are advertising the same\n        external destination, RT6 picks the\
    \ advertising router providing\n        the minimum total cost. RT6 then sets\
    \ the next hop to the\n        external destination equal to the next hop that\
    \ would be used\n        when routing packets to the chosen advertising router.\n\
    \        In Figure 2, both Router RT5 and RT7 are advertising an external\n  \
    \      route to destination Network N12.  Router RT7 is preferred since\n    \
    \    it is advertising N12 at a distance of 10 (8+2) to Router RT6,\n        which\
    \ is better than Router RT5's 14 (6+8).  Table 3 shows the\n        entries that\
    \ are added to the routing table when external routes\n        are examined:\n\
    \                         Destination   Next  Hop   Distance\n               \
    \          __________________________________\n                         N12  \
    \         RT10        10\n                         N13           RT5         14\n\
    \                         N14           RT5         14\n                     \
    \    N15           RT10        17\n                 Table 3: The portion of Router\
    \ RT6's routing table\n                           listing external destinations.\n\
    \        Processing of Type 2 external metrics is simpler.  The AS\n        boundary\
    \ router advertising the smallest external metric is\n        chosen, regardless\
    \ of the internal distance to the AS boundary\n        router.  Suppose in our\
    \ example both Router RT5 and Router RT7\n        were advertising Type 2 external\
    \ routes.  Then all traffic\n        destined for Network N12 would be forwarded\
    \ to Router RT7, since\n        2 < 8.  When several equal-cost Type 2 routes\
    \ exist, the\n        internal distance to the advertising routers is used to\
    \ break\n        the tie.\n        Both Type 1 and Type 2 external metrics can\
    \ be present in the AS\n        at the same time.  In that event, Type 1 external\
    \ metrics always\n        take precedence.\n        This section has assumed that\
    \ packets destined for external\n        destinations are always routed through\
    \ the advertising AS\n        boundary router.  This is not always desirable.\
    \  For example,\n        suppose in Figure 2 there is an additional router attached\
    \ to\n        Network N6, called Router RTX.  Suppose further that RTX does\n\
    \        not participate in OSPF routing, but does exchange BGP\n        information\
    \ with the AS boundary router RT7.  Then, Router RT7\n        would end up advertising\
    \ OSPF external routes for all\n        destinations that should be routed to\
    \ RTX.  An extra hop will\n        sometimes be introduced if packets for these\
    \ destinations need\n        always be routed first to Router RT7 (the advertising\
    \ router).\n        To deal with this situation, the OSPF protocol allows an AS\n\
    \        boundary router to specify a \"forwarding address\" in its AS-\n    \
    \    external-LSAs.  In the above example, Router RT7 would specify\n        RTX's\
    \ IP address as the \"forwarding address\" for all those\n        destinations\
    \ whose packets should be routed directly to RTX.\n        The \"forwarding address\"\
    \ has one other application.  It enables\n        routers in the Autonomous System's\
    \ interior to function as\n        \"route servers\".  For example, in Figure\
    \ 2 the router RT6 could\n        become a route server, gaining external routing\
    \ information\n        through a combination of static configuration and external\n\
    \        routing protocols.  RT6 would then start advertising itself as\n    \
    \    an AS boundary router, and would originate a collection of OSPF\n       \
    \ AS-external-LSAs.  In each AS-external-LSA, Router RT6 would\n        specify\
    \ the correct Autonomous System exit point to use for the\n        destination\
    \ through appropriate setting of the LSA's \"forwarding\n        address\" field.\n\
    \    2.4.  Equal-cost multipath\n        The above discussion has been simplified\
    \ by considering only a\n        single route to any destination.  In reality,\
    \ if multiple\n        equal-cost routes to a destination exist, they are all\n\
    \        discovered and used.  This requires no conceptual changes to the\n  \
    \      algorithm, and its discussion is postponed until we consider the\n    \
    \    tree-building process in more detail.\n        With equal cost multipath,\
    \ a router potentially has several\n        available next hops towards any given\
    \ destination.\n"
- title: 3.  Splitting the AS into Areas
  contents:
  - "3.  Splitting the AS into Areas\n    OSPF allows collections of contiguous networks\
    \ and hosts to be\n    grouped together.  Such a group, together with the routers\
    \ having\n    interfaces to any one of the included networks, is called an area.\n\
    \    Each area runs a separate copy of the basic link-state routing\n    algorithm.\
    \  This means that each area has its own link-state\n    database and corresponding\
    \ graph, as explained in the previous\n    section.\n    The topology of an area\
    \ is invisible from the outside of the area.\n    Conversely, routers internal\
    \ to a given area know nothing of the\n    detailed topology external to the area.\
    \  This isolation of knowledge\n    enables the protocol to effect a marked reduction\
    \ in routing traffic\n    as compared to treating the entire Autonomous System\
    \ as a single\n    link-state domain.\n    With the introduction of areas, it\
    \ is no longer true that all\n    routers in the AS have an identical link-state\
    \ database.  A router\n    actually has a separate link-state database for each\
    \ area it is\n    connected to.  (Routers connected to multiple areas are called\
    \ area\n    border routers).  Two routers belonging to the same area have, for\n\
    \    that area, identical area link-state databases.\n    Routing in the Autonomous\
    \ System takes place on two levels,\n    depending on whether the source and destination\
    \ of a packet reside\n    in the same area (intra-area routing is used) or different\
    \ areas\n    (inter-area routing is used).  In intra-area routing, the packet\
    \ is\n    routed solely on information obtained within the area; no routing\n\
    \    information obtained from outside the area can be used.  This\n    protects\
    \ intra-area routing from the injection of bad routing\n    information.  We discuss\
    \ inter-area routing in Section 3.2.\n    3.1.  The backbone of the Autonomous\
    \ System\n        The OSPF backbone is the special OSPF Area 0 (often written\
    \ as\n        Area 0.0.0.0, since OSPF Area ID's are typically formatted as IP\n\
    \        addresses). The OSPF backbone always contains all area border\n     \
    \   routers. The backbone is responsible for distributing routing\n        information\
    \ between non-backbone areas. The backbone must be\n        contiguous. However,\
    \ it need not be physically contiguous;\n        backbone connectivity can be\
    \ established/maintained through the\n        configuration of virtual links.\n\
    \        Virtual links can be configured between any two backbone routers\n  \
    \      that have an interface to a common non-backbone area.  Virtual\n      \
    \  links belong to the backbone.  The protocol treats two routers\n        joined\
    \ by a virtual link as if they were connected by an\n        unnumbered point-to-point\
    \ backbone network.  On the graph of the\n        backbone, two such routers are\
    \ joined by arcs whose costs are\n        the intra-area distances between the\
    \ two routers.  The routing\n        protocol traffic that flows along the virtual\
    \ link uses intra-\n        area routing only.\n    3.2.  Inter-area routing\n\
    \        When routing a packet between two non-backbone areas the\n        backbone\
    \ is used.  The path that the packet will travel can be\n        broken up into\
    \ three contiguous pieces: an intra-area path from\n        the source to an area\
    \ border router, a backbone path between the\n        source and destination areas,\
    \ and then another intra-area path\n        to the destination.  The algorithm\
    \ finds the set of such paths\n        that have the smallest cost.\n        Looking\
    \ at this another way, inter-area routing can be pictured\n        as forcing\
    \ a star configuration on the Autonomous System, with\n        the backbone as\
    \ hub and each of the non-backbone areas as\n        spokes.\n        The topology\
    \ of the backbone dictates the backbone paths used\n        between areas.  The\
    \ topology of the backbone can be enhanced by\n        adding virtual links. \
    \ This gives the system administrator some\n        control over the routes taken\
    \ by inter-area traffic.\n        The correct area border router to use as the\
    \ packet exits the\n        source area is chosen in exactly the same way routers\n\
    \        advertising external routes are chosen.  Each area border router\n  \
    \      in an area summarizes for the area its cost to all networks\n        external\
    \ to the area.  After the SPF tree is calculated for the\n        area, routes\
    \ to all inter-area destinations are calculated by\n        examining the summaries\
    \ of the area border routers.\n    3.3.  Classification of routers\n        Before\
    \ the introduction of areas, the only OSPF routers having a\n        specialized\
    \ function were those advertising external routing\n        information, such\
    \ as Router RT5 in Figure 2.  When the AS is\n        split into OSPF areas, the\
    \ routers are further divided according\n        to function into the following\
    \ four overlapping categories:\n        Internal routers\n            A router\
    \ with all directly connected networks belonging to\n            the same area.\
    \ These routers run a single copy of the basic\n            routing algorithm.\n\
    \        Area border routers\n            A router that attaches to multiple areas.\
    \  Area border\n            routers run multiple copies of the basic algorithm,\
    \ one copy\n            for each attached area. Area border routers condense the\n\
    \            topological information of their attached areas for\n           \
    \ distribution to the backbone.  The backbone in turn\n            distributes\
    \ the information to the other areas.\n        Backbone routers\n            A\
    \ router that has an interface to the backbone area.  This\n            includes\
    \ all routers that interface to more than one area\n            (i.e., area border\
    \ routers).  However, backbone routers do\n            not have to be area border\
    \ routers.  Routers with all\n            interfaces connecting to the backbone\
    \ area are supported.\n        AS boundary routers\n            A router that\
    \ exchanges routing information with routers\n            belonging to other Autonomous\
    \ Systems.  Such a router\n            advertises AS external routing information\
    \ throughout the\n            Autonomous System.  The paths to each AS boundary\
    \ router are\n            known by every router in the AS.  This classification\
    \ is\n            completely independent of the previous classifications: AS\n\
    \            boundary routers may be internal or area border routers, and\n  \
    \          may or may not participate in the backbone.\n    3.4.  A sample area\
    \ configuration\n        Figure 6 shows a sample area configuration.  The first\
    \ area\n        consists of networks N1-N4, along with their attached routers\n\
    \        RT1-RT4.  The second area consists of networks N6-N8, along with\n  \
    \      their attached routers RT7, RT8, RT10 and RT11.  The third area\n     \
    \   consists of networks N9-N11 and Host H1, along with their\n        attached\
    \ routers RT9, RT11 and RT12.  The third area has been\n        configured so\
    \ that networks N9-N11 and Host H1 will all be\n        grouped into a single\
    \ route, when advertised external to the\n        area (see Section 3.5 for more\
    \ details).\n        In Figure 6, Routers RT1, RT2, RT5, RT6, RT8, RT9 and RT12\
    \ are\n        internal routers.  Routers RT3, RT4, RT7, RT10 and RT11 are area\n\
    \        border routers.  Finally, as before, Routers RT5 and RT7 are AS\n   \
    \     boundary routers.\n        Figure 7 shows the resulting link-state database\
    \ for the Area 1.\n        The figure completely describes that area's intra-area\
    \ routing.\n        It also shows the complete view of the internet for the two\n\
    \        internal routers RT1 and RT2.  It is the job of the area border\n   \
    \     routers, RT3 and RT4, to advertise into Area 1 the distances to\n      \
    \  all destinations external to the area.  These are indicated in\n        Figure\
    \ 7 by the dashed stub routes.  Also, RT3 and RT4 must\n        advertise into\
    \ Area 1 the location of the AS boundary routers\n        RT5 and RT7.  Finally,\
    \ AS-external-LSAs from RT5 and RT7 are\n        flooded throughout the entire\
    \ AS, and in particular throughout\n        Area 1.  These LSAs are included in\
    \ Area 1's database, and yield\n        routes to Networks N12-N15.\n        Routers\
    \ RT3 and RT4 must also summarize Area 1's topology for\n             ...........................\n\
    \             .   +                     .\n             .   | 3+---+         \
    \     .      N12      N14\n             . N1|--|RT1|\\ 1           .        \\\
    \ N13 /\n             .   |  +---+ \\            .        8\\ |8/8\n         \
    \    .   +         \\ ____      .          \\|/\n             .              /\
    \    \\   1+---+8    8+---+6\n             .             *  N3  *---|RT4|------|RT5|--------+\n\
    \             .              \\____/    +---+      +---+        |\n          \
    \   .    +         /      \\   .           |7         |\n             .    | 3+---+\
    \ /        \\  .           |          |\n             .  N2|--|RT2|/1        1\\\
    \ .           |6         |\n             .    |  +---+            +---+8    6+---+\
    \        |\n             .    +                   |RT3|------|RT6|        |\n\
    \             .                        +---+      +---+        |\n           \
    \  .                      2/ .         Ia|7         |\n             .        \
    \              /  .           |          |\n             .             +---------+\
    \ .           |          |\n             .Area 1           N4      .         \
    \  |          |\n             ...........................           |        \
    \  |\n          ..........................               |          |\n      \
    \    .            N11         .               |          |\n          .      \
    \  +---------+     .               |          |\n          .             |   \
    \       .               |          |    N12\n          .             |3      \
    \   .             Ib|5         |6 2/\n          .           +---+        .   \
    \          +----+     +---+/\n          .           |RT9|        .    .........|RT10|.....|RT7|---N15.\n\
    \          .           +---+        .    .        +----+     +---+ 9    .\n  \
    \        .             |1         .    .    +  /3    1\\      |1       .\n   \
    \       .            _|__        .    .    | /        \\   __|_       .\n    \
    \      .           /    \\      1+----+2   |/          \\ /    \\      .\n   \
    \       .          *  N9  *------|RT11|----|            *  N6  *     .\n     \
    \     .           \\____/       +----+    |             \\____/      .\n     \
    \     .             |          .    .    |                |        .\n       \
    \   .             |1         .    .    +                |1       .\n         \
    \ .  +--+   10+----+       .    .   N8              +---+      .\n          .\
    \  |H1|-----|RT12|       .    .                   |RT8|      .\n          .  +--+SLIP\
    \ +----+       .    .                   +---+      .\n          .            \
    \ |2         .    .                     |4       .\n          .             |\
    \          .    .                     |        .\n          .        +---------+\
    \     .    .                 +--------+   .\n          .            N10      \
    \   .    .                     N7       .\n          .                       \
    \ .    .Area 2                        .\n          .Area 3                  .\
    \    ................................\n          ..........................\n\
    \                    Figure 6: A sample OSPF area configuration\n        distribution\
    \ to the backbone.  Their backbone LSAs are shown in\n        Table 4.  These\
    \ summaries show which networks are contained in\n        Area 1 (i.e., Networks\
    \ N1-N4), and the distance to these\n        networks from the routers RT3 and\
    \ RT4 respectively.\n        The link-state database for the backbone is shown\
    \ in Figure 8.\n        The set of routers pictured are the backbone routers.\
    \  Router\n        RT11 is a backbone router because it belongs to two areas.\
    \  In\n        order to make the backbone connected, a virtual link has been\n\
    \        configured between Routers R10 and R11.\n        The area border routers\
    \ RT3, RT4, RT7, RT10 and RT11 condense\n        the routing information of their\
    \ attached non-backbone areas for\n        distribution via the backbone; these\
    \ are the dashed stubs that\n        appear in Figure 8.  Remember that the third\
    \ area has been\n        configured to condense Networks N9-N11 and Host H1 into\
    \ a single\n        route.  This yields a single dashed line for networks N9-N11\
    \ and\n        Host H1 in Figure 8.  Routers RT5 and RT7 are AS boundary\n   \
    \     routers; their externally derived information also appears on\n        the\
    \ graph in Figure 8 as stubs.\n                     Network   RT3 adv.   RT4 adv.\n\
    \                     _____________________________\n                     N1 \
    \       4          4\n                     N2        4          4\n          \
    \           N3        1          1\n                     N4        2         \
    \ 3\n              Table 4: Networks advertised to the backbone\n            \
    \            by Routers RT3 and RT4.\n                               **FROM**\n\
    \                          |RT|RT|RT|RT|RT|RT|\n                          |1 |2\
    \ |3 |4 |5 |7 |N3|\n                       ----- -------------------\n       \
    \                RT1|  |  |  |  |  |  |0 |\n                       RT2|  |  |\
    \  |  |  |  |0 |\n                       RT3|  |  |  |  |  |  |0 |\n         \
    \          *   RT4|  |  |  |  |  |  |0 |\n                   *   RT5|  |  |14|8\
    \ |  |  |  |\n                   T   RT7|  |  |20|14|  |  |  |\n             \
    \      O    N1|3 |  |  |  |  |  |  |\n                   *    N2|  |3 |  |  |\
    \  |  |  |\n                   *    N3|1 |1 |1 |1 |  |  |  |\n               \
    \         N4|  |  |2 |  |  |  |  |\n                     Ia,Ib|  |  |20|27|  |\
    \  |  |\n                        N6|  |  |16|15|  |  |  |\n                  \
    \      N7|  |  |20|19|  |  |  |\n                        N8|  |  |18|18|  |  |\
    \  |\n                 N9-N11,H1|  |  |29|36|  |  |  |\n                     \
    \  N12|  |  |  |  |8 |2 |  |\n                       N13|  |  |  |  |8 |  |  |\n\
    \                       N14|  |  |  |  |8 |  |  |\n                       N15|\
    \  |  |  |  |  |9 |  |\n                      Figure 7: Area 1's Database.\n \
    \             Networks and routers are represented by vertices.\n            \
    \  An edge of cost X connects Vertex A to Vertex B iff\n              the intersection\
    \ of Column A and Row B is marked\n                               with an X.\n\
    \                                  **FROM**\n                            |RT|RT|RT|RT|RT|RT|RT\n\
    \                            |3 |4 |5 |6 |7 |10|11|\n                        \
    \ ------------------------\n                         RT3|  |  |  |6 |  |  |  |\n\
    \                         RT4|  |  |8 |  |  |  |  |\n                        \
    \ RT5|  |8 |  |6 |6 |  |  |\n                         RT6|8 |  |7 |  |  |5 | \
    \ |\n                         RT7|  |  |6 |  |  |  |  |\n                    \
    \ *  RT10|  |  |  |7 |  |  |2 |\n                     *  RT11|  |  |  |  |  |3\
    \ |  |\n                     T    N1|4 |4 |  |  |  |  |  |\n                 \
    \    O    N2|4 |4 |  |  |  |  |  |\n                     *    N3|1 |1 |  |  |\
    \  |  |  |\n                     *    N4|2 |3 |  |  |  |  |  |\n             \
    \             Ia|  |  |  |  |  |5 |  |\n                          Ib|  |  |  |7\
    \ |  |  |  |\n                          N6|  |  |  |  |1 |1 |3 |\n           \
    \               N7|  |  |  |  |5 |5 |7 |\n                          N8|  |  |\
    \  |  |4 |3 |2 |\n                   N9-N11,H1|  |  |  |  |  |  |11|\n       \
    \                  N12|  |  |8 |  |2 |  |  |\n                         N13|  |\
    \  |8 |  |  |  |  |\n                         N14|  |  |8 |  |  |  |  |\n    \
    \                     N15|  |  |  |  |9 |  |  |\n                     Figure 8:\
    \ The backbone's database.\n              Networks and routers are represented\
    \ by vertices.\n              An edge of cost X connects Vertex A to Vertex B\
    \ iff\n              the intersection of Column A and Row B is marked\n      \
    \                           with an X.\n        The backbone enables the exchange\
    \ of summary information between\n        area border routers.  Every area border\
    \ router hears the area\n        summaries from all other area border routers.\
    \  It then forms a\n        picture of the distance to all networks outside of\
    \ its area by\n        examining the collected LSAs, and adding in the backbone\n\
    \        distance to each advertising router.\n        Again using Routers RT3\
    \ and RT4 as an example, the procedure\n        goes as follows: They first calculate\
    \ the SPF tree for the\n        backbone.  This gives the distances to all other\
    \ area border\n        routers.  Also noted are the distances to networks (Ia\
    \ and Ib)\n        and AS boundary routers (RT5 and RT7) that belong to the\n\
    \        backbone.  This calculation is shown in Table 5.\n        Next, by looking\
    \ at the area summaries from these area border\n        routers, RT3 and RT4 can\
    \ determine the distance to all networks\n        outside their area.  These distances\
    \ are then advertised\n        internally to the area by RT3 and RT4.  The advertisements\
    \ that\n        Router RT3 and RT4 will make into Area 1 are shown in Table 6.\n\
    \        Note that Table 6 assumes that an area range has been configured\n  \
    \      for the backbone which groups Ia and Ib into a single LSA.\n        The\
    \ information imported into Area 1 by Routers RT3 and RT4\n        enables an\
    \ internal router, such as RT1, to choose an area\n        border router intelligently.\
    \  Router RT1 would use RT4 for\n        traffic to Network N6, RT3 for traffic\
    \ to Network N10, and would\n                              dist  from   dist \
    \ from\n                              RT3          RT4\n                   __________________________________\n\
    \                   to  RT3    *            21\n                   to  RT4   \
    \ 22           *\n                   to  RT7    20           14\n            \
    \       to  RT10   15           22\n                   to  RT11   18         \
    \  25\n                   __________________________________\n               \
    \    to  Ia     20           27\n                   to  Ib     15           22\n\
    \                   __________________________________\n                   to\
    \  RT5    14           8\n                   to  RT7    20           14\n    \
    \             Table 5: Backbone distances calculated\n                       \
    \ by Routers RT3 and RT4.\n                   Destination   RT3 adv.   RT4 adv.\n\
    \                   _________________________________\n                   Ia,Ib\
    \         20         27\n                   N6            16         15\n    \
    \               N7            20         19\n                   N8           \
    \ 18         18\n                   N9-N11,H1     29         36\n            \
    \       _________________________________\n                   RT5           14\
    \         8\n                   RT7           20         14\n              Table\
    \ 6: Destinations advertised into Area 1\n                        by Routers RT3\
    \ and RT4.\n        load share between the two for traffic to Network N8.\n  \
    \      Router RT1 can also determine in this manner the shortest path\n      \
    \  to the AS boundary routers RT5 and RT7.  Then, by looking at RT5\n        and\
    \ RT7's AS-external-LSAs, Router RT1 can decide between RT5 or\n        RT7 when\
    \ sending to a destination in another Autonomous System\n        (one of the networks\
    \ N12-N15).\n        Note that a failure of the line between Routers RT6 and RT10\n\
    \        will cause the backbone to become disconnected.  Configuring a\n    \
    \    virtual link between Routers RT7 and RT10 will give the backbone\n      \
    \  more connectivity and more resistance to such failures.\n    3.5.  IP subnetting\
    \ support\n        OSPF attaches an IP address mask to each advertised route.\
    \  The\n        mask indicates the range of addresses being described by the\n\
    \        particular route.  For example, a summary-LSA for the\n        destination\
    \ 128.185.0.0 with a mask of 0xffff0000 actually is\n        describing a single\
    \ route to the collection of destinations\n        128.185.0.0 - 128.185.255.255.\
    \  Similarly, host routes are\n        always advertised with a mask of 0xffffffff,\
    \ indicating the\n        presence of only a single destination.\n        Including\
    \ the mask with each advertised destination enables the\n        implementation\
    \ of what is commonly referred to as variable-\n        length subnetting.  This\
    \ means that a single IP class A, B, or C\n        network number can be broken\
    \ up into many subnets of various\n        sizes.  For example, the network 128.185.0.0\
    \ could be broken up\n        into 62 variable-sized subnets: 15 subnets of size\
    \ 4K, 15\n        subnets of size 256, and 32 subnets of size 8.  Table 7 shows\n\
    \        some of the resulting network addresses together with their\n       \
    \ masks.\n                  Network address   IP address mask   Subnet size\n\
    \                  _______________________________________________\n         \
    \         128.185.16.0      0xfffff000        4K\n                  128.185.1.0\
    \       0xffffff00        256\n                  128.185.0.8       0xfffffff8\
    \        8\n                         Table 7: Some sample subnet sizes.\n    \
    \    There are many possible ways of dividing up a class A, B, and C\n       \
    \ network into variable sized subnets.  The precise procedure for\n        doing\
    \ so is beyond the scope of this specification.  This\n        specification however\
    \ establishes the following guideline: When\n        an IP packet is forwarded,\
    \ it is always forwarded to the network\n        that is the best match for the\
    \ packet's destination.  Here best\n        match is synonymous with the longest\
    \ or most specific match.\n        For example, the default route with destination\
    \ of 0.0.0.0 and\n        mask 0x00000000 is always a match for every IP destination.\
    \  Yet\n        it is always less specific than any other match.  Subnet masks\n\
    \        must be assigned so that the best match for any IP destination\n    \
    \    is unambiguous.\n        Attaching an address mask to each route also enables\
    \ the support\n        of IP supernetting. For example, a single physical network\n\
    \        segment could be assigned the [address,mask] pair\n        [192.9.4.0,0xfffffc00].\
    \ The segment would then be single IP\n        network, containing addresses from\
    \ the four consecutive class C\n        network numbers 192.9.4.0 through 192.9.7.0.\
    \ Such addressing is\n        now becoming commonplace with the advent of CIDR\
    \ (see [Ref10]).\n        In order to get better aggregation at area boundaries,\
    \ area\n        address ranges can be employed (see Section C.2 for more\n   \
    \     details).  Each address range is defined as an [address,mask]\n        pair.\
    \  Many separate networks may then be contained in a single\n        address range,\
    \ just as a subnetted network is composed of many\n        separate subnets. \
    \ Area border routers then summarize the area\n        contents (for distribution\
    \ to the backbone) by advertising a\n        single route for each address range.\
    \  The cost of the route is\n        the maximum cost to any of the networks falling\
    \ in the specified\n        range.\n        For example, an IP subnetted network\
    \ might be configured as a\n        single OSPF area.  In that case, a single\
    \ address range could be\n        configured:  a class A, B, or C network number\
    \ along with its\n        natural IP mask.  Inside the area, any number of variable\
    \ sized\n        subnets could be defined.  However, external to the area a\n\
    \        single route for the entire subnetted network would be\n        distributed,\
    \ hiding even the fact that the network is subnetted\n        at all.  The cost\
    \ of this route is the maximum of the set of\n        costs to the component subnets.\n\
    \    3.6.  Supporting stub areas\n        In some Autonomous Systems, the majority\
    \ of the link-state\n        database may consist of AS-external-LSAs.  An OSPF\
    \ AS-external-\n        LSA is usually flooded throughout the entire AS.  However,\
    \ OSPF\n        allows certain areas to be configured as \"stub areas\".  AS-\n\
    \        external-LSAs are not flooded into/throughout stub areas;\n        routing\
    \ to AS external destinations in these areas is based on a\n        (per-area)\
    \ default only.  This reduces the link-state database\n        size, and therefore\
    \ the memory requirements, for a stub area's\n        internal routers.\n    \
    \    In order to take advantage of the OSPF stub area support,\n        default\
    \ routing must be used in the stub area.  This is\n        accomplished as follows.\
    \  One or more of the stub area's area\n        border routers must advertise\
    \ a default route into the stub area\n        via summary-LSAs.  These summary\
    \ defaults are flooded throughout\n        the stub area, but no further.  (For\
    \ this reason these defaults\n        pertain only to the particular stub area).\
    \  These summary\n        default routes will be used for any destination that\
    \ is not\n        explicitly reachable by an intra-area or inter-area path (i.e.,\n\
    \        AS external destinations).\n        An area can be configured as a stub\
    \ when there is a single exit\n        point from the area, or when the choice\
    \ of exit point need not\n        be made on a per-external-destination basis.\
    \  For example, Area\n        3 in Figure 6 could be configured as a stub area,\
    \ because all\n        external traffic must travel though its single area border\n\
    \        router RT11.  If Area 3 were configured as a stub, Router RT11\n    \
    \    would advertise a default route for distribution inside Area 3\n        (in\
    \ a summary-LSA), instead of flooding the AS-external-LSAs for\n        Networks\
    \ N12-N15 into/throughout the area.\n        The OSPF protocol ensures that all\
    \ routers belonging to an area\n        agree on whether the area has been configured\
    \ as a stub.  This\n        guarantees that no confusion will arise in the flooding\
    \ of AS-\n        external-LSAs.\n        There are a couple of restrictions on\
    \ the use of stub areas.\n        Virtual links cannot be configured through stub\
    \ areas.  In\n        addition, AS boundary routers cannot be placed internal\
    \ to stub\n        areas.\n    3.7.  Partitions of areas\n        OSPF does not\
    \ actively attempt to repair area partitions.  When\n        an area becomes partitioned,\
    \ each component simply becomes a\n        separate area.  The backbone then performs\
    \ routing between the\n        new areas.  Some destinations reachable via intra-area\
    \ routing\n        before the partition will now require inter-area routing.\n\
    \        However, in order to maintain full routing after the partition,\n   \
    \     an address range must not be split across multiple components of\n     \
    \   the area partition. Also, the backbone itself must not\n        partition.\
    \  If it does, parts of the Autonomous System will\n        become unreachable.\
    \  Backbone partitions can be repaired by\n        configuring virtual links (see\
    \ Section 15).\n        Another way to think about area partitions is to look\
    \ at the\n        Autonomous System graph that was introduced in Section 2.  Area\n\
    \        IDs can be viewed as colors for the graph's edges.[1] Each edge\n   \
    \     of the graph connects to a network, or is itself a point-to-\n        point\
    \ network.  In either case, the edge is colored with the\n        network's Area\
    \ ID.\n        A group of edges, all having the same color, and interconnected\n\
    \        by vertices, represents an area.  If the topology of the\n        Autonomous\
    \ System is intact, the graph will have several regions\n        of color, each\
    \ color being a distinct Area ID.\n        When the AS topology changes, one of\
    \ the areas may become\n        partitioned.  The graph of the AS will then have\
    \ multiple\n        regions of the same color (Area ID).  The routing in the\n\
    \        Autonomous System will continue to function as long as these\n      \
    \  regions of same color are connected by the single backbone\n        region.\n"
- title: 4.  Functional Summary
  contents:
  - "4.  Functional Summary\n    A separate copy of OSPF's basic routing algorithm\
    \ runs in each area.\n    Routers having interfaces to multiple areas run multiple\
    \ copies of\n    the algorithm.  A brief summary of the routing algorithm follows.\n\
    \    When a router starts, it first initializes the routing protocol data\n  \
    \  structures.  The router then waits for indications from the lower-\n    level\
    \ protocols that its interfaces are functional.\n    A router then uses the OSPF's\
    \ Hello Protocol to acquire neighbors.\n    The router sends Hello packets to\
    \ its neighbors, and in turn\n    receives their Hello packets.  On broadcast\
    \ and point-to-point\n    networks, the router dynamically detects its neighboring\
    \ routers by\n    sending its Hello packets to the multicast address AllSPFRouters.\n\
    \    On non-broadcast networks, some configuration information may be\n    necessary\
    \ in order to discover neighbors.  On broadcast and NBMA\n    networks the Hello\
    \ Protocol also elects a Designated router for the\n    network.\n    The router\
    \ will attempt to form adjacencies with some of its newly\n    acquired neighbors.\
    \  Link-state databases are synchronized between\n    pairs of adjacent routers.\
    \  On broadcast and NBMA networks, the\n    Designated Router determines which\
    \ routers should become adjacent.\n    Adjacencies control the distribution of\
    \ routing information.\n    Routing updates are sent and received only on adjacencies.\n\
    \    A router periodically advertises its state, which is also called\n    link\
    \ state.  Link state is also advertised when a router's state\n    changes.  A\
    \ router's adjacencies are reflected in the contents of\n    its LSAs.  This relationship\
    \ between adjacencies and link state\n    allows the protocol to detect dead routers\
    \ in a timely fashion.\n    LSAs are flooded throughout the area.  The flooding\
    \ algorithm is\n    reliable, ensuring that all routers in an area have exactly\
    \ the same\n    link-state database.  This database consists of the collection\
    \ of\n    LSAs originated by each router belonging to the area.  From this\n \
    \   database each router calculates a shortest-path tree, with itself as\n   \
    \ root.  This shortest-path tree in turn yields a routing table for\n    the protocol.\n\
    \    4.1.  Inter-area routing\n        The previous section described the operation\
    \ of the protocol\n        within a single area.  For intra-area routing, no other\
    \ routing\n        information is pertinent.  In order to be able to route to\n\
    \        destinations outside of the area, the area border routers inject\n  \
    \      additional routing information into the area.  This additional\n      \
    \  information is a distillation of the rest of the Autonomous\n        System's\
    \ topology.\n        This distillation is accomplished as follows: Each area border\n\
    \        router is by definition connected to the backbone.  Each area\n     \
    \   border router summarizes the topology of its attached non-\n        backbone\
    \ areas for transmission on the backbone, and hence to\n        all other area\
    \ border routers.  An area border router then has\n        complete topological\
    \ information concerning the backbone, and\n        the area summaries from each\
    \ of the other area border routers.\n        From this information, the router\
    \ calculates paths to all\n        inter-area destinations.  The router then advertises\
    \ these paths\n        into its attached areas.  This enables the area's internal\n\
    \        routers to pick the best exit router when forwarding traffic\n      \
    \  inter-area destinations.\n    4.2.  AS external routes\n        Routers that\
    \ have information regarding other Autonomous Systems\n        can flood this\
    \ information throughout the AS.  This external\n        routing information is\
    \ distributed verbatim to every\n        participating router.  There is one exception:\
    \ external routing\n        information is not flooded into \"stub\" areas (see\
    \ Section 3.6).\n        To utilize external routing information, the path to\
    \ all routers\n        advertising external information must be known throughout\
    \ the AS\n        (excepting the stub areas).  For that reason, the locations\
    \ of\n        these AS boundary routers are summarized by the (non-stub) area\n\
    \        border routers.\n    4.3.  Routing protocol packets\n        The OSPF\
    \ protocol runs directly over IP, using IP protocol 89.\n        OSPF does not\
    \ provide any explicit fragmentation/reassembly\n        support.  When fragmentation\
    \ is necessary, IP\n        fragmentation/reassembly is used.  OSPF protocol packets\
    \ have\n        been designed so that large protocol packets can generally be\n\
    \        split into several smaller protocol packets.  This practice is\n    \
    \    recommended; IP fragmentation should be avoided whenever\n        possible.\n\
    \        Routing protocol packets should always be sent with the IP TOS\n    \
    \    field set to 0.  If at all possible, routing protocol packets\n        should\
    \ be given preference over regular IP data traffic, both\n        when being sent\
    \ and received.  As an aid to accomplishing this,\n        OSPF protocol packets\
    \ should have their IP precedence field set\n        to the value Internetwork\
    \ Control (see [Ref5]).\n        All OSPF protocol packets share a common protocol\
    \ header that is\n        described in Appendix A.  The OSPF packet types are\
    \ listed below\n        in Table 8.  Their formats are also described in Appendix\
    \ A.\n             Type   Packet  name           Protocol  function\n        \
    \     __________________________________________________________\n           \
    \  1      Hello                  Discover/maintain  neighbors\n             2\
    \      Database Description   Summarize database contents\n             3    \
    \  Link State Request     Database download\n             4      Link State Update\
    \      Database update\n             5      Link State Ack         Flooding acknowledgment\n\
    \                            Table 8: OSPF packet types.\n        OSPF's Hello\
    \ protocol uses Hello packets to discover and\n        maintain neighbor relationships.\
    \  The Database Description and\n        Link State Request packets are used in\
    \ the forming of\n        adjacencies.  OSPF's reliable update mechanism is implemented\
    \ by\n        the Link State Update and Link State Acknowledgment packets.\n \
    \       Each Link State Update packet carries a set of new link state\n      \
    \  advertisements (LSAs) one hop further away from their point of\n        origination.\
    \  A single Link State Update packet may contain the\n        LSAs of several\
    \ routers.  Each LSA is tagged with the ID of the\n        originating router\
    \ and a checksum of its link state contents.\n        Each LSA also has a type\
    \ field; the different types of OSPF LSAs\n        are listed below in Table 9.\n\
    \        OSPF routing packets (with the exception of Hellos) are sent\n      \
    \  only over adjacencies.  This means that all OSPF protocol\n        packets\
    \ travel a single IP hop, except those that are sent over\n        virtual adjacencies.\
    \  The IP source address of an OSPF protocol\n        packet is one end of a router\
    \ adjacency, and the IP destination\n        address is either the other end of\
    \ the adjacency or an IP\n        multicast address.\n    4.4.  Basic implementation\
    \ requirements\n        An implementation of OSPF requires the following pieces\
    \ of\n        system support:\n        Timers\n            Two different kind\
    \ of timers are required.  The first kind,\n            called \"single shot timers\"\
    , fire once and cause a protocol\n            event to be processed.  The second\
    \ kind, called \"interval\n            timers\", fire at continuous intervals.\
    \  These are used for\n            the sending of packets at regular intervals.\
    \  A good example\n            of this is the regular broadcast of Hello packets.\
    \ The\n            granularity of both kinds of timers is one second.\n      \
    \      Interval timers should be implemented to avoid drift.  In\n           \
    \ some router implementations, packet processing can affect\n            timer\
    \ execution.  When multiple routers are attached to a\n            single network,\
    \ all doing broadcasts, this can lead to the\n            synchronization of routing\
    \ packets (which should be\n            avoided).  If timers cannot be implemented\
    \ to avoid drift,\n            small random amounts should be added to/subtracted\
    \ from the\n            interval timer at each firing.\n        LS     LSA   \
    \             LSA description\n        type   name\n        ________________________________________________________\n\
    \        1      Router-LSAs        Originated by all routers.\n              \
    \                    This LSA describes\n                                  the\
    \ collected states of the\n                                  router's interfaces\
    \ to an\n                                  area. Flooded throughout a\n      \
    \                            single area only.\n        ________________________________________________________\n\
    \        2      Network-LSAs       Originated for broadcast\n                \
    \                  and NBMA networks by\n                                  the\
    \ Designated Router. This\n                                  LSA contains the\n\
    \                                  list of routers connected\n               \
    \                   to the network. Flooded\n                                \
    \  throughout a single area only.\n        ________________________________________________________\n\
    \        3,4    Summary-LSAs       Originated by area border\n               \
    \                   routers, and flooded through-\n                          \
    \        out the LSA's associated\n                                  area. Each\
    \ summary-LSA\n                                  describes a route to a\n    \
    \                              destination outside the area,\n               \
    \                   yet still inside the AS\n                                \
    \  (i.e., an inter-area route).\n                                  Type 3 summary-LSAs\
    \ describe\n                                  routes to networks. Type 4\n   \
    \                               summary-LSAs describe\n                      \
    \            routes to AS boundary routers.\n        ________________________________________________________\n\
    \        5      AS-external-LSAs   Originated by AS boundary\n               \
    \                   routers, and flooded through-\n                          \
    \        out the AS. Each\n                                  AS-external-LSA describes\n\
    \                                  a route to a destination in\n             \
    \                     another Autonomous System.\n                           \
    \       Default routes for the AS can\n                                  also\
    \ be described by\n                                  AS-external-LSAs.\n     \
    \       Table 9: OSPF link state advertisements (LSAs).\n        IP multicast\n\
    \            Certain OSPF packets take the form of IP multicast\n            datagrams.\
    \  Support for receiving and sending IP multicast\n            datagrams, along\
    \ with the appropriate lower-level protocol\n            support, is required.\
    \  The IP multicast datagrams used by\n            OSPF never travel more than\
    \ one hop. For this reason, the\n            ability to forward IP multicast datagrams\
    \ is not required.\n            For information on IP multicast, see [Ref7].\n\
    \        Variable-length subnet support\n            The router's IP protocol\
    \ support must include the ability to\n            divide a single IP class A,\
    \ B, or C network number into many\n            subnets of various sizes.  This\
    \ is commonly called\n            variable-length subnetting; see Section 3.5\
    \ for details.\n        IP supernetting support\n            The router's IP protocol\
    \ support must include the ability to\n            aggregate contiguous collections\
    \ of IP class A, B, and C\n            networks into larger quantities called\
    \ supernets.\n            Supernetting has been proposed as one way to improve\
    \ the\n            scaling of IP routing in the worldwide Internet. For more\n\
    \            information on IP supernetting, see [Ref10].\n        Lower-level\
    \ protocol support\n            The lower level protocols referred to here are\
    \ the network\n            access protocols, such as the Ethernet data link layer.\n\
    \            Indications must be passed from these protocols to OSPF as\n    \
    \        the network interface goes up and down.  For example, on an\n       \
    \     ethernet it would be valuable to know when the ethernet\n            transceiver\
    \ cable becomes unplugged.\n        Non-broadcast lower-level protocol support\n\
    \            On non-broadcast networks, the OSPF Hello Protocol can be\n     \
    \       aided by providing an indication when an attempt is made to\n        \
    \    send a packet to a dead or non-existent router.  For\n            example,\
    \ on an X.25 PDN a dead neighboring router may be\n            indicated by the\
    \ reception of a X.25 clear with an\n            appropriate cause and diagnostic,\
    \ and this information would\n            be passed to OSPF.\n        List manipulation\
    \ primitives\n            Much of the OSPF functionality is described in terms\
    \ of its\n            operation on lists of LSAs.  For example, the collection\
    \ of\n            LSAs that will be retransmitted to an adjacent router until\n\
    \            acknowledged are described as a list.  Any particular LSA\n     \
    \       may be on many such lists.  An OSPF implementation needs to\n        \
    \    be able to manipulate these lists, adding and deleting\n            constituent\
    \ LSAs as necessary.\n        Tasking support\n            Certain procedures\
    \ described in this specification invoke\n            other procedures.  At times,\
    \ these other procedures should\n            be executed in-line, that is, before\
    \ the current procedure\n            is finished.  This is indicated in the text\
    \ by instructions\n            to execute a procedure.  At other times, the other\n\
    \            procedures are to be executed only when the current\n           \
    \ procedure has finished.  This is indicated by instructions\n            to schedule\
    \ a task.\n    4.5.  Optional OSPF capabilities\n        The OSPF protocol defines\
    \ several optional capabilities.  A\n        router indicates the optional capabilities\
    \ that it supports in\n        its OSPF Hello packets, Database Description packets\
    \ and in its\n        LSAs.  This enables routers supporting a mix of optional\n\
    \        capabilities to coexist in a single Autonomous System.\n        Some\
    \ capabilities must be supported by all routers attached to a\n        specific\
    \ area.  In this case, a router will not accept a\n        neighbor's Hello Packet\
    \ unless there is a match in reported\n        capabilities (i.e., a capability\
    \ mismatch prevents a neighbor\n        relationship from forming).  An example\
    \ of this is the\n        ExternalRoutingCapability (see below).\n        Other\
    \ capabilities can be negotiated during the Database\n        Exchange process.\
    \  This is accomplished by specifying the\n        optional capabilities in Database\
    \ Description packets.  A\n        capability mismatch with a neighbor in this\
    \ case will result in\n        only a subset of the link state database being\
    \ exchanged between\n        the two neighbors.\n        The routing table build\
    \ process can also be affected by the\n        presence/absence of optional capabilities.\
    \  For example, since\n        the optional capabilities are reported in LSAs,\
    \ routers\n        incapable of certain functions can be avoided when building\
    \ the\n        shortest path tree.\n        The OSPF optional capabilities defined\
    \ in this memo are listed\n        below.  See Section A.2 for more information.\n\
    \        ExternalRoutingCapability\n            Entire OSPF areas can be configured\
    \ as \"stubs\" (see Section\n            3.6).  AS-external-LSAs will not be flooded\
    \ into stub areas.\n            This capability is represented by the E-bit in\
    \ the OSPF\n            Options field (see Section A.2).  In order to ensure\n\
    \            consistent configuration of stub areas, all routers\n           \
    \ interfacing to such an area must have the E-bit clear in\n            their\
    \ Hello packets (see Sections 9.5 and 10.5).\n"
- title: 5.  Protocol Data Structures
  contents:
  - "5.  Protocol Data Structures\n    The OSPF protocol is described herein in terms\
    \ of its operation on\n    various protocol data structures.  The following list\
    \ comprises the\n    top-level OSPF data structures.  Any initialization that\
    \ needs to be\n    done is noted.  OSPF areas, interfaces and neighbors also have\n\
    \    associated data structures that are described later in this\n    specification.\n\
    \    Router ID\n        A 32-bit number that uniquely identifies this router in\
    \ the AS.\n        One possible implementation strategy would be to use the\n\
    \        smallest IP interface address belonging to the router. If a\n       \
    \ router's OSPF Router ID is changed, the router's OSPF software\n        should\
    \ be restarted before the new Router ID takes effect.  In\n        this case the\
    \ router should flush its self-originated LSAs from\n        the routing domain\
    \ (see Section 14.1) before restarting, or they\n        will persist for up to\
    \ MaxAge minutes.\n    Area structures\n        Each one of the areas to which\
    \ the router is connected has its\n        own data structure.  This data structure\
    \ describes the working\n        of the basic OSPF algorithm.  Remember that each\
    \ area runs a\n        separate copy of the basic OSPF algorithm.\n    Backbone\
    \ (area) structure\n        The OSPF backbone area is responsible for the dissemination\
    \ of\n        inter-area routing information.\n    Virtual links configured\n\
    \        The virtual links configured with this router as one endpoint.\n    \
    \    In order to have configured virtual links, the router itself\n        must\
    \ be an area border router.  Virtual links are identified by\n        the Router\
    \ ID of the other endpoint -- which is another area\n        border router.  These\
    \ two endpoint routers must be attached to a\n        common area, called the\
    \ virtual link's Transit area.  Virtual\n        links are part of the backbone,\
    \ and behave as if they were\n        unnumbered point-to-point networks between\
    \ the two routers.  A\n        virtual link uses the intra-area routing of its\
    \ Transit area to\n        forward packets.  Virtual links are brought up and\
    \ down through\n        the building of the shortest-path trees for the Transit\
    \ area.\n    List of external routes\n        These are routes to destinations\
    \ external to the Autonomous\n        System, that have been gained either through\
    \ direct experience\n        with another routing protocol (such as BGP), or through\n\
    \        configuration information, or through a combination of the two\n    \
    \    (e.g., dynamic external information to be advertised by OSPF\n        with\
    \ configured metric). Any router having these external routes\n        is called\
    \ an AS boundary router.  These routes are advertised by\n        the router into\
    \ the OSPF routing domain via AS-external-LSAs.\n    List of AS-external-LSAs\n\
    \        Part of the link-state database.  These have originated from the\n  \
    \      AS boundary routers.  They comprise routes to destinations\n        external\
    \ to the Autonomous System.  Note that, if the router is\n        itself an AS\
    \ boundary router, some of these AS-external-LSAs\n        have been self-originated.\n\
    \    The routing table\n        Derived from the link-state database.  Each entry\
    \ in the routing\n        table is indexed by a destination, and contains the\n\
    \        destination's cost and a set of paths to use in forwarding\n        packets\
    \ to the destination. A path is described by its type and\n        next hop. \
    \ For more information, see Section 11.\n    Figure 9 shows the collection of\
    \ data structures present in a\n    typical router.  The router pictured is RT10,\
    \ from the map in Figure\n    6.  Note that Router RT10 has a virtual link configured\
    \ to Router\n    RT11, with Area 2 as the link's Transit area.  This is indicated\
    \ by\n    the dashed line in Figure 9.  When the virtual link becomes active,\n\
    \    through the building of the shortest path tree for Area 2, it\n    becomes\
    \ an interface to the backbone (see the two backbone\n    interfaces depicted\
    \ in Figure 9).\n"
- title: 6.  The Area Data Structure
  contents:
  - "6.  The Area Data Structure\n    The area data structure contains all the information\
    \ used to run the\n    basic OSPF routing algorithm. Each area maintains its own\
    \ link-state\n    database. A network belongs to a single area, and a router interface\n\
    \    connects to a single area. Each router adjacency also belongs to a\n    single\
    \ area.\n    The OSPF backbone is the special OSPF area responsible for\n    disseminating\
    \ inter-area routing information.\n    The area link-state database consists of\
    \ the collection of router-\n    LSAs, network-LSAs and summary-LSAs that have\
    \ originated from the\n    area's routers.  This information is flooded throughout\
    \ a single\n    area only.  The list of AS-external-LSAs (see Section 5) is also\n\
    \    considered to be part of each area's link-state database.\n    Area ID\n\
    \        A 32-bit number identifying the area. The Area ID of 0.0.0.0 is\n   \
    \     reserved for the backbone.\n    List of area address ranges\n        In\
    \ order to aggregate routing information at area boundaries,\n        area address\
    \ ranges can be employed. Each address range is\n        specified by an [address,mask]\
    \ pair and a status indication of\n        either Advertise or DoNotAdvertise\
    \ (see Section 12.4.3).\n                              +----+\n              \
    \                |RT10|------+\n                              +----+       \\\
    +-------------+\n                             /      \\       |Routing Table|\n\
    \                            /        \\      +-------------+\n              \
    \             /          \\\n              +------+    /            \\    +--------+\n\
    \              |Area 2|---+              +---|Backbone|\n              +------+***********+\
    \          +--------+\n             /        \\           *        /         \
    \ \\\n            /          \\           *      /            \\\n       +---------+\
    \  +---------+    +------------+       +------------+\n       |Interface|  |Interface|\
    \    |Virtual Link|       |Interface Ib|\n       |  to N6  |  |  to N8  |    |\
    \   to RT11  |       +------------+\n       +---------+  +---------+    +------------+\
    \             |\n           /  \\           |               |                \
    \   |\n          /    \\          |               |                   |\n   +--------+\
    \ +--------+  |        +-------------+      +------------+\n   |Neighbor| |Neighbor|\
    \  |        |Neighbor RT11|      |Neighbor RT6|\n   |  RT8   | |  RT7   |  | \
    \       +-------------+      +------------+\n   +--------+ +--------+  |\n   \
    \                       |\n                     +-------------+\n            \
    \         |Neighbor RT11|\n                     +-------------+\n            \
    \    Figure 9: Router RT10's Data structures\n    Associated router interfaces\n\
    \        This router's interfaces connecting to the area.  A router\n        interface\
    \ belongs to one and only one area (or the backbone).\n        For the backbone\
    \ area this list includes all the virtual links.\n        A virtual link is identified\
    \ by the Router ID of its other\n        endpoint; its cost is the cost of the\
    \ shortest intra-area path\n        through the Transit area that exists between\
    \ the two routers.\n    List of router-LSAs\n        A router-LSA is generated\
    \ by each router in the area.  It\n        describes the state of the router's\
    \ interfaces to the area.\n    List of network-LSAs\n        One network-LSA is\
    \ generated for each transit broadcast and NBMA\n        network in the area.\
    \  A network-LSA describes the set of routers\n        currently connected to\
    \ the network.\n    List of summary-LSAs\n        Summary-LSAs originate from\
    \ the area's area border routers.\n        They describe routes to destinations\
    \ internal to the Autonomous\n        System, yet external to the area (i.e.,\
    \ inter-area\n        destinations).\n    Shortest-path tree\n        The shortest-path\
    \ tree for the area, with this router itself as\n        root.  Derived from the\
    \ collected router-LSAs and network-LSAs\n        by the Dijkstra algorithm (see\
    \ Section 16.1).\n    TransitCapability\n        This parameter indicates whether\
    \ the area can carry data traffic\n        that neither originates nor terminates\
    \ in the area itself. This\n        parameter is calculated when the area's shortest-path\
    \ tree is\n        built (see Section 16.1, where TransitCapability is set to\
    \ TRUE\n        if and only if there are one or more fully adjacent virtual\n\
    \        links using the area as Transit area), and is used as an input\n    \
    \    to a subsequent step of the routing table build process (see\n        Section\
    \ 16.3). When an area's TransitCapability is set to TRUE,\n        the area is\
    \ said to be a \"transit area\".\n    ExternalRoutingCapability\n        Whether\
    \ AS-external-LSAs will be flooded into/throughout the\n        area.  This is\
    \ a configurable parameter.  If AS-external-LSAs\n        are excluded from the\
    \ area, the area is called a \"stub\". Within\n        stub areas, routing to\
    \ AS external destinations will be based\n        solely on a default summary\
    \ route.  The backbone cannot be\n        configured as a stub area.  Also, virtual\
    \ links cannot be\n        configured through stub areas.  For more information,\
    \ see\n        Section 3.6.\n    StubDefaultCost\n        If the area has been\
    \ configured as a stub area, and the router\n        itself is an area border\
    \ router, then the StubDefaultCost\n        indicates the cost of the default\
    \ summary-LSA that the router\n        should advertise into the area. See Section\
    \ 12.4.3 for more\n        information.\n    Unless otherwise specified, the remaining\
    \ sections of this document\n    refer to the operation of the OSPF protocol within\
    \ a single area.\n"
- title: 7.  Bringing Up Adjacencies
  contents:
  - "7.  Bringing Up Adjacencies\n    OSPF creates adjacencies between neighboring\
    \ routers for the purpose\n    of exchanging routing information.  Not every two\
    \ neighboring\n    routers will become adjacent.  This section covers the generalities\n\
    \    involved in creating adjacencies.  For further details consult\n    Section\
    \ 10.\n    7.1.  The Hello Protocol\n        The Hello Protocol is responsible\
    \ for establishing and\n        maintaining neighbor relationships.  It also ensures\
    \ that\n        communication between neighbors is bidirectional.  Hello packets\n\
    \        are sent periodically out all router interfaces.  Bidirectional\n   \
    \     communication is indicated when the router sees itself listed in\n     \
    \   the neighbor's Hello Packet.  On broadcast and NBMA networks,\n        the\
    \ Hello Protocol elects a Designated Router for the network.\n        The Hello\
    \ Protocol works differently on broadcast networks, NBMA\n        networks and\
    \ Point-to-MultiPoint networks.  On broadcast\n        networks, each router advertises\
    \ itself by periodically\n        multicasting Hello Packets.  This allows neighbors\
    \ to be\n        discovered dynamically.  These Hello Packets contain the\n  \
    \      router's view of the Designated Router's identity, and the list\n     \
    \   of routers whose Hello Packets have been seen recently.\n        On NBMA networks\
    \ some configuration information may be necessary\n        for the operation of\
    \ the Hello Protocol.  Each router that may\n        potentially become Designated\
    \ Router has a list of all other\n        routers attached to the network.  A\
    \ router, having Designated\n        Router potential, sends Hello Packets to\
    \ all other potential\n        Designated Routers when its interface to the NBMA\
    \ network first\n        becomes operational.  This is an attempt to find the\
    \ Designated\n        Router for the network.  If the router itself is elected\n\
    \        Designated Router, it begins sending Hello Packets to all other\n   \
    \     routers attached to the network.\n        On Point-to-MultiPoint networks,\
    \ a router sends Hello Packets to\n        all neighbors with which it can communicate\
    \ directly. These\n        neighbors may be discovered dynamically through a protocol\
    \ such\n        as Inverse ARP (see [Ref14]), or they may be configured.\n   \
    \     After a neighbor has been discovered, bidirectional\n        communication\
    \ ensured, and (if on a broadcast or NBMA network) a\n        Designated Router\
    \ elected, a decision is made regarding whether\n        or not an adjacency should\
    \ be formed with the neighbor (see\n        Section 10.4). If an adjacency is\
    \ to be formed, the first step\n        is to synchronize the neighbors' link-state\
    \ databases.  This is\n        covered in the next section.\n    7.2.  The Synchronization\
    \ of Databases\n        In a link-state routing algorithm, it is very important\
    \ for all\n        routers' link-state databases to stay synchronized.  OSPF\n\
    \        simplifies this by requiring only adjacent routers to remain\n      \
    \  synchronized.  The synchronization process begins as soon as the\n        routers\
    \ attempt to bring up the adjacency.  Each router\n        describes its database\
    \ by sending a sequence of Database\n        Description packets to its neighbor.\
    \  Each Database Description\n        Packet describes a set of LSAs belonging\
    \ to the router's\n        database.  When the neighbor sees an LSA that is more\
    \ recent\n        than its own database copy, it makes a note that this newer\
    \ LSA\n        should be requested.\n        This sending and receiving of Database\
    \ Description packets is\n        called the \"Database Exchange Process\".  During\
    \ this process,\n        the two routers form a master/slave relationship.  Each\
    \ Database\n        Description Packet has a sequence number.  Database Description\n\
    \        Packets sent by the master (polls) are acknowledged by the slave\n  \
    \      through echoing of the sequence number.  Both polls and their\n       \
    \ responses contain summaries of link state data.  The master is\n        the\
    \ only one allowed to retransmit Database Description Packets.\n        It does\
    \ so only at fixed intervals, the length of which is the\n        configured per-interface\
    \ constant RxmtInterval.\n        Each Database Description contains an indication\
    \ that there are\n        more packets to follow --- the M-bit.  The Database\
    \ Exchange\n        Process is over when a router has received and sent Database\n\
    \        Description Packets with the M-bit off.\n        During and after the\
    \ Database Exchange Process, each router has\n        a list of those LSAs for\
    \ which the neighbor has more up-to-date\n        instances.  These LSAs are requested\
    \ in Link State Request\n        Packets.  Link State Request packets that are\
    \ not satisfied are\n        retransmitted at fixed intervals of time RxmtInterval.\
    \  When the\n        Database Description Process has completed and all Link State\n\
    \        Requests have been satisfied, the databases are deemed\n        synchronized\
    \ and the routers are marked fully adjacent.  At this\n        time the adjacency\
    \ is fully functional and is advertised in the\n        two routers' router-LSAs.\n\
    \        The adjacency is used by the flooding procedure as soon as the\n    \
    \    Database Exchange Process begins.  This simplifies database\n        synchronization,\
    \ and guarantees that it finishes in a\n        predictable period of time.\n\
    \    7.3.  The Designated Router\n        Every broadcast and NBMA network has\
    \ a Designated Router.  The\n        Designated Router performs two main functions\
    \ for the routing\n        protocol:\n        o   The Designated Router originates\
    \ a network-LSA on behalf of\n            the network.  This LSA lists the set\
    \ of routers (including\n            the Designated Router itself) currently attached\
    \ to the\n            network.  The Link State ID for this LSA (see Section\n\
    \            12.1.4) is the IP interface address of the Designated\n         \
    \   Router.  The IP network number can then be obtained by using\n           \
    \ the network's subnet/network mask.\n        o   The Designated Router becomes\
    \ adjacent to all other routers\n            on the network.  Since the link state\
    \ databases are\n            synchronized across adjacencies (through adjacency\
    \ bring-up\n            and then the flooding procedure), the Designated Router\n\
    \            plays a central part in the synchronization process.\n        The\
    \ Designated Router is elected by the Hello Protocol.  A\n        router's Hello\
    \ Packet contains its Router Priority, which is\n        configurable on a per-interface\
    \ basis.  In general, when a\n        router's interface to a network first becomes\
    \ functional, it\n        checks to see whether there is currently a Designated\
    \ Router for\n        the network.  If there is, it accepts that Designated Router,\n\
    \        regardless of its Router Priority.  (This makes it harder to\n      \
    \  predict the identity of the Designated Router, but ensures that\n        the\
    \ Designated Router changes less often.  See below.)\n        Otherwise, the router\
    \ itself becomes Designated Router if it has\n        the highest Router Priority\
    \ on the network.  A more detailed\n        (and more accurate) description of\
    \ Designated Router election is\n        presented in Section 9.4.\n        The\
    \ Designated Router is the endpoint of many adjacencies.  In\n        order to\
    \ optimize the flooding procedure on broadcast networks,\n        the Designated\
    \ Router multicasts its Link State Update Packets\n        to the address AllSPFRouters,\
    \ rather than sending separate\n        packets over each adjacency.\n       \
    \ Section 2 of this document discusses the directed graph\n        representation\
    \ of an area.  Router nodes are labelled with their\n        Router ID.  Transit\
    \ network nodes are actually labelled with the\n        IP address of their Designated\
    \ Router.  It follows that when the\n        Designated Router changes, it appears\
    \ as if the network node on\n        the graph is replaced by an entirely new\
    \ node.  This will cause\n        the network and all its attached routers to\
    \ originate new LSAs.\n        Until the link-state databases again converge,\
    \ some temporary\n        loss of connectivity may result.  This may result in\
    \ ICMP\n        unreachable messages being sent in response to data traffic.\n\
    \        For that reason, the Designated Router should change only\n        infrequently.\
    \  Router Priorities should be configured so that\n        the most dependable\
    \ router on a network eventually becomes\n        Designated Router.\n    7.4.\
    \  The Backup Designated Router\n        In order to make the transition to a\
    \ new Designated Router\n        smoother, there is a Backup Designated Router\
    \ for each broadcast\n        and NBMA network.  The Backup Designated Router\
    \ is also adjacent\n        to all routers on the network, and becomes Designated\
    \ Router\n        when the previous Designated Router fails.  If there were no\n\
    \        Backup Designated Router, when a new Designated Router became\n     \
    \   necessary, new adjacencies would have to be formed between the\n        new\
    \ Designated Router and all other routers attached to the\n        network.  Part\
    \ of the adjacency forming process is the\n        synchronizing of link-state\
    \ databases, which can potentially\n        take quite a long time.  During this\
    \ time, the network would not\n        be available for transit data traffic.\
    \  The Backup Designated\n        obviates the need to form these adjacencies,\
    \ since they already\n        exist.  This means the period of disruption in transit\
    \ traffic\n        lasts only as long as it takes to flood the new LSAs (which\n\
    \        announce the new Designated Router).\n        The Backup Designated Router\
    \ does not generate a network-LSA for\n        the network.  (If it did, the transition\
    \ to a new Designated\n        Router would be even faster.  However, this is\
    \ a tradeoff\n        between database size and speed of convergence when the\n\
    \        Designated Router disappears.)\n        The Backup Designated Router\
    \ is also elected by the Hello\n        Protocol.  Each Hello Packet has a field\
    \ that specifies the\n        Backup Designated Router for the network.\n    \
    \    In some steps of the flooding procedure, the Backup Designated\n        Router\
    \ plays a passive role, letting the Designated Router do\n        more of the\
    \ work.  This cuts down on the amount of local routing\n        traffic.  See\
    \ Section 13.3 for more information.\n    7.5.  The graph of adjacencies\n   \
    \     An adjacency is bound to the network that the two routers have\n       \
    \ in common.  If two routers have multiple networks in common,\n        they may\
    \ have multiple adjacencies between them.\n        One can picture the collection\
    \ of adjacencies on a network as\n        forming an undirected graph.  The vertices\
    \ consist of routers,\n        with an edge joining two routers if they are adjacent.\
    \  The\n        graph of adjacencies describes the flow of routing protocol\n\
    \        packets, and in particular Link State Update Packets, through\n     \
    \   the Autonomous System.\n        Two graphs are possible, depending on whether\
    \ a Designated\n        Router is elected for the network.  On physical point-to-point\n\
    \        networks, Point-to-MultiPoint networks and virtual links,\n        neighboring\
    \ routers become adjacent whenever they can\n        communicate directly.  In\
    \ contrast, on broadcast and NBMA\n        networks only the Designated Router\
    \ and the Backup Designated\n        Router become adjacent to all other routers\
    \ attached to the\n        network.\n          +---+            +---+\n      \
    \    |RT1|------------|RT2|            o---------------o\n          +---+    N1\
    \      +---+           RT1             RT2\n                                 \
    \                RT7\n                                                  o---------+\n\
    \            +---+   +---+   +---+                /|\\        |\n            |RT7|\
    \   |RT3|   |RT4|               / | \\       |\n            +---+   +---+   +---+\
    \              /  |  \\      |\n              |       |       |              \
    \ /   |   \\     |\n         +-----------------------+        RT5o RT6o    oRT4\
    \ |\n                  |       |     N2            *   *   *     |\n         \
    \       +---+   +---+                  *  *  *      |\n                |RT5| \
    \  |RT6|                   * * *       |\n                +---+   +---+      \
    \              ***        |\n                                                \
    \  o---------+\n                                                 RT3\n       \
    \           Figure 10: The graph of adjacencies\n        These graphs are shown\
    \ in Figure 10.  It is assumed that Router\n        RT7 has become the Designated\
    \ Router, and Router RT3 the Backup\n        Designated Router, for the Network\
    \ N2.  The Backup Designated\n        Router performs a lesser function during\
    \ the flooding procedure\n        than the Designated Router (see Section 13.3).\
    \  This is the\n        reason for the dashed lines connecting the Backup Designated\n\
    \        Router RT3.\n"
- title: 8.  Protocol Packet Processing
  contents:
  - "8.  Protocol Packet Processing\n    This section discusses the general processing\
    \ of OSPF routing\n    protocol packets.  It is very important that the router\
    \ link-state\n    databases remain synchronized.  For this reason, routing protocol\n\
    \    packets should get preferential treatment over ordinary data\n    packets,\
    \ both in sending and receiving.\n    Routing protocol packets are sent along\
    \ adjacencies only (with the\n    exception of Hello packets, which are used to\
    \ discover the\n    adjacencies).  This means that all routing protocol packets\
    \ travel a\n    single IP hop, except those sent over virtual links.\n    All\
    \ routing protocol packets begin with a standard header.  The\n    sections below\
    \ provide details on how to fill in and verify this\n    standard header.  Then,\
    \ for each packet type, the section giving\n    more details on that particular\
    \ packet type's processing is listed.\n    8.1.  Sending protocol packets\n  \
    \      When a router sends a routing protocol packet, it fills in the\n      \
    \  fields of the standard OSPF packet header as follows.  For more\n        details\
    \ on the header format consult Section A.3.1:\n        Version #\n           \
    \ Set to 2, the version number of the protocol as documented\n            in this\
    \ specification.\n        Packet type\n            The type of OSPF packet, such\
    \ as Link state Update or Hello\n            Packet.\n        Packet length\n\
    \            The length of the entire OSPF packet in bytes, including the\n  \
    \          standard OSPF packet header.\n        Router ID\n            The identity\
    \ of the router itself (who is originating the\n            packet).\n       \
    \ Area ID\n            The OSPF area that the packet is being sent into.\n   \
    \     Checksum\n            The standard IP 16-bit one's complement checksum of\
    \ the\n            entire OSPF packet, excluding the 64-bit authentication\n \
    \           field.  This checksum is calculated as part of the\n            appropriate\
    \ authentication procedure; for some OSPF\n            authentication types, the\
    \ checksum calculation is omitted.\n            See Section D.4 for details.\n\
    \        AuType and Authentication\n            Each OSPF packet exchange is authenticated.\
    \  Authentication\n            types are assigned by the protocol and are documented\
    \ in\n            Appendix D.  A different authentication procedure can be\n \
    \           used for each IP network/subnet.  Autype indicates the type\n    \
    \        of authentication procedure in use. The 64-bit\n            authentication\
    \ field is then for use by the chosen\n            authentication procedure. \
    \ This procedure should be the last\n            called when forming the packet\
    \ to be sent. See Section D.4\n            for details.\n        The IP destination\
    \ address for the packet is selected as\n        follows.  On physical point-to-point\
    \ networks, the IP\n        destination is always set to the address AllSPFRouters.\
    \  On all\n        other network types (including virtual links), the majority\
    \ of\n        OSPF packets are sent as unicasts, i.e., sent directly to the\n\
    \        other end of the adjacency.  In this case, the IP destination is\n  \
    \      just the Neighbor IP address associated with the other end of\n       \
    \ the adjacency (see Section 10).  The only packets not sent as\n        unicasts\
    \ are on broadcast networks; on these networks Hello\n        packets are sent\
    \ to the multicast destination AllSPFRouters, the\n        Designated Router and\
    \ its Backup send both Link State Update\n        Packets and Link State Acknowledgment\
    \ Packets to the multicast\n        address AllSPFRouters, while all other routers\
    \ send both their\n        Link State Update and Link State Acknowledgment Packets\
    \ to the\n        multicast address AllDRouters.\n        Retransmissions of Link\
    \ State Update packets are ALWAYS sent\n        directly to the neighbor. On multi-access\
    \ networks, this means\n        that retransmissions should be sent to the neighbor's\
    \ IP\n        address.\n        The IP source address should be set to the IP\
    \ address of the\n        sending interface.  Interfaces to unnumbered point-to-point\n\
    \        networks have no associated IP address.  On these interfaces,\n     \
    \   the IP source should be set to any of the other IP addresses\n        belonging\
    \ to the router.  For this reason, there must be at\n        least one IP address\
    \ assigned to the router.[2] Note that, for\n        most purposes, virtual links\
    \ act precisely the same as\n        unnumbered point-to-point networks.  However,\
    \ each virtual link\n        does have an IP interface address (discovered during\
    \ the routing\n        table build process) which is used as the IP source when\
    \ sending\n        packets over the virtual link.\n        For more information\
    \ on the format of specific OSPF packet\n        types, consult the sections listed\
    \ in Table 10.\n             Type   Packet name            detailed section (transmit)\n\
    \             _________________________________________________________\n    \
    \         1      Hello                  Section  9.5\n             2      Database\
    \ description   Section 10.8\n             3      Link state request     Section\
    \ 10.9\n             4      Link state update      Section 13.3\n            \
    \ 5      Link state ack         Section 13.5\n      Table 10: Sections describing\
    \ OSPF protocol packet transmission.\n    8.2.  Receiving protocol packets\n \
    \       Whenever a protocol packet is received by the router it is\n        marked\
    \ with the interface it was received on.  For routers that\n        have virtual\
    \ links configured, it may not be immediately obvious\n        which interface\
    \ to associate the packet with.  For example,\n        consider the Router RT11\
    \ depicted in Figure 6.  If RT11 receives\n        an OSPF protocol packet on\
    \ its interface to Network N8, it may\n        want to associate the packet with\
    \ the interface to Area 2, or\n        with the virtual link to Router RT10 (which\
    \ is part of the\n        backbone).  In the following, we assume that the packet\
    \ is\n        initially associated with the non-virtual  link.[3]\n        In\
    \ order for the packet to be accepted at the IP level, it must\n        pass a\
    \ number of tests, even before the packet is passed to OSPF\n        for processing:\n\
    \        o   The IP checksum must be correct.\n        o   The packet's IP destination\
    \ address must be the IP address\n            of the receiving interface, or one\
    \ of the IP multicast\n            addresses AllSPFRouters or AllDRouters.\n \
    \       o   The IP protocol specified must be OSPF (89).\n        o   Locally\
    \ originated packets should not be passed on to OSPF.\n            That is, the\
    \ source IP address should be examined to make\n            sure this is not a\
    \ multicast packet that the router itself\n            generated.\n        Next,\
    \ the OSPF packet header is verified.  The fields specified\n        in the header\
    \ must match those configured for the receiving\n        interface.  If they do\
    \ not, the packet should be discarded:\n        o   The version number field must\
    \ specify protocol version 2.\n        o   The Area ID found in the OSPF header\
    \ must be verified.  If\n            both of the following cases fail, the packet\
    \ should be\n            discarded.  The Area ID specified in the header must\
    \ either:\n            (1) Match the Area ID of the receiving interface.  In this\n\
    \                case, the packet has been sent over a single hop.\n         \
    \       Therefore, the packet's IP source address is required to\n           \
    \     be on the same network as the receiving interface.  This\n             \
    \   can be verified by comparing the packet's IP source\n                address\
    \ to the interface's IP address, after masking\n                both addresses\
    \ with the interface mask.  This comparison\n                should not be performed\
    \ on point-to-point networks. On\n                point-to-point networks, the\
    \ interface addresses of each\n                end of the link are assigned independently,\
    \ if they are\n                assigned at all.\n            (2) Indicate the\
    \ backbone.  In this case, the packet has\n                been sent over a virtual\
    \ link.  The receiving router\n                must be an area border router,\
    \ and the Router ID\n                specified in the packet (the source router)\
    \ must be the\n                other end of a configured virtual link.  The receiving\n\
    \                interface must also attach to the virtual link's\n          \
    \      configured Transit area.  If all of these checks\n                succeed,\
    \ the packet is accepted and is from now on\n                associated with the\
    \ virtual link (and the backbone\n                area).\n        o   Packets\
    \ whose IP destination is AllDRouters should only be\n            accepted if\
    \ the state of the receiving interface is DR or\n            Backup (see Section\
    \ 9.1).\n        o   The AuType specified in the packet must match the AuType\n\
    \            specified for the associated area.\n        o   The packet must be\
    \ authenticated.  The authentication\n            procedure is indicated by the\
    \ setting of AuType (see\n            Appendix D).  The authentication procedure\
    \ may use one or\n            more Authentication keys, which can be configured\
    \ on a per-\n            interface basis.  The authentication procedure may also\n\
    \            verify the checksum field in the OSPF packet header (which,\n   \
    \         when used, is set to the standard IP 16-bit one's complement\n     \
    \       checksum of the OSPF packet's contents after excluding the\n         \
    \   64-bit authentication field).  If the authentication\n            procedure\
    \ fails, the packet should be discarded.\n        If the packet type is Hello,\
    \ it should then be further processed\n        by the Hello Protocol (see Section\
    \ 10.5).  All other packet\n        types are sent/received only on adjacencies.\
    \  This means that\n        the packet must have been sent by one of the router's\
    \ active\n        neighbors.  If the receiving interface connects to a broadcast\n\
    \        network, Point-to-MultiPoint network or NBMA network the sender\n   \
    \     is identified by the IP source address found in the packet's IP\n      \
    \  header.  If the receiving interface connects to a point-to-point\n        network\
    \ or a virtual link, the sender is identified by the\n        Router ID (source\
    \ router) found in the packet's OSPF header.\n        The data structure associated\
    \ with the receiving interface\n        contains the list of active neighbors.\
    \  Packets not matching any\n        active neighbor are discarded.\n        At\
    \ this point all received protocol packets are associated with\n        an active\
    \ neighbor.  For the further input processing of\n        specific packet types,\
    \ consult the sections listed in Table 11.\n              Type   Packet name \
    \           detailed section (receive)\n              ________________________________________________________\n\
    \              1      Hello                  Section 10.5\n              2   \
    \   Database description   Section 10.6\n              3      Link state request\
    \     Section 10.7\n              4      Link state update      Section 13\n \
    \             5      Link state ack         Section 13.7\n      Table 11: Sections\
    \ describing OSPF protocol packet reception.\n"
- title: 9.  The Interface Data Structure
  contents:
  - "9.  The Interface Data Structure\n    An OSPF interface is the connection between\
    \ a router and a network.\n    We assume a single OSPF interface to each attached\
    \ network/subnet,\n    although supporting multiple interfaces on a single network\
    \ is\n    considered in Appendix F. Each interface structure has at most one\n\
    \    IP interface address.\n    An OSPF interface can be considered to belong\
    \ to the area that\n    contains the attached network.  All routing protocol packets\n\
    \    originated by the router over this interface are labelled with the\n    interface's\
    \ Area ID.  One or more router adjacencies may develop\n    over an interface.\
    \  A router's LSAs reflect the state of its\n    interfaces and their associated\
    \ adjacencies.\n    The following data items are associated with an interface.\
    \  Note\n    that a number of these items are actually configuration for the\n\
    \    attached network; such items must be the same for all routers\n    connected\
    \ to the network.\n    Type\n        The OSPF interface type is either point-to-point,\
    \ broadcast,\n        NBMA, Point-to-MultiPoint or virtual link.\n    State\n\
    \        The functional level of an interface.  State determines whether\n   \
    \     or not full adjacencies are allowed to form over the interface.\n      \
    \  State is also reflected in the router's LSAs.\n    IP interface address\n \
    \       The IP address associated with the interface.  This appears as\n     \
    \   the IP source address in all routing protocol packets originated\n       \
    \ over this interface.  Interfaces to unnumbered point-to-point\n        networks\
    \ do not have an associated IP address.\n    IP interface mask\n        Also referred\
    \ to as the subnet mask, this indicates the portion\n        of the IP interface\
    \ address that identifies the attached\n        network.  Masking the IP interface\
    \ address with the IP interface\n        mask yields the IP network number of\
    \ the attached network.  On\n        point-to-point networks and virtual links,\
    \ the IP interface mask\n        is not defined. On these networks, the link itself\
    \ is not\n        assigned an IP network number, and so the addresses of each\
    \ side\n        of the link are assigned independently, if they are assigned at\n\
    \        all.\n    Area ID\n        The Area ID of the area to which the attached\
    \ network belongs.\n        All routing protocol packets originating from the\
    \ interface are\n        labelled with this Area ID.\n    HelloInterval\n    \
    \    The length of time, in seconds, between the Hello packets that\n        the\
    \ router sends on the interface.  Advertised in Hello packets\n        sent out\
    \ this interface.\n    RouterDeadInterval\n        The number of seconds before\
    \ the router's neighbors will declare\n        it down, when they stop hearing\
    \ the router's Hello Packets.\n        Advertised in Hello packets sent out this\
    \ interface.\n    InfTransDelay\n        The estimated number of seconds it takes\
    \ to transmit a Link\n        State Update Packet over this interface.  LSAs contained\
    \ in the\n        Link State Update packet will have their age incremented by\
    \ this\n        amount before transmission.  This value should take into account\n\
    \        transmission and propagation delays; it must be greater than\n      \
    \  zero.\n    Router Priority\n        An 8-bit unsigned integer.  When two routers\
    \ attached to a\n        network both attempt to become Designated Router, the\
    \ one with\n        the highest Router Priority takes precedence.  A router whose\n\
    \        Router Priority is set to 0 is ineligible to become Designated\n    \
    \    Router on the attached network.  Advertised in Hello packets\n        sent\
    \ out this interface.\n    Hello Timer\n        An interval timer that causes\
    \ the interface to send a Hello\n        packet.  This timer fires every HelloInterval\
    \ seconds.  Note\n        that on non-broadcast networks a separate Hello packet\
    \ is sent\n        to each qualified neighbor.\n    Wait Timer\n        A single\
    \ shot timer that causes the interface to exit the\n        Waiting state, and\
    \ as a consequence select a Designated Router\n        on the network.  The length\
    \ of the timer is RouterDeadInterval\n        seconds.\n    List of neighboring\
    \ routers\n        The other routers attached to this network.  This list is formed\n\
    \        by the Hello Protocol.  Adjacencies will be formed to some of\n     \
    \   these neighbors.  The set of adjacent neighbors can be\n        determined\
    \ by an examination of all of the neighbors' states.\n    Designated Router\n\
    \        The Designated Router selected for the attached network.  The\n     \
    \   Designated Router is selected on all broadcast and NBMA networks\n       \
    \ by the Hello Protocol.  Two pieces of identification are kept\n        for the\
    \ Designated Router: its Router ID and its IP interface\n        address on the\
    \ network.  The Designated Router advertises link\n        state for the network;\
    \ this network-LSA is labelled with the\n        Designated Router's IP address.\
    \  The Designated Router is\n        initialized to 0.0.0.0, which indicates the\
    \ lack of a Designated\n        Router.\n    Backup Designated Router\n      \
    \  The Backup Designated Router is also selected on all broadcast\n        and\
    \ NBMA networks by the Hello Protocol.  All routers on the\n        attached network\
    \ become adjacent to both the Designated Router\n        and the Backup Designated\
    \ Router.  The Backup Designated Router\n        becomes Designated Router when\
    \ the current Designated Router\n        fails.  The Backup Designated Router\
    \ is initialized to 0.0.0.0,\n        indicating the lack of a Backup Designated\
    \ Router.\n    Interface output cost(s)\n        The cost of sending a data packet\
    \ on the interface, expressed in\n        the link state metric.  This is advertised\
    \ as the link cost for\n        this interface in the router-LSA. The cost of\
    \ an interface must\n        be greater than zero.\n    RxmtInterval\n       \
    \ The number of seconds between LSA retransmissions, for\n        adjacencies\
    \ belonging to this interface.  Also used when\n        retransmitting Database\
    \ Description and Link State Request\n        Packets.\n    AuType\n        The\
    \ type of authentication used on the attached network/subnet.\n        Authentication\
    \ types are defined in Appendix D.  All OSPF packet\n        exchanges are authenticated.\
    \  Different authentication schemes\n        may be used on different networks/subnets.\n\
    \    Authentication key\n        This configured data allows the authentication\
    \ procedure to\n        generate and/or verify OSPF protocol packets.  The\n \
    \       Authentication key can be configured on a per-interface basis.\n     \
    \   For example, if the AuType indicates simple password, the\n        Authentication\
    \ key would be a 64-bit clear password which is\n        inserted into the OSPF\
    \ packet header. If instead Autype\n        indicates Cryptographic authentication,\
    \ then the Authentication\n        key is a shared secret which enables the generation/verification\n\
    \        of message digests which are appended to the OSPF protocol\n        packets.\
    \ When Cryptographic authentication is used, multiple\n        simultaneous keys\
    \ are supported in order to achieve smooth key\n        transition (see Section\
    \ D.3).\n    9.1.  Interface states\n        The various states that router interfaces\
    \ may attain is\n        documented in this section.  The states are listed in\
    \ order of\n        progressing functionality.  For example, the inoperative state\n\
    \        is listed first, followed by a list of intermediate states\n        before\
    \ the final, fully functional state is achieved.  The\n        specification makes\
    \ use of this ordering by sometimes making\n        references such as \"those\
    \ interfaces in state greater than X\".\n        Figure 11 shows the graph of\
    \ interface state changes.  The arcs\n        of the graph are labelled with the\
    \ event causing the state\n        change.  These events are documented in Section\
    \ 9.2.  The\n        interface state machine is described in more detail in Section\n\
    \        9.3.\n        Down\n            This is the initial interface state.\
    \  In this state, the\n            lower-level protocols have indicated that the\
    \ interface is\n            unusable.  No protocol traffic at all will be sent\
    \ or\n            received on such a interface.  In this state, interface\n  \
    \          parameters should be set to their initial values.  All\n          \
    \  interface timers should be disabled, and there should be no\n            adjacencies\
    \ associated with the interface.\n        Loopback\n            In this state,\
    \ the router's interface to the network is\n                                 \
    \ +----+   UnloopInd   +--------+\n                                  |Down|<--------------|Loopback|\n\
    \                                  +----+               +--------+\n         \
    \                            |\n                                     |InterfaceUp\n\
    \                          +-------+  |               +--------------+\n     \
    \                     |Waiting|<-+-------------->|Point-to-point|\n          \
    \                +-------+                  +--------------+\n               \
    \               |\n                     WaitTimer|BackupSeen\n               \
    \               |\n                              |\n                         \
    \     |   NeighborChange\n          +------+           +-+<---------------- +-------+\n\
    \          |Backup|<----------|?|----------------->|DROther|\n          +------+---------->+-+<-----+\
    \           +-------+\n                    Neighbor  |       |\n             \
    \       Change    |       |Neighbor\n                              |       |Change\n\
    \                              |     +--+\n                              +---->|DR|\n\
    \                                    +--+\n                      Figure 11: Interface\
    \ State changes\n                 In addition to the state transitions pictured,\n\
    \                 Event InterfaceDown always forces Down State, and\n        \
    \         Event LoopInd always forces Loopback State\n            looped back.\
    \  The interface may be looped back in hardware\n            or software.  The\
    \ interface will be unavailable for regular\n            data traffic.  However,\
    \ it may still be desirable to gain\n            information on the quality of\
    \ this interface, either through\n            sending ICMP pings to the interface\
    \ or through something\n            like a bit error test.  For this reason, IP\
    \ packets may\n            still be addressed to an interface in Loopback state.\
    \  To\n            facilitate this, such interfaces are advertised in router-\n\
    \            LSAs as single host routes, whose destination is the IP\n       \
    \     interface address.[4]\n        Waiting\n            In this state, the router\
    \ is trying to determine the\n            identity of the (Backup) Designated\
    \ Router for the network.\n            To do this, the router monitors the Hello\
    \ Packets it\n            receives.  The router is not allowed to elect a Backup\n\
    \            Designated Router nor a Designated Router until it\n            transitions\
    \ out of Waiting state.  This prevents unnecessary\n            changes of (Backup)\
    \ Designated Router.\n        Point-to-point\n            In this state, the interface\
    \ is operational, and connects\n            either to a physical point-to-point\
    \ network or to a virtual\n            link.  Upon entering this state, the router\
    \ attempts to form\n            an adjacency with the neighboring router.  Hello\
    \ Packets are\n            sent to the neighbor every HelloInterval seconds.\n\
    \        DR Other\n            The interface is to a broadcast or NBMA network\
    \ on which\n            another router has been selected to be the Designated\n\
    \            Router.  In this state, the router itself has not been\n        \
    \    selected Backup Designated Router either.  The router forms\n           \
    \ adjacencies to both the Designated Router and the Backup\n            Designated\
    \ Router (if they exist).\n        Backup\n            In this state, the router\
    \ itself is the Backup Designated\n            Router on the attached network.\
    \  It will be promoted to\n            Designated Router when the present Designated\
    \ Router fails.\n            The router establishes adjacencies to all other routers\n\
    \            attached to the network.  The Backup Designated Router\n        \
    \    performs slightly different functions during the Flooding\n            Procedure,\
    \ as compared to the Designated Router (see Section\n            13.3).  See Section\
    \ 7.4 for more details on the functions\n            performed by the Backup Designated\
    \ Router.\n        DR  In this state, this router itself is the Designated Router\n\
    \            on the attached network.  Adjacencies are established to all\n  \
    \          other routers attached to the network.  The router must also\n    \
    \        originate a network-LSA for the network node.  The network-\n       \
    \     LSA will contain links to all routers (including the\n            Designated\
    \ Router itself) attached to the network.  See\n            Section 7.3 for more\
    \ details on the functions performed by\n            the Designated Router.\n\
    \    9.2.  Events causing interface state changes\n        State changes can be\
    \ effected by a number of events.  These\n        events are pictured as the labelled\
    \ arcs in Figure 11.  The\n        label definitions are listed below.  For a\
    \ detailed explanation\n        of the effect of these events on OSPF protocol\
    \ operation,\n        consult Section 9.3.\n        InterfaceUp\n            Lower-level\
    \ protocols have indicated that the network\n            interface is operational.\
    \  This enables the interface to\n            transition out of Down state.  On\
    \ virtual links, the\n            interface operational indication is actually\
    \ a result of the\n            shortest path calculation (see Section 16.7).\n\
    \        WaitTimer\n            The Wait Timer has fired, indicating the end of\
    \ the waiting\n            period that is required before electing a (Backup)\n\
    \            Designated Router.\n        BackupSeen\n            The router has\
    \ detected the existence or non-existence of a\n            Backup Designated\
    \ Router for the network.  This is done in\n            one of two ways.  First,\
    \ an Hello Packet may be received\n            from a neighbor claiming to be\
    \ itself the Backup Designated\n            Router.  Alternatively, an Hello Packet\
    \ may be received from\n            a neighbor claiming to be itself the Designated\
    \ Router, and\n            indicating that there is no Backup Designated Router.\
    \  In\n            either case there must be bidirectional communication with\n\
    \            the neighbor, i.e., the router must also appear in the\n        \
    \    neighbor's Hello Packet.  This event signals an end to the\n            Waiting\
    \ state.\n        NeighborChange\n            There has been a change in the set\
    \ of bidirectional\n            neighbors associated with the interface.  The\
    \ (Backup)\n            Designated Router needs to be recalculated.  The following\n\
    \            neighbor changes lead to the NeighborChange event.  For an\n    \
    \        explanation of neighbor states, see Section 10.1.\n            o   Bidirectional\
    \ communication has been established to a\n                neighbor.  In other\
    \ words, the state of the neighbor has\n                transitioned to 2-Way\
    \ or higher.\n            o   There is no longer bidirectional communication with\
    \ a\n                neighbor.  In other words, the state of the neighbor has\n\
    \                transitioned to Init or lower.\n            o   One of the bidirectional\
    \ neighbors is newly declaring\n                itself as either Designated Router\
    \ or Backup Designated\n                Router.  This is detected through examination\
    \ of that\n                neighbor's Hello Packets.\n            o   One of the\
    \ bidirectional neighbors is no longer\n                declaring itself as Designated\
    \ Router, or is no longer\n                declaring itself as Backup Designated\
    \ Router.  This is\n                again detected through examination of that\
    \ neighbor's\n                Hello Packets.\n            o   The advertised Router\
    \ Priority for a bidirectional\n                neighbor has changed.  This is\
    \ again detected through\n                examination of that neighbor's Hello\
    \ Packets.\n        LoopInd\n            An indication has been received that\
    \ the interface is now\n            looped back to itself.  This indication can\
    \ be received\n            either from network management or from the lower level\n\
    \            protocols.\n        UnloopInd\n            An indication has been\
    \ received that the interface is no\n            longer looped back.  As with\
    \ the LoopInd event, this\n            indication can be received either from\
    \ network management or\n            from the lower level protocols.\n       \
    \ InterfaceDown\n            Lower-level protocols indicate that this interface\
    \ is no\n            longer functional.  No matter what the current interface\n\
    \            state is, the new interface state will be Down.\n    9.3.  The Interface\
    \ state machine\n        A detailed description of the interface state changes\
    \ follows.\n        Each state change is invoked by an event (Section 9.2).  This\n\
    \        event may produce different effects, depending on the current\n     \
    \   state of the interface.  For this reason, the state machine\n        below\
    \ is organized by current interface state and received\n        event.  Each entry\
    \ in the state machine describes the resulting\n        new interface state and\
    \ the required set of additional actions.\n        When an interface's state changes,\
    \ it may be necessary to\n        originate a new router-LSA.  See Section 12.4\
    \ for more details.\n        Some of the required actions below involve generating\
    \ events for\n        the neighbor state machine.  For example, when an interface\n\
    \        becomes inoperative, all neighbor connections associated with\n     \
    \   the interface must be destroyed.  For more information on the\n        neighbor\
    \ state machine, see Section 10.3.\n         State(s):  Down\n            Event:\
    \  InterfaceUp\n        New state:  Depends upon action routine\n           Action:\
    \  Start the interval Hello Timer, enabling the\n                    periodic\
    \ sending of Hello packets out the interface.\n                    If the attached\
    \ network is a physical point-to-point\n                    network, Point-to-MultiPoint\
    \ network or virtual\n                    link, the interface state transitions\
    \ to Point-to-\n                    Point.  Else, if the router is not eligible\
    \ to\n                    become Designated Router the interface state\n     \
    \               transitions to DR Other.\n                    Otherwise, the attached\
    \ network is a broadcast or\n                    NBMA network and the router is\
    \ eligible to become\n                    Designated Router.  In this case, in\
    \ an attempt to\n                    discover the attached network's Designated\
    \ Router\n                    the interface state is set to Waiting and the single\n\
    \                    shot Wait Timer is started.  Additionally, if the\n     \
    \               network is an NBMA network examine the configured\n          \
    \          list of neighbors for this interface and generate\n               \
    \     the neighbor event Start for each neighbor that is\n                   \
    \ also eligible to become Designated Router.\n         State(s):  Waiting\n  \
    \          Event:  BackupSeen\n        New state:  Depends upon action routine.\n\
    \           Action:  Calculate the attached network's Backup Designated\n    \
    \                Router and Designated Router, as shown in Section\n         \
    \           9.4.  As a result of this calculation, the new state\n           \
    \         of the interface will be either DR Other, Backup or\n              \
    \      DR.\n         State(s):  Waiting\n            Event:  WaitTimer\n     \
    \   New state:  Depends upon action routine.\n           Action:  Calculate the\
    \ attached network's Backup Designated\n                    Router and Designated\
    \ Router, as shown in Section\n                    9.4.  As a result of this calculation,\
    \ the new state\n                    of the interface will be either DR Other,\
    \ Backup or\n                    DR.\n         State(s):  DR Other, Backup or\
    \ DR\n            Event:  NeighborChange\n        New state:  Depends upon action\
    \ routine.\n           Action:  Recalculate the attached network's Backup Designated\n\
    \                    Router and Designated Router, as shown in Section\n     \
    \               9.4.  As a result of this calculation, the new state\n       \
    \             of the interface will be either DR Other, Backup or\n          \
    \          DR.\n         State(s):  Any State\n            Event:  InterfaceDown\n\
    \        New state:  Down\n           Action:  All interface variables are reset,\
    \ and interface\n                    timers disabled.  Also, all neighbor connections\n\
    \                    associated with the interface are destroyed.  This\n    \
    \                is done by generating the event KillNbr on all\n            \
    \        associated neighbors (see Section 10.2).\n         State(s):  Any State\n\
    \            Event:  LoopInd\n        New state:  Loopback\n           Action:\
    \  Since this interface is no longer connected to the\n                    attached\
    \ network the actions associated with the\n                    above InterfaceDown\
    \ event are executed.\n         State(s):  Loopback\n            Event:  UnloopInd\n\
    \        New state:  Down\n           Action:  No actions are necessary.  For\
    \ example, the\n                    interface variables have already been reset\
    \ upon\n                    entering the Loopback state.  Note that reception\
    \ of\n                    an InterfaceUp event is necessary before the\n     \
    \               interface again becomes fully functional.\n    9.4.  Electing\
    \ the Designated Router\n        This section describes the algorithm used for\
    \ calculating a\n        network's Designated Router and Backup Designated Router.\
    \  This\n        algorithm is invoked by the Interface state machine.  The\n \
    \       initial time a router runs the election algorithm for a network,\n   \
    \     the network's Designated Router and Backup Designated Router are\n     \
    \   initialized to 0.0.0.0.  This indicates the lack of both a\n        Designated\
    \ Router and a Backup Designated Router.\n        The Designated Router election\
    \ algorithm proceeds as follows:\n        Call the router doing the calculation\
    \ Router X.  The list of\n        neighbors attached to the network and having\
    \ established\n        bidirectional communication with Router X is examined.\
    \  This\n        list is precisely the collection of Router X's neighbors (on\n\
    \        this network) whose state is greater than or equal to 2-Way (see\n  \
    \      Section 10.1).  Router X itself is also considered to be on the\n     \
    \   list.  Discard all routers from the list that are ineligible to\n        become\
    \ Designated Router.  (Routers having Router Priority of 0\n        are ineligible\
    \ to become Designated Router.)  The following\n        steps are then executed,\
    \ considering only those routers that\n        remain on the list:\n        (1)\
    \ Note the current values for the network's Designated Router\n            and\
    \ Backup Designated Router.  This is used later for\n            comparison purposes.\n\
    \        (2) Calculate the new Backup Designated Router for the network\n    \
    \        as follows.  Only those routers on the list that have not\n         \
    \   declared themselves to be Designated Router are eligible to\n            become\
    \ Backup Designated Router.  If one or more of these\n            routers have\
    \ declared themselves Backup Designated Router\n            (i.e., they are currently\
    \ listing themselves as Backup\n            Designated Router, but not as Designated\
    \ Router, in their\n            Hello Packets) the one having highest Router Priority\
    \ is\n            declared to be Backup Designated Router.  In case of a tie,\n\
    \            the one having the highest Router ID is chosen.  If no\n        \
    \    routers have declared themselves Backup Designated Router,\n            choose\
    \ the router having highest Router Priority, (again\n            excluding those\
    \ routers who have declared themselves\n            Designated Router), and again\
    \ use the Router ID to break\n            ties.\n        (3) Calculate the new\
    \ Designated Router for the network as\n            follows.  If one or more of\
    \ the routers have declared\n            themselves Designated Router (i.e., they\
    \ are currently\n            listing themselves as Designated Router in their\
    \ Hello\n            Packets) the one having highest Router Priority is declared\n\
    \            to be Designated Router.  In case of a tie, the one having\n    \
    \        the highest Router ID is chosen.  If no routers have\n            declared\
    \ themselves Designated Router, assign the Designated\n            Router to be\
    \ the same as the newly elected Backup Designated\n            Router.\n     \
    \   (4) If Router X is now newly the Designated Router or newly the\n        \
    \    Backup Designated Router, or is now no longer the Designated\n          \
    \  Router or no longer the Backup Designated Router, repeat\n            steps\
    \ 2 and 3, and then proceed to step 5.  For example, if\n            Router X\
    \ is now the Designated Router, when step 2 is\n            repeated X will no\
    \ longer be eligible for Backup Designated\n            Router election.  Among\
    \ other things, this will ensure that\n            no router will declare itself\
    \ both Backup Designated Router\n            and Designated Router.[5]\n     \
    \   (5) As a result of these calculations, the router itself may now\n       \
    \     be Designated Router or Backup Designated Router.  See\n            Sections\
    \ 7.3 and 7.4 for the additional duties this would\n            entail.  The router's\
    \ interface state should be set\n            accordingly.  If the router itself\
    \ is now Designated Router,\n            the new interface state is DR.  If the\
    \ router itself is now\n            Backup Designated Router, the new interface\
    \ state is Backup.\n            Otherwise, the new interface state is DR Other.\n\
    \        (6) If the attached network is an NBMA network, and the router\n    \
    \        itself has just become either Designated Router or Backup\n         \
    \   Designated Router, it must start sending Hello Packets to\n            those\
    \ neighbors that are not eligible to become Designated\n            Router (see\
    \ Section 9.5.1).  This is done by invoking the\n            neighbor event Start\
    \ for each neighbor having a Router\n            Priority of 0.\n        (7) If\
    \ the above calculations have caused the identity of either\n            the Designated\
    \ Router or Backup Designated Router to change,\n            the set of adjacencies\
    \ associated with this interface will\n            need to be modified.  Some\
    \ adjacencies may need to be\n            formed, and others may need to be broken.\
    \  To accomplish\n            this, invoke the event AdjOK?  on all neighbors\
    \ whose state\n            is at least 2-Way.  This will cause their eligibility\
    \ for\n            adjacency to be reexamined (see Sections 10.3 and 10.4).\n\
    \        The reason behind the election algorithm's complexity is the\n      \
    \  desire for an orderly transition from Backup Designated Router\n        to\
    \ Designated Router, when the current Designated Router fails.\n        This orderly\
    \ transition is ensured through the introduction of\n        hysteresis: no new\
    \ Backup Designated Router can be chosen until\n        the old Backup accepts\
    \ its new Designated Router\n        responsibilities.\n        The above procedure\
    \ may elect the same router to be both\n        Designated Router and Backup Designated\
    \ Router, although that\n        router will never be the calculating router (Router\
    \ X) itself.\n        The elected Designated Router may not be the router having\
    \ the\n        highest Router Priority, nor will the Backup Designated Router\n\
    \        necessarily have the second highest Router Priority.  If Router\n   \
    \     X is not itself eligible to become Designated Router, it is\n        possible\
    \ that neither a Backup Designated Router nor a\n        Designated Router will\
    \ be selected in the above procedure.  Note\n        also that if Router X is\
    \ the only attached router that is\n        eligible to become Designated Router,\
    \ it will select itself as\n        Designated Router and there will be no Backup\
    \ Designated Router\n        for the network.\n    9.5.  Sending Hello packets\n\
    \        Hello packets are sent out each functioning router interface.\n     \
    \   They are used to discover and maintain neighbor\n        relationships.[6]\
    \ On broadcast and NBMA networks, Hello Packets\n        are also used to elect\
    \ the Designated Router and Backup\n        Designated Router.\n        The format\
    \ of an Hello packet is detailed in Section A.3.2.  The\n        Hello Packet\
    \ contains the router's Router Priority (used in\n        choosing the Designated\
    \ Router), and the interval between Hello\n        Packets sent out the interface\
    \ (HelloInterval).  The Hello\n        Packet also indicates how often a neighbor\
    \ must be heard from to\n        remain active (RouterDeadInterval).  Both HelloInterval\
    \ and\n        RouterDeadInterval must be the same for all routers attached to\n\
    \        a common network.  The Hello packet also contains the IP address\n  \
    \      mask of the attached network (Network Mask).  On unnumbered\n        point-to-point\
    \ networks and on virtual links this field should\n        be set to 0.0.0.0.\n\
    \        The Hello packet's Options field describes the router's optional\n  \
    \      OSPF capabilities.  One optional capability is defined in this\n      \
    \  specification (see Sections 4.5 and A.2).  The E-bit of the\n        Options\
    \ field should be set if and only if the attached area is\n        capable of\
    \ processing AS-external-LSAs (i.e., it is not a stub\n        area).  If the\
    \ E-bit is set incorrectly the neighboring routers\n        will refuse to accept\
    \ the Hello Packet (see Section 10.5).\n        Unrecognized bits in the Hello\
    \ Packet's Options field should be\n        set to zero.\n        In order to\
    \ ensure two-way communication between adjacent\n        routers, the Hello packet\
    \ contains the list of all routers on\n        the network from which Hello Packets\
    \ have been seen recently.\n        The Hello packet also contains the router's\
    \ current choice for\n        Designated Router and Backup Designated Router.\
    \  A value of\n        0.0.0.0 in these fields means that one has not yet been\n\
    \        selected.\n        On broadcast networks and physical point-to-point\
    \ networks,\n        Hello packets are sent every HelloInterval seconds to the\
    \ IP\n        multicast address AllSPFRouters.  On virtual links, Hello\n    \
    \    packets are sent as unicasts (addressed directly to the other\n        end\
    \ of the virtual link) every HelloInterval seconds. On Point-\n        to-MultiPoint\
    \ networks, separate Hello packets are sent to each\n        attached neighbor\
    \ every HelloInterval seconds. Sending of Hello\n        packets on NBMA networks\
    \ is covered in the next section.\n        9.5.1.  Sending Hello packets on NBMA\
    \ networks\n            Static configuration information may be necessary in order\n\
    \            for the Hello Protocol to function on non-broadcast networks\n  \
    \          (see Sections C.5 and C.6).  On NBMA networks, every\n            attached\
    \ router which is eligible to become Designated\n            Router becomes aware\
    \ of all of its neighbors on the network\n            (either through configuration\
    \ or by some unspecified\n            mechanism).  Each neighbor is labelled with\
    \ the neighbor's\n            Designated Router eligibility.\n            The\
    \ interface state must be at least Waiting for any Hello\n            Packets\
    \ to be sent out the NBMA interface.  Hello Packets\n            are then sent\
    \ directly (as unicasts) to some subset of a\n            router's neighbors.\
    \  Sometimes an Hello Packet is sent\n            periodically on a timer; at\
    \ other times it is sent as a\n            response to a received Hello Packet.\
    \  A router's hello-\n            sending behavior varies depending on whether\
    \ the router\n            itself is eligible to become Designated Router.\n  \
    \          If the router is eligible to become Designated Router, it\n       \
    \     must periodically send Hello Packets to all neighbors that\n           \
    \ are also eligible.  In addition, if the router is itself the\n            Designated\
    \ Router or Backup Designated Router, it must also\n            send periodic\
    \ Hello Packets to all other neighbors.  This\n            means that any two\
    \ eligible routers are always exchanging\n            Hello Packets, which is\
    \ necessary for the correct operation\n            of the Designated Router election\
    \ algorithm.  To minimize\n            the number of Hello Packets sent, the number\
    \ of eligible\n            routers on an NBMA network should be kept small.\n\
    \            If the router is not eligible to become Designated Router,\n    \
    \        it must periodically send Hello Packets to both the\n            Designated\
    \ Router and the Backup Designated Router (if they\n            exist).  It must\
    \ also send an Hello Packet in reply to an\n            Hello Packet received\
    \ from any eligible neighbor (other than\n            the current Designated Router\
    \ and Backup Designated Router).\n            This is needed to establish an initial\
    \ bidirectional\n            relationship with any potential Designated Router.\n\
    \            When sending Hello packets periodically to any neighbor, the\n  \
    \          interval between Hello Packets is determined by the\n            neighbor's\
    \ state.  If the neighbor is in state Down, Hello\n            Packets are sent\
    \ every PollInterval seconds.  Otherwise,\n            Hello Packets are sent\
    \ every HelloInterval seconds.\n"
- title: 10.  The Neighbor Data Structure
  contents:
  - "10.  The Neighbor Data Structure\n    An OSPF router converses with its neighboring\
    \ routers.  Each\n    separate conversation is described by a \"neighbor data\
    \ structure\".\n    Each conversation is bound to a particular OSPF router interface,\n\
    \    and is identified either by the neighboring router's OSPF Router ID\n   \
    \ or by its Neighbor IP address (see below).  Thus if the OSPF router\n    and\
    \ another router have multiple attached networks in common,\n    multiple conversations\
    \ ensue, each described by a unique neighbor\n    data structure.  Each separate\
    \ conversation is loosely referred to\n    in the text as being a separate \"\
    neighbor\".\n    The neighbor data structure contains all information pertinent\
    \ to\n    the forming or formed adjacency between the two neighbors.\n    (However,\
    \ remember that not all neighbors become adjacent.)  An\n    adjacency can be\
    \ viewed as a highly developed conversation between\n    two routers.\n    State\n\
    \        The functional level of the neighbor conversation.  This is\n       \
    \ described in more detail in Section 10.1.\n    Inactivity Timer\n        A single\
    \ shot timer whose firing indicates that no Hello Packet\n        has been seen\
    \ from this neighbor recently.  The length of the\n        timer is RouterDeadInterval\
    \ seconds.\n    Master/Slave\n        When the two neighbors are exchanging databases,\
    \ they form a\n        master/slave relationship.  The master sends the first\
    \ Database\n        Description Packet, and is the only part that is allowed to\n\
    \        retransmit.  The slave can only respond to the master's Database\n  \
    \      Description Packets.  The master/slave relationship is\n        negotiated\
    \ in state ExStart.\n    DD Sequence Number\n        The DD Sequence number of\
    \ the Database Description packet that\n        is currently being sent to the\
    \ neighbor.\n    Last received Database Description packet\n        The initialize(I),\
    \ more (M) and master(MS) bits, Options field,\n        and DD sequence number\
    \ contained in the last Database\n        Description packet received from the\
    \ neighbor. Used to determine\n        whether the next Database Description packet\
    \ received from the\n        neighbor is a duplicate.\n    Neighbor ID\n     \
    \   The OSPF Router ID of the neighboring router.  The Neighbor ID\n        is\
    \ learned when Hello packets are received from the neighbor, or\n        is configured\
    \ if this is a virtual adjacency (see Section C.4).\n    Neighbor Priority\n \
    \       The Router Priority of the neighboring router.  Contained in the\n   \
    \     neighbor's Hello packets, this item is used when selecting the\n       \
    \ Designated Router for the attached network.\n    Neighbor IP address\n     \
    \   The IP address of the neighboring router's interface to the\n        attached\
    \ network.  Used as the Destination IP address when\n        protocol packets\
    \ are sent as unicasts along this adjacency.\n        Also used in router-LSAs\
    \ as the Link ID for the attached network\n        if the neighboring router is\
    \ selected to be Designated Router\n        (see Section 12.4.1).  The Neighbor\
    \ IP address is learned when\n        Hello packets are received from the neighbor.\
    \  For virtual\n        links, the Neighbor IP address is learned during the routing\n\
    \        table build process (see Section 15).\n    Neighbor Options\n       \
    \ The optional OSPF capabilities supported by the neighbor.\n        Learned during\
    \ the Database Exchange process (see Section 10.6).\n        The neighbor's optional\
    \ OSPF capabilities are also listed in its\n        Hello packets.  This enables\
    \ received Hello Packets to be\n        rejected (i.e., neighbor relationships\
    \ will not even start to\n        form) if there is a mismatch in certain crucial\
    \ OSPF\n        capabilities (see Section 10.5).  The optional OSPF capabilities\n\
    \        are documented in Section 4.5.\n    Neighbor's Designated Router\n  \
    \      The neighbor's idea of the Designated Router.  If this is the\n       \
    \ neighbor itself, this is important in the local calculation of\n        the\
    \ Designated Router.  Defined only on broadcast and NBMA\n        networks.\n\
    \    Neighbor's Backup Designated Router\n        The neighbor's idea of the Backup\
    \ Designated Router.  If this is\n        the neighbor itself, this is important\
    \ in the local calculation\n        of the Backup Designated Router.  Defined\
    \ only on broadcast and\n        NBMA networks.\n    The next set of variables\
    \ are lists of LSAs.  These lists describe\n    subsets of the area link-state\
    \ database.  This memo defines five\n    distinct types of LSAs, all of which\
    \ may be present in an area\n    link-state database: router-LSAs, network-LSAs,\
    \ and Type 3 and 4\n    summary-LSAs (all stored in the area data structure),\
    \ and AS-\n    external-LSAs (stored in the global data structure).\n    Link\
    \ state retransmission list\n        The list of LSAs that have been flooded but\
    \ not acknowledged on\n        this adjacency.  These will be retransmitted at\
    \ intervals until\n        they are acknowledged, or until the adjacency is destroyed.\n\
    \    Database summary list\n        The complete list of LSAs that make up the\
    \ area link-state\n        database, at the moment the neighbor goes into Database\
    \ Exchange\n        state.  This list is sent to the neighbor in Database\n  \
    \      Description packets.\n    Link state request list\n        The list of\
    \ LSAs that need to be received from this neighbor in\n        order to synchronize\
    \ the two neighbors' link-state databases.\n        This list is created as Database\
    \ Description packets are\n        received, and is then sent to the neighbor\
    \ in Link State Request\n        packets.  The list is depleted as appropriate\
    \ Link State Update\n        packets are received.\n    10.1.  Neighbor states\n\
    \        The state of a neighbor (really, the state of a conversation\n      \
    \  being held with a neighboring router) is documented in the\n        following\
    \ sections.  The states are listed in order of\n        progressing functionality.\
    \  For example, the inoperative state\n        is listed first, followed by a\
    \ list of intermediate states\n        before the final, fully functional state\
    \ is achieved.  The\n        specification makes use of this ordering by sometimes\
    \ making\n        references such as \"those neighbors/adjacencies in state greater\n\
    \        than X\".  Figures 12 and 13 show the graph of neighbor state\n     \
    \   changes.  The arcs of the graphs are labelled with the event\n        causing\
    \ the state change.  The neighbor events are documented in\n        Section 10.2.\n\
    \        The graph in Figure 12 shows the state changes effected by the\n    \
    \    Hello Protocol.  The Hello Protocol is responsible for neighbor\n       \
    \ acquisition and maintenance, and for ensuring two way\n        communication\
    \ between neighbors.\n        The graph in Figure 13 shows the forming of an adjacency.\
    \  Not\n        every two neighboring routers become adjacent (see Section\n \
    \       10.4).  The adjacency starts to form when the neighbor is in\n       \
    \ state ExStart.  After the two routers discover their\n        master/slave status,\
    \ the state transitions to Exchange.  At this\n        point the neighbor starts\
    \ to be used in the flooding procedure,\n        and the two neighboring routers\
    \ begin synchronizing their\n        databases.  When this synchronization is\
    \ finished, the neighbor\n        is in state Full and we say that the two routers\
    \ are fully\n        adjacent.  At this point the adjacency is listed in LSAs.\n\
    \        For a more detailed description of neighbor state changes,\n        together\
    \ with the additional actions involved in each change,\n        see Section 10.3.\n\
    \        Down\n            This is the initial state of a neighbor conversation.\
    \  It\n            indicates that there has been no recent information received\n\
    \            from the neighbor.  On NBMA networks, Hello packets may\n       \
    \     still be sent to \"Down\" neighbors, although at a reduced\n           \
    \ frequency (see Section 9.5.1).\n                                   +----+\n\
    \                                   |Down|\n                                 \
    \  +----+\n                                     |\\\n                        \
    \             | \\Start\n                                     |  \\      +-------+\n\
    \                             Hello   |   +---->|Attempt|\n                  \
    \          Received |         +-------+\n                                    \
    \ |             |\n                             +----+<-+             |HelloReceived\n\
    \                             |Init|<---------------+\n                      \
    \       +----+<--------+\n                                |           |\n    \
    \                            |2-Way      |1-Way\n                            \
    \    |Received   |Received\n                                |           |\n  \
    \            +-------+         |        +-----+\n              |ExStart|<--------+------->|2-Way|\n\
    \              +-------+                  +-----+\n              Figure 12: Neighbor\
    \ state changes (Hello Protocol)\n                  In addition to the state transitions\
    \ pictured,\n                  Event KillNbr always forces Down State,\n     \
    \             Event InactivityTimer always forces Down State,\n              \
    \    Event LLDown always forces Down State\n                                 \
    \ +-------+\n                                  |ExStart|\n                   \
    \               +-------+\n                                    |\n           \
    \          NegotiationDone|\n                                    +->+--------+\n\
    \                                       |Exchange|\n                         \
    \           +--+--------+\n                                    |\n           \
    \                 Exchange|\n                              Done  |\n         \
    \           +----+          |      +-------+\n                    |Full|<---------+----->|Loading|\n\
    \                    +----+<-+              +-------+\n                      \
    \      |  LoadingDone     |\n                            +------------------+\n\
    \            Figure 13: Neighbor state changes (Database Exchange)\n         \
    \       In addition to the state transitions pictured,\n                Event\
    \ SeqNumberMismatch forces ExStart state,\n                Event BadLSReq forces\
    \ ExStart state,\n                Event 1-Way forces Init state,\n           \
    \     Event KillNbr always forces Down State,\n                Event InactivityTimer\
    \ always forces Down State,\n                Event LLDown always forces Down State,\n\
    \                Event AdjOK? leads to adjacency forming/breaking\n        Attempt\n\
    \            This state is only valid for neighbors attached to NBMA\n       \
    \     networks.  It indicates that no recent information has been\n          \
    \  received from the neighbor, but that a more concerted effort\n            should\
    \ be made to contact the neighbor.  This is done by\n            sending the neighbor\
    \ Hello packets at intervals of\n            HelloInterval (see Section 9.5.1).\n\
    \        Init\n            In this state, an Hello packet has recently been seen\
    \ from\n            the neighbor.  However, bidirectional communication has not\n\
    \            yet been established with the neighbor (i.e., the router\n      \
    \      itself did not appear in the neighbor's Hello packet).  All\n         \
    \   neighbors in this state (or higher) are listed in the Hello\n            packets\
    \ sent from the associated interface.\n        2-Way\n            In this state,\
    \ communication between the two routers is\n            bidirectional.  This has\
    \ been assured by the operation of\n            the Hello Protocol.  This is the\
    \ most advanced state short\n            of beginning adjacency establishment.\
    \  The (Backup)\n            Designated Router is selected from the set of neighbors\
    \ in\n            state 2-Way or greater.\n        ExStart\n            This is\
    \ the first step in creating an adjacency between the\n            two neighboring\
    \ routers.  The goal of this step is to decide\n            which router is the\
    \ master, and to decide upon the initial\n            DD sequence number.  Neighbor\
    \ conversations in this state or\n            greater are called adjacencies.\n\
    \        Exchange\n            In this state the router is describing its entire\
    \ link state\n            database by sending Database Description packets to\
    \ the\n            neighbor.  Each Database Description Packet has a DD\n    \
    \        sequence number, and is explicitly acknowledged.  Only one\n        \
    \    Database Description Packet is allowed outstanding at any\n            one\
    \ time.  In this state, Link State Request Packets may\n            also be sent\
    \ asking for the neighbor's more recent LSAs.\n            All adjacencies in\
    \ Exchange state or greater are used by the\n            flooding procedure. \
    \ In fact, these adjacencies are fully\n            capable of transmitting and\
    \ receiving all types of OSPF\n            routing protocol packets.\n       \
    \ Loading\n            In this state, Link State Request packets are sent to the\n\
    \            neighbor asking for the more recent LSAs that have been\n       \
    \     discovered (but not yet received) in the Exchange state.\n        Full\n\
    \            In this state, the neighboring routers are fully adjacent.\n    \
    \        These adjacencies will now appear in router-LSAs and\n            network-LSAs.\n\
    \    10.2.  Events causing neighbor state changes\n        State changes can be\
    \ effected by a number of events.  These\n        events are shown in the labels\
    \ of the arcs in Figures 12 and 13.\n        The label definitions are as follows:\n\
    \        HelloReceived\n            An Hello packet has been received from the\
    \ neighbor.\n        Start\n            This is an indication that Hello Packets\
    \ should now be sent\n            to the neighbor at intervals of HelloInterval\
    \ seconds.  This\n            event is generated only for neighbors associated\
    \ with NBMA\n            networks.\n        2-WayReceived\n            Bidirectional\
    \ communication has been realized between the\n            two neighboring routers.\
    \  This is indicated by the router\n            seeing itself in the neighbor's\
    \ Hello packet.\n        NegotiationDone\n            The Master/Slave relationship\
    \ has been negotiated, and DD\n            sequence numbers have been exchanged.\
    \  This signals the\n            start of the sending/receiving of Database Description\n\
    \            packets.  For more information on the generation of this\n      \
    \      event, consult Section 10.8.\n        ExchangeDone\n            Both routers\
    \ have successfully transmitted a full sequence\n            of Database Description\
    \ packets.  Each router now knows what\n            parts of its link state database\
    \ are out of date.  For more\n            information on the generation of this\
    \ event, consult Section\n            10.8.\n        BadLSReq\n            A Link\
    \ State Request has been received for an LSA not\n            contained in the\
    \ database.  This indicates an error in the\n            Database Exchange process.\n\
    \        Loading Done\n            Link State Updates have been received for all\
    \ out-of-date\n            portions of the database.  This is indicated by the\
    \ Link\n            state request list becoming empty after the Database\n   \
    \         Exchange process has completed.\n        AdjOK?\n            A decision\
    \ must be made as to whether an adjacency should be\n            established/maintained\
    \ with the neighbor.  This event will\n            start some adjacencies forming,\
    \ and destroy others.\n        The following events cause well developed neighbors\
    \ to revert to\n        lesser states.  Unlike the above events, these events\
    \ may occur\n        when the neighbor conversation is in any of a number of states.\n\
    \        SeqNumberMismatch\n            A Database Description packet has been\
    \ received that either\n            a) has an unexpected DD sequence number, b)\
    \ unexpectedly has\n            the Init bit set or c) has an Options field differing\
    \ from\n            the last Options field received in a Database Description\n\
    \            packet.  Any of these conditions indicate that some error\n     \
    \       has occurred during adjacency establishment.\n        1-Way\n        \
    \    An Hello packet has been received from the neighbor, in\n            which\
    \ the router is not mentioned.  This indicates that\n            communication\
    \ with the neighbor is not bidirectional.\n        KillNbr\n            This \
    \ is  an  indication that  all  communication  with  the\n            neighbor\
    \  is now  impossible,  forcing  the  neighbor  to\n            revert  to  Down\
    \  state.\n        InactivityTimer\n            The inactivity Timer has fired.\
    \  This means that no Hello\n            packets have been seen recently from\
    \ the neighbor.  The\n            neighbor reverts to Down state.\n        LLDown\n\
    \            This is an indication from the lower level protocols that\n     \
    \       the neighbor is now unreachable.  For example, on an X.25\n          \
    \  network this could be indicated by an X.25 clear indication\n            with\
    \ appropriate cause and diagnostic fields.  This event\n            forces the\
    \ neighbor into Down state.\n    10.3.  The Neighbor state machine\n        A\
    \ detailed description of the neighbor state changes follows.\n        Each state\
    \ change is invoked by an event (Section 10.2).  This\n        event may produce\
    \ different effects, depending on the current\n        state of the neighbor.\
    \  For this reason, the state machine below\n        is organized by current neighbor\
    \ state and received event.  Each\n        entry in the state machine describes\
    \ the resulting new neighbor\n        state and the required set of additional\
    \ actions.\n        When a neighbor's state changes, it may be necessary to rerun\n\
    \        the Designated Router election algorithm.  This is determined by\n  \
    \      whether the interface NeighborChange event is generated (see\n        Section\
    \ 9.2).  Also, if the Interface is in DR state (the router\n        is itself\
    \ Designated Router), changes in neighbor state may\n        cause a new network-LSA\
    \ to be originated (see Section 12.4).\n        When the neighbor state machine\
    \ needs to invoke the interface\n        state machine, it should be done as a\
    \ scheduled task (see\n        Section 4.4).  This simplifies things, by ensuring\
    \ that neither\n        state machine will be executed recursively.\n        \
    \ State(s):  Down\n            Event:  Start\n        New state:  Attempt\n  \
    \         Action:  Send an Hello Packet to the neighbor (this neighbor\n     \
    \               is always associated with an NBMA network) and start\n       \
    \             the Inactivity Timer for the neighbor.  The timer's\n          \
    \          later firing would indicate that communication with\n             \
    \       the neighbor was not attained.\n         State(s):  Attempt\n        \
    \    Event:  HelloReceived\n        New state:  Init\n           Action:  Restart\
    \ the Inactivity Timer for the neighbor, since\n                    the neighbor\
    \ has now been heard from.\n         State(s):  Down\n            Event:  HelloReceived\n\
    \        New state:  Init\n           Action:  Start the Inactivity Timer for\
    \ the neighbor.  The\n                    timer's later firing would indicate\
    \ that the\n                    neighbor is dead.\n         State(s):  Init or\
    \ greater\n            Event:  HelloReceived\n        New state:  No state change.\n\
    \           Action:  Restart the Inactivity Timer for the neighbor, since\n  \
    \                  the neighbor has again been heard from.\n         State(s):\
    \  Init\n            Event:  2-WayReceived\n        New state:  Depends upon action\
    \ routine.\n           Action:  Determine whether an adjacency should be established\n\
    \                    with the neighbor (see Section 10.4).  If not, the\n    \
    \                new neighbor state is 2-Way.\n                    Otherwise (an\
    \ adjacency should be established) the\n                    neighbor state transitions\
    \ to ExStart.  Upon\n                    entering this state, the router increments\
    \ the DD\n                    sequence number in the neighbor data structure.\
    \  If\n                    this is the first time that an adjacency has been\n\
    \                    attempted, the DD sequence number should be assigned\n  \
    \                  some unique value (like the time of day clock).  It\n     \
    \               then declares itself master (sets the master/slave\n         \
    \           bit to master), and starts sending Database\n                    Description\
    \ Packets, with the initialize (I), more\n                    (M) and master (MS)\
    \ bits set.  This Database\n                    Description Packet should be otherwise\
    \ empty.  This\n                    Database Description Packet should be retransmitted\n\
    \                    at intervals of RxmtInterval until the next state is\n  \
    \                  entered (see Section 10.8).\n         State(s):  ExStart\n\
    \            Event:  NegotiationDone\n        New state:  Exchange\n         \
    \  Action:  The router must list the contents of its entire area\n           \
    \         link state database in the neighbor Database summary\n             \
    \       list.  The area link state database consists of the\n                \
    \    router-LSAs, network-LSAs and summary-LSAs contained\n                  \
    \  in the area structure, along with the AS-external-\n                    LSAs\
    \ contained in the global structure.  AS-\n                    external-LSAs are\
    \ omitted from a virtual neighbor's\n                    Database summary list.\
    \  AS-external-LSAs are omitted\n                    from the Database summary\
    \ list if the area has been\n                    configured as a stub (see Section\
    \ 3.6).  LSAs whose\n                    age is equal to MaxAge are instead added\
    \ to the\n                    neighbor's Link state retransmission list.  A\n\
    \                    summary of the Database summary list will be sent to\n  \
    \                  the neighbor in Database Description packets.  Each\n     \
    \               Database Description Packet has a DD sequence\n              \
    \      number, and is explicitly acknowledged.  Only one\n                   \
    \ Database Description Packet is allowed outstanding\n                    at any\
    \ one time.  For more detail on the sending and\n                    receiving\
    \ of Database Description packets, see\n                    Sections 10.8 and\
    \ 10.6.\n         State(s):  Exchange\n            Event:  ExchangeDone\n    \
    \    New state:  Depends upon action routine.\n           Action:  If the neighbor\
    \ Link state request list is empty,\n                    the new neighbor state\
    \ is Full.  No other action is\n                    required.  This is an adjacency's\
    \ final state.\n                    Otherwise, the new neighbor state is Loading.\
    \  Start\n                    (or continue) sending Link State Request packets\
    \ to\n                    the neighbor (see Section 10.9).  These are requests\n\
    \                    for the neighbor's more recent LSAs (which were\n       \
    \             discovered but not yet received in the Exchange\n              \
    \      state).  These LSAs are listed in the Link state\n                    request\
    \ list associated with the neighbor.\n         State(s):  Loading\n          \
    \  Event:  Loading Done\n        New state:  Full\n           Action:  No action\
    \ required.  This is an adjacency's final\n                    state.\n      \
    \   State(s):  2-Way\n            Event:  AdjOK?\n        New state:  Depends\
    \ upon action routine.\n           Action:  Determine whether an adjacency should\
    \ be formed with\n                    the neighboring router (see Section 10.4).\
    \  If not,\n                    the neighbor state remains at 2-Way.  Otherwise,\n\
    \                    transition the neighbor state to ExStart and perform\n  \
    \                  the actions associated with the above state machine\n     \
    \               entry for state Init and event 2-WayReceived.\n         State(s):\
    \  ExStart or greater\n            Event:  AdjOK?\n        New state:  Depends\
    \ upon action routine.\n           Action:  Determine whether the neighboring\
    \ router should\n                    still be adjacent.  If yes, there is no state\
    \ change\n                    and no further action is necessary.\n          \
    \          Otherwise, the (possibly partially formed) adjacency\n            \
    \        must be destroyed.  The neighbor state transitions\n                \
    \    to 2-Way.  The Link state retransmission list,\n                    Database\
    \ summary list and Link state request list\n                    are cleared of\
    \ LSAs.\n         State(s):  Exchange or greater\n            Event:  SeqNumberMismatch\n\
    \        New state:  ExStart\n           Action:  The (possibly partially formed)\
    \ adjacency is torn\n                    down, and then an attempt is made at\n\
    \                    reestablishment.  The neighbor state first\n            \
    \        transitions to ExStart.  The Link state\n                    retransmission\
    \ list, Database summary list and Link\n                    state request list\
    \ are cleared of LSAs.  Then the\n                    router increments the DD\
    \ sequence number in the\n                    neighbor data structure, declares\
    \ itself master\n                    (sets the master/slave bit to master), and\
    \ starts\n                    sending Database Description Packets, with the\n\
    \                    initialize (I), more (M) and master (MS) bits set.\n    \
    \                This Database Description Packet should be otherwise\n      \
    \              empty (see Section 10.8).\n         State(s):  Exchange or greater\n\
    \            Event:  BadLSReq\n        New state:  ExStart\n           Action:\
    \  The action for event BadLSReq is exactly the same as\n                    for\
    \ the neighbor event SeqNumberMismatch.  The\n                    (possibly partially\
    \ formed) adjacency is torn down,\n                    and then an attempt is\
    \ made at reestablishment.  For\n                    more information, see the\
    \ neighbor state machine\n                    entry that is invoked when event\
    \ SeqNumberMismatch\n                    is generated in state Exchange or greater.\n\
    \         State(s):  Any state\n            Event:  KillNbr\n        New state:\
    \  Down\n           Action:  The Link state retransmission list, Database summary\n\
    \                    list and Link state request list are cleared of\n       \
    \             LSAs.  Also, the Inactivity Timer is disabled.\n         State(s):\
    \  Any state\n            Event:  LLDown\n        New state:  Down\n         \
    \  Action:  The Link state retransmission list, Database summary\n           \
    \         list and Link state request list are cleared of\n                  \
    \  LSAs.  Also, the Inactivity Timer is disabled.\n         State(s):  Any state\n\
    \            Event:  InactivityTimer\n        New state:  Down\n           Action:\
    \  The Link state retransmission list, Database summary\n                    list\
    \ and Link state request list are cleared of\n                    LSAs.\n    \
    \     State(s):  2-Way or greater\n            Event:  1-WayReceived\n       \
    \ New state:  Init\n           Action:  The Link state retransmission list, Database\
    \ summary\n                    list and Link state request list are cleared of\n\
    \                    LSAs.\n         State(s):  2-Way or greater\n           \
    \ Event:  2-WayReceived\n        New state:  No state change.\n           Action:\
    \  No action required.\n         State(s):  Init\n            Event:  1-WayReceived\n\
    \        New state:  No state change.\n           Action:  No action required.\n\
    \    10.4.  Whether to become adjacent\n        Adjacencies are established with\
    \ some subset of the router's\n        neighbors.  Routers connected by point-to-point\
    \ networks,\n        Point-to-MultiPoint networks and virtual links always become\n\
    \        adjacent.  On broadcast and NBMA networks, all routers become\n     \
    \   adjacent to both the Designated Router and the Backup Designated\n       \
    \ Router.\n        The adjacency-forming decision occurs in two places in the\n\
    \        neighbor state machine.  First, when bidirectional communication\n  \
    \      is initially established with the neighbor, and secondly, when\n      \
    \  the identity of the attached network's (Backup) Designated\n        Router\
    \ changes.  If the decision is made to not attempt an\n        adjacency, the\
    \ state of the neighbor communication stops at 2-\n        Way.\n        An adjacency\
    \ should be established with a bidirectional neighbor\n        when at least one\
    \ of the following conditions holds:\n        o   The underlying network type\
    \ is point-to-point\n        o   The underlying network type is Point-to-MultiPoint\n\
    \        o   The underlying network type is virtual link\n        o   The router\
    \ itself is the Designated Router\n        o   The router itself is the Backup\
    \ Designated Router\n        o   The neighboring router is the Designated Router\n\
    \        o   The neighboring router is the Backup Designated Router\n    10.5.\
    \  Receiving Hello Packets\n        This section explains the detailed processing\
    \ of a received\n        Hello Packet.  (See Section A.3.2 for the format of Hello\n\
    \        packets.)  The generic input processing of OSPF packets will\n      \
    \  have checked the validity of the IP header and the OSPF packet\n        header.\
    \  Next, the values of the Network Mask, HelloInterval,\n        and RouterDeadInterval\
    \ fields in the received Hello packet must\n        be checked against the values\
    \ configured for the receiving\n        interface.  Any mismatch causes processing\
    \ to stop and the\n        packet to be dropped.  In other words, the above fields\
    \ are\n        really describing the attached network's configuration. However,\n\
    \        there is one exception to the above rule: on point-to-point\n       \
    \ networks and on virtual links, the Network Mask in the received\n        Hello\
    \ Packet should be ignored.\n        The receiving interface attaches to a single\
    \ OSPF area (this\n        could be the backbone).  The setting of the E-bit found\
    \ in the\n        Hello Packet's Options field must match this area's\n      \
    \  ExternalRoutingCapability.  If AS-external-LSAs are not flooded\n        into/throughout\
    \ the area (i.e, the area is a \"stub\") the E-bit\n        must be clear in received\
    \ Hello Packets, otherwise the E-bit\n        must be set.  A mismatch causes\
    \ processing to stop and the\n        packet to be dropped.  The setting of the\
    \ rest of the bits in\n        the Hello Packet's Options field should be ignored.\n\
    \        At this point, an attempt is made to match the source of the\n      \
    \  Hello Packet to one of the receiving interface's neighbors.  If\n        the\
    \ receiving interface connects to a broadcast, Point-to-\n        MultiPoint or\
    \ NBMA network the source is identified by the IP\n        source address found\
    \ in the Hello's IP header.  If the receiving\n        interface connects to a\
    \ point-to-point link or a virtual link,\n        the source is identified by\
    \ the Router ID found in the Hello's\n        OSPF packet header.  The interface's\
    \ current list of neighbors\n        is contained in the interface's data structure.\
    \  If a matching\n        neighbor structure cannot be found, (i.e., this is the\
    \ first\n        time the neighbor has been detected), one is created.  The\n\
    \        initial state of a newly created neighbor is set to Down.\n        When\
    \ receiving an Hello Packet from a neighbor on a broadcast,\n        Point-to-MultiPoint\
    \ or NBMA network, set the neighbor\n        structure's Neighbor ID equal to\
    \ the Router ID found in the\n        packet's OSPF header.  For these network\
    \ types, the neighbor\n        structure's Router Priority field, Neighbor's Designated\
    \ Router\n        field, and Neighbor's Backup Designated Router field are also\n\
    \        set equal to the corresponding fields found in the received\n       \
    \ Hello Packet; changes in these fields should be noted for\n        possible\
    \ use in the steps below.  When receiving an Hello on a\n        point-to-point\
    \ network (but not on a virtual link) set the\n        neighbor structure's Neighbor\
    \ IP address to the packet's IP\n        source address.\n        Now the rest\
    \ of the Hello Packet is examined, generating events\n        to be given to the\
    \ neighbor and interface state machines.  These\n        state machines are specified\
    \ either to be executed or scheduled\n        (see Section 4.4).  For example,\
    \ by specifying below that the\n        neighbor state machine be executed in\
    \ line, several neighbor\n        state transitions may be effected by a single\
    \ received Hello:\n        o   Each Hello Packet causes the neighbor state machine\
    \ to be\n            executed with the event HelloReceived.\n        o   Then\
    \ the list of neighbors contained in the Hello Packet is\n            examined.\
    \  If the router itself appears in this list, the\n            neighbor state\
    \ machine should be executed with the event 2-\n            WayReceived.  Otherwise,\
    \ the neighbor state machine should\n            be executed with the event 1-WayReceived,\
    \ and the processing\n            of the packet stops.\n        o   Next, if a\
    \ change in the neighbor's Router Priority field\n            was noted, the receiving\
    \ interface's state machine is\n            scheduled with the event NeighborChange.\n\
    \        o   If the neighbor is both declaring itself to be Designated\n     \
    \       Router (Hello Packet's Designated Router field = Neighbor IP\n       \
    \     address) and the Backup Designated Router field in the\n            packet\
    \ is equal to 0.0.0.0 and the receiving interface is in\n            state Waiting,\
    \ the receiving interface's state machine is\n            scheduled with the event\
    \ BackupSeen.  Otherwise, if the\n            neighbor is declaring itself to\
    \ be Designated Router and it\n            had not previously, or the neighbor\
    \ is not declaring itself\n            Designated Router where it had previously,\
    \ the receiving\n            interface's state machine is scheduled with the event\n\
    \            NeighborChange.\n        o   If the neighbor is declaring itself\
    \ to be Backup Designated\n            Router (Hello Packet's Backup Designated\
    \ Router field =\n            Neighbor IP address) and the receiving interface\
    \ is in state\n            Waiting, the receiving interface's state machine is\n\
    \            scheduled with the event BackupSeen.  Otherwise, if the\n       \
    \     neighbor is declaring itself to be Backup Designated Router\n          \
    \  and it had not previously, or the neighbor is not declaring\n            itself\
    \ Backup Designated Router where it had previously, the\n            receiving\
    \ interface's state machine is scheduled with the\n            event NeighborChange.\n\
    \        On NBMA networks, receipt of an Hello Packet may also cause an\n    \
    \    Hello Packet to be sent back to the neighbor in response. See\n        Section\
    \ 9.5.1 for more details.\n    10.6.  Receiving Database Description Packets\n\
    \        This section explains the detailed processing of a received\n       \
    \ Database Description Packet.  The incoming Database Description\n        Packet\
    \ has already been associated with a neighbor and receiving\n        interface\
    \ by the generic input packet processing (Section 8.2).\n        Whether the Database\
    \ Description packet should be accepted, and\n        if so, how it should be\
    \ further processed depends upon the\n        neighbor state.\n        If a Database\
    \ Description packet is accepted, the following\n        packet fields should\
    \ be saved in the corresponding neighbor data\n        structure under \"last\
    \ received Database Description packet\":\n        the packet's initialize(I),\
    \ more (M) and master(MS) bits,\n        Options field, and DD sequence number.\
    \ If these fields are set\n        identically in two consecutive Database Description\
    \ packets\n        received from the neighbor, the second Database Description\n\
    \        packet is considered to be a \"duplicate\" in the processing\n      \
    \  described below.\n        If the Interface MTU field in the Database Description\
    \ packet\n        indicates an IP datagram size that is larger than the router\
    \ can\n        accept on the receiving interface without fragmentation, the\n\
    \        Database Description packet is rejected.  Otherwise, if the\n       \
    \ neighbor state is:\n        Down\n            The packet should be rejected.\n\
    \        Attempt\n            The packet should be rejected.\n        Init\n \
    \           The neighbor state machine should be executed with the event\n   \
    \         2-WayReceived.  This causes an immediate state change to\n         \
    \   either state 2-Way or state ExStart. If the new state is\n            ExStart,\
    \ the processing of the current packet should then\n            continue in this\
    \ new state by falling through to case\n            ExStart below.\n        2-Way\n\
    \            The packet should be ignored.  Database Description Packets\n   \
    \         are used only for the purpose of bringing up adjacencies.[7]\n     \
    \   ExStart\n            If the received packet matches one of the following cases,\n\
    \            then the neighbor state machine should be executed with the\n   \
    \         event NegotiationDone (causing the state to transition to\n        \
    \    Exchange), the packet's Options field should be recorded in\n           \
    \ the neighbor structure's Neighbor Options field and the\n            packet\
    \ should be accepted as next in sequence and processed\n            further (see\
    \ below).  Otherwise, the packet should be\n            ignored.\n           \
    \ o   The initialize(I), more (M) and master(MS) bits are set,\n             \
    \   the contents of the packet are empty, and the neighbor's\n               \
    \ Router ID is larger than the router's own.  In this case\n                the\
    \ router is now Slave.  Set the master/slave bit to\n                slave, and\
    \ set the neighbor data structure's DD sequence\n                number to that\
    \ specified by the master.\n            o   The initialize(I) and master(MS) bits\
    \ are off, the\n                packet's DD sequence number equals the neighbor\
    \ data\n                structure's DD sequence number (indicating\n         \
    \       acknowledgment) and the neighbor's Router ID is smaller\n            \
    \    than the router's own.  In this case the router is\n                Master.\n\
    \        Exchange\n            Duplicate Database Description packets are discarded\
    \ by the\n            master, and cause the slave to retransmit the last Database\n\
    \            Description packet that it had sent. Otherwise (the packet\n    \
    \        is not a duplicate):\n            o   If the state of the MS-bit is inconsistent\
    \ with the\n                master/slave state of the connection, generate the\n\
    \                neighbor event SeqNumberMismatch and stop processing the\n  \
    \              packet.\n            o   If the initialize(I) bit is set, generate\
    \ the neighbor\n                event SeqNumberMismatch and stop processing the\
    \ packet.\n            o   If the packet's Options field indicates a different\
    \ set\n                of optional OSPF capabilities than were previously\n  \
    \              received from the neighbor (recorded in the Neighbor\n        \
    \        Options field of the neighbor structure), generate the\n            \
    \    neighbor event SeqNumberMismatch and stop processing the\n              \
    \  packet.\n            o   Database Description packets must be processed in\n\
    \                sequence, as indicated by the packets' DD sequence\n        \
    \        numbers. If the router is master, the next packet\n                received\
    \ should have DD sequence number equal to the DD\n                sequence number\
    \ in the neighbor data structure. If the\n                router is slave, the\
    \ next packet received should have DD\n                sequence number equal to\
    \ one more than the DD sequence\n                number stored in the neighbor\
    \ data structure. In either\n                case, if the packet is the next in\
    \ sequence it should be\n                accepted and its contents processed as\
    \ specified below.\n            o   Else, generate the neighbor event SeqNumberMismatch\
    \ and\n                stop processing the packet.\n        Loading or Full\n\
    \            In this state, the router has sent and received an entire\n     \
    \       sequence of Database Description Packets.  The only packets\n        \
    \    received should be duplicates (see above).  In particular,\n            the\
    \ packet's Options field should match the set of optional\n            OSPF capabilities\
    \ previously indicated by the neighbor\n            (stored in the neighbor structure's\
    \ Neighbor Options field).\n            Any other packets received, including\
    \ the reception of a\n            packet with the Initialize(I) bit set, should\
    \ generate the\n            neighbor event SeqNumberMismatch.[8] Duplicates should\
    \ be\n            discarded by the master.  The slave must respond to\n      \
    \      duplicates by repeating the last Database Description packet\n        \
    \    that it had sent.\n        When the router accepts a received Database Description\
    \ Packet\n        as the next in sequence the packet contents are processed as\n\
    \        follows.  For each LSA listed, the LSA's LS type is checked for\n   \
    \     validity.  If the LS type is unknown (e.g., not one of the LS\n        types\
    \ 1-5 defined by this specification), or if this is an AS-\n        external-LSA\
    \ (LS type = 5) and the neighbor is associated with a\n        stub area, generate\
    \ the neighbor event SeqNumberMismatch and\n        stop processing the packet.\
    \  Otherwise, the router looks up the\n        LSA in its database to see whether\
    \ it also has an instance of\n        the LSA.  If it does not, or if the database\
    \ copy is less recent\n        (see Section 13.1), the LSA is put on the Link\
    \ state request\n        list so that it can be requested (immediately or at some\
    \ later\n        time) in Link State Request Packets.\n        When the router\
    \ accepts a received Database Description Packet\n        as the next in sequence,\
    \ it also performs the following actions,\n        depending on whether it is\
    \ master or slave:\n        Master\n            Increments the DD sequence number\
    \ in the neighbor data\n            structure.  If the router has already sent\
    \ its entire\n            sequence of Database Description Packets, and the just\n\
    \            accepted packet has the more bit (M) set to 0, the neighbor\n   \
    \         event ExchangeDone is generated.  Otherwise, it should send\n      \
    \      a new Database Description to the slave.\n        Slave\n            Sets\
    \ the DD sequence number in the neighbor data structure\n            to the DD\
    \ sequence number appearing in the received packet.\n            The slave must\
    \ send a Database Description Packet in reply.\n            If the received packet\
    \ has the more bit (M) set to 0, and\n            the packet to be sent by the\
    \ slave will also have the M-bit\n            set to 0, the neighbor event ExchangeDone\
    \ is generated.\n            Note that the slave always generates this event before\
    \ the\n            master.\n    10.7.  Receiving Link State Request Packets\n\
    \        This section explains the detailed processing of received Link\n    \
    \    State Request packets.  Received Link State Request Packets\n        specify\
    \ a list of LSAs that the neighbor wishes to receive.\n        Link State Request\
    \ Packets should be accepted when the neighbor\n        is in states Exchange,\
    \ Loading, or Full.  In all other states\n        Link State Request Packets should\
    \ be ignored.\n        Each LSA specified in the Link State Request packet should\
    \ be\n        located in the router's database, and copied into Link State\n \
    \       Update packets for transmission to the neighbor.  These LSAs\n       \
    \ should NOT be placed on the Link state retransmission list for\n        the\
    \ neighbor.  If an LSA cannot be found in the database,\n        something has\
    \ gone wrong with the Database Exchange process, and\n        neighbor event BadLSReq\
    \ should be generated.\n    10.8.  Sending Database Description Packets\n    \
    \    This section describes how Database Description Packets are sent\n      \
    \  to a neighbor. The Database Description packet's Interface MTU\n        field\
    \ is set to the size of the largest IP datagram that can be\n        sent out\
    \ the sending interface, without fragmentation.  Common\n        MTUs in use in\
    \ the Internet can be found in Table 7-1 of\n        [Ref22]. Interface MTU should\
    \ be set to 0 in Database\n        Description packets sent over virtual links.\n\
    \        The router's optional OSPF capabilities (see Section 4.5) are\n     \
    \   transmitted to the neighbor in the Options field of the Database\n       \
    \ Description packet.  The router should maintain the same set of\n        optional\
    \ capabilities throughout the Database Exchange and\n        flooding procedures.\
    \  If for some reason the router's optional\n        capabilities change, the\
    \ Database Exchange procedure should be\n        restarted by reverting to neighbor\
    \ state ExStart.  One optional\n        capability is defined in this specification\
    \ (see Sections 4.5\n        and A.2). The E-bit should be set if and only if\
    \ the attached\n        network belongs to a non-stub area. Unrecognized bits\
    \ in the\n        Options field should be set to zero.\n        The sending of\
    \ Database Description packets depends on the\n        neighbor's state.  In state\
    \ ExStart the router sends empty\n        Database Description packets, with the\
    \ initialize (I), more (M)\n        and master (MS) bits set.  These packets are\
    \ retransmitted every\n        RxmtInterval seconds.\n        In state Exchange\
    \ the Database Description Packets actually\n        contain summaries of the\
    \ link state information contained in the\n        router's database.  Each LSA\
    \ in the area's link-state database\n        (at the time the neighbor transitions\
    \ into Exchange state) is\n        listed in the neighbor Database summary list.\
    \  Each new Database\n        Description Packet copies its DD sequence number\
    \ from the\n        neighbor data structure and then describes the current top\
    \ of\n        the Database summary list.  Items are removed from the Database\n\
    \        summary list when the previous packet is acknowledged.\n        In state\
    \ Exchange, the determination of when to send a Database\n        Description\
    \ packet depends on whether the router is master or\n        slave:\n        Master\n\
    \            Database Description packets are sent when either a) the\n      \
    \      slave acknowledges the previous Database Description packet\n         \
    \   by echoing the DD sequence number or b) RxmtInterval seconds\n           \
    \ elapse without an acknowledgment, in which case the previous\n            Database\
    \ Description packet is retransmitted.\n        Slave\n            Database Description\
    \ packets are sent only in response to\n            Database Description packets\
    \ received from the master.  If\n            the Database Description packet received\
    \ from the master is\n            new, a new Database Description packet is sent,\
    \ otherwise\n            the previous Database Description packet is resent.\n\
    \        In states Loading and Full the slave must resend its last\n        Database\
    \ Description packet in response to duplicate Database\n        Description packets\
    \ received from the master.  For this reason\n        the slave must wait RouterDeadInterval\
    \ seconds before freeing\n        the last Database Description packet.  Reception\
    \ of a Database\n        Description packet from the master after this interval\
    \ will\n        generate a SeqNumberMismatch neighbor event.\n    10.9.  Sending\
    \ Link State Request Packets\n        In neighbor states Exchange or Loading,\
    \ the Link state request\n        list contains a list of those LSAs that need\
    \ to be obtained from\n        the neighbor.  To request these LSAs, a router\
    \ sends the\n        neighbor the beginning of the Link state request list, packaged\n\
    \        in a Link State Request packet.\n        When the neighbor responds to\
    \ these requests with the proper\n        Link State Update packet(s), the Link\
    \ state request list is\n        truncated and a new Link State Request packet\
    \ is sent.  This\n        process continues until the Link state request list\
    \ becomes\n        empty. LSAs on the Link state request list that have been\n\
    \        requested, but not yet received, are packaged into Link State\n     \
    \   Request packets for retransmission at intervals of RxmtInterval.\n       \
    \ There should be at most one Link State Request packet\n        outstanding at\
    \ any one time.\n        When the Link state request list becomes empty, and the\
    \ neighbor\n        state is Loading (i.e., a complete sequence of Database\n\
    \        Description packets has been sent to and received from the\n        neighbor),\
    \ the Loading Done neighbor event is generated.\n    10.10.  An Example\n    \
    \    Figure 14 shows an example of an adjacency forming.  Routers RT1\n      \
    \  and RT2 are both connected to a broadcast network.  It is\n        assumed\
    \ that RT2 is the Designated Router for the network, and\n        that RT2 has\
    \ a higher Router ID than Router RT1.\n        The neighbor state changes realized\
    \ by each router are listed on\n        the sides of the figure.\n        At the\
    \ beginning of Figure 14, Router RT1's interface to the\n        network becomes\
    \ operational.  It begins sending Hello Packets,\n        although it doesn't\
    \ know the identity of the Designated Router\n        or of any other neighboring\
    \ routers.  Router RT2 hears this\n        hello (moving the neighbor to Init\
    \ state), and in its next Hello\n        Packet indicates that it is itself the\
    \ Designated Router and\n        that it has heard Hello Packets from RT1.  This\
    \ in turn causes\n        RT1 to go to state ExStart, as it starts to bring up\
    \ the\n        adjacency.\n        RT1 begins by asserting itself as the master.\
    \  When it sees that\n        RT2 is indeed the master (because of RT2's higher\
    \ Router ID),\n        RT1 transitions to slave state and adopts its neighbor's\
    \ DD\n        sequence number.  Database Description packets are then\n      \
    \  exchanged, with polls coming from the master (RT2) and responses\n        from\
    \ the slave (RT1).  This sequence of Database Description\n            +---+ \
    \                                        +---+\n            |RT1|            \
    \                             |RT2|\n            +---+                       \
    \                  +---+\n            Down                                   \
    \       Down\n                            Hello(DR=0,seen=0)\n               \
    \        ------------------------------>\n                         Hello (DR=RT2,seen=RT1,...)\
    \      Init\n                       <------------------------------\n        \
    \    ExStart        D-D (Seq=x,I,M,Master)\n                       ------------------------------>\n\
    \                           D-D (Seq=y,I,M,Master)         ExStart\n         \
    \              <------------------------------\n            Exchange       D-D\
    \ (Seq=y,M,Slave)\n                       ------------------------------>\n  \
    \                         D-D (Seq=y+1,M,Master)         Exchange\n          \
    \             <------------------------------\n                           D-D\
    \ (Seq=y+1,M,Slave)\n                       ------------------------------>\n\
    \                                     ...\n                                  \
    \   ...\n                                     ...\n                          \
    \ D-D (Seq=y+n, Master)\n                       <------------------------------\n\
    \                           D-D (Seq=y+n, Slave)\n             Loading   ------------------------------>\n\
    \                                 LS Request                Full\n           \
    \            ------------------------------>\n                               \
    \  LS Update\n                       <------------------------------\n       \
    \                          LS Request\n                       ------------------------------>\n\
    \                                 LS Update\n                       <------------------------------\n\
    \             Full\n                   Figure 14: An adjacency bring-up example\n\
    \        Packets ends when both the poll and associated response has the\n   \
    \     M-bit off.\n        In this example, it is assumed that RT2 has a completely\
    \ up to\n        date database.  In that case, RT2 goes immediately into Full\n\
    \        state.  RT1 will go into Full state after updating the necessary\n  \
    \      parts of its database.  This is done by sending Link State\n        Request\
    \ Packets, and receiving Link State Update Packets in\n        response.  Note\
    \ that, while RT1 has waited until a complete set\n        of Database Description\
    \ Packets has been received (from RT2)\n        before sending any Link State\
    \ Request Packets, this need not be\n        the case.  RT1 could have interleaved\
    \ the sending of Link State\n        Request Packets with the reception of Database\
    \ Description\n        Packets.\n"
- title: 11.  The Routing Table Structure
  contents:
  - "11.  The Routing Table Structure\n    The routing table data structure contains\
    \ all the information\n    necessary to forward an IP data packet toward its destination.\
    \  Each\n    routing table entry describes the collection of best paths to a\n\
    \    particular destination.  When forwarding an IP data packet, the\n    routing\
    \ table entry providing the best match for the packet's IP\n    destination is\
    \ located.  The matching routing table entry then\n    provides the next hop towards\
    \ the packet's destination.  OSPF also\n    provides for the existence of a default\
    \ route (Destination ID =\n    DefaultDestination, Address Mask =  0x00000000).\
    \  When the default\n    route exists, it matches all IP destinations (although\
    \ any other\n    matching entry is a better match).  Finding the routing table\
    \ entry\n    that best matches an IP destination is further described in Section\n\
    \    11.1.\n    There is a single routing table in each router.  Two sample routing\n\
    \    tables are described in Sections 11.2 and 11.3.  The building of the\n  \
    \  routing table is discussed in Section 16.\n    The rest of this section defines\
    \ the fields found in a routing table\n    entry.  The first set of fields describes\
    \ the routing table entry's\n    destination.\n    Destination Type\n        Destination\
    \ type is either \"network\" or \"router\". Only network\n        entries are\
    \ actually used when forwarding IP data traffic.\n        Router routing table\
    \ entries are used solely as intermediate\n        steps in the routing table\
    \ build process.\n        A network is a range of IP addresses, to which IP data\
    \ traffic\n        may be forwarded.  This includes IP networks (class A, B, or\
    \ C),\n        IP subnets, IP supernets and single IP hosts.  The default route\n\
    \        also falls into this category.\n        Router entries are kept for area\
    \ border routers and AS boundary\n        routers.  Routing table entries for\
    \ area border routers are used\n        when calculating the inter-area routes\
    \ (see Section 16.2), and\n        when maintaining configured virtual links (see\
    \ Section 15).\n        Routing table entries for AS boundary routers are used\
    \ when\n        calculating the AS external routes (see Section 16.4).\n    Destination\
    \ ID\n        The destination's identifier or name.  This depends on the\n   \
    \     Destination Type.  For networks, the identifier is their\n        associated\
    \ IP address.  For routers, the identifier is the OSPF\n        Router ID.[9]\n\
    \    Address Mask\n        Only defined for networks.  The network's IP address\
    \ together\n        with its address mask defines a range of IP addresses.  For\
    \ IP\n        subnets, the address mask is referred to as the subnet mask.\n \
    \       For host routes, the mask is \"all ones\" (0xffffffff).\n    Optional\
    \ Capabilities\n        When the destination is a router this field indicates\
    \ the\n        optional OSPF capabilities supported by the destination router.\n\
    \        The only optional capability defined by this specification is\n     \
    \   the ability to process AS-external-LSAs.  For a further\n        discussion\
    \ of OSPF's optional capabilities, see Section 4.5.\n    The set of paths to use\
    \ for a destination may vary based on the OSPF\n    area to which the paths belong.\
    \  This means that there may be\n    multiple routing table entries for the same\
    \ destination, depending\n    on the values of the next field.\n    Area\n   \
    \     This field indicates the area whose link state information has\n       \
    \ led to the routing table entry's collection of paths.  This is\n        called\
    \ the entry's associated area.  For sets of AS external\n        paths, this field\
    \ is not defined.  For destinations of type\n        \"router\", there may be\
    \ separate sets of paths (and therefore\n        separate routing table entries)\
    \ associated with each of several\n        areas. For example, this will happen\
    \ when two area border\n        routers share multiple areas in common.  For destinations\
    \ of\n        type \"network\", only the set of paths associated with the best\n\
    \        area (the one providing the preferred route) is kept.\n    The rest of\
    \ the routing table entry describes the set of paths to\n    the destination.\
    \  The following fields pertain to the set of paths\n    as a whole.  In other\
    \ words, each one of the paths contained in a\n    routing table entry is of the\
    \ same path-type and cost (see below).\n    Path-type\n        There are four\
    \ possible types of paths used to route traffic to\n        the destination, listed\
    \ here in decreasing order of preference:\n        intra-area, inter-area, type\
    \ 1 external or type 2 external.\n        Intra-area paths indicate destinations\
    \ belonging to one of the\n        router's attached areas.  Inter-area paths\
    \ are paths to\n        destinations in other OSPF areas.  These are discovered\
    \ through\n        the examination of received summary-LSAs.  AS external paths\
    \ are\n        paths to destinations external to the AS.  These are detected\n\
    \        through the examination of received AS-external-LSAs.\n    Cost\n   \
    \     The link state cost of the path to the destination.  For all\n        paths\
    \ except type 2 external paths this describes the entire\n        path's cost.\
    \  For Type 2 external paths, this field describes\n        the cost of the portion\
    \ of the path internal to the AS.  This\n        cost is calculated as the sum\
    \ of the costs of the path's\n        constituent links.\n    Type 2 cost\n  \
    \      Only valid for type 2 external paths.  For these paths, this\n        field\
    \ indicates the cost of the path's external portion.  This\n        cost has been\
    \ advertised by an AS boundary router, and is the\n        most significant part\
    \ of the total path cost.  For example, a\n        type 2 external path with type\
    \ 2 cost of 5 is always preferred\n        over a path with type 2 cost of 10,\
    \ regardless of the cost of\n        the two paths' internal components.\n   \
    \ Link State Origin\n        Valid only for intra-area paths, this field indicates\
    \ the LSA\n        (router-LSA or network-LSA) that directly references the\n\
    \        destination.  For example, if the destination is a transit\n        network,\
    \ this is the transit network's network-LSA.  If the\n        destination is a\
    \ stub network, this is the router-LSA for the\n        attached router.  The\
    \ LSA is discovered during the shortest-path\n        tree calculation (see Section\
    \ 16.1).  Multiple LSAs may\n        reference the destination, however a tie-breaking\
    \ scheme always\n        reduces the choice to a single LSA. The Link State Origin\
    \ field\n        is not used by the OSPF protocol, but it is used by the routing\n\
    \        table calculation in OSPF's Multicast routing extensions\n        (MOSPF).\n\
    \    When multiple paths of equal path-type and cost exist to a\n    destination\
    \ (called elsewhere \"equal-cost\" paths), they are stored\n    in a single routing\
    \ table entry.  Each one of the \"equal-cost\" paths\n    is distinguished by\
    \ the following fields:\n    Next hop\n        The outgoing router interface to\
    \ use when forwarding traffic to\n        the destination.  On broadcast, Point-to-MultiPoint\
    \ and NBMA\n        networks, the next hop also includes the IP address of the\
    \ next\n        router (if any) in the path towards the destination.\n    Advertising\
    \ router\n        Valid only for inter-area and AS external paths.  This field\n\
    \        indicates the Router ID of the router advertising the summary-\n    \
    \    LSA or AS-external-LSA that led to this path.\n    11.1.  Routing table lookup\n\
    \        When an IP data packet is received, an OSPF router finds the\n      \
    \  routing table entry that best matches the packet's destination.\n        This\
    \ routing table entry then provides the outgoing interface\n        and next hop\
    \ router to use in forwarding the packet. This\n        section describes the\
    \ process of finding the best matching\n        routing table entry.\n       \
    \ Before the lookup begins, \"discard\" routing table entries should\n       \
    \ be inserted into the routing table for each of the router's\n        active\
    \ area address ranges (see Section 3.5).  (An area range is\n        considered\
    \ \"active\" if the range contains one or more networks\n        reachable by\
    \ intra-area paths.) The destination of a \"discard\"\n        entry is the set\
    \ of addresses described by its associated active\n        area address range,\
    \ and the path type of each \"discard\" entry is\n        set to \"inter-area\"\
    .[10]\n        Several routing table entries may match the destination address.\n\
    \        In this case, the \"best match\" is the routing table entry that\n  \
    \      provides the most specific (longest) match. Another way of\n        saying\
    \ this is to choose the entry that specifies the narrowest\n        range of IP\
    \ addresses.[11] For example, the entry for the\n        address/mask pair of\
    \ (128.185.1.0, 0xffffff00) is more specific\n        than an entry for the pair\
    \ (128.185.0.0, 0xffff0000). The\n        default route is the least specific\
    \ match, since it matches all\n        destinations. (Note that for any single\
    \ routing table entry,\n        multiple paths may be possible. In these cases,\
    \ the calculations\n        in Sections 16.1, 16.2, and 16.4 always yield the\
    \ paths having\n        the most preferential path-type, as described in Section\
    \ 11).\n        If there is no matching routing table entry, or the best match\n\
    \        routing table entry is one of the above \"discard\" routing table\n \
    \       entries, then the packet's IP destination is considered\n        unreachable.\
    \ Instead of being forwarded, the packet should then\n        be discarded and\
    \ an ICMP destination unreachable message should\n        be returned to the packet's\
    \ source.\n    11.2.  Sample routing table, without areas\n        Consider the\
    \ Autonomous System pictured in Figure 2.  No OSPF\n        areas have been configured.\
    \  A single metric is shown per\n        outbound interface.  The calculation\
    \ of Router RT6's routing\n        table proceeds as described in Section 2.2.\
    \  The resulting\n        routing table is shown in Table 12.  Destination types\
    \ are\n        abbreviated: Network as \"N\", Router as \"R\".\n        There\
    \ are no instances of multiple equal-cost shortest paths in\n        this example.\
    \  Also, since there are no areas, there are no\n        inter-area paths.\n \
    \       Routers RT5 and RT7 are AS boundary routers.  Intra-area routes\n    \
    \    have been calculated to Routers RT5 and RT7.  This allows\n        external\
    \ routes to be calculated to the destinations advertised\n        by RT5 and RT7\
    \ (i.e., Networks N12, N13, N14 and N15).  It is\n        assumed all AS-external-LSAs\
    \ originated by RT5 and RT7 are\n        advertising type 1 external metrics.\
    \  This results in type 1\n        external paths being calculated to destinations\
    \ N12-N15.\n    11.3.  Sample routing table, with areas\n        Consider the\
    \ previous example, this time split into OSPF areas.\n        An OSPF area configuration\
    \ is pictured in Figure 6.  Router\n        RT4's routing table will be described\
    \ for this area\n        configuration.  Router RT4 has a connection to Area 1\
    \ and a\n        backbone connection.  This causes Router RT4 to view the AS as\n\
    \        the concatenation of the two graphs shown in Figures 7 and 8.\n     \
    \   The resulting routing table is displayed in Table 13.\n        Again, Routers\
    \ RT5 and RT7 are AS boundary routers.  Routers\n        RT3, RT4, RT7, RT10 and\
    \ RT11 are area border routers.  Note that\n        there are two routing entries\
    \ for the area border router RT3,\n        since it has two areas in common with\
    \ RT4 (Area 1 and the\n        backbone).\n        Backbone paths have been calculated\
    \ to all area border routers.\n        These are used when determining the inter-area\
    \ routes.  Note\n        that all of the inter-area routes are associated with\
    \ the\n        backbone; this is always the case when the calculating router is\n\
    \        itself an area border router.  Routing information is condensed\n   \
    \     at area boundaries.  In this example, we assume that Area 3 has\n      \
    \  been defined so that networks N9-N11 and the host route to H1\n      Type \
    \  Dest   Area   Path  Type    Cost   Next     Adv.\n                        \
    \                        Hop(s)   Router(s)\n      ____________________________________________________________\n\
    \      N      N1     0      intra-area    10     RT3      *\n      N      N2 \
    \    0      intra-area    10     RT3      *\n      N      N3     0      intra-area\
    \    7      RT3      *\n      N      N4     0      intra-area    8      RT3  \
    \    *\n      N      Ib     0      intra-area    7      *        *\n      N  \
    \    Ia     0      intra-area    12     RT10     *\n      N      N6     0    \
    \  intra-area    8      RT10     *\n      N      N7     0      intra-area    12\
    \     RT10     *\n      N      N8     0      intra-area    10     RT10     *\n\
    \      N      N9     0      intra-area    11     RT10     *\n      N      N10\
    \    0      intra-area    13     RT10     *\n      N      N11    0      intra-area\
    \    14     RT10     *\n      N      H1     0      intra-area    21     RT10 \
    \    *\n      R      RT5    0      intra-area    6      RT5      *\n      R  \
    \    RT7    0      intra-area    8      RT10     *\n      ____________________________________________________________\n\
    \      N      N12    *      type 1 ext.   10     RT10     RT7\n      N      N13\
    \    *      type 1 ext.   14     RT5      RT5\n      N      N14    *      type\
    \ 1 ext.   14     RT5      RT5\n      N      N15    *      type 1 ext.   17  \
    \   RT10     RT7\n               Table 12: The routing table for Router RT6\n\
    \                         (no configured areas).\n        are all condensed to\
    \ a single route when advertised into the\n        backbone (by Router RT11).\
    \  Note that the cost of this route is\n        the maximum of the set of costs\
    \ to its individual components.\n        There is a virtual link configured between\
    \ Routers RT10 and\n        RT11.  Without this configured virtual link, RT11\
    \ would be\n        unable to advertise a route for networks N9-N11 and Host H1\
    \ into\n        the backbone, and there would not be an entry for these networks\n\
    \        in Router RT4's routing table.\n        In this example there are two\
    \ equal-cost paths to Network N12.\n        However, they both use the same next\
    \ hop (Router RT5).\n        Router RT4's routing table would improve (i.e., some\
    \ of the\n        paths in the routing table would become shorter) if an\n   \
    \     additional virtual link were configured between Router RT4 and\n       \
    \ Router RT3.  The new virtual link would itself be associated\n        with the\
    \ first entry for area border router RT3 in Table 13 (an\n        intra-area path\
    \ through Area 1).  This would yield a cost of 1\n        for the virtual link.\
    \  The routing table entries changes that\n        would be caused by the addition\
    \ of this virtual link are shown\n   Type   Dest        Area   Path  Type    Cost\
    \   Next      Adv.\n                                                  Hops(s)\
    \   Router(s)\n   __________________________________________________________________\n\
    \   N      N1          1      intra-area    4      RT1       *\n   N      N2 \
    \         1      intra-area    4      RT2       *\n   N      N3          1   \
    \   intra-area    1      *         *\n   N      N4          1      intra-area\
    \    3      RT3       *\n   R      RT3         1      intra-area    1      * \
    \        *\n   __________________________________________________________________\n\
    \   N      Ib          0      intra-area    22     RT5       *\n   N      Ia \
    \         0      intra-area    27     RT5       *\n   R      RT3         0   \
    \   intra-area    21     RT5       *\n   R      RT5         0      intra-area\
    \    8      *         *\n   R      RT7         0      intra-area    14     RT5\
    \       *\n   R      RT10        0      intra-area    22     RT5       *\n   R\
    \      RT11        0      intra-area    25     RT5       *\n   __________________________________________________________________\n\
    \   N      N6          0      inter-area    15     RT5       RT7\n   N      N7\
    \          0      inter-area    19     RT5       RT7\n   N      N8          0\
    \      inter-area    18     RT5       RT7\n   N      N9-N11,H1   0      inter-area\
    \    36     RT5       RT11\n   __________________________________________________________________\n\
    \   N      N12         *      type 1 ext.   16     RT5       RT5,RT7\n   N   \
    \   N13         *      type 1 ext.   16     RT5       RT5\n   N      N14     \
    \    *      type 1 ext.   16     RT5       RT5\n   N      N15         *      type\
    \ 1 ext.   23     RT5       RT7\n                  Table 13: Router RT4's routing\
    \ table\n                       in the presence of areas.\n        in Table 14.\n"
- title: 12.  Link State Advertisements (LSAs)
  contents:
  - "12.  Link State Advertisements (LSAs)\n    Each router in the Autonomous System\
    \ originates one or more link\n    state advertisements (LSAs).  This memo defines\
    \ five distinct types\n    of LSAs, which are described in Section 4.3.  The collection\
    \ of LSAs\n    forms the link-state database.  Each separate type of LSA has a\n\
    \    separate function.  Router-LSAs and network-LSAs describe how an\n    area's\
    \ routers and networks are interconnected.  Summary-LSAs\n    provide a way of\
    \ condensing an area's routing information.  AS-\n    external-LSAs provide a\
    \ way of transparently advertising\n    externally-derived routing information\
    \ throughout the Autonomous\n    System.\n    Each LSA begins with a standard\
    \ 20-byte header.  This LSA header is\n    discussed below.\n    Type   Dest \
    \       Area   Path  Type   Cost   Next     Adv.\n                           \
    \                       Hop(s)   Router(s)\n    ________________________________________________________________\n\
    \    N      Ib          0      intra-area   16     RT3      *\n    N      Ia \
    \         0      intra-area   21     RT3      *\n    R      RT3         0    \
    \  intra-area   1      *        *\n    R      RT10        0      intra-area  \
    \ 16     RT3      *\n    R      RT11        0      intra-area   19     RT3   \
    \   *\n    ________________________________________________________________\n\
    \    N      N9-N11,H1   0      inter-area   30     RT3      RT11\n           \
    \       Table 14: Changes resulting from an\n                        additional\
    \ virtual link.\n    12.1.  The LSA Header\n        The LSA header contains the\
    \ LS type, Link State ID and\n        Advertising Router fields.  The combination\
    \ of these three\n        fields uniquely identifies the LSA.\n        There may\
    \ be several instances of an LSA present in the\n        Autonomous System, all\
    \ at the same time.  It must then be\n        determined which instance is more\
    \ recent.  This determination is\n        made by examining the LS sequence, LS\
    \ checksum and LS age\n        fields.  These fields are also contained in the\
    \ 20-byte LSA\n        header.\n        Several of the OSPF packet types list\
    \ LSAs.  When the instance\n        is not important, an LSA is referred to by\
    \ its LS type, Link\n        State ID and Advertising Router (see Link State Request\n\
    \        Packets).  Otherwise, the LS sequence number, LS age and LS\n       \
    \ checksum fields must also be referenced.\n        A detailed explanation of\
    \ the fields contained in the LSA header\n        follows.\n        12.1.1.  LS\
    \ age\n            This field is the age of the LSA in seconds.  It should be\n\
    \            processed as an unsigned 16-bit integer.  It is set to 0\n      \
    \      when the LSA is originated.  It must be incremented by\n            InfTransDelay\
    \ on every hop of the flooding procedure.  LSAs\n            are also aged as\
    \ they are held in each router's database.\n            The age of an LSA is never\
    \ incremented past MaxAge.  LSAs\n            having age MaxAge are not used in\
    \ the routing table\n            calculation.  When an LSA's age first reaches\
    \ MaxAge, it is\n            reflooded.  An LSA of age MaxAge is finally flushed\
    \ from the\n            database when it is no longer needed to ensure database\n\
    \            synchronization.  For more information on the aging of LSAs,\n  \
    \          consult Section 14.\n            The LS age field is examined when\
    \ a router receives two\n            instances of an LSA, both having identical\
    \ LS sequence\n            numbers and LS checksums.  An instance of age MaxAge\
    \ is then\n            always accepted as most recent; this allows old LSAs to\
    \ be\n            flushed quickly from the routing domain.  Otherwise, if the\n\
    \            ages differ by more than MaxAgeDiff, the instance having the\n  \
    \          smaller age is accepted as most recent.[12] See Section 13.1\n    \
    \        for more details.\n        12.1.2.  Options\n            The Options\
    \ field in the LSA header indicates which optional\n            capabilities are\
    \ associated with the LSA.  OSPF's optional\n            capabilities are described\
    \ in Section 4.5.  One optional\n            capability is defined by this specification,\
    \ represented by\n            the E-bit found in the Options field.  The unrecognized\
    \ bits\n            in the Options field should be set to zero.\n            The\
    \ E-bit represents OSPF's ExternalRoutingCapability.  This\n            bit should\
    \ be set in all LSAs associated with the backbone,\n            and all LSAs associated\
    \ with non-stub areas (see Section\n            3.6).  It should also be set in\
    \ all AS-external-LSAs.  It\n            should be reset in all router-LSAs, network-LSAs\
    \ and\n            summary-LSAs associated with a stub area.  For all LSAs, the\n\
    \            setting of the E-bit is for informational purposes only; it\n   \
    \         does not affect the routing table calculation.\n        12.1.3.  LS\
    \ type\n            The LS type field dictates the format and function of the\n\
    \            LSA.  LSAs of different types have different names (e.g.,\n     \
    \       router-LSAs or network-LSAs).  All LSA types defined by this\n       \
    \     memo, except the AS-external-LSAs (LS type = 5), are flooded\n         \
    \   throughout a single area only.  AS-external-LSAs are flooded\n           \
    \ throughout the entire Autonomous System, excepting stub\n            areas (see\
    \ Section 3.6).  Each separate LSA type is briefly\n            described below\
    \ in Table 15.\n        12.1.4.  Link State ID\n            This field identifies\
    \ the piece of the routing domain that\n            is being described by the\
    \ LSA.  Depending on the LSA's LS\n            type, the Link State ID takes on\
    \ the values listed in Table\n            LS Type   LSA description\n        \
    \    ________________________________________________\n            1         These\
    \ are the router-LSAs.\n                      They describe the collected\n  \
    \                     states of the router's\n                      interfaces.\
    \ For more information,\n                      consult Section 12.4.1.\n     \
    \       ________________________________________________\n            2      \
    \   These are the network-LSAs.\n                      They describe the set of\
    \ routers\n                      attached to the network. For\n              \
    \        more information, consult\n                      Section 12.4.2.\n  \
    \          ________________________________________________\n            3 or\
    \ 4    These are the summary-LSAs.\n                      They describe inter-area\
    \ routes,\n                      and enable the condensation of\n            \
    \          routing information at area\n                      borders. Originated\
    \ by area border\n                      routers, the Type 3 summary-LSAs\n   \
    \                   describe routes to networks while the\n                  \
    \    Type 4 summary-LSAs describe routes to\n                      AS boundary\
    \ routers.\n            ________________________________________________\n   \
    \         5         These are the AS-external-LSAs.\n                      Originated\
    \ by AS boundary routers,\n                      they describe routes\n      \
    \                to destinations external to the\n                      Autonomous\
    \ System. A default route for\n                      the Autonomous System can\
    \ also be\n                      described by an AS-external-LSA.\n          \
    \  Table 15: OSPF link state advertisements (LSAs).\n            16.\n       \
    \     Actually, for Type 3 summary-LSAs (LS type = 3) and AS-\n            external-LSAs\
    \ (LS type = 5), the Link State ID may\n            LS Type   Link State ID\n\
    \            _______________________________________________\n            1  \
    \       The originating router's Router ID.\n            2         The IP interface\
    \ address of the\n                      network's Designated Router.\n       \
    \     3         The destination network's IP address.\n            4         The\
    \ Router ID of the described AS\n                      boundary router.\n    \
    \        5         The destination network's IP address.\n                   Table\
    \ 16: The LSA's Link State ID.\n            additionally have one or more of the\
    \ destination network's\n            \"host\" bits set. For example, when originating\
    \ an AS-\n            external-LSA for the network 10.0.0.0 with mask of\n   \
    \         255.0.0.0, the Link State ID can be set to anything in the\n       \
    \     range 10.0.0.0 through 10.255.255.255 inclusive (although\n            10.0.0.0\
    \ should be used whenever possible). The freedom to\n            set certain host\
    \ bits allows a router to originate separate\n            LSAs for two networks\
    \ having the same address but different\n            masks. See Appendix E for\
    \ details.\n            When the LSA is describing a network (LS type = 2, 3 or\
    \ 5),\n            the network's IP address is easily derived by masking the\n\
    \            Link State ID with the network/subnet mask contained in the\n   \
    \         body of the LSA.  When the LSA is describing a router (LS\n        \
    \    type = 1 or 4), the Link State ID is always the described\n            router's\
    \ OSPF Router ID.\n            When an AS-external-LSA (LS Type = 5) is describing\
    \ a\n            default route, its Link State ID is set to\n            DefaultDestination\
    \ (0.0.0.0).\n        12.1.5.  Advertising Router\n            This field specifies\
    \ the OSPF Router ID of the LSA's\n            originator.  For router-LSAs, this\
    \ field is identical to the\n            Link State ID field.  Network-LSAs are\
    \ originated by the\n            network's Designated Router.  Summary-LSAs originated\
    \ by\n            area border routers.  AS-external-LSAs are originated by AS\n\
    \            boundary routers.\n        12.1.6.  LS sequence number\n        \
    \    The sequence number field is a signed 32-bit integer.  It is\n          \
    \  used to detect old and duplicate LSAs.  The space of\n            sequence\
    \ numbers is linearly ordered.  The larger the\n            sequence number (when\
    \ compared as signed 32-bit integers)\n            the more recent the LSA.  To\
    \ describe to sequence number\n            space more precisely, let N refer in\
    \ the discussion below to\n            the constant 2**31.\n            The sequence\
    \ number -N (0x80000000) is reserved (and\n            unused).  This leaves -N\
    \ + 1 (0x80000001) as the smallest\n            (and therefore oldest) sequence\
    \ number; this sequence number\n            is referred to as the constant InitialSequenceNumber.\
    \ A\n            router uses InitialSequenceNumber the first time it\n       \
    \     originates any LSA.  Afterwards, the LSA's sequence number\n           \
    \ is incremented each time the router originates a new\n            instance of\
    \ the LSA.  When an attempt is made to increment\n            the sequence number\
    \ past the maximum value of N - 1\n            (0x7fffffff; also referred to as\
    \ MaxSequenceNumber), the\n            current instance of the LSA must first\
    \ be flushed from the\n            routing domain.  This is done by prematurely\
    \ aging the LSA\n            (see Section 14.1) and reflooding it.  As soon as\
    \ this flood\n            has been acknowledged by all adjacent neighbors, a new\n\
    \            instance can be originated with sequence number of\n            InitialSequenceNumber.\n\
    \            The router may be forced to promote the sequence number of\n    \
    \        one of its LSAs when a more recent instance of the LSA is\n         \
    \   unexpectedly received during the flooding process.  This\n            should\
    \ be a rare event.  This may indicate that an out-of-\n            date LSA, originated\
    \ by the router itself before its last\n            restart/reload, still exists\
    \ in the Autonomous System.  For\n            more information see Section 13.4.\n\
    \        12.1.7.  LS checksum\n            This field is the checksum of the complete\
    \ contents of the\n            LSA, excepting the LS age field.  The LS age field\
    \ is\n            excepted so that an LSA's age can be incremented without\n \
    \           updating the checksum.  The checksum used is the same that\n     \
    \       is used for ISO connectionless datagrams; it is commonly\n           \
    \ referred to as the Fletcher checksum.  It is documented in\n            Annex\
    \ B of [Ref6].  The LSA header also contains the length\n            of the LSA\
    \ in bytes; subtracting the size of the LS age\n            field (two bytes)\
    \ yields the amount of data to checksum.\n            The checksum is used to\
    \ detect data corruption of an LSA.\n            This corruption can occur while\
    \ an LSA is being flooded, or\n            while it is being held in a router's\
    \ memory.  The LS\n            checksum field cannot take on the value of zero;\
    \ the\n            occurrence of such a value should be considered a checksum\n\
    \            failure.  In other words, calculation of the checksum is not\n  \
    \          optional.\n            The checksum of an LSA is verified in two cases:\
    \  a) when it\n            is received in a Link State Update Packet and b) at\
    \ times\n            during the aging of the link state database.  The detection\n\
    \            of a checksum failure leads to separate actions in each\n       \
    \     case.  See Sections 13 and 14 for more details.\n            Whenever the\
    \ LS sequence number field indicates that two\n            instances of an LSA\
    \ are the same, the LS checksum field is\n            examined.  If there is a\
    \ difference, the instance with the\n            larger LS checksum is considered\
    \ to be most recent.[13] See\n            Section 13.1 for more details.\n   \
    \ 12.2.  The link state database\n        A router has a separate link state database\
    \ for every area to\n        which it belongs. All routers belonging to the same\
    \ area have\n        identical link state databases for the area.\n        The\
    \ databases for each individual area are always dealt with\n        separately.\
    \  The shortest path calculation is performed\n        separately for each area\
    \ (see Section 16).  Components of the\n        area link-state database are flooded\
    \ throughout the area only.\n        Finally, when an adjacency (belonging to\
    \ Area A) is being\n        brought up, only the database for Area A is synchronized\
    \ between\n        the two routers.\n        The area database is composed of\
    \ router-LSAs, network-LSAs and\n        summary-LSAs (all listed in the area\
    \ data structure).  In\n        addition, external routes (AS-external-LSAs) are\
    \ included in all\n        non-stub area databases (see Section 3.6).\n      \
    \  An implementation of OSPF must be able to access individual\n        pieces\
    \ of an area database.  This lookup function is based on an\n        LSA's LS\
    \ type, Link State ID and Advertising Router.[14] There\n        will be a single\
    \ instance (the most up-to-date) of each LSA in\n        the database.  The database\
    \ lookup function is invoked during\n        the LSA flooding procedure (Section\
    \ 13) and the routing table\n        calculation (Section 16).  In addition, using\
    \ this lookup\n        function the router can determine whether it has itself\
    \ ever\n        originated a particular LSA, and if so, with what LS sequence\n\
    \        number.\n        An LSA is added to a router's database when either a)\
    \ it is\n        received during the flooding process (Section 13) or b) it is\n\
    \        originated by the router itself (Section 12.4).  An LSA is\n        deleted\
    \ from a router's database when either a) it has been\n        overwritten by\
    \ a newer instance during the flooding process\n        (Section 13) or b) the\
    \ router originates a newer instance of one\n        of its self-originated LSAs\
    \ (Section 12.4) or c) the LSA ages\n        out and is flushed from the routing\
    \ domain (Section 14).\n        Whenever an LSA is deleted from the database it\
    \ must also be\n        removed from all neighbors' Link state retransmission\
    \ lists (see\n        Section 10).\n    12.3.  Representation of TOS\n       \
    \ For backward compatibility with previous versions of the OSPF\n        specification\
    \ ([Ref9]), TOS-specific information can be included\n        in router-LSAs,\
    \ summary-LSAs and AS-external-LSAs.  The encoding\n        of TOS in OSPF LSAs\
    \ is specified in Table 17. That table relates\n        the OSPF encoding to the\
    \ IP packet header's TOS field (defined\n        in [Ref12]).  The OSPF encoding\
    \ is expressed as a decimal\n        integer, and the IP packet header's TOS field\
    \ is expressed in\n        the binary TOS values used in [Ref12].\n          \
    \          OSPF encoding   RFC 1349 TOS values\n                    ___________________________________________\n\
    \                    0               0000 normal service\n                   \
    \ 2               0001 minimize monetary cost\n                    4         \
    \      0010 maximize reliability\n                    6               0011\n \
    \                   8               0100 maximize throughput\n               \
    \     10              0101\n                    12              0110\n       \
    \             14              0111\n                    16              1000 minimize\
    \ delay\n                    18              1001\n                    20    \
    \          1010\n                    22              1011\n                  \
    \  24              1100\n                    26              1101\n          \
    \          28              1110\n                    30              1111\n  \
    \                      Table 17: Representing TOS in OSPF.\n    12.4.  Originating\
    \ LSAs\n        Into any given OSPF area, a router will originate several LSAs.\n\
    \        Each router originates a router-LSA.  If the router is also the\n   \
    \     Designated Router for any of the area's networks, it will\n        originate\
    \ network-LSAs for those networks.\n        Area border routers originate a single\
    \ summary-LSA for each\n        known inter-area destination.  AS boundary routers\
    \ originate a\n        single AS-external-LSA for each known AS external destination.\n\
    \        Destinations are advertised one at a time so that the change in\n   \
    \     any single route can be flooded without reflooding the entire\n        collection\
    \ of routes.  During the flooding procedure, many LSAs\n        can be carried\
    \ by a single Link State Update packet.\n        As an example, consider Router\
    \ RT4 in Figure 6.  It is an area\n        border router, having a connection\
    \ to Area 1 and the backbone.\n        Router RT4 originates 5 distinct LSAs into\
    \ the backbone (one\n        router-LSA, and one summary-LSA for each of the networks\
    \ N1-N4).\n        Router RT4 will also originate 8 distinct LSAs into Area 1\
    \ (one\n        router-LSA and seven summary-LSAs as pictured in Figure 7).  If\n\
    \        RT4 has been selected as Designated Router for Network N3, it\n     \
    \   will also originate a network-LSA for N3 into Area 1.\n        In this same\
    \ figure, Router RT5 will be originating 3 distinct\n        AS-external-LSAs\
    \ (one for each of the networks N12-N14).  These\n        will be flooded throughout\
    \ the entire AS, assuming that none of\n        the areas have been configured\
    \ as stubs.  However, if area 3 has\n        been configured as a stub area, the\
    \ AS-external-LSAs for\n        networks N12-N14 will not be flooded into area\
    \ 3 (see Section\n        3.6).  Instead, Router RT11 would originate a default\
    \ summary-\n        LSA that would be flooded throughout area 3 (see Section\n\
    \        12.4.3).  This instructs all of area 3's internal routers to\n      \
    \  send their AS external traffic to RT11.\n        Whenever a new instance of\
    \ an LSA is originated, its LS sequence\n        number is incremented, its LS\
    \ age is set to 0, its LS checksum\n        is calculated, and the LSA is added\
    \ to the link state database\n        and flooded out the appropriate interfaces.\
    \  See Section 13.2\n        for details concerning the installation of the LSA\
    \ into the link\n        state database.  See Section 13.3 for details concerning\
    \ the\n        flooding of newly originated LSAs.\n        The ten events that\
    \ can cause a new instance of an LSA to be\n        originated are:\n        (1)\
    \ The LS age field of one of the router's self-originated LSAs\n            reaches\
    \ the value LSRefreshTime. In this case, a new\n            instance of the LSA\
    \ is originated, even though the contents\n            of the LSA (apart from\
    \ the LSA header) will be the same.\n            This guarantees periodic originations\
    \ of all LSAs.  This\n            periodic updating of LSAs adds robustness to\
    \ the link state\n            algorithm.  LSAs that solely describe unreachable\n\
    \            destinations should not be refreshed, but should instead be\n   \
    \         flushed from the routing domain (see Section 14.1).\n        When whatever\
    \ is being described by an LSA changes, a new LSA is\n        originated.  However,\
    \ two instances of the same LSA may not be\n        originated within the time\
    \ period MinLSInterval.  This may\n        require that the generation of the\
    \ next instance be delayed by\n        up to MinLSInterval.  The following events\
    \ may cause the\n        contents of an LSA to change.  These events should cause\
    \ new\n        originations if and only if the contents of the new LSA would be\n\
    \        different:\n        (2) An interface's state changes (see Section 9.1).\
    \  This may\n            mean that it is necessary to produce a new instance of\
    \ the\n            router-LSA.\n        (3) An attached network's Designated Router\
    \ changes.  A new\n            router-LSA should be originated.  Also, if the\
    \ router itself\n            is now the Designated Router, a new network-LSA should\
    \ be\n            produced.  If the router itself is no longer the Designated\n\
    \            Router, any network-LSA that it might have originated for\n     \
    \       the network should be flushed from the routing domain (see\n         \
    \   Section 14.1).\n        (4) One of the neighboring routers changes to/from\
    \ the FULL\n            state.  This may mean that it is necessary to produce\
    \ a new\n            instance of the router-LSA.  Also, if the router is itself\n\
    \            the Designated Router for the attached network, a new\n         \
    \   network-LSA should be produced.\n        The next four events concern area\
    \ border routers only:\n        (5) An intra-area route has been added/deleted/modified\
    \ in the\n            routing table.  This may cause a new instance of a summary-\n\
    \            LSA (for this route) to be originated in each attached area\n   \
    \         (possibly including the backbone).\n        (6) An inter-area route\
    \ has been added/deleted/modified in the\n            routing table.  This may\
    \ cause a new instance of a summary-\n            LSA (for this route) to be originated\
    \ in each attached area\n            (but NEVER for the backbone).\n        (7)\
    \ The router becomes newly attached to an area.  The router\n            must\
    \ then originate summary-LSAs into the newly attached\n            area for all\
    \ pertinent intra-area and inter-area routes in\n            the router's routing\
    \ table.  See Section 12.4.3 for more\n            details.\n        (8) When\
    \ the state of one of the router's configured virtual\n            links changes,\
    \ it may be necessary to originate a new\n            router-LSA into the virtual\
    \ link's Transit area (see the\n            discussion of the router-LSA's bit\
    \ V in Section 12.4.1), as\n            well as originating a new router-LSA into\
    \ the backbone.\n        The last two events concern AS boundary routers (and\
    \ former AS\n        boundary routers) only:\n        (9) An external route gained\
    \ through direct experience with an\n            external routing protocol (like\
    \ BGP) changes.  This will\n            cause an AS boundary router to originate\
    \ a new instance of\n            an AS-external-LSA.\n        (10)\n         \
    \   A router ceases to be an AS boundary router, perhaps after\n            restarting.\
    \ In this situation the router should flush all\n            AS-external-LSAs\
    \ that it had previously originated.  These\n            LSAs can be flushed via\
    \ the premature aging procedure\n            specified in Section 14.1.\n    \
    \    The construction of each type of LSA is explained in detail\n        below.\
    \  In general, these sections describe the contents of the\n        LSA body (i.e.,\
    \ the part coming after the 20-byte LSA header).\n        For information concerning\
    \ the building of the LSA header, see\n        Section 12.1.\n        12.4.1.\
    \  Router-LSAs\n            A router originates a router-LSA for each area that\
    \ it\n            belongs to.  Such an LSA describes the collected states of\n\
    \            the router's links to the area.  The LSA is flooded\n           \
    \ throughout the particular area, and no further.\n                  ....................................\n\
    \                  . 192.1.2                   Area 1 .\n                  . \
    \    +                            .\n                  .     |               \
    \             .\n                  .     | 3+---+1                    .\n    \
    \              .  N1 |--|RT1|-----+               .\n                  .     |\
    \  +---+      \\              .\n                  .     |              \\  _______N3\
    \  .\n                  .     +               \\/       \\   .  1+---+\n     \
    \             .                     * 192.1.1 *------|RT4|\n                 \
    \ .     +               /\\_______/   .   +---+\n                  .     |   \
    \           /     |       .\n                  .     | 3+---+1     /      |  \
    \     .\n                  .  N2 |--|RT2|-----+      1|       .\n            \
    \      .     |  +---+           +---+8    .         6+---+\n                 \
    \ .     |                  |RT3|----------------|RT6|\n                  .   \
    \  +                  +---+     .          +---+\n                  . 192.1.3\
    \                  |2      .   18.10.0.6|7\n                  .              \
    \            |       .            |\n                  .                   +------------+\
    \ .\n                  .                     192.1.4 (N4) .\n                \
    \  ....................................\n                    Figure 15: Area 1\
    \ with IP addresses shown\n            The format of a router-LSA is shown in\
    \ Appendix A (Section\n            A.4.2).  The first 20 bytes of the LSA consist\
    \ of the\n            generic LSA header that was discussed in Section 12.1.\n\
    \            router-LSAs have LS type = 1.\n            A router also indicates\
    \ whether it is an area border router,\n            or an AS boundary router,\
    \ by setting the appropriate bits\n            (bit B and bit E, respectively)\
    \ in its router-LSAs. This\n            enables paths to those types of routers\
    \ to be saved in the\n            routing table, for later processing of summary-LSAs\
    \ and AS-\n            external-LSAs.  Bit B should be set whenever the router\
    \ is\n            actively attached to two or more areas, even if the router\n\
    \            is not currently attached to the OSPF backbone area.  Bit E\n   \
    \         should never be set in a router-LSA for a stub area (stub\n        \
    \    areas cannot contain AS boundary routers).\n            In addition, the\
    \ router sets bit V in its router-LSA for\n            Area A if and only if the\
    \ router is the endpoint of one or\n            more fully adjacent virtual links\
    \ having Area A as their\n            Transit area. The setting of bit V enables\
    \ other routers in\n            Area A to discover whether the area supports transit\
    \ traffic\n            (see TransitCapability in Section 6).\n            The\
    \ router-LSA then describes the router's working\n            connections (i.e.,\
    \ interfaces or links) to the area.  Each\n            link is typed according\
    \ to the kind of attached network.\n            Each link is also labelled with\
    \ its Link ID.  This Link ID\n            gives a name to the entity that is on\
    \ the other end of the\n            link.  Table 18 summarizes the values used\
    \ for the Type and\n            Link ID fields.\n                   Link type\
    \   Description       Link ID\n                   __________________________________________________\n\
    \                   1           Point-to-point    Neighbor Router ID\n       \
    \                        link\n                   2           Link to transit\
    \   Interface address of\n                               network           Designated\
    \ Router\n                   3           Link to stub      IP network number\n\
    \                               network\n                   4           Virtual\
    \ link      Neighbor Router ID\n                           Table 18: Link descriptions\
    \ in the\n                                      router-LSA.\n            In addition,\
    \ the Link Data field is specified for each link.\n            This field gives\
    \ 32 bits of extra information for the link.\n            For links to transit\
    \ networks, numbered point-to-point links\n            and virtual links, this\
    \ field specifies the IP interface\n            address of the associated router\
    \ interface (this is needed\n            by the routing table calculation, see\
    \ Section 16.1.1).  For\n            links to stub networks, this field specifies\
    \ the stub\n            network's IP address mask.  For unnumbered point-to-point\n\
    \            links, the Link Data field should be set to the unnumbered\n    \
    \        interface's MIB-II [Ref8] ifIndex value.\n            Finally, the cost\
    \ of using the link for output is specified.\n            The output cost of a\
    \ link is configurable.  With the\n            exception of links to stub networks,\
    \ the output cost must\n            always be non-zero.\n            To further\
    \ describe the process of building the list of link\n            descriptions,\
    \ suppose a router wishes to build a router-LSA\n            for Area A.  The\
    \ router examines its collection of interface\n            data structures.  For\
    \ each interface, the following steps\n            are taken:\n            o \
    \  If the attached network does not belong to Area A, no\n                links\
    \ are added to the LSA, and the next interface\n                should be examined.\n\
    \            o   If the state of the interface is Down, no links are\n       \
    \         added.\n            o   If the state of the interface is Loopback, add\
    \ a Type 3\n                link (stub network) as long as this is not an interface\n\
    \                to an unnumbered point-to-point network.  The Link ID\n     \
    \           should be set to the IP interface address, the Link Data\n       \
    \         set to the mask 0xffffffff (indicating a host route),\n            \
    \    and the cost set to 0.\n            o   Otherwise, the link descriptions\
    \ added to the router-LSA\n                depend on the OSPF interface type.\
    \ Link descriptions\n                used for point-to-point interfaces are specified\
    \ in\n                Section 12.4.1.1, for virtual links in Section 12.4.1.2,\n\
    \                for broadcast and NBMA interfaces in 12.4.1.3, and for\n    \
    \            Point-to-MultiPoint interfaces in 12.4.1.4.\n            After consideration\
    \ of all the router interfaces, host links\n            are added to the router-LSA\
    \ by examining the list of\n            attached hosts belonging to Area A.  A\
    \ host route is\n            represented as a Type 3 link (stub network) whose\
    \ Link ID is\n            the host's IP address, Link Data is the mask of all\
    \ ones\n            (0xffffffff), and cost the host's configured cost (see\n \
    \           Section C.7).\n            12.4.1.1.  Describing point-to-point interfaces\n\
    \                For point-to-point interfaces, one or more link\n           \
    \     descriptions are added to the router-LSA as follows:\n                o\
    \   If the neighboring router is fully adjacent, add a\n                    Type\
    \ 1 link (point-to-point). The Link ID should be\n                    set to the\
    \ Router ID of the neighboring router. For\n                    numbered point-to-point\
    \ networks, the Link Data\n                    should specify the IP interface\
    \ address. For\n                    unnumbered point-to-point networks, the Link\
    \ Data\n                    field should specify the interface's MIB-II [Ref8]\n\
    \                    ifIndex value. The cost should be set to the output\n   \
    \                 cost of the point-to-point interface.\n                o   In\
    \ addition, as long as the state of the interface\n                    is \"Point-to-Point\"\
    \ (and regardless of the\n                    neighboring router state), a Type\
    \ 3 link (stub\n                    network) should be added. There are two forms\
    \ that\n                    this stub link can take:\n                    Option\
    \ 1\n                        Assuming that the neighboring router's IP\n     \
    \                   address is known, set the Link ID of the Type 3\n        \
    \                link to the neighbor's IP address, the Link Data\n          \
    \              to the mask 0xffffffff (indicating a host\n                   \
    \     route), and the cost to the interface's\n                        configured\
    \ output cost.[15]\n                    Option 2\n                        If a\
    \ subnet has been assigned to the point-to-\n                        point link,\
    \ set the Link ID of the Type 3 link\n                        to the subnet's\
    \ IP address, the Link Data to the\n                        subnet's mask, and\
    \ the cost to the interface's\n                        configured output cost.[16]\n\
    \            12.4.1.2.  Describing broadcast and NBMA interfaces\n           \
    \     For operational broadcast and NBMA interfaces, a single\n              \
    \  link description is added to the router-LSA as follows:\n                o\
    \   If the state of the interface is Waiting, add a Type\n                   \
    \ 3 link (stub network) with Link ID set to the IP\n                    network\
    \ number of the attached network, Link Data\n                    set to the attached\
    \ network's address mask, and cost\n                    equal to the interface's\
    \ configured output cost.\n                o   Else, there has been a Designated\
    \ Router elected for\n                    the attached network.  If the router\
    \ is fully\n                    adjacent to the Designated Router, or if the router\n\
    \                    itself is Designated Router and is fully adjacent to\n  \
    \                  at least one other router, add a single Type 2 link\n     \
    \               (transit network) with Link ID set to the IP\n               \
    \     interface address of the attached network's\n                    Designated\
    \ Router (which may be the router itself),\n                    Link Data set\
    \ to the router's own IP interface\n                    address, and cost equal\
    \ to the interface's\n                    configured output cost.  Otherwise,\
    \ add a link as if\n                    the interface state were Waiting (see\
    \ above).\n            12.4.1.3.  Describing virtual links\n                For\
    \ virtual links, a link description is added to the\n                router-LSA\
    \ only when the virtual neighbor is fully\n                adjacent. In this case,\
    \ add a Type 4 link (virtual link)\n                with Link ID set to the Router\
    \ ID of the virtual\n                neighbor, Link Data set to the IP interface\
    \ address\n                associated with the virtual link and cost set to the\n\
    \                cost calculated for the virtual link during the routing\n   \
    \             table calculation (see Section 15).\n            12.4.1.4.  Describing\
    \ Point-to-MultiPoint interfaces\n                For operational Point-to-MultiPoint\
    \ interfaces, one or\n                more link descriptions are added to the\
    \ router-LSA as\n                follows:\n                o   A single Type 3\
    \ link (stub network) is added with\n                    Link ID set to the router's\
    \ own IP interface\n                    address, Link Data set to the mask 0xffffffff\n\
    \                    (indicating a host route), and cost set to 0.\n         \
    \       o   For each fully adjacent neighbor associated with the\n           \
    \         interface, add an additional Type 1 link (point-to-\n              \
    \      point) with Link ID set to the Router ID of the\n                    neighboring\
    \ router, Link Data set to the IP\n                    interface address and cost\
    \ equal to the interface's\n                    configured output cost.\n    \
    \        12.4.1.5.  Examples of router-LSAs\n                Consider the router-LSAs\
    \ generated by Router RT3, as\n                pictured in Figure 6.  The area\
    \ containing Router RT3\n                (Area 1) has been redrawn, with actual\
    \ network\n                addresses, in Figure 15.  Assume that the last byte\
    \ of\n                all of RT3's interface addresses is 3, giving it the\n \
    \               interface addresses 192.1.1.3 and 192.1.4.3, and that\n      \
    \          the other routers have similar addressing schemes.  In\n          \
    \      addition, assume that all links are functional, and that\n            \
    \    Router IDs are assigned as the smallest IP interface\n                address.\n\
    \                RT3 originates two router-LSAs, one for Area 1 and one\n    \
    \            for the backbone.  Assume that Router RT4 has been\n            \
    \    selected as the Designated router for network 192.1.1.0.\n              \
    \  RT3's router-LSA for Area 1 is then shown below.  It\n                indicates\
    \ that RT3 has two connections to Area 1, the\n                first a link to\
    \ the transit network 192.1.1.0 and the\n                second a link to the\
    \ stub network 192.1.4.0.  Note that\n                the transit network is identified\
    \ by the IP interface of\n                its Designated Router (i.e., the Link\
    \ ID = 192.1.1.4\n                which is the Designated Router RT4's IP interface\
    \ to\n                192.1.1.0).  Note also that RT3 has indicated that it is\n\
    \                an area border router.\n        ; RT3's router-LSA for Area 1\n\
    \        LS age = 0                     ;always true on origination\n        Options\
    \ = (E-bit)              ;\n        LS type = 1                    ;indicates\
    \ router-LSA\n        Link State ID = 192.1.1.3      ;RT3's Router ID\n      \
    \  Advertising Router = 192.1.1.3 ;RT3's Router ID\n        bit E = 0        \
    \              ;not an AS boundary router\n        bit B = 1                 \
    \     ;area border router\n        #links = 2\n               Link ID = 192.1.1.4\
    \     ;IP address of Desig. Rtr.\n               Link Data = 192.1.1.3   ;RT3's\
    \ IP interface to net\n               Type = 2                ;connects to transit\
    \ network\n               # TOS metrics = 0\n               metric = 1\n     \
    \          Link ID = 192.1.4.0     ;IP Network number\n               Link Data\
    \ = 0xffffff00  ;Network mask\n               Type = 3                ;connects\
    \ to stub network\n               # TOS metrics = 0\n               metric = 2\n\
    \                    Next RT3's router-LSA for the backbone is shown.  It\n  \
    \                  indicates that RT3 has a single attachment to the\n       \
    \             backbone.  This attachment is via an unnumbered\n              \
    \      point-to-point link to Router RT6.  RT3 has again\n                   \
    \ indicated that it is an area border router.\n        ; RT3's router-LSA for\
    \ the backbone\n        LS age = 0                     ;always true on origination\n\
    \        Options = (E-bit)              ;\n        LS type = 1               \
    \     ;indicates router-LSA\n        Link State ID = 192.1.1.3      ;RT3's router\
    \ ID\n        Advertising Router = 192.1.1.3 ;RT3's router ID\n        bit E =\
    \ 0                      ;not an AS boundary router\n        bit B = 1       \
    \               ;area border router\n        #links = 1\n               Link ID\
    \ = 18.10.0.6     ;Neighbor's Router ID\n               Link Data = 0.0.0.3  \
    \   ;MIB-II ifIndex of P-P link\n               Type = 1                ;connects\
    \ to router\n               # TOS metrics = 0\n               metric = 8\n   \
    \     12.4.2.  Network-LSAs\n            A network-LSA is generated for every\
    \ transit broadcast or\n            NBMA network.  (A transit network is a network\
    \ having two or\n            more attached routers).  The network-LSA describes\
    \ all the\n            routers that are attached to the network.\n           \
    \ The Designated Router for the network originates the LSA.\n            The Designated\
    \ Router originates the LSA only if it is fully\n            adjacent to at least\
    \ one other router on the network.  The\n            network-LSA is flooded throughout\
    \ the area that contains the\n            transit network, and no further.  The\
    \ network-LSA lists\n            those routers that are fully adjacent to the\
    \ Designated\n            Router; each fully adjacent router is identified by\
    \ its OSPF\n            Router ID.  The Designated Router includes itself in this\n\
    \            list.\n            The Link State ID for a network-LSA is the IP\
    \ interface\n            address of the Designated Router.  This value, masked\
    \ by the\n            network's address mask (which is also contained in the\n\
    \            network-LSA) yields the network's IP address.\n            A router\
    \ that has formerly been the Designated Router for a\n            network, but\
    \ is no longer, should flush the network-LSA that\n            it had previously\
    \ originated.  This LSA is no longer used in\n            the routing table calculation.\
    \  It is flushed by prematurely\n            incrementing the LSA's age to MaxAge\
    \ and reflooding (see\n            Section 14.1). In addition, in those rare cases\
    \ where a\n            router's Router ID has changed, any network-LSAs that were\n\
    \            originated with the router's previous Router ID must be\n       \
    \     flushed. Since the router may have no idea what it's\n            previous\
    \ Router ID might have been, these network-LSAs are\n            indicated by\
    \ having their Link State ID equal to one of the\n            router's IP interface\
    \ addresses and their Advertising Router\n            equal to some value other\
    \ than the router's current Router\n            ID (see Section 13.4 for more\
    \ details).\n            12.4.2.1.  Examples of network-LSAs\n               \
    \ Again consider the area configuration in Figure 6.\n                Network-LSAs\
    \ are originated for Network N3 in Area 1,\n                Networks N6 and N8\
    \ in Area 2, and Network N9 in Area 3.\n                Assuming that Router RT4\
    \ has been selected as the\n                Designated Router for Network N3,\
    \ the following\n                network-LSA is generated by RT4 on behalf of\
    \ Network N3\n                (see Figure 15 for the address assignments):\n \
    \       ; Network-LSA for Network N3\n        LS age = 0                     ;always\
    \ true on origination\n        Options = (E-bit)              ;\n        LS type\
    \ = 2                    ;indicates network-LSA\n        Link State ID = 192.1.1.4\
    \      ;IP address of Desig. Rtr.\n        Advertising Router = 192.1.1.4 ;RT4's\
    \ Router ID\n        Network Mask = 0xffffff00\n               Attached Router\
    \ = 192.1.1.4    ;Router ID\n               Attached Router = 192.1.1.1    ;Router\
    \ ID\n               Attached Router = 192.1.1.2    ;Router ID\n             \
    \  Attached Router = 192.1.1.3    ;Router ID\n        12.4.3.  Summary-LSAs\n\
    \            The destination described by a summary-LSA is either an IP\n    \
    \        network, an AS boundary router or a range of IP addresses.\n        \
    \    Summary-LSAs are flooded throughout a single area only.  The\n          \
    \  destination described is one that is external to the area,\n            yet\
    \ still belongs to the Autonomous System.\n            Summary-LSAs are originated\
    \ by area border routers.  The\n            precise summary routes to advertise\
    \ into an area are\n            determined by examining the routing table structure\
    \ (see\n            Section 11) in accordance with the algorithm described\n \
    \           below. Note that only intra-area routes are advertised into\n    \
    \        the backbone, while both intra-area and inter-area routes\n         \
    \   are advertised into the other areas.\n            To determine which routes\
    \ to advertise into an attached Area\n            A, each routing table entry\
    \ is processed as follows.\n            Remember that each routing table entry\
    \ describes a set of\n            equal-cost best paths to a particular destination:\n\
    \            o   Only Destination Types of network and AS boundary router\n  \
    \              are advertised in summary-LSAs.  If the routing table\n       \
    \         entry's Destination Type is area border router, examine\n          \
    \      the next routing table entry.\n            o   AS external routes are never\
    \ advertised in summary-LSAs.\n                If the routing table entry has\
    \ Path-type of type 1\n                external or type 2 external, examine the\
    \ next routing\n                table entry.\n            o   Else, if the area\
    \ associated with this set of paths is\n                the Area A itself, do\
    \ not generate a summary-LSA for the\n                route.[17]\n           \
    \ o   Else, if the next hops associated with this set of paths\n             \
    \   belong to Area A itself, do not generate a summary-LSA\n                for\
    \ the route.[18] This is the logical equivalent of a\n                Distance\
    \ Vector protocol's split horizon logic.\n            o   Else, if the routing\
    \ table cost equals or exceeds the\n                value LSInfinity, a summary-LSA\
    \ cannot be generated for\n                this route.\n            o   Else,\
    \ if the destination of this route is an AS boundary\n                router,\
    \ a summary-LSA should be originated if and only\n                if the routing\
    \ table entry describes the preferred path\n                to the AS boundary\
    \ router (see Step 3 of Section 16.4).\n                If so, a Type 4 summary-LSA\
    \ is originated for the\n                destination, with Link State ID equal\
    \ to the AS boundary\n                router's Router ID and metric equal to the\
    \ routing table\n                entry's cost. Note: these LSAs should not be\
    \ generated\n                if Area A has been configured as a stub area.\n \
    \           o   Else, the Destination type is network. If this is an\n       \
    \         inter-area route, generate a Type 3 summary-LSA for the\n          \
    \      destination, with Link State ID equal to the network's\n              \
    \  address (if necessary, the Link State ID can also have\n                one\
    \ or more of the network's host bits set; see Appendix\n                E for\
    \ details) and metric equal to the routing table\n                cost.\n    \
    \        o   The one remaining case is an intra-area route to a\n            \
    \    network.  This means that the network is contained in\n                one\
    \ of the router's directly attached areas.  In\n                general, this\
    \ information must be condensed before\n                appearing in summary-LSAs.\
    \  Remember that an area has a\n                configured list of address ranges,\
    \ each range consisting\n                of an [address,mask] pair and a status\
    \ indication of\n                either Advertise or DoNotAdvertise.  At most\
    \ a single\n                Type 3 summary-LSA is originated for each range. When\n\
    \                the range's status indicates Advertise, a Type 3\n          \
    \      summary-LSA is generated with Link State ID equal to the\n            \
    \    range's address (if necessary, the Link State ID can\n                also\
    \ have one or more of the range's \"host\" bits set;\n                see Appendix\
    \ E for details) and cost equal to the\n                largest cost of any of\
    \ the component networks. When the\n                range's status indicates DoNotAdvertise,\
    \ the Type 3\n                summary-LSA is suppressed and the component networks\n\
    \                remain hidden from other areas.\n                By default,\
    \ if a network is not contained in any\n                explicitly configured\
    \ address range, a Type 3 summary-\n                LSA is generated with Link\
    \ State ID equal to the\n                network's address (if necessary, the\
    \ Link State ID can\n                also have one or more of the network's \"\
    host\" bits set;\n                see Appendix E for details) and metric equal\
    \ to the\n                network's routing table cost.\n                If an\
    \ area is capable of carrying transit traffic (i.e.,\n                its TransitCapability\
    \ is set to TRUE), routing\n                information concerning backbone networks\
    \ should not be\n                condensed before being summarized into the area.\
    \  Nor\n                should the advertisement of backbone networks into\n \
    \               transit areas be suppressed.  In other words, the\n          \
    \      backbone's configured ranges should be ignored when\n                originating\
    \ summary-LSAs into transit areas.\n            If a router advertises a summary-LSA\
    \ for a destination which\n            then becomes unreachable, the router must\
    \ then flush the LSA\n            from the routing domain by setting its age to\
    \ MaxAge and\n            reflooding (see Section 14.1).  Also, if the destination\
    \ is\n            still reachable, yet can no longer be advertised according\n\
    \            to the above procedure (e.g., it is now an inter-area route,\n  \
    \          when it used to be an intra-area route associated with some\n     \
    \       non-backbone area; it would thus no longer be advertisable\n         \
    \   to the backbone), the LSA should also be flushed from the\n            routing\
    \ domain.\n            12.4.3.1.  Originating summary-LSAs into stub areas\n \
    \               The algorithm in Section 12.4.3 is optional when Area A\n    \
    \            is an OSPF stub area. Area border routers connecting to\n       \
    \         a stub area can originate summary-LSAs into the area\n             \
    \   according to the Section 12.4.3's algorithm, or can\n                choose\
    \ to originate only a subset of the summary-LSAs,\n                possibly under\
    \ configuration control.  The fewer LSAs\n                originated, the smaller\
    \ the stub area's link state\n                database, further reducing the demands\
    \ on its routers'\n                resources. However, omitting LSAs may also\
    \ lead to sub-\n                optimal inter-area routing, although routing will\n\
    \                continue to function.\n                As specified in Section\
    \ 12.4.3, Type 4 summary-LSAs\n                (ASBR-summary-LSAs) are never originated\
    \ into stub\n                areas.\n                In a stub area, instead of\
    \ importing external routes\n                each area border router originates\
    \ a \"default summary-\n                LSA\" into the area. The Link State ID\
    \ for the default\n                summary-LSA is set to DefaultDestination, and\
    \ the metric\n                set to the (per-area) configurable parameter\n \
    \               StubDefaultCost.  Note that StubDefaultCost need not be\n    \
    \            configured identically in all of the stub area's area\n         \
    \       border routers.\n            12.4.3.2.  Examples of summary-LSAs\n   \
    \             Consider again the area configuration in Figure 6.\n           \
    \     Routers RT3, RT4, RT7, RT10 and RT11 are all area border\n             \
    \   routers, and therefore are originating summary-LSAs.\n                Consider\
    \ in particular Router RT4.  Its routing table\n                was calculated\
    \ as the example in Section 11.3.  RT4\n                originates summary-LSAs\
    \ into both the backbone and Area\n                1.  Into the backbone, Router\
    \ RT4 originates separate\n                LSAs for each of the networks N1-N4.\
    \  Into Area 1,\n                Router RT4 originates separate LSAs for networks\
    \ N6-N8\n                and the AS boundary routers RT5,RT7.  It also condenses\n\
    \                host routes Ia and Ib into a single summary-LSA.\n          \
    \      Finally, the routes to networks N9,N10,N11 and Host H1\n              \
    \  are advertised by a single summary-LSA.  This\n                condensation\
    \ was originally performed by the router\n                RT11.\n            \
    \    These LSAs are illustrated graphically in Figures 7 and\n               \
    \ 8.  Two of the summary-LSAs originated by Router RT4\n                follow.\
    \  The actual IP addresses for the networks and\n                routers in question\
    \ have been assigned in Figure 15.\n        ; Summary-LSA for Network N1,\n  \
    \      ; originated by Router RT4 into the backbone\n        LS age = 0      \
    \            ;always true on origination\n        Options = (E-bit)          \
    \ ;\n        LS type = 3                 ;Type 3 summary-LSA\n        Link State\
    \ ID = 192.1.2.0   ;N1's IP network number\n        Advertising Router = 192.1.1.4\
    \       ;RT4's ID\n        metric = 4\n        ; Summary-LSA for AS boundary router\
    \ RT7\n        ; originated by Router RT4 into Area 1\n        LS age = 0    \
    \              ;always true on origination\n        Options = (E-bit)        \
    \   ;\n        LS type = 4                 ;Type 4 summary-LSA\n        Link State\
    \ ID = Router RT7's ID\n        Advertising Router = 192.1.1.4       ;RT4's ID\n\
    \        metric = 14\n        12.4.4.  AS-external-LSAs\n            AS-external-LSAs\
    \ describe routes to destinations external to\n            the Autonomous System.\
    \  Most AS-external-LSAs describe\n            routes to specific external destinations;\
    \ in these cases the\n            LSA's Link State ID is set to the destination\
    \ network's IP\n            address (if necessary, the Link State ID can also\
    \ have one\n            or more of the network's \"host\" bits set; see Appendix\
    \ E for\n            details).  However, a default route for the Autonomous\n\
    \            System can be described in an AS-external-LSA by setting the\n  \
    \          LSA's Link State ID to DefaultDestination (0.0.0.0).  AS-\n       \
    \     external-LSAs are originated by AS boundary routers.  An AS\n          \
    \  boundary router originates a single AS-external-LSA for each\n            external\
    \ route that it has learned, either through another\n            routing protocol\
    \ (such as BGP), or through configuration\n            information.\n        \
    \    AS-external-LSAs are the only type of LSAs that are flooded\n           \
    \ throughout the entire Autonomous System; all other types of\n            LSAs\
    \ are specific to a single area.  However, AS-external-\n            LSAs are\
    \ not flooded into/throughout stub areas (see Section\n            3.6).  This\
    \ enables a reduction in link state database size\n            for routers internal\
    \ to stub areas.\n            The metric that is advertised for an external route\
    \ can be\n            one of two types.  Type 1 metrics are comparable to the\
    \ link\n            state metric.  Type 2 metrics are assumed to be larger than\n\
    \            the cost of any intra-AS path.\n            If a router advertises\
    \ an AS-external-LSA for a destination\n            which then becomes unreachable,\
    \ the router must then flush\n            the LSA from the routing domain by setting\
    \ its age to MaxAge\n            and reflooding (see Section 14.1).\n        \
    \    12.4.4.1.  Examples of AS-external-LSAs\n                Consider once again\
    \ the AS pictured in Figure 6.  There\n                are two AS boundary routers:\
    \ RT5 and RT7.  Router RT5\n                originates three AS-external-LSAs,\
    \ for networks N12-N14.\n                Router RT7 originates two AS-external-LSAs,\
    \ for networks\n                N12 and N15.  Assume that RT7 has learned its\
    \ route to\n                N12 via BGP, and that it wishes to advertise a Type\
    \ 2\n                metric to the AS.  RT7 would then originate the\n       \
    \         following LSA for N12:\n        ; AS-external-LSA for Network N12,\n\
    \        ; originated by Router RT7\n        LS age = 0                  ;always\
    \ true on origination\n        Options = (E-bit)           ;\n        LS type\
    \ = 5                 ;AS-external-LSA\n        Link State ID = N12's IP network\
    \ number\n        Advertising Router = Router RT7's ID\n        bit E = 1    \
    \               ;Type 2 metric\n        metric = 2\n        Forwarding address\
    \ = 0.0.0.0\n                    In the above example, the forwarding address\
    \ field\n                    has been set to 0.0.0.0, indicating that packets\
    \ for\n                    the external destination should be forwarded to the\n\
    \                    advertising OSPF router (RT7).  This is not always\n    \
    \                desirable.  Consider the example pictured in Figure\n       \
    \             16.  There are three OSPF routers (RTA, RTB and RTC)\n         \
    \           connected to a common network.  Only one of these\n              \
    \      routers, RTA, is exchanging BGP information with the\n                \
    \    non-OSPF router RTX.  RTA must then originate AS-\n                    external-LSAs\
    \ for those destinations it has learned\n                    from RTX.  By using\
    \ the AS-external-LSA's forwarding\n                    address field, RTA can\
    \ specify that packets for\n                    these destinations be forwarded\
    \ directly to RTX.\n                    Without this feature, Routers RTB and\
    \ RTC would take\n                    an extra hop to get to these destinations.\n\
    \                    Note that when the forwarding address field is non-\n   \
    \                 zero, it should point to a router belonging to\n           \
    \         another Autonomous System.\n                    A forwarding address\
    \ can also be specified for the\n                    default route.  For example,\
    \ in figure 16 RTA may\n                    want to specify that all externally-destined\
    \ packets\n                    should by default be forwarded to its BGP peer\
    \ RTX.\n                    The resulting AS-external-LSA is pictured below.\n\
    \                    Note that the Link State ID is set to\n                 \
    \   DefaultDestination.\n        ; Default route, originated by Router RTA\n \
    \       ; Packets forwarded through RTX\n        LS age = 0                  ;always\
    \ true on origination\n        Options = (E-bit)           ;\n        LS type\
    \ = 5                 ;AS-external-LSA\n        Link State ID = DefaultDestination\
    \  ; default route\n        Advertising Router = Router RTA's ID\n        bit\
    \ E = 1                   ;Type 2 metric\n        metric = 1\n        Forwarding\
    \ address = RTX's IP address\n                    In figure 16, suppose instead\
    \ that both RTA and RTB\n                    exchange BGP information with RTX.\
    \  In this case,\n                    RTA and RTB would originate the same set\
    \ of AS-\n                    external-LSAs.  These LSAs, if they specify the\
    \ same\n                    metric, would be functionally equivalent since they\n\
    \                    would specify the same destination and forwarding\n     \
    \               address (RTX).  This leads to a clear duplication of\n       \
    \             effort.  If only one of RTA or RTB originated the\n            \
    \        set of AS-external-LSAs, the routing would remain\n                 \
    \   the same, and the size of the link state database\n                    would\
    \ decrease.  However, it must be unambiguously\n                    defined as\
    \ to which router originates the LSAs\n                    (otherwise neither\
    \ may, or the identity of the\n                    originator may oscillate).\
    \  The following rule is\n                    thereby established: if two routers,\
    \ both reachable\n                    from one another, originate functionally\
    \ equivalent\n                    AS-external-LSAs (i.e., same destination, cost\
    \ and\n                    non-zero forwarding address), then the LSA\n      \
    \              originated by the router having the highest OSPF\n            \
    \        Router ID is used.  The router having the lower OSPF\n              \
    \      Router ID can then flush its LSA.  Flushing an LSA\n                  \
    \  is discussed in Section 14.1.\n                                +\n        \
    \                        |\n                      +---+.....|.BGP\n          \
    \            |RTA|-----|.....+---+\n                      +---+     |-----|RTX|\n\
    \                                |     +---+\n                      +---+    \
    \ |\n                      |RTB|-----|\n                      +---+     |\n  \
    \                              |\n                      +---+     |\n        \
    \              |RTC|-----|\n                      +---+     |\n              \
    \                  |\n                                +\n               Figure\
    \ 16: Forwarding address example\n"
- title: 13.  The Flooding Procedure
  contents:
  - "13.  The Flooding Procedure\n    Link State Update packets provide the mechanism\
    \ for flooding LSAs.\n    A Link State Update packet may contain several distinct\
    \ LSAs, and\n    floods each LSA one hop further from its point of origination.\
    \  To\n    make the flooding procedure reliable, each LSA must be acknowledged\n\
    \    separately.  Acknowledgments are transmitted in Link State\n    Acknowledgment\
    \ packets.  Many separate acknowledgments can also be\n    grouped together into\
    \ a single packet.\n    The flooding procedure starts when a Link State Update\
    \ packet has\n    been received.  Many consistency checks have been made on the\n\
    \    received packet before being handed to the flooding procedure (see\n    Section\
    \ 8.2).  In particular, the Link State Update packet has been\n    associated\
    \ with a particular neighbor, and a particular area.  If\n    the neighbor is\
    \ in a lesser state than Exchange, the packet should\n    be dropped without further\
    \ processing.\n    All types of LSAs, other than AS-external-LSAs, are associated\
    \ with\n    a specific area.  However, LSAs do not contain an area field.  An\n\
    \    LSA's area must be deduced from the Link State Update packet header.\n  \
    \  For each LSA contained in a Link State Update packet, the following\n    steps\
    \ are taken:\n    (1) Validate the LSA's LS checksum.  If the checksum turns out\
    \ to be\n        invalid, discard the LSA and get the next one from the Link\n\
    \        State Update packet.\n    (2) Examine the LSA's LS type.  If the LS type\
    \ is unknown, discard\n        the LSA and get the next one from the Link State\
    \ Update Packet.\n        This specification defines LS types 1-5 (see Section\
    \ 4.3).\n    (3) Else if this is an AS-external-LSA (LS type = 5), and the area\n\
    \        has been configured as a stub area, discard the LSA and get the\n   \
    \     next one from the Link State Update Packet.  AS-external-LSAs\n        are\
    \ not flooded into/throughout stub areas (see Section 3.6).\n    (4) Else if the\
    \ LSA's LS age is equal to MaxAge, and there is\n        currently no instance\
    \ of the LSA in the router's link state\n        database, and none of router's\
    \ neighbors are in states Exchange\n        or Loading, then take the following\
    \ actions: a) Acknowledge the\n        receipt of the LSA by sending a Link State\
    \ Acknowledgment packet\n        back to the sending neighbor (see Section 13.5),\
    \ and b) Discard\n        the LSA and examine the next LSA (if any) listed in\
    \ the Link\n        State Update packet.\n    (5) Otherwise, find the instance\
    \ of this LSA that is currently\n        contained in the router's link state\
    \ database.  If there is no\n        database copy, or the received LSA is more\
    \ recent than the\n        database copy (see Section 13.1 below for the determination\
    \ of\n        which LSA is more recent) the following steps must be performed:\n\
    \        (a) If there is already a database copy, and if the database\n      \
    \      copy was received via flooding and installed less than\n            MinLSArrival\
    \ seconds ago, discard the new LSA (without\n            acknowledging it) and\
    \ examine the next LSA (if any) listed\n            in the Link State Update packet.\n\
    \        (b) Otherwise immediately flood the new LSA out some subset of\n    \
    \        the router's interfaces (see Section 13.3).  In some cases\n        \
    \    (e.g., the state of the receiving interface is DR and the\n            LSA\
    \ was received from a router other than the Backup DR) the\n            LSA will\
    \ be flooded back out the receiving interface.  This\n            occurrence should\
    \ be noted for later use by the\n            acknowledgment process (Section 13.5).\n\
    \        (c) Remove the current database copy from all neighbors' Link\n     \
    \       state retransmission lists.\n        (d) Install the new LSA in the link\
    \ state database (replacing\n            the current database copy).  This may\
    \ cause the routing\n            table calculation to be scheduled.  In addition,\
    \ timestamp\n            the new LSA with the current time (i.e., the time it\
    \ was\n            received).  The flooding procedure cannot overwrite the\n \
    \           newly installed LSA until MinLSArrival seconds have elapsed.\n   \
    \         The LSA installation process is discussed further in Section\n     \
    \       13.2.\n        (e) Possibly acknowledge the receipt of the LSA by sending\
    \ a\n            Link State Acknowledgment packet back out the receiving\n   \
    \         interface.  This is explained below in Section 13.5.\n        (f) If\
    \ this new LSA indicates that it was originated by the\n            receiving\
    \ router itself (i.e., is considered a self-\n            originated LSA), the\
    \ router must take special action, either\n            updating the LSA or in\
    \ some cases flushing it from the\n            routing domain. For a description\
    \ of how self-originated\n            LSAs are detected and subsequently handled,\
    \ see Section\n            13.4.\n    (6) Else, if there is an instance of the\
    \ LSA on the sending\n        neighbor's Link state request list, an error has\
    \ occurred in the\n        Database Exchange process.  In this case, restart the\
    \ Database\n        Exchange process by generating the neighbor event BadLSReq\
    \ for\n        the sending neighbor and stop processing the Link State Update\n\
    \        packet.\n    (7) Else, if the received LSA is the same instance as the\
    \ database\n        copy (i.e., neither one is more recent) the following two\
    \ steps\n        should be performed:\n        (a) If the LSA is listed in the\
    \ Link state retransmission list\n            for the receiving adjacency, the\
    \ router itself is expecting\n            an acknowledgment for this LSA.  The\
    \ router should treat the\n            received LSA as an acknowledgment by removing\
    \ the LSA from\n            the Link state retransmission list.  This is termed\
    \ an\n            \"implied acknowledgment\".  Its occurrence should be noted\n\
    \            for later use by the acknowledgment process (Section 13.5).\n   \
    \     (b) Possibly acknowledge the receipt of the LSA by sending a\n         \
    \   Link State Acknowledgment packet back out the receiving\n            interface.\
    \  This is explained below in Section 13.5.\n    (8) Else, the database copy is\
    \ more recent.  If the database copy\n        has LS age equal to MaxAge and LS\
    \ sequence number equal to\n        MaxSequenceNumber, simply discard the received\
    \ LSA without\n        acknowledging it. (In this case, the LSA's LS sequence\
    \ number is\n        wrapping, and the MaxSequenceNumber LSA must be completely\n\
    \        flushed before any new LSA instance can be introduced).\n        Otherwise,\
    \ as long as the database copy has not been sent in a\n        Link State Update\
    \ within the last MinLSArrival seconds, send the\n        database copy back to\
    \ the sending neighbor, encapsulated within\n        a Link State Update Packet.\
    \ The Link State Update Packet should\n        be sent directly to the neighbor.\
    \ In so doing, do not put the\n        database copy of the LSA on the neighbor's\
    \ link state\n        retransmission list, and do not acknowledge the received\
    \ (less\n        recent) LSA instance.\n    13.1.  Determining which LSA is newer\n\
    \        When a router encounters two instances of an LSA, it must\n        determine\
    \ which is more recent.  This occurred above when\n        comparing a received\
    \ LSA to its database copy.  This comparison\n        must also be done during\
    \ the Database Exchange procedure which\n        occurs during adjacency bring-up.\n\
    \        An LSA is identified by its LS type, Link State ID and\n        Advertising\
    \ Router.  For two instances of the same LSA, the LS\n        sequence number,\
    \ LS age, and LS checksum fields are used to\n        determine which instance\
    \ is more recent:\n        o   The LSA having the newer LS sequence number is\
    \ more recent.\n            See Section 12.1.6 for an explanation of the LS sequence\n\
    \            number space.  If both instances have the same LS sequence\n    \
    \        number, then:\n        o   If the two instances have different LS checksums,\
    \ then the\n            instance having the larger LS checksum (when considered\
    \ as a\n            16-bit unsigned integer) is considered more recent.\n    \
    \    o   Else, if only one of the instances has its LS age field set\n       \
    \     to MaxAge, the instance of age MaxAge is considered to be\n            more\
    \ recent.\n        o   Else, if the LS age fields of the two instances differ\
    \ by\n            more than MaxAgeDiff, the instance having the smaller\n    \
    \        (younger) LS age is considered to be more recent.\n        o   Else,\
    \ the two instances are considered to be identical.\n    13.2.  Installing LSAs\
    \ in the database\n        Installing a new LSA in the database, either as the\
    \ result of\n        flooding or a newly self-originated LSA, may cause the OSPF\n\
    \        routing table structure to be recalculated.  The contents of the\n  \
    \      new LSA should be compared to the old instance, if present.  If\n     \
    \   there is no difference, there is no need to recalculate the\n        routing\
    \ table. When comparing an LSA to its previous instance,\n        the following\
    \ are all considered to be differences in contents:\n            o   The LSA's\
    \ Options field has changed.\n            o   One of the LSA instances has LS\
    \ age set to MaxAge, and\n                the other does not.\n            o \
    \  The length field in the LSA header has changed.\n            o   The body of\
    \ the LSA (i.e., anything outside the 20-byte\n                LSA header) has\
    \ changed. Note that this excludes changes\n                in LS Sequence Number\
    \ and LS Checksum.\n        If the contents are different, the following pieces\
    \ of the\n        routing table must be recalculated, depending on the new LSA's\n\
    \        LS type field:\n        Router-LSAs and network-LSAs\n            The\
    \ entire routing table must be recalculated, starting with\n            the shortest\
    \ path calculations for each area (not just the\n            area whose link-state\
    \ database has changed).  The reason\n            that the shortest path calculation\
    \ cannot be restricted to\n            the single changed area has to do with\
    \ the fact that AS\n            boundary routers may belong to multiple areas.\
    \  A change in\n            the area currently providing the best route may force\
    \ the\n            router to use an intra-area route provided by a different\n\
    \            area.[19]\n        Summary-LSAs\n            The best route to the\
    \ destination described by the summary-\n            LSA must be recalculated\
    \ (see Section 16.5).  If this\n            destination is an AS boundary router,\
    \ it may also be\n            necessary to re-examine all the AS-external-LSAs.\n\
    \        AS-external-LSAs\n            The best route to the destination described\
    \ by the AS-\n            external-LSA must be recalculated (see Section 16.6).\n\
    \        Also, any old instance of the LSA must be removed from the\n        database\
    \ when the new LSA is installed.  This old instance must\n        also be removed\
    \ from all neighbors' Link state retransmission\n        lists (see Section 10).\n\
    \    13.3.  Next step in the flooding procedure\n        When a new (and more\
    \ recent) LSA has been received, it must be\n        flooded out some set of the\
    \ router's interfaces.  This section\n        describes the second part of flooding\
    \ procedure (the first part\n        being the processing that occurred in Section\
    \ 13), namely,\n        selecting the outgoing interfaces and adding the LSA to\
    \ the\n        appropriate neighbors' Link state retransmission lists.  Also\n\
    \        included in this part of the flooding procedure is the\n        maintenance\
    \ of the neighbors' Link state request lists.\n        This section is equally\
    \ applicable to the flooding of an LSA\n        that the router itself has just\
    \ originated (see Section 12.4).\n        For these LSAs, this section provides\
    \ the entirety of the\n        flooding procedure (i.e., the processing of Section\
    \ 13 is not\n        performed, since, for example, the LSA has not been received\n\
    \        from a neighbor and therefore does not need to be acknowledged).\n  \
    \      Depending upon the LSA's LS type, the LSA can be flooded out\n        only\
    \ certain interfaces.  These interfaces, defined by the\n        following, are\
    \ called the eligible interfaces:\n        AS-external-LSAs (LS Type = 5)\n  \
    \          AS-external-LSAs are flooded throughout the entire AS, with\n     \
    \       the exception of stub areas (see Section 3.6).  The eligible\n       \
    \     interfaces are all the router's interfaces, excluding\n            virtual\
    \ links and those interfaces attaching to stub areas.\n        All other LS types\n\
    \            All other types are specific to a single area (Area A).  The\n  \
    \          eligible interfaces are all those interfaces attaching to\n       \
    \     the Area A.  If Area A is the backbone, this includes all\n            the\
    \ virtual links.\n        Link state databases must remain synchronized over all\n\
    \        adjacencies associated with the above eligible interfaces.  This\n  \
    \      is accomplished by executing the following steps on each\n        eligible\
    \ interface.  It should be noted that this procedure may\n        decide not to\
    \ flood an LSA out a particular interface, if there\n        is a high probability\
    \ that the attached neighbors have already\n        received the LSA.  However,\
    \ in these cases the flooding\n        procedure must be absolutely sure that\
    \ the neighbors eventually\n        do receive the LSA, so the LSA is still added\
    \ to each\n        adjacency's Link state retransmission list.  For each eligible\n\
    \        interface:\n        (1) Each of the neighbors attached to this interface\
    \ are\n            examined, to determine whether they must receive the new\n\
    \            LSA.  The following steps are executed for each neighbor:\n     \
    \       (a) If the neighbor is in a lesser state than Exchange, it\n         \
    \       does not participate in flooding, and the next neighbor\n            \
    \    should be examined.\n            (b) Else, if the adjacency is not yet full\
    \ (neighbor state\n                is Exchange or Loading), examine the Link state\
    \ request\n                list associated with this adjacency.  If there is an\n\
    \                instance of the new LSA on the list, it indicates that\n    \
    \            the neighboring router has an instance of the LSA\n             \
    \   already.  Compare the new LSA to the neighbor's copy:\n                o \
    \  If the new LSA is less recent, then examine the next\n                    neighbor.\n\
    \                o   If the two copies are the same instance, then delete\n  \
    \                  the LSA from the Link state request list, and\n           \
    \         examine the next neighbor.[20]\n                o   Else, the new LSA\
    \ is more recent.  Delete the LSA\n                    from the Link state request\
    \ list.\n            (c) If the new LSA was received from this neighbor, examine\n\
    \                the next neighbor.\n            (d) At this point we are not\
    \ positive that the neighbor has\n                an up-to-date instance of this\
    \ new LSA.  Add the new LSA\n                to the Link state retransmission\
    \ list for the adjacency.\n                This ensures that the flooding procedure\
    \ is reliable;\n                the LSA will be retransmitted at intervals until\
    \ an\n                acknowledgment is seen from the neighbor.\n        (2) The\
    \ router must now decide whether to flood the new LSA out\n            this interface.\
    \  If in the previous step, the LSA was NOT\n            added to any of the Link\
    \ state retransmission lists, there\n            is no need to flood the LSA out\
    \ the interface and the next\n            interface should be examined.\n    \
    \    (3) If the new LSA was received on this interface, and it was\n         \
    \   received from either the Designated Router or the Backup\n            Designated\
    \ Router, chances are that all the neighbors have\n            received the LSA\
    \ already.  Therefore, examine the next\n            interface.\n        (4) If\
    \ the new LSA was received on this interface, and the\n            interface state\
    \ is Backup (i.e., the router itself is the\n            Backup Designated Router),\
    \ examine the next interface.  The\n            Designated Router will do the\
    \ flooding on this interface.\n            However, if the Designated Router fails\
    \ the router (i.e.,\n            the Backup Designated Router) will end up retransmitting\
    \ the\n            updates.\n        (5) If this step is reached, the LSA must\
    \ be flooded out the\n            interface.  Send a Link State Update packet\
    \ (including the\n            new LSA as contents) out the interface.  The LSA's\
    \ LS age\n            must be incremented by InfTransDelay (which must be > 0)\n\
    \            when it is copied into the outgoing Link State Update packet\n  \
    \          (until the LS age field reaches the maximum value of\n            MaxAge).\n\
    \            On broadcast networks, the Link State Update packets are\n      \
    \      multicast.  The destination IP address specified for the\n            Link\
    \ State Update Packet depends on the state of the\n            interface.  If\
    \ the interface state is DR or Backup, the\n            address AllSPFRouters\
    \ should be used.  Otherwise, the\n            address AllDRouters should be used.\n\
    \            On non-broadcast networks, separate Link State Update\n         \
    \   packets must be sent, as unicasts, to each adjacent neighbor\n           \
    \ (i.e., those in state Exchange or greater).  The destination\n            IP\
    \ addresses for these packets are the neighbors' IP\n            addresses.\n\
    \    13.4.  Receiving self-originated LSAs\n        It is a common occurrence\
    \ for a router to receive self-\n        originated LSAs via the flooding procedure.\
    \ A self-originated\n        LSA is detected when either 1) the LSA's Advertising\
    \ Router is\n        equal to the router's own Router ID or 2) the LSA is a network-\n\
    \        LSA and its Link State ID is equal to one of the router's own IP\n  \
    \      interface addresses.\n        However, if the received self-originated\
    \ LSA is newer than the\n        last instance that the router actually originated,\
    \ the router\n        must take special action.  The reception of such an LSA\n\
    \        indicates that there are LSAs in the routing domain that were\n     \
    \   originated by the router before the last time it was restarted.\n        In\
    \ most cases, the router must then advance the LSA's LS\n        sequence number\
    \ one past the received LS sequence number, and\n        originate a new instance\
    \ of the LSA.\n        It may be the case the router no longer wishes to originate\
    \ the\n        received LSA. Possible examples include: 1) the LSA is a\n    \
    \    summary-LSA or AS-external-LSA and the router no longer has an\n        (advertisable)\
    \ route to the destination, 2) the LSA is a\n        network-LSA but the router\
    \ is no longer Designated Router for\n        the network or 3) the LSA is a network-LSA\
    \ whose Link State ID\n        is one of the router's own IP interface addresses\
    \ but whose\n        Advertising Router is not equal to the router's own Router\
    \ ID\n        (this latter case should be rare, and it indicates that the\n  \
    \      router's Router ID has changed since originating the LSA).  In\n      \
    \  all these cases, instead of updating the LSA, the LSA should be\n        flushed\
    \ from the routing domain by incrementing the received\n        LSA's LS age to\
    \ MaxAge and reflooding (see Section 14.1).\n    13.5.  Sending Link State Acknowledgment\
    \ packets\n        Each newly received LSA must be acknowledged.  This is usually\n\
    \        done by sending Link State Acknowledgment packets.  However,\n      \
    \  acknowledgments can also be accomplished implicitly by sending\n        Link\
    \ State Update packets (see step 7a of Section 13).\n        Many acknowledgments\
    \ may be grouped together into a single Link\n        State Acknowledgment packet.\
    \  Such a packet is sent back out the\n        interface which received the LSAs.\
    \  The packet can be sent in\n        one of two ways: delayed and sent on an\
    \ interval timer, or sent\n        directly to a particular neighbor.  The particular\n\
    \        acknowledgment strategy used depends on the circumstances\n        surrounding\
    \ the receipt of the LSA.\n        Sending delayed acknowledgments accomplishes\
    \ several things: 1)\n        it facilitates the packaging of multiple acknowledgments\
    \ in a\n        single Link State Acknowledgment packet, 2) it enables a single\n\
    \        Link State Acknowledgment packet to indicate acknowledgments to\n   \
    \     several neighbors at once (through multicasting) and 3) it\n        randomizes\
    \ the Link State Acknowledgment packets sent by the\n        various routers attached\
    \ to a common network.  The fixed\n        interval between a router's delayed\
    \ transmissions must be short\n        (less than RxmtInterval) or needless retransmissions\
    \ will ensue.\n        Direct acknowledgments are sent directly to a particular\n\
    \        neighbor in response to the receipt of duplicate LSAs. Direct\n     \
    \   acknowledgments are sent immediately when the duplicate is\n        received.\
    \ On multi-access networks, these acknowledgments are\n        sent directly to\
    \ the neighbor's IP address.\n        The precise procedure for sending Link State\
    \ Acknowledgment\n        packets is described in Table 19.  The circumstances\
    \ surrounding\n        the receipt of the LSA are listed in the left column. \
    \ The\n        acknowledgment action then taken is listed in one of the two\n\
    \        right columns.  This action depends on the state of the\n        concerned\
    \ interface; interfaces in state Backup behave\n        differently from interfaces\
    \ in all other states.  Delayed\n        acknowledgments must be delivered to\
    \ all adjacent routers\n        associated with the interface.  On broadcast networks,\
    \ this is\n        accomplished by sending the delayed Link State Acknowledgment\n\
    \        packets as multicasts.  The Destination IP address used depends\n   \
    \                                  Action taken in state\n   Circumstances   \
    \         Backup                All other states\n   _________________________________________________________________\n\
    \   LSA  has                 No  acknowledgment    No  acknowledgment\n   been\
    \  flooded back       sent.                 sent.\n   out receiving  in-\n   terface\
    \  (see Sec-\n   tion 13, step 5b).\n   _________________________________________________________________\n\
    \   LSA   is                 Delayed acknowledg-   Delayed       ack-\n   more\
    \  recent  than       ment sent if adver-   nowledgment sent.\n   database copy,\
    \ but       tisement   received\n   was   not  flooded       from    Designated\n\
    \   back out receiving       Router,  otherwise\n   interface                do\
    \ nothing\n   _________________________________________________________________\n\
    \   LSA is a                 Delayed acknowledg-   No  acknowledgment\n   duplicate,\
    \ and was       ment sent if adver-   sent.\n   treated as an  im-       tisement\
    \   received\n   plied  acknowledg-       from    Designated\n   ment (see  Section\
    \       Router,  otherwise\n   13, step 7a).            do nothing\n   _________________________________________________________________\n\
    \   LSA is a                 Direct acknowledg-    Direct acknowledg-\n   duplicate,\
    \ and was       ment sent.            ment sent.\n   not treated as  an\n   implied\
    \       ack-\n   nowledgment.\n   _________________________________________________________________\n\
    \   LSA's LS                 Direct acknowledg-    Direct acknowledg-\n   age\
    \ is equal to          ment sent.            ment sent.\n   MaxAge, and there\
    \ is\n   no current instance\n   of the LSA\n   in the link state\n   database,\
    \ and none\n   of router's neighbors\n   are in states Exchange\n   or Loading\
    \ (see\n   Section 13, step 4).\n             Table 19: Sending link state acknowledgements.\n\
    \        on the state of the interface.  If the interface state is DR or\n   \
    \     Backup, the destination AllSPFRouters is used.  In all other\n        states,\
    \ the destination AllDRouters is used.  On non-broadcast\n        networks, delayed\
    \ Link State Acknowledgment packets must be\n        unicast separately over each\
    \ adjacency (i.e., neighbor whose\n        state is >= Exchange).\n        The\
    \ reasoning behind sending the above packets as multicasts is\n        best explained\
    \ by an example.  Consider the network\n        configuration depicted in Figure\
    \ 15.  Suppose RT4 has been\n        elected as Designated Router, and RT3 as\
    \ Backup Designated\n        Router for the network N3.  When Router RT4 floods\
    \ a new LSA to\n        Network N3, it is received by routers RT1, RT2, and RT3.\
    \  These\n        routers will not flood the LSA back onto net N3, but they still\n\
    \        must ensure that their link-state databases remain synchronized\n   \
    \     with their adjacent neighbors.  So RT1, RT2, and RT4 are waiting\n     \
    \   to see an acknowledgment from RT3.  Likewise, RT4 and RT3 are\n        both\
    \ waiting to see acknowledgments from RT1 and RT2.  This is\n        best achieved\
    \ by sending the acknowledgments as multicasts.\n        The reason that the acknowledgment\
    \ logic for Backup DRs is\n        slightly different is because they perform\
    \ differently during\n        the flooding of LSAs (see Section 13.3, step 4).\n\
    \    13.6.  Retransmitting LSAs\n        LSAs flooded out an adjacency are placed\
    \ on the adjacency's Link\n        state retransmission list.  In order to ensure\
    \ that flooding is\n        reliable, these LSAs are retransmitted until they\
    \ are\n        acknowledged.  The length of time between retransmissions is a\n\
    \        configurable per-interface value, RxmtInterval.  If this is set\n   \
    \     too low for an interface, needless retransmissions will ensue.\n       \
    \ If the value is set too high, the speed of the flooding, in the\n        face\
    \ of lost packets, may be affected.\n        Several retransmitted LSAs may fit\
    \ into a single Link State\n        Update packet.  When LSAs are to be retransmitted,\
    \ only the\n        number fitting in a single Link State Update packet should\
    \ be\n        sent.  Another packet of retransmissions can be sent whenever\n\
    \        some of the LSAs are acknowledged, or on the next firing of the\n   \
    \     retransmission timer.\n        Link State Update Packets carrying retransmissions\
    \ are always\n        sent directly to the neighbor. On multi-access networks,\
    \ this\n        means that retransmissions are sent directly to the neighbor's\n\
    \        IP address.  Each LSA's LS age must be incremented by\n        InfTransDelay\
    \ (which must be > 0) when it is copied into the\n        outgoing Link State\
    \ Update packet (until the LS age field\n        reaches the maximum value of\
    \ MaxAge).\n        If an adjacent router goes down, retransmissions may occur\
    \ until\n        the adjacency is destroyed by OSPF's Hello Protocol.  When the\n\
    \        adjacency is destroyed, the Link state retransmission list is\n     \
    \   cleared.\n    13.7.  Receiving link state acknowledgments\n        Many consistency\
    \ checks have been made on a received Link State\n        Acknowledgment packet\
    \ before it is handed to the flooding\n        procedure.  In particular, it has\
    \ been associated with a\n        particular neighbor.  If this neighbor is in\
    \ a lesser state than\n        Exchange, the Link State Acknowledgment packet\
    \ is discarded.\n        Otherwise, for each acknowledgment in the Link State\n\
    \        Acknowledgment packet, the following steps are performed:\n        o\
    \   Does the LSA acknowledged have an instance on the Link state\n           \
    \ retransmission list for the neighbor?  If not, examine the\n            next\
    \ acknowledgment.  Otherwise:\n        o   If the acknowledgment is for the same\
    \ instance that is\n            contained on the list, remove the item from the\
    \ list and\n            examine the next acknowledgment.  Otherwise:\n       \
    \ o   Log the questionable acknowledgment, and examine the next\n            one.\n"
- title: 14.  Aging The Link State Database
  contents:
  - "14.  Aging The Link State Database\n    Each LSA has an LS age field.  The LS\
    \ age is expressed in seconds.\n    An LSA's LS age field is incremented while\
    \ it is contained in a\n    router's database.  Also, when copied into a Link\
    \ State Update\n    Packet for flooding out a particular interface, the LSA's\
    \ LS age is\n    incremented by InfTransDelay.\n    An LSA's LS age is never incremented\
    \ past the value MaxAge.  LSAs\n    having age MaxAge are not used in the routing\
    \ table calculation.  As\n    a router ages its link state database, an LSA's\
    \ LS age may reach\n    MaxAge.[21] At this time, the router must attempt to flush\
    \ the LSA\n    from the routing domain.  This is done simply by reflooding the\n\
    \    MaxAge LSA just as if it was a newly originated LSA (see Section\n    13.3).\n\
    \    When creating a Database summary list for a newly forming adjacency,\n  \
    \  any MaxAge LSAs present in the link state database are added to the\n    neighbor's\
    \ Link state retransmission list instead of the neighbor's\n    Database summary\
    \ list.  See Section 10.3 for more details.\n    A MaxAge LSA must be removed\
    \ immediately from the router's link\n    state database as soon as both a) it\
    \ is no longer contained on any\n    neighbor Link state retransmission lists\
    \ and b) none of the router's\n    neighbors are in states Exchange or Loading.\n\
    \    When, in the process of aging the link state database, an LSA's LS\n    age\
    \ hits a multiple of CheckAge, its LS checksum should be verified.\n    If the\
    \ LS checksum is incorrect, a program or memory error has been\n    detected,\
    \ and at the very least the router itself should be\n    restarted.\n    14.1.\
    \  Premature aging of LSAs\n        An LSA can be flushed from the routing domain\
    \ by setting its LS\n        age to MaxAge, while leaving its LS sequence number\
    \ alone, and\n        then reflooding the LSA.  This procedure follows the same\
    \ course\n        as flushing an LSA whose LS age has naturally reached the value\n\
    \        MaxAge (see Section 14).  In particular, the MaxAge LSA is\n        removed\
    \ from the router's link state database as soon as a) it\n        is no longer\
    \ contained on any neighbor Link state retransmission\n        lists and b) none\
    \ of the router's neighbors are in states\n        Exchange or Loading.  We call\
    \ the setting of an LSA's LS age to\n        MaxAge \"premature aging\".\n   \
    \     Premature aging is used when it is time for a self-originated\n        LSA's\
    \ sequence number field to wrap.  At this point, the current\n        LSA instance\
    \ (having LS sequence number MaxSequenceNumber) must\n        be prematurely aged\
    \ and flushed from the routing domain before a\n        new instance with sequence\
    \ number equal to InitialSequenceNumber\n        can be originated.  See Section\
    \ 12.1.6 for more information.\n        Premature aging can also be used when,\
    \ for example, one of the\n        router's previously advertised external routes\
    \ is no longer\n        reachable.  In this circumstance, the router can flush\
    \ its AS-\n        external-LSA from the routing domain via premature aging. This\n\
    \        procedure is preferable to the alternative, which is to\n        originate\
    \ a new LSA for the destination specifying a metric of\n        LSInfinity.  Premature\
    \ aging is also be used when unexpectedly\n        receiving self-originated LSAs\
    \ during the flooding procedure\n        (see Section 13.4).\n        A router\
    \ may only prematurely age its own self-originated LSAs.\n        The router may\
    \ not prematurely age LSAs that have been\n        originated by other routers.\
    \ An LSA is considered self-\n        originated when either 1) the LSA's Advertising\
    \ Router is equal\n        to the router's own Router ID or 2) the LSA is a network-LSA\
    \ and\n        its Link State ID is equal to one of the router's own IP\n    \
    \    interface addresses.\n"
- title: 15.  Virtual Links
  contents:
  - "15.  Virtual Links\n    The single backbone area (Area ID = 0.0.0.0) cannot be\
    \ disconnected,\n    or some areas of the Autonomous System will become unreachable.\
    \  To\n    establish/maintain connectivity of the backbone, virtual links can\n\
    \    be configured through non-backbone areas.  Virtual links serve to\n    connect\
    \ physically separate components of the backbone.  The two\n    endpoints of a\
    \ virtual link are area border routers.  The virtual\n    link must be configured\
    \ in both routers.  The configuration\n    information in each router consists\
    \ of the other virtual endpoint\n    (the other area border router), and the non-backbone\
    \ area the two\n    routers have in common (called the Transit area).  Virtual\
    \ links\n    cannot be configured through stub areas (see Section 3.6).\n    The\
    \ virtual link is treated as if it were an unnumbered point-to-\n    point network\
    \ belonging to the backbone and joining the two area\n    border routers.  An\
    \ attempt is made to establish an adjacency over\n    the virtual link.  When\
    \ this adjacency is established, the virtual\n    link will be included in backbone\
    \ router-LSAs, and OSPF packets\n    pertaining to the backbone area will flow\
    \ over the adjacency.  Such\n    an adjacency has been referred to in this document\
    \ as a \"virtual\n    adjacency\".\n    In each endpoint router, the cost and\
    \ viability of the virtual link\n    is discovered by examining the routing table\
    \ entry for the other\n    endpoint router.  (The entry's associated area must\
    \ be the\n    configured Transit area).  This is called the virtual link's\n \
    \   corresponding routing table entry.  The InterfaceUp event occurs for\n   \
    \ a virtual link when its corresponding routing table entry becomes\n    reachable.\
    \  Conversely, the InterfaceDown event occurs when its\n    routing table entry\
    \ becomes unreachable.  In other words, the\n    virtual link's viability is determined\
    \ by the existence of an\n    intra-area path, through the Transit area, between\
    \ the two\n    endpoints.  Note that a virtual link whose underlying path has\
    \ cost\n    greater than hexadecimal 0xffff (the maximum size of an interface\n\
    \    cost in a router-LSA) should be considered inoperational (i.e.,\n    treated\
    \ the same as if the path did not exist).\n    The other details concerning virtual\
    \ links are as follows:\n    o   AS-external-LSAs are NEVER flooded over virtual\
    \ adjacencies.\n        This would be duplication of effort, since the same AS-\n\
    \        external-LSAs are already flooded throughout the virtual link's\n   \
    \     Transit area.  For this same reason, AS-external-LSAs are not\n        summarized\
    \ over virtual adjacencies during the Database Exchange\n        process.\n  \
    \  o   The cost of a virtual link is NOT configured.  It is defined to\n     \
    \   be the cost of the intra-area path between the two defining area\n       \
    \ border routers.  This cost appears in the virtual link's\n        corresponding\
    \ routing table entry.  When the cost of a virtual\n        link changes, a new\
    \ router-LSA should be originated for the\n        backbone area.\n    o   Just\
    \ as the virtual link's cost and viability are determined by\n        the routing\
    \ table build process (through construction of the\n        routing table entry\
    \ for the other endpoint), so are the IP\n        interface address for the virtual\
    \ interface and the virtual\n        neighbor's IP address.  These are used when\
    \ sending OSPF\n        protocol packets over the virtual link. Note that when\
    \ one (or\n        both) of the virtual link endpoints connect to the Transit\
    \ area\n        via an unnumbered point-to-point link, it may be impossible to\n\
    \        calculate either the virtual interface's IP address and/or the\n    \
    \    virtual neighbor's IP address, thereby causing the virtual link\n       \
    \ to fail.\n    o   In each endpoint's router-LSA for the backbone, the virtual\
    \ link\n        is represented as a Type 4 link whose Link ID is set to the\n\
    \        virtual neighbor's OSPF Router ID and whose Link Data is set to\n   \
    \     the virtual interface's IP address.  See Section 12.4.1 for more\n     \
    \   information.\n    o   A non-backbone area can carry transit data traffic (i.e.,\
    \ is\n        considered a \"transit area\") if and only if it serves as the\n\
    \        Transit area for one or more fully adjacent virtual links (see\n    \
    \    TransitCapability in Sections 6 and 16.1). Such an area requires\n      \
    \  special treatment when summarizing backbone networks into it\n        (see\
    \ Section 12.4.3), and during the routing calculation (see\n        Section 16.3).\n\
    \    o   The time between link state retransmissions, RxmtInterval, is\n     \
    \   configured for a virtual link.  This should be well over the\n        expected\
    \ round-trip delay between the two routers.  This may be\n        hard to estimate\
    \ for a virtual link; it is better to err on the\n        side of making it too\
    \ large.\n"
- title: 16.  Calculation of the routing table
  contents:
  - "16.  Calculation of the routing table\n    This section details the OSPF routing\
    \ table calculation.  Using its\n    attached areas' link state databases as input,\
    \ a router runs the\n    following algorithm, building its routing table step\
    \ by step.  At\n    each step, the router must access individual pieces of the\
    \ link\n    state databases (e.g., a router-LSA originated by a certain router).\n\
    \    This access is performed by the lookup function discussed in Section\n  \
    \  12.2.  The lookup process may return an LSA whose LS age is equal to\n    MaxAge.\
    \  Such an LSA should not be used in the routing table\n    calculation, and is\
    \ treated just as if the lookup process had\n    failed.\n    The OSPF routing\
    \ table's organization is explained in Section 11.\n    Two examples of the routing\
    \ table build process are presented in\n    Sections 11.2 and 11.3.  This process\
    \ can be broken into the\n    following steps:\n    (1) The present routing table\
    \ is invalidated.  The routing table is\n        built again from scratch.  The\
    \ old routing table is saved so\n        that changes in routing table entries\
    \ can be identified.\n    (2) The intra-area routes are calculated by building\
    \ the shortest-\n        path tree for each attached area.  In particular, all\
    \ routing\n        table entries whose Destination Type is \"area border router\"\
    \ are\n        calculated in this step.  This step is described in two parts.\n\
    \        At first the tree is constructed by only considering those links\n  \
    \      between routers and transit networks.  Then the stub networks\n       \
    \ are incorporated into the tree. During the area's shortest-path\n        tree\
    \ calculation, the area's TransitCapability is also\n        calculated for later\
    \ use in Step 4.\n    (3) The inter-area routes are calculated, through examination\
    \ of\n        summary-LSAs.  If the router is attached to multiple areas\n   \
    \     (i.e., it is an area border router), only backbone summary-LSAs\n      \
    \  are examined.\n    (4) In area border routers connecting to one or more transit\
    \ areas\n        (i.e, non-backbone areas whose TransitCapability is found to\
    \ be\n        TRUE), the transit areas' summary-LSAs are examined to see\n   \
    \     whether better paths exist using the transit areas than were\n        found\
    \ in Steps 2-3 above.\n    (5) Routes to external destinations are calculated,\
    \ through\n        examination of AS-external-LSAs.  The locations of the AS\n\
    \        boundary routers (which originate the AS-external-LSAs) have\n      \
    \  been determined in steps 2-4.\n    Steps 2-5 are explained in further detail\
    \ below.\n    Changes made to routing table entries as a result of these\n   \
    \ calculations can cause the OSPF protocol to take further actions.\n    For example,\
    \ a change to an intra-area route will cause an area\n    border router to originate\
    \ new summary-LSAs (see Section 12.4).  See\n    Section 16.7 for a complete list\
    \ of the OSPF protocol actions\n    resulting from routing table changes.\n  \
    \  16.1.  Calculating the shortest-path tree for an area\n        This calculation\
    \ yields the set of intra-area routes associated\n        with an area (called\
    \ hereafter Area A).  A router calculates the\n        shortest-path tree using\
    \ itself as the root.[22] The formation\n        of the shortest path tree is\
    \ done here in two stages.  In the\n        first stage, only links between routers\
    \ and transit networks are\n        considered.  Using the Dijkstra algorithm,\
    \ a tree is formed from\n        this subset of the link state database.  In the\
    \ second stage,\n        leaves are added to the tree by considering the links\
    \ to stub\n        networks.\n        The procedure will be explained using the\
    \ graph terminology that\n        was introduced in Section 2.  The area's link\
    \ state database is\n        represented as a directed graph.  The graph's vertices\
    \ are\n        routers, transit networks and stub networks.  The first stage of\n\
    \        the procedure concerns only the transit vertices (routers and\n     \
    \   transit networks) and their connecting links.  Throughout the\n        shortest\
    \ path calculation, the following data is also associated\n        with each transit\
    \ vertex:\n        Vertex (node) ID\n            A 32-bit number which together\
    \ with the vertex type (router\n            or network) uniquely identifies the\
    \ vertex.  For router\n            vertices the Vertex ID is the router's OSPF\
    \ Router ID.  For\n            network vertices, it is the IP address of the network's\n\
    \            Designated Router.\n        An LSA\n            Each transit vertex\
    \ has an associated LSA.  For router\n            vertices, this is a router-LSA.\
    \  For transit networks, this\n            is a network-LSA (which is actually\
    \ originated by the\n            network's Designated Router).  In any case, the\
    \ LSA's Link\n            State ID is always equal to the above Vertex ID.\n \
    \       List of next hops\n            The list of next hops for the current set\
    \ of shortest paths\n            from the root to this vertex.  There can be multiple\n\
    \            shortest paths due to the equal-cost multipath capability.\n    \
    \        Each next hop indicates the outgoing router interface to use\n      \
    \      when forwarding traffic to the destination.  On broadcast,\n          \
    \  Point-to-MultiPoint and NBMA networks, the next hop also\n            includes\
    \ the IP address of the next router (if any) in the\n            path towards\
    \ the destination.\n        Distance from root\n            The link state cost\
    \ of the current set of shortest paths\n            from the root to the vertex.\
    \  The link state cost of a path\n            is calculated as the sum of the\
    \ costs of the path's\n            constituent links (as advertised in router-LSAs\
    \ and\n            network-LSAs).  One path is said to be \"shorter\" than\n \
    \           another if it has a smaller link state cost.\n        The first stage\
    \ of the procedure (i.e., the Dijkstra algorithm)\n        can now be summarized\
    \ as follows. At each iteration of the\n        algorithm, there is a list of\
    \ candidate vertices.  Paths from\n        the root to these vertices have been\
    \ found, but not necessarily\n        the shortest ones.  However, the paths to\
    \ the candidate vertex\n        that is closest to the root are guaranteed to\
    \ be shortest; this\n        vertex is added to the shortest-path tree, removed\
    \ from the\n        candidate list, and its adjacent vertices are examined for\n\
    \        possible addition to/modification of the candidate list.  The\n     \
    \   algorithm then iterates again.  It terminates when the candidate\n       \
    \ list becomes empty.\n        The following steps describe the algorithm in detail.\
    \  Remember\n        that we are computing the shortest path tree for Area A.\
    \  All\n        references to link state database lookup below are from Area A's\n\
    \        database.\n        (1) Initialize the algorithm's data structures.  Clear\
    \ the list\n            of candidate vertices.  Initialize the shortest-path tree\
    \ to\n            only the root (which is the router doing the calculation).\n\
    \            Set Area A's TransitCapability to FALSE.\n        (2) Call the vertex\
    \ just added to the tree vertex V.  Examine\n            the LSA associated with\
    \ vertex V.  This is a lookup in the\n            Area A's link state database\
    \ based on the Vertex ID.  If\n            this is a router-LSA, and bit V of\
    \ the router-LSA (see\n            Section A.4.2) is set, set Area A's TransitCapability\
    \ to\n            TRUE.  In any case, each link described by the LSA gives the\n\
    \            cost to an adjacent vertex.  For each described link, (say\n    \
    \        it joins vertex V to vertex W):\n            (a) If this is a link to\
    \ a stub network, examine the next\n                link in V's LSA.  Links to\
    \ stub networks will be\n                considered in the second stage of the\
    \ shortest path\n                calculation.\n            (b) Otherwise, W is\
    \ a transit vertex (router or transit\n                network).  Look up the\
    \ vertex W's LSA (router-LSA or\n                network-LSA) in Area A's link\
    \ state database.  If the\n                LSA does not exist, or its LS age is\
    \ equal to MaxAge, or\n                it does not have a link back to vertex\
    \ V, examine the\n                next link in V's LSA.[23]\n            (c) If\
    \ vertex W is already on the shortest-path tree,\n                examine the\
    \ next link in the LSA.\n            (d) Calculate the link state cost D of the\
    \ resulting path\n                from the root to vertex W.  D is equal to the\
    \ sum of the\n                link state cost of the (already calculated) shortest\n\
    \                path to vertex V and the advertised cost of the link\n      \
    \          between vertices V and W.  If D is:\n                o   Greater than\
    \ the value that already appears for\n                    vertex W on the candidate\
    \ list, then examine the\n                    next link.\n                o  \
    \ Equal to the value that appears for vertex W on the\n                    candidate\
    \ list, calculate the set of next hops that\n                    result from using\
    \ the advertised link.  Input to\n                    this calculation is the\
    \ destination (W), and its\n                    parent (V).  This calculation\
    \ is shown in Section\n                    16.1.1.  This set of hops should be\
    \ added to the\n                    next hop values that appear for W on the candidate\n\
    \                    list.\n                o   Less than the value that appears\
    \ for vertex W on the\n                    candidate list, or if W does not yet\
    \ appear on the\n                    candidate list, then set the entry for W\
    \ on the\n                    candidate list to indicate a distance of D from\
    \ the\n                    root.  Also calculate the list of next hops that\n\
    \                    result from using the advertised link, setting the\n    \
    \                next hop values for W accordingly.  The next hop\n          \
    \          calculation is described in Section 16.1.1; it takes\n            \
    \        as input the destination (W) and its parent (V).\n        (3) If at this\
    \ step the candidate list is empty, the shortest-\n            path tree (of transit\
    \ vertices) has been completely built\n            and this stage of the procedure\
    \ terminates.  Otherwise,\n            choose the vertex belonging to the candidate\
    \ list that is\n            closest to the root, and add it to the shortest-path\
    \ tree\n            (removing it from the candidate list in the process). Note\n\
    \            that when there is a choice of vertices closest to the root,\n  \
    \          network vertices must be chosen before router vertices in\n       \
    \     order to necessarily find all equal-cost paths. This is\n            consistent\
    \ with the tie-breakers that were introduced in the\n            modified Dijkstra\
    \ algorithm used by OSPF's Multicast routing\n            extensions (MOSPF).\n\
    \        (4) Possibly modify the routing table.  For those routing table\n   \
    \         entries modified, the associated area will be set to Area A,\n     \
    \       the path type will be set to intra-area, and the cost will\n         \
    \   be set to the newly discovered shortest path's calculated\n            distance.\n\
    \            If the newly added vertex is an area border router or AS\n      \
    \      boundary router, a routing table entry is added whose\n            destination\
    \ type is \"router\".  The Options field found in\n            the associated\
    \ router-LSA is copied into the routing table\n            entry's Optional capabilities\
    \ field. Call the newly added\n            vertex Router X.  If Router X is the\
    \ endpoint of one of the\n            calculating router's virtual links, and\
    \ the virtual link\n            uses Area A as Transit area:  the virtual link\
    \ is declared\n            up, the IP address of the virtual interface is set\
    \ to the IP\n            address of the outgoing interface calculated above for\n\
    \            Router X, and the virtual neighbor's IP address is set to\n     \
    \       Router X's interface address (contained in Router X's\n            router-LSA)\
    \ that points back to the root of the shortest-\n            path tree; equivalently,\
    \ this is the interface that points\n            back to Router X's parent vertex\
    \ on the shortest-path tree\n            (similar to the calculation in Section\
    \ 16.1.1).\n            If the newly added vertex is a transit network, the routing\n\
    \            table entry for the network is located.  The entry's\n          \
    \  Destination ID is the IP network number, which can be\n            obtained\
    \ by masking the Vertex ID (Link State ID) with its\n            associated subnet\
    \ mask (found in the body of the associated\n            network-LSA).  If the\
    \ routing table entry already exists\n            (i.e., there is already an intra-area\
    \ route to the\n            destination installed in the routing table), multiple\n\
    \            vertices have mapped to the same IP network.  For example,\n    \
    \        this can occur when a new Designated Router is being\n            established.\
    \  In this case, the current routing table entry\n            should be overwritten\
    \ if and only if the newly found path is\n            just as short and the current\
    \ routing table entry's Link\n            State Origin has a smaller Link State\
    \ ID than the newly\n            added vertex' LSA.\n            If there is no\
    \ routing table entry for the network (the\n            usual case), a routing\
    \ table entry for the IP network should\n            be added.  The routing table\
    \ entry's Link State Origin\n            should be set to the newly added vertex'\
    \ LSA.\n        (5) Iterate the algorithm by returning to Step 2.\n        The\
    \ stub networks are added to the tree in the procedure's\n        second stage.\
    \  In this stage, all router vertices are again\n        examined.  Those that\
    \ have been determined to be unreachable in\n        the above first phase are\
    \ discarded.  For each reachable router\n        vertex (call it V), the associated\
    \ router-LSA is found in the\n        link state database.  Each stub network\
    \ link appearing in the\n        LSA is then examined, and the following steps\
    \ are executed:\n        (1) Calculate the distance D of stub network from the\
    \ root.  D\n            is equal to the distance from the root to the router vertex\n\
    \            (calculated in stage 1), plus the stub network link's\n         \
    \   advertised cost.  Compare this distance to the current best\n            cost\
    \ to the stub network.  This is done by looking up the\n            stub network's\
    \ current routing table entry.  If the\n            calculated distance D is larger,\
    \ go on to examine the next\n            stub network link in the LSA.\n     \
    \   (2) If this step is reached, the stub network's routing table\n          \
    \  entry must be updated.  Calculate the set of next hops that\n            would\
    \ result from using the stub network link.  This\n            calculation is shown\
    \ in Section 16.1.1; input to this\n            calculation is the destination\
    \ (the stub network) and the\n            parent vertex (the router vertex). \
    \ If the distance D is the\n            same as the current routing table cost,\
    \ simply add this set\n            of next hops to the routing table entry's list\
    \ of next hops.\n            In this case, the routing table already has a Link\
    \ State\n            Origin.  If this Link State Origin is a router-LSA whose\n\
    \            Link State ID is smaller than V's Router ID, reset the Link\n   \
    \         State Origin to V's router-LSA.\n            Otherwise D is smaller\
    \ than the routing table cost.\n            Overwrite the current routing table\
    \ entry by setting the\n            routing table entry's cost to D, and by setting\
    \ the entry's\n            list of next hops to the newly calculated set.  Set\
    \ the\n            routing table entry's Link State Origin to V's router-LSA.\n\
    \            Then go on to examine the next stub network link.\n        For all\
    \ routing table entries added/modified in the second\n        stage, the associated\
    \ area will be set to Area A and the path\n        type will be set to intra-area.\
    \  When the list of reachable\n        router-LSAs is exhausted, the second stage\
    \ is completed.  At\n        this time, all intra-area routes associated with\
    \ Area A have\n        been determined.\n        The specification does not require\
    \ that the above two stage\n        method be used to calculate the shortest path\
    \ tree.  However, if\n        another algorithm is used, an identical tree must\
    \ be produced.\n        For this reason, it is important to note that links between\n\
    \        transit vertices must be bidirectional in order to be included\n    \
    \    in the above tree.  It should also be mentioned that more\n        efficient\
    \ algorithms exist for calculating the tree; for\n        example, the incremental\
    \ SPF algorithm described in [Ref1].\n        16.1.1.  The next hop calculation\n\
    \            This section explains how to calculate the current set of\n     \
    \       next hops to use for a destination.  Each next hop consists\n        \
    \    of the outgoing interface to use in forwarding packets to\n            the\
    \ destination together with the IP address of the next hop\n            router\
    \ (if any).  The next hop calculation is invoked each\n            time a shorter\
    \ path to the destination is discovered.  This\n            can happen in either\
    \ stage of the shortest-path tree\n            calculation (see Section 16.1).\
    \  In stage 1 of the\n            shortest-path tree calculation a shorter path\
    \ is found as\n            the destination is added to the candidate list, or\
    \ when the\n            destination's entry on the candidate list is modified\
    \ (Step\n            2d of Stage 1).  In stage 2 a shorter path is discovered\n\
    \            each time the destination's routing table entry is modified\n   \
    \         (Step 2 of Stage 2).\n            The set of next hops to use for the\
    \ destination may be\n            recalculated several times during the shortest-path\
    \ tree\n            calculation, as shorter and shorter paths are discovered.\n\
    \            In the end, the destination's routing table entry will\n        \
    \    always reflect the next hops resulting from the absolute\n            shortest\
    \ path(s).\n            Input to the next hop calculation is a) the destination\
    \ and\n            b) its parent in the current shortest path between the root\n\
    \            (the calculating router) and the destination.  The parent is\n  \
    \          always a transit vertex (i.e., always a router or a transit\n     \
    \       network).\n            If there is at least one intervening router in\
    \ the current\n            shortest path between the destination and the root,\
    \ the\n            destination simply inherits the set of next hops from the\n\
    \            parent.  Otherwise, there are two cases.  In the first case,\n  \
    \          the parent vertex is the root (the calculating router\n           \
    \ itself).  This means that the destination is either a\n            directly\
    \ connected network or directly connected router.\n            The outgoing interface\
    \ in this case is simply the OSPF\n            interface connecting to the destination\
    \ network/router. If\n            the destination is a router which connects to\
    \ the\n            calculating router via a Point-to-MultiPoint network, the\n\
    \            destination's next hop IP address(es) can be determined by\n    \
    \        examining the destination's router-LSA: each link pointing\n        \
    \    back to the calculating router and having a Link Data field\n           \
    \ belonging to the Point-to-MultiPoint network provides an IP\n            address\
    \ of the next hop router. If the destination is a\n            directly connected\
    \ network, or a router which connects to\n            the calculating router via\
    \ a point-to-point interface, no\n            next hop IP address is required.\
    \ If the destination is a\n            router connected to the calculating router\
    \ via a virtual\n            link, the setting of the next hop should be deferred\
    \ until\n            the calculation in Section 16.3.\n            In the second\
    \ case, the parent vertex is a network that\n            directly connects the\
    \ calculating router to the destination\n            router.  The list of next\
    \ hops is then determined by\n            examining the destination's router-LSA.\
    \  For each link in\n            the router-LSA that points back to the parent\
    \ network, the\n            link's Link Data field provides the IP address of\
    \ a next hop\n            router.  The outgoing interface to use can then be derived\n\
    \            from the next hop IP address (or it can be inherited from\n     \
    \       the parent network).\n    16.2.  Calculating the inter-area routes\n \
    \       The inter-area routes are calculated by examining summary-LSAs.\n    \
    \    If the router has active attachments to multiple areas, only\n        backbone\
    \ summary-LSAs are examined.  Routers attached to a\n        single area examine\
    \ that area's summary-LSAs.  In either case,\n        the summary-LSAs examined\
    \ below are all part of a single area's\n        link state database (call it\
    \ Area A).\n        Summary-LSAs are originated by the area border routers.  Each\n\
    \        summary-LSA in Area A is considered in turn.  Remember that the\n   \
    \     destination described by a summary-LSA is either a network (Type\n     \
    \   3 summary-LSAs) or an AS boundary router (Type 4 summary-LSAs).\n        For\
    \ each summary-LSA:\n        (1) If the cost specified by the LSA is LSInfinity,\
    \ or if the\n            LSA's LS age is equal to MaxAge, then examine the the\
    \ next\n            LSA.\n        (2) If the LSA was originated by the calculating\
    \ router itself,\n            examine the next LSA.\n        (3) If it is a Type\
    \ 3 summary-LSA, and the collection of\n            destinations described by\
    \ the summary-LSA equals one of the\n            router's configured area address\
    \ ranges (see Section 3.5),\n            and the particular area address range\
    \ is active, then the\n            summary-LSA should be ignored.  \"Active\"\
    \ means that there\n            are one or more reachable (by intra-area paths)\
    \ networks\n            contained in the area range.\n        (4) Else, call the\
    \ destination described by the LSA N (for Type\n            3 summary-LSAs, N's\
    \ address is obtained by masking the LSA's\n            Link State ID with the\
    \ network/subnet mask contained in the\n            body of the LSA), and the\
    \ area border originating the LSA\n            BR.  Look up the routing table\
    \ entry for BR having Area A as\n            its associated area.  If no such\
    \ entry exists for router BR\n            (i.e., BR is unreachable in Area A),\
    \ do nothing with this\n            LSA and consider the next in the list.  Else,\
    \ this LSA\n            describes an inter-area path to destination N, whose cost\
    \ is\n            the distance to BR plus the cost specified in the LSA. Call\n\
    \            the cost of this inter-area path IAC.\n        (5) Next, look up\
    \ the routing table entry for the destination N.\n            (If N is an AS boundary\
    \ router, look up the \"router\" routing\n            table entry associated with\
    \ Area A).  If no entry exists for\n            N or if the entry's path type\
    \ is \"type 1 external\" or \"type\n            2 external\", then install the\
    \ inter-area path to N, with\n            associated area Area A, cost IAC, next\
    \ hop equal to the list\n            of next hops to router BR, and Advertising\
    \ router equal to\n            BR.\n        (6) Else, if the paths present in\
    \ the table are intra-area\n            paths, do nothing with the LSA (intra-area\
    \ paths are always\n            preferred).\n        (7) Else, the paths present\
    \ in the routing table are also\n            inter-area paths.  Install the new\
    \ path through BR if it is\n            cheaper, overriding the paths in the routing\
    \ table.\n            Otherwise, if the new path is the same cost, add it to the\n\
    \            list of paths that appear in the routing table entry.\n    16.3.\
    \  Examining transit areas' summary-LSAs\n        This step is only performed\
    \ by area border routers attached to\n        one or more non-backbone areas that\
    \ are capable of carrying\n        transit traffic (i.e., \"transit areas\", or\
    \ those areas whose\n        TransitCapability parameter has been set to TRUE\
    \ in Step 2 of\n        the Dijkstra algorithm (see Section 16.1).\n        The\
    \ purpose of the calculation below is to examine the transit\n        areas to\
    \ see whether they provide any better (shorter) paths\n        than the paths\
    \ previously calculated in Sections 16.1 and 16.2.\n        Any paths found that\
    \ are better than or equal to previously\n        discovered paths are installed\
    \ in the routing table.\n        The calculation also determines the actual next\
    \ hop(s) for those\n        destinations whose next hop was calculated as a virtual\
    \ link in\n        Sections 16.1 and 16.2.  After completion of the calculation\n\
    \        below, any paths calculated in Sections 16.1 and 16.2 that still\n  \
    \      have unresolved virtual next hops should be discarded.\n        The calculation\
    \ proceeds as follows. All the transit areas'\n        summary-LSAs are examined\
    \ in turn.  Each such summary-LSA\n        describes a route through a transit\
    \ area Area A to a Network N\n        (N's address is obtained by masking the\
    \ LSA's Link State ID with\n        the network/subnet mask contained in the body\
    \ of the LSA) or in\n        the case of a Type 4 summary-LSA, to an AS boundary\
    \ router N.\n        Suppose also that the summary-LSA was originated by an area\n\
    \        border router BR.\n        (1) If the cost advertised by the summary-LSA\
    \ is LSInfinity, or\n            if the LSA's LS age is equal to MaxAge, then\
    \ examine the\n            next LSA.\n        (2) If the summary-LSA was originated\
    \ by the calculating router\n            itself, examine the next LSA.\n     \
    \   (3) Look up the routing table entry for N. (If N is an AS\n            boundary\
    \ router, look up the \"router\" routing table entry\n            associated with\
    \ the backbone area). If it does not exist, or\n            if the route type\
    \ is other than intra-area or inter-area, or\n            if the area associated\
    \ with the routing table entry is not\n            the backbone area, then examine\
    \ the next LSA. In other\n            words, this calculation only updates backbone\
    \ intra-area\n            routes found in Section 16.1 and inter-area routes found\
    \ in\n            Section 16.2.\n        (4) Look up the routing table entry for\
    \ the advertising router\n            BR associated with the Area A. If it is\
    \ unreachable, examine\n            the next LSA. Otherwise, the cost to destination\
    \ N is the\n            sum of the cost in BR's Area A routing table entry and\
    \ the\n            cost advertised in the LSA. Call this cost IAC.\n        (5)\
    \ If this cost is less than the cost occurring in N's routing\n            table\
    \ entry, overwrite N's list of next hops with those used\n            for BR,\
    \ and set N's routing table cost to IAC. Else, if IAC\n            is the same\
    \ as N's current cost, add BR's list of next hops\n            to N's list of\
    \ next hops. In any case, the area associated\n            with N's routing table\
    \ entry must remain the backbone area,\n            and the path type (either\
    \ intra-area or inter-area) must\n            also remain the same.\n        It\
    \ is important to note that the above calculation never makes\n        unreachable\
    \ destinations reachable, but instead just potentially\n        finds better paths\
    \ to already reachable destinations.  The\n        calculation installs any better\
    \ cost found into the routing\n        table entry, from which it may be readvertised\
    \ in summary-LSAs\n        to other areas.\n        As an example of the calculation,\
    \ consider the Autonomous System\n        pictured in Figure 17.  There is a single\
    \ non-backbone area\n        (Area 1) that physically divides the backbone into\
    \ two separate\n        pieces. To maintain connectivity of the backbone, a virtual\
    \ link\n        has been configured between routers RT1 and RT4. On the right\n\
    \        side of the figure, Network N1 belongs to the backbone. The\n       \
    \ dotted lines indicate that there is a much shorter intra-area\n            \
    \          ........................\n                      . Area 1 (transit)\
    \     .            +\n                      .                      .         \
    \   |\n                      .      +---+1        1+---+100      |\n         \
    \             .      |RT2|----------|RT4|=========|\n                      . \
    \   1/+---+********* +---+         |\n                      .    /*******    \
    \      .            |\n                      .  1/*Virtual          .        \
    \    |\n                   1+---+/*  Link            .         Net|work\n    \
    \         =======|RT1|*                   .            | N1\n                \
    \    +---+\\                   .            |\n                      .   \\  \
    \                .            |\n                      .    \\               \
    \  .            |\n                      .    1\\+---+1        1+---+20      \
    \ |\n                      .      |RT3|----------|RT5|=========|\n           \
    \           .      +---+          +---+         |\n                      .   \
    \                   .            |\n                      ........................\
    \            +\n                    Figure 17: Routing through transit areas\n\
    \        backbone path between router RT5 and Network N1 (cost 20) than\n    \
    \    there is between Router RT4 and Network N1 (cost 100). Both\n        Router\
    \ RT4 and Router RT5 will inject summary-LSAs for Network\n        N1 into Area\
    \ 1.\n        After the shortest-path tree has been calculated for the\n     \
    \   backbone in Section 16.1, Router RT1 (left end of the virtual\n        link)\
    \ will have calculated a path through Router RT4 for all\n        data traffic\
    \ destined for Network N1. However, since Router RT5\n        is so much closer\
    \ to Network N1, all routers internal to Area 1\n        (e.g., Routers RT2 and\
    \ RT3) will forward their Network N1\n        traffic towards Router RT5, instead\
    \ of RT4. And indeed, after\n        examining Area 1's summary-LSAs by the above\
    \ calculation, Router\n        RT1 will also forward Network N1 traffic towards\
    \ RT5. Note that\n        in this example the virtual link enables transit data\
    \ traffic to\n        be forwarded through Area 1, but the actual path the transit\n\
    \        data traffic takes does not follow the virtual link.  In other\n    \
    \    words, virtual links allow transit traffic to be forwarded\n        through\
    \ an area, but do not dictate the precise path that the\n        traffic will\
    \ take.\n    16.4.  Calculating AS external routes\n        AS external routes\
    \ are calculated by examining AS-external-LSAs.\n        Each of the AS-external-LSAs\
    \ is considered in turn.  Most AS-\n        external-LSAs describe routes to specific\
    \ IP destinations.  An\n        AS-external-LSA can also describe a default route\
    \ for the\n        Autonomous System (Destination ID = DefaultDestination,\n \
    \       network/subnet mask = 0x00000000).  For each AS-external-LSA:\n      \
    \  (1) If the cost specified by the LSA is LSInfinity, or if the\n           \
    \ LSA's LS age is equal to MaxAge, then examine the next LSA.\n        (2) If\
    \ the LSA was originated by the calculating router itself,\n            examine\
    \ the next LSA.\n        (3) Call the destination described by the LSA N.  N's\
    \ address is\n            obtained by masking the LSA's Link State ID with the\n\
    \            network/subnet mask contained in the body of the LSA.  Look\n   \
    \         up the routing table entries (potentially one per attached\n       \
    \     area) for the AS boundary router (ASBR) that originated the\n          \
    \  LSA. If no entries exist for router ASBR (i.e., ASBR is\n            unreachable),\
    \ do nothing with this LSA and consider the next\n            in the list.\n \
    \           Else, this LSA describes an AS external path to destination\n    \
    \        N.  Examine the forwarding address specified in the AS-\n           \
    \ external-LSA.  This indicates the IP address to which\n            packets for\
    \ the destination should be forwarded.\n            If the forwarding address\
    \ is set to 0.0.0.0, packets should\n            be sent to the ASBR itself. Among\
    \ the multiple routing table\n            entries for the ASBR, select the preferred\
    \ entry as follows.\n            If RFC1583Compatibility is set to \"disabled\"\
    , prune the set\n            of routing table entries for the ASBR as described\
    \ in\n            Section 16.4.1. In any case, among the remaining routing\n \
    \           table entries, select the routing table entry with the least\n   \
    \         cost; when there are multiple least cost routing table\n           \
    \ entries the entry whose associated area has the largest OSPF\n            Area\
    \ ID (when considered as an unsigned 32-bit integer) is\n            chosen.\n\
    \            If the forwarding address is non-zero, look up the\n            forwarding\
    \ address in the routing table.[24] The matching\n            routing table entry\
    \ must specify an intra-area or inter-area\n            path; if no such path\
    \ exists, do nothing with the LSA and\n            consider the next in the list.\n\
    \        (4) Let X be the cost specified by the preferred routing table\n    \
    \        entry for the ASBR/forwarding address, and Y the cost\n            specified\
    \ in the LSA.  X is in terms of the link state\n            metric, and Y is a\
    \ type 1 or 2 external metric.\n        (5) Look up the routing table entry for\
    \ the destination N.  If\n            no entry exists for N, install the AS external\
    \ path to N,\n            with next hop equal to the list of next hops to the\n\
    \            forwarding address, and advertising router equal to ASBR.\n     \
    \       If the external metric type is 1, then the path-type is set\n        \
    \    to type 1 external and the cost is equal to X+Y.  If the\n            external\
    \ metric type is 2, the path-type is set to type 2\n            external, the\
    \ link state component of the route's cost is X,\n            and the type 2 cost\
    \ is Y.\n        (6) Compare the AS external path described by the LSA with the\n\
    \            existing paths in N's routing table entry, as follows. If\n     \
    \       the new path is preferred, it replaces the present paths in\n        \
    \    N's routing table entry.  If the new path is of equal\n            preference,\
    \ it is added to N's routing table entry's list of\n            paths.\n     \
    \       (a) Intra-area and inter-area paths are always preferred\n           \
    \     over AS external paths.\n            (b) Type 1 external paths are always\
    \ preferred over type 2\n                external paths. When all paths are type\
    \ 2 external\n                paths, the paths with the smallest advertised type\
    \ 2\n                metric are always preferred.\n            (c) If the new\
    \ AS external path is still indistinguishable\n                from the current\
    \ paths in the N's routing table entry,\n                and RFC1583Compatibility\
    \ is set to \"disabled\", select\n                the preferred paths based on\
    \ the intra-AS paths to the\n                ASBR/forwarding addresses, as specified\
    \ in Section\n                16.4.1.\n            (d) If the new AS external\
    \ path is still indistinguishable\n                from the current paths in the\
    \ N's routing table entry,\n                select the preferred path based on\
    \ a least cost\n                comparison.  Type 1 external paths are compared\
    \ by\n                looking at the sum of the distance to the forwarding\n \
    \               address and the advertised type 1 metric (X+Y).  Type 2\n    \
    \            external paths advertising equal type 2 metrics are\n           \
    \     compared by looking at the distance to the forwarding\n                addresses.\n\
    \        16.4.1.  External path preferences\n            When multiple intra-AS\
    \ paths are available to\n            ASBRs/forwarding addresses, the following\
    \ rules indicate\n            which paths are preferred. These rules apply when\
    \ the same\n            ASBR is reachable through multiple areas, or when trying\
    \ to\n            decide which of several AS-external-LSAs should be\n       \
    \     preferred. In the former case the paths all terminate at the\n         \
    \   same ASBR, while in the latter the paths terminate at\n            separate\
    \ ASBRs/forwarding addresses. In either case, each\n            path is represented\
    \ by a separate routing table entry as\n            defined in Section 11.\n \
    \           This section only applies when RFC1583Compatibility is set\n     \
    \       to \"disabled\".\n            The path preference rules, stated from highest\
    \ to lowest\n            preference, are as follows. Note that as a result of\
    \ these\n            rules, there may still be multiple paths of the highest\n\
    \            preference. In this case, the path to use must be determined\n  \
    \          based on cost, as described in Section 16.4.\n            o   Intra-area\
    \ paths using non-backbone areas are always the\n                most preferred.\n\
    \            o   The other paths, intra-area backbone paths and inter-\n     \
    \           area paths, are of equal preference.\n    16.5.  Incremental updates\
    \ -- summary-LSAs\n        When a new summary-LSA is received, it is not necessary\
    \ to\n        recalculate the entire routing table.  Call the destination\n  \
    \      described by the summary-LSA N (N's address is obtained by\n        masking\
    \ the LSA's Link State ID with the network/subnet mask\n        contained in the\
    \ body of the LSA), and let Area A be the area to\n        which the LSA belongs.\
    \ There are then two separate cases:\n        Case 1: Area A is the backbone and/or\
    \ the router is not an area\n            border router.\n            In this case,\
    \ the following calculations must be performed.\n            First, if there is\
    \ presently an inter-area route to the\n            destination N, N's routing\
    \ table entry is invalidated,\n            saving the entry's values for later\
    \ comparisons. Then the\n            calculation in Section 16.2 is run again\
    \ for the single\n            destination N. In this calculation, all of Area\
    \ A's\n            summary-LSAs that describe a route to N are examined.  In\n\
    \            addition, if the router is an area border router attached to\n  \
    \          one or more transit areas, the calculation in Section 16.3\n      \
    \      must be run again for the single destination.  If the\n            results\
    \ of these calculations have changed the cost/path to\n            an AS boundary\
    \ router (as would be the case for a Type 4\n            summary-LSA) or to any\
    \ forwarding addresses, all AS-\n            external-LSAs will have to be reexamined\
    \ by rerunning the\n            calculation in Section 16.4.  Otherwise, if N\
    \ is now newly\n            unreachable, the calculation in Section 16.4 must\
    \ be rerun\n            for the single destination N, in case an alternate external\n\
    \            route to N exists.\n        Case 2: Area A is a transit area and\
    \ the router is an area\n            border router.\n            In this case,\
    \ the following calculations must be performed.\n            First, if N's routing\
    \ table entry presently contains one or\n            more inter-area paths that\
    \ utilize the transit area Area A,\n            these paths should be removed.\
    \ If this removes all paths\n            from the routing table entry, the entry\
    \ should be\n            invalidated.  The entry's old values should be saved\
    \ for\n            later comparisons. Next the calculation in Section 16.3 must\n\
    \            be run again for the single destination N. If the results of\n  \
    \          this calculation have caused the cost to N to increase, the\n     \
    \       complete routing table calculation must be rerun starting\n          \
    \  with the Dijkstra algorithm specified in Section 16.1.\n            Otherwise,\
    \ if the cost/path to an AS boundary router (as\n            would be the case\
    \ for a Type 4 summary-LSA) or to any\n            forwarding addresses has changed,\
    \ all AS-external-LSAs will\n            have to be reexamined by rerunning the\
    \ calculation in\n            Section 16.4.  Otherwise, if N is now newly unreachable,\
    \ the\n            calculation in Section 16.4 must be rerun for the single\n\
    \            destination N, in case an alternate external route to N\n       \
    \     exists.\n    16.6.  Incremental updates -- AS-external-LSAs\n        When\
    \ a new AS-external-LSA is received, it is not necessary to\n        recalculate\
    \ the entire routing table.  Call the destination\n        described by the AS-external-LSA\
    \ N.  N's address is obtained by\n        masking the LSA's Link State ID with\
    \ the network/subnet mask\n        contained in the body of the LSA. If there\
    \ is already an intra-\n        area or inter-area route to the destination, no\
    \ recalculation is\n        necessary (internal routes take precedence).\n   \
    \     Otherwise, the procedure in Section 16.4 will have to be\n        performed,\
    \ but only for those AS-external-LSAs whose destination\n        is N.  Before\
    \ this procedure is performed, the present routing\n        table entry for N\
    \ should be invalidated.\n    16.7.  Events generated as a result of routing table\
    \ changes\n        Changes to routing table entries sometimes cause the OSPF area\n\
    \        border routers to take additional actions.  These routers need\n    \
    \    to act on the following routing table changes:\n        o   The cost or path\
    \ type of a routing table entry has changed.\n            If the destination described\
    \ by this entry is a Network or\n            AS boundary router, and this is not\
    \ simply a change of AS\n            external routes, new summary-LSAs may have\
    \ to be generated\n            (potentially one for each attached area, including\
    \ the\n            backbone).  See Section 12.4.3 for more information.  If a\n\
    \            previously advertised entry has been deleted, or is no\n        \
    \    longer advertisable to a particular area, the LSA must be\n            flushed\
    \ from the routing domain by setting its LS age to\n            MaxAge and reflooding\
    \ (see Section 14.1).\n        o   A routing table entry associated with a configured\
    \ virtual\n            link has changed.  The destination of such a routing table\n\
    \            entry is an area border router.  The change indicates a\n       \
    \     modification to the virtual link's cost or viability.\n            If the\
    \ entry indicates that the area border router is newly\n            reachable,\
    \ the corresponding virtual link is now\n            operational.  An InterfaceUp\
    \ event should be generated for\n            the virtual link, which will cause\
    \ a virtual adjacency to\n            begin to form (see Section 10.3).  At this\
    \ time the virtual\n            link's IP interface address and the virtual neighbor's\n\
    \            Neighbor IP address are also calculated.\n            If the entry\
    \ indicates that the area border router is no\n            longer reachable, the\
    \ virtual link and its associated\n            adjacency should be destroyed.\
    \  This means an InterfaceDown\n            event should be generated for the\
    \ associated virtual link.\n            If the cost of the entry has changed,\
    \ and there is a fully\n            established virtual adjacency, a new router-LSA\
    \ for the\n            backbone must be originated.  This in turn may cause further\n\
    \            routing table changes.\n    16.8.  Equal-cost multipath\n       \
    \ The OSPF protocol maintains multiple equal-cost routes to all\n        destinations.\
    \  This can be seen in the steps used above to\n        calculate the routing\
    \ table, and in the definition of the\n        routing table structure.\n    \
    \    Each one of the multiple routes will be of the same type\n        (intra-area,\
    \ inter-area, type 1 external or type 2 external),\n        cost, and will have\
    \ the same associated area.  However, each\n        route may specify a separate\
    \ next hop and Advertising router.\n        There is no requirement that a router\
    \ running OSPF keep track of\n        all possible equal-cost routes to a destination.\
    \  An\n        implementation may choose to keep only a fixed number of routes\n\
    \        to any given destination.  This does not affect any of the\n        algorithms\
    \ presented in this specification.\n"
- title: Footnotes
  contents:
  - "Footnotes\n    [1]The graph's vertices represent either routers, transit networks,\n\
    \    or stub networks.  Since routers may belong to multiple areas, it is\n  \
    \  not possible to color the graph's vertices.\n    [2]It is possible for all\
    \ of a router's interfaces to be unnumbered\n    point-to-point links.  In this\
    \ case, an IP address must be assigned\n    to the router.  This address will\
    \ then be advertised in the router's\n    router-LSA as a host route.\n    [3]Note\
    \ that in these cases both interfaces, the non-virtual and the\n    virtual, would\
    \ have the same IP address.\n    [4]Note that no host route is generated for,\
    \ and no IP packets can\n    be addressed to, interfaces to unnumbered point-to-point\
    \ networks.\n    This is regardless of such an interface's state.\n    [5]It is\
    \ instructive to see what happens when the Designated Router\n    for the network\
    \ crashes.  Call the Designated Router for the network\n    RT1, and the Backup\
    \ Designated Router RT2.  If Router RT1 crashes\n    (or maybe its interface to\
    \ the network dies), the other routers on\n    the network will detect RT1's absence\
    \ within RouterDeadInterval\n    seconds.  All routers may not detect this at\
    \ precisely the same\n    time; the routers that detect RT1's absence before RT2\
    \ does will,\n    for a time, select RT2 to be both Designated Router and Backup\n\
    \    Designated Router.  When RT2 detects that RT1 is gone it will move\n    itself\
    \ to Designated Router.  At this time, the remaining router\n    having highest\
    \ Router Priority will be selected as Backup Designated\n    Router.\n    [6]On\
    \ point-to-point networks, the lower level protocols indicate\n    whether the\
    \ neighbor is up and running.  Likewise, existence of the\n    neighbor on virtual\
    \ links is indicated by the routing table\n    calculation.  However, in both\
    \ these cases, the Hello Protocol is\n    still used.  This ensures that communication\
    \ between the neighbors\n    is bidirectional, and that each of the neighbors\
    \ has a functioning\n    routing protocol layer.\n    [7]When the identity of\
    \ the Designated Router is changing, it may be\n    quite common for a neighbor\
    \ in this state to send the router a\n    Database Description packet; this means\
    \ that there is some momentary\n    disagreement on the Designated Router's identity.\n\
    \    [8]Note that it is possible for a router to resynchronize any of its\n  \
    \  fully established adjacencies by setting the adjacency's state back\n    to\
    \ ExStart.  This will cause the other end of the adjacency to\n    process a SeqNumberMismatch\
    \ event, and therefore to also go back to\n    ExStart state.\n    [9]The address\
    \ space of IP networks and the address space of OSPF\n    Router IDs may overlap.\
    \  That is, a network may have an IP address\n    which is identical (when considered\
    \ as a 32-bit number) to some\n    router's Router ID.\n    [10]\"Discard\" entries\
    \ are necessary to ensure that route\n    summarization at area boundaries will\
    \ not cause packet looping.\n    [11]It is assumed that, for two different address\
    \ ranges matching\n    the destination, one range is more specific than the other.\
    \ Non-\n    contiguous subnet masks can be configured to violate this\n    assumption.\
    \ Such subnet mask configurations cannot be handled by the\n    OSPF protocol.\n\
    \    [12]MaxAgeDiff is an architectural constant.  It indicates the\n    maximum\
    \ dispersion of ages, in seconds, that can occur for a single\n    LSA instance\
    \ as it is flooded throughout the routing domain.  If two\n    LSAs differ by\
    \ more than this, they are assumed to be different\n    instances of the same\
    \ LSA.  This can occur when a router restarts\n    and loses track of the LSA's\
    \ previous LS sequence number.  See\n    Section 13.4 for more details.\n    [13]When\
    \ two LSAs have different LS checksums, they are assumed to\n    be separate instances.\
    \  This can occur when a router restarts, and\n    loses track of the LSA's previous\
    \ LS sequence number.  In the case\n    where the two LSAs have the same LS sequence\
    \ number, it is not\n    possible to determine which LSA is actually newer.  However,\
    \ if the\n    wrong LSA is accepted as newer, the originating router will simply\n\
    \    originate another instance.  See Section 13.4 for further details.\n    [14]There\
    \ is one instance where a lookup must be done based on\n    partial information.\
    \  This is during the routing table calculation,\n    when a network-LSA must\
    \ be found based solely on its Link State ID.\n    The lookup in this case is\
    \ still well defined, since no two\n    network-LSAs can have the same Link State\
    \ ID.\n    [15]This is the way RFC 1583 specified point-to-point\n    representation.\
    \  It has three advantages: a) it does not require\n    allocating a subnet to\
    \ the point-to-point link, b) it tends to bias\n    the routing so that packets\
    \ destined for the point-to-point\n    interface will actually be received over\
    \ the interface (which is\n    useful for diagnostic purposes) and c) it allows\
    \ network\n    bootstrapping of a neighbor, without requiring that the bootstrap\n\
    \    program contain an OSPF implementation.\n    [16]This is the more traditional\
    \ point-to-point representation used\n    by protocols such as RIP.\n    [17]This\
    \ clause covers the case: Inter-area routes are not\n    summarized to the backbone.\
    \  This is because inter-area routes are\n    always associated with the backbone\
    \ area.\n    [18]This clause is only invoked when a non-backbone Area A supports\n\
    \    transit data traffic (i.e., has TransitCapability set to TRUE).  For\n  \
    \  example, in the area configuration of Figure 6, Area 2 can support\n    transit\
    \ traffic due to the configured virtual link between Routers\n    RT10 and RT11.\
    \ As a result, Router RT11 need only originate a single\n    summary-LSA into\
    \ Area 2 (having the collapsed destination N9-\n    N11,H1), since all of Router\
    \ RT11's other eligible routes have next\n    hops belonging to Area 2 itself\
    \ (and as such only need be advertised\n    by other area border routers; in this\
    \ case, Routers RT10 and RT7).\n    [19]By keeping more information in the routing\
    \ table, it is possible\n    for an implementation to recalculate the shortest\
    \ path tree for only\n    a single area.  In fact, there are incremental algorithms\
    \ that allow\n    an implementation to recalculate only a portion of a single\
    \ area's\n    shortest path tree [Ref1].  However, these algorithms are beyond\
    \ the\n    scope of this specification.\n    [20]This is how the Link state request\
    \ list is emptied, which\n    eventually causes the neighbor state to transition\
    \ to Full.  See\n    Section 10.9 for more details.\n    [21]It should be a relatively\
    \ rare occurrence for an LSA's LS age to\n    reach MaxAge in this fashion.  Usually,\
    \ the LSA will be replaced by\n    a more recent instance before it ages out.\n\
    \    [22]Strictly speaking, because of equal-cost multipath, the\n    algorithm\
    \ does not create a tree.  We continue to use the \"tree\"\n    terminology because\
    \ that is what occurs most often in the existing\n    literature.\n    [23]Note\
    \ that the presence of any link back to V is sufficient; it\n    need not be the\
    \ matching half of the link under consideration from V\n    to W. This is enough\
    \ to ensure that, before data traffic flows\n    between a pair of neighboring\
    \ routers, their link state databases\n    will be synchronized.\n    [24]When\
    \ the forwarding address is non-zero, it should point to a\n    router belonging\
    \ to another Autonomous System.  See Section 12.4.4\n    for more details.\n"
- title: References
  contents:
  - "References\n    [Ref1]  McQuillan, J., I. Richer and E. Rosen, \"ARPANET Routing\n\
    \            Algorithm Improvements\", BBN Technical Report 3803, April\n    \
    \        1978.\n    [Ref2]  Digital Equipment Corporation, \"Information processing\n\
    \            systems -- Data communications -- Intermediate System to\n      \
    \      Intermediate System Intra-Domain Routing Protocol\", October\n        \
    \    1987.\n    [Ref3]  McQuillan, J., et.al., \"The New Routing Algorithm for\
    \ the\n            ARPANET\", IEEE Transactions on Communications, May 1980.\n\
    \    [Ref4]  Perlman, R., \"Fault-Tolerant Broadcast of Routing\n            Information\"\
    , Computer Networks, December 1983.\n    [Ref5]  Postel, J., \"Internet Protocol\"\
    , STD 5, RFC 791, September\n            1981.\n    [Ref6]  McKenzie, A., \"ISO\
    \ Transport Protocol specification ISO DP\n            8073\", RFC 905, April\
    \ 1984.\n    [Ref7]  Deering, S., \"Host extensions for IP multicasting\", STD\
    \ 5,\n            RFC 1112, May 1988.\n    [Ref8]  McCloghrie, K., and M. Rose,\
    \ \"Management Information Base\n            for network management of TCP/IP-based\
    \ internets: MIB-II\",\n            STD 17, RFC 1213, March 1991.\n    [Ref9]\
    \  Moy, J., \"OSPF Version 2\", RFC 1583, March 1994.\n    [Ref10] Fuller, V.,\
    \ T. Li, J. Yu, and K. Varadhan, \"Classless\n            Inter-Domain Routing\
    \ (CIDR): an Address Assignment and\n            Aggregation Strategy\", RFC1519,\
    \ September 1993.\n    [Ref11] Reynolds, J., and J. Postel, \"Assigned Numbers\"\
    , STD 2, RFC\n            1700, October 1994.\n    [Ref12] Almquist, P., \"Type\
    \ of Service in the Internet Protocol\n            Suite\", RFC 1349, July 1992.\n\
    \    [Ref13] Leiner, B., et.al., \"The DARPA Internet Protocol Suite\", DDN\n\
    \            Protocol Handbook, April 1985.\n    [Ref14] Bradley, T., and C. Brown,\
    \ \"Inverse Address Resolution\n            Protocol\", RFC 1293, January 1992.\n\
    \    [Ref15] deSouza, O., and M. Rodrigues, \"Guidelines for Running OSPF\n  \
    \          Over Frame Relay Networks\", RFC 1586, March 1994.\n    [Ref16] Bellovin,\
    \ S., \"Security Problems in the TCP/IP Protocol\n            Suite\", ACM Computer\
    \ Communications Review, Volume 19,\n            Number 2, pp. 32-38, April 1989.\n\
    \    [Ref17] Rivest, R., \"The MD5 Message-Digest Algorithm\", RFC 1321,\n   \
    \         April 1992.\n    [Ref18] Moy, J., \"Multicast Extensions to OSPF\",\
    \ RFC 1584, March\n            1994.\n    [Ref19] Coltun, R., and V. Fuller, \"\
    The OSPF NSSA Option\", RFC 1587,\n            March 1994.\n    [Ref20] Ferguson,\
    \ D., \"The OSPF External Attributes LSA\", work in\n            progress.\n \
    \   [Ref21] Moy, J., \"Extending OSPF to Support Demand Circuits\", RFC\n    \
    \        1793, April 1995.\n    [Ref22] Mogul, J., and S. Deering, \"Path MTU\
    \ Discovery\", RFC 1191,\n            November 1990.\n    [Ref23] Rekhter, Y.,\
    \ and T. Li, \"A Border Gateway Protocol 4 (BGP-\n            4)\", RFC 1771,\
    \ March 1995.\n    [Ref24] Hinden, R., \"Internet Routing Protocol Standardization\n\
    \            Criteria\", BBN, October 1991.\n    [Ref25] Moy, J., \"OSPF Version\
    \ 2\", RFC 2178, July 1997.\n    [Ref26] Rosen, E., \"Vulnerabilities of Network\
    \ Control Protocols: An\n            Example\", Computer Communication Review,\
    \ July 1981.\n"
- title: A. OSPF data formats
  contents:
  - "A. OSPF data formats\n    This appendix describes the format of OSPF protocol\
    \ packets and OSPF\n    LSAs.  The OSPF protocol runs directly over the IP network\
    \ layer.\n    Before any data formats are described, the details of the OSPF\n\
    \    encapsulation are explained.\n    Next the OSPF Options field is described.\
    \  This field describes\n    various capabilities that may or may not be supported\
    \ by pieces of\n    the OSPF routing domain. The OSPF Options field is contained\
    \ in OSPF\n    Hello packets, Database Description packets and in OSPF LSAs.\n\
    \    OSPF packet formats are detailed in Section A.3.  A description of\n    OSPF\
    \ LSAs appears in Section A.4.\n"
- title: A.1 Encapsulation of OSPF packets
  contents:
  - "A.1 Encapsulation of OSPF packets\n    OSPF runs directly over the Internet Protocol's\
    \ network layer.  OSPF\n    packets are therefore encapsulated solely by IP and\
    \ local data-link\n    headers.\n    OSPF does not define a way to fragment its\
    \ protocol packets, and\n    depends on IP fragmentation when transmitting packets\
    \ larger than\n    the network MTU. If necessary, the length of OSPF packets can\
    \ be up\n    to 65,535 bytes (including the IP header).  The OSPF packet types\n\
    \    that are likely to be large (Database Description Packets, Link\n    State\
    \ Request, Link State Update, and Link State Acknowledgment\n    packets) can\
    \ usually be split into several separate protocol\n    packets, without loss of\
    \ functionality.  This is recommended; IP\n    fragmentation should be avoided\
    \ whenever possible.  Using this\n    reasoning, an attempt should be made to\
    \ limit the sizes of OSPF\n    packets sent over virtual links to 576 bytes unless\
    \ Path MTU\n    Discovery is being performed (see [Ref22]).\n    The other important\
    \ features of OSPF's IP encapsulation are:\n    o   Use of IP multicast.  Some\
    \ OSPF messages are multicast, when\n        sent over broadcast networks.  Two\
    \ distinct IP multicast\n        addresses are used.  Packets sent to these multicast\
    \ addresses\n        should never be forwarded; they are meant to travel a single\
    \ hop\n        only.  To ensure that these packets will not travel multiple\n\
    \        hops, their IP TTL must be set to 1.\n        AllSPFRouters\n       \
    \     This multicast address has been assigned the value\n            224.0.0.5.\
    \  All routers running OSPF should be prepared to\n            receive packets\
    \ sent to this address.  Hello packets are\n            always sent to this destination.\
    \  Also, certain OSPF\n            protocol packets are sent to this address during\
    \ the\n            flooding procedure.\n        AllDRouters\n            This\
    \ multicast address has been assigned the value\n            224.0.0.6.  Both\
    \ the Designated Router and Backup Designated\n            Router must be prepared\
    \ to receive packets destined to this\n            address.  Certain OSPF protocol\
    \ packets are sent to this\n            address during the flooding procedure.\n\
    \    o   OSPF is IP protocol number 89.  This number has been registered\n   \
    \     with the Network Information Center.  IP protocol number\n        assignments\
    \ are documented in [Ref11].\n    o   All OSPF routing protocol packets are sent\
    \ using the normal\n        service TOS value of binary 0000 defined in [Ref12].\n\
    \    o   Routing protocol packets are sent with IP precedence set to\n       \
    \ Internetwork Control.  OSPF protocol packets should be given\n        precedence\
    \ over regular IP data traffic, in both sending and\n        receiving.  Setting\
    \ the IP precedence field in the IP header to\n        Internetwork Control [Ref5]\
    \ may help implement this objective.\n"
- title: A.2 The Options field
  contents:
  - "A.2 The Options field\n    The OSPF Options field is present in OSPF Hello packets,\
    \ Database\n    Description packets and all LSAs.  The Options field enables OSPF\n\
    \    routers to support (or not support) optional capabilities, and to\n    communicate\
    \ their capability level to other OSPF routers.  Through\n    this mechanism routers\
    \ of differing capabilities can be mixed within\n    an OSPF routing domain.\n\
    \    When used in Hello packets, the Options field allows a router to\n    reject\
    \ a neighbor because of a capability mismatch.  Alternatively,\n    when capabilities\
    \ are exchanged in Database Description packets a\n    router can choose not to\
    \ forward certain LSAs to a neighbor because\n    of its reduced functionality.\
    \  Lastly, listing capabilities in LSAs\n    allows routers to forward traffic\
    \ around reduced functionality\n    routers, by excluding them from parts of the\
    \ routing table\n    calculation.\n    Five bits of the OSPF Options field have\
    \ been assigned, although\n    only one (the E-bit) is described completely by\
    \ this memo. Each bit\n    is described briefly below. Routers should reset (i.e.\
    \  clear)\n    unrecognized bits in the Options field when sending Hello packets\
    \ or\n    Database Description packets and when originating LSAs. Conversely,\n\
    \    routers encountering unrecognized Option bits in received Hello\n    Packets,\
    \ Database Description packets or LSAs should ignore the\n    capability and process\
    \ the packet/LSA normally.\n                       +------------------------------------+\n\
    \                       | * | * | DC | EA | N/P | MC | E | * |\n             \
    \          +------------------------------------+\n                          \
    \   The Options field\n    E-bit\n        This bit describes the way AS-external-LSAs\
    \ are flooded, as\n        described in Sections 3.6, 9.5, 10.8 and 12.1.2 of\
    \ this memo.\n    MC-bit\n        This bit describes whether IP multicast datagrams\
    \ are forwarded\n        according to the specifications in [Ref18].\n    N/P-bit\n\
    \        This bit describes the handling of Type-7 LSAs, as specified in\n   \
    \     [Ref19].\n    EA-bit\n        This bit describes the router's willingness\
    \ to receive and\n        forward External-Attributes-LSAs, as specified in [Ref20].\n\
    \    DC-bit\n        This bit describes the router's handling of demand circuits,\
    \ as\n        specified in [Ref21].\n"
- title: A.3 OSPF Packet Formats
  contents:
  - "A.3 OSPF Packet Formats\n    There are five distinct OSPF packet types.  All\
    \ OSPF packet types\n    begin with a standard 24 byte header.  This header is\
    \ described\n    first.  Each packet type is then described in a succeeding section.\n\
    \    In these sections each packet's division into fields is displayed,\n    and\
    \ then the field definitions are enumerated.\n    All OSPF packet types (other\
    \ than the OSPF Hello packets) deal with\n    lists of LSAs.  For example, Link\
    \ State Update packets implement the\n    flooding of LSAs throughout the OSPF\
    \ routing domain.  Because of\n    this, OSPF protocol packets cannot be parsed\
    \ unless the format of\n    LSAs is also understood.  The format of LSAs is described\
    \ in Section\n    A.4.\n    The receive processing of OSPF packets is detailed\
    \ in Section 8.2.\n    The sending of OSPF packets is explained in Section 8.1.\n"
- title: A.3.1 The OSPF packet header
  contents:
  - "A.3.1 The OSPF packet header\n    Every OSPF packet starts with a standard 24\
    \ byte header.  This\n    header contains all the information necessary to determine\
    \ whether\n    the packet should be accepted for further processing.  This\n \
    \   determination is described in Section 8.2 of the specification.\n        0\
    \                   1                   2                   3\n        0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |   Version #   |     Type      |         Packet length         |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                          Router ID                            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                           Area ID                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |           Checksum            |             AuType            |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                       Authentication                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                       Authentication                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \    Version #\n        The OSPF version number.  This specification documents\
    \ version 2\n        of the protocol.\n    Type\n        The OSPF packet types\
    \ are as follows. See Sections A.3.2 through\n        A.3.6 for details.\n   \
    \                       Type   Description\n                          ________________________________\n\
    \                          1      Hello\n                          2      Database\
    \ Description\n                          3      Link State Request\n         \
    \                 4      Link State Update\n                          5      Link\
    \ State Acknowledgment\n    Packet length\n        The length of the OSPF protocol\
    \ packet in bytes.  This length\n        includes the standard OSPF header.\n\
    \    Router ID\n        The Router ID of the packet's source.\n    Area ID\n \
    \       A 32 bit number identifying the area that this packet belongs\n      \
    \  to.  All OSPF packets are associated with a single area.  Most\n        travel\
    \ a single hop only.  Packets travelling over a virtual\n        link are labelled\
    \ with the backbone Area ID of 0.0.0.0.\n    Checksum\n        The standard IP\
    \ checksum of the entire contents of the packet,\n        starting with the OSPF\
    \ packet header but excluding the 64-bit\n        authentication field.  This\
    \ checksum is calculated as the 16-bit\n        one's complement of the one's\
    \ complement sum of all the 16-bit\n        words in the packet, excepting the\
    \ authentication field.  If the\n        packet's length is not an integral number\
    \ of 16-bit words, the\n        packet is padded with a byte of zero before checksumming.\
    \  The\n        checksum is considered to be part of the packet authentication\n\
    \        procedure; for some authentication types the checksum\n        calculation\
    \ is omitted.\n    AuType\n        Identifies the authentication procedure to\
    \ be used for the\n        packet.  Authentication is discussed in Appendix D\
    \ of the\n        specification.  Consult Appendix D for a list of the currently\n\
    \        defined authentication types.\n    Authentication\n        A 64-bit field\
    \ for use by the authentication scheme. See\n        Appendix D for details.\n"
- title: A.3.2 The Hello packet
  contents:
  - "A.3.2 The Hello packet\n    Hello packets are OSPF packet type 1.  These packets\
    \ are sent\n    periodically on all interfaces (including virtual links) in order\
    \ to\n    establish and maintain neighbor relationships.  In addition, Hello\n\
    \    Packets are multicast on those physical networks having a multicast\n   \
    \ or broadcast capability, enabling dynamic discovery of neighboring\n    routers.\n\
    \    All routers connected to a common network must agree on certain\n    parameters\
    \ (Network mask, HelloInterval and RouterDeadInterval).\n    These parameters\
    \ are included in Hello packets, so that differences\n    can inhibit the forming\
    \ of neighbor relationships.  A detailed\n    explanation of the receive processing\
    \ for Hello packets is presented\n    in Section 10.5.  The sending of Hello packets\
    \ is covered in Section\n    9.5.\n        0                   1             \
    \      2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |   Version #   |       1       |         Packet length         |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                          Router ID                            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                           Area ID                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |           Checksum            |             AuType            |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                       Authentication                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                       Authentication                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                        Network Mask                           |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |         HelloInterval         |    Options    |    Rtr Pri    |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                     RouterDeadInterval                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                      Designated Router                        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                   Backup Designated Router                    |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                          Neighbor                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                              ...                              |\n  \
    \  Network mask\n        The network mask associated with this interface.  For\
    \ example,\n        if the interface is to a class B network whose third byte\
    \ is\n        used for subnetting, the network mask is 0xffffff00.\n    Options\n\
    \        The optional capabilities supported by the router, as documented\n  \
    \      in Section A.2.\n    HelloInterval\n        The number of seconds between\
    \ this router's Hello packets.\n    Rtr Pri\n        This router's Router Priority.\
    \  Used in (Backup) Designated\n        Router election.  If set to 0, the router\
    \ will be ineligible to\n        become (Backup) Designated Router.\n    RouterDeadInterval\n\
    \        The number of seconds before declaring a silent router down.\n    Designated\
    \ Router\n        The identity of the Designated Router for this network, in the\n\
    \        view of the sending router.  The Designated Router is identified\n  \
    \      here by its IP interface address on the network.  Set to 0.0.0.0\n    \
    \    if there is no Designated Router.\n    Backup Designated Router\n       \
    \ The identity of the Backup Designated Router for this network,\n        in the\
    \ view of the sending router.  The Backup Designated Router\n        is identified\
    \ here by its IP interface address on the network.\n        Set to 0.0.0.0 if\
    \ there is no Backup Designated Router.\n    Neighbor\n        The Router IDs\
    \ of each router from whom valid Hello packets have\n        been seen recently\
    \ on the network.  Recently means in the last\n        RouterDeadInterval seconds.\n"
- title: A.3.3 The Database Description packet
  contents:
  - "A.3.3 The Database Description packet\n    Database Description packets are OSPF\
    \ packet type 2.  These packets\n    are exchanged when an adjacency is being\
    \ initialized.  They describe\n    the contents of the link-state database.  Multiple\
    \ packets may be\n    used to describe the database.  For this purpose a poll-response\n\
    \    procedure is used.  One of the routers is designated to be the\n    master,\
    \ the other the slave.  The master sends Database Description\n    packets (polls)\
    \ which are acknowledged by Database Description\n    packets sent by the slave\
    \ (responses).  The responses are linked to\n    the polls via the packets' DD\
    \ sequence numbers.\n        0                   1                   2       \
    \            3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |   Version #   |       2       |         Packet length         |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                          Router ID                            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                           Area ID                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |           Checksum            |             AuType            |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                       Authentication                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                       Authentication                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |         Interface MTU         |    Options    |0|0|0|0|0|I|M|MS\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                     DD sequence number                        |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                                                               |\n       +- \
    \                                                            -+\n       |    \
    \                                                           |\n       +-     \
    \                 An LSA Header                          -+\n       |        \
    \                                                       |\n       +-         \
    \                                                    -+\n       |            \
    \                                                   |\n       +-             \
    \                                                -+\n       |                \
    \                                               |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                              ...                              |\n  \
    \  The format of the Database Description packet is very similar to\n    both\
    \ the Link State Request and Link State Acknowledgment packets.\n    The main\
    \ part of all three is a list of items, each item describing\n    a piece of the\
    \ link-state database.  The sending of Database\n    Description Packets is documented\
    \ in Section 10.8.  The reception of\n    Database Description packets is documented\
    \ in Section 10.6.\n    Interface MTU\n        The size in bytes of the largest\
    \ IP datagram that can be sent\n        out the associated interface, without\
    \ fragmentation.  The MTUs\n        of common Internet link types can be found\
    \ in Table 7-1 of\n        [Ref22]. Interface MTU should be set to 0 in Database\n\
    \        Description packets sent over virtual links.\n    Options\n        The\
    \ optional capabilities supported by the router, as documented\n        in Section\
    \ A.2.\n    I-bit\n        The Init bit.  When set to 1, this packet is the first\
    \ in the\n        sequence of Database Description Packets.\n    M-bit\n     \
    \   The More bit.  When set to 1, it indicates that more Database\n        Description\
    \ Packets are to follow.\n    MS-bit\n        The Master/Slave bit.  When set\
    \ to 1, it indicates that the\n        router is the master during the Database\
    \ Exchange process.\n        Otherwise, the router is the slave.\n    DD sequence\
    \ number\n        Used to sequence the collection of Database Description Packets.\n\
    \        The initial value (indicated by the Init bit being set) should\n    \
    \    be unique.  The DD sequence number then increments until the\n        complete\
    \ database description has been sent.\n    The rest of the packet consists of\
    \ a (possibly partial) list of the\n    link-state database's pieces.  Each LSA\
    \ in the database is described\n    by its LSA header.  The LSA header is documented\
    \ in Section A.4.1.\n    It contains all the information required to uniquely\
    \ identify both\n    the LSA and the LSA's current instance.\n"
- title: A.3.4 The Link State Request packet
  contents:
  - "A.3.4 The Link State Request packet\n    Link State Request packets are OSPF\
    \ packet type 3.  After exchanging\n    Database Description packets with a neighboring\
    \ router, a router may\n    find that parts of its link-state database are out-of-date.\
    \  The\n    Link State Request packet is used to request the pieces of the\n \
    \   neighbor's database that are more up-to-date.  Multiple Link State\n    Request\
    \ packets may need to be used.\n    A router that sends a Link State Request packet\
    \ has in mind the\n    precise instance of the database pieces it is requesting.\
    \ Each\n    instance is defined by its LS sequence number, LS checksum, and LS\n\
    \    age, although these fields are not specified in the Link State\n    Request\
    \ Packet itself.  The router may receive even more recent\n    instances in response.\n\
    \    The sending of Link State Request packets is documented in Section\n    10.9.\
    \  The reception of Link State Request packets is documented in\n    Section 10.7.\n\
    \        0                   1                   2                   3\n     \
    \   0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |   Version #   |       3       |         Packet length         |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                          Router ID                            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                           Area ID                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |           Checksum            |             AuType            |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                       Authentication                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                       Authentication                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                          LS type                              |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                       Link State ID                           |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                     Advertising Router                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                              ...                              |\n  \
    \  Each LSA requested is specified by its LS type, Link State ID, and\n    Advertising\
    \ Router.  This uniquely identifies the LSA, but not its\n    instance.  Link\
    \ State Request packets are understood to be requests\n    for the most recent\
    \ instance (whatever that might be).\n"
- title: A.3.5 The Link State Update packet
  contents:
  - "A.3.5 The Link State Update packet\n    Link State Update packets are OSPF packet\
    \ type 4.  These packets\n    implement the flooding of LSAs.  Each Link State\
    \ Update packet\n    carries a collection of LSAs one hop further from their origin.\n\
    \    Several LSAs may be included in a single packet.\n    Link State Update packets\
    \ are multicast on those physical networks\n    that support multicast/broadcast.\
    \  In order to make the flooding\n    procedure reliable, flooded LSAs are acknowledged\
    \ in Link State\n    Acknowledgment packets.  If retransmission of certain LSAs\
    \ is\n    necessary, the retransmitted LSAs are always sent directly to the\n\
    \    neighbor.  For more information on the reliable flooding of LSAs,\n    consult\
    \ Section 13.\n        0                   1                   2             \
    \      3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |   Version #   |       4       |         Packet length         |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                          Router ID                            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                           Area ID                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |           Checksum            |             AuType            |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                       Authentication                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                       Authentication                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                            # LSAs                             |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                                                               |\n      \
    \ +-                                                            +-+\n       |\
    \                             LSAs                              |\n       +- \
    \                                                           +-+\n       |    \
    \                          ...                              |\n    # LSAs\n  \
    \      The number of LSAs included in this update.\n    The body of the Link State\
    \ Update packet consists of a list of LSAs.\n    Each LSA begins with a common\
    \ 20 byte header, described in Section\n    A.4.1. Detailed formats of the different\
    \ types of LSAs are described\n    in Section A.4.\n"
- title: A.3.6 The Link State Acknowledgment packet
  contents:
  - "A.3.6 The Link State Acknowledgment packet\n    Link State Acknowledgment Packets\
    \ are OSPF packet type 5.  To make\n    the flooding of LSAs reliable, flooded\
    \ LSAs are explicitly\n    acknowledged.  This acknowledgment is accomplished\
    \ through the\n    sending and receiving of Link State Acknowledgment packets.\n\
    \    Multiple LSAs can be acknowledged in a single Link State\n    Acknowledgment\
    \ packet.\n    Depending on the state of the sending interface and the sender\
    \ of\n    the corresponding Link State Update packet, a Link State\n    Acknowledgment\
    \ packet is sent either to the multicast address\n    AllSPFRouters, to the multicast\
    \ address AllDRouters, or as a\n    unicast.  The sending of Link State Acknowledgement\
    \ packets is\n    documented in Section 13.5.  The reception of Link State\n \
    \   Acknowledgement packets is documented in Section 13.7.\n    The format of\
    \ this packet is similar to that of the Data Description\n    packet.  The body\
    \ of both packets is simply a list of LSA headers.\n        0                \
    \   1                   2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |   Version #   |       5       |         Packet length         |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                          Router ID                            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                           Area ID                             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |           Checksum            |             AuType            |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                       Authentication                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                       Authentication                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                                                               |\n  \
    \     +-                                                             -+\n    \
    \   |                                                               |\n      \
    \ +-                         An LSA Header                       -+\n       |\
    \                                                               |\n       +- \
    \                                                            -+\n       |    \
    \                                                           |\n       +-     \
    \                                                        -+\n       |        \
    \                                                       |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                              ...                              |\n  \
    \  Each acknowledged LSA is described by its LSA header.  The LSA\n    header\
    \ is documented in Section A.4.1.  It contains all the\n    information required\
    \ to uniquely identify both the LSA and the LSA's\n    current instance.\n"
- title: A.4 LSA formats
  contents:
  - "A.4 LSA formats\n    This memo defines five distinct types of LSAs.  Each LSA\
    \ begins with\n    a standard 20 byte LSA header.  This header is explained in\
    \ Section\n    A.4.1.  Succeeding sections then diagram the separate LSA types.\n\
    \    Each LSA describes a piece of the OSPF routing domain.  Every router\n  \
    \  originates a router-LSA.  In addition, whenever the router is\n    elected\
    \ Designated Router, it originates a network-LSA.  Other types\n    of LSAs may\
    \ also be originated (see Section 12.4).  All LSAs are\n    then flooded throughout\
    \ the OSPF routing domain.  The flooding\n    algorithm is reliable, ensuring\
    \ that all routers have the same\n    collection of LSAs.  (See Section 13 for\
    \ more information concerning\n    the flooding algorithm).  This collection of\
    \ LSAs is called the\n    link-state database.\n    From the link state database,\
    \ each router constructs a shortest path\n    tree with itself as root.  This\
    \ yields a routing table (see Section\n    11).  For the details of the routing\
    \ table build process, see\n    Section 16.\n"
- title: A.4.1 The LSA header
  contents:
  - "A.4.1 The LSA header\n    All LSAs begin with a common 20 byte header.  This\
    \ header contains\n    enough information to uniquely identify the LSA (LS type,\
    \ Link State\n    ID, and Advertising Router).  Multiple instances of the LSA\
    \ may\n    exist in the routing domain at the same time.  It is then necessary\n\
    \    to determine which instance is more recent.  This is accomplished by\n  \
    \  examining the LS age, LS sequence number and LS checksum fields that\n    are\
    \ also contained in the LSA header.\n        0                   1           \
    \        2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |            LS age             |    Options    |    LS type    |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                        Link State ID                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                     Advertising Router                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                     LS sequence number                        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |         LS checksum           |             length            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    LS age\n\
    \        The time in seconds since the LSA was originated.\n    Options\n    \
    \    The optional capabilities supported by the described portion of\n       \
    \ the routing domain.  OSPF's optional capabilities are documented\n        in\
    \ Section A.2.\n    LS type\n        The type of the LSA.  Each LSA type has a\
    \ separate advertisement\n        format.  The LSA types defined in this memo\
    \ are as follows (see\n        Section 12.1.3 for further explanation):\n    \
    \                    LS Type   Description\n                        ___________________________________\n\
    \                        1         Router-LSAs\n                        2    \
    \     Network-LSAs\n                        3         Summary-LSAs (IP network)\n\
    \                        4         Summary-LSAs (ASBR)\n                     \
    \   5         AS-external-LSAs\n    Link State ID\n        This field identifies\
    \ the portion of the internet environment\n        that is being described by\
    \ the LSA.  The contents of this field\n        depend on the LSA's LS type. \
    \ For example, in network-LSAs the\n        Link State ID is set to the IP interface\
    \ address of the\n        network's Designated Router (from which the network's\
    \ IP address\n        can be derived).  The Link State ID is further discussed\
    \ in\n        Section 12.1.4.\n    Advertising Router\n        The Router ID of\
    \ the router that originated the LSA.  For\n        example, in network-LSAs this\
    \ field is equal to the Router ID of\n        the network's Designated Router.\n\
    \    LS sequence number\n        Detects old or duplicate LSAs.  Successive instances\
    \ of an LSA\n        are given successive LS sequence numbers.  See Section 12.1.6\n\
    \        for more details.\n    LS checksum\n        The Fletcher checksum of\
    \ the complete contents of the LSA,\n        including the LSA header but excluding\
    \ the LS age field. See\n        Section 12.1.7 for more details.\n    length\n\
    \        The length in bytes of the LSA.  This includes the 20 byte LSA\n    \
    \    header.\n"
- title: A.4.2 Router-LSAs
  contents:
  - "A.4.2 Router-LSAs\n    Router-LSAs are the Type 1 LSAs.  Each router in an area\
    \ originates\n    a router-LSA.  The LSA describes the state and cost of the router's\n\
    \    links (i.e., interfaces) to the area.  All of the router's links to\n   \
    \ the area must be described in a single router-LSA.  For details\n    concerning\
    \ the construction of router-LSAs, see Section 12.4.1.\n        0            \
    \       1                   2                   3\n        0 1 2 3 4 5 6 7 8 9\
    \ 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |            LS age             |     Options   |       1       |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                        Link State ID                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                     Advertising Router                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                     LS sequence number                        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |         LS checksum           |             length            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \    0    |V|E|B|        0      |            # links            |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                          Link ID                              |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                         Link Data                             |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \     Type      |     # TOS     |            metric             |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                              ...                              |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |      TOS      |        0      |          TOS  metric          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                          Link ID                              |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                         Link Data                             |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                              ...                              |\n    In\
    \ router-LSAs, the Link State ID field is set to the router's OSPF\n    Router\
    \ ID. Router-LSAs are flooded throughout a single area only.\n    bit V\n    \
    \    When set, the router is an endpoint of one or more fully\n        adjacent\
    \ virtual links having the described area as Transit area\n        (V is for virtual\
    \ link endpoint).\n    bit E\n        When set, the router is an AS boundary router\
    \ (E is for\n        external).\n    bit B\n        When set, the router is an\
    \ area border router (B is for border).\n    # links\n        The number of router\
    \ links described in this LSA.  This must be\n        the total collection of\
    \ router links (i.e., interfaces) to the\n        area.\n    The following fields\
    \ are used to describe each router link (i.e.,\n    interface). Each router link\
    \ is typed (see the below Type field).\n    The Type field indicates the kind\
    \ of link being described.  It may\n    be a link to a transit network, to another\
    \ router or to a stub\n    network.  The values of all the other fields describing\
    \ a router\n    link depend on the link's Type.  For example, each link has an\n\
    \    associated 32-bit Link Data field.  For links to stub networks this\n   \
    \ field specifies the network's IP address mask.  For other link types\n    the\
    \ Link Data field specifies the router interface's IP address.\n    Type\n   \
    \     A quick description of the router link.  One of the following.\n       \
    \ Note that host routes are classified as links to stub networks\n        with\
    \ network mask of 0xffffffff.\n                 Type   Description\n         \
    \        __________________________________________________\n                \
    \ 1      Point-to-point connection to another router\n                 2     \
    \ Connection to a transit network\n                 3      Connection to a stub\
    \ network\n                 4      Virtual link\n    Link ID\n        Identifies\
    \ the object that this router link connects to.  Value\n        depends on the\
    \ link's Type.  When connecting to an object that\n        also originates an\
    \ LSA (i.e., another router or a transit\n        network) the Link ID is equal\
    \ to the neighboring LSA's Link\n        State ID.  This provides the key for\
    \ looking up the neighboring\n        LSA in the link state database during the\
    \ routing table\n        calculation. See Section 12.2 for more details.\n   \
    \                    Type   Link ID\n                       ______________________________________\n\
    \                       1      Neighboring router's Router ID\n              \
    \         2      IP address of Designated Router\n                       3   \
    \   IP network/subnet number\n                       4      Neighboring router's\
    \ Router ID\n    Link Data\n        Value again depends on the link's Type field.\
    \ For connections to\n        stub networks, Link Data specifies the network's\
    \ IP address\n        mask. For unnumbered point-to-point connections, it specifies\n\
    \        the interface's MIB-II [Ref8] ifIndex value. For the other link\n   \
    \     types it specifies the router interface's IP address. This\n        latter\
    \ piece of information is needed during the routing table\n        build process,\
    \ when calculating the IP address of the next hop.\n        See Section 16.1.1\
    \ for more details.\n    # TOS\n        The number of different TOS metrics given\
    \ for this link, not\n        counting the required link metric (referred to as\
    \ the TOS 0\n        metric in [Ref9]).  For example, if no additional TOS metrics\n\
    \        are given, this field is set to 0.\n    metric\n        The cost of using\
    \ this router link.\n    Additional TOS-specific information may also be included,\
    \ for\n    backward compatibility with previous versions of the OSPF\n    specification\
    \ ([Ref9]). Within each link, and for each desired TOS,\n    TOS TOS-specific\
    \ link information may be encoded as follows:\n    TOS IP Type of Service that\
    \ this metric refers to.  The encoding of\n        TOS in OSPF LSAs is described\
    \ in Section 12.3.\n    TOS metric\n        TOS-specific metric information.\n"
- title: A.4.3 Network-LSAs
  contents:
  - "A.4.3 Network-LSAs\n    Network-LSAs are the Type 2 LSAs.  A network-LSA is originated\
    \ for\n    each broadcast and NBMA network in the area which supports two or\n\
    \    more routers.  The network-LSA is originated by the network's\n    Designated\
    \ Router.  The LSA describes all routers attached to the\n    network, including\
    \ the Designated Router itself.  The LSA's Link\n    State ID field lists the\
    \ IP interface address of the Designated\n    Router.\n    The distance from the\
    \ network to all attached routers is zero.  This\n    is why metric fields need\
    \ not be specified in the network-LSA.  For\n    details concerning the construction\
    \ of network-LSAs, see Section\n    12.4.2.\n        0                   1   \
    \                2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |            LS age             |      Options  |      2        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                        Link State ID                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                     Advertising Router                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                     LS sequence number                        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |         LS checksum           |             length            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                         Network Mask                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                        Attached Router                        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                              ...                              |\n    Network\
    \ Mask\n        The IP address mask for the network.  For example, a class A\n\
    \        network would have the mask 0xff000000.\n    Attached Router\n      \
    \  The Router IDs of each of the routers attached to the network.\n        Actually,\
    \ only those routers that are fully adjacent to the\n        Designated Router\
    \ are listed.  The Designated Router includes\n        itself in this list.  The\
    \ number of routers included can be\n        deduced from the LSA header's length\
    \ field.\n"
- title: A.4.4 Summary-LSAs
  contents:
  - "A.4.4 Summary-LSAs\n    Summary-LSAs are the Type 3 and 4 LSAs.  These LSAs are\
    \ originated\n    by area border routers. Summary-LSAs describe inter-area\n \
    \   destinations.  For details concerning the construction of summary-\n    LSAs,\
    \ see Section 12.4.3.\n    Type 3 summary-LSAs are used when the destination is\
    \ an IP network.\n    In this case the LSA's Link State ID field is an IP network\
    \ number\n    (if necessary, the Link State ID can also have one or more of the\n\
    \    network's \"host\" bits set; see Appendix E for details). When the\n    destination\
    \ is an AS boundary router, a Type 4 summary-LSA is used,\n    and the Link State\
    \ ID field is the AS boundary router's OSPF Router\n    ID.  (To see why it is\
    \ necessary to advertise the location of each\n    ASBR, consult Section 16.4.)\
    \  Other than the difference in the Link\n    State ID field, the format of Type\
    \ 3 and 4 summary-LSAs is\n    identical.\n        0                   1     \
    \              2                   3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5\
    \ 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |            LS age             |     Options   |    3 or 4     |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                        Link State ID                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                     Advertising Router                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                     LS sequence number                        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |         LS checksum           |             length            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                         Network Mask                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |      0        |                  metric                       |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |     TOS       |                TOS  metric                    |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                              ...                              |\n    For stub\
    \ areas, Type 3 summary-LSAs can also be used to describe a\n    (per-area) default\
    \ route.  Default summary routes are used in stub\n    areas instead of flooding\
    \ a complete set of external routes.  When\n    describing a default summary route,\
    \ the summary-LSA's Link State ID\n    is always set to DefaultDestination (0.0.0.0)\
    \ and the Network Mask\n    is set to 0.0.0.0.\n    Network Mask\n        For\
    \ Type 3 summary-LSAs, this indicates the destination\n        network's IP address\
    \ mask.  For example, when advertising the\n        location of a class A network\
    \ the value 0xff000000 would be\n        used.  This field is not meaningful and\
    \ must be zero for Type 4\n        summary-LSAs.\n    metric\n        The cost\
    \ of this route.  Expressed in the same units as the\n        interface costs\
    \ in the router-LSAs.\n    Additional TOS-specific information may also be included,\
    \ for\n    backward compatibility with previous versions of the OSPF\n    specification\
    \ ([Ref9]). For each desired TOS, TOS-specific\n    information is encoded as\
    \ follows:\n    TOS IP Type of Service that this metric refers to.  The encoding\
    \ of\n        TOS in OSPF LSAs is described in Section 12.3.\n    TOS metric\n\
    \        TOS-specific metric information.\n"
- title: A.4.5 AS-external-LSAs
  contents:
  - "A.4.5 AS-external-LSAs\n    AS-external-LSAs are the Type 5 LSAs.  These LSAs\
    \ are originated by\n    AS boundary routers, and describe destinations external\
    \ to the AS.\n    For details concerning the construction of AS-external-LSAs,\
    \ see\n    Section 12.4.3.\n    AS-external-LSAs usually describe a particular\
    \ external destination.\n    For these LSAs the Link State ID field specifies\
    \ an IP network\n    number (if necessary, the Link State ID can also have one\
    \ or more of\n    the network's \"host\" bits set; see Appendix E for details).\
    \  AS-\n    external-LSAs are also used to describe a default route.  Default\n\
    \    routes are used when no specific route exists to the destination.\n    When\
    \ describing a default route, the Link State ID is always set to\n    DefaultDestination\
    \ (0.0.0.0) and the Network Mask is set to 0.0.0.0.\n        0               \
    \    1                   2                   3\n        0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |            LS age             |     Options   |      5        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                        Link State ID                          |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                     Advertising Router                        |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                     LS sequence number                        |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |         LS checksum           |             length            |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                         Network Mask                          |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |E|     0       |                  metric                       |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                      Forwarding address                       |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                      External Route Tag                       |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |E|    TOS      |                TOS  metric                    |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                      Forwarding address                       |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n       |\
    \                      External Route Tag                       |\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |                              ...                              |\n  \
    \  Network Mask\n        The IP address mask for the advertised destination. \
    \ For\n        example, when advertising a class A network the mask 0xff000000\n\
    \        would be used.\n    bit E\n        The type of external metric.  If bit\
    \ E is set, the metric\n        specified is a Type 2 external metric.  This means\
    \ the metric is\n        considered larger than any link state path.  If bit E\
    \ is zero,\n        the specified metric is a Type 1 external metric.  This means\n\
    \        that it is expressed in the same units as the link state metric\n   \
    \     (i.e., the same units as interface cost).\n    metric\n        The cost\
    \ of this route.  Interpretation depends on the external\n        type indication\
    \ (bit E above).\n    Forwarding address\n        Data traffic for the advertised\
    \ destination will be forwarded to\n        this address.  If the Forwarding address\
    \ is set to 0.0.0.0, data\n        traffic will be forwarded instead to the LSA's\
    \ originator (i.e.,\n        the responsible AS boundary router).\n    External\
    \ Route Tag\n        A 32-bit field attached to each external route.  This is\
    \ not\n        used by the OSPF protocol itself.  It may be used to communicate\n\
    \        information between AS boundary routers; the precise nature of\n    \
    \    such information is outside the scope of this specification.\n    Additional\
    \ TOS-specific information may also be included, for\n    backward compatibility\
    \ with previous versions of the OSPF\n    specification ([Ref9]). For each desired\
    \ TOS, TOS-specific\n    information is encoded as follows:\n    TOS The Type\
    \ of Service that the following fields concern.  The\n        encoding of TOS\
    \ in OSPF LSAs is described in Section 12.3.\n    bit E\n        For backward-compatibility\
    \ with [Ref9].\n    TOS metric\n        TOS-specific metric information.\n   \
    \ Forwarding address\n        For backward-compatibility with [Ref9].\n    External\
    \ Route Tag\n        For backward-compatibility with [Ref9].\n"
- title: B. Architectural Constants
  contents:
  - "B. Architectural Constants\n    Several OSPF protocol parameters have fixed architectural\
    \ values.\n    These parameters have been referred to in the text by names such\
    \ as\n    LSRefreshTime.  The same naming convention is used for the\n    configurable\
    \ protocol parameters.  They are defined in Appendix C.\n    The name of each\
    \ architectural constant follows, together with its\n    value and a short description\
    \ of its function.\n    LSRefreshTime\n        The maximum time between distinct\
    \ originations of any particular\n        LSA.  If the LS age field of one of\
    \ the router's self-originated\n        LSAs reaches the value LSRefreshTime,\
    \ a new instance of the LSA\n        is originated, even though the contents of\
    \ the LSA (apart from\n        the LSA header) will be the same.  The value of\
    \ LSRefreshTime is\n        set to 30 minutes.\n    MinLSInterval\n        The\
    \ minimum time between distinct originations of any particular\n        LSA. \
    \ The value of MinLSInterval is set to 5 seconds.\n    MinLSArrival\n        For\
    \ any particular LSA, the minimum time that must elapse\n        between reception\
    \ of new LSA instances during flooding. LSA\n        instances received at higher\
    \ frequencies are discarded. The\n        value of MinLSArrival is set to 1 second.\n\
    \    MaxAge\n        The maximum age that an LSA can attain. When an LSA's LS\
    \ age\n        field reaches MaxAge, it is reflooded in an attempt to flush the\n\
    \        LSA from the routing domain (See Section 14). LSAs of age MaxAge\n  \
    \      are not used in the routing table calculation.  The value of\n        MaxAge\
    \ is set to 1 hour.\n    CheckAge\n        When the age of an LSA in the link\
    \ state database hits a\n        multiple of CheckAge, the LSA's checksum is verified.\
    \  An\n        incorrect checksum at this time indicates a serious error.  The\n\
    \        value of CheckAge is set to 5 minutes.\n    MaxAgeDiff\n        The maximum\
    \ time dispersion that can occur, as an LSA is flooded\n        throughout the\
    \ AS.  Most of this time is accounted for by the\n        LSAs sitting on router\
    \ output queues (and therefore not aging)\n        during the flooding process.\
    \  The value of MaxAgeDiff is set to\n        15 minutes.\n    LSInfinity\n  \
    \      The metric value indicating that the destination described by an\n    \
    \    LSA is unreachable. Used in summary-LSAs and AS-external-LSAs as\n      \
    \  an alternative to premature aging (see Section 14.1). It is\n        defined\
    \ to be the 24-bit binary value of all ones: 0xffffff.\n    DefaultDestination\n\
    \        The Destination ID that indicates the default route.  This route\n  \
    \      is used when no other matching routing table entry can be found.\n    \
    \    The default destination can only be advertised in AS-external-\n        LSAs\
    \ and in stub areas' type 3 summary-LSAs.  Its value is the\n        IP address\
    \ 0.0.0.0. Its associated Network Mask is also always\n        0.0.0.0.\n    InitialSequenceNumber\n\
    \        The value used for LS Sequence Number when originating the first\n  \
    \      instance of any LSA. Its value is the signed 32-bit integer\n        0x80000001.\n\
    \    MaxSequenceNumber\n        The maximum value that LS Sequence Number can\
    \ attain.  Its value\n        is the signed 32-bit integer 0x7fffffff.\n"
- title: C. Configurable Constants
  contents:
  - "C. Configurable Constants\n    The OSPF protocol has quite a few configurable\
    \ parameters.  These\n    parameters are listed below.  They are grouped into\
    \ general\n    functional categories (area parameters, interface parameters, etc.).\n\
    \    Sample values are given for some of the parameters.\n    Some parameter settings\
    \ need to be consistent among groups of\n    routers.  For example, all routers\
    \ in an area must agree on that\n    area's parameters, and all routers attached\
    \ to a network must agree\n    on that network's IP network number and mask.\n\
    \    Some parameters may be determined by router algorithms outside of\n    this\
    \ specification (e.g., the address of a host connected to the\n    router via\
    \ a SLIP line).  From OSPF's point of view, these items are\n    still configurable.\n\
    \    C.1 Global parameters\n        In general, a separate copy of the OSPF protocol\
    \ is run for each\n        area.  Because of this, most configuration parameters\
    \ are\n        defined on a per-area basis.  The few global configuration\n  \
    \      parameters are listed below.\n        Router ID\n            This is a\
    \ 32-bit number that uniquely identifies the router\n            in the Autonomous\
    \ System.  One algorithm for Router ID\n            assignment is to choose the\
    \ largest or smallest IP address\n            assigned to the router.  If a router's\
    \ OSPF Router ID is\n            changed, the router's OSPF software should be\
    \ restarted\n            before the new Router ID takes effect. Before restarting\
    \ in\n            order to change its Router ID, the router should flush its\n\
    \            self-originated LSAs from the routing domain (see Section\n     \
    \       14.1), or they will persist for up to MaxAge minutes.\n        RFC1583Compatibility\n\
    \            Controls the preference rules used in Section 16.4 when\n       \
    \     choosing among multiple AS-external-LSAs advertising the\n            same\
    \ destination. When set to \"enabled\", the preference\n            rules remain\
    \ those specified by RFC 1583 ([Ref9]). When set\n            to \"disabled\"\
    , the preference rules are those stated in\n            Section 16.4.1, which\
    \ prevent routing loops when AS-\n            external-LSAs for the same destination\
    \ have been originated\n            from different areas. Set to \"enabled\" by\
    \ default.\n            In order to minimize the chance of routing loops, all\
    \ OSPF\n            routers in an OSPF routing domain should have\n          \
    \  RFC1583Compatibility set identically. When there are routers\n            present\
    \ that have not been updated with the functionality\n            specified in\
    \ Section 16.4.1 of this memo, all routers should\n            have RFC1583Compatibility\
    \ set to \"enabled\". Otherwise, all\n            routers should have RFC1583Compatibility\
    \ set to \"disabled\",\n            preventing all routing loops.\n    C.2 Area\
    \ parameters\n        All routers belonging to an area must agree on that area's\n\
    \        configuration.  Disagreements between two routers will lead to\n    \
    \    an inability for adjacencies to form between them, with a\n        resulting\
    \ hindrance to the flow of routing protocol and data\n        traffic.  The following\
    \ items must be configured for an area:\n        Area ID\n            This is\
    \ a 32-bit number that identifies the area.  The Area\n            ID of 0.0.0.0\
    \ is reserved for the backbone.  If the area\n            represents a subnetted\
    \ network, the IP network number of the\n            subnetted network may be\
    \ used for the Area ID.\n        List of address ranges\n            An OSPF area\
    \ is defined as a list of address ranges. Each\n            address range consists\
    \ of the following items:\n            [IP address, mask]\n                  \
    \  Describes the collection of IP addresses contained\n                    in\
    \ the address range. Networks and hosts are\n                    assigned to an\
    \ area depending on whether their\n                    addresses fall into one\
    \ of the area's defining\n                    address ranges.  Routers are viewed\
    \ as belonging to\n                    multiple areas, depending on their attached\n\
    \                    networks' area membership.\n            Status  Set to either\
    \ Advertise or DoNotAdvertise.  Routing\n                    information is condensed\
    \ at area boundaries.\n                    External to the area, at most a single\
    \ route is\n                    advertised (via a summary-LSA) for each address\n\
    \                    range. The route is advertised if and only if the\n     \
    \               address range's Status is set to Advertise.\n                \
    \    Unadvertised ranges allow the existence of certain\n                    networks\
    \ to be intentionally hidden from other\n                    areas. Status is\
    \ set to Advertise by default.\n            As an example, suppose an IP subnetted\
    \ network is to be its\n            own OSPF area.  The area would be configured\
    \ as a single\n            address range, whose IP address is the address of the\n\
    \            subnetted network, and whose mask is the natural class A, B,\n  \
    \          or C address mask.  A single route would be advertised\n          \
    \  external to the area, describing the entire subnetted\n            network.\n\
    \        ExternalRoutingCapability\n            Whether AS-external-LSAs will\
    \ be flooded into/throughout the\n            area.  If AS-external-LSAs are excluded\
    \ from the area, the\n            area is called a \"stub\".  Internal to stub\
    \ areas, routing to\n            external destinations will be based solely on\
    \ a default\n            summary route.  The backbone cannot be configured as\
    \ a stub\n            area.  Also, virtual links cannot be configured through\
    \ stub\n            areas.  For more information, see Section 3.6.\n        StubDefaultCost\n\
    \            If the area has been configured as a stub area, and the\n       \
    \     router itself is an area border router, then the\n            StubDefaultCost\
    \ indicates the cost of the default summary-\n            LSA that the router\
    \ should advertise into the area.\n    C.3 Router interface parameters\n     \
    \   Some of the configurable router interface parameters (such as IP\n       \
    \ interface address and subnet mask) actually imply properties of\n        the\
    \ attached networks, and therefore must be consistent across\n        all the\
    \ routers attached to that network.  The parameters that\n        must be configured\
    \ for a router interface are:\n        IP interface address\n            The IP\
    \ protocol address for this interface.  This uniquely\n            identifies\
    \ the router over the entire internet.  An IP\n            address is not required\
    \ on point-to-point networks.  Such a\n            point-to-point network is called\
    \ \"unnumbered\".\n        IP interface mask\n            Also referred to as\
    \ the subnet/network mask, this indicates\n            the portion of the IP interface\
    \ address that identifies the\n            attached network.  Masking the IP interface\
    \ address with the\n            IP interface mask yields the IP network number\
    \ of the\n            attached network.  On point-to-point networks and virtual\n\
    \            links, the IP interface mask is not defined. On these\n         \
    \   networks, the link itself is not assigned an IP network\n            number,\
    \ and so the addresses of each side of the link are\n            assigned independently,\
    \ if they are assigned at all.\n        Area ID\n            The OSPF area to\
    \ which the attached network belongs.\n        Interface output cost\n       \
    \     The cost of sending a packet on the interface, expressed in\n          \
    \  the link state metric.  This is advertised as the link cost\n            for\
    \ this interface in the router's router-LSA. The interface\n            output\
    \ cost must always be greater than 0.\n        RxmtInterval\n            The number\
    \ of seconds between LSA retransmissions, for\n            adjacencies belonging\
    \ to this interface.  Also used when\n            retransmitting Database Description\
    \ and Link State Request\n            Packets.  This should be well over the expected\
    \ round-trip\n            delay between any two routers on the attached network.\
    \  The\n            setting of this value should be conservative or needless\n\
    \            retransmissions will result.  Sample value for a local area\n   \
    \         network: 5 seconds.\n        InfTransDelay\n            The estimated\
    \ number of seconds it takes to transmit a Link\n            State Update Packet\
    \ over this interface.  LSAs contained in\n            the update packet must\
    \ have their age incremented by this\n            amount before transmission.\
    \  This value should take into\n            account the transmission and propagation\
    \ delays of the\n            interface.  It must be greater than 0.  Sample value\
    \ for a\n            local area network: 1 second.\n        Router Priority\n\
    \            An 8-bit unsigned integer.  When two routers attached to a\n    \
    \        network both attempt to become Designated Router, the one\n         \
    \   with the highest Router Priority takes precedence.  If there\n           \
    \ is still a tie, the router with the highest Router ID takes\n            precedence.\
    \  A router whose Router Priority is set to 0 is\n            ineligible to become\
    \ Designated Router on the attached\n            network.  Router Priority is\
    \ only configured for interfaces\n            to broadcast and NBMA networks.\n\
    \        HelloInterval\n            The length of time, in seconds, between the\
    \ Hello Packets\n            that the router sends on the interface.  This value\
    \ is\n            advertised in the router's Hello Packets.  It must be the\n\
    \            same for all routers attached to a common network.  The\n       \
    \     smaller the HelloInterval, the faster topological changes\n            will\
    \ be detected; however, more OSPF routing protocol\n            traffic will ensue.\
    \  Sample value for a X.25 PDN network: 30\n            seconds.  Sample value\
    \ for a local area network: 10 seconds.\n        RouterDeadInterval\n        \
    \    After ceasing to hear a router's Hello Packets, the number\n            of\
    \ seconds before its neighbors declare the router down.\n            This is also\
    \ advertised in the router's Hello Packets in\n            their RouterDeadInterval\
    \ field.  This should be some\n            multiple of the HelloInterval (say\
    \ 4).  This value again\n            must be the same for all routers attached\
    \ to a common\n            network.\n        AuType\n            Identifies the\
    \ authentication procedure to be used on the\n            attached network.  This\
    \ value must be the same for all\n            routers attached to the network.\
    \  See Appendix D for a\n            discussion of the defined authentication\
    \ types.\n        Authentication key\n            This configured data allows\
    \ the authentication procedure to\n            verify OSPF protocol packets received\
    \ over the interface.\n            For example, if the AuType indicates simple\
    \ password, the\n            Authentication key would be a clear 64-bit password.\n\
    \            Authentication keys associated with the other OSPF\n            authentication\
    \ types are discussed in Appendix D.\n    C.4 Virtual link parameters\n      \
    \  Virtual links are used to restore/increase connectivity of the\n        backbone.\
    \  Virtual links may be configured between any pair of\n        area border routers\
    \ having interfaces to a common (non-backbone)\n        area.  The virtual link\
    \ appears as an unnumbered point-to-point\n        link in the graph for the backbone.\
    \  The virtual link must be\n        configured in both of the area border routers.\n\
    \        A virtual link appears in router-LSAs (for the backbone) as if\n    \
    \    it were a separate router interface to the backbone.  As such,\n        it\
    \ has all of the parameters associated with a router interface\n        (see Section\
    \ C.3).  Although a virtual link acts like an\n        unnumbered point-to-point\
    \ link, it does have an associated IP\n        interface address.  This address\
    \ is used as the IP source in\n        OSPF protocol packets it sends along the\
    \ virtual link, and is\n        set dynamically during the routing table build\
    \ process.\n        Interface output cost is also set dynamically on virtual links\n\
    \        to be the cost of the intra-area path between the two routers.\n    \
    \    The parameter RxmtInterval must be configured, and should be\n        well\
    \ over the expected round-trip delay between the two routers.\n        This may\
    \ be hard to estimate for a virtual link; it is better to\n        err on the\
    \ side of making it too large.  Router Priority is not\n        used on virtual\
    \ links.\n        A virtual link is defined by the following two configurable\n\
    \        parameters: the Router ID of the virtual link's other endpoint,\n   \
    \     and the (non-backbone) area through which the virtual link runs\n      \
    \  (referred to as the virtual link's Transit area).  Virtual links\n        cannot\
    \ be configured through stub areas.\n    C.5 NBMA network parameters\n       \
    \ OSPF treats an NBMA network much like it treats a broadcast\n        network.\
    \  Since there may be many routers attached to the\n        network, a Designated\
    \ Router is selected for the network.  This\n        Designated Router then originates\
    \ a network-LSA, which lists all\n        routers attached to the NBMA network.\n\
    \        However, due to the lack of broadcast capabilities, it may be\n     \
    \   necessary to use configuration parameters in the Designated\n        Router\
    \ selection.  These parameters will only need to be\n        configured in those\
    \ routers that are themselves eligible to\n        become Designated Router (i.e.,\
    \ those router's whose Router\n        Priority for the network is non-zero),\
    \ and then only if no\n        automatic procedure for discovering neighbors exists:\n\
    \        List of all other attached routers\n            The list of all other\
    \ routers attached to the NBMA network.\n            Each router is listed by\
    \ its IP interface address on the\n            network.  Also, for each router\
    \ listed, that router's\n            eligibility to become Designated Router must\
    \ be defined.\n            When an interface to a NBMA network comes up, the router\n\
    \            sends Hello Packets only to those neighbors eligible to\n       \
    \     become Designated Router, until the identity of the\n            Designated\
    \ Router is discovered.\n        PollInterval\n            If a neighboring router\
    \ has become inactive (Hello Packets\n            have not been seen for RouterDeadInterval\
    \ seconds), it may\n            still be necessary to send Hello Packets to the\
    \ dead\n            neighbor.  These Hello Packets will be sent at the reduced\n\
    \            rate PollInterval, which should be much larger than\n           \
    \ HelloInterval.  Sample value for a PDN X.25 network: 2\n            minutes.\n\
    \    C.6 Point-to-MultiPoint network parameters\n        On Point-to-MultiPoint\
    \ networks, it may be necessary to\n        configure the set of neighbors that\
    \ are directly reachable over\n        the Point-to-MultiPoint network. Each neighbor\
    \ is identified by\n        its IP address on the Point-to-MultiPoint network.\
    \ Designated\n        Routers are not elected on Point-to-MultiPoint networks,\
    \ so the\n        Designated Router eligibility of configured neighbors is\n \
    \       undefined.\n        Alternatively, neighbors on Point-to-MultiPoint networks\
    \ may be\n        dynamically discovered by lower-level protocols such as Inverse\n\
    \        ARP ([Ref14]).\n    C.7 Host route parameters\n        Host routes are\
    \ advertised in router-LSAs as stub networks with\n        mask 0xffffffff.  They\
    \ indicate either router interfaces to\n        point-to-point networks, looped\
    \ router interfaces, or IP hosts\n        that are directly connected to the router\
    \ (e.g., via a SLIP\n        line).  For each host directly connected to the router,\
    \ the\n        following items must be configured:\n        Host IP address\n\
    \            The IP address of the host.\n        Cost of link to host\n     \
    \       The cost of sending a packet to the host, in terms of the\n          \
    \  link state metric.  However, since the host probably has\n            only\
    \ a single connection to the internet, the actual\n            configured cost\
    \ in many cases is unimportant (i.e., will\n            have no effect on routing).\n\
    \        Area ID\n            The OSPF area to which the host belongs.\n"
- title: D. Authentication
  contents:
  - "D. Authentication\n    All OSPF protocol exchanges are authenticated.  The OSPF\
    \ packet\n    header (see Section A.3.1) includes an authentication type field,\n\
    \    and 64-bits of data for use by the appropriate authentication scheme\n  \
    \  (determined by the type field).\n    The authentication type is configurable\
    \ on a per-interface (or\n    equivalently, on a per-network/subnet) basis.  Additional\n\
    \    authentication data is also configurable on a per-interface basis.\n    Authentication\
    \ types 0, 1 and 2 are defined by this specification.\n    All other authentication\
    \ types are reserved for definition by the\n    IANA (iana@ISI.EDU).  The current\
    \ list of authentication types is\n    described below in Table 20.\n        \
    \          AuType       Description\n                  ___________________________________________\n\
    \                  0            Null authentication\n                  1     \
    \       Simple password\n                  2            Cryptographic authentication\n\
    \                  All others   Reserved for assignment by the\n             \
    \                  IANA (iana@ISI.EDU)\n                      Table 20: OSPF authentication\
    \ types.\n    D.1 Null authentication\n        Use of this authentication type\
    \ means that routing exchanges\n        over the network/subnet are not authenticated.\
    \  The 64-bit\n        authentication field in the OSPF header can contain anything;\
    \ it\n        is not examined on packet reception. When employing Null\n     \
    \   authentication, the entire contents of each OSPF packet (other\n        than\
    \ the 64-bit authentication field) are checksummed in order\n        to detect\
    \ data corruption.\n    D.2 Simple password authentication\n        Using this\
    \ authentication type, a 64-bit field is configured on\n        a per-network\
    \ basis.  All packets sent on a particular network\n        must have this configured\
    \ value in their OSPF header 64-bit\n        authentication field.  This essentially\
    \ serves as a \"clear\" 64-\n        bit password. In addition, the entire contents\
    \ of each OSPF\n        packet (other than the 64-bit authentication field) are\n\
    \        checksummed in order to detect data corruption.\n        Simple password\
    \ authentication guards against routers\n        inadvertently joining the routing\
    \ domain; each router must first\n        be configured with its attached networks'\
    \ passwords before it\n        can participate in routing.  However, simple password\n\
    \        authentication is vulnerable to passive attacks currently\n        widespread\
    \ in the Internet (see [Ref16]). Anyone with physical\n        access to the network\
    \ can learn the password and compromise the\n        security of the OSPF routing\
    \ domain.\n    D.3 Cryptographic authentication\n        Using this authentication\
    \ type, a shared secret key is\n        configured in all routers attached to\
    \ a common network/subnet.\n        For each OSPF protocol packet, the key is\
    \ used to\n        generate/verify a \"message digest\" that is appended to the\
    \ end\n        of the OSPF packet. The message digest is a one-way function of\n\
    \        the OSPF protocol packet and the secret key. Since the secret\n     \
    \   key is never sent over the network in the clear, protection is\n        provided\
    \ against passive attacks.\n        The algorithms used to generate and verify\
    \ the message digest\n        are specified implicitly by the secret key. This\
    \ specification\n        completely defines the use of OSPF Cryptographic authentication\n\
    \        when the MD5 algorithm is used.\n        In addition, a non-decreasing\
    \ sequence number is included in\n        each OSPF protocol packet to protect\
    \ against replay attacks.\n        This provides long term protection; however,\
    \ it is still\n        possible to replay an OSPF packet until the sequence number\n\
    \        changes. To implement this feature, each neighbor data structure\n  \
    \      contains a new field called the \"cryptographic sequence number\".\n  \
    \      This field is initialized to zero, and is also set to zero\n        0 \
    \                  1                   2                   3\n        0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \       |              0                |    Key ID     | Auth Data Len |\n  \
    \     +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n    \
    \   |                 Cryptographic sequence number                 |\n      \
    \ +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n        \
    \           Figure 18: Usage of the Authentication field\n                   in\
    \ the OSPF packet header when Cryptographic\n                          Authentication\
    \ is employed\n        whenever the neighbor's state transitions to \"Down\".\
    \ Whenever an\n        OSPF packet is accepted as authentic, the cryptographic\
    \ sequence\n        number is set to the received packet's sequence number.\n\
    \        This specification does not provide a rollover procedure for the\n  \
    \      cryptographic sequence number. When the cryptographic sequence\n      \
    \  number that the router is sending hits the maximum value, the\n        router\
    \ should reset the cryptographic sequence number that it is\n        sending back\
    \ to 0. After this is done, the router's neighbors\n        will reject the router's\
    \ OSPF packets for a period of\n        RouterDeadInterval, and then the router\
    \ will be forced to\n        reestablish all adjacencies over the interface. However,\
    \ it is\n        expected that many implementations will use \"seconds since\n\
    \        reboot\" (or \"seconds since 1960\", etc.) as the cryptographic\n   \
    \     sequence number. Such a choice will essentially prevent\n        rollover,\
    \ since the cryptographic sequence number field is 32\n        bits in length.\n\
    \        The OSPF Cryptographic authentication option does not provide\n     \
    \   confidentiality.\n        When cryptographic authentication is used, the 64-bit\n\
    \        Authentication field in the standard OSPF packet header is\n        redefined\
    \ as shown in Figure 18. The new field definitions are\n        as follows:\n\
    \        Key ID\n            This field identifies the algorithm and secret key\
    \ used to\n            create the message digest appended to the OSPF packet.\
    \ Key\n            Identifiers are unique per-interface (or equivalently, per-\n\
    \            subnet).\n        Auth Data Len\n            The length in bytes\
    \ of the message digest appended to the\n            OSPF packet.\n        Cryptographic\
    \ sequence number\n            An unsigned 32-bit non-decreasing sequence number.\
    \ Used to\n            guard against replay attacks.\n        The message digest\
    \ appended to the OSPF packet is not actually\n        considered part of the\
    \ OSPF protocol packet: the message digest\n        is not included in the OSPF\
    \ header's packet length, although it\n        is included in the packet's IP\
    \ header length field.\n        Each key is identified by the combination of interface\
    \ and Key\n        ID. An interface may have multiple keys active at any one time.\n\
    \        This enables smooth transition from one key to another. Each key\n  \
    \      has four time constants associated with it. These time constants\n    \
    \    can be expressed in terms of a time-of-day clock, or in terms of\n      \
    \  a router's local clock (e.g., number of seconds since last\n        reboot):\n\
    \        KeyStartAccept\n            The time that the router will start accepting\
    \ packets that\n            have been created with the given key.\n        KeyStartGenerate\n\
    \            The time that the router will start using the key for packet\n  \
    \          generation.\n        KeyStopGenerate\n            The time that the\
    \ router will stop using the key for packet\n            generation.\n       \
    \ KeyStopAccept\n            The time that the router will stop accepting packets\
    \ that\n            have been created with the given key.\n        In order to\
    \ achieve smooth key transition, KeyStartAccept should\n        be less than KeyStartGenerate\
    \ and KeyStopGenerate should be less\n        than KeyStopAccept. If KeyStopGenerate\
    \ and KeyStopAccept are\n        left unspecified, the key's lifetime is infinite.\
    \ When a new key\n        replaces an old, the KeyStartGenerate time for the new\
    \ key must\n        be less than or equal to the KeyStopGenerate time of the old\n\
    \        key.\n        Key storage should persist across a system restart, warm\
    \ or\n        cold, to avoid operational issues. In the event that the last\n\
    \        key associated with an interface expires, it is unacceptable to\n   \
    \     revert to an unauthenticated condition, and not advisable to\n        disrupt\
    \ routing.  Therefore, the router should send a \"last\n        authentication\
    \ key expiration\" notification to the network\n        manager and treat the\
    \ key as having an infinite lifetime until\n        the lifetime is extended,\
    \ the key is deleted by network\n        management, or a new key is configured.\n\
    \    D.4 Message generation\n        After building the contents of an OSPF packet,\
    \ the\n        authentication procedure indicated by the sending interface's\n\
    \        Autype value is called before the packet is sent. The\n        authentication\
    \ procedure modifies the OSPF packet as follows.\n        D.4.1 Generating Null\
    \ authentication\n            When using Null authentication, the packet is modified\
    \ as\n            follows:\n            (1) The Autype field in the standard OSPF\
    \ header is set to\n                0.\n            (2) The checksum field in\
    \ the standard OSPF header is set to\n                the standard IP checksum\
    \ of the entire contents of the\n                packet, starting with the OSPF\
    \ packet header but\n                excluding the 64-bit authentication field.\
    \  This\n                checksum is calculated as the 16-bit one's complement\
    \ of\n                the one's complement sum of all the 16-bit words in the\n\
    \                packet, excepting the authentication field.  If the\n       \
    \         packet's length is not an integral number of 16-bit\n              \
    \  words, the packet is padded with a byte of zero before\n                checksumming.\n\
    \        D.4.2 Generating Simple password authentication\n            When using\
    \ Simple password authentication, the packet is\n            modified as follows:\n\
    \            (1) The Autype field in the standard OSPF header is set to\n    \
    \            1.\n            (2) The checksum field in the standard OSPF header\
    \ is set to\n                the standard IP checksum of the entire contents of\
    \ the\n                packet, starting with the OSPF packet header but\n    \
    \            excluding the 64-bit authentication field.  This\n              \
    \  checksum is calculated as the 16-bit one's complement of\n                the\
    \ one's complement sum of all the 16-bit words in the\n                packet,\
    \ excepting the authentication field.  If the\n                packet's length\
    \ is not an integral number of 16-bit\n                words, the packet is padded\
    \ with a byte of zero before\n                checksumming.\n            (3) The\
    \ 64-bit authentication field in the OSPF packet\n                header is set\
    \ to the 64-bit password (i.e.,\n                authentication key) that has\
    \ been configured for the\n                interface.\n        D.4.3 Generating\
    \ Cryptographic authentication\n            When using Cryptographic authentication,\
    \ there may be\n            multiple keys configured for the interface. In this\
    \ case,\n            among the keys that are valid for message generation (i.e,\n\
    \            that have KeyStartGenerate <= current time <\n            KeyStopGenerate)\
    \ choose the one with the most recent\n            KeyStartGenerate time. Using\
    \ this key, modify the packet as\n            follows:\n            (1) The Autype\
    \ field in the standard OSPF header is set to\n                2.\n          \
    \  (2) The checksum field in the standard OSPF header is not\n               \
    \ calculated, but is instead set to 0.\n            (3) The Key ID (see Figure\
    \ 18) is set to the chosen key's\n                Key ID.\n            (4) The\
    \ Auth Data Len field is set to the length in bytes of\n                the message\
    \ digest that will be appended to the OSPF\n                packet. When using\
    \ MD5 as the authentication algorithm,\n                Auth Data Len will be\
    \ 16.\n            (5) The 32-bit Cryptographic sequence number (see Figure 18)\n\
    \                is set to a non-decreasing value (i.e., a value at least\n  \
    \              as large as the last value sent out the interface). The\n     \
    \           precise values to use in the cryptographic sequence\n            \
    \    number field are implementation-specific. For example,\n                it\
    \ may be based on a simple counter, or be based on the\n                system's\
    \ clock.\n            (6) The message digest is then calculated and appended to\n\
    \                the OSPF packet.  The authentication algorithm to be\n      \
    \          used in calculating the digest is indicated by the key\n          \
    \      itself.  Input to the authentication algorithm consists\n             \
    \   of the OSPF packet and the secret key. When using MD5 as\n               \
    \ the authentication algorithm, the message digest\n                calculation\
    \ proceeds as follows:\n                (a) The 16 byte MD5 key is appended to\
    \ the OSPF packet.\n                (b) Trailing pad and length fields are added,\
    \ as\n                    specified in [Ref17].\n                (c) The MD5 authentication\
    \ algorithm is run over the\n                    concatenation of the OSPF packet,\
    \ secret key, pad\n                    and length fields, producing a 16 byte\
    \ message\n                    digest (see [Ref17]).\n                (d) The\
    \ MD5 digest is written over the OSPF key (i.e.,\n                    appended\
    \ to the original OSPF packet). The digest is\n                    not counted\
    \ in the OSPF packet's length field, but\n                    is included in the\
    \ packet's IP length field. Any\n                    trailing pad or length fields\
    \ beyond the digest are\n                    not counted or transmitted.\n   \
    \ D.5 Message verification\n        When an OSPF packet has been received on an\
    \ interface, it must\n        be authenticated. The authentication procedure is\
    \ indicated by\n        the setting of Autype in the standard OSPF packet header,\
    \ which\n        matches the setting of Autype for the receiving OSPF interface.\n\
    \        If an OSPF protocol packet is accepted as authentic, processing\n   \
    \     of the packet continues as specified in Section 8.2. Packets\n        which\
    \ fail authentication are discarded.\n        D.5.1 Verifying Null authentication\n\
    \            When using Null authentication, the checksum field in the\n     \
    \       OSPF header must be verified. It must be set to the 16-bit\n         \
    \   one's complement of the one's complement sum of all the 16-\n            bit\
    \ words in the packet, excepting the authentication field.\n            (If the\
    \ packet's length is not an integral number of 16-bit\n            words, the\
    \ packet is padded with a byte of zero before\n            checksumming.)\n  \
    \      D.5.2 Verifying Simple password authentication\n            When using\
    \ Simple password authentication, the received OSPF\n            packet is authenticated\
    \ as follows:\n            (1) The checksum field in the OSPF header must be verified.\n\
    \                It must be set to the 16-bit one's complement of the\n      \
    \          one's complement sum of all the 16-bit words in the\n             \
    \   packet, excepting the authentication field.  (If the\n                packet's\
    \ length is not an integral number of 16-bit\n                words, the packet\
    \ is padded with a byte of zero before\n                checksumming.)\n     \
    \       (2) The 64-bit authentication field in the OSPF packet\n             \
    \   header must be equal to the 64-bit password (i.e.,\n                authentication\
    \ key) that has been configured for the\n                interface.\n        D.5.3\
    \ Verifying Cryptographic authentication\n            When using Cryptographic\
    \ authentication, the received OSPF\n            packet is authenticated as follows:\n\
    \            (1) Locate the receiving interface's configured key having\n    \
    \            Key ID equal to that specified in the received OSPF\n           \
    \     packet (see Figure 18). If the key is not found, or if\n               \
    \ the key is not valid for reception (i.e., current time <\n                KeyStartAccept\
    \ or current time >= KeyStopAccept), the\n                OSPF packet is discarded.\n\
    \            (2) If the cryptographic sequence number found in the OSPF\n    \
    \            header (see Figure 18) is less than the cryptographic\n         \
    \       sequence number recorded in the sending neighbor's data\n            \
    \    structure, the OSPF packet is discarded.\n            (3) Verify the appended\
    \ message digest in the following\n                steps:\n                (a)\
    \ The received digest is set aside.\n                (b) A new digest is calculated,\
    \ as specified in Step 6\n                    of Section D.4.3.\n            \
    \    (c) The calculated and received digests are compared. If\n              \
    \      they do not match, the OSPF packet is discarded. If\n                 \
    \   they do match, the OSPF protocol packet is accepted\n                    as\
    \ authentic, and the \"cryptographic sequence\n                    number\" in\
    \ the neighbor's data structure is set to\n                    the sequence number\
    \ found in the packet's OSPF\n                    header.\n"
- title: E. An algorithm for assigning Link State IDs
  contents:
  - "E. An algorithm for assigning Link State IDs\n    The Link State ID in AS-external-LSAs\
    \ and summary-LSAs is usually\n    set to the described network's IP address.\
    \ However, if necessary one\n    or more of the network's host bits may be set\
    \ in the Link State ID.\n    This allows the router to originate separate LSAs\
    \ for networks\n    having the same address, yet different masks. Such networks\
    \ can\n    occur in the presence of supernetting and subnet 0s (see [Ref10]).\n\
    \    This appendix gives one possible algorithm for setting the host bits\n  \
    \  in Link State IDs.  The choice of such an algorithm is a local\n    decision.\
    \ Separate routers are free to use different algorithms,\n    since the only LSAs\
    \ affected are the ones that the router itself\n    originates. The only requirement\
    \ on the algorithms used is that the\n    network's IP address should be used\
    \ as the Link State ID whenever\n    possible; this maximizes interoperability\
    \ with OSPF implementations\n    predating RFC 1583.\n    The algorithm below\
    \ is stated for AS-external-LSAs.  This is only\n    for clarity; the exact same\
    \ algorithm can be used for summary-LSAs.\n    Suppose that the router wishes\
    \ to originate an AS-external-LSA for a\n    network having address NA and mask\
    \ NM1. The following steps are then\n    used to determine the LSA's Link State\
    \ ID:\n    (1) Determine whether the router is already originating an AS-\n  \
    \      external-LSA with Link State ID equal to NA (in such an LSA the\n     \
    \   router itself will be listed as the LSA's Advertising Router).\n        If\
    \ not, the Link State ID is set equal to NA and the algorithm\n        terminates.\
    \ Otherwise,\n    (2) Obtain the network mask from the body of the already existing\n\
    \        AS-external-LSA. Call this mask NM2. There are then two cases:\n    \
    \    o   NM1 is longer (i.e., more specific) than NM2. In this case,\n       \
    \     set the Link State ID in the new LSA to be the network\n            [NA,NM1]\
    \ with all the host bits set (i.e., equal to NA or'ed\n            together with\
    \ all the bits that are not set in NM1, which is\n            network [NA,NM1]'s\
    \ broadcast address).\n        o   NM2 is longer than NM1. In this case, change\
    \ the existing\n            LSA (having Link State ID of NA) to reference the\
    \ new\n            network [NA,NM1] by incrementing the sequence number,\n   \
    \         changing the mask in the body to NM1 and inserting the cost\n      \
    \      of the new network. Then originate a new LSA for the old\n            network\
    \ [NA,NM2], with Link State ID equal to NA or'ed\n            together with the\
    \ bits that are not set in NM2 (i.e.,\n            network [NA,NM2]'s broadcast\
    \ address).\n    The above algorithm assumes that all masks are contiguous; this\n\
    \    ensures that when two networks have the same address, one mask is\n    more\
    \ specific than the other. The algorithm also assumes that no\n    network exists\
    \ having an address equal to another network's\n    broadcast address. Given these\
    \ two assumptions, the above algorithm\n    always produces unique Link State\
    \ IDs. The above algorithm can also\n    be reworded as follows:  When originating\
    \ an AS-external-LSA, try to\n    use the network number as the Link State ID.\
    \  If that produces a\n    conflict, examine the two networks in conflict. One\
    \ will be a subset\n    of the other. For the less specific network, use the network\
    \ number\n    as the Link State ID and for the more specific use the network's\n\
    \    broadcast address instead (i.e., flip all the \"host\" bits to 1).  If\n\
    \    the most specific network was originated first, this will cause you\n   \
    \ to originate two LSAs at once.\n    As an example of the algorithm, consider\
    \ its operation when the\n    following sequence of events occurs in a single\
    \ router (Router A).\n    (1) Router A wants to originate an AS-external-LSA for\n\
    \        [10.0.0.0,255.255.255.0]:\n        (a) A Link State ID of 10.0.0.0 is\
    \ used.\n    (2) Router A then wants to originate an AS-external-LSA for\n   \
    \     [10.0.0.0,255.255.0.0]:\n        (a) The LSA for [10.0.0,0,255.255.255.0]\
    \ is reoriginated using a\n            new Link State ID of 10.0.0.255.\n    \
    \    (b) A Link State ID of 10.0.0.0 is used for\n            [10.0.0.0,255.255.0.0].\n\
    \    (3) Router A then wants to originate an AS-external-LSA for\n        [10.0.0.0,255.0.0.0]:\n\
    \        (a) The LSA for [10.0.0.0,255.255.0.0] is reoriginated using a\n    \
    \        new Link State ID of 10.0.255.255.\n        (b) A Link State ID of 10.0.0.0\
    \ is used for\n            [10.0.0.0,255.0.0.0].\n        (c) The network [10.0.0.0,255.255.255.0]\
    \ keeps its Link State ID\n            of 10.0.0.255.\n"
- title: F. Multiple interfaces to the same network/subnet
  contents:
  - "F. Multiple interfaces to the same network/subnet\n    There are at least two\
    \ ways to support multiple physical interfaces\n    to the same IP subnet. Both\
    \ methods will interoperate with\n    implementations of RFC 1583 (and of course\
    \ this memo). The two\n    methods are sketched briefly below. An assumption has\
    \ been made that\n    each interface has been assigned a separate IP address (otherwise,\n\
    \    support for multiple interfaces is more of a link-level or ARP issue\n  \
    \  than an OSPF issue).\n    Method 1:\n        Run the entire OSPF functionality\
    \ over both interfaces, sending\n        and receiving hellos, flooding, supporting\
    \ separate interface\n        and neighbor FSMs for each interface, etc. When\
    \ doing this all\n        other routers on the subnet will treat the two interfaces\
    \ as\n        separate neighbors, since neighbors are identified (on broadcast\n\
    \        and NBMA networks) by their IP address.\n        Method 1 has the following\
    \ disadvantages:\n        (1) You increase the total number of neighbors and adjacencies.\n\
    \        (2) You lose the bidirectionality test on both interfaces, since\n  \
    \          bidirectionality is based on Router ID.\n        (3) You have to consider\
    \ both interfaces together during the\n            Designated Router election,\
    \ since if you declare both to be\n            DR simultaneously you can confuse\
    \ the tie-breaker (which is\n            Router ID).\n    Method 2:\n        Run\
    \ OSPF over only one interface (call it the primary\n        interface), but include\
    \ both the primary and secondary\n        interfaces in your Router-LSA.\n   \
    \     Method 2 has the following disadvantages:\n        (1) You lose the bidirectionality\
    \ test on the secondary\n            interface.\n        (2) When the primary\
    \ interface fails, you need to promote the\n            secondary interface to\
    \ primary status.\n"
- title: G. Differences from RFC 2178
  contents:
  - "G. Differences from RFC 2178\n    This section documents the differences between\
    \ this memo and RFC\n    2178.  All differences are backward-compatible. Implementations\
    \ of\n    this memo and of RFCs 2178, 1583, and 1247 will interoperate.\n    G.1\
    \ Flooding modifications\n        Three changes have been made to the flooding\
    \ procedure in\n        Section 13.\n        The first change is to step 4 in\
    \ Section 13. Now MaxAge LSAs are\n        acknowledged and then discarded only\
    \ when both a) there is no\n        database copy of the LSA and b) none of router's\
    \ neighbors are\n        in states Exchange or Loading. In all other cases, the\
    \ MaxAge\n        LSA is processed like any other LSA, installing the LSA in the\n\
    \        database and flooding it out the appropriate interfaces when the\n  \
    \      LSA is more recent than the database copy (Step 5 of Section\n        13).\
    \ This change also affects the contents of Table 19.\n        The second change\
    \ is to step 5a in Section 13. The MinLSArrival\n        check is meant only for\
    \ LSAs received during flooding, and\n        should not be performed on those\
    \ LSAs that the router itself\n        originates.\n        The third change is\
    \ to step 8 in Section 13. Confusion between\n        routers as to which LSA\
    \ instance is more recent can cause a\n        disastrous amount of flooding in\
    \ a link-state protocol (see\n        [Ref26]). OSPF guards against this problem\
    \ in two ways: a) the\n        LS age field is used like a TTL field in flooding,\
    \ to eventually\n        remove looping LSAs from the network (see Section 13.3),\
    \ and b)\n        routers refuse to accept LSA updates more frequently than once\n\
    \        every MinLSArrival seconds (see Section 13).  However, there is\n   \
    \     still one case in RFC 2178 where disagreements regarding which\n       \
    \ LSA is more recent can cause a lot of flooding traffic:\n        responding\
    \ to old LSAs by reflooding the database copy.  For\n        this reason, Step\
    \ 8 of Section 13 has been amended to only\n        respond with the database\
    \ copy when that copy has not been sent\n        in any Link State Update within\
    \ the last MinLSArrival seconds.\n    G.2 Changes to external path preferences\n\
    \        There is still the possibility of a routing loop in RFC 2178\n      \
    \  when both a) virtual links are in use and b) the same external\n        route\
    \ is being imported by multiple ASBRs, each of which is in a\n        separate\
    \ area. To fix this problem, Section 16.4.1 has been\n        revised. To choose\
    \ the correct ASBR/forwarding address, intra-\n        area paths through non-backbone\
    \ areas are always preferred.\n        However, intra-area paths through the backbone\
    \ area (Area 0) and\n        inter-area paths are now of equal preference, and\
    \ must be\n        compared solely based on cost.\n        The reasoning behind\
    \ this change is as follows. When virtual\n        links are in use, an intra-area\
    \ backbone path for one router can\n        turn into an inter-area path in a\
    \ router several hops closer to\n        the destination. Hence, intra-area backbone\
    \ paths and inter-area\n        paths must be of equal preference. We can safely\
    \ compare their\n        costs, preferring the path with the smallest cost, due\
    \ to the\n        calculations in Section 16.3.\n        Thanks to Michael Briggs\
    \ and Jeremy McCooey of the UNH\n        InterOperability Lab for pointing out\
    \ this problem.\n    G.3 Incomplete resolution of virtual next hops\n        One\
    \ of the functions of the calculation in Section 16.3 is to\n        determine\
    \ the actual next hop(s) for those destinations whose\n        next hop was calculated\
    \ as a virtual link in Sections 16.1 and\n        16.2.  After completion of the\
    \ calculation in Section 16.3, any\n        paths calculated in Sections 16.1\
    \ and 16.2 that still have\n        unresolved virtual next hops should be discarded.\n\
    \    G.4 Routing table lookup\n        The routing table lookup algorithm in Section\
    \ 11.1 has been\n        modified to reflect current practice. The \"best match\"\
    \ routing\n        table entry is now always selected to be the one providing\
    \ the\n        most specific (longest) match. Suppose for example a router is\n\
    \        forwarding packets to the destination 192.9.1.1. A routing table\n  \
    \      entry for 192.9.1/24 will always be a better match than the\n        routing\
    \ table entry for 192.9/16, regardless of the routing\n        table entries'\
    \ path-types. Note however that when multiple paths\n        are available for\
    \ a given routing table entry, the calculations\n        in Sections 16.1, 16.2,\
    \ and 16.4 always yield the paths having\n        the most preferential path-type.\
    \ (Intra-area paths are the most\n        preferred, followed in order by inter-area,\
    \ type 1 external and\n        type 2 external paths; see Section 11).\n"
- title: Security Considerations
  contents:
  - "Security Considerations\n    All OSPF protocol exchanges are authenticated. OSPF\
    \ supports\n    multiple types of authentication; the type of authentication in\
    \ use\n    can be configured on a per network segment basis. One of OSPF's\n \
    \   authentication types, namely the Cryptographic authentication\n    option,\
    \ is believed to be secure against passive attacks and provide\n    significant\
    \ protection against active attacks. When using the\n    Cryptographic authentication\
    \ option, each router appends a \"message\n    digest\" to its transmitted OSPF\
    \ packets. Receivers then use the\n    shared secret key and received digest to\
    \ verify that each received\n    OSPF packet is authentic.\n    The quality of\
    \ the security provided by the Cryptographic\n    authentication option depends\
    \ completely on the strength of the\n    message digest algorithm (MD5 is currently\
    \ the only message digest\n    algorithm specified), the strength of the key being\
    \ used, and the\n    correct implementation of the security mechanism in all\n\
    \    communicating OSPF implementations.  It also requires that all\n    parties\
    \ maintain the secrecy of the shared secret key.\n    None of the OSPF authentication\
    \ types provide confidentiality. Nor\n    do they protect against traffic analysis.\
    \ Key management is also not\n    addressed by this memo.\n    For more information,\
    \ see Sections 8.1, 8.2, and Appendix D.\n"
- title: Author's Address
  contents:
  - "Author's Address\n    John Moy\n    Ascend Communications, Inc.\n    1 Robbins\
    \ Road\n    Westford, MA 01886\n    Phone: 978-952-1367\n    Fax:   978-392-2075\n\
    \    EMail: jmoy@casc.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n    Copyright (C) The Internet Society (1998).  All\
    \ Rights Reserved.\n    This document and translations of it may be copied and\
    \ furnished to\n    others, and derivative works that comment on or otherwise\
    \ explain it\n    or assist in its implementation may be prepared, copied, published\n\
    \    and distributed, in whole or in part, without restriction of any\n    kind,\
    \ provided that the above copyright notice and this paragraph\n    are included\
    \ on all such copies and derivative works.  However, this\n    document itself\
    \ may not be modified in any way, such as by removing\n    the copyright notice\
    \ or references to the Internet Society or other\n    Internet organizations,\
    \ except as needed for the purpose of\n    developing Internet standards in which\
    \ case the procedures for\n    copyrights defined in the Internet Standards process\
    \ must be\n    followed, or as required to translate it into languages other than\n\
    \    English.\n    The limited permissions granted above are perpetual and will\
    \ not be\n    revoked by the Internet Society or its successors or assigns.\n\
    \    This document and the information contained herein is provided on an\n  \
    \  \"AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   \
    \ TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n    BUT\
    \ NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n    HEREIN WILL\
    \ NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n    MERCHANTABILITY OR\
    \ FITNESS FOR A PARTICULAR PURPOSE.\n"
