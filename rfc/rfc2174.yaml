- title: __initial_text__
  contents:
  - '          A MAPOS version 1 Extension - Switch-Switch Protocol

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: Authors' Note
  contents:
  - "Authors' Note\n   This memo documents a MAPOS (Multiple Access Protocol over\
    \ SONET/SDH)\n   version 1 extension, Switch Switch Protocol which provides dynamic\n\
    \   routing for unicast, broadcast, and multicast. This document is NOT\n   the\
    \ product of an IETF working group nor is it a standards track\n   document. \
    \ It has not necessarily benefited from the widespread and\n   in depth community\
    \ review that standards track documents receive.\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes a MAPOS version 1 extension, SSP (Switch\n\
    \   Switch Protocol).  MAPOS is a multiple access protocol for\n   transmission\
    \ of network-protocol packets, encapsulated in High-Level\n   Data Link Control\
    \ (HDLC) frames, over SONET/SDH. In MAPOS network, a\n   SONET switch provides\
    \ the multiple access capability to end nodes.\n   SSP is a protocol of Distance\
    \ Vector family and provides unicast and\n   broadcast/multicast routing for multiple\
    \ SONET switch environment.\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   This document describes an extension to MAPOS version 1,\
    \ Switch\n   Switch Protocol, for routing both unicast and broadcast/multicast\n\
    \   frames.  MAPOS[1], Multiple Access Protocol over SONET (Synchronous\n   Optical\
    \ Network) / SDH (Synchronous Digital Hierarchy) [2][3][4][5],\n   is a link layer\
    \ protocol for transmission of HDLC frames over\n   SONET/SDH. A SONET switch\
    \ provides the multiple access capability to\n   each node. SSP is a dynamic routing\
    \ protocol designed for an\n   environment where a MAPOS network segment spans\
    \ over multiple\n   switches.  It is a protocol of Distance Vector family. It\
    \ provides\n   both unicast and broadcast/multicast routing. First, this document\n\
    \   describes the outline of SSP. Next, it explains unicast and\n   broadcast/multicast\
    \ routing algorithms. Then, it describes the SSP\n   protocol in detail.\n"
- title: 2. Constraints in Designing SSP
  contents:
  - "2. Constraints in Designing SSP\n   SSP is a unified routing protocol supporting\
    \ both unicast and\n   broadcast/multicast. The former and the latter are based\
    \ on the\n   Distance Vector [6][7] and the spanning tree[8] algorithm,\n   respectively.\
    \ In MAPOS version 1, a small number of switches is\n   assumed in a segment.\
    \  Thus, unlike DVMRP(Distance Vector Multicast\n   Routing Protocol)[8], TRPB(Truncated\
    \ Reverse Path Broadcasting) is\n   not supported for simplicity. This means that\
    \ multicast frames are\n   treated just the same as broadcast frames and are delivered\
    \ to every\n   node.\n   In MAPOS version 1, there are two constraints regarding\
    \ design of the\n   broadcast/multicast routing algorithm;\n     (1) there is\
    \ no source address field in MAPOS HDLC frames\n     (2) there is no TTL(Time\
    \ To Live) field in MAPOS HDLC frames to\n     prevent forwarding loop.\n   To\
    \ cope with the first issue, VRPB(Virtual Reverse Path Broadcast)\n   algorithm\
    \ is introduced. In VRPB, all broadcast and multicast frames\n   are assumed to\
    \ be generated by a node under a specific switch called\n   VSS(Virtual Source\
    \ Switch). VSS is the switch which has the smallest\n   switch number in a MAPOS\
    \ network. Each switch determine its place in\n   the spanning tree rooted from\
    \ VSS independently. Whenever a switch\n   receives a broadcast/multicast frame,\
    \ it forwards the frame to all\n   upstream and downstream switches except for\
    \ the one which has sent\n   the frame to the local switch.\n   To cope with the\
    \ second issue, the forward delay timer is introduced.\n   Even if a switch finds\
    \ a new VSS, it suspends forwarding for a time\n   period. This timer ensures\
    \ that all the switches have a consistent\n   routing information and that they\
    \ are synchronized after a topology\n   change.\n"
- title: 3. Unicast Routing in SSP
  contents:
  - "3. Unicast Routing in SSP\n   This section describes the address structure of\
    \ MAPOS version 1 and\n   the SSP unicast routing based on it.\n"
- title: 3.1 Address Structure of MAPOS version 1
  contents:
  - "3.1 Address Structure of MAPOS version 1\n   In a multiple switch environment,\
    \ a node address consists of the\n   switch number and the port number to which\
    \ the node is connected. As\n   shown in Figure 1, the address length is 8 bits\
    \ and the LSB is always\n   1, which indicates the end of the address field. A\
    \ MSB of 0 indicates\n   a unicast address. The switch and the port number fields\
    \ are\n   variable-length. In this document, a unicast address is represented\n\
    \   as \"0 <switch-number> <port number>\".  Note that a port number\n   includes\
    \ EA bit.\n   MSB of 1 indicates multicast or broadcast. In the case of broadcast,\n\
    \   the address field contains all 1s (0xff in hex). In the case of\n   multicast,\
    \ the remaining bits indicate a group address.  The switch\n   number field is\
    \ variable-length. A multicast address is represented\n   as \"1 <group address>\"\
    .\n           Switch Number(variable length)\n               |\n             \
    \  |      +--- Port Number\n               |      |\n               V      V\n\
    \             |<->|<------->|\n           +-------------+-+\n           | | |\
    \ | | | | | |\n           | |           |1|\n           +-+-----------+-+\n  \
    \          ^             ^\n            |             |\n            |       \
    \      +------- EA bit (always 1)\n            |\n            1 : broadcast, multicast\n\
    \            0 : unicast\n                        Figure 1 Address Format\n  \
    \ Figure 2 shows an example of a SONET LAN that consists of three\n   switches.\
    \  In this configuration, two bits of a node address are used\n   to indicate\
    \ the switch number. Node N1 is connected to port\n   0x03(000011 in binary) of\
    \ the switch S2 numbered 0x2.  Thus, the node\n   address is 01000011 in binary.\
    \ Node N4 has an address 01101001 in\n   binary since the connected switch number\
    \ is 0x3 and the port number\n   is 0x09.\n                        01000011\n\
    \                        +------+\n                        | node |\n        \
    \                |  N1  |\n                        +------+\n           01000101\
    \         |0x03              |0x03       00101001\n           +------+     +---+----+\
    \         +---+----+      +------+\n           | node +-----+ SONET  +---------+\
    \ SONET  +------+ node |\n           |  N2  | 0x05| Switch |0x09 0x05| Switch\
    \ |0x09  |  N3  |\n           +------+     |   S2   |         |   S1   |     \
    \ +------+\n                        |  (0x2) |         |  (0x1) |\n          \
    \              +---+----+         +---+----+\n                            |0x07\
    \              |0x07\n                            |                  |\n     \
    \                       |                  |0x03      01101001\n             \
    \               |              +---+----+     +------+\n                     \
    \       +--------------+ SONET  +-----+ node |\n                             \
    \          0x05| Switch |0x09 |  N4  |\n                                     \
    \      |   S3   |     +------+\n                                           | \
    \ (0x3) |\n                                           +---+----+\n           \
    \                                    |0x07\n               Figure 2 Multiple SONET\
    \ Switch Environment\n"
- title: 3.2 Forwarding Unicast Frames
  contents:
  - "3.2 Forwarding Unicast Frames\n   Unicast frames are forwarded along the shortest\
    \ path. For example, a\n   frame from node N4 destined to N1 is forwarded by switch\
    \ S3 and S2.\n   These SONET switches forwards an HDLC frame based on the destination\n\
    \   switch number contained in the destination address.\n   Each switch keeps\
    \ a routing table with entries for possible\n   destination switches. An entry\
    \ contains the subnet mask, the next hop\n   to the adjacent switch along the\
    \ shortest path to the destination,\n   the metric measuring the total distance\
    \ to the destination, and other\n   parameters associated with the entry such\
    \ as timers. For example, the\n   routing table in switch S1 will be as shown\
    \ in Table 1. The metric\n   value 1 means that the destination switch is an adjacent\
    \ switch. The\n   value 16 means that it is unreachable. Although the values between\
    \ 17\n   and 31 also mean unreachable, they are special values utilized for\n\
    \   split horizon with poisoned reverse [8].\n     +-------------------------+----------+--------+------------+\n\
    \     | destination |   subnet  | next hop | metric |   other    |\n     |   switch\
    \    |   mask    |   port   |        | parameters |\n     +-------------+-----------+----------+--------+------------+\n\
    \     |  01000000   | 11100000  | 00000101 |    1   |            |\n     +-------------+-----------+----------+--------+------------+\n\
    \     |  01100000   | 11100000  | 00000111 |    1   |            |\n     +-------------+-----------+----------+--------+------------+\n\
    \                 Table 1  An Example of a Routing Table\n   When a switch receives\
    \ a unicast frame, it extracts the switch number\n   from the destination address.\
    \ If it equals to the local switch\n   number, the frame is sent to the local\
    \ node through the port\n   specified in the destination address.  Otherwise,\
    \ the switch looks up\n   its routing table for a matching destination switch\
    \ number by masking\n   the destination address with the corresponding subnet\
    \ mask. If a\n   matching entry is found, the frame is sent to an adjacent switch\n\
    \   through the next hop port in the entry. Otherwise, it is silently\n   discarded\
    \ or sent to the control processor for its error processing.\n"
- title: 3.4 Protocol Overview
  contents:
  - "3.4 Protocol Overview\n   This subsection describes an overview of the unicast\
    \ routing protocol\n   and its algorithm.\n"
- title: 3.4.1 Route Exchange
  contents:
  - "3.4.1 Route Exchange\n   SSP is a distance vector protocol to establish and maintain\
    \ the\n   routing table. In SSP, each switch sends a routing update message to\n\
    \   every adjacent switches every FULL_UPDATE_TIME (10 seconds by\n   default).\
    \ The update message is a copy of the routing table, that is,\n   routes.\n  \
    \ When a switch receives an update message from an adjacent switch\n   through\
    \ a port, it adds the cost associated with the port, usually 1,\n   to every metric\
    \ value in the message. The result is a set of new\n   metrics from the receiving\
    \ switch to the destination switches. Next,\n   it compares the new metrics with\
    \ those of the corresponding entries\n   in the existing routing table. A smaller\
    \ metric means a better route.\n   Thus, if the new metric is smaller than the\
    \ existing one, the entry\n   is updated with the new metric and next hop. The\
    \ next hop is the port\n   from which the update message was received. Otherwise,\
    \ the entry is\n   left unchanged. If the existing next hop is the same as the\
    \ new one,\n   the metric is updated regardless of the metric value.  If no\n\
    \   corresponding route is found, a new route entry is created.\n"
- title: 3.4.2 Route Expiration
  contents:
  - "3.4.2 Route Expiration\n   Assume a route to R is advertised by a neighboring\
    \ switch S. If no\n   update message has been received from switch S for the period\n\
    \   FULL_UPDATE_TIME * 3 (30 seconds by default) or the route is\n   advertised\
    \ with metric 16 by switch S, the route to R is marked as\n   unreachable by setting\
    \ its metric to 16. In other words, the route to\n   R is kept advertised even\
    \ if the route is not refreshed up-to 30\n   seconds.\n   To process this, each\
    \ routing table entry has an EXPIRATION_TIMER (30\n   seconds by default, that\
    \ is, FULL_UPDATE_TIME *3). If another switch\n   advertises a route to R, it\
    \ replaces the unreachable route. Even if a\n   route is marked unreachable, the\
    \ entry is kept in the routing table\n   for the period of FULL_UPDATE_TIME *\
    \ 3.  This enables the switch to\n   notify its neighbors of the unreachable route\
    \ by sending update\n   messages with metric 16. To process this, each routing\
    \ table entry\n   has a garbage collection timer GC_TIMER (30 seconds by default).\
    \ The\n   entry is deleted on expiration of the timer. Figure 3 shows this\n \
    \  transition.\n         The Last Update           Expiration         Garbage\
    \ Collection\n               |                       |                       |\n\
    \    Routing    V   T       T       T   V   T       T       T   V\n    Table \
    \     +-------+-------+-------+-------+-------+-------X\n    Entry           \
    \  metric < 16      |       metric = 16     |\n               ----------------------->|---------------------->|\n\
    \                   EXPIRATION_TIMER            GC_TIMER\n                   \
    \                                    Stop Advertising\n                      \
    \                                         |\n    Advertised                  \
    \                               V\n    Metric     --   metric <16   ------+--\
    \  metric = 16 -------X\n                                                    T:\
    \ FULL_UPDATE_TIME\n                       Figure 3. Route Expiration\n"
- title: 3.4.3 Slow Convergence Prevention
  contents:
  - "3.4.3 Slow Convergence Prevention\n   To prevent slow convergence of routing\
    \ information, two techniques,\n   split horizon with poisoned reverse, and triggered\
    \ update are\n   employed.\n           Sn <------------- S3 <- S2 <- S1\n    \
    \               (i) Before Outage\n                                ->\n      \
    \     Sn <--    X    -- S3 <- S2 <- S1\n                   (ii) After Outage\n\
    \                Figure 4 An Example of Slow Convergence\n   Figure 4 shows an\
    \ example of slow convergence[6]. In (i), three\n   switches, S1, S2, and S3,\
    \ are assumed to have a route to Sn. In (ii),\n   the connection to Sn has disappeared\
    \ because of an outage, but S2\n   continue to advertise the route since there\
    \ is no means for S2 to\n   detect the outage immediately and it has the route\
    \ to Sn in its\n   routing table. Thus, S3 misunderstand that S2 has the best\
    \ route to\n   Sn and S2 is the next hop. This results in a transitive loop between\n\
    \   S2 and S3. S2 and S3 increments the metric of the route to Sn every\n   time\
    \ they advertise the route and the loop continues until the metric\n   reaches\
    \ 16. To suppress the slow convergence problem, split horizon\n   with poisoned\
    \ reverse is used.\n   In split horizon with poisoned reverse, a route is advertised\
    \ as\n   unreachable to the next hop. The metric is the received metric value\n\
    \   plus 16. For example, in Figure 4, S2 advertises the route to Sn with\n  \
    \ the metric unreachable only to S3. Thus, S3 never considers that S2\n   is the\
    \ next hop to Sn. This ensures fast convergence on disappearance\n   of a route.\n\
    \   Another technique, triggered update, forces a switch to send an\n   immediate\
    \ update instead of waiting for the next periodic update when\n   a switch detects\
    \ a local port failure, or when it receives a message\n   that a route has become\
    \ unreachable, or that its metric has\n   increased. This makes the convergence\
    \ faster.\n"
- title: 4. Broadcast/multicast Routing in SSP
  contents:
  - "4. Broadcast/multicast Routing in SSP\n   This section explains VRPB algorithm\
    \ and the outline of\n   broadcast/multicast routing protocol.\n"
- title: 4.1 Virtual Reverse Path Broadcast/Multicast Algorithm
  contents:
  - "4.1 Virtual Reverse Path Broadcast/Multicast Algorithm\n   SSP provides broadcast/multicast\
    \ routing based on a spanning tree\n   algorithm.  As described in Section 2,\
    \ the routing is based on the\n   VRPB(Virtual Reverse Path Broadcast) algorithm.\
    \  In VRPB, each switch\n   assumes that all broadcast and multicast frames are\
    \ generated by a\n   specific switch, VSS(Virtual Source Switch). Thus, unlike\
    \ DVMRP, a\n   MAPOS network has only one spanning tree at any given time.\n \
    \  The frames are forwarded along the reverse path by computing the\n   shortest\
    \ path from the VSS to all possible recipients.  VSS is the\n   switch which has\
    \ the lowest switch number in the network.  Because\n   the routing table contains\
    \ all the unicast destination addresses\n   including the switch numbers, each\
    \ switch can identify the VSS\n   independently by searching for the smallest\
    \ switch number in its\n   unicast routing table.\n   In Figure 2, switch S1 is\
    \ the VSS.  Each switch determines its place\n   in the spanning tree, relative\
    \ to the VSS, and which of its ports are\n   on the shortest path tree.  Thus,\
    \ the spanning tree is as shown in\n   Figure 5. Except for the VSS, each switch\
    \ has one upstream port and\n   zero or more downstream ports. VSS have no upstream\
    \ port, since it is\n   the root of the spanning tree. In Figure 2.  switch S2's\
    \ upstream\n   port is port 0x09 and it has no downstream port.\n            \
    \       S1 (VSS)\n                  /  \\\n                 /    \\\n        \
    \        /      \\\n               S2      S3\n                      Figure 5\
    \  VRPB Spanning Tree\n   When a switch receives a broadcast/multicast frame,\
    \ it forwards the\n   frame to all of the upstream switch, the downstream switches,\
    \ and the\n   directly connected nodes. However, it does not forward to the switch\n\
    \   which sent the frame to it. For that purpose, a bit mapped\n   broadcast/multicast\
    \ routing table may be employed.  The\n   broadcast/multicast routing process\
    \ marks all the bits corresponding\n   to the ports to which frames should be\
    \ forwarded. The forwarding\n   process refers to it and broadcasts a frame to\
    \ all the ports with its\n   corresponding bit marked.\n"
- title: 4.2 Forwarding Broadcast/multicast Frames
  contents:
  - "4.2 Forwarding Broadcast/multicast Frames\n   When a switch forwards a broadcast/multicast\
    \ frame, (1) it first\n   decides the VSS by referring to its unicast routing\
    \ table. Then, (2)\n   it refers to its broadcast/multicast routing table corresponding\
    \ to\n   the VSS. A cache may be used to reduce the search overhead. (3) Based\n\
    \   on the routing table, the switch forwards the frame.\n   Figure 6 shows an\
    \ example of S2's broadcast/multicast routing table\n   for the VSS S1. It is\
    \ a bit map table and each bit corresponds to a\n   port. The value 1 indicates\
    \ that frames should be forwarded to a node\n   or a switch through the port.\
    \  If no bit is marked, the frame is\n   silently discarded. In the example of\
    \ Figure 6, port 0x09 is the\n   upstream port to its VSS, that is, S1. Other\
    \ ports, ports 0x05 and\n   0x03 are path to N2 and N1 nodes, respectively.\n\
    \             0F  0D  0B  09  07  05  03  01   ---   port number\n           +---+---+---+---+---+---+---+---+\n\
    \           | 0 | 0 | 0 | 1 | 0 | 1 | 1 | 0 |  ---   1: forward\n           +---+---+---+---+---+---+---+---+\
    \        0: inhibit\n            Figure 6 Broadcast/Multicast Routing Table of\
    \ S2\n"
- title: 4.3 Forwarding Path Examples
  contents:
  - "4.3 Forwarding Path Examples\n   Assume that a broadcast frame is generated by\
    \ N2 in Figure 2. The\n   frame is received by S2.\n   Then, S2 passes it to all\
    \ the connected nodes except for the source\n   N2. That is, only to N1. At the\
    \ same time, it also forwards the frame\n   to all its upstream and downstream\
    \ switches. Since S2 has no\n   downstream switch, S2 forwards the frame to S1\
    \ though its upstream\n   port 0x09.\n   S1 is the VSS and it passes the frame\
    \ to all the local nodes, that\n   is, only to N3. Since it has no upstream switch\
    \ and S2 is the switch\n   which sent the frame to S1, the frame is eventually\
    \ forwarded only to\n   a downstream switch S3.\n   S3 passes the frame to its\
    \ local node, N4. Since S3 has only an\n   upstream and the frame was received\
    \ through that port, S3 does not\n   forward the frame to any switch.\n   The\
    \ resulting path is shown in Figure 7. Although this is not the\n   optimal path,\
    \ VRPB ,at least, ensures that broadcast/multicast frames\n   are delivered all\
    \ the nodes without a loop. Figures 8 and 9 show the\n   forwarding path for frames\
    \ generated by a node under S3 and S4,\n   respectively.\n                   \
    \          +-> N3\n                             |\n             N2 -> S2 +-> S1\
    \ +-> S3 -> N4\n                      |\n                      +-> N1\n      \
    \             Figure 7  Forwarding Path from N2\n                            \
    \ +-> N1\n                             |\n             N3 -> S1 +-> S2 +-> N2\n\
    \                      |\n                      +-> S3 --> N4\n              \
    \     Figure 8  Forwarding Path from N3\n                             +-> N3\n\
    \                             |\n             N4 -> S3 +-> S1 +-> S2 +-> N1\n\
    \                                    |\n                                    +->\
    \ N2\n                   Figure 9  Forwarding Path from N4\n"
- title: 4.4 Suppressing Routing Loop
  contents:
  - "4.4 Suppressing Routing Loop\n   To suppress transitive routing loop, forward\
    \ delay is employed. A\n   switch suspends broadcast/multicast forwarding for\
    \ a period after a\n   new VSS is found in the routing table. This prevents transitive\n\
    \   routing loop by waiting for all the switches to have the same routing\n  \
    \ information and become synchronized. In addition to controlling\n   sending\
    \ of frames by forward delay, another mechanism is employed to\n   prevent transitive\
    \ routing loop by controlling reception of frames.\n   That is, broadcast/multicast\
    \ frames received through ports other than\n   the upstream and downstream ports\
    \ are discarded.\n"
- title: 4.5 Upstream Switch Discovery
  contents:
  - "4.5 Upstream Switch Discovery\n   The upstream port is determined by the shortest\
    \ reverse path to the\n   VSS.  It is identified by referring to the next hop\
    \ port of the route\n   to VSS in the local unicast routing table. When a new\
    \ next hop to the\n   VSS is discovered, the bit corresponding to the old next\
    \ hop port is\n   cleared, and the bit corresponding to the new one is marked\
    \ as the\n   upstream port in the broadcast/multicast routing table.\n"
- title: 4.6 Downstream Switch Discovery
  contents:
  - "4.6 Downstream Switch Discovery\n   To determine the downstream ports, split\
    \ horizon with poisoned\n   reverse is employed. When a switch receives a route\
    \ with a metric\n   poisoned by split horizon processing through a port as described\
    \ in\n   Section 3.4.3, the port is considered to be a downstream port. In\n \
    \  Figure 2, S1 is the VSS and the route information is sent back from\n   S2\
    \ to S1 with metric unreachable based on the split horizon with\n   poisoned reverse.\
    \ Thus, S1 knows that S2 is one of its downstreams.\n"
- title: 4.7 Downstream Port Expiration
  contents:
  - "4.7 Downstream Port Expiration\n   When a poison reversed packet is newly received\
    \ from a port, the\n   local switch knows that a new downstream switch has appeared.\
    \ Then,\n   it marks the bit corresponding to the port and starts\n   FORWARD_DELAY_TIMER\
    \ (30second by default, that is, FULL_UPDATE_TIME *\n   3) for the port. The forwarding\
    \ of broadcast/multicast frames to the\n   port is prohibited until the timer\
    \ expires.  Every time the local\n   switch receives a poison reversed packet\
    \ through a port, it\n   initializes PORT_EXPIRATION_TIMER(30 seconds by default,\
    \ that is,\n   FULL_UPDATE_TIME *3) corresponding to the port. A continuous loss\
    \ of\n   poison reversed packets or a failure of downstream port results in\n\
    \   expiration of PORT_EXPIRATION_TIMER, and the corresponding bit is\n   cleared.\n\
    \               First Update               Last Update\n                   | \
    \                          |\n                   V T   T   T   T   T   T   T V\n\
    \                   +---+---+---+---+---+---+---+---+---+---+---+---+---\n   A\
    \ bit in\n   the routing      0   0   0   1   1   1   1   1   1   1   0   0  \
    \ 0\n   table                       ^                           ^\n          \
    \          <--------->|                <--------->|\n                        ^\
    \   route up                 ^ route down\n                        |         \
    \                   |\n                  FORWARD_DELAY               PORT_EXPIRATION\n\
    \                                           T: FULL_UPDATE_TIME\n            \
    \           Figure 10. Port Expiration\n   When a downstream switch discovers\
    \ another best path to the VSS or a\n   new VSS, it stops split horizon with poison\
    \ reverse and sends\n   ordinary update messages. Whenever the local switch receives\
    \ an\n   ordinary update message from its downstream switch, it SHOULD\n   immediately\
    \ clear the corresponding bit in the routing table and stop\n   forwarding of\
    \ broadcast/multicast frames.\n"
- title: 4.8 Node Discovery
  contents:
  - "4.8 Node Discovery\n   When a NSP[9] packet, requesting a node address from a\
    \ port, is\n   received, the local switch considers that a new node is connected,\n\
    \   and marks the corresponding bit in the broadcast/multicast routing\n   table.\
    \ When the local switch detects that the port went down as\n   described in [9],\
    \ it clear the corresponding bit.\n"
- title: 4.9 Invalidating The Broadcast/multicast Routing Table
  contents:
  - "4.9 Invalidating The Broadcast/multicast Routing Table\n   When a new VSS is\
    \ discovered or when the VSS becomes unreachable, the\n   entire broadcast/multicast\
    \ routing table is invalidated. That is, a\n   change of upstream port affects\
    \ the entire broadcast/multicast\n   routing. However, a change of a downstream\
    \ port does not affect\n   forwarding to other downstream ports, its upstream\
    \ port, and nodes.\n"
- title: 5. Detailed Protocol Operation
  contents:
  - "5. Detailed Protocol Operation\n   This section explains SSP packet format and\
    \ protocol processing in\n   detail.\n"
- title: 5.1 Packet Format
  contents:
  - "5.1 Packet Format\n   This subsection describes the packet encapsulation in HDLC\
    \ frame and\n   the packet format.\n"
- title: 5.1.1 Packet Format and Its Encapsulation
  contents:
  - "5.1.1 Packet Format and Its Encapsulation\n   SSP packet format is designed based\
    \ on RIP[6] and its successor, RIP2\n   [7]. Figure 11 shows the packet format.\
    \ A SSP packet is encapsulated\n   in the information field of a MAPOS HDLC frame.\
    \ The HDLC protocol\n   field of SSP is 0xFE05 in hex as defined by the \"MAPOS\
    \ Version 1\n   Assigned Numbers\" [10]. The packet is sent encapsulated in a\
    \ unicast\n   packet with the destination address 0000 0001, which indicates the\n\
    \   control processor of an adjacent switch.\n"
- title: (MSB)                                                       (LSB)
  contents:
  - '(MSB)                                                       (LSB)

    '
- title: 7 6 5 4 3 2 1 0 7 6 5 4 3 2 1 0 7 6 5 4 3 2 1 0 7 6 5 4 3 2 1 0
  contents:
  - '7 6 5 4 3 2 1 0 7 6 5 4 3 2 1 0 7 6 5 4 3 2 1 0 7 6 5 4 3 2 1 0

    '
- title: +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ -----
  contents:
  - '+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+ -----

    '
- title: '|    Command    |   Version     |           unused              |SSP header'
  contents:
  - '|    Command    |   Version     |           unused              |SSP header

    '
- title: +---------------+---------------+-------------------------------+ -----
  contents:
  - '+---------------+---------------+-------------------------------+ -----

    '
- title: '| Address Family Identifier     |            All 0              |'
  contents:
  - '| Address Family Identifier     |            All 0              |

    '
- title: +-------------------------------+-------------------------------+
  contents:
  - '+-------------------------------+-------------------------------+

    '
- title: '|                         HDLC Address                          | an SSP'
  contents:
  - '|                         HDLC Address                          | an SSP

    '
- title: +---------------------------------------------------------------+ route
  contents:
  - '+---------------------------------------------------------------+ route

    '
- title: '|                         Subnet Mask                           | entry'
  contents:
  - '|                         Subnet Mask                           | entry

    '
- title: +---------------------------------------------------------------+
  contents:
  - '+---------------------------------------------------------------+

    '
- title: '|                         All 0                                 |'
  contents:
  - '|                         All 0                                 |

    '
- title: +---------------------------------------------------------------+
  contents:
  - '+---------------------------------------------------------------+

    '
- title: '|                         Metric                                |'
  contents:
  - '|                         Metric                                |

    '
- title: +---------------+---------------+-------------------------------+ ----
  contents:
  - '+---------------+---------------+-------------------------------+ ----

    '
- title: '| Address Family Identifier     |            All 0              |'
  contents:
  - "| Address Family Identifier     |            All 0              |\n         \
    \             Figure 11 SSP packet format\n   The maximum packet size is 512 octet.\
    \ The first four octets is the\n   SSP header. The remainder of the message is\
    \ composed of 1 - 25 route\n   entries. Each entry is 20 octets long.\n"
- title: 5.1.2 SSP Header
  contents:
  - "5.1.2 SSP Header\n   SSP header consists of a command field and a version field.\
    \ The\n   command field is one octet long and holds one of the following\n   values;\n\
    \     1 - request     A request to send all or part of SSP routing table.\n  \
    \   2 - response    A message containing all, or a part of the sender's\n    \
    \                 SSP routing table.  This message may be sent in\n          \
    \           response to a request, or it may be an update\n                  \
    \   message generated by the sender.\n   The Version field indicates the version\
    \ of SSP being used. The\n   current version number is 1.\n"
- title: 5.1.3 SSP Route Entries
  contents:
  - "5.1.3 SSP Route Entries\n   Each entry has an address family identifier. It indicates\
    \ an\n   attribute of the entry. SSP routing protocol uses 2 as its identifier\n\
    \   by default. The identifier 0 indicates unspecified. This value is\n   used\
    \ when a switch requests other switches to send the entire SSP\n   routing table.\
    \ A recipient of the message SHOULD ignore all entries\n   with unknown value.\n\
    \   The HDLC address is a destination address. It may be a switch address\n  \
    \ or a node address. The subsequent subnet mask is applied to the HDLC\n   address\
    \ to yield the switch number portion. The field is 4 octet long\n   and the address\
    \ is placed in the least significant position.\n   Metric indicates the distance\
    \ to the destination node. That is, how\n   many switches a message must go through\
    \ en route to the destination\n   node. The metric field must contain a value\
    \ between 1 and 31. The\n   metric of 16 indicates that the destination is not\
    \ reachable and is\n   ignored by recipients. The values between 17 and 31 are\
    \ utilized for\n   poisoned reverse with split horizon and also means unreachable.\
    \ The\n   metric 0 indicates the local switch itself.\n"
- title: 5.2 Routing Table
  contents:
  - "5.2 Routing Table\n   Every switch has an SSP routing table. The table is a collection\
    \ of\n   route entries - one for every destination. An entry consists of the\n\
    \   following information;\n    (1) destination : A unicast destination address.\n\
    \    (2) subnet mask : A mask to extract the switch address by applying\n    bitwise\
    \ AND with the destination address\n    (3) next hop port : The local port number\
    \ connected to the adjacent\n    switch along the path to the destination.\n \
    \   (4) metric : Distance to the destination node. The metric of an\n    adjacent\
    \ switch is 1 and that of local switch is 0.\n    (5) timers for unicast routing\
    \ : Timers associated with unicast\n    routing such as EXPIRATION_TIMER and GC_TIMER.\n\
    \    (6) flags : Various flags associated with the route such as route\n    change\
    \ flag to indicate that the route has changed recently or it\n    has timed out.\n\
    \    (7) bit map routing table for broadcast/multicast : Each bit\n    corresponding\
    \ to the port to an upstream or a downstream switch of\n    the spanning tree\
    \ is marked in addition to the ports to end nodes.\n    Broadcast/multicast frames\
    \ are forwarded only through those ports\n    with their corresponding bit set.\
    \ Since only one spanning tree\n    exists at a time in a network, each route\
    \ entry does not necessarily\n    have to have this field.\n    (8) timers for\
    \ broadcast/multicast routing : Timers associated with\n    broadcast/multicast\
    \ routing such as FORWARD_DELAY_TIMER and\n    PORT_EXPIRATION_TIMER. These timers\
    \ are prepared for each bit of\n    broadcast/multicast routing table.\n"
- title: 5.3 Sending Routing Messages
  contents:
  - '5.3 Sending Routing Messages

    '
- title: 5.3.1 Packet Construction
  contents:
  - "5.3.1 Packet Construction\n   Because of the split horizon with poisoned reverse,\
    \ a routing message\n   differs depending on the adjacent switch to which the\
    \ message is\n   being sent. The upstream switch of a route, that is next hop,\n\
    \   receives a message which contains the corresponding route with a\n   metric\
    \ between 17 and 31. Switches that are not the upstream switch\n   of any route\
    \ receive the same message. Here, we assume that a packet\n   for a routing message\
    \ is constructed for an adjacent switch which is\n   connected through the local\
    \ port N.\n   First, set the version field to 1, the current SSP version. Then,\
    \ set\n   the command to \"response\". Set other fields which are supposed to\
    \ be\n   zero to zero.  Next, start filling in entries.\n   To fill in the entries,\
    \ perform the following for each route. The\n   destination HDLC address, netmask,\
    \ and its metric are put into the\n   entry in the packet.  Routes must be included\
    \ in the packet even if\n   their metrics are unreachable(16).  If the next hop\
    \ port is N, 16 is\n   added to the metric for split horizon with poisoned reverse.\n\
    \   Recall that the maximum packet size is 512 bytes.  When there is no\n   more\
    \ space in a packet, send the current message and start a new one.\n   If a triggered\
    \ update is being generated, only entries whose route\n   change flags are set\
    \ need be included.\n"
- title: 5.3.2 Sending update
  contents:
  - "5.3.2 Sending update\n   Sending update may be triggered in any of the following\
    \ ways;\n    (1) Initial Update\n    When a switch first comes up, it SHOULD send\
    \ to all adjacent\n    switches a request asking for their entire routing tables.\
    \ The\n    destination address is 00000001. When a port comes on-line, the\n \
    \   request packet is sent to the port. The packet, requesting the\n    entire\
    \ routing table, MUST have at least an entry with the address\n    family identifier\
    \ 0 meaning unspecified.\n    When a switch receives a request packet, it first\
    \ checks the version\n    number of the SSP header. If it is not 1, the packet\
    \ is silently\n    discarded. Otherwise, the address family identifier is examined.\
    \  If\n    the value is 0, the entire SSP routing table is returned in one or\n\
    \    more response packets destined to 00000001. Otherwise, the request\n    is\
    \ silently discarded.  Although the original RIP specification\n    defines the\
    \ partial routing table request, SSP routing protocol\n    omits it for the sake\
    \ of simplicity.\n    (2) Periodic Update\n    Every switch participating in the\
    \ routing process sends an update\n    message (response message) to all its neighbor\
    \ switches once every\n    FULL_UPDATE_TIME (10 seconds). For the periodic update,\
    \ a response\n    packet(s) is used. The destination address is always 00000001.\
    \ An\n    update message contains the entire SSP routing table. The maximum\n\
    \    packet size is 512byte. Thus, an update message may require several\n   \
    \ packets to be packed.\n    (3) Triggered Update\n    When a route in the unicast\
    \ routing table is changed or a local port\n    goes down, the switch advertises\
    \ a triggered update packet without\n    waiting for the full update time. The\
    \ difference between triggered\n    update and the other update is that triggered\
    \ updates do not have to\n    include the entire routing table. Only changed entries\
    \ should be\n    included. Triggered update may be suppressed if a regular periodic\n\
    \    update is due.\n    Note that when a route is advertised as unreachable (metric\
    \ 16) by\n    an adjacent switch, update process is triggered as well as\n   \
    \ expiration of the route in the local switch.\n    (4) On Termination\n    When\
    \ a switch goes down, it is desirable to advertise all the routes\n    with metric\
    \ 16, that is, unreachable.\n"
- title: 5.4 Receiving Routing Messages
  contents:
  - "5.4 Receiving Routing Messages\n   When a switch receives an update, it first\
    \ checks the version number.\n   If it is not 1, the update packet is silently\
    \ discarded. Otherwise,\n   it processes the entries in it one by one.\n   For\
    \ each entry, the address family identifier is checked. If it is\n   not 2, the\
    \ entry is ignored. Otherwise, the metric is checked. The\n   value should be\
    \ between 0 and 31.  An entry with illegal metric is\n   ignored. Next, the HDLC\
    \ address and the subnet mask is checked. An\n   entry with an invalid address\
    \ such as broadcast is ignored. If the\n   entry passed all these validation checks,\
    \ it is processed according\n   to the following steps;\n   Step 1 - Process Poisoned\
    \ Reverse\n   If the metric value is between 0 and 16, it is an unicast\n   information.\
    \ Go ahead to Step 2.\n   If the metric value is between 17 and 31, it indicates\
    \ poisoned\n   reverse, that the local switch has been chosen as the next hop\
    \ for\n   the route. However, if the corresponding entry is not included in the\n\
    \   current routing table or the message is from a port connected to its\n   upstream\
    \ switch, the message is illegal -- ignore it and return to\n   Step 1 to process\
    \ the next entry. Otherwise,\n      (1) Initialize the PORT_EXPIRATION_TIMER corresponding\
    \ to the\n          downstream port.\n      (2) Operate the FORWARD_DELAY_TIMER\
    \ as follows;\n          (2-1) If the broadcast/multicast forwarding was already\n\
    \                enabled, go to (3).\n          (2-2) If the FORWARD_DELAY_TIMER\
    \ corresponding to the\n                downstream port was already started, increment\
    \ the\n                timer. If the timer expires, mark the bit in the\n    \
    \            broadcast/multicast routing table corresponding to the\n        \
    \        port and stop the timer.\n          (2-2) Otherwise, start the FORWARD_DELAY_TIMER.\n\
    \      (3) Return to Step 1 to process the next entry.\n    Step 2 - Process Unicast\
    \ Routing Information\n    First, add the cost associated with the link, usually\
    \ 1, to the\n    metric. If the result is greater than 16, 16 is used. Then, look\
    \ up\n    the unicast routing table for the corresponding entry. There are two\n\
    \    cases.\n     Case 1  no corresponding entry is found\n       If the new metric\
    \ is 16, return to step 1 to process the next\n       entry.  Otherwise,\n   \
    \    (1) Create a new route entry in the routing table\n       (2) Initialize\
    \ EXPIRATION_TIMER and GC_TIMER\n       (3) The port corresponding to the new\
    \ route is the next_hop port\n           for the route. Thus, mark the bit in\
    \ the broadcast/multicast\n           routing table corresponding to the new next_hop\
    \ port and\n           start FORWARD_DELAY_TIMER. If this new route is for the\n\
    \           switch with the minimum switch number, select it as the VSS\n    \
    \       and use its broadcast/multicast routing table. (See NOTE 1.)\n       (4)\
    \ Set the route change flag and invoke triggered update process\n       (5) Return\
    \ to step 1 to process the next entry.\n           [NOTE 1]\n             There\
    \ are two implementations;\n              (1) Prepare a spanning tree for each\
    \ route and use\n                  only one corresponding to the current VSS.\
    \ In this\n                  case, each unicast route entry has a broadcast/unicast\n\
    \                  routing table.\n              (2) Prepare only one spanning\
    \ tree corresponding to the\n                  current VSS. In this case, a switch\
    \ has only one\n                  broadcast/multicast routing table.\n       \
    \       In this document, the former is assumed.\n      Case 2. A corresponding\
    \ entry is found\n       In this case, the update message is processed differently\n\
    \       according to the new metric value.\n       (a) new_metric < 16 & new_metric\
    \ > current_metric\n          (1)If and only if the update is from the same port(next_hop\n\
    \             port) as the existing one,\n            (1-1) Update the entry\n\
    \            (1-2) Initialize EXPIRATION_TIMER and GC_TIMER\n          (2) If\
    \ the corresponding bit to the port, which the update\n              message is\
    \ received, is marked in the broadcast/multicast\n              routing table,\
    \ clear the bit.\n          (3) Return to Step 1 and process the next entry.\n\
    \       (b) new_metric < 16 & new_metric < current_metric\n          (1) Update\
    \ the entry and clear the bit in the\n              broadcast/multicast routing\
    \ table corresponding to the old\n              next_hop port.\n          (2)\
    \ Initialize EXPIRATION_TIMER, GC_TIMER, and\n              PORT_EXPIRATION_TIMER\
    \ for the new next_hop port.\n          (3) Mark a bit in the broadcast/multicast\
    \ routing table\n              corresponding to the new next_hop port and start\n\
    \              FORWARD_DELAY_TIMER.\n          (4) Set the route change flag and\
    \ invoke triggered update with\n              poisoned reverse for the new next_hop.\n\
    \          (5) Return to Step 1 to process the next entry.\n       (c) new_metric\
    \ < 16 & new_metric = current_metric\n          If a new route with the same metric\
    \ value as the existing\n          routing table entry is received, use the old\
    \ one as follows;\n          (1) If the new next hop is equal to the current one,\n\
    \              initialize EXPIRATION_TIMER and GC_TIMER. Otherwise,\n        \
    \      ignore this update.\n          (2) If the bit corresponding to the port,\
    \ from which the\n              update message was received, is marked in the\n\
    \              broadcast/multicast routing table, clear the bit.\n          (3)\
    \ Return to Step 1 to process the next entry.\n       (d) the new metric = 16\
    \ & the new next hop = the current one\n          If the current metric is not\
    \ equal to 16, this is a new\n          unreachable information. Then,\n     \
    \     (1) Update the entry and clear the bit in the\n              broadcast/multicast\
    \ routing table corresponding to the old\n              next_hop port.\n     \
    \     (2) If this route is for the current VSS, select a new VSS in\n        \
    \      the valid routing table entries. Valid means that the\n              destination\
    \ is reachable.\n          (3) Set the route change flag and invoke triggered\
    \ update\n              process to notify the unreachable route.\n          Otherwise,\n\
    \              do nothing and return to Step 1 to process the next entry.\n  \
    \     (e) the new metric = 16 & the new next hop /= the current one\n        \
    \  (1) If the bit corresponding to the port, from which the\n              update\
    \ message was received, is marked in the\n              broadcast/multicast routing\
    \ table, clear the bit.\n          (2) Return to Step 1 to process the next entry.\n"
- title: 5.5 Timers
  contents:
  - "5.5 Timers\n   The timer routine increments the following timers and executes\
    \ its\n   associated process on their expiration.\n    (1) EXPIRATION_TIMER and\
    \ GC_TIMER\n    The EXPIRATION_TIMERs and GC_TIMERs of each entry in the unicast\n\
    \    routing table are incremented every FULL_UPDATE_TIME (10 seconds by\n   \
    \ default). When a EXPIRATION_TIMER expires, the metric is changed to\n    unreachable(16),\
    \ update process is triggered, and GC_TIMER is\n    started. When a GC_TIMER expires,\
    \ the entry is deleted from the\n    local routing table. EXPIRATION_TIMER and\
    \ GC_TIMER are cleared every\n    time a switch receives a routing update.\n \
    \   (2) FORWARD_DELAY_TIMER\n    FORWARD_DELAY_TIMER is completely handled in\
    \ the receive process and\n    has no relation to the timer routine.\n    (3)\
    \ PORT_EXPIRATION_TIMER\n    PORT_EXPIRATION_TIMERs associated with each bit in\
    \ the\n    broadcast/multicast routing table are incremented every\n    FULL_UPDATE_TIME\
    \ (10 seconds by default).  When the timer expires,\n    the corresponding downstream\
    \ switch is considered to be down and the\n    corresponding bit in the broadcast/multicast\
    \ routing table is\n    cleared. This timer is cleared by the receive process\
    \ every time a\n    poisoned reverse packet is received from the corresponding\
    \ switch.\n"
- title: 6. Further considerations on implementation
  contents:
  - '6. Further considerations on implementation

    '
- title: 6.1 Port State
  contents:
  - "6.1 Port State\n   A switch assumes that every port is connected to a switch\
    \ initially.\n   Thus, it sends update packets to every port. When a node is connected\n\
    \   to a port, the switch recognizes it by receiving an NSP request\n   packet,\
    \ and stops sending SSP packets to the port. Whenever a switch\n   detects a connection\
    \ failure such as loss of signal and out-of-\n   synchronization, it should clear\
    \ the internal state table\n   corresponding of the port.\n"
- title: 6.2 Half way connection problem
  contents:
  - "6.2 Half way connection problem\n   A port consists of two channels, transmit\
    \ and receive. Although it is\n   easy for a node or a switch to detect a receive\
    \ channel failure,\n   transmit channel failure may not be detected, causing half\
    \ way\n   connection.  This results in a black hole.\n   Thus, whenever a switch\
    \ receives a SSP update packet from a port, it\n   SHOULD check the status of\
    \ the corresponding transmit channel.\n   SONET/SDH has a feedback mechanism for\
    \ that purpose. The status of\n   the local transmit channel received at the remote\
    \ end can be sent\n   back utilizing the overhead part, FEBE(Far End Block Error)\
    \ and\n   FERF(Far End Receive Failure), of the corresponding receive channel.\n\
    \   If the signals indicates that the transmit channel has a problem, the\n  \
    \ SSP packet received from the remote end should be silently discarded.\n   However,\
    \ some SONET/SDH services do not provide path overhead\n   transparency.\n   Although,\
    \ SONET/SDH APS(Automatic Protection Switching) can be\n   utilized to switch\
    \ service from a failed line to a spare line, the\n   function is out of scope\
    \ of this protocol.\n"
- title: 7. Security Considerations
  contents:
  - "7. Security Considerations\n   Security issues are not discussed in this memo.\n"
- title: References
  contents:
  - "References\n   [1]   Murakami, K. and M. Maruyama, \"MAPOS - Multiple Access\
    \ Protocol\n         over SONET/SDH Version 1,\" RFC2171, June 1997.\n   [2] \
    \  CCITT Recommendation G.707: Synchronous Digital Hierarchy Bit\n         Rates,\
    \ 1990.\n   [3]   CCITT Recommendation G.708: Network Node Interface for\n   \
    \      Synchronous Digital Hierarchy, 1990.\n   [4]   CCITT Recommendation G.709:\
    \ Synchronous Multiplexing Structure,\n         1990.\n   [5]   American National\
    \ Standard for Telecommunications - Digital\n         Hierarchy - Optical Interface\
    \ Rates and Formats Specification,\n         ANSI T1.105-1991.\n   [6]   Hedrick,\
    \ C., \"Routing Information Protocol\", STD 34, RFC 1058,\n         Rutgers University,\
    \ June 1988.\n   [7]   Malkin, G., \"RIP Version 2 - Carrying Additional Information\
    \ \",\n         RFC1723, Xylogics, Inc., November 1994.\n   [8]   Pusateri, T.,\
    \ \"Distance Vector Multicast Routing Protocol\",\n         September 1996, Work\
    \ in Progress.\n   [9]   Murakami, K. and M. Maruyama, \"A MAPOS version 1 Extension\
    \ -\n         Node Switch Protocol,\" RFC2173, June 1997.\n   [10]  Maruyama,\
    \ M. and K. Murakami, \"MAPOS Version 1 Assigned\n         Numbers,\" RFC2172,\
    \ June 1997.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors would like to acknowledge the contributions\
    \ and\n   thoughtful suggestions of John P. Mullaney, Clark Bremer, Masayuki\n\
    \   Kobayashi, Paul Francis, Toshiaki Yoshida, Takahiro Sajima, and\n   Satoru\
    \ Yagi.\n"
- title: Authors' Address
  contents:
  - "Authors' Address\n             Ken Murakami\n             NTT Software Laboratories\n\
    \             3-9-11, Midori-cho\n             Musashino-shi\n             Tokyo\
    \ 180, Japan\n             E-mail: murakami@ntt-20.ecl.net\n             Mitsuru\
    \ Maruyama\n             NTT Software Laboratories\n             3-9-11, Midori-cho\n\
    \             Musashino-shi\n             Tokyo 180, Japan\n             E-mail:\
    \ mitsuru@ntt-20.ecl.net\n"
