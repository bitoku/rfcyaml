- title: __initial_text__
  contents:
  - '    A Mechanism for Prompt Notification of Zone Changes (DNS NOTIFY)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Abstract
  contents:
  - "Abstract\n   This memo describes the NOTIFY opcode for DNS, by which a master\n\
    \   server advises a set of slave servers that the master's data has been\n  \
    \ changed and that a query should be initiated to discover the new\n   data.\n"
- title: 1. Rationale and Scope
  contents:
  - "1. Rationale and Scope\n   1.1. Slow propagation of new and changed data in a\
    \ DNS zone can be\n   due to a zone's relatively long refresh times.  Longer refresh\
    \ times\n   are beneficial in that they reduce load on the master servers, but\n\
    \   that benefit comes at the cost of long intervals of incoherence among\n  \
    \ authority servers whenever the zone is updated.\n   1.2. The DNS NOTIFY transaction\
    \ allows master servers to inform slave\n   servers when the zone has changed\
    \ -- an interrupt as opposed to poll\n   model -- which it is hoped will reduce\
    \ propagation delay while not\n   unduly increasing the masters' load.  This specification\
    \ only allows\n   slaves to be notified of SOA RR changes, but the architechture\
    \ of\n   NOTIFY is intended to be extensible to other RR types.\n   1.3. This\
    \ document intentionally gives more definition to the roles\n   of \"Master,\"\
    \ \"Slave\" and \"Stealth\" servers, their enumeration in NS\n   RRs, and the\
    \ SOA MNAME field.  In that sense, this document can be\n   considered an addendum\
    \ to [RFC1035].\n"
- title: 2. Definitions and Invariants
  contents:
  - "2. Definitions and Invariants\n   2.1. The following definitions are used in\
    \ this document:\n   Slave           an authoritative server which uses zone transfer\
    \ to\n                   retrieve the zone.  All slave servers are named in\n\
    \                   the NS RRs for the zone.\n   Master          any authoritative\
    \ server configured to be the source\n                   of zone transfer for\
    \ one or more slave servers.\n   Primary Master  master server at the root of\
    \ the zone transfer\n                   dependency graph.  The primary master\
    \ is named in the\n                   zone's SOA MNAME field and optionally by\
    \ an NS RR.\n                   There is by definition only one primary master\
    \ server\n                   per zone.\n   Stealth         like a slave server\
    \ except not listed in an NS RR for\n                   the zone.  A stealth server,\
    \ unless explicitly\n                   configured to do otherwise, will set the\
    \ AA bit in\n                   responses and be capable of acting as a master.\
    \  A\n                   stealth server will only be known by other servers if\n\
    \                   they are given static configuration data indicating\n    \
    \               its existence.\n   Notify Set      set of servers to be notified\
    \ of changes to some\n                   zone.  Default is all servers named in\
    \ the NS RRset,\n                   except for any server also named in the SOA\
    \ MNAME.\n                   Some implementations will permit the name server\n\
    \                   administrator to override this set or add elements to\n  \
    \                 it (such as, for example, stealth servers).\n   2.2. The zone's\
    \ servers must be organized into a dependency graph\n   such that there is a primary\
    \ master, and all other servers must use\n   AXFR or IXFR either from the primary\
    \ master or from some slave which\n   is also a master.  No loops are permitted\
    \ in the AXFR dependency\n   graph.\n"
- title: 3. NOTIFY Message
  contents:
  - "3. NOTIFY Message\n   3.1. When a master has updated one or more RRs in which\
    \ slave servers\n   may be interested, the master may send the changed RR's name,\
    \ class,\n   type, and optionally, new RDATA(s), to each known slave server using\n\
    \   a best efforts protocol based on the NOTIFY opcode.\n   3.2. NOTIFY uses the\
    \ DNS Message Format, although it uses only a\n   subset of the available fields.\
    \  Fields not otherwise described\n   herein are to be filled with binary zero\
    \ (0), and implementations\n   must ignore all messages for which this is not\
    \ the case.\n   3.3. NOTIFY is similar to QUERY in that it has a request message\
    \ with\n   the header QR flag \"clear\" and a response message with QR \"set\"\
    .  The\n   response message contains no useful information, but its reception\
    \ by\n   the master is an indication that the slave has received the NOTIFY\n\
    \   and that the master can remove the slave from any retry queue for\n   this\
    \ NOTIFY event.\n   3.4. The transport protocol used for a NOTIFY transaction\
    \ will be UDP\n   unless the master has reason to believe that TCP is necessary;\
    \ for\n   example, if a firewall has been installed between master and slave,\n\
    \   and only TCP has been allowed; or, if the changed RR is too large to\n   fit\
    \ in a UDP/DNS datagram.\n   3.5. If TCP is used, both master and slave must continue\
    \ to offer\n   name service during the transaction, even when the TCP transaction\
    \ is\n   not making progress.  The NOTIFY request is sent once, and a\n   \"timeout\"\
    \ is said to have occurred if no NOTIFY response is received\n   within a reasonable\
    \ interval.\n   3.6. If UDP is used, a master periodically sends a NOTIFY request\
    \ to\n   a slave until either too many copies have been sent (a \"timeout\"),\
    \ an\n   ICMP message indicating that the port is unreachable, or until a\n  \
    \ NOTIFY response is received from the slave with a matching query ID,\n   QNAME,\
    \ IP source address, and UDP source port number.\n   Note:\n      The interval\
    \ between transmissions, and the total number of\n      retransmissions, should\
    \ be operational parameters specifiable by\n      the name server administrator,\
    \ perhaps on a per-zone basis.\n      Reasonable defaults are a 60 second interval\
    \ (or timeout if\n      using TCP), and a maximum of 5 retransmissions (for UDP).\
    \  It is\n      considered reasonable to use additive or exponential backoff for\n\
    \      the retry interval.\n   3.7. A NOTIFY request has QDCOUNT>0, ANCOUNT>=0,\
    \ AUCOUNT>=0,\n   ADCOUNT>=0.  If ANCOUNT>0, then the answer section represents\
    \ an\n   unsecure hint at the new RRset for this <QNAME,QCLASS,QTYPE>.  A\n  \
    \ slave receiving such a hint is free to treat equivilence of this\n   answer\
    \ section with its local data as a \"no further work needs to be\n   done\" indication.\
    \  If ANCOUNT=0, or ANCOUNT>0 and the answer section\n   differs from the slave's\
    \ local data, then the slave should query its\n   known masters to retrieve the\
    \ new data.\n   3.8. In no case shall the answer section of a NOTIFY request be\
    \ used\n   to update a slave's local data, or to indicate that a zone transfer\n\
    \   needs to be undertaken, or to change the slave's zone refresh timers.\n  \
    \ Only a \"data present; data same\" condition can lead a slave to act\n   differently\
    \ if ANCOUNT>0 than it would if ANCOUNT=0.\n   3.9. This version of the NOTIFY\
    \ specification makes no use of the\n   authority or additional data sections,\
    \ and so conforming\n   implementations should set AUCOUNT=0 and ADCOUNT=0 when\
    \ transmitting\n   requests.  Since a future revision of this specification may\
    \ define a\n   backwards compatible use for either or both of these sections,\n\
    \   current implementations must ignore these sections, but not the\n   entire\
    \ message, if AUCOUNT>0 and/or ADCOUNT>0.\n   3.10. If a slave receives a NOTIFY\
    \ request from a host that is not a\n   known master for the zone containing the\
    \ QNAME, it should ignore the\n   request and produce an error message in its\
    \ operations log.\n   Note:\n      This implies that slaves of a multihomed master\
    \ must either know\n      their master by the \"closest\" of the master's interface\n\
    \      addresses, or must know all of the master's interface addresses.\n    \
    \  Otherwise, a valid NOTIFY request might come from an address\n      that is\
    \ not on the slave's state list of masters for the zone,\n      which would be\
    \ an error.\n   3.11. The only defined NOTIFY event at this time is that the SOA\
    \ RR\n   has changed.  Upon completion of a NOTIFY transaction for QTYPE=SOA,\n\
    \   the slave should behave as though the zone given in the QNAME had\n   reached\
    \ its REFRESH interval (see [RFC1035]), i.e., it should query\n   its masters\
    \ for the SOA of the zone given in the NOTIFY QNAME, and\n   check the answer\
    \ to see if the SOA SERIAL has been incremented since\n   the last time the zone\
    \ was fetched.  If so, a zone transfer (either\n   AXFR or IXFR) should be initiated.\n\
    \   Note:\n      Because a deep server dependency graph may have multiple paths\n\
    \      from the primary master to any given slave, it is possible that\n     \
    \ a slave will receive a NOTIFY from one of its known masters even\n      though\
    \ the rest of its known masters have not yet updated their\n      copies of the\
    \ zone.  Therefore, when issuing a QUERY for the\n      zone's SOA, the query\
    \ should be directed at the known master who\n      was the source of the NOTIFY\
    \ event, and not at any of the other\n      known masters.  This represents a\
    \ departure from [RFC1035],\n      which specifies that upon expiry of the SOA\
    \ REFRESH interval,\n      all known masters should be queried in turn.\n   3.12.\
    \ If a NOTIFY request is received by a slave who does not\n   implement the NOTIFY\
    \ opcode, it will respond with a NOTIMP\n   (unimplemented feature error) message.\
    \  A master server who receives\n   such a NOTIMP should consider the NOTIFY transaction\
    \ complete for\n   that slave.\n"
- title: 4. Details and Examples
  contents:
  - "4. Details and Examples\n   4.1. Retaining query state information across host\
    \ reboots is\n   optional, but it is reasonable to simply execute an SOA NOTIFY\n\
    \   transaction on each authority zone when a server first starts.\n   4.2. Each\
    \ slave is likely to receive several copies of the same\n   NOTIFY request:  One\
    \ from the primary master, and one from each other\n   slave as that slave transfers\
    \ the new zone and notifies its potential\n   peers.  The NOTIFY protocol supports\
    \ this multiplicity by requiring\n   that NOTIFY be sent by a slave/master only\
    \ AFTER it has updated the\n   SOA RR or has determined that no update is necessary,\
    \ which in\n   practice means after a successful zone transfer.  Thus, barring\n\
    \   delivery reordering, the last NOTIFY any slave receives will be the\n   one\
    \ indicating the latest change.  Since a slave always requests SOAs\n   and AXFR/IXFRs\
    \ only from its known masters, it will have an\n   opportunity to retry its QUERY\
    \ for the SOA after each of its masters\n   have completed each zone update.\n\
    \   4.3. If a master server seeks to avoid causing a large number of\n   simultaneous\
    \ outbound zone transfers, it may delay for an arbitrary\n   length of time before\
    \ sending a NOTIFY message to any given slave.\n   It is expected that the time\
    \ will be chosen at random, so that each\n   slave will begin its transfer at\
    \ a unique time.  The delay shall not\n   in any case be longer than the SOA REFRESH\
    \ time.\n   Note:\n      This delay should be a parameter that each primary master\
    \ name\n      server can specify, perhaps on a per-zone basis.  Random delays\n\
    \      of between 30 and 60 seconds would seem adequate if the servers\n     \
    \ share a LAN and the zones are of moderate size.\n   4.4. A slave which receives\
    \ a valid NOTIFY should defer action on any\n   subsequent NOTIFY with the same\
    \ <QNAME,QCLASS,QTYPE> until it has\n   completed the transaction begun by the\
    \ first NOTIFY.  This duplicate\n   rejection is necessary to avoid having multiple\
    \ notifications lead to\n   pummeling the master server.\n   4.5 Zone has Updated\
    \ on Primary Master\n   Primary master sends a NOTIFY request to all servers named\
    \ in Notify\n   Set.  The NOTIFY request has the following characteristics:\n\
    \      query ID:   (new)\n      op:         NOTIFY (4)\n      resp:       NOERROR\n\
    \      flags:      AA\n      qcount:     1\n      qname:      (zone name)\n  \
    \    qclass:     (zone class)\n      qtype:      T_SOA\n   4.6 Zone has Updated\
    \ on a Slave that is also a Master\n   As above in 4.5, except that this server's\
    \ Notify Set may be\n   different from the Primary Master's due to optional static\n\
    \   specification of local stealth servers.\n   4.7 Slave Receives a NOTIFY Request\
    \ from a Master\n   When a slave server receives a NOTIFY request from one of\
    \ its locally\n   designated masters for the zone enclosing the given QNAME, with\n\
    \   QTYPE=SOA and QR=0, it should enter the state it would if the zone's\n   refresh\
    \ timer had expired.  It will also send a NOTIFY response back\n   to the NOTIFY\
    \ request's source, with the following characteristics:\n      query ID:   (same)\n\
    \      op:         NOTIFY (4)\n      resp:       NOERROR\n      flags:      QR\
    \ AA\n      qcount:     1\n      qname:      (zone name)\n      qclass:     (zone\
    \ class)\n      qtype:      T_SOA\n   This is intended to be identical to the\
    \ NOTIFY request, except that\n   the QR bit is also set.  The query ID of the\
    \ response must be the\n   same as was received in the request.\n   4.8 Master\
    \ Receives a NOTIFY Response from Slave\n   When a master server receives a NOTIFY\
    \ response, it deletes this\n   query from the retry queue, thus completing the\
    \ \"notification\n   process\" of \"this\" RRset change to \"that\" server.\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   We believe that the NOTIFY operation's only security\
    \ considerations\n   are:\n   1. That a NOTIFY request with a forged IP/UDP source\
    \ address can\n      cause a slave to send spurious SOA queries to its masters,\n\
    \      leading to a benign denial of service attack if the forged\n      requests\
    \ are sent very often.\n   2. That TCP spoofing could be used against a slave\
    \ server given\n      NOTIFY as a means of synchronizing an SOA query and UDP/DNS\n\
    \      spoofing as a means of forcing a zone transfer.\n"
- title: 6. References
  contents:
  - "6. References\n   [RFC1035]\n      Mockapetris, P., \"Domain Names - Implementation\
    \ and\n      Specification\", STD 13, RFC 1035, November 1987.\n   [IXFR]\n  \
    \    Ohta, M., \"Incremental Zone Transfer\", RFC 1995, August 1996.\n"
- title: 7. Author's Address
  contents:
  - "7. Author's Address\n   Paul Vixie\n   Internet Software Consortium\n   Star\
    \ Route Box 159A\n   Woodside, CA 94062\n   Phone: +1 415 747 0204\n   EMail:\
    \ paul@vix.com\n"
