- contents:
  - "                      Multicast Extensions to the\n            Security Architecture
    for the Internet Protocol\n"
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2008 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents
    (http://trustee.ietf.org/\n   license-info) in effect on the date of publication
    of this document.\n   Please review these documents carefully, as they describe
    your rights\n   and restrictions with respect to this document.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   The Security Architecture for the Internet Protocol describes\n
    \  security services for traffic at the IP layer.  That architecture\n   primarily
    defines services for Internet Protocol (IP) unicast\n   packets.  This document
    describes how the IPsec security services are\n   applied to IP multicast packets.
    \ These extensions are relevant only\n   for an IPsec implementation that supports
    multicast.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n
    \     1.1. Scope ......................................................3\n      1.2.
    Terminology ................................................4\n   2. Overview
    of IP Multicast Operation ..............................6\n   3. Security Association
    Modes ......................................7\n      3.1. Tunnel Mode with Address
    Preservation ......................7\n   4. Security Association ............................................8\n
    \     4.1. Major IPsec Databases ......................................8\n           4.1.1.
    Group Security Policy Database (GSPD) ...............8\n           4.1.2. Security
    Association Database (SAD) ................12\n           4.1.3. Group Peer Authorization
    Database (GPAD) ...........12\n      4.2. Group Security Association (GSA) ..........................14\n
    \          4.2.1. Concurrent IPsec SA Life Spans and Re-key Rollover .15\n      4.3.
    Data Origin Authentication ................................17\n      4.4. Group
    SA and Key Management ...............................18\n           4.4.1. Co-Existence
    of Multiple Key Management Protocols ..18\n   5. IP Traffic Processing ..........................................18\n
    \     5.1. Outbound IP Traffic Processing ............................18\n      5.2.
    Inbound IP Traffic Processing .............................19\n   6. Security
    Considerations ........................................22\n      6.1. Security
    Issues Solved by IPsec Multicast Extensions ......22\n      6.2. Security Issues
    Not Solved by IPsec Multicast Extensions ..23\n           6.2.1. Outsider Attacks
    ...................................23\n           6.2.2. Insider Attacks ....................................23\n
    \     6.3. Implementation or Deployment Issues that Impact Security ..24\n           6.3.1.
    Homogeneous Group Cryptographic Algorithm\n                  Capabilities .......................................24\n
    \          6.3.2. Groups that Span Two or More Security\n                  Policy
    Domains .....................................24\n           6.3.3. Source-Specific
    Multicast Group Sender\n                  Transient Locators .................................25\n
    \  7. Acknowledgements ...............................................25\n   8.
    References .....................................................25\n      8.1.
    Normative References ......................................25\n      8.2. Informative
    References ....................................26\n   Appendix A - Multicast Application
    Service Models .................28\n      A.1 Unidirectional Multicast Applications
    ......................28\n      A.2 Bi-directional Reliable Multicast Applications
    .............28\n      A.3 Any-To-Any Multicast Applications ..........................30\n
    \  Appendix B - ASN.1 for a GSPD Entry ...............................30\n      B.1
    Fields Specific to a GSPD Entry ............................30\n      B.2 SPDModule
    ..................................................31\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Security Architecture for the Internet Protocol [RFC4301]\n
    \  provides security services for traffic at the IP layer.  It describes\n   an
    architecture for IPsec-compliant systems and a set of security\n   services for
    the IP layer.  These security services primarily\n   describe services and semantics
    for IPsec Security Associations (SAs)\n   shared between two IPsec devices.  Typically,
    this includes SAs with\n   traffic selectors that include a unicast address in
    the IP\n   destination field, and results in an IPsec packet with a unicast\n
    \  address in the IP destination field.  The security services defined\n   in
    RFC 4301 can also be used to tunnel IP multicast packets, where\n   the tunnel
    is a pairwise association between two IPsec devices.  RFC\n   4301 defined manually
    keyed transport mode IPsec SA support for IP\n   packets with a multicast address
    in the IP destination address field.\n   However, RFC 4301 did not define the
    interaction of an IPsec\n   subsystem with a Group Key Management protocol or
    the semantics of a\n   tunnel mode IPsec SA with an IP multicast address in the
    outer IP\n   header.\n   This document describes OPTIONAL extensions to RFC 4301
    that further\n   define the IPsec security architecture in order for groups of
    IPsec\n   devices to share SAs.  In particular, it supports SAs with traffic\n
    \  selectors that include a multicast address in the IP destination\n   field
    and that result in an IPsec packet with an IP multicast address\n   in the IP
    destination field.  It also describes additional semantics\n   for IPsec Group
    Key Management (GKM) subsystems.  Note that this\n   document uses the term \"GKM
    protocol\" generically and therefore does\n   not assume a particular GKM protocol.\n
    \  An IPsec implementation that does not support multicast is not\n   required
    to support these extensions.\n   Throughout this document, RFC 4301 semantics
    remain unchanged by the\n   presence of these multicast extensions unless specifically
    noted to\n   the contrary.\n"
  - contents:
    - "1.1.  Scope\n   The IPsec extensions described in this document support IPsec\n
      \  Security Associations that result in IPsec packets with IPv4 or IPv6\n   multicast
      group addresses as the destination address.  Both\n   Any-Source Multicast (ASM)
      and Source-Specific Multicast (SSM)\n   [RFC3569] group addresses are supported.
      \ These extensions are used\n   when management policy requires that IP multicast
      packets protected\n   by IPsec remain IP multicast packets.  When management
      policy\n   requires that the IP multicast packets be encapsulated as IP unicast\n
      \  packets (e.g., because the network connected to the unprotected\n   interface
      does not support IP multicast), the extensions in this\n   document are not
      used.\n   These extensions also support Security Associations with IPv4\n   Broadcast
      addresses that result in an IPv4 link-level Broadcast\n   packet, and IPv6 Anycast
      addresses [RFC2526] that result in an IPv6\n   Anycast packet.  These destination
      address types share many of the\n   same characteristics of multicast addresses
      because there may be\n   multiple candidate receivers of a packet protected
      by IPsec.\n   The IPsec architecture does not make requirements upon entities
      not\n   participating in IPsec (e.g., network devices between IPsec\n   endpoints).
      \ As such, these multicast extensions do not require\n   intermediate systems
      in a multicast-enabled network to participate in\n   IPsec.  In particular,
      no requirements are placed on the use of\n   multicast routing protocols (e.g.,
      Protocol Independent Multicast -\n   Sparse Mode (PIM-SM) [RFC4601]) or multicast
      admission protocols\n   (e.g., Internet Group Management Protocol (IGMP) [RFC3376]).\n
      \  All implementation models of IPsec (e.g., \"bump-in-the-stack\",\n   \"bump-in-the-wire\")
      are supported.\n   This version of the multicast IPsec extension specification
      requires\n   that all IPsec devices participating in a Security Association
      be\n   homogeneous.  They MUST share a common set of cryptographic transform\n
      \  and protocol-handling capabilities.  The semantics of an \"IPsec\n   composite
      group\" [COMPGRP], a heterogeneous IPsec cryptographic group\n   formed from
      the union of two or more sub-groups, is an area for\n   future standardization.\n"
    title: 1.1.  Scope
  - contents:
    - "1.2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
      \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and
      \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC
      2119 [RFC2119].\n   The following key terms are used throughout this document.\n
      \  Any-Source Multicast (ASM)\n      The Internet Protocol (IP) multicast service
      model as defined in\n      RFC 1112 [RFC1112].  In this model, one or more senders
      source\n      packets to a single IP multicast address.  When receivers join
      the\n      group, they receive all packets sent to that IP multicast address.\n
      \     This is known as a (*,G) group.\n   Group\n      A set of devices that
      work together to protect group\n      communications.\n   Group Controller Key
      Server (GCKS)\n      A Group Key Management (GKM) protocol server that manages
      IPsec\n      state for a group.  A GCKS authenticates and provides the IPsec
      SA\n      policy and keying material to GKM Group Members.\n   Group Key Management
      (GKM) Protocol\n      A key management protocol used by a GCKS to distribute
      IPsec\n      Security Association policy and keying material.  A GKM protocol\n
      \     is used when a group of IPsec devices require the same SAs.  For\n      example,
      when an IPsec SA describes an IP multicast destination,\n      the sender and
      all receivers need to have the group SA.\n   Group Key Management Subsystem\n
      \     A subsystem in an IPsec device implementing a Group Key Management\n      protocol.
      \ The GKM subsystem provides IPsec SAs to the IPsec\n      subsystem on the
      IPsec device.  Refer to RFC 3547 [RFC3547] and\n      RFC 4535 [RFC4535] for
      additional information.\n   Group Member\n      An IPsec device that belongs
      to a group.  A Group Member is\n      authorized to be a Group Sender and/or
      a Group Receiver.\n   Group Owner\n      An administrative entity that chooses
      the policy for a group.\n   Group Security Association (GSA)\n      A collection
      of IPsec Security Associations (SAs) and GKM\n      subsystem SAs necessary
      for a Group Member to receive key updates.\n      A GSA describes the working
      policy for a group.  Refer to RFC 4046\n      [RFC4046] for additional information.\n
      \  Group Security Policy Database (GSPD)\n      The GSPD is a multicast-capable
      security policy database, as\n      mentioned in RFC 3740 and Section 4.4.1.1.
      of RFC 4301.  Its\n      semantics are a superset of the unicast Security Policy
      Database\n      (SPD) defined by Section 4.4.1 of RFC 4301.  Unlike a unicast\n
      \     SPD-S, in which point-to-point traffic selectors are inherently\n      bi-directional,
      multicast security traffic selectors in the GSPD-S\n      include a \"sender
      only\", \"receiver only\", or \"symmetric\"\n      directional attribute.  Refer
      to Section 4.1.1 for more details.\n   GSPD-S, GSPD-I, GSPD-O\n      Group Security
      Policy Database (secure traffic), (inbound), and\n      (outbound), respectively.
      \ See Section 4.4.1 of RFC 4301.\n   Group Receiver\n      A Group Member that
      is authorized to receive packets sent to a\n      group by a Group Sender.\n
      \  Group Sender\n      A Group Member that is authorized to send packets to
      a group.\n   Source-Specific Multicast (SSM)\n      The Internet Protocol (IP)
      multicast service model as defined in\n      RFC 3569 [RFC3569].  In this model,
      each combination of a sender\n      and an IP multicast address is considered
      a group.  This is known\n      as an (S,G) group.\n   Tunnel Mode with Address
      Preservation\n      A type of IPsec tunnel mode used by security gateway\n      implementations
      when encapsulating IP multicast packets such that\n      they remain IP multicast
      packets.  This mode is necessary for IP\n      multicast routing to correctly
      route IP multicast packets\n      protected by IPsec.\n"
    title: 1.2.  Terminology
  title: 1.  Introduction
- contents:
  - "2.  Overview of IP Multicast Operation\n   IP multicasting is a means of sending
    a single packet to a \"host\n   group\", a set of zero or more hosts identified
    by a single IP\n   destination address.  IP multicast packets are delivered to
    all\n   members of the group either with \"best-efforts\" reliability [RFC1112]\n
    \  or as part of a reliable stream (e.g., NACK-Oriented Reliable\n   Multicast
    (NORM) [RFC3940]).\n   A sender to an IP multicast group sets the destination
    of the packet\n   to an IP address that has been allocated for IP multicast.  Allocated\n
    \  IP multicast addresses are defined in [RFC3171], [RFC3306], and\n   [RFC3307].
    \ Potential receivers of the packet \"join\" the IP multicast\n   group by registering
    with a network routing device ([RFC3376],\n   [RFC3810]), signaling its intent
    to receive packets sent to a\n   particular IP multicast group.\n   Network routing
    devices configured to pass IP multicast packets\n   participate in multicast routing
    protocols (e.g., PIM-SM) [RFC4601].\n   Multicast routing protocols maintain state
    regarding which devices\n   have registered to receive packets for a particular
    IP multicast\n   group.  When a router receives an IP multicast packet, it forwards
    a\n   copy of the packet out of each interface for which there are known\n   receivers.\n"
  title: 2.  Overview of IP Multicast Operation
- contents:
  - "3.  Security Association Modes\n   IPsec supports two modes of use: transport
    mode and tunnel mode.  In\n   transport mode, IP Authentication Header (AH) [RFC4302]
    and IP\n   Encapsulating Security Payload (ESP) [RFC4303] provide protection\n
    \  primarily for next layer protocols; in tunnel mode, AH and ESP are\n   applied
    to tunneled IP packets.\n   A host implementation of IPsec using the multicast
    extensions MAY use\n   either transport mode or tunnel mode to encapsulate an
    IP multicast\n   packet.  These processing rules are identical to the rules described\n
    \  in Section 4.1 of [RFC4301].  However, the destination address for\n   the
    IPsec packet is an IP multicast address, rather than a unicast\n   host address.\n
    \  A security gateway implementation of IPsec MUST use a tunnel mode SA,\n   for
    the reasons described in Section 4.1 of [RFC4301].  In\n   particular, the security
    gateway needs to use tunnel mode to\n   encapsulate incoming fragments, since
    IPsec cannot directly operate\n   on fragments.\n"
  - contents:
    - "3.1.  Tunnel Mode with Address Preservation\n   New (tunnel) header construction
      semantics are required when tunnel\n   mode is used to encapsulate IP multicast
      packets that are to remain\n   IP multicast packets.  These semantics are due
      to the following\n   unique requirements of IP multicast routing protocols (e.g.,
      PIM-SM\n   [RFC4601]).  This document describes these new header construction\n
      \  semantics as \"tunnel mode with address preservation\", which is\n   described
      as follows.\n   - When an IP multicast packet is received by a host or router,
      the\n     destination address of the packet is compared to the local IP\n     multicast
      state.  If the (outer) destination IP address of an IP\n     multicast packet
      is set to another IP address, the host or router\n     receiving the IP multicast
      packet will not process it properly.\n     Therefore, an IPsec security gateway
      needs to populate the\n     multicast IP destination address in the outer header
      using the\n     destination address from the inner header after IPsec tunnel\n
      \    encapsulation.\n   - IP multicast routing protocols typically create multicast\n
      \    distribution trees based on the source address as well as the group\n     address.
      \ If an IPsec security gateway populates the (outer) source\n     address of
      an IP multicast packet (with its own IP address, as\n     called for in RFC
      4301), the resulting IPsec-protected packet may\n     fail Reverse Path Forwarding
      (RPF) checks performed by other\n     routers.  A failed RPF check may result
      in the packet being\n     dropped.  To accommodate routing protocol RPF checks,
      the security\n     gateway implementing the IPsec multicast extensions SHOULD
      populate\n     the outer IP address from the original packet IP source address.\n
      \    However, it should be noted that a security gateway performing\n     source
      address preservation will not receive ICMP Path MTU (PMTU)\n     or other messages
      intended for the security gateway (triggered by\n     packets that have had
      the outer IP source address set to that of\n     the inner header).  Security
      gateway applications not requiring\n     source address preservation will be
      able to receive ICMP PMTU\n     messages and process them as described in Section
      6.1 of RFC 4301.\n   Because some applications of address preservation may require
      that\n   only the destination address be preserved, specification of\n   destination
      address preservation and source address preservation are\n   separated in the
      above description.  Destination address preservation\n   and source address
      preservation attributes are described in the Group\n   Security Policy Database
      (GSPD) (defined later in this document), and\n   are copied into corresponding
      Security Association Database (SAD)\n   entries.\n   Address preservation is
      applicable only for tunnel mode IPsec SAs\n   that specify the IP version of
      the encapsulating header to be the\n   same version as that of the inner header.
      \ When the IP versions are\n   different, IP multicast packets can be encapsulated
      using a tunnel\n   interface, for example as described in [RFC4891], where the
      tunnel is\n   also treated as an interface by IP multicast routing protocols.\n
      \  In summary, propagating both the IP source and destination addresses\n   of
      the inner IP header into the outer (tunnel) header allows IP\n   multicast routing
      protocols to route a packet properly when the\n   packet is protected by IPsec.
      \ This result is necessary in order for\n   the multicast extensions to allow
      a host or security gateway to\n   provide IPsec services for IP multicast packets.
      \ This method of RFC\n   4301 tunnel mode is known as \"tunnel mode with address
      preservation\".\n"
    title: 3.1.  Tunnel Mode with Address Preservation
  title: 3.  Security Association Modes
- contents:
  - '4.  Security Association

    '
  - contents:
    - "4.1.  Major IPsec Databases\n   The following sections describe the GKM subsystem
      and IPsec extension\n   interactions with the IPsec databases.  The major IPsec
      databases\n   need expanded semantics to fully support multicast.\n"
    - contents:
      - "4.1.1.  Group Security Policy Database (GSPD)\n   The Group Security Policy
        Database is a security policy database\n   capable of supporting both unicast
        Security Associations as defined\n   by RFC 4301 and the multicast extensions
        defined by this\n   specification.  The GSPD is considered to be the SPD,
        with the\n   addition of the semantics relating to the multicast extensions\n
        \  described in this section.  Appendix B provides an example of an\n   ASN.1
        definition of a GSPD entry.\n   This document describes a new \"address preservation\"
        (AP) flag\n   indicating that tunnel mode with address preservation is to
        be\n   applied to a GSPD entry.  The AP flag has two attributes: AP-L, used\n
        \  in the processing of the local tunnel address, and AP-R, used in the\n
        \  processing of the remote tunnel process.  This flag is added to the\n   GSPD
        \"Processing info\" field of the GSPD.  The following text\n   reproduced
        from Section 4.4.1.2 of RFC 4301 is amended to include\n   this additional
        processing.  (Note: for brevity, only the \"Processing\n   info\" text related
        to tunnel processing has been reproduced.)\n         o Processing info --
        which action is required -- PROTECT,\n           BYPASS, or DISCARD.  There
        is just one action that goes with\n           all the selector sets, not a
        separate action for each set.\n           If the required processing is PROTECT,
        the entry contains the\n           following information.\n           - IPsec
        mode -- tunnel or transport\n           - (if tunnel mode) local tunnel address
        -- For a non-mobile\n             host, if there is just one interface, this
        is\n             straightforward; if there are multiple interfaces, this\n
        \            must be statically configured.  For a mobile host, the\n             specification
        of the local address is handled externally to\n             IPsec.  If tunnel
        mode with address preservation is\n             specified for the local tunnel
        address, the AP-L attribute\n             is set to TRUE for the local tunnel
        address and the local\n             tunnel address is unspecified.  The presence
        of the AP-L\n             attribute indicates that the inner IP header source
        address\n             will be copied to the outer IP header source address
        during\n             IP header construction for tunnel mode.\n           -
        (if tunnel mode) remote tunnel address -- There is no\n             standard
        way to determine this.  See Section 4.5.3 of RFC\n             4301, \"Locating
        a Security Gateway\".  If tunnel mode with\n             address preservation
        is specified for the remote tunnel\n             address, the AP-R attribute
        is set to TRUE for the remote\n             tunnel address and the remote
        tunnel address is\n             unspecified.  The presence of the AP-R attribute
        indicates\n             that the inner IP header destination address will
        be copied\n             to the outer IP header destination address during
        IP header\n             construction for tunnel mode.\n   This document describes
        unique directionality processing for GSPD\n   entries with a remote IP multicast
        address.  Since an IP multicast\n   address must not be sent as the source
        address of an IP packet\n   [RFC1112], directionality of Local and Remote
        addresses and ports is\n   maintained during incoming SPD-S and SPD-I checks
        rather than being\n   swapped.  Section 4.4.1 of RFC 4301 is amended as follows:\n
        \        Representing Directionality in an SPD Entry\n           For traffic
        protected by IPsec, the Local and Remote address\n           and ports in
        an SPD entry are swapped to represent\n           directionality, consistent
        with IKE conventions.  In general,\n           the protocols that IPsec deals
        with have the property of\n           requiring symmetric SAs with flipped
        Local/Remote IP\n           addresses.  However, SPD entries with a remote
        IP multicast\n           address do not have their Local and Remote addresses
        and\n           ports in an SPD entry swapped during incoming SPD-S and SPD-I\n
        \          checks.\n   A new Group Security Policy Database (GSPD) attribute
        is introduced:\n   GSPD entry directionality.  The following text is added
        to the bullet\n   list of SPD fields described in Section 4.4.1.2 of RFC 4301.\n
        \        o Directionality -- can be one of three types: \"symmetric\",\n           \"sender
        only\", or \"receiver only\".  \"Symmetric\" indicates\n           that a
        pair of SAs are to be created (one in each direction,\n           as specified
        by RFC 4301).  GSPD entries marked as \"sender\n           only\" indicate
        that one SA is to be created in the outbound\n           direction.  GSPD
        entries marked as \"receiver only\" indicate\n           that one SA is to
        be created in the inbound direction.  GSPD\n           entries marked as \"sender
        only\" or \"receiver only\" SHOULD\n           support multicast IP addresses
        in their destination address\n           selectors.  If the processing requested
        is BYPASS or DISCARD\n           and a \"sender only\" type is configured,
        the entry MUST be put\n           in GSPD-O only.  Reciprocally, if the type
        is \"receiver\n           only\", the entry MUST go to GSPD-I only.\n   GSPD
        entries created by a GCKS may be assigned identical Security\n   Parameter
        Indexes (SPIs) to SAD entries created by IKEv2 [RFC4306].\n   This is not
        a problem for the inbound traffic as the appropriate SAs\n   can be matched
        using the algorithm described in Section 4.1 of RFC\n   4301.  However, the
        outbound traffic needs to be matched against the\n   GSPD selectors so that
        the appropriate SA can be created.\n   To facilitate dynamic group keying,
        the outbound GSPD MUST implement\n   a policy action capability that triggers
        a GKM protocol registration\n   exchange (as per Section 5.1 of [RFC4301]).
        \ For example, the Group\n   Sender GSPD policy might trigger on a match with
        a specified\n   multicast application packet that is entering the implementation
        via\n   the protected interface or that is emitted by the implementation on\n
        \  the protected side of the boundary and directed toward the\n   unprotected
        interface.  The ensuing Group Sender registration\n   exchange would set up
        the Group Sender's outbound SAD entry that\n   encrypts the multicast application's
        data stream.  In the inverse\n   direction, group policy may also set up an
        inbound IPsec SA.\n   At the Group Receiver endpoint(s), the IPsec subsystem
        MAY use GSPD\n   policy mechanisms that initiate a GKM protocol registration
        exchange.\n   One such policy mechanism might be on the detection of a device
        in\n   the protected network joining a multicast group matching GSPD policy\n
        \  (e.g., by receiving a IGMP/MLD (Multicast Listener Discovery) join\n   group
        message on a protected interface).  The ensuing Group Receiver\n   registration
        exchange would set up the Group Receiver's inbound SAD\n   entry that decrypts
        the multicast application's data stream.  In the\n   inverse direction, the
        group policy may also set up an outbound IPsec\n   SA (e.g., when supporting
        an ASM service model).\n   Note: A security gateway triggering on the receipt
        of unauthenticated\n   messages arriving on a protected interface may result
        in early Group\n   Receiver registration if the message is not the result
        of a device on\n   the protected network actually wishing to join a multicast
        group.\n   The unauthenticated messages will only cause the Group Receiver
        to\n   register once; subsequent messages will have no effect on the Group\n
        \  Receiver.\n   The IPsec subsystem MAY provide GSPD policy mechanisms that\n
        \  automatically initiate a GKM protocol de-registration exchange.\n   De-registration
        allows a GCKS to minimize exposure of the group's\n   secret key by re-keying
        a group on a group membership change event.\n   It also minimizes cost on
        a GCKS for those groups that maintain\n   member state.  One such policy mechanism
        could be the detection of\n   IGMP/MLD leave group exchange.  However, a security
        gateway Group\n   Member would not initiate a GKM protocol de-registration
        exchange\n   until it detects that there are no more receivers behind a protected\n
        \  interface.\n   Additionally, the GKM subsystem MAY set up the GSPD/SAD
        state\n   information independent of the multicast application's state.  In\n
        \  this scenario, the Group Owner issues management directives that tell\n
        \  the GKM subsystem when it should start GKM registration and\n   de-registration
        protocol exchanges.  Typically, the registration\n   policy strives to make
        sure that the group's IPsec subsystem state is\n   \"always ready\" in anticipation
        of the multicast application starting\n   its execution.\n"
      title: 4.1.1.  Group Security Policy Database (GSPD)
    - contents:
      - "4.1.2.  Security Association Database (SAD)\n   The SAD contains an item
        describing whether tunnel or transport mode\n   is applied to traffic on this
        SA.  The text in RFC 4301 Section\n   4.4.2.1 is amended to describe address
        preservation.\n         o IPsec protocol mode: tunnel or transport.  Indicates
        which\n           mode of AH or ESP is applied to traffic on this SA.  When\n
        \          tunnel mode is specified, the data item also indicates\n           whether
        or not address preservation is applied to the outer\n           IP header.
        \ Address preservation MUST NOT be specified when\n           the IP version
        of the encapsulating header and IP version of\n           the inner header
        do not match.  The local address, remote\n           address, or both addresses
        MAY be marked as being preserved\n           during tunnel encapsulation.\n"
      title: 4.1.2.  Security Association Database (SAD)
    - contents:
      - "4.1.3.  Group Peer Authorization Database (GPAD)\n   The multicast IPsec
        extensions introduce a new data structure called\n   the Group Peer Authorization
        Database (GPAD).  The GPAD is analogous\n   to the PAD defined in RFC 4301.
        \ It provides a link between the GSPD\n   and a Group Key Management (GKM)
        Subsystem.  The GPAD embodies the\n   following critical functions:\n         o
        identifies a GCKS (or group of GCKS devices) that is\n           authorized
        to communicate with this IPsec entity\n         o specifies the protocol and
        method used to authenticate each\n           GCKS\n         o provides the
        authentication data for each GKCS\n         o constrains the traffic selectors
        that can be asserted by a\n           GCKS with regard to SA creation\n         o
        constrains the types and values of Group Identifiers for\n           which
        a GCKS is authorized to provide group policy\n   The GPAD provides these functions
        for a Group Key Management\n   subsystem.  The GPAD is not consulted by IKE
        or other authentication\n   protocols that do not act as GKM protocols.\n
        \  To provide these functions, the GPAD contains an entry for each GCKS\n
        \  that the IPsec entity is configured to contact.  An entry contains\n   one
        or more GCKS Identifiers, the authentication protocol (e.g.,\n   Group Domain
        of Interpretation (GDOI) or Group Secure Association Key\n   Management Protocol
        (GSAKMP)), the authentication method used (e.g.,\n   certificates or pre-shared
        secrets), and the authentication data\n   (e.g., the pre-shared secret or
        trust anchor relative to which the\n   peer's certificate will be validated).
        \ For certificate-based\n   authentication, the entry also may provide information
        to assist in\n   verifying the revocation status of the peer, e.g., a pointer
        to a\n   Certificate Revocation List (CRL) repository or the name of an Online\n
        \  Certificate Status Protocol (OCSP) server associated with either the\n
        \  peer or the trust anchor associated with the peer.  The entry also\n   contains
        constraints a Group Member applies to the policy received\n   from the GKCS.\n"
      - contents:
        - "4.1.3.1.  GCKS Identifiers\n   GCKS Identifiers are used to identify one
          or more devices that are\n   authorized to act as a GCKS for this group.
          \ GCKS Identifiers are\n   specified as PAD entry IDs in Section 4.4.3.1
          of RFC 4301 and follow\n   the matching rules described therein.\n"
        title: 4.1.3.1.  GCKS Identifiers
      - contents:
        - "4.1.3.2.  GCKS Peer Authentication Data\n   Once a GPAD entry is located,
          it is necessary to verify the asserted\n   identity, i.e., to authenticate
          the asserted GCKS Identifier.  PAD\n   authentication data types and semantics
          specified in Section 4.4.3.2\n   of RFC 4301 are used to authenticate a
          GCKS.\n   See GDOI [RFC3547] and GSAKMP [RFC4535] for details of how a GKM\n
          \  protocol performs peer authentication using certificates and\n   pre-shared
          secrets.\n"
        title: 4.1.3.2.  GCKS Peer Authentication Data
      - contents:
        - "4.1.3.3.  Group Identifier Authorization Data\n   A Group Identifier is
          used by a GKM protocol to identify a particular\n   group to a GCKS.  A
          GPAD entry includes a Group Identifier to\n   indicate that the GKCS Identifiers
          in the GPAD entry are authorized\n   to act as a GCKS for the group.\n   The
          Group Identifier is an opaque byte string of IKE ID type Key ID\n   that
          identifies a secure multicast group.  The Group Identifier byte\n   string
          MUST be at least four bytes long and less than 256 bytes long.\n   IKE ID
          types other than Key ID MAY be supported.\n"
        title: 4.1.3.3.  Group Identifier Authorization Data
      - contents:
        - "4.1.3.4.  IPsec SA Traffic Selector Authorization Data\n   Once a GCKS
          is authenticated, the GCKS delivers IPsec SA policy to\n   the Group Member.
          \ Before the Group Member accepts the IPsec SA\n   Policy, the source and
          destination traffic selectors of the SA are\n   compared to a set of authorized
          data flows.  Each data flow includes\n   a set of authorized source traffic
          selectors and a set of authorized\n   destination traffic selectors.  Traffic
          selectors are represented as\n   a set of IPv4 and/or IPv6 address ranges.
          \ (A peer may be authorized\n   for both address types, so there MUST be
          provision for both v4 and v6\n   address ranges.)\n"
        title: 4.1.3.4.  IPsec SA Traffic Selector Authorization Data
      - contents:
        - "4.1.3.5.  How the GPAD Is Used\n   When a GKM protocol registration exchange
          is triggered, the Group\n   Member and GCKS each assert their identity as
          a part of the exchange.\n   Each GKM protocol registration exchange MUST
          use the asserted ID to\n   locate an identity in the GPAD.  The GPAD entry
          specifies the\n   authentication method to be employed for the identified
          GCKS.  The\n   entry also specifies the authentication data that will be
          used to\n   verify the asserted identity.  This data is employed in conjunction\n
          \  with the specified method to authenticate the GCKS before accepting\n
          \  any group policy from the GCKS.\n   During the GKM protocol registration,
          a Group Member includes a Group\n   Identifier.  Before presenting that
          Group Identifier to the GCKS, a\n   Group Member verifies that the GPAD
          entry for authenticated GCKS GPAD\n   entry includes the Group Identifier.
          \ This ensures that the GCKS is\n   authorized to provide policy for the
          Group.\n   When IPsec SA policy is received, each data flow is compared
          to the\n   data flows in the GPAD entry.  The Group Member accepts policy\n
          \  matching a data flow.  Policy not matching a data flow is discarded,\n
          \  and the reason SHOULD be recorded in the audit log.\n   A GKM protocol
          may distribute IPsec SA policy to IPsec devices that\n   have previously
          registered with it.  The method of distribution is\n   part of the GKM protocol
          and is outside the scope of this memo.  When\n   the IPsec device receives
          this new policy, it compares the policy to\n   the data flows in the GPAD
          entry as described above.\n"
        title: 4.1.3.5.  How the GPAD Is Used
      title: 4.1.3.  Group Peer Authorization Database (GPAD)
    title: 4.1.  Major IPsec Databases
  - contents:
    - "4.2.  Group Security Association (GSA)\n   An IPsec implementation supporting
      these extensions will support a\n   number of Security Associations: one or
      more IPsec SAs plus one or\n   more GKM SAs used to download the parameters
      that are used to create\n   IPsec SAs.  These SAs are collectively referred
      to as a Group\n   Security Association (GSA)  [RFC3740].\n"
    - contents:
      - "4.2.1.  Concurrent IPsec SA Life Spans and Re-key Rollover\n   During a secure
        multicast group's lifetime, multiple IPsec Group\n   Security Associations
        can exist concurrently.  This occurs\n   principally due to two reasons:\n
        \  - There are multiple Group Senders authorized in the group, each with\n
        \    its own IPsec SA, which maintains anti-replay state.  A group that\n
        \    does not rely on IP security anti-replay services can share one\n     IPsec
        SA for all of its Group Senders.\n   - The life spans of a Group Sender's
        two (or more) IPsec SAs are\n     allowed to overlap in time so that there
        is continuity in the\n     multicast data stream across group re-key events.
        \ This capability\n     is referred to as \"re-key rollover continuity\".\n
        \  The re-key continuity rollover algorithm depends on an IPsec SA\n   management
        interface between the GKM subsystem and the IPsec\n   subsystem.  The IPsec
        subsystem MUST provide management interface\n   mechanisms for the GKM subsystem
        to add IPsec SAs and to delete IPsec\n   SAs.  For illustrative purposes,
        this text defines the re-key\n   rollover continuity algorithm in terms of
        two timer parameters that\n   govern IPsec SA life spans relative to the start
        of a group re-key\n   event.  However, it should be emphasized that the GKM
        subsystem\n   interprets the group's security policy to direct the correct
        timing\n   of IPsec SA activation and deactivation.  A given group policy
        may\n   choose timer values that differ from those recommended by this text.\n
        \  The two re-key rollover continuity timer parameters are:\n   1. Activation
        Time Delay (ATD) - The ATD defines how long after the\n      start of a re-key
        event to activate new IPsec SAs.  The ATD\n      parameter is expressed in
        units of seconds.  Typically, the ATD\n      parameter is set to the maximum
        time it takes to deliver a\n      multicast message from the GCKS to all of
        the group's members.\n      For a GCKS that relies on a Reliable Multicast
        Transport Protocol\n      (RMTP), the ATD parameter could be set equal to
        the RTMP's maximum\n      error recovery time.  When an RMTP is not present,
        the ATD\n      parameter might be set equal to the network's maximum multicast\n
        \     message delivery latency across all of the group's endpoints.  The\n
        \     ATD is a GKM group policy parameter.  This value SHOULD be\n      configurable
        at the Group Owner management interface on a per\n      group basis.\n   2.
        Deactivation Time Delay (DTD) - The DTD defines how long after the\n      start
        of a re-key event to deactivate those IPsec SAs that are\n      destroyed
        by the re-key event.  The purpose of the DTD parameter\n      is to minimize
        the residual exposure of a group's keying material\n      after a re-key event
        has retired that keying material.  The DTD is\n      independent of, and should
        not to be confused with, the IPsec SA\n      soft lifetime attribute.  The
        DTD parameter is expressed in units\n      of seconds.  Typically, the DTD
        parameter would be set to the ADT\n      plus the maximum time it takes to
        deliver a multicast message from\n      the Group Sender to all of the group's
        members.  For a Group\n      Sender that relies on an RMTP, the DTD parameter
        could be set\n      equal to ADT plus the RMTP's maximum error recovery time.
        \ When an\n      RMTP is not present, the DTD parameter might be set equal
        to ADT\n      plus the network's maximum multicast message delivery latency\n
        \     across all of the group's endpoints.  A GKM subsystem MAY\n      implement
        the DTD as a group security policy parameter.  If a GKM\n      subsystem does
        not implement the DTD parameter, then other group\n      security policy mechanisms
        MUST determine when to deactivate an\n      IPsec SA.\n   Each group re-key
        multicast message sent by a GCKS signals the start\n   of a new Group Sender
        IPsec SA time epoch, with each such epoch\n   having an associated set of
        two IPsec SAs.  Note that this document\n   refers to re-key mechanisms as
        being multicast because of the\n   inherent scalability of IP multicast distribution.
        \ However, there is\n   no particular reason that re-keying mechanisms must
        be multicast.\n   For example, [ZLLY03] describes a method of re-key employing
        both\n   unicast and multicast messages.\n   The group membership interacts
        with these IPsec SAs as follows:\n   - As a precursor to the Group Sender
        beginning its re-key rollover\n     continuity processing, the GCKS periodically
        multicasts a Re-Key\n     Event (RKE) message to the group.  The RKE multicast
        MAY contain\n     group policy directives, new IPsec SA policy, and group
        keying\n     material.  In the absence of an RMTP, the GCKS may re-transmit
        the\n     RKE a policy-defined number of times to improve the availability
        of\n     re-key information.  The GKM subsystem starts the ATD and DTD\n     timers
        after it receives the last RKE re-transmission.\n   - The GKM subsystem interprets
        the RKE multicast to configure the\n     group's GSPD/SAD with the new IPsec
        SAs.  Each IPsec SA that\n     replaces an existing SA is called a \"leading
        edge\" IPsec SA.  The\n     leading edge IPsec SA has a new Security Parameter
        Index (SPI) and\n     its associated keying material, which keys it.  For
        a time period\n     of ATD seconds after the GCKS multicasts the RKE, a Group
        Sender\n     does not yet transmit data using the leading edge IPsec SA.\n
        \    Meanwhile, other Group Members prepare to use this IPsec SA by\n     installing
        the leading edge IPsec SAs to their respective GSPD/SAD.\n   - After waiting
        for the ATD period, such that all of the Group\n     Members have received
        and processed the RKE message, the GKM\n     subsystem directs the Group Sender
        to begin to transmit using the\n     leading edge IPsec SA with its data encrypted
        by the new keying\n     material.  Only authorized Group Members can decrypt
        these IPsec SA\n     multicast transmissions.\n   - The Group Sender's \"trailing
        edge\" SA is the oldest Security\n     Association in use by the group for
        that sender.  All authorized\n     Group Members can receive and decrypt data
        for this SA, but the\n     Group Sender does not transmit new data using the
        trailing edge\n     IPsec SA after it has transitioned to the leading edge
        IPsec SA.\n     The trailing edge IPsec SA is deleted by the group's GKM subsystems\n
        \    after the DTD time period has elapsed since the RKE transmission.\n   This
        re-key rollover strategy allows the group to drain its\n   in-transit datagrams
        from the network while transitioning to the\n   leading edge IPsec SA.  Staggering
        the roles of each respective IPsec\n   SA as described above improves the
        group's synchronization even when\n   there are high network propagation delays.
        \ Note that due to group\n   membership joins and leaves, each Group Sender
        IPsec SA time epoch\n   may have a different group membership set.\n   It
        is a group policy decision whether the re-key event transition\n   between
        epochs provides forward and backward secrecy.  The group's\n   re-key protocol
        keying material and algorithm (e.g., Logical Key\n   Hierarchy; refer to [RFC2627]
        and Appendix A of [RFC4535]) enforces\n   this policy.  Implementations MAY
        offer a Group Owner management\n   interface option to enable/disable re-key
        rollover continuity for a\n   particular group.  This specification requires
        that a GKM/IPsec\n   implementation MUST support at least two concurrent IPsec
        SAs per\n   Group Sender as well as this re-key rollover continuity algorithm.\n"
      title: 4.2.1.  Concurrent IPsec SA Life Spans and Re-key Rollover
    title: 4.2.  Group Security Association (GSA)
  - contents:
    - "4.3.  Data Origin Authentication\n   As defined in [RFC4301], data origin authentication
      is a security\n   service that verifies the identity of the claimed source of
      data.  A\n   Message Authentication Code (MAC) is often used to achieve data\n
      \  origin authentication for connections shared between two parties.\n   However,
      typical MAC authentication methods using a single shared\n   secret are not
      sufficient to provide data origin authentication for\n   groups with more than
      two parties.  With a MAC algorithm, every Group\n   Member can use the MAC key
      to create a valid MAC tag, whether or not\n   they are the authentic originator
      of the group application's data.\n   When the property of data origin authentication
      is required for an\n   IPsec SA shared by more than two parties, an authentication
      transform\n   where the receiver is assured that the sender generated that message\n
      \  should be used.  Two possible algorithms are Timed Efficient Stream\n   Loss-Tolerant
      Authentication (TESLA) [RFC4082] or RSA digital\n   signature [RFC4359].\n   In
      some cases (e.g., digital signature authentication transforms),\n   the processing
      cost of the algorithm is significantly greater than a\n   Hashed Message Authentication
      Code (HMAC) authentication method.  To\n   protect against denial-of-service
      attacks from a device that is not\n   authorized to join the group, the IPsec
      SA using this algorithm may\n   be encapsulated with an IPsec SA using a MAC
      authentication\n   algorithm.  However, doing so requires the packet to be sent
      across\n   the IPsec boundary a second time for additional outbound processing\n
      \  on the Group Sender (see Section 5.1 of [RFC4301]) and a second time\n   for
      inbound processing on Group Receivers (see Section 5.2 of\n   [RFC4301]).  This
      use of AH or ESP encapsulated within AH or ESP\n   accommodates the constraint
      that AH and ESP define an Integrity Check\n   Value (ICV) for only a single
      authenticator transform.\n"
    title: 4.3.  Data Origin Authentication
  - contents:
    - '4.4.  Group SA and Key Management

      '
    - contents:
      - "4.4.1.  Co-Existence of Multiple Key Management Protocols\n   Often, the
        GKM subsystem will be introduced to an existent IPsec\n   subsystem as a companion
        key management protocol to IKEv2 [RFC4306].\n   A fundamental GKM protocol
        IP security subsystem requirement is that\n   both the GKM protocol and IKEv2
        can simultaneously share access to a\n   common Group Security Policy Database
        and Security Association\n   Database.  The mechanisms that provide mutually
        exclusive access to\n   the common GSPD/SAD data structures are a local matter.
        \ This\n   includes the GSPD-O cache and the GSPD-I cache.  However,\n   implementers
        should note that IKEv2 SPI allocation is entirely\n   independent from GKM
        SPI allocation because Group Security\n   Associations are qualified by a
        destination multicast IP address and\n   may optionally have a source IP address
        qualifier.  See Section 2.1\n   of [RFC4303] for further explanation.\n   The
        Peer Authorization Database does require explicit coordination\n   between
        the GKM protocol and IKEv2.  Section 4.1.3 describes these\n   interactions.\n"
      title: 4.4.1.  Co-Existence of Multiple Key Management Protocols
    title: 4.4.  Group SA and Key Management
  title: 4.  Security Association
- contents:
  - "5.  IP Traffic Processing\n   Processing of traffic follows Section 5 of [RFC4301],
    with the\n   additions described below when these IP multicast extensions are\n
    \  supported.\n"
  - contents:
    - "5.1.  Outbound IP Traffic Processing\n   If an IPsec SA is marked as supporting
      tunnel mode with address\n   preservation (as described in Section 3.1), either
      or both of the\n   outer header source or destination addresses are marked as
      being\n   preserved.\n   Header construction for tunnel mode is described in
      Section 5.1.2 of\n   RFC 4301.  The first bullet of that section is amended
      as follows:\n         o If address preservation is not marked in the SAD entry
      for\n           either the outer IP header Source Address or Destination\n           Address,
      the outer IP header Source Address and Destination\n           Address identify
      the \"endpoints\" of the tunnel (the\n           encapsulator and decapsulator).
      \ If address preservation is\n           marked for the IP header Source Address,
      it is copied from\n           the inner IP header Source Address.  If address
      preservation\n           is marked for the IP header Destination Address, it
      is copied\n           from the inner IP header Destination Address.  The inner
      IP\n           header Source Address and Destination Addresses identify the\n
      \          original sender and recipient of the datagram (from the\n           perspective
      of this tunnel), respectively.  Address\n           preservation MUST NOT be
      marked when the IP version of the\n           encapsulating header and IP version
      of the inner header do\n           not match.\n   Note (3), regarding construction
      of tunnel addresses in Section\n   5.1.2.1 of RFC 4301, is amended as follows.
      (Note: for brevity, Note\n   (3) of RFC 4301 is not reproduced in its entirety.)\n
      \        (3) Unless marked for address preservation, Local and Remote\n             addresses
      depend on the SA, which is used to determine the\n             Remote address,
      which in turn determines which Local\n             address (net interface) is
      used to forward the packet.  If\n             address preservation is marked
      for the Local address, it is\n             copied from the inner IP header.
      \ If address preservation\n             is marked for the Remote address, that
      address is copied\n             from the inner IP header.\n"
    title: 5.1.  Outbound IP Traffic Processing
  - contents:
    - "5.2.  Inbound IP Traffic Processing\n   IPsec-protected packets generated by
      an IPsec device supporting these\n   multicast extensions may (depending on
      its GSPD policy) populate an\n   outer tunnel header with a destination address
      such that it is not\n   addressed to an IPsec device.  This requires an IPsec
      device\n   supporting these multicast extensions to accept and process IP\n
      \  traffic that is not addressed to the IPsec device itself.  The\n   following
      additions to IPsec inbound IP traffic processing are\n   necessary.\n   For
      compatibility with RFC 4301, the phrase \"addressed to this\n   device\" is
      taken to mean packets with a unicast destination address\n   belonging to the
      system itself, and also multicast packets that are\n   received by the system
      itself.  However, multicast packets not\n   received by the IPsec device are
      not considered addressed to this\n   device.\n   The discussion of processing
      inbound IP Traffic described in Section\n   5.2 of RFC 4301 is amended as follows.\n
      \  The first dash in item 2 is amended as follows:\n         - If the packet
      appears to be IPsec protected and it is\n           addressed to this device,
      or appears to be IPsec protected\n           and is addressed to a multicast
      group, an attempt is made to\n           map it to an active SA via the SAD.
      \ Note that the device may\n           have multiple IP addresses that may be
      used in the SAD\n           lookup, e.g., in the case of protocols such as SCTP.\n
      \  A new item is added to the list between items 3a and 3b to describe\n   processing
      of IPsec packets with destination address preservation\n   applied:\n         3aa.
      If the packet is addressed to a multicast group and AH or\n              ESP
      is specified as the protocol, the packet is looked up\n              in the
      SAD.  Use the SPI plus the destination or SPI plus\n              destination
      and source addresses, as specified in Section\n              4.1.  If there
      is no match, the packet is directed to\n              SPD-I lookup.  Note that
      if the IPsec device is a security\n              gateway, and the SPD-I policy
      is to BYPASS the packet, a\n              subsequent security gateway along
      the routed path of the\n              multicast packet may decrypt the packet.\n
      \  Figure 3 in RFC 4301 is updated to show the new processing path\n   defined
      in item 3aa.\n                        Unprotected Interface\n                                 |\n
      \                                V\n                              +-----+   IPsec
      protected\n          ------------------->|Demux|--------------------+\n          |
      \                  +-----+                    |\n          |                      |
      \                      |\n          |            Not IPsec |                       |\n
      \         |                      |  IPsec protected, not |\n          |                      V
      \ addressed to device, |\n          |     +-------+    +---------+ and not in
      SAD  |\n          |     |DISCARD|<---|SPD-I (*)|<------------+   |\n          |
      \    +-------+    +---------+             |   |\n          |                   |
      \                     |   |\n          |                   |-----+                |
      \  |\n          |                   |     |                |   |\n          |
      \                  |     V                |   |\n          |                   |
      \ +------+            |   |\n          |                   |  | ICMP |            |
      \  |\n          |                   |  +------+            |   |\n          |
      \                  |                      |   V\n       +---------+            |
      \                  +-----------+\n   ....|SPD-O (*)|............|...................|PROCESS(**)|...IPsec\n
      \      +---------+            |                   | (AH/ESP)  | Boundary\n          ^
      \                  |                   +-----------+\n          |                   |
      \      +---+              |\n          |            BYPASS |   +-->|IKE|              |\n
      \         |                   |   |   +---+              |\n          |                   V
      \  |                      V\n          |               +----------+          +---------+
      \  +----+\n          |--------<------|Forwarding|<---------|SAD Check|-->|ICMP|\n
      \           nested SAs    +----------+          | (***)   |   +----+\n                                |
      \              +---------+\n                                V\n                        Protected
      Interface\n             Figure 1.  Processing Model for Inbound Traffic\n                         (amending
      Figure 3 of RFC 4301)\n   The discussion of processing inbound IP traffic in
      Section 5.2 of RFC\n   4301 is amended to insert a new item 6 as follows.\n
      \        6. If an IPsec SA is marked as supporting tunnel mode with\n            address
      preservation (as described in Section 3.1), the\n            marked address(es)
      (i.e., source and/or destination\n            address(es)) in the outer IP header
      MUST be verified to be\n            the same value(s) as in the inner IP header.
      \ If the\n            addresses are not consistent, the IPsec system MUST discard\n
      \           the packet and treat the inconsistency as an auditable\n            event.\n"
    title: 5.2.  Inbound IP Traffic Processing
  title: 5.  IP Traffic Processing
- contents:
  - "6.  Security Considerations\n   The IP security multicast extensions defined
    by this specification\n   build on the unicast-oriented IP security architecture
    [RFC4301].\n   Consequently, this specification inherits many of RFC 4301's security\n
    \  considerations, and the reader is advised to review it as companion\n   guidance.\n"
  - contents:
    - "6.1.  Security Issues Solved by IPsec Multicast Extensions\n   The IP security
      multicast extension service provides the following\n   network layer mechanisms
      for secure group communications:\n   - Confidentiality using a group shared
      encryption key.\n   - Group source authentication and integrity protection using
      a group\n     shared authentication key.\n   - Group Sender data origin authentication
      using a digital signature,\n     TESLA, or other mechanism.\n   - Anti-replay
      protection for a limited number of Group Senders using\n     the ESP (or AH)
      sequence number facility.\n   - Filtering of multicast transmissions identified
      with a source\n     address of systems that are not authorized by group policy
      to be\n     Group Senders.  This feature leverages the IPsec stateless firewall\n
      \    service (i.e., SPD-I and/or SDP-O entries with a packet disposition\n     specified
      as DISCARD).\n   In support of the above services, this specification enhances
      the\n   definition of the SPD, PAD, and SAD databases to facilitate the\n   automated
      group key management of large-scale cryptographic groups.\n"
    title: 6.1.  Security Issues Solved by IPsec Multicast Extensions
  - contents:
    - "6.2.  Security Issues Not Solved by IPsec Multicast Extensions\n   As noted
      in Section 2.2. of RFC 4301, it is out of the scope of this\n   architecture
      to defend the group's keys or its application data\n   against attacks targeting
      vulnerabilities of the operating\n   environment in which the IPsec implementation
      executes.  However, it\n   should be noted that the risk of attacks originating
      by an adversary\n   in the network is magnified to the extent that the group
      keys are\n   shared across a large number of systems.\n   The security issues
      that are left unsolved by the IPsec multicast\n   extension service divide into
      two broad categories: outsider attacks\n   and insider attacks.\n"
    - contents:
      - "6.2.1.  Outsider Attacks\n   The IPsec multicast extension service does not
        defend against an\n   adversary outside of the group who has:\n   - the capability
        to launch a multicast, flooding denial-of-service\n     attack against the
        group, originating from a system whose IPsec\n     subsystem does not filter
        the unauthorized multicast transmissions.\n   - compromised a multicast router,
        allowing the adversary to corrupt\n     or delete all multicast packets destined
        for the group endpoints\n     downstream from that router.\n   - captured
        a copy of an earlier multicast packet transmission and\n     then replayed
        it to a group that does not have the anti-replay\n     service enabled.  Note
        that for a large-scale, any-source multicast\n     group, it is impractical
        for the Group Receivers to maintain an\n     anti-replay state for every potential
        Group Sender.  Group policies\n     that require anti-replay protection for
        a large-scale, any-source\n     multicast group should consider an application
        layer multicast\n     protocol that can detect and reject replays.\n"
      title: 6.2.1.  Outsider Attacks
    - contents:
      - "6.2.2.  Insider Attacks\n   For large-scale groups, the IP security multicast
        extensions are\n   dependent on an automated Group Key Management protocol
        to correctly\n   authenticate and authorize trustworthy members in compliance
        to the\n   group's policies.  Inherent in the concept of a cryptographic group\n
        \  is a set of one or more shared secrets entrusted to all of the Group\n
        \  Members.  Consequently, the service's security guarantees are no\n   stronger
        than the weakest member admitted to the group by the GKM\n   system.  The
        GKM system is responsible for responding to compromised\n   Group Member detection
        by executing a re-key procedure.  The GKM\n   re-keying protocol will expel
        the compromised Group Members and\n   distribute new group keying material
        to the trusted members.\n   Alternatively, the group policy may require the
        GKM system to\n   terminate the group.\n   In the event that an adversary
        has been admitted into the group by\n   the GKM system, the following attacks
        are possible and can not be\n   solved by the IPsec multicast extension service:\n
        \  - The adversary can disclose the secret group key or group data to an\n
        \    unauthorized party outside of the group.  After a group key or data\n
        \    compromise, cryptographic methods such as traitor tracing or\n     watermarking
        can assist in the forensics process.  However, these\n     methods are outside
        the scope of this specification.\n   - The insider adversary can forge packet
        transmissions that appear to\n     be from a peer Group Member.  To defend
        against this attack, for\n     those Group Sender transmissions that merit
        the overhead, the group\n     policy can require the Group Sender to multicast
        packets using the\n     data origin authentication service.\n   - If the group's
        data origin authentication service uses digital\n     signatures, then the
        insider adversary can launch a computational\n     resource denial-of-service
        attack by multicasting bogus signed\n     packets.\n"
      title: 6.2.2.  Insider Attacks
    title: 6.2.  Security Issues Not Solved by IPsec Multicast Extensions
  - contents:
    - '6.3.  Implementation or Deployment Issues that Impact Security

      '
    - contents:
      - "6.3.1.  Homogeneous Group Cryptographic Algorithm Capabilities\n   The IP
        security multicast extensions service can not defend against a\n   poorly
        considered group security policy that allows a weaker\n   cryptographic algorithm
        simply because all of the group's endpoints\n   are known to support it.  Unfortunately,
        large-scale groups can be\n   difficult to upgrade to the current best-in-class
        cryptographic\n   algorithms.  One possible approach to solving many of these
        problems\n   is the deployment of composite groups that can straddle heterogeneous\n
        \  groups [COMPGRP].  A standard solution for heterogeneous groups is an\n
        \  activity for future standardization.  In the interim, synchronization\n
        \  of a group's cryptographic capabilities could be achieved using a\n   secure
        and scalable software distribution management tool.\n"
      title: 6.3.1.  Homogeneous Group Cryptographic Algorithm Capabilities
    - contents:
      - "6.3.2.  Groups that Span Two or More Security Policy Domains\n   Large-scale
        groups may span multiple legal jurisdictions (e.g.,\n   countries) that enforce
        limits on cryptographic algorithms or key\n   strengths.  As currently defined,
        the IPsec multicast extension\n   service requires a single group policy per
        group.  As noted above,\n   this problem remains an area for future standardization.\n"
      title: 6.3.2.  Groups that Span Two or More Security Policy Domains
    - contents:
      - "6.3.3.  Source-Specific Multicast Group Sender Transient Locators\n   A Source
        Specific Multicast (SSM) Group Sender's source IP address\n   can dynamically
        change during a secure multicast group's lifetime.\n   Examples of the events
        that can cause the Group Sender's source\n   address to change include but
        are not limited to NAT, a mobility-\n   induced change in the care-of-address,
        and a multi-homed host using a\n   new IP interface.  The change in the Group
        Sender's source IP address\n   will cause GSPD entries related to that multicast
        group to become out\n   of date with respect to the group's multicast routing
        state.  In the\n   worst case, there is a risk that the Group Sender's data
        originating\n   from a new source address will be BYPASS processed by a security\n
        \  gateway.  If this scenario was not anticipated, then it could leak\n   the
        group's data.  Consequently, it is recommended that SSM secure\n   multicast
        groups have a default DISCARD policy for all unauthorized\n   Group Sender
        source IP addresses for the SSM group's destination IP\n   address.\n"
      title: 6.3.3.  Source-Specific Multicast Group Sender Transient Locators
    title: 6.3.  Implementation or Deployment Issues that Impact Security
  title: 6.  Security Considerations
- contents:
  - "7.  Acknowledgements\n   The authors wish to thank Steven Kent, Russ Housley,
    Pasi Eronen, and\n   Tero Kivinen for their helpful comments.\n   The \"Guidelines
    for Writing RFC Text on Security Considerations\"\n   [RFC3552] was consulted
    to develop the Security Considerations\n   section of this memo.\n"
  title: 7.  Acknowledgements
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [RFC1112] Deering, S., \"Host extensions for
      IP multicasting\", STD 5,\n             RFC 1112, August 1989.\n   [RFC2119]
      Bradner, S., \"Key words for use in RFCs to Indicate\n             Requirement
      Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC4301] Kent, S. and K. Seo, \"Security
      Architecture for the\n             Internet Protocol\", RFC 4301, December 2005.\n
      \  [RFC4302] Kent, S., \"IP Authentication Header\", RFC 4302, December\n             2005.\n
      \  [RFC4303] Kent, S., \"IP Encapsulating Security Payload (ESP)\", RFC\n             4303,
      December 2005.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [COMPGRP] Gross G. and H. Cruickshank, \"Multicast
      IP Security\n             Composite Cryptographic Groups\", Work in Progress,
      February\n             2007.\n   [RFC2526] Johnson, D. and S. Deering, \"Reserved
      IPv6 Subnet Anycast\n             Addresses\", RFC 2526, March 1999.\n   [RFC2627]
      Wallner, D., Harder, E., and R. Agee, \"Key Management for\n             Multicast:
      Issues and Architectures\", RFC 2627, June 1999.\n   [RFC2914] Floyd, S., \"Congestion
      Control Principles\", BCP 41, RFC\n             2914, September 2000.\n   [RFC3171]
      Albanna, Z., Almeroth, K., Meyer, D., and M. Schipper,\n             \"IANA
      Guidelines for IPv4 Multicast Address Assignments\",\n             BCP 51, RFC
      3171, August 2001.\n   [RFC3306] Haberman, B. and D. Thaler, \"Unicast-Prefix-based
      IPv6\n             Multicast Addresses\", RFC 3306, August 2002.\n   [RFC3307]
      Haberman, B., \"Allocation Guidelines for IPv6 Multicast\n             Addresses\",
      RFC 3307, August 2002.\n   [RFC3376] Cain, B., Deering, S., Kouvelas, I., Fenner,
      B., and A.\n             Thyagarajan, \"Internet Group Management Protocol,
      Version\n             3\", RFC 3376, October 2002.\n   [RFC3547] Baugher, M.,
      Weis, B., Hardjono, T., and H. Harney, \"The\n             Group Domain of Interpretation\",
      RFC 3547, July 2003.\n   [RFC3552] Rescorla, E. and B. Korver, \"Guidelines
      for Writing RFC\n             Text on Security Considerations\", BCP 72, RFC
      3552, July\n             2003.\n   [RFC3569] Bhattacharyya, S., Ed., \"An Overview
      of Source-Specific\n             Multicast (SSM)\", RFC 3569, July 2003.\n   [RFC3740]
      Hardjono, T. and B. Weis, \"The Multicast Group Security\n             Architecture\",
      RFC 3740, March 2004.\n   [RFC3810] Vida, R., Ed., and L. Costa, Ed., \"Multicast
      Listener\n             Discovery Version 2 (MLDv2) for IPv6\", RFC 3810, June
      2004.\n   [RFC3940] Adamson, B., Bormann, C., Handley, M., and J. Macker,\n
      \            \"Negative-acknowledgment (NACK)-Oriented Reliable Multicast\n
      \            (NORM) Protocol\", RFC 3940, November 2004.\n   [RFC4046] Baugher,
      M., Canetti, R., Dondeti, L., and F. Lindholm,\n             \"Multicast Security
      (MSEC) Group Key Management\n             Architecture\", RFC 4046, April 2005.\n
      \  [RFC4082] Perrig, A., Song, D., Canetti, R., Tygar, J., and B.\n             Briscoe,
      \"Timed Efficient Stream Loss-Tolerant\n             Authentication (TESLA):
      Multicast Source Authentication\n             Transform Introduction\", RFC
      4082, June 2005.\n   [RFC4306] Kaufman, C., Ed., \"Internet Key Exchange (IKEv2)
      Protocol\",\n             RFC 4306, December 2005.\n   [RFC4359] Weis, B., \"The
      Use of RSA/SHA-1 Signatures within\n             Encapsulating Security Payload
      (ESP) and Authentication\n             Header (AH)\", RFC 4359, January 2006.\n
      \  [RFC4535] Harney, H., Meth, U., Colegrove, A., and G. Gross, \"GSAKMP:\n
      \            Group Secure Association Key Management Protocol\", RFC\n             4535,
      June 2006.\n   [RFC4601] Fenner, B., Handley, M., Holbrook, H., and I. Kouvelas,\n
      \            \"Protocol Independent Multicast - Sparse Mode (PIM-SM):\n             Protocol
      Specification (Revised)\", RFC 4601, August 2006.\n   [RFC4891] Graveman, R.,
      Parthasarathy, M., Savola, P., and H.\n             Tschofenig, \"Using IPsec
      to Secure IPv6-in-IPv4 Tunnels\",\n             RFC 4891, May 2007.\n   [ZLLY03]
      \ Zhang, X., et al., \"Protocol Design for Scalable and\n             Reliable
      Group Rekeying\", IEEE/ACM Transactions on\n             Networking (TON), Volume
      11, Issue 6, December 2003.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Appendix A.  Multicast Application Service Models\n   The vast majority of secure
    multicast applications can be catalogued\n   by their service model and accompanying
    intra-group communication\n   patterns.  Both the Group Key Management (GKM) subsystem
    and the\n   IPsec subsystem MUST be able to configure the GSPD/SAD security\n
    \  policies to match these dominant usage scenarios. The GSPD/SAD\n   policies
    MUST include the ability to configure both Any-Source\n   Multicast groups and
    Source-Specific Multicast groups for each of\n   these service models.  The GKM
    subsystem management interface MAY\n   include mechanisms to configure the security
    policies for service\n   models not identified by this standard.\n"
  - contents:
    - "A.1.  Unidirectional Multicast Applications\n   Multimedia content-delivery
      multicast applications that do not have\n   congestion notification or re-transmission
      error-recovery mechanisms\n   are inherently unidirectional.  RFC 4301 only
      defines bi-directional\n   unicast traffic selectors (as per RFC 4301, Sections
      4.4.1 and 5.1\n   with respect to traffic selector directionality).  The GKM
      subsystem\n   requires that the IPsec subsystem MUST support unidirectional
      SPD\n   entries, which cause a Group Security Association (GSA) to be\n   installed
      in only one direction.  Multicast applications that have\n   only one Group
      Member authorized to transmit can use this type of\n   Group Security Association
      to enforce that group policy.  In the\n   inverse direction, the GSA does not
      have an SAD entry, and the GSPD\n   configuration is optionally set up to discard
      unauthorized attempts\n   to transmit unicast or multicast packets to the group.\n
      \  The GKM subsystem's management interface MUST have the ability to set\n   up
      a GKM subsystem group having a unidirectional GSA security policy.\n"
    title: A.1.  Unidirectional Multicast Applications
  - contents:
    - "A.2.  Bi-Directional Reliable Multicast Applications\n   Some secure multicast
      applications are characterized as one Group\n   Sender to many receivers but
      have inverse data flows required by a\n   reliable multicast transport protocol
      (e.g., NORM).  In such\n   applications, the data flow from the sender is multicast
      and the\n   inverse flow from the Group's Receivers is unicast to the sender.\n
      \  Typically, the inverse data flows carry error repair requests and\n   congestion
      control status.\n   For such applications, it is advantageous to use the same
      IPsec SA\n   for protection of both unicast and multicast data flows.  This
      does\n   introduce one risk: the IKEv2 application may choose the same SPI for\n
      \  receiving unicast traffic as the GCKS chooses for a group IPsec SA\n   covering
      unicast traffic.  If both SAs are installed in the SAD, the\n   SA lookup may
      return the wrong SPI as the result of an SA lookup.  To\n   avoid this problem,
      IPsec SAs installed by the GKM SHOULD use the 2-\n   tuple {destination IP address,
      SPI} to identify each IPsec SA.  In\n   addition, the GKM SHOULD use a unicast
      destination IP address that\n   does not match any destination IP address in
      use by an IKEv2 unicast\n   IPsec SA.  For example, suppose a Group Member is
      using both IKEv2\n   and a GKM protocol, and the group security policy requires
      protecting\n   the NORM inverse data flows as described above.  In this case,
      group\n   policy SHOULD allocate and use a unique unicast destination IP\n   address
      representing the NORM Group Sender.  This address would be\n   configured in
      parallel to the Group Sender's existing IP addresses.\n   The GKM subsystems
      at both the NORM Group Sender and Group Receiver\n   endpoints would install
      the IPsec SA, protecting the NORM unicast\n   messages such that the SA lookup
      uses the unicast destination address\n   as well as the SPI.\n   The GSA SHOULD
      use IPsec anti-replay protection service for the\n   sender's multicast data
      flow to the group's Receivers.  Because of\n   the scalability problem described
      in the next section, it is not\n   practical to use the IPsec anti-replay service
      for the unicast\n   inverse flows.  Consequently, in the inverse direction,
      the IPsec\n   anti-replay protection MUST be disabled.  However, the unicast\n
      \  inverse flows can use the group's IPsec group authentication\n   mechanism.
      \ The Group Receiver's GSPD entry for this GSA SHOULD be\n   configured to only
      allow a unicast transmission to the sender node\n   rather than a multicast
      transmission to the whole group.\n   If an ESP digital signature authentication
      is available (e.g., RFC\n   4359), source authentication MAY be used to authenticate
      a receiver\n   node's transmission to the sender.  The GKM protocol MUST define
      a\n   key management mechanism for the Group Sender to validate the\n   asserted
      signature public key of any receiver node without requiring\n   that the sender
      maintain state about every Group Receiver.\n   This multicast application service
      model is RECOMMENDED because it\n   includes congestion control feedback capabilities.
      \ Refer to\n   [RFC2914] for additional background information.\n   The GKM
      subsystem's Group Owner management interface MUST have the\n   ability to set
      up a symmetric GSPD entry and one Group Sender.  The\n   management interface
      SHOULD be able to configure a group to have at\n   least 16 concurrent authorized
      senders, each with their own GSA\n   anti-replay state.\n"
    title: A.2.  Bi-Directional Reliable Multicast Applications
  - contents:
    - "A.3.  Any-To-Many Multicast Applications\n   Another family of secure multicast
      applications exhibits an \"any-to-\n   many\" communications pattern.  A representative
      example of such an\n   application is a videoconference combined with an electronic\n
      \  whiteboard.\n   For such applications, all (or a large subset) of the Group
      Members\n   are authorized multicast senders.  In such service models, creating
      a\n   distinct IPsec SA with anti-replay state for every potential sender\n
      \  does not scale to large groups.  The group SHOULD share one IPsec SA\n   for
      all of its senders.  The IPsec SA SHOULD NOT use the IPsec anti-\n   replay
      protection service for the sender's multicast data flow to the\n   Group Receivers.\n
      \  The GKM subsystem's management interface MUST have the ability to set\n   up
      a group having an Any-To-Many Multicast GSA security policy.\n"
    title: A.3.  Any-To-Many Multicast Applications
  title: Appendix A.  Multicast Application Service Models
- contents:
  - "Appendix B.  ASN.1 for a GSPD Entry\n   This appendix describes an additional
    way to describe GSPD entries,\n   as defined in Section 4.1.1.  It uses ASN.1
    syntax that has been\n   successfully compiled.  This syntax is merely illustrative
    and need\n   not be employed in an implementation to achieve compliance.  The
    GSPD\n   description in Section 4.1.1 is normative.  As shown in Section\n   4.1.1,
    the GSPD updates the SPD and thus this appendix updates the\n   SPD object identifier.\n"
  - contents:
    - "B.1.  Fields Specific to a GSPD Entry\n   The following fields summarize the
      fields of the GSPD that are not\n   present in the SPD.\n   - direction (in
      IPsecEntry)\n   - DirectionFlags\n   - noswap (in SelectorList)\n   - ap-l,
      ap-r (in TunnelOptions)\n"
    title: B.1.  Fields Specific to a GSPD Entry
  - contents:
    - "B.2.  SPDModule\n  SPDModule\n  {iso(1) org (3) dod (6) internet (1) security
      (5) mechanisms (5)\n   ipsec (8) asn1-modules (3) spd-module (1) }\n     DEFINITIONS
      IMPLICIT TAGS ::=\n     BEGIN\n     IMPORTS\n         RDNSequence FROM PKIX1Explicit88\n
      \          { iso(1) identified-organization(3)\n             dod(6) internet(1)
      security(5) mechanisms(5) pkix(7)\n             id-mod(0) id-pkix1-explicit(18)
      } ;\n     -- An SPD is a list of policies in decreasing order of preference\n
      \    SPD ::= SEQUENCE OF SPDEntry\n     SPDEntry ::= CHOICE {\n         iPsecEntry
      \      IPsecEntry,               -- PROTECT traffic\n         bypassOrDiscard
      \ [0] BypassOrDiscardEntry } -- DISCARD/BYPASS\n     IPsecEntry ::= SEQUENCE
      {       -- Each entry consists of\n         name        NameSets OPTIONAL,\n
      \        pFPs        PacketFlags,    -- Populate from packet flags\n                           --
      Applies to ALL of the corresponding\n                           -- traffic selectors
      in the SelectorLists\n         direction   DirectionFlags, -- SA directionality\n
      \        condition   SelectorLists,  -- Policy \"condition\"\n         processing
      \ Processing      -- Policy \"action\"\n         }\n     BypassOrDiscardEntry
      ::= SEQUENCE {\n         bypass      BOOLEAN,        -- TRUE BYPASS, FALSE DISCARD\n
      \        condition   InOutBound }\n     InOutBound ::= CHOICE {\n         outbound
      \   [0] SelectorLists,\n         inbound     [1] SelectorLists,\n         bothways
      \   [2] BothWays }\n     BothWays ::= SEQUENCE {\n         inbound     SelectorLists,\n
      \        outbound    SelectorLists }\n     NameSets ::= SEQUENCE {\n         passed
      \     SET OF Names-R,  -- Matched to IKE ID by\n                                      --
      responder\n         local       SET OF Names-I } -- Used internally by IKE\n
      \                                     -- initiator\n     Names-R ::= CHOICE
      {                   -- IKEv2 IDs\n         dName       RDNSequence,           --
      ID_DER_ASN1_DN\n         fqdn        FQDN,                  -- ID_FQDN\n         rfc822
      \     [0] RFC822Name,        -- ID_RFC822_ADDR\n         keyID       OCTET STRING
      }         -- KEY_ID\n     Names-I ::= OCTET STRING       -- Used internally
      by IKE\n                                    -- initiator\n     FQDN ::= IA5String\n
      \    RFC822Name ::= IA5String\n     PacketFlags ::= BIT STRING {\n                 --
      if set, take selector value from packet\n                 -- establishing SA\n
      \                -- else use value in SPD entry\n         localAddr  (0),\n
      \        remoteAddr (1),\n         protocol   (2),\n         localPort  (3),\n
      \        remotePort (4)  }\n     DirectionFlags ::= BIT STRING {\n                 --
      if set, install SA in the specified\n                 -- direction. symmetric
      policy is\n                 -- represented by setting both bits\n         inbound
      \  (0),\n         outbound  (1)  }\n     SelectorLists ::= SET OF SelectorList\n
      \    SelectorList ::= SEQUENCE {\n         localAddr   AddrList,\n         remoteAddr
      \ AddrList,\n         protocol    ProtocolChoice,\n         noswap      BOOLEAN
      }  -- Do not swap local and remote\n                                -- addresses
      and ports on incoming\n                                -- SPD-S and SPD-I checks\n
      \    Processing ::= SEQUENCE {\n         extSeqNum   BOOLEAN, -- TRUE 64 bit
      counter, FALSE 32 bit\n         seqOverflow BOOLEAN, -- TRUE rekey, FALSE terminate
      & audit\n         fragCheck   BOOLEAN, -- TRUE stateful fragment checking,\n
      \                             -- FALSE no stateful fragment checking\n         lifetime
      \   SALifetime,\n         spi         ManualSPI,\n         algorithms  ProcessingAlgs,\n
      \        tunnel      TunnelOptions OPTIONAL } -- if absent, use\n                                              --
      transport mode\n     SALifetime ::= SEQUENCE {\n         seconds   [0] INTEGER
      OPTIONAL,\n         bytes     [1] INTEGER OPTIONAL }\n     ManualSPI ::= SEQUENCE
      {\n         spi     INTEGER,\n         keys    KeyIDs }\n     KeyIDs ::= SEQUENCE
      OF OCTET STRING\n     ProcessingAlgs ::= CHOICE {\n         ah          [0]
      IntegrityAlgs,  -- AH\n         esp         [1] ESPAlgs}        -- ESP\n     ESPAlgs
      ::= CHOICE {\n         integrity       [0] IntegrityAlgs,       -- integrity
      only\n         confidentiality [1] ConfidentialityAlgs, -- confidentiality\n
      \                                                 -- only\n         both            [2]
      IntegrityConfidentialityAlgs,\n         combined        [3] CombinedModeAlgs
      }\n     IntegrityConfidentialityAlgs ::= SEQUENCE {\n         integrity       IntegrityAlgs,\n
      \        confidentiality ConfidentialityAlgs }\n     -- Integrity Algorithms,
      ordered by decreasing preference\n     IntegrityAlgs ::= SEQUENCE OF IntegrityAlg\n
      \    -- Confidentiality Algorithms, ordered by decreasing preference\n     ConfidentialityAlgs
      ::= SEQUENCE OF ConfidentialityAlg\n     -- Integrity Algorithms\n     IntegrityAlg
      ::= SEQUENCE {\n         algorithm   IntegrityAlgType,\n         parameters
      \ ANY -- DEFINED BY algorithm -- OPTIONAL }\n     IntegrityAlgType ::= INTEGER
      {\n         none              (0),\n         auth-HMAC-MD5-96  (1),\n         auth-HMAC-SHA1-96
      (2),\n         auth-DES-MAC      (3),\n         auth-KPDK-MD5     (4),\n         auth-AES-XCBC-96
      \ (5)\n     --  tbd (6..65535)\n         }\n     -- Confidentiality Algorithms\n
      \    ConfidentialityAlg ::= SEQUENCE {\n         algorithm   ConfidentialityAlgType,\n
      \        parameters  ANY -- DEFINED BY algorithm -- OPTIONAL }\n     ConfidentialityAlgType
      ::= INTEGER {\n         encr-DES-IV64   (1),\n         encr-DES        (2),\n
      \        encr-3DES       (3),\n         encr-RC5        (4),\n         encr-IDEA
      \      (5),\n         encr-CAST       (6),\n         encr-BLOWFISH   (7),\n
      \        encr-3IDEA      (8),\n         encr-DES-IV32   (9),\n         encr-RC4
      \      (10),\n         encr-NULL      (11),\n         encr-AES-CBC   (12),\n
      \        encr-AES-CTR   (13)\n     --  tbd (14..65535)\n         }\n     CombinedModeAlgs
      ::= SEQUENCE OF CombinedModeAlg\n     CombinedModeAlg ::= SEQUENCE {\n         algorithm
      \  CombinedModeType,\n         parameters  ANY -- DEFINED BY algorithm -- }\n
      \                        -- defined outside\n                         -- of
      this document for AES modes.\n     CombinedModeType ::= INTEGER {\n         comb-AES-CCM
      \   (1),\n         comb-AES-GCM    (2)\n     --  tbd (3..65535)\n         }\n
      \    TunnelOptions ::= SEQUENCE {\n         dscp        DSCP,\n         ecn
      \        BOOLEAN,    -- TRUE Copy CE to inner header\n         ap-l        BOOLEAN,
      \   -- TRUE Copy inner IP header\n                                 -- source
      address to outer\n                                 -- IP header source address\n
      \        ap-r        BOOLEAN,    -- TRUE Copy inner IP header\n                                 --
      destination address to outer\n                                 -- IP header
      destination address\n         df          DF,\n         addresses   TunnelAddresses
      }\n     TunnelAddresses ::= CHOICE {\n         ipv4        IPv4Pair,\n         ipv6
      \       [0] IPv6Pair }\n     IPv4Pair ::= SEQUENCE {\n         local       OCTET
      STRING (SIZE(4)),\n         remote      OCTET STRING (SIZE(4)) }\n     IPv6Pair
      ::= SEQUENCE {\n         local       OCTET STRING (SIZE(16)),\n         remote
      \     OCTET STRING (SIZE(16)) }\n     DSCP ::= SEQUENCE {\n         copy      BOOLEAN,
      -- TRUE copy from inner header\n                            -- FALSE do not
      copy\n         mapping   OCTET STRING OPTIONAL} -- points to table\n                                          --
      if no copy\n     DF ::= INTEGER {\n         clear   (0),\n         set     (1),\n
      \        copy    (2) }\n     ProtocolChoice::= CHOICE {\n         anyProt  AnyProtocol,
      \             -- for ANY protocol\n         noNext   [0] NoNextLayerProtocol,
      \ -- has no next layer\n                                            -- items\n
      \        oneNext  [1] OneNextLayerProtocol, -- has one next layer\n                                            --
      item\n         twoNext  [2] TwoNextLayerProtocol, -- has two next layer\n                                            --
      items\n         fragment FragmentNoNext }          -- has no next layer\n                                            --
      info\n     AnyProtocol ::= SEQUENCE {\n         id          INTEGER (0),    --
      ANY protocol\n         nextLayer   AnyNextLayers }\n     AnyNextLayers ::= SEQUENCE
      {      -- with either\n         first       AnyNextLayer,     -- ANY next layer
      selector\n         second      AnyNextLayer }    -- ANY next layer selector\n
      \    NoNextLayerProtocol ::= INTEGER (2..254)\n     FragmentNoNext ::= INTEGER
      (44)   -- Fragment identifier\n     OneNextLayerProtocol ::= SEQUENCE {\n         id
      \         INTEGER (1..254),   -- ICMP, MH, ICMPv6\n         nextLayer   NextLayerChoice
      }   -- ICMP Type*256+Code\n                                         -- MH   Type*256\n
      \    TwoNextLayerProtocol ::= SEQUENCE {\n         id          INTEGER (2..254),
      \  -- Protocol\n         local       NextLayerChoice,    -- Local and\n         remote
      \     NextLayerChoice }   -- Remote ports\n     NextLayerChoice ::= CHOICE {\n
      \        any         AnyNextLayer,\n         opaque      [0] OpaqueNextLayer,\n
      \        range       [1] NextLayerRange }\n     -- Representation of ANY in
      next layer field\n     AnyNextLayer ::= SEQUENCE {\n         start       INTEGER
      (0),\n         end         INTEGER (65535) }\n     -- Representation of OPAQUE
      in next layer field.\n     -- Matches IKE convention\n     OpaqueNextLayer ::=
      SEQUENCE {\n         start       INTEGER (65535),\n         end         INTEGER
      (0) }\n     -- Range for a next layer field\n     NextLayerRange ::= SEQUENCE
      {\n         start       INTEGER (0..65535),\n         end         INTEGER (0..65535)
      }\n     -- List of IP addresses\n     AddrList ::= SEQUENCE {\n         v4List
      \     IPv4List OPTIONAL,\n         v6List      [0] IPv6List OPTIONAL }\n     --
      IPv4 address representations\n     IPv4List ::= SEQUENCE OF IPv4Range\n     IPv4Range
      ::= SEQUENCE {    -- close, but not quite right ...\n         ipv4Start   OCTET
      STRING (SIZE (4)),\n         ipv4End     OCTET STRING (SIZE (4)) }\n     --
      IPv6 address representations\n     IPv6List ::= SEQUENCE OF IPv6Range\n     IPv6Range
      ::= SEQUENCE {    -- close, but not quite right ...\n         ipv6Start   OCTET
      STRING (SIZE (16)),\n         ipv6End     OCTET STRING (SIZE (16)) }\n     END\n"
    title: B.2.  SPDModule
  title: Appendix B.  ASN.1 for a GSPD Entry
- contents:
  - "Authors' Addresses\n   Brian Weis\n   Cisco Systems\n   170 W. Tasman Drive,\n
    \  San Jose, CA 95134-1706\n   USA\n   Phone: +1-408-526-4796\n   EMail: bew@cisco.com\n
    \  George Gross\n   Secure Multicast Networks LLC\n   977 Bates Road\n   Shoreham,
    VT 05770\n   USA\n   Phone: +1-802-897-5339\n   EMail: gmgross@securemulticast.net\n
    \  Dragan Ignjatic\n   Polycom\n   Suite 200\n   3605 Gilmore Way\n   Burnaby,
    BC V5G 4X5\n   Canada\n   Phone: +1-604-453-9424\n   EMail: dignjatic@polycom.com\n"
  title: Authors' Addresses
