- title: __initial_text__
  contents:
  - '         IPv6 Neighbor Discovery (ND) Trust Models and Threats

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2004).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The existing IETF standards specify that IPv6 Neighbor Discovery\
    \ (ND)\n   and Address Autoconfiguration mechanisms may be protected with IPsec\n\
    \   Authentication Header (AH).  However, the current specifications\n   limit\
    \ the security solutions to manual keying due to practical\n   problems faced\
    \ with automatic key management.  This document\n   specifies three different\
    \ trust models and discusses the threats\n   pertinent to IPv6 Neighbor Discovery.\
    \  The purpose of this discussion\n   is to define the requirements for Securing\
    \ IPv6 Neighbor Discovery.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  2\n       1.1. Remarks . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   2.  Previous Work. . . . . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n   3.  Trust Models . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n       3.1. Corporate Intranet Model. . . . . . . . . . . . . . .\
    \ . .  5\n       3.2. Public Wireless Network with an Operator. . . . . . . .\
    \ .  6\n       3.3. Ad Hoc Network. . . . . . . . . . . . . . . . . . . . . .\
    \  7\n   4.  Threats on a (Public) Multi-Access Link. . . . . . . . . . . .  8\n\
    \       4.1. Non router/routing related threats. . . . . . . . . . . .  9\n  \
    \          4.1.1. Neighbor Solicitation/Advertisement Spoofing . . .  9\n    \
    \        4.1.2. Neighbor Unreachability Detection (NUD) failure. . 10\n      \
    \      4.1.3. Duplicate Address Detection DoS Attack . . . . . . 11\n       4.2.\
    \ Router/routing involving threats. . . . . . . . . . . . . 12\n            4.2.1.\
    \ Malicious Last Hop Router. . . . . . . . . . . . . 12\n            4.2.2. Default\
    \ router is 'killed' . . . . . . . . . . . . 13\n            4.2.3. Good Router\
    \ Goes Bad . . . . . . . . . . . . . . . 14\n            4.2.4. Spoofed Redirect\
    \ Message . . . . . . . . . . . . . 14\n            4.2.5. Bogus On-Link Prefix\
    \ . . . . . . . . . . . . . . . 14\n            4.2.6. Bogus Address Configuration\
    \ Prefix . . . . . . . . 15\n            4.2.7. Parameter Spoofing . . . . . .\
    \ . . . . . . . . . . 16\n       4.3. Replay attacks and remotely exploitable\
    \ attacks . . . . . 17\n            4.3.1. Replay attacks . . . . . . . . . .\
    \ . . . . . . . . 17\n            4.3.2. Neighbor Discovery DoS Attack. . . .\
    \ . . . . . . . 18\n       4.4. Summary of the attacks. . . . . . . . . . . .\
    \ . . . . . . 19\n   5.  Security Considerations. . . . . . . . . . . . . . .\
    \ . . . . . 20\n   6.  Acknowledgements . . . . . . . . . . . . . . . . . . .\
    \ . . . . 21\n   7.  Informative References . . . . . . . . . . . . . . . . .\
    \ . . . 21\n   Authors' Addresses . . . . . . . . . . . . . . . . . . . . . .\
    \ . . 22\n   Full Copyright Statement . . . . . . . . . . . . . . . . . . . .\
    \ . 23\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The IPv6 Neighbor Discovery (ND) RFC 2461 [2] and Address\n\
    \   Autoconfiguration RFC 2462 [3] mechanisms are used by nodes in an\n   IPv6\
    \ network to learn the local topology, including the IP to MAC\n   address mappings\
    \ for the local nodes, the IP and MAC addresses of the\n   routers present in\
    \ the local network, and the routing prefixes served\n   by the local routers.\
    \  The current specifications suggest that IPsec\n   AH RFC 2402 [1] may be used\
    \ to secure the mechanisms, but does not\n   specify how.  It appears that using\
    \ current AH mechanisms is\n   problematic due to key management problems [8].\n\
    \   To solve the problem, the Secure Neighbor Discovery (SEND) working\n   group\
    \ was chartered in Fall 2002.  The goal of the working group is\n   to define\
    \ protocol support for securing IPv6 Neighbor Discovery\n   without requiring\
    \ excessive manual keying.\n   The purpose of this document is to define the types\
    \ of networks in\n   which the Secure IPv6 Neighbor Discovery mechanisms are expected\
    \ to\n   work, and the threats that the security protocol(s) must address.  To\n\
    \   fulfill this purpose, this document first defines three different\n   trust\
    \ models, roughly corresponding to secured corporate intranets,\n   public wireless\
    \ access networks, and pure ad hoc networks.  After\n   that, a number of threats\
    \ are discussed in the light of these trust\n   models.  The threat catalog is\
    \ aimed to be exhaustive, but it is\n   likely that some threats are still missing.\
    \  Thus, ideas for new\n   threats to consider are solicited.\n"
- title: 1.1.  Remarks
  contents:
  - "1.1.  Remarks\n   Note that the SEND WG charter limits the scope of the working\
    \ group\n   to secure Neighbor Discovery functions.  Furthermore, the charter\n\
    \   explicitly mentions zero configuration as a fundamental goal behind\n   Neighbor\
    \ Discovery.  Network access authentication and access control\n   are outside\
    \ the scope of this work.\n   During the discussions while preparing this document,\
    \ the following\n   aspects that may help to evaluate the eventual solutions were\n\
    \   mentioned.\n      Zero configuration\n      Interaction with access control\
    \ solutions\n      Scalability\n      Efficiency\n   However, the main evaluation\
    \ criteria are formed by the trust models\n   and threat lists.  In other words,\
    \ the solutions are primarily\n   evaluated by seeing how well they secure the\
    \ networks against the\n   identified threats, and only secondarily from the configuration,\n\
    \   access control, scalability, and efficiently point of view.\n   IMPORTANT.\
    \  This document occasionally discusses solution proposals,\n   such as Cryptographically\
    \ Generated Addresses (CGA) [7] and Address\n   Based Keys (ABK) [6].  However,\
    \ such discussion is solely for\n   illustrative purposes.  Its purpose is to\
    \ give the readers a more\n   concrete idea of *some* possible solutions.  Such\
    \ discussion does NOT\n   indicate any preference on solutions on the behalf of\
    \ the authors or\n   the working group.\n   It should be noted that the term \"\
    trust\" is used in this document in\n   a rather non-technical manner.  The most\
    \ appropriate interpretation\n   is to consider it as an expression of an organizational\
    \ or collective\n   belief, i.e., an expression of commonly shared beliefs about\
    \ the\n   future behavior of the other involved parties.  Conversely, the term\n\
    \   \"trust relationship\" denotes a mutual a priori relationship between\n  \
    \ the involved organizations or parties where the parties believe that\n   the\
    \ other parties will behave correctly even in the future.  A trust\n   relationship\
    \ makes it possible to configure authentication and\n   authorization information\
    \ between the parties, while the lack of such\n   a relationship makes it impossible\
    \ to pre-configure such information.\n"
- title: 2.  Previous Work
  contents:
  - "2.  Previous Work\n   The RFCs that specify the IPv6 Neighbor Discovery and Address\n\
    \   Autoconfiguration protocols [2] [3] contain the required discussion\n   of\
    \ security in a Security Considerations section.  Some of the\n   threats identified\
    \ in this document were raised in the original RFCs.\n   The recommended remedy\
    \ was to secure the involved packets with an\n   IPsec AH [1] header.  However,\
    \ that recommendation oversimplifies the\n   problem by leaving the AH key management\
    \ for future work.  For\n   example, a host attempting to gain access to a Public\
    \ Access network\n   may or may not have the required IPsec security associations\
    \ set up\n   with the network.  In a roaming (but not necessarily mobile)\n  \
    \ situation, where a user is currently accessing the network through a\n   service\
    \ provider different from the home provider, it is not likely\n   that the host\
    \ will have been preconfigured with the proper mutual\n   trust relationship for\
    \ the foreign provider's network, allowing it to\n   directly authenticate the\
    \ network and get itself authenticated.\n   As of today, any IPsec security association\
    \ between the host and the\n   last hop routers or other hosts on the link would\
    \ need to be\n   completely manually preconfigured, since the Neighbor Discovery\
    \ and\n   Address Autoconfiguration protocols deal to some extent with how a\n\
    \   host obtains initial access to a link.  Thus, if a security\n   association\
    \ is required for initial access and the host does not have\n   that association,\
    \ there is currently no standard way that the host\n   can dynamically configure\
    \ itself with that association, even if it\n   has the necessary minimum prerequisite\
    \ keying material.  This\n   situation could induce administration hardships when\
    \ events such as\n   re-keying occur.\n   In addition, Neighbor Discovery and\
    \ Address Autoconfiguration use a\n   few fixed multicast addresses plus a range\
    \ of 16 million \"solicited\n   node\" multicast addresses.  A naive application\
    \ of pre-configured SAs\n   would require pre-configuring an unmanageable number\
    \ of SAs on each\n   host and router just in case a given solicited node multicast\
    \ address\n   is used.  Preconfigured SAs are impractical for securing such a\
    \ large\n   potential address range.\n"
- title: 3.  Trust Models
  contents:
  - "3.  Trust Models\n   When considering various security solutions for the IPv6\
    \ Neighbor\n   Discovery (ND) [2], it is important to keep in mind the underlying\n\
    \   trust models.  The trust models defined in this section are used\n   later\
    \ in this document, when discussing specific threats.\n   In the following, the\
    \ RFC 2461/RFC 2462 mechanisms are loosely\n   divided into two categories: Neighbor\
    \ Discovery (ND) and Router\n   Discovery (RD).  The former denotes operations\
    \ that do not primarily\n   involve routers while the operations in the latter\
    \ category do.\n   Three different trust models are specified:\n   1.  A model\
    \ where all authenticated nodes trust each other to behave\n       correctly at\
    \ the IP layer and not to send any ND or RD messages\n       that contain false\
    \ information.  This model is thought to\n       represent a situation where the\
    \ nodes are under a single\n       administration and form a closed or semi-closed\
    \ group.  A\n       corporate intranet is a good example.\n   2.  A model where\
    \ there is a router trusted by the other nodes in the\n       network to be a\
    \ legitimate router that faithfully routes packets\n       between the local network\
    \ and any connected external networks.\n       Furthermore, the router is trusted\
    \ to behave correctly at the IP\n       layer and not to send any ND or RD messages\
    \ that contain false\n       information.\n       This model is thought to represent\
    \ a public network run by an\n       operator.  The clients pay to the operator,\
    \ have its credentials,\n       and trust it to provide the IP forwarding service.\
    \  The clients\n       do not trust each other to behave correctly; any other\
    \ client\n       node must be considered able to send falsified ND and RD\n  \
    \     messages.\n   3.  A model where the nodes do not directly trust each other\
    \ at the\n       IP layer.  This model is considered suitable for e.g., ad hoc\n\
    \       networks.\n   Note that even though the nodes are assumed to trust each\
    \ other in\n   the first trust model (corporate intranet), it is still desirable\
    \ to\n   limit the extent of damage a node is able to inflict to the local\n \
    \  network if it becomes compromised.\n"
- title: 3.1.  Corporate Intranet Model
  contents:
  - "3.1.  Corporate Intranet Model\n   In a corporate intranet or other network where\
    \ all nodes are under\n   one administrative domain, the nodes may be considered\
    \ to be reliable\n   at the IP layer.  Thus, once a node has been accepted to\
    \ be a member\n   of the network, it is assumed to behave in a trustworthy manner.\n\
    \   Under this model, if the network is physically secured or if the link\n  \
    \ layer is cryptographically secured to the extent needed, no other\n   protection\
    \ is needed for IPv6 ND, as long as none of the nodes become\n   compromised.\
    \  For example, a wired LAN with 802.1x access control or\n   a WLAN with 802.11i\
    \ Robust Security Network (RSN) with AES encryption\n   may be considered secure\
    \ enough, requiring no further protection\n   under this trust model.  On the\
    \ other hand, ND security would add\n   protection depth even under this model\
    \ (see below).  Furthermore, one\n   should not overestimate the level of security\
    \ any L2 mechanism is\n   able to provide.\n   If the network is not physically\
    \ secured and the link layer does not\n   have cryptographic protection, or if\
    \ the cryptographic protection is\n   not secure enough (e.g., just 802.1x and\
    \ not 802.11i in a WLAN), the\n   nodes in the network may be vulnerable to some\
    \ or all of the threats\n   outlined in Section 4.  In such a case some protection\
    \ is desirable\n   to secure ND.  Providing such protection falls within the main\n\
    \   initial focus of the SEND working group.\n   Furthermore, it is desirable\
    \ to limit the amount of potential damage\n   in the case a node becomes compromised.\
    \  For example, it might still\n   be acceptable that a compromised node is able\
    \ to launch a denial-of-\n   service attack, but it is undesirable if it is able\
    \ to hijack\n   existing connections or establish man-in-the-middle attacks on\
    \ new\n   connections.\n   As mentioned in Section 2, one possibility to secure\
    \ ND would be to\n   use IPsec AH with symmetric shared keys, known by all trusted\
    \ nodes\n   and by no outsiders.  However, none of the currently standardized\n\
    \   automatic key distribution mechanisms work right out-of-the-box.  For\n  \
    \ further details, see [8].  Furthermore, using a shared key would not\n   protect\
    \ against a compromised node.\n   More specifically, the currently used key agreement\
    \ protocol, IKE,\n   suffers from a chicken-and-egg problem [8]: one needs an\
    \ IP address\n   to run IKE, IKE is needed to establish IPsec SAs, and IPsec SAs\
    \ are\n   required to configure an IP address.  Furthermore, there does not\n\
    \   seem to be any easy and efficient ways of securing ND with symmetric\n   key\
    \ cryptography.  The required number of security associations would\n   be very\
    \ large [9].\n   As an example, one possible approach to overcome this limitation\
    \ is\n   to use public key cryptography, and to secure ND packets directly\n \
    \  with public key signatures.\n"
- title: 3.2.  Public Wireless Network with an Operator
  contents:
  - "3.2.  Public Wireless Network with an Operator\n   A scenario where an operator\
    \ runs a public wireless (or wireline)\n   network, e.g., a WLAN in a hotel, airport,\
    \ or cafe, has a different\n   trust model.  Here the nodes may be assumed to\
    \ trust the operator to\n   provide the IP forwarding service in a trustworthy\
    \ manner, and not to\n   disrupt or misdirect the clients' traffic.  However,\
    \ the clients do\n   not usually trust each other.  Typically the router (or routers)\
    \ fall\n   under one administrative domain, and the client nodes each fall under\n\
    \   their own administrative domain.\n   It is assumed that under this scenario\
    \ the operator authenticates all\n   the client nodes, or at least requires authorization\
    \ in the form of a\n   payment.  At the same time, the clients must be able to\
    \ authenticate\n   the router and make sure that it belongs to the trusted operator.\n\
    \   Depending on the link-layer authentication protocol and its\n   deployment,\
    \ the link layer may take care of the mutual\n   authentication.  The link-layer\
    \ authentication protocol may allow the\n   client nodes and the access router\
    \ to create a security association.\n   Note that there exist authentication protocols,\
    \ e.g., particular EAP\n   methods, that do not create secure keying material\
    \ and/or do not\n   allow the client to authenticate the network.\n   In this\
    \ scenario, cryptographically securing the link layer does not\n   necessarily\
    \ block all the threats outlined in Section 4; see the\n   individual threat descriptions.\
    \  Specifically, even in 802.11i RSN\n   with AES encryption the broadcast and\
    \ multicast keys are shared\n   between all nodes.  Even if the underlying link\
    \ layer was aware of\n   all the nodes' link-layer addresses, and were able to\
    \ check that no\n   source addresses were falsified, there would still be\n  \
    \ vulnerabilities.\n   One should also note that link-layer security and IP topology\
    \ do not\n   necessarily match.  For example, the wireless access point may not\
    \ be\n   visible at the IP layer at all.  In such a case cryptographic\n   security\
    \ at the link layer does not provide any security with regard\n   to IP Neighbor\
    \ Discovery.\n   There seems to be at least two ways to bring in security into\
    \ this\n   scenario.  One possibility seems to be to enforce strong security\n\
    \   between the clients and the access router, and make the access router\n  \
    \ aware of the IP and link-layer protocol details.  That is, the router\n   would\
    \ check ICMPv6 packet contents, and filter packets that contain\n   information\
    \ which does not match the network topology.  The other\n   possibly acceptable\
    \ way is to add cryptographic protection to the\n   ICMPv6 packets carrying ND\
    \ messages.\n"
- title: 3.3.  Ad Hoc Network
  contents:
  - "3.3.  Ad Hoc Network\n   In an ad hoc network, or any network without a trusted\
    \ operator, none\n   of the nodes trust each other.  In a generic case, the nodes\
    \ meet\n   each other for the first time, and there are no guarantees that the\n\
    \   other nodes would behave correctly at the IP layer.  They must be\n   considered\
    \ suspicious to send falsified ND and RD messages.\n   Since there are no a priori\
    \ trust relationships, the nodes cannot\n   rely on traditional authentication.\
    \  That is, the traditional\n   authentication protocols rely on some existing\
    \ relationship between\n   the parties.  The relationship may be direct or indirect.\
    \  The\n   indirect case relies on one or more trusted third parties, thereby\n\
    \   creating a chain of trust relationships between the parties.\n   In the generic\
    \ ad hoc network case, there are no trusted third\n   parties, nor do the parties\
    \ trust each other directly.  Thus, the\n   traditional means of first authenticating\
    \ and then authorizing the\n   users (to use their addresses) do not work.\n \
    \  It is still possible to use self-identifying mechanisms, such as\n   Cryptographically\
    \ Generated Addresses (CGA) [7].  These allow the\n   nodes to ensure that they\
    \ are talking to the same nodes (as before)\n   at all times, and that each of\
    \ the nodes indeed have generated their\n   IP address themselves and not \"stolen\"\
    \ someone else's address.  It\n   may also be possible to learn the identities\
    \ of any routers using\n   various kinds of heuristics, such as testing the node's\
    \ ability to\n   convey cryptographically protected traffic towards a known and\n\
    \   trusted node somewhere in the Internet.  Methods like these seem to\n   mitigate\
    \ (but not completely block) some of the attacks outlined in\n   the next section.\n"
- title: 4.  Threats on a (Public) Multi-Access Link
  contents:
  - "4.  Threats on a (Public) Multi-Access Link\n   In this section we discuss threats\
    \ against the current IPv6 Neighbor\n   Discovery mechanisms, when used in multi-access\
    \ links.  The threats\n   are discussed in the light of the trust models defined\
    \ in the\n   previous section.\n   There are three general types of threats:\n\
    \   1.  Redirect attacks in which a malicious node redirects packets away\n  \
    \     from the last hop router or other legitimate receiver to another\n     \
    \  node on the link.\n   2.  Denial-of-Service (DoS) attacks, in which a malicious\
    \ node\n       prevents communication between the node under attack and all\n\
    \       other nodes, or a specific destination address.\n   3.  Flooding Denial-of-Service\
    \ (DoS) attacks, in which a malicious\n       node redirects other hosts' traffic\
    \ to a victim node, and thereby\n       creates a flood of bogus traffic at the\
    \ victim host.\n   A redirect attack can be used for DoS purposes by having the\
    \ node to\n   which the packets were redirected drop the packets, either completely\n\
    \   or by selectively forwarding some of them and not others.\n   The subsections\
    \ below identify specific threats for IPv6 network\n   access.  The threat descriptions\
    \ are organized in three subsections.\n   We first consider threats that do not\
    \ involve routers or routing\n   information.  We next consider threats that do\
    \ involve routers or\n   routing information.  Finally, we consider replay attacks\
    \ and threats\n   that are remotely exploitable.  All threats are discussed in\
    \ the\n   light of the trust models.\n"
- title: 4.1.  Non router/routing related threats
  contents:
  - "4.1.  Non router/routing related threats\n   In this section we discuss attacks\
    \ against \"pure\" Neighbor Discovery\n   functions, i.e., Neighbor Discovery\
    \ (ND), Neighbor Unreachability\n   Detection (NUD), and Duplicate Address Detection\
    \ (DAD) in Address\n   Autoconfiguration.\n"
- title: 4.1.1.  Neighbor Solicitation/Advertisement Spoofing
  contents:
  - "4.1.1.  Neighbor Solicitation/Advertisement Spoofing\n   Nodes on the link use\
    \ Neighbor Solicitation and Advertisement\n   messages to create bindings between\
    \ IP addresses and MAC addresses.\n   More specifically, there are two cases when\
    \ a node creates neighbor\n   cache entries upon receiving Solicitations:\n  \
    \ 1.  A node receives a Neighbor Solicitation that contains a node's\n       address.\
    \  The node can use that to populate its neighbor cache.\n       This is basically\
    \ a performance optimization, and a SHOULD in the\n       base documents.\n  \
    \ 2.  During Duplicate Address Detection (DAD), if a node receives a\n       Neighbor\
    \ Solicitation for the same address it is soliciting for,\n       the situation\
    \ is considered a collision, and the node must cease\n       to solicit for the\
    \ said address.\n   In contrast to solicitation messages that create or modify\
    \ state only\n   in these specific occasions, state is usually modified whenever\
    \ a\n   node receives a solicited-for advertisement message.\n   An attacking\
    \ node can cause packets for legitimate nodes, both hosts\n   and routers, to\
    \ be sent to some other link-layer address.  This can\n   be done by either sending\
    \ a Neighbor Solicitation with a different\n   source link-layer address option,\
    \ or sending a Neighbor Advertisement\n   with a different target link-layer address\
    \ option.\n   The attacks succeed because the Neighbor Cache entry with the new\n\
    \   link-layer address overwrites the old.  If the spoofed link-layer\n   address\
    \ is a valid one, as long as the attacker responds to the\n   unicast Neighbor\
    \ Solicitation messages sent as part of the Neighbor\n   Unreachability Detection,\
    \ packets will continue to be redirected.\n   This is a redirect/DoS attack.\n\
    \   This mechanism can be used for a DoS attack by specifying an unused\n   link-layer\
    \ address; however, this DoS attack is of limited duration\n   since after 30-50\
    \ seconds (with default timer values) the Neighbor\n   Unreachability Detection\
    \ mechanism will discard the bad link-layer\n   address and multicast anew to\
    \ discover the link-layer address.  As a\n   consequence, the attacker will need\
    \ to keep responding with\n   fabricated link-layer addresses if it wants to maintain\
    \ the attack\n   beyond the timeout.\n   The threat discussed in this subsection\
    \ involves Neighbor\n   Solicitation and Neighbor Advertisement messages.\n  \
    \ This attack is not a concern if access to the link is restricted to\n   trusted\
    \ nodes; if a trusted node is compromised, the other nodes are\n   exposed to\
    \ this threat.  In the case where just the operator is\n   trusted, the nodes\
    \ may rely on the operator to certify the address\n   bindings for other local\
    \ nodes.  From the security point of view, the\n   router may act as a trusted\
    \ proxy for the other nodes.  This assumes\n   that the router can be trusted\
    \ to represent correctly the other nodes\n   on the link.  In the ad hoc network\
    \ case, and optionally in the other\n   two cases, the nodes may use self certifying\
    \ techniques (e.g., CGA)\n   to authorize address bindings.\n   Additionally,\
    \ some implementations log an error and refuse to accept\n   ND overwrites, instead\
    \ requiring the old entry to time out first.\n"
- title: 4.1.2.  Neighbor Unreachability Detection (NUD) failure
  contents:
  - "4.1.2.  Neighbor Unreachability Detection (NUD) failure\n   Nodes on the link\
    \ monitor the reachability of local destinations and\n   routers with the Neighbor\
    \ Unreachability Detection procedure [2].\n   Normally the nodes rely on upper-layer\
    \ information to determine\n   whether peer nodes are still reachable.  However,\
    \ if there is a\n   sufficiently long delay on upper-layer traffic, or if the\
    \ node stops\n   receiving replies from a peer node, the NUD procedure is invoked.\n\
    \   The node sends a targeted NS to the peer node.  If the peer is still\n   reachable,\
    \ it will reply with a NA.  However, if the soliciting node\n   receives no reply,\
    \ it tries a few more times, eventually deleting the\n   neighbor cache entry.\
    \  If needed, this triggers the standard address\n   resolution protocol to learn\
    \ the new MAC address.  No higher level\n   traffic can proceed if this procedure\
    \ flushes out neighbor cache\n   entries after determining (perhaps incorrectly)\
    \ that the peer is not\n   reachable.\n   A malicious node may keep sending fabricated\
    \ NAs in response to NUD\n   NS messages.  Unless the NA messages are somehow\
    \ protected, the\n   attacker may be able to extend the attack for a long time\
    \ using this\n   technique.  The actual consequences depend on why the node become\n\
    \   unreachable for the first place, and how the target node would behave\n  \
    \ if it knew that the node has become unreachable.  This is a DoS\n   attack.\n\
    \   The threat discussed in this subsection involves Neighbor\n   Solicitation/Advertisement\
    \ messages.\n   This attack is not a concern if access to the link is restricted\
    \ to\n   trusted nodes; if a trusted node is compromised, the other nodes are\n\
    \   exposed to this DoS threat.  Under the two other trust models, a\n   solution\
    \ requires that the node performing NUD is able to make a\n   distinction between\
    \ genuine and fabricated NA responses.\n"
- title: 4.1.3.  Duplicate Address Detection DoS Attack
  contents:
  - "4.1.3.  Duplicate Address Detection DoS Attack\n   In networks where the entering\
    \ hosts obtain their addresses using\n   stateless address autoconfiguration [3],\
    \ an attacking node could\n   launch a DoS attack by responding to every duplicate\
    \ address\n   detection attempt made by an entering host.  If the attacker claims\n\
    \   the address, then the host will never be able to obtain an address.\n   The\
    \ attacker can claim the address in two ways: it can either reply\n   with an\
    \ NS, simulating that it is performing DAD, too, or it can\n   reply with an NA,\
    \ simulating that it has already taken the address\n   into use.  This threat\
    \ was identified in RFC 2462 [3].  The issue may\n   also be present when other\
    \ types of address configuration is used,\n   i.e., whenever DAD is invoked prior\
    \ to actually configuring the\n   suggested address.  This is a DoS attack.\n\
    \   The threat discussed in this subsection involves Neighbor\n   Solicitation/Advertisement\
    \ messages.\n   This attack is not a concern if access to the link is restricted\
    \ to\n   trusted nodes; if a trusted node is compromised, the other nodes\n  \
    \ become exposed to this DoS threat.  Under the two other trust models,\n   a\
    \ solution requires that the node performing DAD is able to verify\n   whether\
    \ the sender of the NA response is authorized to use the given\n   IP address\
    \ or not.  In the trusted operator case, the operator may\n   act as an authorizer,\
    \ keeping track of allocated addresses and making\n   sure that no node has allocated\
    \ more than a few (hundreds of)\n   addresses.  On the other hand, it may be detrimental\
    \ to adopt such a\n   practice, since there may be situations where it is desirable\
    \ for one\n   node to have a large number of addresses, e.g., creating a separate\n\
    \   address per TCP connection, or when running an ND proxy.  Thus, it\n   may\
    \ be inappropriate to suggest that ISPs could control how many\n   addresses a\
    \ legitimate host can have; the discussion above must be\n   considered only as\
    \ examples, as stated in the beginning of this\n   document.\n   In the ad hoc\
    \ network case one may want to structure the addresses in\n   such a way that\
    \ self authorization is possible.\n"
- title: 4.2.  Router/routing involving threats
  contents:
  - "4.2.  Router/routing involving threats\n   In this section we consider threats\
    \ pertinent to router discovery or\n   other router assisted/related mechanisms.\n"
- title: 4.2.1.  Malicious Last Hop Router
  contents:
  - "4.2.1.  Malicious Last Hop Router\n   This threat was identified in [5] but was\
    \ classified as a general\n   IPv6 threat and not specific to Mobile IPv6.  It\
    \ is also identified\n   in RFC 2461 [2].  This threat is a redirect/DoS attack.\n\
    \   An attacking node on the same subnet as a host attempting to discover\n  \
    \ a legitimate last hop router could masquerade as an IPv6 last hop\n   router\
    \ by multicasting legitimate-looking IPv6 Router Advertisements\n   or unicasting\
    \ Router Advertisements in response to multicast Router\n   Advertisement Solicitations\
    \ from the entering host.  If the entering\n   host selects the attacker as its\
    \ default router, the attacker has the\n   opportunity to siphon off traffic from\
    \ the host, or mount a man-in-\n   the-middle attack.  The attacker could ensure\
    \ that the entering host\n   selected itself as the default router by multicasting\
    \ periodic Router\n   Advertisements for the real last hop router having a lifetime\
    \ of\n   zero.  This may spoof the entering host into believing that the real\n\
    \   access router is not willing to take any traffic.  Once accepted as a\n  \
    \ legitimate router, the attacker could send Redirect messages to\n   hosts, then\
    \ disappear, thus covering its tracks.\n   This threat is partially mitigated\
    \ in RFC 2462; in Section 5.5.3 of\n   RFC 2462 it is required that if the advertised\
    \ prefix lifetime is\n   less than 2 hours and less than the stored lifetime,\
    \ the stored\n   lifetime is not reduced unless the packet was authenticated.\n\
    \   However, the default router selection procedure, as defined in\n   Section\
    \ 6.3.6. of RFC 2461, does not contain such a rule.\n   The threat discussed in\
    \ this subsection involves Router Advertisement\n   and Router Advertisement Solicitation\
    \ messages.\n   This attack is not a concern if access to the link is restricted\
    \ to\n   trusted nodes; if a trusted node is compromised, the other nodes are\n\
    \   exposed to this threat.  However, the threat can be partially\n   mitigated\
    \ through a number of means, for example, by configuring the\n   nodes to prefer\
    \ existing routers over new ones.  Note that this\n   approach does not necessarily\
    \ prevent one from introducing new\n   routers into the network, depending on\
    \ the details of implementation.\n   At minimum, it just makes the existing nodes\
    \ to prefer the existing\n   routers over the new ones.\n   In the case of a trusted\
    \ operator, there must be a means for the\n   nodes to make a distinction between\
    \ trustworthy routers, run by the\n   operator, and other nodes.  There are currently\
    \ no widely accepted\n   solutions for the ad hoc network case, and the issue\
    \ remains as a\n   research question.\n"
- title: 4.2.2.  Default router is 'killed'
  contents:
  - "4.2.2.  Default router is 'killed'\n   In this attack, an attacker 'kills' the\
    \ default router(s), thereby\n   making the nodes on the link to assume that all\
    \ nodes are local.  In\n   Section 5.2 of RFC 2461 [2] it is stated that \"[if]\
    \ the Default\n   Router List is empty, the sender assumes that the destination\
    \ is on-\n   link.\"  Thus, if the attacker is able to make a node to believe\
    \ that\n   there are no default routers on the link, the node will try to send\n\
    \   the packets directly, using Neighbor Discovery.  After that the\n   attacker\
    \ can use NS/NA spoofing even against off-link destinations.\n   There are a few\
    \ identified ways how an attacker can 'kill' the\n   default router(s).  One is\
    \ to launch a classic DoS attack against the\n   router so that it does not appear\
    \ responsive any more.  The other is\n   to send a spoofed Router Advertisement\
    \ with a zero Router Lifetime\n   (see Section 6.3.4 of RFC 2461 [2]).  However,\
    \ see also the\n   discussion in Section 4.2.1, above.\n   This attack is mainly\
    \ a DoS attack, but it could also be used to\n   redirect traffic to the next\
    \ better router, which may be the\n   attacker.\n   The threat discussed in this\
    \ subsection involves Router Advertisement\n   messages.  One variant of this\
    \ threat may be possible by overloading\n   the router, without using any ND/RD\
    \ messages.\n   This attack is not a concern if access to the link is restricted\
    \ to\n   trusted nodes; if a trusted node is compromised, the other nodes are\n\
    \   exposed to this threat.  In the case of a trusted operator, there\n   must\
    \ be a means for the nodes to make a distinction between\n   trustworthy routers,\
    \ run by the operator, and other nodes.  That\n   protects against spoofed Router\
    \ Advertisements, but it does not\n   protect against router overloading.  There\
    \ are currently no widely\n   accepted solutions for the ad hoc network case,\
    \ and the issue remains\n   as a research question.\n   Thanks to Alain Durand\
    \ for identifying this threat.\n"
- title: 4.2.3.  Good Router Goes Bad
  contents:
  - "4.2.3.  Good Router Goes Bad\n   In this attack, a router that previously was\
    \ trusted is compromised.\n   The attacks available are the same as those discussed\
    \ in Section\n   4.2.1.  This is a redirect/DoS attack.\n   There are currently\
    \ no known solutions for any of the presented three\n   trust models.  On the\
    \ other hand, on a multi-router link one could\n   imagine a solution involving\
    \ revocation of router rights.  The\n   situation remains as a research question.\n"
- title: 4.2.4.  Spoofed Redirect Message
  contents:
  - "4.2.4.  Spoofed Redirect Message\n   The Redirect message can be used to send\
    \ packets for a given\n   destination to any link-layer address on the link. \
    \ The attacker uses\n   the link-local address of the current first-hop router\
    \ in order to\n   send a Redirect message to a legitimate host.  Since the host\n\
    \   identifies the message by the link-local address as coming from its\n   first\
    \ hop router, it accepts the Redirect.  As long as the attacker\n   responds to\
    \ Neighbor Unreachability Detection probes to the link-\n   layer address, the\
    \ Redirect will remain in effect.  This is a\n   redirect/DoS attack.\n   The\
    \ threat discussed in this subsection involves Redirect messages.\n   This attack\
    \ is not a concern if access to the link is restricted to\n   trusted nodes; if\
    \ a trusted node is compromised, the other nodes are\n   exposed to this threat.\
    \  In the case of a trusted operator, there\n   must be a means for the nodes\
    \ to make a distinction between\n   trustworthy routers, run by the operator,\
    \ and other nodes.  There are\n   currently no widely accepted solutions for the\
    \ ad hoc network case,\n   and the issue remains as a research question.\n"
- title: 4.2.5.  Bogus On-Link Prefix
  contents:
  - "4.2.5.  Bogus On-Link Prefix\n   An attacking node can send a Router Advertisement\
    \ message specifying\n   that some prefix of arbitrary length is on-link.  If\
    \ a sending host\n   thinks the prefix is on-link, it will never send a packet\
    \ for that\n   prefix to the router.  Instead, the host will try to perform address\n\
    \   resolution by sending Neighbor Solicitations, but the Neighbor\n   Solicitations\
    \ will not result in a response, denying service to the\n   attacked host.  This\
    \ is a DoS attack.\n   The attacker can use an arbitrary lifetime on the bogus\
    \ prefix\n   advertisement.  If the lifetime is infinity, the sending host will\
    \ be\n   denied service until it loses the state in its prefix list e.g., by\n\
    \   rebooting, or after the same prefix is advertised with a zero\n   lifetime.\
    \  The attack could also be perpetrated selectively for\n   packets destined to\
    \ a particular prefix by using 128 bit prefixes,\n   i.e., full addresses.\n \
    \  Additionally, the attack may cause a denial-of-service by flooding\n   the\
    \ routing table of the node.  The node would not be able to\n   differentiate\
    \ between legitimate on-link prefixes and bogus ones when\n   making decisions\
    \ as to which ones are kept and which are dropped.\n   Inherently, any finite\
    \ system must have some point at which new\n   received prefixes must be dropped\
    \ rather than accepted.\n   This attack can be extended into a redirect attack\
    \ if the attacker\n   replies to the Neighbor Solicitations with spoofed Neighbor\n\
    \   Advertisements, thereby luring the nodes on the link to send the\n   traffic\
    \ to it or to some other node.\n   This threat involves Router Advertisement message.\
    \  The extended\n   attack combines the attack defined in Section 4.1.1 and in\
    \ this\n   section, and involves Neighbor Solicitation, Neighbor Advertisement,\n\
    \   and Router Advertisement messages.\n   This attack is not a concern if access\
    \ to the link is restricted to\n   trusted nodes; if a trusted node is compromised,\
    \ the other nodes are\n   exposed to this threat.  In the case of a trusted operator,\
    \ there\n   must be a means for the nodes to make a distinction between\n   trustworthy\
    \ routers, run by the operator, and other nodes.  There are\n   currently no known\
    \ solutions for the ad hoc network case, and the\n   issue remains as a research\
    \ question.\n   As an example, one possible approach to limiting the damage of\
    \ this\n   attack is to require advertised on-link prefixes be /64s (otherwise\n\
    \   it's easy to advertise something short like 0/0 and this attack is\n   very\
    \ easy).\n"
- title: 4.2.6.  Bogus Address Configuration Prefix
  contents:
  - "4.2.6.  Bogus Address Configuration Prefix\n   An attacking node can send a Router\
    \ Advertisement message specifying\n   an invalid subnet prefix to be used by\
    \ a host for address\n   autoconfiguration.  A host executing the address autoconfiguration\n\
    \   algorithm uses the advertised prefix to construct an address [3],\n   even\
    \ though that address is not valid for the subnet.  As a result,\n   return packets\
    \ never reach the host because the host's source address\n   is invalid.  This\
    \ is a DoS attack.\n   This attack has the potential to propagate beyond the immediate\n\
    \   attacked host if the attacked host performs a dynamic update to the\n   DNS\
    \ based on the bogus constructed address.  DNS update [4] causes\n   the bogus\
    \ address to be added to the host's address record in the\n   DNS.  Should this\
    \ occur, applications performing name resolution\n   through the DNS obtain the\
    \ bogus address and an attempt to contact\n   the host fails.  However, well-written\
    \ applications will fall back\n   and try the other addresses registered in DNS,\
    \ which may be correct.\n   A distributed attacker can make the attack more severe\
    \ by creating a\n   falsified reverse DNS entry that matches with the dynamic\
    \ DNS entry\n   created by the target.  Consider an attacker who has legitimate\n\
    \   access to a prefix <ATTACK_PRFX>, and a target who has an interface\n   ID\
    \ <TARGET_IID>.  The attacker creates a reverse DNS entry for\n   <ATTACK_PRFX>:<TARGET_IID>,\
    \ pointing to the real domain name of the\n   target, e.g., \"secure.target.com\"\
    .  Next the attacker advertises the\n   <ATTACK_PRFX> prefix at the target's link.\
    \  The target will create an\n   address <ATTACK_PRFX>:<TARGET_IID>, and update\
    \ its DNS entry so that\n   \"secure.target.com\" points to <ATTACK_PRFX>:<TARGET_IID>.\n\
    \   At this point \"secure.target.com\" points to\n   <ATTACK_PRFX>:<TARGET_IID>,\
    \ and <ATTACK_PRFX>:<TARGET_IID> points to\n   \"secure.target.com\".  This threat\
    \ is mitigated by the fact that the\n   attacker can be traced since the owner\
    \ of the <ATTACK_PRFX> is\n   available at the registries.\n   There is also a\
    \ related possibility of advertising a target prefix as\n   an autoconfiguration\
    \ prefix on a busy link, and then have all nodes\n   on this link try to communicate\
    \ to the external world with this\n   address.  If the local router doesn't have\
    \ ingress filtering on, then\n   the target link may get a large number of replies\
    \ for those initial\n   communication attempts.\n   The basic threat discussed\
    \ in this subsection involves Router\n   Advertisement messages.  The extended\
    \ attack scenarios involve the\n   DNS, too.\n   This attack is not a concern\
    \ if access to the link is restricted to\n   trusted nodes; if a trusted node\
    \ is compromised the other nodes are\n   exposed to this threat.  In the case\
    \ of a trusted operator, there\n   must be a means for the nodes to make a distinction\
    \ between\n   trustworthy routers, run by the operator, and other nodes.  There\
    \ are\n   currently no known solutions for the ad hoc network case, and the\n\
    \   issue remains as a research question.\n"
- title: 4.2.7.  Parameter Spoofing
  contents:
  - "4.2.7.  Parameter Spoofing\n   IPv6 Router Advertisements contain a few parameters\
    \ used by hosts\n   when they send packets and to tell hosts whether or not they\
    \ should\n   perform stateful address configuration [2].  An attacking node could\n\
    \   send out a valid-seeming Router Advertisement that duplicates the\n   Router\
    \ Advertisement from the legitimate default router, except the\n   included parameters\
    \ are designed to disrupt legitimate traffic.  This\n   is a DoS attack.\n   Specific\
    \ attacks include:\n   1.  The attacker includes a Current Hop Limit of one or\
    \ another small\n       number which the attacker knows will cause legitimate\
    \ packets to\n       be dropped before they reach their destination.\n   2.  The\
    \ attacker implements a bogus DHCPv6 server or relay and the\n       'M' and/or\
    \ 'O' flag is set, indicating that stateful address\n       configuration and/or\
    \ stateful configuration of other parameters\n       should be done.  The attacker\
    \ is then in a position to answer the\n       stateful configuration queries of\
    \ a legitimate host with its own\n       bogus replies.\n   The threat discussed\
    \ in this subsection involves Router Advertisement\n   messages.\n   Note that\
    \ securing DHCP alone does not resolve this problem.  There\n   are two reasons\
    \ for this.  First, the attacker may prevent the node\n   from using DHCP in the\
    \ first place.  Second, depending on the node's\n   local configuration, the attacker\
    \ may spoof the node to use a less\n   trusted DHCP server.  (The latter is a\
    \ variant of the so called\n   \"bidding down\" or \"down grading\" attacks.)\n\
    \   As an example, one possible approach to mitigate this threat is to\n   ignore\
    \ very small hop limits.  The nodes could implement a\n   configurable minimum\
    \ hop limit, and ignore attempts to set it below\n   said limit.\n   This attack\
    \ is not a concern if access to the link is restricted to\n   trusted nodes; if\
    \ a trusted node is compromised the other nodes are\n   exposed to this treat.\
    \  In the case of a trusted operator, there must\n   be a means for the nodes\
    \ to make a distinction between trustworthy\n   routers, run by the operator,\
    \ and other nodes.  There are currently\n   no known solutions for the ad hoc\
    \ network case, and the issue remains\n   a research question.\n"
- title: 4.3.  Replay attacks and remotely exploitable attacks
  contents:
  - '4.3.  Replay attacks and remotely exploitable attacks

    '
- title: 4.3.1.  Replay attacks
  contents:
  - "4.3.1.  Replay attacks\n   All Neighbor Discovery and Router Discovery messages\
    \ are prone to\n   replay attacks.  That is, even if they were cryptographically\n\
    \   protected so that their contents cannot be forged, an attacker would\n   be\
    \ able to capture valid messages and replay them later.  Thus,\n   independent\
    \ on what mechanism is selected to secure the messages,\n   that mechanism must\
    \ be protected against replay attacks.\n   Fortunately it is fairly easy to defeat\
    \ most replay attacks.  In\n   request-reply exchanges, such as Solicitation-Advertisement,\
    \ the\n   request may contain a nonce that must appear also in the reply.\n  \
    \ Thus, old replies are not valid since they do not contain the right\n   nonce.\
    \  Correspondingly, stand-alone messages, such as unsolicited\n   Advertisements\
    \ or Redirect messages, may be protected with timestamps\n   or counters.  In\
    \ practise, roughly synchronized clocks and timestamps\n   seem to work well,\
    \ since the recipients may keep track of the\n   difference between the clocks\
    \ of different nodes, and make sure that\n   all new messages are newer than the\
    \ last seen message.\n"
- title: 4.3.2.  Neighbor Discovery DoS Attack
  contents:
  - "4.3.2.  Neighbor Discovery DoS Attack\n   In this attack, the attacking node\
    \ begins fabricating addresses with\n   the subnet prefix and continuously sending\
    \ packets to them.  The last\n   hop router is obligated to resolve these addresses\
    \ by sending\n   neighbor solicitation packets.  A legitimate host attempting\
    \ to enter\n   the network may not be able to obtain Neighbor Discovery service\
    \ from\n   the last hop router as it will be already busy with sending other\n\
    \   solicitations.  This DoS attack is different from the others in that\n   the\
    \ attacker may be off-link.  The resource being attacked in this\n   case is the\
    \ conceptual neighbor cache, which will be filled with\n   attempts to resolve\
    \ IPv6 addresses having a valid prefix but invalid\n   suffix.  This is a DoS\
    \ attack.\n   The threat discussed in this subsection involves Neighbor\n   Solicitation\
    \ messages.\n   This attack does not directly involve the trust models presented.\n\
    \   However, if access to the link is restricted to registered nodes, and\n  \
    \ the access router keeps track of nodes that have registered for\n   access on\
    \ the link, the attack may be trivially plugged.  However, no\n   such mechanisms\
    \ are currently standardized.\n   In a way, this problem is fairly similar to\
    \ the TCP SYN flooding\n   problem.  For example, rate limiting Neighbor Solicitations,\n\
    \   restricting the amount of state reserved for unresolved\n   solicitations,\
    \ and clever cache management may be applied.\n   It should be noted that both\
    \ hosts and routers need to worry about\n   this problem.  The router case was\
    \ discussed above.  Hosts are also\n   vulnerable since the neighbor discovery\
    \ process can potentially be\n   abused by an application that is tricked into\
    \ sending packets to\n   arbitrary on-link destinations.\n"
- title: 4.4.  Summary of the attacks
  contents:
  - "4.4.  Summary of the attacks\n   Columns:\n      N/R Neighbor Discovery (ND)\
    \ or Router Discovery (RD) attack\n      R/D Redirect/DoS (Redir) or just DoS\
    \ attack\n      Msgs Messages involved in the attack: NA, NS, RA, RS, Redir\n\
    \      1  Present in trust model 1 (corporate intranet)\n      2  Present in trust\
    \ model 2 (public operator run network)\n      3  Present in trust model 3 (ad\
    \ hoc network)\n   Symbols in trust model columns:\n      -  The threat is not\
    \ present or not a concern.\n      +  The threat is present and at least one solution\
    \ is known.\n      R  The threat is present but solving it is a research problem.\n\
    \   Note that the plus sign '+' in the table does not mean that there is\n   a\
    \ ready-to-be-applied, standardized solution.  If solutions existed,\n   this\
    \ document would be unnecessary.  Instead, it denotes that in the\n   authors'\
    \ opinion the problem has been solved in principle, and there\n   exists a publication\
    \ that describes some approach to solve the\n   problem, or a solution may be\
    \ produced by straightforward application\n   of known research and/or engineering\
    \ results.\n   In the other hand, and 'R' indicates that the authors' are not\
    \ aware\n   of any publication describing a solution to the problem, and cannot\n\
    \   at the time of writing think about any simple and easy extension of\n   known\
    \ research and/or engineering results to solve the problem.\n   +-------+----------------------+-----+-------+-------+---+---+---+\n\
    \   | Sec   | Attack name          | N/R | R/D   | Msgs  | 1 | 2 | 3 |\n   +-------+----------------------+-----+-------+-------+---+---+---+\n\
    \   | 4.1.1 | NS/NA spoofing       | ND  | Redir | NA NS | + | + | + |\n   | 4.1.2\
    \ | NUD failure          | ND  | DoS   | NA NS | - | + | + |\n   | 4.1.3 | DAD\
    \ DoS              | ND  | DoS   | NA NS | - | + | + |\n   +-------+----------------------+-----+-------+-------+---+---+---+\n\
    \   | 4.2.1 | Malicious router     | RD  | Redir | RA RS | + | + | R |\n   | 4.2.2\
    \ | Default router killed| RD  | Redir | RA    |+/R|+/R| R | 1)\n   | 4.2.3 |\
    \ Good router goes bad | RD  | Redir | RA RS | R | R | R |\n   | 4.2.4 | Spoofed\
    \ redirect     | RD  | Redir | Redir | + | + | R |\n   | 4.2.5 | Bogus on-link\
    \ prefix | RD  | DoS   | RA    | - | + | R | 2)\n   | 4.2.6 | Bogus address config\
    \ | RD  | DoS   | RA    | - | + | R | 3)\n   | 4.2.7 | Parameter spoofing   |\
    \ RD  | DoS   | RA    | - | + | R |\n   +-------+----------------------+-----+-------+-------+---+---+---+\n\
    \   | 4.3.1 | Replay attacks       | All | Redir | All   | + | + | + |\n   | 4.3.2\
    \ | Remote ND DoS        | ND  | DoS   | NS    | + | + | + |\n   +------------------------------+-----+-------+-------+---+---+---+\n\
    \                                Figure 1\n   1.  It is possible to protect the\
    \ Router Advertisements, thereby\n       closing one variant of this attack. \
    \ However, closing the other\n       variant (overloading the router) does not\
    \ seem to be plausible\n       within the scope of this working group.\n   2.\
    \  Note that the extended attack defined in Section 4.2.5 combines\n       sending\
    \ a bogus on-link prefix and performing NS/NA spoofing as\n       per Section\
    \ 4.1.1.  Thus, if the NA/NS exchange is secured, the\n       ability to use Section\
    \ 4.2.5 for redirect is most probably\n       blocked, too.\n   3.  The bogus\
    \ DNS registration resulting from blindly registering the\n       new address\
    \ via DNS update [4] is not considered an ND security\n       issue here.  However,\
    \ it should be noted as a possible\n       vulnerability in implementations.\n\
    \   For a slightly different approach, see also Section 7 in [9].\n   Especially\
    \ the table in Section 7.7 of [9] is very good.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   This document discusses security threats to network\
    \ access in IPv6.\n   As such, it is concerned entirely with security.\n"
- title: 6.  Acknowledgements
  contents:
  - "6.  Acknowledgements\n   Thanks to Alper Yegin of DoCoMo Communications Laboratories\
    \ USA for\n   identifying the Neighbor Discovery DoS attack.  We would also like\
    \ to\n   thank Tuomas Aura and Michael Roe of Microsoft Research Cambridge as\n\
    \   well as Jari Arkko and Vesa-Matti Mantyla of Ericsson Research\n   Nomadiclab\
    \ for discussing some of the threats with us.\n   Thanks to Alper Yegin, Pekka\
    \ Savola, Bill Sommerfeld, Vijay\n   Devaparalli, Dave Thaler, and Alain Durand\
    \ for their constructive\n   comments.\n   Thanks to Craig Metz for his numerous\
    \ very good comments, and\n   especially for more material of implementations\
    \ that refuse to accept\n   ND overrides, for the bogus on-link prefix threat,\
    \ and for reminding\n   us about replay attacks.\n"
- title: 7.  Informative References
  contents:
  - "7.  Informative References\n   [1]   Kent, S. and R. Atkinson, \"IP Authentication\
    \ Header\", RFC 2402,\n         November 1998.\n   [2]   Narten, T., Nordmark,\
    \ E. and W. Simpson, \"Neighbor Discovery\n         for IP Version 6 (IPv6)\"\
    , RFC 2461, December 1998.\n   [3]   Thomson, S. and T. Narten, \"IPv6 Stateless\
    \ Address\n         Autoconfiguration\", RFC 2462, December 1998.\n   [4]   Wellington,\
    \ B., \"Secure Domain Name System (DNS) Dynamic\n         Update\", RFC 3007,\
    \ November 2000.\n   [5]   Mankin, A., \"Threat Models introduced by Mobile IPv6\
    \  and\n         Requirements for Security in Mobile IPv6\", Work in Progress.\n\
    \   [6]   Kempf, J., Gentry, C. and A. Silverberg, \"Securing IPv6\n         Neighbor\
    \ Discovery Using Address Based Keys (ABKs)\", Work in\n         Progress, June\
    \ 2002.\n   [7]   Roe, M., \"Authentication of Mobile IPv6 Binding Updates and\n\
    \         Acknowledgments\", Work in Progress, March 2002.\n   [8]   Arkko, J.,\
    \ \"Effects of ICMPv6 on IKE\", Work in Progress, March\n         2003.\n   [9]\
    \   Arkko, J., \"Manual Configuration of Security Associations for\n         IPv6\
    \ Neighbor Discovery\", Work in Progress, March 2003.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Pekka Nikander (editor)\n   Ericsson Research Nomadic\
    \ Lab\n   JORVAS  FIN-02420\n   FINLAND\n   Phone: +358 9 299 1\n   EMail: pekka.nikander@nomadiclab.com\n\
    \   James Kempf\n   DoCoMo USA Labs\n   181 Metro Drive, Suite 300\n   San Jose,\
    \ CA  95110\n   USA\n   Phone: +1 408 451 4711\n   EMail: kempf@docomolabs-usa.com\n\
    \   Erik Nordmark\n   Sun Microsystems\n   17 Network Circle\n   Menlo Park, CA\
    \ 94043\n   USA\n   Phone: +1 650 786 2921\n   EMail: erik.nordmark@sun.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2004).  This\
    \ document is subject\n   to the rights, licenses and restrictions contained in\
    \ BCP 78, and\n   except as set forth therein, the authors retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at ietf-\n   ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
