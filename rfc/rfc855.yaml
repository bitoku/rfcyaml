- contents:
  - "                      TELNET OPTION SPECIFICATIONS\nThis RFC specifies a standard
    for the ARPA Internet community.  Hosts on\nthe ARPA Internet are expected to
    adopt and implement this standard.\nThe intent of providing for options in the
    TELNET Protocol is to permit\nhosts to obtain more elegant solutions to the problems
    of communication\nbetween dissimilar devices than is possible within the framework\nprovided
    by the Network Virtual Terminal (NVT).  It should be possible\nfor hosts to invent,
    test, or discard options at will.  Nevertheless, it\nis envisioned that options
    which prove to be generally useful will\neventually be supported by many hosts;
    therefore it is desirable that\noptions should be carefully documented and well
    publicized.  In\naddition, it is necessary to insure that a single option code
    is not\nused for several different options.\nThis document specifies a method
    of option code assignment and standards\nfor documentation of options.  The individual
    responsible for assignment\nof option codes may waive the requirement for complete
    documentation for\nsome cases of experimentation, but in general documentation
    will be\nrequired prior to code assignment.  Options will be publicized by\npublishing
    their documentation as RFCs; inventors of options may, of\ncourse, publicize them
    in other ways as well.\n   Option codes will be assigned by:\n      Jonathan B.
    Postel\n      University of Southern California\n      Information Sciences Institute
    (USC-ISI)\n      4676 Admiralty Way\n      Marina Del Rey, California 90291\n
    \     (213) 822-1511\n      Mailbox = POSTEL@USC-ISIF\nDocumentation of options
    should contain at least the following sections:\n   Section 1 - Command Name and
    Option Code\n   Section 2 - Command Meanings\n      The meaning of each possible
    TELNET command relevant to this\n      option should be described.  Note that
    for complex options, where\nRFC 855                                                         May
    1983\n      \"subnegotiation\" is required, there may be a larger number of\n
    \     possible commands.  The concept of \"subnegotiation\" is described\n      in
    more detail below.\n   Section 3 - Default Specification\n      The default assumptions
    for hosts which do not implement, or use,\n      the option must be described.\n
    \  Section 4 - Motivation\n      A detailed explanation of the motivation for
    inventing a\n      particular option, or for choosing a particular form for the\n
    \     option, is extremely helpful to those who are not faced (or don't\n      realize
    that they are faced) by the problem that the option is\n      designed to solve.\n
    \  Section 5 - Description (or Implementation Rules)\n      Merely defining the
    command meanings and providing a statement of\n      motivation are not always
    sufficient to insure that two\n      implementations of an option will be able
    to communicate.\n      Therefore, a more complete description should be furnished
    in most\n      cases.  This description might take the form of text, a sample\n
    \     implementation, hints to implementers, etc.\nA Note on \"Subnegotiation\"\n
    \  Some options will require more information to be passed between hosts\n   than
    a single option code.  For example, any option which requires a\n   parameter
    is such a case.  The strategy to be used consists of two\n   steps:  first, both
    parties agree to \"discuss\" the parameter(s) and,\n   second, the \"discussion\"
    takes place.\n   The first step, agreeing to discuss the parameters, takes place
    in\n   the normal manner; one party proposes use of the option by sending a\n
    \  DO (or WILL) followed by the option code, and the other party accepts\n   by
    returning a WILL (or DO) followed by the option code.  Once both\n   parties have
    agreed to use the option, subnegotiation takes place by\n   using the command
    SB, followed by the option code, followed by the\n   parameter(s), followed by
    the command SE.  Each party is presumed to\n   be able to parse the parameter(s),
    since each has indicated that the\n   option is supported (via the initial exchange
    of WILL and DO).  On\n   the other hand, the receiver may locate the end of a
    parameter string\n   by searching for the SE command (i.e., the string IAC SE),
    even if\n   the receiver is unable to parse the parameters.  Of course, either\n
    \  party may refuse to pursue further subnegotiation at any time by\n   sending
    a WON'T or DON'T to the other party.\nRFC 855                                                         May
    1983\n   Thus, for option \"ABC\", which requires subnegotiation, the formats
    of\n   the TELNET commands are:\n      IAC WILL ABC\n         Offer to use option
    ABC (or favorable acknowledgment of other\n         party's request)\n      IAC
    DO ABC\n         Request for other party to use option ABC (or favorable\n         acknowledgment
    of other party's offer)\n      IAC SB ABC <parameters> IAC SE\n         One step
    of subnegotiation, used by either party.\n   Designers of options requiring \"subnegotiation\"
    must take great care\n   to avoid unending loops in the subnegotiation process.
    \ For example,\n   if each party can accept any value of a parameter, and both
    parties\n   suggest parameters with different values, then one is likely to have\n
    \  an infinite oscillation of \"acknowledgments\" (where each receiver\n   believes
    it is only acknowledging the new proposals of the other).\n   Finally, if parameters
    in an option \"subnegotiation\" include a byte\n   with a value of 255, it is
    necessary to double this byte in\n   accordance the general TELNET rules.\n"
  title: __initial_text__
