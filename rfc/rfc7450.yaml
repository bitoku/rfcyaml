- title: __initial_text__
  contents:
  - '                     Automatic Multicast Tunneling

    '
- title: Abstract
  contents:
  - "Abstract\n   This document describes Automatic Multicast Tunneling (AMT), a\n\
    \   protocol for delivering multicast traffic from sources in a\n   multicast-enabled\
    \ network to receivers that lack multicast\n   connectivity to the source network.\
    \  The protocol uses UDP\n   encapsulation and unicast replication to provide\
    \ this functionality.\n   The AMT protocol is specifically designed to support\
    \ rapid deployment\n   by requiring minimal changes to existing network infrastructure.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc7450.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................3\n\
    \   2. Applicability ...................................................3\n  \
    \ 3. Terminology .....................................................4\n    \
    \  3.1. Requirements Notation ......................................4\n      3.2.\
    \ Definitions ................................................4\n      3.3. Abbreviations\
    \ ..............................................5\n   4. Protocol Overview ...............................................6\n\
    \      4.1. General Architecture .......................................6\n  \
    \         4.1.1. Relationship to IGMP and MLD Protocols ..............6\n    \
    \       4.1.2. Gateways ............................................7\n      \
    \     4.1.3. Relays .............................................10\n        \
    \   4.1.4. Deployment .........................................13\n          \
    \ 4.1.5. Discovery ..........................................14\n      4.2. General\
    \ Operation .........................................15\n           4.2.1. Message\
    \ Sequences ..................................15\n           4.2.2. Tunneling\
    \ ..........................................26\n   5. Protocol Description ...........................................31\n\
    \      5.1. Protocol Messages .........................................31\n  \
    \         5.1.1. Relay Discovery ....................................31\n    \
    \       5.1.2. Relay Advertisement ................................32\n      \
    \     5.1.3. Request ............................................34\n        \
    \   5.1.4. Membership Query ...................................35\n          \
    \ 5.1.5. Membership Update ..................................39\n           5.1.6.\
    \ Multicast Data .....................................41\n           5.1.7. Teardown\
    \ ...........................................43\n      5.2. Gateway Operation\
    \ .........................................45\n           5.2.1. IP/IGMP/MLD Protocol\
    \ Requirements ..................45\n           5.2.2. Pseudo-Interface Configuration\
    \ .....................47\n           5.2.3. Gateway Service ....................................48\n\
    \      5.3. Relay Operation ...........................................61\n  \
    \         5.3.1. IP/IGMP/MLD Protocol Requirements ..................61\n    \
    \       5.3.2. Startup ............................................61\n      \
    \     5.3.3. Running ............................................62\n        \
    \   5.3.4. Shutdown ...........................................73\n          \
    \ 5.3.5. Response MAC Generation ............................73\n           5.3.6.\
    \ Private Secret Generation ..........................74\n   6. Security Considerations\
    \ ........................................74\n      6.1. Relays ....................................................74\n\
    \      6.2. Gateways ..................................................76\n  \
    \    6.3. Encapsulated IP Packets ...................................76\n   7.\
    \ IANA Considerations ............................................77\n      7.1.\
    \ IPv4 and IPv6 Anycast Prefix Allocation ...................77\n           7.1.1.\
    \ IPv4 ...............................................77\n           7.1.2. IPv6\
    \ ...............................................78\n      7.2. UDP Port Number\
    \ ...........................................78\n   8. References .....................................................78\n\
    \      8.1. Normative References ......................................78\n  \
    \    8.2. Informative References ....................................79\n   Acknowledgments\
    \ ...................................................81\n   Contributors ......................................................82\n\
    \   Author's Address ..................................................82\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   The advantages and benefits provided by multicast technologies\
    \ are\n   well known.  There are a number of application areas that are ideal\n\
    \   candidates for the use of multicast, including media broadcasting,\n   video\
    \ conferencing, collaboration, real-time data feeds, data\n   replication, and\
    \ software updates.  Unfortunately, many of these\n   applications lack multicast\
    \ connectivity to networks that carry\n   traffic generated by multicast sources.\
    \  The reasons for the lack of\n   connectivity vary but are primarily the result\
    \ of service provider\n   policies and network limitations.\n   Automatic Multicast\
    \ Tunneling (AMT) is a protocol that uses UDP-based\n   encapsulation to overcome\
    \ the aforementioned lack of multicast\n   connectivity.  AMT enables sites, hosts,\
    \ or applications that do not\n   have native multicast access to a network with\
    \ multicast connectivity\n   to a source, to request and receive Source-Specific\
    \ Multicast (SSM)\n   [RFC4607] and Any-Source Multicast (ASM) [RFC1112] traffic\
    \ from a\n   network that does provide multicast connectivity to that source.\n"
- title: 2.  Applicability
  contents:
  - "2.  Applicability\n   This document describes a protocol that may be used to\
    \ deliver\n   multicast traffic from a multicast-enabled network to sites that\
    \ lack\n   multicast connectivity to the source network.  This document does not\n\
    \   describe any methods for sourcing multicast traffic from isolated\n   sites,\
    \ as this topic is out of scope.\n   AMT is not intended to be used as a substitute\
    \ for native multicast,\n   especially in conditions or environments requiring\
    \ high traffic flow.\n   AMT uses unicast replication to reach multiple receivers,\
    \ and the\n   bandwidth cost for this replication will be higher than that required\n\
    \   if the receivers were reachable via native multicast.\n   AMT is designed\
    \ to be deployed at the border of networks possessing\n   native multicast capabilities\
    \ where access and provisioning can be\n   managed by the AMT service provider.\n"
- title: 3.  Terminology
  contents:
  - '3.  Terminology

    '
- title: 3.1.  Requirements Notation
  contents:
  - "3.1.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 3.2.  Definitions
  contents:
  - "3.2.  Definitions\n   This document adopts the following definitions for use\
    \ in describing\n   the protocol:\n   Downstream:\n      A downstream interface\
    \ or connection that faces away from the\n      multicast distribution root or\
    \ towards multicast receivers.\n   Upstream:\n      An upstream interface or connection\
    \ that faces a multicast\n      distribution root or source.\n   Non-Broadcast\
    \ Multi-Access (NBMA):\n      An NBMA network or interface is one to which multiple\
    \ network\n      nodes (hosts or routers) are attached, but where packets are\n\
    \      transmitted directly from one node to another node over a virtual\n   \
    \   circuit or physical link.  NBMA networks do not support multicast\n      or\
    \ broadcast traffic -- a node that sources multicast traffic must\n      replicate\
    \ the multicast packets for separate transmission to each\n      node that has\
    \ requested the multicast traffic.\n   Multicast Receiver:\n      An entity that\
    \ requests and receives multicast traffic.  A\n      receiver may be a router,\
    \ host, application, or application\n      component.  The method by which a receiver\
    \ transmits group\n      membership requests and receives multicast traffic varies\n\
    \      according to receiver type.\n   Group Membership Database:\n      A group\
    \ membership database describes the current multicast\n      subscription state\
    \ (also referred to as \"reception state\") for an\n      interface or system.\
    \  See Section 3 of [RFC3376] for a detailed\n      definition.\n   Reception\
    \ State:\n      The multicast subscription state of a pseudo-interface, virtual\n\
    \      interface, or physical network interface.  Often synonymous with\n    \
    \  group membership database.\n   Subscription:\n      A group or state entry\
    \ in a group membership database or reception\n      state table.  The presence\
    \ of a subscription entry indicates\n      membership in an IP multicast group.\n\
    \   Group Membership Protocol:\n      The term \"group membership protocol\" is\
    \ used as a generic\n      reference to the Internet Group Management Protocol\
    \ (IGMP)\n      [RFC1112] [RFC2236] [RFC3376] or the Multicast Listener Discovery\n\
    \      protocol [RFC2710] [RFC3810].\n   Multicast Protocol:\n      The term \"\
    multicast protocol\" is used as a generic reference to\n      multicast routing\
    \ protocols used to join or leave multicast\n      distribution trees, such as\
    \ Protocol Independent Multicast -\n      Sparse Mode (PIM-SM) [RFC4601].\n  \
    \ Network Address Translation (NAT):\n      Network Address Translation is the\
    \ process of modifying the source\n      IP address and port numbers carried by\
    \ an IP packet while\n      transiting a network node (see [RFC2663]).  Intervening\
    \ NAT\n      devices may change the source address and port carried by messages\n\
    \      sent from an AMT gateway to an AMT relay, possibly producing\n      changes\
    \ in protocol state and behavior.\n   Anycast:\n      A network addressing and\
    \ routing method in which packets from a\n      single sender are routed to the\
    \ topologically nearest node in a\n      group of potential receivers all identified\
    \ by the same\n      destination address.  See [RFC4786].\n"
- title: 3.3.  Abbreviations
  contents:
  - "3.3.  Abbreviations\n      AMT - Automatic Multicast Tunneling protocol.\n  \
    \    ASM - Any-Source Multicast.\n      DoS - Denial-of-Service (attack) and DDoS\
    \ for distributed DoS.\n      IGMP - Internet Group Management Protocol (v1, v2,\
    \ and v3).\n      IP - Internet Protocol (v4 and v6).\n      MAC - Message Authentication\
    \ Code (or Cookie).\n      MLD - Multicast Listener Discovery protocol (v1 and\
    \ v2).\n      NAT - Network Address Translation (or translation node).\n     \
    \ NBMA - Non-Broadcast Multi-Access (network, interface, or mode).\n      PIM\
    \ - Protocol Independent Multicast.\n      SSM - Source-Specific Multicast.\n"
- title: 4.  Protocol Overview
  contents:
  - "4.  Protocol Overview\n   This section provides an informative description of\
    \ the protocol.  A\n   normative description of the protocol and implementation\
    \ requirements\n   may be found in Section 5.\n"
- title: 4.1.  General Architecture
  contents:
  - "4.1.  General Architecture\n   Isolated Site |    Unicast Network   |  Native\
    \ Multicast\n                 |      (Internet)      |\n                 |   \
    \                   |\n                 |                      |\n           \
    \      |   Group Membership   |\n      +-------+ =========================> +-------+\
    \ Multicast +------+\n      |Gateway|  |                      |  | Relay |<----//----|Source|\n\
    \      +-------+ <========================= +-------+           +------+\n   \
    \              |   Multicast Data     |\n                 |                  \
    \    |\n                 |                      |\n                     Figure\
    \ 1: Basic AMT Architecture\n   The AMT protocol employs a client-server model\
    \ in which a \"gateway\"\n   sends requests to receive specific multicast traffic\
    \ to a \"relay\"\n   that responds by delivering the requested multicast traffic\
    \ back to\n   the gateway.\n   Gateways are generally deployed within networks\
    \ that lack multicast\n   support or lack connectivity to a multicast-enabled\
    \ network\n   containing multicast sources of interest.\n   Relays are deployed\
    \ within multicast-enabled networks that contain,\n   or have connectivity to,\
    \ multicast sources.\n"
- title: 4.1.1.  Relationship to IGMP and MLD Protocols
  contents:
  - "4.1.1.  Relationship to IGMP and MLD Protocols\n   AMT relies on the Internet\
    \ Group Management Protocol (IGMP) [RFC3376]\n   and the Multicast Listener Discovery\
    \ (MLD) protocol [RFC3810] to\n   provide the functionality required to manage,\
    \ communicate, and act on\n   changes in multicast group membership.  A gateway\
    \ or relay\n   implementation does not necessarily require a fully functional,\n\
    \   conforming implementation of IGMP or MLD to adhere to this\n   specification,\
    \ but the protocol description that appears in this\n   document assumes that\
    \ this is the case.  The minimum functional and\n   behavioral requirements for\
    \ the IGMP and MLD protocols are described\n   in Sections 5.2.1 and 5.3.1.\n\
    \               Gateway                          Relay\n                 General\
    \ _____         _____\n     ___________  Query |     |       |     | Query  ___________\n\
    \    |           |<------|     |       |     |<------|           |\n    | Host-Mode\
    \ |       | AMT |       | AMT |       |Router-Mode|\n    | IGMP/MLD  |       |\
    \     |  UDP  |     |       | IGMP/MLD  |\n    |___________|------>|     |<----->|\
    \     |------>|___________|\n                 Report |     |       |     | Report\n\
    \             Leave/Done |     |       |     | Leave/Done\n                  \
    \      |     |       |     |\n    IP Multicast <------|     |       |     |<------\
    \ IP Multicast\n                        |_____|       |_____|\n          Figure\
    \ 2: Multicast Reception State Managed by IGMP/MLD\n   A gateway runs the host\
    \ portion of the IGMP and MLD protocols to\n   generate group membership updates\
    \ that are sent via AMT messages to a\n   relay.  A relay runs the router portion\
    \ of the IGMP and MLD protocols\n   to process the group membership updates to\
    \ produce the required\n   changes in multicast forwarding state.  A relay uses\
    \ AMT messages to\n   send incoming multicast IP datagrams to gateways according\
    \ to their\n   current group membership state.\n   The primary function of AMT\
    \ is to provide the handshaking,\n   encapsulation, and decapsulation required\
    \ to transport the IGMP and\n   MLD messages and multicast IP datagrams between\
    \ the gateways and\n   relays.  The IGMP and MLD messages that are exchanged between\n\
    \   gateways and relays are encapsulated as complete IP datagrams within\n   AMT\
    \ control messages.  Multicast IP datagrams are replicated and\n   encapsulated\
    \ in AMT data messages.  All AMT messages are sent via\n   unicast UDP/IP.\n"
- title: 4.1.2.  Gateways
  contents:
  - "4.1.2.  Gateways\n   The downstream side of a gateway services one or more receivers\
    \ --\n   the gateway accepts group membership requests from receivers and\n  \
    \ forwards requested multicast traffic back to those receivers.  The\n   gateway\
    \ functionality may be directly implemented in the host\n   requesting the multicast\
    \ service or within an application running on\n   a host.\n   The upstream side\
    \ of a gateway connects to relays.  A gateway sends\n   encapsulated IGMP and\
    \ MLD messages to a relay to indicate an interest\n   in receiving specific multicast\
    \ traffic.\n"
- title: 4.1.2.1.  Architecture
  contents:
  - "4.1.2.1.  Architecture\n   Each gateway possesses a logical pseudo-interface:\n\
    \     join/leave ---+                   +----------+\n                   |   \
    \                |          |\n                   V      IGMPv3/MLDv2 |      \
    \    |\n              +---------+ General Query|          |   AMT\n          \
    \    |IGMP/MLD |<-------------|   AMT    | Messages +------+\n              |Host-Mode|\
    \              | Gateway  |<-------->|UDP/IP|\n              |Protocol |------------->|Pseudo-I/F|\
    \          +------+\n              +---------+   IGMP/MLD   |          |     \
    \        ^\n                             Report    |          |             |\n\
    \                           Leave/Done  |          |             V\n    IP Multicast\
    \ <---------------------|          |           +---+\n                       \
    \                +----------+           |I/F|\n                              \
    \                                +---+\n                  Figure 3: AMT Gateway\
    \ Pseudo-Interface\n   The pseudo-interface is conceptually a network interface\
    \ on which the\n   gateway executes the host portion of the IPv4/IGMP (v2 or v3)\
    \ and\n   IPv6/MLD (v1 or v2) protocols.  The multicast reception state of the\n\
    \   pseudo-interface is manipulated using the IGMP or MLD service\n   interface.\
    \  The IGMP and MLD host protocols produce IP datagrams\n   containing group membership\
    \ messages that the gateway will send to\n   the relay.  The IGMP and MLD protocols\
    \ also supply the retransmission\n   and timing behavior required for protocol\
    \ robustness.\n   All AMT encapsulation, decapsulation, and relay interaction\
    \ are\n   assumed to occur within the pseudo-interface.\n   A gateway host or\
    \ application may create separate interfaces for\n   IPv4/IGMP and IPv6/MLD. \
    \ A gateway host or application may also\n   require additional pseudo-interfaces\
    \ for each source or domain-\n   specific relay address.\n   Within this document,\
    \ the term \"gateway\" may be used as a generic\n   reference to an entity executing\
    \ the gateway protocol, a gateway\n   pseudo-interface, or a gateway device that\
    \ has one or more interfaces\n   connected to a unicast internetwork and one or\
    \ more AMT gateway\n   pseudo-interfaces.\n   The following diagram illustrates\
    \ how an existing host IP stack\n   implementation might be used to provide AMT\
    \ gateway functionality to\n   a multicast application:\n           +-----------------------------------------------------+\n\
    \           |Host                                                 |\n        \
    \   |    ______________________________________           |\n           |   |\
    \                                      |          |\n           |   |    ___________________________\
    \       |          |\n           |   |   |                           |      |\
    \          |\n           |   |   |                           v      |        \
    \  |\n           |   |   |        +-----------+  +--------------+      |\n   \
    \        |   |   |        |Application|  |  AMT Daemon  |      |\n           |\
    \   |   |        +-----------+  +--------------+      |\n           |   |   |\
    \ join/leave |   ^ data        ^ AMT          |\n           |   |   |        \
    \    |   |             |              |\n           |   |   |       +----|---|-------------|-+\
    \            |\n           |   |   |       |  __|   |_________    | |        \
    \    |\n           |   |   |       | |                |   | |            |\n \
    \          |   |   |       | |       Sockets  |   | |            |\n         \
    \  |   |   |       +-|------+-------+-|---|-+            |\n           |   | \
    \  |       | | IGMP |  TCP  | |UDP| |            |\n           |   |   |     \
    \  +-|------+-------+-|---|-+            |\n           |   |   |       | | ^ \
    \      IP     |   | |            |\n           |   |   |       | | |  ____________|\
    \   | |            |\n           |   |   |       | | | |                | |  \
    \          |\n           |   |   |       +-|-|-|----------------|-+          \
    \  |\n           |   |   |         | | |                |              |\n   \
    \        |   |   | IP(IGMP)| | |IP(UDP(data))   |IP(UDP(AMT))  |\n           |\
    \   |   |         v | |                v              |\n           |   |   |\
    \     +-----------+          +---+            |\n           |   |   |     |Virtual\
    \ I/F|          |I/F|            |\n           |   |   |     +-----------+   \
    \       +---+            |\n           |   |   |         |   ^               \
    \ ^              |\n           |   |   | IP(IGMP)|   |IP(UDP(data))   |      \
    \        |\n           |   |   |_________|   |IP(IGMP)        |              |\n\
    \           |   |                 |                |              |\n        \
    \   |   |_________________|                |              |\n           |    \
    \                                  |              |\n           +--------------------------------------|--------------+\n\
    \                                                  v\n                       \
    \                       AMT Relay\n            Figure 4: Virtual Interface Implementation\
    \ Example\n   In this example, the host IP stack uses a virtual network interface\n\
    \   to interact with a gateway pseudo-interface implementation.\n"
- title: 4.1.2.2.  Use Cases
  contents:
  - "4.1.2.2.  Use Cases\n   Use cases for gateway functionality include the following:\n\
    \   IGMP/MLD Proxy\n      An IGMP/MLD proxy that runs AMT on an upstream interface\
    \ and\n      router-mode IGMP/MLD on downstream interfaces to provide host\n \
    \     access to multicast traffic via the IGMP and MLD protocols.\n   Virtual\
    \ Network Interface\n      A virtual network interface or pseudo-network device\
    \ driver that\n      runs AMT on a physical network interface to provide socket-layer\n\
    \      access to multicast traffic via the IGMP/MLD service interface\n      provided\
    \ by the host IP stack.\n   Application\n      An application or application component\
    \ that implements and\n      executes IGMP/MLD and AMT internally to gain access\
    \ to multicast\n      traffic.\n"
- title: 4.1.3.  Relays
  contents:
  - "4.1.3.  Relays\n   The downstream side of a relay services gateways -- the relay\
    \ accepts\n   encapsulated IGMP and MLD group membership messages from gateways\
    \ and\n   encapsulates and forwards the requested multicast traffic back to\n\
    \   those gateways.\n   The upstream side of a relay communicates with a native\
    \ multicast\n   infrastructure -- the relay sends join and prune/leave requests\n\
    \   towards multicast sources and accepts requested multicast traffic\n   from\
    \ those sources.\n"
- title: 4.1.3.1.  Architecture
  contents:
  - "4.1.3.1.  Architecture\n   Each relay possesses a logical pseudo-interface:\n\
    \                                       +------------------------------+\n   \
    \                  +--------+        | Multicast Control Plane      |\n      \
    \               |        |IGMP/MLD|                              |\n         \
    \            |        | Query* | +------------+  +----------+ |\n            \
    \         |        |<---//----|IGMPv3/MLDv2|  |Multicast | |\n              AMT\
    \    |        |        | |Router-Mode |->|Routing   |<->\n   +------+ Messages\
    \ | AMT    |----//--->|Protocol    |  |Protocol  | |\n   |UDP/IP|<-------->| Relay\
    \  |IGMP/MLD| +------------+  +----------+ |\n   +------+          | Pseudo-|\
    \ Report |      |               |       |\n      ^              | I/F    | Leave/\
    \ +------|---------------|-------+\n      |              |        |  Done    \
    \     |               |\n      |              |        |               v     \
    \          |\n      V              |        | IP        +-----------+       |\n\
    \    +---+            |        | Multicast |Multicast  |<------+\n    |I/F|  \
    \          |        |<---//-----|Forwarding |\n    +---+            +--------+\
    \           |Plane      |<--- IP Multicast\n                                 \
    \         +-----------+\n    * Queries, if generated, are consumed by the pseudo-interface.\n\
    \            Figure 5: AMT Relay Pseudo-Interface (Router-Based)\n   The pseudo-interface\
    \ is conceptually a network interface on which the\n   relay runs the router portion\
    \ of the IPv4/IGMPv3 and IPv6/MLDv2\n   protocols.  Relays do not send unsolicited\
    \ IGMPv3/MLDv2 query\n   messages to gateways so relays must consume or discard\
    \ any local\n   queries normally generated by IGMPv3 or MLDv2.  Note that the\n\
    \   protocol mandates the use of IGMPv3 and MLDv2 for query messages.\n   The\
    \ AMT protocol is primarily intended for use in SSM applications\n   and relies\
    \ on several values provided by IGMPv3/MLDv2 to control\n   gateway behavior.\n\
    \   A relay maintains group membership state for each gateway connected\n   through\
    \ the pseudo-interface as well as for the entire\n   pseudo-interface (if multiple\
    \ gateways are managed via a single\n   interface).  Multicast packets received\
    \ on upstream interfaces on the\n   relay are routed to the pseudo-interface where\
    \ they are replicated,\n   encapsulated, and sent to interested gateways.  Changes\
    \ in the\n   pseudo-interface group membership state may trigger the transmission\n\
    \   of multicast protocol requests upstream towards a given source or\n   rendezvous\
    \ point and cause changes in internal routing/forwarding\n   state.\n   The relay\
    \ pseudo-interface is an architectural abstraction used to\n   describe AMT protocol\
    \ operation.  For the purposes of this document,\n   the pseudo-interface is most\
    \ easily viewed as an interface to a\n   single gateway -- encapsulation, decapsulation,\
    \ and other\n   AMT-specific processing occurs \"within\" the pseudo-interface\
    \ while\n   forwarding and replication occur outside of it.\n   An alternative\
    \ view is to treat the pseudo-interface as a\n   non-broadcast multi-access (NBMA)\
    \ network interface whose link layer\n   is the unicast-only network over which\
    \ AMT messages are exchanged\n   with gateways.  Individual gateways are conceptually\
    \ treated as\n   logical NBMA links on the interface.  In this architectural model,\n\
    \   group membership tracking, replication, and forwarding functions\n   occur\
    \ in the pseudo-interface.\n   This document does not specify any particular architectural\
    \ solution\n   -- a relay developer may choose to implement and distribute protocol\n\
    \   functionality as required to take advantage of existing relay\n   platform\
    \ services and architecture.\n   Within this document, the term \"relay\" may\
    \ be used as a generic\n   reference to an entity executing the relay protocol,\
    \ a relay\n   pseudo-interface, or a relay device that has one or more network\n\
    \   interfaces with multicast connectivity to a native multicast\n   infrastructure,\
    \ zero or more interfaces connected to a unicast\n   internetwork, and one or\
    \ more relay pseudo-interfaces.\n"
- title: 4.1.3.2.  Use Cases
  contents:
  - "4.1.3.2.  Use Cases\n   Use cases for relay functionality include the following:\n\
    \   Multicast Router\n      A multicast router that runs AMT on a downstream interface\
    \ to\n      provide gateway access to multicast traffic.  A \"relay router\"\n\
    \      uses a multicast routing protocol (e.g., PIM-SM [RFC4601]) to\n      construct\
    \ a forwarding path for multicast traffic by sending join\n      and prune messages\
    \ to neighboring routers to join or leave\n      multicast distribution trees\
    \ for a given SSM source or ASM\n      rendezvous point.\n   IGMP/MLD Proxy Router\n\
    \      An IGMP/MLD proxy that runs AMT on a downstream interface and\n      host-mode\
    \ IGMPv3/MLDv2 on an upstream interface.  This \"relay\n      proxy\" sends group\
    \ membership reports to a local, multicast-\n      enabled router to join and\
    \ leave specific SSM or ASM groups.\n"
- title: 4.1.4.  Deployment
  contents:
  - "4.1.4.  Deployment\n   The AMT protocol calls for a relay deployment model that\
    \ uses anycast\n   addressing [RFC1546] [RFC4291] to pair gateways with relays.\n\
    \   Under this approach, one or more relays advertise a route for the\n   same\
    \ IP address prefix.  To find a relay with which to communicate, a\n   gateway\
    \ sends a message to an anycast IP address within that prefix.\n   This message\
    \ is routed to the topologically nearest relay that has\n   advertised the prefix.\
    \  The relay that receives the message responds\n   by sending its unicast address\
    \ back to the gateway.  The gateway uses\n   this address as the destination address\
    \ for any messages it\n   subsequently sends to the relay.\n   The use of anycast\
    \ addressing provides the following benefits:\n   o  Relays may be deployed at\
    \ multiple locations within a single\n      multicast-enabled network.  Relays\
    \ might be installed \"near\"\n      gateways to reduce bandwidth requirements\
    \ and latency and to limit\n      the number of gateways that might be serviced\
    \ by a single relay.\n   o  Relays may be added or removed at any time, thereby\
    \ allowing\n      staged deployment, scaling, and hot-swapping -- the relay\n\
    \      discovery process will always return the nearest operational\n      relay.\n\
    \   o  Relays may take themselves offline when they exhaust resources\n      required\
    \ to service additional gateways.  Existing gateway\n      connections may be\
    \ preserved, but new gateway requests would be\n      routed to the next-nearest\
    \ relay.\n"
- title: 4.1.4.1.  Public versus Private
  contents:
  - "4.1.4.1.  Public versus Private\n   Ideally, the AMT protocol would provide a\
    \ universal solution for\n   connecting receivers to multicast sources, so that\
    \ any gateway could\n   be used to access any globally advertised multicast source\
    \ via\n   publicly accessible, widely deployed relays.  Unfortunately, today's\n\
    \   Internet does not yet allow this, because many relays will lack\n   native\
    \ multicast access to sources even though they may be globally\n   accessible\
    \ via unicast.\n   In these cases, a provider may deploy relays within their own\
    \ source\n   network to allow for multicast distribution within that network.\n\
    \   Gateways that use these relays must use a provider-specific relay\n   discovery\
    \ mechanism or a private anycast address to obtain access to\n   these relays.\n"
- title: 4.1.4.2.  Congestion Considerations
  contents:
  - "4.1.4.2.  Congestion Considerations\n   AMT relies on UDP to provide best-effort\
    \ delivery of multicast data\n   to gateways.  Neither AMT nor UDP provides the\
    \ congestion control\n   mechanisms required to regulate the flow of data messages\
    \ passing\n   through a network.  While congestion remediation might be provided\
    \ by\n   multicast receiver applications via multicast group selection or\n  \
    \ upstream reporting mechanisms, there are no means by which to ensure\n   that\
    \ such mechanisms are employed.  To limit the possible congestion\n   across a\
    \ network or wider Internet, AMT service providers are\n   expected to deploy\
    \ AMT relays near the provider's network border and\n   its interface with edge\
    \ routers.  The provider must limit relay\n   address advertisements to those\
    \ edges to prevent distant gateways\n   from being able to access a relay and\
    \ potentially generate flows that\n   consume or exceed the capacity of intervening\
    \ links.\n"
- title: 4.1.5.  Discovery
  contents:
  - "4.1.5.  Discovery\n   To execute the gateway portion of the protocol, a gateway\
    \ requires a\n   unicast IP address of an operational relay.  This address may\
    \ be\n   obtained using a number of methods -- it may be statically assigned\n\
    \   or dynamically chosen via some form of relay discovery process.\n   As described\
    \ in the previous section, the AMT protocol provides a\n   relay discovery method\
    \ that relies on anycast addressing.  Gateways\n   are not required to use AMT\
    \ relay discovery, but all relay\n   implementations must support it.\n   The\
    \ AMT protocol uses the following terminology when describing the\n   discovery\
    \ process:\n   Relay Discovery Address Prefix:\n      The anycast address prefix\
    \ used to route discovery messages to a\n      relay.\n   Relay Discovery Address:\n\
    \      The anycast destination address used when sending discovery\n      messages.\n\
    \   Relay Address:\n      The unicast IP address obtained as a result of the discovery\n\
    \      process.\n"
- title: 4.1.5.1.  Relay Discovery Address Selection
  contents:
  - "4.1.5.1.  Relay Discovery Address Selection\n   The selection of an anycast Relay\
    \ Discovery Address may be source\n   dependent, as a relay located via relay\
    \ discovery must have multicast\n   connectivity to a desired source.\n   Similarly,\
    \ the selection of a unicast Relay Address may be source\n   dependent, as a relay\
    \ contacted by a gateway to supply multicast\n   traffic must have native multicast\
    \ connectivity to the traffic\n   source.\n   Methods that might be used to perform\
    \ source-specific or\n   group-specific relay selection are highly implementation\
    \ dependent\n   and are not further addressed by this document.  Possible approaches\n\
    \   include the use of static lookup tables, DNS-based queries, or a\n   provision\
    \ of a service interface that accepts join requests on\n   (S,G,relay-discovery-address)\
    \ or (S,G,relay-address) tuples.\n"
- title: 4.1.5.2.  Relay Discovery Address Prefix
  contents:
  - "4.1.5.2.  Relay Discovery Address Prefix\n   IANA has assigned IPv4 and IPv6\
    \ address prefixes for use in\n   advertising and discovering publicly accessible\
    \ relays.\n   A Relay Discovery Address is constructed from an address prefix\
    \ by\n   setting the low-order octet of the prefix address to 1 (for both IPv4\n\
    \   and IPv6).  All remaining addresses within each prefix are reserved\n   for\
    \ future use.\n   Public relays must advertise a route to the address prefix (e.g.,\
    \ via\n   BGP [RFC4271]) and configure an interface to respond to the Relay\n\
    \   Discovery Address.\n   The discovery address prefixes are described in Section\
    \ 7.\n"
- title: 4.2.  General Operation
  contents:
  - '4.2.  General Operation

    '
- title: 4.2.1.  Message Sequences
  contents:
  - "4.2.1.  Message Sequences\n   The AMT protocol defines the following messages\
    \ for control and\n   encapsulation.  These messages are exchanged as UDP/IP datagrams,\
    \ one\n   message per datagram.\n   Relay Discovery:\n      Sent by gateways to\
    \ solicit a Relay Advertisement from any relay.\n      Used to find a relay with\
    \ which to communicate.\n   Relay Advertisement:\n      Sent by relays as a response\
    \ to a Relay Discovery message.  Used\n      to deliver a Relay Address to a gateway.\n\
    \   Request:\n      Sent by gateways to solicit a Membership Query message from\
    \ a\n      relay.\n   Membership Query:\n      Sent by relays as a response to\
    \ a Request message.  Used to\n      deliver an encapsulated IGMPv3 or MLDv2 query\
    \ message to the\n      gateway.\n   Membership Update:\n      Sent by gateways\
    \ to deliver an encapsulated IGMP or MLD\n      report/leave/done message to a\
    \ relay.\n   Multicast Data:\n      Sent by relays to deliver an encapsulated\
    \ IP multicast datagram or\n      datagram fragment to a gateway.\n   Teardown:\n\
    \      Sent by gateways to stop the delivery of Multicast Data messages\n    \
    \  requested in an earlier Membership Update message.\n   The following sections\
    \ describe how these messages are exchanged to\n   execute the protocol.\n"
- title: 4.2.1.1.  Relay Discovery Sequence
  contents:
  - "4.2.1.1.  Relay Discovery Sequence\n                       Gateway          \
    \     Relay\n                       -------               -----\n            \
    \              :                    :\n                          |           \
    \         |\n                      [1] |Relay Discovery     |\n              \
    \            |------------------->|\n                          |             \
    \       |\n                          | Relay Advertisement| [2]\n            \
    \              |<-------------------|\n                      [3] |           \
    \         |\n                          :                    :\n              \
    \    Figure 6: AMT Relay Discovery Sequence\n   The following sequence describes\
    \ how the Relay Discovery and Relay\n   Advertisement messages are used to find\
    \ a relay with which to\n   communicate:\n   1.  The gateway sends a Relay Discovery\
    \ message containing a random\n       nonce to the Relay Discovery Address.  If\
    \ the Relay Discovery\n       Address is an anycast address, the message is routed\
    \ to the\n       topologically nearest network node that advertises that address.\n\
    \   2.  The node receiving the Relay Discovery message sends a Relay\n       Advertisement\
    \ message back to the source of the Relay Discovery\n       message.  The message\
    \ carries a copy of the nonce contained in\n       the Relay Discovery message\
    \ and the unicast IP address of a\n       relay.\n   3.  When the gateway receives\
    \ the Relay Advertisement message, it\n       verifies that the nonce matches\
    \ the one sent in the Relay\n       Discovery message and, if it does, uses the\
    \ Relay Address carried\n       by the Relay Advertisement as the destination\
    \ address for\n       subsequent AMT messages.\n   Note that the responder need\
    \ not be a relay -- the responder may\n   obtain a Relay Address by some other\
    \ means and return the result in\n   the Relay Advertisement (i.e., the responder\
    \ is a load-balancer or\n   broker).\n"
- title: 4.2.1.2.  Membership Update Sequence
  contents:
  - "4.2.1.2.  Membership Update Sequence\n   There exists a significant difference\
    \ between normal IGMP and MLD\n   behavior and that required by AMT.  An IGMP/MLD\
    \ router acting as a\n   querier normally transmits query messages on a network\
    \ interface to\n   construct and refresh group membership state for the connected\n\
    \   network.  These query messages are multicast to all IGMP/MLD-enabled\n   hosts\
    \ on the network.  Each host responds by multicasting report\n   messages that\
    \ describe their current multicast reception state.\n   However, AMT does not\
    \ allow relays to send unsolicited query messages\n   to gateways, as the set\
    \ of active gateways may be unknown to the\n   relay and potentially quite large.\
    \  Instead, AMT requires each\n   gateway to periodically send a message to a\
    \ relay to solicit a query\n   response.  A gateway accomplishes this by sending\
    \ a Request message\n   to a relay.  The relay responds by sending a Membership\
    \ Query message\n   back to the gateway.  The Membership Query message carries\
    \ an\n   encapsulated query that is processed by the IGMP or MLD protocol\n  \
    \ implementation on the gateway to produce a membership/listener\n   report. \
    \ Each time the gateway receives a Membership Query message,\n   it starts a timer\
    \ whose expiration will trigger the start of a new\n   Request->Membership Query\
    \ message exchange.  This timer-driven\n   sequence is used to mimic the transmission\
    \ of a periodic query by an\n   IGMP/MLD router.  This query cycle may continue\
    \ indefinitely once\n   started by sending the initial Request message.\n   A\
    \ membership update occurs when an IGMP or MLD report, leave, or done\n   message\
    \ is passed to the gateway pseudo-interface.  These messages\n   may be produced\
    \ as a result of the aforementioned query processing or\n   as a result of receiver\
    \ interaction with the IGMP/MLD service\n   interface.  Each report is encapsulated\
    \ and sent to the relay after\n   the gateway has successfully established communication\
    \ with the relay\n   via a Request and Membership Query message exchange.  If\
    \ a report is\n   passed to the pseudo-interface before the gateway has received\
    \ a\n   Membership Query message from the relay, the gateway may discard the\n\
    \   report or queue the report for delivery after a Membership Query is\n   received.\
    \  Subsequent IGMP/MLD report/leave/done messages that are\n   passed to the pseudo-interface\
    \ are immediately encapsulated and\n   transmitted to the relay.\n           IGMP/MLD\
    \             Pseudo-I/F              Relay\n           --------             ----------\
    \              -----\n              :                     :                  \
    \   :\n              |                     |       Request       |\n         \
    \     |                    1|-------------------->|\n              |         \
    \            |  Membership Query   |2\n    Query     |                     | \
    \      Q(0,{})       |\n    Timer     |         Start      3|<--------------------|\n\
    \     (QT)<--------------------------|                     |\n              |\
    \        Q(0,{})      |                     |\n              |<--------------------|\
    \                     |\n             4|         R({})       |  Membership Update\
    \  |\n              |-------------------->|5       R({})        |\n          \
    \    |                     |====================>|6a\n    Join(S,G) :        \
    \             :                     :\n   ()-------->|7 R({G:ALLOW({S})})  | \
    \ Membership Update  |\n              |-------------------->|8  R({G:ALLOW({S})})\
    \ |\n              |                     |====================>|9a  Join(S,G)\n\
    \              |                     |                     |---------->()\n  \
    \            :                     :                     :\n              |  \
    \       ------------|---------------------|------------\n              |     \
    \   |            |                     |            |\n              |       \
    \ |            |    Multicast Data   |  IP(S,G)   |\n              |        |\
    \            |       IP(S,G)     10|<--------() |\n              |        |  IP(S,G)\
    \ 11|<====================|            |\n              |        | ()<--------|\
    \                     |            |\n              |        |            |  \
    \                   |            |\n              :         ------------:---------------------:------------\n\
    \              |       Expired       |                     |\n     (QT)-------------------------->|12\
    \      Request      |\n              |                    1|-------------------->|\n\
    \              |                     |  Membership Query   |2\n              |\
    \                     |       Q(0,{})       |\n              |        Start  \
    \     3|<--------------------|\n     (QT)<--------------------------|        \
    \             |\n              |       Q(0,{})       |                     |\n\
    \              |<--------------------|                     |\n             4|\
    \ R({G:INCLUDE({S})}) |  Membership Update  |\n              |-------------------->|5\
    \ R({G:INCLUDE({S})})|\n              |                     |====================>|6b\n\
    \   Leave(S,G) :                     :                     :\n   ()-------->|7\
    \ R({G:BLOCK({S})})  |  Membership Update  |\n              |-------------------->|8\
    \  R({G:BLOCK({S})}) |\n              |                     |====================>|9b\
    \ Prune(S,G)\n              |                     |                     |---------->()\n\
    \              :                     :                     :\n        Figure 7:\
    \ Membership Update Sequence (IGMPv3/MLDv2 Example)\n   The following sequence\
    \ describes how the Request, Membership Query,\n   and Membership Update messages\
    \ are used to report current group\n   membership state or changes in group membership\
    \ state:\n   1.   A gateway sends a Request message to the relay that contains\
    \ a\n        random nonce and a flag indicating whether the relay should\n   \
    \     return an IGMPv3 or MLDv2 General Query.\n   2.   When the relay receives\
    \ a Request message, it generates a\n        message authentication code (MAC),\
    \ typically, by computing a\n        hash digest from the message source IP address,\
    \ source UDP port,\n        request nonce, and a private secret.  The relay then\
    \ sends a\n        Membership Query message to the gateway that contains the\n\
    \        request nonce, the MAC, and an IGMPv3 or MLDv2 General Query.\n   3.\
    \   When the gateway receives a Membership Query message, it\n        verifies\
    \ that the request nonce matches the one sent in the last\n        Request, and\
    \ if it does, the gateway saves the request nonce and\n        MAC for use in\
    \ sending subsequent Membership Update messages.\n        The gateway starts a\
    \ timer whose expiration will trigger the\n        transmission of a new Request\
    \ message and extracts the\n        encapsulated General Query message for processing\
    \ by the IGMP or\n        MLD protocol.  The query timer duration is specified\
    \ by the\n        relay in the Querier's Query Interval Code (QQIC) field in the\n\
    \        IGMPv3 or MLDv2 General Query.  The QQIC field is defined in\n      \
    \  Section 4.1.7 of [RFC3376] and Section 5.1.9 of [RFC3810]).\n   4.   The gateway's\
    \ IGMP or MLD protocol implementation processes the\n        General Query to\
    \ produce a current-state report.\n   5.   When an IGMP or MLD report is passed\
    \ to the pseudo-interface,\n        the gateway encapsulates the report in a Membership\
    \ Update\n        message and sends it to the relay.  The request nonce and MAC\n\
    \        fields in the Membership Update are assigned the values from the\n  \
    \      last Membership Query message received for the corresponding\n        group\
    \ membership protocol (IGMPv3 or MLDv2).\n   6.   When the relay receives a Membership\
    \ Update message, it computes\n        a MAC from the message source IP address,\
    \ source UDP port,\n        request nonce, and a private secret.  The relay accepts\
    \ the\n        Membership Update message if the received MAC matches the\n   \
    \     computed MAC; otherwise, the message is ignored.  If the message\n     \
    \   is accepted, the relay may proceed to allocate, refresh, or\n        modify\
    \ tunnel state.  This includes making any group membership,\n        routing,\
    \ and forwarding state changes, and also issuing any\n        upstream protocol\
    \ requests required to satisfy the state change.\n        The diagram illustrates\
    \ two scenarios:\n        A.  The gateway has not previously reported any group\n\
    \            subscriptions and the report does not contain any group\n       \
    \     subscriptions, so the relay takes no action.\n        B.  The gateway has\
    \ previously reported a group subscription, so\n            the current-state\
    \ report lists all current subscriptions.\n            The relay responds by refreshing\
    \ tunnel or group state and\n            resetting any related timers.\n   7.\
    \   A receiver indicates to the gateway that it wishes to join\n        (allow)\
    \ or leave (block) specific multicast traffic.  This\n        request is typically\
    \ made using some form of IGMP/MLD service\n        interface (as described in\
    \ Section 2 of [RFC3376] and Section 3\n        of [RFC3810]).  The IGMP/MLD protocol\
    \ responds by generating an\n        IGMP or MLD state-change message.\n   8.\
    \   When an IGMP or MLD report/leave/done message is passed to the\n        pseudo-interface,\
    \ the gateway encapsulates the message in a\n        Membership Update message\
    \ and sends it to the relay.  The\n        request nonce and MAC fields in the\
    \ Membership Update are\n        assigned the values from the last Membership\
    \ Query message\n        received for the corresponding group membership protocol\
    \ (IGMP\n        or MLD).\n        The IGMP and MLD protocols may generate multiple\
    \ messages to\n        provide robustness against packet loss -- each of these\
    \ must be\n        encapsulated in a new Membership Update message and sent to\
    \ the\n        relay.  The Querier's Robustness Variable (QRV) field in the\n\
    \        last IGMP/MLD query delivered to the IGMP/MLD protocol is\n        typically\
    \ used to specify the number of repetitions (i.e., the\n        host adopts the\
    \ QRV value as its own Robustness Variable value).\n        The QRV field is defined\
    \ in Section 4.1.6 of [RFC3376] and\n        Section 5.1.8 of [RFC3810].\n   9.\
    \   When the relay receives a Membership Update message, it again\n        computes\
    \ a MAC from the message source IP address, source UDP\n        port, request\
    \ nonce, and a private secret.  The relay accepts\n        the Membership Update\
    \ message if the received MAC matches the\n        computed MAC; otherwise, the\
    \ message is ignored.  If the message\n        is accepted, the relay processes\
    \ the encapsulated IGMP/MLD and\n        allocates, modifies, or deletes tunnel\
    \ state accordingly.  This\n        includes making any group membership, routing,\
    \ and forwarding\n        state changes, and also issuing any upstream protocol\
    \ requests\n        required to satisfy the state change.  The diagram illustrates\n\
    \        two scenarios:\n        A.  The gateway wishes to add a group subscription.\n\
    \        B.  The gateway wishes to delete a previously reported group\n      \
    \      subscription.\n   10.  Multicast datagrams transmitted from a source travel\
    \ through the\n        native multicast infrastructure to the relay.  When the\
    \ relay\n        receives a multicast IP datagram that carries a source and\n\
    \        destination address for which a gateway has expressed an\n        interest\
    \ in receiving (via the Membership Update message), it\n        encapsulates the\
    \ datagram into a Multicast Data message and\n        sends it to the gateway\
    \ using the source IP address and UDP port\n        carried by the Membership\
    \ Update message as the destination\n        address.\n   11.  When the gateway\
    \ receives a Multicast Data message, it extracts\n        the multicast packet\
    \ from the message and passes it on to the\n        appropriate receivers.\n \
    \  12.  When the query timer expires, the gateway sends a new Request\n      \
    \  message to the relay to start a new membership update cycle.\n   The MAC-based\
    \ source-authentication mechanism described above\n   provides a simple defense\
    \ against malicious attempts to exhaust relay\n   resources via source-address\
    \ spoofing.  Flooding a relay with spoofed\n   Request or Membership Update messages\
    \ may consume computational\n   resources and network bandwidth but will not result\
    \ in the allocation\n   of state, because the Request message is stateless and\
    \ spoofed\n   Membership Update messages will fail source authentication and be\n\
    \   rejected by the relay.\n   A relay will only allocate new tunnel state if\
    \ the IGMP/MLD report\n   carried by the Membership Update message creates one\
    \ or more group\n   subscriptions.\n   A relay deallocates tunnel state after\
    \ one of the following events:\n   the gateway sends a Membership Update message\
    \ containing a report\n   that results in the deletion of all remaining group\
    \ subscriptions,\n   the IGMP/MLD state expires (due to lack of refresh by the\
    \ gateway),\n   or the relay receives a valid Teardown message from the gateway\
    \ (see\n   Section 4.2.1.3).\n   A gateway that accepts or reports group subscriptions\
    \ for both IPv4\n   and IPv6 addresses will send separate Request and Membership\
    \ Update\n   messages for each protocol (IPv4/IGMP and IPv6/MLD).\n"
- title: 4.2.1.3.  Teardown Sequence
  contents:
  - "4.2.1.3.  Teardown Sequence\n   A gateway sends a Teardown message to a relay\
    \ to request that it stop\n   delivering Multicast Data messages to a tunnel endpoint\
    \ created by an\n   earlier Membership Update message.  This message is intended\
    \ to be\n   used following a gateway address change (see Section 4.2.2.1) to stop\n\
    \   the transmission of undeliverable or duplicate Multicast Data\n   messages.\
    \  Gateway support for the Teardown message is RECOMMENDED.\n   Gateways are not\
    \ required to send them and may instead rely on group\n   membership to expire\
    \ on the relay.\n                      Gateway                  Relay\n      \
    \                -------                  -----\n                         :  \
    \      Request        :\n                     [1] |           N           |\n\
    \                         |---------------------->|\n                        \
    \ |    Membership Query   | [2]\n                         |    N,MAC,gADDR,gPORT\
    \  |\n                         |<======================|\n                   \
    \  [3] |   Membership Update   |\n                         |   ({G:INCLUDE({S})})\
    \  |\n                         |======================>|\n                   \
    \      |                       |\n    ---------------------:-----------------------:---------------------\n\
    \   |                     |                       |                     |\n  \
    \ |                     |    *Multicast Data    |  *IP Packet(S,G)    |\n   |\
    \                     |      gADDR,gPORT      |<-----------------() |\n   |  \
    \  *IP Packet(S,G)  |<======================|                     |\n   | ()<-----------------|\
    \                       |                     |\n   |                     |  \
    \                     |                     |\n    ---------------------:-----------------------:---------------------\n\
    \                         ~                       ~\n                        \
    \ ~        Request        ~\n                     [4] |           N'         \
    \ |\n                         |---------------------->|\n                    \
    \     |   Membership Query    | [5]\n                         | N',MAC',gADDR',gPORT'\
    \ |\n                         |<======================|\n                    \
    \ [6] |                       |\n                         |       Teardown   \
    \     |\n                         |   N,MAC,gADDR,gPORT   |\n                \
    \         |---------------------->|\n                         |              \
    \         | [7]\n                         |   Membership Update   |\n        \
    \                 |  ({G:INCLUDE({S})})   |\n                         |======================>|\n\
    \                         |                       |\n    ---------------------:-----------------------:---------------------\n\
    \   |                     |                       |                     |\n  \
    \ |                     |    *Multicast Data    |  *IP Packet(S,G)    |\n   |\
    \                     |     gADDR',gPORT'     |<-----------------() |\n   |  \
    \  *IP Packet (S,G) |<======================|                     |\n   | ()<-----------------|\
    \                       |                     |\n   |                     |  \
    \                     |                     |\n    ---------------------:-----------------------:---------------------\n\
    \                         |                       |\n                        \
    \ :                       :\n        Figure 8: Teardown Message Sequence (IGMPv3/MLDv2\
    \ Example)\n   The following sequence describes how the Membership Query and\n\
    \   Teardown messages are used to detect an address change and stop the\n   delivery\
    \ of Multicast Data messages to an address:\n   1.  A gateway sends a Request\
    \ message containing a random nonce to\n       the relay.\n   2.  The relay sends\
    \ a Membership Query message to the gateway that\n       contains the source IP\
    \ address (gADDR) and source UDP port\n       (gPORT) values from the Request\
    \ message.  These values will be\n       used to identify the tunnel should one\
    \ be created by a subsequent\n       Membership Update message.\n   3.  When the\
    \ gateway receives a Membership Query message that carries\n       the gateway\
    \ address fields, it compares the gateway IP address\n       and UDP port number\
    \ values with those received in the previous\n       Membership Query (if any).\
    \  If these values do not match, this\n       indicates that the Request message\
    \ arrived at the relay carrying\n       a different source address than the one\
    \ sent previously.  At this\n       point in the sequence, no change in source\
    \ address or port has\n       occurred.\n   4.  The gateway sends a new Request\
    \ message to the relay.  However,\n       this Request message arrives at the\
    \ relay carrying a different\n       source address than that of the previous\
    \ Request due to some\n       change in network interface, address assignment,\
    \ network\n       topology, or NAT mapping.\n   5.  The relay again responds by\
    \ sending a Membership Query message to\n       the gateway that contains the\
    \ new source IP address (gADDR') and\n       source UDP port (gPORT') values from\
    \ the Request message.\n   6.  When the gateway receives the Membership Query\
    \ message, it\n       compares the gateway address and port number values against\
    \ those\n       returned in the previous Membership Query message.\n   7.  If\
    \ the reported address or port has changed, the gateway sends a\n       Teardown\
    \ message to the relay that contains the request nonce,\n       MAC, gateway IP\
    \ address, and gateway port number returned in the\n       earlier Membership\
    \ Query message.  The gateway may send the\n       Teardown message multiple times\
    \ where the number of repetitions\n       is governed by the Querier's Robustness\
    \ Variable (QRV) value\n       contained in the IGMPv3/MLDv2 General Query carried\
    \ by the\n       original Membership Query (see Section 4.1.6 of [RFC3376] and\n\
    \       Section 5.1.8 of [RFC3810]).  The gateway continues to process\n     \
    \  the new Membership Query message as usual.\n   8.  When the relay receives\
    \ a Teardown message, it computes a MAC\n       from the message source IP address,\
    \ source UDP port, request\n       nonce, and a private secret.  The relay accepts\
    \ the Teardown\n       message if the received MAC matches the computed MAC; otherwise,\n\
    \       the message is ignored.  If the message is accepted, the relay\n     \
    \  makes any group membership, routing, and forwarding state changes\n       required\
    \ to stop the transmission of Multicast Data messages to\n       that address.\n"
- title: 4.2.1.4.  Timeout and Retransmission
  contents:
  - "4.2.1.4.  Timeout and Retransmission\n   The AMT protocol does not establish\
    \ any requirements regarding what\n   actions a gateway should take if it fails\
    \ to receive a response from\n   a relay.  A gateway implementation may wait for\
    \ an indefinite period\n   of time to receive a response, may set a time limit\
    \ on how long to\n   wait for a response, may retransmit messages should the time\
    \ limit be\n   reached, may limit the number of retransmissions, or may simply\n\
    \   report an error.\n   For example, a gateway may retransmit a Request message\
    \ if it fails\n   to receive a Membership Query or expected Multicast Data messages\n\
    \   within some time period.  If the gateway fails to receive any\n   response\
    \ to a Request after several retransmissions or within some\n   maximum period\
    \ of time, it may reenter the relay discovery phase in\n   an attempt to find\
    \ a new relay.  This topic is addressed in more\n   detail in Section 5.2.\n"
- title: 4.2.2.  Tunneling
  contents:
  - "4.2.2.  Tunneling\n   From the standpoint of a relay, an AMT \"tunnel\" is identified\
    \ by the\n   IP address and UDP port pair used as the destination address for\n\
    \   sending encapsulated multicast IP datagrams to a gateway.  In this\n   document,\
    \ we refer to this address as the tunnel endpoint address.\n   A gateway sends\
    \ a Membership Update message to a relay to add or\n   remove group subscriptions\
    \ to a tunnel endpoint.  The tunnel endpoint\n   is identified by the source IP\
    \ address and source UDP port carried by\n   the Membership Update message when\
    \ it arrives at a relay (this\n   address may differ from that carried by the\
    \ message when it exited\n   the gateway as a result of network address translation).\n\
    \   The Membership Update messages sent by a single gateway host may\n   originate\
    \ from several source addresses or ports -- each unique\n   combination represents\
    \ a unique tunnel endpoint.  A single gateway\n   host may legitimately create\
    \ and accept traffic on multiple tunnel\n   endpoints, e.g., the gateway may use\
    \ separate ports for the IPv4/IGMP\n   and IPv6/MLD protocols.\n   A tunnel is\
    \ \"created\" when a gateway sends a Membership Update\n   message containing\
    \ an IGMP or MLD membership report that creates one\n   or more group subscriptions\
    \ when none currently existed for that\n   tunnel endpoint address.\n   A tunnel\
    \ ceases to exist when all group subscriptions for a tunnel\n   endpoint are deleted.\
    \  This may occur as a result of the following\n   events:\n   o  The gateway\
    \ sends an IGMP or MLD report, leave, or done message to\n      the relay that\
    \ deletes the last group subscription linked to the\n      tunnel endpoint.\n\
    \   o  The gateway sends a Teardown message to the relay that causes it\n    \
    \  to delete any and all subscriptions bound to the tunnel endpoint.\n   o  The\
    \ relay stops receiving updates from the gateway until such time\n      that per-group\
    \ or per-tunnel timers expire, causing the relay to\n      delete the subscriptions.\n\
    \   The tunneling approach described above conceptually transforms a\n   unicast-only\
    \ internetwork into an NBMA link layer, over which\n   multicast traffic may be\
    \ delivered.  Each relay, plus the set of all\n   gateways using the relay, together\
    \ may be thought of as being on a\n   separate logical NBMA link, where the \"\
    link layer\" address is a UDP/\n   IP address-port pair provided by the Membership\
    \ Update message.\n"
- title: 4.2.2.1.  Address Roaming
  contents:
  - "4.2.2.1.  Address Roaming\n   As described above, each time a relay receives\
    \ a Membership Update\n   message from a new source address-port pair, the group\
    \ subscriptions\n   described by that message apply to the tunnel endpoint identified\
    \ by\n   that address.\n   This can cause problems for a gateway if the address\
    \ carried by the\n   messages it sends to a relay changes unexpectedly.  These\
    \ changes may\n   cause the relay to transmit duplicate, undeliverable, or unrequested\n\
    \   traffic back towards the gateway or an intermediate device.  This may\n  \
    \ create congestion and have negative consequences for the gateway, its\n   network,\
    \ or multicast receivers and in some cases may also produce a\n   significant\
    \ amount of ICMP traffic directed back towards the relay by\n   a NAT, router,\
    \ or gateway host.\n   There are several scenarios in which the address carried\
    \ by messages\n   sent by a gateway may change without that gateway's knowledge\
    \ -- for\n   example, when:\n   o  The message originates from a different interface\
    \ on a gateway\n      that possesses multiple interfaces.\n   o  The DHCP assignment\
    \ for a gateway interface changes.\n   o  The gateway roams to a different wireless\
    \ network.\n   o  The address mapping applied by an intervening network-translation\n\
    \      device (NAT) changes as a result of mapping expiration or routing\n   \
    \   changes in a multihomed network.\n   In the case where the address change\
    \ occurs between the transmission\n   of a Request message and subsequent Membership\
    \ Update messages, the\n   relay will simply ignore any Membership Update messages\
    \ from the new\n   address because MAC authentication will fail (see Section 4.2.1.2).\n\
    \   The relay may continue to transmit previously requested traffic, but\n   no\
    \ duplication will occur, i.e., the possibility for the delivery of\n   duplicate\
    \ traffic does not arise until a Request message is received\n   from the new\
    \ address.\n   The protocol provides a method for a gateway to detect an address\n\
    \   change and explicitly request that the relay stop sending traffic to\n   a\
    \ previous address.  This process involves the Membership Query and\n   Teardown\
    \ messages and is described in Section 4.2.1.3.\n"
- title: 4.2.2.2.  Network Address Translation
  contents:
  - "4.2.2.2.  Network Address Translation\n   The messages sent by a gateway to a\
    \ relay may be subject to network\n   address translation (NAT) -- the source\
    \ IP address and UDP port\n   carried by an IP packet sent by the gateway may\
    \ be modified multiple\n   times before arriving at the relay.  In the most restrictive\
    \ form of\n   NAT, the NAT device will create a new mapping for each combination\
    \ of\n   source and destination IP address and UDP port.  In this case,\n   bidirectional\
    \ communication can only be conducted by sending outgoing\n   packets to the source\
    \ address and port carried by the last incoming\n   packet.\n            Membership\
    \ Update                 Membership Update\n            src: iADDR:iPORT     \
    \             src: eADDR:ePORT\n            dst: rADDR:rPORT                 \
    \ dst: rADDR:rPORT\n                               +---------+\n             \
    \                  |   NAT   |\n        +---------+           +-----------+  \
    \        +---------+\n        |         |---------->|           |--------->| \
    \        |\n        | Gateway |           |  Mapping  |          |  Relay  |\n\
    \        |         |<----------|           |<---------|         |\n        +---------+\
    \           +-----------+          +---------+\n                             \
    \  |         |\n                               +---------+\n            Multicast\
    \ Data                    Multicast Data\n            src: rADDR:rPORT       \
    \           src: rADDR:rPORT\n            dst: iADDR:iPORT                  dst:\
    \ eADDR:ePORT\n               Figure 9: Network Address Translation in AMT\n \
    \  AMT provides automatic NAT traversal by using the source IP address\n   and\
    \ UDP port carried by the Membership Update message as received at\n   the relay\
    \ as the destination address for any Multicast Data messages\n   the relay sends\
    \ back as a result.\n   The NAT mapping created by a Membership Update message\
    \ will\n   eventually expire unless it is refreshed by a passing message.  This\n\
    \   refresh will occur each time the gateway performs the periodic update\n  \
    \ required to refresh group state within the relay (see\n   Section 4.2.1.2).\n"
- title: 4.2.2.3.  UDP Encapsulation
  contents:
  - "4.2.2.3.  UDP Encapsulation\n                Gateway                        \
    \      Relay\n           IP:IGMP                                       IP:IGMP\n\
    \              |    AMT:IP:IGMP               AMT:IP:IGMP    |\n             \
    \ |         |                         |         |\n              |         | \
    \  IP:UDP:AMT:IP:IGMP    |         |\n    _______   |   ___   |   ______   | \
    \  ______   |   ___   |   _______\n   |IGMP|IP|  v  |AMT|  v  |UDP|IP|  v  |IP|UDP|\
    \  v  |AMT|  v  |IP|IGMP|\n   |    |  |     |   |     |   |  |     |  |   |  \
    \   |   |     |  |    |\n   |    |<------------------------------------------------------->|\
    \    |\n   |____|  |     |   |     |   |  |     |  |   |     |   |     |  |____|\n\
    \   |       |<--------------------------------------------------|       |\n  \
    \ |_______|  ^  |___|  ^  |___|__|  ^  |__|___|  ^  |___|  ^  |_______|\n    \
    \          |         |            |            |         |\n             IP  \
    \    AMT:IP    IP:UDP:AMT:IP    AMT:IP      IP\n                       Figure\
    \ 10: AMT Encapsulation\n   The IGMP and MLD messages used in AMT are exchanged\
    \ as complete IP\n   datagrams.  These IP datagrams are encapsulated in AMT messages\
    \ that\n   are transmitted using UDP.  The same holds true for multicast traffic\n\
    \   -- each multicast IP datagram or datagram fragment that arrives at\n   the\
    \ relay is encapsulated in an AMT message and transmitted to one or\n   more gateways\
    \ via UDP.\n   The IP protocol of the encapsulated packets need not match the\
    \ IP\n   protocol used to send the AMT messages.  AMT messages sent via IPv4\n\
    \   may carry IPv6/MLD packets, and AMT messages sent via IPv6 may carry\n   IPv4/IGMP\
    \ packets.\n   The Checksum field contained in the UDP header of the messages\n\
    \   requires special consideration.  Of primary concern is the cost of\n   computing\
    \ a checksum on each replicated multicast packet after it is\n   encapsulated\
    \ for delivery to a gateway.  Many routing/forwarding\n   platforms do not possess\
    \ the capability to compute checksums on\n   UDP-encapsulated packets, as they\
    \ may not have access to the entire\n   datagram.\n   To avoid placing an undue\
    \ burden on the relay platform, the protocol\n   specifically allows zero-valued\
    \ UDP checksums on the Multicast Data\n   messages.  This is not an issue in UDP\
    \ over IPv4, as the UDP Checksum\n   field may be set to zero.  However, this\
    \ is a problem for UDP over\n   IPv6, as that protocol requires a valid, non-zero\
    \ checksum in UDP\n   datagrams [RFC2460].  Messages sent over IPv6 with a UDP\
    \ checksum of\n   zero may fail to reach the gateway.  This is a well-known issue\
    \ for\n   UDP-based tunneling protocols and is described in [RFC6936].  A\n  \
    \ recommended solution is described in [RFC6935].\n"
- title: 4.2.2.4.  UDP Fragmentation
  contents:
  - "4.2.2.4.  UDP Fragmentation\n   Naive encapsulation of multicast IP datagrams\
    \ within AMT data\n   messages may produce UDP datagrams that might require fragmentation\n\
    \   if their size exceeds the MTU of the network path between the relay\n   and\
    \ a gateway.  Many multicast applications, especially those related\n   to media\
    \ streaming, are designed to deliver independent data samples\n   in separate\
    \ packets, without fragmentation, to ensure that some\n   number of complete samples\
    \ can be delivered even in the presence of\n   packet loss.  To prevent or reduce\
    \ undesirable fragmentation, the AMT\n   protocol describes specific procedures\
    \ for handling multicast\n   datagrams whose encapsulation might exceed the Path\
    \ MTU.  These\n   procedures are described in Section 5.3.3.6.\n"
- title: 5.  Protocol Description
  contents:
  - "5.  Protocol Description\n   This section provides a normative description of\
    \ the AMT protocol.\n"
- title: 5.1.  Protocol Messages
  contents:
  - "5.1.  Protocol Messages\n   The AMT protocol defines seven message types for\
    \ control and\n   encapsulation.  These messages are assigned the following names\
    \ and\n   numeric identifiers:\n                  +--------------+---------------------+\n\
    \                  | Message Type | Message Name        |\n                  +--------------+---------------------+\n\
    \                  |      1       | Relay Discovery     |\n                  |\
    \      2       | Relay Advertisement |\n                  |      3       | Request\
    \             |\n                  |      4       | Membership Query    |\n  \
    \                |      5       | Membership Update   |\n                  | \
    \     6       | Multicast Data      |\n                  |      7       | Teardown\
    \            |\n                  +--------------+---------------------+\n   These\
    \ messages are exchanged as IPv4 or IPv6 UDP datagrams.\n"
- title: 5.1.1.  Relay Discovery
  contents:
  - "5.1.1.  Relay Discovery\n   A Relay Discovery message is used to solicit a response\
    \ from a relay\n   in the form of a Relay Advertisement message.\n   The UDP/IP\
    \ datagram containing this message MUST carry a valid,\n   non-zero UDP checksum\
    \ and carry the following IP address and UDP port\n   values:\n   Source IP Address\
    \ - The IP address of the gateway interface on which\n      the gateway will listen\
    \ for a relay response.  Note: The value of\n      this field may be changed as\
    \ a result of network address\n      translation before arriving at the relay.\n\
    \   Source UDP Port - The UDP port number on which the gateway will\n      listen\
    \ for a relay response.  Note: The value of this field may be\n      changed as\
    \ a result of network address translation before arriving\n      at the relay.\n\
    \   Destination IP Address - An anycast or unicast IP address, i.e., the\n   \
    \   Relay Discovery Address advertised by a relay.\n   Destination UDP Port -\
    \ The AMT port number (see Section 7.2).\n    0                   1          \
    \         2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  V=0  |Type=1 |     Reserved                                  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Discovery Nonce                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                 Figure 11: Relay Discovery Message Format\n"
- title: 5.1.1.1.  Version (V)
  contents:
  - "5.1.1.1.  Version (V)\n   The protocol version number for this message is 0.\n"
- title: 5.1.1.2.  Type
  contents:
  - "5.1.1.2.  Type\n   The type number for this message is 1.\n"
- title: 5.1.1.3.  Reserved
  contents:
  - "5.1.1.3.  Reserved\n   Reserved bits that MUST be set to zero by the gateway\
    \ and ignored by\n   the relay.\n"
- title: 5.1.1.4.  Discovery Nonce
  contents:
  - "5.1.1.4.  Discovery Nonce\n   A 32-bit random value generated by the gateway\
    \ and echoed by the\n   relay in a Relay Advertisement message.  This value is\
    \ used by the\n   gateway to correlate Relay Advertisement messages with Relay\n\
    \   Discovery messages.  Discovery nonce generation is described in\n   Section\
    \ 5.2.3.4.5.\n"
- title: 5.1.2.  Relay Advertisement
  contents:
  - "5.1.2.  Relay Advertisement\n   The Relay Advertisement message is used to supply\
    \ a gateway with a\n   unicast IP address of a relay.  A relay sends this message\
    \ to a\n   gateway when it receives a Relay Discovery message from that gateway.\n\
    \   The UDP/IP datagram containing this message MUST carry a valid,\n   non-zero\
    \ UDP checksum and carry the following IP address and UDP port\n   values:\n \
    \  Source IP Address - The destination IP address carried by the Relay\n     \
    \ Discovery message (i.e., the Relay Discovery Address advertised by\n      the\
    \ relay).\n   Source UDP Port - The destination UDP port carried by the Relay\n\
    \      Discovery message (i.e., the AMT port number).\n   Destination IP Address\
    \ - The source IP address carried by the Relay\n      Discovery message.  Note:\
    \ The value of this field may be changed\n      as a result of network address\
    \ translation before arriving at the\n      gateway.\n   Destination UDP Port\
    \ - The source UDP port carried by the Relay\n      Discovery message.  Note:\
    \ The value of this field may be changed\n      as a result of network address\
    \ translation before arriving at the\n      gateway.\n    0                  \
    \ 1                   2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  V=0  |Type=2 |                   Reserved                    |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                        Discovery Nonce                        |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   ~  \
    \                Relay Address (IPv4 or IPv6)                 ~\n   |        \
    \                                                       |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \               Figure 12: Relay Advertisement Message Format\n"
- title: 5.1.2.1.  Version (V)
  contents:
  - "5.1.2.1.  Version (V)\n   The protocol version number for this message is 0.\n"
- title: 5.1.2.2.  Type
  contents:
  - "5.1.2.2.  Type\n   The type number for this message is 2.\n"
- title: 5.1.2.3.  Reserved
  contents:
  - "5.1.2.3.  Reserved\n   Reserved bits that MUST be set to zero by the relay and\
    \ ignored by\n   the gateway.\n"
- title: 5.1.2.4.  Discovery Nonce
  contents:
  - "5.1.2.4.  Discovery Nonce\n   A 32-bit value copied from the Discovery Nonce\
    \ field\n   (Section 5.1.1.4) contained in the Relay Discovery message.  The\n\
    \   gateway uses this value to match a Relay Advertisement to a Relay\n   Discovery\
    \ message.\n"
- title: 5.1.2.5.  Relay Address
  contents:
  - "5.1.2.5.  Relay Address\n   The unicast IPv4 or IPv6 address of the relay.  A\
    \ gateway uses the\n   length of the UDP datagram containing the Relay Advertisement\
    \ message\n   to determine the address family, i.e., length - 8 = 4 (IPv4) or\
    \ 16\n   (IPv6).  The relay returns an IP address for the protocol used to\n \
    \  send the Relay Discovery message, i.e., an IPv4 address for an IPv4\n   Relay\
    \ Discovery Address or an IPv6 address for an IPv6 Relay\n   Discovery Address.\n"
- title: 5.1.3.  Request
  contents:
  - "5.1.3.  Request\n   A gateway sends a Request message to a relay to solicit a\
    \ Membership\n   Query response.\n   The successful delivery of this message marks\
    \ the start of the first\n   stage in the three-way handshake used to create or\
    \ update state\n   within a relay.\n   The UDP/IP datagram containing this message\
    \ MUST carry a valid,\n   non-zero UDP checksum and carry the following IP address\
    \ and UDP port\n   values:\n   Source IP Address - The IP address of the gateway\
    \ interface on which\n      the gateway will listen for a response from the relay.\
    \  Note: The\n      value of this field may be changed as a result of network\
    \ address\n      translation before arriving at the relay.\n   Source UDP Port\
    \ - The UDP port number on which the gateway will\n      listen for a response\
    \ from the relay.  Note: The value of this\n      field may be changed as a result\
    \ of network address translation\n      before arriving at the relay.\n   Destination\
    \ IP Address - The unicast IP address of the relay.\n   Destination UDP Port -\
    \ The AMT port number.\n    0                   1                   2        \
    \           3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\
    \ 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  V=0  |Type=3 |   Reserved  |P|            Reserved           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Request Nonce                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                     Figure 13: Request Message Format\n"
- title: 5.1.3.1.  Version (V)
  contents:
  - "5.1.3.1.  Version (V)\n   The protocol version number for this message is 0.\n"
- title: 5.1.3.2.  Type
  contents:
  - "5.1.3.2.  Type\n   The type number for this message is 3.\n"
- title: 5.1.3.3.  Reserved
  contents:
  - "5.1.3.3.  Reserved\n   Reserved bits that MUST be set to zero by the gateway\
    \ and ignored by\n   the relay.\n"
- title: 5.1.3.4.  P Flag
  contents:
  - "5.1.3.4.  P Flag\n   The P flag is set to indicate which group membership protocol\
    \ the\n   gateway wishes the relay to use in the Membership Query response:\n\
    \   Value   Meaning\n     0     The relay MUST respond with a Membership Query\
    \ message that\n           contains an IPv4 packet carrying an IGMPv3 General\
    \ Query\n           message.\n     1     The relay MUST respond with a Membership\
    \ Query message that\n           contains an IPv6 packet carrying an MLDv2 General\
    \ Query\n           message.\n"
- title: 5.1.3.5.  Request Nonce
  contents:
  - "5.1.3.5.  Request Nonce\n   A 32-bit random value generated by the gateway and\
    \ echoed by the\n   relay in a Membership Query message.  This value is used by\
    \ the relay\n   to compute the Response MAC value and is used by the gateway to\n\
    \   correlate Membership Query messages with Request messages.  Request\n   Nonce\
    \ generation is described in Section 5.2.3.5.6.\n"
- title: 5.1.4.  Membership Query
  contents:
  - "5.1.4.  Membership Query\n   A relay sends a Membership Query message to a gateway\
    \ to solicit a\n   Membership Update response, but only after receiving a Request\n\
    \   message from the gateway.\n   The successful delivery of this message to a\
    \ gateway marks the start\n   of the second stage in the three-way handshake used\
    \ to create or\n   update tunnel state within a relay.\n   The UDP/IP datagram\
    \ containing this message MUST carry a valid,\n   non-zero UDP checksum and carry\
    \ the following IP address and UDP port\n   values:\n   Source IP Address - The\
    \ destination IP address carried by the Request\n      message (i.e., the unicast\
    \ IP address of the relay).\n   Source UDP Port - The destination UDP port carried\
    \ by the Request\n      message (i.e., the AMT port number).\n   Destination IP\
    \ Address - The source IP address carried by the Request\n      message.  Note:\
    \ The value of this field may be changed as a result\n      of network address\
    \ translation before arriving at the gateway.\n   Destination UDP Port - The source\
    \ UDP port carried by the Request\n      message.  Note: The value of this field\
    \ may be changed as a result\n      of network address translation before arriving\
    \ at the gateway.\n    0                   1                   2             \
    \      3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  V=0\
    \  |Type=4 | Reserved  |L|G|         Response MAC          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   |                                      \
    \                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Request Nonce                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \             Encapsulated General Query Message              |\n   ~        \
    \         IPv4:IGMPv3(Membership Query)                 ~\n   |              \
    \    IPv6:MLDv2(Listener Query)                   |\n   |                    \
    \                                           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Gateway Port Number       |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   |                                      \
    \                         |\n   +                                            \
    \                   +\n   |                Gateway IP Address (IPv4 or IPv6) \
    \             |\n   +                                                        \
    \       +\n   |                                                              \
    \ |\n   +                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \ |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \              Figure 14: Membership Query Message Format\n"
- title: 5.1.4.1.  Version (V)
  contents:
  - "5.1.4.1.  Version (V)\n   The protocol version number for this message is 0.\n"
- title: 5.1.4.2.  Type
  contents:
  - "5.1.4.2.  Type\n   The type number for this message is 4.\n"
- title: 5.1.4.3.  Reserved
  contents:
  - "5.1.4.3.  Reserved\n   Reserved bits that MUST be set to zero by the relay and\
    \ ignored by\n   the gateway.\n"
- title: 5.1.4.4.  Limit (L) Flag
  contents:
  - "5.1.4.4.  Limit (L) Flag\n   A 1-bit flag set to 1 to indicate that the relay\
    \ is NOT accepting\n   Membership Update messages from new gateway tunnel endpoints\
    \ and that\n   it will ignore any that are.  A value of 0 has no special\n   significance\
    \ -- the relay may or may not be accepting Membership\n   Update messages from\
    \ new gateway tunnel endpoints.  A gateway checks\n   this flag before attempting\
    \ to create new group subscription state on\n   the relay to determine whether\
    \ it should restart relay discovery.  A\n   gateway that has already created group\
    \ subscriptions on the relay may\n   ignore this flag.  Support for this flag\
    \ is RECOMMENDED.\n"
- title: 5.1.4.5.  Gateway Address (G) Flag
  contents:
  - "5.1.4.5.  Gateway Address (G) Flag\n   A 1-bit flag set to 0 to indicate that\
    \ the message does NOT carry the\n   Gateway Port Number and Gateway IP Address\
    \ fields, and 1 to indicate\n   that it does.  A relay implementation that supports\
    \ the optional\n   teardown procedure (see Section 5.3.3.5) SHOULD set this flag\
    \ as well\n   as the Gateway Port Number and Gateway IP Address field values.\
    \  If a\n   relay sets this flag, it MUST also include the Gateway Port Number\n\
    \   and Gateway IP Address fields in the message.  A gateway\n   implementation\
    \ that does not support the optional teardown procedure\n   (see Section 5.2.3.7)\
    \ MAY ignore this flag and the Gateway Address\n   fields if they are present.\n"
- title: 5.1.4.6.  Response MAC
  contents:
  - "5.1.4.6.  Response MAC\n   A 48-bit source authentication value generated by\
    \ the relay as\n   described in Section 5.3.5.  The gateway echoes this value\
    \ in\n   subsequent Membership Update messages to allow the relay to verify\n\
    \   that the sender of a Membership Update message was the intended\n   receiver\
    \ of a Membership Query sent by the relay.\n"
- title: 5.1.4.7.  Request Nonce
  contents:
  - "5.1.4.7.  Request Nonce\n   A 32-bit value copied from the Request Nonce field\
    \ (Section 5.1.3.5)\n   carried by a Request message.  The relay will have included\
    \ this\n   value in the Response MAC computation.  The gateway echoes this value\n\
    \   in subsequent Membership Update messages.  The gateway also uses this\n  \
    \ value to match a Membership Query to a Request message.\n"
- title: 5.1.4.8.  Encapsulated General Query Message
  contents:
  - "5.1.4.8.  Encapsulated General Query Message\n   An IP-encapsulated IGMP or MLD\
    \ message generated by the relay.  This\n   field will contain one of the following\
    \ IP datagrams:\n      IPv4:IGMPv3 Membership Query\n      IPv6:MLDv2 Listener\
    \ Query\n   The source address carried by the query message should be set as\n\
    \   described in Section 5.3.3.3.\n   The Querier's Query Interval Code (QQIC)\
    \ field in the General Query\n   is used by a relay to specify the time offset\
    \ a gateway should use to\n   schedule a new three-way handshake to refresh the\
    \ group membership\n   state within the relay (current time + Query Interval).\
    \  The QQIC\n   field is defined in Section 4.1.7 of [RFC3376] and Section 5.1.9\
    \ of\n   [RFC3810].\n   The Querier's Robustness Variable (QRV) field in the General\
    \ Query is\n   used by a relay to specify the number of times a gateway should\n\
    \   retransmit unsolicited membership reports, encapsulated within\n   Membership\
    \ Update messages, and, optionally, the number of times to\n   send a Teardown\
    \ message.  The QRV field is defined in Section 4.1.6\n   of [RFC3376] and Section\
    \ 5.1.8 of [RFC3810].\n"
- title: 5.1.4.9.  Gateway Address Fields
  contents:
  - "5.1.4.9.  Gateway Address Fields\n   The Gateway Port Number and Gateway Address\
    \ fields are present in the\n   Membership Query message if, and only if, the\
    \ G flag is set.\n   A gateway need not parse the encapsulated IP datagram to\
    \ determine\n   the position of these fields within the UDP datagram containing\
    \ the\n   Membership Query message -- if the G flag is set, the gateway may\n\
    \   simply subtract the total length of the fields (18 bytes) from the\n   total\
    \ length of the UDP datagram to obtain the offset.\n"
- title: 5.1.4.9.1.  Gateway Port Number
  contents:
  - "5.1.4.9.1.  Gateway Port Number\n   A 16-bit UDP port number containing a UDP\
    \ port value.\n   The relay sets this field to the value of the UDP source port\
    \ of the\n   Request message that triggered the Query message.\n"
- title: 5.1.4.9.2.  Gateway IP Address
  contents:
  - "5.1.4.9.2.  Gateway IP Address\n   A 16-byte IP address that, when combined with\
    \ the value contained in\n   the Gateway Port Number field, forms the gateway\
    \ endpoint address\n   that the relay will use to identify the tunnel instance,\
    \ if any,\n   created by a subsequent Membership Update message.  This field may\n\
    \   contain an IPv6 address or an IPv4 address stored as an\n   IPv4-compatible\
    \ IPv6 address, where the IPv4 address is prefixed with\n   96 bits set to zero\
    \ (see [RFC4291]).  This address must match that\n   used by the relay to compute\
    \ the value stored in the Response MAC\n   field.\n"
- title: 5.1.5.  Membership Update
  contents:
  - "5.1.5.  Membership Update\n   A gateway sends a Membership Update message to\
    \ a relay to report a\n   change in group membership state, or to report the current\
    \ group\n   membership state in response to receiving a Membership Query message.\n\
    \   The gateway encapsulates the IGMP or MLD message as an IP datagram\n   within\
    \ a Membership Update message and sends it to the relay, where\n   it may (see\
    \ below) be decapsulated and processed by the relay to\n   update group membership\
    \ and forwarding state.\n   A gateway cannot send a Membership Update message\
    \ until it receives a\n   Membership Query from a relay, because the gateway must\
    \ copy the\n   Request Nonce and Response MAC values carried by a Membership Query\n\
    \   into any subsequent Membership Update messages it sends back to that\n   relay.\
    \  These values are used by the relay to verify that the sender\n   of the Membership\
    \ Update message was the recipient of the Membership\n   Query message from which\
    \ these values were copied.\n   The successful delivery of this message to the\
    \ relay marks the start\n   of the final stage in the three-way handshake.  This\
    \ stage concludes\n   when the relay successfully verifies that the sender of\
    \ the\n   Membership Update message was the recipient of a Membership Query\n\
    \   message sent earlier.  At this point, the relay may proceed to\n   process\
    \ the encapsulated IGMP or MLD message to create or update\n   group membership\
    \ and forwarding state on behalf of the gateway.\n   The UDP/IP datagram containing\
    \ this message MUST carry a valid,\n   non-zero UDP checksum and carry the following\
    \ IP address and UDP port\n   values:\n   Source IP Address - The IP address of\
    \ the gateway interface on which\n      the gateway will listen for Multicast\
    \ Data messages from the\n      relay.  The address must be the same address used\
    \ to send the\n      initial Request message, or the message will be ignored.\
    \  Note:\n      The value of this field may be changed as a result of network\n\
    \      address translation before arriving at the relay.\n   Source UDP Port -\
    \ The UDP port number on which the gateway will\n      listen for Multicast Data\
    \ messages from the relay.  This port must\n      be the same port used to send\
    \ the initial Request message, or the\n      message will be ignored.  Note: The\
    \ value of this field may be\n      changed as a result of network address translation\
    \ before arriving\n      at the relay.\n   Destination IP Address - The unicast\
    \ IP address of the relay.\n   Destination UDP Port - The AMT port number.\n \
    \   0                   1                   2                   3\n    0 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  V=0  |Type=5 |  Reserved     |        Response MAC           |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   |                                      \
    \                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Request Nonce                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                                                               |\n   |  \
    \       Encapsulated Group Membership Update Message          |\n   ~        \
    \   IPv4:IGMP(Membership Report|Leave Group)            ~\n   |            IPv6:MLD(Listener\
    \ Report|Listener Done)            |\n   |                                   \
    \                            |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \                Figure 15: Membership Update Message Format\n"
- title: 5.1.5.1.  Version (V)
  contents:
  - "5.1.5.1.  Version (V)\n   The protocol version number for this message is 0.\n"
- title: 5.1.5.2.  Type
  contents:
  - "5.1.5.2.  Type\n   The type number for this message is 5.\n"
- title: 5.1.5.3.  Reserved
  contents:
  - "5.1.5.3.  Reserved\n   Reserved bits that MUST be set to zero by the gateway\
    \ and ignored by\n   the relay.\n"
- title: 5.1.5.4.  Response MAC
  contents:
  - "5.1.5.4.  Response MAC\n   A 48-bit value copied from the Response MAC field\
    \ (Section 5.1.4.6)\n   in a Membership Query message.  Used by the relay to perform\
    \ source\n   authentication.\n"
- title: 5.1.5.5.  Request Nonce
  contents:
  - "5.1.5.5.  Request Nonce\n   A 32-bit value copied from the Request Nonce field\
    \ in a Request or\n   Membership Query message.  Used by the relay to perform\
    \ source\n   authentication.\n"
- title: 5.1.5.6.  Encapsulated Group Membership Update Message
  contents:
  - "5.1.5.6.  Encapsulated Group Membership Update Message\n   An IP-encapsulated\
    \ IGMP or MLD message produced by the host-mode IGMP\n   or MLD protocol running\
    \ on a gateway pseudo-interface.  This field\n   will contain one of the following\
    \ IP datagrams:\n      IPv4:IGMPv2 Membership Report\n      IPv4:IGMPv2 Leave\
    \ Group\n      IPv4:IGMPv3 Membership Report\n      IPv6:MLDv1 Multicast Listener\
    \ Report\n      IPv6:MLDv1 Multicast Listener Done\n      IPv6:MLDv2 Multicast\
    \ Listener Report\n   The source address carried by the message should be set\
    \ as described\n   in Section 5.2.1.\n"
- title: 5.1.6.  Multicast Data
  contents:
  - "5.1.6.  Multicast Data\n   A relay sends a Multicast Data message to deliver\
    \ a multicast IP\n   datagram or datagram fragment to a gateway.\n   The Checksum\
    \ field in the UDP header of this message MAY contain a\n   value of zero when\
    \ sent over IPv4 but SHOULD, if possible, contain a\n   valid, non-zero value\
    \ when sent over IPv6 (see Section 4.2.2.3).\n   The UDP/IP datagram containing\
    \ this message MUST carry the following\n   IP address and UDP port values:\n\
    \   Source IP Address - The unicast IP address of the relay.\n   Source UDP Port\
    \ - The AMT port number.\n   Destination IP Address - A tunnel endpoint IP address,\
    \ i.e., the\n      source IP address carried by the Membership Update message\
    \ sent by\n      a gateway to indicate an interest in receiving the multicast\n\
    \      packet.  Note: The value of this field may be changed as a result\n   \
    \   of network address translation before arriving at the gateway.\n   Destination\
    \ UDP Port - A tunnel endpoint UDP port, i.e., the source\n      UDP port carried\
    \ by the Membership Update message sent by a\n      gateway to indicate an interest\
    \ in receiving the multicast packet.\n      Note: The value of this field may\
    \ be changed as a result of\n      network address translation before arriving\
    \ at the gateway.\n    0                   1                   2             \
    \      3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n\
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |  V=0\
    \  |Type=6 |    Reserved   |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   |                                      \
    \                         |\n   ~                     IP Multicast Packet    \
    \                   ~\n   |                                                  \
    \             |\n   +                - - - - - - - - - - - - - - - - - - - - -\
    \ - - -+\n   |               :               :               :               :\n\
    \   +-+-+-+-+-+-+-+-+- - - - - - - - - - - - - - - - - - - - - - - -\n       \
    \          Figure 16: Multicast Data Message Format\n"
- title: 5.1.6.1.  Version (V)
  contents:
  - "5.1.6.1.  Version (V)\n   The protocol version number for this message is 0.\n"
- title: 5.1.6.2.  Type
  contents:
  - "5.1.6.2.  Type\n   The type number for this message is 6.\n"
- title: 5.1.6.3.  Reserved
  contents:
  - "5.1.6.3.  Reserved\n   Reserved bits that MUST be set to zero by the relay and\
    \ ignored by\n   the gateway.\n"
- title: 5.1.6.4.  IP Multicast Data
  contents:
  - "5.1.6.4.  IP Multicast Data\n   A complete IPv4 or IPv6 multicast datagram or\
    \ datagram fragment.\n"
- title: 5.1.7.  Teardown
  contents:
  - "5.1.7.  Teardown\n   A gateway sends a Teardown message to a relay to request\
    \ that it stop\n   sending Multicast Data messages to a tunnel endpoint created\
    \ by an\n   earlier Membership Update message.  A gateway sends this message when\n\
    \   it detects that a Request message sent to the relay carries an\n   address\
    \ that differs from that carried by a previous Request message.\n   The gateway\
    \ uses the Gateway IP Address and Gateway Port Number\n   fields in the Membership\
    \ Query message to detect these address\n   changes.\n   To provide backwards\
    \ compatibility with early implementations of the\n   AMT protocol, support for\
    \ this message and associated procedures is\n   considered OPTIONAL -- gateways\
    \ are not required to send this\n   message, and relays are not required to act\
    \ upon it.\n   The UDP/IP datagram containing this message MUST carry a valid,\n\
    \   non-zero UDP checksum and carry the following IP address and UDP port\n  \
    \ values:\n   Source IP Address - The IP address of the gateway interface used\
    \ to\n      send the message.  This address may differ from that used to send\n\
    \      earlier messages.  Note: The value of this field may be changed as\n  \
    \    a result of network address translation before arriving at the\n      relay.\n\
    \   Source UDP Port - The UDP port number.  This port number may differ\n    \
    \  from that used to send earlier messages.  Note: The value of this\n      field\
    \ may be changed as a result of network address translation\n      before arriving\
    \ at the relay.\n   Destination IP Address - The unicast IP address of the relay.\n\
    \   Destination UDP Port - The AMT port number.\n    0                   1   \
    \                2                   3\n    0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\
    \ 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |  V=0  |Type=7 |  Reserved     |         Response MAC          |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   |                                      \
    \                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |                         Request Nonce                         |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \   |     Gateway Port Number       |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\
    \                               +\n   |                                      \
    \                         |\n   +                                            \
    \                   +\n   |              Gateway IP Address (IPv4 or IPv6)   \
    \             |\n   +                                                        \
    \       +\n   |                                                              \
    \ |\n   +                               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \ |                               |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n  \
    \             Figure 17: Membership Teardown Message Format\n"
- title: 5.1.7.1.  Version (V)
  contents:
  - "5.1.7.1.  Version (V)\n   The protocol version number for this message is 0.\n"
- title: 5.1.7.2.  Type
  contents:
  - "5.1.7.2.  Type\n   The type number for this message is 7.\n"
- title: 5.1.7.3.  Reserved
  contents:
  - "5.1.7.3.  Reserved\n   Reserved bits that MUST be set to zero by the gateway\
    \ and ignored by\n   the relay.\n"
- title: 5.1.7.4.  Response MAC
  contents:
  - "5.1.7.4.  Response MAC\n   A 48-bit value copied from the Response MAC field\
    \ (Section 5.1.4.6)\n   in the last Membership Query message the relay sent to\
    \ the gateway\n   endpoint address of the tunnel to be torn down.  The gateway\
    \ endpoint\n   address is provided by the Gateway IP Address and Gateway Port\
    \ Number\n   fields carried by the Membership Query message.  The relay validates\n\
    \   the Teardown message by comparing this value with one computed from\n   the\
    \ Gateway IP Address field, Gateway Port Number field, Request\n   Nonce field,\
    \ and a private secret (just as it does in the Membership\n   Update message).\n"
- title: 5.1.7.5.  Request Nonce
  contents:
  - "5.1.7.5.  Request Nonce\n   A 32-bit value copied from the Request Nonce field\
    \ (Section 5.1.4.7)\n   in the last Membership Query message the relay sent to\
    \ the gateway\n   endpoint address of the tunnel to be torn down.  The gateway\
    \ endpoint\n   address is provided by the Gateway IP Address and Gateway Port\
    \ Number\n   fields carried by the Membership Query message.  This value must\n\
    \   match that used by the relay to compute the value stored in the\n   Response\
    \ MAC field.\n"
- title: 5.1.7.6.  Gateway Port Number
  contents:
  - "5.1.7.6.  Gateway Port Number\n   A 16-bit UDP port number that, when combined\
    \ with the value contained\n   in the Gateway IP Address field, forms the tunnel\
    \ endpoint address\n   that the relay will use to identify the tunnel instance\
    \ to tear down.\n   The relay provides this value to the gateway using the Gateway\
    \ Port\n   Number field (Section 5.1.4.9.1) in a Membership Query message.  This\n\
    \   port number must match that used by the relay to compute the value\n   stored\
    \ in the Response MAC field.\n"
- title: 5.1.7.7.  Gateway IP Address
  contents:
  - "5.1.7.7.  Gateway IP Address\n   A 16-byte IP address that, when combined with\
    \ the value contained in\n   the Gateway Port Number field, forms the tunnel endpoint\
    \ address that\n   the relay will use to identify the tunnel instance to tear\
    \ down.  The\n   relay provides this value to the gateway using the Gateway IP\
    \ Address\n   field (Section 5.1.4.9.2) in a Membership Query message.  This field\n\
    \   may contain an IPv6 address or an IPv4 address stored as an\n   IPv4-compatible\
    \ IPv6 address, where the IPv4 address is prefixed with\n   96 bits set to zero\
    \ (see [RFC4291]).  This address must match that\n   used by the relay to compute\
    \ the value stored in the Response MAC\n   field.\n"
- title: 5.2.  Gateway Operation
  contents:
  - "5.2.  Gateway Operation\n   The following sections describe gateway implementation\
    \ requirements.\n   A non-normative discussion of gateway operation may be found\
    \ in\n   Section 4.2.\n"
- title: 5.2.1.  IP/IGMP/MLD Protocol Requirements
  contents:
  - "5.2.1.  IP/IGMP/MLD Protocol Requirements\n   Gateway operation requires a subset\
    \ of host-mode IPv4/IGMP and IPv6/\n   MLD functionality to provide group membership\
    \ tracking, query\n   processing, and report generation.  A gateway MAY use IGMPv2\
    \ (ASM),\n   IGMPv3 (ASM and SSM), MLDv1 (ASM), or MLDv2 (ASM and SSM).\n   An\
    \ application with embedded gateway functionality must provide its\n   own implementation\
    \ of this subset of the IPv4/IGMP and IPv6/MLD\n   protocols.  The service interface\
    \ used to manipulate group membership\n   state need not match that described\
    \ in the IGMP and MLD\n   specifications, but the actions taken as a result SHOULD\
    \ be similar\n   to those described in Section 5.1 of [RFC3376] and Section 6.1\
    \ of\n   [RFC3810].  The gateway application will likely need to implement\n \
    \  many of the same functions as a host IP stack, including checksum\n   verification,\
    \ dispatching, datagram filtering and forwarding, and IP\n   encapsulation/decapsulation.\n\
    \   The encapsulated IGMP datagrams generated by a gateway MUST conform\n   to\
    \ the descriptions found in Section 4 of [RFC3376].  These datagrams\n   MUST\
    \ possess the IP headers, header options, and header values called\n   for in\
    \ [RFC3376], with the following exception: a gateway MAY use any\n   source address\
    \ value in an IGMP report datagram, including the\n   \"unspecified\" address\
    \ (all octets are zero).  This exception is made\n   because a gateway pseudo-interface\
    \ might not possess a valid IPv4\n   address, and even if an address has been\
    \ assigned to the interface,\n   that address might not be a valid link-local\
    \ source address on any\n   relay interface.  It is for this reason that a relay\
    \ must accept\n   encapsulated IGMP reports regardless of the source address they\n\
    \   carry.  See Section 5.3.1.\n   The encapsulated MLD messages generated by\
    \ a gateway MUST conform to\n   the description found in Section 5 of [RFC3810].\
    \  These datagrams\n   MUST possess the IP headers, header options, and header\
    \ values called\n   for in [RFC3810], with the following exception: a gateway\
    \ MAY use any\n   source address value in an MLD report datagram, including the\n\
    \   \"unspecified\" address (all octets are zero).  This exception is made\n \
    \  because a gateway pseudo-interface might not possess a valid IPv6\n   address,\
    \ and even if an address has been assigned to the interface,\n   that address\
    \ might not be a valid link-local source address on any\n   relay interface. \
    \ As with IGMP, it is for this reason that a relay\n   must accept encapsulated\
    \ MLD reports regardless of the source address\n   they carry.  See Section 5.3.1.\n\
    \   The gateway IGMP/MLD implementation SHOULD retransmit unsolicited\n   membership\
    \ state-change reports and merge new state-change reports\n   with pending reports\
    \ as described in Section 5.1 of [RFC3376] and\n   Section 6.1 of [RFC3810]. \
    \ The number of retransmissions is specified\n   by the relay in the Querier's\
    \ Robustness Variable (QRV) field in the\n   last General Query forwarded by the\
    \ pseudo-interface.  See\n   Section 4.1.6 of [RFC3376] and Section 5.1.8 of [RFC3810].\n\
    \   The gateway IGMP/MLD implementation SHOULD handle General Query\n   messages\
    \ as described in Section 5.2 of [RFC3376] and Section 6.2 of\n   [RFC3810] but\
    \ MAY ignore the Max Resp Code (Maximum Response Code)\n   field value and generate\
    \ a current-state report without any delay.\n   An IPv4 gateway implementation\
    \ MUST accept IPv4 datagrams that carry\n   the General Query variant of the IGMPv3\
    \ Membership Query message, as\n   described in Section 4 of [RFC3376].  The gateway\
    \ MUST accept the\n   IGMP datagram regardless of the IP source address carried\
    \ by that\n   datagram.\n   An IPv6 gateway implementation MUST accept IPv6 datagrams\
    \ that carry\n   the General Query variant of the MLDv2 Multicast Listener Query\n\
    \   message, as described in Section 5 of [RFC3810].  The gateway MUST\n   accept\
    \ the MLD datagram regardless of the IP source address carried\n   by that datagram.\n"
- title: 5.2.2.  Pseudo-Interface Configuration
  contents:
  - "5.2.2.  Pseudo-Interface Configuration\n   A gateway host may possess or create\
    \ multiple gateway\n   pseudo-interfaces, each with a unique configuration that\
    \ describes a\n   binding to a specific IP protocol, Relay Address, Relay Discovery\n\
    \   Address, or upstream network interface.\n"
- title: 5.2.2.1.  Relay Discovery Address
  contents:
  - "5.2.2.1.  Relay Discovery Address\n   If a gateway implementation uses AMT relay\
    \ discovery to obtain a\n   Relay Address, it must first be supplied with a Relay\
    \ Discovery\n   Address.  The Relay Discovery Address may be an anycast or unicast\n\
    \   address.  A gateway implementation may rely on a static address\n   assignment\
    \ or some form of dynamic address discovery.  This\n   specification does not\
    \ require that a gateway implementation use any\n   particular method to obtain\
    \ a Relay Discovery Address -- an\n   implementation may employ any method that\
    \ returns a suitable Relay\n   Discovery Address.\n"
- title: 5.2.2.2.  Relay Address
  contents:
  - "5.2.2.2.  Relay Address\n   Before a gateway implementation can execute the AMT\
    \ protocol to\n   request and receive multicast traffic, it must be supplied with\
    \ a\n   unicast Relay Address.  A gateway implementation may rely on static\n\
    \   address assignment or support some form of dynamic address discovery.\n  \
    \ This specification does not require the use of any particular method\n   to\
    \ obtain a Relay Address -- an implementation may employ any method\n   that returns\
    \ a suitable Relay Address.\n"
- title: 5.2.2.3.  Upstream Interface Selection
  contents:
  - "5.2.2.3.  Upstream Interface Selection\n   A gateway host that possesses multiple\
    \ network interfaces or\n   addresses may allow for an explicit selection of the\
    \ interface to use\n   when communicating with a relay.  The selection might be\
    \ made to\n   satisfy connectivity, tunneling, or IP protocol requirements.\n"
- title: 5.2.2.4.  Optional Retransmission Parameters
  contents:
  - "5.2.2.4.  Optional Retransmission Parameters\n   A gateway implementation that\
    \ supports retransmission MAY require the\n   following information:\n   Discovery\
    \ Timeout\n      Initial time to wait for a response to a Relay Discovery message.\n\
    \   Maximum Relay Discovery Retransmission Count\n      Maximum number of Relay\
    \ Discovery retransmissions to allow before\n      terminating relay discovery\
    \ and reporting an error.\n   Request Timeout\n      Initial time to wait for\
    \ a response to a Request message.\n   Maximum Request Retransmission Count\n\
    \      Maximum number of Request retransmissions to allow before\n      abandoning\
    \ a relay and restarting relay discovery or reporting an\n      error.\n   Maximum\
    \ Retries Count for \"Destination Unreachable\"\n      The maximum number of times\
    \ a gateway should attempt to send the\n      same Request or Membership Update\
    \ message after receiving an ICMP\n      Destination Unreachable message.\n"
- title: 5.2.3.  Gateway Service
  contents:
  - "5.2.3.  Gateway Service\n   In the following descriptions, a gateway pseudo-interface\
    \ is treated\n   as a passive entity managed by a gateway service.  The gateway\n\
    \   pseudo-interface provides the state, and the gateway service provides\n  \
    \ the processing.  The term \"gateway\" is used when describing service\n   behavior\
    \ with respect to a single pseudo-interface.\n"
- title: 5.2.3.1.  Startup
  contents:
  - "5.2.3.1.  Startup\n   When a gateway pseudo-interface is started, the gateway\
    \ service\n   begins listening for AMT messages sent to the UDP endpoint(s)\n\
    \   associated with the pseudo-interface and for any locally generated\n   IGMP/MLD\
    \ messages passed to the pseudo-interface.  The handling of\n   these messages\
    \ is described below.\n   When the pseudo-interface is enabled, the gateway service\
    \ MAY:\n   o  Optionally execute the relay discovery procedure described in\n\
    \      Section 5.2.3.4.\n   o  Optionally execute the membership query procedure\
    \ described in\n      Section 5.2.3.5 to start the periodic membership update\
    \ cycle.\n"
- title: 5.2.3.2.  Handling AMT Messages
  contents:
  - "5.2.3.2.  Handling AMT Messages\n   A gateway MUST ignore any datagram it receives\
    \ that cannot be\n   interpreted as a Relay Advertisement, Membership Query, or\
    \ Multicast\n   Data message.  The handling of Relay Advertisement, Membership\
    \ Query,\n   and Multicast Data messages is addressed in the sections that follow.\n\
    \   A gateway that conforms to this specification MUST ignore any message\n  \
    \ with a Version field value other than zero.\n   While listening for AMT messages,\
    \ a gateway may be notified that an\n   ICMP Destination Unreachable message was\
    \ received as a result of an\n   AMT message transmission.  Handling of ICMP Destination\
    \ Unreachable\n   messages is described in Section 5.2.3.9.\n"
- title: 5.2.3.3.  Handling Multicast Data Messages
  contents:
  - "5.2.3.3.  Handling Multicast Data Messages\n   A gateway may receive Multicast\
    \ Data messages after it sends a\n   Membership Update message to a relay that\
    \ adds a group subscription.\n   The gateway may continue to receive Multicast\
    \ Data messages long\n   after the gateway sends a Membership Update message that\
    \ deletes\n   existing group subscriptions.  The gateway MUST be prepared to\n\
    \   receive these messages at any time but MAY ignore them or discard\n   their\
    \ contents if the gateway no longer has any interest in receiving\n   the multicast\
    \ datagrams contained within them.\n   A gateway MUST ignore a Multicast Data\
    \ message if it fails to satisfy\n   any of the following requirements:\n   o\
    \  The source IP address and UDP port carried by the Multicast Data\n      message\
    \ MUST be equal to the destination IP address and UDP port\n      carried by the\
    \ matching Membership Update message (i.e., the\n      current Relay Address).\n\
    \   o  The destination address carried by the encapsulated IP datagram\n     \
    \ MUST fall within the multicast address allocation assigned to the\n      relevant\
    \ IP protocol, i.e., 224.0.0.0/4 for IPv4 and ff00::/8\n      for IPv6.\n   The\
    \ gateway extracts the encapsulated IP datagram and forwards it to\n   the local\
    \ IP protocol implementation for checksum verification,\n   fragmented datagram\
    \ reassembly, source and group filtering, and\n   transport-layer protocol processing.\n\
    \   Because AMT uses UDP encapsulation to deliver multicast datagrams to\n   gateways,\
    \ it qualifies as a tunneling protocol subject to the\n   limitations described\
    \ in [RFC6936].  If supported, a gateway SHOULD\n   employ the solution described\
    \ in [RFC6936] to ensure that the local\n   IP stack does not discard IPv6 datagrams\
    \ with zero checksums.  If\n   Multicast Data message datagrams are processed\
    \ directly within the\n   gateway (instead of the host IP stack), the gateway\
    \ MUST NOT discard\n   any of these datagrams because they carry a UDP checksum\
    \ of zero.\n"
- title: 5.2.3.4.  Relay Discovery Procedure
  contents:
  - "5.2.3.4.  Relay Discovery Procedure\n   This section describes gateway requirements\
    \ related to the relay\n   discovery message sequence described in Section 4.2.1.1.\n"
- title: 5.2.3.4.1.  Starting Relay Discovery
  contents:
  - "5.2.3.4.1.  Starting Relay Discovery\n   A gateway may start or restart the relay\
    \ discovery procedure in\n   response to the following events:\n   o  When a gateway\
    \ pseudo-interface is started (enabled).\n   o  When the gateway wishes to report\
    \ a group subscription when none\n      currently exist.\n   o  Before sending\
    \ the next Request message in a membership update\n      cycle, i.e., each time\
    \ the query timer expires (see below).\n   o  After the gateway fails to receive\
    \ a response to a Request\n      message.\n   o  After the gateway receives a\
    \ Membership Query message with the\n      L flag set to 1.\n"
- title: 5.2.3.4.2.  Sending a Relay Discovery Message
  contents:
  - "5.2.3.4.2.  Sending a Relay Discovery Message\n   A gateway sends a Relay Discovery\
    \ message to a relay to start the\n   relay discovery process.\n   The gateway\
    \ MUST send the Relay Discovery message using the current\n   Relay Discovery\
    \ Address and AMT port number as the destination.  The\n   Discovery Nonce value\
    \ in the Relay Discovery message MUST be computed\n   as described in Section\
    \ 5.2.3.4.5.\n   The gateway MUST save a copy of the Relay Discovery message or\
    \ save\n   the Discovery Nonce value for possible retransmission and\n   verification\
    \ of a Relay Advertisement response.\n   When a gateway sends a Relay Discovery\
    \ message, it may be notified\n   that an ICMP Destination Unreachable message\
    \ was received as a result\n   of an earlier AMT message transmission.  Handling\
    \ of ICMP Destination\n   Unreachable messages is described in Section 5.2.3.9.\n"
- title: 5.2.3.4.3.  Waiting for a Relay Advertisement Message
  contents:
  - "5.2.3.4.3.  Waiting for a Relay Advertisement Message\n   A gateway MAY retransmit\
    \ a Relay Discovery message if it does not\n   receive a matching Relay Advertisement\
    \ message within some timeout\n   period.  If the gateway retransmits the message\
    \ multiple times, the\n   timeout period SHOULD be adjusted to provide a random\
    \ exponential\n   back-off.  The RECOMMENDED timeout is a random value in the\
    \ range\n   [initial_timeout, MIN(initial_timeout * 2^retry_count,\n   maximum_timeout)],\
    \ with a RECOMMENDED initial_timeout of 1 second and\n   a RECOMMENDED maximum_timeout\
    \ of 120 seconds (which is the\n   recommended minimum NAT mapping timeout described\
    \ in [RFC4787]).\n"
- title: 5.2.3.4.4.  Handling a Relay Advertisement Message
  contents:
  - "5.2.3.4.4.  Handling a Relay Advertisement Message\n   When a gateway receives\
    \ a Relay Advertisement message, it must first\n   determine whether it should\
    \ accept or ignore the message.  A gateway\n   MUST ignore a Relay Advertisement\
    \ message if it fails to satisfy any\n   of the following requirements:\n   o\
    \  The gateway MUST be waiting for a Relay Advertisement message.\n   o  The Discovery\
    \ Nonce value contained in the Relay Advertisement\n      message MUST be equal\
    \ to the Discovery Nonce value contained in\n      the Relay Discovery message.\n\
    \   o  The source IP address and UDP port of the Relay Advertisement\n      message\
    \ MUST be equal to the destination IP address and UDP port\n      of the matching\
    \ Relay Discovery message.\n   Once a gateway receives a Relay Advertisement response\
    \ to a Relay\n   Discovery message, it SHOULD ignore any other Relay Advertisements\n\
    \   that arrive on the AMT interface until it sends a new Relay Discovery\n  \
    \ message.\n   If a gateway executes the relay discovery procedure at the start\
    \ of\n   each membership update cycle and the Relay Address returned in the\n\
    \   latest Relay Advertisement message differs from the address returned\n   in\
    \ a previous Relay Advertisement message, then the gateway SHOULD\n   send a Teardown\
    \ message (if supported) to the old Relay Address,\n   using information from\
    \ the last Membership Query message received\n   from that relay, as described\
    \ in Section 5.2.3.7.  This behavior is\n   illustrated in the following diagram.\n\
    \                     Gateway              Relay-1\n                     -------\
    \              -------\n                        :                    :\n     Query\
    \      Expired |                    |\n     Timer (QT)-------->|             \
    \       |\n                        |  Relay Discovery   |\n                  \
    \      |------------------->|\n                        |                    |\n\
    \                        | Relay Advertisement|\n                        |<-------------------|\n\
    \                        |                    |\n                        |   \
    \   Request       |\n                        |------------------->|\n        \
    \                |                    |\n                        |  Membership\
    \ Query  |\n                        |<===================|\n                 \
    \ Start |                    |\n           (QT)<--------| Membership Update  |\n\
    \                        |===================>|\n                        |   \
    \                 |\n                        ~                    ~          \
    \   Relay-2\n                Expired |                    |             -------\n\
    \           (QT)-------->|                    |                :\n           \
    \             |  Relay Discovery   |                |\n                      \
    \  |------------------------------------>|\n                        |        \
    \            |                |\n                        | Relay Advertisement|\
    \                |\n                        |<------------------------------------|\n\
    \                        |                    |                |\n           \
    \             |     Teardown       |                |\n                      \
    \  |------------------->|                |\n                        |        \
    \            |                |\n                        |      Request      \
    \ |                |\n                        |------------------------------------>|\n\
    \                        |                    |                |\n           \
    \             |  Membership Query  |                |\n                      \
    \  |<====================================|\n                  Start |        \
    \            |                |\n           (QT)<--------| Membership Update \
    \ |                |\n                        |====================================>|\n\
    \                        |                    |                |\n           \
    \             :                    :                :\n              Figure 18:\
    \ Teardown after Relay Address Change\n"
- title: 5.2.3.4.5.  Discovery Nonce Generation
  contents:
  - "5.2.3.4.5.  Discovery Nonce Generation\n   The discovery nonce MUST be a random,\
    \ non-zero 32-bit value and, if\n   possible, SHOULD be computed using a cryptographically\
    \ secure\n   pseudorandom number generator.  A new nonce SHOULD be generated each\n\
    \   time the gateway restarts the relay discovery process.  The same\n   nonce\
    \ SHOULD be used when retransmitting a Relay Discovery message.\n"
- title: 5.2.3.5.  Membership Query Procedure
  contents:
  - "5.2.3.5.  Membership Query Procedure\n   This section describes gateway requirements\
    \ related to the membership\n   update message sequence described in Section 4.2.1.2.\n"
- title: 5.2.3.5.1.  Starting the Membership Update Cycle
  contents:
  - "5.2.3.5.1.  Starting the Membership Update Cycle\n   A gateway may send a Request\
    \ message to start a membership update\n   cycle (following the optional relay\
    \ discovery procedure) in response\n   to the following events:\n   o  When the\
    \ gateway pseudo-interface is activated.\n   o  When the gateway wishes to report\
    \ a group subscription when none\n      currently exist.\n   Starting the membership\
    \ update cycle when a gateway pseudo-interface\n   is started provides several\
    \ benefits:\n   o  Better performance by allowing state-change reports to be sent\
    \ as\n      they are generated, thus minimizing the time to join.\n   o  More\
    \ robustness by relying on unsolicited state-change reports to\n      update group\
    \ membership state rather than the current-state\n      reports generated by the\
    \ membership update cycle.  Unsolicited\n      state-change reports are typically\
    \ retransmitted multiple times\n      while current-state reports are not.\n \
    \  o  Simplified implementation by eliminating any need to queue IGMP/\n     \
    \ MLD messages for delivery after a Membership Query is received,\n      since\
    \ the IGMP/MLD state-change messages may be sent as they are\n      generated.\n\
    \   However, this approach places an additional load on relays, as a\n   gateway\
    \ will send periodic requests even when it has no multicast\n   subscriptions.\
    \  To reduce load on a relay, a gateway SHOULD only send\n   a Membership Update\
    \ message while it has active group subscriptions.\n   A relay will still need\
    \ to compute a Response MAC for each Request\n   but will not be required to recompute\
    \ it a second time to\n   authenticate a Membership Update message that contains\
    \ no\n   subscriptions.\n"
- title: 5.2.3.5.2.  Sending a Request Message
  contents:
  - "5.2.3.5.2.  Sending a Request Message\n   A gateway sends a Request message to\
    \ a relay to solicit a Membership\n   Query response and start the membership\
    \ update cycle.\n   A gateway constructs a Request message containing a Request\
    \ Nonce\n   value computed as described in Section 5.2.3.5.6.  The gateway MUST\n\
    \   set the P flag in the Request message to identify the protocol the\n   gateway\
    \ wishes the relay to use for the General Query response.\n   A gateway MUST send\
    \ a Request message using the current Relay Address\n   and AMT port number as\
    \ the destination.\n   A gateway MUST save a copy of the Request message or save\
    \ the Request\n   Nonce and P flag values for possible retransmission and verification\n\
    \   of a Membership Query response.\n   When a gateway sends a Request message,\
    \ it may be notified that an\n   ICMP Destination Unreachable message was received\
    \ as a result of an\n   earlier AMT message transmission.  Handling of ICMP Destination\n\
    \   Unreachable messages is described in Section 5.2.3.9.\n"
- title: 5.2.3.5.3.  Waiting for a Membership Query Message
  contents:
  - "5.2.3.5.3.  Waiting for a Membership Query Message\n   A gateway MAY retransmit\
    \ a Request message if it does not receive a\n   matching Membership Query message\
    \ within some timeout period.  If the\n   gateway retransmits the message multiple\
    \ times, the timeout period\n   SHOULD be adjusted to provide a random exponential\
    \ back-off.  The\n   RECOMMENDED timeout is a random value in the range [initial_timeout,\n\
    \   MIN(initial_timeout * 2^retry_count, maximum_timeout)], with a\n   RECOMMENDED\
    \ initial_timeout of 1 second and a RECOMMENDED\n   maximum_timeout of 120 seconds\
    \ (which is the recommended minimum NAT\n   mapping timeout described in [RFC4787]).\n\
    \   If a gateway that uses relay discovery does not receive a Membership\n   Query\
    \ within a specified time period or after a specified number of\n   retries, the\
    \ gateway SHOULD stop waiting for a Membership Query\n   message and restart relay\
    \ discovery to locate another relay.\n"
- title: 5.2.3.5.4.  Handling a Membership Query Message
  contents:
  - "5.2.3.5.4.  Handling a Membership Query Message\n   When a gateway receives a\
    \ Membership Query message, it must first\n   determine whether it should accept\
    \ or ignore the message.  A gateway\n   MUST ignore a Membership Query message,\
    \ or the encapsulated IP\n   datagram within it, if the message fails to satisfy\
    \ any of the\n   following requirements:\n   o  The gateway MUST be waiting for\
    \ a Membership Query message.\n   o  The Request Nonce value contained in the\
    \ Membership Query MUST\n      equal the Request Nonce value contained in the\
    \ Request message.\n   o  The source IP address and UDP port of the Membership\
    \ Query MUST\n      equal the destination IP address and UDP port of the matching\n\
    \      Request message (i.e., the current Relay Address).\n   o  The encapsulated\
    \ IP datagram MUST carry an IGMPv3 or MLDv2\n      message.  The protocol MUST\
    \ match the protocol identified by the\n      P flag in the Request message.\n\
    \   o  The IGMPv3 or MLDv2 message MUST be a General Query message.\n   o  The\
    \ total length of the encapsulated IP datagram as computed from\n      the lengths\
    \ contained in the datagram header(s) MUST NOT exceed\n      the available field\
    \ length within the Membership Query message.\n   Once a gateway receives a Membership\
    \ Query response to a Request\n   message, it SHOULD ignore any other Membership\
    \ Query messages that\n   arrive on the AMT interface until it sends a new Request\
    \ message.\n   The gateway MUST save the Membership Query message, or the Request\n\
    \   Nonce, Response MAC, Gateway IP Address, and Gateway Port Number\n   fields\
    \ for use in sending subsequent Membership Update and Teardown\n   messages.\n\
    \   The gateway extracts the encapsulated IP datagram and forwards it to\n   the\
    \ local IP protocol implementation for checksum verification and\n   dispatching\
    \ to the IGMP or MLD implementation running on the\n   pseudo-interface.  The\
    \ gateway MUST NOT forward any octets that might\n   exist between the encapsulated\
    \ IP datagram and the end of the message\n   or Gateway Address fields.\n   The\
    \ MLD protocol specification indicates that senders should use a\n   link-local\
    \ source IP address in message datagrams.  This requirement\n   must be relaxed\
    \ for AMT because gateways and relays do not normally\n   share a common subnet.\
    \  For this reason, a gateway implementation\n   MUST accept MLD (and IGMP) query\
    \ message datagrams regardless of the\n   source IP address they carry.  This\
    \ may require additional processing\n   on the part of the gateway that might\
    \ be avoided if the relay and\n   gateway use the IPv4 and IPv6 addresses allocated\
    \ for use in\n   AMT-encapsulated control packets as described in Section 5.2.1.\n\
    \   The gateway MUST start a timer that will trigger the next iteration\n   of\
    \ the membership update cycle by executing the membership query\n   procedure.\
    \  The gateway SHOULD compute the timer duration from the\n   Querier's Query\
    \ Interval Code carried by the General Query.  A\n   gateway MAY use a smaller\
    \ timer duration if required to refresh a NAT\n   mapping that would otherwise\
    \ time out.  A gateway MAY use a larger\n   timer duration if it has no group\
    \ subscriptions to report.\n   If the gateway supports the Teardown message and\
    \ the G flag is set in\n   the Membership Query message, the gateway MUST compare\
    \ the Gateway IP\n   Address and Gateway Port Number on the new Membership Query\
    \ message\n   with the values carried by the previous Membership Query message.\
    \  If\n   either value has changed, the gateway MUST send a Teardown message to\n\
    \   the relay as described in Section 5.2.3.7.\n   If the L flag is set in the\
    \ Membership Query message, the relay is\n   reporting that it is NOT accepting\
    \ Membership Update messages that\n   create new tunnel endpoints and will simply\
    \ ignore any that do.  If\n   the L flag is set and the gateway is not currently\
    \ reporting any\n   group subscriptions to the relay, the gateway SHOULD stop\
    \ sending\n   periodic Request messages and restart the relay discovery procedure\n\
    \   (if discovery is enabled) to find a new relay with which to\n   communicate.\
    \  Even if the L flag is set, the gateway MAY continue to\n   send updates if\
    \ it has previously reported group subscriptions to the\n   relay, one or more\
    \ subscriptions still exist, and the gateway\n   endpoint address has not changed\
    \ since the last Membership Query was\n   received (see previous paragraph).\n"
- title: 5.2.3.5.5.  Handling Query Timer Expiration
  contents:
  - "5.2.3.5.5.  Handling Query Timer Expiration\n   When the query timer (started\
    \ in the previous step) expires, the\n   gateway should execute the membership\
    \ query procedure again to\n   continue the membership update cycle.\n"
- title: 5.2.3.5.6.  Request Nonce Generation
  contents:
  - "5.2.3.5.6.  Request Nonce Generation\n   The Request Nonce MUST be a random value\
    \ and, if possible, SHOULD be\n   computed using a cryptographically secure pseudorandom\
    \ number\n   generator.  A new nonce MUST be generated each time the gateway\n\
    \   starts the membership query process.  The same nonce SHOULD be used\n   when\
    \ retransmitting a Request message.\n"
- title: 5.2.3.6.  Membership Update Procedure
  contents:
  - "5.2.3.6.  Membership Update Procedure\n   This section describes gateway requirements\
    \ related to the membership\n   update message sequence described in Section 4.2.1.2.\n\
    \   The membership update process is primarily driven by the host-mode\n   IGMP\
    \ or MLD protocol implementation running on the gateway\n   pseudo-interface.\
    \  The IGMP and MLD protocols produce current-state\n   reports in response to\
    \ General Query messages generated by the\n   pseudo-interface via AMT and produce\
    \ state-change reports in response\n   to receiver requests made using the IGMP\
    \ or MLD service interface.\n"
- title: 5.2.3.6.1.  Handling an IGMP/MLD IP Datagram
  contents:
  - "5.2.3.6.1.  Handling an IGMP/MLD IP Datagram\n   The gateway pseudo-interface\
    \ MUST accept the following IP datagrams\n   from the IPv4/IGMP and IPv6/MLD protocols\
    \ running on the\n   pseudo-interface:\n   o  IPv4 datagrams that carry an IGMPv2\
    \ or IGMPv3 Membership Report or\n      an IGMPv2 Leave Group message as described\
    \ in Section 4 of\n      [RFC3376].\n   o  IPv6 datagrams that carry an MLDv1\
    \ or MLDv2 Multicast Listener\n      Report or an MLDv1 Multicast Listener Done\
    \ message as described in\n      Section 5 of [RFC3810].\n   The gateway must\
    \ be prepared to receive these messages any time the\n   pseudo-interface is running.\
    \  The gateway MUST ignore any datagrams\n   not listed above.\n   A gateway that\
    \ waits to start a membership update cycle until after\n   it receives a datagram\
    \ containing an IGMP/MLD state-change message\n   MAY:\n   o  Discard IGMP or\
    \ MLD datagrams until it receives a Membership Query\n      message, at which\
    \ time it processes the Membership Query message\n      as normal to eventually\
    \ produce a current-state report on the\n      pseudo-interface, which describes\
    \ the end state (RECOMMENDED).\n   o  Insert IGMP or MLD datagrams into a queue\
    \ for transmission after\n      it receives a Membership Query message.\n   If\
    \ and when a gateway receives a Membership Query message (for IGMP\n   or MLD),\
    \ it sends any queued or incoming IGMP or MLD datagrams to the\n   relay as described\
    \ in the next section.\n"
- title: 5.2.3.6.2.  Sending a Membership Update Message
  contents:
  - "5.2.3.6.2.  Sending a Membership Update Message\n   A gateway cannot send a Membership\
    \ Update message to a relay until it\n   has received a Membership Query message\
    \ from a relay.  If the gateway\n   has not yet located a relay with which to\
    \ communicate, it MUST first\n   execute the relay discovery procedure described\
    \ in Section 5.2.3.4 to\n   obtain a Relay Address.  If the gateway has a Relay\
    \ Address but has\n   not yet received a Membership Query message, it MUST first\
    \ execute\n   the membership query procedure described in Section 5.2.3.5 to obtain\n\
    \   a Request Nonce and Response MAC that can be used to send a\n   Membership\
    \ Update message.\n   Once a gateway possesses a valid Relay Address, Request\
    \ Nonce, and\n   Response MAC, it may encapsulate the IP datagram containing the\
    \ IGMP/\n   MLD message into a Membership Update message.  The gateway MUST copy\n\
    \   the Request Nonce and Response MAC values from the last Membership\n   Query\
    \ received from the relay into the corresponding fields in the\n   Membership\
    \ Update.  The gateway MUST send the Membership Update\n   message using the Relay\
    \ Address and AMT port number as the\n   destination.\n   When a gateway sends\
    \ a Membership Update message, it may be notified\n   that an ICMP Destination\
    \ Unreachable message was received as a result\n   of an earlier AMT message transmission.\
    \  Handling of ICMP Destination\n   Unreachable messages is described in Section\
    \ 5.2.3.9.\n"
- title: 5.2.3.7.  Teardown Procedure
  contents:
  - "5.2.3.7.  Teardown Procedure\n   This section describes gateway requirements\
    \ related to the teardown\n   message sequence described in Section 4.2.1.3.\n\
    \   Gateway support for the Teardown message is RECOMMENDED.\n   A gateway that\
    \ supports Teardown SHOULD make use of Teardown\n   functionality if it receives\
    \ a Membership Query message from a relay\n   that has the G flag set to indicate\
    \ that it contains valid Gateway\n   Address fields.\n"
- title: 5.2.3.7.1.  Handling a Membership Query Message
  contents:
  - "5.2.3.7.1.  Handling a Membership Query Message\n   As described in Section 5.2.3.5.4,\
    \ if a gateway supports the Teardown\n   message, has reported active group subscriptions,\
    \ and receives a\n   Membership Query message with the G flag set, the gateway\
    \ MUST\n   compare the Gateway IP Address and Gateway Port Number on the new\n\
    \   Membership Query message with the values carried by the previous\n   Membership\
    \ Query message.  If either value has changed, the gateway\n   MUST send a Teardown\
    \ message as described in the next section.\n"
- title: 5.2.3.7.2.  Sending a Teardown Message
  contents:
  - "5.2.3.7.2.  Sending a Teardown Message\n   A gateway sends a Teardown message\
    \ to a relay to request that it stop\n   delivering Multicast Data messages to\
    \ the gateway and delete any\n   group memberships created by the gateway.\n \
    \  When a gateway constructs a Teardown message, it MUST copy the\n   Request\
    \ Nonce, Response MAC, Gateway IP Address, and Gateway Port\n   Number fields\
    \ from the Membership Query message that provided the\n   Response MAC for the\
    \ last Membership Update message sent, into the\n   corresponding fields of the\
    \ Teardown message.\n   A gateway MUST send the Teardown message using the Relay\
    \ Address and\n   AMT port number as the destination.  A gateway MAY send the\
    \ Teardown\n   message multiple times for robustness.  The gateway SHOULD use\
    \ the\n   Querier's Robustness Variable (QRV) field contained in the query\n \
    \  encapsulated within the last Membership Query to set the limit on the\n   number\
    \ of retransmissions (see Section 4.1.6 of [RFC3376] and\n   Section 5.1.8 of\
    \ [RFC3810]).  If the gateway sends the Teardown\n   message multiple times, it\
    \ SHOULD insert a delay between each\n   transmission using the timing algorithm\
    \ employed in IGMP/MLD for\n   transmitting unsolicited state-change reports.\
    \  The RECOMMENDED\n   default delay value is 1 second.\n   When a gateway sends\
    \ a Teardown message, it may be notified that an\n   ICMP Destination Unreachable\
    \ message was received as a result of an\n   earlier AMT message transmission.\
    \  Handling of ICMP Destination\n   Unreachable messages is described in Section\
    \ 5.2.3.9.\n"
- title: 5.2.3.8.  Shutdown
  contents:
  - "5.2.3.8.  Shutdown\n   When a gateway pseudo-interface is stopped and the gateway\
    \ has\n   existing group subscriptions, the gateway SHOULD either:\n   o  Send\
    \ a Teardown message to the relay as described in\n      Section 5.2.3.7, but\
    \ only if the gateway supports the Teardown\n      message and the current relay\
    \ is returning Gateway Address fields\n      in Membership Query messages, or\n\
    \   o  Send a Membership Update message to the relay that will delete\n      existing\
    \ group subscriptions.\n"
- title: 5.2.3.9.  Handling ICMP Destination Unreachable Responses
  contents:
  - "5.2.3.9.  Handling ICMP Destination Unreachable Responses\n   A gateway may receive\
    \ an ICMP Destination Unreachable message\n   [RFC0792] after sending an AMT message.\
    \  Whether the gateway is\n   notified that an ICMP message was received is highly\
    \ dependent on\n   firewall and gateway IP stack behavior and gateway implementation.\n\
    \   If the reception of an ICMP Destination Unreachable message is\n   reported\
    \ to the gateway while waiting to receive an AMT message, the\n   gateway may\
    \ respond as follows, depending on platform capabilities\n   and which outgoing\
    \ message triggered the ICMP response:\n   1.  The gateway MAY simply abandon\
    \ the current relay and restart\n       relay discovery (if used).  This is the\
    \ least desirable approach,\n       as it does not allow for transient network\
    \ changes.\n   2.  If the last message sent was a Relay Discovery or Request\n\
    \       message, the gateway MAY simply ignore the ICMP response and\n       continue\
    \ waiting for incoming AMT messages.  If the gateway is\n       configured to\
    \ retransmit Relay Discovery or Request messages, the\n       normal retransmission\
    \ behavior for those messages is preserved to\n       prevent the gateway from\
    \ prematurely abandoning a relay.\n   3.  If the last message sent was a Membership\
    \ Update message, the\n       gateway MAY start a new membership update and associated\
    \ Request\n       retransmission cycle.\n   If the reception of an ICMP Destination\
    \ Unreachable message is\n   reported to the gateway when attempting to transmit\
    \ a new AMT\n   message, the gateway may respond as follows, depending on platform\n\
    \   capabilities and which outgoing message triggered the ICMP response:\n   1.\
    \  The gateway MAY simply abandon the current relay and restart\n       relay\
    \ discovery (if used).  This is the least desirable approach,\n       as it does\
    \ not allow for transient network changes.\n   2.  If the last message sent was\
    \ a Relay Discovery, Request, or\n       Teardown message, the gateway MAY attempt\
    \ to transmit the new\n       message.  If the gateway is configured to retransmit\
    \ Relay\n       Discovery, Request, or Teardown messages, the normal\n       retransmission\
    \ behavior for those messages is preserved to\n       prevent the gateway from\
    \ prematurely abandoning a relay.\n   3.  If the last message sent was a Membership\
    \ Update message, the\n       gateway SHOULD start a new membership update and\
    \ associated\n       Request retransmission cycle.\n"
- title: 5.3.  Relay Operation
  contents:
  - "5.3.  Relay Operation\n   The following sections describe relay implementation\
    \ requirements.  A\n   non-normative discussion of relay operation may be found\
    \ in\n   Section 4.2.\n"
- title: 5.3.1.  IP/IGMP/MLD Protocol Requirements
  contents:
  - "5.3.1.  IP/IGMP/MLD Protocol Requirements\n   A relay requires a subset of router-mode\
    \ IGMP and MLD functionality\n   to provide group membership tracking and report\
    \ processing.\n   A relay accessible via IPv4 MUST support IPv4/IGMPv3 and MAY\
    \ support\n   IPv6/MLDv2.  A relay accessible via IPv6 MUST support IPv6/MLDv2\
    \ and\n   MAY support IPv4/IGMPv3.\n   A relay MUST apply the forwarding rules\
    \ described in Section 6.3 of\n   [RFC3376] and Section 7.3 of [RFC3810].\n  \
    \ A relay MUST handle incoming reports as described in Section 6.4 of\n   [RFC3376]\
    \ and Section 7.4 of [RFC3810], with the exception that\n   actions that lead\
    \ to queries MAY be modified to eliminate query\n   generation.  A relay MUST\
    \ accept IGMP and MLD report datagrams\n   regardless of the IP source address\
    \ carried by those datagrams.\n   All other aspects of IGMP/MLD router behavior,\
    \ such as the handling\n   of queries, querier election, etc., are not used or\
    \ required for\n   relay operation.\n"
- title: 5.3.2.  Startup
  contents:
  - "5.3.2.  Startup\n   If a relay is deployed for anycast discovery, the relay MUST\n\
    \   advertise an anycast Relay Discovery Address Prefix into the unicast\n   routing\
    \ system of the anycast domain.  An address within that prefix,\n   i.e., a Relay\
    \ Discovery Address, MUST be assigned to a relay\n   interface.\n   A unicast\
    \ IPv4 and/or IPv6 address MUST be assigned to the relay\n   interface that will\
    \ be used to send and receive AMT control and data\n   messages.  This address\
    \ or addresses are returned in Relay\n   Advertisement messages.\n   The remaining\
    \ details of relay \"startup\" are highly implementation\n   dependent and are\
    \ not addressed in this document.\n"
- title: 5.3.3.  Running
  contents:
  - "5.3.3.  Running\n   When a relay is started, it begins listening for AMT messages\
    \ on the\n   interface to which the unicast Relay Address(es) has been assigned,\n\
    \   i.e., the address returned in Relay Advertisement messages.\n"
- title: 5.3.3.1.  Handling AMT Messages
  contents:
  - "5.3.3.1.  Handling AMT Messages\n   A relay MUST ignore any message other than\
    \ a Relay Discovery,\n   Request, Membership Update, or Teardown message.  The\
    \ handling of\n   Relay Discovery, Request, Membership Update, and Teardown messages\
    \ is\n   addressed in the sections that follow.\n   Support for the Teardown message\
    \ is OPTIONAL.  If a relay does not\n   support the Teardown message, it MUST\
    \ also ignore this message.\n   A relay that conforms to this specification MUST\
    \ ignore any message\n   with a Version field value other than zero.\n"
- title: 5.3.3.2.  Handling a Relay Discovery Message
  contents:
  - "5.3.3.2.  Handling a Relay Discovery Message\n   This section describes relay\
    \ requirements related to the relay\n   discovery message sequence described in\
    \ Section 4.2.1.1.\n   A relay MUST accept and respond to Relay Discovery messages\
    \ sent to\n   an anycast Relay Discovery Address or the unicast Relay Address.\
    \  If\n   a relay receives a Relay Discovery message sent to its unicast\n   address,\
    \ it MUST respond just as it would if the message had been\n   sent to its anycast\
    \ Relay Discovery Address.\n   When a relay receives a Relay Discovery message,\
    \ it responds by\n   sending a Relay Advertisement message back to the source\
    \ of the Relay\n   Discovery message.\n   The relay MUST use the source IP address\
    \ and UDP port number of the\n   Relay Discovery message as the destination IP\
    \ address and UDP port\n   number for the Relay Advertisement message.  The source\
    \ IP address\n   and UDP port number carried by the Relay Advertisement message\
    \ MUST\n   match the destination IP address and UDP port number of the Relay\n\
    \   Discovery message to ensure successful NAT traversal.\n   The relay MUST copy\
    \ the value contained in the Discovery Nonce field\n   of the Relay Discovery\
    \ message into the Discovery Nonce field in the\n   Relay Advertisement message.\n\
    \   If the Relay Discovery message was received as an IPv4 datagram, the\n   relay\
    \ MUST return an IPv4 address in the Relay Address field of the\n   Relay Advertisement\
    \ message.  If the Relay Discovery message was\n   received as an IPv6 datagram,\
    \ the relay MUST return an IPv6 address\n   in the Relay Address field.\n"
- title: 5.3.3.3.  Handling a Request Message
  contents:
  - "5.3.3.3.  Handling a Request Message\n   This section describes relay requirements\
    \ related to the membership\n   query portion of the message sequence described\
    \ in Section 4.2.1.2.\n   When a relay receives a Request message, it responds\
    \ by sending a\n   Membership Query message back to the source of the Request\
    \ message.\n   The relay MUST use the source IP address and UDP port of the Request\n\
    \   message as the destination IP address and UDP port for the Membership\n  \
    \ Query message.  The source IP address and UDP port carried by the\n   Membership\
    \ Query MUST match the destination IP address and UDP port\n   of the Request\
    \ to ensure successful NAT traversal.\n   The relay MUST return the value contained\
    \ in the Request Nonce field\n   of the Request message in the Request Nonce field\
    \ of the Membership\n   Query message.  The relay MUST compute a MAC value, as\
    \ described in\n   Section 5.3.5, and return that value in the Response MAC field\
    \ of the\n   Membership Query message.\n   If a relay supports the Teardown message,\
    \ it MUST set the G flag in\n   the Membership Query message and return the source\
    \ IP address and UDP\n   port carried by the Request message in the corresponding\
    \ Gateway IP\n   Address and Gateway Port Number fields.  If the relay does not\n\
    \   support the Teardown message, it SHOULD NOT set these fields, as this\n  \
    \ may cause the gateway to generate unnecessary Teardown messages.\n   If the\
    \ P flag in the Request message is 0, the relay MUST return an\n   IPv4-encapsulated\
    \ IGMPv3 General Query in the Membership Query\n   message.  If the P flag is\
    \ 1, the relay MUST return an\n   IPv6-encapsulated MLDv2 General Query in the\
    \ Membership Query\n   message.\n   If the relay is not accepting Membership Update\
    \ messages that create\n   new tunnel endpoints due to resource limitations, it\
    \ SHOULD set the\n   L flag in the Membership Query message to notify the gateway\
    \ of this\n   state.  Support for the L flag is OPTIONAL.  See Section 5.3.3.8.\n\
    \   The encapsulated IGMPv3 General Query datagrams generated by a relay\n   MUST\
    \ conform to the descriptions found in Section 4.1 of [RFC3376].\n   These datagrams\
    \ MUST possess the IP headers, header options, and\n   header values called for\
    \ in [RFC3376], with the following exception:\n   a relay MAY use any source IP\
    \ address for an IGMP General Query\n   datagram, including the \"unspecified\"\
    \ address (all octets are zero).\n   This exception is made because any source\
    \ address that a relay might\n   normally send may not be a valid link-local address\
    \ on any gateway\n   interface.  It is for this reason that a gateway must accept\n\
    \   encapsulated IGMP queries regardless of the source address they\n   carry.\
    \  See Section 5.2.1.\n   The encapsulated MLDv2 General Query datagrams generated\
    \ by a relay\n   MUST conform to the descriptions found in Section 5.1 of [RFC3810].\n\
    \   These datagrams MUST possess the IP headers, header options, and\n   header\
    \ values called for in [RFC3810], with the following exception:\n   a relay MAY\
    \ use any source IP address for an MLD General Query\n   datagram, including the\
    \ \"unspecified\" address (all octets are zero).\n   This exception is made because\
    \ any source address that a relay might\n   normally send may not be a valid link-local\
    \ address on any gateway\n   interface.  As with IGMP, it is for this reason that\
    \ a gateway must\n   accept encapsulated MLD queries regardless of the source\
    \ address they\n   carry.  See Section 5.2.1.\n   A relay MUST set the Querier's\
    \ Query Interval Code (QQIC) field in\n   the General Query to supply the gateway\
    \ with a suggested time\n   duration to use for the membership query timer.  The\
    \ QQIC field is\n   defined in Section 4.1.7 of [RFC3376] and Section 5.1.9 of\
    \ [RFC3810].\n   A relay MAY adjust this value to affect the rate at which the\
    \ Request\n   messages are sent from a gateway.  However, a gateway is allowed\
    \ to\n   use a shorter duration than the duration specified in the QQIC field,\n\
    \   so a relay may be limited in its ability to spread out Requests\n   coming\
    \ from a gateway.\n   A relay MUST set the Querier's Robustness Variable (QRV)\
    \ field in the\n   General Query to a non-zero value.  This value SHOULD be greater\
    \ than\n   one.  If a gateway retransmits membership state-change messages, it\n\
    \   will retransmit them (Robustness Variable - 1) times.  The QRV field\n   is\
    \ defined in Section 4.1.6 of [RFC3376] and Section 5.1.8 of\n   [RFC3810].\n\
    \   A relay SHOULD set the Maximum Response Code field in the General\n   Query\
    \ to a value of 1 to trigger an immediate response from the\n   gateway (some\
    \ host IGMP/MLD implementations may not accept a value of\n   zero).  A relay\
    \ SHOULD NOT use the IGMPv3/MLDv2 Query Response\n   Interval variable, if available,\
    \ to generate the Maximum Response\n   Code field value, as the Query Response\
    \ Interval variable is used in\n   setting the duration of group state timers\
    \ and must not be set to\n   such a small value.  The Maximum Response Code field\
    \ is defined in\n   Section 4.1.1 of [RFC3376] and Section 5.1.3 of [RFC3810].\
    \  See\n   Section 5.3.3.7.\n"
- title: 5.3.3.4.  Handling a Membership Update Message
  contents:
  - "5.3.3.4.  Handling a Membership Update Message\n   This section describes relay\
    \ requirements related to the membership\n   update portion of the message sequence\
    \ described in Section 4.2.1.2.\n   When a relay receives a Membership Update\
    \ message, it must first\n   determine whether it should accept or ignore the\
    \ message.  A relay\n   MUST NOT make any changes to group membership and forwarding\
    \ state if\n   the message fails to satisfy any of the following requirements:\n\
    \   o  The IP datagram encapsulated within the message MUST be one of the\n  \
    \    following:\n      *  IPv4 datagram carrying an IGMPv2 or IGMPv3 Membership\
    \ Report\n         message.\n      *  IPv4 datagram carrying an IGMPv2 Leave Group\
    \ message.\n      *  IPv6 datagram carrying an MLDv1 or MLDv2 Multicast Listener\n\
    \         Report message.\n      *  IPv6 datagram carrying MLDv1 Multicast Listener\
    \ Done message.\n   o  The encapsulated IP datagram MUST satisfy the IP header\n\
    \      requirements for the IGMP or MLD message type as described in\n      Section\
    \ 4 of [RFC3376], Section 2 of [RFC2236], Section 5 of\n      [RFC3810], and Section\
    \ 3 of [RFC2710], with the following\n      exception: a relay MUST accept an\
    \ IGMP or MLD message regardless\n      of the IP source address carried by the\
    \ datagram.\n   o  The total length of the encapsulated IP datagram as computed\
    \ from\n      the lengths contained in the datagram header(s) MUST NOT exceed\n\
    \      the available field length within the Membership Update message.\n   o\
    \  The computed checksums for the encapsulated IP datagram and its\n      payload\
    \ MUST match the values contained therein.  Checksum\n      computation and verification\
    \ vary by protocol; see [RFC0791] for\n      IPv4, [RFC3376] for IGMPv3, and [RFC4443]\
    \ for MLD (ICMPv6).\n   o  If processing of the encapsulated IGMP or MLD message\
    \ would result\n      in an allocation of new state or a modification of existing\
    \ state,\n      the relay MUST authenticate the source of the message by verifying\n\
    \      that the value contained in the Response MAC field equals the MAC\n   \
    \   value computed from the fields in the Membership Update message\n      datagram.\
    \  If a time-varying private secret is used in the\n      computation of a Response\
    \ MAC, the relay MUST retain the previous\n      version of the private secret\
    \ for use in authenticating Membership\n      Updates sent during the subsequent\
    \ query interval.  If the first\n      attempt at Response MAC authentication\
    \ fails, the relay MUST\n      attempt to authenticate the Response MAC using\
    \ the previous\n      private secret value unless 2 * query_interval time has\
    \ elapsed\n      since the private secret change.  See Section 5.3.5.\n   A relay\
    \ MAY skip source authentication to reduce the computational\n   cost of handling\
    \ Membership Update messages if the relay can make a\n   trivial determination\
    \ that the IGMP/MLD message carried by the\n   Membership Update message will\
    \ produce no changes in group membership\n   or forwarding state.  The relay does\
    \ not need to compute and compare\n   MAC values if it finds there are no group\
    \ subscriptions for the\n   source of the Membership Update message and either\
    \ of the following\n   is true:\n   o  The encapsulated IP datagram is an IGMPv3\
    \ Membership Report or\n      MLDv2 Multicast Listener Report message that contains\
    \ no group\n      records.  This may often be the case for gateways that\n   \
    \   continuously repeat the membership update cycle even though they\n      have\
    \ no group subscriptions to report.\n   o  The encapsulated IP datagram is an\
    \ IGMPv2 Leave Group or MLDv1\n      Multicast Listener Done message.\n   The\
    \ IGMP and MLD protocol specifications indicate that senders SHOULD\n   use a\
    \ link-local source IP address in message datagrams.  This\n   requirement must\
    \ be relaxed for AMT because gateways and relays do\n   not share a common subnet.\
    \  For this reason, a relay implementation\n   MUST accept IGMP and MLD datagrams\
    \ regardless of the source IP\n   address they carry.\n   Once a relay has determined\
    \ that the Membership Update message is\n   valid, it processes the encapsulated\
    \ IGMP or MLD message to update\n   group membership state and communicates with\
    \ the multicast protocol\n   to update forwarding state and possibly send multicast\
    \ protocol\n   messages towards upstream routers.  The relay MUST ignore any octets\n\
    \   that might exist between the encapsulated IP datagram and the end of\n   the\
    \ Membership Update message.\n   As described in Section 4.2.2, a relay uses the\
    \ source IP address and\n   source UDP port carried by a Membership Update message\
    \ to identify a\n   tunnel endpoint.  A relay uses the tunnel endpoint as the\
    \ destination\n   address for any Multicast Data messages it sends as a result\
    \ of the\n   group membership and forwarding state created by processing the IGMP/\n\
    \   MLD messages contained in Membership Update messages received from\n   the\
    \ endpoint.\n   If a Membership Update message originates from a new endpoint,\
    \ the\n   relay MUST determine whether it can accept updates from a new\n   endpoint.\
    \  If a relay has been configured with a limit on the total\n   number of endpoints,\
    \ or a limit on the total number of endpoints for\n   a given source address,\
    \ then the relay MAY ignore the Membership\n   Update message and possibly withdraw\
    \ any Relay Discovery Address\n   Prefix announcement that it might have made.\
    \  See Section 5.3.3.8.\n   A relay MUST maintain some form of group membership\
    \ database for each\n   endpoint.  The per-endpoint databases are used to update\
    \ a forwarding\n   table containing entries that map a (*,G) or (S,G) subscription\
    \ to a\n   list of tunnel endpoints.\n   A relay MUST maintain some form of group\
    \ membership database\n   representing a merger of the group membership databases\
    \ of all\n   endpoints.  The merged group membership database is used to update\n\
    \   upstream multicast forwarding state.\n   A relay MUST maintain a forwarding\
    \ table that maps each unique (*,G)\n   and (S,G) subscription to a list of tunnel\
    \ endpoints.  A relay uses\n   this forwarding table to provide the destination\
    \ address when\n   performing UDP/IP encapsulation of the incoming multicast IP\n\
    \   datagrams to form Multicast Data messages.\n   If a group filter mode for\
    \ a group entry on a tunnel endpoint is\n   EXCLUDE, the relay SHOULD NOT forward\
    \ datagrams that originate from\n   sources in the filter source list unless the\
    \ relay architecture does\n   not readily support source filtering.  A relay MAY\
    \ ignore the source\n   list if necessary because gateways are expected to do\
    \ their own\n   source filtering.\n"
- title: 5.3.3.5.  Handling a Teardown Message
  contents:
  - "5.3.3.5.  Handling a Teardown Message\n   This section describes relay requirements\
    \ related to the teardown\n   message sequence described in Section 4.2.1.3.\n\
    \   When a relay (that supports the Teardown message) receives a Teardown\n  \
    \ message, it MUST first authenticate the source of the Teardown\n   message by\
    \ verifying that the Response MAC carried by the Teardown\n   message is equal\
    \ to a MAC value computed from the fields carried by\n   the Teardown message.\
    \  The method used to compute the MAC differs\n   from that used to generate and\
    \ validate the Membership Query and\n   Membership Update messages in that the\
    \ source IP address and source\n   UDP port number used to compute the MAC are\
    \ taken from the Gateway IP\n   Address and Gateway Port Number fields in the\
    \ Teardown message rather\n   than from the IP and UDP headers in the datagram\
    \ that carries the\n   Teardown message.  The MAC computation is described in\
    \ Section 5.3.5.\n   A relay MUST ignore a Teardown message if the computed MAC\
    \ does not\n   equal the value of the Response MAC field.\n   If a relay determines\
    \ that a Teardown message is authentic, it MUST\n   immediately stop transmitting\
    \ Multicast Data messages to the endpoint\n   identified by the Gateway IP Address\
    \ and Gateway Port Number fields\n   in the message.  The relay MUST eventually\
    \ delete any group\n   membership and forwarding state associated with the endpoint\
    \ but MAY\n   delay doing so to allow a gateway to recreate group membership state\n\
    \   on a new endpoint and thereby avoid making unnecessary (temporary)\n   changes\
    \ in upstream routing/forwarding state.\n   The state changes made by a relay\
    \ when processing a Teardown message\n   MUST be identical to those that would\
    \ be made if the relay had\n   received an IGMP/MLD report that would cause the\
    \ IGMP or MLD protocol\n   to delete all existing group records in the group membership\
    \ database\n   associated with the endpoint.  The processing of the Teardown message\n\
    \   should trigger or mimic the normal interaction between IGMP or MLD\n   and\
    \ a multicast protocol to produce required changes in forwarding\n   state and\
    \ possibly send prune/leave messages towards upstream\n   routers.\n"
- title: 5.3.3.6.  Handling Multicast IP Datagrams
  contents:
  - "5.3.3.6.  Handling Multicast IP Datagrams\n   When a multicast IP datagram is\
    \ forwarded to the relay\n   pseudo-interface, the relay MUST, for each gateway\
    \ that has expressed\n   an interest in receiving the datagram, encapsulate the\
    \ IP datagram\n   into a Multicast Data message or messages and send that message\
    \ or\n   messages to the gateway.  This process is highly implementation\n   dependent\
    \ but conceptually requires the following steps:\n   o  Use the IP datagram source\
    \ and destination address to look up the\n      appropriate (*,G) or (S,G) entry\
    \ in the endpoint forwarding table\n      created for the pseudo-interface as\
    \ a result of IGMP/MLD\n      processing.\n   o  Possibly replicate the datagram\
    \ for each gateway endpoint listed\n      for that (*,G) or (S,G) entry.\n   o\
    \  If the multicast IP datagram size exceeds the Tunnel MTU as\n      determined\
    \ according to the procedure described in\n      Section 5.3.3.6.1, the relay\
    \ must execute the procedure described\n      in Section 5.3.3.6.2.\n   o  Encapsulate\
    \ and transmit the IP datagram according to the\n      procedure described in\
    \ Section 5.3.3.6.3.\n   The relay pseudo-interface MUST ignore any other IP datagrams\n\
    \   forwarded to the pseudo-interface.\n"
- title: 5.3.3.6.1.  Path and Tunnel MTU
  contents:
  - "5.3.3.6.1.  Path and Tunnel MTU\n   A relay MUST compute a Tunnel MTU (TMTU)\
    \ value for each AMT tunnel\n   that originates on the relay.  A relay will use\
    \ the TMTU value to\n   determine whether an incoming multicast IP datagram can\
    \ be delivered\n   downstream in a Membership Data message without fragmentation.\
    \  A\n   relay MUST compute the TMTU by subtracting the size of the Membership\n\
    \   Data message headers (IP, UDP, and AMT) from the current Path MTU\n   (PMTU)\
    \ associated with each AMT tunnel.  The relay MUST maintain a\n   PMTU value on\
    \ a per-tunnel or per-relay basis.  A relay MUST support\n   one or both of the\
    \ following methods for determining the PMTU value:\n   o  The relay MAY provide\
    \ a configuration option that establishes a\n      fixed PMTU that will be applied\
    \ to all AMT tunnels originating at\n      the relay.\n   o  The relay MAY dynamically\
    \ adjust PMTU value(s) in response to\n      receipt of ICMP/ICMPv6 Datagram Too\
    \ Big messages as described in\n      [RFC1191] and [RFC1981].\n   If a relay\
    \ supports dynamic adjustment of per-tunnel or per-relay\n   PMTU values in response\
    \ to ICMP messages, the relay MUST provide a\n   configuration option that disables\
    \ this feature and also provide a\n   configuration option that establishes a\
    \ minimum PMTU for all tunnels.\n   These configuration options may be used to\
    \ mitigate certain types of\n   denial-of-service attacks (see Section 6).  When\
    \ dynamic PMTU\n   adjustments are disabled, the PMTU for all tunnels MUST default\
    \ to\n   the Link MTU (first hop) on the downstream interface.\n"
- title: 5.3.3.6.2.  MTU Filtering Procedure
  contents:
  - "5.3.3.6.2.  MTU Filtering Procedure\n   This section defines procedures that\
    \ a relay must execute when it\n   receives a multicast datagram whose size is\
    \ greater than the Tunnel\n   MTU of the tunnel or tunnels through which it must\
    \ be delivered.\n"
- title: 5.3.3.6.2.1.  IPv4 Multicast IP Datagrams
  contents:
  - "5.3.3.6.2.1.  IPv4 Multicast IP Datagrams\n   If the DF bit in the multicast\
    \ datagram header is set to 1 (Don't\n   Fragment), the relay MUST discard the\
    \ packet and, if the datagram\n   originated from an SSM source, send an ICMPv4\
    \ [RFC0792] Destination\n   Unreachable message to the source, with code 4 (fragmentation\
    \ needed\n   and DF set).  The ICMP Destination Unreachable message MUST contain\
    \ a\n   Next-Hop MTU (as specified by [RFC1191]), and the relay MUST set the\n\
    \   Next-Hop MTU to the TMTU associated with the tunnel or tunnels.  If\n   the\
    \ DF bit in the multicast datagram header is set to 0 (May\n   Fragment), the\
    \ relay MUST fragment the datagram and encapsulate each\n   fragment within Multicast\
    \ Data messages for transmission through the\n   tunnel or tunnels.  This ensures\
    \ that gateways will receive complete,\n   non-fragmented Multicast Data messages,\
    \ containing fragmented\n   multicast datagram payloads.  The relay SHOULD avoid\
    \ generating a\n   separate ICMP message for each tunnel but instead send a single\
    \ ICMP\n   message with a Next-Hop MTU equal to the smallest TMTU of all tunnels\n\
    \   to which the datagram was to be forwarded.\n"
- title: 5.3.3.6.2.2.  IPv6 Multicast IP Datagrams
  contents:
  - "5.3.3.6.2.2.  IPv6 Multicast IP Datagrams\n   The relay MUST discard the packet\
    \ and, if the datagram originated\n   from an SSM source, send an ICMPv6 [RFC4443]\
    \ Packet Too Big message\n   to the payload source.  The MTU specified in the\
    \ Packet Too Big\n   message MUST be equal to the TMTU associated with the tunnel\
    \ or\n   tunnels.  The relay SHOULD avoid generating a separate ICMPv6 message\n\
    \   for each tunnel but instead send a single ICMPv6 message with a\n   Next-Hop\
    \ MTU equal to the smallest TMTU of all tunnels to which the\n   datagram was\
    \ to be forwarded.\n"
- title: 5.3.3.6.3.  Encapsulation Procedure
  contents:
  - "5.3.3.6.3.  Encapsulation Procedure\n   A relay encapsulates a multicast IP datagram\
    \ in a UDP/IP Membership\n   Data message, using the tunnel endpoint UDP/IP address\
    \ as the\n   destination address and the unicast Relay Address and port number\
    \ as\n   the source UDP/IP address.  To ensure successful NAT traversal, the\n\
    \   source address and port MUST match the destination address and port\n   carried\
    \ by the Membership Update message sent by the gateway to\n   create the forwarding\
    \ table entry.\n   If possible, the relay SHOULD compute a valid, non-zero checksum\
    \ for\n   the UDP datagram carrying the Multicast Data message.  See\n   Section\
    \ 4.2.2.3.\n   The following sections describe additional requirements related\
    \ to\n   the IP protocol of the tunnel and that of the multicast IP datagram.\n"
- title: 5.3.3.6.3.1.  Tunneling over IPv4
  contents:
  - "5.3.3.6.3.1.  Tunneling over IPv4\n   When a relay delivers an IPv4 payload over\
    \ an IPv4 tunnel and the\n   DF bit in the payload header is set to 1 (Don't Fragment),\
    \ the relay\n   MUST set the DF bit in the Multicast Data IP header to 1.  When\
    \ a\n   relay delivers an IPv4 payload over an IPv4 tunnel and the DF bit in\n\
    \   the payload header is set to 0 (May Fragment), by default, the relay\n   MUST\
    \ set the DF bit in the Multicast Data IP header to 1.  However, a\n   relay MAY\
    \ provide a configuration option that allows the DF bit to be\n   copied from\
    \ the payload header to the Multicast Data IP header to\n   allow downstream fragmentation\
    \ of the Multicast Data message.  When a\n   relay delivers an IPv6 payload over\
    \ an IPv4 tunnel, the relay MUST\n   set the DF bit in the Multicast Data IP header\
    \ to 1.  The relay MUST\n   NOT transmit a Multicast Data message with an IP header\
    \ in which the\n   MF (More Fragments) bit is set to 1.\n"
- title: 5.3.3.6.3.2.  Tunneling over IPv6
  contents:
  - "5.3.3.6.3.2.  Tunneling over IPv6\n   When tunneling over IPv6, a relay MUST\
    \ NOT emit a Multicast Data\n   message datagram containing an IPv6 fragment header.\n"
- title: 5.3.3.6.4.  Handling Destination Unreachable Messages
  contents:
  - "5.3.3.6.4.  Handling Destination Unreachable Messages\n   If a relay receives\
    \ a sequence of ICMP or ICMPv6 Destination\n   Unreachable messages (excluding\
    \ ICMP code 4; see below) in response\n   to transmission of a sequence of AMT\
    \ Multicast Data messages to a\n   gateway, the relay SHOULD discontinue sending\
    \ messages to that\n   gateway and shut down the tunnel for that gateway.\n  \
    \ Handling of ICMP Destination Unreachable messages with code 4,\n   \"fragmentation\
    \ needed and DF set\" (i.e., \"Datagram Too Big\") is\n   covered in Section 5.3.3.6.1.\
    \  If a relay provides this capability,\n   it MUST provide a configuration option\
    \ that indicates what number of\n   sequential Destination Unreachable messages\
    \ can be received and\n   ignored before the relay will automatically shut down\
    \ a tunnel.\n"
- title: 5.3.3.7.  State Timers
  contents:
  - "5.3.3.7.  State Timers\n   A relay MUST maintain a timer or timers whose expiration\
    \ will trigger\n   the removal of any group subscriptions and forwarding state\n\
    \   previously created for a gateway endpoint should the gateway fail to\n   refresh\
    \ the group membership state within a specified time interval.\n   A relay MAY\
    \ use a variant of the IGMPv3/MLDv2 state management\n   protocol described in\
    \ Section 6 of [RFC3376] or Section 7 of\n   [RFC3810] or may maintain a per-endpoint\
    \ timer to trigger the\n   deletion of group membership state.\n   If a per-endpoint\
    \ timer is used, the relay MUST restart this timer\n   each time it receives a\
    \ new Membership Update message from the\n   gateway endpoint.\n   The endpoint\
    \ timer duration MAY be computed from tunable IGMP/MLD\n   variables as follows:\n\
    \   ((Robustness_Variable) * (Query_Interval)) + Query_Response_Interval\n   If\
    \ IGMP/MLD default values are used for these variables, the gateway\n   will time\
    \ out after 125s * 2 + 10s = 260s.  The timer duration MUST\n   be greater than\
    \ the query interval suggested in the last Membership\n   Query message sent to\
    \ the gateway endpoint.\n   Regardless of the timers used (IGMPv3/MLDv2 or endpoint),\
    \ the\n   Query_Response_Interval value SHOULD be greater than or equal to 10s\n\
    \   to allow for packet loss and round-trip time in the Request/\n   Membership\
    \ Query message exchange.\n"
- title: 5.3.3.8.  Relay Resource Management
  contents:
  - "5.3.3.8.  Relay Resource Management\n   A relay may be configured with various\
    \ service limits to ensure a\n   minimum level of performance for gateways that\
    \ connect to it.\n   If a relay has determined that it has reached or exceeded\
    \ maximum\n   allowable capacity or has otherwise exhausted resources required\
    \ to\n   support additional gateways, it SHOULD withdraw any Relay Discovery\n\
    \   Address Prefix it has advertised into the unicast internetwork and\n   SHOULD\
    \ set the L flag in any Membership Query messages it returns to\n   gateways while\
    \ in this state.\n   If the relay receives an update from a gateway that adds\
    \ group\n   membership or forwarding state for an endpoint that has already\n\
    \   reached maximum allowable state entries, the relay SHOULD continue to\n  \
    \ accept updates from the gateway but ignore any group membership/\n   forwarding\
    \ state additions requested by that gateway.\n   If the relay receives an update\
    \ from a gateway that would create a\n   new tunnel endpoint for a source IP address\
    \ that has already reached\n   the maximum allowable number of endpoints (maximum\
    \ UDP ports), it\n   should simply ignore the Membership Update.\n"
- title: 5.3.4.  Shutdown
  contents:
  - "5.3.4.  Shutdown\n   The following steps should be treated as an abstract description\
    \ of\n   the shutdown procedure for a relay:\n   o  Withdraw the Relay Discovery\
    \ Address Prefix advertisement\n      (if used).\n   o  Stop listening for Relay\
    \ Discovery messages.\n   o  Stop listening for control messages from gateways.\n\
    \   o  Stop sending data messages to gateways.\n   o  Delete all AMT group membership\
    \ and forwarding state created on\n      the relay, coordinating with the multicast\
    \ routing protocol to\n      update the group membership state on upstream interfaces\
    \ as\n      required.\n"
- title: 5.3.5.  Response MAC Generation
  contents:
  - "5.3.5.  Response MAC Generation\n   A Response MAC value is computed by the relay.\
    \  A Response MAC\n   computation is required in the following situations:\n \
    \  o  To generate a Response MAC value from a Request message for\n      inclusion\
    \ in a Membership Query message.\n   o  To generate a Response MAC value from\
    \ a Membership Update message\n      for use in authenticating the Response MAC\
    \ carried within that\n      message.\n   o  To generate a Response MAC value\
    \ from a Teardown message to\n      authenticate the Response MAC carried within\
    \ that message.\n   Gateways treat the Response MAC field as an opaque value,\
    \ so a relay\n   implementation may generate the MAC using any method available\
    \ to it.\n   The RECOMMENDED method for computing the Response MAC is to compute\
    \ a\n   cryptographically secure hash or keyed-hash digest from the following\n\
    \   values:\n   o  The source IP address of the message (or Teardown Gateway IP\n\
    \      Address field).\n   o  The source UDP port of the message (or Teardown\
    \ Gateway Port\n      Number field).\n   o  The Request Nonce contained in the\
    \ message.\n   o  A private secret or key known only to the relay.\n"
- title: 5.3.6.  Private Secret Generation
  contents:
  - "5.3.6.  Private Secret Generation\n   If the relay implementation uses a private\
    \ secret (or key) to compute\n   the Response MAC value, the relay SHOULD periodically\
    \ compute a new\n   private secret.  The RECOMMENDED maximum interval is 2 hours.\
    \  A\n   relay MUST retain the prior secret for use in verifying MAC values\n\
    \   that were sent to gateways just prior to the use of the new secret.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   AMT is not intended to be a strongly secure protocol.\
    \  In general,\n   the protocol provides the same level of security and robustness\
    \ as is\n   provided by the UDP, IGMP, and MLD protocols on which it relies. \
    \ The\n   lack of strong security features can be largely attributed to the\n\
    \   desire to make the protocol lightweight by minimizing the state and\n   computation\
    \ required to service a single gateway, thereby allowing a\n   relay to service\
    \ a larger number of gateways.\n   Many of the threats and vectors described in\
    \ [RFC3552] may be\n   employed against the protocol to launch various types of\
    \ denial-of-\n   service attacks that can affect the functioning of gateways or\
    \ their\n   ability to locate and communicate with a relay.  These scenarios are\n\
    \   described below.\n   As is the case for UDP, IGMP, and MLD, the AMT protocol\
    \ provides no\n   mechanisms for ensuring message delivery or integrity.  The\
    \ protocol\n   does not provide confidentiality -- multicast groups, sources,\
    \ and\n   streams requested by a gateway are sent in the clear.\n   The protocol\
    \ does use a three-way handshake to provide trivial source\n   authentication\
    \ for state allocation and updates (see below).  The\n   protocol also requires\
    \ gateways and relays to ignore malformed\n   messages and those messages that\
    \ do not carry expected address\n   values, protocol payload types, or content.\n"
- title: 6.1.  Relays
  contents:
  - "6.1.  Relays\n   The three-way handshake provided by the membership update message\n\
    \   sequence (see Section 4.2.1.2) provides a defense against source-\n   spoofing-based\
    \ resource-exhaustion attacks on a relay by requiring\n   source authentication\
    \ before state allocation.  However, in an effort\n   to consume computational\
    \ resources, attackers may still attempt to\n   flood a relay with Request and\
    \ Membership Update messages to force\n   the relay to make the MAC authentication\
    \ computations.\n   Implementations may choose to limit the frequency with which\
    \ a relay\n   responds to Request messages sent from a single IP address or IP\n\
    \   address and UDP port pair, but support for this functionality is not\n   required.\
    \  The three-way handshake provides no defense against an\n   eavesdropping or\
    \ man-in-the-middle attacker.\n   Attackers that execute the gateway protocol\
    \ may consume relay\n   resources by instantiating a large number of tunnels or\
    \ joining a\n   large number of multicast streams.  A relay implementation should\n\
    \   provide a mechanism for limiting the number of tunnels (Multicast\n   Data\
    \ message destinations) that can be created for a single gateway\n   source address.\
    \  Relays should also provide a means for limiting the\n   number of joins per\
    \ tunnel instance as a defense against these\n   attacks.\n   Relays may withdraw\
    \ their AMT anycast prefix advertisement when they\n   reach configured maximum\
    \ capacity or exhaust required resources.\n   This behavior allows gateways to\
    \ use the relay discovery process to\n   find the next topologically nearest relay\
    \ that has advertised the\n   prefix.  This behavior also allows a successful\
    \ resource-exhaustion\n   attack to propagate from one relay to the next until\
    \ all relays\n   reachable using the anycast address have effectively been taken\n\
    \   offline.  This behavior may also be used to acquire the unicast\n   addresses\
    \ for individual relays that can then be used to launch a\n   DDoS attack on all\
    \ of the relays without using the relay discovery\n   process.  To prevent wider\
    \ disruption of AMT-based distribution\n   networks, relay anycast address advertisements\
    \ can be limited to\n   specific administrative routing domains.  This will isolate\
    \ such\n   attacks to a single domain.\n   The Path and Tunnel MTU adjustment\
    \ (discovery) procedure described in\n   Section 5.3.3.6.1 is vulnerable to two\
    \ denial-of-service attacks (see\n   Section 8 of [RFC1191] for details).  Both\
    \ attacks are based on a\n   malicious party sending forged ICMPv4 Destination\
    \ Unreachable or\n   ICMPv6 Packet Too Big messages to a host.  In the first attack,\
    \ the\n   forged message indicates an inordinately small Path MTU.  In the\n \
    \  second attack, the forged message indicates an inordinately large\n   Path\
    \ MTU.  In both cases, throughput is adversely affected.  In order\n   to mitigate\
    \ such attacks, relay implementations MUST include a\n   configuration option\
    \ to disable Path MTU adjustments on AMT tunnels.\n"
- title: 6.2.  Gateways
  contents:
  - "6.2.  Gateways\n   A passive eavesdropper may launch a denial-of-service attack\
    \ on a\n   gateway by capturing a Membership Query or Membership Update message\n\
    \   and using the Request Nonce and message authentication code carried\n   by\
    \ the captured message to send a spoofed Membership Update or\n   Teardown message\
    \ to the relay.  The spoofed messages may be used to\n   modify or destroy group\
    \ membership state associated with the gateway,\n   thereby changing or interrupting\
    \ the multicast traffic flows.\n   A passive eavesdropper may also spoof Multicast\
    \ Data messages in an\n   attempt to overload the gateway or to disrupt or supplant\
    \ existing\n   traffic flows.  A properly implemented gateway will filter Multicast\n\
    \   Data messages that do not originate from the expected Relay Address\n   and\
    \ should filter non-multicast packets and multicast IP packets\n   whose group\
    \ or source addresses are not included in the current\n   reception state for\
    \ the gateway pseudo-interface.\n   An active eavesdropper may launch a man-in-the-middle\
    \ attack in which\n   messages normally exchanged between a gateway and relay\
    \ are\n   intercepted, modified, spoofed, or discarded by the attacker.  The\n\
    \   attacker may deny access to, modify, or replace requested multicast\n   traffic.\
    \  The AMT protocol provides no means for detecting or\n   defending against a\
    \ man-in-the-middle attack -- any such\n   functionality must be provided by multicast\
    \ receiver applications\n   through independent detection and validation of incoming\
    \ multicast\n   datagrams.\n   The anycast discovery technique for finding relays\
    \ (see\n   Section 4.1.4) introduces a risk that a rogue router or a rogue\n \
    \  Autonomous System (AS) could introduce a bogus route to a specific\n   Relay\
    \ Discovery Address Prefix and thus divert or absorb Relay\n   Discovery messages\
    \ sent by gateways.  Network managers must guarantee\n   the integrity of their\
    \ routing to a particular Relay Discovery\n   Address Prefix in much the same\
    \ way that they guarantee the integrity\n   of all other routes.\n"
- title: 6.3.  Encapsulated IP Packets
  contents:
  - "6.3.  Encapsulated IP Packets\n   An attacker forging or modifying a Membership\
    \ Query or Membership\n   Update message may attempt to embed something other\
    \ than an IGMP or\n   MLD message within the encapsulated IP packet carried by\
    \ these\n   messages in an effort to introduce these into the recipient's IP\n\
    \   stack.  A properly implemented gateway or relay will ignore any such\n   messages\
    \ and may further choose to ignore Membership Query messages\n   that do not contain\
    \ IGMP/MLD General Query or Membership Update\n   messages that do not contain\
    \ IGMP/MLD membership reports.\n   Properly implemented gateways and relays will\
    \ also filter\n   encapsulated IP packets that appear corrupted or truncated by\n\
    \   verifying packet length and checksums.\n"
- title: 7.  IANA Considerations
  contents:
  - '7.  IANA Considerations

    '
- title: 7.1.  IPv4 and IPv6 Anycast Prefix Allocation
  contents:
  - "7.1.  IPv4 and IPv6 Anycast Prefix Allocation\n   The following unicast prefixes\
    \ have been assigned to provide anycast\n   routing of Relay Discovery messages\
    \ to public AMT relays as described\n   in Section 4.1.4.  Address assignments\
    \ within these prefixes are\n   described in Section 4.1.5.2.\n"
- title: 7.1.1.  IPv4
  contents:
  - "7.1.1.  IPv4\n   IANA has assigned 192.52.193.0/24 from the \"IANA IPv4 Special-Purpose\n\
    \   Address Registry\".  The block has been registered as follows:\n         \
    \        +----------------------+----------------+\n                 | Attribute\
    \            | Value          |\n                 +----------------------+----------------+\n\
    \                 | Address Block        |192.52.193.0/24 |\n                \
    \ | Name                 | AMT            |\n                 | RFC          \
    \        | [RFC7450]      |\n                 | Allocation Date      | 2014-12\
    \        |\n                 | Termination Date     | N/A            |\n     \
    \            | Source               | True           |\n                 | Destination\
    \          | True           |\n                 | Forwardable          | True\
    \           |\n                 | Global               | True           |\n  \
    \               | Reserved-by-Protocol | False          |\n                 +----------------------+----------------+\n"
- title: 7.1.2.  IPv6
  contents:
  - "7.1.2.  IPv6\n   IANA has registered the following special-purpose address block\
    \ for\n   IPv6 anycast AMT relay discovery.\n                 +----------------------+----------------+\n\
    \                 | Attribute            | Value          |\n                \
    \ +----------------------+----------------+\n                 | Address Block\
    \        | 2001:3::/32    |\n                 | Name                 | AMT   \
    \         |\n                 | RFC                  | [RFC7450]      |\n    \
    \             | Allocation Date      | 2014-12        |\n                 | Termination\
    \ Date     | N/A            |\n                 | Source               | True\
    \           |\n                 | Destination          | True           |\n  \
    \               | Forwardable          | True           |\n                 |\
    \ Global               | True           |\n                 | Reserved-by-Protocol\
    \ | False          |\n                 +----------------------+----------------+\n"
- title: 7.2.  UDP Port Number
  contents:
  - "7.2.  UDP Port Number\n   The UDP port number 2268 has been reserved with IANA\
    \ for use in the\n   implementation and deployment of AMT.  The protocol described\
    \ by this\n   document continues to use this port number according to the intent\
    \ of\n   the original request.  IANA has updated the assignee, contact, and\n\
    \   reference fields for this port number in accordance with this\n   document.\n"
- title: 8.  References
  contents:
  - '8.  References

    '
- title: 8.1.  Normative References
  contents:
  - "8.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997,\n              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC3376]\
    \  Cain, B., Deering, S., Kouvelas, I., Fenner, B., and A.\n              Thyagarajan,\
    \ \"Internet Group Management Protocol,\n              Version 3\", RFC 3376,\
    \ October 2002,\n              <http://www.rfc-editor.org/info/rfc3376>.\n   [RFC3810]\
    \  Vida, R., Ed., and L. Costa, Ed., \"Multicast Listener\n              Discovery\
    \ Version 2 (MLDv2) for IPv6\", RFC 3810,\n              June 2004, <http://www.rfc-editor.org/info/rfc3810>.\n\
    \   [RFC4291]  Hinden, R. and S. Deering, \"IP Version 6 Addressing\n        \
    \      Architecture\", RFC 4291, February 2006,\n              <http://www.rfc-editor.org/info/rfc4291>.\n\
    \   [RFC4607]  Holbrook, H. and B. Cain, \"Source-Specific Multicast for\n   \
    \           IP\", RFC 4607, August 2006,\n              <http://www.rfc-editor.org/info/rfc4607>.\n\
    \   [RFC4787]  Audet, F., Ed., and C. Jennings, \"Network Address\n          \
    \    Translation (NAT) Behavioral Requirements for Unicast\n              UDP\"\
    , BCP 127, RFC 4787, January 2007,\n              <http://www.rfc-editor.org/info/rfc4787>.\n"
- title: 8.2.  Informative References
  contents:
  - "8.2.  Informative References\n   [RFC0791]  Postel, J., \"Internet Protocol\"\
    , STD 5, RFC 791,\n              September 1981, <http://www.rfc-editor.org/info/rfc0791>.\n\
    \   [RFC0792]  Postel, J., \"Internet Control Message Protocol\", STD 5,\n   \
    \           RFC 792, September 1981,\n              <http://www.rfc-editor.org/info/rfc0792>.\n\
    \   [RFC1112]  Deering, S., \"Host extensions for IP multicasting\", STD 5,\n\
    \              RFC 1112, August 1989,\n              <http://www.rfc-editor.org/info/rfc1112>.\n\
    \   [RFC1191]  Mogul, J. and S. Deering, \"Path MTU discovery\", RFC 1191,\n \
    \             November 1990, <http://www.rfc-editor.org/info/rfc1191>.\n   [RFC1546]\
    \  Partridge, C., Mendez, T., and W. Milliken, \"Host\n              Anycasting\
    \ Service\", RFC 1546, November 1993,\n              <http://www.rfc-editor.org/info/rfc1546>.\n\
    \   [RFC1981]  McCann, J., Deering, S., and J. Mogul, \"Path MTU Discovery\n \
    \             for IP version 6\", RFC 1981, August 1996,\n              <http://www.rfc-editor.org/info/rfc1981>.\n\
    \   [RFC2236]  Fenner, W., \"Internet Group Management Protocol,\n           \
    \   Version 2\", RFC 2236, November 1997,\n              <http://www.rfc-editor.org/info/rfc2236>.\n\
    \   [RFC2460]  Deering, S. and R. Hinden, \"Internet Protocol, Version 6\n   \
    \           (IPv6) Specification\", RFC 2460, December 1998,\n              <http://www.rfc-editor.org/info/rfc2460>.\n\
    \   [RFC2663]  Srisuresh, P. and M. Holdrege, \"IP Network Address\n         \
    \     Translator (NAT) Terminology and Considerations\",\n              RFC 2663,\
    \ August 1999,\n              <http://www.rfc-editor.org/info/rfc2663>.\n   [RFC2710]\
    \  Deering, S., Fenner, W., and B. Haberman, \"Multicast\n              Listener\
    \ Discovery (MLD) for IPv6\", RFC 2710,\n              October 1999, <http://www.rfc-editor.org/info/rfc2710>.\n\
    \   [RFC3552]  Rescorla, E. and B. Korver, \"Guidelines for Writing RFC\n    \
    \          Text on Security Considerations\", BCP 72, RFC 3552,\n            \
    \  July 2003, <http://www.rfc-editor.org/info/rfc3552>.\n   [RFC4271]  Rekhter,\
    \ Y., Ed., Li, T., Ed., and S. Hares, Ed., \"A\n              Border Gateway Protocol\
    \ 4 (BGP-4)\", RFC 4271,\n              January 2006, <http://www.rfc-editor.org/info/rfc4271>.\n\
    \   [RFC4443]  Conta, A., Deering, S., and M. Gupta, Ed., \"Internet\n       \
    \       Control Message Protocol (ICMPv6) for the Internet\n              Protocol\
    \ Version 6 (IPv6) Specification\", RFC 4443,\n              March 2006, <http://www.rfc-editor.org/info/rfc4443>.\n\
    \   [RFC4601]  Fenner, B., Handley, M., Holbrook, H., and I. Kouvelas,\n     \
    \         \"Protocol Independent Multicast - Sparse Mode (PIM-SM):\n         \
    \     Protocol Specification (Revised)\", RFC 4601, August 2006,\n           \
    \   <http://www.rfc-editor.org/info/rfc4601>.\n   [RFC4786]  Abley, J. and K.\
    \ Lindqvist, \"Operation of Anycast\n              Services\", BCP 126, RFC 4786,\
    \ December 2006,\n              <http://www.rfc-editor.org/info/rfc4786>.\n  \
    \ [RFC6935]  Eubanks, M., Chimento, P., and M. Westerlund, \"IPv6 and\n      \
    \        UDP Checksums for Tunneled Packets\", RFC 6935, April 2013,\n       \
    \       <http://www.rfc-editor.org/info/rfc6935>.\n   [RFC6936]  Fairhurst, G.\
    \ and M. Westerlund, \"Applicability Statement\n              for the Use of IPv6\
    \ UDP Datagrams with Zero Checksums\",\n              RFC 6936, April 2013,\n\
    \              <http://www.rfc-editor.org/info/rfc6936>.\n"
- title: Acknowledgments
  contents:
  - "Acknowledgments\n   The author would like to thank the following individuals\
    \ for their\n   suggestions, comments, and corrections:\n      Mark Altom\n  \
    \    Toerless Eckert\n      Marshall Eubanks\n      Gorry Fairhurst\n      Dino\
    \ Farinacci\n      Lenny Giuliano\n      Andy Huang\n      Tom Imburgia\n    \
    \  Patricia McCrink\n      Han Nguyen\n      Doug Nortz\n      Pekka Savola\n\
    \      Robert Sayko\n      Greg Shepherd\n      Steve Simlo\n      Mohit Talwar\n\
    \      Lorenzo Vicisano\n      Kurt Windisch\n      John Zwiebel\n   The anycast\
    \ discovery mechanism described in this document is based\n   on similar work\
    \ done by the NGTrans WG for obtaining automatic IPv6\n   connectivity without\
    \ explicit tunnels (\"6to4\").  Tony Ballardie\n   provided helpful discussion\
    \ that inspired this document.\n   Juniper Networks was instrumental in funding\
    \ several versions of this\n   document as well as an open source implementation.\n"
- title: Contributors
  contents:
  - "Contributors\n   The following people provided significant contributions to the\
    \ design\n   of the protocol and earlier versions of this specification:\n   \
    \   Amit Aggarwal\n      Microsoft Corporation\n      One Microsoft Way\n    \
    \  Redmond, WA  98052-6399\n      United States\n      EMail: amitag@microsoft.com\n\
    \      Thomas Morin\n      Orange\n      2, avenue Pierre Marzin\n      Lannion\
    \  22300\n      France\n      EMail: thomas.morin@orange.com\n      Dirk Ooms\n\
    \      OneSparrow\n      Robert Molsstraat 11; 2018 Antwerp\n      Belgium\n \
    \     EMail: dirk@onesparrow.com\n      Tom Pusateri\n      !j\n      Wake Forest,\
    \ NC\n      United States\n      EMail: pusateri@bangj.com\n      Dave Thaler\n\
    \      Microsoft Corporation\n      One Microsoft Way\n      Redmond, WA  98052-6399\n\
    \      United States\n      EMail: dthaler@microsoft.com\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Gregory Bumgardner\n   Phone: +1 541 343 6790\n   EMail:\
    \ gbumgard@gmail.com\n"
