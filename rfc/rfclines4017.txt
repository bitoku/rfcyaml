MAC Security Enhancements Amendment makes use of IEEE 802.1X, which in turn relies on the Extensible Authentication Protocol (EAP).
This document defines requirements for EAP methods used in IEEE 802.11 wireless LAN deployments.
The material in this document has been approved by IEEE 802.11 and is being presented as an IETF RFC for informational purposes.
MAC Security Enhancements Amendment [IEEE802.11i] makes use of IEEE 802.1X [IEEE802.1X], which in turn relies on the Extensible Authentication Protocol (EAP), defined in [RFC3748].
Today, deployments of IEEE 802.11 wireless LANs are based on EAP and use several EAP methods, including EAP TLS [RFC2716], EAP TTLS [TTLS],
PEAP [PEAP], and EAP SIM [EAPSIM].
These methods support authentication credentials that include digital certificates, user  names and passwords, secure tokens, and SIM secrets.
This document defines requirements for EAP methods used in IEEE 802.11 wireless LAN deployments.
EAP methods claiming conformance to the IEEE 802.11 EAP method requirements for wireless LANs must complete IETF last call review.
In this document, several words are used to signify the requirements of the specification.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in [RFC2119].
An EAP authentication method is not compliant with this specification if it fails to satisfy one or more of the MUST or MUST NOT requirements.
An EAP authentication method that satisfies all the MUST, MUST NOT, SHOULD, and SHOULD NOT requirements is said to be "unconditionally compliant"; one that satisfies all the MUST and MUST NOT requirements but not all the SHOULD or SHOULD NOT requirements is said to be "conditionally compliant".
The end of the link initiating EAP authentication.
The term authenticator is used in [IEEE802.1X], and authenticator has the same meaning in this document.
peer The end of the link that responds to the authenticator.
In [IEEE802.1X], this end is known as the supplicant.
The end of the link that responds to the authenticator in [IEEE802.1X].
A backend authentication server is an entity that provides an authentication service to an authenticator.
When used, this server typically executes EAP methods for the authenticator.
This terminology is also used in [IEEE802.1X].
The entity that terminates the EAP authentication method with the peer.
In the case where no backend authentication server is used, the EAP server is part of the authenticator.
In the case where the authenticator operates in pass through mode, the EAP server is located on the backend authentication server.
Keying material that is derived between the EAP peer and server and exported by the EAP method.
The MSK is at least 64 octets in length.
In existing implementations, an AAA server acting as an EAP server transports the MSK to the authenticator.
Extended Master Session Key (EMSK)
Additional keying material derived between the EAP client and server that is exported by the EAP method.
The EMSK is at least 64 octets in length.
The EMSK is not shared with the authenticator or any other third party.
The EMSK is reserved for future uses that are not yet defined.
A pairwise Authentication and Key Management Protocol (AKMP) defined in [IEEE802.11i], which confirms mutual possession of a Pairwise Master Key by two parties and distributes a Group Key.
MAC Security Enhancements Amendment requires that EAP authentication methods be available.
Wireless LAN deployments are expected to use different credential types, including digital certificates, user names and passwords, existing secure tokens, and mobile network credentials (GSM and UMTS secrets).
Other credential types that may be used include public/private key (without necessarily requiring certificates) and asymmetric credential support (such as password on one side, public/private key on the other).
Mandatory Requirements EAP authentication methods suitable for use in wireless LAN authentication MUST satisfy the following criteria: [1]  Generation of symmetric keying material.
This corresponds to the "Key derivation" security claim defined in [RFC3748], Section 7.2.1.
An EAP method suitable for use with IEEE 802.11 MUST be capable of generating keying material with 128 bits of effective key strength, as defined in [RFC3748], Section 7.2.1.
As noted in [RFC3748], Section 7.10, an EAP method supporting key derivation MUST export a Master Session Key (MSK) of at least 64 octets, and an Extended Master Session Key (EMSK) of at least 64 octets.
This corresponds to the "Mutual authentication" security claim defined in [RFC3748], Section 7.2.1.
The shared EAP method state of the EAP peer and server must be equivalent when the EAP method is successfully completed on both sides.
This includes the internal state of the authentication protocol but not the state external to the EAP method, such as the negotiation occurring prior to initiation of the EAP method.
The exact state attributes that are shared may vary from method to method, but typically include the method version number, the credentials presented and accepted by both parties, the cryptographic keys shared, and the EAP method specific attributes negotiated, such as ciphersuites and limitations of usage on all protocol state.
Both parties must be able to distinguish this instance of the protocol from all other instances of the protocol, and they must share the same view regarding which state attributes are public and which are private to the two parties alone.
The server must obtain the authenticated peer name, and the peer must obtain the authenticated server name (if the authenticated server name is available).
[5]  Resistance to dictionary attacks.
This corresponds to the "Dictionary attack resistance" security claim defined in [RFC3748], Section 7.2.1.
[6]  Protection against man in the middle attacks.
This corresponds to the "Cryptographic binding", "Integrity protection", "Replay protection", and "Session independence" security claims defined in [RFC3748], Section 7.2.1.
If the method negotiates the ciphersuite used to protect the EAP conversation, then it MUST support the "Protected ciphersuite negotiation" security claim defined in [RFC3748], Section 7.2.1. 2.3.
Recommended Requirements EAP authentication methods used for wireless LAN authentication SHOULD support the following features: [8]  Fragmentation.
This implies support for the "Fragmentation" claim defined in [RFC3748], Section 7.2.1.
"EAP methods can assume a minimum EAP MTU of 1020 octets, in the absence of other information.
EAP methods SHOULD include support for fragmentation and reassembly if their payloads can be larger than this minimum EAP MTU."
[9]  End user identity hiding.
This corresponds to the "Confidentiality" security claim defined in [RFC3748], Section 7.2.1. 2.4.
Optional Features EAP authentication methods used for wireless LAN authentication MAY support the following features: [10] Channel binding.
This corresponds to the "Channel binding" security claim defined in [RFC3748], Section 7.2.1.
This corresponds to the "Fast reconnect" security claim defined in [RFC3748], Section 7.2.1. 2.5.
Non compliant EAP Authentication Methods EAP MD5 Challenge (the current mandatory to implement EAP authentication method), is defined in [RFC3748], Section 5.4.
As defined in [RFC3748], EAP MD5 Challenge, One Time Password (Section 5.5), and Generic Token Card (Section 5.6) are non compliant with the requirements specified in this document.
As noted in [RFC3748], these methods do not support any of the mandatory requirements defined in Section 2.2, including key derivation and mutual authentication.
In addition, these methods do not support any of the recommended features defined in Section 2.3 or any of the optional features defined in Section 2.4.
Within [IEEE802.11i], EAP is used for both authentication and key exchange between the EAP peer and server.
Given that wireless local area networks provide ready access to an attacker within range
, EAP usage within [IEEE802.11i] is subject to the threats outlined in [RFC3748], Section 7.1.
Security considerations relating to EAP are discussed in [RFC3748], Sections 7; where an authentication server is utilized, the security considerations described in [RFC3579], Section 4, will apply.
The system security properties required to address the threats described in [RFC3748], Section 7.1, are noted in [Housley56].
In the material below, the requirements articulated in [Housley56] are listed, along with the corresponding recommendations.
Wherever cryptographic algorithms are chosen, the algorithms must be negotiable, in order to provide resilience against compromise of a particular cryptographic algorithm.
" This issue is addressed by mandatory requirement [7] in Section 2.2.
Algorithm independence is one of the EAP invariants described in [KEYFRAME].
Strong, fresh session keys Requirement: "Session keys must be demonstrated to be strong and fresh in all circumstances, while at the same time retaining algorithm independence."
Key strength is addressed by mandatory requirement [2] in Section 2.2.
Recommendations for ensuring the Freshness of keys derived by EAP methods are discussed in [RFC3748], Section 7.10.
Replay protection Requirement: "All protocol exchanges must be replay protected.
" This is addressed by mandatory requirement [6] in Section 2.2.
Authentication Requirements: "All parties need to be authenticated.
The confidentiality of the authenticator must be maintained.
No plaintext passwords are allowed."
Mutual authentication is required as part of mandatory requirement [3] in Section 2.2.
Identity protection is a recommended capability, described in requirement [9] in Section 2.3.
EAP does not support plaintext passwords, as noted in [RFC3748], Section 7.14.
EAP peer and authenticator authorization must be performed.
" Authorization issues are discussed in [RFC3748], Sections 1.2 and 7.16.
Authentication, Authorization, and Accounting (AAA) protocols such as RADIUS [RFC2865][RFC3579] may be used to enable authorization of EAP peers by a central authority.
AAA authorization issues are discussed in [RFC3579], Sections 2.6.3 and 4.3.7.
Confidentiality of session keys must be maintained.
" Issues relating to Key Derivation are described in [RFC3748], Section 7.10, as well as in [KEYFRAME].
The selection of the "best" ciphersuite must be securely confirmed.
" This is addressed in mandatory requirement [7] in Section 2.2.
Unique naming Requirement: "Session keys must be uniquely named.
Key naming issues are addressed in [KEYFRAME].
Compromise of a single authenticator cannot compromise any other part of the system, including session keys and long term secrets.
" This issue is addressed by mandatory requirement [6] in Section 2.2.
The key must be bound to the appropriate context.
" This issue is addressed in optional requirement [10] in Section 2.4.
Channel binding is also discussed in Section 7.15 of [RFC3748] and Section 4.3.7 of [RFC3579].
