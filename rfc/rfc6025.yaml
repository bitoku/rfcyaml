- title: __initial_text__
  contents:
  - '                           ASN.1 Translation

    '
- title: Abstract
  contents:
  - "Abstract\n   Abstract Syntax Notation One (ASN.1) is widely used throughout the\n\
    \   IETF Security Area and has been for many years.  Some specifications\n   were\
    \ written using a now deprecated version of ASN.1 and some were\n   written using\
    \ the current version of ASN.1.  Not all ASN.1 compilers\n   support both older\
    \ and current syntax.  This document is intended to\n   provide guidance to specification\
    \ authors and to implementers\n   converting ASN.1 modules from one version of\
    \ ASN.1 to another version\n   without causing changes to the \"bits on the wire\"\
    .  This document\n   does not provide a comprehensive tutorial of any version\
    \ of ASN.1.\n   Instead, it addresses ASN.1 features that are used in IETF Security\n\
    \   Area specifications with a focus on items that vary with the ASN.1\n   version.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc6025.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2010 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  Terminology  . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n   2.  ASN.1 Design Elements  . . . . . . . . . . . . . . . .\
    \ . . . .  3\n     2.1.  Open Types . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  3\n       2.1.1.  ANY DEFINED BY . . . . . . . . . . . . . . . . . .\
    \ . .  4\n       2.1.2.  OCTET STRINGs and BIT STRINGs  . . . . . . . . . . .\
    \ .  5\n       2.1.3.  Information Object Classes . . . . . . . . . . . . . .\
    \  5\n     2.2.  Constraints  . . . . . . . . . . . . . . . . . . . . . . .  8\n\
    \       2.2.1.  Simple Table Constraints . . . . . . . . . . . . . . .  8\n  \
    \     2.2.2.  Component Relation Constraints . . . . . . . . . . . .  9\n    \
    \   2.2.3.  Content Constraints  . . . . . . . . . . . . . . . . . 11\n     2.3.\
    \  Parameterization . . . . . . . . . . . . . . . . . . . . . 12\n     2.4.  Versioning\
    \ and Extensibility . . . . . . . . . . . . . . . 13\n       2.4.1.  Extension\
    \ Markers  . . . . . . . . . . . . . . . . . . 14\n       2.4.2.  Version Brackets\
    \ . . . . . . . . . . . . . . . . . . . 14\n   3.  Character Set Differences \
    \ . . . . . . . . . . . . . . . . . . 15\n   4.  ASN.1 Translation  . . . . .\
    \ . . . . . . . . . . . . . . . . . 16\n     4.1.  Downgrading from X.68x to X.208\
    \  . . . . . . . . . . . . . 16\n     4.2.  Upgrading from X.208 to X.68x  . .\
    \ . . . . . . . . . . . . 16\n   5.  Security Considerations  . . . . . . . .\
    \ . . . . . . . . . . . 17\n   6.  References . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . 18\n     6.1.  Normative References . . . . . . . . . .\
    \ . . . . . . . . . 18\n     6.2.  Informative References . . . . . . . . . .\
    \ . . . . . . . . 18\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   This document is intended to serve as a tutorial for converting\
    \ ASN.1\n   modules written using [CCITT.X208.1988] to [CCITT.X680.2002], or vice\n\
    \   versa.  Preparation of this document was motivated by [RFC5911] and\n   [RFC5912],\
    \ which provide updated ASN.1 modules for a number of RFCs.\n   The intent of\
    \ this specification is to assist with translation of\n   ASN.1 from one version\
    \ to another without resulting in any changes to\n   the encoded results when\
    \ using the Basic Encoding Rules or\n   Distinguished Encoding Rules [CCITT.X209.1988]\
    \ [CCITT.X690.2002].\n   Other encoding rules were not considered.\n   Transforming\
    \ a new ASN.1 module to an older ASN.1 module can be\n   performed in a fairly\
    \ mechanical manner; much of the transformation\n   consists of deleting new constructs.\
    \  Transforming an older ASN.1\n   module to a newer ASN.1 module can also be\
    \ done fairly mechanically,\n   if one does not wish to move many of the constraints\
    \ that are\n   contained in the prose into the ASN.1 module.  If the constraints\
    \ are\n   to be added, then the conversion can be a complex process.\n"
- title: 1.1.  Terminology
  contents:
  - "1.1.  Terminology\n   This document addresses two different versions of ASN.1.\
    \  The old\n   (1988) version was defined in a single document (X.208) and the\
    \ newer\n   (1998, 2002) version is defined in a series of documents (X.680,\n\
    \   X.681, X.682, and X.683).  For convenience, the series of documents\n   is\
    \ henceforth referred to as X.68x.  Specific documents from the\n   series are\
    \ referenced by name where appropriate.\n"
- title: 2.  ASN.1 Design Elements
  contents:
  - "2.  ASN.1 Design Elements\n   When translating an ASN.1 module from X.208 syntax\
    \ to X.68x syntax,\n   or vice versa, many definitions do not require or benefit\
    \ from\n   change.  Review of the original ASN.1 modules updated by [RFC5911]\n\
    \   and [RFC5912] and the revised modules included in those documents\n   indicates\
    \ that most changes can be sorted into one of a few\n   categories.  This section\
    \ describes these categories.\n"
- title: 2.1.  Open Types
  contents:
  - "2.1.  Open Types\n   Protocols often feature flexible designs that enable other\
    \ (later)\n   specifications to define the syntax and semantics of some features.\n\
    \   For example, [RFC5280] includes the definition of the Extension\n   structure.\
    \  There are many instances of extensions defined in other\n   specifications.\
    \  Several mechanisms to accommodate this practice are\n   available in X.208,\
    \ X.68x, or both, as described below.\n"
- title: 2.1.1.  ANY DEFINED BY
  contents:
  - "2.1.1.  ANY DEFINED BY\n   X.208 defines the ANY DEFINED BY production for specifying\
    \ open\n   types.  This typically appears in a SEQUENCE along with an OBJECT\n\
    \   IDENTIFIER that indicates the type of object that is encoded.  The\n   ContentInfo\
    \ structure, shown below from [RFC5652], uses ANY DEFINED\n   BY along with an\
    \ OBJECT IDENTIFIER field to identify and convey\n   arbitrary types of data.\
    \  Each content type to be wrapped in a\n   ContentInfo is assigned a unique OBJECT\
    \ IDENTIFIER, such as the\n   id-signedData shown below.  However, X.208 does\
    \ not provide a formal\n   means for establishing a relationship between a type\
    \ and the type\n   identifier.  Any associations are done in the comments of the\
    \ module\n   and/or the text of the associated document.\n   -- from RFC 5652\n\
    \   ContentInfo ::= SEQUENCE {\n       contentType ContentType,\n       content\
    \ [0] EXPLICIT ANY DEFINED BY contentType }\n   ContentType ::= OBJECT IDENTIFIER\n\
    \   id-signedData OBJECT IDENTIFIER ::= { iso(1) member-body(2)\n      us(840)\
    \ rsadsi(113549) pkcs(1) pkcs7(7) 2 }\n   ANY DEFINED BY may also appear using\
    \ an INTEGER to indicate the type\n   of object that is encoded, as shown in the\
    \ following example from\n   [RFC5280].\n   -- from RFC 5280\n   ExtensionAttribute\
    \ ::=  SEQUENCE {\n       extension-attribute-type [0] IMPLICIT INTEGER\n    \
    \       (0..ub-extension-attributes),\n       extension-attribute-value [1]\n\
    \           ANY DEFINED BY extension-attribute-type }\n   Though the usage of\
    \ ANY DEFINED BY was deprecated in 1994, it appears\n   in some active specifications.\
    \  The AttributeValue definition in\n   [RFC5280] uses ANY with a DEFINED BY comment\
    \ to bind the value to a\n   type identifier field.\n   -- from RFC 5280\n   AttributeTypeAndValue\
    \ ::= SEQUENCE {\n       type     AttributeType,\n       value    AttributeValue\
    \ }\n   AttributeType ::= OBJECT IDENTIFIER\n   AttributeValue ::= ANY -- DEFINED\
    \ BY AttributeType\n"
- title: 2.1.2.  OCTET STRINGs and BIT STRINGs
  contents:
  - "2.1.2.  OCTET STRINGs and BIT STRINGs\n   Both X.208 and X.68x allow open types\
    \ to be implemented using OCTET\n   STRINGs and BIT STRINGs as containers.  The\
    \ definitions of Extension\n   and SubjectPublicKeyInfo in [RFC5280] demonstrate\
    \ the usage of OCTET\n   STRING and BIT STRING, respectively, to convey information\
    \ that is\n   further defined using ASN.1.\n   -- from RFC 5280\n   Extension\
    \  ::=  SEQUENCE  {\n       extnID      OBJECT IDENTIFIER,\n       critical  \
    \  BOOLEAN DEFAULT FALSE,\n       extnValue   OCTET STRING\n       -- contains\
    \ the DER encoding of an ASN.1 value\n       -- corresponding to the extension\
    \ type identified\n       -- by extnID\n   }\n   SubjectPublicKeyInfo  ::=  SEQUENCE\
    \  {\n        algorithm            AlgorithmIdentifier,\n        subjectPublicKey\
    \     BIT STRING  }\n   In both cases, the prose of the specification describes\
    \ that the\n   adjacent OBJECT IDENTIFIER value indicates the type of structure\n\
    \   within the value of the primitive OCTET STRING or BIT STRING type.\n   For\
    \ example, where an extnID field contains the value\n   id-ce-basicConstraints,\
    \ the extnValue field contains an encoded\n   BasicConstraints as the value of\
    \ the OCTET STRING, as shown in the\n   dump of an encoded extension below.\n\
    \   Tag Length      Value\n   30   15:         SEQUENCE {\n   06    3:       \
    \    OBJECT IDENTIFIER basicConstraints (2 5 29 19)\n   01    1:           BOOLEAN\
    \ TRUE\n   04    5:           OCTET STRING, encapsulates {\n   30    3:      \
    \         SEQUENCE {\n   01    1:                 BOOLEAN TRUE\n          :  \
    \               }\n          :               }\n          :           }\n"
- title: 2.1.3.  Information Object Classes
  contents:
  - "2.1.3.  Information Object Classes\n   Information object classes are defined\
    \ in [CCITT.X681.2002].  Object\n   classes allow protocol designers to relate\
    \ pieces of data that are in\n   some way associated.  In the most generic of\
    \ terms, an Information\n   Object class can be thought of as a database schema,\
    \ with Information\n   Object Sets being instances of the databases.\n   Unlike\
    \ type definitions, object classes with the same structure are\n   not equivalent.\
    \  Thus, if you have:\n      FOO ::= TYPE-IDENTIFIER\n      BAR ::= TYPE-IDENTIFIER\n\
    \   FOO and BAR are not interchangeable.\n   TYPE-IDENTIFIER is one of the predefined\
    \ information object classes\n   in Annex A of [CCITT.X681.2002].  This provides\
    \ for a simple mapping\n   from an OBJECT IDENTIFIER to a data type.  The tag\
    \ UNIQUE on &id\n   means that this value may appear only once in an Information\
    \ Object\n   Set; however, multiple objects can be defined with the same &id\n\
    \   value.\n   [RFC5911] uses the TYPE-IDENTIFIER construction to update the\n\
    \   definition of ContentInfo, as shown below.\n   -- TYPE-IDENTIFIER definition\
    \ from X.681\n   TYPE-IDENTIFIER ::= CLASS\n   {\n       &id OBJECT IDENTIFIER\
    \ UNIQUE,\n       &Type\n   }\n   WITH SYNTAX {&Type IDENTIFIED BY &id}\n   --\
    \ from updated RFC 5652 module in [RFC5911]\n   CONTENT-TYPE ::= TYPE-IDENTIFIER\n\
    \   ContentType ::= CONTENT-TYPE.&id\n   ContentInfo ::= SEQUENCE {\n       contentType\
    \        CONTENT-TYPE.\n                       &id({ContentSet}),\n       content\
    \            [0] EXPLICIT CONTENT-TYPE.\n                       &Type({ContentSet}{@contentType})}\n\
    \   ContentSet CONTENT-TYPE ::= {\n       --  Define the set of content types\
    \ to be recognized.\n       ct-Data | ct-SignedData | ct-EncryptedData | ct-EnvelopedData\
    \ |\n       ct-AuthenticatedData | ct-DigestedData, ... }\n   -- other CONTENT-TYPE\
    \ instances not shown for brevity\n   ct-SignedData CONTENT-TYPE ::=\n       \
    \ { SignedData IDENTIFIED BY id-signedData}\n   This example illustrates the following:\n\
    \   o  Definition of an information object class: TYPE-IDENTIFIER and\n      CONTENT-TYPE\
    \ are information object classes.\n   o  Definition of an information object,\
    \ or an instance of an\n      information object class: ct-SignedData is an information\
    \ object.\n   o  Definition of an information object set: ContentSet is an\n \
    \     information object set.\n   o  Usage of an information object: The definition\
    \ of ContentInfo uses\n      information from the CONTENT-TYPE information object\
    \ class.\n   o  Defining constraints using an object set: Both the contentType\
    \ and\n      content fields are constrained by ContentSet.\n   As noted above,\
    \ TYPE-IDENTIFIER simply associates an OBJECT\n   IDENTIFIER with an arbitrary\
    \ data type.  CONTENT-TYPE is a TYPE-\n   IDENTIFIER.  The WITH SYNTAX component\
    \ allows for a more natural\n   language expression of information object definitions.\n\
    \   ct-SignedData is the name of an information object that associated\n   the\
    \ identifier id-signedData with the data type SignedData.  It is an\n   instance\
    \ of the CONTENT-TYPE information object class.  The &Type\n   field is assigned\
    \ the value SignedData, and the &id field is assigned\n   the value id-signedData.\
    \  The example above uses the syntax provided\n   by the WITH SYNTAX component\
    \ of the TYPE-IDENTIFIER definition.  An\n   equivalent definition that does not\
    \ use the provided syntax is as\n   follows:\n   ct-SignedData CONTENT-TYPE ::=\n\
    \   {\n       &id id-signedData,\n       &Type SignedData\n   }\n   ContentSet\
    \ is the name of a set of information objects derived from\n   the CONTENT-TYPE\
    \ information object class.  The set contains six\n   information objects and\
    \ is extensible, as indicated by the ellipsis\n   (see Section 2.4, \"Versioning\
    \ and Extensibility\").\n   ContentInfo is defined using type information from\
    \ an information\n   object, i.e., the type of the contentType field is that of\
    \ the &id\n   field from CONTENT-TYPE.  An equivalent definition is as follows:\n\
    \   ContentType ::= OBJECT IDENTIFIER\n   Both fields in ContentInfo are constrained.\
    \  The contentType field is\n   constrained using a simple table constraint that\
    \ restricts the values\n   to those from the corresponding field of the objects\
    \ in ContentSet.\n   The content field is constrained using a component relationship\n\
    \   constraint.  Constraints are discussed in the next section.\n"
- title: 2.2.  Constraints
  contents:
  - "2.2.  Constraints\n   The X.68x versions of the ASN.1 specifications introduced\
    \ the ability\n   to use the object information sets as part of the constraint\
    \ on the\n   values that a field can take.  Simple table constraints are used\
    \ to\n   restrict the set of values that can occur in a field.  Component\n  \
    \ relation constraints allow for the restriction of a field based on\n   contents\
    \ of other fields in the type.\n"
- title: 2.2.1.  Simple Table Constraints
  contents:
  - "2.2.1.  Simple Table Constraints\n   Simple table constraints are widely used\
    \ in [RFC5911] and [RFC5912]\n   to limit implementer options (although the constraints\
    \ are almost\n   always followed by or include extensibility markers, which make\
    \ the\n   parameters serve as information not as limitations).  Table\n   constraints\
    \ are defined in [CCITT.X682.2002].\n   Some ASN.1 compilers have the ability\
    \ to use the simple table\n   constraint to check that a field contains one of\
    \ the legal values.\n   The following example from [RFC5911] demonstrates using\
    \ table\n   constraints to clarify the intended usage of a particular field. \
    \ The\n   parameters indicate the types of attributes that are typically found\n\
    \   in the signedAttrs and unsignedAttrs fields.  In this example, the\n   object\
    \ sets are disjoint but this is not required.  For example, in\n   [RFC5912],\
    \ there is some overlap between the CertExtensions and\n   CrlExtensions sets.\n\
    \   -- from updated RFC 5652 module in [RFC5911]\n   SignerInfo ::= SEQUENCE {\n\
    \       version CMSVersion,\n       sid SignerIdentifier,\n       digestAlgorithm\
    \ DigestAlgorithmIdentifier,\n       signedAttrs [0] IMPLICIT SignedAttributes\
    \ OPTIONAL,\n       signatureAlgorithm SignatureAlgorithmIdentifier,\n       signature\
    \ SignatureValue,\n       unsignedAttrs [1] IMPLICIT Attributes\n            {{UnsignedAttributes}}\
    \ OPTIONAL }\n   SignedAttributes ::= Attributes {{ SignedAttributesSet }}\n \
    \  SignedAttributesSet ATTRIBUTE ::=\n          { aa-signingTime | aa-messageDigest\
    \ | aa-contentType, ... }\n   UnsignedAttributes ATTRIBUTE ::= { aa-countersignature,\
    \ ... }\n"
- title: 2.2.2.  Component Relation Constraints
  contents:
  - "2.2.2.  Component Relation Constraints\n   Component relation constraints are\
    \ often used to bind the type field\n   of an open type to the identifier field.\
    \  Using the binding in this\n   way allows a compiler to immediately decode the\
    \ associated type when\n   the containing structure is defined.  The following\
    \ example from\n   [RFC2560] as updated in [RFC5912] demonstrates this usage.\n\
    \   -- from updated RFC 2560 module in [RFC5912]\n   RESPONSE ::= TYPE-IDENTIFIER\n\
    \   ResponseSet RESPONSE ::= {basicResponse, ...}\n   ResponseBytes ::=      \
    \ SEQUENCE {\n       responseType        RESPONSE.\n                         \
    \      &id ({ResponseSet}),\n       response            OCTET STRING (CONTAINING\
    \ RESPONSE.\n                               &Type({ResponseSet}{@responseType}))}\n\
    \   In this example, the response field is constrained to contain a type\n   identified\
    \ by the responseType field.  The controlling field is\n   identified using atNotation,\
    \ e.g., \"@responseType\". atNotation can be\n   defined relative to the outermost\
    \ SEQUENCE, SET, or CHOICE or\n   relative to the field with which the atNotation\
    \ is associated.  When\n   there is no '.' immediately after the '@', the field\
    \ appears as a\n   member of the outermost SEQUENCE, SET, or CHOICE.  When there\
    \ is a\n   '.' immediately after the '@', each '.' represents a SEQUENCE, SET,\n\
    \   or CHOICE starting with the SEQUENCE, SET, or CHOICE that contains\n   the\
    \ field with which the atNotation is associated.  For example,\n   ResponseBytes\
    \ could have been written as shown below.  In this case,\n   the syntax is very\
    \ similar since the innermost and outermost\n   SEQUENCE, SET, or CHOICE are the\
    \ same.\n   ResponseBytes ::=       SEQUENCE {\n       responseType        RESPONSE.\n\
    \                               &id ({ResponseSet}),\n       response        \
    \    OCTET STRING (CONTAINING RESPONSE.\n                               &Type({ResponseSet}{@.responseType}))}\n\
    \   The TaggedRequest example from [RFC5912] provides an example where\n   the\
    \ outermost and innermost SEQUENCE, SET, or CHOICE are different.\n   Relative\
    \ to the atNotation included in the definition of the\n   requestMessageValue\
    \ field, the outermost SEQUENCE, SET, or CHOICE is\n   TaggedRequest, and the\
    \ innermost is the SEQUENCE used to define the\n   orm field.\n   TaggedRequest\
    \ ::= CHOICE {\n      tcr               [0] TaggedCertificationRequest,\n    \
    \  crm               [1] CertReqMsg,\n      orm               [2] SEQUENCE {\n\
    \          bodyPartID            BodyPartID,\n          requestMessageType   \
    \ OTHER-REQUEST.&id({OtherRequests}),\n          requestMessageValue   OTHER-REQUEST.&Type({OtherRequests}\n\
    \                                    {@.requestMessageType})\n      }\n   }\n\
    \   When referencing a field using atNotation, the definition of the\n   field\
    \ must be included within the outermost SEQUENCE, SET, or CHOICE.\n   References\
    \ to fields within structures that are defined separately\n   are not allowed.\
    \  For example, the following example includes invalid\n   atNotation in the definition\
    \ of the signature field within the SIGNED\n   parameterized type.\n   AlgorithmIdentifier{ALGORITHM-TYPE,\
    \ ALGORITHM-TYPE:AlgorithmSet} ::=\n             SEQUENCE {\n                \
    \ algorithm   ALGORITHM-TYPE.&id({AlgorithmSet}),\n                 parameters\
    \  ALGORITHM-TYPE.\n                        &Params({AlgorithmSet}{@algorithm})\
    \ OPTIONAL\n             }\n   -- example containing invalid atNotation\n   SIGNED{ToBeSigned}\
    \ ::= SEQUENCE {\n      toBeSigned           ToBeSigned,\n      algorithmIdentifier\
    \  AlgorithmIdentifier\n                               { SIGNATURE-ALGORITHM,\
    \ {...}}\n      },\n      signature BIT STRING (CONTAINING SIGNATURE-ALGORITHM.&Value(\n\
    \                               {SignatureAlgorithms}\n                      \
    \         {@algorithmIdentifier.algorithm}))\n   }\n   Alternatively, the above\
    \ example could be written with correct\n   atNotation as follows, with the definition\
    \ of the algorithm field\n   included within ToBeSigned.\n     SIGNED{ToBeSigned}\
    \ ::= SEQUENCE {\n        toBeSigned           ToBeSigned,\n        algorithmIdentifier\
    \  SEQUENCE {\n            algorithm        SIGNATURE-ALGORITHM.\n           \
    \                      &id({SignatureAlgorithms}),\n            parameters   \
    \    SIGNATURE-ALGORITHM.\n                                 &Params({SignatureAlgorithms}\n\
    \                                     {@algorithmIdentifier.algorithm})\n    \
    \    },\n        signature BIT STRING (CONTAINING SIGNATURE-ALGORITHM.&Value(\n\
    \                                 {SignatureAlgorithms}\n                    \
    \             {@algorithmIdentifier.algorithm}))\n     }\n   In the above example,\
    \ the outermost SEQUENCE, SET, or CHOICE relative\n   to the parameters field\
    \ is the SIGNED parameterized type.  The\n   innermost structure is the SEQUENCE\
    \ used as the type for the\n   algorithmIdentifier field.  The atNotation for\
    \ the parameters field\n   could be expressed using any of the following representations:\n\
    \      @algorithmIdentifier.algorithm\n      @.algorithm\n   The atNotation for\
    \ the signature field has only one representation.\n"
- title: 2.2.3.  Content Constraints
  contents:
  - "2.2.3.  Content Constraints\n   Open types implemented as OCTET STRINGs or BIT\
    \ STRINGs can be\n   constrained using the contents constraints syntax defined\
    \ in\n   [CCITT.X682.2002].  Below are the revised definitions from [RFC5911]\n\
    \   and [RFC5912].  These show usage of OCTET STRING and BIT STRING along\n  \
    \ with constrained sets of identifiers.  The Extension definition uses\n   a content\
    \ constraint that requires the value of the OCTET STRING to\n   be an encoding\
    \ of the type associated with the information object\n   selected from the ExtensionSet\
    \ object set using the value of the\n   extnID field.  For reasons described in\
    \ Section 2.2.2, \"Component\n   Relation Constraints\", the SubjectPublicKeyInfo\
    \ definition relies on\n   prose to bind the BIT STRING to the type identifier\
    \ because it is not\n   possible to express a content constraint that includes\
    \ a component\n   relationship constraint to bind the type value within the algorithm\n\
    \   field to the subjectPublicKey field.\n   -- from updated RFC 5280 module in\
    \ [RFC5912]\n   Extension{EXTENSION:ExtensionSet} ::= SEQUENCE {\n       extnID\
    \      EXTENSION.&id({ExtensionSet}),\n       critical    BOOLEAN\n       -- (EXTENSION.&Critical({ExtensionSet}{@extnID}))\n\
    \                          DEFAULT FALSE,\n       extnValue   OCTET STRING (CONTAINING\n\
    \                     EXTENSION.&ExtnType({ExtensionSet}{@extnID}))\n        \
    \             --  contains the DER encoding of the ASN.1 value\n             \
    \        --  corresponding to the extension type identified\n                \
    \     --  by extnID\n   }\n   SubjectPublicKeyInfo  ::=  SEQUENCE  {\n       algorithm\
    \            AlgorithmIdentifier{PUBLIC-KEY,\n                               \
    \ {PublicKeyAlgorithms}},\n       subjectPublicKey     BIT STRING\n   }\n"
- title: 2.3.  Parameterization
  contents:
  - "2.3.  Parameterization\n   Parameterization is defined in [CCITT.X683.2002] and\
    \ can also be used\n   to define new types in a way similar to the macro notation\
    \ described\n   in Annex A of X.208.  The following example from [RFC5912] shows\
    \ this\n   usage.  The toBeSigned field takes the type passed as a parameter.\n\
    \   -- from [RFC5912]\n   SIGNED{ToBeSigned} ::= SEQUENCE {\n       toBeSigned\
    \  ToBeSigned,\n       algorithm   AlgorithmIdentifier{SIGNATURE-ALGORITHM,\n\
    \                       {SignatureAlgorithms}},\n       signature   BIT STRING\n\
    \   }\n   -- from updated RFC5280 module in [RFC5912]\n   Certificate  ::=  SIGNED{TBSCertificate}\n\
    \   Parameters need not be simple types.  The following example\n   demonstrates\
    \ the usage of an information object class and an\n   information object set as\
    \ parameters.  The first parameter in the\n   definition of AlgorithmIdentifier\
    \ is an information object class.\n   Information object classes used for this\
    \ parameter must have &id and\n   &Params fields, which determine the type of\
    \ the algorithm and\n   parameters fields.  Other fields may be present in the\
    \ information\n   object class, but they are not used by the definition of\n \
    \  AlgorithmIdentifier, as demonstrated by the SIGNATURE-ALGORITHM class\n   shown\
    \ below.  The second parameter is an information object set that\n   is used to\
    \ constrain the values that appear in the algorithm and\n   parameters fields.\n\
    \   -- from [RFC5912]\n   AlgorithmIdentifier{ALGORITHM-TYPE, ALGORITHM-TYPE:AlgorithmSet}\n\
    \       ::= SEQUENCE\n   {\n       algorithm   ALGORITHM-TYPE.&id({AlgorithmSet}),\n\
    \       parameters  ALGORITHM-TYPE.&Params\n                     ({AlgorithmSet}{@algorithm})\
    \ OPTIONAL\n   }\n   SIGNATURE-ALGORITHM ::= CLASS {\n       &id             OBJECT\
    \ IDENTIFIER,\n       &Params         OPTIONAL,\n       &Value          OPTIONAL,\n\
    \       &paramPresence  ParamOptions DEFAULT absent,\n       &HashSet        DIGEST-ALGORITHM\
    \ OPTIONAL,\n       &PublicKeySet   PUBLIC-KEY OPTIONAL,\n       &smimeCaps  \
    \    SMIME-CAPS OPTIONAL\n   } WITH SYNTAX {\n       IDENTIFIER &id\n       [VALUE\
    \ &Value]\n       [PARAMS [TYPE &Params] ARE &paramPresence ]\n       [HASHES\
    \ &HashSet]\n       [PUBLIC KEYS &PublicKeySet]\n       [SMIME CAPS &smimeCaps]\n\
    \   }\n   -- from updated RFC 2560 module in [RFC5912]\n   BasicOCSPResponse \
    \      ::= SEQUENCE {\n       tbsResponseData      ResponseData,\n       signatureAlgorithm\
    \   AlgorithmIdentifier{SIGNATURE-ALGORITHM,\n                             {sa-dsaWithSHA1\
    \ | sa-rsaWithSHA1 |\n                                  sa-rsaWithMD5 | sa-rsaWithMD2,\
    \ ...}},\n       signature            BIT STRING,\n       certs            [0]\
    \ EXPLICIT SEQUENCE OF Certificate OPTIONAL\n   }\n"
- title: 2.4.  Versioning and Extensibility
  contents:
  - "2.4.  Versioning and Extensibility\n   Specifications are often revised and ASN.1\
    \ modules updated to include\n   new components.  [CCITT.X681.2002] provides two\
    \ mechanisms useful in\n   supporting extensibility: extension markers and version\
    \ brackets.\n"
- title: 2.4.1.  Extension Markers
  contents:
  - "2.4.1.  Extension Markers\n   An extension marker is represented by an ellipsis\
    \ (i.e., three\n   adjacent periods).  Extension markers are included in specifications\n\
    \   at points where the protocol designer anticipates future changes.\n   This\
    \ can also be achieved by including EXTENSIBILITY IMPLIED in the\n   ASN.1 module\
    \ definition.  EXTENSIBILITY IMPLIED is the equivalent to\n   including an extension\
    \ marker in each type defined in the ASN.1\n   module.  Extensibility markers\
    \ are used throughout [RFC5911] and\n   [RFC5912] where object sets are defined.\
    \  In other instances, the\n   updated modules retroactively added extension markers\
    \ where fields\n   were added to an earlier version by an update, as shown in\
    \ the\n   CertificateChoices example below.\n   Examples:\n   -- from updated\
    \ RFC 3370 module in [RFC5911]\n   KeyAgreementAlgs KEY-AGREE ::= { kaa-esdh |\
    \ kaa-ssdh, ...}\n   -- from updated RFC 5652 module in [RFC5911]\n   CertificateChoices\
    \ ::= CHOICE {\n       certificate Certificate,\n       extendedCertificate [0]\
    \ IMPLICIT ExtendedCertificate,\n            -- Obsolete\n       ...,\n      \
    \ [[3: v1AttrCert [1] IMPLICIT AttributeCertificateV1]],\n            -- Obsolete\n\
    \       [[4: v2AttrCert [2] IMPLICIT AttributeCertificateV2]],\n       [[5: other\
    \      [3] IMPLICIT OtherCertificateFormat]]\n   }\n   Protocol designers should\
    \ use extension markers within definitions\n   that are likely to change.  For\
    \ example, extensibility markers should\n   be used when enumerating error values.\n"
- title: 2.4.2.  Version Brackets
  contents:
  - "2.4.2.  Version Brackets\n   Version brackets can be used to indicate features\
    \ that are available\n   in later versions of an ASN.1 module but not in earlier\
    \ versions.\n   [RFC5912] added version brackets to the definition of TBSCertificate\n\
    \   to illustrate the addition of the issuerUniqueID, subjectUniqueID,\n   and\
    \ extensions fields, as shown below.\n   -- from updated RFC 5280 module in [RFC5912]\n\
    \   TBSCertificate  ::=  SEQUENCE  {\n       version         [0]  Version DEFAULT\
    \ v1,\n       serialNumber         CertificateSerialNumber,\n       signature\
    \            AlgorithmIdentifier{SIGNATURE-ALGORITHM,\n                      \
    \           {SignatureAlgorithms}},\n       issuer               Name,\n     \
    \  validity             Validity,\n       subject              Name,\n       subjectPublicKeyInfo\
    \ SubjectPublicKeyInfo,\n       ... ,\n       [[2:               -- If present,\
    \ version MUST be v2\n       issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL,\n\
    \       subjectUniqueID [2]  IMPLICIT UniqueIdentifier OPTIONAL\n       ]],\n\
    \       [[3:               -- If present, version MUST be v3 --\n       extensions\
    \      [3]  ExtensionSet{{CertExtensions}} OPTIONAL\n       ]], ... }\n"
- title: 3.  Character Set Differences
  contents:
  - "3.  Character Set Differences\n   X.68s uses a character set that is a superset\
    \ of the character set\n   defined in X.208.  The character set defined in X.208\
    \ includes the\n   following:\n      A to Z\n      a to z\n      0 to 9\n    \
    \  :=,{}<.\n      ()[]-'\"\n   The character set in X.68x additionally includes\
    \ the following:\n      !&*/;>@^_|\n   The > and | characters can also be used\
    \ in X.208 syntax in macro\n   definitions.\n"
- title: 4.  ASN.1 Translation
  contents:
  - '4.  ASN.1 Translation

    '
- title: 4.1.  Downgrading from X.68x to X.208
  contents:
  - "4.1.  Downgrading from X.68x to X.208\n   At a minimum, downgrading an ASN.1\
    \ module from X.68x syntax to X.208\n   requires the removal of features not supported\
    \ by X.208.  As\n   indicated above, the features most commonly used in IETF Security\n\
    \   Area ASN.1 modules are information object classes (and object sets),\n   content\
    \ constraints, parameterization, extension markers, and version\n   brackets.\
    \  Extension markers and version brackets can simply be\n   deleted (or commented\
    \ out).  The definitions for information object\n   classes and object sets can\
    \ also be deleted or commented out, as\n   these will not be used.  The following\
    \ checklist can be used in most\n   cases:\n   o  Remove all Information Set Class,\
    \ Information Set Object, and\n      Information Set Object Set definitions and\
    \ imports from the file.\n   o  Replace all fixed Type Information Set Class element\
    \ references\n      with the fixed type.  (That is, replace FOO.&id with OBJECT\n\
    \      IDENTIFIER.)\n   o  Delete all simple constraints.\n   o  Delete all CONTAINING\
    \ statements.\n   o  Replace all variable Type Information Set Class element references\n\
    \      with either ANY or ANY DEFINED BY statements.\n   o  Remove version and\
    \ extension markers.\n   o  Manually enforce all instances of parameterized types.\n"
- title: 4.2.  Upgrading from X.208 to X.68x
  contents:
  - "4.2.  Upgrading from X.208 to X.68x\n   The amount of change associated with\
    \ upgrading from X.208 syntax to\n   X.68x syntax is dependent on the reasons\
    \ for changing and personal\n   style.  A minimalist approach could consist of\
    \ altering any\n   deprecated features, most commonly ANY DEFINED BY, and adding\
    \ any\n   necessary extensibility markers.  A more comprehensive approach may\n\
    \   include the introduction of constraints, parameterization,\n   versioning,\
    \ extensibility, etc.\n   The following checklist can be used when upgrading a\
    \ module without\n   introducing constraints:\n      Use TYPE-IDENTIFIER.&Type\
    \ for \"ANY\".\n      Use TYPE-IDENTIFIER.&Type for \"ANY DEFINED BY ...\".\n\
    \   When constraints are introduced during an upgrade, additional steps\n   are\
    \ necessary:\n   1.  Identify each unique class that should be defined based on\
    \ what\n       types of things exist.\n   2.  Define an Information Object Class\
    \ for each of the classes above\n       with the appropriate elements.\n   3.\
    \  Define all of the appropriate Information Object Sets based on\n       the\
    \ classes defined in step 2 along with the different places\n       that they\
    \ should be used.\n   4.  Replace ANY by the appropriate class and variable type\
    \ element.\n   5.  Replace ANY DEFINED BY with the appropriate variable type element\n\
    \       and the components constraint.  Replace the element used in the\n    \
    \   constraint with the appropriate fixed type element and simple\n       constraint.\n\
    \   6.  Add any simple constraints as appropriate.\n   7.  Define any objects\
    \ and fill in elements for object sets as\n       appropriate.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   Where a module is downgraded from X.68x syntax\
    \ to X.208 there is loss\n   of potential automated enforcement of constraints\
    \ expressed by the\n   author of the module being downgraded.  These constraints\
    \ should be\n   captured in prose or ASN.1 comments and enforced through other\
    \ means,\n   as necessary.\n   Depending on the feature set of the ASN.1 compiler\
    \ being used, the\n   code to enforce and use constraints may be generated automatically\
    \ or\n   may require the programmer to do this independently.  It is the\n   responsibility\
    \ of the programmer to ensure that the constraints on\n   the ASN.1 expressed\
    \ either in prose or in the ASN.1 module are\n   actually enforced.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [CCITT.X208.1988]  International Telephone and\
    \ Telegraph Consultative\n                      Committee, \"Specification of\
    \ Abstract Syntax\n                      Notation One (ASN.1)\", CCITT Recommendation\
    \ X.208,\n                      November 1988.\n   [CCITT.X680.2002]  International\
    \ Telephone and Telegraph Consultative\n                      Committee, \"Abstract\
    \ Syntax Notation One (ASN.1):\n                      Specification of basic notation\"\
    ,\n                      CCITT Recommendation X.680, July 2002.\n   [CCITT.X681.2002]\
    \  International Telephone and Telegraph Consultative\n                      Committee,\
    \ \"Abstract Syntax Notation One (ASN.1):\n                      Information object\
    \ specification\",\n                      CCITT Recommendation X.681, July 2002.\n\
    \   [CCITT.X682.2002]  International Telephone and Telegraph Consultative\n  \
    \                    Committee, \"Abstract Syntax Notation One (ASN.1):\n    \
    \                  Constraint specification\", CCITT Recommendation\n        \
    \              X.682, July 2002.\n   [CCITT.X683.2002]  International Telephone\
    \ and Telegraph Consultative\n                      Committee, \"Abstract Syntax\
    \ Notation One (ASN.1):\n                      Parameterization of ASN.1 specifications\"\
    ,\n                      CCITT Recommendation X.683, July 2002.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [CCITT.X209.1988]  International Telephone and\
    \ Telegraph Consultative\n                      Committee, \"Specification of\
    \ Basic Encoding Rules\n                      for Abstract Syntax Notation One\
    \ (ASN.1)\",\n                      CCITT Recommendation X.209, 1988.\n   [CCITT.X690.2002]\
    \  International Telephone and Telegraph Consultative\n                      Committee,\
    \ \"ASN.1 encoding rules: Specification of\n                      basic encoding\
    \ Rules (BER), Canonical encoding\n                      rules (CER) and Distinguished\
    \ encoding rules\n                      (DER)\", CCITT Recommendation X.690, July\
    \ 2002.\n   [RFC2560]          Myers, M., Ankney, R., Malpani, A., Galperin, S.,\n\
    \                      and C. Adams, \"X.509 Internet Public Key\n           \
    \           Infrastructure Online Certificate Status Protocol\n              \
    \        - OCSP\", RFC 2560, June 1999.\n   [RFC5280]          Cooper, D., Santesson,\
    \ S., Farrell, S., Boeyen,\n                      S., Housley, R., and W. Polk,\
    \ \"Internet X.509\n                      Public Key Infrastructure Certificate\
    \ and\n                      Certificate Revocation List (CRL) Profile\",\n  \
    \                    RFC 5280, May 2008.\n   [RFC5652]          Housley, R., \"\
    Cryptographic Message Syntax (CMS)\",\n                      STD 70, RFC 5652,\
    \ September 2009.\n   [RFC5911]          Hoffman, P. and J. Schaad, \"New ASN.1\
    \ Modules for\n                      Cryptographic Message Syntax (CMS) and S/MIME\"\
    ,\n                      RFC 5911, June 2010.\n   [RFC5912]          Hoffman,\
    \ P. and J. Schaad, \"New ASN.1 Modules for\n                      the Public\
    \ Key Infrastructure Using X.509 (PKIX)\",\n                      RFC 5912, June\
    \ 2010.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Carl Wallace\n   Cygnacom Solutions\n   Suite 5400\n \
    \  7925 Jones Branch Drive\n   McLean, VA  22102\n   EMail: cwallace@cygnacom.com\n\
    \   Charles Gardiner\n   BBN Technologies\n   10 Moulton Street\n   Cambridge,\
    \ MA  02138\n   EMail: gardiner@bbn.com\n"
