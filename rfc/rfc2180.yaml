- title: __initial_text__
  contents:
  - '                 IMAP4 Multi-Accessed Mailbox Practice

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  This memo\n   does not specify an Internet standard of any kind.  Distribution\
    \ of\n   this memo is unlimited.\n"
- title: 1. Abstract
  contents:
  - "1. Abstract\n   IMAP4[RFC-2060] is rich client/server protocol that allows a\
    \ client\n   to access and manipulate electronic mail messages on a server.\n\
    \   Within the protocol framework, it is possible to have differing\n   results\
    \ for particular client/server interactions. If a protocol does\n   not allow\
    \ for this, it is often unduly restrictive.\n   For example, when multiple clients\
    \ are accessing a mailbox and one\n   attempts to delete the mailbox, an IMAP4\
    \ server may choose to\n   implement a solution based upon server architectural\
    \ constraints or\n   individual preference.\n   With this flexibility comes greater\
    \ client responsibility.  It is not\n   sufficient for a client to be written\
    \ based upon the behavior of a\n   particular IMAP server.  Rather the client\
    \ must be based upon the\n   behavior allowed by the protocol.\n   By documenting\
    \ common IMAP4 server practice for the case of\n   simultaneous client access\
    \ to a mailbox, we hope to ensure the widest\n   amount of inter-operation between\
    \ IMAP4 clients and servers.\n   The behavior described in this document reflects\
    \ the practice of some\n   existing servers or behavior that the consensus of\
    \ the IMAP mailing\n   list has deemed to be reasonable.  The behavior described\
    \ within this\n   document is believed to be [RFC-2060] compliant. However, this\n\
    \   document is not meant to define IMAP4 compliance, nor is it an\n   exhaustive\
    \ list of valid IMAP4 behavior. [RFC-2060] must always be\n   consulted to determine\
    \ IMAP4 compliance, especially for server\n   behavior not described within this\
    \ document.\n"
- title: 2. Conventions used in this document
  contents:
  - "2. Conventions used in this document\n   In examples,\"C1:\", \"C2:\" and \"\
    C3:\" indicate lines sent by 3 different\n   clients (client #1, client #2 and\
    \ client #3) that are connected to a\n   server.  \"S1:\", \"S2:\" and \"S3:\"\
    \ indicated lines sent by the server to\n   client #1, client #2 and client #3\
    \ respectively.\n   A shared mailbox, is a mailbox that can be used by multiple\
    \ users.\n   A multi-accessed mailbox, is a mailbox that has multiple clients\n\
    \   simultaneously accessing it.\n   A client is said to have accessed a mailbox\
    \ after a successful SELECT\n   or EXAMINE command.\n   The key words \"MUST\"\
    , \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD\
    \ NOT\", \"RECOMMENDED\",  \"MAY\", and \"OPTIONAL\" in this\n   document are\
    \ to be interpreted as described in [RFC-2119].\n"
- title: 3. Deletion/Renaming of a multi-accessed mailbox
  contents:
  - "3. Deletion/Renaming of a multi-accessed mailbox\n   If an external agent or\
    \ multiple clients are accessing a mailbox,\n   care must be taken when handling\
    \ the deletion or renaming of the\n   mailbox. Following are some strategies an\
    \ IMAP server may choose to\n   use when dealing with this situation.\n"
- title: 3.1. The server MAY fail the DELETE/RENAME command of a multi-accessed
  contents:
  - "3.1. The server MAY fail the DELETE/RENAME command of a multi-accessed\n    \
    \ mailbox\n   In some cases, this behavior may not be practical.  For example,\
    \ if a\n   large number of clients are accessing a shared mailbox, the window\
    \ in\n   which no clients have the mailbox accessed may be small or non-\n   existent,\
    \ effectively rendering the mailbox undeletable or\n   unrenamable.\n   Example:\n\
    \   <Client #1 and Client #2 have mailbox FOO accessed. Client #1 tries\n   to\
    \ DELETE the mailbox and is refused>\n             C1: A001 DELETE FOO\n     \
    \        S1: A001 NO Mailbox FOO is in use by another user.\n"
- title: 3.2. The server MAY allow the DELETE command of a multi-accessed
  contents:
  - "3.2. The server MAY allow the DELETE command of a multi-accessed\n     mailbox,\
    \ but keep the information in the mailbox available for\n     those clients that\
    \ currently have access to the mailbox.\n   When all clients have finished accessing\
    \ the mailbox, it is\n   permanently removed.  For clients that do not already\
    \ have access to\n   the mailbox, the 'ghosted' mailbox would not be available.\
    \  For\n   example, it would not be returned to these clients in a subsequent\n\
    \   LIST or LSUB command and would not be a valid mailbox argument to any\n  \
    \ other IMAP command until the reference count of clients accessing the\n   mailbox\
    \ reached 0.\n   In some cases, this behavior may not be desirable. For example\
    \ if\n   someone created a mailbox with offensive or sensitive information,\n\
    \   one might prefer to have the mailbox deleted and all access to the\n   information\
    \ contained within removed immediately, rather than\n   continuing to allow access\
    \ until the client closes the mailbox.\n   Furthermore, this behavior, may prevent\
    \ 'recycling' of the same\n   mailbox name until all clients have finished accessing\
    \ the original\n   mailbox.\n   Example:\n   <Client #1 and Client #2 have mailbox\
    \ FOO selected. Client #1 DELETEs\n   mailbox FOO>\n             C1: A001 DELETE\
    \ FOO\n             S1: A001 OK Mailbox FOO is deleted.\n   <Client #2 is still\
    \ able to operate on the deleted mailbox>\n             C2: B001 STORE 1 +FLAGS\
    \ (\\Seen)\n             S2: * 1 FETCH FLAGS (\\Seen)\n             S2: B001 OK\
    \ STORE completed\n   <Client #3 which did not have access to the mailbox prior\
    \ to the\n   deletion by client #1 does not have access to the mailbox>\n    \
    \         C3: C001 STATUS FOO (MESSAGES)\n             S3: C001 NO Mailbox does\
    \ not exist\n   <Nor is client #3 able to create a mailbox with the name FOO,\
    \ while\n   the reference count is non zero>\n             C3: C002 CREATE FOO\n\
    \             S3: C002 NO Mailbox FOO is still in use. Try again later.\n   <Client\
    \ #2 closes its access to the mailbox, no other clients have\n   access to the\
    \ mailbox FOO and reference count becomes 0>\n             C2: B002 CLOSE\n  \
    \           S2: B002 OK CLOSE Completed\n   <Now that the reference count on FOO\
    \ has reached 0, the mailbox name\n   can be recycled>\n             C3: C003\
    \ CREATE FOO\n             S3: C003 OK CREATE Completed\n"
- title: 3.3. The server MAY allow the DELETE/RENAME of a multi-accessed
  contents:
  - "3.3. The server MAY allow the DELETE/RENAME of a multi-accessed\n     mailbox,\
    \ but disconnect all other clients who have the mailbox\n     accessed by sending\
    \ a untagged BYE response.\n   A server may often choose to disconnect clients\
    \ in the DELETE case,\n   but may choose to implement a \"friendlier\" method\
    \ for the RENAME\n   case.\n   Example:\n   <Client #1 and Client #2 have mailbox\
    \ FOO accessed. Client #1 DELETEs\n   the mailbox FOO>\n             C1: A002\
    \ DELETE FOO\n             S1: A002 OK DELETE completed.\n   <Server disconnects\
    \ all other users of the mailbox>\n             S2: * BYE Mailbox FOO has been\
    \ deleted.\n"
- title: 3.4. The server MAY allow the RENAME of a multi-accessed mailbox by
  contents:
  - "3.4. The server MAY allow the RENAME of a multi-accessed mailbox by\n     simply\
    \ changing the name attribute on the mailbox.\n   Other clients that have access\
    \ to the mailbox can continue issuing\n   commands such as FETCH that do not reference\
    \ the mailbox name.\n   Clients would discover the renaming the next time they\
    \ referred to\n   the old mailbox name.  Some servers MAY choose to include the\n\
    \   [NEWNAME] response code in their tagged NO response to a command that\n  \
    \ contained the old mailbox name, as a hint to the client that the\n   operation\
    \ can succeed if the command is issued with the new mailbox\n   name.\n   Example:\n\
    \   <Client #1 and Client #2 have mailbox FOO accessed. Client #1 RENAMEs\n  \
    \ the mailbox.>\n             C1: A001 RENAME FOO BAR\n             S1: A001 OK\
    \ RENAME completed.\n   <Client #2 is still able to do operations that do not\
    \ reference the\n   mailbox name>\n             C2: B001 FETCH 2:4 (FLAGS)\n \
    \            S2: * 2 FETCH . . .\n             S2: * 3 FETCH . . .\n         \
    \    S2: * 4 FETCH . . .\n             S2: B001 OK FETCH completed\n   <Client\
    \ #2 is not able to do operations that reference the mailbox\n   name>\n     \
    \        C2: B002 APPEND FOO {300} C2: Date: Mon, 7 Feb 1994\n             21:52:25\
    \ 0800 (PST) C2: . . .  S2: B002 NO [NEWNAME FOO\n             BAR] Mailbox has\
    \ been renamed\n"
- title: 4. Expunging of messages on a multi-accessed mailbox
  contents:
  - "4. Expunging of messages on a multi-accessed mailbox\n   If an external agent\
    \ or multiple clients are accessing a mailbox,\n   care must be taken when handling\
    \ the EXPUNGE of messages.  Other\n   clients accessing the mailbox may be in\
    \ the midst of issuing a\n   command that depends upon message sequence numbers.\
    \  Because an\n   EXPUNGE response can not be sent while responding to a FETCH,\
    \ STORE\n   or SEARCH command, it is not possible to immediately notify the\n\
    \   client of the EXPUNGE.  This can result in ambiguity if the client\n   issues\
    \ a FETCH, STORE or SEARCH operation on a message that has been\n   EXPUNGED.\n"
- title: 4.1. Fetching of expunged messages
  contents:
  - "4.1. Fetching of expunged messages\n   Following are some strategies an IMAP\
    \ server may choose to use when\n   dealing with a FETCH command on expunged messages.\n\
    \   Consider the following scenario:\n   - Client #1 and Client #2 have mailbox\
    \ FOO selected.\n   - There are 7 messages in the mailbox.\n   - Messages 4:7\
    \ are marked for deletion.\n   - Client #1 issues an EXPUNGE, to expunge messages\
    \ 4:7\n"
- title: 4.1.1. The server MAY allow the EXPUNGE of a multi-accessed mailbox but
  contents:
  - "4.1.1. The server MAY allow the EXPUNGE of a multi-accessed mailbox but\n   \
    \    keep the messages available to satisfy subsequent FETCH commands\n      \
    \ until it is able to send an EXPUNGE response to each client.\n   In some cases,\
    \ the behavior of keeping \"ghosted\" messages may not be\n   desirable.  For\
    \ example if a message contained offensive or sensitive\n   information, one might\
    \ prefer to instantaneously remove all access to\n   the information, regardless\
    \ of whether another client is in the midst\n   of accessing it.\n   Example:\
    \  (Building upon the scenario outlined in 4.1.)\n   <Client #2 is still able\
    \ to access the expunged messages because the\n   server has kept a 'ghosted'\
    \ copy of the messages until it is able to\n   notify client #2 of the EXPUNGE>\n\
    \             C2: B001 FETCH 4:7 RFC822\n             S2: * 4 FETCH RFC822 . .\
    \ . (RFC822 info returned)\n             S2: * 5 FETCH RFC822 . . . (RFC822 info\
    \ returned)\n             S2: * 6 FETCH RFC822 . . . (RFC822 info returned)\n\
    \             S2: * 7 FETCH RFC822 . . . (RFC822 info returned)\n            \
    \ S2: B001 OK FETCH Completed\n   <Client #2 issues a command where it can get\
    \ notified of the EXPUNGE>\n             C2: B002 NOOP\n             S2: * 4 EXPUNGE\n\
    \             S2: * 4 EXPUNGE\n             S2: * 4 EXPUNGE\n             S2:\
    \ * 4 EXPUNGE\n             S2: * 3 EXISTS\n             S2: B002 OK NOOP Complete\n\
    \   <Client #2 no longer has access to the expunged messages>\n             C2:\
    \ B003 FETCH 4:7 RFC822\n             S2: B003 NO Messages 4:7 are no longer available.\n"
- title: 4.1.2 The server MAY allow the EXPUNGE of a multi-accessed mailbox,
  contents:
  - "4.1.2 The server MAY allow the EXPUNGE of a multi-accessed mailbox,\n      and\
    \ on subsequent FETCH commands return FETCH responses only for\n      non-expunged\
    \ messages and a tagged NO.\n   After receiving a tagged NO FETCH response, the\
    \ client SHOULD issue a\n   NOOP command so that it will be informed of any pending\
    \ EXPUNGE\n   responses.  The client may then either reissue the failed FETCH\n\
    \   command, or by examining the EXPUNGE response from the NOOP and the\n   FETCH\
    \ response from the FETCH, determine that the FETCH failed\n   because of pending\
    \ expunges.\n   Example:  (Building upon the scenario outlined in 4.1.)\n   <Client\
    \ #2 attempts to FETCH a mix of expunged and non-expunged\n   messages.  A FETCH\
    \ response is returned only for then non-expunged\n   messages along with a tagged\
    \ NO>\n             C2: B001 FETCH 3:5 ENVELOPE\n             S2: * 3 FETCH ENVELOPE\
    \ . . . (ENVELOPE info returned)\n             S2: B001 NO Some of the requested\
    \ messages no longer exist\n   <Upon receiving a tagged NO FETCH response, Client\
    \ #2 issues a NOOP\n   to be informed of any pending EXPUNGE responses>\n    \
    \         C2: B002 NOOP\n             S2: * 4 EXPUNGE\n             S2: * 4 EXPUNGE\n\
    \             S2: * 4 EXPUNGE\n             S2: * 4 EXPUNGE\n             S2:\
    \ * 3 EXISTS\n             S2: B002 OK NOOP Completed.\n   <By receiving a FETCH\
    \ response for message 3, and an EXPUNGE response\n   that indicates messages\
    \ 4:7 have been expunged, the client does not\n   need to re-issue the FETCH>\n"
- title: 4.1.3 The server MAY allow the EXPUNGE of a multi-accessed mailbox, and
  contents:
  - "4.1.3 The server MAY allow the EXPUNGE of a multi-accessed mailbox, and\n   \
    \   on subsequent FETCH commands return the usual FETCH responses for\n      non-expunged\
    \ messages, \"NIL FETCH Responses\" for expunged\n      messages, and a tagged\
    \ OK response.\n   If all of the messages in the subsequent FETCH command have\
    \ been\n   expunged, the server SHOULD return only a tagged NO.  In this case,\n\
    \   the client SHOULD issue a NOOP command so that it will be informed of\n  \
    \ any pending EXPUNGE responses.  The client may then either reissue\n   the failed\
    \ FETCH command, or by examining the EXPUNGE response from\n   the NOOP, determine\
    \ that the FETCH failed because of pending\n   expunges.\n   \"NIL FETCH responses\"\
    \ are a representation of empty data as\n   appropriate for the FETCH argument\
    \ specified.\n   Example:\n   * 1 FETCH (ENVELOPE (NIL NIL NIL NIL NIL NIL NIL\
    \ NIL NIL NIL))\n   * 1 FETCH (FLAGS ())\n   * 1 FETCH (INTERNALDATE \"00-Jan-0000\
    \ 00:00:00 +0000\")\n   * 1 FETCH (RFC822 \"\")\n   * 1 FETCH (RFC822.HEADER \"\
    \")\n   * 1 FETCH (RFC822.TEXT \"\")\n   * 1 FETCH (RFC822.SIZE 0)\n   * 1 FETCH\
    \ (BODY (\"TEXT\" \"PLAIN\" NIL NIL NIL \"7BIT\" 0 0)\n   * 1 FETCH (BODYSTRUCTURE\
    \ (\"TEXT\" \"PLAIN\" NIL NIL NIL \"7BIT\" 0 0)\n   * 1 FETCH (BODY[<section>]\
    \ \"\")\n   * 1 FETCH (BODY[<section>]<partial> \"\")\n   In some cases, a client\
    \ may not be able to distinguish between \"NIL\n   FETCH responses\" received\
    \ because a message was expunged and those\n   received because the data actually\
    \ was NIL.  For example, a  * 5\n   FETCH (FLAGS ()) response could be received\
    \ if no flags were set on\n   message 5, or because message 5 was expunged. In\
    \ a case of potential\n   ambiguity, the client SHOULD issue a command such as\
    \ NOOP to force\n   the sending of the EXPUNGE responses to resolve any ambiguity.\n\
    \   Example:  (Building upon the scenario outlined in 4.1.)\n   <Client #2 attempts\
    \ to access a mix of expunged and non-expunged\n   messages.  Normal data is returned\
    \ for non-expunged message, \"NIL\n   FETCH responses\" are returned for expunged\
    \ messages>\n             C2: B002 FETCH 3:5 ENVELOPE\n             S2: * 3 FETCH\
    \ ENVELOPE . . . (ENVELOPE info returned)\n             S2: * 4 FETCH ENVELOPE\
    \ (NIL NIL NIL NIL NIL NIL NIL NIL\n                   NIL NIL)\n            \
    \ S2: * 5 FETCH ENVELOPE (NIL NIL NIL NIL NIL NIL NIL NIL\n                  \
    \ NIL NIL)\n             S2: B002 OK FETCH Completed\n   <Client #2 attempts to\
    \ FETCH only expunged messages and receives a\n   tagged NO response>\n      \
    \       C2: B002 FETCH 4:7 ENVELOPE\n             S2: B002 NO Messages 4:7 have\
    \ been expunged.\n"
- title: 4.1.4 To avoid the situation altogether, the server MAY fail the
  contents:
  - "4.1.4 To avoid the situation altogether, the server MAY fail the\n      EXPUNGE\
    \ of a multi-accessed mailbox\n   In some cases, this behavior may not be practical.\
    \  For example, if a\n   large number of clients are accessing a shared mailbox,\
    \ the window in\n   which no clients have the mailbox accessed may be small or\
    \ non-\n   existent, effectively rendering the message unexpungeable.\n"
- title: 4.2. Storing of expunged messages
  contents:
  - "4.2. Storing of expunged messages\n   Following are some strategies an IMAP server\
    \ may choose to use when\n   dealing with a STORE command on expunged messages.\n"
- title: 4.2.1 If the ".SILENT" suffix is used, and the STORE completed
  contents:
  - "4.2.1 If the \".SILENT\" suffix is used, and the STORE completed\n      successfully\
    \ for all the non-expunged messages, the server SHOULD\n      return a tagged\
    \ OK.\n   Example:  (Building upon the scenario outlined in 4.1.)\n   <Client\
    \ #2 tries to silently STORE flags on expunged and non-\n   expunged messages.\
    \  The server sets the flags on the non-expunged\n   messages and returns OK>\n\
    \             C2: B001 STORE 1:7 +FLAGS.SILENT (\\SEEN)\n             S2: B001\
    \ OK\n"
- title: 4.2.2. If the ".SILENT" suffix is not used, and only expunged messages
  contents:
  - "4.2.2. If the \".SILENT\" suffix is not used, and only expunged messages\n  \
    \     are referenced, the server SHOULD return only a tagged NO.\n   Example:\
    \  (Building upon the scenario outlined in 4.1.)\n   <Client #2 tries to STORE\
    \ flags only on expunged messages>\n             C2: B001 STORE 5:7 +FLAGS (\\\
    SEEN)\n             S2: B001 NO  Messages have been expunged\n"
- title: 4.2.3. If the ".SILENT" suffix is not used, and a mixture of expunged
  contents:
  - "4.2.3. If the \".SILENT\" suffix is not used, and a mixture of expunged\n   \
    \    and non-expunged messages are referenced, the server MAY set the\n      \
    \ flags and return a FETCH response for the non-expunged messages\n       along\
    \ with a tagged NO.\n   After receiving a tagged NO STORE response, the client\
    \ SHOULD issue a\n   NOOP command so that it will be informed of any pending EXPUNGE\n\
    \   responses.  The client may then either reissue the failed STORE\n   command,\
    \ or by examining the EXPUNGE responses from the NOOP and\n   FETCH responses\
    \ from the STORE, determine that the STORE failed\n   because of pending expunges.\n\
    \   Example:  (Building upon the scenario outlined in 4.1.)\n   <Client #2 tries\
    \ to STORE flags on a mixture of expunged and non-\n   expunged messages>\n  \
    \           C2: B001 STORE 1:7 +FLAGS (\\SEEN)\n             S2: * FETCH 1 FLAGS\
    \ (\\SEEN)\n             S2: * FETCH 2 FLAGS (\\SEEN)\n             S2: * FETCH\
    \ 3 FLAGS (\\SEEN)\n             S2: B001 NO Some of the messages no longer exist.\n\
    \             C2: B002 NOOP\n             S2: * 4 EXPUNGE\n             S2: *\
    \ 4 EXPUNGE\n             S2: * 4 EXPUNGE\n             S2: * 4 EXPUNGE\n    \
    \         S2: * 3 EXISTS\n             S2: B002 OK NOOP Completed.\n   <By receiving\
    \ FETCH responses for messages 1:3, and an EXPUNGE\n   response that indicates\
    \ messages 4:7 have been expunged, the client\n   does not need to re-issue the\
    \ STORE>\n"
- title: 4.2.4. If the ".SILENT" suffix is not used, and a mixture of expunged
  contents:
  - "4.2.4. If the \".SILENT\" suffix is not used, and a mixture of expunged\n   \
    \    and non-expunged messages are referenced, the server MAY return\n       an\
    \ untagged NO and not set any flags.\n   After receiving a tagged NO STORE response,\
    \ the client SHOULD issue a\n   NOOP command so that it will be informed of any\
    \ pending EXPUNGE\n   responses.  The client would then re-issue the STORE command\
    \ after\n   updating its message list per any EXPUNGE response.\n   If a large\
    \ number of clients are accessing a shared mailbox, the\n   window in which there\
    \ are no pending expunges may be small or non-\n   existent, effectively disallowing\
    \ a client from setting the flags on\n   all messages at once.\n   Example:  (Building\
    \ upon the scenario outlined in 4.1.)\n   <Client #2 tries to STORE flags on a\
    \ mixture of expunged and non-\n   expunged messages>\n             C2: B001 STORE\
    \ 1:7 +FLAGS (\\SEEN)\n             S2: B001 NO  Some of the messages no longer\
    \ exist.\n   <Client #2 issues a NOOP to be informed of the EXPUNGED messages>\n\
    \             C2: B002 NOOP\n             S2: * 4 EXPUNGE\n             S2: *\
    \ 4 EXPUNGE\n             S2: * 4 EXPUNGE\n             S2: * 4 EXPUNGE\n    \
    \         S2: * 3 EXISTS\n             S2: B002 OK NOOP Completed.\n   <Client\
    \ #2 updates its message list and re-issues the STORE on only\n   those messages\
    \ that have not been expunged>\n             C2: B003 STORE 1:3 +FLAGS (\\SEEN)\
    \ S2: * FETCH 1 FLAGS\n             (\\SEEN) S2: * FETCH 2 FLAGS (\\SEEN) S2:\
    \ * FETCH 3 FLAGS\n             (\\SEEN) S2: B003 OK  STORE Completed\n"
- title: 4.3. Searching of expunged messages
  contents:
  - "4.3. Searching of expunged messages\n   A server MAY simply not return a search\
    \ response for messages that\n   have been expunged and it has not been able to\
    \ inform the client\n   about.  If a client was expecting a particular message\
    \ to be returned\n   in a search result, and it was not, the client SHOULD issue\
    \ a NOOP\n   command to see if the message was expunged by another client.\n"
- title: 4.4 Copying of expunged messages
  contents:
  - "4.4 Copying of expunged messages\n   COPY is the only IMAP4 sequence number command\
    \ that is safe to allow\n   an EXPUNGE response on.  This is because a client\
    \ is not permitted to\n   cascade several COPY commands together. A client is\
    \ required to wait\n   and confirm that the copy worked before issuing another\
    \ one.\n"
- title: 4.4.1 The server MAY disallow the COPY of messages in a multi-access
  contents:
  - "4.4.1 The server MAY disallow the COPY of messages in a multi-access\n      mailbox\
    \ that contains expunged messages.\n   Pending EXPUNGE response(s) MUST be returned\
    \ to the COPY command.\n   Example:\n             C: A001 COPY 2,4,6,8 FRED\n\
    \             S: * 4 EXPUNGE\n             S: A001 NO COPY rejected, because some\
    \ of the requested\n                messages were expunged\n   Note: Non of the\
    \ above messages are copied because if a COPY command\n   is unsuccessful, the\
    \ server MUST restore the destination mailbox to\n   its state before the COPY\
    \ attempt.\n"
- title: 4.4.2 The server MAY allow the COPY of messages in a multi-access
  contents:
  - "4.4.2 The server MAY allow the COPY of messages in a multi-access\n      mailbox\
    \ that contains expunged messages.\n   Pending EXPUNGE response(s) MUST be returned\
    \ to the COPY command.\n   Messages that are copied are messages corresponding\
    \ to sequence\n   numbers before any EXPUNGE response.\n   Example:\n        \
    \     C: A001 COPY 2,4,6,8 FRED\n             S: * 3 EXPUNGE\n             S:\
    \ A001 OK COPY completed\n   In the above example, the messages that are copied\
    \ to FRED are\n   messages 2,4,6,8 at the start of the COPY command.  These are\n\
    \   equivalent to messages 2,3,5,7 at the end of the COPY command.  The\n   EXPUNGE\
    \ response can't take place until after the messages from the\n   COPY command\
    \ are identified (because of the \"no expunge while no\n   commands in progress\"\
    \ rule).\n   Example:\n             C: A001 COPY 2,4,6,8 FRED\n             S:\
    \ * 4 EXPUNGE\n             S: A001 OK COPY completed\n   In the above example,\
    \ message 4 was copied before it was expunged,\n   and MUST appear in the destination\
    \ mailbox FRED.\n"
- title: 5. Security Considerations
  contents:
  - "5. Security Considerations\n   This document describes behavior of servers that\
    \ use the IMAP4\n   protocol, and as such, has the same security considerations\
    \ as\n   described in [RFC-2060].\n   In particular, some described server behavior\
    \ does not allow for the\n   immediate deletion of information when a mailbox\
    \ is accessed by\n   multiple clients.  This may be a consideration when dealing\
    \ with\n   sensitive information where immediate deletion would be preferred.\n"
- title: 6. References
  contents:
  - "6. References\n   [RFC-2060], Crispin, M., \"Internet Message Access Protocol\
    \ - Version\n   4rev1\", RFC 2060, University of Washington, December 1996.\n\
    \   [RFC-2119], Bradner, S., \"Key words for use in RFCs to Indicate\n   Requirement\
    \ Levels\", RFC 2119, Harvard University, March 1997.\n"
- title: 7.  Acknowledgments
  contents:
  - "7.  Acknowledgments\n   This document is the result of discussions on the IMAP4\
    \ mailing list\n   and is meant to reflect consensus of this group.  In particular,\n\
    \   Raymond Cheng, Mark Crispin, Jim Evans, Erik Forsberg, Steve Hole,\n   Mark\
    \ Keasling, Barry Leiba, Syd Logan, John Mani, Pat Moran, Larry\n   Osterman,\
    \ Chris Newman, Bart Schaefer, Vladimir Vulovic, and Jack De\n   Winter were active\
    \ participants in this discussion or made\n   suggestions to this document.\n"
- title: 8. Author's Address
  contents:
  - "8. Author's Address\n   Mike Gahrns\n   Microsoft\n   One Microsoft Way\n   Redmond,\
    \ WA, 98072\n   Phone: (206) 936-9833\n   EMail: mikega@microsoft.com\n"
