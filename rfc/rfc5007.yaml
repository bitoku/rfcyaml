- contents:
  - '                           DHCPv6 Leasequery

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Abstract\n   This document specifies a leasequery exchange for the Dynamic Host\n
    \  Configuration Protocol for IPv6 (DHCPv6) that can be used to obtain\n   lease
    information about DHCPv6 clients from a DHCPv6 server.  This\n   document specifies
    the scope of data that can be retrieved as well as\n   both DHCPv6 leasequery
    requestor and server behavior.  This document\n   extends DHCPv6.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .
    . . . . . .  3\n   2.  Terminology  . . . . . . . . . . . . . . . . . . . . .
    . . . .  3\n   3.  Protocol Overview  . . . . . . . . . . . . . . . . . . . .
    . .  4\n     3.1.  On-Demand Query  . . . . . . . . . . . . . . . . . . . . .
    \ 4\n     3.2.  Anticipatory Query . . . . . . . . . . . . . . . . . . . .  5\n
    \    3.3.  Query Types  . . . . . . . . . . . . . . . . . . . . . . .  5\n   4.
    \ Protocol Details . . . . . . . . . . . . . . . . . . . . . . .  6\n     4.1.
    \ Message and Option Definitions . . . . . . . . . . . . . .  6\n       4.1.1.
    \ Messages . . . . . . . . . . . . . . . . . . . . . . .  6\n       4.1.2.  Options
    \ . . . . . . . . . . . . . . . . . . . . . . .  6\n       4.1.3.  Status Codes
    . . . . . . . . . . . . . . . . . . . . . 12\n       4.1.4.  Transmission and
    Retransmission Parameters . . . . . . 12\n     4.2.  Message Validation . . .
    . . . . . . . . . . . . . . . . . 12\n       4.2.1.  LEASEQUERY . . . . . . .
    . . . . . . . . . . . . . . . 12\n       4.2.2.  LEASEQUERY-REPLY . . . . . .
    . . . . . . . . . . . . . 13\n     4.3.  DHCPv6 Leasequery Requestor Behavior
    . . . . . . . . . . . 13\n       4.3.1.  Creation of LEASEQUERY . . . . . . .
    . . . . . . . . . 13\n       4.3.2.  Transmission of LEASEQUERY . . . . . . .
    . . . . . . . 13\n       4.3.3.  Receipt of LEASEQUERY-REPLY  . . . . . . . .
    . . . . . 14\n       4.3.4.  Handling DHCPv6 Client Data from Multiple Sources
    \ . . 15\n     4.4.  DHCPv6 Leasequery Server Behavior  . . . . . . . . . . .
    . 16\n       4.4.1.  Receipt of LEASEQUERY Messages . . . . . . . . . . . . 16\n
    \      4.4.2.  Constructing the Client's OPTION_CLIENT_DATA . . . . . 17\n       4.4.3.
    \ Transmission of LEASEQUERY-REPLY Messages  . . . . . . 17\n   5.  Security Considerations
    \ . . . . . . . . . . . . . . . . . . . 17\n   6.  IANA Considerations  . . .
    . . . . . . . . . . . . . . . . . . 19\n   7.  Acknowledgements . . . . . . .
    . . . . . . . . . . . . . . . . 20\n   8.  References . . . . . . . . . . . .
    . . . . . . . . . . . . . . 20\n     8.1.  Normative References . . . . . . .
    . . . . . . . . . . . . 20\n     8.2.  Informative References . . . . . . . .
    . . . . . . . . . . 20\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The DHCPv6 [2] protocol specifies a mechanism for the assignment
    of\n   both IPv6 address and configuration information to IPv6 nodes.  IPv6\n
    \  Prefix Options for DHCPv6 [4] specifies a mechanism for the automated\n   delegation
    of IPv6 prefixes and related options.  Similar to DHCPv4\n   [5], DHCPv6 servers
    maintain authoritative information related to\n   their operations including,
    but not limited to, lease information for\n   IPv6 addresses and delegated prefixes.\n
    \  The requirement exists in various types of IPv6 deployments,\n   particularly
    those of a broadband variety, to leverage DHCPv6 [2] for\n   retrieving data related
    to the operation of DHCPv6 servers\n   programmatically.  In particular, it is
    desirable to be able to\n   extract lease information about IPv6 addresses and
    delegated prefixes\n   assigned using DHCPv6 [2] [4].  Specific examples where
    this\n   information has illustrated value are in broadband networks to\n   facilitate
    access control by edge devices.  This capability to\n   programmatically extract
    lease data from the DHCPv6 server is called\n   leasequery.\n   The leasequery
    capability described in this document parallels the\n   DHCPv4 leasequery capability
    documented in [3].  As such, it shares\n   the basic motivations, background,
    design goals and constraints as\n   described in [3].  Differences are due to
    the differences between\n   IPv4 and IPv6 and by extension, DHCPv4 and DHCPv6.
    \ For example,\n   Neighbor Discovery [7] is used in IPv6 instead of the Address\n
    \  Resolution Protocol (ARP) [8] (Section 4.1 of [3]) and DOCSIS 3.0\n   [11]
    defines IPv6 support for cable modem environments.\n"
  title: 1.  Introduction
- contents:
  - "2.  Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\",
    \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\"
    in this\n   document are to be interpreted as described in [1].\n   DHCPv6 terminology
    is defined in [2].  Terminology specific to DHCPv6\n   leasequery can be found
    below:\n   access concentrator\n                   An access concentrator is a
    router or switch at the\n                   broadband access provider's edge of
    a public\n                   broadband access network.  This document assumes
    that\n                   the access concentrator includes the DHCPv6 relay\n                   agent
    functionality.\n   client(s)       The nodes that have one or more bindings with
    a\n                   DHCPv6 server.  This does not refer to the node\n                   issuing
    the LEASEQUERY unless it itself has one or\n                   more bindings with
    a DHCPv6 server.\n   gleaning        Gleaning is the extraction of location information\n
    \                  from DHCPv6 messages, as the messages are forwarded\n                   by
    the DHCP relay agent function.\n   location information\n                   Location
    information is information needed by the\n                   access concentrator
    to forward traffic to a\n                   broadband-accessible host.  This information
    includes\n                   knowledge of the host hardware address, the port
    or\n                   virtual circuit that leads to the host, and/or the\n                   hardware
    address of the intervening subscriber modem.\n   requestor       The node that
    sends LEASEQUERY messages to one or\n                   more servers to retrieve
    information on the bindings\n                   for a client.\n"
  title: 2.  Terminology
- contents:
  - "3.  Protocol Overview\n   The focus of this document is to extend the DHCPv6
    protocol to allow\n   processes and devices that wish to access information from
    a DHCPv6\n   server to do so in a lightweight and convenient manner.  It is\n
    \  especially appropriate for processes and devices that already\n   interpret
    DHCPv6 messages.\n   The LEASEQUERY message is a query message only and does not
    affect\n   the state of the IPv6 address or prefix, or the binding information\n
    \  associated with it.\n   One important motivating example is that the LEASEQUERY
    message\n   allows access concentrators to query DHCP servers to obtain location\n
    \  information of broadband access network devices.  This is described\n   in
    Section 1 of [3] for IPv4.\n"
  - contents:
    - "3.1.  On-Demand Query\n   The on-demand leasequery capability allows requesting
      just the\n   information necessary to satisfy an immediate need.  If the requestor\n
      \  is an access concentrator, then the immediate need will typically be\n   that
      it has received an IPv6 packet and it needs to refresh its\n   information concerning
      the DHCPv6 client to which that IPv6 address\n   is currently leased.  In this
      case, the request will be by address.\n   This fits clearly into the single
      request/response cycle common to\n   other DHCPv6 message exchanges.\n   However,
      this approach has limitations when used with prefix\n   delegation [4] as no
      traffic may arrive because the access\n   concentrator is unable to inject the
      appropriate routing information\n   into the routing infrastructure, such as
      after a reboot.  This\n   approach does work if the access concentrator is configured
      to inject\n   routing information for a prefix that aggregates potentially\n
      \  delegated prefixes.  Or, it also works if the access concentrator and\n   requesting
      router use a routing protocol; as then the requesting\n   router can trigger
      the access concentrator to request information\n   from a DHCPv6 server and
      inject appropriate routing information into\n   the routing infrastructure.\n"
    title: 3.1.  On-Demand Query
  - contents:
    - "3.2.  Anticipatory Query\n   A second approach for requesting information from
      a DHCPv6 server\n   would be to use a leasequery-like capability to rebuild
      an internal\n   data store containing information available from a DHCPv6 server.\n
      \  The rebuilding of the data store in this approach can take place as\n   soon
      as possible after the need to rebuild it is discovered (such as\n   on booting),
      and doesn't wait on the receipt of specific packets to\n   trigger a piecemeal
      database update (as is the case for on-demand\n   leasequery).  This approach
      would also remove the limitation\n   discussed above for prefix delegation.\n
      \  This anticipatory query is not specified in this document and is an\n   area
      of future work.\n"
    title: 3.2.  Anticipatory Query
  - contents:
    - "3.3.  Query Types\n   Leasequery provides for the following queries:\n   Query
      by IPv6 address -  This query allows a requestor to request\n      from a server
      the bindings for a client that either is bound to\n      the address or has
      been delegated the prefix that contains the\n      address.\n   Query by Client
      Identifier (DUID) -  This query allows a requestor to\n      request from a
      server the bindings for a specific client on a\n      specific link or a list
      of the links on which the client has one\n      or more bindings.\n"
    title: 3.3.  Query Types
  title: 3.  Protocol Overview
- contents:
  - '4.  Protocol Details

    '
  - contents:
    - '4.1.  Message and Option Definitions

      '
    - contents:
      - "4.1.1.  Messages\n   The LEASEQUERY and LEASEQUERY-REPLY messages use the
        Client/Server\n   message formats described in [2], Section 6.  Two new message
        codes\n   are defined:\n   LEASEQUERY (14) -  A requestor sends a LEASEQUERY
        message to any\n      available server to obtain information on a client's
        leases.  The\n      options in an OPTION_LQ_QUERY determine the query.\n   LEASEQUERY-REPLY
        (15) -  A server sends a LEASEQUERY-REPLY message\n      containing client
        data in response to a LEASEQUERY message.\n"
      title: 4.1.1.  Messages
    - contents:
      - '4.1.2.  Options

        '
      - contents:
        - "4.1.2.1.  Query Option\n   The Query option is used only in a LEASEQUERY
          message and identifies\n   the query being performed.  The option includes
          the query type, link-\n   address (or 0::0), and option(s) to provide data
          needed for the\n   query.\n   The format of the Query option is shown below:\n
          \       0                   1                   2                   3\n
          \       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |        OPTION_LQ_QUERY        |         option-len            |\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |   query-type  |                                               |\n
          \      +-+-+-+-+-+-+-+-+                                               |\n
          \      |                                                               |\n
          \      |                         link-address                          |\n
          \      |                                                               |\n
          \      |               +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |               |                                               .\n
          \      +-+-+-+-+-+-+-+-+                                               .\n
          \      .                         query-options                         .\n
          \      .                                                               .\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \        option-code      OPTION_LQ_QUERY (44)\n         option-len       17
          + length of query-options field.\n         link-address     A global address
          that will be used by the\n                          server to identify the
          link to which the\n                          query applies, or 0::0 if unspecified.\n
          \        query-type       The query requested (see below).\n         query-options
          \   The options related to the query.\n   The query-type and required query-options
          are:\n   QUERY_BY_ADDRESS (1) -  The query-options MUST contain an\n      OPTION_IAADDR
          option [2].  The link-address field, if not 0::0,\n      specifies an address
          for the link on which the client is located\n      if the address in the
          OPTION_IAADDR option is of insufficient\n      scope.  Only the information
          for the client that has a lease for\n      the specified address or was
          delegated a prefix that contains the\n      specified address is returned
          (if available).\n   QUERY_BY_CLIENTID (2) -   The query-options MUST contain
          an\n      OPTION_CLIENTID option [2].  The link-address field, if not 0::0,\n
          \     specifies an address for the link on which the client is located.\n
          \     If the link-address field is 0::0, the server SHOULD search all of\n
          \     its links for the client.\n   The query-options MAY also include an
          OPTION_ORO option [2] to\n   indicate the options for each client that the
          requestor would like\n   the server to return.  Note that this OPTION_ORO
          is distinct and\n   separate from an OPTION_ORO that may be in the requestor's
          LEASEQUERY\n   message.\n   If a server receives an OPTION_LQ_QUERY with
          a query-type it does not\n   support, the server SHOULD return an UnknownQueryType
          status-code.\n   If a server receives a supported query-type but the query-options
          is\n   missing a required option, the server SHOULD return a MalformedQuery\n
          \  status-code.\n"
        title: 4.1.2.1.  Query Option
      - contents:
        - "4.1.2.2.  Client Data Option\n   The Client Data option is used to encapsulate
          the data for a single\n   client on a single link in a LEASEQUERY-REPLY
          message.\n   The format of the Client Data option is shown below:\n        0
          \                  1                   2                   3\n        0
          1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |       OPTION_CLIENT_DATA      |         option-len            |\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      .                                                               .\n
          \      .                        client-options                         .\n
          \      .                                                               .\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \        option-code      OPTION_CLIENT_DATA (45)\n         option-len       Length,
          in octets, of the encapsulated client-\n                          options
          field.\n         client-options   The options associated with this client.\n
          \  The encapsulated client-options include the OPTION_CLIENTID,\n   OPTION_IAADDR,
          OPTION_IAPREFIX, and OPTION_CLT_TIME options and other\n   options specific
          to the client and requested by the requestor in the\n   OPTION_ORO in the
          OPTION_LQ_QUERY's query-options.  The server MUST\n   return all of the
          client's statefully assigned addresses and\n   delegated prefixes, with
          a non-zero valid lifetime, on the link.\n"
        title: 4.1.2.2.  Client Data Option
      - contents:
        - "4.1.2.3.  Client Last Transaction Time Option\n   The Client Last Transaction
          Time option is encapsulated in an\n   OPTION_CLIENT_DATA and identifies
          how long ago the server last\n   communicated with the client, in seconds.\n
          \  The format of the Client Last Transaction Time option is shown below:\n
          \       0                   1                   2                   3\n
          \       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |        OPTION_CLT_TIME        |         option-len            |\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |                 client-last-transaction-time                  |\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \        option-code      OPTION_CLT_TIME (46)\n         option-len       4\n
          \        client-last-transaction-time\n                          The number
          of seconds since the server last\n                          communicated
          with the client (on that link).\n   The client-last-transaction-time is
          a positive value and reflects the\n   number of seconds since the server
          last communicated with the client\n   (on that link).\n"
        title: 4.1.2.3.  Client Last Transaction Time Option
      - contents:
        - "4.1.2.4.  Relay Data\n   The Relay Data option is used only in a LEASEQUERY-REPLY
          message and\n   provides the relay agent information used when the client
          last\n   communicated with the server.\n   The format of the Relay Data
          option is shown below:\n        0                   1                   2
          \                  3\n        0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0
          1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |     OPTION_LQ_RELAY_DATA      |         option-len            |\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |                                                               |\n
          \      |                  peer-address (IPv6 address)                  |\n
          \      |                                                               |\n
          \      |                                                               |\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |                                                               |\n
          \      |                       DHCP-relay-message                      |\n
          \      .                                                               .\n
          \      .                                                               .\n
          \      .                                                               .\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \        option-code      OPTION_LQ_RELAY_DATA (47)\n         option-len
          \      16 + length of DHCP-relay-message.\n         peer-address     The
          address of the relay agent from which\n                          the relayed
          message was received by the\n                          server.\n         DHCP-relay-message\n
          \                         The last complete relayed message, excluding\n
          \                         the client's message OPTION_RELAY_MSG,\n                          received
          by the server.\n   This option is used by the server to return full relay
          agent\n   information for a client.  It MUST NOT be returned if the server
          does\n   not have such information, either because the client communicated\n
          \  directly (without relay agent) with the server or if the server did\n
          \  not retain such information.\n   If returned, the DHCP-relay-message
          MUST contain a valid (perhaps\n   multi-hop) RELAY-FORW message as the most
          recently received by the\n   server for the client.  However, the (innermost)
          OPTION_RELAY_MSG\n   option containing the client's message MUST have been
          removed.\n   This option SHOULD only be returned if requested by the OPTION_ORO
          of\n   the OPTION_LQ_QUERY.\n"
        title: 4.1.2.4.  Relay Data
      - contents:
        - "4.1.2.5.  Client Link Option\n   The Client Link option is used only in
          a LEASEQUERY-REPLY message and\n   identifies the links on which the client
          has one or more bindings.\n   It is used in reply to a query when no link-address
          was specified and\n   the client is found to be on more than one link.\n
          \  The format of the Client Link option is shown below:\n        0                   1
          \                  2                   3\n        0 1 2 3 4 5 6 7 8 9 0
          1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n       +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |     OPTION_LQ_CLIENT_LINK     |         option-len            |\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |                                                               |\n
          \      |                  link-address (IPv6 address)                  |\n
          \      |                                                               |\n
          \      |                                                               |\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |                                                               |\n
          \      |                  link-address (IPv6 address)                  |\n
          \      |                                                               |\n
          \      |                                                               |\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \      |                              ...                              |\n
          \      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
          \        option-code      OPTION_LQ_CLIENT_LINK (48)\n         option-len
          \      Length of the list of links in octets;\n                          must
          be a multiple of 16.\n         link-address     A global address used by
          the server to\n                          identify the link on which the
          client is\n                          located.\n   A server may respond to
          a query by client-id, where the 0::0 link-\n   address was specified, with
          this option if the client is found to be\n   on multiple links.  The requestor
          may then repeat the query once for\n   each link-address returned in the
          list, specifying the returned link-\n   address.  If the client is on a
          single link, the server SHOULD return\n   the client's data in an OPTION_CLIENT_DATA
          option.\n"
        title: 4.1.2.5.  Client Link Option
      title: 4.1.2.  Options
    - contents:
      - "4.1.3.  Status Codes\n   The following new status codes are defined:\n   UnknownQueryType
        (7) -  The query-type is unknown to or not supported\n      by the server.\n
        \  MalformedQuery (8) -  The query is not valid; for example, a required\n
        \     query-option is missing from the OPTION_LQ_QUERY.\n   NotConfigured
        (9) -  The server does not have the target address or\n      link in its configuration.\n
        \  NotAllowed (10) -  The server does not allow the requestor to issue\n      this
        LEASEQUERY.\n"
      title: 4.1.3.  Status Codes
    - contents:
      - "4.1.4.  Transmission and Retransmission Parameters\n   This section presents
        a table of values used to describe the message\n   transmission behavior for
        leasequery.\n   Parameter     Default  Description\n   ----------------------------------\n
        \  LQ_TIMEOUT     1 sec   Initial LEASEQUERY timeout\n   LQ_MAX_RT     10
        secs  Max LEASEQUERY timeout value\n   LQ_MAX_RC      5       Max LEASEQUERY
        retry attempts\n"
      title: 4.1.4.  Transmission and Retransmission Parameters
    title: 4.1.  Message and Option Definitions
  - contents:
    - '4.2.  Message Validation

      '
    - contents:
      - "4.2.1.  LEASEQUERY\n   Requestors and clients MUST discard any received LEASEQUERY
        messages.\n   Servers MUST discard any received LEASEQUERY messages that meet
        any\n   of the following conditions:\n   o  the message does not include an
        OPTION_CLIENTID option.\n   o  the message includes an OPTION_SERVERID option
        but the contents of\n      the OPTION_SERVERID option does not match the server's
        identifier.\n   o  the message does not include an OPTION_LQ_QUERY option.\n"
      title: 4.2.1.  LEASEQUERY
    - contents:
      - "4.2.2.  LEASEQUERY-REPLY\n   Requestors MUST discard any received LEASEQUERY-REPLY
        messages that\n   meet any of the following conditions:\n   o  the message
        does not include an OPTION_SERVERID option.\n   o  the message does not include
        an OPTION_CLIENTID option, or the\n      contents of the OPTION_CLIENTID option
        do not match the DUID of\n      the requestor.\n   o  the \"transaction-id\"
        field in the message does not match the value\n      used in the original
        message.\n   Servers and Relay Agents (on the server port, 547 [2]) MUST discard\n
        \  any received LEASEQUERY-REPLY messages.\n"
      title: 4.2.2.  LEASEQUERY-REPLY
    title: 4.2.  Message Validation
  - contents:
    - "4.3.  DHCPv6 Leasequery Requestor Behavior\n   This section describes how a
      requestor initiates lease data retrieval\n   from DHCPv6 servers.\n"
    - contents:
      - "4.3.1.  Creation of LEASEQUERY\n   The requestor sets the \"msg-type\" field
        to LEASEQUERY.  The requestor\n   generates a transaction ID and inserts this
        value in the\n   \"transaction-id\" field.\n   The requestor MUST include
        an OPTION_CLIENTID option to identify\n   itself to the server.\n   The requestor
        MUST include an OPTION_LQ_QUERY option and set the\n   query-type, link-address,
        and query-options as appropriate to the\n   query-type (Section 4.1.2.1).\n
        \  The requestor SHOULD include an OPTION_SERVERID if it is not\n   unicasting
        the LEASEQUERY yet only wants a response from a specific\n   server.\n"
      title: 4.3.1.  Creation of LEASEQUERY
    - contents:
      - "4.3.2.  Transmission of LEASEQUERY\n   The requestor MAY be configured to
        use a list of destination\n   addresses, which MAY include unicast addresses,
        the All_DHCP_Servers\n   multicast address, or other addresses selected by
        the network\n   administrator.  If the requestor has not been explicitly configured,\n
        \  it MAY use the All_DHCP_Servers multicast address as the default.\n   The
        requestor SHOULD send LEASEQUERY to one or more DHCPv6 servers\n   that are
        known to possess authoritative information concerning the\n   query target.\n
        \  In the absence of information concerning which DHCPv6 servers might\n   possess
        authoritative information on the query target, the requestor\n   SHOULD send
        LEASEQUERY to all DHCPv6 servers that the requestor knows\n   about or is
        configured with.  For example, the requestor MAY send\n   LEASEQUERY to the
        All_DHCP_Servers multicast address.\n   The requestor transmits LEASEQUERY
        messages according to Section 14\n   of [2], using the following parameters:\n
        \      IRT    LQ_TIMEOUT\n       MRT    LQ_MAX_RT\n       MRC    LQ_MAX_RC\n
        \      MRD    0\n   If the message exchange fails, the requestor takes an
        action based on\n   the requestor's local policy.  Examples of actions the
        requestor\n   might take include:\n   o  Select another server from a list
        of servers known to the\n      requestor.\n   o  Send to multiple servers
        by multicasting to the All_DHCP_Servers\n      address.\n   o  Terminate the
        request.\n"
      title: 4.3.2.  Transmission of LEASEQUERY
    - contents:
      - "4.3.3.  Receipt of LEASEQUERY-REPLY\n   A successful LEASEQUERY-REPLY is
        one without an OPTION_STATUS_CODE\n   option (or an OPTION_STATUS_CODE option
        with a success code).  There\n   are three variants:\n   1.  If the server
        had bindings for the requested client, the message\n       includes an OPTION_CLIENT_DATA
        option and the requestor extracts\n       the client data from the LEASEQUERY-REPLY
        and updates its binding\n       information database.  If the OPTION_CLIENT_DATA
        contains no\n       OPTION_CLT_TIME, the requestor SHOULD silently discard
        the\n       OPTION_CLIENT_DATA option.\n   2.  If the server found bindings
        for the client on multiple links,\n       the message includes an OPTION_CLIENT_LINK
        option.  The requestor\n       will need to reissue LEASEQUERY messages using
        each of the\n       returned link-addresses to obtain the client's bindings.\n
        \  3.  If the server had no bindings for the client, neither the\n       OPTION_CLIENT_DATA
        nor OPTION_CLIENT_LINK option will be present.\n   An unsuccessful LEASEQUERY-REPLY
        is one that has an\n   OPTION_STATUS_CODE with an error code.  Depending on
        the status code,\n   the requestor may try a different server (such as for
        NotAllowed,\n   NotConfigured, and UnknownQueryType), try a different or corrected\n
        \  query (such as for UnknownQueryType and MalformedQuery), or terminate\n
        \  the query.\n"
      title: 4.3.3.  Receipt of LEASEQUERY-REPLY
    - contents:
      - "4.3.4.  Handling DHCPv6 Client Data from Multiple Sources\n   A requestor
        may receive lease data on the same client from the same\n   DHCPv6 server
        in response to different types of LEASEQUERY.  If a\n   LEASEQUERY is sent
        to multiple servers, the requestor may receive\n   from several servers lease
        data on the same DHCPv6 client.  This\n   section describes how the requestor
        handles multiple lease data\n   sources on the same DHCPv6 client from the
        same server or different\n   servers.\n   The client data from the different
        sources may be disjoint or\n   overlapping.  The disjoint and overlapping
        relationship can happen\n   between data from the same server or different
        servers.\n   If client data from two sources on the same client are of different\n
        \  types or values, then the data are disjoint.  An example of data of\n   different
        types is when a requestor receives an IPv6 address lease\n   from one server
        and a prefix lease from another server, both assigned\n   to the same client.
        \ An example of different values (but the same\n   type) is when a requestor
        receives two IPv6 address leases from two\n   different servers, both assigned
        to the same client, but the leases\n   are on two different IPv6 addresses.
        \ If the requestor receives\n   disjoint client data from different sources,
        it SHOULD merge them.\n   If client data from two sources on the same client
        are of the same\n   type and value, then the data are overlapping.  An example
        of\n   overlapping data is when a requestor receives a lease on the same\n
        \  IPv6 address from two different servers.  Overlapping client data are\n
        \  also called conflicting data.\n   The requestor SHOULD use the OPTION_CLT_TIME
        to resolve data\n   conflicts originated from different servers, and SHOULD
        accept data\n   with most recent OPTION_CLT_TIME.\n"
      title: 4.3.4.  Handling DHCPv6 Client Data from Multiple Sources
    title: 4.3.  DHCPv6 Leasequery Requestor Behavior
  - contents:
    - "4.4.  DHCPv6 Leasequery Server Behavior\n   A DHCPv6 server sends LEASEQUERY-REPLY
      messages in response to valid\n   LEASEQUERY messages it receives to return
      the statefully assigned\n   addresses, delegated prefixes, and other information
      that match the\n   query.\n"
    - contents:
      - "4.4.1.  Receipt of LEASEQUERY Messages\n   Upon receipt of a valid LEASEQUERY
        message, the DHCPv6 server locates\n   the requested client, collects data
        on the client, and constructs and\n   returns a LEASEQUERY-REPLY.  A LEASEQUERY
        message cannot be used to\n   assign, release, or otherwise modify bindings
        or other configuration\n   information.\n   The server constructs a LEASEQUERY-REPLY
        message by setting the \"msg-\n   type\" field to LEASEQUERY-REPLY, and copying
        the transaction ID from\n   the LEASEQUERY message into the transaction-id
        field.\n   If the query-type in the OPTION_LQ_QUERY option is not a known
        or\n   supported value, the server adds an OPTION_STATUS_CODE option with\n
        \  the UnknownQueryType status code and sends the LEASEQUERY-REPLY to\n   the
        requestor.  If the query-options do not contain the required\n   options for
        the query-type, the server adds an OPTION_STATUS_CODE\n   option with the
        MalformedQuery status code and sends the LEASEQUERY-\n   REPLY to the client.\n
        \  A server may also restrict LEASEQUERY messages, or query-types, to\n   certain
        requestors.  In this case, the server MAY discard the\n   LEASEQUERY message
        or MAY add an OPTION_STATUS_CODE option with the\n   NotAllowed status code
        and send the LEASEQUERY-REPLY to the\n   requestor.\n   If the OPTION_LQ_QUERY
        specified a non-zero link-address, the server\n   MUST use the link-address
        to find the appropriate link for the\n   client.  For a QUERY_BY_ADDRESS,
        if the 0::0 link-address was\n   specified, the server uses the address from
        the OPTION_IAADDR option\n   to find the appropriate link for the client.
        \ In either of these\n   cases, if the server is unable to find the link,
        it SHOULD return an\n   OPTION_STATUS_CODE option with the NotConfigured status
        and send the\n   LEASEQUERY-REPLY to the requestor.\n   For a QUERY_BY_CLIENTID,
        if a 0::0 link-address was specified, the\n   server MUST search all of its
        links for the client.  If the client is\n   only found on a single link, the
        server SHOULD return that client's\n   data in an OPTION_CLIENT_DATA option.
        \ If the client is found on more\n   than a single link, the server MUST return
        the list of links in the\n   OPTION_CLIENT_LINK option; the server MUST NOT
        return any client\n   data.\n   Otherwise, the server uses the data in the
        OPTION_LQ_QUERY to\n   initiate the query.  The result of the query will be
        zero or one\n   client.  This will result in zero or one OPTION_CLIENT_DATA
        option\n   being added to the LEASEQUERY-REPLY.\n"
      title: 4.4.1.  Receipt of LEASEQUERY Messages
    - contents:
      - "4.4.2.  Constructing the Client's OPTION_CLIENT_DATA\n   An OPTION_CLIENT_DATA
        option in a LEASEQUERY-REPLY message MUST\n   minimally contain the following
        options:\n   1.  OPTION_CLIENTID\n   2.  OPTION_IAADDR and/or OPTION_IAPREFIX\n
        \  3.  OPTION_CLT_TIME\n   Depending on the bindings the client has on a link,
        either\n   OPTION_IAADDR options, OPTION_IAPREFIX options, or both may be\n
        \  present.\n   The OPTION_CLIENT_DATA SHOULD include options requested in
        the\n   OPTION_ORO of the OPTION_LQ_QUERY option in the LEASEQUERY message\n
        \  and that are acceptable to return based on the list of \"sensitive\n   options\",
        discussed below.\n   DHCPv6 servers SHOULD be configurable with a list of
        \"sensitive\n   options\" that must not be returned to the requestor when
        specified in\n   the OPTION_ORO of the OPTION_LQ_QUERY option in the LEASEQUERY\n
        \  message.  Any option on this list MUST NOT be returned to a\n   requestor,
        even if requested by that requestor.\n"
      title: 4.4.2.  Constructing the Client's OPTION_CLIENT_DATA
    - contents:
      - "4.4.3.  Transmission of LEASEQUERY-REPLY Messages\n   The server sends the
        LEASEQUERY-REPLY message as described in the\n   \"Transmission of Reply Messages\"
        section of [2].\n"
      title: 4.4.3.  Transmission of LEASEQUERY-REPLY Messages
    title: 4.4.  DHCPv6 Leasequery Server Behavior
  title: 4.  Protocol Details
- contents:
  - "5.  Security Considerations\n   Access concentrators are expected to be common
    leasequery requestors.\n   Access concentrators that use DHCPv6 gleaning (i.e.,
    [10]), refreshed\n   with LEASEQUERY messages, will maintain accurate client/binding\n
    \  information.  This ensures that the access concentrator can forward\n   data
    traffic to the intended destination in the broadband access\n   network, can perform
    IPv6 source address verification of datagrams\n   from the access network, and
    can encrypt traffic that can only be\n   decrypted by the intended access modem
    (e.g., [12] and [13]).  Thus,\n   the leasequery capability allows an access concentrator
    to provide\n   considerably enhanced security.\n   The \"Security Considerations\"
    section of [2] details the general\n   threats to DHCPv6, and thus to LEASEQUERY
    messages.  The\n   \"Authentication of DHCP Messages\" section of [2] describes
    securing\n   communication between relay agents and servers, as well as clients\n
    \  and servers.  If the requestor is an access concentrator, the IPsec-\n   based
    [9] security as described in [2] Section 21.1 SHOULD be used.\n   Other types
    of requestors are essentially DHCPv6 clients.  Thus,\n   DHCPv6 authentication,
    Section 21 of [2], is an appropriate mechanism\n   for securing LEASEQUERY and
    LEASEQUERY-REPLY messages.  As the number\n   of leasequery requestors and servers
    in an administrative domain is\n   relatively small, any shared key distribution
    issues are minimized.\n   After implementing the above approaches, the DHCPv6
    server should\n   only be communicating with trusted LEASEQUERY requestors, and
    so\n   security needs should be met.\n   However, not all traffic originates directly
    from these trusted\n   requestors.  For example, trusted relay agents can relay
    LEASEQUERY\n   messages from untrusted requestors or elsewhere in the network.
    \ This\n   SHOULD be prevented at least at the perimeter relay agents (or on all\n
    \  relay agents unless relayed LEASEQUERY messages are required for some\n   requestors).
    \ DHCPv6 servers MAY be configured to discard relayed\n   LEASEQUERY messages
    or restrict relay chaining.\n   DHCPv6 servers SHOULD also provide for the ability
    to restrict the\n   information returned for a client in a LEASEQUERY-REPLY even
    to a\n   trusted LEASEQUERY requestor, as described in Section 4.4.2.\n   Since
    even trusted access concentrators may generate LEASEQUERY\n   requests as a result
    of activity external to the access concentrator,\n   access concentrators SHOULD
    minimize potential denial-of-service\n   attacks on the DHCPv6 servers by minimizing
    the generation of\n   LEASEQUERY messages.  In particular, the access concentrator
    SHOULD\n   employ negative caching (i.e., cache the fact that a particular\n   recent
    query failed to return client data) and address restrictions\n   where possible
    (i.e., don't send a LEASEQUERY message for addresses\n   outside the range of
    the attached broadband access networks).\n   Together, these mechanisms limit
    the access concentrator to\n   transmitting one LEASEQUERY message (excluding
    message retries) per\n   legitimate broadband access network address after a reboot
    event.\n   Packet-flooding denial-of-service attacks can result in the\n   exhaustion
    of processing resources, thus preventing the server from\n   serving legitimate
    and regular DHCPv6 clients as well as legitimate\n   DHCPv6 LEASEQUERY requestors,
    denying configurations to legitimate\n   DHCPv6 clients as well lease information
    to legitimate DHCPv6\n   LEASEQUERY requestors.  While these attacks are unlikely
    when only\n   communicating with trusted LEASEQUERY requestors, the possibility\n
    \  always exists that the trust is misplaced, security techniques are\n   compromised,
    or even trusted requestors can have bugs in them.\n   Therefore, techniques for
    defending against packet-flooding denial of\n   service are always a good idea,
    and they include good perimeter\n   security, as mentioned earlier, and rate limiting
    DHCPv6 traffic by\n   relay agents, other network elements, or the server itself.\n
    \  One way to attack an access concentrator (as opposed to a DHCPv6\n   server)
    as a LEASEQUERY requestor is the establishment of a malicious\n   server with
    the intent of providing incorrect lease or route\n   information to the access
    concentrator, thwarting source IPv6 address\n   verification, and preventing correct
    routing.  This type of attack\n   can be minimized by using IPsec as described
    in Section 21.1 of [2].\n"
  title: 5.  Security Considerations
- contents:
  - "6.  IANA Considerations\n   IANA has assigned the following new DHCPv6 Message
    types in the\n   registry maintained in\n   http://www.iana.org/assignments/dhcpv6-parameters:\n
    \     LEASEQUERY\n      LEASEQUERY-REPLY\n   IANA has assigned the following new
    DHCPv6 Option Codes in the\n   registry maintained in\n   http://www.iana.org/assignments/dhcpv6-parameters:\n
    \     OPTION_LQ_QUERY\n      OPTION_CLIENT_DATA\n      OPTION_CLT_TIME\n      OPTION_LQ_RELAY_DATA\n
    \     OPTION_LQ_CLIENT_LINK\n   IANA has assigned the following new DHCPv6 Status
    Codes in the\n   registry maintained in\n   http://www.iana.org/assignments/dhcpv6-parameters:\n
    \     UnknownQueryType\n      MalformedQuery\n      NotConfigured\n      NotAllowed\n
    \  IANA has created a new registry for the OPTION_LQ_QUERY option query-\n   type
    codes in the registry maintained in\n   http://www.iana.org/assignments/dhcpv6-parameters
    with the following\n   initial assignments:\n      QUERY_BY_ADDRESS       1\n
    \     QUERY_BY_CLIENTID      2\n   New OPTION_LQ_QUERY option query-type codes
    are assigned through\n   Standards Action, as defined in [6].\n"
  title: 6.  IANA Considerations
- contents:
  - "7.  Acknowledgements\n   Thanks to Ralph Droms, Richard Johnson, Josh Littlefield,
    Hemant\n   Singh, Pak Siripunkaw, Markus Stenberg, and Ole Troan for their\n   input,
    ideas, and review during the production of this document.\n"
  title: 7.  Acknowledgements
- contents:
  - '8.  References

    '
  - contents:
    - "8.1.  Normative References\n   [1]   Bradner, S., \"Key words for use in RFCs
      to Indicate Requirement\n         Levels\", BCP 14, RFC 2119, March 1997.\n
      \  [2]   Droms, R., Bound, J., Volz, B., Lemon, T., Perkins, C., and M.\n         Carney,
      \"Dynamic Host Configuration Protocol for IPv6\n         (DHCPv6)\", RFC 3315,
      July 2003.\n   [3]   Woundy, R. and K. Kinnear, \"Dynamic Host Configuration
      Protocol\n         (DHCP) Leasequery\", RFC 4388, February 2006.\n   [4]   Troan,
      O. and R. Droms, \"IPv6 Prefix Options for Dynamic Host\n         Configuration
      Protocol (DHCP) version 6\", RFC 3633,\n         December 2003.\n"
    title: 8.1.  Normative References
  - contents:
    - "8.2.  Informative References\n   [5]   Droms, R., \"Dynamic Host Configuration
      Protocol\", RFC 2131,\n         March 1997.\n   [6]   Narten, T. and H. Alvestrand,
      \"Guidelines for Writing an IANA\n         Considerations Section in RFCs\",
      BCP 26, RFC 2434,\n         October 1998.\n   [7]   Narten, T., Nordmark, E.,
      and W. Simpson, \"Neighbor Discovery\n         for IP Version 6 (IPv6)\", RFC
      2461, December 1998.\n   [8]   Plummer, D., \"Ethernet Address Resolution Protocol:
      Or\n         converting network protocol addresses to 48.bit Ethernet\n         address
      for transmission on Ethernet hardware\", STD 37,\n         RFC 826, November
      1982.\n   [9]   Kent, S. and K. Seo, \"Security Architecture for the Internet\n
      \        Protocol\", RFC 4301, December 2005.\n   [10]  Droms, R., \"DHCPv6
      Relay Agent Assignment Notification (RAAN)\n         Option\", Work in Progress,
      November 2006.\n   [11]  CableLabs, \"Data-Over-Cable Service Interface Specifications:\n
      \        DOCSIS 3.0, MAC and Upper Layer Protocols Interface\n         Specification,
      CM-SP-MULPIv3.0-I04-070518\", May 2007, available\n         at http://www.cablemodem.com/.\n
      \  [12]  SCTE Data Standards Subcommittee, \"Data-Over-Cable Service\n         Interface
      Specifications: DOCSIS 1.0 Baseline Privacy Interface\n         Specification
      SCTE 22-2 2002\", 2002, available at\n         http://www.scte.org/standards/.\n
      \  [13]  CableLabs, \"Data-Over-Cable Service Interface Specifications:\n         Baseline
      Privacy Plus Interface Specification CM-SP-BPI+_I12-\n         050812\", August
      2005, available at http://www.cablemodem.com/.\n"
    title: 8.2.  Informative References
  title: 8.  References
- contents:
  - "Authors' Addresses\n   John Jason Brzozowski\n   Comcast Cable\n   1800 Bishops
    Gate Boulevard\n   Mt. Laurel, NJ  08054\n   USA\n   Phone: +1 856 324 2671\n
    \  EMail: john_brzozowski@cable.comcast.com\n   Kim Kinnear\n   Cisco Systems,
    Inc.\n   1414 Massachusetts Ave.\n   Boxborough, MA  01719\n   USA\n   Phone:
    +1 978 936 0000\n   EMail: kkinnear@cisco.com\n   Bernard Volz\n   Cisco Systems,
    Inc.\n   1414 Massachusetts Ave.\n   Boxborough, MA  01719\n   USA\n   Phone:
    +1 978 936 0000\n   EMail: volz@cisco.com\n   Shengyou Zeng\n   Cisco Systems,
    Inc.\n   1414 Massachusetts Ave.\n   Boxborough, MA  01719\n   USA\n   Phone:
    +1 978 936 0000\n   EMail: szeng@cisco.com\n"
  title: Authors' Addresses
- contents:
  - "Full Copyright Statement\n   Copyright (C) The IETF Trust (2007).\n   This document
    is subject to the rights, licenses and restrictions\n   contained in BCP 78, and
    except as set forth therein, the authors\n   retain all their rights.\n   This
    document and the information contained herein are provided on an\n   \"AS IS\"
    basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n   OR IS SPONSORED
    BY (IF ANY), THE INTERNET SOCIETY, THE IETF TRUST AND\n   THE INTERNET ENGINEERING
    TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS\n   OR IMPLIED, INCLUDING BUT NOT
    LIMITED TO ANY WARRANTY THAT THE USE OF\n   THE INFORMATION HEREIN WILL NOT INFRINGE
    ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR
    PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or
    scope of any\n   Intellectual Property Rights or other rights that might be claimed
    to\n   pertain to the implementation or use of the technology described in\n   this
    document or the extent to which any license under such rights\n   might or might
    not be available; nor does it represent that it has\n   made any independent effort
    to identify any such rights.  Information\n   on the procedures with respect to
    rights in RFC documents can be\n   found in BCP 78 and BCP 79.\n   Copies of IPR
    disclosures made to the IETF Secretariat and any\n   assurances of licenses to
    be made available, or the result of an\n   attempt made to obtain a general license
    or permission for the use of\n   such proprietary rights by implementers or users
    of this\n   specification can be obtained from the IETF on-line IPR repository
    at\n   http://www.ietf.org/ipr.\n   The IETF invites any interested party to bring
    to its attention any\n   copyrights, patents or patent applications, or other
    proprietary\n   rights that may cover technology that may be required to implement\n
    \  this standard.  Please address the information to the IETF at\n   ietf-ipr@ietf.org.\n"
  title: Intellectual Property
