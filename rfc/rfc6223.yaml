- title: __initial_text__
  contents:
  - '                  Indication of Support for Keep-Alive

    '
- title: Abstract
  contents:
  - "Abstract\n   This specification defines a new Session Initiation Protocol (SIP)\n\
    \   Via header field parameter, \"keep\", which allows adjacent SIP\n   entities\
    \ to explicitly negotiate usage of the Network Address\n   Translation (NAT) keep-alive\
    \ mechanisms defined in SIP Outbound, in\n   cases where SIP Outbound is not supported,\
    \ cannot be applied, or\n   where usage of keep-alives is not implicitly negotiated\
    \ as part of\n   the SIP Outbound negotiation.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This is an Internet Standards Track document.\n   This\
    \ document is a product of the Internet Engineering Task Force\n   (IETF).  It\
    \ represents the consensus of the IETF community.  It has\n   received public\
    \ review and has been approved for publication by the\n   Internet Engineering\
    \ Steering Group (IESG).  Further information on\n   Internet Standards is available\
    \ in Section 2 of RFC 5741.\n   Information about the current status of this document,\
    \ any errata,\n   and how to provide feedback on it may be obtained at\n   http://www.rfc-editor.org/info/rfc6223.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2011 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \      1.1. Use-Case: Dialog from Non-Registered UAs ...................3\n  \
    \    1.2. Use-Case: SIP Outbound Not Supported .......................3\n    \
    \  1.3. Use-Case: SIP Dialog Initiated Outbound Flows ..............3\n   2. Conventions\
    \ .....................................................3\n   3. Definitions .....................................................4\n\
    \   4. User Agent and Proxy Behavior ...................................4\n  \
    \    4.1. General ....................................................4\n    \
    \  4.2. Lifetime of Keep-Alives ....................................5\n      \
    \     4.2.1. General .............................................5\n        \
    \   4.2.2. Keep-Alives Associated with Registration ............5\n          \
    \ 4.2.3. Keep-Alives Associated with Dialog ..................6\n      4.3. Behavior\
    \ of a SIP Entity Willing to Send Keep-Alives .......6\n      4.4. Behavior of\
    \ a SIP Entity Willing to Receive Keep-Alives ....7\n   5. Keep-Alive Frequency\
    \ ............................................8\n   6. Connection Reuse ................................................9\n\
    \   7. Examples ........................................................9\n  \
    \    7.1. General ....................................................9\n    \
    \  7.2. Keep-Alive Negotiation Associated with\n           Registration: UA-Proxy\
    \ .....................................9\n      7.3. Keep-Alive Negotiation Associated\
    \ with Dialog: UA-Proxy ...11\n      7.4. Keep-Alive Negotiation Associated with\
    \ Dialog: UA-UA ......13\n   8. Grammar ........................................................15\n\
    \      8.1. General ...................................................15\n  \
    \    8.2. ABNF ......................................................15\n   9.\
    \ IANA Considerations ............................................15\n      9.1.\
    \ \"keep\" Via Header Field Parameter .........................15\n   10. Security\
    \ Considerations .......................................15\n   11. Acknowledgements\
    \ ..............................................16\n   12. References ....................................................17\n\
    \      12.1. Normative References .....................................17\n  \
    \    12.2. Informative References ...................................17\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   Section 3.5 of SIP Outbound [RFC5626] defines two keep-alive\n\
    \   mechanisms.  Even though the keep-alive mechanisms are separated from\n  \
    \ the rest of the SIP Outbound mechanism, SIP Outbound does not define\n   a mechanism\
    \ to explicitly negotiate usage of the keep-alive\n   mechanisms.  In some cases,\
    \ usage of keep-alives can be implicitly\n   negotiated as part of the SIP Outbound\
    \ negotiation.\n   However, there are SIP Outbound use-cases where usage of keep-alives\n\
    \   is not implicitly negotiated as part of the SIP Outbound negotiation.\n  \
    \ In addition, there are cases where SIP Outbound is not supported, or\n   where\
    \ it cannot be applied, but where there is still a need to be\n   able to negotiate\
    \ usage of keep-alives.  Last, SIP Outbound only\n   allows keep-alives to be\
    \ negotiated between a User Agent (UA) and an\n   edge proxy, and not between\
    \ other SIP entities.\n   This specification defines a new Session Initiation\
    \ Protocol (SIP)\n   [RFC3261] Via header field parameter, \"keep\", which allows\
    \ adjacent\n   SIP entities to explicitly negotiate usage of the NAT keep-alive\n\
    \   mechanisms defined in SIP Outbound.  The \"keep\" parameter allows SIP\n \
    \  entities to indicate willingness to send keep-alives, to indicate\n   willingness\
    \ to receive keep-alives, and -- for SIP entities willing\n   to receive keep-alives\
    \ -- to provide a recommended keep-alive\n   frequency.\n   The following sections\
    \ describe use-cases where a mechanism to\n   explicitly negotiate usage of keep-alives\
    \ is needed.\n"
- title: '1.1.  Use-Case: Dialog from Non-Registered UAs'
  contents:
  - "1.1.  Use-Case: Dialog from Non-Registered UAs\n   In some cases, a User Agent\
    \ Client (UAC) does not register itself\n   before it establishes a dialog, but\
    \ in order to maintain NAT bindings\n   open during the lifetime of the dialog,\
    \ it still needs to be able to\n   negotiate the sending of keep-alives towards\
    \ its adjacent downstream\n   SIP entity.  A typical example is an emergency call,\
    \ where a\n   registration is not always required in order to make the call.\n"
- title: '1.2.  Use-Case: SIP Outbound Not Supported'
  contents:
  - "1.2.  Use-Case: SIP Outbound Not Supported\n   In some cases, some SIP entities\
    \ that need to be able to negotiate\n   the use of keep-alives might not support\
    \ SIP Outbound.  However, they\n   might still support the keep-alive mechanisms\
    \ defined in SIP Outbound\n   and need to be able to negotiate usage of them.\n"
- title: '1.3.  Use-Case: SIP Dialog Initiated Outbound Flows'
  contents:
  - "1.3.  Use-Case: SIP Dialog Initiated Outbound Flows\n   SIP Outbound allows the\
    \ establishment of flows using the initial\n   request for a dialog.  As specified\
    \ in RFC 5626 [RFC5626], usage of\n   keep-alives is not implicitly negotiated\
    \ for such flows.\n"
- title: 2.  Conventions
  contents:
  - "2.  Conventions\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in BCP\
    \ 14, RFC 2119\n   [RFC2119].\n"
- title: 3.  Definitions
  contents:
  - "3.  Definitions\n   Edge proxy: As defined in RFC 5626, a SIP proxy that is located\n\
    \   topologically between the registering User Agent (UA) and the\n   Authoritative\
    \ Proxy.\n      NOTE: In some deployments, the edge proxy might be physically\n\
    \      located in the same SIP entity as the Authoritative Proxy.\n   Keep-alives:\
    \ The keep-alive messages defined in RFC 5626.\n   \"keep\" parameter: A SIP Via\
    \ header field parameter that a SIP entity\n   can insert in the topmost Via header\
    \ field that it adds to the\n   request, to explicitly indicate willingness to\
    \ send keep-alives\n   towards its adjacent downstream SIP entity.  A SIP entity\
    \ can add a\n   parameter value to the \"keep\" parameter in a response to explicitly\n\
    \   indicate willingness to receive keep-alives from its adjacent\n   upstream\
    \ SIP entity.\n   SIP entity: SIP User Agent (UA), or proxy, as defined in RFC\
    \ 3261.\n   Adjacent downstream SIP entity: The adjacent SIP entity in the\n \
    \  direction towards which a SIP request is sent.\n   Adjacent upstream SIP entity:\
    \ The adjacent SIP entity in the\n   direction from which a SIP request is received.\n"
- title: 4.  User Agent and Proxy Behavior
  contents:
  - '4.  User Agent and Proxy Behavior

    '
- title: 4.1.  General
  contents:
  - "4.1.  General\n   This section describes how SIP UAs and proxies negotiate usage\
    \ of\n   keep-alives associated with a registration or a dialog, which types\n\
    \   of SIP requests can be used in order to negotiate the usage, and the\n   lifetime\
    \ of the negotiated keep-alives.\n   SIP entities indicate willingness to send\
    \ keep-alives towards the\n   adjacent downstream SIP entity using SIP requests.\
    \  The associated\n   responses are used by SIP entities to indicate willingness\
    \ to receive\n   keep-alives.  SIP entities that indicate willingness to receive\
    \ keep-\n   alives can provide a recommended keep-alive frequency.\n   The procedures\
    \ to negotiate usage of keep-alives are identical for\n   SIP UAs and proxies.\n\
    \   In general, it can be useful for SIP entities to indicate willingness\n  \
    \ to send keep-alives, even if they are not aware of any necessity for\n   them\
    \ to send keep-alives, since the adjacent downstream SIP entity\n   might have\
    \ knowledge about the necessity.  Similarly, if the adjacent\n   upstream SIP\
    \ entity has indicated willingness to send keep-alives, it\n   can be useful for\
    \ SIP entities to indicate willingness to receive\n   keep-alives, even if they\
    \ are not aware of any necessity for the\n   adjacent upstream SIP entity to send\
    \ them.\n      NOTE: Usage of keep-alives is negotiated per direction.  If a SIP\n\
    \      entity has indicated willingness to receive keep-alives from an\n     \
    \ adjacent SIP entity, the sending of keep-alives towards that\n      adjacent\
    \ SIP entity needs to be separately negotiated.\n      NOTE: Since there are SIP\
    \ entities that already use a combination\n      of Carriage Return and Line Feed\
    \ (CRLF) as keep-alive messages,\n      and SIP entities are expected to be able\
    \ to receive those, this\n      specification does not forbid the sending of double-CRLF\
    \ keep-\n      alive messages towards an adjacent SIP entity even if usage of\n\
    \      keep-alives with that SIP entity has not been negotiated.\n      However,\
    \ the \"keep\" parameter is still important in order for a\n      SIP entity to\
    \ indicate that it supports the sending of double-CRLF\n      keep-alive messages,\
    \ so that the adjacent downstream SIP entity\n      does not use other mechanisms\
    \ (e.g., short registration refresh\n      intervals) in order to keep NAT bindings\
    \ open.\n"
- title: 4.2.  Lifetime of Keep-Alives
  contents:
  - '4.2.  Lifetime of Keep-Alives

    '
- title: 4.2.1.  General
  contents:
  - "4.2.1.  General\n   The lifetime of negotiated keep-alives depends on whether\
    \ the keep-\n   alives are associated with a registration or a dialog.  This section\n\
    \   describes the lifetime of negotiated keep-alives.\n"
- title: 4.2.2.  Keep-Alives Associated with Registration
  contents:
  - "4.2.2.  Keep-Alives Associated with Registration\n   SIP entities use a registration\
    \ request in order to negotiate usage\n   of keep-alives associated with a registration.\
    \  Usage of keep-alives\n   can be negotiated when the registration is established,\
    \ or later\n   during the registration.  Once negotiated, keep-alives are sent\
    \ until\n   the registration is terminated, or until a subsequent registration\n\
    \   refresh request is sent or forwarded.  When a subsequent registration\n  \
    \ refresh request is sent or forwarded, if a SIP entity is willing to\n   continue\
    \ sending keep-alives associated with the registration, usage\n   of keep-alives\
    \ MUST be re-negotiated.  If usage is not successfully\n   re-negotiated, the\
    \ SIP entity MUST cease the sending of keep-alives\n   associated with the registration.\n\
    \      NOTE: The sending of keep-alives associated with a registration\n     \
    \ can only be negotiated in the direction from the registering SIP\n      entity\
    \ towards the registrar.\n"
- title: 4.2.3.  Keep-Alives Associated with Dialog
  contents:
  - "4.2.3.  Keep-Alives Associated with Dialog\n   SIP entities use an initial request\
    \ for a dialog, or a mid-dialog\n   target refresh request [RFC3261], in order\
    \ to negotiate the sending\n   and receiving of keep-alives associated with a\
    \ dialog.  Usage of\n   keep-alives can be negotiated when the dialog is established,\
    \ or\n   later during the lifetime of the dialog.  Once negotiated, keep-\n  \
    \ alives MUST be sent for the lifetime of the dialog, until the dialog\n   is\
    \ terminated.  Once the usage of keep-alives associated with a\n   dialog has\
    \ been negotiated, it is not possible to re-negotiate the\n   usage associated\
    \ with the dialog.\n"
- title: 4.3.  Behavior of a SIP Entity Willing to Send Keep-Alives
  contents:
  - "4.3.  Behavior of a SIP Entity Willing to Send Keep-Alives\n   As defined in\
    \ RFC 5626, a SIP entity that supports the sending of\n   keep-alives must act\
    \ as a Session Traversal Utilities for NAT (STUN)\n   client [RFC5389].  The SIP\
    \ entity must support those aspects of STUN\n   that are required in order to\
    \ apply the STUN keep-alive mechanism\n   defined in RFC 5626, and it must support\
    \ the CRLF keep-alive\n   mechanism defined in RFC 5626.  RFC 5626 defines when\
    \ to use STUN and\n   when to use double-CRLF for keep-alives.\n   When a SIP\
    \ entity sends or forwards a request, if it wants to\n   negotiate the sending\
    \ of keep-alives associated with a registration\n   or a dialog, it MUST insert\
    \ a \"keep\" parameter in the topmost Via\n   header field that it adds to the\
    \ request, to indicate willingness to\n   send keep-alives.\n   When the SIP entity\
    \ receives the associated response, if the \"keep\"\n   parameter in the topmost\
    \ Via header field of the response contains a\n   \"keep\" parameter value, it\
    \ MUST start sending keep-alives towards the\n   same destination where it would\
    \ send a subsequent request (e.g.,\n   REGISTER requests and initial requests\
    \ for dialog) associated with\n   the registration (if the keep-alive negotiation\
    \ is for a\n   registration), or where it would send subsequent mid-dialog requests\n\
    \   (if the keep-alive negotiation is for a dialog).  Subsequent\n   mid-dialog\
    \ requests are addressed based on the dialog route set.\n   Once a SIP entity\
    \ has negotiated the sending of keep-alives\n   associated with a dialog towards\
    \ an adjacent SIP entity, it MUST NOT\n   insert a \"keep\" parameter in any subsequent\
    \ SIP requests associated\n   with that dialog towards that adjacent SIP entity.\
    \  Such \"keep\"\n   parameters MUST be ignored, if received.\n   Since an ACK\
    \ request does not have an associated response, it cannot\n   be used to negotiate\
    \ usage of keep-alives.  Therefore, a SIP entity\n   MUST NOT insert a \"keep\"\
    \ parameter in the topmost Via header field of\n   an ACK request.  Such \"keep\"\
    \ parameters MUST be ignored, if received.\n   A SIP entity MUST NOT indicate\
    \ willingness to send keep-alives\n   associated with a dialog, unless it has\
    \ also inserted itself in the\n   dialog route set [RFC3261].\n      NOTE: When\
    \ a SIP entity sends an initial request for a dialog, if\n      the adjacent downstream\
    \ SIP entity does not insert itself in the\n      dialog route set using a Record-Route\
    \ header field [RFC3261], the\n      adjacent downstream SIP entity will change\
    \ once the dialog route\n      set has been established.  If a SIP entity inserts\
    \ a \"keep\"\n      parameter in the topmost Via header field of an initial request\n\
    \      for a dialog, and the \"keep\" parameter in the associated response\n \
    \     does not contain a parameter value, the SIP entity might choose to\n   \
    \   insert a \"keep\" parameter in the topmost Via header field of a\n      subsequent\
    \ SIP request associated with the dialog, in case the new\n      adjacent downstream\
    \ SIP entity (based on the dialog route set) is\n      willing to receive keep-alives\
    \ (in which case it will add a\n      parameter value to the \"keep\" parameter).\n\
    \   If an INVITE request is used to indicate willingness to send keep-\n   alives,\
    \ as long as at least one response (provisional or final) to\n   the INVITE request\
    \ contains a \"keep\" parameter with a parameter\n   value, it is seen as an indication\
    \ that the adjacent downstream SIP\n   entity is willing to receive keep-alives\
    \ associated with the dialog\n   on which the response is received.\n"
- title: 4.4.  Behavior of a SIP Entity Willing to Receive Keep-Alives
  contents:
  - "4.4.  Behavior of a SIP Entity Willing to Receive Keep-Alives\n   As defined\
    \ in RFC 5626, a SIP entity that supports the receiving of\n   keep-alives must\
    \ act as a STUN server [RFC5389].  The SIP entity must\n   support those aspects\
    \ of STUN that are required in order to apply the\n   STUN keep-alive mechanism\
    \ defined in RFC 5626, and it must support\n   the CRLF keep-alive mechanism defined\
    \ in RFC 5626.\n   When a SIP entity sends or forwards a response, and the adjacent\n\
    \   upstream SIP entity has indicated willingness to send keep-alives, if\n  \
    \ the SIP entity is willing to receive keep-alives associated with the\n   registration\
    \ or with the dialog from that adjacent upstream SIP\n   entity, then it MUST\
    \ add a parameter value to the \"keep\" parameter\n   before sending or forwarding\
    \ the response.  The parameter value, if\n   present and with a value other than\
    \ zero, represents a recommended\n   keep-alive frequency, given in seconds.\n\
    \   There might be multiple responses to an INVITE request.  When a SIP\n   entity\
    \ indicates willingness to receive keep-alives in a response to\n   an INVITE\
    \ request, it MUST add a parameter value to the \"keep\"\n   parameter in at least\
    \ one reliable response to the request.  The SIP\n   entity MAY add identical\
    \ parameter values to the \"keep\" parameters in\n   other responses to the same\
    \ request.  The SIP entity MUST NOT add\n   different parameter values to the\
    \ \"keep\" parameters in responses to\n   the same request.  The SIP entity SHOULD\
    \ indicate the willingness to\n   receive keep-alives as soon as possible.\n \
    \  A SIP entity MUST NOT indicate willingness to receive keep-alives\n   associated\
    \ with a dialog, unless it has also inserted itself in the\n   dialog route set\
    \ [RFC3261].\n"
- title: 5.  Keep-Alive Frequency
  contents:
  - "5.  Keep-Alive Frequency\n   If a SIP entity receives a SIP response, where the\
    \ topmost Via header\n   field contains a \"keep\" parameter with a non-zero value\
    \ that\n   indicates a recommended keep-alive frequency, given in seconds, it\n\
    \   MUST use the procedures defined for the Flow-Timer header field\n   [RFC5626].\
    \  According to the procedures, the SIP entity must send\n   keep-alives at least\
    \ as often as the indicated recommended keep-alive\n   frequency, and if the SIP\
    \ entity uses the recommended keep-alive\n   frequency, then it should send its\
    \ keep-alives so that the interval\n   between each keep-alive is randomly distributed\
    \ between 80% and 100%\n   of the recommended keep-alive frequency.\n   If the\
    \ received \"keep\" parameter value is zero, the SIP entity can\n   send keep-alives\
    \ at its discretion.  RFC 5626 provides additional\n   guidance on selecting the\
    \ keep-alive frequency in case a recommended\n   keep-alive frequency is not provided.\n\
    \   This specification does not specify actions to take if negotiated\n   keep-alives\
    \ are not received.  As defined in RFC 5626, the receiving\n   SIP entity may\
    \ consider a connection to be dead in such situations.\n   If a SIP entity that\
    \ adds a parameter value to the \"keep\" parameter\n   in order to indicate willingness\
    \ to receive keep-alives also inserts\n   a Flow-Timer header field (that can\
    \ happen if the SIP entity is using\n   both the Outbound mechanism and the keep-alive\
    \ mechanism) in the same\n   SIP message, the header field value and the \"keep\"\
    \ parameter value\n   MUST be identical.\n   SIP Outbound uses the Flow-Timer\
    \ header field to indicate the server-\n   recommended keep-alive frequency; however,\
    \ it will only be sent\n   between a UA and an edge proxy.  On the other hand,\
    \ by using the\n   \"keep\" parameter, the sending and receiving of keep-alives\
    \ can be\n   negotiated between multiple entities on the signalling path.  In\n\
    \   addition, since the server-recommended keep-alive frequency might\n   vary\
    \ between different SIP entities, a single Flow-Timer header field\n   cannot\
    \ be used to indicate all the different frequency values.\n"
- title: 6.  Connection Reuse
  contents:
  - "6.  Connection Reuse\n   Keep-alives are often sent in order to keep NAT bindings\
    \ open, so\n   that SIP requests sent in the reverse direction will pass by the\
    \ NAT\n   and reuse the same connection.  In the case of non-connection-\n   oriented\
    \ transport protocols, keep-alives would permit the same path\n   to be reused.\
    \  This specification does not define such a connection\n   reuse mechanism. \
    \ The keep-alive mechanism defined in this\n   specification is only used to negotiate\
    \ the sending and receiving of\n   keep-alives.  Entities that want to reuse connections\
    \ need to use\n   another mechanism to ensure that security aspects associated\
    \ with\n   connection reuse are taken into consideration.\n   RFC 5923 [RFC5923]\
    \ specifies a mechanism for using connection-\n   oriented transports to send\
    \ requests in the reverse direction, and an\n   entity that wants to use connection\
    \ reuse as well as indicate support\n   of keep-alives on that connection will\
    \ insert both the \"alias\"\n   parameter defined in RFC 5923 and the \"keep\"\
    \ parameter defined in\n   this specification.\n   SIP Outbound specifies how\
    \ registration flows are used to send\n   requests in the reverse direction.\n"
- title: 7.  Examples
  contents:
  - '7.  Examples

    '
- title: 7.1.  General
  contents:
  - "7.1.  General\n   This section shows example flows where usage of keep-alives,\n\
    \   associated with a registration and a dialog, is negotiated between\n   different\
    \ SIP entities.\n      NOTE: The examples do not show the actual syntactical encoding\
    \ of\n      the request lines, response lines, and the Via header fields, but\n\
    \      rather a pseudocode in order to identify the message type and also\n  \
    \    identify to which SIP entity a Via header field is associated.\n"
- title: '7.2.  Keep-Alive Negotiation Associated with Registration: UA-Proxy'
  contents:
  - "7.2.  Keep-Alive Negotiation Associated with Registration: UA-Proxy\n   Figure\
    \ 1 shows an example where Alice sends a REGISTER request.  She\n   indicates\
    \ willingness to send keep-alives by inserting a \"keep\"\n   parameter in the\
    \ Via header field of her request.  The edge proxy\n   (P1) forwards the request\
    \ towards the registrar.\n   P1 is willing to receive keep-alives from Alice for\
    \ the duration of\n   the registration, so when P1 receives the associated response\
    \ it adds\n   a \"keep\" parameter value, which indicates a recommended keep-alive\n\
    \   frequency of 30 seconds, to Alice's Via header field, before it\n   forwards\
    \ the response towards Alice.\n   When Alice receives the response, she determines\
    \ from her Via header\n   field that P1 is willing to receive keep-alives associated\
    \ with the\n   registration.  Until either the registration expires or Alice sends\
    \ a\n   registration refresh request, Alice then sends periodic keep-alives\n\
    \   (in this example using the STUN keep-alive technique) towards P1,\n   using\
    \ the recommended keep-alive frequency indicated by the \"keep\"\n   parameter\
    \ value.\n     Alice                        P1                      REGISTRAR\n\
    \       |                          |                           |\n       |---\
    \ REGISTER------------->|                           |\n       |    Via: Alice;keep\
    \       |                           |\n       |                          |---\
    \ REGISTER-------------->|\n       |                          |    Via: P1   \
    \             |\n       |                          |    Via: Alice;keep      \
    \  |\n       |                          |                           |\n      \
    \ |                          |<-- 200 OK ----------------|\n       |         \
    \                 |    Via: P1                |\n       |                    \
    \      |    Via: Alice;keep        |\n       |<-- 200 OK ---------------|    \
    \                       |\n       |    Via: Alice;keep=30    |               \
    \            |\n       |                          |                          \
    \ |\n       |                          |                           |\n       |\
    \                   *** Timeout ***                    |\n       |           \
    \               |                           |\n       |=== STUN request ========>|\
    \                           |\n       |<== STUN response ========|           \
    \                |\n       |                          |                      \
    \     |\n       |                   *** Timeout ***                    |\n   \
    \    |                          |                           |\n       |=== STUN\
    \ request ========>|                           |\n       |<== STUN response ========|\
    \                           |\n       |                          |           \
    \                |\n                        Figure 1: Example Call Flow\n"
- title: '7.3.  Keep-Alive Negotiation Associated with Dialog: UA-Proxy'
  contents:
  - "7.3.  Keep-Alive Negotiation Associated with Dialog: UA-Proxy\n   Figure 2 shows\
    \ an example where Alice sends an initial INVITE request\n   for a dialog.  She\
    \ indicates willingness to send keep-alives by\n   inserting a \"keep\" parameter\
    \ in the Via header field of her request.\n   The edge proxy (P1) adds itself\
    \ to the dialog route set by adding\n   itself to a Record-Route header field,\
    \ before it forwards the request\n   towards Bob.\n   P1 is willing to receive\
    \ keep-alives from Alice for the duration of\n   the dialog, so when P1 receives\
    \ the associated response it adds a\n   \"keep\" parameter value, which indicates\
    \ a recommended keep-alive\n   frequency of 30 seconds, to Alice's Via header\
    \ field, before it\n   forwards the response towards Alice.\n   When Alice receives\
    \ the response, she determines from her Via header\n   field that P1 is willing\
    \ to receive keep-alives associated with the\n   dialog.  For the lifetime of\
    \ the dialog, Alice then sends periodic\n   keep-alives (in this example using\
    \ the STUN keep-alive technique)\n   towards P1, using the recommended keep-alive\
    \ frequency indicated by\n   the \"keep\" parameter value.\n     Alice       \
    \                 P1                         Bob\n       |                   \
    \       |                           |\n       |--- INVITE -------------->|   \
    \                        |\n       |    Via: Alice;keep       |              \
    \             |\n       |                          |--- INVITE --------------->|\n\
    \       |                          |    Via: P1                |\n       |   \
    \                       |    Via: Alice;keep        |\n       |              \
    \            |    Record-Route: P1       |\n       |                         \
    \ |                           |\n       |                          |<-- 200 OK\
    \ ----------------|\n       |                          |    Via: P1          \
    \      |\n       |                          |    Via: Alice;keep        |\n  \
    \     |                          |    Record-Route: P1       |\n       |<-- 200\
    \ OK ---------------|                           |\n       |    Via: Alice;keep=30\
    \    |                           |\n       |    Record-Route: P1      |      \
    \                     |\n       |                          |                 \
    \          |\n       |--- ACK ----------------->|                           |\n\
    \       |                          |                           |\n       |   \
    \                       |--- ACK ------------------>|\n       |              \
    \            |                           |\n       |                   *** Timeout\
    \ ***                    |\n       |                          |              \
    \             |\n       |=== STUN request ========>|                         \
    \  |\n       |<== STUN response ========|                           |\n      \
    \ |                          |                           |\n       |         \
    \          *** Timeout ***                    |\n       |                    \
    \      |                           |\n       |=== STUN request ========>|    \
    \                       |\n       |<== STUN response ========|               \
    \            |\n       |                          |                          \
    \ |\n       |                          |                           |\n       |---\
    \ BYE ----------------->|                           |\n       |              \
    \            |                           |\n       |                         \
    \ |--- BYE ------------------>|\n       |                          |         \
    \                  |\n       |                          |<-- 200 OK ----------------|\n\
    \       |                          |                           |\n           \
    \             Figure 2: Example Call Flow\n"
- title: '7.4.  Keep-Alive Negotiation Associated with Dialog: UA-UA'
  contents:
  - "7.4.  Keep-Alive Negotiation Associated with Dialog: UA-UA\n   Figure 3 shows\
    \ an example where Alice sends an initial INVITE request\n   for a dialog.  She\
    \ indicates willingness to send keep-alives by\n   inserting a \"keep\" parameter\
    \ in the Via header field of her request.\n   In this scenario, the edge proxy\
    \ (P1) does not add itself to a\n   Record-Route header field (and so will not\
    \ be added to the dialog\n   route set) before forwarding the request towards\
    \ Bob.\n   When Alice receives the response, she determines from the Via header\n\
    \   field that P1 is not willing to receive keep-alives associated with\n   the\
    \ dialog from her.  When the dialog route set has been established,\n   Alice\
    \ sends a mid-dialog UPDATE request towards Bob (since P1 did not\n   insert itself\
    \ in the dialog route set), and she once again indicates\n   willingness to send\
    \ keep-alives by inserting a \"keep\" parameter in\n   the Via header field of\
    \ her request.  Bob supports the keep-alive\n   mechanism, and is willing to receive\
    \ keep-alives associated with the\n   dialog from Alice, so he creates a response\
    \ and adds a \"keep\"\n   parameter value, which indicates a recommended keep-alive\
    \ frequency\n   of 30 seconds, to Alice's Via header field, before he forwards\
    \ the\n   response towards Alice.\n   When Alice receives the response, she determines\
    \ from her Via header\n   field that Bob is willing to receive keep-alives associated\
    \ with the\n   dialog.  For the lifetime of the dialog, Alice then sends periodic\n\
    \   keep-alives (in this example using the STUN keep-alive technique)\n   towards\
    \ Bob, using the recommended keep-alive frequency indicated by\n   the \"keep\"\
    \ parameter value.\n     Alice                        P1                     \
    \    Bob\n       |                          |                           |\n  \
    \     |--- INVITE -------------->|                           |\n       |    Via:\
    \ Alice;keep       |                           |\n       |                   \
    \       |--- INVITE --------------->|\n       |                          |   \
    \ Via: P1                |\n       |                          |    Via: Alice;keep\
    \        |\n       |                          |                           |\n\
    \       |                          |<-- 200 OK ----------------|\n       |   \
    \                       |    Via: P1                |\n       |              \
    \            |    Via: Alice;keep        |\n       |<-- 200 OK ---------------|\
    \                           |\n       |    Via: Alice;keep       |           \
    \                |\n       |                          |                      \
    \     |\n       |                                                      |\n   \
    \    |--- ACK --------------------------------------------->|\n       |      \
    \                                                |\n       |--- UPDATE ------------------------------------------>|\n\
    \       |    Via: Alice;keep                                   |\n       |   \
    \                                                   |\n       |<-- 200 OK -------------------------------------------|\n\
    \       |    Via: Alice;keep=30                                |\n       |   \
    \                                                   |\n       |              \
    \                                        |\n       |                   *** Timeout\
    \ ***                    |\n       |                                         \
    \             |\n       |=== STUN request ====================================>|\n\
    \       |<== STUN response ====================================|\n       |   \
    \                                                   |\n       |              \
    \     *** Timeout ***                    |\n       |                         \
    \                             |\n       |=== STUN request ====================================>|\n\
    \       |<== STUN response ====================================|\n       |   \
    \                                                   |\n       |              \
    \                                        |\n       |--- BYE --------------------------------------------->|\n\
    \       |                                                      |\n       |<--\
    \ 200 OK -------------------------------------------|\n       |              \
    \                                        |\n                        Figure 3:\
    \ Example Call Flow\n"
- title: 8.  Grammar
  contents:
  - '8.  Grammar

    '
- title: 8.1.  General
  contents:
  - "8.1.  General\n   This section extends the ABNF definition of via-params from\
    \ [RFC3261]\n   by adding a new Via header field parameter, \"keep\".  The ABNF\
    \ defined\n   in this specification is conformant to RFC 5234 [RFC5234].  \"EQUAL\"\
    \n   is defined in RFC 3261.  \"DIGIT\" is defined in RFC 5234.\n"
- title: 8.2.  ABNF
  contents:
  - "8.2.  ABNF\n   via-params =/ keep\n   keep       = \"keep\" [ EQUAL 1*(DIGIT)\
    \ ]\n"
- title: 9.  IANA Considerations
  contents:
  - '9.  IANA Considerations

    '
- title: 9.1.  "keep" Via Header Field Parameter
  contents:
  - "9.1.  \"keep\" Via Header Field Parameter\n   This specification defines a new\
    \ Via header field parameter called\n   \"keep\" in the \"Header Field Parameters\
    \ and Parameter Values\"\n   sub-registry as per the registry created by [RFC3968].\
    \  The syntax is\n   defined in Section 8 of this document.  IANA has registered\
    \ the\n   following:\n                                                  Predefined\n\
    \   Header Field            Parameter Name         Values      Reference\n   ----------------------\
    \  ---------------------  ----------  ---------\n   Via                     keep\
    \                   No          [RFC6223]\n"
- title: 10.  Security Considerations
  contents:
  - "10.  Security Considerations\n   SIP entities that send or receive keep-alives\
    \ are often required to\n   use a connection reuse mechanism, in order to ensure\
    \ that requests\n   sent in the reverse direction, towards the sender of the keep-alives,\n\
    \   traverse NATs, etc.  This specification does not define a connection\n   reuse\
    \ mechanism, and it does not address security issues related to\n   connection\
    \ reuse.  SIP entities that wish to reuse connections need\n   to use a dedicated\
    \ connection reuse mechanism, in conjunction with\n   the keep-alive negotiation\
    \ mechanism.\n   Unless SIP messages are integrity protected hop-by-hop, e.g.,\
    \ using\n   Transport Layer Security (TLS) [RFC5246] or Datagram Transport Layer\n\
    \   Security (DTLS) [RFC4347], a man-in-the-middle can modify Via header\n   fields\
    \ used by two entities to negotiate the sending of keep-alives,\n   e.g., by removing\
    \ the designations used to indicate willingness to\n   send and receive keep-alives,\
    \ or by decreasing the timer value to a\n   very low value, which might trigger\
    \ additional resource consumption\n   due to the frequently sent keep-alives.\n\
    \   The behaviors defined in Sections 4.3 and 4.4 require a SIP entity\n   using\
    \ the mechanism defined in this specification to place a value in\n   the \"keep\"\
    \ parameter in the topmost Via header field value of a\n   response the SIP entity\
    \ sends.  They do not instruct the entity to\n   place a value in a \"keep\" parameter\
    \ of any request it forwards.  In\n   particular, a SIP proxy MUST NOT place a\
    \ value into the \"keep\"\n   parameter of the topmost Via header field value\
    \ of a request it\n   receives before forwarding it.  A SIP proxy implementing\
    \ this\n   specification SHOULD remove any \"keep\" parameter values in any Via\n\
    \   header field values below the topmost one in responses it receives\n   before\
    \ forwarding them.\n   When requests are forwarded across multiple hops, it is\
    \ possible for\n   a malicious downstream SIP entity to tamper with the accrued\
    \ values\n   in the Via header field.  The malicious SIP entity could place a\n\
    \   value, or change an existing value in a \"keep\" parameter in any of\n   the\
    \ Via header field values -- not just the topmost value.  A proxy\n   implementation\
    \ that simply forwards responses by stripping the\n   topmost Via header field\
    \ value and not inspecting the resulting new\n   topmost Via header field value\
    \ risks being adversely affected by such\n   a malicious downstream SIP entity.\
    \  In particular, such a proxy may\n   start receiving STUN requests if it blindly\
    \ forwards a response with\n   a \"keep\" parameter with a value it did not create\
    \ in the topmost Via\n   header field.\n   To lower the chances of the malicious\
    \ SIP entity's actions having\n   adverse effects on such proxies, when a SIP\
    \ entity sends STUN keep-\n   alives to an adjacent downstream SIP entity and\
    \ does not receive a\n   response to those STUN messages (as described in Section\
    \ 7.2.1 of\n   RFC 5389 [RFC5389], it MUST stop sending keep-alives for the\n\
    \   remaining duration of the dialog (if the sending of keep-alives were\n   negotiated\
    \ for a dialog) or until the sending of keep-alives is\n   re-negotiated for the\
    \ registration (if the sending keep-alives were\n   negotiated for a registration).\n\
    \   Apart from the issues described above, this specification does not\n   introduce\
    \ security considerations in addition to those specified for\n   keep-alives in\
    \ [RFC5626].\n"
- title: 11.  Acknowledgements
  contents:
  - "11.  Acknowledgements\n   Thanks to Staffan Blau, Francois Audet, Hadriel Kaplan,\
    \ Sean\n   Schneyer, and Milo Orsic for their comments on the initial draft\n\
    \   version of this document.  Thanks to Juha Heinanen, Jiri Kuthan, Dean\n  \
    \ Willis, John Elwell, Paul Kyzivat, Peter Musgrave, Dale Worley, Adam\n   Roach,\
    \ and Robert Sparks for their comments on the sipcore mailing\n   list.  Thanks\
    \ to Vijay Gurbani for providing text about the\n   relationship with the connect\
    \ reuse specification.\n"
- title: 12.  References
  contents:
  - '12.  References

    '
- title: 12.1.  Normative References
  contents:
  - "12.1.  Normative References\n   [RFC2119]  Bradner, S., \"Key words for use in\
    \ RFCs to Indicate\n              Requirement Levels\", BCP 14, RFC 2119, March\
    \ 1997.\n   [RFC3261]  Rosenberg, J., Schulzrinne, H., Camarillo, G., Johnston,\n\
    \              A., Peterson, J., Sparks, R., Handley, M., and E.\n           \
    \   Schooler, \"SIP: Session Initiation Protocol\", RFC 3261,\n              June\
    \ 2002.\n   [RFC5234]  Crocker, D., Ed., and P. Overell, \"Augmented BNF for\n\
    \              Syntax Specifications: ABNF\", STD 68, RFC 5234,\n            \
    \  January 2008.\n   [RFC5389]  Rosenberg, J., Mahy, R., Matthews, P., and D.\
    \ Wing,\n              \"Session Traversal Utilities for NAT (STUN)\", RFC 5389,\n\
    \              October 2008.\n   [RFC5626]  Jennings, C., Ed., Mahy, R., Ed.,\
    \ and F. Audet, Ed.,\n              \"Managing Client-Initiated Connections in\
    \ the Session\n              Initiation Protocol (SIP)\", RFC 5626, October 2009.\n"
- title: 12.2.  Informative References
  contents:
  - "12.2.  Informative References\n   [RFC3968]  Camarillo, G., \"The Internet Assigned\
    \ Number Authority\n              (IANA) Header Field Parameter Registry for the\
    \ Session\n              Initiation Protocol (SIP)\", BCP 98, RFC 3968,\n    \
    \          December 2004.\n   [RFC4347]  Rescorla, E. and N. Modadugu, \"Datagram\
    \ Transport Layer\n              Security\", RFC 4347, April 2006.\n   [RFC5246]\
    \  Dierks, T. and E. Rescorla, \"The Transport Layer Security\n              (TLS)\
    \ Protocol Version 1.2\", RFC 5246, August 2008.\n   [RFC5923]  Gurbani, V., Ed.,\
    \ Mahy, R., and B. Tate, \"Connection Reuse\n              in the Session Initiation\
    \ Protocol (SIP)\", RFC 5923,\n              June 2010.\n"
- title: Author's Address
  contents:
  - "Author's Address\n   Christer Holmberg\n   Ericsson\n   Hirsalantie 11\n   Jorvas\
    \  02420\n   Finland\n   EMail: christer.holmberg@ericsson.com\n"
