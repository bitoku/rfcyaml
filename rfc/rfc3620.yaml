- contents:
  - '                           The TUNNEL Profile

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2003).  All Rights Reserved.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This memo describes a Blocks Extensible Exchange Protocol (BEEP)\n
    \  profile that allows a BEEP peer to serve as an application-layer\n   proxy.
    \ It allows authorized users to access services through a\n   firewall.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Rationale  . . . . . . . . . . . . . . . . . . . . .
    . . . . .   2\n   2. Examples . . . . . . . . . . . . . . . . . . . . . . . .
    . . .   3\n      2.1 One-Hop Example. . . . . . . . . . . . . . . . . . . . .
    .   3\n      2.2 Two-Hop Example. . . . . . . . . . . . . . . . . . . . . .   4\n
    \     2.3 Failed Set-Up Example. . . . . . . . . . . . . . . . . . .   5\n      2.4
    Non-BEEP Example . . . . . . . . . . . . . . . . . . . . .   5\n      2.5 Profile
    Example. . . . . . . . . . . . . . . . . . . . . .   6\n      2.6 Endpoint Example
    . . . . . . . . . . . . . . . . . . . . .   8\n   3. Message Syntax.  . . . .
    . . . . . . . . . . . . . . . . . . .   9\n   4. Message Semantics .  . . . .
    . . . . . . . . . . . . . . . . .  10\n   5. Provisioning . . . . . . . . . .
    . . . . . . . . . . . . . . .  12\n   6. Reply Codes. . . . . . . . . . . . .
    . . . . . . . . . . . . .  13\n   7. Security Considerations. . . . . . . . .
    . . . . . . . . . . .  14\n   8. Normative References . . . . . . . . . . . .
    . . . . . . . . .  15\n   A. IANA Considerations  . . . . . . . . . . . . . .
    . . . . . . .  16\n      A.1 Registration: BEEP Profile . . . . . . . . . . .
    . . . . .  16\n      A.2 Registration: A System (Well-Known) TCP\n          port
    number for TUNNEL . . . . . . . . . . . . . . . . . .  16\n   B. Acknowledgements
    . . . . . . . . . . . . . . . . . . . . . . .  17\n      Author's Address . .
    . . . . . . . . . . . . . . . . . . . . .  17\n      Full Copyright Statement
    . . . . . . . . . . . . . . . . . . .  18\n"
  title: Table of Contents
- contents:
  - "1. Rationale\n   The TUNNEL profile provides a mechanism for cooperating BEEP
    peers to\n   form an application-layer tunnel.  The peers exchange \"tunnel\"\n
    \  elements that specify a source route, with the outermost element\n   being
    stripped off and used to decide the next hop.  The innermost,\n   empty \"tunnel\"
    element tells the final destination that it is,\n   indeed, the final destination.
    \ The term \"proxy\" is used to refer any\n   of the BEEP peers other than the
    initiator and the final destination.\n   In one use of this profile, a BEEP peer
    implementing the TUNNEL\n   profile is co-resident with a firewall.  An initiating
    machine inside\n   the firewall makes a connection to the proxy, then ask that
    proxy to\n   make a connection to an endpoint outside the firewall.  Once this\n
    \  connection is established, the proxy tells the outside endpoint that\n   it
    will be tunneling.  If the outside machine agrees, the proxy \"gets\n   out of
    the way,\" simply passing octets transparently, and both the\n   initiating and
    terminating machines perform a \"tuning reset,\" not\n   unlike the way starting
    a TLS negotiation discards cached session\n   state and starts anew.\n   Another
    use for this profile is to limit connections to outside\n   servers based on the
    user identity negotiated via SASL.  For example,\n   a manager may connect to
    a proxy, authenticate herself with SASL,\n   then instruct the proxy to tunnel
    to an information service\n   restricted to managers.  Since each proxy knows
    the identity of the\n   next proxy being requested, it can refuse to tunnel connections
    if\n   inadequate levels of authorization have been established.  It is also\n
    \  possible to use the TUNNEL profile to anonymize the true source of a\n   BEEP
    connection, in much the way a NAT translates IP addresses.\n   However, detailed
    discussion of such uses is beyond the scope of this\n   document.\n   Once both
    endpoint machines are connected, the tunneling proxy\n   machine does no further
    interpretation of the data.  In particular,\n   it does not look for any BEEP
    framing.  The two endpoint machines may\n   therefore negotiate TLS between them,
    passing certificates\n   appropriate to the endpoints rather than the proxy, with
    the\n   assurance that even the proxy cannot access the information\n   exchanged.\n
    \  The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n
    \  \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and \"OPTIONAL\" in this\n
    \  document are to be interpreted as described in BCP 14, RFC 2119 [1].\n"
  title: 1. Rationale
- contents:
  - "2. Examples\n   While the semantics described in Section 4 may seem complex,
    the\n   results are actually relatively simple.  A few examples will show the\n
    \  operation and use of this profile.  In these examples, the machine\n   attempting
    to establish the connection is named \"initial\", while the\n   intermediate proxies
    are \"proxy1\" or \"proxy2\", and the machine with\n   the service that \"initial\"
    wishes to access is called \"final\".  The\n   examples also assume that the BEEP
    framework [2] is implemented on\n   top of TCP [3], or some other mapping where
    one transport connection\n   carries all channels.\n"
  - contents:
    - "2.1 One-Hop Example\n   A simple one-hop connection through a single proxy
      is illustrated\n   first.\n   initial                   proxy1                     final\n
      \     ----- xport connect ----->\n     <------- greeting -------->\n      ---
      start TUNNEL [1] ---->\n                                ----- xport connect
      ------>\n                               <-------- greeting -------->\n                                ----
      start TUNNEL [2] ---->\n                               <---------- ok ------------\n
      \    <------- ok -------------- [3]\n     <------------- greeting [4]-------------------------->\n
      \  Notes:\n   [1]  The TUNNEL element looks like this:\n        <tunnel fqdn='final.example.com'
      port='604'>\n          <tunnel/>\n        </tunnel>\n   [2]  The TUNNEL element
      looks like this:\n        <tunnel/>\n   [3]  At this point, immediately after
      sending the <ok/> element,\n        proxy1 starts passing octets transparently.
      \ It continues to do\n        so until either transport connection is closed,
      after which it\n        closes the other.\n   [4]  This greeting may include
      the TLS profile, allowing initial and\n        final to communicate without
      proxy1 understanding or interfering\n        without being caught.\n"
    title: 2.1 One-Hop Example
  - contents:
    - "2.2 Two-Hop Example\n   The second example shows the initiator connecting to
      its proxy, that\n   proxy connecting to another, and finally that second proxy
      finding a\n   service outside.\n   initial             proxy1                proxy2
      \               final\n     --- xport connect -->\n    <---- greeting ------>\n
      \    --start TUNNEL [1]-->\n                          -- xport connect --->\n
      \                        <----- greeting ----->\n                          --start
      TUNNEL [2]-->\n                                               --- xport  connect
      --->\n                                              <------- greeting ----->\n
      \                                              ---start TUNNEL [3]--->\n                                              <--------
      ok ----------\n                         <------- ok --------- [4]\n    <-------
      ok --------- [5]\n    <-------------------------- greeting ---------------------------->\n
      \  Notes:\n   [1]  The TUNNEL element looks like this:\n        <tunnel fqdn='proxy2.example.com'
      port='604'>\n          <tunnel fqdn='final.example.com' port='10290'>\n            <tunnel/>\n
      \         </tunnel>\n        </tunnel>\n   [2]  The TUNNEL element looks like
      this:\n        <tunnel fqdn='final.example.com' port='10290'>\n          <tunnel/>\n
      \       </tunnel>\n   [3]  The TUNNEL element looks like this:\n        <tunnel/>\n
      \  [4]  Proxy2 starts passing octets transparently after sending the\n        <ok/>.\n
      \  [5]  Proxy1 starts passing octets transparently after sending the\n        <ok/>.\n"
    title: 2.2 Two-Hop Example
  - contents:
    - "2.3 Failed Set-Up Example\n   The third example shows the initiator connecting
      through two proxys,\n   the second proxy attempting to connect to the specified
      service and\n   finding the destination is not a BEEP server.  (Of course, specifying\n
      \  the telnet service can be expected to lead to this error.)  The same\n   would
      result if the destination did not support the TUNNEL profile.\n   initial             proxy1
      \               proxy2                final\n     --- xport connect -->\n    <----
      greeting ------>\n     --start TUNNEL [1]-->\n                          ---
      xport connect -->\n                         <----- greeting ----->\n                          --start
      TUNNEL [2]-->\n                                               ---- xport connect
      --->\n                                              <------- login: -------\n
      \                                              ----- xport close ---->\n                         <----
      <error> -------\n                          --- xport close ---->\n    <----
      <error> ------\n     --- xport close ---> [3]\n   Notes:\n   [1]  The TUNNEL
      element looks like this:\n        <tunnel fqdn='proxy2.example.com' port='604'>\n
      \         <tunnel fqdn='final.example.com' srv='_telnet._tcp'>\n            <tunnel/>\n
      \         </tunnel>\n        </tunnel>\n   [2]  The TUNNEL element looks like
      this:\n        <tunnel fqdn='final.example.com' srv='_telnet._tcp'>\n          <tunnel/>\n
      \       </tunnel>\n   [3]  This close is optional. \"Initial\" may also send
      another <tunnel>\n        element, attempting to contact a different server,
      for example.\n"
    title: 2.3 Failed Set-Up Example
  - contents:
    - "2.4 Non-BEEP Example\n   This example shows the initiator connecting through
      two proxys, the\n   second proxy attempting to connect to the specified service
      and\n   accepting that the destination is not a BEEP server.  The difference\n
      \  at the protocol level is two-fold: The \"initial\" machine does not\n   include
      the innermost \"tunnel\" element, and the final proxy\n   (\"proxy2\") therefore
      does not expect a BEEP greeting.\n   initial             proxy1                proxy2
      \               final\n     --- xport connect -->\n    <---- greeting ------>\n
      \    --start TUNNEL [1]-->\n                          --- xport connect -->\n
      \                        <----- greeting ----->\n                          --start
      TUNNEL [2]-->\n                                               ---- xport connect
      --->\n                                              <------- login: -------\n
      \                         <------ <ok> ------- [3]\n                          <-----
      login: ------ [4]\n    <------ <ok> --------- [3]\n    <----- login: --------
      [4] [5]\n   Notes:\n   [1]  The TUNNEL element looks like this:\n        <tunnel
      fqdn='proxy2.example.com' port='604'>\n          <tunnel fqdn='final.example.com'
      svc='_telnet._tcp'>\n          </tunnel>\n        </tunnel>\n        Note the
      lack of an innermost no-attribute <tunnel> element.\n   [2]  The TUNNEL element
      looks like this:\n          <tunnel fqdn='final.example.com' srv='_telnet._tcp'>\n
      \         </tunnel>\n        Note the lack of an innermost no-attribute <tunnel>
      element.\n   [3]  Each proxy starts transparently forwarding octets after this\n
      \       <ok>.\n   [4]  Each proxy forwards any data it received from the final
      host,\n        even if that data arrived before the <ok> was sent.\n   [5]  After
      receiving the \"ok\" message, the \"initial\" peer can expect\n        raw,
      non-BEEP data to be sent to and received from the \"final\"\n        machine.\n"
    title: 2.4 Non-BEEP Example
  - contents:
    - "2.5 Profile Example\n   This example shows the initiator connecting through
      two proxys.  The\n   initial machine knows there is a server offering the SEP2
      profile\n   somewhere beyond proxy1, but it need not know where.  Proxy1 has
      been\n   locally configured to know that all SEP2 servers are beyond proxy2.\n
      \  Proxy2 has been locally configured to chose \"final\" as the server of\n
      \  choice for SEP2 services.  Note that \"final\" does not necessarily\n   need
      to offer the requested profile in its initial greeting.\n   initial             proxy1
      \               proxy2                final\n     --- xport connect -->\n    <----
      greeting ------>\n     --start TUNNEL [1]-->\n                          -- xport
      connect --->\n                         <----- greeting ----->\n                          --start
      TUNNEL [2]-->\n                                               --- xport  connect
      --->\n                                              <------- greeting ----->\n
      \                                              ---start TUNNEL [3]--->\n                                              <--------
      ok ----------\n                         <------- ok --------- [4]\n    <-------
      ok --------- [5]\n    <-------------------------- greeting ---------------------------->\n
      \  Notes:\n   [1]  The TUNNEL element looks like this:\n          <tunnel profile=\"http://xml.resource/org/profiles/SEP2\"/>\n
      \       Note the lack of an innermost no-attribute <tunnel> element.\n   [2]
      \ Proxy1 maps this to\n          <tunnel fqdn=\"proxy2.example.com\" port=\"604\">\n
      \           <tunnel profile=\"http://xml.resource/org/profiles/SEP2\"/>\n          </tunnel>\n
      \       based on local configuration, then processes the new\n        element,
      stripping off the outer element and routing\n          <tunnel profile=\"http://xml.resource/org/profiles/SEP2\"/>\n
      \       to proxy2.\n   [3]  Proxy2 receives the TUNNEL element with simply the
      SEP2\n        URI specified. Local provisioning maps this to\n          <tunnel
      fqdn='final.example.com' srv='_beep._tcp'>\n            <tunnel/>\n          </tunnel>\n
      \       Note the presence of an innermost no-attribute <tunnel> element.\n        Proxy2
      then strips the outermost element, looking up the\n        appropriate address
      and port, and forwards the <tunnel/>\n        element to the final machine.\n
      \  [4]  Proxy2 starts transparently forwarding octets after this <ok>.\n   [5]
      \ Proxy1 starts transparently forwarding octets after this <ok>.\n"
    title: 2.5 Profile Example
  - contents:
    - "2.6 Endpoint Example\n   This example shows the initiator connecting through
      two proxys.  The\n   initial machine knows there is a server known as \"operator
      console\"\n   somewhere beyond proxy1, but it needs not know where.  Proxy1
      has\n   been locally configured to know that \"operator console\" is beyond\n
      \  proxy2.  Proxy2 has been locally configured to use \"final\" as\n   \"operator
      console\".  This example is almost identical to the previous\n   example, except
      that \"endpoint\" is intended to route to a particular\n   server, while \"profile\"
      is intended to route to a particular service.\n   Otherwise, these two attributes
      are very similar.\n   initial             proxy1                proxy2                final\n
      \    --- xport connect -->\n    <---- greeting ------>\n     --start TUNNEL
      [1]-->\n                          -- xport connect --->\n                         <-----
      greeting ----->\n                          --start TUNNEL [2]-->\n                                               ---
      xport  connect --->\n                                              <-------
      greeting ----->\n                                               ---start TUNNEL
      [3]--->\n                                              <-------- ok ----------\n
      \                        <------- ok --------- [4]\n    <------- ok ---------
      [5]\n    <-------------------------- greeting ---------------------------->\n
      \  Notes:\n   [1]  The TUNNEL element looks like this:\n          <tunnel endpoint=\"operator
      console\">\n          </tunnel>\n        Note the lack of an innermost no-attribute
      <tunnel> element.\n   [2]  Proxy1 maps this to\n          <tunnel fqdn=\"proxy2.example.com\"
      port=\"604\">\n            <tunnel endpoint=\"operator console\">\n            </tunnel>\n
      \         </tunnel>\n        based on local configuration, then processes the
      new\n        element, stripping off the outer element and routing\n          <tunnel
      endpoint=\"operator console\">\n          </tunnel>\n        to proxy2.\n   [3]
      \ Proxy2 receives the TUNNEL element with simply the endpoint\n        specified.
      Local provisioning maps this to\n          <tunnel fqdn='final.example.com'
      srv='_beep._tcp'>\n            <tunnel/>\n          </tunnel>\n        Note
      the presence of an innermost no-attribute <tunnel> element.\n        Proxy2
      then strips the outermost element, looking up the\n        appropriate address
      and port, and forwards the <tunnel/>\n        element to the final machine.\n
      \  [4]  Proxy2 starts transparently forwarding octets after this <ok>.\n   [5]
      \ Proxy1 starts transparently forwarding octets after this <ok>.\n"
    title: 2.6 Endpoint Example
  title: 2. Examples
- contents:
  - "3. Message Syntax\n   The only element defined in this profile is the \"tunnel\"
    element.  It\n   is described in the following DTD, with additional limitations
    as\n   described afterwards.\n   <!--\n     DTD for the TUNNEL Profile, as of
    2001-02-03\n     Refer to this DTD as:\n        <!ENTITY % TUNNEL PUBLIC \"-//IETF//DTD
    TUNNEL//EN\" \"\">\n       %TUNNEL;\n     -->\n   <!--\n     TUNNEL messages\n
    \       role           MSG                 RPY\n       ======          ===                 ===\n
    \      I or L          TUNNEL              +: ok\n                                           -:
    error\n     -->\n   <!ELEMENT tunnel      (tunnel?)>\n   <!ATTLIST tunnel\n             fqdn
    \        CDATA    #IMPLIED\n             ip4          CDATA    #IMPLIED\n             ip6
    \         CDATA    #IMPLIED\n             port         CDATA    #IMPLIED\n             srv
    \         CDATA    #IMPLIED\n             profile      CDATA    #IMPLIED\n             endpoint
    \    CDATA    #IMPLIED\n             >\n   The format of the \"fqdn\" attribute
    is a fully qualified domain name,\n   such as \"proxy.example.com\".  The format
    of the \"ip4\" attribute is\n   four sets of decimal numbers separated by periods,
    such as\n   \"10.23.34.45\".  The format of the \"ip6\" attribute is as specified
    in\n   RFC2373 [4].  The format of the \"port\" attribute is a decimal number\n
    \  between one and 65535, inclusive.  The format of the \"srv\" attribute\n   is
    a pair of identifiers each starting with an underline and\n   separated by a period,
    such as \"_sep._tcp\".  The format of the\n   \"profile\" attribute is a URI [5].
    \ The format of the \"endpoint\"\n   attribute is any string that may appear as
    an attribute value.\n   The only allowable combinations of attributes are as follows:\n
    \  o  fqdn + port;\n   o  fqdn + srv;\n   o  fqdn + srv + port;\n   o  ip4  +
    port;\n   o  ip6  + port;\n   o  profile, but only on the innermost element;\n
    \  o  endpoint, but only on the innermost element; or,\n   o  no attributes, but
    only on the innermost element.\n"
  title: 3. Message Syntax
- contents:
  - "4. Message Semantics\n   When a TUNNEL channel is started, the listener expects
    a \"tunnel\"\n   element from the initiator, either in the \"start\" element on
    channel\n   zero or on the new channel created.  As usual, if it arrives on\n
    \  channel zero, it is processed before the reply is returned.\n   In either case,
    the outermost \"tunnel\" element is examined.  If it\n   has no attributes, then
    this peer is hosting the BEEP service that\n   the initiator wishes to use.  In
    this case, the listener performs a\n   tuning reset:\n   o  All channels, including
    channel zero, are implicitly closed.\n   o  Any previously cached information
    about the BEEP session is\n      discarded.\n   o  A new plaintext greeting is
    sent.\n   If the outermost element has a \"port\" attribute and an \"fqdn\"\n
    \  attribute but no \"srv\" attribute, then \"fqdn\" is looked up as an A\n   record
    via DNS for translation to an IP number.  An \"ip4\" attribute\n   is interpreted
    as the dotted-quad representation of an IPv4 address.\n   An \"ip6\" attribute
    is interpreted as a text representation of an IPv6\n   address.  In each of these
    cases, a transport connection is\n   established to the so-identified server.
    \ If the outermost element\n   has a \"srv\" attribute, the concatenation of the
    \"srv\" attribute and\n   the \"fqdn\" attribute (with a period between) is looked
    up in the DNS\n   for a SRV record [6], and the appropriate server is contacted;
    if\n   that lookup fails and a \"port\" attribute is present, the connection\n
    \  is attempted as if the \"srv\" attribute were not specified.\n   Alternately,
    if the outermost element has a \"profile\" attribute, then\n   it must have no
    nested elements.  The proxy processing this element\n   is responsible for determining
    the appropriate routing to reach a\n   peer serving the BEEP profile indicated
    by the URI in the attribute's\n   value.  Rather than source routing, this provides
    a hop-by-hop\n   routing mechanism to a desired service.\n   Similarly, if the
    outermost element has an \"endpoint\" attribute, then\n   it must have no nested
    elements.  The proxy processing this element\n   is responsible for determining
    the appropriate routing to reach a\n   peer indicated by the value of the \"endpoint\"
    attribute.  Rather than\n   source routing, this provides a hop-by-hop routing
    mechanism to a\n   desired machine.  There are no restrictions on how machines
    are\n   identified.\n   Then, if the outermost element has no nested elements,
    but it does\n   have attributes other than \"profile\" or \"endpoint\", then this
    peer is\n   the final BEEP hop.  (This corresponds to \"proxy2\" in the \"Non-BEEP\"\n
    \  example above.)  In this case, as soon as the final underlying\n   transport
    connection is established, an \"ok\" element is returned over\n   the listening
    session, and the tunneling of data starts.  No BEEP\n   greeting (or indeed any
    data) from the final hop is expected.\n   Starting with the octet following the
    END(CR)(LF) trailer of the\n   frame with the completion flag set (more=\".\")
    of the RPY carrying the\n   \"ok\" element, the proxy begins copying octets directly
    and without\n   any interpretation between the two underlying transport connections.\n
    \  If the identified server cannot be contacted, an \"error\" element is\n   returned
    over the listening channel and any connection established as\n   an initiator
    is closed.  If there is a nested \"tunnel\" element, and\n   the server that has
    been contacted does not offer a BEEP greeting, or\n   the BEEP greeting offered
    does not include the TUNNEL profile, then\n   this too is treated as an error:
    the initiating transport connection\n   is closed, and an error is returned.\n
    \  If there is a nested \"tunnel\" element, and the identified server is\n   contacted
    and offers a BEEP greeting including the TUNNEL profile,\n   then the outermost
    element from the \"tunnel\" element received is\n   stripped off, a new TUNNEL
    channel is started on the initiating\n   session, and the stripped (inner) element
    is sent to start the next\n   hop.  In this case, the peer is considered a \"proxy\"
    (meaning that\n   the next paragraph is applicable).\n   Once the proxy has passed
    the \"tunnel\" element on the TUNNEL channel,\n   it awaits an \"error\" or an
    \"ok\" element in response.  If it receives\n   an \"error\" element, it closes
    the initiated session and its\n   underlying transport connection.  It then passes
    the \"error\" element\n   unchanged back on the listening session.  If, on the
    other hand, it\n   receives an \"ok\" element, it passes the \"ok\" element back
    on the\n   listening session.  Starting with the octet following the END(CR)(LF)\n
    \  trailer of the frame with the completion flag set (more=\".\") of the\n   RPY
    carrying the \"ok\" element, the proxy begins copying octets\n   directly and
    without any interpretation between the two underlying\n   transport connections.\n"
  title: 4. Message Semantics
- contents:
  - "5. Provisioning\n   While the BEEP Framework [2] is used, the attributes described
    are\n   sufficient for the TCP mapping [3] of BEEP.  The attributes on the\n   \"tunnel\"
    element may need to be extended to handle other transport\n   layers.\n   In a
    mapping where multiple underlying transport connections are\n   used, once the
    \"ok\" element is passed, all channels are closed,\n   including channel zero.
    \ Thus, only the underlying transport\n   connection initially established remains,
    and all other underlying\n   transport connections for the session should be closed
    as well.\n   If a transport security layer (such as TLS) has been negotiated over\n
    \  the session, the semantics for the TUNNEL profile are ill-defined.\n   The
    TUNNEL profile MUST NOT be advertised in any greetings after\n   transport security
    has been negotiated.\n   An SRV identifier of \"_tunnel\" is reserved by IANA
    for use with this\n   profile.  Hence, the \"srv\" attribute \"_tunnel._tcp\"
    MAY be used as a\n   default for finding the appropriate address for tunneling
    into a\n   particular domain.\n   System port number 604 has been allocated by
    the IANA for TUNNEL.\n"
  title: 5. Provisioning
- contents:
  - "6. Reply Codes\n   This section lists the three-digit error codes the TUNNEL
    profile may\n   generate.\n   code   meaning\n   ====   =======\n    421   Service
    not available\n          (E.g., the proxy does not have sufficient resources.)\n
    \   450   Requested action not taken\n          (E.g., DNS lookup failed or connection
    could not\n          be established. See too 550.)\n    500   General syntax error
    (E.g., poorly-formed XML)\n    501   Syntax error in parameters\n          (E.g.,
    non-valid XML, letters in \"ip4\" attribute, etc.)\n    504   Parameter not implemented\n
    \   530   Authentication required\n    534   Authentication mechanism insufficient\n
    \         (E.g., too weak, sequence exhausted, etc.)\n    537   Action not authorized
    for user\n    538   Encryption already enabled\n          (E.g., TLS already negotiated,
    or a SASL that\n          provides encryption already negotiated.)\n    550   Requested
    action not taken\n          (E.g., next hop could be contacted, but\n          malformed
    greeting or no TUNNEL profile advertised.)\n    553   Parameter invalid\n    554
    \  Transaction failed (E.g., policy violation)\n   Note that the 450 error code
    is appropriate when the destination\n   machine could not be contacted, while
    the 550 error code is\n   appropriate when the destination machine could be contacted
    but the\n   next phase of the protocol could not be negotiated.  It is suggested\n
    \  that the beginning of any reply from the destination machine be\n   included
    as part of the CDATA text of the error element, for\n   debugging purposes.\n"
  title: 6. Reply Codes
- contents:
  - "7. Security Considerations\n   The TUNNEL profile is a profile of BEEP.  In BEEP,
    transport\n   security, user authentication, and data exchange are orthogonal.\n
    \  Refer to Section 8 of [2] for a discussion of this.\n   However, the intent
    of the TUNNEL profile is to allow bidirectional\n   contact between two machines
    normally separated by a firewall.  Since\n   TUNNEL allows this connection between
    BEEP peers, and BEEP peers can\n   offer a range of services with appropriate
    greetings, the TUNNEL\n   profile should be configured with care.  It is reasonable
    to strictly\n   limit the hosts and services that a proxy is allowed to contact.
    \ It\n   is also reasonable to limit the use of the TUNNEL profile to\n   authorized
    users, as identified by a SASL profile.\n   Negotiation of a TLS profile in an
    end-to-end manner after a TUNNEL\n   has been established will prevent intermediate
    proxies from observing\n   or modifying the cleartext information exchanged, but
    only if TLS\n   certificates are properly configured during the negotiation.  The\n
    \  proxy could mount a \"man in the middle\" attack if public key\n   infrastructure
    is not deployed.\n   In some environments, it is undesirable to expose the names
    of\n   machines on one side of a firewall in unencrypted messages on the\n   other
    side of that firewall.  In this case, source routing (using the\n   \"fqdn\",
    \"ip4\", \"ip6\", \"port\" and \"srv\" attributes) can route a\n   connection
    to the firewall proxy, with an innermost \"profile\" or\n   \"endpoint\" attribute
    which the firewall proxy understands.  Local\n   provisioning can allow a  proxy
    to translate a particular \"profile\"\n   or \"endpoint\" element into a new source
    route to reach the desired\n   service.  This can prevents two attacks:\n   o
    \ Attackers sniffing packets on one side of the firewall cannot see\n      IP
    addresses or FQDNs of machines on the other side of the\n      firewall; and,\n
    \  o  Attackers cannot exhaustively attempt to connect to many FQDNs or\n      IP
    addresses via source routing and use the error messages as an\n      indication
    of whether the queried machine exists.  For this attack\n      to be prevented,
    the proxy must allow only \"profile\" or \"endpoint\"\n      connections, always
    refusing to even attempt source-routed\n      connections.  This latter attack
    can also be thwarted by requiring\n      a SASL identification before allowing
    a TUNNEL channel to be\n      started, but this can have higher overhead.\n"
  title: 7. Security Considerations
- contents:
  - "8. Normative References\n   [1]  Bradner, S., \"Key words for use in RFCs to
    Indicate Requirement\n        Levels\", BCP 14, RFC 2119, March 1997.\n   [2]
    \ Rose, M., \"The Blocks Extensible Exchange Protocol Core\", RFC\n        3080,
    March 2001.\n   [3]  Rose, M., \"Mapping the BEEP Core onto TCP\", RFC 3081, March\n
    \       2001.\n   [4]  Hinden, R. and S. Deering, \"IP Version 6 Addressing\n
    \       Architecture\", RFC 2373, July 1998.\n   [5]  Berners-Lee, T., Fielding,
    R. and L. Masinter, \"Uniform Resource\n        Identifiers (URI): Generic Syntax\",
    RFC 2396, August 1998.\n   [6]  Gulbrandsen, A., Vixie, P. and L. Esibov, \"A
    DNS RR for\n        specifying the location of services (DNS SRV)\", RFC 2782,\n
    \       February 2000.\n"
  title: 8. Normative References
- contents:
  - 'Appendix A. IANA Considerations

    '
  - contents:
    - "A.1 Registration: BEEP Profile\n   The IANA has registered the profiles specified
      in this section and\n   has selected an IANA-specific URI: \"http://iana.org/beep/TUNNEL\".\n
      \  Profile identification: http://iana.org/beep/TUNNEL\n   Message exchanged
      during channel creation: \"tunnel\"\n   Messages starting one-to-one exchanges:
      \"tunnel\"\n   Messages in positive replies: \"ok\"\n   Messages in negative
      replies: \"error\"\n   Messages in one-to-many exchanges: None.\n   Message
      syntax: See Section 3 of this document.\n   Message semantics: See Section 4
      of this document.\n   Contact information: See the Author's Address appendix
      of this\n   document.\n   Any extensions to this protocol MUST be documented
      in a Standards\n   track RFC.\n"
    title: 'A.1 Registration: BEEP Profile'
  - contents:
    - "A.2 Registration: The System (Well-Known) TCP port number for TUNNEL\n   A
      single well-known port, 604, is allocated by the IANA to the TUNNEL\n   profile.\n
      \  Protocol Number: TCP\n   Message Formats, Types, Opcodes, and Sequences:
      See Section 3.\n   Functions: See Section 4.\n   Use of Broadcast/Multicast:
      none\n   Proposed Name: TUNNEL Profile\n   Short name: tunnel\n   Contact Information:
      See the \"Authors' Addresses\" section of this\n   memo\n"
    title: 'A.2 Registration: The System (Well-Known) TCP port number for TUNNEL'
  title: Appendix A. IANA Considerations
- contents:
  - "Appendix B. Acknowledgements\n   The author gratefully acknowledges the contributions
    of  Marshall\n   Rose, Greg Matthews, and Ben Feinstein.\n   Inspiration for this
    profile comes from the Intrusion Detection\n   Working Group of the IETF.\n"
  title: Appendix B. Acknowledgements
- contents:
  - "Author's Address\n   Darren New\n   5390 Caminito Exquisito\n   San Diego, CA
    \ 92130\n   US\n   Phone: +1 858 350 9733\n   EMail: dnew@san.rr.com\n"
  title: Author's Address
- contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2003).  All
    Rights Reserved.\n   This document and translations of it may be copied and furnished
    to\n   others, and derivative works that comment on or otherwise explain it\n
    \  or assist in its implementation may be prepared, copied, published\n   and
    distributed, in whole or in part, without restriction of any\n   kind, provided
    that the above copyright notice and this paragraph are\n   included on all such
    copies and derivative works.  However, this\n   document itself may not be modified
    in any way, such as by removing\n   the copyright notice or references to the
    Internet Society or other\n   Internet organizations, except as needed for the
    purpose of\n   developing Internet standards in which case the procedures for\n
    \  copyrights defined in the Internet Standards process must be\n   followed,
    or as required to translate it into languages other than\n   English.\n   The
    limited permissions granted above are perpetual and will not be\n   revoked by
    the Internet Society or its successors or assigns.\n   This document and the information
    contained herein is provided on an\n   \"AS IS\" basis and THE INTERNET SOCIETY
    AND THE INTERNET ENGINEERING\n   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS
    OR IMPLIED, INCLUDING\n   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
    INFORMATION\n   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES
    OF\n   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.\n"
  title: Full Copyright Statement
- contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided
    by the\n   Internet Society.\n"
  title: Acknowledgement
