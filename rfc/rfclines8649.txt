Abstract This document specifies the Hash Of Root Key certificate extension.
This certificate extension is carried in the self signed certificate for a trust anchor, which is often called a Root Certification Authority (CA) certificate.
This certificate extension unambiguously identifies the next public key that will be used at some point in the future as the next Root CA certificate, eventually replacing the current one.
This document specifies the Hash Of Root Key X.509 version 3 certificate extension.
The extension is an optional addition to the Internet X.509 Public Key Infrastructure Certificate and Certificate Revocation List (CRL) Profile [RFC5280].
The certificate extension facilitates the orderly transition from one Root Certification Authority (CA)
public key to the next.
It does so by publishing the hash value of the next generation
public key in the current self  signed certificate.
This hash value is a commitment to a particular public key in the next generation self signed certificate.
This commitment allows a relying party to unambiguously recognize the next generation self signed certificate when it becomes available, install the new self signed certificate in the trust anchor store, and eventually remove the previous one from the trust anchor store.
A Root CA certificate MAY include the Hash Of Root Key certificate extension to provide the hash value of the next public key that will be used by the Root CA.
The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and "OPTIONAL" in this document are to be interpreted as described in BCP 14
when, and only when, they appear in all capitals, as shown here.
ASN.1 Certificates [RFC5280] use ASN.1 [X680]; Distinguished Encoding Rules (DER)
[X690] are REQUIRED for certificate signing and validation.
Overview Before the initial deployment of the Root CA
, the following are generated: R1   The initial Root key pair R2   The second generation Root key pair H2   Thumbprint (hash) of the public key of R2 C1
Self signed certificate for R1, which also contains H2 C1 is a self signed certificate, and it contains H2 within the HashOfRootKey extension.
C1 is distributed as part of the initial system deployment.
The HashOfRootKey certificate extension is described in Section 3.
When the time comes to replace the initial Root CA certificate, R1, the following are generated: R3
The third generation Root key pair H3   Thumbprint (hash)
the public key of R3 C2
Self signed certificate for R2, which contains H3
This is an iterative process.
That is, R4 and H4 are generated when it is time for C3 to replace C2, and so on.
The successor to the Root CA self signed certificate can be delivered by any means.
Whenever a new Root CA self signed certificate is received, the recipient is able to verify that the potential Root CA certificate links back to a previously authenticated Root CA certificate with the HashOfRootKey certificate extension.
That is, the recipient verifies the signature on the self signed certificate and verifies that the hash of the DER encoded SubjectPublicKeyInfo from the potential Root CA certificate matches the value from the HashOfRootKey certificate extension of the current Root CA certificate.
Checking the self signed certificate signature ensures that the certificate contains the subject name, public key algorithm identifier, and public key algorithm parameters intended by the key owner; these are important inputs to certification path validation as defined in Section 6 of [RFC5280].
Checking the hash of the SubjectPublicKeyInfo ensures that the certificate contains the intended public key.
If either check fails, then the potential Root CA certificate is not a valid replacement, and the recipient continues to use the current Root CA certificate.
If both checks succeed, then the recipient adds the potential Root CA certificate to the trust anchor store.
As discussed in Section 5, the recipient can remove the current Root CA certificate immediately in some situations.
In other situations, the recipient waits an appropriate amount of time to ensure that existing certification paths continue to validate.
Hash Of Root Key Certificate Extension
The HashOfRootKey certificate extension MUST NOT be critical.
OBJECT IDENTIFIER { 1 3 6 1 4 1 51483 2 1 }
The definitions of EXTENSION and HashAlgorithm can be found in [RFC5912].
The hashAlg indicates the one way hash algorithm that was used to compute the hash value.
The hashValue contains the hash value computed from the next  generation public key.
The public key is the DER encoded SubjectPublicKeyInfo as defined in [RFC5280].
This document has no IANA actions.
Operational Considerations Guidance on the transition from one root key to another is available in Section 4.4 of [RFC4210].
Of course, a root key is also known as a trust anchor.
In particular, the oldWithNew and newWithOld advice ensures that relying parties are able to validate certificates issued under the current Root CA certificate and the next generation Root CA certificate throughout the transition.
The notAfter field in the oldWithNew certificate MUST cover the validity period of all unexpired certificates issued under the old Root CA private key.
Further, this advice SHOULD be followed by Root CAs to avoid the need for all relying parties to make the transition at the same time.
After issuing the newWithOld certificate, the Root CA MUST stop using the old private key to sign certificates.
Some enterprise and application specific environments offer a directory service or certificate repository to make certificate and CRLs available to relying parties.
Section 3 in [RFC5280] describes a certificate repository.
When a certificate repository is available, the oldWithNew and newWithOld certificates SHOULD be published before the successor to the current Root CA self signed certificate is released.
Recipients that are able to obtain the oldWithNew certificate SHOULD immediately remove the old Root CA self signed certificate from the trust anchor store.
In environments without such a directory service or repository, like the Web PKI, recipients need a way to obtain the oldWithNew and newWithOld certificates.
The Root CA SHOULD include the subject information access extension [RFC5280] with the accessMethod set to id ad caRepository and the assessLocation set to the HTTP URL that can be used to fetch a DER encoded "certs only" (simple PKI response) message as specified in [RFC5272] in all of their self signed certificates.
The Root CA SHOULD publish the "certs only" message with the oldWithNew certificate and the newWithOld certificate before the subsequent Root CA self signed certificate is released.
The "certs only" message format allows certificates to be added and removed from the bag of certificates over time, so the same HTTP URL can be used throughout the lifetime of the Root CA.
In environments without such a directory service or repository, recipients SHOULD keep both the old and replacement Root CA self  signed certificates in the trust anchor store for some amount of time to ensure that all end entity certificates can be validated until they expire.
The recipient MAY keep the old Root CA self signed certificate until all of the certificates in the local cache that are subordinate to it have expired.
Certification path construction is more complex when the trust anchor store contains multiple self signed certificates with the same distinguished name.
For this reason, the replacement Root CA self  signed certificate SHOULD contain a different distinguished name than the one it is replacing.
One approach is to include a number as part of the name that is incremented with each generation, such as "Example CA", "Example CA G2", "Example CA G3", and so on.
Changing names from one generation to another can lead to confusion when reviewing the history of a trust anchor store.
To assist with such review, a recipient MAY create an audit entry to capture the old and replacement self signed certificates.
The Root CA must securely back up the yet to be deployed key pair.
If the Root CA stores the key pair in a hardware security module and that module fails, the Root CA remains committed to the key pair that is no longer available.
This leaves the Root CA with no alternative but to deploy a new self signed certificate that contains a newly generated key pair in the same manner as the initial self signed certificate, thus losing the benefits of the Hash Of Root Key certificate extension altogether.
The security considerations from [RFC5280] apply, especially the discussion of self issued certificates.
The Hash Of Root Key certificate extension facilitates the orderly transition from one Root CA public key to the next by publishing the hash value of the next generation public key in the current certificate.
This allows a relying party to unambiguously recognize the next generation public key when it becomes available; however, the full public key is not disclosed until the Root CA releases the next generation certificate.
In this way, attackers cannot begin to analyze the public key before the next generation Root CA self signed certificate is released.
The Root CA needs to ensure that the public key in the next  generation certificate is as strong or stronger than the key that it is replacing.
Of course, a significant advance in cryptoanalytic capability can break the yet to be deployed key pair.
Such advances are rare and difficult to predict.
If such an advance occurs, the Root CA remains committed to the now broken key.
This leaves the Root CA with no alternative but to deploy a new self signed certificate that contains a newly generated key pair, most likely using a different signature algorithm, in the same manner as the initial self signed certificate, thus losing the benefits of the Hash Of Root Key certificate extension altogether.
The Root CA needs to employ a hash function that is resistant to preimage attacks [RFC4270].
A first preimage attack against the hash function would allow an attacker to find another input that results in the hash value of the next generation
public key that was published in the current certificate.
For the attack to be successful, the input would have to be a valid SubjectPublicKeyInfo that contains a public key that corresponds to a private key known to the attacker.
A second preimage attack becomes possible once the Root CA releases the next generation public key, which makes the input to the hash function available to the attacker and everyone else.
Again, the attacker needs to find a valid SubjectPublicKeyInfo that contains the public key that corresponds to a private key known to the attacker.
If the employed hash function is broken after the Root CA publishes the self signed certificate with the HashOfRootKey certificate extension, an attacker would be able to trick the recipient into installing the incorrect next generation certificate in the trust anchor store.
If an early release of the next generation public key occurs and the Root CA is concerned that attackers were given too much lead time to analyze that public key, then the Root CA can transition to a freshly generated key pair by rapidly performing two transitions.
After the first transition, the Root CA is using the key pair that suffered the early release, and that transition causes the Root CA to generate the subsequent Root key pair.
The second transition occurs when the Root CA is confident that the population of relying parties has completed the first transition, and it takes the Root CA to the freshly generated key pair.
Of course, the second transition also causes the Root CA to generate another key pair that is reserved for future use.
Queries for the CRLs associated with certificates that are subordinate to the self signed certificate can give some indication of the number of relying parties that are still actively using the self signed certificates.
The following ASN.1 module provides the complete definition of the HashOfRootKey certificate extension.
<CODE BEGINS> HashedRootKeyCertExtn { 1 3 6 1 4 1 51483 0 1
} DEFINITIONS IMPLICIT TAGS ::
EXPORTS All IMPORTS HashAlgorithm FROM PKIX1 PSS
OAEP Algorithms 2009    RFC 5912 {
id mod pkix1 rsa pkalgs 02(54)
PKIX CommonTypes 2009    RFC 5912 { iso(1) identified
{ 1 3 6 1 4 1 51483 2 1 } END <CODE ENDS>
