- title: __initial_text__
  contents:
  - '   Decreasing Access Time to Root Servers by Running One on Loopback

    '
- title: Abstract
  contents:
  - "Abstract\n   Some DNS recursive resolvers have longer-than-desired round-trip\n\
    \   times to the closest DNS root server.  Some DNS recursive resolver\n   operators\
    \ want to prevent snooping of requests sent to DNS root\n   servers by third parties.\
    \  Such resolvers can greatly decrease the\n   round-trip time and prevent observation\
    \ of requests by running a copy\n   of the full root zone on a loopback address\
    \ (such as 127.0.0.1).\n   This document shows how to start and maintain such\
    \ a copy of the root\n   zone that does not pose a threat to other users of the\
    \ DNS, at the\n   cost of adding some operational fragility for the operator.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document is not an Internet Standards Track specification;\
    \ it is\n   published for informational purposes.\n   This document is a product\
    \ of the Internet Engineering Task Force\n   (IETF).  It represents the consensus\
    \ of the IETF community.  It has\n   received public review and has been approved\
    \ for publication by the\n   Internet Engineering Steering Group (IESG).  Not\
    \ all documents\n   approved by the IESG are a candidate for any level of Internet\n\
    \   Standard; see Section 2 of RFC 5741.\n   Information about the current status\
    \ of this document, any errata,\n   and how to provide feedback on it may be obtained\
    \ at\n   http://www.rfc-editor.org/info/rfc7706.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2015 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the Simplified BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction  . . . . . . . . . . . . . . . . . . .\
    \ . . . . .   3\n     1.1.  Requirements Notation . . . . . . . . . . . . . .\
    \ . . . .   4\n   2.  Requirements  . . . . . . . . . . . . . . . . . . . . .\
    \ . . .   4\n   3.  Operation of the Root Zone on the Loopback Address  . . .\
    \ . .   5\n   4.  Using the Root Zone Server on the Loopback Address  . . . .\
    \ .   6\n   5.  Security Considerations . . . . . . . . . . . . . . . . . . .\
    \   6\n   6.  References  . . . . . . . . . . . . . . . . . . . . . . . . .  \
    \ 6\n     6.1.  Normative References  . . . . . . . . . . . . . . . . . .   6\n\
    \     6.2.  Informative References  . . . . . . . . . . . . . . . . .   7\n  \
    \ Appendix A.  Current Sources of the Root Zone . . . . . . . . . .   8\n   Appendix\
    \ B.  Example Configurations of Common Implementations . .   8\n     B.1.  Example\
    \ Configuration: BIND 9.9 . . . . . . . . . . . . .   9\n     B.2.  Example Configuration:\
    \ Unbound 1.4 and NSD 4  . . . . . .  10\n     B.3.  Example Configuration: Microsoft\
    \ Windows Server 2012  . .  11\n   Acknowledgements  . . . . . . . . . . . . .\
    \ . . . . . . . . . . .  12\n   Authors' Addresses  . . . . . . . . . . . . .\
    \ . . . . . . . . . .  12\n"
- title: 1.  Introduction
  contents:
  - "1.  Introduction\n   DNS recursive resolvers have to provide answers to all queries\
    \ from\n   their customers, even those for domain names that do not exist.  For\n\
    \   each queried name that has a top-level domain (TLD) that is not in\n   the\
    \ recursive resolver's cache, the resolver must send a query to a\n   root server\
    \ to get the information for that TLD, or to find out that\n   the TLD does not\
    \ exist.  Typically, the vast majority of queries\n   going to the root are for\
    \ names that do not exist in the root zone,\n   and the negative answers are cached\
    \ for a much shorter period of\n   time.  A slow path between the recursive resolver\
    \ and the closest\n   root server has a negative effect on the resolver's customers.\n\
    \   Recursive resolvers currently send queries for all TLDs that are not\n   in\
    \ their caches to root servers, even though most of those queries\n   get answers\
    \ that are referrals to other servers.  Malicious third\n   parties might be able\
    \ to observe that traffic on the network between\n   the recursive resolver and\
    \ one or more of the DNS roots.\n   This document describes a method for the operator\
    \ of a recursive\n   resolver to greatly speed these queries and to hide them\
    \ from\n   outsiders.  The basic idea is to create an up-to-date root zone\n \
    \  server on a loopback address on the same host as the recursive\n   server,\
    \ and use that server when the recursive resolver looks up root\n   information.\
    \  The recursive resolver validates all responses from the\n   root server on\
    \ the loopback address, just as it would all responses\n   from a remote root\
    \ server.\n   The primary goals of this design are to provide faster negative\n\
    \   responses to stub resolver queries that contain junk queries, and to\n   prevent\
    \ queries and responses from being visible on the network.\n   This design will\
    \ probably have little effect on getting faster\n   positive responses to stub\
    \ resolver for good queries on TLDs, because\n   the data for those zones is usually\
    \ long-lived and already in the\n   cache of the recursive resolver; thus, getting\
    \ faster positive\n   responses is a non-goal of this design.\n   This design\
    \ explicitly only allows the new root zone server to be run\n   on a loopback\
    \ address, in order to prevent the server from serving\n   authoritative answers\
    \ to any system other than the recursive\n   resolver.\n   It is important to\
    \ note that the design being described here is not\n   considered a \"best practice\"\
    .  In fact, many people feel that it is\n   an excessively risky practice because\
    \ it introduces a new operational\n   piece to local DNS operations where there\
    \ was not one before.  The\n   advantages listed above do not come free: if this\
    \ new system does not\n   work correctly, users can get bad data, or the entire\
    \ recursive\n   resolution system might fail in ways that are hard to diagnose.\n\
    \   This design requires the addition of authoritative name server\n   software\
    \ running on the same machine as the recursive resolver.\n   Thus, recursive resolver\
    \ software such as BIND will not need to add\n   much new functionality, but recursive\
    \ resolver software such as\n   Unbound will need to be able to talk to an authoritative\
    \ server (such\n   as NSD) running on the same host.\n   Because of the significant\
    \ operational risks described in this\n   document, distributions of recursive\
    \ DNS servers MUST NOT include\n   configuration for the design described here.\
    \  It is acceptable to\n   point to this document, but not to indicate that this\
    \ configuration\n   is something that should be considered without reading the\
    \ entire\n   document.\n   A different approach to solving the problems discussed\
    \ in this\n   document is described in [AggressiveNSEC].\n"
- title: 1.1.  Requirements Notation
  contents:
  - "1.1.  Requirements Notation\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\"\
    , \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"\
    MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC2119].\n"
- title: 2.  Requirements
  contents:
  - "2.  Requirements\n   In order to implement the mechanism described in this document:\n\
    \   o  The system MUST be able to validate a zone with DNSSEC [RFC4033].\n   o\
    \  The system MUST have an up-to-date copy of the DNS root key.\n   o  The system\
    \ MUST be able to retrieve a copy of the entire root zone\n      (including all\
    \ DNSSEC-related records).\n   o  The system MUST be able to run an authoritative\
    \ server on one of\n      the IPv4 loopback addresses (that is, an address in\
    \ the range\n      127/8 for IPv4 or ::1 in IPv6).\n   A corollary of the above\
    \ list is that authoritative data in the root\n   zone used on the local authoritative\
    \ server MUST be identical to the\n   same data in the root zone for the DNS.\
    \  It is possible to change the\n   unsigned data (the glue records) in the copy\
    \ of the root zone, but\n   such changes could cause problems for the recursive\
    \ server that\n   accesses the local root zone, and therefore any changes to the\
    \ glue\n   records SHOULD NOT be made.\n"
- title: 3.  Operation of the Root Zone on the Loopback Address
  contents:
  - "3.  Operation of the Root Zone on the Loopback Address\n   The operation of an\
    \ authoritative server for the root in the system\n   described here can be done\
    \ separately from the operation of the\n   recursive resolver.\n   The steps to\
    \ set up the root zone are:\n   1.  Retrieve a copy of the root zone.  (See Appendix\
    \ A for some\n       current locations of sources.)\n   2.  Start the authoritative\
    \ server with the root zone on a loopback\n       address that is not in use.\
    \  For IPv4, this would typically be\n       127.0.0.1, but if that address is\
    \ in use, any address in 127/8 is\n       acceptable.  For IPv6, this would be\
    \ ::1.\n   The contents of the root zone MUST be refreshed using the timers from\n\
    \   the SOA record in the root zone, as described in [RFC1035].  This\n   inherently\
    \ means that the contents of the local root zone will likely\n   be a little behind\
    \ those of the global root servers because those\n   servers are updated when\
    \ triggered by NOTIFY messages.  If the\n   contents of the zone cannot be refreshed\
    \ before the expire time, the\n   server MUST return a SERVFAIL error response\
    \ for all queries until\n   the zone can be successfully be set up again.\n  \
    \ In the event that refreshing the contents of the root zone fails, the\n   results\
    \ can be disastrous.  For example, sometimes all the NS records\n   for a TLD\
    \ are changed in a short period of time (such as 2 days); if\n   the refreshing\
    \ of the local root zone is broken during that time, the\n   recursive resolver\
    \ will have bad data for the entire TLD zone.\n   An administrator using the procedure\
    \ in this document SHOULD have an\n   automated method to check that the contents\
    \ of the local root zone\n   are being refreshed.  One way to do this is to have\
    \ a separate\n   process that periodically checks the SOA of the root zone from\
    \ the\n   local root zone and makes sure that it is changing.  At the time that\n\
    \   this document is published, the SOA for the root zone is the digital\n   representation\
    \ of the current date with a two-digit counter appended,\n   and the SOA is changed\
    \ every day even if the contents of the root\n   zone are unchanged.  For example,\
    \ the SOA of the root zone on January\n   2, 2015 was 2015010201.  A process can\
    \ use this fact to create a\n   check for the contents of the local root zone\
    \ (using a program not\n   specified in this document).\n"
- title: 4.  Using the Root Zone Server on the Loopback Address
  contents:
  - "4.  Using the Root Zone Server on the Loopback Address\n   A recursive resolver\
    \ that wants to use a root zone server operating\n   as described in Section 3\
    \ simply specifies the local address as the\n   place to look when it is looking\
    \ for information from the root.  All\n   responses from the root server must\
    \ be validated using DNSSEC.\n   Note that using this configuration will cause\
    \ the recursive resolver\n   to fail if the local root zone server fails.  See\
    \ Appendix B for more\n   discussion of this for specific software.\n   To test\
    \ the proper operation of the recursive resolver with the local\n   root server,\
    \ use a DNS client to send a query for the SOA of the root\n   to the recursive\
    \ server.  Make sure the response that comes back has\n   the AA bit in the message\
    \ header set to 0.\n"
- title: 5.  Security Considerations
  contents:
  - "5.  Security Considerations\n   A system that does not follow the DNSSEC-related\
    \ requirements given\n   in Section 2 can be fooled into giving bad responses\
    \ in the same way\n   as any recursive resolver that does not do DNSSEC validation\
    \ on\n   responses from a remote root server.  Anyone deploying the method\n \
    \  described in this document should be familiar with the operational\n   benefits\
    \ and costs of deploying DNSSEC [RFC4033].\n   As stated in Section 1, this design\
    \ explicitly only allows the new\n   root zone server to be run on a loopback\
    \ address, in order to prevent\n   the server from serving authoritative answers\
    \ to any system other\n   than the recursive resolver.  This has the security\
    \ property of\n   limiting damage to any other system that might try to rely on\
    \ an\n   altered copy of the root.\n"
- title: 6.  References
  contents:
  - '6.  References

    '
- title: 6.1.  Normative References
  contents:
  - "6.1.  Normative References\n   [RFC1035]  Mockapetris, P., \"Domain names - implementation\
    \ and\n              specification\", STD 13, RFC 1035, DOI 10.17487/RFC1035,\n\
    \              November 1987, <http://www.rfc-editor.org/info/rfc1035>.\n   [RFC2119]\
    \  Bradner, S., \"Key words for use in RFCs to Indicate\n              Requirement\
    \ Levels\", BCP 14, RFC 2119,\n              DOI 10.17487/RFC2119, March 1997,\n\
    \              <http://www.rfc-editor.org/info/rfc2119>.\n   [RFC4033]  Arends,\
    \ R., Austein, R., Larson, M., Massey, D., and S.\n              Rose, \"DNS Security\
    \ Introduction and Requirements\",\n              RFC 4033, DOI 10.17487/RFC4033,\
    \ March 2005,\n              <http://www.rfc-editor.org/info/rfc4033>.\n"
- title: 6.2.  Informative References
  contents:
  - "6.2.  Informative References\n   [AggressiveNSEC]\n              Fujiwara, K.\
    \ and A. Kato, \"Aggressive use of NSEC/NSEC3\",\n              Work in Progress,\
    \ draft-fujiwara-dnsop-nsec-\n              aggressiveuse-02, October 2015.\n\
    \   [Manning2013]\n              Manning, W., \"Client Based Naming\", 2013,\n\
    \              <http://www.sfc.wide.ad.jp/dissertation/bill_e.html>.\n"
- title: Appendix A.  Current Sources of the Root Zone
  contents:
  - "Appendix A.  Current Sources of the Root Zone\n   The root zone can be retrieved\
    \ from anywhere as long as it comes with\n   all the DNSSEC records needed for\
    \ validation.  Currently, one can get\n   the root zone from ICANN by zone transfer\
    \ (AXFR) over TCP from DNS\n   servers at xfr.lax.dns.icann.org and xfr.cjr.dns.icann.org.\n\
    \   Currently, the root can also be retrieved by AXFR over TCP from the\n   following\
    \ root server operators:\n   o  b.root-servers.net\n   o  c.root-servers.net\n\
    \   o  f.root-servers.net\n   o  g.root-servers.net\n   o  k.root-servers.net\n\
    \   It is crucial to note that none of the above services are guaranteed\n   to\
    \ be available.  It is possible that ICANN or some of the root\n   server operators\
    \ will turn off the AXFR capability on the servers\n   listed above.  Using AXFR\
    \ over TCP to addresses that are likely to be\n   anycast (as the ones above are)\
    \ may conceivably have transfer\n   problems due to anycast, but current practice\
    \ shows that to be\n   unlikely.\n   To repeat the requirement from earlier in\
    \ this document: if the\n   contents of the zone cannot be refreshed before the\
    \ expire time, the\n   server MUST return a SERVFAIL error response for all queries\
    \ until\n   the zone can be successfully be set up again.\n"
- title: Appendix B.  Example Configurations of Common Implementations
  contents:
  - "Appendix B.  Example Configurations of Common Implementations\n   This section\
    \ shows fragments of configurations for some popular\n   recursive server software\
    \ that is believed to correctly implement the\n   requirements given in this document.\n\
    \   The IPv4 and IPv6 addresses in this section were checked recently by\n   testing\
    \ for AXFR over TCP from each address for the known single-\n   letter names in\
    \ the root-servers.net zone.\n   The examples here use a loopback address of 127.12.12.12,\
    \ but typical\n   installations will use 127.0.0.1.  The different address is\
    \ used in\n   order to emphasize that the root server does not need to be on the\n\
    \   device at \"localhost\".\n"
- title: 'B.1.  Example Configuration: BIND 9.9'
  contents:
  - "B.1.  Example Configuration: BIND 9.9\n   BIND acts both as a recursive resolver\
    \ and an authoritative server.\n   Because of this, there is \"fate-sharing\"\
    \ between the two servers in\n   the following configuration.  That is, if the\
    \ root server dies, it is\n   likely that all of BIND is dead.\n   Using this\
    \ configuration, queries for information in the root zone\n   are returned with\
    \ the AA bit not set.\n   When slaving a zone, BIND will treat zone data differently\
    \ if the\n   zone is slaved into a separate view (or a separate instance of the\n\
    \   software) versus slaved into the same view or instance that is also\n   performing\
    \ the recursion.\n   Validation:  When using separate views or separate instances,\
    \ the DS\n      records in the slaved zone will be validated as the zone data\
    \ is\n      accessed by the recursive server.  When using the same view, this\n\
    \      validation does not occur for the slaved zone.\n   Caching:  When using\
    \ separate views or instances, the recursive\n      server will cache all of the\
    \ queries for the slaved zone, just as\n      it would using the traditional \"\
    root hints\" method.  Thus, as the\n      zone in the other view or instance is\
    \ refreshed or updated,\n      changed information will not appear in the recursive\
    \ server until\n      the TTL of the old record times out.  Currently, the TTL\
    \ for DS\n      and delegation NS records is two days.  When using the same view,\n\
    \      all zone data in the recursive server will be updated as soon as\n    \
    \  it receives its copy of the zone.\n   view root {\n       match-destinations\
    \ { 127.12.12.12; };\n       zone \".\" {\n           type slave;\n          \
    \ file \"rootzone.db\";\n           notify no;\n           masters {\n       \
    \        192.228.79.201; # b.root-servers.net\n               192.33.4.12;   \
    \ # c.root-servers.net\n               192.5.5.241;    # f.root-servers.net\n\
    \               192.112.36.4;   # g.root-servers.net\n               193.0.14.129;\
    \   # k.root-servers.net\n               192.0.47.132;   # xfr.cjr.dns.icann.org\n\
    \               192.0.32.132;   # xfr.lax.dns.icann.org\n               2001:500:84::b;\
    \ # b.root-servers.net\n               2001:500:2f::f; # f.root-servers.net\n\
    \               2001:7fd::1;    # k.root-servers.net\n               2620:0:2830:202::132;\
    \  # xfr.cjr.dns.icann.org\n               2620:0:2d0:202::132;  # xfr.lax.dns.icann.org\n\
    \           };\n       };\n   };\n   view recursive {\n       dnssec-validation\
    \ auto;\n       allow-recursion { any; };\n       recursion yes;\n       zone\
    \ \".\" {\n           type static-stub;\n           server-addresses { 127.12.12.12;\
    \ };\n       };\n   };\n"
- title: 'B.2.  Example Configuration: Unbound 1.4 and NSD 4'
  contents:
  - "B.2.  Example Configuration: Unbound 1.4 and NSD 4\n   Unbound and NSD are separate\
    \ software packages.  Because of this,\n   there is no \"fate-sharing\" between\
    \ the two servers in the following\n   configurations.  That is, if the root server\
    \ instance (NSD) dies, the\n   recursive resolver instance (Unbound) will probably\
    \ keep running but\n   will not be able to resolve any queries for the root zone.\n\
    \   Therefore, the administrator of this configuration might want to\n   carefully\
    \ monitor the NSD instance and restart it immediately if it\n   dies.\n   Using\
    \ this configuration, queries for information in the root zone\n   are returned\
    \ with the AA bit not set.\n   # Configuration for Unbound\n   server:\n     \
    \  do-not-query-localhost: no\n   stub-zone:\n       name: \".\"\n       stub-prime:\
    \ no\n       stub-addr: 127.12.12.12\n   # Configuration for NSD\n   server:\n\
    \       ip-address: 127.12.12.12\n   zone:\n       name: \".\"\n       request-xfr:\
    \ 192.228.79.201 NOKEY # b.root-servers.net\n       request-xfr: 192.33.4.12 NOKEY\
    \    # c.root-servers.net\n       request-xfr: 192.5.5.241 NOKEY    # f.root-servers.net\n\
    \       request-xfr: 192.112.36.4 NOKEY   # g.root-servers.net\n       request-xfr:\
    \ 193.0.14.129 NOKEY   # k.root-servers.net\n       request-xfr: 192.0.47.132\
    \ NOKEY   # xfr.cjr.dns.icann.org\n       request-xfr: 192.0.32.132 NOKEY   #\
    \ xfr.lax.dns.icann.org\n       request-xfr: 2001:500:84::b NOKEY # b.root-servers.net\n\
    \       request-xfr: 2001:500:2f::f NOKEY # f.root-servers.net\n       request-xfr:\
    \ 2001:7fd::1 NOKEY    # k.root-servers.net\n       request-xfr: 2620:0:2830:202::132\
    \ NOKEY  # xfr.cjr.dns.icann.org\n       request-xfr: 2620:0:2d0:202::132 NOKEY\
    \  # xfr.lax.dns.icann.org\n"
- title: 'B.3.  Example Configuration: Microsoft Windows Server 2012'
  contents:
  - "B.3.  Example Configuration: Microsoft Windows Server 2012\n   Windows Server\
    \ 2012 contains a DNS server in the \"DNS Manager\"\n   component.  When activated,\
    \ that component acts as a recursive\n   server.  DNS Manager can also act as\
    \ an authoritative server.\n   Using this configuration, queries for information\
    \ in the root zone\n   are returned with the AA bit set.\n   The steps to configure\
    \ DNS Manager to implement the requirements in\n   this document are:\n   1. \
    \ Launch the DNS Manager GUI.  This can be done from the command\n       line\
    \ (\"dnsmgmt.msc\") or from the Service Manager (the \"DNS\"\n       command in\
    \ the \"Tools\" menu).\n   2.  In the hierarchy under the server on which the\
    \ service is\n       running, right-click on the \"Forward Lookup Zones\", and\
    \ select\n       \"New Zone\".  This brings up a succession of dialog boxes.\n\
    \   3.  In the \"Zone Type\" dialog box, select \"Secondary zone\".\n   4.  In\
    \ the \"Zone Name\" dialog box, enter \".\".\n   5.  In the \"Master DNS Servers\"\
    \ dialog box, enter\n       \"b.root-servers.net\".  The system validates that\
    \ it can do a zone\n       transfer from that server.  (After this configuration\
    \ is\n       completed, the DNS Manager will attempt to transfer from all of\n\
    \       the root zone servers.)\n   6.  In the \"Completing the New Zone Wizard\"\
    \ dialog box, click\n       \"Finish\".\n   7.  Verify that the DNS Manager is\
    \ acting as a recursive resolver.\n       Right-click on the server name in the\
    \ hierarchy, choosing the\n       \"Advanced\" tab in the dialog box.  See that\
    \ \"Disable recursion\n       (also disables forwarders)\" is not selected, and\
    \ that \"Enable\n       DNSSEC validation for remote responses\" is selected.\n"
- title: Acknowledgements
  contents:
  - "Acknowledgements\n   The authors fully acknowledge that running a copy of the\
    \ root zone on\n   the loopback address is not a new concept, and that we have\
    \ chatted\n   with many people about that idea over time.  For example, Bill\n\
    \   Manning described a similar solution but to a very different problem\n   (intermittent\
    \ connectivity, instead of constant but slow\n   connectivity) in his doctoral\
    \ dissertation in 2013 [Manning2013].\n   Evan Hunt contributed greatly to the\
    \ logic in the requirements.\n   Other significant contributors include Wouter\
    \ Wijngaards, Tony Hain,\n   Doug Barton, Greg Lindsay, and Akira Kato.  The authors\
    \ also received\n   many offline comments about making the document clear that\
    \ this is\n   just a description of a way to operate a root zone on localhost,\
    \ and\n   not a recommendation to do so.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Warren Kumari\n   Google\n   Email: Warren@kumari.net\n\
    \   Paul Hoffman\n   ICANN\n   Email: paul.hoffman@icann.org\n"
