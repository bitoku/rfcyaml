- contents:
  - '                       The IMAP NOTIFY Extension

    '
  title: __initial_text__
- contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of This Memo
- contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified
    as the\n   document authors.  All rights reserved.\n   This document is subject
    to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents
    (http://trustee.ietf.org/\n   license-info) in effect on the date of publication
    of this document.\n   Please review these documents carefully, as they describe
    your rights\n   and restrictions with respect to this document.\n"
  title: Copyright Notice
- contents:
  - "Abstract\n   This document defines an IMAP extension that allows a client to\n
    \  request specific kinds of unsolicited notifications for specified\n   mailboxes,
    such as messages being added to or deleted from such\n   mailboxes.\n"
  title: Abstract
- contents:
  - "Table of Contents\n   1. Overview and Rationale ..........................................3\n
    \  2. Conventions Used in This Document ...............................4\n   3.
    The NOTIFY Extension ............................................4\n      3.1.
    The NOTIFY Command .........................................4\n   4. Interaction
    with the IDLE Command ...............................8\n   5. Event Types .....................................................8\n
    \     5.1. FlagChange and AnnotationChange ............................9\n      5.2.
    MessageNew .................................................9\n      5.3. MessageExpunge
    ............................................10\n      5.4. MailboxName ...............................................11\n
    \     5.5. SubscriptionChange ........................................12\n      5.6.
    MailboxMetadataChange .....................................12\n      5.7. ServerMetadataChange
    ......................................13\n      5.8. Notification Overflow .....................................13\n
    \     5.9. ACL (Access Control List) Changes .........................13\n   6.
    Mailbox Specification ..........................................14\n      6.1.
    Mailbox Specifiers Affecting the Currently\n           Selected Mailbox ..........................................14\n
    \     6.2. Personal ..................................................15\n      6.3.
    Inboxes ...................................................15\n      6.4. Subscribed
    ................................................15\n      6.5. Subtree ...................................................15\n
    \     6.6. Mailboxes .................................................16\n   7.
    Extension to SEARCH and SORT Commands ..........................16\n   8. Formal
    Syntax ..................................................16\n   9. Security Considerations
    ........................................19\n   10. IANA Considerations ...........................................19\n
    \     10.1. Initial LIST-EXTENDED Extended Data Item Registrations ...19\n   11.
    Acknowledgements ..............................................20\n   12. Normative
    References ..........................................20\n   13. Informative References
    ........................................21\n"
  title: Table of Contents
- contents:
  - "1.  Overview and Rationale\n   The IDLE command (defined in [RFC2177]) provides
    a way for the client\n   to go into a mode where the IMAP server pushes it notifications
    about\n   IMAP mailstore events for the selected mailbox.  However, the IDLE\n
    \  extension doesn't restrict or control which server events can be\n   sent,
    or what information the server sends in response to each event.\n   Also, IDLE
    only applies to the selected mailbox, thus requiring an\n   additional TCP connection
    per mailbox.\n   This document defines an IMAP extension that allows clients to\n
    \  express their preferences about unsolicited events generated by the\n   server.
    \ The extension allows clients to only receive events that\n   they are interested
    in, while servers know that they don't need to go\n   to the effort of generating
    certain types of untagged responses.\n   Without the NOTIFY command defined in
    this document, an IMAP server\n   will only send information about mailstore changes
    to the client in\n   the following cases:\n   -  as the result of a client command
    (e.g., FETCH responses to a\n      FETCH or STORE command),\n   -  as unsolicited
    responses sent just before the end of a command\n      (e.g., EXISTS or EXPUNGE)
    as the result of changes in other\n      sessions, and\n   -  during an IDLE command.\n
    \  The NOTIFY command extends what information may be returned in those\n   last
    two cases, and also permits and requires the server to send\n   information about
    updates between commands.  The NOTIFY command also\n   allows for the client to
    extend what information is sent unsolicited\n   about the selected mailbox and
    to request some update information to\n   be sent regarding other mailboxes.\n
    \  The interaction between IDLE and NOTIFY commands is described in\n   Section
    4.\n   For the new messages delivered to or appended to the selected\n   mailbox,
    the NOTIFY command can be used to request that a set of\n   attributes be sent
    to the client in an unsolicited FETCH response.\n   This allows a client to be
    a passive recipient of events and new mail\n   and to be able to maintain full
    synchronisation without having to\n   issue any subsequent commands except to
    modify the state of the\n   mailbox on the server.\n   Some mobile clients, however,
    may want mail \"pushed\" only for mail\n   that matches a SEARCH pattern.  To
    meet that need, [RFC5267] is\n   augmented by this document to extend the UPDATE
    return option to\n   specify a list of fetch-atts to be returned when a new message
    is\n   delivered or appended in another session.\n"
  title: 1.  Overview and Rationale
- contents:
  - "2.  Conventions Used in This Document\n   The key words \"MUST\", \"MUST NOT\",
    \"REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\",
    \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described
    in [RFC2119].\n   The acronym MSN stands for Message Sequence Numbers (see Section\n
    \  2.3.1.2 of [RFC3501]).\n   Example lines prefaced by \"C:\" are sent by the
    client and ones\n   prefaced by \"S:\", by the server.  \"[...]\" means elision.\n"
  title: 2.  Conventions Used in This Document
- contents:
  - "3.  The NOTIFY Extension\n   IMAP servers that support this extension advertise
    the NOTIFY\n   capability.  This extension adds the NOTIFY command as defined
    in\n   Section 5.1.\n   A server implementing this extension is not required to
    implement\n   LIST-EXTENDED [RFC5258], even though a NOTIFY-compliant server must\n
    \  be able to return extended LIST responses, defined in [RFC5258].\n"
  - contents:
    - "3.1.  The NOTIFY Command\n   Arguments:  \"SET\"\n               Optional STATUS
      indicator\n               Mailboxes to be watched\n               Events about
      which to notify the client\n   Or\n   Arguments:  \"NONE\"\n   Responses:  Possibly
      untagged STATUS responses (for SET)\n   Result:     OK - The server will notify
      the client as requested.\n               NO -  Unsupported NOTIFY event, NOTIFY
      too complex or\n                     expensive, etc.\n               BAD - Command
      unknown, invalid, unsupported, or has\n                     unknown arguments.\n
      \  The NOTIFY command informs the server that the client listens for\n   event
      notifications all the time (even when no command is in\n   progress), and requests
      the server to notify it about the specified\n   set of events.  The NOTIFY command
      has two forms.  NOTIFY NONE\n   specifies that the client is not interested
      in any kind of event\n   happening on the server.  NOTIFY SET replaces the current
      list of\n   interesting events with a new list of events.\n   Until the NOTIFY
      command is used for the first time, the server only\n   sends notifications
      while a command is being processed, and notifies\n   the client about these
      events on the selected mailbox (see Section 5\n   for definitions): MessageNew,
      MessageExpunge, or FlagChange.  It does\n   not notify the client about any
      events on other mailboxes.\n   The effect of a successful NOTIFY command lasts
      until the next NOTIFY\n   command or until the IMAP connection is closed.\n
      \  A successful NOTIFY SET command MUST cause the server to immediately\n   return
      any accumulated changes to the currently selected mailbox (if\n   any), such
      as flag changes and new or expunged messages.  Thus, a\n   successful NOTIFY
      SET command implies an implicit NOOP command.\n   The NOTIFY SET command can
      request notifications of message-related\n   changes to the selected mailbox,
      whatever that may be at the time the\n   message notifications are being generated.
      \ This is done by\n   specifying either the SELECTED or the SELECTED-DELAYED
      mailbox\n   selector (see Section 6.1) in the NOTIFY SET command.  If the\n
      \  SELECTED/SELECTED-DELAYED mailbox selector is not specified in the\n   NOTIFY
      SET command, this means that the client doesn't want to\n   receive any <message-event>s
      for the currently selected mailbox.\n   This is the same as specifying SELECTED
      NONE.\n   The client can also request notifications on other mailboxes by name\n
      \  or by a limited mailbox pattern match.  Message-related notifications\n   returned
      for the currently selected mailbox will be those specified\n   by the SELECTED/SELECTED-DELAYED
      mailbox specifier, even if the\n   selected mailbox also appears by name (or
      matches a pattern) in the\n   command.  Non-message-related notifications are
      controlled by mailbox\n   specifiers other than SELECTED/SELECTED-DELAYED.\n
      \  If the NOTIFY command enables MessageNew, MessageExpunge,\n   AnnotationChange,
      or FlagChange notifications for a mailbox other\n   than the currently selected
      mailbox, and the client has specified the\n   STATUS indicator parameter, then
      the server MUST send a STATUS\n   response for that mailbox before NOTIFY's
      tagged OK.  If MessageNew\n   is enabled, the STATUS response MUST contain MESSAGES,
      UIDNEXT, and\n   UIDVALIDITY.  If MessageExpunge is enabled, the STATUS response
      MUST\n   contain MESSAGES.  If either AnnotationChange or FlagChange are\n   included
      and the server also supports the CONDSTORE [RFC4551] and/or\n   QRESYNC [RFC5162]
      extensions, the STATUS response MUST contain\n   UIDVALIDITY and HIGHESTMODSEQ.
      \ Absence of the STATUS indicator\n   parameter allows the client to avoid the
      additional STATUS responses.\n   This might be useful if the client already
      retrieved this information\n   before issuing the NOTIFY command.\n   Clients
      are advised to limit the number of mailboxes used with\n   NOTIFY.  Particularly,
      if a client asks for events for all accessible\n   mailboxes, the server may
      swamp the client with updates about shared\n   mailboxes.  This may reduce the
      client's battery life.  Also, this\n   wastes both server and network resources.\n
      \  For each mailbox specified, the server verifies that the client has\n   access
      using the following test:\n   -  If the name does not refer to an existing mailbox,
      the server MUST\n      ignore it.\n   -  If the name refers to a mailbox that
      the client can't LIST, the\n      server MUST ignore it.  For a server that
      implements [RFC4314],\n      this means that if the client doesn't have the
      'l' (lookup) right\n      for the name, then the server MUST ignore the mailbox.
      \ This\n      behavior prevents disclosure of potentially confidential\n      information
      to clients who don't have rights to know it.\n   -  If the name refers to a
      mailbox that the client can LIST (e.g., it\n      has the 'l' right from [RFC4314]),
      but the client doesn't have\n      another right required for processing of
      the specified event(s),\n      then the server MUST respond with an untagged
      extended LIST\n      response containing the \\NoAccess name attribute.\n   The
      server SHOULD return the tagged OK response if the client has\n   access to
      at least one of the mailboxes specified in the current list\n   of interesting
      events.  The server MAY return the tagged NO response\n   if the client has
      no access to any of the specified mailboxes and no\n   access can ever be granted
      in the future (e.g., the client specified\n   an event for 'Subtree Bar/Foo',
      'Bar/Foo' doesn't exist, and LIST\n   returns \\Noinferiors for the parent 'Bar').\n
      \  If the notification would be prohibitively expensive for the server\n   (e.g.,
      \"notify me of all flag changes in all mailboxes\"), the server\n   MAY refuse
      the command with a tagged NO [NOTIFICATIONOVERFLOW]\n   response.\n   If the
      client requests information for events of an unsupported type,\n   the server
      MUST refuse the command with a tagged NO response (not a\n   BAD).  This response
      SHOULD contain the BADEVENT response code, which\n   MUST list names of all
      events supported by the server.\n   Here's an example:\n         S: * OK [CAPABILITY
      IMAP4REV1 NOTIFY]\n         C: a login bob alice\n         S: a OK Password
      matched\n         C: b notify set status (selected MessageNew (uid\n            body.peek[header.fields
      (from to subject)]) MessageExpunge)\n            (subtree Lists MessageNew)\n
      \        S: * STATUS Lists/Lemonade (UIDVALIDITY 4 UIDNEXT 9999 MESSAGES\n            500)\n
      \        S: [...]\n         S: * STATUS Lists/Im2000 (UIDVALIDITY 901 UIDNEXT
      1 MESSAGES 0)\n         S: b OK done\n         C: c select inbox\n         S:
      [...] (the usual 7-8 responses to SELECT)\n         S: c OK INBOX selected\n
      \              (Time passes.  A new message is delivered to mailbox\n               Lists/Lemonade.)\n
      \        S: * STATUS Lists/Lemonade (UIDVALIDITY 4 UIDNEXT 10000\n            MESSAGES
      501)\n               (Time passes.  A new message is delivered to inbox.)\n
      \        S: * 127 FETCH (UID 127001 BODY[HEADER.FIELDS (From To\n            Subject)]
      {75}\n         S: Subject: Re: good morning\n         S: From: alice@example.org\n
      \        S: To: bob@example.org\n         S:\n         S: )\n               (Time
      passes.  The client decides it wants to know about\n               one more
      mailbox.  As the client already knows necessary\n               STATUS information
      for all mailboxes below the Lists\n               mailbox, and because \"notify
      set status\" would cause\n               STATUS responses for *all* mailboxes
      specified in the\n               NOTIFY command, including the ones for which
      the client\n               already knows STATUS information, the client issues
      an\n               explicit STATUS request for the mailbox to be added to\n
      \              the watch list, followed by the NOTIFY SET without the\n               STATUS
      parameter.)\n         C: d STATUS misc (UIDVALIDITY UIDNEXT MESSAGES)\n         S:
      * STATUS misc (UIDVALIDITY 1 UIDNEXT 999)\n         S: d STATUS completed\n
      \        C: e notify set (selected MessageNew (uid\n            body.peek[header.fields
      (from to subject)]) MessageExpunge)\n            (subtree Lists MessageNew)
      (mailboxes misc MessageNew)\n         S: e OK done\n"
    title: 3.1.  The NOTIFY Command
  title: 3.  The NOTIFY Extension
- contents:
  - "4.  Interaction with the IDLE Command\n   If IDLE [RFC2177] (as well as this
    extension) is supported, then\n   while processing any IDLE command, the server
    MUST send exactly the\n   same events as instructed by the client using the NOTIFY
    command.\n   NOTIFY makes IDLE unnecessary for some clients.  If a client does
    not\n   use MSNs and '*' in commands, it can request MessageExpunge and\n   MessageNew
    for the selected mailbox by using the NOTIFY command\n   instead of entering the
    IDLE mode.\n   A client that uses MSNs and '*' in commands can still use the NOTIFY\n
    \  command if it specifies the SELECTED-DELAYED mailbox specifier in the\n   NOTIFY
    command.\n"
  title: 4.  Interaction with the IDLE Command
- contents:
  - "5.  Event Types\n   Only some of the events in [RFC5423] can be expressed in
    IMAP, and\n   for some of them there are several possible ways to express the\n
    \  event.\n   This section specifies the events of which an IMAP server can notify\n
    \  an IMAP client, and how.\n   The server SHOULD omit notifying the client if
    the event is caused by\n   this client.  For example, if the client issues CREATE
    and has\n   requested a MailboxName event that would cover the newly created\n
    \  mailbox, the server SHOULD NOT notify the client of the MailboxName\n   change.\n
    \  All event types described in this document require the 'l' and 'r'\n   rights
    (see [RFC4314]) on all observed mailboxes.  Servers that don't\n   implement [RFC4314]
    should map the above rights to their access-\n   control model.\n   If the FlagChange
    and/or AnnotationChange events are specified,\n   MessageNew and MessageExpunge
    MUST also be specified by the client.\n   Otherwise, the server MUST respond with
    the tagged BAD response.\n   If one of MessageNew or MessageExpunge is specified,
    then both events\n   MUST be specified.  Otherwise, the server MUST respond with
    the\n   tagged BAD response.\n   The client can instruct the server not to send
    an event by omitting\n   the necessary event from the list of events specified
    in NOTIFY SET,\n   by using the NONE event specifier in the NOTIFY SET, or by
    using\n   NOTIFY NONE.  In particular, NOTIFY SET ... NONE can be used as a\n
    \  snapshot facility by clients.\n"
  - contents:
    - "5.1.  FlagChange and AnnotationChange\n   If the flag and/or message annotation
      change happens in the selected\n   mailbox, the server MUST notify the client
      by sending an unsolicited\n   FETCH response, which MUST include UID and FLAGS/ANNOTATION
      FETCH\n   data items.  It MAY also send new FLAGS and/or OK [PERMANENTFLAGS\n
      \  ...] responses.\n   If a search context is in effect as specified in [RFC5267],
      an\n   ESEARCH ADDTO or ESEARCH REMOVEFROM will also be generated, if\n   appropriate.
      \ In this case, the FETCH response MUST precede the\n   ESEARCH response.\n
      \  If the change happens in another mailbox, then the server responds\n   with
      a STATUS response.  The exact content of the STATUS response\n   depends on
      various factors.  If CONDSTORE [RFC4551] and/or QRESYNC\n   [RFC5162] are enabled
      by the client, then the server sends a STATUS\n   response that includes at
      least HIGHESTMODSEQ and UIDVALIDITY status\n   data items.  If the number of
      messages with the \\Seen flag changes,\n   the server MAY also include the UNSEEN
      data item in the STATUS\n   response.  If CONDSTORE/QRESYNC is not enabled by
      the client and the\n   server chooses not to include the UNSEEN data item, the
      server does\n   not notify the client.  When this event is requested, the server
      MUST\n   notify the client about mailbox UIDVALIDITY changes.  This is done
      by\n   sending a STATUS response that includes UIDVALIDITY.\n   FlagChange covers
      the MessageRead, MessageTrash, FlagsSet, and\n   FlagsClear events in [RFC5423].\n
      \  Example in the selected mailbox:\n      S: * 99 FETCH (UID 9999 FLAGS ($Junk))\n
      \  And in another mailbox, with CONDSTORE in use:\n      S: * STATUS Lists/Lemonade
      (HIGHESTMODSEQ 65666665 UIDVALIDITY\n      101)\n"
    title: 5.1.  FlagChange and AnnotationChange
  - contents:
    - "5.2.  MessageNew\n   This covers both MessageNew and MessageAppend in [RFC5423].\n
      \  If the new/appended message is in the selected mailbox, the server\n   notifies
      the client by sending an unsolicited EXISTS response,\n   followed by an unsolicited
      FETCH response containing the information\n   requested by the client.  A FETCH
      response SHOULD NOT be generated\n   for a new message created by the client
      on this particular\n   connection, for instance, as the result of an APPEND
      or COPY command\n   to the selected mailbox performed by the client itself.
      \ The server\n   MAY also send a RECENT response, if the server marks the message
      as\n   \\Recent.\n   Note that a single EXISTS response can be returned for
      multiple\n   MessageAppend/MessageNew events.\n   If a search context is in
      effect as specified in [RFC5267], an\n   ESEARCH ADDTO will also be generated,
      if appropriate.  In this case,\n   the EXISTS response MUST precede the ESEARCH
      response.  Both the\n   NOTIFY command and the SEARCH and SORT commands (see
      Section 7) can\n   specify attributes to be returned for new messages.  These
      attributes\n   SHOULD be combined into a single FETCH response.  The server
      SHOULD\n   avoid sending duplicate data.  The FETCH response(s) MUST follow
      any\n   ESEARCH ADDTO responses.\n   If the new/appended message is in another
      mailbox, the server sends\n   an unsolicited STATUS (UIDNEXT MESSAGES) response
      for the relevant\n   mailbox.  If the CONDSTORE extension [RFC4551] and/or the
      QRESYNC\n   extension [RFC5162] is enabled, the HIGHESTMODSEQ status data item\n
      \  MUST be included in the STATUS response.\n   The client SHOULD NOT use FETCH
      attributes that implicitly set the\n   \\seen flag, or that presuppose the existence
      of a given bodypart.\n   UID, MODSEQ, FLAGS, ENVELOPE, BODY.PEEK[HEADER.FIELDS...
      and\n   BODY/BODYSTRUCTURE may be the most useful attributes.\n   Note that
      if a client asks to be notified of MessageNew events with\n   the SELECTED mailbox
      specifier, the number of messages can increase\n   at any time, and therefore
      the client cannot refer to a specific\n   message using the MSN/UID '*'.\n   Example
      in the selected mailbox:\n      S: * 444 EXISTS\n      S: * 444 FETCH (UID 9999)\n
      \  And in another mailbox, without CONDSTORE enabled:\n      S: * STATUS Lists/Lemonade
      (UIDNEXT 10002 MESSAGES 503)\n"
    title: 5.2.  MessageNew
  - contents:
    - "5.3.  MessageExpunge\n   If the expunged message or messages are in the selected
      mailbox, the\n   server notifies the client using EXPUNGE (or VANISHED, if [RFC5162]\n
      \  is supported by the server and enabled by the client).\n   If a search context
      is in effect, as specified in [RFC5267], an\n   ESEARCH REMOVEFROM will also
      be generated, if appropriate.\n   If the expunged message or messages are in
      another mailbox, the\n   server sends an unsolicited STATUS (UIDNEXT MESSAGES)
      response for\n   the relevant mailbox.  If the QRESYNC [RFC5162] extension is
      enabled,\n   the HIGHESTMODSEQ data item MUST be included in the STATUS response\n
      \  as well.\n   Note that if a client requests MessageExpunge with the SELECTED\n
      \  mailbox specifier, the meaning of an MSN can change at any time, so\n   the
      client cannot use MSNs in commands anymore.  For example, such a\n   client
      cannot use FETCH, but has to use UID FETCH.  The meaning of\n   '*' can also
      change when messages are added or expunged.  A client\n   wishing to keep using
      MSNs can either use the SELECTED-DELAYED\n   mailbox specifier or can avoid
      using the MessageExpunge event\n   entirely.\n   The MessageExpunge notification
      covers both MessageExpunge and\n   MessageExpire events from [RFC5423].\n   Example
      in the selected mailbox, without QRESYNC:\n      S: * 444 EXPUNGE\n   The same
      example in the selected mailbox, with QRESYNC:\n      S: * VANISHED 5444\n   And
      in another mailbox, when QRESYNC is not enabled:\n      S: * STATUS misc (UIDNEXT
      999 MESSAGES 554)\n"
    title: 5.3.  MessageExpunge
  - contents:
    - "5.4.  MailboxName\n   These notifications are sent if an affected mailbox name
      was created\n   (with CREATE), deleted (with DELETE), or renamed (with RENAME).
      \ For\n   a server that implements [RFC4314], granting or revocation of the
      'l'\n   right to the current user on the affected mailbox MUST be considered\n
      \  mailbox creation or deletion, respectively.  If a mailbox is created\n   or
      deleted, the mailbox itself and its direct parent (whether it is\n   an existing
      mailbox or not) are considered to be affected.\n   The server notifies the client
      by sending an unsolicited LIST\n   response for each affected mailbox name.
      \ If, after the event, the\n   mailbox name does not refer to a mailbox accessible
      to the client,\n   the \\Nonexistent flag MUST be included.\n   For each LISTable
      mailbox renamed, the server sends an extended LIST\n   response [RFC5258] for
      the new mailbox name, containing the OLDNAME\n   extended data item with the
      old mailbox name.  When a mailbox is\n   renamed, its children are renamed too.
      \ No additional MailboxName\n   events are sent for children in this case.  When
      INBOX is renamed, a\n   new INBOX is assumed to be created.  No MailboxName
      event is sent for\n   INBOX in this case.\n   If the server automatically subscribes
      a mailbox when it is created\n   or renamed, then the unsolicited LIST response
      for each affected\n   subscribed mailbox name MUST include the \\Subscribed
      attribute (see\n   [RFC5258]).  The server SHOULD also include \\HasChildren
      or\n   \\HasNoChildren attributes [RFC5258] as appropriate.\n   Example of a
      newly created mailbox (or granting of the 'l' right on\n   the mailbox):\n      S:
      * LIST () \"/\" \"NewMailbox\"\n   And a deleted mailbox (or revocation of the
      'l' right on the\n   mailbox):\n      S: * LIST (\\NonExistent) \".\" \"INBOX.DeletedMailbox\"\n
      \  Example of a renamed mailbox:\n      S: * LIST () \"/\" \"NewMailbox\" (\"OLDNAME\"
      (\"OldMailbox\"))\n"
    title: 5.4.  MailboxName
  - contents:
    - "5.5.  SubscriptionChange\n   The server notifies the client by sending an unsolicited
      LIST\n   response for each affected mailbox name.  If and only if the mailbox\n
      \  is subscribed after the event, the \\Subscribed attribute (see\n   [RFC5258])
      is included.  Note that in the LIST response, all mailbox\n   attributes MUST
      be accurately computed (this differs from the\n   behavior of the LSUB command).\n
      \  Example:\n      S: * LIST (\\Subscribed) \"/\" \"SubscribedMailbox\"\n"
    title: 5.5.  SubscriptionChange
  - contents:
    - "5.6.  MailboxMetadataChange\n   Support for this event type is OPTIONAL unless
      the METADATA extension\n   [RFC5464] is also supported by the server, in which
      case support for\n   this event type is REQUIRED.\n   A client willing to receive
      unsolicited METADATA responses as a\n   result of using the MailboxMetadataChange
      event in the NOTIFY command\n   doesn't have to issue ENABLE METADATA.\n   The
      server sends an unsolicited METADATA response (as per Section\n   4.4.2 of [RFC5464]).
      \ If possible, only the changed metadata SHOULD\n   be included, but if the
      server can't detect a change to a single\n   metadata item, it MAY include all
      metadata items set on the mailbox.\n   If a metadata item is deleted (set to
      NIL), it MUST always be\n   included in the METADATA response.\n   Example:\n
      \     S: * METADATA \"INBOX\" /shared/comment\n"
    title: 5.6.  MailboxMetadataChange
  - contents:
    - "5.7.  ServerMetadataChange\n   Support for this event type is OPTIONAL unless
      the METADATA or the\n   METADATA-SERVER extension [RFC5464] is also supported
      by the server,\n   in which case support for this event type is REQUIRED.\n
      \  A client willing to receive unsolicited METADATA responses as a\n   result
      of using the ServerMetadataChange event in the NOTIFY command\n   doesn't have
      to issue ENABLE METADATA or ENABLE METADATA-SERVER.\n   The server sends an
      unsolicited METADATA response (as per Section\n   4.4.2 of [RFC5464]).  Only
      the names of changed metadata entries\n   SHOULD be returned in such METADATA
      responses.  If a metadata item is\n   deleted (set to NIL), it MUST always be
      included in the METADATA\n   response.\n   Example:\n      S: * METADATA \"\"
      /shared/comment\n"
    title: 5.7.  ServerMetadataChange
  - contents:
    - "5.8.  Notification Overflow\n   If the server is unable or unwilling to deliver
      as many notifications\n   as it is being asked to, it may disable notifications
      for some or all\n   clients.  It MUST notify these clients by sending an untagged
      \"OK\n   [NOTIFICATIONOVERFLOW]\" response and behave as if a NOTIFY NONE\n
      \  command had just been received.\n   Example:\n      S: * OK [NOTIFICATIONOVERFLOW]
      ...A comment can go here...\n"
    title: 5.8.  Notification Overflow
  - contents:
    - "5.9.  ACL (Access Control List) Changes\n   Even if NOTIFY succeeds, it is
      still possible to lose access to the\n   mailboxes being monitored at a later
      time.  If this happens, the\n   server MUST stop monitoring these mailboxes.
      \ If access is later\n   granted, the server MUST restart event monitoring.\n
      \  The server SHOULD return the LIST response with the \\NoAccess name\n   attribute
      if and when the mailbox loses the 'l' right.  Similarly,\n   the server SHOULD
      return the LIST response with no \\NoAccess name\n   attribute if the mailbox
      was previously reported as having \\NoAccess\n   and the 'l' right is later
      granted.\n"
    title: 5.9.  ACL (Access Control List) Changes
  title: 5.  Event Types
- contents:
  - "6.  Mailbox Specification\n   Mailboxes to be monitored can be specified in several
    different ways.\n   Only 'SELECTED' and 'SELECTED-DELAYED' (Section 6.1) match
    the\n   currently selected mailbox.  All other mailbox specifications affect\n
    \  other (non-selected) mailboxes.\n   Note that multiple <event-group>s can apply
    to the same mailbox.  The\n   following example demonstrates this.  In this example,
    MessageNew and\n   MessageExpunge events are reported for INBOX, due to the first\n
    \  <event-group>.  A SubscriptionChange event will also be reported for\n   INBOX,
    due to the second <event-group>.\n      C: a notify set (mailboxes INBOX (Messagenew
    messageExpunge))\n         (personal (SubscriptionChange))\n   A typical client
    that supports the NOTIFY extension would ask for\n   events on the selected mailbox
    and some named mailboxes.\n   In the next example, the client asks for FlagChange
    events for all\n   personal mailboxes except the currently selected mailbox.  This
    is\n   different from the previous example because SELECTED overrides all\n   other
    message event definitions for the currently selected mailbox\n   (see Section
    3.1).\n      C: a notify set (selected (Messagenew (uid flags) messageExpunge))\n
    \        (personal (MessageNew FlagChange MessageExpunge))\n"
  - contents:
    - "6.1.  Mailbox Specifiers Affecting the Currently Selected Mailbox\n   Only
      one of the mailbox specifiers affecting the currently selected\n   mailbox can
      be specified in any NOTIFY command.  The two such mailbox\n   specifiers (SELECTED
      and SELECTED-DELAYED) are described below.\n   Both refer to the mailbox that
      was selected using either SELECT or\n   EXAMINE (see [RFC3501], Sections 6.3.1
      and 6.3.2).  When the IMAP\n   connection is not in the selected state, such
      mailbox specifiers\n   don't refer to any mailbox.\n   The mailbox specifiers
      only apply to <message-event>s.  It is an\n   error to specify other types of
      events with either the SELECTED or\n   the SELECTED-DELAYED selector.\n"
    - contents:
      - "6.1.1.  Selected\n   The SELECTED mailbox specifier requires the server to
        send immediate\n   notifications for the currently selected mailbox about
        all specified\n   <message-event>s.\n"
      title: 6.1.1.  Selected
    - contents:
      - "6.1.2.  Selected-Delayed\n   The SELECTED-DELAYED mailbox specifier requires
        the server to delay a\n   MessageExpunge event until the client issues a command
        that allows\n   returning information about expunged messages (see Section
        7.4.1 of\n   [RFC3501] for more details), for example, till a NOOP or an IDLE\n
        \  command has been issued.  When SELECTED-DELAYED is specified, the\n   server
        MAY also delay returning other <message-event>s until the\n   client issues
        one of the commands specified above, or it MAY return\n   them immediately.\n"
      title: 6.1.2.  Selected-Delayed
    title: 6.1.  Mailbox Specifiers Affecting the Currently Selected Mailbox
  - contents:
    - "6.2.  Personal\n   Personal refers to all selectable mailboxes in the user's
      personal\n   namespace(s), as defined in [RFC2342].\n"
    title: 6.2.  Personal
  - contents:
    - "6.3.  Inboxes\n   Inboxes refers to all selectable mailboxes in the user's
      personal\n   namespace(s) to which messages may be delivered by a Message Delivery\n
      \  Agent (MDA) (see [EMAIL-ARCH], particularly Section 4.3.3).\n   If the IMAP
      server cannot easily compute this set, it MUST treat\n   \"inboxes\" as equivalent
      to \"personal\".\n"
    title: 6.3.  Inboxes
  - contents:
    - "6.4.  Subscribed\n   Subscribed refers to all mailboxes subscribed to by the
      user.\n   If the subscription list changes, the server MUST reevaluate the\n
      \  list.\n"
    title: 6.4.  Subscribed
  - contents:
    - "6.5.  Subtree\n   Subtree is followed by a mailbox name or list of mailbox
      names.  A\n   subtree refers to all selectable mailboxes that are subordinate
      to\n   the specified mailbox plus the specified mailbox itself.\n"
    title: 6.5.  Subtree
  - contents:
    - "6.6.  Mailboxes\n   Mailboxes is followed by a mailbox name or a list of mailbox
      names.\n   The server MUST NOT do a wildcard expansion.  This means there is
      no\n   special treatment for the LIST wildcard characters ('*' and '%') if\n
      \  they are present in mailbox names.\n"
    title: 6.6.  Mailboxes
  title: 6.  Mailbox Specification
- contents:
  - "7.  Extension to SEARCH and SORT Commands\n   If the server that supports the
    NOTIFY extension also supports\n   CONTEXT=SEARCH and/or CONTEXT=SORT as defined
    in [RFC5267], the\n   UPDATE return option is extended so that a client can request
    that\n   FETCH attributes be returned when a new message is added to the\n   context
    result set.\n   For example:\n         C: a00 SEARCH RETURN (COUNT UPDATE (UID
    BODY[HEADER.FIELDS (TO\n            FROM SUBJECT)])) FROM \"boss\"\n         S:
    * ESEARCH (TAG \"a00\") (COUNT 17)\n         S: a00 OK\n            [...a new
    message is delivered...]\n         S: * EXISTS 93\n         S: * 93 FETCH (UID
    127001 BODY[HEADER.FIELDS (FROM TO SUBJECT)]\n            {76}\n         S: Subject:
    Re: good morning\n         S: From: myboss@example.org\n         S: To: bob@example.org\n
    \        S:\n         S: )\n         S: * ESEARCH (TAG \"a00\") ADDTO (0 93)\n
    \  Note that the EXISTS response MUST precede any FETCH responses, and\n   together
    they MUST precede the ESEARCH response.\n   No untagged FETCH response SHOULD
    be returned if a message becomes a\n   member of UPDATE SEARCH due to flag or
    annotation changes.\n"
  title: 7.  Extension to SEARCH and SORT Commands
- contents:
  - "8.  Formal Syntax\n   The following syntax specification uses the Augmented Backus-Naur\n
    \  Form (ABNF) notation as specified in [RFC5234].  [RFC3501] defines\n   the
    non-terminals \"capability\", \"command-auth\", \"mailbox\", \"mailbox-\n   data\",
    \"resp-text-code\", and \"search-key\".  The \"modifier-update\"\n   non-terminal
    is defined in [RFC5267].  \"mbx-list-oflag\" is defined in\n   [RFC3501] and updated
    by [RFC5258].\n   Except as noted otherwise, all alphabetic characters are case-\n
    \  insensitive.  The use of upper or lower case characters to define\n   token
    strings is for editorial clarity only.  Implementations MUST\n   accept these
    strings in a case-insensitive fashion.  For example, the\n   <filter-mailboxes-selected>
    non-terminal value \"SELECTED\" must be\n   treated in the same way as \"Selected\"
    or \"selected\".\n      capability      =/ \"NOTIFY\"\n      command-auth    =/
    notify\n      notify          = \"NOTIFY\" SP\n                      (notify-set
    / notify-none)\n      notify-set      = \"SET\" [status-indicator] SP event-groups\n
    \                     ; Replace registered notification events\n                      ;
    with the specified list of events\n      notify-none     = \"NONE\"\n                      ;
    Cancel all registered notification\n                      ; events.  The client
    is not interested\n                      ; in receiving any events.\n      status-indicator
    = SP \"STATUS\"\n      one-or-more-mailbox = mailbox / many-mailboxes\n      many-mailboxes
    \ = \"(\" mailbox *(SP mailbox) \")\"\n      event-groups    = event-group *(SP
    event-group)\n      event-group     = \"(\" filter-mailboxes SP events \")\"\n
    \                     ;; Only <message-event>s are allowed in <events>\n                      ;;
    when <filter-mailboxes-selected> is used.\n      filter-mailboxes = filter-mailboxes-selected
    /\n                      filter-mailboxes-other\n      filter-mailboxes-other
    = \"inboxes\" / \"personal\" / \"subscribed\" /\n                      ( \"subtree\"
    SP one-or-more-mailbox ) /\n                      ( \"mailboxes\" SP one-or-more-mailbox
    )\n      filter-mailboxes-selected = \"selected\" / \"selected-delayed\"\n                      ;;
    Apply to the currently selected mailbox only.\n                      ;; Only one
    of them can be specified in a NOTIFY\n                      ;; command.\n      events
    \         = ( \"(\" event *(SP event) \")\" ) / \"NONE\"\n                      ;;
    As in [MSGEVENT].\n                      ;; \"NONE\" means that the client does
    not wish\n                      ;; to receive any events for the specified\n                      ;;
    mailboxes.\n      event           = message-event /\n                      mailbox-event
    / user-event / event-ext\n      message-event   = ( \"MessageNew\" [SP\n                          \"(\"
    fetch-att *(SP fetch-att) \")\" ] )\n                      / \"MessageExpunge\"\n
    \                     / \"FlagChange\"\n                      / \"AnnotationChange\"\n
    \                     ;; \"MessageNew\" includes \"MessageAppend\" from\n                      ;;
    [MSGEVENT]. \"FlagChange\" is any of\n                      ;; \"MessageRead\",
    \"MessageTrash\", \"FlagsSet\",\n                      ;; \"FlagsClear\" [MSGEVENT].
    \"MessageExpunge\"\n                      ;; includes \"MessageExpire\" [MSGEVENT].\n
    \                     ;; MessageNew and MessageExpunge MUST always\n                      ;;
    be specified together.  If FlagChange is\n                      ;; specified,
    then MessageNew and MessageExpunge\n                      ;; MUST be specified
    as well.\n                      ;; The fett-att list may only be present for the\n
    \                     ;; SELECTED/SELECTED-DELAYED mailbox filter\n                      ;;
    (<filter-mailboxes>).\n      mailbox-event   = \"MailboxName\" /\n                      \"SubscriptionChange\"
    / \"MailboxMetadataChange\"\n                      ; \"SubscriptionChange\" includes\n
    \                     ; MailboxSubscribe and MailboxUnSubscribe.\n                      ;
    \"MailboxName\" includes MailboxCreate,\n                      ; \"MailboxDelete\"
    and \"MailboxRename\".\n      user-event      = \"ServerMetadataChange\"\n      event-ext
    \      = atom\n                      ;; For future extensions\n      oldname-extended-item
    =  \"OLDNAME\" SP \"(\" mailbox \")\"\n                      ;; Extended data
    item (mbox-list-extended-item)\n                      ;; returned in a LIST response
    when a mailbox is\n                      ;; renamed.\n                      ;;
    Note 1: the OLDNAME tag can be returned\n                      ;; with or without
    surrounding quotes, as per\n                      ;; mbox-list-extended-item-tag
    production.\n      resp-text-code  =/ \"NOTIFICATIONOVERFLOW\" /\n                      unsupported-events-code\n
    \     message-event-name   = \"MessageNew\" /\n                      \"MessageExpunge\"
    / \"FlagChange\" /\n                      \"AnnotationChange\"\n      event-name
    = message-event-name / mailbox-event /\n                      user-event\n      unsupported-events-code
    = \"BADEVENT\"\n                      SP \"(\" event-name *(SP event-name) \")\"\n
    \     modifier-update = \"UPDATE\"\n                      [ \"(\" fetch-att *(SP
    fetch-att) \")\" ]\n      mbx-list-oflag =/ \"\\NoAccess\"\n"
  title: 8.  Formal Syntax
- contents:
  - "9.  Security Considerations\n   It is very easy for a client to deny itself service
    using NOTIFY.\n   Asking for all events on all mailboxes may work on a small server,\n
    \  but with a big server, can swamp the client's network connection or\n   processing
    capability.  In the worst case, the server's processing\n   could also degrade
    the service it offers to other clients.\n   Server authors should be aware that
    if a client issues requests and\n   does not listen to the resulting responses,
    the TCP window can easily\n   fill up, and a careless server might block.  This
    problem also exists\n   in plain IMAP; however, this extension magnifies the problem.\n
    \  This extension makes it possible to retrieve messages immediately\n   when
    they are added to the mailbox.  This makes it wholly impractical\n   to delete
    sensitive messages using programs like imapfilter.  Using\n   SIEVE [RFC5228]
    or similar is much better.\n"
  title: 9.  Security Considerations
- contents:
  - "10.  IANA Considerations\n   The IANA has added NOTIFY to the list of IMAP extensions.\n"
  - contents:
    - "10.1.  Initial LIST-EXTENDED Extended Data Item Registrations\n   The following
      entry has been added to the LIST-EXTENDED response\n   registry [RFC5258]:\n
      \  To: iana@iana.org\n   Subject: Registration of OLDNAME LIST-EXTENDED extended
      data item\n   LIST-EXTENDED extended data item tag: OLDNAME\n   LIST-EXTENDED
      extended data item description: The OLDNAME extended\n      data item describes
      the old mailbox name for the mailbox\n      identified by the LIST response.\n
      \  Which LIST-EXTENDED option(s) (and their types) causes this extended\n      data
      item to be returned (if any): none\n   Published specification : RFC 5465, Section
      5.4.\n   Security considerations: none\n   Intended usage: COMMON\n   Person
      and email address to contact for further information:  Alexey\n      Melnikov
      <Alexey.Melnikov@isode.com>\n   Owner/Change controller: iesg@ietf.org\n"
    title: 10.1.  Initial LIST-EXTENDED Extended Data Item Registrations
  title: 10.  IANA Considerations
- contents:
  - "11.  Acknowledgments\n   The authors gratefully acknowledge the help of Peter
    Coates, Dave\n   Cridland, Mark Crispin, Cyrus Daboo, Abhijit Menon-Sen, Timo\n
    \  Sirainen, and Eric Burger.  In particular, Peter Coates contributed\n   lots
    of text and useful suggestions to this document.\n   Various examples are copied
    from other RFCs.\n   This document builds on one published and two unpublished
    drafts by\n   the same authors.\n"
  title: 11.  Acknowledgments
- contents:
  - "12.  Normative References\n   [RFC2119]    Bradner, S., \"Key words for use in
    RFCs to Indicate\n                Requirement Levels\", BCP 14, RFC 2119, March
    1997.\n   [RFC2177]    Leiba, B., \"IMAP4 IDLE command\", RFC 2177, June 1997.\n
    \  [RFC2342]    Gahrns, M. and C. Newman, \"IMAP4 Namespace\", RFC 2342,\n                May
    1998.\n   [RFC3501]    Crispin, M., \"INTERNET MESSAGE ACCESS PROTOCOL - VERSION\n
    \               4rev1\", RFC 3501, March 2003.\n   [RFC4314]    Melnikov, A.,
    \"IMAP4 Access Control List (ACL)\n                Extension\", RFC 4314, December
    2005.\n   [RFC4466]    Melnikov, A. and C. Daboo, \"Collected Extensions to\n
    \               IMAP4 ABNF\", RFC 4466, April 2006.\n   [RFC4551]    Melnikov,
    A. and S. Hole, \"IMAP Extension for\n                Conditional STORE Operation
    or Quick Flag Changes\n                Resynchronization\", RFC 4551, June 2006.\n
    \  [RFC5162]    Melnikov, A., Cridland, D., and C. Wilson, \"IMAP4\n                Extensions
    for Quick Mailbox Resynchronization\", RFC\n                5162, March 2008.\n
    \  [RFC5234]    Crocker, D., Ed., and P. Overell, \"Augmented BNF for\n                Syntax
    Specifications: ABNF\", STD 68, RFC 5234, January\n                2008.\n   [RFC5258]
    \   Leiba, B. and A. Melnikov, \"Internet Message Access\n                Protocol
    version 4 - LIST Command Extensions\", RFC 5258,\n                June 2008.\n
    \  [RFC5267]    Cridland, D. and C. King, \"Contexts for IMAP4\", RFC\n                5267,
    July 2008.\n   [RFC5423]    Newman, C. and R. Gellens, \"Internet Message Store\n
    \               Events\", RFC 5423, Month 2009.\n   [RFC5464]    Daboo, C., \"The
    IMAP METADATA Extension\", RFC 5464,\n                February 2009.\n"
  title: 12.  Normative References
- contents:
  - "13.  Informative References\n   [RFC5228]    Guenther, P., Ed., and T. Showalter,
    Ed., \"Sieve: An\n                Email Filtering Language\", RFC 5228, January
    2008.\n   [EMAIL-ARCH] Crocker, D., \"Internet Mail Architecture\", Work in\n
    \               Progress, October 2008.\n"
  title: 13.  Informative References
- contents:
  - "Authors' Addresses\n   Arnt Gulbrandsen\n   Oryx Mail Systems GmbH\n   Schweppermannstr.
    8\n   D-81671 Muenchen\n   Germany\n   EMail: arnt@oryx.com\n   Curtis King\n
    \  Isode Ltd\n   5 Castle Business Village\n   36 Station Road\n   Hampton, Middlesex
    \ TW12 2BX\n   UK\n   EMail: Curtis.King@isode.com\n   Alexey Melnikov\n   Isode
    Ltd\n   5 Castle Business Village\n   36 Station Road\n   Hampton, Middlesex  TW12
    2BX\n   UK\n   EMail: Alexey.Melnikov@isode.com\n"
  title: Authors' Addresses
