- title: __initial_text__
  contents:
  - '    Application-Layer Traffic Optimization (ALTO) Problem Statement

    '
- title: Abstract
  contents:
  - "Abstract\n   Distributed applications -- such as file sharing, real-time\n  \
    \ communication, and live and on-demand media streaming -- prevalent on\n   the\
    \ Internet use a significant amount of network resources.  Such\n   applications\
    \ often transfer large amounts of data through connections\n   established between\
    \ nodes distributed across the Internet with little\n   knowledge of the underlying\
    \ network topology.  Some applications are\n   so designed that they choose a\
    \ random subset of peers from a larger\n   set with which to exchange data.  Absent\
    \ any topology information\n   guiding such choices, or acting on suboptimal or\
    \ local information\n   obtained from measurements and statistics, these applications\
    \ often\n   make less than desirable choices.\n   This document discusses issues\
    \ related to an information-sharing\n   service that enables applications to perform\
    \ better-than-random peer\n   selection.\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (c) 2009 IETF Trust and the persons identified\
    \ as the\n   document authors.  All rights reserved.\n   This document is subject\
    \ to BCP 78 and the IETF Trust's Legal\n   Provisions Relating to IETF Documents\n\
    \   (http://trustee.ietf.org/license-info) in effect on the date of\n   publication\
    \ of this document.  Please review these documents\n   carefully, as they describe\
    \ your rights and restrictions with respect\n   to this document.  Code Components\
    \ extracted from this document must\n   include Simplified BSD License text as\
    \ described in Section 4.e of\n   the Trust Legal Provisions and are provided\
    \ without warranty as\n   described in the BSD License.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.  Introduction . . . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n     1.1.  Overview . . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  3\n     1.2.  State-of-the-Art . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n   2.  Definitions  . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  4\n   3.  The Problem  . . . . . . . . . . . . . . . . . . . . . . .\
    \ . .  7\n   4.  Use Cases  . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ .  8\n     4.1.  File sharing . . . . . . . . . . . . . . . . . . . . . . .\
    \  8\n     4.2.  Cache/Mirror Selection . . . . . . . . . . . . . . . . . .  8\n\
    \     4.3.  Live Media Streaming . . . . . . . . . . . . . . . . . . .  8\n  \
    \   4.4.  Real-Time Communications . . . . . . . . . . . . . . . . .  9\n    \
    \ 4.5.  Distributed Hash Tables  . . . . . . . . . . . . . . . . .  9\n   5. \
    \ Aspects of the Problem . . . . . . . . . . . . . . . . . . . .  9\n     5.1.\
    \  Information Provided by an ALTO Service  . . . . . . . . .  9\n     5.2.  ALTO\
    \ Service Providers . . . . . . . . . . . . . . . . . . 10\n     5.3.  ALTO Service\
    \ Implementation  . . . . . . . . . . . . . . . 10\n     5.4.  User Privacy .\
    \ . . . . . . . . . . . . . . . . . . . . . . 10\n     5.5.  Topology Hiding \
    \ . . . . . . . . . . . . . . . . . . . . . 11\n     5.6.  Coexistence with Caching\
    \ . . . . . . . . . . . . . . . . . 11\n   6.  Security Considerations  . . .\
    \ . . . . . . . . . . . . . . . . 11\n   7.  Contributors . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . 12\n   8.  Acknowledgments  . . . . . . . . .\
    \ . . . . . . . . . . . . . . 12\n   9.  Informative References . . . . . . .\
    \ . . . . . . . . . . . . . 13\n"
- title: 1.  Introduction
  contents:
  - '1.  Introduction

    '
- title: 1.1.  Overview
  contents:
  - "1.1.  Overview\n   Distributed applications, both peer-to-peer (P2P) and client/server\n\
    \   used for file sharing, real-time communication, and live and on-\n   demand\
    \ media streaming, use a significant amount of network capacity\n   and CPU cycles\
    \ in the routers [WWW.wired.fuel].  In contrast to\n   centralized applications,\
    \ distributed applications access resources\n   such as files or media relays\
    \ distributed across the Internet and\n   exchange large amounts of data in connections\
    \ that they establish\n   directly with nodes sharing such resources.\n   One\
    \ advantage of highly distributed systems results from the fact\n   that the resources\
    \ such systems offer are often available through\n   multiple replicas.  However,\
    \ applications generally do not have\n   reliable information of the underlying\
    \ network and thus have to\n   select among the available peers that provide such\
    \ replicas randomly\n   or based on information they deduce from partial observations\
    \ that,\n   in some situations, lead to suboptimal choices.  For example, one\n\
    \   peer-selection algorithm is based only on the measurements during\n   initial\
    \ connection establishment between two peers.  Since actual\n   data transmission\
    \ does not begin, the algorithm measures only the\n   round-trip time and cannot\
    \ reliably deduce actual throughput between\n   the peers.  Thus, such a peer-selection\
    \ algorithm that simply uses\n   round-trip time may result in a suboptimal choice\
    \ of peers.\n   Many of today's P2P systems use an overlay network consisting\
    \ of\n   direct peer connections.  Such connections often do not account for\n\
    \   the underlying network topology.  In addition to having suboptimal\n   performance,\
    \ such networks can lead to congestion and cause serious\n   inefficiencies. \
    \ As shown in [ACM.fear], traffic generated by popular\n   P2P applications often\
    \ cross network boundaries multiple times,\n   overloading links that are frequently\
    \ subject to congestion\n   [ACM.bottleneck].  Moreover, such transits, besides\
    \ resulting in a\n   poor experience for the user, can be quite costly to the\
    \ network\n   operator.\n   Recent studies ([ACM.ispp2p], [WWW.p4p.overview],\
    \ [ACM.ono]) show a\n   possible solution to this problem.  Internet Service Providers\n\
    \   (ISPs), network operators, or third parties can collect more reliable\n  \
    \ network information.  This information includes relevant information\n   such\
    \ as topology or link capacity.  Normally, such information\n   changes on a much\
    \ longer time scale than information used for\n   congestion control on the transport\
    \ layer.  Providing this\n   information to P2P applications can enable them to\
    \ apply better-than-\n   random peer selection with respect to the underlying\
    \ network\n   topology.  As a result, it may be possible to increase application\n\
    \   performance, reduce congestion, and decrease the overall amount of\n   traffic\
    \ across different networks.  Presumably, both applications and\n   the network\
    \ operator can benefit from such information.  Thus,\n   network operators have\
    \ an incentive to provide, either directly\n   themselves or indirectly through\
    \ a third party, such information;\n   applications have an incentive to use such\
    \ information.  This\n   document discusses issues related to an information-sharing\
    \ service\n   that enables applications to perform better-than-random peer\n \
    \  selection.\n   Section 2 provides definitions.  Section 3 introduces the problem.\n\
    \   Section 4 describes some use cases where both P2P applications and\n   network\
    \ operators benefit from a solution to such a problem.\n   Section 5 describes\
    \ the main issues to consider when designing such a\n   solution.  Note a companion\
    \ document to this document, \"Application-\n   Layer Traffic Optimization (ALTO)\
    \ Requirements\" [ALTO-REQS], goes\n   into the details of these issues.\n"
- title: 1.2.  State-of-the-Art
  contents:
  - "1.2.  State-of-the-Art\n   The papers [ACM.ispp2p], [PATH-SEL], and [WWW.p4p.overview]\
    \ present\n   examples of contemporary solution proposals that address the problem\n\
    \   described in this document.  Moreover, these proposals have\n   encouraging\
    \ simulation and field test results.  These and similar,\n   independent, solutions\
    \ all consist of two essential parts:\n   o  a discovery mechanism that a P2P\
    \ application uses to find a\n      reliable information source, and\n   o  a\
    \ protocol that P2P applications use to query such sources in\n      order to\
    \ retrieve the information needed to perform better-than-\n      random selection\
    \ of the endpoints providing a desired resource.\n   It is not clear how such\
    \ solutions will perform if deployed globally\n   on the Internet.  However, wide\
    \ adoption is unlikely without\n   agreement on a common solution, based upon\
    \ an open standard.\n"
- title: 2.  Definitions
  contents:
  - "2.  Definitions\n   The following terms have special meaning in the definition\
    \ of the\n   Application-Layer Traffic Optimization (ALTO) problem.\n   Application:\
    \  A distributed communication system (e.g., file sharing)\n      that uses the\
    \ ALTO service to improve its performance or quality\n      of experience while\
    \ improving resource consumption in the\n      underlying network infrastructure.\
    \  Applications may use the P2P\n      model to organize themselves, use the client-server\
    \ model, or use\n      a hybrid of both (i.e., a mixture between the P2P model\
    \ and the\n      client-server model).\n   Peer:  A specific participant in an\
    \ application.  Colloquially, a\n      peer refers to a participant in a P2P network\
    \ or system, and this\n      definition does not violate that assumption.  If\
    \ the basis of the\n      application is the client-server or hybrid model, then\
    \ the usage\n      of the terms \"client\" and \"server\" disambiguates the peer's\
    \ role.\n   P2P:  Peer-to-Peer.\n   Resource:  Content (such as a file or a chunk\
    \ of a file) or a server\n      process (for example, to relay a media stream\
    \ or perform a\n      computation) that applications can access.  In the ALTO\
    \ context, a\n      resource is often available in several equivalent replicas.\
    \  In\n      addition, different peers share these resources, often\n      simultaneously.\n\
    \   Resource Identifier:  An application-layer identifier used to\n      identify\
    \ a resource, no matter how many replicas exist.\n   Resource Provider:  For P2P\
    \ applications, a resource provider is a\n      specific peer that provides some\
    \ resources.  For client-server or\n      hybrid applications, a provider is a\
    \ server that hosts a resource.\n   Resource Consumer:  For P2P applications,\
    \ a resource consumer is a\n      specific peer that needs to access resources.\
    \  For client-server\n      or hybrid applications, a consumer is a client that\
    \ needs to\n      access resources.\n   Transport Address:  All address information\
    \ that a resource consumer\n      needs to access the desired resource at a specific\
    \ resource\n      provider.  This information usually consists of the resource\n\
    \      provider's IP address and possibly other information, such as a\n     \
    \ transport protocol identifier or port numbers.\n   Overlay Network:  A virtual\
    \ network consisting of direct connections\n      on top of another network and\
    \ established by a group of peers.\n   Resource Directory:  An entity that is\
    \ logically separate from the\n      resource consumer and that assists the resource\
    \ consumer to\n      identify a set of resource providers.  Some P2P applications\
    \ refer\n      to the resource directory as a P2P tracker.\n   ALTO Service: \
    \ Several resource providers may be able to provide the\n      same resource.\
    \  The ALTO service gives guidance to a resource\n      consumer and/or resource\
    \ directory about which resource\n      provider(s) to select in order to optimize\
    \ the client's\n      performance or quality of experience, while improving resource\n\
    \      consumption in the underlying network infrastructure.\n   ALTO Server:\
    \  A logical entity that provides interfaces to the\n      queries to the ALTO\
    \ service.\n   ALTO Client:  The logical entity that sends ALTO queries.  Depending\n\
    \      on the architecture of the application, one may embed it in the\n     \
    \ resource consumer and/or in the resource directory.\n   ALTO Query:  A message\
    \ sent from an ALTO client to an ALTO server; it\n      requests guidance from\
    \ the ALTO service.\n   ALTO Response:  A message that contains guiding information\
    \ from the\n      ALTO service as a reply to an ALTO query.\n   ALTO Transaction:\
    \  A transaction that consists of an ALTO query and\n      the corresponding ALTO\
    \ response.\n   Local Traffic:  Traffic that stays within the network infrastructure\n\
    \      of one Internet Service Provider (ISP).  This type of traffic\n      usually\
    \ results in the least cost for the ISP.\n   Peering Traffic:  Internet traffic\
    \ exchanged by two Internet Service\n      Providers whose networks connect directly.\
    \  Apart from\n      infrastructure and operational costs, peering traffic is\
    \ often\n      free to the ISPs, within the contract of a peering agreement.\n\
    \   Transit Traffic:  Internet traffic exchanged on the basis of economic\n  \
    \    agreements amongst Internet Service Providers (ISPs).  An ISP\n      generally\
    \ pays a transit provider for the delivery of traffic\n      flowing between its\
    \ network and remote networks to which the ISP\n      does not have a direct connection.\n\
    \   Application Protocol:  A protocol used by the application for\n      establishing\
    \ an overlay network between the peers and exchanging\n      data on it, as well\
    \ as for data exchange between peers and\n      resource directories, if applicable.\
    \  These protocols play an\n      important role in the overall ALTO architecture.\
    \  However,\n      defining them is out of the scope of the ALTO WG.\n   ALTO\
    \ Client Protocol:  The protocol used for sending ALTO queries and\n      ALTO\
    \ replies between an ALTO client and ALTO server.\n   Provisioning Protocol: \
    \ A protocol used for populating the ALTO\n      server with information.\n  \
    \                                           +------+\n                       \
    \                   +-----+   | Peers\n          +-----+       +------+    +=====|\
    \     |-*-+\n          |     |.......|      |====+     +-*-*-+ *\n          +-----+\
    \       +------+    |       * *****\n        Source of        ALTO       |   \
    \    *\n        Information      Server     |     +-*---+\n                  \
    \                  +=====|     | Resource Directory\n                        \
    \                  +-----+ (Tracker, proxy)\n        Legend:\n        === ALTO\
    \ client protocol\n        *** Application protocol (out of scope)\n        ...\
    \ Provisioning or initialization (out of scope)\n     Figure 1: Overview of Protocol\
    \ Interaction between ALTO Elements\n   Figure 1 shows the scope of the ALTO client\
    \ protocol: peers or\n   resource directories can use such a protocol as ALTO\
    \ clients to query\n   an ALTO server.  The mapping of topological information\
    \ onto an ALTO\n   service as well as the application protocol interaction between\
    \ peers\n   and resource directories are out of scope for the ALTO client\n  \
    \ protocol.\n"
- title: 3.  The Problem
  contents:
  - "3.  The Problem\n   Network engineers have been facing the problem of traffic\n\
    \   optimization for a long time and have designed mechanisms like MPLS\n   [RFC3031]\
    \ and Diffserv [RFC3260] to deal with it.  The problem these\n   protocols address\
    \ consists in finding (or setting) optimal routes (or\n   optimal queues in routers)\
    \ for packets traveling between specific\n   source and destination addresses.\
    \  Solutions are based on\n   requirements such as low latency, high reliability,\
    \ and priority.\n   Such solutions are usually implemented at the link and network\
    \ layers\n   and tend to be almost transparent.\n   However, distributed applications\
    \ in general and, in particular,\n   bandwidth-greedy P2P applications that are\
    \ used, for example, for\n   file sharing, cannot directly use the aforementioned\
    \ techniques.  By\n   cooperating with external services that are aware of the\
    \ network\n   topology, applications could greatly improve the traffic they\n\
    \   generate.  In fact, when a P2P application needs to establish a\n   connection,\
    \ the logical target is not a stable host, but rather a\n   resource (e.g., a\
    \ file or a media relay) that can be available in\n   multiple instances on different\
    \ peers.  Selection of a good host from\n   an overlay topological proximity has\
    \ a large impact on the overall\n   traffic generated.\n      Note that while\
    \ traffic considerations are important, several\n      other factors also play\
    \ a role on the performance experienced by\n      users of distributed applications.\
    \  These include the need to\n      avoid overloading individual nodes, fetching\
    \ rare pieces of a file\n      before those pieces are available at a multiplicity\
    \ of nodes, and\n      so on.  However, better information about topological conditions\n\
    \      does improve the overall selection algorithm on an important\n      aspect.\n\
    \   Better-than-random peer selection is helpful in the initial phase of\n   the\
    \ process.  Consider a P2P protocol in which a querying peer\n   receives a list\
    \ of candidate destinations where a resource resides.\n   From this list, the\
    \ peer will derive a smaller set of candidates to\n   connect to and exchange\
    \ information with.  In another example, a\n   streaming video client may be provided\
    \ with a list of destinations\n   from which it can stream content.  In both cases,\
    \ the use of topology\n   information in an early stage will allow applications\
    \ to improve\n   their performance and will help ISPs make a better use of their\n\
    \   network resources.  In particular, an economic goal for ISPs is to\n   reduce\
    \ the transit traffic on interdomain links.\n   Addressing the Application-Layer\
    \ Traffic Optimization (ALTO) problem\n   means, on the one hand, deploying an\
    \ ALTO service to provide\n   applications with information regarding the underlying\
    \ network and,\n   on the other hand, enhancing applications in order to use such\n\
    \   information to perform better-than-random selection of the endpoints\n   with\
    \ which they establish connections.\n"
- title: 4.  Use Cases
  contents:
  - '4.  Use Cases

    '
- title: 4.1.  File sharing
  contents:
  - "4.1.  File sharing\n   File-sharing applications allow users to search for content\
    \ shared by\n   other users and to download respective resources from other users.\n\
    \   For instance, search results can consist of many instances of the\n   same\
    \ file (or chunk of a file) available from multiple sources.  The\n   goal of\
    \ an ALTO solution is to help peers find the best ones\n   according to the underlying\
    \ networks.\n   On the application side, integration of ALTO functionalities may\n\
    \   happen at different levels.  For example, in the completely\n   decentralized\
    \ Gnutella network, selection of the best sources is\n   totally up to the user.\
    \  In systems like BitTorrent and eDonkey,\n   central elements such as trackers\
    \ or servers act as mediators.\n   Therefore, in the former case, improvement\
    \ would require modification\n   in the applications, while in the latter it could\
    \ just be implemented\n   in some central elements.\n"
- title: 4.2.  Cache/Mirror Selection
  contents:
  - "4.2.  Cache/Mirror Selection\n   Providers of popular content, like media and\
    \ software repositories,\n   usually resort to geographically distributed caches\
    \ and mirrors for\n   load balancing.  Today, selection of the proper mirror/cache\
    \ for a\n   given user is based on inaccurate geolocation data, on proprietary\n\
    \   network-location systems, or is often delegated to the user herself.\n   An\
    \ ALTO solution could be easily adopted to ease such a selection in\n   an automated\
    \ way.\n"
- title: 4.3.  Live Media Streaming
  contents:
  - "4.3.  Live Media Streaming\n   P2P applications for live streaming allow users\
    \ to receive multimedia\n   content produced by one source and targeted to multiple\
    \ destinations,\n   in a real-time or near-real-time way.  This is particularly\
    \ important\n   for users or networks that do not support multicast.  Peers often\n\
    \   participate in the distribution of the content, acting as both\n   receivers\
    \ and senders.  The goal of an ALTO solution is to help a\n   peer to find effective\
    \ communicating peers that exchange the media\n   content.\n"
- title: 4.4.  Real-Time Communications
  contents:
  - "4.4.  Real-Time Communications\n   P2P real-time communications allow users to\
    \ establish direct media\n   flows for real-time audio, video, and real-time text\
    \ calls or to have\n   text chats.  In the basic case, media flows directly between\
    \ the two\n   endpoints.  Unfortunately, however, a significant portion of users\n\
    \   have limited access to the Internet due to NATs, firewalls, or\n   proxies.\
    \  Thus, other elements need to relay the media.  Such media\n   relays are distributed\
    \ over the Internet with public addresses.  An\n   ALTO solution needs to help\
    \ peers find the best relays.\n"
- title: 4.5.  Distributed Hash Tables
  contents:
  - "4.5.  Distributed Hash Tables\n   Distributed hash tables (DHTs) are a class\
    \ of overlay algorithms used\n   to implement lookup functionalities in popular\
    \ P2P systems, without\n   using centralized elements.  In such systems, a peer\
    \ maintains the\n   addresses of a set of other peers participating in the same\
    \ DHT in a\n   routing table, sorted according to specific criteria.  An ALTO\n\
    \   solution can provide valuable information for DHT algorithms.\n"
- title: 5.  Aspects of the Problem
  contents:
  - "5.  Aspects of the Problem\n   This section introduces some aspects of the problem\
    \ that some people\n   may not be aware of when they first start studying the\
    \ problem space.\n"
- title: 5.1.  Information Provided by an ALTO Service
  contents:
  - "5.1.  Information Provided by an ALTO Service\n   The goal of an ALTO service\
    \ is to provide applications with\n   information they can use to perform better-than-random\
    \ peer\n   selection.  In principle, there are many types of information that\n\
    \   can help applications in peer selection.  However, not all of the\n   information\
    \ to be conveyed is amenable to an ALTO-like service.  More\n   specifically,\
    \ information that can change very rapidly, such as\n   transport-layer congestion,\
    \ is out of scope for an ALTO service.\n   Such information is better suited to\
    \ be transferred through an in-\n   band technique at the transport layer instead\
    \ of an ALTO-like, out-\n   of-band technique at the application layer.  An ALTO\
    \ solution for\n   congestion will either have outdated information or must be\
    \ contacted\n   too frequently by applications.  And finally, information such\
    \ as\n   end-to-end delay and available bandwidth can be more accurately\n   measured\
    \ by applications, themselves.\n   The kind of information that is meaningful\
    \ to convey to applications\n   via an out-of-band ALTO service is any information\
    \ that applications\n   cannot easily obtain themselves and that changes on a\
    \ much longer\n   time scale than the instantaneous information used for congestion\n\
    \   control on the transport layer.  Examples for such information are\n   operator's\
    \ policies, geographical location or network proximity\n   (e.g., the topological\
    \ distance between two peers), the transmission\n   costs associated with sending/receiving\
    \ a certain amount of data to/\n   from a peer, or the remaining amount of traffic\
    \ allowed by a peer's\n   operator (e.g., in case of quotas or limited flat-rate\
    \ pricing\n   models).\n"
- title: 5.2.  ALTO Service Providers
  contents:
  - "5.2.  ALTO Service Providers\n   At least three different kinds of entities can\
    \ provide ALTO services:\n   1.  Network operators.  Network operators usually\
    \ have full knowledge\n       of the network they administer and are aware of\
    \ their network\n       topology and policies.\n   2.  Third parties.  Third parties\
    \ are entities separate from network\n       operators but that may either have\
    \ collected network information\n       or have arrangements with network operators\
    \ to learn the network\n       information.  Examples of such entities are content-delivery\n\
    \       networks like Akamai, which control wide and highly distributed\n    \
    \   infrastructures, or companies providing an ALTO service on behalf\n      \
    \ of ISPs.\n   3.  User communities.  User communities run distributed algorithms,\n\
    \       for example, for estimating the topology of the Internet.\n"
- title: 5.3.  ALTO Service Implementation
  contents:
  - "5.3.  ALTO Service Implementation\n   It is important for the reader to understand\
    \ there are significant\n   user communities that expect an ALTO server to be\
    \ a centralized\n   service.  Likewise, there are other user communities that\
    \ expect the\n   ALTO service be a distributed service, possibly even based on\
    \ or\n   integrating with a P2P service.\n   As a result, one can reasonably expect\
    \ there to be some sort of\n   service-discovery mechanism to go along with the\
    \ ALTO protocol\n   definition.\n"
- title: 5.4.  User Privacy
  contents:
  - "5.4.  User Privacy\n   On the one hand, there are data elements an ALTO client\
    \ could provide\n   in its query to an ALTO server that could help increase the\
    \ level of\n   accuracy in the replies.  For example, if the querying client\n\
    \   indicates what kind of application it is using (e.g., real-time\n   communications\
    \ or bulk data transfer), the server will be able to\n   indicate priorities in\
    \ its replies, accommodating the requirements of\n   the traffic the application\
    \ will generate.  On the other hand,\n   applications might consider such information\
    \ private.  In addition,\n   some applications may not know a priori what kind\
    \ of request they\n   will be making.\n"
- title: 5.5.  Topology Hiding
  contents:
  - "5.5.  Topology Hiding\n   Operators, with their intimate knowledge of their network\
    \ topology,\n   can play an important role in addressing the ALTO problem.  However,\n\
    \   operators often consider revealing details of such network\n   information\
    \ to be confidential.\n"
- title: 5.6.  Coexistence with Caching
  contents:
  - "5.6.  Coexistence with Caching\n   Caching is an approach to improving traffic\
    \ generated by\n   applications, and it requires large amounts of data transfers.\
    \  In\n   some cases, such techniques have proven to be extremely effective in\n\
    \   both enhancing user experience and saving network resources.\n   A cache,\
    \ either explicitly or transparently, replaces the content\n   source.  Thus,\
    \ a cache must, in principle, use and support the same\n   protocol as the querying\
    \ peer.  That is, if a cache stores web\n   content, it must present an HTTP interface\
    \ to the web client.  Any\n   cache solution for a given protocol needs to present\
    \ that same\n   protocol to the client.  Said differently, each caching solution\
    \ for\n   a different protocol needs to implement that specific protocol.  For\n\
    \   this reason, one can only reasonably expect caching solutions for the\n  \
    \ most popular protocols, such as HTTP and BitTorrent.\n   It is extremely important\
    \ to realize that caching and ALTO are\n   entirely orthogonal.  ALTO, especially\
    \ if it is aware of caches, can\n   in fact direct clients to nearby caches where\
    \ the user could get a\n   much better quality of experience.\n"
- title: 6.  Security Considerations
  contents:
  - "6.  Security Considerations\n   This document is neither a requirements document\
    \ nor a protocol\n   specification.  However, we believe it is important for the\
    \ reader to\n   understand areas of security and privacy that will be important\
    \ for\n   the design and implementation of an ALTO solution.  Moreover, issues\n\
    \   such as digital rights management are out of scope for ALTO, as they\n   are\
    \ not technically enforceable at this level.\n   Some environments and use cases\
    \ of ALTO may require client or server\n   authentication before providing sensitive\
    \ information.  In order to\n   support those environments interoperably, the\
    \ ALTO requirements\n   document [ALTO-REQS] outlines minimum-to-implement authentication\
    \ and\n   other security requirements.\n   Applications can decide to rely on\
    \ information provided by an ALTO\n   server to enhance the peer-selection process.\
    \  In principle, this\n   enables the ALTO service that provides such information\
    \ to influence\n   the behavior of the application, basically letting a third-party\
    \ --\n   the ALTO service provider -- take an important role in a distributed\n\
    \   system it was not previously involved in.\n   For example, in the case of\
    \ an ALTO server deployed and run by an\n   ISP, the P2P community might consider\
    \ such a server hostile because\n   the operator could:\n   o  use ALTO to prevent\
    \ content distribution and enforce copyrights;\n   o  redirect applications to\
    \ corrupted mediators providing malicious\n      content;\n   o  track connections\
    \ to perform content inspection or logging;\n   o  apply policies based on criteria\
    \ other than network efficiency.\n      For example, the service provider may\
    \ suggest routes suboptimal\n      from the user's perspective in order to avoid\
    \ peering points\n      regulated by inconvenient economic agreements.\n   It\
    \ is important to note there is no protocol mechanism to require\n   ALTO for\
    \ P2P applications.  If, for some reason, ALTO fails to\n   improve the performance\
    \ of P2P applications, ALTO will not gain\n   popularity and the P2P community\
    \ will not use it.\n   At the time of this writing, the privacy issues described\
    \ in\n   Section 5.4 are relevant for an ALTO solution.  Users may be\n   reluctant\
    \ to disclose sensitive information to an ALTO server.\n   Operators, on the other\
    \ hand, may not wish to disclose information\n   that would expose details of\
    \ their interior topology.  When exploring\n   the solution space in detail, one\
    \ needs to consider these issues so\n   that an ALTO protocol does not presume\
    \ mandatory information\n   disclosure, by either clients or servers.\n"
- title: 7.  Contributors
  contents:
  - "7.  Contributors\n   This document was initially edited by Enrico Marocco and\
    \ Vijay\n   Gurbani.  In the role of Working Group chairs, they have continued\
    \ to\n   provide significant edits and inputs to the current authors.\n"
- title: 8.  Acknowledgments
  contents:
  - "8.  Acknowledgments\n   Vinay Aggarwal and the P4P working group conducted the\
    \ research work\n   done outside the IETF.  Emil Ivov, Rohan Mahy, Anthony Bryan,\n\
    \   Stanislav Shalunov, Laird Popkin, Stefano Previdi, Reinaldo Penno,\n   Dimitri\
    \ Papadimitriou, Sebastian Kiesel, Greg DePriest, and many\n   others provided\
    \ insightful discussions, specific comments, and much\n   needed corrections.\n\
    \   Jan Seedorf and Sebastian Kiesel are partially supported by the NAPA-\n  \
    \ WINE project (Network-Aware P2P-TV Application over Wise Networks,\n   http://www.napa-wine.org),\
    \ a research project supported by the\n   European Commission under its 7th Framework\
    \ Program (contract no.\n   214412).  The views and conclusions contained herein\
    \ are those of the\n   authors and should not be interpreted as necessarily representing\
    \ the\n   official policies or endorsements, either expressed or implied, of\n\
    \   the NAPA-WINE project or the European Commission.\n   Thanks in particular\
    \ to Richard Yang for several reviews.\n"
- title: 9.  Informative References
  contents:
  - "9.  Informative References\n   [ACM.bottleneck]\n              Akella, A., Seshan,\
    \ S., and A. Shaikh, \"An Empirical\n              Evaluation of WideArea Internet\
    \ Bottlenecks\",\n              Proceedings of ACM SIGCOMM, October 2003.\n  \
    \ [ACM.fear]\n              Karagiannis, T., Rodriguez, P., and K. Papagiannaki,\n\
    \              \"Should ISPs fear Peer-Assisted Content Distribution?\",\n   \
    \           ACM USENIX IMC, Berkeley 2005.\n   [ACM.ispp2p]\n              Aggarwal,\
    \ V., Feldmann, A., and C. Scheideler, \"Can ISPs\n              and P2P systems\
    \ co-operate for improved performance?\",\n              ACM SIGCOMM Computer\
    \ Communications Review (CCR), 37:3,\n              pp. 29-40.\n   [ACM.ono] \
    \ Choffnes, D. and F. Bustamante, \"Taming the Torrent: A\n              practical\
    \ approach to reducing cross-ISP traffic in P2P\n              systems\", Proceedings\
    \ of ACM SIGCOMM, August 2008.\n   [ALTO-REQS]\n              Kiesel, S., Popkin,\
    \ L., Previdi, S., Woundy, R., and Y.\n              Yang, \"Application-Layer\
    \ Traffic Optimization (ALTO)\n              Requirements\", Work in Progress,\
    \ April 2009.\n   [PATH-SEL]\n              Saucez, D. and B. Donnet, \"The case\
    \ for an informed path\n              selection service\", Work in Progress, February\
    \ 2008.\n   [RFC3031]  Rosen, E., Viswanathan, A., and R. Callon, \"Multiprotocol\n\
    \              Label Switching Architecture\", RFC 3031, January 2001.\n   [RFC3260]\
    \  Grossman, D., \"New Terminology and Clarifications for\n              Diffserv\"\
    , RFC 3260, April 2002.\n   [WWW.p4p.overview]\n              Xie, H., Krishnamurthy,\
    \ A., Silberschatz, A., and R. Yang,\n              \"P4P: Explicit Communications\
    \ for Cooperative Control\n              Between P2P and Network Providers\",\n\
    \              <http://www.dcia.info/documents/P4P_Overview.pdf>.\n   [WWW.wired.fuel]\n\
    \              Glasner, J., \"P2P Fuels Global Bandwidth Binge\",\n          \
    \    April 2005, <http://www.wired.com>.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Jan Seedorf\n   NEC Laboratories Europe, NEC Europe Ltd.\n\
    \   Kurfuersten-Anlage 36\n   Heidelberg  69115\n   Germany\n   Phone: +49 (0)\
    \ 6221 4342 221\n   EMail: jan.seedorf@nw.neclab.eu\n   URI:   http://www.nw.neclab.eu\n\
    \   Eric W. Burger\n   Neustar Inc.\n   46000 Center Oak Plaza\n   Sterling, VA\
    \  20166-6579\n   USA\n   Phone:\n   Fax:   +1 530 267 7447\n   EMail: eburger@standardstrack.com\n\
    \   URI:   http://www.standardstrack.com\n"
