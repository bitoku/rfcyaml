- title: __initial_text__
  contents:
  - '                 Common Name Resolution Protocol (CNRP)

    '
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2002).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   People often refer to things in the real world by a common name\
    \ or\n   phrase, e.g., a trade name, company name, or a book title.  These\n \
    \  names are sometimes easier for people to remember and type than URLs.\n   Furthermore,\
    \ because of the limited syntax of URLs, companies and\n   individuals are finding\
    \ that the ones that might be most reasonable\n   for their resources are being\
    \ used elsewhere and so are unavailable.\n   For the purposes of this document,\
    \ a \"common name\" is a word or a\n   phrase, without imposed syntactic structure,\
    \ that may be associated\n   with a resource.\n   This effort is about the creation\
    \ of a protocol for client\n   applications to communicate with common name resolution\
    \ services, as\n   exemplified in both the browser enhancement and search site\n\
    \   paradigms.  Although the protocol's primary function is resolution,\n   it\
    \ is also intended to address issues of internationalization and\n   localization.\
    \  Name resolution services are not generic search\n   services and thus do not\
    \ need to provide complex Boolean query,\n   relevance ranking or similar capabilities.\
    \  The protocol is a simple,\n   minimal interoperable core.  Mechanisms for extension\
    \ are provided,\n   so that additional capabilities can be added.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.      Introduction . . . . . . . . . . . . . . . . .\
    \ . . . . . .  3\n   2.      Important Notes  . . . . . . . . . . . . . . . .\
    \ . . . . .  4\n   2.1     Terminology  . . . . . . . . . . . . . . . . . . .\
    \ . . . .  4\n   2.2     DTD is Definitive  . . . . . . . . . . . . . . . . .\
    \ . . .  4\n   2.3     Uniform Resource Identifiers . . . . . . . . . . . . .\
    \ . .  5\n   3.      Interaction Model  . . . . . . . . . . . . . . . . . . .\
    \ .  5\n   3.1     Services, Servers, Datasets and Referrals  . . . . . . . .\
    \  5\n   3.2     Requests and Responses . . . . . . . . . . . . . . . . . .  5\n\
    \   3.3     Transport Independence . . . . . . . . . . . . . . . . . .  6\n  \
    \ 3.4     Character encoding . . . . . . . . . . . . . . . . . . . .  6\n   3.5\
    \     Queries  . . . . . . . . . . . . . . . . . . . . . . . . .  7\n   3.6  \
    \   Hints  . . . . . . . . . . . . . . . . . . . . . . . . . .  7\n   4.     \
    \ Object Model . . . . . . . . . . . . . . . . . . . . . . .  8\n   4.1     Properties\
    \ . . . . . . . . . . . . . . . . . . . . . . . .  8\n   4.1.1   Core properties\
    \  . . . . . . . . . . . . . . . . . . . . .  8\n   4.1.2   Abstract and custom\
    \ properties . . . . . . . . . . . . . .  9\n   4.1.3   Base properties  . . .\
    \ . . . . . . . . . . . . . . . . . .  9\n   4.1.4   Common name string encoding\
    \ and equivalence rules  . . . . 11\n   4.2     Objects  . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . 11\n   4.2.1   Query  . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . 11\n   4.2.1.1 Logical operations within a Query \
    \ . . . . . . . . . . . . 12\n   4.2.2   Results  . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . 13\n   4.2.2.1 ResourceDescriptor . . . . . . . . . .\
    \ . . . . . . . . . . 13\n   4.2.3   Service  . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . 14\n   4.2.3.1 Datasets . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . 14\n   4.2.3.2 Servers  . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . 16\n   4.2.4   Status Messages  . . . . . . . . . . . . . . .\
    \ . . . . . . 19\n   4.2.4.1 Status of CNRP, Not the Transport  . . . . . . .\
    \ . . . . . 19\n   4.2.4.2 Codes and Description  . . . . . . . . . . . . . .\
    \ . . . . 19\n   4.2.4.3 Status Codes . . . . . . . . . . . . . . . . . . . .\
    \ . . . 19\n   4.2.5   Referral . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . 21\n   4.2.5.1 Loop Detection and Dataset Handling in Servers . . . . .\
    \ . 22\n   4.2.6   Discoverability: ServiceQuery and Schema . . . . . . . . .\
    \ 24\n   5.      XML DTD for CNRP . . . . . . . . . . . . . . . . . . . . . 26\n\
    \   6.      Examples . . . . . . . . . . . . . . . . . . . . . . . . . 28\n  \
    \ 6.1     Service Description Request  . . . . . . . . . . . . . . . 28\n   6.2\
    \     Sending A Query and Getting A Response . . . . . . . . . . 29\n   7.   \
    \   Transport  . . . . . . . . . . . . . . . . . . . . . . . . 30\n   7.1    \
    \ HTTP Transport . . . . . . . . . . . . . . . . . . . . . . 30\n   7.2     SMTP\
    \ Transport . . . . . . . . . . . . . . . . . . . . . . 31\n   8.      Registration:\
    \ application/cnrp+xml . . . . . . . . . . . . 31\n   9.      Security Considerations\
    \  . . . . . . . . . . . . . . . . . 32\n   10.     IANA Considerations  . . .\
    \ . . . . . . . . . . . . . . . . 32\n           References . . . . . . . . .\
    \ . . . . . . . . . . . . . . . 33\n   A.      Appendix A: Well Known Property\
    \ and Type Registration\n           Templates  . . . . . . . . . . . . . . . .\
    \ . . . . . . . . 35\n   A.1     Properties . . . . . . . . . . . . . . . . .\
    \ . . . . . . . 35\n   A.2     Types  . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . 35\n   B.      Status Codes . . . . . . . . . . . . . . . . . .\
    \ . . . . . 37\n   B.1     Level 1 (Informative) Codes  . . . . . . . . . . .\
    \ . . . . 37\n   B.2     Level 2 (Success) Codes  . . . . . . . . . . . . . .\
    \ . . . 38\n   B.3     Level 3 (Partial Success) Codes  . . . . . . . . . . .\
    \ . . 38\n   B.4     Level 4 (Transient Failure) Codes  . . . . . . . . . . .\
    \ . 40\n   B.5     Level 5 (Permanent Failures) Codes . . . . . . . . . . . .\
    \ 40\n           Authors' Addresses . . . . . . . . . . . . . . . . . . . . 41\n\
    \           Full Copyright Statement . . . . . . . . . . . . . . . . . 42\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   Services are arising that offer a mapping from common names\
    \ to\n   Internet resources (e.g., as identified by a URI).  These services\n\
    \   often resolve common name categories such as company names, trade\n   names,\
    \ or common keywords.  Thus, such a resolution service may\n   operate in one\
    \ or a small number of categories or domains, or may\n   expect the client to\
    \ limit the resolution scope to a limited number\n   of categories or domains.\
    \  For example, the phrase \"Internet\n   Engineering Task Force\" is a common\
    \ name in the \"organization\"\n   category, as is \"Moby Dick\" in the book category.\n\
    \   Two classes of clients of such services are being built, browser\n   improvements\
    \ and web accessible front-end services.  Browser\n   enhancements modify the\
    \ \"open\" or \"address\" field of a browser so\n   that a common name can be\
    \ entered instead of a URL.  Internet search\n   sites integrate common name resolution\
    \ services as a complement to\n   search.  In both cases, these may be clients\
    \ of back-end resolution\n   services.  In the browser case, the browser must\
    \ talk to a service\n   that will resolve the common name.  The search sites are\
    \ accessed via\n   a browser.  In some cases, the search site may also be the\
    \ back-end\n   resolution service, but in others, the search site is a front-end\
    \ to\n   a collection of back-end services.\n   This effort is about the creation\
    \ of a protocol for client\n   applications to communicate with common name resolution\
    \ services, as\n   exemplified in both the browser enhancement and search site\n\
    \   paradigms.  Name resolution services are not generic search services\n   and\
    \ thus do not need to provide complex Boolean query, relevance\n   ranking or\
    \ similar capabilities.  The protocol is a simple, minimal\n   interoperable core.\
    \  Mechanisms for extension are provided, so that\n   additional capabilities\
    \ can be added.\n   Several other issues, while of importance to the deployment\
    \ of common\n   name resolution services, are outside of the resolution protocol\n\
    \   itself and are not in the initial scope of the proposed effort.\n   These\
    \ include discovery and selection of resolution service\n   providers, administration\
    \ of resolution services, name registration,\n   name ownership, and methods for\
    \ creating, identifying or insuring\n   unique common names.\n   For the purposes\
    \ of this document, a \"common name\" is a word or a\n   phrase, without imposed\
    \ syntactic structure, that may be associated\n   with a resource.  These common\
    \ names will be used primarily by\n   humans, as opposed to machine agents.  A\
    \ common name \"resolution\n   service\" handles these associations between common\
    \ names and data\n   (resources, information about resources, pointers to locations,\n\
    \   etc.).  A single common name may be associated with different data\n   records,\
    \ and more than one resolution service is expected to exist.\n   Any common name\
    \ may be used in any resolution service.\n   Common names are not URIs (Uniform\
    \ Resource Identifiers) in that they\n   lack the syntactic structure imposed\
    \ by URIs; furthermore, unlike\n   URNs, there is no requirement of uniqueness\
    \ or persistence of the\n   association between a common name and a resource.\
    \  (Note: common\n   names may be expressed in a URI, the syntax for which is\
    \ described in\n   RFC 3368 [9].)\n   This document will define a protocol for\
    \ the parameterized resolution\n   necessary to make common names useful.  \"\
    Resolution\" is defined as\n   the retrieval of data associated (a priori) with\
    \ descriptors that\n   match the input request.  \"Parameterized\" means the ability\
    \ to have a\n   multi-property descriptor.  Descriptors are not required to provide\n\
    \   unique identification, therefore 0 or more records may be returned to\n  \
    \ meet a specific input query.\n"
- title: 2. Important Notes
  contents:
  - '2. Important Notes

    '
- title: 2.1 Terminology
  contents:
  - "2.1 Terminology\n   The key words \"MUST\", \"MUST NOT\", \"REQUIRED\", \"SHALL\"\
    , \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\", \"MAY\", and\
    \ \"OPTIONAL\" in this\n   document are to be interpreted as described in RFC\
    \ 2119 [7].\n"
- title: 2.2 DTD is Definitive
  contents:
  - "2.2 DTD is Definitive\n   The descriptive portions of this document contain pieces\
    \ of XML that\n   are *illustrative examples only*.  Section 5 of this document\n\
    \   contains the XML DTD for CNRP, which is definitive.  If any\n   discrepancies\
    \ are found, the DTD wins.\n"
- title: 2.3 Uniform Resource Identifiers
  contents:
  - "2.3 Uniform Resource Identifiers\n   All URIs used within the CNRP protocol MUST\
    \ adhere to the\n   'absoluteURI' production found in the ABNF of [3].  CNRP does\
    \ not\n   define the semantics of a Base and therefore is not capable of\n   expressing\
    \ the 'URI-Reference' production.\n"
- title: 3. Interaction Model
  contents:
  - '3. Interaction Model

    '
- title: 3.1 Services, Servers, Datasets and Referrals
  contents:
  - "3.1 Services, Servers, Datasets and Referrals\n   CNRP assumes a particular interaction\
    \ model where a generalized\n   \"service\" provides common name resolution at\
    \ one or more actual\n   \"servers\".  If the data contained in all its servers\
    \ is identical\n   (mirrors), the service need not identify any particular subset\
    \ of\n   data.  If, however, the service provides different collections of\n \
    \  data through different servers (e.g., subsets, specialized\n   collections,\
    \ etc.), it SHOULD indicate what subsets of its data that\n   each server offers.\
    \  This is done by using URIs to uniquely\n   disambiguate one dataset from another.\
    \  If the service offers a copy\n   of a collection of data on agreement with\
    \ a foreign service, the\n   foreign service SHOULD provide a dataset URI to allow\
    \ the collection\n   to be identified as related to its own offerings.\n   CNRP\
    \ supports the concept of referrals.  This is where a server can\n   know that\
    \ another Service exists, within the same Service or\n   elsewhere, that can provide\
    \ further answers to a particular query but\n   decides to forward that fact onto\
    \ the client instead of chaining the\n   query for the client.  A referral is\
    \ sent along with the rest of the\n   results from a server (if any).  Referrals\
    \ to a service SHOULD\n   indicate the particular dataseturi that triggered the\
    \ referral, if it\n   is known.  See Section 4.2.5 for details on referrals and\
    \ loop\n   detection.\n"
- title: 3.2 Requests and Responses
  contents:
  - "3.2 Requests and Responses\n   The protocol consists of a simple request/response\
    \ mechanism.  A\n   client sends one of a few types of requests to a server which\n\
    \   responds with the results of that request.  All requests and\n   responses\
    \ are encoded with XML [8] using the DTD found in Section 5.\n   There are two\
    \ types of requests.  One is a general query for a\n   common-name.  The other\
    \ is a request for an object that describes the\n   service and its capabilities.\
    \  There is only one type of response\n   which is a set of results.  Results\
    \ can contain actual result items,\n   referrals and/or status messages.\n"
- title: 3.3 Transport Independence
  contents:
  - "3.3 Transport Independence\n   CNRP is completely encapsulated within its XML\
    \ definition, and is\n   therefore transport-independent in its specification.\
    \  However,\n   clients need to have a clearly defined means of bootstrapping\
    \ a\n   connection with a server.\n   It is possible to define special-purpose\
    \ applications that use CNRP\n   but which never need the HTTP bootstrapping method\
    \ outlined below;\n   those applications MUST define how to find the appropriate\n\
    \   server/port/protocol.  CNRP servers dedicated to those applications\n   may\
    \ provide service only on the ports/transport protocols defined by\n   the application.\n\
    \   All other (generic) CNRP clients and servers MUST support the HTTP\n   (Section\
    \ 7.1) transport on the default CNRP port of 1096.\n   Note that a particular\
    \ service may choose to change to a different\n   transport or port via statements\
    \ within a CNRP service description\n   request, but with initial contacts between\
    \ a client and a server\n   being over HTTP on port 1096.  For a short explanation\
    \ of how CNRP\n   employs HTTP, see Section 7.1 of this document.  If other transports\n\
    \   are used, they MUST be handled over a port other than the default\n   CNRP\
    \ port.\n"
- title: 3.4 Character Encoding
  contents:
  - "3.4 Character Encoding\n   To guarantee interoperability, the following provisions\
    \ apply:\n   o  XML queries and responses MUST be encoded as UTF-8.\n      Note:\
    \ As in any XML document, numeric character references may be\n      used.\n \
    \  o  The encoding of characters in the CNRP URI is based on UTF-8; for\n    \
    \  details, please see [9].\n   Any interfaces electing to present/accept protocol\
    \ elements in other\n   representations are responsible for accurate transcoding\
    \ for use in\n   CNRP protocol elements, per the above provisions.\n"
- title: 3.5 Queries
  contents:
  - "3.5 Queries\n   Queries are sent by the client to the server.  There are two\
    \ types of\n   queries.\n   1.  A `special' initial query that establishes the\
    \ schema for a\n       particular CNRP database and communicates that to the client.\n\
    \       The CNRP client will send this query, and in turn receive an XML\n   \
    \    document defining the query properties that the database\n       supports.\
    \  (In CNRP, XML [8] is used to define and express all\n       objects.)  This\
    \ query is called the 'servicequery' in the DTD.\n       In the case where a client\
    \ does not know anything about the\n       Service, the client MAY assume that\
    \ it can at least issue the\n       request via HTTP.\n   2.  A `standard' query,\
    \ which is the submission of the CNRP search\n       string to the database. \
    \ The query will conform to the schema\n       that MAY have been previously retrieved\
    \ from the service.\n   There will be a set of query properties, listed below,\
    \ treated as\n   hints by the server.  Note: a CNRP database will accept any correctly\n\
    \   encoded CNRP query property; the extent to which a query result is\n   responsive\
    \ to those properties is a service differentiator.  The base\n   properties that\
    \ are always supported are common name, language,\n   geography, category, and\
    \ range (start and length of the result set).\n   CNRP allows database service\
    \ providers to create unique data types\n   and expose them to any CNRP client\
    \ via the CNRP schema XML documents.\n"
- title: 3.6 Hints
  contents:
  - "3.6 Hints\n   A hint is an assertion by the user about himself, herself or itself\n\
    \   and the context in which he/she/it is operating.  There is no data\n   type\
    \ `hint'; a hint is expressed within the structure of the query\n   itself and\
    \ is limited or enabled by the richness of the defined query\n   namespace.  In\
    \ effect, a query and any property within it is a hint.\n   For example, the \"\
    language\" property can be given as a hint in a\n   query; this may be used to\
    \ order search results.  If one wants\n   results first in US English followed\
    \ by European French and finally\n   South American Spanish, the following can\
    \ be included in the query:\n      <property name=\"language\" type=\"rfc1766\"\
    >en-US</property>\n      <property name=\"language\" type=\"rfc1766\">fr-FR</property>\n\
    \      <property name=\"language\" type=\"rfc1766\">sp-MX</property>\n   Note\
    \ that the property statements say nothing about whether the\n   language is primary,\
    \ secondary, etc.  In this example, the ordering\n   of the statement controls\
    \ that--the first statement, being first,\n   means that US English is the primary\
    \ language.  The second statement\n   specifies the second region/language, and\
    \ so on.  *But this is only\n   an example.*  The extent to which hints are supported\
    \ (or not) is a\n   service differentiator.\n   The fact that a hint exists does\
    \ not mean that a CNRP database must\n   respond to it.  This best-effort approach\
    \ is similar to relevance\n   ranking in a search engine (high precision, low\
    \ recall); hints are\n   similar to a search engine's selection criteria.  CNRP\
    \ services will\n   attempt to return the results \"closest\" to the selection\
    \ criteria.\n   This is quite different from a SQL database approach where a SQL\n\
    \   query returns the entire results set and each result in the set must\n   match\
    \ all the requirements expressed by the qualifier (the SQL WHERE\n   clause).\n"
- title: 4. Object Model
  contents:
  - '4. Object Model

    '
- title: 4.1 Properties
  contents:
  - "4.1 Properties\n   In CNRP, objects are property lists.  A property is a named\n\
    \   attribute.  A property also has a well-defined type.  Some properties\n  \
    \ can be part of the query or the results list or both.  For\n   simplicity, CNRP\
    \ is limiting property values to string values.\n"
- title: 4.1.1 Core Properties
  contents:
  - "4.1.1 Core Properties\n   CNRP introduces a set of core properties.  Core properties\
    \ are the\n   minimal set of properties that all CNRP services MUST support in\n\
    \   order to reach CNRP compliance.  Hence, the core properties define\n   the\
    \ level of interoperability between all CNRP services.  The core\n   properties\
    \ are:\n   1.  CommonName: the common name associated with a resource.\n   2.\
    \  ID: an opaque string that serves as a unique identifier for a\n       result\
    \ from a Service (typically a database ID).  The ID is not\n       globally unique,\
    \ nor necessarily persistent (e.g., between\n       queries at a given Service).\n\
    \   3.  resourceURI: An 'absoluteURI' as defined in the collected ABNF\n     \
    \  found in RFC 2396 [3].\n   4.  description: A free text description of the\
    \ resource.\n"
- title: 4.1.2 Abstract and Custom Properties
  contents:
  - "4.1.2 Abstract and Custom Properties\n   In addition to core properties, CNRP\
    \ introduces the notion of\n   abstract properties.  The abstract property element\
    \ provides schema\n   extensibility beyond the core properties.  The notion of\
    \ abstract\n   property is extremely important in CNRP since it enables a wider\n\
    \   range of CNRP based services than those based on the core properties.\n  \
    \ To create concrete custom properties, a CNRP service must define a\n   property\
    \ name and a property type.  Therefore, there are really two\n   ways to create\
    \ a custom property.  The first way is to create a new\n   property name and define\
    \ at least one type for it.  Another way is to\n   extend an existing property\
    \ by defining a new type.  The \"geography\"\n   property discussed in the next\
    \ section is an example of a multi-type\n   property.  Note that a type is only\
    \ applicable to the property it is\n   defined for.  If a new property is defined,\
    \ a new type MUST be\n   defined even though the value set for that type may be\
    \ identical to\n   an existing type for an existing property.  In other words,\
    \ types are\n   scoped to a given property.  Custom properties MUST be registered\n\
    \   with IANA.  Details about the registration process for new properties\n  \
    \ can be found in Section 10.\n   For example, let us assume that a CNRP service\
    \ specialized on online\n   books would like to introduce the ISBN property of\
    \ type \"number\".\n   This property would encapsulate the ISBN number of the\
    \ book online\n   and would have he following XML representation:\n      <property\
    \ name=\"isbn\" type=\"number\">92347231</property>\n"
- title: 4.1.3 Base Properties
  contents:
  - "4.1.3 Base Properties\n   Illustrating the use of abstract property to extend\
    \ the core schema,\n   CNRP also defines a set of custom properties called base\
    \ properties.\n   In order to keep the requirements extremely simple, these properties\n\
    \   are not mandatory to implement to reach CNRP compliance.  Although,\n   these\
    \ properties are not required, it is expected that many services,\n   especially\
    \ large ones, will implement them.  An equally important\n   goal for introducing\
    \ additional properties is to provide a results\n   filtering mechanism.  This\
    \ is a requirement for large namespaces that\n   contain several million names.\n\
    \   The base properties and their types are defined in Appendix A but\n   listed\
    \ here for clarity:\n   o  Language:\n      The language associated with a resource.\
    \  The default type of this\n      property is 'RFC1766' and the vocabulary is\
    \ drawn from the list of\n      languages in RFC 1766 [4].  If RFC 1766 is updated,\
    \ then the\n      values listed in the updated version are also valid for this\
    \ type.\n   o  Geography:\n      The geographical region or location associated\
    \ with a resource.\n      Some of the possible types are listed below.  See Appendix\
    \ A for a\n      complete list of types specified by this document.\n      * \
    \ 'freeform': a free form expression for a geographical location\n         (e.g.,\
    \ \"palo alto in california\").\n      *  'ISO3166-1': geographical region expressed\
    \ using a standard\n         country code as defined by ISO3166-1 (e.g., \"US\"\
    ).\n      *  'ISO3166-2': value = a geographical region expressed using a\n  \
    \       standard region and country codes as defined by ISO3166-2\n         (e.g.,\
    \ \"US-CA\").\n      *  'lat-long': the latitude and longitude of a geographical\n\
    \         location.\n   o  Category:\n      The category associated with a resource.\
    \  There are large numbers\n      of possible types for this property.  Two possible\
    \ ones are:\n      1.  'freeform': a free form expression for a category (e.g.,\n\
    \          \"movies\").\n      2.  'NAICS': The North American Industry Code System.\n\
    \   o  Range:\n      The range is a results set control property.  The range property\n\
    \      is used to specify the starting point and the length of a results\n   \
    \   set (e.g., I want 5 records starting at the 10th record).  It\n      should\
    \ only ever have one type but, in the interest of\n      extensibility and consistency,\
    \ others can be created if there is a\n      need.  The default type is 'start-length'\
    \ which takes the form of\n      two integers separated by a dash.  The first\
    \ integer is the\n      starting number and the second is the number of values\
    \ to include.\n   o  Dataseturi: An absoluteURI (as defined in [3] that identifies\
    \ a\n      defined set of Common Names and associated data.\n   Note: For many\
    \ properties the default \"type\" is \"freeform\".  The free\n   form type value\
    \ is important because it allows very simple user\n   interface where the user\
    \ can enter a value in a text field.  It is up\n   to the service to interpret\
    \ the value correctly and take advantage of\n   it to increase the relevance of\
    \ results (using specialized\n   dictionaries for instance).\n"
- title: 4.1.4 Common Name String Encoding and Equivalence Rules
  contents:
  - "4.1.4 Common Name String Encoding and Equivalence Rules\n   CNRP specifies that\
    \ common name strings should be encoded using UTF-\n   8.  CNRP does not specify\
    \ any string equivalence rules for matching a\n   common name in the query against\
    \ a common name of a Resource.  String\n   equivalence rules are language and\
    \ service dependent.  They are\n   specific to relevance ranking algorithms, hence\
    \ treated as CNRP\n   services.  Consequently, string equivalence rules are not\
    \ part of the\n   CNRP protocol specification.  For example, the query member:\n\
    \      <commonname>bmw</commonname>\n   should be read as a selection criterion\
    \ for a resource with a common\n   name LIKE (similar to) the string \"bmw\" where\
    \ the exact definition of\n   the LIKE operator is intuitive, yet specific to\
    \ the queried CNRP\n   service.\n   It is also important to note that XML treats\
    \ whitespace as a special\n   case in many situations.  In some cases, it collapses\
    \ whitespace into\n   a single space.  Both client and server Implementors are\
    \ warned to\n   reference the XML standard for the various ramifications of using\n\
    \   whitespace in queries and/or results.\n"
- title: 4.2 Objects
  contents:
  - '4.2 Objects

    '
- title: 4.2.1 Query
  contents:
  - "4.2.1 Query\n   The Query object encapsulates all the query components such as\n\
    \   CommonName, ID, and any properties.  A Query cannot be empty.  A\n   Query\
    \ must contain either one and only one common name, or one and\n   only one ID.\
    \  A Query can also contain the custom properties defined\n   by a specific CNRP\
    \ service.\n   For example, a query for the first 5 resources whose common name\
    \ is\n   like \"bmw\" would be expressed as:\n   <query>\n           <commonname>bmw</commonname>\n\
    \           <property name=\"range\" type=\"start-length\">1-5</property>\n  \
    \ </query>\n"
- title: 4.2.1.1 Logical Operations Within a Query
  contents:
  - "4.2.1.1 Logical Operations Within a Query\n   The Query syntax is extremely simple.\
    \  CNRP does not extensively\n   support Boolean logic operator such as OR, AND\
    \ or NOT.  However,\n   there exist two implicit logical operations that can be\
    \ expressed\n   through the Query object and its properties.  First, a query with\n\
    \   multiple property-value pairs implicitly expresses an AND operation\n   on\
    \ the query terms.  For instance, the CNRP query to request all the\n   resources\
    \ whose common name is like \"bmw\", AND whose language is\n   \"German\" can\
    \ be expressed as:\n   <query>\n        <commonname>bmw</commonname>\n       \
    \ <property name=\"language\" type=\"rfc1766\">\n           de-DE\n        </property>\n\
    \   </query>\n   Note however, that because the server is only trying to best\
    \ match\n   the Query criteria, there is no guarantee that all or any of the\n\
    \   resources in the results match both requirements.\n   In addition, CNRP allows\
    \ the client to express a logical OR by\n   specifying multiple values for the\
    \ same property within the Query.\n   For example, the logical expression:\n \
    \     property = value1 OR property = value2 OR property = valueN\n   Will be\
    \ expressed as:\n   <property>value1</property>\n   <property>value2</property>\n\
    \   <property>valueN</property>\n   So if there are different properties expressed,\
    \ CNRP ANDs them; if\n   there are multiples instances of the same property expressed,\
    \ CNRP\n   ORs them.\n   It is important to underline that this form is only applicable\
    \ to\n   properties (with the exception of the CommonName itself which, even\n\
    \   though it is a property, is the entire point of the query).  In\n   particular,\
    \ logical OR operations on the common name are not\n   supported.  Note that the\
    \ ordering or the property-value pairs in the\n   query implies a precedence.\
    \  As a consequence, CNRP also introduces\n   one special string value: \"*\"\
    .  Not surprisingly, \"*\" means all\n   admissible values for the typed property.\
    \  For example, the following\n   query requests all the resources whose common\
    \ name is like BMW and\n   whose language is preferably in German or French or\
    \ any other\n   language.\n   <query>\n        <commonname>bmw</commonname>\n\
    \        <property name=\"language\" type=\"rfc1766\">de-DE</property>\n     \
    \   <property name=\"language\" type=\"rfc1766\">fr-FR</property>\n        <property\
    \ name=\"language\" type=\"rfc1766\">*</property>\n   </query>\n"
- title: 4.2.2 Results
  contents:
  - "4.2.2 Results\n   The results object is a container for CNRP results.  The type\
    \ of\n   objects contained in Results can be: ResourceDescriptor, Error,\n   Referral\
    \ and Schema.  Results from a CNRP service are ordered by\n   decreasing relevance.\
    \  When the results set contains results from\n   multiple CNRP services, the\
    \ results can no longer be ordered (since\n   relevance ranking is specific to\
    \ a given service).  In that case,\n   however, note that results originating\
    \ from the same service remain\n   ordered.\n"
- title: 4.2.2.1 ResourceDescriptor
  contents:
  - "4.2.2.1 ResourceDescriptor\n   The ResourceDescriptor object describes an Internet\
    \ resource (e.g., a\n   Web page, a person, any object identified by a URI). \
    \ Therefore, the\n   ResourceDescriptor MUST always include the resourceURI property.\
    \  The\n   ResourceDescriptor can also contain the commonname, URI, ID (the ID\n\
    \   of this entry in the service's database), description, language,\n   geography,\
    \ and category of the resource.  A ResourceDescriptor can\n   also be augmented\
    \ using custom properties and can reference a service\n   object to indicate its\
    \ origin (using the serviceRef element).  As\n   with referrals, a resourcedescriptor\
    \ block can also contain an ID\n   attribute that is used by a status message\
    \ to refer to a particular\n   resourcedescriptor.  Be careful not to confuse\
    \ this ID with the id\n   tag itself which refers to the database id of the actual\
    \ database\n   entry.\n   <results>\n        <service id=\"i0\">\n           \
    \  <serviceuri>http://cnrp.bar.com/</serviceuri>\n        </service>\n       \
    \ <resourcedescriptor id=\"i1\">\n             <commonname>bmw</commonname>\n\
    \             <id>foo.com:234364</id>\n             <resourceuri>http://www.bmw.de/</resourceuri>\n\
    \             <serviceref ref=\"i0\" />\n             <description>BMW Motorcycles,\
    \ International</description>\n             <property name=\"language\" type=\"\
    rfc1766\">de-DE</property>\n        </resourcedescriptor>\n        <referral>\n\
    \             <serviceref ref=\"i0\" />\n        </referral>\n   </results>\n"
- title: 4.2.3 Service
  contents:
  - "4.2.3 Service\n   The Service object provides an encapsulation of an instance\
    \ of a CNRP\n   service.  A service is uniquely identified through the serviceuri\
    \ tag\n   which MUST be included in the Service object.  A Service object MAY\n\
    \   include a a brief textual description of the service.  It MAY include\n  \
    \ datasets, servers and custom properties.\n   <service>\n        <serviceuri>http://cnrp.foo.com</serviceuri>\n\
    \        <description>foo.com is a CNRP service specialized on cocktail\n    \
    \       recipes</description>\n   </service>\n   The service object MAY also be\
    \ extended by including existing\n   properties to further describe the service.\
    \  For instance, a service\n   that focuses on French companies could be expressed\
    \ as:\n   <service>\n        <serviceuri>http://cnrp.foo.com</serviceuri>\n  \
    \      <property name=\"category\" type=\"freeform\">companies</property>\n  \
    \      <property name=\"geography\" type=\"ISO3166-1\">FR</property>\n   </service>\n"
- title: 4.2.3.1 Datasets
  contents:
  - "4.2.3.1 Datasets\n   The dataset object represents a set of CN-to-URI mappings.\
    \  For\n   example, the database of AOL keywords and their URIs constitute a\n\
    \   dataset.  The dataset object allows a CNRP implementation to uniquely\n  \
    \ identify the database(s) of mappings that it resolves.  In that\n   respect,\
    \ the notion of dataset allows a separation between resolution\n   and data, providing\
    \ the mechanism for a CNRP service to resolve\n   common-names on behalf of another\
    \ CNRP service or even multiple\n   services.  Conversely, the same dataset can\
    \ be served by two distinct\n   CNRP services.  Since a CNRP service can resolve\
    \ names within one or\n   more datasets, the service object can contain one or\
    \ more dataset\n   objects (zero if the dataset is not formally declared).\n \
    \  Within the service object, a dataset is uniquely defined using the\n   dataseturi\
    \ property.  Other properties, such as language and\n   description, can describe\
    \ the dataset further.  Like the service\n   object, the dataset object has an\
    \ ID attribute associated with it\n   that is unique within a particular XML message.\
    \  Like the service\n   object's ID attribute, this ID is used by resourcedescriptors\
    \ and\n   referrals to specify which service and/or dataset they came from or\n\
    \   are referring to.\n   Any service can be said to have a 'default dataset'\
    \ which is the\n   dataset that considered to have been used if a server simply\
    \ responds\n   to a client's query that didn't contain a dataset.  The 'default\n\
    \   dataset' can also be said to be the only dataset that is used by\n   Services\
    \ that don't support datasets at all.  This concept is useful\n   for clients\
    \ that intend on doing rigorous loop detection by way of\n   keeping a list of\
    \ visited service/dataset nodes.\n   This example illustrates how the service\
    \ object would look as it\n   defines two datasets:\n   <service id=\"i0\">\n\
    \    <serviceuri>http://acmecorp.com</serviceuri>\n    <dataset id=\"i1\">\n \
    \     <property name=\"dataseturi\">\n         urn:oid:1.2.3.4.666.5.4.3.1\n \
    \     </property>\n      <property name=\"language\">en-us</property>\n      <property\
    \ name=\"language\">en-gb</property>\n    </dataset>\n    <dataset id=\"i2\">\n\
    \      <property name=\"dataseturi\">\n         urn:oid:1.2.3.4.666.10.9.8.7.6\n\
    \      </property>\n      <property name=\"language\">fr</property>\n    </dataset>\n\
    \   </service>\n   The dataseturi property can also be used within the query as\
    \ a hint\n   to the service for the dataset within which the commonname should\
    \ be\n   resolved:\n   <query>\n      <commonname>toys r us</commonname>\n   \
    \   <property name=\"dataseturi\">urn:oid:1.2.3.4.666.5.4.3.1</property>\n   </query>\n\
    \   It is important to note that resolution rules (i.e., string\n   equivalence,\
    \ relevance ranking, etc.) are likely to be dataset\n   specific.  This is true\
    \ even if the resolution is provided by the\n   same service.\n   Another use\
    \ of the dataseturi property is in a referral.  In that\n   case, the datasetref\
    \ tag is used to pinpoint a specific dataset\n   within the service.\n   <referral>\n\
    \      <serviceref ref=\"i0\" /><datasetref ref=\"i1\" />\n   </referral>\n  \
    \ While the concept of datasets is important for services wishing to\n   make\
    \ their data available via other services, it is important to\n   remember that\
    \ the declaration and use of datasets is completely\n   optional.  Compliance\
    \ with the CNRP protocol does not require a\n   service object to define or reference\
    \ any dataset object.  The only\n   requirement for compliance is that a client\
    \ and/or server know the\n   format of the particular XML tags and deal with them\
    \ syntactically.\n   If it chooses to ignore them, then this is well within its\
    \ rights.\n"
- title: 4.2.3.2 Servers
  contents:
  - "4.2.3.2 Servers\n   The service object also encapsulates a list of server objects.\
    \  The\n   server object is used to describe a CNRP server or set of servers.\
    \  A\n   server is identified through its serveruri.  The URI used to identify\n\
    \   a server is not a CNRP URI [9], but instead, is a URI of the scheme\n   used\
    \ as the CNRP transport mechanism.  I.e., for a CNRP server that\n   will communicate\
    \ via the HTTP protocol to the host foo.com on port\n   6543, the serveruri would\
    \ be http://foo.com:6543.  If some other\n   information is required in order\
    \ for the correct transport to be\n   used, then that information can be communicated\
    \ via other properties.\n   Note that a Service MUST have at least one Server\
    \ that responds on\n   the default CNRP port in order for a client to get the\
    \ initial\n   Service object.\n   A server can serve one or more datasets declared\
    \ by its service.  The\n   served databases are specified using the dataseturi\
    \ property.  As for\n   other objects, a server can be further described using\
    \ descriptive\n   properties such as geography and description.  The following\
    \ XML\n   completes the service definition from the previous example by\n   defining\
    \ two CNRP servers.  One server is located in the US and the\n   other is located\
    \ in France.  The US server is specialized and only\n   serves the French dataset.\n\
    \     <servers>\n        <server>\n           <serveruri>cnrp://router.us.widgetco.com:4321</serveruri>\n\
    \           <property name=\"geography\" type=\"ISO3166-1\">US</property>\n  \
    \      </server>\n        <server>\n           <serveruri>cnrp://router.fr.acmeco.com:4321</serveruri>\n\
    \           <property name=\"geography\" type=\"ISO3166-1\">FR</property>\n  \
    \      </server>\n     </servers>\n   As we will see in a following section, the\
    \ Service object can contain\n   Schema objects.  These Schema objects fully describe\
    \ the query and\n   response interfaces implemented by a CNRP service.  In that\
    \ regard,\n   the Service object is essential to discoverability.  It constitutes\n\
    \   the main entry point for a CNRP client to dynamically discover the\n   capabilities\
    \ of a resolution service.  For that purpose, the Service\n   object can be returned\
    \ as part of the response to any resolution\n   query.  Furthermore, the Service\
    \ object is the dedicated response to\n   the specialized servicequery (see Section\
    \ 4.2.6).\n   Another use of Service is for other objects to indicate their CNRP\n\
    \   service of origin.  System messages, referrals and\n   resourcedescriptors\
    \ can include a reference to their Service object.\n   For example, imagine a\
    \ CNRP service that acts as a proxy for multiple\n   CNRP services.  For example,\
    \ it is a requirement that CNRP allows\n   aggregation of results from different\
    \ sources.  Consider one such\n   CNRP service that acts as a proxy for multiple\
    \ CNRP services.  In\n   this mode, the proxy service contacts each CNRP sub-service\
    \ in\n   parallel or serially.  Then, the proxy combines the individual result\n\
    \   sets into a unique response returned to the CNRP client.  Since the\n   aggregate\
    \ result set contains resourcedescriptors from different\n   services, the proxy\
    \ adds a servicereference tag within each\n   individual result to indicate their\
    \ service of origin.  In the event\n   one of the referred services resolves names\
    \ within multiple datasets,\n   it is possible for these objects to refer to a\
    \ specific dataset\n   within the service by using the datasetref tag.  This example\
    \ is of a\n   hybrid result set with resourcedescriptors referencing their service\n\
    \   and dataset of origin:\n   <?xml version=\"1.0\"?>\n   <!DOCTYPE cnrp PUBLIC\
    \ \"-//IETF//DTD CNRP 1.0//EN\"\n       \"http://ietf.org/dtd/cnrp-1.0.dtd\">\n\
    \   <cnrp>\n        <results>\n             <service id=\"i0\">\n            \
    \      <serviceuri>http://acmecorp.com</serviceuri>\n                  <dataset\
    \ id=\"i1\">\n                     <property name=\"dataseturi\">\n          \
    \            urn:oid:1.2.3.4.666.5.4.3.1\n                     </property>\n \
    \                 </dataset>\n                  <dataset id=\"i2\">\n        \
    \             <property name=\"dataseturi\">\n                      urn:oid:1.2.3.4.666.10.9.8.7.6\n\
    \                     </property>\n                  </dataset>\n            \
    \ </service>\n             <service id=\"i3\">\n                <serviceuri>http://serverfarm.acmecorp.com</serviceuri>\n\
    \             </service>\n             <service id=\"i4\">\n                 <serviceuri>http://servers.acmecorp.co.uk</serviceuri>\n\
    \                 <dataset id=\"i5\">\n                     <property name=\"\
    dataseturi\">\n                       urn:oid:1.2.3.4.666.5.4.3.1\n          \
    \           </property>\n                 </dataset>\n             </service>\n\
    \             <resourcedescriptor>\n                       <commonname>Fidonet</commonname>\n\
    \                       <id>1333459455</id>\n                       <resourceuri>http://www.fidonet.ca</resourceuri>\n\
    \                       <serviceref ref=\"i0\" /><datasetref ref=\"i1\" />\n \
    \                      <description>This is ye olde Canadian\n               \
    \         Fidonet</description>\n             </resourcedescriptor>\n        \
    \     <resourcedescriptor>\n                       <commonname>Fidonet</commonname>\n\
    \                       <id>1333459455</id>\n                       <resourceuri>http://host:port/bla</resourceuri>\n\
    \                       <serviceref ref=\"i3\" />\n                       <description>An\
    \ old Fidonet node</description>\n             </resourcedescriptor>\n       \
    \      <referral>\n                 <serviceref ref=\"i0\" /><datasetref ref=\"\
    i2\" />\n             </referral>\n        </results>\n   </cnrp>\n"
- title: 4.2.4 Status Messages
  contents:
  - '4.2.4 Status Messages

    '
- title: 4.2.4.1 Status of CNRP, Not the Transport
  contents:
  - "4.2.4.1 Status of CNRP, Not the Transport\n   The status messages defined here\
    \ are only applicable to operations\n   defined by CNRP itself.  If some feature\
    \ or operation is defined by\n   the transport (security via HTTP, mail failure\
    \ via SMTP, etc.), then\n   any status messages about that operation MUST be sent\
    \ in accordance\n   with that transport's reporting mechanism and not via CNRP.\n"
- title: 4.2.4.2 Codes and Description
  contents:
  - "4.2.4.2 Codes and Description\n   A Status object indicates a message to the\
    \ client in the results set.\n   The object encapsulates two values: a status\
    \ code and a description.\n   The description can contain a textual description\
    \ of the status being\n   communicated.  In many cases, additional diagnostic\
    \ information can\n   also be included.  No attempt is made to standardize the\
    \ description\n   of a given status code since the only programmatic element that\n\
    \   matters is the actual code.\n   A status message can also specify which other\
    \ CNRP element it refers\n   to by including a reference to the ID of the element\
    \ in question.\n   For example, if a Service block has an ID of \"i2\" and a status\n\
    \   message refers to that block, then it can put that ID in its ref\n   attribute.\n\
    \            <status code=\"x.y.z\" ref=\"i2\">\n                 The CNRP foo.com\
    \ database is temporarily unreachable\n            </status>\n"
- title: 4.2.4.3 Status Codes
  contents:
  - "4.2.4.3 Status Codes\n   The organization of status codes is taken from RFC 1893\
    \ [10] which\n   structures its codes in the form of x.yyy.zzz.  Taken from RFC\
    \ 1893\n   is the ABNF for the codes:\n             status-code = class \".\"\
    \ subject \".\" detail\n             class = \"2\"/\"3\"/\"4\"/\"5\"\n       \
    \      subject = 1*3digit\n             detail = 1*3digit\n   The top level codes\
    \ denote levels of severity of the status:\n   o  1.X.X Informational\n      *\
    \  The information conveyed by the code has no bearing or\n         indication\
    \ of the success or failure of any request.  It is\n         strictly for informational\
    \ purposes only.\n   o  2.X.X Success\n      *  The request was processed and\
    \ results were returned.  In most\n         cases, this status class won't be\
    \ sent since actual results\n         themselves denote success.  In other cases,\
    \ results were\n         returned but some information needs to be returned to\
    \ the\n         client.\n   o  3.X.X Partial Success\n      *  The request was\
    \ processed and results were returned.  In this\n         case though, some values\
    \ sent with the request were either\n         invalid or ignored but in a way\
    \ that the server still considers\n         the response to be a successful one\
    \ and not indicative of any\n         true error condition.\n   o  4.X.X Transient\
    \ Failure\n      *  The request was valid as sent, but some temporary event\n\
    \         prevents the successful completion of the request and/or\n         sending\
    \ of the results.  Sending in the future may be possible.\n   o  5.X.X Permanent\
    \ Failure\n      *  A permanent failure is one which is not likely to be resolved\n\
    \         by re-sending the request in its current form.  Some change to\n   \
    \      the request or the destination must be made for successful\n         request.\n\
    \   The second level codes denote the subject of the status messages.\n   This\
    \ value applies to each of the five classifications.  The subject\n   sub-code,\
    \ if recognized, must be reported even if the additional\n   detail provided by\
    \ the detail sub-code is not recognized.  The\n   enumerated values for the subject\
    \ sub-code are:\n   o  X.0.X Other or Undefined Status\n      *  No specific information\
    \ is available about what subject class\n         this message belongs to.\n \
    \  o  X.1.X Query Related\n      *  Any status related to some specific way in\
    \ which the query was\n         encoded or its values with the exception of properties.\n\
    \   o  X.2.X Service Related\n      *  Any status related to the service in which\
    \ this server is\n         cooperating in providing.\n   Appendix B contains a\
    \ list of all predefined status codes\n"
- title: 4.2.5 Referral
  contents:
  - "4.2.5 Referral\n   A Referral object in the results set is a place holder for\
    \ un-fetched\n   results from a different service and possibly dataset.  Referrals\n\
    \   typically occur when a CNRP server knows of another service capable\n   of\
    \ providing relevant results for the query and wants to notify the\n   client\
    \ about this possibility.  The client can decide whether it\n   wants to follow\
    \ the referral and resolve the extra results by\n   contacting the referred-to\
    \ service using the information contained\n   within the Referral object (a Service\
    \ object and possible\n   properties).  The Referral is a simple mechanism to\
    \ enable\n   hierarchical resolution as well as to join multiple resolution\n\
    \   services together.\n   <results>\n        <service id=\"i0\">\n          \
    \   <serviceuri>http://cnrp.bar.com/</serviceuri>\n             <dataset id=\"\
    i1\">\n                <property name=\"dataseturi\">\n                  urn:oid:1.3.6.1.4.1.782.1\n\
    \                </property>\n             </dataset>\n             <dataset id=\"\
    i2\">\n                <property name=\"dataseturi\">\n                  urn:oid:1.3.6.1.4.1.782.2\n\
    \                </property>\n             </dataset>\n        </service>\n  \
    \      <resourcedescriptor>\n             <commonname>bmw</commonname>\n     \
    \        <id>foo.com:234364</id>\n             <resourceuri>http://www.bmw.de/</resourceuri>\n\
    \             <serviceref ref=\"i0\" /><datasetref ref=\"i1\" />\n           \
    \  <description>BMW Motorcycles, International</description>\n             <property\
    \ name=\"language\" type=\"iso646\">de-DE</property>\n        </resourcedescriptor>\n\
    \        <referral>\n             <serviceref ref=\"i0\" /><datasetref ref=\"\
    i2\" />\n        </referral>\n   </results>\n   Like other CNRP objects, a referral\
    \ can be further described using\n   custom properties.  Like a resourcedescriptor,\
    \ a referral can have an\n   ID attribute that is used by a status message to\
    \ talk about a\n   particular referral block.\n"
- title: 4.2.5.1 Loop Detection and Dataset Handling in Servers
  contents:
  - "4.2.5.1 Loop Detection and Dataset Handling in Servers\n   Referrals in CNRP\
    \ can be handled in three ways:\n   o  application specific,\n   o  as hints only,\n\
    \   o  rigorous loop detection.\n   In the first two cases, the behavior of the\
    \ client, when it receives\n   a referral, is not defined in this memo.  The client\
    \ can chase the\n   referral in such a way as to treat it as a hint only.  In\
    \ this case,\n   datasets may or may not be handled.  Loop detection can be nothing\n\
    \   more than, \"Have I talked to this hostname before?\" or \"Stop after\n  \
    \ the 3rd referral\".  These two cases are most likely to apply to\n   simple\
    \ or constrained implementations where the clients and servers\n   have some a\
    \ priori knowledge of their capabilities.  Without such\n   knowledge there is\
    \ too much ambiguity vis-a-vis services and datasets\n   for clients to do reliable\
    \ loop detection.\n   The last case is where the client expects to talk to multiple\
    \ servers\n   that may know nothing about each other.  This case expresses the\n\
    \   basic semantics of what a server should tell a client if it\n   understands\
    \ datasets or referrals.  Since a referral specifies the\n   exact dataset to\
    \ which it is referring, a node in the list of visited\n   nodes is made up of\
    \ a serviceuri and a dataseturi.  Both of these\n   values need to be considered\
    \ during loop detection.  In the case\n   where a service does not support datasets,\
    \ the visited node is made\n   up of the service and the 'default dataset'.\n\
    \   The major thing to remember when doing loop detection across servers\n   is\
    \ that some servers may not understand datasets at all, while others\n   specifically\
    \ rely on them.  To help determine how loop detection\n   nodes should be marked,\
    \ three specific status messages have been\n   defined:\n   The 3.1.3 (Datasets\
    \ not supported) status message is used to denote\n   that the server does not\
    \ support datasets at all.  It is sent in\n   response to a query containing datasets.\
    \  The client should consider\n   that the server ignored the datasets and the\
    \ client should consider\n   this node to have been visited for all possible datasets\
    \ (including\n   the 'default' dataset).\n   The 3.1.4 (First dataset only supported)\
    \ status message is used by a\n   server to indicate the situation where a client\
    \ has included several\n   dataseturis in its query and the server can only support\
    \ one at a\n   time.  In this case, the server is explicitly stating that it used\n\
    \   the first dataseturi only.  The client should consider that only the\n   first\
    \ dataseturi specified was processed correctly.  The client\n   should consider\
    \ that the remaining datasets in the query were ignored\n   completely.  They\
    \ would need to be sent individually as referrals if\n   the client really cares\
    \ about those results.  Only the first\n   serviceuri/dataseturi pair should be\
    \ marked as visited.\n   The 3.1.5 (This dataset not supported) status message\
    \ is used to\n   indicate that a specific dataseturi sent in a query by a client\
    \ is\n   not supported by the server.  This serviceuri/dataseturi pair should\n\
    \   be considered as visited by the client.  If this message is sent in\n   reply\
    \ to a query specifying multiple datasets, the client should\n   behave the same\
    \ as if it received the 3.1.3 message from above.  It\n   should be considered\
    \ bad form for a server to send this status\n   message back in response to a\
    \ query with multiple datasets because it\n   is ambiguous.\n   While there is\
    \ no exact algorithm for loop detection that clients are\n   encouraged to support,\
    \ these status messages can be used by the\n   server to be clear about what Services\
    \ and Datasets it considers to\n   have been queried.  It is up to the client\
    \ to decide what to do with\n   these messages and how closely it attempts to\
    \ do loop detection.\n"
- title: '4.2.6 Discoverability: ServiceQuery and Schema'
  contents:
  - "4.2.6 Discoverability: ServiceQuery and Schema\n   A subclass of Query, the ServiceQuery\
    \ object supports the dynamic\n   discovery of a specific CNRP service's characteristics.\
    \  Note that\n   CNRP compliance does not require that a service fully implements\n\
    \   discoverability.  In particular, returning the Service object with\n   its\
    \ serviceuri constitutes a minimal yet sufficient compliant\n   implementation.\
    \  Nevertheless, we expect that advanced CNRP services\n   will choose to return\
    \ a full description of their supported\n   interfaces.\n   The complete response\
    \ to a servicequery returns the Service object\n   described in section 5.3.2\
    \ with the following schema information:\n   1.  The base and custom properties\
    \ used by the CNRP service (Property\n       schema),\n   2.  The properties used\
    \ to describe the Service object (Service\n       schema),\n   3.  The properties\
    \ that belong to the query interface (Query schema),\n   4.  The properties that\
    \ belong to a resource within the results\n       (Resource schema).\n   These\
    \ leads to the following new object definitions:\n   o  propertyschema -- A property\
    \ schema describes all the custom\n      properties that are part of the service.\n\
    \   o  propertydeclaration -- A property declaration describes a base or\n   \
    \   custom property used by the CNRP service.  A property declaration\n      has\
    \ a name and a type (the name and the type of the property that\n      it refers\
    \ to).  Note that as part of the property schema, one MUST\n      declare both\
    \ existing and newly defined properties.\n   o  propertyreference -- A property\
    \ reference is a reference to a\n      property declaration so that a given schema\
    \ (a service, query or\n      resource schema) can declare the property within\
    \ its interface.\n      Note that a property reference specify whether the use\
    \ of the\n      property is required or optional only.\n   o  serviceschema --\
    \ The service schema defines the properties used to\n      describe the service.\n\
    \   o  queryschema -- A query schema describes the structure of a query\n    \
    \  handled by the CNRP service.  The properties referred within the\n      query\
    \ schema are part of the query interface of the resolution\n      service.\n \
    \  o  resourcedescriptorschema -- A ResourceDescriptor schema describes\n    \
    \  the resource returned as a result by the CNRP service.\n   For example, a CNRP\
    \ query to discover a service's capabilities will\n   be in the form:\n   <cnrp>\
    \ <servicequery/> </cnrp>\n   And for a CNRP service for cocktail recipes in French,\
    \ the\n   corresponding response would be:\n   <service>\n        <serviceuri>http://cnrp.recipe.com</serviceuri>\n\
    \        <propertyschema>\n           <propertydeclaration id=\"i1\">\n      \
    \           <propertyname>language</propertyname>\n                 <propertytype>rfc1766</propertytype>\n\
    \           </propertydeclaration>\n           <propertydeclaration id=\"i2\"\
    >\n                 <propertyname>cocktailrecipe</propertyname>\n            \
    \     <propertytype>freeform</propertytype>\n           </propertydeclaration>\n\
    \        </propertyschema>\n        <queryschema>\n             <propertyreference\
    \ required=\"yes\" ref=\"i1\"/>\n        </queryschema>\n        <resourcedescriptorschema>\n\
    \             <propertyreference required=\"yes\" ref=\"i1\"/>\n             <propertyreference\
    \ required=\"yes\" ref=\"i2\"/>\n        </resourcedescriptorschema>\n   </service>\n\
    \   This response stipulates that the service accepts the property\n   language\
    \ as part of the query interface and returns\n   resourcedescriptors that contain\
    \ both the language and cocktailRecipe\n   properties.\n"
- title: 5. XML DTD for CNRP
  contents:
  - "5. XML DTD for CNRP\n   <!-- The document tag -->\n   <!ELEMENT cnrp (query|results|servicequery)>\n\
    \   <!-- Used to request a Service object -->\n   <!ELEMENT servicequery EMPTY>\n\
    \   <!-- A query can either request a schema, a specific record by -->\n   <!--\
    \ id, or a common-name with a set of properties (or         -->\n   <!-- assertions)\
    \ about the entity doing the query.             -->\n   <!ELEMENT query (id|(commonname,property*))>\n\
    \   <!ELEMENT id (#PCDATA)>\n   <!ELEMENT commonname (#PCDATA)>\n   <!-- NOTE:\
    \ CNRP defines several well known properties          -->\n   <!-- and types.\
    \ See Appendix A for details.                    -->\n   <!ELEMENT property (#PCDATA)>\n\
    \   <!-- The name of the property -->\n   <!ATTLIST property name CDATA #REQUIRED>\n\
    \   <!-- The type of the property -->\n   <!ATTLIST property type CDATA \"freeform\"\
    >\n   <!ELEMENT results (status? |\n                      ( service+,\n      \
    \                     ( status  | resourcedescriptor | referral )*\n         \
    \             )*\n                     )>\n   <!ELEMENT resourcedescriptor (commonname,id,resourceuri,\n\
    \       serviceref, datasetref?,\n       description,\n       property*)>\n  \
    \ <!ATTLIST resourcedescriptor id ID #IMPLIED>\n   <!-- The entire point of all\
    \ this... -->\n   <!ELEMENT resourceuri (#PCDATA)>\n   <!ELEMENT description (#PCDATA)>\n\
    \   <!ELEMENT referral (serviceref, datasetref?)>\n   <!ATTLIST referral id ID\
    \ #IMPLIED>\n   <!ELEMENT status (#PCDATA)>\n   <!ATTLIST status code CDATA #REQUIRED>\n\
    \   <!ATTLIST status ref IDREF #IMPLIED>\n   <!-- serviceRef is used to point\
    \ to one of a set of provided   -->\n   <!-- service objects. This is so that\
    \ a resource can point to  -->\n   <!-- which service it came from. We could include\
    \ the entire   -->\n   <!-- service object but then we would be repeating large\
    \       -->\n   <!-- amounts of information.                                 \
    \  -->\n   <!ELEMENT serviceref EMPTY>\n   <!ATTLIST serviceref ref IDREF #IMPLIED>\n\
    \   <!ELEMENT service (serviceuri, dataset*,\n      servers?,\n      description?,\n\
    \      property*,propertyschema?,queryschema?,resourcedescriptorschema?,\n   \
    \   serviceschema?)>\n   <!-- The time to live of the schema in seconds since\
    \ it was   -->\n   <!-- retrieved -->\n   <!ATTLIST service ttl CDATA \"0\">\n\
    \   <!ATTLIST service id ID #IMPLIED>\n   <!ELEMENT serviceuri (#PCDATA)>\n  \
    \ <!ELEMENT servers (server+)>\n   <!ELEMENT server (serveruri, property*)>\n\
    \   <!ELEMENT serveruri (#PCDATA)>\n   <!ELEMENT dataset (property*)>\n   <!ATTLIST\
    \ dataset id ID #IMPLIED>\n   <!ELEMENT datasetref EMPTY>\n   <!ATTLIST datasetref\
    \ ref IDREF #IMPLIED>\n   <!ELEMENT propertyschema (propertydeclaration*)>\n \
    \  <!ELEMENT propertydeclaration (propertyname, propertytype*)>\n   <!ATTLIST\
    \ propertydeclaration id ID #IMPLIED>\n   <!ELEMENT propertyname (#PCDATA)>\n\
    \   <!ELEMENT propertytype (#PCDATA)>\n   <!-- This specifies if the type is meant\
    \ to be the default -->\n   <!-- type. This is usually reserved for \"freeform\"\
    .        -->\n   <!ATTLIST propertytype default (no|yes) \"no\">\n   <!-- The\
    \ properties you can use in a query -->\n   <!ELEMENT queryschema (propertyreference*)>\n\
    \   <!-- The properties you can expect to see in an Resource -->\n   <!ELEMENT\
    \ resourcedescriptorschema (propertyreference*)>\n   <!-- The properties you can\
    \ expect to find in a Service  -->\n   <!-- definition -->\n   <!ELEMENT serviceschema\
    \ (propertyreference*)>\n   <!ELEMENT propertyreference EMPTY>\n   <!-- This specifies\
    \ if a property is required as part of -->\n   <!-- the query. -->\n   <!ATTLIST\
    \ propertyreference ref IDREF #REQUIRED>\n   <!ATTLIST propertyreference required\
    \ (no|yes) \"no\">\n"
- title: 6. Examples
  contents:
  - '6. Examples

    '
- title: 6.1 Service Description Request
  contents:
  - "6.1 Service Description Request\n   This is what the client sends when it is\
    \ requesting a servers schema.\n   <?xml version=\"1.0\"?>\n   <!DOCTYPE cnrp\
    \ PUBLIC \"-//IETF//DTD CNRP 1.0//EN\"\n    \"http://ietf.org/dtd/cnrp-1.0.dtd\"\
    >\n   <cnrp>\n        <servicequery />\n   </cnrp>\n   This is the result.  Notice\
    \ how the Service tag is used to allow the\n   service to describe itself in its\
    \ own terms.\n   <?xml version=\"1.0\"?>\n   <!DOCTYPE cnrp PUBLIC \"-//IETF//DTD\
    \ CNRP 1.0//EN\"\n    \"http://ietf.org/dtd/cnrp-1.0.dtd\">\n   <cnrp>\n    <results>\n\
    \     <service ttl=\"43200\">\n       <serviceuri>urn:foo:bar</serviceuri>\n \
    \      <servers>\n         <server>\n             <serveruri>http://host1.acmecorp.com:4321/foo?</serveruri>\n\
    \         </server>\n         <server>\n             <serveruri>smtp://host2.acmecorp.com:4321/foo?</serveruri>\n\
    \         </server>\n       </servers>\n       <description>This is the Acme CNRP\
    \ Service</description>\n       <!-- This property means that Acme specializes\
    \ in\n            tradename services -->\n       <property name=\"category\" type=\"\
    naics\">544554</property>\n       <property name=\"BannerAdServer\" type=\"uri\"\
    >\n                 http://adserver.acmecorp.com/\n       </property>\n      \
    \ <propertyschema>\n         <propertydeclaration id=\"i1\">\n           <propertyname>workgroupID</propertyname>\n\
    \           <propertytype default=\"yes\">freeform</propertytype>\n          \
    \ <propertytype default=\"no\">domainname</propertytype>\n         </propertydeclaration>\n\
    \         <propertydeclaration id=\"i2\">\n           <propertyname>BannerAdServer</propertyname>\n\
    \           <propertytype default=\"yes\">URI</propertytype>\n         </propertydeclaration>\n\
    \       </propertyschema>\n       <queryschema>\n           <propertyreference\
    \ ref=\"i1\" required=\"yes\" />\n       </queryschema>\n       <resourcedescriptorschema>\n\
    \           <propertyreference ref=\"i1\" required=\"yes\" />\n       </resourcedescriptorschema>\n\
    \       <serviceschema>\n           <propertyreference ref=\"i2\" required=\"\
    yes\" />\n       </serviceschema>\n     </service>\n    </results>\n   </cnrp>\n"
- title: 6.2 Sending A Query and Getting A Response
  contents:
  - "6.2 Sending A Query and Getting A Response\n   This is the query that is sent\
    \ from the client to the server:\n   <?xml version=\"1.0\"?>\n   <!DOCTYPE cnrp\
    \ PUBLIC \"-//IETF//DTD CNRP 1.0//EN\"\n    \"http://ietf.org/dtd/cnrp-1.0.dtd\"\
    >\n   <cnrp>\n    <query>\n       <commonname>Fido</commonname>\n       <property\
    \ name=\"geography\" type=\"iso3166-2\">\n          CA-QC</property>\n       <property\
    \ name=\"geography\" type=\"iso3166-1\">CA</property>\n       <property name=\"\
    language\" type=\"rfc1766\">fr-CA</property>\n    </query>\n   </cnrp>\n   This\
    \ is the result set.  It is sent back in response to the query.\n   This result\
    \ set includes a referral and a non-fatal error.\n   <?xml version=\"1.0\"?>\n\
    \   <!DOCTYPE cnrp PUBLIC \"-//IETF//DTD CNRP 1.0//EN\"\n    \"http://ietf.org/dtd/cnrp-1.0.dtd\"\
    >\n   <cnrp>\n     <results>\n       <service id=\"i0\">\n         <serviceuri>http://acmecorp.com</serviceuri>\n\
    \       </service>\n       <service id=\"i1\">\n         <serviceuri>http://serverfarm.acmecorp.com</serviceuri>\n\
    \       </service>\n       <service id=\"i2\">\n         <serviceuri>http://servers.acmecorp.co.uk</serviceuri>\n\
    \       </service>\n       <resourcedescriptor>\n         <commonname>Fidonet</commonname>\n\
    \         <id>1333459455</id>\n         <resourceuri>http://www.fidonet.ca</resourceuri>\n\
    \         <serviceref ref=\"i0\" />\n         <description>This is ye olde Canadian\
    \ Fidonet</description>\n       </resourcedescriptor>\n       <resourcedescriptor>\n\
    \         <commonname>Fidonet</commonname>\n         <id>1333459455</id>\n   \
    \      <resourceuri>http://host:port/bla</resourceuri>\n         <serviceref ref=\"\
    i1\" />\n         <description>An old Fidonet node</description>\n       </resourcedescriptor>\n\
    \       <referral><serviceref ref=\"i2\" /></referral>\n       <status code=\"\
    3.1.1\">\n           The language property 'fr-CA' was ignored\n       </status>\n\
    \     </results>\n   </cnrp>\n"
- title: 7. Transport
  contents:
  - "7. Transport\n   Two CNRP transport protocols are specified.  HTTP is used due\
    \ to its\n   popularity and ease of integration with other web applications. \
    \ SMTP\n   is also used as a way to illustrate a protocol that has a much\n  \
    \ different range of  latency than most protocols.\n   In the cases where transports\
    \ use MIME Media Types (HTTP and SMTP\n   being examples of such), the CNRP payload\
    \ MUST use the\n   'application/cnrp+xml' media type.  See Section 8 for the\n\
    \   registration template for this media type.  One important note about\n   this\
    \ media type is that, since CNRP always uses UTF-8, there is no\n   charset attribute.\n"
- title: 7.1 HTTP Transport
  contents:
  - "7.1 HTTP Transport\n   The HTTP transport is fairly simple.  The client connects\
    \ to an HTTP\n   based CNRP server and issues a request using the POST method\
    \ to the\n   \"/\" path with the Content-type and Accept header set to\n   \"\
    application/cnrp+xml\".  The content of the POST body is the CNRP XML\n   document\
    \ that is being sent.  All HTTP 1.1 features are allowed\n   during the request.\n\
    \   The results are sent back to the client with a Content-Type of\n   \"application/cnrp+xml\"\
    .  The body of the result is the CNRP XML\n   document being  sent to the client.\n"
- title: 7.2 SMTP Transport
  contents:
  - "7.2 SMTP Transport\n   The SMTP transport is very similar to the HTTP transport.\
    \  Since\n   there is no method to specify, the CNRP XML document is simply sent\n\
    \   to a particular SMTP endpoint with its Content-Type set to\n   \"application/cnrp+xml\"\
    .  The server responds by sending a response to\n   the originator of the request\
    \ with the results in the body and the\n   Content-Type set to \"application/cnrp+xml\"\
    .  The Service MUST specify\n   at least one SMTP target (email address) to contact.\n"
- title: '8. Registration: application/cnrp+xml'
  contents:
  - "8. Registration: application/cnrp+xml\n   This is the registration template for\
    \ 'application/cnrp+xml' per [6].\n   MIME media type name: application\n   MIME\
    \ subtype name: cnrp+xml\n   Required parameters: none\n   Optional parameters:\
    \ none\n   Encoding considerations: This media type consists of 8bit text which\n\
    \      may necessitate the use of an appropriate content transfer\n      encoding\
    \ on some transports.  Since these considerations are the\n      same as XML in\
    \ general, RFC3023's [6] discussion of XML and MIME\n      is applicable.\n  \
    \ Security considerations: none specific to this media type.  See\n      Section\
    \ 9 for general CNRP considerations.\n   Interoperability considerations: n/a\n\
    \   Published specification: This media type is a proper subset of the\n     \
    \ the XML 1.0 specification [8] except for the limitations placed on\n      tags\
    \ and encodings by this document.\n   Applications which use this media type:\
    \ any CNRP client/server\n      wishing to send or receive CNRP requests or responses\n\
    \   Additional Information: none\n   Contact for further information: c.f., the\
    \ \"Author's Address\" section\n      of this memo\n   Intended usage: limited\
    \ use\n   Author/Change controller: the IESG\n"
- title: 9. Security Considerations
  contents:
  - "9. Security Considerations\n   Three security threats exist for CNRP or applications\
    \ that depend on\n   it:  Man in the Middle attacks, malicious agents posing as\
    \ a service\n   by spoofing a Service object, and denial of service attacks caused\
    \ by\n   adding a new level of indirection for resolution of a resource.\n   The\
    \ proposed solution for man in the middle attacks is to utilize\n   transport\
    \ level authentication and encryption, where available.  In\n   the case where\
    \ the transport can't provide the level of required\n   authentication, individual\
    \ entries or the entire response can be\n   signed/encrypted using XML signature\
    \ methods being developed by the\n   XMLDSIG Working Group.\n   In the case of\
    \ where a service attempts to pose as another by\n   spoofing the serviceuri in\
    \ the Service object, the Service object\n   should be signed.  A client can then\
    \ verify the Service object's\n   veracity by verifying the signature.  How the\
    \ client obtains that\n   authoritative public key is out of scope since it depends\
    \ on the\n   service discovery problem.\n   While this document cannot propose\
    \ a solution for Denial Of Service\n   (DOS) attacks, it can illustrate that,\
    \ like many other cases, any\n   time a new level of indirection is created, an\
    \ opportunity for a DOS\n   attack is created.  Service providers are encouraged\
    \ to be aware of\n   this and to act accordingly to mitigate the effects of a\
    \ DOS attack.\n"
- title: 10. IANA Considerations
  contents:
  - "10. IANA Considerations\n   The major consideration for the IANA is that the\
    \ IANA will be\n   registering well known properties, property types and status\n\
    \   messages.  It will not register values.  Since this document does not\n  \
    \ discuss CNRP service discovery, the IANA will not be registering the\n   existence\
    \ of servers or Server objects.\n   There are three types of entities the IANA\
    \ can register: properties,\n   property types, and status messages.  If a property\
    \ or type is not\n   registered with the IANA, then they must start with \"x-\"\
    .  Status\n   messages can be created for local consumption and not registered.\n\
    \   There is no requirement that new status messages are mandatory to\n   implement\
    \ unless this document is updated.  Status message\n   registrations are more\
    \ for informational purposes.\n   The required information for the registration\
    \ of a new property is\n   the property's name, its default type, and a general\
    \ description.  A\n   new type requires the type's name, what properties it is\
    \ valid for,\n   and a description.  A new status message requires the X.Y.ZZZ\
    \ code\n   and a brief description of the state being communicated.\n   All properties,\
    \ types and status messages are registered on a First\n   Come First Served basis\
    \ with no review by the IANA or any group of\n   experts.  The consensus opinion\
    \ of the CNRP Working Group is that\n   review of property registrations should\
    \ occur once there is\n   operational experience with the protocol and an actual\
    \ need for the\n   review.  If, at some future date, this policy needs to change,\
    \ this\n   document will be updated.\n   The property and type registration templates\
    \ found in Appendix A\n   should be registered by the IANA at publication time\
    \ of this\n   document.\n   The IANA is also directed to register the Media Type\
    \ specified in\n   Section 8.\n"
- title: References
  contents:
  - "References\n   [1]   United States, \"North American Industry Classification\
    \ System\",\n         January 1997, <http://www.census.gov/epcd/www/naics.html>.\n\
    \   [2]   Fielding, R., Gettys, J., Mogul, J., Frystyk, H., Masinter, L.,\n  \
    \       Leach, P. and T. Berners-Lee, \"Hypertext Transfer Protocol --\n     \
    \    HTTP/1.1\", RFC 2616, June 1999.\n   [3]   Berners-Lee, T., Fielding, R.\
    \ and L. Masinter, \"Uniform\n         Resource Identifiers (URI): Generic Syntax\"\
    , RFC 2396, August\n         1998.\n   [4]   Alvestrand, H., \"Tags for the Identification\
    \ of Languages\", RFC\n         1766, March 1995.\n   [5]   Moats, R., \"URN Syntax\"\
    , RFC 2141, May 1997.\n   [6]   Murata, M., St. Laurent, S. and D. Kohn, \"XML\
    \ Media Types\", RFC\n         3023, January 2001.\n   [7]   Bradner, S., \"Key\
    \ words for use in RFCs to Indicate Requirement\n         Levels\", BCP 14, RFC\
    \ 2119, March 1997.\n   [8]   Bray, T., Paoli, J. and C. Sperberg-McQueen, \"\
    Extensible Markup\n         Language (XML) 1.0\", February 1998.\n   [9]   Mealling,\
    \ M., \"The 'go' URI Scheme for the Common Name\n         Resolution Protocol\"\
    , RFC 3368, August 2002.\n   [10]  Vaudreuil, G., \"Enhanced Mail System Status\
    \ Codes\", RFC 1893,\n         January 1996.\n   [11]  \"Country and Region Codes\"\
    , ISO 3166, January 1996.\n"
- title: Appendix A. Well Known Property and Type Registration Templates
  contents:
  - 'Appendix A. Well Known Property and Type Registration Templates

    '
- title: A.1 Properties
  contents:
  - "A.1 Properties\n   Property Name: geography\n   Default Type: iso3166-1\n   Description:\
    \ A geographic location\n   Property Name: language\n   Default Type: rfc1766\n\
    \   Description: A language specification\n   Property Name: category\n   Default\
    \ Type: freeform\n   Description: A node in some system of semantic relationships\
    \ that is\n   considered relevant to the common-name.\n   Property Name: range\n\
    \   Default Type: range\n   Description: A range given in the format \"x,y\" where\
    \ x is the\n   starting point and y is the length.  This property is used by the\n\
    \   client to tell the server that is is requesting a subrange of the\n   results.\n\
    \   Property Name: dataseturi\n   Default Type: uri\n   Description: A URI used\
    \ to disambiguate between two Datasets offered\n   by the same Service.\n"
- title: A.2 Types
  contents:
  - "A.2 Types\n   Type: freeform\n   Property: category\n   Description: The value\
    \ is to be interpreted by the server the best\n   way it knows how.  This value\
    \ has no defined structure.\n   Type: freeform\n   Property: geography\n   Description:\
    \ The value is to be interpreted by the server the best\n   way it knows how.\
    \  This value has no defined structure.\n   Type: freeform\n   Property: language\n\
    \   Description: The value is to be interpreted by the server the best\n   way\
    \ it knows how.  This value has no defined structure.\n   Type: iso3166-2\n  \
    \ Property: geography\n   Description: The combination of country and sub-region\
    \ codes found in\n   ISO 3166-2 [11].\n   Type: iso3166-1\n   Property: Geography\n\
    \   Description: Country Codes found in ISO 3166-1 [11].\n   Type: postalcode\n\
    \   Property: Geography\n   Description: A postal code that is valid for some\
    \ region.  A good\n   example is the Zip code system used in the US.\n   Type:\
    \ lat-long\n   Property: Geography\n   Description:\n      Values for latitude\
    \ and longitude shall be expressed as decimal\n      fractions of degrees.  Whole\
    \ degrees of latitude shall be\n      represented by a two-digit decimal number\
    \ ranging from 0 through\n      90.  Whole degrees of longitude shall be represented\
    \ by a decimal\n      number ranging from 0 through 180.  When a decimal fraction\
    \ of a\n      degree is specified, it shall be separated from the whole number\n\
    \      of degrees by a decimal point.  Decimal fractions of a degree may\n   \
    \   be expressed to the precision desired.\n      Latitudes north of the equator\
    \ shall be specified by a plus sign\n      (+), or by the absence of a minus sign\
    \ (-), preceding the\n      designating degrees.  Latitudes south of the Equator\
    \ shall be\n      designated by a minus sign (-) preceding the two digits\n  \
    \    designating degrees.  A point on the Equator shall be assigned to\n     \
    \ the Northern Hemisphere.\n      Longitudes east of the prime meridian shall\
    \ be specified by a plus\n      sign (+), or by the Longitudes west of the meridian\
    \ shall be\n      designated by minus sign (-) preceding the digits designating\n\
    \      degrees.  A point on the prime meridian shall be assigned to the\n    \
    \  Eastern Hemisphere.  A point on the 180th meridian shall be\n      assigned\
    \ to the Western Hemisphere.  One exception to this last\n      convention is\
    \ permitted.  For the special condition of describing\n      a band of latitude\
    \ around the earth, the East Bounding Coordinate\n      data element shall be\
    \ assigned the value +180 (180) degrees.\n      Any spatial address with a latitude\
    \ of +90 (90) or -90 degrees\n      will specify the position at the North or\
    \ South Pole,\n      respectively.  The component for longitude may have any legal\n\
    \      value.\n      With the exception of the special condition described above,\
    \ this\n      form is specified in Department of Commerce, 1986, Representation\n\
    \      of geographic point locations for information interchange (Federal\n  \
    \    Information Processing Standard 70-1):  Washington, Department of\n     \
    \ Commerce, National Institute of Standards and Technology.\n            DEGREES\
    \   = *PLUSMINUS DIGITS '.' DIGITS\n            PLUSMINUS = + | -\n          \
    \  DIGITS    = DIGIT *DIGIT\n            DIGIT     = 0 | 1 | 2 | 3 | 4 | 5 | 6\
    \ | 7 | 8 | 9\n   Type: rfc1766\n   Property: Language\n   Description: language\
    \ codes as defined by RFC 1766 [4]\n   Type: naics\n   Property: Category\n  \
    \ Description: North American Industry Code System [1]\n   Type: uri\n   Property:\
    \ dataseturi\n   Description: A URI adhering to the 'absoluteURI' production of\
    \ the\n   Collected ABNF found in [3]\n"
- title: Appendix B. Status Codes
  contents:
  - 'Appendix B. Status Codes

    '
- title: B.1 Level 1 (Informative) Codes
  contents:
  - "B.1 Level 1 (Informative) Codes\n   1.0.0 -- Undefined Information\n      This\
    \ code is used for any non-categorizable and informative\n      message.  If,\
    \ for example, the server wanted to tell the client\n      that the systems administrator's\
    \ cat has blue hair, then this code\n      would be the appropriate place for\
    \ this information.\n   1.1.0 -- Query related information\n      This code is\
    \ used for any informative information concerning the\n      query that client\
    \ sent.  For example, \"The query you sent was\n      rather interesting!\".\n\
    \   1.2.0 -- An informative message pertaining to the Service\n      This message\
    \ concerns the Service in the general sense.\n"
- title: B.2 Level 2 (Success) Codes
  contents:
  - "B.2 Level 2 (Success) Codes\n   2.0.0 -- Something undefined succeeded\n    \
    \  There was success but the situation that this message concerns is\n      undefined.\n\
    \   2.1.0 -- Query succeeded\n      The query succeeded.  This message MUST be\
    \ returned when there\n      were no results that matched the query.  I.e., the\
    \ query was\n      successfully handled and the correct set of results contained\
    \ no\n      resources or referrals.  The lack of results is not an error but a\n\
    \      successful statement about the common-name.\n   Note: The apparent lack\
    \ of 2.X.X level codes is caused by success\n   usually being indicated not by\
    \ a status message but by the server\n   returning only the objects that the client\
    \ requested.\n"
- title: B.3 Level 3 (Partial Success) Codes
  contents:
  - "B.3 Level 3 (Partial Success) Codes\n   3.0.0 -- Something undefined was only\
    \ partially successful\n      Some request by the client was only partially successful.\
    \  The\n      exact situation or cause of that partial failure is not defined.\n\
    \   3.1.0 -- The query was only partially successful.\n   3.1.1 -- The query contained\
    \ invalid or unsupported properties\n      The query contained invalid or unsupported\
    \ property names, types\n      or values.  The invalid properties were ignored\
    \ and the query\n      processed.\n   3.1.2 -- The XML was well formed but invalid\n\
    \      The XML sent by the client was well formed but invalid.  The\n      server\
    \ was smart enough to figure out what the client was talking\n      about and\
    \ return some results.\n   3.1.3 Server does not support datasets\n      This\
    \ status should be generated by servers that do not handle\n      datasets.  A\
    \ server can send this status message at any time, but\n      it especially useful\
    \ for when a server receives a query from a\n      client that contains a dataseturi.\
    \  In this case and if the client\n      is doing rigorous loop detection, the\
    \ client should consider this\n      entire service to have been visited.\n  \
    \ 3.1.4 The first dataset in the list of datasets you gave in the\n         query\
    \ was the only one used.\n      This status message is used by a server to indicate\
    \ the situation\n      where a client has included several dataseturis in its\
    \ query and\n      the server can only support one at a time.  In this case the\n\
    \      server is explicitly stating that it used the first dataseturi\n      only.\
    \  The client should consider that only the first dataseturi\n      specified\
    \ was processed correctly.  The client should consider\n      that the remaining\
    \ datasets in the query were ignored completely.\n      They would need to be\
    \ sent individually as referrals if the client\n      really cares about those\
    \ results.  Only the first\n      serviceuri/dataseturi pair should be marked\
    \ as visited if loop\n      detection is being handled.\n   3.1.5 This dataset\
    \ not supported.\n      This message is used to indicate that a specific dataseturi\
    \ sent\n      in a query by a client is not supported by the server.  This\n \
    \     serviceuri/dataseturi pair should be considered as visited by the\n    \
    \  client.  If this message is sent in reply to a query specifying\n      multiple\
    \ datasets, the client should behave the same as if it\n      received the 3.1.3\
    \ message from above.  It should be considered\n      bad form for a server to\
    \ send this status message back in response\n      to a query with multiple datasets\
    \ because it is ambiguous.\n   3.2.0 -- The server caused a partially successful\
    \ event\n      Due to some internal server error, the results returned were\n\
    \      incomplete.\n   3.2.1 -- Some referral server was unavailable\n      This\
    \ status message is used to denote that one or more of the\n      referral services\
    \ that are normally queried was unavailable.\n      Results were generated, but\
    \ they may not be representative of a\n      complete answer.\n"
- title: B.4 Level 4 (Transient Failure) Codes
  contents:
  - "B.4 Level 4 (Transient Failure) Codes\n   4.0.0 -- Something undefined caused\
    \ a persistent transient failure.\n   4.1.0 -- There was an error in the query\
    \ that made it unable to be\n            interpreted.\n   4.2.0 -- The query was\
    \ to complex\n      The query as specified was too complex for this Service to\
    \ handle.\n   4.2.1 -- The Service was too busy\n      Due to resource constraints,\
    \ the entire service is too busy to\n      handle requests.  This means that any\
    \ of the Servers cooperating\n      in providing this Service would have also\
    \ returned this same\n      message.\n   4.2.2 -- The Server is in maintenance\n\
    \      This server is now in maintenance mode.  Try another server from\n    \
    \  this service or try again at a later time.\n   4.2.3 -- The Server had an internal\
    \ error\n      There was an internal error that caused the server to fail\n  \
    \    completely.\n"
- title: B.5 Level 5 (Permanent Failures) Codes.
  contents:
  - "B.5 Level 5 (Permanent Failures) Codes.\n   5.0.0 -- Something undefined caused\
    \ a permanent failure.\n   5.1.0 -- The query permanently failed.\n   5.2.0 --\
    \ The service had a permanent failure.\n   5.2.1 -- This Service is no longer\
    \ available.\n      This Service has decided to no longer make itself available.\n\
    \   5.2.2 -- The Server had a permanent failure.\n      This server has permanently\
    \ failed.  Try another server from this\n      service.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Nico Popp\n   VeriSign, Inc.\n   487 East Middlefield\
    \ Road\n   Mountain View, CA 94043\n   Phone: (650) 426-3291\n   EMail: npopp@verisign.com\n\
    \   Michael Mealling\n   VeriSign, Inc.\n   21345 Ridgetop Circle\n   Sterling,\
    \ VA  20166\n   US\n   EMail: michael@verisignlabs.com\n   Marshall Moseley\n\
    \   Netword, Inc.\n   702 Russell Avenue\n   Gaithersburg, MD  20877-2606\n  \
    \ US\n   Phone: (240) 631-1100\n   EMail: marshall@netword.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2002).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
