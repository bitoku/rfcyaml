- contents:
  - '                       The ESP DES-CBC Transform

    '
  title: __initial_text__
- contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol
    for the\n   Internet community, and requests discussion and suggestions for\n
    \  improvements.  Please refer to the current edition of the \"Internet\n   Official
    Protocol Standards\" (STD 1) for the standardization state\n   and status of this
    protocol.  Distribution of this memo is unlimited.\n"
  title: Status of this Memo
- contents:
  - "Abstract\n   This document describes the DES-CBC security transform for the IP\n
    \  Encapsulating Security Payload (ESP).\n"
  title: Abstract
- contents:
  - "Table of Contents\n     1.     Introduction ..........................................
    \   1\n        1.1       Keys ............................................    1\n
    \       1.2       Initialization Vector ...........................    1\n        1.3
    \      Data Size .......................................    2\n        1.4       Performance
    .....................................    2\n     2.     Payload Format ........................................
    \   3\n     3.     Algorithm .............................................    5\n
    \       3.1       Encryption ......................................    5\n        3.2
    \      Decryption ......................................    5\n     SECURITY CONSIDERATIONS
    ......................................    6\n     ACKNOWLEDGEMENTS .............................................
    \   7\n     REFERENCES ...................................................    8\n
    \    AUTHOR'S ADDRESS .............................................   10\n"
  title: Table of Contents
- contents:
  - "1.  Introduction\n   The Encapsulating Security Payload (ESP) [RFC-1827] provides\n
    \  confidentiality for IP datagrams by encrypting the payload data to be\n   protected.
    \ This specification describes the ESP use of the Cipher\n   Block Chaining (CBC)
    mode of the US Data Encryption Standard (DES)\n   algorithm [FIPS-46, FIPS-46-1,
    FIPS-74, FIPS-81].\n   All implementations that claim conformance or compliance
    with the\n   Encapsulating Security Payload specification MUST implement this\n
    \  DES-CBC transform.\n   This document assumes that the reader is familiar with
    the related\n   document \"Security Architecture for the Internet Protocol\"\n
    \  [RFC-1825], which defines the overall security plan for IP, and\n   provides
    important background for this specification.\n"
  - contents:
    - "1.1.  Keys\n   The secret DES key shared between the communicating parties
      is eight\n   octets in length.  This key consists of a 56-bit quantity used
      by the\n   DES algorithm.  The 56-bit key is stored as a 64-bit (eight octet)\n
      \  quantity, with the least significant bit of each octet used as a\n   parity
      bit.\n"
    title: 1.1.  Keys
  - contents:
    - "1.2.  Initialization Vector\n   This mode of DES requires an Initialization
      Vector (IV) that is eight\n   octets in length.\n   Each datagram contains its
      own IV.  Including the IV in each datagram\n   ensures that decryption of each
      received datagram can be performed,\n   even when other datagrams are dropped,
      or datagrams are re-ordered in\n   transit.\n   The method for selection of
      IV values is implementation dependent.\n   Notes:\n      A common acceptable
      technique is simply a counter, beginning with\n      a randomly chosen value.
      \ While this provides an easy method for\n      preventing repetition, and is
      sufficiently robust for practical\n      use, cryptanalysis may use the rare
      serendipitous occurrence when\n      a corresponding bit position in the first
      DES block increments in\n      exactly the same fashion.\n      Other implementations
      exhibit unpredictability, usually through a\n      pseudo-random number generator.
      \ Care should be taken that the\n      periodicity of the number generator is
      long enough to prevent\n      repetition during the lifetime of the session
      key.\n"
    title: 1.2.  Initialization Vector
  - contents:
    - "1.3.  Data Size\n   The DES algorithm operates on blocks of eight octets.  This
      often\n   requires padding after the end of the unencrypted payload data.\n
      \  Both input and output result in the same number of octets, which\n   facilitates
      in-place encryption and decryption.\n   On receipt, if the length of the data
      to be decrypted is not an\n   integral multiple of eight octets, then an error
      is indicated, as\n   described in [RFC-1825].\n"
    title: 1.3.  Data Size
  - contents:
    - "1.4.  Performance\n   At the time of writing, at least one hardware implementation
      can\n   encrypt or decrypt at about 1 Gbps [Schneier94, p. 231].\n"
    title: 1.4.  Performance
  title: 1.  Introduction
- contents:
  - "2.  Payload Format\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                Security Parameters Index (SPI)                |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  |                                                               |\n   ~                   Initialization
    Vector (IV)                  ~\n   |                                                               |\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n   |                                                               |\n
    \  ~                          Payload Data                         ~\n   |                                                               |\n
    \  +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n             ...
    Padding           |  Pad Length   | Payload Type  |\n   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n
    \  Security Parameters Index (SPI)\n      A 32-bit value identifying the Security
    Parameters for this\n      datagram.  The value MUST NOT be zero.\n   Initialization
    Vector (IV)\n      The size of this field is variable, although it is constant
    for\n      all DES-CBC datagrams of the same SPI and IP Destination.  Octets\n
    \     are sent in network order (most significant octet first)\n      [RFC-1700].\n
    \     The size MUST be a multiple of 32-bits.  Sizes of 32 and 64 bits\n      are
    required to be supported.  The use of other sizes is beyond\n      the scope of
    this specification.  The size is expected to be\n      indicated by the key management
    mechanism.\n      When the size is 32-bits, a 64-bit IV is formed from the 32-bit\n
    \     value followed by (concatenated with) the bit-wise complement of\n      the
    32-bit value.  This field size is most common, as it aligns\n      the Payload
    Data for both 32-bit and 64-bit processing.\n      All conformant implementations
    MUST also correctly process a\n      64-bit field size.  This provides strict
    compatibility with\n      existing hardware implementations.\n         It is the
    intent that the value not repeat during the lifetime\n         of the encryption
    session key.  Even when a full 64-bit IV is\n         used, the session key SHOULD
    be changed at least as frequently\n         as 2**32 datagrams.\n   Payload Data\n
    \     The size of this field is variable.\n      Prior to encryption and after
    decryption, this field begins with\n      the IP Protocol/Payload header specified
    in the Payload Type\n      field.  Note that in the case of IP-in-IP encapsulation
    (Payload\n      Type 4), this will be another IP header.\n   Padding\n      The
    size of this field is variable.\n      Prior to encryption, it is filled with
    unspecified implementation\n      dependent (preferably random) values, to align
    the Pad Length and\n      Payload Type fields at an eight octet boundary.\n      After
    decryption, it MUST be ignored.\n   Pad Length\n      This field indicates the
    size of the Padding field.  It does not\n      include the Pad Length and Payload
    Type fields.  The value\n      typically ranges from 0 to 7, but may be up to
    255 to permit\n      hiding of the actual data length.\n      This field is opaque.
    \ That is, the value is set prior to\n      encryption, and is examined only after
    decryption.\n   Payload Type\n      This field indicates the contents of the Payload
    Data field, using\n      the IP Protocol/Payload value.  Up-to-date values of
    the IP\n      Protocol/Payload are specified in the most recent \"Assigned\n      Numbers\"
    [RFC-1700].\n      This field is opaque.  That is, the value is set prior to\n
    \     encryption, and is examined only after decryption.\n         For example,
    when encrypting an entire IP datagram (Tunnel-\n         Mode), this field will
    contain the value 4, which indicates\n         IP-in-IP encapsulation.\n"
  title: 2.  Payload Format
- contents:
  - "3.  Algorithm\n   In DES-CBC, the base DES encryption function is applied to
    the XOR of\n   each plaintext block with the previous ciphertext block to yield
    the\n   ciphertext for the current block.  This provides for\n   re-synchronization
    when datagrams are lost.\n   For more explanation and implementation information
    for DES, see\n   [Schneier94].\n"
  - contents:
    - "3.1.  Encryption\n   Append zero or more octets of (preferably random) padding
      to the\n   plaintext, to make its modulo 8 length equal to 6.  For example,
      if\n   the plaintext length is 41, 5 octets of padding are added.\n   Append
      a Pad Length octet containing the number of padding octets\n   just added.\n
      \  Append a Payload Type octet containing the IP Protocol/Payload value\n   which
      identifies the protocol header that begins the payload.\n   Provide an Initialization
      Vector (IV) of the size indicated by the\n   SPI.\n   Encrypt the payload with
      DES in CBC mode, producing a ciphertext of\n   the same length.\n   Octets are
      mapped to DES blocks in network order (most significant\n   octet first) [RFC-1700].
      \ Octet 0 (modulo 8) of the payload\n   corresponds to bits 1-8 of the 64-bit
      DES input block, while octet 7\n   (modulo 8) corresponds to bits 57-64 of the
      DES input block.\n   Construct an appropriate IP datagram for the target Destination,
      with\n   the indicated SPI, IV, and payload.\n   The Total/Payload Length in
      the encapsulating IP Header reflects the\n   length of the encrypted data, plus
      the SPI, IV, padding, Pad Length,\n   and Payload Type octets.\n"
    title: 3.1.  Encryption
  - contents:
    - "3.2.  Decryption\n   First, the SPI field is removed and examined.  This is
      used as an\n   index into the local Security Parameter table to find the negotiated\n
      \  parameters and decryption key.\n   The negotiated form of the IV determines
      the size of the IV field.\n   These octets are removed, and an appropriate 64-bit
      IV value is\n   constructed.\n   The encrypted part of the payload is decrypted
      using DES in the CBC\n   mode.\n   The Payload Type is removed and examined.
      \ If it is unrecognized, the\n   payload is discarded with an appropriate ICMP
      message.\n   The Pad Length is removed and examined.  The specified number of
      pad\n   octets are removed from the end of the decrypted payload, and the IP\n
      \  Total/Payload Length is adjusted accordingly.\n   The IP Header(s) and the
      remaining portion of the decrypted payload\n   are passed to the protocol receive
      routine specified by the Payload\n   Type field.\n"
    title: 3.2.  Decryption
  title: 3.  Algorithm
- contents:
  - "Security Considerations\n   Users need to understand that the quality of the
    security provided by\n   this specification depends completely on the strength
    of the DES\n   algorithm, the correctness of that algorithm's implementation,
    the\n   security of the key management mechanism and its implementation, the\n
    \  strength of the key [CN94], and upon the correctness of the\n   implementations
    in all of the participating nodes.\n   Among other considerations, applications
    may wish to take care not to\n   select weak keys, although the odds of picking
    one at random are low\n   [Schneier94, p 233].\n   The cut and paste attack described
    by [Bell95] exploits the nature of\n   all Cipher Block Chaining algorithms.  When
    a block is damaged in\n   transmission, on decryption both it and the following
    block will be\n   garbled by the decryption process, but all subsequent blocks
    will be\n   decrypted correctly.  If an attacker has legitimate access to the\n
    \  same key, this feature can be used to insert or replay previously\n   encrypted
    data of other users of the same engine, revealing the\n   plaintext.  The usual
    (ICMP, TCP, UDP) transport checksum can detect\n   this attack, but on its own
    is not considered cryptographically\n   strong.  In this situation, user or connection
    oriented integrity\n   checking is needed [RFC-1826].\n   At the time of writing
    of this document, [BS93] demonstrated a\n   differential cryptanalysis based chosen-plaintext
    attack requiring\n   2^47 plaintext-ciphertext pairs, and [Matsui94] demonstrated
    a linear\n   cryptanalysis based known-plaintext attack requiring only 2^43\n
    \  plaintext-ciphertext pairs.  Although these attacks are not\n   considered
    practical, they must be taken into account.\n   More disturbingly, [Weiner94]
    has shown the design of a DES cracking\n   machine costing $1 Million that can
    crack one key every 3.5 hours.\n   This is an extremely practical attack.\n   One
    or two blocks of known plaintext suffice to recover a DES key.\n   Because IP
    datagrams typically begin with a block of known and/or\n   guessable header text,
    frequent key changes will not protect against\n   this attack.\n   It is suggested
    that DES is not a good encryption algorithm for the\n   protection of even moderate
    value information in the face of such\n   equipment.  Triple DES is probably a
    better choice for such purposes.\n   However, despite these potential risks, the
    level of privacy provided\n   by use of ESP DES-CBC in the Internet environment
    is far greater than\n   sending the datagram as cleartext.\n"
  title: Security Considerations
- contents:
  - "Acknowledgements\n   This document was reviewed by the IP Security Working Group
    of the\n   Internet Engineering Task Force (IETF).  Comments should be submitted\n
    \  to the ipsec@ans.net mailing list.\n   Some of the text of this specification
    was derived from work by\n   Randall Atkinson for the SIP, SIPP, and IPv6 Working
    Groups.\n   The use of DES for confidentiality is closely modeled on the work\n
    \  done for SNMPv2 [RFC-1446].\n   Steve Bellovin, Steve Deering, Karl Fox, Charles
    Lynn, Craig Metz,\n   Dave Mihelcic and Jeffrey Schiller provided useful critiques
    of\n   earlier versions of this draft.\n"
  title: Acknowledgements
- contents:
  - "References\n   [Bell95]  Bellovin, S., \"An Issue With DES-CBC When Used Without\n
    \           Strong Integrity\", Proceedings of the 32nd IETF, Danvers,\n            MA,
    April 1995.\n   [BS93]   Biham, E., and Shamir, A., \"Differential Cryptanalysis
    of\n            the Data Encryption Standard\", Berlin: Springer-Verlag,\n            1993.\n
    \  [CN94]   Carroll, J.M., and Nudiati, S., \"On Weak Keys and Weak Data:\n            Foiling
    the Two Nemeses\", Cryptologia, Vol. 18 No. 23 pp.\n            253-280, July
    1994.\n   [FIPS-46]\n            US National Bureau of Standards, \"Data Encryption
    Standard\",\n            Federal Information Processing Standard (FIPS) Publication\n
    \           46, January 1977.\n   [FIPS-46-1]\n            US National Bureau
    of Standards, \"Data Encryption Standard\",\n            Federal Information Processing
    Standard (FIPS) Publication\n            46-1, January 1988.\n   [FIPS-74]\n            US
    National Bureau of Standards, \"Guidelines for\n            Implementing and Using
    the Data Encryption Standard\",\n            Federal Information Processing Standard
    (FIPS) Publication\n            74, April 1981.\n   [FIPS-81]\n            US
    National Bureau of Standards, \"DES Modes of Operation\"\n            Federal
    Information Processing Standard (FIPS) Publication\n            81, December 1980.\n
    \  [Matsui94]\n            Matsui, M., \"Linear Cryptanalysis method dor DES Cipher,\"\n
    \           Advances in Cryptology -- Eurocrypt '93 Proceedings, Berlin:\n            Springer-Verlag,
    1994.\n   [RFC-1446]\n            Galvin, J., and McCloghrie, K., \"Security Protocols
    for\n            Version 2 of the Simple Network Management Protocol\n            (SNMPv2)\",
    RFC-1446, DDN Network Information Center, April\n            1993.\n   [RFC-1700]\n
    \           RFC-1700, USC/Information Sciences Institute, October 1994.\n   [RFC-1800]\n
    \           Postel, J., \"Internet Official Protocol Standards\", STD 1,\n            RFC-1800,
    USC/Information Sciences Institute, July 1995.\n   [RFC-1825]\n            Atkinson,
    R., \"Security Architecture for the Internet\n            Protocol\", RFC-1825,
    Naval Research Laboratory, July 1995.\n   [RFC-1826]\n            Atkinson, R.,
    \"IP Authentication Header\", RFC-1826, Naval\n            Research Laboratory,
    July 1995.\n   [RFC-1827]\n            Atkinson, R., \"IP Encapsulating Security
    Protocol (ESP)\",\n            RFC-1827, Naval Research Laboratory, July 1995.\n
    \  [Schneier94]\n            Schneier, B., \"Applied Cryptography\", John Wiley
    & Sons, New\n            York, NY, 1994.  ISBN 0-471-59756-2\n   [Weiner94]\n
    \           Wiener, M.J., \"Efficient DES Key Search\", School of Computer\n            Science,
    Carleton University, Ottawa, Canada, TR-244, May\n            1994.  Presented
    at the Rump Session of Crypto '93.\n"
  title: References
- contents:
  - "Author's Address\n   Questions about this memo can also be directed to:\n      Phil
    Karn\n      Qualcomm, Inc.\n      6455 Lusk Blvd.\n      San Diego, California
    \ 92121-2779\n      karn@unix.ka9q.ampr.org\n      Perry Metzger\n      Piermont
    Information Systems Inc.\n      160 Cabrini Blvd., Suite #2\n      New York, NY
    \ 10033\n      perry@piermont.com\n      William Allen Simpson\n      Daydreamer\n
    \     Computer Systems Consulting Services\n      1384 Fontaine\n      Madison
    Heights, Michigan  48071\n      Bill.Simpson@um.cc.umich.edu\n          bsimpson@MorningStar.com\n"
  title: Author's Address
