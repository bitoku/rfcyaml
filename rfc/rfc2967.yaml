- title: __initial_text__
  contents:
  - "                 TISDAG - Technical Infrastructure for\n                   Swedish\
    \ Directory Access Gateways\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This memo provides information for the Internet community.\
    \  It does\n   not specify an Internet standard of any kind.  Distribution of\
    \ this\n   memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2000).  All Rights Reserved.\n"
- title: Abstract
  contents:
  - "Abstract\n   The strength of the TISDAG (Technical Infrastructure for Swedish\n\
    \   Directory Access Gateways) project's DAG proposal is that it defines\n   the\
    \ necessary technical infrastructure to provide a single-access-\n   point service\
    \ for information on Swedish Internet users.  The\n   resulting service will provide\
    \ uniform access for all information --\n   the same level of access to information\
    \ (7x24 service), and the same\n   information made available, irrespective of\
    \ the service provider\n   responsible for maintaining that information, their\
    \ directory service\n   protocols, or the end-user's client access protocol.\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1.0 Introduction. . . . . . . . . . . . . . . . . . . .\
    \ . . . . .  5\n   1.1 Project Goal. . . . . . . . . . . . . . . . . . . . . .\
    \ . . .  5\n   1.2 Executive Summary of Technical Study Result . . . . . . . .\
    \ .  5\n   1.3 Document Overview . . . . . . . . . . . . . . . . . . . . . . \
    \ 6\n   1.4 Terminology . . . . . . . . . . . . . . . . . . . . . . . . .  7\n\
    \   2.0 Requirements. . . . . . . . . . . . . . . . . . . . . . . . .  7\n   2.1\
    \ End-User Requirements . . . . . . . . . . . . . . . . . . . .  8\n   2.2 WDSPs\
    \ Requirements. . . . . . . . . . . . . . . . . . . . . .  8\n   2.3 DAG-System\
    \ Requirements . . . . . . . . . . . . . . . . . . .  9\n   3.0 Functional Specification.\
    \ . . . . . . . . . . . . . . . . . .  9\n   3.1 Overview. . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . .  9\n   3.2 The DAG Core. . . . . . . . . . .\
    \ . . . . . . . . . . . . . . 10\n   3.3 Client Interface. . . . . . . . . . .\
    \ . . . . . . . . . . . . 11\n   3.3.1 Acceptable User Input . . . . . . . . .\
    \ . . . . . . . . . . 12\n      Supported Query Types. . . . . . . . . . . . .\
    \ . . . . . . . . 12\n      Matching Semantics . . . . . . . . . . . . . . . .\
    \ . . . . . . 12\n      Character Sets . . . . . . . . . . . . . . . . . . . .\
    \ . . . . 13\n   3.3.2 Data Output Spec. . . . . . . . . . . . . . . . . . . .\
    \ . . 14\n      Schema Definition. . . . . . . . . . . . . . . . . . . . . . .\
    \ 14\n      Referral Definition. . . . . . . . . . . . . . . . . . . . . . 14\n\
    \      Error conditions . . . . . . . . . . . . . . . . . . . . . . . 14\n   3.4\
    \ Directory Server Interface. . . . . . . . . . . . . . . . . . 14\n   4.0 Architecture.\
    \ . . . . . . . . . . . . . . . . . . . . . . . . 15\n   4.1 Software Components\
    \ . . . . . . . . . . . . . . . . . . . . . 15\n   4.1.1 Internal Communications\
    \ . . . . . . . . . . . . . . . . . . 15\n   4.1.2 Referral Index. . . . . . .\
    \ . . . . . . . . . . . . . . . . 15\n   4.1.3 DAG-CAPs. . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . 15\n   4.1.4 DAG-SAPs. . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . 17\n   4.2 Important Architectural Notes . . . . . .\
    \ . . . . . . . . . . 17\n   4.2.1 2 Distinct Functions:  Referrals and Chaining\
    \ . . . . . . . 17\n   4.2.2 Limited Query and Response Semantics. . . . . . .\
    \ . . . . . 17\n   4.2.3 Visibility. . . . . . . . . . . . . . . . . . . . . .\
    \ . . . 17\n   4.2.4 Richness of Query semantics . . . . . . . . . . . . . . .\
    \ . 18\n   4.2.5 N+M Protocol Mappings . . . . . . . . . . . . . . . . . . . 18\n\
    \   4.2.6 DAG-CAPs and DAG-SAPs are completely independent of each\n      other.\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . 18\n   4.2.7 The Role\
    \ of the DAG-CAP . . . . . . . . . . . . . . . . . . 18\n   4.2.8 The Role of\
    \ the DAG-SAP . . . . . . . . . . . . . . . . . . 19\n   4.2.9 DAG/IP is internal.\
    \ . . . . . . . . . . . . . . . . . . . . 19\n   4.2.10 Expectations . . . . .\
    \ . . . . . . . . . . . . . . . . . . 19\n   4.2.11 Future Extensions. . . . .\
    \ . . . . . . . . . . . . . . . . 19\n   5.0 Software Specifications . . . . .\
    \ . . . . . . . . . . . . . . 19\n   5.1 Notational Convention . . . . . . . .\
    \ . . . . . . . . . . . . 19\n   5.2 DAG-CAP Basics. . . . . . . . . . . . . .\
    \ . . . . . . . . . . 20\n   5.2.1 Functionality . . . . . . . . . . . . . . .\
    \ . . . . . . . . 20\n   5.2.2 Configuration . . . . . . . . . . . . . . . . .\
    \ . . . . . . 21\n   5.2.3 Error handling. . . . . . . . . . . . . . . . . . .\
    \ . . . . 21\n   5.2.4 Pruning of results. . . . . . . . . . . . . . . . . . .\
    \ . . 22\n   5.3 DAG-SAP Basics. . . . . . . . . . . . . . . . . . . . . . . .\
    \ 22\n   5.3.1 Functionality . . . . . . . . . . . . . . . . . . . . . . . 22\n\
    \   5.3.2 Configuration . . . . . . . . . . . . . . . . . . . . . . . 23\n   5.3.3\
    \ Error handling. . . . . . . . . . . . . . . . . . . . . . . 23\n   5.3.4 Pruning\
    \ of results. . . . . . . . . . . . . . . . . . . . . 23\n   5.3.5 Constraint\
    \ precedence . . . . . . . . . . . . . . . . . . . 23\n   5.4 The Referral Index.\
    \ . . . . . . . . . . . . . . . . . . . . . 24\n   5.4.1 Architecture. . . . .\
    \ . . . . . . . . . . . . . . . . . . . 24\n   5.4.2 Interactions with WDSPs (CIP)\
    \ . . . . . . . . . . . . . . . 24\n   5.4.3 Index Object Format . . . . . . .\
    \ . . . . . . . . . . . . . 24\n   5.4.4 DAG-Internal I/O. . . . . . . . . . .\
    \ . . . . . . . . . . . 24\n   5.4.5 The Index Server. . . . . . . . . . . . .\
    \ . . . . . . . . . 24\n   5.4.6 Configuration . . . . . . . . . . . . . . . .\
    \ . . . . . . . 25\n   5.4.7 Security. . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . 25\n   5.5 Mail (SMTP) DAG-CAP . . . . . . . . . . . . . . . . . .\
    \ . . . 25\n   5.5.1 Mail DAG-CAP Input. . . . . . . . . . . . . . . . . . . .\
    \ . 26\n   5.5.2 Translation from Mail query to DAG/IP . . . . . . . . . . . 28\n\
    \      Querying the Referral Index. . . . . . . . . . . . . . . . . . 28\n   \
    \   Querying a DAG-SAP . . . . . . . . . . . . . . . . . . . . . . 29\n   5.5.3\
    \ Chaining queries in Mail DAG-CAP. . . . . . . . . . . . . . 31\n   5.5.4 Expression\
    \ of results in Mail DAG-CAP . . . . . . . . . . . 31\n   5.5.5 Expression of\
    \ Errors in Mail DAG-CAP. . . . . . . . . . . . 31\n   5.6 Web (HTTP) DAG-CAP.\
    \ . . . . . . . . . . . . . . . . . . . . . 32\n   5.6.1 Web DAG-CAP Input . .\
    \ . . . . . . . . . . . . . . . . . . . 32\n   5.6.2 Translation from Web query\
    \ to DAG/IP. . . . . . . . . . . . 33\n      Querying a DAG-SAP Directly. . .\
    \ . . . . . . . . . . . . . . . 33\n      Querying the Referral Index. . . . .\
    \ . . . . . . . . . . . . . 33\n      Querying a DAG-SAP . . . . . . . . . . .\
    \ . . . . . . . . . . . 35\n   5.6.3 Chaining queries in Web DAG-CAP . . . . .\
    \ . . . . . . . . . 36\n   5.6.4 Expression of results in Web DAG-CAP. . . . .\
    \ . . . . . . . 36\n      text/html results. . . . . . . . . . . . . . . . . .\
    \ . . . . . 36\n      application/whoispp-response Results . . . . . . . . . .\
    \ . . . 37\n   5.6.5 Expression of Errors in Web DAG-CAP . . . . . . . . . . .\
    \ . 37\n      Standard Errors. . . . . . . . . . . . . . . . . . . . . . . . 38\n\
    \   5.7 Whois++ DAG-CAP . . . . . . . . . . . . . . . . . . . . . . . 38\n   5.7.1\
    \ Whois++ DAG-CAP Input . . . . . . . . . . . . . . . . . . . 38\n   5.7.2 Translation\
    \ from Whois++ query to DAG/IP. . . . . . . . . . 39\n      Querying the Referral\
    \ Index. . . . . . . . . . . . . . . . . . 39\n      Querying a DAG-SAP . . .\
    \ . . . . . . . . . . . . . . . . . . . 39\n   5.7.3 Chaining in Whois++ DAG-CAP\
    \ . . . . . . . . . . . . . . . . 40\n   5.7.4 Expression of results in Whois++.\
    \ . . . . . . . . . . . . . 41\n   5.7.5 Expression of Errors in Whois++ DAG-CAP\
    \ . . . . . . . . . . 41\n   5.8 LDAPv2 DAG-CAP. . . . . . . . . . . . . . . .\
    \ . . . . . . . . 42\n   5.8.1 LDAPv2 DAG-CAP Input. . . . . . . . . . . . . .\
    \ . . . . . . 42\n   5.8.2 Translation from LDAPv2 query to DAG/IP . . . . . .\
    \ . . . . 44\n      Querying the Referral Index. . . . . . . . . . . . . . . .\
    \ . . 44\n      Querying a DAG-SAP . . . . . . . . . . . . . . . . . . . . . .\
    \ 46\n   5.8.3 Chaining queries in LDAPv2 DAG-CAP. . . . . . . . . . . . . 48\n\
    \   5.8.4 Expression of results in LDAPv2 . . . . . . . . . . . . . . 48\n   5.8.5\
    \ Expression of Errors in LDAPv2 DAG-CAP. . . . . . . . . . . 48\n   5.9 LDAPv3\
    \ DAG-CAP. . . . . . . . . . . . . . . . . . . . . . . . 50\n   5.9.1 LDAPv3 DAG-CAP\
    \ Input. . . . . . . . . . . . . . . . . . . . 50\n   5.9.2 Translation from LDAPv3\
    \ query to DAG/IP . . . . . . . . . . 51\n      Querying the Referral Index. .\
    \ . . . . . . . . . . . . . . . . 51\n      Querying a DAG-SAP . . . . . . . .\
    \ . . . . . . . . . . . . . . 54\n   5.9.3 Chaining queries in LDAPv3 DAG-CAP.\
    \ . . . . . . . . . . . . 55\n   5.9.4 Expression of results in LDAPv3 . . . .\
    \ . . . . . . . . . . 55\n   5.9.5 Expression of Errors in LDAPv3 DAG-CAP. . .\
    \ . . . . . . . . 56\n   5.10 Whois++ DAG-SAP. . . . . . . . . . . . . . . . .\
    \ . . . . . . 57\n   5.10.1 Input. . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . 57\n   5.10.2 Translation from DAG/IP to Whois++ query . . . . . . .\
    \ . . 58\n   5.10.3 Translation of Whois++ results to DAG/IP . . . . . . . . .\
    \ 58\n   5.11 LDAPv2 DAG-SAP . . . . . . . . . . . . . . . . . . . . . . . 59\n\
    \   5.11.1 Input. . . . . . . . . . . . . . . . . . . . . . . . . . . 59\n   5.11.2\
    \ Translation from DAG/IP to LDAPv2 query. . . . . . . . . . 59\n   5.11.3 Translation\
    \ of LDAPv2 results to DAG/IP. . . . . . . . . . 61\n   5.12 LDAPv3 DAG-SAP .\
    \ . . . . . . . . . . . . . . . . . . . . . . 62\n   5.12.1 Input. . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . 62\n   5.12.2 Translation from DAG/IP\
    \ to LDAPv3 query. . . . . . . . . . 62\n   5.12.3 Translation of LDAPv3 results\
    \ to DAG/IP. . . . . . . . . . 64\n   5.13 Example Queries. . . . . . . . . .\
    \ . . . . . . . . . . . . . 64\n   5.13.1 A Whois++ Query. . . . . . . . . . .\
    \ . . . . . . . . . . . 65\n      What the Whois++ DAG-CAP Receives. . . . . .\
    \ . . . . . . . . . 65\n      What the Whois++ DAG-CAP sends to the Referral Index\
    \ . . . . . 65\n      What the Whois++ DAG-CAP Sends to an LDAP DAG-SAP. . . .\
    \ . . . 65\n   5.13.2 An LDAP Query. . . . . . . . . . . . . . . . . . . . . .\
    \ . 66\n      What the LDAP DAG-CAP Receives . . . . . . . . . . . . . . . . 66\n\
    \   5.13.3 What the LDAP DAG-CAP sends to the Referral Index. . . . . 67\n   \
    \   What the LDAP DAG-CAP Sends to a Whois++ DAG-SAP . . . . . . . 67\n      What\
    \ the LDAP DAG-CAP Sends to an LDAP DAG-SAP . . . . . . . . 68\n   6.0 Service\
    \ Specifications. . . . . . . . . . . . . . . . . . . . 68\n   6.1 Overview. .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . 68\n   6.2 WDSP Participation.\
    \ . . . . . . . . . . . . . . . . . . . . . 69\n   6.3 Load Distribution . . .\
    \ . . . . . . . . . . . . . . . . . . . 69\n   6.4 Extensibility . . . . . . .\
    \ . . . . . . . . . . . . . . . . . 72\n   7.0 Security. . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . 73\n   7.1 Information credibility . . . . . .\
    \ . . . . . . . . . . . . . 73\n   7.2 Unauthorized access . . . . . . . . . .\
    \ . . . . . . . . . . . 73\n   8.0 Acknowledgments . . . . . . . . . . . . . .\
    \ . . . . . . . . . 74\n   Appendix A - DAG Schema Definitions . . . . . . . .\
    \ . . . . . . . 75\n   A.1 DAG Personal Information Schema (DAGPERSON Schema).\
    \ . . . . . 76\n   A.2 DAG Organizational Role Information Schema (DAGORGROLE\n\
    \      Schema). . . . . . . . . . . . . . . . . . . . . . . . . . . . 77\n   Appendix\
    \ B - Schema Mappings for Whois++ and LDAP . . . . . . . . 77\n   B.1 LDAP and\
    \ the DAG Schemas. . . . . . . . . . . . . . . . . . . 78\n   B.2 Whois++ and\
    \ the DAG Schemas . . . . . . . . . . . . . . . . . 81\n   Appendix C - DAG-Internal\
    \ Protocol (DAG/IP) . . . . . . . . . . . 82\n   C.1 A word on the choice of DAG/IP.\
    \ . . . . . . . . . . . . . . . 83\n   C.2 DAG/IP Input and Output -- Overview\
    \ . . . . . . . . . . . . . 83\n   C.3 BNF for DAG/IP input and output . . . .\
    \ . . . . . . . . . . . 83\n   C.3.1 The DAG/IP Input Grammar. . . . . . . . .\
    \ . . . . . . . . . 84\n   C.3.2 The DAG/IP Response Grammar . . . . . . . . .\
    \ . . . . . . . 87\n   C.4 DAG/IP Response Messages. . . . . . . . . . . . . .\
    \ . . . . . 89\n   Appendix D - DAG/IP Response Messages Mapping . . . . . . .\
    \ . . . 93\n   Appendix E - DAG CIP Usage. . . . . . . . . . . . . . . . . . .\
    \ . 95\n   E.1 CIP Index Object. . . . . . . . . . . . . . . . . . . . . . . 95\n\
    \   E.2 CIP Index Object Creation . . . . . . . . . . . . . . . . . . 97\n   E.3\
    \ CIP Index Object Sharing. . . . . . . . . . . . . . . . . . . 98\n   E.3.1 Registration\
    \ of Servers . . . . . . . . . . . . . . . . . . 98\n   E.3.2 Transmission of\
    \ Objects . . . . . . . . . . . . . . . . . .100\n   Appendix F - Summary of Technical\
    \ Survey Results. . . . . . . . .100\n   Appendix G - Useful References. . . .\
    \ . . . . . . . . . . . . . .102\n   Bibliography. . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . .102\n   Authors' Addresses. . . . . . . . . . . . . .\
    \ . . . . . . . . . .104\n   Full Copyright Statement. . . . . . . . . . . . .\
    \ . . . . . . . .105\n"
- title: List of Tables
  contents:
  - "List of Tables\n   Table 3.1 DAG-supported queries . . . . . . . . . . . . .\
    \ . . . .12\n   Table 5.1 Allowable Whois++ Queries . . . . . . . . . . . . .\
    \ . .38\n   Table A.1 DAGPERSON schema attributes . . . . . . . . . . . . . .76\n\
    \   Table A.2 DAGORGROLE schema attributes. . . . . . . . . . . . . .77\n   Table\
    \ B.1 Canonical DAGPERSON schema & LDAP inetorgPerson\n      attributes . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . .79\n   Table B.2 Reasonable Approximations\
    \ for LDAP organizationalRole\n      attributes . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . .79\n   Table B.3 Canonical mappings for LDAP organizationalRole\n\
    \      attributes . . . . . . . . . . . . . . . . . . . . . . . . . .81\n   Table\
    \ B.4 Canonical DAGPERSON schema & Whois++ USER attributes. .81\n   Table B.5\
    \ Canonical mappings for Whois++ ORGROLE attributes . . .82\n   Table C.1 List\
    \ of system response codes . . . . . . . . . . . . .90\n   Table D.1 LDAPv2/v3\
    \ resultcodes to DAG/IP response codes\n      mapping. . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . .93\n   Table D.2 Mapping from DAG/IP response codes\
    \ to LDAPv2/v3\n      resultcodes. . . . . . . . . . . . . . . . . . . . . . .\
    \ . . .94\n   Table D.3 Mapping between DAG/IP and Whois++ response codes . .\
    \ .94\n   Table F.1 Summary of TISDAG Survey Results: Queries . . . . . . 101\n\
    \   Table F.2 Summary of TISDAG Survey Results: Operational\n      Information.\
    \ . . . . . . . . . . . . . . . . . . . . . . . . 101\n"
- title: 1.0 Introduction
  contents:
  - '1.0 Introduction

    '
- title: 1.1 Project Goal
  contents:
  - "1.1 Project Goal\n   The overarching goal of this project is to develop the necessary\n\
    \   technical infrastructure to provide a single-access-point service for\n  \
    \ searching for whitepages information on Swedish Internet users.  The\n   service\
    \ must be uniform for all information -- the same level of\n   access to information\
    \ (7x24 service), and the same whitepages\n   information made available, irrespective\
    \ of the service provider\n   responsible for maintaining that information.\n"
- title: 1.2 Executive Summary of Technical Study Result
  contents:
  - "1.2 Executive Summary of Technical Study Result\n   The strength of the TISDAG\
    \ project's DAG proposal is that it defines\n   the necessary technical infrastructure\
    \ to provide a single-access-\n   point service for information on Swedish Internet\
    \ users.  The\n   resulting service will provide uniform access for all information\
    \ --\n   the same level of access to information (7x24 service), and the same\n\
    \   information made available, irrespective of the service provider\n   responsible\
    \ for maintaining that information, their directory service\n   protocols, or\
    \ the end-user's client access protocol.\n   Instead of requiring centralized\
    \ mirroring of complete information\n   records from Swedish directory service\
    \ providers, the DAG system uses\n   a well-defined index object summary of that\
    \ data, updated at the\n   directory service provider's convenience.  When an\
    \ end-user queries\n   the DAG, the referral information is used (by the end-user's\n\
    \   software, or by a module within the DAG, as appropriate) to complete\n   the\
    \ final query directly at the directory service provider's system.\n   This ensures\
    \ that the end-user gets the most up-to-date complete\n   information, and promotes\
    \ the directory service provider's main\n   interest:  its service.  The architecture\
    \ of the DAG itself is very\n   modular; support for future protocols can be added\
    \ in the operational\n   system.\n"
- title: 1.3 Document Overview
  contents:
  - "1.3 Document Overview\n   This document is broken into 5 major sections:\n  \
    \ Requirements: As a service, the DAG system will have several\n   different types\
    \ of users.  In order to be successful, those users'\n   needs (requirements)\
    \ must be met.  This in turn defines certain\n   constraints, or system requirements,\
    \ that must be met.  This section\n   aims to capture the baseline requirement\
    \ assumptions to be addressed\n   by the system, and thus lays the groundwork\
    \ on which the rest of the\n   proposed system is built.\n   Functional Specification\
    \ Overview: Working from the users'\n   requirements, specific technologies and\
    \  functionality details are\n   outlined to architect a system that will meet\
    \ the stated\n   requirements.  This includes a conceptual architecture for the\n\
    \   system.  While the Requirements section outlines the needs the\n   different\
    \ users have for the eventual DAG system,  implementing and\n   providing the\
    \ eventual service will entail constraints or conditions\n   that need to be met\
    \ in order to be able to participate in the overall\n   system.\n   Architecture:\
    \ Once the system has been defined conceptually, a\n   proposed software architecture\
    \ is specified to produce the desired\n   functionality and meet the stated requirements.\n\
    \   Software Specifications: This section provides the specifications for\n  \
    \ software components to meet the architecture described above.\n   Service Specifications:\
    \ Once the software has been designed, the\n   success of the DAG system will\
    \ rest on its operational\n   characteristics.  Details of service requirements\
    \ are given in this\n   section.\n"
- title: 1.4 Terminology
  contents:
  - "1.4 Terminology\n   DAG-CAP: Client Access Point -- point of communication between\n\
    \   client-access software and the DAG system.\n   DAG-System: The Directory Access\
    \ Gateway system resulting from the\n   TISDAG  project.  A collection of infrastructural\
    \ software and\n   services for the purpose of providing unified access to Swedish\n\
    \   whitepages information.\n   DAG/IP: DAG-Internal Protocol -- communication\
    \ protocol used between\n   software components of the DAG.\n   End-User: People\
    \ performing White Pages searches and look-ups (via\n   various forms of client\
    \ software).\n   DAG-SAP:  Service Access Point -- point of communication between\
    \ the\n   DAG and WDSP software.\n   WDSP: Whitepages Directory Service Provider\
    \ -- ISPs, companies, or\n   other interested entities.\n   Whitepages Information:\
    \ Collected information coordinates for\n   individual people.  This typically\
    \ includes (but is not limited to) a\n   person's name, and e-mail address.\n"
- title: 2.0 Requirements
  contents:
  - "2.0 Requirements\n   There are 2 primary classes of users for the proposed Whitepages\n\
    \   directory access gateway:\n   - End-users\n   - WDSPs\n   As outlined below,\
    \ needs of each of these user classes imposes a set\n   of constraints on the\
    \ design of the DAG system itself.  Some of the\n   requirements shown below are\
    \ assumed starting criteria for the DAG\n   service; others have been derived\
    \ from data collected in the\n   Technical Survey or other expertise input.\n"
- title: 2.1 End-User Requirements
  contents:
  - "2.1 End-User Requirements\n   The End-User is to be provided with a specific\
    \ set of search types:\n   Name\n   Name + Organization\n   Role + Organization\n\
    \   Name + Locality\n   Name + Organization + Locality\n   Role + Organization\
    \ + Locality\n   The search results will, if available, include the following\n\
    \   information for each \"hit\":\n   - Full name\n   - E-mail address\n   - Role\n\
    \   - Organization\n   - Locality\n   - Full address\n   - Telephone numbers\n\
    \   Access to the service must be available through reasonable and\n   current\
    \ protocols -- such that directory-service-aware software can\n   make use of\
    \ it seamlessly, and there are no reasonable technological\n   impediments to\
    \ making this service useful to all Swedish Internet\n   users.\n   Following\
    \ on that, its responses are expected to be timely; a\n   standard search should\
    \ not take more time than the average access to\n   a web-server.\n"
- title: 2.2 WDSPs Requirements
  contents:
  - "2.2 WDSPs Requirements\n   Given that the WDSPs that participate in this service\
    \ are already in\n   the business of providing a service of whitepages information,\
    \ they\n   have certain requirements that must be respected in order to make\n\
    \   this a successful and useful service to all concerned.\n   The DAG system\
    \ must provide reasonable assurances of data integrity\n   for WDSPs; the information\
    \ the End-User sees should correspond\n   directly to that provided by the WDSPs.\
    \  The DAG system should be\n   non-preferential in providing whitepages information\
    \ -- the service\n   is to the End-User, and the source of whitepages information\
    \ should\n   not influence the search and information presentation processes.\n\
    \   The DAG system must be able to reflect information updates within a\n   reasonable\
    \ time after receipt from WDSPs; on the flip side, while the\n   DAG system will\
    \ function best with regular updates from WDSPs, the\n   update and participation\
    \ overhead for WDSPs should be held within\n   reasonable bounds of what the WDSP\
    \ should do to support regular\n   access to its information.\n   Furthermore,\
    \ given that WDSPs provide directory service information\n   with an eye to value-added\
    \ service, wherever possible End-Users\n   should be redirected to the WDSP responsible\
    \ for individual directory\n   service entries for final and further information.\n"
- title: 2.3 DAG-System Requirements
  contents:
  - "2.3 DAG-System Requirements\n   In order to address the requirements of End-Users\
    \ and WDSPs, the DAG\n   system itself has certain design constraints that must\
    \ be taken into\n   account.\n   The system must be implementable/operational\
    \ by Dec 31/98 -- which\n   implies that it must be designed and constructed with\
    \ already extant\n   technologies.\n   The System will have certain requirements\
    \ for participation -- e.g.,\n   7x24 WDSP availability.\n   In terms of scaling,\
    \ the system should be able to handle 8M records\n   at the outset, with a view\
    \ to handling larger information systems in\n   the future.\n   The system must\
    \ also be capable of extension to other, related\n   applications (e.g., serving\
    \ security certificate information).\n"
- title: 3.0 Functional Specification
  contents:
  - "3.0 Functional Specification\n   In the TISDAG pilotservice we have decided to\
    \ apply some limitations\n   as to what is specified for the DAG/IP.  These limitations\
    \ are\n   presented in this text in the following manner:\n      TISDAG: This\
    \ is a TISDAG comment\n"
- title: 3.1 Overview
  contents:
  - "3.1 Overview\n   The conceptual environment of the DAG system can be described\
    \ in\n   three major components:\n   - client access software for end-users\n\
    \   - the DAG system core\n   - WDSP directory service software\n   This is illustrated\
    \ in Figure 3.1\n   The DAG (Directory Access Gateway) is the infrastructural\
    \ core of the\n   service; it maintains the necessary data and transformation\n\
    \   facilities to permit the smooth connection of diverse directory\n   service\
    \ Client Software to the existing WDSPs' directory servers.\n   The key challenges\
    \ in designing this portion of the system are:\n   Quantity of data -- the quantity\
    \ of whitepages information that will\n   be made available, and diversity of\
    \ its sources (different WDSPs)\n   introduce challenges in terms of finding a\
    \ structure that will allow\n   efficient searching, and facilitate the timeliness\
    \ of updating the\n   necessary information.\n   Multiplicity of access protocols\
    \ -- in order to support the use of\n   existing whitepages-aware software with\
    \ a minimum of perturbation,\n   the DAG system will have to present a uniform\
    \ face in several\n   different access protocols, each with its own information\
    \ search and\n   representation paradigm.\n   This specification will outline\
    \ the following areas:\n   - the functioning of the DAG core itself\n   - the\
    \ interface between the DAG core and End-Users' Directory Service\n     Access\
    \ software\n   - the interface between the DAG core and Directory Services Servers\n"
- title: 3.2 The DAG Core
  contents:
  - "3.2 The DAG Core\n   In order to reduce the quantity of data the DAG itself must\
    \ maintain,\n   and to keep the maintenance of the whitepages information as close\
    \ as\n   possible to the source of information (the WDSPs themselves), the DAG\n\
    \   will only maintain index information and will use \"query routing\" to\n \
    \  efficiently refer End-User queries to WDSPs for search refinement and\n   retrieval\
    \ of information.  Although originally developed for the\n   Whois++ protocol,\
    \ query routing is being pursued in a protocol-\n   independent fashion in the\
    \ IETF's FIND WG, so the choice of this\n   approach does not limit the selection\
    \ and support of whitepages\n   access protocols.\n   The DAG will look after\
    \ pursuing queries for access protocols that do\n   not support referral mechanisms.\
    \  In order to achieve the support of\n   multiple access protocols and differing\
    \ data paradigms, the DAG will\n   be geared to specifically support a limited\
    \ set of whitepages\n   queries.\n                                          +---------+\
    \      @\n                                 +      ->|         |     -+-\n    \
    \                            /|Protocol|         |      |\n                  \
    \             / |    /   +---------+     / \\\n                              /\
    \  | \"B\"\n                             +   |  /\n                          \
    \   |   |<-\n         +-------+           |   |\n    O    |       |          \
    \ |   |\n   -+-   |       |<--------->|   |\n    |    |       | Protocol  |  \
    \ |\n   / \\   |       |  \"A\"      |   |<-\n         +-------+           | \
    \  |Protocol\n                             |   |   \\\n                      \
    \       +   |   \"A\"  +---------+      @\n                              \\  |\
    \     \\  |         |     -+-\n                               \\ |      ->|  \
    \       |      |\n                                \\|        +---------+     /\
    \ \\\n                                 +\n                             The\n \
    \  End      Client           DAG           Directory   Directory\n   Users   \
    \ Software         System        Server      Service\n                       \
    \      Core          Software    Providers\n           Figure 3.1 The role of\
    \ the DAG system\n"
- title: 3.3 Client Interface
  contents:
  - "3.3 Client Interface\n   The DAG will respond to End-User queries in\n   - e-mail\
    \ (SMTP)\n   - WWW (HTTP)\n   - LDAPv2\n   - Whois++\n   - LDAPv3\n   The DAG\
    \ will provide responses including the agreed-upon data.  For\n   access protocols\
    \ that can handle referrals, responses will be data\n   and/or referrals in that\
    \ query protocol.  These are Whois++ and\n   LDAPv3.  N.B.: the LDAPv3 proposal\
    \ defines a referral as a URL; no\n   limitation is placed on the access protocol.\
    \  However it cannot be\n   assumed that all clients will be able to handle all\
    \ access protocols,\n   so only referrals to LDAPv3 servers will be returned.\n"
- title: 3.3.1 Acceptable User Input
  contents:
  - "3.3.1 Acceptable User Input\n   User Input is defined in terms of\n   - Searchable\
    \ Attributes\n   - Matching semantics\n   - Character sets\n   These, in conjunction\
    \ with the DAG schema, defined in Appendix A,\n   form the basis of the required\
    \ query expression.  Individual queries\n   are discussed in more detail in the\
    \ Client Access Point (DAG-CAP)\n   component descriptions for supported protocols.\n\
    \   Supported Query Types\n   The DAG system is designed to support fragment-matching\
    \ queries on a\n   limited set of data attributes -- \"Name\", \"Organizational\
    \ Role\",\n   \"Organization\", and \"Locality\".  The selected permissible query\n\
    \   combinations of attributes are listed in Table 3.1.  From the table\n   it\
    \ can be seen that not all combinations of the three attributes are\n   supported\
    \ -- only those that are needed for the desired\n   functionality.\n   Symbol\
    \  Description\n   ------- -----------\n   N       Name\n   NL      Name + Locality\n\
    \   NO      Name + Organization\n   NOL     Name + Organization + Locality\n \
    \  RO      Role + Organization\n   ROL     Role + Organization + Locality\n  \
    \ Table 3.1 DAG-supported queries\n   The RO and ROL queries are separated from\
    \ the rest as they are\n   searches for \"virtual\" persons -- roles within an\
    \ organization (e.g.,\n   president, or customer service desk) for which one might\
    \ want to find\n   contact information.\n   Matching Semantics\n   As befits the\
    \ individual client query protocols, more string matching\n   expressions may\
    \ be provided.  The basic semantics of the DAG expect\n   the following to be\
    \ available in all client access software (as\n   relevant):\n   - Full word,\
    \ exact match\n   - Word substring match (E.g., \"cat\" would match \"scatter\"\
    )\n   - Case-sensitive and case-insensitive matching\n      TISDAG: LDAP/X.500,\
    \ supports case-sensitivity as such but some of\n      the most used attributes,\
    \ such as the commonName attribute, are\n      defined in the standard to be of\
    \ the case-insensitive\n      attributetypes.  The impact on the DAG system is\
    \ that even if the\n      index collected from a LDAP/X.500 server might have\
    \ upper and\n      lower case letters in the tokens, they can not be handled as\
    \ such\n      since that would be inferring meaning in something which is\n  \
    \    natively regarded as meaningless.  The conclusion of the above is\n     \
    \ that The Referral Index should be case-insensitive and case-\n      sensitivity\
    \ should be supported by the SAPs if the native access\n      protocol supports\
    \ it.\n   Character Sets\n   Wherever possible, the DAG System supports and promotes\
    \ the use of\n   Unicode Version 2.0 for character sets (see [21]) specifically\
    \ the\n   UTF-8 encoding (see Appendix A.2 of [21] or [20]) Accommodation is\n\
    \   made, where necessary, to support the deployed base of existing\n   software.\n\
    \   Specifically:\n   DAG/IP: All internal communications using the DAG/IP are\
    \ carried out\n   in UTF-8.\n      TISDAG: not just UTF-8, but UTF-8 based on\
    \ composed UNICODE\n      version 2 character encodings.\n   DAG-CAP input: Where\
    \ specific access protocols permit selection of\n   character sets, DAG-CAPs must\
    \ support UTF-8.  They may additionally\n   support other anticipated character\
    \ set encodings.\n   DAG-SAP communications with WDSPs:  Where specific access\
    \ protocols\n   permit selection of character sets, DAG-SAPs must support UTF-8\
    \ and\n   use UTF-8 whenever the remote WDSP supports it.  They may\n   additionally\
    \ support other character set encodings.\n   CIP Index Objects: The Index Objects\
    \ supplied by the WDSPs to the DAG\n   system shall contain data encoded in UTF-8.\n\
    \      TISDAG: The same limitation as for DAG/IP, that is the basic data\n   \
    \   should be UTF-8 encoded composed UNICODE version 2 character\n      encodings.\n"
- title: 3.3.2 Data Output Spec
  contents:
  - "3.3.2 Data Output Spec\n   Schema Definition\n   The schema used for the DAG\
    \ service  is defined in Appendix A.  This\n   is a very basic information schema,\
    \ intended to carry the necessary\n   information  for the DAG service, and not\
    \ more.  Although generic\n   \"whitepages\" schema definitions do exist the more\
    \ sophisticated and\n   detailed the information presentation, the more difficult\
    \ it is to\n   map the schema seamlessly across protocols of different paradigms.\n\
    \   Thus, the \"KISS\" (\"Keep it simple, sir\") principle seems appropriate\n\
    \   here.\n   Individual DAG-CAPs define how they express this schema.\n   Referral\
    \ Definition\n   For client access protocols that make use of the concept of\n\
    \   referrals, DAG-CAP definitions will define the expression of\n   referrals\
    \ in those protocols.  The DAG/IP defines the expression of\n   referrals (see\
    \ Appendix  C).\n   Error conditions\n   Each DAG-CAP may provide more detailed\
    \ error messages, but will\n   define minimally the support for the following\
    \ error conditions:\n   - unrecognized query\n   - too many hits\n   Apart from\
    \ these errors, the DAG-CAP may choose to refuse a query by\n   redirecting the\
    \ end-user to a different DAG-CAP of the same protocol.\n"
- title: 3.4 Directory Server Interface
  contents:
  - "3.4 Directory Server Interface\n   The DAG will use the Common Indexing Protocol\
    \ (CIP) server-server\n   protocol to obtain updated index objects from WDSPs.\
    \  For query-\n   routing purposes, WDSPs are expected to  provide Whois++, LDAPv2\
    \ or\n   LDAPv3 interface to their data (although their preferred access may\n\
    \   be something completely different).  N.B.:  In the responses from the\n  \
    \ technical survey, all respondents currently provide access to their\n   service\
    \ in one of these protocols.\n   In order to provide a useful and uniform service,\
    \ WDSPs are expected\n   to provide 7x24 access to their whitepages information.\
    \  WDSPs are\n   also expected to implement operations, administration, maintenance,\n\
    \   and provisioning processes designed to minimize service down time for\n  \
    \ both planned and unplanned administration and maintenance activities.\n"
- title: 4.0 Architecture
  contents:
  - '4.0 Architecture

    '
- title: 4.1 Software Components
  contents:
  - "4.1 Software Components\n   The conceptual architecture of the DAG is represented\
    \ in Figure 4.1.\n   General architectural specifications are described below,\
    \ followed by\n   individual component specifications Sections 5.5 through 5.12.\n"
- title: 4.1.1 Internal Communications
  contents:
  - "4.1.1 Internal Communications\n   Communications between components of the DAG\
    \  will be by TCP/IP\n   connections, using the DAG-Internal Protocol (DAG/IP).\
    \  DAG/IP is\n   used by DAG-CAPs to communicate with the Referral Index and DAG-SAPs.\n\
    \   Thus, the DAG/IP defines\n   - the DAG-CAPs' range of query ability in the\
    \ Referral Index (to\n     gather referrals in response to the end-user's requests)\n\
    \   - the responses (and their formats) of the Referral Index to the\n     DAG-CAP\
    \ requests\n   - the DAG-CAPs' range of query ability to the DAG-SAPs for pursuing\n\
    \     referrals when the DAG-CAP needs to do chaining for the client\n     access\
    \ software\n   - the responses (and their formats) of the DAG-SAPs to the DAG-CAPs.\n\
    \   The detail of the planned DAG/IP is given in Appendix C.  The detail\n   of\
    \ the DAG-CAP--Referral Index and DAG-CAP--DAG-SAP interactions  is\n   given\
    \ in the definitions of individual DAG-CAPs and DAG-SAPs, below\n   (Sections\
    \ 5.5 through 5.12).\n"
- title: 4.1.2 Referral Index
  contents:
  - "4.1.2 Referral Index\n   The Referral Index is responsible for maintaining the\
    \ index of WDSP\n   information, and providing a list of reasonable referrals\
    \ in response\n   to DAG-CAP search requests.  These \"referrals\" provide pointers\
    \ to\n   identify WDSPs that may have information that matches the end-user's\n\
    \   query.\n"
- title: 4.1.3 DAG-CAPs
  contents:
  - "4.1.3 DAG-CAPs\n   Individual DAG-CAPs are responsible for providing a particular\
    \ client\n   access protocol interface to the DAG service.  DAG-CAPs receive end-\n\
    \   user queries in a particular query access protocol, convert the\n   request\
    \ into a query for the Referral Index ( i.e., expressed in\n   DAG/IP), and then\
    \ convert the Referral Index's response into a form\n   that is appropriate for\
    \ the client access protocol.  This may mean\n   passing back the referrals directly,\
    \ calling on DAG-SAPs to do the\n   work of translating the referral into results\
    \ (\"chaining\"), or a\n   combination of both.\n              +-------------------------------------+\n\
    \              |+====+                               |\n   HTTP   <-->+|    |<------+\
    \  (Full chaining)      |\n              ||    |       |                     \
    \  |\n              |+====+       |                       |\n              | \
    \            |                 +----+|\n              |             |      Referral-->|\
    \    ||\n              |             |      Result  <--|    |+<--> Whois++\n \
    \             |             |                 +----+|\n              |+====+ \
    \      |                       |\n   SMTP   <-->+|    |<------+  (Full chaining)\
    \      |\n              ||    |       |                       |\n            \
    \  |+====+       |                       |\n              |             |    \
    \             +----+|\n              |             |      Referral-->|    ||\n\
    \              |             |      Result  <--|    |+<--> LDAPv2\n          \
    \    |             |                 +----+|\n              |+====+       |  \
    \                     |\n   Whois++<-->+|    |<------+  (Chain LDAPv2/3)     |\n\
    \              ||    |       |                       |\n              |+====+\
    \       |                       |\n              |             |             \
    \    +----+|\n              |             |      Referral-->|    ||\n        \
    \      |             |      Result  <--|    |+<--> LDAPv3\n              |   \
    \          |                 +----+|\n              |+====+       |          \
    \             |\n   LDAPv2 <-->+|    |<------+  (Full chaining)      |\n     \
    \         ||    |       |                       |\n              |+====+     \
    \  |                       |\n              |             |                  \
    \     |\n              |+====+       |                       |\n   LDAPv3 <-->+|\
    \    |<------+  (Chain Whois++)      |\n              ||    |       |        \
    \               |\n              |+====+       |                       |\n   \
    \           |             |                       |\n              |         \
    \    v                       |\n              |   +-----------------------+  \
    \       |\n              |   |  Referral Index       |<---------------> Common\n\
    \              |   |                       |         | Indexing Protocol\n   \
    \           |   +-----------------------+         | (CIP)\n              +-------------------------------------+\n\
    \            All internal communications are in DAG/IP.\n            Figure 4.1\
    \ Conceptual Architecture of the DAG\n"
- title: 4.1.4 DAG-SAPs
  contents:
  - "4.1.4 DAG-SAPs\n   Individual DAG-SAPs are called upon (by DAG-CAPs) to take\
    \ DAG-\n   generated referrals and pursue them -- issuing the indicated query\
    \ at\n   the specified WDSP service.  Results from individual WDSPs are\n   converted\
    \ back into DAG/IP-specific format for the DAG-CAP that made\n   the request.\
    \  Each DAG-SAP is responsible for handling referrals to\n   WDSPs of a particular\
    \ protocol (e.g., LDAPv2, Whois++, etc).\n"
- title: 4.2 Important Architectural Notes
  contents:
  - "4.2 Important Architectural Notes\n   This section notes some of the thinking\
    \ that has driven the\n   architectural and software design specification for\
    \ the DAG system.\n   This helps to provide the context in which to understand\
    \ the software\n   specifications that follow, and should give clues for the eventual\n\
    \   extension of the DAG system.  This section also acts, in some ways,\n   as\
    \ an FAQ (Frequently Asked Questions) section, as the content is\n   shaped by\
    \ questions received during the tech spec development phase.\n   It attempts to\
    \ illuminate context that may not otherwise be apparent\n   on a first reading\
    \ of the software specifications.\n"
- title: '4.2.1 2 Distinct Functions:  Referrals and Chaining'
  contents:
  - "4.2.1 2 Distinct Functions:  Referrals and Chaining\n   At all times, it must\
    \ be kept in mind that the primary function of\n   the DAG system is to provide\
    \ users with referrals to WDSP services\n   that may have the information they\
    \ seek.  Since it is the case that\n   not all supported client protocols can\
    \ handle referrals, the DAG\n   system also provides a chaining service to pursue\
    \ referrals that the\n   user's client software cannot handle itself.  This chaining\
    \ service\n   does attempt to match the user's query against data from WDSPs,\
    \ but\n   this is to be seen as a secondary, or support function of the DAG\n\
    \   system.  In the perfect future, all access protocols will be able to\n   handle\
    \ all referrals!\n"
- title: 4.2.2 Limited Query and Response Semantics
  contents:
  - "4.2.2 Limited Query and Response Semantics\n   The DAG system does not attempt\
    \ to be a chameleon, or the ultimate\n   whitepages query service.  It focuses\
    \ on providing referrals for\n   information on the limited number of query types\
    \ outlined in the\n   functional specifications of the DAG service.  This makes\
    \ the DAG\n   system a good place to start a search, but refinements and detailed\n\
    \   inquiries are beyond its scope.\n"
- title: 4.2.3 Visibility
  contents:
  - "4.2.3 Visibility\n   Given the limited query syntax of the DAG system it will\
    \ not always\n   be possible to exactly match a query posed to a CAP into a query\n\
    \   posed to a SAP.  This will have the effect that for instance a LDAPv2\n  \
    \ client that issues a query to the DAG system which by the DAG system\n   is\
    \ chained to a LDAP server might not get the same results as if the\n   client\
    \ where directly connected to the server in question.\n"
- title: 4.2.4 Richness of Query semantics
  contents:
  - "4.2.4 Richness of Query semantics\n   Even the limited query syntax of the DAG\
    \ system is capable of\n   expressing queries that might NOT be possible to represent\
    \ in the\n   access protocols to the WDSPs.  In these cases the DAG-SAP either\
    \ can\n   refuse the query or try to emulate it.\n"
- title: 4.2.5 N+M Protocol Mappings
  contents:
  - "4.2.5 N+M Protocol Mappings\n   As part of the chaining service offered by the\
    \ DAG system, a certain\n   amount of mapping between protocols is required --\
    \ in theoretical\n   terms, there  are \"N\" allowable end-user query access protocols,\
    \ and\n   \"M\" supported WDSP server protocols.  The architecture of the\n  \
    \ software is constructed to use a single internal protocol (the\n   DAG/IP) and\
    \ data schema, providing a common language between all\n   components.  Without\
    \ this, each input protocol module (DAG-CAP) would\n   have to be constructed\
    \ to be able to handle every WDSP protocol --\n   NxM protocol mappings.  This\
    \ would make the system complex, and\n   difficult to expand to include new protocols\
    \ in future.\n"
- title: 4.2.6 DAG-CAPs and DAG-SAPs are completely independent of each other
  contents:
  - "4.2.6 DAG-CAPs and DAG-SAPs are completely independent of each other\n   For\
    \ the above reasons, the DAG-CAP and DAG-SAP modules are intended\n   to be completely\
    \ independent of each other.  A DAG-SAP responds to a\n   query that is posed\
    \ to it in the DAG/IP, without regard to the\n   protocol of the DAG-CAP that\
    \ passed the query.\n"
- title: 4.2.7 The Role of the DAG-CAP
  contents:
  - "4.2.7 The Role of the DAG-CAP\n   Thus, the DAG-CAP is responsible for using\
    \ the DAG/IP to obtain\n   referral information and, where necessary, chained\
    \ responses.  Where\n   necessary, it performs adjustments to accommodate the\
    \ differences in\n   semantics between the DAG/IP and its native protocol.  This\
    \ might\n   involved doing post-filtering of the results returned by the DAG-SAPs\n\
    \   since the query issued in DAG/IP to the DAG-SAP might be \"broader\"\n   then\
    \ the original query.\n   Thus, the DAG-CAP \"knows\" only 2 protocols:  its native\
    \ protocol, and\n   the DAG/IP.\n"
- title: 4.2.8 The Role of the DAG-SAP
  contents:
  - "4.2.8 The Role of the DAG-SAP\n   Similarly, the DAG-SAP is responsible for responding\
    \ to DAG/IP\n   queries by contacting the designated WDSP server.  Where necessary,\n\
    \   it performs adjustments to accommodate the differences in semantics\n   between\
    \ the DAG/IP and its native protocol.  These adjustments might\n   mean that,\
    \ as a consequence, the DAG-SAP will receive results that do\n   not match the\
    \ original query.  In such cases the DAG-SAP should\n   attempt to do post-pruning\
    \ in order to reduce the mismatch between\n   the original query and the results\
    \ returned.\n   Thus, the DAG-SAP \"knows\" only 2 protocols:  its native protocol,\
    \ and\n   the DAG/IP.\n"
- title: 4.2.9 DAG/IP is internal
  contents:
  - "4.2.9 DAG/IP is internal\n   No module outside of the DAG system should be aware\
    \ of the DAG/IP's\n   construction.  End-users use the query protocols supported\
    \ by DAG-\n   CAPs; WDSPs are contacted using the query protocols supported in\
    \ the\n   DAG-SAPs.\n"
- title: 4.2.10 Expectations
  contents:
  - "4.2.10 Expectations\n   The expectation is that the DAG system, although defined\
    \ as a single\n   construct, will operate by running modules on several different,\n\
    \   perhaps widely distributed (in terms of geography and ownership),\n   computers.\
    \  For this reason, the DAG/IP specified in such a way that\n   it will operate\
    \ on inter-machine communications.\n"
- title: 4.2.11 Future Extensions
  contents:
  - "4.2.11 Future Extensions\n   The DAG system architecture was constructed with\
    \ a specific view to\n   extensibility.  At any time, an individual component\
    \ may be improved\n   (e.g., the Mail DAG-CAP may be given a different query interface)\n\
    \   without disrupting the system.\n   Additionally, future versions of the DAG\
    \ system may support other\n   access protocols -- for end-users, and for WDSPs.\n"
- title: 5.0 Software Specifications
  contents:
  - '5.0 Software Specifications

    '
- title: 5.1 Notational Convention
  contents:
  - "5.1 Notational Convention\n   It is always a challenge to accurately represent\
    \ text protocol in a\n   printed document; when is a new line a \"newline\", and\
    \ when is it an\n   effect of the text formatter?\n   In order to be adequately\
    \ illustrated, this document includes many\n   segments of protocol grammars,\
    \ sample data, and sample input/output\n   in a text protocol.  In order to distinguish\
    \ newlines that are\n   significant in a protocol, the symbol\n   <NL>\n   is\
    \ used.  For example,\n   This is an example of a very long line of input.  There\
    \ is only one\n   newline in it (at the end), in spite of the fact that this document\n\
    \   shows it spanning several lines of text.<NL>\n"
- title: 5.2 DAG-CAP Basics
  contents:
  - '5.2 DAG-CAP Basics

    '
- title: 5.2.1 Functionality
  contents:
  - "5.2.1 Functionality\n   Every DAG-CAP must support the full range of DAG queries,\
    \ as defined\n   in 3.3.1.\n   Each DAG-CAP accepts queries in its native protocol.\
    \  Individual\n   DAG-CAP definitions define the expected expression of the DAG\
    \ queries\n   in the native protocol.\n   The DAG-CAP is then responsible for:\n\
    \   - converting that expression into a query in the DAG/IP to obtain\n     relevant\
    \ referrals from the Referral Index.  This might mean that\n     parts of the\
    \ original query are disregarded (e.g., if the query\n     included attributes\
    \ not supported by the DAG application, or if the\n     query algebra was not\
    \ supported by the DAG application);\n   - returning referrals in the client's\
    \ native protocol, where\n     possible;\n   - expressing the client query to\
    \ the necessary DAG-SAPs, given the\n     limitations mentioned above, to chain\
    \ those referrals not usefully\n     expressible in the client's native protocol;\n\
    \   - possibly doing post-filtering on the DAG-SAP results; and\n   - converting\
    \ the collected DAG-SAP results for expression in the\n     client's native protocol\
    \ (and schema, where applicable).\n   Each DAG-CAP defines the nature of the interaction\
    \ with the end-user\n   (e.g., synchronous or asynchronous, etc).  Additionally,\
    \ each DAG-CAP\n   must be able to carry out the following, in order to permit\
    \ load-\n   limiting and load-balancing in the DAG system:\n   - direct the client\
    \ to a different DAG-CAP of the same type (for\n     load-balancing)\n   - decline\
    \ to return results because too many referrals were generated\n     (to discourage\
    \ data-mining).  Ideally, this should include the\n     generation of a message\
    \ to refine the query in order to produce a\n     more manageable number of referrals/replies.\n\
    \   DAG-CAPs must be capable of accepting and respecting DAG-SAP service\n   referrals\
    \ (for DAG-SAP load-sharing).\n   In protocols that permit it, the DAG-CAP should\
    \ indicate to the end-\n   user which services were unavailable for chaining referrals\
    \ (i.e., to\n   indicate there were parts of the search that could not be completed,\n\
    \   and information might be missing).\n      TISDAG: Any CAP that receives commands\
    \ other than queries, like\n      help, answers those on its own.  A CAP should\
    \ not pass any system\n      command on to the RI.\n"
- title: 5.2.2 Configuration
  contents:
  - "5.2.2 Configuration\n   It must be possible to change the expected address of\
    \ the DAG-CAP by\n   configuration of the software (i.e., host and port, e-mail\
    \ address,\n   etc).\n   For DAG-CAPs that need to access DAG-SAPs for query chaining,\
    \ for\n   each type (protocol) of DAG-SAP that is needed, the DAG-CAP must be\n\
    \   configurable in terms of:\n   - at least one known DAG-SAP of every necessary\
    \ protocol to contact\n   - for each DAG-SAP, the host and port of the DAG-SAP\
    \ software\n   The DAG-CAPs must also be configurable in terms of a maximum number\n\
    \   of referrals to handle for a user transaction (i.e., to prevent data\n   mining,\
    \ the DAG-CAP will refuse to reply if the query is too general\n   and too many\
    \ hits are generated at the Referral Index).\n   The DAG-CAP must be configurable\
    \ in terms of alternate DAG-CAPs of\n   the same type to which the end-user software\
    \ may be directed if this\n   one is too busy.\n"
- title: 5.2.3 Error handling
  contents:
  - "5.2.3 Error handling\n   Apart from error conditions arising from the operation\
    \ of the DAG-CAP\n   itself, DAG-CAPs are responsible for communicating error\
    \ conditions\n   occurring elsewhere in the system that affect the outcome of\
    \ the\n   user's query (e.g., in the DAG-RI, or in one or more DAG-SAPs).\n  \
    \ If the DAG-CAP sends a query to the DAG-RI and receives an error\n   message,\
    \ it should attempt to match the the received DAG errorcode\n   into its native\
    \ access protocol's error codes.  The same action is\n   appropriate when the\
    \ DAG-CAP is \"chaining\" the query to one DAG-SAP.\n   There are also occasions\
    \ when the DAG-CAP may have to combine\n   multiple errorcodes into a single expression\
    \ to the user.  When the\n   DAG-CAP is \"chaining\" the query through DAG-SAPs\
    \ to one or more\n   WDSPs, situations can arise when there is a mix of responsecodes\
    \ from\n   the DAG-SAPs.  If this happens, the DAG-CAP should try to forward\n\
    \   information to the end-user software that is as specific as possible,\n  \
    \ for instance which of the WDSPs has not been able to fulfill the\n   query and\
    \ why.\n   See Appendix D for more information concerning error condition\n  \
    \ message mappings.\n"
- title: 5.2.4 Pruning of results
  contents:
  - "5.2.4 Pruning of results\n   Since there is no perfect match between the query\
    \ syntaxes of the DAG\n   system on one hand and the different access protocols\
    \ that the DAG-\n   CAPs and DAG-SAPs supports on the other, there will be situations\n\
    \   where the results a DAG-CAP has to collect is \"broader\" then what\n   would\
    \ have been the case if there had been a perfect match.  This\n   might have adverse\
    \ effects on the system to the extent that\n   administrative limits will \"unnecessary\"\
    \ be exceeded on WDSPs or that\n   the collected results exceeds the sizelimit\
    \ of the DAG-CAP.\n   Since the DAG-CAP is the only part of the DAG system that\
    \ actually\n   knows what the original query was, the DAG-CAP can prune the results\n\
    \   received from the DAG-SAPs in such a way that the results presented\n   to\
    \ the client better matches the original question.\n"
- title: 5.3 DAG-SAP Basics
  contents:
  - '5.3 DAG-SAP Basics

    '
- title: 5.3.1 Functionality
  contents:
  - "5.3.1 Functionality\n   Every DAG-SAP must support the full range of DAG queries,\
    \ as defined\n   in 3.3.1.  Results must be complete DAG schemas expressed in\
    \ well-\n   formed DAG/IP result formats (see Appendix C).  Each DAG-SAP accepts\n\
    \   queries in DAG/IP and converts them to the native schema and protocol\n  \
    \ for which it is designed to proxy.\n   The DAG-SAP is then responsible for\n\
    \   - converting the query into the native schema and protocol of the\n     WDSP\
    \ to which the referral points.  (If the query is not\n     representable in the\
    \ native protocol, it must return an error\n     message.  If it is emulatable,\
    \ the DAG-SAP can attempt emulate it\n     by posing a related query to the WDSP\
    \ and post-pruning the results\n     received);\n   - contacting that WDSP, using\
    \ the host, port, and protocol\n     information provided in the referral;\n \
    \  - negotiating the query with the remote WDSP;\n   - accepting results from\
    \ the WDSP, possibly doing post-filtering on\n     the result set; and\n   - conveying\
    \ the results back to the calling DAG-CAP using the DAG/IP\n     and its schema.\n\
    \   Note that this implicitly means that the DAG-SAP is responsible for\n   chaining\
    \ and pursuing any referrals it receives from WDSP services.\n   The DAG-SAP returns\
    \ only search results to the DAG-CAP that called\n   it.\n"
- title: 5.3.2 Configuration
  contents:
  - "5.3.2 Configuration\n   DAG-SAPs must be configurable to accept connections only\
    \ from\n   recognized DAG components.\n   DAG-SAPs that have service limits must\
    \ be configurable to redirect\n   DAG-CAPs to alternate DAG-SAPs of the same type\
    \ when necessary.\n"
- title: 5.3.3 Error handling
  contents:
  - "5.3.3 Error handling\n   A DAG-SAP must translate error codes received from a\
    \ WDSP server to\n   DAG error codes according to Appendix D.\n"
- title: 5.3.4 Pruning of results
  contents:
  - "5.3.4 Pruning of results\n   Since it might not be possible to exactly map a\
    \ DAG query into a\n   query in the access protocol supported by the a DAG-SAP,\
    \ the DAG-SAP\n   should try to translate it into a more general query (or if\
    \ necessary\n   into a set of queries).  If so, the DAG-SAP must then prune the\n\
    \   result set received before furthering it to the DAG-CAP.\n"
- title: 5.3.5 Constraint precedence
  contents:
  - "5.3.5 Constraint precedence\n   Some constraints, search and case, can appear\
    \ both as local and\n   global constraints.  If this happens in a query then the\
    \ local\n   constraint specification overrides the global.  For a query like the\n\
    \   following:\n   fn=leslie;search=exact and org=think:search=substring\n   the\
    \ resulting search constraint for \"fn=leslie\" will be \"exact\" while\n   it\
    \ for \"org=think\" will be \"substring\".\n"
- title: 5.4 The Referral Index
  contents:
  - '5.4 The Referral Index

    '
- title: 5.4.1 Architecture
  contents:
  - "5.4.1 Architecture\n   The Referral Index contains (only) information necessary\
    \ to deliver\n   referrals to DAG-CAPs based on the query types supported by the\
    \ DAG\n   itself.  The Referral Index creates an index over these objects so\n\
    \   that it can respond to DAG-CAP queries using the DAG/IP.  The\n   information\
    \ is drawn directly from interactions with participating\n   WDSPs' software,\
    \ using the Common Indexing Protocol (CIP).\n"
- title: 5.4.2 Interactions with WDSPs (CIP)
  contents:
  - "5.4.2 Interactions with WDSPs (CIP)\n   WDSPs that wish to participate in the\
    \ DAG system must register\n   themselves (see Section 5.4.6).  Once registered,\
    \ the Referral Index\n   will interact with the WDSPs using the Common Indexing\
    \ Protocol as\n   defined in [1], using the Index Object defined in Section 5.4.3.\n"
- title: 5.4.3 Index Object Format
  contents:
  - "5.4.3 Index Object Format\n   The CIP index object type is based on the Tagged\
    \ Index Object as\n   defined in [12].  Appendix E details the expected content\
    \ of the\n   index objects as they are to be provided by the WDSPs.\n      TISDAG:\
    \ The tokens in the Tagged Index Object should be UTF-8\n      encoded composed\
    \ UNICODE version 2 character encoding.\n"
- title: 5.4.4 DAG-Internal I/O
  contents:
  - "5.4.4 DAG-Internal I/O\n   The Referral Index interacts with the rest of the\
    \ DAG internal\n   modules (DAG-CAPs) by listening for queries and responding\
    \ in the\n   DAG/IP (defined in Appendix C).\n"
- title: 5.4.5 The Index Server
  contents:
  - "5.4.5 The Index Server\n   The Referral Index must index the necessary attributes\
    \ of the CIP\n   index object in order to respond to queries of the form described\
    \ in\n   Table 3.1.\n   The semantics of the chosen CIP object (defined in Appendix\
    \ E) are\n   such that a referral to a WDSP server is sent back if (and only if)\n\
    \   - the index object of the WDSP contains all the tokens of the query,\n   \
    \  in the attributes specified, according to the logic of the DAG/IP\n     query,\
    \ and\n   - all of those tokens are found with a common tag.\n   This means that\
    \ a query for the name \"Fred Flintstone\" (2 tokens)\n   will yield a referral\
    \ to a server that has a record for \"Fred Amadeus\n   Flintstone\", but not to\
    \ a WDSP with 2 differently tagged records, for\n   \"Fred Amadeus\" and \"Julie\
    \ Flintstone\".  Depending on the access\n   protocol being used and the original\
    \ end-user query, the referral to\n   the WDSP with \"Fred Amadeus Flintstone\"\
    \ may yield a successful\n   result, or it may not.  But, it is known that the\
    \ other WDSP would\n   not have yielded successful searches.  That is, the referral\
    \ approach\n   may yield false-positive results, but will not miss appropriate\n\
    \   WDSPs.\n"
- title: 5.4.6 Configuration
  contents:
  - "5.4.6 Configuration\n   The Referral Index must provide the ability to register\
    \ interested\n   WDSPs, as outlined in Appendix E.\n   The Referral Index must\
    \ be able to configure the port for DAG/IP\n   communications.  Also, it must\
    \ be configurable to recognize only\n   registered DAG-CAPs.\n"
- title: 5.4.7 Security
  contents:
  - "5.4.7 Security\n   The Referral Index will accept queries only from recognized\n\
    \   (registered) DAG-CAPs.  This will reduce \"denial of service\" attack\n  \
    \ types, but is also a reflection on the fact that the Referral Index\n   uses\
    \ the DAG/IP, (i.e., internal) protocol, which should not be\n   exposed to non-DAG\
    \ software.\n   The Referral Index must be able to use authenticated communication\
    \ to\n   receive data from WDSPs (see Appendix E).\n"
- title: 5.5 Mail (SMTP) DAG-CAP
  contents:
  - "5.5 Mail (SMTP) DAG-CAP\n   This is the default Mail DAG-CAP.  More sophisticated\
    \ ones could\n   certainly be written -- e.g., for pretty-printed output, or for\n\
    \   handling different philosophies of case-matching.\n   This DAG-CAP has been\
    \ designed on the assumption that mail queries\n   will be human-generated (i.e.,\
    \ using a mail program/text editor), as\n   opposed to being queries formulated\
    \ by software agents.  The input\n   grammar should therefore be simple and liberal\
    \ in acceptance of\n   variations of whitespace formatting.\n"
- title: 5.5.1 Mail DAG-CAP Input
  contents:
  - "5.5.1 Mail DAG-CAP Input\n   Mail DAG-CAP input is expected to be a regular or\
    \ MIME-encoded (see\n   [9] and [10]) SMTP mail message, sent to an advertised\
    \ mail address.\n   The mail DAG-CAP parses the message and replies to it with\
    \ a MIME-\n   encoded message containing the results of the DAG search.\n   One\
    \ query is accepted per e-mail message -- text after a single valid\n   query\
    \ has been read is simply ignored.\n   The body of the query message must follow\
    \ the syntax defined below.\n   Note that all input control terms (\"type=\",\
    \ \"name=\" etc) are shown in\n   lower case for convenience, but could be upper\
    \ case or mixed case on\n   input.\n   mailquery       = [mnl] [controls] mnl\
    \ terms mnl\n   controls        = [msp] \"searchtype\" [msp] \"=\" [msp]\n   \
    \                     ( matchtype /\n                          casetype /\n  \
    \                        matchtype msp casetype /\n                          casetype\
    \ msp matchtype /\n                          <nothing> )\n   matchtype       =\
    \ \"substring\" / \"exact\"\n                  ; default:  substring\n   casetype\
    \        = \"ignore\" / \"sensitive\"\n                  ; default:  ignore\n\
    \   terms           = n / n-l / n-o / n-o-l / r-o / r-o-l\n   n              \
    \ = n-term\n   n-l             = ( n-term l-term  / l-term n-term)\n   n-o   \
    \          = ( n-term o-term  / o-term n-term )\n   n-o-l           = ( n-term\
    \ o-term l-term /\n                    n-term l-term o-term /\n              \
    \      l-term n-term o-term /\n                    l-term o-term n-term /\n  \
    \                  o-term l-term n-term /\n                    o-term n-term l-term\
    \ )\n   r-o             = ( r-term o-term / o-term r-term )\n   r-o-l        \
    \   = ( r-term o-term l-term /\n                    r-term l-term o-term /\n \
    \                   l-term o-term r-term /\n                    l-term r-term\
    \ o-term /\n                    o-term l-term r-term /\n                    o-term\
    \ r-term l-term )\n   n-term          = [msp] \"name\" [msp] \"=\" [msp] string\
    \ mnl\n   o-term          = [msp] \"org\" [msp] \"=\" [msp] string mnl\n   l-term\
    \          = [msp] \"loc\" [msp] \"=\" [msp] string mnl\n   r-term          =\
    \ [msp] \"role\" [msp] \"=\" [msp] string mnl\n   string          = <US-ASCII\
    \ or quoted-printable encoded\n                   ISO-8859-1 or UTF-8 except nl\
    \ and sp>\n   msp             = 1*(sp)\n    sp              = \" \"\n   mnl  \
    \           = 1*(nl)\n   nl              = <linebreak>\n   The following are valid\
    \ mail queries:\n   Example 1:\n   searchtype =   <NL>\n   name = thinking cat<NL>\n\
    \   Example 2:\n   searchtype = exact ignore<NL>\n   name=thinking cat<NL>\n \
    \  Example 3:\n   role=thinking cat<NL>\n   org =space colonization<NL>\n   Example\
    \ 4:\n   name=thinking cat <NL>\n   <NL>\n   <NL>\n   My signature line follows\
    \ here in the most annoying\n   fashion <NL>\n   Note that the following are not\
    \ acceptable queries:\n   Example 5:\n   searchtype= exact substring <NL>\n  \
    \ name = thinking cat <NL>\n   Example 6:\n   name=thinking cat org= freedom fighters\
    \ anonymous<NL>\n   In Example 5, two conflicting searchtypes are given.  In Example\
    \ 6,\n   no linebreak follows the n-term.\n"
- title: 5.5.2 Translation from Mail query to DAG/IP
  contents:
  - "5.5.2 Translation from Mail query to DAG/IP\n   Querying the Referral Index\n\
    \   A key element of translating from the Mail DAG-CAP input into the\n   DAG/IP\
    \ query format is to \"tokenize\" the input terms into single\n   token elements\
    \ for the DAG/IP query.  For example,  the n-term\n   name= thinking cat<NL>\n\
    \   is tokenized into 2 n-tokens:\n   thinking\n   cat\n   which are then mapped\
    \ into the following in the DAG/IP query (dag-n-\n   terms):\n   FN=thinking and\
    \ FN=cat<NL>\n   The same is true for all r-terms, l-terms and o-terms.  The primary\n\
    \   steps in translating the mail input into a DAG/IP query are:\n   translate\
    \ quoted-printable encoding, if necessary\n   translate base64 encoding, if necessary\n\
    \   tokenize the strings for each term\n   construct the DAG/IP query from the\
    \ resulting components, as\n   described in more detail below\n   DAG/IP constraints\
    \ are constructed from the searchtype information in\n   the query.\n   dag-matchtype\
    \ = \"search=\" <matchtype> /\n                \"search=substring\"  ; if matchtype\
    \ not\n                                    ; specified\n   dag-casetype  = \"\
    case=ignore\"  /    ; if casetype not\n                                    ; specified\
    \ or\n                                    ; casetype=ignore\n                \"\
    case=consider\"     ; if casetype=sensitive\n   constraints   = \":\" dag-matchtype\
    \ \";\" dag-casetype\n   The terms for the DAG/IP query are constructed from the\
    \ tokenized\n   strings from the mail input.\n   dag-n-terms   = \"FN=\" n-token\
    \ 0*( \" and FN=\" n-token)\n   dag-o-terms   = \"ORG=\" o-token 0*( \" and ORG=\"\
    \ o-token)\n   dag-l-terms   = \"LOC=\" l-token 0*( \" and LOC=\" l-token)\n \
    \  dag-r-terms   = \"ROLE=\" r-token 0*( \" and ROLE=\" r-token)\n   This means\
    \ that the relevant DAG/IP queries are formulated as one of\n   two types:\n \
    \  dagip-query   = ( ( ( n-query / nl-query / no-query /\n                   \
    \   nol-query ) [\" and template=DAGPERSON\"]\":\"\n                   dag-matchtype\
    \ \";\" dag-casetype) /\n                  ( ( ro-query / rol-query )\n      \
    \              [\" and template=DAGORGROLE\"]\":\"\n                    dag-matchtype\
    \ \";\" dag-casetype)  )\n   n-query       = dag-n-terms\n   nl-query      = dag-n-terms\
    \ \" and \" dag-l-terms\n   no-query      = dag-n-terms \" and \" dag-o-terms\n\
    \   nol-query     = dag-n-terms \" and \" dag-o-terms \" and \"\n            \
    \    dag-l-terms\n   ro-query      = dag-r-terms \" and \" dag-o-terms\n   rol-query\
    \     = dag-r-terms \" and \" dag-o-terms \" and \"\n                dag-l-terms\n\
    \   The examples given earlier are then translated as follows.\n   Example 1:\n\
    \   FN=thinking and FN=cat:search=substring;case=ignore<NL>\n   Example 2:\n \
    \  FN=thinking and FN=cat:search=exact;case=ignore<NL>\n   Example 3:\n   ROLE=thinking\
    \ and ROLE=cat and ORG=space and\n   ORG=colonization:search=substring;case=ignore<NL>\n\
    \   Querying a DAG-SAP\n   In querying a DAG-SAP (irrespective of the protocol\
    \ of that DAG-SAP),\n   the DAG/IP query must include information about the target\
    \ WDSP\n   server.  This information is drawn from the Referral Index SERVER-\n\
    \   TO-ASK referral information, and is appended to the query as\n   specified\
    \ in Appendix C):\n   \":host=\" quoted-hostname \";port=\" number \";server-info=\"\
    \n   quoted-serverinfo \";charset=\" charset\n   where the response from the Referral\
    \ Index included:\n   \"# SERVER-TO-ASK \" serverhandle nl\n   \" Server-info:\
    \ \" serverinfo nl\n   \" Host-Name: \" hostname nl\n   \" Host-Port: \" number\
    \ nl\n   \" Protocol: \" prot nl\n   \" Source-URI: \" source nl\n   \" Charset:\
    \ \" charset nl\n   \"# END\" nl\n   and the \"quoted-hostname\" and \"quoted-serverinfo\"\
    \ are obtained from\n   \"hostname\" and \"serverinfo\" respectively, by quoting\
    \ the DAG/IP\n   special characters.\n   For example, the referral\n   # SERVER-TO-ASK\
    \ dagsystem01<NL>\n    Server-info: o=thinkingcat, c=se<NL>\n    Host-Name: thinkingcat.com<NL>\n\
    \    Host-Port: 2839<NL>\n    Protocol: ldapv2<NL>\n    Source-URI: http://www.thinkcat.com\n\
    \    Charset: T.61<NL>\n    # END<NL>\n   would yield the addition\n   :host=thinkingcat\\\
    .com;port=2839;server-info=o\\=thinkingcat\\,\\\n   c\\=se;charset=T\\.61\n  \
    \ in its query to an LDAPv2 DAG-SAP.\n   (N.B.: See Appendix C for further definitions\
    \ of the terms used in\n   the SERVER-TO-ASK response).\n   Note that it is the\
    \ DAG-SAP's responsibility to extract these terms\n   from the query and use them\
    \ to identify the WDSP server to be\n   contacted.  See the individual DAG-SAP\
    \ definitions, below.\n"
- title: 5.5.3 Chaining queries in Mail DAG-CAP
  contents:
  - "5.5.3 Chaining queries in Mail DAG-CAP\n   The Mail DAG-CAP has to chain all\
    \ referrals -- to the Whois++ DAG-\n   SAP, LDAPv2  DAG-SAP, or LDAPv3 DAG-SAP\
    \ as appropriate for the\n   referral.\n"
- title: 5.5.4 Expression of results in Mail DAG-CAP
  contents:
  - "5.5.4 Expression of results in Mail DAG-CAP\n   The results message is sent to\
    \ the \"Reply-To:\"  address of the\n   originating mail, if available (see [4]\
    \ for appropriate\n   interpretation of mail originator headers).  The original\
    \ query is\n   repeated, along with the message-id.  The remainder of the body\
    \ of\n   the mail message is the concatenation of responses from the DAG-SAP\n\
    \   calls, each result having the WDSP's SOURCE URI (from the referral)\n   appended\
    \ to it, and the system messages also having been removed.\n   At the end of the\
    \ message, the WDSP servers that failed to respond\n   (i.e., the DAG-SAP handling\
    \ the referral returned the \"% 403\n   Information Unavailable\" message) are\
    \ listed with their server-info.\n"
- title: 5.5.5 Expression of Errors in Mail DAG-CAP
  contents:
  - "5.5.5 Expression of Errors in Mail DAG-CAP\n   If the mail DAG-CAP receives a\
    \ message that is not parsable using the\n   query grammar described above, it\
    \ returns an explanatory message to\n   the query mail's reply address saying\
    \ that the query could not be\n   interpreted, and giving a description of valid\
    \ queries.\n   If the number of referrals sent by the Referral Index is greater\
    \ than\n   the pre-determined maximum (for detecting data-mining efforts, or\n\
    \   otherwise refusing over-general queries, such as \"FN=svensson\"), the\n \
    \  mail DAG-CAP will send an explanatory message to the query mail's\n   reply\
    \ address describing the \"over-generalized query\" problem,\n   suggesting the\
    \ user resubmit a more precise query, and describing the\n   list of valid query\
    \ types.\n   If the mail DAG-CAP receives several different result codes from\
    \ the\n   DAG-SAPs it should represent those in an appropriate manner in the\n\
    \   response message.\n   A mail DAG-CAP may redirect a connection to another\
    \ mail DAG-CAP for\n   reasons of load-balancing.  This is done simply by forwarding\
    \ the\n   mail query to the address of the alternate mail DAG-CAP.\n"
- title: 5.6 Web (HTTP) DAG-CAP
  contents:
  - '5.6 Web (HTTP) DAG-CAP

    '
- title: 5.6.1 Web DAG-CAP Input
  contents:
  - "5.6.1 Web DAG-CAP Input\n   The web DAG-CAP provides its interface via standard\
    \ HTTP protocol.\n   The general expectation is that the web DAG-CAP will provide\
    \ a form\n   page with radio buttons to select \"substring or exact match\" and\n\
    \   \"consider case or ignore case\".  Other information (about name, role,\n\
    \   organization, locality) is solicited as free-form text.\n   The DAG-CAP receives\
    \ queries via an HTTP \"post\" method (the outcome\n   of the form action for\
    \ the page described above, or generated\n   elsewhere).  The rest of this section\
    \ describes the variables that\n   are to be expressed in that post.  The actual\
    \ layout of the page and\n   most user interface issues are left to the discretion\
    \ of the builder.\n   Note that the Web DAG-CAP may be called upon to provide\
    \ responses in\n   different content encoding, and must therefore address the\
    \ \"Accept-\n   Encoding:\" request header in the HTTP connection.\n   Although\
    \ the Web protocol, HTTP, is not itself capable of handling\n   referrals, through\
    \ the use of two extra variables this client is\n   given the option of requesting\
    \ referral information and then pursuing\n   individual referrals through the\
    \ Web DAG-CAP itself, as a proxy for\n   those referrals.  This is handled through\
    \ the extra \"control\n   variables\" to request referrals only, and to indicate\
    \ when the\n   transaction is a continuation of a previous query to pursue a\n\
    \   referral.\n   There has been call to have a \"machine-readable\" version of\
    \ the\n   search output.  As HTML is geared towards visual layout, user agents\n\
    \   that intend to do something with the results other than present them\n   in\
    \ an HTML browser have few cues to use to extract the relevant\n   information\
    \ from the HTML page.  Also, \"minor\" visual changes,\n   accomplished with extensive\
    \ HTML updates, can disrupt user agents\n   that were built to blindly parse the\
    \ original HTML.  Therefore,\n   provision has been made to return \"raw\" format\
    \ results.  These are\n   requested by specifying \"Accept-Content: application/whoispp-\n\
    \   response\"  in the request header of the HTTP message to the HTTP\n   DAG-CAP.\n\
    \   The variables that are expected are:\n   transaction     = \"new\" / \"chain\"\
    \  ; default is \"new\". This\n                   ; should not be user-settable.\
    \  It is used\n                   ; in constructed URLs\n   resulttype      =\
    \ \"all\" / \"referrals\" ; default is \"all\"\n   matchtype       = \"substring\"\
    \ / \"exact\"\n   casetype        = \"case ignore\" / \"case sensitive\"\n   n-term\
    \          = string\n   o-term          = string\n   l-term          = string\n\
    \   r-term          = string\n   host-term       = string\n   port-term      \
    \ = string\n   servinfo-term   = string\n   prot-term       = string ; the protocol\
    \ of the referral\n   string          = <UNICODE-2-0-UTF-8> / <UNICODE-1-1-UTF-8>\
    \ /\n                  <ISO-8859-1>\n"
- title: 5.6.2 Translation from Web query to DAG/IP
  contents:
  - "5.6.2 Translation from Web query to DAG/IP\n   Querying a DAG-SAP Directly\n\
    \   If the transaction variable is \"chain\", the information in the POST\n  \
    \ is used to pursue a particular referral, not do a search of the\n   Referral\
    \ Index.  The appropriate DAG-SAP (deduced from the prot-term)\n   is contacted\
    \ and issued the query directly.\n   Results from this type of query are always\
    \ full results (i.e., not\n   referrals).\n   Querying the Referral Index\n  \
    \ A key element of translating from the Web DAG-CAP input into the\n   DAG/IP\
    \ query format is to \"tokenize\" the input terms into single\n   token elements\
    \ for the DAG/IP query.  For example,  the n-term\n   name= thinking cat\n   is\
    \ tokenized into 2 n-tokens:\n   thinking\n   cat\n   which are then mapped into\
    \ the following in the DAG/IP query (dag-n-\n   terms):\n   FN=thinking and FN=cat\n\
    \   The same is true for the r-term, l-term and o-term.\n   The primary steps\
    \ in translating the HTTP input into a DAG/IP query\n   are:\n   translate encodings,\
    \ if necessary\n   tokenize the strings for each term\n   construct the DAG/IP\
    \ query from the resulting components, as\n   described in more detail below\n\
    \   DAG/IP constraints are constructed from the searchtype information in\n  \
    \ the query.\n   dag-matchtype = \"search=\" <matchtype> /\n                \"\
    search=substring\"     ; if matchtype not\n                                  \
    \     ; specified\n   dag-casetype  = \"case=ignore\"  /       ; if casetype not\n\
    \                                       ; specified or\n                     \
    \                  ; casetype=\"case ignore\"\n                \"case=consider\"\
    \        ; if casetype=\n                                       ; \"case sensitive\"\
    \n   constraints   = \":\" dag-matchtype \";\" dag-casetype\n   The terms for\
    \ the DAG/IP query are constructed from the tokenized\n   strings from the HTTP\
    \ post input.\n   dag-n-terms   = \"FN=\" n-token 0*( \" and FN=\" n-token)\n\
    \   dag-o-terms   = \"ORG=\" o-token 0*( \" and ORG=\" o-token)\n   dag-l-terms\
    \   = \"LOC=\" l-token 0*( \" and LOC=\" l-token)\n   dag-r-terms   = \"ROLE=\"\
    \ r-token 0*( \" and ROLE=\" r-token)\n   This means that the relevant DAG/IP\
    \ queries are formulated as one of\n   two types:\n   dagip-query   = ( ( ( n-query\
    \ / nl-query / no-query / nol-query )\n                      [\" and template=DAGPERSON\"\
    ]\":\" dag-matchtype\n                      \";\" dag-casetype) /\n          \
    \        ( ( ro-query / rol-query )\n                      [\" and template=DAGORGROLE\"\
    ]\":\" dag-matchtype\n                      \";\" dag-casetype)  )\n   n-query\
    \       = dag-n-terms\n   nl-query      = dag-n-terms \" and \" dag-l-terms\n\
    \   no-query      = dag-n-terms \" and \" dag-o-terms\n   nol-query     = dag-n-terms\
    \ \" and \" dag-o-terms \" and \"\n                dag-l-terms\n   ro-query  \
    \    = dag-r-terms \" and \" dag-o-terms\n   rol-query     = dag-r-terms \" and\
    \ \" dag-o-terms \" and \"\n                dag-l-terms\n   Querying a DAG-SAP\n\
    \   In querying a DAG-SAP (irrespective of the protocol of that DAG-SAP),\n  \
    \ the DAG/IP query must include information about the target WDSP\n   server.\
    \  This information is drawn from the Referral Index SERVER-\n   TO-ASK referral\
    \ information, and is appended to the query as\n   specified in Appendix C:\n\
    \   \":host=\" quoted-hostname \";port=\" number \";server-info=\"\n   quoted-serverinfo\
    \ \";charset=\" charset\n   where the response from the Referral Index included:\n\
    \   \"# SERVER-TO-ASK \" serverhandle <NL>\n   \" Server-info: \" serverinfo <NL>\n\
    \   \" Host-Name: \" hostname <NL>\n   \" Host-Port: \" number <NL>\n   \" Protocol:\
    \ \" prot <NL>\n   \" Source-URI: \" source <NL>\n   \" Charset: \" charset <NL>\n\
    \   \"# END\" <NL>\n   and the \"quoted-hostname\" and \"quoted-serverinfo\" are\
    \ obtained from\n   \"hostname\" and \"serverinfo\" respectively, by quoting the\
    \ DAG/IP\n   special characters.\n   For example, the referral\n   # SERVER-TO-ASK\
    \ dagsystem01<NL>\n    Server-info: o=thinkingcat, c=se<NL>\n    Host-Name: thinkingcat.com<NL>\n\
    \    Host-Port: 2839<NL>\n    Protocol: ldapv2<NL>\n    Source-URI: http://www.thinkingcat.com\n\
    \    Charset: T.61<NL>\n   # END<NL>\n   would yield the addition\n   :host=thinkingcat\\\
    .com;port=2839;server-info=o\\=thinkingcat\\,\\\n   c\\=se;charset=T\\.61\n  \
    \ in its query to an LDAPv2 DAG-SAP\n   (N.B.: See Appendix C for further definitions\
    \ of the terms used in\n   the SERVER-TO-ASK response).\n   Note that it is the\
    \ DAG-SAP's responsibility to extract these terms\n   from the query and use them\
    \ to identify the WDSP server to be\n   contacted.  See the individual DAG-SAP\
    \ definitions, below.\n"
- title: 5.6.3 Chaining queries in Web DAG-CAP
  contents:
  - "5.6.3 Chaining queries in Web DAG-CAP\n   If the resulttype was \"all\", all\
    \ of the referrals received from the\n   Referral Index are chained using the\
    \ appropriate DAG-SAPs.  If only\n   referrals were requested, the Referral Index\
    \ results are returned.\n"
- title: 5.6.4 Expression of results in Web DAG-CAP
  contents:
  - "5.6.4 Expression of results in Web DAG-CAP\n   text/html results\n   The default\
    \ response encoding is text/html.  If the resulttype was\n   \"all\",  the content\
    \ of the chaining responses from the DAG-SAPs,\n   without the system messages,\
    \ is collated into a single page response,\n   one result entry per demarcated\
    \ line ( e.g., bullet item).  The FN or\n   ROLE value should be presented first\
    \ and clearly.  The SOURCE URI for\n   each WDSP referral should be presented\
    \ as an HREF for each of the\n   WDSPs results.\n   At the end of the message,\
    \ the WDSP servers that failed to respond\n   (i.e., the DAG-SAP handling the\
    \ referral returned the \"% 403\n   Information Unavailable\" message) are listed\
    \ with their server-info.\n   If, however, the resulttype was \"referrals\", the\
    \ results from the\n   Referral Index are returned as HREF URLs to the Web DAG-CAP\
    \ itself,\n   with the necessary information to carry out the query (including\
    \ the\n   \"HOST=\", etc, for the referral).\n   For example, if the original\
    \ query:\n   n-term=\"thinking cat\"\n   resulttype=\"referrals\"\n   drew the\
    \ following referral from the Referral Index:\n   # SERVER-TO-ASK DAG-Serverhandle<NL>\n\
    \    Server-Info: c=se, o=tce<NL>\n    Host-Name: answers.tce.com<NL>\n    Host-Port:\
    \ 1111<NL>\n    Protocol: ldapv3<NL>\n    Source-URI: http://some.service.se/\n\
    \    Charset: UTF-8<NL>\n   # END<NL>\n   the response would be an HTML page with\
    \ an HREF HTTP \"POST\" URL to\n   the Web DAG-CAP with the following variables\
    \ set:\n   n-term=\"thinking cat\"\n   transaction=\"chain\"\n   servinfo-term=\"\
    c=se, o=tce\"\n   host-term=\"answers.tce.com\"\n   port-term=\"1111\"\n   prot-term=\"\
    ldapv3\"\n   The Source-URI should be established in the response as its own HREF\n\
    \   URI.\n   application/whoispp-response Results\n   If Accept-Encoding: \" HTTP\
    \ request header had the value\n   \"application/whoispp-response\", the content\
    \ of the HTTP response will\n   be constructed in the same syntax and attribute\
    \ mapping as for the\n   Whois++ DAG-CAP.\n   If the resulttype was \"all\", all\
    \ the referrals will have been chained\n   by the Web DAG-CAP, and the response\
    \ will include only full data\n   records.\n   If the resulttype was \"referrals\"\
    , then all referrals are passed\n   directly back in a single response, in correct\
    \ Whois++ referral\n   format (conveniently, this is how they are formulated in\
    \ the DAG/IP).\n   Note that this will include referrals to LDAP-based services\
    \ as well\n   as Whois++ servers.\n"
- title: 5.6.5 Expression of Errors in Web DAG-CAP
  contents:
  - "5.6.5 Expression of Errors in Web DAG-CAP\n   A Web DAG-CAP may redirect a connection\
    \ to another web DAG-CAP for\n   reasons of load-balancing.  This is done simply\
    \ by using an HTTP\n   redirect.\n   Standard Errors\n   If the web DAG-CAP receives\
    \ a message that is not parsable using the\n   query grammar described above,\
    \ it sends an explanatory HTML page\n   saying that the query could not be interpreted,\
    \ and giving a\n   description of valid queries.\n   If the number of referrals\
    \ sent by the Referral Index is greater than\n   the pre-determined maximum (for\
    \ detecting data-mining efforts, or\n   otherwise refusing over-general queries,\
    \ such as \"FN=svensson\"), the\n   web DAG-CAP will send a page with an explanatory\
    \ message describing\n   the \"over-generalized query\" problem, suggesting the\
    \ user resubmit a\n   more precise query, and describing the list of valid query\
    \ types.\n   If the web DAG-CAP receives more than one result code from the DAG-\n\
    \   SAPs, it must represent them all in a appropriate manner in the\n   response.\n\
    \   application/whoispp-response Errors\n   An invalid query is responded to with\
    \ a simple text response with the\n   error: \"% 500 Syntax Error\".\n   If too\
    \ many referrals are generated from the Referral Index, the\n   simple text response\
    \ will have the message \"% 503 Query too general\".\n"
- title: 5.7 Whois++ DAG-CAP
  contents:
  - "5.7 Whois++ DAG-CAP\n      TISDAG: The system commands polled-for/-by should\
    \ elicit the empty\n      set as a return value until we better understand the\
    \ implications\n      of doing otherwise.\n"
- title: 5.7.1 Whois++ DAG-CAP Input
  contents:
  - "5.7.1 Whois++ DAG-CAP Input\n   Input to the Whois++ DAG-CAP follows the Whois++\
    \ standard ([6]).\n   Minimally, the Whois++ DAG-CAP must support the following\
    \ queries:\n   Query Type     Expression in Whois++\n   -----------    ------------------------------------\n\
    \   N              One or more \"name=\" and\n                  template=USER\n\
    \   NL             One or more \"name=\" and\n                  One or more \"\
    address-locality=\" and template=USER\n   NO             One or more \"name=\"\
    \ and\n                  one or more \"organization-name=\" and template=USER\n\
    \   NOL            One or more \"name=\" and\n                  one or more  \"\
    organization-name=\" and\n                  one or more  \"address-locality=\"\
    \ and template=USER\n   RO             One or more \"org-role=\" and\n       \
    \           one or more \"organization-name=\" and template=ORGROLE\n   ROL  \
    \          One or more \"org-role=\" and\n                  one or more \"organization-name=\"\
    \ and\n                  one or more \"address-locality=\" and template=ORGROLE\n\
    \      Table 5.1 Allowable Whois++ Queries\n   The following constraints must\
    \ be supported for queries:\n   \"search=\" (substring / exact)\n   \"case=\"\
    \ (ignore / consider)\n   If no constraints are defined in a query the default\
    \ is exact and\n   ignore.  For example,\n   FN=foo and loc=kista and fn=bar<NL>\n\
    \   is a perfectly valid Whois++ NL query for \"Foo Bar\" in \"Kista\".\n"
- title: 5.7.2 Translation from Whois++ query to DAG/IP
  contents:
  - "5.7.2 Translation from Whois++ query to DAG/IP\n   Querying the Referral Index\n\
    \   The Whois++ DAG-CAP formulates a DAG/IP query by forwarding the\n   search\
    \ terms received (as defined in Table 5.1).\n   For example, the above query would\
    \ be expressed as:\n   FN=foo and LOC=kista and FN=bar and template=DAGPERSON<NL>\n\
    \   Querying a DAG-SAP\n   In querying a DAG-SAP (irrespective of the protocol\
    \ of that DAG-SAP),\n   the DAG/IP query must include information about the target\
    \ WDSP\n   server.  This information is drawn from the Referral Index SERVER-\n\
    \   TO-ASK referral information, and is appended to the query as\n   specified\
    \ in appendix C:\n   \":host=\" quoted-hostname \";port=\" number \";server-info=\"\
    \n   quoted-serverinfo \";charset=\" charset\n   where the response from the Referral\
    \ Index included:\n   \"# SERVER-TO-ASK \" serverhandle<NL>\n   \" Server-info:\
    \ \" serverinfo<NL>\n   \" Host-Name: \" hostname<NL>\n   \" Host-Port: \" number<NL>\n\
    \   \" Protocol: \" prot<NL>\n   \" Source-URI: \" source<NL>\n   \" Charset:\
    \ \" charset<NL>\n   \"# END\"<NL>\n   and the \"quoted-hostname\" and \"quoted-serverinfo\"\
    \ are obtained from\n   \"hostname\" and \"serverinfo\" respectively, by quoting\
    \ the DAG/IP\n   special characters.\n   For example, the referral\n   # SERVER-TO-ASK\
    \ dagsystem01<NL>\n    Server-info: o=thinkingcat, c=se<NL>\n    Host-Name: thinkingcat.com<NL>\n\
    \    Host-Port: 2839<NL>\n    Protocol: ldapv2<NL>\n    Source-URI: http://www.thinkingcat.com/\n\
    \    Charset: T.61<NL>\n   # END<NL>\n   would yield the addition\n   :host=thinkingcat\\\
    .com;port=2839;server-info=o\\=thinkingcat\\,\\\n   c\\=se;charset=T\\.61\n  \
    \ in its query to an LDAPv2 DAG-SAP.\n   (N.B.: See Appendix C for further definitions\
    \ of the terms used in\n   the SERVER-TO-ASK response).\n   Note that it is the\
    \ DAG-SAP's responsibility to extract these terms\n   from the query and use them\
    \ to identify the WDSP server to be\n   contacted.  See the individual DAG-SAP\
    \ definitions, below.\n"
- title: 5.7.3 Chaining in Whois++ DAG-CAP
  contents:
  - "5.7.3 Chaining in Whois++ DAG-CAP\n   The Whois++ DAG-CAP relies on DAG-SAPs\
    \ to chain any non-Whois++\n   referrals (currently, the LDAPv2 and LDAPv3 DAG-SAPs).\n"
- title: 5.7.4 Expression of results in Whois++
  contents:
  - "5.7.4 Expression of results in Whois++\n   Results are expressed in Whois++ by\
    \ collating the DAG/IP results\n   received from DAG-SAPs (using the FULL response),\
    \ and using the\n   template and attribute mappings defined in Appendix B. For\
    \ each\n   result from a given referral, the SOURCE attribute is added, with the\n\
    \   value of the SOURCE-URI from the referral.\n   Any referrals to other Whois++\
    \ servers provided by the Referral Index\n   are sent directly to the Whois++\
    \ client as follows:\n   server-to-ask   =   \"# SERVER-TO-ASK \" DAG-Serverhandle<NL>\n\
    \                    \" Server-Handle: \" SERVER-INFO<NL>\n                  \
    \  \" Host-Name: \" HOST<NL>\n                    \" Host-Port: \" PORT<NL>\n\
    \                    \" Protocol: \" PROTOCOL<NL>\n                    \"# END\"\
    <NL>\n   where SERVER-INFO, HOST, PORT, PROTOCOL are drawn from the referral\n\
    \   provided in the DAG/IP, and the SOURCE-URI information is lost.\n"
- title: 5.7.5 Expression of Errors in Whois++ DAG-CAP
  contents:
  - "5.7.5 Expression of Errors in Whois++ DAG-CAP\n   As appropriate, the Whois++\
    \ DAG-CAP will express operational errors\n   following the Whois++ standard.\
    \  There are 4 particular error\n   conditions of the DAG system that the DAG-CAP\
    \ will handle as\n   described below.\n   When the Whois++ DAG-CAP receives a\
    \ query that it cannot reply to\n   within the (data) constraints of the DAG,\
    \ it sends an error message\n   and closes the connection.  The error message\
    \ includes\n   % 502 Search expression too complicated<NL>\n   If the number of\
    \ referrals sent by the Referral Index is greater than\n   the pre-determined\
    \ maximum (for detecting data-mining efforts, or\n   otherwise refusing over-general\
    \ queries, such as \"FN=svensson\"), the\n   Whois++ DAG-CAP will send an error\
    \ message and close the connection.\n   The error message includes\n   % 503 Query\
    \ too general<NL>\n   (N.B.: this is different from the \"Too many hits\" reply,\
    \ which does\n   send partial results.)\n   A Whois++ DAG-CAP may redirect a connection\
    \ to another Whois++ DAG-\n   CAP for reasons of load-balancing.  This is expressed\
    \ to the end-user\n   client software using the SERVER-TO-ASK response with appropriate\n\
    \   information to reach the designated alternate DAG-CAP.\n   If a Whois++ DAG-CAP\
    \ receives several different response codes from\n   DAG-SAPs it should try to\
    \ represent them all in the response to the\n   end-user client.\n   The proposed\
    \ mapping between DAG/IP response codes and Whois++\n   response codes are given\
    \ in Appendix D.\n"
- title: 5.8 LDAPv2 DAG-CAP
  contents:
  - '5.8 LDAPv2 DAG-CAP

    '
- title: 5.8.1 LDAPv2 DAG-CAP Input
  contents:
  - "5.8.1 LDAPv2 DAG-CAP Input\n   Input to the LDAPv2 DAG-CAP follows the LDAPv2\
    \ standard ([19]).\n   Minimally, the LDAPv2 DAG-CAP must support the following\
    \ queries\n   (adapted from the ASN.1 grammar of the standard):\n   BindRequest\
    \ ::=\n         [APPLICATION 0] SEQUENCE {\n                     version   INTEGER\
    \ (1 .. 127),\n                     name      LDAPDN,\n                     authentication\
    \ CHOICE {\n                           simple        [0] OCTET STRING,\n     \
    \                      krbv42LDAP    [1] OCTET STRING,\n                     \
    \      krbv42DSA     [2] OCTET STRING\n                      }\n         }\n \
    \  BindResponse ::= [APPLICATION 1] LDAPResult\n   SearchRequest ::=\n    [APPLICATION\
    \ 3] SEQUENCE {\n        baseObject    \"dc=se\",\n        scope         wholeSubtree\
    \          (2),\n        derefAliases  ENUMERATED {\n                     neverDerefAliases\
    \     (0),\n                     derefInSearching      (1),\n                \
    \     derefFindingBaseObj   (2),\n                     derefAlways           (3)\n\
    \        },\n        sizeLimit     INTEGER (0 .. maxInt),\n        timeLimit \
    \    INTEGER (0 .. maxInt),\n        attrsOnly     BOOLEAN,\n        filter  \
    \      Filter,\n        attributes    SEQUENCE OF AttributeType\n   }\n   Filter\
    \ ::=\n    CHOICE {\n        and                [0] SET OF Filter,\n        or\
    \                 [1] SET OF Filter,\n        not                [2] Filter,\n\
    \        equalityMatch      [3] AttributeValueAssertion,\n        substrings \
    \        [4] SubstringFilter\n    }\n   SubstringFilter ::=\n    SEQUENCE {\n\
    \        type               AttributeType,\n        SEQUENCE OF CHOICE {\n   \
    \         initial        [0] LDAPString,\n            any            [1] LDAPString,\n\
    \            final          [2] LDAPString\n        }\n    }\n   Queries against\
    \ attributes in the prescribed LDAP standard schema\n   (see Appendix B) are accepted.\n\
    \   N.B., this is a minimal set of supported queries, to achieve the\n   basic\
    \ DAG-defined queries.  An LDAP DAG-CAP may choose to support\n   more complex\
    \ queries than this, if it undertakes to do the\n   translation from the DAG/IP\
    \ to the LDAPv2 client in a way that\n   responds to the semantics of those queries.\n\
    \      TISDAG:  Since LDAPv2 didn't specify any characterset but relied\n    \
    \  on X.500 to do so, in practice several different charactersets are\n      in\
    \ use in Sweden today.  That the LDAPv2 CAP has no way of knowing\n      which\
    \ characterset that are in use by a connecting client is a\n      problem that\
    \ the TISDAG project can not solve.\n      Users of the DAG system will have to\
    \ configure their specific\n      client according to information on the TISDAG\
    \ web page.  That page\n      provides very specific information (including port\
    \ number) that\n      can be given to LDAPv2 users.  The LDAP DAG-CAP listening\
    \ on the\n      default port (389) will be the LDAPv3 one.\n"
- title: 5.8.2 Translation from LDAPv2 query to DAG/IP
  contents:
  - "5.8.2 Translation from LDAPv2 query to DAG/IP\n   Querying the Referral Index\n\
    \   The essential stratagem for mapping LDAP queries into DAG/IP Referral\n  \
    \ Index queries is to tokenize the string-oriented LDAP\n   AttributeValueAssertions\
    \ or SubstringFilters and construct an\n   appropriate DAG/IP token-oriented query\
    \ in the DAG/IP.  This will\n   generalize the LDAP query and yield false-positive\
    \ referrals, but\n   should not miss any appropriate referrals.\n   There are\
    \ 3 particular cases to be considered:\n   equalityMatch queries\n   substring\
    \ queries\n   combination equalityMatch and substring queries\n      TISDAG: If\
    \ the LDAP filter contains a cn-term and no objectclass\n      specification it\
    \ is unclear if the search is for a person or a\n      role.  When this happens\
    \ the DAG query should cover all bases and\n      map the query into a query for\
    \ both people and roles.\n   EqualityMatch queries can be handled by simply tokenizing\
    \ the\n   AttributeValueAssertions, making one DAG/IP query term per token\n \
    \  (using the appropriate DAGSchema attribute) and carrying out an\n   exact match\
    \ in the DAG/IP.\n   Consider the following example, represented in the ASCII\n\
    \   expression of LDAP Filters as described in [13]):\n   (& (cn=Foo Bar)(objectclass=inetOrgPerson))\n\
    \   This query can be represented in the DAG/IP as\n   FN=\"Foo\" and FN=\"Bar\"\
    :search=exact<NL>\n   N.B.\n   The search is set up to be \"case=ignore\" (the\
    \ DAG/IP's default)\n   because the relevant LDAP schema attributes are all derivatives\n\
    \   of the \"name\" attribute element, which is defined to have a case\n   insensitive\
    \ match.\n   If no objectclass were defined the query in DAG/IP would have\n \
    \  been\n   (FN=\"Foo\" and FN=\"bar\") or (ROLE=\"Foo\" and ROLE=\"bar\"):search=exact\n\
    \   inetOrgPerson is used as the objectclass in this and the following\n   examples,\
    \ although person or organizationalPerson could also have\n   been used.\n   This\
    \ query will yield false-positive referrals; the original\n   LDAP query should\
    \ only match against records for which the \"cn\"\n   attribute is exactly the\
    \ phrase \"Foo Bar\", whereas the DAG/IP\n   query will yield referrals any WDSP\
    \ containing records that\n   include the two tokens \"foo\" and \"bar\" in any\
    \ order.\n   For example, this DAG/IP query will yield referrals to WDSPs\n  \
    \ with records including:\n   cn: Bar Foo\n   cn: Le Bar Foo\n   cn: Foo Bar AB\n\
    \   LDAP substring queries must also be tokenized in order to construct a\n  \
    \ DAG/IP query.  The additional point to bear in mind is that LDAP\n   substring\
    \ expressions are directed at phrases, which obscure\n   potential token boundaries.\
    \  Consequently, all points between\n   substring components must be considered\
    \ as potential token\n   boundaries.\n   Thus, the LDAP query\n   (& (cn=black)\
    \ (o=c*t) (objectclass=inetOrgPerson))\n   could be expressed as a  DAG/IP query\
    \ with 3 tokens, in a substring\n   search:\n   FN=black and ORG=c and ORG=t:search=substring<NL>\n\
    \   This query will yield false-positive results as the tokenized query\n   does\
    \ not preserve the order of appearance in the LDAP substring, and\n   it doesn't\
    \ preserve phrase-boundaries.  That is,\n   ORG=c and ORG=t:search=substring\n\
    \   will match\n   tabacco\n   which is not a match by the LDAP query semantics.\n\
    \   Combined EqualityMatch and Substring queries need special attention.\n   When\
    \ an LDAP query includes both EqualityMatch components and\n   substring filter\
    \ components, the DAG/IP query to the Referral Index\n   can be constructed by\
    \ following the same mechanisms of tokenization,\n   but the whole search will\
    \ become a substring search, as the DAG/IP\n   defines only search types across\
    \ the entire query for Referral Index\n   queries.\n   Thus,\n   (& (cn=Foo Bar)\
    \ (o=c*t) (objectclass=inetOrgPerson))\n   can be expressed as\n   FN=Foo and\
    \ FN=Bar and ORG=c and ORG=t:search=substring<NL>\n   Alternatively, the LDAP\
    \ DAG-CAP could conduct two separate queries\n   and take the intersection (the\
    \ logical \"AND\") of the two sets of\n   referrals returned by the Referral Index.\n\
    \   Note that DAG/IP can accept phrases for searches -- the query\n   FN=Foo\\\
    \ bar<NL>  (note the escaped space)\n   is perfectly valid.  However, it would\
    \ match only those things which\n   have been tokenized in a way that preserves\
    \ the space, which is the\n   empty set in the case of the data stored here.\n\
    \   Querying a DAG-SAP\n   It is never invalid to use the same substantive query\
    \ to a DAG-SAP as\n   was used to obtain referral information from the Referral\
    \ Index.\n   However, the over-generalization of these queries may yield excessive\n\
    \   numbers of results, and will necessitate some pruning of results in\n   order\
    \ to match the returned results against the semantics of the\n   original LDAP\
    \ query.  It is the LDAP DAG-CAP that is responsible for\n   this pruning, as\
    \ it is the recipient of the original query, and\n   responsible for responding\
    \ to its semantics.\n   In concrete terms, when making the DAG/IP query which\
    \ is to be sent\n   to a  DAG-SAP the above mentioned queries are still valid\
    \ queries,\n   but an alternative finer-grained query is also possible, namely:\n\
    \   FN=foo and FN=bar and ORG=c;search=lstring and ORG=t;search=tstring\n   Particularly\
    \ in the case of the LDAPv2 DAG-CAP, however, there will\n   be cause to use LDAP(v2/v3)\
    \ DAG-SAPs.  Since these DAG-SAPs also deal\n   in phrase-oriented data, a less-over-generalized\
    \ query can be passed\n   to them:\n   FN=Foo\\ Bar:search=exact<NL>\n   In querying\
    \ a DAG-SAP (irrespective of the protocol of that DAG-SAP),\n   the DAG/IP query\
    \ must include information about the target WDSP\n   server.  This information\
    \ is drawn from the Referral Index SERVER-\n   TO-ASK referral information, and\
    \ is appended to the query as\n   specified in Appendix C:\n   \":host=\" quoted-hostname\
    \ \";port=\" number \";server-info=\"\n   quoted-serverinfo \";charset=\" charset\n\
    \   where the response from the Referral Index included:\n   \"# SERVER-TO-ASK\
    \ \" serverhandle<NL>\n   \" Server-info: \" serverinfo<NL>\n   \" Host-Name:\
    \ \" hostname<NL>\n   \" Host-Port: \" number<NL>\n   \" Protocol: \" prot<NL>\n\
    \   \" Source-URI: \" source<NL>\n   \" Charset: \" charset<NL>\n   \"# END<NL>\n\
    \   and the \"quoted-hostname\" and \"quoted-serverinfo\" are obtained from\n\
    \   \"hostname\" and \"serverinfo\" respectively, by quoting the DAG/IP\n   special\
    \ characters.\n   For example, the referral\n   # SERVER-TO-ASK dagsystem01<NL>\n\
    \    Server-info: o=thinkingcat, c=se<NL>\n    Host-Name: thinkingcat.com<NL>\n\
    \    Host-Port: 2839<NL>\n    Protocol: ldapv2<NL>\n    Source-URI: http://www.thinkingcat.com\
    \ <NL>\n    Charset: T.61<NL>\n   # END<NL>\n   would yield the addition\n   :host=thinkingcat\\\
    .com;port=2839;server-info=o\\=thinkingcat\\,\\\n   c\\=se;charset=T\\.61\n  \
    \ in its query to an LDAPv2 DAG-SAP.\n   (N.B.: See Appendix C for further definitions\
    \ of the terms used in\n   the SERVER-TO-ASK response).\n   Note that it is the\
    \ DAG-SAP's responsibility to extract these terms\n   from the query and use them\
    \ to identify the WDSP server to be\n   contacted.  See the individual DAG-SAP\
    \ definitions, below.\n"
- title: 5.8.3 Chaining queries in LDAPv2 DAG-CAP
  contents:
  - "5.8.3 Chaining queries in LDAPv2 DAG-CAP\n   The LDAPv2 DAG-CAP relies on DAG-SAPs\
    \ to resolve every referral.\n"
- title: 5.8.4 Expression of results in LDAPv2
  contents:
  - "5.8.4 Expression of results in LDAPv2\n   As described above, results from DAG-SAPs\
    \ will have to be post-\n   processed in cases where the original query was generalized\
    \ for\n   expression in DAG/IP.\n   Acceptable results are expressed in the LDAP\
    \ search response:\n   SearchResponse ::=\n    CHOICE {\n         entry      \
    \ [APPLICATION 4] SEQUENCE {\n                  objectName   LDAPDN,\n       \
    \           attributes   SEQUENCE OF SEQUENCE\n                           {\n\
    \                                    AttributeType,\n                        \
    \            SET OF AttributeValue\n                           }\n           \
    \       },\n         resultCode  [APPLICATION 5] LDAPResult\n    }\n   where\n\
    \   LDAPDN = DN / \"cn=\" (FN/ROLE) [\",o=\"ORG] \",dc=se\"\n   attributes = <all\
    \ attributes mapped from DAG schema, and\n                  \"objectClass = inetOrgPerson\"\
    ,\n                  \"objectClass = top\",\n                  \"objectClass =\
    \ person\" or\n                  \"objectClass = organizationalRole\", as\n  \
    \                appropriate, and \"labeledURI = <SOURCE-URI>\"\n            \
    \      for each result from a given referral>\n   (Where DN,FN,ORG and ROLE are\
    \ the values from the DAG schema).\n   I.e., where available, the entry's true\
    \ DN is used; otherwise (e.g.,\n   for data coming from Whois++ servers), a reasonable\
    \ facsimile is\n   constructed.\n"
- title: 5.8.5 Expression of Errors in LDAPv2 DAG-CAP
  contents:
  - "5.8.5 Expression of Errors in LDAPv2 DAG-CAP\n   As appropriate, the LDAPv2 DAG-CAP\
    \ will express system responses\n   following the LDAPv2 standard.\n   Appendix\
    \ D gives the proposed mapping between DAG/IP response codes\n   and LDAPv2 resultcodes.\n\
    \   There are 4 particular error conditions of the DAG system that the\n   DAG-CAP\
    \ will handle as described below.\n   When the LDAPv2 DAG-CAP receives a query\
    \ that it cannot reply to\n   within the (data) constraints of the DAG queries,\
    \ it sends an error\n   message and closes the connection.  The error message\
    \ includes the\n   LDAPv2 resultCode:\n   noSuchAttribute        (for incorrect\
    \ schema attributes)\n   inappropriateMatching  (when a match type other than\
    \ those\n                           supported is used, e.g. approxMatch)\n   unwillingToPerform\
    \     (when the query is not one of the\n                           defined types)\n\
    \   If the number of referrals sent by the Referral Index is greater than\n  \
    \ the pre-determined maximum (for detecting data-mining efforts, or\n   otherwise\
    \ refusing over-general queries, such as \"FN=svensson\"), the\n   LDAPv2 DAG-CAP\
    \ will send an error message.  The error message\n   includes one of the following\
    \ resultCodes:\n   sizeLimitExceeded\n   timeLimitExceeded\n   An LDAPv2 DAG-CAP\
    \ may redirect a connection to another LDAPv2 DAG-CAP\n   for reasons of load-balancing.\
    \  This is expressed to the end-user\n   client software using the \"umich referral\"\
    \ convention to direct the\n   client software to an alternate DAG-CAP by passing\
    \ the URL in an\n   error message.\n   Since a LDAPv2 DAG-CAP only can send one\
    \ resultcode back to a client;\n   If a LDAPv2 DAG-CAP receives several different\
    \ result codes from the\n   DAG-SAPs it will have to construct a resultmessage\
    \ that to some\n   extent represents the combination of those.  It is proposed\
    \ that in\n   these cases the following actions are taken:\n   - All the response\
    \ codes are collected\n   - Each response code are translated into the corresponding\
    \ LDAPv2\n     resultcode.\n   - A resultcode is chosen to represent the collected\
    \ response on the\n     following grounds:\n       If  \"success\" is the only\
    \ resultcode represented after these\n       steps the return that result code.\n\
    \       If apart from \"success\" there is one other resultcode represented\n\
    \       return that other resultcode.\n       If apart from \"success\" there\
    \ are two or more resultcodes\n       represented return the resultcode \"other\"\
    .\n"
- title: 5.9 LDAPv3 DAG-CAP
  contents:
  - '5.9 LDAPv3 DAG-CAP

    '
- title: 5.9.1 LDAPv3 DAG-CAP Input
  contents:
  - "5.9.1 LDAPv3 DAG-CAP Input\n   Input to the LDAPv3 DAG-CAP follows the LDAPv3\
    \ definition (currently\n   defined in [17]).  Minimally, the LDAPv3 DAG-CAP must\
    \ support the\n   following queries (adapted from the ASN.1 grammar of the standard):\n\
    \   BindRequest ::= [APPLICATION 0] SEQUENCE {\n                version      \
    \           INTEGER (1 .. 127),\n                name                    LDAPDN,\n\
    \                authentication          AuthenticationChoice }\n        AuthenticationChoice\
    \ ::= CHOICE {\n                simple                  [0] OCTET STRING,\n  \
    \                                       -- 1 and 2 reserved\n                sasl\
    \                    [3] SaslCredentials }\n        SaslCredentials ::= SEQUENCE\
    \ {\n                mechanism               LDAPString,\n                credentials\
    \             OCTET STRING OPTIONAL }\n   BindResponse ::= [APPLICATION 1] SEQUENCE\
    \ {\n             COMPONENTS OF LDAPResult,\n             serverSaslCreds    [7]\
    \ OCTET STRING OPTIONAL }\n   SearchRequest ::= [APPLICATION 3] SEQUENCE {\n \
    \       baseObject      c=se,\n        scope           wholeSubtree          \
    \  (2) },\n        derefAliases    ENUMERATED {\n                neverDerefAliases\
    \       (0),\n                derefInSearching        (1),\n                derefFindingBaseObj\
    \     (2),\n                derefAlways             (3) },\n         sizeLimit\
    \       INTEGER (0 .. maxInt),\n        timeLimit       INTEGER (0 .. maxInt),\n\
    \        typesOnly       BOOLEAN,\n        filter          Filter,\n        attributes\
    \      AttributeDescriptionList }\n   Filter ::= CHOICE {\n        and       \
    \      [0] SET OF Filter,\n        or              [1] SET OF Filter,\n      \
    \  not             [2] Filter,\n        equalityMatch   [3] AttributeValueAssertion,\n\
    \        substrings      [4] SubstringFilter }\n   SubstringFilter ::= SEQUENCE\
    \ {\n        type            AttributeDescription,\n        -- at least one must\
    \ be present\n        substrings    initial [0] LDAPString,\n        substrings\
    \    any     [1] LDAPString,\n        substrings    final   [2] LDAPString}\n\
    \   Queries against attributes in the proscribed LDAP standard schema\n   (see\
    \ Appendix B) are accepted.\n   N.B., this is a minimal set of supported queries,\
    \ to achieve the\n   basic DAG-defined queries.  An LDAP DAG-CAP may choose to\
    \ support\n   more complex queries than this, if it undertakes to do the\n   translation\
    \ from the DAG/IP to the LDAPv3 client in a way that\n   responds to the semantics\
    \ of those queries.\n"
- title: 5.9.2 Translation from LDAPv3 query to DAG/IP
  contents:
  - "5.9.2 Translation from LDAPv3 query to DAG/IP\n   Querying the Referral Index\n\
    \   The essential stratagem for mapping LDAP queries into DAG/IP Referral\n  \
    \ Index queries is to tokenize the string-oriented LDAP\n   AttributeValueAssertions\
    \ or SubstringFilters and construct an\n   appropriate DAG/IP token-oriented query\
    \ in the DAGschema.  This will\n   generalize the LDAP query and yield false-positive\
    \ referrals, but\n   should not miss any appropriate referrals.\n   There are\
    \ 3 particular cases to be considered:\n   equalityMatch queries\n   substring\
    \ queries\n   combination equalityMatch and substring queries\n      TISDAG: If\
    \ the LDAP filter contains a cn-term and no objectclass\n      specification it\
    \ is unclear if the search is for a person or a\n      role.  When this happens\
    \ the DAG query should cover all bases and\n      map the query into a query for\
    \ both people and roles.\n   EqualityMatch queries can be handled by simply tokenizing\
    \ the\n   AttributeValueAssertions, making one DAG/IP query term per token\n \
    \  (using the appropriate DAGSchema attribute) and carrying out an exact\n   match\
    \ in the DAG/IP.\n   Consider the following example, represented in the ASCII\
    \ expression\n   of LDAP Filters as described in [13]):\n   (& (cn=Foo Bar)(objectclass=person))\n\
    \   This query can be represented in the DAG/IP as\n   FN=\"Foo\" and FN=\"Bar\"\
    :search=exact<NL>\n   N.B.\n   The search is set up to be \"case=ignore\" (the\
    \ DAG/IP's default)\n   because the relevant LDAP schema attributes are all derivatives\
    \ of\n   the \"name\" attribute element, which is defined to have a case\n   insensitive\
    \ match.\n   If no objectclass where defined the query in DAG/IP would have been\n\
    \   (FN=\"Foo\" and FN=\"bar\") or ( ROLE=\"Foo\" and ROLE=\"bar\"):search=exact\n\
    \   Although person is used as objectclass in this and the following\n   examples,\
    \ inetOrgPerson or organizationalPerson could also have been\n   used.\n   This\
    \ query will yield false-positive referrals; the original LDAP\n   query should\
    \ only match against records for which the \"cn\" attribute\n   is exactly the\
    \ phrase \"Foo Bar\", whereas the DAG/IP query will yield\n   referrals any WDSP\
    \ containing records that include the two tokens\n   \"foo\" and \"bar\" in any\
    \ order.\n   For example, this DAG/IP query will yield referrals to WDSPs with\n\
    \   records including:\n   cn: Bar Foo\n   cn: Le Bar Foo\n   cn: Foo Bar AB\n\
    \   LDAP substring queries must also be tokenized in order to construct a\n  \
    \ DAG/IP query.  The additional point to bear in mind is that LDAP\n   substring\
    \ expressions are directed at phrases, which obscure\n   potential token boundaries.\
    \  Consequently, all points between\n   substring components must be considered\
    \ as potential token\n   boundaries.\n   Thus, the LDAP query\n   (& (cn=black)\
    \ o=c*t) (objectclass=person))\n   should be expressed as a DAG/IP query with\
    \ 3 tokens, in a substring\n   search:\n   FN=black and ORG=c and ORG=t:search=substring<NL>\n\
    \   This query will yield false-positive results as the tokenized query\n   does\
    \ not preserve the order of appearance in the LDAP substring, and\n   it doesn't\
    \ preserve phrase-boundaries.  That is,\n   ORG=c and ORG=t:search=substring\n\
    \   will match\n   tabacco\n   which is not a match by the LDAP query semantics.\n\
    \   Combined EqualityMatch and Substring queries need special attention.\n   When\
    \ an LDAP query includes both EqualityMatch components and\n   substring filter\
    \ components, the DAG/IP query to the Referral Index\n   can be constructed by\
    \ following the same mechanisms of tokenization,\n   but the whole search will\
    \ become a substring search, as the DAG/IP\n   defines search types across the\
    \ entire query.\n   Thus,\n   (& (cn=Foo Bar) (o=c*t) (objectclass=person))\n\
    \   can be expressed as\n   FN=Foo and FN=Bar and ORG=c and ORG=t:search=substring<NL>\n\
    \   Alternatively, the LDAP DAG-CAP could conduct two separate queries\n   and\
    \ take the intersection (the logical \"AND\") of the two sets of\n   referrals\
    \ returned by the Referral Index.\n   Note that DAG/IP can accept phrases for\
    \ searches -- the query\n   FN=Foo\\ bar<NL>   (note the escaped space)\n   is\
    \ perfectly valid.  However, it would match only those things which\n   have been\
    \ tokenized in a way that preserves the space, which is the\n   empty set in the\
    \ case of the data stored here.\n   Querying a DAG-SAP\n   It is never invalid\
    \ to use the same substantive query to a DAG-SAP as\n   was used to obtain referral\
    \ information from the Referral Index.\n   However, the over-generalization of\
    \ these queries may yield excessive\n   numbers of results, and will necessitate\
    \ some pruning of results in\n   order to match the returned results against the\
    \ semantics of the\n   original LDAP query.  It is the LDAP DAG-CAP that is responsible\
    \ for\n   this pruning, as it is the recipient of the original query, and\n  \
    \ responsible for responding to its semantics.\n   In concrete terms, when making\
    \ the DAG/IP query which is to be sent\n   to a  DAG-SAP the above mentioned queries\
    \ are still valid queries,\n   but an alternative finer-grained query is also\
    \ possible, namely:\n   FN=foo and FN=bar and ORG=c;search=lstring and ORG=t;search=tstring\n\
    \   In querying a DAG-SAP (irrespective of the protocol of that DAG-SAP),\n  \
    \ the DAG/IP query must include information about the target WDSP\n   server.\
    \  This information is drawn from the Referral Index SERVER-\n   TO-ASK referral\
    \ information, and is appended to the query as\n   specified in Appendix C):\n\
    \   \"host=\" quoted-hostname \";port=\" number \";server-info=\"\n   quoted-serverinfo\
    \ \";charset=\" charset\n   where the response from the Referral Index included:\n\
    \   \"# SERVER-TO-ASK \" serverhandle <NL>\n   \" Server-info: \" serverinfo<NL>\n\
    \   \" Host-Name: \" hostname<NL>\n   \" Host-Port: \" number<NL>\n   \" Protocol:\
    \ \" prot<NL>\n   \" Source-URI: \" source<NL>\n   \" Charset: \" charset<NL>\n\
    \   \"# END\"<NL>\n   and the \"quoted-hostname\" and \"quoted-serverinfo\" are\
    \ obtained from\n   \"hostname\" and \"serverinfo\" respectively, by quoting the\
    \ DAG/IP\n   special characters.\n   For example, the referral\n   # SERVER-TO-ASK\
    \ dagsystem01<NL>\n    Server-info: o=thinkingcat, c=se<NL>\n    Host-Name: thinkingcat.com<NL>\n\
    \    Host-Port: 2839<NL>\n    Protocol: ldapv2<NL>\n    Source-URI:http://www-thinkingcat.se/\n\
    \    Charset: T.61<NL>\n   # END<NL>\n   would yield the addition\n   :host=thinkingcat\\\
    .com;port=2839;server-info=o\\=thinkingcat\\,\\\n   c\\=se;charset=T\\.61\n  \
    \ in its query to an LDAPv2 DAG-SAP.\n   (N.B.: See Appendix C for further definitions\
    \ of the terms used in\n   the SERVER-TO-ASK response).\n   Note that it is the\
    \ DAG-SAP's responsibility to extract these terms\n   from the query and use them\
    \ to identify the WDSP server to be\n   contacted.  See the individual DAG-SAP\
    \ definitions, below.\n"
- title: 5.9.3 Chaining queries in LDAPv3 DAG-CAP
  contents:
  - "5.9.3 Chaining queries in LDAPv3 DAG-CAP\n   The LDAPv3 DAG-CAP relies on DAG-SAPs\
    \ to resolve all referrals except\n   those to LDAPv3 servers (i.e., Whois++ referrals,\
    \ currently).\n"
- title: 5.9.4 Expression of results in LDAPv3
  contents:
  - "5.9.4 Expression of results in LDAPv3\n   As described above, results from DAG-SAPs\
    \ will have to be post-\n   processed in cases where the original query was generalized\
    \ for\n   expression in DAG/IP.  Acceptable results are expressed in LDAPv3\n\
    \   messages containing search result entries (see the standard for more\n   detail):\n\
    \   SearchResultEntry ::= [APPLICATION 4] SEQUENCE {\n        objectName     \
    \ LDAPDN,\n        attributes      PartialAttributeList }\n   PartialAttributeList\
    \ ::= SEQUENCE OF SEQUENCE {\n        type    AttributeDescription,\n        vals\
    \    SET OF AttributeValue }\n   SearchResultReference ::= [APPLICATION 19] SEQUENCE\
    \ OF LDAPURL\n   -- at least one LDAPURL element must be present\n   SearchResultDone\
    \ ::= [APPLICATION 5] LDAPResult\n   where\n   LDAPDN = DN / \"cn=\" (FN/ROLE)\
    \ [\",o=\" ORG] \",dc=se\"\n   attributes = <all attributes mapped from the DAG\
    \ schema, and\n                  \"objectClass = inetOrgPerson\",\n          \
    \        \"objectClass = person\",\n                  \"objectClass = top\" or\n\
    \                  \"objectClass = organizationalRole\", as\n                \
    \  appropriate, and \"labeledURI = <SOURCE-URI>\"\n                  for each\
    \ result from a given referral>\n   LDAPResult = success\n   (Where DN, FN, ROLE,\
    \ and ORG are the values from the DAG schema).\n   I.e., where available, the\
    \ entry's true DN is used; otherwise (e.g.,\n   for data coming from Whois++ servers),\
    \ a reasonable facsimile is\n   constructed.\n   Referral URLs are constructed\
    \ from the DAG/IP's SERVER-TO-ASK\n   information as follows:\n   refurl = \"\
    ldap://\" HOST [\":\" PORT] \"/\" (SERVER-INFO / \"dc=se\")\n   The intention\
    \ is that WDSPs using LDAPv3 servers will provide an\n   appropriate LDAPDN for\
    \ their server in the SERVER-INFO.  Clients are\n   then expected to repeat their\
    \ query at the server designated by this\n   URL (i.e., the refURL does not include\
    \ the query).\n"
- title: 5.9.5 Expression of Errors in LDAPv3 DAG-CAP
  contents:
  - "5.9.5 Expression of Errors in LDAPv3 DAG-CAP\n   As appropriate, the LDAPv3 DAG-CAP\
    \ will express operational errors\n   following the LDAPv3 standard.  There are\
    \ 4 particular error\n   conditions of the DAG system that the DAG-CAP will handle\
    \ as\n   described below.\n   When the LDAPv3 DAG-CAP receives a query that it\
    \ cannot reply to\n   within the (data) constraints of the DAG queries, it sends\
    \ an error\n   message and closes the connection.  The error message includes\
    \ the\n   LDAPv3 resultCode\n   noSuchAttribute        (for incorrect schema attributes\
    \ chosen)\n   inappropriateMatching  (when a match type other than those\n   supported\
    \ is used e.g., approxMatch)\n   unwillingToPerform     (when the query is not\
    \ one of the defined\n   types)\n   If the number of referrals sent by the Referral\
    \ Index is greater than\n   the pre-determined maximum (for detecting data-mining\
    \ efforts, or\n   otherwise refusing over-general queries, such as \"FN=svensson\"\
    ), the\n   LDAPv3 DAG-CAP will send an error message.  The error message\n   includes\
    \ the following resultCode:\n   adminLimitExceeded\n   An LDAPv3 DAG-CAP may redirect\
    \ a connection to another LDAPv3 DAG-CAP\n   for reasons of load-balancing.  In\
    \ this case, the LDAPv3 DAG-CAP\n   sends a result message including only\n  \
    \ SearchResultReference ::= [APPLICATION 19]  AltURL\n   SearchResultDone ::=\
    \ referral\n   where\n   AltURL = \"ldap://\" <althostport> \":\" <altbase>\n\
    \   Since a LDAPv3 DAG-CAP only can send one resultcode back to a client;\n  \
    \ If a LDAPv3 DAG-CAP receives several different result codes from the\n   DAG-SAPs\
    \ it will have to construct a resultmessage that to some\n   extent represents\
    \ the combination of those.  It is proposed that in\n   these cases the following\
    \ actions are taken:\n   - All the response codes are collected\n   - Each response\
    \ code are translated into the corresponding LDAPv3\n     resultcode.\n   - A\
    \ resultcode is chosen to represent the collected response on the\n     following\
    \ grounds:\n       If \"success\" is the only resultcode represented after these\
    \ steps\n       the return that result code.\n       If apart from \"success\"\
    \ there is one other resultcode represented\n       return that other resultcode.\n\
    \       If apart from \"success\" there are two or more resultcodes\n       represented\
    \ return the resultcode \"other\".\n"
- title: 5.10 Whois++ DAG-SAP
  contents:
  - '5.10 Whois++ DAG-SAP

    '
- title: 5.10.1 Input
  contents:
  - "5.10.1 Input\n   The Whois++ DAG-SAP expects valid DAG/IP communications.  Queries\n\
    \   must include referral information (see below) and search terms that\n   conform\
    \ to the DAG-allowed query types (e.g., not searches for\n   organization alone,\
    \ etc).\n   The referral information is added to the end of the DAG-SAP query,\
    \ as\n   defined in the DAG-CAP definition sections:\n   \":host=\" quoted-hostname\
    \ \";port=\" number \";server-info=\"\n   quoted-serverinfo \";charset=\" charset\n"
- title: 5.10.2 Translation from DAG/IP to Whois++ query
  contents:
  - "5.10.2 Translation from DAG/IP to Whois++ query\n   The HOST and PORT information\
    \ are used to make a TCP/IP-based\n   connection to the remote (presumed) Whois++\
    \ server.  The query\n   expressed to the remote Whois++ server is the remainder\
    \ of the DAG/IP\n   query the Whois++ DAG-SAP received, with the following template\
    \ ID\n   translations:\n   template=DAGPERSON becomes template=USER\n   and\n\
    \   template=DAGROLE becomes template=ORGROLE\n   Additional mappings for attributes\
    \ are defined in Appendix B.\n   Note that the search types used in the DAG/IP\
    \ are not all required by\n   the Whois++ syntax.  Therefore, some Whois++ WDSPs\
    \ may be using\n   servers that do not support searches other than \"exact\" and\
    \ \"lstring\"\n   (the search types required by the Whois++ protocol standard).\
    \  The\n   Whois++ DAG-CAP may\n   - send the DAG/IP query as constructed (e.g.,\
    \ with\n     \"search=substring\"), and pass back the \"% 502 Search expression\
    \ too\n     complicated\" from the WDSP's server,\n     - translate the DAG/IP\
    \ query into a construct using only these\n     search types (which will yield\
    \ incomplete results, as not all\n     queries are expressible with those search\
    \ types),\n     - attempt to ascertain what search types are  supported by the\n\
    \     remote server and reformulate using them (e.g., regular\n     expressions).\
    \  This would work, but would entail an excessively\n     complicated Whois++\
    \ DAG-SAP, and might not yield any better results\n     if the remote server doesn't\
    \ support any optional search types.\n"
- title: 5.10.3 Translation of Whois++ results to DAG/IP
  contents:
  - "5.10.3 Translation of Whois++ results to DAG/IP\n   Any referrals that the remote\
    \ WDSP server returns are pursued,\n   following the usual Whois++ (client) fashion,\
    \ by the Whois++ DAG-SAP.\n   If it is not possible to establish a Whois++ session\
    \ with the remote\n   server, or if the session is interrupted, before results\
    \ are\n   received, the DAG-SAP will itself return no results and an error\n \
    \  message, including\n   % 403 Information Unavailable<NL>\n   If the remote\
    \ server issues any other Whois++ error message and does\n   not yield any results,\
    \ the remote server's error message will be\n   included in the DAG-SAP's own\
    \ error message; no results will be\n   returned.\n   If results are successfully\
    \ received from the remote server, they\n   will be expressed using the  DAG/IP\
    \ -- essentially passing through\n   all FULL response information received from\
    \ the remote server, mapped\n   into the DAGSchema using the mappings defined\
    \ in Appendix A.\n"
- title: 5.11 LDAPv2 DAG-SAP
  contents:
  - '5.11 LDAPv2 DAG-SAP

    '
- title: 5.11.1 Input
  contents:
  - "5.11.1 Input\n   The LDAPv2 DAG-SAP expects valid DAG/IP communications.  Queries\
    \ must\n   include referral information (see below) and search terms that\n  \
    \ conform to the DAG-allowed query types (e.g., not searches for\n   organization\
    \ alone, etc).\n   The referral information is added to the end of the DAG-SAP\
    \ query, as\n   defined in the DAG-CAP definition sections (as additional terms\
    \ in\n   the DAG/IP query):\n   \":host=\" quoted-hostname \";port=\" number \"\
    ;server-info=\"\n   quoted-serverinfo \";charset=\" charset\n"
- title: 5.11.2 Translation from DAG/IP to LDAPv2 query
  contents:
  - "5.11.2 Translation from DAG/IP to LDAPv2 query\n   The HOST and PORT information\
    \ are used to make a TCP/IP-based\n   connection to the remote (presumed) LDAPv2\
    \ server.  The DAG-SAP will\n   establish a connection with the remote server,\
    \ following standard\n   LDAPv2 message exchanges.\n   The search request itself\
    \ will be constructed from the DAG/IP query\n   (without the HOST, SERVER-INFO\
    \ and PORT terms) as follows:\n   SearchRequest ::=\n    [APPLICATION 3] SEQUENCE\
    \ {\n        baseObject    LDAPDN,  -- from the DAG/IP query\n        scope  \
    \       baseObject            (0) },\n        derefAliases  ENUMERATED {\n   \
    \                           neverDerefAliases     (0),\n                     \
    \         derefInSearching      (1),\n                              derefFindingBaseObj\
    \   (2),\n                              derefAlways           (3)\n          \
    \               },\n        sizeLimit     INTEGER (0 .. maxInt),\n        timeLimit\
    \     INTEGER (0 .. maxInt),\n        attrsOnly     FALSE\n        filter    \
    \    Filter,\n        attributes    SEQUENCE OF AttributeType\n              \
    \             -- all DAGschema attributes\n                              equivalents\
    \ in  the defined\n                              standard LDAP schema\n   }\n\
    \   Filter ::=\n    CHOICE {\n        and                [0] SET OF Filter,\n\
    \        or                 [1] SET OF Filter,\n        not                [2]\
    \ Filter,\n        substrings         [4] SubstringFilter,\n    }\n   SubstringFilter\n\
    \    SEQUENCE {\n        type               AttributeType,\n        SEQUENCE OF\
    \ CHOICE {\n        substrings    initial [0] LDAPString,\n        substrings\
    \    any     [1] LDAPString,\n        substrings    final   [2] LDAPString}\n\
    \    }\n   where and, or and not filters are constructed to preserve the logic\n\
    \   of the DAG/IP query.\n   For the purposes of matching token-based DAG/IP queries\
    \ to reasonable\n   LDAP queries, all searches should be passed to the LDAP WDSP\
    \ as\n   substring searches.  The WDSP results must then be pruned to respect\n\
    \   token boundaries, where necessary.\n   So, for example,  the DAG/IP query\n\
    \   FN=Foo\\ Bar and ORG=Thinking\\ Cat:search=substring<NL>\n   would be sent\
    \ to the designated LDAP WDSP as\n   (& (fn=*Foo Bar*) (o=*Thinking Cat*) (objectclass=person))\n\
    \   Interestingly, the query\n   FN=Foo\\ Bar and ORG=Thinking\\ Cat:search=exact<NL>\n\
    \   would also be sent to the designated LDAP WDSP as\n   (& (fn=*Foo Bar*) (o=*Thinking\
    \ Cat*) (objectclass=person))\n   but the WDSPs returned results would have to\
    \ be pruned to remove any\n   results that had non-tokenizing characters on either\
    \ side of \"Foo\n   Bar\" and \"Thinking Cat\".\n   The final consideration for\
    \ mapping DAG/IP queries into LDAP queries\n   is the issue of character case.\
    \  In LDAP, individual attribute\n   syntaxes define the consideration of case.\
    \  All of the attributes\n   used here are case-insensitive in their definitions.\
    \  Therefore, all\n   LDAP WDSP queries are inherently case-insensitive; if the\
    \ DAG/IP\n   query calls for a case-sensitive match, the LDAP DAG-SAP will have\
    \ to\n   do pruning of the results from the DAG-SAP.\n"
- title: 5.11.3 Translation of LDAPv2 results to DAG/IP
  contents:
  - "5.11.3 Translation of LDAPv2 results to DAG/IP\n   If it is not possible to establish\
    \ an LDAPv2 session with the remote\n   server, or if the session is interrupted\
    \ before results are received,\n   or if the remote server issues any kind of\
    \ error message and produces\n   no result, the DAG-SAP will itself return no\
    \ results and an error\n   message, including\n   % 403 Information Unavailable<NL>\n\
    \   If results are successfully received from the remote server, the\n   attributes\
    \ and values that are provided for each result message will\n   be incorporated\
    \ into the DAG/IP result, according to the schema\n   mappings laid out in Appendix\
    \ B.\n   One particular adjustment must be done to accommodate differences\n \
    \  between LDAP and the DAG/IP.  The attributes on which searches are\n   keyed\
    \ (\"cn\", \"l\", and \"o\" in the LDAP schemas) are all defined as\n   being\
    \ case-insensitive for equality matching.  Thus, if the DAG/IP\n   query includes\
    \ the constraint \"case=consider\", the results from the\n   remote server must\
    \ be post-processed to remove any wrong-cased ones.\n      TISDAG: The serverhandle\
    \ and localhandle in the DAG/IP response\n      should be constructed as follows:\n\
    \   serverhandle is: <hostname-without-periods><port> (because\n       server\
    \ DN's are not enforceably unique).  E.g., a\n       services.bunyip.com server\
    \ on 7778 would\n       become servicesbunyipcom7778.\n     localhandle is:  the\
    \ RDN (relative distinguished name), with\n       spaces replaced by \"_\".  E.g.,\
    \ cn=leslie_daigle\n"
- title: 5.12 LDAPv3 DAG-SAP
  contents:
  - '5.12 LDAPv3 DAG-SAP

    '
- title: 5.12.1 Input
  contents:
  - "5.12.1 Input\n   The LDAPv3 DAG-SAP expects valid DAG/IP communications.  Queries\
    \ must\n   include referral information (see below) and search terms that\n  \
    \ conform to the DAG-allowed query types (e.g., not searches for\n   organization\
    \ alone, etc).\n   The referral information is added to the end of the DAG-SAP\
    \ query, as\n   defined in the DAG-CAP definition sections:\n   \":host=\" quoted-hostname\
    \ \";port=\" number \";server-info=\"\n   quoted-serverinfo \";charset=\" charset\n"
- title: 5.12.2 Translation from DAG/IP to LDAPv3 query
  contents:
  - "5.12.2 Translation from DAG/IP to LDAPv3 query\n   The HOST and PORT information\
    \ are used to make a TCP/IP-based\n   connection to the remote (presumed) LDAPv3\
    \ server.  The DAG-SAP will\n   establish a connection with the remote server,\
    \ following standard\n   LDAPv3 message exchanges.\n   The search request itself\
    \ will be constructed from the DAG/IP query\n   (without the HOST, SERVER-INFO\
    \ and PORT terms) as follows:\n   SearchRequest ::=\n    [APPLICATION 3] SEQUENCE\
    \ {\n        baseObject    LDAPDN,  -- from the DAG/IP query\n        scope  \
    \       baseObject            (0) },\n        derefAliases  ENUMERATED {\n   \
    \                             neverDerefAliases     (0),\n                   \
    \             derefInSearching      (1),\n                                derefFindingBaseObj\
    \   (2),\n                                derefAlways           (3)\n        \
    \                      },\n        sizeLimit     INTEGER (0 .. maxInt),\n    \
    \    timeLimit     INTEGER (0 .. maxInt),\n        attrsOnly     FALSE\n     \
    \   filter        Filter,\n        attributes    SEQUENCE OF AttributeType\n \
    \                     -- all DAGschema attributes equivalents in\n           \
    \              the defined standard LDAP schema\n   }\n   Filter ::=\n    CHOICE\
    \ {\n        and                [0] SET OF Filter,\n        or               \
    \  [1] SET OF Filter,\n        not                [2] Filter,\n        substrings\
    \         [4] SubstringFilter,\n    }\n   SubstringFilter\n    SEQUENCE {\n  \
    \      type               AttributeType,\n        SEQUENCE OF CHOICE {\n     \
    \   substrings    initial [0] LDAPString,\n        substrings    any     [1] LDAPString,\n\
    \        substrings    final   [2] LDAPString}\n    }\n   where and, or and not\
    \ filters are constructed to preserve the logic\n   of the DAG/IP query.\n   For\
    \ the purposes of matching token-based DAG/IP queries to reasonable\n   LDAP queries,\
    \ all searches should be passed to the LDAP WDSP as\n   substring searches.  The\
    \ WDSP results must then be pruned to respect\n   token boundaries, where necessary.\n\
    \   So, for example,  the DAG/IP query\n   FN=Foo\\ Bar and ORG=Thinking\\ Cat:search=substring<NL>\n\
    \   would be sent to the designated LDAP WDSP as\n   (&(fn=*Foo Bar*)(o=*Thinking\
    \ Cat*)(objectClass=person))\n   Interestingly, the query\n   FN=Foo\\ Bar and\
    \ ORG=Thinking\\ Cat:search=exact<NL>\n   would also be sent to the designated\
    \ LDAP WDSP as\n   (&(fn=*Foo Bar*)(o=*Thinking Cat*)(objectClass=person))\n \
    \  but the WDSP's returned results would have to be pruned to remove any\n   results\
    \ that had non-tokenizing characters on either side of \"Foo\n   Bar\" and \"\
    Thinking Cat\".\n   The final consideration for mapping DAG/IP queries into LDAP\
    \ queries\n   is the issue of character case.  In LDAP, individual attribute\n\
    \   syntaxes define the consideration of case.  All of the attributes\n   used\
    \ here are case-insensitive in their definitions.  Therefore, all\n   LDAP WDSP\
    \ queries are inherently case-insensitive; if the DAG/IP\n   query calls for a\
    \ case-sensitive match, the LDAP DAG-SAP will have to\n   do pruning of the results\
    \ from the DAG-SAP.\n"
- title: 5.12.3 Translation of LDAPv3 results to DAG/IP
  contents:
  - "5.12.3 Translation of LDAPv3 results to DAG/IP\n   Any referrals that the remote\
    \ WDSP server returns are pursued,\n   following the usual LDAPv3 (client) fashion,\
    \ by the LDAPv3 DAG-SAP.\n   If it is not possible to establish an LDAPv3 session\
    \ with the remote\n   server, or if the session is interrupted before results\
    \ are received,\n   or if the remote server issues any kind of error message and\
    \ produces\n   no result, the DAG-SAP will itself return no results and an error\n\
    \   message, including\n   % 403 Information Unavailable<NL>\n   If results are\
    \ successfully received from the remote server, the\n   attributes and values\
    \ that are provided for each result message will\n   be incorporated into the\
    \ DAG/IP result, which will be expressed using\n   the DAG/IP and schema mappings\
    \ as outlined in Appendix A.\n   One particular adjustment must be done to accommodate\
    \ differences\n   between LDAP and the DAG/IP.  The attributes on which searches\
    \ are\n   keyed (\"cn\", \"l\", and \"o\" in the LDAP schemas) are all defined\
    \ as\n   being case-insensitive for equality matching.  Thus, if the DAG/IP\n\
    \   query includes the constraint \"case=consider\", the results from the\n  \
    \ remote server must be post-processed to remove any wrong-cased ones.\n     \
    \ TISDAG: The serverhandle and localhandle in the DAG/IP response\n      should\
    \ be constructed as follows:\n      - serverhandle is: <hostname-without-periods><port>\
    \ (because\n        server DN's are not enforceably unique).  E.g., a\n      \
    \  services.bunyip.com server on 7778 would become\n        servicesbunyipcom7778.\n\
    \      - localhandle is:  the RDN (relative distinguished name), with\n      \
    \  spaces replaced by \"_\".  E.g., cn=leslie_daigle\n"
- title: 5.13 Example Queries
  contents:
  - "5.13 Example Queries\n   The following sample end-user queries illustrate some\
    \ of the more\n   delicate steps of query/schema semantics translations in the\
    \ DAG\n   system.\n   N.B.:  the data presented in these examples is often senseless,\n\
    \   provided only to serve as illustrations of matching on word-ordering,\n  \
    \ case sensitivity, etc.\n"
- title: 5.13.1 A Whois++ Query
  contents:
  - "5.13.1 A Whois++ Query\n   What the Whois++ DAG-CAP Receives\n   In this example,\
    \ the Whois++ DAG-CAP receives the following query:\n   name=thinking and name=cat:search=exact;case=consider<NL>\n\
    \   The expected answer can be described as:\n   Any USER templates that contain\
    \ the tokens \"thinking\" and \"cat\" in a\n   name attribute.\n   For example:\n\
    \   Different records:\n   name: the thinking cat\n   name: sublime cat thinking\n\
    \   or a single record with 2 or more name attributes\n   name: thinking felines\n\
    \   name: erudite cat\n   but not\n   name: Thinking Cat Enterprises\n   This\
    \ last record would not match because the query called for case\n   sensitivity,\
    \ and the case of the name attribute's value does not\n   match the query.\n \
    \  What the Whois++ DAG-CAP sends to the Referral Index\n   After schema translation,\
    \ this is sent to the Referral Index as:\n   fn=thinking and fn=cat:search=exact<NL>\n\
    \   What the Whois++ DAG-CAP Sends to an LDAP DAG-SAP\n   Note that the Whois++\
    \ DAG-CAP will never interact with a Whois++\n   DAG-SAP as the Whois++ referrals\
    \ returned by the Referral Index are\n   passed directly back to the Whois++ client.\n\
    \   The Whois++ DAG-CAP should send the same substantive query to the\n   DAG-SAP\
    \ as it sent to the Referral Index, except that it can include\n   the case sensitivity\
    \ constraint:\n   fn=thinking and fn=cat:search=exact;case=consider<NL>\n   which\
    \ will be translated by the DAG-SAP into an LDAP query of the\n   form:\n   (&(cn=*thinking*)(cn=*cat*)(objectclass=inetOrgPerson))\n\
    \   which will match a record with:\n   cn: Thinking\n   cn: Cat\n   (i.e., 2\
    \ different cn attributes, with the 2 values; LDAP defines\n   case sensitivity\
    \ matching by the schema attribute definition).\n   or a record with:\n   cn:\
    \ I wish I had a thinking dog and a singing cat\n   The first record should be\
    \ pruned by the LDAP DAG-SAP, in order to\n   respect the semantics of the DAG/IP\
    \ query.\n"
- title: 5.13.2 An LDAP Query
  contents:
  - "5.13.2 An LDAP Query\n   What the LDAP DAG-CAP Receives\n   In this example,\
    \ the LDAP  DAG-CAP receives the following query\n   (using RFC1960 notation):\n\
    \   (& (cn=th*c*t) (o=green groceries) (objectClass=person))\n   What the LDAP\
    \ user is looking for, with this query, is all records\n   within the \"green\
    \ groceries\" organization that have a cn attribute\n   starting with \"th\",\
    \ ending with \"t\", and having a \"c\" somewhere in\n   the middle.\n   cn values\
    \ that would match this include:\n   cn: thinkingcat\n   cn: Thinking Cat\n  \
    \ cn: The Black Cat\n   cn: Thick Mat\n"
- title: 5.13.3 What the LDAP DAG-CAP sends to the Referral Index
  contents:
  - "5.13.3 What the LDAP DAG-CAP sends to the Referral Index\n   The LDAP DAG-CAP\
    \ must formulate a token-based query to the Referral\n   Index that will not inadvertently\
    \ exclude records that would match.\n   The first challenge lies in the fact that\
    \ the \"*\" characters in the\n   LDAP string-based query can cover token-boundaries.\n\
    \   A suitable query to the Referral Index would be:\n   FN=th AND FN=C AND FN=T\
    \ AND ORG=green AND\n   ORG=groceries:search=substring<NL>\n   This will generate\
    \ some false positive referrals, directing the query\n   to WDSPs containing records\
    \ with the following attribute values (the\n   match letters are in capitals for\
    \ ease of identification):\n   cn: wiTH three blaCk poTs\n   o: peaGREEN and cyan\
    \ GROCERIES\n   o: GROCERIES are GREENer than electronics\n   Alternative approaches\
    \ include breaking the original query into\n   several queries to the referral\
    \ index in such a way that the DAG-CAP\n   can use only those referrals that appear\
    \ in all the Referral Index\n   responses.  However, this is\n   overkill -- the\
    \ purpose of the Referral Index is to give direction on\n     where there may\
    \ be more information\n   difficult to code into the DAG-CAP in a general way\
    \ -- it has to\n     identify, by LDAP query type, when and how to do so\n   likely\
    \ to generate Referral Index queries that are complex and time-\n   consuming\
    \ to process.\n   What the LDAP DAG-CAP Sends to a Whois++ DAG-SAP\n   The LDAP\
    \ DAG-CAP may send the same query to a Whois++ DAG-SAP as it\n   sent to the Referral\
    \ Index.  False positives here mean results that\n   are not expected as a match\
    \ by the LDAP client.  The LDAP DAG-CAP\n   should prune these results from the\
    \ information returned by the\n   Whois++ DAG-SAP.\n   Or it might rewrite the\
    \ query into:\n   FN=th;search=lstring AND FN=C;search=substring AND\n   FN=T;search=tstring\
    \ AND ORG=green AND ORG=groceries:case=ignore<NL>\n   What the LDAP DAG-CAP Sends\
    \ to an LDAP DAG-SAP\n   As an architectural principle, it is never wrong to send\
    \ the same\n   query to a DAG-SAP as was formulated for the Referral Index.  It\
    \ is\n   also noteworthy to keep in memory that all DAG-SAPs are handled equal\n\
    \   by all DAG-CAPs therefore a LDAP DAG-CAP will not need to send a\n   different\
    \ query to a LDAP DAG-SAP then it would to any other DAG-SAP.\n   So in this case\
    \ the LDAP DAP-CAP could either send the same query to\n   the LDAP DAG-SAP as\
    \ it sent to the Referral Index or it could send\n   the augmented version that\
    \ is allowed to be use with the DAG-SAPs,\n   namely:\n   FN=th;search=lstring\
    \ AND FN=C;search=substring AND\n   FN=T;search=tstring AND ORG=green\\ groceries:case=ignore<NL>\n\
    \   Note that this will be translated, by the LDAP DAG-SAP, into a query\n   of\
    \ the form\n   (&(cn=*th*)(cn=*c*)(cn=*t*)(o=*green groceries*)\n   (objectClass=person))\n\
    \   which is still more general than the original query.\n   Note the translation\
    \ from \"FN=th;search=lstring\" into \"cn=*th*\".\n   This is necessary, as the\
    \ DAG/IP lstring constraint is based on\n   tokens, whereas \"cn=th*\" refers\
    \ to the beginning of the attribute's\n   value (phrase, not token).  The DAG-SAP\
    \ should therefore prune out\n   any results that include things like \"oTHer\
    \ plaCes for visiTors\" in\n   order to match the semantics of the DAG/IP query\
    \ it received.\n   The DAG-CAP should then prune those results to match the semantics\
    \ of\n   the original LDAP query.\n"
- title: 6.0 Service Specifications
  contents:
  - '6.0 Service Specifications

    '
- title: 6.1 Overview
  contents:
  - "6.1 Overview\n   To satisfy the requirements laid out for the TISDAG project,\
    \ the\n   software built for the DAG system must be able to meet the following\n\
    \   service specifications:\n   - primary designated DAG-CAPs of all types (but\
    \ not necessarily\n     secondary ones set up for load-balancing) must be available\
    \ to\n     provide service or redirect queries on a 7x24 basis.\n   - in general,\
    \ responses to queries should be available in under 10\n     seconds; very generalized\
    \ queries (i.e., when the user truly cannot\n     specify enough information to\
    \ focus the search) can be deferred to\n     take much longer (having results\
    \ is more important than having a\n     quick answer)\n   - the data provided\
    \ from each WDSP should be updated in the DAG at\n     least once every 7 days\n"
- title: 6.2 WDSP Participation
  contents:
  - "6.2 WDSP Participation\n   WDSPs who wish to participate in the DAG system do\
    \ so by providing\n   DAG-compatible access to their service, where DAG-compatible\
    \ means:\n   - access in (exactly) one of LDAPv2, LDAPv3, or Whois++\n     - 7x24\
    \ service for responding to referrals generated in the DAG\n     core (minimally)\
    \ weekly updates of the index object describing the\n     information their service\
    \ indexes\n     - use of USER and ROLE templates for Whois++ servers\n     - use\
    \ of inetorgperson and organizationalrole objectclasses for\n     LDAP servers\n\
    \   To participate, WDSPs must register each DAG-compliant server with\n   the\
    \ DAG system, providing details for each data set that it covers:\n   - the host,\
    \ port and protocol of the server\n     - an identifier for the dataset\n    \
    \ - a URL for the service of preference for accessing the data\n     (preferred\
    \ source)\n     - protocol-specific information\n     - administrative contact\
    \ information\n     - CIP object exchange information\n   Note that any WDSP wishing\
    \ to make data available through the DAG\n   system but unable to support these\
    \ requirements may provide\n   information through an agreement with a third-party\
    \ which does meet\n   these requirements.  Thus, data can be replicated between\
    \ cooperating\n   WDSPs.  The DAG referral index does not claim ownership of personal\n\
    \   information; it directs queries to services that do, by whatever\n   agreements\
    \ with whichever relevant parties.  Note that, in this case,\n   the SOURCE-URI\
    \ may direct end-users to the WDSP's existing services,\n   not the service of\
    \ the third party.\n"
- title: 6.3 Load Distribution
  contents:
  - "6.3 Load Distribution\n   It is anticipated that the DAG system will be quite\
    \ popular, and\n   measures must be available to distribute the load of answering\n\
    \   queries.\n   The DAG system is presented as a conceptual whole, made up of\
    \ several\n   component parts -- DAG-CAPs, DAG-SAPs and the Referral Index.  Each\n\
    \   of these component parts must be replicable, and service must be\n   shared\
    \ between replicas.\n   It may be interesting to consider allowing large-scale\
    \ service\n   providers (large companies, ISPs)  the ability to mirror the Referral\n\
    \   Index or provide alternate DAG-CAPs/DAG-SAPs for their\n   personnel/customers.\
    \  Policies and possibilities for doing that are\n   beyond the scope of this\
    \ report; however, the software architecture\n   has been designed to support\
    \ such activity.\n   Figure 6.1 shows that individual components of the DAG system\
    \ may\n   each run on non-co-located server hardware, connected by TCP/IP\n  \
    \ networks.  These components can be replicated as needed.\n   +====+\n   |  \
    \  |  DAG-CAP (Client Access Point)\n   |    |\n   +====+\n   +----+\n   |   \
    \ |  DAG-SAP (Service Access Point)\n   |    |\n   +----+\n              +====+\n\
    \   HTTP   <-->|    |\n              |    |                +----+\n          \
    \    +====+                |    |<--> Whois++\n                              \
    \      |    |\n                 +====+             +----+\n      SMTP   <-->|\
    \    |\n                 |    |          +----+\n                 +====+     \
    \     |    |<--> LDAPv2\n                                 |    |\n           \
    \         +====+       +----+\n         Whois++<-->|    |\n                  \
    \  |    |\n                    +====+             +----+\n                   \
    \                    |    |<--> LDAPv3\n                                     \
    \  |    |\n                                       +----+\n                   \
    \                    |    |<--> LDAPv3\n                                     \
    \  |    |\n                                       +----+\n                   \
    \                    |    |<--> LDAPv3\n                                     \
    \  |    |\n                 +====+                +----+\n      LDAPv2 <-->| \
    \   |\n                 |    |\n                 +====+\n              +====+\n\
    \   LDAPv3 <-->|    |\n              |    |\n              +====+\n          \
    \     +------------------------+\n               | Referral Index         |<-->\
    \ Common Indexing Protocol\n               |                        |     (CIP)\n\
    \               +------------------------+\n         +------------------------+\n\
    \         | Referral Index         |\n         |                        |\n  \
    \       +------------------------+\n   Figure 6.1 Distributable nature of DAG\
    \ components\n   Thus, the software built to this specification must be configurable\n\
    \   to permit the following actions:\n   - DAG-CAP software must be able to handle\
    \ or redistribute the primary\n     load.  Depending on the DAG-CAP software,\
    \ this may be handled by\n     having multiple processes attending to incoming\
    \ queries, or the\n     DAG-CAP at the primary address for the protocol may be\
    \ nothing more\n     than a reflector that redirects incoming queries to the address\
    \ of\n     the least-loaded server at the moment.\n   - This is particularly necessary\
    \ in synchronous connection protocols,\n     such as Whois++ and LDAP, where the\
    \ goal is to minimize the amount\n     of time a requesting client is connected\
    \ to the well-advertised\n     address port.\n   - DAG-CAP software must be able\
    \ to direct referrals to different\n     DAG-SAPs of the same protocol type.\n\
    \   - DAG-CAP software must be able to detect overly general queries\n     (i.e.,\
    \ have some metric to decide that the number of referrals\n     generated by the\
    \ Referral Index is too great).\n   - DAG-SAPs must be able to redirect DAG-CAP\
    \ queries at their\n     discretion, or just refuse service because of loading\
    \ (therefore\n     DAG-CAPs must also be able to find other DAG-SAPs)\n"
- title: 6.4 Extensibility
  contents:
  - "6.4 Extensibility\n   The DAG system has been designed to allow for extensibility\
    \ in\n   certain key areas:\n   It is possible to add new DAG-CAPs and DAG-SAPs\
    \ transparently.\n   Beyond replicating the software of existing DAG-CAPs, new\n\
    \   implementations for particular protocols (e.g., building a more\n   elaborate\
    \ mail-based query system), or implementations for altogether\n   different protocols\
    \ (e.g., PH) can be added by adhering to the basic\n   principles of DAG-CAPs\
    \ and DAG-SAPs defined in the software\n   specification.  The new DAG-CAP is\
    \ responsible for the translation of\n   queries into DAG/IP (post-processing\
    \ results, if necessary) and\n   results in the new protocol.  No other part of\
    \ the DAG system is\n   affected.\n   More functionality may be added to the DAG\
    \ system service (e.g.,\n   adding security certificate references to the schema\
    \ of returned\n   information) by updating the DAG schema.\n   Depending on how\
    \ the load on the service goes, it may be interesting\n   to consider reducing\
    \ the number of queries that are chained for\n   protocols that inherently can\
    \ handle the concept of pursuing\n   referrals.  Specifically, LDAPv3 and Whois++\
    \ both handle referrals,\n   but the current system calls for chaining LDAPv3\
    \ (and LDAPv2)\n   referrals for the Whois++ DAG-CAP, and vice versa.  Alternatively,\n\
    \   \"virtual\" DAG-CAPs could be established for each participating WDSP\n  \
    \ for each protocol the WDSP doesn't support, and referrals to those\n   DAG-CAPs\
    \ could be given to the calling client.  For example, a\n   Whois++ client would\
    \ be given a Whois++ referral to the virtual\n   Whois++ DAG-CAP for a WDSP that\
    \ supports only LDAP.  The importance\n   of having one virtual DAG-CAP per WDSP\
    \ is that the point of\n   connection is the only way to distinguish which WDSP\
    \ the Whois++\n   client thought it was connecting to.\n"
- title: 7.0 Security
  contents:
  - '7.0 Security

    '
- title: 7.1 Information credibility
  contents:
  - "7.1 Information credibility\n   Security, in the context of \"read-only\" directory\
    \ services, is\n   primarily concerned with maintaining data integrity as it passes\
    \ from\n   an originating server to the end-user making an inquiry.  That is,\n\
    \   some server(s) hold correct user information, and a client accessing\n   a\
    \ directory service should be certain that whichever servers that the\n   information\
    \ has to pass through before reaching the client, it\n   receives a true representation\
    \ of the original information.\n   The DAG system as such MUST be completely invisible\
    \ as the mediator\n   of the information from the WDSPs to the querying directory\
    \ access\n   client.  The only possible modifications that can appear is\n   translations\
    \ from one characterset into another.  Hopefully, this\n   does not alter the\
    \ meaning of the information.\n"
- title: 7.2 Unauthorized access
  contents:
  - "7.2 Unauthorized access\n   In keeping with the public nature of the proposed\
    \ TISDAG service, the\n   DAG system does not provide any access control system\
    \ beyond\n   components' configuration to accept connections from recognized other\n\
    \   components.  For more detailed access control, it is up to the\n   connected\
    \ WDSPs to apply the access control.\n   Since the DAG system only supports searching\
    \ and retrieving\n   information, no updates can occur through the DAG client\
    \ access\n   points.\n   Security in updates (CIP index objects) is provided by\
    \ encryption and\n   signature of objects from registered WDSPs.\n"
- title: 8.0 Acknowledgments
  contents:
  - "8.0 Acknowledgments\n   This work came from ideas originally put forward by Patrik\
    \ Faltstrom.\n   The TISDAG project was supported by the Swedish KK Foundation.\n\
    \   Thanks to especially to Jens Lundstrom, Thommy Eklof, Bjorn Larsson\n   and\
    \ Sandro Mazzucato for their comments on draft versions of this\n   document.\n"
- title: Appendix A - DAG Schema Definitions
  contents:
  - "Appendix A - DAG Schema Definitions\n   The DAG makes use of 2 information schemas\
    \ -- the DAGPERSON schema\n   for information about specific people, and the DAGORGROLE\
    \ schema for\n   organizational roles that may or may not be job positions occupied\
    \ by\n   people at any given time (e.g., an organization's president, customer\n\
    \   service desk, etc).\n   This appendix defines the schemas in terms of the\
    \ attributes used\n   within the DAG/IP.  Mappings to the standard LDAP and Whois++\
    \ object\n   classes and templates (respectively) are described in Appendix B.\n\
    \   Because the role of the DAG schemas is to act as an intermediary\n   between\
    \ information provided in different access protocols, with\n   different underlying\
    \ schema paradigms, the attributes in the schema\n   are identified as being required\
    \ or optional.  The required\n   attributes are so designated because they are\
    \ involved in the DAG\n   search types and/or the minimal returned response. \
    \ They have defined\n   mappings in the selected access protocols.  The optional\
    \ attributes\n   have proposed mappings in those protocols.\n   It is important\
    \ to note that the DAG/IP is constructed to carry any\n   alternative attribute\
    \ information that may be provided by a given\n   WDSP; individual DAG-SAPs and\
    \ DAG-CAPs may choose to pass along,\n   interpret, or ignore any attributes not\
    \ defined in this appendix.\n   Additionally, note that the order of attributes\
    \ in the DAG/IP is\n   significant, which means that it is possible to use one\
    \ attribute to\n   carry the information describing the type of subsequent ones\
    \ (e.g.,\n   see the \"ADR-TYPE\" attribute below).\n   Finally, attributes may\
    \ be repeated.  For example, this schema\n   structure can carry  multiple phone\
    \ numbers of different types for\n   one person.\n"
- title: A.1 DAG Personal Information Schema (DAGPERSON Schema)
  contents:
  - "A.1 DAG Personal Information Schema (DAGPERSON Schema)\n   Attribute    Designation\
    \   Specific Description\n   ---------    -----------   -------------------------------------\n\
    \   FN           Required      Free-text representation of full name\n   EMAIL\
    \        Required      Internet e-mail address\n   LOC          Required     \
    \ Locality -- geographic region\n   ORG          Required      Person's organization\n\
    \   ADR-TYPE     Optional      Type of address that follows\n                \
    \              (\"org\", \"home\", \"org-postal\",\n                         \
    \     \"home-postal\", \"unqualified\")\n   ADR          Optional      Full address\n\
    \   ADR-STREET   Optional      Street address component\n   ADR-ROOM     Optional\
    \      Suite or room number component\n   ADR-CITY     Optional      City name\n\
    \   ADR-STATE    Optional      Region of address\n   ADR-COUNTRY  Optional   \
    \   Country\n   ADR-CODE     Optional      Postal code component\n   TEL-TYPE\
    \     Optional      Type of telephone number (\n                             \
    \ \"work\",  \"home\", \"mobile\",\n                              \"fax\" ,\"\
    pager\", \"unqualified\")\n                              in the following attribute\n\
    \   TEL          Optional      A phone number for the person\n   SOURCE      \
    \ Optional      The WDSP's preferred  access to\n                            \
    \  their service -- a URL\n   DN           Optional      Entry's \"distinguished\
    \ name\"\n                              (for LDAP)\n      Table A.1 DAGPERSON\
    \ schema attributes\n"
- title: A.2 DAG Organizational Role Information Schema (DAGORGROLE Schema)
  contents:
  - "A.2 DAG Organizational Role Information Schema (DAGORGROLE Schema)\n   Attribute\
    \   Designation     Specific Description\n   ---------   -----------     ---------------------\n\
    \   ROLE        Required        Name of organizational role\n   EMAIL       Required\
    \        E-mail address associated with role\n   ORG         Required        Name\
    \ of organization\n   LOC         Required        Locality -- geographic region\n\
    \   TEL-TYPE    Optional        Type of telephone number\n                   \
    \            in the TEL attribute immediately\n                              \
    \ following(\"org\" or \"fax\")\n   TEL         Optional        Phone number\n\
    \   FN          Optional        Full name of current role occupant\n   SOURCE\
    \      Optional        The WDSP's preferred  access to their\n               \
    \                 service -- a URL\n   DN          Optional        Entry's \"\
    distinguished name\" (for LDAP)\n   Table A.2 DAGORGROLE schema attributes\n"
- title: Appendix B - Schema Mappings for Whois++ and LDAP
  contents:
  - "Appendix B - Schema Mappings for Whois++ and LDAP\n   The DAG/IP makes use of\
    \ two specific schemas, as defined above.\n   However, schemas particular to access\
    \ protocols need to be handled in\n   order to appropriately address incoming\
    \ user queries, and chaining\n   queries to WDSPs.  The recognized standard schemas\
    \ are:\n   - the USER template for Whois++ ([8])\n   - the ORGROLE template for\
    \ Whois++ ([8])\n   - the inetOrgperson objectclass for LDAP ([16])\n   - the\
    \ organizationalrole objectclass for LDAP ([18])\n   The DAG/IP schemas were developed\
    \ based on the information that the\n   TISDAG project requirements wish to return\
    \ in results, in conjunction\n   with information about standard schemas used\
    \ in the basic WDSP access\n   protocols (LDAPv2/v3 and Whois++).  However, particularly\
    \ in the case\n   of address information, the schemas used for those protocols\
    \ allow\n   for considerable scope of information representation.  In practice,\n\
    \   this means that different WDSPs may choose to use different sub-parts\n  \
    \ of the schema, or even implement local customizations.\n   Therefore, Appendix\
    \ A outlines a very basic schema that can carry all\n   the necessary information.\
    \  The basic DAG-CAPs and DAG-SAPs are\n   designed to work to that information\
    \ structure.  This appendix\n   outlines the expected behaviour for DAG-SAPs mapping\
    \ into the DAG/IP\n   schema, and DAG-CAPs extracting information to pass along\
    \ to client\n   software after a chaining operation has returned results.\n"
- title: B.1 LDAP and the DAG Schemas
  contents:
  - "B.1 LDAP and the DAG Schemas\n   The only time information is carried in the\
    \ DAG schemas is when a\n   DAG-SAP is returning information (obtained from  WDSPs'\
    \ servers) to a\n   DAG-CAP using the DAG/IP.  The \"canonical\" mappings between\
    \ standard\n   LDAP object classes (inetorgPerson, defined in [16] and\n   organizationalRole,\
    \ defined in [18] and the DAGPERSON schema and\n   DAGORGROLE schema are defined\
    \ such that information passed from an\n   LDAP DAG-SAP to an LDAP DAG-CAP (e.g.,\
    \ in the case of an LDAPv3 DAG-\n   SAP returning information chained for an LDAPv2\
    \ DAG-CAP) will be\n   mapped into the same attributes as it was extracted.\n\
    \   However, the representation of some attributes (such as address) is\n   truly\
    \ widely varied between protocol paradigms.  The goal with the\n   \"reasonable\
    \ approximation\" mappings that are provided is to give\n   DAG-CAPs a basic mechanism\
    \ for communicating information drawn from\n   non-LDAP DAG-SAP sources.  The\
    \ mappings may not be perfect, but they\n   will convey the information to the\
    \ end-user in some LDAP-\n   understandable fashion, which is the goal of this\
    \ project's effort.\n   The canonical mappings for the LDAP inetorgPerson object\
    \ class and\n   the DAGPERSON schema are given in Table B.1.  A few reasonable\n\
    \   approximation mappings follow in Table B.2.  Beyond that, DAG-SAPs\n   may\
    \ pass along any additional attributes in the DAG/IP, and DAG-CAPs\n   may elect\
    \ to forward or interpret any that are recognizable (e.g.,\n   the sn (\"surname\"\
    ) attribute is not listed here, but a DAG-SAP might\n   return that in the DAG/IP,\
    \ and a DAG-CAP, recognizing the string\n   representation, could elect to include\
    \ it in its LDAP response to the\n   client).\n   DAGPERSON Attribute     LDAP\
    \ inetorgPerson attribute\n   -------------------     ----------------------------\n\
    \   FN                      cn\n   EMAIL                   mail\n   LOC      \
    \               l\n   ORG                     o\n   ADR-TYPE=org\n   ADR-STREET\
    \              street\n   ADR-ROOM                roomNumber\n   ADR-STATE   \
    \            st\n   ADR-COUNTRY             c\n   ADR-TYPE=org-postal\n   ADR\
    \                     postalAddress\n   ADR-ROOM                postOfficeBox\n\
    \   ADR-CODE                postalCode\n   ADR-TYPE=home-postal\n   ADR      \
    \               homePostalAddress\n   TEL-TYPE=work\n   TEL                  \
    \   telephoneNumber\n   TEL-TYPE=home\n   TEL                     homePhone\n\
    \   TEL-TYPE=fax\n   TEL                     facsimileTelephoneNumber\n   TEL-TYPE=mobile\n\
    \   TEL                     mobile\n   TEL-TYPE=pager\n   TEL                \
    \     pager\n   DN                      dn\n   SOURCE                  labeledURI\n\
    \   Table B.1 Canonical DAGPERSON schema & LDAP inetorgPerson attributes\n   DAGROLE\
    \ Attribute        LDAP organizationalRole attribute\n   -----------------------\
    \  ---------------------------------\n   ADR-TYPE=unqualified\n   ADR        \
    \              street\n   ADR-STREET               street\n   ADR-ROOM       \
    \          room\n   ADR-STATE                st\n   ADR-COUNTRY              c\n\
    \   TEL-TYPE=unqualified\n   TEL                      telephoneNumber\n   Table\
    \ B.2 Reasonable Approximations for LDAP organizationalRole\n   attributes\n \
    \  For example, consider the following LDAP record information, in LDIF\n   [11]\
    \ format:\n   dn: cn=Barbara Jensen, ou=Product Development, o=Ace Industry,\n\
    \   c=US\n   objectclass: top\n   objectclass: person\n   objectclass: organizationalPerson\n\
    \   objectclass: inetorgperson\n   cn: Barbara Jensen\n   cn: Barbara J Jensen\n\
    \   cn: Babs Jensen\n   sn: Jensen\n   uid: bjensen\n   telephonenumber: +1 408\
    \ 5551212\n   description:  A big sailing fan\n   This would validly be carried\
    \ in the DAGPERSON schema as follows:\n   DN: cn=Barbara Jensen, ou=Product Development,\
    \ o=Ace Industry,\n   c=US\n   FN: Barbara Jensen\n   FN: Barbara J Jensen\n \
    \  FN: Babs Jensen\n   SN: Jensen\n   TEL-TYPE: work\n   TEL:  +1 408 5551212\n\
    \   The canonical mappings for the LDAP organizationalRole object class\n   and\
    \ the DAGORGROLE schema are given in Table B.3 .Beyond that, DAG-\n   SAPs may\
    \ elect to send along any attributes, and DAG-CAPs may\n   interpret any that\
    \ are recognizable.  N.B., the organizationalRole\n   class does not include provision\
    \ for inclusion of an e-mail address.\n   This mapping rather blithely assumes\
    \ the availability of the mail\n   attribute as defined for inetorgPerson.\n \
    \  DAGORGROLE Attribute   LDAP organizationalRole attribute\n   --------------------\
    \   ---------------------------------\n   ROLE                   cn\n   EMAIL\
    \                  mail\n   ORG                    o\n   LOC                 \
    \   l\n   TEL-TYPE=org\n   TEL                    telephoneNumber\n   TEL-TYPE=fax\n\
    \   TEL                    facsimileNumber\n   FN                     roleOccupant\n\
    \   DN                     dn\n   SOURCE                 labeledURI\n   Table\
    \ B.3 Canonical mappings for LDAP organizationalRole attributes\n"
- title: B.2 Whois++ and the DAG Schemas
  contents:
  - "B.2 Whois++ and the DAG Schemas\n   The \"canonical\" mappings between standard\
    \ Whois++ templates as\n   defined in [8] and the DAGPERSON schema and DAGORGROLE\
    \ schema are\n   defined in Tables B.4 and B.5.  Beyond that, DAG-SAPs may pass\
    \ along\n   any additional attributes in the DAG/IP, and DAG-CAPs may elect to\n\
    \   forward or interpret any that are recognizable.\n   DAGPERSON Attribute  \
    \ Whois++ USER template attribute\n   -------------------   -------------------------------\n\
    \   FN                    name\n   EMAIL                 email\n   LOC       \
    \            address-locality\n   ORG                   organization-name\n  \
    \ ADR-TYPE=unqualified\n   ADR                   address\n   ADR-TYPE=org\n  \
    \ ADR                   organization-address\n   ADR-STREET            organization-address-street\n\
    \   ADR-ROOM              organization-address-room\n   ADR-CITY             \
    \ organization-address-city\n   ADR-STATE             organization-address-state\n\
    \   ADR-COUNTRY           organization-address-country\n   ADR-CODE          \
    \    organization-address-zip-code\n   ADR-TYPE=home         address-type=home\n\
    \   ADR                   address\n   ADR-STREET            address-street\n \
    \  ADR-ROOM              address-room\n   ADR-CITY              address-city\n\
    \   ADR-STATE             address-state\n   ADR-COUNTRY           address-country\n\
    \   ADR-CODE              address-zip-code\n   TEL-TYPE=work         phone-type=work\n\
    \   TEL                   phone\n   TEL-TYPE=home         phone-type=home\n  \
    \ TEL                   phone\n   TEL-TYPE=fax\n   TEL                   fax\n\
    \   TEL-TYPE=mobile\n   TEL                   cellular\n   TEL-TYPE=pager\n  \
    \ TEL                   pager\n   Table B.4 Canonical DAGPERSON schema & Whois++\
    \ USER attributes\n   DAGORGROLE Attribute       Whois++ ORGROLE attribute\n \
    \  --------------------       -------------------------\n   ROLE             \
    \          org-role\n   EMAIL                      email\n   ORG             \
    \           organization-name\n   LOC                        organization-address-locality\n\
    \   FN                         name\n   TEL-TYPE=org\n   TEL                 \
    \       phone\n   TEL-TYPE=fax\n   TEL                        fax\n   Table B.5\
    \ Canonical mappings for Whois++ ORGROLE attributes\n"
- title: Appendix C - DAG-Internal Protocol (DAG/IP)
  contents:
  - "Appendix C - DAG-Internal Protocol (DAG/IP)\n   The DAG-Internal Protocol (DAG/IP)\
    \ is currently defined as a\n   derivative of the query-interaction protocol of\
    \ Whois++ as laid out\n   in RFC1835 ([6]).\n"
- title: C.1 A word on the choice of DAG/IP
  contents:
  - "C.1 A word on the choice of DAG/IP\n   The use of the DAG/IP is strictly internal\
    \ to the DAG system.  In\n   that regard, it is possible make use of any query\
    \ language, or define\n   a new one.\n   The Whois++ protocol was selected as\
    \ the basis of the DAG/IP for\n   several reasons:\n   - it has the power and\
    \ flexibility to convey all necessary queries\n   - it is a simple, text-based\
    \ protocol; clients need not implement the\n     full functionality of the protocol\
    \ in order to carry out minimal\n     queries\n   - the power of the full-fledge\
    \ directory service query protocol will\n     give DAG-CAP writers the ability\
    \ to express more sophisticated\n     queries if desired (e.g., to produce more\
    \ intricate \"intelligent\"\n     matching of spellings, common character substitutions,\
    \ etc).\n   - the text-based, delimited attribute results expression facilitates\n\
    \     optional inclusion of  extra data supplied by WDSPs -- DAG-CAPs can\n  \
    \   easily ignore any unknown information and continue to interpret the\n    \
    \ rest of the result information.\n   Also, the use of an existing protocol leverages\
    \ the experience and\n   time of the creators of the protocol -- hammering out\
    \ such elusive\n   and yet necessary details as handling line-endings, quoting\
    \ special\n   characters, etc.\n   There is a freely-available test suite of tools\
    \ for testing servers'\n   Whois++ protocol conformance (for the Referral Index,\
    \ and for DAG-\n   SAPs).  Send mail to digger-info@bunyip.com for further information.\n"
- title: C.2 DAG/IP Input and Output -- Overview
  contents:
  - "C.2 DAG/IP Input and Output -- Overview\n   Input interactions in DAG/IP are\
    \ as defined in RFC1835, \"Architecture\n   of the WHOIS++ service\" ([6]), sections\
    \ 2.2 and 2.3.  Section C.3 of\n   this document adapts the grammar used in more\
    \ recent descriptions of\n   the Whois++ protocol to illustrate the syntax of\
    \ the DAG/IP.\n   DAG/IP output will be a subset of what is defined in RFC1835,\
    \ section\n   2.4, except that referral responses (\"SERVER-TO-ASK\") contain\
    \ more\n   information.\n"
- title: C.3 BNF for DAG/IP input and output
  contents:
  - "C.3 BNF for DAG/IP input and output\n   The following sections are adapted from\
    \ the Whois++ grammar.  For\n   discussion of the semantic intent of the query\
    \ protocol, and other\n   matters, see Whois++ RFC 1835 [6].\n"
- title: C.3.1 The DAG/IP Input Grammar
  contents:
  - "C.3.1 The DAG/IP Input Grammar\n   The following grammar, which uses the Augmented\
    \ BNF (ABNF) notation\n   as defined in [5], defines the set of acceptable DAG/IP\
    \ input.\n   N.B.:  As outlined in the ABNF definition, rule names and string\n\
    \   literals are in the US-ASCII character set, and are case-insensitive.\n  \
    \ Also,  when a character is written explicitly in the grammar, as for\n   example\
    \ \";\", it represents the byte value of that character in all of\n   the allowed\
    \ character sets in their encodings used in this protocol.\n   Specifically in\
    \ UNICODE, \";\" means the character U+003B, which when\n   encoding the character\
    \ in UTF-8 will generate the byte value 0x3B\n   which is then used in the DAG/IP\
    \ protocol.\n   dagip-command   = ( system-command [\":\" \"hold\"]\n        \
    \         / ri-query\n                 / sap-query ) nl\n   ri-query        =\
    \   ri-terms [\":\" globalcnstrnts]\n   sap-query       =   sap-terms [\":\" [sapcnstrnts][\
    \ \":\" wdspinfo]]\n   system-command =   \"constraints\"\n                  \
    \ / \"describe\"\n                   / \"commands\"\n                   / \"polled-by\"\
    \n                   / \"polled-for\"\n                   / \"version\"\n    \
    \               / \"list\"\n                   / \"show\" [1*sp datastring]\n\
    \                   / \"help\" [1*sp datastring]\n                   / \"<NL>\"\
    \ [string]\n   ri-terms       =   ri-and-expr *(1*sp \"or\" 1*sp ri-and-expr)\n\
    \   ri-and-expr    =   ri-basic-expr *(1*sp \"and\" 1*sp ri-basic-\n   expr)\n\
    \   ri-basic-expr  =   [\"not\" 1*sp] ri-term / ( \"(\" ri-terms \")\" )\n   ri-term\
    \        =   generalterm / specificterm / combinedterm\n   sap-terms       = \
    \  sap-and-expr *(1*sp \"or\" 1*sp sap-and-expr)\n   sap-and-expr    =   sap-basic-expr\
    \ *(1*sp \"and\" 1*sp\n                       sap-basic-expr)\n   sap-basic-expr\
    \  =   [\"not\" 1*sp] sap-term / ( \"(\" sap-terms \")\" )\n   sap-term      \
    \  =   ( generalterm / specificterm / combinedterm)\n                       localcnstrnts\n\
    \   generalterm     =   datastring\n      TISDAG: Since the DAG system only supports\
    \ certain attribute\n      combinations in its queries, (Table 3.1).  The use\
    \ of generalterm\n      may lead to unexpected behaviour and is therefore deprecated.\n\
    \      CAPs should therefore not use it even if it is in the protocol.\n   specificterm\
    \    =   specificname \"=\" datastring\n   specificname    =   \"handle\" / \"\
    value\"\n   combinedterm    =   attributename \"=\" datastring\n   sapcnstrnts\
    \     =   sapcnstrnt *(\";\" sapcnstrnt)\n   sapcnstrnt      =   localcnstrnt\
    \ / globalcnstrnt\n   localcnstrnts   =   [\";search=\" sap-searchvalue] [\";case=\"\
    \n                       sap-casevalue]\n   localcnstrnt    =   \"search=\" sap-searchvalue\
    \ / \"case=\"\n                       sap-casevalue\n      ;N.B.:  in the case\
    \ where local and global constraints\n      ;       conflict, local constraints\
    \ take precedence\n      ;       and overrides the global constraint\n   sap-searchvalue\
    \ =   \"tstring\" / searchvalue\n   sap-casevalue   =   \"consider\" / \"ignore\"\
    \n   globalcnstrnts  =   globalcnstrnt *(\";\" globalcnstrnt)\n   globalcnstrnt\
    \   =   \"search\" \"=\" searchvalue\n                    / opt-globalcnst\n \
    \  opt-globalcnst  =   \"hold\"\n                    / \"case\" \"=\" casevalue\n\
    \                    / \"maxfull\" \"=\" 1*digit\n                    / \"maxhits\"\
    \ \"=\" 1*digit\n                    / \"language\" \"=\" language\n         \
    \           / \"incharset\" \"=\" characterset\n                    / \"ignore\"\
    \ \"=\" attributename\n                    / \"include\" \"=\" attributename\n\
    \   ; N.B.: If an attribute is named both with the \"include\" and \"ignore\"\n\
    \   ; constraints, the attribute is to be included in the result, but the\n  \
    \ ; system message must be \"% 112 Requested constraint not fulfilled\".\n   language\
    \        = <The language code defined in RFC1766>\n   characterset    =   \"UNICODE-2-0-UTF-8\"\
    \n   searchvalue     =   \"exact\" / \"substring\" / \"lstring\"\n   casevalue\
    \       =   \"ignore\" / \"consider\"\n   wdspinfo        =   attrValAss *( \"\
    ;\" attrValAss )\n   attrValAss      =   attributename \"=\" datastring\n    \
    \  TISDAG: Within the boundaries of the TISDAG project it has been\n      decided\
    \ that the only permitted attributes for wdspinfo are\n      \"host\",\"port\"\
    ,\"server-info\" and \"charset\".  Regarding \"charset\"\n      the values for\
    \ this attribute are defined to be one of \"UTF-8\",\n      \"ISO8859-1\",\"T\\\
    .61\" or \"US-ASCII\".\n   datastring      =   1*data-elt\n   attributename  \
    \ =   1*(<%d32-126 except specialbyte>)\n                         ; omit 127,\
    \ which is DEL\n   data-elt        =   \"\\\" specialbyte / normalbyte\n   normalbyte\
    \      =   <%d32-255, except specialbyte>\n   specialbyte     =   \" \" / tab\
    \ / \"=\" / \",\" / \":\" / \";\" / \"\\\" /\n                    \"*\" / \".\"\
    \ / \"(\" / \")\" / \"[\" / \"]\" / \"^\" /\n                    \"$\" / \"!\"\
    \ / \"<NL>\"\n   number          =   1*digit\n   digit           =   \"0\" / \"\
    1\" / \"2\" / \"3\" / \"4\" /\n                    \"5\" / \"6\" / \"7\" / \"\
    8\" / \"9\"\n   tab             =   %d09\n   sp              =   %d32        \
    \        ; space\n   nl              =   %d13 %d10           ; CR LF\n   NOTE:\
    \ Spaces (sp) that are significant to a query must be escaped.\n   The following\
    \ characters, when significant to the query, may  be\n   preceded and/or followed\
    \ by a single space:\n     : ; , ( ) = !\n"
- title: C.3.2 The DAG/IP Response Grammar
  contents:
  - "C.3.2 The DAG/IP Response Grammar\n   The following grammar, which uses the Augmented\
    \ BNF (ABNF) notation\n   as defined in RFC2234 (see [5]),\n   N.B.:  As outlined\
    \ in the ABNF definition, rule names and string\n   literals are in the US-ASCII\
    \ character set, and are case-insensitive.\n   Also,  when a character is written\
    \ explicitely in the grammar, as for\n   example \";\", it represents the byte\
    \ value of that character in all of\n   the allowed character sets in their encodings\
    \ used in this protocol.\n   Specifically in UNICODE, \";\" means the character\
    \ U+003B which when\n   encoding the character in UTF-8 will generate the byte\
    \ value 0x3B\n   which is then used in the DAG/IP protocol.\n   server-resp  \
    \   =   goodmessage mnl output mnl endmessage\n                    / badmessage\
    \ nl endmessageclose\n   output          =   0*(full-record / server-to-ask)\n\
    \   full-record     =   \"# FULL \" template \" \" serverhandle \" \"\n      \
    \                    localhandle system-nl\n                    1*fulldata\n \
    \                    \"# END\" system-nl\n      TISDAG: serverhandle is:\n   \
    \   - Whois++, whatever the server-handle on the record returned by\n        the\
    \ WDSP.\n      - LDAP, <hostname-without-periods><port> (because server DN's are\n\
    \        not enforceably unique).  E.g., a services.bunyip.com server on\n   \
    \     7778 would become servicesbunyipcom7778.\n      localhandle is:\n      -\
    \ Whois++:  the localhandle on the record returned by the WDSP\n      - LDAP,\
    \ it is the RDN (relative  distinguished name), with spaces\n        replaced\
    \ by \"_\".  E.g., cn=leslie_daigle\n   server-to-ask   =   \"# SERVER-TO-ASK\
    \ \" serverhandle system-nl\n                    server-to-askdata\n         \
    \           \"# END\" system-nl\n   fulldata        =   \" \" attributename \"\
    : \" attributevalue\n   system-nl\n   server-to-ask-data = \" Server-Info: \"\
    \ serverinfo system-nl\n                     \" Host-Name: \" hostname system-nl\n\
    \                     \" Host-Port: \" number system-nl\n                    \
    \ \" Protocol: \" prot system-nl\n                     \" Source-URI: \" source\
    \ system-nl\n                     \" Charset: \" characterset system-nl\n   attributename\
    \   =   r-string\n   attributevalue  =   longstring\n   template        =   <%d32-%d255\
    \ except specialbyte>\n   serverhandle    =   <%d32-%d255 except specialbyte>\n\
    \   localhandle     =   <%d32-%d255 except specialbyte>\n   serverinfo      =\
    \   string\n   hostname        =   string\n   prot            =   string ; currently\
    \ one of \"ldapv2\"\n                           ; \"ldapv3\" \"whois++\"\n   characterset\
    \    =   \"UTF-8\" / \"T.61\" / \"ISO8859-1\" / \"US-ASCII\"\n   source      \
    \    =   string\n   longstring      =   string 0*( nl ( \"+\" / \"-\" ) string\
    \ )\n   string          =   0*(%d32-255)\n   r-string        =   0*(<%d32-126\
    \ except specialbyte>)\n                        ; omit 127 which is DEL\n   specialbyte\
    \     =   \":\" / \" \"\n   mnl             =   1*system-nl\n   system-nl    \
    \   =   nl [ 1*(message nl) ]\n   nl              =   %d13 %d10    ; CR and LF\n\
    \   message         =   [1*( messagestart \"-\" string nl)]\n                \
    \    messagestart \" \" string nl\n   messagestart    =   \"% \" digit digit digit\n\
    \   goodmessage     =   [1*( goodmessagestart \"-\" string nl)]\n            \
    \        goodmessagestart \" \" string nl\n   goodmessagestart=   \"% 200\"\n\
    \   badmessage      =   [1*( badmessagestart \"-\" string nl)]\n             \
    \       badmessagestart \" \" string nl\n   badmessagestart =   \"% 5\" digit\
    \ digit\n   endmessage      =   endmessageclose / endmessagecont\n   endmessageclose\
    \ =   [endmessagestart \" \" string nl]\n                    byemessage\n   endmessagecont\
    \  =   endmessagestart \" \" string nl\n   endmessagestart =   \"% 226\"\n   byemessage\
    \      =   byemessagestart \" \" string nl\n   byemessagestart =   \"% 203\"\n\
    \   number          =   1*( digit )\n   digit           =   \"0\" / \"1\" / \"\
    2\" / \"3\" / \"4\" / \"5\" / \"6\" /\n                    \"7\" / \"8\" / \"\
    9\"\n"
- title: C.4 DAG/IP Response Messages
  contents:
  - "C.4 DAG/IP Response Messages\n   The following list and discussion of response\
    \ codes is derived from\n   the Whois++ protocol definition, RFC1835 ([6]).\n\
    \   A system message begins with a '%', followed by a space and a three\n   digit\
    \ number, a space, and an optional text message.  The line\n   message must be\
    \ no more than 81 bytes long, including the terminating\n   CR LF pair.  There\
    \ is no limit to the number of system messages that\n   may be generated.\n  \
    \ A multiline system message have a hyphen instead of a space in column\n   6,\
    \ immediately after the numeric response code in all lines, except\n   the last\
    \ one, where the space is used.\n   Example 1\n   % 200 Command okay\n   Example\
    \ 2\n   % 220-Welcome to\n   % 220-the Whois++ server\n   % 220 at ACME inc.\n\
    \   The client is not expected to parse the text part of the response\n   message\
    \ except when receiving reply 600 or 601, in which case the\n   text part is in\
    \ the former case the name of a character set that will\n   be used by the server\
    \ in the rest of the response, and in the latter\n   case when it specifies what\
    \ language the attribute value is in.  The\n   valid values for characters sets\
    \ is specified in the \"characterset\"\n   list in the BNF listing in Appendix\
    \ C.\n   The theory of reply codes is described in Appendix E in STD 10,\n   RFC821\
    \ ([15]).\n   System response code           Description\n   ----------------------------\
    \   ------------------------------\n   110 Too many hits              The number\
    \ of matches exceeded\n                                  the value specified by\
    \ the\n                                  maxhits constraint.  Server\n       \
    \                           will still reply with as many\n                  \
    \                records as \"maxhits\" allows.\n   111 Requested constraint not\
    \   One or more constraints in query\n       supported                  is not\
    \ implemented, but the\n                                  search is still done.\n\
    \   112 Requested constraint not   One or more constraints in query\n       fulfilled\
    \                  has unacceptable value and was\n                          \
    \        therefore not used, but the\n                                  search\
    \ is still done.\n   200 Command Ok                 Command accepted and executed.\n\
    \                                  The client must wait for a\n              \
    \                    transaction end system message.\n   201 Command Completed\
    \          Command accepted and executed.\n       successfully\n   203 Bye   \
    \                     Server is closing connection\n   204 Overgeneralized   \
    \         The server could not exactly\n                                  match\
    \ the DAG query into its\n                                  native access protocol.\
    \  The\n                                  resulting native query was\n       \
    \                           \"looser\".\n   220 Service Ready              Greeting\
    \ message.  Server is\n                                  accepting commands.\n\
    \   226 Transaction complete       End of data.  All responses to\n          \
    \                        query are sent.\n   401 Service not available\n   402\
    \ Search expression\n       too complicated\n   403 Information Unavailable  \
    \  When a remote service is not\n                                  (currently)\
    \ available.\n   404 Time out\n   500 Syntax error\n   502 Search expression too\
    \      This message is sent when the\n       complicated                server\
    \ is not able to resolve a\n                                  query (i.e. when\
    \ a client sent a\n                                  regular expression that is\
    \ too\n                                  deeply nested).\n   503 Query to general\
    \           This is like the \"too many hits\"\n                             \
    \     situation, but the server does\n                                  not send\
    \ along any results.  This\n                                  message is used\
    \ to deflect data\n                                  mining.\n   505 Operations\
    \ error           Permanent operations error\n   600 <token>                 \
    \   Subsequent attribute values are\n                                  encoded\
    \ in the character set\n                                  specified by <token>.\n\
    \   601 <token>                    Subsequent attribute values are\n         \
    \                         in the language specified by\n                     \
    \             <token>.\n   601 DEF                        Subsequent attribute\
    \ values are\n                                  default values, i.e. they should\n\
    \                                  be used for all languages not\n           \
    \                       specified by \"601 <token>\" since\n                 \
    \                 last \"601 ANY\" message.\n   601 ANY                      \
    \  Subsequent attribute values are\n                                  for all\
    \ languages.\n   Table C.1 List of system response codes\n"
- title: Appendix D - DAG/IP Response Messages Mapping
  contents:
  - "Appendix D - DAG/IP Response Messages Mapping\n LDAPv2/v3                   \
    \               DAG/IP\n ---------------------------------------    ---------------------\n\
    \ success                       (0) v2&v3    200 Command Ok\n operationsError\
    \               (1) v2&v3    505 Operations error\n protocolError            \
    \     (2) v2&v3    505 Operations error\n timeLimitExceeded             (3) v2&v3\
    \    404 Timeout\n sizeLimitExceeded             (4) v2&v3    110 To many hits\n\
    \ compareFalse                  (5) v2&v3    200 OK\n compareTrue            \
    \       (6) v2&v3    200 OK\n authMethodNotSupported        (7) v2&v3    505 Operations\
    \ error\n strongAuthRequired            (8) v2&v3    505 Operations error\n referral\
    \                     (10) v3       200 OK\n adminLimitExceeded           (11)\
    \ v3       110 Too many hits\n unavailableCriticalExtension (12) v3       505\
    \ Operations error\n confidentialityRequired      (13) v3       505 Operations\
    \ error\n saslBindInProgress           (14) v3       N.A.\n noSuchAttribute  \
    \            (16) v2&v3    200 OK\n undefinedAttributeType       (17) v2&v3  \
    \  500 Syntax error\n inappropriateMatching        (18) v2&v3    500 Syntax error\n\
    \ constraintViolation          (19) v2&v3    111 Requested constraint\n      \
    \                                          not supported\n attributeOrValueExists\
    \       (20) v2&v3    200 OK\n invalidAttributeSyntax       (21) v2&v3    500\
    \ Syntax error\n noSuchObject                 (32) v2&v3    200 OK\n aliasProblem\
    \                 (33) v2&v3    505 Operations error\n invalidDNSyntax       \
    \       (34) v2&v3    500 Syntax error\n isLeaf                       (35) v2\
    \       N.A.\n aliasDereferencingProblem    (36) v2&v3    505 Operations error\n\
    \ inappropriateAuthentication  (48) v2&v3    500 Syntax error\n invalidCredentials\
    \           (49) v2&v3    403 Information Unavailable\n insufficientAccessRights\
    \     (50) v2&v3    403 Information Unavailable\n  busy                      \
    \   (51) v2&v3    403 Information Unavailable\n unavailable                  (52)\
    \ v2&v3    401 Service not available\n unwillingToPerform           (53) v2&v3\
    \    505 Operations error\n loopDetect                   (54) v2&v3    505 Operations\
    \ error\n namingViolation              (64) v2&v3    N.A.\n objectClassViolation\
    \         (65) v2&v3    N.A.\n notAllowedOnNonLeaf          (66) v2&v3    N.A.\n\
    \ notAllowedOnRDN              (67) v2&v3    N.A.\n entryAlreadyExists       \
    \    (68) v2&v3    N.A.\n objectClassModsProhibited    (69) v2&v3    N.A.\n affectsMultipleDSAs\
    \          (71) v3       N.A.\n other                        (80) v2&v3    403\
    \ Information Unavailable\n Table D.1 LDAPv2/v3 resultcodes to DAG/IP response\
    \ codes\n mapping\n DAG/IP                                   LDAP v2/v3\n ---------------------------------------\
    \  --------------------------\n 110 Too many hits                        sizeLimitExceeded\
    \ (4)\n 111 Requested constraint not supported   constraintViolation (19)\n 112\
    \ Requested constraint not fullfilled  constraintViolation (19)\n 200 Command\
    \ Ok                           Success (0)\n 201 Command Completed successfully\
    \       N.A.\n 203 Bye                                  N.A.\n 204 Overgeneralized\
    \                      N.A.\n 220 Service Ready                        N.A.\n\
    \ 226 Transaction complete                 N.A.\n 401 Service not available  \
    \              unavailable (52)\n 402 Search expression too complicated    unwillingToPerform\
    \ (53)\n 403 Information Unavailable              busy (51)\n 404 Time out   \
    \                          timeLimitExceeded (3)\n 405 Operations error      \
    \               operationsError (1)\n 500 Syntax error                       \
    \  protocolError (2)\n 502 Search expression too complicated    unwillingToPerform\
    \ (53)\n 503 Query to general                     unwillingToPerform (53)\n 505\
    \ Operations error                     operationsError (1)\n 600 <token>     \
    \                         N.A.\n 601 <token>                              N.A.\n\
    \ 601 DEF                                  N.A.\n 601 ANY                    \
    \              N.A.\n Table D.2 Mapping from DAG/IP response codes to LDAPv2/v3\
    \ resultcodes\n DAG/IP                                   Whois++\n --------------------------------------\
    \   -----------------------------\n 110 Too Many hits                        110\
    \ Too Many hits\n 111 Requested constraint not supported   111 Requested constraint\
    \ not\n                                              supported\n 112 Requested\
    \ constraint not fullfilled  112 Requested constraint not\n                  \
    \                            fullfilled\n 200 Command Ok                     \
    \      200 Command Ok\n 201 Command Completed successfully       201 Command Completed\n\
    \                                              successfully\n 401 Service not\
    \ available                401 Service not available\n 403 Information Unavailable\
    \              403 Information not available\n 404 Timeout                   \
    \           404 Timeout\n 405 Operations error                     405 Operations\
    \ error\n 500 Syntax error                         500 Syntax error\n 502 Search\
    \ expression too complicated    502 Search expression too\n                  \
    \                            complicated\n 503 Query to general              \
    \       506 Query to general\n 505 Operations error                     505 Operations\
    \ error\n Table D.3 Mapping between DAG/IP and Whois++ response codes\n"
- title: Appendix E - DAG CIP Usage
  contents:
  - 'Appendix E - DAG CIP Usage

    '
- title: E.1 CIP Index Object
  contents:
  - "E.1 CIP Index Object\n   The CIP object used by the DAG system is based on the\
    \ Tagged Index\n   Object as defined in [12].   The grammar, adapted from that\
    \ Work in\n   Progress, for the specific object used by the DAG is as follows:\n\
    \   index-object = 0*(io-part SEP) io-part\n   io-part      = header SEP schema-spec\
    \ SEP index-info\n   header       = version-spec SEP update-type SEP this-update\
    \ SEP\n                last-update context-size\n   version-spec = \"version:\"\
    \ *SPACE \"x-tagged-index-1\"\n   update-type  = \"updatetype:\" *SPACE ( \"total\"\
    \ |\n               ( \"incremental\" [*SPACE \"tagbased\"|\"uniqueIDbased\" ])\n\
    \   this-update  = \"thisupdate:\" *SPACE TIMESTAMP\n   last-update  = [ \"lastupdate:\"\
    \ *SPACE TIMESTAMP SEP]\n   context-size = [ \"contextsize:\" *SPACE 1*DIGIT SEP]\n\
    \   schema-spec  = \"BEGIN IO-Schema\" SEP 1*(schema-line SEP)\n             \
    \  \"END IO-Schema\"\n   schema-line  = attribute-name \":\" token-type\n   token-type\
    \   = \"TOKEN\"\n   index-info   = full-index | incremental-index\n   full-index\
    \   = \"BEGIN Index-Info\" SEP 1*(index-block SEP)\n               \"END Index-Info\"\
    \n   incremental-index = 1*(add-block | delete-block | update-block)\n   add-block\
    \    = \"BEGIN Add Block\" SEP 1*(index-block SEP)\n               \"END Add Block\"\
    \n   delete-block = \"BEGIN Delete Block\" SEP 1*(index-block SEP)\n         \
    \      \"END Delete Block\"\n   update-block = \"BEGIN Update Block\" SEP\n  \
    \             0*(old-index-block SEP)\n               1*(new-index-block SEP)\n\
    \                \"END Update Block\"\n   old-index-block = \"BEGIN Old\" SEP\
    \ 1*(index-block SEP)\n               \"END Old\"\n   new-index-block = \"BEGIN\
    \ New\" SEP 1*(index-block SEP)\n               \"END New\"\n   index-block  =\
    \ first-line 0*(SEP cont-line)\n   first-line   = attr-name \":\" *SPACE taglist\
    \ \"/\" attr-value\n   cont-line    = \"-\" taglist \"/\" attr-value\n   taglist\
    \      = tag 0*(\",\" tag) | \"*\"\n   tag          = 1*DIGIT [\"-\" 1*DIGIT]\n\
    \   attr-value   = 1*(UTF8)\n   attr-name    = dag-searchattr / \"objectclass\"\
    \n   dag-searchattr = \"FN\" / \"LOC\" / \"ROLE\" / \"ORG\"\n   TIMESTAMP    =\
    \ 1*DIGIT\n   NAMECHAR     = DIGIT | UPPER | LOWER | \"-\" | \";\" | \".\"\n \
    \  SPACE        = <ASCII space, %x20>;\n   SEP          = (CR LF) | LF\n   CR\
    \           = <ASCII CR, carriage return, %x0D>;\n   LF           = <ASCII LF,\
    \ line feed, %x0A>;\n   DIGIT        = \"0\" | \"1\" | \"2\" | \"3\" | \"4\" |\
    \ \"5\" | \"6\" | \"7\" |\n               \"8\" | \"9\"\n   UPPER        = \"\
    A\" | \"B\" | \"C\" | \"D\" | \"E\" | \"F\" | \"G\" | \"H\" |\n              \
    \ \"I\" | \"J\" | \"K\" | \"L\" | \"M\" | \"N\" | \"O\" | \"P\" |\n          \
    \     \"Q\" | \"R\" | \"S\" | \"T\" | \"U\" | \"V\" | \"W\" | \"X\" |\n      \
    \         \"Y\" | \"Z\"\n   LOWER        = \"a\" | \"b\" | \"c\" | \"d\" | \"\
    e\" | \"f\" | \"g\" | \"h\" |\n               \"i\" | \"j\" | \"k\" | \"l\" |\
    \ \"m\" | \"n\" | \"o\" | \"p\" |\n               \"q\" | \"r\" | \"s\" | \"t\"\
    \ | \"u\" | \"v\" | \"w\" | \"x\" |\n               \"y\" | \"z\"\n   US-ASCII-SAFE\
    \  = %x01-09 / %x0B-0C / %x0E-7F\n                ;; US-ASCII except CR, LF, NUL\n\
    \   UTF8           = US-ASCII-SAFE / UTF8-1 / UTF8-2 / UTF8-3\n              \
    \            / UTF8-4 / UTF8-5\n   UTF8-CONT      = %x80-BF\n   UTF8-1       \
    \  = %xC0-DF UTF8-CONT\n   UTF8-2         = %xE0-EF 2UTF8-CONT\n   UTF8-3    \
    \     = %xF0-F7 3UTF8-CONT\n   UTF8-4         = %xF8-FB 4UTF8-CONT\n   UTF8-5\
    \         = %xFC-FD 5UTF8-CONT\n   N.B.:  The only tokenization type permitted\
    \ is \"TOKEN\".  While the\n   Tagged Index Object memo permits the use of \"\
    FULL\" (i.e., the entire\n   value of the attribute is preserved as a single token),\
    \ that has the\n   danger of yielding a unique token for every record.  Studies\
    \ in the\n   growth of centroid sizes as a function of number of records (see\n\
    \   [14]) demonstrate that such unique tokens (e.g., phone numbers)  are\n   to\
    \ be avoided.  While storing tag information requires some number of\n   extra\
    \ bytes of storage per token index entry, using unique tokens\n   causes the number\
    \ of token entries in the index to continue to grow\n   linearly with the number\
    \ of records, thereby affecting search\n   efficiency.\n   Note also that tags\
    \ are to be applied to the data on a per entry\n   level.  Thus, if two index\
    \ lines in the same index object contain the\n   same tag, then it is always the\
    \ case that those two lines refer back\n   to the same \"record\" in the directory.\
    \  In LDAP terminology, the two\n   lines would refer back to the same directory\
    \ object.\n   Additionally if two index lines in the same index object contain\n\
    \   different tags, then it is always the case that those two lines refer\n  \
    \ back to different records in the directory.\n   The attribute \"objectclass\"\
    \ is used to denote the record/object types\n   in the data summarized in this\
    \ index object.\n   Values for the objectclass attribute should be restricted\
    \ to:\n   dagperson or dagrole, the two DAG schema object types.\n"
- title: E.2 CIP Index Object Creation
  contents:
  - "E.2 CIP Index Object Creation\n   WDSPs are expected to create index objects\
    \ following the general\n   principles outlined in the Whois++ protocol documentation\
    \ (creation\n   of centroids) and the Tagged Index Object documentation ([12]).\n\
    \   Following the syntax described above, the index object contains token\n  \
    \ information for each attribute in the DAGSchema:\n   - a list of all the unique\
    \ tokens (strings delimited by the specified\n     characters) that appear in\
    \ the WDSP database for the attribute\n   - for each token in that list, which\
    \ records the token appears in\n   So, for example,\n   Record #1:\n      FN:\
    \ Foo Bar\n      ORG: The Snack Bar\n   Record #2:\n       FN: Bar Smith\n   \
    \   ORG: Snack Shack\n   yields (conceptually) the following information for the\
    \ attribute FN:\n   Foo (1), Bar (1,2), Smith (2)\n   and the following information\
    \ for the attribute ORG:\n   The (1), Snack (1, 2), Bar (1), Shack (2)\n   Note\
    \ that the record numbers here are used simply as tags or virtual\n   record \
    \ identifiers to indicate when 2 tokens appear in the same\n   record.  The record\
    \ identifiers are not used for any part of any\n   query to the WDSP.\n   There\
    \ is some discussion as to whether the use of the same record tag\n   for all\
    \ attributes makes it too easy to \"decompile\" the index object;\n   i.e., reconstruct\
    \ a WDSPs data based on re-ordering the tokens\n   associated with each attribute\
    \ and tag number.  However, we are\n   dealing only with the search attributes\
    \ here, which is a minimal\n   subset of the quantity of data held by the WDSP.\
    \  The conclusion is\n   then that the improved efficiency given by using the\
    \ same tag numbers\n   across attributes outweighs the (remote) possibility of\
    \ information\n   reconstruction.\n   This would yield the index object:\n   version:\
    \ x-tagged-index-1\n   update-type: total\n   this-update: 855938804\n   last-update:\n\
    \   context-size:\n   BEGIN IO-Schema\n   objectclass: TOKEN\n   FN: TOKEN\n \
    \  ORG: TOKEN\n   END IO-Schema\n   BEGIN Index-Info\n   objectclass: */dagperson\n\
    \   FN: 1/Foo\n   -1,2/Bar\n    -2/Smith\n   ORG: 1/The\n   -1,2/Snack\n   -1/Bar\n\
    \   -2/Shack\n   End Index-Info\n      TISDAG: Within the project it has been\
    \ decided to base consistency\n      between updates on consistent tags.  This\
    \ means that if the\n      update-type is \"incremental\" the specifier must be\
    \ \"tagbased\".\n"
- title: E.3 CIP Index Object Sharing
  contents:
  - 'E.3 CIP Index Object Sharing

    '
- title: E.3.1 Registration of Servers
  contents:
  - "E.3.1 Registration of Servers\n   It is beyond the scope of this document to\
    \ define how WDSP servers\n   shall be registered with the DAG Referral Index.\
    \  Such a procedure\n   must be defined, and the following information established\
    \ for each\n   WDSP dataset (adapted from the Tagged Index Object specification,\n\
    \   [12]):\n   dsi: An OID which uniquely identifies the subtree and scope of\
    \ the\n     dataset for which the index object is created.\n   base-uri: One or\
    \ more URI's which will form the base of any referrals\n     created based upon\
    \ the index object that is governed by this\n     agreement.  For example, for\
    \ LDAP the base-uri would specify (among\n     other items): the LDAP host,  the\
    \ base object to which this index\n     object refers (e.g., c=SE), and the scope\
    \ of the index object\n     (e.g., single container).\n   supplier: The hostname\
    \ and listening port number of the supplier\n     server, as well as any alternative\
    \ servers holding that same naming\n     contexts, in case the supplier is unavailable.\n\
    \   source-uri: The URI of the WDSP's preferred source of directory\n     service\
    \ information.  This might be, for instance, an HTTP-based\n     service.\n  \
    \ consumeraddr: This is a URI of the \"mailto:\" form, with the RFC 822\n    \
    \ email address of the consumer server.\n   updateinterval: The maximum duration\
    \ in seconds between occurrences\n     of the supplier server generating an update.\
    \  If the consumer\n     server has not received an update from the supplier server\
    \ after\n     waiting this long since the previous update, it is likely that the\n\
    \     index information is now out of date.  A typical value for a server\n  \
    \   with frequent updates would be 604800 seconds, or every week.\n   attributeNamespace:\
    \ Every set of index servers that together wants to\n     support a specific usage\
    \ of indices, has to agree on which\n     attributenames to use in the index objects.\
    \  The participating\n     directory servers also has to agree on the mapping\
    \ from local\n     attributenames to the attributenames used in the index.  Since\
    \ one\n     specific index server might be involved in several such sets, it\n\
    \     has to have some way to connect a update to the proper set of\n     indexes.\
    \  One possible solution to this would be to use different\n     DSIs.\n   consistencybase:\
    \ How consistency of the index is maintained over\n     incremental updates:\n\
    \     complete - every change or delete concerning one object has to\n       contain\
    \ all tokens connected to that object.  This method must be\n       supported\
    \ by any server who wants to comply with this standard\n      tagbased - starting\
    \ at a full update every incremental update\n       referring back to this full\
    \ updated has to maintain state-\n       information regarding tags, such that\
    \ a object within the\n       original database is assigned the same tagnumber\
    \ every time.\n       This method is optional.\n     uniqueID - every object in\
    \ the Dataset has to have a unique value\n       for a specific attribute in the\
    \ index.  A example of such a\n       attribute could be the distinguishedName\
    \ attribute.  This method\n       is also optional.\n   securityoption: Whether\
    \ and how the supplier server should sign and\n     encrypt the update before\
    \ sending it to the consumer server.\n     Options for this version of the DAG\
    \ service are \"none\": the update\n     is sent in plaintext \"PGP/MIME\": the\
    \ update is digitally signed and\n     encrypted using PGP  (see [7]).  PGP/MIME\
    \ is recommended.\n   security credentials: The long-term cryptographic credentials\
    \ used\n     for key exchange and authentication of the consumer and supplier\n\
    \     servers, if a security option was selected.  For \"PGP/MIME\", this\n  \
    \   will be the trusted public keys of both servers.\n"
- title: E.3.2 Transmission of Objects
  contents:
  - "E.3.2 Transmission of Objects\n   CIP Index Objects are sent to the DAG Referral\
    \ Index by MIME-encoded\n   SMTP, following the Common Indexing Protocol specification\
    \ (see [2]\n   and [3]).\n"
- title: Appendix F - Summary of Technical Survey Results
  contents:
  - "Appendix F - Summary of Technical Survey Results\n   As part of the TISDAG project,\
    \ a technical survey was carried out --\n   announced on the tisdag@swip.net mailing\
    \ list, all Swedish WDSPs (and\n   potential WDSPs) were encouraged to fill out\
    \ and submit the WWW-based\n   survey form (see http://tisdag.sunet.se/tisdag-survey.html).\n\
    \   The survey was carried out in May, 1997.  Response was not as good as\n  \
    \ had been hoped -- in the end, 5 WDSPs participated.  We had hoped for\n   more\
    \ responses than this, in order to have a concrete sense of\n   directory service\
    \ providers' current and planned status.  However,\n   informal \"hallway\" conversations\
    \ with a few people at\n   Interoperabilitet'97 in Sollentuna suggest that, while\
    \ people see the\n   TISDAG project as an important and timely step, they don't\n\
    \   necessarily have an immediate understanding of how it will impact\n   them,\
    \ and what they can/should contribute.  So, the results can be\n   seen as informational,\
    \ though not a definitive statement of the whole\n   directory service picture\
    \ in Sweden.\n   Interesting things to note from these results include the fact\
    \ that,\n   although there were only 5 respondents, these are clearly significant\n\
    \   players -- 4 expect to have more than 100 000 records to contribute\n   by\
    \ 12 months from now.  There were no real surprises in terms of the\n   supported\
    \ protocols or search types.\n   Table E.1 summarizes information from the survey\
    \ concerning types of\n   queries currently supported by WDSPs, and planned for\
    \ the next 12\n   months.  Note that, at the time of the survey, the requirement\
    \ of\n   searching by ROLE had not been proposed, so the survey did not\n   specifically\
    \ ask if WDSPs supported both the DAGPERSON schema\n   protocol-equivalents (i.e.,\
    \ USER template in Whois++ and\n   inetorgperson objectclass in LDAP).  In the\
    \ table, the column\n   \"Complete info?\" describes whether or not the WDSP currently\
    \ returns\n   at least as much information as is required for a DAG reply.\n"
- title: Resp  Search Types  Complete info?  Access Protocols  Access Protocols
  contents:
  - "Resp  Search Types  Complete info?  Access Protocols  Access Protocols\n    \
    \                                (now)             (12 months)\n"
- title: '----  ------------  --------------  ----------------  ----------------'
  contents:
  - '----  ------------  --------------  ----------------  ----------------

    '
- title: 1       NOL         Except ROLE     Whois++           Whois++
  contents:
  - '1       NOL         Except ROLE     Whois++           Whois++

    '
- title: 2     N,NO,NL,NOL   Except ROLE     LDAPv2,DAP,PH,    LDAPv2,LDAPv3,DAP,
  contents:
  - "2     N,NO,NL,NOL   Except ROLE     LDAPv2,DAP,PH,    LDAPv2,LDAPv3,DAP,\n  \
    \                                  HTTP,Gopher       PH,HTTP,Gopher\n"
- title: 3     N,NL,NOL      Except ROLE     LDAPv2,DAP,HTTP   LDAPv2,LDAPv3,DAP,
  contents:
  - "3     N,NL,NOL      Except ROLE     LDAPv2,DAP,HTTP   LDAPv2,LDAPv3,DAP,\n  \
    \                                                    HTTP\n"
- title: 4     N,NO,NL,NOL   Except ROLE     Whois++,HTTP      LDAPv3,Whois++,
  contents:
  - "4     N,NO,NL,NOL   Except ROLE     Whois++,HTTP      LDAPv3,Whois++,\n     \
    \                                                 HTTP,E-mail\n"
- title: 5     N,NO,NL,NOL   Except ROLE     LDAPv2,Whois      LDAPv2,LDAPv3,
  contents:
  - "5     N,NO,NL,NOL   Except ROLE     LDAPv2,Whois      LDAPv2,LDAPv3,\n      \
    \                              Whois++,HTTP      Whois,Whois++,PH,\n         \
    \                                             Finger,HTTP\n      Table F.1 Summary\
    \ of TISDAG Survey Results: Queries\n   Resp   # of Records (now)   # of Records\
    \ (12 months)  Character Sets\n   -----  ------------------   ------------------------\
    \  --------------\n   1      94 280               120 000 - 130 000         ISO-8859-1\n\
    \   2      88 000               100 000                   ISO-8859-1\n   3   \
    \   N/A                  100 000                   T.61 (Telex)\n   4      150\
    \ 000              250 000                   ISO-8859-1\n                    \
    \                                     UTF-8 UNICODE\n   5      4 300         \
    \       10 000                    ISO-8859-1\n   Table F.2 Summary of TISDAG Survey\
    \ Results: Operational Information\n"
- title: Appendix G - Useful References
  contents:
  - "Appendix G - Useful References\n   N.B.:  The following is a collection of Internet\
    \ standards documents\n   (RFCs) and Internet-Drafts from which the material in\
    \ this report was\n   drawn.  Internet-Drafts are works-in-progress, and are not\
    \ meant to\n   be cited.  Where they are used in this document, references are\
    \ to\n   the text contained in the Internet-Draft; i.e., they are not meant to\n\
    \   imply standards, so much as useful starting points for the work of\n   this\
    \ project.\n   Electronic copies of the version of the Internet-Drafts documents\n\
    \   that were used in preparing this report are available from the\n   project\
    \ web page, http://tisdag.sunet.se.\n"
- title: Bibliography
  contents:
  - "Bibliography\n   [1]  Allen, J. and M. Mealling, \"The Architecture of the Common\n\
    \        Indexing Protocol\", RFC 2651, August 1999.\n   [2]  Allen, J. and M.\
    \ Mealing, \"MIME Object Definitions for the\n        Common Indexing Protocol\
    \ (CIP)\", RFC 2652, August 1999.\n   [3]  Allen, J. and P. Leach, \"CIP Transport\
    \ Protocols\", RFC 2653,\n        August 1999.\n   [4]  Crocker, D., \"Standard\
    \ for the Format of ARPA Internet Text\n        Messages\", STD 11, RFC 822, August\
    \ 1982.\n   [5]  Crocker, D., \"Augmented BNF for Syntax Specifications: ABNF\"\
    ,\n        RFC 2234, November 1997.\n   [6]  Deutsch, P., Schoultz, R., Falstrom,\
    \ P. and C. Weider,\n        \"Architecture of the WHOIS++ Service\", RFC 1835,\
    \ July 1995.\n   [7]  Elkins, M., \"MIME Security with Pretty Good Privacy (PGP)\"\
    , RFC\n        2015, October 1996.\n   [8]  Patrik Faltstrom, Martin Hamilton,\
    \ Leslie L. Daigle, \"WHOIS++\n        templates\", Work in Progress.\n   [9]\
    \  Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n        Extensions\
    \ (MIME) Part One: Format of Interent Message Bodies\",\n        RFC 2045, November\
    \ 1996.\n   [10] Freed, N. and N. Borenstein, \"Multipurpose Internet Mail\n \
    \       Extensions (MIME) Part Two: Media Types\", RFC 2046, November\n      \
    \  1996.\n   [11] Good, G., \"The LDAP Data Interchange Format (LDIF) - Technical\n\
    \        Specification\", RFC 2849, June 2000.\n   [12] Hedberg, R., Greenblatt,\
    \ B., Moats, R. and M. Wahl, \"A Tagged\n        Index Object for use in the Common\
    \ Indexing Protocol\", RFC 2654,\n        August 1999.\n   [13] Howes, R., \"\
    A String Representation of LDAP Search Filters\", RFC\n        1960, June 1996.\n\
    \   [14] Paul Panotzki, \"Complexity of the Common Indexing Protocol:\n      \
    \  Predicting Search Times in Index Server Meshes\",  Master's\n        Thesis,\
    \ KTH, September 1996.\n   [15] Postel, J., \"Simple Mail Transfer Protocol\"\
    , STD 10, RFC 821,\n        August 1982.\n   [16] Smith, M., \"Definition of the\
    \ inetOrgPerson Object Class\", RFC\n        2798, April 2000.\n   [17] Wahl,\
    \ M., Howes, T. and S. Kille, \"Lightweight Directory Access\n        Protocol\
    \ (v3)\", RFC 2251, December 1997.\n   [18] Wahl, M., \"A summary of the X.500(96)\
    \ User Schema for use with\n        LDAPv3\", RFC 2256, December 1997.\n   [19]\
    \ Yeong, W., Howes, T. and S. Kille, \"Lightweight Directory Access\n        Protocol\"\
    , RFC 1777, March 1995.\n   [20] Yergeau, F., \"UTF-8, a transformation format\
    \ of ISO 10646\", RFC\n        2279, January 1998.\n   [21] The Unicode Consortium,\
    \ \"The Unicode Standard -- Version 2.0\",\n        Addison-Wesley, 1996.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Leslie L. Daigle\n   Thinking Cat Enterprises\n   EMail:\
    \ leslie@thinkingcat.com\n   Roland Hedberg\n   Catalogix\n   Jegerveien 25\n\
    \   0777 Oslo\n   Norway\n   Phone: +47 23 08 29 96\n   EMail: Roland@catalogix.se\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2000).  All\
    \ Rights Reserved.\n   This document and translations of it may be copied and\
    \ furnished to\n   others, and derivative works that comment on or otherwise explain\
    \ it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
