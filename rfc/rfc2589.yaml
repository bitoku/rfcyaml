- title: __initial_text__
  contents:
  - "              Lightweight Directory Access Protocol (v3):\n               Extensions\
    \ for Dynamic Directory Services\n"
- title: Status of this Memo
  contents:
  - "Status of this Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (1999).  All Rights Reserved.\n"
- title: 1.  Abstract
  contents:
  - "1.  Abstract\n   This document defines the requirements for dynamic directory\
    \ services\n   and specifies the format of request and response extended operations\n\
    \   for supporting client-server interoperation in a dynamic directories\n   environment.\n\
    \   The Lightweight Directory Access Protocol (LDAP) [1] supports\n   lightweight\
    \ access to static directory services, allowing relatively\n   fast search and\
    \ update access.  Static directory services store\n   information about people\
    \ that persists in its accuracy and value over\n   a long period of time.\n  \
    \ Dynamic directory services are different in that they store\n   information\
    \ that only persists in its accuracy and value when it is\n   being periodically\
    \ refreshed.  This information is stored as dynamic\n   entries in the directory.\
    \  A typical use will be a client or a person\n   that is either online - in which\
    \ case it has an entry in the\n   directory, or is offline - in which case its\
    \ entry disappears from\n   the directory.  Though the protocol operations and\
    \ attributes used by\n   dynamic directory services are similar to the ones used\
    \ for static\n   directory services, clients that store dynamic information in\
    \ the\n   directory need to periodically refresh this information, in order to\n\
    \   prevent it from disappearing.  If dynamic entries are not refreshed\n   within\
    \ a given timeout, they will be removed from the directory.  For\n   example,\
    \ this will happen if the client that set them goes offline.\n   A flow control\
    \ mechanism from the server is also described that\n   allows a server to inform\
    \ clients how often they should refresh their\n   presence.\n"
- title: 2. Requirements
  contents:
  - "2. Requirements\n   The protocol extensions must allow accessing dynamic information\
    \ in a\n   directory in a standard LDAP manner, to allow clients to access\n \
    \  static and dynamic information in the same way.\n   By definition, dynamic\
    \ entries are not persistent and clients may go\n   away gracefully or not.  The\
    \ proposed extensions must offer a way for\n   a server to tell if entries are\
    \ still valid, and to do this in a way\n   that is scalable.  There also must\
    \ be a mechanism for clients to\n   reestablish their entry with the server.\n\
    \   There must be a way for clients to find out, in a standard LDAP\n   manner,\
    \ if servers support the dynamic extensions.\n   Finally, to allow clients to\
    \ broadly use the dynamic extensions, the\n   extensions need to be registered\
    \ as standard LDAP extended\n   operations.\n"
- title: 3. Description of Approach
  contents:
  - "3. Description of Approach\n   The Lightweight Directory Access Protocol (LDAP)\
    \ [1] permits\n   additional operation requests and responses to be added to the\n\
    \   protocol.  This proposal takes advantage of these to support\n   directories\
    \ which contain dynamic information in a manner which is\n   fully integrated\
    \ with LDAP.\n   The approach described in this proposal defines dynamic entries\
    \ in\n   order to allow implementing directories with dynamic information.  An\n\
    \   implementation of dynamic directories, must be able to support\n   dynamic\
    \ directory entries.\n"
- title: 3.1. Dynamic Entries and the dynamicObject object class
  contents:
  - "3.1. Dynamic Entries and the dynamicObject object class\n   A dynamic entry is\
    \ an object in the directory tree which has a time-\n   to-live associated with\
    \ it.  This time-to-live is set when the entry\n   is created.  The time-to-live\
    \ is automatically decremented, and when\n   it expires the dynamic entry disappears.\
    \  By invoking the refresh\n   extended operation (defined below) to re-set the\
    \ time-to-live, a\n   client can cause the entry to remain present a while longer.\n\
    \   A dynamic entry is created by including the objectClass value given\n   in\
    \ section 5 in the list of attributes when adding an entry.  This\n   method is\
    \ subject to standard access control restrictions.\n   The extended operation\
    \ covered here, allows a client to refresh a\n   dynamic entry by invoking, at\
    \ intervals, refresh operations\n   containing that entry's name.  Dynamic entries\
    \ will be treated the\n   same as non-dynamic entries when processing search,\
    \ compare, add,\n   delete, modify and modifyDN operations.  However if clients\
    \ stop\n   sending refresh operations for an entry, then the server will\n   automatically\
    \ and without notification remove that entry from the\n   directory.  This removal\
    \ will be treated the same as if the entry had\n   been deleted by an LDAP protocol\
    \ operation.\n   There is no way to change a static entry into a dynamic one and\n\
    \   vice-versa.  If the client is using Modify with an objectClass of\n   dynamicObject\
    \ on a static entry, the server must return a service\n   error either \"objectClassModsProhibited\"\
    \ (if the server does not\n   allow objectClass modifications at all) or \"objectClassViolation\"\
    \ (if\n   the server does allow objectClass modifications in general).\n   A dynamic\
    \ entry may be removed by the client using the delete\n   operation.  This operation\
    \ will be subject to access control\n   restrictions.\n   A non-dynamic entry\
    \ cannot be added subordinate to a dynamic entry:\n   the server must return an\
    \ appropriate update or service error if this\n   is attempted.\n   The support\
    \ of dynamic attributes of an otherwise static object, are\n   outside the scope\
    \ of this document.\n"
- title: 3.2 Dynamic meetings (conferences)
  contents:
  - "3.2 Dynamic meetings (conferences)\n   The way dynamicObject is defined, it has\
    \ a time-to-live associated\n   with it, and that's about it.  Though the most\
    \ common dynamic object\n   is a person object, there is no specific type associated\
    \ with the\n   dynamicObject as defined here.  By the use of the dynamic object's\n\
    \   attributes, one can make this object represent practically anything.\n   Specifically,\
    \ Meetings (conferences) can be represented by dynamic\n   objects.  While full-featured\
    \ meeting support requires special\n   semantics and handling by the server (and\
    \ is not in the scope of this\n   document), the extensions described here, provide\
    \ basic meetings\n   support.  A meeting object can be refreshed by the meeting\n\
    \   participants, and when it is not, the meeting entry disappears.  The\n   one\
    \ meeting type that is naturally supported by the dynamic\n   extensions is creator-owned\
    \ meeting.\n"
- title: 3.2.1 Creator-owned meetings
  contents:
  - "3.2.1 Creator-owned meetings\n   Creator-owned meetings are created by a client\
    \ that sets the time-\n   to-live attribute for the entry, and it is this client's\n\
    \   responsibility to refresh the meeting entry, so that it will not\n   disappear.\
    \  Others might join the meeting, by modifying the\n   appropriate attribute,\
    \ but they are not allowed to refresh the entry.\n   When the client that created\
    \ the entry goes away, it can delete the\n   meeting entry, or it might disappear\
    \ when its time-to-live expires.\n   This is consistent with the common model\
    \ for dynamicObject as\n   described above.\n"
- title: 4. Protocol Additions
  contents:
  - '4. Protocol Additions

    '
- title: 4.1 Refresh Request
  contents:
  - "4.1 Refresh Request\n   Refresh is a protocol operation sent by a client to tell\
    \ the server\n   that the client is still alive and the dynamic directory entry\
    \ is\n   still accurate and valuable.  The client sends a Refresh request\n  \
    \ periodically based on the value of the client refresh period (CRP).\n   The\
    \ server can request that the client change this value.  As long as\n   the server\
    \ receives a Refresh request within the timeout period, the\n   directory entry\
    \ is guaranteed to persist on the server.  Client\n   implementers should be aware\
    \ that since the intervening network\n   between the client and server is unreliable,\
    \ a Refresh request packet\n   may be delayed or lost while in transit.  If this\
    \ occurs, the entry\n   may disappear, and the client will need to detect this\
    \ and re-add the\n   entry.\n   A client may request this operation by transmitting\
    \ an LDAP PDU\n   containing an ExtendedRequest.  An LDAP ExtendedRequest is defined\
    \ as\n   follows:\n         ExtendedRequest ::= [APPLICATION 23] SEQUENCE {\n\
    \                 requestName             [0] LDAPOID,\n                 requestValue\
    \            [1] OCTET STRING OPTIONAL }\n   The requestName field must be set\
    \ to the string\n   \"1.3.6.1.4.1.1466.101.119.1\".\n   The requestValue field\
    \ will contain as a value the DER-encoding of\n   the following ASN.1 data type:\n\
    \        SEQUENCE {\n                entryName  [0] LDAPDN,\n                requestTtl\
    \ [1] INTEGER\n        }\n   The entryName field is the UTF-8 string representation\
    \ of the name of\n   the dynamic entry [3].  This entry must already exist.\n\
    \   The requestTtl is a time in seconds (between 1 and 31557600) that the\n  \
    \ client requests that the entry exists in the directory before being\n   automatically\
    \ removed.  Servers are not required to accept this value\n   and might return\
    \ a different TTL value to the client.  Clients must\n   be able to use this server-dictated\
    \ value as their CRP.\n"
- title: 4.2 Refresh Response
  contents:
  - "4.2 Refresh Response\n   If a server implements this extension, then when the\
    \ request is made\n   it will return an LDAP PDU containing an ExtendedResponse.\
    \  An LDAP\n   ExtendedResponse is defined as follows:\n       ExtendedResponse\
    \ ::= [APPLICATION 24] SEQUENCE {\n               COMPONENTS OF LDAPResult,\n\
    \               responseName     [10] LDAPOID OPTIONAL,\n               response\
    \         [11] OCTET STRING OPTIONAL }\n   The responseName field contains the\
    \ same string as that present in\n   the request.\n   The response field will\
    \ contain as a value the DER-encoding of the\n   following ASN.1 data type:\n\
    \        SEQUENCE {\n                responseTtl [1] INTEGER\n        }\n   The\
    \ responseTtl field is the time in seconds which the server chooses\n   to have\
    \ as the time-to-live field for that entry.  It must not be any\n   smaller than\
    \ that which the client requested, and it may be larger.\n   However, to allow\
    \ servers to maintain a relatively accurate\n   directory, and to prevent clients\
    \ from abusing the dynamic\n   extensions, servers are permitted to shorten a\
    \ client-requested\n   time-to-live value, down to a minimum of 86400 seconds\
    \ (one day).\n   If the operation was successful, the errorCode field in the\n\
    \   standardResponse part of an ExtendedResponse will be set to success.\n   In\
    \ case of an error, the responseTtl field will have the value 0, and\n   the errorCode\
    \ field will contain an appropriate value, as follows: If\n   the entry named\
    \ by entryName could not be located, the errorCode\n   field will contain \"noSuchObject\"\
    .  If the entry is not dynamic, the\n   errorCode field will contain \"objectClassViolation\"\
    .  If the\n   requester does not have permission to refresh the entry, the\n \
    \  errorCode field will contain \"insufficientAccessRights\".  If the\n   requestTtl\
    \ field is too large, the errorCode field will contain\n   \"sizeLimitExceeded\"\
    .\n   If a server does not implement this extension, it will return an LDAP\n\
    \   PDU containing an ExtendedResponse, which contains only the\n   standardResponse\
    \ element (the responseName and response elements will\n   be absent).  The LDAPResult\
    \ element will indicate the protocolError\n   result code.\n   This request is\
    \ permitted to be invoked when LDAP is carried by a\n   connectionless transport.\n\
    \   When using a connection-oriented transport, there is no requirement\n   that\
    \ this operation be on the same particular connection as any\n   other.  A client\
    \ may open multiple connections, or close and then\n   reopen a connection.\n"
- title: 4.3 X.500/DAP Modify(97)
  contents:
  - "4.3 X.500/DAP Modify(97)\n   X.500/DAP servers can map the Refresh request and\
    \ response operations\n   into the X.500/DAP Modify(97) operation.\n"
- title: 5. Schema Additions
  contents:
  - "5. Schema Additions\n   All dynamic entries must have the dynamicObject value\
    \ in their\n   objectClass attribute.  This object class is defined as follows\n\
    \   (using the ObjectClassDescription notation of [2]):\n   ( 1.3.6.1.4.1.1466.101.119.2\
    \ NAME 'dynamicObject'\n     DESC 'This class, if present in an entry, indicates\
    \ that this entry\n           has a limited lifetime and may disappear automatically\
    \ when\n           its time-to-live has reached 0.  There are no mandatory\n \
    \          attributes of this class, however if the client has not\n         \
    \  supplied a value for the entryTtl attribute, the server will\n           provide\
    \ one.'\n     SUP top AUXILIARY )\n   Furthermore, the dynamic entry must have\
    \ the following operational\n   attribute.  It is described using the AttributeTypeDescription\n\
    \   notation of [2]:\n   ( 1.3.6.1.4.1.1466.101.119.3 NAME 'entryTtl'\n     DESC\
    \ 'This operational attribute is maintained by the server and\n           appears\
    \ to be present in every dynamic entry.  The attribute\n           is not present\
    \ when the entry does not contain the\n           dynamicObject object class.\
    \ The value of this attribute is\n           the time in seconds that the entry\
    \ will continue to exist\n           before disappearing from the directory. \
    \ In the absence of\n           intervening refresh operations, the values returned\
    \ by\n           reading the attribute in two successive searches are\n      \
    \     guaranteed to be nonincreasing.  The smallest permissible\n           value\
    \ is 0, indicating that the entry may disappear without\n           warning. \
    \ The attribute is marked NO-USER-MODIFICATION since\n           it may only be\
    \ changed using the refresh operation.'\n     SYNTAX 1.3.6.1.4.1.1466.115.121.1.27\
    \ SINGLE-VALUE\n     NO-USER-MODIFICATION USAGE dSAOperation )\n   To allow servers\
    \ to support dynamic entries in only a part of the\n   DIT, the following operational\
    \ attribute is defined.   It is\n   described using the AttributeTypeDescription\
    \ notation of [2]:\n   ( 1.3.6.1.4.1.1466.101.119.4 NAME 'dynamicSubtrees'\n \
    \    DESC 'This operational attribute is maintained by the server and is\n   \
    \        present in the Root DSE, if the server supports the dynamic\n       \
    \    extensions described in this memo. The attribute contains a\n           list\
    \ of all the subtrees in this directory for which the\n           server supports\
    \ the dynamic extensions.'\n     SYNTAX 1.3.6.1.4.1.1466.115.121.1.12 NO-USER-MODIFICATION\n\
    \     USAGE dSAOperation )\n"
- title: 6. Client and Server Requirements
  contents:
  - '6. Client and Server Requirements

    '
- title: 6.1 Client Requirements
  contents:
  - "6.1 Client Requirements\n   Clients can find out if a server supports the dynamic\
    \ extensions by\n   checking the supportedExtension field in the root DSE, to\
    \ see if the\n   OBJECT IDENTIFIER described in section 4 is present. Since servers\n\
    \   may select to support the dynamic extensions in only some of the\n   subtrees\
    \ of the DIT, clients must check the dynamicSubtrees\n   operational attribute\
    \ in the root DSE to find out if the dynamic\n   extensions are supported on a\
    \ specific subtree.\n   Once a dynamic entry has been created, clients are responsible\
    \ for\n   invoking the refresh extended operation, in order to keep that entry\n\
    \   present in the directory.\n   Clients must not expect that a dynamic entry\
    \ will be present in the\n   DIT after it has timed out, however it must not require\
    \ that the\n   server remove the entry immediately (some servers may only process\n\
    \   timing out entries at intervals).  If the client wishes to ensure the\n  \
    \ entry does not exist it should issue a RemoveRequest for that entry.\n   Initially,\
    \ a client needs to know how often it should send refresh\n   requests to the\
    \ server.  This value is defined as the CRP (Client\n   Refresh Period) and is\
    \ set by the server based on the entryTtl.\n   Since the LDAP AddRequest operation\
    \ is left unchanged and is not\n   modified in this proposal to return this value,\
    \ a client must issue a\n   Refresh extended operation immediately after an Add\
    \ that created a\n   dynamic entry.  The Refresh Response will return the CRP\
    \ (in\n   responseTtl) to the client.\n   Clients must not issue the refresh request\
    \ for dynamic entries which\n   they have not created.  If an anonymous client\
    \ attempts to do so, a\n   server is permitted to return insufficientAccessRights\
    \ (50) in the\n   RefreshResponse, enforcing the client to bind first. Please\
    \ note that\n   servers which allow anonymous clients to create and refresh dynamic\n\
    \   entries will not be able to enforce the above.\n   Clients should always be\
    \ ready to handle the case in which their\n   entry timed out.  In such a case,\
    \ the Refresh operation will fail\n   with an error code such as noSuchObject,\
    \ and the client is expected\n   to re-create its entry.\n   Clients should be\
    \ prepared to experience refresh operations failing\n   with protocolError, even\
    \ though the add and any previous refresh\n   requests succeeded.  This might\
    \ happen if a proxy between the client\n   and the server goes down, and another\
    \ proxy is used which does not\n   support the Refresh extended operation.\n"
- title: 6.2 Server Requirements
  contents:
  - "6.2 Server Requirements\n   Servers are responsible for removing dynamic entries\
    \ when they time\n   out.  Servers are not required to do this immediately.\n\
    \   Servers must enforce the structural rules listed in above section 3.\n   Servers\
    \ must ensure that the operational attribute described in\n   section 5 is present\
    \ in dynamic entries\n   Servers may permit anonymous users to refresh entries.\
    \ However, to\n   eliminate the possibility of a malicious use of the Refresh\n\
    \   operation, servers may require the refreshing client to bind first. A\n  \
    \ server implementation can achieve this by presenting ACLs on the\n   entryTtl\
    \ attribute, and returning insufficientAccessRights (50) in\n   the RefreshResponse,\
    \ if the client is not allowed to refresh the\n   entry. Doing this, though, might\
    \ have performance implications on the\n   server and might impact the server's\
    \ scalability.\n   Servers may require that a client which attempts to create\
    \ a dynamic\n   entry have a remove permission for that entry.\n   Servers which\
    \ implement the dynamic extensions must have the OBJECT\n   IDENTIFIER, described\
    \ above in section 4 for the request and\n   response, present as a value of the\
    \ supportedExtension field in the\n   root DSE.  They must also have as values\
    \ in the attributeTypes and\n   objectClasses attributes of their subschema subentries,\
    \ the\n   AttributeTypeDescription and ObjectClassDescription from section 5.\n\
    \   Servers can limit the support of the dynamic extensions to only some\n   of\
    \ the subtrees in the DIT. Servers indicate for which subtrees they\n   support\
    \ the extensions, by specifying the OIDs for the supported\n   subtrees in the\
    \ dynamicSubtrees attribute described in section 5. If\n   a server supports the\
    \ dynamic extensions for all naming contexts it\n   holds, the dynamicSubtrees\
    \ attribute may be absent.\n"
- title: 7. Implementation issues
  contents:
  - '7. Implementation issues

    '
- title: 7.1 Storage of dynamic information
  contents:
  - "7.1 Storage of dynamic information\n   Dynamic information is expected to change\
    \ very often.  In addition,\n   Refresh requests are expected to arrive at the\
    \ server very often.\n   Disk-based databases that static directory services often\
    \ use are\n   likely inappropriate for storing dynamic information.  We recommend\n\
    \   that server implementations store dynamic entries in memory\n   sufficient\
    \ to avoid paging.  This is not a requirement.\n   We expect LDAP servers to be\
    \ able to store static and dynamic\n   entries.  If an LDAP server does not support\
    \ dynamic entries, it\n   should respond with an error code such as objectClassViolation.\n"
- title: 7.2 Client refresh behavior
  contents:
  - "7.2 Client refresh behavior\n   In some cases, the client might not get a Refresh\
    \ response.  This may\n   happen as a result of a server crash after receiving\
    \ the Refresh\n   request, the TCP/IP socket timing out in the connection case,\
    \ or the\n   UDP packet getting lost in the connection-less case.\n   It is recommended\
    \ that in such a case, the client will retry the\n   Refresh operation immediately,\
    \ and if this Refresh request does not\n   get a response as well, it will resort\
    \ to its original Refresh cycle,\n   i.e.  send a Refresh request at its Client\
    \ Refresh Period (CRP).\n"
- title: 7.3 Configuration of refresh times
  contents:
  - "7.3 Configuration of refresh times\n   We recommend that servers will provide\
    \ administrators with the\n   ability to configure the default client refresh\
    \ period (CRP), and\n   also a minimum and maximum CRP values. This, together\
    \ with allowing\n   administrators to request that the server will not change\
    \ the CRP\n   dynamically, will allow administrators to set CRP values which will\n\
    \   enforce a low refresh traffic, or - on the other extreme, an highly\n   up-to-date\
    \ directory.\n"
- title: 8. Replication
  contents:
  - "8. Replication\n   Replication is only partially addressed in this memo. There\
    \ is a\n   separate effort in progress at the IETF on replication of static and\n\
    \   dynamic directories.\n   it is allowed to replicate a dynamic entry or a static\
    \ entry with\n   dynamic attributes. Since the entryTtl is expressed as a relative\n\
    \   time (how many seconds till the entry will expire), replicating it\n   means\
    \ that the replicated entry will be \"off\" by the replication\n   time.\n"
- title: 9. Localization
  contents:
  - "9. Localization\n   The are no localization issues for this extended operation.\n"
- title: 10. Security Considerations
  contents:
  - "10. Security Considerations\n   Standard LDAP security rules and support apply\
    \ for the extensions\n   described in this document, and there are no special\
    \ security issues\n   for these extensions. Please note, though, that servers\
    \ may permit\n   anonymous clients to refresh entries which they did not create.\n\
    \   Servers are also permitted to control a refresh access to an entry by\n  \
    \ requiring clients to bind before issuing a RefreshRequest. This will\n   have\
    \ implications on the server performance and scalability.\n   Also, Care should\
    \ be taken in making use of information obtained from\n   directory servers that\
    \ has been supplied by client, as it may now be\n   out of date.  In many networks,\
    \ for example, IP addresses are\n   automatically assigned when a host connects\
    \ to the network, and may\n   be reassigned if that host later disconnects.  An\
    \ IP address obtained\n   from the directory may no longer be assigned to the\
    \ host that placed\n   the address in the directory.  This issue is not specific\
    \ to LDAP or\n   dynamic directories.\n"
- title: 11. Acknowledgments
  contents:
  - "11. Acknowledgments\n   Design ideas included in this document are based on those\
    \ discussed\n   in ASID and other IETF Working Groups.\n"
- title: 12. Authors' Addresses
  contents:
  - "12. Authors' Addresses\n   Yoram Yaacovi\n   Microsoft\n   One Microsoft way\n\
    \   Redmond, WA 98052\n   USA\n   Phone:  +1 206-936-9629\n   EMail:  yoramy@microsoft.com\n\
    \   Mark Wahl\n   Innosoft International, Inc.\n   8911 Capital of Texas Hwy #4140\n\
    \   Austin, TX 78759\n   USA\n   Email: M.Wahl@innosoft.com\n   Tony Genovese\n\
    \   Microsoft\n   One Microsoft way\n   Redmond, WA 98052\n   USA\n   Phone: \
    \ +1 206-703-0852\n   EMail:  tonyg@microsoft.com\n"
- title: 13. Bibliography
  contents:
  - "13. Bibliography\n   [1] Wahl, M., Howes, T. and S. Kille, \"Lightweight Directory\
    \ Access\n       Protocol (Version 3)\", RFC 2251, December 1997.\n   [2] Wahl,\
    \ M. Coulbeck, A., Howes, T. and S. Kille, \"Lightweight\n       Directory Access\
    \ Protocol (v3): Attribute Syntax Definitions\",\n       RFC 2252, December 1997.\n\
    \   [3] Wahl, M. and S. Kille, \"Lightweight Directory Access Protocol\n     \
    \  (v3): UTF-8 String Representation of Distinguished Names\", RFC\n       2253,\
    \ December 1997.\n"
- title: 14.  Full Copyright Statement
  contents:
  - "14.  Full Copyright Statement\n   Copyright (C) The Internet Society (1999).\
    \  All Rights Reserved.\n   This document and translations of it may be copied\
    \ and furnished to\n   others, and derivative works that comment on or otherwise\
    \ explain it\n   or assist in its implementation may be prepared, copied, published\n\
    \   and distributed, in whole or in part, without restriction of any\n   kind,\
    \ provided that the above copyright notice and this paragraph are\n   included\
    \ on all such copies and derivative works.  However, this\n   document itself\
    \ may not be modified in any way, such as by removing\n   the copyright notice\
    \ or references to the Internet Society or other\n   Internet organizations, except\
    \ as needed for the purpose of\n   developing Internet standards in which case\
    \ the procedures for\n   copyrights defined in the Internet Standards process\
    \ must be\n   followed, or as required to translate it into languages other than\n\
    \   English.\n   The limited permissions granted above are perpetual and will\
    \ not be\n   revoked by the Internet Society or its successors or assigns.\n \
    \  This document and the information contained herein is provided on an\n   \"\
    AS IS\" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING\n   TASK FORCE\
    \ DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING\n   BUT NOT LIMITED\
    \ TO ANY WARRANTY THAT THE USE OF THE INFORMATION\n   HEREIN WILL NOT INFRINGE\
    \ ANY RIGHTS OR ANY IMPLIED WARRANTIES OF\n   MERCHANTABILITY OR FITNESS FOR A\
    \ PARTICULAR PURPOSE.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is currently provided\
    \ by the\n   Internet Society.\n"
