- title: __initial_text__
  contents:
  - "               Internet Control Message Protocol (ICMPv6)\n        for the Internet\
    \ Protocol Version 6 (IPv6) Specification\n"
- title: Status of This Memo
  contents:
  - "Status of This Memo\n   This document specifies an Internet standards track protocol\
    \ for the\n   Internet community, and requests discussion and suggestions for\n\
    \   improvements.  Please refer to the current edition of the \"Internet\n   Official\
    \ Protocol Standards\" (STD 1) for the standardization state\n   and status of\
    \ this protocol.  Distribution of this memo is unlimited.\n"
- title: Copyright Notice
  contents:
  - "Copyright Notice\n   Copyright (C) The Internet Society (2006).\n"
- title: Abstract
  contents:
  - "Abstract\n   This document describes the format of a set of control messages\
    \ used\n   in ICMPv6 (Internet Control Message Protocol).  ICMPv6 is the\n   Internet\
    \ Control Message Protocol for Internet Protocol version 6\n   (IPv6).\n"
- title: Table of Contents
  contents:
  - "Table of Contents\n   1. Introduction ....................................................2\n\
    \   2. ICMPv6 (ICMP for IPv6) ..........................................3\n  \
    \    2.1. Message General Format .....................................3\n    \
    \  2.2. Message Source Address Determination .......................5\n      2.3.\
    \ Message Checksum Calculation ...............................5\n      2.4. Message\
    \ Processing Rules ...................................5\n   3. ICMPv6 Error Messages\
    \ ...........................................8\n      3.1. Destination Unreachable\
    \ Message ............................8\n      3.2. Packet Too Big Message ....................................10\n\
    \      3.3. Time Exceeded Message .....................................11\n  \
    \    3.4. Parameter Problem Message .................................12\n   4.\
    \ ICMPv6 Informational Messages ..................................13\n      4.1.\
    \ Echo Request Message ......................................13\n      4.2. Echo\
    \ Reply Message ........................................14\n   5. Security Considerations\
    \ ........................................15\n      5.1. Authentication and Confidentiality\
    \ of ICMP Messages .......15\n      5.2. ICMP Attacks ..............................................16\n\
    \   6. IANA Considerations ............................................17\n  \
    \    6.1. Procedure for New ICMPV6 Type and Code Value Assignments ..17\n    \
    \  6.2. Assignments for This Document .............................18\n   7. References\
    \ .....................................................19\n      7.1. Normative\
    \ References ......................................19\n      7.2. Informative\
    \ References ....................................19\n   8. Acknowledgements ...............................................20\n\
    \   Appendix A - Changes since RFC 2463................................21\n"
- title: 1. Introduction
  contents:
  - "1. Introduction\n   The Internet Protocol version 6 (IPv6) uses the Internet\
    \ Control\n   Message Protocol (ICMP) as defined for IPv4 [RFC-792], with a number\n\
    \   of changes.  The resulting protocol is called ICMPv6 and has an IPv6\n   Next\
    \ Header value of 58.\n   This document describes the format of a set of control\
    \ messages used\n   in ICMPv6.  It does not describe the procedures for using\
    \ these\n   messages to achieve functions like Path MTU discovery; these\n   procedures\
    \ are described in other documents (e.g., [PMTU]).  Other\n   documents may also\
    \ introduce additional ICMPv6 message types, such as\n   Neighbor Discovery messages\
    \ [IPv6-DISC], subject to the general rules\n   for ICMPv6 messages given in Section\
    \ 2 of this document.\n   Terminology defined in the IPv6 specification [IPv6]\
    \ and the IPv6\n   Routing and Addressing specification [IPv6-ADDR] applies to\
    \ this\n   document as well.\n   This document obsoletes RFC 2463 [RFC-2463] and\
    \ updates RFC 2780\n   [RFC-2780].\n   The key words \"MUST\", \"MUST NOT\", \"\
    REQUIRED\", \"SHALL\", \"SHALL NOT\",\n   \"SHOULD\", \"SHOULD NOT\", \"RECOMMENDED\"\
    , \"MAY\", and \"OPTIONAL\" in this\n   document are to be interpreted as described\
    \ in [RFC-2119].\n"
- title: 2. ICMPv6 (ICMP for IPv6)
  contents:
  - "2. ICMPv6 (ICMP for IPv6)\n   ICMPv6 is used by IPv6 nodes to report errors encountered\
    \ in\n   processing packets, and to perform other internet-layer functions,\n\
    \   such as diagnostics (ICMPv6 \"ping\").  ICMPv6 is an integral part of\n  \
    \ IPv6, and the base protocol (all the messages and behavior required\n   by this\
    \ specification) MUST be fully implemented by every IPv6 node.\n"
- title: 2.1.  Message General Format
  contents:
  - "2.1.  Message General Format\n   Every ICMPv6 message is preceded by an IPv6\
    \ header and zero or more\n   IPv6 extension headers.  The ICMPv6 header is identified\
    \ by a Next\n   Header value of 58 in the immediately preceding header.  (This\
    \ is\n   different from the value used to identify ICMP for IPv4.)\n   The ICMPv6\
    \ messages have the following general format:\n       0                   1  \
    \                 2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |     Code      |          Checksum             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                                                               |\n      +   \
    \                      Message Body                          +\n      |      \
    \                                                         |\n   The type field\
    \ indicates the type of the message.  Its value\n   determines the format of the\
    \ remaining data.\n   The code field depends on the message type.  It is used\
    \ to create an\n   additional level of message granularity.\n   The checksum field\
    \ is used to detect data corruption in the ICMPv6\n   message and parts of the\
    \ IPv6 header.\n   ICMPv6 messages are grouped into two classes: error messages\
    \ and\n   informational messages.  Error messages are identified as such by a\n\
    \   zero in the high-order bit of their message Type field values.  Thus,\n  \
    \ error messages have message types from 0 to 127; informational\n   messages\
    \ have message types from 128 to 255.\n   This document defines the message formats\
    \ for the following ICMPv6\n   messages:\n      ICMPv6 error messages:\n     \
    \     1    Destination Unreachable      (see Section 3.1)\n          2    Packet\
    \ Too Big               (see Section 3.2)\n          3    Time Exceeded      \
    \          (see Section 3.3)\n          4    Parameter Problem            (see\
    \ Section 3.4)\n          100  Private experimentation\n          101  Private\
    \ experimentation\n          127  Reserved for expansion of ICMPv6 error messages\n\
    \      ICMPv6 informational messages:\n          128  Echo Request           \
    \      (see Section 4.1)\n          129  Echo Reply                   (see Section\
    \ 4.2)\n          200  Private experimentation\n          201  Private experimentation\n\
    \          255  Reserved for expansion of ICMPv6 informational messages\n   Type\
    \ values 100, 101, 200, and 201 are reserved for private\n   experimentation.\
    \  They are not intended for general use.  It is\n   expected that multiple concurrent\
    \ experiments will be done with the\n   same type values.  Any wide-scale and/or\
    \ uncontrolled usage should\n   obtain real allocations as defined in Section\
    \ 6.\n   Type values 127 and 255 are reserved for future expansion of the type\n\
    \   value range if there is a shortage in the future.  The details of\n   this\
    \ are left for future work.  One possible way of doing this that\n   would not\
    \ cause any problems with current implementations is that if\n   the type equals\
    \ 127 or 255, the code field should be used for the new\n   assignment.  Existing\
    \ implementations would ignore the new\n   assignments as specified in Section\
    \ 2.4, (b).  The new messages using\n   these expanded type values could assign\
    \ fields in the message body\n   for its code values.\n   Sections 3 and 4 describe\
    \ the message formats for the ICMPv6 error\n   message types 1 through 4 and informational\
    \ message types 128 and\n   129.\n   Inclusion of, at least, the start of the\
    \ invoking packet is intended\n   to allow the originator of a packet that has\
    \ resulted in an ICMPv6\n   error message to identify the upper-layer protocol\
    \ and process that\n   sent the packet.\n"
- title: 2.2.  Message Source Address Determination
  contents:
  - "2.2.  Message Source Address Determination\n   A node that originates an ICMPv6\
    \ message has to determine both the\n   Source and Destination IPv6 Addresses\
    \ in the IPv6 header before\n   calculating the checksum.  If the node has more\
    \ than one unicast\n   address, it MUST choose the Source Address of the message\
    \ as follows:\n   (a) If the message is a response to a message sent to one of\
    \ the\n       node's unicast addresses, the Source Address of the reply MUST be\n\
    \       that same address.\n   (b) If the message is a response to a message sent\
    \ to any other\n       address, such as\n       - a multicast group address,\n\
    \       - an anycast address implemented by the node, or\n       - a unicast address\
    \ that does not belong to the node\n      the Source Address of the ICMPv6 packet\
    \ MUST be a unicast address\n      belonging to the node.  The address SHOULD\
    \ be chosen according to\n      the rules that would be used to select the source\
    \ address for any\n      other packet originated by the node, given the destination\
    \ address\n      of the packet.  However, it MAY be selected in an alternative\
    \ way\n      if this would lead to a more informative choice of address\n    \
    \  reachable from the destination of the ICMPv6 packet.\n"
- title: 2.3.  Message Checksum Calculation
  contents:
  - "2.3.  Message Checksum Calculation\n   The checksum is the 16-bit one's complement\
    \ of the one's complement\n   sum of the entire ICMPv6 message, starting with\
    \ the ICMPv6 message\n   type field, and prepended with a \"pseudo-header\" of\
    \ IPv6 header\n   fields, as specified in [IPv6, Section 8.1].  The Next Header\
    \ value\n   used in the pseudo-header is 58.  (The inclusion of a pseudo-header\n\
    \   in the ICMPv6 checksum is a change from IPv4; see [IPv6] for the\n   rationale\
    \ for this change.)\n   For computing the checksum, the checksum field is first\
    \ set to zero.\n"
- title: 2.4.  Message Processing Rules
  contents:
  - "2.4.  Message Processing Rules\n   Implementations MUST observe the following\
    \ rules when processing\n   ICMPv6 messages (from [RFC-1122]):\n   (a) If an ICMPv6\
    \ error message of unknown type is received at its\n       destination, it MUST\
    \ be passed to the upper-layer process that\n       originated the packet that\
    \ caused the error, where this can be\n       identified (see Section 2.4, (d)).\n\
    \   (b) If an ICMPv6 informational message of unknown type is received,\n    \
    \   it MUST be silently discarded.\n   (c) Every ICMPv6 error message (type <\
    \ 128) MUST include as much of\n       the IPv6 offending (invoking) packet (the\
    \ packet that caused the\n       error) as possible without making the error message\
    \ packet exceed\n       the minimum IPv6 MTU [IPv6].\n   (d) In cases where the\
    \ internet-layer protocol is required to pass an\n       ICMPv6 error message\
    \ to the upper-layer process, the upper-layer\n       protocol type is extracted\
    \ from the original packet (contained in\n       the body of the ICMPv6 error\
    \ message) and used to select the\n       appropriate upper-layer process to handle\
    \ the error.\n       In cases where it is not possible to retrieve the upper-layer\n\
    \       protocol type from the ICMPv6 message, the ICMPv6 message is\n       silently\
    \ dropped after any IPv6-layer processing.  One example of\n       such a case\
    \ is an ICMPv6 message with an unusually large amount\n       of extension headers\
    \ that does not have the upper-layer protocol\n       type due to truncation of\
    \ the original packet to meet the minimum\n       IPv6 MTU [IPv6] limit.  Another\
    \ example is an ICMPv6 message with\n       an ESP extension header for which\
    \ it is not possible to decrypt\n       the original packet due to either truncation\
    \ or the\n       unavailability of the state necessary to decrypt the packet.\n\
    \   (e) An ICMPv6 error message MUST NOT be originated as a result of\n      \
    \ receiving the following:\n       (e.1) An ICMPv6 error message.\n       (e.2)\
    \ An ICMPv6 redirect message [IPv6-DISC].\n       (e.3) A packet destined to an\
    \ IPv6 multicast address.  (There are\n             two exceptions to this rule:\
    \ (1) the Packet Too Big Message\n             (Section 3.2) to allow Path MTU\
    \ discovery to work for IPv6\n             multicast, and (2) the Parameter Problem\
    \ Message, Code 2\n             (Section 3.4) reporting an unrecognized IPv6 option\
    \ (see\n             Section 4.2 of [IPv6]) that has the Option Type highest-\n\
    \             order two bits set to 10).\n       (e.4) A packet sent as a link-layer\
    \ multicast (the exceptions\n             from e.3 apply to this case, too).\n\
    \       (e.5) A packet sent as a link-layer broadcast (the exceptions\n      \
    \       from e.3 apply to this case, too).\n       (e.6) A packet whose source\
    \ address does not uniquely identify a\n             single node -- e.g., the\
    \ IPv6 Unspecified Address, an IPv6\n             multicast address, or an address\
    \ known by the ICMP message\n             originator to be an IPv6 anycast address.\n\
    \   (f) Finally, in order to limit the bandwidth and forwarding costs\n      \
    \ incurred by originating ICMPv6 error messages, an IPv6 node MUST\n       limit\
    \ the rate of ICMPv6 error messages it originates.  This\n       situation may\
    \ occur when a source sending a stream of erroneous\n       packets fails to heed\
    \ the resulting ICMPv6 error messages.\n       Rate-limiting of forwarded ICMP\
    \ messages is out of scope of this\n       specification.\n       A recommended\
    \ method for implementing the rate-limiting function\n       is a token bucket,\
    \ limiting the average rate of transmission to\n       N, where N can be either\
    \ packets/second or a fraction of the\n       attached link's bandwidth, but allowing\
    \ up to B error messages to\n       be transmitted in a burst, as long as the\
    \ long-term average is\n       not exceeded.\n       Rate-limiting mechanisms\
    \ that cannot cope with bursty traffic\n       (e.g., traceroute) are not recommended;\
    \ for example, a simple\n       timer-based implementation, allowing an error\
    \ message every T\n       milliseconds (even with low values for T), is not reasonable.\n\
    \       The rate-limiting parameters SHOULD be configurable.  In the case\n  \
    \     of a token-bucket implementation, the best defaults depend on\n       where\
    \ the implementation is expected to be deployed (e.g., a\n       high-end router\
    \ vs. an embedded host).  For example, in a\n       small/mid-size device, the\
    \ possible defaults could be B=10,\n       N=10/s.\n   NOTE: THE RESTRICTIONS\
    \ UNDER (e) AND (f) ABOVE TAKE PRECEDENCE OVER\n   ANY REQUIREMENT ELSEWHERE IN\
    \ THIS DOCUMENT FOR ORIGINATING ICMP ERROR\n   MESSAGES.\n   The following sections\
    \ describe the message formats for the above\n   ICMPv6 messages.\n"
- title: 3. ICMPv6 Error Messages
  contents:
  - '3. ICMPv6 Error Messages

    '
- title: 3.1.  Destination Unreachable Message
  contents:
  - "3.1.  Destination Unreachable Message\n       0                   1         \
    \          2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |     Code      |          Checksum             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                             Unused                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    As much of invoking packet                 |\n   \
    \   +                as possible without the ICMPv6 packet          +\n      |\
    \                exceeding the minimum IPv6 MTU [IPv6]          |\n   IPv6 Fields:\n\
    \   Destination Address\n                  Copied from the Source Address field\
    \ of the invoking\n                  packet.\n   ICMPv6 Fields:\n   Type     \
    \      1\n   Code           0 - No route to destination\n                  1 -\
    \ Communication with destination\n                        administratively prohibited\n\
    \                  2 - Beyond scope of source address\n                  3 - Address\
    \ unreachable\n                  4 - Port unreachable\n                  5 - Source\
    \ address failed ingress/egress policy\n                  6 - Reject route to\
    \ destination\n   Unused         This field is unused for all code values.\n \
    \                 It must be initialized to zero by the originator\n         \
    \         and ignored by the receiver.\n   Description\n   A Destination Unreachable\
    \ message SHOULD be generated by a router, or\n   by the IPv6 layer in the originating\
    \ node, in response to a packet\n   that cannot be delivered to its destination\
    \ address for reasons other\n   than congestion.  (An ICMPv6 message MUST NOT\
    \ be generated if a\n   packet is dropped due to congestion.)\n   If the reason\
    \ for the failure to deliver is lack of a matching entry\n   in the forwarding\
    \ node's routing table, the Code field is set to 0.\n   (This error can occur\
    \ only in nodes that do not hold a \"default\n   route\" in their routing tables.)\n\
    \   If the reason for the failure to deliver is administrative\n   prohibition\
    \ (e.g., a \"firewall filter\"), the Code field is set to 1.\n   If the reason\
    \ for the failure to deliver is that the destination is\n   beyond the scope of\
    \ the source address, the Code field is set to 2.\n   This condition can occur\
    \ only when the scope of the source address is\n   smaller than the scope of the\
    \ destination address (e.g., when a\n   packet has a link-local source address\
    \ and a global-scope destination\n   address) and the packet cannot be delivered\
    \ to the destination\n   without leaving the scope of the source address.\n  \
    \ If the reason for the failure to deliver cannot be mapped to any of\n   other\
    \ codes, the Code field is set to 3.  Example of such cases are\n   an inability\
    \ to resolve the IPv6 destination address into a\n   corresponding link address,\
    \ or a link-specific problem of some sort.\n   One specific case in which a Destination\
    \ Unreachable message is sent\n   with a code 3 is in response to a packet received\
    \ by a router from a\n   point-to-point link, destined to an address within a\
    \ subnet assigned\n   to that same link (other than one of the receiving router's\
    \ own\n   addresses).  In such a case, the packet MUST NOT be forwarded back\n\
    \   onto the arrival link.\n   A destination node SHOULD originate a Destination\
    \ Unreachable message\n   with Code 4 in response to a packet for which the transport\
    \ protocol\n   (e.g., UDP) has no listener, if that transport protocol has no\n\
    \   alternative means to inform the sender.\n   If the reason for the failure\
    \ to deliver is that the packet with this\n   source address is not allowed due\
    \ to ingress or egress filtering\n   policies, the Code field is set to 5.\n \
    \  If the reason for the failure to deliver is that the route to the\n   destination\
    \ is a reject route, the Code field is set to 6.  This may\n   occur if the router\
    \ has been configured to reject all the traffic for\n   a specific prefix.\n \
    \  Codes 5 and 6 are more informative subsets of code 1.\n   For security reasons,\
    \ it is recommended that implementations SHOULD\n   allow sending of ICMP destination\
    \ unreachable messages to be\n   disabled, preferably on a per-interface basis.\n\
    \   Upper Layer Notification\n   A node receiving the ICMPv6 Destination Unreachable\
    \ message MUST\n   notify the upper-layer process if the relevant process can\
    \ be\n   identified (see Section 2.4, (d)).\n"
- title: 3.2.  Packet Too Big Message
  contents:
  - "3.2.  Packet Too Big Message\n       0                   1                  \
    \ 2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2\
    \ 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |     Code      |          Checksum             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                             MTU                               |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    As much of invoking packet                 |\n   \
    \   +               as possible without the ICMPv6 packet           +\n      |\
    \               exceeding the minimum IPv6 MTU [IPv6]           |\n   IPv6 Fields:\n\
    \   Destination Address\n                  Copied from the Source Address field\
    \ of the invoking\n                  packet.\n   ICMPv6 Fields:\n   Type     \
    \      2\n   Code           Set to 0 (zero) by the originator and ignored by the\n\
    \                  receiver.\n   MTU            The Maximum Transmission Unit\
    \ of the next-hop link.\n   Description\n   A Packet Too Big MUST be sent by a\
    \ router in response to a packet\n   that it cannot forward because the packet\
    \ is larger than the MTU of\n   the outgoing link.  The information in this message\
    \ is used as part\n   of the Path MTU Discovery process [PMTU].\n   Originating\
    \ a Packet Too Big Message makes an exception to one of the\n   rules as to when\
    \ to originate an ICMPv6 error message.  Unlike other\n   messages, it is sent\
    \ in response to a packet received with an IPv6\n   multicast destination address,\
    \ or with a link-layer multicast or\n   link-layer broadcast address.\n   Upper\
    \ Layer Notification\n   An incoming Packet Too Big message MUST be passed to\
    \ the upper-layer\n   process if the relevant process can be identified (see Section\
    \ 2.4,\n   (d)).\n"
- title: 3.3.  Time Exceeded Message
  contents:
  - "3.3.  Time Exceeded Message\n       0                   1                   2\
    \                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |     Code      |          Checksum             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                             Unused                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    As much of invoking packet                 |\n   \
    \   +               as possible without the ICMPv6 packet           +\n      |\
    \               exceeding the minimum IPv6 MTU [IPv6]           |\n   IPv6 Fields:\n\
    \   Destination Address\n                  Copied from the Source Address field\
    \ of the invoking\n                  packet.\n   ICMPv6 Fields:\n   Type     \
    \      3\n   Code           0 - Hop limit exceeded in transit\n              \
    \    1 - Fragment reassembly time exceeded\n   Unused         This field is unused\
    \ for all code values.\n                  It must be initialized to zero by the\
    \ originator\n                  and ignored by the receiver.\n   Description\n\
    \   If a router receives a packet with a Hop Limit of zero, or if a\n   router\
    \ decrements a packet's Hop Limit to zero, it MUST discard the\n   packet and\
    \ originate an ICMPv6 Time Exceeded message with Code 0 to\n   the source of the\
    \ packet.  This indicates either a routing loop or\n   too small an initial Hop\
    \ Limit value.\n   An ICMPv6 Time Exceeded message with Code 1 is used to report\n\
    \   fragment reassembly timeout, as specified in [IPv6, Section 4.5].\n   Upper\
    \ Layer Notification\n   An incoming Time Exceeded message MUST be passed to the\
    \ upper-layer\n   process if the relevant process can be identified (see Section\
    \ 2.4,\n   (d)).\n"
- title: 3.4.  Parameter Problem Message
  contents:
  - "3.4.  Parameter Problem Message\n       0                   1               \
    \    2                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1\
    \ 2 3 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |     Code      |          Checksum             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \                            Pointer                            |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |                    As much of invoking packet                 |\n   \
    \   +               as possible without the ICMPv6 packet           +\n      |\
    \               exceeding the minimum IPv6 MTU [IPv6]           |\n   IPv6 Fields:\n\
    \   Destination Address\n                  Copied from the Source Address field\
    \ of the invoking\n                  packet.\n   ICMPv6 Fields:\n   Type     \
    \      4\n   Code           0 - Erroneous header field encountered\n         \
    \         1 - Unrecognized Next Header type encountered\n                  2 -\
    \ Unrecognized IPv6 option encountered\n   Pointer        Identifies the octet\
    \ offset within the\n                  invoking packet where the error was detected.\n\
    \                  The pointer will point beyond the end of the ICMPv6\n     \
    \             packet if the field in error is beyond what can fit\n          \
    \        in the maximum size of an ICMPv6 error message.\n   Description\n   If\
    \ an IPv6 node processing a packet finds a problem with a field in\n   the IPv6\
    \ header or extension headers such that it cannot complete\n   processing the\
    \ packet, it MUST discard the packet and SHOULD\n   originate an ICMPv6 Parameter\
    \ Problem message to the packet's source,\n   indicating the type and location\
    \ of the problem.\n   Codes 1 and 2 are more informative subsets of Code 0.\n\
    \   The pointer identifies the octet of the original packet's header\n   where\
    \ the error was detected.  For example, an ICMPv6 message with a\n   Type field\
    \ of 4, Code field of 1, and Pointer field of 40 would\n   indicate that the IPv6\
    \ extension header following the IPv6 header of\n   the original packet holds\
    \ an unrecognized Next Header field value.\n   Upper Layer Notification\n   A\
    \ node receiving this ICMPv6 message MUST notify the upper-layer\n   process if\
    \ the relevant process can be identified (see Section 2.4,\n   (d)).\n"
- title: 4. ICMPv6 Informational Messages
  contents:
  - '4. ICMPv6 Informational Messages

    '
- title: 4.1.  Echo Request Message
  contents:
  - "4.1.  Echo Request Message\n       0                   1                   2\
    \                   3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3\
    \ 4 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |     Code      |          Checksum             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \           Identifier          |        Sequence Number        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Data ...\n      +-+-+-+-+-\n   IPv6 Fields:\n   Destination Address\n\
    \                  Any legal IPv6 address.\n   ICMPv6 Fields:\n   Type       \
    \    128\n   Code           0\n   Identifier     An identifier to aid in matching\
    \ Echo Replies\n                  to this Echo Request.  May be zero.\n   Sequence\
    \ Number\n                  A sequence number to aid in matching Echo Replies\n\
    \                  to this Echo Request.  May be zero.\n   Data           Zero\
    \ or more octets of arbitrary data.\n   Description\n   Every node MUST implement\
    \ an ICMPv6 Echo responder function that\n   receives Echo Requests and originates\
    \ corresponding Echo Replies.  A\n   node SHOULD also implement an application-layer\
    \ interface for\n   originating Echo Requests and receiving Echo Replies, for\
    \ diagnostic\n   purposes.\n   Upper Layer Notification\n   Echo Request messages\
    \ MAY be passed to processes receiving ICMP\n   messages.\n"
- title: 4.2.  Echo Reply Message
  contents:
  - "4.2.  Echo Reply Message\n       0                   1                   2  \
    \                 3\n       0 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9 0 1 2 3 4\
    \ 5 6 7 8 9 0 1\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Type      |     Code      |          Checksum             |\n   \
    \   +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n      |\
    \           Identifier          |        Sequence Number        |\n      +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n\
    \      |     Data ...\n      +-+-+-+-+-\n   IPv6 Fields:\n   Destination Address\n\
    \                  Copied from the Source Address field of the invoking\n    \
    \              Echo Request packet.\n   ICMPv6 Fields:\n   Type           129\n\
    \   Code           0\n   Identifier     The identifier from the invoking Echo\
    \ Request message.\n   Sequence Number\n                  The sequence number\
    \ from the invoking Echo Request\n                  message.\n   Data        \
    \   The data from the invoking Echo Request message.\n   Description\n   Every\
    \ node MUST implement an ICMPv6 Echo responder function that\n   receives Echo\
    \ Requests and originates corresponding Echo Replies.  A\n   node SHOULD also\
    \ implement an application-layer interface for\n   originating Echo Requests and\
    \ receiving Echo Replies, for diagnostic\n   purposes.\n   The source address\
    \ of an Echo Reply sent in response to a unicast\n   Echo Request message MUST\
    \ be the same as the destination address of\n   that Echo Request message.\n \
    \  An Echo Reply SHOULD be sent in response to an Echo Request message\n   sent\
    \ to an IPv6 multicast or anycast address.  In this case, the\n   source address\
    \ of the reply MUST be a unicast address belonging to\n   the interface on which\
    \ the Echo Request message was received.\n   The data received in the ICMPv6 Echo\
    \ Request message MUST be returned\n   entirely and unmodified in the ICMPv6 Echo\
    \ Reply message.\n   Upper Layer Notification\n   Echo Reply messages MUST be\
    \ passed to the process that originated an\n   Echo Request message.  An Echo\
    \ Reply message MAY be passed to\n   processes that did not originate the Echo\
    \ Request message.\n   Note that there is no limitation on the amount of data\
    \ that can be\n   put in Echo Request and Echo Reply Messages.\n"
- title: 5. Security Considerations
  contents:
  - '5. Security Considerations

    '
- title: 5.1.  Authentication and Confidentiality of ICMP Messages
  contents:
  - "5.1.  Authentication and Confidentiality of ICMP Messages\n   ICMP protocol packet\
    \ exchanges can be authenticated using the IP\n   Authentication Header [IPv6-AUTH]\
    \ or IP Encapsulating Security\n   Payload Header [IPv6-ESP].  Confidentiality\
    \ for the ICMP protocol\n   packet exchanges can be achieved using the IP Encapsulating\
    \ Security\n   Payload Header [IPv6-ESP].\n   [SEC-ARCH] describes the IPsec handling\
    \ of ICMP traffic in detail.\n"
- title: 5.2.  ICMP Attacks
  contents:
  - "5.2.  ICMP Attacks\n   ICMP messages may be subject to various attacks.  A complete\n\
    \   discussion can be found in the IP Security Architecture [IPv6-SA].  A\n  \
    \ brief discussion of these attacks and their prevention follows:\n   1. ICMP\
    \ messages may be subject to actions intended to cause the\n      receiver to\
    \ believe the message came from a different source from\n      that of the message\
    \ originator.  The protection against this\n      attack can be achieved by applying\
    \ the IPv6 Authentication\n      mechanism [IPv6-AUTH] to the ICMP message.\n\
    \   2. ICMP messages may be subject to actions intended to cause the\n      message\
    \ or the reply to it to go to a destination different from\n      that of the\
    \ message originator's intention.  The protection\n      against this attack can\
    \ be achieved by using the Authentication\n      Header [IPv6-AUTH] or the Encapsulating\
    \ Security Payload Header\n      [IPv6-ESP].  The Authentication Header provides\
    \ the protection\n      against change for the source and the destination address\
    \ of the\n      IP packet.  The Encapsulating Security Payload Header does not\n\
    \      provide this protection, but the ICMP checksum calculation\n      includes\
    \ the source and the destination addresses, and the\n      Encapsulating Security\
    \ Payload Header protects the checksum.\n      Therefore, the combination of ICMP\
    \ checksum and the Encapsulating\n      Security Payload Header provides protection\
    \ against this attack.\n      The protection provided by the Encapsulating Security\
    \ Payload\n      Header will not be as strong as the protection provided by the\n\
    \      Authentication Header.\n   3. ICMP messages may be subject to changes in\
    \ the message fields, or\n      payload.  The authentication [IPv6-AUTH] or encryption\
    \ [IPv6-ESP]\n      of the ICMP message protects against such actions.\n   4.\
    \ ICMP messages may be used to attempt denial-of-service attacks by\n      sending\
    \ back to back erroneous IP packets.  An implementation that\n      correctly\
    \ followed Section 2.4, paragraph (f), of this\n      specification, would be\
    \ protected by the ICMP error rate limiting\n      mechanism.\n   5. The exception\
    \ number 2 of rule e.3 in Section 2.4 gives a\n      malicious node the opportunity\
    \ to cause a denial-of-service attack\n      to a multicast source.  A malicious\
    \ node can send a multicast\n      packet with an unknown destination option marked\
    \ as mandatory,\n      with the IPv6 source address of a valid multicast source.\
    \  A large\n      number of destination nodes will send an ICMP Parameter Problem\n\
    \      Message to the multicast source, causing a denial-of-service\n      attack.\
    \  The way multicast traffic is forwarded by the multicast\n      routers requires\
    \ that the malicious node be part of the correct\n      multicast path, i.e.,\
    \ near to the multicast source.  This attack\n      can only be avoided by securing\
    \ the multicast traffic.  The\n      multicast source should be careful while\
    \ sending multicast traffic\n      with the destination options marked as mandatory,\
    \ because they can\n      cause a denial-of-service attack to themselves if the\
    \ destination\n      option is unknown to a large number of destinations.\n  \
    \ 6. As the ICMP messages are passed to the upper-layer processes, it\n      is\
    \ possible to perform attacks on the upper layer protocols (e.g.,\n      TCP)\
    \ with ICMP [TCP-attack].  It is recommended that the upper\n      layers perform\
    \ some form of validation of ICMP messages (using the\n      information contained\
    \ in the payload of the ICMP message) before\n      acting upon them.  The actual\
    \ validation checks are specific to\n      the upper layers and are out of the\
    \ scope of this specification.\n      Protecting the upper layer with IPsec mitigates\
    \ these attacks.\n      ICMP error messages signal network error conditions that\
    \ were\n      encountered while processing an internet datagram.  Depending on\n\
    \      the particular scenario, the error conditions being reported might\n  \
    \    or might not get solved in the near term.  Therefore, reaction to\n     \
    \ ICMP error messages may depend not only on the error type and code\n      but\
    \ also on other factors, such as the time at which the error\n      messages are\
    \ received, previous knowledge of the network error\n      conditions being reported,\
    \ and knowledge of the network scenario\n      in which the receiving host is\
    \ operating.\n"
- title: 6. IANA Considerations
  contents:
  - '6. IANA Considerations

    '
- title: 6.1.  Procedure for New ICMPV6 Type and Code Value Assignments
  contents:
  - "6.1.  Procedure for New ICMPV6 Type and Code Value Assignments\n   The IPv6 ICMP\
    \ header defined in this document contains the following\n   fields that carry\
    \ values assigned from IANA-managed name spaces: Type\n   and Code.  Code field\
    \ values are defined relative to a specific Type\n   value.\n   Values for the\
    \ IPv6 ICMP Type fields are allocated using the\n   following procedure:\n   1.\
    \ The IANA should allocate and permanently register new ICMPv6 type\n      codes\
    \ from IETF RFC publication.  This is for all RFC types,\n      including standards\
    \ track, informational, and experimental status,\n      that originate from the\
    \ IETF and have been approved by the IESG\n      for publication.\n   2. IETF\
    \ working groups with working group consensus and area director\n      approval\
    \ can request reclaimable ICMPV6 type code assignments from\n      the IANA. \
    \ The IANA will tag the values as \"reclaimable in\n      future\".\n      The\
    \ \"reclaimable in the future\" tag will be removed when an RFC is\n      published\
    \ that documents the protocol as defined in 1.  This will\n      make the assignment\
    \ permanent and update the reference on the IANA\n      web pages.\n      At the\
    \ point where the ICMPv6 type values are 85% assigned, the\n      IETF will review\
    \ the assignments tagged \"reclaimable in the\n      future\" and inform the IANA\
    \ which ones should be reclaimed and\n      reassigned.\n   3. Requests for new\
    \ ICMPv6 type value assignments from outside the\n      IETF are only made through\
    \ the publication of an IETF document,\n      per 1 above.  Note also that documents\
    \ published as \"RFC Editor\n      contributions\" [RFC-3978] are not considered\
    \ IETF documents.\n   The assignment of new Code values for the Type values defined\
    \ in this\n   document require standards action or IESG approval.  The policy\
    \ for\n   assigning Code values for new IPv6 ICMP Types not defined in this\n\
    \   document should be defined in the document defining the new Type\n   values.\n"
- title: 6.2.  Assignments for This Document
  contents:
  - "6.2.  Assignments for This Document\n   The following has updated assignments\
    \ located at:\n      http://www.iana.org/assignments/icmpv6-parameters\n   The\
    \ IANA has reassigned ICMPv6 type 1 \"Destination Unreachable\" code\n   2, which\
    \ was unassigned in [RFC-2463], to:\n         2 - Beyond scope of source address\n\
    \   The IANA has assigned the following two new codes values for ICMPv6\n   type\
    \ 1 \"Destination Unreachable\":\n         5 - Source address failed ingress/egress\
    \ policy\n         6 - Reject route to destination\n   The IANA has assigned the\
    \ following new type values:\n         100  Private experimentation\n        \
    \ 101  Private experimentation\n         127  Reserved for expansion of ICMPv6\
    \ error messages\n         200  Private experimentation\n         201  Private\
    \ experimentation\n         255  Reserved for expansion of ICMPv6 informational\
    \ messages\n"
- title: 7. References
  contents:
  - '7. References

    '
- title: 7.1.  Normative References
  contents:
  - "7.1.  Normative References\n   [IPv6]       Deering, S. and R. Hinden, \"Internet\
    \ Protocol, Version 6\n                (IPv6) Specification\", RFC 2460, December\
    \ 1998.\n   [IPv6-DISC]  Narten, T., Nordmark, E., and W. Simpson, \"Neighbor\n\
    \                Discovery for IP Version 6 (IPv6)\", RFC 2461, December\n   \
    \             1998.\n   [RFC-792]    Postel, J., \"Internet Control Message Protocol\"\
    , STD 5,\n                RFC 792, September 1981.\n   [RFC-2463]   Conta, A.\
    \ and S. Deering, \"Internet Control Message\n                Protocol (ICMPv6)\
    \ for the Internet Protocol Version 6\n                (IPv6) Specification\"\
    , RFC 2463, December 1998.\n   [RFC-1122]   Braden, R., \"Requirements for Internet\
    \ Hosts -\n                Communication Layers\", STD 3, RFC 1122, October 1989.\n\
    \   [RFC-2119]   Bradner, S., \"Key words for use in RFCs to Indicate\n      \
    \          Requirement Levels\", BCP 14, RFC 2119, March 1997.\n   [RFC-3978]\
    \   Bradner, S., \"IETF Rights in Contributions\", BCP 78, RFC\n             \
    \   3978, March 2005.\n"
- title: 7.2.  Informative References
  contents:
  - "7.2.  Informative References\n   [RFC-2780]   Bradner, S. and V. Paxson, \"IANA\
    \ Allocation Guidelines\n                For Values In the Internet Protocol and\
    \ Related\n                Headers\", BCP 37, RFC 2780, March 2000.\n   [IPv6-ADDR]\
    \  Hinden, R. and S. Deering, \"Intpernet Protocol Version 6\n               \
    \ (IPv6) Addressing Architecture\", RFC 3513, April 2003.\n   [PMTU]       McCann,\
    \ J., Deering, S., and J. Mogul, \"Path MTU\n                Discovery for IP\
    \ version 6\", RFC 1981, August 1996.\n   [IPv6-SA]    Kent, S. and R. Atkinson,\
    \ \"Security Architecture for the\n                Internet Protocol\", RFC 2401,\
    \ November 1998.\n   [IPv6-AUTH]  Kent, S., \"IP Authentication Header\", RFC\
    \ 4302, December\n                2005.\n   [IPv6-ESP]   Kent, S., \"IP Encapsulating\
    \ Security Payload (ESP)\", RFC\n                4203, December 2005.\n   [SEC-ARCH]\
    \   Kent, S. and K. Seo, \"Security Architecture for the\n                Internet\
    \ Protocol\", RFC 4301, December 2005.\n   [TCP-attack] Gont, F., \"ICMP attacks\
    \ against TCP\", Work in Progress.\n"
- title: 8.  Acknowledgements
  contents:
  - "8.  Acknowledgements\n   The document is derived from previous ICMP documents\
    \ of the SIPP and\n   IPng working group.\n   The IPng working group, and particularly\
    \ Robert Elz, Jim Bound, Bill\n   Simpson, Thomas Narten, Charlie Lynn, Bill Fink,\
    \ Scott Bradner,\n   Dimitri Haskin, Bob Hinden, Jun-ichiro Itojun Hagino, Tatuya\
    \ Jinmei,\n   Brian Zill, Pekka Savola, Fred Templin, and Elwyn Davies (in\n \
    \  chronological order) provided extensive review information and\n   feedback.\n\
    \   Bob Hinden was the document editor for this document.\n"
- title: Appendix A - Changes since RFC 2463
  contents:
  - "Appendix A - Changes since RFC 2463\n   The following changes were made from\
    \ RFC 2463:\n   - Edited the Abstract to make it a little more elaborate.\n  \
    \ - Corrected typos in Section 2.4, where references to sub-bullet e.2\n     were\
    \ supposed to be references to e.3.\n   - Removed the Timer-based and the Bandwidth-based\
    \ methods from the\n     example rate-limiting mechanism for ICMP error messages.\
    \  Added\n     Token-bucket based method.\n   - Added specification that all ICMP\
    \ error messages shall have exactly\n     32 bits of type-specific data, so that\
    \ receivers can reliably find\n     the embedded invoking packet even when they\
    \ don't recognize the\n     ICMP message Type.\n   - In the description of Destination\
    \ Unreachable messages, Code 3,\n     added rule prohibiting forwarding of packets\
    \ back onto point-to-\n     point links from which they were received, if their\
    \ destination\n     addresses belong to the link itself (\"anti-ping-ponging\"\
    \ rule).\n   - Added description of Time Exceeded Code 1 (fragment reassembly\n\
    \     timeout).\n   - Added \"beyond scope of source address\", \"source address\
    \ failed\n     ingress/egress policy\", and \"reject route to destination\" messages\n\
    \     to the family of \"unreachable destination\" type ICMP error messages\n\
    \     (Section 3.1).\n   - Reserved some ICMP type values for experimentation.\n\
    \   - Added a NOTE in Section 2.4 that specifies ICMP message processing\n   \
    \  rules precedence.\n   - Added ICMP REDIRECT to the list in Section 2.4, (e)\
    \ of cases in\n     which ICMP error messages are not to be generated.\n   - Made\
    \ minor editorial changes in Section 2.3 on checksum\n     calculation, and in\
    \ Section 5.2.\n   - Clarified in Section 4.2, regarding the Echo Reply Message;\
    \ the\n     source address of an Echo Reply to an anycast Echo Request should\n\
    \     be a unicast address, as in the case of multicast.\n   - Revised the Security\
    \ Considerations section.  Added the use of the\n     Encapsulating Security Payload\
    \ Header for authentication.  Changed\n     the requirement of an option of \"\
    not allowing unauthenticated ICMP\n     messages\" to MAY from SHOULD.\n   - Added\
    \ a new attack in the list of possible ICMP attacks in Section\n     5.2.\n  \
    \ - Separated References into Normative and Informative.\n   - Added reference\
    \ to RFC 2780 \"IANA Allocation Guidelines For Values\n     In the Internet Protocol\
    \ and Related Headers\".  Also added a note\n     that this document updates RFC\
    \ 2780.\n   - Added a procedure for new ICMPv6 Type and Code value assignments\
    \ in\n     the IANA Considerations section.\n   - Replaced word \"send\" with\
    \ \"originate\" to make it clear that ICMP\n     packets being forwarded are out\
    \ of scope of this specification.\n   - Changed the ESP and AH references to the\
    \ updated ESP and AH\n     documents.\n   - Added reference to the updated IPsec\
    \ Security Architecture\n     document.\n   - Added a SHOULD requirement for allowing\
    \ the sending of ICMP\n     destination unreachable messages to be disabled.\n\
    \   - Simplified the source address selection of the ICMPv6 packet.\n   - Reorganized\
    \ the General Message Format (Section 2.1).\n   - Removed the general packet format\
    \ from Section 2.1.  It refers to\n     Sections 3 and 4 for packet formats now.\n\
    \   - Added text about attacks to the transport protocols that could\n     potentially\
    \ be caused by ICMP.\n"
- title: Authors' Addresses
  contents:
  - "Authors' Addresses\n   Alex Conta\n   Transwitch Corporation\n   3 Enterprise\
    \ Drive\n   Shelton, CT 06484\n   USA\n   EMail: aconta@txc.com\n   Stephen Deering\n\
    \   Cisco Systems, Inc.\n   170 West Tasman Drive\n   San Jose, CA 95134-1706\n\
    \   USA\n   Mukesh Gupta, Ed.\n   Tropos Networks\n   555 Del Rey Avenue\n   Sunnyvale,\
    \ CA 94085\n   Phone: +1 408-331-6889\n   EMail: mukesh.gupta@tropos.com\n"
- title: Full Copyright Statement
  contents:
  - "Full Copyright Statement\n   Copyright (C) The Internet Society (2006).\n   This\
    \ document is subject to the rights, licenses and restrictions\n   contained in\
    \ BCP 78, and except as set forth therein, the authors\n   retain all their rights.\n\
    \   This document and the information contained herein are provided on an\n  \
    \ \"AS IS\" basis and THE CONTRIBUTOR, THE ORGANIZATION HE/SHE REPRESENTS\n  \
    \ OR IS SPONSORED BY (IF ANY), THE INTERNET SOCIETY AND THE INTERNET\n   ENGINEERING\
    \ TASK FORCE DISCLAIM ALL WARRANTIES, EXPRESS OR IMPLIED,\n   INCLUDING BUT NOT\
    \ LIMITED TO ANY WARRANTY THAT THE USE OF THE\n   INFORMATION HEREIN WILL NOT\
    \ INFRINGE ANY RIGHTS OR ANY IMPLIED\n   WARRANTIES OF MERCHANTABILITY OR FITNESS\
    \ FOR A PARTICULAR PURPOSE.\n"
- title: Intellectual Property
  contents:
  - "Intellectual Property\n   The IETF takes no position regarding the validity or\
    \ scope of any\n   Intellectual Property Rights or other rights that might be\
    \ claimed to\n   pertain to the implementation or use of the technology described\
    \ in\n   this document or the extent to which any license under such rights\n\
    \   might or might not be available; nor does it represent that it has\n   made\
    \ any independent effort to identify any such rights.  Information\n   on the\
    \ procedures with respect to rights in RFC documents can be\n   found in BCP 78\
    \ and BCP 79.\n   Copies of IPR disclosures made to the IETF Secretariat and any\n\
    \   assurances of licenses to be made available, or the result of an\n   attempt\
    \ made to obtain a general license or permission for the use of\n   such proprietary\
    \ rights by implementers or users of this\n   specification can be obtained from\
    \ the IETF on-line IPR repository at\n   http://www.ietf.org/ipr.\n   The IETF\
    \ invites any interested party to bring to its attention any\n   copyrights, patents\
    \ or patent applications, or other proprietary\n   rights that may cover technology\
    \ that may be required to implement\n   this standard.  Please address the information\
    \ to the IETF at\n   ietf-ipr@ietf.org.\n"
- title: Acknowledgement
  contents:
  - "Acknowledgement\n   Funding for the RFC Editor function is provided by the IETF\n\
    \   Administrative Support Activity (IASA).\n"
