Abstract This document defines a YANG module for the Network Address Translation (NAT) function.
Network Address Translation from IPv4 to IPv4 (NAT44), Network Address and Protocol Translation from IPv6 Clients to IPv4 Servers (NAT64), customer side translator (CLAT), Stateless IP/ICMP Translation (SIIT), Explicit Address Mappings (EAM) for SIIT, IPv6 to IPv6 Network Prefix Translation (NPTv6), and Destination NAT are covered in this document.
This document defines a data model for Network Address Translation (NAT) and Network Prefix Translation (NPT)
capabilities using the YANG data modeling language [RFC7950].
Traditional NAT is defined in [RFC2663], while Carrier Grade NAT (CGN) is defined in [RFC6888].
Unlike traditional NAT, the CGN is used to optimize the usage of global IP address space at the scale of a domain: a CGN is not managed by end users but by service providers instead.
This document covers both traditional NATs and CGNs.
This document also covers NAT64 [RFC6146], customer side translator (CLAT)
Stateless IP/ICMP Translation (SIIT) [RFC7915], Explicit Address Mappings (EAM) for SIIT [
RFC7757], IPv6 Network Prefix Translation (NPTv6) [RFC6296], and Destination NAT.
The full set of translation schemes that are in scope is included in Section 2.2.
Some examples are provided in Appendix A.
These examples are not intended to be exhaustive.
This document makes use of the following terms:  Basic Network Address Translation from IPv4 to IPv4 (NAT44): translation is limited to IP addresses alone (Section 2.1 of [RFC3022]).
Network Address Port Translator (NAPT): translation in NAPT is extended to include IP addresses and transport identifiers (such as a TCP/UDP port or ICMP query ID); refer to Section 2.2 of [RFC3022].
A NAPT may use an extra identifier, in addition to the five transport tuples, to disambiguate bindings [RFC6619].
Destination NAT: is a translation that acts on the destination IP address and/or destination port number.
This flavor is usually deployed in load balancers or at devices in front of public servers.
Port restricted IPv4 address: an IPv4 address with a restricted port set.
Multiple hosts may share the same IPv4 address; however, their port sets must not overlap [RFC7596].
Restricted port set: a non overlapping range of allowed external ports to use for NAT operation.
Source ports of IPv4 packets translated by a NAT must belong to the assigned port set.
The port set is used for all port aware IP protocols [RFC7596].
Internal host: a host that may need to use a translation capability to send to and receive traffic from the Internet.
the IP address/prefix of an internal host.
the IP address/prefix assigned by a translator to an internal host; this is the address that will be seen by a remote host on the Internet.
Mapping: denotes a state at the translator that is necessary for network address and/or port translation.
Dynamic implicit mapping: is created implicitly as a side effect of processing a packet (e.g., an initial TCP SYN packet) that requires a new mapping.
A validity lifetime is associated with this mapping.
Dynamic explicit mapping: is created as a result of an explicit request, e.g., a Port Control Protocol (PCP) message [RFC6887].
A validity lifetime is associated with this mapping.
Static explicit mapping: is created using, e.g., a command line interface (CLI).
This mapping is likely to be maintained by the NAT function till an explicit action is executed to remove it.
The usage of the term NAT in this document refers to any translation flavor (NAT44, NAT64, etc.)
This document uses the term "session" as defined in [RFC2663] and [RFC6146] for NAT64.
This document follows the guidelines of [RFC8407], uses the common YANG types defined in [RFC6991], and adopts the Network Management Datastore Architecture (NMDA).
The meaning of the symbols in tree diagrams is defined in [RFC8340].
Overview of the NAT YANG Data Model 2.1.
The NAT YANG module is designed to cover dynamic implicit mappings and static explicit mappings.
The required functionality to instruct dynamic explicit mappings is defined in separate documents such as [YANG PCP].
Considerations about instructing by explicit dynamic means (e.g., [RFC6887], [RFC6736], or [RFC8045]) are out of scope.
As a reminder, REQ 9 of [RFC6888] requires that a CGN must implement a protocol giving subscribers explicit control over NAT mappings; that protocol should be the Port Control Protocol [RFC6887].
A single NAT device can have multiple NAT instances; each of these instances can be provided with its own policies (e.g., be responsible for serving a group of hosts).
This document does not make any assumption about how internal hosts or flows are associated with a given NAT instance.
The NAT YANG module assumes that each NAT instance can be enabled/ disabled, be provisioned with a specific set of configuration data, and maintain its own mapping tables.
The NAT YANG module allows for a NAT instance to be provided with multiple NAT policies (/nat/instances/instance/policy).
The document does not make any assumption about how flows are associated with a given NAT policy of a given NAT instance.
Classification filters are out of scope.
Defining multiple NAT instances or configuring multiple NAT policies within one single NAT instance is implementation and deployment specific.
This YANG module does not provide any method to instruct a NAT function to enable the logging feature or to specify the information to be logged for administrative or regulatory reasons (Section 2.3 of [RFC6908] and REQ 12 of [RFC6888]).
Those considerations are out of the scope of this document.
The following translation modes are supported:  Basic NAT44
NAT  Port restricted NAT  Stateful NAT64 (including with destination based Pref64::/n [RFC7050])
NPTv6  Combination of Basic NAT/NAPT and Destination NAT
Combination of port restricted and Destination NAT
Combination of NAT64 and EAM  Stateful and Stateless NAT64 [RFC8513] specifies an extension to the NAT YANG module to support Dual Stack Lite (DS Lite).
The YANG "feature" statement is used to indicate which of the different translation modes is relevant for a specific data node.
The following translation modes do not require that dedicated features be defined:  Port restricted NAT:
This mode corresponds to supplying port  restriction policies to a NAPT or NAT64
Combination of Basic NAT/NAPT and Destination NAT:
This mode corresponds to setting 'dst nat enable' for Basic NAT44 or NAPT.
Combination of port restricted and Destination NAT:
This mode can be achieved by configuring a NAPT with port restriction policies (port set restrict) together with a destination IP address pool (dst ip address pool).
Combination of NAT64 and EAM:
This mode corresponds to configuring static mappings for NAT64.
A NAT64 implementation can be instructed to behave in the stateless mode for a given prefix by setting the parameter (nat64 prefixes/stateless enable).
A NAT64 implementation may behave in both stateful and stateless modes if, in addition to appropriately setting the parameter (nat64 prefixes/stateless enable), an external IPv4 address pool is configured.
The NAT YANG module provides a method to retrieve the capabilities of a NAT instance (including a list of supported translation modes, a list of supported protocols, the supported NAT mapping types, the supported NAT filtering types, the behavior for handling fragments (all, out of order, in order), and the support statuses for the following: port restriction, port range allocation, port parity preservation, and port preservation).
This document assumes NAT behavioral recommendations for UDP [RFC4787], TCP [RFC5382], and ICMP [RFC5508] are enabled by default.
Furthermore, the NAT YANG module relies upon the recommendations detailed in [RFC6888] and [RFC7857].
The module is structured to support protocols other than UDP, TCP, and ICMP.
Concretely, the module allows the operator to enable translation for other transport protocols when required (/nat/instances/instance/policy/transport protocols).
Moreover, the mapping table is designed so that it can indicate any transport protocol.
For example, this module may be used to manage a NAT capable of the Datagram Congestion Control Protocol (DCCP)
Future extensions may be needed to cover NAT related considerations that are specific to other transport protocols such as the Stream Control Transmission Protocol (SCTP)
Typically, the mapping entry can be extended to record two optional SCTP specific parameters: the Internal Verification Tag (Int VTag) and External Verification Tag (Ext VTag).
This document only specifies transport protocol specific timers for UDP, TCP, and ICMP.
While some timers could potentially be generalized for other connection oriented protocols, this document does not follow such an approach because there is no standard document specifying such generic behavior.
Future documents may be edited to clarify how to reuse TCP specific timers when needed.
IP Addresses Used for Translation
The NAT YANG module assumes that blocks of IP external addresses (external ip address pool) can be provisioned to the NAT function.
These blocks may be contiguous or not.
This behavior is aligned with [RFC6888], which specifies that a NAT function should not have any limitations on the size or the contiguity of the external address pool.
In particular, the NAT function must be configurable with contiguous or non contiguous external IPv4 address ranges.
To accommodate traditional NAT, the module allows for a single IP address to be configured for external  ip address pool.
Likewise, one or multiple IP address pools may be configured for Destination NAT (dst ip address pool).
Port Set Assignment Port numbers can be assigned by a NAT individually (that is, a single port is assigned on a per session basis), but this port allocation scheme may not be optimal for logging purposes (Section 12 of [RFC6269]).
A NAT function should be able to assign port sets (e.g., [RFC7753]) to optimize the volume of the logging data (REQ 14 of [RFC6888]).
Both allocation schemes are supported in the NAT YANG module.
When port set assignment is activated (i.e., port allocation  type port range allocation), the NAT can be provided with the size of the port set to be assigned (port set size).
Some NATs restrict the source port numbers (e.g., Lightweight 4over6
[RFC7596] and Mapping of Address and Port with Encapsulation (MAP E)
Two schemes of port set assignments (port set restrict) are supported in this document:  Simple port range: is defined by two port values, the start and the end of the port range [RFC8045].
Algorithmic: an algorithm is defined in [RFC7597] to characterize the set of ports that can be used.
An ICMP mapping entry maintains an association between the following information: (internal src address, internal dst address,
> (external src address, external dst address, external ICMP/ICMPv6 identifier)
As a reminder, all the ICMP Query messages contain an 'Identifier' field, which is referred to in this document as the 'ICMP Identifier'.
To cover TCP, UDP, and ICMP, the NAT YANG module assumes the following structure of a mapping entry:
Indicates how the mapping was instantiated.
For example, it may indicate whether a mapping is dynamically instantiated by a packet or statically configured.
transport protocol:  Indicates the transport protocol (e.g., UDP, TCP, and ICMP) of a given mapping.
Indicates the source IP address/prefix as used by an internal host.
Indicates the source port number (or ICMP identifier) as used by an internal host.
Indicates the source IP address/prefix as assigned by the NAT.
Indicates the source port number (or ICMP identifier) as assigned by the NAT.
Indicates the destination IP address/prefix as used by an internal host when sending a packet to a remote host.
Indicates the destination port number as used by an internal host when sending a packet to a remote host.
Indicates the destination IP address/prefix used by a NAT when processing a packet issued by an internal host towards a remote host.
Indicates the destination port number used by a NAT when processing a packet issued by an internal host towards a remote host.
In order to cover both NAT64 and NAT44 flavors, the NAT mapping structure allows for the inclusion of an IPv4 or an IPv6 address as an internal IP address.
Remaining fields are common to both NAT schemes.
For example, the mapping that will be created by a NAT64 upon receipt of a TCP SYN from source address 2001:db8:aaaa::1 and source port number 25636 to destination IP address 2001:db8:1234::198.51.100.1 and destination port number 8080 is shown in Table 2.
This example assumes Endpoint Dependent Mapping (EDM).
Example of an EDM NAT64 Mapping
The mappings that will be created by a NAT44 upon receipt of an ICMP request from source address 198.51.100.1 and ICMP identifier (ID1) to destination IP address 198.51.100.11 is depicted in Table 3.
This example assumes Endpoint Independent Mapping (EIM).
Example of an EIM NAT44 Mapping Entry
The mapping that will be created by a NAT64 (EIM mode) upon receipt of an ICMP request from source address 2001:
db8:aaaa::1 and ICMP identifier (ID1) to destination IP address 2001:
db8:1234::198.51.100.1 is shown in Table 4.
Example of an EIM NAT64 Mapping Entry Note that a mapping table is maintained only for stateful NAT functions.
Particularly:  No mapping table is maintained for NPTv6 given that it is stateless and transport agnostic.
The double translations are stateless in CLAT if a dedicated IPv6 prefix is provided for CLAT.
If not, a stateful NAT44 will be required.
No per flow mapping is maintained for EAM [RFC7757].
No mapping table is maintained for Stateless IPv4/IPv6 translation.
As a reminder, in such deployments, internal IPv6 nodes are addressed using IPv4 translatable IPv6 addresses, which enable them to be accessed by IPv4 nodes
In order to comply with CGN deployments in particular, the NAT YANG module allows limiting the number of external ports per subscriber (port quota) and the amount of state memory allocated per mapping and per subscriber (mapping limits and connection limits).
According to [RFC6888], the module is designed to allow for the following:  Per subscriber limits are configurable by the NAT administrator.
Per subscriber limits are configurable independently per the transport protocol.
Administrator adjustable thresholds to prevent a single subscriber from consuming excessive CPU resources from the NAT (e.g., rate  limit the subscriber's creation of new mappings) can be configured.
Table 5 lists the various limits that can be set using the NAT YANG module.
Once a limit is reached, packets that would normally trigger new port mappings or be translated because they match existing mappings, are dropped by the translator.
NAT Limits Table 6 describes limits that, once exceeded, will trigger notifications to be generated:
configured to a NAT instance.
In order to prevent a NAT implementation from generating frequent notifications, the NAT YANG module supports the following limits (Table 7) used to control how frequent notifications can be generated.
That is, notifications are subject to rate limiting imposed by these intervals.
Table 7: Notification Intervals 2.10.
Binding the NAT Function to an External Interface
The module is designed to specify an external realm on which the NAT function must be applied (external realm).
The module supports indicating an interface as an external realm [RFC8343], but the module is extensible so that other choices can be indicated in the future (e.g., Virtual Routing and Forwarding (VRF) instance).
Distinct external realms can be provided as a function of the NAT policy (see, for example, Section 4 of [RFC7289]).
If no external realm is provided, this assumes that the system is able to determine the external interface (VRF instance, etc.)
on which the NAT will be applied.
Typically, the WAN and LAN interfaces of Customer Premises Equipment (CPE) are determined by the CPE.
MIB Section of 5.1 of [RFC7659] indicates that the NATV2 MIB assumes that the following information is configured on the NAT by some means, which is not specified in [RFC7659]:
The set of address realms to which the device connects.
For the CGN case, per subscriber information including the subscriber index, address realm, assigned prefix or address, and (possibly) policies regarding address pool selection in the various possible address realms to which the subscriber may connect.
The set of NAT instances running on the device, identified by NAT instance index and name.
The port mapping, filtering, pooling, and fragment behaviors for each NAT instance.
The set of protocols supported by each NAT instance.
Address pools for each NAT instance, including for each pool the pool index, address realm, and minimum and maximum port numbers.
Static address and port mapping entries.
All the above parameters can be configured by means of the NAT YANG module.
Unlike the NATV2 MIB, the NAT YANG module allows the configuration of multiple policies per NAT instance.
The tree structure of the NAT YANG module is provided below: module: ietf nat
identityref  rw per interface binding?
rw destination ipv4 prefix  [ipv4 prefix]
rw external ip address pool
rw external ip pool    inet:
rw dst ip address pool  [pool id]
rw dst in ip pool?
[quota type] {napt44 or nat64}?
rw port set {napt44 or nat64}?
rw timers {napt44 or nat64}?
rw tcp trans open timeout?
rw tcp trans close timeout?
rw tcp in syn timeout?
if:interface ref  rw mapping limits {napt44 or nat64}?
{basic nat44 or napt44 or
ro dropped address limit packets?
ro dropped address limit bytes?
ro dropped port limit packets?
ro dropped port limit bytes?
ro dropped subscriber limit packets?
ro dropped subscriber limit bytes?
ro pools stats {basic nat44 or napt44 or nat64}?
ro ports stats {napt44 or nat64}?
ro port stats {napt44 or nat64}?
gauge32 notifications:  n nat pool event {basic nat44 or napt44 or
percent  ro notify ports threshold?
NAT YANG Module <CODE BEGINS> file "ietf
" module ietf nat { yang version 1.1; namespace "urn:ietf:params:xml:ns:
Christian Jacquenet <mailto:christian.jacquenet@orange.com> Author:  Suresh Vinapamula <mailto:sureshk@juniper.net
This module is a YANG module for NAT implementations.
NAT44, Network Address and Protocol Translation from IPv6 Clients to IPv4 Servers (NAT64), customer side translator (CLAT), Stateless IP/ICMP Translation (SIIT), Explicit Address Mappings (EAM) for SIIT, IPv6 Network Prefix Translation (NPTv6), and Destination NAT are covered.
IETF Trust and the persons identified as authors of the code.
Redistribution and use in source and binary forms, with or without modification, is permitted pursuant to, and subject to the license terms contained in, the Simplified BSD License set forth in Section 4.c of the IETF Trust's Legal Provisions Relating to IETF Documents (http://trustee.ietf.org/license info).
This version of this YANG module is part of RFC 8512; see the RFC itself for full legal notices."
; revision 2019 01 10 { description "Initial revision."; reference "RFC 8512:
If the internal IP address is not sufficient to uniquely disambiguate NAPT44 mappings, an additional attribute is required.
"Destination NAT is a translation that acts on the destination IP address and/or destination port number.
One or more public IPv4 addresses assigned to a NAT64 translator are shared among several IPv6 only clients."
In the stateless mode, an IP/ICMP translator converts IPv4 addresses to IPv6, and vice versa, solely based on the configuration of the stateless IP/ICMP translator and information contained within the packet being translated.
When a dedicated /64 prefix is not available for translation from DHCPv6 PD, the CLAT may perform NAT44 for all IPv4 LAN packets so that all the LAN originated IPv4 packets appear from a single IPv4 address and are then statelessly translated to one interface IPv6 address that is claimed by the CLAT via the Neighbor Discovery Protocol (NDP) and defended with Duplicate Address Detection."
; reference "RFC 6877: 464XLAT: Combination of Stateful and Stateless Translation";
} feature eam { description "Explicit Address Mapping (EAM) is a bidirectional coupling between an IPv4 prefix and an IPv6 prefix."
When only start port number is present, it represents a single port number."; leaf start port number { type inet:port number; description "Beginning of the port range."
../start port number' { error message "
The end port number must be greater than or equal to start port number."
It may be a simple port range, or use the Port Set Identifier (PSID) algorithm to represent a range of transport layer port numbers that will be used by a NAPT."; choice port type { default "port range"; description "Port type: port range or port set algo."; case port range { uses port number; } case port set algo { leaf psid offset { type uint8 { range "0..15"
; } description "The number of offset bits (a.k.a., 'a' bits).
Specifies the numeric value for the excluded port range/offset bits.
Allowed values are between 0 and 15."
The address sharing ratio would be 2^k."
mapping entry { description "NAT mapping entry.
If an attribute is not stored in the mapping/session table, it means the corresponding field of a packet that matches this entry is not rewritten by the NAT or this information is not required for NAT filtering purposes."; leaf index { type uint32; description "A unique identifier of a mapping entry.
This identifier can be automatically assigned by the NAT instance or be explicitly configured."
Values are taken from the IANA Protocol Numbers registry: <https://www.iana.org/assignments/protocol numbers/
For example, this field contains 6 for TCP, 17 for UDP, 33 for DCCP, or 132 for SCTP.
If this leaf is not instantiated, then the mapping applies to any protocol."
; } leaf internal src address { type inet:ip prefix; description "Corresponds to the source IPv4/IPv6 address/prefix of the packet received on an internal interface."
; } container internal src port { description "Corresponds to the source port of the packet received on an internal interface.
It is also used to indicate the internal source ICMP identifier.
; } container external src port { description "Source port of the packet sent on an external interface of the NAT.
It is also used to indicate the external source ICMP identifier."
; uses port number; } leaf internal dst address { type inet:ip prefix; description "Corresponds to the destination IP address/prefix of the packet received on an internal interface of the NAT.
For example, some NAT implementations support the translation of both source and destination addresses and port numbers, sometimes referred to as 'Twice NAT'."
; } container internal dst port { description "Corresponds to the destination port of the IP packet received on the internal interface.
It is also used to include the internal destination ICMP identifier."
It is also used to include the external destination ICMP identifier."
; uses port number; } leaf lifetime { type uint32; units "seconds"; description "When specified, it is used to track the connection that is fully formed (e.g., once the three way handshake TCP is completed) or the duration for maintaining an explicit mapping alive.
The mapping entry will be removed by the NAT instance once this lifetime is expired.
When reported in a get operation, the lifetime indicates the remaining validity lifetime.
Static mappings may not be associated with a lifetime.
If no lifetime is associated with a static mapping, an explicit action is required to remove that mapping."
This identifier can be automatically assigned or explicitly configured."; leaf id { type uint32; must '.
1'; description "NAT instance identifier.
Values are taken from the IANA Protocol Numbers registry.
; } leaf port randomization support { type boolean; description "Indicates whether port randomization is supported.
; } leaf paired address pooling support { type boolean; description
; reference "Section 4 of RFC 4787"
; } leaf address dependent mapping support { type boolean; description "Indicates whether address dependent mapping is supported."
That is, in particular the header is in the first packet.
Particularly useful when multiple translation flavors are supported.
If one type is supported by a NAT, this parameter is by default set to that type."
; } leaf per interface binding { type enumeration { enum disabled { description "
Disable the capability to associate an extra identifier with NAT mappings."
; } enum layer 2 { description "The NAT instance is able to associate a mapping with a Layer 2 identifier."
If supported, this mode of operation should be configurable, and it should be disabled by default in general purpose NAT devices.
If one single per interface binding behavior is supported by a NAT, this parameter is by default set to that behavior."
The IP addresses that match should not be translated.
If no prefix is defined, the NAT pass through bound to a given port applies for any destination address."
; description "An identifier of the NAT policy.
It must be unique within the NAT instance."
; } container clat parameters { if feature "clat"; description "CLAT parameters."; list clat ipv6 prefixes { key "ipv6 prefix"; description "464XLAT double translation treatment is stateless when a dedicated /64 is available for translation on the CLAT.
Otherwise, the CLAT will have both stateful and stateless translation since it requires NAT44 from the LAN to a single IPv4 address and then stateless translation to a single IPv6 address."
; reference "RFC 6877: 464XLAT:
Combination of Stateful and Stateless Translation"; leaf ipv6 prefix { type inet:
192.0.0.0/29 is the IPv4 service continuity prefix."
; reference "RFC 7335: IPv4 Service Continuity Prefix"; leaf ipv4 prefix { type inet:ipv4 prefix; description "464XLAT double translation treatment is stateless when a dedicated /64 is available for translation on the CLAT.
Otherwise, the CLAT will have both stateful and stateless translation since it requires NAT44 from the LAN to a single IPv4 address and then stateless translation to a single IPv6 address.
The CLAT performs NAT44 for all IPv4 LAN packets so that all the LAN originated IPv4 packets appear from a single IPv4 address and are then statelessly translated to one interface IPv6 address that is claimed by the CLAT.
An IPv4 address from this pool is also provided to an application that makes use of literals."
In its simplest form, NPTv6 interconnects two network links: one is an 'internal' network link attached to a leaf network within a single administrative domain, and the other is an 'external' network with connectivity to the global Internet."; reference "RFC 6296: IPv6 to IPv6 Network Prefix Translation"; leaf internal ipv6 prefix { type inet:ipv6 prefix; mandatory true
Each EAM describes a mapping between IPv4 and IPv6 prefixes/addresses."
; reference "Section 3.1 of RFC 7757"; leaf ipv4 prefix { type inet:
description "Provides one or a list of NAT64 prefixes with or without a list of destination IPv4 prefixes.
It allows mapping IPv4 address ranges to IPv6 prefixes.
For example: 192.0.2.0/24 is mapped to 2001:
198.51.100.0/24 is mapped to 2001:db8:122::/48.
"; reference "Section 5.1 of RFC 7050"; leaf nat64 prefix { type inet:
ipv6 prefix; mandatory true; description "A NAT64 prefix.
Can be a Network Specific Prefix (NSP) or a Well Known Prefix (WKP).
stateless IPv4/IPv6 translation should assign an NSP to their IPv4/IPv6 translation service.
NAT64, IPv4 translatable IPv6 addresses must use the selected NSP.
Both IPv4 translatable IPv6 addresses and IPv4 converted IPv6 addresses should use the same prefix."
A pool is a set of IP prefixes."; leaf pool id { type uint32; must '.
1'; description "An identifier that uniquely identifies the address pool within a NAT instance.
The port set is used to restrict the external source port numbers used by the translator."
; uses port set; } leaf dst nat enable { if feature "basic nat44 or napt44"; type boolean; default "false"; description "Enable/disable Destination NAT.
A NAT44 may be configured to enable Destination NAT, too."
TCP and UDP are supported by default."; leaf protocol id { type uint8; mandatory true; description "The upper layer protocol associated with this mapping.
Values are taken from the IANA Protocol Numbers registry.
For example, TCP, UDP, DCCP, and SCTP."
The subscriber mask is an integer that indicates the length of significant bits to be applied on the source IPv6 address (internal side) to unambiguously identify a user device (e.g., CPE).
Subscriber mask is a system wide configuration parameter that is used to enforce generic per subscriber policies (e.g., port quota).
The enforcement of these generic policies does not require the configuration of every subscriber's prefix.
db8:100:100::/56 prefix is assigned to a NAT64 serviced CPE.
db8:100:100::1 is the IPv6 address used by the client that resides in that CPE.
When the NAT64 receives a packet from this client, it applies the subscriber mask v6 (e.g., 56) on the source IPv6 address to compute the associated prefix for this client (2001:db8:100:100::/56).
For example, all addresses that belong to the 192.0.2.0/24 prefix must be processed by the NAT."
This is the recommended behavior for NAPT
; reference "RFC 4787: Network Address Translation (NAT)
; } enum port parity preservation { description "Indicates whether the NAT should preserve the port parity of the internal port number."
; } enum port range allocation { description "Indicates whether the NAT assigns a range of ports for an internal host.
This scheme allows the minimizing of the log volume."
It corresponds to the maximum number of ports to be used by a subscriber."; leaf port limit { type uint16; description "Configures a port quota to be assigned per subscriber.
allocation type   'port range allocation'"; if feature "napt44 or nat64"; description "Manages port set assignments."
That is the time a mapping will stay active without packets traversing the NAT."; reference "RFC 4787: Network Address Translation (NAT)
The value of the transitory open connection idle timeout.
A NAT should provide different configurable parameters for configuring the open and closing idle timeouts.
To accommodate deployments that consider a partially open timeout of 4 minutes as being excessive from a security standpoint, a NAT may allow the configured timeout to be less than 4 minutes.
However, a minimum default transitory connection idle timeout of 4 minutes is recommended.
The value of the transitory close connection idle timeout.
A NAT should provide different configurable parameters for configuring the open and closing idle timeouts."
If during this interval the NAT receives and translates an outbound SYN for the connection the NAT must silently drop the original unsolicited inbound SYN packet."
; type uint32; units "seconds"; default "2"; description "As long as the NAT has available resources, the NAT allows the fragments to arrive over the fragment min timeout interval.
An ICMP Query session timer must not expire in less than 60 seconds.
It is recommended that the ICMP Query session timer be made configurable"
; } leaf protocol { type uint8; description "The upper layer protocol associated with this port.
Values are taken from the IANA Protocol Numbers registry.
Ports in the hold down pool are not reassigned until hold down timeout expires.
The length of time and the maximum number of ports in this state must be configurable by the administrator.
This is necessary in order to prevent collisions between old and new mappings and sessions.
; type uint32; description "Limits the number of out of order fragments that can be handled."
When specified, this parameter overrides the one that may be indicated, eventually, by the 'status' of an individual ALG."
; } container notify pool usage { if feature "basic nat44 or napt44 or nat64"; description "Notification of pool usage when certain criteria are met."; leaf pool
../low threshold' { error message "
The high threshold must be greater than or equal to the low threshold."
; } description "Notification must be generated when the defined high threshold is reached.
For example, if a notification is required when the pool utilization reaches 90%, this configuration parameter must be set to 90.
; choice realm type { description "Can be an interface, VRF instance, etc."; case interface { description "External interface."; leaf external interface { type if:interface ref
; description "Name of the external interface."
When this limit is reached, packets that would normally trigger translation will be dropped."
id { type uint8; mandatory true
; description "The upper layer protocol.
Values are taken from the IANA Protocol Numbers registry.
; } leaf limit per instance { type uint32; units "bits/second"; description "Rate limit the number of new mappings and sessions per instance."
; } list limit per protocol { if feature "napt44 or nat64"; key "protocol id"; description "Configure limits per transport protocol"; leaf protocol id { type uint8; mandatory true; description "The upper layer protocol.
Values are taken from the IANA Protocol Numbers registry.
Notification must be generated when the defined threshold is reached.
Notification must be generated when the defined threshold is reached.
This must be initialized when the NAT instance is configured or rebooted."
; } container traffic statistics { description "Generic traffic statistics."; leaf sent packets { type yang:
; } leaf dropped packets { type yang:
zero based counter64; description "Number of dropped packets."
; } leaf dropped bytes { type yang:
zero based counter64; units "bytes"; description "Counter for dropped traffic in bytes.
zero based counter64; description "Number of dropped fragments on the external realm."
; } leaf dropped address limit packets { if feature "basic nat44 or napt44 or nat64"; type yang:
zero based counter64; units "bytes"; description "Counter of dropped packets because an address limit is reached, in bytes."
; } leaf dropped address packets { if feature "basic nat44 or napt44 or nat64"; type yang:
zero based counter64; units "bytes"; description "Counter of dropped packets because no address is available for allocation, in bytes."
; } leaf dropped port limit packets { if feature "napt44 or nat64"; type yang:
zero based counter64; units "bytes"; description "Counter of dropped packets because a port limit is reached, in bytes."
; } leaf dropped port packets { if feature "napt44 or nat64"; type yang:
zero based counter64; description "Number of dropped packets because no port is available for allocation."
; } leaf dropped port bytes { if feature "napt44 or nat64"; type yang:
zero based counter64; units "bytes"; description "Counter of dropped packets because no port is available for allocation, in bytes."
; } leaf dropped subscriber limit packets { if feature "basic nat44 or napt44 or nat64"; type yang:
zero based counter64; description "Number of dropped packets because the subscriber limit per instance is reached."
; } leaf dropped subscriber limit bytes { if feature "basic nat44 or napt44 or nat64"; type yang:
It includes both static and dynamic mappings.
It includes both static and dynamic mappings.
; description "The upper layer protocol.
The protocol is identified by protocol id.";
; } leaf discontinuity time { type yang:date and time; mandatory true; description "The time on the most recent occasion at which this pool counter suffered a discontinuity.
; description "Number of unallocated addresses from this pool."
Security Considerations Security considerations related to address and prefix translation are discussed in [RFC6888], [RFC6146], [RFC6877], [RFC6296], and [RFC7757].
The YANG module specified in this document defines a schema for data that is designed to be accessed via network management protocols such as NETCONF [RFC6241] or RESTCONF [RFC8040].
The lowest NETCONF layer is the secure transport layer, and the mandatory to implement secure transport is Secure Shell (SSH) [RFC6242].
The lowest RESTCONF layer is HTTPS, and the mandatory to implement secure transport is TLS [RFC8446].
The Network Configuration Access Control Model (NACM)
[RFC8341] provides the means to restrict access for particular NETCONF or RESTCONF users to a preconfigured subset of all available NETCONF or RESTCONF protocol operations and content.
All data nodes defined in the YANG module that can be created, modified, and deleted (i.e., config true, which is the default) are considered sensitive.
Write operations (e.g., edit config) applied to these data nodes without proper protection can negatively affect network operations.
The NAT YANG module provides a method to set parameters to prevent a user from aggressively using NAT resources (port quota), rate limit connections as a guard against DoS, or to enable notifications so that appropriate measures are enforced to anticipate traffic drops.
Access to privacy data maintained in the mapping table.
IANA Considerations IANA has registered the following URI in the "ns" subregistry within the "IETF XML Registry" [RFC3688]:
N/A; the requested URI is an XML namespace.
IANA has registered the following YANG module in the "YANG Module Names" subregistry [RFC7950] within the "YANG Parameters" registry.
This section provides a non exhaustive set of examples to illustrate the use of the NAT YANG module.
Traditional NAT44 is a Basic NAT44 or NAPT that is used to share the same IPv4 address among hosts that are owned by the same subscriber.
This is typically the NAT that is embedded in CPE devices.
This NAT is usually provided with one single external IPv4 address; disambiguating connections is achieved by rewriting the source port number.
The XML snippet to configure the external IPv4 address in such case together with a mapping entry is depicted below:
> 198.51.100.1/32 </external ip pool> </external ip address pool
The following shows the XML excerpt depicting a dynamic UDP mapping entry maintained by a traditional NAPT44.
In reference to this example, the UDP packet received with a source IPv4 address (192.0.2.1) and source port number (1568) is translated into a UDP packet having a source IPv4 address (198.51.100.1) and source port (15000).
The remaining lifetime of this mapping is 300 seconds.
> <type> dynamic explicit </type> <transport protocol> 17 </transport protocol> <internal src address> 192.0.2.1/32 </internal
src address> <internal src port
> <start port number> 1568 </start port number> </internal src port> <external src address> 198.51.100.1/32
> <external src port> <start port number> 15000 </start port number> </external src port> <lifetime> 300 </lifetime
The following XML snippet shows the example of the capabilities supported by a CGN as retrieved using NETCONF.
<capabilities> <nat flavor>napt44</nat flavor> <transport protocols> <protocol
id>1</protocol id> </transport protocols> <transport protocols
> </transport protocols> <transport protocols>
<protocol id>17</protocol id> </transport protocols> <restricted port support
> false </restricted port support> <static mapping support>
mapping support> <port randomization support> true </port randomization support> <port range allocation support> true </port range allocation support
> <port preservation suport> true </port preservation suport> <port parity preservation support> false </port parity preservation support>
<address roundrobin support> true </address roundrobin support
> <paired address pooling support> true </paired address pooling support> <endpoint independent mapping support>
true </endpoint independent mapping support> <
address dependent mapping support> true </address dependent mapping support> <address and port dependent mapping support> true </address and port dependent mapping support> <endpoint independent filtering support>
true </endpoint independent filtering support> <address dependent filtering> true </address dependent filtering> <address and port
dependent filtering> true </address and port dependent filtering> </capabilities
The following XML snippet shows the example of a CGN that is provisioned with one contiguous pool of external IPv4 addresses (198.51.100.0/24).
Further, the CGN is instructed to limit the number of allocated ports per subscriber to 1024.
Ports can be allocated by the CGN by assigning ranges of 256 ports (that is, a subscriber can be allocated up to four port ranges of 256 ports each).
id> <external ip pool> 198.51.100.0/24
</external ip pool> </external ip address pool> <port quota
> <port limit> 1024 </port limit> <quota type >
> <port set> <port set size
> 256 </port set size> </port
> An administrator may decide to allocate one single port range per subscriber (e.g., a port range of 1024 ports) as shown below: <instances> <instance
id> <external ip pool> 198.51.100.0/24
</external ip pool> </external ip address pool> <port quota
> <port limit> 1024 </port limit> <quota type >
> <port set> <port set size> 1024 </port set size> </port set
Through Figure 1 illustrates an example of the CGN pass through feature.
x2  from X1:x1   from X1:
Let's consider the example of a NAT64 that should use 2001:
db8:122:300::/56 to perform IPv6 address synthesis
The XML snippet to configure the NAT64 prefix in such case is depicted below: <nat64 prefixes>
> Let's now consider the example of a NAT64 that should use 2001:db8:122::/48 to perform IPv6 address synthesis
[RFC6052] only if the destination address matches 198.51.100.0/24.
The XML snippet to configure the NAT64 prefix in such case is shown below:
Stateless IP/ICMP Translation (SIIT) Let's consider the example of a stateless translator that is configured with 2001:db8:100::/40 to perform IPv6 address synthesis
Similar to the NAT64 case, the XML snippet to configure the NAT64 prefix in such case is depicted below: <nat64 prefixes>
> When the translator receives an IPv6 packet, for example, with a source address (2001:db8:1c0:2:21::) and destination address (2001:
192.0.2.33 is extracted from 2001:db8:1c0:2:21::  198.51.100.2 is extracted from 2001:db8:1c6:3364:2:: The translator transforms the IPv6 header into an IPv4 header using the IP/ICMP Translation Algorithm [RFC7915].
The IPv4 packets will include 192.0.2.33 as the source address and 198.51.100.2 as the destination address.
Also, a NAT64 can be instructed to behave in the stateless mode by providing the following configuration.
The same NAT64 prefix is used for constructing both IPv4 translatable IPv6 addresses and IPv4 converted IPv6 addresses (see Section 3.3 of [RFC6052]).
:db8:122:300::/56 </nat64 prefix> <stateless enable
> true </stateless enable> </nat64
Explicit Address Mappings (EAM) for Stateless IP/ICMP Translation (SIIT)
As specified in [RFC7757], an EAM consists of an IPv4 prefix and an IPv6 prefix.
Let's consider the set of EAM examples in Table 8.
The following XML excerpt illustrates how these EAMs can be configured using the NAT YANG module: <eam> <ipv4 prefix> 192.0.2.1/32
<ipv4 prefix> 192.0.2.192/29 </ipv4 prefix>
> EAMs may be enabled jointly with stateful NAT64.
This example shows a NAT64 function that supports static mappings: <capabilities> <nat flavor> nat64 </nat flavor> <static mapping support>
mapping support> <port randomization support> true </port randomization support> <port range allocation support> true </port range allocation support
> <port preservation suport> true </port preservation suport>
<address roundrobin support> true </address roundrobin support
> <paired address pooling support> true </paired address pooling support> <endpoint independent mapping support>
true </endpoint independent mapping support> <endpoint independent filtering support
> true </endpoint independent filtering support> </capabilities> A.7.
Static Mappings with Port Ranges
The following example shows a static mapping that instructs a NAT to translate packets issued from 192.0.2.1 and with source ports in the 100 500 range to 198.51.100.1:1100 1500.
> static </type> <transport protocol> 6 </transport protocol> <internal src address> 192.0.2.1/32 </internal
src address> <internal src port
> <end port number> 500 </end port number>
</internal src port> <external src address> 198.51.100.1/32
> <external src port> <start port number> 1100
</start port number> <end port number> 1500 </end port number> </external src port
Static Mappings with IP Prefixes
The following example shows a static mapping that instructs a NAT to translate TCP packets issued from 192.0.2.0/24 to 198.51.100.0/24.
> static </type> <transport protocol> 6 </transport protocol> <internal src address
</internal src address> <external src address> 198.51.100.0/24
The following XML snippet shows an example of a Destination NAT that is instructed to translate all packets having 192.0.2.1 as a destination IP address to 198.51.100.1.
> <dst in ip pool> 192.0.2.1/32 </dst
> <dst out ip pool
> 198.51.100.1/32 </dst out ip pool> </dst ip address pool
In order to instruct a NAT to translate TCP packets destined to '192.0.2.1:80' to '198.51.100.1:8080', the following XML snippet shows the static mapping configured on the NAT:
> static </type> <transport protocol> 6 </transport protocol> <internal dst address
> 192.0.2.1/32 </internal dst address> <internal dst port
<start port number> 80 </start port number> </internal dst port> <external dst address> 198.51.100.1/32 </external
> <external dst port> <start port number> 8080
In order to instruct a NAT to translate TCP packets destined to '192.0.2.1:80' (HTTP traffic) to 198.51.100.1 and '192.0.2.1:22' (SSH traffic) to 198.51.100.2, the following XML snippet shows the static mappings configured on the NAT: <mapping entry> <index>123</index> <type> static </type> <transport protocol> 6 </transport protocol> <internal dst address> 192.0.2.1/32 </internal
dst address> <internal dst port
<start port number> 80 </start port number> </internal dst port> <external dst address> 198.51.100.1/32 </external
> static </type> <transport protocol> 6 </transport protocol> <internal dst address
> 192.0.2.1/32 </internal dst address> <internal dst port
<start port number> 22 </start port number> </internal dst port> <external dst address
The NAT may also be instructed to proceed with both source and Destination NAT.
To do so, in addition to the above example to configure Destination NAT, the NAT may be provided, for example with a pool of external IP addresses (198.51.100.0/24) to use for source address translation.
An example of the corresponding XML snippet is provided hereafter:
<external ip address pool> <pool id>1</pool
id> <external ip pool> 198.51.100.0/24
> Instead of providing an external IP address to share, the NAT may be configured with static mapping entries that modify the internal IP address and/or port number.
The following XML snippet shows the example of a CLAT that is configured with 2001:db8:1234::/96 as a PLAT side IPv6 prefix and 2001:db8:aaaa::/96 as a CLAT side IPv6 prefix.
The CLAT is also provided with 192.0.0.1/32 (which is selected from the IPv4 service continuity prefix defined in [RFC7335]).
ipv6 prefixes> <clat ipv4 prefixes
> <ipv4 prefix> 192.0.0.1/32 </ipv4 prefix> </clat
Network Prefix Translation (NPTv6) Let's consider the example of an NPTv6 translator that should rewrite packets with the source prefix (fd03:
with the external prefix (2001:db8:1::/48).
The internal interface is "eth0" while the external interface is "eth1" (Figure 2).
Figure 2: Example of NPTv6
The XML snippet to configure NPTv6 prefixes in such case is depicted below: <nptv6 prefixes>
Figure 3 shows an example of an NPTv6 translator that interconnects two internal networks
d5cb:14f3::/48); each is translated using a dedicated prefix (2001:db8:1::/48 and 2001:db8:6666::/48, respectively).
Connecting Two Peer Networks To that aim, the following configuration is provided to the NPTv6 translator: <policy> <id>1</id> <nptv6 prefixes>
> <external realm> <external interface>
eth1 </external interface> </external realm
eth0 </external interface> </external realm
